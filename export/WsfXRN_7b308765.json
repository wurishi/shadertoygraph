{"ver":"0.1","info":{"id":"WsfXRN","date":"1559756185","viewed":126,"name":"2D Triangle Rotating","username":"trevortheblack","description":"A 2D rotating triangle.\nduh","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062\n#define M_ROOT_3_OVER_2 0.866025403784438646763723170752936183471402626905190314027\n\nconst float triRadius = 0.5;\n\n\nfloat triangleRecursion( in vec2 pc, float radius )\n{\n    float perimeter = radius * cos(M_PI/3.) / cos( mod(pc.y + iTime, 2.*M_PI/3.) - M_PI/3.);\n\n    if(pc.x < perimeter)\n        return 1.0;\n    \n    return -1.0;\n}\n\n\n// Accepts [0,1] uv coordinates\n// Outputs to polar coords \n// With [0.5, 0.5] as the center\n//(radius, theta)\n// where radius is [0, sqrt(0.25 + (0.5*aspect_ratio)^2)]\n// theta is [-PI, PI]\nvec2 polarCoords( in vec2 uv )\n{\n    vec2 uvPrime = uv;\n    float r = length(uvPrime);\n    float theta = atan(uvPrime.y, uvPrime.x);\n    return vec2(r, theta);\n}\n\nvec2 screenToWorld(vec2 screen)\n{\n    vec2 result = 2.0 * (screen/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = screenToWorld(fragCoord);\n    \n    // Get polar coordinates (radius: [0, 0.717], theta: [-M_PI, M_PI])\n    vec2 pc = polarCoords(uv);\n    \n    // Get depth of triangle\n    float tr = triangleRecursion(pc, triRadius);\n    \n    vec3 col;\n    if( tr != -1.0)\n    {    \n        col = 1. - vec3(tr, tr, tr);\n    }\n    else\n    {\n        // Time varying pixel color\n        col = 0.5 + 0.5*cos(pc.xyx+vec3(0,2,4));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}