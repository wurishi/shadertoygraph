{"ver":"0.1","info":{"id":"Mfy3Dh","date":"1733652859","viewed":122,"name":"Ludum dare 53 concept art","username":"z0rg","description":"Some never released concept art I did for our participation in the ludum dare 53, you can find the game just here \nhttps://shenoit.itch.io/galactic-delivery-starvesters2d","likes":20,"published":3,"flags":0,"usePreview":0,"tags":["2d","fuz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat _sqr(vec2 uv, vec2 s)\n{\n    vec2 l = abs(uv)-s;\n    return max(l.x, l.y);\n}\n\nfloat hash(float seed)\n{\n    return fract(sin(seed*123.456)*123.456);\n}\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a); \n    return mat2(c, -s, s, c);\n}\n\nfloat build(vec2 uv, vec2 sz, float seed)\n{\n    float base = _sqr(uv, sz);\n    \n    for (float i = 0.; i < 64.; ++i)\n    {\n        vec2 nuv = uv+sz*(vec2(hash(seed+i), hash(-i*.1))-.5)*2.*2.;\n        nuv *= r2d(i*acos(-1.)*.5);\n        float newBloc = _sqr(\n        nuv, \n        vec2(max(hash(i)*.1, .05)*vec2(.2,4.)));\n        base = min(base, newBloc);\n    }\n    \n    return base;\n}\n\nvec3 rdrtree(vec2 uv, vec3 col)\n{\n  float sharp = 40000.;\n  uv.x+= sin(uv.y*5.+uv.x*2.+iTime)*.02*sat(uv.y);\n  vec2 p = uv;\n  for (float i = 0.;i<6.;++i)\n  {\n    float off = mix(.3,.05,i/7.);\n    p+= vec2(0.,-off*.5);\n    p*=r2d(.6*sat(i));\n    p+= vec2(0.,-off*.5);\n    p.x+= sin(p.y*20.)*.02;\n    p.x = abs(p.x);\n    vec2 pos = p;\n\n    float shape = _sqr(pos, vec2(.03,off*.45));\n    shape -=.012\n    -texture(iChannel0,uv*.15).x*.02;\n    if(i<4.5)\n      col = mix(col, vec3(0.227,0.165,0.353)*.05,1.-sat(shape*sharp));\n    else\n    {\n      float cir = length(p)-.05;\n      col = mix(col, vec3(0.984,0.137,0.392)*.5,\n        1.-sat(cir*sharp));\n\n    }\n  }\n  return col;\n}\n\nvec3 draweyecreature(vec2 uv, vec3 col)\n{\n    float sharp = 40000.;\n    vec2 buv = uv;\n    float ban = atan(buv.y, buv.x);\n    float blob = length(buv)-.1-.01*sin(ban*7.+iTime)\n    -.01*sin(ban*2.-iTime*.15)\n    -.01*sin(ban*15.-iTime*.2);\n    vec2 buve = buv-vec2(sin(iTime), 0.)*.05;\n    \n    col = mix(col, vec3(0.), 1.-sat(blob*sharp));\n    float eye = length(buve)-.03;\n    eye = max(eye, abs(buve.y)-.02*sat(sin(iTime*3.)+.5));\n    vec3 innerEye= vec3(1.,0.,0.)*sat((length(buve)-.01)*sharp);\n    col = mix(col, innerEye, 1.-sat(eye*sharp));\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    float sharp = 40000.;\n    vec3 gradambient = mix(\n    vec3(0.153,0.608,0.749), \n    vec3(0.255,0.361,0.631),\n    sat(length(uv)*2.));\n    vec3 col = gradambient;\n    \n    uv.y -= -.2;\n    \n    vec2 uva = uv-vec2(.5, .07);\n     float grounda = uva.y-sin(uva.x*5.)*.05\n    -sin(uva.x*17.)*.025;\n    col = mix(col, col *.5, 1.-sat(grounda*sharp));\n    \n    float ground = uv.y-sin(uv.x*5.)*.05\n    -sin(uv.x*17.)*.025;\n    col = mix(col, vec3(0.), 1.-sat(ground*sharp));\n    //col = vec3(1.);\n    vec2 uvfo = uv-vec2(-0.2,.2);\n    vec2 uvf =uvfo*vec2(2.,1.);\n    uvf *= r2d(.25*acos(-1.));\n    float cir = abs(length(uvfo)-.04)-.01;\n    float floating = _sqr(uvf, vec2(.1,.1));\n    floating = max(floating, -cir);\n    col = mix(col, col*.2, 1.-sat(floating*sharp));\n    \n    col = rdrtree(uv*3.-vec2(0.6,-.15), col);\n    \n    col = draweyecreature(uv-vec2(-0.2,.1), col);\n    \n    col += gradambient*.5;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.xx;\n    float pix = .007;\n    uv = floor(uv/pix)*pix;\n    vec3 col = rdr(uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}