{"ver":"0.1","info":{"id":"McjXzW","date":"1706112847","viewed":49,"name":"Triangle From Tut","username":"pirpressure","description":"Simple Shader derived loosely from tutorial","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(in float r)\n{\n    vec3 a = vec3(0.168, -1.392, 0.778);\n    vec3 b = vec3(0.748, -2.032, -0.082);\n    vec3 c = vec3(1.168, 0.108, 0.778);\n    vec3 d = vec3(1.248, 0.358, 0.918);\n    return a + b*cos( 6.28318*(c*r+d));\n\n}\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{    \n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float t = sdEquilateralTriangle(uv, iTime * 0.65 + 5.5);\n    vec3 col = palette(length(uv) - (iTime * 0.63));\n    t = sin(t * 5.0)/5.0;\n    t = abs(t);\n    t = 0.1/t;\n    \n    col *= t;\n    \n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}