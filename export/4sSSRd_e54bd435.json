{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Chengarda recreates IQ's beautyPI logo (with some twists)\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453); \n    // sort of like a RNG (actually a hash), takes the fractional (errorful) part of a big number\n    // main idea is that small change in input will have large unpredictable shanges in output:\n    // give it a 'sensible' number, it'll return something -1 <-> 1, that looks randomish \n    //(as in doesn't appear to relate to the input)\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);//seperate the integer and fraction parts of x\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f); \n    //f is from -1 to +1, (-5 <-> +1)*f^2, f^2 will lift up the smllest and highest values, not 100% on the aim\n    //could well have been trial and error optimised for prettiness\n\n    float n = p.x + p.y*57.0;\n    //y axis gets stretched heaps?\n\n    float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n    //ok so hash will always return a 'randomish' number in the same range, so n is essentially used like a  seed?\n    //mix interpolates between values to smooth out the space between random samples\n    \n    return res;\n}\n\nfloat fbm (vec2 p)\n{\n \n    //adds together some different frequency noises, \n    \n    float f = 0.0;\n    f += 0.5000*noise(p); p *= 2.01;\n    f += 0.2500*noise(p); p *= 1.99;\n    f += 0.1250*noise(p); p *= 2.02;\n    f += 0.0625*noise(p); p *= 2.01;\n    f /= 0.9375;\n    return f;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 q = 1.0 - 2.0*p;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 col;\n    \n    float r = sqrt(dot(q,q));\n    float a = atan(q.y, q.x);\n    \n    col = vec3(1.0, 1.0, 0.9);\n    \n    float ss = 0.5 + 0.5*sin(3.0*iTime);\n    \n    vec2 qe = vec2(1.7*q.x, 0.7*q.y);\n    float re = sqrt(dot(qe, qe));\n    re *= 1.0  - 0.02*sin(60.0*a);\n    \n    float anim = 1.0 + 0.1*ss*clamp(0.0, 1.0, r);\n    r  *= anim;\n    float anime = 1.0 + 0.5*ss*clamp(0.0, 1.0, re);\n    re *= anime;\n    //a += 0.6*iTime;\n    \n    \n    if (r < 0.9)\n    {\n        //blueish iris\n        col = vec3(0.8, 0.35, 0.4);\n        \n        //green iris clouds\n        float f = fbm(7.0*q);\n        col = mix(col, vec3(0.9, 0.2, 0.7), 1.0*f);\n\n        //white streaks\n        a += 0.15*fbm(3.0*q);\n        f = smoothstep(0.05, 1.6, fbm(vec2(8.0*r, 37.0*a)));\n        col = mix(col, vec3(1.0), f);\n        \n        //Dark Streaks\n        f = smoothstep(0.3, 1.0, fbm(vec2(8.0*r, 30.0*a)));\n        col = mix(col, vec3(0.2, 0.2, 0.2), f);\n        \n        //yellow corona\n        f = 1.0 - smoothstep(0.3, 0.7, r);\n        col = mix(col, vec3(0.8, 0.6, 0.1), f);\n        \n        //black pupil\n        f = smoothstep(0.28, 0.35, re);\n        col *= f;\n        \n        //darken outside\n        f = smoothstep(0.6, 0.95, r);\n        col *= 1.0 - 0.8*f;\n        \n        //smooth faded edge\n        f = smoothstep(0.65, 0.92, r);\n        col = mix(col, vec3(1.0), f);\n        \n        //specular highlight/reflection\n        f = 1.0 - smoothstep(0.0,0.3, length(p - vec2(0.65, 0.65)));\n        col += vec3(0.7, 0.6, 0.2)*0.9*f;\n    }\n    \n    if ((q.y < 0.05)&&(q.y > -0.05))\n    {\n      float f = smoothstep(0.65, 0.665, p.x);\n      //col = mix(col, vec3(0.0), f);   \n      \n      f = 1.0 - smoothstep(0.01, 0.06, p.y);\n      col = mix(col, vec3(1.0), f);   \n    }\n    \n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sSSRd","date":"1414722606","viewed":204,"name":"Slightly More Malevolent Eye","username":"Chengarda","description":"My first shader - copied from IQ's BeutyPI logo, and modified a little bit.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","firstattempt"],"hasliked":0,"parentid":"","parentname":""}}