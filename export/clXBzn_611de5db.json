{"ver":"0.1","info":{"id":"clXBzn","date":"1692476932","viewed":33,"name":"Blur-able checker pattern","username":"TomasWeiss","description":"This is a procedural checker pattern that has a 0-1 parameter for blurring, approximating a Gaussian blur effect.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","blur","checker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float RemapClamped(float value, float min1, float max1, float min2, float max2)\n{\n    return clamp(min2 + (value - min1) * (max2 - min2) / (max1 - min1), min2, max2);\n}\n\nfloat BluredWave(float x, float blur)\n{\n    float wave = sin(x);\n    float inBound = 0.1 + blur*5.0;\n    float outBound = RemapClamped(blur, 0.6, 1.0, 0.0, 0.5);\n\n    return  RemapClamped(wave, -inBound, inBound, outBound, 1.0 - outBound);\n}\n\nvec3 BlendExclusion(vec3 base, vec3 blend)\n{\n    return base + blend - 2.0*base*blend;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float SCALE = 15.0;\n    vec2 uv = fragCoord / iResolution.xy * SCALE * vec2(iResolution.x / iResolution.y, 1.0);\n\n    // Animate blurring by time for showcase\n    float blurFactor = sin(iTime*0.5)*0.5 + 0.5;\n    blurFactor = blurFactor*blurFactor;\n    \n    float wave = BlendExclusion(vec3(BluredWave(uv.x, blurFactor)), vec3(BluredWave(uv.y, blurFactor))).x;\n\n    fragColor = vec4(vec3(wave), 1.0);\n}","name":"Image","description":"","type":"image"}]}