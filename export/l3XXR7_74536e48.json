{"ver":"0.1","info":{"id":"l3XXR7","date":"1709277183","viewed":129,"name":"Blur Demo V2","username":"xiconxi","description":"video blur","likes":1,"published":1,"flags":34,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float blur_level = 3.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv    = fragCoord/iResolution.xy ;\n    //fragColor = texture(iChannel1, uv, 0.); return ;\n    \n    vec4 color = gaussBlur(iChannel1, uv, vec2(0., exp2(blur_level)/iChannelResolution[0].y), blur_level);\n    \n    //fragColor = color; return ;\n\n    // Calculate distance to edge.   \n    float d0 = 40.*roundedBoxSDF(fragCoord.xy/iResolution.xy - vec2(.5f, .5f), vec2(.5f, .5f) / 2.0f, 0.05);\n    float d1 = 40.*roundedBoxSDF(fragCoord.xy/iResolution.xy - vec2(.5f, .5f), vec2(.48f, .48f) / 2.0f, 0.05);\n    color = mix(texture(iChannel0, texcoord_remap(uv, 0.01), 0.), color,  clamp(d1, 0., 1.));\n    fragColor = mix(color, vec4(1., 1.0, 1.0, 1.0), clamp(d0, 0., 1.)*0.3);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float sigma = 3.;\nconst float r = sigma * 2.;\nconst float invTwoSigmaSqr = 1. / (2. * sigma * sigma);\n\nvec2 texcoord_remap(vec2 uv, float delta) {\n    uv = uv-0.5;\n    float l = max(abs(uv.x), abs(uv.y));\n    float l_new = 1.0;\n    if(l > 0.25)  l_new = (l-0.25)/0.25*delta + (0.5-delta);\n    else          l_new = l/0.25*(0.5-delta) ;\n    return uv*l_new/l+0.5;\n}\n\nfloat roundedBoxSDF(vec2 CenterPosition, vec2 Size, float Radius) {\n    return length(max(abs(CenterPosition)-Size+Radius,0.0))-Radius;\n}\n\nvec4 gaussBlur( sampler2D tex, vec2 uv, vec2 d, float lod )\n{\n    vec4 c = textureLod(tex, uv, lod);\n    \n    for (float i = 1.; i < r; ++i) c += (\n        textureLod(tex, uv + d * i, lod) +\n        textureLod(tex, uv - d * i, lod)\n        ) * exp(- i * i * invTwoSigmaSqr);\n    \n    return c / c.a;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float blur_level = 3.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = texcoord_remap(fragCoord/iResolution.xy, 0.02);\n    fragColor = gaussBlur(iChannel0, uv, vec2(exp2(blur_level)/iChannelResolution[0].x, 0.), blur_level);\n\n}","name":"Buffer A","description":"","type":"buffer"}]}