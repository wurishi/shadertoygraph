{"ver":"0.1","info":{"id":"X3tSDM","date":"1719135812","viewed":44,"name":"Mirrored effect","username":"Arbethi","description":"exploration of symmetries on an image with continuity at any border","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["kaleidoscope","mirror"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Center the coordinates\n    vec2 centeredUV = uv - 0.5;\n    // Apply mirrored symmetry\n    vec2 mirroredUV = -abs(centeredUV);\n    \n\n    // Adjust the mirrored UV based on the mouse position\n    vec2 mouseOffset = (iMouse.xy / iResolution.xy - 0.5) * 2.0;\n    mirroredUV += mouseOffset;\n\n    // Map the mirrored coordinates back to [0,1] range\n    mirroredUV = mirroredUV + 0.5;\n\n    // Clamp to avoid out-of-bounds issues\n    mirroredUV = abs(mod(mirroredUV, 2.0)-1.0);\n    \n    vec4 res = texture(iChannel0,mirroredUV);\n\n    // Sample the texture or use a color function (for simplicity, we'll just use a color function here)\n    fragColor = res;\n    //vec4(mirroredUV, 0.5 + 0.5 * sin(mirroredUV.x * 10.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}