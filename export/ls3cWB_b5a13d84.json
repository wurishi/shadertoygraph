{"ver":"0.1","info":{"id":"ls3cWB","date":"1520006306","viewed":302,"name":"Synthesis Tonemap","username":"ProjectAsura","description":"Combine Low part curve and high part curve.\nLow part curve is [Inui 1975] which is the approximation of photographic characteristic curve of color film.\nHigh part curve is customized Reinhard tonemap.\n \n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tonemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//-------------------------------------------------------------------------\n// Synthesis Tonemap.\n// \n// Copyright(c) 2018 Project Asura.\n//\n// Permission is hereby granted, free of charge, to any person obtaining \n// a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation \n// the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom \n// the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included \n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//-------------------------------------------------------------------------\n\n//-------------------------------------------------------------------------\n// Apply low part (y < 0.5).\n//-------------------------------------------------------------------------\nfloat SynthesisLow(float x, float m, float a, float s)\n{\n    // Masao Inui and Syuji Kashiwa ,\n    // \"The Approximation of Photographic Characteristic Curve\",\n    // https://www.jstage.jst.go.jp/article/photogrst1964/39/3/39_3_123/_pdf/-char/ja, 1975.\n    // Equation (3).\n    return m / (1.0 + pow(s * x, -a));\n}\n\n//-------------------------------------------------------------------------\n// Apply high part (y >= 0.5).\n//-------------------------------------------------------------------------\nfloat SynthesisHigh(float x, float c, float t, float L)\n{\n    // Customized Reinhard Tonemap.\n    return t * (L * (x - c)) / (L + (x - c)) + 0.5;\n}\n\n//-------------------------------------------------------------------------\n// Solve x for Low part at y = 0.5.\n//-------------------------------------------------------------------------\nfloat SolveC(float m, float a, float s)\n{\n    return pow(2.0 * m - 1.0, -1.0 / a) / s;\n}\n\n//-------------------------------------------------------------------------\n// Slove slope of Low part at x = c (y = 0.5).\n//-------------------------------------------------------------------------\nfloat SolveT(float m, float a, float s, float c)\n{\n    float p = pow(s * c, a);\n    float p1 = (p + 1.0);\n    return a * m * p / (c * p1 * p1);\n}\n\n//-------------------------------------------------------------------------\n// Combine Low part and High part.\n//-------------------------------------------------------------------------\nvec3 SynthesisTonemap(vec3 color, float m, float a, float s, float L)\n{\n    float c = SolveC(m, a, s);\n    float t = SolveT(m, a, s, c); // slope at y = 0.5 (x = c).\n    \n    vec3 result;\n    result.x = (color.x < 0.5f) ? SynthesisLow(color.x, m, a, s) : SynthesisHigh(color.x, c, t, L);\n    result.y = (color.y < 0.5f) ? SynthesisLow(color.y, m, a, s) : SynthesisHigh(color.y, c, t, L);\n    result.z = (color.z < 0.5f) ? SynthesisLow(color.z, m, a, s) : SynthesisHigh(color.z, c, t, L);\n    \n    return result;\n}\n\n//-------------------------------------------------------------------------\n// Main Entry point.\n//-------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = textureLod( iChannel0, uv, 0.0 ).rgb;\n    \n    // Control Values.\n    float L = 1.0; // curve scale.\n    float m = 1.0; // maximum density.\n    float a = 1.5; // gradiation factor.\n    float s = 1.8; // sensitive factor.\n    \n    if (uv.x > 0.5)\n    {\n\t    // Apply tonemap.  \n\t    col = SynthesisTonemap(col, m, a, s, L);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}