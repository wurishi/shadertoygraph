{"ver":"0.1","info":{"id":"wddfzX","date":"1605708548","viewed":56,"name":"Testing Some SDFs","username":"timeiskey","description":"recently learned some SDFs\nenlightenment begins","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","raytracing","raymarching","raymarching","experimenting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MIN_SURFACE_DIST 0.01\n#define MAX_DIST 100.0\n\nfloat sdf_sphere(vec3 p, vec3 center, float radius)\n{\treturn length(p - center) - radius;\t}\n\nfloat sdf_ground_plane(vec3 p)\n{\treturn p.y;\t}\n\nfloat sdf_box(vec3 p, vec3 pos, float width)\n{\treturn length(max(abs(p - pos) - width, 0.0));\t}\n\nfloat sdf_capsule(vec3 p, vec3 a, vec3 b, float radius)\n{\n\tvec3 AB = b - a;\n    vec3 AP = p - a;\n    /*\tMETHOD ONE:\n\t\tgives you t for distance\t*/\n\t/*\n    float t = dot(AP, AB);\n\tt = clamp(t, 0.0, length(AB));\n\tvec3 caps_dir = normalize(AB);\n\tvec3 closest_point = a + caps_dir * t;\n\t*/\n    \n    /*\tMETHOD TWO:\n\t\tgives you t as a fraction between b and a [0.0, 1.0) */\n\tfloat t = dot(AP, AB) / dot(AB, AB);\n\tt = clamp(t, 0.0, 1.0);\n\tvec3 closest_point = a + AB * t;\n    return length(p - closest_point) - radius;\n}\n\nfloat sdf_inf_cylinder(vec3 p, vec3 a, vec3 b, float radius)\n{\n\tvec3 AB = b - a;\n    vec3 AP = p - a;\n    float t = dot(AP, AB) / dot(AB, AB);\n\tvec3 closest_point = a + AB * t;\n    return length(p - closest_point) - radius;\n}\n\nfloat sdf_cylinder(vec3 p, vec3 a, vec3 b, float radius)\n{\n\tvec3 AB = b - a;\n    vec3 AP = p - a;\n    float t = dot(AP, AB) / dot(AB, AB);\n\tvec3 closest_point = a + AB * t;\n    float d = length(p - closest_point) - radius;\n    \n    float y = (abs(t-0.5)-0.5) * length(AB);\n    float e = length(max(vec2(d, y), 0.0));\n    float i = min(max(d, y), 0.0);\n    \n    return e+i;\n}\n\nfloat sdf_torus(vec3 p, vec3 center, float radius, float ring_radius)\n{\n    vec2 offset_from_ring = vec2(\n    \tlength(p.xz - center.xz) - radius, \n        p.y - center.y);\n    return length(offset_from_ring) - ring_radius;\n}\n\nfloat get_dist(vec3 p)\n{\n    float plane_dist = sdf_ground_plane(p);\n    float sphere_dist = sdf_sphere(p, vec3(-3, 1, 2), 0.5);\n    float box_dist = sdf_box(p, vec3(-1, 1, 2), 0.5);\n\tfloat capsule_dist = sdf_capsule(p, vec3(1, 1, 2), vec3(3, 1, 3), 0.5);\n    float torus_dist = sdf_torus(p, vec3(0, 1, 6), 2.0, 0.3);\n    float inf_cyl_dist = sdf_inf_cylinder(p, vec3(-3, 1, 5), vec3(-3, 3, 6), 0.5);\n    float cyl_dist = sdf_cylinder(p, vec3(3, 1, 5), vec3(5, 3, 7), 0.5);\n    \n    float dist = 10000.0;\n    dist = min(dist, plane_dist);\n    dist = min(dist, sphere_dist);\n    dist = min(dist, box_dist);\n    dist = min(dist, capsule_dist);\n    dist = min(dist, torus_dist);\n    dist = min(dist, inf_cyl_dist);\n    dist = min(dist, cyl_dist);\n    \n    return dist;\n}\n\nvec3 get_normal(vec3 p)\n{\n\tvec2 e = vec2(0.01, 0);\n    float d = get_dist(p);\n    vec3 n = d - vec3(\n        get_dist(p-e.xyy),\n        get_dist(p-e.yxy),\n        get_dist(p-e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float total_dist = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n    \tvec3 p = ro + rd * total_dist;\n        float dist = get_dist(p);\n        total_dist += dist;\n        if(dist < MIN_SURFACE_DIST || total_dist > MAX_DIST)\n        {\tbreak;\t}\n    }\n    return total_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tstart it off\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n    \n    //\tfire a ray for each pixel\n    vec3 ro = vec3(0, 7, -6);\n    vec3 rd = normalize(vec3(\n        uv.x + cos(iTime) * 0.1, \n        uv.y - 0.6,\n        1.0 + sin(iTime) * 0.1));\n    \n    //\tmarch the ray\n\tfloat total_dist = march(ro, rd);\n    vec3 hit_pos = ro + rd * total_dist;\n\n    // light\n    vec3 light_center = vec3(0, 5, 6);\n    vec3 light_offset = vec3(\n    \t(sin(iTime) - 0.5) * 2.0,\n        0.0,\n        (cos(iTime) - 0.5) * 2.0);\n    vec3 light = light_center + light_offset * 5.0;\n    \n    //\tlighting\n    vec3 to_cam = normalize(ro - hit_pos);\n    vec3 to_light = normalize(light - hit_pos);\n    vec3 normal = get_normal(hit_pos);\n\n    float b = clamp(dot(normal, to_light), 0.0, 1.0);\n    \n    //\tshadow\n    float collide_dist = march(hit_pos + to_light * 10.0 * MIN_SURFACE_DIST, to_light);\n    if(collide_dist < length(light - hit_pos))\n    {\t\n        b *= 0.1;\n    }\n    col += vec3(b);\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}