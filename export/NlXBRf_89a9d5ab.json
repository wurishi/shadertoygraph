{"ver":"0.1","info":{"id":"NlXBRf","date":"1651177910","viewed":70,"name":"Dohko libra 2","username":"natnatnat","description":"2","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sun","triangle","circle","snake","square","moon","eclipse","j","cross","yang","yin"],"hasliked":0,"parentid":"7lXfz4","parentname":"Dohko libra"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nconst float PI = 3.14;\nconst float e = 2.71;\nconst float n = sqrt(2.);\n\nconst float R0 = (e - 2.) * e/PI;\n\nconst vec4 background = vec4(1., 1., 1., 1.);\n\nconst vec4 color = 1. - vec4(10., 102., 194., 255.)/255.;\n\nvec2 rotZ(vec2 point, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    vec2 finalPoint = mat2(c, -s, s, c) * point;\n    return finalPoint;\n}\n\nvec3 drawCircle(vec2 uv, float R, float angle) {\n    uv = rotZ(uv, angle);\n    float yy = min(exp(-(n * PI * uv.x/R + sin((PI/R) * uv.y))/0.06), 1.);\n    float mask = smoothstep(R + 0.01, R, length(uv));\n    float r = exp((-(abs(length(uv) - R)) + 0.01)/0.02);\n    return vec3(yy * mask + r);\n}\n\nvec4 draw(vec2 uv, float R, float angle, bool enableGradX) {\n    float r = length(uv);\n\n    vec2 pointC = vec2(R * cos(angle), R * sin(angle));\n    vec2 pointA = vec2(-R, 0.);\n    vec2 pointB = vec2(R, 0.);\n\n    vec3 c = drawCircle(uv, R, angle);\n    vec3 sq = background.rgb;\n\n    if (enableGradX) {\n        sq = vec3(smoothstep(0., e, rotZ(uv, angle).x + cos(iTime)));\n    }\n\n    vec3 sn = vec3(exp(-abs(distance(uv, pointC)) * 10.));\n\n    return vec4(c + sq + sn, 1.) * color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n\n    float angle = iTime * e/PI + PI/2.;\n    fragColor = draw(uv, R0, angle, true);\n}","name":"Image","description":"","type":"image"}]}