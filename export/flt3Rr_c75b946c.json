{"ver":"0.1","info":{"id":"flt3Rr","date":"1635689360","viewed":165,"name":"AngularCurve","username":"spalmer","description":"using AngularSeg cross product techniques to draw perspective corrected outline of 3d quadratic bezier curve, why not!  click to see my linear approximator, otherwise uses iq's MIT license masterpiece (slightly golfed and made 3d)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["bezier","spline","distance","curve","quadratic","cross"],"hasliked":0,"parentid":"ssyXzy","parentname":"AngularSeg"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// doesn't seem like it will work out unless\n// obtain index on curve somehow (harder problem)\n// then finding the point on the curve at that index\n// is rather trivial, we could easily do the \n// angular distance to that point.\n// However, solving the index on quadric problem,\n// from what I understand, requires a cubic equation solver!\n// that just seems really excessive\n\n#define V vec3\n\n// I made a recursive approximator instead:\n// see https://shadertoy.com/view/3tsczH\n// (which FIXME is probably broken btw)\n// glsl doesn't support true recursion,\n// so iterate instead.\n// this is *almost* working.  not quite.\n// for this toy, index and eval and everything else are inlined\nfloat d2q(V a, V b, V c)\n{\n    float r0 = 0., r1 = 1.;\n    for (int subdiv = 7; subdiv-- > 0;) {\n        float rm = (r0 + r1) * .5;\n        V m = (a + 2.*b + c) / 4.\n        , t = 2. * mix(b - a, c - b, .5);\n\t\tif (dot(m, t) < 0.)\n            r0 = rm, a = m, b = (b + c) * .5;\n        else\n            r1 = rm, b = (a + b) * .5, c = m;\n    }\n    V v = c - a;\n    float t = mix(r0, r1, clamp(dot(-a,v) / dot(v,v), 0., 1.))\n    , mt = 1.-t;\n\tV r = mt * mt * a +(2. * t * mt) * b + t * t * c;\n    return dot(r, r);\n}\n    //return t; // just the index\n    //V r = mat3x3(vec3(0), ab + ab, c - ab - b ) * V(1,t,t*t);\n// my approximator sucks, apparently, has many problems.\n// linear approximation errors tend to\n// cause small bunchings near the subdivisions.\n// but also seems like there's an actual error...\n// probably a chore for another day.  :(\n\n// scoured Shadertoy for simpler parabola distance\n// Inigo came through for me, knew I could count on iq!\nfloat dot2(V a) { return dot(a,a); }\n// iq's from https://shadertoy.com/view/MlKcDD Copyright Â© 2018 Inigo Quilez - The MIT License : Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// squared distance 3d quadratic bezier to origin\nfloat d2iq(V A, V B, V C)\n{    \n    V a = B - A\n    , b = A - 2.*B + C\n    , c = a * 2.\n    , d = A;\n    float k = 1. / dot(b,b)\n    , kx = k * dot(a,b)\n    , ky = k * (2. * dot(a,a) + dot(d,b)) / 3.\n    , kz = k * dot(d,a)\n    , p = ky - kx*kx\n    , p3 = p*p*p\n    , q = kx * (2.*kx*kx - 3.*ky) + kz\n    , h = q*q + 4.*p3\n    , r;\n    if (h < 0.) {   // 3 roots\n        float z = sqrt(-p)\n        , v = acos(q / (p*z*2.)) / 3.\n        , m = cos(v)\n        , n = sin(v) * 1.732050808;\n        V t = clamp(V(m+m,-n-m,n-m)*z-kx, 0., 1.);\n        r = min(dot2(d+(c+b*t.x)*t.x),\n                dot2(d+(c+b*t.y)*t.y));\n        // res = min(res,dot2(d+(c+b*t.z)*t.z)); // 3rd root can't be closest: https://shadertoy.com/view/4dsfRS\n    } else {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h) - q) / 2.\n        , uv = sign(x) * pow(abs(x), vec2(1./3.));\n        float t = clamp(uv.x+uv.y-kx, 0., 1.);\n        r = dot2(d + (c+b*t) * t);\n    }\n    return r;\n}\n// FIXME there's a glitch when all 3 points co-linear!\n\n\nfloat angularQuadric(V d, V a, V b, V c)\n{\n    a = cross(d, a), b = cross(d, b), c = cross(d, c);\n    float r = iMouse.z > 0. \n        ?  d2q(a, b, c)\n        : d2iq(a, b, c);\n    return sqrt(r);\n}\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    vec2\n      r = iResolution.xy\n    , q = (p - .5*r) / r.y;    \n    vec3\n      d = normalize(vec3(q, 1)) * mat3(1,0,0, 0,.866,-.5, 0.,.5,.866)\n    , e = vec3(0,1.7,-4)\n    , a = vec3(2.*sin(vec2(0,11) + .3*iTime), 0).xzy\n    , c = a.zyx * vec3(-1,1,1)\n    , b = mix(-a, (a + c)*.5, .6 * sin(iTime)+.8)\n    ;\n    a -= e; b -= e; c -= e;\n    float g = angularQuadric(d, a, b, c);\n    g = 20.*(g - .5) + .5;\n    o = vec4(g);\n}\n\n\n// garbage:\n/*    \n{\n    vec3 m = a-b, n = b-c, o = c-a;\n    float r = length(\n    //- (a - m * clamp(dot(a, m) / dot(m, m), .0, 1.))\n    //- (b - n * clamp(dot(b, n) / dot(n, n), .0, 1.))\n    //+ 2. * (c - o * clamp(dot(c, o) / dot(o, o), .0, 1.))\n    + 1. * (c - o * clamp(dot(c, o) / dot(o, o), .0, 1.))\n    );\n    //return r;\n    // WIP so far just segments, barely got started.\n    //return min(r,min(\n    //  length(a - m * clamp(dot(a, m) / dot(m, m), .0, 1.))\n    //, length(b - n * clamp(dot(b, n) / dot(n, n), .0, 1.))\n    //));\n}\n*/\n//    vec3 x = b - a;\n//    length(mix(b, a, clamp(dot(b, x) / dot(x, x), .0, 1.)));\n\n\n/* // parametric polynomial for 1d parabola / quadratic curve\nfloat[3] QuadricBezier(float a, float b, float c)\n{\n    float ab = b - a;\n    return float[] ( a, ab + ab, c - ab - b );\n}\n// just dot with (1, t, t*t) to obtain point at index t\n*/","name":"Image","description":"","type":"image"}]}