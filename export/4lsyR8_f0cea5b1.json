{"ver":"0.1","info":{"id":"4lsyR8","date":"1503404354","viewed":318,"name":"Party Viz","username":"cpdt","description":"Get your party on! Something simple I made to practice skills. Includes some toy colour-grading and gamma correction, might add glow at some point too. Made a more stylish one with the snowflake/flower, see https://www.shadertoy.com/view/Xtfcz4.","likes":3,"published":1,"flags":96,"usePreview":0,"tags":["procedural","2d","particles","visualizer","eq"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 inColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    \n    inColor = pow(inColor, vec3(1.0, 1.1, 1.2));\n    \n    // gamma correct\n    inColor = pow(inColor, vec3(1. / 2.2));\n    \n    fragColor = vec4(inColor, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MslSWj","filepath":"https://soundcloud.com/plutos-basement/head-first-tiger-skywave-remix","previewfilepath":"https://soundcloud.com/plutos-basement/head-first-tiger-skywave-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define saturate(x) clamp(x, 0., 1.)\n\n// IQ's noise\nfloat noise( in vec3 x )\n{\n    #if 0\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel1, (uv+0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n    #else\n    ivec3 p = ivec3(floor(x));\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tivec2 uv = p.xy + ivec2(37,17)*p.z;\n\tvec2 rgA = texelFetch( iChannel1, (uv+ivec2(0,0))&255, 0 ).yx;\n    vec2 rgB = texelFetch( iChannel1, (uv+ivec2(1,0))&255, 0 ).yx;\n    vec2 rgC = texelFetch( iChannel1, (uv+ivec2(0,1))&255, 0 ).yx;\n    vec2 rgD = texelFetch( iChannel1, (uv+ivec2(1,1))&255, 0 ).yx;\n    vec2 rg = mix( mix( rgA, rgB, f.x ),\n                   mix( rgC, rgD, f.x ), f.y );\n    return mix( rg.x, rg.y, f.z );\n    #endif\n}\n\nfloat noise(in vec2 x) {\n    return noise(vec3(x, 10));\n}\n\n// from mercury sdf\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n    float angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n// p is normalized coordinates where (0,0) is screen centre\nvec3 particleGen(vec2 p, float quadrantCount, float tailSize) {\n    vec2 halfRes = iResolution.xy / 2.;\n    float particleLen = halfRes.x + tailSize;\n    vec2 screenPos = vec2(length(p), atan(p.y, p.x));\n    \n    screenPos.x = pow(screenPos.x / halfRes.x, 1./15.) * halfRes.x;\n        \n    float particleAngle = atan(p.y, p.x);\n    \n    float quadrantSize = PI / quadrantCount;\n    \n    float row = floor(screenPos.y / quadrantSize);\n\tfloat particleOffset = noise(vec2(row, 0)) * particleLen;\n\tfloat particleSpeed = noise(vec2(0, row)) * 40. + 40.;\n\tfloat particlePos = mod(particleOffset + particleSpeed * iTime, particleLen);\n\n\tfloat particleDist = screenPos.x - particlePos;\n\tfloat particleBrightness = saturate(min(pow(particleDist / tailSize + 1., 3.), -particleDist / 10. + 1.));\n\tfloat realBrightness = saturate(particleBrightness - abs(screenPos.y - row * quadrantSize - quadrantSize / 2.) / quadrantSize);\n    \n    // figure out the colour\n    float normalizedRow = (row * quadrantSize) / (2. * PI) + 0.5;\n    float freqValue = texture(iChannel0, vec2(normalizedRow, 0)).r;\n    \n    return mix(vec3(1., 1., 0.), vec3(1., 0., 1.), freqValue) * realBrightness;\n}\n\nfloat bpm = 168.;\n\nvec4 scopeGen(vec2 p, float width, float height, float stripCount) {        \n    float xPos = (p.x + width / 2.) / width;\n    float nearestXPos = clamp(xPos, 0., 1.);\n    \n    //float block = floor(nearestXPos * stripCount) / stripCount;\n    float block = nearestXPos;\n    \n    float leftSampleVol = texture(iChannel0, vec2(block - 1. / width, 0)).r;\n    float sampleVol = texture(iChannel0, vec2(block, 0)).r;\n    float rightSampleVol = texture(iChannel0, vec2(block + 1. / width, 0)).r;\n    \n    sampleVol = (sampleVol + leftSampleVol + rightSampleVol) / 3.;\n        \n    float sampleAmp = pow(sampleVol, 2.);\n    float barHeight = sampleAmp * height;\n    float fadeOpacity = 1. - step(0.5, abs(xPos - 0.5));\n    \n    vec3 minColor = vec3(0., 0., 1.);\n    vec3 maxColor = mix(vec3(1., 0., 0.), vec3(1., 1., 0.), xPos);\n    \n    float barMult = 1. - step(barHeight, abs(p.y));\n    float barSmooth = 0.;\n    float barOpacity = (1. - barSmooth) * fadeOpacity * barMult;\n    \n    vec3 barColor = mix(minColor, maxColor, sampleVol);\n    \n    float ringAmount = saturate(pow(sin(mod(iTime * bpm / 60., stripCount / 20.) + block), 999.)) * fadeOpacity;\n    \n    return mix(vec4(mix(barColor, vec3(1., 0., 0.), ringAmount), 1.), vec4(1., 0., 0., saturate(pow(ringAmount, 9.)) / 1.), 1. - barOpacity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 centeredP = fragCoord - iResolution.xy / 2.;\n    vec2 originalCP = centeredP;\n    pR(centeredP, radians(iTime) * 30.);\n    \n    float brightness = pow(texture(iChannel0, vec2(1., 0)).r, 2.);\n    vec3 particles = particleGen(centeredP, 200., 50.);\n    \n    centeredP /= brightness * 2. + 0.5;\n    pModPolar(centeredP, 6.);\n    centeredP.x -= 150.;\n    //pR(centeredP, radians(iTime) * -30.);\n    pR(centeredP, radians(90.));\n    centeredP.x += 150.;\n    vec4 scope = saturate(scopeGen(centeredP - vec2(150., 0.), 300., 300., 50.));\n    \n    vec2 samplePos = iResolution.xy / 2. + originalCP * 0.995;\n    \n    vec3 finalColor = mix(particles, scope.rgb, scope.a);\n    vec3 mixedColor = finalColor * 0.5 + texture(iChannel2, samplePos / iResolution.xy).rgb * 0.95;\n    \n    fragColor = vec4(mixedColor, 1);\n}","name":"Buf A","description":"","type":"buffer"}]}