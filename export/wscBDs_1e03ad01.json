{"ver":"0.1","info":{"id":"wscBDs","date":"1606256488","viewed":636,"name":"PROCYON (4k Intro port)","username":"spolsh","description":"Web GL port of PROCYON 4K Intro released at Demosplash 2020 demoparty scoring 1st place\nhttps://www.pouet.net/prod.php?which=87464","likes":16,"published":1,"flags":104,"usePreview":1,"tags":["3d","raymarching","sound","sdf","intro","4k","rocket","shuttle","demosplash","klos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltfSzr","filepath":"https://soundcloud.com/spolsh/procyon-k2","previewfilepath":"https://soundcloud.com/spolsh/procyon-k2","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n''''''''''''''''''''''''''''''''''''''''''''          .demosplash 2020\n'''@@@@''''''''''@@@'''''@@@@@@@@@@@@@@@@'''\n'''@@@@'''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''  code    .klos\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          .pml\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  music   .klos\n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  gfx     .klos\n''@@@@@@'''@@@@@@@@@@''''@@@@@@@@@@@@@@@@@''\n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  consult .KamikaTze\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shx       \n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n'''@@@@''''@@@@@@@@@''''@@@@@@@@@@@@@@@@@@''  \n''''''''''''''''''''''''''''''''''''''''''''  >>> PROCYON <<<\n''''''''''''''''''''''''''''''''''''''''''''\n'''@@@@''''@@@@@@@@@'''''@@@@@@@@@@@@@@@@'''  tools   .crinkler\n'''@@@@''''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shaderminifier\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .opengl\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  greets\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Aberration Creations,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Abyss, Adapt, Alcatraz,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Altair, Brain Control,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@'''    Dekadence, Desire, FHI,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Fulcrum, Hprg, Jetlag,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    LJ, Nuance, Prismbeings,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    PVM, Rabenauge, Rebels,\n'''@@@@'''''''''@@@@''''@@@@@@@@@@@@@@@@@@''    Skyrunner, Titan\n''''''''''''''''''''''''''''''''''''''''''''    & everybody we forgot!\n*/\n\n// based on noby: https://www.shadertoy.com/view/lllBDM\nV ca(V UV)\n{\n    V uv = 1.0 - 2.0 * UV,\n        ww = V(1),\n        c = V(0),\n        uv2;\n\n    for (int i = 0; i < 32; ++i) {\n        uv2 = 0.5 - 0.5 * uv * ww;\n        c += V(texture(iChannel0, uv2.xy).xyz);\n        ww *= V(0.9996, 0.9999, 1.0/0.9996);\n    }\n    return C(c/32.);\n}\n\nvoid mainImage( out vec4 f, in vec2 fragCoord )\n{\n \tf *= 0.;\n\n    V p = (2. * F.xyy - R.xyy) / R.y;\n    V uv = F.xyy / R.xyy;\n    T = mod(iTime, 125.);\n    \n    if (abs(p.y) > 0.75) // 2.39 ratio\n        return;\n    \n    f.rgb = pow(\n        smoothstep(\n            -0.05,\n            0.8 - C(0.7*(T-121.)),\n            1.3 * pow(\n                ca(uv), \n                V(1., 0.8, 0.7)\n            )\n        )\n        * (0.4+0.6*smoothstep(0.1, 0.0, sdBox(uv.xyy-0.5, V(0.32, 0.18, 0.3)) -0.1) ) // vignette\n        * (0.95 + 0.1 * H(H(H(T)*F.x)*F.y)), // noise\n        V(0.4545) \t\t\t\t\t\t\t // gamma\n    );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n''''''''''''''''''''''''''''''''''''''''''''          .demosplash 2020\n'''@@@@''''''''''@@@'''''@@@@@@@@@@@@@@@@'''\n'''@@@@'''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''  code    .klos\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          .pml\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  music   .klos\n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  gfx     .klos\n''@@@@@@'''@@@@@@@@@@''''@@@@@@@@@@@@@@@@@''\n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  consult .KamikaTze\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shx       \n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n'''@@@@''''@@@@@@@@@''''@@@@@@@@@@@@@@@@@@''  \n''''''''''''''''''''''''''''''''''''''''''''  >>> PROCYON <<<\n''''''''''''''''''''''''''''''''''''''''''''\n'''@@@@''''@@@@@@@@@'''''@@@@@@@@@@@@@@@@'''  tools   .crinkler\n'''@@@@''''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shaderminifier\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .opengl\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  greets\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Aberration Creations,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Abyss, Adapt, Alcatraz,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Altair, Brain Control,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@'''    Dekadence, Desire, FHI,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Fulcrum, Hprg, Jetlag,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    LJ, Nuance, Prismbeings,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    PVM, Rabenauge, Rebels,\n'''@@@@'''''''''@@@@''''@@@@@@@@@@@@@@@@@@''    Skyrunner, Titan\n''''''''''''''''''''''''''''''''''''''''''''    & everybody we forgot!\n*/\n\n\nV palette(S t)\n{ // cosine palattes\n    return V(0.6, 0.0, 0.5) + V(0.4, 0.1, 0.5) * cos( P * (V(2.0, 1.0, 1.0) * t + V(0.2, 0.2, 0.25)));\n}\n\nmat2 rot(S a)\n{\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nS impulse(S k)\n{\n    return k * exp(1. - k);\n}\n\nuint base_hash(uvec3 p)\n{\n    // Hash functions by Nimitz:\n    // https://www.shadertoy.com/view/Xt3cDn\n    // Dave Hoskins - improved hash without sin\n    // https://www.shadertoy.com/view/XdGfRR\n\n    p.xy = 1103515245U * ((p.xy >> 1U) ^ (p.yx));\n    uint h32 = 1103515245U * ((p.x) ^ (p.y >> 3U));\n    return h32 ^ (h32 >> 16);\n}\n\nV hash3(inout S seed)\n{\n    uint n = base_hash(uvec3(V(seed += .1, seed += .1, 0)));\n    return V(uvec3(n, n * 16807U, n * 48271U) & uvec3(0x7fffffffU)) / S(0x7fffffff);\n}\n\n// iq: https://iquilezles.org/articles/smin\nS smin(S a, S b, S k)\n{\n    S h = C(.5+.5*(b - a) / k);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nS sdEll(V p, V r)\n{\n    S k0 = length(p / r);\n    return k0 * (k0 - 1.) / length(p / (r * r));\n}\n\nV opU(V d1, V d2)\n{\n    return d1.x < d2.x ? d1 : d2;\n}\n\nvoid sdWooble(V p)\n{\n    p.x += 1.0;\n    p.y = mod(p.y + 0.5, 1.0);   \n    gBloom = min(gBloom, sdBox(p, V(0.01, 1.0, 0.01)));\n}\n\nvoid sdButtons(V p)\n{\n    p.z *= T > 65.0 ? 0.5 : T > 50.0 ? 0.1 : 0.05;\n    p.x -= 0.8;\n    p.z = mod(p.z + 0.5 - 4.0 * T, 1.0) - 0.5;\n    gBloom = min(gBloom, sdBox(p, V(0.01, 0.08, 0.05)));\n}\n\nV map(V p)\n{\n    V p12 = p;\n    V r = V(10e8, -1, 0);\n\n    // spaceship\n    if (T > 45.0) {\n        S wsin = sin(0.1 * p.z - .5 * P) + 1.;\n        p12.y += sin(T) * wsin;\n        p12.x += cos(T) * wsin;\n\n        gBloom = min(gBloom, length(p - V(0, 0, -30)) - 0.1);\n\n        V p0 = p12 - V(0, 0.03, 0);\n        p0.yz *= rot(-0.1);\n        S s0 = sdEll(p0, V(0.09, 0.08, .5));\n        p0.x = abs(p0.x);\n        S s4 = sdEll(p0 - V(0.1, -0.05, 0.1), V(.3, 0.02, 1.));\n        s4 = max(-p0.x + 0.15, s4);\n        p0.xz *= rot(0.6);\n        p0.yx *= rot(-0.3);\n        S s1 = sdEll(p0 - V(0.4, -0.05, 0.2), V(0.4, 0.01, .08));\n        s0 = max(-p0.z -0.05, s0);\n        s1 = max(p0.z - 0.24, s1);\n        s1 = max(p0.x - 0.7, s1);\n        s0 = smin(s0, s1, 0.05);\n        s0 = min(s0, sdEll(p12 + V(0., 0.02, 0.), V(0.095, 0.05, .2)) );\n        r = opU(\n            r,\n            opU(\n                V(\n                    sdEll(p12 + V(0., -0.01, 0.04), V( .08, .08, .12)),\n                    4, 0),\n                V(smin(s0, max(p0.z - 0.05, s4), 0.1), 3, 0)\n            )\n        );\n\n        V p7 = p12;\n        p7.z = mod(p7.z + 0.5, 1.0) - 0.5;\n        S s10 = sdBox(p7, V(.0001, .0001, 1)) + 0.05 * noise31(p.zzz - 100. * T);\n        s10 = max(-p.z + .3, s10);\n        gBloom = min(gBloom, s10);\n    }\n\n    \n    S gTScale = T < 45.0 ? .1 : 4.;\n    V p11 = (p12 - V(0, 0, \n                        (T < 45.0 ? 0.5 : 20.0) // tunel speed\n                        * T)) / gTScale;\n\n    S s7 = (fbm(p11) - \n                    (T > 45.0\n                        ? (T < 70. ? .1 : .15)\n                        : 0.05) // tunel offset\n                ) * gTScale;\n    S fbm1 = fbm(9.2*p) - 0.5*fbm(100.0*p);\n\n    r = opU( r,\n             V(smin(\n                s7,\n                -length(p - V(0, 0, p.z)),\n                -2.0),\n             6, noise31(800.0*p11))\n        );\n\n    if (tid == -1)\n        gBloom = min(gBloom, 0.5*length(p - V(0.5, 0.1, 0)) - 0.01);\n\n    if (T > 15.0 && T < 45.0) {\n        gBloom = min(gBloom, length(p) - 0.48);\n        r = opU(r, V(length(p - V(0., 0., 2.0)) - 0.4, fbm1 < 0.3 ? 6 : 4, fbm1*fbm1));\n\n        if (tid == 16) {\n            V p7 = p;\n            p7.y = mod(p7.y + 0.5, 1.0) - 0.5;\n            S s10 = sdEll(p7, V(.001, 1, .001));\n            s10 = max(p.y + .55, s10);\n            gBloom = min(gBloom, s10 * .8);\n        }\n    }\n\n    if (T > 62.) {\n        V wooble = 0.1 * V(cos(V(1., 0.5, 1.5) * p + T) * .5 + .5);\n\n        if (T > 92.0)\n            sdWooble(p.xzy - wooble);\n\n        if (T > 83.0) {\n            V p2 = p.xzy - wooble;\n            p2.xz *= rot(P);\n            sdWooble(p2);\n        }\n\n        p.xy *= rot(-0.5 * P);\n        sdButtons(p);\n\n        p.xy *= rot(0.73 * P);\n        sdButtons(p);\n\n        p.xy *= rot(0.5 * P);\n        sdButtons(p);\n    }\n\n    r = opU(r, V(gBloom, 2, 0));\t\n\n    return r;\n}\n\nV getSky(V rd)\n{\n    rd.x -= 0.5 * rd.x;\n    V skyUv = V(\n        atan(rd.y, rd.x),\n        pow(length(rd.xy), 0.5),\n        0.\n    );\n    V skyUv2 = 10.0 * skyUv;\n    skyUv2.y += -5.0 * T;\n\n    S darkShade = smoothstep(0.1, 0.4, C(skyUv.y));\n\n    skyUv.y += -0.2 * T;\n    skyUv *= 10.0;\n    V color = pow(palette(noise31(V(10.0, 2.0, 1.) * skyUv)), V(2.0));\n\n    return (T > 80. ? 1. : 0.) \n        * darkShade\n        * color * ((0.1 + 0.9 * smoothstep(0.5, 0.7, noise31(V(2.0, 1., 1.) * skyUv)))\n            + 2.0 * k.xzz * smoothstep(0.1, 0.0, noise31(V(6.0, 1., 1.) * skyUv2))\n            + color * smoothstep(0.3, 0.0, noise31(V(3.0, 1., 1.) * skyUv2))\n        );\n}\n\nV castRay(V ro, V rd)\n{\n    V h,\n      res = V(10e8, -1, 1);\n    S i = 0., t = .1;\n\n    for (;i < 128. && t < 90.; ++i) {\n        h = map(ro + rd * t);\n        if (h.x < (.0001 * t)) {\n            res = V(t, h.yz);\n            break;\n        }\n        t += h.x;\n    }\n\n    return res;\n}\n\nvoid mainImage( out vec4 f, in vec2 fragCoord )\n{\n    f *= 0.;\n\n    V p = (2. * F.xyy - R.xyy) / R.y;\n    V uv = F.xyy / R.xyy;\n    \n    if (abs(p.y) > 0.75) // 2.39 ratio\n        return;\n        \n    // T = S(v) / 44100.;\n    T = mod(iTime, 125.);\n    \n    S tdiff = T;\n    S camShake = 0.01 * noise31(V(150.0 * T));\n    S anim2 = 0.01 * (T - 35.);\n    for (int ti = 0; ti < 20; ++ti) {\n        if (T >= time[ti]) {\n            tdiff = T - time[ti];\n            tid = tids[ti];\n        }\n    }\n\n    V ro = tid == 0\n        ? V(0.0, -0.5 + 0.1 * tdiff, 12.0)\n        : tid == 1\n            ? V(0.0, 0.05 * tdiff, 6.0)\n            : tid == 2\n                ? V(0.0, 0.05 * tdiff, 3.5)\n                : tid == 3\n                    ? V(0.0, camShake, -0.7 + 0.04 * tdiff)\n                    : tid == 4\n                        ? V(1.8, 0.5 + camShake, -6.0 + tdiff)\n                        : tid == 5\n                            ? V(1, .4 + camShake, 3.0 + 0.5 * tdiff)\n                            : tid == 6\n                                ? V(0.6, 0.1 + camShake, -0.4 + 0.02 * tdiff)\n                                : tid == 8\n                                    ? V(2.0, 0.9, -2.4 + 0.2 * tdiff)\n                                    : tid == 9\n                                        ? V(0.5, .3 - 0.1 * tdiff, -2.0)\n                                        : tid == 10\n                                            ? V(1.0, 0.4, -30.0 + 25. * tdiff)\n                                            : tid == 11\n                                                ? V(-0.2, -0.1, -30.0 + 25. * tdiff)\n                                                : tid == 12\n                                                    ? V(-0.2, 1.0, -1.2 +0.06  * tdiff)\n                                                    : tid == 13\n                                                        ? V(1.0, 0.4, -30.0 + 25. * tdiff)\n                                                        : tid == 16\n                                                            ? V(0.0, -.39, 2.4)\n                                                            : V(0.0, 0.0, 4.0 + 0.1 * T);\n\n    V ta = tid == 6\n        ? V(0., 0., -0.25 + 0.02 * tdiff)\n        : tid == 16\n            ? V(0., -.6, 0.)\n            : V(0.);\n\n    // detail anim camera\n    if (T > 65.) {\n        ro += 0.005 * noise31(V(50.0 * T)) // speed shake\n            + V(0.5 * sin(0.5 * T),\n                0.3 * (smoothstep(-0.7, 0.7, sin(0.7 * T)) * 2. - 1.),\n                cos(0.1 * T)\n               );\n    }\n\n    V cw = N(ta - ro);\n    V cu = N(cross(cw, k.zxz));\n    V cv = N(cross(cu, cw));\n    mat3 ca = mat3(cu, cv, cw);\n    V rd = ca * N(V(p.xy, 4.0));\n    if (tid == 16) rd.xy *= rot(.8-2.*anim2);\n    V tint = V(1);\n    V bg = getSky(rd)\n        + 0.02 * palette(2. *  rd.x)\n        + 0.02 * palette(3. * -rd.y -1.)\n        + V(H(H(H(rd.x) * p.x) * p.y) > 0.999 ? .3 : .0);\n    V flare = mix(V(0.08, 0.06, 0.001), \n                  V(0.04, 0.1, 0.16),\n                  p.y);\n    V col;\n    V res;\n    V pos;\n    V alb;\n    V nor;\n    V flarePos;\n    V h;\n    V e = k * .002;\n\n    col = res = pos = alb = nor = flarePos = h = V(0);\n\n    S scale = tid == -1\n        ? 0.2 + .5*impulse(max(0., 1.5 * (T - 7.)))\n        : tid == 16\n            ? 0.2\n            : 0.8;\n    S anim = 0.1 * (T - 20.);\n    S fre = 1.0;\n    S ao = 1.0;\n    S polar = atan(p.y-flarePos.y, p.x-flarePos.x);\n    S bi = 0.;\n    S i = 0.;\n\n    vec4 prev = texture(iChannel0, uv.xy);\n\n    g_seed = S(base_hash(floatBitsToUint(F.xyy))) / S(0xffffffffU) + T;\n\n    for (; bi < 2.; ++bi) {\n        res = castRay(ro, rd);\n\n        tt = bi == 0. ? res.x : tt;\n\n        if (res.y > -0.5) {\n            pos = ro + res.x * rd;\n            col = res.y == 2.0 ? V(0.5, 0.5, .25) : col;\n\n            alb = res.y > 3.\n                ? res.y > 4.\n                ? res.y > 5.\n                ? V(.1)\n                : V(1)\n                    : V(0)\n                        : k.xzz;\n\n            if (res.y > 2.0 && res.y < 7.0) {\n                nor = N(e.xyy * map(pos + e.xyy).x +\n                        e.yyx * map(pos + e.yyx).x +\n                        e.yxy * map(pos + e.yxy).x +\n                        e.xxx * map(pos + e.xxx).x);\n\n                S fre = pow(dot(nor, rd) + 1., .6);\n                S ao = exp2(min(0., map(pos + nor * .01).x / .01 - 1.))\n                    * exp2(min(0., map(pos + nor * .03).x / .03 - 1.))\n                    * exp2(min(0., map(pos + nor * .1 ).x / .1  - 1.));\n\n                if (res.y < 6.0) {\n                    col += (1. - fre) * tint\n                        * mix(alb, k.xxz, pow(fre, 8.))\n                        * ao; // refl\t\t\t\t\t\t\t\t\n\n                    tint *= fre;\n                    h = hash3(g_seed) * V(2, 2. * P, 1) - k.xzz;\n                    S phi = h.y,\n                        r = pow(h.z, 1. / 3.);\n\n                    rd = N(reflect(rd, nor) + 0.1 * r * V(sqrt(1. - h.x * h.x) * vec2(sin(phi), cos(phi)), h.x));\n                    ro = pos + .001 * rd;\n\n                } else {\n                    col += 0.2\n                        * res.z \n                        * C(mix(\n                            V(.2, 0, .5),\n                            k.xxz,\n                            pow(dot(nor, V(-1, 1, 0)) * .5 + .5, 4.)\n                        )) \n                        + (T < 45. ? 1. : 0. )\n                        * V(0.8, 0.6, 0.1) * pow(fre, 12.);\n                    break;\n                }\n            }\n\n\n        } else {\n            col += getSky(rd) * tint;\n            break;\n        }\n    }\t\t\n\n    f = vec4(\n        mix(col, bg, 1.0 - exp(-0.00002 * tt * tt * tt)),\n        tt\n    )\n        + scale * (\n            vec4(1.0, 0.2, 0, 0) * vec4(exp(-gBloom * 10.0)) // soft red/orange\n            + vec4(1.0, 0.9, 0, 0) * vec4(exp(-gBloom * 50.0)) // hard yellow\n        );\n\n    scale += (T > 20. && T < 35. ) ? pow(0.05*anim,2.0) : 0.;\n    scale += tid == 16 ? 1.0 : 0.;\n\n    flarePos = T < 15.\n        ? V(.4, .1, .0)\n        : T > 15. && T < 20.\n            ? V(.05, -.1+0.01*tdiff, .0)\n            : T > 20. && T < 35.\n                ? V(.05, .7 - 0.2*anim, .0)\n                : tid == 16\n                    ? V(-.05+anim2, .1+anim2, .0)\n                    : V(scale = 0.); // hide by default\n\n    {\n        for (; i<10.; ++i) {\n            S dist = H(200.*i)*3.-.5;\n            flare +=    (\n                20.0 * max(0.01-pow(length(p.xy+flarePos.xy*dist), 4.0*H(i)+0.1), 0.0) // big circles\n                + 0.2 * max(0.01/length(p.xy-flarePos.xy*dist*0.6), 0.0)\t\t\t\t   // small circles\n            ) * (cos(V(3.25, 1.92, 1.6) + dist*4.)*.5+.5)\t\t\t\t\t\t       // color\n                + 0.01\n                * (2.0 * max(0.1/pow(length(p.xy-flarePos.xy), 0.2), 0.0))\t\t\t   // attenuation\n                -0.01;\n        }\n\n        f.xyz += V(0.4, 0.02, 0.)\n            * scale\n            * C( flare * exp(1.0-length(uv.xy-flarePos.xy)) );\n    }\n\n\n    f.xyz = C(mix(\n        f.xyz,\n        0.5*C(f.xyz+prev.xyz),\n        pow(abs(dot(f,prev)), 0.001)\n    ))\n        * smoothstep(2., 5., T) * smoothstep(125., 122., T);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n''''''''''''''''''''''''''''''''''''''''''''          .demosplash 2020\n'''@@@@''''''''''@@@'''''@@@@@@@@@@@@@@@@'''\n'''@@@@'''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''  code    .klos\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          .pml\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  music   .klos\n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  gfx     .klos\n''@@@@@@'''@@@@@@@@@@''''@@@@@@@@@@@@@@@@@''\n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  consult .KamikaTze\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shx       \n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n'''@@@@''''@@@@@@@@@''''@@@@@@@@@@@@@@@@@@''  \n''''''''''''''''''''''''''''''''''''''''''''  >>> PROCYON <<<\n''''''''''''''''''''''''''''''''''''''''''''\n'''@@@@''''@@@@@@@@@'''''@@@@@@@@@@@@@@@@'''  tools   .crinkler\n'''@@@@''''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shaderminifier\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .opengl\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  greets\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Aberration Creations,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Abyss, Adapt, Alcatraz,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Altair, Brain Control,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@'''    Dekadence, Desire, FHI,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Fulcrum, Hprg, Jetlag,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    LJ, Nuance, Prismbeings,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    PVM, Rabenauge, Rebels,\n'''@@@@'''''''''@@@@''''@@@@@@@@@@@@@@@@@@''    Skyrunner, Titan\n''''''''''''''''''''''''''''''''''''''''''''    & everybody we forgot!\n*/\n\n#define R iResolution\n#define F gl_FragCoord\n#define N normalize\n#define C(v) clamp(v,0.,1.)\n#define H(v) fract(sin(v) * 43758.5453)\n#define M(v) 440.*pow(2.,(v-69.)/12.)\n#define S float\n#define V vec3\n#define ia int[]\n#define fa float[]\n\nS T = 0.,\n  P = 3.14159265359,\n  g_seed = 0.,\n  gBloom = 10e8,\n  tt = 10e8,\n  bps = 108. / 60.;\n\nV k = V(1., -1., 0.);\n  // R = V(1920, 1080, 0); // defined\n\nint tid = -1;\n\n//         \t\t      0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   14,   14,   15,   16,    17,     18,    19,    20\nia tids = int[](      0,    1,    2,   16,    3,    4,    5,    6,   12,    8,    9,   10,    3,   11,    6,    4,   12,     3,      4,    10);\nfa time = float[]( 15.0, 20.0, 22.0, 35.0, 45.0, 50.0, 54.0, 60.0, 65.0, 70.0, 75.0, 79.0, 81.0, 85.0, 87.0, 91.0, 94.0, 100.0,  102.0, 118.0);\n//         \t\t      0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,   14,   14,   15,   16,    17,     18,    19,    20\n\nS sdBox(V p, V b)\n{\n    V d = abs(p) - b;\n    return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nS noise31(V p)\n{ // 3D noise function (shane)\n    V ip = floor(p);\n    p -= ip;\n    V s = V(7, 157, 113);\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p * p * (3. - 2. * p);\n    h = mix(H(h),\n            H(h + s.x),\n            p.x);\n    h.xy = mix(h.xz, h.yw, p.yy);\n    return mix(h.x, h.y, p.z);\n}\n\nS fbm(V p)\n{\n    S n = noise31(p*8.04);\n    return 0.5000 * noise31(p*2.01)\n         + 0.2500 * noise31(p*4.02)\n         + 0.0050 * noise31(p*100.7)\n         + 0.15 * n * n;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"/*\n''''''''''''''''''''''''''''''''''''''''''''          .demosplash 2020\n'''@@@@''''''''''@@@'''''@@@@@@@@@@@@@@@@'''\n'''@@@@'''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''  code    .klos\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          .pml\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  music   .klos\n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''          \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  gfx     .klos\n''@@@@@@'''@@@@@@@@@@''''@@@@@@@@@@@@@@@@@''\n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  consult .KamikaTze\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shx       \n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n'''@@@@''''@@@@@@@@@''''@@@@@@@@@@@@@@@@@@''  \n''''''''''''''''''''''''''''''''''''''''''''  >>> PROCYON <<<\n''''''''''''''''''''''''''''''''''''''''''''\n'''@@@@''''@@@@@@@@@'''''@@@@@@@@@@@@@@@@'''  tools   .crinkler\n'''@@@@''''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .shaderminifier\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''          .opengl\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  greets\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Aberration Creations,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Abyss, Adapt, Alcatraz,\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Altair, Brain Control,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@'''    Dekadence, Desire, FHI,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Fulcrum, Hprg, Jetlag,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    LJ, Nuance, Prismbeings,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    PVM, Rabenauge, Rebels,\n'''@@@@'''''''''@@@@''''@@@@@@@@@@@@@@@@@@''    Skyrunner, Titan\n''''''''''''''''''''''''''''''''''''''''''''    & everybody we forgot!\n*/\n\n// Shader compilation was too long\n// and shadertoy would not allow me to publish long shader.\n// I added recorded audio as soundcloud link in Image tab.\n// Uncomment line below to enable sound shader locally and mute soundcloud in Image tab:\n// #define ENABLE_SOUND\n\n#ifdef ENABLE_SOUND\n\n// note = merged attack and duration since both are used in code with the same values\n// based on iq: https://www.shadertoy.com/view/ldXXDj\nS instrument( S freq, S time, S note)\n{\n    freq = 440.0*pow(freq/440.0,1.003); // spread\n    \n    S ph = 1.0\n     * sin(2.*P*freq*time)\n     * (0.2+0.8*max(0.0, 6.0-0.01*freq))\n     * exp(-time*freq*0.2);\n    \n    S y = 0.70*sin( 1.00*2.*P*freq*time+ph)*exp(-0.5*0.007*freq*time*note)\n        + 0.20*sin( 2.01*2.*P*freq*time+ph)*exp(-0.5*0.011*freq*time*note)\n        + 0.20*sin( 3.01*2.*P*freq*time+ph)*exp(-0.5*0.015*freq*time*note)\n        + 0.16*sin( 4.01*2.*P*freq*time+ph)*exp(-0.5*0.018*freq*time*note)\n        + 0.13*sin( 5.01*2.*P*freq*time+ph)*exp(-0.5*0.021*freq*time*note)\n        + 0.10*sin( 6.01*2.*P*freq*time+ph)*exp(-0.5*0.027*freq*time*note)\n        + 0.09*sin( 8.01*2.*P*freq*time+ph)*exp(-0.5*0.030*freq*time*note)\n        + 0.07*sin( 9.01*2.*P*freq*time+ph)*exp(-0.5*0.033*freq*time*note);\n\n    return y * C( time/0.004);\n}\n\nS instrument2( S freq, S time, S duration, S decay) {\n    return instrument( freq, time, 1.) * C(exp((time-duration) * decay));\n}\n\nS snare(S t)\n{\n    return (\n              0.9 *H(t*237.234234) * exp(t * -60.)\n            + 0.01*H(t*437.234234) * exp(t * -4.)\n            + sin(t * 2400.) * exp(t * -60.) * min(1., t * 5000.) * .1\n          )\n            * (\n                max(exp(-1. * fract(t * 120.)), min(t * 18., 1.))\n                + 3. * C(1. - abs(t*6. - .6) * 10.)\n              );\n}\n\nS kick(S tb, S freq)\n{\n    tb = sqrt(fract(C(tb / 4.0)) * 2.5 ) / 5.;    \n    S amp = exp(max(tb, 0.0) * -10.0);\n    return (clamp(sin(tb * freq * 2. * P) * amp * 4.0, -1., 1.)) * amp\n        + 0.1*H(tb*237.234234) * exp(tb * -10.);\n}\n\nS siup(S t) {\n    t = clamp(t, 0., 3.);\n    return kick(0.1*t, 4400.) * sin(22.*t) * exp(-0.5*t) * -.1;\n}\n\nvec2 sound( float time )\n{\n\t// S t0   = S(sampleIndex)/44100.;\n    S t0   = mod(time, 125.);\n    S t0f8 = mod(t0*bps, 8. );\n    S t4   = mod(t0*bps -1., 2. );\n\n    S lfoHiss = 0.5+0.2*sin(t0);\n    S end = step(t0, 121.);\n    S v0 = smoothstep( 1.0, 36.0, t0) * smoothstep(41.0, 40.0, t0)\n         + smoothstep(50.0, 56.0, t0) * smoothstep(81.0, 80.0, t0);\n    S v1 = smoothstep(35.0, 36.0, t0) * smoothstep(56.0, 55.0, t0)\n         + smoothstep(70.0, 75.0, t0) * smoothstep(96.0, 95.0, t0);\n    S v2 = smoothstep(85.0, 90.0, t0) * end;\n    S v3 = 0.5 + 0.2 *smoothstep( 50.0, 25.0, t0)\n               + 0.15*smoothstep( 78.0, 82.0, t0);\n    S v4 = smoothstep( 4.0, 4.1, t0);\n\n    S rnd = floor(max(0.0, mod((t0*bps) -t4, 8.)-2.)/2.);\n    S rnd2 = floor(3.0*fract(0.05*t0*bps));\n    \n    return vec2(\n          0.4 * v3      * instrument2( M(62.0), (t0f8-1.)/bps,               1.6, -90.0)\n        + 0.2 * v3 * v4 * instrument(  M(50.0), (mod(t0*bps, 34.)-0.95)/bps, 1.0 )\n        + 0.3 * v3 * v4 * instrument2( M(41.0), (t0f8-1.2)/4.,               1.5, -90.0)\n\n        + 0.1 * (\n              v0       * instrument( M(24.0), t0, 0.0 )\n            + v0       * instrument( M(36.0), t0, 0.0 )\n\n            + C(v0+v1) * instrument( M(33.0), t0, 0.0 )\n            + C(v0+v1) * instrument( M(45.0), t0, 0.0 )\n\n            + C(v1+v2) * instrument( M(35.0), t0, 0.0 )\n            + C(v1+v2) * instrument( M(47.0), t0, 0.0 )\n\n            + v2       * instrument( M(24.0), t0, 0.0 )\n            + v2       * instrument( M(38.0), t0, 0.0 )\n        )\n\n        + smoothstep( 44., 50., t0) * end * (\n            + 0.1 * snare(mod(t0*bps, 1.0)/bps)\n            + 0.7 * kick((mod(t0*bps, 4. )-2.0)/0.5*bps, M(24.0) )\n            + 0.2 * kick((mod(t0*bps,16. )-1.0)/0.5*bps, M(24.0) )\n\n            + 0.1  * lfoHiss*(fbm(V(100.0 *t0))*2.0-1.0)\n            + 0.04 * lfoHiss*(fbm(V(1000.0*t0))*2.0-1.0)\n\n            + 4.0 * siup(t0-80.1)\n            + 5.0 * siup(t0-86.1)\n            + 6.0 * siup(t0-119.1)\n\n            + 0.2 * instrument2( M(32.0 + rnd), t4, 1.8, -10.0)\n            + 0.2 * instrument2( M(28.0 + rnd), t4, 1.8, -10.0)\n        )\n\n        + step(80., t0) * end * .15 * (\n              instrument2( M(26. + rnd2), mod(t0*bps-0.25, 0.75 ), 0.1, -8.0)\n            + instrument2( M(28. + rnd2), mod(t0*bps,      0.5  ), 0.1, -8.0)\n        )\n    );\n}\n#endif\n\nvec2 mainSound( in int samp, float time )\n{\n#ifdef ENABLE_SOUND\n\treturn sound(time);\n#else\n\treturn vec2(0.);\n#endif\n}\n","name":"Sound","description":"","type":"sound"}]}