{"ver":"0.1","info":{"id":"MlsfWS","date":"1513191760","viewed":231,"name":"Tunnel Cylinders","username":"balkhan","description":"shader that blackscreened on my first demo :(","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tunnel","bug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdTorus( vec3 p, vec2 t, float phase );\nfloat\tmylength(vec2 p);\n\n#define LIGHT\n//#define HOLES\n//#define FUNKY\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// color\n#ifdef LIGHT\nvec3\th; \t\t\t// light amount\n#endif\n\n#define I_MAX\t\t200.\n#define E\t\t\t0.0001\n#define FAR\t\t\t50.\n#define\tPI\t\t\t3.14159\n#define\tTAU\t\t\tPI*2.\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, 0.0);\n\n    pos.z = 4.5-iTime*2.;\n    #ifdef LIGHT\n    h = vec3(0.);\n    #endif\n    vec2\tinter = (march(pos, dir));\n    if (inter.y <= FAR)\n        col.xyz = ret_col*(1.-inter.x*.0025);\n    else\n        col *= 0.;\n    #ifdef LIGHT\n    col += h*.005125;\n    #endif\n    c_out =  vec4(col,1.0);\n}\n\n/*\n** Leon's mod polar from : https://www.shadertoy.com/view/XsByWd\n*/\n\nvec2 modA (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a, an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n/*\n** end mod polar\n*/\n\nfloat\tscene(vec3 p)\n{  \n    float\tvar;\n    float\tmind = 1e5;\n    vec3\top = p;\n    #ifdef\tFUNKY\n    var =\n        step(-1.+cos( floor( p.z*6.)/6.+iTime*1.)*3.14, mod(atan(p.x, p.y ), 6.28)-3.14 )\n        *\n        step(mod(atan(p.x, p.y ), 6.28)-3.14-1.5, -1.+cos( floor( p.z*3.)/1.+iTime*1.)*3.14)\n        \n        *\n        step(\n            .0\n            ,\n        (length(fract(vec2(op.z, min(abs(op.x), abs(op.y)))*10.)-.5)-.2)\n\t        )\n        \n        ;\n    #else\n    var = \n        atan(p.x, p.y)*1.+0.;\n    #endif\n    var = cos(var*1.+floor(p.z) +iTime*(mod(floor(p.z), 2.)-1. == 0. ? -1. : 1.) );\n    float\tdist_cylinder = 1e5;\n    ret_col = 1.-vec3(.5-var*.5, .5, .3+var*.5);\n    mind = length(p.xy)-1.+.1*var;\n    #ifdef HOLES\n    mind = max(mind, var*-(length(fract(vec2(op.z, min(abs(op.x), abs(op.y)))*10.)-.5)-.1) );\n    #endif\n    mind = max(mind, -(length(p.xy)-.9+.1*var));\n    p.xy = modA(p.yx, 50.+50.*sin(p.z*.25) );\n\tp.z = fract(p.z*3.)-.5;\n    if (var != 0.)\n    {\n\t    dist_cylinder = length(p.zy)-.0251-.25*sin(op.z*5.5);\n\t    dist_cylinder = max(dist_cylinder, -p.x+.4 +clamp(var, .0, 1.) );\n    }\n    mind = \n        min\n        (\n            mind\n            ,\n\t\t\tdist_cylinder\n        );\n\n    #ifdef LIGHT\n    h += vec3(.5,.8,.5)*(var!=0.?1.:0.)*.0125/(.01+max(mind-var*.1, .0001)*max(mind-var*.1, .0001) );\n    #endif\n    \n    return (mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p);\n\t        dist.y += dist.x*.2; // makes artefacts disappear\n\t        if (dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n\t        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    p = p*p;\n    ret = (p.x+p.y);\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}