{"ver":"0.1","info":{"id":"mdyyz1","date":"1695775122","viewed":47,"name":"cabo enrolado","username":"Elsio","description":"Inspirado nos meus fones de ouvido dentro da bolsa","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"DlffD4","parentname":"mysterious rotation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res iResolution.xy\n#define rot(a) mat2 (cos(a), sin(a), -sin(a), cos(a))\n#define PI atan(.0, -1.)\n#define T  iTime * 4.\n#define rad(p) atan(p.y, p.x)\n#define discr(x, w) round(x / w) * w\n\nvec3 cor;\nfloat map(vec3 p){\nfloat a = T;\n\tif (true && length(iMouse.xy) > 40.) {\n        vec2 m = iMouse.xy/res;\n        p.yz *= rot(-PI * .5 + m.y * PI);\n        p.zx *= rot(PI - m.x * PI * 2.);\n    }\n    p.yz *= rot(T*.1);\n    \n\n    p *= 2.;\n\n    float e = 1., d, j = 0.;\n    float t = iTime;\n    float w = 6.28/3.;\n    //w = 3.;\n    vec2 q = vec2(length(p.xy) - 1., p.z);\n    \n    float id;\n    cor = vec3(1);\n    \n    while(j++ < 2.){\n        q *= rot(rad(p) * (j+1.) - cos(t)),\n        id = discr(rad(q), w),\n        q *= rot(id),\n        q.x -=  (cos(t)*.125+.3) / j;\n        d = length(q) - .03;\n        if(d < e){\n            e = d;\n            if (j == 1.) cor = vec3(1);\n            if (j == 2.) cor = vec3(0);\n        }\n    }\n    \n    return .5 * e;\n}\n\nvoid mainImage(out vec4 O, vec2 u){\n    // resolution\n    vec2 uv = (u - .5*res)/res.y;\n\n    // camera\n    vec3 ro = vec3(0, 0, -1.),\n         rd = normalize(vec3(uv, 1));\n         \n         \n    float a = T * .01;\n         //rd.yz *= rot(cos(3.*a));\n         //rd.zx *= rot(sin(2.*a));\n         //ro.z += sin(10.*a)*12.;\n         \n         \n\n\n    // raymarch\n    float s, i, d, far = 15.;\n    while(i++ < 1e3) {\n        s = map(ro + d * rd);\n        d += s * .3;\n        if(d > far || s < 1e-3) break;\n    }\n\n\n    vec3 col;\n\n    if(d < far) {\n        // normal\n        vec2 e = vec2(1e-2, 0);\n        vec3 p = ro + rd * d,\n             n = normalize(\n                 map(p) - vec3(\n                     map(p-e.xyy), \n                     map(p-e.yxy),\n                     map(p-e.yyx)));\n                     \n                     \n        // colors\n        col = rd * 1.;\n        col = cor;\n\n        // light\n        float a = T * .1;\n        //vec3 lightPos = vec3(sin(a), cos(a), -1);\n        \n        vec3 lightPos = vec3(1, -1, 0) - rd;\n\n\n        if (true){\n            float s = dot(\n                        n, \n                        normalize(lightPos)\n                    ) + 1.;\n\n            col *= s * .5 + .3;\n        }\n\n\n        if(true)\n            col += \n                smoothstep(.0,  4., \n                    dot(\n                        reflect(rd, n),\n                        normalize(lightPos)\n                    ) + 1.\n                )\n\n                * clamp(dot(n, rd) + 1., .0, .5) * 3.;\n\n        // float de = .05;\n        // if(true)\n        //     col *= cos(1.*smoothstep(0., de, map(p + de * reflect(rd, n))));\n\n\n\n        if(false)\n            col = pow(col, vec3(.14,.15,.18));\n\n        }\n    \n    else{\n        // background\n        col = rd * .2;\n    }\n    \n    O = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}