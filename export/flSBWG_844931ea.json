{"ver":"0.1","info":{"id":"flSBWG","date":"1652652243","viewed":285,"name":"Holotech Voronoi","username":"Dubswitcher","description":"Mostly an experiment. Was initially trying to understand IQ's voronoi distance shader. Got sidetracked.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(in vec2 uv){\n    return fract(sin(dot(uv, vec2(14.478473612, 53.252567))) * 37482.1);\n}\n\nvec2 hash2(in vec2 uv)\n{\n    vec3 o = fract(vec3(uv.yxx*893.335)*vec3(0.146651, 0.185677, 0.135812));\n    o += dot(o.zxy, o.yzx+60.424);\n    return fract((o.yx+o.zy)*o.xz);\n}\n\nfloat dtfi (in vec2 a, in vec2 b, in vec2 c)\n{\n    float o = (dot(normalize(a-b),b-c)+distance(a,b))/distance(a,b);\n    return min(o,-o+2.);\n}\n\nfloat tridistance (in vec2 a, in vec2 b)\n{\n    float t = radians(0.);\n    vec2 uv = (a-b) * mat2(cos(t),-sin(t),sin(t),cos(t));\n    float o = uv.x;\n    t = radians(120.);\n    uv = (a-b) * mat2(cos(t),-sin(t),sin(t),cos(t));\n    o = max(o,uv.x);\n    t = radians(240.);\n    uv = (a-b) * mat2(cos(t),-sin(t),sin(t),cos(t));\n    o = max(o,uv.x);\n    return o;\n}\n\nfloat voronoi (in vec2 uv, in float zPos, in float seed, in float wall)\n{\n    float build = 0.;\n    float dist = 0.;\n    for (float x = -2.; x <= 2.; x++)\n    {\n        for (float y = -2.; y <= 2.; y++)\n        {\n            vec2 cell = vec2(x,y);\n            vec2 ID = floor(uv)-cell+seed;\n            float rand = (zPos+hash(ID))*(hash(ID)*0.5+0.5);\n            float B = fract(rand);\n            vec3 offs = vec3(floor(rand),ceil(rand),B*B*(3.-2.*B));\n            vec2 point = mix(hash2(ID+offs.x),hash2(ID+offs.y),offs.z);\n            \n            float distP = tridistance(point,fract(uv)+cell)-3.;\n            build = mix(distP,build,smoothstep(build-wall,build+wall,distP));\n            dist = min(dist,distP);\n        }\n    }\n    return smoothstep(dist,dist+0.05,build);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float c = voronoi(uv*4.,iTime,0.,0.1);\n    vec3 col = mix(vec3(0.,0.1,0.2),vec3(0.7,0.8,1.),c);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}