{"ver":"0.1","info":{"id":"4XX3RH","date":"1707113723","viewed":300,"name":"[Dust]NewYearFirework","username":"DustCorleone","description":"过年了，武汉不让放烟花，给大家放个电子烟花吧。","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["happynewyear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Number of particles\nfloat N_LIGHTS = 100.;\n// count of fireworks\nint FIREWORK_COUNT = 2;\n// degrees of distance\nfloat dis = 1.5;\n\nfloat golden_ratio = 0.618033;\nfloat pi = 3.14159;\n\n\n/*rand from vec2 */\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n/*rand from float*/\nfloat rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 classic_hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n    // golfed version:\n    return c.z*(1.-c.y + c.y*clamp(abs(mod(c.x*6.+vec3(0,4,2),6.) -3.) - 1., 0., 1.));\n}\n\nvec3 smooth_hsv2rgb(vec3 c)  // same of above replacing clamp by smoothstep \n{\n    return c.z*(1.-c.y*smoothstep(2.,1.,abs(mod(c.x*6.+vec3(0,4,2),6.) -3.)));\n}\n\nvec3 cosine_hsv2rgb(vec3 c)  // golfed version: https://www.shadertoy.com/view/ll2cDc\n{ \n    // variant 1: exactly saturating 0-1 range; constant luminance; not fully saturated colors\n    return  c.z*(1.-c.y*(1. - (.5 + .5 * cos( 6.2832*( c.x  + vec3(0,2./3.,1./3.) ) ) ) ) );\n    // variant 2: more vivid colors; 20% more contrast, some overshoot\n    return  c.z*(1.-c.y*(1. - (.6 + .6 * cos( 6.2832*( c.x  + vec3(0,2./3.,1./3.) ) ) ) ) );\n    // variant 3: 20% more contrast + clamp: luminance not strictly constant\n    return  c.z*(1.-c.y*(1. - clamp(.6 + .6 * cos( 6.2832*( c.x  + vec3(0,2./3.,1./3.) ) ), 0., 1. ) ) );\n    // golfed variant (hue only) : ( https://www.shadertoy.com/view/ll2cDc )}\n    return .6 + .6 * cos( 6.3 *  c.x  + vec3(0,23,21)  ); \n}\n\n\nvec3 colorful(vec2 uv)\n{\n    vec3 o = vec3(0);\n    vec3 hsv = vec3((1.0-uv.x),1,1);\n    o.rgb = classic_hsv2rgb(hsv);\n    return o;\n}\n\n/*\nreturns - vec3(time since last explosion, index of last explosion, time until next explosion)\n*/\nvec3 lastExplosion(float time)\n{\n    \n    float t = mod(time, 10.);\n    float interval = floor(time/10.);\n    float t0max = 0., imax=-1.;\n    float t0next = 10.;\n    for(float i=0.; i<10.; i++)\n    {\n        float t0 = rand(vec2(interval, i)) * 10.;\n        if(t > t0 && t0 > t0max)\n        {\n            t0max = t0;\n            imax = i;\n        }\n        if(t < t0 && t0 < t0next)\n        {\n            t0next = t0;\n        }\n    }\n    return vec3(t-t0max, 10.*interval+imax, t0next-t);\n}\nvec3 glow(vec2 p, vec2 lpos)\n{\n    vec2 q = p - lpos;\n    float atten = 1./dot(q,q);\n    return vec3(1.0) * atten;\n}\n\n/* draw a firework. Thanks to: https://www.shadertoy.com/view/WtdBRj*/\nvec3 firework(vec2 uvpos,float t,float explNum,float tFadeout){\n    vec3 col = vec3(0);\n\n    // Fireworks base color\n    vec3 baseCol = vec3(0.5,0.5,0.5) + 0.4*sin(vec3(1.)*explNum+vec3(0.,2.1,-2.1));\n    for(float i=0.; i<N_LIGHTS; i++)\n    {\n        \n        float f = i/N_LIGHTS;\n        float r = sqrt(1. - f*f);\n        float th = golden_ratio*2.*pi*i; // Use Golden Ratio for a quasirandom sequence\n        float hash = sin(explNum+i*85412.243);\n        float weight = (1.-0.2*hash);\n        th += hash *3.* 6.28/N_LIGHTS;\n        // Only take x and y coordinates\n        vec2 lpos = vec2(cos(th), sin(th)) * r;\n        // Add some physics\n        lpos.xy *= (1.-exp(-3.*t/weight)) * weight; // explosion, easing out\n        lpos.y += t*0.3*weight - t*(1.-exp(-t*weight)) * 0.6 * weight; // vertical free-fall motion\n        float intensity = 2e-4;\n        intensity *= exp(-2.*t); // Fade out with time\n        intensity *= (1.-0.5*hash); // Randomize per particle\n        intensity *= (1.+10.*exp(-20.*t)); // Intensity burst at explosion\n        intensity *= clamp(3.*tFadeout, 0., 1.); // Fade out before next explosion\n        col += glow(uvpos, lpos) * intensity * baseCol;\n    }\n    \n    \n    col = max(col, 0.);\n    col = 1.-exp(-col); // Tone mapping\n    col = (col*(2.51*col+0.03))/(col*(2.43*col+0.59)+0.14); // Tone mapping\n    col = sqrt(col); // gamma correction\n    return col;\n}\n\nvec3 drawWords(vec2 uv){\n    float word_x = 4.5 + sin((iTime-2.)*0.5)*5.;\n    vec2 uv_words = uv+vec2(word_x,0.); // x: 1.5 <> 9.0\n    vec3 o = vec3(0);\n    o += draw_H(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_A(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_P(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_P(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_Y(uv_words);\n    \n    uv_words-=vec2(1.0,0.);\n    o += draw_C(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_H(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_I(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_N(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_E(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_S(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_E(uv_words);\n    \n    uv_words-=vec2(1.0,0.);\n    o += draw_N(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_E(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_W(uv_words);\n    \n    uv_words-=vec2(1.0,0.);\n    o += draw_Y(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_E(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_A(uv_words);\n    uv_words-=vec2(0.5,0.);\n    o += draw_R(uv_words);\n    \n    \n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec3 o = vec3(0);\n    uv0.x += cos(iTime);\n    o+=drawWords(uv)*colorful(uv0);\n    vec3 lastExpl = lastExplosion(iTime);\n    float t = lastExpl.x;\n    float explNum = lastExpl.y;\n    float tFadeout = lastExpl.z;\n    for(int i = 0;i<FIREWORK_COUNT;i++){\n        vec2 randvec = vec2(rand(explNum+float(i))-0.5,rand(explNum-float(i))-0.5)*dis;\n        vec2 uvpos = uv+randvec;\n        o+=firework(uvpos,t,explNum,tFadeout);\n    }\n    \n    fragColor = vec4(o,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\n1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\n*/\n// color of words\nvec3 wordColor = vec3(0);\n\n/*draw a band*/\nfloat band (float t, float start, float end, float blur){\n    float step1 = smoothstep(start-blur, start+blur, t);\n    float step2 = smoothstep(end+blur, end-+blur, t);\n    return step1*step2;\n}\n\n/*draw rectangle*/\nfloat rectangle(vec2 uv, float left, float right, float bottom, float top, float blur){\n    float band1 = band(uv.x, left, right, blur);\n    float band2 = band(uv.y, bottom, top, blur);\n    return band1*band2;\n}\n\n\nvec3 draw_A(vec2 uv){\n    vec3 col = vec3(0);\n    float x = uv.x;\n    float y = uv.y;\n    float slope = 0.3;\n    float r1 = rectangle(uv, -0.15+y*slope, -0.05+y*slope, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, 0.05-y*slope, 0.15-y*slope, -0.3, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.1, 0.1, -0.05, 0.05, 0.01);\n    col += (r1+r2+r3-r1*r2-r1*r3-r2*r3);\n    return col;\n}\n\nvec3 draw_C(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.1, 0.2, 0.2, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.1, 0.2, -0.3, -0.2, 0.01);\n    col += (r1+r2+r3);\n    return col;\n}\n\nvec3 draw_E(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.1, 0.2, 0.2, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.1, 0.2, -0.05, 0.05, 0.01);\n    float r4 = rectangle(uv, -0.1, 0.2, -0.3, -0.2, 0.01);\n    //col += (r1+r2+r3+r4-r1*r2-r1*r3-r1*r4-r2*r3-r2*r4-r3*r4);\n    col += (r1+r2+r3+r4);\n    return col;\n}\n\nvec3 draw_H(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, 0.1, 0.2, -0.3, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.15, 0.15, -0.05, 0.05, 0.01);\n    col += (r1+r2+r3-r1*r2-r1*r3-r2*r3);\n    return col;\n}\n\n\nvec3 draw_I(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float r1 = rectangle(uv, -0.05, 0.05, -0.3, 0.3, 0.01);\n    col += (r1);\n    return col;\n}\n\n\nvec3 draw_N(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float x = uv.x;\n    float y = uv.y;\n    float slope = 0.45;\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.05-y*slope, 0.05-y*slope, -0.3, 0.3, 0.01);\n    float r3 = rectangle(uv, 0.1, 0.2, -0.3, 0.3, 0.01);\n    col += (r1+r2+r3-r1*r2-r1*r3-r2*r3);\n    return col;\n}\n\nvec3 draw_P(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.1, 0.2, -0.05, 0.05, 0.01);\n    float r3 = rectangle(uv, -0.1, 0.2, 0.2, 0.3, 0.01);\n    float r4 = rectangle(uv, 0.1, 0.2, 0.05, 0.2, 0.01);\n    col += (r1+r2+r3+r4);\n    return col;\n}\n\n\nvec3 draw_R(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float x = uv.x;\n    float y = uv.y;\n    float slope = 0.65;\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.1, 0.2, -0.05, 0.05, 0.01);\n    float r3 = rectangle(uv, -0.1, 0.2, 0.2, 0.3, 0.01);\n    float r4 = rectangle(uv, 0.1, 0.2, 0.05, 0.2, 0.01);\n    float r5 = rectangle(uv, -0.05-y*slope, 0.05-y*slope, -0.3, -0.05, 0.01);\n    col += (r1+r2+r3+r4+r5);\n    return col;\n}\n\nvec3 draw_S(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float r1 = rectangle(uv, -0.2, -0.1, -0.05, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.1, 0.2, 0.2, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.1, 0.2, -0.05, 0.05, 0.01);\n    float r4 = rectangle(uv, -0.2, 0.1, -0.3, -0.2, 0.01);\n    float r5 = rectangle(uv, 0.1, 0.2, -0.3, -0.05, 0.01);\n    col += (r1+r2+r3+r4+r5);\n    return col;\n}\n\n\nvec3 draw_W(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float x = uv.x;\n    float y = uv.y;\n    float slope = 0.3;\n    float r1 = rectangle(uv, -0.2, -0.1, -0.3, 0.3, 0.01);\n    float r2 = rectangle(uv, 0.1, 0.2, -0.3, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.05+y*slope, 0.025+y*slope, -0.3, 0.0, 0.01);\n    float r4 = rectangle(uv, -0.025-y*slope, 0.05-y*slope, -0.3, 0.0, 0.01);\n    col += (r1+r2+r3+r4-r1*r2-r1*r3-r1*r4-r2*r3-r2*r4-r3*r4);\n    return col;\n}\n\nvec3 draw_Y(vec2 uv){\n    vec3 col = vec3(wordColor);\n    float x = uv.x;\n    float y = uv.y;\n    float slope = 0.65;\n    float r1 = rectangle(uv, -0.05+y*slope, 0.05+y*slope, 0.0, 0.3, 0.01);\n    float r2 = rectangle(uv, -0.05-y*slope, 0.05-y*slope, 0.0, 0.3, 0.01);\n    float r3 = rectangle(uv, -0.05, 0.05, -0.3, 0.0, 0.01);\n    col += (r1+r2+r3-r1*r2-r3*r1);\n    return col;\n}\n\n","name":"Common","description":"","type":"common"}]}