{"ver":"0.1","info":{"id":"XcccRs","date":"1731006831","viewed":90,"name":"Fork DULL SKULL TaliaT 879","username":"TaliaT","description":"///// Studies of human anatomy /////\nMove the mouse to explore from different perspectives.\n\nMade a load of changes to try make it look like a skull leaping from a pool of oil to bite the camera but catching on first each time it tries.... ","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","sdf","normals","skeleton","fresnel","skull","human"],"hasliked":0,"parentid":"4XsfDs","parentname":"DULL SKULL - Prologue"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Dull Skull\"\n// Prologue\n// 2024\n// by KÎ›TUR\n// License - Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Unported License.\n\n/*\n=======================================================================\n\nIn this shader, I revisit a key element from my previous release:\n\"DULL SKULL\"\nhttps://www.shadertoy.com/view/DlyyWR\nDULL SKULL - with a brain\nhttps://www.shadertoy.com/view/lXSBzV\n\nInitially, I created this skull, which became the foundation for the\nrest of the skeleton.Building on that foundation, I explore the\nintricacies of the human skeleton through simple mathematics,\nfocusing on the skull as a SDF mostly made of classic linear algebra\nand simple Boolean operations.\n\n=======================================================================\n*/\n\n#define MAX_STEPS 128\n#define MAX_DIST 8.\n#define SURF_DIST 0.010\n\nfloat t(float time){\n    float t = 5.+time*.5;\n    return t += sin(time*.5)*.3;\n}\n\nvec3 Transform(vec3 p, float t){\n    p.y -= .4;\n    p.y += sin(t+1.6)*.3;\n    p.z += sin(t*.9-1.6)*.6-.3;\n    p.yz *= Rot(sin(-t+1.)*.3);\n    p.xy *= Rot(cos(-t*.7+4.)*.4);\n    p.xz *= Rot(sin(t*.5)*1.*cos(t*.3+1.));\n    \n    return p;\n}\n\nvec2 map(vec3 p){\n       \n    float t = t(iTime);\n    mat2 ani = mat2(0);\n    ani = Rot(sin(t-1.7)*.2-.1);   \n    vec3 p_skull = p;\n    p_skull = Transform(p,t);\n\n    // HEAD\n    vec3 p_head = p_skull;\n        float d = Ellipsoid(p_head,vec3(.9,1.1,1.2));//head ellispoid\n        float p_cutb = p_head.y+.7 + sin(p_head.x + sin(cos(p_head.z*1.4)) * 21.)*.02; //bottom cut plane\n        p_cutb = sMin(p_cutb, Ellipsoid(p_head-vec3(0,-.3,-.2),vec3(.7)),.05);//head hole\n        p_cutb = sMin(p_cutb, Ellipsoid(p_head-vec3(0,-.24,.5),vec3(.51)),.1);//head hole front\n    d = sMax(p_cutb, d,.05); //bottom cut\n        float p_cutf = -p_head.z+1.1; //forehead plane\n    d = sMax(p_cutf, d,.2); //forehead cut\n        float cuts_temple = Capsule(vec3(-abs(p_head.x),p_head.yz), vec3(-1.,-1,.8), vec3(-1.8,3,.0), .5 );//temple deepenings\n    d = sMax(cuts_temple, d,.3); //temple cuts\n        float bcut_temple = Capsule(p_head, vec3(-2.,-1.1,.6), vec3(2,-1.1,.6), .6 );//side cuts temple <-> head\n    d = sMax(bcut_temple, d,.3); //side cuts    \n    \n    // UPPER JAW\n    vec3 p_jaw = p_skull-vec3(0,.36,.1);\n        p_jaw.yz *= Rot(PI);\n        p_jaw.y -= sin(p_jaw.x*37.)*.007 - cos(p_jaw.z*59.)*.001;//distortion\n        p_jaw.z *= .9;\n        float ujaw = HollowSphere(p_jaw+vec3(0,-.95,.5),.38,.02,.05 );//jaw sdf\n        float p_cutB = p_skull.z-.6;//cutting plane back\n        ujaw = sMax(p_cutB, ujaw,.05); //jaw back cut\n    vec3 p_jawsc = vec3(abs(p_skull.x),p_skull.yz); //new point def for side cuts\n        p_jawsc.xy *= Rot(-1.);\n        p_jawsc.yz *= Rot(-.4);\n        p_jawsc.y += .3; \n        ujaw = sMax(p_jawsc.y, ujaw,.04); //side cuts\n    \n    d = sMin(ujaw, d,.1);//upper jaw surrounding and d     \n    d -= sin(10.*p_skull.x)*sin(8.*p_skull.y)*sin(6.*p_skull.z)*.03;//distortion      \n        \n    // CHEEKS         \n        // CHEEKBONES\n    vec3 p_eyesur = p_skull-vec3(0,.3,0);\n        float eyesur = Ellipsoid(vec3(abs(p_eyesur.x),p_eyesur.yz)+vec3(-.34,.5,-.87),vec3(.25,.3,.2));//cheekbones   \n        eyesur += sin(12.*p_skull.x)*sin(11.*p_skull.y)*sin(13.*p_skull.z)*.02;//distortion\n    d = sMin(eyesur, d,.1);//union cheekbones and d\n    \n        // ZYGOMATIC ARCH\n    vec3 p_zyg = vec3(abs(p_skull.x),p_skull.yz);\n        p_zyg.x += sin(p_zyg.z*4.+PI)*.08;\n        p_zyg.y += cos(p_zyg.z*9.)*.03;\n        float zyg = Capsule(p_zyg,vec3(.5,-.3,.8),vec3(.75,-.3,0.1),(p_zyg.z)*.1);\n    d = sMin(d,zyg,.06);\n   \n    // NOSE\n        // NOSE BONE\n    vec3 p_nbone = p_skull;\n        p_nbone.yz *= Rot(-2.2);\n        float nbone = HollowSphere(p_nbone+vec3(0,-1.,.4),.1,0.08,.04 );\n    d = sMin(d,nbone,.05);\n    \n        // NOSE HOLE\n    vec3 p_nose = p_skull;//vec3(abs(p_skull.x),p_skull.yz);\n        p_nose.xy *= Rot(.25);\n        float nose = Ellipsoid(p_nose-vec3(.04,-.35,1.),vec3(.03,.1,.8));\n        p_nose.xy *= Rot(-.4);\n        nose = sMin(nose,Ellipsoid( p_nose-vec3(.02,-.36,1.),vec3(.04,.1,.8)),.1);\n    vec3 p_bone = p_skull;\n            \n    d = sMax(nose, d,.06); //nose subtraction\n    d = sMax(Ellipsoid(p_nose+vec3(0.,.3,-.4),vec3(.1,.1,.6)), d,.1); //nose subtraction\n                \n    // LOWER JAW\n    vec3 pN = p_skull;//null - parent rotation\n        pN.z -= .5;\n        pN.y += .4;\n        pN.yz *= ani;\n        pN.z += .5;\n        pN.y -= .4;\n        pN -= sin(pN.y*15.)*.01 - cos(pN.z*39.)*.002;//distortion\n        \n        //CHIN\n    vec3 p_ljaw = pN;\n        p_ljaw.y *= .8;\n        p_ljaw.z -= sin(pN.y*26.)*.008;\n        p_ljaw.y -= cos(pN.x*15.+sin(pN.y*7.)*2.)*.01;\n        float ljaw = HollowSphere(p_ljaw+vec3(0,.77,-.74),.38,0.03,.04 );//chin  \n        ljaw = sMax(p_ljaw.z-.65,ljaw,.1);\n        \n        // MANDIBLE BOTTOM & BACK\n    vec3 p_maB = vec3(abs(pN.x),pN.yz);\n        p_maB.yz *= Rot(-1.3);\n        p_maB.xz *= Rot(-.34);\n        p_maB.xy *= Rot(-.39);\n        p_maB -= vec3(0.85,.0,.63);\n        ljaw = sMin(ljaw,rBox(p_maB,vec3(0.,smoothstep(0.,6.,abs(-p_maB.z)+.9),.45),.04),.17);\n        ljaw = sMax(Ellipsoid(p_maB-vec3(.0,.0,-.55),vec3(.5,.15,.26)),ljaw,.04);\n        p_ljaw -= sin(p_ljaw.y*22.)*.001 - cos(p_ljaw.z*19.)*.006;//distortion\n        ljaw = sMax(p_ljaw.y+.93,ljaw,.02);//bottom cut plane\n    d = sMin(ljaw, d,.002);//union mandible and d \n\n    // EYE HOLES\n    vec3 p_eyeH = p_skull;\n        p_eyeH += sin(p_eyeH.x*29.+cos(p_eyeH.y*32.))*.005; //eye distortion\n        float eyes = Ellipsoid(vec3(abs(p_eyeH.x),p_eyeH.y-.4,p_eyeH.z)+vec3(-.29,.49,-1.1),vec3(.21,.25,.25)); // eye balls\n        float eyeH = sMin(eyes,Sphere(vec3(abs(p_skull.x),p_skull.yz)-vec3(.25,0.,.7),.35),.05);// eye holes back\n        eyeH = sMax(-p_eyeH.y,eyeH,.2);\n    d = sMax(eyeH, d,.05); //eye ball subtraction\n\n    // PLANE\n    vec3 pPla = p;\n        pPla.z += sin(p.y*.2-t*.7)-.2;\n        float pla = pPla.z;    \n    d = sMin(d,pla,.8);\n    \n    // EYEBALLS\n    vec3 p_eye = p_skull;\n    p_eye.x = abs(p_eye.x);\n    p_eye.y -= .4;\n    p_eye += vec3(-.29,.57,-.9);\n    eyes = Ellipsoid(p_eye,vec3(.2));\n    \n    // UPPER TEETH\n    vec3 p_tooth = p_skull;\n        p_tooth -= vec3(0,-.77,.7);\n        p_tooth *= vec3(1.2,1,1);\n        pModPolar(p_tooth.xz, 32.0);\n\n        float teeth = Ellipsoid(p_tooth - vec3(0.43, 0., 0.), vec3(0.03, 0.15, 0.045));\n        teeth = max(teeth, -p_skull.y-.73+sin(p_skull.x*32.)*.006);\n        teeth = max(teeth, -p_skull.z+.7);\n        teeth = sMax(Sphere(p_skull-vec3(0.02,-.88,.98),.23),teeth,.01);// narrowing front teeth\n    d = min(d,teeth);\n        \n    // LOWER TEETH\n    vec3 p_ltooth = pN;\n        p_ltooth -= vec3(0,-.77,.7);\n        p_ltooth *= vec3(1.2,1,1);\n        pModPolar(p_ltooth.xz, 32.0);\n\n        float lteeth = Ellipsoid(p_ltooth - vec3(0.42, 0., 0.), vec3(0.03, 0.15, 0.045));\n        lteeth = max(lteeth, pN.y+.79+sin(p_skull.x*29.)*.004);\n        lteeth = max(lteeth, -pN.z+.7);\n        lteeth = sMax(Sphere(pN-vec3(0.005,-.87,.89),.24),lteeth,.02);// narrowing front teeth\n    d = min(d,lteeth);\n    \n    // MATERIALS\n    vec2 res = vec2(d,0);\n    if(eyes<d) res = vec2(eyes,1);\n    \n    return res;\n}\n\nvec2 RM(vec3 ro, vec3 rd){\n    vec2 res = vec2(0);\n    float mat = 0.;\n    float t=0.;\n    for(int i=0;i<MAX_STEPS; i++){\n        vec3 p = ro + rd*t;\n        float d = map(p).x;\n        mat = map(p).y;\n        t += d;\n        if(t>MAX_DIST||abs(d)<SURF_DIST) break;\n    }\n    res = vec2(t,mat);\n    \n    return res;\n}\n\nvec3 calcNormal (vec3 p){\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ ){\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+.001*e).x;\n    }\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = t(iTime*0.5);\n\tvec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(.0, 0, 3.); //poscam\n    ro.xz *= Rot(-m.x*.2);\n    ro.yz *= Rot(m.y);\n    vec3 rd = GetRayDir(uv, ro, vec3(-1,0,0), 1.0);\n    \n    vec3 col = vec3(1);\n    float d = RM(ro, rd).x;\n    float mat = RM(ro,rd).y;\n    \n    if(d<MAX_DIST){\n        \n        vec3 p = ro + rd*d;\n        vec3 n = calcNormal(p);\n        float fresnel = pow(0.5+dot(rd, n),.4);\n        col = vec3(0.6,.3,.2);\n        col += fresnel;\n        \n        // COLOR EYES\n        if(mat==1.)col = vec3(fragColor.x*1.0,fragColor.y*0.04,fragColor.z*0.02);\n    }\n    \n    col = mix( col, vec3(2.0), 0.4-exp(-0.02*pow(d,2.)) );//fog    \n    col = pow(col, vec3(.14545)); //gamma correction\n    \n    fragColor = vec4(col,0.5);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592\n\n// https://mercury.sexy/hg_sdf/\nfloat pModPolar(inout vec2 p, float repetitions) {\n    \n    float angle = 2.*PI/repetitions,\n          a = atan(p.y, p.x)+angle,\n          r = length(p),\n          c = floor(a / angle);\n    a = mod(a, angle) - angle / 2.0;\n    p = vec2(cos(a), sin(a)) *r ;\n    if (abs(c) >= (repetitions / 2.0)) c = abs(c);\n    return c;\n}\n\n//===================================================================//\n// below by https://iquilezles.org/articles/distfunctions/\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sMin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sMax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat Sphere(vec3 p,float s){\n    return length(p)-s;\n}\n\nfloat Ellipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat rBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat Capsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat HollowSphere( vec3 p, float r, float h, float t )\n{\n  float w = sqrt(r*r-h*h);\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\n\n// above by https://iquilezles.org/articles/distfunctions/\n//===================================================================//\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n","name":"Common","description":"","type":"common"}]}