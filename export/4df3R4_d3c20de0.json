{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Built from the basics of'Clouds' Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Edited by Dave Hoskins into \"Star Nursery\"\n\nmat3 m = mat3( 0.00,  0.90,  0.60,\n              -0.90,  0.36, -0.48,\n              -0.60, -0.48,  0.34 );\n\n// Random number used by 2D noise function...\nfloat random(vec2 ab)\n{\n    float f = (cos(dot(ab ,vec2(21.9898,78.233))) * 43758.5453);\n    return fract(f);\n}\n// A 2D noise function...\nfloat noise(in vec2 xy)\n{\n    vec2 ij = floor(xy);\n    vec2 uv = xy-ij;\n    uv = uv*uv*(3.0-2.0*uv);\n   \n\n    float a = random(vec2(ij.x, ij.y ));\n    float b = random(vec2(ij.x+1., ij.y));\n    float c = random(vec2(ij.x, ij.y+1.));\n    float d = random(vec2(ij.x+1., ij.y+1.));\n    float k0 = a;\n    float k1 = b-a;\n    float k2 = c-a;\n    float k3 = a-b-c+d;\n    return (k0 + k1*uv.x + k2*uv.y + k3*uv.x*uv.y);\n}\n\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n   \n\n    f = f*f*(3.1-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.900*noise( p ); p = m*p*2.02;\n    f += 0.3900*noise( p ); p = m*p*2.33;\n    f += 0.6250*noise( p ); p = m*p*2.01;\n    f += 0.1825*noise( p ); p = m*p*2.01;\n    return f;\n}\n\nvec4 map( in vec3 p, float time)\n{\n    float d = 0.2 - p.y;\n\n    float f= fbm( p*1.0 - vec3(.4,0.3,-0.3)*time);\n    d += 4.0 * f;\n\n    d = clamp( d, 0.0, 1.0 );\n   \n    vec4 res = vec4( d );\n    res.w = pow(res.y, .1);\n\n    res.xyz = mix( .7*vec3(1.0,0.4,0.2), vec3(0.2,0.0,0.2), res.y * 1.);\n    res.xyz = res.xyz + pow(abs(.95-f), 26.0) * 1.85;\n    return res;\n}\n\n\nvec3 sundir = vec3(0.6,0.6,0.6);\n\n\nvec4 raymarch( in vec3 ro, in vec3 rd, float time )\n{\n    vec4 sum = vec4(0, 0, 0, 0);\n\n    float t = 0.0;\n    for(int i=0; i<600; i++)\n    {\n        vec3 pos = ro + t*rd;\n        vec4 col = map( pos, time );\n       \n        // Accumulate the alpha with the colour...\n        col.a *= 0.1;\n        col.rgb *= col.a;\n\n        sum = sum + col*(1.0 - sum.a);   \n\n        if (sum.a > 0.99) break;\n        t += max(0.1,0.08*t);\n    }\n    sum.xyz /= (0.003+sum.w);\n\n    return clamp( sum, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime+5.4;\n\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec2 mo = (-1.0 + 2.0 + iMouse.xy) / iResolution.xy;\n   \n    // Camera code...\n    vec3 ro = 5.6*normalize(vec3(cos(2.75-3.0*mo.x), .4-1.3*(mo.y-2.4), sin(2.75-2.0*mo.x)));\n    vec3 ta = vec3(.0, 5.6, 2.4);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // Ray march into the clouds adding up colour...\n    vec4 res = raymarch( ro, rd, time);\n   \n\n    float sun = clamp( dot(sundir,rd), 0.0, 2.0 );\n    vec3 col = vec3(0.2,0.2,0.3);\n    col += .4*vec3(.4,.2,0.67)*sun;\n    col = clamp(col, 0.0, 1.0);\n    col += 0.43*vec3(.4,0.4,0.2)*pow( sun, 21.0 );\n   \n    // Do the stars...\n    float v = 1.0/( 2. * ( 1. + rd.z ) );\n    vec2 xy = vec2(rd.y * v, rd.x * v);\n    float s = noise(rd.xz*134.);\n    s += noise(rd.xz*370.);\n    s += noise(rd.xz*870.);\n    s = pow(s,19.0) * 0.00000001 * max(rd.y, 0.0);\n    if (s > 0.0)\n    {\n        vec3 backStars = vec3((1.0-sin(xy.x*20.0+time*13.0*rd.x+xy.y*30.0))*.5*s,s, s);\n        col += backStars;\n    }\n\n    // Mix in the clouds...\n    col = mix( col, res.xyz, res.w*1.0);\n   \n       \n    fragColor = vec4( col, 3.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4df3R4","date":"1363137343","viewed":440,"name":"Ocean on Fire","username":"FernandoOrtega","description":"I made this by playing around with Dave Hoskin's code: https://www.shadertoy.com/view/XsfGzH\n\nNothing fancy, just having fun in my first time here!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fire","ocean"],"hasliked":0,"parentid":"","parentname":""}}