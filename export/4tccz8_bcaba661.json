{"ver":"0.1","info":{"id":"4tccz8","date":"1531420080","viewed":163,"name":"Space transforms (linear, warp)","username":"darkeclipz","description":"Examples.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["warp","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (Un)comment the lines 57-60.\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.*fragCoord-R)/R.y; // Center the coords.\n    vec2 ouv = uv;\n    vec3 col = vec3(0);\n    float t = -cos(iTime) * 0.5 + 0.5; // ranges from [0,1] over time.\n    mat2 r = mat2( cos(t), -sin(t), sin(t), cos(t) );\n    float d = length(uv)*t;\n    mat2 rot = mat2(cos(d), -sin(d), sin(d), cos(d));\n     \n\n    // Effects\n    // uv = r*uv; // rotate\n    // uv = uv + t*uv.x;  // shear\n    uv*=rot; // Bend \n    //uv = uv + t*fbm(uv); // warp with fbm\n    \n    \n    // old 'antialiasing'\n    \n    if( ouv.x < 0. ) {\n        vec2 f = fract(6.*uv);\n        float gf = 9. / iResolution.y;\n        float gw = 9. / iResolution.y;\n        col = mix( col, vec3(1,0,0), smoothstep(0.,gf, f.x) - smoothstep(gf+gw,gf+2.*gw,f.x) );\n        col = mix( col, vec3(1,0,0), smoothstep(0.,gf, f.y) - smoothstep(gf+gw,gf+2.*gw,f.y) );       \n    }\n    else {\n        \n        // Grid \n        // graph 1 : https://www.desmos.com/calculator/lk6nfwzsru\n        // graph 2 : https://iquilezles.org/apps/graphtoy/  paste  ' 1-smoothstep( 0,0.1, abs(frac(x)-0.1) ) '\n\n\t\tfloat pixelSize = 18. / iResolution.y; // 2 * 6 + 50% = 18\n        vec2 f = smoothstep(pixelSize, 0., abs(fract(6.*uv)-pixelSize));\n        //col = mix( col, vec3(1), f.x + f.y );  \n        col = mix( col, vec3(1), clamp(f.x + f.y, .0,1.) );  \n    }\n    \n\n    \n    // from Fabrice\n    //f = smoothstep(gw,0., abs(f-(gf+gw/2.))) ; // 2 figure this out\n \t//col = mix( col, vec3(1), smoothstep(gw,0., abs(f.x-(gf+gw/2.))) ); // 1 figure this out\n    //col = mix( col, vec3(1), smoothstep(gw,0., abs(f.y-(gf+gw/2.))) );\n    \n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}