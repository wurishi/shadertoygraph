{"ver":"0.1","info":{"id":"NtBXRW","date":"1629243630","viewed":257,"name":"Spacy Fractal","username":"julianlumia","description":":octopusballoon:\ncoloring based on:  https://www.shadertoy.com/view/WlKXRW","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//slightly edited droste zoom effect from: roywig\n//https://shadertoy.com/view/Xs3SWj\n\n#define PI 3.14159\n\nvec2 cInverse(vec2 a) { return\tvec2(a.x,-a.y)/dot(a,a); }\nvec2 cMul(vec2 a, vec2 b) {\treturn vec2( a.x*b.x -  a.y*b.y,a.x*b.y + a.y * b.x); }\nvec2 cDiv(vec2 a, vec2 b) {\treturn cMul( a,cInverse(b)); }\nvec2 cExp(vec2 z) {\treturn vec2(exp(z.x) * cos(z.y), exp(z.x) * sin(z.y)); }\nvec2 cLog(vec2 a) {\tfloat b =  atan(a.y,a.x); if (b>0.0) b-=2.0*PI;return vec2(log(length(a)),b);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    vec2 z = (fragCoord-.5*iResolution.xy);\n    float r1 =3., r2 =.495,\n\tscale = log(r2/r1),angle = atan(scale/(0.+2.*PI));\n    z = cLog(z);\n\tz.y -= iTime/2.;\n    z = cDiv(z, cExp(vec2(0.,angle))*cos(angle)); \n    z.x = mod(z.x-iTime,scale);\n    z = cExp(z)*r1;\n    fragColor = texture(iChannel0,.5+.5*z); \n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Fork of \"1. spacebaaals\" by julianlumia. https://shadertoy.com/view/WdByDG\n// 2021-07-24 15:02:41\n\n// Fork of \"lost in spacetime..\" by julianlumia. https://shadertoy.com/view/wlGSzm\n// 2020-04-18 14:32:19\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define T (iTime*0.125)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n#define pmod(p, x) mod(p, x) - 0.5*x\n#define lmod(d, x) (mod(d,x)/x - 0.5)\n\nmat2 Rot(float a) {\n float s = sin(a);\n float c = cos(a);\n return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n p = abs(p)-s;\n return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 pA = vec3(0);\nmat3 rotate( in vec3 v, in float angle)\n{\n float c = cos(radians(angle));\n float s = sin(radians(angle));\t\n return mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n (1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n (1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n );\n}\n\nvec3 text(vec2 t, vec3 p){\n vec3 o = vec3(0);\n float d = 10e6;\n     t = pmod(t,1./0.6);\n t *=2.;\n float yid = (floor( (p.y + 0.)*0. ) );\n float W = .2;\n float modd = 2.1;\n float sqD = max(abs(t.x), abs(t.y));\n sqD +=.5 + yid*0.4;\n float sqid = floor(sqD/modd);\n sqD = lmod(sqD, modd);  \n d = min(d, sqD);\n o +=  pal(0.6, vec3(1.,0.7,0.6)*0.5, vec3(8.4 ,4.19,7.4 - yid*0.2), vec3(3.,7.,3.),-1. + iTime + sqid*0.5 + p.z + t.x*2.5 - t.y*1.5);\n o *= step(sin(sqid*10.), -0.);\n float aa = 20.;\n sqD -= 0.5;\n sqD = abs(sqD*1.);\n o -= exp(-sqD*aa)*1.;\n sqD -= 1.;\n sqD = abs(sqD*1.);\n o -= exp(-sqD*aa)*1.;\n return o;\n}\n\nvec3 tex3D(  in vec3 p, in vec3 n ){\n float dp = dot(p,p)*.8;\n p /= dp;\n// p.xz*= Rot(cos(iTime*0.5));\n// p.xy *=  Rot(cos(iTime*1.-0.2));\n// p = rotate( ( vec3(cos(p.xyz*.5+iTime*.5) ) ), 120.)*p-3.;\n p.xy=sin(p-vec3(-T*tau*1.,-T*tau*2.,-T*tau*1.+sin(iTime)*1.)).xy;\n p.xy*= Rot((sin(iTime*.01)));\n vec3 q = (text(p.xz, p)).xyz;\n return q;\n}\n\nvec2 condmin(in vec2 d1, in vec2 d2) {\nreturn vec2(min(d1.x, d2.x), mix(d1.y, d2.y, step(d2.x, d1.x)));\n}\n\nfloat g1;\n\nvec2 GetDist(vec3 p) {\n vec2 d =vec2(0.);\n vec3 q = p;\n float dp = dot(p,p)*.1;\n p /= dp;\n //p.xz*= Rot(cos(iTime*0.5));\n //p.xy *=  Rot(cos(iTime*.0001-0.2));\n //p = rotate( ( vec3(cos(p.xyz*.5+iTime*.5) ) ), 120.)*p-3.;\n p.xy=sin(p-vec3(-T*tau*1.,-T*tau*2.,-T*tau*1.+sin(iTime)*1.)).xy;\n \n p.xy*= Rot((1.));\n d = vec2(sdBox(p,vec3(1.)) + sdBox(q,vec3(0.0)),1);\n d.x *=1.;\n d.x =(((d.x*dp)/10.));\n g1 +=1./(.018+pow(abs(d.x),1.));\n d = condmin( d,d);\n return d;\n}\n\nvec2 RayMarch (vec3 ro, vec3 rd) \n {\n vec2 h, t=vec2( 0.);\n for (int i=0; i<100; i++) \n  {\n h = GetDist(ro + t.x * rd);\n if(h.x<SURF_DIST||t.x>MAX_DIST) break;\n  t.x+=h.x;t.y=h.y;\n }\n if(t.x>100.) t.x=0.;\n return t;\n}\n\nvec3 GetNormal(vec3 p){\nvec2 e = vec2(.00035, -.00035); \nreturn normalize(\n e.xyy * GetDist(p + e.xyy).x + \n e.yyx * GetDist(p + e.yyx).x + \n e.yxy * GetDist(p + e.yxy).x + \n e.xxx * GetDist(p + e.xxx).x);\n}\n\n\nfloat GetLight(vec3 p) {\n// vec3 lightPos = vec3(sin(iTime)*2., cos(iTime)*2., 3);\n     vec3 lightPos = vec3(0.,0.,.0);\n vec3 l = normalize(p-lightPos);\n vec3 n = GetNormal(p);\n float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n vec2 d = RayMarch(p+n*SURF_DIST*1., l);\n return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n vec3 f = normalize(l-p),\n r = normalize(cross(vec3(0,1,0), f)),\n u = cross(f,r),\n c = p+f*z,\n i = c + uv.x*r + uv.y*u,\n d = normalize(i-p);\n return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n vec2 m = iMouse.xy/iResolution.xy;  \n vec3 col = vec3(0);  \n vec3 ro = vec3(0, 0, 1.1);\n// ro.xy *= Rot(sin(iTime*.1)*6.2831);\n// ro.xz *= Rot(sin(iTime*0.2)*6.2831);\n vec3 rd = R(uv, ro, vec3(0,.0,0), 1.2);\n vec2 d = RayMarch(ro, rd);\n float t2;\n t2=d.x;   \n if(t2>0.)\n {\n  vec3 p = ro + rd * t2;\n  vec3 n = GetNormal(p);\n  vec3 baseColor = vec3(1,0,cos(iTime*2.)+.5);\n  float dif = GetLight(p);\n  col = vec3(dif);\n  col+=baseColor;\n  if(d.y==1.) col += tex3D(p,n)*5.;\n }\n col*=g1*vec3(.00005);  \n col+=g1*vec3(-.0001);  \n float fog = 4. / (1. + d.x * d.x *15.);\n col *= vec3(fog); \n col+=g1*vec3(.000003);  \n col*= 5.; \n fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}