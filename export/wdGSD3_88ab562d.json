{"ver":"0.1","info":{"id":"wdGSD3","date":"1681866203","viewed":53,"name":"gauss blur test","username":"Angramme","description":"f","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["f"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    float gauss = texture(iChannel0, uv).r;\n    float d = texture(iChannel1, uv).r;\n    \n    color += gauss;\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_STEPS 200\n#define MAX_DIST 20.\n#define MIN_DIST .001\n\n\nfloat dist(vec3 p){\n    float sph = distance(p, vec3(0, 0, 6))-1.;\n    float plane = p.y + 1.;\n    \n    return min(sph, plane);\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float dt = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd*dt;\n        float d = dist(p);\n        if(d>MAX_DIST || d<MIN_DIST)break;\n        dt += d;\n    }\n    return dt;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float d = march(ro, rd);\n    \n    color += d/MAX_DIST;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define KERNEL 15.\n#define KBOUND (KERNEL-1.)/2.\n\nfloat dist(vec2 uv){\n    return texture(iChannel0, uv).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec2 px = vec2(1./iResolution.x,0.);\n    \n    \n    float s = 0.;\n    for(float i=-KBOUND; i<=KBOUND; i++){\n        float f = 1./(abs(i)+1.);\n        color += dist(uv+i*px)*f;\n        s += f;\n    }\n    color /= s;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define KERNEL 15.\n#define KBOUND (KERNEL-1.)/2.\n\nfloat dist(vec2 uv){\n    return texture(iChannel0, uv).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec2 px = vec2(0., 1./iResolution.y);\n    \n    \n    float s = 0.;\n    for(float i=-KBOUND; i<=KBOUND; i++){\n        float f = 1./(abs(i)+1.);\n        color += dist(uv+i*px)*f;\n        s += f;\n    }\n    color /= s;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}