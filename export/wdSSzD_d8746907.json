{"ver":"0.1","info":{"id":"wdSSzD","date":"1553064555","viewed":233,"name":"edge filter - llm","username":"lilieming","description":"video effect ","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["videoeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// learning shader on the load\n// lilieming\n\nprecision highp float;\n     \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const float off = 1.0 / 256.0;\n\n    // Sample the neighbor pixels\n     vec4 s00 = texture(iChannel0, uv + vec2(-off, -off));\n     vec4 s01 = texture(iChannel0, uv + vec2( 0., -off));\n     vec4 s02 = texture(iChannel0, uv + vec2( off, -off));\n     vec4 s10 = texture(iChannel0, uv + vec2(-off, 0.));\n     vec4 s12 = texture(iChannel0, uv + vec2( off, 0.));\n     vec4 s20 = texture(iChannel0, uv + vec2(-off, off));\n     vec4 s21 = texture(iChannel0, uv + vec2( 0., off));\n     vec4 s22 = texture(iChannel0, uv + vec2( off, off));\n    \n    // Sobel filter in X and Y directions\n     vec4 sobelX = s00 + 2.0 * s10 + s20 - s02 - 2.0 * s12 - s22;\n     vec4 sobelY = s00 + 2.0 * s01 + s02 - s20 - 2.0 * s21 - s22;\n    // Find edge using a threshold of 0.07 which is sufficient\n    // to detect most edges.\n    vec4 edgeSqr =  (sobelX * sobelX + sobelY * sobelY);\n\n    // Output to screen\n    fragColor = edgeSqr;\n}","name":"Image","description":"","type":"image"}]}