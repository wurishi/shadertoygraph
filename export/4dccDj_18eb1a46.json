{"ver":"0.1","info":{"id":"4dccDj","date":"1520160969","viewed":85,"name":"fBm Test - tmiya","username":"tmiya","description":"fBm Test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define OCTAVES 6\n\nfloat u_lacunarity = 2.0;\nfloat u_gain = 0.5;\nfloat u_amplitude_init = 0.5;\nfloat u_frequency_scale = 5.0;\n\nfloat Hash(vec2 p) \n{ \n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); \n}\n\nfloat Noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    // four corners in 2D of a tile\n    float a = Hash(i);\n    float b = Hash(i + vec2(1.0, 0.0));\n    float c = Hash(i + vec2(0.0, 1.0));\n    float d = Hash(i + vec2(1.0, 1.0));\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    // mix 4 corners porcentages\n    return mix(a, b, u.x) + \n            (c - a) * u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat Fbm(vec2 p/*= frequency*/)\n{\n    float value = 0.0;\n    float amplitude = u_amplitude_init;\n\n    for (int i=0 ; i<OCTAVES ; i++) {\n        value += amplitude * Noise(p);\n        p *= u_lacunarity;\n        amplitude *= u_gain;\n    }\n\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sp = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec2 pos = vec2(sp * u_frequency_scale);\n\n    vec3 color = vec3(0.0);\n    color += Fbm(pos);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}