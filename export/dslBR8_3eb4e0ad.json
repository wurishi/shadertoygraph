{"ver":"0.1","info":{"id":"dslBR8","date":"1688676842","viewed":164,"name":"Unorm Vec4 Packing","username":"piyushslayer","description":"Mimicking glsl's packUnorm4x8/unpackUnorm4x8 functionality for easy packing and unpacking unorm textures/color values in a single uint. Can export upto 4 vec4s for the price of 1. ","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["compression","packing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = fragCoord/iResolution.xy;   \n    vec2 mouse = bool(dot(vec2(lessThan(iMouse.xy, vec2(0.5))), vec2(1.0))) ? (vec2(0.5)) : (iMouse.xy / iResolution.xy);\n    vec4 packedAll = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    mat4 unpackedAll = mat4(\n                                unpackUnorm4x8(floatBitsToUint(packedAll.x)),\n                                unpackUnorm4x8(floatBitsToUint(packedAll.y)),\n                                unpackUnorm4x8(floatBitsToUint(packedAll.z)),\n                                unpackUnorm4x8(floatBitsToUint(packedAll.w))\n                            );\n    \n    fragColor = unpackedAll[uint(dot(vec2(greaterThan(uv, mouse.xy)), vec2(1.0, 2.0)))]; \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel0, uv, 0.0))),\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel1, uv, 0.0))),\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel2, uv, 0.0))),\n                        uintBitsToFloat(packUnorm4x8(textureLod(iChannel3, uv, 0.0)))\n                    );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"uint packUnorm4x8(in vec4 unpacked)\n{\n    uvec4 utex = uvec4(unpacked * 255.0);\n    return ((utex.x << 24) | (utex.y << 16) | (utex.z << 8) | (utex.w));\n}\n\nvec4 unpackUnorm4x8(in uint packed)\n{\n    return vec4(\n        float((packed & 4278190080u) >> 24),\n        float((packed & 16711680u) >> 16),\n        float((packed & 65280u) >> 8),\n        float((packed & 255u))\n    ) * 0.0039215686;\n}","name":"Common","description":"","type":"common"}]}