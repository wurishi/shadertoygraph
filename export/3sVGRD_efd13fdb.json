{"ver":"0.1","info":{"id":"3sVGRD","date":"1569835259","viewed":723,"name":"Wave simulation w/ refraction","username":"id523","description":"A simulation of the 2D wave equation, using leapfrog integration.\nAlso contains a simple light refraction effect.","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["wave","simulation","interactive","equation","pde","differential"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Specular reflection from surface\nconst float lightPower = 600.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n\tfloat p = v(pos,0,0).x;\n    vec3 g = vec3(gradScale * (v(pos,1,0).x - p), gradScale * (v(pos,0,1).x - p), 1.0);\n    vec3 ng = normalize(g);\n    vec2 texPos = (fragCoord - k * ng.xy) / iResolution.xy;\n    fragColor = texture(iChannel1, texPos);\n    fragColor.rgb += vec3(pow(max(dot(ng, lightPos),0.0), lightPower));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Simulation step size\nconst float h = 0.3;\n\n// High-frequency damping parameter\nconst float d = 0.003;\n\nconst float gradScale = 40.0;\n\n// Direction of light source\nconst vec3 lightPos = normalize(vec3(-0.1, -0.18, 1.0));\n\n// Scale factor for ripple refraction\nconst float k = 120.0;\n\nvec4 readState(sampler2D tex, ivec2 pos, ivec2 bound) {\n    ivec2 posClamp = clamp(pos, ivec2(0), bound - 1);\n    vec4 nearestState = texelFetch(tex, posClamp, 0);\n    // Try to simulate an absorbing boundary\n    if (posClamp != pos) {\n    \tnearestState.x -= nearestState.y - 0.5 * h * nearestState.z;\n    }\n    return nearestState;\n}\n\n#define v(pos, dx, dy) readState(iChannel0, pos + ivec2(dx, dy), ivec2(iResolution.xy))\n\n#define UPDATE_WAVE \\\n\tivec2 pos = ivec2(fragCoord); \\\n    vec4 state = v(pos,0,0); \\\n    state.z = v(pos,1,0).x + v(pos,-1,0).x + v(pos,0,1).x + v(pos,0,-1).x - 4. * state.x; \\\n   \tstate.y += state.z * h; \\\n    state.x += (state.y + d * state.z) * h;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    UPDATE_WAVE\n    fragColor = state;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    UPDATE_WAVE\n    fragColor = state;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// hash22 from https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        for (int i = 0; i < 20; i++) {\n            vec2 circlePos = iResolution.xy * hash22(vec2(i, iDate.w));\n            vec2 circleProps = hash22(vec2(i + 100, iDate.w));\n        \tfloat circ = smoothstep(-4.0, 4.0, circleProps.x * 20.0 - length(fragCoord - circlePos));\n            circ *= circleProps.y - 0.5;\n            fragColor.x += circ;\n        }\n    } else {\n        \n        UPDATE_WAVE\n            \n        if (iMouse.z > 0.) {\n            state.x -= 0.05 * smoothstep(-2., 2., 5. - length(fragCoord - iMouse.xy));\n        }\n        \n        fragColor = state;\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}