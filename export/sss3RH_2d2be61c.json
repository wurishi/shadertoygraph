{"ver":"0.1","info":{"id":"sss3RH","date":"1615533299","viewed":90,"name":"fractal_core_ifs","username":"kinakomoti","description":"I made this as an exercise for a fractal geometry by IFS. I refered to several document.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//refered  https://qiita.com/kaneta1992/items/21149c78159bd27e0860 by @kaneta1992\n//inspared  https://www.shadertoy.com/view/4ddfDr by Isdlive\n//refered https://neort.io/product/bvcrf5s3p9f7gigeevf0 by gaz\n\n#define repeat(p,span) mod(p,span) - 0.5 * span)\n\nconst float pi = 3.141592;\nconst float pi2 = pi * 2.;\n\nmat2 rot(float a){\n    float s = sin(a),c = cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p,float r){\n    float a = atan(p.x,p.y) + pi/r;\n    float n = pi2/r;\n    a = floor(a / n) * n;\n    return p * rot(-a);\n}\nmat3 camera(vec3 ro,vec3 ta){\n    vec3 up = vec3(0,1,0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw,up));\n    vec3 cv = normalize(cross(cu,cw));\n\n    return mat3(cu,cv,cw);\n}\n\nfloat sdBox(vec3 p, vec3 b){\n    return length(max(abs(p)- b, 0.0));\n}\n\nfloat map(vec3 p){\n    vec3 z = p;\n    z.xy = pmod(p.xy,6.);\n    float scale = 2.0;\n    float sum = scale;\n    float d = 1e5;\n    float time = abs(sin(iTime * 0.5) * 4.0);\n    float s = min(floor(time),3.0) + 1.0;\n    for(float i = 0.; i < 5.; i++){\n    p.xy = pmod(p.xy,3.);\n    p=abs(p)-.3;\n    if(p.x<p.y)p.xy=p.yx;\n    if(p.x<p.z)p.xz=p.zx;\n    if(p.y<p.z)p.yz=p.zy;\n    p.xy-=.2;\n    p.xy*=rot(.5);\n    p.yz*=rot(.5);\n    }\n  float h=.5;\n  p.x-=clamp(p.x,-h,h);\n  // torus SDF\n  return length(vec2(length(p.xy)-.5,p.z))-.05;\n\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.0001,0.0);\n    float d = map(p);\n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx)\n    );\n\n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    float dist = 0.9 + 0.9 * sin(iTime * 0.1);\n    vec3 ro = vec3(cos( 0.1 * iTime) * dist,1,sin(0.1 *iTime) * dist);\n    vec3 ta = vec3(0);\n    vec3 ray = camera(ro,ta) * normalize(vec3(uv,1.8));\n\n    vec3 p = ro;\n    float d = 0., t = 0.;\n    float counter = 0.;\n    float kaisu = 0.;\n    for(float i = 0.; i < 64.; i++ ){\n        d = map(p);\n        counter += 0.1/(0.01 + d*d);\n        kaisu = i;\n        if(d < 0.01) break;\n        p += ray * d;\n\n    }\n\n    if(d < 0.01){\n        col = mix(vec3(.6,.3,.3),vec3(0),abs(p.x * p.y) + kaisu);\n        col += .06 * counter;\n    }\n    else{\n        col = vec3(0.);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}