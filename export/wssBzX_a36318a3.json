{"ver":"0.1","info":{"id":"wssBzX","date":"1588787265","viewed":289,"name":"ShATI - Portail","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 2nd subject: portal :) ","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching","animation","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI 3.141592\n#define TAU 6.2831853071\n#define dt (mod(iTime+PI*0.5,TAU))\n\n// reference for animation curves: https://easings.net/\nfloat easeInOutCirc(float x)\n{\n    return x < 0.5\n      ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2.\n      : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;\n}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n#define animation(time) (-1.+2.*easeInOutCirc(time))\nfloat square (vec2 uv)\n{\n    float width = 0.35;\n    uv.x += animation(sin(dt)*0.5+0.5);\n    uv *= rot(animation(sin(dt)*0.5+0.5)*PI);\n\tuv = abs(uv);\n    return smoothstep(width,width*1.05,max(uv.x,uv.y));\n}\n\nfloat sc (vec3 p, float s)\n{\n    p = abs(p);\n    p = max(p, p.yzx);\n    return min(p.x, min(p.y, p.z)) - s;\n}\n\nfloat cube (vec3 p)\n{\n    p.x += animation(sin(dt)*0.5+0.5)*2.8;    \n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    p.xy *= rot(animation(sin(dt)*0.5+0.5)*PI);\n    return max(-sc(p, 0.8),length(max(abs(p)-vec3(1.),0.)));\n}\n\nvec3 raymarch (vec2 uv)\n{\n    vec3 ro = vec3(uv*3.,5.),\n        rd = normalize(vec3(0.,0.,-1.)),\n        p = ro,\n    \tcol = vec3(0.,0.05,0.05);\n    float shad;\n    bool hit = false;\n    \n    for (float i=0.; i<32.; i++)\n    {\n        float d = cube(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/32.;\n            break;\n        }\n        p+=d*rd;\n    }\n    if (hit) col = vec3(1.-shad);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\t\n    vec3 col =(uv.x >= 0.) ? raymarch(uv):vec3(0.,0.05,0.05)+square(uv);\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}