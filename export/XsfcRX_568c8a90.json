{"ver":"0.1","info":{"id":"XsfcRX","date":"1489022977","viewed":94,"name":"PS20","username":"CarebearDrew","description":"private","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["private"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 red = vec3(1.0,.0,.0);\nvec3 brown = vec3(0.87,0.72,0.52);\nmat2 rotate2d(float angle)\n{\n  return mat2(cos(angle), - sin(angle), sin(angle), cos(angle));   \n}\nfloat Rectangle (vec2 size,vec2 move, vec2 uv){\n\n  \tfloat value = step(move.y,uv.y) - step(move.y+size.y,uv.y);\n    value *= step(move.x,uv.x) - step(move.x+size.x,uv.x);\n    \n    return value;\n   \n}\nvec2 rotation(vec2 pos,vec2 uv)\n{\n    uv -= pos;\n    uv *= rotate2d(iTime);\n    uv += pos;\n    return uv;\n    \n}\nfloat Circle(vec2 pos,float rad, vec2 uv){\t    \n    float value = step(distance(uv,vec2(0.4)),rad);\n    \n    if(distance(pos,uv) > rad)return 0.0;\n    else return 1.0;\n    return value;\n}\nfloat Flower(vec2 uv,vec2 shapePos, float Petals){\n    shapePos = vec2(shapePos.x,shapePos.y);\n    float dist = distance(shapePos,uv)*2.;\n    uv -= shapePos;\n    \n    float angle = atan(uv.y,uv.x);\n    float radius = cos(Petals*angle);\n    return radius;\n    \n}\nfloat rand(vec2 uv){\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tfloat T = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    //float value = step(0.48+noise(uv*20.+iTime)*0.05,uv.x) - step(0.50+noise(uv*20.+iTime)*0.05,uv.x);\n    float value;\n    vec3 color;\n    \n    //value = Circle(vec2(.5+noise(uv*5.+T)*0.15,0.3+noise(uv*5.+T)*0.15),0.15,(uv));\n   \t//color += value;\n    \n    uv.x *= ratio;\n    //value *= noise(uv*iTime);\n    \n    //color += value * red;\n    \n   \t//color += value*noise(uv);\n    \n    //float zoom = 8.;\n    //float scale = .02;\n    //float offset = noise(uv*zoom+iTime)*scale;\n    //value = step(.5+offset,uv.x) - step(0.52+offset,uv.x);\n    \n    //color += value*red;\n    \n    \n    //value = Flower(uv,vec2(0.5+noise(uv*20.+iTime)*0.05,0.5+noise(uv*20.+iTime)*0.05),8.);\n\t//color += value* red;\n    \n    //value = Circle(vec2(0.5*ratio+snoise(uv*20.+iTime)*0.15,0.6+gnoise(uv*20.+iTime)*0.15),0.05,(uv));\n   \t//color += value *red;\n    //value = Circle(vec2(0.3*ratio+snoise(uv*20.+iTime)*0.15,0.8+gnoise(uv*20.+iTime)*0.15),0.07,(uv));\n   \t//color += value;\n    //value = Circle(vec2(0.7*ratio+snoise(uv*20.+iTime)*0.15,0.8+gnoise(uv*20.+iTime)*0.15),0.07,(uv));\n   \t//color += value;\n    //value = Circle(vec2(0.6+snoise(uv*20.+iTime)*0.15,0.35+gnoise(uv*20.+iTime)*0.15),0.1,(uv));\n   \t//color += value;\n    //value = Circle(vec2(0.9+snoise(uv*20.+iTime)*0.15,0.2+gnoise(uv*20.+iTime)*0.15),0.1,(uv));\n   \t//color += value;\n    //value = Circle(vec2(1.2+snoise(uv*20.+iTime)*0.15,0.35+gnoise(uv*20.+iTime)*0.15),0.1,(uv));\n   \t//color += value;\n    \n    \n    value = Rectangle(vec2(0.05,0.3),vec2(1.0+noise(uv*2.+T)*0.1,0.3+noise(uv+T)*0.1),uv);\n   \tcolor += value*brown;\n    value = Rectangle(vec2(0.05,0.3),vec2(1.1+noise(uv*2.+T)*0.1,0.3+noise(uv+T)*0.1),uv);\n   \tcolor += value*brown;\n    value = Rectangle(vec2(0.7,0.15),vec2(0.45+noise(uv*2.+T)*0.1,0.25+noise(uv*20.+T)*0.05),uv);\n   \tcolor += value*brown;\n    \n    fragColor = vec4(color,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}