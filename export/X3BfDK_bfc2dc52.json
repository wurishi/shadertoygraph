{"ver":"0.1","info":{"id":"X3BfDK","date":"1729934574","viewed":29,"name":"Example: SDF Inf-Repetition","username":"ElliotPadfield","description":"This shader creates an infinitely repeating pattern of annular, rotating box. UV Normalisation: Scales for aspect ratio. Repetition and Rotation: Applies 360° rotation to each repeated rhombus over time. Annular Effector: Adds ring layer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference: https://iquilezles.org/articles/distfunctions/\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// Rotation function for 2D vectors\nvec2 rotate(vec2 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c) * p; // Rotates `p` by `angle`\n}\n\n// Annular effector for SDF\nfloat opOnion(float dist, float r) {\n    return abs(dist) - r; // Creates ring effect by layering isosurface\n}\n\n// Repetition with rotation\nvec2 opRepetition(vec2 p, vec2 spacing, float rotationAngle) {\n    // Apply repetition\n    p = mod(p + 0.5 * spacing, spacing) - 0.5 * spacing;\n    // Apply rotation\n    p = rotate(p, rotationAngle);\n    return p;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Step 1: Normalize UV coordinates with aspect ratio correction\n    // More information at: https://www.shadertoy.com/view/lf2fWw\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - R) / min(R.x, R.y); // Normalize to [-1, 1] along the shortest side\n    vec2 normUV = uv * 0.5 + 0.5;\n    \n    // Step 2: Apply repetition and continuous rotation for a dynamic pattern\n    float rotationAngle = iTime; // Full 360° rotation over time\n    vec2 repeatedUV = opRepetition(uv, vec2(0.3, 0.3), rotationAngle); // Repeat with 360° rotation\n\n    // Step 3: Define rhombus dimensions\n    vec2 boxSize = vec2(0.05, 0.1); // Width and height of the rhombus\n\n    // Step 4: Compute the SDF for the rhombus with repetition and rotation\n    float dist = sdBox(repeatedUV, boxSize);\n    \n    // Step 5: Make the shape annular for a more interesting pattern\n    dist = opOnion(dist, 0.01);\n\n    // Step 6: Anti-aliasing for smooth edges\n    // For more details on anti-aliasing, see: https://www.shadertoy.com/view/MfjBDw\n    float pix = 1.5 / min(R.x, R.y);  // Pixel width for consistent scaling\n    float aa = smoothstep(-pix, pix, dist);\n\n    // Step 7: Render the shape with a vibrant pink color\n    vec3 color = mix(vec3(1.0, 0.4, 0.7), vec3(0.0), aa); // Bright pink color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}