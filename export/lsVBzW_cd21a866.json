{"ver":"0.1","info":{"id":"lsVBzW","date":"1527860299","viewed":434,"name":"img2shadertoy example","username":"rkibria","description":"Generated from 1-bit BMP file using a Python script https://github.com/rkibria/img2shadertoy\nI wanted to experiment with various ways to display a bitmap image using Shadertoy code.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bitmap","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 bitmap_size = vec2(64, 64);\nconst int longs_per_line = 2;\nconst int[] palette = int[] (\n0x001d2e52,\n0x00d1dbef\n);\nconst int[] bitmap = int[] (\n0xfedfffff, 0xffffffff,\n0x0007ffff, 0xff8fe800,\n0x000fffff, 0xff8fe800,\n0x000fffff, 0xff0ff000,\n0x0007ffff, 0xff07e800,\n0x0001ffff, 0xff07e000,\n0x00007fff, 0xff07c000,\n0x00003fff, 0xff03e000,\n0x81003fff, 0xff03c000,\n0xcf8c1fff, 0xff03c102,\n0x7fcf1fff, 0xff838007,\n0xfd870fff, 0xffc33d07,\n0xfbc02fff, 0xffff30c1,\n0xc00027ff, 0xfffa5ec1,\n0x000007ff, 0xfff8ffe1,\n0x200c27ff, 0xfffc7ff9,\n0xfff017ff, 0xfffc7bf8,\n0x0e0413ff, 0xfffcfffc,\n0x007833ff, 0xfff9fff8,\n0x4f81bbff, 0xfff9fffc,\n0x00017bff, 0xffc1fffe,\n0x32407fff, 0xffdbffff,\n0xb5007bff, 0xfff7bfff,\n0xfb71fbff, 0xffe9ffff,\n0xf0b1fbff, 0xff97dfff,\n0xec38f7ff, 0xff137fff,\n0xfe73dfff, 0xff51ffff,\n0xfffd9fff, 0xff9cffff,\n0xfbff0f7f, 0xffbcffff,\n0xf9fe073f, 0xff04ffff,\n0xfcfc07bf, 0xff60ffff,\n0x7efc07bf, 0xff44ffe0,\n0x1f78000f, 0xfe74dfe4,\n0x067827bf, 0xfe7dff08,\n0x020007bf, 0xfe65fe00,\n0x407013ff, 0xfe4dff44,\n0x602063ff, 0xfe13fe04,\n0x026003ff, 0xffe06000,\n0x00e001ff, 0xffc00014,\n0xc14001ff, 0xffcdf407,\n0x105641ff, 0xffcfff00,\n0x01e003ff, 0xffcfffc0,\n0x047007ff, 0xffeffff0,\n0x707e1bff, 0xffefff7f,\n0xc0fff3ff, 0xffcfffbf,\n0x0bfff7ff, 0xffefffbf,\n0x7ffdf7ff, 0xffefffe0,\n0xffffefff, 0xffe7fff0,\n0xfffdefff, 0xffefffff,\n0xffffffff, 0xffe7ffff,\n0xffffffff, 0xfff7ffff,\n0xffffbfff, 0xfff1ffff,\n0xff9fffff, 0xfffbffff,\n0xffffffff, 0xfffcffff,\n0xffffffff, 0xfffe7fff,\n0xffffffff, 0xffff1fff,\n0xffffffff, 0xffffc7ff,\n0xffffffff, 0xfffff8ff,\n0xffffffff, 0xffffff1f,\n0xf9ffffff, 0xfffffff0,\n0x07ffffff, 0xfffffffe,\n0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff\n);\n\nint getPaletteIndexXY( in ivec2 fetch_pos )\n{\n\tint palette_index = 0;\n\tif( fetch_pos.x >= 0 && fetch_pos.y >= 0\n\t\t&& fetch_pos.x < int( bitmap_size.x ) && fetch_pos.y < int( bitmap_size.y ) )\n\t{\n\t\tint line_index = fetch_pos.y * longs_per_line;\n\n\t\tint long_index = line_index + ( fetch_pos.x >> 5 );\n\t\tint bitmap_long = bitmap[ long_index ];\n\n\t\tint bit_index = fetch_pos.x & 0x1f;\n\t\tpalette_index = ( bitmap_long >> bit_index ) & 1;\n\t}\n\treturn palette_index;\n}\n\n\nint getPaletteIndex( in vec2 uv )\n{\n\tint palette_index = 0;\n\tivec2 fetch_pos = ivec2( uv * bitmap_size );\n\tpalette_index = getPaletteIndexXY( fetch_pos );\n\treturn palette_index;\n}\n\nvec4 getColorFromPalette( in int palette_index )\n{\n\tint int_color = palette[ palette_index ];\n\treturn vec4( float( int_color & 0xff ) / 255.0,\n\t\t\t\tfloat( ( int_color >> 8 ) & 0xff) / 255.0,\n\t\t\t\tfloat( ( int_color >> 16 ) & 0xff) / 255.0,\n\t\t\t\t0 );\n}\n\nvec4 getBitmapColor( in vec2 uv )\n{\n\treturn getColorFromPalette( getPaletteIndex( uv ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.y;\n\tfragColor = getBitmapColor( uv );\n}\n\n","name":"Image","description":"","type":"image"}]}