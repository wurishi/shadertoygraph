{"ver":"0.1","info":{"id":"Nd2yzy","date":"1643719215","viewed":146,"name":"C-infinite step function","username":"athibaul","description":"A continuously differentiable smoothstep function.\nBrown: standard smoothstep, Cyan: C-infinite smoothstep.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["function","smooth","step","differentiable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A continuously differentiable step function\n\n// Whereas the standard smoothstep function is only C^1,\n// this function has all its derivatives vanishing at the transition points.\n\nfloat smootheststep_signed(float x)\n{\n    // Goes from -1 at -1 to +1 at +1,\n    // with C^infinite transitions.\n    \n    // The \"trick\" is the same as with exp(-1/x^2), \n    // except we're using tanh instead of exp to have a two-sided result.\n    \n    \n    float a = sqrt(3.);\n    // \"a\" can be any number, but anything smaller than sqrt(3) will create additional inflexion points.\n    //float a = 1.; // Looks weird\n    \n    // Larger \"a\" leads to a sharper transition.\n    // The derivative at x=0 is \"a\" (would be 1.5 for standard smoothstep)\n    \n    return abs(x)<1. ? tanh(a*x/(1.-x*x)) : sign(x);\n}\n\nfloat smootheststep(float a, float b, float x)\n{\n    // Goes from 0 at a to 1 at b\n    return 0.5*(1. + smootheststep_signed((2.*x-(a+b))/(b-a)));\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U = (2.*U-iResolution.xy)/iResolution.y;\n    U.y += 0.5;\n    vec3 col = vec3(0);\n    \n    // Draw Cartesian grid\n    col = mix(col, vec3(0.1), smoothstep(1.5*fwidth(U.x), 0., 0.1*abs(10.*U.x-round(10.*U.x))));\n    col = mix(col, vec3(0.1), smoothstep(1.5*fwidth(U.y), 0., 0.1*abs(10.*U.y-round(10.*U.y))));\n    col = mix(col, vec3(0.25), smoothstep(1.5*fwidth(U.x), 0., abs(U.x-round(U.x))));\n    col = mix(col, vec3(0.25), smoothstep(1.5*fwidth(U.y), 0., abs(U.y-round(U.y))));\n    // Draw axes\n    col = mix(col, vec3(1,0,0), smoothstep(1.5*fwidth(U.y), 0., abs(U.y)));\n    col = mix(col, vec3(0,1,0), smoothstep(1.5*fwidth(U.x), 0., abs(U.x)));\n    \n    // Draw the curves\n    float a = 1.5*sin(iTime);\n    float b = cos(0.618*iTime);\n    \n    // Compare standard smoothstep vs. C-infinite smoothstep.\n    float y = smootheststep(a,b,U.x);\n    float y2 = smoothstep(a,b,U.x);\n    \n    float d = abs(U.y-y);\n    float d2 = abs(U.y-y2);\n    float w0 = fwidth(U.x);\n    float w = w0 + fwidth(y);\n    \n    // Brown : standard smoothstep function\n    col = mix(col, vec3(0.5,0.3,0), smoothstep(2.*w, 0., d2)*step(-w0,U.y)*step(U.y,1.+w0));\n    // Cyan : C-infinite step function\n    col = mix(col, vec3(0,1,1), smoothstep(2.*w, 0., d)*step(-w0,U.y)*step(U.y,1.+w0));\n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}