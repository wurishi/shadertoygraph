{"ver":"0.1","info":{"id":"3tVXz3","date":"1583323817","viewed":334,"name":"Google Loading Spinner","username":"stevekrouse","description":"Imitates the Google/Andriod loading spinner: \n\nhttps://thomas.vanhoutte.be/miniblog/wp-content/uploads/spinningwheel.gif","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["spinner","icon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float _angle){\n    // https://thebookofshaders.com/08/\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat angle(vec2 pos) {\n    // a goes from PI to -PI\n    float a = atan(pos.y, pos.x);\n    \n    // divide by PI and it goes from 1 to -1\n    // add 1 and it goes from 0 to 2\n    // divide 2 and it goes 0 to 1\n    a = (1.+a/3.14159)/2.;\n    \n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord - iResolution.xy/2.)/iResolution.x;\n    float antialias = 1.5 / iResolution.x;\n    \n    // circle outline\n    float radius = 0.14;\n    float width = 0.008;\n    float l = length(pos);\n    fragColor = 1.-vec4((smoothstep(width, width+antialias, abs(l-radius))));\n   \n    float t0 = (iTime*1.8)/3.;\n    float t = fract(t0)*1.1; \n    float cycle = floor(t0);\n    \n    // clip the circle by specifying two angles, a1, a2\n    float a1;\n    float a2;\n    if (t<=0.6) {\n      a1 = max(pow(1.-t-.04,3.), 0.1);\n      a2 = 1.;\n    } else {\n      a1 = 0.1;\n      a2 = max(pow(1.7-t, 3.), 0.2); \n    }   \n    \n    float a = angle(rotate2d(-4.*iTime + 1.26*cycle) *  pos); // from 0 to 1\n    \n    fragColor *= vec4(max(smoothstep(a,a+antialias, a1), smoothstep(a2,a2+antialias, a))); // a >= a1 || a <= a2\n    \n    fragColor = 1. - (fragColor * (1.-vec4(.1, 0.6, 1., 0.)));\n}","name":"Image","description":"","type":"image"}]}