{"ver":"0.1","info":{"id":"MlycWw","date":"1536502798","viewed":207,"name":"Spherify","username":"Nomad1","description":"Simple spherification shader. Maps your texture to virtual sphere","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["simple","sphere","effect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define USE_TEXTURE\n\nconst float AnimationSpeed = 0.005;\nconst float CellSize = 32.0;\nconst vec3 BaseColor = vec3(0.05);\nconst float BaseOpacity = 0.05;\n\nfloat hex(vec2 p)\n{\n    p.x *= 0.57735*2.0;\n    p.y += mod(floor(p.x), 2.0)*0.5;\n    p = abs((mod(p, 1.0) - 0.5));\n    return abs(max(p.x*1.5 + p.y, p.y*2.0) - 1.0);\n}\n\n// Taken from https://github.com/glslify/glsl-aastep\nfloat aastep(float threshold, float value)\n{\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /**** Shadertoy part ****/\n   \n    vec2 uv = fragCoord.xy / iResolution.y;\n    float s_time = iTime * 10.0;\n    #define s_texture_0 iChannel0\n    \n    #if !defined(USE_TEXTURE)\n    vec4 Color = vec4(0.1, 0.2, 0.4, 0.5);\n    #else\n    vec4 Color = vec4(1.0);\n    #endif\n\n    \n    /**** Universal GLSL shader part ****/\n    uv -= 0.5;\n    uv *= 2.0;\n    \n    float r = length(uv);\n    uv *= asin(r)/(r * sqrt(2.0));\n\n    // renormalize uv\n#if !defined(USE_TEXTURE)\n    uv /= 2.0;\n    uv += 0.5;\n#endif\n\n    // animation\n    uv.x += s_time * AnimationSpeed;\n    \n    \n#ifdef USE_TEXTURE\n    uv.x *= 0.5;\n    \n    float alpha = (1.0 - pow(r, 512.0)); // remove sphere border\n\n    vec3 texColor = texture(s_texture_0, fract(uv)).rgb * (1.0 - r * r) * Color.rgb;\n#else\n    vec3 sphereColor = Color.rgb;\n    vec2 p = uv * CellSize; // average cell size\n    float hexDist = hex(p) + 0.4;\n    \n    vec3 texColor = mix(sphereColor.rgb + BaseColor, sphereColor.rgb, aastep(0.5, hexDist));\n\n    float alpha = (1.0 - pow(r, 128.0)) * pow(r, 16.0) + r * 0.1 + BaseOpacity;\n    \n#endif\n\n    alpha *= Color.a;\n  \n    /**** End of external part ****/\n    \n\tfragColor = vec4(texColor, alpha);\n}","name":"Image","description":"","type":"image"}]}