{"ver":"0.1","info":{"id":"wlyfz3","date":"1614822832","viewed":93,"name":"perlin testâš™","username":"HaleyHalcyon","description":"a","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash(uint x) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n// fade function defined by ken perlin\nvec2 fade(vec2 t) {\n  return t * t * t * (t * (t * 6. - 15.) + 10.);\n}\n// corner vector\nvec2 cvec(vec2 uv, float time) {\n  uint x = uint(mod(uv.x, 256.));\n  uint y = uint(mod(uv.y, 256.));\n  float n = 0.01 * float(hash(x + hash(y))) + time;\n  return vec2(cos(n), sin(n));\n}\n// perlin generator\nfloat perlin(vec2 uv, float offset) {\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n\n  vec2 u = fade(f);\n\n  return\n  mix(\n    mix(\n      dot( cvec(i + vec2(0.0,0.0), offset ), f - vec2(0.0,0.0) ),\n      dot( cvec(i + vec2(1.0,0.0), offset ), f - vec2(1.0,0.0) ),\n    u.x),\n    mix(\n      dot( cvec(i + vec2(0.0,1.0), offset ), f - vec2(0.0,1.0) ),\n      dot( cvec(i + vec2(1.0,1.0), offset ), f - vec2(1.0,1.0) ),\n    u.x),\n  u.y);\n}\n// stripes of color\nconst vec3[] colors = vec3[](\n  vec3(245./255.,  23./255.,  22./255.),\n  vec3(248./255., 210./255.,  26./255.),\n  vec3( 47./255., 243./255., 224./255.),\n  vec3( 96./255., 192./255.,  83./255.),\n  vec3(250./255.,  38./255., 160./255.),\n  vec3(174./255., 129./255., 255./255.)\n);\nvec3 stripes(float n) {\n  return mix(\n    colors[uint(n + 6.0) % 6u],\n    colors[uint(n + 7.0) % 6u],\n    smoothstep(0.9, 1.0, fract(n))\n  );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n  float scale = min(iResolution.x, iResolution.y);\n  vec2 uv = (gl_FragCoord.xy - 0.50 * iResolution.xy) / scale;\n\n  float value = length(uv) * 5.0;\n  value += 2.0  * perlin(uv *  1.2, iTime / 16.);\n  value += 0.2  * perlin(uv *  8.0, iTime /  8.);\n  // Output to screen\n  fragColor = vec4(\n    stripes(\n      value * 1.5 + (6.0 * fract(iTime / 12.))\n    ), 1.0\n  );\n}","name":"Image","description":"","type":"image"}]}