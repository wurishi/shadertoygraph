{"ver":"0.1","info":{"id":"Xfffzf","date":"1724119705","viewed":20,"name":"Overlaid Circles 1","username":"trismegistus_shandy","description":"Overlay circles at several scales, the exact scales varying over time.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932;\nconst float imgScale =  3.0;\nconst float wobblescale= pi/2.0; \n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Return numbers that vary in a sine curve between  0 and 1\nfloat positive_sine( float f )\n{\n    return abs(sin(f));\n}\n\n\n// Return numbers that vary from 0 to 1 and back down to 0 over an interval of \n// wobblescale seconds\nfloat timewobble()\n{\n    float t = iTime/wobblescale;\n    return positive_sine( t );\n}\n\nvec2 hmirror( in vec2 coord) {\n    vec2 mirrored;\n    if ( coord.x < 0.0 ) {\n        mirrored = vec2(((coord.x + 1.0) / 2.0), coord.y);\n    } else {\n        mirrored = vec2((( 1.0 -coord.x) / 2.0), coord.y);\n    }\n    return mirrored;\n}\n\nvec2 vmirror( in vec2 coord) {\n    vec2 mirrored;\n    if ( coord.y < 0.0 ) {\n        mirrored = vec2(coord.x, ((coord.y + 1.0) / 2.0) );\n    } else {\n        mirrored = vec2(coord.x, (( 1.0 - coord.y) / 2.0) );\n    }\n    return mirrored;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0, 0.0, 0.0 );\n    //uv = fract(uv*1.5) - 0.5;\n    uv = fract(uv * 2.0) - 0.5;\n    vec2 uv2 = fract(uv0 * 3.5) - 0.5;\n    for ( float f = 0.0; f < 3.0; f += 1.0 ) {\n\n        //uv = vmirror(hmirror(uv));\n        float d0 = length(uv0);\n        float d = length( uv );\n        float d2 = length( uv2 );\n        vec3 color = palette( d *  (timewobble() + 1.0) * 7.0 );\n        vec3 color2 = palette( positive_sine( d0 * (timewobble() + 1.0)*5.0) );\n        vec3 color3 = palette( d2 * (timewobble()+1.0)*3.0 );\n        //d = abs(sin( d0 * timewobble() ) );\n        //d = 0.2/d;\n        //float d = length(uv0);\n        finalColor += color * color2 * color3;\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}