{"ver":"0.1","info":{"id":"ltcBRj","date":"1540222832","viewed":980,"name":"push hole in parameterization","username":"FabriceNeyret2","description":"Insert hole in parameterization.\nmouse.y tunes hole radius\nMouse.x tunes post-hole distance back to normal\n\nsee also [url]https://www.desmos.com/calculator/oni6dfmjvy[/url]","likes":18,"published":3,"flags":0,"usePreview":0,"tags":["blackhole","short","parameterization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define S(x) clamp(1.2-abs(fract(x)-.5)/fwidth(x) , 0., 1. )\n#define S(x) smoothstep(1.5, 0., abs(fract(x)-.5)/fwidth(x) )\n//#define S(x) smoothstep(1.5, 0., abs(fract(x)-.5)/length(vec2(dFdx(x),dFdy(x))) )\n\nfloat D = .5,     // push distance\n      n = 3.;     // slope after push: \"back to normal\" invdistance\n      \nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, M = iMouse.xy;\n    U = ( U+U - R ) / R.y;\n    \n    if (M!=vec2(0)) M /= R, D = M.y, n = 1./(.01+M.x); // mouse control\n    \n                  // --- pull original parameterization falling in this pixel\n    float l = length(U), c;\n    U /= l;\n    // d' = f(d)        f(x) = (x^n+D^n)^(1/n)  \n    // d = f^-1(d')  f^-1(x) = (x^n-D^n)^(1/n)\n    l *= c = pow( 1.-pow(D/l,n), 1./n );   // c = concentration\n    U *= l; \n\n                  // --- apply\n    O = texture(iChannel0, .5+.5*U*R.y/R); O *= O; // distort image\n    U *= 16.;     // draw parameterization\n    O *= 1. - ( S(U.x) + S(U.y) );\n    O = mix(vec4(0,1,0,0),O,c); // green: concentration\n    O = sqrt(O);  // to sRGB\n}","name":"Image","description":"","type":"image"}]}