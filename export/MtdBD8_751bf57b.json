{"ver":"0.1","info":{"id":"MtdBD8","date":"1539514058","viewed":1439,"name":"Alien Structures","username":"ChrisWebb","description":"A small collection of fractal scenes. Enjoy!","likes":50,"published":1,"flags":0,"usePreview":1,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 1 // Plop this on 2/3 for a nicer, slower image\n#define MAX_STEPS 512\n#define PRECISION 0.0005\n#define ITERATIONS 20\n\nstruct kf\n{\n    float time;\n    vec3 pos;\n    vec3 dir;\n    float rotation;\n    float yOffset;\n    float scale;\n    vec3 offset;\n    float fov;\n    float fade;\n    vec3 g0Pos;\n    float g0Size;\n    float g0Strength;\n    vec3 g0c0;\n    vec3 g0c1;\n    float g1Strength;\n    vec3 g1c0;\n    vec3 g1c1;\n};\n    \n//#define OVERRIDE_FRAME 14\n//#define TIME_SKIP 150.0\n\nkf frames[] = kf[] \n(          \n    kf(0.0, vec3(1.5,-2.25, 3.5), vec3(0.0,0.0,-1.0), 0.0, 0.735, 1.75, vec3(2.8,0.5,0.025), 1.0, 3.0, \n       vec3(0.0,0.0, 1.0), 2.0,\n       1.0, vec3(0.2, 0.7, 0.5), vec3(0.2, 0.5, 0.5), \n       5.0, vec3(0.0, 0.5, 0.5), vec3(0.2, 0.9, 0.0)),\n    \n    kf(30.0, vec3(1.65,-1.5, 4.0), vec3(0.0,5.0,0.0), 0.05, 0.735, 1.75, vec3(2.8,0.5,0.025), 0.5, 0.5, \n       vec3(0.0,0.0, 1.0), 2.0,\n       0.5, vec3(0.7, 0.7, 0.0), vec3(0.0, 0.5, 0.7), \n       5.0, vec3(0.0, 0.5, 0.5), vec3(0.2, 0.9, 0.0)),\n        \n\t//----------\n    \n    kf(30.0, vec3(0.0,0.0, 5.035), vec3(0.0,0.0,1.0), 0.0, 0.74, 1.8, vec3(2.8,0.5,0.0), 0.35, 0.5, \n       vec3(0.0,0.0, 5.04), 0.03, \n       2.0, vec3(1.0, 0.3, 0.1), vec3(0.9, 0.25, 0.1), \n       1.5, vec3(0.5, 0.2, 0.0), vec3(0.5, 0.95, 0.0)),\n    \n    kf(60.0, vec3(0.0,0.0, 4.975), vec3(1.0,1.0,0.0), 0.0, 0.74, 1.8, vec3(2.8,0.5,0.0), 1.0, 0.5, \n       vec3(0.0,0.0, 5.04), 0.01, \n       1.0, vec3(1.0, 0.5, 0.0), vec3(0.9, 0.05, 0.0), \n       1.0, vec3(0.5, 0.1, 0.0), vec3(0.5, 0.7, 0.0)),\n\n    //----------\n    \n    kf(60.0, vec3(-1.10,0.0, 3.5), vec3(-1.0, 0.0,-1.0), 0.0, 0.74, 1.8, vec3(2.1,2.1,0.4), 3.0, 0.5, \n       vec3(0.0,0.0, 5.04), 0.1, \n       2.0, vec3(0.5, 0.4, 0.9), vec3(0.2, 0.5, 0.7), \n       2.0, vec3(0.73, 0.5, 0.1), vec3(0.5, 0.95, 0.3)),\n    \n    kf(80.0, vec3(0.0,0.0, 4.8), vec3(0.0,0.0,-1.0), 0.0, 0.74, 1.8, vec3(2.1,2.1,0.4), 1.0, 0.5, \n       vec3(0.0,0.0, 5.04), 0.1, \n       1.0, vec3(0.5, 0.4, 0.9), vec3(0.2, 0.5, 0.7), \n       10.0, vec3(0.73, 0.5, 0.1), vec3(0.5, 0.95, 0.3)),\n    \n    //----------   \n\n    kf(80.0, vec3(2.5, 2.5, 0.0), vec3(0.0,0.0,1.0), 1.0, 0.74, 1.8, vec3(1.59,0.2,0.065), 1.0, 0.5, \n       vec3(0.0,0.0, 5.5), 0.1, \n       1.0, vec3(0.4, 0.78, 0.91), vec3(0.6, 0.3, 0.75), \n       4.0, vec3(0.4, 0.78, 0.91), vec3(0.6, 0.3, 0.75)),\n\n    kf(100.0, vec3(1.5, 1.5, 0.1), vec3(-0.4,-0.3,1.0), 0.0, 0.74, 1.8, vec3(1.59,0.2,0.065), 1.0, 0.5, \n       vec3(0.0,0.0, 5.45), 0.5, \n       1.0, vec3(0.4, 0.78, 0.91), vec3(0.6, 0.3, 0.75), \n       4.0, vec3(0.4, 0.78, 0.91), vec3(0.6, 0.3, 0.75)),\n    \n    //----------   \n\n    kf(100.0, vec3(0.0,0.1, 2.25), vec3(1.0,0.0,0.7), 0.0, 0.75, 1.8, vec3(2.59,0.5,0.05), 1.0, 0.5, \n       vec3(0.0,0.1, 2.25), 1.0, \n       0.5, vec3(0.7, 0.2, 0.2), vec3(0.3, 0.3, 0.9), \n       3.0, vec3(0.7, 0.2, 0.2), vec3(0.3, 0.3, 0.9)),\n\n    kf(120.0, vec3(0.0,1.5, 2.35), vec3(1.0,-0.5,0.7), 0.0, 0.75, 1.8, vec3(2.59,0.5,0.05), 0.85, 0.5, \n       vec3(0.0,0.1, 2.25), 01.5, \n       0.5, vec3(0.2, 0.2, 0.5), vec3(0.3, 0.3, 0.9), \n       3.0, vec3(0.5, 0.2, 0.2), vec3(0.3, 0.3, 0.9)),\n\n    //----------   \n\n    kf(120.0, vec3(0.0,0.0, 4.0), vec3(1.0,0.0,0.0), 1.0, 1.25, 2.5, vec3(2.028,1.0,0.48), 1.0, 0.5, \n       vec3(0.0,0.0, 5.04), 0.3, \n       1.0, vec3(0.5, 0.4, 0.9), vec3(0.2, 0.5, 0.7), \n       5.0, vec3(0.73, 0.5, 0.1), vec3(0.5, 0.95, 0.3)),\n\n    kf(150.0, vec3(0.0,1.0, 2.0), vec3(1.0,0.0,1.0), 0.0, 1.4, 3.25, vec3(4.0,0.5,0.8), 1.0, 1.0, \n       vec3(0.0,0.0, 5.04), 0.3, \n       1.0, vec3(0.5, 0.4, 0.9), vec3(0.2, 0.5, 0.7), \n       5.0, vec3(0.73, 0.5, 0.1), vec3(0.5, 0.95, 0.3)),\n    \n    //----------   \n\n    kf(150.0, vec3(3.0, 3.0, 0.5), vec3(-1.0,-1.0,-1.0), 0.0, 0.64, 1.8, vec3(1.659,0.02,0.0765), 1.0, 0.5, \n       vec3(0.0,0.0, 5.04), 0.1, \n       1.0, vec3(0.5, 0.4, 0.9), vec3(0.2, 0.5, 0.6), \n       2.0, vec3(0.3, 0.5, 0.5), vec3(0.9, 0.2, 0.0)),\n\n    kf(180.0, vec3(2.5, 2.5, 1.0), vec3(-1.0,-1.0,1.0), 0.0, 0.64, 1.8, vec3(1.659,0.02,0.0765), 1.0, 0.5, \n       vec3(0.0,0.0, 0.0), 5.0,\n       0.5, vec3(0.9, 0.2, 0.0), vec3(0.3, 0.5, 0.5), \n       3.0, vec3(0.3, 0.4, 0.5), vec3(0.9, 0.2, 0.0)),\n    \n    //----------   \n\n    kf(180.0, vec3(2.0, 2.0, 1.0), vec3(1.0,1.0,1.0), 0.0, 0.64, 1.8, vec3(1.45,0.01,0.17), 1.0, 0.5, \n       vec3(2.0, 2.0, 1.0), 0.0, \n       0.3, vec3(1.0, 0.0, 0.0), vec3(0.2, 0.2, 0.2), \n       3.5, vec3(0.4, 0.4, 0.9), vec3(0.9, 0.3, 0.3)),\n\n    kf(210.0, vec3(1.75, 1.75, 0.99), vec3(1.0,-1.0,1.0), 1.0, 0.64, 1.8, vec3(1.45,0.01,0.17), 1.0, 0.5, \n       vec3(2.0, 2.0, 1.0), 0.0, \n       0.3, vec3(1.0, 1.0, 1.0), vec3(0.2, 0.2, 0.2), \n       3.5, vec3(0.3, 0.4, 1.0), vec3(1.0, 0.4, 0.3))\n);\n\nkf interpFrames(kf a, kf b, float t)\n{\n  \tkf f;\n    f.time = t;\n    f.pos = mix(a.pos, b.pos, t);\n    f.dir = mix(a.dir, b.dir, t);\n    f.rotation = mix(a.rotation, b.rotation, t);\n    f.yOffset = mix(a.yOffset, b.yOffset, t);\n    f.scale = mix(a.scale, b.scale, t);\n    f.offset = mix(a.offset, b.offset, t);\n    f.fov = mix(a.fov, b.fov, t);\n    float totalTime = b.time-a.time;\n    f.fade = clamp(0.0, 1.0, min(t * (totalTime/a.fade), (1.0-t) * (totalTime/b.fade)));    \n    f.g0Pos = mix(a.g0Pos, b.g0Pos, t);\n    f.g0Size = mix(a.g0Size, b.g0Size, t);\n    f.g0Strength = mix(a.g0Strength, b.g0Strength, t);\n    f.g0c0 = mix(a.g0c0, b.g0c0, t);\n\tf.g0c1 = mix(a.g0c1, b.g0c1, t);    \n    f.g1Strength = mix(a.g1Strength, b.g1Strength, t);\n    f.g1c0 = mix(a.g1c0, b.g1c0, t);\n\tf.g1c1 = mix(a.g1c1, b.g1c1, t);\n    return f;  \n}\n\nkf evaluateFrame()\n{\n    #ifdef OVERRIDE_FRAME\n   \treturn frames[OVERRIDE_FRAME];\n    #endif\n    float t = 0.0;\n    float timeLoop = mod(iTime, frames[frames.length()-1].time);\n    \n    #ifdef TIME_SKIP\n    timeLoop = mod(iTime + TIME_SKIP, frames[frames.length()-1].time);\n    #endif\n    \n    int i = 0;\n    for(; i < frames.length()-1; ++i)\n    {\n        if(timeLoop < frames[i+1].time)\n        {\n            float tTime = frames[i+1].time - frames[i].time;\n            float tUp = timeLoop - frames[i].time;\n            t = tUp / tTime;\n            break;\n        }\n    }\n    \n    return interpFrames(frames[i], frames[i+1], t);\n}\n\nfloat map(vec3 p, kf f)\n{\n    p /= 2.0;\n    float ov = 1.0 / 3.0;\n\tfloat r;\n\tint i = 0;\n\twhile (i < ITERATIONS && dot(p, p) < 10000.0)\n\t{\n\t\tp.xy = abs(p.xy);\n\t\tif(p.y > p.x) p.xy = p.yx;\n\t\tp.y = f.yOffset - abs(p.y - f.yOffset);\n\t\tp.x += ov;\n\t\tif(p.z > p.x) p.xz = p.zx;\n\t\tp.x -= ov;\n\t\tp.x -= ov;\n\t\tif(p.z > p.x) p.xz = p.zx;\n\t\tp.x += ov;\n\t\tp = f.scale * (p - f.offset) + f.offset;\n\t\tr = dot(p, p);\n\t\t++i;\n\t}\n\n\treturn abs(length(p) - length(f.offset)) * pow(f.scale, float(-i));\n}\n\nvec3 render(in vec3 ro, in vec3 rd, in vec2 uv, kf frame)\n{ \n    const float breakout = 20.0;\n    \n    int iteration = 0;\n    float depth = 0.0;\n    \n    for(; iteration < MAX_STEPS; ++iteration)\n    {\n\t    float precis = PRECISION * depth;\n\t    float dist = map(ro + rd * depth, frame);\n        \n        if(dist < precis || depth > breakout) \n        {\n            break;\n        }\n        depth += dist;\n    }\n    \n    vec3 pos = ro + depth * rd;\n    \n    float glow0 = float(iteration) / float(MAX_STEPS);\n    glow0 = clamp(pow(glow0 * 3.0, 1.0), 0.0, 1.0);\n    float glow1 = pow(glow0, 3.20);\n    \n    float distFromPoint = clamp(0.0, 1.0, distance(pos, frame.g0Pos) / frame.g0Size);\n\t\n    vec3 glowColor0 = mix(frame.g0c0, frame.g0c1, clamp(distFromPoint, 0.0, 1.0));\n    vec3 col = glowColor0 * glow0 * frame.g0Strength;\n    \n    vec3 glowColor1 = mix(frame.g1c0, frame.g1c1, clamp(0.0, 1.0, uv.y/2.0));\n\tcol.rgb += glowColor1 * glow1 * frame.g1Strength;\n    \n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tkf frame = evaluateFrame();\n    \n    vec3 cSum = vec3(0.0, 0.0, 0.0);\n    \n    for(int i = 0; i < AA; ++i)\n    {\n        for(int j = 0; j < AA; ++j)\n        {\n            vec2 o = vec2(float(i),float(j)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord+o)) / iResolution.y;\n            vec3 ro = frame.pos;\n            float cr = frame.rotation;\n            vec3 cw = normalize(frame.dir);\n            vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n            vec3 cu = normalize(cross(cw ,cp));\n            vec3 cv = normalize(cross(cu, cw));\n            mat3 ca = mat3(cu, cv, cw);\n            vec3 rd = ca * normalize(vec3(p.xy, 2.0 * frame.fov));\n\n            cSum += render(ro, rd, p, frame);\n        }\n    }\n    \n    cSum /= float(AA*AA);\n    \n    #ifndef OVERRIDE_FRAME\n    cSum.rgb *= frame.fade;\n    #endif\n\n    cSum = pow(cSum, vec3(0.4545));\n    cSum = cSum * 1.2 - 0.1;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv *=  1.0 - uv.yx;\n    \n    cSum *= clamp(0.0, 1.0, pow(uv.x*uv.y * 5.0, 0.1));\n    \n    float n = texture(iChannel0, fragCoord.xy/iChannelResolution[0].xy).r;\n    cSum.rgb += mix(-3.0 / 255.0, 3.0 / 255.0, n);\n\n    fragColor = vec4(cSum, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}