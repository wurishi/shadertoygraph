{"ver":"0.1","info":{"id":"4ldyR2","date":"1533306029","viewed":201,"name":"2D Accelerator Cavity","username":"nalivai","description":"Typical particle accelerators use similar structures to accelerate charged particle beams.\nIn this simulation I solve acoustic wave equation for soft/absorbing boundaries.\nLeft part of the pipe contains smooth wave absorber. Right part contains wave port.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["waves","modes","cavity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    /*vec4 center = texture(iChannel1,uv);\n    vec4 up = texture(iChannel1,uv+vec2(0.0,1.0)/iResolution.xy);\n    vec4 down = texture(iChannel1,uv-vec2(0.0,1.0)/iResolution.xy);\n    vec4 left = texture(iChannel1,uv-vec2(1.0,0.0)/iResolution.xy);\n    vec4 right = texture(iChannel1,uv+vec2(1.0,0.0)/iResolution.xy);\n    vec4 dfdx2 = left + right - 2.0*center;\n    vec4 dfdy2 = up + down - 2.0*center;*/\n    fragColor = texture(iChannel0,uv);\n    fragColor.rgb = normalize(fragColor.rgb);\n    if(fragColor.rgb != vec3(0.0,0.0,0.0))\n    {\n    //fragColor.g =0.0;\n    vec4 bg = vec4(vec3(0.5-abs(uv.y-0.5)*0.5)*1.0,1.0);\n    //fragColor.g = 0.1*fragColor.g;\n        if(fragColor.r<0.0)\n        {\n            fragColor.b = -fragColor.r;\n        \tfragColor.r = 0.0;\n        }\n    fragColor.r = fragColor.r;\n    fragColor.rgb = (fragColor.rgb+bg.rgb)/2.0;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define WIDTH 0.9\n#define HEIGHT 0.1\n#define FACTOR 0.90\n#define AFACTOR FACTOR*FACTOR\n#define ADAMPING 0.95\n#define PFACTOR FACTOR*FACTOR\n#define CFACTOR 0.94\n#define DT (1.0/60.0)\n#define PI 3.1415926\n#define CELLS 6.0\n#define FREQUENCY 2.45*2.22075\n#define RX 0.18\n#define RY 0.61\n\n/*\nTypical particle accelerators use similar structures to accelerate charged particle beams.\nIn this simulation I solve acoustic wave equation for soft/absorbing boundaries.\nLeft part of the pipe contains smooth wave absorber. Right part contains wave port.\n\nAlthough the structure is \n\nPlaying e.g. with FREQUENCY, CELLS, RX, RY one can excite different modes\n*/\n\n\nfloat c1(vec2 uv, vec2 c)\n{\nreturn length(uv-c);\n}\n\nbool cavity(vec2 uv)\n{\nvec2 coords = uv.xy-vec2(0.5,0.5);\nfloat phase = PI*CELLS/2.0;\nfloat y = HEIGHT*0.2+(RY-HEIGHT*0.2)*(abs(sin(phase+2.0*PI*(uv.x-0.5)/RX)))/2.0;\nreturn abs(uv.y-0.5)<y && abs(uv.x-0.5)<RX*CELLS/4.0;\n/*vec2 rr = vec2(0.15,0.61)*CFACTOR/2.0;\nreturn c1(uv.xy/rr,vec2(0.5,0.5)/rr)<1.0;*/\n}\n\nbool tube(vec2 uv)\n{\nreturn abs(uv.y-0.5)<HEIGHT/2.0 && abs(uv.x-0.5)<WIDTH/2.0;\n}\n    \nbool port(vec2 uv)\n{\nreturn uv.x-0.5>WIDTH*PFACTOR/2.0;\n}\n\nbool absorber(vec2 uv)\n{\nreturn -uv.x+0.5>WIDTH*AFACTOR/2.0;\n}\n\nvec4 TEX(vec2 uv)\n{\n    vec4 result = vec4(0.0,0.0,0.0,1.0);\nbool free = true;\n    /*\n\tTUBE AND CAVITY\n    */\n    //tube\n    free = free && tube(uv);\n    // cavity\n    free = free || cavity(uv);\n\tif(free)\n    {\n    result = vec4(0.0,1.0,0.0,1.0);\n    }\n\telse\n    {\n    // Output to screen\n    result = vec4(vec3(0.0),1.0);\n    }\n    /*\n\tPORT\n\t*/\n    bool port = port(uv) && free;\n    if(port)\n    {\n    result +=vec4(0.75,0.0,0.0,0.0)*(0.5-0.5*cos(FREQUENCY*DT*float(iFrame)))*sqrt(uv.x-0.5-WIDTH*PFACTOR/2.0);\n    }\n    /*\n\tABSORBER\n\t*/\n    bool absorber = absorber(uv) && free;\n    if(absorber)\n    {\n    result += vec4(0.0,0.0,1.0,0.0);\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 center = texture(iChannel1,uv);\n    vec4 up = texture(iChannel1,uv+vec2(0.0,1.0)/iResolution.xy);\n    vec4 down = texture(iChannel1,uv-vec2(0.0,1.0)/iResolution.xy);\n    vec4 left = texture(iChannel1,uv-vec2(1.0,0.0)/iResolution.xy);\n    vec4 right = texture(iChannel1,uv+vec2(1.0,0.0)/iResolution.xy);\n    if(right.g==0.0)\n    {\n    //left.r +=right.r;\n    right.r = 0.0;\n    }\n    if(left.g==0.0)\n    {\n    //right.r +=left.r;\n    left.r = 0.0;\n    }\n    if(up.g==0.0)\n    {\n    //down.r +=up.r;\n    up.r = 0.0;\n    }\n    if(down.g==0.0)\n    {\n    //up.r +=down.r;\n    down.r = 0.0;\n    }\n    \n    vec4 dfdx2 = left + right - 2.0*center;\n    vec4 dfdy2 = up + down - 2.0*center;\n    vec4 dfdx = 0.5*(right - left);\n    vec4 dfdy = 0.5*(up - down);\n    vec4 D = vec4(1.0,0.0,0.0,0.0)*0.5;\n    vec4 S = vec4(1.0,0.0,0.0,0.0)*0.1;\n    if(iFrame<4)\n    {\n        fragColor = TEX(uv);\n    }\n    else\n    {\n\tfragColor = S*TEX(uv) + (2.0*center - texture(iChannel0,uv) + D*(dfdy2+dfdx2));\n    }\n    if(fragColor.g==0.0)\n    {\n    fragColor.rgb = vec3(0.0);\n    }\n    if(fragColor.b !=0.0)\n    {\n        fragColor.r *=ADAMPING;\n    }\n    /*CALCULATIONS*/\n   \n}","name":"Buffer C","description":"","type":"buffer"}]}