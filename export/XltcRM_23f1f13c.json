{"ver":"0.1","info":{"id":"XltcRM","date":"1532029122","viewed":413,"name":"line drawing as it used to be ","username":"JohanFlod","description":"I was watching a Youtube video with Martijn \"The Art of Code\" Steinrucken and I got inspired to do something with the Line and DistLine functions that he used.    ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["intro","amiga","c64","demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define S(a,b,t) smoothstep(a,b,t)\n#define TWO_PI 6.28318530718\n#define MAX_LINES 64\n\nfloat DistLine(vec2 p, vec2 a, vec2 b){\n\tvec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba),0., 1.);\n    return length(pa-ba*t);\n}\n\n\nfloat Line(vec2 p, vec2 a, vec2 b){\n\tfloat d = DistLine(p,a,b);\n    float m = 0.5*S(.04,.02,d);\n    \n    return m;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n   \t//float d = DistLine(uv, vec2(0), vec2(1));\n    float m = 0.;\n    \n    uv *=5.;\n    \n    for(int i = 0;i<MAX_LINES;i++)\n    {\n        float j = float(i);\n        float max_lines = float(MAX_LINES);\n        // inner points\n        float x = 2.1*sin(iTime*.5)*sin((j*TWO_PI)/max_lines+iTime);\n  \t\tfloat y = 2.2*cos(iTime)*cos((j*TWO_PI)/max_lines+iTime);\n        // outer points\n        float x2 = 1.0*sin(iTime)*sin((j*TWO_PI)/max_lines+iTime*2.);\n  \t\tfloat y2 =1.3*cos((j*TWO_PI)/max_lines+iTime+.5);\n    \tm+=Line(uv,vec2(x,y),vec2(x2,y2));\n    }\n    vec3 col = vec3(m);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}