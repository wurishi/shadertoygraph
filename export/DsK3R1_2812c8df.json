{"ver":"0.1","info":{"id":"DsK3R1","date":"1678195386","viewed":79,"name":"Wavelet Transform [contrast]","username":"Fuergu","description":"You can move your mouse. Right-left controls processed vision and non proceesed vision. Up-down controls gamma correction. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","imageprocessing","wavelettransform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*******************************************************************\n\nYou can move your mouse!\n\nRIGHT-LEFT controls processed vision and non proceesed vision. \nUP-DOWN controls gamma correction. \n\nYou can also replace iChannel0 with other texture\nALSO INTERESTING!\n\n/********************************************************************/\n//set mode 1 : see how contrast effect the output\n#define mode 0\n/********************************************************************/\nfloat remap(float value, float inputMin, float inputMax, float outputMin, float outputMax)\n{\n    return (value - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\n}\n// 小波变换核函数\nmat4 dwtKernel = mat4(\n    -0.12940952255092145, 0.2241438680420134, 0.8365163037378079, 0.4829629131445341,\n     0.6104932389370258, -0.8019377358048387, 0.2241438680420134, 0.4829629131445341,\n    -0.4497182516401992, -0.15061244404523526, 0.4829629131445341, -0.8019377358048387,\n     0.0, 0.0, 0.0, 1.0\n);\n\n// 2D离散小波变换\nvec4 dwt2D(vec4 pixel00, vec4 pixel01, vec4 pixel10, vec4 pixel11) {\n    vec4 highpass = dwtKernel * vec4(pixel00.rgb + pixel01.rgb + pixel10.rgb + pixel11.rgb, 1.0);\n    vec4 lowpass = dwtKernel * vec4(pixel00.rgb - pixel01.rgb - pixel10.rgb + pixel11.rgb, 1.0);\n    return vec4(lowpass.rgb, highpass.r);\n}\n\n// 2D小波变换逆核函数\nmat4 idwtKernel = mat4(\n     0.4829629131445341, -0.8019377358048387, 0.2241438680420134, 0.4829629131445341,\n     0.8365163037378079, 0.4829629131445341, 0.2241438680420134, -0.12940952255092145,\n     0.4829629131445341, 0.2241438680420134, -0.8019377358048387, 0.6104932389370258,\n     0.0, 0.0, 0.0, 1.0\n);\n\n// 2D离散小波变换逆变换\nvec4 idwt2D(vec4 lowHigh00, vec4 lowHigh01, vec4 lowHigh10, vec4 lowHigh11) {\n    vec4 lowpass = idwtKernel * vec4(lowHigh00.rgb, lowHigh11.r);\n    vec4 highpass = idwtKernel * vec4(lowHigh00.a, lowHigh01.rgb + lowHigh10.rgb + lowHigh11.rgb);\n    return vec4(lowpass.rgb + highpass.rgb, lowpass.a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p=(2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    \n    float an=iMouse.x;\n    vec2 Mouse=iMouse.xy/iResolution.xy;\n    // fix texcoord\n    vec2 texCoord = fragCoord.xy / iResolution.xy;\n    vec2 uv = texCoord;\n    \n    //contrast\n    vec4 srcColor = texture(iChannel0, uv);\n    float normalizedContrast = sin(iTime+10.) * 0.5 + 0.5;\n    float contrast = remap(normalizedContrast, 0.0, 1.0, .5 /*min*/, 4. /*max*/);\n    if (mode==0)contrast=1.; //use this when don't need contrast transform\n    vec4 dstColor = vec4((srcColor.rgb - vec3(0.5)) * contrast + vec3(0.5), 1.0);\n    \n    // pixel step\n    vec2 pixelStep = 3. / iResolution.xy;\n\n    // get 4 pixels\n    vec4 pixel00 = texture(iChannel0, texCoord);\n    vec4 pixel01 = texture(iChannel0, texCoord + vec2(pixelStep.x, 0.0));\n    vec4 pixel10 = texture(iChannel0, texCoord + vec2(0.0, pixelStep.y));\n    vec4 pixel11 = texture(iChannel0, texCoord + pixelStep);\n\n    pixel00 = vec4((pixel00.rgb - vec3(0.5)) * contrast + vec3(0.5), 1.0);\n    pixel01 = vec4((pixel01.rgb - vec3(0.5)) * contrast + vec3(0.5), 1.0);\n    pixel10 = vec4((pixel10.rgb - vec3(0.5)) * contrast + vec3(0.5), 1.0);\n    pixel11 = vec4((pixel11.rgb - vec3(0.5)) * contrast + vec3(0.5), 1.0);\n\n\n    // 进行小波变换\n    vec4 lowHigh = dwt2D(pixel00, pixel01, pixel10, pixel11);\n    \n    \n    \n    // 进行小波逆变换\n    vec4 pixel = idwt2D(lowHigh, vec4(0.0), vec4(0.0), vec4(0.0));\n    \n    float idle = float(iMouse.z<0.||iMouse.x<0.001)*0.1;\n    \n    if(idle>0.)\n    {\n        if (fragCoord.x<iResolution.x/3.)\n        {\n            vec4 pixel1 = pow(pixel,vec4(vec3(.2),0));\n            pixel1.b*=.2;\n            pixel1.g*=1.8;\n            fragColor = pixel1;\n        }\n        else if (fragCoord.x>iResolution.x*2./3.)\n        {\n            vec4 pixel1 = pow(pixel,vec4(vec3(.8),0));\n            pixel1.r*=.1;\n            pixel1.g*=.1;\n            pixel1.b*=1.3;\n            fragColor = pixel1;\n        }\n        else fragColor = pixel00;\n    }\n    else   \n    {\n        pixel = pow(pixel,vec4(vec3(iMouse.y/iResolution.y),0));    //gamma correction\n        // interaction output\n        if (fragCoord.x>an)\n            {pixel.g*=(1.-iMouse.y/iResolution.y)*1.5;\n            pixel.b*=iMouse.y/iResolution.y*1.5;\n            \n            fragColor = pixel;}\n        else   \n\n            fragColor = pixel00;\n    }\n \n}\n","name":"Image","description":"","type":"image"}]}