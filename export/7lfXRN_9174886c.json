{"ver":"0.1","info":{"id":"7lfXRN","date":"1625242235","viewed":401,"name":"The Secret Place","username":"Kamoshika","description":"I also posted this on NEORT.\nhttps://neort.io/art/c3fjls43p9f8s59bfp8g","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define D(v) sin(snoise2D((v) + c * 5e2) * 10.)\n\nfloat snoise2D(vec2 v);\n\nfloat hash(float x)\n{\n    return fract(sin(x) * 43758.5453);\n}\n\nvec3 hsv(float h, float s, float v) {\n    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0);\n    vec3 lightDir = normalize(vec3(-1, 2, 4));\n    \n    vec2 e = vec2(1e-3, 0);\n    \n    vec2 q;\n    float c, s, L;\n    \n    for(float i = 0.;i < 20.;i++){\n        L = 1. - fract(iTime) + i;\n        c = hash(i + ceil(iTime));\n        q = p / atan(1e-3, L) / 2e3;\n        s = D(q);\n        if(s * dot(q, q) > .5){\n            break;\n        }\n    }\n    \n    vec3 normal = normalize(vec3((-D(q + e.xy) + s)/e.x,\n                                 (-D(q + e.yx) + s)/e.x,\n                                 1.\n                                 ));\n    col = hsv(hash(c), .5, 1.) + max(dot(normal, lightDir), 0.);\n    L = dot(q, q) * 10. + L * L;\n    col *= exp(-L * .01);\n    \n    fragColor = vec4(col, 1.);\n}\n\n/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0);\n    vec3 lightDir = normalize(vec3(-1, 2, 4));\n    \n    vec2 e = vec2(1e-4, 0);\n\n    for(float i = 0.;i < 20.;i++){\n        float L = 1. - fract(iTime) + i;\n        float c = hash(i + ceil(iTime));\n        vec2 q = p / atan(1e-3, L) / 2e3;\n        float s = D(q);\n        if(col.r == 0. && s * dot(q, q) > .5){\n            vec3 normal = normalize(vec3((-D(q + e.xy) + s)/e.x,\n                                         (-D(q + e.yx) + s)/e.x,\n                                         1.\n                                         ));\n            col = hsv(hash(c), .5, 1.) + max(dot(normal, lightDir), 0.);\n            L = dot(q, q) * 20. + L * L;\n            col *= exp(-L * .01);\n        }\n    }\n    \n    fragColor = vec4(col, 1.);\n}*/\n\n//--------------- snoise2D ---------------------------------------------------------------------------\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise2D(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n//--------------- snoise2D ---------------------------------------------------------------------------","name":"Image","description":"","type":"image"}]}