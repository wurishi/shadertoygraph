{"ver":"0.1","info":{"id":"fdtSDX","date":"1634165106","viewed":162,"name":"Sponge Cylinder","username":"rudros","description":"Very small but (hopefully) readable ray-caster","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raycasting","mini"],"hasliked":0,"parentid":"7ddXD2","parentname":"Boxes Zoom"},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.1415326\n\nmat2 rotate2D(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat levelDist(vec3 p, float level) {\n    float scale = 1./pow(4., level);\n\tp = mod(p + scale, scale*2.) - scale;\n\tp = abs(p);\n\treturn .3*scale - min(max(p.x, p.y), min(max(p.y, p.z), max(p.z, p.x)));\n}\n\nfloat cylinder(vec3 p) {\n    return .5-length(p.xy);\n}\n\n// Max gives us the intersection of all the surfaces\nfloat maxDist(vec3 p) {\n\tfloat dist = 0.;\n\tfor (float i = 0.; i < 4.; i++) {\n\t\tdist = max(dist, levelDist(p, i));\n\t}\n\treturn max(dist, cylinder(p));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float i;\n    float eyeDist, minDist;\n\n    vec3 eyePos = vec3(0, 0, iTime); // Keep moving forward\n    vec3 ray = vec3((fragCoord.xy-.5*iResolution.xy)/iResolution.x, 1.);\n    ray = normalize(ray);\n    \n    // Camera rotation\n// \tray.xz *= rotate2D(PI*iTime*.2);\t\n\n    for(minDist=1.; i<100. && minDist>.001; i++) {  \n        // Point to check\n        vec3 p = eyePos+eyeDist*ray;\n        \n        minDist = maxDist(p);\n        // Move point forward\n        eyeDist += minDist*.5;\n    }\n    // Fix for banding\n    i += 2.*(minDist*1000.-1.);\n    fragColor = vec4(0);\n    fragColor += 400./(i*i);\n}\n","name":"Image","description":"","type":"image"}]}