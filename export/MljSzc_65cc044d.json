{"ver":"0.1","info":{"id":"MljSzc","date":"1445601470","viewed":409,"name":"redhaze","username":"hexjayi","description":"red haze","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["haze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"/*\nToying with code from \nIQ's raymarch reference and noise -> https://www.shadertoy.com/view/Xds3zN \n*/\nfloat ss(float mi,float ma,float a)\n{\n    return (sin(a)+1.)*(ma-mi)*0.5+mi;\n}\n#define uTex2D iChannel0\nfloat pn( in vec3 x ) // iq's noise\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = texture(uTex2D, (uv+ 0.5)/256.0, -100.0 ).yx;\n    return -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\nfloat df(vec3 p)\n{\n    \n    //float pnNoise = pn(p*.26)*1.98 + pn(p*.26)*.62 + pn(p*1.17)*.39; // from aiekick -> https://www.shadertoy.com/view/ltBSzc \n    \n    // Shane suggestions\n    //float pnNoise = pn(p*.26)*2.6 + pn(p*1.17)*.39;\n    float pnNoise = (pn(p/4.)*0.57 + pn(p/2.)*0.28 + pn(p)*0.15)*3.;\n    \n    return pnNoise;\n}\nfloat fig(vec3 ro, vec3 rd)\n{\n    float res=0.;\n    float a = 0.;\n    for ( int i = 0;\n         i<60;\n         i++)\n    {\n        vec3 p = ro + rd * a;\n        float fbmp = df(p*8.);\n        res = res + clamp(fbmp * 0.016,-0.5,1.)*p.y*1./abs(p.y*4.);\n        res = mix( res, res+clamp(fbmp * 0.014,-0.5,1.), 0.5 );\n        a += 0.1;\n    }\n    return res;\n}\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    // camera positon\n    vec3 ro = vec3( \n        cos(iTime)*0.3,\n        1.*0.73,\n        iTime *2.\n    );\n    vec3 ta = vec3( \n        0.,\n        0.,\n        iTime*2.+8.);\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0. );\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n    float figp = fig(ro,rd);\n    figp = max(figp, 0.);\n    vec3 col = vec3(min(figp*1.4, 1.), pow(figp, 2.5), pow(figp, 10.)); // Thank you Shane!\n    fragColor=vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}