{"ver":"0.1","info":{"id":"lsV3W1","date":"1454367898","viewed":686,"name":"Circular Spectrogram","username":"Flexi","description":"forked from https://www.shadertoy.com/view/lsdGDj#","likes":20,"published":1,"flags":96,"usePreview":0,"tags":["spectrogram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\nvec2 gradient(vec2 uv, vec2 d, vec4 selector){\n    vec4 dX = 0.5*texture(iChannel0, uv + vec2(1.,0.)*d) -\n        0.5*texture(iChannel0, uv - vec2(1.,0.)*d);\n    vec4 dY = 0.5*texture(iChannel0, uv + vec2(0.,1.)*d) -\n        0.5*texture(iChannel0, uv - vec2(0.,1.)*d);\n    return vec2( dot(dX, selector), dot(dY, selector) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n    \n    fragColor = vec4(32.,24., 8., 0.)*length(gradient(uv, 0.5 / iResolution.xy, vec4(1,0,0,0)));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdsGWH","filepath":"https://soundcloud.com/dj-yoz/eterspan","previewfilepath":"https://soundcloud.com/dj-yoz/eterspan","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat border(vec2 domain, float thickness){\n\t vec2 uv = fract(domain-vec2(0.5));\n\t uv = min(uv,1.-uv)*2.;\n\t return clamp(max(uv.x,uv.y)-1.+thickness,0.,1.)/(thickness);\n}\n\nvec2 complex_mul(vec2 factorA, vec2 factorB){\n\t return vec2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy * pixelSize;\n\n    vec2 aspect = vec2(1.,iResolution.y/iResolution.x);\n\t\n    vec2 c = vec2(0.5);\n    \n    float a = iTimeDelta/asin(1.)*0.5;\n    float z = 1.000;//1;\n    vec2 rot = vec2(cos(a), sin(a))*z;\n    \n    vec2 uv_rot = c + complex_mul((uv - c)*aspect, rot)/aspect;\n    \n    if(abs(uv.x-0.5) < pixelSize.x*2. && uv.y < 0.5){\n    \tfragColor = texture(iChannel0, vec2(1.+(uv.y-0.5)*2.,0.));\n    }else{\n        fragColor = texture(iChannel1, uv_rot);\n    }\n    \n    fragColor = mix(fragColor, vec4(0), border(uv, 0.004));\n    \n}","name":"Buf A","description":"","type":"buffer"}]}