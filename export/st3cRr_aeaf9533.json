{"ver":"0.1","info":{"id":"st3cRr","date":"1659098744","viewed":151,"name":"Minecraft like biome generation","username":"maze_maze","description":"Minecraft like biome generation","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","minecraft","biome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smootherstep(float t) {\n    return (t * (t * 6.0 - 15.0) + 10.0) * t * t * t;\n}\n\nfloat noise3D(ivec3 p) {\n    return float((p.x * 676769 ^ p.y * 53769 ^ p.z * 24869) * 676769) * 4.656613e-10;\n}\nfloat gradNoise3D(ivec3 pos, vec3 offset) {\n    // Handmade formula from my other post https://www.shadertoy.com/view/fdKBDV\n    return dot(vec3(noise3D(pos), noise3D(pos + 1), noise3D(pos + 2)), offset);\n}\nfloat perlin3D(vec3 pos) {\n    vec3 offset = fract(pos);\n    vec3 offset1 = offset - 1.0;\n    ivec3 posf = ivec3(pos - offset);\n    ivec3 posc = posf + 1;\n    \n    float sox = smootherstep(offset.x);\n    float soy = smootherstep(offset.y);\n    return smootherstep(mix(\n        mix(\n            mix(\n                gradNoise3D(posf, offset),\n                gradNoise3D(ivec3(posc.x, posf.y, posf.z), vec3(offset1.x, offset.y, offset.z)),\n                sox\n            ),\n            mix(\n                gradNoise3D(ivec3(posf.x, posc.y, posf.z), vec3(offset.x, offset1.y, offset.z)),\n                gradNoise3D(ivec3(posc.x, posc.y, posf.z), vec3(offset1.x, offset1.y, offset.z)),\n                sox\n            ),\n            soy\n        ),\n        mix(\n            mix(\n                gradNoise3D(ivec3(posf.x, posf.y, posc.z), vec3(offset.x, offset.y, offset1.z)),\n                gradNoise3D(ivec3(posc.x, posf.y, posc.z), vec3(offset1.x, offset.y, offset1.z)),\n                sox\n            ),\n            mix(\n                gradNoise3D(ivec3(posf.x, posc.y, posc.z), vec3(offset.x, offset1.y, offset1.z)),\n                gradNoise3D(posc, offset1),\n                sox\n            ),\n            soy\n        ),\n        smootherstep(offset.z)\n    ) * 1.41421356237 * 0.5 + 0.5) * 2.0 - 1.0;\n}\n\nvec4 biomeValue; // Lets imagine that the values are (x - humidity, y - elevation, z - temperature, w - cavity)\nfloat biomeDistance = 100000.;\nvec3 biomeColor;\nvoid nearestBiome(vec4 biomeInfo, vec3 color) {\n    float dist = distance(biomeInfo, biomeValue);\n    if (dist < biomeDistance) {\n        biomeDistance = dist;\n        biomeColor = color;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = floor(fragCoord * 0.25 + iTime * 8.) * 0.02;\n    biomeValue = vec4(perlin3D(vec3(uv, 0.5)), perlin3D(vec3(uv, 1.5)), perlin3D(vec3(uv, 2.5)), 1.0 - pow(abs(perlin3D(vec3(uv * 0.5, 3.5))), 0.25) * 2.0);\n    \n    nearestBiome(vec4(0.0, 1.0, 0.0, -0.9), vec3(0.5, 0.5, 0.5)); // Mountain\n    nearestBiome(vec4(0.2, 0.2, 0.0, -0.3), vec3(0.4, 0.8, 0.1)); // Plains\n    nearestBiome(vec4(0.2, 0.2, -0.9, -0.3), vec3(0.85, 0.95, 0.8)); // Snowy plains\n    nearestBiome(vec4(-0.5, 0.1, 0.5, -0.5), vec3(0.9, 0.8, 0.1)); // Desert\n    nearestBiome(vec4(-0.8, 0.2, 0.8, -0.5), vec3(0.95, 0.95, 0.1)); // Sahara\n    \n    nearestBiome(vec4(0.0, 0.0, 0.0, 0.3), vec3(0.0, 1.0, 1.0)); // River\n    nearestBiome(vec4(0.7, -0.3, 0.0, 0.3), vec3(0.0, 0.8, 1.0)); // Lake\n    nearestBiome(vec4(0.0, 0.0, 0.0, 0.2), vec3(0.8, 0.7, 0.1)); // Beach\n    \n    nearestBiome(vec4(0.9, -0.5, 0.0, 0.0), vec3(0.1, 0.3, 0.9)); // Ocean\n    nearestBiome(vec4(0.9, -0.5, 0.9, 0.0), vec3(0.1, 0.6, 0.9)); // Warm ocean\n    nearestBiome(vec4(0.9, -0.5, -0.9, 0.0), vec3(0.1, 0.0, 0.9)); // Cold ocean\n    \n    fragColor = vec4(biomeColor, 1.0);\n    //fragColor = vec4(vec3(biomeValue.w * 0.5 + 0.5), 1.0);\n    //fragColor = vec4(biomeValue.rgb * 0.5 + 0.5, 1.0);\n}","name":"Image","description":"","type":"image"}]}