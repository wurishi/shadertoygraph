{"ver":"0.1","info":{"id":"mssyD2","date":"1687228381","viewed":45,"name":"form without form","username":"vivavolt","description":"knots","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["torus","knot","n","trefoil","pedrinhas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Knot de pedrinhas \" by Elsio. https://shadertoy.com/view/ddlcW2\n// 2023-06-20 02:29:51\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define EPS 0.01\n#define _2PI 6.28318530718/9.\n#define PI atan(0., -1.)\n#define TIME (iTime/7.0)\n\n\nfloat luma(in vec4 color) {\n    return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nfloat dither4x4(in vec2 position, in float brightness) {\n    int x = int(mod(position.x, 4.0));\n\tint y = int(mod(position.y, 4.0));\n\tint index = x + y * 4;\n\tfloat limit = 0.0;\n\n\tif (x < 8) {\n\t\tif (index == 0) limit = 0.0625;\n\t\tif (index == 1) limit = 0.5625;\n    \tif (index == 2) limit = 0.1875;\n    \tif (index == 3) limit = 0.6875;\n    \tif (index == 4) limit = 0.8125;\n    \tif (index == 5) limit = 0.3125;\n    \tif (index == 6) limit = 0.9375;\n    \tif (index == 7) limit = 0.4375;\n    \tif (index == 8) limit = 0.25;\n    \tif (index == 9) limit = 0.75;\n    \tif (index == 10) limit = 0.125;\n    \tif (index == 11) limit = 0.625;\n    \tif (index == 12) limit = 1.0;\n    \tif (index == 13) limit = 0.5;\n    \tif (index == 14) limit = 0.875;\n    \tif (index == 15) limit = 0.375;\n        limit *= 0.75;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec4 dither4x4(in vec2 position, in vec4 color) {\n\treturn vec4(color.rgb * dither4x4(position, luma(color)), 1.0);\n}\n\n\nfloat sdBola(vec3 p) {\n\n    float r = .5*length(p.xy);\n    float a = mod(atan(p.y, p.x) + cos(TIME) * 1., _2PI) - _2PI / 2.;\n    float b = 5.*cos(TIME) * atan(p.y, p.x);\n    \n    p.xy = r * vec2(cos(a), sin(a));\n    p.x -= 1.;\n\n    p.xz = cos(b) * p.xz + sin(TIME/1.3 + b) * vec2(-p.z, p.x);\n    p.x = abs(p.x) - .8*abs(0.1 + sin(TIME + 3.*r)); \n\n    return length(p)*(0.2+abs(cos(TIME/10.)+sin(TIME/4.12))) - .3*abs(sin(5.*r + TIME/1.5));\n}\n\n\nvec2 rot(vec2 p, float ang){\n    float c = cos(ang);\n    float s = sin(ang);\n    return p * mat2(c,s,-s,c);\n}\n\n\nfloat map(vec3 p) {\n    vec3 bola = vec3(0, 1, 5);\n    return min(2., sdBola(p - bola));\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float t = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        float step = map(ro + t * rd);\n        t += step;\n        if(t > MAX_DIST || step < EPS) break;\n    }\n    return t;\n}\n\n\nvec3 normal(vec3 p) {\n\tfloat d = map(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat shadow(vec3 p) {\n    vec3 lightPos = vec3(4, 15, 1);\n    vec3 l = normalize(lightPos - p);\n    return dot(normal(p), l);\n}\n\nvec3 palette( in float t )\n{\n    vec3 col = vec3(0.4,0.4,0.4);\n    col += 0.12*cos(6.28318*t*  1.0+vec3(0.0,0.8,1.1));\n    col += 0.11*cos(6.28318*t*  3.1+vec3(0.3,0.4,0.1));\n    col += 0.10*cos(6.28318*t*  5.1+vec3(0.1,0.7,1.1));\n    col += 0.09*cos(6.28318*t*  9.1+vec3(0.2,0.8,1.4));\n    col += 0.08*cos(6.28318*t* 17.1+vec3(0.2,0.6,0.7));\n    col += 0.07*cos(6.28318*t* 31.1+vec3(0.1,0.6,0.7));\n    col += 0.06*cos(6.28318*t* 65.1+vec3(0.0,0.5,0.8));\n    col += 0.06*cos(6.28318*t*115.1+vec3(0.1,0.4,0.7));\n    col += 0.09*cos(6.28318*t*265.1+vec3(1.1,1.4,2.7));\n    return col;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    float noise = (fract(TIME + sin(dot(uv, vec2(12.9898,78.233)*2.0)) * 43758.5453));\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float t = rayMarch(ro, rd);\n    \n    vec3 pos = ro + rd * t;\n    vec3 shad = vec3(shadow(pos));\n\n    vec3 col;\n    vec3 e = vec3(1.);\n    col = pal(shad.y, e, e, e, 0.35 * vec3(0.,0.33,0.66));\n    \n\tcol = 1.1 * shad * shad * col + 0.1 * col;\n    col = pow(col * .9, vec3(3, 2.5, 2.2) * .2);\n    col = mix(col, shad, .3);\n    col = col * .8- .5 * length(uv);\n    //col = pow( col, vec3(0.4545) );\n    \n    if (t >= MAX_DIST) {\n        fragColor = vec4(vec3(0.), 1.0);\n        return;\n    }\n    \n        \n    \n    //col += noise / 10.;\n    \n    fragColor = vec4(col, 1.);\n    //fragColor = dither4x4(fragCoord / 2., fragColor);\n}","name":"Image","description":"","type":"image"}]}