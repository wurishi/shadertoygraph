{"ver":"0.1","info":{"id":"tdcfDr","date":"1604824673","viewed":66,"name":"KIFS Fractal Hit Detection","username":"efairbanks","description":"WASD to move. Hit detection in a 2D KIFS fractal. Crude but neat? IDK.","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["fractal","hitdetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A simple example of persistent variable in a shader\n// \n// Use W,A,S,D keys to move sprite around\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 xy = (fragCoord.xy-iResolution.xy/2.)/iResolution.x;\n    vec2 camera = vec2(GETVAL(CAMERA_X),GETVAL(CAMERA_Y))-0.5;\n    \n    vec2 dotPos = xy - GETCAMCOORDS();\n    \n    float val = length(dotPos)>0.01?1.:0.;\n\n    val = map(xy)>0. ? val : val*0.5;\n    \n    fragColor = vec4(vec3(val),1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SETVAL(INDEX,VAL) if(int(fragCoord.x)==INDEX) fragColor=vec4(VAL)\n\n#define CAMERA_INC 0.003\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor=texelFetch(iChannel0,ivec2(fragCoord),0);\n    if(iTime<0.1) {\n        SETVAL(CAMERA_Y,0.5);\n        SETVAL(CAMERA_X,0.5);\n    }\n    float camX = GETVAL(CAMERA_X);\n    float camY = GETVAL(CAMERA_Y);\n    if(GETKEY(KEY_UP))\n\t\tcamY += CAMERA_INC;\n    if(GETKEY(KEY_DOWN))\n\t\tcamY -= CAMERA_INC;\n    if(GETKEY(KEY_LEFT))\n\t\tcamX -= CAMERA_INC;\n    if(GETKEY(KEY_RIGHT))\n\t\tcamX += CAMERA_INC;\n    if(map(vec2(camX,camY)*2.-1.)>0.) {\n        SETVAL(CAMERA_X, camX);\n        SETVAL(CAMERA_Y, camY);\n    }\n}\n","name":"Buffer @","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define GETVAL(INDEX) texelFetch(iChannel0,ivec2(INDEX,0),0).x\n#define GETKEY(INDEX) (texelFetch(iChannel1,ivec2(INDEX,0),0).x>0.5)\n\n#define KEY_UP\t\t87\n#define KEY_DOWN\t83\n#define KEY_LEFT\t65\n#define KEY_RIGHT\t68\n\n#define CAMERA_X\t0\n#define CAMERA_Y\t1\n#define CAMERA_Z\t2\n\n#define GETCAMCOORDS() (vec2(GETVAL(CAMERA_X),GETVAL(CAMERA_Y))*2.-1.)\n\nfloat map(vec2 p) {\n    p*=0.1;\n    for(int i=0;i<10;i++) {\n        p=vec2(atan(p.y,p.x),length(p))+vec2(-1.9,0.);\n        p=vec2(cos(p.x),sin(p.x))*p.y;\n    \tp=abs(p)-0.11;\n        p*=1.3;\n    }\n    float d = max(-(abs(p.x)-0.02),-(abs(p.y)-0.02));\n\treturn d;\n}","name":"Common","description":"","type":"common"}]}