{"ver":"0.1","info":{"id":"MdKBzy","date":"1529417905","viewed":105,"name":"distance field for shapes","username":"Veggiebob","description":"2 simple distance fields for a rectangle, and a distance field for a circle. Red is negative. I put the 3D versions underneath them.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float align (float diff, float dim){\n    return max(diff-dim, 0.);\n}\nfloat box (vec4 box, vec2 pos){\n    float n = align(abs(pos.x-box.x), box.z)+align(abs(pos.y-box.y), box.w)-min(box.z/2., box.w/2.);\n    return n;\n}\nfloat distRect(vec4 r, vec2 p) { //credit to BigWIngs for this function\n\tvec2 d = max(abs(p - r.xy) - r.zw*.5, 0.);\n       return dot(d, d);\n}\n/*\n//The 3D version\nfloat box3D (vec3 boxPos, vec3 boxSize, vec3 pos){\n    float n = align(abs(pos.x-boxPos.x), boxSize.x)+align(abs(pos.y-boxPos.y), boxSize.y);\n    n+=align(abs(pos.z-boxPos.z), boxSize.z);//just to keep the lines short\n    return n;\n}\n*/\nfloat circle (vec2 pos, float radius, vec2 p){\n    return length(p-pos)-radius;\n}\n/*\n//The 3D version\nfloat sphere (vec3 pos, float radius, vec3 p){\n    return length(p-pos)-radius;\n}\n//very simple :)\n*/\nfloat donut (vec2 pos, float radius, vec2 p){\n    float d = pow(max(abs(circle(pos, radius, p)),abs(circle(pos, radius*0.5, p))), 3.)*50.-0.15;\n    d = clamp(d, -1., 1.);\n    return d;\n}\n//no 3d version\nfloat ring (vec2 pos, float radius, vec2 p){\n    return max(abs(circle(pos, radius, p)),abs(circle(pos, radius*0.5, p)));\n}\n//this is a work in progress\n/*\n\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    float distBox = distRect(vec4(0.2, sin(iTime)*0.5, 0.1, 0.1), uv)*8.;\n    float distBox2 = box(vec4(sin(iTime)*0.5, 0.2, 0.1, 0.1), uv);\n    float distCircle = circle(vec2(0.), 0.2, uv);\n    float weirdBox = box(vec4(sin(iTime*1.3)*0.4, cos(iTime*1.3)*0.4, 0.1, 0.1), uv);\n    float don = donut(vec2(sin(iTime)*0.5), 0.3, uv);\n    \n    float endDist = min(min(min(min(distBox, distCircle), distBox2), weirdBox), don);\n    vec3 col = vec3(1.);\n    float contrast = 5.;\n    if(endDist<0.){\n    \tcol = vec3(-endDist*contrast, 0., 0.);\n    } else {\n        col = vec3(endDist*contrast);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}