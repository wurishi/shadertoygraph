{"ver":"0.1","info":{"id":"ssjcW3","date":"1644250550","viewed":220,"name":"Hexagons grid 2","username":"MarcoF","description":"A different way to make an hexagons grid.\nFirst way: https://www.shadertoy.com/view/fs2cDc","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["grid","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float scale = 16.0;\n\nbool flatTop = true;\n\nvec4 rect2hex(vec2 p){\n\tvec2 var = flatTop ? vec2(1., .5) : vec2(.5, 1.);\n    \n    vec2 s = flatTop ? vec2(1.7320508, 1.) : vec2(1., 1.7320508);\n    \n\tvec4 hC = floor(vec4(p, p - var)/s.xyxy) + .5;\n\tvec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    \n    //vec4 hC = floor(vec4(p/s, p/s + .5));\n\t//vec4 h = p.xyxy - vec4(hC.xy + .5, hC.zw)*s.xyxy;\n\n\treturn dot(h.xy, h.xy) < dot(h.zw, h.zw) ? vec4(h.xy, hC.xy) : vec4(h.zw, hC.zw + .5);\n}\n\nfloat edgeDistance(vec2 p) {\n\tp = abs(p);\n    \n\tfloat var = flatTop ? p.y : p.x;\n    \n    vec2 s = flatTop ? vec2(1.7320508, 1.) : vec2(1., 1.7320508);\n    \n\treturn max(dot(p, s*.5), var);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    \n    uv *= scale;\n    \n    vec4 uvHex = rect2hex(uv);\n    \n    float ed = edgeDistance(uvHex.xy); // Edge distance.\n\tfloat cDist = dot(uvHex.xy, uvHex.xy); // Relative squared distance from the center.\n\n    vec3 col = vec3(0.);\n\tcol.rg = cos(uvHex.zw + iTime) * 0.5 + 0.5;\n    \n    // outline\n\tcol *= 1.0 - smoothstep(0.48, 0.5, ed);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}