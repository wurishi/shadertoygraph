{"ver":"0.1","info":{"id":"dtVXWK","date":"1686374816","viewed":134,"name":"Quadratic Demons","username":"vete","description":"Something random using a broken version of a quadratic bezier sdf from https://www.shadertoy.com/view/MlKcDD\nWould love to hear some (copy-pastable) adjustments to make it more dynamic","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["bezier","quadratic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat dot2( in vec2 v ) { return dot(v,v); }\n#define rot2D(a) mat2(cos(a),sin(a),-sin(a),cos(a))\nfloat smoothClamp(float x, float a, float b)\n{\n    return smoothstep(0., 1., (x - a)/(b - a))*(b - a) + a;\n}\nfloat sdBezier( vec2 p, vec2 v0, vec2 v1, vec2 v2 )\n{\n\tvec2 i = v0 - v2;\n    vec2 j = v2 - v1;\n    vec2 k = v1 - v0;\n    vec2 w = j-k;\n\n\tv0-= p; v1-= p; v2-= p;\n    \n\tfloat x = cro(v0, v2);\n    float y = cro(v1, v0);\n    float z = cro(v2, v1);\n\n\tvec2 s = 21.0*(y*j+z*k)-x*i;\n    s *= rot2D(iTime/1.6)*v1;\n\n    float r =  (y*z-x*x*0.4215)/dot2(s);\n    float t = clamp( (0.5*x+y+r*dot(s+222.*sin(s*2.),w))/(x+y+z),0.0,sin(iTime)+1.5);\n    \n\treturn length( v0+t*(k+k+t*w) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    p *= rot2D(iTime/4.+length(sin(p*.3)));\n    vec2 q = vec2(-0.3,0.3);\n    vec2 q1 = vec2(1.1);\n    vec2 q2 = vec2(0.6,0.1);\n    \n    vec3 col = vec3(1.);\n    for(float i = 0.; i < (4.); i += 0.2) {\n    col *= smoothstep(0.0, 0.35,sdBezier(rot2D(i)*p,q*rot2D(iTime+p.x),q1,q2));\n    col *= smoothstep(0.0, 0.35,sdBezier(rot2D(i)*p+0.4,q*rot2D(2.*iTime+p.x),q1,q2));\n    col *= smoothstep(0.0, 0.35,sdBezier(rot2D(i)*p*rot2D(iTime)+0.1,q*rot2D(3.*iTime+p.x),q1,q2));\n    col *= smoothstep(0.0, 0.35,sdBezier(rot2D(i)*p+0.42,q*rot2D(4.*iTime+p.x),q1,q2));\n    \n    p *= rot2D(22.)*1.7+0.1*sin(length(p)/2.+.2);\n\n        \n    }\n    col *= 22.;\n    col = vec3(smoothClamp(length(col),-0.4,1.));\n\n    // Output to screen\n    fragColor = vec4(1.-col,1.0);\n}","name":"Image","description":"","type":"image"}]}