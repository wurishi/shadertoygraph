{"ver":"0.1","info":{"id":"wdfBRM","date":"1587896017","viewed":85,"name":"my fourier series","username":"Yanka","description":"fourier series","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fourierseries"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int absi(int x)\n{\n\treturn x < 0 ? -x : x;   \n}\nfloat Fourier(float x)//[0,1]\n{\n    float pi = acos(-1.);\n    x = (x-0.5)*2.*pi;\n    float res = 0., norm = 0.;\n    const int N = 4;\n    float a[N], b[N];\n    a[0] = 1.5;b[0] = 1.;\n    a[1] = 2.;b[1] = -2.;\n    a[2] = -3.;b[2] = 4.;\n    a[3] = -0.5;b[3] = -10.;\n    for(int i=1;i <= N;i++)\n    {\n        res += a[i - 1] * cos(float(i) * x) + b[i - 1] * sin(float(i) * x);\n        norm += abs(a[i - 1]) + abs(b[i - 1]);\n    }\n    return res/ norm;\n}\nfloat Square(vec2 a, vec2 b)\n{\n    return abs(a.y * b. x - a.x * b.y);\n}\nfloat distTo(vec2 p, vec2 a, vec2 b)\n{\n   return Square(p - a, b - a) / length(b - a);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat dx = 1. / iResolution.x;\n    float dy = 1. / iResolution.y;\n    \n    float x0 = uv.x + iTime * 0.2;\n\tvec2 p0 = vec2(x0, (uv.y - 0.5) * 2.) * iResolution.xy;\n    vec2 a = vec2(x0 - dx, Fourier(x0 - dx)) * iResolution.xy;\n    vec2 b = vec2(x0 , Fourier(x0 + 0.)) * iResolution.xy;\n    vec2 c = vec2(x0 + dx, Fourier(x0 + dx)) * iResolution.xy;\n    \n    float p = min(distTo(p0, b, a ),distTo(p0, b, c ));\n    \n\n    float R = 4.;\n    float t = p > R ? 0. : (R - p) / R;\n    //if(abs(p0.y - c.y) < 5.)\n       // t = 1.;\n    vec3 col = vec3(t);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}