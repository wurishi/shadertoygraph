{"ver":"0.1","info":{"id":"sddSzX","date":"1633650132","viewed":289,"name":"Experimental star texture","username":"Einheit101","description":"This is an experimental star texture shader for my project, maybe it comes in handy for someone looking for such a thing.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture","space","stars","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float speed = 0.3;\n\nfloat n11(float p) {\n\treturn fract(sin(p*154.101)*313.019);\n}\n\nfloat n21(vec2 p) {\n\treturn sin(dot(p, vec2(7., 157.)));\n}\n\n\nfloat star(vec3 p) {\n\tfloat z = 1.;\n\tvec2 gv = fract(p.xy*z) - 0.5;\n\tvec2 id = floor(p.xy*z);\n\tgv.x += sin(n21(id)*354.23) * 0.3;\n\tgv.y += sin(n11(n21(id))*914.19) * 0.3;\n\tfloat r = n11(n21(id));\n\treturn 0.1*n11(r)*abs(sin(p.z+r*133.12))*0.4/length(gv)*0.1;\n}\n\nfloat stars(in vec3 p) {\n\tfloat z = 1., m = 0.;\n\tfor(int i=1; i<=6;i++){\n\t\tvec3 t = vec3(0., 0., p.z + iTime * speed);\n\t\tz *= 2.;\n\t\tm += star(vec3(p.xy*z, 1.)+t);\n\t}\n\treturn m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y);\n    float m = stars(vec3(uv, iTime * speed));\n\tfragColor = vec4(m, m, m, 1.);\n\n}","name":"Image","description":"","type":"image"}]}