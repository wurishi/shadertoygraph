{"ver":"0.1","info":{"id":"stySWR","date":"1640457192","viewed":85,"name":"mandelbrot zooming in","username":"aberracja","description":"Mandelbrot set, zoooooms in.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void percToRgb( in float perc, out vec3 col) {\n    float c = 1.0;\n    float h = perc * 240.0;\n    float h_prime = h / 60.0;\n    float x = 1.0 - abs( mod(h_prime, 2.0) - 1.0);\n    if (0.0 <= h_prime && h_prime < 1.0) {\n        col = vec3(c, x, 0);\n    }\n    else if (1.0 <= h_prime && h_prime < 2.0) {\n        col = vec3(x, c, 0);\n    }\n    else if (2.0 <= h_prime && h_prime < 3.0) {\n        col = vec3(0, c, x);\n    }\n    else if (3.0 <= h_prime && h_prime < 4.0) {\n        col = vec3(0, x, c);\n    } \n    else {\n        col = vec3(x, 0, c);\n    }\n    \n}\n\nvec2 lerp(in vec2 v1, in vec2 v2, float t) {\n    return (v2-v1) * t + v1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    const float MAX_TIME = 60.0; // seconds\n    \n    \n    float time = mod(iTime, MAX_TIME);\n    \n    vec2 startSpan = vec2(2.47, 2.24);\n    \n    vec2 startMin = vec2(-2.0, -1.12);\n    \n    vec2 ultMin = vec2(-0.6, 0.65);\n    vec2 ultSpan = vec2(0.01, 0.005625);\n    \n    vec2 span = lerp(startSpan, ultSpan, time/MAX_TIME);\n    vec2 mins = lerp(startMin, ultMin, time/MAX_TIME);\n    \n    vec2 mandCoord = uv * span + mins;\n    \n    int MAX_ITER = 69;\n    float THRESHOLD = 4.0;\n    float zx = 0.0;\n    float zy = 0.0;\n    float ztemp = 0.0;\n    float abs_z = 0.0;\n    int iter = 0;\n    for(iter= 0; iter < MAX_ITER; iter++) {\n        ztemp = zx * zx - zy * zy + mandCoord.x;\n        zy = 2.0 * zx * zy + mandCoord.y;\n        zx = ztemp;\n        if (zx*zx + zy*zy > THRESHOLD) {\n            break;\n        }\n     }\n    \n    float perc = float(iter) / float(MAX_ITER);\n     \n    vec3 col;\n    percToRgb(perc, col);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}