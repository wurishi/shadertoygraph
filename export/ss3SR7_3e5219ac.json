{"ver":"0.1","info":{"id":"ss3SR7","date":"1633014384","viewed":101,"name":"Ray Marched Portals","username":"FrostBT","description":"Ray marchers with portals.\n\nThe \"other world\" is just whenever light passes through a portal.\nNote that the \"other world\" has it's colors swizzled to demonstrate how lighting works through portals.\n\nBased on https://www.shadertoy.com/view/XlGBW3","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher","portal","noneuclidean"],"hasliked":0,"parentid":"NsdXRn","parentname":"Ray Marcher Proto"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching for Dummies!\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n//\n// Modified by FrostBT\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON .01\n#define PORTAL_TRANSLATE vec3(10, 0, 0)\n#define PORTAL_WIDTH 1.\n\n#define NUM_LIGHTS 3\nvec3[] lightDirs = vec3[NUM_LIGHTS] (\n    vec3(1, .2, -1),\n    vec3(-1, .3, -1),\n    vec3(0, .1, 1)\n);\n\nvec3[] lightCols = vec3[NUM_LIGHTS] (\n    vec3(1.2, .7, .4),\n    vec3(.8, .8, 1.),\n    vec3(.5)\n);\n\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat intersectPlane(\n        vec3 rayOrigin,\n        vec3 rayDirection,\n        vec3 planeNormal,\n        vec3 planeOrigin) {\n    float denom = dot(planeNormal, rayDirection);\n    vec3 p0l0 = planeOrigin - rayOrigin;\n    return dot(p0l0, planeNormal) / denom;\n}\n\nfloat intersectPortal(\n        vec3 rayOrigin,\n        vec3 rayDirection,\n        vec3 planeNormal,\n        vec3 planeOrigin,\n        float t) {\n        \n    if (t < 0.) {\n      return 0.;\n    }\n    \n    vec3 p = rayOrigin + rayDirection * t;\n    p = mod(p + PORTAL_TRANSLATE * .5, PORTAL_TRANSLATE) - PORTAL_TRANSLATE * .5;\n\n    if (abs(p.x) < PORTAL_WIDTH && abs(p.y) < 3.) {\n      return sign(dot(rayDirection, planeNormal));\n    } else {\n      return 0.;\n    }\n}\n\n\n// Note that the \"other world\" and the main world have the same geometry,\n// otherwise one could use a different GetDist depending on which world they\n// were starting in.\nfloat GetDist(vec3 op) {\n\tvec4 s = vec4(0, 1, 0, 1);\n    \n    float d = MAX_DIST;\n    { // Spheres\n        vec3 p = mod(op + PORTAL_TRANSLATE, PORTAL_TRANSLATE * 2.) - PORTAL_TRANSLATE;\n        d = min(d, sdSphere(p + vec3(0, -1, -2.1 + sin(iTime)), 1.));\n    }\n    { // Cubes\n        vec3 p = mod(op, PORTAL_TRANSLATE * 2.) - PORTAL_TRANSLATE;\n        d = min(d, sdBox(p + vec3(0, -1, -2.1 + cos(iTime)), vec3(1.)));\n    }\n    { // Frame\n        vec3 p = mod(op + PORTAL_TRANSLATE*.5, PORTAL_TRANSLATE) - PORTAL_TRANSLATE*.5;\n        p.x = -abs(p.x);\n        d = min(d, sdBox(p + vec3(PORTAL_WIDTH, 0, 0), vec3(.1, 3, .1)));\n        d = min(d, sdBox(p + vec3(0, -3, 0), vec3(PORTAL_WIDTH+.1, .1, .1)));\n    }\n\n    d = min(d, op.y);\n    return d;\n}\n\nmat3 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO = 0.;\n    float world = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        // Calculate step.\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        // Determine if we passed through a portal.\n        float t = intersectPlane(p, rd, vec3(0, 0, 1), vec3(0));\n        float portal = intersectPortal(p, rd, vec3(0, 0, 1), vec3(0), t);\n        if (portal != 0. && t < dS) {\n          ro += PORTAL_TRANSLATE;\n          dS = t + EPSILON;\n          world += sign(dot(rd, vec3(0, 0, 1)));\n        }\n        \n        // Determine if we should stop.\n        dO += dS;\n        if (dO>MAX_DIST) {\n            dO = MAX_DIST;\n            break;\n        } else if (dS<EPSILON) {\n            break;\n        }\n    }\n    \n    mat3 result;\n    result[0] = vec3(ro + rd * dO);\n    result[1] = vec3(dO, 0, 0);\n    result[2] = vec3(world, 0, 0);\n    return result;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetSun(vec3 p, vec3 lightAngle, vec3 lightCol, float world) {\n    vec3 l = normalize(lightAngle);\n    vec3 n = GetNormal(p);\n    \n    // Shadow\n    float dif = clamp(dot(n, l), 0., 1.);\n    mat3 hit = RayMarch(p+n*EPSILON*2., l);\n    float d = hit[1].x;\n    world += hit[2].x;\n    if(d < MAX_DIST) dif = 0.;\n    \n    // The other world gets other lighting.\n    if (world != 0.) {\n      lightCol.xyz = lightCol.zxy;\n    }\n    \n    return lightCol * dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    // Who doesn't like interaction? (even if minimal)\n    float mouseX = iMouse.x/iResolution.x;\n    float mouseY = iMouse.y/iResolution.x;\n    vec3 focus = vec3(0, 1, 0);\n    vec3 ro = vec3(sin(mouseX)*-8. + iTime, (-sin(mouseY)+.7)*4., -10.);\n    vec3 at = ro - focus;\n    \n    // Point camera at origin (overkill for this example)\n    vec3 camZ = -normalize(at);\n    vec3 camX = cross(vec3(0, 1, 0), camZ);\n    vec3 camY = -cross(camX, camZ);\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    fragColor = vec4(normalize(uv.x*camX + uv.y*camY + camZ),1.);\n\n    // Distance\n    mat3 hit = RayMarch(ro, rd);\n    vec3 p = hit[0];\n    float d = hit[1].x;\n    float world = hit[2].x;\n\n    vec3 lights = vec3(0);\n    for (int iLight = 0; iLight < NUM_LIGHTS; iLight++) {\n      lights += GetSun(p, lightDirs[iLight], lightCols[iLight], world);\n    }\n    col = vec3(lights);\n    \n    \n    // Sky color\n    vec3 sky = vec3(0);\n    for (int iLight = 0; iLight < NUM_LIGHTS; iLight++) {\n      float amount = clamp(dot(rd, lightDirs[iLight]), 0., 1.);\n      sky += amount * lightCols[iLight];\n    }\n    \n    // Fade off\n    col = mix(col, sky, d/MAX_DIST);\n    \n    // Gamma correction\n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}