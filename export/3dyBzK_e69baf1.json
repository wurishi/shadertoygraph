{"ver":"0.1","info":{"id":"3dyBzK","date":"1607456038","viewed":91,"name":"2D Voroni Terrain","username":"sdfgeoff","description":"Voroni can be used to generate a rocky/chunky/polygony looking terrain. This is a 2D test before I try my hand at a 3D version.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["terrain","voroni"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n/// Returns the position in the cell to use for voroni\nvec2 cell_offset(vec2 cell_id) {\n    return vec2(\n        (rand(cell_id) - 0.5),\n        (rand(cell_id + 13.2980235) - 0.5)\n    ) * 0.8;\n}\n\n\n\n/// Returns the cell ID and the distance to the cell point\nvec3 voroni_cell(vec2 uv) {\n    vec3 data = vec3(0.0, 0.0, 100.0);\n\n    for (float i=-1.0; i<=1.0; i+=1.0) {\n        for (float j=-1.0; j<=1.0; j+=1.0) {\n            vec2 this_cell_id = floor(uv) + 0.5 + vec2(i, j);\n            vec2 this_cell_offset = cell_offset(this_cell_id);\n            vec2 this_cell_point = this_cell_id + this_cell_offset;\n            float dist_to_this_cell_point = length(uv - this_cell_point);\n\n            if (dist_to_this_cell_point < data.z) {\n                data.z = dist_to_this_cell_point;\n                data.xy = this_cell_id;\n            }\n        }\n    }\n    return data;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv *= 10.0;\n    \n\tvec3 data = voroni_cell(uv);\n    vec3 col = vec3(data.z);\n    \n    if (data.y > 2.0) {\n        col.b = 1.0;\n    } else {\n        col.g = 1.0;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}