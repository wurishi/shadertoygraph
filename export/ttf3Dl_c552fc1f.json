{"ver":"0.1","info":{"id":"ttf3Dl","date":"1558039340","viewed":331,"name":"Water dots","username":"Neebz","description":"A very simple water simulation using dots / circles. Not very performant, but was a fun little challenge.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["simple","beginner","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution 30.\n#define waveFrequency 10.\n#define waveSize 0.08\n#define simulationSpeed 0.1\n#define baseColorIntensity 0.1\n\nvec3 baseColor = vec3(0., 0.4, 0.2);\n\nfloat circle (vec2 uv, float radius, float blur, vec2 offset){\n    float dist = distance(uv, offset); \n    return smoothstep(radius, radius - blur, dist); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n        \n    float mask = 0.;\n    float multiplicativeInverseResolution = 1. / resolution;\n    float t = iTime * simulationSpeed;\n    float z = 2.;   \n    vec3 floatMask = vec3(0.);\n    \n    for(float y = -.5; y < .5; y += multiplicativeInverseResolution){\n        vec2 uvOffset = uv * z;\n        for (float x = -.5; x < .5; x += multiplicativeInverseResolution){    \n            vec2 offset = vec2(x + sin((t + y) * waveFrequency) * waveSize, y + cos((t + x) * waveFrequency) * (waveSize * 1.5));                \t\n            mask += circle(uvOffset, .01, 0.005, offset * vec2(3.,1.5) + vec2(0,0.1));\n        }\n        z += multiplicativeInverseResolution * 2.;\n    }\n            \n    baseColor *= baseColorIntensity;\n    vec3 color = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    fragColor = vec4(baseColor + color * mask,1.0);\n}","name":"Image","description":"","type":"image"}]}