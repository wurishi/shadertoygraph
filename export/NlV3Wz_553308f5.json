{"ver":"0.1","info":{"id":"NlV3Wz","date":"1637515240","viewed":388,"name":"Distribution of Random funcs","username":"iY0Yi","description":"Distribution of Random functions.\nInspired by this shader.\n[url]https://www.shadertoy.com/view/4ssXRX[/url]","likes":20,"published":3,"flags":0,"usePreview":0,"tags":["random","hash","distribution"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Hash without Sine\" by Dave_Hoskins:\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat rndUni(vec2 p){\n    return hash12(p);\n}\n\nfloat rndAdd(vec2 p){\n    float a = hash12(p);\n    float b = hash12(p+1.);\n    return (a+b)*.5;\n}\n\nfloat rndMul1(vec2 p){\n    float a = hash12(p);\n    return (a*a*a);\n}\n\nfloat rndMul2(vec2 p){\n    float a = hash12(p);\n    float b = hash12(p+1.);\n    return (a*b);\n}\n\nfloat rndSqrt(vec2 p){\n    float a = hash12(p);\n    return sqrt(a);\n}\n\nfloat rndPow(vec2 p){\n    float a = hash12(p);\n    float b = hash12(p+1.);\n    //return pow(a, (1.+sin(iTime))*8.);\n    \n    return pow(rndMul2(p), .25);\n}\n\nfloat rndGauss(vec2 p) {\n    float a = hash12(p);\n    float b = hash12(p+1.);\n    float value =\n    sqrt(-2.*log(a)) *\n    sin(2.*acos(-1.) * b);\n    value = (value + 3.) / 6.;\n    return value;\n}\n\n\n#define drawHistgram(RND_TYPE) {\\\n    float maxth = ceil(uv.x*float(RESOLUTION))/float(RESOLUTION);\\\n    float minth = maxth-(1./float(RESOLUTION));\\\n    float cnt = 0.;\\\n    float t = fract( iTime );\\\n    for(int i = 0; i<MAX_SAMPLE; i++) {\\\n        float rnd = RND_TYPE(vec2(i,domain.x)+t);\\\n        if(rnd>=minth && rnd<maxth)cnt++;\\\n    }\\\n    cnt /= float(MAX_SAMPLE);\\\n    res = (cnt>uv.y/SCALE_Y) ? 1.: 0.;\\\n}\\\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    const int VARIATIONS = 7;\n    vec2 domain = vec2(iResolution.x/float(VARIATIONS), iResolution.y);\n    int id = int(floor(fragCoord.x/domain.x));\n    fragCoord.x = mod(fragCoord.x, domain.x);\n    vec2 uv = fragCoord/domain;\n    \n    float res = 0.;\n    const int MAX_SAMPLE = 3000;\n    const int RESOLUTION = 30;\n    const float SCALE_Y = 1.;\n    if(id==0) drawHistgram(rndUni);\n    if(id==1) drawHistgram(rndAdd);\n    if(id==2) drawHistgram(rndMul1);\n    if(id==3) drawHistgram(rndMul2);\n    if(id==4) drawHistgram(rndSqrt);\n    if(id==5) drawHistgram(rndPow);\n    if(id==6) drawHistgram(rndGauss);\n    //drawHistgram(rndGauss);\n    vec3 col = mix(vec3(0.102,0.102,0.102), vec3(.8, .77, .7), res);\n    col = max(col, vec3(.8, .77, .7)*.3* ((fragCoord.x>=domain.x-2.) ? vec3(1) : vec3(0)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}