{"ver":"0.1","info":{"id":"csV3zK","date":"1678869811","viewed":199,"name":"ASCII shape noise","username":"xXxShaderG0DxXx","description":"Recreating this cool shader from patricio gonzalez vivo that i saw : https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/03.gif","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["simplex","shapes","ascii"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Oriented Box - distance 2D\" by iq. https://shadertoy.com/view/stcfzn\n// 2023-03-14 16:05:31\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Recreating https://raw.githubusercontent.com/patriciogonzalezvivo/glslViewer/main/.github/images/03.gif\n// using his SDF and noise functions \n\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n  //  x0 = x0 - 0. + 0.0 * C \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n    i = mod(i, 289.0);\n    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0 / 7.0; // N=7\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n//Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n// Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n}\n\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = p-(a+b)*0.5;\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l*0.5,th);\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\n\nfloat sdCross( in vec2 p, float th, float crossRadius) {\n\n    float upper = 1. - crossRadius;\n    float lower = 0. + crossRadius;\n    \n    vec2 v1 = vec2(lower, upper);\n    vec2 v12 = vec2(upper, lower);\n    vec2 v2 = vec2(lower, lower);\n    vec2 v22 = vec2(upper, upper);\n\n\n\tfloat d1 = sdOrientedBox( p, v1, v12, th );\n    float d2 = sdOrientedBox( p, v2, v22, th );\n\n    d1 = step(d1, 0.01);\n    d2 = step(d2, 0.01);\n    \n    return d1 + d2;\n}\n\nfloat square( in vec2 p, float radius) {\n    vec2 value = step(radius, p) - step(1. - radius, p);\n    return value.x* value.y;\n}\n\nfloat line( in vec2 p, float radius) {\n    float upper = 1. - radius;\n    float lower = 0. + radius;\n    \n    vec2 v1 =vec2(lower, lower);\n    vec2 v12 =vec2(upper, upper);\n\n\treturn step(sdOrientedBox( p, v1, v12, 0.028 ), 0.01);\n}\n\nfloat getGridColor( in vec2 p, float noise) {\n    if (noise <= 0.25) {\n        return square(p, 0.47) - 0.7;\n    } \n\n    if (noise > 0.25 && noise <= 0.5) {\n        return line(p, 0.68);\n    }\n\n    if (noise > 0.5 && noise <= 0.75) {\n        return sdCross(p, 0.028,0.68);\n    }\n\n    if (noise > 0.75) {\n        return square(p, 0.94);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // making sure the grid cells are squares\n    uv.y *= float(iResolution.y)/ float(iResolution.x);\n    \n   \n    float GRID_SIZE = 25.;\n    \n    float gridSizeInverse = 1./GRID_SIZE;\n\n    vec2 uv1 = uv*GRID_SIZE;\n    \n    vec2 uv_i = floor(uv1);\n    vec2 uv_f = fract(uv1);\n\n\n    float noise = snoise(vec3(uv_i*gridSizeInverse*2.2, iTime*0.5));\n     noise *= 1.4;\n     noise -=0.2;\n    \n\n    float color = getGridColor(uv_f, noise);\n\n  \n\tfragColor = vec4(vec3(color), 1.0);\n\n\n}","name":"Image","description":"","type":"image"}]}