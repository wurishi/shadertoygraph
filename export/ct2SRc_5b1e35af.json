{"ver":"0.1","info":{"id":"ct2SRc","date":"1676390289","viewed":58,"name":"td10","username":"Toto_ShaderMan","description":"cube","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\n// fonction de rotation\nmat2 rot(float a)\n{\n    float ca = cos(a);\n    float sa = sin(a);\n    return mat2(ca, sa, -sa, ca);\n}\n\nfloat box(vec3 p, vec3 s)\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z) );\n}\n\n\nfloat repeat(float pos, float taille)\n{\n    return (fract(pos/taille + 0.5) - 0.5) * taille;\n}\n\nfloat repeatid(float pos, float taille)\n{\n    return floor(pos/taille + 0.5);\n}\n\n\nfloat map(vec3 p)\n{\n    p.xz *= rot(time*0.005);\n    p.xy *= rot(time*0.003);\n    \n    p.x = repeat (p.x, 4.0);\n    p.y = repeat (p.y, 4.0);\n    p.z = repeat (p.z, 4.0);\n    \n    // box\n    float d1 = box(p, vec3(0.5));\n    p.x += 1.0;\n    \n    // sphere\n    float d2 = length(p) - 0.3;\n    \n    float d = max (d1, -d2);\n    return d;\n    \n    //Cylindre\n     float c = length(p.yz) - 0.06;\n    d = min(d, c);\n    \n    d *= 0.001;\n    \n    return d;\n    \n\n\n}\n\nvec3 norm(vec3 p, float dur)\n{\n    float centre = map(p);\n    float decal_x = map(p - vec3(dur, 0,   0) );\n    float decal_y = map(p - vec3(0,   dur, 0) );\n    float decal_z = map(p - vec3(0,   0,   dur) );\n    vec3 diff = centre - vec3(decal_x, decal_y, decal_z);\n    return normalize(diff);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5);\n    uv /= iResolution.y; \n\n    vec3 col = vec3(0);\n\n    // Raymarching loop\n    vec3 p = vec3(0,0,-50);\n    vec3 start = p;\n    \n    //p.x += sin(time)*3.0;\n    \n    float focale = 1.0;\n    vec3 r = normalize( vec3(uv, focale) );\n    \n    vec3 light = vec3(1,3,-2);\n    light.xz *= rot(time);\n    light.xy *= rot(time*2.6);\n    //light.x += sin(time)*5.0;\n    light = normalize(light);\n    \n    \n    \n    for(float i=0.0; i<30.0; ++i)\n    {\n        float d = map(p);\n        if(d < 0.001) {\n            break;\n        }\n        if(d > 100.0) {\n            break;\n        }\n        p += r * d;\n    }\n        \n    vec3 n = norm(p, 0.01);\n    vec3 h = normalize(light - r);\n\n    float lambert = max(0.0, dot(n, light) );\n    float spec = max(0.0, dot(n,h));\n    float fresnel = 1.0 - abs(dot(n,r));\n\n    vec3 diffuse = vec3(1,0.2,0.8);\n    col += lambert * diffuse;\n\n    col += lambert * pow(spec, 10.0) * diffuse * 1.8;\n    col += lambert * pow(spec, 100.0);\n\n    //col += pow(fresnel, 3.0) * vec3(0.5,0.6,1.0);\n    \n    float depth = length(p - start);\n    float fog = clamp(1.0 - depth/100.0, 0.0, 1.0);\n    col *= pow(fog, 2.0);\n    col += pow(1.0-fog, 0.92) * 1.0 * vec3(0.1,0.2,1.0);\n    \n    // \"tone mapping\"\n    col = smoothstep(0.0, 1.0, col);\n    // gamma\n    col = pow(col, vec3(0.4545));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}