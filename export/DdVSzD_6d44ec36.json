{"ver":"0.1","info":{"id":"DdVSzD","date":"1680879646","viewed":52,"name":"TP3animation","username":"p2002623","description":"afficher une heolienne qui tourne en pleine mer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Randane AMAOUZ\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Surface( in vec2 p )\n{\n\treturn 1.5*cos(p.y/1.5+iTime)-3.0;\n} \n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Surface( p.xy );\n    float h = (p.z - z)/2.0; // Lipschitz is defined as a constant 2.0\n    return h;\n}\n\n\nfloat aile(vec3 p, vec3 c, vec3 a, vec3 b){\n    float v = Intersection(Intersection(\n                    Cylindre(c+vec3(0,0,5), a, b, 1.),\n                    Plan(p, vec3(2,0,0),vec3(1,0,0))),\n                    Plan(p, vec3(0.5,0,0),vec3(1,0,0)));\n    \n    \n    return v;\n}\n\n\nfloat heolienne(vec3 p, vec3 c){\n    float v1 = Union(Sphere(p,vec3(0,0.6,6),1.),\n                     Cylindre(p, vec3(-1,0.5,7), vec3(-1,0.5,-5), 1.));\n \n    \n    float x = Union(aile(p,c,vec3(0,0,17), vec3(0,0,5)),\n                    aile(p,c,vec3(-6,0,11), vec3(6,0,11)));\n                    \n    float vx = Union(x, v1);\n    \n    \n    return vx;\n}\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  float zz = ImplicitTerrain(p); //Intersection(\n      \n \n  float u = DemiSphere(p,vec3(10.0,0.0,0.0),5.0, vec3(0,0,1));\n  //float pl = Plan(p, vec3(0,0,-5), vec3(0, 0, 10));\n  float v = Union( u, zz);\n  \n  float w = Union(v, aile(p, p, vec3(1, 1, 1), vec3(0,0,-3)));\n  \n\n  vec2 a=vec2(1.0,1.0);\n  float h=Surface(a);\n  //vec3 c=vec3(a,h+0.5);\n  vec3 c=vec3(Rotation(p, vec3(0, 1, 6), vec3(0,0,10.0*iTime)));\n  u=Union(u,Cylindre(p,c,c+vec3(0,0,3),0.5));\n  float uu =  Union(zz, heolienne(p, c));\n  return uu;\n  \n  \n  \n}\n\n// Analysis of the scalar field\n\nconst int Steps=400;// Number of steps\nconst float Epsilon=.0025;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,150.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n\nvec3 Rotation(vec3 p, vec3 c, vec3 r)\n{\n    \n    float cx = sin(-r.x);\n    float sx = cos(-r.x);\n    float cy = sin(-r.y);\n    float sy = cos(-r.y);\n    float cz = sin(-r.z);\n    float sz = cos(-r.z);\n    p -=c;\n    \n    mat3 Rx = mat3(1.0, 0.0, 0.0,   0.0, cx, -sx,   0.0, sx,cx);\n    mat3 Rz = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Ry = mat3(cz, sz, 0.0,    -sz, cz, 0.0,    0, 0,1.0);\n    \n    return (Rx*Ry*Rz*p)+c;\n}\n\n\n\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Union\n// a, b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n/// Segment\n// p : point\n// a,b\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b - a;\n    vec3 pa = p - a;\n    float t = dot(pa, ba) / dot(ba, ba);\n    vec3 c = ba * clamp(t, 0.0, 1.0);\n    return length(pa - c);\n}\n\n\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n//Plan\nfloat Plan(vec3 p, vec3 o, vec3 n)\n{\n  n = normalize(n);\n  return(dot(p-o, n));\n}\n\n//Demi-Sphere\nfloat DemiSphere(vec3 p, vec3 c, float r, vec3 n) {\n    float s = Sphere(p, c, r);\n    float pl = Plan(p, c, n);\n    return max(s, pl);\n}\n\n\n\n//Capsule\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n\n    return Segment(p, a, b) - r;\n}\n\n//Cylindre\nfloat Cylindre(vec3 p, vec3 a, vec3 b, float r) {\n\n    float v = max(Capsule(p, a, b, r),\n                  -dot(p-b, normalize(a-b)));\n\n    v = max(v, -dot(p-a, normalize(b-a)));\n    return v;\n}\n\n\n\n//cone\n\n\n//Tore\n","name":"Common","description":"","type":"common"}]}