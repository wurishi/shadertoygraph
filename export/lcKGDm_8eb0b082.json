{"ver":"0.1","info":{"id":"lcKGDm","date":"1712867690","viewed":40,"name":"UNIhomework","username":"OATMILK","description":"i have managed to color it","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ivetriedmybest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float c){\nreturn mat2(cos(c), -sin(c), sin(c), cos(c));\n}\n\nfloat sdSphere(vec3 p, float s){\nreturn length(p) - s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q, 0.0)) + max(min(q.x,min(q.y,q.z)),0.0);\n}\nnvec3 intersection_new_colour(vec3 p, vec3 centre, float r){\n    float a = p.x;\n    float b = p.y;\n    float c = p.z;\n    float x0 = centre.x;\n    float y0 = centre.y;\n    float z0 = centre.z;\n    float alp = min((((a*x0 + b*y0 + c*z0) + sqrt(-(b*x0 - a*y0)*(b*x0 - a*y0) - (c*y0 - b*z0)*(b*z0 - c*y0) - (c*x0 - a*z0)*(c*x0 - a*z0) + r*r*length(p)*length(p)))/(length(p)*length(p))),\n                    (((a*x0 + b*y0 + c*z0) - sqrt(-(b*x0 - a*y0)*(b*x0 - a*y0) - (c*y0 - b*z0)*(b*z0 - c*y0) - (c*x0 - a*z0)*(c*x0 - a*z0) + r*r*length(p)*length(p)))/(length(p)*length(p))));\n    if(-alp*p.y > .0){\n        return vec3(100.0,50.,10.);}\n    else{\n        return vec3(10.,50.0,100.);}\n}\n\nvec3 intersection_n_colour(vec3 p, vec3 centre, float r){\n    float a = p.x;\n    float b = p.y;\n    float c = p.z;\n    float x0 = centre.x;\n    float y0 = centre.y;\n    float z0 = centre.z;\n    float alp = min((((a*x0 + b*y0 + c*z0) + sqrt(-(b*x0 - a*y0)*(b*x0 - a*y0) - (c*y0 - b*z0)*(b*z0 - c*y0) - (c*x0 - a*z0)*(c*x0 - a*z0) + r*r*length(p)*length(p)))/(length(p)*length(p))),\n                    (((a*x0 + b*y0 + c*z0) - sqrt(-(b*x0 - a*y0)*(b*x0 - a*y0) - (c*y0 - b*z0)*(b*z0 - c*y0) - (c*x0 - a*z0)*(c*x0 - a*z0) + r*r*length(p)*length(p)))/(length(p)*length(p))));\n    if(-alp*p.y > .0){\n        return vec3(10.0,50.,100.);}\n    else{\n        return vec3(100.,50.0,10.);}\n}\n\nvec4 map(vec3 p){\nvec3 s1position = vec3(-1.,0.,-0.5);\nvec3 s2position = vec3(1.,0.,0.5);\nvec3 s3position = vec3(3, 0.,.0);\nvec3 s4position = vec3(-3, 0., .0);\nvec3 q = p;\nq.xz *= rotate2d(iTime);\nvec4 sphere1 = vec4(intersection_new_colour(q, s1position, 0.7), sdSphere(q - (s1position),.7));\nvec4 sphere2 = vec4(intersection_n_colour(q,s2position,0.7), sdSphere(q - (s2position),.7));\nvec4 box1 = vec4(0.,0.,0., sdBox(q , vec3(.75)));\ns3position.xy *= rotate2d(iTime);\ns4position.xy *= rotate2d(iTime);\nvec4 box2 = vec4(100.,50.,10.,sdBox(p - s3position, vec3(.5)));\nvec4 box3 = vec4(10.,50.,100., sdBox(p - s4position, vec3(.75)));\nvec4 ground = vec4(100.,100.,100., p.y + 0.75);\nvec4 res = vec4(100.,100.,100.,100.);\nfloat dist = min(ground.w, min(min(min(box1.w, box2.w), box3.w), min(sphere1.w,sphere2.w)));\nif(ground.w == dist){\n        res = ground;\n    } else if(box1.w == dist){\n        res = box1;\n    } else if(box2.w == dist){\n        res = box2;\n    } else if(box3.w == dist){\n        res = box3;\n    } else if(sphere1.w == dist){\n        res = sphere1;\n    } else if(sphere2.w == dist){\n        res = sphere2;\n    }\nreturn res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy *2. - iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0.,0.,-3.);\n    vec3 rd = normalize(vec3(uv,1.));\n    ro.xz *= rotate2d(-m.x);\n    rd.xz *= rotate2d(-m.x);\n    vec3 col = vec3(0., 0., 0.);\n    float t = 0.; \n    int i = 0;\n    vec4 d;\n    while(i < 80 && (d.w < .001 || t > .4)){\n        vec3 p = ro + rd*t;\n        d = map(p);\n        col = vec3(d.rgb)/80.;\n        t += d.w;\n        i += 1;\n    }\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}