{"ver":"0.1","info":{"id":"ll2XRt","date":"1445972238","viewed":307,"name":"SpinningSphere","username":"jt","description":"Texture mapped on a diffuse-lit sphere using Mercator-projection.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["light","sphere","projection","rotating","diffuse","rotation","spinning","mercator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// SpinningSphere - Texture mapped on a diffuse-lit sphere using Mercator-projection.\n// by Jakob Thomsen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat checker(vec2 tc)\n{\n    vec2 v = step(fract(2.0 * tc), vec2(0.5)) - 0.5;\n    return step(v.x * v.y, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 surfaceNormal = vec3(0.0, 0.0, -1.0);\n\tvec3 surfacePos = vec3(2.0 * fragCoord.xy / iResolution.xy - 1.0, 0.0);\n    //vec3 texColor = vec3(checker(surfacePos.xy));\n    vec3 texColor = vec3(texture(iChannel1, surfacePos.xy));\n    surfacePos.x *= iResolution.x / iResolution.y;\n    if(length(surfacePos.xy) <= 1.0) // Halbkugel\n    {\n        surfacePos.z = -sqrt(1.0 - dot(surfacePos.xy, surfacePos.xy));\n        surfaceNormal = normalize(surfacePos - vec3(0.0, 0.0, 0.0));\n        // square-to-disc map\n        //texColor = vec3(1.0);\n        //vec2 spherePos = surfacePos.xy / sqrt(1.0 - 0.5 * surfacePos.yx * surfacePos.yx);\n        // mercator-projection\n        float latitude = acos(surfacePos.y);\n        float longitude = atan(surfacePos.x, surfacePos.z);\n        vec2 spherePos = vec2(longitude, latitude) / 3.1415926;\n        spherePos.x += iTime * 0.1;\n        //texColor = vec3(checker(spherePos.xy));\n        texColor = vec3(texture(iChannel0, spherePos.xy));\n    }\n    //vec3 lightPos = vec3(0.0, 0.0, -1.51);\n    vec3 lightPos = vec3(0.0, 2.0 * sin(iTime), -3.0);\n    vec3 lightDir = lightPos - surfacePos;\n    float lightDist = length(lightDir);\n    lightDir = normalize(lightDir);\n    \n    float diffuse = max(dot(surfaceNormal, lightDir), 0.0) / pow(lightDist, 2.0);\n    float ambient = 0.2;\n    \n    float light = 8.0 * diffuse + ambient;\n\n\tfragColor = vec4(texColor * light, 1.0);\n    //fragColor = vec4(0.5 + 0.5 * surfaceNormal.xyz, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}