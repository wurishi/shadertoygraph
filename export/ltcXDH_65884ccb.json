{"ver":"0.1","info":{"id":"ltcXDH","date":"1479310421","viewed":1607,"name":"Simple God Rays","username":"luluco250","description":"WIP - Need to improve chromakey\nThis is just a test for fun, nothing professional.\nMouse vertical controls rays size, horizontal controls threshold.","likes":13,"published":1,"flags":32,"usePreview":1,"tags":["2d","lighting","volumetric","godrays","chromakey"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//blend everything together\n#define raysIntensity 0.25\n#define raysSaturation 0.5\n#define raysBlend 2\n//0 = Addition, 1 = Lighten Only (max()), 2 = Volumetric Lightning\n//any other number will show only the rays\n\nvec3 colorWeights = vec3(0.299, 0.587, 0.114);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n \tvec2 uv = fragCoord * ps;\n    vec3 col = texture(iChannel0, uv).rgb;\n    vec3 rays = texture(iChannel1, uv).rgb;\n    \n    rays = mix(vec3(dot(rays, colorWeights)), rays, raysSaturation);\n    rays = pow(rays, vec3(2.2)); //linear-to-gamma\n    \n    //addition\n    #if raysBlend == 0\n    col += rays * vec3(raysIntensity);\n    //lighten only\n    #elif raysBlend == 1\n    col = max(col, rays * vec3(raysIntensity));\n    //volumetric lighting\n    #elif raysBlend == 2\n    col += rays * vec3(raysIntensity);\n    col -= mix(vec3(0.0), vec3(1.0) - rays, raysIntensity);\n    //only rays\n    #else\n    col = rays;\n    #endif\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//chromakey\n#define chromaA 10.0\n#define chromaB 6.0\n#define chromaC 0.6\n\nconst vec3 chromaKey = vec3(0.0, 1.0, 0.0);\n\nfloat getLum(vec3 c);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord * ps;\n    vec2 mPos = iMouse.xy * ps;\n    vec3 col = texture(iChannel0, uv).rgb;\n    vec4 overlay = texture(iChannel1, uv);\n    \n    overlay.a = chromaA * (overlay.r + overlay.b) - chromaB * overlay.g;\n    overlay.rgb = mix(overlay.rgb, vec3(overlay.r, min(overlay.g, overlay.b), overlay.b), chromaC);\n    \n    col = mix(col, overlay.rgb, clamp(overlay.a, 0.0, 1.0));\n    \n    fragColor = vec4(col, 1.0);\n}\n\nvec2 getPS() {\n \treturn vec2(1.0) / iResolution.xy;   \n}\n\nfloat getLum(vec3 c) {\n\treturn max(c.r, max(c.g, c.b));\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//calculate godrays\n#define raysSamples 64\n#define raysSizeMul 3.0\n\n#define raysCenter vec2(0.435, 0.99)\n//default pos when mouse isn't clicked\n#define defaultPos vec2(0.8, 0.2)\n\nfloat getLum(vec3 c);\nvec3 ZoomBlur(sampler2D sp, vec2 uv, vec2 center, float scale);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord * ps;\n    vec2 mPos = iMouse.z > 0.0 ? iMouse.xy * ps : defaultPos;    \n    vec3 rays = ZoomBlur(iChannel0, uv, raysCenter, (1.0 - mPos.y) * raysSizeMul);\n    rays = pow(rays, vec3(0.4545)); //gamma-to-linear, vec3(1.0 / 2.2)\n    rays = smoothstep(mPos.x, 1.0, rays);\n    fragColor = vec4(rays, 1.0);\n}\n\nvec2 getPS() {\n \treturn vec2(1.0) / iResolution.xy;   \n}\n\nfloat getLum(vec3 c) {\n\treturn max(c.r, max(c.g, c.b));\n}\n\nvec3 ZoomBlur(sampler2D sp, vec2 uv, vec2 center, float scale) {\n\tconst float accum = 1.0 / float(raysSamples);\n    scale = mix(1.0, 1.0 - accum, scale);\n    vec3 col = texture(sp, uv).rgb;\n    for (int i = 1; i < raysSamples; ++i) {\n        uv = (uv - center) * scale + center;\n        col += texture(sp, uv).rgb;\n    }\n    return col * accum;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//blurX\n#define blurSize 2.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord * ps;\n    vec2 direction = vec2(blurSize, 0.0);\n\tvec2 offset[3];\n\toffset[0] = 1.411764705882353 * direction;\n\toffset[1] = 3.2941176470588234 * direction;\n\toffset[2] = 5.176470588235294 * direction;\n\tvec3 col = vec3(0.0);\n\tcol += texture(iChannel0, uv).rgb * 0.1964825501511404;\n\tcol += texture(iChannel0, uv + offset[0] * ps).rgb * 0.2969069646728344;\n\tcol += texture(iChannel0, uv - offset[0] * ps).rgb * 0.2969069646728344;\n\tcol += texture(iChannel0, uv + offset[1] * ps).rgb * 0.09447039785044732;\n\tcol += texture(iChannel0, uv - offset[1] * ps).rgb * 0.09447039785044732;\n\tcol += texture(iChannel0, uv + offset[2] * ps).rgb * 0.010381362401148057;\n\tcol += texture(iChannel0, uv - offset[2] * ps).rgb * 0.010381362401148057;\n    fragColor = vec4(col, 1.0);\n}\n","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//blurY\n#define blurSize 2.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord * ps;\n    vec2 direction = vec2(0.0, blurSize);\n\tvec2 offset[3];\n\toffset[0] = 1.411764705882353 * direction;\n\toffset[1] = 3.2941176470588234 * direction;\n\toffset[2] = 5.176470588235294 * direction;\n\tvec3 col = vec3(0.0);\n\tcol += texture(iChannel0, uv).rgb * 0.1964825501511404;\n\tcol += texture(iChannel0, uv + offset[0] * ps).rgb * 0.2969069646728344;\n\tcol += texture(iChannel0, uv - offset[0] * ps).rgb * 0.2969069646728344;\n\tcol += texture(iChannel0, uv + offset[1] * ps).rgb * 0.09447039785044732;\n\tcol += texture(iChannel0, uv - offset[1] * ps).rgb * 0.09447039785044732;\n\tcol += texture(iChannel0, uv + offset[2] * ps).rgb * 0.010381362401148057;\n\tcol += texture(iChannel0, uv - offset[2] * ps).rgb * 0.010381362401148057;\n    fragColor = vec4(col, 1.0);\n}\n","name":"Buf D","description":"","type":"buffer"}]}