{"ver":"0.1","info":{"id":"WlVBRz","date":"1656326648","viewed":73,"name":"recursive raymarcher","username":"theott","description":"Experimenting with recursive raytracer.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching for Dummies!\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n//\n// I just added the scene, colors and recursion to the raymarcher.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define MAX_DEPTH 2.\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat GetDist(vec3 p) {\n    float h = 1.5;\n\tvec4 s = vec4(0, 0, 0,.1);\n    //s.xy *= Rot(sin(iTime * 2.));\n    //s.xyz += -p;\n    s.yz += vec2(1.2, 1);\n    s.xy += vec2(sin(iTime / 2.), cos(iTime));\n    vec4 s2 = vec4(0, h, 5, .5 + pow(cos(iTime), 6.) / 2.);\n    vec3 cp = p-s.xyz;\n    cp.xz *= Rot(iTime * 3.);\n    cp.xy *= Rot(iTime / 2.);\n    vec3 cr = vec3(.1);\n    //vec3 cr = vec3(pow(cos(iTime), 2.)*2., .1, .1);\n    //cp.xz *= Rot(iTime*6.);\n    //cp.xy *= Rot(iTime /3.);\n    \n    float walls = 3.0;\n    float sphereDist =  length(p - vec3(\n        walls*sin(iTime),\n        walls*(cos(iTime)+1.),\n        200.*fract(iTime/16.)-4. )) -.5;\n    float planeDist = p.y;\n    float sphereDist2 = length(p-s2.xyz)-s2.w;\n    float cubeDist = length(max(abs(cp)-cr, 0.));\n    //float bulbDist = mix(cubeDist, sphereDist, sin(iTime)*.5 + .5);\n    float bulbDist = cubeDist;\n    float plane2Dist = min(p.x + walls, abs(p.x - walls));\n    float plane3Dist = p.y - 1.;\n\n    float d = smin(plane2Dist, planeDist, 1.);\n    d = smin(sphereDist, d, 3.);\n    d = min(sphereDist2, d);\n    d = min(bulbDist, d);\n    \n    return d;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float depth) {\n\tfloat dO=0.;\n    float hit = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS<SURF_DIST){\n            if (i > 1) break;\n            else dO = 0.1;\n        }\n        if(dO>MAX_DIST) {\n            hit = 1.;\n            break;\n        }\n    }\n    \n    return vec2(dO, hit);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p, vec3 n, vec3 ro, vec3 lightPos, vec3 lightCol) {\n    vec3 l = normalize(lightPos-p);\n    vec3 v = normalize(ro-p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    vec2 ray = RayMarch(p+n*SURF_DIST*2., l, MAX_DEPTH);\n    float d = ray.x;\n    \n    //vec3 r = normalize(2.0 * n * dot(n,l) - l);\n    //float phong = clamp(dot(r,v), 0.5, 1.);\n\n    float phong = 0.;\n    float dl = 0.;\n    float shadowDist = length(lightPos-p) - d;\n    if(shadowDist > 0.) {\n        dif *= 0.2;\n    } else {\n        vec3 b = normalize(l + v);\n    phong = clamp(dot(b,n), 0., 1.);\n    phong = pow(phong, 300.);\n    \n    float lightAngle = dot(normalize(lightPos - ro), normalize(p - ro));\n    if (lightAngle > 0.999) dl += pow(lightAngle, 10000.);\n    }\n    \n    //phong=0.;\n    \n    vec3 col = vec3(dif) + vec3(phong);\n    col *= (1./(length(lightPos - p)));\n    col += dl;\n    col *= lightCol;\n    col = pow(col, vec3(.4));\t// gamma correction\n    \n    return col;\n}\n\nvec3 GetIllumination(vec3 p, vec3 n, vec3 ro){\n    float zLightTranslation = (iMouse.x - iResolution.x/2.)/iResolution.x *200.;\n    float LightRadius = sin(iTime/4.) * .5 + .6;\n    \n    //green\n    vec3 greenLightPos = vec3(LightRadius*cos(iTime),\n                                LightRadius*sin(iTime)+1.1,\n                                sin(iTime));\n    greenLightPos.z += zLightTranslation;\n    vec3 greenLightCol = vec3(0,1,0);\n    //red\n    vec3 redLightPos = vec3(LightRadius*cos(iTime + 2.0943),\n                                LightRadius*sin(iTime + 2.0943)+1.1,\n                                sin(iTime + 2.0943));\n    redLightPos.z += zLightTranslation;\n    vec3 redLightCol = vec3(1,0,0);\n    //blue\n    vec3 blueLightPos = vec3(LightRadius*cos(iTime + 4.1887),\n                                LightRadius*sin(iTime + 4.1887)+1.1,\n                                sin(iTime + 4.1887));\n    blueLightPos.z += zLightTranslation;\n    vec3 blueLightCol = vec3(0,0,1);\n    \n    vec3 col = vec3(0);\n    col += GetLight(p, n, ro, greenLightPos, greenLightCol);\n    col += GetLight(p, n, ro, redLightPos, redLightCol);    \n    col += GetLight(p, n, ro, blueLightPos, blueLightCol);\n    \n    return col;\n}\n\n\nfloat Toonify(float x){\n    if (x < 0.25) {\n        x = 0.;\n    } else if (x < 0.5) {\n        x = .25;\n    } else if (x < 0.75) {\n        x = .5;\n    } else if (x < 0.9) {\n        x = .75;\n    } else {x = 1.;}\n    return x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0., 0.2, -2.);\n    vec3 rd = vec3(uv.x, uv.y, 1);\n    rd.yz *= Rot(-.2);\n    rd = normalize(rd);\n\n    vec2 ray = RayMarch(ro, rd, MAX_DEPTH);\n    float d = ray.x;\n    float hit = ray.y;\n    vec3 p = ro + rd * d;\n    vec3 n = GetNormal(p);\n    col += GetIllumination(p, n, ro);\n    \n    if (hit < .5){\n        vec3 idealReflexion = 2.0 * n * dot(n, normalize(-rd)) - normalize(-rd);\n        float d2 = RayMarch(p, idealReflexion, MAX_DEPTH).x;\n        vec3 p2 = p + idealReflexion * d2;\n        vec3 n2 = GetNormal(p2);\n        vec3 col2 = GetIllumination(p2, n2, ro);\n        col = mix(col, col2, .2);\n    }\n    \n    bool toon = false;\n    if (toon){ \n        col.x = Toonify(col.x);\n        col.y = Toonify(col.y);\n        col.z = Toonify(col.z);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}