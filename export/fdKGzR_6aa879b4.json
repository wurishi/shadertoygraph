{"ver":"0.1","info":{"id":"fdKGzR","date":"1663188311","viewed":108,"name":"Osciloscope","username":"rattlesneker","description":"Osciloscope","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["osciloscope","lissajousknot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by rattlesneker (vWvAvWvy)\n\nconst float M_PI = 3.14159265358979323846264338327950288;\nconst float PREC = 0.01;\n\nfloat sqr(float x)\n{\n    return x * x;\n}\n\nfloat sinRep(float time, float phase)\n{\n    return 0.5 * (sin(time + phase) + 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime + 110.0;\n    \n    ivec2 icrd = ivec2(2.0 * fragCoord - iResolution.xy);\n    vec2 crd = vec2(icrd) / iResolution.xy;\n        \n    float A = 0.5;\n    float a = 2.0;\n    \n    float B = 0.8;\n    float b = 5.0 * sinRep(time / 50.0, 0.5) + 1.0;\n    \n    float px = 0.0;\n    float py = M_PI / 2.0 * sinRep(time / 2.0, 0.0); \n    \n    //float acosX = acos(crd.x / A);\n    float acosY = acos(crd.y / B);\n   \n    /*\n    vec3 col = vec3(0.0); // vec3(crd.x, crd.x + crd.y, crd.y);\n    \n    for (int i = 0; i < int(a + 0.5); i++)\n    {\n        vec2 rootX = vec2(acosX + 2.0*M_PI*float(i), 2.0*M_PI*float(i+1) - acosX);        \n        vec2 rhsY = B * cos((b / a) * (rootX + px) - py);\n\n        if (abs(crd.y - rhsY.x) < PREC)\n        {\n            col = vec3((rootX.x) / (2.0*M_PI*a));\n        }\n     \n        if (abs(crd.y - rhsY.y) < PREC)\n        {\n            col = vec3((rootX.y) / (2.0*M_PI*a));\n        }\n    }\n    */\n    \n\n    float t = -1.0;\n    float resDist = PREC;\n    int maxB = int(b + 0.5);\n    maxB = 10;\n    \n    float maxAlpha = 0.0;\n    for (int i = 0; i < maxB; i++)\n    {       \n        vec2 rootY = vec2(acosY + 2.0*M_PI*float(i), 2.0*M_PI*float(i+1) - acosY);\n        vec2 rhsX = A * cos((a / b) * (rootY + py) - px);\n        \n        float dist = abs(crd.x - rhsX.x);\n        if (dist < PREC)\n        {\n            t = (rootY.x) / (2.0*M_PI*float(maxB));\n            resDist = dist;\n            float alpha = t * ((PREC - resDist/4.0) / PREC);\n            if (alpha > maxAlpha)\n            {\n                maxAlpha = alpha;\n            }\n        }\n        dist = abs(crd.x - rhsX.y);\n        if (dist < PREC)\n        {\n            t = (rootY.y) / (2.0*M_PI*float(maxB));\n            resDist = dist;\n            float alpha = t * ((PREC - resDist/4.0) / PREC);\n            if (alpha > maxAlpha)\n            {\n                maxAlpha = alpha;\n            }\n        }\n    }\n    \n    vec4 knotCol = vec4(1.0, 1.0, 1.0, 0.0);\n    if (t > 0.0)\n    {\n        knotCol.w = maxAlpha;\n    }\n    \n    // Lines\n    vec4 bgCol = vec4(0.02, 0.01, 0.1, 1.0);\n    if (abs(icrd.x) % int(iResolution.x / 5.0) < 2 ||\n        abs(icrd.y) % int(iResolution.y / 5.0) < 2)\n    {\n        bgCol = vec4(0.6, 0.6, 0.6, 1.0);\n    }\n    \n    vec3 col = mix(bgCol.xyz, knotCol.xyz, knotCol.w);  \n    \n    if (abs(t - sinRep(time / 5.0, 0.0)) < PREC)\n    {\n        col = vec3(sinRep(time, M_PI / 2.0), sinRep(time, M_PI), sinRep(time, 3.0 * M_PI / 2.0));\n    }\n    \n    \n    fragColor = vec4(col, 0.5);\n}\n","name":"Image","description":"","type":"image"}]}