{"ver":"0.1","info":{"id":"ssjczw","date":"1646999510","viewed":75,"name":"distance to edge voronoi test","username":"gurpreetsingh_exe","description":"voronoi distance to edge","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898f, 78.233f))) * 43758.5453f);\n}\n\nvec2 rand2(vec2 uv) {\n    return vec2(rand(uv), rand(uv + vec2(32.2498f, 2493.0483f)));\n}\n\nfloat smooth_min(float a, float b, float k) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nvec3 voronoi(vec2 uv) {\n    vec2 ig = fract(uv);\n    vec2 id = floor(uv);\n\n    float d1 = 8.0f;\n    vec2 offs = vec2(0.0f);\n    vec2 p1 = vec2(0.0f);\n    vec2 tiles = vec2(1.0f);\n    for (int i = -1; i <= 1; ++i) {\n        for (int j = -1; j <= 1; ++j) {\n            vec2 offset = vec2(i, j);\n            vec2 dp = rand2(id + offset) + offset;\n            vec2 r = ig - dp;\n//            r = abs(r);\n//            float d = max(r.x, r.y);\n\n            float d = length(r);\n            if (d < d1) {\n                d1 = d;\n                p1 = dp;\n            }\n        }\n    }\n\n    float dd = 8.0f;\n    for (int i = -1; i <= 1; ++i) {\n        for (int j = -1; j <= 1; ++j) {\n                vec2 offset = vec2(i, j);\n                vec2 dp = rand2(id + offset) + offset;\n                float d = dot(ig - (p1 + dp) * 0.5f, normalize(p1 - dp));\n                dd = smooth_min(dd, d, 0.5);\n        }\n    }\n\n    return vec3(p1, dd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec3 col = vec3(vec3(pow(clamp(voronoi(uv * 5.0f).z, 0.0, 1.0), 0.4545)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}