{"ver":"0.1","info":{"id":"csfcz8","date":"1686559945","viewed":78,"name":"Perception","username":"dragan","description":"Learning by challenge. First challenge...","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["perception"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI_H 3.14159265359\n\nmat2 rotate(float a) { \n    float s = sin(a), c = cos(a); \n    return mat2(c, s, -s, c); \n}\n\nfloat point(vec2 uv) {\n    return smoothstep(0., 0., 0.05 - length(uv));\n}\n   \nbool line(vec2 p, float angle) {\n    float thickness = 8.0 / iResolution.x ;\n    p *= rotate(angle);\n    return  p.x > -1.05 && p.x < 1.05 &&\n            p.y > -thickness && p.y < thickness;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy * 2.;\n    uv -= 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    float dist = 0.96;\n    float distance = dist - length(uv);\n    float color = float(smoothstep(0.0, 0.0, distance));\n    color *= smoothstep(0.012, 0.01, distance);\n    uv *= 1.1;\n    int count = 8;\n    float sections = M_PI_H / float(count);\n    int step = int(1. + floor(iTime * sections * 0.8));\n    if(step > count) step = count;\n    float time = M_PI_H / 2. + iTime * 3.;\n    float c[8] = float[8]( 0., 4., 2., 6., 1., 5., 3., 7. );\n    for(int idx = 0; idx < step; ++idx) {\n        vec2 uv1 = uv;\n        float position = sections * c[idx];\n        uv1 += vec2(cos(position) * sin(time + position), sin(position) * sin(time + position));\n        color += point(uv1);\n        if(line(uv, position) && (iTime < 26. || iTime > 31. && iTime < 37.)) {\n            color += 1.;\n        }\n    }\n    \n    fragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}