{"ver":"0.1","info":{"id":"4XBBDK","date":"1729932822","viewed":61,"name":"uniform random point in circle","username":"yunhai","description":"rencently I read a probabilistic proof about thisï¼Œand now have a check:)\nthe random algorithm is in common tab","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 C)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = C/iResolution.xy;\n    //O=texture(iChannel0,uv); //can not distinguish intensity when value over 1\n    O = texture(iChannel0,uv) * 9./sqrt(float(iFrame));//from fabrice's advice\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PIXW (2.3/iResolution.y)\n#define circleR 1.\n#define circleW (5.*PIXW)\n#define pointW (1.*PIXW)\nconst float itr=500.;//could be about 2000 at my device\nvoid mainImage( out vec4 O, in vec2 C)\n{\n    vec2 uv = (C-.5*iResolution.xy)*PIXW;\n    uv.x=mod(uv.x,iResolution.x*PIXW*.5);\n    uv.x-=iResolution.x*PIXW*.25;\n    float id=floor(C.x/iResolution.x*2.);\n    if(iFrame==0)\n    {\n        O =vec4(min(\n        smoothstep(circleR,circleR+circleW,length(uv)),\n        smoothstep(circleR+circleW,circleR,length(uv))\n        ));\n        return;\n    }\n    O=texture(iChannel0,C/iResolution.xy);\n    for(float i=0.;i<itr-.1;i++)\n    {\n        vec2 p;\n        //float seed1=iTime*itr+i; //fault:have many repeat point \n        float seed2=iTime*itr/(i+.1)+i;\n        //float seed3=iTime*itr*hash11(iTime+1000.)+i;\n        if(abs(id-0.)<0.01)\n        {\n            p=getRandomPointInCircle1(circleR,seed2);\n        }\n        else\n        {\n            p=getRandomPointInCircle2(circleR,seed2);\n        }\n        \n        O+=.3*smoothstep(pointW,0.,length(p-uv));\n    }\n\n\n    \n    \n        \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float PI=3.14159265;\n//from https://www.shadertoy.com/view/4djSRW\n//not good quality when p is large\nfloat _hash11(float p)\n{//[obsolete-v1]\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n//refs https://www.shadertoy.com/view/mssXz7\nfloat hash11(float p1)\n{\n    vec2 p2 = vec2(p1*1.231,p1*3.613);\n\tvec3 p3  = fract(vec3(p2.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 getRandomPointInCircle1(float r,float t)\n{\n    float a=hash11(t*2.);\n    float b=hash11(t*2.+1.);\n    float R=a*r;\n    float A=2.*PI*b;\n    return R*vec2(cos(A),sin(A));\n}\n\nvec2 _getRandomPointInCircle2(float r,float t)\n{//[obsolete-v1]\n    float a=hash11(t*2.);\n    float b=hash11(t*2.+1.);\n    float R=sqrt(a)*r;\n    float A=2.*PI*b;\n    return R*vec2(cos(A),sin(A));\n}\n//uniform distribution\nvec2 getRandomPointInCircle2(float r,float t)\n{\n    float a=hash11(t);\n    float b=hash11(a*t);//better than t+1 as input, faster to fill holes\n    float R=sqrt(a)*r;\n    float A=2.*PI*b;\n    return R*vec2(cos(A),sin(A));\n}","name":"Common","description":"","type":"common"}]}