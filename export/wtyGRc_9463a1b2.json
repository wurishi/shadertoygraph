{"ver":"0.1","info":{"id":"wtyGRc","date":"1579933962","viewed":112,"name":"Integer Rotation","username":"JohnShadow","description":"Integer Rotation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle","rotation","integer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\nfloat square(float x)\n{\n    return abs(mod(x, 2.0) - 1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = (iResolution.x / (iResolution.y * max(iResolution.x, iResolution.y)));\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) * ratio;\n    \n    float radius =\tfloor(min(7.0*square(iTime * 0.1), 6.0));\n    \n    uv = floor(uv * 20.0);\n    \n    float sdist = length(uv) - radius;\n    float dot1 = round(sdist);\n\t\n    //pit here is 4.\n    float k = max(4.0 * (radius - 1.0), 1.0);\n    float angle = mod(k * iTime * 0.25, 2.0 * k) - k;\n    float phi = pi * (angle / k);\n    vec3 col1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    // Time varying pixel color\n    vec3 col = col1 * (dot1 > 0.0 ? 0.0 : 0.35);\n\t\n    for(float i = 0.0; i < radius + 1.0; ++i)\n    {\n        vec2 uvn = uv + round(i * vec2(sin(phi), cos(phi)));\n    \tfloat d1 = length(uvn) - 1.0;\n    \tif(d1 < 0.0)\n    \t\tcol = vec3(i/radius);\n    }\n\t// Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}