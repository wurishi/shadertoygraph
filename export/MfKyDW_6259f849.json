{"ver":"0.1","info":{"id":"MfKyDW","date":"1731913188","viewed":88,"name":"Interactive Zoom Grid","username":"azeitmuth","description":"Interactive Zoom Grid","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["grid","interactive","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy code\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized coordinates (0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Mouse interaction: interpret mouse.x and mouse.y as drag values\n    float zoomSpeed = 5.0; // Sensitivity of zoom interaction\n    float dragX = iMouse.z > 0.0 ? iMouse.x / iResolution.x : 0.0;\n    float dragY = iMouse.z > 0.0 ? iMouse.y / iResolution.y : 0.0;\n\n    // Adjust the base pixel size dynamically with user input\n    float basePixelSize = 5.0 + 100.0 * dragX - 50.0 * dragY;\n    basePixelSize = clamp(basePixelSize, 1.0, 200.0);\n\n    // Oscillate pixel size smoothly over time when no interaction\n    float animationFactor = 0.5 + 0.5 * sin(iTime);\n    float pixelSize = mix(10.0, basePixelSize, animationFactor);\n\n    // Number of blocks in both axes\n    vec2 gridSize = iResolution.xy / pixelSize;\n\n    // Snap the UV coordinates to the grid\n    vec2 snappedUv = floor(uv * gridSize) / gridSize;\n\n    // Checkerboard pattern\n    float checker = mod(floor(snappedUv.x * gridSize.x) + floor(snappedUv.y * gridSize.y), 2.0);\n\n    // Dynamic color based on checker pattern\n    vec3 color = mix(vec3(0.1, 0.5, 0.8), vec3(0.8, 0.8, 0.2), checker);\n    //color *= 0.7 + 0.3 * sin(iTime * 3.0); // Pulsating effect\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}