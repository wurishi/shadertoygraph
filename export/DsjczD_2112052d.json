{"ver":"0.1","info":{"id":"DsjczD","date":"1687478584","viewed":37,"name":"fractal attempt","username":"boytoy","description":"i was trying to make something like a sierpinski fractal (and failed)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","exploring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool inShape(vec2 uv){\n    uv = abs(uv);\n    \n    bool in_outer = (max(uv.x,uv.y)<1.);\n    bool out_inner = (max(uv.x,uv.y)>0.5);\n    \n    //bool in_outer = (length(uv)<1.);\n    //bool out_inner = (length(uv)>0.5);\n    return in_outer && out_inner;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 UV = fragCoord/iResolution.xy;\n    UV = 2.*UV-1.;\n    UV.x /= iResolution.y/iResolution.x;\n    vec2 uv = UV;\n    uv *=2.;\n    \n    \n    vec3 color = vec3(0.);\n    \n    for(float i = 0.; i<=6. ;i++)\n    {\n        float sig = 2.*mod(i,2.) - 1.;\n        if(inShape(uv)){\n            color += sig;\n        }\n        uv = fract(uv+0.01*fbm(fbm(uv+fbm(uv)*vec2(-1.,1.))*vec2(1.,0.)+iTime))*2.0-1.;       \n    }\n    color *= -1.;\n    \n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define OCTAVES 6\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}","name":"Common","description":"","type":"common"}]}