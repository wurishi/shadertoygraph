{"ver":"0.1","info":{"id":"msK3Rm","date":"1678354047","viewed":230,"name":"Fork 2D Clouds reverland 030","username":"reverland","description":"Used in 2 different demos:\nhttp://www.pouet.net/prod.php?which=66590\nand\nhttp://www.pouet.net/prod.php?which=68483","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","clouds","fbm"],"hasliked":0,"parentid":"4tdSWr","parentname":"2D Clouds"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// combine\n\n// https://www.shadertoy.com/view/4tdSWr\n// https://www.shadertoy.com/view/lslGR8\n\n\nconst float cloudscale = 1.1;\nconst float speed = 0.01;\nconst float clouddark = 0.5;\nconst float cloudlight = 0.3;\nconst float cloudcover = 0.2;\nconst float cloudalpha = 8.0;\nconst float skytint = 0.35;\nconst vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skycolour2 = vec3(1.0, 0.8, 0.5);\n\nconst mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\nvec2 hash( vec2 p ) {\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\tvec2 i = floor(p + (p.x+p.y)*K1);\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\t\n}\n\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 0.1;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn = m * n;\n\t\tamplitude *= 0.4;\n\t}\n\treturn total;\n}\n\n#define BLADES 110\n\nvec3 rotateX(float a, vec3 v)\n{\n\treturn vec3(v.x, cos(a) * v.y + sin(a) * v.z, cos(a) * v.z - sin(a) * v.y);\n}\n\nvec3 rotateY(float a, vec3 v)\n{\n\treturn vec3(cos(a) * v.x + sin(a) * v.z, v.y, cos(a) * v.z - sin(a) * v.x);\n}\n\nvec3 rotateZ(float a, vec3 v)\n{\n\treturn vec3(cos(a) * v.x + sin(a) * v.y, cos(a) * v.y - sin(a) * v.x, v.z);\n}\n\nvec4 grass(vec2 p, float x)\n{\n\tfloat s = mix(0.58, 2.0, 0.5 + sin(x * 12.0) * 0.5);\n\tp.x += pow(1.0 + p.y, 2.0) * 0.1 * cos(x * 0.5 + iTime);\n\tp.x *= s;\n\tp.y = (1.0 + p.y) * s - 1.0;\n\tfloat m = 1.0 - smoothstep(0.0, clamp(1.0 - p.y * 1.5, 0.01, 0.6) * 0.2 * s, pow(abs(p.x) * 19.0, 1.5) + p.y - 0.6);\n\treturn vec4(mix(vec3(0.05, 0.1, 0.0) * 0.8, vec3(0.33, 0.55, 0.11), (p.y + 1.0) * 0.5 + abs(p.x)), m * smoothstep(-1.0, -0.9, p.y));\n}\n\nvec3 cloud(in vec2 fragCoord ) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);    \n    float time = iTime * speed;\n    float q = fbm(uv * cloudscale * 0.5);\n    \n    //ridged noise shape\n\tfloat r = 0.0;\n\tuv *= cloudscale;\n    uv -= q - time;\n    float weight = 0.8;\n    for (int i=0; i<8; i++){\n\t\tr += abs(weight*noise( uv ));\n        uv = m*uv + time;\n\t\tweight *= 0.7;\n    }\n    \n    //noise shape\n\tfloat f = 0.0;\n    uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\tuv *= cloudscale;\n    uv -= q - time;\n    weight = 0.7;\n    for (int i=0; i<8; i++){\n\t\tf += weight*noise( uv );\n        uv = m*uv + time;\n\t\tweight *= 0.6;\n    }\n    \n    f *= r + f;\n    \n    //noise colour\n    float c = 0.0;\n    time = iTime * speed * 2.0;\n    uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\tuv *= cloudscale*2.0;\n    uv -= q - time;\n    weight = 0.4;\n    for (int i=0; i<7; i++){\n\t\tc += weight*noise( uv );\n        uv = m*uv + time;\n\t\tweight *= 0.6;\n    }\n    \n    //noise ridge colour\n    float c1 = 0.0;\n    time = iTime * speed * 3.0;\n    uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\tuv *= cloudscale*3.0;\n    uv -= q - time;\n    weight = 0.4;\n    for (int i=0; i<7; i++){\n\t\tc1 += abs(weight*noise( uv ));\n        uv = m*uv + time;\n\t\tweight *= 0.6;\n    }\n\t\n    c += c1;\n    \n    vec3 skycolour = mix(skycolour2, skycolour1, p.y);\n    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight*c), 0.0, 1.0);\n   \n    f = cloudcover + cloudalpha*f*r;\n    \n    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n    \n\treturn result;\n}\n\n\nvec3 backg(vec3 ro, vec3 rd, vec2 cord)\n{\n\tfloat t = (-1.0 - ro.y) / rd.y;\n\tvec2 tc = ro.xz + rd.xz * t;\n\tvec3 horiz = vec3(sin(iTime * 0.015) * 0.5, 0.2, 0.2) * 0.7;\n\tvec3 sky = cloud(cord);\n\tvec3 ground = mix(horiz, vec3(0.04, 0.07, 0.0) * 0.6, pow(max(0.0, dot(rd, vec3(0.0, -1.0, 0.0))), 0.2));\n\treturn mix(sky, ground, step(0.0, t));\n}\n\n// some simple noise just to break up the hideous banding\nfloat dither()\n{\n\treturn fract(gl_FragCoord.x * 0.482635532 + gl_FragCoord.y * 0.1353412 + iTime * 100.0) * 0.008;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ct = vec3(0.0, 2.0, 9.0);\n\tvec3 cp = rotateY(cos(iTime * 0.2) * 0.4, vec3(0.0, 0.6, 0.0));\n\tvec3 cw = normalize(cp - ct);\n\tvec3 cu = normalize(cross(cw, vec3(0.0, 1.0, 0.0)));\n\tvec3 cv = normalize(cross(cu, cw));\n\t\n\tmat3 rm = mat3(cu, cv, cw);\n\t\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - vec2(1.0);\n\tvec2 t = uv;\n\tt.x *= iResolution.x / iResolution.y;\n\t\n\tvec3 ro = cp, rd = rotateY(sin(iTime * 0.8) * 0.1,\n\t\t\t\t\t\t\t   rm * rotateZ(sin(iTime * 0.15) * 0.1, vec3(t, -1.3)));\n\t\n\tvec3 fcol = backg(ro, rd, fragCoord);\n    \n\tfor(int i = 0; i < BLADES; i += 1)\n\t{\n\t\tfloat z = -(float(BLADES - i) * 0.1 + 1.0);\n\t\tvec4 pln = vec4(0.0, 0.0, -1.0, z);\n\t\tfloat t = (pln.w - dot(pln.xyz, ro)) / dot(pln.xyz, rd);\n\t\tvec2 tc = ro.xy + rd.xy * t;\n\t\t\n\t\ttc.x += cos(float(i) * 3.0) * 4.0;\n\t\t\n\t\tfloat cell = floor(tc.x);\n\t\t\n\t\ttc.x = (tc.x - cell) - 0.2;\n\t\t\n\t\tvec4 c = grass(tc, float(i) + cell * 10.0);\n\t\t\n\t\tfcol = mix(fcol, c.rgb, step(0.0, t) * c.w);\n\t}\n\t\n\tfcol = pow(fcol * 0.5, vec3(0.8));\n\t\n\t\n\t// iÃ±igo quilez's great vigneting effect!\n\tvec2 q = (uv + vec2(1.0)) * 0.5;\n\tfcol *= 0.2 + 0.8*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n\t\n\tfragColor.rgb = fcol * 1.8 + vec3(dither());\n\tfragColor.a = 1.0;\n}\n\n// -----------------------------------------------\n\n","name":"Image","description":"","type":"image"}]}