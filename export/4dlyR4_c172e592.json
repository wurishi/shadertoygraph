{"ver":"0.1","info":{"id":"4dlyR4","date":"1487250433","viewed":168,"name":"Playing with water","username":"andunai","description":"One of my first shaders. Water based on sinusoide with additional distortion.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float amplitude = 5.0;\nfloat moveSpeed = 150.0;\nfloat waveSpeed = 2.0;\nfloat width = 40.0;\n\nvec2 distort(in vec2 point) {\n    float shift = iTime * 4.0;\n\n    // gl_FragColor = texture2D(uSampler, pixelCoord * pixelSize);\n\n    return vec2(\n        point.x + sin(point.y * 0.0125 + shift) * width / 4.0,\n        point.y + cos(point.x * 0.0125 + shift) * width / 8.0\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Current position in pixels\n    float shift = sin(iTime * 4.0);\n\n//    float border = (iResolution.y - amplitude) - sin((fragCoord.x + iTime) / (speed * width)) * amplitude * shift;\n    \n    fragCoord = distort(fragCoord);\n    // fragColor = vec4(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y, 0.0, 1.0);\n    // return;\n    \n    float border = iResolution.y / 2.0;\n    border = border + sin((fragCoord.x + iTime * moveSpeed) / width) * amplitude * sin(iTime * waveSpeed);\n\n    if (fragCoord.y < border) {\n        //fragColor = vec4(0.0, 0.25, max(0.0, border / (fragCoord.y * 2.0)), 0.5);\n        fragColor = vec4(0.0, (fragCoord.y / border), 0.75, 0.0);\n    } else {\n        // discard;\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        // gl_FragColor = vec4(abs(sin(vTextureCoord.x + time)), abs(sin(vTextureCoord.y + time)), 0, 1);\n    }\n}\n","name":"Image","description":"","type":"image"}]}