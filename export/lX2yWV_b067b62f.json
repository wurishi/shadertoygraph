{"ver":"0.1","info":{"id":"lX2yWV","date":"1727763288","viewed":55,"name":"Triangle wave magic","username":"Vectornaut","description":"Summing sine waves to get a triangle wave. It's magic! If the wave image and the sound get out of sync, you can sync them again by pressing rewind while the shader is playing. Change AMP in the Sound tab to adjust volume.","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["additivesynthesis"],"hasliked":0,"parentid":"l32yWV","parentname":"Square wave magic"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TAU = 6.283185307179586;\nconst float FREQ = 120.; // fundamental frequency, in hertz\nconst float LOOP_TIME = 12.;\nconst float N_HARMONICS = 30.;\nconst float AMP = 1.;\n\nvec2 sound(float time) {\n    float s = mod(time, LOOP_TIME) / LOOP_TIME;\n    float cutoff = 1.5 + 2.*N_HARMONICS * s*(0.25 + 0.75*s*s);\n    float wave = 0.;\n    float sgn = 1.;\n    for (float k = 1.; k < cutoff; k += 2.) {\n        wave += sgn * sin(TAU * FREQ * k * time) / (k*k);\n        sgn *= -1.;\n    }\n    return vec2(32./(TAU*TAU) * AMP * wave);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 u = vec2(1./FREQ, 2.) * (2.*fragCoord - vec2(0., iResolution.y)) / iResolution.xy;\n    \n    vec3 color;\n    if (u.y < sound(ceil(FREQ*iTime)/FREQ + u.x).x) {\n        color = vec3(0.8, 1.0, 0.9);\n    } else {\n        color = vec3(0.2, 0.3, 0.4);\n    }\n    \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float TAU = 6.283185307179586;\nconst float FREQ = 120.; // fundamental frequency, in hertz\nconst float LOOP_TIME = 12.;\nconst float N_HARMONICS = 30.;\nconst float AMP = 0.15;\n\nvec2 mainSound(int samp, float time) {\n    float s = mod(time, LOOP_TIME) / LOOP_TIME;\n    float cutoff = 1.5 + 2.*N_HARMONICS * s*(0.25 + 0.75*s*s);\n    float wave = 0.;\n    float sgn = 1.;\n    for (float k = 1.; k < cutoff; k += 2.) {\n        wave += sgn * sin(TAU * FREQ * k * time) / (k*k);\n        sgn *= -1.;\n    }\n    return vec2(32./(TAU*TAU) * AMP * wave);\n}","name":"Sound","description":"","type":"sound"}]}