{"ver":"0.1","info":{"id":"lsfBDS","date":"1497798285","viewed":738,"name":"Tutorial Rectangle","username":"beemerwt","description":"A simple rectangle. Comments in code.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","tutorial","beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Created by Brandon Woolworth on 6/18/2017 */\n\n/* Some simple precompilation stuff, so we don't have to recreate it later. */\n#define rgb(r,g,b) vec3(r/255., g/255., b/255.)\n#define desiredColor rgb(255., 0., 0.)\n#define grayColor rgb(144., 144., 144.)\n\n/**\n * Draw a rectangle\n * @param vec2 uv      - Current position of the fragCoord (x and y) \n * @param vec2 pos     - Desired position to draw the center of the rectangle\n * @param float width  - Desired width of the rectangle stemming from the center\n * @param float height - Desired height of the rectangle stemming from the center\n * @param vec3 color   - Desired color of the rectangle\n */\nvec4 rectangle(vec2 uv, vec2 pos, float width, float height, vec3 color) {\n\tfloat t = 0.0;\n    if ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\tt = 1.0;\n\t}\n\treturn vec4(color, t);\n}\n\n/**\n * Main function\n * @param vec4 fragColor - The \"out\" result of the color that this fragment is supposed to render as.\n * @param vec2 fragCoord - The \"in\" position of the current fragment.\n *\n * Essentially, you want to check the fragCoord for a position that is within bounds of where you want to draw a special shape.\n * Rectangle function checks the uv against the desired rectangle coordinates.\n *\n * A fragment shader file, such as this, will go through all of the changing pixels and check it within the mainImage function,\n *   then display it to the screen. Keep these functions small, because it will lag a TON--especially on browsers--if it must\n *   do a lot of calculation.\n */\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    \n    // Create a rectangle at the center screen with width 2/4 the screen and size 2/4 screen\n    vec2 desiredPos = iResolution.xy * 0.5;\n    float width = iResolution.x  * 0.25;\n    float height = width;\n    vec4 rectOne = rectangle(uv, desiredPos, width, height, desiredColor);\n    \n    // Create a rectangle to show in the background of the screen\n    vec2 fullScreen = vec2(0., 0.);\n    float fullWidth = iResolution.x;\n    float fullHeight = iResolution.y;\n    vec4 backgroundRect = rectangle(uv, fullScreen, fullWidth, fullHeight, grayColor);\n    \n    // Divide the colors accordingly.\n    // Keeps the backgroundRect separate from rectOne, while also producing a color to set fragColor to.\n\tfragColor = mix(backgroundRect, rectOne, rectOne.a);\n}","name":"Image","description":"","type":"image"}]}