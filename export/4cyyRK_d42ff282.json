{"ver":"0.1","info":{"id":"4cyyRK","date":"1732055327","viewed":22,"name":"Voronoi Cell Study","username":"kukovisuals","description":"Studying the voronoi grid how the has works with the cells","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoigrid","voronoihash","voronoicell"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash function to jitter cell centers\nvec2 vhash(vec2 p, vec2 offset) {\n    mat2 m = mat2(\n        127.1, 311.7,\n        269.5, 183.3\n    );\n    p = fract(sin(p * m) * 46839.32);\n    //p *= offset;\n    return 0.5 + 0.5 * vec2(\n        sin(p.x * offset.x),\n        cos(p.y * offset.y)\n    );\n}\n\n// Main fragment shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y;\n    \n    float girdSize = 2.0;\n    int numberCells = int(girdSize);\n    // Parameters\n    vec2 cellDensity = vec2(girdSize); // Grid size\n    vec2 g = floor(uv * cellDensity);  // Grid position\n\n    // Visualization setup\n    vec3 color = vec3(0.0); // Background color\n\n    // Draw the grid lines\n    vec2 gridUV = fract(uv * cellDensity);\n    float gridLineThickness = 0.013;\n    if (gridUV.x < gridLineThickness || gridUV.y < gridLineThickness ||\n        gridUV.x > 1.0 - gridLineThickness || gridUV.y > 1.0 - gridLineThickness) {\n        color = vec3(0.5, 0.5, 0.5); // Gray grid lines\n    }\n\n    // Loop through neighboring cells (-1 to 1 in each direction)\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 lattice = vec2(x, y);                           // Neighboring cell position\n            vec2 offset = vhash(lattice + g, vec2(iTime * 0.5));         // Jittered offset\n            vec2 cellCenter = (g + lattice + offset) / cellDensity;  // Jittered center in normalized space\n\n            // Check if we're close to the jittered center to draw a dot\n            float dist = length(uv - cellCenter);\n            if (dist < 0.03) { // Very small range for tiny dots\n                color = vec3(1.0, 0.0, 0.0); // Red dot for jittered center\n            }\n        }\n    }\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}