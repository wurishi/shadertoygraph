{"ver":"0.1","info":{"id":"stByzy","date":"1652956631","viewed":117,"name":"Sphere Volume Rendering","username":"ghd3079","description":"Volume rendering using a sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["volume"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphIntersection(vec3 spherePos, float radius, vec3 rayPos, vec3 rayDir)\n{\n    vec3 oc = spherePos - rayPos;\n    float b = dot(rayDir, oc);\n    float c = dot(oc, oc);\n    float det = b*b - c;\n    if(det < 0.0)\n    {\n        return -1.0;\n    }\n    float t = -b - sqrt(det);\n    return t;\n}\n\nvec3 background(vec2 uv)\n{\n    uv = (uv + 1.0) / 2.0;\n    vec3 col = vec3(0.5, 0.3, 0.7);\n    return col * uv.y;\n}\n\nfloat getDensity(vec3 spherePos, float radius, vec3 rayPos)\n{\n    float dist = length(spherePos - rayPos);\n    return dist <= radius ? 1.0 : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 spherePos = vec3(0, 0, 0);\n    float radius = 0.5;\n    \n    // camera and ray\n    vec3 camPos = vec3(cos(iTime), 0, sin(iTime));\n    vec3 rayPos = camPos;\n    vec3 up = vec3(0, 1, 0);\n    vec3 front = normalize(-camPos);\n    vec3 right = normalize(cross(up, front));\n    up = normalize(cross(front, right));\n    vec3 rayDir = normalize(front + uv.x * right + uv.y * up);\n    \n    int step = 1024;\n    float delta = 0.01;\n    vec3 col = vec3(0.0);\n    float accDensity = 0.0;\n    for(int i = 0; i < step; ++i)\n    {\n        float density = getDensity(spherePos, radius, rayPos);\n        accDensity += density * delta;\n        col += exp(-accDensity) * (1.0 - exp(-density * delta));\n        rayPos = camPos + delta * float(i) * rayDir;\n    }\n    \n    // colorization\n    if(accDensity == 0.0)\n    {\n        col = background(uv);\n    }\n    else\n    {\n        float t = sphIntersection(spherePos, radius, camPos, rayDir);\n        vec3 hitPoint = camPos + t * rayDir;\n        vec3 dir = normalize(hitPoint - spherePos);\n        dir = (dir + vec3(1.0)) / 2.0;\n        col *= dir;\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}