{"ver":"0.1","info":{"id":"flfSzs","date":"1626283895","viewed":265,"name":"Analog Fractals","username":"incription","description":"Two cameras are transformed in screen space and painted every frame to create a fractal. Use the keys 1 - 2 and 3 - 4 to control the rotation & scale, and offset of each camera.  ","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n\n    // Output to screen\n    fragColor = vec4(col * col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159\n#define SIZE 100.\n//Lower for more detail (more iterations)\n#define delta .8\n//rotates, scales, then translates\nvec2 trot(vec2 p, vec4 t) { //vec4 rot scale, tx, ty //theta in degrees!!\n    vec2 d = iResolution.xy / 2.;\n    p -= d;\n    \n    float theta = t.x * (PI / 180.);\n    p *= mat2(cos(theta), sin(theta), //rotate around point\n             -sin(theta), cos(theta));\n    \n    p /= t.y;\n    p += t.zw * d *2.;\n    return p += d; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 t1 = texelFetch(iChannel1, ivec2(0, 0), 0);\n    vec4 t2 = texelFetch(iChannel1, ivec2(0, 1), 0);\n    \n    vec3 cam1 = texelFetch(iChannel0, ivec2( trot( fragCoord, t1.zwxy ) ), 0).rgb * delta;\n    vec3 cam2 = texelFetch(iChannel0, ivec2( trot( fragCoord, t2.zwxy ) ), 0).rgb * delta;\n    \n    vec3 col = cam1 + cam2;\n    \n    vec3 img = vec3(0.114,0.682,0.969)*0.1; //original image\n    \n    fragColor = vec4(col + img, 0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define KEY_ONE 49\n#define KEY_TWO 50\n#define KEY_THREE 51\n#define KEY_FOUR 52\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    \n    vec4 pre = texelFetch( iChannel0, ivec2(0, 0), 0 );\n    vec2 mouse = ( iMouse.xy / iResolution.xy ) - .5;\n    vec4 dat = vec4(\n        mix(pre.xy, mouse, texelFetch( iChannel1, ivec2(KEY_ONE,0) , 0 ).x),\n        mix(pre.zw, vec2(360., 2.) * mouse, texelFetch( iChannel1, ivec2(KEY_TWO,0) , 0 ).x)\n        );\n        \n    vec4 pre2 = texelFetch( iChannel0, ivec2(0, 1), 0 );\n    vec4 dat2 = vec4(\n        mix(pre2.xy, mouse, texelFetch( iChannel1, ivec2(KEY_THREE,0) , 0 ).x),\n        mix(pre2.zw, vec2(360., 2.) * mouse, texelFetch( iChannel1, ivec2(KEY_FOUR,0) , 0 ).x)\n        );\n        \n    if(uv == ivec2(0, 0)) fragColor = mix(dat , vec4(0.3, 0.3, vec2(-30, 0.6)), float(iFrame == 0));\n    if(uv == ivec2(0, 1)) fragColor = mix(dat2, vec4(0.2, 0.1, vec2(20, 0.45)),   float(iFrame == 0));\n}","name":"Buffer B","description":"","type":"buffer"}]}