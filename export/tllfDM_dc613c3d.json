{"ver":"0.1","info":{"id":"tllfDM","date":"1597023507","viewed":463,"name":"Debug heatmap script","username":"morimea","description":"[b]I made it just for fun.[/b]\nCalculating number of func calls in shader and build heatmap base on its data.\n\nRead my message below, how to use.\n\nShader in BufA from [url=https://www.shadertoy.com/view/4tcGDr]Ray Marching: Part 6 [/url]","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["debug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Danil (2020+) https://github.com/danilw\n// The MIT License\n// self https://www.shadertoy.com/view/tllfDM\n\n// shader in BufA from \n// https://www.shadertoy.com/view/4tcGDr\n\n// How to use:\n// 1. copy shader to bufA\n// 2. rename shader mainImage to mainImage_orig\n// 3. copy this at end of file\n/*\nvoid mainImage(out vec4 c, vec2 f){\n    mainImage_orig(c,f);\n    //c*=mnul_; \n    c*=min(0.,iTime); //use for ANGLE\n    c=pack_udata();\n}\n*/\n// 4. it should work\n\n// More settings:\n// 1. Group to display, and group list in Common, edit <template_x> in Common to change statistic group to display\n// 2. Groups multiplier, when you want calculate more than 256 function calls\n\n\n// bugs https://github.com/KhronosGroup/glslang/issues/2368 https://www.shadertoy.com/view/tlfBRB\n\nvec3 print_text(vec2 U, ivec3 tpl);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = (iResolution.xy / iResolution.y);\n    vec2 px = 2./iResolution.xy;\n    vec2 uv = fragCoord/iResolution.y - res*0.5;\n    \n    vec2 tuv=fragCoord/iResolution.xy - ((length(iMouse.xy)<1.5) ? vec2(0.5) : (iMouse.xy/iResolution.xy));\n    \n    vec3 col=vec3(0.);\n    int idx=0;\n    float draw_text=0.;\n    if((tuv.x<0.)&&(tuv.y<0.)){ //left bot\n        draw_text=step(abs(uv.y+0.375),0.12)*step(abs(uv.x+0.55),0.4);\n        idx=0;\n    }\n    else if((tuv.x<0.)&&(tuv.y>0.)){ //left top\n        draw_text=step(abs(uv.y-0.375),0.12)*step(abs(uv.x+0.55),0.4);\n        idx=1;\n    }\n    else if((tuv.x>0.)&&(tuv.y<0.)){ //right bot\n        draw_text=step(abs(uv.y+0.375),0.12)*step(abs(uv.x-0.55),0.4);\n        idx=2;\n    }\n    else if((tuv.x>0.)&&(tuv.y>0.)){ //right top\n        draw_text=step(abs(uv.y-0.375),0.12)*step(abs(uv.x-0.55),0.4);\n        idx=3;\n    }\n    ivec3 template_local=template_x[idx];\n    col=get_color_heatmap(template_local, texelFetch(iChannel0,ivec2(fragCoord),0));\n    \n    if(draw_text>0.5){\n        float mult=0.5;\n        if(iMouse.z>0.){\n            mult=1.;\n            col=mix(vec3(0.),col,0.5);\n        }\n        vec3 drgb=max(smoothstep(0.,px.y,abs(uv.x-vec3(0.75)*sign(uv.x)+(sign(uv.x)>0.?0.52:0.))-0.01),smoothstep(0.,px.y,abs(uv.y-vec3(0.35,0.4,0.45)*sign(uv.y)+(sign(uv.y)>0.?0.05:0.))-0.01));\n        drgb=(1.-mult)+drgb*mult;\n        if(uv.y>0.)drgb=drgb.bgr;\n        vec3 txt=1.-print_text((uv-vec2(0.78-(sign(uv.x)>0.?0.58:0.),0.375)*sign(uv))*15.,template_local)*mult;\n        drgb=min(drgb,txt);\n        \n        col=mix(vec3(0.9,0.31,0.31),col,drgb.r);\n        col=mix(vec3(0.31,0.9,0.31),col,drgb.g);\n        col=mix(vec3(0.31,0.31,0.9),col,drgb.b);\n    }\n    float dborder=smoothstep(0.,px.x,abs(tuv.x))*smoothstep(0.,px.y,abs(tuv.y));\n    col=mix(vec3(0.33),col,dborder);\n    \n    fragColor = vec4(col,1.0);\n}\n\n// using https://www.shadertoy.com/view/llyXRW\n\nvoid C(inout vec2 U, inout vec4 T, in int c, bool dir){\n    U.x+=dir?.5:-0.5;\t\n    if(U.x<.0||U.x>1.||U.y<0.||U.y>1. ){\n        T+= vec4(0);\n    }\n    else{\n        T+= textureGrad( iChannel3, U/16. + fract( vec2(float(c), float(15-c/16)) / 16.), dFdx(U/16.),dFdy(U/16.) );\n    }\n}\n\n// text messages, each uvec4 is 16 chars, chars in ASCII hex\nconst uvec4[16] text_group=uvec4[16](\n    uvec4(0x69660000u,0x0u,0x0u,0x0u),\n    uvec4(0x666f722cu,0x20776869u,0x6c650000u,0x0u),\n    uvec4(0x6e6f726du,0x616c697au,0x65000000u,0x0u),\n    uvec4(0x6d69782cu,0x73746570u,0x2c736d6fu,0x6f746800u),\n    uvec4(0x6c656e67u,0x74682c20u,0x64697374u,0x616e6365u),\n    uvec4(0x646f742cu,0x2063726fu,0x73730000u,0x0u),\n    uvec4(0x73696e2cu,0x636f732cu,0x74616e00u,0x0u),\n    uvec4(0x6173696eu,0x2c61636fu,0x732c6174u,0x616e0000u),\n    uvec4(0x73696e68u,0x2c636f73u,0x682c7461u,0x6e682c61u),\n    uvec4(0x706f772cu,0x73717274u,0x2c696e76u,0x73717274u),\n    uvec4(0x6162732cu,0x7369676eu,0x0u,0x0u),\n    uvec4(0x6d6f642cu,0x66726163u,0x742c666cu,0x6f6f722bu),\n    uvec4(0x6d696e2cu,0x6d61782cu,0x636c616du,0x70000000u),\n    uvec4(0x6578702cu,0x6c6f672cu,0x65787032u,0x6c6f6732u),\n    uvec4(0x7265666cu,0x6563742cu,0x72656672u,0x6163742bu),\n    uvec4(0x74657874u,0x7572652du,0x6c696b65u,0x0u)\n);\n\n// print 3 text at once\nvec3 print_text(vec2 U, ivec3 tpl){\n    vec4[3] T=vec4[3](vec4(0.),vec4(0.),vec4(0.));\n    vec2 oU=U;\n    for(int a=0;a<3;a++){\n        if(tpl[a]<0)continue;\n        bool ibreak=false;\n        U=oU+vec2(0.,0.8*float(a));\n        for(int i=0;(i<4)&&(!ibreak);i++){\n            uvec4 ta=decodeval32(text_group[tpl[a]][i]);\n            for(int j=0;(j<4)&&(!ibreak);j++){\n                ibreak=ta[j]==0u;\n                if(ibreak)break;\n                C(U,T[a],int(ta[j]), false);\n            }\n        }\n        if(length(T[a].yz)==0.)T[a].x=0.;\n    }\n    return vec3(T[0].x,T[1].x,T[2].x);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// Not all GLSL functions included, some not included, like radiants/textureSize/dFdx \n// also not included matrix functions, like inverse/transpose\n// also bool functions not included, lessThan etc\n\n// scroll down for Functions groups list\n\n// EXCEPTIONS:\n// 1. atan has two arguments, change(uncomment) if need one arg\n// 2. texture and textureProj with two arguments, change(uncomment) if need three arg\n// 3. min, max, clamps is float only\n// 4. globals initialized with function call not allowed\n// 5. for(a;b;c) must have <c> and can not have <c,d>\n\n\n// Groups logic:\n\n// color templates (EDIT), value in ivec3() is ID of function group to use, (-1) means this color not used\nivec3[4] template_x=ivec3[4](\n    ivec3(0, 1, -1), // (if, loops, 0)\n    ivec3(2, 3, 5), // (normalize, step, dot)\n    ivec3(6, 9, 12), // (sin, pow, clamp)\n    ivec3(4, 14, 15) // (lenght, refract, texture) - example for raytracing\n);\n\n// 1. Groups multiplier (EDIT), max counter 256, with multiplier 2 it will be 512, with 10 its 2560 etc\n// location in array==index of group, example length -> group 4 -> grm_[4] is location of group multiplier\n// can be used for large loops where 256+ iterations with lots logic in loop\nconst float[16] grm_= float[16](\n    1., 1., 1., 1., \n    1., 1., 1., 1., \n    1., 1., 1., 1., \n    1., 1., 1., 1.\n);\n\n// 2. Groups counter, MAX counter 256, DO NOT EDIT\nfloat[16] grc_= float[16](\n    0., 0., 0., 0., \n    0., 0., 0., 0., \n    0., 0., 0., 0., \n    0., 0., 0., 0.\n);\n\n\n// 3. Helpers\n\n// Utils\n\nuvec4 decodeval32(uint varz) {\n    uvec4 iret=uvec4(0);\n    iret.x=varz>>24;\n    iret.y=(varz>>16)&0xffu;\n    iret.z=(varz>>8)&0xffu;\n    iret.w=(varz>>0)&0xffu;\n    return iret;\n}\n\nuint encodeval32(uvec4 colz) {\n    colz=min(colz,uvec4(0xffu));\n    return uint((colz[0]<<24)&0xff000000u|(colz[1]<< 16)&0x00ff0000u|(colz[2]<< 8)&0x0000ff00u|(colz[3]<< 0)&0x000000ffu);\n}\n\nvec4 pack_udata(){\n    return uintBitsToFloat(uvec4(encodeval32(uvec4(grc_[0], grc_[1], grc_[2], grc_[3])), \n                 encodeval32(uvec4(grc_[4], grc_[5], grc_[6], grc_[7])), \n                 encodeval32(uvec4(grc_[8], grc_[9], grc_[10], grc_[11])), \n                 encodeval32(uvec4(grc_[12], grc_[13], grc_[14], grc_[15]))));\n}\n\nvec3 get_color_heatmap(ivec3 tpl, vec4 data){\n    vec3 col=vec3(0.);\n    for(int i=0;i<3;i++){\n        if(tpl[i]>=0){\n            uvec4 tdata=decodeval32(floatBitsToUint(data[tpl[i]/4]));\n            col[i]=float(tdata[tpl[i]%4])/256.;\n        }\n    }\n    return col;\n}\n\n// ginc_() to have less code\n#define ginc_(arg_) (grc_[arg_]+=1./grm_[arg_])\n\n//keep it 0. it work correct\n#define mnul_ 0.\n\n\n// arg_x() to have less code\n#define arg_one_(arg_ ,gidx_, func_) (func_(arg_) + ginc_(gidx_)*mnul_)\n#define arg_two_(arg_, arg_2, gidx_, func_) (func_(arg_, arg_2) + ginc_(gidx_)*mnul_)\n#define arg_three_(arg_, arg_2, arg_3, gidx_, func_) (func_(arg_, arg_2, arg_3) + ginc_(gidx_)*mnul_)\n#define arg_four_(arg_, arg_2, arg_3, arg_4, gidx_, func_) (func_(arg_, arg_2, arg_3, arg_4) + ginc_(gidx_)*mnul_)\n#define arg_five_(arg_, arg_2, arg_3, arg_4, arg_5, gidx_, func_) (func_(arg_, arg_2, arg_3, arg_4, arg_5) + ginc_(gidx_)*mnul_)\n\n\n// 4. Functions groups\n\n// most popular functions first in small groups\n\n// 0\n// look like GPU execute <if> from left to right, and drop everything that left when true found\n// this why I add to left\n#define if(arg_) if((ginc_(0)<0.) || arg_)\n\n// 1\n#define for(arg_) for(arg_, ginc_(1))\n#define while(arg_) while((ginc_(1)<0.) || arg_)\n\n// 2\n#define normalize(arg_) arg_one_(arg_, 2, normalize)\n\n// 3\n#define mix(arg_,arg_2,arg_3) arg_three_(arg_, arg_2, arg_3, 3, mix)\n#define step(arg_,arg_2) arg_two_(arg_, arg_2, 3, step)\n#define smoothstep(arg_,arg_2,arg_3) arg_three_(arg_, arg_2, arg_3, 3, smoothstep)\n\n// 4\n#define length(arg_) arg_one_(arg_, 4, length)\n#define distance(arg_,arg_2) arg_two_(arg_, arg_2, 4, distance)\n\n// 5\n#define dot(arg_,arg_2) arg_two_(arg_, arg_2, 5, dot)\n#define cross(arg_,arg_2) arg_two_(arg_, arg_2, 5, cross)\n\n// 6\n#define sin(arg_) arg_one_(arg_, 6, sin)\n#define cos(arg_) arg_one_(arg_, 6, cos)\n#define tan(arg_) arg_one_(arg_, 6, tan)\n\n// 7\n#define asin(arg_) arg_one_(arg_, 7, asin)\n#define acos(arg_) arg_one_(arg_, 7, acos)\n//#define atan(arg_) arg_one_(arg_, 7, atan)\n#define atan(arg_,arg_2) arg_two_(arg_, arg_2, 7, atan)\n\n// 8\n#define sinh(arg_) arg_one_(arg_, 8, sinh)\n#define cosh(arg_) arg_one_(arg_, 8, cosh)\n#define tanh(arg_) arg_one_(arg_, 8, tanh)\n#define asinh(arg_) arg_one_(arg_, 8, asinh)\n#define acosh(arg_) arg_one_(arg_, 8, acosh)\n#define atanh(arg_) arg_one_(arg_, 8, atanh)\n\n// 9\n#define pow(arg_,arg_2) arg_two_(arg_, arg_2, 9, pow)\n#define sqrt(arg_) arg_one_(arg_, 9, sqrt)\n#define inversesqrt(arg_) arg_one_(arg_, 9, inversesqrt)\n\n// 10\n#define abs(arg_) arg_one_(arg_, 10, abs)\n#define sign(arg_) arg_one_(arg_, 10, sign)\n\n// 11\n#define floor(arg_) arg_one_(arg_, 11, floor)\n#define ceil(arg_) arg_one_(arg_, 11, ceil)\n#define trunc(arg_) arg_one_(arg_, 11, trunc)\n#define fract(arg_) arg_one_(arg_, 11, fract)\n#define mod(arg_,arg_2) arg_two_(arg_, arg_2, 11, mod)\n#define modf(arg_,arg_2) arg_two_(arg_, arg_2, 11, modf)\n\n// 12\n#define min(arg_,arg_2) arg_two_(arg_, arg_2, 12, min)\n#define max(arg_,arg_2) arg_two_(arg_, arg_2, 12, max)\n#define clamp(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 12, clamp)\n\n// 13\n#define exp(arg_) arg_one_(arg_, 13, exp)\n#define log(arg_) arg_one_(arg_, 13, log)\n#define exp2(arg_) arg_one_(arg_, 13, exp2)\n#define log2(arg_) arg_one_(arg_, 13, log2)\n\n// 14\n#define reflect(arg_,arg_2) arg_two_(arg_, arg_2, 14, reflect)\n#define refract(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 14, refract)\n#define faceforward(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 14, faceforward)\n\n// 15\n#define texture(arg_,arg_2) arg_two_(arg_, arg_2, 15, texture)\n//#define texture(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 15, texture)\n#define textureLod(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 15, textureLod)\n#define textureLodOffset(arg_,arg_2, arg_3, arg_4) arg_four_(arg_, arg_2, arg_3, arg_4, 15,textureLodOffset )\n#define textureGrad(arg_,arg_2, arg_3, arg_4) arg_four_(arg_, arg_2, arg_3, arg_4, 15, textureGrad)\n#define textureGradOffset(arg_,arg_2, arg_3, arg_4, arg_5) arg_five_(arg_, arg_2, arg_3, arg_4, arg_5, 15, textureGradOffset)\n#define textureProj(arg_,arg_2) arg_two_(arg_, arg_2, 15, textureProj)\n//#define textureProj(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 15, textureProj)\n#define textureProjLod(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 15, textureProjLod)\n#define textureProjLodOffset(arg_,arg_2, arg_3, arg_4) arg_four_(arg_, arg_2, arg_3, arg_4, 15, textureProjLodOffset)\n#define textureProjGrad(arg_,arg_2, arg_3, arg_4) arg_four_(arg_, arg_2, arg_3, arg_4, 15, textureProjGrad)\n#define texelFetch(arg_,arg_2, arg_3) arg_three_(arg_, arg_2, arg_3, 15, texelFetch)\n#define texelFetchOffset(arg_,arg_2, arg_3, arg_4) arg_four_(arg_, arg_2, arg_3, arg_4, 15, texelFetchOffset)\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// using https://www.shadertoy.com/view/4tcGDr\n\n/**\n * Part 6 Challenges:\n * - Make a scene of your own! Try to use the rotation transforms, the CSG primitives,\n *   and the geometric primitives. Remember you can use vector subtraction for translation,\n *   and component-wise vector multiplication for scaling.\n */\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n/**\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n */\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\n/**\n * Constructive solid geometry union operation on SDF-calculated distances.\n */\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n/**\n * Constructive solid geometry difference operation on SDF-calculated distances.\n */\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n/**\n * Signed distance function for a cube centered at the origin\n * with dimensions specified by size.\n */\nfloat boxSDF(vec3 p, vec3 size) {\n    vec3 d = abs(p) - (size / 2.0);\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/**\n * Signed distance function for a sphere centered at the origin with radius r.\n */\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\n/**\n * Signed distance function for an XY aligned cylinder centered at the origin with\n * height h and radius r.\n */\nfloat cylinderSDF(vec3 p, float h, float r) {\n    // How far inside or outside the cylinder the point is, radially\n    float inOutRadius = length(p.xy) - r;\n    \n    // How far inside or outside the cylinder is, axially aligned with the cylinder\n    float inOutHeight = abs(p.z) - h/2.0;\n    \n    // Assuming p is inside the cylinder, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n\n    // Assuming p is outside the cylinder, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 samplePoint) {    \n    // Slowly spin the whole scene\n    samplePoint = rotateY(iTime / 2.0) * samplePoint;\n    \n    float cylinderRadius = 0.4 + (1.0 - 0.4) * (1.0 + sin(1.7 * iTime)) / 2.0;\n    float cylinder1 = cylinderSDF(samplePoint, 2.0, cylinderRadius);\n    float cylinder2 = cylinderSDF(rotateX(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n    float cylinder3 = cylinderSDF(rotateY(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n    \n    float cube = boxSDF(samplePoint, vec3(1.8, 1.8, 1.8));\n    \n    float sphere = sphereSDF(samplePoint, 1.2);\n    \n    float ballOffset = 0.4 + 1.0 + sin(1.7 * iTime);\n    float ballRadius = 0.3;\n    float balls = sphereSDF(samplePoint - vec3(ballOffset, 0.0, 0.0), ballRadius);\n    balls = unionSDF(balls, sphereSDF(samplePoint + vec3(ballOffset, 0.0, 0.0), ballRadius));\n    balls = unionSDF(balls, sphereSDF(samplePoint - vec3(0.0, ballOffset, 0.0), ballRadius));\n    balls = unionSDF(balls, sphereSDF(samplePoint + vec3(0.0, ballOffset, 0.0), ballRadius));\n    balls = unionSDF(balls, sphereSDF(samplePoint - vec3(0.0, 0.0, ballOffset), ballRadius));\n    balls = unionSDF(balls, sphereSDF(samplePoint + vec3(0.0, 0.0, ballOffset), ballRadius));\n    \n    \n    \n    float csgNut = differenceSDF(intersectSDF(cube, sphere),\n                         unionSDF(cylinder1, unionSDF(cylinder2, cylinder3)));\n    \n    return unionSDF(balls, csgNut);\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage_orig( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(8.0, 5.0 * sin(0.2 * iTime), 7.0);\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    // Use the surface normal as the ambient color of the material\n    vec3 K_a = (estimateNormal(p) + vec3(1.0)) / 2.0;\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}\n\nvoid mainImage(out vec4 c, vec2 f){\n    mainImage_orig(c,f);\n    c*=min(0.,iTime); //use for ANGLE\n    c=pack_udata();\n}\n\n\n\n\n","name":"Buffer A","description":"","type":"buffer"}]}