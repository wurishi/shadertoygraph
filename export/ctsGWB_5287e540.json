{"ver":"0.1","info":{"id":"ctsGWB","date":"1672340253","viewed":88,"name":"Simple Rectangle Digits","username":"DantesPlan","description":"A simple digit number shader.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["aspectratio","number","rectangle","digit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rectangle(vec2 uv,vec2 pos,vec2 size,float blur)\n{\n    uv -= pos;\n\n    vec2 tuv;\n\n    tuv = (size / 2.0) - abs(uv);\n\n    tuv = smoothstep(-(blur*0.5), (blur*0.5), tuv);\n\n    return (tuv.x*tuv.y);\n}\n\nvec4 digitsFunc(vec2 uv,vec2 pos,vec2 size,int num,float blur)\n{\n    vec4 layer = vec4(0.0);\n\n    float d = 0.0;\n\n    uv -= pos;\n    uv /= size;\n\n    if(num==0)\n    {\n          d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n          d -= rectangle(uv,vec2(0.0),vec2(1.0,3.0),blur);\n    }\n    else if(num==1)\n    {\n        d = rectangle(uv,vec2(1.0,0.0),vec2(1.0,5.0),blur);\n    }\n    else if(num==2)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(-0.5,1.0),vec2(2.0,1.0),blur);\n        d -= rectangle(uv,vec2(0.5,-1.0),vec2(2.0,1.0),blur);\n    }\n    else if(num==3)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(-0.5,1.0),vec2(2.0,1.0),blur);\n        d -= rectangle(uv,vec2(-0.5,-1.0),vec2(2.0,1.0),blur);\n    }\n    else if(num==4)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(0.0,1.5),vec2(1.0,2.0),blur);\n        d -= rectangle(uv,vec2(-0.5,-1.5),vec2(2.0,2.0),blur);\n    }\n    else if(num==5)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(0.5,1.0),vec2(2.0,1.0),blur);\n        d -= rectangle(uv,vec2(-0.5,-1.0),vec2(2.0,1.0),blur);\n    }\n    else if(num==6)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(0.5,1.0),vec2(2.0,1.0),blur);\n        d -= rectangle(uv,vec2(0.0,-1.0),vec2(1.0,1.0),blur);\n    }\n    else if(num==7)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(-0.5,-0.5),vec2(2.0,4.0),blur);\n    }\n    else if(num==8)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(0.0,-1.0),vec2(1.0,1.0),blur);\n        d -= rectangle(uv,vec2(0.0,1.0),vec2(1.0,1.0),blur);\n    }\n    else if(num==9)\n    {\n        d = rectangle(uv,vec2(0.0),vec2(3.0,5.0),blur);\n        d -= rectangle(uv,vec2(0.0,1.0),vec2(1.0,1.0),blur);\n        d -= rectangle(uv,vec2(-0.5,-1.0),vec2(2.0,1.0),blur);\n    }\n    \n    layer = vec4(vec3(1.0),d);\n\n    return layer;\n}\n\nvec4 drawDigits(vec2 uv,vec2 pos,vec2 size,int maxDigits,float blur,float val)\n{\n    vec4 layer = vec4(0.0);\n\n    uv-=pos;\n\n    if(abs(uv.x)>(size.x*1.9)*float(maxDigits) || abs(uv.y)>size.y/(size.y/size.y)*2.9)\n        return vec4(0.0);\n\n    if(maxDigits==1)\n    {\n        layer = digitsFunc(uv,vec2(0.0),vec2(size),int(mod(val,10.0)),blur);\n    }\n    if(maxDigits==2)\n    {\n       layer = digitsFunc(uv,vec2(-(size.x*1.8),0.0),vec2(size),int(mod(val/10.0,10.0)),blur);\n       layer += digitsFunc(uv,vec2((size.x*1.8),0.0),vec2(size),int(mod(val,10.0)),blur);\n    }\n    if(maxDigits==3)\n    {\n        layer = digitsFunc(uv,vec2(-(size.x*4.0),0.0),vec2(size),int(mod(val/100.0,10.0)),blur);\n        layer += digitsFunc(uv,vec2(0.0),vec2(size),int(mod(val/10.0,10.0)),blur);\n        layer += digitsFunc(uv,vec2((size.x*4.0),0.0),vec2(size),int(mod(val,10.0)),blur);\n    }\n    if(maxDigits==4)\n    {\n        layer = digitsFunc(uv,vec2(-(size.x*5.4),0.0),vec2(size),int(mod(val/1000.0,10.0)),blur);\n        layer += digitsFunc(uv,vec2(-(size.x*1.8),0.0),vec2(size),int(mod(val/100.0,10.0)),blur);\n        layer += digitsFunc(uv,vec2((size.x*1.8),0.0),vec2(size),int(mod(val/10.0,10.0)),blur);\n        layer += digitsFunc(uv,vec2((size.x*5.4),0.0),vec2(size),int(mod(val,10.0)),blur);\n    }\n    return layer;\n}\n\nvec4 drawAxis(vec2 uv,float lineWidth)\n{\n    vec4 layer = vec4(0.0);\n    float density = 0.8;\n\n    float ax = step(abs(uv.x-0.5),lineWidth);\n    float ay = step(abs(uv.y-0.5),lineWidth);\n\n    layer = mix(layer,vec4(1.0,0.0,0.0,1.0),ax*density);\n    layer = mix(layer,vec4(0.0,1.0,0.0,1.0),ay*density);\n\n    return layer;\n}\n\nvec2 setAspectRatio(vec2 uv,vec2 res)\n{\n    float aspect = res.x/res.y;\n    vec2 st = uv/res.xy;\n    st -= 0.5;\n    st.x *= aspect;\n    st += 0.5;\n    return st;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv = setAspectRatio(fragCoord,iResolution.xy);\n\n    float tmpCnt1 = mod(iTime*2.0,10.0);\n    float tmpCnt2 = tmpCnt1*10.0;\n    float tmpCnt3 = tmpCnt2*10.0;\n    float tmpCnt4 = tmpCnt3*10.0;\n\n    vec4 axisLayer = drawAxis(uv,0.002);\n\n    vec4 digitsLayer1 = drawDigits(uv,vec2(0.5,0.8),vec2(0.025),1,0.0,tmpCnt1);\n    vec4 digitsLayer2 = drawDigits(uv,vec2(0.5,0.6),vec2(0.025),2,0.4,tmpCnt2);\n    vec4 digitsLayer3 = drawDigits(uv,vec2(0.5,0.4),vec2(0.025),3,0.6,tmpCnt3);\n    vec4 digitsLayer4 = drawDigits(uv,vec2(0.5,0.2),vec2(0.025),4,0.8,tmpCnt4);\n\n    fragColor = mix(vec4(0.0),axisLayer,axisLayer.a);\n\n    fragColor = mix(fragColor,digitsLayer1,digitsLayer1.a);\n    fragColor = mix(fragColor,digitsLayer2,digitsLayer2.a);\n    fragColor = mix(fragColor,digitsLayer3,digitsLayer3.a);\n    fragColor = mix(fragColor,digitsLayer4,digitsLayer4.a);\n}\n","name":"Image","description":"","type":"image"}]}