{"ver":"0.1","info":{"id":"4fsXz8","date":"1704933939","viewed":90,"name":"Painterly Dragon","username":"trumpetrespas","description":"A little shader I made for fun.\nIt is supposed to resemble the middle of a dragon.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["painterly","dragon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n/// Taken from https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n/// Also taken from https://www.shadertoy.com/view/Msf3WH\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x);\n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n/// Taken from http://iquilezles.org/articles/fbm/\nfloat fbm( in vec2 x, in float H )\n{    \n    float t = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*noise(f*x);\n    }\n    return t;\n}\n\nfloat fbm(in vec2 x) {return fbm(x, 1.0);}\n\n#define PI 3.1415926535\n\nvec3 rgb(in int r, in int g, in int b)\n{\n    return vec3(float(r), float(g), float(b))/vec3(255.0);\n}\n\n/// From https://thebookofshaders.com/08/\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time=iTime*4.0;\n    vec3  background = vec3(0.2);\n    vec3  color = background;\n    vec2  bottomLeft = fragCoord.xy/iResolution.xy;\n    vec2  center = (fragCoord.xy*2.0 - iResolution.xy)/iResolution.y;\n    vec2  uv = center;\n\n    vec2 pol = vec2(atan(uv.y, uv.x), length(uv));\n\n    /// Gives it a more natural flow\n    uv -= pol.y*cos(8.0/time)/16.0;\n\n    uv *= 12.0;\n\n    //uv.y -= 2.0*uv.x;\n\n    /// Rotate canvas\n    uv *= rotate2d(PI/2.0);\n\n    uv.x *= -1.0;\n\n\n    /// Scroll canvas\n    uv.y += time*1.0;\n\n    /// Make tail\n    float mask = sin( /// Only a small part\n                      (clamp(uv.x, -3.0, 3.0)-2.0)\n                      + /// Make the tail wiggle\n                      cos(uv.y/1.7+time)/4.0\n                    )*\n                    /// Give it a nice wavering highlight, and removes some artifacts\n                    clamp(uv.x, 1.8, 3.0);\n                    //cos(uv.y/8.0);\n\n    //float faceMask = length((center*vec2(1.0, 2.0))+vec2(-1.4, 0.0));\n\n    /// Stylized paint dribbles\n    uv.x += fbm(cos(uv*8.0))/48.0;\n\n    /// Give definition to feathers\n    uv.y += abs( /// Pointy Bits\n              cos( \n                uv.x*8.0 + cos(uv.y*3.0)/8.0 \n                ) \n              )+\n            ( /// Grooves in Feather\n              sin(\n                64.0*( /// Angle of grooves\n                  uv*rotate2d(PI/2.0)\n                  ).y\n               )/8.0\n            );\n\n    //float f = fbm(vec2(fbm(uv), fbm(uv+0.3)));\n    float f = fbm(uv);\n\n    //mask += faceMask;\n    color = mix(vec3(0.5, 0.7, 1.0), vec3(0.1, 0.1, 0.1), max(f,mask));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}