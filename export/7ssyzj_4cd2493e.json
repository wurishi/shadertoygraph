{"ver":"0.1","info":{"id":"7ssyzj","date":"1642407498","viewed":335,"name":"Ray Tracing Bunny BVH","username":"playbyan1453","description":"Reworked using texture pass based on my observasion, and this is much better than my previous approach. Once frame isn't zero or the screen resolution is static it won't do anything and the BVH is ready.","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","interactive","bvh","boundingbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Building BVH is considerably fast 7.65ms in average.\n// Commmon tab is the mesh, and pre-defined variables.\n// Buffer A is mouse and resolution.\n// Buffer B is the the BVH generation.\n#define epsilon 1e-4\n#define tmax 1e19\n#define showbvh 1\n\nvec3 sampleBVH(int x, int y) {\n    ivec2 tres = textureSize(meshatlas, 0);\n    int re = tres.x > tres.y ? tres.x : tres.y;\n    return texelFetch(meshatlas, ivec2(x % re, y + ((x / re) % re) * 5), 0).xyz;\n}\n\n// Camera Matrix\nmat3 cam(vec3 at, vec3 ro) {\n    vec3 z = normalize(at - ro);\n    vec3 x = normalize(cross(vec3(0, 1, 0), z));\n    vec3 y = cross(z, x);\n    return mat3(x, y, z);\n}\n\n// Axis Aligned box\nbool bbox(vec3 ro, vec3 rd, vec3 pa, vec3 pb) {\n    vec3 near = (pa - ro) / rd;\n    vec3  far = (pb - ro) / rd;\n    vec3 bmin = min(near, far);\n\tvec3 bmax = max(near, far);\n    float  tN = max(max(bmin.x, bmin.y), bmin.z);\n\tfloat  tF = min(min(bmax.x, bmax.y), bmax.z);\n    return tN < tF;\n}\n\n// iq triangle intersector\nfloat triangle(vec3 ro, vec3 rd, vec3 v0, vec3 v1, vec3 v2, inout vec3 nor) {\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n    vec3  n = cross(v1v0, v2v0);\n    vec3  q = cross(rov0, rd);\n    float d = 1.0 / dot(rd, n);\n    float u = d * dot(-q, v2v0);\n    float v = d * dot( q, v1v0);\n    float t = d * dot(-n, rov0);\n    nor = normalize(n);\n    if(min(u, v) < 0.0 || u + v > 1.0) return tmax;\n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x, iResolution.y);\n    vec3 at = vec3(0, 0, 0);\n    #if interactive\n    vec3 ro = texelFetch(control, ivec2(0.5, 1.5), 0).xyz;\n    #else\n    vec3 ro = vec3(sin(iTime)*6.0, 0,-cos(iTime)*6.0);\n    #endif\n    mat3 ca = cam(at, ro);\n    vec3 rd = ca * normalize(vec3(uv, 1));\n    \n    float tmin = tmax;\n    float t;\n    vec3 nor, box, pa, pb, v0, v1, v2, tn;\n    // If we hit a box go into the node. These node 0 points already computed.\n    if(bbox(ro, rd, vec3(1.012029, 1.003950, 0.810809), vec3(-1.012029,-1.003950,-0.810809))) {\n        box += 1.0;\n        for(int i = 0; i < fe; i++) {\n            pa = sampleBVH(i, 0);\n            pb = sampleBVH(i, 1);\n            if(bbox(ro, rd, pa, pb)) {\n                box += 1.0;\n                v0 = sampleBVH(i, 2);\n                v1 = sampleBVH(i, 3);\n                v2 = sampleBVH(i, 4);\n                t = triangle(ro, rd, v0, v1, v2, tn);\n                if(t > epsilon && tmin > t) {\n                    tmin = t;\n                    nor = tn;\n                }\n            }\n        }\n    }\n    // Shading\n    vec3 col;\n    if(tmin < tmax) {\n        vec3 lp = normalize(vec3(1, 1,-1));\n        float dif = max(dot(nor, lp), 0.0)*0.949+0.051;\n        float spe = pow(max(dot(reflect(-lp, nor), normalize(ro)), 0.0), 15.0);\n        col += dif + spe;\n    } else col += 0.051;\n    #if showbvh\n    col = col + box * 2e-2;\n    #endif\n    col = max(col, 0.0);\n    col = tanh(pow(col, vec3(0.4545)));\n    \n    fragColor = vec4(col, 1.0);\n    // Debug Mesh and leaf nodes\n    // fragColor = texelFetch(meshatlas, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// From : https://www.shadertoy.com/view/7dVGzz\n// Slight Modified version\n\n#if interactive\nmat3 rot(vec3 a) {\n    vec3 s = sin(a);\n    vec3 c = cos(a);\n    mat3 x = mat3(\n        vec3(   1,   0,   0),\n        vec3(   0, c.x,-s.x),\n        vec3(   0, s.x, c.x)\n    );\n    mat3 y = mat3(\n        vec3( c.y,   0, s.y),\n        vec3(   0,   1,   0),\n        vec3(-s.y,   0, c.y)\n    );\n    mat3 z = mat3(\n        vec3( c.z, s.z,   0),\n        vec3(-s.z, c.z,   0),\n        vec3(   0,   0,   1)\n    );\n    return x * y * z;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // Work with just the first four pixels.\n    if(fragCoord.x == 0.5 && fragCoord.y < 4.5) {\n        vec4 oldMouse = texelFetch(iChannel0, ivec2(0.5), 0);\n        vec4 mouse = vec4(iMouse.xy / iResolution.xy * 1.75, iMouse.zw); \n        vec4 newMouse = vec4(0);\n        float mouseDownLastFrame = texelFetch(iChannel0, ivec2(0.5, 3.5), 0).x;\n        \n        // If mouse button is down and was down last frame\n        if(iMouse.z > 0.0 && mouseDownLastFrame > 0.0) {\n            // Difference between mouse position last frame and now.\n            vec2 mouseMove = mouse.xy - oldMouse.zw;\n            newMouse = vec4(oldMouse.xy + vec2(6.2831853, 3.1415926) * mouseMove, mouse.xy);\n        } else {\n            newMouse = vec4(oldMouse.xy, mouse.xy);\n        }\n        newMouse.x = mod(newMouse.x, 6.2831853);\n        newMouse.y = min(1.5707961, max(-1.5707961, newMouse.y)); // Fixed somme math issues\n\n        // Store mouse data in the first pixel of Buffer A.\n        if(fragCoord == vec2(0.5, 0.5)) {\n            // Set value at first frames\n            if(iFrame == 0) {\n                newMouse = vec4(0);\n            }\n            fragColor = newMouse;\n        }\n\n        // Store camera position in the second pixel of Buffer A.\n        if(fragCoord == vec2(0.5, 1.5)) {\n            // Set camera position from mouse information.\n            vec2 mouse_rotation = newMouse.xy;\n            \n            vec2 yawpitch = vec2(mouse_rotation.x, -mouse_rotation.y);\n            mat3 viewmat = rot(vec3(yawpitch.y, yawpitch.x, 0));\n            vec3 cameraPos = vec3(0, 0,-6) * viewmat;\n            \n            fragColor = vec4(cameraPos, 1.0);\n        }\n        \n        // Store resolution change data in the third pixel of Buffer A.\n        if(fragCoord == vec2(0.5, 2.5)) {\n            float resolutionChangeFlag = 0.0;\n            // The resolution last frame.\n            vec2 oldResolution = texelFetch(iChannel0, ivec2(0.5, 2.5), 0).yz;\n            \n            if(iResolution.xy != oldResolution) {\n            \tresolutionChangeFlag = 1.0;\n            }\n        \tfragColor = vec4(resolutionChangeFlag, iResolution.xy, 1.0);\n        }\n           \n        // Store whether the mouse button is down in the fourth pixel of Buffer A\n        if(fragCoord == vec2(0.5, 3.5)) {\n            if(iMouse.z > 0.0) {\n            \tfragColor = vec4(1);\n            } else {\n            \tfragColor = vec4(0);\n            }\n        }\n    }\n}\n#else\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    float resolutionChangeFlag = 0.0;\n    // The resolution last frame.\n    vec2 oldResolution = texelFetch(iChannel0, ivec2(0), 0).yz;\n    \n    if(iResolution.xy != oldResolution) {\n        resolutionChangeFlag = 1.0;\n    }\n    fragColor = vec4(resolutionChangeFlag, iResolution.xy, 1.0);\n}\n#endif","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define control iChannel0\n#define meshatlas iChannel1\n#define interactive 1\n\n// Mesh Stanford Bunny\n#define ve 148\n#define fe 292\n\nvoid Mesh(inout vec3 v[ve], inout ivec3 f[fe]) {\nv = vec3[]\n(vec3( 0.017682,-0.268524, 0.314913),\n vec3(-0.299303,-0.167024, 0.275953),\n vec3(-0.118823,-0.283836, 0.458126),\n vec3(-0.310365,-0.909318,-0.665835),\n vec3(-0.469653,-0.828897,-0.580423),\n vec3(-0.467330,-0.695864,-0.668375),\n vec3(-0.017702, 1.002464, 0.460785),\n vec3( 0.127474, 0.899589, 0.346536),\n vec3( 0.011769, 0.988590, 0.184970),\n vec3( 0.303156, 0.122618,-0.363291),\n vec3( 0.331552,-0.123033,-0.552543),\n vec3( 0.056355, 0.106817,-0.413625),\n vec3( 0.170739,-0.512902, 0.240724),\n vec3( 0.460131,-0.193084, 0.342863),\n vec3(-0.496174,-0.301948, 0.319151),\n vec3(-0.632069,-0.452811, 0.259296),\n vec3( 0.930075,-0.024845,-0.492014),\n vec3( 0.990165, 0.099920,-0.528764),\n vec3( 0.987078, 0.023069,-0.182496),\n vec3(-0.616280,-0.689658, 0.225116),\n vec3(-0.822409,-0.633811,-0.080836),\n vec3(-0.659339,-0.859334,-0.003739),\n vec3( 0.407930, 0.913162, 0.788101),\n vec3( 0.222060, 0.715674, 0.810809),\n vec3( 0.447323, 0.595900, 0.765078),\n vec3(-0.491734,-0.836367, 0.199994),\n vec3(-0.370449,-0.552558, 0.367088),\n vec3( 0.426786,-0.730037,-0.414797),\n vec3( 0.376465,-0.911034,-0.237301),\n vec3( 0.427446,-0.813533,-0.500336),\n vec3(-0.153556,-0.788013, 0.338632),\n vec3( 0.030074,-0.492644, 0.459434),\n vec3( 0.598785,-0.880295,-0.175401),\n vec3( 0.573363,-1.003950,-0.276431),\n vec3( 0.370252,-0.824453, 0.079372),\n vec3(-0.031664,-0.820076, 0.284665),\n vec3( 0.312701,-0.936474, 0.292363),\n vec3( 0.474869, 0.375285, 0.158049),\n vec3( 0.384020, 0.394094, 0.101250),\n vec3( 0.352849, 0.180204, 0.164933),\n vec3(-0.988888,-0.509157,-0.217955),\n vec3(-0.970449,-0.621216,-0.455526),\n vec3(-1.012029,-0.666611,-0.237632),\n vec3( 0.261177, 1.003950, 0.732313),\n vec3( 0.502460, 0.442797, 0.331950),\n vec3( 0.474874, 0.566980, 0.233405),\n vec3( 1.012029, 0.165453,-0.166861),\n vec3( 0.883356, 0.072151, 0.088849),\n vec3( 0.370169, 0.577058,-0.108069),\n vec3( 0.141423, 0.709553, 0.010747),\n vec3( 0.432798, 0.635903,-0.092005),\n vec3( 0.192763,-0.967045,-0.728863),\n vec3(-0.023982,-0.814212,-0.685690),\n vec3( 0.230697,-0.779319,-0.595902),\n vec3( 0.023758, 0.667675, 0.350396),\n vec3(-0.115908, 0.645783, 0.336304),\n vec3(-0.543844, 0.095610, 0.187237),\n vec3(-0.712681,-0.137343, 0.142457),\n vec3(-0.517472,-0.094542, 0.211911),\n vec3(-0.879625,-0.352838,-0.414334),\n vec3(-0.638464,-0.782385,-0.579608),\n vec3(-0.843597,-0.533997,-0.418326),\n vec3(-0.150212, 0.971485, 0.404040),\n vec3(-0.097188, 0.877688, 0.538362),\n vec3(-0.467637,-0.159767,-0.697996),\n vec3(-0.780178,-0.137988,-0.518166),\n vec3(-0.603841, 0.024434,-0.566600),\n vec3(-0.860553,-0.070533,-0.076773),\n vec3(-0.884937,-0.507262,-0.209240),\n vec3( 0.948789,-0.232915,-0.207781),\n vec3( 0.857210,-0.330036,-0.395362),\n vec3( 0.851134,-0.069471,-0.359887),\n vec3(-0.347826, 0.306355,-0.236529),\n vec3(-0.628954, 0.198222,-0.148995),\n vec3(-0.386083, 0.249892,-0.007045),\n vec3( 0.865862,-0.423286,-0.013143),\n vec3( 0.698389,-0.656106,-0.317713),\n vec3( 0.754033,-0.519513,-0.428097),\n vec3( 0.317992, 0.424605,-0.025723),\n vec3( 0.248784, 0.236311,-0.104074),\n vec3( 0.697654, 0.448237, 0.177737),\n vec3( 0.478733, 0.472590, 0.645345),\n vec3( 0.889842,-0.081019,-0.076047),\n vec3( 0.667070,-0.004622, 0.173191),\n vec3( 0.718174,-0.261748, 0.235320),\n vec3( 0.612825, 0.356893, 0.197938),\n vec3( 0.529610, 0.960853, 0.658598),\n vec3( 0.613147, 0.588104, 0.026341),\n vec3( 0.383607, 0.772030, 0.058270),\n vec3( 0.643535, 0.652515,-0.185799),\n vec3( 0.445261, 0.594544, 0.122446),\n vec3( 0.969045, 0.514718,-0.145897),\n vec3( 0.829089, 0.552656,-0.351783),\n vec3( 0.939552, 0.344055,-0.493763),\n vec3( 0.926887, 0.360887,-0.059447),\n vec3(-0.823790,-0.326492, 0.095226),\n vec3( 0.496849, 0.555140,-0.398486),\n vec3( 0.691584, 0.452774,-0.547598),\n vec3( 0.706213,-0.634586,-0.007084),\n vec3( 0.259744,-0.561264,-0.610201),\n vec3( 0.398107,-1.003557, 0.065369),\n vec3(-0.461643,-1.002116, 0.207903),\n vec3(-0.463353,-1.001660,-0.040245),\n vec3( 0.145562,-1.002865, 0.311978),\n vec3(-0.331513, 0.246247,-0.471311),\n vec3(-0.231747, 0.102357,-0.617314),\n vec3( 0.685607,-1.001667,-0.461438),\n vec3( 0.648342, 0.834845, 0.583527),\n vec3(-0.046412, 0.012695, 0.274982),\n vec3( 0.448012,-0.698521, 0.044815),\n vec3( 0.653015,-0.066844,-0.495777),\n vec3( 0.596510,-0.266383,-0.604651),\n vec3(-0.827543,-1.003445,-0.353206),\n vec3(-0.694407,-1.002416,-0.517547),\n vec3( 0.666537,-0.959458,-0.008172),\n vec3(-0.703593, 0.105744,-0.405666),\n vec3(-0.234782,-0.532104,-0.810809),\n vec3(-0.612408,-0.402499,-0.673967),\n vec3(-0.356359,-0.316581,-0.783451),\n vec3( 0.045817,-0.318516,-0.779906),\n vec3(-0.018896,-0.594723,-0.808543),\n vec3(-0.174598,-0.237097,-0.789777),\n vec3( 0.017496, 0.183804,-0.009595),\n vec3( 0.739217, 0.543270, 0.125504),\n vec3( 0.539133,-0.951875,-0.590114),\n vec3( 0.644295, 0.666171, 0.407275),\n vec3( 0.835935, 0.224589,-0.651263),\n vec3( 0.200047, 0.650283, 0.687870),\n vec3( 0.239574, 0.066472, 0.256666),\n vec3(-0.251476, 0.090669, 0.182019),\n vec3( 0.167186, 0.848819, 0.644794),\n vec3( 0.465308, 0.400164,-0.353522),\n vec3( 0.673727, 0.073384,-0.670546),\n vec3( 0.536715, 0.114580,-0.520462),\n vec3(-0.754416,-1.003184,-0.139955),\n vec3( 0.123968,-0.205703,-0.627133),\n vec3( 0.591502,-0.429735,-0.572507),\n vec3(-0.207075,-0.491305, 0.467010),\n vec3(-0.932366,-0.694980,-0.093092),\n vec3( 0.002443, 0.837323, 0.537569),\n vec3(-0.305110,-1.002861,-0.637696),\n vec3( 0.525247,-0.494938, 0.277648),\n vec3( 0.327110,-1.002893,-0.562843),\n vec3( 0.444633,-0.842996,-0.163104),\n vec3( 0.503600, 0.658927, 0.607103),\n vec3( 0.366227, 0.798086, 0.506726),\n vec3( 0.605149, 0.775991, 0.350789),\n vec3(-0.100311, 0.680689, 0.242135));\n\nf = ivec3[]\n(ivec3(  1,  2,  3),\n ivec3(  4,  5,  6),\n ivec3(  7,  8,  9),\n ivec3( 10, 11, 12),\n ivec3(  1, 13, 14),\n ivec3( 15, 16,  3),\n ivec3( 17, 18, 19),\n ivec3( 20, 21, 22),\n ivec3( 23, 24, 25),\n ivec3( 26, 27, 20),\n ivec3( 28, 29, 30),\n ivec3( 27, 31, 32),\n ivec3( 33, 34, 29),\n ivec3( 35, 36, 37),\n ivec3( 38, 39, 40),\n ivec3( 41, 42, 43),\n ivec3( 44, 24, 23),\n ivec3( 38, 45, 46),\n ivec3( 47, 48, 19),\n ivec3( 49, 50, 51),\n ivec3( 52, 53, 54),\n ivec3( 55, 56, 39),\n ivec3( 57, 58, 59),\n ivec3( 60, 61, 62),\n ivec3( 63, 56, 64),\n ivec3( 62, 42, 41),\n ivec3( 65, 66, 67),\n ivec3( 68, 60, 69),\n ivec3( 70, 71, 72),\n ivec3( 73, 74, 75),\n ivec3( 76, 77, 78),\n ivec3( 57, 68, 58),\n ivec3( 79, 80, 39),\n ivec3( 81, 25, 82),\n ivec3( 83, 48, 84),\n ivec3( 14, 85, 84),\n ivec3( 45, 38, 86),\n ivec3( 87, 44, 23),\n ivec3( 88, 51, 89),\n ivec3( 90, 51, 88),\n ivec3( 46, 88, 91),\n ivec3( 92, 93, 90),\n ivec3( 47, 94, 95),\n ivec3( 68, 69, 96),\n ivec3( 97, 93, 98),\n ivec3( 20, 22, 26),\n ivec3( 76, 85, 99),\n ivec3( 40, 14, 84),\n ivec3(100, 28, 54),\n ivec3(101, 35, 37),\n ivec3(102,103,104),\n ivec3( 83, 76, 70),\n ivec3( 75, 74, 57),\n ivec3( 98, 93, 94),\n ivec3(105, 73, 12),\n ivec3( 91, 38, 46),\n ivec3(106, 67,105),\n ivec3(104,103,107),\n ivec3( 23,108, 87),\n ivec3(109,  2,  1),\n ivec3( 13, 36,110),\n ivec3(111, 71,112),\n ivec3( 91, 55, 39),\n ivec3(113, 42,114),\n ivec3( 68, 57, 74),\n ivec3( 59, 58, 15),\n ivec3(115,101, 34),\n ivec3(104, 37, 36),\n ivec3(102, 26,103),\n ivec3(106,105, 12),\n ivec3( 68, 74,116),\n ivec3(117,118,119),\n ivec3(120,121,122),\n ivec3(  3, 32,  1),\n ivec3( 83, 85, 76),\n ivec3( 36, 32, 31),\n ivec3(123, 73, 75),\n ivec3( 70, 72, 83),\n ivec3( 32, 36, 13),\n ivec3(  7, 63, 64),\n ivec3( 37,104,101),\n ivec3(124, 95, 92),\n ivec3(125, 30,107),\n ivec3(126, 81,124),\n ivec3( 18, 94, 19),\n ivec3(111, 11, 10),\n ivec3( 51,  9, 89),\n ivec3( 94,127, 98),\n ivec3( 15,  3,  2),\n ivec3( 86, 38, 40),\n ivec3( 34, 33,115),\n ivec3( 46, 45,128),\n ivec3( 40,129, 14),\n ivec3(107, 29, 34),\n ivec3(130,123, 75),\n ivec3(128,131, 46),\n ivec3(132,133,134),\n ivec3( 79, 10, 80),\n ivec3(124, 81, 95),\n ivec3(132, 10, 49),\n ivec3(121,  4,117),\n ivec3( 48, 83, 19),\n ivec3( 68, 96, 58),\n ivec3(114,107,135),\n ivec3(103, 22,135),\n ivec3( 66,118, 60),\n ivec3( 11,111,112),\n ivec3( 14,109,  1),\n ivec3( 12,136,106),\n ivec3(137, 28,100),\n ivec3(  8, 55, 91),\n ivec3(138, 32,  3),\n ivec3( 24, 82, 25),\n ivec3( 44,131, 24),\n ivec3(124, 92, 88),\n ivec3( 41,139, 21),\n ivec3( 89,  8, 91),\n ivec3( 65, 67,122),\n ivec3( 94, 18,127),\n ivec3(  6, 61,118),\n ivec3(132,134, 10),\n ivec3( 67,106,122),\n ivec3( 56, 55,140),\n ivec3(109,123,130),\n ivec3(106,136,120),\n ivec3( 34,104,107),\n ivec3( 81, 48, 95),\n ivec3(137,112, 78),\n ivec3( 49, 10, 79),\n ivec3( 62, 41, 69),\n ivec3( 41, 43,139),\n ivec3(136,100,120),\n ivec3(123,109, 40),\n ivec3(141,107,114),\n ivec3(142, 13,110),\n ivec3(100,136, 11),\n ivec3(101,115, 35),\n ivec3(114, 42, 62),\n ivec3(138, 27, 32),\n ivec3(  8, 89,  9),\n ivec3( 63,  7,  9),\n ivec3( 86, 84, 81),\n ivec3( 17,133,127),\n ivec3(  7, 64,140),\n ivec3(121,120,100),\n ivec3(132, 98,133),\n ivec3( 89, 91, 88),\n ivec3( 96, 69, 21),\n ivec3( 50,  9, 51),\n ivec3( 21, 69, 41),\n ivec3( 26,102, 36),\n ivec3(143, 54, 30),\n ivec3( 42,113, 43),\n ivec3( 28,144, 29),\n ivec3( 73,123, 12),\n ivec3( 52,143,141),\n ivec3(103,135,107),\n ivec3( 92, 95, 94),\n ivec3(  1, 32, 13),\n ivec3(108, 23,145),\n ivec3( 92, 90, 88),\n ivec3( 11,136, 12),\n ivec3(109, 59,  2),\n ivec3(146, 44, 87),\n ivec3(141,  4, 53),\n ivec3( 54, 28, 30),\n ivec3(115, 33,144),\n ivec3( 98,132, 97),\n ivec3( 16, 20, 27),\n ivec3(122,117,119),\n ivec3(106,120,122),\n ivec3( 57, 59,130),\n ivec3(142, 99, 85),\n ivec3( 52,141, 53),\n ivec3(132, 49, 97),\n ivec3(108,145,126),\n ivec3(101,104, 34),\n ivec3(116, 67, 66),\n ivec3(137,100,112),\n ivec3(110, 35,144),\n ivec3(  5,141,114),\n ivec3( 35,110, 36),\n ivec3(  6,  5, 61),\n ivec3( 40, 80,123),\n ivec3(116, 73,105),\n ivec3( 30,125,143),\n ivec3( 16, 15, 58),\n ivec3( 70, 78, 71),\n ivec3(111, 10,134),\n ivec3( 73,116, 74),\n ivec3( 86, 40, 84),\n ivec3( 60, 62, 69),\n ivec3( 72, 71,111),\n ivec3( 14,142, 85),\n ivec3(131,128, 24),\n ivec3(100, 11,112),\n ivec3( 21, 16, 96),\n ivec3( 82, 86, 81),\n ivec3( 76, 99, 77),\n ivec3( 70, 76, 78),\n ivec3(146,131, 44),\n ivec3( 49, 90, 97),\n ivec3( 45, 86, 82),\n ivec3( 21, 20, 16),\n ivec3(145, 25, 81),\n ivec3(116, 66, 68),\n ivec3( 29,107, 30),\n ivec3( 31, 26, 36),\n ivec3( 67,116,105),\n ivec3(111,134,133),\n ivec3( 84, 85, 83),\n ivec3( 99,142,110),\n ivec3(140, 64, 56),\n ivec3( 50, 63,  9),\n ivec3(147,126,124),\n ivec3(139,135, 21),\n ivec3( 78, 77, 28),\n ivec3( 54,143, 52),\n ivec3(114, 62, 61),\n ivec3( 49, 79, 50),\n ivec3(108,126,147),\n ivec3( 56, 79, 39),\n ivec3(113,114,135),\n ivec3(122,121,117),\n ivec3( 72, 19, 83),\n ivec3(125,107,143),\n ivec3( 23, 25,145),\n ivec3( 82,128, 45),\n ivec3( 29,144, 33),\n ivec3( 26, 22,103),\n ivec3(139, 43,135),\n ivec3( 99,110, 77),\n ivec3( 60,118, 61),\n ivec3(147,124, 88),\n ivec3(123, 80, 12),\n ivec3( 54, 53,121),\n ivec3(142, 14, 13),\n ivec3(130, 59,109),\n ivec3( 75, 57,130),\n ivec3(  3, 27,138),\n ivec3( 55,  8,140),\n ivec3(115,144, 35),\n ivec3(128, 82, 24),\n ivec3(121,100, 54),\n ivec3( 92, 94, 93),\n ivec3( 18, 17,127),\n ivec3( 65,122,119),\n ivec3( 16, 58, 96),\n ivec3(145, 81,126),\n ivec3(118,117,  6),\n ivec3( 50, 79,148),\n ivec3( 88, 46,146),\n ivec3( 80, 10, 12),\n ivec3(148, 63, 50),\n ivec3( 21,135, 22),\n ivec3( 94, 47, 19),\n ivec3(110, 28, 77),\n ivec3( 66, 60, 68),\n ivec3(147, 87,108),\n ivec3( 46,131,146),\n ivec3(111, 17, 72),\n ivec3( 27, 26, 31),\n ivec3(121, 53,  4),\n ivec3( 90, 93, 97),\n ivec3( 78, 28,137),\n ivec3( 65,118, 66),\n ivec3( 17, 19, 72),\n ivec3( 65,119,118),\n ivec3( 43,113,135),\n ivec3( 81, 84, 48),\n ivec3( 16, 27,  3),\n ivec3(109, 14,129),\n ivec3( 51, 90, 49),\n ivec3(111,133, 17),\n ivec3(144, 28,110),\n ivec3(129, 40,109),\n ivec3( 36,102,104),\n ivec3( 91, 39, 38),\n ivec3( 95, 48, 47),\n ivec3(  4,141,  5),\n ivec3( 71, 78,112),\n ivec3(133, 98,127),\n ivec3(147, 88,146),\n ivec3(143,107,141),\n ivec3( 59, 15,  2),\n ivec3(  4,  6,117),\n ivec3(147,146, 87),\n ivec3(140,  8,  7),\n ivec3(  5,114, 61),\n ivec3( 39, 80, 40),\n ivec3(148, 79, 56),\n ivec3( 63,148,56));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"struct AABB {\n    vec3 bmin;\n    vec3 bmax;\n};\n\n\n\nvoid makeNode(out vec4 fragColor, vec2 fragCoord, int re) {\n    vec3 v[ve], v0, v1, v2;\n    ivec3 f[fe], id;\n    float x, y;\n    Mesh(v, f);\n    for(int i = 0; i < fe; i++) { // for each triangle build a leaf node\n        id = f[i] - 1;\n        v0 = v[id.x];\n        v1 = v[id.y];\n        v2 = v[id.z];\n        x = float(i % re) + 0.5;\n        y = float(((i / re) % re) * 5);\n        if(fragCoord == vec2(x, 4.5+y)) fragColor.xyz = v2; // 3rd Vertices\n        if(fragCoord == vec2(x, 3.5+y)) fragColor.xyz = v1; // 2nd Vertices\n        if(fragCoord == vec2(x, 2.5+y)) fragColor.xyz = v0; // 1st Vertices\n        if(fragCoord == vec2(x, 1.5+y)) fragColor.xyz = min(v0, min(v1, v2)); // Min Box\n        if(fragCoord == vec2(x, 0.5+y)) fragColor.xyz = max(v0, max(v1, v2)); // Max Box\n    }\n}\n\nvoid constructBVH(out vec4 fragColor, vec2 fragCoord, int bu) {\n    fragColor = vec4(0);\n    bool longAxis = iResolution.x > iResolution.y;\n    int re = int(longAxis ? iResolution.x : iResolution.y);\n    vec2 fCoord = longAxis ? fragCoord.yx : fragCoord;\n    vec2 c = vec2(((fe / re) % re + 1) * 5, min(fe, re));\n    vec2 clip = longAxis ? c : c.yx;\n    if(all(lessThan(fCoord, clip))) {\n        if(bu == 1) { // if resolution changed rebuilt again\n            makeNode(fragColor, fragCoord, re);\n        } else { // else take previous frame and return\n            fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n            return;\n        }\n    }\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    #if interactive\n    int reset = int(texelFetch(iChannel0, ivec2(0, 2), 0).x);\n    #else\n    int reset = int(texelFetch(iChannel0, ivec2(0), 0).x);\n    #endif\n    constructBVH(fragColor, fragCoord, reset);\n}","name":"Buffer B","description":"","type":"buffer"}]}