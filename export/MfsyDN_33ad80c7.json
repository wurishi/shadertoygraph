{"ver":"0.1","info":{"id":"MfsyDN","date":"1721168680","viewed":81,"name":"Opal","username":"elifront","description":"Opal circle inspired by https://www.youtube.com/watch?v=pcI9PuU9O_c","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["bw","opal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Get the normalized coordinates (0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Correct the aspect ratio\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(0.);\n    \n    float count = 50.;\n    \n    for (float i = 0.; i < count; i++) {\n\n        // Calculate the distance and angle from the center of the circle\n        float dist = length(uv);\n        float angle = atan(uv.y, uv.x);\n\n        // Set the base radius of the circle\n        float radius = 0.3 +(count-i)*.009;\n\n        // Set the base thickness of the outline\n        float thickness = 0.01;\n        \n        float amp = .4;\n        float sep = .03;\n\n        float noisyRadius= radius + noise(uv + iTime-i*sep)*amp;\n        // Calculate the edge using smoothstep\n        float edge = smoothstep(noisyRadius - thickness, noisyRadius, dist) - smoothstep(noisyRadius, noisyRadius + thickness, dist);\n        \n        color+=vec3(edge)*pow((count-i)/count, 2.)*.3;\n    }\n\n    // Set the output color\n    fragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}