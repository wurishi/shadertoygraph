{"ver":"0.1","info":{"id":"XdtSRN","date":"1458017319","viewed":1937,"name":"Shader Lesson #6, loops","username":"hubbe","description":"Simple mandelbrot fractal, illustrating how to use loops in shaders.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["educational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int mandelbrot(vec2 uv) {\n    vec2 z = uv;\n    for (int i = 0; i < 300; i++) {\n        // dot(z, z) > 4.0 is the same as length(z) > 2.0, but perhaps faster.\n        if (dot(z, z) > 4.0) return i;\n        // (x+yi)^2 = (x+yi) * (x+yi) = x^2 + (yi)^2 + 2xyi = x^2 - y^2 + 2xyi\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + uv;\n    }\n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen coordinate, roughly -2 to +2\n    vec2 uv = (fragCoord.xy*2.0 - iResolution.xy) * 2.0/ iResolution.x;\n    \n    // Evaluate mandelbrot for this coordinate.\n    float ret = float(mandelbrot(uv));\n    \n    // Turn the iteration count into a color.\n\tfragColor = vec4(sin(vec3(0.1, 0.2, 0.5) * ret), 1);\n}","name":"Image","description":"","type":"image"}]}