{"ver":"0.1","info":{"id":"cssfRr","date":"1688411160","viewed":60,"name":"Chladni with particles","username":"Malu9999","description":"A particle simulation for Chladni patterns\nThank you for the inspiration on how to do particles: https://www.shadertoy.com/view/wdGSzw\nAnd thank you for the inspiration on how to simulate Chladni Pattern: https://www.shadertoy.com/view/WdKXRV\n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["particles","chladni"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec4 part = texture(iChannel0,uv);\n\tfloat c = step(0.001,part.x);\n\tvec3 col=vec3(1.,.9,.8)*c*(1.-abs(uv.x-.5));\n    \n    vec4 correct_chladni = texture(iChannel1,uv);\n    \n    fragColor = vec4(col.xy, /*correct_chladni.z+*/ col.z, 1.);\n}\n\n/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    fragColor = texture(iChannel1,uv);\n}*/","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define V 10\n#define Vf 4.0\n#define loss 0.7\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// check if there is an arriving particle at this pixel in next frame\nfloat arrivingParticle(vec2 coord, out vec4 partData) {\n\t// scan area from -D to D\n    for (int i=-V; i<V; i++) {\n        for (int j=-V; j<V; j++) {\n            \n        \n            // position to check\n            vec2 arrCoord = coord + vec2(i,j);\n            vec2 arruv = arrCoord/iResolution.xy;\n            vec4 data = texture(iChannel0, arruv);\n            \n            // no particles here\n            if (dot(data,data)<.1) continue;\n            \n            vec2 velocity = 2.0*Vf*(data.zw - 0.5);\n            \n            velocity *= loss;\n            velocity -= 3.0 * (texture(iChannel1, arruv).xy-0.5);\n            velocity = clamp(velocity, -Vf, Vf);\n            \n            data.zw = (velocity / (2.0*Vf)) + 0.5;\n\n            // get next position of particle\n            vec2 nextCoord = data.xy + velocity /*+ 10.0*(rand(velocity)-0.5)*/;\n            \n            \n\n            // distance between next position and current pixel\n            vec2 offset = abs(coord - nextCoord);\n            // if the distance is within half a pixel pick this particle\n            // (other arriving particles are dismissed)\n            if (offset.x<.5 && offset.y<.5) {\n                data.xy += velocity;\n                partData = data;\n                return 1.;\n            }\n        }\n    }\n    // no particles arriving here\n\treturn 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n   \n    // get the data of a particle arriving at this pixel \n    vec4 partData;\n    float p = arrivingParticle(fragCoord, partData);\n\n    // no particles, empty pixel\n    if (p<1.) {\n        if(mod(iTime + 70.0 * rand(fragCoord), 70.0) < 0.01) {\n            fragColor = vec4(fragCoord.xy,0.5,0.5); \n        } else{\n            fragColor = vec4(0.0);\n        }\n        return;\n    }\n    \n    \n    // update position with current velocity altered by channels r & b in the video\n    //float vel=max(0.,1.-length(texture(iChannel1,uv).xy)*.5);\n    \n    //partData.xy+=partData.zw;\n\n    //set particle data\n    fragColor = partData;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PI 3.141592654\n\n// params.x = M, params.y = N, params.z = A, params.w = B\nvoid gradient(vec2 p, vec4 params, out vec2 grad) {\n\n    grad = vec2(\n        2.0 * PI \n            * (params.z * sin(PI * params.x * p.y) * sin(PI * params.y * p.x) \n            + params.w * sin(PI * params.x * p.x) * sin(PI * params.y * p.y)) \n            * (params.z * params.y * sin(PI * params.x * p.y) * cos(PI * params.y * p.x) \n            + params.w * params.x * cos(PI * params.x * p.x) * sin(PI * params.y * p.y)),\n        2.0 * PI \n            * (params.z * sin(PI * params.x * p.y) * sin(PI * params.y * p.x) \n            + params.w * sin(PI * params.x * p.x) * sin(PI * params.y * p.y)) \n            * (params.z * params.x * cos(PI * params.x * p.y) * sin(PI * params.y * p.x) \n            + params.w * params.x * sin(PI * params.x * p.x) * cos(PI * params.y * p.y))\n    );\n}\n\nfloat chladni_function(vec2 p, vec4 params) {\n    return \n        params.z * sin(PI * params.y * p.x) * sin(PI * params.x * p.y) \n        + params.w * sin(PI * params.x * p.x) * sin(PI * params.y * p.y);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uv2 = vec2(2.0) * uv - vec2(1.0);\n    \n    vec2 grad;\n    \n    vec4 s1 = vec4(5.0, 3.0, 1.0, 1.0);\n    vec4 s2 = vec4(2.0, 7.0, 1.0, 1.0);\n    \n    float t = 0.5 * sin(0.2*iTime) + 0.5;\n    \n    vec4 params = mix(s1,s2,t);\n    \n    gradient(uv2, params, grad);\n    \n    vec2 max_amp = 2.0 * PI * vec2(\n        (params.z + params.w) * (params.z * params.y + params.w * params.x),\n        (params.z + params.w) * (params.z * params.x + params.w * params.y)\n    );\n    \n    \n    fragColor.xy = (grad + max_amp)/(2.0*max_amp);\n    fragColor.z = 0.5*step(abs(chladni_function(uv2, params)), 0.05);\n    \n    \n}","name":"Buffer B","description":"","type":"buffer"}]}