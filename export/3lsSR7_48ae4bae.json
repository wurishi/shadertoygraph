{"ver":"0.1","info":{"id":"3lsSR7","date":"1562463894","viewed":903,"name":"Explosive Turbulent Noise","username":"OctopusX","description":"Just playing with FBMs","likes":37,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","explosion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define UVScale \t\t\t 0.4\n#define Speed\t\t\t\t 0.6\n\n#define FBM_WarpPrimary\t\t-0.24\n#define FBM_WarpSecond\t\t 0.29\n#define FBM_WarpPersist \t 0.78\n#define FBM_EvalPersist \t 0.62\n#define FBM_Persistence \t 0.5\n#define FBM_Lacunarity \t\t 2.2\n#define FBM_Octaves \t\t 5\n\n\n\n//fork from Dave Hoskins\n//https://www.shadertoy.com/view/4djSRW\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx) * vec4(1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n\treturn -1.0 + 2.0 * fract(vec4(\n        (p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y,\n        (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x)\n    );\n}\n\n//offsets for noise\nconst vec3 nbs[] = vec3[8] (\n    vec3(0.0, 0.0, 0.0),vec3(0.0, 1.0, 0.0),vec3(1.0, 0.0, 0.0),vec3(1.0, 1.0, 0.0),\n    vec3(0.0, 0.0, 1.0),vec3(0.0, 1.0, 1.0),vec3(1.0, 0.0, 1.0),vec3(1.0, 1.0, 1.0)\n);\n\n//'Simplex out of value noise', forked from: https://www.shadertoy.com/view/XltXRH\n//not sure about performance, is this faster than classic simplex noise?\nvec4 AchNoise3D(vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 fr = smoothstep(0.0, 1.0, fract(x));\n\n    vec4 L1C1 = mix(hash43(p+nbs[0]), hash43(p+nbs[2]), fr.x);\n    vec4 L1C2 = mix(hash43(p+nbs[1]), hash43(p+nbs[3]), fr.x);\n    vec4 L1C3 = mix(hash43(p+nbs[4]), hash43(p+nbs[6]), fr.x);\n    vec4 L1C4 = mix(hash43(p+nbs[5]), hash43(p+nbs[7]), fr.x);\n    vec4 L2C1 = mix(L1C1, L1C2, fr.y);\n    vec4 L2C2 = mix(L1C3, L1C4, fr.y);\n    return mix(L2C1, L2C2, fr.z);\n}\n\nvec4 ValueSimplex3D(vec3 p)\n{\n\tvec4 a = AchNoise3D(p);\n\tvec4 b = AchNoise3D(p + 120.5);\n\treturn (a + b) * 0.5;\n}\n\n//my FBM\nvec4 FBM(vec3 p)\n{\n    vec4 f, s, n = vec4(0.0);\n    float a = 1.0, w = 0.0;\n    for (int i=0; i<FBM_Octaves; i++)\n    {\n        n = ValueSimplex3D(p);\n        f += (abs(n)) * a;\t//billowed-like\n        s += n.zwxy *a;\n        a *= FBM_Persistence;\n        w *= FBM_WarpPersist;\n        p *= FBM_Lacunarity;\n        p += n.xyz * FBM_WarpPrimary *w;\n        p += s.xyz * FBM_WarpSecond;\n        p.z *= FBM_EvalPersist +(f.w *0.5+0.5) *0.015;\n    }\n    return f;\n}\n\nvoid mainImage(out vec4 col, in vec2 uv)\n{\n    float aspect = iResolution.x / iResolution.y;\n    uv /= iResolution.xy / UVScale *0.1; uv.x *= aspect;\n    col = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    vec4 fbm = (FBM(vec3(uv, iTime *Speed +100.0)));\n    float explosionGrad = (dot(fbm.xyzw, fbm.yxwx)) *0.5;\n    explosionGrad = pow(explosionGrad, 1.3);\n    explosionGrad = smoothstep(0.0,1.0,explosionGrad);\n    \n    #define color0 vec3(1.2,0.0,0.0)\n    #define color1 vec3(0.9,0.7,0.3)\n    \n    col.xyz = explosionGrad * mix(color0, color1, explosionGrad) *1.2 +0.05;\n}","name":"Image","description":"","type":"image"}]}