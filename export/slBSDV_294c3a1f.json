{"ver":"0.1","info":{"id":"slBSDV","date":"1628627748","viewed":283,"name":"Trip - 1","username":"birdbird","description":"Using log polar-tiling (as described here https://www.osar.fr/notes/logspherical/) to create an infinitely zooming shader.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["infinitezoom","logtiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = acos(-1.);\n\n//https://gist.github.com/companje/29408948f1e8be54dd5733a74ca49bb9\nfloat map_range(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n//https://gist.github.com/ayamflow/c06bc0c8a64f985dd431bd0ac5b557cd\nvec2 rotateUV(vec2 uv, float rotation)\n{\n    float mid = 0.5;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nfloat map(vec2 uv) {\n    int iterations = 2;\n    vec2 ouv = uv;\n    \n    uv.y += iTime/10.;\n    uv = abs(mod(uv, 1.)*4. - 2.);\n    \n    for(int i = 0; i < iterations; i ++) {\n        float fi = float(i);\n        float fit = float(iterations);\n        \n        uv = abs(uv - (vec2(0.5 + (fi/fit)*0.6 )));\n        \n        uv *= 1.16;\n        \n        uv = rotateUV(uv, map_range(ouv.x,-1.,1., 0.2, 5.) );\n    }\n    \n    return sin(length(uv)*10.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 uv_o = uv;\n    \n    //Barrel distortion\n    vec2 w_uv = uv * dot(uv,uv);\n    uv = mix(uv, w_uv, 0.4);\n    \n    //Log polar-tiling -> https://www.osar.fr/notes/logspherical/\n    vec2 pos = vec2(log(length(uv)), atan(uv.y, uv.x));\n    pos *= 6./pi;\n    pos = fract(pos) - 0.5;   \n    uv = pos;\n    uv.x -= iTime/(2.8) + 5700.;\n    \n    //RGB offset\n    float offset_range = 0.04;\n    float offset = map_range(sin(iTime),-1.,1.,0.2,1.) * offset_range;\n    float offset_y = cos(iTime) * offset_range * 0.2;\n    \n    float cr = map(uv + vec2(offset, 0.));\n    float cg = map(uv + vec2(offset*2., offset_y*2.));\n    float cb = map(uv + vec2(offset*3., offset_y*3.));\n    vec3 color = vec3(cr, cg, cb)*3.;\n    \n    //Fade to black towards center to hide aliasing\n    float mask = (1. - pow(length(uv_o),0.96) )*3.;\n    color -= mask;\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}