{"ver":"0.1","info":{"id":"Dss3R2","date":"1667143249","viewed":55,"name":"Raymarching of different shapes","username":"Mortalsky","description":"Learning shader to raymarching different shapes","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Max_Step 100\n#define Max_Distance 100.\n#define Surf_Distance 0.001\n\n// Capsule function\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab,ap)/dot(ab,ab);\n    \n    t = clamp(t,0.,1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p - c) - r;\n}\n\n// Torus function\nfloat Torus(vec3 p, vec2 r)\n{\n    float x = length(p.xz) - r.x;\n    \n    return length(vec2(x,p.y)) - r.y;\n}\n\n// Cuboid function\nfloat Cuboid(vec3 p, vec3 s)\n{\n    return length(max(abs(p) - s,0.));\n}\n\n// Cylinder function\nfloat Cylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab,ap)/dot(ab,ab);\n    \n    //t = clamp(t,0.,1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p - c) - r;\n    float y =(abs(t - 0.5) - 0.5) * length(ab);\n    float e = length(max(vec2(x,y) , 0.0));\n    float i = min(max(x,y), 0.0);\n    \n    return e + i;\n}\n\n// distance function for sphere and plane to the camera\nfloat GetDis(vec3 p)\n{\n    // Sphere cordinates\n    vec4 s = vec4(-3,1,5,0.6);\n    \n    // Distance calculation for objects\n    float Sphere = length(p - s.xyz) - s.w;\n    \n    float Plane = p.y + 1.;\n    \n    float capsule = Capsule(p, vec3 (-1.5,1.5,5), vec3(-1.5,0.5,5), 0.25);\n    \n    float torus = Torus(p - vec3(2, 1., 5), vec2(1, 0.2));\n   \n    float cuboid = Cuboid(p - vec3(4.5, 1, 5), vec3(0.5, 0.5, 0.5));\n    \n    float cylinder = Cylinder(p, vec3 (0,1.5,5), vec3(0,0.5,5), 0.3);\n    \n    // View to camera\n    float f = min(cylinder, Plane);\n    f = min(torus, f);\n    f = min(Sphere, f);\n    f = min(cuboid, f);\n    f = min(capsule, f);\n    \n    return f;\n}\n\n// Raymarch function\nfloat RayMar ( vec3 ro, vec3 rd) \n{\n    float d = 0.;\n    for(int i = 0; i < Max_Step; i++)\n    {\n        vec3 p = ro + rd*d;\n        float ds = GetDis(p);\n        \n        d += ds;\n        \n        // Implementing limits\n        if(d < Surf_Distance || ds > Max_Distance) break;\n    }\n    \n    return d;\n}\n\n// Normal function \nvec3 GetNormal(vec3 p)\n{\n    float d = GetDis(p);\n    vec2 e = vec2(0.1, 0);\n    \n    vec3 n = d - vec3(GetDis(p - e.xyy), GetDis(p - e.yxy), GetDis(p - e.yyx));\n    \n    return normalize(n);\n}\n\n// Implementing difuse light\nfloat GetLight(vec3 p)\n{\n    // Light position\n    vec3 LPos = vec3(0, 8, 6);\n    \n    LPos += vec3(2.*sin(iTime*2.), 0 , 2.*cos(iTime*2.)); \n    vec3 L = normalize(LPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,L), 0., 1.);\n    \n    float d = RayMar(p + n * Surf_Distance *100.0, L);\n    if( d < length(LPos - p) ) dif *= 0.4; \n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    // Variable of camera location and directions\n    vec3 cam_pos = vec3(1, 2, -3);\n    vec3 cam_dir = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMar(cam_pos,cam_dir);\n    \n    // locating distance\n    vec3 p = cam_pos + cam_dir * d;\n    \n    // Adding lights\n    float dif = GetLight(p);\n    \n    vec4 col = vec4(vec3(dif), 1.);\n    \n    col = pow(col, vec4(.4545)); // gamma correction\n        \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}