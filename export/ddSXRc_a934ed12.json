{"ver":"0.1","info":{"id":"ddSXRc","date":"1670616904","viewed":101,"name":"Fork Damaged VC xidist 896","username":"xidist","description":"Simulating a damaged VCR playing a video\n\nstill not sure ho to make the bar look more fine in the ripple part idk what to call it\nhttps://github.com/CIS-566-Fall-2022/lab03-color\n\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    //make bounds in y and then apply tan to x and y uv\n    //make y move up in time\n    vec2 y_b = vec2(0.0, 0.15) + (tan(iTime)); // bounds: lower, upper\n    //we will move these bounds up in time\n    if ((uv.y < y_b[1]) && (uv.y > y_b[0])) {\n        warpedUv.x *= tan(iTime)*warpedUv.y;\n    }\n        \n    \n    vec2 offset1 = vec2(0.04); // r\n    vec2 offset2 = vec2(0.02); // g\n    vec2 offset3 = vec2(0.030); // b\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}