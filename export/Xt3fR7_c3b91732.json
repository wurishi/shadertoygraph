{"ver":"0.1","info":{"id":"Xt3fR7","date":"1538957011","viewed":302,"name":"Monochrome Shading","username":"funnykarl","description":"Makes the image 1-bit and uses shading patterns to retain information based on the luminance.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["monochrome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uint[] patterns = uint[](0x0000U, 0x0400U, 0x0420U, 0x24A0U, 0x25A4U, 0xA5A5U, 0xB5ADU, 0xF5BDU, 0xFDBFU, 0xFFBFU, 0xFFFFU);\nuint shadeSize = 4U;\nuint nOfPatterns = 11U;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uvec2 shadeCoords = uvec2(uint(fragCoord.x) % shadeSize, uint(fragCoord.y) % shadeSize);\n    vec4 c = texture(iChannel0, uv);\n    \n    // https://en.wikipedia.org/wiki/Relative_luminance\n\tfloat luminance = 0.2126*c.x + 0.7152*c.y + 0.0722*c.z;\n    uint chosenPattern = uint(luminance * float(nOfPatterns + 1U));  \n    bool isWhitePixel = (patterns[min(chosenPattern, nOfPatterns)] >> (shadeCoords.x + shadeCoords.y * 4U) & 0x1U) > 0U;\n    \n    // Temporary green screen code.\n    float greenThreshold = 0.5;\n    bool isGreenScreen = c.y >= greenThreshold && c.x < greenThreshold && c.z < greenThreshold;\n    \n    // Default to black.\n    c = vec4(0.0,0.0,0.0,1.0);\n    \n    if(!isGreenScreen && isWhitePixel)\n    {\n\t\tc = vec4(1.0,1.0,1.0, 1.0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(c.xyz,1.0);\n}\n","name":"Image","description":"","type":"image"}]}