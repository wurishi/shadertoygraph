{"ver":"0.1","info":{"id":"msSGWc","date":"1668211519","viewed":89,"name":"Vector decomposition - inv UV","username":"mrboggieman","description":"Perform an inverse UV lookup by splitting the position into defined vector components, solving the linear vector equations making up the vector. Click and drag to control the other co-ordinate.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["uv","vector","inverse","decomposition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float det2(in vec2 a, in vec2 b) {\n    return a.x * b.y - b.x * a.y;\n    //return determinant(mat2(a, b)); //same thing\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n    \n    //two vectors we want to de-compose our position into with varying magnitudes\n    vec2 a = length(iMouse.xy) > 10.0 ? iMouse.xy / iResolution.xy : vec2(0.2, 0.8);\n    vec2 b = vec2(sin(iTime), cos(iTime)) / 4.0 + vec2(1.0, 0.0);\n\n    //solve linear equation of vectors\n    vec2 uv = vec2(det2(p, a), det2(b, p)) / det2(b, a);\n    \n    //simpler code using matrices (tnx @oneshade)\n    //vec2 uv = inverse(mat2(b, a)) * p; \n    \n    if (uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0) {\n        fragColor = texture(iChannel0, uv);\n    } else {\n        fragColor = vec4(1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}