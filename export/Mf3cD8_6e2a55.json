{"ver":"0.1","info":{"id":"Mf3cD8","date":"1730562594","viewed":71,"name":"Triangle Wireframe Grid","username":"EliasWick","description":"Triangularized wireframe from 2D input.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","triangles","wireframe","tris"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getAverageLuminance(vec2 uv) {\n    vec3 rgb = texture(iChannel0, uv).rgb;\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\n}\n\nfloat distanceToLineSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 ba = b - a;\n    float ba_dot_ba = dot(ba, ba);\n    if (ba_dot_ba == 0.0) {\n        return length(p - a);\n    }\n    vec2 pa = p - a;\n    float h = clamp(dot(pa, ba) / ba_dot_ba, 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\n// Main shader function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Grid settings\n    vec2 gridSize = vec2(32.0);\n    vec2 gridCoord = floor(uv * gridSize);\n\n    // Calculate grid points\n    vec2 p0 = gridCoord / gridSize;\n    vec2 p1 = (gridCoord + vec2(1.0, 0.0)) / gridSize;\n    vec2 p2 = (gridCoord + vec2(0.0, 1.0)) / gridSize;\n    vec2 p3 = (gridCoord + vec2(1.0, 1.0)) / gridSize;\n\n    // Clamp positions to [0, 1]\n    p1 = clamp(p1, 0.0, 1.0);\n    p2 = clamp(p2, 0.0, 1.0);\n    p3 = clamp(p3, 0.0, 1.0);\n\n    // Compute luminance values\n    float lum0 = getAverageLuminance(p0);\n    float lum1 = getAverageLuminance(p1);\n    float lum2 = getAverageLuminance(p2);\n    float lum3 = getAverageLuminance(p3);\n\n    // Threshold settings\n    float threshold = 0.5;\n    float lineThreshold = 0.002;\n    float edgeIntensity = 0.0;\n\n    // Boolean flags for luminance thresholds\n    bool lum0Above = lum0 > threshold;\n    bool lum1Above = lum1 > threshold;\n    bool lum2Above = lum2 > threshold;\n    bool lum3Above = lum3 > threshold;\n\n    // Draw lines between points if luminance is above threshold\n    if (lum0Above && lum1Above) {\n        float dist = distanceToLineSegment(uv, p0, p1);\n        edgeIntensity += smoothstep(lineThreshold, 0.0, dist);\n    }\n\n    if (lum0Above && lum2Above) {\n        float dist = distanceToLineSegment(uv, p0, p2);\n        edgeIntensity += smoothstep(lineThreshold, 0.0, dist);\n    }\n\n    if (lum1Above && lum3Above) {\n        float dist = distanceToLineSegment(uv, p1, p3);\n        edgeIntensity += smoothstep(lineThreshold, 0.0, dist);\n    }\n\n    if (lum2Above && lum3Above) {\n        float dist = distanceToLineSegment(uv, p2, p3);\n        edgeIntensity += smoothstep(lineThreshold, 0.0, dist);\n    }\n\n    // Tris\n    if (lum0Above && lum3Above) {\n        float dist = distanceToLineSegment(uv, p0, p3);\n        edgeIntensity += smoothstep(lineThreshold, 0.0, dist);\n    }\n\n    if (lum1Above && lum2Above) {\n        float dist = distanceToLineSegment(uv, p1, p2);\n        edgeIntensity += smoothstep(lineThreshold, 0.0, dist);\n    }\n\n    edgeIntensity = clamp(edgeIntensity, 0.0, 1.0);\n    vec3 wireColor = mix(vec3(0.0), vec3(1.0), edgeIntensity);\n    fragColor = vec4(wireColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}