{"ver":"0.1","info":{"id":"fsBGzR","date":"1616785940","viewed":65,"name":"avoodoocado_mandelbrot","username":"avoodoocado","description":"Classic mandelbrot with a bit of navigation and zooming using the mouse","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 fractal(vec2 z, vec2 b)\n{\n    //z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y);\n    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y);\n    return z + b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-vec2(iResolution.y/2.0,0.0))/iResolution.y;\n\n    // Zoom in with mouse y\n    uv *= 2.0 - 2.0*iMouse.y / iResolution.y;\n    \n    // Pan with mouse x\n    uv -= vec2(3.0*iMouse.x / iResolution.x,0.5);\n    \n    // What is the length of the resulting fractal that defines the set?\n    float limit = 2.0;\n    \n    // Start out with a zero z value\n    vec2 z = vec2(0.0);\n    \n    // How many times should we loop?\n    float count = 50.0 + 50.0 * sin(iTime);\n    \n    // Resulting color\n    vec3 col = vec3(0); \n    \n    for(float i=0.0;i<count;i++)\n    {\n        z = fractal(z, uv);\n        \n        // Abort after reaching the limit\n        if(length(z) > limit)\n        {\n            // Outside the fractal, color based on how many counts was required to abort\n            col = 3.0 * i / count * vec3(1.0, 0.2, 0.2); \n            break;\n        }\n        \n        // Inside the fractal, color based on how close we got to the limit\n        //col = vec3(0, length(z), 0);        \n    }\n      \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}