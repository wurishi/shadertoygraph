{"ver":"0.1","info":{"id":"Dlyczc","date":"1700473567","viewed":43,"name":"Ray marching Test","username":"coderintrouble","description":"I'm just working on basic ray marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_ITERATION = 16;\nconst float EPS = 0.001;\n\nstruct Ray \n{\n    vec3 origin;\n    vec3 direction;\n};\n\nfloat smin(float a, float b, float t)\n{\n    float h = clamp ( 0.5 + 0.5*(b-a)/t, 0.0, 1.0);\n    return mix (b,a, h) - t*h*(1.0-h);\n}\n\nfloat hsmin(float a, float b)\n{\n    return smin(a,b, 1.0);\n}\n\nfloat sdfSphere(in vec3 p, in vec3 c, in float r)\n{\n    return distance(c, p) - r;\n}\n\nfloat sdfScene(in vec3 p)\n{\n    float s1 = sdfSphere(p, vec3(-4.0 * sin(iTime), 0.0, 5.0), 2.0);\n    float s2 = sdfSphere(p, vec3(4.0 * sin(iTime), 0.0, 5.0), 2.0);\n    float s3 = sdfSphere(p, vec3(0.0, 4.0 * sin(iTime), 5.0), 2.0);\n    \n    return hsmin(s3, hsmin(s1,s2));\n}\n\nvec3 getNormal(in vec3 p)\n{\n    return normalize(vec3(\n        sdfScene(p + vec3(EPS, 0.0, 0.0)) -\n        sdfScene(p - vec3(EPS, 0.0, 0.0)),\n        \n        sdfScene(p + vec3(0.0, EPS, 0.0)) -\n        sdfScene(p - vec3(0.0, EPS, 0.0)),\n        \n        sdfScene(p + vec3(0.0, 0.0, EPS)) -\n        sdfScene(p - vec3(0.0, 0.0, EPS))\n     ));\n}\n\nvoid mainImage( out vec4 c, in vec2 coord )\n{\n    vec2 uv = (coord / iResolution.xy) * 2.0 - 1.0;\n    \n    Ray r ;\n    r.origin = vec3(0.0);\n    r.direction = vec3(uv.x * iResolution.x / iResolution.y, uv.y, 1.0);\n    \n    vec3 position = r.origin;\n    \n    for (int i = 0; i< MAX_ITERATION; ++i)\n    {\n        float d = sdfScene(position);\n        \n        if (d < EPS)\n        {\n            vec3 n = getNormal(position);\n            vec3 lightDir = normalize(vec3(0.0, 2.0, -4.0));\n            \n            c = vec4(max(dot(n, lightDir), 0.0));\n            c.a = 1.0;\n        }\n        \n        position += max(d, EPS) * r.direction;\n    }\n}","name":"Image","description":"","type":"image"}]}