{"ver":"0.1","info":{"id":"ct3fDf","date":"1701651072","viewed":38,"name":"masca sépia dividida em quadrant","username":"gregorya","description":"aplica o efeito sépia alternando os quadrantes","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nesse shader eu fiz uma mascara que aplica o efeito sépia alternando os quadrantes\n\nvec4 loadImage(vec2 fragCoord)\n{\n    // Coordenadas da tela (x e y)\n    vec2 uv = fragCoord/iResolution.xy * 1.0;\n    \n    // o canal 10 é utilizado para texturas\n    vec4 image = texture(iChannel0, uv);\n    \n    return image;\n}\nvec4 psBW(vec4 color)\n{\n    float bw = (min(color.r, min(color.g, color.b)) + max(color.r, max(color.g, color.b))) * 0.5;\n    return vec4(bw, bw, bw, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Determina o quadrante da textura\n    int quadrantX = int(uv.x * 2.0);\n    int quadrantY = int(uv.y * 2.0);\n    int quadrant = quadrantX + quadrantY;\n\n    vec4 originalColor = texture(iChannel0, uv);\n\n    // Alterna o efeito sépia com base na paridade do quadrante\n    if (quadrant % 2 == 1) {\n    // olho se os quadrantes são impares, para que se aplique a mascara a eles\n       vec4 image = loadImage(fragCoord);\n       vec4 marrom = vec4(0.5, 0.35, 0.25, 1.0);\n       originalColor  = marrom * psBW(image) * 3.0;\n    }\n    fragColor = originalColor;\n\n\n}","name":"Image","description":"","type":"image"}]}