{"ver":"0.1","info":{"id":"mtGBz1","date":"1701828608","viewed":55,"name":"christmas tree and lights","username":"ionaxia","description":"christmas tree and lights","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["christmas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\n    //vec3 u = f*f*(3.0-2.0*f);\n    vec3 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat sdCylinder(vec3 p, vec2 h) {\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdTorus(vec3 p, float ri, float ro) {\n    vec2 q = vec2(length(p.xz) - ri, p.y);\n    return length(q) - ro;\n}\n\n\nvoid sdAdd(vec2 d1, vec2 d2) {\n    if (d2.x < d1.x) d1 = d2;\n}\n\nfloat sdSphere( vec3 p, float r )\n{\n  return length(p)-r;\n}\n\n// min dist/color object  \n// a=(da,ca), b=(db,cb)\nvec4 opUnion(vec4 a, vec4 b) {\n    return (a.x < b.x) ? a : b;\n}\n\n// SDF and color of nearby surface.\n// .x: SDF value\n// .yzw: RGB values\nvec4 mapV4(vec3 p) {\n\n    vec4 res = vec4(1000000., vec3(0.5, 0.5, 0));\n\n    float d0 = sdSphere(p + (-0.15, 0.15, 0.15), 0.15);\n    //vec3  c0 = vec3(0.7, 0, 0);\n    vec3  c0 = vec3(1, 1, 1);\n    d0 += cos((p.y + 0.15)*90.0)*0.002;\n    vec4  s0 = vec4(d0, c0);\n    res = opUnion(res,s0);\n    \n    vec3 pos = p + vec3(0.15, 0.08, 0.15);\n    float cap = sdCylinder(pos, vec2(0.15*0.2, 0.1));\n        float hook = sdTorus(pos.xzy - vec3(0.0, 0.018, 0.095), 0.15*0.1, 0.005);\n    vec3 col = vec3(1.2,1.0,0.8);\n    vec4 b = vec4(cap, col);\n    vec4 ca = vec4(hook, col);\n    res = opUnion(res,b);\n    res = opUnion(res, ca);\n\n    float d1 = sdSphere(p + vec3(-0.65,-0.35,2.), 0.25);\n    d1 += cos(atan(p.x - 0.65, p.z + 2.)*20.0)*0.01*(0.5 - p.y -0.25);\n    vec3  c1 = vec3(0.6, 0.6, 0.6);\n    vec4  s1 = vec4(d1,c1);\n    res = opUnion(res,s1);\n    \n    vec3 pos1 = p + vec3(-0.65,-0.53,2.);\n    float cap1 = sdCylinder(pos1, vec2(0.2*0.2, 0.1));\n    float hook1 = sdTorus(pos1.xzy - vec3(0.0, 0.018, 0.095), 0.2*0.12, 0.005);\n    vec4 b1 = vec4(cap1, col);\n    vec4 ca1 = vec4(hook1, col);\n    res = opUnion(res,b1);\n    res = opUnion(res, ca1);\n    \n    float d2 = sdSphere(p + vec3(-0.95,0.50,2.2), 0.27);\n    vec3  c2 = vec3(0.93, 0.78, 0.4);\n    vec4  s2 = vec4(d2,c2);\n    res = opUnion(res,s2);\n    \n    vec3 pos2 = p + vec3(-0.95,0.29,2.2);\n    float cap2 = sdCylinder(pos2, vec2(0.2*0.2, 0.1));\n    float hook2 = sdTorus(pos2.xzy - vec3(0.0, 0.018, 0.095), 0.2*0.12, 0.005);\n    vec4 b2 = vec4(cap2, col);\n    vec4 ca2 = vec4(hook2, col);\n    res = opUnion(res,b2);\n    res = opUnion(res, ca2);\n    \n    return res;\n}\n\n// SDF representation of our scene. Model things here.\nfloat map(vec3 p) {\n    return mapV4(p).x;\n}\n\nvec3 calcNormal(vec3 p) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n\n// March along ray (ro,rd) from t=tmin to tmax and return distance achieved. \nfloat raymarch(vec3 ro, vec3 rd, float tmin, float tmax) {\n\n    float my = max(0.05, iMouse.y/iResolution.y);\n\n    for(float t=tmin; t<tmax; ) {\n    \n        vec3  rt = ro + t*rd; // point on ray\n        float d  = map(rt);   // sdf value at rt\n        \n        if(d < 0.001) {// hit\n            return t; \n        }\n        else {// step\n            t += 0.5*d;//my*d;\n            \n            if(t> tmax) {// clamp and exit (end of ray)\n                return tmax;\n            }\n        }\n    }\n    return -1.;\n}\n\n// HARD SHADOW: 0 in shadow (hits something), 1 sees light.\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt ) {\n    float t = raymarch(ro, rd, mint, maxt);\n    if(t < maxt*0.99 )\n        return 0.;// in shadow\n    else \n        return 1.;// in light\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<256 && t<maxt; i++ )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\n\nvec3 render(vec3 ro, vec3 rd) {\n\n    vec2 m   = (iMouse.xy-0.5*iResolution.xy)/iResolution.y; // mouse \n\n    float tmax = 10.;\n    float t    = raymarch(ro, rd, 0., tmax);\n    vec3  p    = ro + rd*t;\n    vec4  res  = mapV4(p);\n    float sdf  = res.x;\n    \n    \n    // BACKGROUND: \n    vec3 col = vec3(0.);\n    \n    // OBJECTS: \n    if(sdf < 0.01) {// HIT SOMETHING\n\n       col  = res.yzw;\n       vec3 n = calcNormal(p);\n       // col = vec3(sdf);\n       \n       vec3 pLight = vec3(10.*m, 1.);\n       vec3 L      = normalize(pLight-p);\n       float sh    = shadow(p, L, 0.01, length(pLight-p) );\n       //float sh    = softshadow(p, L, 0.01, length(pLight-p),  4.0);\n       \n       col = clamp(dot(L,n),0.,1.) * col * sh;\n    }\n    \n    return col;\n}\n\nvec3 hsv2rgb (vec3 hsv) { // from HSV to RGB color vector\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\treturn hsv.z * (1.0 + 0.63 * hsv.y * (cos (2.0 * 3.14159 * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv  = fragCoord/iResolution.xy; // on [0,1]x[0,1]\n    vec2 pXY = (fragCoord-0.5*iResolution.xy)/iResolution.y; // position on screen\n    vec2 m   = (iMouse.xy-0.5*iResolution.xy)/iResolution.y; // mouse \n    \n    // Camera setup:\n    vec3 pix = vec3(pXY, 0.0);// z=0 virtual image\n    vec3 ro  = vec3(0., 0., 3.0); \n    vec3 rd  = normalize(pix - ro);\n    \n    vec3 col = render(pix, rd);\n    float intensity = 1.0/180.0;\n    vec2 pos = vec2(0.8, 0.5);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(0.9, 0.8);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(1.0, 0.4);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(0.6, 0.6);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(0.75, 0.05);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(0.75, 0.95);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(0.55, 0.1);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(0.35, 0.25);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    pos = vec2(1.0, 0);\n    col += hsv2rgb(vec3(0, distance(uv,pos)*(1.0/intensity), intensity/distance(uv,pos)));\n    \n    // Output to screen\n    fragColor = vec4(col,0.3);\n    \n}","name":"Image","description":"","type":"image"}]}