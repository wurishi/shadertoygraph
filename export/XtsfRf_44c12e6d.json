{"ver":"0.1","info":{"id":"XtsfRf","date":"1512726808","viewed":83,"name":"Final Exam","username":"LCVillafania23","description":"8 Patterns","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["submission"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pattern 6\n#define PI 3.141\n\nfloat random(in vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat randomStars(in vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(2.0, 30.0))) * 9999999999.0);\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n#define OCTAVES 8\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    \n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nmat2 rotate2D(float angle) {\n\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));  \n    \n\t//return mat2(-sin(angle), cos(angle), -cos(angle), -sin(angle)); \n}\n\nmat2 scale2D(vec2 value) {\n    return mat2(value.x, 0.0, 0.0, value.y);\n}\n\nvec3 drawRectangle(vec2 uv, vec2 pos, float l, float w, float offset, vec3 color) {\n    float value = step(pos.x, uv.x) - step(pos.x + l, uv.x);\n    \n    value *= step(pos.y, uv.y + offset) - step(pos.y + w, uv.y + offset);\n    \n    vec3 finalColor = mix(vec3(0.0), color, value);\n    \n    return finalColor;\n}\n\nvec3 drawRothko(vec2 uv, vec2 pos, float l, float w, vec3 color) {\n    float value = smoothstep(pos.x + 0.2, pos.x, uv.x) - smoothstep(pos.x + l, pos.x + l - 0.2, uv.x);\n    \n    value *= smoothstep(pos.y + 0.2, pos.y, uv.y) - smoothstep(pos.y + w, pos.y + w - 0.2, uv.y);\n    \n    vec3 finalColor = mix(vec3(0.0), color, value);\n    finalColor *= random(uv);\n    \n    return finalColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    \n    if (pattern == 1) {\n\t\tuv *= 10.0;\n    \n    \tfloat offset = step(1.0, mod(uv.y, 2.0));\n    \tuv.x += offset * iTime;\n\t\tuv.x -= (1.0 - offset) * iTime;\n    \n    \toffset = step(1.0, mod(uv.x, 2.0));\n    \tuv.y += offset * iTime;\n    \tuv.y -= (1.0 - offset) * iTime;\n             \t\n        uv = fract(uv);\n        \n\t\tvec3 red = vec3(1.0, 0.3, 0.3);\n\t\tvec3 blue = vec3(0.3, 0.3, 1.0);\n        \n\t\tfloat offset1 = 0.9 * sin(iTime) * sin(iTime);\n        float offset2 = -0.9 * sin(iTime) * sin(iTime);\n        \n        vec3 finalColor = drawRectangle(uv, vec2(0.0, 0.0), 0.5, 1.0, offset1, red);\n        finalColor += drawRectangle(uv, vec2(0.5, 0.0), 0.5, 1.0, offset2, blue);\n        \n        fragColor = vec4(finalColor, 1.0);\n    }\n    \n    else if (pattern == 2) {\n        float zoom = 4.0;\n   \t\tfloat offset = gnoise(uv * zoom + iTime);\n    \tfloat value = smoothstep(0.0 - offset, 0.5 - offset, uv.x) - smoothstep(0.6 - offset, 1.0 - offset, uv.x);\n        \n\t\tvec3 magma = vec3(5.0, 0.9, 0.0);\n    \tvec3 finalColor = value * magma;\n    \t\n\t\tfragColor = vec4(finalColor, 1.0);\n    }\n    \n    else if (pattern == 3) {    \n        vec3 blue = vec3(0.3, 0.8, 1.0);\n        vec3 yellow = vec3(1.0, 0.7, 0.3);\n        vec3 red = vec3(1.0, 0.3, 0.2);\n        \n        vec3 finalColor = drawRothko(uv, vec2(-0.025, 0.0), 0.35, 1.0, blue);\n        finalColor += drawRothko(uv, vec2(0.2, -0.1), 0.35, 1.2, yellow);\n        finalColor += drawRothko(uv, vec2(0.425, -0.05), 0.6, 1.1, red);\n        \n        fragColor = vec4(finalColor, 1.0);\n    }\n    \n    else if (pattern == 4) {\n    \tvec3 white = vec3(1.0, 1.0, 1.0);\n        vec3 blue = vec3(0.3, 0.5, 1.0);\n        \n   \t\tfloat offset = gnoise(uv + iTime / 6.0);\n        \n        vec3 clouds = vec3(fbm((uv) * 5.0)) * 0.3;\n    \tvec3 finalColor = mix(blue, white, smoothstep(0.0 - offset, 0.4 - offset, clouds) - smoothstep(0.5 - offset, 0.7 - offset, clouds));\n\t\tfragColor = vec4(finalColor, 1.0);\n    }\n    \n    else if (pattern == 5) {\n\t\tuv *= 5.05;\n    \tuv = fract(uv);\n        \n        vec3 colorA = vec3(0.2, 0.1, 0.9);\n        vec3 colorB = vec3(0.1, 0.4, 0.6);\n        vec3 colorC = vec3(0.5, 0.0, 0.0);\n        vec3 colorD = vec3(1.0, 1.0, 1.0);\n        \n        vec3 finalColor = drawRectangle(uv, vec2(0.0, 0.0), 0.05, 1.0, 0.0, colorC);\n        finalColor += drawRectangle(uv, vec2(0.1, 0.0), 0.45, 0.925, 0.0, colorB);\n        finalColor += drawRectangle(uv, vec2(0.55, 0.0), 0.4, 0.925, 0.0, colorB);\n        finalColor += drawRectangle(uv, vec2(0.05, 0.0), 0.9, 0.45, 0.0, colorC);\n        finalColor += drawRectangle(uv, vec2(0.05, 0.0), 0.05, 1.0, 0.0, colorD);\n        finalColor += drawRectangle(uv, vec2(0.95, 0.0), 0.05, 1.0, 0.0, colorD);\n        finalColor += drawRectangle(uv, vec2(0.05, 0.95), 1.0, 0.05, 0.0, colorD);\n        finalColor += drawRectangle(uv, vec2(0.05, 0.0), 0.05, 1.0, 0.0, colorD);\n        finalColor += drawRectangle(uv, vec2(0.5, 0.0), 0.05, 1.0, 0.0, colorB);\n        \n        finalColor *= random(uv);\n        fragColor = vec4(finalColor,1.0);\n    }\n    \n    else if (pattern == 6) {\n        uv *= rotate2D(60.0 * PI / 180.0);\n        \n        float zoom = 2.0;\n   \t\tfloat offset = noise(uv * zoom - iTime);\n        \n        float stars = randomStars(uv * iTime);\n    \tfloat outer = smoothstep(0.0 - offset, 0.3 - offset, uv.x) - smoothstep(0.5 - offset, 0.7 - offset, uv.x);\n        float inner = smoothstep(0.3 - offset, 0.4 - offset, uv.x) - smoothstep(0.7 - offset, 1.0 - offset, uv.x);\n\t\tfloat overlap = smoothstep(0.45 - offset, 0.7 - offset, uv.x) - smoothstep(0.8 - offset, 0.9 - offset, uv.x); \n        \n        vec3 blue = vec3(0.0, 0.0, 0.175);\n        vec3 purple = vec3(0.7, 0.4, 0.6);\n        vec3 green = vec3(0.4, 1.0, 0.7);\n        vec3 white = vec3(0.9, 1.0, 0.9);\n        \n        vec3 starColor = mix(blue, white, stars);\n    \tvec3 outerColor = mix(starColor, purple, outer);\n        vec3 innerColor = mix(outerColor, green, inner);\n        vec3 overlapColor = mix(innerColor, white, overlap);\n    \t\n\t\tfragColor = vec4(overlapColor, 1.0);\n    }\n    \n    else if (pattern == 7) {\n        vec2 shapePos = vec2(0.5, -sin(iTime * 0.5) * 0.6);    \n    \tfloat dist = distance(shapePos, uv);\n    \n    \tuv -= shapePos;\n    \n    \tfloat angle = atan(uv.x, uv.y);\n    \n    \tfloat radius = sin((angle - iTime / 2.0) * 8.0);\n    \tradius += sin((angle - iTime / 4.0) * 48.0);\n    \tradius += sin((angle - iTime / 8.0) * 128.0);\n    \n    \tradius *= 0.1;\n                              \n    \tfloat sunRays = smoothstep(dist - 0.2, dist, radius) + smoothstep(dist - 0.7, dist + 0.7, 0.2);\n                \n   \t\tfloat offset = gnoise(uv + iTime / 2.0);\n        vec3 clouds = vec3(fbm((uv) * 5.0)) * 0.3;\n        \n        vec3 blue = vec3(-sin(iTime * 0.5) / 1.5, -sin(iTime * 0.5) / 1.5, -sin(iTime * 0.5) + 1.0);\n        vec3 yellow = vec3 (sin(iTime / 2.0) + 1.9, 0.9, 0.2);\n        vec3 white = vec3(1.0, 1.0, 1.0);\n        \n        vec3 sunColor = mix(blue, yellow, sunRays);\n    \tvec3 sky = mix(sunColor, white, smoothstep(0.0 - offset, 0.4 - offset, clouds) - smoothstep(0.5 - offset, 0.7 - offset, clouds));\n\t\t  \t     \n    \tfragColor = vec4(sky, 1.0);\n    }\n    \n    else if (pattern == 8) {\n    \tuv.x *= ratio;\n    \n    \tvec2 shapePos = vec2(0.5f * ratio, 0.5f);\n    \tfloat dist = distance(shapePos, uv);\n        \n    \tuv -=shapePos;\n    \n    \tfloat angle = atan(uv.y, uv.x);\n    \n    \tfloat radius = sin((angle + gnoise(uv * 300.0 - iTime)) * 6.0);\n    \tradius += cos(angle + gnoise(uv * 5.0 - iTime) * 12.0f) * 0.5;\n    \tradius += sin((angle + gnoise(uv * 5.0 - iTime)) * 12.0);\n    \tradius += sin((angle + gnoise(uv * 50.0 - iTime)) * 64.0);\n    \tradius *= 0.1f;\n                              \n    \tfloat value = smoothstep(dist - 0.2, dist, radius);\n    \n    \tvec3 finalColor = vec3(1.0) * value;\n    \n    \tfragColor = vec4(finalColor, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}