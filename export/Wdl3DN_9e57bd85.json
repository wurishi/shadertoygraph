{"ver":"0.1","info":{"id":"Wdl3DN","date":"1546350984","viewed":133,"name":"Architectural Volute","username":"TLC123","description":" Still work in progress\n I intended to define it as  two points, each with a curl number, a filament width and some overall swirl radius for each point.  \nI guess some of the shapes are nice.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["volute"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Swirly Gabor noise\" by TLC123. https://shadertoy.com/view/WdlGDr\n// 2019-01-01 12:09:36\n\n \n#define OCTAVES 2\n#define PI 3.14159265359\n \n \n\nvec2 hash2( vec2 p ) \n{  \t\t\t\t\t\t\n\tp = vec2(dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)));\n    \n\treturn -1.0 + 2.0 * fract(sin(p + 20.0) * 53758.5453123);\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\t\t\t\t   \n\treturn fract(sin(q)*43758.5453);\n}\n\n\n  \n\nfloat gauss(float x, float s) {\n    return exp(-.5*(x*x)/(s*s)); \n}\nfloat gauss(float x) {\n    return exp(-.5*x*x); \n}\nfloat gauss(float s,vec2 D) {\n\tfloat d = dot(D,D)/(s*s);\n\treturn exp(-.5*d); \n}\n\n#define SQR(x) ((x)*(x))\n\n\n \nfloat swirlgabor(vec2 pos, vec2 k, float gaussF, float phi) {\n    float p=  length(pos) ;\n    float g = gauss(p, 1./gaussF);\n    float a=  atan(k.y,k.x)+(2.+sin(phi))*1.2*6.28*smoothstep(gaussF*0.65, -2.,p) ;\n    vec2 k2=vec2(sin(a),cos(a))*length(k);\n    float s = clamp ( -1.,1.,.5* sin(2.*PI*dot(pos,k2)  ));\n \n\n\treturn  (g* s);\n}\n\nfloat polargabor(vec2 pos, vec2 k, float gaussF, float phi) {\n\tfloat g = gauss(length(pos), 1./gaussF);\n    float s = clamp ( -1.,1., sin( length(pos)*2.*PI*  max(k.x,k.y) - phi) );\n \n\treturn  (g* s);\n}\n\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.1, .9 );\n    return length( pa - ba*h );\n}\n\n\nfloat sdvoluteLine( in vec2 p, in vec2 a, in vec2 b ,float curla ,float curlb )\n{\n    float gaussF=   length(b-a)  ;\n    vec2 pa=p-a, ba = b-a, pb=p-b;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), -0., 1. );\n\n    float pal=  length(pa) ;\n    float pbl=  length(pb) ;\n    float bal=  length(ba) ;\n    \n    float ga = gauss(pal,  (bal*0.5)/gaussF)*gaussF;\n    float gb = gauss(pbl,  (bal*0.5)/gaussF)*gaussF;\n    \n    float tha= 1.57  +  atan(pa.y,pa.x)       + curla*6.28*   ga        ;    \n    float thb= 1.57  +  atan(pb.y,pb.x)       + curlb*6.28*   gb         ;\n    \n    vec2 pap=vec2( sin(tha),cos(tha) )*pal+a;\n    vec2 pbp=vec2( sin(thb),cos(thb) )*pbl+b;\n    \n    \n    return sdLine(  mix(pap,pbp,( h)),   a,   b );\n}\n\n\n\n\nfloat Remap( float _f, float _min, float _max )\n{\n    return (_f - _min)/ (_max - _min);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \tvec2 uv = (fragCoord.xy-iResolution.xy*0.5) / iResolution.xx;\n\n \n    float  freq = 10. ;\n     \n \n    \n    \n\n//float Gabornoise( in vec2 point, float Freq, float GAUSS_F ,float SCALE,float ANGLE,float Phi, float Spread)\n\n          float  len =  0.25*  sdvoluteLine( uv*freq, vec2 (-2.+sin(iTime*0.7),-.4), vec2 (2.-sin(iTime*0.7),0.4), sin(iTime*0.3)*0.75 , sin(iTime*0.5)*0.75 )-.12;\n\n    //distance field coloring by iq https://www.shadertoy.com/view/4lcBWn\n      vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-iResolution.y*0.08*abs(len));\n\tcol *= 0.8 + 0.2*cos(iResolution.y*0.3*abs(len));\n\tcol = mix( col, vec3(1.0), max(1.0-abs(len)*iResolution.y*0.2,0.0));\n\t\n\tfragColor = vec4(col*col, 1.0);   \n \n}","name":"Image","description":"","type":"image"}]}