{"ver":"0.1","info":{"id":"3t3SD7","date":"1581026457","viewed":252,"name":"Fourier transform dino","username":"Anskiere","description":"fourier","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 color = vec4(0,162,60, 1)/255.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = fragCoord / iResolution.xy;\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    uv *= 10.;\n    \n    vec2 pos;\n    float time = iTime * 0.25;\n    \n    float circlesSD = 100.;\n    float linesSD = 100.;\n    \n    for (int i = 0; i < int(float(size) * quality); i++)\n    {\n        vec2 delta = vec2(\n            cos(freq[i]*time + phase[i]), \n            sin(freq[i]*time + phase[i])) * amp[i];\n        \n        float csd = length(uv - pos) - amp[i];\n        csd = abs(csd) - 0.01;\n        circlesSD = min(circlesSD, csd);\n        linesSD = min(linesSD, sdLine(uv, pos, pos + delta));\n        \n        pos += delta;\n    }\n    \n    float sd = 1. - texture(iChannel0, ouv).r;    \n    \n    float glowSD = sd;\n    glowSD = smoothstep(0.6, 0., sin(glowSD));\n    //fragColor += vec4(glowSD) * color;\n    \n    sd = abs(sd - 0.15);\n    //sd = 1. - smoothstep(0.0, 0.05, sd);\n    \n    sd = 0.1 / sd;\n        \n    fragColor += vec4(sd) * color;\n    \n    fragColor += vec4(smoothstep(0.02, 0., circlesSD) * 0.3);\n    fragColor += vec4(smoothstep(0.04, 0., linesSD) * 0.8);\n    \n    {\n        time *= 50.;\n        float d1 = texture(iChannel1, vec2(floor(time), 0)/iChannelResolution[1].xy).r;\n        float d2 = texture(iChannel1, vec2(floor(time+1.), 0)/iChannelResolution[1].xy).r;\n        float d = mix(d1, d2, fract(time));\n        d = pow(d, 0.2);\n        d = d*0.7 + 0.3;\n        fragColor *= d;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec2 calcPos(float t)\n{\n    vec2 pos;\n    \n    for (int i = 0; i < int(float(size) * quality); i++)\n    {\n        float f = freq[i];\n        float a = amp[i];\n        float p = phase[i];\n        \n        vec2 delta = vec2(cos(f*t + p), sin(f*t + p)) * a;\n        \n        pos += delta;\n    }\n    \n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = fragCoord / iResolution.xy;\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    uv *= 10.;\n    \n    float t = iTime * 0.25;\n\n    vec2 posA = calcPos(t);\n    vec2 posB = calcPos(t - iTimeDelta*0.25);\n\n    float res = sdLine(uv, posA, posB);\n    \n    vec4 old = 1. - texture(iChannel0, ouv);\n    \n    fragColor.r = 1. - min(res, old.r);\n    \n    if (iMouse.z > 0.)\n    {\n\t\tfragColor.r = 0.;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float freq[150] = float[](-1.00000, 2.00000, 3.00000, 1.00000, -2.00000, 4.00000, 5.00000, -6.00000, 0.00000, -7.00000, 6.00000, -3.00000, -8.00000, -4.00000, 8.00000, 10.00000, 11.00000, -5.00000, 13.00000, -15.00000, 9.00000, -11.00000, 7.00000, -12.00000, -17.00000, 14.00000, -21.00000, -14.00000, -9.00000, -19.00000, -18.00000, 19.00000, 17.00000, -13.00000, 15.00000, 12.00000, 20.00000, 25.00000, 16.00000, -10.00000, -25.00000, 28.00000, 24.00000, -24.00000, 21.00000, -29.00000, -33.00000, -31.00000, -20.00000, -35.00000, -16.00000, -43.00000, 26.00000, -22.00000, -28.00000, -37.00000, -34.00000, -40.00000, -42.00000, -38.00000, 30.00000, -26.00000, 22.00000, 23.00000, 32.00000, -30.00000, 27.00000, -49.00000, 38.00000, 35.00000, 36.00000, -27.00000, -32.00000, 39.00000, 29.00000, 46.00000, -23.00000, 42.00000, -61.00000, -57.00000, 43.00000, -60.00000, 31.00000, 48.00000, 55.00000, -39.00000, -36.00000, -48.00000, 56.00000, 44.00000, 37.00000, -47.00000, -68.00000, 68.00000, -64.00000, -41.00000, 50.00000, -73.00000, -44.00000, -58.00000, -59.00000, -52.00000, 53.00000, -53.00000, -72.00000, 57.00000, -63.00000, -74.00000, -56.00000, -71.00000, 52.00000, 45.00000, 70.00000, 40.00000, -45.00000, 33.00000, 72.00000, 49.00000, -66.00000, -70.00000, -46.00000, 54.00000, 58.00000, 65.00000, 67.00000, 63.00000, -67.00000, -75.00000, 71.00000, 69.00000, 66.00000, 62.00000, 64.00000, -62.00000, 51.00000, 74.00000, 73.00000, -50.00000, 41.00000, 61.00000, -65.00000, -55.00000, -54.00000, 60.00000, 47.00000, 34.00000, -51.00000, 18.00000, -69.00000, 59.00000);\nfloat amp[150] = float[](2.99191, 0.82020, 0.61790, 0.60094, 0.59492, 0.38047, 0.37292, 0.33246, 0.31994, 0.18880, 0.17201, 0.15716, 0.15227, 0.14980, 0.14548, 0.14483, 0.11363, 0.08664, 0.07975, 0.07274, 0.07085, 0.06864, 0.06316, 0.05482, 0.04451, 0.03823, 0.03578, 0.03572, 0.03571, 0.03293, 0.03104, 0.02974, 0.02933, 0.02839, 0.02746, 0.02658, 0.02637, 0.02498, 0.02470, 0.02359, 0.02348, 0.02178, 0.01942, 0.01802, 0.01799, 0.01680, 0.01606, 0.01599, 0.01561, 0.01544, 0.01495, 0.01391, 0.01364, 0.01260, 0.01218, 0.01184, 0.01183, 0.01181, 0.01176, 0.01163, 0.01123, 0.01089, 0.01047, 0.00985, 0.00966, 0.00956, 0.00888, 0.00844, 0.00832, 0.00828, 0.00827, 0.00810, 0.00786, 0.00777, 0.00777, 0.00743, 0.00713, 0.00708, 0.00669, 0.00668, 0.00667, 0.00667, 0.00665, 0.00664, 0.00631, 0.00625, 0.00599, 0.00596, 0.00574, 0.00566, 0.00557, 0.00527, 0.00526, 0.00459, 0.00451, 0.00448, 0.00445, 0.00425, 0.00421, 0.00385, 0.00382, 0.00371, 0.00371, 0.00363, 0.00361, 0.00352, 0.00347, 0.00334, 0.00333, 0.00332, 0.00329, 0.00318, 0.00317, 0.00308, 0.00300, 0.00299, 0.00296, 0.00285, 0.00275, 0.00269, 0.00263, 0.00255, 0.00252, 0.00247, 0.00238, 0.00238, 0.00221, 0.00220, 0.00219, 0.00214, 0.00214, 0.00212, 0.00211, 0.00206, 0.00191, 0.00179, 0.00169, 0.00160, 0.00157, 0.00149, 0.00148, 0.00143, 0.00142, 0.00140, 0.00137, 0.00136, 0.00105, 0.00096, 0.00095, 0.00090);\nfloat phase[150] = float[](-2.64886, 0.15207, -2.61641, 1.44726, -0.06414, 1.04741, 2.78294, -0.51498, -1.96374, -2.98969, -2.70764, 2.41236, 2.61158, 1.61643, -1.10471, -1.85110, -2.05382, -2.15004, 1.80527, -2.73319, -2.30097, 2.94208, -2.10735, -1.79328, -1.07167, 1.50121, -2.68280, -1.20697, 3.03463, 0.74975, 0.30862, 0.00580, 1.44396, -1.81831, -3.12472, -2.74470, 0.71183, 0.70311, -1.10484, 0.07342, -1.36240, -2.04343, -1.10385, -0.48475, 1.56975, -1.17433, -2.37115, 1.99424, -1.36936, -0.58973, -1.68497, -2.00771, 0.17554, -1.46447, -0.85770, -2.28450, -0.47250, 1.44089, -1.47423, -1.57798, 1.00335, -0.91887, -1.15077, -2.19501, -1.58447, 0.06688, -1.05047, -1.00280, 2.12694, 0.38763, -0.95083, -0.59985, 2.36373, 2.00450, -1.92754, -1.08669, -2.50190, -1.74139, -2.85518, 2.79641, 0.70432, -2.33424, 0.99212, 2.81964, -1.82182, -1.70841, -1.67243, -1.04844, -2.24339, 1.16142, 0.03079, -1.79632, 1.91691, -2.82670, 2.56122, 1.10844, 0.36077, -1.92723, 2.42571, 1.97624, -1.11912, 0.97821, 1.07887, -1.03077, -1.71554, 2.06966, -0.20145, -3.13919, -3.01980, -1.41925, -1.92094, -0.05191, 2.20550, 0.42032, 2.36085, 1.56836, -2.98863, 1.10809, -1.69569, -2.43409, 2.52318, -2.92768, -2.91953, -1.61052, -2.68853, -0.09666, 2.81891, 1.10134, 2.22893, 2.32540, -2.76099, -2.30102, -2.41146, 1.32867, -1.39635, 1.08494, -1.35487, -1.68198, -1.03646, 2.52591, -3.06516, 0.69112, 1.17640, 2.51816, -0.05086, -0.30291, 2.05377, -0.26553, 1.34261, -0.64576);\nconst int size = 150;\nconst float quality = 0.7;\n\nfloat sdLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    \n    return length(pa - ba*h);\n}","name":"Common","description":"","type":"common"}]}