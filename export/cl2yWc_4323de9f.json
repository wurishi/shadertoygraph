{"ver":"0.1","info":{"id":"cl2yWc","date":"1692371565","viewed":76,"name":"website_noise_bg_cairn","username":"cairnSynth","description":"noisy noise","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pixelation = 8.;\n\nfloat character(int n, vec2 p) {\n    p = floor(p * vec2(-4., 4.) + 2.5);\n    if(clamp(p.x, 0., 4.) == p.x) {\n        if(clamp(p.y, 0., 4.) == p.y) {\n            int a = int(round(p.x) + 5. * round(p.y));\n            if(((n >> a) & 1) == 1) return 1.;\n        }\n    }\n    return 0.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    //https://www.shadertoy.com/view/lssGDj\n    vec2 uv = fragCoord.xy;\n    uv = uv / 3.;\n    vec3 col = texture(iChannel0, floor(uv/pixelation)*pixelation/iResolution.xy).rgb;\n    \n    float gray = clamp((0.3 * col.r + 0.59 * col.g + 0.11 * col.b), 0., 1.);\n    int n =  0;\n    /*\n    if (gray > 0.0) n = 4096;    // .\n    if (gray > 0.2) n = 65600;    // :\n\tif (gray > 0.3) n = 163153;   // *\n\tif (gray > 0.4) n = 15255086; // o \n\tif (gray > 0.5) n = 13121101; // &\n\tif (gray > 0.6) n = 15252014; // 8\n\tif (gray > 0.7) n = 13195790; // @\n\tif (gray > 0.8) n = 11512810; // #\n    */\n    n = 4096;\n    if (gray > 0.0000000005) n = 131200;\n    if (gray > 0.0098) n = 4329476;\n    if (gray > 0.0030) n = 459200;\n    //if (gray > 0.1063) n = 4591748;\n    if (gray > 0.1095) n = 12652620;\n    if (gray > 0.1028) n = 14749828;\n    if (gray > 0.1060) n = 18393220;\n    if (gray > 0.2093) n = 15239300;\n    if (gray > 0.2326) n = 17318431;\n    if (gray > 0.2558) n = 32641156;\n    //if (gray > 0.2791) n = 18393412;\n    if (gray > 0.3023) n = 18157905;\n    if (gray > 0.3256) n = 17463428;\n    if (gray > 0.3488) n = 14954572;\n    if (gray > 0.3721) n = 13177118;\n    if (gray > 0.3953) n = 6566222;\n    if (gray > 0.4186) n = 16269839;\n    //if (gray > 0.4419) n = 18444881;\n    if (gray > 0.4651) n = 18400814;\n    //if (gray > 0.4884) n = 33061392;\n    if (gray > 0.5116) n = 15255086;\n    //if (gray > 0.5349) n = 32045584;\n    if (gray > 0.5581) n = 18405034;\n    //if (gray > 0.5814) n = 15022158;\n    if (gray > 0.6047) n = 15018318;\n    //if (gray > 0.6279) n = 16272942;\n    if (gray > 0.6512) n = 18415153;\n    //if (gray > 0.6744) n = 32641183;\n    if (gray > 0.6977) n = 32540207;\n    if (gray > 0.7209) n = 18732593;\n    //if (gray > 0.7442) n = 18667121;\n    if (gray > 0.7674) n = 16267326;\n    //if (gray > 0.7907) n = 32575775;\n    if (gray > 0.8140) n = 15022414;\n    //if (gray > 0.8372) n = 15255537;\n    if (gray > 0.8605) n = 32032318;\n    //if (gray > 0.8837) n = 32045617;\n    if (gray > 0.9070) n = 33081316;\n    //if (gray > 0.9302) n = 32045630;\n    if (gray > 0.9535) n = 33061407;\n    //if (gray > 0.9767) n = 11512810;\n    \n    vec2 p = mod(uv/4., 2.) - vec2(1.);\n    \n    col = vec3(character(n, p)*0.7);\n    \n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float uvScale = 5.;\n\nvec2 randomGradient(vec2 p) {\n    p = p + 0.01;\n    float x = dot(p, vec2(12.4, 234.5));\n    float y = dot(p, vec2(234.5, 345.6));\n    vec2 gradient = vec2(x, y);\n    gradient = sin(gradient);\n    gradient = gradient * 43758.5453;\n    gradient = sin(gradient + iTime/6.);\n    return gradient;\n}\n\nfloat perlinNoise(vec2 uv) {\n\n    \n    vec3 col = vec3(0);\n    // Create grid of uv cells\n    uv = uv*uvScale;\n    vec2 gridId = floor(uv);\n    vec2 gridUv = fract(uv);\n    \n    col = vec3(gridId, 0.0);\n    col = vec3(gridUv, 0.0);\n    // Find coords of cell corners\n    vec2 bl = gridId + vec2(0., 0.);  // Bottom left\n    vec2 br = gridId + vec2(1., 0.);  // Bottom right\n    vec2 tl = gridId + vec2(0., 1.);  // Top left\n    vec2 tr = gridId + vec2(1., 1.);  // Top right\n    // Create random gradient for each corner\n    vec2 gradBl = randomGradient(bl);  // Bottom left grad\n    vec2 gradBr = randomGradient(br);  // Bottom right grad\n    vec2 gradTl = randomGradient(tl);  // Top left grad\n    vec2 gradTr = randomGradient(tr);  // Top right grad\n    // Get distance from pixel to grid corner\n    vec2 distFromPxToBl = gridUv - vec2(0., 0.);\n    vec2 distFromPxToBr = gridUv - vec2(1., 0.);\n    vec2 distFromPxToTl = gridUv - vec2(0., 1.);\n    vec2 distFromPxToTr = gridUv - vec2(1., 1.);\n    // Calc dot product from gradient and dist\n    float dotBl = dot(gradBl, distFromPxToBl);\n    float dotBr = dot(gradBr, distFromPxToBr);\n    float dotTl = dot(gradTl, distFromPxToTl);\n    float dotTr = dot(gradTr, distFromPxToTr);\n    // Smooth grid uvs\n    gridUv = smoothstep(0., 1., gridUv);\n    // Interpolate dot products\n    float b = mix(dotBl, dotBr, gridUv.x);\n    float t = mix(dotTl, dotTr, gridUv.x);\n    float perlin = mix(b, t, gridUv.y);\n    // Alt noises\n    float billow = abs(perlin);\n    \n    float ridged = 1. - abs(perlin);\n    ridged =(ridged * ridged);\n    \n    return ridged;\n}\n\nfloat fbmPerlinNoise(vec2 uv) {\n    float fbmNoise = 0.;\n    float amplitude = 1.;\n    const float octaves = 3.;\n    \n    for(float i = 0.; i < octaves; i++) {\n        fbmNoise = fbmNoise + perlinNoise(uv) * amplitude;\n        amplitude = amplitude * .5;\n        uv = uv * 2.;\n    }\n    \n    return fbmNoise;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float noiseVal = fbmPerlinNoise(uv) *1. - 1.14;\n    vec3 mainCol = mix(vec3(1., 0., 1.), vec3(1., 1., 1.), tan(noiseVal*1.1));\n    vec3 highlightCol = vec3(noiseVal*6. - 2.4);\n    vec3 col = (mainCol*vec3(noiseVal)) + clamp(highlightCol, 0., 1.);\n    //vec3 col =  \n    \n    // Output to screen\n    fragColor = vec4(vec3(noiseVal),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}