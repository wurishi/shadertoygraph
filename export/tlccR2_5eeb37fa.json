{"ver":"0.1","info":{"id":"tlccR2","date":"1609489461","viewed":187,"name":"random streaky thingy [spaz]","username":"HaleyHalcyon","description":"a","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash(uint x) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n// Generate random 4bit RGB color\nvec3 rcol(uint seed) {\n    uint x = hash(seed);\n    return vec3(x & 15u, x>>4u & 15u, x>>8u & 15u) / 15.;\n}\n\nvec3 col(float x) {\n    uint seed = uint(int(x));\n    return  rcol(seed)      * smoothstep(0.04, 0.02, fract(x))\n          + rcol(seed + 1u) * smoothstep(0.00, 0.02, fract(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scales coords so that the diagonals are all dist 1 from center\n    float scale = length(iResolution.xy);\n    vec2 uv = (fragCoord / scale\n\t- (iResolution.xy / scale / 2.)) * 2.;\n    \n    float r = sqrt(length(uv));\n    float theta = atan(uv.y, uv.x) / 2. / 3.141592653589;\n    \n    float bands = 24.;\n    float band = mod(\n        theta * bands + r * 16. + iTime * 4.\n    , bands);\n    \n    // Time varying pixel color\n    vec3 col = col(iTime * 0.8 + floor(iTime * 150.) + floor(band) * 384. + r * 8.);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}