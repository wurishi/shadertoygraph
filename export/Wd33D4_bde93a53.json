{"ver":"0.1","info":{"id":"Wd33D4","date":"1568478770","viewed":73,"name":"smiley b1","username":"ganly","description":"The art of code's smiley tutorial at https://www.youtube.com/watch?v=ZlNnrpM0TRg along with my changes in variable names.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["smileyseriesb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Making a smiley in ShaderToy\n// https://www.youtube.com/watch?v=ZlNnrpM0TRg\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0.0, 1.0)\n\n\nfloat remap01(float a, float b, float t) {\n    return sat((t-a)/(b-a));\n}\n\nfloat remap(float a, float b, float c, float d, float t) {\n    return sat(((t-a)/(b-a)) * (d-c) + c);\n}\n\nvec2 within(vec2 uv, vec4 rect) {\n    return (uv - rect.xy) / (rect.zw - rect.xy);\n}\n\n\nvec4 Eye(vec2 uv) {\n    uv -= .5;\n    float d = length(uv);\n\n    vec4 irisColour = vec4(.3, .5, 1., 1.);\n    vec4 col = mix(vec4(1.0), irisColour, S(.1, .7, d) *.5);\n    \n    // Edge shadow\n    col.rgb *= 1.0 - S(.45, .5, d) * 0.5 * sat(-uv.y - uv.x);\n    // Iris outline (Black circle)\n    col.rgb = mix(col.rgb, vec3(0.0), S(.3, .28, d));\n    \n    // Blue circle\n    irisColour.rgb *= 1.0 + S(0.3, 0.05, d);\n    col.rgb = mix(col.rgb, irisColour.rgb, S(0.28, 0.25, d));\n    \n    // Blend in the pupil on top\n    col.rgb = mix(col.rgb, vec3(0.0), S(.16, .14, d));\n    \n    // Add highlights\n    float highlight = S(.1, .09, length(uv-vec2(-0.15, 0.15)));\n    highlight += S(.07, .05, length(uv + vec2(-0.08, 0.08)));\n    col.rgb= mix(col.rgb, vec3(1.0), highlight);\n    \n    col.a = S(0.5, 0.48, d);\n    \n    return col;\n}\n\n\nvec4 Mouth(vec2 uv) {\n    \n    // Inside mouth colour\n    vec4 col = vec4(0.5, 0.18, 0.05, 1.0); // darkish red\n    \n    uv -= 0.5;\n    \n    // Make mouth bulge down into a kind of smile\n    uv.y *= 1.5;\n    uv.y -= uv.x * uv.x * 2.0;\n    \n    float d = length(uv);\n    \n    col.a = S(.5, .48, d);\n    \n    float teethDistance = length(uv - vec2(0.0, 0.6));\n    vec3 toothColour = vec3(1.0) * S(.6, .35, d);\n    col.rgb = mix(col.rgb, toothColour, S(.4, .37, teethDistance));\n    \n    float tongueDistance = length(uv + vec2(0., .5));\n    col.rgb = mix(col.rgb, vec3(1., .5, .5), S(.5, .2, tongueDistance));\n    \n    return col;\n}\n\n\nvec4 Head(vec2 uv) {\n    // Base colour \n    vec4 col = vec4(.9, .65, .1, 1.); // Yellow-ish\n    \n    float d = length(uv);\n    \n    // Foundational circle of the head\n    col.a = S(.5, .49, d);\n    \n    // Shading around the edge of the head\n    float edgeShade = remap01(.35, .5, d);\n    edgeShade *= edgeShade;\n    col.rgb *= 1.0 - edgeShade * 0.5;\n    \n    // red border around the circumference of the head\n    col.rgb = mix(col.rgb, vec3(.6, .3, .1), S(.47, .48, d));\n    \n    // Bright Highlight simulating reflection on glassy material\n    float highlight = S(.41, .405, d);\n    highlight *= remap(.41, -0.1, 0.75, 0.0, uv.y);\n    col.rgb = mix(col.rgb, vec3(1.), highlight);\n    \n    // Cheeks\n    float cheek_distance = length(uv - vec2(0.25, -0.2));\n    float cheek = S(.2, .01, cheek_distance) * 0.4;\n    // Sharpen edge boundary a little\n    cheek *= S(0.17, 0.16, cheek_distance);\n    vec3  cheek_colour = vec3(1.0, 0.1, 0.1);\n    col.rgb = mix(col.rgb, cheek_colour, cheek);\n    \n    return col;\n}\n\n\nvec4 Smiley(vec2 uv) {\n    vec4 col = vec4(0.0);\n    \n    // Mirror everything about the y-axis\n    // so we only have to draw items once (cheek, eye, etc.)\n    uv.x = abs(uv.x);\n    \n    \n    vec4 head   = Head(uv);\n    vec4 eye    = Eye(within(uv, vec4(.03, -.1, .37, .25)));\n    vec4 mouth  = Mouth(within(uv, vec4(-.3, -.4, .3, -.1)));\n    \n    col = mix(col, head, head.a);\n    col = mix(col, eye,  eye.a);\n    col = mix(col, mouth,  mouth.a);\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Move origin to centre\n    uv -= .5;\n    \n    // Aspect ration\n    uv.x *= iResolution.x /iResolution.y;\n    \n    // Output to screen\n    fragColor = Smiley(uv);\n}","name":"Image","description":"","type":"image"}]}