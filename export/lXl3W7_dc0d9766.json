{"ver":"0.1","info":{"id":"lXl3W7","date":"1707629554","viewed":91,"name":"Moving circles (by Aiteron)","username":"Aiteron","description":"Simple moving circles shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","circle","move"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COUNT 16.0\n\nfloat circle(vec2 uv) {\n    return 1. - step(.5, length(uv));\n}\n\n// Periodic function that return [0,1][0,-1][0,1]...\nfloat f(float time) {\n    return mod(time, 2.) > 1. ? fract(time)*2. : -fract(time)*2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;   \n    uv.x *= (iResolution.x / iResolution.y);\n    \n    uv = uv * COUNT;\n    float signy = sign(fract(uv.x/2.) - 0.5);\n    float signx = sign(fract(uv.y/2.) - 0.5);\n    \n    uv = fract(uv);\n    uv = uv*2.-1.;\n    \n    uv.x += signx * f(iTime) * step(0., -f(iTime));\n    uv.x = uv.x > 1. ? uv.x - 2. : uv.x;\n    uv.x = uv.x < -1. ? uv.x + 2. : uv.x;\n\n    uv.y += signy * f(iTime) * step(0., f(iTime));\n    uv.y = uv.y > 1. ? uv.y - 2. : uv.y;\n    uv.y = uv.y < -1. ? uv.y + 2. : uv.y;\n    \n    fragColor = vec4(vec3(circle(uv)), 1.0);\n}","name":"Image","description":"","type":"image"}]}