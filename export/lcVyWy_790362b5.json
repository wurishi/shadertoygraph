{"ver":"0.1","info":{"id":"lcVyWy","date":"1732345395","viewed":12,"name":"void ray","username":"vivavolt","description":"after the rain","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","godrays"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Overcast\" by cmzw. https://shadertoy.com/view/XcKyzV\n// 2024-11-23 07:03:02\n\n#define ITER 32.\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 p = (2.*I - iResolution.xy) / iResolution.y;\n    p.y += 0.;\n    \n    vec3 c; float f,w = 0.; vec2 fp = vec2(0.);\n    for(float i = 0.; i++ < ITER;) {        \n      \n        fp = 150. * p*i*.01/(p.y+3.);\n        fp.x += cos(iTime*.5);\n        fp.y += sin(iTime*.5);\n\n        mat2 m = mat2( 1.6 + sin(iTime / 10.),  1.2 + cos(iTime / 10.), -1.2,  1.6 - cos(iTime / 10.));\n        f  = 0.5000*noise( fp / 2. + vec2(cos(iTime / 3.), sin(iTime / 3.)) ); fp = m*fp*1.1;\n\t\tf += 0.2500*noise( fp / 2. + vec2(cos(iTime / 3.), sin(iTime / 3.))); fp = m*fp*1.1;\n        f += 0.1250*noise( fp / 2. + vec2(cos(iTime / 3.), sin(iTime / 3.))); fp = m*fp*1.1;\n        f = smoothstep(-.04,.4,f);\n        w += f;\n\n    }\n    w /= ITER*.5;\n    \n    vec3 col = mix(\n        vec3(smoothstep(.11,2.4,w)),\n        vec3(1.,1.5+ 0.2*cos(iTime * 0.99),1.7 + 0.2*sin(iTime * 0.98)), smoothstep(.05,2.,w));  \n \n    vec2 uv = I/iResolution.xy;\n    vec2 n = uv*(1. - uv) * 1.;\n    col *= pow(n.x*n.y,2.0) + .5;\n     \n    O = vec4(aces_tonemap(col*3.),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/XdXGW8\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n#if 0\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n    \n#else\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n#endif                              \n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec3 aces_tonemap(vec3 color)\n{\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}","name":"Common","description":"","type":"common"}]}