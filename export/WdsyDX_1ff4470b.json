{"ver":"0.1","info":{"id":"WdsyDX","date":"1585732090","viewed":420,"name":"Angular Gradient","username":"rebbur","description":"Trying to create angular gradient, but i don't like the jaggies","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["gradient","angular","stepped"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define PI_2 6.283185\n\nvec4 Color1 = vec4(0.0, 0.0, 1.0, 1.0);\nvec4 Color2 = vec4(1.0, 1.0, 1.0, 1.0);\n\nint NumSteps = 0; //0 = smooth, >= 1 for stepped\nint AntiAlias = 1;\nfloat Dither = 4.0;\n\n//https://www.shadertoy.com/view/lscGDr\nvec3 dithered(in vec3 color, in vec2 uv, in float dither)\n{\n    if (dither > 0.0)\n    {\n        const vec3 magic = vec3( 0.06711056, 0.00583715, 52.9829189 );\n        float f = fract( magic.z * fract( dot( uv, magic.xy ) ) );\n        color = clamp(color + (dither/255.0) * f - ((dither*0.5)/255.0), vec3(0.0), vec3(1.0));\n    }\n    return color;\n}\n\nfloat stepped(in float s, in float scale, in int steps)\n{\n    return steps > 0 ? floor( s / ((1.0*scale) / float(steps))) * 1.0 / float(steps-1) : s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = fragCoord/iResolution.xy;\n    \n    float angle = (iMouse.x/iResolution.x)*PI_2;\n   \n \tfloat a = atan(uv.y - 0.5, uv.x - 0.5); //calculate angle of coord\n    float s = mod(a-angle, PI_2) / PI_2;    \t\t//increment with Angle (is already in radians)\n\ts = stepped(s, 1.0, NumSteps);\n\n    \n    /* don't know how to make the stepped gradient using antialiasing */\n    if (AntiAlias > 0 && NumSteps == 0)\n    {\n        //https://stackoverflow.com/questions/43762691/antialiasing-in-fragment-shader-three-js\n        /*\n            Make lerpLimit based on distance to center, the farther away from the center\n            the the bigger the lerpLimit value should be\n            max -> Avoid negative limit at the center\n        */\n        float numPixels = 2.0;\n        float aa = (1.0/iResolution.x)*numPixels;\n        float lerpLimit = max(1.0 - aa / (PI_2*length(uv.xy - 0.5)), 0.0);\n        float invDiff = lerpLimit / (1.0-lerpLimit);\n        if(s > lerpLimit)\n            s = invDiff - s*invDiff;\n    }\n\t\n    vec4 color = mix(Color1, Color2, clamp(s, 0.0, 1.0));\n\tcolor.rgb = dithered(color.rgb, fragCoord, Dither);\n\tfragColor = color;\n    \n}","name":"Image","description":"","type":"image"}]}