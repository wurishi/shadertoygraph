{"ver":"0.1","info":{"id":"MfSSzK","date":"1706542253","viewed":55,"name":"Hatching and Glitch(genuary2024)","username":"karakure178","description":"Part 1 of a ray marching tutorial http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","hatching","genuaray29"],"hasliked":0,"parentid":"4cBXzV","parentname":"Fork Ray Marchi karakure17 991"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 参考：https://github.com/kuravih/gllock/blob/master/shaders/glitch.fragment.glsl\n\n#define RATE 0.75\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) * 2.0 - 1.0;\n}\n\nfloat offset(float blocks, vec2 uv) {\n  float shaderTime = iTime*RATE;\n  return rand(vec2(shaderTime, floor(uv.y * blocks)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 tex = texture(iChannel0,uv);\n    fragColor = tex;\n    \n    fragColor.r = texture(iChannel0, uv + vec2(offset(64.0, uv) * 0.03, 0.0)).r;\n    fragColor.g = texture(iChannel0, uv + vec2(offset(64.0, uv) * 0.03 * 0.16666666, 0.0)).g;\n    fragColor.b = texture(iChannel0, uv + vec2(offset(64.0, uv) * 0.03, 0.0)).b;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n * 参考：https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\n */\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\nconst float PI = 3.14159265358979;\n// ==============================================\n// 便利関数群\n// ==============================================\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n\n/**\n * ジオメトリの交差\n */\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\n/**\n * ジオメトリの結合\n */\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n/**\n * ジオメトリの差分\n */\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n// ==============================================\n// 図形作成関数群\n// ==============================================\n\n/**\n *原点を中心とし、幅 = 高さ = 長さ = 2.0 の立方体の符号付き距離関数\n */\nfloat cubeSDF(vec3 p) {\n    // If d.x < 0, then -1 < p.x < 1, and same logic applies to p.y, p.z\n    // So if all components of d are negative, then p is inside the unit cube\n    vec3 d = abs(p) - vec3(1.0, 1.0, 1.0);\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/**\n * 原点(samplePoint)を中心とする半径 r の球の符号付き距離関数\n */\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\n/**\n * 原点pを中心とし、高さh、半径rのxyに位置合わせした円柱の符号付き距離関数\n */\nfloat cylinderSDF(vec3 p, float h, float r) {\n    // How far inside or outside the cylinder the point is, radially\n    float inOutRadius = length(p.xy) - r;\n    \n    // How far inside or outside the cylinder is, axially aligned with the cylinder\n    float inOutHeight = abs(p.z) - h/2.0;\n    \n    // Assuming p is inside the cylinder, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n\n    // Assuming p is outside the cylinder, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n// ==============================================\n// 以降画面作成\n// ==============================================\n\n\n/**\n * 画面に描画するオブジェクトをここで処理する\n */\nfloat sceneSDF(vec3 samplePoint) {\n    float sphere = sphereSDF(samplePoint, 1.2);\n    float cube = cubeSDF(samplePoint);\n    \n    float cylinderRadius = 0.4 + (1.0 - 0.4) * (1.0 + sin(1.7 *iTime )) / 2.0;\n    float cylinder1 = cylinderSDF(samplePoint, 2.0, cylinderRadius);\n    float cylinder2 = cylinderSDF(rotateX(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n    float cylinder3 = cylinderSDF(rotateY(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n    \n    float csgNut = differenceSDF(intersectSDF(cube, sphere),unionSDF(cylinder1, unionSDF(cylinder2, cylinder3)));\n    \n    return csgNut;\n    //return  intersectSDF(unionSDF(cylinder1, unionSDF(cylinder2, cylinder3)),cube);\n    //return intersectSDF(cubeDist, sphereDist);\n   \n}\n\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n\n\n// ========================================================\n// メイン描画処理\n// ========================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 10.0);\n    //vec3 eye = vec3(8.0, 5.0 * sin(0.2 * iTime), 7.0);\n\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * dir;\n    \n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(0.7, 0.2, 0.2);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    \n    // レイマーチング結果\n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    //========================================================\n    // 以降ハッチングとの合成処理\n    //========================================================\n    // ハッチング: https://github.com/pixijs/filters/blob/main/filters/cross-hatch/src/crosshatch.frag\n    float hatch = 10.0;// ハッチングのサイズを変えられる\n    float lum = length(color);\n\n    vec4 tex = vec4(color,1.0);\n    vec4 hatcolor = vec4(1.0, 1.0, 1.0, 1.0);\n    bool isHatch = false;\n\n    if (lum < 1.00){\n      if (mod(fragCoord.x + fragCoord.y, hatch) == 0.0){\n        hatcolor = tex;\n        isHatch = true;\n      }\n    }\n\n    if (lum < 0.75){\n      if (mod(fragCoord.x - fragCoord.y, hatch) == 0.0){\n          hatcolor = tex;\n          isHatch = true;\n      }\n    }\n\n    if (lum < 0.50){\n      if (mod(fragCoord.x + fragCoord.y - 5.0, hatch) == 0.0){\n          hatcolor = tex;\n          isHatch = true;\n      }\n    }\n\n    if (lum < 0.3){\n      if (mod(fragCoord.x - fragCoord.y - 5.0, hatch) == 0.0){\n          hatcolor = tex;\n          isHatch = true;\n      }\n    }\n\n    if(isHatch == false){\n      hatcolor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    \n    vec2 uv = fragCoord;\n    uv.x += 0.2 * cos(uv.y*PI*5.0 + iTime);\n    \n    // 最終出力\n    fragColor = hatcolor;\n    //fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}