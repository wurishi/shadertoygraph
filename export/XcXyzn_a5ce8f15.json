{"ver":"0.1","info":{"id":"XcXyzn","date":"1720677855","viewed":40,"name":"Naraku no Hana","username":"prosumer","description":"hw8","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// The MIT License\n// Copyright Â© 2024 prosumer\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// the following code is altered from https://www.shadertoy.com/view/Ws33Wl, https://www.shadertoy.com/view/NtX3zS https://www.shadertoy.com/view/WslGWl https://www.shadertoy.com/view/ftSSRR\n\n\n// TIPS by prosumer:\n// Do not set all colors to 1 at the same time, otherwise an unpleasant white color will appear\n// The smaller the slope, the more stable the value will be around a certain number, so a larger slope will result in richer colors\n\n#define REFLECTION_NUMBER 40\n\nfloat colormap_red(float x) {\n    if (x < 0.0) {\n        return 54.0 / 255.0;\n    } else if (x < 0.3) {\n        return (830. * x + 54.) / 255.0;\n    }else if(x < 1.0){\n        return sin(3.14*x/2.) +1.3;\n    }\n    return 1.0;\n}\n\nfloat colormap_green(float x) {\n    if (x < 0.24) {\n        return 0.0;\n    } else if (x < 0.4) {\n        return (785.8 * x - 190.) / 255.0;\n    } else if (x <= 0.6) {\n        return (214. * x + 40.) / 255.0;\n    } else {\n        return (200.*x - 100.) / 255.0;\n    }\n}\n\nfloat colormap_blue(float x) {\n    if (x < 0.0) {\n        return 54.0 / 255.0;\n    } else if (x < 0.08) {\n        return (830. * x + 55.) / 255.0;\n    } else if (x < 0.24) {\n        return 127.0 / 255.0;\n    } else if (x < 0.7) {\n        return (792. * x - 64.) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\nvec4 colormap(float x) {\n    return vec4(colormap_red(x), colormap_green(x), colormap_blue(x), 1.0);\n}\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64);\n\nmat3 rotation(float angle)\n{\n\tfloat c = cos(angle);\n    float s = sin(angle);\n    return mat3( c, -s, 0.,  s, c, 0.,  0., 0., 1.);\n}\n\nfloat hash(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise(in vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    \n    f = f * f * (3.0 - 2.0 * f);\n    \n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    \n    float res = mix(mix(mix(hash(n +   0.0), hash(n +   1.0), f.x),\n                        mix(hash(n +  57.0), hash(n +  58.0), f.x), f.y),\n                    mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                        mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n    return res;\n}\n\nfloat fbm(vec3 p)\n{\n    float f;\n    f  = 0.5000 * noise(p); p = m * p * 2.02;\n    f += 0.2500 * noise(p); p = m * p * 2.03;\n    f += 0.1250 * noise(p);\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 mo = length(iMouse.xy - vec2(0.0)) < 1.0 ? vec2(0.0) : (iMouse.xy - iResolution.xy*.5)/iResolution.y*3.;\n    \n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y*3. - mo;\n    vec3 huv = vec3(uv, 0.);\n    huv *= rotation(iTime*.2);\n    \n    vec3 axisOrigin = vec3(0., 0., 1.);\n    vec3 axisDirection = vec3(normalize(vec2(1., 1.)), 0.);\n    \n    for(int i = 0; i < REFLECTION_NUMBER; i++)\n    {\n        float offset = (3.1415 * 2. / float(REFLECTION_NUMBER) ) * float(i);\n        float axisRotation = offset;\n    \tvec3 tuv = (huv - axisOrigin) * rotation(-axisRotation);\n    \tif(tuv.y < 0.)\n    \t{\n    \t\tvec3 invuv = tuv;\n        \tinvuv.y = -invuv.y;\n        \tinvuv = (invuv * rotation(axisRotation)) + axisOrigin;\n        \thuv = invuv;\n    \t}\n    }\n    float tex_s = fbm(huv.xxy-  - vec3(iTime *.2+500.));\n    \n    float tex = smoothstep(0.3, 0.6, tex_s);\n    //float tex2 = smoothstep(0.2, 0.5, tex_s);\n\n    //vec3 col = vec3(tex1/1., tex1/1.3, tex2/4.);\n    \n    fragColor = colormap(tex);\n}","name":"Image","description":"","type":"image"}]}