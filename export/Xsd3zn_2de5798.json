{"ver":"0.1","info":{"id":"Xsd3zn","date":"1447778417","viewed":342,"name":"Basic Attractors","username":"Pier","description":"Based on this: http://www.cc.gatech.edu/~phlosoft/attractors/","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["attractors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"/* \n\tCreated by Eugenio Parodi - Pier/2015\n\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\tSimplified Attractor based on:\n\t\thttp://www.cc.gatech.edu/~phlosoft/attractors/\n*/\n\n\n#define AC vec2(1.5)\n#define BD vec2(1.5)\n\n/* \n\tIncreasing the number of iteriation make is slower but\n\tproduce better results:\n\thttps://en.wikipedia.org/wiki/Attractor\n*/\n#define ITER 300.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /* Initialize FragColor */\n    fragColor = vec4(0.0);\n    \n    /* Align and zoom the origin to the center of the screen */\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv *= 6.0;\n\n    /* Simple time+mouse modifier */\n    vec2 mod = iMouse.xy*0.01 + vec2(iTime/10.0,0);\n\n    vec2 p = vec2(0.0);    \n\n    /*\n\t\tLoop through:\n\t\t\txn+1 = sin(A*yn) - cos(B*xn)\n\t\t\tyn+1 = sin(C*xn) - cos(D*yn)\n\t*/\n    for (float i=1.0; i<2.0; i+=1.0/ITER){\n        p = sin(mod+AC*p.yx) - cos(mod+BD*p);\n        fragColor.rgb += vec3(0.4, 0.2, 0.05) * \n\t\t\t\t\t\tsmoothstep( vec3(0.05, 0.08, 0.2)*i, vec3(0),\n\t\t\t\t\t\t\t\t\tvec3(distance(uv, p)));\n    }\n}\n","name":"","description":"","type":"image"}]}