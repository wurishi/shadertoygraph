{"ver":"0.1","info":{"id":"sstcDj","date":"1654102036","viewed":124,"name":"Weird Artefacts v2","username":"LF1783","description":"I have an minor issue with the objects distance rendering, it creates these weird artefacts. How can i avoid this problem and solve?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14\n#define TAO 6.28\n#define t iTime\n#define Max_Steps 100\n#define Max_Dist 100.\n#define Surf_Dist .01\n\nmat2 Rot(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat shape(vec3 p, vec3 a){\n    vec4 d = vec4(1.,1.,6.,1.);\n    //p = length(p)-a;\n    p = abs(p)-a;\n    return \n    length(max(p,0.0))+min(max(p.x,max(p.y, p.z)), 0.);\n\n    //length(p-a.xyz)-d.w;\n}\n\nfloat dist(vec3 p){\n    vec3 bp = p-vec3(0.,1.,0.);\n    float plane = p.y;// dot(p,normalize(vec3(0.,1.,0.))-sin(p.x));\nbp.x = mod(abs(bp.x),2.);\n    float box = shape(bp-vec3(0.,1.,0.), vec3(0.2));\n    float d = box;\n   return d;\n    }\n\nfloat rayCast(vec3 ro, vec3 rd){\n    float dO=0.;\n    \n    for(int i = 0; i<Max_Steps; i++){\n        vec3 p = ro + rd*dO;\n        float dS = dist(p);\n        dO += .5*dS;\n        if(dO>Max_Dist || abs(dS)<Surf_Dist) break;\n     }\n     return dO;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z){\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0.0,1.0,0.0), f)), \n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x * r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    float d = dist(p);\n    vec2 e = vec2(.001, 0.);\n    vec3 n = d- vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat getLight(vec3 p){\n    vec3 lightPos = vec3(3., 5., 4.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = getNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = rayCast(p+n*Surf_Dist*2., l);\n    \n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n      // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    // Time varying pixel color\n    vec3 col =vec3(smoothstep(TAO,1.,uv.y)*mix(vec3(0.02),vec3(0.0,1.0,1.)/2.,uv.y)/3.)/PI;// = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 ro = vec3(0., 4., -5.);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.28);\n\nvec3 rd = R(uv,ro, vec3(0.,1.,0.), 1.);\n\n    float d = rayCast(ro, rd);\n    if(d<Max_Dist){\n\n        vec3 p = ro + rd * d;\n        \n        float dif = getLight(p);\n        col = vec3(dif);\n        \n//    col = (colXY);\n   vec3 n = getNormal(p);\n //  col = abs(n);\n\n}\n    \n    col = pow(col, vec3(.4545));//*texture(iChannel0,uv).rgb;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}