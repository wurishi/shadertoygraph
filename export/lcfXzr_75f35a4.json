{"ver":"0.1","info":{"id":"lcfXzr","date":"1704847903","viewed":93,"name":"Gravity Lens","username":"binary_6","description":"Gravitational lensing shader","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["space","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define G 6.674e-11\n#define c 3.0e8\n\nconst float lensPlaneDistance = 100.0;\nconst float sourcePlaneDistance = lensPlaneDistance * 2.0;\nconst float lensingRatio = lensPlaneDistance / sourcePlaneDistance;\nconst float mass = 10.0;\nconst float arbitraryNumber = 100000.0;\nconst float arbitraryScale = 1.0 / arbitraryNumber;\nconst float arbitraryBodyScale = arbitraryNumber / 10000.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 distanceVector = fragCoord - iMouse.xy;\n    float r = sqrt(dot(distanceVector, distanceVector));\n    \n    float lensingPotential = -G * mass / r;\n    \n    vec2 gradientPotential = (G * mass / pow(r, 3.0) * pow(c, 2.0)) * distanceVector;\n    \n    vec2 beta = fragCoord - lensingRatio * gradientPotential;\n\n    vec2 offset = beta * arbitraryScale;\n    vec2 uv = fragCoord/iResolution.xy + offset;\n\n    //fragColor = vec4(offset, 0.0, 1.0);\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}