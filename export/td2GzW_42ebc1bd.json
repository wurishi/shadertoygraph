{"ver":"0.1","info":{"id":"td2GzW","date":"1548427065","viewed":1596,"name":"Anti fish eye / fish eye","username":"Xys","description":"Anti fish eye effect","likes":10,"published":1,"flags":0,"usePreview":1,"tags":["fisheye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_POWER -0.2 // negative : anti fish eye. positive = fisheye\n\n//Inspired by http://stackoverflow.com/questions/6030814/add-fisheye-effect-to-images-at-runtime-using-opengl-es\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )//Drag mouse over rendering area\n{\n\tvec2 p = fragCoord.xy / iResolution.x;//normalized coords with some cheat\n\t                                                         //(assume 1:1 prop)\n\tfloat prop = iResolution.x / iResolution.y;//screen proroption\n\tvec2 m = vec2(0.5, 0.5 / prop);//center coords\n\tvec2 d = p - m;//vector from center to current fragment\n\tfloat r = sqrt(dot(d, d)); // distance of pixel from center\n\n\tfloat power = MAX_POWER * sin(iTime * 2.0);\n\n\tfloat bind;//radius of 1:1 effect\n\tif (power > 0.0) \n        bind = sqrt(dot(m, m));//stick to corners\n\telse {if (prop < 1.0) \n        bind = m.x; \n    else \n        bind = m.y;}//stick to borders\n\n\t//Weird formulas\n\tvec2 uv;\n\tif (power > 0.0)//fisheye\n\t\tuv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);\n\telse if (power < 0.0)//antifisheye\n\t\tuv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);\n\telse uv = p;//no effect for power = 1.0\n        \n    uv.y *= prop;\n\n\tvec3 col = texture(iChannel0, uv).rgb;\n    \n    // inverted\n\t//vec3 col = texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).rgb;//Second part of cheat\n\t                                                  //for round effect, not elliptical\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}