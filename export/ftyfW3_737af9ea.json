{"ver":"0.1","info":{"id":"ftyfW3","date":"1665325634","viewed":88,"name":"TextDisplay","username":"MrHAX00","description":"Wish there were more tutorials on this.\n\nI'm using a multi line macro instead of a function because functions require you to input an array with a pre specified size.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","text","amongus","sussy","texttutoriall"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Rectangle(vec2 uv, vec2 Size, vec2 Pos, float Blur) {\n    uv -= Pos;\n    Size /= 2.;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\n#define Text(uv, Size, Pos, Text, Output) {\\\n    vec2 TextUv = round((uv - Pos) / Size * 20.) * .05;\\\n    for (float i = 0.; i < float(Text.length()); i++) {\\\n        float Current = Text[int(i)];\\\n        vec2 Code = vec2(\\\n            mod(Current, 16.),\\\n            15. - floor(Current / 16.)\\\n        );\\\n        \\\n        Output += Rectangle(TextUv, vec2(1.), vec2(0.), .001) * texelFetch(iChannel0, ivec2((TextUv + Code) * 64. + 32.), 0).x;\\\n        TextUv.x -= .5;\\\n    }\\\n    \\\n    Output = ceil(Output - .7);\\\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    //0 is top left and there are 16 * 16 characters each with 64 by 64 resolution\n    //x is character\n    //y and z are angles\n    //w is distance\n    float In[5] = float[5](\n        83.,\n        85.,\n        83.,\n        83.,\n        89.\n    );\n    \n    //Position is the first character's position and size is the size per character\n    //Text(uv, size, position, array of floats, value to use as output)\n    float Color = 0.;\n    Text(uv, vec2(.1), vec2(0.), In, Color)\n    \n    fragColor = vec4(vec3(Color), 1.);\n}","name":"Image","description":"","type":"image"}]}