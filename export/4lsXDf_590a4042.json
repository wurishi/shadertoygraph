{"ver":"0.1","info":{"id":"4lsXDf","date":"1440246599","viewed":936,"name":"Skin Tone","username":"VB","description":"Made in response to : http://stackoverflow.com/questions/32080747/gpuimage-add-hue-adjustmeShadertoy\nMouse Y controls tone","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float SKIN_HUE = 0.05;\nconst float SKIN_HUE_TOLERANCE = 50.0;    \nconst float MAX_HUE_SHIFT = 0.04;\nconst float MAX_SATURATION_SHIFT = 0.25;\n\n// RGB <-> HSV conversion, thanks to http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // sample video texture\n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    vec4 tex = texture(iChannel0, uv);    \n    vec3 colorRGB = tex.rgb;\n\t\t\n    // mouse Y => skin_tone_shift in [-1, 1]\n    float skin_tone_shift = ((iMouse.y / iResolution.y) * 2.0 - 1.0);\n    //skin_tone_shift = clamp(skin_tone_shift * 1.25, -1.0, 1.0);\n    \n    // Convert color to HSV, extract hue\n\tvec3 colorHSV = rgb2hsv(colorRGB);\t\n    float hue = colorHSV.x;\n\t\n\t// check how far from skin hue\n    float dist = hue - SKIN_HUE;        \n   \tif (dist > 0.5)\n\t\tdist -= 1.0;\n\tif (dist < -0.5)\n\t\tdist += 1.0;\n\tdist = abs(dist)/0.5; // normalized to [0,1]\n    \n\t// Apply Gaussian like filter\n    float weight = exp(-dist*dist*SKIN_HUE_TOLERANCE);  \n\tweight = clamp(weight, 0.0, 1.0);\n    \n\t// We want more orange, so increase saturation\n\tif (skin_tone_shift > 0.0)\n\t\tcolorHSV.y += skin_tone_shift * weight * MAX_SATURATION_SHIFT;\n\t// we want more pinks, so decrease hue\n\telse\n\t\tcolorHSV.x += skin_tone_shift * weight * MAX_HUE_SHIFT;\n\t\t\n    // final color\n\tvec3 finalColorRGB = hsv2rgb(colorHSV.rgb);\t\t\n        \n\t// apply only on right part of the screen\n\tif (uv.x < 0.5)\n\t\tfinalColorRGB = colorRGB;\n\t\t\n\t// add black vertical line\n    if (abs(uv.x - 0.5) < (1.0 / iResolution.x))\n        finalColorRGB *= 0.0;\n    \n    // display\n    fragColor = vec4(finalColorRGB, 1.0);\n}","name":"","description":"","type":"image"}]}