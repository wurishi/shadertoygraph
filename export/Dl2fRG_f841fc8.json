{"ver":"0.1","info":{"id":"Dl2fRG","date":"1694176701","viewed":147,"name":"Party snake","username":"Flopine","description":"It's been a while innit?! :D  Made for a VJ gig in Koblenz","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","rainbow","isometric","audioreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define rep(p,c) p = mod(p,c)-c*.5\n#define crep(p,c,l) p-=c*clamp(round(p/c), -l,l)\n\n#define dt(s,o) fract((iTime+o)*s)\n\n#define sound(p) texture(iChannel0, vec2(p,0.25)).x\n\n#define palette(t,c) ( vec3(.25)+vec3(.5)*cos(TAU*c*(t+vec3(0.1,.36,.63))) )\n\nstruct obj\n{\n    float d;\n    int mt;\n    vec3 c;\n};\n\nobj objmin (obj a, obj b)\n{\n    if(a.d<b.d) return a;\n    else return b;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.y,p.x)+per*.5,per)-per*.5;\n    p = vec2(cos(a), sin(a))*length(p);\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nobj grid1 (vec3 p)\n{\n    p.y += .8;\n    \n    rep(p.xz, 4.);\n    moda(p.xz, 4.);\n    float d = box(p, vec3(2., 0.25, .25));\n    return obj(d, 0, vec3(1., .4, .8));\n}\n\nvec2 g2id; float g1=0.;\nobj grid2 (vec3 p)\n{\n    p.y += 3.;\n    float per = .5;\n    g2id = floor(p.xz/per);\n    rep(p.xz, per);\n    float d = box(p, vec3(.2, sound(sin(g2id.x*0.05)*.5+.5)*1.5, .2));\n    g1 += 0.7/(0.7+d*d);\n    \n    return obj(d, 0, vec3(0.));\n}\n\nobj snake (vec3 p)\n{\n    float per = 1.35, l=3.,\n    id = round(p.x/per);\n    float offset_id = abs(id-l);\n\n    p.z += floor(sin(dt(1.25,offset_id*.15)*TAU))*0.65;\n    crep(p.x, per, l);\n    \n    float d = box(p, vec3(.5));\n    return obj(d, 1, vec3(.5, 1., 0.7));     \n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.0);\n \n    obj scene = snake(p);\n    \n    p.x -= iTime*4.;\n    scene = objmin(scene, grid1(p));\n    scene = objmin(scene, grid2(p));\n\n    return scene;\n}\n\nvec3 gn (vec3 p, float e)\n{\n    vec2 eps = vec2(e, 0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n   \n    vec3 ro = vec3(uv*5., -30.), rd=vec3(0.,0.,1.),p=ro,\n    col=vec3(0.),l=normalize(vec3(0.5,1.,-1.));\n    \n    bool hit=false; obj O;\n    for (float i=0.; i<150.; i++)\n    {\n        O = SDF(p);\n        if (O.d< 0.01)\n        {\n            hit = true;\n            break;\n        }\n        p += O.d*rd*.5;\n    }\n    \n    if(hit)\n    {\n        vec3 n = gn(p, 1e-3);\n        float light = max(dot(n,l),0.);\n        col = mix(vec3(0.01, 0.1, 0.3), O.c, light);\n    }\n    \n    col += g1*palette(g2id.x*0.05-iTime*0.5,vec3(2.5))*0.1;\n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}