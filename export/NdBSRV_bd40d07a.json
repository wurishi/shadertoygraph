{"ver":"0.1","info":{"id":"NdBSRV","date":"1620715205","viewed":55,"name":"breathing-checkerboard-2","username":"ykcwa","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blackandwhite"],"hasliked":0,"parentid":"7djSzy","parentname":"breathing-checkerboard"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat stripe(float x, float stripeWidth) {\n  float s = mod(x + 0.5 * stripeWidth, 2.0 * stripeWidth);\n  if (s > stripeWidth) {\n    s = 2.0 * stripeWidth - s;\n  }\n  float smoothness =  1./iResolution.y;\n  return smoothstep(stripeWidth * 0.5, stripeWidth * 0.5 - smoothness, s);\n}\n\nfloat xorBW(float color1, float color2) { \n  return abs(color1 - color2);\n}\n\nfloat checkerboardColor(vec2 uv, float squareSize) {\n  return xorBW(stripe(uv.x, squareSize), stripe(uv.y, squareSize));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (y from -0.5 to 0.5, x scaled appropriately)\n    vec2 uv = ( fragCoord - .5* iResolution.xy) / iResolution.y;\n\n    float squareSize = 0.2;\n\n    vec2 uv1 = uv + squareSize * vec2(\n      - 0.125 * cos(2.0 * iTime),\n      - 0.125 * cos(2.0 * iTime)\n    );\n\n    vec2 uv2 = uv + squareSize * vec2(\n      0.5 + 0.125 * cos(2.0 * iTime),\n      0.5 + 0.125 * cos(2.0 * iTime)\n    );\n    float c1 = checkerboardColor(uv1, squareSize);\n    float c2 = checkerboardColor(uv2, squareSize);\n\n    fragColor = vec4(vec3(xorBW(c1, c2)), 1.0);\n\n}","name":"Image","description":"","type":"image"}]}