{"ver":"0.1","info":{"id":"MdtyR7","date":"1518383680","viewed":261,"name":"Shader Error ???","username":"samuelotherion","description":"don't miss the fullscreen mode!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["font","print","screenmodes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define one16th .0625\n#define LOG10 0.4342944\n#define _A _(  1., 4. );\n#define _B _(  2., 4. );\n#define _C _(  3., 4. );\n#define _D _(  4., 4. );\n#define _E _(  5., 4. );\n#define _F _(  6., 4. );\n#define _G _(  7., 4. );\n#define _H _(  8., 4. );\n#define _I _(  9., 4. );\n#define _J _( 10., 4. );\n#define _K _( 11., 4. );\n#define _L _( 12., 4. );\n#define _M _( 13., 4. );\n#define _N _( 14., 4. );\n#define _O _( 15., 4. );\n#define _P _(  0., 5. );\n#define _Q _(  1., 5. );\n#define _R _(  2., 5. );\n#define _S _(  3., 5. );\n#define _T _(  4., 5. );\n#define _U _(  5., 5. );\n#define _V _(  6., 5. );\n#define _W _(  7., 5. );\n#define _X _(  8., 5. );\n#define _Y _(  9., 5. );\n#define _Z _( 10., 5. );\n\n#define _a _(  1., 6. );\n#define _b _(  2., 6. );\n#define _c _(  3., 6. );\n#define _d _(  4., 6. );\n#define _e _(  5., 6. );\n#define _f _(  6., 6. );\n#define _g _(  7., 6. );\n#define _h _(  8., 6. );\n#define _i _(  9., 6. );\n#define _j _( 10., 6. );\n#define _k _( 11., 6. );\n#define _l _( 12., 6. );\n#define _m _( 13., 6. );\n#define _n _( 14., 6. );\n#define _o _( 15., 6. );\n#define _p _(  0., 7. );\n#define _q _(  1., 7. );\n#define _r _(  2., 7. );\n#define _s _(  3., 7. );\n#define _t _(  4., 7. );\n#define _u _(  5., 7. );\n#define _v _(  6., 7. );\n#define _w _(  7., 7. );\n#define _x _(  8., 7. );\n#define _y _(  9., 7. );\n#define _z _( 10., 7. );\n\n#define _0 _( 0., 3. );\n#define _1 _( 1., 3. );\n#define _2 _( 2., 3. );\n#define _3 _( 3., 3. );\n#define _4 _( 4., 3. );\n#define _5 _( 5., 3. );\n#define _6 _( 6., 3. );\n#define _7 _( 7., 3. );\n#define _8 _( 8., 3. );\n#define _9 _( 9., 3. );\n\n#define __ _( 0., 10. );\n\nconst vec2\nO1 = vec2( 0., 1. );\n\n// Variables one can use in functions without using them as function's arguments\nfloat ASP;\n\nvec2\nI,  // fragCoord\nN,  // { (0,1),(0,1) }\nP,  // { (0, 1...),(0,1) }\nRi, // inverse 2d Resolution of Screen\nRi0,// inverse 2d Resolution of Texture0 (Symbols)\nL;  // light pos\n\nvec4\nCRS, // xy: pos     wz: size\nFPR, // x: 0/1 2D/3D y: = 0/1 Normal/Bold z: 0/1 LETTER SHAPE OFF ON w: Italic\nFCL, // Font/Forground Color\nBCL, // Background Color\nO;   // Output Color\n\nvec3\nACS; // Text Direction's vec3( angle, cos( angle ), sin( angle ) )\n\nmat2\nDIR; // Text Direction \n\n// set text direction angle\nvoid  dir( float a ) { ACS = vec3( a, cos( a ), sin( a ) ); DIR = mat2( ACS.y, -ACS.z, ACS.z, ACS.y ); }\n\n// check if v in [0,1]\nbool  in1( float v ) { return abs( v - .5 ) <= .5; }\n\n// check if v in ([0,1],[0,1])\nbool  in2( vec2 p ) { return in1( p.x ) && in1( p.y ); }\n\n// digits of floor int( v )\nfloat wd( float v ) { return 1. + max( 0., floor( log( v ) * LOG10 ) ); }\n\n// set Cursor to column, row in P-Space\nvoid  to( float c, float r ) { CRS.xy = vec2( c, r ); }\n\n// move Cursor to column, row in P-Space\nvoid  go( float c, float r ) { CRS.xy += vec2( c, r ) * CRS.zw * DIR; }\n\n// move Cursor n steps to the right\nvoid  goR( float n ) { CRS.xy += vec2( n * CRS.z, 0 ) * DIR; }\n\n// move Cursor n steps to down\nvoid  goD( float n ) { CRS.xy -= vec2( 0, n * CRS.w ) * DIR; }\n\n// digit of float is 10^pos\nfloat doF( float num, float pos ) { return mod( floor( num * pow( pos < 0. ? 10.000001 : 9.99999, -pos ) ), 10. ); }\n\n// plot symbol\nvoid ps( vec2 p ) {\n    \n    vec2\n\tdpdx = dFdx( p ),\n\tdpdy = dFdy( p );\n\n    vec4\n\ttx = textureGrad( iChannel0, p, dpdx, dpdy );\n    \n    vec2\n\td = DIR * ( L - P );\n    \n    float\n\tf = 1.;\n    \n    if( 0. < FPR.x ) f = ( 1. - 2. * dot( d, vec2( .5 - tx.g, tx.b - .5 ) ) ) * pow( 3., -dot( d, d ) );   \n    \n    O.rgb = clamp( mix( O.rgb, f * FCL.rgb, tx.r ), 0., 1. ); \n}\n\n// plot symbol\nvoid ps2( vec2 p, vec2 dpdx, vec2 dpdy ) {\n    \n    \n    vec4\n\ttx = textureGrad( iChannel0, p, dpdx, dpdy );\n    \n    vec2\n\td = DIR * ( L - P );\n    \n    float\n\tf = 1.;\n    \n    if( 0. < FPR.x ) f = ( 1. - 2. * dot( d, vec2( .5 - tx.g, tx.b - .5 ) ) ) * pow( 3., -dot( d, d ) );   \n    \n    O.rgb = clamp( mix( O.rgb, f * FCL.rgb, tx.r ), 0., 1. ); \n}\n\n\n#define Italic vec2 n = ( ( DIR * ( P - CRS.xy ) / CRS.zw  ) ); if( 0. != FPR.w ) n *= mat2( normalize( vec2( 1., -FPR.w ) ), normalize( vec2( 0., 1. ) ) );\n\n// print letter of (col,row) in Font-texture \nvoid _( float c, float r ) {\n\n\tItalic\n        \n    if( in2( n ) ) ps2( ( vec2( c, 15. - r ) + vec2( FPR.y + ( 1. - 2. * FPR.y ) * n.x, n.y ) ) * one16th, ( 1. - 2. * FPR.y ) * dFdx( n ) * one16th, dFdy( n ) * one16th );\n    \n    goR( 1. );\n}\n\n// print Int with flr digits\nvoid\npInt( float v, float flr ) {\n\n\tItalic\n        \n\tif( ( in1( n.x / flr ) && in1( n.y ) ) ) ps2( ( vec2( FPR.y + ( 1. - 2. * FPR.y ) * fract( n.x ), fract( n.y ) ) + vec2( doF( abs( v ), flr - floor( n.x ) - 1. ), 12 ) ) * one16th, ( 1. - 2. * FPR.y ) * dFdx( fract( n ) )  * one16th, dFdy( fract( n ) ) * one16th );\n\t\n    goR( flr );\n}\n\n// print abs( v ) with flr digits in front of the . and frct behind\nvoid\npAbs( float v, float flr, float frct ) {\n\n\tItalic\n        \n    if( ( in1( n.x / ( flr + frct + 1. ) ) && in1( n.y ) ) ) {\n    \n    \tfloat\n\t\tpos = flr - floor( n.x ),\n \t\tdof = doF( abs( v ), pos - ( 0. < pos ? 1. : 0. ) );\n        \n    \tps2( ( vec2( FPR.y + ( 1. - 2. * FPR.y ) * fract( n.x ), fract( n.y ) ) + ( pos == 0. ? vec2( 14, 13 ) : vec2( dof, 12 ) ) ) * one16th, ( 1. - 2. * FPR.y ) * dFdx( fract( n ) ) * one16th, dFdy( fract( n ) ) * one16th );\n    }\n\n    goR( 1. + flr + frct );\n}\n\n// print v with a sign, flr digits in front of the . and frct behind\nvoid\npFlt( float v, float flr, float frct ) {\n\n\t_( 12. - ( v < 0. ? -1. : +1. ), 2. );\n    \n    pAbs( v, flr, frct );    \n}\n\n// print data f = scaling factor\nvoid\npDt( float f ) {\n\n    CRS.zw = f * vec2( .016, .04 );\n\t\n    //dir( 0. );\n    \n    to( ASP - 6. * CRS.z, 1. - CRS.w );\n    \n    FCL = vec4( .3, .8, 1., 1. );\n    \n    pInt( iDate.y + 1., 2. ); _( 13., 2. ); pInt( iDate.z, 2. );\n    \n    CRS.zw = f * vec2( .02, .04 );\n\t\n    go( -4., -1. );\n    \n    pInt( iDate.x, 4. );\n    \n    go( -10., -1. );\n    \n    FCL = vec4( 1., .8, .1, 1. );\n    \n\t_f _p _s _( 10., 3. ); __ pAbs( iFrameRate, 2., 2. );\n\n    FCL = vec4( .8, 1., .1, 1. );\n    \n    float\n    d = wd( iTime );\n    \n    go( -11. -d, -1. );\n    \n    _i _T _i _m _e _( 10., 3. ); __ pAbs( iTime, d, 3. );\n    \n    go( -18., -1. );\n    \n    FCL = vec4( 1., .3, .2, 1. );\n    \n    _s _i _n _( 8., 2. ); _i _T _i _m _e _( 9., 2. ); _( 10., 3. ); __ pFlt( sin( iTime ), 1., 3. );\n    \n    go( -18., -1. );\n\t\n    _c _o _s _( 8., 2. ); _i _T _i _m _e _( 9., 2. ); _( 10., 3. ); __ pFlt( cos( iTime ), 1., 3. );\n}\n\n#define showLight if( length( P - L ) < .005 ) O += vec4( 1 );\n\n// draw width  and height  \nvoid size( ) {\n    \n    dir( 0. );\n\n    FCL = vec4( 1,1,1,1 );\n\n    float\n\tw = wd( iResolution.x ),\n    h = wd( iResolution.y );\n    \n    CRS.zw = .03 * vec2( 1920, 1200 ) / iResolution.xy;\n\n    CRS.xy = vec2( .5 * ( ASP - ( 7. + w ) * CRS.z ), 1. - CRS.w );\n\n    _w _I _d _t _h _( 10., 3. ); __ pInt( iResolution.x, w ); \n\n    to( CRS.w, .5 * ( 1. - ( 8. + h ) * CRS.z ) );\n\n    dir( .5 * 3.1415926535 );\n\n    _h _E _i _g _h _t _( 10., 3. ); __ pInt( iResolution.y, h ); \n\n    dir( 0. );\n}\n\n#define PI05 .5 * 3.1415926535\n#define PI2  2. * 3.1415926535\n\nvoid\nclock( ) {\n\n\tCRS = vec4( .5 * ASP, .5, .03, .08 );\n    \n    dir( PI05 - mod( iDate.w / ( 12. * 3600. ), 1. ) * PI2 );\n    \n    goD( .5 );\n    \n    __ pInt( mod( iDate.w / 3600., 24. ), 2. ); __ _h _O _U _r _s\n\n\tCRS = vec4( .5 * ASP, .5, .04, .05 );\n    \n    dir( PI05 - floor( mod( iDate.w / 60., 60. ) ) / 60. * PI2 );\n    \n    goD( .5 );\n\n\t__ pInt( mod( iDate.w / 60., 60. ), 2. ); __ _m _I _n _U _t _E _s\n        \n\tCRS = vec4( .5 * ASP, .5, .05, .03 );\n    \n    dir( PI05 - floor( mod( iDate.w, 60. ) ) / 60. * PI2 );\n    \n\tgoD( .5 );\n    \n    __ pInt( mod( iDate.w, 60. ), 2. ); __ _s _E _c _O _n _d _s\n}\n\nvoid\npreview( ) {\n    \n    if( 451. < iResolution.x ) return;\n        \n    dir( 0. );\n\n    FPR = vec4( 0., 0.25, 0., .5 );\n\n    BCL = vec4( 0,0,0,1 );\n    FCL = vec4( 1,0,0,1 );\n\n    O = BCL;\n\n    CRS.zw = vec2( .05, .15 );\n\n    to( .5 * ASP, .5 );\n\n    go( -6.5, -1. );\n\n    _S _h _a _d _e _r __ _E _r _r _o _r\n        \n\tFCL = vec4( pow( sin( iTime - 10. * P.x ), 10. ), 0., 0., 1. );\n    \n    __ _( 15., 3. ); _( 15., 3. ); _( 15., 3. );\n}\n\nvoid\nwindow( ) {\n\n    if( iResolution.x < 451. || 850. < iResolution.x  ) return;\n\n    FPR = vec4( 0., 0.1, 0., .0 );\n\n    size( );\n    \n    CRS.zw = vec2( .2, .2 + .1 * sin( 3. * ( iTime + P.x ) ) );\n\n    to( .5 * ASP - 3. * CRS.z, .5 - .5 * CRS.w );\n\n    FCL = vec4( .12, .5, 1, 1. );\n\n    FPR = vec4( 1., .13 + .13 * sin( 3. * ( iTime + P.x ) ), 0., .0 );\n\n    _w _i _n _d _o _w\n\n\tFPR = vec4( 0., 0.05, 0., .0 );\n    \n    pDt( 1.5 );\n\n    showLight\n}\n\nvoid\nfullscreen( ) {\n\n    if( iResolution.x < 851. ) return;\n        \n    FPR = vec4( 1., 0.1, 1., .0 );\n\n    size( );\n\n    dir( .1 * sin( 4. * iTime ) );\n\n    to( .5 * ASP, .5  );\n\n    CRS.zw = vec2( .15, .4 );\n\n    go( -5., -.5 );        \n\n    FCL = .27 + .05 * vec4( sin( iTime ), sin( 2. * iTime ), sin( 3. * iTime ), 1. );\n\n    FPR = vec4( 1., .26, 0., .5 * sin( -1.5 + 4. * iTime + P.x ) );\n\n    _F _U _L _L _S _C _R _3 _3 _N\n\n\tdir( 0. );\n\n    FPR = vec4( 1,0,0,0 );\n\n    clock( );\n    \n    dir( 0. );\n\n    pDt( 1. );\n        \n    showLight\n}\n\nvoid\ndemo( ) {\n    \n    preview( );\n\t\n    window( );\n    \n\tfullscreen( );    \n}\n\nvoid\nfinish( out vec4 o ) {\n\n    o = clamp( O, 0., 1. );\n}\n\nvoid\ninit( vec2 i ) {\n\n    Ri = 1. / iResolution.xy;\n    I = i;\n    N = i * Ri;\n    P = N;\n    ASP = iResolution.x * Ri.y;\n    P.x *= ASP;\n    Ri0 = 1. / iChannelResolution[ 0 ].xy;\n\tL = vec2( .5 * ASP, 1. ) + .45 * vec2( ASP * sin( sin( iTime ) ), -2. * cos( sin( iTime ) ) );    \n\tFCL = vec4( 0.00, 1.00, 0.00, 1. );\n\tBCL = vec4( 0.15, 0.15, 0.15, 1. );\n\tO = BCL;\n}\n\nvoid\nmainImage( out vec4 o, in vec2 i ) {\n        \n    init( i );\n    \n    demo( );\n\n\tfinish( o );\n}","name":"Image","description":"","type":"image"}]}