{"ver":"0.1","info":{"id":"tdGyz3","date":"1603343802","viewed":97,"name":"huya","username":"jokey","description":"初次尝试，虎牙公仔一只。欢迎大佬指正","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash( float n )\n{\n    return fract(sin(n)*158.5453123);\n}\n\n\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\n\n//----------------------------------------------------------------\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n// trick by klems\n#define ZERO (min(iFrame,0))\n\n//----------------------------------------------------------------\n\nvec2 map( vec3 p )\n{\n\tp.y -= 1.8;\n    \n\tp.x = abs(p.x);\n\n\tvec3 q = p;\n\tq.y -= 0.2*pow(1.0-length(p.xz),1.0)*sin(p.y*3.0)*smoothstep(0.0,0.2,p.y);\n    q.x*=0.71;\n\tq.z *= 1.0 + 0.1*smoothstep( 0.0, 0.5, q.z )*smoothstep( -0.5, 0.5, p.y );\n\tfloat d1 = length( q ) - 0.9;\n    vec2 res = vec2( d1, 2.3 );\n\n\n\tvec3 hp = p - vec3(0.65,0.4,0.0);\n    hp.xy = mat2(0.6,0.8,-0.8,0.6)*hp.xy;\n    hp.x += 1.8*hp.y*hp.y;\n    float d4 = sdEllipsoid(hp, vec3(0.53,0.5,0.26) );\n\t//d4 *= 0.2;\n\tif( d4<res.x )  res = vec2( d4, 2.0 );\n\n \n\n\t// mouth\n\tfloat mo = length( (q-vec3(0.0,-0.35,1.0))*vec3(1.0,1.2,0.25)/1.2 ) -0.3/1.2;\n\tfloat of = 0.1*pow(smoothstep( 0.0, 0.2, abs(p.x-0.3) ),0.5);\n\tmo = max( mo, -q.y-0.35-of );\n\n\tfloat li = smoothstep( 0.0, 0.05, mo+0.02 ) - smoothstep( 0.05, 0.10, mo+0.02 );\n\t//res.x -= 0.03*li*clamp( (-q.y-0.4)*10.0, 0.0, 1.0 );\n\t\n\treturn vec2(res.x*0.8,res.y);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n#if 0    \n    vec3 eps = vec3(0.002,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.002*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    float m = -1.0;\n\tfloat mint = 10.0;\n\n    // plane\t\n\tfloat tf = (0.0-ro.y)/rd.y;\n\tif( tf>0.0 ) { mint = tf; m = 0.0; }\n\t\n\t// mike\n\tfloat maxd = min(5.0,mint);\n\tfloat precis = 0.001;\n    float t = 0.0;\n\tfloat d = 0.0;\n    for( int i=ZERO; i<128; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        float h = res.x;\n\t\td = res.y;\n        if( h<precis||t>maxd ) break;\n        t += h;\n    }\n\n   if( t<maxd && t<mint )\n\t{\n\t\tmint = t;\n\t\tm = d;\n\t}\n\n    return vec3( mint, m, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<50; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n\t\tt += clamp( h, 0.01, 0.25 );\n\t\tif( res<0.005 || t>10.0 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec2 rotate( vec2 p, float a )\n{\n    return vec2(cos(a)*p.x+p.y*sin(a), p.y*cos(a)-p.x*sin(a));\n}\nfloat sdEquilateralTriangle( in vec2 p,float ro )\n{\n    vec2 q=rotate(p,ro);\n    const float k = sqrt(3.0);\n    q.x = abs(q.x) - 1.0;\n    q.y = q.y + 1.0/k;\n    if( q.x+k*q.y>0.0 ) q = vec2(q.x-k*q.y,-k*q.x-q.y)/2.0;\n    q.x -= clamp( q.x, -2.0, 0.0 );\n    return -length(q)*sign(q.y);\n}\n\nvec3 lig = normalize(vec3(1.0,0.7,0.9));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\t\n\t#ifdef STEREO\n\tfloat eyeID = mod(fragCoord.x + mod(fragCoord.y,2.0),2.0);\n    #endif\n\n\n\t\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = sin(-0.25 + 0.31416*iTime) - 6.2831*(m.x-0.5);\n\n\tvec3 ro = vec3(3.5*sin(iTime),1.8,3.5*cos(iTime));\n    vec3 ta = vec3(0.0,1.5,0.0);\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\t#ifdef STEREO\n\tvec3 fo = ro + rd*7.0; // put focus plane behind Mike\n\tro -= 0.1*uu*eyeID;    // eye separation\n\trd = normalize(fo-ro);\n    #endif\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = vec3(1.0);\n\n\t// raymarch\n    vec3 tmat = intersect(ro,rd);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        // materials\n\t\tvec4 mate = vec4(0.0);\n\t\tvec2 mate2 = vec2(1.0,1.0);\n\t\tif( tmat.z<0.5 )\n\t\t{\n\t\t\tnor = vec3(0.0,1.0,0.0);\n\t\t    ref = reflect( rd, nor );\n\t\t\tmate.xyz = vec3(1.0);\n            mate2.y = 1.0 - 0.9*(2.0/(2.0+dot(pos.xz,pos.xz)));\n\t\t}\n\t\telse if( tmat.z<2.5 )\n\t\t{\n\t\t\tvec3 q = pos-vec3(0.0,2.1,0.0);\n\n\t\t\tfloat an2 = an + 0.015*(-1.0+2.0);\n            vec3 oq = q;\t\t\t\n\t\t\tq.x += -2.0*0.15*clamp(sin(an2),-0.42,0.42);\n            q.x*=0.6;\n\t\t\tfloat f = length( q.xy );  \n            vec3 eyec=vec3(0.398,0.23,0.133);\n            mate = vec4(1.0,0.967,0.02,1.0);\n           \t//mate2.y = 1.0-smoothstep(0.24,0.35,length( oq.xy-vec2(0.0,0.035) ));\t\t\t\n\t        mate2.y*=0.1;\n            if(q.z>0.0){\n\t\t\tmate.xyz = mix(mate.xyz, vec3(0.9),1.0-smoothstep(0.5,0.55,f) );\t\n             \n            vec3 mq= pos-vec3(0.0,2.1,0.0);\n            mq.y += 0.7;\n            mq.xy*=vec2(1.6,4.3);\n\t\t\tf = length( mq.xy );    \n            mate.xyz = mix(mate.xyz, vec3(0.531,0.281,0.152),1.0-smoothstep(0.5,0.55,f) );\t\n                \n                \n            float ya=sdEquilateralTriangle(mq.xy*vec2(18.0,9.0)+vec2(-4.0,-3.5),3.14*0.35);\n\t\t\tmate.xyz = mix( mate.xyz, vec3(3.9), 1.0-smoothstep( 0.18, 0.19, ya ) );   \n                   \n                \n                \n            float eye=sdEquilateralTriangle(q.xy*4.0,3.14*0.15);                 \n\t\t\tmate.xyz = mix( mate.xyz, eyec, 1.0-smoothstep( 0.18, 0.19, eye ) );\n           \n            oq.x += -0.4*clamp(sin(an2),-0.22,0.22);\n            oq.x+=0.1;\n            oq.y-=0.1;\n\t\t\tf = length( oq.xy );\n\t\t\tmate.xyz = mix( mate.xyz, vec3(0.9), 1.0- smoothstep( 0.07, 0.10, f ));\n                \n                \n         \n            }\n            \n     \n            float wen1=sdEquilateralTriangle(q.xy*vec2(4.0,10.0)+vec2(-3.0,6.0),3.14*1.15);\n\t\t\tmate.xyz = mix( mate.xyz, eyec, 1.0-smoothstep( 0.18, 0.19, wen1 ) );\n\n            float wen2=sdEquilateralTriangle(q.xy*vec2(4.0,10.0)+vec2(3.0,6.0),3.14*0.15);\n\t\t\tmate.xyz = mix( mate.xyz, eyec, 1.0-smoothstep( 0.18, 0.19, wen2 ) );\n\n            float wen3=sdEquilateralTriangle(q.xy*vec2(4.0,10.0)+vec2(-3.0,4.0),3.14*1.15);\n\t\t\tmate.xyz = mix( mate.xyz, eyec, 1.0-smoothstep( 0.18, 0.19, wen3 ) );\n\n            float wen4=sdEquilateralTriangle(q.xy*vec2(4.0,10.0)+vec2(3.0,4.0),3.14*0.15);\n\t\t\tmate.xyz = mix( mate.xyz, eyec, 1.0-smoothstep( 0.18, 0.19, wen4 ) );\n            \n            \n           \n            \n\t\t\n            //mate.xyz *= 1.0-0.2*vec3(0.5,0.9,1.0)*smoothstep( 0.2, 0.4, f );\n           \n            mate2.x = 64.0;\n\t\t}\t\n        \n\t\n\t\t\n\t\t// lighting\n\t\tfloat occ = (0.5 + 0.5*nor.y)*mate2.y;\n        float amb = 0.5;\n\t\tfloat bou = clamp(-nor.y,0.0,1.0);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n        float bac = max(0.3 + 0.7*dot(nor,-lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 0.001, 32.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 2.0 );\n        vec3  hal = normalize(lig-rd);\n        float spe = max(pow( clamp( dot(nor,hal), 0.0, 1.0), mate2.x*4.0 ),0.0 );\n\t\t\n\t\t// lights\n\t\tvec3 lin = vec3(0.2);\n        lin += 2.0*dif*vec3(1.00,1.00,1.00)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n\t\tlin += 1.0*amb*vec3(0.30,0.30,0.30)*occ;\n\t\tlin += 2.0*bou*vec3(0.40,0.40,0.40)*mate2.y;\n\t\tlin += 4.0*bac*vec3(0.40,0.30,0.25)*occ;\n        lin += 1.0*fre*vec3(1.00,1.00,1.00)*2.0*mate.w*(0.5+0.5*dif*sha)*occ;\n\n        \n\t\tcol = mate.xyz*lin;\n\t}\n\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\n\t// vigneting\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );\n\n    #ifdef STEREO\t\n    col *= vec3( eyeID, 1.0-eyeID, 1.0-eyeID );\t\n\t#endif\n\t   \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}