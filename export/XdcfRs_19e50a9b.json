{"ver":"0.1","info":{"id":"XdcfRs","date":"1526296737","viewed":164,"name":"RAVEArrow","username":"skandix","description":"RaVEBOW","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rainbowarrow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nvec2 rotate (vec2 v, float a ){\n\tfloat s = sin(a); \n    float c = cos(a); \n    mat2 m = mat2(c, -s, s,c);\n    return m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 q = uv - vec2(.5, .5);\n\n\n    // Time varying pixel color\n    \n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    \n    if (mod(iTime, 2.0) >= 1.0) {\n        uv = uv *2.-1.7;\n    \tuv.xy /= .1;\n    } else {\n        uv = uv *2.-1.7;\n    \tuv.xy /= -.1;\n    }\n    \n    // *= .2;\n    \n\t//vec3 col = dot(atan(uv.y/uv.x), sin(iTime)*5.)-sin(iTime+uv.y+abs(uv.x)+PI-vec3(0,2,4))*TWO_PI;\n    \n\tvec3 col = .2+ sin(0.1 + tan(iTime)*cos(iTime+uv.y-abs(uv.x)+vec3(0,2,4))-vec3(q, .5));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}