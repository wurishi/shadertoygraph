{"ver":"0.1","info":{"id":"wtXSD2","date":"1564315239","viewed":146,"name":"Shiny textured softshadow donuts","username":"Soondead","description":"Added soft shadows to my scene and obviously had to show off by using donuts instead of spheres. It took me a while to figure out what most articles left out about marching from p towards the light, seeing as the nearest point would initially be p...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shadows","textures","soft","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int MAX_MARCHING_STEPS = 64;\nconst float MIN_DIST = 0.1;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\n/**\n * Based heavily on jlfwong's excellent raymarching tutorials\n * and some very helpful hints from the Shadertoy Community on Facebook,\n * this is my first venture into Shadertoy and raymarching.\n *\n * Please feel free to share your comments, I'm sure I've got the math\n * wrong in a number of places as most of it was figured out simply\n * by changing things until it seemed to work :-P\n *\n * My use of 4x4 matrices to describe transforms are there\n * to get the polar texture coordinates right. This required a lot\n * of rewriting and there's probably a simpler way...\n */\n\nfloat torus( vec4 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sphere(vec4 p, float r) {\n    return length(p.xyz) - r;\n}\n\n\n/** Normalize angles to -PI..PI range\n * WebGL seems to disagree when theta becomes too big or too small?\n */\nconst float PI = 3.1415;\nconst float TWO_PI = PI * 2.0;\n\nfloat n_theta(float theta) {\n\treturn theta - TWO_PI * floor((theta + PI) / TWO_PI);\n}\n\nfloat n_sin(float theta) {\n    return sin(n_theta(theta));\n}\n\nfloat n_cos(float theta) {\n    return cos(n_theta(theta));\n}\n\n\n\n\n/* 4x4 matrix funxtions */\n\nmat4 m_rotateX(float r) {\n    return mat4(\n        1.0, 0.0, 0.0, 0.0,\n        0.0, n_cos(r), n_sin(r)*-1.0, 0.0,\n        0.0, n_sin(r), n_cos(r), 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 m_rotateY(float r) {\n    return mat4(\n        n_cos(r), 0.0, n_sin(r), 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        n_sin(r)*-1.0, 0.0, n_cos(r), 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 m_rotateZ(float r) {\n    return mat4(\n        n_cos(r), n_sin(r)*-1.0, 0.0, 0.0,\n        n_sin(r), n_cos(r), 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 m_translate(vec3 v) {\n    return mat4(\n        1.0, 0.0, 0.0, v.x,\n        0.0, 1.0, 0.0, v.y,\n        0.0, 0.0, 1.0, v.z,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\n\n/** \n/**\n * SDF scene definition\n */\nfloat scene(vec4 sp, inout mat4 matrix, inout vec4 color, bool showlights) {\n    float dist = MAX_DIST;\n    float d = MAX_DIST;\n    mat4 m = mat4(1.0); // Don't move/rotate camera here, see definition of \"eye\" in main()\n    vec4 c = vec4(0.0, 0.0, 0.0, 0.0); // Will be replaced by object color (or discarded). 4th component = EMISSIVE yes/no, not ALPHA\n\n    // Add a red shape\n    m = m_translate(vec3(2.0, n_sin(iTime*2.0)*0.5, 0.0)) * m_rotateY(n_sin(iTime)*PI);\n    c = vec4(1.0, 0.2, 0.2, 0.0);\n    d = torus(sp*m, vec2(0.7, 0.3));\n    //d = sdSphere(sp*m, 1.0);\n    if (abs(d) < abs(dist)) { dist = d; matrix = m; color = c; }\n\n    // Add a green shape\n    m = m_translate(vec3(0.0, n_cos(iTime*2.0)*0.5, 0.0)) * m_rotateX((iTime+n_sin(iTime))*3.0);\n    c = vec4(0.2, 1.0, 0.2, 0.0);\n    d = torus(sp*m, vec2(0.7, 0.3));\n    //d = sdSphere(sp*m, 1.0);\n    if (abs(d) < abs(dist)) { dist = d; matrix = m; color = c; }\n\n    // Add a blue shape\n    m = m_translate(vec3(-2.2, n_sin(iTime*2.0)*0.5, 0.0)) * m_rotateZ(n_cos(iTime)*PI*-1.0);\n    c = vec4(0.0, 0.2, 1.0, 0.0);\n    d = torus(sp*m, vec2(0.7, 0.3));\n    //d = sdSphere(sp*m, 1.0);\n    if (abs(d) < abs(dist)) { dist = d; matrix = m; color = c; }\n\n    // Visualize light sources as small spheres\n    if (showlights == true) {\n\n        // Light1\n        m = m_translate(vec3(-3.0 * n_sin(iTime), -1.0, -3.0 * n_cos(iTime))); // Matches light1Pos moveent\n        c = vec4(0.6, 0.3, 0.3, 1.0); // alpha 1.0 = emissive\n        d = sphere(sp*m, 0.05);\n        if (abs(d) < abs(dist)) { dist = d; matrix = m; color = c; }\n\n        // Light2\n        m = m_translate(vec3(-2.0 * n_sin(0.37 * iTime),\n                              -2.0 * n_cos(0.37 * iTime),\n                              -2.0)); // Matches light2Pos movement\n        c = vec4(0.3, 0.6, 0.3, 1.0); // alpha 1.0 = emissive\n        d = sphere(sp*m, 0.05);\n        if (abs(d) < abs(dist)) { dist = d; matrix = m; color = c; }\n\n        // Light3\n        m = m_translate(vec3(-2.0 * n_sin(0.17 * iTime),\n                              -2.0 * n_cos(0.43 * iTime),\n                              -2.0)); // Matches light3Pos movement\n        c = vec4(0.3, 0.3, 0.6, 1.0); // alpha 1.0 = emissive\n        d = sphere(sp*m, 0.05);\n        if (abs(d) < abs(dist)) { dist = d; matrix = m; color = c; }\n\n    }\n\n    return dist;\n}\n\n\n\nfloat shortestDistanceToSurface(vec4 eye, vec4 marchingDirection, float start, float end, inout mat4 matrix, inout vec4 color) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = scene(eye + depth * marchingDirection, matrix, color, true);\n        if (dist < EPSILON) {\n\t\t\t      return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\n\nvec4 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec4(xy, -z, 1.0));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec4 p) {\n    mat4 m = mat4(1.0); // Returned by scene, unused here\n    vec4 c = vec4(0.0, 0.0, 0.0, 0.0); // Returned by scene, unused here\n    return normalize(vec3(\n        scene(vec4(p.x + EPSILON, p.y, p.z, 1.0), m, c, false) - scene(vec4(p.x - EPSILON, p.y, p.z, 1.0), m, c, false),\n        scene(vec4(p.x, p.y + EPSILON, p.z, 1.0), m, c, false) - scene(vec4(p.x, p.y - EPSILON, p.z, 1.0), m, c, false),\n        scene(vec4(p.x, p.y, p.z  + EPSILON, 1.0), m, c, false) - scene(vec4(p.x, p.y, p.z - EPSILON, 1.0), m, c, false)\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n *\n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec4 eye, vec3 normal,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = normal;\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye.xyz - p);\n    vec3 R = normalize(reflect(-L, N));\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Calculate soft shadow by marching from point 'p' towards point 'light'\n * Obviously stolen from iq\n * Various articles fail to mention that scene() obviously starts by\n * returning p as nearest point so we need to ignore that and always move forward.\n * We are not looking for an exact surface hit.\n */\nfloat shadow(vec4 p, vec4 light) {\n    mat4 m = mat4(1.0); // My scene() requires this but we won't use\n    vec4 c = vec4(0.0, 0.0, 0.0, 0.0); // My scene() requires this but we won't use\n    float res = 1.0; // Initially assume no shadow\n    float lightsize = 2.0; // Bigger light = softer shadows\n\n    vec4 direction = light - p;\n    float total = MIN_DIST;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = scene(p + direction * total, m, c, false);\n        res = min(res, lightsize * dist/total);\n        total += clamp(dist, 0.02, 0.10); // Force ray forward from p\n        if (res < EPSILON || total > MAX_DIST) break;\n    }\n    return clamp(res, 0.0, 1.0);\n\n}\n\n/**\n * Lighting via Phong illumination.\n *\n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec4 eye, vec3 normal) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    mat4 m = mat4(1.0); // Return value from shadow SDF\n    vec4 c = vec4(0.0, 0.0, 0.0, 0.0); // Return value from shadow SDF\n\n    vec3 light1Pos = vec3(3.0 * sin(iTime), 1.0, 3.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.6, 0.3, 0.3);\n    float shadow1 = shadow(vec4(p, 1.0), vec4(light1Pos, 1.0));\n    color += shadow1 * phongContribForLight(k_d, k_s, alpha, p, eye, normal, light1Pos, light1Intensity);\n\n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime), 2.0 * cos(0.37 * iTime), 2.0);\n    vec3 light2Intensity = vec3(0.3, 0.6, 0.3);\n    float shadow2 = shadow(vec4(p, 1.0), vec4(light2Pos, 1.0));\n    color += shadow2 * phongContribForLight(k_d, k_s, alpha, p, eye, normal, light2Pos, light2Intensity);\n\n    vec3 light3Pos = vec3(2.0 * sin(0.17 * iTime), 2.0 * cos(0.43 * iTime), 2.0);\n    vec3 light3Intensity = vec3(0.3, 0.3, 0.6);\n    float shadow3 = shadow(vec4(p, 1.0), vec4(light2Pos, 1.0));\n    color += shadow3 * phongContribForLight(k_d, k_s, alpha, p, eye, normal, light3Pos, light3Intensity);\n\n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat4 viewMatrix(vec4 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye.xyz);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n/**\n * Given a signed float value, wrap it to 0..1 range\n * Useful for out-of-range UV coordinates\n */\nfloat wrap_to_normal(float n) {\n    if (n > 1.0) {\n        return n - floor(n);\n    }\n    if (n < 0.0) {\n        return n + ceil(abs(n));\n    }\n    return n;\n}\n\nvec3 checkerboard(float u, float v) {\n    float r = 8.0; // Repetitions for uv 0..1\n    int ur = int(wrap_to_normal(u) * r);\n    int vr = int(wrap_to_normal(v) * r);\n    if ((ur+vr) % 2 == 1) {\n        return vec3(1.0, 1.0, 1.0);\n    } else {\n        return vec3(0.2, 0.2, 0.2);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 viewDir = rayDirection(45.0, iResolution.xy, fragCoord.xy);\n    vec4 eye = vec4(0.0, 0.0, 12.0, 1.0) * m_rotateX(PI/-6.0) * m_rotateY(PI/6.0 + (iTime*0.3));\n\n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    mat4 transform = mat4(1.0);\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0); // Will be replaced by object color. 4th component is EMISSIVE yes/no\n\n    vec4 worldDir = viewToWorld * viewDir;\n\n\n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST, transform, color);\n\n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        // Use a simple gradient on the lower half screen for background\n        fragColor = vec4(0.0, 0.0, 1.0-((fragCoord.y/iResolution.y)+0.5), 1.0);\n\t\t    return;\n    }\n\n    // The closest point on the surface to the eyepoint along the view ray\n    vec4 p = eye + dist * worldDir;\n\n\n    vec3 normal = estimateNormal(p);\n\n    // Calculate polar coordinates using a vector from p to center of object\n    // c = 0,0,0 * transform so p * transform should point in the right direction\n    vec4 pc = p * transform;\n    float u = atan(pc.z, pc.x) / PI; // Latitude\n    float v = atan(pc.y, sqrt((pc.x * pc.x) + (pc.z * pc.z))) / PI; // Longitude\n    vec3 texel = checkerboard(u, v);\n\n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = color.rgb;\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 20.0;\n    vec3 phong = phongIllumination(K_a, K_d, K_s, shininess, p.xyz, eye, normal);\n\n    fragColor = vec4(phong.rgb * texel, 1.0);\n    if (color.a == 1.0) {\n        fragColor = vec4(fragColor.rgb + color.rgb, 1.0); // color.a is EMISSIVE yes/no\n    }\n}\n","name":"Image","description":"","type":"image"}]}