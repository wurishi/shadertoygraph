{"ver":"0.1","info":{"id":"43fBWS","date":"1728811661","viewed":90,"name":"psy caleidoscope ","username":"nayk","description":"source  https://www.shadertoy.com/view/l3sBRl https://www.shadertoy.com/view/M3lBRl","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal","voronoiise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/M3lBRl leadlight, 2024 by jt\n// based on iq's https://www.shadertoy.com/view/ldl3W8 Voronoi - distances\n// (modified to return id).\n\n// Randomly colored voronoi pattern reminds me of leadlight / leaded windows...\n// https://en.wikipedia.org/wiki/Leadlight\n\n// tags: voronoi, leadlight\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n#define n1Q(p) p *= 2.*ri(round(atan(p.x, p.y) * 4.) / 4.)\n#define ri(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\n\n\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(1.0/antialiasing(0.5),0. , d - (b) )\n\n#define n1Q(p) p *= 2.*ri(round(atan(p.x, p.y) * 4.) / 4.)\n#define ri(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 DFS(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut;\n  return colOut;\n}\n\n\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n\n{ \nvec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\n\n\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\n// Function to rotate a 2D point by an angle\nvec2 rotate(vec2 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\n\n// Function to generate a random number based on tile position\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n\nfloat sop1(vec2 p)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.00675676,0.01351351);\nr1=0.5574324;\nfloat d1=sdCircle(p-A,r1);\n\nA=vec2(0.00675676,0.01351351);\nr1=0.4324324;\nfloat d2=sdCircle(p-A,r1);\n\nd2=Sdf_D(d1,d2);\n\n\nA=vec2(0.9932432,1.0);\nr1=0.5540541;\nfloat d3=sdCircle(p-A,r1);\n\nA=vec2(0.9932432,1.0);\nr1=0.4358108;\nfloat d4=sdCircle(p-A,r1);\nd4=Sdf_D(d3,d4);\n\n\nfloat dout=min(d2, d4);\n    return dout;\n}\n\n\nfloat sop2(vec2 p)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.0,1.0);\nr1=0.4358108;\nfloat d1=sdCircle(p-A,r1);\n\nA=vec2(0.0,1.0);\nr1=0.5574324;\nfloat d2=sdCircle(p-A,r1);\nd2=Sdf_D(d2,d1);\n\n\nA=vec2(0.9932432,0.00675676);\nr1=0.5574324;\nfloat d3=sdCircle(p-A,r1);\n\nA=vec2(0.9932432,0.00675676);\nr1=0.4324324;\nfloat d4=sdCircle(p-A,r1);\nd4=Sdf_D(d3,d4);\n\nfloat dout=min(d2, d4);\n\nreturn dout;\n\n}\n\n\nfloat sop3(vec2 p)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5);\nmed=vec2(0.06756756,0.52950676);\n\nfloat d1=sdBox(p-A,med);\n\nA=vec2(0.5,0.5);\nmed=vec2(0.567568,0.06587838);\n\nfloat d2=sdBox(p-A,med);\n\n    float  dout=min(d1,d2);\n    return dout;\n}\n\n\n\nfloat sop4(vec2 p)\n{\n\nvec2 A,B, med,pr;\nn1Q(p.xy);\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5);\nmed=vec2(0.567568,0.06587838);\nfloat d1=sdBox(p-A,med);\n\nA=vec2(0.5,0.5);\nmed=vec2(0.06756756,0.5560676);\nfloat d2=sdBox(p-A,med);\n\n\nfloat dt=Sdf_U(d2,d1);\n\nA=vec2(0.4966216,0.5);\nr1=0.3141892;\nfloat d3=sdCircle(p-A,r1);\n\nA=vec2(0.4966216,0.5);\nr1=0.1824324;\nfloat d4=sdCircle(p-A,r1);\n\nd4=Sdf_D(d3,d4);\n    float dout=min(dt,d4);\n    \n\n    return dout;\n}\n\n\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvec3 voronoi(vec2 p) // modified https://www.shadertoy.com/view/ldl3W8 Voronoi - distances by iq\n{\nn1Q(p.xy);\n p.xy=rotate(p.xy, iTime);\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    vec2 mg, mr;\n\n    float md = 2.0;\n    for(int j=-1; j<=+1; j++)\n    {\n        for(int i=-1; i<=+1; i++)\n        {\n            vec2 g = vec2(float(i),float(j));\n          \n            vec2 o = hash22(ip + g);\n            \n            vec2 r = g + o - fp;\n             r.xy=rotate(r.xy, iTime);\n            float d = dot(r,r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n                mg = g;\n            }\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for(int j=-2; j<=+2; j++)\n    {\n        for(int i=-2; i<=+2; i++)\n        {\n            vec2 g = mg + vec2(float(i),float(j));\n             g.xy=rotate(g.xy, iTime);\n            vec2 o = hash22( ip + g );\n            vec2 r = g + o - fp;\n\n            if(dot(mr-r,mr-r)>0.00001)\n            md = min(md, dot(0.5*(mr+r), normalize(r-mr)));\n        }\n    }\n\n    return vec3(ip+mg,md);\n}\n\nvec3 map(vec2 p)\n{\nn1Q(p.xy);\n\n    float s = 7.0;\n    return voronoi(p*s)/s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\nvec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n   n1Q(uv.xy);\n\n    uv -= vec2(0.0,-0.5);\n    float esc = 3.0;\n    uv *= esc;\n    uv += iTime * 0.5;\n    vec2 pos = uv;\n    vec3 col = vec3(0.0);\n    \n    vec2 tile = floor(uv);\n    pos = fract(uv) - 0.5;\n    \n    // Use random function to get a random rotation for each tile (0, 90, 180, 270 degrees)\n    float rotation = floor(random(tile) * 4.0) * PI / 2.0;\n    \n    // Rotate position to create the random tile orientation\n    pos = rotate(pos, rotation);\n    \n    // Generate a random number to choose between sop1, sop2, sop3, sop4\n    float choice = random(tile);\n    float dist = 0.0;\n\n    if (choice < 0.25) {\n        dist = sop1(pos + vec2(0.5, 0.5));\n      \n    } else if (choice < 0.5) {\n        dist = sop2(pos + vec2(0.5, 0.5));\n      \n    } else if (choice < 0.75) {\n        dist = sop3(pos + vec2(0.5, 0.5));\n      \n    } else {\n        dist = sop4(pos + vec2(0.5, 0.5));\n      \n    }\n    \n    \n    dist=abs(dist)-0.01;\n//col = DFS(vec3(1.0, 0.0, 1.0), col, dist);  \n   \n     //referencia color jt  //https://www.shadertoy.com/view/M3lBRl\n     vec3 color = hash32(tile);\ncol = DFS(vec3(1.0, 0.0, 1.0), col, dist);  \ncol = DFS(color, col, dist);  \n\n    float d = map(p).z;\n    vec2 id = map(p).xy;\n    vec3 color2 = hash32(id);\n    color2 *= smoothstep(0.005, 0.01, d)+col;\n\n    color2 = sqrt(color2); // approx gamma\n\n    fragColor = vec4(color2, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}