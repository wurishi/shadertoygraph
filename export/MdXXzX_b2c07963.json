{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define GAMMA_SRGB\n\n//note: normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\tn = floor(abs(n));\n\tfloat granularity = 1.0;\n\tvec2 s = floor( fract( n / (2.0 * granularity) ) * 2.0 );\n\tfloat f = (  2.0 * s.x + s.y  ) / 3.0;\n\treturn (f - 0.5) * 0.75;\n}\n\nfloat round_1( float a, float l )\n{\n\treturn floor(a*l+0.5)/l;\n}\n\n\n//CORRECT_SRGB_CONVERSION\n#if defined( GAMMA_SRGB )\n// see http://www.opengl.org/registry/specs/ARB/framebuffer_sRGB.txt\nfloat srgb2lin( float cs )\n{\n\tfloat c_lo = cs / 12.92;\n\tfloat c_hi = pow( (cs + 0.055) / 1.055, 2.4 );\n\tfloat s = step(0.04045, cs);\n\treturn mix( c_lo, c_hi, s );\n}\nfloat lin2srgb( float cl )\n{\n\tfloat c_lo = 12.92 * cl;\n\tfloat c_hi = 1.055 * pow(cl, 0.41666) - 0.055;\n\tfloat s = step( 0.0031308, cl);\n\treturn mix( c_lo, c_hi, s );\n}\n#endif //GAMMA_SRGB\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfloat val = srgb2lin(uv.y);\n\tval = pow(val, 1.5);  // adjust the curve in linear space, so we see more dark colors\n\t\n\t\n\tfloat nrnd = nrand( fragCoord.xy ); //normalised noise [0;1[\n\n\n\tfloat scale = 16.0;\n\tfloat panels = 5.0;\n\t\n\tfloat o;\n\t//display values\n\tvec4 outcol = vec4(0);\n\tif ( uv.x < 1.0/panels ) {\n\t\t// quantized signal\n\t\to = round_1( val, scale );\n\t} else if ( uv.x < 2.0 / panels ) {\n\t\t// apply dither, then quantize signal\n\t\tfloat n = val + nrnd / scale;\n\t\to = round_1( n, scale );\n\t} else if ( uv.x < 3.0 / panels ) {\n\t\t// signal\n\t\to = val;\n\t} else if ( uv.x < 4.0 / panels ) {\n\t\t// non-linear transform, apply dither, then quantize signal \n\t\tval = lin2srgb(val);\n\t\tfloat n = val + nrnd / scale;\n\t\to = round_1( n, scale );\n\t\to = srgb2lin(o);\n\t} else {\n\t\t// non-linear transform, then quantize signal \n\t\tval = lin2srgb(val);\n\t\to = round_1( val, scale );\n\t\to = srgb2lin(o);\n\t}\n\t\n\toutcol.rgb = vec3(lin2srgb(o));\n\n\t//display lines\n\tfloat pad = 1.0 - floor( abs( fract( uv.x * panels ) * 2.0 - 1.0 ) + .02 ); \n\toutcol *= vec4(pad);\n\n\tfragColor = outcol;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdXXzX","date":"1404944594","viewed":728,"name":"srgb-dither","username":"casseveritt","description":"Center panel is the signal.\nLeft of center is dithered in linear space, right of center is dithered in sRGB space.\nLeft is quantized in linear space, right is quantized in sRGB space.\n\n\nvariation of https://www.shadertoy.com/view/XsfXzf","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["banding","dithering","srgb"],"hasliked":0,"parentid":"","parentname":""}}