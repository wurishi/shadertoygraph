{"ver":"0.1","info":{"id":"dtl3Wf","date":"1672610671","viewed":135,"name":" Asymmetric Blocks Wall","username":"jt","description":"Attempt to construct a wall by extrusion of [url=https://www.shadertoy.com/view/ftcfWf]Limited Asymmetric Blocks SDF[/url].\nA bit slower than I hoped. Fixed rounded stones but inadvertently introduced a kind of boundary at the same time...","likes":14,"published":1,"flags":0,"usePreview":1,"tags":["wall","blocks","architecture","construction","building","layout","limited","irregular","asymmetric"],"hasliked":0,"parentid":"cd2XR3","parentname":"Limited Asymmetric Blocks SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dtl3Wf Asymmetric Blocks Wall by jt\n// based on https://www.shadertoy.com/view/cd2XR3 Limited Asymmetric Blocks SDF\n// Attempt to construct a wall by extrusion of https://www.shadertoy.com/view/ftcfWf Limited Asymmetric Blocks SDF\n\n// tags: wall, blocks, architecture, construction, building, layout, limited, irregular, asymmetric\n\n// MIT license, from https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2023 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(ivec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(uvec2(v) + n, 2u * n))) return 0.5; // transition to regular tiling outside\n    if(all(lessThan(uvec2(v) + m, 2u * m + 1u))) return 0.5; // transition to regular tiling outside\n    uint i = (uint(v.x) + triple32(uint(v.y)) + uint(iFrame / 60));\n    float h = hash(i);\n    return mix(0.2, 0.8, h);\n}\n\nfloat hash0(ivec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(uvec2(v) + n, 2u * n))) return 0.5; // transition to regular tiling outside\n    if(all(lessThan(uvec2(v) + m, 2u * m + 1u))) return 0.5; // transition to regular tiling outside\n    uint i = (uint(v.x) + triple32(uint(v.y)) + uint(iFrame / 60));\n    float h = hash(i*2u+0u);\n    return mix(0.2, 0.8, h);\n}\n\nfloat hash1(ivec2 v, uvec2 n, uvec2 m) // both dimension values same (faster)\n{\n    if(any(greaterThan(uvec2(v) + n, 2u * n))) return 0.5; // transition to regular tiling outside\n    if(all(lessThan(uvec2(v) + m, 2u * m + 1u))) return 0.5; // transition to regular tiling outside\n    uint i = (uint(v.x) + triple32(uint(v.y)) + uint(iFrame / 60));\n    float h = hash(i*2u+1u);\n    return mix(0.2, 0.8, h);\n}\n\nfloat box(vec2 p, vec2 b) // https://iquilezles.org/articles/distfunctions2d/ by iq\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat box2(vec2 p, vec2 p0, vec2 p1, float r) // min-max box, size reduced by r\n{\n    return box(p-(p1+p0)/2.0, (p1-p0)/2.0-r);\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nvec3 blocks(vec2 p, float r, uvec2 l, uvec2 m) // xy contains id, z contains distance\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    ivec2 tile = ivec2(floor(p)); // global coordinates of tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        float x = hash0(tile, l, m); // x-coordinate of vertical line through this tile\n        float xsw = hash0(tile+ivec2(-1,-1), l, m); // x-coordinate of vertical line through south-west tile\n        float xnw = hash0(tile+ivec2(-1,+1), l, m); // x-coordinate of vertical line through north-west tile\n        float xse = hash0(tile+ivec2(+1,-1), l, m); // x-coordinate of vertical line through south-east tile\n        float xne = hash0(tile+ivec2(+1,+1), l, m); // x-coordinate of vertical line through north-east tile\n        float yw = hash1(tile+ivec2(-1, 0), l, m); // y-coordinate of horizontal line through west tile\n        float ye = hash1(tile+ivec2(+1, 0), l, m); // y-coordinate of horizontal line through east tile\n        float ys = hash1(tile+ivec2( 0,-1), l, m); // y-coordinate of horizontal line through south tile\n        float yn = hash1(tile+ivec2( 0,+1), l, m); // y-coordinate of horizontal line through north tile\n\n        return\n            q.x < x\n            ?\n            (\n                q.y < yw\n                ?\n                vec3\n                (\n                    vec2(tile.x, tile.y),\n                    box2(q, vec2(xsw-1.0, ys-1.0), vec2(x, yw), r) // south-west\n                )\n                :\n                vec3\n                (\n                    vec2(tile.x, tile.y + 1),\n                    box2(q, vec2(xnw-1.0, yw), vec2(x, yn+1.0), r) // north-west\n                )\n            )\n            :\n            (\n                q.y < ye\n                ?\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y),\n                    box2(q, vec2(x, ys-1.0), vec2(xse+1.0, ye), r) // south-east\n                )\n                :\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y + 1),\n                    box2(q, vec2(x, ye), vec2(xne+1.0, yn+1.0), r) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        float y = hash1(tile, l, m); // x-coordinate of horizontal line through this tile\n        float ysw = hash1(tile+ivec2(-1,-1), l, m); // y-coordinate of horizontal line through south-west tile\n        float ynw = hash1(tile+ivec2(-1,+1), l, m); // y-coordinate of horizontal line through north-west tile\n        float yse = hash1(tile+ivec2(+1,-1), l, m); // y-coordinate of horizontal line through south-east tile\n        float yne = hash1(tile+ivec2(+1,+1), l, m); // y-coordinate of horizontal line through north-east tile\n        float xw = hash0(tile+ivec2(-1, 0), l, m); // x-coordinate of vertical line through west tile\n        float xe = hash0(tile+ivec2(+1, 0), l, m); // x-coordinate of vertical line through east tile\n        float xs = hash0(tile+ivec2( 0,-1), l, m); // x-coordinate of vertical line through south tile\n        float xn = hash0(tile+ivec2( 0,+1), l, m); // x-coordinate of vertical line through north tile\n\n        return\n            q.y < y\n            ?\n            (\n                q.x < xs\n                ?\n                vec3\n                (\n                    vec2(tile.x, tile.y),\n                    box2(q, vec2(xw-1.0, ysw-1.0), vec2(xs, y), r) // south-west                        \n                )\n                :\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y),\n                    box2(q, vec2(xs, yse-1.0), vec2(xe+1.0, y), r) // south-east\n                )\n            )\n            :\n            (\n                q.x < xn\n                ?\n                vec3\n                (\n                    vec2(tile.x, tile.y + 1),\n                    box2(q, vec2(xw-1.0, y), vec2(xn, ynw+1.0), r) // north-west\n                )\n                :\n                vec3\n                (\n                    vec2(tile.x + 1, tile.y + 1),\n                    box2(q, vec2(xn, y), vec2(xe+1.0, yne+1.0), r) // north-east\n                )\n            );\n    }\n}\n\nvec3 blocks_limited(vec2 p, float r, uvec2 l, uvec2 m) // xy contains id, z contains distance\n{\n    p += 0.5;\n\n    float exterior = max(box(p - 0.5, vec2(l + 1u)-r)-r,-box(p - 0.5, vec2(m)));\n    //float exterior = max(box(p - 0.5, vec2(l + 2u)-r)-r,-box(p - 0.5, vec2(m-1u))); // add one regular layer\n    if(exterior > 0.0) return vec3(0,0,exterior);\n    \n    vec3 iddist = blocks(p, r, l, m);\n    if(fract(iTime/10.0) > 0.5) iddist.z = r - iddist.z;\n    return iddist;\n}\n\nvec3 extrude_blocks(vec3 p, float r, uvec2 n, uvec2 m)\n{\n    vec3 result = blocks_limited(p.xy, r, n, m);\n\n    float thickness = 0.2;\n    //ivec2 id = ivec2(result.xy); if((id.x & 1) != (id.y & 1)) thickness /= 2.0;\n\n    float dp = abs(p.z)-thickness; // distance to plane\n    float df = result.z; // distance to 2d SDF\n    // Correct SDF, as suggested by iq - thanks!\n    vec2 w = vec2(df, dp);\n    return vec3(result.xy, min(max(w.x, w.y), 0.0) + length(max(w, 0.0))-r);\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\nfloat line( vec3 p, vec3 a, vec3 b ) // based on https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat cube(vec3 p) // jt\n{\n    p = abs(p - 0.5) + 0.5; // mirror symmetry\n    p.xy = p.x > p.y ? p.xy : p.yx; // reflect\n    p.yz = p.y > p.z ? p.yz : p.zy; // reflect\n    return line(p, vec3(1,1,0), vec3(1,1,1));\n}\n\n#define EPSILON 0.001\n#define MAX_DIST 50.0\n#define MAX_ITER 200u\n\nvec3 map(vec3 p)\n{\n    float r = 0.1; // roundness\n    uvec2 n = uvec2(5, 3);\n    uvec2 m = uvec2(3, 2);\n\n    float d = MAX_DIST;\n    d = min(d, halfspace(p));\n    vec3 e = extrude_blocks(p.xzy-vec3(0,4,0), r, n, m);\n    return d < e.z ? vec3(0,0,d) : e;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map(p + k.xyy*h).z + \n                      k.yyx*map(p + k.yyx*h).z + \n                      k.yxy*map(p + k.yxy*h).z + \n                      k.xxx*map(p + k.xxx*h).z );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < MAX_ITER; i++)\n    {\n        float h = map(ro + rd * t).z;\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return MAX_DIST;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).z;\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).z;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map(pos + h*nor).z;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvec3 colorcode(ivec2 id)\n{\n    return vec3((id.x & 1) != (id.y & 1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0, -15.0 );\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    \n    ro.z += 3.0;\n\n    float dist = trace(ro, rd, 0.0, MAX_DIST);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(cos(iTime/5.), sin(iTime/5.), 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    if(brightness > 0.0) brightness *= shadow(dst + n * 0.01,lightdir, 0.0, MAX_DIST);\n    //if(brightness > 0.0) brightness *= softshadow(dst + n * 0.01,lightdir, 0.0, MAX_DIST, 100. );\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.25), vec3(1), step(0.01, dst.z)); // quick hack to color ground differently\n    color *= mix(vec3(0.25), vec3(1), colorcode(ivec2(map(dst).xy)));\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n    //color = mix(color, vec3(0.0), step(MAX_DIST, dist));\n    color = mix(color, vec3(0.0), smoothstep(MAX_DIST-1.0, MAX_DIST, dist));\n    \n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}