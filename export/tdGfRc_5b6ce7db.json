{"ver":"0.1","info":{"id":"tdGfRc","date":"1607618438","viewed":80,"name":"Sam's Simple Cellular Automata","username":"SamGage","description":"A sort of analogue take on Conway's Game of Life.\n\nColony (red) follows simple rules, consumes vegetation (green) which grows back over time.\n\nClick to draw colony.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["automata","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TINYX (1./ iResolution.x)\n#define TINYY (1./ iResolution.y)\n#define GROUNDGROWTH 0.001\n#define EATRATE 0.01\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 colx = texture(iChannel0, uv).xyz;\n    vec3 col = colx;\n    \n    if(sign(iMouse.z)>0.)\n    {\n        if(length(uv-iMouse.xy/iResolution.xy)<0.01)\n        col.x = 1.;\n    }                                                                                                                                                                                                   \n    else\n    {\n        vec3 col00 = texture(iChannel0, uv-vec2(-TINYX,-TINYY)).xyz;\n        vec3 col01 = texture(iChannel0, uv-vec2(-TINYX,0.)).xyz;\n        vec3 col02 = texture(iChannel0, uv-vec2(-TINYX,TINYY)).xyz;\n        vec3 col10 = texture(iChannel0, uv-vec2(0.,-TINYY)).xyz;\n\n        vec3 col12 = texture(iChannel0, uv-vec2(0.,TINYY)).xyz;\n        vec3 col20 = texture(iChannel0, uv-vec2(TINYX,-TINYY)).xyz;\n        vec3 col21 = texture(iChannel0, uv-vec2(TINYX,0.)).xyz;\n        vec3 col22 = texture(iChannel0, uv-vec2(TINYX,TINYY)).xyz;\n\n\n        vec3 tot = (col00+col01+col02+col10+col12+col20+col21+col22);\n\n        if(col.y <= 0.05 || tot.x > 7.)\n        {\n           col.x = max(col.x - .1, 0.);\n           if(col.x <= 0.25) col.x = 0.;\n        }\n        if(tot.x == 3. ||(tot.x == 4. && tot.y+col.y > 5.))\n        {\n            col.x = min(col.x + .5,1.);\n        } \n        col.y+= GROUNDGROWTH;\n        col.y = min(max(col.y - ((col.x*0.5+(tot.x/16.))*EATRATE),0.),.8);//texture(iChannel1, uv).x*1.25-.1);\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}