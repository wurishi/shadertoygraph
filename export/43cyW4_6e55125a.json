{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Music DNA visualizer by orblivius\n\n// License: Freeware\n// Source: https://shadertoy.com/view/tlsXWf\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\nconst mat2 brot = ROT(2.399);\n// License: Unknown, author: Dave Hoskins, found: Forgot where\nvec3 dblur(vec2 q,float rad) {\n  vec3 acc=vec3(0);\n  const float m = 0.0025;\n  vec2 pixel=vec2(m*RESOLUTION.y/RESOLUTION.x,m);\n  vec2 angle=vec2(0,rad);\n  rad=1.;\n  const int iter = 30;\n  for (int j=0; j<iter; ++j) {  \n    rad += 1./rad;\n    angle*=brot;\n    vec4 col=texture(iChannel1,q+pixel*(rad-1.)*angle);\n    acc+=clamp(col.xyz, 0.0, 10.0);\n  }\n  return acc*(1.0/float(iter));\n}\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0+2.0*q;\n  vec2 p2 = 0.9*p;\n  vec2 q2 = 0.5+0.5*p2;\n  const vec2 off = 0.0125*vec2(0.0, -1.0);\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  float pp = smoothstep(0.0, 1.0, sin(0.25*TAU*TIME));\n  float bf = mix(0.66, 0.75, pp)*smoothstep(mix(0.65, 0.85, pp), 0.0, dot(p, p));\n  vec3 bcol = bf > 0.05 ? dblur(q2, mix(0.5, 1.0, pp)) : vec3(0.0);\n\n  vec3 col = vec3(0.0);\n  col = texture(iChannel0, q).xyz;\n  col += bcol*bf;\n  fragColor = vec4(aces_approx(col), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Music DNA visualizer by orblivius\n\n// License: Freeware\n// Source: https://shadertoy.com/view/tlsXWf\n\n#define NRES 100\n#define NUM 10\n#define K 0.1\n\nvec3 noise(vec2 p, vec3 bcol)\n{\n    float snd = texture(iChannel0, vec2(p.x,0.5)).r;\n    float t = iTime*0.2;\n    vec2 off1 = vec2( 0.3, 0.4)*t;\n    vec2 off2 = vec2( 0.2, -0.3)*t;\n    vec2 off3 = vec2( 0.1, 0.2)*t;\n    vec2 off4 = vec2( -0.1, 0.1)*t;\n\n    float n1 = texture(iChannel0, p+off1).r;\n    float n2 = texture(iChannel0, p+off2).r*0.75;\n    float n3 = texture(iChannel0, p+off3).r*0.5;\n    float n4 = texture(iChannel0, p+off4).r*0.25;\n\n    float n = smoothstep( 0.15, 0.5, (n1+n2+n3+n4)/5.0);\n    return n * bcol;\n}\n\n#define time iTime\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\nfloat tri(in float x){return clamp(abs(fract(x)-.5),0.01,0.49);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x)+tri(p.y),tri(p.y+tri(p.x)));}\n\nfloat triNoise2d(in vec2 p, float spd)\n{\n    float z=1.8;\n    float z2=2.5;\n\tfloat rz = 0.0;\n    p *= mm2(p.x*0.06);\n    p *= mm2(p.y*0.06);\n   \n    vec2 bp = p;\n\tfor (float i=0.; i<6.; i++ )\n\t{\n        vec2 dg = tri2(bp*1.85)*0.75;\n        dg *= mm2(time*spd);\n        p -= dg/z2;\n\n        bp *= 1.3;\n        z2 *= 0.45;\n        z *= 0.42;\n\t\tp *= 1.21 + (rz-1.0)*.02;\n        \n        rz += tri(p.x+tri(p.y))*z;\n        p*= -m2;\n\t}\n    return clamp(1./pow(rz*29., 1.3),0.,.55);\n}\n\nfloat hash21(in vec2 n)\n{ \nreturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); \n}\n\n\nvec4 aurora(vec3 ro, vec3 rd)\n{\n    vec4 col = vec4(0);\n    vec4 avgCol = vec4(0);\n    \n    for(float i=0.;i<10. /*height*/ ;i+=0.3)\n    {\n        float of = 0.006*hash21(gl_FragCoord.xy)*smoothstep(0.,15., i);\n        float pt = ((0.8+pow(i,1.4)*.012)-ro.y)/(rd.y*2.0+0.4);\n        pt -= of;\n    \tvec3 bpos = ro + pt*rd;\n        vec2 p = bpos.zx;\n        float rzt = triNoise2d(p, 0.46);\n        vec4 col2 = vec4(0,0,0, rzt);\n        col2.rgb = 0.7*(1.5*sin(1.-vec3(2.15,-.5, 1.2)+i*0.183)*0.5+0.5)*rzt;\n        avgCol =  mix(avgCol, col2, .5);\n        col += avgCol*exp2(-i*0.045 - 2.5)*smoothstep(0.,5., i);\n        \n    }\n    \n    col *= (clamp(rd.y*15.+.4,0.,1.));\n    \n    \n    //return clamp(pow(col,vec4(1.3))*1.5,0.,1.);\n    //return clamp(pow(col,vec4(1.7))*2.,0.,1.);\n    //return clamp(pow(col,vec4(1.5))*2.5,0.,1.);\n    //return clamp(pow(col,vec4(1.8))*1.5,0.,1.);\n    \n    //return smoothstep(0.,1.1,pow(col,vec4(1.))*1.5);\n    return col*2.8;\n    //return pow(col,vec4(1.))*2.;\n}\n\n\n//-------------------Background and Stars--------------------\n\nvec3 nmzHash33(vec3 q)\n{\n    uvec3 p = uvec3(ivec3(q));\n    p = p*uvec3(374761393U, 1103515245U, 668265263U) + p.zxy + p.yzx;\n    p = p.yzx*(p.zxy^(p >> 3U));\n    return vec3(p^(p >> 16U))*(1.0/vec3(0xffffffffU));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*1.;\n    \n\tfor (float i=0.;i<2.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = nmzHash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.1+0.9);\n        p *= 1.3;\n    }\n    return c*c*.8;\n}\n\nvec3 bg(in vec3 rd)\n{\n    float sd = dot(normalize(vec3(-0.5, -0.6, 0.9)), rd)*0.5+0.5;\n    sd = pow(sd, 5.);\n    vec3 col = mix(vec3(0.05,0.1,0.2), vec3(0.1,0.05,0.2), sd);\n    return col*.63;\n}\n//-----------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  vec2 ouv = uv;\n  uv *=2.;\n  uv -=1.;\n  vec3 col2 = vec3(0);\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n \n  vec3 col = col2;\n  vec3 tex =  texture(iChannel1, uv*.5).rgb; \n  //tex = vec3(max(max(tex.r,tex.g),tex.b));\n  vec3 bcol = tex * mix(tex, mix( vec3(1., 0.6, 0.), vec3(0., 0.6, 1.), abs(sin(cos(iTime)+uv.y* uv.x + iTime))),.6);\n  \n  float t = iTime;\n\n\n  float f = 0.08;\n  float n = 0.0;\n  float arr[NUM];\n  int ind = 0;\n  float sacc = 0.0;\n  int ii = 0;\n  int tot = NRES/NUM;\n  float finc = (1.-f)/float(NRES);\n \n  \n  for (int i=1; i<NRES; i++) \n  {\n     float snd = texture(iChannel2, vec2(f,0.0)).r;\n     if (ii >= tot) {\n         arr[ind++] = sacc/float(tot)*2.;\n         sacc = 0.0;\n         ii = 0;\n     }\n  \n     float bell = exp(-.2*float((ii-tot/2)*(ii-tot/2)));\n     sacc += snd * bell;\n     ii ++;\n     f += finc;\n  }\n   f = 0.08;\n    float snd1 = texture(iChannel2, vec2(0.08,0.)).r; // bass\n\n   float n1 = arr[0] * sin( ((uv.x+t)*pow(10.,f) +pow(1.6,1.)*t));\n   n1 *= 1./8.;\n   n1 = 8. * ((uv.y > n1) ? length(uv.y-n1/f) : length(uv.y-n1/f));\n   \n  col = mix(col, col2, .5);\n  col += .5*bcol/n1 + vec3(.5)/n1 * noise((uv)*0.5,bcol);\n    \n \n  float k = 0.0;\n  float nacc = 0.0;\n  vec3 icol = 1.-bcol;\n  finc = (1.-f)/float(NUM);\n  for (int i=2; i<NUM; i++) \n  {\n    float n = arr[i] * sin( ((uv.x+t)*pow(10.,f) +pow(1.6,float(i))*t));\n   n *= float(i)/8.;\n    nacc += n;\n    n = 8. * ((uv.y > n) ? length(uv.y-n/f) : length(uv.y-n/f));\n    col += icol*0.05/float(i)/n + vec3(.5)/n * noise((uv)*0.05,mix(icol,bcol,.7));\n    icol = 1.-icol;\n    f += finc;\n  }\n  \n  //---------\n\n  fragColor = vec4(col, 1.);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"43cyW4","date":"1735039120","viewed":203,"name":"Music DNA visualizer","username":"orblivius","description":"FFTWave visualizer v1.0 breaks down FFT into summation of waves","likes":5,"published":3,"flags":32,"usePreview":1,"tags":["fft","wave","visualizer","orblivius"],"hasliked":0,"parentid":"","parentname":""}}