{"ver":"0.1","info":{"id":"MsV3Wt","date":"1457184326","viewed":1460,"name":"Bit for bit","username":"anastadunbar","description":"Original animation by Dave Whyte http://bit.ly/1p6Od43. Ulam spiral function from http://glslsandbox.com/e#30868.0. Was really fast to copy.","likes":73,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","loop","trippy","hypnotizing","squares","gif"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define clamps(x) clamp(x,0.,1.)\nvec2 rotate(float angle,vec2 position)\n{\n    mat2 matrix = mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n    return position*matrix;\n}\nfloat chess_dist(vec2 uv) {\n    return max(abs(uv.x),abs(uv.y));\n}\nfloat lthan(float a, float b) {\n    //return step(a,b);\n    return clamps(((b-a)*200.)+.5); //Smoother\n}\nfloat ulam_spiral(vec2 p)\n{\n\tfloat x \t= abs(p.x);\n\tfloat y\t\t= abs(p.y);\n\tbool q\t\t= x > y;\n\t\n\tx\t\t= q ? x : y;\n\ty\t\t= q ? p.x + p.y : p.x - p.y;\n\ty \t\t= abs(y) + 4. * x * x + 1.;\n\tx \t\t*= 2.;\n\t\n\treturn q ? (p.x > 0. ? y - x - x : y) : (p.y > 0. ? y - x : y + x);\t\n}\nfloat drawing(vec2 uv, float time) {\n    time = fract(time*.6);\n    uv = rotate((-time*(PI/2.))+(PI/2.),uv);\n    uv /= pow(3.,fract(time)); //Zoom in to middle square\n    uv *= 5.; //Zoom out\n    float a = 0.;\n    float s = fract(time); //Seperation time\n    for (float i = 0.; i < 9.; i++) { //3x3\n        vec2 p = vec2(mod(i,3.),floor(i/3.))-1.;\n        p += p*pow(max((s*8.)-(9.-ulam_spiral(-p)),0.),2.); //Move squares\n    \ta += lthan(chess_dist(uv-p),.5); //Draw square\n    }\n    return clamps(a);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy)-.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float time = iTime;\n    \n\tfloat a = 0.;\n    //Motion-blur\n    #define SAMPLES 10.\n    for (float i = 0.; i < SAMPLES; i++) {\n        a += drawing(uv,time-(i*.002));\n    }\n    a /= SAMPLES;\n    \n\tfragColor = vec4(mix(vec3(0.9),vec3(0.1),a)-(length(uv)*.1),1.0);\n}","name":"Image","description":"","type":"image"}]}