{"ver":"0.1","info":{"id":"mdfXRj","date":"1669192619","viewed":69,"name":"StarScaleUp","username":"shinraigo","description":"to ensure star's appearance while scaling up.\nPush space key to switch between normal mode and keep resolution mode","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//control: \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 result = texture( iChannel0, uv );\n    \n    fragColor = vec4(sqrt(result.xyz), 1.0f); //linear->srgb\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//create star's texture\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fract(fragCoord.x / 256.0f), fract(fragCoord.y / 256.0f));\n\n    vec4 noise = texelFetch(iChannel0, \n    ivec2(uv.x * 256.0, uv.y * 256.0), \n    0);    \n    noise = 1.0 - clamp(noise, 0.0, 0.2) * 5.0f;\n    \n    //create star texture from noise\n    float flag = noise.x * noise.y * noise.z;\n    noise *= flag;\n    \n    //noise *= 2.0f; //boost value to demonstrate\n    fragColor = noise;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nconst int KEY_SPACE  = 32;\nconst float MaxAngularRadius = 20.0f;\n\nfloat remap(float v, float min, float max)\n{\n    return v * (max - min) + min;\n}\n\nbool IsSwitchMode()\n{\n    return texelFetch(iChannel1, ivec2(KEY_SPACE, 0), 0).x > 0.0f;\n}\n\nfloat pow2(float v)\n{\n    return v * v;\n}\n\nfloat saturate(float v)\n{\n    return clamp(v, 0.0f, 1.0f);\n}\n\n// culling texels which doesn't suppose to be star\n// use alpha channel as star's angular radius, or just set the radius to 1\nvec4 GetStarAsLut(vec2 uv, float fovScale)\n{\n    vec2 coordi = vec2(uv * iResolution.xy);\n    vec2 floorCoordi = floor(coordi) + 0.5;\n\n    // calculate distance to the texture's texel center, and only draw the supposed size\n    float distance2TexelCenterSq = pow2(coordi.x - floorCoordi.x) + pow2(coordi.y - floorCoordi.y);\n    float starRadiusSq = 0.5f * 0.5f * fovScale * fovScale;\n    vec4 starColor = texelFetch( iChannel0, ivec2(coordi), 0 );\n    float starAngularRadius = max(starColor.a * MaxAngularRadius, 1.0f);\n\n    starColor = saturate(distance2TexelCenterSq) < starRadiusSq * starAngularRadius ? starColor : vec4(0.0f);\n\n    //keep energy stable to create glare, the extra size of star should be bloom result instead of bilateral sample result.\n    starColor /= fovScale * fovScale;\n\n    return starColor;\n}\n\nvec4 GetStarNormally(vec2 uv)\n{\n    return texture( iChannel0, uv );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int mode = 0;\n    \n    mode = IsSwitchMode() ? 1 : 0;\n        \n    //simulate fov change / resolution change\n    float zoom = remap((sin(iTime * 0.5f) + 1.0f) * 0.5f, 0.25, 1.0);\n\n    vec2 uv = fragCoord/iResolution.xy * zoom;\n    \n    vec4 result = vec4(0.0f);\n    \n    switch(mode)\n    {\n    case 1:\n        result = GetStarAsLut(uv, zoom);\n        break;\n    case 0:\n    default:\n        result = GetStarNormally(uv);\n        break;\n    };\n    \n    fragColor = result;\n}","name":"Buffer B","description":"","type":"buffer"}]}