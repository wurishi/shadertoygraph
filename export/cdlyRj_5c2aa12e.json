{"ver":"0.1","info":{"id":"cdlyRj","date":"1687036893","viewed":118,"name":"fermat phyllotaxis","username":"MonterMan","description":"use fermat spiral to model phyllotaxis geometry\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fermat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define GOLDEN_ANGLE 2.39996734783236271464\n\n#define PETAL_COUNT 32\n// if shader is too slow, comment this out to get simple lighting\n#define ENABLE_FULL_LIGHTING\n\n#define MAX_STEP_COUNT 256\n#define SHADOW_MAX_STEP_COUNT 100\n#define T_MIN 0.001\n#define SHADOW_BIAS 0.1\n\nfloat sdSphere(vec3 p, float R)\n{\n    return length(p) - R;\n}\n\nfloat sdTemp(vec3 p)\n{\n    p.x = abs(p.x)+0.5;\n    return sdSphere(p, 1.0);\n}\n\nfloat sdPetal(vec3 p)\n{\n    p.z *= 2.0;\n    return 0.5*max(sdTemp(p), -sdTemp(p+vec3(0,0,0.2)));\n}\n\nmat2 rotate2d(float theta)\n{\n    return mat2(\n        cos(theta), sin(theta),\n        -sin(theta), cos(theta)\n    );\n}\n\nfloat map(vec3 p)\n{ \n    float ground = p.y;\n    \n    float dist = 10e31;\n    \n    // fermat spiral (loop-version so it's very slow)\n    // NOTE: I have a attempted an domain-repetition-version\n    //       in polar coordinate: https://www.shadertoy.com/view/ddXyz2\n    //       however it failed because I don't know how to search closest neighbors efficently\n    //       in a fermat spiral ... if there's a way, this could be so much faster!\n    float N = float(PETAL_COUNT);\n    for (float n = 0.0; n < N; n += 1.0)\n    {\n        float theta = n * GOLDEN_ANGLE;\n        float phi = asin(sqrt(n/N));\n        vec3 p_ = p;\n        p_.xz *= rotate2d(theta);\n        p_.zy *= rotate2d(-phi);\n        \n        // push petal into the ground more when its fermat sample is closer to the origin\n        float scale = pow(n/N, 0.5);\n        dist = min(dist, sdPetal(p_-vec3(0,scale,0)));\n        \n        if (dist > 1.5) return min(dist, ground);\n    }\n    \n    dist = min(dist, ground);\n    return dist;\n}\n\nvec3 calc_normal(vec3 p)\n{\n    vec2 e = vec2(0, 0.0001);\n    return normalize(vec3(map(p+e.yxx), map(p+e.xyx), map(p+e.xxy)) - map(p));\n}\n\nfloat shadow(vec3 ro, vec3 l)\n{\n    const float SHADOW_STRENGTH = 8.0;\n    float t = T_MIN;\n    float k = 1.0;\n    for (int i = 0; i < SHADOW_MAX_STEP_COUNT; ++i)\n    {\n        vec3 p = ro + t * l;\n        float dist = map(p);\n        k = min(k, SHADOW_STRENGTH*dist/t);\n        if (dist < T_MIN)\n        {\n            return 0.0;\n        }\n        t += dist;\n    }\n    return k;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float cam_theta = iTime*0.25;\n    \n    vec3 ro = 2.0*vec3(cos(cam_theta), 1.5, sin(cam_theta));\n    vec3 at = vec3(0, 0.5, 0);\n    vec3 camera_z = normalize(at - ro);\n    vec3 camera_x = normalize(cross(vec3(0,1,0), camera_z));\n    vec3 camera_y = cross(camera_z, camera_x);\n    vec3 rd = normalize(uv.x * camera_x + uv.y * camera_y + 1.3 * camera_z);\n    \n    vec3 ambient = 2.0*vec3(0.341,0.553,0.780);\n    \n    vec3 l = normalize(vec3(-0.1, 0.5, -0.5));\n    vec3 col = ambient;\n    float t = 0.0;\n    for (int i = 0; i < MAX_STEP_COUNT; ++i)\n    {\n        vec3 p = ro + t * rd;\n        float dist = map(p);\n        if (dist < T_MIN)\n        {\n            float fake_ao = max(0.0, 1.0 - float(i) / 75.0);\n            vec3 n = calc_normal(p);\n            vec3 albedo = vec3(0.9);\n#ifdef ENABLE_FULL_LIGHTING\n            float diffuse = shadow(p+SHADOW_BIAS*n, l) * max(0.0, dot(n, l));\n            col = albedo * (diffuse + 0.1*fake_ao*ambient);\n#else\n            col = albedo * (0.1*fake_ao*ambient);\n#endif\n            break;\n        }\n        t += dist;\n    }\n\n    col = col/(0.2+col);\n    col = sqrt(col);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}