{"ver":"0.1","info":{"id":"sslGWn","date":"1629960163","viewed":77,"name":"Simple Light Wrap","username":"phuidn","description":"A simple light wrap implementation","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["compositing","lightwrap","lightwrap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 bg_col = texture(iChannel0, uv);\n    vec4 fg_col = texture(iChannel1, uv);\n    vec4 lw_col = texture(iChannel2, uv);\n    \n    float amount = 0.5 * (1.0 + cos(iTime * 0.5));\n    \n    fragColor = mix(bg_col, fg_col, fg_col.a);\n    fragColor = mix(fragColor, 1.0 - (1.0 - fragColor) * (1.0 - lw_col), lw_col.a * amount);\n    fragColor = sqrt(fragColor);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Background image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float dist = abs(mod(uv.x + iTime*0.05, 0.2) - 0.1) - 0.05;\n    float amount =  smoothstep(-0.0025, 0.0025, dist);\n    vec3 col = vec3(0.8, 0.2, 0.3) * amount + vec3(0.2, 0.55, 0.1) * (1.0 - amount);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Foreground Image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.x;\n    \n    float amount = smoothstep(-0.0025, 0.0025, 0.2 - length(uv));\n    fragColor = vec4(0.25, 0.25, 0.25, amount);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Lightwrap\n\nconst int samples = 35,\n          LOD = 1,         // gaussian done on MIPmap at scale LOD\n          sLOD = 1 << LOD; // tile size = 2^LOD\nconst float sigma = float(samples) * .25;\n\n\nvec4 punchColor (vec2 uv, int LOD)\n{\n    vec4 bg_col = textureLod(iChannel0, uv, float(LOD));\n    vec4 fg_col = textureLod(iChannel1, uv, float(LOD));\n    \n    return mix(bg_col, vec4(0.0, 0.0, 0.0, 1.0), fg_col.a);\n}\n\nfloat gaussian(vec2 i) {\n    return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );\n}\n\nvec4 blur(vec2 U, vec2 scale) {\n    vec4 O = vec4(0);  \n    int s = samples/sLOD;\n    \n    for ( int i = 0; i < s*s; i++ ) {\n        vec2 d = vec2(i%s, i/s)*float(sLOD) - float(samples)/2.;\n        O += gaussian(d) * punchColor( U + scale * d , LOD );\n    }\n    \n    return O / O.a;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = blur(uv, vec2(0.0025));\n    fragColor.a = texture(iChannel1, uv).a;\n    \n}","name":"Buffer C","description":"","type":"buffer"}]}