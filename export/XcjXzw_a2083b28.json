{"ver":"0.1","info":{"id":"XcjXzw","date":"1706154073","viewed":46,"name":"Rotate Compass","username":"nausicaa","description":"for UE","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n#define PI 3.14159265\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdRhombus( vec3 p, float la, float lb, float h, float ra ,mat3 t)\n{\n    p = t * p;\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n    vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    float primitive = min(max(q.x,q.y),0.0) + length(max(q,0.0));\n    return primitive;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nvec4 opElongate(in vec3 p, in vec3 h) {\n    vec3 q = abs(p) - h;\n    return vec4(max(q, 0.0), min(max(q.x, max(q.y, q.z)), 0.0));\n}\n\nvec2 opU(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nmat3 rotate(float radian)\n{\n    radian = radian * PI;\n    return mat3(cos(radian),0,sin(radian),0,1,0,-sin(radian),0,cos(radian));\n}\nvec2 map(in vec3 p) {\n    vec2 d = vec2(sdRoundedCylinder(p - vec3(0., 0., 0.),0.6,0.01,0.005), 1.);\n    {\n        float t = sdTorus(p - vec3(0., 0.03, 0.), vec2(1.2, 0.1));\n        d = opU(d, vec2(t, 2.));\n    }\n    {\n        float t = sdRhombus(p - vec3(0 , 0.1 , 0), 0.8 , 0.13 , 0.02 , 0.02 , rotate(iTime));\n        d = opU(d, vec2(t, 3.));\n    }\n    {\n        float t = sdRoundedCylinder(p - vec3(0., 0.08, 0.),.04,0.005,0.05);\n        d = opU(d, vec2(t, 2.));\n    }\n    {\n        float t = sdRoundedCylinder(p - vec3(0., -0.03, 0.),0.6,0.01,0.005);\n        d = opU(d, vec2(t, 2.));\n    }\n    {\n        float t = sdCapsule(p,vec3(-.85,0.05,-.85),vec3(-.92,0.05,-.92),0.065);\n        d = opU(d, vec2(t, 2.));\n    }\n    return d;\n}\n\nvec2 rayMarch(in vec3 ro, in vec3 rd) {\n    float t = 0.1;\n    float tmax = 40.;\n    vec2 res = vec2(-1.);\n    for(int i = 0; i < RAYMARCH_TIME && t < tmax; i++) {\n        vec3 p = ro + t * rd;\n        vec2 d = map(p);\n        if(d.x < PRECISION) {\n            res = vec2(t, d.y);\n            break;\n        }\n        t += d.x;\n    }\n    return res;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h).x +\n        k.yyx * map(p + k.yyx * h).x +\n        k.yxy * map(p + k.yxy * h).x +\n        k.xxx * map(p + k.xxx * h).x);\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    float tmin = .1;\n    float tmax = 10.;\n    for(float t = tmin; t < tmax;) {\n        float h = map(ro + rd * t).x;\n        if(h < 0.001)\n            return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 render(vec2 uv) {\n    vec3 ro = vec3(2. * cos(0.), 1., 2. * sin(0.));\n    if (iMouse.z > 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        ro = vec3(2. * cos(theta), 2. * (-3. * iMouse.y / iResolution.y + 1.5), 2. * sin(theta));\n    }\n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n\n    float fl = 1.;\n    vec3 rd = normalize(cam * vec3(uv, fl));\n\n    vec3 bg = vec3(.7, .7, .9);\n    vec3 color = bg - rd.y * vec3(.1);\n\n    vec2 t = rayMarch(ro, rd);\n    if(t.y > 0.) {\n        vec3 p = ro + t.x * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(5., 5., 0.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        p += PRECISION * n;\n        dif *= softShadow(p, normalize(light - p), 10.);\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n        if (t.y > 0.9 && t.y < 1.1) {\n           color = amb * vec3(.1) + dif * vec3(0.0706, 0.051, 0.1451);\n        // vec3 colorXY = texture(iChannel0, p.xy * .5 + .5).rgb;\n        // vec3 colorXZ = texture(iChannel0, p.xz * .5 + .5).rgb;\n        // vec3 colorYZ = texture(iChannel0, p.yz * .5 + .5).rgb;\n        // n = abs(n);\n        // n = pow(n, vec3(10.));\n        // n /= n.x + n.y + n.z;\n        // color = colorXY * n.z + colorXZ * n.y + colorYZ * n.x;\n        } else if (t.y > 1.9 && t.y < 2.1) {\n           color = amb * vec3(0.8588, 0.6353, 0.6353) + dif * vec3(0.0706, 0.051, 0.1451);\n        // vec3 colorXY = texture(iChannel1, p.xy * .5 + .5).rgb;\n        // vec3 colorXZ = texture(iChannel1, p.xz * .5 + .5).rgb;\n        // vec3 colorYZ = texture(iChannel1, p.yz * .5 + .5).rgb;\n        // n = abs(n);\n        // n = pow(n, vec3(10.));\n        // n /= n.x + n.y + n.z;\n        // color = colorXY * n.z + colorXZ * n.y + colorYZ * n.x;\n        } else if (t.y > 2.9 && t.y < 3.1) {\n          color = amb * vec3(.2) + dif * vec3(1.);\n        // vec3 colorXY = texture(iChannel2, p.xy * .5 + .5).rgb;\n        // vec3 colorXZ = texture(iChannel2, p.xz * .5 + .5).rgb;\n        // vec3 colorYZ = texture(iChannel2, p.yz * .5 + .5).rgb;\n        // n = abs(n);\n        // n = pow(n, vec3(10.));\n        // n /= n.x + n.y + n.z;\n        // color = colorXY * n.z + colorXZ * n.y + colorYZ * n.x;\n        // color = n;\n        }\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}