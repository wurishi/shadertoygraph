{"ver":"0.1","info":{"id":"dtVBWD","date":"1702095255","viewed":21,"name":"OKLAB mess around","username":"AwareStubMan","description":"messing around","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lab","oklab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 horizontal_bounds = vec2(0.5*(iResolution.x-iResolution.y)); // x = lower bound, y = upper bound\n    horizontal_bounds.y = iResolution.x - horizontal_bounds.x;\n    if (fragCoord.x == clamp(fragCoord.x, horizontal_bounds.x, horizontal_bounds.y))\n    {\n        vec2 mouse_uv = vec2(0.0);\n        if (iMouse.x == clamp(iMouse.x, horizontal_bounds.x, horizontal_bounds.y))\n            mouse_uv = (iMouse.xy - vec2(horizontal_bounds.x, 0.0)) / iResolution.y;\n    \n        // Normalized pixel coordinates (from 0 to 1)\n        vec2 uv = (fragCoord - vec2(horizontal_bounds.x, 0.0)) / iResolution.y;\n\n        vec2 grid_uv = floor(uv * 50.0);\n        vec3 col = mix(vec3(0.8), vec3(1), float(int(grid_uv.x + grid_uv.y)%2 == 0));\n\n        //if (all(equal(uv, clamp(uv, 0.1, 0.9))))\n        {\n            //uv = (uv-0.1)/(0.9-0.1);\n            \n            // https://bottosson.github.io/posts/colorpicker/\n            float l_r = uv.y;\n            float c = uv.x;\n            float h = mouse_uv.x * TAU;\n            float l;\n            {\n                const float k_1 = 0.206;\n                const float k_2 = 0.03;\n                const float k_3 = (1.0 + k_1) / (1.0 + k_2);\n                \n                l = (l_r*(l_r + k_1)) / (k_3*(l_r + k_2));\n            }\n\n            vec3 lch = vec3(l, c * l/l_r, h);\n            vec3 lab = vec3(lch.r, lch.y*cos(lch.z), lch.y*sin(lch.z));\n\n            vec3 rgb = OKLAB_to_lin_sRGB(lab);\n            if (all(equal(rgb, clamp(rgb, 0.0, 1.0))))\n                col = lin_sRGB_to_sRGB(rgb);\n        }\n\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    }\n    else\n        fragColor = vec4(0.5,0.5,0.5,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265\n#define HALF_PI 1.57079633\n#define TAU 6.28318531\n\nfloat lin_sRGB_to_sRGB(float v)\n{\n    if (v >= 0.0031308)\n        return (1.055) * pow(v, 1.0/2.4) - 0.055;\n    else\n        return 12.92 * v;\n}\nvec3 lin_sRGB_to_sRGB(vec3 v)\n{\n    return vec3(\n        lin_sRGB_to_sRGB(v.r),\n        lin_sRGB_to_sRGB(v.g),\n        lin_sRGB_to_sRGB(v.b)\n    );\n}\nfloat sRGB_to_lin_sRGB(float v)\n{\n    if (v >= 0.04045)\n        return pow((v + 0.055)/(1.0 + 0.055), 2.4);\n    else \n        return v / 12.92;\n}\nvec3 sRGB_to_lin_sRGB(vec3 v)\n{\n    return vec3(\n        sRGB_to_lin_sRGB(v.r),\n        sRGB_to_lin_sRGB(v.g),\n        sRGB_to_lin_sRGB(v.b)\n    );\n}\n\n// https://bottosson.github.io/posts/oklab/\nvec3 lin_sRGB_to_OKLAB(vec3 c) \n{\n    float l = 0.4122214708 * c.r + 0.5363325363 * c.g + 0.0514459929 * c.b;\n\tfloat m = 0.2119034982 * c.r + 0.6806995451 * c.g + 0.1073969566 * c.b;\n\tfloat s = 0.0883024619 * c.r + 0.2817188376 * c.g + 0.6299787005 * c.b;\n\n    float l_ = pow(l, 1.0/3.0);\n    float m_ = pow(m, 1.0/3.0);\n    float s_ = pow(s, 1.0/3.0);\n\n    return vec3(\n        0.2104542553*l_ + 0.7936177850*m_ - 0.0040720468*s_,\n        1.9779984951*l_ - 2.4285922050*m_ + 0.4505937099*s_,\n        0.0259040371*l_ + 0.7827717662*m_ - 0.8086757660*s_\n    );\n}\nvec3 OKLAB_to_lin_sRGB(vec3 c) \n{\n    float l_ = c.r + 0.3963377774 * c.g + 0.2158037573 * c.b;\n    float m_ = c.r - 0.1055613458 * c.g - 0.0638541728 * c.b;\n    float s_ = c.r - 0.0894841775 * c.g - 1.2914855480 * c.b;\n\n    float l = l_*l_*l_;\n    float m = m_*m_*m_;\n    float s = s_*s_*s_;\n\n    return vec3(\n\t\t+4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s,\n\t\t-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s,\n\t\t-0.0041960863 * l - 0.7034186147 * m + 1.7076147010 * s\n    );\n}","name":"Common","description":"","type":"common"}]}