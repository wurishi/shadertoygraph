{"ver":"0.1","info":{"id":"Xdy3WR","date":"1453888938","viewed":334,"name":"dank water","username":"arg0","description":"Some dank water shader\n- The brownish color is the bottom of the pond / lake w/e","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float normSin(float x)\n{\n    return (sin(x) + 1.0) * 0.5;\n}\n\nvec2 normSin(vec2 vec)\n{\n    return vec2(normSin(vec.x), normSin(vec.y));\n}\n\n\nfloat range(float x, float min, float max)\n{\n    return min + (max-min)*x;\n}\n\nvec4 sampleWaterMask(vec2 uv)\n{\n    float max = 0.4;\n    return texture(iChannel0, mod(uv * max, max));\n}\n\nfloat makeWater(vec2 uv)\n{\n    float ambient = 0.8;\n    \n    vec4 mask = sampleWaterMask( uv + mod(iTime*0.2, 1.0) );\n    \n    float xComp = normSin(iTime*2.0 + (uv.y+uv.x) * 20.0 * mask.r);\n    float yComp = range(normSin(iTime*4.0 + uv.x * 20.0 * mask.r), 0.2, 1.0);\n    \n    float comp = xComp + yComp;\n    float water = comp * mask.r;\n    \n    water = ambient + (1.0-ambient) * water;\n    \n    water *= 1.0;\n    \n    return water;\n}\n\nvec4 blend(vec4 bg, vec4 fg)\n{\n    return vec4(fg.rgb*fg.a + bg.rgb*(1.0-fg.a), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n//    vec4 baseColor = vec4(0.5, 0.3, 0, 1);\n  \tvec4 baseColor = texture(iChannel1, uv);\n    \n    vec3 cls = vec3(0.05, 0.1, 0.3);\n    vec4 waterColor = vec4(cls*1.0, makeWater(uv));\n    \n    vec4 outputColor = baseColor;\n  \n//    outputColor -= baseColor*waterColor;\n    \n    outputColor = blend(outputColor, waterColor);\n    \n\tfragColor = outputColor;\n\n}","name":"","description":"","type":"image"}]}