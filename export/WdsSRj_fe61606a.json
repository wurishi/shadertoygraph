{"ver":"0.1","info":{"id":"WdsSRj","date":"1551689173","viewed":153,"name":"Squiggly blob","username":"patrickgh3","description":"Effect for a \"mini universe\" in my game. The black part will be a mask for the contents of that universe. My first shader on this site. The code is pretty messy but this is just a rough draft.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Scale it horizontally inwards a little\n    uv.x = ((uv.x - 0.5) * 1.25) + 0.5;\n    \n    vec2 center = vec2(0.5,0.5);\n   \tfloat distFromCenter = distance(uv,center);\n    float angle = acos(dot(normalize(uv-center),vec2(1.0,0)));\n    if (uv.y < 0.5) angle *= -1.0;\n    \n    // Square shape\n    float radiusLerpT = cos(angle*4.0 + 3.14)*0.5+0.5;\n    float radius = mix(0.45,0.5,radiusLerpT);\n    \n    // Small bumps\n    float angle2 = angle + (cos(angle*4.0)*0.5+0.5)*0.1;\n    float radiusLerpT2 = cos(angle2*12.0 + iTime*1.6)*0.5+0.5;\n    radius += mix(0.0, 0.04, radiusLerpT2);\n    \n    // Big underlying bumps\n    float radiusLerpT3 = cos(angle*5.0 - iTime*1.1)*0.5+0.5;\n    radius -= mix(0.0, 0.05, radiusLerpT3);\n    \n    bool withinRadius = distFromCenter < radius;\n    fragColor = vec4(0.5 * (1.0-float(withinRadius)),\n                     0.5 * (1.0-float(withinRadius)),\n                     0.5 * (1.0-float(withinRadius)),\n                     1.0);\n}","name":"Image","description":"","type":"image"}]}