{"ver":"0.1","info":{"id":"DdS3DV","date":"1668115114","viewed":204,"name":"line function  @FabriceNeyret2","username":"jonasfrey","description":"line from here https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["line"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 p, vec2 a,vec2 b) { // --- distance to segment with caps\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);// proj coord on line\n    return length(p - b * h);                      // dist to segment\n    // We might directly return smoothstep( 3./R.y, 0., dist),\n    //     but its more efficient to factor all lines.\n    // We can even return dot(,) and take sqrt at the end of polyline:\n    // p -= b*h; return dot(p,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float n_resolution_min = min(iResolution.x, iResolution.y);\n    float n_resolution_max = max(iResolution.x, iResolution.y);\n    vec2 o_pix_cor_nor = fragCoord/n_resolution_min;\n    vec2 o_mouse_norm = iMouse.xy/n_resolution_min;\n\n\n    float n_dist = line(o_pix_cor_nor,  vec2(0.0,0.0), o_mouse_norm);\n    \n    float n_dist_modified = sqrt(n_dist);\n    fragColor = vec4(n_dist_modified);\n    \n    fragColor = sqrt(fragColor);\n    \n}","name":"Image","description":"","type":"image"}]}