{"ver":"0.1","info":{"id":"csKGWd","date":"1679230282","viewed":124,"name":"GPT-4 Shader","username":"EPL","description":"forgot prompt","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["ai","gpt4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime * 0.5;\n\n    // HÃ¼pfende Animation\n    float bounce = abs(sin(time * 5.0)) * 0.1;\n    vec2 bounceOffset = vec2(0.0, bounce);\n\n    // Gummiband-Transformation\n    float rubberStrength = sin(uv.y * 15.0 + time) * 0.1;\n    vec2 rubberStretch = vec2(rubberStrength, 0.0);\n\n    vec2 merkelUV = uv + bounceOffset + rubberStretch;\n    vec4 merkelTexture = texture(iChannel0, merkelUV);\n\n    fragColor = merkelTexture;\n}","name":"Image","description":"","type":"image"}]}