{"ver":"0.1","info":{"id":"slcfWs","date":"1663811492","viewed":156,"name":"Simple truchet pattern","username":"fishy","description":"Turns out this effect is easier than I thought. Mouse controls how many tiles are flipped","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["sdf","truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tiles 10.0\n\nfloat hash21(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat sdfTile(in vec2 p, float r, float t, bool rot)\n{\n    p.x = rot? 1.0 - p.x : p.x;\n    return abs(min(length(p), length(p - vec2(1.0))) - r) - t;\n}\n\nvec2 stepPoint(vec2 p, float c)\n{\n    return floor(p * c) / c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv += 0.5;\n    uv.x += iTime*0.3;\n    uv.y += sin(iTime)*0.2;\n    float px = tiles/iResolution.y;\n    \n    vec2 tileUv = fract(uv * tiles);\n    float tile = hash21(stepPoint(uv, tiles));\n    \n    \n    float col = smoothstep(0.0, px, sdfTile(tileUv, 0.5, 0.05, tile < (iMouse.z > 0.0? iMouse.y/iResolution.y : 0.5)));\n\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}