{"ver":"0.1","info":{"id":"tlSfRz","date":"1598201929","viewed":271,"name":"Interlocked arms","username":"FabriceNeyret2","description":"simplified version of the classical 4 interlocked arms. \n[url]https://www.google.com/search?q=4+interlocked+arms&tbm=isch[/url]\n\nUsing 4-rotation symmetry folding seems more costly, but 2-rotation is ok.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","symmetry","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                    \n#define P(q)    t = min(t, abs(q.x)+3.),  /* invisible cell wall to fix sign() discont */ \\\n                r = sign(q.x)*q - vec3(3,0,-3),                                           \\\n                t = min(t, max( 1.-r.z, length(r.xy) - .4 )),  /* arm */                  \\\n                t = min(t, length( vec2(length(r.yz) - 1., abs(abs(r.x)-.4)-.2)) - .2 ) // 4 rings \"fingers\" \n  \nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t=10., d;\n    vec3  R = iResolution,\n          D = normalize(vec3( U+U, -10.*R.y ) - R ),  // ray direction\n          p = 50./R, q,r;                             // marching point along ray \n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.015 )\n        q = p, \n        q.yz *= rot(.6),                              // rotations\n        q.xz *= rot(-.3*iTime),\n        \n        P( q ),                 // P(-q ),            // shape with 4 rotations \n        P(vec3(-q.z,q.y, q.x)), // P(vec3( q.z,q.y,-q.x)), \n        \n        p += t*D;                                     // step forward = dist to obj\n\n    O *= vec4(1,.8,.8,1);                             // coloring\n}\n","name":"Image","description":"","type":"image"}]}