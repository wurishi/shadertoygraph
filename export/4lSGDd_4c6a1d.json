{"ver":"0.1","info":{"id":"4lSGDd","date":"1433455765","viewed":182,"name":"Looking Face","username":"cabbibo","description":"trying to make faces","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n#define time iTime\n\nconst float INTERSECTION_PRECISION = .001;\nconst float MAX_TRACE_DISTANCE     = 10.;\nconst int NUM_TRACE_STEPS          = 130;\n\nconst vec3 lightPos = vec3( 3. , 0.  , 0. );\n\nvec3 lookPos;\n\n\nfloat smin_2_3(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\n\nvoid doCamera( out vec3 camPos , out vec3 camTar , in float time ){\n\n  camPos = vec3( 0. , 0. , 1.5 );\n  camTar = vec3( 0. );\n\n}\n\nmat3 calcLookAtMatrix( vec3 camPos , vec3 camTar , float roll ){\n\n  vec3 up = vec3( sin( roll ) ,cos( roll ) , 0. );\n  vec3 ww = normalize( camTar - camPos );\n  vec3 uu = normalize( cross( ww , up ) );\n  vec3 vv = normalize( cross( uu , ww ) );\n\n  return mat3( uu , vv , ww );\n\n}\nfloat sdPlane( vec3 pos ){\n return pos.y;   \n}\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCappedCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xy), -p.z - c.z );\n    vec2 v = vec2( c.z*c.y/c.x, -c.z );\n\n    vec2 w = v - q;\n\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n\n    vec2 d = max(qv,0.0)*qv/vv;\n\n    return sqrt( dot(w,w) - max(d.x,d.y) )* sign(max(q.y*v.x-q.x*v.y,w.y));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nmat3 matInverse( mat3 m ){\n    \n  \n    vec3 a = vec3(\n      \n        m[1][1] * m[2][2] - m[2][1] * m[1][2],\n        m[0][2] * m[2][1] - m[2][2] * m[0][1],\n        m[0][1] * m[1][2] - m[1][1] * m[0][2]\n        \n    );\n    \n    vec3 b = vec3(\n      \n        m[1][2] * m[2][0] - m[2][2] * m[1][0],\n        m[0][0] * m[2][2] - m[2][0] * m[0][2],\n        m[0][2] * m[1][0] - m[1][2] * m[0][0]\n        \n    );\n    \n     vec3 c = vec3(\n      \n        m[1][0] * m[2][1] - m[2][0] * m[1][1],\n        m[0][1] * m[2][0] - m[2][1] * m[0][0],\n        m[0][0] * m[1][1] - m[1][0] * m[0][1]\n        \n    );\n    \n    \n    return mat3( \n        \n       a.x , a.y , a.z ,\n       b.x , b.y , b.z ,\n       c.x , c.y , c.z\n        \n    );\n    \n \n  \n    \n}\n\nfloat face( vec3 pos , vec3 p , mat3 rot ){\n    \n    mat3 iRot = matInverse( rot );\n    \n    vec3 headPos  = iRot * ( pos - p );\n    vec3 nosePos  = iRot * ( pos - p );\n    vec3 lePos    = iRot * ( pos - p + rot * vec3( -.1 , -.1 , 0.));\n    vec3 rePos    = iRot * ( pos - p + rot * vec3( .1 , -.1 , 0.));\n    vec3 mouthPos = iRot * ( pos - p + rot * vec3( 0. , .12 , 0.));\n\n    \n   \tfloat nose = sdCappedCone( nosePos , vec3( .1 , .04 , .1 ) );\n    float head = udBox( headPos , vec3( .2 , .2 , .01 ));\n    \n    float re = sdSphere( rePos , .03 );\n    float le = sdSphere( lePos , .03 );\n    \n    float mouth = sdTorus( mouthPos , vec2( .04 , .02 ));\n\n    float f = head;\n    \n    f = smin_2_3( f , nose  , .04 );\n    f = smin_2_3( f , le    , .04 );\n    f = smin_2_3( f , re    , .04 );\n    f = smin_2_3( f , mouth , .04 );\n                       \n    return f;\n    \n}\n\nfloat fire( vec3 pos ){\n\n    vec3 p = vec3( 0. , -.3 , 0.5 );\n    float f = sdSphere( pos - p  , .1 ); \n    \n    \n    for( int i  = 0; i < 10; i++ ){\n        \n       float h = mod( time * (abs( sin( float( i + 5 ))) +.3) * .05 , .3 );\n       p  = vec3( \n         sin( ( h + .2) * float( i + 5 ) ) * .8 * h,\n         h * 2. - .3,\n         cos(( h +.3) * float( i + 5 ) ) * .8 * h + .5\n       );   \n       \n       float r = abs( sin( p.x * time * .01 )  + sin( p.y * float( i +4 ) * time * .001 ));\n       float v = sdSphere( pos - p  , (.3 - h ) * .2 ); \n       f = smin_2_3( f , v  , .04 );\n       \n        \n\t}\n    \n    \n    return f;\n    \n}\n\n\n\nvec2 map( vec3 pos ){\n\n\n  vec2 res = vec2( sdSphere( pos - lookPos , .01 ) ,1. );\n  vec2 res2;\n  for( int i = 0; i < 4; i ++ ){\n   \n  \n    vec3 p = vec3( (((float( i )+.5) / 4. ) - .5 ) * 2., 0.,0.);\n      \n    mat3 rot = calcLookAtMatrix( p , lookPos , 0. );\n      \n    res2 = vec2(face( pos , p , rot) , float( i ) ); \n\n    res = opU( res , res2 );\n\n  }  \n    \n  res2 = vec2( fire( pos ) , 10. );\n    \n  res = opU( res , res2 );\n    \n  res2 = vec2( sdPlane( pos  - vec3( 0. , -.5 , 0. ) ), 100. );\n  res = opU( res , res2 );\n    \n\n  return res;\n\n\n\n}\n\n\n// res = result;\nvec2 calcIntersection( in vec3 ro , in vec3 rd ){\n\n  float h     = INTERSECTION_PRECISION * 2.;\n  float t     = 0.;\n  float res   = -1.;\n  float id    = -1.;\n\n  for( int i = 0; i < NUM_TRACE_STEPS; i++ ){\n      \n    if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n    \n    vec2 m = map( ro + rd * t );\n  \n    h  = m.x;\n    t += h;\n    id = m.y;\n\n  }\n\n  if( t < MAX_TRACE_DISTANCE ) res = t;\n  if( t > MAX_TRACE_DISTANCE ) id = -1.;\n\n  return vec2( res , id ); \n\n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 20.*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 render( vec3 ro , vec3 rd ){\n   \n  vec2 res = calcIntersection( ro , rd );\n  vec3 col = vec3( 1. );\n\n  if( res.x > 0. ){\n\n\tvec3 pos = ro + rd * res.x;\n      vec3 nor = calcNormal( pos );\n\n      float AO = calcAO( pos , nor );\n\n      float fix = pow( AO , .4 );\n      \n      vec3 coloa = vec3( .6 , .2 , .1 );\n      \n      // fire\n      if( res.y > 9.9 ){\n          coloa = vec3( .6 , .4 , .2 ); \n      }\n      \n      if( res.y > 99.9 ){\n      \tcoloa = vec3( .2 , .2 , .5 );    \n      }\n      \n      coloa *= nor * .5 + .5;\n      col = mix( vec3( 1. ) , coloa , 1. - fix );\n\n  }\n    \n  return col;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor , in vec2 fragCoord){\n\n  vec2 p = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n  \n  // Getting mouse position!\n  vec2 m =  ( -iResolution.xy + 2.0 * iMouse.xy ) / iResolution.y;;\n    \n  vec3 ro , ta;\n  \n  doCamera( ro , ta , time  );\n\n  mat3 camMat = calcLookAtMatrix( ro , ta , 0. ); \n \n  // z = lens length \n  vec3 rd = normalize( camMat * vec3( p.xy , 2. ) ); \n    \n  // Getting our mouse ray direction\n  vec3 md = normalize( camMat * vec3( m.xy , 2. ) ); \n    \n  lookPos = ro + md * 1.;\n    \n  //lookPos = vec3( 0. , -.3 , .5 );\n \n  vec3 col = render( ro , rd );\n\n  fragColor = vec4( col , 1. );\n\n}","name":"","description":"","type":"image"}]}