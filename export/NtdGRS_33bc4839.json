{"ver":"0.1","info":{"id":"NtdGRS","date":"1636273984","viewed":89,"name":"Just Triangle","username":"SeresHotes","description":"Drawing one basic triangle using simple math","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 get_normal(in vec2 vec) {\n    return vec2(vec.y, -vec.x);\n}\n\nbool is_inside3(in vec2 arr[3], vec2 point) {\n    for (int i = 0; i < 3; i++) {\n        vec2 a = get_normal(arr[(i + 1) % 3] - arr[i]);\n        float t = dot(a, point - arr[i]);\n        if (t < 0.0) {\n            return false;\n        }\n    }\n   \n    return true;\n}\n\n\nvec2 vertices[] = vec2[](\n    vec2(0.1, 0.2),\n    vec2(0.1, 0.4),\n    vec2(0.8, 0.1)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(uv.xyx+vec3(0,2,4));\n    if (is_inside3(vertices, uv)) {\n        col = vec3(1, 1, 1);\n    } else {\n        col = vec3(0, 0, 0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}