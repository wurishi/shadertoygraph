{"ver":"0.1","info":{"id":"M3GSRz","date":"1719838995","viewed":53,"name":"mike_hw1","username":"mike2367","description":"simple change of iq's distance 2d","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// the following code is altered from one of iq's 2d distance\n// code ref: https://www.shadertoy.com/view/7sdXz2\n\n// s = side length\n// r = corner radius\nfloat sdRoundSquare( in vec2 p, in float s, in float r ) \n{\n    float t = iTime;\n    vec2 q = fract(abs(p)-s)+r;\n    return  min(max(q.x,q.y),0.0) +(length(max(q,0.0)) - r) - (min(max(q.x,q.y),0.0) * (length(max(q,0.0)) - r));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel and moust coordinates\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    // animate the square\n\tfloat si = 0.5;\n    float ra = si*(0.3 - 2.2*cos(0.5*iTime+4.0));\n\n    // draw the square \n\tfloat d = sdRoundSquare( p, si, ra );\n\n    // apply colors to it\n    vec3 col = (d>0.8) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.1 + 1.5* (2.0-sin(iTime / 3.0)) * cos(75.0*d) ;\n\tcol = mix( col, vec3(0.5), 1.0-smoothstep(0.0,0.01,abs(d * iResolution.y)) );\n\n    // mouse interaction\n    if( iMouse.z>0.001 )\n    {\n    d = sdRoundSquare( m, si, ra );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}