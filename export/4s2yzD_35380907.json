{"ver":"0.1","info":{"id":"4s2yzD","date":"1491195353","viewed":659,"name":"Now in Color!","username":"Ebanflo","description":"I watched a computerphile video on edge detection with the sobel operator and wanted to implement it. Let me know if there are any optimizations to be made. I made it lighter so that it would be easier to see.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","texture","edges"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 toGrayScale(vec4 col){\n    float result = (col.x + col.y + col.z) / 3.0;\n    return vec4(result);\n}\n\nvec2 uv(vec2 coords){\n    return coords.xy / iResolution.xy;\n}\n\nfloat vertSobel(vec2 coords){\n    if(coords.x == 1.0 || coords.x == iResolution.x || coords.y == iResolution.y || coords.y == 1.0){\n        return 0.0;\n    }\n    else {\n       float upLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y + 1.0)))).x;\n        float left = -2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y)))).x;\n        float bLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y - 1.0)))).x;\n        float upRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y + 1.0)))).x;\n        float right = 2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y)))).x;\n        float bRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y - 1.0)))).x;\n        float total = (upLeft + left + bLeft + upRight + right + bRight) / 6.0;\n        return total;\n    }\n}\n\nfloat horizSobel(vec2 coords){\n    if(coords.x == 1.0 || coords.x == iResolution.x || coords.y == iResolution.y || coords.y == 1.0){\n        return 0.0;\n    }\n    else {\n       float upLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y + 1.0)))).x;\n        float up = -2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x, coords.y + 1.0)))).x;\n        float bLeft = -toGrayScale(texture(iChannel1, uv(vec2(coords.x - 1.0, coords.y - 1.0)))).x;\n        float upRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y + 1.0)))).x;\n        float b = 2.0 * toGrayScale(texture(iChannel1, uv(vec2(coords.x, coords.y - 1.0)))).x;\n        float bRight = toGrayScale(texture(iChannel1, uv(vec2(coords.x + 1.0, coords.y - 1.0)))).x;\n        float total = (upLeft + up + bLeft + upRight + b + bRight) / 6.0;\n        return total;\n    }\n}\n\nconst float pi = 3.14159;\n\nvec3 getCol(vec2 v){\n    vec3 result;\n    float theta = atan(v.y / v.x);\n    result.x = exp(-(theta + pi / 4.0) * (theta + pi / 4.0) * 4.0);\n    result.y = exp(-theta * theta * 4.0);\n    result.z = exp(-(theta - pi / 4.0) * (theta - pi / 4.0) * 4.0);\n    return result;\n}\n\nvec3 sobel(vec2 coords){\n    vec2 helper;\n    helper.x = horizSobel(coords);\n    helper.y = vertSobel(coords);\n    float shade = length(helper);\n    vec3 col = getCol(helper);\n    return shade * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = sobel(fragCoord);\n\tfragColor = vec4(pow(col.x, .3),pow(col.y,.3),pow(col.z,.3), 1.0);\n}","name":"Image","description":"","type":"image"}]}