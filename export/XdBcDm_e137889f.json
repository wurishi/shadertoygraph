{"ver":"0.1","info":{"id":"XdBcDm","date":"1492284334","viewed":123,"name":"fbm repro","username":"zeletochoy","description":"fbm","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BUMP_NB 4\n#define BUMP_TIME 0.02\n#define BUMP_SIZE 0.1\n#define LOOP_DURATION 6.4\nconst float bumps[BUMP_NB] = float[BUMP_NB](1.,    2.6,   3.4,   4.2);\n\nfloat bump_time(in float t)\n{\n    float rem = mod(t, LOOP_DURATION);\n    float loops = (t - rem) / LOOP_DURATION;\n    float res = 0.;\n    for (int i = 0; i < BUMP_NB; ++i)\n        res += BUMP_SIZE * smoothstep(bumps[i], bumps[i] + BUMP_TIME, rem);\n    return (t / LOOP_DURATION + loops + res) / (BUMP_SIZE * float(BUMP_NB) + 1.);\n}\n\nfloat bump_reset(in float t)\n{\n    float rem = mod(t, LOOP_DURATION);\n    float loops = (t - rem) / LOOP_DURATION;\n    float reset = 0.;\n    for (int i = 0; i < BUMP_NB; ++i)\n        if (rem >= bumps[i])\n            reset = bumps[i];\n    return t / LOOP_DURATION + loops - reset;\n}\n\nfloat noise(in vec2 p, float x)\n{\n    vec2 f = fract(p);\n    p = floor(p);\n    float v = p.x + p.y * 1000.0;\n    vec4 r = vec4(v, v + 1.0, v + 1000.0, v + 1001.0);\n    r = fract((10000.0 + 5.*x) * sin(r * (0.001 + x*0.0000001)));\n    f = f * f * (3.0 - 2.0 * f);\n    return 2.0 * (mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y)) - 1.0;\n}\n\nfloat fbm(in vec2 p, float x, float a)\n{\n    mat2 lol = mat2(cos(a), sin(a), -sin(a), cos(a));\n    float z = 2.0;\n    float rz = 0.0;\n    for (float i = 1.0; i < 7.0; i++)\n    {\n        rz += abs((noise(p, x) - 0.5) * 2.) / z;\n        z = z * 2.0;\n        p = p * 2.0;\n        p *= lol;\n    }\n    return rz;\n}\n\nvec2 rot(in vec2 p, float a)\n{\n    return vec2(p.x * cos(a) + p.y * sin(a), p.x * -sin(a) + p.y * cos(a));\n}\n\nfloat smooth_bar(vec2 p, float a, float t)\n{\n    vec2 r = rot(p, a);\n    float lim = 0.1 + 0.01 * sin(10.*r.y + 100.*t);\n    return smoothstep(lim, lim + 0.05, abs(r.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    float ar = iResolution.x / iResolution.y;\n    vec2 c = vec2(0.5 * ar, 0.5);\n    vec2 p = uv - c;\n    \n    float t = bump_time(iTime);\n    float a = t * 6.283;\n    \n    float f = fbm((15. + 10. * sin(a)) * p, t, -0.5*bump_reset(iTime));\n    float bar = smooth_bar(p, a, t);\n    \n    vec3 col = mix(vec3(0.8, 0.4, 0.), vec3(0.4, 0., 0.8), sin(a));\n    col = vec3(1.) - bar * (vec3(1.) - col);\n    \n    col = f * col;\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BUMP_NB 4\n#define LOOP_DURATION 6.4\n#define TAU 6.2831853071\n#define FREQCOEF 1.059463094359\n\nconst float bumps[BUMP_NB] = float[BUMP_NB](1.,    2.6,   3.4,   4.2);\nconst float freqs[BUMP_NB] = float[BUMP_NB](73.42, 65.41, 58.27, 55.);\n\nfloat total = 0.0f;\n\nfloat notefreq(float n)\n{\n    return 110. * pow(FREQCOEF, n);\n}\n\nfloat noise(float x)\n{\n    return fract(sin(1371.1*x)*43758.5453);\n}\n\nfloat rand(vec2 co)\n{\n\treturn fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat synth(float time, float freq)\n{\n    float env = exp(-pow(2. * time - 0.5, 3.));\n    total += env;\n    float pseudo_sqr = clamp(10. * sin(TAU * freq * time), -1., 1.);\n    return pseudo_sqr * env;\n}\n\nfloat bass_drum(float time)\n{\n    float env = max(0., 1. - 3. * time);\n    total += env;\n    return sin(time * 440.) * env;\n}\n\nfloat snare(float time)\n{\n    float env = 0.15 * max(0., 1. - 5. * time);\n    total += env;\n    return rand(vec2(time * 8., 0.)) * env;\n}\n\nfloat hi_hat(float time)\n{\n    float env = 0.2 * max(0., 1. - 3. * time);\n    total += env;\n    return noise(time * 1024.) * env;\n}\n\n#define PLAY(ins, st) if (t > st) v += ins(t - st);\n\nvec2 mainSound( in int samp,float time)\n{\n    float t = mod(time, LOOP_DURATION);\n    float v = 0.;\n    \n    // Synth melody\n    for (int i = 0; i < BUMP_NB; ++i)\n        if (t >= bumps[i])\n            v += synth(t - bumps[i], freqs[i]);\n    \n    // Drums\n    t = mod(time, 0.8);\n    PLAY(snare, 0.);\n    PLAY(bass_drum, 0.2);\n    PLAY(snare, 0.4);\n    PLAY(hi_hat, 0.6);\n    \n    return vec2(clamp(v / max(1., total), -1., 1.));\n}","name":"Sound","description":"","type":"sound"}]}