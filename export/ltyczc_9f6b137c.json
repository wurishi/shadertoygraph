{"ver":"0.1","info":{"id":"ltyczc","date":"1537131055","viewed":1055,"name":"Vorukannikus_A.txt","username":"Kali","description":"Not much time lately for new shaders, but this is another of the old ones that I've found as txt files. I removed it because it wasn't compiling back then for most people and also I wasn't too happy with the result. One of the few times I used noise. ","likes":38,"published":1,"flags":64,"usePreview":1,"tags":["noise","terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdSSWt","filepath":"https://soundcloud.com/andreas-wendland/vulkan","previewfilepath":"https://soundcloud.com/andreas-wendland/vulkan","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define RAY_STEPS 80\n\n#define detail .01\n#define ldir normalize(vec3(-0.25,-1.,-0.2))\n\nmat2 rot;\nfloat maxdist=30.;\n\nfloat inside, zoom;\nfloat nebli=0.;\n\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n\n\nfloat hash( float n )\n{\n    return fract(sin(n)*4358.54568768763);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n\n\nfloat terrain( vec3 p )\n{\n\tp += vec3(1.0,0.0,0.8);\n\t\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.0547;\n    f += 0.2500*noise( p ); p = m*p*2.0334;\n    f += 0.1250*noise( p ); p = m*p*2.0121;\n    f += 0.0625*noise( p ); \n\tp=m*p*.04;\n\tf+=pow(noise(p),2.)*2.5;\t\n\tf+=noise(p*30.)*.03;\n\treturn f;\n}\n\n// 2D rotation function\nmat2 rot2D(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nfloat lg=0.;\n\n// Distance function\nfloat de(vec3 pos) {\n\tfloat disp=terrain(pos);\n\tnebli=disp;\n\tfloat h=max(0.,sin(pos.y*.2));\n\tfloat md=pos.z-disp;\n\tfloat no=noise(pos*6.-vec3(0.,0.,mod(iTime*4.,1000.)));\n\tlg+=pow(max(0.,1.-(pos.z-h-no*.1+.05)),5.);\n\treturn md*.4;\n}\n\n\n\nvec3 normal(vec3 p) { ;\n\tvec3 e = vec3(0.0,detail,0.0);\n\tvec3 norm=vec3(\n\t\t\tde(p+e.yxx)-de(p-e.yxx),\n\t\t\tde(p+e.xyx)-de(p-e.xyx),\n\t\t\tde(p+e.xxy)-de(p-e.xxy)\n\t\t\t);\n\treturn normalize(norm);\n}\n\n\nfloat calcao(vec3 pos, vec3 nor) {\n\tconst float stps=5.;\n\tfloat aodet=.25;\n\taodet/=stps;\n\tfloat totao = 0.0;\n    float sca = 1.;\n    for( float aoi=0.; aoi<stps; aoi++ ) {\n        float hr = aodet*aoi*aoi;\n        vec3 aopos =  nor * hr + pos;\n        float dd = de( aopos );\n        totao += (hr-dd)*sca;\n\t\tsca*=.6;\n    }\n    return clamp( 1.0 - stps*totao, 0., 1.0 );\n}\n\n\n\n\nvec3 colorize(vec3 p){\n\tfloat n=texture(iChannel0,p.xy*.1).x;\n\t\t n+=texture(iChannel0,p.xy*.2).y;\n\t\tn*=clamp(p.z,0.1,2.)-0.1;\n\treturn min(1.,.15/abs(1.-n)+.2)*vec3(1.,.7,.5)*(.3+noise(p*5.));\t\n}\n\n\n\nvec3 raymarch(in vec3 from, in vec3 dir) \n\n{\n\tvec3 p, p2, p3, norm;\n\tfloat d=100., g=0.;\n\tfloat totdist=0.,totdist2=0., totdist3=0.;\n\tvec3 cdir=dir;\n\tfloat hit=0.;\n\tp=from;\n\tfloat sh=1.;\n\tfloat det=detail;\n\tfloat neb=0.;\n\tfor (int i=0; i<RAY_STEPS; i++) {\n\t\tdet*=1.+totdist*.001;\n\t\tif (d>det && totdist<maxdist) {\n\t\t\td=de(p);\n\t\t\tp+=d*dir;\n\t\t\tg+=max(0.,.1+det*3.-d);\n\t\t\ttotdist+=d;\n\t\t}\n\t}\n\tp-=(det-d)*dir;\n\tfloat ref=0.;\n\tnorm=normal(p);\n\n\n\tfloat ldot=max(0.,dot(dir,ldir));\n\tfloat bdot=max(0.,dot(-dir,ldir));\n\tfloat lglow=pow(ldot,8.);\n\tfloat backg=lglow*.7+.3+max(0.,.2-p.z*.2)*3.;\n\tbackg+=pow(texture(iChannel1,dir.xz*vec2(1.,3.)+iTime*.02).x,.5)*clamp(dir.z+.1,0.,.1)*ldot*ldot;\n\tbackg=min(1.,backg)-smoothstep(0.,1.,bdot)*.2;\n\tbackg=clamp(backg,0.,1.);\n\tvec3 color=vec3(backg);\n\tif (d<.1) {\n\t\tcolor=colorize(p)*1.5;\n\t\tcolor=mix(color,1.5*vec3(1.,.6,.5),max(0.,1.3-p.z));\n\t\tfloat ao=calcao(p, norm);\n\t\tfloat amb=max(0.,dot(norm,-dir));\t\t\n\t\tfloat dif=max(0.,dot(norm,ldir))*sh;\n\t\tfloat spec=pow(max(0.,dot(reflect(dir,norm),ldir)),20.)*dif;\n\t\tcolor=(amb*ao+dif*.5)*color+spec*.5+g*(1.-exp(-.05*totdist))*noise(p*2.+iTime*.5);\n\t\tcolor=max(color,max(0.,1.-length(color))*pow(max(0.,dot(norm,normalize(vec3(0.,1.,-1.5)))),.5)*vec3(1.,.4,.2));\t\t\n\t\tcolor=mix(color,vec3(.5,.4,.3),min(1.,lg*.02));\n\t\tcolor+=lg*vec3(1.,.25,.1)*.1*(1.-sqrt(ao));\n\t\tcolor=mix(color,vec3(backg),1.-exp(-.0005*pow(totdist,3.)));\n\n\t} else {\n\t\tvec3 planetpos=normalize(vec3(.8,-1.,0.));\n\t\tfloat planet=dot(dir,planetpos); \n\t\tfloat hidefog=clamp(dir.z+.07,0.,.05)/.05*max(0.02,1.-pow(abs(dir.x+.35),3.))*.02;\n\t\tif (planet>.97) {\n\t\t\tvec3 planetshade=vec3(1.,.9,.8)*50.;\n\t\t\tvec2 no=(texture(iChannel0,dir.xz*1.5).xy-.5)*1.5;\n\t\t\tplanetshade*=1.-pow(abs(.5-fract(dir.z*20.+no.x)),2.);\n\t\t\tplanetshade*=1.-pow(abs(.5-fract(dir.z*20.+no.x)),.5)*.7;\n\t\t\tplanetshade+=vec3(1.,.5,.2)*pow(texture(iChannel1,dir.xz).x,3.)*100.;\n\t\t\tcolor=mix(color,planetshade*.7,hidefog);\n\t\t} else {\n\t\t    vec3 st = (dir * 2.+ vec3(1.3,2.5,1.25)) * .3;\n\t\t\tfor (int i = 0; i < 13; i++) st = abs(st) / dot(st,st) - .9;\n\t\t\tcolor+= min( 1., pow( min( 5., length(st) ), 3. ) * .0025 )*1.5;\n\t\t}\n\t\t\tcolor+=max(0.,.007-abs(planet-.97))*hidefog*2000.;\n\t\t\tcolor+=pow(ldot,100.);\n\t}\t\t\n\treturn color;\n}\n\n\nfloat move(float t) {\n\treturn sin(t*1.6258)+cos(t*.7489)*10.;\t\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n\tvec2 uvo=(uv-.5)*2.;\n\tvec2 oriuv=uv;\n\tuv=uv*2.-1.;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv.y-=.03;\n\tvec2 mouse=(iMouse.xy/iResolution.xy-.5)*3.;\n\tmouse.y-=2.;\n\tif (iMouse.z<1.) mouse=vec2(0.,-2.);\n\tvec3 dir=normalize(vec3(uv,.8));\n\tmat2 camrot1=rot2D(mouse.y);\n\tmat2 camrot2=rot2D(mouse.x);\n\tdir.yz*=camrot1;\n\tdir.xy*=camrot2;\n\tfloat m=move(iTime*.25);\n\tfloat m2=move(iTime*.25+.05);\n\tdir.xz*=rot2D(m2-m);\n    float t = mod(iTime*2., 200.);\n\tvec3 from=vec3(3.+m,-t,4.);\n\tvec3 color=raymarch(from,dir);\n\tfloat col=0.;\n\tfloat iwidth=1./16.;\n\tcolor=clamp(color,vec3(0.),vec3(1.));\n\tcolor*=vec3(1.2,1.1,.95);\n\tcolor*=1.-pow(max(abs(uvo.x),abs(uvo.y)),30.);\n    color*=smoothstep(0.,2.,t);\n    color*=1.-smoothstep(198.,200.,t);\n\tfragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}