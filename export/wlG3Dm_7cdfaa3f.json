{"ver":"0.1","info":{"id":"wlG3Dm","date":"1582355051","viewed":71,"name":"thebookofshaders-shape-func","username":"enigmawxy","description":"shape functions form the Book of Shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Thomas Ong\n\n#define PI 3.14159265359\n\nfloat plot(vec2 st, float pct) {\n  return smoothstep( pct-0.01, pct, st.y) - smoothstep( pct, pct+0.01, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    // 如果是x的5次方\n    //float y = pow(uv.x, 5.);\n    //float y = step(0.6, uv.x);\n    //float y = uv.x;\n    //float y = smoothstep(.2,.8, uv.x);\n    float y = smoothstep(0.2,0.5,uv.x) - smoothstep(0.5,0.8,uv.x);\n    \n    vec3 color = vec3(y);\n\t\n    float pct = plot(uv, y);\n    color = (1.0-pct)*color + pct* vec3(0., 1., 0.);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}