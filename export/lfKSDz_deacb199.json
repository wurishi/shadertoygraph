{"ver":"0.1","info":{"id":"lfKSDz","date":"1715093596","viewed":32,"name":"Crisscrossing lines","username":"motus_art","description":"Simple shader of random moving crisscrossing lines.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Number of lines\n    int numLines = 10;\n    \n    // Line properties\n    vec3 lineColor = vec3(1.0, 1.0, 1.0);\n    vec3 col = vec3(0.0);\n    float time = iTime + 123.0; // Time +123 so everything doesn't start at zero\n    \n    // Draw lines\n    for (int i = 0; i < numLines; i++) {\n        float speed = map(random(vec2(1.0, i)), 0.0, 1.0, -0.2, 0.2); \n        float lineWidth = map(random(vec2(12.0, i)), 0.0, 1.0, 0.005, 0.02); ;       \n        float linePosition = mod(time * speed, 1.0);\n        float orientation = (mod(float(i), 2.0) > 0.5) ? uv.x : uv.y;\n        float distanceToLine = abs(orientation - linePosition) / lineWidth;\n        float lineIntensity = smoothstep(0.0, 0.25, 1.0 - distanceToLine);\n        col += lineColor * lineIntensity;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}