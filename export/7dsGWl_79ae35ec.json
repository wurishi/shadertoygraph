{"ver":"0.1","info":{"id":"7dsGWl","date":"1616761201","viewed":70,"name":"Multicolor doubleslit experiment","username":"HetSmiecht","description":"The double slit experiment, but performed on all three colour channels: red (650 nanometers), green (550 nanometers) and blue (450 nanometers).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["interference","doubleslit","interferencepattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Y coordinates normalized between 0 and 1, but kept the aspect ratio\n    vec2 uvy = fragCoord/iResolution.y;\n    \n    float width = iResolution.x / iResolution.y;\n    \n    float pi2 = 2.0 * 3.14159265358979323846264338327950288;\n    \n    \n    \n    // the distance between the bottom and top slit of the diffraction grating\n    // use this value to zoom in or out\n    float slitDistanceScreen = 0.8;\n    \n    // the distance between the slits in nanometers\n    float slitDistanceSimulation = 1800.0;\n    \n    // the wavelength of the red, green and blue colour channel, in nanometers\n    vec3 waveLengthSimulation = vec3(650.0, 550.0, 450.0);\n    \n    // the waveLength of the light in screen space\n    vec3 waveLengthScreen = waveLengthSimulation / slitDistanceSimulation * slitDistanceScreen;\n    \n    // the thing which actually counts the interference\n    vec3 interferenceX;\n    vec3 interferenceY;\n    \n    // top slit, all three colour channels\n    vec3 phase1 = vec3(distance(uvy-vec2(width*0.5, 0.5), vec2(0, 0.5 * slitDistanceScreen))) / waveLengthScreen;\n    interferenceX += sin(phase1 * pi2);\n    interferenceY += cos(phase1 * pi2);\n    \n    // bottom slit, all three colour channels\n    vec3 phase2 = vec3(distance(uvy-vec2(width*0.5, 0.5), vec2(0,-0.5 * slitDistanceScreen))) / waveLengthScreen;\n    interferenceX += sin(phase2 * pi2);\n    interferenceY += cos(phase2 * pi2);\n    \n    // set the brightness of each colour channel equal to the length of the\n    // thing which counts the interference (scaled by some constant)\n    vec3 col = 0.5*sqrt(interferenceX * interferenceX + interferenceY * interferenceY);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}