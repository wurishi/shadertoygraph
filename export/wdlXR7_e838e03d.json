{"ver":"0.1","info":{"id":"wdlXR7","date":"1550954296","viewed":116,"name":"Psycho shader","username":"Dubko","description":"Cosine wave that has frequence moduled by distance to the center, angle of pixel from the center and time.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["psycho"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Oscilates between 0 and 1 in sharp rectangles\nfloat rectangleSignal(float time)\n{\n    const float freq = 1.0;\n\tfloat isPair = floor(mod((time * freq),2.0));\n    return isPair;\n}\n\n// causes short 1.0 impulses\nfloat dirac(float time,float period)\n{\n\tfloat isPair = (sign(floor(mod((time *100.0),period*100.0)-1.0))+1.0)*0.5;\n    return 1.0-isPair;\n}\n\nconst vec3 colorA = vec3(1.0,0.0,0.0);\nconst vec3 colorB = vec3(0.0,1.0,0.0);\nconst vec3 colorC = vec3(0.0,0.0,1.0);\n\nvec3 mapDistanceToColor(float dist)\n{\n    // split equally\n    return mix(mix(colorA,colorB,dist*2.0), colorC, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 cuv = uv-vec2(0.5);\n    \n    float dist = distance(cuv,vec2(0.0))+tan(iTime*0.1)+rectangleSignal(iTime)*100.0;\n    \n    // calculate angle from the middle of screen\n    float angle = atan(cuv.x,cuv.y);\n    \n    // mul intensity with angle, with distance to the center\n    // and with inverse distance (to cause perspective effect)\n    float intensity = cos(30.0/(dist+0.3))*(cos(angle*100.0*rectangleSignal(iTime))*cos(dist*100.0));\n\n    // flash the intensity with some rectangle period\n    intensity -= intensity*rectangleSignal(iTime*5.0)*1.0;\n    \n    intensity += dirac(iTime,1.0)*5.0;\n    fragColor = vec4(mapDistanceToColor(abs(cos(dist*50.0+iTime*angle*0.1))),1.0)*intensity;\n    \n    \n    // Output to screen\n   // fragColor = vec4(vec3(intensity ),1.0);\n}","name":"Image","description":"","type":"image"}]}