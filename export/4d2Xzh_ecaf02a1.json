{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define MAX_REFLECTION_DEPTH 4\n\nfloat time;\n\nfloat hash(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise(vec2 p)\n{\n    return hash(p.x + p.y * 57.0);\n}\n\nfloat smoothNoise2(vec2 p)\n{\n    vec2 p0 = floor(p + vec2(0.0, 0.0));\n    vec2 p1 = floor(p + vec2(1.0, 0.0));\n    vec2 p2 = floor(p + vec2(0.0, 1.0));\n    vec2 p3 = floor(p + vec2(1.0, 1.0));\n    vec2 pf = fract(p);\n    return mix( mix(noise(p0), noise(p1), pf.x), \n              \tmix(noise(p2), noise(p3), pf.x), pf.y);\n}\n\nvec2 cellPoint(vec2 cell)\n{\n    return vec2(noise(cell) + cos(time + cell.y) * 0.3,\n                noise(cell*0.3) + sin(time + cell.x) * 0.3);\n}\n\nvec4 circles(vec2 t, out float rad, out float idx)\n{\n    vec2 p = floor(t);\n    float nd = 1e10;\n    vec2 nc;\n    vec2 nq;\n\n    for(int y = -1; y < 2; y += 1)\n        for(int x = -1; x < 2; x += 1)\n        {\n            vec2 b = vec2(float(x), float(y));\n            vec2 q = b + p;\n            vec2 c = q + cellPoint(q);\n            vec2 r = c - t;\n\n            float d = dot(r, r);\n\n            if(d < nd)\n            {\n                nd = d;\n                nc = c;\n                nq = q;\n            }\n        }\n\n    rad = 1.0;\n    idx = nq.x + nq.y * 119.0;\n\n    for(int y = -1; y < 2; y += 1)\n        for(int x = -1; x < 2; x += 1)\n        {\n            if(x==0 && y==0)\n                continue;\n\n            vec2 b = vec2(float(x), float(y));\n            vec2 q = b + nq;\n            vec2 c = q + cellPoint(q);\n\n            rad = min(rad, distance(nc, c) * 0.5);\n        }\n\n    return vec4((t - nc) / rad, nc);\n}\n\nvec2 cmul(vec2 z0,vec2 z1)\n{\n    return vec2(z0.x * z1.x - z0.y * z1.y, z0.x * z1.y + z0.y * z1.x);\n}\n\nvec2 cdiv(vec2 z0,vec2 z1)\n{\n    vec2 z1conj = vec2(z1.x, -z1.y);\n    vec2 n = cmul(z0, z1conj);\n    vec2 d = cmul(z1, z1conj);\n    return n / d.x;\n}\n\nvec2 cinv(vec2 z)\n{\n    return cdiv(vec2(1.0,0.0),z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = iTime;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec2 tt = (fragCoord.xy / iResolution.y - vec2(0.5)) * (4.0 - 3.0 * iMouse.x / iResolution.x);\n    float b = 1.0;\n\n    for(int i = 0; i < (MAX_REFLECTION_DEPTH + 1);i += 1)\n    {\n        float rad, idx;\n        vec4 c = circles(tt, rad, idx);\n        float z = 1.0 - dot(c.xy, c.xy);\n\n        if(z<0.0)\n        {\n            float sh = mix(0.7, 1.0, smoothstep(0.0, 0.3, length(c.xy) - 0.95));\n            fragColor.rgb += sh * b * mix(0.1, 0.5, step(fract(tt.x + 0.5 * step(0.5, fract(tt.y))), 0.5));\n            break;\n        }\n\n        vec3 n = normalize(vec3(c.xy,z * 1.5));\n        vec3 diff = mix(vec3(0.0), mix(vec3(0.25, 1.0, 0.5), vec3(0.25, 0.25, 1.0), 0.5 + 0.5 * cos(idx * 12.0)),\n                      0.8 + 0.2 * (smoothNoise2(n.xy * 128.0) + 0.5 * smoothNoise2(n.xy * 256.0)));\n        float m = 1.0  -smoothstep(0.99, 1.0, length(c.xy));\n        fragColor.rgb += (vec3(0.1, 0.1, 0.2) * 0.1 + vec3(1.0, 1.0, 0.7) * diff * (0.4 + n.y * 0.4) +\n                             \t\tpow(0.5 + 0.5 * dot(n, normalize(vec3(1.0))), 8.0)) * b * m;\n        b *= pow(1.0 - n.z, 1.3) * 0.7;\n        tt = cinv(c.xy * vec2(1.0, -1.0)) * rad + c.zw;\n    }\n    \n    fragColor.rgb = sqrt(fragColor.rgb);\n}\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4d2Xzh","date":"1409003089","viewed":1426,"name":"Fake Reflections","username":"fizzer","description":"I used neighbouring cell boundaries in a voronoi pattern to determine a maximum radius for circle centered at the current cell's point. Then I used complex inversion to create a fake reflection effect. No raytracing/raymarching required! Mouse zooms.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["procedural","voronoi","spheres","balls","shiny","reflective"],"hasliked":0,"parentid":"","parentname":""}}