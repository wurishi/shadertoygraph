{"ver":"0.1","info":{"id":"wdjBW1","date":"1589984227","viewed":84,"name":"fork-Minecraft Subwoofer Lullaby","username":"jorge2017a1","description":"https://www.shadertoy.com/view/3ssfDl  -----Created by jetp250 in 2020-05-12","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["forkminecraftsubwooferlullaby"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///Resonant Lowpass Sawtooth\n\n// --- access to the image of ascii code c\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.))\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureLod( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), \\\n//                                                                               log2(length(fwidth(U/16.*iResolution.xy))) )\n  #define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);C(115);C(105);C(100);C(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//sonido original por\n//https://www.shadertoy.com/view/3ssfDl  -----Created by jetp250 in 2020-05-12\n\n#define BEATS_IN_BAR 4.0\n\n#define SONG_LENGTH_BARS 8.0\n#define SONG_LENGTH_BEATS (BEATS_IN_BAR * SONG_LENGTH_BARS)\n\n#define BPM 100.0\n\n#define PITCH 0.8\n\n#define C3 130.813\n#define Db3 138.591\n#define D3 146.832\n#define Eb3 155.563\n#define E3 164.813\n#define F3 174.614\n#define Gb3 184.997\n#define G3 195.998\n#define Ab3 207.652\n#define A3 220.00\n#define Bb3 233.082\n#define B3 246.942\n\n#define C4 261.626\n#define Db4 277.183\n#define D4 293.665\n#define Eb4 311.127\n#define E4 329.628\n#define F4 349.228\n#define Gb4 369.994\n#define G4 391.995\n#define Ab4 415.305\n#define A4 440.000\n#define Bb4 466.164\n#define B4 493.883\n\n#define C5 523.251\n#define Db5 554.365\n#define D5 587.330\n#define Eb5 622.254\n#define E5 659.225\n#define F5 698.456\n#define Gb5 739.989\n#define G5 783.991\n#define Ab5 830.609\n#define A5 880.000\n#define Bb5 932.328\n#define B5 987.767\n\n#define C6 1046.50\n#define Db6 1108.73\n#define D6 1174.66\n#define Eb6 1244.51\n#define E6 1318.51\n#define F6 1396.91\n#define Gb6 1479.98\n#define G6 1567.98\n#define Ab6 1661.22\n#define A6 1760.00\n#define Bb6 1864.66\n#define B6 1975.53\n\n\n#define WHOLE_NOTE 4.0\n#define HALF_NOTE 2.0\n#define QUARTER_NOTE 1.0\n#define EIGHTH_NOTE 0.5\n\n#define TWO_PI 6.2831\n\n\n// Beats per second\nconst float BPS = BPM / 60.0;\n\nfloat _t = 0.0;\n\nfloat fade(float t, float p) {\n\treturn exp(-3.0 * fract((_t - t)/SONG_LENGTH_BEATS)*(SONG_LENGTH_BEATS/p));   \n}\n\nfloat freq(float hz) {\n\t   return sin(TWO_PI * hz / BPS * _t * PITCH)+sin(3.0*TWO_PI * hz / BPS * _t * PITCH)+sin(5.0*TWO_PI * hz / BPS * _t * PITCH);\n}\n\nfloat pling(float noteHz, float pos, float len, float vol) {\n    return 1.0*sin(2.0* freq(noteHz)+ cos(noteHz*0.05)) * fade(pos, len) * vol;\n\t\n}\n\n// constant-volume pling\nfloat cpling(float noteHz, float pos, float len) {\n\treturn pling(noteHz, pos, len, 0.5);\n}\n\n\n// SONG START\n\nfloat getBassline1(float bar) {\n    float offset = bar * BEATS_IN_BAR;\n    float song = 0.0;\n    song += cpling(G4, offset + 0.0, QUARTER_NOTE);\n    song += cpling(B4, offset + 1.0, QUARTER_NOTE);\n    song += cpling(C4, offset + 2.0, QUARTER_NOTE);\n    song += cpling(B4, offset + 3.0, QUARTER_NOTE);\n\treturn song;\n}\n\nfloat getBassline2(float bar) {\n    float offset = bar * BEATS_IN_BAR;\n    float song = 0.0;\n    song += cpling(A3, offset + 0.0, QUARTER_NOTE);\n    song += cpling(G4, offset + 1.0, QUARTER_NOTE);\n    song += cpling(E4, offset + 2.0, QUARTER_NOTE);\n    song += cpling(G4, offset + 3.0, QUARTER_NOTE);\n\treturn song;\n}\n\n\nfloat getBassline3(float bar) {\n    float offset = bar * BEATS_IN_BAR;\n    float song = 0.0;\n    song += cpling(F3, offset + 0.0, QUARTER_NOTE);\n    song += cpling(F4, offset + 1.0, QUARTER_NOTE);\n    song += cpling(C4, offset + 2.0, QUARTER_NOTE);\n    song += cpling(F4, offset + 3.0, QUARTER_NOTE);\n\treturn song;\n}\n\nfloat getBassline4(float bar) {\n    float offset = bar * BEATS_IN_BAR;\n    float song = 0.0;\n    song += cpling(G3, offset + 0.0, QUARTER_NOTE);\n    song += cpling(G4, offset + 1.0, QUARTER_NOTE);\n    song += cpling(D4, offset + 2.0, QUARTER_NOTE);\n    song += cpling(G4, offset + 3.0, QUARTER_NOTE);\n\treturn song;\n}\n\nfloat getBassline5(float bar) {\n    float offset = bar * BEATS_IN_BAR;\n    float song = 0.0;\n    song += cpling(G4, offset + 0.0, QUARTER_NOTE);\n    song += cpling(C5, offset + 1.0, QUARTER_NOTE);\n    song += cpling(C4, offset + 2.0, QUARTER_NOTE);\n    song += cpling(C5, offset + 3.0, QUARTER_NOTE);\n\treturn song;\n}\n\nfloat getMelody(float bar) {\n    float offset = bar * BEATS_IN_BAR;\n    \n    float song = 0.0;\n    song += cpling(B5, offset + 0.0, EIGHTH_NOTE);\n    song += cpling(C6, offset + 0.5, EIGHTH_NOTE);\n    song += cpling(D6, offset + 1.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 1.5, EIGHTH_NOTE);\n    song += cpling(D6, offset + 2.5, EIGHTH_NOTE);\n    song += cpling(B5, offset + 3.0, EIGHTH_NOTE);\n    song += cpling(C6, offset + 4.0, EIGHTH_NOTE);\n    song += cpling(B5, offset + 5.0, EIGHTH_NOTE);\n    \n    song += cpling(B5, offset + 8.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 8.5, EIGHTH_NOTE);\n    song += cpling(D6, offset + 9.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 9.5, EIGHTH_NOTE);\n    song += cpling(G6, offset + 10.5, EIGHTH_NOTE);\n    song += cpling(E6, offset + 11.5, EIGHTH_NOTE);\n    song += cpling(D6, offset + 12.5, EIGHTH_NOTE);\n    \n    song += cpling(F6, offset + 16.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 16.5, EIGHTH_NOTE);\n    song += cpling(A5, offset + 17.0, EIGHTH_NOTE);\n    song += cpling(C6, offset + 17.5, EIGHTH_NOTE);\n    song += cpling(A5, offset + 18.5, EIGHTH_NOTE);\n    song += cpling(C6, offset + 19.0, EIGHTH_NOTE);\n    song += cpling(B5, offset + 20.0, EIGHTH_NOTE);\n    song += cpling(G5, offset + 21.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 21.5, EIGHTH_NOTE);\n    song += cpling(D6, offset + 22.5, EIGHTH_NOTE);\n    \n    song += cpling(F6, offset + 24.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 24.5, EIGHTH_NOTE);\n    song += cpling(A5, offset + 25.0, EIGHTH_NOTE);\n    song += cpling(C6, offset + 25.5, EIGHTH_NOTE);\n    song += cpling(A5, offset + 26.5, EIGHTH_NOTE);\n    song += cpling(A6, offset + 27.0, EIGHTH_NOTE);\n    song += cpling(G6, offset + 28.0, EIGHTH_NOTE);\n    song += cpling(E6, offset + 29.0, EIGHTH_NOTE);\n    song += cpling(D6, offset + 29.5, EIGHTH_NOTE);\n    song += cpling(B5, offset + 31.0, EIGHTH_NOTE);\n    \n    return song;\n}\n\nfloat getSong() {\n    float song = 0.0;\n    song += getMelody(0.0);\n    \n    // Intro\n\tsong += getBassline1(0.0);\n    song += getBassline1(1.0);\n    \n    // Melody start\n    song += getBassline2(2.0);\n    song += getBassline2(3.0);\n    \n    song += getBassline3(4.0);\n    song += getBassline4(5.0);\n    \n    song += getBassline3(6.0);\n    song += getBassline4(7.0);\n    \n    return song;\n}\n\n\n// SONG END\n\nvec2 postProcess(float freqs) {\n    return vec2(freqs * 0.3);\n}\n\nvec2 mainSound( in int samp,float time) {\n    //time = float(int(4096.0 * time))/4096.0;\n    _t = mod(time * BPS, SONG_LENGTH_BEATS);\n    return postProcess(getSong());\n}","name":"Sound","description":"","type":"sound"}]}