{"ver":"0.1","info":{"id":"wtffRl","date":"1597427993","viewed":116,"name":"Mandelbrot in Conway's Space","username":"BlockMaster","description":"Game of life with scalable cells.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["mandelbrot","cells","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/// Game of life with scalable cells. (You can resize the cells using the scale variable in the Buffer A.)\n/// Mandelbrot set makes anything a bit more interesting I guess. :)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Remap the fragCoord\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspectRatio = iResolution.y / iResolution.x;\n    \n    //Set the fragColor\n    vec3 colour = texture(iChannel0, uv).rgb;\n    fragColor = vec4(colour, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Scaling\nint scale = 1;\t//min = 1\nbool scaleChange = false;\nfloat scaleSpeed = 1.5;\n\n//Cells' Behaviour\nfloat speed = 1.;\t//max = 1.\nbool cellFading = true;\n\n//RNG Returning a Float (0. to 1.)\nfloat randomValue(vec2 uv)\n{\n    return fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n//Draw a Disk With Gaps in It\nvoid drawRandomDisk(vec2 uv, vec2 position, float radius, float roughness, inout float value)\n{\n    float pixelValue = 1. - step(radius, distance(position, uv));\n    value = mix(value, round(randomValue(uv)), pixelValue);\n}\n\n//Draw Mandelbrot Set With Gaps in It\nvoid drawRandomMandelbrotSet(vec2 coordinates, int iterations, inout float value)\n{\n    float pixelValue = 1.;\n    vec2 c = coordinates;\n    vec2 z = c;\t//do the first iteration (sqr(z) + c; z = 0 => z = c)\n    for (int i = 1; i < iterations; i ++)\n    {\n        if (pow(z.x, 2.) + pow(z.y, 2.) > 4.)\n        {\n            pixelValue = 0.;\n            break;\n        }\n        \n        vec2 tempZ = z;\n        z = vec2(pow(tempZ.x, 2.) - pow(tempZ.y, 2.) + c.x,\t//next z's real component\n                 2. * tempZ.x * tempZ.y + c.y);\t\t\t\t//next z's complex component\n        \n    }\n    value = mix(value, round(randomValue(coordinates)), pixelValue);\n}\n\n//Update the Cell's Value\nvoid getCellValue(vec2 uv, inout float value)\n{\n    //Get Sum of the Neighbor Cell Values\n    float cellSum = 0.;\n    vec2 pixelDistance = vec2(1.) / iResolution.xy;\n    for (int i = - 1; i < 2; i ++)\n    {\n        for (int j = - 1; j < 2; j ++)\n        {\n\t\t\tcellSum += ceil(texture(iChannel0, uv + pixelDistance * vec2(float(j), float(i)) * float(scale)).r);\n        }\n    }\n    \n    //Update the Cell's Value\n    cellSum -= ceil(value);\n    if (!cellFading)\n    {\n        value *= float(cellSum == 2.);\n        value += float(cellSum == 3.);\n    }\n    else\n    {\n        value *= float(cellSum == 2. || cellSum == 3.);\n        value += float(cellSum == 3.) * float(ceil(value) == 0.);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Change the Scale over Time\n    if (scaleChange) scale = int(ceil((sin(iTime * scaleSpeed) * 0.5 + 0.6) * 10.));\n    \n    //Remap the fragCoord\n    vec2 uv = floor((fragCoord - 0.5 + floor(float(scale) / 2.)) / float(scale)) * float(scale) + 0.5;\n    uv = (uv / iResolution.xy);\n    float aspectRatio = iResolution.y / iResolution.x;\n    \n    //Update the Cell's Value\n    float value = texture(iChannel0, uv).r;\n    if (mod(float(iFrame), ceil(1. / speed)) == 0.) \n    {\n        value = clamp(value - 0.4 * float(cellFading), 0., 1.);\n        getCellValue(uv, value);\n        value = clamp(value, 0., 1.);\n    }\n    \n    //Draw Some Shapes\n    uv.x /= aspectRatio;\n\tdrawRandomDisk(uv, vec2(0.4, 0.7), 0.1, 0., value);\n\tdrawRandomDisk(uv, vec2(0.7, 0.35), 0.2, 0., value);\n    float mandelbrotX = mod(iTime * 0.3, 0.8) * 2.;\n    float mandelbrotSpeed = 0.5 * smoothstep(0., 1., abs(mandelbrotX * 2. - 1.));\n    drawRandomMandelbrotSet(vec2(uv.x + mandelbrotX * 2. - mandelbrotSpeed - 2.3, uv.y - 0.5) * 2.5, 50, value);\n    \n    //Set the fragColor\n    vec3 colour = vec3(1.);\n    fragColor = vec4(colour * value, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}