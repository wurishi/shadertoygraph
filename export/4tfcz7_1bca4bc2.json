{"ver":"0.1","info":{"id":"4tfcz7","date":"1503987332","viewed":152,"name":"Dance of the charges","username":"zardoru","description":"An electric-field inspired shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float wavy(float v)\n{\n    return 0.8 * abs(cos(v)) + 0.2;\n}\n\nfloat particleEF(vec2 origin, float charge, vec2 uv)\n{\n    vec2 tmp = origin - uv;\n    float modsqr = dot(tmp, tmp);\n    return charge / modsqr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord.xy / iResolution.xy - .5 ) * 2.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float _angle = iTime / 3.;\n    mat2 rot = mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n    \n    uv = rot * uv;\n    \n    float dx = sin(iTime);\n    float ampl = 0.7;\n    // two particles\n    // part1\n    vec2 p1 = vec2(0, ampl + ampl * dx);\n    // part2\n    vec2 p2 = vec2(0, -ampl - ampl * dx);\n    // part3\n    vec2 p3 = vec2(ampl + ampl * dx, 0);\n    // part 4\n    vec2 p4 = vec2(-ampl - ampl * dx, 0);\n    \n    float cFlair = sin(iTime * 0.2) * 0.2 + 0.8;\n    // a sine for flair\n   \tfloat E1 = particleEF(p1, 1. * cFlair, uv);\n    float E2 = particleEF(p2, -1. * cFlair, uv);\n    float E3 = particleEF(p3, -1. * -cFlair, uv);\n    float E4 = particleEF(p4, 1. * -cFlair, uv);\n    \n    vec4 c1 = vec4(0.3, 0.2, 0.3, 1.);\n    vec4 c2 = vec4(0.2, 0.4, 0.5, 1.);\n    vec4 c3 = vec4(0.5, 0.1, 0.5, 1.);\n    vec4 c4 = vec4(0.1, 0.5, 0.3, 1.);\n    vec4 colorsum = abs(E1) * c1 + \n        \t\t\tabs(E2) * c2 + \n        \t\t\tabs(E3) * c3 + \n        \t\t\tabs(E4) * c4;\n    float elecField = wavy(E1 + E2 + E3 + E4);\n\tfragColor = colorsum * elecField;\n}","name":"Image","description":"","type":"image"}]}