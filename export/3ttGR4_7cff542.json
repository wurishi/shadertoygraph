{"ver":"0.1","info":{"id":"3ttGR4","date":"1575749607","viewed":195,"name":"Twisted graphene","username":"vegardno","description":"Two hexagonal grids overlaid at a slight angle","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["grid","interference","interference","moire","hexagon","hexagonalgrid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Original: https://www.shadertoy.com/view/Xd2GR3\n// Inspired by: https://www.quantamagazine.org/how-twisted-graphene-became-the-big-thing-in-physics-20190430\n\n#define AA 2\n\n// { 2d cell id, distance to border, distnace to center )\nvec4 hexagon( vec2 p ) \n{\n\tvec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n\t\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n    // distance to borders\n\tfloat e = dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) );\n\n\t// distance to center\t\n\tp = vec2( q.x + floor(0.5+p.y/1.5), 4.0*p.y/3.0 )*0.5 + 0.5;\n\tfloat f = length( (fract(p) - 0.5)*vec2(1.0,0.85) );\t\t\n\t\n\treturn vec4( pi + ca - cb*ma, e, f );\n}\n\nvec2 rot(in vec2 p, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c) * p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int mm=0; mm<AA; mm++ )\n    for( int nn=0; nn<AA; nn++ )\n    {\n        vec2 off = vec2(mm,nn)/float(AA);\n        vec2 uv = (fragCoord+off)/iResolution.xy;\n        vec2 pos = (-iResolution.xy + 2.0*(fragCoord+off))/iResolution.y;\n    #else    \n    {\n        vec2 uv = fragCoord/iResolution.xy;\n        vec2 pos = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    #endif\n\n        float d0 = hexagon(20.0*pos + .5*iTime).z;\n        float d1 = hexagon(rot(20.0*pos, radians(10.) * sin(radians(15.) * iTime))  + .5*iTime).z;\n        float d = min(d0, d1);\n\n        vec3 col = vec3(1, 1, 1);\n        col *= smoothstep( 0.02, 0.04, d );\n\n        col *= pow( 16.0*uv.x*(1.0-uv.x)*uv.y*(1.0-uv.y), 0.1 );\n\n        tot += col;\n\t}\t\n \t#if AA>1\n    tot /= float(AA*AA);\n    #endif\n        \n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}