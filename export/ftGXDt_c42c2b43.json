{"ver":"0.1","info":{"id":"ftGXDt","date":"1641479640","viewed":97,"name":"Ambient gradient animation","username":"ZachSaucier","description":"A quickly thrown together demo to celebrate me getting a new job at Stripe.\nBasically a fork of https://www.shadertoy.com/view/lscGDr","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gradient","ambient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gradient correction comes from https://www.shadertoy.com/view/lscGDr\n\n#define SRGB_TO_LINEAR(c) pow((c), vec3(2.2))\n#define LINEAR_TO_SRGB(c) pow((c), vec3(1.0 / 2.2))\n#define SRGB(r, g, b) SRGB_TO_LINEAR(vec3(float(r), float(g), float(b)) / 255.0)\n\n#define PI 3.14192\n\nconst vec3 COLOR0 = SRGB(255, 0, 114);\nconst vec3 COLOR1 = SRGB(197, 255, 80);\n\nconst float r = 0.3;\nconst float rOffset = 0.05;\n  \nconst float rotationTimeScaler = 0.1;\nconst float colorTimeScaler = 0.3;\n\n// Gradient noise from Jorge Jimenez's presentation:\n// http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare\nfloat gradientNoise(in vec2 uv)\n{\n    const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);\n    return fract(magic.z * fract(dot(uv, magic.xy)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  // vec2 a = 0.1 * iResolution.xy; // First gradient point.\n  // vec2 b = iResolution.xy; // Second gradient point.\n  \n  float rotTime = iTime * rotationTimeScaler;\n  float colorTime = iTime * colorTimeScaler;\n  \n  float aR = r + rOffset * sin(iTime * 0.7); // Add some variance to the circle that it's following\n  float aX = (0.5 - aR * sin(rotTime)) * iResolution.x;\n  float aY = (0.5 - aR * cos(rotTime)) * iResolution.y;\n  vec2 a = vec2(aX, aY);\n  \n  float bR = r + rOffset * sin(iTime * 0.8); \n  float bX = (0.5 - bR * sin(rotTime + PI)) * iResolution.x;\n  float bY = (0.5 - bR * cos(rotTime + PI)) * iResolution.y;\n  vec2 b = vec2(bX, bY);\n\n  // Calculate interpolation factor with vector projection.\n  vec2 ba = b - a;\n  float t = dot(fragCoord - a, ba) / dot(ba, ba);\n  // Saturate and apply smoothstep to the factor.\n  t = smoothstep(0.0, 1.0, clamp(t, 0.0, 1.0));\n  // Interpolate.\n\n  vec3 color0 = 0.5 + 0.5*cos(colorTime+COLOR0.xyx+vec3(0,2,4));\n  vec3 color1 = 0.5 + 0.5*cos(colorTime+COLOR1.xyx+vec3(0,2,4));\n\n  vec3 color = mix(color0, color1, t);\n\n  // Convert color from linear to sRGB color space (=gamma encode).\n  color = LINEAR_TO_SRGB(color);\n\n  // Add gradient noise to reduce banding.\n  color += (1.0/255.0) * gradientNoise(fragCoord) - (0.5/255.0);\n\n  fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}