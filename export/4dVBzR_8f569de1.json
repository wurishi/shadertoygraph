{"ver":"0.1","info":{"id":"4dVBzR","date":"1527457315","viewed":193,"name":"My sad attempt at ray tracing","username":"chao_mu","description":"My sad attempt to convert the following algorithm to GLSL: https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/ray-triangle-intersection-geometric-solution","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","simple","scratchpixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.00001\n\nstruct Triangle {\n\tvec3 v0;\n    vec3 v1;\n    vec3 v2;\n};\n\nstruct Ray {\n\tvec3 origin;\n    vec3 dir;\n};\n    \n// compute the normal of the triangle.\n// This is the vector orthogonal to the plane.\nvec3 triangleNormal(Triangle t) {\n\treturn cross(t.v1 - t.v0, t.v2 - t.v0);\n}\n    \n\nbool isOutside(vec3 N, vec3 P, vec3 v0, vec3 v1) {\n    vec3 edge = v0 - v1;\n    vec3 C = cross(edge, P - v1);\n    \n    return dot(N, C) < 0.;\n}\n\nbool intersectTriangle(Ray ray, Triangle obj) {\n    vec3 N = normalize(triangleNormal(obj));\n    \n    // If the triangle's plane is parallel with the ray, then \n    // they do not intersect.\n    // (The dot product of two orthogonal/perpendicular vectors is zero.)\n    float nDotDir = dot(N, ray.dir);\n    if (abs(nDotDir) < EPSILON) {\n        return false;\n    }\n\n    // Intersection distance to the plane\n    float d = dot(N, obj.v0);\n    float t = (dot(N, ray.origin) + d) / nDotDir;\n    \n    // If obect is in the opposite direction of the plane...\n    if (t < 0.) {\n        return false;\n    }\n    \n    // Intersection to the point of the object\n    vec3 P = ray.origin + t * ray.dir;\n    \n    return !(isOutside(N, P, obj.v1, obj.v0) || \n             isOutside(N, P, obj.v2, obj.v1) ||\n             isOutside(N, P, obj.v0, obj.v2));\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;;\n\tuv *= iResolution.x / iResolution.y;\n        \n    Ray ray;\n    ray.origin = vec3(0, 0, 1);\n    ray.dir = normalize(vec3(uv.x, uv.y, 1));\n    \n    Triangle obj;\n    obj.v0 = vec3(-.5, 0., 0.);\n    obj.v1 = vec3(0., .5, 0.);\n    obj.v2 = vec3(.5, 0., 0.);\n    \n    vec3 col = vec3(0.);\n    if (intersectTriangle(ray, obj)) {\n        col = vec3(1., 0., 0.);\n    }\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}