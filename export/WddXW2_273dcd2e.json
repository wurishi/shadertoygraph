{"ver":"0.1","info":{"id":"WddXW2","date":"1710166805","viewed":16,"name":"Contrast Ratio Prototype","username":"zel","description":"Prototype used for granted patent publication","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["research"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sample used for patent https://patents.google.com/patent/US10878540B1/en?inventor=Karen+Elaine+Stevens\n// Released under EA's Patent Pledge, free to use by all.\n\n#define CONTRAST_RATIO 3.5\n#define LINE_THICKNESS 2.0\n\nfloat CalcLumComponent(float channel)\n{\n\tfloat isLarge = clamp(1.0+floor(channel-0.03928),0.0,1.0);\n    return  (1.0-isLarge)*channel/12.92+isLarge*(pow((channel+0.55)/1.0555,2.4));\n\n}\n\nfloat CalcLum(vec3 color)\n{\n   float lum = CalcLumComponent(color.r)*0.2126;\n   lum += CalcLumComponent(color.g)*0.7152;\n   lum += CalcLumComponent(color.b)*0.0722;\n    \n   return lum;\n}\n\nvec3 RatioBox(vec2 uv, vec3 color, float ratio, float thickness)\n{\n    float lum1 = CalcLum(texture(iChannel0, uv + vec2(-1.0*thickness / iResolution.x, -1.0*thickness / iResolution.y)).rgb);\n\tfloat lum2 = CalcLum(texture(iChannel0, uv + vec2(thickness / iResolution.x, thickness / iResolution.y)).rgb);    \n    float lum3 = CalcLum(texture(iChannel0, uv + vec2(-1.0*thickness / iResolution.x, thickness / iResolution.y)).rgb);\n\tfloat lum4 = CalcLum(texture(iChannel0, uv + vec2(thickness / iResolution.x, -1.0*thickness / iResolution.y)).rgb);  \n  \tfloat lum5 = CalcLum(texture(iChannel0, uv + vec2(0.0 / iResolution.x, -1.0*thickness / iResolution.y)).rgb);    \n  \tfloat lum6 = CalcLum(texture(iChannel0, uv + vec2(0.0 / iResolution.x, thickness / iResolution.y)).rgb);   \n  \tfloat lum7 = CalcLum(texture(iChannel0, uv + vec2(0.0 / iResolution.x, 0.0 / iResolution.y)).rgb);   \n  \tfloat lum8 = CalcLum(texture(iChannel0, uv + vec2(-1.0*thickness / iResolution.x, 0.0 / iResolution.y)).rgb);   \n  \tfloat lum9 = CalcLum(texture(iChannel0, uv + vec2(thickness / iResolution.x, 0.0 / iResolution.y)).rgb);       \n    \n    float minlum = min(lum9,min(min(min(lum1,lum2),min(lum3,lum4)),min(min(lum5,lum6),min(lum7,lum8))));\n    float maxlum = max(lum9,max(max(max(lum1,lum2),max(lum3,lum4)),max(max(lum5,lum6),max(lum7,lum8))));\n    float isContrast = clamp(floor((((maxlum+0.05)/(minlum+0.05))-ratio)),-1.0,0.0)+1.0;\n    \n    color = color*(1.0-isContrast)+vec3(1.0,0.0,1.0)*isContrast;\n\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color;\n\tcolor.rgb = texture(iChannel0,uv).rrr;\n    \n    color.rgb = RatioBox(uv, color, CONTRAST_RATIO,LINE_THICKNESS);\n\tfragColor = vec4(color.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}