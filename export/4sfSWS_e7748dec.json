{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec3 color1 = vec3(1.0,1.0,1.0);\nvec3 color2 = vec3(0.8,0.25,0.25);\nfloat shadow = 0.75;\nfloat reflection = 0.5;\n\nfloat movespeed = 10.0;\n\nvec3 trans(vec3 p)\n{\n\treturn mod(p, 4.0)-2.0;\n}\n \nfloat distanceFunction(vec3 pos)\n{\n\tvec3 p = trans(pos);\n\tvec3 a = vec3(-0.5,0.0,0.0);\n\tvec3 b = vec3(0.5,0.0,0.0);\n\tfloat r = 0.5;\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n \nvec3 getNormal(vec3 p)\n{\n\tconst float d = 0.0001;\n\treturn\n\tnormalize\n\t(\n\t\tvec3\n\t\t(\n\t\t\tdistanceFunction(p+vec3(d,0.0,0.0))-distanceFunction(p+vec3(-d,0.0,0.0)),\n\t\t\tdistanceFunction(p+vec3(0.0,d,0.0))-distanceFunction(p+vec3(0.0,-d,0.0)),\n\t\t\tdistanceFunction(p+vec3(0.0,0.0,d))-distanceFunction(p+vec3(0.0,0.0,-d))\n\t\t)\n\t);\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 pos = (fragCoord.xy*2.0 -iResolution.xy) / iResolution.y;\n \n\tvec2 mousepos = (iMouse.xy*2.0 - iResolution.xy) / iResolution.y;\n\t\n\tvec3 camPos = vec3(0.0, 0.0, -iTime*movespeed);\n\tvec3 camDir = normalize(vec3(mousepos.xy, -1.0));\n\tvec3 camUp = vec3(0.0, 1.0, 0.0);\n\tvec3 camSide = cross(camDir, camUp);\n\tfloat focus = 1.8;\n \n\tvec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);\n \n\tfloat t = 0.0, d;\n\tvec3 posOnRay = camPos;\n \n\tfor(int i=0; i<80; ++i)\n\t{\n\t\td = distanceFunction(posOnRay);\n\t\tt += d;\n\t\tposOnRay = camPos + t*rayDir;\n\t\tif(abs(d)<0.0005) break;\n\t}\n\t\n\t\n\tvec3 normal = getNormal(posOnRay);\n\t\n\tvec3 color;\n\t\t\n\tif(mod(posOnRay.x,4.0)>2.0){\n\t\tcolor = color1;\t\n\t}else{\n\t\tcolor = color2;\t\n\t}\n\t\n\tcolor *= (max(normal.y,0.0)*shadow)+(1.0-shadow);\n\t\n\tcolor = vec3(1.0)-(vec3(1.0)-color)*(vec3(1.0)-vec3(1.0-dot(-rayDir,normal))*reflection);\n\t\n\tfloat dist = length(posOnRay-camPos);\n\n\tcolor = mix(vec3(1.0),color,1.0/(dist*0.25+1.0));\n  \n\tif(abs(d) < 0.001)\n\t{\n\t\tfragColor = vec4(color, 1.0);\n\t}else{\n\t\tfragColor = vec4(1.0);\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfSWS","date":"1406147584","viewed":221,"name":"Raymarcing Capsule Test","username":"Dipper_168","description":"My first scene with raymarching.\nIt's very difficult for me to understand... but really interesting :)\nI borrowed some code from sites below.\nhttp://www.demoscene.jp/?p=811\nhttps://iquilezles.org/articles/distfunctions/distfunctions.htm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarcing","capsule"],"hasliked":0,"parentid":"","parentname":""}}