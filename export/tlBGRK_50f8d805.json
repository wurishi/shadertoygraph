{"ver":"0.1","info":{"id":"tlBGRK","date":"1560216499","viewed":143,"name":"XYZ Plane distance function","username":"edo_m18","description":"XYZ Plane distance function","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["plane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p)\n{\n    p = abs(p);\n    \n    vec3 d = vec3(0.5, 0.5, 3.8) - p;\n    return max(d.x, max(d.y, d.z));\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(0.01, 0);\n    \n    float d = map(p);\n    vec3 n = d - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx));\n    \n    return normalize(n);\n}\n\nmat3 camera(vec3 ro, vec3 ta)\n{\n    vec3 up = vec3(0, 1, 0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec2 mo = (iMouse.xy / iResolution.xy) + 1.0;\n    vec3 ro = vec3(sin(iTime), 0, 9.);\n    vec3 ta = vec3(0, 0, 1.);\n    \n    vec3 p = ro;\n    \n    vec3 ray = camera(ro, ta) * normalize(vec3(uv, 1.5));\n    \n    float d = 0., t = 0.;\n    int march = 0;\n    const int max_march = 128;\n    for (int i = 0; i < max_march; i++)\n    {\n        d = map(p);\n        march = i;\n        \n        if (d < 0.01) break;\n        \n        p += ray * d;\n        t += d;\n    }\n    \n    if (d < 0.01)\n    {\n        vec3 light = normalize(vec3(1, 1, 2));\n        vec3 n = getNormal(p);\n        float diff = clamp(dot(light, n), 0.1, 1.0);\n        \n        col = vec3(diff);\n    }\n    \n    vec3 fog = vec3(0.5, 0.8, 1.7) * t * 0.01;\n    float fog2 = pow((1.0 / float(max_march)) * float(march), 2.);\n\n    fragColor = vec4(col,1.0) * fog2 + fog.rgbr;\n}","name":"Image","description":"","type":"image"}]}