{"ver":"0.1","info":{"id":"DsBBD1","date":"1689994654","viewed":39,"name":"Geometric Capillary Wave?","username":"SurfYerp","description":"My first shader code!\nMade following Kishimisu's tutorial and springkling some small alterations on their code.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["neon","capillarylike"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 vec3Pallete(in float t)\n{\n//[[0.500 0.500 0.500] [0.500 0.500 0.500] [1.000 1.000 1.000] [0.000 0.333 0.667]]\n//[[0.500 -0.282 0.500] [0.468 1.638 0.468] [3.138 0.998 1.388] [0.528 0.078 0.667]]\n    vec3 a = vec3(0.500, -0.282, 0.500);\n    vec3 b = vec3(0.468, 1.638, 0.468);\n    vec3 c = vec3(3.138, 0.998, 1.388);\n    vec3 d = vec3(0.528, 0.078, 0.667);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // uv = (uv - 0.5) * 2.0; // simplified as uv = uv * 2.0 - 1.0\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y; // Multiply x component of uv by current aspect ratio of canvas \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 3.0; i++)\n    {\n        // Apply fractals on canvas\n        uv = fract(uv * 1.7) - 0.5;\n    \n        float d = length(uv) * exp(-length(uv0)) + i * 1.0;\n        vec3 color = vec3Pallete(length(uv0) + i * 1.5 + iTime * 0.25);\n    \n        d = abs(tan(d * 6.0 + iTime) / 3.0);\n        d = 0.01/d;\n    \n        finalColor += color * d;\n    }\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}