{"ver":"0.1","info":{"id":"4fSGRc","date":"1720386593","viewed":50,"name":"Raindrops ripples","username":"Famousghost","description":"Simple raindrops created by shallow water equation and random distribution","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raindropsshallowwaterequationrandom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec2 ripplesDir = texture(iChannel0, uv).ab;\n    vec3 col = texture(iChannel1, uv + ripplesDir * 0.05f).rgb;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1417\n\n#define SIZE 256.0\n#define RIPPLES_STRENGTH 10.0\n#define RIPPLES_INTENSITY 1.0 //<1, 100>\n\n#define DENSITY 12.0\n\nvec2 randomPos(vec2 uv)\n{\n    float angle = fract(sin(dot(uv, vec2(19.42343, 25.341245f))) * 42311.71234f);\n    \n    return vec2(cos(angle) * 0.5f, sin(angle)) * 0.5f + 0.5f;\n}\n\nfloat damping = 0.99f;\n\n\n\nfloat sdCircle(vec2 uv, vec2 pos, float radius)\n{\n    return length(uv - pos) - radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5f * iResolution.xy) / iResolution.y;\n    vec2 mousePos = (iMouse.xy - 0.5f * iResolution.xy) / iResolution.y;\n    \n    vec2 id = floor(uv * SIZE);\n    \n    vec2 centerUv = fragCoord / iResolution.xy;\n    float prevValue = texture(iChannel0, centerUv).g;\n    float value = texture(iChannel0, centerUv).r;\n\n    \n    vec2 leftUv = (fragCoord - vec2(1.0f, 0.0f)) / iResolution.xy;\n    vec2 rightUv = (fragCoord + vec2(1.0f, 0.0f)) / iResolution.xy;\n    vec2 upUv = (fragCoord + vec2(0.0f, 1.0f)) / iResolution.xy;\n    vec2 downUv = (fragCoord - vec2(0.0f, 1.0f)) / iResolution.xy;\n    \n    float left = texture(iChannel0, leftUv).r;\n    float right = texture(iChannel0, rightUv).r;\n    float up = texture(iChannel0, upUv).r;\n    float down = texture(iChannel0, downUv).r;\n    \n    float circle = 0.0f;\n    if(iMouse.z > 0.0f)\n    {\n        float circle = sdCircle(uv, mousePos, 0.02f);\n        value += 1.0f - step(0.0f, circle);\n    }\n    \n    \n    vec2 fuv = fract(uv * SIZE);\n    vec2 rndPos = randomPos(fuv + iTime);\n    vec2 chooseOneRndPos = randomPos(id + iTime);\n    float ripplesIntensityFactor = (mod(iTime, 50.0f) + 5.0f) * 0.001f;\n    if(distance(chooseOneRndPos, rndPos) <= 0.0f)\n    {\n        circle = sdCircle(fuv, chooseOneRndPos, ripplesIntensityFactor);\n        value += (1.0f - step(0.0f, circle)) * RIPPLES_STRENGTH;\n    }\n\n\n    prevValue += (-2.0f * value + right + left) * 0.25f;\n    prevValue += (-2.0f * value + up + down) * 0.25f;\n    value += prevValue;\n    value *= damping;\n\n    fragColor = vec4(value, prevValue, (right - left) / 2.0f, (up - down) / 2.0f);\n}","name":"Buffer A","description":"","type":"buffer"}]}