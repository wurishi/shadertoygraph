{"ver":"0.1","info":{"id":"7dlSD2","date":"1621895896","viewed":57,"name":"koch fractal","username":"noodlechop","description":"learning to draw koch fractals","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define M_PI 3.14159265359\n\nfloat segment(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\n\nvec3 mirror(vec2 p, vec2 n, vec2 o){\n    float d = dot(p + o, n);\n    return vec3(p-2.0*n*min(0.0, d), d);\n}\n\nvec3 mirror(vec2 p, vec2 n){\n    return mirror(p, n, vec2(0.0));\n}\n\nvec2 N(float ang){\n    return vec2(sin(ang), cos(ang));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 uv_orig = uv;\n    vec2 mouse = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    // Time varying pixel color\n    float t = 2.0/iResolution.y;\n    float scale = 0.25*cos(iTime*1.23456789) + 1.0;\n    scale *= 0.75;\n\n    vec2 n1 = N(sin(-iTime/51.0)*2.0*M_PI);\n    float ang = sin(0.05337*iTime+mouse.x)*2.0*M_PI/3.0;\n    vec2 n2 = N(ang);\n    \n    vec2 n3 = N(0.01234*iTime);\n    uv -= 2.0*n3*dot(n3, uv);\n    \n    uv *= 1.25*scale;\n    uv += 0.25*N(0.1759*iTime);\n    uv.y -= 0.5*tan(M_PI/6.0);\n    uv = mirror(uv, -n1).xy;\n    vec3 uvd = mirror(uv, N(M_PI/6.0), vec2(0.5, 0.0));\n    uv = uvd.xy;\n    float l = smoothstep(2.0*t, 0.0, abs(uvd.z));\n    \n    \n    \n    uv.x += 0.5;\n    float s0 = scale;\n    for (int i=0; i<8; i++){ \n        uv *= 3.0;\n        uv.x -= 1.5;\n        uv = mirror(uv, n1).xy;\n        uv.x -= 0.5;\n        uv = mirror(uv, n2).xy;\n        \n        scale *= 3.0;\n    }    \n    \n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx*16.0/(0.5*scale+ scale*pow(cos(0.14142*iTime),2.0))+vec3(0,2,4));\n    //col += smoothstep(t, 0.0, segment(uv_orig, vec2(0.0,0.0), n));\n    //col += smoothstep(2.0*t, 0.0, segment(uv, vec2(210.0,21.0), vec2(-210.0,-21.0)));\n    //col += smoothstep(t, 0.0, segment(uv, vec2(1.0,0.0), vec2(1.0,1.0)));\n    //col += smoothstep(t, 0.0, segment(uv, vec2(-1.0,0.0), vec2(1.0,0.0))/scale);\n    for (float j=-10.0; j<10.0; j+= 0.05){\n        col += smoothstep(t, 0.0, segment(uv, vec2(-100.0,j), vec2(100.0,j))/scale);\n    }\n    col+=l;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}