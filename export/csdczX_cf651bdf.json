{"ver":"0.1","info":{"id":"csdczX","date":"1695514510","viewed":34,"name":"Fork Velocity a tytr 066","username":"tytr","description":"Trying to find creative ways to use physics equations for shaders. The obvious approach with velocity is for position to be x and time to be t. Threw in sin for periodic oscillations as this hits a limit quickly. Now to figure out deltas?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["physics","periodic","velocity","creativecoding"],"hasliked":0,"parentid":"cdtczX","parentname":"Velocity as a shader, approach 1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float x = length(uv);\n    float v = x / tan(iTime);\n    \n    fragColor = vec4(vec3(v), 1.0);\n}","name":"Image","description":"","type":"image"}]}