{"ver":"0.1","info":{"id":"Ws2cWK","date":"1588800934","viewed":59,"name":"561_Rabbitz_0","username":"mrabbitz","description":"Cornell Box, Post-Processed Depth of Field, Ambient Occlusion.  To turn animated DOF approximation on, change bool DOF to true at the top of \"Image\"","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Change this to true for animated DOF approximation\nbool DOF = false;\n\n// from https://www.shadertoy.com/view/wsB3RK\n// from https://www.shadertoy.com/view/XdfGDH\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // from https://www.shadertoy.com/view/XdfGDH\n    const int mSize = 11;\n    const int kSize = (mSize-1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 20.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 unblurredColor = texture(iChannel0, uv);\n\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n    \n    float vignette = smoothstep(1.75, 0.0, length((2.0 * uv) - vec2(1.0)));\n    fragColor = mix(vec4(0.0, 0.0, 0.1, 1.0), fragColor, vignette);\n    \n    //fragColor = vec4(unblurredColor.a, unblurredColor.a, unblurredColor.a, 1.0);\n    if (!DOF)\n    {\n    \tfragColor = unblurredColor;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float AO_DIST = 0.15;\nconst float FIVETAP_K = 2.0;\n\n#define LIGHT_POS vec3(0.0, 2.45, 0.0)\n\nstruct Intersection\n{\n    vec3 p;\t\t// point of intersection in world space\n    float t;\t// t-value of ray to p\n    int objHit;\t// assign every object in scene a unique ID integer\n    vec3 color;\t// color of surface\n};\n\nvec3 rotateX(vec3 p, float a) {\n    return vec3(p.x, cos(a) * p.y - sin(a) * p.z, sin(a) * p.y + cos(a) * p.z);\n}\n    \n// Takes in direction, rotates it by a radians\n// result of applying a y rotation matrix to the vec3\n// rotates about y-axis\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// b consists of width, height, and depth VECTORS (center to edge)\nfloat BoxSDF(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n// point, radius, center\nfloat SphereSDF(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nfloat PlaneSDF(vec3 p, vec4 n)\n{\n    return dot(p,n.xyz)+n.w;\n}\n\n#define BACK_WALL_SDF BoxSDF(pos + vec3(0.0,2.5,5.0), vec3(5.0,5.0,0.01))\n#define LEFT_WALL_SDF BoxSDF(rotateY(pos + vec3(-5.0,2.5,0.0), 3.14159 * 0.5), vec3(100.0,100.0,0.01))\n#define RIGHT_WALL_SDF BoxSDF(rotateY(pos + vec3(5.0,2.5,0.0), 3.14159 * 0.5), vec3(100.0,100.0,0.01))\n#define CEILING_SDF BoxSDF(rotateX(pos  + vec3(0.0,-2.5,0.0), 3.14159 * 0.5), vec3(100.0,100.0,0.01))\n#define FLOOR_SDF BoxSDF(rotateX(pos + vec3(0.0,7.5,0.0), 3.14159 * 0.5), vec3(100.0,100.0,0.01))\n#define TALL_BOX_SDF BoxSDF(rotateY(pos + vec3(-2.0, 4.5, 3.0), 27.5 * 3.14159 / 180.0), vec3(1.5,3.0,1.5))\n#define SMALL_BOX_SDF BoxSDF(rotateY(pos + vec3(2., 6.0, 0.75), -17.5 * 3.14159 / 180.0), vec3(1.5))\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SMALL_BOX 6\n\nvec3 ComputeMaterial(int objHit, vec3 pos, vec3 nor, vec3 light, vec3 view)\n{\n    float lambert = dot(nor, light) + 0.2;\n    switch(objHit)\n    {\n        case BACK_WALL:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case CEILING:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case FLOOR:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case TALL_BOX:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case SMALL_BOX:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n    \tcase LEFT_WALL:\n    \treturn vec3(0.63, 0.065, 0.05) * lambert;\n    \tbreak;\n    \tcase RIGHT_WALL:\n    \treturn vec3(0.14, 0.45, 0.091) * lambert;\n    \tbreak;\n    \tcase -1:\n    \t// Background\n    \treturn vec3(0.0);\n    \tbreak;\n\t}\n\treturn vec3(1.0);    \n}\n    \nfloat SceneSDF(vec3 pos, vec3 lightPos)\n{\n    float t = BACK_WALL_SDF;\n    t = min(t,LEFT_WALL_SDF);\n    t = min(t,RIGHT_WALL_SDF);\n    t = min(t,CEILING_SDF);\n    t = min(t,FLOOR_SDF);\n    t = min(t,TALL_BOX_SDF);\n    t = min(t,SMALL_BOX_SDF);\n    return t;\n}\n\nfloat shadowMap3D(vec3 pos)\n{\n    return SceneSDF(pos, vec3(0.0, 0.0, 0.0));\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k)\n{\n    float res = 1.0;\n    float t = min_t;\n    for (int i = 0; i < RAY_STEPS; ++i)\n    {\n        float m = shadowMap3D(origin + t * dir);\n        if(m < 0.0001)\n        {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nfloat shadow(vec3 dir, vec3 origin, float min_t)\n{\n    return softShadow(dir, origin, min_t, 6.0);\n}\n        \nfloat fiveTapAO(vec3 p, vec3 n, float k)\n{\n    float aoSum = 0.0;\n    for (float i = 0.0; i < 5.0; ++i)\n    {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - SceneSDF(p + n * i * AO_DIST, vec3(0.)));\n    }\n    return 1.0 - k * aoSum;\n}\n\nvec3 ComputeNormal(vec3 pos, vec3 lightPos) {\n    vec2 offset = vec2(0.0, 0.001);\n    return normalize( vec3( SceneSDF(pos + offset.yxx, lightPos) - SceneSDF(pos - offset.yxx, lightPos),\n                            SceneSDF(pos + offset.xyx, lightPos) - SceneSDF(pos - offset.xyx, lightPos),\n                            SceneSDF(pos + offset.xxy, lightPos) - SceneSDF(pos - offset.xxy, lightPos)\n                          )\n                    );\n}\n\nvoid SceneSDF(vec3 pos, out float t, out int objHit, vec3 lightPos)\n{\n    t = BACK_WALL_SDF;\n    objHit = BACK_WALL;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t)\n    {\n        t = t2;\n        objHit = LEFT_WALL;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t)\n    {\n        t = t2;\n        objHit = RIGHT_WALL;\n    }\n    if((t2 = CEILING_SDF) < t)\n    {\n        t = t2;\n        objHit = CEILING;\n    }\n    if((t2 = FLOOR_SDF) < t)\n    {\n        t = t2;\n        objHit = FLOOR;\n    }\n    if((t2 = TALL_BOX_SDF) < t)\n    {\n        t = t2;\n        objHit = TALL_BOX;\n    }\n    if((t2 = SMALL_BOX_SDF) < t)\n    {\n        t = t2;\n        objHit = SMALL_BOX;\n    }\n}\n                                                                           \nvoid RayMarch(vec3 origin, vec3 dir, out float t, out int objHit, vec3 lightPos)\n{\n    // starts slightly > 0\n    // so that if we march from a different point in the scene that isnt the camera\n    // we dont immediately intersect ourselves\n    t = 0.001;\n    // ray march not to a certain distance but for a certain number of iterations\n    for (int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        // minimum distance that pos is from all SDFs in the scene\n        float m;\n        SceneSDF(pos, m, objHit, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    // hit nothing\n    t = -1.0;\n    objHit = -1;\n}\n\nIntersection SceneIntersection(vec3 eye, vec3 dir, vec3 lightPos)\n{\n    float t;\n    int objHit;\n    // Marches along ray to find point of intersection\n    RayMarch(eye, dir, t, objHit, lightPos);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = ComputeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = ComputeMaterial(objHit, isect, nor, lightDir, normalize(eye - isect));\n        \n    return Intersection(isect, t, objHit, surfaceColor);\n}\n\nconst vec3 worldUp = vec3(0,1,0);\nvoid RayCast(vec2 ndc, out vec3 eye, out vec3 dir, out vec3 ref)\n{\n    eye = vec3(0.0, 0.5, 30.0);\n    ref = vec3(0.0, -2.5, 0.0);\n    \n    float len = tan(3.14159 * 0.08) * distance(eye, ref);\n   \n    vec3 H = normalize(cross(worldUp, ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    dir = normalize(p - eye);\n}\n\n// tells us how far the focal plane is along our forward vector\n#define FOCAL_LENGTH 32.0\n// dictates the distance both closer to and away from the focal plane\n// that we will interpolate b/t 0 blur and full blur.\n// gradiates to fully blurred at this number away from focal plane\n#define FOCAL_RANGE 10.0\n\n// mainImage: present in every single shader program on shadertoy\n// outputs: the fragment color for the fragment it is operating on\n// takes in: the pixel space coordinates of the fragment it is coloring\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // iResolution: width and height of screen in pixels (on bottom toolbar of image output)\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Convert to range -1 to 1 for x and y\n    // Normalized Device Coordinates w.r.t. the center of the screen being (0,0)\n    uv = (uv * 2.0) - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    vec3 eye, dir, ref;\n    int idx = 0;\n    for (float i = 0.0; i < 1.0; i += 0.5)\n    {\n        for (float j = 0.0; j < 1.0; j += 0.5)\n        {\n            RayCast(uv + vec2(i, j) / iResolution.xy, eye, dir, ref);\n            aaIsects[idx++] = SceneIntersection(eye, dir, LIGHT_POS);\n        }\n    }\n    \n    float distAlongCamZ = abs(dot(normalize(ref - eye), (aaIsects[0].p - eye)));\n    // distAlongCamZ - FOCAL_LENGTH\n    // what is the closes distance between our point of intersection and the focal plane\n    float focalLengthFactor = cos(iTime * 0.5) * 4.0;\n    if (abs(focalLengthFactor) < 2.0)\n    {\n        focalLengthFactor = 0.0;\n    }\n    float dofZ = min(1.0, abs(distAlongCamZ - (FOCAL_LENGTH + focalLengthFactor)) / FOCAL_RANGE);\n    dofZ = pow(dofZ, 0.5);\n    \n    float ao = fiveTapAO(aaIsects[0].p, ComputeNormal(aaIsects[0].p, vec3(0.0)), FIVETAP_K);\n                                                                          \n    vec3 avgColor = vec3(0.0);\n    for (int i = 0; i < 4; ++i)\n    {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.25;\n    avgColor *= ao;\n    \n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), dofZ);\n}","name":"Buffer A","description":"","type":"buffer"}]}