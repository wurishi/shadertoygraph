{"ver":"0.1","info":{"id":"flGfDw","date":"1664562015","viewed":192,"name":"Circle Grid SDF - Distance 2D","username":"MysteryPancake","description":"My implementation of a circle grid SDF","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","distancefield","grid","sdf","circle","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// My SDF circle grid implementation\nfloat sdCircleGrid(in vec2 position, in float radius) {\n\t// Calculate distance from 0.5 to position mod 1\n\treturn length(fract(position) - 0.5) - radius;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Normalized coordinates, ripped from Inigo Quilez\n\tvec2 p = (4.0 * fragCoord - iResolution.xy) / iResolution.y;\n\tvec2 m = (4.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\t\n\tfloat radius = 0.25 + sin(iTime * 2.0) * 0.25;\n\tfloat d = sdCircleGrid(p, radius);\n\n\t// Coloring, ripped from Inigo Quilez\n\tvec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-6.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(120.0 * d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n\tif (iMouse.z > 0.001) {\n\t\td = sdCircleGrid(m, radius);\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n\t}\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}