{"ver":"0.1","info":{"id":"ftdGzX","date":"1636474023","viewed":65,"name":"Path of the shader - 3.","username":"SOMATICBITS","description":"3. shader on the path to learning shaders.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["somaticbits"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n#define TAU 6.283183\n\nfloat dt(float sp, float off) {\n    return fract(iTime*sp+off);\n}\n\nmat2 rot(float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat square(vec2 uv) {\n    uv = abs(uv);\n    return max(uv.x, uv.y);;\n}\n\nfloat rnd(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898,18.233))));\n}\n\nfloat mirrorRnd(vec2 uv, vec2 direction) {\n    uv.x = abs(uv.x);\n    uv += direction;\n    return rnd(uv);\n}\n\nfloat ss(float shape, float size) {\n    float w = fwidth(shape);\n    return clamp(smoothstep(size+w,size-w,shape),0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    uv *= 4.;\n    uv += .5;\n    \n    // layout\n    vec2 guv = fract(uv)-.5;\n\n    vec2 id = floor(uv);\n    \n    \n    // animate    \n    guv *= rot(iTime);\n    \n    \n    // shapes\n    vec3 col = vec3(ss(square(vec2(guv.x,guv.y*pow(length(id)*dt(0.1,0.),2.)*length(id))),0.1));\n \n    col.r += clamp(cos(length(id*dt(0.1,0.))),0.,1.);\n\n    // Output to screen\n    fragColor = vec4(col,.9);\n}","name":"Image","description":"","type":"image"}]}