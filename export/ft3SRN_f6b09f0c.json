{"ver":"0.1","info":{"id":"ft3SRN","date":"1638760979","viewed":103,"name":"raymarch-go","username":"nelsonkuang","description":"customize raymarch","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference info\n// fractal pyramid - https://www.shadertoy.com/view/tsXBzS\n\nvec3 palette(float d) {\n  return mix(vec3(0.2, 0.7, 0.9), vec3(1., 0., 1.), d);\n}\n\nvec2 rotate(vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return p * mat2(c, s, -s, c);\n}\n\nfloat map(vec3 p) {\n  for(int i = 0; i < 14; ++i) {\n    float t = iTime * 0.2;\n    p.xz = rotate(p.xz, t);\n    p.xy = rotate(p.xy, t * 1.89);\n    p.xz = abs(p.xz);\n    p.xz -= .5;\n  }\n  return dot(sign(p), p) / 5.;\n}\n\nvec4 rm(vec3 ro, vec3 rd) { // ray marching\n  float t = 0.;\n  vec3 col = vec3(0.);\n  float d;\n  for(float i = 0.; i < 30.; i++) {\n    vec3 p = ro + rd * t;\n    d = map(p) * .5;\n    col += palette(length(p) * .1) / (400. * (d));\n    t += d;\n  }\n  return vec4(col, 1. / (d * 100.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy; // Normalized coordinates\n  uv -= 0.5; // -1 to 1\n  uv.x *= iResolution.x / iResolution.y; // aspect ratio\n\n  uv *= 10.; // -2 to 2\n\n  vec3 ro = vec3(0., 0., 0.); // Ray origin\n  vec3 rd = normalize(vec3(uv, 1.)); // Ray direction\n  vec4 c = rm(ro, rd); // Color\n  fragColor = vec4(c.xyz, 1.);\n}","name":"Image","description":"","type":"image"}]}