{"ver":"0.1","info":{"id":"tlXGW4","date":"1556306862","viewed":301,"name":"Regular vs. Reuleaux Polygons","username":"tpfto","description":"Transition between regular and Reuleaux polygons, using their polar equations.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","geometry","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Demonstrating the polar equations for a regular polygon (http://math.stackexchange.com/a/41954)\n// and a Reuleaux polygon (https://tpfto.wordpress.com/2019/03/07/on-a-polar-equation-for-reuleaux-polygons-and-how-to-roll-them/)\n// Code adapted from The Book of Shaders (https://thebookofshaders.com/07/)\n\n#define PI 3.14159265359\n\n// uncomment to see a deformation instead\n// #define DEFORM\n\nfloat regular( int n, float a )\n{\n    float ang = PI/float(n);\n\n    return cos(ang)/cos(a - ang * (2.0 * floor(0.5 * a/ang) + 1.0));\n}\n \nfloat reuleaux( int n, float a )\n{\n    float ang = PI/float(n);\n    float cc = cos(a - 2.0 * ang * floor(0.5 * (a - PI)/ang + 0.5));\n\n    return cc + sqrt(1.0 + 2.0 * cos(ang) + cc * cc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord.xy/min(iResolution.x,iResolution.y);\n    float tw = 0.5 + 0.5*cos(iTime);\n    \n    // triangle\n    vec2 pos1 = vec2(0.4, 0.5) - uv;\n    float r1 = length(pos1) * 2.5;\n    float a1 = PI - atan(pos1.y, pos1.x);\n    float c1 = 0.0, c2 = 0.0;\n\n    float rgp1 = regular(3, a1);\n    float rlp1 = reuleaux(3, a1);\n\n    // mds2's suggestion\n    #ifdef DEFORM\n    \n    float rp1 = mix(rlp1, rgp1, tw);\n    \n    c1 = 1. - smoothstep(0.02 + rp1, rp1, r1);\n\n    #else // original version\n    \n    float rg1 = 1. - smoothstep(rgp1, 0.02 + rgp1, r1);\n    float rl1 = 1. - smoothstep(rlp1, 0.02 + rlp1, r1);\n    \n    c1 = smoothstep(rg1, rl1, tw);\n    \n    #endif\n    \n    // pentagon\n    vec2 pos2 = vec2(1.3, 0.5) - uv;\n    float r2 = length(pos2) * 2.5;\n    float a2 = PI - atan(pos2.y, pos2.x);\n\n    float rgp2 = regular(5, a2);\n    float rlp2 = reuleaux(5, a2);\n\n    #ifdef DEFORM\n\n    float rp2 = mix(rlp2, rgp2, tw);\n    \n    c2 = 1. - smoothstep(0.02 + rp2, rp2, r2);\n    \n    #else\n\n    float rg2 = 1. - smoothstep(rgp2, 0.02 + rgp2, r2);\n    float rl2 = 1. - smoothstep(rlp2, 0.02 + rlp2, r2);\n    \n    c2 = smoothstep(rg2, rl2, tw);\n\n    #endif\n\n    // Output to screen\n    fragColor = vec4(mix(vec3(0.368, 0.507, 0.71), vec3(1.0), c1 + c2 - 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}