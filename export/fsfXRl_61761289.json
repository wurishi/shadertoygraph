{"ver":"0.1","info":{"id":"fsfXRl","date":"1619285822","viewed":51,"name":"Magic Octahedron","username":"ron1x1","description":"Task 2 for Computer Graphics course","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","raymarching","water","octahedron","msu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define\tAA 2\n#define HASHSCALE 0.1031\n\nconst float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(2, 1.2, -7);\n\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.5, 0.7, 0.2);\nconst vec3 LIGHT2_POS = vec3(1.5, 1, -0.5);\nconst float LIGHT2_RADIUS = 0.3;\nconst vec3 LIGHT2_COLOR = vec3(1, 0.4, 0.5);\n\nconst float CYLINDER_RAD = 0.75;\nconst float CYLINDER_HEIGTH = 0.3;\nconst float CYLINDER_POS = -1.3;\n\nconst float CUBE_SIZE = 0.2;\nconst vec3 CUBE_POS = vec3(0, 0, 0);\n\nvec3 POSITIONS[6] = vec3[6](\n                            vec3(1, 0, 0),\n                            vec3(-1, 0, 0),\n                            vec3(0, 1, 0),\n                            vec3(0, -1, 0),\n                            vec3(0, 0, 1),\n                            vec3(0, 0, -1)\n                           );\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float AIR_k = 1.0;\nconst float GLASS_k = 1.5;\nconst float WATER_k = 1.33;\n\nvec3 randDir;\n\nfloat pow2(float a){\n    return a * a;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE); \n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 fade(vec3 t) { return t*t*t*(t*(6.*t-15.)+10.); }\n\nfloat grad(float hash, vec3 p) \n{\n    int h = int(1e4*hash) & 15;\n\tfloat u = h<8 ? p.x : p.y,\n \t\t  v = h<4 ? p.y : h==12||h==14 ? p.x : p.z;\n    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n}\n\nfloat perlinNoise3D(vec3 p)\n{\n\tvec3 pi = floor(p), pf = p - pi, w = fade(pf);\n    return mix( mix( mix( grad(hash(pi + vec3(0, 0, 0)), pf - vec3(0, 0, 0)),\n                           grad(hash(pi + vec3(1, 0, 0)), pf - vec3(1, 0, 0)), w.x ),\n            \t      mix( grad(hash(pi + vec3(0, 1, 0)), pf - vec3(0, 1, 0)), \n                \t \t   grad(hash(pi + vec3(1, 1, 0)), pf - vec3(1, 1, 0)), w.x ), w.y ),\n        \t\t mix( mix( grad(hash(pi + vec3(0, 0, 1)), pf - vec3(0, 0, 1)), \n                \t\t   grad(hash(pi + vec3(1, 0, 1)), pf - vec3(1, 0, 1)), w.x ),\n            \t\t  mix( grad(hash(pi + vec3(0, 1, 1)), pf - vec3(0, 1, 1)), \n                \t\t   grad(hash(pi + vec3(1, 1, 1)), pf - vec3(1, 1, 1)), w.x ), w.y ), w.z );\n}\n\nfloat fbm(vec3 pos, int octaves, float persistence) \n{\n    float total = 0.0, frequency = 4.0, amplitude = 1.5, maxValue = 0.0;\n    for(int i = 0; i < octaves; ++i) \n    {\n        total += perlinNoise3D(pos * frequency) * amplitude;\n        maxValue += amplitude;\n        amplitude *= persistence;\n        frequency *= 2.0;\n    }\n    return total / maxValue;\n}\n\nfloat getNoise(vec3 p)\n{\n    return 0.15 * fbm(p + 0.3, 4, 0.3);\n}\n\nfloat sdBox(vec3 pos, vec3 size) \n{\n    vec3 d = abs(pos) - size;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nvec2 mapScene(vec3 pos) \n{ \n    float shapeIndex = 0.0;\n    vec2 res = vec2(sdBox(pos - CUBE_POS, vec3(CUBE_SIZE)), shapeIndex++);\n    res.x += getNoise(pos);\n    return res;\n}\n\nfloat sdScene(vec3 pos) { return mapScene(pos).x; }\n\nvec3 calculateNormal(in vec3 p) \n{\n    const vec3 t = vec3(0.01, 0.0, 0.0);\n    float gradX = sdScene(p + t.xyy) - sdScene(p - t.xyy);\n    float gradY = sdScene(p + t.yxy) - sdScene(p - t.yxy);\n    float gradZ = sdScene(p + t.yyx) - sdScene(p - t.yyx);\n    \n    vec3 normal = vec3(gradX, gradY, gradZ);\n    return normalize(normal);\n}\n\nvec2 rayMarch(vec3 rayOri, vec3 rayDir)\n{\n    const float MAX_TRACE_DISTANCE = 10.0;\n    const int MAX_STEPS = 20;\n    \n    float totalDistance = 0.0, shapeIndex = -1.0;\n    for (int i = 0; i < MAX_STEPS; ++i) {\n        vec2 res = mapScene(rayOri + totalDistance * rayDir);\n        float minHitDistance = 0.0005 * totalDistance;\n        if (res.x < minHitDistance) {\n            shapeIndex = res.y; break; \n        }\n        if (totalDistance > MAX_TRACE_DISTANCE) break;\n        totalDistance += res.x;\n    }\n    \n\treturn vec2(totalDistance, shapeIndex);\n}\n\nvec3 render(vec3 rayOri, vec3 rayDir, out vec3 norm, out float t)\n{\n\tvec3 color = pow(texture(iChannel1, rayDir).rgb, vec3(2.2));\n    vec2 res = rayMarch(rayOri, rayDir);\n    int shapeIndex = int(res.y);\n    if (shapeIndex >= 0) {\n        vec3 pos = rayOri + rayDir * res.x;\n        vec3 normal = calculateNormal(pos);\n\t\tvec3 refractDir = refract(rayDir, normal, 0.8);\n        \n        norm = normal;\n        t = res.x;\n\t\tcolor = pow(texture(iChannel1, refractDir).rgb, vec3(2.2)) * 0.9;\n        //if (shapeIndex == 0) color*= vec3(0.3, 0.7, 1.0);\n    }\n    else {\n        t = INF;\n    }\n    return color;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (CYLINDER_POS - pos.y ) / dir.y; // distance to intersection with plane with y == -1\n    if(t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz, worldPos.xz) >= 50.0)\n        return INF;\n    normal = vec3(0, 1, 0);\n    return t; \n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal){\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 vA, vec3 vB, vec3 vC, out vec3 normal){ // MT-algorithm\n    const float eps = 1e-8;\n    vec3 vecAB = vB - vA;\n    vec3 vecAC = vC - vA;\n    vec3 dirCrAC = cross(dir, vecAC);\n    float det = dot(vecAB, dirCrAC); // determinant\n    if(abs(det) < eps){ // dir is parallel to triangle\n        return INF;\n    }\n    float invDet = 1.0 / det;\n    vec3 posA = pos - vA;\n    float u = dot(posA, dirCrAC) * invDet; // barycentric coord\n    if(u < 0.0 || u > 1.0){ // not a triangle\n        return INF;\n    }\n    vec3 posAcrAB = cross(posA, vecAB);\n    float v = dot(dir, posAcrAB) * invDet; // barycentric coord\n    if((v < 0.0) || (v > 1.0) || (u + v > 1.0)){ // not a triangle\n        return INF;\n    }\n    float t = dot(vecAC, posAcrAB) * invDet; // OK, compute distance\n    if(t <= 0.0){\n        return INF;\n    }\n    normal = normalize(cross(-vecAB, -vecAC));\n    if(dot(normal, dir) >= 0.0){\n        normal = -normal;\n    }\n    return t;\n}\n\nfloat traceOct(vec3 pos, vec3 dir, float r, out vec3 normal){\n    float t = INF;\n    vec3 tmp;\n    float trT = traceTriangle(pos, dir, POSITIONS[2] * r, POSITIONS[1] * r, POSITIONS[5] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[2] * r, POSITIONS[5] * r, POSITIONS[0] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[2] * r, POSITIONS[0] * r, POSITIONS[4] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[2] * r, POSITIONS[4] * r, POSITIONS[1] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[3] * r, POSITIONS[1] * r, POSITIONS[5] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[3] * r, POSITIONS[5] * r, POSITIONS[0] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[3] * r, POSITIONS[0] * r, POSITIONS[4] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    trT = traceTriangle(pos, dir, POSITIONS[3] * r, POSITIONS[4] * r, POSITIONS[1] * r, tmp);\n    if(trT > 0.0 && trT < t){\n        t = trT;\n        normal = tmp;\n    }\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (CYLINDER_POS + CYLINDER_HEIGTH - pos.y ) / dir.y; // distance to intersection with plane with y == -1\n    if(t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz, worldPos.xz) < CYLINDER_RAD * CYLINDER_RAD){\n        normal = vec3(0, 1, 0);\n        return t;\n        \n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - CYLINDER_RAD * CYLINDER_RAD;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0){\n        worldPos = t * dir + pos;\n        if(worldPos.y >= CYLINDER_POS && worldPos.y <= CYLINDER_POS + CYLINDER_HEIGTH){\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0){\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if(worldPos.y >= CYLINDER_POS && worldPos.y <= CYLINDER_POS + CYLINDER_HEIGTH){\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    //normal = normalize(pos + t * dir); // returning normal to point in which we cross sphere(assume thath sphere takes place in 0, 0, 0\n    return INF;\n}\n\nvec3 refraction(vec3 v, vec3 normal, out float n1, float n2){\n    if(dot(v, normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA * n1 / n2;\n    //if(sinB > (n1 / n2)){ // inside reflection\n    if(sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    n1 = n2;\n    return sinB * tang + cosB * normal;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 octNorm;\n    float octT = traceOct(pos, dir, 1.0, octNorm);\n    if (octT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal){\n    vec3 Light1 = LIGHT1_POS - pos;\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 40.0f / dot(Light1, Light1);\n    vec3 Light2 = LIGHT2_POS - pos;\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 20.0f / dot(Light2, Light2);\n    return color * (max(0.0, dot(normal, normalize(Light1))) * att1 * LIGHT1_COLOR + \n        max(0.0, dot(normal, normalize(Light2))) * att2 * LIGHT2_COLOR + \n        texture(iChannel1, normal).rgb * 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    uv.y = -uv.y;\n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(front, right));\n    \n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n  \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_k;\n    \n    float GLASS_R = pow2(AIR_k - GLASS_k) / pow2(AIR_k + GLASS_k);\n    float WATER_R = pow2(WATER_k - GLASS_k) / pow2(WATER_k + GLASS_k);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for(int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        float nEnter = AIR_k;\n        \n        vec3 normal;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm); // distance to plane\n        if(planeT < t) {\n            t = planeT;\n            vec3 worldPos = t * curDir + curPos;\n            materialType = DIFFUSE;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm); // distance to sphere\n        if(light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if(light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 octNorm;\n        bool hitted = false;\n        float octT = traceOct(curPos, curDir, 1.0, octNorm);\n        if(octT < t) {\n            t = octT;\n            normal = octNorm;\n            hitted = true;\n            if (randVals.x * 0.7 < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                //colorMult *= vec3(0.3, 0.6, 0.6);\n                colorMult *= vec3(1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_k;\n                } else {\n                    nEnter = GLASS_k;\n                }\n            }\n        }\n        if(hitted){\n            vec3 waterNorm;\n            float waterT;\n            vec3 waterColor = render(curPos, curDir, waterNorm, waterT);\n            if(waterT < t){\n                t = waterT;\n                normal = waterNorm;\n                //fragColor.rgb += waterColor * vec3(0, 0, 1);\n                if (randVals.x * 0.4 < WATER_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= vec3(0, 0, 1);\n                    //colorMult *= vec3(1, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = GLASS_k;\n                    } else {\n                        nEnter = WATER_k;\n                    }\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if(cylT < t){\n            t = cylT;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y * 0.1).rgb;\n            materialType = DIFFUSE;\n            normal = cylNorm;\n        }\n        if(t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz) * 0.3;\n            if(materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            }\n            else if (materialType == DIFFUSE){\n                fragColor.rgb += computeLight(worldPos, color, normal) * colorMult;\n                break;\n            }\n            else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-3;\n            }\n            else if (materialType == REFRACTION){\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-3;\n            }\n        }\n        else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n            n1 = nEnter;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}