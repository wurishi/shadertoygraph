{"ver":"0.1","info":{"id":"Mc3yRM","date":"1730384269","viewed":233,"name":"combination of color","username":"nayk","description":"combination of https://www.shadertoy.com/view/lc3cRN https://www.shadertoy.com/view/mtyGWy","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["sdf","tutorial","intro","repetition","code","youtube","tuto","creative","ractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(1.0, 0.5, 0.5);\n    vec3 c = vec3(1.5, 0.5, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nfloat TAU = 2.*3.14159;\n\n// Thanks IQ\nfloat eqTri( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.x = p.x + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n//https://www.shadertoy.com/view/mtyGWy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n  bool ENABLE_Ripple ;\n vec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\nENABLE_Ripple=true; // true add ripple\n\t\n    for (float i = 0.0; i < 4.0; i++) {\n    vec3 col2 = vec3(0.);\n   float t = fract(.1 * iTime*0.51);\n   uv *= rotation(3. * TAU * (.3 - clamp(length(uv),0.,.3)));\n\n if(ENABLE_Ripple == false){\n    uv+= (cPos/cLength)*cos(cLength*4.0-iTime*4.0) * 0.53;\n   }\n   float s = -1.;\n   for(float i = 0.; i < 5.; i++){\n     float rad = 1.4 / pow(2.,i) * (.9 - .2 * i);\n     uv *= rotation(-2. * s * (i + 1.) * TAU * t);\n     float tri = eqTri(uv, rad);\n     s *= -1.;\n     col2 += 1.004 / abs(tri);\n   }\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}