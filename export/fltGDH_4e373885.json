{"ver":"0.1","info":{"id":"fltGDH","date":"1636546327","viewed":193,"name":"❄️Snow Simulator/Terrain editor ","username":"rmmcal","description":"=> Snow Simulator / Terrain editor <=\n⛰️✏️ ❄️🌨️  ","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["mouse","terrain","snow","edit","simulator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//  ...  ❄️ Snow Simulator / Terrain editor ⛰️✏️...     ////\n/////////////////////////////////////////////////////////////\n// Brasil/Amazonas/Manaus\n// Created by Rodrigo Cal (twitter: @rmmcal)\n// - Published: 2021/11\n// https://www.shadertoy.com/view/fltGDH\n/////////////////////////////////////////////////////////////\n\nconst float pi = 3.1415926;\nconst float pi2 = 2.*pi;\nconst float rad = pi/180.;\n\n\nmat2 rotate(float x){\n    float c = cos(x);\n    float s = sin(x);\n    return mat2(c,s,-s,c);\n}\n\nbool snow = false;\nbool optimized = false;\n\nfloat dist(vec3 p)\n{\n    float d = 1.0;\n   \n    vec2 ps = ((p.xy+vec2(3., 2.)))/1.0;\n    vec3 c  =  texelFetch( iChannel0, ivec2(ps*100.), 0).rgb;\n    vec3 c2 =  texelFetch( iChannel0, ivec2(ps*20.+.5)*5, 0).rgb;\n\n    float f = .1;\n \n    \n    vec2 v = cos(c.xy*.3);\n     v = (1.-c.xy*.1);\n    \n    // d = .1;\n    vec2 v2 = (1.-c2.xy*.1);;\n    vec2 vp = floor(ps*2.+.5);\n    \n    vec2 m2 = mod(vp,2.0);\n  \n     \n    if (snow) {\n        d = min(d, 0.001 +length(p-vec3(p.x,p.y,+ v.x+1.0)));\n    }\n    else{\n        if (optimized){\n            vec3 c1 = vec3(.05);\n            vec3 q = mod(p+0.5*c1,c1)-0.5*c1;\n            q.z=p.z;\n            d = min(d, -.001+length(q-vec3(0.0, 0.,v2+1.))*1.0);\n        }\n    }\n\n   \n    d = min(d, 1.- p.z + v.y);\n    \n    return d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0., 0.01);\n    float x = dist(p-d.yxx);\n    float y = dist(p-d.xyx);\n    float z = dist(p-d.xxy);\n    return normalize(vec3(x,y,z)-dist(p));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 status = texelFetch( iChannel0, ivec2(0.0), 0);\n  \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvp = uv * vec2(iResolution.x/iResolution.y, 1.0);\n\n    vec3 c = vec3(0.0);\n    \n    float my = iMouse.y/iResolution.y;\n    if (my <= 0.0)\n        my = .5;\n    \n    c = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(c.y*0.1+.2);\n      \n    if (uv.y > my){ \n        fragColor = mix(fragColor, vec4(c.x*0.1+.2), 0.1*max(0., -cos(iTime*.5)));\n    }\n  \n    fragColor = mix(fragColor, vec4(1.,0.,0.0,0.),(smoothstep(0.005,.0, abs(uv.y-my)))*.5);\n    \n    \n     uvp *= 40.0;\n    fragColor = mix(fragColor, vec4(.5), .3*smoothstep(0.1,-0.2, min(abs(mod(uvp.x, 1.)-.5) , abs(mod(uvp.y, 1.) -.5 ))) );\n\n    \n    /////////////////////////////\n    float a = iTime*.5;\n    snow = cos( a*1.0 ) <  -.341592 ;          \n\n    optimized = cos( a*2.0 ) <  -.141592 ;\n\n    if (status.x == 1.0){\n        snow = false;\n        optimized = false;\n    }\n    if (status.x == 2.0){\n        snow = true;\n        optimized = false;\n    }            \n    if (status.x == 3.0){\n        snow = false;\n        optimized = true;\n    }\n    /////////////////////////////\n    \n    \n    if (uv.x > .5){\n        c = texelFetch( iChannel0, ivec2((uv.x-.5)*200., my), 0).rgb;\n        c = texelFetch( iChannel0, ivec2(((uv.x-0.5)*iResolution.x), my*iResolution.y), 0).rgb;\n        //c = texture(iChannel0, vec2((uv.x-.5)*1., my), 0.).rgb;\n     \n        fragColor = vec4(1.0);\n      \n        float y= uv.y*2.0;\n        float k = .1;\n        fragColor = mix(fragColor, vec4(0.),(smoothstep(0.01,.0, abs(c.x*k-y))));\n        fragColor = mix(fragColor, vec4(1.,0.,0.0,0.),(smoothstep(0.01,.0, abs(c.y*k-y))));\n   \n        uvp = fragCoord/4.0;\n        fragColor = mix(fragColor, vec4(.5), .3*smoothstep(0.4,-0.4, min(abs(mod(uvp.x, 1.)-.5) , abs(mod(uvp.y, 1.) -.5 ))) );\n\n        if (uv.y > .5){\n         \n            vec2 uv = fragCoord/iResolution.xy;\n            vec2 pc = (uv-.75)*vec2(1, iResolution.y/iResolution.x);\n            \n            vec3 p = vec3(0.);\n            p += vec3(0.,-5.0,-5.);\n            float sr = 5.;\n        \n            \n            if (status.z > 0.0)\n                a = -status.z;\n            \n           \n            p = vec3(sr*cos(a)-.85,sr*sin(a), 0.2);\n            vec3 d = normalize(vec3(pc,1.0));\n            d.yz *= rotate(1.341592);\n            d.xy *= rotate(-a+4.63);\n\n            vec3 c=vec3(0.0);\n            float t = 0.;\n            for (int i = 0 ; i < 100; i++)\n            {\n                float h=dist(p); \n                float h2=dist(p+ d*h);\n                h = (h+h2)/2.0;\n                if (h < 0.01)\n                 break;\n                t+=h;\n                p += d*h;\n            }\n\n            c += getNormal(p).z;\n            if (snow)\n                c +=.4;\n            fragColor = vec4(c,1.0);\n            \n            p *= 10.0;\n            fragColor = mix(fragColor, vec4(0.0), smoothstep(0.15,-0.0-t*0.1, min(abs(mod(p.x, 1.)-.5) , abs(mod(p.y, 1.) -.5 ))) );\n\n        }  \n    }\n    \n    /////////////////////////////\n    // radio button\n    \n    vec3 buttonCor = vec3(0.);\n    fragCoord -=vec2(0., iResolution.y);\n    fragCoord *= vec2(1.0,-1.0);\n    vec2 posButton = fragCoord - vec2( iResolution.x/4., 0.);;\n\n    \n    fragColor.rgb = mix(fragColor.rgb, 1.- buttonCor, smoothstep(.0,2.0, 20.-length( ( max(vec2(0.), abs(posButton-vec2(65.0, 15.0)) - vec2(60.,0.0)))  ) ));\n    fragColor.rgb = mix(fragColor.rgb, 1.- buttonCor, smoothstep(.0,2.0, 20.-length( ( max(vec2(0.), abs(fragCoord-vec2(5.0, 15.0)) - vec2(60.,0.0)))  ) ));\n    \n   \n    for (float i = 0.0; i < 4.0; i++){\n        fragColor.rgb = mix(fragColor.rgb, buttonCor, smoothstep(2.0,.0,  abs(10. - ((length(posButton-vec2(20.+30.0*i,15.0)))))));\n        if (status.x == i) fragColor.rgb = mix(fragColor.rgb, buttonCor, smoothstep(2.0,.0, -(5. - ((length(posButton-vec2(20.+30.0*i,15.0)))))));\n    }\n   \n    float k = 0.0;\n    if (snow) k = 1.0;\n    if (optimized) k = 2.0;\n    fragColor.rgb  = mix(fragColor.rgb, vec3(0.,0.,1.0), smoothstep(2.0,.0,  abs(13. - ((length(posButton-vec2(20.+30.0*(k+1.0),15.0)))))));\n   \n    for (float i = 0.0; i < 2.0; i++){\n        vec2 bp = vec2(20.+30.0*i,15.0);\n        vec2 bpc = fragCoord-bp;\n        fragColor.rgb = mix(fragColor.rgb, buttonCor, smoothstep(2.0,.0,  abs(10. - length(bpc))));\n        if (status.y == i) fragColor.rgb = mix(fragColor.rgb, buttonCor, smoothstep(2.0,.0, -(7. - ((length(bpc))))));\n        fragColor.rgb = mix(fragColor.rgb, (status.y == i) ? vec3(0.5,0.5, 1.0) : vec3(0.0), smoothstep(2.0,.0, max(-(4. - length(bpc)) , min(-1.+abs(bpc.y), -1.+abs(bpc.x)+(1.0-i)*100.0) ) ) );\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//////////////////////////////////////////////////////////////////////////////\n//https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n//////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////\n\n// ---------------------------------------------------------------//\n\n\nvec4 getTexture(sampler2D s,  vec2 uv){\n    return texelFetch( s, ivec2(uv), 0);\n  //  return texture(s, uv/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    float s = 0.01;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float rnd = 2.+ abs(fract(dot((uv+cos(uv.x+uv.y*10.0+iTime*1.0+cos(uv.x*123.0)))*179.531,  vec2(1324.1327,1.1323))))*4.0;\n    uint strChar[] = uint[1] (1u);\n    \n    vec3 v = vec3( 1.0, -1.0, 0.0);\n     \n    /**\n    vec2 d[] = vec2[] (v.zz, \n      v.xz, -v.xz, v.zx, -v.zx,\n      v.xx,v.xy,v.yx,v.yy\n    );\n      const int len = d.length();\n    /**/\n    \n    vec2 d[9];\n    d[0] = v.zz;\n    d[1] = v.xz;\n    d[2] = -v.xz;\n    d[3] = v.zx;\n    d[4] = -v.zx;\n    d[5] =  v.xx;\n    d[6] =  v.xy;\n    d[7] =  v.yx;\n    d[8] =  v.yy; \n    const int len = 9;\n   \n    \n    vec4 status = getTexture(iChannel0, vec2(0.0));\n    \n    \n    uv = fragCoord; \n    vec4 b1 = getTexture(iChannel0, uv);\n    vec4 b2 = getTexture(iChannel0, uv+v.xz);\n    vec4 b3 = getTexture(iChannel0, uv-v.xz);\n    vec4 b4 = getTexture(iChannel0, uv+v.zy);\n    vec4 b5 = getTexture(iChannel0, uv-v.zy);\n    fragColor = b1;\n  \n   \n    \n    float minValue = 1000.0;\n    int minIndex = 0;\n    \n    float maxValue = -1000.0;\n    int maxIndex = 0;\n    \n    bool collision ;\n    vec4 back;\n    \n    \n    for (int i = 0; i < len; i++){\n         \n         vec2 r = d[i];\n         vec4 b = getTexture(iChannel0, uv+r); // x - fall, y - floor\n          \n         \n         if (b.x <= b.y){\n            collision = true;\n         }\n         \n         if (b.y < minValue ){\n            minValue = b.y;\n            minIndex = i;\n            back = b;\n         }\n         \n          if (b.y > maxValue ){\n            maxValue = b.y;\n            maxIndex = i;\n            back = b;\n         }\n        \n    }\n \n    vec2 rMin = d[minIndex];\n    vec4 bMin = getTexture(iChannel0, uv+rMin); // x - fall, y - floor\n \n    vec2 rMax = d[maxIndex];\n    vec4 bMax = getTexture(iChannel0, uv+rMax); // x - fall, y - floor\n \n \n    float sb =  v.y*1.0;\n    if (uv.x < sb || uv.x > 1.0- sb ||  uv.y < sb || uv.y > 1.0- sb)\n         collision = (fragColor.x <= fragColor.y);\n         \n   \n    if (iFrame==0 ){\n        \n        fragColor.x = rnd;\n        fragColor.y = max(0., cos((uv.x)*0.1) + cos((uv.y)*0.1)+ 1.-length(uv/iResolution.yy-.5)*12.5);\n        fragColor.y = max(fragColor.y, smoothstep(0.01,0.0, sdBox(uv/iResolution.yy-.5, vec2(.2))));\n        \n        fragColor.z = 1.0;\n        \n    \n    } \n    else if (false){\n        if ((fragColor.x <= fragColor.y )){\n            fragColor.x = rnd;\n            fragColor.y += s * fragColor.z;\n            fragColor.z  = 1.0;\n        }\n        else\n        {\n             fragColor.x -= s;\n        }\n    }\n    else if (collision)\n    {\n      \n        if (minIndex == 0){\n            fragColor.x = rnd;\n            fragColor.y += s * fragColor.z*10.0;\n            fragColor.z = 1.0;\n        }\n        else \n        if ((fragColor.y <= (bMax.y - bMin.y)/2.0 + bMin.y )){\n        \n            fragColor.x = rnd;\n            fragColor.y += s * fragColor.z*10.0 * (bMax.y - bMin.y)/2.0;\n            fragColor.z = 1.0;\n        }\n        \n        fragColor.x = rnd;\n        \n    }\n    else\n    {\n        fragColor.x -= s;\n    }\n    \n    fragColor.y = min(fragColor.y, 8.0);\n    if (fragColor.y > 9.0)\n        fragColor.y *= .9999;\n    \n    if (sign(iMouse.z) > 0.0){\n        if (iMouse.xy != iMouse.zw){\n            fragColor.y = max(0., fragColor.y + sign(status.y-.5)*max(0., 2. - ((length(uv-iMouse.xy)*.04)))*0.008);\n        }\n    }\n    \n       \n    if (fragCoord.y <= 1.) {\n        fragColor = getTexture(iChannel0, fragCoord);\n        \n        if (sign(iMouse.z) > 0.0 && sign(iMouse.w) > 0.0){\n            vec2 mouse = iMouse.xy;\n            mouse  -=vec2(0., iResolution.y);\n            mouse *= vec2(1.0,- 1.0);\n\n            vec2 posButton = fragCoord + vec2( iResolution.x/4., 0.);;\n\n            for (float i = 0.0; i < 4.0; i++){\n               if (smoothstep(2.0,.0,  -(10. - ((length(posButton-mouse+vec2(20.+30.*i,15.0)))))) > 0.5) fragColor.x = i;\n            }\n            for (float i = 0.0; i < 2.0; i++){\n               if (smoothstep(2.0,.0,  -(10. - ((length(fragCoord-mouse+vec2(20.+30.*i,15.0)))))) > 0.5) fragColor.y = i;\n            }\n        }\n        \n        vec2 m = iMouse.xy/iResolution.xy;\n        if (m.x > .5)\n        {\n            if (m.y > .5)\n            {\n                 fragColor.z = m.x*13.0;\n            }else\n            {\n                 fragColor.z = 0.0;\n            }\n        }\n        \n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}