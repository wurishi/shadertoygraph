{"ver":"0.1","info":{"id":"ltlcDB","date":"1506438849","viewed":82,"name":"Custom twin shade prototype 1","username":"tgsstdio","description":"Duo-shade using normalized uv values.\n\nEPILEPSY WARNING: flashing lights","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \nvec4 drawGrid(vec2 uv, vec2 cellDims, vec2 screenRect, float width)\n{\n   vec2 bckSlash = normalize(vec2(screenRect.x / screenRect.y, 1.));\n   vec2 fwdSlash = normalize(vec2(-1, iResolution.y / iResolution.x));\n    \n   vec4 color = vec4(0.);       \n  \n   ivec2 test = ivec2(uv / cellDims);                      \n  \n   vec2 bottomLeft = floor(uv / cellDims) * cellDims;          \n   vec2 bottomRight = bottomLeft + vec2(cellDims.x, 0.);   \n   \n   float fd0 = dot(fwdSlash, bottomLeft);    \n   float fd1 = dot(fwdSlash, uv);\n   float fd2 = dot(fwdSlash, bottomRight);   \n   \n   float percent = width * 0.5;       \n   float fwdEnd = abs(fd2 - fd0);          \n    \n   float fwdMin = percent * fwdEnd;\n   float fwdMax = (1. - percent) * fwdEnd; \n\n   float fwdDiff = abs(fd1 - fd0);         \n   if (fwdDiff <= fwdMin)\n     color.g = 1.;      \n    \n   float bd0 = dot(bckSlash, bottomRight);    \n   float bd1 = dot(bckSlash, uv);     \n   float bd2 = dot(bckSlash, bottomLeft);      \n    \n   float bckEnd = abs(bd2 - bd0);          \n    \n   float bckMin = percent * bckEnd;\n   float bckMax = (1. - percent) * bckEnd;     \n    \n   float bckDiff = abs(bd1 - bd0);      \n   if (bckDiff <= bckMin)\n     color.r = 1.;        \n    \n   return color;\n}\n\n// SHOULD BE SQUARE ON SCREEN NOT RECTANGULAR\n#define SUBDIVISION_LOOP_IN_SECS 18.0\n#define NO_OF_DIVISIONS 9\n\n#define MID_POINT 0.4\n#define TWO_PI 6.283185307179586476925286766559\n#define FREQUENCY 0.255\n#define RANGE_OF_TRIG_FUNC 0.2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    // SELECTING CELL SIZE\n    float gapTimeStep = mod(iTime, SUBDIVISION_LOOP_IN_SECS) / SUBDIVISION_LOOP_IN_SECS;\n\n    float sections[NO_OF_DIVISIONS] = float[](\n        128.,        \n        4.,\n        8.,\n        12.,\n        16.,\n        32.,        \n        64.,\n        96.,\n        256.\n   ); \n    \n   float lineWidth = MID_POINT + RANGE_OF_TRIG_FUNC * sin( FREQUENCY * TWO_PI * iTime);    \n\n   float cellSize = sections[int(gapTimeStep * float(NO_OF_DIVISIONS))];       \n    \n   vec2 uv = fragCoord.xy / iResolution.xy;     \n\n   vec2 cellDims = cellSize / iResolution.xy;\n    \n   fragColor = drawGrid(uv, cellDims, iResolution.xy, lineWidth);     \n}","name":"Image","description":"","type":"image"}]}