{"ver":"0.1","info":{"id":"ddcBW7","date":"1697223445","viewed":25,"name":"231014Light","username":"amenone","description":"Light","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nprecision highp float;\nprecision highp int;\nuniform float u_time;\nuniform vec2 u_resolution;\nuvec3 k = uvec3(0x456789abu, 0x6789ab45, 0x89ab4567u);\nconst uint UINT_MAX = 0xffffffffu;\nuvec3 u = uvec3(1,2,3);\nint channel;\nconst float PI = 3.1415926;\nuvec2 uhash22(uvec2 n)\n{\n    n ^= (n.yx << u.xy);\n    n ^= (n.yx >> u.xy);\n    n *= k.xy;\n    n ^= (n.yx << u.xy);\n    return n * k.xy;\n}\n\nuvec3 uhash33(uvec3 n)\n{\n    n ^= (n.yzx << u);\n    n ^= (n.yzx >> u);\n    n *= k;\n    n ^= (n.yzx << u);\n    return n * k;\n}\n\nvec2 hash22(vec2 p)\n{\n    uvec2 n = floatBitsToUint(p);\n    return vec2( uhash22(n)) / vec2(UINT_MAX);\n}\n\nvec3 hash33(vec3 p)\n{\n    uvec3 n = floatBitsToUint(p);\n    return vec3( uhash33(n)) / vec3(UINT_MAX);\n}\n\nfloat hash21(vec2 p)\n{\n    uvec2 n = floatBitsToUint(p);\n    return float( uhash22(n).x) / float(UINT_MAX);\n    //ネストで入れ込む方法\n    //return float( uhash11( n.x + ubash11(n.y))) / float(UINT_MAX);\n}\n\nfloat hash31(vec3 p)\n{\n    uvec3 n = floatBitsToUint(p);\n    return float( uhash33(n).x) / float(UINT_MAX);\n}\n\nfloat vnoise21( vec2 p )\n{\n    vec2 n = floor(p);\n    float[4] v;\n    for(int j = 0 ; j < 2  ; j++)\n    {\n        for(int i =0 ; i < 2 ; i++ )\n        {\n            v[i+2*j] = hash21 (n + vec2(i,j));\n        }\n    }\n    vec2 f = fract(p);\n    // if (channel == 1) \n    // {\n    //     f= f*f*(3.0-2.0*f);\n    // }\n    f= f*f*(3.0-2.0*f);\n    return mix( mix(v[0],v[1],f.x),mix(v[2],v[3],f.x),f.y);\n} \n\nfloat vnoise31(vec3 p)\n{\n    vec3 n = floor(p);\n    float[8] v;\n    for(int k = 0 ; k < 2 ; k++)\n    {\n        for(int j = 0 ; j < 2 ; j ++)\n        {\n            for(int i = 0 ; i <2 ; i ++)\n            {\n                v[i+2*j+4*k] = hash31(n + vec3(i,j,k));\n            }\n        }\n    }\n\n    vec3 f = fract(p);\n    //f = f* f* (3.0 - 2.0 * f);\n    float[2] w;\n    for(int i = 0 ; i <2 ; i ++)\n    {\n        w[i] = mix( mix(v[4*i],v[4*i+1],f.x) ,mix(v[4*i+2],v[4*i +3],f.x), f.y );\n    } \n\n    return mix(w[0] ,w[1],f.z);\n}\n\nvec3 vnoise33(vec3 p)\n{\n    vec3 n = floor(p);\n    vec3[8] v;\n    for(int k = 0 ; k < 2 ; k++)\n    {\n        for(int j = 0 ; j < 2 ; j ++)\n        {\n            for(int i = 0 ; i <2 ; i ++)\n            {\n                v[i+2*j+4*k] = hash33(n + vec3(i,j,k));\n            }\n        }\n    }\n\n    vec3 f = fract(p);\n    f = f* f* (3.0 - 2.0 * f);\n    vec3[2] w;\n    for(int i = 0 ; i <2 ; i ++)\n    {\n        w[i] = mix( mix(v[4*i],v[4*i+1],f.x) ,mix(v[4*i+2],v[4*i +3],f.x) , f.y );\n    } \n\n    return mix(w[0] ,w[1],f.z);\n}\n\nfloat atan2(float y, float x)\n{\n    return x == 0.0? sign(y)*PI/2.0 : atan(y,x);\n}\n\nvec2 xy2pol(vec2 xy)\n{\n    return vec2(atan2(xy.y,xy.x),length(xy));\n}\n\nvec2 pol2xy(vec2 pol)\n{\n    return pol.y * vec2(cos(pol.x),sin(pol.x));\n}\n\nvec3 tex(vec2 st)\n{\n    float time = u_time *0.2;\n\n    vec3 circ = vec3(pol2xy(vec2(time,0.5))+0.5,1.0);\n    \n    vec3[3] col3 = vec3[3](\n        circ.rgb,circ.gbr,circ.brg\n    ); \n\n    st.s = st.s / PI +1.0;\n    st.s += time;\n    int ind = int(st.s);\n    vec3 col = mix(col3[ind % 2],col3[(ind+1) % 2],fract(st.s));\n\n    return mix(col3[2],col,st.t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float u_time = iTime * (sin(iTime * 0.00354) - sin(iTime * 0.000031)*0.5)*1.5 ;\n    vec2 u_resolution = iResolution.xy;\n    vec2 pos = fragCoord.xy / min(u_resolution.x,u_resolution.y);\n    \n    float postTime = u_time - 1.0;\n    vec2 postPos = 20.0 * pos ;\n    pos += hash21(pos) + u_time * 0.01;\n    postPos += hash21(postPos)+ u_time * 0.01;\n    float timemulti = 1.0-( (pos.x - 0.5) *2.0);\n    pos.y -= u_time * timemulti;\n    postPos.y -= postTime;\n    pos = 10000.0 * pos;\n    \n    pos.x +=  sin(u_time * 0.2354) + sin(u_time * 0.031)*0.5;\n    pos.y +=  cos(u_time * 0.2354) + sin(u_time * 0.013)*0.5;\n    postPos.x +=  sin(postTime* 0.2354)+ sin(u_time * 0.031)*0.5;\n    postPos.y +=  cos(postTime* 0.2354)+ sin(u_time * 0.013)*0.5;\n    //fragColor = vec4(vnoise21(pos));\n    vec4 postCol = vec4(vnoise33(vec3(postPos,postTime)),1.0);\n    vec4 currentCol = vec4(vnoise33(vec3(pos,u_time)),1.0);\n    float blue =  pow( mix(postCol,currentCol,0.5).b , 1.5 ) * 1.5 ;\n    //vec4 blue = vec4(0,0,col.b,1.0);\n    float green = mix(postCol,currentCol,0.5).g * 0.3;\n    float red = mix(currentCol,postCol,0.5).r * 0.1;\n\n    vec2 polPos = gl_FragCoord.xy / u_resolution.xy;\n    pos = polPos.xy * 2.0 - vec2(1.0);\n    pos = xy2pol(pos);\n    fragColor = vec4(tex(pos),1.0);\n\n    fragColor += vec4(red,green,blue,1.0);\n\n}","name":"Image","description":"","type":"image"}]}