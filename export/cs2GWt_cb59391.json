{"ver":"0.1","info":{"id":"cs2GWt","date":"1668337797","viewed":49,"name":"1Day_1Shader_Box","username":"Trospy","description":"study source from : https://www.youtube.com/watch?v=62-pRVZuS5c&ab_channel=InigoQuilez\n                            https://www.shadertoy.com/view/3ljcRh\n1day 1study : Trospy","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x, max(q.y, q.z)),0.0);\n}\n\nfloat map(in vec3 pos)\n{\n    return sdfBox(pos, vec3(0.5,0.3,0.5));\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\n#define AA 3\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //static camera\n\tfloat an = 0.5*(iTime-10.0);\n\tvec3 ro = 1.2*vec3( 1.0*cos(an), 0.0, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, -0.0, 0.0 );\n    \n    //camera matrix\n    vec3 ww = normalize(ta -ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0,1.0,0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    //render \n    vec3 tot = vec3(0.0);\n\n    #if AA>1\n    for(int m=0; m < AA; m++)\n    {\n        for(int n=0; n < AA; n++)\n        {\n            //pixel coord\n            vec2 o = vec2(float(m), float(n) / float(AA) - 0.5);\n            vec2 p = (2.0*(fragCoord + o) - iResolution.xy)/iResolution.y;\n            #else    \n            vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n            #endif\n            //create view ray\n            vec3 rd = normalize(p.x * uu + p.y*vv + 1.5*ww);\n            \n            //ray march\n            const float tmax = 5.0;\n            float t = 0.0;\n            for(int i =0; i <256; i++)\n            {\n                vec3 pos = ro + t*rd;\n                float h = map(pos);\n                if(h<0.0001 || t> tmax) break;\n                t+=h;\n            }\n            \n            // shading / lighting\n            vec3 col = vec3(0.0);\n            if(t<tmax)\n            {\n                vec3 pos = ro + t*rd;\n                vec3 nor = calcNormal(pos);\n                float dif = clamp(dot(nor, vec3(0.57703)), 0.0 ,1.0);\n                float amb = 0.5 + 0.5*dot(nor, vec3(0.0,1.0,0.0));\n                col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n            }\n            \n            //gamma correction\n            col = sqrt(col);\n            tot += col;\n        #if AA>1\n        }\n        tot /= float(AA*AA);\n        #endif\n    }\n\n\n    // Output to screen\n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}