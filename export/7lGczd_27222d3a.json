{"ver":"0.1","info":{"id":"7lGczd","date":"1662002610","viewed":519,"name":"Color vibrance (After Effects)","username":"Suslik","description":"A shader that almost exactly matches Adobe After Effects color operation called \"Color Vibrance\" it's particularly useful to produce flame-like effects of various colors from grayscale color masks.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["aftereffects","adobe","colorvibrance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float val) {return clamp(val, 0.0f, 1.0f);}\nfloat SmoothStep(float val)\n{\n    return 3.0f * val * val - 2.0f * val * val * val;\n}\nvec3 Vibrance(float val, vec3 base_color)\n{\n    return pow(vec3(saturate(SmoothStep(val))), vec3(1.0f) / (base_color + 1e-6));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 base_col = vec3(1.0f, 0.3f, 0.02f);\n    if(uv.x < 0.5f)\n        base_col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float temp = texture(iChannel0, uv).r;\n    \n\n    // Output to screen\n    fragColor = vec4(Vibrance(temp, base_col),1.0) * 1.5f;\n}","name":"Image","description":"","type":"image"}]}