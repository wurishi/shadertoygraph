{"ver":"0.1","info":{"id":"ls2Xzm","date":"1475028420","viewed":252,"name":"CirclePattern","username":"Smitty","description":"Circle pattern test for game background","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float level = 0.0;\nvec2 uv = vec2(0.0);\n#define pi 3.1415926\n\nfloat rfloat(float juice) {\n    return fract(sin(juice*1.06)*42788.5251);\n}\n\nvoid circleoutline(vec2 center, float radius) {\n    float dist = length(uv - center);\n    float width = 2.0/iResolution.y;\n    \n    if (dist > radius-width && dist < radius+width) {\n        level = min(1.0,(cos((radius-dist)*pi/width) + 1.)/2. +level);\n    }\n}\n\nvoid horizontal(float y) {\n    float dist = abs(uv.y - y);\n    float width = 2.0/iResolution.y;\n    \n    if (dist > -width && dist < width) {\n        level = min(1.0,(cos((dist)*pi/width) + 1.)/2. +level);\n    }\n}\n\nvoid vertical(float x) {\n    float dist = abs(uv.x - x);\n    float width = 2.0/iResolution.y;\n    \n    if (dist > -width && dist < width) {\n        level = min(1.0,(cos((dist)*pi/width) + 1.)/2. +level);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat x = (fragCoord.x - (iResolution.x/2.))*1./iResolution.y;\n    float y = (fragCoord.y - (iResolution.y/2.))*1./iResolution.y;\n    uv = vec2(x,y);\n    \n    vec2 gridpos = vec2(floor(x*3.), floor(y*3.));\n    vec2 bottomxy = gridpos/3.;\n    vec2 topxy = bottomxy + vec2(1./3., 1./3.);\n    vec2 leftxy = bottomxy + vec2(0., 1./3.);\n    vec2 rightxy = bottomxy + vec2(1./3., 0.);\n    \n    float type = floor(rfloat(gridpos.x*1.6352 +gridpos.y)*4.);\n    if (type >= 3.0) {\n        horizontal(bottomxy.y + 1./12.);\n        vertical(bottomxy.x + 1./12.);\n        circleoutline(bottomxy, 3./12.);\n        circleoutline(topxy, 1./12.);\n    } else if (type >= 2.0){\n        horizontal(bottomxy.y + 3./12.);\n        vertical(bottomxy.x + 1./12.);\n        circleoutline(leftxy, 3./12.);\n        circleoutline(rightxy, 1./12.);\n    } else if (type >= 1.0){\n        horizontal(bottomxy.y + 1./12.);\n        vertical(bottomxy.x + 3./12.);\n        circleoutline(rightxy, 3./12.);\n        circleoutline(leftxy, 1./12.);\n    } else {\n        horizontal(bottomxy.y + 3./12.);\n        vertical(bottomxy.x + 3./12.);\n        circleoutline(topxy, 3./12.);\n        circleoutline(bottomxy, 1./12.);\n    }\n    \n    \n    vec2 glowgrid = vec2(floor(x/2.)*2. + 1.0, floor(y/2.)*2. + 1.0);\n        \n    float t = iTime*0.19 + rfloat(glowgrid.x*1.15 +glowgrid.y*1.28);\n    float glowX = (2.*sin(t)+1.5*cos(3.*t)+1.5*cos(5.*t))/4.;\n    float glowY = (2.*cos(t)+sin(3.*t)+2.5*sin(5.*t))/6.;\n   \n    vec2 glowPoint = glowgrid + vec2(glowX,glowY);    \n    float glowlevel = 0.0;\n    float dist = length(uv - glowPoint);\n    if (dist < 0.1) {\n        glowlevel = (1. - dist/0.1);\n    }\n    \n    glowgrid = vec2(floor((x-1.0)/2.)*2.+2.0, floor((y-1.0)/2.)*2.+2.0);\n        \n    t = iTime*0.12 + rfloat(glowgrid.x*1.15 +glowgrid.y*1.28);\n    glowX = (2.*sin(t)+1.5*cos(3.*t)+1.5*cos(5.*t))/4.+0.05;\n    glowY = (2.*cos(t)+sin(3.*t)+2.5*sin(5.*t))/6.-0.05;\n   \n    glowPoint = glowgrid + vec2(glowX,glowY);    \n    \n    dist = length(uv - glowPoint);\n    if (dist < 0.1) {\n        glowlevel = min(1.,glowlevel + (1. - dist/0.1));\n    }\n    \n    glowlevel = glowlevel*level;\n    fragColor = vec4(0.15*level + glowlevel*0.8 + 0.05,0.15*level + glowlevel*0.7 + 0.05,0.15*level + 0.05,1.0);\n    \n    float scale = 0.2;\n}\n","name":"Image","description":"","type":"image"}]}