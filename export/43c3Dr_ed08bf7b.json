{"ver":"0.1","info":{"id":"43c3Dr","date":"1716317553","viewed":62,"name":"PC - Hexagonal Prism","username":"natevm","description":"Sample code for an point-in-hexagonal-prism test, returning the per-vertex support function weights.\nThis implementation uses a newton-raphson iteration to handle the bilinear faces. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","finite","element","containment","query"],"hasliked":0,"parentid":"X3tGR7","parentname":"PC - Pentagonal Prism"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n// lots of error, but plays well on mobile\n#define NEWTON_ITERATIONS 3\n#define NUM_STEPS 8\n#else\n#define NEWTON_ITERATIONS 3\n#define NUM_STEPS 32    \n#endif\n\n#define CONVERGED_ERROR 1e-3\n#define DIVERGED_ERROR 1e6\n\n#define EXPOSURE 2.5\n\nvoid hexagonalPrismInterpolationFunctions(vec3 rst, \n    out float w0, out float w1, out float w2, out float w3, out float w4, out float w5,\n    out float w6, out float w7, out float w8, out float w9, out float w10, out float w11) \n{\n    float r, s, t;\n    r = rst.x;\n    s = rst.y;\n    t = rst.z;\n    \n    const float a = 0.933012701892219298;\n    const float b = 0.066987298107780702;\n\n    // First hexagon\n    w0  = -16./3. * (r - a  ) * (r - b) * (s - 1.0 ) * (t - 1.0);\n    w1  =  16./3. * (r - 0.5) * (r - b) * (s - 0.75) * (t - 1.0);\n    w2  = -16./3. * (r - 0.5) * (r - b) * (s - 0.25) * (t - 1.0);\n    w3  =  16./3. * (r - a  ) * (r - b) * (s - 0.0 ) * (t - 1.0);\n    w4  = -16./3. * (r - 0.5) * (r - a) * (s - 0.25) * (t - 1.0);\n    w5  =  16./3. * (r - 0.5) * (r - a) * (s - 0.75) * (t - 1.0);\n\n    // Second hexagon\n    w6  =  16./3. * (r - a  ) * (r - b) * (s - 1.0 ) * (t - 0.0);\n    w7  = -16./3. * (r - 0.5) * (r - b) * (s - 0.75) * (t - 0.0);\n    w8  =  16./3. * (r - 0.5) * (r - b) * (s - 0.25) * (t - 0.0);\n    w9  = -16./3. * (r - a  ) * (r - b) * (s - 0.0 ) * (t - 0.0);\n    w10 =  16./3. * (r - 0.5) * (r - a) * (s - 0.25) * (t - 0.0);\n    w11 = -16./3. * (r - 0.5) * (r - a) * (s - 0.75) * (t - 0.0);\n}\n\nvoid hexagonalPrismInterpolationDerivs(vec3 rst, \n    out vec3 dw0, out vec3 dw1, out vec3 dw2, out vec3 dw3, out vec3 dw4, out vec3 dw5, \n    out vec3 dw6, out vec3 dw7, out vec3 dw8, out vec3 dw9, out vec3 dw10, out vec3 dw11)\n{\n    float r, s, t;\n    r = rst[0];\n    s = rst[1];\n    t = rst[2];\n    const float a = 0.933012701892219298;\n    const float b = 0.066987298107780702;\n    // note: a+b=1.0\n\n    // r-derivatives\n    // First hexagon\n    dw0[0]  = -16./3. * ( 2. * r - 1.0)     * (s - 1.0 ) * (t - 1.0);\n    dw1[0]  =  16./3. * ( 2. * r - b - 0.5) * (s - 0.75) * (t - 1.0);\n    dw2[0]  = -16./3. * ( 2. * r - b - 0.5) * (s - 0.25) * (t - 1.0);\n    dw3[0]  =  16./3. * ( 2. * r - 1.0)     * (s - 0.0 ) * (t - 1.0);\n    dw4[0]  = -16./3. * ( 2. * r - a - 0.5) * (s - 0.25) * (t - 1.0);\n    dw5[0]  =  16./3. * ( 2. * r - a - 0.5) * (s - 0.75) * (t - 1.0);\n    // Second hexagon\n    dw6[0]  =  16./3. * ( 2. * r - 1.0)     * (s - 1.0 ) * (t - 0.0);\n    dw7[0]  = -16./3. * ( 2. * r - b - 0.5) * (s - 0.75) * (t - 0.0);\n    dw8[0]  =  16./3. * ( 2. * r - b - 0.5) * (s - 0.25) * (t - 0.0);\n    dw9[0]  = -16./3. * ( 2. * r - 1.0)     * (s - 0.0 ) * (t - 0.0);\n    dw10[0] =  16./3. * ( 2. * r - a - 0.5) * (s - 0.25) * (t - 0.0);\n    dw11[0] = -16./3. * ( 2. * r - a - 0.5) * (s - 0.75) * (t - 0.0);\n\n    // s-derivatives\n    // First hexagon\n    dw0[1] = -16./3. * (r - a  ) * (r - b) * (t - 1.0);\n    dw1[1] =  16./3. * (r - 0.5) * (r - b) * (t - 1.0);\n    dw2[1] = -16./3. * (r - 0.5) * (r - b) * (t - 1.0);\n    dw3[1] =  16./3. * (r - a  ) * (r - b) * (t - 1.0);\n    dw4[1] = -16./3. * (r - 0.5) * (r - a) * (t - 1.0);\n    dw5[1] =  16./3. * (r - 0.5) * (r - a) * (t - 1.0);\n    // Second hexagon\n    dw6[1] =  16./3. * (r - a  ) * (r - b) * (t - 0.0);\n    dw7[1] = -16./3. * (r - 0.5) * (r - b) * (t - 0.0);\n    dw8[1] =  16./3. * (r - 0.5) * (r - b) * (t - 0.0);\n    dw9[1] = -16./3. * (r - a  ) * (r - b) * (t - 0.0);\n    dw10[1] =  16./3. * (r - 0.5) * (r - a) * (t - 0.0);\n    dw11[1] = -16./3. * (r - 0.5) * (r - a) * (t - 0.0);\n\n    // t-derivatives\n    // First hexagon\n    dw0[2] = -16./3. * (r - a  ) * (r - b) * (s - 1.0 );\n    dw1[2] =  16./3. * (r - 0.5) * (r - b) * (s - 0.75);\n    dw2[2] = -16./3. * (r - 0.5) * (r - b) * (s - 0.25);\n    dw3[2] =  16./3. * (r - a  ) * (r - b) * (s - 0.0 );\n    dw4[2] = -16./3. * (r - 0.5) * (r - a) * (s - 0.25);\n    dw5[2] =  16./3. * (r - 0.5) * (r - a) * (s - 0.75);\n    // Second hexagon\n    dw6[2] =  16./3. * (r - a  ) * (r - b) * (s - 1.0 );\n    dw7[2] = -16./3. * (r - 0.5) * (r - b) * (s - 0.75);\n    dw8[2] =  16./3. * (r - 0.5) * (r - b) * (s - 0.25);\n    dw9[2] = -16./3. * (r - a  ) * (r - b) * (s - 0.0 );\n    dw10[2] =  16./3. * (r - 0.5) * (r - a) * (s - 0.25);\n    dw11[2] = -16./3. * (r - 0.5) * (r - a) * (s - 0.75);\n}\n\nbool pointInCannonicalHexagon( vec3 rst) {\n    if (rst.z < 0.0 || rst.z > 1.0) return false;\n    const mat2 rot = mat2(0.86602540378, -.5, .5,  0.86602540378);\n    const vec3 k = vec3(-0.866025404, 0.5, 0.577350269);\n    vec2 p = (rst.xy - 0.5) * (2.0);\n    p = abs(rot * p);\n\n    p -= 2.0 * min(dot(k.xy, p), 0.0) * k.xy;\n    p -= vec2(clamp(p.x, -k.z, k.z), 1.0);\n    \n    return p.y <= 0.0;\n}\n\nbool interpolateHexagonalPrism(vec3 P, \n    inout vec4 V0, inout vec4 V1, inout vec4 V2, inout vec4 V3, inout vec4 V4, inout vec4 V5, \n    inout vec4 V6, inout vec4 V7, inout vec4 V8, inout vec4 V9, inout vec4 V10, inout vec4 V11) {\n    \n    // Initialize our canonical coordinates to be in the center of the element\n    // We'll iteratively refine these with Newton's method to match the given \"P\"\n    vec3 pc_curr = vec3(0.5, 0.5, 0.5);\n    vec3 pc = vec3(0.5, 0.5, 0.5);\n\n    // Iteration for Newton's method\n    bool converged = false;\n    for (int iteration = 0; iteration < NEWTON_ITERATIONS; iteration++) {\n        // Compute the currently optimized position in the canonical element\n        float w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11;\n        hexagonalPrismInterpolationFunctions(pc_curr, w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11);\n        vec3 fcol = V0.xyz * w0 + V1.xyz * w1 + V2.xyz * w2 + V3.xyz * w3 + V4.xyz * w4 + V5.xyz * w5 \n                  + V6.xyz * w6 + V7.xyz * w7 + V8.xyz * w8 + V9.xyz * w9 + V10.xyz * w10 + V11.xyz * w11;\n        fcol -= P; // Making P be the origin\n        \n        // Now compute Jacobian, which transforms change in pc to change in shape functions\n        vec3 dw0, dw1, dw2, dw3, dw4, dw5, dw6, dw7, dw8, dw9, dw10, dw11;\n        hexagonalPrismInterpolationDerivs(pc_curr, dw0, dw1, dw2, dw3, dw4, dw5, dw6, dw7, dw8, dw9, dw10, dw11);\n        \n        // Now get derivatives in world space\n        vec3 rcol = V0.xyz * dw0.x + V1.xyz * dw1.x + V2.xyz * dw2.x + V3.xyz * dw3.x + V4.xyz * dw4.x + V5.xyz * dw5.x \n                  + V6.xyz * dw6.x + V7.xyz * dw7.x + V8.xyz * dw8.x + V9.xyz * dw9.x + V10.xyz * dw10.x + V11.xyz * dw11.x;\n        vec3 scol = V0.xyz * dw0.y + V1.xyz * dw1.y + V2.xyz * dw2.y + V3.xyz * dw3.y + V4.xyz * dw4.y + V5.xyz * dw5.y \n                  + V6.xyz * dw6.y + V7.xyz * dw7.y + V8.xyz * dw8.y + V9.xyz * dw9.y + V10.xyz * dw10.y + V11.xyz * dw11.y;\n        vec3 tcol = V0.xyz * dw0.z + V1.xyz * dw1.z + V2.xyz * dw2.z + V3.xyz * dw3.z + V4.xyz * dw4.z + V5.xyz * dw5.z \n                  + V6.xyz * dw6.z + V7.xyz * dw7.z + V8.xyz * dw8.z + V9.xyz * dw9.z + V10.xyz * dw10.z + V11.xyz * dw11.z;\n\n        // The above should be our 3X3 jacobian.\n        \n        // Compute determinants and generate improvements\n        float d = determinant(mat3(rcol, scol, tcol));\n        if (abs(d) < 1e-20) {\n            return false; // Determinant too small, likely singular\n        }\n        // Newton Raphson update formula, x_new = x_old - f(x) / f'(x), but generalized to \n        // multiple dimensions. fcol has principle values, while other two contain gradients, \n        // so the ratio effectively calculates changes needed using Cramer's rule.\n        pc.x = pc_curr.x - (determinant(mat3(fcol, scol, tcol)) / d);\n        pc.y = pc_curr.y - (determinant(mat3(rcol, fcol, tcol)) / d);\n        pc.z = pc_curr.z - (determinant(mat3(rcol, scol, fcol)) / d);\n        \n        \n        if (any(greaterThan(abs(pc), vec3(DIVERGED_ERROR))))\n            return false;\n        \n        vec3 err = abs(pc - pc_curr);\n        pc_curr = pc; // Commit the updated canonical coordinates\n        \n        // Check for convergence\n        if (all(lessThan(err, vec3(CONVERGED_ERROR)))) {\n            converged = true;\n            break;\n        }\n    }\n    \n    if (!converged) return false;\n    \n    if (!pointInCannonicalHexagon(pc_curr)) return false;\n    \n    hexagonalPrismInterpolationFunctions(pc_curr, V0.w, V1.w, V2.w, V3.w, V4.w, V5.w, V6.w, V7.w, V8.w, V9.w, V10.w, V11.w);   \n    return true;\n}\n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n\n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n\n}\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\nvec4 query(vec3 p)\n{\t\n    // Bottom hexagon\n    vec4 v00 = vec4(-1., .7*cos(M_2PI * (1.0 / 6.0) + cos(iTime)), .7*sin(M_2PI * (1.0 / 6.0) + cos(iTime)), 0.0);\n    vec4 v01 = vec4(-1., .7*cos(M_2PI * (2.0 / 6.0) + cos(iTime)), .7*sin(M_2PI * (2.0 / 6.0) + cos(iTime)), 0.0);\n    vec4 v02 = vec4(-1., .7*cos(M_2PI * (3.0 / 6.0) + cos(iTime)), .7*sin(M_2PI * (3.0 / 6.0) + cos(iTime)), 0.0);\n    vec4 v03 = vec4(-1., .7*cos(M_2PI * (4.0 / 6.0) + cos(iTime)), .7*sin(M_2PI * (4.0 / 6.0) + cos(iTime)), 0.0);\n    vec4 v04 = vec4(-1., .7*cos(M_2PI * (5.0 / 6.0) + cos(iTime)), .7*sin(M_2PI * (5.0 / 6.0) + cos(iTime)), 0.0);\n    vec4 v05 = vec4(-1., .7*cos(M_2PI * (6.0 / 6.0) + cos(iTime)), .7*sin(M_2PI * (6.0 / 6.0) + cos(iTime)), 0.0);\n\n    // Top hexagon\n    vec4 v06 = vec4(+1., .7*cos(M_2PI * (1.0 / 6.0) + cos(iTime + 1.0)), .7*sin(M_2PI * (1.0 / 6.0) + cos(iTime + 1.0)), 0.0);\n    vec4 v07 = vec4(+1., .7*cos(M_2PI * (2.0 / 6.0) + cos(iTime + 1.0)), .7*sin(M_2PI * (2.0 / 6.0) + cos(iTime + 1.0)), 0.0);\n    vec4 v08 = vec4(+1., .7*cos(M_2PI * (3.0 / 6.0) + cos(iTime + 1.0)), .7*sin(M_2PI * (3.0 / 6.0) + cos(iTime + 1.0)), 0.0);\n    vec4 v09 = vec4(+1., .7*cos(M_2PI * (4.0 / 6.0) + cos(iTime + 1.0)), .7*sin(M_2PI * (4.0 / 6.0) + cos(iTime + 1.0)), 0.0);\n    vec4 v10 = vec4(+1., .7*cos(M_2PI * (5.0 / 6.0) + cos(iTime + 1.0)), .7*sin(M_2PI * (5.0 / 6.0) + cos(iTime + 1.0)), 0.0);\n    vec4 v11 = vec4(+1., .7*cos(M_2PI * (6.0 / 6.0) + cos(iTime + 1.0)), .7*sin(M_2PI * (6.0 / 6.0) + cos(iTime + 1.0)), 0.0);\n\n    if (!interpolateHexagonalPrism(p, v00, v01, v02, v03, v04, v05, v06, v07, v08, v09, v10, v11)) return vec4(0.0);\n    \n    // data values weighted by barycentrics\n    float time = iTime*4.f;\n    float val00 = (.5 + .5 * cos(time*0.1)) * v00.w;\n    float val01 = (.5 + .5 * cos(time*0.2)) * v01.w;\n    float val02 = (.5 + .5 * cos(time*0.3)) * v02.w;\n    float val03 = (.5 + .5 * cos(time*0.4)) * v03.w;\n    float val04 = (.5 + .5 * cos(time*0.5)) * v04.w;\n    float val05 = (.5 + .5 * cos(time*0.6)) * v05.w;\n    float val06 = (.5 + .5 * cos(time*0.1)) * v06.w;\n    float val07 = (.5 + .5 * cos(time*0.2)) * v07.w;\n    float val08 = (.5 + .5 * cos(time*0.3)) * v08.w;\n    float val09 = (.5 + .5 * cos(time*0.4)) * v09.w;\n    float val10 = (.5 + .5 * cos(time*0.5)) * v10.w;\n    float val11 = (.5 + .5 * cos(time*0.6)) * v11.w;\n    \n    float val = val00 + val01 + val02 + val03 + val04 + val05 + val06 + val07 + val08 + val09 + val10 + val11;\n    \n    // Colormapped value and a hardcoded optical density\n    return vec4(viridis(val) * EXPOSURE, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = 0.25*iTime + 6.283185*iMouse.x/iResolution.x;\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n        \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tfor(int i=0; i<NUM_STEPS; i++)\n\t{\n\t\tvec4 rgbd = query(p);\n        float density = rgbd[3];\n        float rho = 1.0 - exp(-density * step);\n        color = over(color, vec4(rgbd.xyz, rho));\n        if (color.a > .95) break;\n\t\tp += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n\n}\n","name":"Image","description":"","type":"image"}]}