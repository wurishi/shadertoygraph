{"ver":"0.1","info":{"id":"ctBSDc","date":"1676656548","viewed":267,"name":"Simple spherical shading","username":"mrange","description":"CC0: Simple spherical shading\nI wanted spherical shading with no ray trace step\n","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["2d","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC0: Simple spherical shading\n//  I wanted spherical shading with no ray trace step\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\nvec3 effect(vec2 p, vec2 pp) {\n  const vec3 lightDir = normalize(vec3(1.0, 1.5, 2.0));\n  vec3 col = vec3(0.025);\n\n  float r = 0.75;\n\n  float aa = 2.0/RESOLUTION.y;\n  float z2 = (r*r-dot(p, p));\n  if (z2 > 0.0) {\n    float z = sqrt(z2);\n    vec3 cp = vec3(p, z);\n    vec3 cn = normalize(cp);\n    float cd= max(dot(lightDir, cn), 0.0);\n    \n    vec3 ccol = col;\n    ccol = cd*cd*vec3(1.0);\n    float d = length(p)-r;\n    col = mix(col, ccol, smoothstep(aa, -aa, d+0.0));\n  }\n  col *= smoothstep(1.5, 0.5, length(pp));\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp =p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.05);\n  col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}