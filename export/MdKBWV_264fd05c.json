{"ver":"0.1","info":{"id":"MdKBWV","date":"1530641405","viewed":399,"name":"perf test: Gaussian/Cos/Spline","username":"FabriceNeyret2","description":"Ugly fast test.  2D-Gaussian is 30% cheaper than cos and product of splines. \nbut factored spline is 13% even cheaper.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["optimization","perf","gpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 1e5\n#define C 31\n\n#define S(v) smoothstep(1.,0.,v)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) /R.y;\n    float l;\n    O-=O;\n    for (int i=0; i<int(N); i++) {\n        vec2 V = U+float(i)/N;\n#if C==1\n        V*=2.; O += exp(-dot(V,V));                // 3.5 fps\n#elif C==11\n        V*=2.; O += exp(-V.x*V.x)*exp(-V.y*V.y);   // 2.4 fps - separated\n#elif C==12\n        V*=2.; l = dot(V,V); O += l < 1. ? exp(-l) : 0.; // 2.5 fps - clamped\n#elif C==2\n        O += .5+.5*cos(min(1.,dot(V,V))*3.1416);   // 3.2 fps (quite different) \n#elif C==21\n        O += .5+.5*cos(min(1.,length(V))*3.1416);  // 2.5 fps\n#elif C==3\n        V = S(abs(V)*1.0001); O += V.x*V.y;        // 2.4 fps - separated\n#elif C==31\n        O += S(length(V)*1.0001);                  // 4. fps\n#endif\n    }\n    O /= N;\n    O = vec4(4.*O.x < U.y);\n}","name":"Image","description":"","type":"image"}]}