{"ver":"0.1","info":{"id":"4XBGzD","date":"1708233142","viewed":51,"name":"ColourBars_ShaderAssignment2","username":"jessesound","description":"Bunch of gyat dang color bars maybe","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["sound","colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mdd3WB","filepath":"https://on.soundcloud.com/AVJTP","previewfilepath":"https://on.soundcloud.com/AVJTP","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//adding the following comments because I followed Blackle's tutorials to get started, and I don't want to be slammed for not crediting people???\n//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n#define freq(f) texture(iChannel0, vec2(f, 0.15)).x * 0.9\nfloat piston(vec2 p, float width, float height) {\n    p.x = abs(p.x) - width;\n    p.y -= height;\n    return length(max(p,0.0)) + min(0.0, max(p.x,p.y));\n}\n\n\n\nfloat scene(vec2 p, float h, float w) {\n    float center = floor(p.x) + 0.5;\n    float neighbour = center + ((p.x < center) ? -1.0 : 1.0);\n\n    float width = w + 0.15;\n    float height = h +sin( iChannelTime[0]*.5 +center) ;\n    float me = piston(p - vec2(center, 0), width, height);\n    float next = piston(p - vec2(neighbour, 0), width, 2.0);\n    return min(me, next);\n}\n\nvec3 shadeDistance(float d, float medf,float topf, float bassFreq) {\n    float dist = d*100.0;\n    float banding = max(sin(dist), 0.0);\n    float strength = sqrt(1.-exp(-abs(d)*2.));\n    float pattern = mix(strength, banding, (0.16-abs(strength-0.5))*0.3);\n    \n    vec3 color = vec3(pattern);\n    \n    color *= d > 0.0 ? vec3(1.0,sin(smoothstep(medf, topf, iTime)) ,bassFreq) : vec3(medf,topf,bassFreq);\n\n    return color;\n}\nfloat avgFreq(float start, float end, float smoothstep) {\n    float div = 0.0;\n    float total = 0.0;\n    for (float pos = start; pos < end; pos += smoothstep) {\n        div += 1.0;\n        total += freq(pos);\n    }\n    return total / div;\n}    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.85);\n    float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n    float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.95);\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n     float angle = bassFreq; // You can change this to a different time-dependent value\n    mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv *= rotationMatrix;\n\n    uv *= 5.0;\n    \n    vec3 col = shadeDistance(scene(uv, bassFreq, medFreq), medFreq, topFreq, bassFreq);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}