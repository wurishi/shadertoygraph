{"ver":"0.1","info":{"id":"tdcSz7","date":"1571670398","viewed":127,"name":"2D Cantor Dust","username":"SSHantaram","description":"animated visualization of the cantor set adapted for 2D","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv (0, 0) is at the center of the screen\n    // top at x = 0.5, bottom at x = -0.5\n    // left and right border according to aspect ratio\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    // zoom out a little to see the whole thing\n    uv *= 1.4;\n    \n    int iterations = 10;\t// number of iterations\n    \n    // this is to keep track of the overall scale to normalize the distance later\n    float scale = 1.0;\t\t\n    \n    // in each step the intervall between -0.5 and 0.5 is transformed\n    // according to the construction of the cantor set\n    // this is done for both x and y to make it 2D\n    for (int i = 0; i < iterations; i++)\n    {\n        uv = abs(uv);\t// mirror along 0\n        uv *= 3.0;\t\t// scale by 3\n        uv -= 1.0;\t\t// move each part 1 unit outward\n        scale *= 3.0;\t// keep track of scale\n    }\n    \n    // distance from cantor set in x and y direction normalized with scale\n    // the clamp part is only necessary for very few iterations\n    // for more than 5 iterations \"vec2 d = abs(uv)/scale;\" would be fine\n    vec2 d = abs(uv - clamp(uv, -0.5, 0.5))/scale;\n    \n    // calculate animated texture coordinates based on distance\n    vec2 texCoord = vec2(length(d), 0.2)*2.0 + iTime*0.01;\n\n    vec3 col = texture(iChannel0, texCoord).rgb;\t// sample texture\n    \n    // by adding in the x and y distance we get more vibrant colors\n    // and an interesting variation between vertical and horizontal\n    col.xy += d*0.7;\n\n    fragColor = vec4(col,1.0);\t// draw to screen\n}","name":"Image","description":"","type":"image"}]}