{"ver":"0.1","info":{"id":"3ssBWr","date":"1655664127","viewed":134,"name":"IntegerMandelTest","username":"BrunoLevy","description":"Tests for FPGA Mandelbrot (prototyping in ShaderToy)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int width  = 256;\nconst int height = 256;\nconst int mandel_shift = 6;\nconst int mandel_bits  = 14;\nconst int mandel_mul = (1 << mandel_shift);\nconst int mandel_mask = (1 << mandel_bits)-1;\nconst int xmin = -2*mandel_mul;\nconst int xmax =  2*mandel_mul;\nconst int ymin = -2*mandel_mul;\nconst int ymax =  2*mandel_mul;\nconst int dx = (xmax-xmin)/(width-1);\nconst int dy = (ymax-ymin)/(height-1);\n\nvec4 rgb_out(int R, int G, int B) {\n    return vec4(\n        float(R & 15)/15.0, \n        float(G & 15)/15.0, \n        float(B & 15)/15.0, \n        1.0\n    );\n}\n\nint mask(int x) {\n    return (x > 0) ? (x & mandel_mask) : -(-x & mandel_mask); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float W = min(iResolution.x, iResolution.y)/float(width);\n    int X = int(fragCoord.x/W);\n    int Y = int(fragCoord.y/W);\n         \n    if(X >= width || Y >= height) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n      int C_real = xmin + X*dx;\n      int C_imag = ymin + Y*dy;\n      int Z_real, Z_imag, Z_norm;\n      Z_real = C_real;\n      Z_imag = C_imag;\n      int exit_iter = -1;\n      for(int i=0; i<32; ++i) {\n          int Zrr = mask(Z_real * Z_real) >> mandel_shift;\n          int Zii = mask(Z_imag * Z_imag) >> mandel_shift;\n          // int a = mask(Z_imag - Z_real);\n          // int Zri = mask(Zrr + Zii - (mask(a*a) >> mandel_shift));\n          int Zri = mask(Z_real * Z_imag) >> (mandel_shift-1);\n          Z_real = mask(mask(Zrr - Zii) + C_real);\n          Z_imag = mask(Zri + C_imag);\n\n          Z_norm = mask(Zrr + Zii);\n          if(exit_iter == -1 && Z_norm > (4 << mandel_shift)) {\n              exit_iter = i;\n          }\n      }\n      exit_iter = exit_iter >> 1;  \n      fragColor = rgb_out(exit_iter+1, exit_iter+1, min(exit_iter+5, 15));\n      //fragColor = rgb_out(Z_real, Z_imag, exit_iter);\n    }\n}     \n ","name":"Image","description":"","type":"image"}]}