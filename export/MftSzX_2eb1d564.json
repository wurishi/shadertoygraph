{"ver":"0.1","info":{"id":"MftSzX","date":"1714266379","viewed":73,"name":"YCbCr (De|En)coding Reference","username":"Tynach","description":"Demonstrates a common video editing mistake, where the YCbCr (or YUV) color matrix used to encode video isn't tagged, and is then guessed incorrectly.\n\nFor encoding into YCbCr:\nLeft: BT.601\nRight: BT709\n\nFor decoding into RGB:\nTop: BT.601\nBottom: BT.709","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bug","reference","demonstration","yuv","ycbcr","comparison","encoding","problem","mistake","decoding","wrong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Kg(Kb, Kr) (1.0 - Kb - Kr)\n\n#define ToYCbCrMat(Kb, Kr) mat4(\\\n\t-0.5*Kr/(1.0 - Kb), Kr, 0.5, 0,\\\n\t-0.5*Kg(Kb, Kr)/(1.0 - Kb), Kg(Kb, Kr), -0.5*Kg(Kb, Kr)/(1.0 - Kr), 0,\\\n\t0.5, Kb, -0.5*Kb/(1.0 - Kr), 0,\\\n\t0.5, 0, 0.5, 1)\n\n#define FrYCbCrMat(Kb, Kr) mat4(\\\n\t0, -Kb/Kg(Kb, Kr)*(2.0 - 2.0*Kb), 2.0 - 2.0*Kb, 0,\\\n\t1, 1, 1, 0,\\\n\t2.0 - 2.0*Kr, -Kr/Kg(Kr, Kb)*(2.0 - 2.0*Kr), 0, 0,\\\n\tKr - 1.0, Kr*(2.0 - 2.0*Kr)/Kg(Kb, Kr) + Kb - Kr, Kb - 1.0, 1)\n\nconst mat4 to601 = ToYCbCrMat(0.114, 0.299);\nconst mat4 fr601 = FrYCbCrMat(0.114, 0.299);\n\nconst mat4 to709 = ToYCbCrMat(0.0722, 0.2126);\nconst mat4 fr709 = FrYCbCrMat(0.0722, 0.2126);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 texRes = vec2(textureSize(iChannel0, 0));\n\n\t// Show the same part of the texture 4 times in a grid\n\tvec2 uv = mod(fragCoord, iResolution.xy/2.0)/texRes;\n\tuv *= min(texRes.x/iResolution.x, texRes.y/iResolution.y)*2.0;\n\n\t// Get color of texture, but set alpha to 1 so YUV matrices work\n\tvec4 color = vec4(texture(iChannel0, uv).rgb, 1);\n\n\t// Calculate which quadrant is being computed\n\tint quadrant = int(dot(round(fragCoord/iResolution.xy), vec2(1.0, 2.0)));\n\n\t// Modify each quadrant (left to right, bottom to top)\n\t// BT.601 encoding on the left, BT.709 encoding on the right\n\t// BT.601 decoding on the top, BT.709 decoding on the bottom\n\tcolor = mix(fr709*to601*color, color, bvec4(quadrant - 0));\n\tcolor = mix(fr709*to709*color, color, bvec4(quadrant - 1));\n\tcolor = mix(fr601*to601*color, color, bvec4(quadrant - 2));\n\tcolor = mix(fr601*to709*color, color, bvec4(quadrant - 3));\n\n\t// Output to screen\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}]}