{"ver":"0.1","info":{"id":"ddSBWW","date":"1689702957","viewed":168,"name":"Drive Shader ","username":"srlechuga18","description":"Im just learning","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["glass","rain","learn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n\nstruct ray{\n    vec3 o, d;\n};\n\n//pseudo random\nfloat N(float t){\n    return fract(sin(t*3456.)*6543.);\n}\n\nvec4 N14(float t){\n    return fract(sin(t*vec4(123., 1024.,3456., 5674.))*vec4(6543., 345. ,8766. ,5342.));\n}\n\n//set camera vectors, interzection point and return direction ray\nray CameraSetup(vec2 uv, vec3 camPos, vec3 lookAt, float zoom){\n    ray cam;\n    cam.o = camPos;\n    vec3 f = normalize(lookAt - camPos);\n    vec3 r = cross(vec3(0.,1.,0.), f);\n    vec3 u = cross(f,r);\n    vec3 c = cam.o + f * zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    \n    cam.d = normalize(i-cam.o);\n    return cam;\n}\n\nvec3 ClosestPoint(ray r, vec3 p){\n    return r.o + max(0., dot(p-r.o, r.d)) * r.d;\n}\n\nfloat DistRay(ray r, vec3 p){\n    return length(p - ClosestPoint(r,p));\n}\n\nfloat Bokeh(ray r, vec3 p, float size, float blur){\n    //get distance between point and ray\n    float d = DistRay(r,p);\n    \n    //set equal size despite the z value\n    size *= length(p);\n    \n    //get smooth step for circle\n    float c = S(size,size*(1.-blur),d);\n    \n    //set center of circle\n    c *= mix(.6, 1.,S(size*.8, size, d));\n    return c;\n}\n\nvec3 Streetlights(ray r, float t){\n    //get side of screen\n    float side = step(r.d.x, 0.);\n    \n    //repeat left and right side\n    r.d.x = abs(r.d.x);\n    \n    float s = 1./10.;\n    float m = 0.;\n    \n    //repeat circle every 1/10 of secound\n    for(float i  = 0.; i < 1.; i+=s){\n        // set diferent time depending on the side\n        float ti = fract(t+i+side*s*.5); \n        //calculate position of light\n        vec3 p = vec3(2.,2.,100.-ti*100.);\n        \n        //create light and add it to the final color\n        m += Bokeh(r,p,.05,0.2) * ti * ti * ti;\n        \n    }\n    \n    //colorized\n    return vec3(1.,.7,.3) * m;\n}\n\nvec3 Envlights(ray r, float t){\n    float side = step(r.d.x, 0.);\n    \n    r.d.x = abs(r.d.x);\n    \n    float s = 1./10.;\n    float m = 0.;\n    vec3 c = vec3(0.);\n    \n    for(float i  = 0.; i < 1.; i+=s){\n        float ti = fract(t+i+side*s*.5); \n        vec4 n = N14(i+side*100.);\n        \n        float fade = ti*ti*ti;\n        float occlusion = sin(ti*6.28*10.*n.x)*.5+.5;\n        fade = occlusion;\n        float x = mix(2.5, 10.,n.x);\n        float y = mix(.1, 1.5, n.y);\n        vec3 p = vec3(x,y,50.-ti*50.);\n        vec3 col = n.wzy;\n        \n        c += Bokeh(r,p,.05,0.2) * fade * col * .3;\n        \n    }\n    \n    return c;\n}\n\nvec3 Headlights(ray r, float t){\n    \n    t *= 2.;\n    float w1 = .25;\n    float w2 = w1*1.2;\n\n    float s = 1./30.;\n    float m = 0.;\n    \n    for(float i  = 0.; i < 1.; i+=s){\n    \n        float n = N(i);\n        if(n > .1) continue;\n        float ti = fract(t+i); \n        float z = 100.-ti*100.;\n        float fade = ti*ti*ti*ti*ti;\n        float focus = S(.9, 1. , ti);\n        \n        float size = mix(.05, .03, focus); \n        \n        m += Bokeh(r,vec3(-1.-w1,.15,z),size,0.2)*fade;\n        m += Bokeh(r,vec3(-1.+w1,.15,z),size,0.2)*fade;\n        \n        m += Bokeh(r,vec3(-1.-w2,.15,z),size,0.2)*fade;\n        m += Bokeh(r,vec3(-1.+w2,.15,z),size,0.2)*fade;\n        \n        float ref = 0.;\n        ref += Bokeh(r,vec3(-1.-w2,-.15,z),size*3.,1.)*fade;\n        ref += Bokeh(r,vec3(-1.+w2,-.15,z),size*3.,1.)*fade;\n        \n        m += ref * focus;\n    }\n    \n    //colorized\n    return vec3(.9,.9,1.) * m;\n}\n\nvec3 Taillights(ray r, float t){\n    \n    t*= .25;\n    float w1 = .25;\n    float w2 = w1*1.2;\n\n    float s = 1./15.;\n    float m = 0.;\n    \n    for(float i  = 0.; i < 1.; i+=s){\n    \n        float n = N(i);\n        \n        if(n > .5) continue;\n        \n        float lane = step(.25, n);\n        \n        float ti = fract(t+i); \n        float z = 100.-ti*100.;\n        float fade = ti*ti*ti*ti*ti;\n        float focus = S(.9, 1. , ti);\n        \n        float size = mix(.05, .03, focus); \n        float laneShift = S(1.,.96,ti);\n        float x = 1.5 - lane * laneShift;\n        \n        float blink = step(0.,sin(t*1000.)) * 7. * lane * step(.96,ti);\n        \n        m += Bokeh(r,vec3(x-w1,.15,z),size,0.2)*fade;\n        m += Bokeh(r,vec3(x+w1,.15,z),size,0.2)*fade;\n        \n        m += Bokeh(r,vec3(x-w2,.15,z),size,0.2)*fade;\n        m += Bokeh(r,vec3(x+w2,.15,z),size,0.2)* fade * (1. + blink);\n        \n        float ref = 0.;\n        ref += Bokeh(r,vec3(x-w2,-.15,z),size*3.,1.)*fade;\n        ref += Bokeh(r,vec3(x+w2,-.15,z),size*3.,1.)*fade * (1. + blink * .1);\n        \n        m += ref * focus;\n    }\n    \n    return vec3(1.,.1,.03) * m;\n}\n\nvec2 Rain(vec2 uv, float t){\n    uv.y *= -1.0;\n    uv.x *= uv.y * 0.2 + 1.2;\n    t *= 40.;\n    vec2 a = vec2(3.,1.);\n    vec2 st = uv*a;\n    \n    vec2 id = floor(st);\n    st.y += t*.25;\n    \n    float n = fract(sin(id.x*716.34)*768.34);\n    st.y += n;\n    uv.y += n;\n    id = floor(st);\n    st = fract(st) -.5;\n    \n    t += fract(sin(id.x*716.34 + id.y*1453.7)*768.34) * 6.28;\n    float y = -sin(t + sin(t + sin(t) * .5)) * .43;\n    \n    float noiseX = clamp(fract(sin(id.y*716.34)*768.34) - .5, -.3,.3);\n    vec2 p1 = vec2(0,y);\n    p1.x += noiseX;\n    vec2 o1 = (st-p1)/a;\n    float d = length(o1);\n    float m1 = S(.07,.0,d);\n    \n    vec2 p2 = vec2(.5,.5);\n    p2.x += noiseX;\n    vec2 o2 = (fract(uv*a.x*vec2(1.,2.)) - p2) / vec2(1.,2.);\n    d = length(o2);\n    float m2 = S(.25*(.5-st.y),.0,d) * S(-.1,.1,st.y-p1.y);\n    //if(st.x > .46 || st.y > .49) m1 = 1.;\n    return vec2(m1*o1*30. + m2*o2*10.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //aspect radio\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //cam position and point to look at\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    \n    vec3 camPos = vec3(0.5,0.2,0.);\n    vec3 lookAt = vec3(0.5,0.2,1.);\n    //set time\n    float t = iTime * .075 +m.x;\n    \n    vec2 rainDist = Rain(uv*5.,t) * .5;\n    rainDist += Rain(uv*7.,t)*.5;\n    \n    uv.x += sin(uv.y*70.)*.005;\n    uv.y += sin(uv.x*170.)*.003;\n    //cam setup\n    ray r = CameraSetup(uv - rainDist*.5, camPos, lookAt, 2.);\n    \n    vec3 col = Streetlights(r,t);\n    col += Headlights(r,t);\n    col += Taillights(r,t);\n    col += Envlights(r,t);\n    \n    col += (r.d.y + .25) * vec3(.2,.1,.5);\n    \n    //col = vec3(rainDist, 0.);\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}