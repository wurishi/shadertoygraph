{"ver":"0.1","info":{"id":"tllSWN","date":"1563052119","viewed":122,"name":"Old School","username":"badgerint","description":"My first shader. Not very impressive but you've gotta start somewhere right!!!!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rasterbars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 pos, vec2 pixel, float radius) {\n    return smoothstep(radius, radius * 0.6, distance(pos, pixel));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rgb = vec3(0.);\n    \n    float frequency = 2.;\n    float amplitude = 0.2;\n    float speed = 2.;\n    float rh = 0.07;\n\n    float sr = (sin((iTime * speed) + uv.x * frequency)) * amplitude;\n    float sg = (sin(((iTime + .2) * speed) + uv.x * frequency)) * amplitude;\n    float sb = (sin(((iTime + .4) * speed) + uv.x * frequency)) * amplitude;\n    \n    sr += cos((iTime + sin(uv.x)) * .6) * 0.2;\n    sg += cos((iTime + sin(uv.x)) * .6) * 0.2;\n    sb += cos((iTime + sin(uv.x)) * .6) * 0.2;\n    \n    rgb.r += smoothstep(sr + rh, sr, uv.y) - smoothstep(sr, sr - rh, uv.y);\n    rgb.g += smoothstep(sg + rh, sg, uv.y) - smoothstep(sg, sg - rh, uv.y);\n    rgb.b += smoothstep(sb + rh, sb, uv.y) - smoothstep(sb, sb - rh, uv.y);\n    \n\n    for(float i = 0.; i < 45.; i++) {\n    \tfloat cx = cos((iTime * cos(clamp(iTime * 0.019, 0.7, 0.8)) * 2.) + i * 0.08) * 0.8;\n    \tfloat cy = sin((iTime * sin(clamp(iTime * 0.01, 0.8, 0.9)) * 1.2) + i * 0.06) * 0.4;    \n        \n\t    rgb += circle(vec2(cx, cy), uv, 0.05) * 0.97;\n    }    \n\n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}