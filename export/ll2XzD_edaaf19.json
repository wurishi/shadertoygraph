{"ver":"0.1","info":{"id":"ll2XzD","date":"1442321875","viewed":200,"name":"cravo-CheckerBoggle","username":"cravo","description":"Eye-boggling :-)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // default background colour\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \n    // start with a circle in the middle of the screen\n    vec2 circleCentre = vec2(iResolution.xy) * 0.5;\n    float angleSign = 1.0; // which way round the circle is going\n    float width = 32.0; // how thick the lines are\n    float checkerStep = (18.0/180.0) * 3.14159; // frequency of checkerboard\n    float radius = iResolution.y + (width * 2.0);\n    float wibbly = 1.0; // how \"wibbly\" the effect is, where 0.0 is just circles, no wibblyness\n    \n    for(float i = 0.0; i < 30.0; ++i)\n    {\n        if ( radius < width ) continue;\n        \n        vec2 delta = fragCoord.xy - circleCentre;\n        float baseAngle = atan(delta.y, delta.x);\n        float angle = baseAngle + iTime * angleSign;\n        vec2 dir = normalize(delta);\n        delta += wibbly * dir * sin(iTime * 4.0) * (width) * sin((baseAngle + iTime) * 6.0);\n        \n        float dist = length(delta);\n\n        if ( dist < radius && dist > radius - width)\n        {\n            float prop = (dist - (radius - width)) / width;\n            float c = 1.0 - abs(prop - 0.5);\n            c = c * c;\n            \n            \n            if (mod(i,2.0) == 0.0 )\n            {\n\t            if ( mod(angle,checkerStep) > checkerStep / 2.0 )\n    \t        {\n                \tc *= 0.5;\n                }\n            }\n            else\n            {\n\t            if ( mod(angle,checkerStep) < checkerStep / 2.0 )\n    \t        {\n                \tc *= 0.5;\n                }\n            }\n            \n            vec2 q = fragCoord / iResolution.xy;\n            float mul = (c * 0.5);\n            fragColor = vec4(c + mul * sin(q.x + iTime), c + mul * cos(q.y + iTime), c + mul * sin(q.x + q.y + iTime), 1.0);\n        }\n        \n        radius -= width;\n        \n        angleSign = -angleSign;\n    }\n}","name":"","description":"","type":"image"}]}