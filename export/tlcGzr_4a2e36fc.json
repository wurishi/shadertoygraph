{"ver":"0.1","info":{"id":"tlcGzr","date":"1575456862","viewed":309,"name":"Basic : Colorful Pseudofluid","username":"Gijs","description":"Basically took Wyatt Flanders's pseudo-fluid and split the mass field from the velocity&pressure field so pretty colors could be enabled. Red goes down and blue goes up! Use your mouse!","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["fluid","pseudo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 vp = texelFetch(iChannel0,ivec2(gl_FragCoord.xy),0);\n    vec4 m = texelFetch(iChannel1,ivec2(gl_FragCoord.xy),0);  \n    \n    if(VIEW==1){\n        fragColor = vec4(m.x, m.y, m.z, m.x + m.y + m.z);\n    }else{\n        fragColor = vec4(abs(vp.x)*.5,abs(vp.y)*.5,-vp.z,1);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//This buffer stores and updates velocity and pressure\n//velocity in .xy\n//presure in .z\n\nvec4 get(sampler2D s, vec2 p){\n    return texture(s,p/iResolution.xy);\n}\n\nvec3 getVelocityPressure(vec2 p){\n    return get(iChannel0,p).xyz;\n}\n\nvec4 getMass(vec2 p){\n    return get(iChannel1,p);\n}\n\nvec2 getOld(vec2 p) {\n\treturn p - getVelocityPressure(p).xy*dt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = fragCoord.xy;\n    \n    //within this is advection baked\n    vec2 c = getOld(p);\n    vec2 n = getOld(p+vec2( 0, 1));\n    vec2 s = getOld(p+vec2( 0,-1));\n    vec2 e = getOld(p+vec2( 1, 0));\n    vec2 w = getOld(p+vec2(-1, 0));\n    \n    vec3 vp  = getVelocityPressure(c);\n    vec3 vpN = getVelocityPressure(n);\n    vec3 vpS = getVelocityPressure(s);\n    vec3 vpE = getVelocityPressure(e);\n    vec3 vpW = getVelocityPressure(w);\n    \n    //update pressure\n        float newPressure = vp.z;\n        //viscosity\n        float laplacianPressure = (vpN.z + vpS.z + vpW.z + vpE.z - 4.*vp.z);\n        newPressure += laplacianPressure*viscosity*dt;\n        //continuity\n        float divVelocity = (vpE.x -vpW.x + vpN.y - vpS.y)*.5;\n        newPressure += -divVelocity*dt;\n    \n    //update velocity\n        vec2 newVelocity = vp.xy;\n        vec2 Force = vec2(0);\n        vec2 gradPressure = vec2(vpE.z - vpW.z, vpN.z - vpS.z)*.5;\n        Force += -gradPressure*dt;\n        vec4 mass = getMass(c);\n        //red goes down\n        Force.y -= mass.r/50.*dt;\n        //blue goes up\n        Force.y += mass.b/50.*dt;\n        newVelocity += Force*dt;\n\n    //clamping of velocity, cannot exceed 1 but .8 gives best result\n    float l = length(newVelocity);\n    float m = .8;\n    if(l>m) \n        newVelocity /= l/m;\n    \n    //boundary condition\n    if(p.x<10.||p.y<10.||iResolution.x-p.x<10.||iResolution.y-p.y<10.)\n    \tnewVelocity *= 0.;\n    \n    //initial condition\n    if(iFrame==0)\n        newVelocity *= 0., newPressure *= 0.;\n    \n    fragColor = vec4(newVelocity,newPressure,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//this buffer stores and updates ''mass''\n//red mass in .r, green in .g, and blue .b\n\nvec3 palette(float t){\n    return 0.5 + 0.5*cos(t+vec3(0,.33,.66)*6.2830);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = fragCoord;\n    \t\n    vec2 velocity = texture(iChannel0, p/iResolution.xy).xy;\n    vec4 m = texture(iChannel1, (p-velocity)/iResolution.xy);\n    \n   \t//interactivity\n    if(iMouse.z>0. && distance(p,iMouse.xy)<10.){\n        m.xyz = palette(iTime)*iTimeDelta*100.;\n    }\n        \n    //start pos\n    if(iMouse.xy==vec2(0) && \n       distance(p,vec2(mod(iTime*iResolution.x*.1,iResolution.x),iResolution.y/2.)) < 10. \n      ){\n        m.xyz += palette(iTime)*iTimeDelta*10.;\n    }\n    \n    //boundary\n    if(p.x<10.||p.y<10.||iResolution.x-p.x<10.||iResolution.y-p.y<10.)\n    \tm *= 0.;\n    \n    m = clamp(m,vec4(0),vec4(100));\n    \n    fragColor = m;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//view 0 is mass view\n//view 1 is velocity&pressure view\nconst int VIEW = 1;\n\n\nfloat dt = .5;\nfloat viscosity = .5;","name":"Common","description":"","type":"common"}]}