{"ver":"0.1","info":{"id":"NlBGRd","date":"1624729705","viewed":122,"name":"2D Fluid Rotation Visualizer","username":"ccincotti3","description":"Positive '2d-curl' in our case signifies fluid rotation in the counter clockwise direction\nGreen represents positive 2d-curl, red is negative.\nThe bright squares are where there is 0 2d-curl, and thus there is no rotational aspect.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fluid","curl","calculus","multivariable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 field(vec2 uv) {\n    float y = uv.y;\n    float x = uv.x;\n    float v1 = pow(y, 3.) - 9.*y; // x component of vector field\n    float v2 = pow(x, 3.) - 9.*x; // y component of vector field\n    return vec2(v1, v2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col;\n\n    \n    // BACKGROUND\n    vec2 v = field(uv);\n    \n    // -- Take derivatives with respect to x and y\n    float dv1 = dFdy(v.x);\n    float dv2 = dFdx(v.y);\n    \n    // -- calculate '2d curl'\n    float c = dv2 - dv1;\n    \n    // -- build background\n    // Positive '2d-curl' in our case signifies flow in the counter clockwise direction\n    // Green represents where we find positive 2d-curl.\n    // Red represents where we find negative 2d-curl.\n\n    float pos = sign(c);\n    if(pos > 0.) {\n        col = vec3(c, 1., c); // green background\n    } else {\n        col = vec3(1., abs(c), abs(c)); // red background\n    }\n    \n    // FLOW\n    vec2 p = uv*10.+0.5; // create grid\n    vec2 fp = fract(p)-0.5; // uv coords WITHIN each box 0.5 <> 0.5\n    vec2 id = floor(p); // coords OF each box (x,y)\n\n\n    // This was the result of playing around until something looked nice\n    // The janky animation was fixed by just speeding everything up.\n    for(int y=-10;y<=10;y++){\n        for(int x=-10; x<=10;x++) {\n            vec2 offs = vec2(x, y);\n            vec2 w = field(id);//id+offs);\n            vec2 nw = normalize(w);\n            \n            float d = length(fp-offs-nw*1.*mod(iTime, .1)/0.1);\n            float m = smoothstep(1., 0.1, d);\n            col -= m*0.8;\n        }\n    }\n    \n    // grid lines to make the bad animation be less in your face.\n    if(fp.x > .43 || fp.y > .43) {\n        col = vec3(.2);\n    }\n\n    col = pow( col, vec3(1.0/2.2) );\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}