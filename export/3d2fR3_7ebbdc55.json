{"ver":"0.1","info":{"id":"3d2fR3","date":"1590776066","viewed":62,"name":"Heart12","username":"alexkrav","description":"Heart","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define HEART_COLOR vec3(1., .05, .05)\n\n// smoothing max function\n// uses smoothing when interpolating a, b\n// k - min/max coef (less - max, more - min)\nfloat smax(float a, float b, float k)\n{\n \tfloat h = clamp((b-a)/k+.5, 0., 1.);\n    return mix(a, b, h) + h*(1.-h)*k*.5;\n}\n\n// function that draws a Heart\n// uv - UV coordinates\n// b - blur\nfloat Heart(vec2 uv, float b) \n{\n \tfloat r = .25; // circle radius\n    b *= r;\n    \n    uv.x *= .7; // make circle wider\n    // apply function\n    uv.y -= smax(sqrt(abs(uv.x))*.5, b, .1);\n    uv.y += .1+b*.5; // put lower\n  \tfloat d = length(uv); // coordinates length\n    \n    // subtract low value, to make second param\n    // always lower (to avoid colors invertion)\n    return S(r+b, r-b-.01, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    // Use mouse coordinates (normalized to UV coords)\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    // Black color\n    vec3 col = vec3(0);\n    \n    // Draw a Heart\n    float c = Heart(uv, m.y);\n    \n    // Add red color\n    col = vec3(c*HEART_COLOR);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}