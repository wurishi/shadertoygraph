{"ver":"0.1","info":{"id":"ltyGDK","date":"1476747473","viewed":207,"name":"Guillotine Filter","username":"luluco250","description":"https://www.youtube.com/watch?v=Orlbo9WkZ2E\n\nDon't take this seriously.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","threshold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Smoother 0\n#define UseMouseThreshold 0\n\nfloat getNoise(vec2 uv);\nfloat blurNoise(vec2 uv);\n\nvoid mainImage(out vec4 col, in vec2 uv) {\n\tuv /= iResolution.xy;\n    col = vec4(vec3(0.0), 1.0);\n    \n    col.rgb = texture(iChannel0, uv).rgb;\n    \n    //float noise = getNoise(uv)));\n    //noise = smoothstep(0.9, 1.0, noise);\n    \n    float noise = smoothstep(0.9, 1.0, blurNoise(uv) * 1.9);\n    #if UseMouseThreshold\n    float threshold = iMouse.x / iResolution.x;\n    #else\n    float threshold = 0.85;\n    #endif\n    \n    #if Smoother\n    col.rgb = mix(vec3(noise), col.rgb, smoothstep(max(col.r, max(col.g, col.b)), 1.0, clamp(threshold + 0.135, 0.0, 1.0)));\n    #else\n    col.rgb = max(col.r, max(col.g, col.b)) >= threshold ? vec3(noise) : col.rgb;\n    #endif\n}\n\nfloat getNoise(vec2 uv) {\n    uv += vec2(sin(iTime));\n    return fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat blurNoise(vec2 uv) {\n    float noise = getNoise(uv);\n    for (int i = 1; i < 3; ++i) {\n        noise += getNoise(uv + vec2(1.0, 0.0) / iResolution.xy);\n        noise += getNoise(uv + vec2(0.0, 1.0) / iResolution.xy);\n        noise += getNoise(uv - vec2(1.0, 0.0) / iResolution.xy);\n        noise += getNoise(uv - vec2(0.0, 1.0) / iResolution.xy);\n    }\n    return noise * 0.083;\n}","name":"Image","description":"","type":"image"}]}