{"ver":"0.1","info":{"id":"3dV3R1","date":"1569727757","viewed":465,"name":"Bouncing ball, basic as it gets!","username":"izo","description":"As basic as it gets raytracer of a bouncing ball, with my favorite background that I discovered (like many others have) messing around with bitwise operators trying to create fractals, way back when I was 14yo. \n\nAnd some faux transparency. ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raytrace","ball","basics","sphereintersect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define radius .05 \n#define BGB false\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy; //Center on screen (-.5 to .5)\n\tuv.x = uv.x * (iResolution.x/iResolution.y); //Adjust x cord for aspect ratio\n\n\t\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    vec3 s = vec3(0.05, 0.05, abs(sin(iTime)/2.));\n    \n    float t = dot(s-ro, rd);\n    \n    vec3 p = ro + rd*t;\n    \n    float y = length(p-s);\n    \n    float x = sqrt(radius*radius - y*y);\n    \n    float t1 = x + t;\n    \n    float t2 = x - t;\n    \n    float dist = length(ro +rd*t1);\n    \n    float blink_bg = BGB ? abs(sin(iTime)) : 1.;\n    \n    vec3 ballcolor = bool(int(iTime)%10) ? vec3(1, .2, 0) \n        : vec3(float((int(fragCoord.x)*2)^(int(fragCoord.y)*2))/((iResolution.x*iResolution.y)/300.),.2,0);\n    \n  \tvec3 col = y > radius ? vec3(0,0,float(int(fragCoord.x)^int(fragCoord.y))/((iResolution.x*iResolution.y)/300./blink_bg) ) : //Generate background\n    \tmix(vec3(x*20. - dist), ballcolor, .4);//\"Raytraced\" ball\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}