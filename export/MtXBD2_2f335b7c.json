{"ver":"0.1","info":{"id":"MtXBD2","date":"1513337853","viewed":135,"name":"Line through 2 points","username":"rkibria","description":"Use the formula for distance from a point to a line.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","lines","primitive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\nfloat lineDistance(in vec2 M, vec2 P1, vec2 P2) {\n    float x1 = P1.x, y1 = P1.y;\n    float x2 = P2.x, y2 = P2.y;\n    float x0 = M.x, y0 = M.y;\n    float numer = abs((y2-y1)*x0 - (x2-x1)*y0 + x2*y1 - y2*x1);\n    float denom = length(P2 - P1);\n    return numer / denom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(0);\n\n    const vec2 cen = vec2(0.5);\n    const float radius = 0.4;\n    float sinT = sin(iTime);\n    float cosT = cos(iTime);\n    vec2 P1 = vec2(cen.x + radius * cosT, cen.y + radius * sinT);\n    vec2 P2 = vec2(cen.x, cen.y + radius * cosT);\n\n    const float dotsize = 0.02;\n    if (length(uv-P1) < dotsize) {\n         fragColor = vec4(1.0, 0., 0., 0.);\n \t}\n    else if (length(uv-P2) < dotsize) {\n         fragColor = vec4(1.0, 0., 0., 0.);\n    }\n    else {\n        float d = lineDistance(uv, P1, P2);\n        d = smoothstep(0., 1., d*100.0);\n        fragColor = vec4(d);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}