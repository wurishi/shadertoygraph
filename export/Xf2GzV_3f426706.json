{"ver":"0.1","info":{"id":"Xf2GzV","date":"1704423647","viewed":40,"name":"radar_scane","username":"brige","description":"learning shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\n#define MOV(a,b,c,d,t) (vec2(a*cos(t)+b*cos(0.1*(t)), c*sin(t)+d*cos(0.1*(t))))\n\nfloat customSmooth(float ir, float or) {\n    return 1.0 - smoothstep(or - 1.0, or + 1.0, ir);\n}\n\nfloat crossLine(vec2 uv, vec2 center, float radius) {\n    vec2 d = uv - center;\n    float r = length(d);\n    return r < radius && (abs(d.x) < 1.0 || abs(d.y) < 1.0) ? 1.0 : 0.0;\n}\n\nfloat cricle(vec2 uv, vec2 center, float radius, float width) {\n    float r = length(uv - center);\n    return customSmooth(r - width, radius) - customSmooth(r + width, radius);\n}\n\nfloat cricle2(vec2 uv, vec2 center, float radius, float width, float openning) {\n    vec2 d = uv - center;\n    float r = length(d);\n    d = normalize(d);\n    return abs(d.y) > openning ? customSmooth(r - width, radius) - customSmooth(r + width, radius) : 0.0;\n}\n\nfloat cricle3(vec2 uv, vec2 center, float radius, float width) {\n    float r = length(uv - center);\n    return customSmooth(r - width, radius) - customSmooth(r + width, radius);\n}\n\nfloat movingLine(vec2 uv, vec2 center, float radius)\n{\n    //angle of the line\n    float theta0 = 90.0 * iTime;\n    vec2 d = uv - center;\n    float r = sqrt( dot( d, d ) );\n    if(r<radius)\n    {\n        //compute the distance to the line theta=theta0\n        vec2 p = radius*vec2(cos(theta0*M_PI/180.0),\n                            -sin(theta0*M_PI/180.0));\n        float l = length( d - p*clamp( dot(d,p)/dot(p,p), 0.0, 1.0) );\n    \td = normalize(d);\n        //compute gradient based on angle difference to theta0\n   \t \tfloat theta = mod(180.0*atan(d.y,d.x)/M_PI+theta0,360.0);\n        float gradient = clamp(1.0-theta/90.0,0.0,1.0);\n        return customSmooth(l,1.0)+0.5*gradient;\n    }\n    else return 0.0;\n}\n\nfloat scanLine(vec2 uv, vec2 center, float radius) {\n   float theta0 = 90.0 * iTime;\n   vec2 d = uv - center;\n   float r = length(d);\n   if (r < radius) {\n       float tpi = theta0*M_PI/180.0;\n       vec2 p = radius * vec2(cos(tpi), -sin(tpi));\n       float l = length(d - p * clamp(dot(d, p)/ dot(p, p), 0.0, 1.0));\n       float theta = mod(180.0 * atan(d.y, d.x) / M_PI + theta0, 360.0);\n       float gradient = clamp(1.0 - theta/ 90.0, 0.0, 1.0);\n       return customSmooth(l, 1.0) + 0.5 * gradient;\n   }\n   \n   return 0.0;\n}\n\nfloat bip1(vec2 uv, vec2 center) {\n    float r = length(uv - center);\n    return customSmooth(r, 3.0);\n    \n}\n\nfloat bip2(vec2 uv, vec2 center) {\n    float r = length(uv - center);\n    float or = 8.0 + mod(87.0 * iTime, 80.0);\n    return (0.5 - 0.5 * sin(30. * iTime)) * customSmooth(r,5.0)\n          + customSmooth(6.0, r) - customSmooth(8.0, r)\n          + smoothstep(min(8.0, or - 20.0), or, r) - customSmooth(or, r);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy;\n    vec2 center = iResolution.xy * 0.5;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 finalColor = vec3(0.0);\n    vec3 color1 = vec3(1.0);\n    vec3 blue1 = vec3(0.74,0.95,1.00);\n    vec3 blue2 = vec3(0.87,0.98,1.00);\n    vec3 blue3 = vec3(0.35,0.76,0.83);\n    finalColor += crossLine(uv, center, 240.0) * 0.3;\n    finalColor += ( cricle(uv, center, 100.0, 0.5)\n                  + cricle(uv, center, 165.0, 0.5)) * blue1;\n    finalColor += cricle(uv, center, 240.0, 1.0) * blue2;\n    finalColor += cricle2(uv, center, 262.0, 1.0, 0.5 + 0.2 * sin(iTime)) * blue3;\n    finalColor += scanLine(uv, center, 240.0) * blue3;\n    if (length(uv - center) < 240.0) {\n    vec2 p = 130.0*MOV(1.3,1.0,1.0,1.4,3.0+0.1*iTime);\n        finalColor += bip1(uv, center + p) * vec3(1, 1, 1);\n        p = 130.0*MOV(0.9,-1.1,1.7,0.8,-2.0+sin(0.1*iTime)+0.15*iTime);\n        finalColor += bip2(uv, center + p) * vec3(1, 0, 0) * 0.8;\n    }\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}