{"ver":"0.1","info":{"id":"WsKczy","date":"1603147523","viewed":140,"name":"Hamburger!","username":"nadouttahere","description":"Hamburger made of rounded rectangles :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hamburger"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\n// This function was taken from Ruslan Shestopalyuk\nfloat sdRoundRect(vec2 pos, vec2 ext, vec4 cr) {\n  // select the radius according to the quadrant the point is in\n  vec2 s = step(pos, vec2(0.0));\n  float r = mix(\n    mix(cr.y, cr.z, s.y),  \n  \tmix(cr.x, cr.w, s.y),\n    s.x);\n  return length(max(abs(pos) + vec2(r) - ext, 0.0)) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\t\n\tvec3 bgCol = vec3(0.3);\n\tvec3 colBun = vec3(0.992, 0.776, 0.412);\n    vec3 colPatty = vec3(0.337, 0.227, 0.043);\n    vec3 colCheese = vec3(1.0, 0.776, 0.0);\n    vec3 colLettuce = vec3(0.435, 0.941, 0.227);\n    \n\tvec3 pixel = bgCol;\n\t\n    float minres = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - .5*iResolution.xy) / minres;\n    \n    // Input info\n    vec2 boxPos = vec2(0.5, 0.54); // The position of the center of the box (in normalized coordinates)\n    vec2 boxBnd = vec2(0.22, 0.03); // The half-bounds (radii) of the box (in normalzied coordinates)\n    float rad = 0.03; \n    \n    // Normalize the pixel coordinates (this is \"passTexCoords\" in your case)\n    vec2 coords = fragCoord/iResolution.xy;\n    vec2 aspectRatio = vec2(iResolution.x/iResolution.y, 1.0);\n    \n    // In order to make sure visual distances are preserved, we multiply everything by aspectRatio\n    coords *= aspectRatio;\n    \n    // Output to screen\n    float alphaPatty = length(max(abs(coords - vec2(0.5, 0.55) * aspectRatio) - vec2(0.22, 0.022) * aspectRatio, 0.0)) - 0.03;\n    float alphaCheese = length(max(abs(coords - vec2(0.5, 0.47) * aspectRatio) - vec2(0.22, 0.01) * aspectRatio, 0.0)) - 0.01;\n    float alphaTomato = length(max(abs(coords - vec2(0.5, 0.41) * aspectRatio) - vec2(0.2, 0.01) * aspectRatio, 0.0)) - 0.03;\n    float alphaLettuce = length(max(abs(coords - vec2(0.5, 0.34) * aspectRatio) - vec2(0.21, 0.008) * aspectRatio, 0.0)) - 0.02;\n    float alphaBun = length(max(abs(coords - vec2(0.5, 0.27) * aspectRatio) - vec2(0.21, 0.03) * aspectRatio, 0.0)) - 0.02;\n    \n\t// Shadertoy doesn't have an alpha in this case\n    if (alphaPatty <= 0.0){\n    \tpixel = colPatty;\n    } else if (alphaCheese <= 0.0) {\n        pixel = colCheese;\n    } else if (alphaTomato <= 0.0) {\n        pixel = vec3(1.0, 0.0, 0.0);\n    } else if (alphaLettuce <= 0.0) {\n        pixel = colLettuce;\n    } else if (alphaBun <= 0.0) {\n        pixel = colBun;\n    } else if (length(r) < 0.8 && r.y > uv.y + 0.1) {\n        pixel = colBun;\n    } else {\n        pixel = bgCol;\n    }\n    \n  \tfragColor = vec4(pixel, 1.0);\n}","name":"Image","description":"","type":"image"}]}