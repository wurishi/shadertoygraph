{"ver":"0.1","info":{"id":"mlVfWW","date":"1702089132","viewed":35,"name":"grid new","username":"jakedowns","description":"basic grid shader primitive","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["grid","gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Background color: dark purple\n    vec3 backgroundColor = vec3(0.1, 0.0, 0.2); // Dark purple\n\n    // Line color: slightly lighter purple\n    vec3 lineColor = vec3(0.2, 0.0, 0.4); // Slightly lighter purple\n\n    // Calculate grid lines\n    float lineThickness = 0.1; // Adjust line thickness here\n    float linesFrequency = 100.0; // Increase for more lines\n    float lineX = step(lineThickness, fract(uv.x * linesFrequency));\n    float lineY = step(lineThickness, fract(uv.y * linesFrequency));\n    float grid = min(lineX, lineY);\n\n    // Mix the colors based on grid value\n    vec3 col = mix(lineColor, backgroundColor, grid);\n\n    // Output to screen with half transparency\n    fragColor = vec4(col, 0.5); // Half transparent\n}\n","name":"Image","description":"","type":"image"}]}