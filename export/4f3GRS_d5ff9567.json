{"ver":"0.1","info":{"id":"4f3GRS","date":"1711817262","viewed":21,"name":"Ombres dures - Ali","username":"ALI2900","description":"Ombres dures TP3 ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n//cube \n// p : point\n// c : center of skeleton\n// r\n\nfloat Cube(vec3 p, vec3 c, float r)\n{\n  vec3 p1 = c + vec3(r,0,0);\n  vec3 p2 = c + vec3(-r,0,0);\n  vec3 p3 = c + vec3(0,r,0);\n  vec3 p4 = c + vec3(0,-r,0);\n  vec3 p5 = c + vec3(0,0,r);\n  vec3 p6 = c + vec3(0,0,-r);\n  float plan1 = Plane(p, p1, vec3(1.0,0,0));\n  float plan2 = Plane(p, p2, vec3(-1.0,0,0));\n  float plan3 = Plane(p, p3, vec3(0,1.0,0));\n  float plan4 = Plane(p, p4, vec3(0,-1.0,0));\n  float plan5 = Plane(p, p5, vec3(0,0,1.0));\n  float plan6 = Plane(p, p6, vec3(0,0,-1.0));\n  \n  float v = max(plan6,\n            max(plan5,\n            max(plan4,\n            max(plan3,\n            max(plan1, plan2)))));\n  \n  return v;\n  \n}\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n  float s1 = Sphere(p, vec3(-11.,3.,7.), 2.);\n  float c1 = Cube(p,vec3(-11.,3.,3.),2.);\n\n  v=Union(v, Union(\n    Sphere(p,vec3(0.,2.,3.),3.),Union(c1, s1)));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  return v;\n}\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\n\nconst float PI = 3.14159265359;\n\n//Ombres dures\nfloat ombredure(vec3 point, vec3 lightPos) {\n    vec3 toLight = lightPos - point;\n    float distanceToLight = length(toLight);\n    vec3 directionToLight = normalize(toLight);\n    \n    // Décale légèrement le point de départ pour éviter l'auto-ombrage\n    vec3 startPoint = point + ObjectNormal(point) * 0.01;\n    \n    bool hit;\n    int steps;\n    // On vérifie s'il y a un objet entre le point et la lumière\n    float t = SphereTrace(Ray(startPoint, directionToLight), distanceToLight, hit, steps);\n    \n    // Si on a un hit avant d'atteindre la lumière, le point est dans l'ombre\n    return hit ? 0.0 : 1.0;\n}\n\n\n\n\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n    // Position de la lumière\n    const vec3 lp = vec3(5.0, 10.0, 30.0);\n\n    // Direction de la lumière vers le point lumineux\n    vec3 l = normalize(lp - p);\n\n    // Couleur ambiante\n    vec3 ambient = 0.25 + 0.25 * Background(n);\n\n    // Calcul de l'ombre dure\n    float shadow = ombredure(p, lp);\n\n    // Diffusion de Phong\n    vec3 diffuse = 0.35 * clamp(dot(n, l), 0.0, 1.0) * vec3(1.0, 1.0, 1.0);\n\n    // Spéculaire\n    vec3 r = reflect(e, n);\n    vec3 specular = 0.15 * pow(clamp(dot(r, l), 0.0, 1.0), 35.0) * vec3(1.0, 1.0, 1.0);\n\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n  \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}