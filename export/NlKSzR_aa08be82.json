{"ver":"0.1","info":{"id":"NlKSzR","date":"1640080489","viewed":133,"name":"Sphere reflection by","username":"constantince","description":"a public show case","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["reflectionraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP    200\n#define START    0.0\n#define END    100.0\n#define PI    3.1415926535\n#define PRECISON    0.0005\n\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 spcular;\n    float alpha;\n};\n\nstruct Things {\n    int id;\n    float d;\n    Material m;\n};\n\nThings combine(Things o1, Things o2) {\n    if(o1.d < o2.d) return o1;\n    return o2;\n}\n\nMaterial createSphere(vec3 p) {\n    return Material(\n        0.5 * vec3(0.7, 0.5, 0),\n        0.6 * vec3(0.7, 0.7, 0),\n        0.6 * vec3(1, 1, 1),\n        12.0\n    );\n}\n\nMaterial createFloor(vec3 p) {\n    return Material(\n        vec3(\n            mod(floor(p.z) + floor(p.x), 2.0) * 1.0\n        ),\n        vec3(0.0),\n        vec3(0.0),\n        0.0\n    );\n}\n\nThings sdSphere(vec3 p, vec3 offset, float radius, Material m, int id) {\n    return Things(\n        id,\n        length(p - offset) - radius,\n        m\n    );\n}\n\nThings sdFloor(vec3 p, Material m, int id) {\n    return Things(id, p.y + 0.3, m);\n}\n\nThings scene(vec3 p) {\n    Things sphere = sdSphere(p, vec3(0.0, 0.0, 0.0), .5, createSphere(p), 1);\n    Things floors = sdFloor(p, createFloor(p), 2);\n\n    Things O = combine(sphere, floors);\n\n    return sphere;\n}\n\nThings rayMarch(vec3 ro, vec3 rd) {\n    float depth = START;\n    Things tar;\n    for(int i=0; i<MAX_STEP; i++) {\n        vec3 d = ro + rd * depth;\n        tar = scene(d);\n        depth += tar.d;\n        if( depth < PRECISON || depth > END) break;\n    }\n\n    return Things(0, depth, tar.m);\n}\n\nmat3 camera(vec3 ro, vec3 lp) {\n    vec3 camera_direction = normalize(  lp - ro );\n    vec3 camera_right = normalize(cross(camera_direction, vec3(0.0, 1.0, 0.0)));\n    vec3 camera_up = normalize(cross(camera_direction, camera_right));\n\n    return mat3(\n        camera_right,\n        -camera_up,\n        -camera_direction\n    );\n}\n\nvec3 phong(vec3 ld, vec3 rd, vec3 normal, Material m) {\n    vec3 ambient = texture(iChannel0, reflect(rd, normal)).rgb;\n\n    float fDot = clamp(dot(normal, ld), 0., 1.);\n    vec3 diffuse = fDot * m.diffuse;\n\n\n    vec3 reflection = reflect(normal, ld);\n    float sDot = clamp(dot(reflection, -rd), 0.0, 1.0);\n    vec3 specular = pow(sDot, m.alpha) * m.spcular;\n\n    return ambient + diffuse + specular;\n\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * scene(p + e.xyy).d +\n      e.yyx * scene(p + e.yyx).d +\n      e.yxy * scene(p + e.yxy).d +\n      e.xxx * scene(p + e.xxx).d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy)/ iResolution.y;\n    vec3 ro = vec3(cos(iTime * 0.1) * PI, 0.0, sin(iTime * 0.1) * PI);\n    vec3 lp = vec3(0.0);\n    vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1));\n    vec3 color = texture(iChannel0, rd).rgb;\n    Things O = rayMarch(ro, rd);\n\n    \n    \n    if( O.d < END) {\n        vec3 p = ro + rd * O.d;\n        vec3 ls = vec3(1.0, 1.0, 1.0);\n        vec3 ld = normalize(ls - p);\n        vec3 normal = normalize(calcNormal(p));\n        color = phong(ld, rd, normal, O.m);\n    }\n        \n    \n\n    //color = mix(color, vec3(0.2), 1.0 - exp(-0.002 * O.d * O.d * O.d));\n    \n    //color = mix(color, texture(iChannel0, rd).rgb, step(O.d - 100.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}