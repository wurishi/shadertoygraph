{"ver":"0.1","info":{"id":"XsVXDy","date":"1466435785","viewed":1128,"name":"Simple static reaction-diffusion","username":"metric","description":"Based on http://www.karlsims.com/rd.html. Use mouse to draw a trail.\n\nI'm using 3 additional duplicate buffers to speed up the process.\nI'll be glad for any tips on how to control the speed of the reaction.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["diffusion","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 col, in vec2 fc )\n{\n\tvec2 uv = fc.xy / iResolution.xy;\n    vec4 texture = texture(iChannel0, uv);\n\n    col.r = smoothstep(1., .9, texture.z)*pow(texture.x, (.45));\n    col.b = pow(texture.y, (.7));\n    col.g = pow(texture.y+texture.x, (.9545));\n\n    col.rb += 1.2*pow(texture.rg, vec2(1.67));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Field simulation\n\n#define DIFF_A    1.0\n#define DIFF_B    .5\n\n#define KILL_RATE .062\n#define FEED_RATE .0445\n\nvec2 laplacian(vec2 fc) {\n\tvec3 eps = vec3(-1,0, 1);\n\n    vec2 convolved =\n        .05*texture(iChannel0, (fc+eps.xz)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yz)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zz)/iChannelResolution[0].xy).xy +\n        \n        .20*texture(iChannel0, (fc+eps.xy)/iChannelResolution[0].xy).xy +\n        -1.*texture(iChannel0, (fc+eps.yy)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.zy)/iChannelResolution[0].xy).xy +\n        \n        .05*texture(iChannel0, (fc+eps.xx)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yx)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zx)/iChannelResolution[0].xy).xy;\n    \n    return convolved;\n}\n\nvoid mainImage( out vec4 col, in vec2 fc )\n{\n    vec2 currUV = fc/iChannelResolution[0].xy;\n    col = texture(iChannel0, currUV);\n\n    if (iFrame < 10) {\n        float a_concentration = 1.0;\n        float b_concentration = step(.9, texture(iChannel1, currUV).g);\n\n    \tcol.xy = vec2(a_concentration, b_concentration);\n        return;\n    }\n    \n    const float deltaTime = .2;\n    float A = col.x;\n    float B = col.y;\n    vec2 laplacian_AB = laplacian(fc);\n    float feed_rate = FEED_RATE;\n    \n    // Moving fan\n    vec2 mousePos = iMouse.xy/iResolution.y;\n    mousePos = 2.*mousePos - vec2(iResolution.x/iResolution.y, 1);\n    \n    vec2 uv = fc.xy / iChannelResolution[0].y;\n    uv = 2.*uv - vec2(iChannelResolution[0].x/iChannelResolution[0].y, 1);\n    uv = mousePos-uv;\n\n    if (smoothstep(.11, .1, length(uv)+.1*sin(9.*iTime+3.*atan(uv.y, uv.x))) > .0) {\n        if(col.y <.1) col += vec4(.4, .1, 0, 0);\n        col.z = laplacian_AB.x;\n        feed_rate = pow(feed_rate, 84.);\n    }\n    // End of Moving fan\n\n    col.x += ( DIFF_A*laplacian_AB.x - A*B*B + feed_rate*(1.0-A) )*deltaTime;\n    col.y += ( DIFF_B*laplacian_AB.y + A*B*B - (feed_rate+KILL_RATE)*B )*deltaTime;\n    col.z -=  col.z*.5;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Field simulation\n\n#define DIFF_A    1.0\n#define DIFF_B    .5\n\n#define KILL_RATE .062\n#define FEED_RATE .0445\n\nvec2 laplacian(vec2 fc) {\n\tvec3 eps = vec3(-1,0, 1);\n\n    vec2 convolved =\n        .05*texture(iChannel0, (fc+eps.xz)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yz)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zz)/iChannelResolution[0].xy).xy +\n        \n        .20*texture(iChannel0, (fc+eps.xy)/iChannelResolution[0].xy).xy +\n        -1.*texture(iChannel0, (fc+eps.yy)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.zy)/iChannelResolution[0].xy).xy +\n        \n        .05*texture(iChannel0, (fc+eps.xx)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yx)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zx)/iChannelResolution[0].xy).xy;\n    \n    return convolved;\n}\n\nvoid mainImage( out vec4 col, in vec2 fc )\n{\n    vec2 currUV = fc/iChannelResolution[0].xy;\n    col = texture(iChannel0, currUV);\n\n    if (iFrame < 10) {\n        float a_concentration = 1.0;\n        float b_concentration = step(.9, texture(iChannel1, currUV).g);\n\n    \tcol.xy = vec2(a_concentration, b_concentration);\n        return;\n    }\n    \n    const float deltaTime = .2;\n    float A = col.x;\n    float B = col.y;\n    vec2 laplacian_AB = laplacian(fc);\n    float feed_rate = FEED_RATE;\n    \n    // Moving fan\n    vec2 mousePos = iMouse.xy/iResolution.y;\n    mousePos = 2.*mousePos - vec2(iResolution.x/iResolution.y, 1);\n    \n    vec2 uv = fc.xy / iChannelResolution[0].y;\n    uv = 2.*uv - vec2(iChannelResolution[0].x/iChannelResolution[0].y, 1);\n    uv = mousePos-uv;\n\n    if (smoothstep(.11, .1, length(uv)+.1*sin(9.*iTime+3.*atan(uv.y, uv.x))) > .0) {\n        if(col.y <.1) col += vec4(.4, .1, 0, 0);\n        col.z = laplacian_AB.x;\n        feed_rate = pow(feed_rate, 84.);\n    }\n    // End of Moving fan\n\n    col.x += ( DIFF_A*laplacian_AB.x - A*B*B + feed_rate*(1.0-A) )*deltaTime;\n    col.y += ( DIFF_B*laplacian_AB.y + A*B*B - (feed_rate+KILL_RATE)*B )*deltaTime;\n    col.z -=  col.z*.5;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Field simulation\n\n#define DIFF_A    1.0\n#define DIFF_B    .5\n\n#define KILL_RATE .062\n#define FEED_RATE .0445\n\nvec2 laplacian(vec2 fc) {\n\tvec3 eps = vec3(-1,0, 1);\n\n    vec2 convolved =\n        .05*texture(iChannel0, (fc+eps.xz)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yz)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zz)/iChannelResolution[0].xy).xy +\n        \n        .20*texture(iChannel0, (fc+eps.xy)/iChannelResolution[0].xy).xy +\n        -1.*texture(iChannel0, (fc+eps.yy)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.zy)/iChannelResolution[0].xy).xy +\n        \n        .05*texture(iChannel0, (fc+eps.xx)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yx)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zx)/iChannelResolution[0].xy).xy;\n    \n    return convolved;\n}\n\nvoid mainImage( out vec4 col, in vec2 fc )\n{\n    vec2 currUV = fc/iChannelResolution[0].xy;\n    col = texture(iChannel0, currUV);\n\n    if (iFrame < 10) {\n        float a_concentration = 1.0;\n        float b_concentration = step(.9, texture(iChannel1, currUV).g);\n\n    \tcol.xy = vec2(a_concentration, b_concentration);\n        return;\n    }\n    \n    const float deltaTime = .2;\n    float A = col.x;\n    float B = col.y;\n    vec2 laplacian_AB = laplacian(fc);\n    float feed_rate = FEED_RATE;\n    \n    // Moving fan\n    vec2 mousePos = iMouse.xy/iResolution.y;\n    mousePos = 2.*mousePos - vec2(iResolution.x/iResolution.y, 1);\n    \n    vec2 uv = fc.xy / iChannelResolution[0].y;\n    uv = 2.*uv - vec2(iChannelResolution[0].x/iChannelResolution[0].y, 1);\n    uv = mousePos-uv;\n\n    if (smoothstep(.11, .1, length(uv)+.1*sin(9.*iTime+3.*atan(uv.y, uv.x))) > .0) {\n        if(col.y <.1) col += vec4(.4, .1, 0, 0);\n        col.z = laplacian_AB.x;\n        feed_rate = pow(feed_rate, 84.);\n    }\n    // End of Moving fan\n\n    col.x += ( DIFF_A*laplacian_AB.x - A*B*B + feed_rate*(1.0-A) )*deltaTime;\n    col.y += ( DIFF_B*laplacian_AB.y + A*B*B - (feed_rate+KILL_RATE)*B )*deltaTime;\n    col.z -=  col.z*.5;\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Field simulation\n\n#define DIFF_A    1.0\n#define DIFF_B    .5\n\n#define KILL_RATE .062\n#define FEED_RATE .0445\n\nvec2 laplacian(vec2 fc) {\n\tvec3 eps = vec3(-1,0, 1);\n\n    vec2 convolved =\n        .05*texture(iChannel0, (fc+eps.xz)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yz)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zz)/iChannelResolution[0].xy).xy +\n        \n        .20*texture(iChannel0, (fc+eps.xy)/iChannelResolution[0].xy).xy +\n        -1.*texture(iChannel0, (fc+eps.yy)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.zy)/iChannelResolution[0].xy).xy +\n        \n        .05*texture(iChannel0, (fc+eps.xx)/iChannelResolution[0].xy).xy +\n        .20*texture(iChannel0, (fc+eps.yx)/iChannelResolution[0].xy).xy +\n        .05*texture(iChannel0, (fc+eps.zx)/iChannelResolution[0].xy).xy;\n    \n    return convolved;\n}\n\nvoid mainImage( out vec4 col, in vec2 fc )\n{\n    vec2 currUV = fc/iChannelResolution[0].xy;\n    col = texture(iChannel0, currUV);\n\n    if (iFrame < 10) {\n        float a_concentration = 1.0;\n        float b_concentration = step(.9, texture(iChannel1, currUV).g);\n\n    \tcol.xy = vec2(a_concentration, b_concentration);\n        return;\n    }\n    \n    const float deltaTime = .2;\n    float A = col.x;\n    float B = col.y;\n    vec2 laplacian_AB = laplacian(fc);\n    float feed_rate = FEED_RATE;\n    \n    // Moving fan\n    vec2 mousePos = iMouse.xy/iResolution.y;\n    mousePos = 2.*mousePos - vec2(iResolution.x/iResolution.y, 1);\n    \n    vec2 uv = fc.xy / iChannelResolution[0].y;\n    uv = 2.*uv - vec2(iChannelResolution[0].x/iChannelResolution[0].y, 1);\n    uv = mousePos-uv;\n\n    if (smoothstep(.11, .1, length(uv)+.1*sin(9.*iTime+3.*atan(uv.y, uv.x))) > .0) {\n        if(col.y <.1) col += vec4(.4, .1, 0, 0);\n        col.z = laplacian_AB.x;\n        feed_rate = pow(feed_rate, 84.);\n    }\n    // End of Moving fan\n\n    col.x += ( DIFF_A*laplacian_AB.x - A*B*B + feed_rate*(1.0-A) )*deltaTime;\n    col.y += ( DIFF_B*laplacian_AB.y + A*B*B - (feed_rate+KILL_RATE)*B )*deltaTime;\n    col.z -=  col.z*.5;\n}","name":"Buf D","description":"","type":"buffer"}]}