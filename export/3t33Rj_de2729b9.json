{"ver":"0.1","info":{"id":"3t33Rj","date":"1576790659","viewed":492,"name":"Metallic Blob","username":"vlams1","description":"It's.. alive?\nGot inspired by one of iq's shaders (don't know what it was called..) and tried to achieve something similar.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define IT 32\n#define SD .005\n#define MD 8.\n\nmat2 rot(float a) {\n    float s = sin(radians(a));\n    float c = cos(radians(a));\n    return mat2(c,-s,s,c);\n}\n\nfloat dist(vec3 p) {\n    float d = dot(normalize(p),vec3(0.,1.,0.));\n    float s = sin(atan(p.x,p.z)*5.) * pow(1.-d,.75);\n    float c = cos(d*3.1415*2.5+iTime*2.);\n    return length(p)-2.+s*c*.3;\n}\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n    vec3 p = ro;\n    float td;\n    for (int i; i < IT; i++) {\n        float d = dist(p);\n        td += d;\n        p += rd * d;\n        if (abs(d) < SD || td > MD) break;\n    }\n    return p;\n}\n\nvec3 normal(vec3 p) {\n    vec2 o = vec2(SD,0);\n    return normalize(vec3(\n    dist(p+o.xyy)-dist(p-o.xyy),\n    dist(p+o.yxy)-dist(p-o.yxy),\n    dist(p+o.yyx)-dist(p-o.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,3,-5);\n    vec3 rd = normalize(vec3(uv,1));\n    rd.yz *= rot(31.);\n    ro.xz *= rot(iTime*18.);\n    rd.xz *= rot(iTime*18.);\n    vec3 p = raymarch(ro,rd);\n    vec3 n = normal(p);\n    vec3 ld = normalize(vec3(0,3,-1));\n    float l = length(raymarch(p+n*SD*2.,ld)-p) < MD ? 0. : max(dot(n,ld),0.);\n    float b = dot(rd,ld)*.5+.5;\n    float s = pow(max(dot(reflect(rd,n),ld),0.),50.);\n    vec3 obj = mix(vec3(0.,.1,.2),vec3(.7,.8,1.),l)+s*l;\n    vec3 sky = mix(vec3(0.,.05,.1),vec3(.4,.6,.9),b);\n    vec3 col = length(p) < 3. ? obj : sky;\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}