{"ver":"0.1","info":{"id":"WtKSDy","date":"1583513055","viewed":127,"name":"DeformedCubes","username":"Nashoute","description":"My first Test since a long time","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thanks IQ ! https://iquilezles.org/articles/distfunctions\n//thanks for Poulet_vert tutorial\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, float s){\n return length(p)-s;   \n}\n\nfloat Union (float d1,float d2){ return min (d1,d2);}\nfloat Substract (float d1,float d2){ return max (-d1,d2);}\n\n\nvec3 opRepet(vec3 pos,vec3 bound){\n    return mod(pos+0.5*bound,bound)-0.5*bound;\n}\n\nfloat map(vec3 pos){\n    \n    pos = opRepet(pos, vec3(3.0,0.0,3.0));\n    \n    float cube = sdBox( pos, vec3(1.0));\n    float sphere = sdSphere(pos, 1.3);\n        \n    return Substract(sphere,cube);\n    \n}\n\n\nfloat castRay(vec3 ro, vec3 rd ){\n    \n    float c = 0.0;\n    \n    for(int i = 0; i < 64; i++){\n     float ray = map(ro + rd *c);\n        \n        if(ray < (0.0001*c))\n        {\n            return 1.0-float(i)/32.0;\n        }\n        \n        c+= ray;\n        \n        \n    }\n    \n    \n    return -1.0;\n}\n\nvec3 render(vec3 ro, vec3 rd){\n    float contact = castRay(ro,rd);\n    \n    vec3 col = vec3(0.0,1.0,0.0);\n    \n    if(contact == -1.0)\n    {\n        col = vec3(0.0,0.0,0.0);\n    }\n    else\n    {\n        col = vec3(contact);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *=iResolution.x/iResolution.y;\n    \n    //cam\n    vec3 camePos = vec3 (sin(iTime)*2.0,0.0,4.9-iTime);\n    vec3 camTarget =vec3 (0.0,0.0,-iTime);\n    \n    //vec dir camera\n    vec3 forward = normalize(camTarget-camePos);\n    \n    vec3 right = normalize(cross(vec3(0.0,-1.0,0.0),forward));\n    vec3 up = normalize(cross(cos(right+1.0)*0.5,forward));\n    \n    vec3 viewDir = normalize (uv.x * right + uv.y * up +2.0*forward);\n\tviewDir = vec3(viewDir.x,viewDir.y,viewDir.z);\n\n    vec3 col = render(camePos,viewDir);\n    \n    col.x *= uv.y*2.0;\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}