{"ver":"0.1","info":{"id":"sd3Bz7","date":"1656229443","viewed":61,"name":"Basic Rainbow","username":"WiseBart","description":"A first humble attempt at a shader, rainbow colors generated by varying the hue.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rainbow","hsv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on: https://www.shadertoy.com/view/lsS3Wc\n//Converts an RGB vector into HSV color\nvec3 hsv(vec3 c)\n{\n\t//Near-zero epsilon (to avoid division by 0.0)\n\t#define E 1e-7\n\t\n\t//Channel shift vector\n    const vec4 S = vec4(0, -1, 2, -3) / 3.0;\n\t//Sort green-blue channels (highest to lowest)\n    vec4 P = (c.b<c.g) ? vec4(c.gb, S.rg) : vec4(c.bg, S.wz);\n\t//Sort red-green-blue channels (highest to lowest)\n    vec4 Q = (P.r<c.r) ? vec4(c.r, P.gbr) : vec4(P.rga, c.r);\n\t//Find the difference between the highest and lowest RGB for saturation\n    float D = Q.x - min(Q.w, Q.y);\n\t//Put it all together\n    return vec3(abs(Q.z + (Q.w - Q.y) / (6.0*D+E)), D / (Q.x+E), Q.x);\n}\n\n//Converts hue, saturation and value back to RGB color\nvec3 rgb(float h, float s, float v)\n{\n\t//Compute RGB hue\n    vec3 RGB = clamp(abs(mod(h*6.0+vec3(0,4,2), 6.0)-3.0)-1.0, 0.0, 1.0);\n\t//Multiply by value and mix for saturation\n    return v * mix(vec3(1), RGB, s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float d = distance(uv, vec2(.5, .5)) * 2.;\n\tfragColor = vec4(rgb(1. - d, 1., 1.) * (1. - step(1., d)), 1.);\n}","name":"Image","description":"","type":"image"}]}