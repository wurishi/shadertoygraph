{"ver":"0.1","info":{"id":"WttcRr","date":"1608366029","viewed":332,"name":"Morphing Sierpinski Analogues","username":"mherreshoff","description":"Three versions (art deco, vanilla, and lightning) of a continuously morphing analogue of the Sierpinski triangle that I cooked up recently.  They play in order one after the other (so the animation won't loop until the fourth time you see the circle.)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangle","sierpinski","morphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define CS(a) vec2(cos(a), sin(a))\n#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec4(0,-2.*PI/3.,2.*PI/3.,0)))\nvec2 cmul(vec2 a, vec2 b) {\n    return mat2(a,-a.y,a.x)*b;\n}\n\n\nvec2 target (vec2 z, float twist) {\n    vec2 weightedSum=vec2(0); float weight=0.;\n#define N 3.\n    for (float i = 0.; i < N; i++) {\n        float theta = 6.28*(i/N);\n        vec2 point = CS(theta), d = z-point;\n        float L = length(d), w = pow(L, -10.);\n        vec2 scale = 2.*CS(twist*theta);\n        weight += w;\n        weightedSum += w*cmul(scale, d);\n    }\n    return weightedSum/weight;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 R = iResolution.xy, pw = 1./R, uv = fragCoord*pw;\n    \n    float cycleT=30., t = fract(iTime/cycleT), cycle = floor(iTime/cycleT),\n          twist = mod(cycle, 3.)-1., maxIt = (twist < -.5 ? 5. : 6.), \n          iterations = maxIt*(smoothstep(0.,.5,t)-smoothstep(.5,1.,t)),\n          zoom = 3.+smoothstep(0., 1., iterations)*(twist < -.5 ? 6. : (twist < .5 ? 1. : 2.));\n\n    vec2 p = ((fragCoord-.5*R)/R.y)*zoom;\n    for (float i = 0.; i < 10.; i++){\n        if (i < floor(iterations)) p = target(p, twist);\n    }\n    p = mix(p, target(p, twist), fract(iterations));\n    \n    float mag = length(p);\n    vec4 col = mix(vec4(.5), vec4(1.), min(1., mag));\n    col = mix(col, hue(.6), smoothstep(1., 1.5, mag)-smoothstep(1.5,2., mag));\n    col = col*min(1., pow(length(p), -2.));\n\tfragColor = col;\n    //fragColor = hue(atan(p.y, p.x)/6.28);\n}","name":"Image","description":"","type":"image"}]}