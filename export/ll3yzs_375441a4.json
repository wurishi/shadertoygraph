{"ver":"0.1","info":{"id":"ll3yzs","date":"1533649643","viewed":258,"name":"Linear Image Blending","username":"Cieric","description":"Stitches 4 images together as if they are a single texture.\nBased off of https://www.shadertoy.com/view/MtXfW8\njust trying to make the code look better","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["image"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float frameRes = 1024.0;\n\nvec4 tex4_2D(vec2 uv)\n{\n    uv = mod(uv*2.0, 2.0);\n    ivec2 val = ivec2(uv);\n    uv = mod(uv, 1.0);\n    int idx = val.x + val.y*2;\n    vec4 color = vec4(0);\n    switch(idx)\n    {\n        case 0: return texture(iChannel0, uv);\n        case 1: return texture(iChannel1, uv);\n        case 2: return texture(iChannel2, uv);\n        case 3: return texture(iChannel3, uv);\n    }\n}\n\nvec4 textureLinear(vec2 uv)\n{\n    const float res = 1024.0;\n    uv-=vec2(0.5/res); // to realign it with original (should be removed)\n    vec2 f = floor(uv*res)/res;\n    vec2 c = ceil(uv*res)/res;\n    vec4 c0 = tex4_2D(vec2(f.x, f.y));\n    vec4 c1 = tex4_2D(vec2(c.x, f.y));\n    vec4 c2 = tex4_2D(vec2(f.x, c.y));\n    vec4 c3 = tex4_2D(vec2(c.x, c.y));\n    vec2 d = uv*res - floor(uv*res);\n    return mix(mix(c0,c1,d.x),mix(c2,c3,d.x),d.y);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nconst bool fpsBar = false;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float zoom = (iTime - 12.0) /3.0 + 2.0;\n    \n    zoom = sin(zoom) * 4.0 + 2.0;\n    \n    float rotation = iTime / 5.0;\n    vec2 origin = vec2(0.5, 0.5);\n    \n    if (iMouse.z > 0.0) {\n     \tzoom = iMouse.x / 100.0;   \n        rotation = iMouse.y / 100.0;\n    }\n    \n    float scale = 1.0 / pow(2.0, zoom);\n    \n    fragColor = textureLinear(origin + rotate((uv - 0.5) * scale * vec2(aspectRatio, 1.0), rotation));\n    fragColor += vec4(vec3(min(0.0, iTime / 2.0 - 1.0)), 1.0);\n\n    if (uv.x> 0.98 && fpsBar) {\n        fragColor = vec4(1.0,1.0,0.0,1.0);\n\n        float fps60 = iFrameRate / 60.0;\n\n        if (uv.y < fps60) {\n            fragColor = vec4(1.0,0.0,0.0,1.0);   \n        }\n    }\n}","name":"Image","description":"","type":"image"}]}