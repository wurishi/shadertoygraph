{"ver":"0.1","info":{"id":"dlfXDN","date":"1674783929","viewed":212,"name":"4D Simplex Noise Gradient","username":"myth0genesis","description":"4D gradient of Stefan Gustavson's implementation of simplex noise.\nTop: Analytic gradient | Bottom: Forward differences approximated gradient\nLeft: Gradient w/ respect to p.xyz | Right: Derivative w/ respect to p.w","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex","4d","analytic","4dimensional"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2023 myth0genesis\n// 4D Simplex Noise Gradient\n// I saw that Stefan Gustavson didn't seem to have published any shader\n// with an analytic solution for the gradients of his variant\n// of 4D simplex noise, so I thought I'd try solving it myself\n// and publish it here for anyone who finds it useful.\n// Compares the analytic solution to the numerically approximated one (for a sanity check)\n// and shows the results of all four derivatives with respect to each dimension.\n// Top : Analytic gradient            | Bottom: Forward differences approximated gradient\n// Left: Gradient w/ respect to p.xyz | Right : Derivative w/ respect to p.w\n\nconst int maxstps = 100;\nconst float maxdst = 100.0;\nconst float mindst = 0.001;\nconst float pi = 3.1415927410125732421875;\nconst float tau = 6.283185482025146484375;\nconst float nscale = 2.0; // scales noise\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x * 34.0) + 10.0) * x);\n}\n\nfloat permute(float x) {\n    return mod289(((x * 34.0) + 10.0) * x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip) {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p, s;\n\n    p.xyz = floor(fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www; \n\n    return p;\n}\n\n// Stevan Gustavson's 4D simplex noise: https://github.com/stegu/webgl-noise/blob/master/src/noise4D.glsl\n// I left the scalar output intact for anyone who just wants\n// to copy and paste it to use for a project.\n\n// (sqrt(5) - 1)/4 = F4\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v, float scale, out vec4 grad) {\n    v *= scale;\n    const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                          0.276393202250021,  //  2 * G4\n                          0.414589803375032,  //  3 * G4\n                         -0.447213595499958); // -1 + 4 * G4\n\n    vec4 i = floor(v + dot(v, vec4(F4)));\n    vec4 x0 = v - i + dot(i, C.xxxx);\n\n    vec4 i0;\n    vec3 isX = step(x0.yzw, x0.xxx);\n    vec3 isYZ = step(x0.zww, x0.yyz);\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    vec4 i3 = clamp(i0,  0.0, 1.0 );\n    vec4 i2 = clamp(i0 - 1.0, 0.0, 1.0 );\n    vec4 i1 = clamp(i0 - 2.0, 0.0, 1.0 );\n\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n    i = mod289(i); \n    float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute(permute(permute(permute(\n                        i.w + vec4(i1.w, i2.w, i3.w, 1.0))\n                      + i.z + vec4(i1.z, i2.z, i3.z, 1.0))\n                      + i.y + vec4(i1.y, i2.y, i3.y, 1.0))\n                      + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n\n    vec4 ip = vec4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4, p4));\n\n    vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n    vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)             ), 0.0);\n    vec3 m02 = m0 * m0;\n    vec2 m12 = m1 * m1;\n    vec3 m04 = m02 * m02;\n    vec2 m14 = m12 * m12;\n    vec3 pdotx0 = vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2));\n    vec2 pdotx1 = vec2(dot(p3, x3), dot(p4, x4));\n    \n    vec3 temp0 = m02 * m0 * pdotx0;\n    vec2 temp1 = m12 * m1 * pdotx1;\n    \n    // Here the gradient is calculated\n    grad = -8.0 * (temp0.x * x0 + temp0.y * x1 + temp0.z * x2 + temp1.x * x3 + temp1.y * x4);\n    grad += m04.x * p0 + m04.y * p1 + m04.z * p2 + m14.x * p3 + m14.y * p4;\n    \n    // There's probably an exact factor the result can be\n    // multiplied by to get a range of -1.0 to 1.0,\n    // but I didn't know how to find it, so I just normalized the vector\n    grad = normalize(grad);\n    \n    return 49.0 * (dot(m04, pdotx0) + dot(m14, pdotx1));\n}\n\nmat2 rot2D(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s,\n                s,  c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat map(vec3 pos) {\n    float d = sdBox(pos, vec3(2.0));\n    return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n\tfloat dO = 0.0;\n    \n    for(int i = 0; i < maxstps; i++) {\n    \tvec3 p = ro + rd * dO;\n        float dS = map(p);\n        dO += dS;\n        if(dO > maxdst || abs(dS) < mindst) break;\n    }\n    \n    return dO;\n}\n\n// returns analytic gradient\nvec4 gn0(vec4 p) {\n    vec4 g;\n    float d = snoise(p, nscale, g);\n    return g;\n}\n\n// returns forward differences approximated gradient\nvec4 gn1(vec4 p) {\n    vec2 e = vec2(0.01, 0.0);\n    vec4 g;\n    vec4 n = snoise(p, nscale, g) -\n        vec4(snoise(p - e.xyyy, nscale, g),\n             snoise(p - e.yxyy, nscale, g),\n             snoise(p - e.yyxy, nscale, g),\n             snoise(p - e.yyyx, nscale, g));\n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float tm = iTime * 0.25;\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\tvec2 m = (all(equal(iMouse.xy, vec2(0.0)))) ? (vec2(0.5)) : (-iMouse.xy / iResolution.xy);\n\n    vec3 ro = vec3(0.0, 3.0, -7.0);\n    mat2 rmxz = rot2D(m.x * tau);\n    mat2 rmyz = rot2D(m.y * tau + pi);\n    ro.yz *= rmyz;\n    ro.xz *= rmxz;\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    rd.yz *= rot2D(0.4);\n    rd.yz *= rmyz;\n    rd.xz *= rmxz;\n    vec3 col = vec3(0.0);\n\n    float d = rayMarch(ro, rd);\n\n    if(d < maxdst) {\n        vec3 p = ro + rd * d;\n        vec4 n0 = gn0(vec4(p, tm));\n        vec4 n1 = gn1(vec4(p, tm));\n\n        col = (uv.x < 0.0) ?\n            (uv.y > 0.0 ? n0.xyz : n1.xyz) :\n            (uv.y > 0.0 ? vec3(n0.ww, 0.0) : vec3(n1.ww, 0.0));\n    }\n    \n    col = (any(lessThan(abs(uv), vec2(0.0025)))) ? vec3(1.0) : col;\n    \n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}