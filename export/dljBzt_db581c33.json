{"ver":"0.1","info":{"id":"dljBzt","date":"1694405912","viewed":34,"name":"Day 5 - value noise","username":"Voralagas","description":"This is a step toward learning to make own procedural terrain noise and in this we made a value noise from an octave.\n\nThis code demonstrate noise function and rendering noise generated at each fragment. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// source of knowledge: \n\n// 1. book of shader\n// 2. Suboptimal youtube channel\n\nfloat generateNoise( vec2 position){\n    return fract(sin(dot(position, vec2(12.9898,78.233)))*100000.0);\n}\n\nfloat smoothNoise(vec2 uv1){\n    vec2 uv = smoothstep(0.0, 1.0, fract(uv1));\n    vec2 gridId = floor(uv1);\n    // four corner of the grid gridId\n    vec2 br = gridId + vec2(1, 0); \n    vec2 bl = gridId + vec2(0, 0);\n    vec2 tr = gridId + vec2(1, 1);\n    vec2 tl = gridId + vec2(0, 1);\n    \n    float noiseBr = generateNoise(br);\n    float noiseBl = generateNoise(bl);\n    float noiseTr = generateNoise(tr);\n    float noiseTl = generateNoise(tl);\n    \n    float a1 = mix(noiseBl, noiseBr, uv.x);\n    float a2 = mix(noiseTl, noiseTr, uv.x);\n    return mix(a1, a2, uv.y);\n}\n\nfloat smoothNoise2(vec2 uv){\n    float value = smoothNoise(uv*4.0);\n    value += smoothNoise(uv*8.0)*0.5;\n    value += smoothNoise(uv*16.0)*0.25;\n    value += smoothNoise(uv*32.0)*0.125;\n    value /=2.0;\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += iTime*0.1;\n    float value = smoothNoise2(uv);\n    fragColor = vec4(vec3(value), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}