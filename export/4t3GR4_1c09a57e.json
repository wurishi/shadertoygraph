{"ver":"0.1","info":{"id":"4t3GR4","date":"1468052355","viewed":281,"name":"rgb in and out","username":"greggman","description":"band 1 is input color\nband 2 is iq's hsv2rgb(rgb2hsv(inputColor))\nband 3 is iq's hsl2rgb(rgb2hsl(inputColor))\nband 3 is Chilli Ant's hsl2rgb(rgb2hsl2(inputColor))","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Somehow optimized HSV and HSL to RGB conversion functions. \n\n//========================================================================\n\nconst float eps = 0.0000001;\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n\nvec3 rgb2hcv(in vec3 RGB)\n{\n    // Based on work by Sam Hocevar and Emil Persson\n    vec4 P = mix(vec4(RGB.bg, -1.0, 2.0/3.0), vec4(RGB.gb, 0.0, -1.0/3.0), step(RGB.b, RGB.g));\n    vec4 Q = mix(vec4(P.xyw, RGB.r), vec4(RGB.r, P.yzx), step(P.x, RGB.r));\n    float C = Q.x - min(Q.w, Q.y);\n    float H = abs((Q.w - Q.y) / (6. * C + eps) + Q.z);\n    return vec3(H, C, Q.x);\n}\n\nvec3 rgb2hsl2(in vec3 RGB)\n{\n    vec3 HCV = rgb2hcv(RGB);\n    float L = HCV.z - HCV.y * 0.5;\n    float S = HCV.y / (1. - abs(L * 2. - 1.) + eps);\n    return vec3(HCV.x, S, L);\n}\n\n\n//========================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 rgb = vec3(uv.xx, fract(uv.y * 4.)); // yellow\n    vec3 color = vec3(0);\n    if (uv.y > 0.77) {\n        color = rgb;\n    } else if (uv.y > 0.52 && uv.y < 0.75) {\n        color = hsv2rgb(rgb2hsv(rgb));\n    } else if (uv.y > 0.27 && uv.y < 0.50) { \n        color = hsl2rgb(rgb2hsl(rgb));\n    } else if (uv.y < 0.25) {\n        color = hsl2rgb(rgb2hsl2(rgb));\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}