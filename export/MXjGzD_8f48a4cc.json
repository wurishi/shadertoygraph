{"ver":"0.1","info":{"id":"MXjGzD","date":"1708466148","viewed":32,"name":"Raymarching - DGFX Training","username":"fojciko","description":"ray","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 80\n\n// From tutorial by kishimisu <3\n// https://www.youtube.com/watch?v=khblXafu7iA&t=620s\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s; \n}\n\nfloat sdBox( vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) ;\n}\n\n// Smooth minimum function\nfloat smin( float a, float b, float k) {\n    float h = max(k-abs(a-b), 0.0 ) /k;\n    return min( a, b) - h*h*h*k*(1.0/6.0);\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s, s, c);\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    // Rodrigues' rotation formula\n    return mix(dot (axis, p) * axis, p, cos(angle))\n    + cross(axis, p) * sin(angle);\n}\n\nfloat map(vec3 p) {\n    vec3 spherePos = vec3(sin(iTime) * 3., 0, 0);\n    vec3 sphereScale = vec3(1.1);\n    float sphere = sdSphere(p * sphereScale - spherePos, 1.);\n    \n    vec3 q = p;\n    \n    q.xy *= rot2D(iTime);\n    \n    vec3 boxPos = vec3(0.0, 0.0, 0.0);\n    vec3 boxScale = vec3(1.1);\n    float box = sdBox(q * boxScale, vec3(.75));\n    \n    float ground = p.y + .75;\n    \n    return smin(ground ,smin(sphere, box, 2.), 1.); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    vec3 rO = vec3(0.0, 0.0, -3.0); // Ray Origin\n    vec3 rD = normalize(vec3(uv, 1.0)); // Ray direction\n    \n    float t = 0.0; // Total distance travelled\n    \n    rO.yz *= rot2D(-mouse.y);\n    rD.yz *= rot2D(-mouse.y);\n    \n    rO.xz *= rot2D(-mouse.x);\n    rD.xz *= rot2D(-mouse.x);\n       \n    \n    // Raymarching\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = rO + rD * t;\n        \n        float d = map(p);\n        \n        t += d;\n\n        \n        if (d < .001 || t > 100.) break;\n    }\n    \n    col = vec3(t * .2);\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}