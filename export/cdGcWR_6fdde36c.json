{"ver":"0.1","info":{"id":"cdGcWR","date":"1695945413","viewed":88,"name":"Lenia Pt.2","username":"26apastor","description":"(Click anywhere)\nmy journey onto creating the amazing cellular automata: Lenia\nPart two.\nI encourage you to reset the time over and over until you get interesting results. (So the creatures donâ€™t overgrow the screen)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","cellular","continuous","artificial","lenia"],"hasliked":0,"parentid":"DsVcRw","parentname":"Lenia Pt.1"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float bw = texture(iChannel0, uv).x;\n    vec4 abc = vec4(bell(bw, 1.0, 0.25), bell(bw, 0.5, 0.25), bell(bw, 0.0, 0.25), 1.0);\n    float u = abc.x + abc.y + abc.z;\n    fragColor = abc / u;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R 13.\n#define mu 0.15\n#define sigma 0.016\n#define T 10.0\n#define noise_base 0.015\n\nfloat kernel_sum = pow(2.0 * R + 1.0, 2.0) - 1.0;\n\nfloat growth(float sum) {\n    return bell(sum, mu, sigma)* 2.0 - 1.0;\n}\n\nfloat getWeight(float r) {\n    if (r > 1.0) return 0.0;\n    return bell(r, 0.5, 0.15);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float color = 0.0;\n    float neighbors = 0.0;\n    float total = 0.0;\n    for(float i = -R; i <= R; i += 1.0)\n    {\n        for( float j = -R; j <= R; j += 1.0)\n        {\n            float r = sqrt(i * i + j * j) / R;\n        \tvec2 offset = vec2(i, j) / iResolution.xy;\t\t\n        \tvec4 lookup = texture(iChannel0, mod(uv + offset, 1.0));\n            float weight = getWeight(r);\n        \tneighbors += lookup.x * weight;\n            total += weight;\n        }\n    }\n    neighbors -= texture(iChannel0, uv).x / kernel_sum;\n    neighbors /= total;\n    \n    float cell = texture(iChannel0, uv).x;\n    \n    color = clamp(cell + growth(neighbors) / T, 0.0, 1.0);\n    if (iFrame < 1)\n        color = noise_base + noise(fragCoord/R + mod(iDate.w,1.)*100.);\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= R/iResolution.x)\n        \tcolor = 0.3 + noise(fragCoord/R + mod(iDate.w,1.)*100.);\n    }\n    fragColor = vec4(color);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*Chakazul's use of this hash function is genius and all credits to him in his implementation of lenia: https://www.shadertoy.com/user/Chakazul\n*/\n\n// Noise simplex 2D by iq - https://www.shadertoy.com/view/Msf3WH\n\nfloat bell(float sum, float m, float s) {\n    return exp(-pow(((sum - m) / s ), 2.0) / 2.0);\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"}]}