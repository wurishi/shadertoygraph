{"ver":"0.1","info":{"id":"sddyD7","date":"1662365056","viewed":104,"name":"Fancy 14 segment display","username":"sukupaper","description":"A 14 segment display with alphanumeric characters support !","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["display","digits","lcd","14segment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: Fancy 14 segment display\n\n// one entry = segments configuration for each possible character\n// [0-9, blank space, A-Z, all segments]\nconst uint lookup[38] = uint[](0x3333u,0x1020u,0x22a2u,0x30a2u,0x10e1u,0x3086u,0x31c3u,0x412u,0x31e3u,0x30e3u,0u,0x11e3u,0x34aau,0x2103u,0x342au,0x21c3u,0x143u,0x3183u,0x11e1u,0x240au,0x3020u,0x951u,0x2101u,0x1135u,0x1925u,0x3123u,0x1e3u,0x3923u,0x9e3u,0x30c3u,0x40au,0x3121u,0x311u,0x1b21u,0xa14u,0x414u,0x2212u,0x3fffu);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 st = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    float aa = 1./iResolution.y;\n    float t = iTime;\n    \n    // scale\n    float sz = 5.;\n    vec2 p = st*sz;\n    aa *= sz;\n    \n    // respectively : number of left and right characters\n    vec2 nb = vec2(4.,3.);\n    \n    // individual width of characters\n    float sp = .9;\n    // italic\n    p.x -= p.y*.2;\n    \n    // domain repetition\n    float id = -floor(p.x/sp) + nb.y - 1.;\n    float pl = -p.x - sp*nb.x, pr = p.x - sp*nb.y;\n    p.x = mod(p.x, sp) - sp*.5;\n    \n    // value to display (right)\n    float value = t*5.;\n    value = value/pow(10., id);\n    uint v = lookup[int(mod(value, 10.))];\n    \n    // characters to display (left)\n    float k = clamp(cos(t)*cos(t)*cos(t)*.6,-.5,.5) + .5;\n    if(id == 6.) v = lookup[int(mix(11., 37., k))]; // first letter\n    else if(id == 5.) v = lookup[int(mix(12., 37., k))]; // second letter\n    else if(id == 4.) v = lookup[int(mix(13., 37., k))]; // third letter\n    else if(id == 3.) v = lookup[10]; // blank space\n    \n    // draws 14 segment shapes\n    vec2 abp = abs(p);\n    float mid = (length(max(vec2(abp.x, abp.y + .278) - .188, 0.)) - .15);\n    mid = max(mid, (length(vec2(-abp.x + .23, abp.y + .414)) - .475));\n    \n    float iuu = step(-.2, -abp.y);\n    float abp2 = abs(p.y) -.3;\n    float bsq = max(-mid, (length(max(abs(vec2(abp.x, abp2)) - .25 + iuu*.05, 0.)) - .1 - iuu*.05));\n    const vec2 inc = normalize(vec2(.29,-.04));\n    float b1 = dot(vec2(abp.x - .175, abp.y), inc);\n    float b2 = dot(vec2(abp.x - .0275, abp.y), inc);\n    float mlb1 = max(bsq, -b1);\n    float mbb = max(b1, max(bsq, length(vec2(p.x, abp.y - 1.108)) - .6));\n    float mlb2 = max(-mbb, max(bsq, max(b1, -b2)));\n    float mlb3 = max(-mbb, max(bsq, b2));\n    \n    // shows or not individual segments (a lots of bitwise operations here)\n    // each segment value is encoded into a single bit of v\n    uvec2 dr = uvec2(sign(p)*.5 + .75);\n    float d = mlb1*float(((v&~dr.x|v>>5&dr.x)&dr.y|(v>>8&~dr.x|v>>12&dr.x)&~dr.y)&1u);\n    d = min(d, mlb2*float(((v>>2&~dr.x|v>>4&dr.x)&dr.y|(v>>9&~dr.x|v>>11&dr.x)&~dr.y)&1u));\n    d = min(d, mlb3*float((v>>3&dr.y|v>>10&~dr.y)&1u));\n    d = min(d, mid*float((v>>6&~dr.x|v>>7&dr.x)&1u));\n    d = min(d, mbb*float(v>>1&dr.y|v>>13&~dr.y));\n        // float d2 = min(min(min(min(mlb1, mlb2), mlb3), mbb), mid);\n    \n    // repetition domain clipping\n    d = max(max(d, pl), pr);\n    \n    // distance function clipping + antialiasing\n    d = smoothstep(-aa*2., 0., d);\n        // d2 = smoothstep(-aa*2., 0., d2);\n    \n    // final color\n    fragColor = vec4(vec3(1. - d), 1.);\n}","name":"Image","description":"","type":"image"}]}