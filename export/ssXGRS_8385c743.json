{"ver":"0.1","info":{"id":"ssXGRS","date":"1616124146","viewed":120,"name":"Walk on Spheres","username":"tovacinni","description":"Walk on Spheres","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// RNG functions borrowed from demofox\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\nfloat left_edge = -0.75;\n\n// sdf function\nfloat sdBox(in vec2 p, in vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// color function\nvoid getCol(in vec2 p, out vec3 col)\n{\n    if (abs(p.x - left_edge) < 0.02) {\n        // a certain kind of blue\n        col = vec3(0.55, 0.71, 0.75);\n    } else {\n        col = vec3(1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    // RNG from demofox\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + \n                    uint(fragCoord.y) * uint(9277) + \n                    uint(iFrame) * uint(26699)) | uint(1);\n    \n    // Initialize pixel color\n    vec3 col = vec3(0.0);\n    \n    // Draw boundaries\n    float sdf = sdBox(uv, vec2(0.75, 0.75));\n    if (abs(sdf) < 0.02) {\n        col.xyz = vec3(1.0);\n        getCol(uv.xy, col);\n    }\n    \n    // Do walk on spheres\n    vec2 p = uv.xy;\n    int count = 0;\n    \n    for (int j=0; j<100; ++j) { // for num samples\n        for (int i=0; i<30; ++i) { // for walk on spheres steps\n            float d = sdBox(p, vec2(0.75, 0.75));\n            if (d < 0.0 && abs(d) < 0.001) { // terminate if near boundary\n                vec3 col_sample;\n                getCol(p, col_sample);\n                col += col_sample; \n                count += 1;\n            }\n            float angle = RandomFloat01(rngState) * 3.14159 * 2.0;\n            p += vec2(cos(angle) * d, sin(angle) * d); // walk\n\n        }\n    }\n    col /= float(max(count,1));\n     \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}