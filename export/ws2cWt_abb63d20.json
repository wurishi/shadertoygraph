{"ver":"0.1","info":{"id":"ws2cWt","date":"1587540330","viewed":541,"name":"Mandelbrot Constructed Smoothly","username":"matthen","description":"Mandelbrot Constructed Smoothly","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 square(in vec2 z) {\n\treturn vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y);   \n}\n\n\nvec2 map(in vec2 uv, in float t) {\n    vec2 z = uv;    \n    \n    for (float i = 0.; i < t; i += 1.) {\n        if(length(z) > 100.) {\n            return z;   \n        }\n        vec2 newZ = square(z) + uv;\n        z = (\n            smoothstep(0., 1., t - i) * newZ\n            + (1. - smoothstep(0., 1., t - i)) * z\n        );\n    }\n    return z;\n}\n\n\nvec3 gradient(in vec2 z) {\t\n    float r = length(z);\n    r /= 3.;\n    r = pow(r, 0.6);\n    vec3 rainbow = 0.5 + 0.5 * cos((5.5 * r + vec3(0.2, 0.45, 0.8)*6.));\n    rainbow *= (1. - smoothstep(1., 1.03, r));\n    rainbow *= (smoothstep(0.0, 0.03, abs(r-0.4)));\n    return rainbow;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    float t = iTime;\n    \n    t = mod(t, 14.);\n    t = 0.1 * t * t;\n    t = min(t, 16.);\n    \n    uv.x -= 0.2 * smoothstep(0., 5., t);\n    \n    uv *= 15.;\n    uv /= 1. + 5. * smoothstep(0., 5., t);\n\t\n    uv = map(uv, t);\n    //float col = smoothstep(0., 0.01, abs(length(uv)-1.));\n    \n    \n    vec3 rgb = gradient(uv);\n    \n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}