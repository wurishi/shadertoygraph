{"ver":"0.1","info":{"id":"3tVGWz","date":"1578687511","viewed":100,"name":"Galaxy of Color","username":"CJG","description":"Dots of color in a Galaxy of sound","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CO vec3(0.0, 0.0, 5.0)\n\n#define RME 0.01\n#define RMM 10.0\n\nvec2 uv;\n\nfloat map(vec3 p) {\n    float w = 2.0 * texture(iChannel0, vec2(length(uv))).x;\n    \n    float bigS = distance(vec3(0.0, 0.0, -2.0), p) - 0.25 - 0.25 * texture(iChannel0, vec2(length(uv))).x; \n    bigS += sin(w * p.x) * sin(w * p.y) * sin(w * p.z) * 0.5;\n    \n    w *= 0.5;\n    \n    float smallS1 = distance(vec3(sin(iTime/7.0), sin(iTime*2.4),  -2.0 + cos(iTime*2.0)), p) - 0.1;\n    smallS1 += sin(w * p.x) * sin(w * p.y) * sin(w * p.z) * 0.25;\n    \n    float smallS2 = distance(vec3(sin(iTime*2.2), sin(iTime/3.0),  -2.0 + cos(iTime*2.0)), p) - 0.1;\n    smallS2 += sin(w * p.x) * sin(w * p.y) * sin(w * p.z) * 0.25;\n    \n    float smallS3 = distance(vec3(sin(iTime*2.3), sin(iTime*2.5),  -2.0 + cos(iTime/5.0)), p) - 0.1;\n    smallS3 += sin(w * p.x) * sin(w * p.y) * sin(w * p.z) * 0.25;\n    \n    return min(bigS, min(smallS1, min(smallS2, smallS3)));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out vec3 hitP, out float steps){\n    steps = 0.0;\n    for(float d = 0.0; d < RMM;){\n        ++steps;\n     \tfloat md = map(hitP = (ro + rd * d));\n        if(md <= RME) return 1.0;\n        d += md;\n    }\n    return 0.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 hitPoint;\n    float steps, hit = rayMarch(CO, normalize(vec3(uv, 0.0) - CO), hitPoint, steps);\n\n    float m = texture(iChannel0, vec2(length(uv))).x;\n    \n    fragColor = vec4(0.0);\n    fragColor.rgb += hsv2rgb(vec3((sin(iTime * (1.0 + hit))+1.0)/2.0, 0.5 + m, (steps / 15.0 / (1.0 + m * 2.0))));\n}","name":"Image","description":"","type":"image"}]}