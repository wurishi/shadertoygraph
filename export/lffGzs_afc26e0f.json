{"ver":"0.1","info":{"id":"lffGzs","date":"1730664427","viewed":36,"name":"Raymarch fuzz po-gl","username":"po_gl","description":"Fuzzy raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// resource: https://iquilezles.org/articles/distfunctions/\n\nmat2 rot2D( float angle ) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere( vec3 p, float s ) {\n    return length(p) - s;\n}\n\nfloat sdOctahedron( vec3 p, float s ) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57734027;\n}\n\n\nfloat map( vec3 p ) {\n    vec3 spherePos = vec3(3., .0, .0) * -iTime*.05;\n    \n    vec3 q = fract(p - spherePos) - .5;\n    float sphere = sdSphere(q/.2, 1.)*.06; // fuzzy effect\n    \n    float ground = p.y + .9;\n    \n    vec3 c = p;\n    c.yz *= rot2D(3.1415);\n    float ceiling = c.y + 1.9;\n    \n    return opSmoothUnion(\n            ceiling,\n            opSmoothUnion(\n                ground,\n                sphere,\n                0.5),\n            0.5\n        );\n}\n\nfloat objects( vec3 p ) {\n    vec3 q = p;\n    q.xz = fract(p.xz - vec2(1., .4) * iTime*.05) - .5;\n    q.xz *= rot2D(iTime*.5);\n    float octo = sdOctahedron(q, .02);\n    return octo;\n}\n\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.418, 0.248, 0.248) - 0.08;\n    vec3 b = vec3(0.228, 0.108, 0.168);\n    vec3 c = vec3(1.0, 1.0, 1.0) * 1.2;\n    vec3 d = vec3(1.068, 0.388, 0.558);\n\n    return a + b*cos(6.28318*(c*t+d)); \n}\n\nvec3 palette2( float t ) {\n    vec3 a = vec3(0.258, 0.088, 0.088);\n    vec3 b = vec3(0.457, 0.217, 0.337);\n    vec3 c = vec3(2.0, 2.0, 2.828) * 20.;\n    vec3 d = vec3(1.288, 2.388, 2.558);\n\n    return a + b*cos(6.28318*(c*t+d)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0., 0., -2.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    vec3 col = vec3(0);\n    \n    float t = 0.;\n    float t2 = 0.;\n    \n    // Camera rotations\n    \n    if (iMouse.z < 0.) {\n        m = vec2(-iTime*0.02, -.1);\n    }\n    ro.yz *= rot2D(clamp(-m.y, -0.2, 0.5));\n    rd.yz *= rot2D(clamp(-m.y, -0.2, 0.5));\n    \n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    // Map loop\n    int i;\n    for (i = 0; i < 50; i++) {\n        vec3 p = ro + rd * t;\n        \n        float d = map(p);\n        t += d;\n        \n        if (d < .001 || t > 100.) break;\n    }\n\n    // Objects loop\n    int i2;\n    for (i2 = 0; i2 < 50; i2++) {\n        vec3 p = ro + rd * t2;\n        float d = objects(p);\n        t2 += d;\n        \n        if (d < .001 || t2 > 100.) break;\n    }\n\n    if (t < t2) {\n        col = palette(t*.2 + float(i)*.002) * 1.1;\n    } else {\n        //col = vec3(0.6) - vec3(t2*.5 * float(i2)*.02)\n        //    + palette(t2*.2 + float(i2)*.002) * .9;\n        //col = vec3(t2*.1 + float(i2)*0.006);\n        col = palette2(t2*.2 + float(i2)*.002);\n    }\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}