{"ver":"0.1","info":{"id":"lscczr","date":"1517767762","viewed":1340,"name":"Conway's Game Of Life","username":"Kosro","description":"Initializes randomly based on time. Use the mouse to draw. Feel free to play around and change the \"#define\" parameters :)","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","simulation","random","automata","conway","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ZOOM 1.0 //Has to be the same in Buf A and Image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * ZOOM;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ZOOM 1.0 //Has to be the same in Buf A and Image\n#define DENSITY 0.05\n#define RADIUS 10.0\n\nfloat get(vec2 coord) {\n    return texture(iChannel0, coord).r;\n}\n\nfloat rand(vec2 co){\n  \treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * length(iDate));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 map = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * map;\n    \n    float state = texture(iChannel0,uv).r;\n    \n    float neighbourCount = 0.0;\n    \n    neighbourCount += get(uv + vec2( 0.0, 1.0) * map);\n    neighbourCount += get(uv + vec2( 0.0,-1.0) * map);\n    neighbourCount += get(uv + vec2( 1.0, 0.0) * map);\n    neighbourCount += get(uv + vec2(-1.0, 0.0) * map);\n\tneighbourCount += get(uv + vec2( 1.0, 1.0) * map);\n    neighbourCount += get(uv + vec2( 1.0,-1.0) * map);\n    neighbourCount += get(uv + vec2(-1.0, 1.0) * map);\n    neighbourCount += get(uv + vec2(-1.0,-1.0) * map);\n    \n    if(neighbourCount == 2.0 && state == 1.0 || neighbourCount == 3.0)\n    \tfragColor= vec4(1.0);\n    else\n    \tfragColor= vec4(0.0);\n    \n    if(iMouse.z > 0.0)\n    \tfragColor = max(fragColor,vec4(step(length(iMouse.xy * ZOOM - fragCoord),RADIUS)));\n    else if (iFrame < 2)\n        fragColor = vec4(step(rand(uv),DENSITY));\n}","name":"Buf A","description":"","type":"buffer"}]}