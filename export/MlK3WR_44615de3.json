{"ver":"0.1","info":{"id":"MlK3WR","date":"1474232596","viewed":146,"name":"Necromurlok - sound","username":"Necromurlok","description":"Synth sound","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["synthsound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    float beat = pow(1.0 - fract(iTime / (BEAT)), 1.0) * (1.0 - abs(uv.x - 0.5) * (abs(uv.y - 0.5)));\n    \n    \n    \n\tfragColor = vec4(beat, beat, beat,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"#define TAU 6.2831\n#define _A  440.0\n#define _A2 466.16\n#define _B  493.88\n#define _C  523.25\n#define _C2 554.37\n#define _D  587.33\n#define _D2 622.25\n#define _E  659.25\n#define _F  698.46\n#define _F2 739.99\n#define _G  783.99\n#define _G2 830.61\n\n\n#define STEREO_MULTIPLIER 0.3\n#define STEREO_LATENCY 0.0\n//0.3025\n\nfloat currentTime;\nfloat sequenceTime;\nfloat patternTime;\n\n\n//drum bass\nvec2 Drum_Bass(float currentTime, float startTime)\n{\n    currentTime = clamp(currentTime - startTime, 0.0, 10000.0);\n    float freq = _A * 0.15;\n    vec2 tick =  vec2(sin(TAU * freq * currentTime) * exp(-32.0 * currentTime), sin(TAU * freq * (currentTime + STEREO_LATENCY)) * exp(-32.0 * (currentTime + STEREO_LATENCY))) * 3.0;\n    return tick;\n}\n\n\n//Timbal \nfloat hashTimbal(float time)\n{\n//    return cos(time * 4243.8589);// + cos(0.5232312 + time * 584.2343);\n    return cos(time * 4445553.8589);// + cos(0.5232312 + time * 584.2343);\n}\n\nvec2 Drum_Timbal(float currentTime, float startTime)\n{\n    currentTime = clamp(currentTime - startTime, 0.0, 10000.0);\n\n    float freq = (hashTimbal(currentTime) * 0.81564 + _A);\n    \n    vec2 tick = vec2(sin(TAU * freq * currentTime) * exp(-16.0 * currentTime)) * 0.133333;\n    return tick;\n}\n\n\n\n//Snare \n#define FREQ_SNARE (_A * 0.5)\n\nfloat hashSnare(float time, float freq)\n{\n//    return cos(time * 4243.8589);// + cos(0.5232312 + time * 584.2343);\n    return (cos(time * FREQ_SNARE * 223.8589) + sin(0.018232312 + FREQ_SNARE * 531.2343 * time)) * 100.0;\n//    return 0.0;\n\n}\n\nvec2 Drum_Snare(float currentTime, float startTime, float freq)\n{\n    currentTime = clamp(currentTime - startTime, 0.0, 10000.0);\n    \n//    float tick = (sin(TAU * freq * currentTime) + sin(hashTimbal(TAU * currentTime)) * exp(-16.0 * currentTime)) * 0.33333;\n    float tick = (sin(TAU * freq * currentTime) + sin(hashSnare(TAU * currentTime, freq))) * exp(-16.0 * currentTime) * 0.33333;\n    return vec2(tick);\n}\n\n\n//Charles\n#define FREQ_CHARLES (_A * 5.0)\nfloat hashCharles(float time, float freq)\n{\n//    return cos(time * 4243.8589);// + cos(0.5232312 + time * 584.2343);\n    return (cos(time * FREQ_SNARE * 833.8589) + sin(0.1418232312 + (FREQ_SNARE * 311.2343 * time))) * 100.0;\n//    return 0.0;\n\n}\n\n\nvec2 Drum_Charles(float currentTime, float startTime, float freq)\n{\n    currentTime = clamp(currentTime - startTime, 0.0, 10000.0);\n    \n//    float tick = (sin(TAU * freq * currentTime) + sin(hashTimbal(TAU * currentTime)) * exp(-16.0 * currentTime)) * 0.33333;\n    float tick = (sin(TAU * freq * currentTime) + sin(hashCharles(TAU * currentTime, freq))) * exp(-9.0 * currentTime) * 0.015;\n    return vec2(tick);\n}\n\n\nvec2 Drum_Pattern()\n{\n    vec2 ret;\n    float drumTime = mod(patternTime, BEAT * 2.0);\n    float b2 = floor(currentTime / (BEAT * 2.0));\n    ret = Drum_Bass(drumTime, 0.0) +\n          Drum_Snare(drumTime, BEAT, FREQ_SNARE) +\n          Drum_Charles(drumTime, BEAT * 0.75, FREQ_SNARE * 1000.0) +\n          Drum_Charles(drumTime, BEAT + BEAT * 0.5 + (1.0 - b2) * BEAT * 0.25, FREQ_SNARE * 1000.0) +\n          Drum_Bass(drumTime, BEAT + BEAT * 0.76) * b2 * 0.25;\n    return ret;\n}\n\n\n//Piano\nvec2 Piano(float currentTime, float startTime, float freq)\n{\n    freq *= 0.5;\n    vec2 stereo = vec2(sin(currentTime * STEREO_MULTIPLIER), cos(currentTime * STEREO_MULTIPLIER));\n    currentTime = clamp(currentTime - startTime, 0.0, 10.0);\n//    vec2 tick =  vec2(sin(TAU * freq * currentTime) * exp(-3.0 * currentTime), sin(TAU * freq * (currentTime + STEREO_LATENCY)) * exp(-3.0 * (currentTime + STEREO_LATENCY)));\n    float tick =  sin(TAU * freq * currentTime) * exp(-1.5 * currentTime);\n    return stereo * tick * 0.25;\n}\n\nvec2 PianoBass(float currentTime, float startTime, float freq)\n{\n    freq *= 0.125;\n//    vec2 stereo = vec2(sin(currentTime * STEREO_MULTIPLIER), cos(currentTime * STEREO_MULTIPLIER));\n    currentTime = clamp(currentTime - startTime, 0.0, 10000.0);\n//    vec2 tick =  vec2(sin(TAU * freq * currentTime) * exp(-8.0 * currentTime), sin(TAU * freq * (currentTime + STEREO_LATENCY)) * exp(-3.0 * (currentTime + STEREO_LATENCY)));\n    float tick =  (sin(TAU * freq * currentTime) + sin(TAU * freq * 2.0 * currentTime) + sin(TAU * freq * 4.0 * currentTime)) * exp(-4.0 * currentTime);\n    return vec2(tick * 0.125);\n}\n\nvec2 Bass_Sequence()\n{\n    float currentTime = sequenceTime;\n    vec2 ret = PianoBass(currentTime, 0.0, _A); \n    ret += PianoBass(currentTime, BEAT, _A); \n    ret += PianoBass(currentTime, BEAT + BEAT * 0.75, _E * 0.5); \n    ret += PianoBass(currentTime, BEAT * 2.0, _A); \n    ret += PianoBass(currentTime, BEAT * 3.0, _A); \n    ret += PianoBass(currentTime, BEAT * 4.0 + BEAT * 0.25, _C); \n    ret += PianoBass(currentTime, BEAT * 4.0 + BEAT * 0.5, _C); \n    ret += PianoBass(currentTime, BEAT * 5.0, _C);\n//    ret += PianoBass(currentTime, BEAT * 5.0 + BEAT * 0.5, _C);\n    ret += PianoBass(currentTime, BEAT * 5.0 + BEAT * 0.75, _C);\n    ret += PianoBass(currentTime, BEAT * 6.0, _C);\n    ret += PianoBass(currentTime, BEAT * 6.0 + BEAT * 0.5, _C);\n    ret += PianoBass(currentTime, BEAT * 7.0, _B);\n    ret += PianoBass(currentTime, BEAT * 7.0 + BEAT * 0.5, _G * 0.5);\n    ret += PianoBass(currentTime, BEAT * 8.0, _E * 0.5);\n    ret += PianoBass(currentTime, BEAT * 9.0, _E);\n    ret += PianoBass(currentTime, BEAT * 9.0 + BEAT * 0.75, _E);\n    ret += PianoBass(currentTime, BEAT * 10.0 + BEAT * 0.5, _E);\n    ret += PianoBass(currentTime, BEAT * 11.0, _D);\n    ret += PianoBass(currentTime, BEAT * 11.0 + BEAT * 0.5, _B);\n    ret += PianoBass(currentTime, BEAT * 12.0, _D * 0.5);\n    ret += PianoBass(currentTime, BEAT * 13.0, _D);\n    ret += PianoBass(currentTime, BEAT * 13.0 + BEAT * 0.75, _D);\n    ret += PianoBass(currentTime, BEAT * 14.0 + BEAT * 0.5, _D);\n    ret += PianoBass(currentTime, BEAT * 15.0, _G * 0.5);\n    ret += PianoBass(currentTime, BEAT * 15.0 + BEAT * 0.5, _C * 0.5);\n    return ret;\n}\n\nvec2 Piano_Sequence()\n{\n    float currentTime = sequenceTime;\n    vec2 ret = Piano(currentTime, 0.0, _E * 0.5) + Piano(currentTime, 0.0, _C * 0.5) + Piano(currentTime, 0.0, _A);\n    ret += Piano(currentTime, PATTERN, _G * 0.5) + Piano(currentTime, PATTERN, _C) + Piano(currentTime, PATTERN, _E * 0.5);\n    ret += Piano(currentTime, PATTERN * 2.0, _G * 0.5) + Piano(currentTime, PATTERN * 2.0, _B) + Piano(currentTime, PATTERN * 2.0, _E);\n    ret += Piano(currentTime, PATTERN * 3.0, _F2 * 0.5) + Piano(currentTime, PATTERN * 3.0, _A * 0.5) + Piano(currentTime, PATTERN * 3.0, _D);\n    return ret;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    sequenceTime = mod(time, SEQUENCE);\n\n    patternTime = mod(time, PATTERN);\n       \n    vec2 res;\n    \n    res = (Drum_Pattern() + Bass_Sequence() + Piano_Sequence()) * 0.3333;\n//    res += Bass_Pattern(sequenceTime);\n    return res;\n//    return vec2( sin(TAU*FREQ_A*time)*exp(-5.0*time) );\n} ","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define BPM 120.0\n#define BEAT (60.0 / BPM)\n#define PATTERN (BEAT * 4.0)\n#define SEQUENCE (PATTERN * 4.0)\n\n","name":"Common","description":"","type":"common"}]}