{"ver":"0.1","info":{"id":"wlt3zN","date":"1575839134","viewed":92,"name":"Metaballs_","username":"Anskiere","description":"-","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float maxDist = 200.;\nconst float planeDist = 1.5;\n\nfloat rand11(float x)\n{\n    return fract(sin(x * 35.7313) * 437.5453);\n}\n\nfloat rand21(vec2 xy)\n{\n    return texture(iChannel2, xy * 0.317).x;\n}\n\nvec2 rand22(vec2 xy)\n{\n    vec2 res;\n    \n    res.x = rand21(xy);\n    res.y = rand11(res.x);\n    \n    return res;\n}\n\nvec3 rand23(vec2 xy)\n{\n    vec3 res;\n    \n    res.x = rand21(xy);\n    res.y = rand11(res.x);\n    res.z = rand11(res.y);\n    \n    return res;\n}\n\nvec2 rand12(float x)\n{\n    vec2 res;\n\n    res.x = rand11(x);\n    res.y = rand11(res.x);\n\n    return res;\n}\n\nvec3 rand13(float x)\n{\n    vec3 res;\n\n    res.x = rand11(x + 10.);\n    res.y = rand11(res.x);\n    res.z = rand11(res.y);\n\n    return res;\n}\n\nfloat smin(float a, float b, float k, out float h)\n{\n    h = clamp((a - b)/k + 0.5, 0., 1.);\n    float m = h * (1. - h) * 0.5 * k;\n    float r = mix(a, b, h) - m;\n    return r;\n}\n\nvec3 cameraPos()\n{\n    float time = float(iFrame)/30.;\n    float t = time * 0.05;\n\n    vec3 res = vec3(sin(t), 0.2, -cos(t)) * 9.;\n\n    return res;\n}\n\nvec3 getRay(vec2 uv)\n{\n    vec3 cam = cameraPos();\n    vec3 origin = vec3(0, 0, 0);\n    vec3 look = normalize(origin - cam);\n    vec3 upGlob = vec3(0,1,0);\n    vec3 right = normalize(cross(upGlob, look));\n    vec3 camUp = normalize(-cross(right, look));\n\n    vec3 p = cam + camUp * uv.y + right * uv.x;\n    p += look * planeDist;\n\n    vec3 res = p - cam;\n    return normalize(res);\n}\n\nfloat getSphere(vec3 p, float size, vec3 origin)\n{\n    return length(p - origin) - size;\n}\n\nfloat getSphere(vec3 p, float size)\n{\n    return getSphere(p, size, vec3(0,0,0));\n}\n\nfloat getRadius(float t, int n)\n{\n    float res;\n    \n    for (int i = 0; i < 1; i++)\n    {\n        vec2 rand = rand22(vec2(n, i));\n        res += sin(t * rand.x * 0.5 + rand.y * 10.) / rand.x;\n    }\n    \n    return min(res, 7.);\n}\n\nvec3 getCenter(float t, int n)\n{    \n    vec3 res;\n    \n    float s = 1.;\n    float maxAmp = 0.;\n    \n    for (int i = 0; i < 3; i++)\n    {\n        maxAmp += 1./s;\n        vec2 r = rand22(vec2(float(n)*0.3, i));\n        r = r*2. - 1.;\n        r *= 2.;\n        \n        vec3 p;        \n        p.x = sin(r.x*t*s) * cos(r.y*t*s);\n        p.y = sin(r.x*t*s) * sin(r.y*t*s);;\n        p.z = cos(r.x*t*s);\n        p /= s;\n        \n        res += p;\n        \n        s *= 1.71;\n    }\n    \n    return res / maxAmp * 2.;\n}\n\nfloat getX(float time, vec3 p, int n)\n{\n    float t = time*0.7 + 130.;\n    \n\tvec3 pos = getCenter(t, n);\n    float rad = 0.5 + getRadius(t, n) * 0.07;\n    float res = getSphere(p - pos, rad);\n    \n    return res;\n}\n\nfloat getSd(vec3 p, out vec3 color)\n{\n    float time = float(iFrame)/30.;\n\n    float st = fract(time*.1);\n    \n    int ballsCount = 5;\n    float res = getX(time, p, 0);\n    color = vec3(0,1,0);\n    \n    for (int i = 1; i < ballsCount; i++)\n    {\n        float x = getX(time, p, i);\n        float h;\n        res = smin(res, x, 1.5, h);\n        color = mix(color, rand13(float(i)), h);\n    }\n    \n    return res;\n}\n\n// from https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(vec3 p )\n{\n\tconst float h = 0.01;\n\tvec2 k = vec2(1,-1);\n    vec3 c;\n\n\treturn normalize(k.xyy*getSd(p + k.xyy*h,c) + k.yyx*getSd(p + k.yyx*h,c)\n                     + k.yxy*getSd(p + k.yxy*h,c) + k.xxx*getSd(p + k.xxx*h,c));\n}\n\nfloat raymarch(vec3 sp, vec3 ray, out vec3 color)\n{\n    float depth = 0.;\n\n    for(int i = 0; i < 150; i++)\n    {\n        vec3 p = sp + ray * depth;\n        float dist = getSd(p, color);\n\n        if (dist <= 0.01)\n            return depth + dist;\n\n        depth += dist;\n\n        if (depth >= maxDist)\n            return maxDist;\n    }\n\n    return maxDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ray = getRay(uv);\n    vec3 camPos = cameraPos();\n    vec3 tintColor;\n    float d = raymarch(camPos, ray, tintColor);\n\n    vec3 col;\n\n    if (d >= maxDist)\n    {\n        col = texture(iChannel0, ray).rgb;\n    }\n    else\n    {\n        vec3 sphereColor = vec3(0.85);\n        vec3 intP = cameraPos() + d*ray;\n        vec3 n = calcNormal(intP);\n        vec3 lightDir = normalize(vec3(1));\n        \n        float dd = dot(n, lightDir);\n        vec3 reflRay = reflect(ray, n);\n        \n        float spec = dot(reflRay, lightDir);\n        spec = max(spec, 0.);\n        spec = pow(spec, 40.);\n        \n        //vec3 reflColor = texture(iChannel0, reflRay).rgb * 0.25;\n        \n        dd = dd * 0.5 + 0.5;\n\n        vec3 res = sphereColor * dd;\n\n        col = res * tintColor + spec;\n    }\n    \n    col = pow(col, vec3(0.75));    \n    fragColor = vec4(col,0);\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float remap(float a, float b, float c, float d, float x)\n{\n    \n    float k = (x - a)/(b - a);\n    return c + (d - c) * k;\n}\n\n","name":"Common","description":"","type":"common"}]}