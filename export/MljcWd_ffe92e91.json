{"ver":"0.1","info":{"id":"MljcWd","date":"1510674648","viewed":221,"name":"Lazer Beamz","username":"digorydoo","description":"A simple screensaver-like effect.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","screensaver"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distanceToLine (vec2 s, vec2 p, vec2 q)\n{\n    return abs ((q.y - p.y) * s.x - (q.x - p.x) * s.y \n        + q.x * p.y - q.y * p.x) / distance (p, q);\n}\n\nfloat triangle (vec2 pos, float t, float val, float step)\n{\n    float t1 = t * 0.523;\n    float t2 = t * 0.645;\n    float t3 = t * 0.779;\n    \n    vec2 p1 = 0.5 + 0.5 * vec2 (cos (t1      ), sin (t2      ));\n    vec2 p2 = 0.5 + 0.5 * vec2 (cos (t2 + 1.0), sin (t3 + 1.0));\n    vec2 p3 = 0.5 + 0.5 * vec2 (cos (t3 + 2.0), sin (t1 + 2.0));\n\n    float d = distanceToLine (pos, p1, p2);\n    val += d < 0.01 ? step : 0.0;\n\n    d = distanceToLine (pos, p2, p3);\n    val += d < 0.01 ? step : 0.0;\n    \n    d = distanceToLine (pos, p3, p1);\n    val += d < 0.01 ? step : 0.0;\n    \n    return val;\n}\n\nvec3 Red     = vec3 (1.0, 0.0, 0.0);\nvec3 Yellow  = vec3 (1.0, 1.0, 0.0);\nvec3 Green   = vec3 (0.0, 1.0, 0.0);\nvec3 Cyan    = vec3 (0.0, 1.0, 1.0);\nvec3 Blue    = vec3 (0.0, 0.0, 1.0);\nvec3 Magenta = vec3 (1.0, 0.0, 1.0);\n\nvec3 hue (float t)\n{\n    float f = 1.0 / 6.0;\n    \n    if (t < f)\n    {\n        return mix (Red, Yellow, t / f);\n    }\n    else if (t < 2.0 * f)\n    {\n        return mix (Yellow, Green, (t - f) / f);\n    }\n    else if (t < 3.0 * f)\n    {\n        return mix (Green, Cyan, (t - 2.0 * f) / f);\n    }\n    else if (t < 4.0 * f)\n    {\n        return mix (Cyan, Blue, (t - 3.0 * f) / f);\n    }\n    else if (t < 5.0 * f)\n    {\n        return mix (Blue, Magenta, (t - 4.0 * f) / f);\n    }\n    else\n    {\n        return mix (Magenta, Red, (t - 5.0 * f) / f);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n    vec2 pos = (fragCoord - 0.5 * res) / res.y + 0.5;\n\n    float val = 0.0;\n\n    for (float f = 0.0; f < 10.0; f++)\n    {\n        val += triangle (pos, iTime + f*0.05, val, 0.01 * f / 10.0);\n    }\n    \n    val = min (1.0, val);\n    val = 1.0 - (1.0 - val) * (1.0 - val);\n\n\tfragColor = vec4(val * hue (0.5 + 0.5 * sin (iTime + val)), 1.0);\n}","name":"Image","description":"","type":"image"}]}