{"ver":"0.1","info":{"id":"lfBXDt","date":"1706968970","viewed":82,"name":"Mandelbrot Set (Zooming in)","username":"jarvarvarvis","description":"The Mandelbrot Set rendered using a simple hue-based coloring algorithm.\nThis implementation breaks down quite fast (EPILEPSY WARNING TOWARDS THE END!!!) because of floating point precision errors.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_ITERATION = 1000;\n\n// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 rescaleToMandelbrot(vec2 coord) {\n    // [-1, 1] -> [0, 1]\n    float x_01 = (coord.x + 1.0) / 2.0;\n    // [0, 1] -> [0, 3.5] -> [-2.5, 1]\n    float x = x_01 * 3.5 - 2.5;\n    \n    return vec2(x, coord.y);\n}\n\nvec2 nextIteration(vec2 curr) {\n    float real = curr.x*curr.x - curr.y*curr.y;\n    float im = 2.0*curr.x*curr.y;\n    return vec2(real, im);\n}\n\nfloat sqDist(vec2 point) {\n    return dot(point, point);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 screenCoord = uv * 2.0 - 1.0;\n    \n    // Zoom\n    float timeFactor = pow(0.2*exp(iTime*0.25)+0.85, 2.5);\n    screenCoord.x += 0.0005235 * timeFactor;\n    screenCoord.y -= 0.0591175 * timeFactor;\n    screenCoord /= timeFactor * 0.7;\n    \n    // Coordinates\n    vec2 mandelbrotCoord = rescaleToMandelbrot(screenCoord);\n    vec2 currentPoint = vec2(0.0);\n    \n    // Here N = 2^8 is chosen as a reasonable bailout radius.\n    int iteration = 0;\n    while (sqDist(currentPoint) <= float(1 << 16) && iteration < MAX_ITERATION) {\n        currentPoint = nextIteration(currentPoint) + mandelbrotCoord;\n        iteration++;\n    }\n    \n    float iterationValue = float(iteration) / float(MAX_ITERATION);\n    float hue = 5.0 * iterationValue;\n    float saturation = 1.0;\n    float value = (iteration < MAX_ITERATION) ? 1.0 : 0.0;\n    \n    vec3 rgbColor = hsv2rgb(vec3(hue, saturation, value));\n    fragColor = vec4(rgbColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}