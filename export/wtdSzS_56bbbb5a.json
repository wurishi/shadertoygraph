{"ver":"0.1","info":{"id":"wtdSzS","date":"1581650755","viewed":1043,"name":"Heading To The Sun","username":"NivBehar","description":"I did this one a while ago in Milkdrop, after watching BigWings tutorial about the mandelbrot set (search for \"The Art Of Code\" on Youtube).\nIt has some tricks that I saw in many Milkdrop presets.\n***click the mouse for some symmetry***","likes":35,"published":1,"flags":96,"usePreview":0,"tags":["sun","mandelbrot","space","fractals","stars","shine","soundreaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//##################################################\n//##### Make Sure Sound Is Working At Buffer C #####\n//##################################################\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    //uv *= 1.4;\n    \n    vec3 col = texture(iChannel2, uv).xyz;\n  \n    float offset = 0.02;\n    float offset_speed = 1. * iTime;\n    vec2 sunpos = vec2(0.5 + offset*sin(offset_speed), 0.5 + offset*cos(offset_speed));\n\n    // a nice trick a guy called Martin made on Milkdrop to make the all scene shine\n    vec3 shine = col; \n    float radi = 1.;\n    int anz = 100;\n    for (int n=1; n <= anz; n++)\n    { \n      vec2 newUV = (uv-sunpos)*radi+sunpos;\n      shine += 2./float(anz)*texture(iChannel2, newUV).xyz;\n      radi -= 0.875/float(anz);;\n    }\n    \n    col = max(shine, col); // add shine\n\n    //col += clamp(shine,0.,1.);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.141592654\nvec3 pow3(vec3 a, float b) {\n    return vec3(pow(a.x, b),pow(a.y, b),pow(a.z, b));}\nfloat Hash21(vec2 p)\n{\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    return fract(a.y*a.z*a.x);\n}\nvec2 Hash22(vec2 p)\n{\n    vec2 a = fract(p.xy*vec2(13.34, 24.34));\n    a += dot(a, a+34.45);\n    vec2 b = fract(p.xy*vec2(78.86, 134.21));\n    b += dot(b, b+113.45);\n    return vec2(fract(a.x*a.y), fract(b.x*b.y));\n}\nfloat Dist(vec2 a, vec2 b)\n{\n    return sqrt(pow(a.x-b.x,2.) + pow(a.y-b.y,2.));\n}\nvec3 lum(vec3 col)\n{\n    float gray = 0.2989 * col.x + 0.5870 * col.y + 0.1140 * col.z;\n    return vec3(gray);\n}\nfloat backstarsf(vec2 UV, float mult)\n{\n    float backstars = 0.;\n    vec2 backstarsuv = UV;\n    backstarsuv.y *= -1.;\n    backstarsuv *= mult;\n    vec2 gv = fract(backstarsuv) - 0.5 ;\n    vec2 id = floor(backstarsuv);\n    vec2 hash = Hash22(id);\n    vec2 circlepos = hash;\n    float circle = Dist(vec2(gv),circlepos);\n    float circler = 0.05;\n    float star;\n    //float smooth;\n    if(circle < circler)\n    {\n        //smooth = hash*2.;\n        star = smoothstep(circler,circler - 0.05, circle);\n        backstars += star;//*0.3;\n        //if(hash < 0.015) {backstars += vec3(star*0.3,0.,0.);}\n        //else if(hash < 0.03) {backstars += vec3(star*0.3,0.,star);}\n        //else if(hash < 0.05) {backstars += vec3(star,star*0.5,0.);}\n    }\n    //if(gv.x < 0.1 && gv.x > 0.) { backstars = 0.01;};\n    //if(gv.y < 0.1 && gv.y > 0.) { backstars = 0.01;};\n    return backstars;\n}\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) // colors palette by Inigo Quilez\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    uv *= 1.4;\n    \n    // symmetry by clicking the mouse\n    vec2 uv_orig = uv;\n    vec2 mou = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n    \n    float angmul = PI;\n    for(int i = 0; i < 3; i++)\n    {\n        uv = abs(uv);\n        angmul *= 0.25;\n        uv *= Rot(angmul+mou.y*4.);\n    }\n    \n    float click = iMouse.z > 0.? 1.:0.;\n    uv = mix(uv_orig, uv, click);\n\n    float time = iTime*(1.-0.*click) ;//+ click*mou.x*15.;\n    float soundWave = texture(iChannel2, vec2(0.,0.)).x;\n    \n    float a = uv.x;\n    float b = uv.y;\n    float ca;\n    float cb;\n    float golden = 1.6180339887;\n    // ca: 0       ; (golden-2); 0.285; 0.285; 0.45  ; -0.70176; -0.835 ; -0.8 ; -0.7269\n    // cb: 1-golden; (golden-1); 0    ; 0.01 ; 0.1428; -0.3842 ; -0.2321; 0.156; 0.1889 \n\n    //ca = -0.7069 + 0.03*sin(0.2*time) ;\n    //cb = 0.138 + 0.04*cos(time*0.4);\n    \n    ca = -0.74 + 0.0019*sin(time*0.951) ;\n    cb = 0.006 + 0.105*sin(time*0.448*0.2 + soundWave*0.02) + 0.005*cos(time*0.4);\n    \n    float aa;\n    float bb;\n\n    float n = 0.;\n    float maxiter = 100.;\n    float m= 0.;\n    float m2 = 0.;\n    float r = 50.;\n    float r2 = r*r;\n\n    float pa;\n    float pb;\n    vec2 z;\n    vec2 pz;\n    float leavesSpeed = 0.;//0.8 + 0.25*sin(time);//0.5 + 0.5*sin(time*5.);//0.4*(q5+q6+q7)*0.3; // speed for the leaves\n    while(n < maxiter && m==0.)\n    {\n        aa = a*a - b*b;\n        bb = 2.*a*b;\n        pa = a;\n        pb = b;\n        pz = vec2(pa*cos(leavesSpeed*0.5) - pb*sin(leavesSpeed*0.5),pa*sin(leavesSpeed*0.5) + pb*cos(leavesSpeed*0.5));\n        a = aa + ca;\n        b = bb + cb;\n        z = vec2(a,b);\n\n        //if(sqrt(pow(a-pa,2.) + pow(b-pb,2.)) > r2)\n        //if(dot(z,pz) > r2) // for leaves\n        //if(sqrt(pow(z.x-pz.x,2.) + pow(z.y-pz.y,2.)) > r2)\n        if(sqrt(a*a + b*b) > r)\n        //if(dot(z, pz + 0.2*time) > r2)\n        {\n            m = 1.;\n        }\n\t\tif(sqrt(a*a + b*b) > r2)\n        {\n            //m2 = 1.;\n        }\n        else\n        {\n            n++;\n        }\n    }\n    \n    // I saw this on BigWings tutorial about the Mandelbrot set\n    // Its making the colors smoother\n    float dist = sqrt(a*a + b*b);\n    float fraciter = (dist - r) / (r2 - r);\n    fraciter = log2(log(dist) / log(r)) ;\n    n -= fraciter;\n    \n    vec3 leavesCol=vec3(0.5 + 0.5*sin(n*1. + 0.751*time + soundWave*0.4),\n                 0.0,\n                 0.5 + 0.5*cos(n*1. + 0.384*time + soundWave*0.4));\n    //leavesCol = texture(iChannel0, vec2(0.5 + 0.4*sin(n*10. + time*5.),0.5 + 0.4*cos(n*7.))).xyz;\n\t//leavesCol = pow3(col,5.);\n\t//leavesCol*=40.;\n    \n    float angle = mix(atan(z.x, z.y), atan(z.x, pz.y), 1. );\n    \n    float rotspeed = sin(time*0.4); // rotation for the scene (UV)\n    vec2 uvrot = uv;\n    uvrot *= Rot(rotspeed); \n    float backstars1 = backstarsf(uvrot + 0.1*time + 123., 50.)*1.;\n    float backstars2 = backstarsf(uvrot + 0.12*time + 321., 20.)*1.;\n    float backstars3 = backstarsf(uvrot + 0.14*time + 12., 10.)*1.;\n    float backstars4 = backstarsf(uvrot + 0.16*time + 233., 7.)*1.;\n    float backstars = backstars1 + backstars2 + backstars3 + backstars4;\n    //backstars *= 4*max(0.2, 0.05 + 0.5*min(1.,max(0.,mid_att-1.)*1.3));\n\n\n    // ***** Moving stars *****\n    // I saw this in one of Martin's presets in MilkDrop.\n    // Originally this make a starfield, but I made a few changes to make it look like the\n    // glowing things instead of stars\n    vec2 rs2,rs0,rss;\n    vec2 uv_temp = uv;\n    uv = uvrot;\n    uv-=vec2(0.,0.);\n    rs0.x = atan(uv.x, uv.y)/3.1416*2.;\n    rs0.y = .05/(length (uv));\n    rss = vec2(rs0.x,rs0.y + time*0.1 + soundWave*0.02);\n    rss *= mat2x2(.7,.7,-.7,.7);\n    vec3 noise = texture(iChannel1, rss/5.).xyz - 0.7;// (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\n    rss = abs(fract(rss*8.)-.5);\n    vec3 dots = vec3(0.);\n    dots = vec3( clamp( 0.06/length(rss), 0., 1.) ) * lum(noise);\n    dots += dots*noise*0.7;\n\n    \n    rss = vec2 (rs0.x*0.7,rs0.y*.4 + time*0.05);\n    rss *= mat2x2(.3,.3,-.3,.3);\n    noise = texture(iChannel1, rss/10.).xyz - 0.7; //tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);\n    rss = abs(fract(rss*8.)-.5);\n    vec3 dots2 = clamp( 0.04/length(rss), 0., 1.)  * lum(noise);\n    dots2 += dots2*noise*0.7;\n    \n    //dots*=2.;\n\tdots = dots*13. + dots2*20.;\n\n\t// ***** end of moving stars *****\n        \n    //uv = uv_temp;\n    \n    vec3 col;\n\tif(m == 1.) // outside mandelbrot - leaves\n    {\n        \n        col = leavesCol;\n        float q = smoothstep(1.4, 0.,fraciter); // darker leaves\n        col *= q;\n        float lln = 4.; // leaves lines number\n        float lloff = 0.6; // leaves lines offset\n        float t = 0.5 + 0.5*sin(n*1. + lloff + 1.*angle + 0.751*time + soundWave*0.4);//0.5*sin(angle*lln + leavesSpeed*lln + lloff + n*1. + 0.751*time + soundWave*0.4);\n        vec3 a1 = vec3(0.5, 0.5, 0.5)*0.4;\n        vec3 b1 = vec3(0.5, 0.5, 0.5);\n        vec3 c1 = vec3(1., 1., 1.)*0.77;\n        vec3 d1 = vec3(0., 0.1, 0.2);\n        vec3 a2 = vec3(0.5, 0.5, 0.5)*0.3;\n        vec3 b2 = vec3(0.5, 0.5, 0.5);\n        vec3 c2 = vec3(1., 1., 1.);\n        vec3 d2 = vec3(1., 1.0, 0.9);\n        float mixTime = 0.;//0.5 + 0.5*sin(time);\n        vec3 a = mix(a1, a2, mixTime);\n        vec3 b = mix(b1, b2, mixTime);\n        vec3 c = mix(c1, c2, mixTime);\n        vec3 d = mix(d1, d2, mixTime);\n        //col = palette(t, a, b, c, d);\n        col.x *= 0.5 + 0.5*sin(angle*lln + leavesSpeed*lln + lloff + n*1. + 0.751*time + soundWave*0.4); // add lines to the leaves, multiply the angle for more leaves\n    \tcol.z *= 0.5 + 0.5*cos(angle*lln + leavesSpeed*lln + lloff + n*1. + 0.384*time + soundWave*0.4); // add lines to the leaves, multiply the angle for more leaves\n        col *= 0.8;\n        //col = pow3(col, 2.);\n    }\n    \n    else if(m2 == 1.)\n    {\n        col = vec3(0., 0., 0.); // fixing unwanted lines between the leaves\n    }\n    else // inside mandelbrot\n    {\n        col = vec3(0);\n        vec2 sunpos = vec2(0.);\n        float circle = Dist(uv,sunpos);\n        float sunr = 0.18;// radius of the sun\n\n        if(circle < sunr) // add sun\n        {\n            vec3 sun = 5.*texture(iChannel0, (uv + 0.5 + time*.01)).xyz * vec3(1.,0.6,0.4);\n            sun *= smoothstep(sunr,sunr-0.0645, circle);\n            col += sun*sun*sun*0.7; // add sun\n        }\n        \n        col = clamp(col, 0.,1.);\n        \n        float circler = 2.;\n        if(circle < circler) // some rb colors for the tunnel\n        {\n            float dist = Dist(uv, vec2(0.));\n            vec3 sun = vec3(0.5 + 0.5*cos(time*0.771 + dist*10.),0.1, 0.5 + 0.5*sin(time*0.471 + dist*10.));\n            sun *= smoothstep(circler,circler-0.045, circle);\n            dots += 0.5*sun; // add rb colors for the tunnel\n        }\n        col += clamp(dots, 0., 1.);\n\t\tcol += 0.5*vec3(backstars);\n    }\n\n    //col = vec3(1.)*backstars*10.;\n\t//col.xy = rss.xy;\n    //col = clamp(col, 0., 1.);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"# define time iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 a )\n{\n    float soundWave;\n    float b = texture(iChannel1, vec2(0.,0.)).x;\n    soundWave = b + texture(iChannel2, vec2(0.,0.)).x;\n\n    fragColor = vec4(soundWave, 0.,0.,1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltsXWS","filepath":"https://soundcloud.com/bachelorsofscience/25th-street","previewfilepath":"https://soundcloud.com/bachelorsofscience/25th-street","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"# define time iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 a )\n{\n    float soundWave = texture(iChannel0, vec2(0.6,0.3)).x;\n    soundWave = smoothstep(0.,1., soundWave);// + a ;\n  \n    fragColor = vec4(soundWave, 0.,0.,1.0);\n}\n","name":"Buffer C","description":"","type":"buffer"}]}