{"ver":"0.1","info":{"id":"MXXXWj","date":"1709978354","viewed":216,"name":"Wind blow wave","username":"thegeeko1","description":"simple function for wind blown like wave\nhttps://www.thegeeko.me/blog/foliage-rendering","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animation","trig","wind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License\n//\n// Copyright (c) 2024 Abdelhadi Mohammed Salih\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// this kinda wind like wave for animation\n// I used it in my grass rendering I wrote\n// a blog post about it here: https://www.thegeeko.me/blog/foliage-rendering\n\n// Hash Functions for GPU Rendering, Jarzynski et al.\n// http://www.jcgt.org/published/0009/03/02/\nvec2 pcg2d(uvec2 v) {\n  v = v * 1664525u + 1013904223u;\n\n  v.x += v.y * 1664525u;\n  v.y += v.x * 1664525u;\n\n  v = v ^ (v >> 16u);\n\n  v.x += v.y * 1664525u;\n  v.y += v.x * 1664525u;\n\n  v = v ^ (v >> 16u);\n\n  return vec2(v) * (1.0 / float(0xffffffffu));\n}\n\n// base_freq describes the max freq\n// freq_scale describes how much the freq zoom with time\nfloat wind(vec2 uv, float time, float base_freq, float freq_scale, float strength) {\n  float noise_factor = length(pcg2d(uvec2(uv * 104234.f)));\n\n  // Time-varying frequency for windblown effect\n  float freq = base_freq + sin(time) * freq_scale;\n\n  vec2 uv_displaced = uv + strength;\n  vec2 uv_scaled = uv_displaced * freq;\n\n  float sin_term = uv_scaled.x + uv_scaled.y + noise_factor;\n  return sin_term;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;\n\n  // wind dir can be controlled by modifing uv's\n  // uv = 1.f - uv;\n\n  float sin_term = wind(uv, iTime, 6.f, 2.f, 1.f);\n  // vec3 col = vec3(wind_wave);\n\n  // in the my grass system I seprate this calculation\n  // I just do everything in a compute shader but calling the sin\n  // to save myself space passign uv's and other params to the vertex\n  // shader for more info check out the blog post\n  vec3 col = vec3(sin(sin_term));\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}