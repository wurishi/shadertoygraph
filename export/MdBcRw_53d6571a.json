{"ver":"0.1","info":{"id":"MdBcRw","date":"1491560957","viewed":92,"name":"Pr√°ctica1_SeparableBlur","username":"MarioBG11","description":"SeprableBlur","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["seprableblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture ( iChannel0, uv );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RADIUS 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   //Vertical blur\n    \n    float horizontalKernel = 0.123317;\n    float pointKernel = 0.195346;\n    float diagonalKernel = 0.077847;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture ( iChannel0, uv);\n    \n    \n    float height = 1.0/iResolution.y;  \n    vec4 pixel = vec4(0.0);\n    vec4 tempColor = vec4(0.0);\n    \n    float divisor = 0.0;\n    \n    float kernelValue = 0.12;\n    \n    \n    //calculate value of the selected pixel\n    for ( float i = -RADIUS ; i <= RADIUS ; i++){   \n        \n        //select the pixel\n       pixel = texture(iChannel0 , uv + vec2(0.0  , i * height));\n        \n        \n        if ( i == 0.0){\n            kernelValue = pointKernel;\n        }else{\n            kernelValue = horizontalKernel;\n        }\n        \n      \n        //apply weight\n       tempColor += pixel * kernelValue;\n        //save the amount of weight used\n       divisor += kernelValue;\n        \n        \n    }\n    \n    //apply to the actual pixel\n   fragColor.xyz.rgb = vec3 ( tempColor.xyz.r/divisor,\n                              tempColor.xyz.g/divisor,\n                              tempColor.xyz.b/divisor);\n\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define RADIUS 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //horizontal blur\n    \n    float horizontalKernel = 0.123317;\n    float pointKernel = 0.195346;\n    float diagonalKernel = 0.077847;\n   \n    float height = 1.0/iResolution.y;  \n    vec4 pixel = vec4(0.0);\n    vec4 tempColor = vec4(0.0);\n    \n    float divisor = 0.0;\n    \n    float kernelValue = 0.12;\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    fragColor = texture ( iChannel0, uv );\n    \n    \n    //calculate value of the selected pixel\n    for ( float i = -RADIUS ; i <= RADIUS ; i++){   \n        \n        //select the pixel\n       pixel = texture(iChannel0 , uv + vec2(i * height  , 0.0));\n        \n        \n        if ( i == 0.0){\n            kernelValue = pointKernel;\n        }else{\n            kernelValue = horizontalKernel;\n        }\n        \n      \n        //apply weight\n       tempColor += pixel * kernelValue;\n        //save the amount of weight used\n       divisor += kernelValue;\n        \n        \n    }\n    \n    //apply to the actual pixel\n   fragColor.xyz.rgb = vec3 ( tempColor.xyz.r/divisor,\n                              tempColor.xyz.g/divisor,\n                              tempColor.xyz.b/divisor);\n}","name":"Buf B","description":"","type":"buffer"}]}