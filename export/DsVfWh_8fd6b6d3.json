{"ver":"0.1","info":{"id":"DsVfWh","date":"1698178726","viewed":55,"name":"CSSBattle - Daily 24/10/2023","username":"Beowolve","description":"https://cssbattle.dev/play/2uyh9TdqoamTdq2uPfll","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cssbattle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec3 square(vec3 col, vec2 uv, float size, vec2 offset, float rot, vec3 color) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  vec2 rotated = rotate(vec2(x,y), rot);\n  float d = max(abs(rotated.x), abs(rotated.y)) - size;\n  return d > 0. ? col : color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n  \n    vec3 yellow = vec3(0.89,0.71,0.18);\n    vec3 red = vec3(0.549,0.161,0.165);\n    \n    // Background color\n    vec3 col = yellow;\n    \n    // Stripes\n    if (uv.x > -.25 && uv.x <-.15 || uv.x > -.05 && uv.x < .05 || uv.x >  .15 && uv.x < .25)\n        col = red;\n    \n    vec2 offset = vec2(.0, .0);\n    \n    float rot = .785;\n    \n    // Square\n    col = square(col, uv, 0.25, offset, rot, red);\n    col = square(col, uv, 0.15, offset, rot, yellow);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}