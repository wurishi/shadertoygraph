{"ver":"0.1","info":{"id":"llBGDd","date":"1433562741","viewed":179,"name":"Keyboard Test","username":"tyleeer","description":"- click the viewport and press \"r\" to increase the acceleration of the balls. ","likes":0,"published":1,"flags":16,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Reference\n// Schubert: Moment\n// https://www.shadertoy.com/view/4dsGRl\n// http://unixpapa.com/js/key.html\n\nconst int N = 4;\n\nbool readKey(int key, bool autorelease) {\n    float value = texture(iChannel0,vec2((float(key)+0.5)/256.0,autorelease?0.75:0.25)).r;\n    if (value > 0.5)\n        return true;\n    else\n        return false;\n}\n\nfloat signedDistanceToHorizontalLine(vec2 p,float y) {\n    return p.y-y;   \n}\n\nfloat signedDistanceToCircle(vec2 p, vec2 c, float r) {\n\treturn length(p-c)-r;\n}\n\nvoid rigidBodyPhysics(out vec2 c[N], in float h[N], in float a[N]) {\n    \n    for (int i = 0; i < N; i++) {\n        float H = h[i];\n        float ac = a[i];\n        float T = sqrt(-2.0*H/ac);\n        float t = mod(iTime,2.0*T);\n        if (t < T) {\n            c[i].y = 0.5*ac*pow(t,2.0)+H;\n            c[i].x = 0.5*float(i);\n        }\n        else {\n            c[i].y = 0.5*ac*pow(2.0*T-t,2.0)+H;\n            c[i].x = 0.5*float(i);\n        }\n    }\n}\n   \nvec2 pixelSpaceToUVSpace(vec2 p, vec2 resolution) {\n  vec2 uv = 2.0*p/resolution-1.0;\n  if (resolution.x > resolution.y)\n      uv[0] *= resolution.x/resolution.y;\n  else\n      uv[1] *= resolution.y/resolution.x;\n  return uv;\n}\n\n// Shading\nvec4 shade(vec2 p) {\n    \n    vec2 uv = pixelSpaceToUVSpace(p,iResolution.xy);\n  \n    vec2 C[N];\n    float H[N];\n    H[0] = 0.5;\n    H[1] = 0.3;\n    H[2] = 0.7;\n    H[3] = 0.0;\n    \n    float a[N];\n    float s = 1.0;\n    if (readKey(82,false) == true) {\n       s = 10.0;\n    }\n    a[0] = -4.9*s;\n    a[1] = -3.5*s;\n    a[2] = -8.1*s;\n    a[3] = 0.0*s;\n    rigidBodyPhysics(C,H,a);\n    \n    vec4 color = vec4(1.0,1.0,1.0,1.0);\n    vec4 groundColor = vec4(0.0,0.0,0.0,1.0);\n    vec4 maleballColor = vec4(0.0,0.0,0.0,1.0);\n    vec4 femaleballColor = vec4(1.0,0.0,0.0,1.0);\n    for (int i = 0; i < N-1; i++) {\n        vec2 c = C[i];\n        float d = signedDistanceToCircle(uv,c,0.2);\n        color = mix(color,maleballColor,1.0-smoothstep(0.0,0.001,d));\n    }\n    float d = signedDistanceToCircle(uv,C[N-1],0.2);\n    color = mix(color,femaleballColor,1.0-smoothstep(0.0,0.001,d));\n    \n    color = mix(color,groundColor,1.0-smoothstep(0.0,0.001,signedDistanceToHorizontalLine(uv,-0.2)));\n    \n    return color;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // multi sampling\n    const int M = 3;\n    vec4 color = vec4(0.0,0.0,0.0,1.0);\n    \n    for (int i = -M; i < M; i++) {\n        for (int j = -M; j < M; j++) {\n            color += shade(fragCoord.xy+0.2*vec2(i,j));\n        }\n    }\n    \n\tfragColor = color/(float(2*M)*float(2*M));\n}","name":"","description":"","type":"image"}]}