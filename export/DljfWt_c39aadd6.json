{"ver":"0.1","info":{"id":"DljfWt","date":"1694620408","viewed":23,"name":"Fork Flower 3 (With Insha)","username":"liunicholas6","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"dtBfWd","parentname":"Flower 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\n \nconst float PI = 3.1415926535;\n\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\nvec4 smoothcircle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n    float d= length(center - uv) - radius;\n    d = clamp(d, 0.0, radius);\n\tfloat t = smoothstep(0.0, radius, d);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    radius *= (4.0 + twave(a + PI * 0.5 + iTime, PI/2.5)) / 4.0;\n    \n    return radius;\n}\n\nfloat computeStamen(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y) + iTime;\n    float triangle = triangle_wave(a, 5.f/ PI, 2.f);\n    // changes here ! \n    // modifying radius according to time\n    radius = cos(20.0 * a) * bias(abs(sin(iTime)), 0.1) * 0.1 * iResolution.y + radius*triangle;\n    \n    return radius * 0.4;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 background = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n    \n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec4 body = circle(uv, center, radius, red);\n\t\n    vec4 color = mix(background, body, body.a);\n    \n    // Inner circle\n    vec3 yellow = rgb(255.0, 255.0, 0.0);\n    vec4 inner = smoothcircle(uv, center, computeStamen(uv), yellow);\n\t\n    // Blend the two\n    color = mix(color, inner, inner.a);\n\tfragColor = color;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat twave(float x, float p) {\n    return 4.0/p * abs(mod((x - p/4.0), p) - p/2.0) - 1.0;\n}\n\nfloat triangle_wave(float x, float freq, float amplitude) {\n    return abs(abs(mod(x * freq, amplitude) - 0.5 * amplitude));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}