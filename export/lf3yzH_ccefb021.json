{"ver":"0.1","info":{"id":"lf3yzH","date":"1730233242","viewed":82,"name":"Exact Pentadecagon Algebra","username":"rikr","description":"I never did an elementary construction of a pentadecagon before either.. So here I tried to make it compact and made it into shader code... Made By Rik Riesmeijer - No Rights Reserved. License: CC0, Released To The Public Domain.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["cycle","circle","ring","tower","dots","sqrt","coloring","algebra","compass","15","ruler","cyclic","construct","surd","extensions","pentadecagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Exact Pentadecagon Algebra.\n// Made By Rik Riesmeijer - No Rights Reserved.\n// License: CC0, Released To The Public Domain.\n\n// One color for each pentadecagon corner.\nvec4 cl01 = vec4(1.0, 1.0, 1.0, 1);\nvec4 cl02 = vec4(0.6, 0.0, 0.8, 1);\nvec4 cl03 = vec4(0.5, 0.4, 0.9, 1);\nvec4 cl04 = vec4(0.3, 0.7, 0.5, 1);\nvec4 cl05 = vec4(0.6, 0.4, 0.8, 1);\nvec4 cl06 = vec4(0.9, 0.4, 0.9, 1);\nvec4 cl07 = vec4(1.0, 0.7, 1.0, 1);\nvec4 cl08 = vec4(0.4, 0.7, 0.9, 1);\nvec4 cl09 = vec4(0.5, 0.9, 0.6, 1);\nvec4 cl10 = vec4(0.5, 1.0, 0.7, 1);\nvec4 cl11 = vec4(0.9, 0.4, 0.4, 1);\nvec4 cl12 = vec4(0.8, 1.0, 0.2, 1);\nvec4 cl13 = vec4(0.9, 0.8, 0.0, 1);\nvec4 cl14 = vec4(0.8, 0.2, 1.0, 1);\nvec4 cl15 = vec4(1.0, 0.4, 0.0, 1);\n\n// Euclidean norm based distance function.\nfloat dist(vec2 x, vec2 y) {\n    return length(x - y);\n}\n\n// Shaping function for color blending.\nfloat smst(float x) {\n    return smoothstep(0.2, 0.1, x);\n}\n\n// Main shader function.\nvoid mainImage(out vec4 y, vec2 z) {\n    y = vec4(0.0); // Initialize color.\n    \n    // Normalize coordinates.\n    z = z - 0.5 * iResolution.xy;\n    z = 2.3 * z / iResolution.yy;\n    \n    // Enumerate the algebraic expression for each corner.\n    float x01 =  1.0;\n    float y01 =  0.0;\n    vec2  p01 =  vec2(x01, y01);\n    \n    float x02 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y02 =  sqrt((7.0 + sqrt(5.0) - sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p02 =  vec2(x02, y02);\n    \n    float x03 =  sqrt(5.0) / 8.0 - 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y03 =  sqrt((7.0 - sqrt(5.0) + sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p03 =  vec2(x03, y03);\n    \n    float x04 =  sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y04 =  sqrt((10.0 + sqrt(20.0)) / 16.0);\n    vec2  p04 =  vec2(x04, y04);\n    \n    float x05 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y05 =  sqrt((7.0 + sqrt(5.0) + sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p05 =  vec2(x05, y05);\n    \n    float x06 = -4.0 / 8.0;\n    float y06 =  sqrt(12.0 / 16.0);\n    vec2  p06 =  vec2(x06, y06);\n    \n    float x07 = -sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y07 =  sqrt((10.0 - sqrt(20.0)) / 16.0);\n    vec2  p07 =  vec2(x07, y07);\n    \n    float x08 = -sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 + sqrt(5.0)) / 64.0);\n    float y08 =  sqrt((7.0 - sqrt(5.0) - sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p08 =  vec2(x08, y08);\n    \n    float x09 = -sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 + sqrt(5.0)) / 64.0);\n    float y09 = -sqrt((7.0 - sqrt(5.0) - sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p09 =  vec2(x09, y09);\n    \n    float x10 = -sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y10 = -sqrt((10.0 - sqrt(20.0)) / 16.0);\n    vec2  p10 =  vec2(x10, y10);\n    \n    float x11 = -4.0 / 8.0;\n    float y11 = -sqrt(12.0 / 16.0);\n    vec2  p11 =  vec2(x11, y11);\n    \n    float x12 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y12 = -sqrt((7.0 + sqrt(5.0) + sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p12 =  vec2(x12, y12);\n    \n    float x13 =  sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y13 = -sqrt((10.0 + sqrt(20.0)) / 16.0);\n    vec2  p13 =  vec2(x13, y13);\n    \n    float x14 =  sqrt(5.0) / 8.0 - 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y14 = -sqrt((7.0 - sqrt(5.0) + sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p14 =  vec2(x14, y14);\n    \n    float x15 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y15 = -sqrt((7.0 + sqrt(5.0) - sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p15 =  vec2(x15, y15);\n    \n    // Calculate screen distance.\n    float d01 = dist(z, p01);\n    float d02 = dist(z, p02);\n    float d03 = dist(z, p03);\n    float d04 = dist(z, p04);\n    float d05 = dist(z, p05);\n    float d06 = dist(z, p06);\n    float d07 = dist(z, p07);\n    float d08 = dist(z, p08);\n    float d09 = dist(z, p09);\n    float d10 = dist(z, p10);\n    float d11 = dist(z, p11);\n    float d12 = dist(z, p12);\n    float d13 = dist(z, p13);\n    float d14 = dist(z, p14);\n    float d15 = dist(z, p15);\n    \n    // Color the canvas.\n    y = smst(d01) * cl01 + y;\n    y = smst(d02) * cl02 + y;\n    y = smst(d03) * cl03 + y;\n    y = smst(d04) * cl04 + y;\n    y = smst(d05) * cl05 + y;\n    y = smst(d06) * cl06 + y;\n    y = smst(d07) * cl07 + y;\n    y = smst(d08) * cl08 + y;\n    y = smst(d09) * cl09 + y;\n    y = smst(d10) * cl10 + y;\n    y = smst(d11) * cl11 + y;\n    y = smst(d12) * cl12 + y;\n    y = smst(d13) * cl13 + y;\n    y = smst(d14) * cl14 + y;\n    y = smst(d15) * cl15 + y;\n}\n","name":"Image","description":"","type":"image"}]}