{"ver":"0.1","info":{"id":"MtSczD","date":"1507650257","viewed":267,"name":"Unstable FitzHugh-Nagumo","username":"FlexMonkey","description":"The `z` component contains a running total of the `x` species. Once it exceeds a specified value, both `x` and `z` are reset to 0.\n\nUses multiple, identical buffers to get 4 passes per frame.","likes":15,"published":1,"flags":48,"usePreview":0,"tags":["unstablefitzhughnagumo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | October 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    \n    vec2 ab = (texture(iChannel0, coord).xy + 1.0) * 0.5;\n    \n    fragColor = vec4(1.0 - vec3(abs(ab.x-ab.y)), 1.0); \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.15;\nfloat a1 = 1.8;\nfloat epsilon = 0.025;\nfloat delta = 4.0;\nfloat k1 = 1.05;\nfloat k2 = -0.5;\nfloat k3 = 1.4;\n\n\nfloat timestep = 0.06; \n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float a = ab.x;\n    float b = ab.y;\n\n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n\n   \tvec2 result = vec2(clamp(a + delta_a * timestep, -1.0, 1.0), \n                       clamp(b + delta_b * timestep, -1.0, 1.0));\n\n    if(ab.xyz == vec3(0) || reset()) {\n        float h = 0.1;\n        float w = h * iResolution.y / iResolution.x;\n        \n        if ((abs(coord.x - 0.5) < w && abs(coord.y - 0.5) < h)) {\n            fragColor = vec4(noise(coord) * 4.0, 0.0, 0.0, 0);\n        } else {\n        \tfragColor = vec4(-1, -noise(coord) * 0.2, 0, 1);\n        }\n        \n    } else {\n        // `z` holds sum of `x` species....\n        fragColor = vec4(result.xy, ab.z + result.x, 1.0);\n    }\n    \n    // decay phase\n    if (fragColor.z > 70.0) {\n     \tfragColor.x = -noise(coord * iTime) * 0.3;\n        fragColor.z = fragColor.x;\n    }\n\n\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.15;\nfloat a1 = 1.8;\nfloat epsilon = 0.025;\nfloat delta = 4.0;\nfloat k1 = 1.05;\nfloat k2 = -0.5;\nfloat k3 = 1.4;\n\n\nfloat timestep = 0.06; \n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float a = ab.x;\n    float b = ab.y;\n\n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n\n   \tvec2 result = vec2(clamp(a + delta_a * timestep, -1.0, 1.0), \n                       clamp(b + delta_b * timestep, -1.0, 1.0));\n\n\tfragColor = vec4(result.xy, ab.z + result.x, 1.0);\n    \n    // decay phase\n    if (fragColor.z > 70.0) {\n     \tfragColor.x = -noise(coord * iTime) * 0.3;\n        fragColor.z = fragColor.x;\n    }\n\n\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.15;\nfloat a1 = 1.8;\nfloat epsilon = 0.025;\nfloat delta = 4.0;\nfloat k1 = 1.05;\nfloat k2 = -0.5;\nfloat k3 = 1.4;\n\nfloat timestep = 0.06; \n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float a = ab.x;\n    float b = ab.y;\n\n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n\n   \tvec2 result = vec2(clamp(a + delta_a * timestep, -1.0, 1.0), \n                       clamp(b + delta_b * timestep, -1.0, 1.0));\n\n    fragColor = vec4(result.xy, ab.z + result.x, 1.0);\n    \n    // decay phase\n    if (fragColor.z > 70.0) {\n     \tfragColor.x = -noise(coord * iTime) * 0.3;\n        fragColor.z = fragColor.x;\n    }\n\n\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | September 2017\n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n\nfloat a0 = -0.15;\nfloat a1 = 1.8;\nfloat epsilon = 0.025;\nfloat delta = 4.0;\nfloat k1 = 1.05;\nfloat k2 = -0.5;\nfloat k3 = 1.4;\n\nfloat timestep = 0.06; \n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0); \n\n    vec4 ab = texture(iChannel0, coord);\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float a = ab.x;\n    float b = ab.y;\n\n    float delta_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n    float delta_b = epsilon*(k3*a - a1*b - a0) + delta*laplacian.y; \n\n   \tvec2 result = vec2(clamp(a + delta_a * timestep, -1.0, 1.0), \n                       clamp(b + delta_b * timestep, -1.0, 1.0));\n\n    fragColor = vec4(result.xy, ab.z + result.x, 1.0);\n    \n    // decay phase\n    if (fragColor.z > 70.0) {\n     \tfragColor.x = -noise(coord * iTime) * 0.3;\n        fragColor.z = fragColor.x;\n    }\n\n\n}","name":"Buf D","description":"","type":"buffer"}]}