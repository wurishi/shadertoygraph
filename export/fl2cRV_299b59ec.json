{"ver":"0.1","info":{"id":"fl2cRV","date":"1650371959","viewed":62,"name":"peephole","username":"blomgus","description":"A function to draw a simple circle based on coordinates and radius.\n\nFork: adding more circles","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","geometry"],"hasliked":0,"parentid":"XsjGDt","parentname":"A Simple Circle"},"renderpass":[{"inputs":[],"outputs":[],"code":"/**\n * @author jonobr1 / http://jonobr1.com/\n */\n\n/**\n * Convert r, g, b to normalized vec3\n */\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/**\n * Draw a circle at vec2 `pos` with radius `rad` and\n * color `color`.\n */\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n    vec2 uvmap = fragCoord/iResolution.xy;\n\tvec2 center = iMouse.xy;\n\tfloat radius = 0.7 * iResolution.y;\n\n    // Background layer\n\tvec4 layer1 = vec4(rgb(50.0, 50.0, 50.0), 1.0);\n\t\n\t// Circle\n\tvec3 blue = rgb(29.0, 117.0, 108.0);\n    vec3 red = rgb(211.0, 92.0, 78.0);\n    vec3 col = 0.9 * cos(uvmap.xyx);\n    vec3 inversecol = vec3(1, 1, 1) - col;\n\tvec4 layer2 = circle(uv, center, radius / 2.0, inversecol);\n    vec4 layer3 = circle(uv, center, radius / 4.0, col);\n\t\n\t// Blend the two\n    fragColor = mix(mix(layer1, layer2, layer2.a), layer3, layer3.a);\n\n}","name":"Image","description":"","type":"image"}]}