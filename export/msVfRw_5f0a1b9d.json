{"ver":"0.1","info":{"id":"msVfRw","date":"1698133361","viewed":46,"name":"pulse-shapes","username":"alesteba","description":"pulse shapes","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    \n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    \n    p.x = abs(p.x) - r;\n    \n    p.y = p.y + r/k;\n    \n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    \n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    \n    return -length(p)*sign(p.y);\n}\n\nint binarySearch(float[3] nums,float searchnum ){\n\n    int low = 0;\n    int high = 3 - 1;\n    int mid = (low + high) / 2;\n    \n    while(low < high){\n        if(nums[mid] < searchnum){\n            if(nums[mid + 1] > searchnum){\n                return mid;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        else{\n            high = mid - 1;\n        }\n        mid = (low + high) / 2;\n    }\n    \n    return mid;\n}\n\n\nfloat lerp (float x0, float x1, float y0, float y1, float x)\n{\n    float d = x1 - x0;\n    \n    if (d == 0.0)\n        return (y0 + y1) / 2.0;\n        \n    return y0 + ( (x - x0) * (y1 - y0) ) / d;\n}\n\nfloat piecewise_lerp (float[3] Xs, float[3] Ys, float x)\n{\n    int index = int(binarySearch(Xs, x));\n\n    return lerp\n    (\n        Xs[index ], Xs[index+1],\n        Ys[index ], Ys[index+1],\n        x\n    );\n}\n\nfloat pulse(float time) {\n\n    float pi = 3.14;\n    float frequency = 0.1;\n    return 0.5*(1.0+sin(2.0 * pi * frequency * time));\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nvec3 hsb2rgb(in vec3 c)\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0 );\n                     \n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    \n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = 3.14159265359;\n    \n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float amount = (sin(iTime));\n    \n    float circle = sdCircle(uv,0.5);\n    float square = sdBox(uv,vec2(0.5));\n       \n    uv = scale( vec2(sin(iTime)+2.) ) * uv;\n    uv = rotate2d( amount ) * uv;\n    float triangle = sdEquilateralTriangle(uv, 0.5);\n    \n    //float pulse = abs(sin(iTime));\n    float pulse = pulse(iTime);\n    \n    float x[3]=float[](0.0,0.5,1.0); \n    float y[3]=float[](circle,triangle,square); \n    \n    float combination = piecewise_lerp(x,y,pulse);\n    \n    float r = length(uv) * 0.9;\n\tvec3 color = hsb2rgb(vec3(0.24, 0.7, 0.4));\n    \n    float a = pow(r, 2.0);\n    float b = sin(r * 0.8 - 1.6);\n    float c = sin(r - 0.010);\n    float s = sin(a - iTime * 3.0 + b) * c;\n    \n    color *= abs(1.0 / (s * 10.8)) - 0.01;\n\n    vec3 col = mix(vec3(0.5), color, 1.0-smoothstep(0.0,8./iResolution.y,abs(combination)) );\n    \n    fragColor = vec4(col,1.0);\n    \n}\n\n// try noise to one of those shapes. \n","name":"Image","description":"","type":"image"}]}