{"ver":"0.1","info":{"id":"4ldXWN","date":"1481062952","viewed":229,"name":"Golden Spiral","username":"Jrice06","description":"This shader is a completely original effort to recreate the golden spiral, a logarithmic spiral whose growth factor is\nthe golden ratio. More info can be found at: https://en.wikipedia.org/wiki/Golden_spiral","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.141592654;\nfloat phi = 1.61803;\nfloat thick = .005;\n    \nvec4 curveIn(float leftX, float botY, float w, vec2 uv, float time)\n{\n    float a, b;\n    vec2 point;\n    \n    //vec4 retColor = vec4(1.0, 1.0, 1.0, 1.0);\n\tvec4 retColor = .5 * vec4(time / 5.0, time / 5.0, time / 5.0,1.0);\n    //vec4 retColor = texture(iChannel0, uv);\n    for (int ndx = 0; ndx < 10; ndx++)\t{\n         // Start of the loop\n        a = w / phi;\n        b = a / phi;\n        float time = iTime / 15.0;\n        vec4 color = vec4(1.0, 0.843137, 0.0, 1.0);\n\n        point = vec2(leftX + a, botY + 0.0);\n        if (distance(uv, point) <= a + thick && distance(uv, point) >= a - thick \n            && uv.x < point.x && uv.y > point.y)\t{\n           retColor = color;\n        }\n\n        point = vec2(leftX + a, botY + a - b);\n        if (distance(uv, point) <= b + thick && distance(uv, point) >= b - thick\n            && uv.y > point.y && uv.x > point.x)\t{\n           retColor = color;\n        }\n\n        float temp = a + b * (1.0 - 1.0 / phi);\n        point = vec2(leftX + temp, botY + a - b);\n\n        if (distance(uv, point) <= a - b + thick && distance(uv, point) >= a - b - thick\n            && uv.y < point.y && uv.x > point.x)\t{\n           retColor = color;\n        }\n\n        float temp2 = (a - b) / phi;\n        point = vec2(leftX + temp, botY + temp2);\n\n        if (distance(uv, point) <= temp2 + thick && distance(uv, point) >= temp2 - thick\n            && uv.y < point.y && uv.x < point.x)\t{\n           retColor = color;\n        }\n\n        leftX = (leftX + temp) - temp2;\n        botY = botY + temp2;\n        w = temp2;\n        // End of loop\n    }\n    return retColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    float intense = 180.4; \n    float leftX = 0.0, botY = 0.0, w;\n    float a, b, maxTime = 15.0;\n    vec2 point;\n    float time = abs(sin(iTime * pi / 20.5));\n    \n    uv.x -=  intense * 1.7009 * pow(time / 2.763, .5);\n    uv.y -=  intense * .825 * pow(time / 11.7, .5);\n    w = 256.0 - intense * pow(2.0 * time, .5);\n    \n   // uv.x += 184.735;\n    uv.x += 184.4;\n    uv.y += 43.25;\n    \n\tfragColor = curveIn(leftX, botY, w, uv, time);\n    \n}","name":"Image","description":"","type":"image"}]}