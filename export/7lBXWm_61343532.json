{"ver":"0.1","info":{"id":"7lBXWm","date":"1627806026","viewed":551,"name":"Rounded Rectangle with Blur","username":"finntenzor","description":"Modified from gPlatl's code\nIt has the same behavior as border-radius and box-shadow in CSS\nrectangle, rounded rectangle, rounded rectangle with blur\nsee also: https://www.shadertoy.com/view/MssyRN","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","blur","roundedrectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modified from gPlatl's code\n// It has the same behavior as border-radius and box-shadow in CSS\n// rectangle, rounded rectangle, rounded rectangle with blur\n// see also: https://www.shadertoy.com/view/MssyRN\n\nvec2 uv;\n\nfloat rectangle(vec2 pos, vec2 size)\n{\n    vec2 hSize = size / 2.0;\n    float d = length(max(abs(uv - pos),hSize)-hSize);\n    return step(0.0, -d);\n}\n\nfloat roundedRectangle(vec2 pos, vec2 size, float radius)\n{\n    vec2 hSize = size / 2.0 - radius;\n    float d = length(max(abs(uv - pos),hSize)-hSize);\n    return step(-radius, -d);\n}\n\nfloat roundedRectangleWithBlur(vec2 pos, vec2 size, float radius, float blur)\n{\n    vec2 hSize = size / 2.0 - radius;\n    float d = length(max(abs(uv - pos),hSize)-hSize);\n    return smoothstep(-radius-blur, -radius+blur, -d);\n}\n\nfloat modulo(float x, float y)\n{\n    return x - (y * floor(x/y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(1.0, 0.0, 0.0);\n    vec2 pos = vec2(0.0,0.0); // the position of the center of the rectangle\n    vec2 size = vec2(1.2, 0.8); // width, height\n    float radius = 0.3; // the radius of the corner\n    float blur = 0.1; // the blur radius\n    float aspect = iResolution.x / iResolution.y;\n    float intensity;\n    float mode;\n\n    // y: -1 .. 1\n    // x: -aspect .. aspect\n    uv = (fragCoord/iResolution.yy) * 2.0 - vec2(aspect, 1.0);\n\n    // change mode if mouse press to different area\n    mode = modulo(iTime, 3.0);\n    if (mode < 1.0)  {\n        intensity = rectangle(pos, size);\n    } else if (mode < 2.0) {\n        intensity = roundedRectangle(pos, size, radius);\n    } else {\n        intensity = roundedRectangleWithBlur(pos, size, radius, blur);\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(1.0,0.0,0.0) * intensity,1.0);\n}","name":"Image","description":"","type":"image"}]}