{"ver":"0.1","info":{"id":"tslyDX","date":"1585763156","viewed":379,"name":"Paper fractal","username":"Flopine","description":"Made a small shader as a training for a Cookie stream and to experiment with plane folding. \nYou can watch Cookie streams here: https://www.twitch.tv/cookiecollectif/","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow","origami"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(54.4,62.1)))*457.5);}\n\nmat2 rot (float a)\n{return mat2 (cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat plane (vec3 p, vec3 n)\n{return dot(p, normalize(n));}\n\nfloat cut_ps (vec3 p, float s)\n{\n    p *= s;\n    mo(p.xy,vec2(1.));\n    mo(p.yz,vec2(0.6));\n    mo(p.xz, vec2(0.1));\n    return plane(p,vec3(1.,1.,4.))/(s);\n}\n\nfloat prim1 (vec3 p, float s)\n{\n    p.xz *= rot(iTime);\n    return cut_ps(p,s);\n}\n\nfloat fractal(vec3 p)\n{\n    float size = 1.;\n    float d = prim1(p,size);\n    for (int i=1; i<5; i++)\n    {\n        float ratio = float(i)/5.;         \n        p.yz *= rot(iTime*ratio);\n\t\tsize -= 0.2;\n        d = min(d, prim1(p,size));\n    }\n    return d;\n}\n\nfloat g1 = 0.;\nfloat SDF (vec3 p)\n{\n    float noise = texture(iChannel0, (p.xy*0.1)+iTime).r;\n    float sphe = length(p)-(.8+noise);\n    g1 += 0.1/(0.1+sphe*sphe);\n    return max(-length(p+vec3(0.,0.,4.5))+.8,min(sphe,fractal(p)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(0.001,0.001,-4.5),\n        rd = normalize(vec3(uv,0.8)),\n        p = ro,\n        col = vec3(0.1);\n    \n    float shad = 0.;\n    bool hit = false;\n    for (float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        d *= 0.8+dither*0.1;\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        col = vec3(1.-shad);\n\t\tcol += g1*vec3(0.15,0.,0.1);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}