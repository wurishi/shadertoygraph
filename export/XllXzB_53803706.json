{"ver":"0.1","info":{"id":"XllXzB","date":"1641514616","viewed":145,"name":"Interstellarsssss","username":"sortofsleepy","description":"Just me fucking around, changing variables and seeing what happens. \n\nInspired by @TekF\nhttps://www.shadertoy.com/view/Xdl3D2\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n\n\nfloat random(vec3 scale,float seed){return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453+seed);}\n\nfloat unpack_depth(const in vec4 color) {\n\treturn ( color.r * 256. * 256. * 256. + color.g * 256. * 256. + color.b * 256. + color.a ) / ( 256. * 256. * 256. );\n}\n\nfloat sampleDepth( vec2 uv ) {\n\treturn unpack_depth( texture( iChannel3, uv ) );\n}\n\n#define R 2.\nvec3 colorize(vec2 pos){\t\n\t\n    vec2 uv = pos;\n\tuv \t\t= uv * 2. - 1.;\n\tuv.x \t\t*= iResolution.x/iResolution.y;\n\t\t\n\t\n\tfloat t \t= sqrt(2.)/2.;\n\tvec3 uvw\t= vec3((t*uv.x-uv.y), -(t*uv.x+uv.y), uv.y*2.);\n\t\t\n\tvec3 f \t\t= vec3(0.);\n\t\n\tvec3 r \t\t= vec3(0.);\t\n\t\n\tfloat e \t= .25;\n\tfor(float i = 1.; i <= R; i++)\n\t{\n\t\tf \t= 1.-vec3((mod(e * uvw.x, 1.) < .5 ^^ mod(e * uvw.y, 1.) < .5));\n\t\t\n\t\tf \t*= fract(uvw*e);\n\t\t\n\t\tr\t+= abs(f/i*2.5)-.25;\n\t\t\n\t\te \t*= 2.;\t//(mouse.x-.5)*32.;\t\n\t}\n\t\n\tr += r/R;\n\t\n\t\n    return r;\n}\n\n\n// Gamma correction\n#define GAMMA (2.2)\n\nvec3 ToLinear( in vec3 col )\n{\n\t// simulate a monitor, converting colour values into light values\n\treturn pow( col, vec3(GAMMA) );\n}\n\nvec3 ToGamma( in vec3 col )\n{\n\t// convert back into colour values, so the correct light will come out of the monitor\n\treturn pow( col, vec3(1.0/GAMMA) );\n}\n\nvec4 Noise( in ivec2 x )\n{\n\treturn texture( iChannel0, (vec2(x)+0.5)/256.0, -100.0 );\n}\n\nvec4 Rand( in int x )\n{\n\tvec2 uv;\n\tuv.x = (float(x)+0.5)/256.0;\n\tuv.y = (floor(uv.x)+0.5)/256.0;\n\treturn texture( iChannel0, uv, -100.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ray;\n    vec2 test =  vec2(sin(iResolution.x) * iTime,cos(iResolution.y) * iTime);\n    \n    vec2 test2 = rot2d(test,iTime);\n    \n\tray.xy = 2.0*(fragCoord.xy- test / 2.0)/iResolution.y;\n\tray.z = 0.4;\n\n\tfloat offset = iTime*.5;\t\n\tfloat speed2 = (cos(offset)+1.0)*2.0;\n\t\n    float speed = speed2+.1;\n    offset += sin(offset)*.96;\n\toffset += 2.0;\n\t\n\t\n\tvec3 col = vec3(0);\n\t\n\tvec3 stp = ray/max(abs(ray.x),abs(ray.y));\n\t\n\tvec3 pos = 5.0 * stp + .5;\n    \n\tfor ( int i=0; i < 100; i++ )\n\t{\n\t\tfloat z = Noise(ivec2(pos.xy)).x;\n        \n\t\tz = fract(z-offset);\n        \n\t\t\n       float d = 50.0*z-pos.z;\n\t\t\n        float w = pow(max(0.0,1.0-8.0*length(fract(pos.xy)-.5)),2.0);\n\t\t\n        vec3 c = max(vec3(0),vec3(1.0-abs(d+speed2*.5)/speed,1.0-abs(d)/speed,1.0-abs(d-speed2*.5)/speed));\n\t\t\n        col -= 1.5*(1.0-z)*c*w;\n\t\t\n        col.xyz *= colorize(vec2(c.x,w));\n        pos += stp;\n\t}\n\t\n    col.x *= sin(iTime);\n\tcol.y *= cos(iTime);\n\tfragColor = vec4(ToGamma(col),1.0);\n}\t","name":"Image","description":"","type":"image"}]}