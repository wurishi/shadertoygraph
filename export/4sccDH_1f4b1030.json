{"ver":"0.1","info":{"id":"4sccDH","date":"1518600055","viewed":238,"name":"Rainbow Nephroid","username":"Ultraviolet","description":"Further explorations on nephroids, follow-up of [url]https://www.shadertoy.com/view/XddcDr[/url].","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["reflection","caustic","parabola","accumulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Rainbow Cardioid - Cord\" by Ultraviolet. https://shadertoy.com/view/XsccDH\n// 2018-02-14 08:58:18\n\n// Fork of \"Rainbow Cardioid\" by Ultraviolet. https://shadertoy.com/view/4dccDH\n// 2018-02-14 08:46:45\n\n// Fork of \"Caustic Nephroid\" by Ultraviolet. https://shadertoy.com/view/XddcDr\n// 2018-02-14 08:14:12\n\n\nfloat drawAlpha(Ray r, vec2 p, float width)\n{\n    float d = dist(r, p);\n    return mix(1.,0.,clamp(d*iResolution.y/2. - width, -1., 1.)*.5+.5);\n}\n\nvoid draw(Ray r, vec2 p, float width, vec3 fgCol, inout vec3 bgCol)\n{\n    bgCol = mix(bgCol, fgCol, drawAlpha(r, p, width));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 buf = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec3 c = buf.rgb;\n    \n    c = sqrt(c);\n    //c = (1.-c)*(1.-c);\n    \n    //c = 1.-sqrt(c);\n    \n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define lineWidth \t(-.5)\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    int N = int(iResolution.y);\n    float dy = 1. / (float(N)-1.);\n    float k0 = float(iFrame%N) *dy;\n    float k1 = float((iFrame/N)%N) * dy*.33;\n    float k = fract(k0+k1);\n    \n    \n    vec2 p = (fragCoord -iResolution.xy*.5)/iResolution.y*2.;\n    vec3 col = vec3(0.);\n    float d;\n    \n    \n    Circle c = Circle(vec2(0.), 1.);\n    \n    Ray r = Ray(vec2(0., 2.*(k-.5)), vec2(1., 0.));\n    \n    vec2 t;\n    intersect(c, r, t);\n    \n    vec2 p0 = getPt(r, t.x);\n    vec2 n0 = normalize(c.ctr-p0);\n    vec2 d0 = reflect(r.dir, n0);\n    Ray r0 = Ray(p0, d0);\n    \n    vec2 tt;\n    intersect(c, r0, tt);\n    \n    vec2 p1 = getPt(r0, tt.x);\n     \n    d = dist(Segment(p0,p1),p);\n    vec3 cc = hsv2rgb_smooth(vec3(k*.5,1.,1.));\n    col = mix(col, cc, mix(1.,0.,clamp(d*iResolution.y/4. - lineWidth, -1., 1.)*.5+.5));\n    \n    \n    \n    p0 = getPt(r, t.y);\n    n0 = normalize(c.ctr-p0);\n    d0 = reflect(r.dir, n0);\n    r0 = Ray(p0, d0);\n    \n    intersect(c, r0, tt);\n    \n    p1 = getPt(r0, tt.y);\n    \n    \n    d = dist(Segment(p0,p1),p);\n    cc = hsv2rgb_smooth(vec3(1.-k*.5,1.,1.));\n    col = mix(col, cc, mix(1.,0.,clamp(d*iResolution.y/4. - lineWidth, -1., 1.)*.5+.5));\n    \n    \n    \n    \n    \n    \n    col *= 20.;\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    \n    //fragColor += vec4(col*.1, 1.);\n    fragColor = (fragColor*float(iFrame) + vec4(col, 1.))/float(iFrame+1);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI\t3.1415926535\n\n\nstruct Circle\n{\n    vec2 ctr;\n    float rad;\n};\n    \nstruct Ray\n{\n    vec2 org;\n    vec2 dir;\n};\n    \nstruct Segment\n{\n    vec2 A;\n    vec2 B;\n};\n\nbool intersect(Circle c, Ray r, out vec2 t)\n{\n    float A = dot(r.dir, r.dir);\n    float B = dot(r.dir, -c.ctr+r.org);\n    float C = dot(c.ctr, c.ctr) +dot(r.org, r.org) -2.*dot(c.ctr, r.org) - c.rad*c.rad;\n    \n    float delta = B*B-A*C;\n    \n    if(delta < 0.0)\n    \treturn false;\n\n    t = (vec2(-B) + vec2(sqrt(delta))*vec2(-1.,1.))/A;\n    return true;\n}\n\nbool intersect(Ray r0, Ray r1, out vec2 t)\n{\n    t = inverse(mat2(r0.dir, -r1.dir))*(r1.org-r0.org);\n    return true;\n}\n\nvec2 getPt(Ray r, float t)\n{\n    return r.org + t*r.dir;\n}\n\nvec2 getPt(Circle c, float t)\n{\n    return c.ctr + c.rad*vec2(cos(t*PI*2.), sin(t*PI*2.));\n}\n\nfloat dist(Ray r, vec2 p)\n{\n    return abs(dot(r.dir.yx*vec2(-1., 1.), p-r.org)/dot(r.dir, r.dir));\n}\n\nfloat dist(vec2 p0, vec2 p1)\n{\n    return length(p1-p0);\n}\n\nfloat dist(Circle c, vec2 p)\n{\n    return abs(length(c.ctr-p)-c.rad);\n}\n\nfloat dist(Segment s, vec2 p)\n{\n\tvec2 pa = p-s.A, ba = s.B-s.A;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n    \n}\n\n\n\n\n\n","name":"Common","description":"","type":"common"}]}