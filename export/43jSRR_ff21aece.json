{"ver":"0.1","info":{"id":"43jSRR","date":"1710194155","viewed":178,"name":"Faster Hash","username":"Peace","description":"Fast and reliable hash (tho needs testing), cyan square is FFT. named it \"Fi Hash\", because I think it's good enough that I'll use it in my projects and I'll need something to refer it as.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["2d","fast","random","hash","float"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2024 Giorgi Azmaipharashvili\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Hash functions are in Buffer A\n\n// Overview\n\n// My Hash (I will call it \"Fi Hash\" for Float Int Hash)\n// Pros:\n// - 30% faster than \"hash without sine\" by david hoskins\n// - Reliable for small/huge numbers\n// - Probably reliable across hardware\n// Cons:\n// - 20% slower than \"sin hash\"\n// - Correlation/Artifacts for tiny deltas (visible at \"uv + iTime * 1e-4\")\n// - Uses ints, which is not supported by old GLSL/Hardware\n// - Needs testing\n\n// Sin Hash\n// Pros:\n// - Very Fast\n// - Supported by most hardware\n// Cons:\n// - Bad for low precision hardware (Mac, mobile)\n// - Bad for small/big inputs\n\n// Hash Without Sine\n// Pros:\n// - Reliable across hardware\n// - Supported by most hardware\n// Cons:\n// - Bad for small/huge inputs\n// - Slow\n\n// Overall consensus:\n// Start with using \"hash without sine\" \n// If using small/huge floats switch to fi hash\n// Otherwise if performance is issue use:\n  // \"fi hash\" if you want reliability across hardware\n  // \"sin hash\" otherwise\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 fft = texture(iChannel1, fragCoord / iResolution.xy).xy;\n    fft /= SIZE;\n    fragColor = vec4(0.75,1,1,1) * vec4(length(fft) * 2.0);\n    \n    \n    if (fragColor.a == 0.0) {\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy).rrrr;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The MIT License\n// Copyright © 2024 Giorgi Azmaipharashvili\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For copy/paste\nfloat hash12(vec2 p) {\n    uvec2 u = floatBitsToUint(p) * uvec2(2597334677, 3812015801);\n    return float((u.x ^ u.y) * 2597334677u) / float(~0u);\n}\n\nvec2 hash22(vec2 p) {\n    uvec2 u = floatBitsToUint(p) * uvec2(2597334677, 3812015801);\n    return vec2((u ^ u.yx) * uvec2(2597334677, 3194254219)) / float(~0u);\n}\n\nfloat hash11(float p) {\n    uint u = floatBitsToUint(p) * 2597334677u;\n    return float(u * u * 2597334677u) / float(~0u);\n}\n\n// Commented version:\nfloat hash12c(vec2 p) {\n    // p *= 1e8; // Uncomment to simulate low precision float device\n    // p *= 1e-8; // Uncomment to simulate low precision float device\n    \n    // Sin hash (bad for low precision hardware)\n\t// return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // Hash without sin (slow, bad for small values on my machine)\n\t// vec3 p3 = fract(p.xyx * 0.1031);\n    // p3 += dot(p3, p3.yzx + 33.33);\n    // return fract((p3.x + p3.y) * p3.z);\n    \n    // Fast hash (bad for small/big values)\n    // float a = fract(p.x * (p.y * 44.0864197531 + 264.518518518));\n    // return fract(a * a * 7142.0);\n    \n    // Range -1 to 1\n    //ivec2 u = floatBitsToInt(p) * ivec2(597334677, 812015801);\n    //return abs(float((u.x ^ u.y) * 597334677) / float(0x7FFFFFFF));\n    \n    // Range 0 to 1\n    uvec2 u = floatBitsToUint(p) * uvec2(2597334677, 3812015801);\n    return float((u.x ^ u.y) * 2597334677u) / float(~0u);\n}\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    // Benchmark (GTX 1060, 10k iters): (using unofficial shadertoy extension)\n    // Sin hash: 11.55 ms\n    // Fi hash: 14.55 ms \n    // Hash without sine by david hoskins: 21ms\n    \n    float d = 0.0;\n    for (int i = 0; i < 1000; ++i)\n        // \"+ iTime * 1e-4\" reveals small artifacts\n        d = hash12c(fragCoord / iResolution.xy + d * 1e-28); // + d to avoid compiler optimization\n    fragColor.x = d;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Fourier Transform\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    fragColor = vec4(0);\n    \n    if (fragCoord.x > SIZE || fragCoord.y > SIZE) return;\n        \n    for (float n = 0.; n < SIZE; n++)  {\n        vec2 xn = texture(iChannel0, vec2(n + 0.5, fragCoord.y) / iResolution.xy).xy,\n             yn = texture(iChannel1, vec2(fragCoord.x, n + 0.5) / iResolution.xy).zw,\n             a = -TAU * (fragCoord - 0.5 - SIZE * 0.5) * n / SIZE;\n        \n        fragColor.zw += cmul(xn, a.x);\n        fragColor.xy += cmul(yn, a.y);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float TAU = 6.2831853;\n\n#define SIZE ceil(iResolution.y * 0.75)\n\n#define W(uv) mod(uv + SIZE * 0.5, SIZE)\n\nvec2 cmul (vec2 a,float b) { return mat2(a, -a.y, a.x) * vec2(cos(b), sin(b)); } ","name":"Common","description":"","type":"common"}]}