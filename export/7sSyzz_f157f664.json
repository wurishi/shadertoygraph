{"ver":"0.1","info":{"id":"7sSyzz","date":"1642985979","viewed":168,"name":"apply insulate operator to twig","username":"jt","description":"Fork of [url]https://www.shadertoy.com/view/sdscDs[/url].\nProof of concept: render a tree-structure by applying insulate operator to nr4's twig 2d sdf to convert it to a 3d sdf.\nNr4's original 2d twig sdf: [url]https://www.shadertoy.com/view/tscBWB[/url].","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","sdf","tree","distance","skeleton","core","project","bound","extrude","2dto3d","insulate","embed","wireify","stringify","3dify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7sSyzz\n// Based on https://www.shadertoy.com/view/sdscDs insulate by jt.\n// Apply the \"insulate\" operator to nr4's 2d twig sdf to expand it into a 3d sdf.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n// https://www.shadertoy.com/view/tscBWB Twig Distance by nr4\nconst float pi = 3.14159;\nconst vec3 c = vec3(1.,0.,-1.);\n\nvoid dlinesegment(in vec2 x, in vec2 p1, in vec2 p2, out float d)\n{\n    vec2 da = p2-p1;\n    d = length(x-mix(p1, p2, clamp(dot(x-p1, da)/dot(da,da),0.,1.)));\n}\n\nfloat dtwig(in vec2 x) // https://www.shadertoy.com/view/tscBWB Twig Distance by nr4\n{\n    vec2 p1 = vec2(0, -1.0);\n    vec2 p2 = vec2(0, 2.0);\n    float d;\n    float N = 3.;\n    \n    // Root branch\n    dlinesegment(x, p1, p2, d);\n    \n    // \"Recursion\"\n    for(float j=0.; j<5.; j+=1.)\n    {\n        float l = length(p2-p1),\n        du = .05*l, // Upper and lower offset in y axis\n        w0 = .34*l, // Width of the lower side twig\n        w1 = .01*l, // Width of the upper side twig\n        dy = .15*l; // y difference of the side twigs\n    \n    \t// Determine basis and Gram matrix.\n        vec2 dp = p2-p1,\n            b1 = normalize(dp),\n            b2 = b1.yx*c.xz;\n        mat2 G = mat2(b1.yx, b2.yx);\n\t\t\n        //Set up Householder matrix\n        mat2 H = mat2(1.) - 2.*outerProduct(b2, b2);\n\t\t\t\n        // Mirror coordinates if necessary to reduce dlinesegment calls\n        if(dot(x-p1,b2) < 0.) x = H * (x-p1)+p1;\n        \n        // Set up inner modulo to avoid recursion branching problems\n        vec2 a = G * (x-p1);\n        \n        float dyy = .5*mix(0.,dy, a.x/w0),\n            en = (l-2.*du)/N;\n        \n        float da = mod(a.y-dyy-du+.5*(l-2.*du+dyy)/N, (l-2.*du+dyy)/N)+dyy+du-.5*(l-2.*du+dyy)/N,\n            i = ((a.y-da)*N/(l-2.*du+dyy));\n        i = min(max(i,0.),N-1.);\n\n        // Actual branch distance\n        dlinesegment(x, p1 + du*b1 + i*en*b1, p1 + (du+dy)*b1 + mix(w0,w1, i/N)*b2 + i*en*b1, da);\n        d = min(d,da);\n            \n        // Mix branches for accurate distance function\n        float ip1 = min(max(i+1.,0.),2.),\n            im1 = min(max(i-1.,0.),2.);\n        \n        dlinesegment(x, p1 + du*b1 + ip1*en*b1, p1 + (du+dy)*b1 + mix(w0,w1, ip1/N)*b2 + ip1*en*b1, da);\n        d = min(d,da);\n            \n        dlinesegment(x, p1 + du*b1 + im1*en*b1, p1 + (du+dy)*b1 + mix(w0,w1, im1/N)*b2 + im1*en*b1, da);\n        d = min(d,da);\n        \n        // Transform the points p1,p2 down one depth level\n        vec2 p1p = p1 + du*b1 + i*en*b1,\n        \tp2p = p1 + (du+dy)*b1 + mix(w0,w1, i/N)*b2 + i*en*b1;\n        \n        p1 = p1p;\n        p2 = p2p;\n    }\n    \n    return d;\n}\n\nfloat insulate_tree(vec3 p)\n{\n    float dp = p.y; // distance to plane\n    float d = dtwig(p.xz); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat map(vec3 p)\n{\n    float d = mix(0.01, 0.01, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n            insulate_tree(p) - d,\n            halfspace(p, -1.0)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 2.0 * pi * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi * 3.0 / 4.0;;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}