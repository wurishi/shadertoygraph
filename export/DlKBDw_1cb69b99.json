{"ver":"0.1","info":{"id":"DlKBDw","date":"1702152404","viewed":88,"name":"Twisted Columns 2","username":"SkippyGumdrop","description":"Based on Flyguy's \"Ring Teister\" [url=https://www.shadertoy.com/view/Xt23z3]Xt23z3[/url]. I didn't write this effect since around 1999. Only now it's antialiased, motion blurred, texture filtered and high resolution. Uncomment line 40 to see the columns.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","twist","columns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Fork of \"Twisted Columns\" by iq. https://shadertoy.com/view/Xl2GRc\n// 2023-12-09 20:06:22\n\n// User-configurable variables\nfloat segmentIntensity = 0.3; // Intensity of the segment color modulation\nfloat edgeSharpness = 0.02; // Sharpness of the segment edge\nint motionBlurSamples = 6; // Number of samples for motion blur\nfloat uvScale = 5.0; // Scale factor for UV coordinates\nfloat timeScale = 1.0; // Scale factor for time-based animations\nfloat ringRadius = 0.9; // Base radius of the rings\nfloat sinFrequency = 3.0; // Frequency of the sin function in segment calculation\nfloat colorMixFactor = 1.6; // Factor for mixing colors\nfloat colorReductionFactor = 0.1; // Factor for reducing color intensity\n\nvec4 segment(float x0, float x1, vec2 uv, float id, float time, float f) {\n    float u = (uv.x - x0) / (x1 - x0);\n    float v = -1.0 * (id + 0.5) * time + 2.0 * uv.y / 3.141593 + f * 2.0;\n    float w = (x1 - x0);\n\n    vec3 col = texture(iChannel0, vec2(u, v)).xyz;\n    col += segmentIntensity * sin(2.0 * f + 2.0 * id + vec3(0.0, 1.0, 2.0));\n\n    col *= mix(1.0, smoothstep(-0.8, -0.7, sin(80.0 * v) * sin(20.0 * u)), smoothstep(0.4, 0.5, sin(f * 17.0)));\n\n    col *= smoothstep(0.01, 0.03, 0.5 - abs(u - 0.5));\n\n    // lighting\n    col *= vec3(0.0, 0.1, 0.3) + w * vec3(1.1, 0.7, 0.4);\n    col *= mix(1.0 - u, 1.0, w * w * w * 0.45);\n\n    float edge = 1.0 - smoothstep(0.5, 0.5 + edgeSharpness / w, abs(u - 0.5));\n    return vec4(col, edge * step(x0, x1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord.xy) / max(iResolution.x, iResolution.y);\n\n    uv *= uvScale;\n\n    vec2 st = vec2(length(uv), atan(uv.y, uv.x));\n    //st = uv;  // uncomment to see the effect in Cartesian coordinates\n\n    float id = floor((st.x) / 2.0);\n\n    vec3 tot = vec3(0.0);\n    for (int j = 0; j < motionBlurSamples; j++) {\n        float h = float(j) / float(motionBlurSamples);\n        float time = iTime * timeScale + h * (1.0 / 30.0);\n\n        vec3 col = vec3(0.2) * (1.0 - 0.08 * st.x);\n\n        vec2 uvr = vec2(mod(st.x, 2.0) - 1.0, st.y);\n\n        float a = uvr.y + (id + 0.5) * timeScale * time + sinFrequency * sin(3.0 * uvr.y) * sin(2.0 * time);\n        float r = ringRadius;\n\n        float x0 = r * sin(a);\n        for (int i = 0; i < 5; i++) {\n            float f = float(i + 1) / 5.0;\n            float x1 = r * sin(a + 6.2831 * f);\n\n            vec4 seg = segment(x0, x1, uvr, id, time, f);\n            col = mix(col, seg.rgb, seg.a);\n\n            x0 = x1;\n        }\n        col *= (colorMixFactor - colorReductionFactor * st.x);\n        tot += col;\n    }\n\n    tot /= float(motionBlurSamples);\n\n    fragColor = vec4(tot, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}