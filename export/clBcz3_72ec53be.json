{"ver":"0.1","info":{"id":"clBcz3","date":"1692061185","viewed":109,"name":"3D Grid System","username":"amankhan","description":"A simple grid system to generate grids for debugging/visualization. Grids can be generated for XY/YZ/ZX planes. The individual grid spacing is customizable. Default grid squares are 1x1 unit but can be changed as needed.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","grid","visualization","debug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"3D Grid System\" \n// by Aman Khan, 2023\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 sdGrid(vec3 p, float thickness, vec2 size, vec3 choice) {\n    // (A)\n    // We are going to swizzle the xyz around based on the grid plane we want to generate.\n    // Choices are:\n    // x == 1. => xy DEFAULT\n    // y == 1. => yz\n    // z == 1. => zx\n    if(choice.y == 1.)\n        p.xyz = p.yzx;\n    else if(choice.z == 1.)\n        p.xyz = p.zxy;\n    \n    // (B) \n    // Calculate the centre of the individual cells. For example if we want it to be 2 units wide\n    // on each side, the midpoints are 1, 1\n    vec2 mid = size * 0.5; \n    \n    // (C)\n    // Shift the existing coordinate by the midpoint.\n    p.xy += mid; \n    \n    // (D)\n    // Modulo breaks the grid system into repeated multiples of our unit.\n    // For example a 2 x 2 unit grid would result in our p coordinates to be \n    // repeated in the 0,2 range.\n    p.xy = mod(p.xy, size); \n    \n    // (E)\n    // We now have a local grid system. We place the thin cylinder in the centre.\n    // We do this as leaving the cylinder in the origin leads to artifacts. And this \n    // is why we pre-shifted everything in (C). \n    p.xy -= mid;\n    \n    // Place the thin cylinders in the middle.\n    float Grid1 = length(p.xz) - thickness;\n    float Grid2 = length(p.yz) - thickness;\n    \n    // Boolean union\n    float d = min(Grid1, Grid2);\n    \n    return vec3(Grid1, Grid2, d);\n}\n\n// XY Plane Shortcut\nvec3 sdGridXY(vec3 p, float thickness, vec2 size) {\n    return sdGrid(p, thickness, size, vec3(1., 0., 0.));\n}\n\n// YZ Plane Shortcut\nvec3 sdGridYZ(vec3 p, float thickness, vec2 size) {\n    return sdGrid(p, thickness, size, vec3(0., 1., 0.));\n}\n\n// XY Plane Shortcut\nvec3 sdGridZX(vec3 p, float thickness, vec2 size) {\n    return sdGrid(p, thickness, size, vec3(0., 0., 1.));\n}\n\nvec3 Transform(vec3 p) {\n    p.xz *= Rot(iTime*0.1);\n    \n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    p = Transform(p);\n    \n    vec3 gridXY = sdGridXY(p, 0.01, vec2(1.)); // XY PLANE\n    vec3 gridYZ = sdGridYZ(p, 0.01, vec2(1.)); // YZ PLANE\n    vec3 gridZX = sdGridZX(p, 0.01, vec2(1.)); // ZX PLANE\n    float d = min(gridXY.z, min(gridYZ.z, gridZX.z));\n    \n    \n    float sphere = length(p-vec3(1.5, 0., 0.)) - .5;\n    float box = sdBox(p-vec3(-1.5, 0., 0.), vec3(0.5));\n    d = min(d, sphere);\n    d = min(d, box);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, -2, -6);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        p = Transform(p);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        // XY PLANE\n        vec3 grid = sdGridXY(p, 0.01, vec2(1.0));\n        if(min(grid.x, grid.y) < SURF_DIST) col = vec3(1., 0., 0.);\n        \n        // YZ PLANE\n        grid = sdGridYZ(p, 0.01, vec2(1.0));\n        if(min(grid.x, grid.y) < SURF_DIST) col = vec3(0., 1., 0.);\n        \n        // ZX PLANE\n        grid = sdGridZX(p, 0.01, vec2(1.0));\n        if(min(grid.x, grid.y) < SURF_DIST) col = vec3(0., 0., 1.);\n        \n    }\n    \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}