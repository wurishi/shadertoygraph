{"ver":"0.1","info":{"id":"msyfRz","date":"1697819384","viewed":70,"name":"Shadow simulator","username":"jovem_bacon","description":"Simulates the shadow produced by the sun in a two dimensional universe","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sun","shadow","moon","eclipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592653589793;\nconst float TAU = 2.0*PI;\n\nvec3 skyColor = vec3(0.0, 0.0, 0.0);\nvec3 sunColor = vec3(1.0, 0.8, 0.0);\nvec3 earthColor = vec3(0.0, 0.7, 1.0);\n\nvec3 getColor(vec2 pos) {\n    \n    vec2 sunPos = iResolution.xy*0.5;\n    vec2 sunDif = sunPos - pos;\n    vec2 sunDir = normalize(sunDif);\n    float sunDist = length(sunDif);\n    float sunRad = 30.0;\n    \n    vec2 earthPos = iResolution.xy*0.5 + vec2(sin(iTime)*150.0, cos(iTime)*150.0);\n    vec2 earthDif = earthPos - pos;\n    vec2 earthDir = normalize(earthDif);\n    float earthDist = length(earthDif);\n    float earthRad = 10.0;\n    \n    if (sunDist < sunRad) {\n        return sunColor;\n    }\n    \n    if (earthDist < earthRad) {\n        return earthColor;\n    }\n        \n    float sunAngRad = asin(sunRad/sunDist);\n    \n    if (earthDist < sunDist) {\n        return skyColor;\n    }\n    \n    float sum = sunAngRad*2.0;\n    return mix(skyColor, sunColor, pow(sum/PI, 0.5));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(getColor(fragCoord), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}