{"ver":"0.1","info":{"id":"dlVBDm","date":"1702170881","viewed":26,"name":"Chenrong Gu UCSD CSE 167 hw5","username":"c3gu","description":"This is a homework template for a homework for UCSD CSE 167.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    // Calculate separation force\n    vec2 force_s = vec2(0,0);\n    float nearby = 0.0;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n       ivec2 tex_pos_j = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel_j = texelFetch(iChannel0, tex_pos_j, 0);\n        if (distance(pos, pos_vel_j.xy) < 30.0 && distance(pos, pos_vel_j.xy) > 0.0){\n            force_s += (pos - pos_vel_j.xy);\n            nearby += 1.0;\n        }\n    }\n    if (nearby > 0.0){\n        force_s = force_s / nearby;\n    }\n    \n    // Calculate cohesion force\n    vec2 force_c = vec2(0,0);\n    vec2 average_v = vec2(0,0);\n    float nearby_vis = 0.0;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n       ivec2 tex_pos_j = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel_j = texelFetch(iChannel0, tex_pos_j, 0);\n        if (distance(pos, pos_vel_j.xy) < 150.0 && distance(pos, pos_vel_j.xy) > 0.0){\n            force_c += pos_vel_j.xy;\n            average_v += pos_vel_j.zw;\n            nearby_vis += 1.0;\n        }\n    }\n    if (nearby_vis > 0.0){\n        force_c = force_c / nearby_vis - pos;\n    } else {\n        force_c = force_c - pos;\n    }\n    // Calculate alginment force\n    vec2 force_a = vec2(0,0);\n    if (nearby_vis > 0.0){\n        average_v = average_v / nearby_vis;\n    }\n    force_a += average_v - vel;\n    \n    // Calculate boundry force\n    vec2 force_b = vec2(0,0);\n    float aa = 0.0;\n    float bb = 0.0;\n    float cc = 0.0;\n    float dd = 0.0;\n    if (pos.x < 200.0){ aa = 1.0;}\n    if (pos.x > (iResolution.x-200.0)){ bb = 1.0;}\n    if (pos.y < 160.0){ cc = 1.0;}\n    if (pos.y > (iResolution.y-160.0)){ dd = 1.0;}\n    force_b.x = aa - bb;\n    force_b.y = cc - dd;\n    \n    // Calculate total force\n    // Here I modified the coefficients a bit\n    vec2 force = 0.04 * force_s + 0.001 * force_c + 0.03 * force_a + 0.5 * force_b;\n    \n    vel = vel + force;\n    \n    if (length(vel) > 0.0){\n        if (length(vel) > 10.0) {\n            vel = vel * (10.0 / length(vel));\n        }\n        if (length(vel) < 5.0) {\n            vel = vel * (5.0 / length(vel));\n        }\n    }\n    \n    pos = pos + vel;\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}