{"ver":"0.1","info":{"id":"WdSfRd","date":"1590574655","viewed":197,"name":"RayMarching Test #1","username":"ncot_tech","description":"Raymarching tests following Art of Code YouTube videos.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Follows these YouTube Videos\n// https://www.youtube.com/watch?v=PGtv-dBi2wE\n// https://www.youtube.com/watch?v=Ff0jJyyiVyw\n\n// https://sausage-factory.games\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = clamp(.5+.5*(b-a)/k, 0., 1.);\n    return mix(b,a,h) - k*h*(1.0-h);\n}\n\nfloat remap(float a, float min1, float max1, float min2, float max2) {\n    return min2 + (max2-min2) * ((a-min1) / (max1-min1));\n}\n\n// angle\nmat2 Rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\n// a and b and the end positions, r is radius\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t,0.,1.);\n    \n    vec3 c = a + t*ab;\n    return length(p-c)-r;\n}\n\n// a is position, r is outer,inner radii\nfloat Torus(vec3 p, vec3 a, vec2 r)\n{\n    p -= a;\n    float x = length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n}\n\n// a is pos, s is size\nfloat Box(vec3 p, vec3 a, vec3 s)\n{\n    p -= a;\n    return length(max(abs(p)-s, 0.));\n}\n\n// This is really the scene itself\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0,1,6,1);\t// This is a sphere (x,y,z,radius)\n    \n    float sphereDist = length(p-s.xyz)-s.w;\n    //float planeDist = p.y;\t// Ground plane at 0;\n    \n    float cd = Capsule(p, vec3(0,.5,4), vec3(1,2,6), .2);\n    float td = Torus(p, vec3(0,.5,6), vec2(1.5, .3));\n    float bd = Box(p,vec3(-2,.5, 6),vec3(.5));\n    \n    // This is how you combine them\n    float d = smin(cd, td, .2);\n   // d = min(d, td);\n    d = smin(d, bd, .2);\n    \n    return d;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd)\n{\n    // Distance from origin\n    float dO = 0.;\n    int steps = 0;\n    float dS = 0.;\n    \n    //for (int i = 0; i < MAX_STEPS; i++) {\n    do {\n        vec3 p = ro + rd * dO;\n        // Distance to scene\n       \tdS = GetDist(p);\n        dO += dS;\n        steps++;\n        //if (dO > MAX_DIST || dS < SURF_DIST) break;\t// Hit\n    } while (steps < MAX_STEPS && dO < MAX_DIST && dS > SURF_DIST);\n    //}\n    float s = remap(float(steps), 0., float(MAX_STEPS), 1.0, 0.);\n    return vec2(dO,s);\n}\n\n// Calculate normal vector for a point\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec3 lightPos)\n{\n    lightPos.xz += vec2(sin(iTime), cos(iTime));\t// Rotate around Y\n    \n    vec3 lv = normalize(lightPos-p);\n    vec3 ln = GetNormal(p);\n    \n    float dif = clamp(dot(ln, lv), 0., 1.);\n    \n    // Shadows\n    float d = RayMarch(p+ln*SURF_DIST*2., lv).x;\n    if (d < length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    // \"camera\"\n    vec3 ro = vec3(0,3,0);\t// Ray origin (camera position)\n    vec3 rd = normalize(vec3(uv.x,uv.y-.4,1.1));\t// Ray direction (looking at)\n    \n    // Raymarch the scene\n    vec2 march = RayMarch(ro, rd);\n    vec3 p = ro + rd * march.x;\n    \n    // Calculate the diffuse lighting\n    vec3 lightPos1 = vec3(0, 5, 3);\t// Where light is\n    vec3 lightPos2 = vec3(-.5, -5, 7);\t// Where light is\n    float difLight = GetLight(p, lightPos2) + GetLight(p, lightPos1);\n    difLight = clamp(difLight, 0., 1.);\n    \n    // Shade the scene\n    //col = pal( difLight, vec3(0.7,0.1,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.34,0.33,0.67) ) * march.y;\n    col = vec3(difLight);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}