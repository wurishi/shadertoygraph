{"ver":"0.1","info":{"id":"7tdBWN","date":"1663140444","viewed":229,"name":"sunset sunrise kirickiri 030","username":"kirickiri","description":"forked from cloudy sunset","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","sunset","clouds","sunrise"],"hasliked":0,"parentid":"XlsXDB","parentname":"cloudy sunset"},"renderpass":[{"inputs":[],"outputs":[],"code":"//forked from \"cloudy sunset\" from \"miloszmaki\"\n//added filter for redish color\n//Kiri\n\n#define saturate(x) clamp(x,0.,1.)\n#define rgb(r,g,b) (vec3(r,g,b)/255.)\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nfloat rand(float x) { return fract(sin(x) * 71.5413291); }\n\nfloat rand(vec2 x) { return rand(dot(x, vec2(13.4251, 15.5128))); }\n\nfloat noise(vec2 x)\n{\n    vec2 i = floor(x);\n    vec2 f = x - i;\n    f *= f*(3.-2.*f);\n    return mix(mix(rand(i), rand(i+vec2(1,0)), f.x),\n               mix(rand(i+vec2(0,1)), rand(i+vec2(1,1)), f.x), f.y);\n}\n\nfloat fbm(vec2 x)\n{\n    float r = 0.0, s = 1.0, w = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        s *= 2.0;\n        w *= 0.5;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\nfloat cloud(vec2 uv, float scalex, float scaley, float density, float sharpness, float speed)\n{\n    return pow(saturate(fbm(vec2(scalex,scaley)*(uv+vec2(speed,0)*iTime))-(1.0-density)), 1.0-sharpness);\n}\n\nvec3 render(vec2 uv)\n{\n    // sky\n    vec3 color = mix(rgb(255,212,166), rgb(204,235,255), uv.y);\n    // sun\n    vec2 spos = uv - vec2(0., 0.4);\n    float sun = exp(-20.*dot(spos,spos));\n    vec3 scol = rgb(255,155,102) * sun * 0.7;\n    color += scol;\n    // clouds\n    vec3 cl1 = mix(rgb(151,138,153), rgb(166,191,224),uv.y);\n    float d1 = mix(0.9,0.1,pow(uv.y, 0.7));\n    color = mix(color, cl1, cloud(uv,2.,8.,d1,0.4,0.04));\n    color = mix(color, vec3(0.9), 8.*cloud(uv,14.,18.,0.9,0.75,0.02) * cloud(uv,2.,5.,0.6,0.15,0.01)*uv.y);\n    color = mix(color, vec3(0.8), 5.*cloud(uv,12.,15.,0.9,0.75,0.03) * cloud(uv,2.,8.,0.5,0.0,0.02)*uv.y);\n    // post\n    color *= vec3(1.0,0.93,0.81)*1.04;\n    color *= mix(0.75*rgb(255,205,161), color, smoothstep(-0.1,0.3,uv.y));\n    color *= pow(color,vec3(1.3));\n    \n    \n    //declare stuff\n\t\tconst int mSize = 13;\n\t\tconst int kSize = (mSize-1)/2;\n\t\tfloat kernel[mSize];\n\t\tvec3 final_colour = vec3(0.0);\n\t\t\n\t\t//create the 1-D kernel\n\t\tfloat sigma = 7.8;//default density of blur\n        sigma +=sigma*smoothstep(-1.,1.,cos(iTime/10.));//breath\n\t\tfloat Z = 0.0;\n\t\tfor (int j = 0; j <= kSize; ++j)\n\t\t{\n\t\t\tkernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n\t\t}\n\t\t\n\t\t//get the normalization factor (as the gaussian has been clamped)\n\t\tfor (int j = 0; j < mSize; ++j)\n\t\t{\n\t\t\tZ *= kernel[j];\n\t\t}\n\t\t\n\t\t//read out the texels\n\t\tfor (int i=-kSize; i <= kSize; ++i)\n\t\t{\n\t\t\tfor (int j=-kSize; j <= kSize; ++j)\n\t\t\t{\n\t\t\t\tfinal_colour += 3.*kernel[kSize+j]*kernel[kSize+i]*color;\n\t\t\t\t\n\t\t\t}\n\t\t}\n    \n    \n    \n    \n    return final_colour;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n\tfragColor = vec4(render(uv),1.0);\n}","name":"Image","description":"","type":"image"}]}