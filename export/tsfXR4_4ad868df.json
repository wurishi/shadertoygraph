{"ver":"0.1","info":{"id":"tsfXR4","date":"1550694384","viewed":611,"name":"RayTracing Tutorial - step 2","username":"BrunoLevy","description":"Let us create a red sphere that orbits around the white one.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["raytracing","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FARAWAY=1e30;\nconst float EPSILON=1e-6;\n\nstruct Camera {\n    vec3 Obs;\n    vec3 View;\n    vec3 Up;\n    vec3 Horiz;\n    float H;\n    float W;\n    float z;\n};\n\nstruct Ray {\n    vec3 Origin;\n    vec3 Dir;\n};\n\nCamera camera(in vec3 Obs, in vec3 LookAt, in float aperture) {\n   Camera C;\n   C.Obs = Obs;\n   C.View = normalize(LookAt - Obs);\n   C.Horiz = normalize(cross(vec3(0.0, 0.0, 1.0), C.View));\n   C.Up = cross(C.View, C.Horiz);\n   C.W = float(iResolution.x);\n   C.H = float(iResolution.y);\n   C.z = (C.H/2.0) / tan((aperture * 3.1415 / 180.0) / 2.0);\n   return C;\n}\n\nRay launch(in Camera C, in vec2 XY) {\n   return Ray(\n      C.Obs,\n      C.z*C.View+(XY.x-C.W/2.0)*C.Horiz+(XY.y-C.H/2.0)*C.Up \n   );\n}\n\nstruct Sphere {\n   vec3 Center;\n   float R;\n};\n\nbool intersect_sphere(in Ray R, in Sphere S, out float t) {\n   vec3 CO = R.Origin - S.Center;\n   float a = dot(R.Dir, R.Dir);\n   float b = 2.0*dot(R.Dir, CO);\n   float c = dot(CO, CO) - S.R*S.R;\n   float delta = b*b - 4.0*a*c;\n   if(delta < 0.0) {\n      return false;\n   }\n   t = (-b-sqrt(delta)) / (2.0*a);\n   return true;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n   float alpha = float(iFrame)/30.0;\n   float s = sin(alpha);\n   float c = cos(alpha); \n\n\n   Camera C = camera(\n       vec3(2.0, 2.0, 1.5),\n       vec3(0.5, 0.5, 0.5),\n       50.0       \n   );\n   Ray R = launch(C, fragCoord);\n   Sphere S1 = Sphere(vec3(0.0, 0.0, 0.0), 0.5);\n   Sphere S2 = Sphere(vec3(0.7*c, 0.7*s, 0.0), 0.3);\n   \n   fragColor = vec4(0.5, 0.5, 1.0, 1.0);\n  \n   float t = FARAWAY;\n   float t1;\n   if(intersect_sphere(R,S1,t1) && t1 < t) {\n      fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      t = t1;\n   }\n   float t2;\n   if(intersect_sphere(R,S2,t2) && t2 < t) {\n      fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      t = t2;\n   }\n\n\n}\n","name":"Image","description":"","type":"image"}]}