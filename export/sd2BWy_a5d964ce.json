{"ver":"0.1","info":{"id":"sd2BWy","date":"1647077097","viewed":358,"name":"Persona 5 menu background ","username":"soilmaster","description":"Trying to replicate the good 'ol P5 star motif background you see in the menu's. First proper stab at a shader! ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["star","persona5"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Credits:\n// iquilezles.org/articles/distfunctions2d\n\n// script to generate the macro for star placement\n// =========================================\n// import random\n// s = ''\n// def addStars(n,r1,r2):\n//     global s\n//     r = r2-r1\n//     for x in range(n):\n//         angle = random.random()*360\n//         posx = random.random()*3 - 1.5\n//         posy = random.random()*3 - 1.5\n//         size = (random.random()*r) + r1\n//         color = 'GRAY' if bool(random.getrandbits(1))  else 'BLACK'\n//         rippleDir = 'true' if bool(random.getrandbits(1))  else 'false'\n//         s += f'applyColor(col, personaStar(p,vec2({posx:.3f},{posy:.3f}),{angle:.3f},{size:.3f},WHITE,{color}, {rippleDir}, pw));'\n// addStars(25, 0.4, 0.6) # big \n// addStars(22, 0.7, 0.7) # med\n// addStars(10, 2, 2.3) # small\n// # insert into file     \n// with open('test.c') as f:\n//     lines = f.readlines()\n// lines[4] = '#define GENERATE_STARS ' + s +  '\\n'\n// with open('test.c', 'w') as f:\n//     f.writelines(lines)\n// =========================================\n#define GENERATE_STARS applyColor(col, personaStar(p,vec2(-0.628,0.903),232.285,0.401,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-1.479,-0.909),48.337,0.459,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-1.352,-1.312),57.197,0.544,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.742,-0.118),311.588,0.501,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(-1.034,-1.330),358.585,0.405,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-0.416,-0.302),60.781,0.430,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(0.363,-0.717),202.978,0.550,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(1.248,1.321),247.810,0.546,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(0.612,-0.091),118.516,0.504,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(0.768,0.550),57.139,0.571,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(0.226,-0.584),7.089,0.537,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-0.793,1.106),7.135,0.509,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-0.666,-1.299),114.554,0.559,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(1.149,0.172),79.127,0.412,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-1.438,0.965),19.761,0.598,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(-0.369,-0.907),230.748,0.473,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(1.006,0.940),303.810,0.443,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(0.718,-0.536),7.192,0.558,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(-1.464,1.283),242.147,0.555,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-0.605,-0.930),13.166,0.504,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-0.156,-0.402),222.463,0.556,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.590,-0.583),47.489,0.407,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(-1.041,-0.283),186.044,0.496,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-0.071,-0.083),146.296,0.560,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(-0.328,0.407),156.254,0.599,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(1.484,-1.433),197.506,0.700,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-0.862,0.699),246.192,0.700,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(-0.433,0.226),70.003,0.700,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(1.122,1.276),290.282,0.700,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(-1.446,-0.859),46.425,0.700,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(0.482,-0.605),95.812,0.700,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(1.183,0.668),356.977,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(1.463,1.367),180.515,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-1.489,0.396),220.277,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-1.331,0.693),62.641,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-0.113,0.611),161.122,0.700,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(1.279,-0.625),297.362,0.700,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(1.401,0.866),340.992,0.700,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(0.913,1.287),153.328,0.700,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(1.055,0.926),33.999,0.700,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(-1.482,1.479),59.683,0.700,WHITE,GRAY, true, pw));applyColor(col, personaStar(p,vec2(-0.249,0.186),302.093,0.700,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(1.393,-1.325),113.947,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-1.061,0.496),248.285,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(-1.415,-1.362),140.758,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.336,-1.202),138.377,0.700,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.282,-0.793),307.207,0.700,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(0.148,1.396),257.332,2.145,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.995,1.136),113.175,2.079,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.730,-1.356),4.209,2.106,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.246,1.278),129.532,2.167,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(-0.225,0.374),137.306,2.238,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.284,1.442),313.997,2.206,WHITE,BLACK, true, pw));applyColor(col, personaStar(p,vec2(-0.084,-0.447),227.097,2.106,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(1.379,0.472),16.044,2.104,WHITE,BLACK, false, pw));applyColor(col, personaStar(p,vec2(0.233,-0.636),62.367,2.164,WHITE,GRAY, false, pw));applyColor(col, personaStar(p,vec2(0.313,-0.558),80.289,2.139,WHITE,BLACK, true, pw));\n\n// TODO: \n// 1. Try to get those stars looking a little more thicc. Too point atm\n// 2. Figure out a better algo for the script to position the stars \n// 3. See how you can implement the fwidth() function to get the pixel width\n\n// Some colors\n#define BLUE vec3(0.1,0.1,0.8)\n#define GREEN vec3(0.3,1.,0.3)\n#define RED vec3(0.8,0.1,0.1)\n#define ORANGE vec3(0.9,0.5,0.3)\n#define BLACK vec3(0.)\n#define WHITE vec3(1.)\n#define GRAY vec3(0.8)\n\n// math constants\n#define M_PI 3.141592\n#define RAD2DEG M_PI/360.0*2.0\n#define DEG2RAD 360.0/M_PI/2.0\n\n// results in curved ripples at the inward pointing \n// verts when combined with a rippleSize effect. \n// TODO: find out some verts result in rounded egdegs. There is a clue in iq's \n// 2d sdf article, about rounding the standard 2D shapes by adding some constant...\n// https://www.shadertoy.com/view/3tSGDy\nfloat sdStar5(in vec2 fragCoord, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    fragCoord.x = abs(fragCoord.x);\n    fragCoord -= 2.0*max(dot(k1,fragCoord),0.0)*k1;\n    fragCoord -= 2.0*max(dot(k2,fragCoord),0.0)*k2;\n    fragCoord.x = abs(fragCoord.x);\n    fragCoord.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(fragCoord,ba)/dot(ba,ba), 0.0, r );\n    return length(fragCoord-ba*h) * sign(fragCoord.y*ba.x-fragCoord.x*ba.y);\n}\n\n// https://www.shadertoy.com/view/lsccR8\nfloat sdfStar5( in vec2 p )\n{\n    // repeat domain 5x\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292); // pi/5\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    \n    // draw triangle\n    const vec2 k3 = vec2(0.951056516295,  0.309016994375); // pi/10\n    return dot( vec2(abs(p.x)-0.3,p.y), k3);\n}\n\nfloat squareWave(float a)\n{\n    return (floor(a) - floor(a + 0.5)) + 1.;\n}\n\nfloat smoothSquareWave(float a, float blur)\n{\n    // dealing with a period from 0 - 1 \n    a = a - floor(a);\n    // ramp up at 0\n    if (a <= 0.25) return smoothstep(-blur, blur, a);\n    // ramp up at 1\n    if (a >= 0.75) return smoothstep(1. - blur, 1. + blur, a);\n    // ramp down at 0.5\n    return 1. - smoothstep(0.5 - blur, 0.5 + blur, a);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nmat2 Scale2d(float scale){\n    return mat2(scale, 0.,\n                0.,scale);\n}\n\nvec4 personaStar(\n    vec2 fragCoord, \n    vec2 position, \n    float angle, \n    float size, \n    vec3 col1, \n    vec3 col2, \n    bool rippleDir,\n    float globalPixelWidth)\n{\n    // rotate, transform and scale the input point\n    fragCoord = rotate2d(DEG2RAD*angle)*(fragCoord - position);\n    fragCoord = Scale2d(size) * fragCoord;\n    float starpixelWidth = globalPixelWidth * size * 7.;\n    \n    // get a value based on the distance to the shape\n    float dist;\n    dist = sdfStar5(fragCoord);\n\n\t// coloring, animating ripples\n    vec4 col;\n    float time = rippleDir ? iTime : -iTime;\n    col = vec4(mix(col1, col2, smoothSquareWave(dist * 9. + 0.4 * time, starpixelWidth)), 1.);\n\n    // store the shape mask in the alpha (outside shape is 0 inside is 1)\n    col.a = 1. - smoothstep(0., globalPixelWidth*2., dist);\n    \n    return col;\n}\n\nvoid applyColor(inout vec3 existingColor, vec4 inputColor){\n    existingColor = mix(existingColor.xyz, inputColor.xyz, inputColor.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // -1 to 1 normalisation + aspect ratio correction (x : 1)\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float pw = 2./iResolution.y;\n    vec3 col = GREEN;\n    \n    GENERATE_STARS\n\n\tfragColor = vec4(col, 1.);\n} \n\n","name":"Image","description":"","type":"image"}]}