{"ver":"0.1","info":{"id":"tsXBD8","date":"1588117966","viewed":181,"name":"Colorful lines","username":"tantalum","description":"Started out trying to distort a checker board pattern with FBM noise, ended up with some colorful contouring lines. ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fbm","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define TWOPI 6.28318530718\n#define NUM_OCTAVES 3\n\nvec3 g_a = vec3(0.66,0.56,0.68);\nvec3 g_b = vec3(0.718,0.438,0.720);\nvec3 g_c = vec3(0.520,0.8,0.520);\nvec3 g_d = vec3(-0.430,-0.397,-0.083);\n\n//iq's cosine gradient https://iquilezles.org/articles/palettes\nvec3 grad( in float t)\n{\n    return g_a + g_b*cos( 6.28318*(g_c*t+g_d) );\n}\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n//From book of shaders ch. 13 https://thebookofshaders.com/13/\nfloat fbm ( in vec2 st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(st);\n        st = rot * st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float stime = iDate.w * 0.09;\n    float ctime = iTime * 0.3273;\n    float ttime = iTime * 0.0697;\n    float ptime = iTime * 0.0987;\n    \n    float mx = max(iResolution.x , iResolution.y);\n    \n    vec2 uv = gl_FragCoord.xy / mx;\n    vec2 st = uv * 3.2; \n    vec2 tuv = uv * 1.2;\n    \n    float n_x = 2.0 * fbm(st + vec2(7.29 , ttime)) - 1.0;\n    float n_y = 2.0 * fbm(st + vec2(3.67 , ttime)) - 1.0;\n    float n_z = 0.5 * fbm(st + vec2(0.0 , 0.0)) + 0.5;\n\n    vec3 n = normalize(vec3(n_x , n_y , n_z));\n    vec3 l = normalize(vec3(cos(ttime) , sin(ttime) , 1.0));\n\n    float c = dot(l,n);\n\n    vec2 cuv = fract(9.7 * vec2(n_x , n_y) * tuv + vec2(0.0 , ctime * 0.1));\n    float cx = cuv.x;\n    float cy = cuv.y;\n    cx = step(0.5 * sin(cx * TWOPI) + 0.5 , 0.5);\n    cy = step(0.5 * sin(cy * TWOPI) + 0.5 , 0.5);\n  \n    \n    vec2 duv = fract(9.7 * vec2(n_x , n_y) * tuv + vec2(0.0 , ptime * 0.1));\n    float dx = duv.x;\n    float dy = duv.y;  \n    dx = step(0.5 * sin(dx * TWOPI) + 0.5 , 0.5);\n    dy = step(0.5 * sin(dy * TWOPI) + 0.5 , 0.5); \n    \n    float total = cx+cy;\n    bool isWhite = mod(total , 2.0) == 0.0;\n\n    vec3 w = vec3(1.0);\n\n    vec3 b = vec3(0.0);\n\n    vec3 ch = isWhite ? w:b;\n\n   \tch -= vec3(floor(dx + dy * 0.975));\n\n    vec3 o = grad(c + ttime * 0.5 + stime);\n\t\t\n    //Uncomment for more chaotic shapes\n    //ch -= vec3(floor(fract(c * 12.0) + 0.25));\n\n    fragColor = vec4(ch + o , 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}