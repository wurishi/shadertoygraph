{"ver":"0.1","info":{"id":"mtfGRs","date":"1672229924","viewed":100,"name":" boundary voronoi diagram v3","username":"DLord","description":"boundaries voronoi diagram","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["voronoidiagramboundaryborder"],"hasliked":0,"parentid":"DlsGR2","parentname":"Fork voronov v2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*!!!!!!!!!!!☺☻consts can be changed:)!!!!!!!!!!!!!!!!*/\nconst float SIDE_OF_THE_VISIBLE_AREA=7.;\nconst float TIME_BOOST=1.;\nconst float GRID_MOVE_SPEED=0.22;\nconst float RECIPROCAL_NUMBER_TO_SINE_COLOR_LENGHT=13.;\nconst float SINE_COLOR_MOVEMENT_SPEED=1.2;\n//also you can change dist function (how the distance counts)\n\nfloat m1(in float a){return mod(a,1.);}\nfloat rand(in float x){\n    //return m1(1000./(m1(x*x)+1.)+(0.3*x)+(m1(x*x/17.)*x)+0.37);\n    return m1(1000./(m1(x*x)+1.)+(m1(x*x/17.)*x)+0.37);\n}\nvec2 rand2d(in float x, in float y){\n    //float q=rand(x*0.92347+(rand(y)*32.453)+(4.654*sin(7.21*m1(x-y)))+(20.*cos(x*y)));\n    float q=rand(x*0.92347+(rand(y)*32.453));\n    return vec2(rand(sin(q*32.1)+q*30.3),rand(cos(q*62.03)+q*20.7));\n}\nfloat dist(in vec2 a, in vec2 b){\n//return distance(a,b);\n//return abs(a.x-b.x)+abs(a.y-b.y);\n//return max(abs(a.x-b.x),abs(a.y-b.y));\nvec2 k=a-b;return dot(k,k);\n}\n//vec3 relu1vec3(in vec3 a){return vec3(min(max(a[0],0.),1.),min(max(a[1],0.),1.),min(max(a[2],0.),1.));}\nvec3 colmake(in float a){\n//return vec3(a,(a*a)/2.,sqrt(abs(a)) );\nreturn vec3(a,(a*a)/2.,(2.-a)*a );\n}\nvec2 onlt(in vec2 u, in float a, in float b){\nreturn vec2(u.x+float(a),u.y+float(b))+rand2d(u.x+float(a),u.y+float(b));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tt=iTime*1.66*TIME_BOOST;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy*2.)-1.;\n    uv.y*=iResolution.y;uv.y/=iResolution.x;\n    uv*=SIDE_OF_THE_VISIBLE_AREA;\n    uv+=tt*GRID_MOVE_SPEED;\n    float x=floor(uv.x);\n    float y=floor(uv.y);\n    vec2 uf=vec2(x,y);\n    float k[25];vec2 w[25];\n    int i,j,p;p=0;\n    for(i=-2;i<3;i++){for(j=-2;j<3;j++){\n    w[p]=onlt(uf,float(i),float(j));\n    k[p]=dist(uv,w[p]);p++;\n    }}\n    \n    int ismall1=0;int ismall2=0;\n    \n    for(i=0;i<25;i++){if(k[ismall1]>k[i]){ismall1=i;}} \n    if(ismall1==0){ismall1=1;}\n    for(i=0;i<25;i++){\n    if(!(ismall1==i)){if(k[ismall2]>k[i]){ismall2=i;}}\n    } \n    \n    float poid=dist(w[ismall1],w[ismall2]);\n    float g=abs(k[ismall2]-k[ismall1]);g/=poid;\n    \n    float c=0.;\n    if(g<0.1){\n    c=(sin(k[ismall1]*RECIPROCAL_NUMBER_TO_SINE_COLOR_LENGHT+(tt*SINE_COLOR_MOVEMENT_SPEED))+1.)/2.;\n    }\n    vec3 col = colmake(c);\n    //col=relu1vec3(col);\n    //for(i=0;i<sdsqr;i++){if(k[ismall1]<0.03){col=vec3(0.,1.,0.);}} \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}