{"ver":"0.1","info":{"id":"XtfBR8","date":"1510870987","viewed":209,"name":"Diamond-Square Exploration","username":"AustinSpafford","description":"Animated visualization of this algorithm: https://en.wikipedia.org/wiki/Diamond-square_algorithm","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["fractal","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord)\n{\n\tfragColor = texture(iChannel0, (fragCoord.xy / iResolution.xy));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define FRUITY_COLORS_ENABLED\n\nconst float kBatchDuration = 3.0;\n\nvec2 oneOverResolution;\n\nfloat RandomFloat(\n  vec2 testCoord)\n{\n  // From: https://www.shadertoy.com/view/Xd23Dh\n  // (just removed some dimensions)\n  float testCoordInGeneratorSpace = \n    dot(testCoord, vec2(127.1, 311.7));\n\n  return fract(sin(testCoordInGeneratorSpace) * 43758.5453);\n}\n\nvec2 RandomVec2(\n  vec2 testCoord)\n{\n  // From: https://www.shadertoy.com/view/Xd23Dh\n  // (just removed some dimensions)\n  vec2 testCoordInGeneratorSpace = vec2(\n    dot(testCoord, vec2(127.1, 311.7)),\n    dot(testCoord, vec2(269.5, 183.3)));\n\n  return fract(sin(testCoordInGeneratorSpace) * 43758.5453);\n}\n\nvec3 RandomVec3(\n  vec2 testCoord)\n{\n  // From: https://www.shadertoy.com/view/Xd23Dh\n  // (just removed some dimensions)\n  vec3 testCoordInGeneratorSpace = vec3(\n    dot(testCoord, vec2(127.1, 311.7)),\n    dot(testCoord, vec2(269.5, 183.3)),\n    dot(testCoord, vec2(419.2, 371.9)));\n\n  return fract(sin(testCoordInGeneratorSpace) * 43758.5453);\n}\n\nvec4 SampleTexture(\n    ivec2 intFragCoord)\n{\n    return texture(iChannel0, ((vec2(intFragCoord) + 0.5) * oneOverResolution));\n}\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord)\n{\n    oneOverResolution = (vec2(1.0) / iChannelResolution[0].xy);\n        \n    int batchIndex = int(iTime / kBatchDuration);\n    float batchFraction = ((iTime - (float(batchIndex) * kBatchDuration)) / kBatchDuration);\n    int maxStepCount = (2 * int(ceil(log2(min(iChannelResolution[0].x, iChannelResolution[0].y)))));\n    int stepIndex = (int(float(maxStepCount + 1) * (2.0 * batchFraction)) - 1); // Note: Adding in a \"-1\" index for initialization.\n    \n    vec2 randomizationUv = ((fragCoord.xy * oneOverResolution) + vec2(batchIndex % 200));\n    \n    #ifdef FRUITY_COLORS_ENABLED\n    vec3 fragRandom = RandomVec3(randomizationUv);\n    #else // FRUITY_COLORS_ENABLED\n    vec3 fragRandom = vec3(RandomFloat(randomizationUv));\n    #endif // FRUITY_COLORS_ENABLED\n\n    ivec2 intFragCoord = ivec2(fragCoord.xy);\n    \n    // If this is the initialization-step.\n    if (stepIndex == -1)\n    {\n        //fragColor = vec4(vec3(fragRandom), 1.0);\n        fragColor = vec4(vec3(0.5), 1.0);\n\n        //vec2 centeredUv = (2.0 * abs((fragCoord.xy * oneOverResolution) - vec2(0.5)));            \n        //fragColor.rgb = vec3(pow(max(centeredUv.x, centeredUv.y), 10.0));\n    }\n    else\n    {        \n        int maxStepSize = (1 << (maxStepCount / 2));\n        int stepSize = (maxStepSize / (2 << min(30, (stepIndex / 2))));\n        \n        // Default to being inactive this frame.\n        fragColor = SampleTexture(intFragCoord);\n\n        // If we've finished the batch.\n        if (stepSize == 0)\n        {\n            //fragColor.rgb = fract(fragColor.rgb - iTimeDelta);\n        }\n        else\n        {\n            // Default to being inactive this frame.\n            fragColor = SampleTexture(intFragCoord);\n            \n            vec3 randomizationDelta = vec3(\n                mix(vec3(-1.0), vec3(1.0), fragRandom) /\n                (1.0 + (3.0 * float(stepIndex))));\n            \n            // If this is a diamond-pattern step, otherwise it's a square-pattern step.\n            if ((stepIndex % 2) == 0)\n            {\n                // If we're active during this step.\n                if (((intFragCoord - ivec2(stepSize)) % ivec2(2 * stepSize)) == ivec2(0))\n                {\n                    vec4 parentsSum = (\n                        SampleTexture(intFragCoord + ivec2(stepSize, stepSize)) +\n                        SampleTexture(intFragCoord + ivec2(-stepSize, stepSize)) +\n                        SampleTexture(intFragCoord + ivec2(-stepSize, -stepSize)) +\n                        SampleTexture(intFragCoord + ivec2(stepSize, -stepSize)));\n\n                    vec4 parentsAverage = (parentsSum * 0.25);\n\n                    fragColor.rgb = clamp((parentsAverage.rgb + randomizationDelta), 0.0, 1.0);\n                    \n                    //fragColor.rgb = vec3(1.0, 0.0, 1.0); // Debug.\n                }\n            }\n            else\n            {\n                ivec2 skewedIntFragCoord = ivec2((intFragCoord.x - intFragCoord.y), intFragCoord.y);\n                \n                // If we're active during this step.\n                if (((skewedIntFragCoord - ivec2(stepSize)) % ivec2((2 * stepSize), stepSize)) == ivec2(0))\n                {\n                    vec4 parentsSum = (\n                        SampleTexture(intFragCoord + ivec2(stepSize, 0)) +\n                        SampleTexture(intFragCoord + ivec2(0, stepSize)) +\n                        SampleTexture(intFragCoord + ivec2(-stepSize, 0)) +\n                        SampleTexture(intFragCoord + ivec2(0, -stepSize)));\n\n                    vec4 parentsAverage = (parentsSum * 0.25);\n\n                    fragColor.rgb = clamp((parentsAverage.rgb + randomizationDelta), 0.0, 1.0);\n                    \n                    //fragColor.rgb = vec3(0.0, 1.0, 0.0); // Debug.\n                }\n            }\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}