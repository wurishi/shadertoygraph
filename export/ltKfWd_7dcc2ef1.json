{"ver":"0.1","info":{"id":"ltKfWd","date":"1544615064","viewed":72,"name":"day11_1 ray marching","username":"kiyoshidainagon","description":"ray marching sample","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadeaday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereDist(vec3 p) {\n\treturn length(p) - 1.0;\n}\n\nfloat boxDist(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat repetitionSphere(vec3 ray) {\n\tfloat dist = length(mod(ray, 2.0)  - 1.0) - 0.25;\n    return dist;\n}\n\nfloat distanceHub(vec3 ray) {\n\treturn repetitionSphere(ray);\n}\n\nvec3 genNormal(vec3 ray) {\n\tfloat d = 0.001;\n    return normalize(vec3(\n        distanceHub(ray + vec3(d, 0.0, 0.0)) - distanceHub(ray + vec3(-d , 0.0, 0.0)),\n        distanceHub(ray + vec3(0.0, d, 0.0)) - distanceHub(ray + vec3(0.0,  d, 0.0)),          \n\t\tdistanceHub(ray + vec3(0.0, 0.0, d)) - distanceHub(ray + vec3(0.0, 0.0, -d))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    \n    vec3 dir = normalize(vec3(p, -1.0));\n    \n    vec3 origin = vec3(0.0, 0.0, 3.0);\n    \n\tvec3 ray = origin;\n    \n    float dist = 0.0;\n    \n    for(int i = 0; i < 32; i++) {\n        dist = distanceHub(ray);\n        ray += dir * dist;\n    }\n    \n    vec3 normal = vec3(0.0);\n    if(dist < 0.001) {\n    \tnormal = genNormal(ray);\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(normal, 1.0);\n}","name":"Image","description":"","type":"image"}]}