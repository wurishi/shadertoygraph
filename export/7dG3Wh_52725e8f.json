{"ver":"0.1","info":{"id":"7dG3Wh","date":"1631430357","viewed":231,"name":"Triangle sampler","username":"Masterchef365","description":"Samples an image using trianlges. Hi avali!","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["triangle","sampler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tri_quantize(vec2 p, float divs) {\n    const float pi = 3.141592;\n    const float a = 0.;\n    const float b = 2.*pi/3.;\n    const float c = 4.*pi/3.;\n    \n    // 3 vectors placed such that drawing lines \n    // between their tips would form an equilateral triangle\n    vec3 g = vec3(\n        p.x * cos(a) + p.y * sin(a),\n        p.x * cos(b) + p.y * sin(b),\n        p.x * cos(c) + p.y * sin(c)\n    );\n    \n    // Each component of one_if_neg is one if the corresponding component of g is negative\n    ivec3 one_if_neg = ivec3(lessThan(g, vec3(0.))); \n    \n    // Quantize each of these components, and avoid repeating zero \n    // since abs(-.5) = 0 and abs(.5).\n    g = vec3(ivec3(g * divs) - one_if_neg) / divs;\n    \n    // Now imagine we pick two of the vectors; the difference \n    // between them will be perpendicular to the remaining vector.\n    vec2 q = vec2(g.x, (g.y - g.z) / 2.);\n    \n    return q;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float anim = fract(iTime / 10.);\n    float divs = anim * anim * 0.1 + 0.001;\n    vec2 t = tri_quantize(fragCoord, divs);\n    t /= iResolution.xy;\n    \n    vec3 color = texture(iChannel0, t).rgb;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}