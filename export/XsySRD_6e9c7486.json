{"ver":"0.1","info":{"id":"XsySRD","date":"1463479520","viewed":680,"name":"AA Triangle Drawing","username":"gPlatl","description":"Draw framed antialiased triangles and check triangle hit.\nPress mouse button and check if mouse hits rotating triangle.\nPress small triangle arrows to toggle some action. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangle","distance","drawing","input","hit","inside","mousepressed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// AATriangleDrawing.glsl    by gPlatl   \n//   v1.0 2016-05-15  initial release\n//   v1.1 2016-08-21  improved\n//   v1.2 2018-02-26  drawArrows added\n// License Creative Commons Attribution - NonCommercial - ShareAlike 3.0 Unported License.\n// Tags:  2d, triangle, distance, drawing, input, hit, inside, mousePressed\n//---------------------------------------------------------\n\n//---------------------------------------------------------\n// return signed distance to a 2D triangle \n//   inside if distance <= 0.0\n// created by inigo quilez - iq/2014\n//   see https://www.shadertoy.com/view/XsXSz4\n//---------------------------------------------------------\nfloat sdTriangle(in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p)\n{\n  vec2 e0 = p2 - p1;  vec2 e1 = p3 - p2;  vec2 e2 = p1 - p3;\n  vec2 v0 = p - p1;   vec2 v1 = p - p2;   vec2 v2 = p - p3;\n\n  vec2 pq0 = v0 - e0*clamp(dot(v0,e0) / dot(e0,e0), 0.0, 1.0);\n  vec2 pq1 = v1 - e1*clamp(dot(v1,e1) / dot(e1,e1), 0.0, 1.0);\n  vec2 pq2 = v2 - e2*clamp(dot(v2,e2) / dot(e2,e2), 0.0, 1.0);\n    \n  vec2 d = min( min(vec2( dot(pq0, pq0), v0.x*e0.y-v0.y*e0.x),\n                    vec2( dot(pq1, pq1), v1.x*e1.y-v1.y*e1.x)),\n                    vec2( dot(pq2, pq2), v2.x*e2.y-v2.y*e2.x));\n\n  return -sqrt(d.x)*sign(d.y);\n}\n//---------------------------------------------------------\n// draw 2D triangle (return drawing color)\n//---------------------------------------------------------\nvec4 triangle(in vec2 p1, in vec2 p2, in vec2 p3, in vec2 pos\n             ,in vec4 col, in vec4 fillColor, in vec4 frameColor\n             ,in float frameSize)\n{\n  float d = sdTriangle(p1, p2, p3, pos);\n  if (d > frameSize)   // outside ?\n    return col;\n  float s = 1.0 - smoothstep(0.0,frameSize,abs(d));\n  if (d <= 0.0)\n    return mix( fillColor, frameColor, s*col.w); // inside\n  else \n    return mix( col, frameColor, s);   // outside\n}\n//---------------------------------------------------------\n\nvec2 uv, mp;\n\n//---------------------------------------------------------\n// return circle intensity at pos with given radius\n//---------------------------------------------------------\nfloat circle(in vec2 pos, in float radius, in float halo)\n{\n  return clamp (halo * (radius - length(uv-pos)), 0.0, 1.0);\n}\n//---------------------------------------------------------\n// draw triangle and return true on mousePressed\n//---------------------------------------------------------\nbool arrow(in vec2 p1, in vec2 p2, in vec2 p3, inout vec4 col)\n{\n  vec4 fill =  vec4(0.5, 0.3, 0.6, 1.0);\n  vec4 frame = vec4(0.8, 0.8, 0.4, 1.0);\n  bool inside = sdTriangle(p1,p2,p3, mp) < 0.0;\n  if (inside)\n  {  \n     frame = vec4(1.0);  // last input\n     if (iMouse.z > 0.0)    // mousePressed ?\n       fill = vec4(0.2, 0.1, 0.4, 1.0);\n  }\n  col = triangle (p1,p2,p3, uv, col, fill, frame, 0.02);\n  return inside;\n}\n//---------------------------------------------------------\n// draw arrows and return command > 0 if arrow is pressed \n//---------------------------------------------------------\nint drawArrows(inout vec4 col)\n{\n  // draw triangle arrows and check input\n  float s= 0.1, s2 = 0.05;\n  float x= iResolution.x / iResolution.y * 0.91;  // arrow x middle position  \n  float y= -0.75;\n  bool inside1 = arrow(vec2(x,y-2.*s),vec2(x-s,y-s2), vec2(x+s,y-s2), col);\n  bool inside2 = arrow(vec2(x-s,y+s2),vec2(x,y+2.*s), vec2(x+s,y+s2), col);\n\n  int command = 0;  \n  if (inside1) command = 1;\n  if (inside2) command = 2;\n  return command;\n}\n//---------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tuv = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n\tmp = (2.0*iMouse.xy-iResolution.xy) / iResolution.y;\n\n    vec4 col = vec4(uv.x, uv.y, 0.5, 1.0);  // background\n    int command = drawArrows(col);\n    \n    // input handling\n    vec4 fill =  vec4(0.3, 0.6, 0.6, 0.5);\n    vec4 frame = vec4(0.9, 0.8, 0.2, 1.0);\n    float time = iTime;\n    if (iMouse.z > 0.0)    // mousePressed ?\n    {\n      if (command == 1) fill = vec4(0.8, 0.2, 0.2, 0.5);  // red\n      if (command == 2) time = -time;  // change rotation direction\n    }\n\n    // rotating triangle\n    vec2 p1 = 0.9*cos(time + vec2(0.0,1.57) + 0.0);\n\tvec2 p2 = 0.9*cos(time + vec2(0.0,1.57) + 2.0);\n\tvec2 p3 = 0.9*cos(time + vec2(0.0,1.57) + 4.0);\n    const vec4 circleColor = vec4(0.6, 0.4, 0.4, 0.2);\n\t// change triangle color if last mouse position is inside triangle\n    if (sdTriangle(p1,p2,p3, mp) < 0.0)\n      fill = circleColor;\n    float frameSize = 0.03 + 0.02*cos( iTime);\n\tcol = triangle(p1,p2,p3, uv, col, fill, frame, frameSize);\n    \n    // draw mouse point\n    if (command == 0)\n    {\n      float intensity = circle(mp, 0.05, 100.0);\n      col = mix(col, 1.6*circleColor, intensity);\n    }\n    \n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}