{"ver":"0.1","info":{"id":"Wl3SR4","date":"1580431189","viewed":181,"name":"PolarRepetition with limits","username":"gvameta","description":"Combined the concepts from \nhttps://www.shadertoy.com/view/wdtGDM\nand\nhttps://www.shadertoy.com/view/3syGzz","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["polar","limited","repetitions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This shader shows the correct way to compute a number of\n// copies of an object (left), and the usual but incorrect\n// way to do it (right), which does infinite repetition\n// followed by a box that clips the unwanted copies away.\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\n\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec2 opRepLim( in vec2 p, in vec2 s, in vec2 lima, in vec2 limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\nmat2 r2(in float a){ float c = cos(a), s = sin(a); return mat2(c, s, -s, c); }\n\nvec2 opPolarRepetition(in vec2 p, in float numrep, in float NumS, in float NumEnd)\n{\n    // Polar angle.\n    float a = atan(p.y, p.x);\n    \n    float aNum = numrep;\n    \n    // Partitioning the angle into \"aNum\" cells.\n    float ia = floor(a/6.2831853*aNum);\n    ia = (ia + .5)/aNum*6.2831853;\n   // if(abs(ia)<3.14156/(6.0/2.0))//need to fix this for constraining start and end angles\n    { // Converting the radial centers to their positions.\n        \n       if(cos(iTime*0.25)<0.0)\n       {\n           //use this to keep the shape from deforming\n           p *= r2(ia);\n    \t  // Above is equivalent to:\n    \t  //p = vec2(p.x*cos(ia) + p.y*sin(ia), p.y*cos(ia) - p.x*sin(ia));\n       }\n       else\n       {\n           //use this to deform the shapes\n    \t   p = vec2(length(p), mod(a, 6.2831/aNum) - 6.2831/aNum/2.);\n       }\n        \n    // Setting the radial distance.\n    // Moving the points out a bit along the radial line. If you didn't perform this,\n    // all objects would be superimposed on one another in the center.\n    //p.x -= 3.5;\n  \n    \tp.x = p.x-1.0*clamp(round(p.x/1.0),NumS,NumEnd); // correct radial repetition instead of mod\n    }\n    return p;\n}\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n//-----------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\t\n    // sdf\n    float d1;\n    float d2;\n    if( p.x<0.0 ) \n    {\n    \tvec2 q = p*6.0 + vec2(5.25,0.0);\n        vec2 r1 = opPolarRepetition(q,1.0+8.0*abs(cos(iTime*0.25)),2.0,3.0);\n        //8 repetitions in 360 degrees, along radius start at 2 and end at 3\n        \n        //d1 = length(r1); // for circular primitive\n        //trying to find the right width to only show deformed white rectangle (not more not less)\n        d1 = sdBox( r1, vec2(0.1,0.3))-0.1;//2.5/(1.0+8.0*abs(cos(iTime*0.25)))) ) -  0.1;// for box primitive;\n        \n        d1 = max( -d1,length(q)-3.70);//showing inside of a circle instead of outside\n    }\n    else      \n    {\n        vec2 q = p*6.0 - vec2(5.25,0.0);\n        vec2 r1 = opPolarRepetition(q,1.0+6.0*abs(cos(iTime*0.25)),0.0,2.0);;//time varying repetitions\n        //6 repetitions in 360 degrees, along radius start at 0 and end at 2\n        \n        d2 = length(r1)-0.5;//for circular primitive\n     }\n    \n\tfloat d = d1+d2;\n    \n    // colorize\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(40.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.05,abs(d)) );\n\n    col *= smoothstep(0.005,0.010,abs(p.x));\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}