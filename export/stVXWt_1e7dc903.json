{"ver":"0.1","info":{"id":"stVXWt","date":"1664520462","viewed":201,"name":"Some Usefull Functions","username":"mmggww","description":"Some usefull functions defined in Common Scriptï¼Œ Logic in Buffer A","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////// Variables\n// SetUp\n#define bufferCannel iChannel0\n\n//////////////////////////////////////////////////////////   Text\n// Setup\n#define textCannel  iChannel1\n\n\n//////////////////////////////////////////////////////////\n#define messageLen 11\nint[messageLen] message = int[messageLen]\n(Char_H, Char_e, Char_l, Char_l, Char_o, Char_Space, Char_W, Char_o, Char_r, Char_l, Char_d);\n\n////////////////////////////////////////////////////////// Function declare\nvec3 DrawCicle(vec2 pos, float radius, vec2 fragCoord)\n{\n    vec3 col = vec3(0.0);\n    if(length(fragCoord - pos) < radius)\n    col = vec3(1.0);\n    return col;\n}\n\nvoid DrawMessage(int[messageLen] message, int space, vec2 pos, float size, vec3 color, out vec4 fragColor, out vec2 fragCoord)\n{\n    for(int i = 0; i < messageLen; i++)\n    {\n        vec2 cPos = pos + float(i * space) * vec2(1.0, 0.0);\n        DrawChar(message[i], cPos, size, color, 2);\n    }\n}\n#define DrawMessage(message,space,pos,size,color)     DrawMessage(message,space,pos,size,color,fragColor,fragCoord)\n\n\nvoid DrawArrows(vec2 pos, vec3 color, out vec4 fragColor, out vec2 fragCoord)\n{\n    float offset = 40.0 + 10.0 * sin(iTime * 5.0);\n    float size = 30.0;\n    int style = 0;\n    \n    vec2 bios = vec2(-15, -15);\n    pos = pos + bios;\n    \n    DrawChar(Char_LeftArrow,  pos + vec2(offset, 0.0),  size, color, style);\n    DrawChar(Char_RightArrow, pos + vec2(-offset, 0.0), size, color, style);\n    DrawChar(Char_DownArrow,  pos + vec2(0.0, offset),  size, color, style);\n    DrawChar(Char_UpArrow,    pos + vec2(0.0, -offset), size, color, style);\n}\n#define DrawArrows(pos,color)     DrawArrows(pos,color,fragColor,fragCoord)\n\n////////////////////////////////////////////////////////// Main Image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //State load\n    GameState state;\n    LoadGameState(state);\n\n    //Draw\n    vec2 pos = state.pos;\n    float radius = state.radius;\n    vec3 col = DrawCicle(pos, radius, fragCoord);\n    vec4 bg = vec4(0.4);    \n    fragColor = vec4(0.0);\n    \n    //Draw text\n    DrawMessage(message, 13, pos + vec2(-80.0, 50.0), 30.0, vec3(1.0));\n    DrawArrows(pos, vec3(1.0));\n\n    fragColor = fragColor + vec4(col,1.0) + bg;    \n}\n\n////////////////////////////////////////////////////////// Game Functions\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"////////////////////////////////////////////////////////// Variables\n// SetUp\n#define bufferCannel iChannel0\n\n////////////////////////////////////////////////////////// Input\n// Setup\n#define inputCannel iChannel1\n\n////////////////////////////////////////////////////////// Function declare\nvoid UpdatePos(out GameState state);\nvoid Init(out GameState state);\n\n////////////////////////////////////////////////////////// Main Image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //State define\n    GameState gmState;\n    \n    //State Load\n    LoadGameState(gmState);    \n\n    //Init\n    Init(gmState);\n\n    //Update\n    UpdatePos(gmState);\n\n    //State Save\n    SaveGameState(gmState);\n\n}\n\n////////////////////////////////////////////////////////// Game logic Functions\nvoid Init(out GameState state)\n{\n    if(state.isInitFinish == 0.0)\n    {\n        state.pos = iResolution.xy/2.0;\n        state.radius = _Radius;\n\n        state.isInitFinish = 1.0;\n    }\n}\n\nvoid UpdatePos(out GameState state)\n{\n    vec2 curPos = state.pos;\n    vec2 nextPos = curPos;\n    float radius = state.radius;\n    vec2 addForce = vec2(0.0);\n\n    if(GetMousePress())\n    {\n        vec2 mosePos = GetMousePos();\n        vec2 diif = mosePos - curPos;\n        addForce = diif * _Strength * 0.1;\n    }\n    state.acc = addForce;\n\n    if(length(state.speed) > 0.01)\n    {\n        state.acc = state.acc - normalize(state.speed) * _Drag * 10.0;\n    }\n    else\n    {\n        state.speed = vec2(0.0);\n    }\n\n    nextPos = curPos + state.speed * iTimeDelta;\n    state.speed += state.acc * iTimeDelta;\n    if(length(state.speed) > _MaxSpeed)\n        state.speed = normalize(state.speed) * _MaxSpeed;\n\n    //limit area\n    if(nextPos.x > iResolution.x - radius )\n    {\n        nextPos.x = iResolution.x - radius;\n        state.speed.x = - state.speed.x;\n    }\n    else if(nextPos.x < radius)\n    {\n        nextPos.x = radius;\n        state.speed.x = - state.speed.x;\n    }\n    if(nextPos.y > iResolution.y - radius)\n    {\n        nextPos.y = iResolution.y - radius;\n        state.speed.y = - state.speed.y;\n    }\n    else if(nextPos.y < radius)\n    {\n        nextPos.y = radius;\n        state.speed.y = - state.speed.y;\n    }\n    \n    state.pos = nextPos;\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"////////////////////////////////////////////////////////// Game Config\nfloat _Strength = 10.0;\nfloat _Radius = 10.0;\nfloat _Drag = 5.0;\nfloat _MaxSpeed = 1000.0;\n\n\n\n\n\n////////////////////////////////////////////////////////////////////   Input\n/////////////////////// KeyCode\n#define KeyCode_A \t\t\t\t65\n#define KeyCode_B \t\t\t\t66\n#define KeyCode_C \t\t\t\t67\n#define KeyCode_D \t\t\t\t68\n#define KeyCode_E \t\t\t\t69\n#define KeyCode_F \t\t\t\t70\n#define KeyCode_G \t\t\t\t71\n#define KeyCode_H \t\t\t\t72\n#define KeyCode_I \t\t\t\t73\n#define KeyCode_J \t\t\t\t74\n#define KeyCode_K \t\t\t\t75\n#define KeyCode_L \t\t\t\t76\n#define KeyCode_M \t\t\t\t77\n#define KeyCode_N \t\t\t\t78\n#define KeyCode_O \t\t\t\t79\n#define KeyCode_P \t\t\t\t80\n#define KeyCode_Q \t\t\t\t81\n#define KeyCode_R \t\t\t\t81\n#define KeyCode_S \t\t\t\t83\n#define KeyCode_T \t\t\t\t84\n#define KeyCode_U \t\t\t\t85\n#define KeyCode_V \t\t\t\t86\n#define KeyCode_W \t\t\t\t87\n#define KeyCode_X \t\t\t\t88\n#define KeyCode_Y \t\t\t\t89\n#define KeyCode_Z \t\t\t\t90\n\n#define KeyCode_Alpha0 \t\t\t48\n#define KeyCode_Alpha1 \t\t\t49\n#define KeyCode_Alpha2 \t\t\t40\n#define KeyCode_Alpha3 \t\t\t41\n#define KeyCode_Alpha4 \t\t\t42\n#define KeyCode_Alpha5 \t\t\t43\n#define KeyCode_Alpha6 \t\t\t44\n#define KeyCode_Alpha7 \t\t\t45\n#define KeyCode_Alpha8 \t\t\t46\n#define KeyCode_Alpha9 \t\t\t47\n\n#define KeyCode_Keypad0 \t\t96\n#define KeyCode_Keypad1 \t\t97\n#define KeyCode_Keypad2 \t\t98\n#define KeyCode_Keypad3 \t\t99\n#define KeyCode_Keypad4 \t\t100\n#define KeyCode_Keypad5 \t\t101\n#define KeyCode_Keypad6 \t\t102\n#define KeyCode_Keypad7 \t\t103\n#define KeyCode_Keypad8 \t\t104\n#define KeyCode_Keypad9 \t\t105\n\n#define\tKeyCode_KeypadMultiply \t106\n#define\tKeyCode_KeypadPlus \t\t107\n#define\tKeyCode_KeypadEnter \t108\n#define\tKeyCode_KeypadMinus \t109\n#define\tKeyCode_KeypadPeriod \t110\n#define\tKeyCode_KeypadDivide \t111\n\n#define KeyCode_UpArrow \t\t37\n#define KeyCode_DownArrow \t\t38\n#define KeyCode_RightArrow \t\t39\n#define KeyCode_LeftArrow \t\t40\n\n#define\tKeyCode_Insert \t\t\t45\n#define\tKeyCode_Home \t\t\t36\n#define\tKeyCode_End \t\t\t35\n#define\tKeyCode_PageUp \t\t\t33\n#define\tKeyCode_PageDown \t\t34\n\n#define KeyCode_F1 \t\t\t\t112\n#define KeyCode_F2 \t\t\t\t113\n#define KeyCode_F3 \t\t\t\t114\n#define KeyCode_F4 \t\t\t\t115\n#define KeyCode_F5 \t\t\t\t116\n#define KeyCode_F6 \t\t\t\t117\n#define KeyCode_F7 \t\t\t\t118\n#define KeyCode_F8 \t\t\t\t119\n#define KeyCode_F9 \t\t\t\t120\n#define KeyCode_F10\t\t\t\t121\n#define KeyCode_F11\t\t\t\t122\n#define KeyCode_F12\t\t\t\t123\n\n#define KeyCode_Space\t\t\t32\n#define KeyCode_Esc\t    \t\t27\n#define KeyCode_Tab\t    \t\t9\n#define KeyCode_Shift   \t\t16\n#define KeyCode_Ctrl    \t\t17\n#define KeyCode_Alt     \t\t18\n#define KeyCode_CapeLock\t\t20\n\n/////////////////////// Functions\nbool CheckButtonPress(int keyCode, sampler2D inputCannel)\n{\n    float pressSpace = texelFetch( inputCannel, ivec2(keyCode, 0.0), 0 ).x;\n    return pressSpace > 0.5;\n}\n\nbool CheckButtonDown(int keyCode, sampler2D inputCannel)\n{\n    float pressSpace = texelFetch( inputCannel, ivec2(keyCode, 1.0), 0).x;\n    return pressSpace > 0.5;\n}\n\nvec2 GetMousePos(vec4 iMouse)\n{\n    return iMouse.xy;\n}\n\nvec2 GetMousePosUV(vec4 iMouse, vec3 iResolution)\n{\n    return iMouse.xy/iResolution.xy;\n}\n\nbool GetMousePress(vec4 iMouse)\n{\n    return iMouse.z > 0.5;\n}\n\n#define CheckButtonPress(keyCode)       CheckButtonPress(keyCode, inputCannel)\n#define CheckButtonDown(keyCode)        CheckButtonDown(keyCode, inputCannel)\n#define GetMousePos()                   GetMousePos(iMouse)\n#define GetMousePosUV()                 GetMousePos(iMouse, iResolution)\n#define GetMousePress()                 GetMousePress(iMouse)\n\n\n////////////////////////////////////////////////////////////////////   Text\n/////////////////////// Char Defines\n#define Char_0                  48\n#define Char_1                  49\n#define Char_2                  50\n#define Char_3                  51\n#define Char_4                  52\n#define Char_5                  53\n#define Char_6                  54\n#define Char_7                  55\n#define Char_8                  56\n#define Char_9                  57\n\n#define Char_A                  65\n#define Char_B                  66\n#define Char_C                  67\n#define Char_D                  68\n#define Char_E                  69\n#define Char_F                  70\n#define Char_G                  71\n#define Char_H                  72\n#define Char_I                  73\n#define Char_J                  74\n#define Char_K                  75\n#define Char_L                  76\n#define Char_M                  77\n#define Char_N                  78\n#define Char_O                  79\n#define Char_P                  80\n#define Char_Q                  81\n#define Char_R                  82\n#define Char_S                  83\n#define Char_T                  84\n#define Char_U                  85\n#define Char_V                  86\n#define Char_W                  87\n#define Char_X                  88\n#define Char_Y                  89\n#define Char_Z                  90\n\n#define Char_a                  97\n#define Char_b                  98\n#define Char_c                  99\n#define Char_d                  100\n#define Char_e                  101\n#define Char_f                  102\n#define Char_g                  103\n#define Char_h                  104\n#define Char_i                  105\n#define Char_j                  106\n#define Char_k                  107\n#define Char_l                  108\n#define Char_m                  109\n#define Char_n                  110\n#define Char_o                  111\n#define Char_p                  112\n#define Char_q                  113\n#define Char_r                  114\n#define Char_s                  115\n#define Char_t                  116\n#define Char_u                  117\n#define Char_v                  118\n#define Char_w                  119\n#define Char_x                  120\n#define Char_y                  121\n#define Char_z                  122\n\n#define Char_Space              32\n#define Char_Exclamation        33\n#define Char_Quotation          34\n#define Char_Number             35\n#define Char_Dollar             36\n#define Char_Percent            37\n#define Char_Ampersand          38\n#define Char_Apostrophe         39\n#define Char_LeftBracket        40\n#define Char_RightBracket       41\n#define Char_Asterisk           42\n#define Char_Plus               43\n#define Char_Comma              44\n#define Char_Minus              45\n#define Char_Dot                46\n#define Char_Slash              47\n\n#define Char_LeftSquaBracket    91\n#define Char_BackSlash          92\n#define Char_RightSquaBracket   93\n#define Char_Caret              94\n#define Char_Underscore         95\n\n#define Char_LeftArrow          16\n#define Char_UpArrow            17\n#define Char_RightArrow         18\n#define Char_DownArrow          19\n#define Char_HoriArrow          20\n#define Char_VertiArrow         21\n#define Char_LeftUpArrow        22\n#define Char_RightUpArrow       23\n#define Char_RightDownArrow     24\n#define Char_LeftDownArrow      25\n\n/////////////////////// Functions\nvoid DrawChar(int index, vec2 pos, float size, vec3 color, int fontStyle, sampler2D textCannel, out vec4 fragColor, out vec2 fragCoord)\n{\n    //16x16\n    //1024x1024 pix\n     if(fragCoord.x > pos.x && fragCoord.x < pos.x + size\n        && fragCoord.y > pos.y && fragCoord.y < pos.y + size)\n     {\n        vec2 txtIndex;\n        txtIndex.x = mod(float(index), 16.0);\n        txtIndex.y = 15.0 - floor(float(index) / 16.0);        \n        \n        vec4 t;\n        //to keep small words clear\n        if(size <= 50.0)\n        {\n            ivec2 txPos = ivec2(txtIndex * 64.0 + (fragCoord - pos) / size * 64.0);\n            t = texelFetch(textCannel, txPos, 0);       \n        }\n        else\n        {            \n            vec2 txUV = (txtIndex * 64.0 + (fragCoord - pos) / size * 64.0)/1024.0;\n            t = texture(textCannel, txUV);\n        }\n        \n        float style = \n        (fontStyle == 0 ? 1.0 : \n        (fontStyle == 1 ? t.y : \n        (fontStyle == 2 ? t.z : 1.0)));\n        \n        fragColor.xyz = t.x > 0.8 ? color * t.x * style : fragColor.xyz;\n     }\n}\n\n#define DrawChar(index,pos,size,color,fontStyle)                DrawChar(index,pos,size,color,fontStyle,textCannel,fragColor,fragCoord)\n\n\n\n\n////////////////////////////////////////////////////////////////////   Variables\n// Note: \n//    if the iResolution change, the variable save pos may change too, so game may need to restart\n//\n/////////////////////// Functions\nvec2 GetSavePos(int id, vec3 iResolution)\n{\n    float lineMax = floor(iResolution.x);\n    float x = mod(float(id), lineMax);\n    float y = floor(float(id) / lineMax);\n\n    return vec2(x, y);\n}\n\nvec4 LoadValue(int id, sampler2D bufferCannel, vec3 iResolution)\n{\n    vec2 pos = GetSavePos(id, iResolution);\n    return texelFetch( bufferCannel, ivec2(pos), 0);\n}\n\nvoid SaveValue(int id, vec4 value, vec2 fragCoord, vec3 iResolution, out vec4 fragColor)\n{\n    vec2 pos = GetSavePos(id, iResolution);\n    fragCoord = floor( fragCoord );\n    fragColor = ( fragCoord.x == pos.x && fragCoord.y == pos.y ) ? value : fragColor;\n}\n\n#define LoadValue(id)                   LoadValue(id, bufferCannel, iResolution)\n#define SaveValue(id, value)            SaveValue(id, value, fragCoord, iResolution, fragColor)\n\n\n\n\n\n//////////////////////////////////////////////////////////////////// Game Sturct\n#define ID_Pos            1\n#define ID_Speed          2\n#define ID_Acc            3\n#define ID_Radius         4\n#define ID_IsInitFinish   20\n\nstruct GameState\n{\n    vec2 pos;\n    vec2 speed;\n    vec2 acc;\n    float radius;\n\tfloat isInitFinish;\n};\n\nvoid LoadGameState(out GameState state, sampler2D bufferCannel, vec3 iResolution)\n{\n    state.pos    = LoadValue(ID_Pos).xy;\n    state.speed  = LoadValue(ID_Speed).xy;\n    state.acc    = LoadValue(ID_Acc).xy;\n    state.radius = LoadValue(ID_Radius).x;\n    state.isInitFinish = LoadValue(ID_IsInitFinish).x;\n}\n\nvoid SaveGameState(GameState state, vec2 fragCoord, vec3 iResolution, out vec4 fragColor)\n{\n    SaveValue(ID_Pos,      vec4(state.pos,    1.0, 1.0));\n    SaveValue(ID_Speed,    vec4(state.speed,  1.0, 1.0));\n    SaveValue(ID_Acc,      vec4(state.acc,    1.0, 1.0));\n    SaveValue(ID_Radius,   vec4(state.radius, 1.0, 1.0, 1.0));\n    SaveValue(ID_IsInitFinish,   vec4(state.isInitFinish, 1.0, 1.0, 1.0));\n}\n\n#define LoadGameState(state)             LoadGameState(state, bufferCannel, iResolution)\n#define SaveGameState(state)             SaveGameState(state, fragCoord, iResolution, fragColor)","name":"Common","description":"","type":"common"}]}