{"ver":"0.1","info":{"id":"MfcSR7","date":"1713720305","viewed":119,"name":"Lofi Mountains Shader","username":"RexSitael","description":"looped mountains parallax animation","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["landscape"],"hasliked":0,"parentid":"XfcXRM","parentname":"Lofi Mountains"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nconst vec3 skyColorDay = vec3(217.0,209.0,219.0)/255.0;\nconst vec3 skyColorNight = vec3(42.0,49.0,95.0)/255.0;\nconst vec3 fogColorDay = vec3(0.8,0.8,0.8);\nconst vec3 bg1ColorDay = vec3(152.0,132.0,158.0)/255.0;\nconst vec3 bg1ColorNight = vec3(30.0,36.0,73.0)/255.0;\nconst vec3 bg2ColorDay = vec3(134.0,98.0,145.0)/255.0;\nconst vec3 bg2ColorNight = vec3(22.0,27.0,60.0)/255.0;\nconst vec3 bg3ColorDay = vec3(128.0,90.0,138.0)/255.0;\nconst vec3 bg3ColorNight = vec3(12.0,17.0,47.0)/255.0;\n\n\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\nvec2 getSunCenter(float sunTime) {\n    vec2 center = iResolution.xy* 0.5; // *0.5;\n    center.x = center.x + center.x * (cos(-sunTime) * 1.1);\n    center.y = center.y / 2.0 + center.y * (sin(-sunTime) * 0.8);\n    return center;\n}\n\nvec3 interpolateColor(vec3 color1, vec3 color2,float curProgress ,float maxProgress){\n    float multiplier = 1.0 / maxProgress;\n    float progress = min(curProgress, maxProgress);\n    float alp = progress * multiplier;\n    vec3 result = color1 * progress + color2* (1. - progress);\n    return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float rws = iResolution.x / 19.2;\n    float rhm = iResolution.y / 13.5;\n    float sunTime = iTime*0.3;\n    vec3 col = vec3(217.0,209.0,219.0)/255.0;\n    vec3 fogCol = vec3(0.8,0.8,0.8);\n    vec3 bg1Col = vec3(152.0,132.0,158.0)/255.0;\n    vec3 bg2Col = vec3(134.0,98.0,145.0)/255.0;\n    vec3 bg3Col = vec3(128.0,90.0,138.0)/255.0;\n    \n    float moonProgress = sin(-sunTime)*0.8 ;\n    if (moonProgress > -0.1 ) {\n        float normalizedProgress = moonProgress+0.1;\n        col = interpolateColor(skyColorNight,skyColorDay,normalizedProgress,0.4  );\n        bg1Col =interpolateColor(bg1ColorNight,bg1ColorDay,normalizedProgress,0.4  );\n        bg2Col =interpolateColor(bg2ColorNight,bg2ColorDay,normalizedProgress,0.4  );\n        bg3Col =interpolateColor(bg3ColorNight,bg3ColorDay,normalizedProgress,0.4  );\n    }\n    \n    float x = (fragCoord.x/rws) + iTime*0.4;\n    float x2 = (fragCoord.x/rws) + iTime*1.0;\n    float x3 = (fragCoord.x/rws) + iTime*2.0;\n\n    float y = fragCoord.y/rhm;\n    \n    vec3 red = rgb(225.0, 95.0, 60.0);\n    vec3 white = rgb(225.0, 225.0, 225.0);\n    \n    vec2 uv = fragCoord.xy*1.0;\n    vec2 center = getSunCenter(sunTime+60.0);\n    vec2 moonCenter =  getSunCenter(sunTime);\n\tfloat radius = 0.05 * iResolution.y;\n  \n    \n    vec4 layer1 = vec4(col, 1.0);\n    vec4 layer2 = circle(uv, center, radius, red);\n    vec4 layer3 = circle(uv, moonCenter, radius, white);\n    vec4 result = mix(layer1, layer2, layer2.a);\n    vec4 result2 = mix(result, layer3, layer3.a);\n    col.rgb = result2.rgb;\n    \n    float initialY = iResolution.y / 10.0;\n    if(fragCoord.y < initialY + ((1.0 + sin((x + cos(x) + 4.0))) + abs(sin(((x - 3.0) / 6.0))) * 3.0 \n        + cos(((y * y) * sin ((x)) / 2.0 )) / 10.0) * rhm) {\n               float alp =  ((fragCoord.y + iResolution.y / 5.2) / (iResolution.y / 2.4)) ;\n               vec3 lcol = bg1Col;\n               col = lcol *alp + fogCol *(1.-alp);\n         \n    }\n    \n\n    if(fragCoord.y < initialY + (sin(y + cos(x2))) * rhm) {\n               float alp =  ((fragCoord.y + iResolution.y / 5.) / (iResolution.y / 2.4)) ;\n               vec3 lcol = bg2Col;\n               col = lcol * alp + fogCol * (1. - alp);\n    }\n    \n    if(fragCoord.y < initialY/2.0 + (sin(y + cos(x3 / 6.0 + y / 3.0))) * rhm) {\n               float alp = ((fragCoord.y + iResolution.y / 3.) / (iResolution.y / 2.4));\n               vec3 lcol = bg3Col;\n               col = lcol *alp + fogCol *(1. - alp);\n    }\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}