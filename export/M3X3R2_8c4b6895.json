{"ver":"0.1","info":{"id":"M3X3R2","date":"1707682130","viewed":139,"name":"xvrqt - Thanks Doc","username":"xvrqt","description":"My first shader","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["doc","circle","animated","animation","signeddistance","meme","dailydose"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\nfloat sdCircle( vec2 o, vec2 p, float r) {\n    return distance(o,p) - r;\n}\n\nvec2 circle(float t) {\n    float x = sin((2.0*PI)*t);\n    float y = cos((2.0*PI)*t);\n    return vec2(x,y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // How Fast the Circle Moves\n    float speed = 0.125;\n    float t = iTime * speed;\n    \n    // Circle Center Location\n    float d = sdCircle(circle(t),uv,0.5);\n    vec3 col;\n    // Purple Outside the circle\n    if(d > 0.0) { col = vec3(1.0,0.0,1.0); }\n    // Cyan Outline of the circle\n    else if (d > -0.01 && d < 0.01) { col = vec3(0.0,1.0,1.0); }\n    // Green Inside the circle\n    else { col = vec3(0.0,1.0,0.0); }\n    \n    // Draw a white line every 0.1 units away from the circle\n    float ring = cos((((2.0*PI)/0.1)*(d)));\n    if (step(0.99, ring) == 1.0) { col = vec3(1.0,1.0,1.0); }\n    else { // Change the steepness of the color curve\n        float wave = 0.25*cos(((2.0*PI)/0.1)*d)+0.5;\n        wave += 0.1*cos(((2.0*PI)/0.1)*d)+0.1;\n        wave *= (10.0/11.0);\n        col *= wave; \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}