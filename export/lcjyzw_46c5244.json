{"ver":"0.1","info":{"id":"lcjyzw","date":"1722078904","viewed":33,"name":"koch triangle","username":"nextrix","description":"converting to unity later (which is why i split both uv and color functions)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 fractaluv (in vec2 uv, in float angle) {\n    uv *= vec2(aspect, 1.) * zoom;\n    \n    float a = (5./6.) * PI; // side angle\n    // sides\n    \n    for (int i = 0; i < fraciter; i++) { \n        uv.x = abs(uv.x); // mirror\n        uv.y += tan(a)*centerscale; // find offset\n        float siderot = dot(uv-vec2(centerscale, 0.), nRot(a)); // rotate\n        uv -= nRot(a)*max(0.,siderot)*2.; // mirror the mirrored side\n    }\n    float s = 1.;\n    uv.x += 0.5;\n    \n    for (int i = 0; i < iter; i++) {\n        // reset uv coords\n        uv = (uv*3.)-vec2(1.5,0.);\n        s *= 3.;\n        // mirror\n        uv.x = abs(uv.x) - 0.5;\n        // dot rotates line // min makes the negative values reflect\n        uv -= nRot(angle) * min(0., dot(uv,nRot(angle))) * 2.;\n    }\n    \n    uv *= r2d(radians(Offset * 360.));\n    uv.x /= aspect;\n    uv /= s;\n    \n    \n    \n    return uv;\n}\n\nvec3 fractalcolor (in vec3 col, in vec2 uv, in float a) {\n    \n    // dist of line\n    float dist = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n    // make line less uhh idk (and color it)\n    // 1./R.y makes it always 1 pixel thick\n    col = mix(col, vec3(1), smoothstep(1./R.y*thickness, .0, dist));\n    return col;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 mouse = M.xy/R.xy;\n    mouse = (M.z > 0.) ? mouse : vec2(1.);\n\n    // UV\n    vec2 uv = (I/R.xy) - 0.5;\n    vec2 uv1 = uv;\n    float a = (2./3.) * PI * mix(0.,1.09,abs(-1.+mouse.x*2.));\n    uv = mix(uv+0.5, fractaluv(uv, a), usefractal);\n\n    float amnt = mouse.y;\n\n    // Grabpass\n    vec3 col = mix( vec3(0.), texture(iChannel0, uv).rgb, usetex * smoothstep(0.5, 0.,abs(.5-amnt)) );\n    \n    // Col\n    col = mix(col, fractalcolor(col, uv, a), 1.);\n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define M iMouse\n#define R iResolution\n#define aspect R.x/R.y\n#define PI 3.14159\n\n#define iter 3\n#define fraciter 1\n#define thickness 3.\n#define centerscale 0.35\n#define Offset 0.\n#define zoom 3.\n#define usefractal 1.\n#define usetex 1.\n\nvec2 nRot (float a) {\n    return vec2(sin(a), cos(a));\n}\n\nmat2 r2d (float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}","name":"Common","description":"","type":"common"}]}