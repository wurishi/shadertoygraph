{"ver":"0.1","info":{"id":"Wll3R2","date":"1587189706","viewed":283,"name":"n-sided polygon signed distance","username":"antovsky","description":"Distance to 2D n-sided polygon (inscribed or circumscribed)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","polygon","ngon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI    3.14159265358979323846\n#define TAU (PI*2.0)\n\n// define this to interpret 'r' as circumradius, otherwise it will be treated as inradius\n//#define CIRCUMSCRIBE \n\nfloat sdNgon(in vec2 p, in float r, in float n) {\n    // can precompute these\n\tfloat inv_n = 1.0 / n;\n    \n    // perform radial repeat\n\tvec2 rp = vec2(atan(p.y, p.x), length(p)); // into polar coords\n\trp.x *= 1.0 / TAU;\n\trp.x = mod(rp.x + inv_n * 0.5, inv_n) - 0.5 * inv_n;\n\trp.x *= TAU;\n\tp = vec2(cos(rp.x), sin(rp.x))*rp.y; // back to cartesian\n    \n#ifdef CIRCUMSCRIBE\n    float s = cos(TAU * inv_n * 0.5); // scale by 1.0 / vertex_radius\n    p /= s;\n#endif\n    // distance to a \"box side\"\n    vec2 b = vec2(r);\n    b.y = b.x * tan(TAU * inv_n * 0.5);\n    vec2 d = abs(p)-b;\n    \n    float sd = length(max(d,vec2(0))) + min(d.x,0.0);\n    \n#ifdef CIRCUMSCRIBE\n    return sd * s;\n#else\n    return sd;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n\tfloat r = 0.5;\n\n    float d = sdNgon(p, r, float(int(iTime)%8 + 3));\n  \n\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    \n    float circ_d = length(p) - r;\n    col = mix(col, vec3(0.5,1.0,0.7), 1.0-smoothstep(0.0,0.01,abs(circ_d)));\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}