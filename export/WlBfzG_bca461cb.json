{"ver":"0.1","info":{"id":"WlBfzG","date":"1599164194","viewed":139,"name":"fork ovni--20731.6","username":"jorge2017a1","description":"fork ovni--20731.6","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["forkovni207316"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n    \n    \n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n{\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n//-------------------------------------------\n\nvec2 opU(vec2 d1, vec2 d2 )\n{\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 opU3(vec3 d1, vec3 d2 )\n{\n  vec3 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n//----------oPeraciones de Repeticion\nvec2 opRep2D( in vec2 p, in vec2 c )\n{\n    vec2 q = mod(p+0.5*c,c)-0.5*c;\n    return  q ;\n}\n\n\n\nvec3 opRep3D( in vec3 p, in vec3 c )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return  q ;\n}\n///------------------------------------\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi) \n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n\nvec3 rotate_y(vec3 p, float phi) \n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\n\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n\n\n\nvec2 rotate(vec2 v, float a)\n{\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2Dinv(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvec2 rotate2D(float a)\n{\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c)*vec2(1.0,1.0);\n}\n\n\nfloat sdGround(vec3 p) \n{\n    float h = 0.1 * sin(p.x * PI * 0.3) + 0.1 * sin(p.z * PI * 0.5);\n    h += 0.05 * sin(p.x * PI * 0.1) + 0.05 * sin(p.z * PI * 0.5)+sin(p.x*0.0125);\n    float d = length(p.xz) - 4.5;\n    d = smoothstep(1.0, 0.6, d) * smoothstep(0.0, 0.4, d);\n    return p.y + h*(1.0 - d+h*2.0);\n}\n\n//Floor\nfloat Floor(in vec3 p)\n{\n  \n  ///p.y=p.y+sin(sqrt(p.x*p.x+p.z*p.z)+iTime*4.0)*0.5;\n   p.y=p.y+sin(sqrt(p.x*p.x+p.z*p.z)+4.0)*0.5;\n  //plane\n \n  return p.y+2.0;\n}\n\n\nfloat pathterrain(float x,float z)\n{\n    // Common height function for path and terrain\n    float py=sin(x*.5 )*1.+cos(z*.3 )*0.3+cos(x*3.+z )*0.1+sin(x-z*.2 )*0.2;\n    return py;\n}\n//---------------------------------------------\n\nfloat smin(float a, float b, float k) \n{\n    float h = clamp(0.5 + 0.5 * ((b - a) / k), 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n\nfloat sdHexa(vec3 p) \n{\n    vec3 q = abs(p);\n    return max(max(q.x + q.z * 0.57, q.z * 1.14) - 0.2, q.y - 0.02);\n}\n\nfloat funOvni(vec3 p)\n{\n    float r = 4.0;\n    float x = r * sin(iTime);\n    float z = r * cos(iTime);\n    float d2 = min(100.0, sdSphere(p - vec3(x, 0.2, z), 0.1));\n    d2 = smin(d2, sdHexa(p - vec3(x, 0.2, z)), 0.1);\n    return d2;\n}\n\n\n\nfloat opScaleOvi( in vec3 p, in float s  )\n{\n    return funOvni(p/s)*s;\n}\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec3 res;\n    vec3 pp,p1, p2,p3; \n    res = vec3(9999.0, -1.0,-1.0);\n    \n    \n    \n    //float pl1=sdGround(p);\n    float pl2=Floor(p);\n    float pl3=pathterrain(p.x,p.z);\n    float planototal=pl2+pl3;\n    \n    res =opU3(res, vec3(planototal,30.0,-1)); \n     \n    \n    float fOvni= funOvni(p);\n    \n    res =opU3(res, vec3(fOvni,50.0,-1)); \n    \n    \n    \n    d = res.x;\n    \n    //return (dist, id_color, id_material)\n    return vec3(res.x, res.y, res.z);\n}\n\n\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n//------------------------------------------------\n\n\n\nvec3 GetNormal(vec3 p) \n{\n\tfloat d = GetDist(p).x;\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        //marchCount+= 1./dS.x*.75;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\n\n//----------------------------------------------------\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nvec3 getMouse(vec3 ro)\n{    \n     vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  float tCur = iTime;\n    \n  float az = 0.;\n  float el = -0.15 * PI;\n\n    az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n \n    \n    \n  mat3 vuMat = StdVuMat (el, az);\n\treturn ro*vuMat;\n}\n\n//-------------------------------------------\n\n//-------------------------------\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n   \n    \n}\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    return result;\n}\n\n//------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj;\n    \n    \n    \n    \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    \n    \n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}\n\n    \n    \n    \n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pv2 = uv * 2.0 - 1.0;\n    pv2.x *= iResolution.x / iResolution.y;\n    \n    mObj.uv=pv2;\n    \n    float r = 4.0;\n    float x = r * sin(iTime);\n    float z = r * cos(iTime);\n    vec3 cam_t = vec3(r * sin(iTime - 0.4), 0.5, r * cos(iTime - 0.4));\n    vec3 cam_s = vec3(0.0, 2.0, 3.0);\n    vec3 cam = mix(cam_t, cam_s, 0.5 + 0.5 * sin(iTime * 0.2));\n    vec3 ro = cam;\n    vec3 ta = vec3(x, 0.0, z);\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(0.0, 1.0, 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    vec3 rd = normalize(pv2.x * cu + pv2.y * cv + 2.5 * cw);\n    \n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n    \n \n \tlight_pos1   = vec3(10.0, 12.0, 10.0 ); \n \tlight_color1 = vec3( 1.0 );\n\n \tlight_pos2   = vec3( 0.0, 15.0, 0.0 );\n \tlight_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n \n    \n\n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    \n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n\n  \tfloat dif1=1.0;\n   \tvec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    col= col3*dif1;\n    \n  \t\n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n};\n\n\n  \n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n\n\n\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\n\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox2( in vec2 p) {\n\t// filter kernel\n\tvec2 w = fwidth(p) + 0.001;\n\t// analytical integral (box filter)\n\tvec2 i = 2.0 * (abs(fract((p - 0.5 * w) * 0.5) - 0.5) - abs(fract((p + 0.5 * w) * 0.5) - 0.5)) / w;\n\t// xor pattern\n\treturn 0.5 - 0.5 * i.x * i.y;\n}\n\nfloat checkersGradBox( in vec2 p) {\n \n\treturn  checkersGradBox2(p) -checkersGradBox2(p-0.03 )*0.4 ;\n}\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    \n    float m;\nif (i==-2 ) { return mObj.color; }       \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\nif (i==17 ) { return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n    if(i== 19 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 20 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 )\n    { return vec3(0, 1, 1);} \n    if(i== 23 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    \n     if(i== 24 )\n    { return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );;  } \n    \n    \n    if(i== 25 )\n    { return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \n    \n    if(i== 26 )\n    { return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \n   \n    \n    if(i== 27 )\n    { \n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c; \n    } \n     \n    \n    if(i== 28 )\n    { \n    \treturn checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n    if(i== 29 )\n    { \n    \treturn checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n    \n    \n    if(i== 30 )\n    { \n    \tfloat f = checkersGradBox(1.2 * mObj.p.xz);\n\t\tvec3 col = 0.3 + f * vec3(0.3);\n        float w = 0.5;\n\t\tfloat light = clamp((dot(mObj.normal, normalize(vec3(1, 1, -1))) + w) / ((1.0 + w) * (1.0 + w)), 0.0, 1.0);\n        //float light = 0.5;\n        \n        col=mix(vec3(0.9, 0.8, 0.5), vec3(0.7, 0.5, 0.3), f)*light;\n        return col;\n    } \n    \n    \n    \n    \n      \n    if(i== 50 )\n    {\n     \n           \n            vec3 p = mObj.p;\n        \t//vec3 p =  mObj.normal*0.5;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n   \n\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}