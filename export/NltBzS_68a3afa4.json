{"ver":"0.1","info":{"id":"NltBzS","date":"1663275049","viewed":430,"name":"Adaptive contrast with GLSL","username":"yd4011439","description":"This shader is for increasing the contrast of image in an adaptive way. We just take average around a pixel. Then add (average-grayscaleOfPixel)*SomeConstant to the color information!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["adaptivecontrase"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HW 10\n#define FS vec3(2.2)\n#define SS vec3(1.0/2.2)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    highp vec4 total = vec4(0.0);\n    \n    // For non-mipmapped version\n    //for(int i=-HW;i<=HW;i++){\n    //    for(int j=-HW;j<=HW;j++){\n    //        vec2 c = uv + vec2(i,j)/iResolution.xy;\n    //        total += texture(iChannel0, c);\n    //    }\n    //}\n    \n    // For mipmapped version by: @FabriceNeyret2\n    // Should turn on mip map for iChannel0\n    total = texture(iChannel0, uv, log2(float(HW)) )*pow(2.0*float(HW)+1.0,2.0);\n    vec3 a = (total/pow(2.0*float(HW)+1.0,2.0)).xyz;\n    vec3 c = texture(iChannel0, uv).rgb;\n    \n    // By converting into flatSpace\n    a = pow(a, FS);\n    c = pow(c, FS);    \n    c = c + 2.0*(c-a);\n    fragColor = vec4(pow(c, SS), 1.0);\n    \n    // In normal color space\n    // fragColor = vec4(c + 2.0*(c-a), 1.0);\n    \n}\n\n","name":"Image","description":"","type":"image"}]}