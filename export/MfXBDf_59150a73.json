{"ver":"0.1","info":{"id":"MfXBDf","date":"1724464829","viewed":31,"name":"Sci-fi datapad scanlines","username":"qirien","description":"Horizontal lines with noise scroll down similar to scanlines but with more of a Star Wars vibe.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["scanlines","scifi","starwars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From the Book of Shaders, https://thebookofshaders.com/11/\n// 2d random function\nfloat random(in vec2 xy) {\n    return fract(sin(dot(xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat Scanlines(vec2 uv, float period, float cutoff)\n{    \n    float newval = sin(uv.y+period);\n    if (newval < cutoff)\n        return 0.0;\n    else\n        return newval;\n}\n\nfloat make_layer(float period, float cutoff, float speed, vec2 fragCoord) {\n    vec2 uv = fragCoord / period;\n    float scanlines = Scanlines(uv, period+iTime*speed, cutoff);\n    return scanlines * noise(fragCoord);\n}\n\nvec4 shader_main(vec4 fragColor, vec2 fragCoord) {\n    \n    float scanlines = 0.0\n    //               period  cutoff  speed\n        + make_layer(5.0   , 0.99  , 5.5  , fragCoord)\n        + make_layer(9.0   , 0.95  , 2.4  , fragCoord)\n        + make_layer(7.0   , 0.98  , 3.9  , fragCoord)\n    ;\n\n    vec3 bg_color = vec3(0.12, 0.13, 0.18);\n    // bright cyan\n    //vec3 fg_color = vec3(0.24, 0.9, 0.95);\n    \n    //subdued cyan\n    vec3 fg_color = vec3(0.08, 0.5, 0.55);\n    fragColor.rgb = mix(bg_color, fg_color, scanlines);\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = shader_main(fragColor, fragCoord);\n}","name":"Image","description":"","type":"image"}]}