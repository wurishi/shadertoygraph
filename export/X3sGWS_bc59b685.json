{"ver":"0.1","info":{"id":"X3sGWS","date":"1707882444","viewed":65,"name":" Night Battle Background(Roy)","username":"2024team39","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Aspect-corrected uvs within [-1, -1] to [1, 1]\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    // Rotate uvs\n    uv = mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime)) * uv;\n    \n    // Cast a ray in the direction of the current pixel\n    vec3 rayDirection = normalize(vec3(uv, 1.0));\n    \n    // How \"stretched\" our rays are\n    float distance = 1.0;\n    \n    // Base color\n    vec3 color = vec3(0.0);\n    \n    for (int i = 0; i < 100; i++) \n    {\n        // Move \"distance\" units in the current direction\n        vec2 rayPosition = rayDirection.xy * distance;\n        \n        // This is really hard to visualize. Graph sin & cos with different frequencies (ie sin(x * 2), sin(x * 4), etc) to better understand this\n        float sceneDist = sin(rayPosition.x * 3.14 + iTime) + cos(rayPosition.y * 3.14);\n        \n        // Blend between foreground (magenta) & background (dark grey) based on dampened distance from screen centre to current pixel\n        float t = smoothstep(0.0, 0.1,  abs(sceneDist) * 0.05);\n        color += mix(vec3(0.1, 0.1, 0.1), vec3(1.0, 0.0, 1.0), t);\n        \n        // Rate at which we spread our rays\n        distance += 0.5;\n        \n        // The closer to 0, the more we repeat\n        if (abs(sceneDist) < 0.15) \n        {\n            break;\n        }\n    }\n    \n    // Fades colour\n    color *= 0.5 + 0.5 * sin(iTime);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}