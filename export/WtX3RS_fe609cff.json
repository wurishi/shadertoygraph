{"ver":"0.1","info":{"id":"WtX3RS","date":"1556609251","viewed":373,"name":"Contour and density plotting","username":"tpfto","description":"Show the contours and the density plot of a function z == f(x, y). Now with hill shading included.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","plot","contours","hillshading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// contour/density plotter, with hill shading\n\n// some constants\n#define PI 3.14159265359\n\n#define BLACK vec3(0.0)\n#define WHITE vec3(1.0)\n\n// dark and light colors from Solarized (https://ethanschoonover.com/solarized/)\n#define DARK vec3(0., 0.169, 0.212)\n#define LIGHT vec3(0.992, 0.965, 0.89)\n#define GRAY vec3(0.396, 0.482, 0.514)\n\n// XY range of the display.\n#define DISP_SCALE 6.5 \n\n// comment out to disable contours\n#define SHOW_CONTOURS\n\n#ifdef SHOW_CONTOURS\n// Contour thickness (in pixels).\n#define CONTOUR_SIZE 1.0\n\n// number of contours\n#define CONTOURS 12\n\n// contour color\n#define CONTOUR_COLOR GRAY\n#endif\n\n// comment out to disable hill shading\n#define SHADE\n\n// Clip areas outside DISP_SCALE\n#define CLIP_EDGES\n\n// rescaling functions\n\nfloat logistic(float x)\n{\n\t  float ex = exp(-abs(x));\n      return ((x >= 0.0) ? 1.0 : ex)/(1.0 + ex);\n}\n\nfloat rescale(float x, vec2 range)\n{\n\t  float a = range.x, b = range.y;\n      return (x - a)/(b - a);\n}\n\nfloat rescale(float x, vec2 r1, vec2 r2)\n{\n\t  float a = r1.x, b = r1.y;\n      float c = r2.x, d = r2.y;\n      return c + (d - c) * ((x - a)/(b - a));\n}\n\n// using rational version of smoothstep from https://tpfto.wordpress.com/2019/03/28/on-a-rational-variant-of-smoothstep/\nfloat myStep(float e0, float e1, float x)\n{\n    float t = clamp((x - e0)/(e1 - e0), 0.0, 1.0);\n\treturn t * t * t/(1.0 - 3.0 * t * (1.0 - t));\n}\n\n// custom colormap\n\nvec3 land(float t)\n{\n    const float eps = 0.05;\n    const vec3 bl = vec3(0.0);\n    \n    const vec3 c1 = vec3(0.277, 0.355, 0.484);\n    const vec3 c2 = vec3(0.337, 0.468, 0.376);\n    const vec3 c3 = vec3(0.495, 0.563, 0.427);\n    const vec3 c4 = vec3(0.735, 0.728, 0.66);\n    const vec3 c5 = vec3(1., 0.997, 0.914);\n\n    vec3 cc = + mix(c1, c2, 4.0 * t)\n              + mix(bl, c1 - 2.0 * c2 + c3, 4.0 * t - 1.0) * myStep(0.25 - eps, 0.25 + eps, t)\n              + mix(bl, c2 - 2.0 * c3 + c4, 4.0 * t - 2.0) * myStep(0.5 - eps, 0.5 + eps, t)\n              + mix(bl, c3 - 2.0 * c4 + c5, 4.0 * t - 3.0) * myStep(0.75 - eps, 0.75 + eps, t);\n    \n    return pow(cc, vec3(1.6));\n\n}\n\nconst vec2 GRADH = vec2(0.01, 0);\n\n// gradient using central differences\n#define GRAD(f, p) (0.5 * vec2(f(p - GRADH.xy) - f(p + GRADH.xy), f(p - GRADH.yx) - f(p + GRADH.yx)) / GRADH.xx)\n\n// PLOT_CONTOUR(Function, Height, Destination, Screen Position); adapted from https://www.shadertoy.com/view/4tB3WV\n#define PLOT_CONTOUR(f, z, d, p) d = mix(CONTOUR_COLOR, d, smoothstep(0.0, (CONTOUR_SIZE / iResolution.y * DISP_SCALE), abs((z - f(p))/ length(GRAD(f, p)))))\n\n// utility functions\n#define cis(a) vec2( cos(a), sin(a) )\n#define sqr(a) ((a) * (a))\n\n// function to plot\nfloat f(vec2 p)\n{\n      float x = p.x, y = p.y;\n\n      // \"peaks\" function from MATLAB (https://www.mathworks.com/help/matlab/ref/peaks.html)\n      float z = 3.0 * sqr(1.0 - x) * exp(-x * x - sqr(y + 1.0)) - 10.0 * ((0.2 - x * x) * x - y * sqr(y * y)) * exp(-x * x - y * y) - exp(-sqr(x + 1.0) - y * y)/3.0;\n        \n      return z;\n}\n\n// range of height values; the need to manually determine them is the weakness of this approach\n#define ZRANGE vec2(-6, 7)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n        uv *= DISP_SCALE;\n        \n        // evaluate function\n        float z = f(uv), g = 1.0;\n        vec3 col = land(rescale(z, ZRANGE));\n\n        // plot the contour lines\n        #ifdef SHOW_CONTOURS\n        float fac = (ZRANGE.y - ZRANGE.x)/float(CONTOURS - 1);\n        for (int j = 0; j < CONTOURS; j++) PLOT_CONTOUR(f, ZRANGE.x + fac * float(j), col, uv);\n        #endif\n\n        #ifdef SHADE\n        // gradient using forward differences\n        float h = 0.5 * DISP_SCALE/iResolution.y;\n        vec2 grad = z - vec2(f(uv + vec2(h, 0.0)), f(uv + vec2(0.0, h)));\n        // uncomment to use GPU derivatives instead\n        // vec2 grad = - vec2(dFdx(z), dFdy(z));\n\n        // lighting angles for hill shading\n        float th = PI * (0.25 * iTime + 0.25);\n        float ph = 0.125 * PI * (1.0 + cos(0.5 * PI * iTime));\n        \n        // shading factor\n        g = 1.0 - 0.25 * (1.0 + cos(ph) * dot(cis(th), grad)/(pow(h, 1.2) + length(grad)));\n        #endif\n\n        col *= g;\n\n        #ifdef CLIP_EDGES\n        col = mix(DARK, col, 1.0 - step(0.5 * DISP_SCALE, abs(uv.x)));\n        #endif\n\n        fragColor = vec4( vec3(col), 1.0 );\n}","name":"Image","description":"","type":"image"}]}