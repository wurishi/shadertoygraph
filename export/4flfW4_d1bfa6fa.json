{"ver":"0.1","info":{"id":"4flfW4","date":"1723781049","viewed":60,"name":"Inverse stereographic projection","username":"Elsio","description":"Knot feito a partir de uma esfera da quarta dimensão projetada na terceira dimensão. ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["projection","4d","stereographic","knot"],"hasliked":0,"parentid":"ddVcWy","parentname":"petalas neon test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define normal(p) normalize(map(p)-vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)))\n#define t iTime * .5\n#define far 160.\n#define pi 3.1415\n\n//------------------------------------------------------------\n// inverse stereographic projection (@iq)\n// https://www.shadertoy.com/view/fdyXWK\n//------------------------------------------------------------\n\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 csqr(vec2 a) {\n    return vec2(a.x * a.x - a.y * a.y, 2. * a.x * a.y);\n}\n\nvec4 inversestereographic(vec3 p) {\n    float r2 = 1. + dot(p, p);\n    return vec4(2. * p, r2 - 2.) / r2;\n}\n\nvec4 r3_to_s3(vec3 p) {\n    vec4 q = inversestereographic(p);\n    q.xz *= rot(t * 3.14 / 7.);\n    q.yz *= rot(t * 3.14 / 6.);\n    q.yw *= rot(cos(t * .5) * 2.5);\n    return q;\n}\n\nvec2 F(vec2 u, vec2 v) {\n    return 64. * cmul(v, csqr(csqr(u))) \n         +  2. * cmul(u, csqr(v)) \n         + 32. * csqr(v) \n         + 8.;\n}\n\n\n//------------------------------------------------------------\nfloat cor;\n\nfloat map(vec3 p) {\n    vec4 k = r3_to_s3(p);\n    vec2 q = F(k.xy, k.zw);\n    \n    float d1 = length(q) - 7.;\n    q.y -=  20.;\n    float d2 = length(q) - 5.;\n    \n    cor = step(d1, d2);\n    return min(d1, d2);\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 r = iResolution.xy, \n         e = vec2(.01, 0);\n         u = vec2(u + u - r) / r.y;\n    \n    vec3 N, L, col,\n         p = vec3(0, 0, -35), \n         D = normalize(vec3(u, 50));\n    \n        float tmax = 50., \n              i, d, s, f, df, dt, eps = .001;\n\n        // raymarch (@iq)\n        while(i++ < 1200.) {\n            s = map(p +  d       * D);\n            f = map(p + (d + eps) * D);\n            \n            if(abs(s) < .01) break;\n            \n            df = (f-s) / eps;\n            dt = s / abs(df);\n\n            d += clamp(dt, - .1, .1);\n            if(d > tmax) break;\n        }\n\n    if(d < far){\n        float c = cor;\n        N = normal(p + d * D), \n        L = normalize(vec3(cos(t) * 5., 3, -3) - D), \n        \n        col = cor > 0. ? vec3(1,0,0): vec3(0,0,1),\n\n        col *= (2.1 * max(0., dot(L, N)) + .01) * .1,  // diff\n        col += pow(max(0., dot(L, N)), 120.) * .4;     // spec\n    \n    }\n    o.rgb = pow(col, vec3(.2));\n}","name":"Image","description":"","type":"image"}]}