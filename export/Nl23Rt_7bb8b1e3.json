{"ver":"0.1","info":{"id":"Nl23Rt","date":"1624517637","viewed":130,"name":"Optical illusion __","username":"Envy24","description":"If you make a screenshot of this animation, then you can see, that there is no gray on screen.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["optical","illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n\nfloat sliceUnitSquareToThreeRectangles(\n    float x,\n    float y) \n{\n    float newW = (R.x / R.y);\n\n    x /= R.y; // [0.0; newW]\n    y /= R.y; // [0.0; 1.0]\n    \n    int case_ =\n        int(x >= newW / 3.0) |\n        (int(x >= 2.0 * (newW / 3.0)) << 1);\n        \n    float maxCount = 8.0;\n        \n    switch (case_)\n    {\n        case 0: \n            return \n                1.0 - drawSquares(\n                    vec2(x,y),\n                    vec2(newW / 3.0 * 0.5, 0.5),\n                    0.25, \n                    uint(1.0 + mod(iTime * 4.0, maxCount))); \n            break;\n        case 1: \n            return \n                1.0 - drawSquares(\n                    vec2(x, y),\n                    vec2(newW / 3.0 * 1.5, 0.5),\n                    0.25,\n                    uint(1.0 + mod(iTime * 8.0, maxCount)));\n            break;\n        default: break;\n    }\n\n    return \n        1.0 - drawSquares(\n            vec2(x, y),\n            vec2(newW / 3.0 * 2.5, 0.5),\n            0.25,\n            uint(1.0 + mod(iTime * 256.0, maxCount)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float gray = sliceUnitSquareToThreeRectangles(fragCoord.x, fragCoord.y);\n\n    // Output to screen\n    fragColor = vec4(vec3(gray),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float drawSquare(\n    vec2 coords,\n    vec2 center,\n    float radius)\n{\n    float LEFT = center.x - radius;\n    float RIGHT = center.x + radius;\n    float TOP = center.y - radius;\n    float BOTTOM = center.y + radius;\n    \n    return float(\n        coords.x >= LEFT &&\n        coords.x <= RIGHT &&\n        coords.y >= TOP &&\n        coords.y <= BOTTOM);\n}\n\nfloat drawSquares(\n    vec2 coords,\n    vec2 center,\n    float maxRadius,\n    uint count)\n{\n    uint numOfHits = 0u;\n    \n    float decrease = maxRadius / float(count);\n    \n    while(count-- > 0u)\n    {\n        numOfHits += \n            uint(drawSquare(coords, center, maxRadius) > 0.0);\n            \n        maxRadius -= decrease;\n    }\n    \n    return float(numOfHits & 1u);\n}","name":"Common","description":"","type":"common"}]}