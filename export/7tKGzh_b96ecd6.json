{"ver":"0.1","info":{"id":"7tKGzh","date":"1637176508","viewed":218,"name":"Dithering pattern no textures","username":"smarchevsky","description":"Function only 16x16 dither.\nFeel free to optimize, if you want.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int componentSum(ivec2 p) { return p.x + p.y; }\n\nfloat intPattern(vec2 p){\n    ivec2 pos = ivec2(p);\n    ivec4 p0 = ivec4(pos, pos / 2) % 2;\n    ivec4 p1 = ivec4(pos / 4, pos / 8) % 2;\n\n    int res = 0;\n    res += componentSum(p0.xy * ivec2(2, 3)) % 4 * 64;   // 2x2\n    res += componentSum(p0.zw * ivec2(2, 3)) % 4 * 16;   // 2x2\n    res += componentSum(p0.xy * ivec2(2, 3)) % 4 *  4;   // 2x2\n    res += componentSum(p0.zw * ivec2(2, 3)) % 4 *  1;   // 2x2\n    return (float(res) + 0.5) / 256.;\n}\n\nfloat pattern(vec2 pos){\n    vec4 p0 = floor(mod(vec4(pos, pos * 0.5), vec4(2)));\n    vec4 p1 = floor(mod(vec4(pos * 0.25, pos * 0.125), vec4(2)));\n    \n    //  |0 2|\n    //  |3 1| pattern is used in 2x2, 4x4, 8x8, 16x16 scales (p.xy, p.zw, p2.xy, p2.zw)\n\n    float res = 0.;\n    \n    // ver 0\n    res += mod(dot(p0.xy * vec2(2, 3), vec2(1)), 4.) * 64.;   // 2x2\n    res += mod(dot(p0.zw * vec2(2, 3), vec2(1)), 4.) * 16.;   // 4x4\n    res += mod(dot(p1.xy * vec2(2, 3), vec2(1)), 4.) * 4.;   // 8x8\n    res += mod(dot(p1.zw * vec2(2, 3), vec2(1)), 4.);        // 16x16\n    \n    return float(res + 0.5) / 256.;\n}\n\n\n// Bayer implementation matrix https://www.shadertoy.com/view/XtV3RGx\n#define iterBayerMat 4 //size of bayer\n#define bayer2x2(a)(4-(a).x-((a).y<<1))%4\n\nfloat bayerPattern(vec2 pixelpos) //https://www.shadertoy.com/view/XtV3RG\n{\n    ivec2 p = ivec2(pixelpos); int a=0;\n\n    for(int i = 0 ;i < iterBayerMat; i++)\n        a += bayer2x2(p >> (iterBayerMat - 1 - i) & 1) << (2 * i);\n\n    return float(a) / float(2 << (iterBayerMat * 2 - 1));\n}\n\n\n//float dither(vec2 fragCoord, float value){\n    //return float(value > GetBayerFromCoordLevel(fragCoord));\n//    return float(value > pattern(fragCoord));\n//}\n\nvec3 dither3(vec2 fragCoord, vec3 val){\n    return vec3(greaterThan(val, vec3(bayerPattern(fragCoord))));\n}\n\nvec3 getColor(vec2 uv) { return pow(sin(iTime * 0.1 * vec3(0.2, 0.13, .923) + vec3(uv.x * 2., uv.y * 2.3, (uv.y + uv.x * .7444))), vec3(2));}\nfloat getFloat(vec2 uv) { return pow(sin(iTime * 0.1 + uv.x * 3.1415926), 2.); }\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    // performance check\n    int num = 1000000;\n    float fnum = float(num);\n    \n    vec3 col = getColor(uv);\n    //for(int i = 0; i < num; ++i)\n    fragColor.rgb = dither3(fragCoord, col);\n    \n    \n    \n    \n    fragColor = vec4(bayerPattern(fragCoord / 8.));\n}\n\n","name":"Image","description":"","type":"image"}]}