{"ver":"0.1","info":{"id":"4XfXRM","date":"1710260399","viewed":147,"name":"Plasmic Resonance","username":"_90_","description":":3","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["plasma","interference","convolution","pattern","shiny","purple","glowing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 unit = 8./iResolution.xy;\n    vec4 col = texture(iChannel0,uv) * 4.0;\n    col += texture(iChannel0,uv-vec2(unit.x,0)) * 2.0;\n    col += texture(iChannel0,uv+vec2(unit.x,0)) * 2.0;\n    col += texture(iChannel0,uv-vec2(0,unit.y)) * 2.0;\n    col += texture(iChannel0,uv+vec2(0,unit.y)) * 2.0;\n    \n    float d = sqrt(2.)/2.;\n    col += texture(iChannel0,uv-vec2(unit.x*d, unit.y*d)) * 1.0;\n    col += texture(iChannel0,uv+vec2(unit.x*d, unit.y*d)) * 1.0;\n    col += texture(iChannel0,uv-vec2(unit.x*d,-unit.y*d)) * 1.0;\n    col += texture(iChannel0,uv+vec2(unit.x*d,-unit.y*d)) * 1.0;\n    \n    col /= 8.0;\n    \n    col = abs(col-texture(iChannel0,uv)*0.5);\n    fragColor = col/1000.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define freq 25.0\n#define resf 100.0\n#define decay 1.0\n#define refs 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(abs(uv.x),abs(uv.y),0);\n    float val = 0.0;\n    vec4 last = texture(iChannel0,fragCoord/iResolution.xy);\n    \n    // 0,0\n    vec2 pos = vec2(0,0);\n    float wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    // Halves\n    pos = vec2(0,1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(1,0);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(0,-1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(-1,0);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    // Corners\n    \n    pos = vec2(1,1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(-1,1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(-1,-1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n    \n    pos = vec2(1,-1);\n    wl = distance(uv,pos);\n    val += sin(wl*freq+iTime);\n\n    col = vec3(0,0,max(0.0,1.0 - abs(val/0.5))) * 1000.0;\n    col += vec3(last.z,last.x,last.y) * 0.75;\n    //col = vec3(val,-val,-val);\n    //col *= float(abs(uv.x) < 1. && abs(uv.y) < 1.);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}