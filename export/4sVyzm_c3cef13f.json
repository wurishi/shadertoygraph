{"ver":"0.1","info":{"id":"4sVyzm","date":"1521487104","viewed":153,"name":"Corrosion","username":"Pr0fed","description":"Can't stop playing with those. \n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbmnoisevoronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//-- 2D Worley noise. -------------------------------------------------------\n\nfloat r(float n)\n{\n \treturn fract(cos(n*72.42)*173.42);\n}\n\nvec2 r(vec2 n)\n{\n \treturn vec2(r(n.x*63.62-234.0+n.y*84.35),r(n.x*45.13+156.0+n.y*13.89)); \n}\n\nfloat worley2D(in vec2 n)\n{\n    float dis = 2.0;\n    for (int y= -1; y <= 1; y++) \n    {\n        for (int x= -1; x <= 1; x++) \n        {\n            // Neighbor place in the grid\n            vec2 p = floor(n) + vec2(x,y);\n\n            float d = length(r(p) + vec2(x, y) - fract(n));\n            if (dis > d)\n            {\n             \tdis = d;   \n            }\n        }\n    }\n    \n    return 1.0 - dis;\n}\n\n//--------------------------------------------------------------------------\n\n\n#define NUM_OCTAVES 8\n\nfloat fbm ( in vec2 _uv) \n{\n    // Starting value\n    float v = 1.;\n    \n    // Starting amplitude.\n    float a = 1.;\n    \n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(1.25), sin(1.25),\n                    -sin(1.25), cos(1.25));\n    \n    // Stable upward shift.\n    vec2 shift = -vec2(0., -iTime);\n    \n    for (int i = 0; i < NUM_OCTAVES; ++i) \n    {\n        v += a * worley2D(_uv);\n        _uv = _uv * rot * 2. + shift * 0.5;\n        \n        // Amplitude is halved on each octave.\n        a *= 0.5;\n    }\n    \n    return v;\n}\n\n\n// Colors.\nvec3 GreenCyan = vec3(0.000, 0.864, 0.825);\nvec3 AquaBlue = vec3(0.000, 0.478, 0.800);\nvec3 RustyBrown = vec3(0.530, 0.360, 0.000); \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 uv = -1.0 + 2.0 * q;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 4.;\n\n    float w = fbm(uv - fbm(uv * 3.) * fbm(uv));\n    \n    // Draw the min distance.\n    vec3 col = vec3(w / 4.0);\n\n    // Color mix.\n    col = mix(GreenCyan,\n              RustyBrown,\n              clamp((col * col) * 2.5, 0.1, 1.0));\n\n\n    // Output to screen\n    fragColor = vec4((col * col) * 1.65, 1.0);\n}","name":"Image","description":"","type":"image"}]}