{"ver":"0.1","info":{"id":"ftj3z1","date":"1623360101","viewed":249,"name":"Lavalamp FX","username":"HealliesGames","description":"A simple application of metaballs.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fluid","lavalamp","metaball","liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Number of circles.\n#define CIRCLES 16\n\n// Circles radius (same radius for all circles).\n#define R .1\n\n// Apply anti-aliasing.\n#define AA true\n\n\nvec3 DrawMeta(vec2 c[CIRCLES], vec2 uv) {\n    \n    float plotArea = .0; // Amount of circles contribution.\n    \n    // For each circle (with R radius), sum the \"contribution\".\n    for(int i = 0; i < CIRCLES; i++)\n        plotArea += (R * R) / dot(uv - c[i], uv - c[i]);\n\n    // Interpolate background colour with metaballs colour.\n    return mix(vec3(0.05),                         // Dark colour.\n               vec3(1.0, uv.y, sin(iTime + uv.y)), // Metaball colour.\n               \n               // If anti-aliasing is enabled, \n               // Anti-aliasing interpolation value (from FabriceNeyret2).\n               AA? smoothstep(0., 1.5, (plotArea-1.) / min(1., fwidth(plotArea))) : \n               step(1.0, plotArea) //else, fixed interpolation value.\n               );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec3 col;         // Declare final colour vector.\n    vec2 c[CIRCLES];  // Declare an array of circles origin point.\n\n    // Center and normalize coordinates (no squash).\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n    \n    // First half of points movement behaviour.\n    for(int i = 0; i < CIRCLES / 2; i++) {\n        c[i].x = sin((iTime * float(i + 1)) *.3);\n        c[i].y = 0.3;\n    }\n\n    // Second half of points movement behaviour.\n    for(int i = CIRCLES / 2; i < CIRCLES; i++) {\n        c[i].x = cos((iTime * float(i + 1)) *.1);\n        c[i].y = -.3 * cos((iTime * float(i + 3)) *.2);\n    }\n    \n    col = DrawMeta(c, uv);      // Pass points state to draw metaballs.\n    fragColor = vec4(col, 1.0); // Display.\n}","name":"Image","description":"","type":"image"}]}