{"ver":"0.1","info":{"id":"WdsyzH","date":"1584217769","viewed":170,"name":"Raymarching a grid","username":"Axioplase","description":"Playing with space and raymarching.\nI was not able to make an infinite grid. Whenever I tried p = mod(p, 3.) in GetDist, hoping to repeat infinitely my grid, I'd end up with artifacts in all but 1 quadrant... So i decided to animate a finite one.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grid","finite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Base code:\n///// \"RayMarching starting point\" \n//// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n//// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define M(x, y) (x-y*floor(x/y)) \n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n\tp *= scale;\n    return abs(dot(sin(p), cos(p.zxy))+bias)/scale - thickness;\n}\n\nfloat sdLine(vec3 p, vec3 o, vec3 dir, float t) {\n    vec3 a = o;\n    vec3 b = a+dir;\n    vec3 bMinusA = b-a;\n    float h = min(t, max(-t, dot((p-a), bMinusA)/dot(bMinusA,bMinusA)));\n    //float h = dot(p-a, bMinusA)/dot(bMinusA,bMinusA);\n    float dist = length(p - a +-(b-a) * h )- 0.05;\n    return dist;\n}\n\nmat3 rx(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(1,0,0,0,c,-s,0,s,c);\n}\nmat3 ry(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,0,s,0,1,0,-s,0,c);\n}\nmat3 rz(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\nfloat GetDist(vec3 p) {\n    vec3 pp = abs(p);\n    float dist = MAX_DIST+1.;\n    float x =0.5, y=0.5, z = 0.5;\n    float t1 = .5+0.5*sin(iTime);\n    float t2 = .5+0.5*cos(iTime*2.);\n    float t3 = .5+0.5*sin(3.*iTime+3.141592);\n    dist = min(dist, sdLine(pp, vec3(x,y,z), vec3(1,0,0), t1));\n    dist = min(dist, sdLine(pp, vec3(x,y,z), vec3(0,1,0), t2));\n    dist = min(dist, sdLine(pp, vec3(x,y,z), vec3(0,0,1), t3));\n \n    p *= rx(1.+0.25*cos(iTime))*ry(1.+0.25*cos(iTime))*rz(1.+0.25*sin(iTime));\n    dist = min(dist, sdLine(p, vec3(0), vec3(0,0,1), 10.));\n    dist = min(dist, sdLine(p, vec3(0), vec3(0,1,0), 10.));\n    dist = min(dist, sdLine(p, vec3(0), vec3(1,0,0), 10.));\n    return dist;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(1);\n    \n    vec3 ro = 3.*vec3(cos(iTime/2.), sin(iTime/3.), -sin(cos(iTime)));\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n\n    float d = RayMarch(ro, rd);\n    col *= 0.5+0.5*rd.y;\n\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \tcol += vec3(dif/(d*d));\n        col*=0.5+0.5*n.y;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}