{"ver":"0.1","info":{"id":"NslBD8","date":"1644805331","viewed":99,"name":"Home Alone Lego House","username":"fidlajka","description":"Home Alone Lego House\n\nSDF Exercise","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["sdf","exercise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2(in vec2 v ) { return dot(v,v); }\n\nvec3 wall (vec2 uv, float thickness, float brick_height, float brick_width)\n{\n    vec3 red = vec3(0.5,0.0,0.0);\n    vec3 white = vec3(1.0,1.0,1.0); \n    \n    vec3 col = red;\n    float y = mod(uv.y, brick_height);\n    float r = round(mod(uv.y, brick_height*2.0)*(1.0/(brick_height*2.0)));\n    float x = mod(uv.x + r*brick_width*0.5, brick_width);\n        \n    if( y < 0.0+thickness && \n        y > 0.0-thickness)\n    {\n        col = white;\n    }\n    \n    \n    if(x < 0.0+thickness &&\n       x > 0.0-thickness)\n    {\n        col = white;\n    }\n    \n    return col;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat wins (in vec2 pos, in vec2 b)\n{\n    float w1 = sdBox(vec2(abs(pos.x)-0.22, pos.y + 0.28), b);\n    float w2 = sdBox(vec2(abs(pos.x)-0.10, pos.y + 0.28), vec2(b.x * 0.65, b.y));\n    float bottom = min(w1, w2);\n    \n    float w3 = sdBox(vec2(abs(pos.x)-0.22, pos.y), vec2(b.x, b.y * 0.6));\n    float w4 = sdBox(vec2(abs(pos.x)-0.10, pos.y), vec2(b.x * 0.65, b.y * 0.6));\n    float w5 = sdBox(vec2(pos.x, pos.y), vec2(b.x * 0.65, b.y * 0.6));\n    \n    float top = min(w3,min(w4, w5));\n    \n    return min(bottom, top);\n}\n\nfloat tables_row (in vec2 pos, in vec2 b)\n{\n    float w1 = sdBox(vec2(abs(pos.x) - 0.015, abs(pos.y - 0.018)-0.032), b);\n    float w2 = sdBox(vec2(abs(pos.x - 0.1) - 0.015, abs(pos.y - 0.018)-0.032), b);\n    float w3 = sdBox(vec2(abs(pos.x + 0.1) - 0.015, abs(pos.y - 0.018)-0.032), b);\n    float w4 = sdBox(vec2(abs(pos.x - 0.205) - 0.015, abs(pos.y - 0.018)-0.032), b);\n    float w5 = sdBox(vec2(abs(pos.x + 0.205) - 0.015, abs(pos.y - 0.018)-0.032), b);\n    float w6 = sdBox(vec2(abs(pos.x) - 0.25, abs(pos.y - 0.018)-0.032), b);\n    \n    float tmp1 = min(w1, min(w2,w3));\n    float tmp2 = min(w4, min(w5,w6));\n    \n    return min(tmp1, tmp2); \n}\n\nfloat window_tables(in vec2 pos, in vec2 b)\n{\n    float tmp1 = min(tables_row(pos, b), tables_row(vec2(pos.x, pos.y+0.23), b));\n    float tmp2 = min(tables_row(pos, b), tables_row(vec2(pos.x, pos.y+0.29), b));\n    return min(tmp1, tmp2);\n}\n\nfloat dist(vec2 A, vec2 B)\n{\n    return sqrt((A.x-B.x)*(A.x-B.x) + (A.y-B.y)*(A.y-B.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 dark_blue = vec3(0.03, 0.03, 0.03);\n    vec3 blue      = vec3(0.15, 0.15, 0.4);\n    vec3 white     = vec3(1.0, 1.0, 1.0);\n    vec3 gray      = vec3(0.8, 0.8, 0.8);\n    vec3 brown     = vec3(0.2, 0.1, 0.0);\n    \n    float d = dist(uv, vec2(0.5, 0.5));\n\n    vec3 col = d*dark_blue + (1.0-d)*blue;;\n\n    // house\n    if(uv.y < 0.65 && uv.x > 0.2 && uv.x < 0.8)\n    {\n        col = wall(uv, 0.003, 0.02, 0.03);\n    }\n    \n    // base\n    float b1 = sdBox(uv - vec2(0.5, 0.0), vec2(0.35, 0.06));\n    if (b1<0.0) \n    {\n        float t = -b1 * 30.0;\n        col = t*gray + (1.0-t)*white;\n    }\n    \n    // roof\n    float r1 = sdTrapezoid( uv - vec2(0.5, 0.7), 0.35, 0.25, 0.05 );\n    if(r1 < 0.0)\n    {\n        float t = 1.0 - (uv.y * 10.0 - 7.0);\n        col = vec3(t,t,t);\n    }\n\n    float r2 = sdTrapezoid( uv - vec2(0.5, 0.78), 0.30, 0.20, 0.05 );\n    if(r2 < 0.0)\n    {\n        float t = 1.0 - (uv.y * 10.0 - 7.8);\n        col = vec3(t,t,t);\n    }\n    \n    float r3 = sdTrapezoid( uv - vec2(0.5, 0.86), 0.25, 0.15, 0.05 );\n    if(r3 < 0.0)\n    {\n        col = white;\n    }\n    \n    // windows\n    float w = wins (uv - vec2(0.5, 0.52), vec2(0.05, 0.12));\n    if(w < 0.0)\n    {\n        col = white;\n    }\n    \n    float wt = window_tables (uv - vec2(0.5, 0.5), vec2(0.013, 0.025));\n    if(wt<0.0)\n    {\n        col = texture(iChannel0,uv).rgb * 0.5;\n    }\n    \n    // door\n    float d1 = min(sdBox(uv - vec2(0.5, 0.20), vec2(0.04, 0.12)), \n                   sdCircle(uv - vec2(0.5,0.32), 0.04));\n    if(d1<0.0)\n    {\n        col = white;\n    }\n    \n    float d2 = sdBox(uv - vec2(0.5, 0.08), vec2(0.06, 0.015));\n    if(d2 < 0.0)\n    {\n        col = brown;\n    }\n    \n    float d3 = sdBox(uv - vec2(0.5, 0.2), vec2(0.03, 0.1));\n    if(d3<0.0)\n    {\n        col = brown * 0.8;\n    }\n    \n    float d4 = sdBox(vec2(abs(uv.x - 0.4) - 0.04, uv.y - 0.24), vec2(0.01, 0.11));\n    float d5 = sdBox(vec2(abs(uv.x - 0.6) - 0.04, uv.y - 0.24), vec2(0.01, 0.11));\n    \n    float d6 = sdBox(vec2(abs(uv.x - 0.4) - 0.04, uv.y - 0.52), vec2(0.01, 0.07));\n    float d7 = sdBox(vec2(abs(uv.x - 0.6) - 0.04, uv.y - 0.52), vec2(0.01, 0.07));\n    \n    float d8 = min(min(d4,d5), min(d6,d7));\n\n    if(d8<0.0)\n    {\n        col = brown * 0.5;\n    }\n    \n    float d9  = sdTrapezoid( uv - vec2(0.5, 0.325), 0.0, 0.015, 0.02 );\n    float d10 = sdTrapezoid( uv - vec2(0.52, 0.325), 0.012, 0.0, 0.015 );\n    float d11 = sdTrapezoid( uv - vec2(0.48, 0.325), 0.012, 0.0, 0.015 );\n    float d12 = min(d9, min(d10,d11));\n    \n    if(d12 < 0.0)\n    {\n        col = brown *0.5;\n    }\n    \n    // venec\n    float v = sdCircle(p - vec2(0, -0.52), 0.08);\n                 \n    if(v < 0.0)\n    {\n        col = vec3(0.0, 0.4, 0.1);\n    }\n    \n    float v2 = sdCircle(p - vec2(0, -0.52), 0.05);\n                 \n    if(v2 < 0.0)\n    {\n        col = vec3(0.4, 0.0, 0.1);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}