{"ver":"0.1","info":{"id":"ftsyDl","date":"1648913452","viewed":110,"name":"Fractal 2D Boze","username":"kaiware007","description":"Instead of using a mathematically defined shape for orbit trapping in fractals, a bitmap can be used just as easily ^_^","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","julia","orbittrap","orbit","boze"],"hasliked":0,"parentid":"4slGWH","parentname":"Fractal Nyancat"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n// Instead of using a pont, circle, line or any mathematical shape for traping the orbit\n// of fc(z), one can use any arbitrary shape. For example, a NyanCat :)\n//\n// I invented this technique more than 10 years ago (can have a look to those experiments \n// here https://iquilezles.org/articles/ftrapsbitmap).\n\n#define M_PI 3.1415926\n#define RAD90 (M_PI * 0.5)\n\nstruct surface {\n\tfloat dist;\n    vec4 albedo;\n    int count;\n    bool isHit;\n};\n\n// Surface Data Define\n#define SURF_NOHIT(d)   (surface(d, vec4(0), \t\t \t0, false))\n#define SURF_BLACK(d) \t(surface(d, vec4(0,0,0,1),   \t0, true))\n#define SURF_FACE(d) \t(surface(d, vec4(1,0.7,0.6,1), \t0, true))\n#define SURF_MOUSE(d) \t(surface(d, vec4(1,0,0.1,1),   \t0, true))\n#define SURF_CHEEP(d) \t(surface(d, vec4(1,0.3,0.4,1), \t0, true))\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\nsurface opU(surface d1, surface d2)\n{\n    if(d1.dist < d2.dist){\n        return d1;\n    } else {\n    \treturn d2;\n    }\n}\n\nfloat opU( float d1, float d2 ) {  return min(d1,d2); }\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// Distance Function 2D\nfloat sdRoundBox(vec2 p, vec2 size, float r)\n{\n    return length(max(abs(p) - size * 0.5, 0.0)) - r;\n}\n\nfloat sdArc( in vec2 p, in vec2 sc, in float ra, float rb )\n{\n    // sc is the sin/cos of the arc's aperture\n    p.x = abs(p.x);\n    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                  abs(length(p)-ra)) - rb;\n}\n\nfloat sdCapsule(vec2 p, vec2 a, vec2 b, float r)\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn length(pa - ba*h) - r;\n}\n\nfloat sdEllipsoid( vec2 p, vec2 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nsurface opColorOvreWrite(surface a, surface b)\n{\n    if(b.dist > 0.0){\n        return a;\n    }else{\n        a.albedo = b.albedo;\n        return a;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// Mikka Boze Distance Function 2D\n/////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdEar(vec2 p)\n{\n    p = rot(RAD90+0.25) * p;\n    return sdArc(p + vec2(0.05, 0.175), vec2(sin(0.7),cos(0.7)), 0.03, 0.01);\n    //return sdCappedTorus(p + vec3(0.05, 0.175, 0), vec2(sin(0.7),cos(0.7)), 0.03, 0.01);\n}\n\n#define EYE_SPACE_2D 0.045\n\nvec2 opBendXY(vec2 p, float k)\n{\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    return vec2(m*p.xy);\n}\n\nfloat sdMouse(vec2 p, float ms)\n{\n    vec2 q = opBendXY(p, 2.0);\n    ms += 0.00001;\n    return sdEllipsoid(q, vec2(0.035, 0.01 * ms));\n}\n\nfloat sdCheep(vec2 p)\n{    \n    const float x = 0.085;\n    const float r = 0.0045;\n    const float rb1 = 100.;\n    \n    //p = rotate(p, M_PI * -0.6 * (p.x - x), vec3(-0.2,0.8,0));\n\t//p = rotate(p, M_PI * -0.6 * (p.x - x), vec3(-0.2,0.8,0));\n    \n    float d = sdCapsule(opBendXY(p + vec2(x, -0.02), rb1), vec2(-0.005,0.0), vec2(0.005, 0.), r);\n    float d1 = sdCapsule(opBendXY(p + vec2(x+0.01, -0.02), 200.0), vec2(-0.0026,0.0), vec2(0.0026, 0.), r);\n    float d2 = sdCapsule(opBendXY(p + vec2(x+0.019, -0.025), -rb1), vec2(-0.01,0.0), vec2(0.0045, 0.), r);\n    \n    return opU(opU(d, d1), d2);\n}\n\nfloat sdEyeBrow(vec2 p)\n{\n    const float x = 0.05;\n    //p = opBendXZ(p + vec3(0.02,0,-0.02), -6.5);\n    return sdRoundBox(p + vec2(EYE_SPACE_2D, -0.14), vec2(0.015,0.004), 0.0);\n}\n\nsurface sdBoze(vec2 p, vec2 sc, float ms)\n{    \n    surface result = SURF_NOHIT(1e5);\n    \n    float minsc = min(sc.x, sc.y);\n    p /= sc;\n    \n    // head\n\tfloat d = sdCapsule(p, vec2(0,0.08), vec2(0, 0.11), 0.125);\n    \n    //float d1 = sdRoundedCylinder(p + vec3(0,0.025,0), 0.095, 0.05, 0.0);\n    //float d1 = sdRoundBox(p + vec2(0, 0.025), vec2(0.25,0.03), 0.03);\n    float d1 = sdCapsule(p, vec2(-0.1, 0.0075), vec2(0.1, 0.0075), 0.06); \n    \n    d = smin(d, d1, 0.025);\n    //d = d1;\n    \n    vec2 mxp = vec2(-abs(p.x), p.y);\n    \n    // ear\n    float d2 = sdEar(mxp);\n    d = opU(d, d2);\n\n\tsurface head = SURF_FACE(d);\n    \n\t// eye\n    float d4 = sdCapsule(mxp, vec2(-EYE_SPACE_2D, 0.07), vec2(-EYE_SPACE_2D, 0.09), 0.0175);\n    surface eye = SURF_BLACK(d4);\n    \n    // mouse\n    float d6 = sdMouse(p, ms);\n    surface mouse = SURF_MOUSE(d6);\n    \n    result = opColorOvreWrite(head, mouse);\n    \n    \n    // cheep\n    float d7 = sdCheep(mxp);\n    surface cheep = SURF_CHEEP(d7);\n    \n    result = opColorOvreWrite(result, cheep);\n    \n    \n    // eyebrows\n    float d9 = sdEyeBrow(mxp);\n    eye.dist = opU(eye.dist, d9);\n    \n    result = opColorOvreWrite(result, eye);\n    \n    result.dist *= minsc;\n    \n    return result;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// End of Mikka Boze 2D\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nvec4 getSDBoze2D(vec2 p)\n{\n    float ms = sin(iTime*5.) * 0.5 + 0.5;\n    surface mat = sdBoze(p+vec2(0.2+sin(iTime*0.7)*0.2,0.1+cos(iTime)*0.3), vec2(1), ms);\n    \n    // outline\n    mat.albedo.xyz *= abs(mat.dist) <= 0.002 ? 0. : 1.;\n    \n    return (mat.dist <= 0.0) ? mat.albedo : vec4(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float time = max( iTime, 0.0 );\n    \n    // zoom\t\n\tp = vec2(0.5,-0.05)  + p*0.75 * pow( 0.9, 20.0*(0.5+0.5*cos(0.25*time)) );\n\t\n    vec4 col = vec4(0.0);\n\tvec3 s = mix( vec3( 0.2,0.2, 1.0 ), vec3( 0.5,-0.2,0.5), 0.5+0.5*sin(0.5*time) );\n\n    // iterate Jc\t\n\tvec2 c = vec2(-0.76, 0.15);\n\tfloat f = 0.0;\n\tvec2 z = p;\n\tfor( int i=0; i<100; i++ )\n\t{\n\t\tif( (dot(z,z)>4.0) || (col.w>0.1) ) break;\n\n        // fc(z) = zÂ² + c\t\t\n\t\tz = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n\t\t\n\t\t//col = getNyanCatColor( s.xy + s.z*z, time );\n        col = getSDBoze2D(s.xy + s.z*z);\n\t\tf += 1.0;\n\t}\n\t\n\tvec3 bg = 0.5*vec3(1.0,0.5,0.5) * sqrt(f/100.0);\n\t\n\tcol.xyz = mix( bg, col.xyz, col.w );\n    \n    \n\tfragColor = vec4( col.xyz,1.0);\n}","name":"Image","description":"","type":"image"}]}