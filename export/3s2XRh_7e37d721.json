{"ver":"0.1","info":{"id":"3s2XRh","date":"1682433449","viewed":101,"name":"Testing VR shader","username":"jbouvier","description":"This is to test VR shader implementation","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["vr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Last stage processing VR transformation for Oculus devices.\n\nconst vec2[2] LeftLensCenter = vec2[](vec2(0.5, 0.25),vec2(0.25, 0.5));\nconst vec2[2] RightLensCenter = vec2[](vec2(0.5, 0.75),vec2(0.75, 0.5));\nconst vec2[2] Scale = vec2[](vec2(0.2350845, 0.1469278),vec2(0.1469278,0.2350845));\nconst vec2[2] ScaleIn = vec2[](vec2(2.5, 4),vec2(4,2.5));\nconst float aberr_r = 0.985;\nconst float aberr_b = 1.015;\n\n//const vec4 HmdWarpParam   = vec4(1, 0.2, 0.1, 0);\nconst vec4 HmdWarpParam   = vec4(1.2, 0.2, 0.1, 0);\n\nconst int rot = 0;\n\nvoid applyWaveTransform(in vec2 oTexCoord, in vec2 scalein, in vec2 scale, in vec2 LensCenter, out vec2[3] pickUpPositions)\n{\n    vec2 theta = (oTexCoord - LensCenter) * scalein; \n    \n    float rSq = theta.y * theta.y + theta.x * theta.x;\n    vec2 rvector = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq +\n                            HmdWarpParam.z * rSq * rSq +\n                            HmdWarpParam.w * rSq * rSq * rSq);\n\n    pickUpPositions[0] = LensCenter + aberr_r * scale * rvector;\n    pickUpPositions[1] = LensCenter +           scale * rvector;\n    pickUpPositions[2] = LensCenter + aberr_b * scale * rvector;\n    \n}\n\nbool isLeft(in vec2 fragCoord, in int rot)\n{\n    if (rot==0) {\n        return fragCoord.y < iResolution.y*0.5;\n    } else {\n     \treturn fragCoord.x < iResolution.x*0.5;   \n    }\n}\n\nbool checkSamplePositionOutsideTexture(in bool left,in vec2 pos)\n{\n    if (left) {\n\n            if ((pos.x>0.5 || pos.x<0.0) ||\n                (pos.y>1.0 || pos.y<0.0)) return true;\n            \n    } else {\n\n            if ((pos.x<0.5 || pos.x>1.0)||\n                (pos.y>1.0 || pos.y<0.0)) return true;\n\n    }\n\treturn false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Starting\n    float rval = 0.0;\n    float gval = 0.0;\n    float bval = 0.0;\n    \n    bool left = isLeft(fragCoord, rot);\n\n    vec2 LensCenter = left ? LeftLensCenter[rot] : RightLensCenter[rot];\n\n    vec2 oTexCoord = fragCoord/iResolution.xy;\n\n    vec2[3] pickUpPositions;\n    applyWaveTransform(oTexCoord, ScaleIn[rot], Scale[rot], LensCenter, pickUpPositions);\n\n    vec2 tc_r = pickUpPositions[0];\n    vec2 tc_g = pickUpPositions[1];\n    vec2 tc_b = pickUpPositions[2];\n    if (rot==0){\n    \ttc_r = tc_r.yx;\n        tc_g = tc_g.yx;\n        tc_b = tc_b.yx;\n    }\n\n    if (!checkSamplePositionOutsideTexture(left,tc_r))\n        rval = texture(iChannel0, tc_r).x;\n    if (!checkSamplePositionOutsideTexture(left,tc_g))\n        gval = texture(iChannel0, tc_g).y;\n    if (!checkSamplePositionOutsideTexture(left,tc_b))\n        bval = texture(iChannel0, tc_b).z;\n\n    fragColor = vec4(rval,gval,bval,1.0);\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RAY_T_MIN 0.0001\n#define RAY_T_MAX 1000.0\n#define ASPECT_RATIO iResolution.x / iResolution.y\n#define FOV 70.0\n\n//To change what material the sphere is made of (or the area around it), change the paramateres that are passed into\n//refractionDirection() which is called in intersectSphere()\n#define AIR 1.0002926\n#define WATER 1.333\n#define OLIVE_OIL 1.47\n#define WINDOW_GLASS 1.52\n#define CUBIX_ZIRCONIA 2.15\n#define DIAMOND 2.42\n\n//Camera\nvec3[2] origin = vec3[2](vec3(-0.032, 0.0, -2.0),vec3(0.032, 0.0, -2.0));\nvec3 at = vec3(0.0, 0.0, 0.0);\nvec3 up = vec3(0.0, 1.0, 0.0);\n\n//Ray\nvec3 direction = vec3(0.0);\nfloat t = RAY_T_MAX;\n\n//Sphere\nvec3 center = vec3(0.0, 0.0, 0.0);\nfloat radius = 0.3;\n\nvec3 intersectionPoint(vec3 rayOrigin, float t)\n{\n\treturn rayOrigin + (direction * t);\n}\n\nvec3 refractionDirection(vec3 normal, vec3 incidentVector, float incidentAngle, float refractiveIndexFrom, float refractiveIndexTo)\n{\n    float angleOut = asin((refractiveIndexFrom / refractiveIndexTo) * sin(incidentAngle));\n    vec3 parallelVector = (-incidentVector) + normal * (dot(incidentVector, normal));\n    parallelVector = parallelVector / sin(incidentAngle); //normalize\n    vec3 direction = (-normal * cos(angleOut)) - (parallelVector * sin(angleOut));\n    \n    return direction;\n}\n\nvec4 intersectColor()\n{\n    return texture(iChannel0, direction * vec3(1.0, -1.0, 1.0));\n}\n\nvec4 intersectSphere(vec3 origin)\n{\n\t//Transform the ray so we can consider origin-centered sphere\n\tvec3 localOrigin = origin - center;\n\n\t//Calculate quadratic coefficients\n\tfloat a = pow(abs(length(direction)), 2.0);\n\tfloat b = 2.0 * dot(direction, localOrigin);\n\tfloat c = pow(abs(length(localOrigin)), 2.0f) - sqrt(radius);\n\n\t//Check whether we intersect\n\tfloat discriminant = pow(abs(b), 2.0) - (4.0 * a * c);\n\tif (discriminant < 0.0)\n\t\treturn intersectColor();\n\n\t//Find the two points of intersection, t1 = close, t2 = far, t1 might be equal to t2 if there is only one solution\n\tfloat t1 = (-b - sqrt(discriminant)) / (2.0 * a);\n\tif (t1 > RAY_T_MIN && t1 < RAY_T_MAX)\n\t\tt = t1;\n\telse\n\t\treturn intersectColor();\n\n    //Calculate necessary elements for reflection ray    \n    vec3 intersectionPointIn = intersectionPoint(origin, t);\n    vec3 normalAtPointIn = normalize((intersectionPointIn - center) / radius);\n    \n    //Ray inside sphere\n    float incidentAngle = acos(dot(direction, normalAtPointIn));\n    direction = refractionDirection(normalAtPointIn, direction, incidentAngle, AIR, CUBIX_ZIRCONIA);\n    vec3 toCenter = normalize(center - intersectionPointIn);\n    vec3 positionOffset = toCenter * 0.000001;\n    vec3 newPosition = intersectionPointIn + positionOffset;\n    \n    //Calculate quadratic coefficient - no need to test\n\ta = pow(abs(length(direction)), 2.0);\n\tb = 2.0 * dot(direction, newPosition);\n\tc = pow(abs(length(newPosition)), 2.0) - sqrt(radius);\n\tdiscriminant = pow(abs(b), 2.0) - (4.0 * a * c);\n\tt = (-b + sqrt(discriminant)) / (2.0 * a); //why + and not -\n    \n    vec3 newIntersectionPoint = intersectionPoint(newPosition, t);     \n    vec3 newNormalAtPoint = normalize((center - newIntersectionPoint) / radius); //why center-newIntersectionPoint??\n\tfloat newIncidentAngle = acos(dot(direction, newNormalAtPoint));\n    direction = refractionDirection(newNormalAtPoint, direction, newIncidentAngle, CUBIX_ZIRCONIA, AIR);\n    \n    return intersectColor();\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    int eye = 0;\n    \n    vec2 realFragCoord = fragCoord.xy*vec2(2.0,1.0)/iResolution.xy;\n    if (realFragCoord.x>1.0){\n        realFragCoord.x = realFragCoord.x - 1.0;\n        eye = 1;\n    }\n    \n    vec3 origin_eye = origin[eye];\n    \n    vec2 screenCoord = vec2(realFragCoord.xy) - vec2(0.5, 0.5);\n\n    float h = tan(FOV);\n    float w = h * ASPECT_RATIO;\n    float d = 0.5;\n\t\n    direction = normalize(center - origin_eye);\n\tdirection = normalize((direction * d) + (screenCoord.x * w * normalize(cross(direction, up))) + (screenCoord.y * h * up));\n    vec4 reflectColor = intersectSphere(origin_eye);    \n    \n\tfragColor = reflectColor;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n * \"Seascape\" by Alexander Alekseev aka TDM - 2014\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: tdmaav@gmail.com\n */\n\nconst int NUM_STEPS = 8;\nconst float PI\t \t= 3.141592;\nconst float EPSILON\t= 1e-3;\n#define EPSILON_NRM (0.1 / iResolution.x)\n\n// sea\nconst int ITER_GEOMETRY = 3;\nconst int ITER_FRAGMENT = 5;\nconst float SEA_HEIGHT = 0.6;\nconst float SEA_CHOPPY = 4.0;\nconst float SEA_SPEED = 0.8;\nconst float SEA_FREQ = 0.16;\nconst vec3 SEA_BASE = vec3(0.1,0.19,0.22);\nconst vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6);\n#define SEA_TIME (1.0 + iTime * SEA_SPEED)\nconst mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\n\n// math\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n\treturn m;\n}\nfloat hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\n// sky\nvec3 getSkyColor(vec3 e) {\n    e.y = max(e.y,0.0);\n    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4);\n}\n\n// sea\nfloat sea_octave(vec2 uv, float choppy) {\n    uv += noise(uv);        \n    vec2 wv = 1.0-abs(sin(uv));\n    vec2 swv = abs(cos(uv));    \n    wv = mix(wv,swv,wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n}\n\nfloat map(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_GEOMETRY; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\nfloat map_detailed(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.65;\n        \n    vec3 reflected = getSkyColor(reflect(eye,n));    \n    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; \n    \n    vec3 color = mix(refracted,reflected,fresnel);\n    \n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    \n    color += vec3(specular(n,l,eye,60.0));\n    \n    return color;\n}\n\n// tracing\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);    \n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\n\nfloat heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {  \n    float tm = 0.0;\n    float tx = 1000.0;    \n    float hx = map(ori + dir * tx);\n    if(hx > 0.0) return tx;   \n    float hm = map(ori + dir * tm);    \n    float tmid = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++) {\n        tmid = mix(tm,tx, hm/(hm-hx));                   \n        p = ori + dir * tmid;                   \n    \tfloat hmid = map(p);\n\t\tif(hmid < 0.0) {\n        \ttx = tmid;\n            hx = hmid;\n        } else {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    return tmid;\n}\n\nconst vec3[2] eyes = vec3[](vec3(-0.032,0.0,0.0),vec3(0.032,0.0,0.0));\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    int eye = 0;\n    vec2 uv = fragCoord.xy*vec2(2.0,1.0) / iResolution.xy;\n    if (uv.x>1.0) {\n        uv.x = uv.x - 1.0;\n        eye = 1;\n    }\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n    float time = iTime * 0.3 + iMouse.x*0.01;\n        \n    // ray\n    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    \n    vec3 ori = vec3(0.0,2.5,time*5.0)+eyes[eye];\n    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.15;\n    dir = normalize(dir) * fromEuler(ang);\n    \n    // tracing\n    vec3 p;\n    heightMapTracing(ori,dir,p);\n    vec3 dist = p - ori;\n    vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);\n    vec3 light = normalize(vec3(0.0,1.0,0.8)); \n             \n    // color\n    vec3 color = mix(\n        getSkyColor(dir),\n        getSeaColor(p,n,light,dir,dist),\n    \tpow(smoothstep(0.0,-0.05,dir.y),0.3));\n        \n    // post\n\tfragColor = vec4(pow(color,vec3(0.75)), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}