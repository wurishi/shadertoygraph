{"ver":"0.1","info":{"id":"wssXDl","date":"1552595795","viewed":238,"name":"jimmy before his first coffee","username":"nabr","description":"what do you think probably jimmy will meet later with einstein at the beach\n--------------------\nclick & drag mouse horizontal for scale","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["sound","distortion","jam","guitar","gpu","jimmy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/wssXDl\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n// soundin shader by FabriceNeyret2\n// --- access to the image of ascii code c\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.))\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureLod( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), \\\n//                                                                               log2(length(fwidth(U/16.*iResolution.xy))) )\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox(vec3 p, vec3 b) \n{\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat map(vec3 p) \n{\n\tp.xy = cos(iTime * .25) * p.xy + sin(iTime * .25) * vec2(p.y, -p.x);\n\n    float h = 0.;\n    for (int i = 0; i <= 1; i++) \n    {\n        vec3 v = mod(p, 2.) - 1.;\n        float dt = max(0., .2 - sdBox(v, vec3(.5))) * iResolution.y;\n        h += dt;\n        p *= -6.002 * mod(sin(iTime * .0825), 2.);\n    }\n\n    return 3. - sqrt(h * 6.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    \n    if (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.0,.1)) * 10.);if(c>=0.){fragColor=vec4(c, c, c, 1);return;}}\n\n    \n    vec3 col = vec3(0), tot = vec3(0.0), lambert = vec3(0), halfdir = vec3(0), spec = vec3(0);\n\n    //scale \n    float mlt = 5.;\n    if (iMouse.z > 0.1) mlt = (15. * iMouse.x / iResolution.x);\n\n    // antialiasing / tonemapping \n    // thx to IQ - https://www.shadertoy.com/view/tslGz7\n    \n    const int AA = 2;\n    \n    for (int jj = 0; jj < AA; jj++)\n        for (int ii = 0; ii < AA; ii++) \n        {\n\n            vec2 q = fragCoord.xy + vec2(float(ii), float(jj)) / float(AA);\n            vec2 p = (2. * q - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n            // frame\n            if (abs(p.y) >= .9) {\n                fragColor = vec4(1.);\n                return;\n            };\n\n            p *= mlt;\n\n            vec3 rd = normalize(vec3(p,  1.));\n\n            // map normals \n            float n1 = map(rd);\n            float n2 = map(rd) - map(rd);\n            float n3 = map(vec3(rd.x, rd.y, rd.z - .005)) - map(vec3(rd.x, rd.y - .005, rd.z));\n\n            // normals\n            vec3 n = normalize(cross(vec3(n2, n1, n3),\n                vec3(length(n3) - .5, length(n1) - 1. , .5-length(n3))));\n\n            // shade\n            lambert = normalize(vec3(vec2(abs(p.x), p.y), -5.));\n            halfdir  = normalize(lambert + vec3(-4., .001, 4.));\n            spec = vec3(pow(dot(halfdir, n), 4.));\n\t\n\t        col = (vec3(0.5, 0.02, 0.02) * max(-1., dot(n, lambert))) + spec;\n\n            // gama\n            col = pow(col, vec3(0.4545));\n\n            tot += col;\n        };\n    \n    tot /= float(AA * AA);\n    tot = 1.1 * pow(tot, vec3(1.0, 1.3, 1.4));\n    \n    fragColor.rgb = tot;\n    fragColor.a = 1.;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// nabr\n// https://www.shadertoy.com/view/wssXDl\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\nvec2 mainSound( in int samp,float time) \n{\n     #define tau (acos(-1.) * 2.)\n    \n     // Prelude and Fugue No. 1 in C major, BWV 846\n    float pf[] = float[](261.63, 329.63, 392.00,\n                         523.25, 659.26, 392.00,\n                         523.25, 659.26, 261.63,\n                         329.63, 392.00);\n\n    float guitar = 0.0001;\n    \n    float a = .9;\n    float mtm = time * .5;\n    \n    // borrowed from IQ https://www.shadertoy.com/view/4l2BW3\n    for (int i = 0; i < 8; i++) \n    {\n\t\tfloat hime = mtm - 4.333 * float(i) / 8.0;\n\t\t\n        float deca = fract(hime);\n\t\t\n        // envelope\n        float env = min(deca * 550.0, 1.0) \n            \t    * min((1.0 - deca) * 100.0, 1.0) \n            \t\t* max(0.6, pow(1. - deca, 2.0));\n        \n\t\tfloat freq = pf[int(hime) % pf.length()];\n        \n        guitar += a * env * sin(tau * freq  * hime) + .1;\n        \n        float freq1 = pf[int(floor(hime - deca)) % 6];\n        \n        guitar += .5 * env * sin(tau * freq1 * hime * 2.) * exp(-3. * deca);\n\n        a *= 0.65;\n    };\n    \n            \n    float bells = 0.00001;\n    \n    a = .7;\n    mtm = time;\n    \n    float pf1[] =  float[](440., 392.00, 590., 655.);\n    \n    for (int i = 0; i < 8; i++) \n    {\n\t\tfloat hime = mtm - 6.333 * float(i) / 8.0;\n\t\t\n        float deca = fract( hime  ) ;\n\t\t\n        float env = \n            min(deca * 60.0, 1.0) \n            * min((1. - deca) * 100.0, 1.0) \n            * max(0.61, pow(.95 - deca, 2.0));\n        \n\t\tfloat freq =  2. * pf1[int(hime) % pf1.length()];\n        \n        bells += a * env * (sin(6.2831 * freq * hime)) * exp(-2. * deca);;\n        \n        a *= 0.84;\n    };\n\n    // volume animation the hard way     \n    float ex = clamp( exp2(log2(time*.1)), 0., 1.);    \n        \n    return ex * (vec2( dot(bells, .5), dot(bells, .45) )\n                 +vec2( dot(guitar, .7), dot(guitar, .8) ));\n}","name":"Sound","description":"","type":"sound"}]}