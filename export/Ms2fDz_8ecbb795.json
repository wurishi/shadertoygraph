{"ver":"0.1","info":{"id":"Ms2fDz","date":"1500146790","viewed":125,"name":"[SH17A] Water Wobbles","username":"Bitzawolf","description":"A simple shader to get to learn Shadertoy and see how cool of an effect I could get in 280 characters or less.\n\nWanted to play with drawing colors based on their coordinates, which I haven't done before.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","abscract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * X Diamonds by Bitzawolf\n *\n * Creates a grid of diamond shapes that appear to move to\n * the bottom-left corner and get streched as they approach\n * an edge.\n * This is done by using sinusodal waves that become faster\n * away from the center position or when x=0.\n * The center is then offset to the bottom-left corner.\n *\n * @Bitzawolf\n * bitzawolf.com\n */\n\n#define T iTime\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    // UV coordinates of the current pixel on the screen. (0 to 1)\n    vec2 u = f.xy / iResolution.xy;\n    \n    // 1) Offset pixels coordinates so \"center\" is in\n    //\t\tbottom-left corner.\n    //\t\tp ranges from 0.5 to 1.5\n    // 3) Multiply by 9 (creates more circle shapes).\n    //\t\tp ranges from 4.5 to 13.5\n    // 4) Subtract 3.5 to offset pixels just a bit\n    //\t\tp ranges from 1 to 10\n    vec2 p = (\n        \t\t(u + vec2(.5, .5)) * 9.\n    \t\t  ) - 3.5;\n    \n    // Use a sin wave that's faster near the edges and\n    // \t\tslower near the center to determine where\n    //\t\tto draw the solid color and where to draw\n    //\t\ta circle/shape\n    // 1) Square p for exponentially faster waves near\n    //\t\tedges.\n    // 2) Add time so the circles move.\n    // 3) Add up sin of x and y (arbitrary to use sin vs cos)\n    // \t  \tv ranges from root-2 / -2, to root-2 / 2\n    // 3) Add texture green channel, sampling from same squared position\n    //\t\tthe .01 factor is to make the texture sampling large enough\n    //\t\tto look nice.\n    //\t\tAdd time so the texture slowly moves too\n    //\t\tThis distorts the bubbles around based on the green channel\n    //\t\tin the texture.\n    //\t\tMultiply this effect by 2 to distort the pixels a little extra.\n    //\t\tv ranges from roughly root-2 / -2 to 3.41\n    // 4) Absolute v. Makes the circles have a little colored circle inside\n    //\t\tthem. Delete the 'abs' to see it without.\n    //\t\tv ranges from 0 to 3.41\n    float v = abs(\n        \t\tcos(p.x * p.x + T * 5.) +\n        \t   \tsin(p.y * p.y + T * 5.) +\n        \t\ttexture(iChannel0, p * p * .01 + T * .1).g * 2.\n              );\n    \n    // Choose color based on 'v'.\n    // .7 is arbirary. Looks nice.\n    // First color is the solid blue/teal color\n    // The second color is the lighter \"foam\" which gets more\n    // blue towards the top-right corner.\n    o = v > .7 ? vec4(0,\n                 \t  .67 + sin(T * .2) * .2,\n                      .65,\n                      1)\n        \t\t\t: \n    \t\t\t vec4(.62 - .11 * u.x,\n                      .93 - .13 * u.x,\n                      .92,\n                      1);\n}","name":"Image","description":"","type":"image"}]}