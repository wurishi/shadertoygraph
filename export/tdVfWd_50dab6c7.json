{"ver":"0.1","info":{"id":"tdVfWd","date":"1608273451","viewed":124,"name":"Radial and Angular Linewidths","username":"jllusty","description":"Test of uniform radial and angular linewidths in a polar plot.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["randompolargrid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 4.*atan(1.);\n\nmat2 rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nvec2 rand(vec2 n) { \n\tfloat a = fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n    float b = fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n    return vec2(a,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =  10.* ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n\n    float r = length(uv);\n    \n    if (int(floor(r)) % 2 == 0) {\n        float freq = rand(vec2(floor(r),1)).y;\n        uv *= rotate(freq*iTime);\n    }\n    else {\n        float freq = rand(vec2(floor(r),-1)).y;\n        uv *= rotate(-freq*iTime);\n    }\n    \n    float theta = atan(uv.y,uv.x)+pi;\n\n    float n = 7.;    \n    float eps = 30./iResolution.y;\n    float dt = abs(mod(theta+pi/n,2.*pi/n)-pi/n);\n    float ct = smoothstep(2.*eps,eps,dt*r);\n    \n    float dr = abs(fract(r+0.5)-0.5);\n    float cr = smoothstep(2.*eps,eps,dr);\n    \n    float cc = max(ct,cr);\n    \n    vec2 dc = rand(vec2(floor(n*theta/(2.0*pi)),floor(r)));\n    vec3 col = mix(vec3(dc.x,.5,dc.y),vec3(0.),cc);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}