{"ver":"0.1","info":{"id":"4tVSDG","date":"1485719605","viewed":111,"name":"Kernel Shape Assignment","username":"dmatts95","description":"Sharpens an area that is within an image while the rest of the image is blurred","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blur","kernel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//blurring matrix \nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\n//sharpening matrix\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\n//sobel on top matrix\nmat3 topSobel = mat3(\n1.0, 0.0, -1.0,\n2.0, 0.0, -2.0,\n1.0, 0.0, -1.0\n);\n\n//emboss matrix\nmat3 emboss = mat3(\n-2., -1.0, 0.0,\n-1.0, 1.0, 1.0,\n0.0, 1.0, 2.0\n);\n\n//edge detect matrix\nmat3 edge = mat3(\n-1.,-1.,-1.,\n-1.,8.,-1.,\n-1.,-1.,-1.\n);\n\n//is point _uv contained in circle with radius _rad at position _pos\nbool ConatainedInCircle(vec2 _fc, vec2 _pos, float _rad)\n{    \n    float aspectRatio = iResolution.y/iResolution.x; \n    vec2 uv = _fc.xy / iResolution.xy; \n    uv.y *= aspectRatio; \n    \n    if(length(uv - _pos) <= _rad)\n    {\n     \treturn true;   \n    }\n    return false; \n}\n\n//Sample Code Provided in 'Kernel' Class - Samples from image at x,y\nvec3 sample(const int x, const int y, in vec2 fragCoord, sampler2D _toSample)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n uv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n return texture(_toSample, uv).xyz;\n}\n\n//Sample Code Provided in 'Kernel' Class\nvec3 filter(in vec2 fragCoord, mat3 kernel, sampler2D _toSample)\n{\n vec3 sum = sample(-1, -1, fragCoord,_toSample) * kernel[0][0]\n + sample(-1, 0, fragCoord,_toSample) * kernel[0][1]\n + sample(-1, 1, fragCoord,_toSample) * kernel[0][2]\n + sample( 0, -1, fragCoord,_toSample) * kernel[1][0]\n + sample( 0, 0, fragCoord,_toSample) * kernel[1][1]\n + sample( 0, 1, fragCoord,_toSample) * kernel[1][2]\n + sample( 1, -1, fragCoord,_toSample) * kernel[2][0]\n + sample( 1, 0, fragCoord,_toSample) * kernel[2][1]\n + sample( 1, 1, fragCoord,_toSample) * kernel[2][2];\n \n return sum;\n}\n\n//Input Variables\nfloat circleRadius = 0.1; \nvec2 circlePos = vec2(0.5, 0.5);\n#define CHANGE_RADIUS true\n#define SHADER_TYPE 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 layer1; \n    vec4 layer2; \n    \n    float aspect = iResolution.y/iResolution.x; \n    vec2 fc = fragCoord; \n     \n    if(CHANGE_RADIUS)\n    \tcircleRadius += circleRadius*2.0 + cos(iTime* 3.) * circleRadius;\n    \n    if(SHADER_TYPE == 0)\n   \t\tlayer1 = vec4(filter(fc,blur, iChannel1),1.);\n    else if(SHADER_TYPE == 1)\n        layer1 = vec4(filter(fc,topSobel, iChannel1),1.);\n    else\n    \tlayer1 = vec4(filter(fc,emboss, iChannel1),1.);\n    \n         \n\n    \n    \n    vec2 mousepos= iMouse.xy/iResolution.xy;\n    mousepos.y *= aspect;\n    \n    if(ConatainedInCircle(fc, mousepos, circleRadius))\n    {\n        layer2 = vec4(filter(fc,sharpen,iChannel0),1.);\n    }\n    \n    //layer2 = circleColor;\n    vec4 Composite = mix(layer1, layer2, layer2.a);\n    fragColor = Composite; \n   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(1.0,0.0,1.0,1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}