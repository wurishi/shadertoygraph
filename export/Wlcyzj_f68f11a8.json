{"ver":"0.1","info":{"id":"Wlcyzj","date":"1609438537","viewed":382,"name":"5x3 Font demo","username":"levonchic","description":"5x3 Font bitmap with defined letter numbers & function for letter pixel access","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["bitmap","font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License (c) bitrate16\n// Something went wrong in process, so \n//  here is minecraft enchantment list:\n// #define GLITCH\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n#ifdef GLITCH\n    // Calculate what?\n    ivec2 res = ivec2(iResolution.xy / vec2(40, 60));\n    ivec2 px = ivec2(fragCoord.xy) / 10;\n    int letter = res.x * px.y + px.x + int(iTime * 4.0);\n    letter %= LETTERS;\n    px %= ivec2(4, 6);\n    fragColor = fontpix(px, letter);\n#else\n    // Scale to make pixels square\n    fragCoord *= iResolution.xy / vec2(max(iResolution.x, iResolution.y));\n    \n    // Scale resolution to fit 20 letters in a row\n    vec2 res = iResolution.xy / 79.0;\n    \n    // Calculate new frag coord to fot to calculated resolution\n    vec2 frag = fragCoord / res;\n    \n    // Calculate letter position\n    ivec2 pos = ivec2(frag / vec2(4.0, 6.0));\n    \n    // Calculate int pixel position in a single letter\n    ivec2 px = ivec2(frag.xy) % ivec2(4, 6);\n    \n    // Calculate letter number\n    int letter = pos.y * 10 + pos.x + int(iTime * 2.0);\n    \n    // Limit loop\n    letter %= LETTERS;\n    \n    // Color dat boi\n    fragColor = fontpix(px, letter);\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Font data\n\n#define LETTERS 57\n\n// Letters\n// 0                        25 26       35 36  38  40  42  44 45  47 48 49 50  52 53 54  56\n// v                        v  v        v  v   v   v   v   v  v   v  v  v  v   v  v  v   v\n// ABCDEFGHIJKLMNOPQRSTUVWXYZ  0123456789  []  <>  ()  {}  *  /\\  ,  -  .  '\"  +  =  :;  █\n\n#define A 0\n#define B 1\n#define C 2\n#define D 3\n#define E 4\n#define F 5\n#define G 6\n#define H 7\n#define I 8\n#define J 9\n#define K 10\n#define L 11\n#define M 12\n#define N 13\n#define O 14\n#define P 15\n#define Q 16\n#define R 17\n#define S 18\n#define T 19\n#define U 20\n#define V 21\n#define W 22\n#define X 23\n#define Y 24\n#define Z 25\n\n#define D0 26 // 0\n#define D1 27 // 1\n#define D2 28 // 2\n#define D3 29 // 3\n#define D4 30 // 4\n#define D5 31 // 5\n#define D6 32 // 6\n#define D7 33 // 7\n#define D8 34 // 8\n#define D9 35 // 9\n\n#define BRK0 36 // [\n#define BRK1 37 // ]\n\n#define ANG0 38 // <\n#define ANG1 39 // >\n\n#define PAR0 40 // (\n#define PAR1 41 // )\n\n#define BRC0 42 // {\n#define BRC1 43 // }\n\n#define MULT 44 // *\n\n#define SLASH0 45 // /\n#define SLASH1 46 // \\\n\n#define COMMA 47 // ,\n\n#define MINUS 48 // -\n\n#define DOT 49 // .\n\n#define QUOT 50 // '\n\n#define DQOUT 51 // \"\n\n#define PLUS 52 // +\n\n#define EQUALS 53 // =\n\n#define COLCOL 54 // :\n\n#define SEMCOL 55 // ;\n\n#define BLOCK 56 // █\n\nconst vec4[2] palette = vec4[2] (\n\tvec4(1.0, 1.0, 1.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 0.0)\n);\n\nconst int[27] matrix = int[27] (\n\t0x8a00160, 0x8b80e70, 0x45eb0394, 0xe06c097,\n\t0xd802e6b8, 0x2e0f7804, 0x7001100, 0x41d11ac0,\n\t0xed55a8b0, 0x183c0781, 0xc818047c, 0xa61f0726,\n\t0x2c0700c, 0xa70948f, 0x42840d8c, 0xf7a140,\n\t0x284050, 0xec0e739c, 0x3fdd5cea, 0x6ff173a,\n\t0x775d81ce, 0xc9bdf3e5, 0xef7bff7d, 0xe7f9ffef,\n\t0xaee3bf9f, 0x7dfafeb5, 0xfd\n);\n\nvec4 fontpix(ivec2 px, int letter) {\n    if (px.x < 0 || px.y < 0 || px.x >= 3 || px.y >= 5)\n        return palette[1];\n    \n    int pxv = px.y + px.x * 5 + letter * 15;\n    \n    if (pxv < 0 || pxv >= 15 * LETTERS)\n        return palette[1];\n    \n    int pind = pxv >> 5;\n    int bind = pxv & 31;\n\n    return palette[(matrix[pind] >> bind) & 1];\n}","name":"Common","description":"","type":"common"}]}