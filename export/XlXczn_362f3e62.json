{"ver":"0.1","info":{"id":"XlXczn","date":"1502986681","viewed":416,"name":"glass ball","username":"archibate","description":"a new version from https://www.shadertoy.com/view/4stXRN\nadded refraction.\nadded fresnel's law.\nadded ambient light.\nin order to make the ball seems like glass.\nalso added mouse handling.\nslide bar implemented.\ncool?","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","reflect","refract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* configuration settings: */\n//#define BIG_ETAS\t// uncomment to  allow glass eta larger than 2.00, smaller that 1.00, even negative!!!\n//#define FP_SLIDE\t// uncomment to  enable slider of fresnel power (FP below)\n\nfloat eta = 1.0 / 1.501;     /* from air to glass, relatived eta */\nfloat FP = 5.0;        /* fresnel power for general glass */\n\nvec4 ray(samplerCube bkgd, mat4 trans, mat4 inv) {\n\n\t// Sphere collision\n\tvec4 p = trans * vec4(0,0,0,1);\n\tfloat sqr_dis = dot(p.xy, p.xy);\n\n    if (sqr_dis < 0.99) {\n\t\t// calculate collision position\n\t\tvec3 norm = vec3(-p.x, -p.y, - sqrt(1.0 - sqr_dis));\n\t\tvec3 spec = reflect(vec3(0, 0, 1), norm);\n        vec3 refr = refract(vec3(0, 0, 1), norm, eta);\n\t\tvec4 ambient = vec4(0.09, 0.08, 0.07, 0.0);\n\t\tvec4 spec_light = texture(bkgd, (inv * vec4(spec, 0)).xyz);\n        vec4 refr_light = texture(bkgd, (inv * vec4(refr, 0)).xyz);\n\t\tfloat F = (1.0 - eta) * (1.0 - eta) / ((1.0 + eta) * (1.0 + eta));\n\t\t/* F is the fresnel ratio at 0 degrees */\n        float ratio = F + (1.0 - F) * pow(sqr_dis, FP);\n        /* note that sqr_dis = dis * dis = 1.0 - N dot D, where N = normal, D = ray direction */\n        return mix(refr_light, spec_light, ratio) + ambient;\n    \t/* anyway, CG's 1st law: something looks like real is real */\n\t}\n\n\treturn texture(bkgd, (inv * vec4(0,0,1,0)).xyz);\n}\n\nmat4 Transpose(mat4 v) {\n\treturn\n\t\tmat4(v[0].x, v[1].x, v[2].x, v[3].x,\n\t\t\t\tv[0].y, v[1].y, v[2].y, v[3].y,\n\t\t\t\tv[0].z, v[1].z, v[2].z, v[3].z,\n\t\t\t\tv[0].w, v[1].w, v[2].w, v[3].w);\n\n}\n\nvoid drawChar(inout vec4 color, vec2 coord, vec2 pos, vec2 size, int c)\n{\n    vec2 off = coord - pos;\n    if (off.x < 0.0 || off.y < 0.0 || off.x > size.x || off.y > size.y)\n        return;\n\n    off /= 40.0;\n    off.y = 1.0 - off.y;\n    off = vec2(c - c / 16 * 16, c / 16) + off;\n    off /= 16.0;\n    vec4 clr = texture(iChannel3, off);\n    if (clr.r > 0.3)\n    \tcolor = clr;\n}\n\nvoid drawDecimal(inout vec4 color, vec2 coord, vec2 pos, vec2 size, int d)\n{\n    drawChar(color, coord, pos, size, d + 48 /*'0'*/);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.x;\n\n\tvec2 y = normalize(vec2(uv.x, 1));\n\tvec2 x = normalize(vec2(-uv.y, 1));\n    \n    if (iMouse.y != 0.0 && iMouse.y < 40.0)    // inside ETA slide bar?\n    {\n        float val = iMouse.x / iResolution.x;\n\n#ifdef BIT_ETAS\n        eta = 1.0 / (40.0 * val - 20.0);  /* 1.0 / eta  varys in  [-20.0, 20.0) */\n#else\n        eta = 1.0 / (1.0 + val);          /* 1.0 / eta  varys in  [1.0, 2.0) */\n#endif\n    }\n#ifdef FP_SLIDE\n    else if (iMouse.y < 80.0)    // inside FP slide bar?\n    {\n        float val = iMouse.x / iResolution.x;\n        FP = 1.0 + 15.0 * val;    /* FP  varys in  [1.0, 16.0) */\n    }\n#endif\n    \n    if (fragCoord.y < 40.0)    // drawing ETA slide bar?\n    {\n        float offx = fragCoord.x / iResolution.x;\n        fragColor = vec4(mix(vec3(0.8, 0.8, 0.7), vec3(0.2, 0.3, 0.4), offx), 1);\n        float val = 1.0 / eta;\t/* convert realitive eta to glass' eta */\n        // draw eta on left side of slider bar\n#ifdef BIG_ETAS\n#define TEXT_OFFSET 40.0\n        drawDecimal(fragColor, fragCoord, vec2(0.0, 0.0), vec2(30.0, 40.0), int(0.1 * mod(val, 100.0)));\n#else\n#define TEXT_OFFSET 0.0\n#endif\n        drawDecimal(fragColor, fragCoord, vec2(TEXT_OFFSET + 0.0, 0.0), vec2(30.0, 40.0), int(mod(val, 10.0)));\n        drawChar(fragColor, fragCoord, vec2(TEXT_OFFSET + 30.0, 0.0), vec2(30.0, 40.0), 46 /*'.'*/);\n        drawDecimal(fragColor, fragCoord, vec2(TEXT_OFFSET + 60.0, 0.0), vec2(30.0, 40.0), int(10.0 * mod(val, 1.0)));\n        drawDecimal(fragColor, fragCoord, vec2(TEXT_OFFSET + 90.0, 0.0), vec2(30.0, 40.0), int(100.0 * mod(val, 0.1)));\n        return;\n        \n    }\n#ifdef FP_SLIDE\n    else if (fragCoord.y < 80.0)    // drawing FP slide bar?\n    {\n        float offx = fragCoord.x / iResolution.x;\n        fragColor = vec4(mix(vec3(0.8, 0.8, 0.7), vec3(0.2, 0.3, 0.4), offx), 1);\n        float val = FP;\n        int high_val = int(0.1 * mod(val, 100.0));\n        if (high_val != 0)\n        \tdrawDecimal(fragColor, fragCoord, vec2(0.0, 40.0), vec2(30.0, 40.0), high_val);\n        drawDecimal(fragColor, fragCoord, vec2(30.0, 40.0), vec2(30.0, 40.0), int(mod(val, 10.0)));\n        drawChar(fragColor, fragCoord, vec2(60.0, 40.0), vec2(30.0, 40.0), 46 /*'.'*/);\n        drawDecimal(fragColor, fragCoord, vec2(90.0, 40.0), vec2(30.0, 40.0), int(10.0 * mod(val, 1.0)));\n        return;\n    }\n#endif\n\n\tfloat angle = 0.7 * iTime + 2.4 * iMouse.x / iResolution.x;\n\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\tmat4 t = mat4(1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 3.0 + 0.3 * s, 1);\n\tmat4 tr = mat4(c, 0, s, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t-s,0, c, 0,\n\t\t\t0, 0, 0, 1);\n\n\tmat4 xr = mat4(1, 0, 0, 0,\n\t\t\t0, x.y, x.x, 0,\n\t\t\t0, -x.x, x.y, 0,\n\t\t\t0, 0, 0, 1) * t;\n\tmat4 yr = mat4(y.y, 0, y.x, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t-y.x, 0, y.y, 0,\n\t\t\t0, 0, 0, 1);\n\n\t// Cast a ray, see if we hit anything.\n\tfragColor = ray(iChannel2, yr * xr * t * tr,      // change iChannel[n], and enjoy it!\n\t\t\tTranspose(tr) * Transpose(t) * Transpose(xr) * Transpose(yr));\n}\n\n/* TODOs:\n * adding macro BIG_ETAS to control wheather enable larger & smaller etas.\n * adding another slide bar, for [code]float FP = 5.0;[/code] at 4.\n *(implementing a framework fot GLSL may be a good idea.)\n */","name":"Image","description":"","type":"image"}]}