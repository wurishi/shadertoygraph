{"ver":"0.1","info":{"id":"mdsGRX","date":"1682506671","viewed":72,"name":"Random noise functions","username":"WhiteWalrus518","description":"Random Noise functions\nPersonal use\nMostly uncredited borrowing anyways :)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["personaluse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n#define res iResolution\n#define t iTime\nvec2 rand2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\nfloat rand( float x){\n    return rand2(vec2(x, 10.0)).x;\n}\nvec2 proj(vec2 a,vec2 b){\n    return dot(a,b) / dot(b,b) * b;\n}\n\nfloat sinSum(float x, int oct){\n    float value = 0.0;\n    float aDecay = 1.2;\n    float fIncr = 1.7;\n    vec2 rand;\n    for(int i = 0; i < oct; i++){\n        rand = rand2(vec2(float(oct), float(i)));\n        value += pow(aDecay, float(i)) * sin(2.0 * pi * rand.x + pow(fIncr, float(i)) * x );\n    }\n    return value / ((1.0 - pow(aDecay, float(oct)) )/ (1.0 - aDecay));\n}\nvoid squareNoise(out float a, out float b, out float c, out float d, vec2 st){\n    vec2 fst = floor(st);\n    a = rand2(fst + vec2(0.0, 0.0)).x;\n    b = rand2(fst + vec2(1.0, 0.0)).x;\n    c = rand2(fst + vec2(1.0, 1.0)).x;\n    d = rand2(fst + vec2(0.0, 1.0)).x;\n}\nfloat LinearPlaneNoise(vec2 st){\n    float a,b,c,d;\n    squareNoise(a,b,c,d,st);\n    vec2 fr = fract(st);\n    return mix(mix(a,b, fr.x), mix(d,c,fr.x), fr.y);\n}\nfloat smootherBlockyPlaneNoise(vec2 st){\n    float a,b,c,d;\n    squareNoise(a,b,c,d,st);\n    vec2 fr = smoothstep(0.0, 1.0, fract(st));\n    return mix(mix(a,b, fr.x), mix(d,c,fr.x), fr.y);\n}\nfloat smoothBlockyPlaneNoise(vec2 st){\n    float a,b,c,d;\n    squareNoise(a,b,c,d,st);\n    vec2 fr = fract(st)*fract(st)*fract(st)*(fract(st)*(fract(st)*6.-15.)+10.);\n    return mix(mix(a,b, fr.x), mix(d,c,fr.x), fr.y);\n}\nfloat randomWaveNoise(vec2 st, int waves){\n    float minF,maxF;\n    float val = 0.0;\n    vec2 dir;\n    for(int i = 0; i < waves; i++){\n        dir = 0.5 - rand2(vec2(float(i)));\n        val += rand(float(2* i + waves)) * (1.0 + cos((length(proj(st, dir) * mix(-5.0, 20.0, rand(float(i))) + pi * rand(float(i + waves))))));\n    }\n    \n    return val / float(waves);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/res.xy;\n    float scale = 100.0;\n    vec2 st = scale*(fragCoord/res.y - (0.5 * res.x / res.y , 0.5));\n    vec3 col = vec3(0.0);\n    \n    /* // 1D noise\n    float yVal;\n    yVal = 1.0 - 2.0 * Rand2(vec2(floor(10.0*(st.x + t)), 0.0)).x;\n    yVal = sinSum(st.x + t, 8);\n    if(abs(st.y - yVal) < 0.1){col = vec3(1.0);\n    }\n    */\n    \n    //col = vec3(smoothBlockyPlaneNoise(st + t));\n    //if(randomWaveNoise(st + t,50) < 0.5){col = vec3(0.0);}else{col = vec3(1.0);}\n    col = vec3(rand2(floor(st)).x, rand2( floor(st) + vec2(10.0)).x, rand2(floor(st) - vec2(10.0)).x);\n    \n    col = col.rgb;\n    \n    // blockify\n    float bands = 1000.0;\n    col = floor(col * bands) / bands;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}