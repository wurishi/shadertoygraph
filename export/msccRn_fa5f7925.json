{"ver":"0.1","info":{"id":"msccRn","date":"1694670242","viewed":142,"name":"ooooh","username":"Yety","description":"This is pretty close to what i wanted to achieve.\n\nplay with columns and waves in Buffer C to get some nice effects. \nor swap from a circle distance function to any other distance function.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    uv.x -= .5;\n    uv.x *= aspect;\n    uv.x += .5;\n\n    vec4 arrow = texture(iChannel0, uv);\n    fragColor = texture(iChannel1, uv+arrow.yz);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 cuv = (uv-.5);\n    vec2 nuv = normalize(uv);\n    \n    vec4 v = vec4(0,0,0,0);\n    \n    //circle distance\n    float d = sqrt(cuv.x*cuv.x + cuv.y*cuv.y)*2.-.5;\n    //angle\n    float a = (atan(cuv.y, cuv.x)+3.14159)/2./3.14159;\n    \n    float d2 = (.125 - (d-.125) * (d-.125))*8.;\n    \n    if(d2 <= 0.)\n        fragColor = vec4(0,0,0,1);\n    else {\n        float d3 = d2 * d2;\n        fragColor = vec4(d3, d3 * nuv.x, d3 * nuv.y, a);\n    }\n   \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 cuv = (uv-.5);\n    vec2 nuv = normalize(uv);\n    \n    vec4 v = vec4(0,0,0,0);\n    \n    //line distance\n    float d = cuv.y*2.;\n    //x\n    float a = cuv.x;\n    \n    float d2 = d * d;\n    d2 = (.125 - d2)*8.;\n    \n    if(d2 <= 0.)\n        fragColor = vec4(0,0,0,1);\n    else {\n        float d3 = d2 * d2;\n        fragColor = vec4(d3, 0, d*2., a);\n    }\n   \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float modulo(float a, float b){\n   return (a)-(floor((a)/(b))*(b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //my goal is for buffer A to represent any distance function. maybe in the future it can include negative values.\n    //then this program should take any 0-1 values and produce an animation representing inward flow where inward means it heads toward the \n\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    //ichannel0 has yz component representing distance from the circle.\n    //x represents scalar distance from the circle\n    \n    //circle distance function\n    vec4 arrow = texture(iChannel0, uv);\n    //line distance function\n    //vec4 arrow = texture(iChannel1, uv);\n    float d = arrow.x;\n    float dx = arrow.y;\n    float dy = arrow.z;\n    float angle = arrow.w;\n    \n    float columns = 100.;\n    float waves = 25.;\n\n    float arrowColumns  = mod(angle*columns, 1.)-.5;\n    int arrowIndex = int(angle*columns);\n    \n    if(arrowColumns < 0.)\n        arrowColumns *= -1.;\n    arrowColumns = sqrt(arrowColumns);\n    \n\n    \n    //rolling value 0-1\n    float roll = modulo(iTime-d-float(arrowIndex)/(columns/waves), 1.)-.5;\n    \n    float roll2 = roll * roll;\n    \n    float redVal = roll2*d;\n    \n\n\n    if(arrow.x > 0.)\n        // Output to screen\n        fragColor = vec4(redVal, redVal*dx,redVal*dy,1.);\n    else \n        fragColor = vec4(0.,0.,0.,0.);\n}","name":"Buffer C","description":"","type":"buffer"}]}