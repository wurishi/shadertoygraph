{"ver":"0.1","info":{"id":"7lSyzR","date":"1649009647","viewed":83,"name":"bouncing ball at dusk","username":"mnopqr1","description":"following first part of https://www.youtube.com/watch?v=Cfe5UQ-1L9Q","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdElipsoid( in vec3 pos, vec3 rad )\n{\n    float k0 = length(pos/rad);\n    float k1 = length(pos/rad/rad);\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdGuy( in vec3 pos )\n{\n    float t = fract(iTime);\n    float y = 4.0 * t * (1.0 - t);\n    float dy = 4.0*(1.0 - 2.0*t);\n    \n    // vec2 u = normalize(vec2(1.0, -dy));\n    // vec2 v = normalize(vec2(dy, 1.0));\n    \n    vec3 cen = vec3(0.0, y, 0.0);\n    \n    float sy = 0.75 + 0.25 * y;\n    float sz = 1.0/sy;\n    vec3 rad = vec3(0.25,0.25*sy,0.25*sz);\n    \n    vec3 q = pos-cen;\n    \n    //q.yz = vec2(dot(u,q.yz), dot(v,q.yz));\n    return sdElipsoid(q,rad);\n    //return length(pos - cen) - 0.25;\n}\n\nfloat map( in vec3 pos )\n{\n    float d1 = sdGuy(pos); //sphere\n    \n    float d2 = pos.y - (-0.25); //plane\n    \n    return min(d1,d2); //intersection\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize( vec3(map(pos+e.xyy)-map(pos-e.xyy),\n                           map(pos+e.yxy)-map(pos-e.yxy),\n                           map(pos+e.yyx)-map(pos-e.yyx) ) );\n}\n\nfloat castRay( in vec3 ro, vec3 rd )\n{\nfloat t = 0.0;\n    for ( int i=0; i<100; i++ )\n    {\n        vec3 pos = ro + t * rd;\n        \n        float h = map( pos );\n        if ( h < 0.001 )\n            break;\n            \n        t += h;\n        \n        if ( t > 20.0 )\n            break;\n    }\n    if (t > 20.0) t = -1.0;\nreturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float an = 10.0 * iMouse.x/iResolution.x; //0.1*iTime;\n    \n    \n    vec3 ta = vec3(0.0, 0.5, 0.0); // target point\n    vec3 ro = ta + vec3(1.5*sin(an),0.0,1.5*cos(an)); // camera position\n\n    vec3 ww = normalize( ta-ro );\n    vec3 uu = normalize( cross(ww, vec3(0,1,0)) );\n    vec3 vv = normalize( cross(uu, ww) );\n    \n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n    vec3 col = vec3(0.5,0.55,1.0) - 0.5*rd.y;\n    \n    col = mix( col, vec3(1.0, 0.75, 0.8), exp(-10.0*rd.y) );\n    \n    float t = castRay( ro, rd );\n    if (t > 0.0)\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 mate = vec3(0.18); // base color for the objects\n        \n        vec3 sun_dir = normalize(vec3(0.8,0.4,0.2));\n        vec3 sky_dir = vec3(0.0,1.0,0.0);\n        float sun_dif = clamp ( dot(nor,sun_dir), 0.0, 1.0 );\n        float sun_sha = step(castRay( pos + nor*0.001, sun_dir ), 0.0);\n        float sky_dif = clamp ( 0.5 + 0.5 * dot(nor, sky_dir), 0.0, 1.0);\n        float bou_dif = clamp ( 0.5 + 0.5 * dot(nor, vec3(0.0,-1.0,0.0)), 0.0, 1.0);\n        \n        col = mate*vec3(9.0, 4.5, 3.0)*sun_dif*sun_sha;\n        col += mate*vec3(0.5, 0.8, 0.9)*sky_dif;\n        col += mate*vec3(0.7, 0.3, 0.2)*bou_dif;\n    }\n\n    col = pow( col, vec3(0.4545) ); // gamma correction\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}