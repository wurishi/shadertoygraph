{"ver":"0.1","info":{"id":"Dt3yz2","date":"1699397785","viewed":29,"name":"Sphere Raytrace","username":"userman","description":"Basic sphere illuminated by a point light.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","light","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 origin = vec3(0.0, 0.0, 0.0);\nconst float dof = 1.0; \nconst float vw = 2.0; \nconst float vh = 1.0;\n\n\nstruct Sphere {\n\n    vec3 c;\n    float r;\n    \n};\n\n\nstruct Ray {\n\n    vec3 a;\n    vec3 b;\n    \n};\n\n\nfloat checkIntersect(Ray ray, Sphere sp) {\n\n    float A = dot(ray.b, ray.b);\n    float B = 2.0 * dot(ray.b, (ray.a - sp.c));\n    float C = dot(ray.a - sp.c, ray.a - sp.c) - sp.r * sp.r;\n    \n\n    float discrim = B * B - 4.0 * A * C;\n    \n    \n    \n    if (discrim <= 0.0001) {\n        return -1.0;\n    }\n    \n    float sqrtd = sqrt(discrim);\n\n    float neg = (-B - sqrtd) / 2.0 * A;\n    float pos = (-B + sqrtd) / 2.0 * A;\n    \n    return min(neg, pos);\n    \n}\n  \n\n\nRay makeRay(vec2 fragCoord) {\n    vec2 halfIRes = iResolution.xy * 0.5;\n    vec2 uv = (fragCoord - halfIRes) / halfIRes; \n    uv.x *= iResolution.x / iResolution.y; \n\n    vec3 dir = vec3(uv.x, uv.y, dof);\n    dir = normalize(dir);\n\n    return Ray(origin, dir);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) \n{\n    // scale down iTime float\n    \n    // make and position point light, sphere, ray.\n    vec3 pLight = vec3(sin(iTime / 10.0) * 10.0, 8.0, -8.0);\n    Sphere sp = Sphere(vec3(0.0,cos(iTime / 2.0),5.0), 3.0);\n    Ray ray = makeRay(fragCoord);\n    \n    \n    // check for some t, if there is a t such that (t < 0), the ray has an intersection\n    float t = checkIntersect(ray, sp);\n    \n    if (0.0 < t) {\n    \n        vec3 p = ray.a + ray.b * t;\n        vec3 n = normalize(p - sp.c);\n\n        vec3 dToLight = normalize(pLight - p); \n\n        float diff = smoothstep(0.0, 1.0, dot(dToLight, n)) - 0.3; \n\n        fragColor = vec4(diff, diff, diff, 1.0); \n\n\n    } else {\n    \n        vec2 uv = fragCoord/iResolution.xy;\n\n        // Time varying pixel color\n        vec3 col = 0.5 + 0.5*cos(iTime/6.0+uv.xyx+vec3(0,2,4));\n\n        // Output to screen\n        fragColor = vec4(col,1.0) / 6.0;\n\n   }\n   \n}","name":"Image","description":"","type":"image"}]}