{"ver":"0.1","info":{"id":"Mc2cRd","date":"1722875375","viewed":31,"name":"Osciladores 2.5","username":"jpupper","description":"//2.5\n//Ondas anidadas\n//Taller de Livecoding con visuales en GLSL ","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","sin","cos","shaders","shaders","livecoding","functions","taller","tutoriales","osciladores"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//2.5\n//Ondas anidadas\n//Taller de Livecoding con visuales en GLSL \n\n\n//COMO EL NUMERO PI NO VIENE INCLUDO EN GLSL LO DEFINIMOS MANUALMENTE.\n//Utilizamos la estructura #define para definir constantes en el programa.\n#define PI 3.14159265359\n#define resolution iResolution\n#define time iTime \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / resolution.xy; //Obtengo las coordenadas UV(coordenadas cartesianas.\n\n    //Probar cambiar el numero 10 en las distintas senoidales para ver como influye la frecuencia de las ondas.\n    float formafinal = sin(uv.x*10.*PI+time\n                            +sin(uv.y*2.*PI+time\n                            +sin(uv.x*20.*PI-time \n                            +sin(uv.y*5.*PI-time\n                            +sin(uv.x*2.*PI-time\n                            +sin(uv.y*1.*PI-time)\n                            +sin(uv.x*10.*PI-time))))))*0.5+0.5;\n    \n    fragColor = vec4(vec3(formafinal),1.0); \n\n}","name":"Image","description":"","type":"image"}]}