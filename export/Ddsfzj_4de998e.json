{"ver":"0.1","info":{"id":"Ddsfzj","date":"1688963043","viewed":34,"name":"party waves","username":"AntonJeva","description":"waves of random colors from random positions","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//variables to play with\n#define scale 3.\n#define speed .15\n\n#define deviance .15\n\n#define In_scale .3\n#define Out_scale .9\n\n//distance\nfloat dist(vec2 p1, vec2 p2) {\n    vec2 d = p1-p2;\n    d.x *= d.x;\n    d.y *= d.y;\n    return sqrt(d.x + d.y);\n}\n\n//random position\nvec2 pos(float t) {\n    return normalize(vec2(sin(t*99.)*1234., cos(t*99.)*431.))*deviance;\n}\n\n//gradient by time and distance\nfloat pulse(vec2 uv, float t, float id) {\n\n    vec2 point = pos(id);\n    float d = dist(uv, point)-t;\n    \n    return d;\n}\n\n//color at the inside of a pulse\nvec3 colIn(float t) {\n    return normalize(vec3(sin(t*100.)*.5+.5, cos(t*95.)*.6+.5, sin(t*91.)*.7+.5))*In_scale;\n}\n//color at the outside of a pulse\nvec3 colOut(float t) {\n    return normalize(vec3(sin(t*230.)*.8+1., cos(t*395.)*.7+1., sin(t*191.)*.7+1.))*Out_scale;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord.xy/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= scale;\n    \n    float t = iTime*speed;\n    vec3 col = vec3(0.);\n    \n    //place each pulse\n    for (float i = floor(t)-scale; i < floor(t)+scale; i++) {\n        if (i < 1.) continue;//black in th beginning\n        \n        float np = pulse(uv, t-i, i);\n        \n        //mixing the colors\n        if (np <= 1.) {\n            col = mix(colIn(i), colOut(i), np);\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}