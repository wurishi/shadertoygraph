{"ver":"0.1","info":{"id":"MlByRD","date":"1507631469","viewed":1485,"name":"fwidth vs. pxsize AA","username":"mskr","description":"This shader experiments with anti-aliasing of distance field shapes/curves aka. implicit functions. I asked, why fwidth does a bad job and received several useful comments, thanks!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","antialiasing","curve","function","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Coordinate system\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    \n    // Pixel size\n    float PXSIZE = 1./iResolution.x;\n    \n    // Variables to store unsigned distance value and anti-aliasing factor\n    float udCurve, aaf;\n    \n    // Render curve using pixelsize-based anti-aliasing\n    udCurve = abs(p.y - sin(p.x));\n    aaf = 3. * PXSIZE;\n\tfragColor = mix(vec4(1), vec4(0), smoothstep(0., aaf, udCurve));\n    \n    // Render curve using fwidth-based anti-aliasing\n    udCurve = p.y - sin(p.x) + .2;\n    aaf = fwidth(udCurve); // pre-discontinuaty metric\n    udCurve = abs(udCurve); // as proposed by FabriceNeyret2\n\tfragColor += mix(vec4(1), vec4(0), smoothstep(0., aaf, udCurve));\n}","name":"Image","description":"","type":"image"}]}