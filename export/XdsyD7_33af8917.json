{"ver":"0.1","info":{"id":"XdsyD7","date":"1488488212","viewed":154,"name":"Phong sphere","username":"srn","description":"a simple phong shaded sphere with a sinus generated bumpmapping.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["phong","sphere","bump"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":" vec3 lightSource = vec3(10.0,10.0,-10.5);\nconst vec3 v = vec3(0.0,0.0,-10.0);\nconst vec4 ambient = vec4(0.1,0.1,0.1,1.0);\nconst vec4 diffuse = vec4(0.6,0.6,0.6,1.0);\nconst vec4 specular = vec4(0.9,0.9,0.9,1.0);\nfloat shininess = 180.0;\n\n\nvec4 phong(vec3 normal, vec4 color) {\n   // see https://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/lighting.php \n   vec3 L = normalize(lightSource - v);   \n   vec3 E = normalize(-v); \n   vec3 R = normalize(-reflect(L,normal));  \n \n   //calculate Ambient Term:  \n   vec4 Iamb = ambient;    \n\n   //calculate Diffuse Term:  \n   vec4 Idiff = diffuse * max(dot(normal,L), 0.0);\n   Idiff = clamp(Idiff, 0.0, 1.0);     \n   \n   // calculate Specular Term:\n   vec4 Ispec = specular \n                * pow(max(dot(R,E),0.0),0.3*shininess);\n   Ispec = clamp(Ispec, 0.0, 1.0); \n   // write Total Color:  \n    vec4 p =Iamb + Idiff + Ispec;\n    \n    vec4 r = color;\n    r.x *= p.x;\n    r.y *= p.y;\n    r.z *= p.z;\n    \n    return r;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n  //  lightSource = vec3(cos(iTime)*10.0, 10.5, sin(iTime)*10.5);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float bias = iResolution.x/iResolution.y;\n    \n   uv.x*=iResolution.x/iResolution.y;\n    \n    vec2 middle= vec2(0.5*iResolution.x/iResolution.y,0.5);\n \n    \n    float len = length(middle - uv);\n    \n    if(length(middle - uv) < 0.3) {\n\t   float z = sqrt(abs((len)*(len) - 0.09));\n        vec3 norm = normalize(vec3(uv.xy, z)-vec3(middle.xy,0.0));\n        \n        float su =  atan(norm.z, norm.x) / 3.1415*2.0 + iTime / 5.0;\n\t\tfloat sv = asin(norm.y)/3.14+0.5;\n        \n        vec4 color = texture(iChannel0, vec2(su,sv));\n        \n        // try random bumping\n        norm.x += sin((su)*40.0)/4.;\n        norm.y += sin(sv  *40.0 )/4.;\n        \n        fragColor = phong(normalize(norm), color);\n        \n     \n        \n    } else {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n  \n}","name":"Image","description":"","type":"image"}]}