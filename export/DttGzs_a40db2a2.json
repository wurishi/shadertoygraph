{"ver":"0.1","info":{"id":"DttGzs","date":"1682948223","viewed":88,"name":"Bilateral Filter (noise removal)","username":"calebxcaleb","description":"Bilateral filter of image","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 texCol = texture(iChannel0, uv);\n    \n    int radius = 10;\n    float pi = 3.1415926;\n    float sigmaS = 2.;\n    float sigmaI = 1.5;\n    float mult = 15.;\n    \n    vec4 bilateralSum = vec4(0.);\n    \n    for(int x = -radius; x <= radius; x++){\n        for(int y = -radius; y <= radius; y++){\n            vec2 newUV = (fragCoord + vec2(x,y))/iResolution.xy;\n            vec4 newTexCol = texture(iChannel0, newUV);\n            \n            float spacialDiff = sqrt(pow(float(x), 2.) + pow(float(y), 2.));\n            float spacial = (exp(-(pow(spacialDiff, 2.)) / (2. * pow(sigmaS, 2.))) / (2. * pi * pow(sigmaS, 2.)));\n            \n            vec4 intensityDiff = abs(texCol - newTexCol);\n            vec4 intensity = vec4(0.);\n            \n            intensity.x = (exp(-(pow(intensityDiff.x, 2.)) / (2. * pow(sigmaI, 2.))) / (2. * pi * pow(sigmaI, 2.)));\n            intensity.y = (exp(-(pow(intensityDiff.y, 2.)) / (2. * pow(sigmaI, 2.))) / (2. * pi * pow(sigmaI, 2.)));\n            intensity.z = (exp(-(pow(intensityDiff.z, 2.)) / (2. * pow(sigmaI, 2.))) / (2. * pi * pow(sigmaI, 2.)));\n            intensity.w = (exp(-(pow(intensityDiff.w, 2.)) / (2. * pow(sigmaI, 2.))) / (2. * pi * pow(sigmaI, 2.)));\n            \n            bilateralSum += mult * newTexCol * spacial * intensity;\n        }   \n    }\n    \n\n    if(uv.x < 0.5){\n        fragColor = vec4(texCol);\n    } else {\n        fragColor = vec4(bilateralSum);\n    }\n}","name":"Image","description":"","type":"image"}]}