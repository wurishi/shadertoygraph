{"ver":"0.1","info":{"id":"MttSDj","date":"1481709992","viewed":92,"name":"Mandelbrot or something","username":"hmry","description":"Aka. Floating Point Imprecision: The Shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define zoomSpeed 0.3\n#define offset vec2(0.3, 0.025018)\n#define maxiterations 300\n\n#define scale (pow(0.5, iTime * zoomSpeed) * 5.0)\n#define csquared(c) vec2(c.x * c.x - c.y * c.y, 2.0 * c.x * c.y)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord.xy / iResolution.xy * 2.0 - vec2(1.0, 1.0)) * vec2(scale, iResolution.y / iResolution.x * scale) + offset;\n    \n    vec2 z = pos;\n    bool escaped = false;\n    for (int i = 0; i < maxiterations; i++) {\n        z = csquared(z) + pos;\n        if (length(z) > 2.0) {\n        \tescaped = true;\n            break;\n        }\n    }\n    \n\tfragColor = vec4(z.x, z.y, escaped ? length(z) / 4.0 : 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}