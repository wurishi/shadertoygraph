{"ver":"0.1","info":{"id":"NdK3zK","date":"1631807695","viewed":54,"name":"Cam's Moving Orb w/Lighting","username":"cam93","description":"demonstration of a moving orb with lighting sphere with lighting.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spherelightlightbulbblinkingflickering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Material{\n\nvec3 color;\nvec3 ambient;\nvec3 diffuse;\nvec3 specular;\nfloat shininess;\n\n};\n\nstruct Sphere{\n\nvec3 centre;\nfloat radius;\nMaterial mat;\n\n};\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x/iResolution.y;\n    uv.x*=aspectRatio;\n    \n    float darkest = max(sin(iTime),0.2);\n     float brightest = min(sin(iTime),0.2);\n    float rot = cos(iTime*10.0);\n    \n    Sphere sph;\n    sph.centre = vec3(sin(iTime)*0.9, cos(iTime)*1.0,cos(iTime)*5.0);\n    sph.radius = 0.1;\n    sph.centre.x *= aspectRatio;\n    \n    sph.mat.color = vec3(1.0,0.0,0.0);\n    sph.mat.ambient = vec3(0.15+(darkest*brightest),0.15,0.15);\n    sph.mat.diffuse = vec3(0.5,0.5,0.5);\n    sph.mat.specular = vec3(0.8,0.8,0.8);\n    sph.mat.shininess = 10.0;\n    \n    vec3 camera = vec3(0.5, 0.5, 0.0);\n    \n    vec3 lightPosition = vec3(sin(iTime*5.0)*5.0,5.0,cos(iTime)*-1.0);\n    vec3 lightColor = vec3(1.0,1.0,1.0);\n\n    vec3 col = vec3(0.0);\n   \n    \n    if(length(uv - sph.centre.xy)<=sph.radius){\n    vec3 ambient = vec3(0.0);\n    vec3 diffuse = vec3(0.0);\n    vec3 specular = vec3(0.0);\n    \n    ambient = sph.mat.color*sph.mat.ambient*lightColor;\n    \n    float pseudo_z = sph.centre.z - sqrt(pow(sph.radius, 2.0) - pow(uv.y - sph.centre.y, 2.0));\n    \n    vec3 uv_3D = vec3(uv, pseudo_z);\n    \n    vec3 normal = normalize(uv_3D - sph.centre);\n    vec3 lightDirection = normalize(lightPosition - uv_3D);\n    \n    float diff = max(dot(normal, lightDirection),0.0);\n    diffuse = sph.mat.color * sph.mat.diffuse * lightColor * diff;\n    \n    vec3 viewDirection = normalize(camera - uv_3D);\n    vec3 reflDirection = reflect(-lightDirection, normal);\n    \n    float spec = pow(max(dot(viewDirection, reflDirection),0.0), sph.mat.shininess);\n    specular = sph.mat.color*sph.mat.specular*lightColor*spec;\n    \n    col = ambient + diffuse + specular;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}