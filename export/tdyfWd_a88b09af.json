{"ver":"0.1","info":{"id":"tdyfWd","date":"1609115786","viewed":330,"name":"fun hills","username":"CubeyTheCube","description":"unfinished","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["hills"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 rotationX( in float angle) {\n  return mat4(1.0, 0, 0, 0,\n    0, cos(angle), -sin(angle), 0,\n    0, sin(angle), cos(angle), 0,\n    0, 0, 0, 1);\n}\n\nmat4 rotationY( in float angle) {\n  return mat4(cos(angle), 0, sin(angle), 0,\n    0, 1.0, 0, 0,\n    -sin(angle), 0, cos(angle), 0,\n    0, 0, 0, 1);\n}\n\nmat4 rotationZ( in float angle) {\n  return mat4(cos(angle), -sin(angle), 0, 0,\n    sin(angle), cos(angle), 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n}\nvec3 rotate( in vec3 p, in float xrot, in float yrot, in float zrot) {\n  vec4 rot = vec4(p, 1.0) * rotationX(xrot) * rotationY(yrot) * rotationZ(zrot);\n  return rot.xyz; // ref https://gist.github.com/onedayitwillmake/3288507\n}\nfloat random( in vec2 st) {\n  return fract(sin(dot(st.xy,\n      vec2(12.9898, 78.233))) *\n    43758.5453123);\n}\nfloat noise( in vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n\n  vec2 u = f * f * (3.0 - 2.0 * f);\n\n  return mix(a, b, u.x) +\n    (c - a) * u.y * (1.0 - u.x) +\n    (d - b) * u.x * u.y;\n}\nfloat fbm( in vec2 p) { // ref https://thebookofshaders.com/13/\n  float y = 0.;\n  float f = 0.007;\n  float a = 0.5;\n  for (int i = 0; i < 10; i++) {\n    y += a * noise(f * p * 100.);\n    f *= 2.0;\n    a *= 0.5;\n  }\n  return y;\n}\nfloat terrain( in vec2 p) {\n  return fbm(p) * 2.0;\n}\nfloat raymarch( in vec3 ro, in vec3 rd, in int w) {\n  #define dt 0.05\n  vec3 p;\n  float h;\n  float t = 0.;\n  float dist;\n  for (int i = 0; i < 64; i++) {\n    p = ro + rd * t;\n    h = terrain(vec2(p.x, p.z));\n    dist = (p.y - h) / 2.;\n    if(w == 1) {\n      dist = min(dist,abs(0.7-p.y));\n    }\n    t += dist;\n\n  }\n  return t;\n}\n\nfloat fresnel( in vec3 i, in vec3 n, in float eta) {\n  float r0 = (1.-eta)/(1.+eta);\n  r0 *= r0;\n  return clamp(0.0,1.0,r0 + (1. - r0) * pow((1. - clamp(0.,1.,dot(i, n))), 5.0));\n}\nvec3 normal( in vec2 pos) {\n  vec2 e = vec2(0.03, 0.0);\n  return normalize(vec3(terrain(pos - e.xy) - terrain(pos + e.xy),\n    2.0 * e.x,\n    terrain(pos - e.yx) - terrain(pos + e.yx)));\n}\n\nvec3 interpolate(vec3 a, vec3 b, float t) {\n  return mix(a, b, clamp(t, 0.0, 1.0));\n}\nfloat ggx( in float a, in float cosine) {\n  return (a * a) / (3.14159265 * pow(cosine * cosine * (a * a - 1.) + 1., 2.0));\n}\nvec3 bgcol( in vec2 uv) {\n  float len = length(vec2(uv.x, uv.y * iResolution.y / iResolution.x) - vec2(0.2, 0.2));\n  float sun;\n  if (abs(len) > 0.4) {\n    sun = ggx(0.3, 0.0);\n  } else {\n    float dotProd = 1. - 2. * len;\n    sun = ggx(0.3, dotProd);\n  }\n  return min(vec3(1., 1., 1.), mix(vec3(52., 82., 235.) / 255., vec3(135., 206., 235.) / 255., 0.5 - uv.y) + vec3(1.0, 1., 0.) * sun);\n\n} // sun and sky\n\nvec3 fullBcol( in vec2 uv, in vec3 o, in vec3 d, inout vec3 bcol) {\n  vec2 cloudUV = 0.00002 * (o.xz + d.xz * ((3.) * 40000.0 - o.y) / d.y); // ref https://www.shadertoy.com/view/Msdfz8\n  cloudUV.y += iTime * 0.7;\n  bcol = bgcol(uv * 0.5 * iResolution.y / iResolution.x + vec2(d.x, d.y));\n  vec3 bcol2 = bcol;\n  bcol = interpolate(bcol, vec3(1.0), 2.5 * pow(fbm(cloudUV), 5.));\n  bcol = interpolate(bcol2, bcol, d.y * 4.0);\n  return bcol;\n} // sun, sky, and clouds\nvec3 scol( in float y) {\n  vec3 sc;\n  if (y < .9)\n    sc = vec3(0.486, 0.988, 0.0);\n  else if (y < 1.2)\n    sc = interpolate(vec3(0.486, 0.988, 0.0), vec3(0.341, 0.231, 0.047), (y - 1.) / 0.1);\n  else\n    sc = interpolate(vec3(0.341, 0.231, 0.047), vec3(1.0), (y - 1.3) / 0.1);\n  return sc;\n} // terrain color\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 col, bcol;\n  vec2 uv = fragCoord / iResolution.xy - vec2(0.5);\n  vec2 mouse = iMouse.xy / iResolution.xy - vec2(0.5);\n  vec3 o = vec3(0., 2., iTime);\n  vec3 d = normalize(vec3(uv.x, uv.y - 0.2, 1.0));\n  d = rotate(d, -mouse.y, mouse.x, 0.0);\n  float t = raymarch(o, d, 1);\n  vec3 i = o + d * t;\n  vec3 l = -normalize(vec3(vec2(.2, .2)-i.xy, 1.0-(i.y-o.y)));\n  vec3 n = normal(i.xz);\n  //n = normalize(n + 0.4 * vec3(random(n.xy * 100.), random(n.yz * 100.), random(n.zx * 100.)));\n  float shade = dot(n, l);\n  vec3 sc;\n  if (i.y < .71) {\n    n = vec3(0.,1.,0.);\n    vec3 r = reflect(d,n);\n    vec3 rf = refract(d, n, 3.);\n    float t2 = raymarch(i, r, 0);\n    vec3 rcol;\n    vec3 rfcol;\n    vec3 bcol2;\n    vec3 i2;\n    vec3 n2;\n    vec3 l2;\n    if (t2 > 16.) {\n      rcol = mix(vec3(52., 82., 235.) / 255., vec3(135., 206., 235.) / 255., .5 - r.y);\n    } else {\n      i2 = i + r * t2;\n      n2 = normal(i2.xz);\n      l2 = -normalize(vec3(vec2(.2, .2)-i2.xy, 1.0-(i2.y-i.y)));\n      rcol = scol(i2.y) * dot(n2, l2);\n    }\n    t2 = raymarch(i, rf, 0);\n      if (t2 > 16.) {\n      rfcol = mix(vec3(52., 82., 235.) / 255., vec3(135., 206., 235.) / 255., 0.5 - r.y);\n    } else {\n      i2 = i + rf * t2;\n      n2 = normal(i2.xz);\n      l2 = -normalize(vec3(vec2(.2, .2)-i2.xy, 1.0-(i2.y-i.y)));\n      rfcol = scol(i2.y) * dot(n2, l2);\n    }\n    float fres = fresnel(d, -n, 3.);\n    col = mix(mix(rfcol,rcol,fres),vec3(0.0,0.0,1.0)*dot(n,l),0.5);\n  } else {\n    sc = scol(i.y);\n\n    col = sc * shade;\n  }\n\n  if (t > 16.) {\n    col = fullBcol(uv, o, d, bcol);\n    col = interpolate(col, bcol, (min(20., t) - 16.0) / 4.0);\n  }\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}