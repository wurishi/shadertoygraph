{"ver":"0.1","info":{"id":"DtlfWH","date":"1692913594","viewed":149,"name":"jpeg compression shader","username":"HoosierTransfer","description":"jpeg compression\n\n","likes":4,"published":1,"flags":32,"usePreview":1,"tags":["jpegcompression"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float PI = acos(-1.0);\n#define SQRT2 0.70710678118\n\nfloat dct(vec2 k, vec2 x) {\n    return cos(PI*k.x*x.x)*cos((PI*k.y*x.y));\n}\n\nmat3 rgb_to_ycbcr = mat3(\n    0.299, -0.168736, 0.5,\n    0.587, -0.331264, -0.418688,\n    0.144, 0.5, -0.081312\n);\n\nvec3 rgb_to_ycbcr_offset = vec3(0., .5, .5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 k = mod(fragCoord, 8.)- .5;\n    vec2 block = fragCoord - .5 - k;\n    \n    vec3 col = vec3(0);\n    for (int x = 0; x < 8; x++) {\n        for (int y = 0; y < 8; y++) {\n            col += ((texture(iChannel0, (block + vec2(x, y) - 0.5) / iResolution.xy).xyz - 0.5)) * dct(k, (vec2(x, y) + 0.5) / 8.) * (k.x<.5?SQRT2:1.) * (k.y<.5?SQRT2:1.);\n        }\n    }\n    \n    fragColor = vec4(col/4.,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define NUM_LEVELS 8.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    int[] Q = int[] (\n        16, 11, 10, 16, 24, 40, 51, 61,\n        12, 12, 14, 19, 26, 58, 60, 55,\n        14, 13, 16, 24, 40, 57, 69, 56,\n        14, 17, 22, 29, 51, 87, 80, 62,\n        18, 22, 37, 56, 68, 109, 103, 77,\n        24, 35, 55, 64, 81, 104, 113, 92,\n        49, 64, 78, 87, 103, 121, 120, 101,\n        72, 92, 95, 98, 112, 100, 103, 99\n    );\n    \n    int[] C = int[] (\n        17, 18, 24, 47, 99, 99, 99, 99,\n        18, 21, 26, 66, 99, 99, 99, 99,\n        24, 26, 56, 99, 99, 99, 99, 99,\n        47, 66, 99, 99, 99, 99, 99, 99,\n        99, 99, 99, 99, 99, 99, 99, 99,\n        99, 99, 99, 99, 99, 99, 99, 99,\n        99, 99, 99, 99, 99, 99, 99, 99,\n        99, 99, 99, 99, 99, 99, 99, 99\n    );\n    \n    int block = (int(fragCoord.x) % 8) * 8 + int(fragCoord.y) % 8;\n\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    //col.x /= Q[block];\n    //col.yz /= C[block];\n    fragColor = vec4(round(col / 8. * NUM_LEVELS)/NUM_LEVELS*8., 1);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float PI = acos(-1.0);\n#define SQRT2 0.70710678118\n\nfloat dct(vec2 k, vec2 x) {\n    return cos(PI*k.x*x.x)*cos((PI*k.y*x.y));\n}\n\nmat3 rgb_to_ycbcr = mat3(\n    0.299, -0.168736, 0.5,\n    0.587, -0.331264, -0.418688,\n    0.144, 0.5, -0.081312\n);\n\nvec3 rgb_to_ycbcr_offset = vec3(0., .5, .5);\n\nmat3 ycbcr_to_rgb = mat3(vec3(1.), vec3(0., -.344136, 1.772), vec3(1.402, -.714136, 0.));\nvec3 ycbcr_offset_to_rgb = vec3(0., -.5, -.5);\n\n#define num_freq 8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 k = mod(fragCoord, 8.)- .5;\n    vec2 block = fragCoord - k - .5 ;\n    \n    vec3 col = vec3(0);\n    for (int x = 0; x < num_freq; x++) {\n        for (int y = 0; y < num_freq; y++) {\n            col += texture(iChannel0, (block + vec2(x, y) + .5) / iResolution.xy).xyz * dct(vec2(x, y), (k+.5)/8.) * (x==0?SQRT2:1.) * (y==0?SQRT2:1.);\n        }\n    }\n    \n    fragColor = vec4((((col)/4.) + 0.5),1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}