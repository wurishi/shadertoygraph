{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n#define TILE_W 15.0\n\n// cosine(theta/2) where theta is the angle of the arrowhead\n#define COS_HALF 0.9659 \n\n\nvec2 field(vec2 uv) {\n    // some stuff that I made up\n    vec4 tex = texture(iChannel0,uv);\n    float gx = -10.0*dot(uv,uv)*tex.x*cos(uv.x-.9);\n    float gy = 2.7*cos(tex.y*uv.y*0.3);\n\treturn vec2(gx,gy);\n}\n\nfloat sd2circle(vec2 d,float R) {\n    return dot(d,d)-R*R;\n}\n\n// returns true if p is within arrowhead located at the origin,\n// with angle 0 (facing to the right). \n// arrowhead has coordinates a=(m,-h), b=(-m,-h), c=(h,0)\n// where m is determined by the angle of the head. Total length of arrowhead is 2h\nbool inArrow(vec2 p, float h) {\n    float hp = (h-p.x);//height of triangle formed by p and x axis\n    float r=hp/COS_HALF;\n\treturn (abs(p.x)<=h && (p.y*p.y+hp*hp<=r*r));\n}\n\nvec2 arrowCenter(vec2 px) {\n    return (floor(px/TILE_W)+.5)*TILE_W;\n}\n\nvec2 rot(vec2 v, float sn, float cs) {\n    return mat2(cs,sn,-sn,cs)*v;\n}\n\nvec3 render(in vec2 px) {\n    // 1) locate the arrow center that this uv coord might fall under\n    vec2 o=arrowCenter(px);\n    vec2 p = px-o;\n    // 2) compute flow to determine orientation of arrow\n    vec2 uv = px / iResolution.xy;\n    vec2 g = field(uv); // observe that g.y = rsin(theta), g.x=rcos(theta)\n    // 4) inverse rotation & translation, then plug into distance field eq\n    float r=length(g); // sin=g.y/r, cos=g.x/r\n    // the inverse rotation is just flipping the sin functions, + -cos=cos\n    p = rot(p,-g.y/r,g.x/r);\n    \n     // scale the height by the magnitude of the field, r\n    return (inArrow(p,min(r,TILE_W/3.0))) ? vec3(0) : vec3(1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 col = render(fragCoord.xy);\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tX3Rl","date":"1424126111","viewed":591,"name":"advection field","username":"ejang","description":"for color flow perturbation in painterly rendering","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["flow","vectorfield"],"hasliked":0,"parentid":"","parentname":""}}