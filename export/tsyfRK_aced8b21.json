{"ver":"0.1","info":{"id":"tsyfRK","date":"1607486355","viewed":329,"name":"Sky shader in Rust (Preetham)","username":"Boscop","description":"I didn't write the code, I just adapted it for shadertoy.\nOriginal: https://github.com/Tw1ddle/Sky-Shader/blob/master/src/shaders/glsl/sky.fragment\nRust source: https://github.com/EmbarkStudios/rust-gpu/blob/main/examples/shaders/sky-shader/src/lib.rs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sky","rust","preetham","rustgpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on \"A Practical Analytic Model for Daylight\" aka The Preetham Model, the de facto standard analytic skydome model\n// http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n// Original implementation by Simon Wallner: http://www.simonwallner.at/projects/atmospheric-scattering\n// Improved by Martin Upitis: http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n// Three.js integration by zz85: http://twitter.com/blurspline / https://github.com/zz85 / http://threejs.org/examples/webgl_shaders_sky.html\n// Additional uniforms, refactoring and integrated with editable sky example: https://twitter.com/Sam_Twidale / https://github.com/Tw1ddle/Sky-Particles-Shader\n// Rust port by rust-gpu contributors: https://github.com/EmbarkStudios/rust-gpu/blob/main/examples/shaders/sky-shader/src/lib.rs\n// I only adapted it so that when I compile it to GLSL it works on shadertoy (regarding the format of uniforms & mainImage)\n\nstruct Uniforms\n{\n    vec3 resolution;\n    vec4 mouse;\n    vec4 date;\n    float time;\n    float sample_rate;\n    int frame;\n    float time_delta;\n    float frame_rate;\n    float channel_time[4];\n    vec3 channel_resolution[4];\n};\nvec3 _144;\nvec2 _145;\nvec4 _146;\nvoid sky_shader_get_ray_dir(inout vec3 _778, vec2 _779, vec3 _780, vec3 _781)\n{\n    vec3 _794 = _144;\n    _794.x = _781.x - _780.x;\n    vec3 _795 = _794;\n    _795.y = _781.y - _780.y;\n    vec3 _796 = _795;\n    _796.z = _781.z - _780.z;\n    float _809 = 1.0 / sqrt(((_796.x * _796.x) + (_796.y * _796.y)) + (_796.z * _796.z));\n    vec3 _816 = _144;\n    _816.x = _796.x * _809;\n    vec3 _817 = _816;\n    _817.y = _796.y * _809;\n    vec3 _818 = _817;\n    _818.z = _796.z * _809;\n    vec3 _819 = _144;\n    _819.x = 0.0;\n    vec3 _820 = _819;\n    _820.y = 1.0;\n    vec3 _821 = _820;\n    _821.z = 0.0;\n    vec3 _843 = _144;\n    _843.x = (_821.y * _818.z) - (_818.y * _821.z);\n    vec3 _844 = _843;\n    _844.y = (_821.z * _818.x) - (_818.z * _821.x);\n    vec3 _845 = _844;\n    _845.z = (_821.x * _818.y) - (_818.x * _821.y);\n    float _858 = 1.0 / sqrt(((_845.x * _845.x) + (_845.y * _845.y)) + (_845.z * _845.z));\n    vec3 _865 = _144;\n    _865.x = _845.x * _858;\n    vec3 _866 = _865;\n    _866.y = _845.y * _858;\n    vec3 _867 = _866;\n    _867.z = _845.z * _858;\n    vec3 _889 = _144;\n    _889.x = (_818.y * _867.z) - (_867.y * _818.z);\n    vec3 _890 = _889;\n    _890.y = (_818.z * _867.x) - (_867.z * _818.x);\n    vec3 _891 = _890;\n    _891.z = (_818.x * _867.y) - (_867.x * _818.y);\n    vec3 _900 = _144;\n    _900.x = _779.x * _867.x;\n    vec3 _901 = _900;\n    _901.y = _779.x * _867.y;\n    vec3 _902 = _901;\n    _902.z = _779.x * _867.z;\n    vec3 _912 = _144;\n    _912.x = _818.x + _902.x;\n    vec3 _913 = _912;\n    _913.y = _818.y + _902.y;\n    vec3 _914 = _913;\n    _914.z = _818.z + _902.z;\n    vec3 _923 = _144;\n    _923.x = _779.y * _891.x;\n    vec3 _924 = _923;\n    _924.y = _779.y * _891.y;\n    vec3 _925 = _924;\n    _925.z = _779.y * _891.z;\n    vec3 _935 = _144;\n    _935.x = _914.x + _925.x;\n    vec3 _936 = _935;\n    _936.y = _914.y + _925.y;\n    vec3 _937 = _936;\n    _937.z = _914.z + _925.z;\n    float _950 = 1.0 / sqrt(((_937.x * _937.x) + (_937.y * _937.y)) + (_937.z * _937.z));\n    _778.x = _937.x * _950;\n    _778.y = _937.y * _950;\n    _778.z = _937.z * _950;\n}\nfloat shared_saturate(float _1110)\n{\n    return min(max(_1110, 0.0), 1.0);\n}\nvoid sky_shader_total_rayleigh(inout vec3 _205, vec3 _206)\n{\n    float _214 = ((8.0 * pow(3.1415927410125732421875, 3.0)) * pow(pow(1.00030004978179931640625, 2.0) - 1.0, 2.0)) * 6.105000019073486328125;\n    vec3 _222 = _144;\n    _222.x = pow(_206.x, 4.0);\n    vec3 _223 = _222;\n    _223.y = pow(_206.y, 4.0);\n    vec3 _224 = _223;\n    _224.z = pow(_206.z, 4.0);\n    vec3 _231 = _144;\n    _231.x = 76260002145591930082295808.0 * _224.x;\n    vec3 _232 = _231;\n    _232.y = 76260002145591930082295808.0 * _224.y;\n    vec3 _233 = _232;\n    _233.z = 76260002145591930082295808.0 * _224.z;\n    vec3 _240 = _144;\n    _240.x = _233.x * 5.75500011444091796875;\n    vec3 _241 = _240;\n    _241.y = _233.y * 5.75500011444091796875;\n    vec3 _242 = _241;\n    _242.z = _233.z * 5.75500011444091796875;\n    _205.x = _214 / _242.x;\n    _205.y = _214 / _242.y;\n    _205.z = _214 / _242.z;\n}\nvoid sky_shader_total_mie(inout vec3 _252, vec3 _253, vec3 _254, float _255)\n{\n    float _260 = (0.4339999854564666748046875 * ((0.20000000298023223876953125 * _255) * 9.9999998377515902426605765018763e-18)) * 3.1415927410125732421875;\n    vec3 _268 = _144;\n    _268.x = 6.283185482025146484375 / _253.x;\n    vec3 _269 = _268;\n    _269.y = 6.283185482025146484375 / _253.y;\n    vec3 _270 = _269;\n    _270.z = 6.283185482025146484375 / _253.z;\n    vec3 _277 = _144;\n    _277.x = pow(_270.x, 2.0);\n    vec3 _278 = _277;\n    _278.y = pow(_270.y, 2.0);\n    vec3 _279 = _278;\n    _279.z = pow(_270.z, 2.0);\n    vec3 _286 = _144;\n    _286.x = _260 * _279.x;\n    vec3 _287 = _286;\n    _287.y = _260 * _279.y;\n    vec3 _288 = _287;\n    _288.z = _260 * _279.z;\n    _252.x = _288.x * _254.x;\n    _252.y = _288.y * _254.y;\n    _252.z = _288.z * _254.z;\n}\nfloat shared_acos_approx(float _1114)\n{\n    float _1116 = abs(_1114);\n    float _1121 = (((-0.155972003936767578125) * _1116) + 1.56466996669769287109375) * sqrt(1.0 - _1116);\n    float _1127;\n    if (_1114 >= 0.0)\n    {\n        _1127 = _1121;\n    }\n    else\n    {\n        _1127 = 3.1415927410125732421875 - _1121;\n    }\n    return _1127;\n}\nfloat sky_shader_rayleigh_phase(float _302)\n{\n    return 0.0596831031143665313720703125 * (1.0 + pow(_302, 2.0));\n}\nfloat sky_shader_henyey_greenstein_phase(float _307, float _308)\n{\n    return 0.079577468335628509521484375 * ((1.0 - pow(_308, 2.0)) / pow((1.0 - ((2.0 * _308) * _307)) + pow(_308, 2.0), 1.5));\n}\nfloat sky_shader_sun_intensity(float _320)\n{\n    return 1000.0 * max(0.0, 1.0 - exp(-((1.61107313632965087890625 - shared_acos_approx(_320)) / 1.5)));\n}\nfloat shared_smoothstep(float _1128, float _1129, float _1130)\n{\n    float _1135 = shared_saturate((_1130 - _1128) / (_1129 - _1128));\n    return (_1135 * _1135) * (3.0 - (2.0 * _1135));\n}\nvoid sky_shader_sky(inout vec3 _330, vec3 _331, vec3 _332)\n{\n    vec3 _339 = _144;\n    _339.x = 0.0;\n    vec3 _340 = _339;\n    _340.y = 1.0;\n    vec3 _341 = _340;\n    _341.z = 0.0;\n    float _351 = 1.0 - (1.0 * (1.0 - (1.0 - (1.0 - exp(shared_saturate(_332.y / 450000.0))))));\n    vec3 _335 = vec3(6.8000002784174284897744655609131e-07, 5.4999998155835783109068870544434e-07, 4.4999998749517544638365507125854e-07);\n    vec3 _334;\n    sky_shader_total_rayleigh(_334, _335);\n    vec3 _360 = _144;\n    _360.x = _334.x * _351;\n    vec3 _361 = _360;\n    _361.y = _334.y * _351;\n    vec3 _362 = _361;\n    _362.z = _334.z * _351;\n    vec3 _337 = vec3(6.8000002784174284897744655609131e-07, 5.4999998155835783109068870544434e-07, 4.4999998749517544638365507125854e-07);\n    vec3 _338 = vec3(0.68599998950958251953125, 0.677999973297119140625, 0.66600000858306884765625);\n    vec3 _336;\n    sky_shader_total_mie(_336, _337, _338, 2.0);\n    vec3 _371 = _144;\n    _371.x = _336.x * 0.004999999888241291046142578125;\n    vec3 _372 = _371;\n    _372.y = _336.y * 0.004999999888241291046142578125;\n    vec3 _373 = _372;\n    _373.z = _336.z * 0.004999999888241291046142578125;\n    float _387 = shared_acos_approx(max(((_341.x * _331.x) + (_341.y * _331.y)) + (_341.z * _331.z), 0.0));\n    float _394 = cos(_387) + (0.1500000059604644775390625 * pow(93.88500213623046875 - ((_387 * 180.0) / 3.1415927410125732421875), -1.2530000209808349609375));\n    float _395 = 8400.0 / _394;\n    float _396 = 1250.0 / _394;\n    vec3 _403 = _144;\n    _403.x = _362.x * _395;\n    vec3 _404 = _403;\n    _404.y = _362.y * _395;\n    vec3 _405 = _404;\n    _405.z = _362.z * _395;\n    vec3 _412 = _144;\n    _412.x = _373.x * _396;\n    vec3 _413 = _412;\n    _413.y = _373.y * _396;\n    vec3 _414 = _413;\n    _414.z = _373.z * _396;\n    vec3 _424 = _144;\n    _424.x = _405.x + _414.x;\n    vec3 _425 = _424;\n    _425.y = _405.y + _414.y;\n    vec3 _426 = _425;\n    _426.z = _405.z + _414.z;\n    vec3 _433 = _144;\n    _433.x = -_426.x;\n    vec3 _434 = _433;\n    _434.y = -_426.y;\n    vec3 _435 = _434;\n    _435.z = -_426.z;\n    vec3 _442 = _144;\n    _442.x = exp(_435.x);\n    vec3 _443 = _442;\n    _443.y = exp(_435.y);\n    vec3 _444 = _443;\n    _444.z = exp(_435.z);\n    float _458 = 1.0 / sqrt(((_332.x * _332.x) + (_332.y * _332.y)) + (_332.z * _332.z));\n    vec3 _465 = _144;\n    _465.x = _332.x * _458;\n    vec3 _466 = _465;\n    _466.y = _332.y * _458;\n    vec3 _467 = _466;\n    _467.z = _332.z * _458;\n    float _479 = ((_331.x * _467.x) + (_331.y * _467.y)) + (_331.z * _467.z);\n    float _482 = sky_shader_rayleigh_phase((_479 * 0.5) + 0.5);\n    vec3 _489 = _144;\n    _489.x = _362.x * _482;\n    vec3 _490 = _489;\n    _490.y = _362.y * _482;\n    vec3 _491 = _490;\n    _491.z = _362.z * _482;\n    float _492 = sky_shader_henyey_greenstein_phase(_479, 0.800000011920928955078125);\n    vec3 _499 = _144;\n    _499.x = _373.x * _492;\n    vec3 _500 = _499;\n    _500.y = _373.y * _492;\n    vec3 _501 = _500;\n    _501.z = _373.z * _492;\n    float _513 = sky_shader_sun_intensity(((_467.x * _341.x) + (_467.y * _341.y)) + (_467.z * _341.z));\n    vec3 _523 = _144;\n    _523.x = _491.x + _501.x;\n    vec3 _524 = _523;\n    _524.y = _491.y + _501.y;\n    vec3 _525 = _524;\n    _525.z = _491.z + _501.z;\n    vec3 _535 = _144;\n    _535.x = _362.x + _373.x;\n    vec3 _536 = _535;\n    _536.y = _362.y + _373.y;\n    vec3 _537 = _536;\n    _537.z = _362.z + _373.z;\n    vec3 _547 = _144;\n    _547.x = _525.x / _537.x;\n    vec3 _548 = _547;\n    _548.y = _525.y / _537.y;\n    vec3 _549 = _548;\n    _549.z = _525.z / _537.z;\n    vec3 _556 = _144;\n    _556.x = _513 * _549.x;\n    vec3 _557 = _556;\n    _557.y = _513 * _549.y;\n    vec3 _558 = _557;\n    _558.z = _513 * _549.z;\n    vec3 _559 = _144;\n    _559.x = 1.0;\n    vec3 _560 = _559;\n    _560.y = 1.0;\n    vec3 _561 = _560;\n    _561.z = 1.0;\n    vec3 _571 = _144;\n    _571.x = _561.x - _444.x;\n    vec3 _572 = _571;\n    _572.y = _561.y - _444.y;\n    vec3 _573 = _572;\n    _573.z = _561.z - _444.z;\n    vec3 _583 = _144;\n    _583.x = _558.x * _573.x;\n    vec3 _584 = _583;\n    _584.y = _558.y * _573.y;\n    vec3 _585 = _584;\n    _585.z = _558.z * _573.z;\n    vec3 _592 = _144;\n    _592.x = pow(_585.x, 1.5);\n    vec3 _593 = _592;\n    _593.y = pow(_585.y, 1.5);\n    vec3 _594 = _593;\n    _594.z = pow(_585.z, 1.5);\n    vec3 _595 = _144;\n    _595.x = 1.0;\n    vec3 _596 = _595;\n    _596.y = 1.0;\n    vec3 _597 = _596;\n    _597.z = 1.0;\n    vec3 _607 = _144;\n    _607.x = _491.x + _501.x;\n    vec3 _608 = _607;\n    _608.y = _491.y + _501.y;\n    vec3 _609 = _608;\n    _609.z = _491.z + _501.z;\n    vec3 _619 = _144;\n    _619.x = _362.x + _373.x;\n    vec3 _620 = _619;\n    _620.y = _362.y + _373.y;\n    vec3 _621 = _620;\n    _621.z = _362.z + _373.z;\n    vec3 _631 = _144;\n    _631.x = _609.x / _621.x;\n    vec3 _632 = _631;\n    _632.y = _609.y / _621.y;\n    vec3 _633 = _632;\n    _633.z = _609.z / _621.z;\n    vec3 _640 = _144;\n    _640.x = _513 * _633.x;\n    vec3 _641 = _640;\n    _641.y = _513 * _633.y;\n    vec3 _642 = _641;\n    _642.z = _513 * _633.z;\n    vec3 _652 = _144;\n    _652.x = _642.x * _444.x;\n    vec3 _653 = _652;\n    _653.y = _642.y * _444.y;\n    vec3 _654 = _653;\n    _654.z = _642.z * _444.z;\n    vec3 _661 = _144;\n    _661.x = pow(_654.x, 0.5);\n    vec3 _662 = _661;\n    _662.y = pow(_654.y, 0.5);\n    vec3 _663 = _662;\n    _663.z = pow(_654.z, 0.5);\n    float _677 = shared_saturate(pow(1.0 - (((_341.x * _467.x) + (_341.y * _467.y)) + (_341.z * _467.z)), 5.0));\n    vec3 _687 = _144;\n    _687.x = _663.x - _597.x;\n    vec3 _688 = _687;\n    _688.y = _663.y - _597.y;\n    vec3 _689 = _688;\n    _689.z = _663.z - _597.z;\n    vec3 _696 = _144;\n    _696.x = _689.x * _677;\n    vec3 _697 = _696;\n    _697.y = _689.y * _677;\n    vec3 _698 = _697;\n    _698.z = _689.z * _677;\n    vec3 _708 = _144;\n    _708.x = _597.x + _698.x;\n    vec3 _709 = _708;\n    _709.y = _597.y + _698.y;\n    vec3 _710 = _709;\n    _710.z = _597.z + _698.z;\n    vec3 _714 = _594;\n    _714.x = _594.x * _710.x;\n    vec3 _718 = _714;\n    _718.y = _714.y * _710.y;\n    vec3 _722 = _718;\n    _722.z = _718.z * _710.z;\n    float _723 = cos(0.009333300404250621795654296875);\n    float _725 = shared_smoothstep(_723, _723 + 1.9999999494757503271102905273438e-05, _479);\n    vec3 _732 = _144;\n    _732.x = 0.100000001490116119384765625 * _444.x;\n    vec3 _733 = _732;\n    _733.y = 0.100000001490116119384765625 * _444.y;\n    vec3 _734 = _733;\n    _734.z = 0.100000001490116119384765625 * _444.z;\n    float _735 = _513 * 19000.0;\n    vec3 _742 = _144;\n    _742.x = _735 * _444.x;\n    vec3 _743 = _742;\n    _743.y = _735 * _444.y;\n    vec3 _744 = _743;\n    _744.z = _735 * _444.z;\n    vec3 _751 = _144;\n    _751.x = _744.x * _725;\n    vec3 _752 = _751;\n    _752.y = _744.y * _725;\n    vec3 _753 = _752;\n    _753.z = _744.z * _725;\n    vec3 _757 = _734;\n    _757.x = _734.x + _753.x;\n    vec3 _761 = _757;\n    _761.y = _757.y + _753.y;\n    vec3 _765 = _761;\n    _765.z = _761.z + _753.z;\n    _330.x = _722.x + _765.x;\n    _330.y = _722.y + _765.y;\n    _330.z = _722.z + _765.z;\n}\nvoid sky_shader_tonemap(inout vec3 _147, vec3 _148)\n{\n    vec3 _157 = _144;\n    _157.x = pow(_148.x, 2.349999904632568359375);\n    vec3 _158 = _157;\n    _158.y = pow(_148.y, 2.349999904632568359375);\n    vec3 _159 = _158;\n    _159.z = pow(_148.z, 2.349999904632568359375);\n    vec3 _166 = _144;\n    _166.x = pow(_159.x, 0.935000002384185791015625);\n    vec3 _167 = _166;\n    _167.y = pow(_159.y, 0.935000002384185791015625);\n    vec3 _168 = _167;\n    _168.z = pow(_159.z, 0.935000002384185791015625);\n    vec3 _175 = _144;\n    _175.x = _168.x * 2.88266658782958984375;\n    vec3 _176 = _175;\n    _176.y = _168.y * 2.88266658782958984375;\n    vec3 _177 = _176;\n    _177.z = _168.z * 2.88266658782958984375;\n    vec3 _178 = _144;\n    _178.x = 789.74591064453125;\n    vec3 _179 = _178;\n    _179.y = 789.74591064453125;\n    vec3 _180 = _179;\n    _180.z = 789.74591064453125;\n    vec3 _190 = _144;\n    _190.x = _177.x + _180.x;\n    vec3 _191 = _190;\n    _191.y = _177.y + _180.y;\n    vec3 _192 = _191;\n    _192.z = _177.z + _180.z;\n    _147.x = _159.x / _192.x;\n    _147.y = _159.y / _192.y;\n    _147.z = _159.z / _192.z;\n}\nvoid _sky_shader_Uniforms_main_image(Uniforms _960, out vec4 _961, vec2 _962, sampler2D _963, sampler2D _964, sampler2D _965, sampler2D _966)\n{\n    vec2 _982 = _145;\n    _982.x = _960.resolution.x;\n    vec2 _983 = _982;\n    _983.y = _960.resolution.y;\n    vec2 _988 = _145;\n    _988.x = 0.5 * _983.x;\n    vec2 _989 = _988;\n    _989.y = 0.5 * _983.y;\n    vec2 _996 = _145;\n    _996.x = _962.x - _989.x;\n    vec2 _997 = _996;\n    _997.y = _962.y - _989.y;\n    vec2 _1005 = _145;\n    _1005.x = _997.x / _960.resolution.y;\n    vec2 _1006 = _1005;\n    _1006.y = _997.y / _960.resolution.y;\n    vec3 _1007 = _144;\n    _1007.x = 0.0;\n    vec3 _1008 = _1007;\n    _1008.y = 0.099699996411800384521484375;\n    vec3 _1009 = _1008;\n    _1009.z = 0.20000000298023223876953125;\n    vec3 _1010 = _144;\n    _1010.x = 0.0;\n    vec3 _1011 = _1010;\n    _1011.y = 75.0;\n    vec3 _1012 = _1011;\n    _1012.z = -1000.0;\n    vec2 _969 = _1006;\n    vec3 _970 = _1009;\n    vec3 _971 = _1012;\n    vec3 _968;\n    sky_shader_get_ray_dir(_968, _969, _970, _971);\n    vec3 _973 = _968;\n    vec3 _974 = _1012;\n    vec3 _972;\n    sky_shader_sky(_972, _973, _974);\n    vec3 _1017 = _144;\n    _1017.x = 0.0;\n    vec3 _1018 = _1017;\n    _1018.y = 0.0;\n    vec3 _1019 = _1018;\n    _1019.z = 0.0;\n    vec3 _1029 = _144;\n    _1029.x = max(_972.x, _1019.x);\n    vec3 _1030 = _1029;\n    _1030.y = max(_972.y, _1019.y);\n    vec3 _1031 = _1030;\n    _1031.z = max(_972.z, _1019.z);\n    vec3 _1032 = _144;\n    _1032.x = 1024.0;\n    vec3 _1033 = _1032;\n    _1033.y = 1024.0;\n    vec3 _1034 = _1033;\n    _1034.z = 1024.0;\n    vec3 _1044 = _144;\n    _1044.x = min(_1031.x, _1034.x);\n    vec3 _1045 = _1044;\n    _1045.y = min(_1031.y, _1034.y);\n    vec3 _1046 = _1045;\n    _1046.z = min(_1031.z, _1034.z);\n    vec3 _976 = _1046;\n    vec3 _975;\n    sky_shader_tonemap(_975, _976);\n    vec4 _1052 = _146;\n    _1052.x = _975.x;\n    vec4 _1053 = _1052;\n    _1053.y = _975.y;\n    vec4 _1054 = _1053;\n    _1054.z = _975.z;\n    vec4 _1055 = _1054;\n    _1055.w = 1.0;\n    vec4 _1064 = _146;\n    _1064.x = pow(_1055.x, 0.454545438289642333984375);\n    vec4 _1065 = _1064;\n    _1065.y = pow(_1055.y, 0.454545438289642333984375);\n    vec4 _1066 = _1065;\n    _1066.z = pow(_1055.z, 0.454545438289642333984375);\n    vec4 _1067 = _1066;\n    _1067.w = pow(_1055.w, 0.454545438289642333984375);\n    _961 = _1067;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){_sky_shader_Uniforms_main_image(Uniforms(iResolution,iMouse,iDate,iTime,iSampleRate,iFrame,iTimeDelta,iFrameRate,iChannelTime,iChannelResolution),fragColor,fragCoord,iChannel0,iChannel1,iChannel2,iChannel3);}\n","name":"Image","description":"","type":"image"}]}