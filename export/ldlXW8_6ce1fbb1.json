{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n// Heavily modified by Steven An - 2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// I've not seen anybody out there computing correct cell interior distances for Voronoi\n// patterns yet. That's why they cannot shade the cell interior correctly, and why you've\n// never seen cell boundaries rendered correctly. \n//\n// However, here's how you do mathematically correct distances (note the equidistant and non\n// degenerated grey isolines inside the cells) and hence edges (in yellow):\n//\n// https://iquilezles.org/articles/voronoilines\n\nvec3 bg = vec3(0.15, 0.1, 0.1);\nvec3 white = vec3(1.0, 1.0, 1.0);\nfloat zoom = 0.08;\nvec2 fallspeed = vec2(0.04,0.05);\n\nfloat pi = 3.141592653;\n\n#define ANIMATE\n\nfloat animbias = 0.5;\nfloat animscale = 0.4;\n//float animbias = 0.0;\n//float animscale = 0.0;\n\nvec3 hash3( vec3 p )\n{\n\treturn texture( iChannel0, (p.xy+0.5)/(200.0), -100.0 ).xyz;\n}\n\nvec3 voronoi( in vec3 x, out vec3 cpId )\n{\n    vec3 n = floor(x);\n    vec3 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec3 mg, mr;\n\n    float md = 16.0;\n\tfor( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 g = vec3(float(i),float(j), float(k));\n\t\tvec3 o = hash3( n + g );\n\t\t#ifdef ANIMATE\n        o = animbias + animscale*sin( iTime*0.5 + 6.2831*o );\n        #endif\t\n        vec3 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n\tcpId = n+mg;\n\n    return mr;\n}\n\nfloat sin01(float theta)\n{\n\treturn sin(theta)*0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat z = iTime * 0.01;\n\tz = 0.0;\n    vec3 vs = vec3(\n\t\t(fragCoord.xy-iResolution.xy*0.5)/iResolution.xx + iTime*fallspeed,\n\t\tz )/zoom;\n\t// add variation to sky\n\tbg = mix( bg, vec3(0.0,0.2,0.2), pow(fragCoord.y/iResolution.y, 1.0));\n\t\n\tvec3 cpid;\n    vec3 toCP = voronoi( vs, cpid );\n\tfloat centerDist = length( toCP );\n\t\n\tbg += pow(clamp(1.0-centerDist*4.0,0.0,1.0),0.9) * vec3(1,1,0.9);\n\n\tfragColor = vec4( bg, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldlXW8","date":"1422122933","viewed":278,"name":"3D Voronoi Fuzz","username":"steverock","description":"fdsa","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","voronoi"],"hasliked":0,"parentid":"","parentname":""}}