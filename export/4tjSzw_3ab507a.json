{"ver":"0.1","info":{"id":"4tjSzw","date":"1442471068","viewed":195,"name":"Zooming Mandelbrot","username":"roombarampage","description":"Sucks not having modulus...","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","ramp","zooming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"/*\n  programmer: jonathan potter\n  github: https://github.com/jonathan-potter\n  repo: https://github.com/jonathan-potter/shadertoy-fractal\n*/\n\nconst int MAX_ITERATIONS = 512;\nconst float pi = 3.14159;\n\nstruct complex { \n  float real;\n  float imaginary;\n};\n    \nfloat modulus(float number, float divisor) {\n  float integerQuotient = floor(number / divisor);\n    \n  return number - (integerQuotient * divisor);\n}\n\nfloat rampFunction(float t) {\n  float animationPeriod = 5.0;\n    \n  return modulus(t, animationPeriod);\n}\n\nint fractal(complex c, complex z) {\n  for (int iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n\n    // z <- z^2 + c\n    float real = z.real * z.real - z.imaginary * z.imaginary + c.real;\n    float imaginary = 2.0 * z.real * z.imaginary + c.imaginary;\n\n    z.real = real;\n    z.imaginary = imaginary;\n\n    if (z.real * z.real + z.imaginary * z.imaginary > 4.0) {\n      return iteration;\n    }\n  }\n\n  return 0;\n}\n\nint mandelbrot(vec2 coordinate) {\n  complex c = complex(coordinate.x, coordinate.y);\n  complex z = complex(0.0, 0.0);\n\n  return fractal(c, z);\n}\n\nvec2 fragCoordToXY(vec2 fragCoord) {\n  vec2 relativePosition = fragCoord.xy / iResolution.xy;\n  float aspectRatio = iResolution.x / iResolution.y;\n\n  vec2 cartesianPosition = (relativePosition - 0.5) * 10.0;\n  cartesianPosition.x *= aspectRatio;\n    \n  float zoomLevel = pow(1.3, 10.0 * rampFunction(iTime));\n  cartesianPosition.x /= zoomLevel;\n  cartesianPosition.y /= zoomLevel;\n    \n  cartesianPosition.x += -0.22614245999608962;\n  cartesianPosition.y += 0.8115717941462461;\n\n  return cartesianPosition;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 coordinate = fragCoordToXY(fragCoord);\n\n  int crossoverIteration = mandelbrot(coordinate);\n    \n  float color = 1.0 * float(crossoverIteration) / float(MAX_ITERATIONS);\n\n  fragColor = vec4(color, color, color, 1.0);\n}\n","name":"","description":"","type":"image"}]}