{"ver":"0.1","info":{"id":"4cBGzm","date":"1703944058","viewed":19,"name":"Normalization Function","username":"ArtemNikolaev","description":"Normalization function","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["normalize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 normalizePixelCoord(vec2 fragCoord, vec3 resolution) {\n    float smallerSide;\n    if (resolution.x >= resolution.y) {\n        smallerSide = resolution.x;\n    } else { smallerSide = resolution.y; }\n    \n    return (fragCoord - 0.5 * resolution.xy) / resolution.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = normalizePixelCoord(fragCoord, iResolution);\n    \n    if (uv.x > -0.3 && uv.x < 0.3 && uv.y > -0.3 && uv.y < 0.3) {\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx-vec3(0,2,4));\n        fragColor = vec4(col, 1.0);\n    } else {\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        fragColor = vec4(col,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}