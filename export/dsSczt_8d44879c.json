{"ver":"0.1","info":{"id":"dsSczt","date":"1688037237","viewed":52,"name":"shifting squares rotate","username":"CreatorsLight","description":".2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colorful","trippy","squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n \n    //rotation / rotation speed\n    float rotation = 0.3 * iTime / 4.0;\n    fragCoord = vec2(fragCoord.x * cos(rotation) - fragCoord.y * sin(rotation),\n                     fragCoord.x * sin(rotation) + fragCoord.y * cos(rotation));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = fract(uv) - 0.5;\n    \n    // adjust for lines when the original position is shifted\n    // so everything lines up\n    float adjust = 0.0026;\n    uv += adjust * sign(uv);\n\n    // line colour brightness\n    vec3 col = vec3(0.3, 1., 1.);\n    // lines\n    col *= step(0.1, length(0.1 * sin(0.2 * uv - vec2(0.5, 0.5) + iTime - 100.0 / uv * 0.040 + 0.5)));\n    col += smoothstep(0.2, 0.8, length(vec3(0.2, 0.0, 0.2) * uv.xxx)) * 1.2;\n    //col *= step(0.1, length(0.1 * sin(0.2 * uv - vec2(0.5, 0.5) - iTime - 100.0 / uv * 0.040 + 0.5)));\n    col *= (vec3(0.6, 0.2, 0.1) * uv.xxx) * 5.0;\n    col *= (vec3(0.8, 0.2, 0.1) * uv.xxy);\n    col *= 20.0;\n    \n    // Smooth color transitions between fractals\n    float transition = smoothstep(0.1, 0.15, length(uv));\n    col *= mix(vec3(0.0), col, transition);\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}