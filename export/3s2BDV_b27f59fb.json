{"ver":"0.1","info":{"id":"3s2BDV","date":"1729310175","viewed":221,"name":"Circuit Sand","username":"irwatts","description":"Inspired by the old falling sand games. Made this years back and never posted it.","likes":16,"published":3,"flags":32,"usePreview":0,"tags":["procedural","2d","automata","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2020 Ian Reichert-Watts\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, \n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission \n// notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR \n// A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH \n// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 buf = texture(iChannel0, uv);\n\n    // Time varying pixel color\n    vec3 col = (0.8 + (0.2*buf.r+0.1)*cos(buf.a*8.0+iTime+uv.xyx+vec3(0.2,3.2,4)))*((0.2*buf.a)+(1.2*buf.r)+0.2);\n\t\n    //col = vec3(buf.r);\n    //col = vec3((buf.gb*0.5)+0.5, 1.0);\n    //col = vec3(buf.a);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The MIT License\n// Copyright © 2020 Ian Reichert-Watts\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, \n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission \n// notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR \n// A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH \n// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst float GRAVITY = 10.0;\nconst vec2 GRAVITY_DIRS[3] = vec2[3](vec2(-1.0,-1.0), vec2(0.0,-1.0), vec2(1.0,-1.0));\nconst vec2 OFFSETS[8] = vec2[8](vec2(-1.0,-1.0),\tvec2(0.0,-1.0),\tvec2(1.0,-1.0),\n                               \tvec2(-1.0,0.0),\t\t\t\t\t\tvec2(1.0,0.0),\n                               \tvec2(-1.0,1.0),\t\tvec2(0.0,1.0),\tvec2(1.0,1.0));\nconst float DECAY = 0.00015;\nconst float TRAIL_FADE = 0.996;\nconst float BRUSH_RADIUS = 8.0;\nconst float FORCE_RADIUS = 128.0;\nconst float WIND_MIN = 0.3;\nconst float WIND_MAX = 1.0;\nconst float WIND_CHANGE = 1.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 currColor = texture(iChannel0, uv);\n    fragColor = currColor;\n    bool cannotMove = false;\n    vec2 off = OFFSETS[iFrame % 8];\n    if (currColor.r > 0.0)\n    {\n        vec2 dir = round(currColor.gb);\n        bool hasCompetition = false;\n        for(int i=0; i<8; i++)\n        {\n            if (OFFSETS[i] != -dir)\n            {\n                vec4 neighborSamp = texture(iChannel0, (fragCoord+dir+OFFSETS[i])/iResolution.xy);\n                if (neighborSamp.r > 0.0 && OFFSETS[i] == -round(neighborSamp.gb))\n                {\n                    hasCompetition = true;\n                }\n            }\n        }\n        if (!hasCompetition || dir == off)\n        {\n            vec4 targetSamp = texture(iChannel0, (fragCoord+dir)/iResolution.xy);\n            if (targetSamp.r <= 0.0)\n            {\n                fragColor.rgb = vec3(0.0);\n            }\n            else\n            {\n                cannotMove = true;\n            }\n        }\n    }\n    else\n    {\n        int numSources = 0;\n        vec4 sourceSamp = vec4(0.0);\n        bool offValid = false;\n        for(int i=0; i<8; i++)\n        {\n            vec2 neighborOff = OFFSETS[i];\n            vec4 neighborSamp = texture(iChannel0, (fragCoord+neighborOff)/iResolution.xy);\n            if (neighborSamp.r > 0.0 && neighborOff == -round(neighborSamp.gb))\n            {\n                numSources++;\n                sourceSamp = neighborSamp;\n                if (neighborOff == -off)\n                {\n                    offValid = true;\n                }\n            }\n        }\n        if (numSources > 1)\n        {\n            if (offValid)\n            {\n    \t\t\tsourceSamp = texture(iChannel0, (fragCoord-off)/iResolution.xy);\n            }\n            else\n            {\n                sourceSamp = vec4(0.0);\n            }\n        }\n       \tif (sourceSamp.r > 0.0)\n        {\n            fragColor.rgb = sourceSamp.rgb;\n            float noise = (1.0-worley(fragCoord*0.25+vec2(40.42*iTime,-20.0*iTime), 64.0)+0.15);\n            noise = 10.0*worley(fragCoord*0.1+vec2(923.324-2.2*iTime,10.234+10.42*iTime), 8.0-noise*0.08);\n            fragColor.gb += mix(WIND_MIN, WIND_MAX, 0.5*sin(iTime*WIND_CHANGE)+0.5)*vec2(2.0*(worley(fragCoord*0.02*(1.0+0.2*noise)+vec2(90.1921,403.32), 4.0+noise*0.02)-0.25), 2.0*(worley(fragCoord*0.02+vec2(90.1921,4.2182), 4.0+0.02*noise)-0.5));\n        }\n    }\n    \n    if (fragCoord.y > iResolution.y-1.0)\n    {\n        float time = fract(iTime*42.0);\n        float val = randFloat(time+fragCoord.x*0.00837+fragCoord.y*0.0004232);\n        float wave = 0.5*sin(iTime*0.5)+0.5;\n        val = clamp((pow(val, 2.0)-(0.4+0.5*wave))*(2.0-wave), 0.0, 1.0)*val;\n        fragColor.r = val;\n        fragColor.gb = vec2(0.0, -1.0);\n    }\n\t\n    if (iMouse.z > 0.0)\n    {\n        vec2 deltaCoord = fragCoord-iMouse.xy;\n        float dist = length(deltaCoord);\n        if (dist < BRUSH_RADIUS && currColor.r <= 0.0)\n        {\n            fragColor.r = dist/BRUSH_RADIUS;\n        }\n        if (dist < FORCE_RADIUS)\n        {\n            fragColor.gb = 20.0*deltaCoord/dist;\n        }\n    }\n    \n    \n    if (cannotMove && fragCoord.y > 2.0)\n    {\n        fragColor.gb = GRAVITY_DIRS[(int(fragCoord.x*4.0)+iFrame) % 3];\n    }\n    else\n    {\n        fragColor.gb = normalize(mix(fragColor.gb, vec2(0.0, -1.0), GRAVITY*iTimeDelta));\n    }\n    if (fragColor.gb == vec2(0.0))\n    {\n        fragColor.gb = vec2(0.0, -1.0);\n    }\n    \n    fragColor.r = max(0.0, fragColor.r-DECAY);\n    fragColor.a = max((fragColor.a * TRAIL_FADE), fragColor.r);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float randFloat(float n)\n{\n \treturn fract(sin(n*64.19)*4200.82);\n}\nvec2 randVec2(vec2 n)\n{\n \treturn vec2(randFloat(n.x*12.95+n.y*43.72),randFloat(n.x*16.21+n.y*90.23)); \n}\n\nfloat worley(vec2 n, float s)\n{\n    float dist = 2.0;\n    for(int x=-1;x<=1;x++)\n    {\n        for(int y=-1;y<=1;y++)\n        {\n            vec2 p = floor(n/s)+vec2(x,y);\n            float d = length(randVec2(p)+vec2(x,y)-fract(n/s));\n            if (d < dist)\n            {\n             \tdist = d;   \n            }\n        }\n    }\n    return dist;\n}","name":"Common","description":"","type":"common"}]}