{"ver":"0.1","info":{"id":"dltBWS","date":"1701555379","viewed":88,"name":"leaning square animation","username":"jt","description":"A square leans against a wall slips down (and bounces off just so the animation can repeat).\nI'd call this a \"physical animation\" unless someone suggests a better tag.\nIt's essentially animating (approx) something normally a physics engine would simulate.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["animation","animation","square","inverse","physical","kinematics","leaning","slipping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dltBWS leaning square animation, 2023 jt\n\n// A square leans against a wall slips down (and bounces off just so the animation can repeat).\n// I'd call this a \"physical animation\" unless someone suggests a better tag.\n// It's essentially animating (approx) something normally a physics engine would simulate.\n\n// One could argue this is (very basic) inverse kinematic.\n\n// tags: square, animation, leaning, slipping, physical, animation, inverse, kinematics\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\n//#define draw(q) O *= smoothstep(0.0, 0.01, abs(q))\n#define draw(q) O *= smoothstep(0.0, max(0.01, 3./iResolution.y), abs(q)) // antialiasing thanks to Fabrice (as usual) :-)\n\nvec4 plate(float t)\n{\n    return sqrt(mix(vec4(0,1,0,0),vec4(0,0,1,0), t));\n}\n\nfloat line(vec2 a, vec2 b, vec2 c)\n{\n    return length(c-(a+dot(b-a,c-a)*(b-a)/dot(b-a,b-a)));\n}\n\nfloat segment(vec2 a, vec2 b, vec2 p)\n{\n    p -= a; b -= a;\n    float q = dot(p, b) / dot(b, b);\n    b *= clamp(q, 0., 1.);\n    return length(p - b);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\tvec2 R = iResolution.xy; \n    I = (I+I-R)/R.y;\n    I += 0.5;\n    vec2 m = (2.*iMouse.xy-R)/R.y;\n    float t = pow(1.0-sqrt(0.125)+sqrt(0.125)*(0.5 - 0.5 * cos(2.0*pi*iTime/10.0)),2.0);\n    //float t = pow(1.0-sqrt(0.125)+sqrt(0.125)*(fract(iTime/10.0)),2.0);\n    vec4 p = plate(t);\n    vec2 d = p.zw-p.xy;\n    vec2 n = vec2(-d.y,d.x);\n    O = vec4(1);\n\t//draw(length(I) - 0.01); // circle\n    draw(length(I-p.xy) - 0.01); // circle\n    draw(length(I-p.zw) - 0.01); // circle\n    draw(segment(p.xy,p.zw,I));\n    draw(segment(p.xy,p.xy+n,I));\n    draw(segment(p.zw,p.zw+n,I));\n    draw(segment(p.xy+n,p.zw+n,I));\n    draw(I.x);\n    draw(I.y);\n}\n","name":"Image","description":"","type":"image"}]}