{"ver":"0.1","info":{"id":"lt33Wn","date":"1468693830","viewed":854,"name":"HexWorld","username":"jherico","description":"An open plain of dancing hexagons, work in progress","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","landscape","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Work in progress.\n\nconst float HEX_SIZE = 100.0;\n\nivec3 cube_round(vec3 h) {\n    vec3 r = floor(h + 0.5);\n    vec3 diff = abs(r - h);\n    if (diff.x > diff.y && diff.x > diff.z) {\n        r.x = -r.y - r.z;\n    } else if (diff.y > diff.z) {\n        r.y = -r.x - r.z;\n    } else {\n        r.z = -r.x - r.y;\n    }\n    return ivec3(int(r.x), int(r.y), int(r.z));\n}\n\nfloat cube_distance(ivec3 a, ivec3 b) {\n    vec3 ab = abs(vec3(a) - vec3(b));\n    \n    return max(max(ab.x, ab.y), ab.z);\n}\n        \nivec2 cube_to_hex(ivec3 c) {\n    return c.xy;\n}\n\nivec3 hex_to_cube(ivec2 h) {\n    return ivec3(h.x, h.y, -h.x - h.y);\n}\n\nvec3 hex_to_cube(vec2 h) {\n    return vec3(h.x, h.y, -h.x - h.y);\n}\n\nivec2 hex_round(vec2 h) {\n    vec3 fcube = hex_to_cube(h);\n    ivec3 cube = cube_round(fcube);\n    ivec2 hex = cube_to_hex(cube);\n    return hex;\n}\n\nivec2 pixel_to_hex(in vec2 pixel) {\n    const vec2 PIXEL_TO_HEX_CONST = vec2(sqrt(3.0), 2.0) / 3.0;\n    vec2 result = PIXEL_TO_HEX_CONST * pixel;\n    result.x -= pixel.y / 3.0;\n    return hex_round(result / HEX_SIZE);\n}\n\nvec2 hex_to_pixel(in ivec2 hex2)  {\n    vec2 hex = vec2(hex2);\n    return vec2(sqrt(3.0) * (hex.x + hex.y/2.0), 1.5 * hex.y) * HEX_SIZE;\n}\n\n\n#define HIGH_QUALITY_NOISE\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n#ifndef HIGH_QUALITY_NOISE\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n#else\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z);\n\tvec2 rg1 = texture( iChannel0, (uv+ vec2(0.5,0.5))/256.0, -100.0 ).yx;\n\tvec2 rg2 = texture( iChannel0, (uv+ vec2(1.5,0.5))/256.0, -100.0 ).yx;\n\tvec2 rg3 = texture( iChannel0, (uv+ vec2(0.5,1.5))/256.0, -100.0 ).yx;\n\tvec2 rg4 = texture( iChannel0, (uv+ vec2(1.5,1.5))/256.0, -100.0 ).yx;\n\tvec2 rg = mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n#endif\t\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\n\nfloat terrain(in ivec2 hex) {\n    vec2 hexPos = hex_to_pixel(hex);\n    float noiseVal = noise(vec3(hexPos.x / 500.0 + iTime / 2.0, hexPos.y / 500.0, sin(iTime) / 2.0 + 0.5));\n    if (noiseVal <= 0.0) {\n        return 0.0;\n    }\n    noiseVal = pow(noiseVal, 9.0);\n    return noiseVal * 600.0;\n}\n\n// Return hexagon height for a given position\nfloat terrain(in vec2 pos) {\n    return terrain(pixel_to_hex(pos));\n}\n\nfloat map( in vec3 p ) {\n    return p.y - terrain(p.xz);\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat interesct( in vec3 ro, in vec3 rd, in float tmin, in float tmax ) {\n    float d = tmax;\n    \n    \n    intersectRayPlane(ro, rd, vec3(0.0), vec3(0.0, 1.0, 0.0), d);\n    ivec3 b = hex_to_cube(pixel_to_hex((ro + rd * d).xz));\n    ivec3 a = hex_to_cube(pixel_to_hex(ro.xz));\n\n    float cubedist = floor(cube_distance(a, b));\n    for (float i = 0.0; i < 10000.0; i += 1.0) {\n        if (i > cubedist) {\n            break;\n        }\n        float mixAmount = i / cubedist;\n        ivec3 testCube = cube_round(mix(vec3(a), vec3(b), mixAmount));\n        ivec2 testHex = cube_to_hex(testCube);\n        vec2 hexPos = hex_to_pixel(testHex);\n        float height = terrain(testHex);\n        vec3 hexIntersecPos = vec3(hexPos.x, height, hexPos.y);\n        float d2 = length(hexIntersecPos - ro);\n        vec3 rayPos = ro + (rd * d2);\n        if (rayPos.y < hexIntersecPos.y) {\n            //return d2;\n        }\n    }    \n    \n    float t = tmin;\n    for(int i=0; i<240; ++i) {\n\t\tfloat h = map( ro + t*rd );\n\t\tif( h<(0.002*t) || t>tmax ) break;\n\t\tt += 0.5*h;\n\t}\n\n\treturn t;\n}\n\n\nvec3 calcNormal( in vec3 pos, float t ) {\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvec3 HEX_BORDER = LIGHTGREY;\nvec3 HEX_BODY = DARKGREY;\nvec3 HAZE = LIGHTGREY;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor.a = 1.0;\n    vec2 xy = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n    vec3 ro = vec3( 0.0, 1000.0, -40.0 );\n    vec3 rd = getRayDirection(iResolution.xy, iMouse.xy, xy, ro);\n\n    float time = iTime*0.15;\n    // bounding plane\n    float tmin = 2.0;\n    float tmax = 20000.0;\n    vec3 light1 = normalize( vec3(-0.8,0.4,-0.3) );\n    float sundot = clamp(dot(rd,light1),0.0,1.0);\n    if (rd.y > 0.0) {\n        rd.y = -rd.y;\n        rd.xz = rd.zx;\n    }\n\n    float t = interesct( ro, rd, tmin, tmax );\n\n    vec3 col;\n    if( t>tmax) {\n\t\tfragColor.rgb = HAZE;\n        return;\n\t} else {\n\t\tvec3 pos = ro + t*rd;\n        float y = terrain(pos.xz);\n        if (pos.y > 10.0) {\n            if (abs(pos.y - y) < 10.1){\n                col = vec3(1.0, 0.0, 1.0);\n            } else if (pos.y > 100.0) {\n                col = vec3(1.0, 0.0, 0.0);\n            }\n        } else {\n            col = HEX_BODY;\n            ivec2 hex = pixel_to_hex(pos.xz);\n            vec2 hexPos = hex_to_pixel(hex);\n            \n            if (length2(hexPos - pos.xy) < 0.11) {\n                col = HEX_BORDER;\n            }\n        }\n\n        /*\n        float distanceToBorder = hex.z;\n        float nv = 0.2;\n        float xv = nv + 0.05;\n        float intensity = smoothstep(nv, xv, hex.z);\n        col = mix(HEX_BORDER, HEX_BODY, intensity);\n        */\n        if (t > 4000.0) {\n            col = mix(col, HAZE, smoothstep(4000.0, 20000.0, t));\n        }\n    }\n\n    // gamma\n\t//col = pow(col,vec3(0.4545));\n\n    // vignetting\t\n\t//col *= 0.5 + 0.5*pow( (xy.x+1.0)*(xy.y+1.0)*(xy.x-1.0)*(xy.y-1.0), 0.1 );\n\t\n    #ifdef STEREO\t\n    //col *= vec3( isCyan, 1.0-isCyan, 1.0-isCyan );\t\n\t#endif\n\t\n\tfragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const vec3 DARKGREY = vec3(0.1);\nconst vec3 LIGHTGREY = vec3(0.2);\nconst vec3 WHITE = vec3(1);\nconst vec3 AMBER = vec3(1, 0.49, 0);\nconst float TAU =  3.14159 * 2.0;\n\nvec3 getRayDirection( in vec2 rez, in vec2 mouse, in vec2 pos,in vec3 ro) {\n\tvec2 s = pos*vec2(rez.x/rez.y,1.0);\n\tfloat theta = (mouse.x / rez.x) * TAU;\n    float height = (mouse.y / rez.y) - 0.5;\n    vec2 sc = vec2(sin(theta), cos(theta));\n    vec3 ta = vec3(ro.x, ro.y + height * 20.0, ro.z - 10.0);\n    vec3  cw = ta-ro;\n    cw.xz = vec2(\n        cw.x * sc.y - cw.z * sc.x, \n        cw.x * sc.x + cw.z * sc.y\n    );\n    \n    cw = normalize(cw);\n\tvec3  cp = vec3(0.0, 1.0,0.0);\n\tvec3  cu = normalize( cross(cw,cp) );\n\tvec3  cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( s.x*cu + s.y*cv + 2.0*cw );\n    return rd;\n}\n\nfloat length2(vec2 v) {\n    return v.x * v.x + v.y * v.y;\n}\n\nfloat length2(vec3 v) {\n    return v.x * v.x + v.y * v.y + v.z * v.z;\n}\n\nvoid intersectRayPlane(in vec3 orig, in vec3 dir, in vec3 planeOrig, in vec3 planeNormal, out float intersectionDistance) {\n\tfloat d = dot(dir, planeNormal);\n\tfloat Epsilon = 1e-6;\n    if(d < Epsilon) {\n\t\tintersectionDistance = dot(planeOrig - orig, planeNormal) / d;\n\t}\n}\n","name":"Common","description":"","type":"common"}]}