{"ver":"0.1","info":{"id":"XdcfRj","date":"1533174645","viewed":140,"name":"Camera Basics 1 (raycasting)","username":"littlemilk","description":"simplest 3d (https://www.youtube.com/watch?v=dKA5ZVALOhs)(https://www.youtube.com/watch?v=PBxuVlp7nuM)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycasting","camera","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 rayOrigin, vec3 rayDirection, vec3 point) {\n    \n    //using parallelagram formula to calc height\n\treturn length( cross(point-rayOrigin, rayDirection) )/ length(rayDirection);\n}\n\nfloat DrawPoint(vec3 rayOrigin, vec3 rayDirection, vec3 point) {\n    \n    float d = DistLine(rayOrigin, rayDirection, point);\n    d = smoothstep(.06, .05, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float time = iTime;\n    \n    vec3 rayOrigin = vec3(3.*sin(time), -3.*cos(time), -3.);\n    vec3 cameraPlane = vec3(uv.x, uv.y, -2.);\n    \n    vec3 lookAt = vec3(.5);\n    \n    float zoom = .5;\n    \n    vec3 forward = normalize(lookAt-rayOrigin);\n    vec3 right = cross(vec3(0.,1.,0.), forward);\n    vec3 up = cross(forward, right);\n    \n    vec3 center = rayOrigin + forward*zoom;\n    vec3 intersection = center + uv.x*right + uv.y*up;\n    vec3 rayDirection = intersection - rayOrigin;    \n\n    float d = 0.;\n    \n    d += DrawPoint(rayOrigin, rayDirection, vec3(0.,0.,0.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(0.,0.,1.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(0.,1.,0.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(0.,1.,1.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(1.,0.,0.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(1.,0.,1.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(1.,1.,0.));\n    d += DrawPoint(rayOrigin, rayDirection, vec3(1.,1.,1.));\n    \n    // Output to screen\n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}