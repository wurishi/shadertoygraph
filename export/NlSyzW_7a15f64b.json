{"ver":"0.1","info":{"id":"NlSyzW","date":"1649282399","viewed":312,"name":"cosmic horror","username":"Carandiru","description":"space, the final .....","likes":11,"published":3,"flags":40,"usePreview":0,"tags":["cosmic","horror","cult"],"hasliked":0,"parentid":"sdBcWc","parentname":"Tentacles of Balance"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/NlSyzW\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n// cosmic horror //\n//       +       //\n//      / \\      //\n//     /   \\     //\n//    /     \\    //\n//   /       \\   //\n//  /         \\  //\n// +-----------+ //\n//               //\n\n\n\nvec3 anamorphicFlare(in vec2 uv)\n{\n\tfloat flare = textureLod(iChannel1, uv / vec2(128, 1), 0.0).a;\n\n\tvec3 color = flare * vec3(1.055, 0.0, 6.0) * 8e-3;\n\n\t// Compress dynamic range.\n    color.rgb *= 6.0;\n\tcolor.rgb = 1.5 * color.rgb / (1.0 + color.rgb);\n\n   return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = iTime;\n    \n    vec3 color = vec3(0);\n          \n    vec2 s = textureLod(iChannel0, uv, 0.0f).ra;\n    \n    //fragColor = s.xxxx;\n    //return;\n    \n    color += vec3(max(0.0f, s.x - pow(s.y, 4.0f)));\n    \n    color = sqrt(color) + s.x * s.y * smoothstep(0.0f, 1.5f, fract(4.25f*t)) * GOOD_COLOR;\n    color *= vec3(1.055/6.0f, 0.0f, 1.0f);\n    \n    float noise_dither = textureLod(iChannel2, fragCoord / 1024.0f, 0.0).r * (17.0f/255.0f);\n\n    float luma = dot(color, LUMA);\n    color = max(vec3(0), mix(color - noise_dither, color + noise_dither, luma)); // shade dithering by luminance (only clamping negative values)\n\n    vec3 flare = anamorphicFlare(uv);\n    color += color * clamp( flare + flare * noise_dither, 0.0f, 1.0f);\n        \n    fragColor = vec4(color,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159265\n#define LUMA vec3(0.2126f, 0.7152f, 0.0722f)\n#define GOLDEN_RATIO (1.61803398874989484820)\n#define GOOD_COLOR (vec3(239.0/255.0, 6.0/255.0, 105.0/255.0))\n\n// https://www.shadertoy.com/view/MtjBWz - thanks iq\nvec3 rndC(in vec3 voxel) // good function, works with any texture sampling that uses linear interpolation\n{\n    voxel = voxel + 0.5f;\n    vec3 ivoxel = floor( voxel );\n    vec3 fvoxel = fract( voxel );\n    \n\tvoxel = ivoxel + fvoxel*fvoxel*(3.0f-2.0f*fvoxel); \n \n\treturn(voxel - 0.5f);  // returns in same unit as input, voxels\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.14159265\n\n// https://www.shadertoy.com/view/sdBcWc\nvec3 grad(float t){\n    float r = sin(t-pi)+0.1*sin(iTime);\n    float g = sin(t+0.35*pi);\n    float b = sin(t+0.5*pi);\n    vec3 color = vec3(r,g,b);\n    return color;\n}\n// https://www.shadertoy.com/view/sdBcWc\nfloat tent(in float a, in vec2 p, in float end){\n    \n    float y = (0.5+(0.25*sin(a*5.0*p.x+0.5*iTime)));\n    float x = p.x+0.01*sin(0.1*iTime);\n    \n    vec2 point = vec2(x,y);\n    float d = distance(p,point);\n    \n    vec3 color = grad(5.0*point.x-end);\n    float s = dot(color, LUMA);\n    s *= abs(0.03/(max(0.01f,d)));\n    s *= smoothstep(-0.9f, -0.25f, -d);\n    \n    return max(0.0f, s);\n}\n\nfloat noise(in vec3 uv)\n{\n    return(textureLod(iChannel0, rndC(vec3(uv.xy * iResolution.xy, uv.z))/vec3(iResolution.xy, 1.0f), 0.0f).r);\n}\n\nconst float maximum = 1.0/1.0 + 1.0/2.0 + 1.0/3.0 + 1.0/4.0 + 1.0/5.0 + 1.0/6.0 + 1.0/7.0 + 1.0/8.0;\nfloat fBm(vec3 uv)\n{\n    float sum = 0.0;\n    for (float i = 0.; i < 8.; ++i) {\n        float f = i+1.;\n        sum += noise(uv*f) / f;\n    }\n    return sum / maximum;\n}\n\n// stars - https://www.shadertoy.com/view/flcSz2\nfloat rand(in vec2 st) {\n  vec2 r = fract(sin(st) * 2.7644437);\n  return fract(r.y * 276.44437 + r.x);\n}\n\nfloat particles(in vec2 st) {\n  float r = rand(floor(st));\n  return 0.01 + smoothstep(0.995, 1.0, r) * max(0.0, sin(r * 34433.0 + iTime));\n}\n\nconst vec3 BLUE = vec3(0.0, 0.1, 0.2);\n\n#define p(st) particles(st)\nvec3 avg(in vec2 st, in float a) {\n  vec2 A = vec2(0.0, a);\n  return BLUE * (p(st) + p(st + A) + p(st + A.yx) + p(st - A) + p(st - A.yx));\n}\n\nvec3 stars(in vec2 st) {\n  vec3 color = vec3(0.0);\n  for (float i = 5.0; i > 0.0; --i) color += mix(color, avg(st, i), 1.5);\n  return color + p(st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = iTime;\n    \n    vec3 color = vec3(0);\n        \n    float f = 0.0f;\n    \n    f = fBm(vec3((uv + t * vec2(0.25f * GOLDEN_RATIO,0.0f)) * 0.15f, t * 0.01815f)); \n    color += f * 0.5f;\n    color *= f * 0.5f;\n    \n    f = fBm(vec3((uv + t * vec2(0.125f * GOLDEN_RATIO,0.0f)) * 0.25f, t * 0.0091f)) * (1.0f-f); \n    color += f * 0.5f;\n    color *= f * 0.5f;\n    \n    color += stars((uv + t * vec2(0.1f, 0.0f)) * 250.0f) * 9.0f;\n    \n    f = fBm(vec3((uv + t * vec2(0.0625f * GOLDEN_RATIO,0.0f)) * 0.1f, t * 0.0041f)); \n    color += f * 0.5f;\n    color *= f;\n    color += f * f * f;\n    \n    \n    \n    float s = 0.0f;\n    \n    s += tent(-1.0 - f, 1.0f-uv, 4.0);\n    s += tent(1.2 + f*f, uv, 1.0);\n    s += tent(1.2 - f*0.5f, uv, 1.0);\n    s += tent(-1.5 - f, 1.0f-uv, 4.0);\n    s += tent(1.8 + f*f, uv, 1.0);\n    s += tent(1.8 - f*0.5f, uv, 1.0);\n    \n    color *= 1.0f - (s * 0.5f);\n    \n    f = fBm(vec3((uv + t * vec2(0.0625f * GOLDEN_RATIO,0.0f)) * 0.15f, t * (s * 0.00001f + 0.0019f))); \n    color += (f * 0.125f);\n    color *= f * 0.25f;\n    \n    color *= 1.0f - (s);\n    \n    f = fBm(vec3((uv + t * vec2(0.166666f * GOLDEN_RATIO,0.0f)) * 0.125f, t * 0.000125f)); \n    color += (f * 0.5f) * (f) * f;\n    \n    fragColor = vec4(color,s);\n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n// asd\nfloat anamorphicMask(in float luminance)\n{\n\tfloat mask = 1.5f * luminance*luminance*luminance;\n\t\n\tmask = smoothstep(0.0f, 1.0f, mask);\n\n\tmask = pow(mask, 3.0);\n\tmask = pow(mask, 24.0) * 14.0;\n\n\treturn mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 s = textureLod(iChannel0, uv, 0.0f).ra;\n    \n    fragColor = vec4(anamorphicMask(s.x),0.0,0.0,s.y);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n// asd\nvec2 anamorphicReduction(in vec2 uv)\n{\n\tvec2 color = vec2(0);\n\tfloat s = iResolution.y / 450.0;\n\n\t// Horizontal reduction for anamorphic flare.\n    for (int x = 0; x < 8; x++)\n    {\n        color += 0.25 * textureLod(iChannel0,\n            vec2(128.0, 1.0) * uv + (0.5 * s * vec2(float(x) - 3.5f, 0)) / iResolution.xy, 0.0).ra;\n    }\n\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 s = anamorphicReduction(uv);\n    \n    fragColor = vec4(s.x,0.0,0.0,s.y);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// learning from https://www.shadertoy.com/view/Xd2GW3\n\nfloat hash(float x)\n{\n    return sin((textureLod(iChannel0, vec2(x * 115.5782 * GOLDEN_RATIO * GOLDEN_RATIO), 0.0f).r * 2.0f - 1.0f) * pi);\n}\n\nfloat nse(float t)\n{\n    float fl = floor(t);\n    return mix(hash(fl), hash(fl + 1.0), smoothstep(0.0, 1.0, fract(t)));\n}\n\nfloat quan(float x, float v)\n{\n    return floor(x * v) / v;\n}\n\nfloat s(float t)\n{\n    float h = 0.0;\n    float v = 0.0;\n\n    h = 0.1 * GOLDEN_RATIO;\n    v += (nse(t * 200.0 - h) + nse(t * 400.0 + h)) * sin(t * 10.0 * GOLDEN_RATIO);\n    \n    h = 0.7 * GOLDEN_RATIO;\n    v += nse(t * 400.0 - h) * sin(t * 16.0 * GOLDEN_RATIO);\n    \n    h = 0.6 * GOLDEN_RATIO;\n    v += nse(t * 600.0 - h) * sin(t * 0.54 * GOLDEN_RATIO);\n    \n    return v;\n}\n\nvec2 echo(float t)\n{\n    vec2 v;\n    \n    float a = 0.5, et = 0.1, fb = 0.5;\n    v = vec2(s(t));\n    v = v.yx + s(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.2;\n    v = v.yx + s(t - et) * a * vec2(0.5, 1.0); a *= -fb; et += 0.2;\n    v = v    + s(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.3;\n    v = v.yx + s(t - et) * a * vec2(1.0, 0.5); a *= -fb; et += 0.2;\n    v = v    + s(t - et) * a * vec2(0.5, 1.0); a *= fb; et += 0.3;\n    v = v    + s(t - et) * a * vec2(1.0, 0.5); a *= -fb; et += 0.3;\n    v = v.yx + s(t - et) * a * vec2(0.5, 1.0); a *= fb; et += 0.2;\n    v = v.yx + s(t - et) * a * vec2(1.0, 0.5); a *= -fb; et += 0.3;\n    v = v    + s(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.4;\n    v = v.yx + s(t - et) * a * vec2(0.5, 1.0); a *= -fb; et += 0.3;\n    v = v.yx + s(t - et) * a * vec2(1.0, 0.5); a *= fb; et += 0.2;\n    \n    return v;\n}\n\nvec2 mainSound( int s, float t )\n{\n    vec2 v = vec2(0.0);\n    v = echo(t) * 0.075;\n    \n    return vec2(v);\n}","name":"Sound","description":"","type":"sound"}]}