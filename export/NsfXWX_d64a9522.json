{"ver":"0.1","info":{"id":"NsfXWX","date":"1619307640","viewed":44,"name":"CG task2 - Kizilov","username":"PavelCG","description":"CG task 2 - Икосаэдр & Огненный шар","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cgtask2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//CONSTANTS\nconst vec3 CAMERA_POSITION =  vec3(-4, 1.5, 6);\nconst float INF = 1e10;\nconst int N_STEPS = 10;\nconst float NOISE_AMP = 0.05;\nconst float NOISE_FREQ = 3.0;\nconst float TABLE_RAD = 30.0;\nconst int MARCH_STEPS = 3;\nconst int NOISE_STEPS = 10;\nconst float EPS = 0.001;\n\nconst int EMISSION = 0;\nconst int DIFFUSION = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\nconst int N_LIGHT_SOURCES = 2;\nconst vec3 FIREBALL_ANIM = vec3(0.0, -3.0, 1.5);\n\nvec3 rand_dir;\n\nstruct Sphere {\n    vec3 pos;\n    vec3 color;\n    float radius;\n    float atten;\n};\n\nSphere LIGHT_SOURCES[N_LIGHT_SOURCES] = Sphere[N_LIGHT_SOURCES](\n    Sphere(vec3(2, 1.5, 0), vec3(0.6, 0.9, 0.5), 0.3, 12.0),\n    Sphere(vec3(-2, 1.6, -0.2), vec3(0.2, 0.5, 0.9), 0.2, 15.0)\n);\n\nSphere Fireball = Sphere(vec3(0.0,0.3,0.2), vec3(0.0), 0.4, 0.0);\n\n//TRACING\nfloat trace_plane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.1 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 world_pos = t * dir + pos;\n    if (dot(world_pos.xz, world_pos.xz) >= TABLE_RAD) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat trace_sphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float b = dot(pos, dir);\n    float discr = b * b - dot(pos, pos) + r * r;\n    if (discr < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(discr);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(discr);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat trace_triangle(vec3 vertex0, vec3 vertex1, vec3 vertex2, vec3 pos, vec3 dir, out vec3 normal)\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    normal = normalize(cross(v1,v2));\n    return t;\n}\n\nfloat trace_icosahedron(vec3 pos, vec3 dir, out vec3 normal){\n    vec3 vertexes[12];\n    float rot = 0.0;\n    float e = 1.5;\n    vec3 shift = vec3(0.1, -0.05, 0.0);\n    float size = 1.2;\n    vertexes[0] = size*vec3(0.019649, 0.840808, 0.448559)+shift;\n    vertexes[1] = size*vec3(0.828664, 0.531788, -0.051401)+shift;\n    vertexes[2] = size*vec3(0.019649, 0.840809, -0.551401)+shift;\n    vertexes[3] = size*vec3(-0.480351, 0.031790, 0.757579)+shift;\n    vertexes[4] = size*vec3(0.019649, -0.777226, 0.448559)+shift;\n    vertexes[5] = size*vec3(0.828664, -0.468209, -0.051401)+shift;\n    vertexes[6] = size*vec3(-0.789368, 0.531788, -0.051401)+shift;\n    vertexes[7] = size*vec3(-0.480351, 0.031791, -0.860501)+shift;\n    vertexes[8] = size*vec3(0.019649, -0.777226, -0.551401)+shift;  \n    vertexes[9] = size*vec3(-0.789368, -0.468209, -0.051401)+shift;\n    vertexes[10] = size*vec3(0.519654, 0.031790, 0.757579)+shift;\n    vertexes[11] = size*vec3(0.519654, 0.031791, -0.860501)+shift;\n    \n    float t = INF;\n    vec3 t1norm;\n    vec3 t2norm;\n    vec3 t3norm;\n    vec3 t4norm;\n    vec3 t5norm;\n    vec3 t6norm;\n    vec3 t7norm;\n    vec3 t8norm;\n    vec3 t9norm;\n    vec3 t10norm;\n    vec3 t11norm;\n    vec3 t12norm;\n    vec3 t13norm;\n    vec3 t14norm;\n    vec3 t15norm;\n    vec3 t16norm;\n    vec3 t17norm;\n    vec3 t18norm;\n    vec3 t19norm;\n    vec3 t20norm;\n    \n    float t1 = trace_triangle(vertexes[3], vertexes[10], vertexes[0], pos, dir, t1norm);\n    if (t1 < t && t > 0.0) {\n        t = t1;\n        normal = t1norm;\n    }\n    float t2 = trace_triangle(vertexes[3], vertexes[10], vertexes[4], pos, dir, t2norm);\n    if (t2 < t && t > 0.0) {\n        t = t2;\n        normal = t2norm;\n    }\n    float t3 = trace_triangle(vertexes[10], vertexes[0], vertexes[1], pos, dir, t3norm);\n    if (t3 < t && t > 0.0) {\n        t = t3;\n        normal = t3norm;\n    }\n    float t4 = trace_triangle(vertexes[10], vertexes[1], vertexes[5], pos, dir, t4norm);\n    if (t4 < t && t > 0.0) {\n        t = t4;\n        normal = t4norm;\n    }\n    float t5 = trace_triangle(vertexes[10], vertexes[5], vertexes[4], pos, dir, t5norm);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = t5norm;\n    }\n    float t6 = trace_triangle(vertexes[4], vertexes[5], vertexes[8], pos, dir, t6norm);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = t6norm;\n    }\n    float t7 = trace_triangle(vertexes[4], vertexes[9], vertexes[8], pos, dir, t7norm);\n    if (t7 < t && t > 0.0) {\n        t = t7;\n        normal = t7norm;\n    }\n    float t8 = trace_triangle(vertexes[4], vertexes[3], vertexes[9], pos, dir, t8norm);\n    if (t8 < t && t > 0.0) {\n        t = t8;\n        normal = t8norm;\n    }\n    float t9 = trace_triangle(vertexes[5], vertexes[1], vertexes[11], pos, dir, t9norm);\n    if (t9 < t && t > 0.0) {\n        t = t9;\n        normal = t9norm;\n    }\n    float t10 = trace_triangle(vertexes[5], vertexes[8], vertexes[11], pos, dir, t10norm);\n    if (t10 < t && t > 0.0) {\n        t = t10;\n        normal = t10norm;\n    }\n    float t11 = trace_triangle(vertexes[1], vertexes[11], vertexes[2], pos, dir, t11norm);\n    if (t11 < t && t > 0.0) {\n        t = t11;\n        normal = t11norm;\n    }\n    float t12 = trace_triangle(vertexes[1], vertexes[0], vertexes[2], pos, dir, t12norm);\n    if (t12 < t && t > 0.0) {\n        t = t12;\n        normal = t12norm;\n    }\n    float t13 = trace_triangle(vertexes[0], vertexes[3], vertexes[6], pos, dir, t13norm);\n    if (t13 < t && t > 0.0) {\n        t = t13;\n        normal = t13norm;\n    }\n    float t14 = trace_triangle(vertexes[0], vertexes[6], vertexes[2], pos, dir, t14norm);\n    if (t14 < t && t > 0.0) {\n        t = t14;\n        normal = t14norm;\n    }\n    float t15 = trace_triangle(vertexes[7], vertexes[2], vertexes[6], pos, dir, t15norm);\n    if (t15 < t && t > 0.0) {\n        t = t15;\n        normal = t15norm;\n    }\n    float t16 = trace_triangle(vertexes[7], vertexes[6], vertexes[9], pos, dir, t16norm);\n    if (t16 < t && t > 0.0) {\n        t = t16;\n        normal = t16norm;\n    }\n    float t17 = trace_triangle(vertexes[7], vertexes[9], vertexes[8], pos, dir, t17norm);\n    if (t17 < t && t > 0.0) {\n        t = t17;\n        normal = t17norm;\n    }\n    float t18 = trace_triangle(vertexes[7], vertexes[8], vertexes[11], pos, dir, t18norm);\n    if (t18 < t && t > 0.0) {\n        t = t18;\n        normal = t18norm;\n    }\n    float t19 = trace_triangle(vertexes[7], vertexes[11], vertexes[2], pos, dir, t19norm);\n    if (t19 < t && t > 0.0) {\n        t = t19;\n        normal = t19norm;\n    }\n    float t20 = trace_triangle(vertexes[3], vertexes[6], vertexes[9], pos, dir, t20norm);\n    if (t20 < t && t > 0.0) {\n        t = t20;\n        normal = t20norm;\n    }\n    \n    \n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    \n    return t;  \n}\n\nfloat trace_cylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    const float R = 1.5f;\n    float tableT = (-1.0 - pos.y) / dir.y;\n    if (tableT < 0.0) {\n        return INF;\n    }\n    vec3 final_pos = pos + dir * tableT;\n    if (dot(final_pos.xz, final_pos.xz) < R * R)  {\n        normal = vec3(0, 1, 0);\n        return tableT;\n    }\n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b  - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 world_pos = pos + t * dir;\n        normal = normalize(vec3(world_pos.x, 0, world_pos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool is_occluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 icosahedron_normal;\n    float icosahedronT = trace_icosahedron(pos, dir, icosahedron_normal);\n    if (icosahedronT < dist) {\n        return true;\n    }\n    vec3 cyl_normal;\n    float cylT = trace_cylinder(pos, dir, cyl_normal);\n    if (cylT < dist) {\n        return true;\n    }\n    return false;\n}\n\n//LIGHTNING\nvec3 compute_lightning(vec3 pos, vec3 color, vec3 normal) {\n    vec3 res;\n    for (int i = 0; i < N_LIGHT_SOURCES; i++) {\n        vec3 toLight = LIGHT_SOURCES[i].pos - pos;\n        float distSqr = dot(toLight, toLight);\n        float atten = is_occluded(pos, LIGHT_SOURCES[i].pos + rand_dir * LIGHT_SOURCES[i].radius) ? 0.0 : LIGHT_SOURCES[i].atten / distSqr;\n        res += max(0.0, dot(normal, normalize(toLight))) * atten * LIGHT_SOURCES[i].color;\n\n    }\n    return color * (res + texture(iChannel1, normal).rgb * 0.5);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n# define mod289(x) (x - floor(x * (1.0 / 100.0)) * 100.0)\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n//NOISE\nfloat snoise(vec3 v)\n{\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0);\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\tvec3 i  = floor(v + dot(v, C.yyy));\n\tvec3 x0 = v - i + dot(i, C.xxx);\n\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min(g.xyz, l.zxy);\n\tvec3 i2 = max(g.xyz, l.zxy);\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy;\n\tvec3 x3 = x0 - D.yyy;\n\n\ti = mod289(i);\n\tvec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\tfloat n_ = 0.142857142857;\n\tvec3  ns = n_ * D.wyz - D.xzx;\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_);\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\tvec4 b0 = vec4(x.xy, y.xy);\n\tvec4 b1 = vec4(x.zw, y.zw);\n\tvec4 s0 = floor(b0) * 2.0 + 1.0;\n\tvec4 s1 = floor(b1) * 2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\tvec3 p0 = vec3(a0.xy, h.x);\n\tvec3 p1 = vec3(a0.zw, h.y);\n\tvec3 p2 = vec3(a1.xy, h.z);\n\tvec3 p3 = vec3(a1.zw, h.w);\n\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat turbulence(vec3 position, float minFreq, float maxFreq, float qWidth)\n{\n\tfloat value = 0.0;\n\tfloat cutoff = clamp(0.5/qWidth, 0.0, maxFreq);\n\tfloat fade;\n\tfloat fOut = minFreq;\n\tfor(int i=NOISE_STEPS ; i>=0 ; i--)\n\t{\n\t\tif(fOut >= 0.5 * cutoff) break;\n\t\tfOut *= 2.0;\n\t\tvalue += abs(snoise(position * fOut))/fOut;\n\t}\n\tfade = clamp(2.0 * (cutoff-fOut)/cutoff, 0.0, 1.0);\n\tvalue += fade * abs(snoise(position * fOut))/fOut;\n\treturn 3.0-value;\n}\n\nfloat sphere_dist(vec3 position, float r) {\n\treturn length(position - Fireball.pos) - r;\n}\n\n\n#define Color1 vec3(1.0, 1.0, 1.0)\n#define Color2 vec3(1.0, 0.5, 0.2)\n#define Color3 vec3(1.0, 0.03, 0.0)\n#define Color4 vec3(0.1, 0.02, 0.0)\n\n#define saturate(a) clamp(a, 0.0, 1.0)\n\nvec3 shade(float distance) {\n\tfloat c1 = saturate(distance*5.0 + 0.5);\n\tfloat c2 = saturate(distance*5.0);\n\tfloat c3 = saturate(distance*3.4 - 0.5);\n\n\tvec3 a = mix(Color1,Color2, c1);\n\tvec3 b = mix(a,     Color3, c2);\n\treturn \t mix(b,     Color4, c3);\n}\n\nfloat render_ball(vec3 position, out float distance) {\n\tfloat noise = turbulence(position * NOISE_FREQ + FIREBALL_ANIM * 1.0, 0.1, 1.5, 0.03) * NOISE_AMP;\n\tnoise = saturate(abs(noise));\n\n\tdistance = sphere_dist(position, Fireball.radius) - noise;\n\treturn noise;\n}\n\n//RAYMARCHING\nvec3 ray_march(vec3 ray_origin, vec3 ray_step) {\n\tvec3 position = ray_origin;\n\tfloat distance;\n\tfloat displacement;\n\tfor(int step = 0; step < MARCH_STEPS; step++)\n\t{\n\t\tdisplacement = render_ball(position, distance);\n\t\tif(distance < 0.05) {\n            break;\n        }\n\t\tposition += ray_step * distance;\n\t}\n\treturn mix(shade(displacement), vec3(0, 0, 0), float(distance >= 0.5));\n}\n\nbool intersect_sphere(vec3 ro, vec3 rd, vec3 pos, float radius, out vec3 i_point) {\n\tvec3 rel_distance = (ro - pos);\n\tfloat b = dot(rel_distance, rd);\n\tfloat c = dot(rel_distance, rel_distance) - radius * radius;\n\tfloat d = b*b - c;\n\ti_point = ro + rd*(-b - sqrt(d));\n\treturn d >= 0.0;\n}\n\nvec3 get_fireball_col(vec2 p) {\n\tfloat rotx = 0.6;\n\tfloat roty = 0.8;\n\tfloat zoom = 10.0;\n\tvec3 ro = zoom * normalize(vec3(cos(roty), cos(rotx), sin(roty)));\n\tvec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n\tvec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\n\tvec3 col;\n\tvec3 origin;\n\n\tif(intersect_sphere(ro, rd, Fireball.pos, Fireball.radius + NOISE_AMP*12.0, origin))\n\t{\n\t\tcol = ray_march(origin, rd);\n\t}\n\n    return vec3(0, col.g, col.b);\n}\n\nfloat burn_snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv);\n\tf = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nvec3 burn (vec2 p)\n{\n\tfloat color1 = 4.0 - (2.0 * length(2.5 * p));\n\tvec3 coord = vec3(atan(p.x, p.y) / 6.2832 + 0.5, length(p) * 0.4, 0.5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5*(1.5 / power) * burn_snoise(coord + vec3(0.0, -0.05, -0.01), power * 16.0);\n\t}\n\tcolor1 *= 0.5;\n\n    return vec3( color1, pow(max(color1, 0.0), 2.0)*0.4, pow(max(color1, 0.0), 3.0) * 0.05);\n    return vec3( 0, 0, pow(max(color1, 0.0), 3.0) * 0.15);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat get_random(float frame) {\n        return fract(sin(dot(vec3(frame), vec3(12.9898,78.233,45.5432))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 rand_vals = vec3(get_random(float(iFrame)), get_random(float(iFrame + 5)), get_random(float(iFrame + 15)));\n    rand_dir = normalize(rand_vals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (rand_vals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front_vec = normalize(vec3(-CAMERA_POSITION));\n    vec3 up_vec = vec3(0, 1, 0);\n    vec3 right_vec = normalize(cross(front_vec, up_vec));\n    up_vec = normalize(cross(right_vec, front_vec));\n    vec3 view_vec = normalize(front_vec + right_vec * uv.x + up_vec * uv.y);\n    vec3 cur_pos = CAMERA_POSITION;\n    vec3 cur_dir = view_vec;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    vec4 col = vec4(0, 0, 0, 0);\n\n    float n1 = AIR_N;\n    float n2 = AIR_N;\n\n    vec3 color_mult = vec3(1, 1, 1);\n\n    for (int i = 0; i < N_STEPS; i++) {\n        float t = INF;\n        int material = EMISSION;\n        vec3 color, normal, plane_normal;\n        \n        float planeT = trace_plane(cur_pos, cur_dir, plane_normal);\n        if (planeT < t) {\n            t = planeT;\n            material = DIFFUSION;\n            vec3 world_pos = t * cur_dir + cur_pos;\n            color = texture(iChannel0, world_pos.xz * 0.2).rgb;\n            normal = plane_normal;\n            \n        }\n        \n        for (int i = 0; i < N_LIGHT_SOURCES; i++) {\n            vec3 light_normal;\n            float lightT = trace_sphere(cur_pos - LIGHT_SOURCES[i].pos, cur_dir, LIGHT_SOURCES[i].radius, light_normal);\n            if (lightT < t) {\n                t = lightT;\n                material = EMISSION;\n                color = LIGHT_SOURCES[i].color;\n                normal = light_normal;\n            }\n        }\n        \n        vec3 cyl_normal;\n        float cylT = trace_cylinder(cur_pos, cur_dir, cyl_normal);\n        if (cylT < t) {\n            vec3 world_pos = t * cur_dir + cur_pos;\n            t = cylT;\n            material = DIFFUSION;\n            color = texture(iChannel2, world_pos.xz * world_pos.y).rgb;\n            normal = cyl_normal;\n        }\n        \n        vec3 icosahedron_normal;\n        float IcosahedronT = trace_icosahedron(cur_pos, cur_dir, icosahedron_normal);\n        if (IcosahedronT < t) {\n            t = IcosahedronT;\n            normal = icosahedron_normal;\n            if (rand_vals.x < GLASS_R) {\n                material = REFLECTION;\n            } else {\n                color_mult *= vec3(0.7, 0.9, 0.8);\n                material = REFRACTION;\n                vec2 p = (fragCoord.xy / iResolution.xy) - 0.5;\n                p.x *= iResolution.x / iResolution.y;\n                vec3 fb = get_fireball_col(p);\n                vec3 fo = burn(p);\n                col += 0.4 * vec4(mix(fb, fo * vec3(0.7, 0.5, 0.5), 0.7), 0.8);\n                if (dot(cur_dir, normal) > 0.0) {\n                    n2 = AIR_N;\n                } else {\n                    n2 = GLASS_N;\n                }\n            }\n        }\n        \n        //COMPUTE COLOR\n        if (t != INF) {\n            vec3 world_pos = t * cur_dir + cur_pos;\n            col += vec4(texture(iChannel0, world_pos.xz).rgb * 0.1, 0.0);\n            if (material == EMISSION) {\n                col += vec4(color * color_mult * 0.5, 0);\n                break;\n            } else if (material == DIFFUSION) {\n                col += vec4(compute_lightning(world_pos, color, normal) * color_mult, 0);\n                break;\n            } else if (material == REFLECTION) {\n                cur_dir = reflect(cur_dir, normal);\n                cur_pos = world_pos + cur_dir * 1e-3;\n            } else if (material == REFRACTION) {\n                cur_dir = refraction(cur_dir, normal, n1, n2);\n                cur_pos = world_pos + cur_dir * 1e-3;\n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        } else {\n            col += vec4(texture(iChannel1, cur_dir).rgb * color_mult * 0.2, 0);\n        }\n    }\n    fragColor = vec4(col);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}