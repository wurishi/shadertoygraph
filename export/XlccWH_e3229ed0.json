{"ver":"0.1","info":{"id":"XlccWH","date":"1532363205","viewed":8107,"name":"[SH18] Rabbit Character","username":"fizzer","description":"I tried to create some kind of character using signed distance fields, and came up with this rabbit.\nThis wasn't originally an SH18, but I decided to put it in (actually I hadn't realised that there is a new competition happening until after I made it).","likes":126,"published":1,"flags":0,"usePreview":1,"tags":["sdf","cartoon","character","rabbit","sh18"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float time;\n\n// Polynomial smooth min (k = 0.1) (from IQ)\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat smax(float a,float b, float k)\n{\n    return -smin(-a,-b,k);\n}\n\nmat2 rotmat(float a)\n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat cylinder(vec3 p,vec3 dir,float h,float r)\n{\n    float t=dot(p,dir);\n    float d=distance(p,dir*t);\n    return length(max(abs(vec2(d,t))-vec2(r,h),vec2(0)));\n    d=max(d,-t);\n    d=max(d,t-h);\n    return d;\n}\n\nfloat pupdist=1e4;\n\nfloat rabdist(vec3 p)\n{\n    float an=.5*.5*2.*6. +iMouse.x/iResolution.x*6.;\n    p.xz=mat2(cos(an),sin(an),sin(an),-cos(an))*p.xz;\n    \n    float time2=time*2.4;\n\n    p.y+=2.3;\n    p.xy*=rotmat(cos(time2+1.)*.04);\n    p.y-=2.3;\n\n    vec3 op=p;\n\n    vec3 p2=p;\n    p2.xy*=rotmat(cos(time2)*.1);\n\n    vec3 p3=p;\n    p3.xy*=rotmat(cos(time2-.0-length(p)/2.)*.13);\n\n    float d=1e4;\n    p.x=abs(p.x);\n    p2.x=abs(p2.x);\n    p3.x=abs(p3.x);\n\n    d=smin(length(p2-vec3(-.75,0.,-.1))-.4,length(p2-vec3(.75,0.,-.1))-.5,2.);\n    d=smin(d,length(p2-vec3(0,0.4,-.1))-.9,1.6);\n    d+=.1;  \n    \n    // Ears 1\n    d=smin(d,distance(vec3(.7,clamp(p3.y,0.,2.2),0.),p3.xyz)-.4,.14);   \n    d=smax(d,-(length(p3-vec3(.7,1.7,-0.5))-.5),.2);\n\n    // Neck\n    d=smin(d,distance(vec3(0.,clamp(p.y,-1.6,-1.1),0.),p.xyz)-.6,.04);   \n    \n    // Legs\n    vec3 p4=op;\n    float ld=-.75;\n    p4.y-=ld;\n    p4.yz*=rotmat(cos(time*2.+3.1415926/1.*0.)*.1);\n    p4.y+=ld;\n    p4.y-=max(0.,cos(time*2.+3.1415926/2.))*.1;\n    d=smin(d,distance(vec3(.3,clamp(p4.y,-2.6,-2.),0.),p4.xyz)-.3,.1);\n    p4=op;\n    p4.y-=ld;\n    p4.yz*=rotmat(cos(time*2.+3.1415926/1.*1.)*.1);\n    p4.y+=ld;\n    p4.y-=max(0.,cos(time*2.+3.1415926/2.+3.1415926/1.*1.))*.1;\n    d=smin(d,distance(vec3(.3,clamp(p4.y,-2.6,-2.),0.),p4.xyz*vec3(-1,1,1))-.3,.1);   \n    \n    // Belly\n    d=smin(d,distance(vec3(0.,-1.5,-.2),p)-.5+cos(time*3.)*.03,.4);   \n\n    // Ears 2\n    d=smin(d,distance(vec3(1.1,2.3,-.1),p3)-.2,.8);   \n\n    // Tail\n    d=smin(d,distance(vec3(0,-1.7,.6),p)-.3,.1);   \n\n    vec3 q=vec3(0.35,.4,-1);\n\n    if(mod(time-1.,4.)>.04)\n    {\n        d=smax(d,-(cylinder(p2-q,normalize(q-p2),.3,.1)-.0001),.05);\n        d=smin(d,(length(p2-q*.9)-.2),.24);\n\n        // Eye pupils\n        if(op.x>0.)\n            pupdist=(length(p2-vec3(.39,.32,-1.))-.2);\n        else\n            pupdist=(length(p2-vec3(.28,.32,-1.02))-.2);\n\n        d=smin(d,pupdist,.005);\n    }\n\n    // Nose\n    d=smin(d,(length(p2-vec3(0,.1,-1.02))-.2),.02);\n\n    // Mouth (two states)\n    float d3=smax(-(length(p-vec3(-.05,-.29,-1.02))-.1),-(length(p-vec3(.05,-.29,-1.02))-.1),.1);\n\n    float d2=max(p2.z,distance(p2,vec3(clamp(p2.x,0.,.3),-.2,clamp(p2.z,-2.,2.)))+.01);\n\n    float time4=time/8.;\n    float gg=smoothstep(0.,1.,clamp((min(fract(time4),1.-fract(time4))-.25)*64.,0.,1.));\n    d=smax(d,mix(-d2,d3,gg),.1);\n\n    // Tooth\n    d=min(d,(length(p-vec3(.0,-.2,-1.02))-.08));\n\n    p.y+=.2;\n    p.xy*=rotmat(.4+cos(time2*2.)*.02);\n\n    // Arms\n    float armd=smin(distance(vec3(.2,clamp(p.y,-1.8,-0.),0.),p.xyz)-.2,\n                    distance(p,vec3(0.2,-1.7,0))-.2,.2);\n\n    d=smin(d,armd,.05);   \n\n    return d;\n}\n\nfloat floordist(vec3 p)\n{\n    return p.y+2.85;\n}\n\nfloat f(vec3 p)\n{\n    return min(rabdist(p),floordist(p));\n}\n\nfloat sceneDist(vec3 p) { return f(p); }\n\nvec3 sceneNorm(vec3 p)\n{\n    vec3 e=vec3(1e-2,0,0);\n    float d = sceneDist(p);\n    return normalize(vec3(sceneDist(p + e.xyy) - d, sceneDist(p + e.yxy) - d,\n                          sceneDist(p + e.yyx) - d));\n}\n\n\n// From simon green and others\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 18;\n    const float delta = 1.5;\n\n    float a = 0.0;\n    float weight = .5;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - sceneDist(p + n*d));\n        weight *= 0.6;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy * 2. - 1.) * .75;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 vt=uv;\n    float an;\n    time=iTime;\n\n    vec3 ro=vec3(0.,-.1,-8.+iMouse.y/iResolution.y*2.);\n    vec3 rd=normalize(vec3(uv,1.8));\n\n\n    float s=20.;\n\n    // Raymarching\n    float t=4.,d=0.;\n    for(int i=0;i<100;++i)\n    {\n        d=f(ro+rd*t);\n        if(d<1e-4)break;\n        if(t>10.)break;\n        t+=d;\n    }\n\n    // Directional light\n    float d2=f(ro+rd*t+normalize(vec3(1,2,-2))*5e-2);\n    float l=.5+.5*(d2-d)/5e-2;\n\n    vec3 rp=(ro+rd*t);\n\n    vec3 n=sceneNorm(rp);\n    \n    vec3 bcol=vec3(1,.4,.18);\n    vec3 col=bcol;\n\n    if(t<10.)\n    {\n        col=vec3(mix(.1,1.,smoothstep(0.0,.01,pupdist)));\n\n\n        if(floordist(rp)<rabdist(rp))\n            col=max(mix(bcol+(.1-length(vt.xy)/3.),vec3(1),.1),0.);\n\n        col*=l;\n\n        // Some fake bounce / environment lighting\n        col+=pow(clamp(-n.y,0.,1.),2.)*bcol/1.5;\n        if(n.y<.9999)col+=pow(clamp(-rp.y-1.8,0.,1.),4.)*vec3(1,.4,.18)/3.;\n\n        if(n.y>.99999)\n        {\n            // Floor shading\n            col*=pow(ambientOcclusion(rp,n),1.);\n            col*=mix(.7,1.,smoothstep(0.,2.,length(rp.xz)));\n        }\n        else\n        {\n            // Rabbit body shading\n            vec3 r=reflect(rd,n);\n            col += step(0.5,r.y)*.2*pow(clamp(0.,1.,1.-dot(-rd,n)),2.);\n            col*=pow(ambientOcclusion(rp,n),2.);\n        }\n    }\n    else\n    \tcol=.84*max(mix(bcol+(.1-length(vt.xy)/3.),vec3(1),.1),0.);\n    \n    fragColor.rgb=max(col,0.);\n    fragColor.rgb=sqrt(fragColor.rgb+.01);\n}\n\n\n","name":"Image","description":"","type":"image"}]}