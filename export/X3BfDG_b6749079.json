{"ver":"0.1","info":{"id":"X3BfDG","date":"1729862946","viewed":277,"name":"cyberpunk number font v2","username":"yasuo","description":"cyberpunk number font v2","likes":16,"published":3,"flags":0,"usePreview":0,"tags":["fonts","graphicdesign","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 256\n#define MAX_DIST 256.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define SUV(p) vec2(atan(p.x,p.z),acos(p.y))\n#define ZERO (min(iFrame,0))\n#define ch_0 0\n#define ch_1 1\n#define ch_2 2\n#define ch_3 3\n#define ch_4 4\n#define ch_5 5\n#define ch_6 6\n#define ch_7 7\n#define ch_8 8\n#define ch_9 9\n\nfloat grid(vec2 p){\n    vec2 prevP = p;\n    float thickness = 0.001;\n    float size = 0.1;\n    p+=vec2(size*0.5);\n    p = mod(p,size)-(size*0.5);\n    \n    float d = abs(p.x)-thickness;\n    float d2 = abs(p.y)-thickness;\n    d = min(d,d2);\n    p = prevP;\n    p.x = abs(p.x)-0.15;\n    d2 = B(p,vec2(thickness,100.));\n    d = min(d,d2);\n    return d;\n}\n\nfloat char0(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.2));\n    float d2 = B(p,vec2(0.1));\n    d = max(-d2,d);\n    p = prevP;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,2.)),d);\n    return d;\n}\n\nfloat char1(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.05,0.2));\n    float d2 = B(p-vec2(-0.075,0.15),vec2(0.025,0.05));\n    d = min(d,d2);\n    p = prevP;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,2.)),d);\n    return d;\n}\n\nfloat char2(vec2 p){\n    vec2 prevP = p;\n    p.y = abs(p.y);\n    float d = B(p-vec2(0.0,0.15),vec2(0.2,0.05));\n    \n    p = prevP;\n    p*=Rot(radians(50.));\n    float d2 = B(p,vec2(0.05,0.25));\n    d = min(d,d2);\n    p = prevP;\n    d2 = B(p-vec2(-0.15,0.075),vec2(0.05,0.025));\n    d = min(d,d2);\n    d2 = B(p-vec2(0.15,-0.075),vec2(0.05,0.025));\n    d = min(d,d2);\n    d = max(abs(p.x)-0.2,d);\n    \n    p = prevP;\n    d = max(-B(p,vec2(2.,0.02)),d);    \n    \n    return d;\n}\n\nfloat char3(vec2 p){\n    vec2 prevP = p;\n    p.y = abs(p.y);\n    float d = B(p-vec2(0.0,0.15),vec2(0.2,0.05));\n    p = prevP;\n    float d2 = B(p-vec2(0.15,0.0),vec2(0.05,0.2));\n    d = min(d,d2);\n    d2 = B(p-vec2(0.0,0.0),vec2(0.1,0.05));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x-=0.15;\n    p.y-=0.15;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,0.11)),d);      \n    \n    return d;\n}\n\nfloat char4(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.2,0.05));\n    p = prevP;\n    float d2 = B(p-vec2(0.15,0.0),vec2(0.05,0.2));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.15,0.1),vec2(0.05,0.1));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x+=0.15;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,0.11)),d);        \n    \n    return d;\n}\n\nfloat char5(vec2 p){\n    vec2 prevP = p;\n    p.y = abs(p.y);\n    float d = B(p-vec2(0.0,0.15),vec2(0.2,0.05));\n    \n    p = prevP;\n    p*=Rot(radians(-50.));\n    float d2 = B(p,vec2(0.05,0.25));\n    d = min(d,d2);\n    p = prevP;\n    d2 = B(p-vec2(-0.15,-0.075),vec2(0.05,0.025));\n    d = min(d,d2);\n    d = max(abs(p.x)-0.2,d);\n    \n    p = prevP;\n    d = max(-B(p,vec2(2.,0.02)),d);      \n    \n    return d;\n}\n\nfloat char6(vec2 p){\n    vec2 prevP = p;\n    p.y+=0.075;\n    p.y=abs(p.y)-0.075;\n    \n    float d = B(p,vec2(0.2,0.05));\n    p = prevP;\n    float d2 = B(p-vec2(-0.15,0.0),vec2(0.05,0.2));\n    d = min(d,d2);\n    d2 = B(p-vec2(0.15,-0.1),vec2(0.05,0.1));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x-=0.15;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,0.11)),d);       \n    \n    return d;\n}\n\nfloat char7(vec2 p){\n    vec2 prevP = p;\n    float d = B(p-vec2(0.0,0.15),vec2(0.2,0.05));\n    \n    p = prevP;\n    p.x-=0.05;\n    p*=Rot(radians(42.));\n    float d2 = B(p,vec2(0.05,0.35));\n    d = min(d,d2);\n    p = prevP;\n    d = max(abs(p.x)-0.2,d);\n    d = max(abs(p.y)-0.2,d);\n    \n    p = prevP;\n    p*=Rot(radians(-45.));\n    d = max(-B(p,vec2(0.02,0.11)),d);        \n    \n    return d;\n}\n\nfloat char8(vec2 p){\n    vec2 prevP = p;\n    p.y = abs(p.y)-0.15;\n    float d = B(p,vec2(0.2,0.05));\n    p = prevP;\n    p.x = abs(p.x);\n    float d2 = B(p-vec2(0.15,0.0),vec2(0.05,0.2));\n    d = min(d,d2);\n    p = prevP;\n    d2 = B(p-vec2(-0.15,0.1),vec2(0.05,0.1));\n    d = min(d,d2);\n    d2 = B(p,vec2(0.2,0.025));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,2.)),d);    \n    \n    return d;\n}\n\nfloat char9(vec2 p){\n    vec2 prevP = p;\n    p.y-=0.075;\n    p.y = abs(p.y)-0.075;\n    float d = B(p,vec2(0.2,0.05));\n    p = prevP;\n    float d2 = B(p-vec2(0.15,0.0),vec2(0.05,0.2));\n    d = min(d,d2);\n    d2 = B(p-vec2(-0.15,0.1),vec2(0.05,0.1));\n    d = min(d,d2);\n    p = prevP;\n    p.x-=0.15;\n    p.y-=0.15;\n    p*=Rot(radians(45.));\n    d = max(-B(p,vec2(0.02,0.11)),d);    \n    return d;\n}\n\nfloat checkChar(int targetChar, int char){\n    return 1.-abs(sign(float(targetChar) - float(char)));\n}\n\nfloat drawFont(vec2 p, int char){\n    p*=1.3;\n \n    vec2 prevP = p;\n    float d = char0(p)*checkChar(ch_0,char);\n    d += char1(p)*checkChar(ch_1,char);\n    d += char2(p)*checkChar(ch_2,char);\n    d += char3(p)*checkChar(ch_3,char);\n    d += char4(p)*checkChar(ch_4,char);\n    d += char5(p)*checkChar(ch_5,char);\n    d += char6(p)*checkChar(ch_6,char);\n    d += char7(p)*checkChar(ch_7,char);\n    d += char8(p)*checkChar(ch_8,char);\n    d += char9(p)*checkChar(ch_9,char);\n    \n    float a = radians(-45.);\n    p.x+=0.35;\n    d = max(-dot(p,vec2(cos(a),sin(a))),d);\n    a = radians(-45.);\n    p = prevP;\n    p.x-=0.35;\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    return d;\n}\n\nfloat number(vec3 p, float n, float height){\n    vec3 prevP = p;\n    \n    float d =drawFont(p.xy*vec2(0.093),int(mod(3.*iTime*n+(n*10.),10.0)));\n    d = max((abs(p.z)-max(height,0.5)),d);\n    return d;\n}\n\n// thx for the tutorial, Blackle Mori! https://www.youtube.com/watch?v=I8fmkLK1OKg\nvec2 edge(vec2 p){\n    vec2 p2 = abs(p);\n    if(p2.x>p.y) return vec2((p.x<0.)?-1.:1. ,0.);\n    else  return vec2(0., (p.y<0.)?-1.:1. );\n}\n\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat drawNumbers(vec3 p){\n    p.y-=iTime*2.5;\n    \n    float spacing = 3.5;\n    vec2 scaledP = p.xy / spacing;\n    vec2 center = floor(scaledP)+0.5;\n    float randomOffset = hash(center) * 6.28;\n    vec2 neighbour = center + edge(scaledP-center);\n    float maxAnimHeight = 1.5;\n    float height = sin(iTime+center.x + center.y + randomOffset)*maxAnimHeight;\n    float width = 2.;\n    \n    float n = hash(center);\n    \n    float d1 = number(p-vec3(center.x * spacing,center.y * spacing,0.0),n,height);\n    float d2 = number(p-vec3(neighbour.x * spacing,neighbour.y * spacing,0.0),n,maxAnimHeight);\n    \n    return min(d1,d2);\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    float d = drawNumbers(p);\n    d = max(p.z,d);\n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(15,-10,1));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.5)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\n// the reflection code reference from the following: https://www.shadertoy.com/view/tsXSRs\nvec3 reflectionBg(vec2 uv){\n    const float pi = 3.14159;\n    return mix(vec3(0.05), vec3(2.), smoothstep(pi*0.35, pi*0.98, uv.y));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    float IOR =\t1.309; //IOR:index of reflection\n    vec3 rdir = refract(-rd,n,1.0/IOR); \n    col = reflectionBg(SUV(rdir));\n    col = diffuseMaterial(n,rd,p,col);\n    return col;\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nvec3 cameraAnim(vec3 p){\n\n    float rotX = 0.;\n    float rotY = -10.;\n\n    float frame = mod(iTime,20.0);\n    float time = frame;\n\n    if(frame>=5. && frame<10.){\n        time = getTime(time-5.,0.6);\n\n        rotY = -10.+cubicInOut(time)*-10.;\n        rotX = cubicInOut(time)*-30.;\n    } else if(frame>=10. && frame<15.){\n        time = getTime(time-10.,0.6);\n        \n        rotY = -20.;\n        rotX = -30.+cubicInOut(time)*60.;\n    } else if(frame>=15.){\n        time = getTime(time-15.,0.6);\n\n        rotY = -20.+cubicInOut(time)*10.;\n        rotX = 30.+cubicInOut(time)*-30.;\n    }\n\n    p.xz*=Rot(radians(rotX));\n    p.yz*=Rot(radians(rotY));\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0., -12.);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro = cameraAnim(ro);\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        uv.y-=iTime*0.1;\n        uv = mod(uv,0.06)-0.03;\n        float d2 = length(uv)-0.001;\n        col = mix(col,vec3(0.5),S(d2,0.0));\n    }\n    \n    /*\n    col = vec3(0.);\n    float d2 = grid(uv);\n    col = mix(col,vec3(0.5),S(d2,0.0));\n    d2 = drawFont(uv,int(mod(iTime,10.)));\n    col = mix(col,vec3(1.),S(d2,0.0));\n    */   \n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}