{"ver":"0.1","info":{"id":"WtS3z3","date":"1560373486","viewed":252,"name":"Fire-like Shader Base","username":"Nihilistic_Furry","description":"Fire-like shader based off of noise images with octaves to create an organic pseudo-random fire texture. It would work well with with an alpha mask using a similar algorithm.\n \nFor a more organic result, follow the instructions at the top of the code.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//For more organic result, run below line into your browser console and change CHANNEL define to iChannel0\n//gShaderToy.SetTexture(0, {mSrc:'http://blog.lianapigeot.com/assets/img/2014/Jan/perlin_noise.png', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\n#define CHANNEL iChannel1\n\nvec4 noiseMask (vec2 uv)\n{\n    //vec4 base = 1.0 - texture (iChannel2, uv);\n    vec4 base = vec4 (0.0f, 0.0f, 0.0f, 1.0f);\n    \n    //First octave\n    {\n        vec2 map = vec2 (abs (mod (uv.x + iTime * 0.1 + 0.003 * cos (iTime * 2.6), 2.0) - 1.0), abs (mod (uv.y - iTime * 0.57, 2.0) - 1.0));\n        vec4 octave = texture (CHANNEL, map);\n                              \n    \toctave = octave * 2.0 - 1.0;\n        \n        base += octave / 2.0;\n    }\n    ///*\n    //Second octave\n    {\n        vec2 map = vec2 (abs (mod (uv.x * 2.0 - iTime * 0.025 + 0.045 * cos (iTime * 3.8), 2.0) - 1.0), abs (mod (uv.y * 2.0 - iTime * 0.55, 2.0) - 1.0));\n        vec4 octave = texture (CHANNEL, map);\n                              \n    \toctave = octave * 2.0 - 1.0;\n        \n        base += octave / 3.0;\n    }\n    \n    //Third octave\n    {\n        vec2 map = vec2 (abs (mod (uv.x * 3.0 + iTime * 0.2 + 0.024 * cos (iTime * 4.8), 2.0) - 1.0), abs (mod (uv.y * 3.0 - iTime * 1.2, 2.0) - 1.0));\n        vec4 octave = texture (CHANNEL, map);\n                              \n    \toctave = octave * 2.0 - 1.0;\n        \n        base += octave / 4.0;\n    }\n    \n    //Fourth octave\n    {\n        vec2 map = vec2 (abs (mod (uv.x * 4.0 - iTime * 0.6, 2.0) - 1.0), abs (mod (uv.y * 4.0 - iTime * 1.72, 2.0) - 1.0));\n        vec4 octave = texture (CHANNEL, map);\n                              \n    \toctave = octave * 2.0 - 1.0;\n        \n        base += octave / 5.0;\n    }\n\t//*/\n    \n    return base;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float mask = noiseMask (uv).x;\n    //fragColor = texture (iChannel1, uv) * (noiseMask (uv).x / 4.0 + 0.75);\n    fragColor = vec4 (mask / 3.0 + 0.85, mask / 2.0 + 0.5, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}