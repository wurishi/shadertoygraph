{"ver":"0.1","info":{"id":"3ttyWj","date":"1609920523","viewed":95,"name":"Cavele","username":"tono","description":"cable","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iteration = 0.;\nfloat pi = acos(-1.);\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat map(vec3 p)\n{\n   \n    p.z += sin(iTime)* .5;\n    p.xz*= rot(p.z/10. * (sin(p.z/10. + iTime/10.)));\n    \n    p.xy*= rot(p.z/6. * sin(p.z/15. + iTime/2. + p.x) );\n    p.xy += vec2(pi)/2.; \n    p.yz *= rot(sin(iTime/1.)/6.);\n    p.z += iTime;\n    // p.x += 1.;\n    p = sin(p) * 2.;\n    p = abs(abs(p) - .5) - .01;\n    p = clamp(p,vec3(0.),vec3(1.));\n    p.z = clamp(p.z , .1,.3);\n   // if(p.x > p.y){p.xy = p.yx;}\n    if(p.z > p.x){p.xz = p.zx;}\n    float o = length(p) - 1.;\n    if( o < 1.)\n    {\n        o -= sin(p.x * 10.)/20.;\n        o -= cos(p.y * 10.)/20.;\n        o += abs(sin(p.z * 5.)/25.);\n    }\n    //o = min(o,.5);\n    o *= .5;\n    return o;\n}\n\nfloat march(vec3 cp,vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0; i < 198 ;i++)\n    {\n        vec3 rp = cp + rd * depth;\n        float d = map(rp);\n        if((d) < 0.01)\n        {\n            iteration = float(i);\n            return depth;\n        }\n        depth += d;\n    }\n    depth *= -1.;\n    return depth;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 col = vec3(0.);\n    \n    vec3 forward = vec3(0.,0.,0);\n    vec3 cp = vec3(0.,0.,-3.) + forward;\n   // cp.x += sin(time) * 1.;\n    vec3 target = vec3(0.) + forward;\n    vec3 cd = normalize(target - cp);\n    vec3 cu = normalize(cross(cd,vec3(0.,1.,0.)));\n    vec3 cs = normalize(cross(cd,cu));\n    \n    float fov = mix(1.5 - dot(p,p),1. , abs(sin(iTime/10.))) ; \n    vec3 rd = normalize(cd* fov + cs * p.x + cu * p.y);\n    float d = march(cp,rd);\n    if(d > 0.)\n    {\n        vec2 e = vec2(0.,0.01);\n        vec3 pos = d * rd + cp;\n        vec3 N = -normalize(map(pos) - vec3(map(pos - e.xyy),map(pos - e.yxy),map(pos - e.yyx)));\n        col = vec3(1.)/iteration;\n        col = N;\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        float diff = max(dot(sun,N),0.);\n        col = diff * vec3(.8,.3,.6);\n        float sp = max(0.,dot(reflect(sun , N),cd ) );\n        col = diff * vec3(.1,.1,.1) + pow(sp,24.) * vec3(1.);\n       // float shadow = step(march(pos + N * 0.02,N),0.);\n        \n        //col += vec3(1.,0.,0.) * max(floor( sin(d - time * 4.) + .1),0.);\n        col += max(floor( sin(d - iTime * vec3(4.,8.,8.)/2.)-.6 + .61),0.);\n       // col *= shadow;\n        float dd =1. - exp(d * d * d * -.0015);\n        col = mix(col,vec3(1.,1.,1.),dd);\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}