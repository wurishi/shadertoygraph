{"ver":"0.1","info":{"id":"NsKSDD","date":"1636410203","viewed":81,"name":"AudioToy - for SIGGraph UIUC","username":"suryadip","description":"audio visualizer project","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float M_PI = 3.14159265358979323846264338327950288;\n\nmat2 rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// coord should be in [-1, 1] x [-1, 1]\nfloat onCircle(vec2 coord, vec2 center) {\n    float theta = atan(coord.y, coord.x); // theta is in [-pi, pi]\n    theta = theta + M_PI;// theta is now in [0, 2*pi]\n        \n    float pixel_radius = length(coord - center);\n    vec2 sample_coord = vec2(theta / 4. / M_PI); // gives an x coordinate to sample from 0 to 1\n    \n    float a = abs(atan(coord.x,coord.y) / (2.*M_PI));\n    float sampled_radius = texture(iChannel0, vec2(a/3.,0)).r;\n    sampled_radius = .5;\n    // if the pixel is close to the circle, light it up\n    if (abs(pixel_radius - sampled_radius * 0.5) < 0.01) {\n        return 1.0;\n    }\n    \n    // the pixel is either too far on the interior or exterior of the circle. Don't light it up.\n    return 0.0;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    // uv is now in [-1, 1]x[-1, 1]\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m * 2.0 - 1.0;\n    \n    float result = 0.;\n    float angle = 0.;\n    for (float i = 0.; i < 1.; i += 1./100.) {\n        float size = .9*fract(-i-iTime/.5);\n        float fade = smoothstep(1.,0.,size);\n        vec2 st = rot(angle)*(uv) * size;\n        angle += .5;\n        //st *= rot(1231023.*i);\n        result += onCircle(st, m)*fade;\n    }\n    \n    \n    \n    \n    fragColor = vec4(vec3(result), 1.) * vec4(vec3(uv * 0.5 + 0.5, .5), 1.0);\n    return;\n    \n    // Time varying pixel color\n    float r = sin(iTime * 100.);\n    \n   \n    uv = abs(uv);\n    //float result = onCircle(uv, m);\n\n    fragColor = vec4(vec3(result), 1.) * vec4(vec3(uv * 0.5 + 0.5, r), 1.0);\n}","name":"Image","description":"","type":"image"}]}