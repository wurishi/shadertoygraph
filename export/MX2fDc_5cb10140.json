{"ver":"0.1","info":{"id":"MX2fDc","date":"1730054547","viewed":156,"name":"infinite space for love (forked)","username":"ArthurTent","description":"A corridor with infinite space for love.\n\nForked and modified from https://www.shadertoy.com/view/7lBXRG\néchappatoire by sukupaper","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","blackandwhite","audio","heart","visualizer","doors","corridor","rooms","escaping"],"hasliked":0,"parentid":"7lBXRG","parentname":"échappatoire"},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// below you'll find infinite space for love\n\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nfloat theta = 0.;\nfloat h_lenght=0.;\nfloat heart = 0.;\n\n#define P 6.283185307\n#define PI              3.141592654\n#define TAU             (2.0*PI)\nconst float div = 4.9, spiralspeed = P/35.;\nvec3 c, map;\nfloat t, roomId;\nint matid=0, doorpart=0;\n\nmat2 rot(in float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nfloat box(in vec3 p, in vec3 s, in float r) { return length(max(abs(p) - s,0.)) - r; }\nfloat box(in vec2 p, in vec2 s) { p = abs(p) - s; return max(p.x,p.y); }\nfloat cyl(in vec3 p, in float h, in float r) {\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n// colormap\nvec3 palette(float t) {\n    if(t <1.)t+=1.;\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.);\n    vec3 d = vec3(0.563,0.416,0.457 + .2);\n    \n    return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )\n}\n// used to rotate domain of noise function\nconst mat2 rot2 = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n// fast implementation of fBM\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p + 0.1 * sin(iTime ) + 0.2 * iTime); p = rot2*p*2.02;\n    f += 0.031250*noise( p  ); p = rot2*p*2.01;\n    f += 0.250000*noise( p ); p = rot2*p*2.03;\n    f += 0.125000*noise( p + 0.1 * sin(iTime) + 0.2 * iTime ); p = rot2*p*2.01;\n    f += 0.062500*noise( p + 0.3 * sin(iTime) ); p = rot2*p*2.04;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\n\nfloat heartRadius(float theta)\n{\n    return 2. - 2.*sin(theta) + sqrt(abs(cos(theta)))*sin(theta)/(1.4 + sin(theta));\n}\n// nested fBM\nfloat pattern( vec2 p ) {\n    float h_lenght = length(p);\n    float combined = heart+fbm( p*snd*2. + fbm( p + fbm(p*(.5+sin(iTime))*(1.+snd*2.)) ) )*snd*10.; \n\t\n    if(heart>0.){\n\t\treturn 2.*(1.+snd)*combined * smoothstep(0.0, h_lenght, 1.5*heart*.0125)*10.;\n\t}\n\t\n\treturn 0.;\n\t\n}\n\nfloat door(in vec3 p, in vec3 s, in float opened) {\n    p.x -= s.x; p.xz *= rot(opened); p.x += s.x;\n    float ddbis = -max(box(vec3(p.x, mod(abs(p.y + .2) - .2, 1.285) - .6425, abs(p.z) - .03), s*vec3(1.,.5,1.), .01), box(p, s*vec3(.725,.85,1.), .02));\n    float dd = box(p, s, .01);\n    p.z = abs(p.z); p.x += .435;\n    float ddd = min(length(max(abs(vec2(length(p.xy) - .012, p.z - .075)) - vec2(.01,.0),0.)) - .015, length(max(abs(vec2(length(p.xy) - .01, p.z - .012)) - vec2(.02,.0),0.)) - .015);\n    ddd = min(ddd, cyl(p.yzx, .015, .075));\n    float d = min(max(dd, ddbis), ddd);\n    doorpart = d == dd ? 1 : 0;\n    return d;\n}\n\nfloat df(in vec3 p) {\n    p.xy *= rot(cos(p.z*spiralspeed)*1.75);\n    \n    float pz = p.z;\n    float Pz = floor(p.z/div + .4)*div;\n    roomId = floor(p.z/div + .5);\n    p.z = mod(pz, div) - div*.5;\n    \n    float pz2 = pz/(div*2.) + 0.24  ;\n    p.xy = mix(p.xy,p.yx,mod(floor(pz2),2.))*sign(mod(floor(pz2 + .5),2.) - .5);\n    map = p;\n    \n    const vec3 doorSize = vec3(.5, 1.125, .01);\n    float wall = box(p.xy, vec2(1.5));\n    p.y += doorSize.y/3.;\n    \n    float dap = abs(Pz - c.z + div/2.);\n    float door = door(p, doorSize, P*.35*(cos(clamp( (dap*dap*dap)*.0125 ,-3.14,3.14))*.5 + .5));\n    \n    float endwall = abs(p.z) - .01;\n\n    float plaintesFond = max(endwall, p.y + 1.05) - .025;\n    float doorShape = box(p.xy, doorSize.xy);\n    float doorShapeExtr = max(doorShape - .05, abs(p.z) - .035);\n    float walls = min(abs(wall) - .01, max(max(wall, min(min(endwall, doorShapeExtr), plaintesFond)),  -doorShape));\n        \n    float plaintes = max(-wall, p.y + 1.02) - .025;\n    \n    float d = min(min(walls, door), plaintes);\n    \n    matid = d == plaintesFond || d == doorShapeExtr ? 3 : d == door ? 1 : d == walls  ? 2 : 3;\n    \n    return d;\n}\n\n#define LIM .001\n#define MAX_D 20.\n#define MAX_IT 50\nstruct rmRes { vec3 pos; int it; bool hit; };\nrmRes rm(in vec3 c, in vec3 r) {\n    vec3 p = c;\n    int it;\n    bool hit = false;\n    for(int i = 0; i < MAX_IT; i++) {\n        float d = df(p);\n        if(d < LIM) { hit = true; break; }\n        if(distance(c,p) > MAX_D) break;\n        p += d*r;\n        it = i;\n    }\n    rmRes res;\n    res.pos = p;\n    res.it = it;\n    res.hit = hit;\n    return res;\n}\n\nvec3 plane2sphere(in vec2 p) {\n    float t = -4./(dot(p,p) + 4.);\n    return vec3(-p*t, 1. + 2.*t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n    snd*=1.6;\n    \n    vec2 st = (fragCoord.xy - iResolution.xy*.5)/iResolution.x;\n    vec2 uv = -1.0 + 2.0 *fragCoord/iResolution.x;\n    theta = atan(uv.y, uv.x);\n\th_lenght = length(uv);\n    heart = heartRadius(theta);\n    t = iTime < 0.01 ? 98. : iTime*5. ;\n        \n    c = vec3(0.,0.,t);\n    vec3 r = -plane2sphere(st*5.);\n    r.xz *= rot(cos(t*spiralspeed/3.)*.75);\n    r.xy *= rot(-cos(t*spiralspeed)*1.75);\n\n    rmRes res = rm(c,r);\n    \n    vec3 n = vec3(0.), b = vec3(.88);\n    float whichroom = step(.5,fract(roomId/2.));\n    vec3 c1 = mix(n,b,whichroom), c2 = mix(b,n,whichroom);\n    c2*=palette(pattern(st));\n    \n    vec3 rd = normalize(vec3(st,-1.5));\n    vec3 bg = stars(rd)*(1.+30.*snd);\n    //c2+=bg;\n    \n    if(whichroom>0.5){\n   \tc2+=bg; \n    }else{\n    }  \n \n    vec3 color = c2;\n    if(res.hit)\n        if(matid == 1) color = doorpart == 1 ? c2/palette(pattern(st)) : c1;\n        else if(matid == 2) color = c2;\n        else {\n            if(map.y < -1.45) {\n                if(map.z > .1 || map.z < 0.) {\n                    map.xz *= rot(3.14*.25);\n                    map.xz *= 10.;\n                    color = mix(c1,c2/palette(pattern(st)),step(0.,cos(map.x)*cos(map.z)));//*palette(snd*2.);                    \n                } else\n                    color = c2/palette(pattern(st));//*palette(snd*2.);\n            } else color = c1;//*palette(snd*2.);\n        }\n    \n    float l = length(st);\n    fragColor = vec4(color - l*l*.5,1.0);\n}\n","name":"Image","description":"","type":"image"}]}