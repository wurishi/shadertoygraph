{"ver":"0.1","info":{"id":"dd3fz2","date":"1697397477","viewed":73,"name":"15. Dagger","username":"Ladus","description":"Inktober 2023 Day 15. A dagger slash","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dagger","slash","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec2 normalizeScreenSpace(vec2 fragCoord, out float aa) {\n    aa = 0.003;\n    return ( 2.*fragCoord - iResolution.xy )  / iResolution.y;\n}\n\nmat2 rotate(float a) {\n    a *= PI * 2.;\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Function from IÃ±igo Quiles - https://iquilezles.org/articles/distfunctions2d/\nfloat dot2(in vec2 v ) { return dot(v,v); }\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat slash(vec2 p, vec2 position, float rotation, float time) {\n\n    vec3 slashColor = vec3(1.,1.,1.);\n    vec3 fadedColor = vec3(0.5,0.5,0.5);\n    p += position;\n    \n    float slashShade = smoothstep(0.001, -0.001, sdTrapezoid(p*rotate(rotation), 0.015, 0.001, 3.));\n    \n    // Animation t 0.0 -> 0.1 = fading in from top to bottom\n    float slashTime = clamp(time, 0.,0.1)*20.;\n    vec2 slideY = p*rotate(rotation);\n    float slashAnimationMask = 1.-clamp(smoothstep(slashTime, slashTime, slideY.y+1.),0.,1.);\n    \n    // Animation t 0.1 -> 1.0 = fading in entirety to gray\n    float fadeTime = 1.-clamp(time, 0.1, 0.9);\n    \n    if(time == 0.) {\n        return 0.;\n    }\n    \n    return slashAnimationMask * slashShade * fadeTime;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float loopingTime = fract(iTime/4.);\n    float aa = 0.;\n    vec2 p = normalizeScreenSpace(fragCoord, aa);\n\n    // Camera shake\n    float shakeScale = 0.;\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8., 0.,1.)-1.)*6.),0.,1.));\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8., 1.,2.)-1.)*6.),0.,1.));\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8., 2.,3.)-2.)*6.),0.,1.));\n    \n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8. * 2., 8.,9.)-2.)*6.),0.,1.));\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8. * 2., 9.,10.)-2.)*6.),0.,1.));\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8. * 2., 10.,11.)-2.)*6.),0.,1.));\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8. * 2., 11.,12.)-2.)*6.),0.,1.));\n    shakeScale = max(shakeScale, clamp(sin((clamp(loopingTime * 8. * 2., 12.,13.)-2.)*6.),0.,1.));\n    \n    p += vec2(sin(loopingTime*150.)*0.05 * shakeScale, sin((loopingTime+2.)*173.)*0.05 * shakeScale);\n    \n    // Slashes\n    float slashValue = slash(p, vec2(0.4,0.6), 0.67, loopingTime * 8.);\n    slashValue = max(slashValue, slash(p, vec2(0.4,0.2), 0.47, clamp(loopingTime * 8., 1.,2.)-1.));\n    slashValue = max(slashValue, slash(p, vec2(-0.2,0.6), 0.33, clamp(loopingTime * 8., 2.,3.)-2.));\n    \n    slashValue = max(slashValue, slash(p, vec2(0.25,-0.3), 0.88, clamp(loopingTime * 8. * 2., 8.,9.)-8.));\n    slashValue = max(slashValue, slash(p, vec2(-0.85,0.2), 0.23, clamp(loopingTime * 8. * 2., 9.,10.)-9.));\n    slashValue = max(slashValue, slash(p, vec2(0.25,-0.1), 0.02, clamp(loopingTime * 8. * 2., 10.,11.)-10.));\n    slashValue = max(slashValue, slash(p, vec2(0.15,0.2), 0.59, clamp(loopingTime * 8. * 2., 11.,12.)-11.));\n    slashValue = max(slashValue, slash(p, vec2(-0.85,0.7), 0.29, clamp(loopingTime * 8. * 2., 12.,13.)-12.));\n    \n    // Output to screen\n    float v = slashValue;\n    fragColor = vec4(v,v,v,1.0);\n}","name":"Image","description":"","type":"image"}]}