{"ver":"0.1","info":{"id":"XcscRf","date":"1721407544","viewed":243,"name":"PARTICLE IMAGE","username":"alro","description":"Limited duration voronoi particles coloured using a texture and moved by noise curl. Click to reset.","likes":19,"published":1,"flags":32,"usePreview":1,"tags":["2d","voronoi","curl","particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Basic test implementation of an idea\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec4 particle = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec3 col = vec3(0);\n\n    vec2 lookup = vec2(mod(particle.z, iResolution.x), floor(particle.z / iResolution.x));\n    float size = 1.0 - clamp((abs((max(0.0, particle.w) - (0.5 * duration)) / (0.5 * duration))), 0.0, 1.0);\n    size = smoothstep(0.0, 0.5, size);\n    \n    col = mix(col, texture(iChannel1, lookup/iResolution.xy).rgb, size * smoothstep(particleSize, 0.6 * particleSize, length(fragCoord - particle.xy)));\n \n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float res = 4.0;\nconst float duration = 10.0;\nconst float particleSize = 2.0;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SIZE 2048\n\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash32(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec2 hash(vec2 p){\n    p = mod(p, float(SIZE));\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return 2.0 * fract((p3.xx+p3.yz)*p3.zy) - 1.0;\n}\n\nvec2 fade(vec2 t){\n    return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat gradientNoise( in vec2 p ){\n\n    p += 0.1 * iTime;\n\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = fade(f);\n\n    return  mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                      dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                 mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                      dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm(vec2 p){\n    return gradientNoise(p);\n}\n\nvec2 computeCurl(vec2 uv){\n  float eps = 1e-1;\n\n  float n1 = fbm(vec2(uv.x - eps, uv.y));\n  float n2 = fbm(vec2(uv.x + eps, uv.y));\n\n  float a = (n1 - n2)/(2.0 * eps);\n\n  n1 = fbm(vec2(uv.x, uv.y-eps));\n  n2 = fbm(vec2(uv.x, uv.y+eps)); \n\n  float b = (n1 - n2)/(2.0 * eps);\n\n  return vec2(b, -a);\n}\n\nvoid swap(inout vec4 particle, vec2 pos, vec2 offset) {\n    vec4 neighbour = texelFetch(iChannel0, ivec2(pos + offset), 0);\n    if (length(pos - neighbour.xy) < length(pos - particle.xy)){\n         particle = neighbour;\n    }\n}\n\nvec4 getInitial(vec2 fragCoord){\n    vec2 pos = fragCoord + res * (2.0 * hash(fragCoord.xy + iTime) - 1.0);\n    return vec4(pos, floor(pos.y) * iResolution.x + pos.x, duration * hash32(100.0 * pos.xy).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec4 particle = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    swap(particle, fragCoord, vec2(0, 1));\n    swap(particle, fragCoord, vec2(1, 0));\n    swap(particle, fragCoord, vec2(0, -1));\n    swap(particle, fragCoord, vec2(-1, 0));\n    swap(particle, fragCoord, vec2(1, 1));\n    swap(particle, fragCoord, vec2(1, -1));\n    swap(particle, fragCoord, vec2(-1, 1));\n    swap(particle, fragCoord, vec2(-1, -1));\n    \n    particle.w = max(0.0, particle.w - 0.15 * hash32(particle.xy).x);\n\n    if(particle.w <= 0.0 || (length(fragCoord - particle.xy) > res && mod(fragCoord.x, res) < 1.0 && mod(fragCoord.y, res) < 1.0)){\n        particle = getInitial(fragCoord);\n    }\n    \n    if(iFrame == 0 || (iFrame == 0 || iMouse.z > 0.0)){\n        if(mod(fragCoord.x, res) < 1.0 && mod(fragCoord.y, res) < 1.0){\n            particle = getInitial(fragCoord);   \n        }else{\n            particle = vec4(0);\n        }\n    }\n    \n    particle.xy += 0.5 * computeCurl(0.005 * particle.xy) + 0.25 * computeCurl(0.075 * particle.xy);\n    fragColor = particle;\n}","name":"Buffer A","description":"","type":"buffer"}]}