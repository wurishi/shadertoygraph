{"ver":"0.1","info":{"id":"DdGXzD","date":"1680801602","viewed":104,"name":"Prime Number Spirals","username":"curtisjhu","description":"https://math.stackexchange.com/questions/885879/meaning-of-rays-in-polar-plot-of-prime-numbers/885894\n\nA variation of the archimedes spiral but only using prime numbers","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// taken from iq\nbool isPrime( int x )\n{\n\tif( x==1 ) return false;\n\tif( x==2 ) return true;\n\tif( x==3 ) return true;\n\tif( x==5 ) return true;\n\tif( x==7 ) return true;\n\tif( (x&1)==0 ) return false;\n\tif( (x%3)==0 ) return false;\n\tif( (x%5)==0 ) return false;\n\n    int xm = 1 + int(sqrt(float(x)));\n    \n\tint y = 7;\n\tfor( int i=0; i<200; i++ ) // count up to 6000\n\t{\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm    ) return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t}\n\t\n\treturn true;\n}\n\nfloat angleFromStart(in vec2 p)\n{\n    if (p.x < 0.0) {\n        if (p.y < 0.0) return PI + atan(abs(p.y), abs(p.x));\n        else return atan(abs(p.x), p.y) + PI/2.0;\n    } else {\n        if (p.y < 0.0) return atan(p.x, abs(p.y)) + 3.0*PI/2.0;\n        else return atan(p.y, p.x);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) /iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    float amp = 400.0;\n    float depth = amp*cos(4.0*iTime/PI) + amp + 100.0;\n    \n    // <r, theta> = <p, p>\n    // vec2 point = vec2(0.0, 0.0);\n    // length is a prime and angle the same prime\n    int num = int(round(length(uv*depth)));\n    if(isPrime(num) && abs(angleFromStart(uv) - mod(float(num), 2.0*PI)) < 0.01) {\n        col = vec3(1.0);\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}