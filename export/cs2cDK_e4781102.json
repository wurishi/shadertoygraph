{"ver":"0.1","info":{"id":"cs2cDK","date":"1688186358","viewed":52,"name":"Diamond pulses","username":"AntonJeva","description":"gradually more and more small diamonds pulse out around one central pulse.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//the sum of the y distance and the x distance\nfloat manhattanDist(vec2 p1, vec2 p2) {\n    return abs(p1.y-p2.y) + abs(p1.x-p2.x);\n}\n\nfloat diff(float n, float m) {\n    return pow(2.,1.-pow(2.2,(abs(n - m)*10.)));\n}\n\n//a point along a circle\nvec2 circ(vec2 point, float size, float rot) {\n    return vec2(sin(rot), cos(rot))*size+point;\n}\n\n//a practicly random position\nvec2 randPos(float size, float rad) {\n    return circ(circ(vec2(0.,0.),size,rad*100.21),size*.35,rad*1275.11);\n}\n\n//provide a normalized color by time\nvec3 normalCol(float t) {\n    return normalize(vec3(.5*cos(t-fract(t))+.5,\n                          .5*cos(t-fract(t)+1.)+.5,\n                          .5*cos(t-fract(t)+2.)+.5));\n}\n\n//a random function that is more likely to return 1 the more time has passed\nfloat tRand(float seed, float time) {\n    time *= 0.023;\n    time = (time*time*1.8 + time*2.5 - 2.7)/2.7;\n    seed = sin(cos(seed*105. + 101.)*105. + 101.);\n    return float(seed < time);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -.5 to .5)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    float t = iTime/7.5;\n    \n    float centreColor = .8; //strength of centre pulse color\n    float outerColor = .6; //strength of outer pulse color\n    float outerScale = .5; //reach of outer pulses\n    \n    //manhattan distance from the centre of the screen\n    float cMh = manhattanDist(uv, vec2(0., 0.));\n    vec3 col = vec3(.7 - cMh);\n    \n    //add the centre pulse\n    vec3 cCent = normalCol(t)*centreColor; \n    col += cCent*(diff(fract(t)*2.-1., cMh));\n    \n    //outer pulses\n    for(float i = 0.; i<10.; i+=1.) { \n        float tp = t-i/10.;\n        float ft = fract(tp);\n    \n        //where is the point and what color is it\n        vec2 point = randPos(.25, (tp-ft)*101.+101.*i + 11.*i*i);\n        vec3 pCol = normalCol(tp+533.*i)*outerColor; \n        pCol *= 1.-ft; //fade\n        \n        //randomly hide the point, more likely early on\n        pCol *= tRand((tp-ft)*10.+10.*i + 100., tp-ft);\n        \n        //add to final color\n        float mh = manhattanDist(uv/outerScale, point);\n        col += pCol*( diff(ft*2.-1.,mh) );\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}