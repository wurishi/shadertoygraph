{"ver":"0.1","info":{"id":"XtGGzD","date":"1473382883","viewed":343,"name":"Help me make a wood shader!","username":"Phildo","description":"Edit getColor to output a wood shader that only takes in a 3d coord! (intentionally low res because I'm not interested in super fine details within the wood)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wood","lowres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//NOTE- I'M LOOKING TO USE THIS IN A GAME, AND IN NO WAY WILL REIMBURSE YOU IF YOU HELP ME!\n//lol sorry, just don't want to get into legal trouble if I end up using/referencing something you send... :P\n\n//PLEASE EDIT THE FUNCTION \"getColor\"\n//I'm looking for a function that can take in an arbitrary 3d coordinate\n//(coordinate guaranteed to be within the range of -10 to 10ish)\n//and outputs a color in such a way that the surface will look like wood.\n//(note that this particular example will just use positions on the unit circle)\nvec3 getColor(vec3 pos)\n{\n    vec3 color;\n    color = pos;\n    return color;   \n}\n\n//Example main just returns black for all frags not on\n//a centered unit sphere. For others, it returns the\n//contents of getColor (passing in faked 3d coords on sphere)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 pos = vec3(uv,0.);\n    pos *= 2.;\n\tpos -= vec3(1.,1.,0.);\n    if(ratio < 1.) pos.y /= ratio;\n    else           pos.x *= ratio;\n    float res = 20.; //set this to like 1000. to see full res\n    pos *= res;\n    pos = floor(pos);\n    pos /= res;\n    if(length(pos) > 1.)\n    {\n      fragColor = vec4(0.,0.,0.,1.);\n      return;\n    }\n    pos.z = 1.-sqrt(pos.x*pos.x+pos.y*pos.y);\n\n    fragColor = vec4(getColor(pos),1.);\n}\n","name":"Image","description":"","type":"image"}]}