{"ver":"0.1","info":{"id":"3dc3DB","date":"1569419273","viewed":97,"name":"FractalShader-Mandelbrot","username":"Numero7","description":"Fractals!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 2.0 * asin(1.0)\n\n// Coordinate of the center of the screen in the complex plane.\nvec3 cam = vec3(0.0, 0.0, 2.0);\n\n// Multiply two complex number together.\nvec2 multComplex(vec2 a, vec2 b) {\n    return vec2(\n        a.x * b.x - a.y * b.y,\n        a.x * b.y + a.y * b.x\n    );\n}\n\n// Multiply n times a complex number to itself.\nvec2 powComplex(vec2 x, int n) {\n    vec2 y = vec2(1.0, 0.0);\n    for (int i = 0; i < n; i++) {\n        y = multComplex(y, x);\n    }\n    return y;\n}\n\nfloat noise(vec2 p) {\n    return fract(sin(p.x * 1234.21365442345 + p.y * 9843.113654465) * 63613.03643);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    //cam.z -= cam.z * (1.0 / (1.0+pow(2.0, -iTime)));\n    vec2 c = uv * cam.z + cam.xy;\n    vec2 z = vec2(0.0, 0.0);\n    \n    // The quality of the fractal.\n    int maxIterations = 100;\n    int iteration = 0;\n    \n    while (iteration < maxIterations) {\n        // Change the fractal power to what you want!\n        // (integer number only!) (Warning â†’ lag if to big.)\n        z = powComplex(z, 2) + c;\n        if (length(z) > 4.0)\n            break;\n        iteration++;\n    }\n    \n    \n    // Normalize the number of iterations between 0 and 1\n    float t = pow(2.0, float(iteration) / float(maxIterations));\n    \n    // Some math for color.\n    float r = clamp(sin(4.0 * pi * t), 0.0, 1.0);\n    float g = clamp(sin(2.0 * pi * t), 0.0, 1.0);\n    float b = clamp(sin(8.0 * pi * t), 0.0, 1.0);\n    \n    vec3 col = vec3(r, g, b);// * noise(c);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}