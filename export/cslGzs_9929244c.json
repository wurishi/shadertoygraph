{"ver":"0.1","info":{"id":"cslGzs","date":"1666666026","viewed":103,"name":"Heat Diffusion 1D (No Boundary)","username":"seanim","description":"For more details: ( https://www.desmos.com/calculator/ppyyts8fog )\nHeat Equation, No boundary condition","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["1d","diffusion","heat","pde"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.desmos.com/calculator/ppyyts8fog\n\n// https://en.wikipedia.org/wiki/Error_function#Approximation_with_elementary_functions\n// I found from: https://www.shadertoy.com/view/Xl2yRV\nfloat Erf(float x)\n{\n\tbool neg = x < 0.0;\n    \n    const float a = 0.147;\n    const float b = 1.27324;//4.0/Pi\n    \n    float xx = x*x;\n    float xxa = xx*a;\n    float y = sqrt(1.0 - exp(-xx * (xxa + b) / (xxa + 1.0)));\n    \n    return neg ? -y : y;\n}\n\nfloat heat_diffusion_1 ( float left_bound, float right_bound, float init_temp, float k, float t, float x ) {\n    float temp = (init_temp / 2.) * (Erf( (right_bound-x)/sqrt(4.*k*t) ) + Erf( (-left_bound+x)/sqrt(4.*k*t) ));\n    return temp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float t = iTime + 0.00001;\n    \n// *****************************\n// **Adjust Initial Conditions**\n\n    float Left_Bound = .3;\n    \n    float Right_Bound = .7;\n    \n    float Initial_Temperature = 1.;\n    \n    float Rate_of_Diffusion = 0.005;\n    \n// **Adjust Initial Conditions**\n// *****************************\n    \n    // Applying the solution equation        \n    float temperature = ( heat_diffusion_1( Left_Bound, Right_Bound, Initial_Temperature, Rate_of_Diffusion, t, uv.x ) );\n    \n    // How should I present the output?\n    vec3 col = vec3(temperature, 0., 1.-temperature);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}