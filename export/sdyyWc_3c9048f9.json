{"ver":"0.1","info":{"id":"sdyyWc","date":"1656496704","viewed":134,"name":"Meaningless","username":"mmggww","description":"Meaningless","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["fractal","ring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 col = vec3(0.25);\n    float sX = iResolution.x;\n    float sY = iResolution.y;\n   \n    \n    vec2 pos = iResolution.xy/2.0;\n    float r = sX / 5.0;\n    float dr = 15.0;\n    float lw = 1.0;\n    /////////////////////////////////////////////\n    vec3 lCol = GetColor(0.5, 1.0, 0.65);\n    vec3 lCol2 = GetColor(0.5, 1.0, 0.8); \n    \n    /////////////////////////////////////////////Cicle\n    col = max(col, DrawCicleLine(pos, r + dr, dr*2.0, lCol-vec3(0.2), fragCoord));\n    col = max(col, DrawCicleLine(pos, r, lw, lCol2, fragCoord));\n    col = max(col, DrawCicleLine(pos, r + dr, lw, lCol2, fragCoord)); \n    col = max(col, DrawCicleLine(pos, r + 2.0*dr, lw, lCol2, fragCoord)); \n    \n    /////////////////////////////////////////////Triangle\n    vec2[3] tri;\n    tri[0] = pos + vec2(0, r);\n    tri[1] = pos + vec2(sin(PI/3.0), -cos(PI/3.0)) * r;\n    tri[2] = pos + vec2(-sin(PI/3.0), -cos(PI/3.0)) * r;\n    RotTri(tri, iTime);\n    col = max(col, DrawFractal(tri, lCol, fragCoord));\n    \n    tri[0] = pos + vec2(0, -r);\n    tri[1] = pos + vec2(sin(PI/3.0), cos(PI/3.0)) * r;\n    tri[2] = pos + vec2(-sin(PI/3.0), cos(PI/3.0)) * r;\n    RotTri(tri, -iTime);\n    col = max(col, DrawFractal(tri, lCol, fragCoord));\n    \n    //////////////////////////////////////////////\n    vec4 bc = texture(iChannel0, uv);\n    col = max(bc.xyz, col);\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265\n\nvec3 Draw(float h, float d, float off, vec2 pos, float r, float strength, vec2 fragCoord)\n{\n    vec3 c1 = GetColor(h, 1.0, 1.0);\n    vec3 c2 = GetColor(h - 0.3, 1.0, 1.0);\n    vec3 c3 = GetColor(h - 0.6, 1.0, 0.65);\n    \n    float a1 = d * iTime + off;\n    float a2 = d * iTime - PI*2.0/3.0 + off;\n    float a3 = d * iTime + PI*2.0/3.0 + off;\n    \n    vec2 p1 = pos + vec2(sin(a1), cos(a1)) * r;\n    vec2 p2 = pos + vec2(sin(a2), cos(a2)) * r;\n    vec2 p3 = pos + vec2(sin(a3), cos(a3)) * r;\n       \n    vec3 col;\n    col = col + DrawParticle(p1, strength, c1, fragCoord);\n    col = col + DrawParticle(p2, strength, c2, fragCoord);\n    col = col + DrawParticle(p3, strength, c3, fragCoord);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 col = vec3(0);\n    float sX = iResolution.x;\n    float sY = iResolution.y;\n    \n    vec4 bc = texture(iChannel0, uv);\n       \n    vec2 pos = iResolution.xy/2.0;\n    float r = sX / 5.0;\n    float dr = 15.0;\n    float lw = 1.0;\n    float strength = 5.0;\n    \n    /////////////////////////////////////////////\n    float h = mod(iTime,10.0)/10.0;\n    \n    col += Draw(h, 1.0, 0.0, pos, r + dr/2.0, strength, fragCoord);\n    col += Draw(h - 0.5,-1.0, PI/3.0,pos, r + dr*3.0/2.0, strength, fragCoord);\n    \n    /////////////////////////////////////////////\n    if(iMouse.z > 0.0)\n        col += DrawParticle(iMouse.xy, strength, GetColor(h,1.0,1.0), fragCoord);\n     \n        \n    col = max(col, bc.xyz * 0.99);\n    fragColor = vec4(col, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265\n\nvec2 Rot2D(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    mat2 mat = mat2(c,s,-s,c);\n    return p * mat;\n}\n\nvec3 GetColor(float hue, float saturation, float value)\n{\n    vec3 rgb = clamp(abs(mod(hue * 6. + vec3(0.,4.,2.),6.)-3.)-1., 0., 1.);\n    return value * mix(vec3(1.), rgb, saturation);\n}\n\nvec3 DrawParticle(vec2 pos, float strength, vec3 col, vec2 fragCoord)\n{\n    float len = length(pos - fragCoord);\n    float a = 1.0/max(len, 0.00001) * strength;\n    if(len < strength)\n        return min(a, 1.0) * col;\n    else\n        return vec3(0.0);\n}\n\nvec3 DrawLine(vec2 p1, vec2 p2, float width, vec3 col, vec2 fragCoord)\n{\n    vec2 line = p2 - p1;\n    vec2 p = fragCoord - p1;\n    \n    vec2 dir = normalize(line);\n    float len = length(line);\n    float d = dot(p, dir);\n    float dist = length(p - dir * d);\n    \n    if (d >= 0.0 && d <= len && dist <= width/2.0)\n        return col;\n    else\n        return vec3(0.0);\n}\n\nvec3 DrawRect(vec2 c, vec2 size, float bound, vec3 col, vec2 fragCoord)\n{\n    float hw = size.x / 2.0;\n    float hh = size.y / 2.0;\n    \n    vec3 ret;\n    ret = max(ret, DrawLine(c + vec2(-hw, -hh), c + vec2( hw, -hh), bound, col, fragCoord));\n    ret = max(ret, DrawLine(c + vec2( hw, -hh), c + vec2( hw,  hh), bound, col, fragCoord));\n    ret = max(ret, DrawLine(c + vec2( hw,  hh), c + vec2(-hw,  hh), bound, col, fragCoord));\n    ret = max(ret, DrawLine(c + vec2(-hw,  hh), c + vec2(-hw, -hh), bound, col, fragCoord));\n    return ret;\n}\n\nvec3 DrawCicleLine(vec2 c, float r, float w, vec3 col, vec2 fragCoord)\n{\n    vec2 p = fragCoord - c;\n    float len = length(p);\n    if (len > r - w/2.0 && len < r + w/2.0)\n        return col;\n    else\n        return vec3(0.0);\n}\n\nvec3 DrawTriangle(vec2[3] p, vec3 col, vec2 fragCoord)\n{\n    vec2 e1 = p[1] - p[0];\n    vec2 e2 = p[2] - p[1];\n    vec2 e3 = p[0] - p[2];\n    vec2 fp1 = fragCoord - p[0];\n    vec2 fp2 = fragCoord - p[1];\n    vec2 fp3 = fragCoord - p[2];\n    \n    float s = length(cross(vec3(e1.xy, 0.0), vec3(e2, 0.0)));\n    float s1 = length(cross(vec3(fp1.xy, 0.0), vec3(e1, 0.0)));\n    float s2 = length(cross(vec3(fp2.xy, 0.0), vec3(e2, 0.0)));\n    float s3 = length(cross(vec3(fp3.xy, 0.0), vec3(e3, 0.0)));\n    \n    if(s1 + s2 + s3 - s <= 0.1)\n        return col;\n    else\n        return vec3(0.0);\n}\n\nvec3 DrawTriangleLine(vec2[3] p, float w, vec3 col, vec2 fragCoord)\n{\n    vec3 ret;\n    ret = max(ret, DrawLine(p[0], p[1], w, col, fragCoord));\n    ret = max(ret, DrawLine(p[1], p[2], w, col, fragCoord));\n    ret = max(ret, DrawLine(p[2], p[0], w, col, fragCoord));\n    return ret;\n}\n\nvec3 DrawFractal(vec2[3] tri, vec3 col, vec2 fragCoord)\n{    \n    vec3 ret;\n    \n    for(int i=0; i < 6; i++)\n    {\n        float f = 0.2;\n        ret += f * DrawTriangle(tri, col, fragCoord) + (1.0-f) * DrawTriangleLine(tri, 1.0, col, fragCoord);\n        \n        vec2 p0 = tri[0];\n        vec2 p1 = tri[1];\n        vec2 p2 = tri[2];\n        tri[0] = (p1 + p2) / 2.0;\n        tri[1] = (p0 + p2)/2.0;\n        tri[2] = (p1 + p0)/2.0;\n        col = col + vec3(0.01);\n    }\n    \n    return ret;\n}\n\nvoid RotTri(out vec2[3] tri, float a)\n{\n    vec2 c = (tri[0] + tri[1] + tri[2])/3.0;\n    for(int i = 0; i < 3; i++)\n    {\n        tri[i] = c + Rot2D(tri[i] - c, a);\n    }\n}\n","name":"Common","description":"","type":"common"}]}