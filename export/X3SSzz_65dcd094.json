{"ver":"0.1","info":{"id":"X3SSzz","date":"1710175118","viewed":21,"name":"The Triangle","username":"hypercubed","description":"triangle","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 triangleSDF(vec3 v0, vec3 v1, vec3 v2, vec3 rayO, vec3 rayD, out bool collides) {\n    vec3 v0v1 = v1 - v0;\n    vec3 v0v2 = v2 - v0;\n    vec3 p  = cross(rayD, v0v2);\n    float det = dot(v0v1, p);\n    \n    if (abs(det) < 0.0005) { \n        collides = false;\n        return vec3(-1.0, 0.0, 0.0); \n    }\n    float invDet = 1.0 / det;\n    \n    vec3 t = rayO - v0;\n    float u = dot(t, p) * invDet;\n    vec3 q = cross(t, v0v1);\n    float v = dot(rayD, q) * invDet;\n    \n    float dist = dot(v0v2, q) * invDet;\n    \n    if (u > 0.0 && u < 1.0 && v > 0.0 && u + v < 1.0 && dist > 0.0) {\n        collides = true;\n        return vec3(dist, u, v);\n    } else {\n        collides = false;\n        return vec3(dist, 0.0, 0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    vec3 origin = vec3(sin(iTime / 3.0) * 3.0, 0.0, cos(iTime / 3.0) * 3.0 + 2.0);\n    vec3 camera_view = normalize(vec3(-sin(iTime / 3.0), 0.0, -cos(iTime / 3.0)));\n    vec3 camera_up = vec3(0.0, 1.0, 0.0);\n    vec3 camera_right = cross(camera_up, camera_view);\n    float camera_plane_distance = 0.7;\n    vec3 camera_plane_coord = origin + camera_view * camera_plane_distance + uv.x * camera_right + uv.y * camera_up;\n    vec3 rayDir = normalize(camera_plane_coord - origin);\n    vec3 lightDir = normalize(vec3(0.0, -5.0, 2.0));\n    \n    vec3 p0 = vec3(0.0, cos(iTime) * 0.25 + 1.0, 2.0);\n    vec3 p1 = vec3(cos(iTime), cos(iTime) * 0.25-0.5, sin(iTime) + 2.0);\n    vec3 p2 = vec3(-cos(iTime), cos(iTime) * 0.25-0.5, -sin(iTime) + 2.0);\n    \n    bool spinny_collides = false;\n    vec3 spinny_tri = triangleSDF(\n        p0, p1, p2,\n        origin, rayDir, spinny_collides\n    );\n    \n    bool floor_1_collides = false;\n    vec3 floor_tri = triangleSDF(\n        vec3(0.0, -2.0, 5.0),\n        vec3(3.0, -2.0, 0.0),\n        vec3(-3.0, -2.0, 0.0),\n        origin, rayDir, floor_1_collides\n    );\n    \n    \n    vec3 col = vec3(0.52, 0.80, 0.92);\n    if (spinny_collides) {\n        col = vec3(spinny_tri.y, spinny_tri.z, 1.0 - spinny_tri.y - spinny_tri.z);\n        \n    } else if (floor_1_collides) {\n        vec3 tex_sample = texture(iChannel0, vec2(floor_tri.y, floor_tri.z)).xyz;\n        vec3 rayO = origin + rayDir * floor_tri.x;\n        bool tri_shadow = false;\n        vec3 tri_shadow_collide = triangleSDF(\n            p0, p1, p2,\n            rayO, -lightDir, tri_shadow\n        );\n        if (tri_shadow) {\n            col = tex_sample / 2.0;\n            //col = vec3(1.0, 1.0, 1.0);\n        } else {\n            //col = vec3(tri_shadow_collide.x, 0.0, 0.0);\n            col = tex_sample;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}