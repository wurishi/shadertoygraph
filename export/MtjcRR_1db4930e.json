{"ver":"0.1","info":{"id":"MtjcRR","date":"1507482278","viewed":131,"name":"Revel ","username":"Willpower900","description":"Using ShaderToy, write a shader that blurs a texture. Hovering the mouse over the texture \"reveals\" another texture underneath, which is sharpened. The reveal should be limited to a circle around the mouse position. The radius of the circle should initial","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["class"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Originally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n//The blur matrix. Since there are 9 pixels, each weight is 1/9 = 0.111 \n// to ensure that each pixel is averaged properly\n\nvec4 circlePos; //Initial position of the circle\nfloat radius = .15; //Radius of the circle\nfloat blurAmount = 10.0; //Amount of times the blur is applied, 1 is the minimum\nvec2 mousePos;\n\n/*\nslection options\n1 = blur\n2 = sharpen\n3 = edgeDetetion\n4 = emboss\n*/\nint selectionBG = 1; //Effect for the background immage\nint selectionCircle = 4; //Effect for the \"revel\" circle\n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\nmat3 edgeDetection = mat3(\n -1.0, -1.0, -1.0, // first column (not row!)\n -1.0, 8.0, -1.0, // second column\n -1.0, -1.0, -1.0 // third column\n);\n\nmat3 emboss = mat3(\n -2.0, -1.0, 0, // first column (not row!)\n -1.0, 1.0, 1.0, // second column\n 0.0, 1.0, 2.0 // third column\n );\n\n//Grabs the required pixles\nvec3 aSample(const int x, const int y, in vec2 fragCoord, int channel)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[channel].xy;\n uv = (uv + vec2(x, y)) / iChannelResolution[channel].xy ;\n    \n    //Outputs based on what channel was passed\n    if(channel == 0)\n\t\treturn texture(iChannel0, uv).xyz;\n    else\n        return texture(iChannel1, uv).xyz;\n}\n\n//Multiplys the pixles by the kernal to achive the blur effect\nvec3 aFilter(in vec2 fragCoord, mat3 kernel, int channel)\n{\n    int i = 0,\n        j = 0,\n        size = 3;\n    \n    vec3 sum;\n    \n    for(int i = 0; i < size; i++)\n        for(j = 0; j < size; j++)\n            sum += aSample(i - 1, j -1, fragCoord, channel) * kernel[i][j];\n        \n return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float i = 0.0;\n   \n //Sets up the uv & resolution\n vec2 uv = fragCoord.xy / iResolution.xy;\n float res = iResolution.y / iResolution.x;\n uv.y *= res;\n   \n    circlePos = iMouse / iResolution.xyxy;\n    circlePos.y *= res;\n    \n vec2 fc = fragCoord.xy;\n \n    \n vec4 layer1; //Layer1 will contain the blured immage\n vec4 layer2; //Layer2 will contain the sharpened circle\n\n switch(selectionBG) //Switch for the background image\n {\n     case 1: layer1 = vec4 (aFilter(fc, blur, 0), 1.0);\n     break;\n     \n     case 2: layer1 = vec4 (aFilter(fc, sharpen, 0), 1.0);\n     break;\n     \n     case 3: layer1 = vec4 (aFilter(fc, edgeDetection, 0), 1.0);\n     break;\n     \n     case 4: layer1 = vec4 (aFilter(fc, emboss, 0), 1.0);\n     break;\n \n }\n    \n  switch(selectionCircle) //Switch for the revel circle image\n {\n     case 1:  layer2 = vec4 (aFilter(fc, blur, 1),( 1.0 - step(radius, length(circlePos.xy - uv))));\n     break;\n     \n     case 2:  layer2 = vec4 (aFilter(fc, sharpen, 1),( 1.0 - step(radius, length(circlePos.xy - uv))));\n     break;\n     \n     case 3:  layer2 = vec4 (aFilter(fc, edgeDetection, 1),( 1.0 - step(radius, length(circlePos.xy - uv))));\n     break;\n     \n     case 4:  layer2 = vec4 (aFilter(fc, emboss, 1),( 1.0 - step(radius, length(circlePos.xy - uv))));\n     break;\n \n }\n    \n //Mixes and outputs the layers\n vec4 composite = mix(layer1, layer2, layer2.a);\n fragColor = composite;\n}","name":"Image","description":"","type":"image"}]}