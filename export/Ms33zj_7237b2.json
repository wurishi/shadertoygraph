{"ver":"0.1","info":{"id":"Ms33zj","date":"1450806184","viewed":1002,"name":"Iridescence Map","username":"paniq","description":"hand-modelled iridescence function; horizontal is incident angle (0-90), vertical is thickness (0 to 500nm)","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["iridescence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// based on the picture in\n// http://home.hiroshima-u.ac.jp/kin/publications/TVC01/examples.pdf\n\nvec2 mp;\n\n// ratio: 1/3 = neon, 1/4 = refracted, 1/5+ = approximate white\nvec3 physhue2rgb(float hue, float ratio) {\n    return smoothstep(\n        vec3(0.0),vec3(1.0),\n        abs(mod(hue + vec3(0.0,1.0,2.0)*ratio,1.0)*2.0-1.0));\n}\n        \nvec3 iridescence (float angle, float thickness) {\n    // typically the dot product of normal with eye ray\n    float NxV = cos(angle);\n    \n    // energy of spectral colors\n    float lum = 0.05064;\n    // basic energy of light\n    float luma = 0.01070;\n    // tint of the final color\n    //vec3 tint = vec3(0.7333,0.89804,0.94902);\n    vec3 tint = vec3(0.49639,0.78252,0.88723);\n    // interference rate at minimum angle\n    float interf0 = 2.4;\n    // phase shift rate at minimum angle\n    float phase0 = 1.0 / 2.8;\n    // interference rate at maximum angle\n    float interf1 = interf0 * 4.0 / 3.0;\n    // phase shift rate at maximum angle\n    float phase1 = phase0;\n    // fresnel (most likely completely wrong)\n    float f = (1.0 - NxV) * (1.0 - NxV);\n    float interf = mix(interf0, interf1, f);\n    float phase = mix(phase0, phase1, f);\n    float dp = (NxV - 1.0) * 0.5;\n    \n    // film hue\n    vec3 hue = \n    \t\t// fade in higher frequency at the right end\n        \tmix(\n                physhue2rgb(thickness * interf0 + dp, thickness * phase0),\n    \t\t\tphyshue2rgb(thickness * interf1 + 0.1 + dp, thickness * phase1),\n                f);\n    \n    vec3 film = hue * lum + vec3(0.49639,0.78252,0.88723) * luma;\n    \n    \n    return vec3((film * 3.0 + pow(f,12.0))) * tint;\n}\n\nvec3 srgb2lin(vec3 color) {\n    return color * (color * (\n        color * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 lin2srgb(vec3 color) {\n    vec3 S1 = sqrt(color);\n    vec3 S2 = sqrt(S1);\n    vec3 S3 = sqrt(S2);\n    return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mp = iMouse.xy / iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 c = iridescence(uv.x*0.5*3.14159,1.0-uv.y);\n\tfragColor = vec4(lin2srgb(c),1.0);\n}","name":"","description":"","type":"image"}]}