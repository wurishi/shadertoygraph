{"ver":"0.1","info":{"id":"XltfRl","date":"1540641018","viewed":1173,"name":"WATER STUFF THINGS","username":"Imsure1200q_1UWE130","description":"You can compare two textures one with water another without. You can also adjust the water speed and rotation.","likes":8,"published":3,"flags":2,"usePreview":0,"tags":["waterrefraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define WATER_SPEED 4.\n//water current direction\n#define WATER_ROT 75.\n\n//No \"chromatography\" or \"light dispertion\" how do you say it? Something like chromatic aberration\n//Makes waves look clearer, good for making rain and glass.\n//Example - Set iChannel1 to Organic 2. Then compile the shader. After than, uncomment this variable\n//and compile. See the difference?\n#define NO_COLOR_SCATTERING\n\n//#define REFLECTION 0.01\n\n//not rlly a quaternion its a vec2\nvec2 getWaterRotQuaternion() {\n    float radian = WATER_ROT*3.14159/180.;\n    return normalize(vec2(cos(radian),sin(radian)));\n}\n\nfloat desaturate(vec3 c) {\n    return (c.r+c.g+c.b)/2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xy;\n    \n\tvec4 col = texture(iChannel0, p);\n    float mouseX = iMouse.x/iResolution.x;\n    \n    if(p.x <= mouseX)\n        col.rgb = texture(iChannel0, p).rgb;\n    //more or less refraction stuff\n    //You may change iChannel1 to iChannel0 in code to make it look like water hits parts of the texture\n    //as if physics were added..\n    //iChannel0 - floor\n    //iChannel1 - water shape\n\tif(p.x > mouseX) \n\t{\n        vec2 waterRotation = getWaterRotQuaternion();\n        vec2 q = p;\n        #ifdef NO_COLOR_SCATTERING\n        q = p+desaturate(texture(iChannel1, p+iTime*waterRotation*WATER_SPEED/8.).rgb)/20.;\n        col.r = texture(iChannel0, q).r;\n        col.g = texture(iChannel0, q).g;\n        col.b = texture(iChannel0, q).b;\n        #else\n        q = p+texture(iChannel1, p+iTime*waterRotation*WATER_SPEED/8.).r/20.;\n\t\tcol.r = texture(iChannel0, q).r;\n        col.g = texture(iChannel0, q).g;\n        col.b = texture(iChannel0, q).b;\n        #endif\n        \n        #ifdef REFLECTION\n        col = mix(col, texture(iChannel2, q), REFLECTION);\n        #endif\n\t}\n\t\n\tif(abs(p.x-mouseX-0.001)<=0.001)\n        col = vec4(1.);\n\t\n    fragColor = pow(col,vec4(1./1.1));\n}\n\n/*\nSome Custom Shaders:\n\nRaining in London -\niChannel0 -> London\niChannel1 -> RGB Noise Small\nWater Speed -> 3.\nWater Rotation -> 76.\n\nWater flowing on tiles -\niChannel0 -> Rock Tiles\niChannel1 -> Organic 4\nWater Speed -> 3.\nWater Rotation -> 76.\n*/\n","name":"Image","description":"","type":"image"}]}