{"ver":"0.1","info":{"id":"43GSWw","date":"1719989575","viewed":90,"name":"pipi123 7.3","username":"1455076726","description":"??","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Refer:https://www.shadertoy.com/view/4dyXWy\n\n//Refer:https://www.shadertoy.com/view/4sySDd\n\n\n\n\n\n#define DITHER\t\t\t//Dithering toggle\n#define QUALITY\t\t0\t//0- low, 1- medium, 2- high\n\n#define DECAY\t\t.974\n#define EXPOSURE\t.26\n#if (QUALITY==2)\n #define SAMPLES\t64\n #define DENSITY\t.97\n #define WEIGHT\t\t.25\n#else\n#if (QUALITY==1)\n #define SAMPLES\t32\n #define DENSITY\t.95\n #define WEIGHT\t\t.25\n#else\n #define SAMPLES\t16\n #define DENSITY\t.93\n #define WEIGHT\t\t.36\n#endif\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 coord = uv;\n    vec2 lightpos = texture(iChannel0, uv).zw;\n   \t\n    float occ = texture(iChannel0, uv).x; //light\n    float obj = texture(iChannel0, uv).y; //objects\n    float dither = texture(iChannel1, fragCoord/iChannelResolution[1].xy).r;    \n        \n    vec2 dtc = (coord - lightpos) * (1. / float(SAMPLES) * DENSITY);\n    float illumdecay = 1.;\n    \n    for(int i=0; i<SAMPLES; i++)\n    {\n        coord -= dtc;\n        #ifdef DITHER\n        \tfloat s = texture(iChannel0, coord+(dtc*dither)).x;\n        #else\n        \tfloat s = texture(iChannel0, coord).x;\n        #endif\n        s *= illumdecay * WEIGHT;\n        occ += s;\n        illumdecay *= DECAY;\n    }\n        \n\tfragColor = vec4(vec3(texture(iChannel0, uv).x-0.4, 0. , vec3(texture(iChannel0, uv).z))+occ*EXPOSURE,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float dotSpace = 12.,\n             dotSize = 10.;\n\nvec3 colorB = vec3(0.749,0.388,0.388);\n\nfloat circle( vec2 pos, float r, vec2 uv )\n{\n    return distance(uv, pos) < r ? 1. : 0.;\n}\n\nvec3 sun( vec2 uv, vec2 p ) //x is result, yz are position in normalized coords.\n{\t\t\t\t\t\t\t //This is just a quick hack for this shader only.\n    vec3 res;\n    float di = distance(uv, p);\n    res.x =  di <= .3333 ? sqrt(1. - di*3.) : 0.;\n    \n    res.yz = p;\n    res.y /= (iResolution.x / iResolution.y);\n    res.yz = (res.yz+1.)*.5;\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy)*2.-1.; //coords to -1..1;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    \n    \n    float occluders =0.;\n    vec2 point = ( floor(fragCoord / dotSpace) +.5 ) * dotSpace;\n    float r = length(fragCoord-point) / dotSize;\n   vec4 layer3 = vec4(colorB, 1.0);\n    \n    vec3 light = min(sun(uv, vec2(sin(iTime), sin(iTime*2.)*.5)), 0.);\n   // vec3 light = vec3(0.);\n    float col = max(light.x , 0.);\n     vec4 O = texture(iChannel0, point / iResolution.xy) * (1.-r*r);  \n     vec4 layer1 = vec4(col,occluders,light.yz) + O;\n     \n    fragColor = layer1; //Gross hack to pass light pos as B and A values\n}","name":"Buffer A","description":"","type":"buffer"}]}