{"ver":"0.1","info":{"id":"clyBzt","date":"1702356512","viewed":45,"name":"broken world","username":"nayk","description":"colorful, star, copypast","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["colorful","star","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* originals https://www.shadertoy.com/view/4tyfWy  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DtGfzV and other*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define count 12.\n\nvec2 Rot(vec2 uv, float amount)\n{\n    float rot = iTime * amount;\n    return vec2(uv.y*sin(rot)+uv.x*cos(rot), uv.y*cos(rot)-uv.x*sin(rot));\n}\n\n\nfloat TriSDF(vec2 uv, float r)\n{\n    const float k = sqrt(3.);\n    uv.x = abs(uv.x) - r;\n    uv.y = uv.y + r/k;\n    if(uv.x+k*uv.y<0.) uv=vec2(uv.x+k*uv.y,k*uv.x-uv.y)/2.;\n    uv.x -= clamp(uv.x,-1.*r, 1.);\n    return -length(uv)*sign(uv.y);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; // the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\n//dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.1; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.03,1.);\n}\nvec2 lens(vec2 uv) {\n     float size = 0.3+(0.21*cos(iTime));\n    float t = iTime * 0.3;\n   \n    vec2 p = vec2(sin(t*3.0)* 0.5, sin(t*5.) * 0.3);\n    vec2 d = p - uv;\n   \n    float l = length(d);    \n    float lf = smoothstep(size+0.01, size-0.01, l);\n   \n    vec2 dn = d / size;\n   \n    //vec2 res = vec2(pow(10., dn.x), pow(10., dn.y));\n   \n    return lf * (dn * dn * dn);\n   \n    //return vec2(0.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\nvec4 O2=fragColor;\nvec2 u =fragCoord;\n\nu = (u+u-iResolution.xy)/iResolution.y;\n    O2 -= O2;\n    \n    for(float i = 0.; i < count; i++)\n    {\n        vec2 ruv = Rot(u,i*0.02);\n        float scale = 1.5*fract(iTime/3.5 + i*1./count);//0.5;\n        float tri = abs(TriSDF(ruv, 1.5*fract((i*1./count)+iTime*.2)));\n        tri = smoothstep(0.01,0.,tri)+smoothstep(0.2,0.,tri)*.15;\n        vec3 col = vec3(cos(i+iTime+vec3(0.,1.,2.))+1.2);\n        O2 += vec4(tri * col, 0.);\n    }\n      dir.xy -= lens(dir.xy);\nvec4 O = fragColor;\n      vec2 C =fragCoord;\n    O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=-iTime*1.5;\n        a=20.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            p=.003-abs(p);\n           \n            p.x<p.z?p=p.zyx:p;\n            \n           \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*sin(iTime*.3))*3.,\n                    7,\n                    8.+cos(iTime*.5)*5.\n                 )+O2.xyz;\n         }\n         g+=e=length(p.yz)/s;\n         \n    }\n\nvec3 from=vec3(1.,.5,0.5)*O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=O;\n}\n","name":"Image","description":"","type":"image"}]}