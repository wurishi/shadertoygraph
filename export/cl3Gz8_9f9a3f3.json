{"ver":"0.1","info":{"id":"cl3Gz8","date":"1682840117","viewed":447,"name":"20230419_fillercube","username":"0b5vr","description":"haha\n","likes":34,"published":1,"flags":32,"usePreview":0,"tags":["3d","cubes","pathtracer"],"hasliked":0,"parentid":"fdVGDy","parentname":"20210920"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Present\n\n#define saturate(i) clamp(i,0.,1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec4 tex = texelFetch( iChannel0, ivec2( fragCoord ), 0 );\n\n  vec3 color = tex.rgb / tex.a * vec3( 1.0, 1.2, 1.3 ); // cringe\n  color = mix(\n    12.92 * color,\n    pow( 1.055 * color, vec3( 1.0 / 2.4 ) ) - 0.055,\n    step( 0.0031308, color )\n  );\n\n  fragColor = vec4( color, 1 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Draw\n\n// Originally made with Blossom, the 4k exegfx framework\n// https://github.com/lunasorcery/Blossom\n\nfloat TAU = acos( -1. ) * 2.0;\n\nuvec3 pcg3d( uvec3 s ) {\n  s = s * 1145141919u + 1919810u;\n\n  s.x += s.y * s.z;\n  s.y += s.z * s.x;\n  s.z += s.x * s.y;\n\n  s ^= s >> 16;\n\n  s.x += s.y * s.z;\n  s.y += s.z * s.x;\n  s.z += s.x * s.y;\n\n  return s;\n}\n\nvec3 pcg3df( vec3 s ) {\n  uvec3 r = pcg3d( floatBitsToUint( s ) );\n  return vec3( r ) / float( -1u );\n}\n\nuvec3 seed;\nvec3 random3() {\n  seed = pcg3d( seed );\n  return vec3( seed ) / float( -1u );\n}\n\nfloat safeDot( vec3 a, vec3 b ) {\n  return clamp( dot( a, b ), 0.0001, 1.0 );\n}\n\nmat3 orthBas( vec3 d ) {\n  vec3 z = normalize( d );\n  vec3 x = normalize( cross(\n    abs( z.y ) < 0.999 ? vec3( 0.0, 1.0, 0.0 ) : vec3( 1.0, 0.0, 0.0 ),\n    z\n  ) );\n  return mat3( x, cross( z, x ), z );\n}\n\nvec3 importanceSampleLambert( vec3 N ) {\n  vec3 dice = random3();\n  float phi = TAU * dice.x;\n  float cosTheta = clamp( sqrt( dice.y ), 0.0, 1.0 );\n  float sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\n  return orthBas( N ) * vec3(\n    cos( phi ) * sinTheta,\n    sin( phi ) * sinTheta,\n    cosTheta\n  );\n}\n\nvec3 importanceSampleGGX( float roughness, vec3 N ) {\n  vec3 dice = random3();\n  float phi = TAU * dice.x;\n  float cosTheta = dice.y;\n  cosTheta = clamp(\n    sqrt( ( 1.0 - cosTheta ) / ( 1.0 + ( pow( roughness, 4.0 ) - 1.0 ) * cosTheta ) ),\n    0.0,\n    1.0\n  );\n  float sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\n  return orthBas( N ) * vec3(\n    cos( phi ) * sinTheta,\n    sin( phi ) * sinTheta,\n    cosTheta\n  );\n}\n\nvec4 isectBox( vec3 ro, vec3 rd, vec3 s ) {\n  vec3 xo = -ro / rd;\n  vec3 xs = abs( s / rd );\n\n  vec3 dfv = xo - xs;\n  vec3 dbv = xo + xs;\n\n  float df = max( dfv.x, max( dfv.y, dfv.z ) );\n  float db = min( dbv.x, min( dbv.y, dbv.z ) );\n  if ( df < 0.0 || db < df ) { return vec4( 100.0 ); }\n\n  vec3 n = -sign( rd ) * step( vec3( df ), dfv );\n  return vec4( n, df );\n}\n\nvec4 isectIBox( vec3 ro, vec3 rd, vec3 s ) {\n  vec3 xo = -ro / rd;\n  vec3 xs = abs( s / rd );\n\n  vec3 dbv = xo + xs;\n\n  float db = min( dbv.x, min( dbv.y, dbv.z ) );\n  if ( db < 0.0 ) { return vec4( 100.0 ); }\n\n  vec3 n = -sign( rd ) * step( dbv, vec3( db ) );\n  return vec4( n, db );\n}\n\nvec4 isectPlane( vec3 ro, vec3 rd, vec3 n ) {\n  float t = -dot( ro, n ) / dot( rd, n );\n  return mix( vec4( 100.0 ), vec4( n, t ), step( 0.0, t ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n\n  seed = uvec3( fragCoord, iFrame );\n\n  vec2 p = 2.0 * fragCoord / iResolution.xy - 1.0;\n  p.x *= iResolution.x / iResolution.y;\n\n  if ( abs( p.x ) > 1.0 ) {\n    fragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    return;\n  }\n\n  float inMedium = 0.0;\n\n  vec3 cp = vec3( 10.0, 6.0, 10.0 );\n  mat3 cm = orthBas( normalize( cp ) );\n\n  vec3 ro, rd;\n\n  vec3 dice;\n  float ampRem;\n  float amp;\n  float wave;\n  float ior;\n  vec4 col = vec4( 0.0 );\n\n  vec4 isect, isect2, octree;\n\n  for ( int i = 0; i < 100; i ++ ) {\n    // this makes the compile faster for some reason\n    if ( col.w == 1.5 ) { break; }\n    \n    if ( ampRem < 0.001 ) {\n      // cringe\n      col += vec4(\n        amp * smoothstep( 0.1, 0.0, abs( wave - vec3( 0.7, 0.6, 0.5 ) ) ),\n        1.0\n      );\n\n      ro = cp + cm * vec3( 2.0 * ( p + 2.0 * random3().xy / iResolution.y ), 0.0 );\n      rd = cm * vec3( 0.0, 0.0, -1.0 );\n      ampRem = 4.0;\n      amp = inMedium = 0.0;\n      wave = mix( 0.4, 0.8, random3().x );\n      ior = 1.4 + 0.04 / wave / wave; // cringe\n    }\n\n    if ( inMedium == 1.0 ) {\n      isect = isectBox( ro - octree.xyz, rd, vec3( octree.w - 0.01 ) * 0.5 );\n\n      if ( isect.w < 100.0 ) {\n        amp += ampRem;\n        ampRem *= 0.0;\n      } else {\n        isect = isectIBox( ro - octree.xyz, rd, vec3( octree.w - 0.01 ) );\n        ro += isect.w * rd;\n\n        // cringe\n        vec3 H = importanceSampleGGX( 0.7 * pcg3df( dice ).x, isect.xyz );\n        vec3 wo = refract( rd, H, ior );\n        if ( wo == vec3( 0.0 ) ) {\n          rd = reflect( rd, H );\n        } else {\n          rd = wo;\n          inMedium = 0.0;\n          ampRem *= 0.7;\n        }\n\n        ro += 0.001 * rd;\n      }\n\n      continue;\n    }\n\n    isect = vec4( 100.0 );\n\n    float octreeBBB = isectIBox( ro, rd, vec3( 1.0 ) ).w;\n    if ( octreeBBB < 100.0 ) {\n      float tl = isectBox( ro, rd, vec3( 1.0 ) ).w;\n      tl = mix( tl, 0.0, step( 100.0, tl ) );\n\n      for ( int i = 0; i < 20; i ++ ) {\n        float isHole = 0.0;\n        octree = vec4( 1.0 );\n\n        for ( int i = 0; i < 5; i ++ ) {\n          octree = vec4(\n            floor( ( ro + rd * ( tl + 0.005 ) ) / octree.w ) + 0.5,\n            0.5\n          ) * octree.w;\n\n          dice = pcg3df( 66.0 + octree.xyz );\n\n          if ( dice.y < 0.2 || abs( octree.x ) > 1.0 || abs( octree.y ) > 1.0 || abs( octree.z ) > 1.0 ) {\n            isHole = 1.0;\n            break;\n          }\n\n          if ( dice.x < 0.5 ) { break; }\n        }\n\n        isect = mix(\n          isectBox( ro - octree.xyz, rd, vec3( octree.w - 0.01 ) ),\n          vec4( 100.0 ),\n          isHole\n        );\n\n        if ( isect.w < 100.0 ) {\n          break;\n        } else {\n          tl = isectIBox( ro - octree.xyz, rd, vec3( octree.w ) ).w;\n          if ( octreeBBB < tl ) { break; }\n        }\n      }\n    }\n\n    float roughness = 0.1;\n    float baseColor = mix( 0.04, 0.8, step( 0.4, dice.z ) );\n    float emissive = 0.0;\n\n    isect2 = isectPlane( ro + vec3( 0.0, 1.0, 0.0 ), rd, vec3( 0.0, 1.0, 0.0 ) );\n    if ( isect2.w < isect.w ) {\n      isect = isect2;\n      roughness = 0.2;\n      baseColor = 0.03;\n      dice *= 0.0;\n    }\n\n    isect2 = isectBox( ro - vec3( 0.0, 7.0, 0.0 ), rd, vec3( 4.0, 1.0, 4.0 ) );\n    if ( isect2.w < isect.w ) {\n      isect = isect2;\n      roughness = 1.0;\n      baseColor = 0.0;\n      emissive = 2.0;\n      dice *= 0.0;\n    }\n\n    isect2 = isectBox( ro - vec3( 7.0, 0.0, 0.0 ), rd, vec3( 2.0 ) );\n    if ( isect2.w < isect.w ) {\n      isect = isect2;\n      roughness = 1.0;\n      baseColor = 0.0;\n      emissive = 1.0;\n      dice *= 0.0;\n    }\n\n    if ( isect.w < 100.0 ) {\n      ro += isect.w * rd;\n\n      amp += emissive * ampRem;\n\n      if ( dice.z > 0.8 ) {\n        // cringe\n        vec3 H = importanceSampleGGX( 0.7 * pcg3df( dice ).x, isect.xyz );\n        rd = refract( rd, H, 1.0 / ior );\n        inMedium = 1.0;\n        ro += 0.001 * rd;\n        continue;\n      }\n\n      float NdotV = safeDot( isect.xyz, -rd );\n      float Fn = mix( 0.04, 1.0, pow( 1.0 - NdotV, 5.0 ) );\n\n      if ( random3().x < Fn ) {\n        // specular\n        vec3 H = importanceSampleGGX( roughness, isect.xyz );\n        vec3 wo = reflect( rd, H );\n        if ( dot( wo, isect.xyz ) < 0.0 ) {\n          ampRem *= 0.0;\n          continue;\n        }\n\n        float VdotH = safeDot( -rd, H );\n        float NdotL = safeDot( isect.xyz, wo );\n        float NdotH = safeDot( isect.xyz, H );\n        float Fh = mix( 0.04, 1.0, pow( 1.0 - VdotH, 5.0 ) );\n\n        // g_smith\n        roughness *= roughness / 2.0;\n\n        float G1V = NdotV / ( NdotV * ( 1.0 - roughness ) + roughness );\n        float G1L = NdotL / ( NdotL * ( 1.0 - roughness ) + roughness );\n\n        float G =\n          NdotV / ( NdotV * ( 1.0 - roughness ) + roughness ) * // G1V\n          NdotL / ( NdotL * ( 1.0 - roughness ) + roughness ); // G1L\n\n        ampRem *= Fh / Fn * G * VdotH / ( NdotH * NdotV );\n        rd = wo;\n      } else {\n        // diffuse\n        vec3 wo = importanceSampleLambert( isect.xyz );\n        vec3 H = normalize( -rd + wo );\n        if ( dot( wo, isect.xyz ) < 0.0 ) {\n          ampRem *= 0.0;\n          continue;\n        }\n\n        float VdotH = safeDot( -rd, H );\n        float Fh = mix( 0.04, 1.0, pow( 1.0 - VdotH, 5.0 ) );\n\n        ampRem *= ( 1.0 - Fh ) / ( 1.0 - Fn ) * baseColor;\n        rd = wo;\n      }\n\n      ro += 0.001 * rd;\n    } else {\n      ampRem *= 0.0;\n    }\n  }\n\n  fragColor = col / col.w;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Accumulate\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n\n  // accumulate using backbuffer\n  fragColor = texture( iChannel0, uv );\n\n  if ( iFrame > 1 && iMouse.w < 0.5 ) {\n    fragColor += texture( iChannel1, uv );\n  }\n}","name":"Buffer B","description":"","type":"buffer"}]}