{"ver":"0.1","info":{"id":"ltXyDM","date":"1505030539","viewed":692,"name":"Flickering Candlelight","username":"ackleyrc","description":"Iterating on Torchlight Test (https://www.shadertoy.com/view/XtsyDH) to create the shape and flickering effect of a candle flame. Can be moved with the mouse by uncommenting relevant code.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["flame","fire","light","flicker","candle","prng","shape","coherentnoise","torch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ----- math constants -----\nconst float PI = 3.14159265359;\nconst float TAU = 6.28318530718;\n\nfloat rand(float seed)\n{\n\t// Very simple pseudo-random number generator\n    // Returns a value between 0 and 1\n    // Preferentially returns the midrange\n    return mod(fract(sin(seed * 6789.54321)) + 0.5, 1.0);\n}\n\nfloat coherentNoise(float seed)\n{\n\tfloat a = floor(seed);\n    float b = ceil(seed);\n    float rA = rand(a);\n    float rB = rand(b);\n    if (rA == rB) {\n        return rA;\n    } else {\n        float nT = (1.0 - (b - seed)) / (b - a);\n        float cT = nT * nT * (3.0 - 2.0 * nT);\n        return rA + (cT * (rB - rA));\n    }\n}\n\nfloat multiOctaveNoise(float seed, int numOcts, float lacunarity, float persistence)\n{\n    float sum = 0.0;\n    for (int i = 0; i < numOcts; ++i)\n    {\n        float oct = coherentNoise(seed * pow(lacunarity, float(i)));\n        sum += oct * pow(persistence, float(i));  \n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 m = vec2(0.5,0.5);\n    // Uncomment the if clause below to move the flame around with the mouse\n    /*\n    if (iMouse.xy != vec2(0.0,0.0))\n    {\n    \tm = iMouse.xy / iResolution.xy;\n    }\n\t*/\n    \n    uv -= m;\n    uv -= vec2(0.0,-0.45);\n    float distortSpeed = 1.0;\n    float distortVar = multiOctaveNoise(iTime * distortSpeed + (0.25 * uv.y), 3, 2.0, 0.5);\n    uv -= vec2(0.15 * uv.y * (distortVar - 0.9),0.0);\n    \n    uv.x *= iResolution.x/iResolution.y;\n    float d = 1.0 * length(uv);\n    \n    float angleSpeed = 1.0;\n    float angle = atan(uv.x, uv.y);\n    float angleVar = multiOctaveNoise(iTime * angleSpeed, 3, 2.0, 0.5);\n    angle += 0.25 * ((angleVar * 0.125 * PI) - (0.125 * PI));\n    \n    float sizeSpeed = 1.0;\n    float sizeVar = multiOctaveNoise(iTime * sizeSpeed, 3, 3.0, 0.75);\n    \n    float redAngle = 1.0 - abs(angle);\n    redAngle = redAngle * (0.915 + 0.085 * sizeVar);\n    float redComp = smoothstep(redAngle, redAngle-0.4, d);\n    \n    float yellowAngle = 0.95 - abs(angle);\n    yellowAngle = 0.85 * yellowAngle * (0.915 + 0.085 * sizeVar);\n    float greenComp = smoothstep(yellowAngle, yellowAngle-0.35, d);\n    \n\tfragColor = vec4(redComp, greenComp, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}