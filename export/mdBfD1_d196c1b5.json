{"ver":"0.1","info":{"id":"mdBfD1","date":"1689665437","viewed":43,"name":"learning-spiral(stable)","username":"bazylevnik0","description":"https://en.wikipedia.org/wiki/Archimedean_spiral","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["patterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//!warning many calculations in one frame, you can pause it - same in each frame\nfloat p = 3.14159265359;    // pi constant\n \nfloat n_atan(float y, float x) {\n  if(y<0.0){\n      return  p+atan(y,x);\n  } else return atan(y,x);\n} //for idea of norm_atan function thx to Bard\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*2.0;\n  \n    float a = 0.0;        // center point\n    float b = 0.025;      // distance between loops\n    float l = length(uv); // length of point  \n    float d = 0.001;      // delta koef\n    \n    float draw;\n    //go through all \"time\" diapason\n    for(float t=0.0; t < 20.0; t+=0.01){\n      float a_c = mod(t,p);          // angle of time\n      float a_p = n_atan(uv.y,uv.x); // angle of point\n      float r = a+b*t;               // radius formula\n      // If near to drawing angle draw(delta koef)\n      if(l<r+d&&l>r-d){\n          if(a_p>a_c-d*10.0&&a_p<a_c+d*10.0)draw=1.0;\n      }\n    }\n    // Output to screen\n    fragColor = vec4(draw,draw,draw,1.0);\n}","name":"Image","description":"","type":"image"}]}