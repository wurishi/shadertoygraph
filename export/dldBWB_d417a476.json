{"ver":"0.1","info":{"id":"dldBWB","date":"1702089318","viewed":33,"name":"HW5 CSE 167 astoria_ma 635","username":"astoria_ma","description":"This is a homework template for a homework for UCSD CSE 167.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n     \n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n\n    // Implement Boids here\n    float D_RIGHT = float(iChannelResolution[0].x) - D_LEFT;\n    float D_BOTTOM =  float(iChannelResolution[0].y) - D_TOP;\n    \n    // iterate through near by boids\n    float total_safety_count = 0.0f;\n    float total_perceptual_count = 0.0f;\n    vec2 total_nearby_pos = vec2(0.0,0.0);\n    vec2 total_nearby_vel = vec2(0.0,0.0);\n    vec2 total_force_separation = vec2(0.0,0.0);\n    \n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 nearby_tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 nearby_pos_vel = texelFetch(iChannel0, nearby_tex_pos, 0);\n        if (nearby_pos_vel==pos_vel){continue;}\n        if (distance(pos, nearby_pos_vel.xy) < SAFETY_DISTANCE) {\n            total_safety_count += 1.0f;\n            //total_nearby_pos += nearby_pos_vel.xy;\n            //total_nearby_vel += nearby_pos_vel.zw;\n            total_force_separation += (pos-nearby_pos_vel.xy);\n        }\n    }\n    \n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 nearby_tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 nearby_pos_vel = texelFetch(iChannel0, nearby_tex_pos, 0);\n        if (nearby_pos_vel==pos_vel){continue;}\n        if (distance(pos, nearby_pos_vel.xy) < PERCEPTUAL_DISTANCE) {\n            total_perceptual_count += 1.0f;\n            total_nearby_pos += nearby_pos_vel.xy;\n            total_nearby_vel += nearby_pos_vel.zw;\n        }\n    }\n    vec2 avg_nearby_pos = vec2(0.0,0.0);\n    vec2 avg_nearby_vel = vec2(0.0,0.0);\n    vec2 force_separation = vec2(0.0,0.0);\n    if(total_perceptual_count!=0.0){\n        avg_nearby_pos = total_nearby_pos/total_perceptual_count;\n        avg_nearby_vel = total_nearby_vel/total_perceptual_count;\n    }\n    if(total_safety_count!=0.0){\n        force_separation = total_force_separation/total_safety_count;\n    }\n    \n    // get the weird forces\n    vec2 force_cohesion = avg_nearby_pos - pos;\n    vec2 force_alignment = avg_nearby_vel - vel;\n    float left_bool = 0.0f;\n    float right_bool = 0.0f;\n    float top_bool = 0.0f;\n    float bottom_bool = 0.0f;\n    if(pos.x<D_LEFT){left_bool = 1.0f;}\n    if(pos.x>D_RIGHT){right_bool = 1.0f;}\n    if(pos.y>D_BOTTOM){bottom_bool = 1.0f;}\n    if(pos.y<D_TOP){top_bool = 1.0f;}\n    \n    \n    vec2 force_boundary = vec2(left_bool-right_bool,top_bool-bottom_bool);\n    \n    vec2 total_force = A_SEPERATION*force_separation+A_COHESION*force_cohesion+A_ALIGNMENT*force_alignment+A_BOUNDARY*force_boundary;\n    \n\n    vel = vel+total_force;\n    if(length(vel)>0.0){\n        if(length(vel)>SMAX) {vel = vel*(SMAX/length(vel));}\n        if(length(vel)<SMIN) {vel = vel*(SMIN/length(vel));}\n    }\n    pos = pos+vel;\n    \n   \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n#define SAFETY_DISTANCE 30.0\n#define PERCEPTUAL_DISTANCE 150.0\n#define A_ALIGNMENT 0.03\n#define A_COHESION 0.001\n#define A_SEPERATION 0.02\n#define A_BOUNDARY 0.5\n#define SMAX 10.0\n#define SMIN 5.0\n#define D_LEFT 200.0\n#define D_TOP 160.0\n\n","name":"Common","description":"","type":"common"}]}