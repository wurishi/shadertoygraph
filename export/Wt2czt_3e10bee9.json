{"ver":"0.1","info":{"id":"Wt2czt","date":"1595108131","viewed":133,"name":"Simple Triangle Redux ","username":"BigotedSJW","description":"Courtesy/ripoff of @UrbanFlame https://www.shadertoy.com/view/WlScRd\nEdit: Today I am reminded that barycentric coordinates are a thing. \nhttps://www.shadertoy.com/results?query=barycentric\nI feel oh so very dumb right now.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","test","simple","triangle","remix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// refactor of https://www.shadertoy.com/view/WlScRd by @UrbanFlame\n// still much more boring than https://www.shadertoy.com/view/XsXSz4\n// and possibly less efficient than iq's sdf\n// (entirely outshown by neighboring upload: https://www.shadertoy.com/view/wlSyzd)\n\n////// improvements \n/* things move\n * isInPlace function vectorized\n * logic for isInPlace return value greatly simplified \n\t\tto a single multiply and compare.\n **no explicit if branch**/\n \n// Check if point (current uv coords) has same sign as third point in compare with straight line\n// of triangle -- \nbool isInPlace(vec2 curPos, vec2 start, vec2 end, vec2 other)\n{\n    vec2 inverseEdgeRay = 1./(end - start);\n    \n    vec2 vsCurPos = (curPos - start)*inverseEdgeRay;\n    \n    float diffVsCurPos = vsCurPos.x - vsCurPos.y;\n    \n    vec2 vsOtherPos = (other - start)*inverseEdgeRay;\n    float diffVsOtherPos = vsOtherPos.x - vsOtherPos.y;\n    \n    //probably does not even need to be a boolean\n    return diffVsCurPos * diffVsOtherPos >= 0.0;\n}\n\nconst vec2 for2Cos = vec2(1.,-1.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n\t\n    vec2 sincos1 = vec2(cos(iTime), sin(iTime));\n    vec2 towards2Cos = sincos1 * for2Cos;\n    \n    vec2 sincos2 = vec2(\n        dot(towards2Cos,towards2Cos),\n   \t\t2.*sincos1.x*sincos1.y\n    );\n    \n    mat2 rot1 = mat2(sincos1, -sincos1.y, sincos1.x);\n    mat2 rot2 = mat2(sincos2, -sincos2.y, sincos2.x);\n    mat2 rot3 = rot1*rot2;\n    \n    //Setup your points for triangle\n    vec2 aPoint = vec2(0.1213, 0.313)*rot1;\n    vec2 bPoint = vec2(0.43895, 0.821398)*rot2;\n    vec2 cPoint = vec2(0.4934, 0.6405)*rot3;\n    \n    float bool2float = float(\n        isInPlace(uv, aPoint, bPoint, cPoint) &&\n        isInPlace(uv, aPoint, cPoint, bPoint) &&\n        isInPlace(uv, bPoint, cPoint, aPoint));\n    \n    vec3 col = vec3(1.0 - bool2float);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}