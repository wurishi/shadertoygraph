{"ver":"0.1","info":{"id":"ml3fzB","date":"1701382649","viewed":107,"name":"LasVegas Dome","username":"iapafoto","description":"Simple code inspired by  https://whenistheweekend.com/theSphere.html\n\nFollow instructions on top of code to use it","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["dome","lasvegas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by sebastien durand - 11/2024\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//---------------------------------------------------\n\n// idea from :\n// -------------------------------------------\n// https://whenistheweekend.com/theSphere.html\n// -------------------------------------------\n\n// 1 - Enable texture import thanks to\n// RupertOnTheLoose - [Load an image] - https://www.shadertoy.com/view/tsccWr\n// https://chromewebstore.google.com/detail/shadertoy-custom-texures/jgeibpcndpjboeebilehgbpkopkgkjda?hl=en&pli=1\n\n// 2 - drop the video from\n// https://whenistheweekend.com/stabilizedSphere_2.mp4\n// On iChannel0\n\n\n// 2 - drop your video \n// On iChannel2 (mipmap - VFlip)\n\n#define WITH_GRID // display grib\n\n#define AA 4\n\n\nfloat iSphere(in vec3 ro, in vec3 rd, in float r, out float e) {\n\tfloat b = dot(rd,-ro), d = b*b - dot(ro,ro) + r*r;\n\tif (d < 0.) return -1.;\n    e = sqrt(d);\n\treturn b - e;\n}\n\n\nfloat isGrid(vec3 p, vec3 v) {\n    vec3 k = smoothstep(.2,.8,abs(mod(p+v*.5, v)-v*.5)/.01);\n    return k.x * k.y * k.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = 1.575,      // sphere r\n          hGround = .1,   // ground elev (sphere is 0,0,0)\n          an = -0.0205*mod(iTime,20.35); // cam rotations\n    \n    vec3 ro = vec3( 3.5*cos(an), 1.7, 3.5*sin(an) ),\n         ww = normalize(  - ro ),\n         uu = normalize( cross(ww,vec3(0.0,1.,0.0) ) ),\n         vv = normalize( cross(uu,ww));\n\n    vec4 tot = vec4(0);\n    \n    for (int j=0; j<AA; j++)\n    for (int i=0; i<AA; i++)\n    {\n        vec2 off = vec2( float(i), float(j) ) / float(AA) - .5,\n             uv = (-iResolution.xy + 2.*(fragCoord+off)) / iResolution.y;\n        \n        uv += vec2(-.077,.105); // to fit video\n        \n        vec3 rd = normalize( uv.x*uu + uv.y*vv + 1.5*ww ),\n             pos = vec3(0);\n        vec4 col = vec4(0);\n        float a, y,h, tmin = 10000.0,edge = 0.;\n       \n        \n        // the sphere\n        h = iSphere( ro, rd, r, edge );\n        if (h>=0. && h<tmin) { \n            tmin = h; \n            pos = ro + h*rd;\n            vec3 p = normalize(pos);\n            a = atan(-p.z,p.x);\n            y = asin(p.y);\n            col = texture(iChannel2,vec2(.5+.55*a,.85*y+.05));\n            col *= 1.+ 1.*smoothstep(.2*r,0., edge); \n            col.a = smoothstep(-.1, .1*r, edge); \n        }\n   \n        // the ground \n        h = (-ro.y-hGround)/rd.y;\n        if (h>0. && h<tmin) { \n            tmin = h; \n            pos = ro + h*rd;\n            vec3 p = normalize(pos);\n            a = atan(-p.z,p.x);\n            y = length(pos.zx)+.37;            \n            col = 10.*texture(iChannel2,vec2(.5+.55*a,.85*y+.05),5.); \n            col.a = .25*smoothstep(2.7,1.5,y); \n        }\n   \n    #ifdef WITH_GRID\n        if (tmin<100.) {\n            float k = isGrid(pos, .5*vec3(1,1,1));\n            col = mix(vec4(0,1,0,.5), col, .8+.2*k);\n \n        }\n    #endif\n    \n        tot += pow( col, vec4(.45,.45,.45,1.) );\n    }\n    tot /= float(AA*AA);\n\n    // Compose colors\n    vec4 txt = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = mix(txt, tot, tot.a);\n}\n","name":"Image","description":"","type":"image"}]}