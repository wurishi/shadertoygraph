{"ver":"0.1","info":{"id":"3ssSD8","date":"1551189265","viewed":1029,"name":"V's fire effect","username":"vegardno","description":"This was supposed to be a water effect...","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["flame","fire","effect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SMOOTH 1\n#define MULTIPLE 1\n#define DEBUG_LINE 0\n\n#if SMOOTH\n#define FLAME_BASE_WIDTH .012\n#else\n#define FLAME_BASE_WIDTH .0\n#endif\n\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float r, float x, const float n)\n{\n    r *= 1337.;\n    float noise0 = rand(r + floor(n * x));\n    float noise1 = rand(r + floor(n * x + 1.));\n    float t = fract(n * x);\n\treturn t * noise1 + (1. - t) * noise0;\n}\n\nfloat line(vec2 uv)\n{\n#if MULTIPLE\n    uv = vec2(mod(uv.x + .25, .5) - .25, uv.y + floor((uv.x + .25) / .5));\n#endif\n    \n\tfloat center = .1 * (noise(1., uv.y, 5.) + .8 * noise(2., uv.y, 10.) - .9);\n\tfloat width = FLAME_BASE_WIDTH + .04 * (noise(3., uv.y, 5.) + .8 * noise(4., uv.y, 10.));    \n#if SMOOTH\n    //return sin(3.14 * clamp(.5 + (uv.x - center) / width, 0., 1.));\n    if (uv.x < center - width)\n        return 0.;\n    if (uv.x < center)\n        return smoothstep(center - width, center - .7 * width, uv.x);\n    if (uv.x < center + width)\n        return 1. - smoothstep(center + .7 * width, center + width, uv.x);\n\treturn 0.;\n#else\n    return float(uv.x > center - width && uv.x < center + width);\n#endif\n}\n\nvec2 rot(vec2 uv, float a)\n{\n    return uv * mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat flame(vec2 uv, float spread, float p)\n{\n\tfloat col = 1.;\n    col *= line(rot(uv, 3.14 - spread) + vec2(0., p + iTime));\n    col *= line(rot(uv, 3.14 + spread) + vec2(0., p + iTime));\n\treturn col;\n}\n\nvec3 fire_color(float x)\n{\n\treturn\n        // red\n        vec3(1., 0., 0.) * x\n        // yellow\n        + vec3(1., 1., 0.) * clamp(x - .5, 0., 1.)\n        // white\n        + vec3(1., 1., 1.) * clamp(x - .7, 0., 1.);\n}\n\nvec3 smoke_color(float x)\n{\n    return vec3(.5, .5, .5) * x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - vec2(.5 * iResolution.x, 0.)) / iResolution.y\n        - vec2(0., .5);\n\n    //uv *= 3. + 2. * cos(-iTime);\n    \n#if DEBUG_LINE\n   \tfragColor = vec4(vec3(1., 0., 0.) * line(uv + vec2(0., iTime)), 1.0);\n#else\n    const int fire_n = 10;\n\tfloat fire_intensity = 0.;\n    for (int i = 0; i < fire_n; ++i) {\n        float t = float(i)/ float(fire_n) - .5;\n    \tfire_intensity += flame(uv + vec2(0., .08 + .1 * t), .15 + .1 * t, 273. * float(i));\n    }\n\n    fragColor = vec4(fire_color(2. * fire_intensity / float(fire_n)), 1.0);\n#endif\n}","name":"Image","description":"","type":"image"}]}