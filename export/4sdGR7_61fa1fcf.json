{"ver":"0.1","info":{"id":"4sdGR7","date":"1448652615","viewed":164,"name":"Start of a brick texture","username":"prozacgod","description":"I like that I'm solving interesting problems and leaving the basics up there, somebody else might learn from these!  ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// create a 0.0->1.0 uv space\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    // I use clamp(sign(sin)) to determine the period of the brick, creates a hard\n    // oscillation between 1 and 0, you could use a mod 2.0 here\n    // but I wasn't sure where I was going yet.\n        \n    // calculate vertial brick rows..\n    float i = clamp(sign(sin(uv.y * 3.1415 * 6.0)), 0.0, 1.0);\n    // I offset my texture space by half a brick to render bricks alternating from one another.\n    uv.x += (0.5/3.0) + (i * (0.5/3.0));\n    // calculate the horizontal bricks now.\n    float g = sign(sin(uv.x * 3.1415 * 3.0));\n        \n   \t// the point of the above calculations is to be able to do more calculations,\n    // next would be to determine the gaps \n    \n    // I'm going to setup the brick mortar joints as a sine period of 48.0 that produces\n    // the best looking output\n    uv.y += (0.5 / 48.0); // this aligns the grooves with the centers of the mortar joins\n    float j = 0.0;\n    if (mod(uv.y * 48.0, 8.0) < 1.0) {\n\t\tj = clamp(sin(uv.y * 3.1415 * 48.0), 0.0, 1.0);\n    }\n    // I offset my texture space by half a brick to render bricks alternating from one another.\n   \n    uv.x += (0.5 / 96.0); // this aligns the grooves with the centers of the mortar joins\n    float n = 0.0;\n    if (mod(uv.x * 96.0, 32.0) < 1.0) {\n\t\tn = clamp(sin(uv.x * 3.1415 * 96.0), 0.0, 1.0);\n    }\n    \n    // the colors output here are more of a debug thing\n    // row are alternating green/black\n    // columns are alternating red/black\n    // this produces red/black/yellow bricks.\n    \n    \n\tfragColor = vec4(g - j - n, i - j - n, 0.0, 1.0);\n}","name":"","description":"","type":"image"}]}