{"ver":"0.1","info":{"id":"ssfXDn","date":"1618470613","viewed":65,"name":"Mandelbrot 0001","username":"larrytheking","description":"Simple mandelbrot","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int   c_MaxIterations = 64;\nconst float c_Threshold = 1000.0;\nconst vec2  c_Window[2] = vec2[]( vec2(-2, -2), vec2(2, 2) );\n\nvec2 complexSquare(in vec2 c)\n{\n    return vec2(c.x * c.x - c.y * c.y, 2.0 * c.x * c.y);\n}\n\nint Mandelbrot(in vec2 c, in float threshold, in int maxIterations)\n{\n    int iteration = 0;\n    vec2 z = vec2(0, 0);\n\n    do {\n        z = complexSquare(z) + c;\n    } while(++iteration < maxIterations && length(z) < threshold);\n\n    return iteration;\n}\n\n\nvec3 ColorizeIteration(in int iteration, in int maxIterations)\n{\n    float alpha = 1.0 - float(iteration) / float(maxIterations);\n  \n    vec3 color = vec3(alpha);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 x = c_Window[0] * uv + c_Window[1] * (vec2(1, 1) - uv);\n\n    int iteration = Mandelbrot(x, c_Threshold, c_MaxIterations);\n\n    vec3 col = ColorizeIteration(iteration, c_MaxIterations);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}