{"ver":"0.1","info":{"id":"ttVSRz","date":"1582118289","viewed":373,"name":"Office Hell","username":"bitless","description":"The Eights circle of Hell, Bolgia Four.\nA place for those sinners who have fun with shaders during working hours.\n(My cell is #42LZYCDR, welcome)","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["2d","distortion","isometric","labyrinth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: bitless\n// Title: Office Hell\n// Thanks to Patricio Gonzalez Vivo & Jen Lowe for \"The Book of Shaders\"\n// and Fabrice Neyret (FabriceNeyret2) for https://shadertoyunofficial.wordpress.com/\n// and Inigo Quilez (iq) for  https://iquilezles.org/www/index.htm\n// and whole Shadertoy community for inspiration.\n\n\n\n//\t\t\t\t _____      ___    ___                        __  __          ___    ___      \n//\t\t\t\t/\\  __`\\  /'___\\ /'___\\ __                   /\\ \\/\\ \\        /\\_ \\  /\\_ \\     \n//\t\t\t\t\\ \\ \\/\\ \\/\\ \\__//\\ \\__//\\_\\    ___     __    \\ \\ \\_\\ \\     __\\//\\ \\ \\//\\ \\    \n//\t\t\t\t \\ \\ \\ \\ \\ \\ ,__\\ \\ ,__\\/\\ \\  /'___\\ /'__`\\   \\ \\  _  \\  /'__`\\\\ \\ \\  \\ \\ \\   \n//\t\t\t\t  \\ \\ \\_\\ \\ \\ \\_/\\ \\ \\_/\\ \\ \\/\\ \\__//\\  __/    \\ \\ \\ \\ \\/\\  __/ \\_\\ \\_ \\_\\ \\_ \n//\t\t\t\t   \\ \\_____\\ \\_\\  \\ \\_\\  \\ \\_\\ \\____\\ \\____\\    \\ \\_\\ \\_\\ \\____\\/\\____\\/\\____\\\n//\t\t\t\t    \\/_____/\\/_/   \\/_/   \\/_/\\/____/\\/____/     \\/_/\\/_/\\/____/\\/____/\\/____/\n//                                                                              \n//\t\t\t\tThe Eights circle of Hell, Bolgia Four.\n//\t\t\t\tA place for those sinners who have fun with shaders during working hours.\n//\t\t\t\t(My cell is #42LZYCDR, welcome)                                                                              \n\n\nfloat WT = 0.08333333; //wall thickness\nfloat WH = 0.33333333; //wall height\nfloat DS = 0.33333333; //door size\nfloat sm; //smoothing\nfloat l = 5.; \n#define WF (WT+WH)\n#define CLR .1 //Colorness\n#define LT .02 //Line thickness\n#define LS .01 //Line thickness\n#define FloorColor vec3(.52,.52,.52)\n#define WallColor vec3(.8,.8,.7)\n#define LineColor vec3(.1,.1,.1)\n#define lx lc+vec2(lc.y,0.)\n#define ly lc+vec2(0.,lc.x)\n#define SinPro .12 //count of sinners \n#define PI 3.1415926\n#define hue(v) (.6 +.6*cos(2.*PI*(v)+vec3(0,-2.*PI/3.,2.*PI/3.)))  \n#define hash2(p) (fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453))\n\n\nfloat bx (vec2 lc, float l, float r, float d, float u, float w)\n{\n    vec2 c = vec2((r-l)/2.+l,(u-d)/2.+d)\n         ,s = vec2(r,u)-c;\n    return smoothstep (s.x-w+sm,s.x-w, abs(lc.x-c.x))*smoothstep (s.y-w+sm,s.y-w, abs(lc.y-c.y));\n}\n\nvec4 SolidWall (vec2 lc, bool s, vec3 h) {\n    vec3 r;\n    float a = bx(lc+vec2(lc.y,0.),0.,1.,0.,WH+WT,0.);\n\n    r = mix (LineColor, mix(WallColor,h,CLR), bx(lc+vec2(lc.y,0.),0.,1.1,0.,WH+LS,LT)*(s?1.:.7));\n    r = mix (r, WallColor,bx(lc+vec2(lc.y,0.),0.,1.1,WH,WF,LT))\n        * (1.-.4*smoothstep(.1,.0,lc.y))                             \n        * (s?1.-.35*smoothstep(.4,0.,lc.x+lc.y)*smoothstep(WH+sm,WH,lc.y):1.);\n    return vec4(r,a);\n}\n\nvec4 DoorWall (vec2 lc, bool s, vec3 h) {\n    float WS = (1.-DS-WT)/2.;\n    float a = (bx(lx,0.,WS+WT,0.,WF,0.)*bx(lc,0.,WS,0.,WF,0.)\n            +bx(lx,1.-WS-WT,1.,0.,WF,0.)*bx(lc,1.-WS-WF,1.,0.,WF,0.))\n            *(1.-bx(lx,WS+WT,1.-WS-WT,0.,1.,0.));\n\n    vec3 r = mix (LineColor, mix(WallColor,h,CLR),bx(lx,-.1,WS,0.,WH+LS,LT)*(s?1.:.7) //1\n                            +bx(lx,1.-WS-WT,1.1,0.,WH+LS,LT)*(s?1.:.7)); //4\n    r = mix (r, WallColor,bx(lc,-.1,WS-WH,WH,WF,LT)  //2\n                            +bx(ly,WS-WH-LS,WS,WS-LS,WS+WT,LT)  //3\n                            +bx(lc,1.-WS-WF,1.1,WH,WF,LT)) //5\n        * (1.-.4*smoothstep(.1,.0,lc.y))                            \n        * (s?1.-.35*smoothstep(.4,.0,lc.x+lc.y)*smoothstep(WH+sm,WH,lc.y):1.);\n    return vec4(r,a);\n}\n\n\nvec4 NbrWall (vec2 lc, bool s, vec3 h) {\n    float a = bx(lx,1.-WF,1.,0.,WF,0.)*smoothstep(1.-WF-sm,1.-WF,lc.x);\n    vec3 r = mix (LineColor, WallColor,bx(lc,1.-WF,1.-WH,-.1,1.,LT)); //1\n    r = mix (r, mix(WallColor,h,CLR),bx(ly,1.-WH-LS,1.,-.1,1.,LT)*(s?1.-.4*smoothstep(.4,0.,1.-lc.x-lc.y):.7)); //2\n    r = mix (r, WallColor,bx(lc,0.,1.,WH,WF,LT))       //3\n        * (1.-.4*smoothstep(.1,.0,1.-lc.x));\n    return vec4(r,a);\n}\n\nvec4 NbrDrWall (vec2 lc, bool s, vec3 h) {\n    float WS = (1.-DS-WT)/2.;\n    float a = bx(lx,1.-WS-WT+LS,1.,0.,WH+LT*.95,0.)*smoothstep(1.-WF-sm,1.-WF,lc.x);\n    vec3 r = mix (LineColor, WallColor,bx(lc,1.-WF,1.-WH,WH-WS,1.,LT) //1\n                                        +bx(lx,1.-WS-WT,1.-WS+LS,-.1,WH-WS+LS,LT)); //2\n    r = mix (r, mix(WallColor,h,CLR),bx(ly,1.-WH-LS,1.,1.-WS,1.,LT)*(s?1.-.4*smoothstep(.4,.0,1.-lc.x-lc.y):.7)) //3\n        * (1.-.4*smoothstep(.1,.0,1.-lc.x));\n    return vec4(r,a);\n}\n\nivec2 CellType(vec2 fr) {\n    float t = floor(hash2(fr)*2.);\n    return ivec2(t, mod(t+1.,2.));    \n}\n\nvec4 InnerWall(int t, vec2 lc, bool s, vec3 h) {\n    return (t ==0)? SolidWall (lc, s, h)\n                    :DoorWall (lc, s, h);\n}\n\nvec4 OuterWall(int t, vec2 lc, bool s, vec3 h) {\n    return (t==0)? NbrWall (lc, s, h)\n                    :NbrDrWall (lc, s, h);\n}\n\nfloat sdLine(vec2 p,vec2 a,vec2 b )\n{\n    vec2 pa = p-a\n        ,ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length(pa-ba*h);\n}\n\nfloat NoiseSin(float x, float a, float f, float t ){\n    float y = sin(a * f);\n    t = .075*(iTime*t);\n    y += sin(x*f*2.1 + t)*4.5\n        + sin(x*f*10.72 + t*1.121)*.50;\n    y *= a*.06;\n    return y;\n}\n\nvec4 Sinner(vec2 fr, vec2 lc, float a){\n    vec3 res;\n\n    if (hash2(fr.yx) < SinPro) {\n        float r = hash2(fr);\n        float s = 3.;\n\n        lc = lc*vec2(s*1.3,s)+vec2(-2,-2.7)+vec2(NoiseSin(lc.x,.1,40.,50.))*smoothstep(2.,0.,l);\n        lc.x += hash2(vec2(iTime))*0.25*smoothstep(2.,0.,l);\n        vec2 df = .5*sin( iTime*(r+.5) + vec2(4.,2.5) + (r+.5)*5.)*smoothstep(0.,3.,l);\n\n        float f,sh;\n \n        lc += df;\n        \n        sh = (smoothstep(.5,.0,length(lc*vec2(1.,1.4)+vec2(0.,01.25)))+smoothstep(.9,.0,length(lc*vec2(1.,1.4)+vec2(-0.4321,01.25))))*a*.65;\n        \n        f = length(lc+vec2(0.,-.1))-.05; //head\n        f = min(f,sdLine(lc,vec2(0.,-.16),vec2(0.,-.5))-.07);//body\n        f = min(f,sdLine(lc,vec2(-.08,-.16),vec2(-.25,-.5)));//left hand\n        f = min(f,sdLine(lc,vec2(.08,-.16),vec2(.25,-.5)));//right hand\n        f = min(f,sdLine(lc,vec2(-.07,-.5),vec2(-.08,-.9)));//left leg\n        f = min(f,sdLine(lc,vec2(.07,-.5),vec2(.08,-.9)));//right leg\n        \n        res = mix(LineColor,vec3(.8,.7,.7),smoothstep(.05+sm*2.,.05,f)*a);\n        \n        a = max(sh,smoothstep(.1+sm*2.,.1,f)*a);\n    }    else a = 0.;\n        return vec4(res,a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 g)\n{\n\n    vec2 r = iResolution.xy\n        ,uv = (g+g-r)/r.y\n    \t,C = vec2(sin(iTime/20.),cos(iTime/20.))*5. //camera shift\n        ,CCell = (C * mat2(1,-1.5,1,1.5)*2.); //central cell \n\n    vec3 Res ;\n    float lg = 5.;\n    \n    for (int i = -3; i<4; i++) //distance from central cell to closes sinner\n        for (int j = -3; j <4; j++)\n            if (hash2((floor(CCell)+vec2(i,j)).yx) < SinPro) \n            {\n                lg = min (lg, length(CCell-floor(CCell+vec2(i,j))));\n            }\n\n    uv += uv * pow(length(uv),2.)*.1*smoothstep(5.,0.,lg); //camera distortion\n    vec2 rc = uv * (smoothstep(0.,5.,lg)/2.5+.25) + C; //rectangle coords\n    vec2 ic = rc * mat2(1,-1.5,1,1.5);    //isometric coords\n\n    ic *= 2.;\n    sm = fwidth(length(ic))*.8; //smoothness\n\n    vec2 fr = floor(ic); //cell number\n    vec2 lc = fract(ic);//local cell coordinates\n    \n    vec2 tc = abs(lc-vec2(.5)+vec2(WT,-WT));\n    Res = mix(FloorColor,hue (hash2(fr)),CLR*smoothstep(WT/2.,WT/2.+sm,lc.y)*smoothstep(1.-WT/2.,1.-WT/2.-sm,lc.x)); //floor color\n    Res += floor(mod(max(tc.x,tc.y)*(1.-WT)*38.,2.))*.05;//floor texture\n\n    l = length(CCell-ic)+(4.*smoothstep(0.,5.,lg));\n\n    WH = WH + (NoiseSin(ic.x,.25,2.,200.)+NoiseSin(ic.y,.25,2.,200.))*(smoothstep(2.,0.,l)); //wall height waves\n//    WT = WT + abs((NoiseSin(ic.x,.25,.1,20.)+NoiseSin(ic.y,.25,.1,20.)))*(smoothstep(2.,0.,l));//*(smoothstep(2.,0.,l)); //wall thickness waves\n    DS = DS + (sin(iTime*10.+ic.y*5.))*.2*(smoothstep(2.,0.,l)); //door size waves\n\n    float f,m,m1; //floor shadow and wall masks\n    vec4 cr;\n    ivec2 t = CellType(fr);\n    \n    f = smoothstep(0.,sm,1.-lc.y);\n    f*= 1.-.5*smoothstep(.1,0.,1.-lc.y);\n    f = (CellType(fr+vec2(0.,1.)).y == 0) ?\n        max(f,smoothstep (DS/2.,DS/2.-sm,abs(lc.x-.5+WT/2.))) \n        :f;\n\n    f*= 1.-.5*smoothstep(.1+WT,WT,1.-lc.x);\n    f = (t.x == 0) ?\n        max(f,smoothstep (DS/2.,DS/2.-sm,abs(lc.y-.5-WT/2.)))\n        :f;\n\n    f *= max(1.-smoothstep(WF,WT,lc.y)*.5,smoothstep (DS/2.+(.5-abs(.5-lc.y))*.5,DS/2.-.01,abs(lc.x-.5-lc.y*.5+WT/2.)));\n    Res *= f;\n\n    f = smoothstep(0.,sm,lc.x);\n    f *= 1.-.5*smoothstep(WH+WT,0.,lc.x);\n    f = (CellType(fr+vec2(-1.,0.)).x == 0) ?\n        max(f,smoothstep (DS/2.+(.5-abs(.5-lc.x))*.5,DS/2.-.01,abs(lc.y-.5-lc.x*.5-WT/2.)))\n        :f;\n\n    Res *= f;\n\n    vec3 h;\n\n    h = hue(hash2(fr+vec2(0,-1)));\n    Res = mix(Res,h,smoothstep(WT/2.+sm,WT/2.,lc.y)*CLR);\n\n    cr = InnerWall(t.x, lc, true, h);\n    Res = mix(Res, cr.xyz, cr.a);\n    \n    m = cr.a;\n\n    h = hue(hash2(fr+vec2(1,0)));\n    Res = mix(Res,h,smoothstep(1.-WT/2.-sm,1.-WT/2.,lc.x)*CLR);\n\n    cr = InnerWall(t.y, 1.-lc.yx, false, h);\n    Res = mix(Res, cr.xyz, cr.a);\n    m = max(m, cr.a);\n\n    h = hue(hash2(fr+vec2(1,-1)));\n    t = CellType(fr+vec2(0,-1));\n    cr = OuterWall(t.y, lc, false, h);\n    Res = mix(Res, cr.xyz, cr.a);\n    m1 = cr.a;\n\n    t = CellType(fr+vec2(1,0));\n    cr = OuterWall(t.x, 1.-lc.yx, true, h);\n    Res = mix(Res, cr.xyz, cr.a);\n    m1 = max(m1,cr.a);\n    \n    lc = fract(rc*vec2(2.,3.) + vec2(0.,.5));\n    lc = (mod(fr.x+fr.y,2.) != 0.)? lc = fract(rc*vec2(2.,3.) + vec2(.5,-.0)) : lc;\n        \n    m = 1. - m;\n    m1 = 1. - m1;\n                \n    vec4 s = Sinner (fr, lc,m);\n    Res = mix(Res, s.xyz,s.a);\n    s = Sinner (fr+vec2(1,0), lc+vec2 (-.5,.5),m1);\n    Res = mix(Res, s.xyz,s.a);\n    s = Sinner (fr+vec2(0,-1), lc+vec2 (.5,.5),m1);\n    Res = mix(Res, s.xyz,s.a);\n    s = Sinner (fr+vec2(1,-1), lc+vec2 (.0,1.),1.);\n    Res = mix(Res, s.xyz,s.a);\n    \n    Res *= 1.-.5*smoothstep (3.5/l, 5./l, length(ic - CCell));\n    vec3 Res1 = vec3(max(max(Res.r,Res.g),Res.b),0.,0.);\n    Res = mix (Res1,Res,smoothstep(0.,3.,lg));\n\n    fragColor = vec4(Res,1.);\n}","name":"Image","description":"","type":"image"}]}