{"ver":"0.1","info":{"id":"4sy3D3","date":"1456615357","viewed":112,"name":"Primitive Cells","username":"sillsm","description":"primitive cells","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","lattice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Max Sills 2016, licensed under the MIT license.\n// Primitive Cells and Lattices\n// https://en.wikipedia.org/wiki/Triangular_tiling\n// https://en.wikipedia.org/wiki/Primitive_cell\n// https://en.wikipedia.org/wiki/Wallpaper_group\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n// Given a primitive basis, return the location of uv in the lattice.\n// Fract is cell position, floor is cell id. \nvec2 lattice(vec2 axisY, vec2 axisX, vec2 uv)\n{\n    float a = axisX.x; // Scale x\n    float b = axisY.x; // Shear x\n    float c = axisX.y; // Shear y\n    float d = axisY.y; // Scale y\n    \n    mat2 adj = mat2(d,-c, -b,a);\n    mat2 inverse = (1./(a*d - b*c))*adj;\n    return inverse*uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv *= 25.;\n\n    vec2 x = vec2(1.,1.);\n    vec2 y = mix(vec2(-1.,1.), vec2(1.,2.), cos(iTime/4.));\n    \n    vec2 cell = lattice(y,x,uv);\n    vec4 c1 = vec4(cos(fract(cell)), cos(iTime), 1.0);\n    vec4 c2 = vec4(sin(fract(cell.x)), cos(iTime * floor(cell.yx)), 1.0);\n    fragColor = mix(c2, c1, cos(iTime));\n}","name":"Image","description":"","type":"image"}]}