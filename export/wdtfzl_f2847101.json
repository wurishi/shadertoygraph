{"ver":"0.1","info":{"id":"wdtfzl","date":"1605812915","viewed":168,"name":"Crystallic noise","username":"r0mko","description":"Modified cellular noise","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","noise2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\n// from: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand2(vec2 n) \n{ \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nhighp float calcCell(vec2 pos, vec2 ipos)\n{\n    highp float res = 0.0;\n    highp float md = 1.0; // min distance\n    float ptX = rand2(ipos.xy * 0.17);\n    float ptY = rand2(ipos.yx * 0.19);\n    return min(md, distance(pos, ipos + vec2(ptX, ptY)));\n}\nfloat cellularNoise(vec2 pos, vec2 seed)\n{\n    float res1 = 1., res2 = 1.;\n    \n    vec2 pos1 = pos*seed.x;\n    vec2 pos2 = pos.yx*seed.y;\n    \n    vec2 ipos1 = floor(pos1);\n    vec2 ipos2 = floor(pos2);\n    \n    for(int j = -1; j<=1; j++){\n         for(int i = -1; i<=1; i++){\n             \n         res1 = min(res1, calcCell(pos1, ipos1 + vec2(i, j)));\n\t     res2 = min(res2, calcCell(pos2, ipos2 + vec2(i, j)));\n\n        }    \n    }\n    \n\n    //return res1;\n    return mix(1.0 - pow(res1, 2.), pow(res2, 2.), .5);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += vec2(0.0, -iTime * 0.05);\n    \n    vec2 aspect = calcAspect(iResolution.xy);\n\n    vec2 nPos = vec2(20.0) * uv * aspect;\n    \n//    vec3 rgb = vec3(cellularNoise(nPos, vec2(iTime, 1.23)), cellularNoise(nPos, vec2(1.31, 1.33)), cellularNoise(nPos, vec2(1.11, 1.13)));\n    //vec3 rgb = vec3(cellularNoise(nPos, vec2(1.0, 1.23)));\n\n    \n    vec3 rgb = vec3(cellularNoise(nPos, vec2(1.0, 1.23)));\nvec3 rgb2 = vec3(cellularNoise(nPos - normalize(vec2(1, 2))*.01, vec2(1.0, 1.23)));\n    \n// Directional derivative bump from opposite directions.\nfloat b = max(dot(rgb2 - rgb, vec3(.299, .587, .144)), 0.)/.01;\nfloat b2 = max(dot(rgb - rgb2, vec3(.299, .587, .144)), 0.)/.01;\n    \n// Add red and blue light.\nrgb += (vec3(1, .3, .1)*b*b + vec3(.2, .4, 1)*b2*b2)*.35;  \n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}