{"ver":"0.1","info":{"id":"ssfXWM","date":"1618696220","viewed":126,"name":"cg_task2_public","username":"Iluha_Grig2000","description":"Task 2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cg","cmc","msu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-3;\nconst vec3 CAMERA_POS = vec3(0.5, 1.2, -6);\nconst vec3 LIGHT1_POS = vec3(-1.5, 1.1, 4);\nconst float LIGHT1_RADIUS = 0.7;\nconst vec3 LIGHT1_COLOR = vec3(1, 0.1, 0.1);\n\nconst vec3 LIGHT2_POS = vec3(2.0, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 0.9, 0.1);\nvec3 randDir;\n\nstruct Triangle {\n    vec3 pos[3];\n    vec3 normal;\n};\n\nTriangle octaedr[8];\n\nfloat traceTriangle(Triangle t, vec3 pos, vec3 dir, out vec3 normal) {\n    // dot(origin + dir * d - t.pos[0], t.normal) == 0\n    // dot(origin - t.pos[0], t.normal) + dot(dir, t.normal) * d == 0\n    // d = dot(t.pos[0] - origin, t.normal) / dot(dir, t.normal);\n    float normalViewAngle = dot(dir, t.normal);\n    if (abs(normalViewAngle) < EPS)\n        return INF;\n    float d = dot(t.pos[0] - pos, t.normal) / normalViewAngle;\n    if (d < 0.0)\n        return INF;\n    vec3 hitPos = pos + dir * d;\n    vec3 edges[3] = vec3[3](\n        t.pos[1] - t.pos[0],\n        t.pos[2] - t.pos[1],\n        t.pos[0] - t.pos[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - t.pos[0],\n        hitPos - t.pos[1],\n        hitPos - t.pos[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS)\n        normal = t.normal;\n        return d;\n    return INF;\n}\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 vec_cross;\n\n    octaedr[0].pos = vec3[3](vec3(0, 0, -1), vec3(-1, 0, 0), vec3(0, 1, 0));\n    vec_cross = cross(octaedr[0].pos[0] - octaedr[0].pos[1], octaedr[0].pos[1] - octaedr[0].pos[2]);\n    if (vec_cross.y > 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[0].normal = vec_cross / length(vec_cross);\n    \n    octaedr[1].pos = vec3[3](vec3(-1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1));\n    vec_cross = cross(octaedr[1].pos[0] - octaedr[1].pos[1], octaedr[1].pos[1] - octaedr[1].pos[2]);\n    if (vec_cross.y > 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[1].normal = vec_cross / length(vec_cross);\n    \n    octaedr[2].pos = vec3[3](vec3(0, 0, 1), vec3(0, 1, 0), vec3(1, 0, 0));\n    vec_cross = cross(octaedr[2].pos[0] - octaedr[2].pos[1], octaedr[2].pos[1] - octaedr[2].pos[2]);\n    if (vec_cross.y > 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[2].normal = vec_cross / length(vec_cross);\n    \n    octaedr[3].pos = vec3[3](vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, -1));\n    vec_cross = cross(octaedr[3].pos[0] - octaedr[3].pos[1], octaedr[3].pos[1] - octaedr[3].pos[2]);\n    if (vec_cross.y > 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[3].normal = vec_cross / length(vec_cross);\n    \n    octaedr[4].pos = vec3[3](vec3(0, 0, -1), vec3(-1, 0, 0), vec3(0, -1, 0));\n    vec_cross = cross(octaedr[4].pos[0] - octaedr[4].pos[1], octaedr[4].pos[1] - octaedr[4].pos[2]);\n    if (vec_cross.y < 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[4].normal = vec_cross / length(vec_cross);\n    \n    octaedr[5].pos = vec3[3](vec3(-1, 0, 0), vec3(0, -1, 0), vec3(0, 0, 1));\n    vec_cross = cross(octaedr[5].pos[0] - octaedr[5].pos[1], octaedr[5].pos[1] - octaedr[5].pos[2]);\n    if (vec_cross.y < 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[5].normal = vec_cross / length(vec_cross);\n    \n    octaedr[6].pos = vec3[3](vec3(0, 0, 1), vec3(0, -1, 0), vec3(1, 0, 0));\n    vec_cross = cross(octaedr[6].pos[0] - octaedr[6].pos[1], octaedr[6].pos[1] - octaedr[6].pos[2]);\n    if (vec_cross.y < 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[6].normal = vec_cross / length(vec_cross);\n    \n    octaedr[7].pos = vec3[3](vec3(1, 0, 0), vec3(0, -1, 0), vec3(0, 0, -1));\n    vec_cross = cross(octaedr[7].pos[0] - octaedr[7].pos[1], octaedr[7].pos[1] - octaedr[7].pos[2]);\n    if (vec_cross.y < 0.0) {\n        vec_cross *= -1.0;\n    }\n    octaedr[7].normal = vec_cross / length(vec_cross);\n\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.015;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        // vec3 sphNorm;\n        // float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        // if (sphT < t) {\n        //     t = sphT;\n        //     normal = sphNorm;\n        //     if (randVals.x < GLASS_R) {\n        //         materialType = REFLECTION;\n        //     } else {\n        //         colorMult *= vec3(0.5, 0.5, 1);\n        //         materialType = REFRACTION;\n        //         if (dot(curDir, normal) > 0.0) {\n        //             nEnter = AIR_N;\n        //         } else {\n        //             nEnter = GLASS_N;\n        //         }\n        //     }\n        // }\n        // float sph2T = traceSphere(curPos, curDir, 0.25, sphNorm);\n        // if (sph2T < t) {\n        //     t = sph2T;\n        //     normal = sphNorm;\n        //     if (randVals.x < DIAMOND_R) {\n        //         materialType = REFLECTION;\n        //     } else {\n        //         colorMult *= vec3(1, 0.5, 0.75);\n        //         materialType = REFRACTION;\n        //         if (dot(curDir, normal) > 0.0) {\n        //             nEnter = GLASS_N;\n        //         } else {\n        //             nEnter = DIAMOND_N;\n        //         }\n        //     }\n        // }\n\n        vec3 trNorm;\n        float trT;\n        trT = traceTriangle(octaedr[0], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[1], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[2], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[3], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[4], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[5], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[6], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        trT = traceTriangle(octaedr[7], curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < GLASS_R * 1.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult += vec3(0.2, 0.2, 0.2) * 0.1;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * mult * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * mult * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                vec4 fog = sampleFog(curPos, viewVec);\n                fragColor.rgb += fog.rgb * fog.a * mult * colorMult;\n                mult *= 1.0 - fog.a;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * mult * colorMult;\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}