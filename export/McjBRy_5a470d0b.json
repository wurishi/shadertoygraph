{"ver":"0.1","info":{"id":"McjBRy","date":"1725373430","viewed":84,"name":"Cosmic clock 9","username":"ChunderFPV","description":".","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["blur","clock","spiral","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// digit display from https://www.shadertoy.com/view/stlSzM\n#define bcd(i) (i/10*6+i)\n#define digit(u,i) texture(iChannel2, (u)/16.+vec2(float(i)/16., .75)).x\n#define draw_digit(c,u,i) if(abs(u).x < .5 && abs(u).y < .5) c += (1.-c)*digit(u+.5, i)\n#define draw_bcd(c,u,i,b) if (b) draw_digit(c, u, (i&0xf0)>>4); draw_digit(c, u-vec2(.5,0),(i&0xf))\n\n// draw time: coords, offset, size\nfloat dt(vec2 u, vec2 o, float s)\n{\n    u -= o; // offset\n    u /= s; // size\n    float c = 0.,\n          t = iDate.w;\n    ivec2 d = ivec2(mod(t/36e2, 12.), mod(t/60., 60.)); // hour, min\n    if (d.x == 0) d.x = 12; // change 0 to 12\n    u.x += .85;\n    draw_bcd(c, u, bcd(d.x), (d.x > 9)); // 1st & 3rd digits\n    u.x -= .85;\n    draw_digit(c, u, 10); // colon\n    u.x -= .35;\n    draw_bcd(c, u, bcd(d.y), true); // 2nd & 4th digits\n    return c;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec4 a = texture(iChannel0, U/R, .5),      // buffer a with mipmap blur\n         b = texture(iChannel1, U/R)*(1.-BS);  // buffer b\n    \n    C = a+b - a*b;  // blend\n    C += dt(U/R, vec2(.08, .95), .06) * vec4(.1, .2, .3, 0); // digit display\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define H(a) (cos(radians( vec3(30, 60, 90) )+(a)*6.2832)*.5+.5)  // hue\n#define P 1./length((u-p)/w) * (1.-length(u-p)*2./l) * k          // points\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec3 M = iMouse.xyz, c = vec3(0), s1 = c, s2 = c, k;\n    \n    vec2 r = R-mod(R, 4.);  // hack to get rid of vertical line caused by polar transform\n    \n    vec2 m = (M.xy - r/2.)/r.y,  // mouse coords\n         u = (U - r/2.)/r.y*2.5, // screen coords\n         o = u, w, p;\n    \n    if (M.z < 1. && max(M.x, M.y) < 10.) m.y = .3;  // default mouse y\n    \n    float t = mod(iDate.w/36e2, 12.); // 12 hours of minutes\n    if (t < 1.) t += 12.;             // change 0 to 12\n    \n    float l = 30.,            // loop length (detail)\n          z = exp(-m.y*12.),  // zoom from mouse y\n          a1 = t*z,           // spiral 1 rotation\n          a2 = sqrt(a1*2.),   // spiral 2 rotation\n          i = 0., f;\n    \n    u *= z; // apply zoom\n    u = vec2( length(u), atan(u.x, u.y)/6.2832 );  // polar transform\n    if (u.x < 1.) u.x = 1./u.x;  // reciprocals (spirals between 1 & 0)\n    if (z < 1.) a1 = t/z, a2 = sqrt(a1*2.);  // change rotation for inner\n    w = fwidth(u)*R.y/1e3;  // point size\n    \n    for (; i++<l;)  // overlap loop for detail\n        p.x = round((u.x-i)/l)*l+i,  // segment x & skip rows\n        f = p.x*t-a1,                // y speed\n        p.y = round(u.y-f)+f,        // segment y\n        k = H(p.x*p.y)*.5+.5,        // color\n        s1 = max(s1, P),             // spiral 1 (denominator of t)\n        f = sqrt(p.x*t*2.)-a2,\n        p.y = round(u.y-f)+f,\n        k = H(p.x*p.y),\n        s2 = max(s2, P);  // spiral 2\n    \n    c += min(s1*.3 + s2, 1.);              // spirals\n    c += pow(H(length(o)), vec3(10))*.02;  // halo\n    c += H(c-u.y*2e2)*c / pow(u.x, .25);   // rays\n    \n    u = abs(U*2.-R)/R;\n    c *= min(1., 4.-max(u.x, u.y)*4.); // vignette\n    \n    C = vec4(c, 1);  \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// frame blur\n#define B(s) texture(iChannel1, mix(U/R, vec2(.5), s))*BS + texture(iChannel0, U/R)\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    C = max( B(-.01), B(.01) );  // blur in and out\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy\n#define BS .96  // blur strength","name":"Common","description":"","type":"common"}]}