{"ver":"0.1","info":{"id":"msKGRy","date":"1678741097","viewed":81,"name":"noise in all dimensions","username":"TonyIlersich","description":"Just some utility functions for noise generation based on a hash function I found at https://nullprogram.com/blog/2018/07/31/.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const uint max32 = 0xffffffffu;\n\n// taken from https://nullprogram.com/blog/2018/07/31/\nuint hash(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// 1D noise\nfloat noise1(uint seed)\n{\n    return float(hash(seed)) / float(max32);\n}\nfloat noise1(float seed)\n{\n    return noise1(floatBitsToUint(seed));\n}\nfloat noise1(vec2 seed)\n{\n    return noise1(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y));\n}\nfloat noise1(vec3 seed)\n{\n    return noise1(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z));\n}\nfloat noise1(vec4 seed)\n{\n    return noise1(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z) ^ floatBitsToUint(seed.w));\n}\n\n// 2D noise\nvec2 noise2(uint seed)\n{\n    return vec2(noise1(seed), noise1(seed ^ 0x1u));\n}\nvec2 noise2(float seed)\n{\n    return noise2(floatBitsToUint(seed));\n}\nvec2 noise2(vec2 seed)\n{\n    return noise2(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y));\n}\nvec2 noise2(vec3 seed)\n{\n    return noise2(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z));\n}\nvec2 noise2(vec4 seed)\n{\n    return noise2(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z) ^ floatBitsToUint(seed.w));\n}\n\n// 3D noise\nvec3 noise3(uint seed)\n{\n    return vec3(noise1(seed), noise1(seed ^ 0x1u), noise1(seed ^ 0x2u));\n}\nvec3 noise3(float seed)\n{\n    return noise3(floatBitsToUint(seed));\n}\nvec3 noise3(vec2 seed)\n{\n    return noise3(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y));\n}\nvec3 noise3(vec3 seed)\n{\n    return noise3(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z));\n}\nvec3 noise3(vec4 seed)\n{\n    return noise3(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z) ^ floatBitsToUint(seed.w));\n}\n\n// 4D noise\nvec4 noise4(uint seed)\n{\n    return vec4(noise1(seed), noise1(seed ^ 0x1u), noise1(seed ^ 0x2u), noise1(seed ^ 0x3u));\n}\nvec4 noise4(float seed)\n{\n    return noise4(floatBitsToUint(seed));\n}\nvec4 noise4(vec2 seed)\n{\n    return noise4(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y));\n}\nvec4 noise4(vec3 seed)\n{\n    return noise4(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z));\n}\nvec4 noise4(vec4 seed)\n{\n    return noise4(floatBitsToUint(seed.x) ^ floatBitsToUint(seed.y) ^ floatBitsToUint(seed.z) ^ floatBitsToUint(seed.w));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //vec3 col = vec3(uv.y > noise1(iTime + uv.x));\n    vec3 col = noise3(vec3(uv, iTime));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}