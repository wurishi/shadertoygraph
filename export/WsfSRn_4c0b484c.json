{"ver":"0.1","info":{"id":"WsfSRn","date":"1550363273","viewed":152,"name":"Underground Maze","username":"cbrpnk","description":"Everyday.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat box(vec3 p, vec3 d)\n{\n    p = abs(p) - d;\n    return max(max(p.x, p.y), p.z);\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat map(vec3 p)\n{\n    p.xz *= rot(iTime*.2);\n    p.xz = mod(p.xz, 2.)-vec2(1.);\n    float g = min(min(max(box(p-vec3(0., 1., 0.), vec3(1.)), -sphere(p, 1.2)), sphere(p, .3)), p.y-.05);\n   \t\n    p = abs(p);\n    return g + texture(iChannel1, p.xz+p.y*3., .0).r * .02 + texture(iChannel1, p.xy+p.z, .0).r * .04;\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for(int i=0; i<128; ++i) {\n    \tfloat d = map(ro+rd*t);\n        if(d < .001 || t > 200.) break;\n        t += d*.5;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(.001, 0);\n    return normalize(vec3(\n    \tmap(p+eps.xyy) - map(p-eps.xyy),\n        map(p+eps.yxy) - map(p-eps.yxy),\n        map(p+eps.yyx) - map(p-eps.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2. - iResolution.xy) / iResolution.y; // Thanks FabriceNeyret2\n    vec3 cam = vec3(0, .2, 1.);\n    vec3 dir = normalize(vec3(uv, -1.));\n    float d = march(cam, dir);\n    vec3 p = cam+dir*d;\n    vec3 normal = getNormal(p);\n\n    // Time varying pixel color\n    vec3 col = .3/d*pow(1.-max(0., dot(normal, -dir)), 10.) *vec3(1., 1., .85);\n\tcol += vec3(.02);\n    col *= max(0., dot(normal, vec3(1., 1., 1.)));\n    col /= d*d;\n    col.r += pow(col.g, 2.);\n    col.g += d*.002;\n    col.b += d*.007;\n    \n    // Output to screen\n    col *= 1.-length(uv)*.3;\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}