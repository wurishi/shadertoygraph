{"ver":"0.1","info":{"id":"wdG3Rz","date":"1569581833","viewed":6098,"name":"Simple water surface shader","username":"Mafrans","description":"A simple water surface shader similar to what is used in Super Mario Galaxy 2. \n\nnew as of 2019-09-30:\n- Pooling water","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["water","surface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat avg(vec4 color) {\n    return (color.r + color.g + color.b)/3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Flow Speed, increase to make the water flow faster.\n    float speed = 1.0;\n    \n    // Water Scale, scales the water, not the background.\n    float scale = 0.8;\n    \n    // Water opacity, higher opacity means the water reflects more light.\n    float opacity = 0.5;\n \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n    vec2 scaledUv = uv*scale;\n\n    // Water layers, layered on top of eachother to produce the reflective effect\n    // Add 0.1 to both uv vectors to avoid the layers stacking perfectly and creating a huge unnatural highlight\n    vec4 water1 = texture(iChannel0, scaledUv + iTime*0.02*speed - 0.1);\n    vec4 water2 = texture(iChannel0, scaledUv.xy + iTime*speed*vec2(-0.02, -0.02) + 0.1);\n    \n    // Water highlights\n    vec4 highlights1 = texture(iChannel2, scaledUv.xy + iTime*speed / vec2(-10, 100));\n    vec4 highlights2 = texture(iChannel2, scaledUv.xy + iTime*speed / vec2(10, 100));\n    \n    // Background image\n    vec4 background = texture(iChannel1, vec2(uv) + avg(water1) * 0.05);\n    \n    // Average the colors of the water layers (convert from 1 channel to 4 channel\n    water1.rgb = vec3(avg(water1));\n    water2.rgb = vec3(avg(water2));\n    \n    // Average and smooth the colors of the highlight layers\n    highlights1.rgb = vec3(avg(highlights1)/1.5);\n    highlights2.rgb = vec3(avg(highlights2)/1.5);\n    \n    float alpha = opacity;\n    \n    if(avg(water1 + water2) > 0.3) {\n        alpha = 0.0;\n    }\n    \n    if(avg(water1 + water2 + highlights1 + highlights2) > 0.75) {\n        alpha = 5.0 * opacity;\n    }\n\n    // Output to screen\n    fragColor = (water1 + water2) * alpha + background;\n}\n","name":"Image","description":"","type":"image"}]}