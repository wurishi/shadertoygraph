{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*-----------------------------------------------------------------------------\nWritten by Alan Wolfe\nhttp://blog.demofox.org\n\nThis uses smoothstep (3x^2 - 2x^3) to approximate sine.\n\nThanks to P_Malin for this protip!\n\nred = sin\ngreen = sin aproximation\nyellow = they overlap and are equal\n\n-----------------------------------------------------------------------------*/\n\n// graph settings\n#define POINTSIZE 0.05\n#define LINEWIDTH 0.1\n#define LINEHEIGHT 0.5\n#define LINEINTERVAL (PI*0.5)\n\n// constants\n#define PI 3.14159265359\n\n//-----------------------------------------------------------------------------\nfloat Sin (const in float _x)\n{\n    // make a triangle wave that has y values from 0-1, where y is 0 at x=0\n\tfloat x = abs(fract((_x - radians(90.0)) / radians(360.0))*2.0-1.0);\n       \n    // smoothstep the triangle wave and then scale it to the -1 to 1 range\n    return smoothstep(0.0,1.0,x) * 2.0 - 1.0;\n\t\n    // Note that you could use this instead of smoothstep above.  Same thing.\n    //float x2 = x*x; \n\t//return ((3.0 * x2) - (2.0 * x2 * x)) * 2.0 - 1.0;\n    \n    // or this:\n    //return x * x * (3.0 - 2.0 * x) * 2.0 - 1.0;\n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    // set up our coordinate system.\n    // x = 0 is the left side of the screen.\n    // y = 0 is the center of the screen\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.0,0.5));\n    percent *= 8.0;\n    percent.x *= aspectRatio;\n   \n    // draw the black graph markings and background\n    float bgColor = 0.3;\n    bgColor *= abs(percent.y) < LINEWIDTH ? 0.0 : 1.0;\n    if ((mod(percent.x, LINEINTERVAL) < LINEWIDTH * 0.5 || mod(percent.x, LINEINTERVAL) > (LINEINTERVAL - LINEWIDTH * 0.5))\n      &&(abs(percent.y) < LINEHEIGHT))\n        bgColor *= 0.0;\n    \n    // draw the sine values\n    vec3 color = vec3(bgColor);\n    \n    // real\n    if (abs(percent.y - sin(percent.x)) < POINTSIZE)\n        color.x = 1.0;\n    \n    // aproximated\n    if (abs(percent.y - Sin(percent.x)) < POINTSIZE)\n         color.y = 1.0;\n        \n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBSRt","date":"1414784504","viewed":675,"name":"Sin without trig III","username":"demofox","description":"This uses smoothstep (3x^2 - 2x^3) of a triangle wave to approximate sine.  Thanks to P_Malin for this protip!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","sin"],"hasliked":0,"parentid":"","parentname":""}}