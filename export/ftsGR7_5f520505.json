{"ver":"0.1","info":{"id":"ftsGR7","date":"1729028218","viewed":94,"name":"KnobMoog","username":"Sergeindamix","description":"AI MOD","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["knob","moog"],"hasliked":0,"parentid":"tdKXzz","parentname":"Knob Moog"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define N 6.\n\nconst float r1 = 0.75;\nconst float r2 = 1./r1;\n\n// Effect intensity controls\nconst float GLASS_INTENSITY = 0.05;\nconst float DEPTH_INTENSITY = 0.2;\nconst float SHADOW_INTENSITY = 0.5;\n\nvec4 over(in vec4 a, in vec4 b) {\n    return mix(a, b, 1.-a.w);\n}\n\nfloat nCap(vec2 uv, float angle, float r) {\n    float a = atan(uv.y, uv.x)+angle;\n    float b = a/PI*N/2.+PI*r2*2.0;\n    float f = fract(b);\n    float l = length(uv);\n    float d = sin(f*PI*r2) * step(f, r1);\n    return (1.-d*0.12)*r-l;\n}\n\nfloat line(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat sdRoundedBox(in vec2 p, in vec2 b, in float r) {\n    vec2 q = abs(p) - b + r;\n    return min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - r;\n}\n\n// Improved glass effect function\nvec4 glassEffect(vec2 uv, vec4 color) {\n    vec2 offset = vec2(sin(uv.y * 40.0 + iTime) * GLASS_INTENSITY, \n                       cos(uv.x * 40.0 + iTime) * GLASS_INTENSITY);\n    vec4 refractedColor = texture(iChannel0, uv + offset);\n    float distortion = sin(uv.x * 20.0 + uv.y * 20.0 + iTime * 2.0) * 0.5 + 0.5;\n    return mix(color, refractedColor, distortion * GLASS_INTENSITY * 4.0);\n}\n\n// Improved function for the metal cap\nvec4 metalCap(vec2 uv, float radius) {\n    float l = length(uv);\n    float edge = smoothstep(radius + 0.01, radius, l);\n    \n    // Metallic effect similar to the knob\n    vec3 metalColor = vec3(0.44\n        + pow(abs(sin(atan(uv.y, uv.x))), 10.) * (0.1 + l * 1.)\n        + pow(abs(sin(atan(uv.y, uv.x) + 1.4)), 64.) * 0.12\n        + abs(sin(l * 32.) + 0.5) * 0.02\n        + smoothstep(0.5, -0.5, uv.y) * 0.2  // This replaces 'g' from the original code\n    );\n    \n    return vec4(metalColor, edge);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    // Apply scaling factor\n    float scale = 1.0;\n    uv *= scale;\n    \n    float av = sin(iTime)*PI*5./6.; // angle value\n    \n    vec4 col = vec4(vec3(0.1), 1.0); // background\n    \n    // Video frame\n    float frameWidth = 1.4;\n    float frameHeight = 0.9;\n    float frameRounding = 0.05;\n    float frameDist = sdRoundedBox(uv + vec2(0.3, 0.0), vec2(frameWidth, frameHeight) / 2.0, frameRounding);\n    float frameBorder = smoothstep(0.002, 0.001, abs(frameDist) - 0.01);\n    \n    // Enhanced frame shadow\n    float shadowDist = sdRoundedBox(uv + vec2(0.32, 0.02), vec2(frameWidth, frameHeight) / 2.0, frameRounding);\n    float shadowIntensity = smoothstep(0.04, 0.0, shadowDist) * SHADOW_INTENSITY;\n    col = mix(col, vec4(0.0, 0.0, 0.0, 0.7), shadowIntensity);\n    \n    // Enhanced frame with depth effect\n    vec3 frameColorLight = vec3(0.9, 0.9, 0.9);\n    vec3 frameColorDark = vec3(0.6, 0.6, 0.6);\n    vec3 frameColor = mix(frameColorDark, frameColorLight, \n                          smoothstep(-DEPTH_INTENSITY, DEPTH_INTENSITY, frameDist));\n    col = mix(col, vec4(frameColor, 1.0), frameBorder);\n    \n    // Video with enhanced glass effect\n    if (frameDist < 0.0) {\n        vec2 videoUV = ((uv + vec2(0.3, 0.0)) / vec2(frameWidth, frameHeight) + 0.5);\n        vec4 videoColor = texture(iChannel0, videoUV);\n        videoColor = glassEffect(videoUV, videoColor);\n        col = mix(col, videoColor, smoothstep(0.005, 0.0, frameDist));\n    }\n    \n    // Knob and metal cap\n    scale = 4.0;\n    uv *= scale;\n    vec2 knobUV = uv - vec2(3, 0.0);\n    vec2 capUV = uv - vec2(2.16, -1.50); // Positioned 1 unit below the knob\n    float l = length(knobUV);\n    float g = -1. + smoothstep(.5, -.5, knobUV.y) * 2.;\n\n    // Render improved metal cap\n    float capRadius = 0.35; // Adjust this value to change the size of the metal cap\n    vec4 capColor = metalCap(capUV, capRadius);\n    col = over(capColor, col);\n\n    if(l < .96) {\n        float d = .0;\n        for(float q = 0. ; q < 11. ; q += 1.) {\n            float aq = -PI*1./3.+q*PI*1./6.;\n            mat2 m = mat2(cos(aq), sin(aq), -sin(aq), cos(aq));\n            d += smoothstep(.002, .001, line(knobUV, vec2(.0, .0), vec2(.88, .0)*m)-.012);\n        }\n        col = over(vec4(vec3(.8), d), col); // divs\n\n        float h = smoothstep(.04, .08, 1.25 - distance(vec2(.0, -1.4), knobUV))*.2\n            + smoothstep(.40, .7, l)*.01;\n        col = over(vec4(vec3(.04), smoothstep(.001, .3, .88 - distance(knobUV, vec2(.0, .1)))*.75), col); // shadow\n        col = over(vec4(vec3(.04), smoothstep(.001, .04, .74 - l)), col); // bottom\n        col = over(vec4(vec3(.13+g*.04), smoothstep(.001, .01, .71 - l)), col); // bottom solid\n        col = over(vec4(vec3(.13), smoothstep(.02, .001, abs(.64 - l))), col); // bottom outline\n        col = over(vec4(vec3(.04), smoothstep(0.001, 0.06, nCap(knobUV+vec2(.0, -.12), av, .64))*.7), col); // cap shadow\n        col = over(vec4(vec3(.09), smoothstep(0.01, 0.02, nCap(knobUV, av, .64))), col); // cap edge\n        col = over(vec4(vec3(.16)+g*.1+h, smoothstep(0.001, 0.01, nCap(knobUV, av, .61))), col); // cap solid\n        col = over(vec4(vec3(.24), smoothstep(.001, .01, .46 - l)), col); // cap top\n        col = over(vec4(vec3(.44\n                             + pow(abs(sin(atan(knobUV.y, knobUV.x))),10.)*(0.1+l*1.)\n                             + pow(abs(sin(atan(knobUV.y, knobUV.x)+1.4)),64.)*0.12\n                             + abs(sin(l*32.)+.5)*.02\n                             + g*.2\n                            ), smoothstep(.001, .01, .44 - l)), col); // cap metal\n        \n        // White dot\n        float dotAngle = av - PI / 2.0; // Adjust the angle to match the knob rotation\n        vec2 dotPos = vec2(-cos(dotAngle), sin(dotAngle)) * 0.38;\n        float dotDist = length(knobUV - dotPos) - 0.03;\n        col = over(vec4(vec3(1.0), smoothstep(0.01, 0.0, dotDist)), col);\n    }\n    \n    col.gb += vec2(.004, .006);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}