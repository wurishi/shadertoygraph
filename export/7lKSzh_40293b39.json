{"ver":"0.1","info":{"id":"7lKSzh","date":"1640208656","viewed":177,"name":"Wet Blast unwound","username":"akohdr","description":"Fully macro unwound convolution based pseudo fluid sim with grid and spiral interference initial conditions.\n","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["fluid","convolution"],"hasliked":0,"parentid":"7tKXzz","parentname":"Wet Blast"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage(out vec4 k, vec2 p) \n{ \n    k = T(p);\n    \n    // grey/green colouring\n    k = vec4(.004 * dot(vec3(1,2,3), exp(k.xyz)) * vec3(4, 5, 4),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define SPOTTER\n#define KICK_PERIOD_FRAMES 300\n\nvec3 conv_callback(vec2 p, vec2 d)\n{\n    vec3 u = T(p+d).xyz,                // TX lookup at pos + conv displacement\n         v = vec3(u.xy - d, 0);\n    return (v + vec3(u.xy, .994) - v * u.z) * u.z / exp(dot(v, v))/ PI;\n}\n\n\nvoid mainImage(out vec4 k, vec2 p) \n{\n    vec3 acc = vec3(0);\n    CONV(acc, p, conv_callback);        // you can use k.xyz but dedicated acc faster\n    \n    k = vec4(acc, 0);\n    k.xy /= k.z + 1e-4;\n\n    if (iFrame%KICK_PERIOD_FRAMES<1) {  // periodic kick\n        vec2 u = p/iR.xy;\n        \n        // grid based init condition\n        k.xyz += vec3(.01*vec2(-.3+sin(4.*(1.+u+vec2(0,PI_2)))) + u-.5, .7);\n        \n        \n        // spiral interference based init condition\n        vec2 c = (p-iR.xy/2.)/iR.y;\n        float f = 2.*TAU, r = PI/256.;\n        \n//        k.xyz += .7 * vec3(\n//          sin(f*length(c+vec2( r,r)) - TAU_3)+       // 2π/3\n//          sin(f*length(c+vec2(-r,r)) + TAU_3)+\n//          sin(f*length(c+vec2(0,r-(1.73*r))))        // √3\n//        );\n\n        k.xyz += .7 * dot(vec3(1), sin(f*vec3(\n          length(c+vec2( r,r)),\n          length(c+vec2(-r,r)),\n          length(c+vec2(0,r-(1.73*r)))      // √3\n        ) + vec3(-TAU_3, TAU_3,0)));        // 2π/3\n\n#ifdef SPOTTER\n        // higlight center of spiral init oscillators\n        k += vec4(15.*(smoothstep(.01,.0,length(c+vec2(r)))\n                      +smoothstep(.01,.0,length(c+vec2(-r,r)))\n                      +smoothstep(.01,.0,length(c+vec2(0,r-(1.73*r))) )),0,0,0);\n#endif\n\n    }\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define iR iResolution\n\n#define PI    3.1415927\n#define PI_2  1.5707963\n#define TAU   6.2831853\n#define TAU_3 2.0943951\n\n#define T(p) texelFetch(iChannel0, ivec2(p), 0)\n\n// choose convolution size to use\n//#define CONV CONV7x7\n//#define CONV CONV8x8\n#define CONV CONV9x9\n\n// unwound convolution loop calls expressed in macros\n#define CV(a,dx,dy,p,f) a += f(p,vec2(dx,dy));\n\n#define CV7(x,a,p,f) CV(a,x,-3,p,f) CV(a,x,-2,p,f) CV(a,x,-1,p,f) CV(a,x,0,p,f) CV(a,x,1,p,f) CV(a,x,2,p,f) CV(a,x,3,p,f)\n#define RCV7(a,p,f,g) g(-3,a,p,f) g(-2,a,p,f) g(-1,a,p,f) g(0,a,p,f) g(1,a,p,f) g(2,a,p,f) g(3,a,p,f) \n#define CONV7x7(a,p,f) a=vec3(0);RCV7(a,p,f,CV7)\n\n#define CV8(x,a,p,f) CV(a,x,-4,p,f) CV(a,x,-3,p,f) CV(a,x,-2,p,f) CV(a,x,-1,p,f) CV(a,x,0,p,f) CV(a,x,1,p,f) CV(a,x,2,p,f) CV(a,x,3,p,f) \n#define RCV8(a,p,f,g) g(-4,a,p,f) g(-3,a,p,f) g(-2,a,p,f) g(-1,a,p,f) g(0,a,p,f) g(1,a,p,f) g(2,a,p,f) g(3,a,p,f)\n#define CONV8x8(a,p,f) a=vec3(0);RCV8(a,p,f,CV8)\n\n#define CV9(x,a,p,f) CV(a,x,-4,p,f) CV(a,x,-3,p,f) CV(a,x,-2,p,f) CV(a,x,-1,p,f) CV(a,x,0,p,f) CV(a,x,1,p,f) CV(a,x,2,p,f) CV(a,x,3,p,f) CV(a,x,4,p,f) \n#define RCV9(a,p,f,g) g(-4,a,p,f) g(-3,a,p,f) g(-2,a,p,f) g(-1,a,p,f) g(0,a,p,f) g(1,a,p,f) g(2,a,p,f) g(3,a,p,f) g(4,a,p,f) \n#define CONV9x9(a,p,f) a=vec3(0);RCV9(a,p,f,CV9)\n\n","name":"Common","description":"","type":"common"}]}