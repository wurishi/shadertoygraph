{"ver":"0.1","info":{"id":"stKyzG","date":"1662046336","viewed":70,"name":"arc - interior test","username":"cmarot","description":"Change VARIANT for different definition of the sign of the distance.\nThis shader also shows if the number of intersection between a horizontal ray starting at p and the arc is odd or even. => useful for interior test.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","arc","interior","winding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2019 Inigo Quilez (see https://www.shadertoy.com/view/wl23RK and https://www.shadertoy.com/view/wdBXRW)\n// Copyright © 2022 Célestin Marot\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define VARIANT 1 // 1, 2 or 3\n\nfloat det(in vec2 a, in vec2 b) { return a.x*b.y - a.y*b.x; }\nfloat dot2(in vec2 a )          { return dot(a,a);          }\n\n// return a vec3(d, s, i) with:\n//    * d: the square of the minimum distance from p to the circle arc\n//    * s: sign of the distance (set the VARIANT)\n//    * i; 1. if the number of intersection with an horizontal ray starting at p is odd, else 0.\nvec3 sdArc(in vec2 p, in vec2 p0, in vec2 p1, in float r)\n{\n    vec2 v = p1 - p0;\n    float l2 = dot2(v);\n    vec2 n = vec2(-v.y, v.x) / sqrt(l2);\n    vec2 c = (p1 + p0) * 0.5 + sign(r) * n * sqrt(r*r - l2 * 0.25);\n    mat2 rot = mat2(-n.y, n.x, n.x, n.y);\n    vec2 p0t = rot * (p0 - c);\n    // All the above only depends on p0 and p1.\n    // -> Can be pre-computed if p0 and p1 are constants\n    \n    vec2 pt = rot * (p - c);\n    float rp = length(pt) - abs(r);\n    pt.x = abs(pt.x);\n    float dist2 = det(pt, p0t) > 0. ? dot2(pt - p0t) : rp*rp;\n\n    bvec3 cond = bvec3(p.y >= p0.y, p.y < p1.y, pt.y > p0t.y);\n#if VARIANT == 1\n    // 1.: negative only inside the convex hull\n    float s = cond.z ? sign(rp) : 1.;\n    return vec3(dist2, s, (all(cond) || all(not(cond))) ? -s : s);\n#elif VARIANT == 2\n    // 2.: negative only inside the circle\n    float srp = sign(rp);\n    float s = cond.z ? srp : 1.;\n    return vec3(dist2, srp, (all(cond) || all(not(cond))) ? -s : s);\n#else\n    // 3. also negative on the other side of the line p1 - p0\n    float srp = sign(rp);\n    float s = (all(cond) || all(not(cond))) ? -1. : 1.;\n    if (cond.z)\n        return vec3(dist2, srp, s * srp);\n    else\n        return vec3(dist2, -1., s);\n#endif\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    // animation\n    float time = iTime;\n\tvec2 v0 = 0.8*cos( 0.43 *iTime + vec2(0.0,2.00) + 0.0 );\n\tvec2 v1 = 0.8*cos( 0.51 *iTime + vec2(0.0,1.50) + 1.0 );\n    \n    // distance\n    float x = cos(0.63*iTime);\n    vec3 dsi = sdArc(p, v0, v1, length(v0 - v1) * 0.5 * sign(x)*(1. + abs(x)));\n    float d = sqrt(dsi.x);\n    float s1 = dsi.y; // normal sign (replace by 1. to disable)\n    float s2 = dsi.z; // used to determine interior shape (replace by 1. to disable)\n    \n    // coloring\n    vec3 col = vec3(1.0) - s1*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= (s2 + 5.) / 6. + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}