{"ver":"0.1","info":{"id":"X3Bfzz","date":"1729098322","viewed":14,"name":"Fork Damaged VC Akiko 316","username":"Akiko","description":"Simulating a damaged VCR playing a video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    // screen offset\n    float a = 0.01;\n    vec2 offset1 = vec2(a, a * sin(iTime));\n    vec2 offset2 = vec2(a * sin(iTime), a);\n    vec2 offset3 = vec2(a, a * sin(iTime + 2.0) + 0.05 * cos(iTime));\n    \n    // camera shake effect\n    float speed = 0.01;\n    warpedUv += vec2(speed * sin(iTime), speed * cos(iTime));\n    \n    // stripe\n    float Y1 = mod(iTime * 0.1, 1.0);\n    float Y2 = Y1 + 0.1;\n    if (uv.y >= Y1 && uv.y <= Y2) {\n        vec2 offset = vec2(0.005 * tan(uv.y * 200.0 + iTime * 1000.0));\n        warpedUv += offset;\n    }\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}