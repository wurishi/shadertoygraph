{"ver":"0.1","info":{"id":"DscSRr","date":"1679275469","viewed":107,"name":"Raymarched Sphere pt1","username":"JetStreamSham","description":"Ray marched sphere\nMouse X controls  the sphere's distance from the camera.\nMouse Y controls how much the  distanced is scaled (somewhere between 1. to 10)\n\n\nComments, questions, and criticisms are welcome :)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 1000\n#define MAX_DIST 1000.\n#define MIN_DIST 0.0001\n#define STEP 1.\n\n\n/*\n    sdfSphere\n    Returns the distance a point is from the surface of a sphere.\n    If the distance is  0 or near it, the point is on the surface of the sphere.\n    If the distance is negative, the point is inside the sphere.\n    If the distance is positive, the point is outside the sphere.\n*/\nfloat sdfSphere(vec3 p,vec3 c,float r){\n    return length(p-c)-r;\n}\n\nfloat scene(vec3 rO){\n    //mouse x normalized 0 to 1\n    //float m = iMouse.x/iResolution.x;\n    //float z = 2. + m * 18.;\n    \n    float z = 3.;\n    return sdfSphere(rO,vec3(0.,0.,z),1.);\n}\n\n\nfloat march(vec3 rO, vec3 rD){\n    float totalDist = 0.;\n    \n    for(int i = 0; i < ITERATIONS; i++){\n        vec3 pos = rO + rD * totalDist; \n        float dist = scene(pos);\n        totalDist+= dist;\n        \n        if(dist < MIN_DIST || totalDist >MAX_DIST)\n            break;            \n    }\n    \n    return totalDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1) and divide by y for aspect ratio\n    vec2 uv = (fragCoord - (.5*iResolution.xy))/iResolution.y;\n    \n    vec3 rayOrigin = vec3(0.);\n    vec3 rayDir = normalize(vec3(uv,1.));\n    \n    vec3 col = vec3(0.);\n\n    // the total distance the ray traveled\n    float dist = march(rayOrigin,rayDir);\n    \n    float mY = iMouse.y/iResolution.y;\n    \n    /*\n        the total distance the ray traveled is greater than 1.\n        color is clamped from 0 to 1.\n        To see anything we have to scale the distance so sometimes its between 0 and 1.\n        \n    */\n    \n    \n    //dist /= 1. + mY * 10.;\n    dist /= 6.;\n    \n    col = vec3(dist);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}