{"ver":"0.1","info":{"id":"td2cWz","date":"1586474492","viewed":122,"name":"Lines Testing","username":"CornerPin","description":"Drawing lines with shaders.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Pi = 3.141592653589793;\nconst float OneThird = 2.0 * Pi/3.0;\n\nvec4 drawLine(vec2 fragCoord, vec2 from, vec2 to, vec4 clrFrom, vec4 clrTo) {\n    vec2 diff = to - from;\n    float len = length(diff);\n    vec2 localSpace = fragCoord - from;\n    \n    float dist = determinant(mat2(diff, localSpace)) / len;\n    \n    if (abs(dist) < 0.005) {\n        float proj = dot(diff, localSpace) / len / len;\n        \n        if (proj >= 0.0 && proj <= 1.0)\n\t        return mix(clrFrom, clrTo, proj);\n    }\n    \n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n\nvec4 red   = vec4(1.0, 0.0, 0.0, 1.0);\nvec4 green = vec4(0.0, 1.0, 0.0, 1.0);\nvec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = 2.0 * fragCoord / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2\n        a = 0.5 * vec2(cos(iTime), sin(iTime)),\n        b = 0.5 * vec2(cos(iTime + OneThird), sin(iTime + OneThird)),\n        c = 0.5 * vec2(cos(iTime - OneThird), sin(iTime - OneThird));\n    \n    fragColor = drawLine(uv, a, b, red, green);\n    fragColor += drawLine(uv, b, c, green, blue);\n    fragColor += drawLine(uv, c, a, blue, red);\n}","name":"Image","description":"","type":"image"}]}