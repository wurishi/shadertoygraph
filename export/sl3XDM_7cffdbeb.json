{"ver":"0.1","info":{"id":"sl3XDM","date":"1639211030","viewed":168,"name":"[TDF2021] phonometer probe","username":"gyabo","description":"I wrote a shadercode in 25 minutes at the TokyoDemoFest2021 party, enjoy! ;-)\nNote : Please click pause and play to iChannel0 if got the no sound.\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TDF2021 ShaderShowDown q-f : gyabo\n//Ports to ShaderToy. original as follows,\n//https://gist.github.com/kumaashi/eee4971857e6dd7a541d8dc455ebf2eb\n//https://twitter.com/gyabo/status/1469569058811293696\n#define time iTime\n#define v2Resolution iResolution\n#define gl_FragCoord fragCoord\n#define texFFTSmoothed iChannel0\n#define fragColor out_color\n\nvec4 plas( vec2 v, float time )\n{\n\tfloat c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n\treturn vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n\nvec4 getf(vec2 uv) {\n  uv = abs(uv * 0.15);\n  //float m0 = texture(texFFTSmoothed, uv.x).x * 5.0; //Bonzomatic\n  //float m1 = texture(texFFTSmoothed, uv.y).x * 5.0;  //Bonzomatic\n  float m0 = texture(texFFTSmoothed, uv.xy * 2.0).x * 0.5;\n  float m1 = texture(texFFTSmoothed, uv.yx * 2.0).x * 0.5;\n  return vec4(\n  m0 * m1,\n  m0 - m1,\n  m0 + m1, 1.0) * 2.0;\n}\n\nfloat box(vec3 p, vec3 s) {\n  p = abs(p) - s;\n  return max(p.x, max(p.y, p.z));\n}\n\nvec2 rot(vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return vec2(\n  p.x * c - p.y * s,\n  p.x * s + p.y * c);\n}\n\nfloat map(vec3 p) {\n  float t = length(mod(p, 2.0) - 1.0) - 0.45;\n  float h = length(getf(mod(p.xz * 0.2, 1.0)).xyz) * 0.5;\n  t = min(t, (h + 1.0) - dot(abs(p), vec3(0, 1, 0)));\n  t = min(t, length(mod(p.xz, 2.0) - 1.0) - 0.1);\n  t = min(t, length(mod(p.zy, 2.0) - 1.0) - 0.1);\n  t = min(t, length(mod(p.xy, 2.0) - 1.0) - 0.1);\n  vec3 ap = p;\n  float bd = box(mod(ap, 2.0) - 1.0, vec3(0.4));\n  t = max(-bd, t);\n \n  return t;\n}\n\nvec3 getnor(vec3 p) {\n  float t = map(p);\n  vec2 d = vec2(0.001, 0.0);\n  return normalize(vec3(\n    t - map(p + d.xyy),\n    t - map(p + d.yxy),\n    t - map(p + d.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n  vec2 auv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n  auv = auv * 2.0 - 1.0;\n\tuv -= 0.5;\n\tuv /= vec2(v2Resolution.y / v2Resolution.x, 1);\n  vec3 dir = normalize(vec3(uv, 1.0));\n  dir.xz = rot(dir.xz, time * 0.01);\n  //dir.zy = rot(dir.zy, time * 0.03);\n  \n  vec3 pos = vec3(0, 0, time);\n  float t = 0.0;\n  for(int i = 0 ; i < 100; i++) {\n    t += map(pos + dir * t) * 0.75;\n  }\n\n  vec3 ip = pos + dir * t;  \n  vec3 N = normalize(getnor(ip));\n  vec3 V = normalize(ip);\n  vec3 L = normalize(vec3(1,2,3));\n  vec3 H = normalize(N + V);\n  float D = max(0.0, dot(N, L));\n  float S = max(0.0, pow(dot(H, N), 64.0));\n \n  vec3 fog = vec3(2,2,3) * t * 0.02;\n  float vvvv = 1.0 - dot(auv * 0.4, auv);\n  out_color = vec4(map(ip + 0.5));\n  out_color *= D;\n  out_color *= S;\n  out_color.xyz += fog;\n  out_color += getf(uv) * 0.5;\n  out_color *= vvvv;\n}\n","name":"Image","description":"","type":"image"}]}