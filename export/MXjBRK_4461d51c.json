{"ver":"0.1","info":{"id":"MXjBRK","date":"1729705814","viewed":435,"name":"The stars are truly beautiful","username":"NULL_US3R","description":"Just some 2d voronoi and perlin noises thrown together, one of my first works.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise","space","stars","nebula","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897;\n\nfloat rand2(vec2 uv) {\n    return fract(sin(dot(uv, vec2(13.337, 61.998))) * 48675.75647);\n}\n\nvec2 rotate(vec2 uv, float a) {\n    return vec2(uv.y * cos(a) + uv.x * sin(a), uv.x * cos(a) - uv.y * sin(a));\n}\n\nvec2 rand2x2(vec2 uv) {\n    return vec2(rand2(uv), rand2(-uv));\n}\n\nvec3 rand2x3(vec2 uv) {\n    return vec3(rand2(uv), rand2(-uv), rand2(vec2(-uv.x - 5., uv.y + 1.)));\n}\n\nfloat perl(vec2 uv, float t) {\n    vec2 id = floor(uv);\n    vec2 loc = fract(uv);\n    vec2 sloc = smoothstep(0., 1., loc);\n    return mix(\n        mix(\n            dot(loc, rotate(vec2(1.), rand2(id) * (pi * 2. + t))),\n            dot(loc - vec2(1., 0.), rotate(vec2(1.), rand2(id + vec2(1., 0.)) * (pi * 2. + t))),\n            sloc.x\n        ),\n        mix(\n            dot(loc - vec2(0., 1.), rotate(vec2(1.), rand2(id + vec2(0., 1.)) * (pi * 2. + t))),\n            dot(loc - vec2(1., 1.), rotate(vec2(1.), rand2(id + vec2(1., 1.)) * (pi * 2. + t))),\n            sloc.x\n        ),\n        sloc.y\n    );\n}\n\nfloat fperl(vec2 uv, float t, float iter) {\n    float o = 0., k = 0., p = 1.;\n    for (float i = 0.; i < iter; i++) {\n        o += perl(uv * p, t * p) / p;\n        k += 1. / p;\n        p*=2.;\n    }\n    return o / k;\n}\n\nfloat vor(vec2 uv) {\n    vec2 id = floor(uv);\n    vec2 loc = fract(uv);\n    float o = 100.;\n    for (float x = -1.; x <= 1.; x++) {\n        for (float y = -1.; y <= 1.; y++) {\n            o = min(o, distance(sin(2.5 * pi * rand2x2(id + vec2(x, y))) * 0.8 + 0.2, loc - vec2(x, y)));\n        }\n    }\n    return o;\n}\n\nvec3 vorid3(vec2 uv) {\n    vec2 id = floor(uv);\n    vec2 loc = fract(uv);\n    float o = 1000.;\n    vec3 ou = vec3(0);\n    for (float x = -1.; x <= 1.; x++) {\n        for (float y = -1.; y <= 1.; y++) {\n            float d = distance(sin(2.5 * pi * rand2x2(id + vec2(x, y))) * 0.8 + 0.2, loc - vec2(x, y));\n            if (o > d) {\n                o = d;\n                ou = rand2x3(id + vec2(x, y));\n            }\n        }\n    }\n    return ou;\n}\n\nvec3 star(vec2 uv) {\n    float val = vor(uv * 3.);\n    val = 0.01 / val;\n    val = pow(val, 1.7);\n    vec3 col = vec3(val) * (vorid3(uv * 3.));\n    return col * fperl(uv / 2., 0., 2.);\n}\n\nvec3 fstar(vec2 uv, float iter, float t) {\n    vec3 o = vec3(0);\n    float p=1.;\n    for (float i = 0.; i < iter; i++) {\n        o += star(rotate(uv + vec2(t, 0.) / p, i) * p);\n        p*=1.5;\n    }\n    return o;\n}\n\nfloat fnebula(vec2 uv, float iter, float t) {\n    float o = 0., p=1.;\n    for (float i = 0.; i < iter; i++) {\n        o += fperl(rotate(uv + vec2(t, 0.) / p, i) * p / 2., 0., 6.);\n        p*=1.5;\n    }\n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  ( 2.*fragCoord - iResolution.xy ) / min( iResolution.x, iResolution.y);\n\n    vec3 col = fstar(uv, 7., iTime / 5.);\n    col *= 10.;\n    col = pow(col, vec3(1));\n    //col = col.r * vec3(1, 0.45, 0.4) + col.g * vec3(0.4, 0.4, 1) + col.b * vec3(1);\n    col = mat3(1.,.45,.4,.4,.4,1.,1.,1.,1.)*col;\n    col = vec3(0, 0, 0.05) + clamp(vec3(0, 0, 0.03) + col, vec3(0), vec3(1));\n\n    float n = fnebula(uv, 7., iTime / 5.);\n\n    n = n * 0.4;\n    n = clamp(n, 0., 1.);\n\n    n = 1. - n;\n    n = 0.5 / n;\n    n = n - 0.5;\n\n    vec3 vnb = n * vec3(0.7, 0.1, 1);\n    vnb = clamp(vnb, vec3(0), vec3(1));\n    fragColor = vec4(vnb + col, 1);\n}","name":"Image","description":"","type":"image"}]}