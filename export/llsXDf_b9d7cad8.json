{"ver":"0.1","info":{"id":"llsXDf","date":"1440360331","viewed":465,"name":"Hexagonal wallpapers","username":"nmz","description":"attempt at a generalization of the hexagonal lattice tilings, using the hexagon centers function from mattz.","likes":35,"published":1,"flags":0,"usePreview":0,"tags":["tiling","wallpaper","wallpapergroup"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//Hexagonal wallpapers by nmz (twitter: @stormoid)\n\n/*\n\tFor more info: https://en.wikipedia.org/wiki/Wallpaper_group\n\n\tp6: 0.5s\n\tp6mm: 8s\n\tp3: 12s\n\tp3m1: 21s\n\tp31m: 31s (not 100% sure about that one, can anyone confirm?)\n\n\tYou should see new patterns up to ~80seconds\n*/\n\n#define tau 6.2831853\n#define time iTime\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\n//From mattz (https://www.shadertoy.com/view/4d2GzV)\n//-------------------------------------------------------------\nvec2 pick3(vec2 a, vec2 b, vec2 c, float u) \n{\n\tfloat v = fract(u * 0.3333333333333);\n\treturn mix(mix(a, b, step(0.3, v)), c, step(0.6, v));\n}\n\nconst float s3 = 1.7320508075688772;\nconst float i3 = 0.5773502691896258;\nconst mat2 tri2cart = mat2(1.0, 0.0, -0.5, 0.5*s3);\nconst mat2 cart2tri = mat2(1.0, 0.0, i3, 2.0*i3);\nvec2 closestHexCenters(vec2 p){\n    p = cart2tri*p;\n\tvec2 ip = floor(p), fp = fract(p);\n\tvec2 nn = pick3(vec2(0), vec2(1), vec2(1.0, 0.0), ip.x + ip.y);\n    return tri2cart*(mix(nn, nn.yx, step(fp.x, fp.y)) + ip);\n}\n\n//-------------------------------------------------------------\n\nfloat tri(in vec2 p){ return max(abs(p.x)*1.73205+p.y, -p.y*2.);}\n\nfloat smoothfloor(in float x, in float k)\n{\n    float xk = x+k*0.5;\n    return floor(xk)+smoothstep(0.,k,fract(xk));\n}\n\n//The main texture function, could be different shapes\nvec4 tex(in vec2 p, in float a, in float typ)\n{\n    float t = mod(time,23.5);\n    p *= mm2(a + smoothfloor(t*0.4,0.25)*0.5 + smoothfloor(t*0.2,0.25)*.83);\n    float rz = tri(p*mix(1.,1.4,smoothstep(0.1,-0.1,sin(time*0.4))));\n    float rz2 = rz;\n    rz = smoothstep(0.7,.8,rz);\n    vec3 tri = (1.-rz)*abs(sin(vec3(1.,2.,3.)+typ*.8))*smoothstep(0.7,0.6,rz2);\n    tri *= texture(iChannel0, p).r*0.6+0.5;\n    return vec4(tri, 1.-rz);\n}\n\nvec3 tiles(in vec2 p)\n{\n    vec3 col = pow(texture(iChannel0, p).rgb,vec3(0.37));\n    vec2 ofst = vec2(0.5,.866);\n    \n    vec4 rez = tex(p,-0.5236, 0.5)*smoothstep(0.2,.3,sin(time*0.3+3.));\n    col = mix(col,rez.rgb,rez.a);\n    \n    float a = atan(p.x, -p.y)*3./tau;\n    float id = floor(a+.8);\n    vec2 bp = p;\n    p *= mm2(id*tau/3.);\n    \n    rez = tex(p+ofst,2.094+id*4.1889+ 1.05, 2.);\n    col = mix(col,rez.rgb,rez.a);\n    \n    id = floor(a+.3);\n    p = bp;\n    p *= mm2(id*tau/3. + 1.0472);\n    rez =  tex(-p-ofst,.0+2.094+id*4.1889, 3.);\n    col = mix(col,rez.rgb,rez.a);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\t\t\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = q-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n    p*= 8.;\n    p *= mm2(smoothstep(-0.1,.1,sin(time*0.25+0.1))*1.5708);\n    p.x += time*0.4;\n    \n    vec2 h = closestHexCenters(p);\n    vec3 col = tiles(p-h);\n\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n    \n    fragColor = vec4(col, 1.);\n}\n\n","name":"","description":"","type":"image"}]}