{"ver":"0.1","info":{"id":"MslyzH","date":"1487120728","viewed":270,"name":"HSV To RGB with cosine palettes","username":"mmerchante","description":"HSV to RGB approximation with iq's color palettes. It is not perfect, because the original HSV mapping uses linear functions. I'll work on the inverse mapping when I have more time!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["rgb","hsv","mapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Classic approach\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, .6666, .3333, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 d )\n{\n    return a + b * cos(6.28318 * (t + d));\n}\n\n// Color palette approach\nvec3 hsv2rgb_p(vec3 c) \n{\n    float h = c.x;\n    float s = c.y * c.z;\n    float s_n = c.z - s * .5;\n    \n    // Can remove some parameters, but I'll leave them as reference\t\n    return palette(h, vec3(s_n), vec3(s), vec3(1.0, 0.667, .3334));\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float s = step(uv.y, .5);\n    vec3 c = vec3(uv.x, 0.5+0.5*sin(iTime * .5),  .5 + .5 * cos(iTime * .5));\n    \n    vec3 hsv = mix(hsv2rgb(c), hsv2rgb_p(c), s);\n\tfragColor = vec4(hsv,1.0);\n}","name":"Image","description":"","type":"image"}]}