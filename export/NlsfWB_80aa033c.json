{"ver":"0.1","info":{"id":"NlsfWB","date":"1651410797","viewed":46,"name":"SPS Fox","username":"Johnno76","description":"SPS Fox","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \n// Credit to Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// for template, \n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat sdLineSeg(vec3 p, vec3 a, vec3 b){\n    vec3 ap=p-a; \n    vec3 ab=b-a;\n    float t = clamp(dot(ap,ab)/dot(ab,ab),0.,1.);\n    vec3 c = a+ab*t;\n    return length(p-c);\n}\n\n\nfloat GetDist(vec3 p) {\n    float thickness=0.025;\n    float radius = 200.;\n    \n    float PtsX[] = float[]( 720.,660.,550.87,530.031,530.031,600.254,600.0,780.0,850.,850.0,690.0,750.0);\n    float PtsY[] = float[]( 545.625,545.625,381.368 ,350.0,150.0,267.425,267.0,267.0, 150. ,350.0,590.78 ,600.0);\n    for (int i = 0; i < PtsX.length(); i++) {\n        PtsX[i]=(PtsX[i]-750.0)*(1.2)/radius;\n        PtsY[i]=((800.0-PtsY[i])-400.0)*1.2/radius+.45;\n    }\n    \n\n    float p1x=PtsX[0];\n    float p1y=PtsY[0];\n    float p2x=PtsX[1];\n    float p2y=PtsY[1];\n    float p3x=PtsX[2];\n    float p3y=PtsY[2];\n    float p4x=PtsX[3];\n    float p4y=PtsY[3];\n    float p5x=PtsX[4];\n    float p5y=PtsY[4];\n    float p6x=PtsX[5];\n    float p6y=PtsY[5];\n    float p7x=PtsX[6];\n    float p7y=PtsY[6];\n    float p8x=PtsX[7];\n    float p8y=PtsY[7];\n    float p9x=PtsX[8];\n    float p9y=PtsY[8];\n    float p10x=PtsX[9];\n    float p10y=PtsY[9];\n    float p11x=PtsX[10];\n    float p11y=PtsY[10];\n    float p12x=PtsX[11];\n    float p12y=PtsY[11];\n    \n\n    float ring= length(vec2(length(p.xy-vec2(0.0,0.45))-1.2,p.z))-thickness;\n    float line0 = sdLineSeg(p,vec3(p1x,p1y,0.), vec3(p2x,p2y,0.))-thickness;\n    float line1 = sdLineSeg(p,vec3(p2x,p2y,0.), vec3(p3x,p3y,0.))-thickness;\n    float line2 = sdLineSeg(p,vec3(p3x,p3y,0.), vec3(p4x,p4y,0.))-thickness;\n    float line3 = sdLineSeg(p,vec3(p5x,p5y,0.), vec3(p4x,p4y,0.))-thickness;\n    float line4 = sdLineSeg(p,vec3(p5x,p5y,0.), vec3(p6x,p6y,0.))-thickness;\n    float line5 = sdLineSeg(p,vec3(p6x,p6y,0.), vec3(p7x,p7y,0.))-thickness;\n    float line6 = sdLineSeg(p,vec3(p7x,p7y,0.), vec3(p8x,p8y,0.))-thickness;\n    float line7 = sdLineSeg(p,vec3(p8x,p8y,0.), vec3(p9x,p9y,0.))-thickness;\n    float line8 = sdLineSeg(p,vec3(p9x,p9y,0.), vec3(p10x,p10y,0.))-thickness;\n    float line9 = sdLineSeg(p,vec3(p10x,p10y,0.), vec3(p11x,p11y,0.))-thickness;\n    float line10 = sdLineSeg(p,vec3(p11x,p11y,0.), vec3(p2x,p2y,0.))-thickness;\n    float line11 = sdLineSeg(p,vec3(p12x,p12y,0.), vec3(p1x,p1y,0.))-thickness;\n    \n\n\n    float d=ring;\n    d=min(d,line0);\n    d=min(d,line1);\n    d=min(d,line2);\n    d=min(d,line3);\n    d=min(d,line4);\n    d=min(d,line5);\n    d=min(d,line6);\n    d=min(d,line7);\n    d=min(d,line8);\n    d=min(d,line9);\n    d=min(d,line10);\n    d=min(d,line11);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0.0, 0.45, -6);\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(1.7*cos(iTime),0.5,0),0.6+max(sin(iTime),0.0));\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.1+.9;\n        col = vec3(dif);\n    }\n    \n    col = pow(col, vec3(.1));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}