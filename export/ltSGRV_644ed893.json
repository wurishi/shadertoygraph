{"ver":"0.1","info":{"id":"ltSGRV","date":"1430316894","viewed":144,"name":"Exovoid Logo","username":"roberto","description":"I'm a newbie in the shaders world, this is my first one.\nSimple test using my company logo ;) ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarching","noise","distancefield","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//------------------------------------------------------------------------------------------\n//Exovoid logo fragment shader using raymarching, by Roberto Marra @shagan\n//Lighting from IQ\n//Thanks to Inigo Quilez for all explanations and articles. \n\n\n\n\nfloat perlin(vec3 p) {\n    vec3 i = floor(p);\n    vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n    vec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n    a = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n    a.xy = mix(a.xz, a.yw, f.y);\n    return mix(a.x, a.y, f.z);\n}\n\n\nvec2 merge(vec2 d1,vec2 d2) {\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat merge_substract( float d1, float d2) {\n    return max(-d2,d1);\n}\n\nfloat subPlane(vec3 p,float time) {    \n   vec3 noise=perlin(vec3(p.x,p.y,p.z))+vec3(sin(time)+cos(time));\n   return p.y-clamp(noise.z,-0.1,0.25);\n}\n\nfloat subSphere(vec3 p,float rad) {\n    return length(p)-rad;\n}\n\nfloat subBox(vec3 p,vec3 b) {\n  return length(max(abs(p)-b,0.0));\n}\n\nvec2 map( in vec3 pos ) {\n\tfloat time = iTime*2.0;\n    vec2 res = vec2(subPlane(pos,time), 1.0 );\n\n    float depth=0.2;\n\n    res = merge(res,\n        vec2(\n            subBox(pos,vec3(2.8,2,depth)),2\n            )\n          );\n\n\n    res = merge(res,\n        vec2(\n            subBox(pos-vec3(0,1,0),vec3(0.8,0.8,depth)),3\n            )\n          );\n\n    res = merge(res, vec2(\n         merge_substract(\n         subBox(pos-vec3(0,1,0),vec3(0.2,1,depth)),\n         subBox(pos-vec3(0,1,0),vec3(0.5,0.5,depth))\n         ),2\n         ));\n\n    res = merge(res,vec2(subBox(pos-vec3(0,1,0),vec3(0.5,0.5,depth)),2));\n\n    res = merge(res, vec2(subBox(pos-vec3(-1,1,0),vec3(0.2,0.2,depth)),3.0));\n    res = merge(res, vec2(subBox(pos-vec3(1,1,0),vec3(0.2,0.2,depth)),3.0));\n    res = merge(res, vec2(subBox(pos-vec3(1.7,abs(sin(time)+cos(time))*0.75,-1.),vec3(0.2,0.2,0.2)),5.0));\n\n    return res;\n}\n\nvec2 castRay( in vec3 rayOrigin, in vec3 rayDirection ) {\n    float tmin = 0.1;       //travel min\n    float tmax = 20.0;      //travel max\n\tfloat precis = 0.0002;  //precision\n    float step = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ ) {\n\t    vec2 res = map(rayOrigin+rayDirection*step);\n\n        if( res.x<precis || step>tmax ) break;  //check limit\n\n        step += res.x;\n\t    m = res.y;\n    }\n\n    if( step>tmax ) m=-1.0;\n    return vec2( step, m );\n}\n\n\n//---- Lighting from Inigo Quilez  ---------------------------------------------------------\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\n\nvec3 calcLight(in vec3 col, in vec3 pos, in vec3 rd) {\n         vec3 nor = calcNormal( pos );\n         vec3 ref = reflect( rd, nor ); //calculate the reflection direction for an incident vector\n         float occ = calcAO( pos, nor );\n \t\t vec3  lig = normalize( vec3(0,2,-2.));\n \t\t float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n         float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n         float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n         float dom = smoothstep( -0.1, 0.1, ref.y );\n         float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n \t\t float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n\n         dif *= softshadow( pos, lig, 0.5, 2.5 );\n         dom *= softshadow( pos, ref, 0.5, 2.5 );\n\n \t\t vec3 brdf = vec3(0);\n         brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n \t\t brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n         brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n         brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n         brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n         brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n \t\t brdf += 0.02;\n \t\t col = col*brdf;\n         return col;\n}\n//------------------------------------------------------------------------------------------\n\n\n\nvec3 render( in vec3 ro, in vec3 rd ) {\n    vec3 col = vec3(0.8, 0.9, 1.0);\n\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>0.) {\n        vec3 pos = ro + t*rd;\n\n        // material\n        if(m==3.0) {\n            col= vec3(0);\n        }else if(m==5.0){\n            col= vec3(0,0.68,0.92);\n        }else{\n            col= vec3(1);\n        }\n\n        if( m<1.5){\n            float f = mod( floor(2.0*pos.x)+floor(2.0*pos.z) , 2.0);\n            vec3 cc = vec3(clamp(0.5*f,0.3,1.0));\n            cc =  vec3(cc.x*0.5,cc.y*0.7,cc.z*0.9);\n            col = clamp(cc,0.,1.);\n        }\n\n        col = calcLight(col,pos,rd);\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) ); \n}\n\n\nmat3 getRotMatrix(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n\treturn m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n   \tfloat g_aspectRatio = iResolution.x / iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\n    float focalLength = 1.5;\n\n    vec3 camPos\t\t= vec3(0, 1, -5);\t\t\t\t\t\t// The eye position in the world\n    vec3 camUp\t\t= normalize(vec3(0.0, 1.0, 0.0));\t\t// The upward-vector of the image plane\n    vec3 camRight\t= normalize(vec3(1.0, 0.0, 0.0));\t\t// The right-vector of the image plane\n    vec3 camForward\t= cross(camRight, camUp);\t    \t\t// The forward-vector of the image plane\n\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 uv = -1.0+2.0*q;\n\n    vec3 ang = vec3(0.0,0,sin(iTime * 0.5));\n    if(iMouse.z > 1.0) ang = vec3(0.0,-1.0*iMouse.y*0.001,iMouse.x*0.01);\n    mat3 rot = getRotMatrix(ang);\n\n\tvec3 ro = camPos;\n\tvec3 rd = normalize((camForward * focalLength) + (camRight * uv.x * g_aspectRatio) + (camUp * uv.y));\n\n    ro *= rot;\n    rd *= rot;\n\n    vec3 col = render( ro, rd );\n    \n    \n    fragColor=vec4( col, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}