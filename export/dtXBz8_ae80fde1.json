{"ver":"0.1","info":{"id":"dtXBz8","date":"1692584186","viewed":28,"name":"2D Waves for Fourier-ering","username":"WhiteWalrus518","description":"Because I keep forgetting how to code it.\n\n*Click somewhere in the red cross*","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math","utility"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res iResolution\n#define pi 3.14159\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/res.x;\n    vec3 col = vec3(1.0);\n    \n    vec2 samplePoint = vec2(0.0);\n    \n    \n    \n    float plotWidth = .4;\n    if(iMouse.x < plotWidth * res.x){\n        samplePoint = ( iMouse.xy - vec2(res.x * plotWidth * .5, res.y * 0.5) ) / res.x;\n    }\n    \n    if(uv.x < plotWidth){\n        vec2 pv = ( fragCoord - vec2(res.x * plotWidth * .5, res.y * 0.5) ) / res.x;\n        // Plot View\n        col = vec3((atan(pv.y,pv.x) + pi)) *0.5 / pi ;\n        if(length(pv - samplePoint) < 0.005){\n            fragColor = vec4(0.0, 1.0, 1.0, 0.0);\n            return;\n        }\n        if(abs(pv.x) < 0.0015 || abs(pv.y) < 0.0015){\n            fragColor = vec4(1.0, 0.0, 0.0, 0.0);\n            return;\n        }\n    }\n    else{\n        vec2 dv = (fragCoord + vec2(plotWidth, 0.0))/ res.x;\n        //Demo View\n        float dis = dot(dv, samplePoint) / length(samplePoint);\n        float w  = 1.0 / length( samplePoint);\n        fragColor = vec4( sin(dis *w * .5) * sin(dis *w * .5));\n        return;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}