{"ver":"0.1","info":{"id":"clKBRc","date":"1702334914","viewed":69,"name":"pebbles plants on volcanic beach","username":"jt","description":"Combined [url=https://www.shadertoy.com/view/DlKBz3 orthogonal circles iterate plant] with [url=https://www.shadertoy.com/view/mtVfzy pebbles on volcanic beach].","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["beach","plants","volcanic","pebbles"],"hasliked":0,"parentid":"DlKBz3","parentname":"orthogonal circles iterate plant"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/clKBRc pebbles plants on volcanic beach, 2023 by jt\n// combined https://www.shadertoy.com/view/DlKBz3 orthogonal circles iterate plant\n// with on https://www.shadertoy.com/view/mtVfzy pebbles on volcanic beach\n\n// tags: pebbles, plants, beach, volcanic\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define EPSILON 0.001 too high: normal errors at object intersections\n#define EPSILON 0.0001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec4 hash42(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n//---------------------------------------------------------------\n// 4x4 scan in both passes = most accurate\n//---------------------------------------------------------------\n// https://www.shadertoy.com/view/llG3zy Faster Voronoi Edge Distance by tomkh\n/*\nvec3 voronoi( in vec2 x )\n{\n#if 1\n    // slower, but better handles big numbers\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n    vec2 h = step(.5,f) - 2.;\n    n += h; f -= h;\n#else\n    vec2 n = floor(x - 1.5);\n    vec2 f = x - n;\n#endif\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    vec2 mr;\n\n    float md = 8.0;\n    for(int j = 0; j <= 3; j++)\n        for(int i=0; i <= 3; i++)\n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n            }\n        }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for(int j = 0; j <= 3; j++)\n        for(int i = 0; i <= 3; i++)\n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            vec2 r = g + o - f;\n\n            if(dot(mr - r, mr - r) > EPSILON) // skip the same cell\n                md = min(md, dot(0.5 * (mr + r), normalize(r - mr)));\n        }\n\n    return vec3(mr, md);\n}\n*/\nvec2 voronoi( in vec2 x ) // adapted from https://www.shadertoy.com/view/llG3zy Faster Voronoi Edge Distance by tomkh NOTE: removed here not needed 2nd pass\n{\n#if 0\n    // slower, but better handles big numbers\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n    vec2 h = step(.5,f) - 2.;\n    n += h; f -= h;\n#else\n    vec2 n = floor(x - 1.5);\n    vec2 f = x - n;\n#endif\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    vec2 mr;\n\n    float md = 8.0;\n    for(int j = 0; j <= 3; j++)\n        for(int i=0; i <= 3; i++)\n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash22(n + g);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n            }\n        }\n\n    return mr;\n}\n\nfloat ortho_circle_flower_sdf(float n, vec2 p) // https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2 (jt)\n{\n    float slice = pi/n;\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nfloat ortho_circle_flower_sdf_iterated(int n, vec2 p)\n{\n    n = n*2+1; // must be odd integer\n\n    float l = length(p);\n    if(l < 1.0)\n        return ortho_circle_flower_sdf(float(n), p);\n\n    p = -p;\n    float slice = 2.0*pi/float(n);\n    float mu = atan(p.x,p.y); // angle\n    float mu0 = floor(mu/slice)*slice; // quantize\n    float mu1 =  ceil(mu/slice)*slice; // quantize\n\n    vec2 p0 = mat2(cos(mu0),sin(mu0),-sin(mu0),cos(mu0))*p;\n    vec2 p1 = mat2(cos(mu1),sin(mu1),-sin(mu1),cos(mu1))*p;\n    float s = 1.0/3.0;\n    //float s = 7.0/3.0/float(n);\n    p0.y-=1.0+s;\n    p1.y-=1.0+s;\n\n    return\n        min\n        (\n            ortho_circle_flower_sdf(float(n),p0/s)*s,\n            ortho_circle_flower_sdf(float(n),p1/s)*s\n        );\n}\n\nfloat ortho_circle_flower_sdf(int m, int n, vec3 p) // https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant (jt)\n{\n    float phi = round(atan(p.y,p.x)/(2.0*pi/float(m)))*(2.0*pi/float(m)); // polar & quantize\n    p.xy = mat2(cos(phi),-sin(phi),sin(phi),cos(phi))*p.xy;\n    return length(vec2(ortho_circle_flower_sdf_iterated(n, vec2(p.xz)),p.y));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // https://www.shadertoy.com/view/tdS3DG generic ellipsoid - improved approximated distance by iq\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nvec4 pattern(vec3 p)\n{\n    vec2 v = voronoi(p.xy).xy;\n    vec2 id = round(p.xy+v); // guessed\n    vec4 r = hash42(id);\n    float s = mix(0.2,0.4,r.z);\n    vec3 c = mix(vec3(0.5,0.5,0),vec3(0,0.5,0.5),r.xyz)+vec3(0,0.5,0);\n    float mu = 2.0*pi*r.w;\n    mat2 R = mat2(cos(mu),sin(mu),-sin(mu),cos(mu));\n    //float d = length(vec2(length(voronoi(p.xy).xy), p.z))-0.1;\n    if(r.w < 0.5)\n    {\n        vec3 s = mix(vec3(0.1,0.1,0.05),vec3(.12,.1,0.1),r.xyz)*mix(0.5,1.5,r.y);\n        float d = sdEllipsoid(vec3(R*v, p.z-s.z/2.0), s);\n        vec3 c = vec3(r.z);\n        return vec4(c,d);\n    }\n    float d = ortho_circle_flower_sdf(3, 3, vec3(R*v, p.z-s)/s)*s-0.005;\n    return vec4(c,d);\n}\n\nvec4 map(vec3 p)\n{\n    vec4 f = vec4(vec3(mix(0.05,0.1,hash12(p.xy*100.0))),p.z);\n    vec4 g = pattern(p);\n    if(g.w < f.w) return g;\n    \n    return f;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 t;\n    for(t.w = t0, i = 0u; t.w < t1 && i < ITER_MAX; i++)\n    {\n        vec4 h = map(ro + rd * t.w);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t.w);\n        t.w += h.w;\n    }\n\n    return t; // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime/100.0);\n    //pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : 3.5/3.0 * pi / 2.0;\n    pitch = !demo ? pitch : 3.2/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : (0.5-0.5*cos(iTime/pi/10.0)+3.0)/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 0.2;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n    //vec3 sky = mix(vec3(0,0.25,0.25),vec3(0,0,1),abs(rd.z));\n    vec3 sky = mix(vec3(0.05,0.2,0.25),vec3(0,0,0.5),abs(rd.z));\n\n    float dim = 1.0-pow(max(0.0, dot(M * vec3(0,0,1), lightdir)), 3.0); // reduce brightness when looking towards sun to make sunlight seem brighter\n    //float dim = pow(1.0-max(0.0, dot(M[2], lightdir)), 1.0); // reduce brightness when looking towards sun to make sunlight seem brighter\n    //float dim = 1.0; // disable brightness change\n\n    {\n        float d = max(0.0, dot(rd, lightdir));\n        float sun = 50.0*smoothstep(0.999, 1.000, d) + exp(-pow((1.0-d)*1000.0, 2.0)); // sun with halo\n\n        sky += sun;\n    }\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    vec3 dst = ro + rd * dist;\n    /*\n    // water reflection\n    if(dst.z < EPSILON)\n    {\n        ro.z = -ro.z; // mirror camera\n        rd.z = -rd.z; // mirror camera\n        result = trace(ro, rd, dist+0.01, DIST_MAX);\n        dist = result.w;\n        dst = ro + rd * dist;\n        color = mix(color, result.xyz, 0.01);\n        //color = result.xyz;\n    }\n    */\n    if(dist < DIST_MAX)\n    {\n        vec3 n = normal(dst);\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            //brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0);\n        vec3 fog_color = sky;\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= 0.0;\n        color = sky;\n    }\n\n    color *= mix(0.25,1.0,dim);\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}