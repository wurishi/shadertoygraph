{"ver":"0.1","info":{"id":"md3czr","date":"1694668632","viewed":58,"name":"I Fucked Up","username":"Chroma_Crash","description":"tried ray marching and including a modulo to make multiple spheres but just kinda made a mess","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["weird"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PIXEL_SIZE 1.0\n#define DIVISIONS 6.0\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n\n#define MIN_DIST 0.01\n\nfloat dist_to_scene(vec3 coord) {\n    return distance(mod(coord, 1.0), vec3(0, 0, 1.05 + sin(iTime / 2.0)));\n}\n\nfloat ray_march(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * d;\n        float ds = dist_to_scene(p);\n        d += ds;\n        if (d > MAX_DIST || ds < MIN_DIST) {\n            break;\n        }\n    }\n    return d;\n}\n\nvec3 get_normal(vec3 pos) {\n    float d = dist_to_scene(pos);\n    vec2 e = vec2(.01,0);\n    vec3 n = d - vec3(\n    dist_to_scene(pos-e.xyy),  \n    dist_to_scene(pos-e.yxy),\n    dist_to_scene(pos-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 get_light(vec3 pos) {\n    vec3 n = get_normal(pos);\n    vec3 l = vec3(0.5, -0.5, sin(iTime));\n    float d = dot(n, l);\n    \n    d = clamp(d, 0., 1.);\n    return d * vec3(1, 1, 0.8);\n}\n\nvec2 pixel_pos(vec2 coord) {\n    return floor(coord / PIXEL_SIZE) * PIXEL_SIZE;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = pixel_pos(fragCoord);\n    \n    vec2 uv = vec2(fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = ray_march(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    vec3 color = get_light(p);\n   \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}