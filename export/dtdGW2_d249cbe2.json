{"ver":"0.1","info":{"id":"dtdGW2","date":"1683164825","viewed":58,"name":"Fork Nova fract Cesium_137 029","username":"Cesium_137","description":"It's interactive now! WASD or arrow keys to pan, e and q to zoom in and out respectively. I kind of just merged my code and darkeclipz's together. I had to turn up the iterations because otherwise you wouldn't be able to zoom in very far.","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["fractal","nova"],"hasliked":0,"parentid":"ttccRH","parentname":"Nova fractal"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define C fragCoord                           \n#define M iMouse\n#define mouseDown iMouse.z > .0\nconst int iterations = 512; //set this to 128 if you have a slow computer\n\nvec2 getCoord() {\n    return vec2(texelFetch(iChannel0,ivec2(0, 0), 0).r,texelFetch(iChannel0,ivec2(1,0),0).r);\n}\nfloat getZoom() {\n    if(texelFetch(iChannel0, ivec2(2, 0), 0).r > -1.0){\n        return texelFetch(iChannel0,ivec2(2,0),0).r;\n    }\n    else {\n        return -0.5;\n    }\n}\nint getzoomthingy() {\n    return int(texelFetch(iChannel0, ivec2(3, 0), 0).r);\n}\n\nvec3 magma(float t) { // from Mattz\n    const vec3 c0 = vec3(-0.002136485053939582, -0.000749655052795221, -0.005386127855323933);\n    const vec3 c1 = vec3(0.2516605407371642, 0.6775232436837668, 2.494026599312351);\n    const vec3 c2 = vec3(8.353717279216625, -3.577719514958484, 0.3144679030132573);\n    const vec3 c3 = vec3(-27.66873308576866, 14.26473078096533, -13.64921318813922);\n    const vec3 c4 = vec3(52.17613981234068, -27.94360607168351, 12.94416944238394);\n    const vec3 c5 = vec3(-50.76852536473588, 29.04658282127291, 4.23415299384598);\n    const vec3 c6 = vec3(18.65570506591883, -11.48977351997711, -5.601961508734096);\n    t *= 2.; if(t >= 1.) { t = 2. - t; }\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); } // from iq\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); \n                               return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\n\nfloat map(vec2 z, vec2 c, float n) {\n    float i=0., p = 3.0; // Degree\n    vec2 z_prev = vec2(0);\n    if(mouseDown) c = 0.75*(2.*M.xy-R)/R.y - vec2(0.5, 0); // Julia mode\n    else          z = vec2(1,0);                           // Mandelbrot mode at fixed point\n    for(i=0.; i < n; i++) {\n        z_prev = z;\n        z = z - cdiv(cpow(z, p) - vec2(1, 0), cmul(vec2(p, 0), cpow(z, p-1.0))) + c;\n        if(abs(dot(z-z_prev, z-z_prev)) < 0.0001)\n            break;\n\t}   \n    return i/n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = pow(1.03, getZoom()) / 4.;\n    vec2 uv = 0.75*(2.*C-R)/R.y;\n    float t = map((uv / zoom) + getCoord(), (uv / zoom) + getCoord(), float(iterations));\n    fragColor = vec4(magma(t),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getZoom(){\n    if(texelFetch(iChannel0, ivec2(2, 0), 0).r > -1.0){\n        return texelFetch(iChannel0, ivec2(2, 0), 0).r;\n    }\n    else{\n        return -0.5;\n    }\n}\nconst int KEY_A = 65;\nconst int KEY_W = 87;\nconst int KEY_D = 68;\nconst int KEY_S = 83;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\nconst int KEY_Q = 81;\nconst int KEY_E = 69;\nconst int KEY_R = 82;\nconst float speed = 2.0;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float zoom=0.25*pow(1.03,getZoom());\n    float outData=0.0;\n    switch(int(fragCoord.x)) {\n        case 0:\n        \toutData = texelFetch(iChannel0, ivec2(0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_D, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_A, 0), 0).r;\n        \tbreak;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \tbreak;\n        case 2:\n            if(texelFetch(iChannel0, ivec2(2,0),0).r > -1.0){\n                outData = texelFetch(iChannel0,ivec2(2, 0), 0).r +\n                iTimeDelta * speed * 25. * texelFetch(iChannel1, ivec2(KEY_E, 0), 0).r -\n                iTimeDelta * speed * 25. * texelFetch(iChannel1, ivec2(KEY_Q, 0), 0).r;\n            }\n            else{\n                outData = 0.0;\n            }\n            break;\n    }\n    fragColor = vec4(outData,0.0,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}