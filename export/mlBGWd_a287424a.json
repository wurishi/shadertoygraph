{"ver":"0.1","info":{"id":"mlBGWd","date":"1674116953","viewed":167,"name":"waffle sphere 2","username":"FabriceNeyret2","description":"mouse controls camera","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","short","waffle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/dlBGWd\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))               // rotation \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,m;\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -12.*R.y) - R),          // ray direction\n          p = vec3(0,0,20), q,a,                           // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n              :  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)); \n     \n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 )         // march scene\n        q = p, // t = 9.,\n        q.yz *= rot(-M.y),                                 // rotations\n        q.xz *= rot(-M.x-1.57), \n        t = length(q),\n        a = abs(q),\n        m = max(a.x, max(a.y,a.z)),\n        U = m==a.x ? q.yz : m==a.y ? q.xz : q.xy,          // cube-sphere mapping\n        U = abs( fract(6.*U/t) - .5 ) / 6.*t,              // distance to walls\n        t = max( t-1.5 , min(U.x,U.y) ),                   // distance trimmed by sphere\n        p += .5*t*D;                                       // step forward = dist to obj    \n      \n\n   O *= O*O*1.5;                                           // color scheme\n}\n\n","name":"Image","description":"","type":"image"}]}