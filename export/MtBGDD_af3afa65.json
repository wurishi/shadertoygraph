{"ver":"0.1","info":{"id":"MtBGDD","date":"1435079502","viewed":518,"name":"Iestyn's RGB dither","username":"KazimirO","description":"Code from GDC 2015 VR talk by Valve's Alex Vlachos.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dither","rgb","iestyn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define float2 vec2\n#define float3 vec3\n#define float4 vec4\n#define fmod mod\n\nvec3 blue = vec3( 0.0, 130.0/255.0, 160.0/255.0 );\n//vec3 blue = vec3( 1.0, 1.0, 1.0 );\n\n//Iestyn's RGB dither( 7 asm instructions) from Portal2 X360, slightly modified for VR\nvec3 ScreenSpaceDither( vec2 vScreenPos )\n{\n    \n\tfloat fDither = dot(vec2(171.0,231.0),vScreenPos.xy + iTime);\n\tvec3 vDither = vec3( fDither, fDither, fDither );\n\tvDither.rgb=fract(vDither.rgb/vec3(103.0,71.0,97.0))-vec3(0.5,0.5,0.5);\n\treturn( vDither.rgb/255.0)*0.375;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t// normalize to fit screen\n\tuv -= 0.5;\t\t\t\t\t\t\t\t\t// origin in center\n\tfloat fGradient = 1.0 - dot( uv, uv );\t\t// quadratic fall-off\n        \n \tfloat t = mod( iTime, 5.0 );\n\n\tif ( t < 1.0 )\n\t{\n        // no dither\n\t\tfragColor = vec4( blue*fGradient, 1.0);\n    }\n    else if ( t < 2.0 )\n    {\n\t\t// checkerboard dither pattern\n\t\tif ( mod(fragCoord.x + fragCoord.y, 2.0) == 0.0 )\n            fGradient -= 0.0039;\n\t\tfragColor = vec4( blue*fGradient, 1.0);\n\t}\n\telse if ( t < 3. )\n    {\n       \t// 2x2 ordered dither\n        float2 ij = floor(fmod(fragCoord, 2.0));\n\t\tfloat index = ij.x + 2.0*ij.y;\t\t\t\t// unfold the index\n//\t\tfloat4 m = step(abs( index - float4(0, 1, 2, 3)), 0.5) * float4(0.75, 0.25, 0.00, 0.50);\n   \t\tvec4 m = step( abs(vec4(index)-vec4(0,1,2,3)), vec4(0.5) ) * vec4(0.75,0.25,0.00,0.50);\n\n\t\tfloat d = m.x + m.y + m.z + m.w;\n        fGradient = fGradient + d/255.0;\n        \n\t\tfragColor = vec4( blue*fGradient, 1.0 );\n    }\n    else        \n\t{\n\t\t// RGB dither\n\t\tvec3 vDither = ScreenSpaceDither( fragCoord )*8.0;\n\t\tfragColor = vec4( blue*fGradient + vDither, 1.0 );\n\t}\n}","name":"Image","description":"","type":"image"}]}