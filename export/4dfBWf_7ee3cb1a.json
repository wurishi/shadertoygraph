{"ver":"0.1","info":{"id":"4dfBWf","date":"1499149741","viewed":955,"name":"Reflection and Refraction 2","username":"Takoa","description":"Noiseless version. Use mouse to change IOR.","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["raytracing","reflection","refraction","fresnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FLT_MAX 3.40282347e+38\n\n#define GAMMA 2.2\n#define MAX_DEPTH 5\n\nvec3 spherePosition = vec3(0.0);\nfloat sphereRadius = 1.0;\n\nstruct HitInfo\n{\n    bool hits;\n    float t;\n};\n\nfloat fresnel(vec3 l, vec3 n, float eta1, float eta2)\n{\n    float c = abs(dot(l, n));\n    float g = sqrt((eta2 * eta2) / (eta1 * eta1) - 1.0 + c * c);\n    float gpc = g + c;\n    float gmc = g - c;\n    float f1 = c * gpc - 1.0;\n    float f2 = c * gmc + 1.0;\n    \n    return 0.5 * (gmc * gmc) / (gpc * gpc) * (1.0 + (f1 * f1) / (f2 * f2));\n}\n\nHitInfo sphere(vec3 rayOrigin, vec3 rayDirection, vec3 center, float radius)\n{\n    vec3 difference = rayOrigin - center;\n    float b = dot(difference, rayDirection);\n    float c = dot(difference, difference) - radius * radius;\n    float d = b * b - c;\n    HitInfo hi;\n    \n    if (d < 0.0)\n    {\n        hi = HitInfo(false, FLT_MAX);\n    }\n    else\n    {\n        float t1 = -b - sqrt(abs(d));\n        float t2 = -b + sqrt(abs(d));\n        \n        hi = HitInfo(0.0 <= t2 ? true : false, 0.0 <= t1 ? t1 : t2);\n    }\n    \n    return hi;\n}\n\nHitInfo getHitInfo(vec3 rayOrigin, vec3 rayDirection)\n{\n    return sphere(rayOrigin, rayDirection, spherePosition, sphereRadius);\n}\n\nvec3 getNormal(vec3 hitPoint)\n{\n    return normalize(hitPoint - spherePosition);\n}\n\nvec3 getRayDirection(vec2 screenPosition, vec3 origin, vec3 lookingAt, vec3 up, float fov)\n{\n    vec3 d = normalize(lookingAt - origin);\n    vec3 right = normalize(cross(d, up));\n    \n    return normalize(screenPosition.x * right + screenPosition.y * up + 1.0 / tan(radians(fov / 2.0)) * d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float numRays = pow(2.0, float(MAX_DEPTH));\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 cameraPosition = 2.0 * vec3(cos(iTime), 0.0, sin(iTime));\n    vec3 cameraUp = vec3(0.0, 1.0, 0.0);\n    vec3 cameraLookingAt = vec3(0.0);\n    \n    vec3 color = vec3(0.0);\n    \n    for (float i = 0.0; i < numRays; i++)\n    {\n        vec3 rayOrigin = cameraPosition;\n        vec3 rayDirection = getRayDirection(position, cameraPosition, cameraLookingAt, cameraUp, 90.0);\n        float eta1 = 1.0;\n        float eta2 = iMouse.x < 1.0 ? 1.5 : iMouse.x / iResolution.x + 1.0;\n        float ratio = 1.0;\n        bool rayHits = false;\n        vec3 v = vec3(0.0);\n        \n        for (float j = 0.0; j < float(MAX_DEPTH); j++)\n        {\n            HitInfo hi = getHitInfo(rayOrigin, rayDirection);\n            \n            if (hi.hits)\n            {\n                int blockNo = int(i) / int(pow(2.0, float(MAX_DEPTH) - j - 1.0));\n                vec3 hitPoint = rayOrigin + rayDirection * hi.t;\n                vec3 normal = getNormal(hitPoint);\n                float f = fresnel(-rayDirection, normal, eta1, eta2);\n                \n                rayHits = true;\n                normal = dot(rayDirection, normal) <= 0.0 ? normal : -normal;\n                \n                if (blockNo % 2 == 0)\n                {\n                    rayDirection = reflect(rayDirection, normal);\n                    ratio *= f;\n                }\n                else\n                {\n                    float g = eta2;\n                    \n                    eta2 = eta1;\n                    eta1 = g;\n                    rayDirection = refract(rayDirection, normal, eta2 / eta1); // eta1 and eta2 are already swapped.\n                    ratio *= 1.0 - f;\n                }\n                \n                rayOrigin = hitPoint + rayDirection * 0.00001;\n            }\n            else\n            {\n                v = texture(iChannel0, rayDirection).xyz * ratio;\n                \n                if (rayHits)\n                {\n                    v *= 4.0;\n                }\n                \n                break;\n            }\n        }\n        \n        color += v / numRays;\n    }\n    \n    //fragColor = vec4(pow(color, vec3(1.0 / GAMMA)), 1.0);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}