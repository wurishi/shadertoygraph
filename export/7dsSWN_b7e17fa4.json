{"ver":"0.1","info":{"id":"7dsSWN","date":"1618728357","viewed":97,"name":"CG task2","username":"Tyapkins","description":"Стрельников Алексей, 321 группа.\nВариант 0.1\n321_strelnikov_v0v1\n\nДоп. баллы:\n• Электрические разряды (+2-5)\n• Мягкие тени (+2-3)\n• Анти-алиасинг (+2)\n• Окружение в виде текстурированного куб-мапа (+2)\n• Окружение в виде текстурированной плоскости (+1)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e9;\nconst float SPHERE_R = 1.0;\n\nconst float CYL_HEIGHT1 = 1.5;\nconst float CYL_HEIGHT2 = 1.2;\nconst float CYL_HEIGHT3 = 1.0;\nconst float CYL_R1 = 0.9;\nconst float CYL_R2 = 1.2;\nconst float CYL_R3 = 1.5;\n\n\nconst vec3 CAMERA_POS = vec3(-1.0, 1.2, -6);\n\n\nconst vec3 LIGHT1_POS = vec3(2, 1.5, 0);\nconst float LIGHT1_RADIUS = 0.25;\nconst vec4 LIGHT1_COLOR = vec4(1, 1, 1, 1);\n\nvec3 LIGHT2_POS = vec3(-2, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.5;\nconst vec4 LIGHT2_COLOR = vec4(0.1, 0.7, 0.1, 1);\n\nvec3 LIGHT3_POS;\nconst float LIGHT3_RADIUS = 0.3;\nconst vec4 LIGHT3_COLOR = vec4(0.7, 0.2, 0.5, 1);\n\nconst vec3 SPHERE_POS = vec3(0, SPHERE_R-1.0/CYL_HEIGHT1, 0); \n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0.1, 1, 0.1);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal, float RAD, float h) {\n    //float HEIGHT = CYL_HEIGHT;\n    //float RAD = 0.9;\n    float HEIGHT = 1.0/h;\n    float t = (-HEIGHT - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < RAD) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - RAD;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -HEIGHT) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -HEIGHT) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,11.21233,56.5432) )) * 436312.264);\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, SPHERE_R, sphNorm);\n    if (sphT < dist)\n        return true;\n    return false;\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    if (sinB > 1.0)\n        return reflect(v_in, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - SPHERE_R*0.8;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(3, 1, 5) * totalAbs, 1.0 - opacity);\n}\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLighting(vec3 worldPos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec3 lightPos = LIGHT1_POS + randDir * LIGHT1_RADIUS;\n    vec3 toLight = lightPos - worldPos;\n    bool occl = isOccluded(worldPos + normalize(toLight) * 1e-3, lightPos);\n    float lightAtten = 20.0f / dot(toLight, toLight) * (occl ? 0.0 : 1.2);\n\n    vec3 light2Pos = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = light2Pos - worldPos;\n    bool occl2 = isOccluded(worldPos + normalize(toLight2) * 1e-3, light2Pos);\n    float light2Atten = 10.0f / dot(toLight2, toLight2) * (occl2 ? 0.0 : 1.2);\n    \n    vec3 light3Pos = LIGHT3_POS + randDir * LIGHT3_RADIUS;\n    vec3 toLight3 = light3Pos - worldPos;\n    bool occl3 = isOccluded(worldPos + normalize(toLight3) * 1e-3, light3Pos);\n    float light3Atten = 10.0f / dot(toLight3, toLight3) * (occl3 ? 0.0 : 1.2);\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight))) * lightAtten * LIGHT1_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Atten * LIGHT2_COLOR\n        + max(0.0f, dot(normal, normalize(toLight3))) * light3Atten * LIGHT3_COLOR\n        + textureLod(iChannel0, viewVec, 10.0) * 0.1\n    ).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals * 2.0 - 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n    vec3 LIGHT2_POS = vec3(-2, 0.5, 2) + randVals.y*0.15;\n    vec3 LIGHT3_POS = vec3(1.5, 1.0, -2) + randVals*0.05;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float curN = 1.0;\n    float nextN = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float GLASS_T = 1.0 - GLASS_R;\n\n    vec3 currentPos = CAMERA_POS;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    int iterationType;\n    vec3 color;\n    float mult = 1.0;\n\n    for (int i = 0; i < 3; ++i) {\n        \n        float t = INF;\n        vec3 normal = vec3(0, 0, 0);\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(currentPos, viewVec, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            iterationType = DIFFUSE;\n            vec3 worldPos = t * viewVec + currentPos;\n            color = texture(iChannel1, worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(currentPos - LIGHT1_POS, viewVec, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            color = LIGHT1_COLOR.rgb;\n            iterationType = EMISSION;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(currentPos - LIGHT2_POS, viewVec, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            color = LIGHT2_COLOR.rgb;\n            iterationType = EMISSION;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(currentPos - LIGHT3_POS, viewVec, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            color = LIGHT3_COLOR.rgb;\n            iterationType = EMISSION;\n            normal = l3Norm;\n        }\n        \n        vec3 sphNorm;\n        //vec3 new_randVals = vec3(rand(float(iFrame+2)), rand(float(iFrame + 1)), rand(float(iFrame + 3)));\n        //vec3 new_randDir = normalize(new_randVals * 2.0 - 1.0);\n        float sphere_t = traceSphere(currentPos-SPHERE_POS, viewVec, SPHERE_R, sphNorm);\n        if (sphere_t < t) {\n            t = sphere_t;\n            if (GLASS_R > randVals.x) {\n                normal = sphNorm+viewVec*1e-6;\n                iterationType = REFLECTION;\n            }/* else if (int(abs(currentPos.x - 2.0*SPHERE_POS.x+(randVals.x - 0.5) * 2.0)*100.0)%30 == 23\n            || (int(abs(currentPos.y - 5.0*SPHERE_POS.y+(randVals.y - 0.25) * 4.0)*100.0)%70 == 59)\n            || (int(abs(currentPos.z - 3.0*currentPos.x+(randVals.y - 0.125) * 8.0)*100.0)%90 == 53))\n            {\n                fragColor.rgb = vec3(0.7,0.7,0.7);\n                iterationType = REFRACTION;\n            \n            }*/\n              else {\n                normal = sphNorm;\n                mult *= 0.95;\n                iterationType = REFRACTION;\n                if (dot(viewVec, normal) > 0.0) {\n                    nextN = AIR_N;\n                } else {\n                    nextN = GLASS_N;\n                }\n            //float elecMul = 0.8;\n            /*fragColor.x += 0.8*texture(iChannel2, screenUV).y;\n            fragColor.y += 0.8*texture(iChannel2, screenUV).x;\n            fragColor.z += 0.8*texture(iChannel2, screenUV).z;*/\n            fragColor += 0.4*texture(iChannel2, screenUV);\n            }\n        }\n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(currentPos, viewVec, cylNormal, CYL_R1, CYL_HEIGHT1);\n        if (cylT < t) {\n            t = cylT;\n            iterationType = DIFFUSE;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cylNormal;\n        }\n        vec3 cy2Normal = normal;\n        float cy2T = traceCylinder(currentPos, viewVec, cy2Normal, CYL_R2, CYL_HEIGHT2);\n        if (cy2T < t) {\n            t = cy2T;\n            iterationType = DIFFUSE;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cy2Normal;\n        }\n        vec3 cy3Normal = normal;\n        float cy3T = traceCylinder(currentPos, viewVec, cy3Normal, CYL_R3, CYL_HEIGHT3);\n        if (cy3T < t) {\n            t = cy3T;\n            iterationType = DIFFUSE;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cy3Normal;\n        }\n        float floorT = (-1.5 - currentPos.y) / viewVec.y;\n        if (floorT > 0.0 && floorT < t && length(currentPos + floorT * viewVec) < 12.0f) {\n            t = floorT;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel1, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            iterationType = DIFFUSE;\n        }\n        if (t != INF) {\n            if (iterationType == EMISSION) {\n                fragColor.rgb = color*mult;\n                break;\n            } else if (iterationType == DIFFUSE) {\n                fragColor.rgb += mult * computeLighting(currentPos-SPHERE_POS + t * viewVec, color, normal, viewVec);\n                break;\n            } else if (iterationType == REFRACTION) {\n                currentPos += viewVec * t;\n                viewVec = refraction(viewVec, normal, curN, nextN);\n                currentPos += viewVec * 1e-6;\n                vec4 fog = sampleFog(currentPos-SPHERE_POS, viewVec);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                fragColor += mult*texture(iChannel2, screenUV);\n                mult *= 1.0 - fog.a;\n                float tmp = curN;\n                curN = nextN;\n                nextN = tmp;\n            } else if (iterationType == REFLECTION) {\n                currentPos += viewVec * t;\n                fragColor.rgb += mult * computeLighting(currentPos-SPHERE_POS + t * viewVec, color, normal, viewVec);\n                viewVec = reflect(viewVec, normal);\n                currentPos += viewVec * 1e-5;\n                }\n        } else {\n            fragColor += mult*texture(iChannel0, viewVec)*0.7;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) + texture(iChannel1, screenUV);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n#define UVSCALE 7.0\n\n#define AA(v) abs(fract(v) - 0.5)\n\n#define CCD 0.001\n#define CC(v) clamp(floor(v + CCD), 0.0, 1.0)\n\nvec2 getpos(vec2 uv)\n{\n    uv = UVSCALE * (uv / iResolution.xy);\n    float aspect = iResolution.x / iResolution.y;\n  \tvec2 ratio = vec2(aspect, 1.0);\n  \treturn (2.0 * uv - 1.0) * ratio;\n}\n\n// http://madebyevan.com/shaders/grid/\n#define AAG(v) abs(fract(v - 0.5) - 0.5) / fwidth(v)\nfloat grid(vec2 xy)\n{\n    vec2 gridLines = AAG(xy);\n    return 1.0 - min(gridLines.x, gridLines.y);\n}\n\nfloat checkerboard(vec2 xy)\n{\n    const float scalar = 0.25;\n    vec2 xyMod = mod(xy * scalar, 1.0);\n    return float((xyMod.x < 0.5f) ^^ (xyMod.y < 0.5f));\n}\n\n// must be >= 2.0, change to modify the spacing between some of the spaced out line calls\n#define MODP 3.0\n\nfloat lightningNoise(vec2 detailPos, vec2 detailPos2, vec2 shapePos)\n{\n    const float offsetScalar = 0.91; // chaos factor\n    const float offsetScalar2 = 0.213; // detail factor\n    const float noiseMultiplier = 1.0;\n    \n    float t = iTime * 4.0;\n    float t2 = t * 1.646579370;\n    \n    // detail #1 noise offset func\n    vec2 noiseXY = AA(((detailPos + t)));\n    float noiseZ = AA(detailPos.y - t2 + noiseXY.x);\n    vec2 offset = vec2(noiseZ, noiseXY.x + noiseXY.y);\n    \n    // modify shape pos by detail #1 noise offset\n    shapePos += (offset * offsetScalar);\n    \n    // detail #2 noise offset func\n    noiseXY = AA(((detailPos2 - t2)));\n    noiseZ = AA(detailPos2.y - t2 + noiseXY.y);\n    offset = vec2(noiseXY.x + noiseXY.y, noiseZ);\n    \n    // modify shape pos by detail #2 noise offset\n    shapePos += (offset * offsetScalar2);\n    \n    // shape pos noise func, swap the x and y for horizontal lightning\n    noiseZ = AA((shapePos.x) + AA((shapePos.y)));\n    \n    // diagonal lightning\n    //noiseZ = AA((shapePos.x) + ((shapePos.y)));\n    \n    return noiseZ * noiseMultiplier;\n}\n\n// simple fbm test with two positions in a loop that are scaled\nfloat lightningNoiseFBM(vec2 p)\n{\n    p *= 0.15;\n\n    const float intensity = 10.0;\n    const float power = 4.0;\n    const float detailScalar = 0.46213;\n    const float detail2Scalar = 1.96213;\n    const float shapeScalar = 1.06213;\n    const float decay = 0.3;\n    float amplitude = 0.8;    \n    float noise = 0.0;\n    vec2 detailPos = p;\n    vec2 detailPos2 = p;\n    vec2 shapePos = p;\n    \n    for (int i = 0; i < 5; i++)\n    {\n        detailPos *= detailScalar;\n        detailPos2 *= detail2Scalar;\n        shapePos *= shapeScalar;\n        \n\t\tnoise += (lightningNoise(detailPos, detailPos2, shapePos) * amplitude);\n\n        amplitude *= decay;\n    }\n    \n    return min(1.0, intensity * pow(noise, power));\n}\n\nvec4 lightningShader(vec2 p)\n{\n    float noise = lightningNoiseFBM(p);\n    vec3 color3 = mix(vec3(0.2, 0.4, 0.8), vec3(1.0, 1.0, 1.0), noise);\n    return vec4(color3 * noise, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat color = 0.0;\n    vec2 p = getpos(fragCoord*2.3);\n    vec2 copy = p;\n    p.x = 1.2*copy.y+0.7*copy.x;\n    p.y = 1.1*copy.x+0.1*copy.y;\n    fragColor += 0.4*lightningShader(p*1.9);\n    p.x = 1.2*copy.x+0.55*copy.y;\n    p.y = 0.7*copy.y+0.35*copy.x;\n    fragColor += 0.3*lightningShader(p*2.3);\n    p.x = 0.55*copy.x+0.1*copy.y;\n    p.y = copy.y+0.2*copy.x;\n    fragColor += 0.45*lightningShader(p*2.5);\n    p.x = 0.3*copy.y+0.6*copy.x;\n    p.y = 0.2*copy.x+0.11*copy.y;\n    fragColor += 0.2*lightningShader(p*3.5);\n    return;\n    \n    // line testing functions...\n    \n\tfloat ax = AA(p.x); // anti alias\n\tfloat ay = AA(p.y);\n\tfloat sx = sin(p.x); // sin\n\tfloat sy = sin(p.y);\n    float asx = max(0.0, sx); // sin max of 0\n    float asy = max(0.0, sy); // \n    float mx = mod(p.x, MODP); // mod of p\n    float my = mod(p.y, MODP);\n    float _max = mod(p.x + ay, MODP); // mod of p + aa\n    float may = mod(p.y + ax, MODP);\n    float msx = mod(p.x + sy, MODP); // mod of p + sin\n    float msy = mod(p.y + sx, MODP);\n    float mxl = float(mx >= 0.5 && mx < 1.5); // if mod within a range (to spread out lines)\n    float myl = float(my >= 0.5 && my < 1.5);\n    float maxl = float(_max >= 0.5 && _max < 1.5); // if mod within a range (to spread out lines)\n    float mayl = float(may >= 0.5 && may < 1.5);\n    float msxl = float(msx >= 0.5 && msx < 1.5); // if mod within a range with sin (to spread out curved lines)\n    float msyl = float(msy >= 0.5 && msy < 1.5);\n    \n    \n\tfragColor = vec4(color, color, color, 1.0);\n}\n","name":"Buffer C","description":"","type":"buffer"}]}