{"ver":"0.1","info":{"id":"XfjBWV","date":"1725527790","viewed":60,"name":"Fractal Brownian Motion By RikR","username":"rikr","description":"Finally liked my noise shaders enough to expand one into fbm that is free to use for anyone (CC0). Made by Rik Riesmeijer, 2024 - No rights reserved.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal","noise","fbm","brownian","monochrome","motion","cc0","copyrightfree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fractal Brownian Motion, Made By Rik Riesmeijer, 2024 - CC0 / Copyright free.\n// See my other noises and shaders for my weird rotation formula...\nfloat n(vec2 v){ uvec2 u=uvec2(v*3e4+v.y+1e8); return vec2(u.yx*=u^=u*u).x/43e8; }\nfloat w(float x) { return fract(x) * fract(-x) * sign(fract(x * 0.5) - 0.5); }\nfloat s(float x) { return -4.0 * w(x / 3.1415); }\nfloat c(float x) { return s(x - 1.5775); }\nvec2  r(vec2 v, float a) { \n    float cs = c(a), sn = s(a);\n    return mat2(cs, -sn, sn, cs) * v;\n}\nfloat fbm(vec2 v, float time) {\n    vec2 vs; float res, fi, si;\n    for(int i = 0; i++ < 6;) {\n        v = r(v, 0.4 + time);\n        fi = float(i);\n        si = exp2(fi + 1.0);\n        vs = si * v;\n        vec4 b = vec4(floor(vs), ceil(vs));\n        vec2 f = smoothstep(0.0, 1.0, fract(vs));\n        float m = mix(mix(n(b.xy), n(b.zy), f.x),\n                      mix(n(b.xw), n(b.zw), f.x), f.y);\n        res = res + 1.0 / si * m / (1.0 - 2.0 / si);\n    }\n    return res;\n}\n\nvoid mainImage(out vec4 c, vec2 v) { // Demo of the FBM monochromatically shown.\n    v = v - 0.5 * iResolution.xy;    // Rotation ideally is centered around origin.\n    v = v * iResolution.y / 23e4;    // Normalize the aspect ratio.\n    c = vec4(fbm(v, iTime * 0.3));   // Show color.\n}                                    // End of demo.","name":"Image","description":"","type":"image"}]}