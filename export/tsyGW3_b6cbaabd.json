{"ver":"0.1","info":{"id":"tsyGW3","date":"1571755701","viewed":118,"name":"Solar wind around planet","username":"dyuri","description":"solar wind distortion","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["planet","solarwind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltXGDf","filepath":"https://soundcloud.com/fullspectrum/black-sun-empire-dawn","previewfilepath":"https://soundcloud.com/fullspectrum/black-sun-empire-dawn","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R .4\n#define PI 3.1415927\n#define SPEED 1.2\n#define DIST .25\n#define GLOW 1.9\n#define ROTSPEED .02\n#define LAYERS 20.\n#define PHI - PI / 9.\n#define BARS 32.\n#define SS(a,b,t) smoothstep(a,b,t)\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat speed(float x) {\n    x *= BARS;\n    x = fract(floor(abs(x)) / BARS);\n\treturn SPEED + (pow(texture(iChannel0, vec2(x, .25)).r, 3.) - .5);\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Value Noise by Inigo Quilez - iq\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat windTexture(vec3 uvw, float speed) {\n\t/*\n    return texture(iChannel0,\n        uvw.xy /\n            (1. + uvw.z) + // the nearer the less dense\n        vec2(uvw.z + iTime * SPEED * .5 * uvw.z, // the nearer the quicker\n            uvw.z)).r;\n\t*/\n    vec2 st = vec2(\n        uvw.xy /\n        \t(1. + uvw.z) +\n        vec2(uvw.z + iTime * speed * .5 * (uvw.z + .1),\n             uvw.z)) * 72.;\n    \n    return pow(noise(st) * 3.2, 2.);\n}\n\nfloat wind(vec3 uvw) {\n    float col = 0.;\n    float dist = length(uvw);\n    float circle = SS(-.02, .01, 1. - dist);\n\n    // rotate\n    uvw.xy = uvw.xy * rotate2d(PHI);\n    \n    // glow\n    float d = max(0., DIST - max(0., dist - 1.)) / DIST;\n    float gx = max(0.2, uvw.x);\n    float glowspeed = speed(uvw.y);\n    \n    // \"around\" planet\n    uvw -= d * normalize(uvw) * .5;\n    uvw.y *= 1. + \n        SS(0., 1. + abs(uvw.z) / R, max(0., -uvw.x * dist)) + // after\n        SS(0., .3 + abs(uvw.z) / R, max(0., uvw.x * dist)); // before\n    \n    col = SS(.1, 1., windTexture(uvw, SPEED)) *\n        (1. - circle); // don't draw into the planet\n\t\n    return (1. + d * gx * GLOW * glowspeed) * col + d * gx * gx * GLOW * glowspeed;\n}\n\nvec3 planet(vec2 uv, float wcol, float speed) {\n    vec3 uvw = vec3(uv, sqrt(1. - dot(uv, uv)));\n\n    // \"hot air\"\n    vec2 hot = vec2(-cos(PHI), sin(PHI)) * (wcol - .5) * speed * .1;\n\t\n    vec2 longLat = vec2(\n        (atan(uvw.x, uvw.z) / PI + 1.0) * 0.5,\n        (asin(uvw.y) / PI + 0.5)\n    );\n    \n    vec4 surface = \n        sqrt(uvw.z) * // sphere\n        texture(iChannel1, longLat - hot + ROTSPEED * vec2(iTime, 0.)) * // sphere mapped texture\n\t\tmax(.2, ((cos(-PHI) * uvw.x + .5) + (sin(-PHI) * uvw.y + .5) + uvw.z) / 2.); // sun direction\n        \n   \treturn surface.rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates (0, 0 in the center)\n    vec2 uv = fragCoord.xy / iResolution.xy -.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv = uv / R;\n    \n    vec3 uvw = vec3(0.);\n    float wcol = 0.;\n    \n    for (float w = 0.01; w < 1.5; w += 1.5 / LAYERS) {\n    \tuvw = vec3(uv, w);\n    \twcol += wind(uvw) / LAYERS;\n    }\n    \n    // TODO\n    // - wind color\n    \n    vec3 col = vec3(wcol * 1.2, wcol * wcol, wcol * wcol * wcol * .8) + max(vec3(0.), .5 * planet(uv, wcol, SPEED));\n    \n    float vignette = min(.4 * (3.2 - length(uv)), 1.);\n        \n    fragColor = vec4(vignette * col, 1.);\n}","name":"Image","description":"","type":"image"}]}