{"ver":"0.1","info":{"id":"MsKGR3","date":"1455736123","viewed":468,"name":"walkable character - WASD keys ","username":"MMGS","description":"*Modified* Space for jump , mouse rotate camera\nCamera is stationary and trying to focus on the character, might appear strange sometimes. Sorry for the mess the code is in","likes":12,"published":1,"flags":112,"usePreview":0,"tags":["model","control","character","walk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MsX3WN","filepath":"https://soundcloud.com/musicforpeople/super-mario-64-main-theme-music-bob-omb-battlefield","previewfilepath":"https://soundcloud.com/musicforpeople/super-mario-64-main-theme-music-bob-omb-battlefield","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// madeBy@MMGS 2016\n\nconst vec4 velAngle    = vec4(0.0,1.0,13.0,12.0);\nconst vec2 timers  = vec2(1.0,0.0);\n\n\n//----------------------------------------------------------------------------------------------\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX, in vec4 velangle )\n{\n   float an = 3.1+iMouse.x*0.1;\n\tcamPos = vec3(6.5*sin(an),10.0,6.5*cos(an))-vec3(velangle.x,0.0,velangle.y);\n    camTar = vec3(-velangle.x,2.0,-velangle.y);\n}\n\nvec3 doBackground( vec3 rd)\n{\n    return vec3(0,0,0.5);\n}\n    \nfloat sMin( float a, float b )\n{\n    float k = .12;\n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\n//functions that build rotation matrixes\nmat2 rotate_2D(float a){float sa = sin(a); float ca = cos(a); return mat2(ca,sa,-sa,ca);}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    \n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nvec2 doModel( vec3 p,vec4 velangle )\n{\n  vec3 porg=p;\n     float id;\n     //   p.xz += velangle.xy;\n//    p = p*rotate_y(velangle.w+0.2);\n\n    float scene[1]; //array to hold scene objects\n    float s,s1,s2;\n   float speed=0.001;\n    speed+=velangle.z*55.;\n\tif(velangle.z>0.5)speed=velangle.z*55.;\n    \n   s = length(p.y)-2.5;\n    //if(length(p.xz)< 5.0)\n   // s=min(s,p.y+1.35);\n      scene[0]=s;\n      //////SORT OBJECTS\n    float test=9999.0;  //return closest object in scene\n    for(int i=0;i<1;i++){\n        float test2=scene[i];\n        if(test2<test)test=test2;\n    }\n    \n    \n    if(test == scene[0])id=1.0;\n   /* if(test == scene[1])id=1.0;\n    if(test == scene[2])id=1.0;\n    if(test == scene[3])id=1.0;\n    if(test == scene[4])id=1.0;\n    if(test == scene[5])id=1.0;\n    if(test == scene[6])id=1.0;\n    if(test == scene[7])id=2.0;\n\tif(test == scene[8])id=5.0;\n    if(test == scene[9])id=5.0;\n    if(test == scene[10])id=4.0;\n    if(test == scene[11])id=3.0;\n    if(test == scene[12])id=3.0;\n     if(test == scene[13])id=2.0;\n     if(test == scene[15])id=1.0;*/\n    return vec2(s,id);\n}\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\nvec3 appleColor( in vec3 pos, in vec3 nor, out vec2 spe )\n{\n    spe.x = 1.0;\n    spe.y = 1.0;\n\n    float a = atan(pos.x,pos.z);\n    float r = length(pos.xz);\n\n    // red\n    vec3 col = vec3(2.0,0.0,0.0);\n\n    // green\n    float f = smoothstep( 0.1, 1.0, fbm(pos*1.0) );\n    col = mix( col, vec3(0.8,1.0,0.2), f );\n\n    // dirty\n    f = smoothstep( 0.0, 1.0, fbm(pos*4.0) );\n    col *= 0.8+0.2*f;\n\n    // frekles\n    f = smoothstep( 0.0, 1.0, fbm(pos*48.0) );\n    f = smoothstep( 0.7,0.9,f);\n    col = mix( col, vec3(0.9,0.9,0.6), f*0.5 );\n\n    // stripes\n    f = fbm( vec3(a*7.0 + pos.z,3.0*pos.y,pos.x)*2.0);\n    f = smoothstep( 0.2,1.0,f);\n    f *= smoothstep(0.4,1.2,pos.y + 0.75*(noise(4.0*pos.zyx)-0.5) );\n    col = mix( col, vec3(0.4,0.2,0.0), 0.5*f );\n    spe.x *= 1.0-0.35*f;\n    spe.y = 1.0-0.5*f;\n\n    // top\n    f = 1.0-smoothstep( 0.14, 0.2, r );\n    col = mix( col, vec3(0.6,0.6,0.5), f );\n    spe.x *= 1.0-f;\n\n\n    float ao = 0.5 + 0.5*nor.y;\n    col *= ao*1.;\n\n    return col;\n}\nvec3 doMaterial( in vec3 pos, in vec3 nor,vec2 obj )\n{\n    vec3 col = vec3(0.2,0.25,0.2);\n     vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float spec = pow(clamp(dot(lig,nor),0.0,1.),6.0);\n   \n    vec2 apl;\n    \n    if(obj.y==1.) col =  vec3(0.1,0.7,0.1)*appleColor(pos,nor, apl );\n    if(obj.y==2.) col = vec3(0.4,0,0);\n    if(obj.y==3.) col =  vec3(0,0,0)+spec*0.1;\n    if(obj.y==4.) col =  vec3(155./255.,103./255.,43./255.)*appleColor(nor,nor, apl )*0.3;\n    if(obj.y==5.) col =  vec3(0.27);\n    if(obj.y==6.) col = texture(iChannel1,pos.xz*1.5+0.5 ).xyz*0.5;\n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd ,in vec4 velangle);\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal,in vec4 velangle )\n{\n    vec3 lin = vec3(0.);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig,velangle );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.001*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd,in vec4 velangle,in vec2 uv )\n{\n    float maxd;\n   // if(length(uv)-0.3 <0.) //performance hack\n\t// maxd = 50.0;           // max trace distance\n    maxd = 80.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.5;\n\tfloat res = -1.0;\n    for( int i=0; i<55; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t,velangle ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos,in vec4 velangle )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps,velangle ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ,velangle).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ,velangle).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ,velangle).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd,in vec4 velangle )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<0; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t,velangle).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n       //------------------------\n    // load game state\n    //------------------------\n    vec4  velangle   = texture( iChannel0, (velAngle.xy+0.5)/iChannelResolution[0].xy );\n     float timer = loadValue( timers ).x;\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x ,velangle);\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,1.8) ); // 2.0 is the lens length\n\n   \n    \n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(rd);\n    vec3 bufB = texture(iChannel2,fragCoord.xy/iResolution.xy).xyz;\n\t// raymarch\n    float t = calcIntersection( ro, rd,velangle, p );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos,velangle);\n\t\t\n        vec2 obj = doModel(pos,velangle);\n        // materials\n       vec3 mal = doMaterial( pos, nor, obj );\n        col = mal;// doLighting( pos, nor, rd, t, mal,velangle );\n\t}\n    \n    \n    if(bufB.x>0.)col = bufB;\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t //  if(col.x<0.01)col=doBackground(rd); //fix visual on performance hack\n  \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// storage register/texel addresses\nconst vec4 velAngle    = vec4(0.0,1.0,13.0,12.0);\nconst vec2 timers  = vec2(1.0,0.0);\n\n//----------------------------------------------------------------------------------------------\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\n//----------------------------------------------------------------------------------------------\n\n\n\n\n// keys are javascript keycode: http://www.webonweboff.com/tips/js/event_key_codes.aspx\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90; const int Key_Spc = 32;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\n\n\nbool ReadKey( int key )//, bool toggle )\n{\n\tbool toggle = false;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n      // don't compute gameplay outside of the data area\n    if( fragCoord.x > 14.0 || fragCoord.y>14.0 ) discard;\n       //---------------------------------------------------------------------------------   \n\t// load game state\n\t//---------------------------------------------------------------------------------\n    vec4  velangle = loadValue( velAngle.xy );\n    float timer = loadValue( timers ).x;\n    float jumpheight = loadValue( timers ).y;\n    float velY = loadValue( timers ).z;\n    float timeY = loadValue( timers ).w;\n     \n   // vec2 oldpos = loadValue( oldPos ).xy;\n    bool mouse;\n    float vel=velangle.z;\n    float deg =  (180.*(velangle.w/3.1415) );\n      if(iMouse.z>0.)mouse=true;\n    \n    ///////rect//////////\n    vec2 pivot = vec2(0.,0.);//pivot\n    vec2 pos = vec2(0.,0.);\n    vec2 size = vec2(.1,.05);\n    float angle;\n    vec2 grav = vec2(0,-9.81);\n   \n    float gravtimer;  //not really gravity anymore\n    \n    if(iFrame==0){deg= 90.;gravtimer=0.;vel=.0;}\n    \n    gravtimer=timer+iTimeDelta*0.001;\n   \n    if(ReadKey(Key_W))\n    {\n     \n      vel +=0.001+gravtimer*0.5;\n \t\n    }else  if(!ReadKey(Key_W)&&vel>0.){ vel-=.001+vel*0.001;gravtimer*=0.;}\n    \n    if(vel<=0.){vel =.0;gravtimer=0.;}\n\n    if(ReadKey(Key_D))\n    {\n     deg +=2.5;\n    }\n     if(ReadKey(Key_A))\n    { \n     deg -=2.5;\n    }\n     \n        angle = (deg*3.1415)/180.;\n      pos.x+=velangle.x+cos(angle)*vel;\n       pos.y+=velangle.y+sin(angle)*vel;\n    \n     if(velY<=0.){jumpheight=0.;timeY=0.;}\n     if(ReadKey(Key_Spc) && timeY<0.15) jumpheight += 0.6;\n    \n    velY=jumpheight;\n\n     timeY+=iTimeDelta;\n   \tvelY = (jumpheight) - timeY*timeY*20.;\n\n  //---------------------------------------------------------------------------------\n\t// store game state\n\t//---------------------------------------------------------------------------------\n    fragColor = vec4(0.0);\n  \n    storeValue( velAngle, vec4(pos,vel,angle),             fragColor, fragCoord );\n   storeValue( timers,  vec4(gravtimer,jumpheight,velY,timeY), fragColor, fragCoord );\n    // storeValue( oldPos,  vec4(oldpos,0.0,0.0), fragColor, fragCoord );\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// madeBy@MMGS 2016\n\nconst vec4 velAngle    = vec4(0.0,1.0,13.0,12.0);\nconst vec2 timers  = vec2(1.0,0.0);\n\n\n//----------------------------------------------------------------------------------------------\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n     vec4  velangle   = texture( iChannel0, (velAngle.xy+0.5)/iChannelResolution[0].xy );\n float an = 3.1+iMouse.x*0.1;\n\tcamPos = vec3(6.5*sin(an),10.0,6.5*cos(an))-vec3(velangle.x,0.0,velangle.y);\n    camTar = vec3(-velangle.x,-2.,-velangle.y);\n}\n\nvec3 doBackground( vec3 rd)\n{\n    return vec3(0,0,0);\n}\n    \nfloat sMin( float a, float b )\n{\n    float k = .12;\n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\n//functions that build rotation matrixes\nmat2 rotate_2D(float a){float sa = sin(a); float ca = cos(a); return mat2(ca,sa,-sa,ca);}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    \n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nvec2 doModel( vec3 p)\n{\n    float velY = loadValue( timers ).z;\n     vec4  velangle   = texture( iChannel0, (velAngle.xy+0.5)/iChannelResolution[0].xy );\n  vec3 porg=p;\n     float id;\n        p.xz += velangle.xy;\n    \tif(velY>0.)p.y -=velY;\n    p = p*rotate_y(velangle.w+0.2);\n\n    float scene[19]; //array to hold scene objects\n    float s,s1,s2;\n   float speed=0.001;\n    speed+=velangle.z*200.;\n\tif(velangle.z>0.5)speed=velangle.z*200.;\n    \n    s=1.0;\n        for(int i=1;i<4;i++)\n    {\n        float walk =cos(0.1+p.y*3.+speed+p.y*5.)*0.03;\n        \n        p = p*rotate_z(cos(speed)*0.3);\n         s2 = length(p+vec3(.1+walk ,0.5+float(i)*0.2 -cos(speed)*0.1 -p.y*0.1 ,0.3) ) - .05+p.y*0.15;      \n        s=sMin(s,s2);scene[0] = s-0.01;\n        p = p*rotate_z(-cos(speed)*0.3);\n        \n\n        p = p*rotate_z(-cos(speed)*0.3);\n         s2 = length(p+vec3(.1+walk ,0.5+float(i)*0.2 -cos(speed)*0.1-p.y*0.1 ,-0.3) ) - .05+p.y*0.15;      \n        s=sMin(s,s2);scene[0] = s-0.01;\n        p = p*rotate_z(cos(speed)*0.3);\n      \n        \n       \n        //Left arm\n        p = p*rotate_z(-.8+cos(speed)*0.3);\n        float arm =cos(0.1+p.y*8.+speed+p.y*5.)*(0.01 - p.y*0.01);\n         p = p*rotate_x(-.8);\n         s2 = length(p+vec3(.2+arm ,  0.2+float(i)*0.2 -cos(speed)*0.02 ,-.25 ) ) - (.2+p.y*0.05);      \n        s=sMin(s,s2);scene[0] = s-0.01;\n         p = p*rotate_x(.8);\n           p = p*rotate_z(.8-cos(speed)*0.3);\n        \n            //right arm\n          p = p*rotate_z(-.8-cos(speed)*0.3);\n        arm =cos(0.1+p.y*8.+speed+p.y*5.)*(0.01 - p.y*0.01);\n         p = p*rotate_x(.8);\n        s2 = length(p+vec3(.2-arm ,  0.2+float(i)*0.2 -cos(speed)*0.02 ,.25 ) ) - (.2+p.y*0.05);      \n        s=sMin(s,s2);scene[0] = s-0.01;\n         p = p*rotate_x(-.8);\n          p = p*rotate_z(.8+cos(speed)*0.3);\n        \n    }\n\n      p = p*rotate_x(-.1+cos(speed)*0.05);\n    \n      p.x+=0.15;\n    p.y-=0.6;\n       //nose\n        s2 = length(p+vec3(0.35,0,0) ) - .32;\n         s=sMin(s,s2);scene[1] = sMin(s,s2);\n    \n       for(int i=0;i<2;i++)\n    {\n          float iter = float(i)*0.022;\n\n      s2 = length(p+vec3(.65-iter*2.,-0.1,0.1) ) - .035;\n         s=max(s,-s2);scene[2] = s+0.1;\n          s2 = length(p+vec3(.65-iter*2.,-0.1,-0.1) ) - .035;\n         s=max(s,-s2);scene[2] = s+0.1;\n     \n    }\n    //cheek\n      s2 = length(p+vec3(0.1,-0.1,0.3) ) - (.25+p.x*0.3 - p.z*0.1);\n         s=sMin(s,s2);scene[3] = sMin(s,s2);\n  \n     s2 = length(p+vec3(0.1,-0.1,-0.3) ) - (.25+p.x*0.3 + p.z*0.1);\n         s=sMin(s,s2);scene[4] = sMin(s,s2);\n    //eyesockets\n     s2 = length(p+vec3(0.1,-0.4,0.15) ) - .25;\n         s=sMin(s,s2);scene[5] =sMin(s,s2);\n      s2 = length(p+vec3(0.1,-0.4,-0.15) ) - .25;\n         s=sMin(s,s2);scene[6] =sMin(s,s2);\n   \n    //eyes\n       s2 = length(p+vec3(0.15,-0.4,0.15) ) - .2;\n         s=sMin(s,s2);scene[8] =sMin(s,s2);\n      s2 = length(p+vec3(0.15,-0.4,-0.15) ) - .2;\n         s=sMin(s,s2);scene[9] =sMin(s,s2);\n   //  p.z-=cos(iTime)*0.1;\n    \n \n       s2 = length(p+vec3(0.35,-0.4,0.15) ) - .02;\n         s=sMin(s,s2);scene[11] =sMin(s,s2);\n      s2 = length(p+vec3(0.35,-0.4,-0.15) ) - .02;\n         s=sMin(s,s2);scene[12] =sMin(s,s2);\n    \n       p.y+=0.6;\n          //body\n        s2 = length(p+vec3(0.,0.5,0) ) - .5;\n         s=sMin(s,s2);scene[13] = sMin(s,s2);\n\t\t  //body\n        s2 = length(p+vec3(0.,0.1,0) ) - .4;\n         s=sMin(s,s2);scene[14] = sMin(s,s2);\n    \n      //neck\n        s2 = length(p+vec3(0.,-0.5,0) ) - (.2+p.y*0.3);\n         s=sMin(s,s2);scene[15] = sMin(s,s2);\n     p=porg;\n    \n\n    \n      //////SORT OBJECTS\n    float test=9999.0;  //return closest object in scene\n    for(int i=0;i<16;i++){\n        float test2=scene[i];\n        if(test2<test)test=test2;\n    }\n    \n    \n    if(test == scene[0])id=1.0;\n    if(test == scene[1])id=1.0;\n    if(test == scene[2])id=1.0;\n    if(test == scene[3])id=1.0;\n    if(test == scene[4])id=1.0;\n    if(test == scene[5])id=1.0;\n    if(test == scene[6])id=1.0;\n    if(test == scene[7])id=2.0;\n\tif(test == scene[8])id=5.0;\n    if(test == scene[9])id=5.0;\n    if(test == scene[10])id=4.0;\n    if(test == scene[11])id=3.0;\n    if(test == scene[12])id=3.0;\n     if(test == scene[13])id=2.0;\n     if(test == scene[15])id=1.0;\n    return vec2(s,id);\n}\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\nvec3 appleColor( in vec3 pos, in vec3 nor, out vec2 spe )\n{\n    spe.x = 1.0;\n    spe.y = 1.0;\n\n    float a = atan(pos.x,pos.z);\n    float r = length(pos.xz);\n\n    // red\n    vec3 col = vec3(2.0,0.0,0.0);\n\n    // green\n    float f = smoothstep( 0.1, 1.0, fbm(pos*1.0) );\n    col = mix( col, vec3(0.8,1.0,0.2), f );\n\n    // dirty\n    f = smoothstep( 0.0, 1.0, fbm(pos*4.0) );\n    col *= 0.8+0.2*f;\n\n    // frekles\n    f = smoothstep( 0.0, 1.0, fbm(pos*48.0) );\n    f = smoothstep( 0.7,0.9,f);\n    col = mix( col, vec3(0.9,0.9,0.6), f*0.5 );\n\n    // stripes\n    f = fbm( vec3(a*7.0 + pos.z,3.0*pos.y,pos.x)*2.0);\n    f = smoothstep( 0.2,1.0,f);\n    f *= smoothstep(0.4,1.2,pos.y + 0.75*(noise(4.0*pos.zyx)-0.5) );\n    col = mix( col, vec3(0.4,0.2,0.0), 0.5*f );\n    spe.x *= 1.0-0.35*f;\n    spe.y = 1.0-0.5*f;\n\n    // top\n    f = 1.0-smoothstep( 0.14, 0.2, r );\n    col = mix( col, vec3(0.6,0.6,0.5), f );\n    spe.x *= 1.0-f;\n\n\n    float ao = 0.5 + 0.5*nor.y;\n    col *= ao*1.;\n\n    return col;\n}\nvec3 doMaterial( in vec3 pos, in vec3 nor,vec2 obj )\n{\n    vec3 col = vec3(0.2,0.25,0.2);\n     vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float spec = pow(clamp(dot(lig,nor),0.0,1.),6.0);\n   \n    vec2 apl;\n    \n    if(obj.y==1.) col =  vec3(0.1,0.7,0.1)*appleColor(nor,nor, apl );\n    if(obj.y==2.) col = vec3(0.4,0,0);\n    if(obj.y==3.) col =  vec3(0.01,0,0.5)+spec*0.1;\n    if(obj.y==4.) col =  vec3(155./255.,103./255.,43./255.)*appleColor(pos,nor, apl )*0.3;\n    if(obj.y==5.) col =  vec3(0.27);\n    if(obj.y==6.) col = texture(iChannel1,pos.xz*1.5+0.5 ).xyz*0.5;\n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.001*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd,in vec2 uv )\n{\n    float maxd;\n    uv.y*=.5;uv.x*=1.5;\n    if(length(uv)-.8 <0.) //performance hack\n\t maxd = 20.0;           // max trace distance\n    else maxd = 1.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0005;\n\tfloat res = -1.0;\n    for( int i=0; i<45; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<0; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,1.8) ); // 2.0 is the lens length\n\n   \n    \n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(rd);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd, p );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\t\n        vec2 obj = doModel(pos);\n        // materials\n       vec3 mal = doMaterial( pos, nor, obj );\n\t\t//vec3 obj = doModel(p);\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   if(col.x<=0.0)col=doBackground(rd); //fix visual on performance hack\n    fragColor = vec4( col, 1.0 );\n}","name":"Buf B","description":"","type":"buffer"}]}