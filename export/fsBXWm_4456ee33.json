{"ver":"0.1","info":{"id":"fsBXWm","date":"1620322627","viewed":164,"name":"20210507_palette","username":"FMS_Cat","description":"pol","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["palette","effects"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Do a dithered quantization using a palette\n// Cheating: Skovbo Johansen's Gradient Band interpolation for palette interpolation ????\n// Kinda bluteforce method but is working surprisingly fine.\n// ...poke me if you know a better method tbh\n// Ref: http://runevision.com/thesis/rune_skovbo_johansen_thesis.pdf\n// Ref: https://www.shadertoy.com/view/XlKXWR\n\n// #define NEAREST\n#define BAYER\n// #define BLUE\n\n#define saturate(i) clamp(i,0.,1.)\n\n#define PALETTE_COLORS 16\n\n// SWEETIE 16 - The palette by GrafxKid\n// The same one as TIC-80's builtin palette.\n// Ref: https://lospec.com/palette-list/sweetie-16\nconst vec3 palette[ PALETTE_COLORS ] = vec3[](\n    vec3( 0x1a, 0x1c, 0x2c ) / 255.0,\n    vec3( 0x5d, 0x27, 0x5d ) / 255.0,\n    vec3( 0xb1, 0x3d, 0x53 ) / 255.0,\n    vec3( 0xef, 0x7d, 0x57 ) / 255.0,\n\n    vec3( 0xff, 0xcd, 0x75 ) / 255.0,\n    vec3( 0xa7, 0xf0, 0x70 ) / 255.0,\n    vec3( 0x38, 0xb7, 0x64 ) / 255.0,\n    vec3( 0x25, 0x71, 0x79 ) / 255.0,\n\n    vec3( 0x29, 0x36, 0x6f ) / 255.0,\n    vec3( 0x3b, 0x5d, 0xc9 ) / 255.0,\n    vec3( 0x41, 0xa6, 0xf6 ) / 255.0,\n    vec3( 0x73, 0xef, 0xf7 ) / 255.0,\n\n    vec3( 0xf4, 0xf4, 0xf4 ) / 255.0,\n    vec3( 0x94, 0xb0, 0xc2 ) / 255.0,\n    vec3( 0x56, 0x6c, 0x86 ) / 255.0,\n    vec3( 0x33, 0x3c, 0x57 ) / 255.0\n);\n\nvoid weightsCartesian( vec3 v, out float weights[ PALETTE_COLORS ] ) {\n    float weightSum = 0.0;\n\n    for ( int i = 0; i < PALETTE_COLORS; i ++ ) {\n        vec3 pali = palette[ i ];\n        vec3 vecic = v - pali;\n        \n        weights[ i ] = 1.0;\n        \n        for ( int j = 0; j < PALETTE_COLORS; j ++ ) {\n            if ( i == j ) { continue; }\n\n            vec3 palj = palette[ j ];\n            vec3 vecij = palj - pali;\n            \n            weights[ i ] = min(\n                weights[ i ],\n                saturate( 1.0 - dot( vecic, vecij ) / dot( vecij, vecij ) )\n            );\n        }\n        \n        weightSum += weights[ i ];\n    }\n    \n    for ( int i = 0; i < PALETTE_COLORS; i ++ ) {\n        weights[ i ] /= weightSum;\n    }\n}\n\nint getLargestIndex( in float weights[ PALETTE_COLORS ] ) {\n    float topWeight = 0.0;\n    int topIndex = 0;\n\n    for ( int i = 0; i < PALETTE_COLORS; i ++ ) {\n        float w = weights[ i ];\n        if ( topWeight < w ) {\n            topWeight = w;\n            topIndex = i;\n        }\n    }\n    \n    return topIndex;\n}\n\nint getDitheredIndex( in float weights[ PALETTE_COLORS ], float dither ) {\n    float skippedWeight = 0.0;\n\n    for ( int i = 0; i < PALETTE_COLORS; i ++ ) {\n        float w = weights[ i ];\n        if ( dither - skippedWeight < w ) {\n            return i;\n        }\n        skippedWeight += w;\n    }\n    \n    return PALETTE_COLORS - 1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 tex = texture( iChannel0, uv );\n\n    float weights[ PALETTE_COLORS ];\n    weightsCartesian( tex.rgb, weights );\n\n    vec3 col = vec3( 0.0 );\n\n#ifdef NEAREST\n    col = palette[ getLargestIndex( weights ) ];\n#endif\n\n#ifdef BAYER\n    float bayer = texture( iChannel1, fragCoord / 8.0 ).x;\n    col = palette[ getDitheredIndex( weights, bayer ) ];\n#endif\n\n#ifdef BLUE\n    float blue = texture( iChannel2, fragCoord / 1024.0 ).x;\n    col = palette[ getDitheredIndex( weights, blue ) ];\n#endif\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texture( iChannel0, fragCoord / iResolution.xy );\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// woofoo\n\n// PICO 8 - The palette by Lexaloffle Games\n// Spicy bright and vivid one\n// Ref: https://lospec.com/palette-list/pico-8\n// const vec3 palette[ PALETTE_COLORS ] = vec3[](\n//     vec3( 0x00, 0x00, 0x00 ) / 255.0,\n//     vec3( 0x1d, 0x2b, 0x53 ) / 255.0,\n//     vec3( 0x7e, 0x25, 0x53 ) / 255.0,\n//     vec3( 0x00, 0x87, 0x51 ) / 255.0,\n\n//     vec3( 0xab, 0x52, 0x36 ) / 255.0,\n//     vec3( 0x5f, 0x57, 0x4f ) / 255.0,\n//     vec3( 0xc2, 0xc3, 0xc7 ) / 255.0,\n//     vec3( 0xff, 0xf1, 0xe8 ) / 255.0,\n\n//     vec3( 0xff, 0x00, 0x4d ) / 255.0,\n//     vec3( 0xff, 0xa3, 0x00 ) / 255.0,\n//     vec3( 0xff, 0xec, 0x27 ) / 255.0,\n//     vec3( 0x00, 0xe4, 0x36 ) / 255.0,\n\n//     vec3( 0x29, 0xad, 0xff ) / 255.0,\n//     vec3( 0x83, 0x76, 0x9c ) / 255.0,\n//     vec3( 0xff, 0x77, 0xa8 ) / 255.0,\n//     vec3( 0xff, 0xcc, 0xaa ) / 255.0\n// );\n\n// OIL 6 - The palette by GrafxKid\n// Smells like dusk and dawn.\n// Ref: https://lospec.com/palette-list/oil-6\n// const vec3 palette[ PALETTE_COLORS ] = vec3[](\n//     vec3( 0xfb, 0xf5, 0xef ) / 255.0,\n//     vec3( 0xf2, 0xd3, 0xab ) / 255.0,\n//     vec3( 0xc6, 0x9f, 0xa5 ) / 255.0,\n\n//     vec3( 0x8b, 0x6d, 0x9c ) / 255.0,\n//     vec3( 0x49, 0x4d, 0x7e ) / 255.0,\n//     vec3( 0x27, 0x27, 0x44 ) / 255.0\n// );","name":"Common","description":"","type":"common"}]}