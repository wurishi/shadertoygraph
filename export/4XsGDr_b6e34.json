{"ver":"0.1","info":{"id":"4XsGDr","date":"1707361337","viewed":47,"name":"procedural brick","username":"ggoedert","description":"brick tutorial","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","brick"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BRICKWIDTH 0.25\n#define BRICKHEIGHT 0.08\n#define MORTARTHICKNESS 0.01\n#define BMWIDTH (BRICKWIDTH+MORTARTHICKNESS)\n#define BMHEIGHT (BRICKHEIGHT+MORTARTHICKNESS)\n#define MWF (MORTARTHICKNESS*0.5/BMWIDTH)\n#define MHF (MORTARTHICKNESS*0.5/BMHEIGHT)\n\nfloat Ka = 1.0;\nfloat Kd = 1.0;\nvec3 Cbrick = vec3 (0.5, 0.15, 0.14);\nvec3 Cmortar = vec3 (0.5, 0.5, 0.5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = fragCoord     / iResolution.xy;\n    float AR = iResolution.x / iResolution.y;\n    float s = (uv.x-0.5)*AR+0.5;\n    float t = 1.0-uv.y;\n    \n    vec3 Ct;\n    float ss, tt, sbrick, tbrick, w, h;\n    float scoord = s;\n    float tcoord = t;\n    \n    ss = scoord / BMWIDTH;\n    tt = tcoord / BMHEIGHT;\n    \n    if (mod(tt*0.5,1.0) > 0.5)\n    ss += 0.5; /* shift alternate rows */    \n    \n    sbrick = floor(ss); /* which brick? */\n    tbrick = floor(tt); /* which brick? */\n    ss -= sbrick;\n    tt -= tbrick;\n    \n    w = step(MWF,ss) - step(1.0-MWF,ss);\n    h = step(MHF,tt) - step(1.0-MHF,tt);\n    Ct = mix(Cmortar, Cbrick, w*h);\n\n    fragColor = vec4(Ct, 1.0);\t    \n}","name":"Image","description":"","type":"image"}]}