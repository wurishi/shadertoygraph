{"ver":"0.1","info":{"id":"ctX3zf","date":"1672115139","viewed":139,"name":"Ortho To Azimuthal Equidistant","username":"blendermf","description":"Ortho To Azimuthal equidistant projection","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    uv.x += (1. - aspect)*0.5;\n    \n    vec2 uvFromCenter = (uv - vec2(0.5,0.5));\n    float dist = length(uvFromCenter)*2.;\n    \n    vec2 newuv = (uvFromCenter * (sin(dist * PI / 2.) / dist)) + vec2(0.5,0.5);\n    vec4 col = texture(iChannel0, newuv);\n    vec4 col2 = texture(iChannel0, uv);\n   \n\n    if (dist < 1.) {\n            fragColor = col;\n    } else {\n        fragColor = vec4(0.,0.,0.,1.);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}