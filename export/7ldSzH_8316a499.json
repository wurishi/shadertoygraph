{"ver":"0.1","info":{"id":"7ldSzH","date":"1638751414","viewed":400,"name":"Fork Jump Flooding in 2Frame","username":"Carandiru","description":" coposuke original shader - https://www.shadertoy.com/view/7ttSzr\n\naddition of smin distance sampling of moore neighbourhood","likes":4,"published":3,"flags":48,"usePreview":0,"tags":["jump","flooding","jfa"],"hasliked":0,"parentid":"7ttSzr","parentname":"Jump Flooding in 2Frame"},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// coposuke original shader - https://www.shadertoy.com/view/7ttSzr\n\n// addition of smin distance sampling of moore neighbourhood\n\n#define SAMPS 31.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec2 best = vec2(0);\n    float d = 999999.999999f;\n    float shade = 0.0f;\n    float len = length(iResolution.xy);\n    \n    float cur_dist = distance(textureLod(iChannel0, uv, 0.0f).zw, uv) * len;\n    \n    float samps = 1.0f + SAMPS - SAMPS / (1.0f + cur_dist*cur_dist);\n    \n    vec2 dir;\n    for (dir.y = -samps; dir.y <= samps; dir.y += 1.0f) {\n        for (dir.x = -samps; dir.x <= samps; dir.x += 1.0f) {\n        \n                vec4 warp = textureLod(iChannel0, ((uv * iResolution.xy) + dir) / iResolution.xy, 0.0f);\n                float sampled_dist = distance(uv, warp.zw);\n               \n                float r = sampled_dist * len;\n                shade += 1.0f / (1.0f + r*r);\n                //d = smin(d, sampled_dist, HEURISTIC);\n                \n                best = mix(best, warp.zw, bvec2(sampled_dist < d));\n                d = min(d, sampled_dist);\n        }\n    }\n\n    vec3 color = vec3(shade);\n\n    color = pow(color, vec3(1.0f/2.2f));\n    fragColor = vec4(color, 1.0f);\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define HEURISTIC 0.07    //abs(cur_dist - sampled_dist)\n\nconst float FRAME = 13.0;\nconst float STEP = 7.0 + 1.0;\nconst float ITER = 3.0;\n\nfloat smin( in float a, in float b, in float k )\n{\n    float h = max( k-abs(a-b), 0.0f )/k;\n    return min( a, b ) - h*h*h*k*(1.0f/6.0f);\n}\n\nvec3 jumpFlooding_Compare(vec2 seed, vec2 self, vec2 currentSeed, float currentDist)\n{\n    float dist = distance(seed, self);\n\n    bool isEmpty = 0.0 == seed.x + seed.y;\n    bool isFarther = currentDist < dist;\n    \n    return vec3(mix(seed, currentSeed, bvec2(isEmpty || isFarther)), min(currentDist, dist));\n}\n\nvec3 jumpFlooding_XY(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec3 data = vec3(0.0, 0.0, 1e+5);\n    vec2 self = fragCoord / resolution.xy;\n\n    for(float x = -ITER; x <= ITER; x++)\n    {\n        for(float y = -ITER; y <= ITER; y++)\n        {\n            vec2 neighbor = fragCoord + vec2(x, y) * stepLength;\n            vec4 pointPosition = fract(texture(channel, (neighbor + 0.0) / resolution.xy));\n            data = jumpFlooding_Compare(pointPosition.xy, self, data.xy, data.z); // XY(x,y)\n        }\n    }\n\n    return data;\n}\n\nvec3 jumpFlooding_ZW(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec3 data = vec3(0.0, 0.0, 1e+5);\n    vec2 self = fragCoord / resolution.xy;\n\n    for(float x = -ITER; x <= ITER; x++)\n    {\n        for(float y = -ITER; y <= ITER; y++)\n        {\n            vec2 neighbor = fragCoord + vec2(x, y) * stepLength;\n            vec4 pointPosition = texture(channel, (neighbor + 0.0) / resolution.xy);\n            data = jumpFlooding_Compare(pointPosition.zw, self, data.xy, data.z); // ZW(x,y)\n        }\n    }\n\n    return data;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Jump Flooding : init A.xy\n//                 D.xy -> A.zw\n\nvec4 initialize_neko(in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv = uv * 0.5 + 0.5;\n    \n    float color = texture(iChannel3, uv).r;\n    color = step(color, 0.001);\n    //color = color * length(fragCoord / iResolution.xy);\n    return vec4(color);\n}\n\nvec4 initialize(in vec2 fragCoord)\n{\n    vec4 color = vec4(0);\n    color = texture(iChannel1, fragCoord / iResolution.xy);\n\n    // Input Keyboard\n    float RKey = texelFetch(iChannel2, ivec2(82, 0), 0).x; // R key\n    if(0.0 < RKey)\n    {\n        color = vec4(0.0);\n    }\n    \n    // Input Mouse\n    if(0.0 < iMouse.z)\n    {\n        float mouseDist = distance(iMouse.xy, fragCoord);\n        color.rg += vec2(step(mouseDist, 20.0));\n    }\n\n    vec2 mask = vec2(step(1e-5, color.r + color.g));\n    color.xy = mask * vec2(fragCoord / iResolution.xy) + floor(color.xy);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    \n    if(iFrame <= 20 || (iFrame % 240 == 0))\n        color.xy = initialize_neko(fragCoord + vec2(iFrame, 0)).xy;\n    else\n        color.xy = initialize(fragCoord).xy;\n\n    float stepLength = pow(2.0, STEP - 4.0);\n    color.zw = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Jump Flooding : A.xy -> B.xy\n//                 A.zw -> B.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 1.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 5.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Jump Flooding : B.xy -> C.xy\n//                 B.zw -> C.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 2.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 6.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 3.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 7.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}\n","name":"Buffer D","description":"","type":"buffer"}]}