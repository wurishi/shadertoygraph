{"ver":"0.1","info":{"id":"flSyRD","date":"1649236615","viewed":83,"name":"Shader 学习 010 - 一个简单的矩形","username":"Liuary","description":"一个简单的矩形","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 参考资料: https://www.youtube.com/watch?v=bigjgiavOM0&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=3&ab_channel=TheArtofCode\n\n// 画圆的函数，参数为 纹理坐标映射、偏移映射、圆半径、边缘模糊程度\nfloat Circle(vec2 uv, vec2 offset, float r, float blur)\n{\n    // 画圆并平滑处理\n    float d = length(uv + offset);\n    float c = smoothstep(r, r - blur, d);\n    return c;\n}\n\n// 绘制一个片段，参数为 uv的一个方向，绘制的起点，绘制的终点，模糊程度\nfloat Band(float t, float start, float end, float blur)\n{\n    float step1 = smoothstep(start - blur, start + blur, t);\n    float step2 = smoothstep(end + blur, end - blur, t);\n    \n    return step1 * step2;\n}\n\n// 绘制一个矩形，参数为 uv，左侧边缘，右侧边缘，顶部边缘，底部边缘，模糊程度\nfloat Rect(vec2 uv, float left, float right, float top, float buttom, float blur)\n{\n    // 水平方向上的 uv 绘制一个片段\n    float band1 = Band(uv.x, left, right, blur);\n    // 竖直方向上的 uv 绘制一个片段\n    float band2 = Band(uv.y, buttom, top, blur);\n    \n    // 取两个片段的交集    \n    return band1 * band2;\n}\n\n// 绘制一个笑脸，参数为：纹理坐标映射、偏移映射、笑脸缩放\nfloat Smiley(vec2 uv, vec2 offset, float size)\n{\n\n    // 位置偏移\n    uv += offset;\n    // 缩放\n    uv /= size;\n\n    // 蒙版（大圆）\n    float mask = Circle(uv, vec2(0.f), 0.4f, 0.01f);\n    // 减去两个眼眼睛（小圆）\n    mask -= Circle(uv, vec2(0.15f, -0.2f), 0.07f, 0.01f);\n    mask -= Circle(uv, vec2(-0.15f, -0.2f), 0.07f, 0.01f);\n\n    // 嘴巴，两个圆相减并限制范围\n    float mouth = Circle(uv, vec2(0.f), 0.3f, 0.01f);\n    mouth = clamp(mouth - Circle(uv, vec2(0.f, -0.1f), 0.35f, 0.01f), 0.f, 1.f);\n    \n    // 减去嘴巴的区域\n    mask = clamp(mask - mouth, 0.f, 1.f);\n    \n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 计算uv [0, 1]\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // uv 位置调整 [-0.5, 0.5]\n    uv -= 0.5f;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // 显示的颜色\n    vec3 col = vec3(1.f, 1.f, 1.f);\n    \n    float mask = 0.f;\n    \n    // mask = Smiley(uv, vec2(0.f, -0.f), 1.2f);\n    \n    mask = Rect(uv, -0.2f, 0.2f, 0.3f, -0.3f, 0.01f);\n\n    // 显示最后的图像\n    fragColor = vec4(col * mask, 1.f);\n}","name":"Image","description":"","type":"image"}]}