{"ver":"0.1","info":{"id":"ldtczj","date":"1519603405","viewed":156,"name":"blob of particles","username":"Azorlogh","description":"click to drag\nr to reset to random positions\nd will increase loss of energy (thereby turning the mess into a nice stable blob","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define METABALL\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float col;\n    for (int i=0; i<N; i++) {\n        vec2 pos = texelFetch(iChannel0, ivec2(i%int(iResolution.x), i/int(iResolution.x)), 0).xy;\n        col += 1./length(pos-fragCoord);\n    }\n    \n    #ifdef METABALL\n    \tcol = col > .95 ? 1. : 0.;//smoothstep(0., 2., col);\n    #endif\n    #ifndef METABALL\n    \tcol = smoothstep(0., 2., col);\n    #endif\n    \n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat rand(float a){\n    vec2 co = vec2(a,0);\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    \n    int index = coord.x+coord.y*int(iResolution.x);\n    \t\n    if (texelFetch(iChannel1, ivec2(82,0), 0).x == 1.) {\n        fragColor = vec4(vec2(rand(float(index)), rand(float(index)+10000.))*iResolution.xy, 0, 0);\n        return;\n    }\n    \n    vec4 data = texelFetch(iChannel0, ivec2(coord), 0);\n    \n    vec2 pos = data.xy;\n    vec2 vel = data.zw;\n    \n    for (int i=0; i<N; i++) {\n        if (i == index) continue;\n        vec4 other = texelFetch(iChannel0, ivec2(i%int(iResolution.x), i/int(iResolution.x)), 0);\n        float len = length(other.xy-pos)/20.;\n        if (len != 0.) {\n      \t \tfloat attraction = 1024./(len*len) - 1024./(len*len*len);\n    \t    attraction = clamp(attraction, -3., .3);\n     \t\tvel += normalize(other.xy-pos.xy)*attraction;\n        }\n    }\n    \n    if (iMouse.z > 0.) {\n        float len = length(iMouse.xy-pos)/20.;\n        //float attraction = 1024./(len*len) - 1024./(len*len*len);\n        //attraction = clamp(attraction, -4., .4);\n        float attraction = len;\n        vel += normalize(iMouse.xy-pos.xy)*attraction*1.;\n    }\n    \n    pos += vel*.1;\n    vel *= .99 * (1.-texelFetch(iChannel1, ivec2(68,2), 0).x*.01);\n    \n    vec2 clampedPos = clamp(pos, vec2(0), iResolution.xy);\n    \n    vel *= ((vec2(equal(pos, clampedPos)))*2.-1.);\n    \n    pos = clampedPos;\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N 150\n\nfloat sqrLength(vec2 v) {return v.x*v.x + v.y*v.y;}","name":"Common","description":"","type":"common"}]}