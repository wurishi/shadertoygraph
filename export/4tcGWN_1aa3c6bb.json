{"ver":"0.1","info":{"id":"4tcGWN","date":"1469173756","viewed":236,"name":"NormalMappingTestShader","username":"Jwebb4191","description":"generate a normal map and light it","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DIFF_COEFF 0.8\n#define SPEC_COEFF 0.2\n#define SHINE_COEFF .3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 lightDiffuseColor = vec4(.8, .8, .8, 1.0);    \n    vec4 lightSpecColor = vec4(.8, .8, .8, 1.0);\n\n    \n \tfloat phi = cos(iTime);\n    float theta = sin(iTime);\n    vec3 light = vec3(phi, theta, 1.0);\n    vec3 eye = vec3(0, 0, 10);\n    light = normalize(light);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    \n    vec4 color = texture(iChannel1, uv);\n    vec3 normal = texture(iChannel0, uv).xyz;\n    \n    vec4 diffuse = DIFF_COEFF * max(0.0, dot(normal, light)) * lightDiffuseColor;\n    vec3 refVec = reflect(light, normal);\n    vec4 specular =  SPEC_COEFF * pow(max(0.0 ,dot(refVec, eye)), SHINE_COEFF) * lightSpecColor;\n    \n    fragColor = (diffuse + specular) * color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define NORMAL_SCALE\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvStep = 1.0 / iResolution.xy;\n    vec4 Normal = vec4(0.0, 0.0, 0.0, 1.0);\n    vec2 size = vec2(.2, 0.0);\n    \n   \tvec4 color = texture(iChannel0, uv);\n    vec4 leftSample    = texture(iChannel0, uv - vec2(uvStep.x, 0));    \n    vec4 upSample      = texture(iChannel0, uv - vec2(0, uvStep.y));    \n    vec4 rightSample   = texture(iChannel0, uv + vec2(uvStep.x, 0));    \n    vec4 downSample    = texture(iChannel0, uv + vec2(0, uvStep.y));\n\n    float height = (color.x + color.y + color.z) / 3.0;\n    float left   = (leftSample.x + leftSample.y + leftSample.z) / 3.0;\n    float up     = (upSample.x + upSample.y + upSample.z) / 3.0;\n    float right  = (rightSample.x + rightSample.y + rightSample.z) / 3.0;\n    float down   = (downSample.x + downSample.y + downSample.z) / 3.0;\n\n    vec3 va = normalize(vec3(size.xy, up - down));\n    vec3 vb = normalize(vec3(size.yx, left - right));\n   \tvec4 normal = vec4(cross(va, vb), height);\n    \n   \tfragColor = normal;\n}","name":"Buf B","description":"","type":"buffer"}]}