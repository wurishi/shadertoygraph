{"ver":"0.1","info":{"id":"tdcBDN","date":"1605279885","viewed":108,"name":"3. Digit Debugger","username":"rito15","description":"debug values","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["digit","debug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**************************************************************************************************\n * Digit Debug\n **************************************************************************************************/\n// 직사각형 : 좌하단, 우상단 정점 좌표\nfloat DebugRect(float2 uv, float2 p1, float2 p2, float smoothness)\n{\n    float2 center = (p1 + p2) * 0.5;\n    float  width  = (p2.x - p1.x) * 0.5;\n    float  height = (p2.y - p1.y) * 0.5;\n    \n    float rect = smoothstep(width,   width - smoothness, abs(uv.x - center.x)); // 세로\n         rect *= smoothstep(height, height - smoothness, abs(uv.y - center.y)); // 가로\n    \n    return rect;\n}\n\n// 기본 : 한 칸 채우기\nfloat DigitSquare(float2 uv, float2 center, float unit)\n{\n    unit *= 0.5;\n    float rect = 1.- step(unit + 0.0001, abs(uv.x - center.x));\n         rect *= 1.- step(unit + 0.0001, abs(uv.y - center.y));\n    return rect;\n}\n\n// 점\nfloat DigitDot(float2 uv, float2 pivot, float unit)\n{\n    return DigitSquare(uv, pivot + unit * 0.5, unit);\n}\n\n// 마이너스\nfloat DigitMinus(float2 uv, float2 pivot, float unit)\n{\n    float2 pivotPoint = pivot + unit * 0.5;\n    float m = DigitSquare(uv, pivotPoint + unit * float2(0.0, 2.0), unit) +\n              DigitSquare(uv, pivotPoint + unit * float2(1.0, 2.0), unit) +\n              DigitSquare(uv, pivotPoint + unit * float2(2.0, 2.0), unit);\n    return saturate(m);\n}\n\n// 숫자 표현 - pivot : 좌측 하단 기준점, unit : 단위 길이, digit : 정수 1개\nfloat Digit(float2 uv, float2 pivot, float unit, int digit)\n{\n    float2 pivotPoint = pivot + unit * 0.5;\n    \n    // Full Rect\n    float dgRect = DebugRect(uv, pivot, pivot + unit * float2(3.0, 5.0), 0.0001);\n    \n    // Dots\n    float dg00 = DigitSquare(uv, pivotPoint, unit);\n    float dg01 = DigitSquare(uv, pivotPoint + unit * float2(0.0, 1.0), unit);\n    float dg02 = DigitSquare(uv, pivotPoint + unit * float2(0.0, 2.0), unit);\n    float dg03 = DigitSquare(uv, pivotPoint + unit * float2(0.0, 3.0), unit);\n    float dg04 = DigitSquare(uv, pivotPoint + unit * float2(0.0, 4.0), unit);\n    float dg10 = DigitSquare(uv, pivotPoint + unit * float2(1.0, 0.0), unit);\n    float dg11 = DigitSquare(uv, pivotPoint + unit * float2(1.0, 1.0), unit);\n    float dg12 = DigitSquare(uv, pivotPoint + unit * float2(1.0, 2.0), unit);\n    float dg13 = DigitSquare(uv, pivotPoint + unit * float2(1.0, 3.0), unit);\n    float dg14 = DigitSquare(uv, pivotPoint + unit * float2(1.0, 4.0), unit);\n    float dg20 = DigitSquare(uv, pivotPoint + unit * float2(2.0, 0.0), unit);\n    float dg21 = DigitSquare(uv, pivotPoint + unit * float2(2.0, 1.0), unit);\n    float dg22 = DigitSquare(uv, pivotPoint + unit * float2(2.0, 2.0), unit);\n    float dg23 = DigitSquare(uv, pivotPoint + unit * float2(2.0, 3.0), unit);\n    float dg24 = DigitSquare(uv, pivotPoint + unit * float2(2.0, 4.0), unit);\n    \n    // Digit 0 ~ 9\n    float digit0 = dgRect - dg11 - dg12 - dg13;\n    float digit1 = dg10 + dg11 + dg12 + dg13 + dg14; //dg20 + dg21 + dg22 + dg23 + dg24;\n    float digit2 = dgRect - dg03 - dg11 - dg13 - dg21;\n    float digit3 = dgRect - dg01 - dg03 - dg11 - dg13;\n    float digit4 = dgRect - dg00 - dg01- dg10 - dg11 - dg13 - dg14;\n    \n    float digit5 = dgRect - dg01 - dg11 - dg13 - dg23;\n    float digit6 = dgRect - dg11 - dg13 - dg23;\n    float digit7 = dgRect - dg00 - dg01 - dg10 - dg11- dg12 - dg13;\n    float digit8 = dgRect - dg11 - dg13;\n    float digit9 = dgRect - dg01 - dg11 - dg13;\n    \n    switch(digit)\n    {\n        case 0: return saturate(digit0);\n        case 1: return saturate(digit1);\n        case 2: return saturate(digit2);\n        case 3: return saturate(digit3);\n        case 4: return saturate(digit4);\n        case 5: return saturate(digit5);\n        case 6: return saturate(digit6);\n        case 7: return saturate(digit7);\n        case 8: return saturate(digit8);\n        case 9: return saturate(digit9);\n    }\n    return 0.;\n}\n\n// 대상 숫자 리턴 - unit : 한 칸 단위, value : 대상 값, cipher : 소수부 출력 자릿수\nfloat DebugValue(float2 uv, float2 pos, float unit, float value, int cipher)\n{\n    uv -= pos;\n    \n    float digits = 0.; // 결괏값\n    float2 cursor = float2(0., 0.);// 현재 커서 위치\n    float2 space  = float2(unit * 4., 0.); // 공백\n    \n    // 음수처리\n    if(value < 0.)\n    {\n     \tdigits += DigitMinus(uv, cursor, unit);\n        cursor += space;\n        value = -value;\n    }\n    \n    int   valueN = int(value); \t// 정수부\n    float valueF = frac(value); // 소수부\n    \n    bool printOn = false;\n    \n    // 정수부가 0일 경우\n    if(valueN == 0)\n    {\n     \tdigits += Digit(uv, cursor, unit, 0);\n        cursor += space;\n    }\n    else\n    {\n        // 정수부 출력\n        for(int div = 1000000000; div > 0; div /= 10)\n        {\n            int d = valueN / div;\n\n            if(d > 0 || printOn)\n            {\n                printOn = true;\n                digits += Digit(uv, cursor, unit, d);\n                cursor += space;\n\n                valueN -= (d * div);\n            }\n        }\n    }\n    \n    // 소숫점\n    if(cipher > 0)\n    {\n        digits += DigitDot(uv, cursor, unit);\n        cursor += space * 0.5;\n    }\n    \n    // 소수부 출력\n    for(int i = 1; i <= cipher; i++)\n    {\n        int d = int(valueF / 0.1);\n        digits += Digit(uv, cursor, unit, d);\n        cursor += space;\n        valueF = frac(valueF * 10.);\n    }\n    \n    return digits;\n}\n\n// override : 소숫점 4자리 표현\nfloat DebugValue(float2 uv, float2 pos, float unit, float value)\n{\n \treturn DebugValue(uv, pos, unit, value, 4);   \n}\n\n// Float2 debug\nfloat DebugValue(float2 uv, float2 pos, float unit, float2 value2)\n{\n    // 음수 부호 있는 경우, 양수들만 1칸 우측으로 이동\n    float2 m = ceil(step(0., value2));\n    \n    // 모두 양수인 경우에는 제자리\n    if(m == float2(1., 1.))\n        m = float2(0.);\n    \n    float digits = DebugValue(uv - float2(m.x * unit * 4., unit * 6.),  pos, unit, value2.x, 4);\n         digits += DebugValue(uv - float2(m.y * unit * 4., 0.       ),  pos, unit, value2.y, 4);\n    return digits;\n}\n\n// Float3 debug (with color)\nfloat DebugValue(float2 uv, float2 pos, float unit, float3 value3)\n{\n    float3 m = ceil(step(0., value3));\n    if(m == float3(1., 1., 1.))\n        m = float3(0.);\n    \n    float digits = DebugValue(uv - float2(m.x * unit * 4., unit * 12.), pos, unit, value3.x, 4);\n         digits += DebugValue(uv - float2(m.y * unit * 4., unit * 6.),  pos, unit, value3.y, 4);\n         digits += DebugValue(uv - float2(m.z * unit * 4., 0.),         pos, unit, value3.z, 4);\n    \n    //digits *= (saturate(value3) + .1); // Apply Color\n    return digits;\n}\n\n// Float4 debug \nfloat DebugValue(float2 uv, float2 pos, float unit, float4 value4)\n{\n    float4 m = ceil(step(0., value4));\n    if(m == float4(1., 1., 1., 1.))\n        m = float4(0.);\n    \n    float digits = DebugValue(uv - float2(m.x * unit * 4., unit * 18.), pos, unit, value4.x, 4);\n         digits += DebugValue(uv - float2(m.y * unit * 4., unit * 12.), pos, unit, value4.y, 4);\n         digits += DebugValue(uv - float2(m.z * unit * 4., unit * 6.),  pos, unit, value4.z, 4);\n         digits += DebugValue(uv - float2(m.w * unit * 4., 0.),         pos, unit, value4.w, 4);\n          \n    //digit *= (saturate(value4.rgb) + .1); // Apply Color\n    return digits;\n}\n\n\n/**************************************************************************************************\n * Main\n **************************************************************************************************/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float2 uv = fragCoord/iResolution.xy;\t\t\t\t\n           uv = (uv - 0.5) * float2(iResolution.x/iResolution.y, 1.0) + 0.5; // Square Area  0.0 ~ 1.0\n    \n    float2 mouse = iMouse.xy/iResolution.xy;\n    float2 mouse2 = (mouse - 0.5) * float2(iResolution.x/iResolution.y, 1.0) * 2.0; \n    \n    float3 col; // 최종 컬러\n    \n    // uv2 이동\n    float2 uvOffset = float2(0.0, 0.0);\n    \n    // uv Remap : 0. ~ 1. => -1. ~ 1.\n    float2 uv2 = uv *2. - 1. - uvOffset;\n    \n    float  f11 = 29.1803;\n    float  f12 = -0.0029;\n    \n    float2 f21 = float2(-1.3579,  2.4680);\n    float3 f31 = float3(0.8, 0.60, 0.3569);\n    float4 f41 = float4(0. , -0.33, 0.595, 1.088);\n    \n    col += DebugValue(uv,  float2(-0.3, 0.01), 0.02, iTime);\n    col += DebugValue(uv,  float2(-0.3, 0.13), 0.02, f12);\n    col += DebugValue(uv,  float2(-0.3, 0.60), 0.01, f21);\n    col += DebugValue(uv2, float2(-0.3, -0.1), 0.02, f31);\n    col += DebugValue(uv2, float2(0.7,  0.1),  0.02, f41);\n    \n    float mp = DebugValue(uv2, float2(min(mouse2.x, 1.35), min(mouse2.y, 0.775)),  0.02, mouse);\n    col = mix(col*1.0, mp * float3(1.0,0.,0.), mp);\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/**************************************************************************************************\n * DEFINITIONS : Unity Compatibility\n **************************************************************************************************/\n#define float2   vec2\n#define float3   vec3\n#define float4   vec4\n#define float2x2 mat2\n#define float3x3 mat3\n#define float4x4 mat3\n\n#define frac(x)     fract(x)\n#define saturate(x) clamp(x, 0., 1.)\n\n#define atan2(x,y)    atan(y,x)\n#define tex2D(s,t)    texture(s,t)\n#define mul(mat,vec)  vec*mat;\n\n#define lerp(a,b,t) mix(a,b,t)\n\n/**************************************************************************************************\n * DEFINITIONS\n **************************************************************************************************/\n#define S(a, b, t) smoothstep(a, b, t)\n\n#define PI 3.141592653589793\n\n\n/**************************************************************************************************\n * DEBUG Functions \n **************************************************************************************************/\nfloat3 debugCenterLine(float2 uv)\n{\n    if(uv.x > 0.498 && uv.x < 0.502 || uv.y > 0.498 && uv.y < 0.502)\n        return float3(1., 0., 0.);\n}\nfloat3 debugOutLine(float2 uv)\n{\n    if(uv.x > 1.0 && uv.x <= 1.004 || uv.x < 0.0 && uv.x >= -0.004)\n        return float3(0., 0., 1.);\n}\nfloat3 debugGrid(float2 uv, float interval)\n{\n    // interval마다 그리드 디버그\n    float grid = 0.;\n    float gridZ = 0.;\n    float2 gridXY = float2(0.);\n    \n    float th = 0.002; // thickness\n    \n    for(float f = interval; f < 1.0; f += interval)\n    {\n        // 가로선 || 세로선\n        if(uv.y >= f - th && uv.y <= f + th && uv.x > 0. && uv.x < 1. ||\n           uv.x >= f - th && uv.x <= f + th)\n        {\n            grid = 0.7;\n            gridXY = uv + float2(0.2, 0.4);\n            \n            if( frac(f * 4.) < 0.01 )\n            {\n                grid = 1.;\n                gridZ = 1.;\n            }\n        }\n    }\n    \n    return float3(0., grid, gridZ);\n    //return float3(gridXY, gridZ); //알록달록\n}","name":"Common","description":"","type":"common"}]}