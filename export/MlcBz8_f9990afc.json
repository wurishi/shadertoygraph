{"ver":"0.1","info":{"id":"MlcBz8","date":"1580995772","viewed":138,"name":"FlashLights","username":"sujay","description":"Trying to replicate stadium flashlights","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise2d(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(10.0,73))) * 43758.5453);\n}\n\nvec3 drawCircle(vec2 fract_, float radius)\n{\n    fract_ = fract_ - 0.5;\n    float dist = smoothstep(1.0-radius, 1.0-radius+0.3, 1.0- length(fract_ - vec2(0.0)));\n\tvec2 polar = vec2 ( sqrt(fract_.x*fract_.x + fract_.y*fract_.y) , atan(fract_.y, fract_.x) );\n   \n       //polar.y = atan(fract_.y - radius*cos(polar.y), fract_.x-radius*sin(polar.y));//FIX THIS\n    //vec2 polar2 = vec2 ( 0.0 , atan(fract_.y , fract_.x) );\n    return vec3(clamp(0.0+sin(polar.y*6.0), 0.1, .9) * (0.5 - polar.x) + dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    //uv = uv*sin(iTime/10.);\n    //\n    \n    \n    fragColor = vec4(0.,0.,0.0, 1.0);\n    \n    for(int i = 0; i < 5; i=i+1)\n    {\n\t    vec2 fract_ = fract(uv*float(i));\n    \tvec2 floor_ = floor(uv*float(i));\n    \n\n\t    // Time varying pixel color\n    \t//vec3 col = 0.5 + 0.5*cos(j.xyx+vec3(0,2,4));\n        //fragColor = vec4(noise2d(floor_));\n\n\t    // Output to screen\n    \tif(noise2d(floor_) > 0.7)\n    \t{\n\t    \tfragColor += vec4(drawCircle(fract_, 0.2), 0.0) * (abs(noise2d(vec2(iTime/100.)))+0.5);\n    \t}\n \t   else\n    \t    fragColor += vec4(0.,0.,0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}