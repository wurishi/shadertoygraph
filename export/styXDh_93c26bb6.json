{"ver":"0.1","info":{"id":"styXDh","date":"1640681758","viewed":509,"name":"Bicubic Filter ","username":"profhua","description":"Left to Right:Point \\ Bi-Linear \\ B-Spline \\ Catmull-Rom 9 Samples\\ Catmull-Rom 5 Samples\nRef:\nhttps://www.shadertoy.com/view/MllSzX\nhttps://vec3.ca/bicubic-filtering-in-fewer-taps/\nhttp://www.profhua.com/Sub/Article/BicubicFiltering/BicubicFiltering.htm\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["filter","bicubic","catmullrom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Origin code from https://www.shadertoy.com/view/MllSzX\n\nfloat c_textureSize = 64.0;\nfloat InvSize = 1./64.;\n\n#define c_onePixel  (1.0 / c_textureSize)\n#define c_twoPixels  (2.0 / c_textureSize)\n\n//=======================================================================================\nvec3 BiCubicBSpline(vec2 P)\n{\n    const float inv6 = 1./6.;\n\n    vec2 Weight[2];\n\tvec2 Sample[2];\n    \n    vec2 UV =  P * c_textureSize;\n    vec2 tc = floor(UV - 0.5) + 0.5;\n\tvec2 f = UV - tc;\n\tvec2 f2 = f * f; \n\tvec2 f3 = f2 * f;\n    \n    vec2 of = vec2(1.)-f;\n    vec2 of2 = of*of;\n    vec2 of3 = of2*of;\n    \n    vec2 w0 = inv6 * of3 ;\n\tvec2 w1 = inv6 * (vec2(4.) + 3.*f3 - 6.*f2);\n\tvec2 w2 = inv6 * (vec2(4.) + 3.*of3 - 6.*of2);\n\tvec2 w3 = inv6 * f3;\n    \n    Weight[0] = w0 + w1;\n\tWeight[1] = w2 + w3;\n\n\tSample[0] = tc - (vec2(1.) - w1/Weight[0]);\n\tSample[1] = tc + vec2(1.) + w3/Weight[1];\n\n\tSample[0] *= InvSize;\n\tSample[1] *= InvSize;\n\n    float sampleWeight[4];\n    sampleWeight[0] = Weight[0].x * Weight[0].y;\n    sampleWeight[1] = Weight[1].x * Weight[0].y;\n    sampleWeight[2] = Weight[0].x * Weight[1].y;\n    sampleWeight[3] = Weight[1].x * Weight[1].y;\n\n    vec3 Ctl = texture(iChannel0, vec2(Sample[0].x, Sample[0].y)).rgb * sampleWeight[0];    \n    vec3 Ctr = texture(iChannel0, vec2(Sample[1].x, Sample[0].y)).rgb * sampleWeight[1];    \n    vec3 Cbl = texture(iChannel0, vec2(Sample[0].x, Sample[1].y)).rgb * sampleWeight[2];    \n    vec3 Cbr = texture(iChannel0, vec2(Sample[1].x, Sample[1].y)).rgb * sampleWeight[3];\n\n    //return vec3(Sample[0].x,Sample[0].y,0.);\n    return Ctl+Ctr+Cbl+Cbr;\n}\n\n//=======================================================================================\nvec3 BiCubicCatmullRom9Tap (vec2 P)\n{\n    vec2 Weight[3];\n\tvec2 Sample[3];\n    \n    vec2 UV =  P * c_textureSize;\n    vec2 tc = floor(UV - 0.5) + 0.5;\n\tvec2 f = UV - tc;\n\tvec2 f2 = f * f; \n\tvec2 f3 = f2 * f;\n    \n    vec2 w0 = f2 - 0.5 * (f3 + f);\n\tvec2 w1 = 1.5 * f3 - 2.5 * f2 + vec2(1.);\n\tvec2 w3 = 0.5 * (f3 - f2);\n\tvec2 w2 = vec2(1.) - w0 - w1 - w3;\n    \n    Weight[0] = w0;\n\tWeight[1] = w1 + w2;\n\tWeight[2] = w3;\n\n\tSample[0] = tc - vec2(1.);\n\tSample[1] = tc + w2 / Weight[1];\n\tSample[2] = tc + vec2(2.);\n\n\tSample[0] *= InvSize;\n\tSample[1] *= InvSize;\n\tSample[2] *= InvSize;\n\n    float sampleWeight[9];\n    sampleWeight[0] = Weight[1].x * Weight[0].y;\n    sampleWeight[1] = Weight[0].x * Weight[1].y;\n    sampleWeight[2] = Weight[1].x * Weight[1].y;\n    sampleWeight[3] = Weight[2].x * Weight[1].y;\n    sampleWeight[4] = Weight[1].x * Weight[2].y;\n    \n    //Corner\n    sampleWeight[5] = Weight[0].x * Weight[0].y;\n    sampleWeight[6] = Weight[0].x * Weight[2].y;\n    sampleWeight[7] = Weight[2].x * Weight[0].y;\n    sampleWeight[8] = Weight[2].x * Weight[2].y;\n\n    vec3 Ct = texture(iChannel0, vec2(Sample[1].x, Sample[0].y)).rgb * sampleWeight[0];    \n    vec3 Cl = texture(iChannel0, vec2(Sample[0].x, Sample[1].y)).rgb * sampleWeight[1];    \n    vec3 Cc = texture(iChannel0, vec2(Sample[1].x, Sample[1].y)).rgb * sampleWeight[2];    \n    vec3 Cr = texture(iChannel0, vec2(Sample[2].x, Sample[1].y)).rgb * sampleWeight[3];    \n    vec3 Cb = texture(iChannel0, vec2(Sample[1].x, Sample[2].y)).rgb * sampleWeight[4];\n    \n    vec3 Ctl = texture(iChannel0, vec2(Sample[0].x, Sample[0].y)).rgb * sampleWeight[5];    \n    vec3 Ctr = texture(iChannel0, vec2(Sample[0].x, Sample[2].y)).rgb * sampleWeight[6];    \n    vec3 Cbl = texture(iChannel0, vec2(Sample[2].x, Sample[0].y)).rgb * sampleWeight[7];    \n    vec3 Cbr = texture(iChannel0, vec2(Sample[2].x, Sample[2].y)).rgb * sampleWeight[8];\n    \n    return Ct+Cl+Cc+Cr+Cb+Ctl+Ctr+Cbl+Cbr;\n}\n\n//=======================================================================================\nvec3 BiCubicCatmullRom5Tap (vec2 P)\n{\n\n    vec2 Weight[3];\n\tvec2 Sample[3];\n    \n    vec2 UV =  P * c_textureSize;\n    vec2 tc = floor(UV - 0.5) + 0.5;\n\tvec2 f = UV - tc;\n\tvec2 f2 = f * f; \n\tvec2 f3 = f2 * f;\n    \n    vec2 w0 = f2 - 0.5 * (f3 + f);\n\tvec2 w1 = 1.5 * f3 - 2.5 * f2 + vec2(1.);\n\tvec2 w3 = 0.5 * (f3 - f2);\n\tvec2 w2 = vec2(1.) - w0 - w1 - w3;\n    \n    Weight[0] = w0;\n\tWeight[1] = w1 + w2;\n\tWeight[2] = w3;\n\n\tSample[0] = tc - vec2(1.);\n\tSample[1] = tc + w2 / Weight[1];\n\tSample[2] = tc + vec2(2.);\n\n\tSample[0] *= InvSize;\n\tSample[1] *= InvSize;\n\tSample[2] *= InvSize;\n\n    float sampleWeight[5];\n    sampleWeight[0] = Weight[1].x * Weight[0].y;\n    sampleWeight[1] = Weight[0].x * Weight[1].y;\n    sampleWeight[2] = Weight[1].x * Weight[1].y;\n    sampleWeight[3] = Weight[2].x * Weight[1].y;\n    sampleWeight[4] = Weight[1].x * Weight[2].y;\n\n    vec3 Ct = texture(iChannel0, vec2(Sample[1].x, Sample[0].y)).rgb * sampleWeight[0];    \n    vec3 Cl = texture(iChannel0, vec2(Sample[0].x, Sample[1].y)).rgb * sampleWeight[1];    \n    vec3 Cc = texture(iChannel0, vec2(Sample[1].x, Sample[1].y)).rgb * sampleWeight[2];    \n    vec3 Cr = texture(iChannel0, vec2(Sample[2].x, Sample[1].y)).rgb * sampleWeight[3];    \n    vec3 Cb = texture(iChannel0, vec2(Sample[1].x, Sample[2].y)).rgb * sampleWeight[4];\n    \n    float WeightMultiplier = 1./(sampleWeight[0]+sampleWeight[1]+sampleWeight[2]+sampleWeight[3]+sampleWeight[4]);\n    \n    \n    return (Ct+Cl+Cc+Cr+Cb)*WeightMultiplier;\n    \n    \n}\n\n//=======================================================================================\nvec3 BilinearTextureSample (vec2 P)\n{\n    return texture(iChannel0, P).rgb;\n}\n\n//=======================================================================================\nvec3 NearestTextureSample (vec2 P)\n{\n    vec2 pixel = P * c_textureSize;\n    \n    vec2 frac = fract(pixel);\n    pixel = (floor(pixel) / c_textureSize);\n    return texture(iChannel0, pixel + vec2(c_onePixel/2.0)).rgb;\n}\n\n//=======================================================================================\nvoid AnimateUV (inout vec2 uv)\n{\n    if (iMouse.z > 0.0)\n    {\n        uv -= vec2(0.0,0.5) * iResolution.y / iResolution.x;;\n        uv *= vec2(iMouse.y / iResolution.y);\n        uv += vec2(1.5 * iMouse.x / iResolution.x, 0.0);\n        \n    }\n    else\n    {    \n    \tuv += vec2(sin(iTime * 0.3)*0.5+0.5, sin(iTime * 0.7)*0.5+0.5);\n    \tuv *= (sin(iTime * 0.08)*0.5+0.5)*1.0 + 0.2;\n    }\n}\n\n//=======================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set up our coordinate system\n    float aspectRatio = iResolution.y / iResolution.x;\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    uv.y *= aspectRatio;\n    \n    // do our sampling\n    vec3 color;\n    if (abs(uv.x - (1.0/5.0)) < 0.002)\n    {\n        color = vec3(1.0);\n    }   \n    else if (abs(uv.x - (2.0/5.0)) < 0.002)\n    {\n        color = vec3(1.0);\n    }          \n    else if (abs(uv.x - (3.0/5.0)) < 0.002)\n    {\n        color = vec3(1.0);\n    }\n     else if (abs(uv.x - (4.0/5.0)) < 0.002)\n    {\n        color = vec3(1.0);\n    }\n    else if (uv.x < (1.0/5.0))\n    {\n        AnimateUV(uv);\n        color = NearestTextureSample(uv);\n    }\n    else if (uv.x < (2.0/5.0))\n    {\n        uv -= vec2((1.0/5.0),0.0);\n        AnimateUV(uv);\n        color = BilinearTextureSample(uv);\n    }\n    else if (uv.x < (3.0/5.0))\n    {\n        uv -= vec2((2.0/5.0),0.0);\n        AnimateUV(uv);\n        color = BiCubicBSpline(uv);\n    }\n    else if (uv.x < (4.0/5.0))\n    {\n        uv -= vec2((3.0/5.0),0.0);\n        AnimateUV(uv);\n        color = BiCubicCatmullRom9Tap(uv);\n\t}\n    else\n    {\n        uv -= vec2((4.0/5.0),0.0);\n        AnimateUV(uv);\n        color = BiCubicCatmullRom5Tap(uv);\n    }\n    \n    // set the final color\n\tfragColor = vec4(color,1.0);    \n}","name":"Image","description":"","type":"image"}]}