{"ver":"0.1","info":{"id":"mtffDr","date":"1692799823","viewed":47,"name":"Arbelos","username":"tukaloff","description":"Arbelos shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592653589793238;\nconst bool debug = false;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = vec2(iResolution.x * 0.5, iResolution.y * 0.5);\n    \n    // arbelos dots\n    vec2 A = vec2(center.x + iResolution.x * 0., center.y - iResolution.y * 0.3);\n    vec2 B = vec2(center.x - iResolution.x * 0.4, center.y - iResolution.y * 0.3);\n    vec2 C = vec2(center.x + iResolution.x * 0.4, center.y - iResolution.y * 0.3);\n    \n    // diameters\n    float rBC = distance(B,C);\n    float Afactor = sin(iTime)*(rBC/2.1);\n    A.x += Afactor;\n    float rBA = distance(B,A);\n    float rAC = distance(A,C);\n    \n    // circle centers\n    vec2 arbCenter = vec2((C.x - B.x) / 2. + B.x, B.y - rBC / 2.);\n    vec2 BACenter = vec2((A.x - B.x) / 2. + B.x, B.y - rBA / 2.);\n    vec2 ACCenter = vec2((C.x - A.x) / 2. + A.x, A.y - rAC / 2.);\n    \n    // frag circle angles\n    float angleBC = atan(fragCoord.y - arbCenter.y, fragCoord.x - arbCenter.x);\n    float angleBA = atan(fragCoord.y - BACenter.y, fragCoord.x - BACenter.x);\n    float angleAC = atan(fragCoord.y - ACCenter.y, fragCoord.x - ACCenter.x);\n    \n    // radius by angle\n    float r1 = rBC * (sin(angleBC));\n    float r2 = rBA * (sin(angleBA));\n    float r3 = rAC * (sin(angleAC));\n    \n    // distance to frag from circle centers\n    float arbCenterFragDistance = distance(arbCenter, fragCoord);\n    float BAFragDistance = distance(BACenter, fragCoord);\n    float ACFragDistance = distance(ACCenter, fragCoord);\n    \n    // background\n    fragColor = vec4(0.8, 0.8, 0.8, 1.0);\n    \n    // arbelos\n    if (arbCenterFragDistance <= r1 \n        && BAFragDistance > r2\n        && ACFragDistance > r3\n        && fragCoord.y >= A.y) {\n        fragColor = vec4(0.0, 0.4, 0.0, 1.0);\n    }\n    \n    if (debug) {\n        if (fragCoord.x >= A.x-1. && fragCoord.x <= A.x+1.) {\n            fragColor = vec4(0.0, 0., 0.0, 1.0);\n        } else if (fragCoord.x >= B.x-1. && fragCoord.x <= B.x+1.) {\n            fragColor = vec4(0.0, 0., 0.0, 1.0);\n        } else if (fragCoord.x >= C.x-1. && fragCoord.x <= C.x+1.) {\n            fragColor = vec4(0.0, 0., 0.0, 1.0);\n        } else if (fragCoord.x >= arbCenter.x-1. && fragCoord.x <= arbCenter.x+1.) {\n            fragColor = vec4(0.0, 0., 0.0, 1.0);\n        } else if (fragCoord.y >= A.y-1. && fragCoord.y <= A.y+1.) {\n            fragColor = vec4(0.0, 0., 0.0, 1.0);\n        } else if (fragCoord.y >= center.y-1. && fragCoord.y <= center.y+1.) {\n            fragColor = vec4(0.0, 0., 0.0, 1.0);\n        }\n    }\n    \n    if (debug) {\n        if (arbCenterFragDistance <= r1 && fragCoord.y >= A.y) {\n            fragColor = vec4(0.0, 0.4, 0.0, 1.0);\n        }\n\n        if (BAFragDistance <= r2 && fragCoord.y >= A.y) {\n            fragColor = vec4(0.4, 0.0, 0.0, 1.0);\n        }\n\n        if (ACFragDistance <= r3 && fragCoord.y >= A.y) {\n            fragColor = vec4(0.0, 0.0, 0.4, 1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}