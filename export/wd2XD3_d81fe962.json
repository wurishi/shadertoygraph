{"ver":"0.1","info":{"id":"wd2XD3","date":"1555182296","viewed":127,"name":"RayMarchingSphere","username":"bkpjjj","description":"first ray marching shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 128\n#define VMIN 0.\n#define SPHERE 2.\n\nfloat Distance(vec3 pos,vec3 dir){\n    float depth = VMIN;\n    float dist;\n    for (int i = 0;i < MAX_STEPS;i++){\n        dist = length(pos + depth * dir) - SPHERE;\n        if(dist <= 0.0001){\n\t\t\treturn depth;\n        }\n        depth += dist;\n    }\n \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    vec3 eye = vec3(0.,0.,-5.);\n    vec3 rd = normalize(vec3(uv,1.));\n    float a = iTime;\n    //rd.xy *= mat2x2(cos(a),-sin(a),sin(a),cos(a));\n    vec3 col;\n    float d = Distance(eye , rd);\n    \n    col = vec3(normalize(d));\n    //col *= step(d,float(MAX_STEPS));\n    \n    \n\n\tvec3 lightDir = vec3(1.,1.8,-3.);\n    lightDir.xy *= mat2x2(cos(a),-sin(a),sin(a),cos(a));\n    vec3 p = eye + d * rd;\n   \t\n   \n   \n\tcol *=dot(normalize(lightDir), normalize(p));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}