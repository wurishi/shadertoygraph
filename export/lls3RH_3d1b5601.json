{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float find_closest(int x, int y, float c0) {\n\n\tint dither[64];\n\n\tdither[0] = 0;\n\tdither[1] = 32;\n\tdither[2] = 8;\n\tdither[3] = 40;\n\tdither[4] = 2;\n\tdither[5] = 32;\n\tdither[6] = 10;\n\tdither[7] = 42;\n\tdither[8] = 48;\n\tdither[9] = 16;\n\tdither[10] = 56;\n\tdither[11] = 24;\n\tdither[12] = 50;\n\tdither[13] = 18;\n\tdither[14] = 58;\n\tdither[15] = 26;\n\tdither[16] = 12;\n\tdither[17] = 44;\n\tdither[18] = 4;\n\tdither[19] = 36;\n\tdither[20] = 14;\n\tdither[21] = 46;\n\tdither[22] = 6;\n\tdither[23] = 38;\n\tdither[24] = 60;\n\tdither[25] = 28;\n\tdither[26] = 52;\n\tdither[27] = 20;\n\tdither[28] = 62;\n\tdither[29] = 30;\n\tdither[30] = 54;\n\tdither[31] = 22;\n\tdither[32] = 3;\n\tdither[33] = 35;\n\tdither[34] = 11;\n\tdither[35] = 43;\n\tdither[36] = 1;\n\tdither[37] = 33;\n\tdither[38] = 9;\n\tdither[39] = 41;\n\tdither[40] = 51;\n\tdither[41] = 19;\n\tdither[42] = 59;\n\tdither[43] = 27;\n\tdither[44] = 49;\n\tdither[45] = 17;\n\tdither[46] = 57;\n\tdither[47] = 25;\n\tdither[48] = 15;\n\tdither[49] = 47;\n\tdither[50] = 7;\n\tdither[51] = 39;\n\tdither[52] = 13;\n\tdither[53] = 45;\n\tdither[54] = 5;\n\tdither[55] = 37;\n\tdither[56] = 63;\n\tdither[57] = 31;\n\tdither[58] = 55;\n\tdither[59] = 23;\n\tdither[60] = 61;\n\tdither[61] = 29;\n\tdither[62] = 53;\n\tdither[63] = 21;\n\n\tfloat limit = 0.0;\n\tif(x < 8) {\n\t\tint index = x + y*8;\n\t\t//limit = float(dither[index]+1)/64.0;\n\t\t// sigh.....\n\t\tif (index == 0) {limit = float(dither[0]+1)/64.0;};\n\t\tif (index == 1) {limit = float(dither[1]+1)/64.0;};\n\t\tif (index == 2) {limit = float(dither[2]+1)/64.0;};\n\t\tif (index == 3) {limit = float(dither[3]+1)/64.0;};\n\t\tif (index == 4) {limit = float(dither[4]+1)/64.0;};\n\t\tif (index == 5) {limit = float(dither[5]+1)/64.0;};\n\t\tif (index == 6) {limit = float(dither[6]+1)/64.0;};\n\t\tif (index == 7) {limit = float(dither[7]+1)/64.0;};\n\t\tif (index == 8) {limit = float(dither[8]+1)/64.0;};\n\t\tif (index == 9) {limit = float(dither[9]+1)/64.0;};\n\t\tif (index == 10) {limit = float(dither[10]+1)/64.0;};\n\t\tif (index == 11) {limit = float(dither[11]+1)/64.0;};\n\t\tif (index == 12) {limit = float(dither[12]+1)/64.0;};\n\t\tif (index == 13) {limit = float(dither[13]+1)/64.0;};\n\t\tif (index == 14) {limit = float(dither[14]+1)/64.0;};\n\t\tif (index == 15) {limit = float(dither[15]+1)/64.0;};\n\t\tif (index == 16) {limit = float(dither[16]+1)/64.0;};\n\t\tif (index == 17) {limit = float(dither[17]+1)/64.0;};\n\t\tif (index == 18) {limit = float(dither[18]+1)/64.0;};\n\t\tif (index == 19) {limit = float(dither[19]+1)/64.0;};\n\t\tif (index == 20) {limit = float(dither[20]+1)/64.0;};\n\t\tif (index == 21) {limit = float(dither[21]+1)/64.0;};\n\t\tif (index == 22) {limit = float(dither[22]+1)/64.0;};\n\t\tif (index == 23) {limit = float(dither[23]+1)/64.0;};\n\t\tif (index == 24) {limit = float(dither[24]+1)/64.0;};\n\t\tif (index == 25) {limit = float(dither[25]+1)/64.0;};\n\t\tif (index == 26) {limit = float(dither[26]+1)/64.0;};\n\t\tif (index == 27) {limit = float(dither[27]+1)/64.0;};\n\t\tif (index == 28) {limit = float(dither[28]+1)/64.0;};\n\t\tif (index == 29) {limit = float(dither[29]+1)/64.0;};\n\t\tif (index == 30) {limit = float(dither[30]+1)/64.0;};\n\t\tif (index == 31) {limit = float(dither[31]+1)/64.0;};\n\t\tif (index == 32) {limit = float(dither[32]+1)/64.0;};\n\t\tif (index == 33) {limit = float(dither[33]+1)/64.0;};\n\t\tif (index == 34) {limit = float(dither[34]+1)/64.0;};\n\t\tif (index == 35) {limit = float(dither[35]+1)/64.0;};\n\t\tif (index == 36) {limit = float(dither[36]+1)/64.0;};\n\t\tif (index == 37) {limit = float(dither[37]+1)/64.0;};\n\t\tif (index == 38) {limit = float(dither[38]+1)/64.0;};\n\t\tif (index == 39) {limit = float(dither[39]+1)/64.0;};\n\t\tif (index == 40) {limit = float(dither[40]+1)/64.0;};\n\t\tif (index == 41) {limit = float(dither[41]+1)/64.0;};\n\t\tif (index == 42) {limit = float(dither[42]+1)/64.0;};\n\t\tif (index == 43) {limit = float(dither[43]+1)/64.0;};\n\t\tif (index == 44) {limit = float(dither[44]+1)/64.0;};\n\t\tif (index == 45) {limit = float(dither[45]+1)/64.0;};\n\t\tif (index == 46) {limit = float(dither[46]+1)/64.0;};\n\t\tif (index == 47) {limit = float(dither[47]+1)/64.0;};\n\t\tif (index == 48) {limit = float(dither[48]+1)/64.0;};\n\t\tif (index == 49) {limit = float(dither[49]+1)/64.0;};\n\t\tif (index == 50) {limit = float(dither[50]+1)/64.0;};\n\t\tif (index == 51) {limit = float(dither[51]+1)/64.0;};\n\t\tif (index == 52) {limit = float(dither[52]+1)/64.0;};\n\t\tif (index == 53) {limit = float(dither[53]+1)/64.0;};\n\t\tif (index == 54) {limit = float(dither[54]+1)/64.0;};\n\t\tif (index == 55) {limit = float(dither[55]+1)/64.0;};\n\t\tif (index == 56) {limit = float(dither[56]+1)/64.0;};\n\t\tif (index == 57) {limit = float(dither[57]+1)/64.0;};\n\t\tif (index == 58) {limit = float(dither[58]+1)/64.0;};\n\t\tif (index == 59) {limit = float(dither[59]+1)/64.0;};\n\t\tif (index == 60) {limit = float(dither[60]+1)/64.0;};\n\t\tif (index == 61) {limit = float(dither[61]+1)/64.0;};\n\t\tif (index == 62) {limit = float(dither[62]+1)/64.0;};\n\t\tif (index == 63) {limit = float(dither[63]+1)/64.0;};\n\t}\n\n\tif(c0 < limit)\n\treturn 0.0;\n\treturn 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Pixelate\n    float pixelSize = 60.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 div = vec2(iResolution.x * pixelSize / iResolution.y, pixelSize);\n\tuv = floor(uv * div)/div;\n\t\n    //c64Colors\n    vec3 c64col[16];\n    c64col[0] = vec3(0.0,0.0,0.0);\n    c64col[1] = vec3(62.0,49.0,162.0);\n    c64col[2] = vec3(87.0,66.0,0.0);\n    c64col[3] = vec3(140.0,62.0,52.0);\n    c64col[4] = vec3(84.0,84.0,84.0);\n    c64col[5] = vec3(141.0,71.0,179.0);\n    c64col[6] = vec3(144.0,95.0,37.0);\n    c64col[7] = vec3(124.0,112.0,218.0);\n    c64col[8] = vec3(128.0,128.0,129.0);\n    c64col[9] = vec3(104.0,169.0,65.0);\n    c64col[10] = vec3(187.0,119.0,109.0);\n    c64col[11] = vec3(122.0,191.0,199.0);\n    c64col[12] = vec3(171.0,171.0,171.0);\n    c64col[13] = vec3(208.0,220.0,113.0);\n    c64col[14] = vec3(172.0,234.0,136.0);\n    c64col[15] = vec3(255.0,255.0,255.0);\n\n    vec3 samp = texture(iChannel0, uv.xy).rgb;\n    vec3 match = vec3(0.0,0.0,0.0);\n    float best_dot = 8.0;\n\n    for (int c=15;c>=0;c--) {\n        float this_dot = distance(c64col[c]/255.0,samp);\n        if (this_dot<best_dot) {\n            best_dot=this_dot;\n            match=c64col[c];\n        }\n    }\n    vec3 color = vec3(match/255.0);\n\n    vec2 xy = fragCoord.xy * vec2(1, 1);\n\tint x = int(mod(xy.x, 8.0));\n\tint y = int(mod(xy.y, 8.0));\n    \n    \n    vec3 rgb = texture(iChannel0, uv.xy).rgb;\n\n    vec3 finalRGB;\n    finalRGB.r = find_closest(x, y, rgb.r);\n    finalRGB.g = find_closest(x, y, rgb.g);\n    finalRGB.b = find_closest(x, y, rgb.b);\n\n\tfragColor = vec4(finalRGB*color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lls3RH","date":"1418768877","viewed":693,"name":"c64 Post Process","username":"xtrmag","description":"Comodore like post processing shader","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["c64","postprocess"],"hasliked":0,"parentid":"","parentname":""}}