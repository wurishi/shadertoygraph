{"ver":"0.1","info":{"id":"7ltGDj","date":"1636765771","viewed":99,"name":"Simple linear gradient ","username":"Desdby","description":"Generate a linear gradient of two colors using the lerp function which is the interpolation of two numbers.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["color","gradient","lineargradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// a any number , b any number , 0 <= t <= 1.0\nfloat lerp (float a, float b, float t){\n\n    //interpolation of two numbers\n    return (1.0-t)*a + t*b;\n}\n\n\n\nvec3 lerpColor (vec3 c1 , vec3 c2 , float t){\n    \n    vec3 color_interpolation = vec3 ( lerp (c1.x,c2.x,t) , lerp (c1.y,c2.y,t) , lerp (c1.z,c2.z,t) ); \n    \n    return  color_interpolation;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = iTime; \n    float x = uv.x , y = uv.y;\n    \n    //Two colors\n    vec3 c1 = vec3 ( 23.0/255.0 , 194.0/255.0 , 131.0/255.0);\n    vec3 c2 = vec3 ( 33.0/255.0 , 38.0/255.0 , 204.0/255.0); \n    \n    \n    //Example\n    \n    //Linear gradient parting line in y-axis\n    //vec3 col = vec3 (lerpColor ( c1 , c2 , uv.x) ); \n    \n    //Linear gradient parting line in x-axis\n    //vec3 col = vec3 (lerpColor ( c1 , c2 , uv.y) ); \n    \n    \n    vec3 col = vec3 (lerpColor ( c1 , c2 , abs(sin(t-x)*cos(x+t-sin(t)) ) )); \n    \n    \n\n    //Play non-linear gradient with any function from 0.0 to 1.0\n    //vec3 col = vec3 (lerpColor ( c1 , c2 , func ) );\n    \n    //vec3 col = vec3 (lerpColor ( c1 , c2 , sin(2.0*tanh(cos(t)-y)*y )*sin(4.0*x-t) ) ); \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}