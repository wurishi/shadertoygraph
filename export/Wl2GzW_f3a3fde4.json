{"ver":"0.1","info":{"id":"Wl2GzW","date":"1558658157","viewed":228,"name":"Ripples and a light","username":"hirak99","description":"Shadertoy is cool!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ripples","mouse","light","pond"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ripple_size = 0.2;\nfloat speed = 2.5;\nvec3 waterColor = vec3(.3, .7, 1.);\n\nvec3 light1 = vec3(100, 200, 200);\n\nfloat lightIntensity(in vec3 normal, in vec3 light, in vec2 uv) {\n    vec3 to_light = light - vec3(uv, 0);\n    float dist2 = dot(to_light, to_light)/62500.;\n    // Light on the surface of pool. Generaly would be due to particles floating on it.\n    float intensity = dot(normal, normalize(to_light)) / dist2;\n    \n    // Specular reflection of the light source on water.\n    vec3 reflected = reflect(vec3(0, 0, -1), normal);\n    float dist = distance(dot(to_light, reflected) * reflected, to_light);\n    intensity += smoothstep(100., 30., dist) * .9;\n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord - iResolution.xy / 2.;\n    float rad2 = dot(uv, uv);\n    float rad = sqrt(rad2);\n    float elevation = sin(rad * ripple_size - speed * iTime);\n    \n    // Normal along the radius.\n    vec2 normalr = normalize(vec2(-ripple_size * elevation, 1.));\n\n    vec2 uvn = normalize(uv);\n    // 3D normal.\n    vec3 normal = vec3(normalr.x * uvn.x, normalr.x * uvn.y, normalr.y);\n    \n    vec2 lightxy = iMouse.xy - iResolution.xy / 2.;\n    vec3 mouseLight = vec3(lightxy, 250);\n\n    fragColor.rgb += lightIntensity(normal, mouseLight, uv) * vec3(1, .95, .8) * .5;\n    fragColor.rgb += lightIntensity(normal, light1, uv) * vec3(1, .95, .8) * .5;\n\n    // Refraction.\n    vec3 refracted = refract(vec3(0, 0, -1), normal, 1.5);\n    vec2 delta = -refracted.xy / refracted.z * 20.;\n    fragColor.rgb += texture(iChannel0, (fragCoord + delta) / 150.).xxx * waterColor;\n}","name":"Image","description":"","type":"image"}]}