{"ver":"0.1","info":{"id":"3lKcRD","date":"1610618221","viewed":164,"name":"The Great Beyond","username":"changwenhan","description":"inspired by Pixar's movie \"Soul\"","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["gif"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 p) {\n    p = fract(p * vec2(324.456, 863.789));\n    p += dot(p, p+89.56);\n    return fract(p.x*p.y);\n}\n\nfloat gauss(float x, float x0, float sx){\n    \n    float arg = x-x0;\n    arg = -1./2.*arg*arg/sx;\n    \n    float a = 1./(pow(2.*3.1415*sx, 0.5));\n    \n    return a*exp(arg);\n}\n\nfloat sun(vec2 uv, float zoom) {\n    // rotate\n    float radian = fract(iTime*.001) * 3.1415926 * 2.;\n    float s = sin(radian);\n    float c = cos(radian);\n    mat2 rotate = mat2(c, -s, s, c);\n    uv *= rotate;\n\n    float density = 500.;\n    uv *= zoom;\n    \n    float col;\n    \n    float distToCenter = length(uv);\n    \n    float cir = smoothstep(.7, .15, distToCenter);\n    float glow = smoothstep(2., .0, distToCenter);\n    \n    col += cir;\n    col += glow*.2;\n    \n    vec2 id = floor(uv*density/zoom);\n\n    float prob = gauss(distToCenter*4.5, 1., 1.);\n    \n    float dots = 1. - step(prob, rand(id));\n    \n    float fade = smoothstep(1.5, .3, length(uv/zoom));\n    col += dots * fade;\n    \n    col = max(min(1., col), 0.);\n    \n    return col;\n}\n\nfloat bridge(vec2 uv) {\n    float col;\n    \n    float t = smoothstep(-0.05, -0.15, uv.y);\n    \n    float l = smoothstep(0.17, 0.12, abs(uv.x/(uv.y-.01)/4.));\n    \n    col = l*t;\n    \n    col = max(min(1., col), 0.);\n    \n    return col;\n}\n\nfloat stairs(vec2 uv) {\n\n    vec2 stair_uv = uv;\n    stair_uv.y += 0.8;\n    stair_uv.y = fract(stair_uv.y*stair_uv.y*stair_uv.y*20.) - .5;\n    \n    float line = smoothstep(0.1, 0., abs(stair_uv.y));\n    float l2 = smoothstep(0.2, 0.1, abs(uv.x/uv.y/3.));\n    float t = smoothstep(-0.05, -0.15, uv.y);\n    float col = l2 * line * t;\n    \n    col = max(min(1., col), 0.);\n    \n    return col;\n}\n\nvec3 soul(vec2 uv) {\n    vec2 b_uv = uv;\n    vec2 h_uv = uv;\n    float col;\n    \n    b_uv.x *= 1.3;\n    b_uv *= 1.6;\n    float body = smoothstep(.1, .09, length(b_uv));\n    col += body;\n    \n    h_uv += vec2(0.,-.08);\n    h_uv *= 1.3;\n    //h_uv.x *= 1.5;\n    float head = smoothstep(.1, .09, length(h_uv));\n    col += head;\n    \n    //h_uv += vec2(0.,-.1);\n    //h_uv.x *= 1.5;\n    //float head = smoothstep(.1, .09, length(h_uv));\n    //col += head;\n    \n    col = max(min(1., col), 0.);\n    \n    vec3 color = vec3(uv.x+.5, uv.y+.5, 1.) * col;\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n    vec2 b_uv = uv;    \n    vec2 s_uv = uv;\n    \n    vec3 pixelColor;\n    \n    float col = 0.;\n    \n    \n    // sun\n    uv += vec2(-.3, -.1);\n    col += sun(uv, 2.*(sin(iTime*.1)*.1+.5));\n    \n    \n    // bridge\n    b_uv += vec2(.01, .05);\n    b_uv.x -= b_uv.y*2.;\n    b_uv += vec2(-.3, -.1);\n    col -= bridge(b_uv+vec2(0., .06)) * .7;\n    col = max(min(1., col), 0.);\n    col += stairs(b_uv+vec2(0., .06)) * .8;\n    \n    col += stairs(b_uv+vec2(0., .06)) * .8;\n    \n    s_uv += vec2(.4, .35);\n    //col += soul(s_uv);\n\n    pixelColor += col;\n    \n    // soul\n    //pixelColor = mix(pixelColor, soul(s_uv), smoothstep(0.,0.6,soul(s_uv))); \n    \n    // Output to screen\n    fragColor = vec4(pixelColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}