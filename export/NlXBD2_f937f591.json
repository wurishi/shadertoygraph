{"ver":"0.1","info":{"id":"NlXBD2","date":"1651458157","viewed":102,"name":"kaleidoscope_arbitrary_sides","username":"HaleyHalcyon","description":"a","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n#define HEX(x) (vec3((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n\nvec3 color(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        HEX(0xb010b0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        HEX(0xb0ffb0),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0.95, 1., fract(x))\n    );\n}\n\nfloat zigzag(float x) {\n    return 1. - (abs(1. - mod(x, 2.0)));\n}\n\n#define REP 5. // how many pairs of reflections do you want\n\n// i am dumb and i can't think of a better way to do this than converting to polar coords and back\nvec2 kaleido(vec2 uv, float tx_rot, float circ_rot) {\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    theta = zigzag(\n        REP * 2. * (\n            theta + circ_rot\n        ) / TAU\n    ) * TAU / (REP * 2.) + tx_rot;\n    uv = r * vec2(\n        cos(theta), sin(theta)\n    );\n    return uv;\n}\n\nvec3 colormap(vec2 uv) {\n    // uncomment to see how the coordinates get reflected and rotated\n    // return fract(uv.xyx * 8.0);\n    \n    return vec3(\n        texture(iChannel0, uv).rgb\n    );\n}\n\nvec3 spiral(vec2 uv, float time) {\n    float logr = log(length(uv));\n    float theta = atan(uv.y, uv.x);\n    return color(\n        fract(\n            logr + 5. * theta / TAU + 3. * time\n        )\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / length(iResolution.xy);\n    float time = fract(iTime / 8.0);\n    vec2 uv_kal = kaleido(uv, time * TAU, -0.25 * TAU);\n    vec3 colSpiral = spiral(\n        uv_kal, time\n    );\n    vec3 colTex = colormap(\n        uv_kal * 0.5 // scale texture\n        + vec2(0.25 * sin(time * TAU), -time) // offset texture\n    );\n\n    fragColor = vec4(colSpiral - colTex.rrr,1.0);\n}","name":"Image","description":"","type":"image"}]}