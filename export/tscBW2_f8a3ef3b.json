{"ver":"0.1","info":{"id":"tscBW2","date":"1607379980","viewed":129,"name":"gradients23","username":"edwardbraed","description":"just a trigonometric gradients set :3","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["set","gradients"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define gray(rgb) (rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114)\n#define cmpv(v, b) (v.x > b.x && v.y > b.y && v.x < (b.x + 1.0) && v.y < (b.y + 1.0))\n#define m_p 3.14155\n#define norm(a) (a + 1.0) * 0.5\n//#define norm(a) abs(a)\n//#define COLORED_OFF\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\n//------------------------------------------------------------\nfloat waves(vec2 p, vec2 s, float t)\n{\n    p *= s * m_p;\n    return norm(sin(sin(p.x - t) - p.y));\n}\n\n//------------------------------------------------------------\nfloat radial(vec2 p, float s, float t)\n{\n\treturn norm(sin(length(p) / s - t));\n}\n\n//------------------------------------------------------------\nfloat spiral(vec2 p, float s, float t)\n{\n    float e = exp(length(p)); /*can also try pow(l,l) or sqrt(l)*/\n    return norm(sin((exp(length(p)) - s * atan(p.y, p.x) - t) / s));\n}\n\n//------------------------------------------------------------\nfloat windmill(vec2 p, float c, float w, float t)\n{\n    float sl = sin(length(p)) * w;\n    return norm(sin((atan(p.x, p.y) / (1.0 / c) - sl) + t));\n}\n\n//------------------------------------------------------------\nfloat angles(vec2 p, float s, float t)\n{\n    return norm(sin(p.x * p.y / s - t));\n}\n\n//------------------------------------------------------------\nfloat radial_waves(vec2 p, float s, vec2 w, float t)\n{\n    float a = atan(p.x, p.y) / (1.0 / w.x);\n    return norm(sin(length(p) / s / norm(sin(a) + w.y) - t));\n}\n\n//------------------------------------------------------------\nfloat windmill_waves(vec2 p, float c, float w, float t)\n{\n    float sl = sin(length(p) * w - t);\n    return norm(sin((atan(p.x, p.y) / (1.0 / c) - sl) + t));\n}\n\n//------------------------------------------------------------\nfloat spiral_waves(vec2 p, float s, float w, float t)\n{\n    float l = exp(sin(length(p)));\n    float a = atan(p.y, p.x);\n    \n    return norm(sin((l - s * (a - sin(a * w - t) + t)) / s));\n}\n\n//------------------------------------------------------------\nfloat double_waves(vec2 p, vec2 s, float w, float t)\n{\n    p *= s * m_p;\n    p += norm(sin(p.y * w - t));\n    return norm(sin(sin(p.x - t)  - p.y));\n}\n//------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspect = calcAspect(iResolution.xy);\n    vec2 auv = uv * aspect;\n    const vec2 cells = vec2(3, 3);\n    vec2 cell = cells * uv;\n    vec2 cc = (floor(cell) + 0.5) / cells * aspect;\n    vec2 v = cc - auv;\n    \n    float g = 0.0;\n    \n    if(cmpv(cell, vec2(0.0, 0.0)))\n    {\n        g = waves(auv, vec2(16.0, 32.0), iTime);\n    }\n    else if(cmpv(cell, vec2(1.0, 0.0)))\n    {\n        g = radial(v, 0.008, iTime);\n    }\n    else if(cmpv(cell, vec2(2.0, 0.0)))\n    {\n        g = windmill(v, 8.0, 40.0, iTime);\n    }\n    else if(cmpv(cell, vec2(0.0, 1.0)))\n    {\n        g = spiral(v, 0.008, iTime * 0.02);\n    }\n    else if(cmpv(cell, vec2(1.0, 1.0))) \n    {\n        g = angles(v, 0.0008, iTime);\n    }\n    else if(cmpv(cell, vec2(2.0, 1.0)))\n    {   \n        g = radial_waves(v, 0.0005, vec2(8.0, 10.0), iTime);\n    }\n    else if(cmpv(cell, vec2(0.0, 2.0)))\n    {\n        g = double_waves(auv, vec2(16.0, 32.0), 1.2, iTime);\n    }\n    else if(cmpv(cell, vec2(1.0, 2.0)))\n    {\n        g = spiral_waves(v, 0.008, 8.0, iTime);\n    }\n    else if(cmpv(cell, vec2(2.0, 2.0)))\n    {\n        g = windmill_waves(v, 8.0, 120.0, iTime);\n    }\n\n    vec2 fc = floor(cell);\n    \n    vec3 col = norm(vec3(sin(iTime + fc.x), sin(iTime + 1.0 + fc.y), sin(iTime + 2.0 + fc.y))) * 2.0;\n    #ifdef COLORED_OFF\n    \tcol = vec3(1.0);\n    #endif\n    // Output to screen\n    fragColor = vec4(col * g, 1.0);\n}","name":"Image","description":"","type":"image"}]}