{"ver":"0.1","info":{"id":"Xtt3D4","date":"1469310403","viewed":472,"name":"Simple Ray Tracer","username":"polkm","description":"A simple ray tracer using distance field marching for the sake of example.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["example","simple","ray","distance","field","march","trace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plane(vec3 p) { return p.y; }\n\nfloat sphere(vec3 p, float r) { return length(p) - r; }\n\nvec4 add(vec4 a, vec4 b) { return a.w < b.w ? a : b; }\n\nvec4 map(vec3 p) {\n    return add(vec4(.3,.3,.2, plane(p)), vec4(.95,.2,.4, sphere(p-vec3(0,1,0), .5)));\n}\n\nconst vec3 e = vec3(.001, 0., 0.);\nfloat nax(vec3 p, vec3 e) { return map(p+e).w - map(p-e).w; }\nvec3 normal(vec3 p) { return normalize(vec3(nax(p,e.xyy), nax(p,e.yxy), nax(p,e.yyx))); }\nconst float tmax = 20.0;\n\nvec4 trace(vec3 ro, vec3 rd, float t, vec4 result) {\n    for (int i=0; i<256; i++)\n        if ((result = map(ro + rd*t)).w < 0.001 || (t += result.w) > tmax) break;\n    return vec4(result.rgb, t);\n}\n\nfloat shadow(vec3 ro, vec3 rd, float t, float d, float res) {\n    for (int i=0; i<11; i++)\n        res = min(res, 8. * (d=map(ro + rd*t).w) / (t += clamp(d,.02,.1)));\n    return clamp(res, 0., 1.);\n}\n\nconst vec3 light = normalize(vec3(.3, .8, -.5));\nvec4 lighting(vec3 ro, vec3 rd, vec3 pos, vec4 res) {\n    res.rgb *= max(dot(normal(ro + rd*res.w), light) * shadow(pos,light,.1,0.,1.), .1);\n    return res = mix(res, vec4(.9,.9,1,1), pow(res.w/tmax,2.));\n}\n\nvec4 render(float time, vec2 uv, vec2 screen) {\n    vec3 ro = vec3(1.5*cos(0.5*(time+3.0)), 1.0 + 0.5*cos((time+3.0)), -4.5);\n    vec3 rd = normalize(vec3(uv * vec2(screen.x/screen.y,1), 3.0));\n    vec4 res = trace(ro, rd, 1.0, vec4(0)); //trace\n    if (res.w < tmax) res = lighting(ro, rd, ro + rd*res.w, res); //apply lighting\n    else res = vec4(mix(vec3(.9,.9,1),vec3(.7,.9,1), rd.y), tmax); //sky\n    res.rgb *= 0.5 + 0.5 * pow((uv.x+1.0)*(uv.y+1.0)*(uv.x-1.0)*(uv.y-1.0), 0.2); //vignett\n    return vec4(pow(res.rgb, vec3(0.4545)), 1); //gamma correction\n}\n\nvec4 renderAA(float time, vec2 uv, vec2 screen) {\n    vec3 pixel = vec3(0.5, 0.5, 0.0) / vec3(screen, 1.0);\n    vec4 sum = vec4(0., 0., 0., 0.);\n    for (int x = -1; x <= 1; x++)\n        for (int y = -1; y <= 1; y++)\n            sum += render(time, uv - pixel.xy * vec2(x, y), screen);\n    return (sum) / 9.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = renderAA(iTime, (fragCoord/vec2(iResolution)*2.-1.), vec2(iResolution));\n}","name":"Image","description":"","type":"image"}]}