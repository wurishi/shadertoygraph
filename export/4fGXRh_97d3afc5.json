{"ver":"0.1","info":{"id":"4fGXRh","date":"1714748328","viewed":42,"name":"2D multi grid w/ zoom, offset","username":"vec3f","description":"several overlapping 2d grids each with different size and line thickness\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 off = vec4(1.0, 1.0, 1.0, 1.0);\nconst vec4 on = vec4(0.0, 0.0, 0.0, 0.1);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 5.0 + 5.0 * sin(iTime); // camera zoom\n    ivec2 offset = ivec2(iTime * 60.0); // camera offset\n    ivec2 uv = ivec2(fragCoord.xy);\n    bool d =false;\n\n\n    int u = 25; // grid 1 size\n    int uw = 1; // grid 1 thickness\n    int u2 = 250; // grid 2 size\n    int uw2 = 11; // grid 2 thickness \n    int u3 = 2500; // grid 3 size\n    int uw3 = 21; // grid 3 thickness \n\n   \n    // when the camera zooms out some lines wont be rendered with naive pixel check, so we improvise here\n    float us = float(uv.x) * scale;\n    float us1 = float(uv.x - 1) * scale;\n    \n    int f = int(us / float(u));\n    int f1 = int(us1 / float(u));\n    int s = int(us);\n    int s1 = int(us1);\n    float nval = float(f * u);\n            \n    if ((int(nval) < s && int(nval) >= s1) || int(nval) == s || int(us) % u2 < uw2 || int(us) % u3 < uw3)  {\n        d =true;\n    }\n    \n      \n    us = float(uv.y) * scale;\n    us1 = float(uv.y - 1) * scale;\n    \n    f = int(us / float(u));\n    f1 = int(us1 / float(u));\n    s = int(us);\n    s1 = int(us1);\n    nval = float(f * u);\n            \n    if ((int(nval) < s && int(nval) >= s1) || int(nval) == s || int(us) % u2 < uw2 || int(us) % u3 < uw3)  {\n        d =true;\n    }\n    // || int(float(uv.y) / scale) % u < uw\n\n    \n    if (d) {\n        fragColor = on;\n    } else {\n        fragColor = off;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}