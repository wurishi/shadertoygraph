{"ver":"0.1","info":{"id":"ctV3WG","date":"1684568923","viewed":1895,"name":"Minecraft + LPV GI","username":"Mathis","description":"Minecraft with LPV GI and SDF voxelized scene\nTexture are stored in 256-sized vec4-arrays, so hopefully it works on most GPU:s\n\nUse WASD and mouse after the camera has stopped to move around","likes":65,"published":1,"flags":48,"usePreview":1,"tags":["global","illumination","voxel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nRendering a minecraft scene\n    Not official ofc :)\n\nInfo:\n    LPV\n        It is used for diffuse indirect light\n        A manual bilinear method is used that prevents interpolated light leaking for all voxel configurations\n            Both visibility occlusion and voxel type is used as weights when interpolating\n    Normal map\n        Calculated from the gradient of the textures\n    Reflections\n        Wavelet denoiser ( :\n    TAA is used as well\n    Textures were extracted using matlab and python\n        A limited amount of blocks are included\n\nControls:\n    WASD and mouse to move/look around\n*/\n\nvec3 acesFilm(vec3 x) {\n    //Aces film curve\n    return clamp((x*(2.51*x+0.03))/(x*(2.43*x+0.59)+0.14),0.,1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 Color = texture(iChannel0,fragCoord*IRES).xyz;\n    fragColor = vec4(pow(acesFilm(max(vec3(0.),Color)),vec3(0.45)),1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Settings\nconst float FOV = radians(85.);\nconst vec3 SkyLight = vec3(0.3,0.55,1.);\nconst vec3 SunLight = vec3(1.,0.55,0.3)*4.5;\n\n//Other vars\nconst float LightCoeff = 8.;\nconst float ILightCoeff = 1./LightCoeff;\nconst float CFOV = tan(FOV*0.5);\nconst float RefCR = 0.075;\nconst float PI = 3.141592653;\nconst float HPI = PI*0.5;\nconst float IPI = 1./PI;\nconst float PI2 = PI*2.;\nconst float IPI2 = 0.5/PI;\nconst float ToRadians = PI/180.;\nconst float I3 = 1./3.;\nconst float I16 = 1./16.;\nconst float I32 = 1./32.;\nconst float I64 = 1./64.;\nconst float I128 = 1./128.;\nconst float I256 = 1./256.;\nconst float I300 = 1./300.;\nconst float I512 = 1./512.;\nconst float I1024 = 1./1024.;\nconst float I2048 = 1./2048.;\nconst vec2 eps = vec2(0.0025,0.);\nconst float LPVForward = 0.24145316170843;\nconst float LPVSide = 0.18443362850791;\n//RES\n#define RES iChannelResolution[0].xy\n#define IRES (1./iChannelResolution[0].xy)\n#define ASPECT vec2(RES.x/RES.y,1.)\n\nconst vec2 SSOffsets[16] = vec2[16](vec2(0.),vec2(-0.4,-0.4),vec2(0.,0.2),vec2(0.15,-0.4),vec2(-0.4,-0.15),\n                                    vec2(0.15,0.4),vec2(-0.2,-0.2),vec2(-0.4,0.4),vec2(0.4,0.15),vec2(0.2,-0.2),\n                                    vec2(0.4,0.4),vec2(-0.4,0.15),vec2(0.4,-0.15),\n                                    vec2(-0.15,0.4),vec2(0.4,-0.4),vec2(-0.15,-0.4));\n\nstruct HIT { float D; vec3 N; vec3 NMN; vec3 C; };\nstruct BRICK { vec3 P; vec3 Q; int C; int I; };\n\n//SDF\nfloat DFBox(vec3 p, vec3 b) {\n    vec3 d = abs(p-b*0.5)-b*0.5;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nfloat DFBoxC(vec3 p, vec3 b) {\n    vec3 d = abs(p)-b;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nfloat DFBox(vec2 p, vec2 b) {\n    vec2 d = abs(p-b*0.5)-b*0.5;\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\nfloat DFBoxC(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\nfloat DFDisk(vec3 p) {\n    float d = length(p.xz-0.5)-0.35;\n    vec2 w = vec2(d,abs(p.y));\n    return min(max(w.x,w.y),0.)+length(max(w,0.));\n}\n\nfloat DFLine(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b-a;\n    float k = dot(p-a,ba)/dot(ba,ba);\n    return length((a+clamp(k,0.,1.)*(b-a))-p);\n}\n\nfloat DFLine(vec2 p, vec2 a, vec2 b, out float k) {\n    vec2 ba = b-a;\n    k = clamp(dot(p-a,ba)/dot(ba,ba),0.,1.);\n    return length((a+k*(b-a))-p);\n}\n\nfloat DFCylinder(vec3 p, float r, float h) {\n    vec2 d = vec2(length(p.xz)-r,abs(p.y)-h);\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\n\nfloat DFPlane(vec3 p, vec3 p0, vec3 p1, vec3 p2) {\n    //Intersects a plane\n    vec3 Normal = normalize(cross(p1-p0,p2-p0));\n    vec3 tp = vec3(dot(p-p0,normalize(p1-p0)),dot(p-p0,normalize(p2-p0)),dot(p-p0,Normal));\n    return DFBox(tp-vec3(0.,0.,-0.005),vec3(length(p1-p0),length(p2-p0),0.01));\n}\n\nvec2 Rotate(vec2 p, float ang) {\n    float c = cos(ang), s = sin(ang);\n    return vec2(p.x*c-p.y*s,p.x*s+p.y*c);\n}\n\nvec2 Repeat(vec2 p, float n) {\n    float ang = 2.*3.14159/n;\n    float sector = floor(atan(p.x,p.y)/ang+0.5);\n    p = Rotate(p,sector*ang);\n    return p;\n}\n\nfloat smin(float a, float b, float k) {\n    //https://iquilezles.org/articles/smin\n    float h = max(k-abs(a-b),0.)/k;\n    return min(a,b)-h*h*h*k*(1.0/6.0);\n}\n\nmat3 TBN(vec3 N) {\n    vec3 Nb,Nt;\n    if (abs(N.y)>0.999) {\n        Nb=vec3(1.,0.,0.);\n        Nt=vec3(0.,0.,1.);\n    } else {\n    \tNb=normalize(cross(N,vec3(0.,1.,0.)));\n    \tNt=normalize(cross(Nb,N));\n    }\n    return mat3(Nb.x,Nt.x,N.x,Nb.y,Nt.y,N.y,Nb.z,Nt.z,N.z);\n}\n\nvec3 TBN(vec3 N, out vec3 O) {\n    O = ((abs(N.y)<=0.999)?normalize(cross(N,vec3(0.,1.,0.))):vec3(1.,0.,0.));\n    return normalize(cross(O,N));\n}\n\nvec3 RandSample(vec2 v) {\n    float r=sqrt(1.-v.x*v.x);\n    float phi=2.*3.14159*v.y;\n    return vec3(cos(phi)*r,sin(phi)*r,v.x);\n}\n\nvec3 RandSampleCos(vec2 v) {\n    float theta=sqrt(v.x);\n    float phi=2.*3.14159*v.y;\n    float x=theta*cos(phi);\n    float z=theta*sin(phi);\n    return vec3(x,z,sqrt(max(0.,1.-v.x)));\n}\n\nvec3 SchlickFresnel(vec3 r0, float angle) {\n    //Schlick Fresnel approximation\n    return r0+(1.-r0)*pow(1.-angle,5.);\n}\n\nvec3 ARand23(vec2 uv) {\n    //Analytic random\n    return fract(sin(uv.x*uv.y)*vec3(403.125,486.125,513.432)+cos(dot(uv,vec2(13.18273,51.2134)))*vec3(173.137,261.23,203.127));\n}\n\nfloat ARand21(vec2 uv) {\n    //Analytic random\n    return fract(sin(uv.x*uv.y)*403.125+cos(dot(uv,vec2(13.18273,51.2134)))*173.137);\n}\n\nvec2 ABox(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax) {\n    vec2 tMin = (bmin-origin)*dir;\n    vec2 tMax = (bmax-origin)*dir;\n    vec2 t1 = min(tMin,tMax);\n    vec2 t2 = max(tMin,tMax);\n    return vec2(max(t1.x,t1.y),min(t2.x,t2.y));\n}\n\nvec2 ABox(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t1 = min(tMin,tMax);\n    vec3 t2 = max(tMin,tMax);\n    return vec2(max(max(t1.x,t1.y),t1.z),min(min(t2.x,t2.y),t2.z));\n}\n\nfloat ABoxfar(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax) {\n    vec2 tMin = (bmin-origin)*dir;\n    vec2 tMax = (bmax-origin)*dir;\n    vec2 t2 = max(tMin,tMax);\n    return min(t2.x,t2.y);\n}\n\nfloat ABoxfar(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t2 = max(tMin,tMax);\n    return min(min(t2.x,t2.y),t2.z);\n}\n\nvec2 ABoxfarNormal(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax, out float dist) {\n    vec2 tMin = (bmin-origin)*dir;\n    vec2 tMax = (bmax-origin)*dir;\n    vec2 t2 = max(tMin,tMax);\n    dist = min(t2.x,t2.y);\n    vec2 signdir = (max(vec2(0.),sign(dir))*2.-1.);\n    if (t2.x<t2.y) return vec2(signdir.x,0.);\n    else return vec2(0.,signdir.y);\n}\n\nvec3 ABoxfarNormal(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax, out float dist) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t2 = max(tMin,tMax);\n    dist = min(min(t2.x,t2.y),t2.z);\n    vec3 signdir = (max(vec3(0.),sign(dir))*2.-1.);\n    if (t2.x<min(t2.y,t2.z)) return vec3(signdir.x,0.,0.);\n    else if (t2.y<t2.z) return vec3(0.,signdir.y,0.);\n    else return vec3(0.,0.,signdir.z);\n}\n\nvec2 ABoxNormal(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax, out vec3 N) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t1 = min(tMin,tMax);\n    vec3 t2 = max(tMin,tMax);\n    vec3 signdir = -(max(vec3(0.),sign(dir))*2.-1.);\n    if (t1.x>max(t1.y,t1.z)) N = vec3(signdir.x,0.,0.);\n    else if (t1.y>t1.z) N = vec3(0.,signdir.y,0.);\n    else N = vec3(0.,0.,signdir.z);\n    return vec2(max(max(t1.x,t1.y),t1.z),min(min(t2.x,t2.y),t2.z));\n}\n\nvec3 ABoxNormal(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t1 = min(tMin,tMax);\n    vec3 t2 = max(tMin,tMax);\n    vec3 signdir = -(max(vec3(0.),sign(dir))*2.-1.);\n    if (t1.x>max(t1.y,t1.z)) return vec3(signdir.x,0.,0.);\n    else if (t1.y>t1.z) return vec3(0.,signdir.y,0.);\n    else return vec3(0.,0.,signdir.z);\n}\n\n//Non-optimal vec2/vec3 to float functions\nvec3 FloatToVec3(float v) {\n    float x = fract(v);\n    float z = floor(v*I300);\n    float y = (floor(v-z*300.)+0.5)*I300;\n    return vec3(x,y,(z+0.5)*I300);\n}\n\nfloat Vec3ToFloat(vec3 v) {\n    return min(v.x,0.998)+min(299.,floor(v.y*300.+0.5))+floor(v.z*300.+0.5)*300.;\n}\n\nvec2 FloatToVec2(float v) {\n    return vec2(floor(fract(v)*8192.+0.5)/8192.,(floor(v)+0.5)/8192.);\n}\n\nfloat Vec2ToFloat(vec2 v) {\n    return min(v.x,0.999)+min(floor(v.y*8192.),8192.);\n}\n\n//SKY\nvec3 SampleSky(vec3 d, float Time) {\n    vec3 L = SkyLight*(1.-0.5*d.y)*(d.y*0.5+0.5);\n    return L;\n}\n\n//Textures\nconst lowp vec4 TexStone[256] = vec4[256](\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.32,0.32,0.32,1.0),\nvec4(0.46,0.46,0.46,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.41,0.41,0.41,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.4,0.4,0.4,1.0),\nvec4(0.54,0.54,0.54,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.45,0.45,0.45,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.37,0.37,0.37,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.42,0.42,0.42,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.39,0.39,0.39,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.65,0.65,0.65,1.0),\nvec4(0.55,0.55,0.55,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.4,0.4,0.4,1.0),\nvec4(0.45,0.45,0.45,1.0),\nvec4(0.51,0.51,0.51,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.47,0.47,0.47,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.61,0.61,0.61,1.0),\nvec4(0.6,0.6,0.6,1.0),\nvec4(0.59,0.59,0.59,1.0),\nvec4(0.34,0.34,0.34,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.56,0.56,0.56,1.0),\nvec4(0.67,0.67,0.67,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.51,0.51,0.51,1.0),\nvec4(0.51,0.51,0.51,1.0),\nvec4(0.35,0.35,0.35,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.35,0.35,0.35,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.68,0.68,0.68,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.45,0.45,0.45,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.68,0.68,0.68,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.56,0.56,0.56,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.32,0.32,0.32,1.0),\nvec4(0.35,0.35,0.35,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.41,0.41,0.41,1.0),\nvec4(0.35,0.35,0.35,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.55,0.55,0.55,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.4,0.4,0.4,1.0),\nvec4(0.44,0.44,0.44,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.42,0.42,0.42,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.30,0.30,0.30,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.67,0.67,0.67,1.0),\nvec4(0.58,0.58,0.58,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.56,0.56,0.56,1.0),\nvec4(0.42,0.42,0.42,1.0),\nvec4(0.60,0.60,0.60,1.0),\nvec4(0.54,0.54,0.54,1.0),\nvec4(0.39,0.39,0.39,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.47,0.47,0.47,1.0),\nvec4(0.46,0.46,0.46,1.0),\nvec4(0.45,0.45,0.45,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.30,0.30,0.30,1.0),\nvec4(0.29,0.29,0.29,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.65,0.65,0.65,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.44,0.44,0.44,1.0),\nvec4(0.32,0.32,0.32,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.46,0.46,0.46,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.61,0.61,0.61,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.47,0.47,0.47,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.55,0.55,0.55,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.56,0.56,0.56,1.0),\nvec4(0.36,0.36,0.36,1.0),\nvec4(0.35,0.35,0.35,1.0),\nvec4(0.68,0.68,0.68,1.0),\nvec4(0.48,0.48,0.48,1.0),\nvec4(0.44,0.44,0.44,1.0),\nvec4(0.68,0.68,0.68,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.67,0.67,0.67,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.74,0.74,0.74,1.0),\nvec4(0.61,0.61,0.61,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.56,0.56,0.56,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.6,0.6,0.6,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.31,0.31,0.31,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.60,0.60,0.60,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.43,0.43,0.43,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.60,0.60,0.60,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.44,0.44,0.44,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.50,0.50,0.50,1.0),\nvec4(0.56,0.56,0.56,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.34,0.34,0.34,1.0),\nvec4(0.64,0.64,0.64,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.32,0.32,0.32,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.62,0.62,0.62,1.0),\nvec4(0.47,0.47,0.47,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.32,0.32,0.32,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.57,0.57,0.57,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.33,0.33,0.33,1.0),\nvec4(0.39,0.39,0.39,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.59,0.59,0.59,1.0),\nvec4(0.51,0.51,0.51,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.67,0.67,0.67,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.40,0.40,0.40,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.52,0.52,0.52,1.0),\nvec4(0.69,0.69,0.69,1.0),\nvec4(0.55,0.55,0.55,1.0),\nvec4(0.55,0.55,0.55,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.39,0.39,0.39,1.0),\nvec4(0.38,0.38,0.38,1.0),\nvec4(0.69,0.69,0.69,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.43,0.43,0.43,1.0),\nvec4(0.66,0.66,0.66,1.0),\nvec4(0.63,0.63,0.63,1.0),\nvec4(0.49,0.49,0.49,1.0),\nvec4(0.39,0.39,0.39,1.0),\nvec4(0.32,0.32,0.32,1.0),\nvec4(0.35,0.35,0.35,1.0),\nvec4(0.42,0.42,0.42,1.0),\nvec4(0.65,0.65,0.65,1.0),\nvec4(0.69,0.69,0.69,1.0)\n);\n\nconst lowp vec4 TexWoodTree[256] = vec4[256](\nvec4(0.36,0.29,0.18,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.39,0.30,0.18,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.21,0.16,0.09,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.39,0.31,0.18,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.22,0.17,0.10,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.59,0.46,0.28,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.57,0.44,0.26,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.59,0.47,0.28,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.39,0.31,0.18,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.36,0.29,0.18,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.43,0.34,0.21,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.38,0.30,0.17,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.61,0.48,0.30,1.0),\nvec4(0.22,0.17,0.10,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.22,0.17,0.09,1.0),\nvec4(0.4,0.31,0.18,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.21,0.16,0.09,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.39,0.31,0.18,1.0),\nvec4(0.59,0.46,0.28,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.38,0.30,0.17,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.59,0.47,0.28,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.43,0.35,0.22,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.25,0.20,0.13,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.21,0.16,0.09,1.0),\nvec4(0.36,0.29,0.18,1.0),\nvec4(0.61,0.49,0.30,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.59,0.46,0.28,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.60,0.48,0.29,1.0),\nvec4(0.27,0.21,0.14,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.58,0.46,0.27,1.0),\nvec4(0.22,0.17,0.10,1.0),\nvec4(0.39,0.30,0.18,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.36,0.29,0.18,1.0),\nvec4(0.62,0.49,0.31,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.60,0.48,0.29,1.0),\nvec4(0.26,0.21,0.13,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.61,0.48,0.30,1.0),\nvec4(0.27,0.22,0.14,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.25,0.20,0.13,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.22,0.17,0.09,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.25,0.20,0.13,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.6,0.47,0.29,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.43,0.35,0.22,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.25,0.20,0.13,1.0),\nvec4(0.57,0.45,0.26,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.60,0.48,0.29,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.6,0.47,0.29,1.0),\nvec4(0.22,0.17,0.10,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.4,0.31,0.18,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.43,0.34,0.21,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.59,0.46,0.28,1.0),\nvec4(0.38,0.30,0.17,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.56,0.44,0.25,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.34,0.27,0.17,1.0),\nvec4(0.21,0.16,0.09,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.43,0.34,0.21,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.36,0.29,0.18,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.4,0.31,0.18,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.4,0.31,0.18,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.56,0.43,0.25,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.43,0.34,0.21,1.0),\nvec4(0.25,0.20,0.13,1.0),\nvec4(0.41,0.33,0.20,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.27,0.21,0.14,1.0),\nvec4(0.38,0.30,0.17,1.0),\nvec4(0.25,0.2,0.12,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.59,0.47,0.28,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.59,0.47,0.28,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.61,0.48,0.30,1.0),\nvec4(0.25,0.20,0.13,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.22,0.17,0.10,1.0),\nvec4(0.36,0.29,0.18,1.0),\nvec4(0.39,0.30,0.18,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.6,0.47,0.29,1.0),\nvec4(0.24,0.19,0.11,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.59,0.47,0.28,1.0),\nvec4(0.23,0.18,0.10,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.6,0.47,0.29,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.39,0.31,0.18,1.0),\nvec4(0.43,0.35,0.22,1.0),\nvec4(0.21,0.16,0.09,1.0),\nvec4(0.24,0.19,0.12,1.0),\nvec4(0.59,0.47,0.28,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.4,0.31,0.18,1.0),\nvec4(0.6,0.47,0.29,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.60,0.47,0.29,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.27,0.22,0.14,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.60,0.48,0.29,1.0),\nvec4(0.23,0.18,0.11,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.58,0.45,0.27,1.0),\nvec4(0.25,0.20,0.12,1.0),\nvec4(0.4,0.31,0.18,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.40,0.32,0.19,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.42,0.34,0.21,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.61,0.48,0.30,1.0)\n);\n\nconst lowp vec4 TexBooks[256] = vec4[256](\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.52,0.21,0.03,1.0),\nvec4(0.46,0.18,0.02,1.0),\nvec4(0.38,0.15,0.01,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.25,0.19,0.10,1.0),\nvec4(0.65,0.60,0.03,1.0),\nvec4(0.53,0.49,0.03,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.52,0.21,0.03,1.0),\nvec4(0.46,0.18,0.02,1.0),\nvec4(0.38,0.15,0.01,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.65,0.60,0.03,1.0),\nvec4(0.53,0.49,0.03,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.52,0.21,0.03,1.0),\nvec4(0.46,0.18,0.02,1.0),\nvec4(0.38,0.15,0.01,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.70,0.70,0.70,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.52,0.21,0.03,1.0),\nvec4(0.46,0.18,0.02,1.0),\nvec4(0.38,0.15,0.01,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.25,0.19,0.10,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.70,0.70,0.70,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.24,0.18,0.09,1.0),\nvec4(0.24,0.18,0.09,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.65,0.60,0.03,1.0),\nvec4(0.53,0.49,0.03,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.24,0.18,0.09,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.04,0.41,0.31,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.28,0.28,0.28,1.0),\nvec4(0.24,0.24,0.24,1.0),\nvec4(0.25,0.19,0.10,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.04,0.41,0.31,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.28,0.28,0.28,1.0),\nvec4(0.24,0.24,0.24,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.24,0.18,0.09,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.70,0.70,0.70,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.70,0.70,0.70,1.0),\nvec4(0.53,0.53,0.53,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.06,0.55,0.41,1.0),\nvec4(0.04,0.41,0.31,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.08,0.08,1.0),\nvec4(0.56,0.06,0.06,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.19,0.35,0.55,1.0),\nvec4(0.16,0.30,0.47,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.21,0.16,0.08,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.24,0.18,0.09,1.0),\nvec4(0.25,0.19,0.10,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.45,0.55,0.06,1.0),\nvec4(0.36,0.44,0.05,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.15,0.11,0.06,1.0),\nvec4(0.17,0.13,0.07,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0)\n);\n\nconst lowp vec4 TexWood[256] = vec4[256](\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.48,0.38,0.24,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.29,0.23,0.14,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.41,0.32,0.2,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.45,0.36,0.22,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.70,0.56,0.35,1.0),\nvec4(0.62,0.51,0.30,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.73,0.59,0.38,1.0),\nvec4(0.62,0.51,0.30,1.0)\n);\n\nconst lowp vec4 TexBricks[256] = vec4[256](\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.53,0.52,1.0),\nvec4(0.59,0.52,0.50,1.0),\nvec4(0.61,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.69,0.62,0.6,1.0),\nvec4(0.62,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.60,0.53,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.62,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.67,0.6,0.58,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.41,0.23,0.18,1.0),\nvec4(0.52,0.29,0.22,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.69,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.50,0.28,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.50,0.27,0.21,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.47,0.26,0.20,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.41,0.23,0.18,1.0),\nvec4(0.67,0.59,0.57,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.47,0.26,0.20,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.49,0.27,0.21,1.0),\nvec4(0.50,0.27,0.21,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.61,0.34,0.27,1.0),\nvec4(0.62,0.34,0.27,1.0),\nvec4(0.66,0.36,0.29,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.57,0.31,0.24,1.0),\nvec4(0.67,0.59,0.57,1.0),\nvec4(0.58,0.32,0.25,1.0),\nvec4(0.69,0.38,0.30,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.59,0.32,0.25,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.61,0.34,0.27,1.0),\nvec4(0.72,0.64,0.61,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.6,0.52,0.49,1.0),\nvec4(0.69,0.62,0.6,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.69,0.62,0.60,1.0),\nvec4(0.61,0.53,0.52,1.0),\nvec4(0.62,0.55,0.53,1.0),\nvec4(0.60,0.53,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.53,0.29,0.23,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.53,0.29,0.22,1.0),\nvec4(0.71,0.63,0.61,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.37,0.20,0.16,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.41,0.23,0.18,1.0),\nvec4(0.50,0.28,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.68,0.60,0.58,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.52,0.29,0.22,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.67,0.6,0.58,1.0),\nvec4(0.58,0.32,0.25,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.52,0.29,0.22,1.0),\nvec4(0.53,0.29,0.23,1.0),\nvec4(0.47,0.26,0.20,1.0),\nvec4(0.67,0.59,0.57,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.53,0.29,0.22,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.62,0.34,0.27,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.59,0.32,0.25,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.63,0.35,0.27,1.0),\nvec4(0.69,0.38,0.30,1.0),\nvec4(0.62,0.34,0.27,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.69,0.38,0.30,1.0),\nvec4(0.49,0.27,0.21,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.53,0.52,1.0),\nvec4(0.62,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.69,0.62,0.6,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.60,0.53,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.69,0.62,0.6,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.38,0.21,0.16,1.0),\nvec4(0.53,0.29,0.22,1.0),\nvec4(0.43,0.23,0.18,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.39,0.21,0.16,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.70,0.63,0.60,1.0),\nvec4(0.65,0.36,0.27,1.0),\nvec4(0.43,0.23,0.18,1.0),\nvec4(0.51,0.28,0.22,1.0),\nvec4(0.46,0.25,0.19,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.68,0.60,0.58,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.60,0.33,0.25,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.41,0.23,0.18,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.47,0.26,0.20,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.45,0.24,0.19,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.42,0.23,0.18,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.69,0.62,0.6,1.0),\nvec4(0.53,0.29,0.23,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.57,0.31,0.24,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.64,0.35,0.27,1.0),\nvec4(0.64,0.35,0.27,1.0),\nvec4(0.62,0.34,0.27,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.68,0.60,0.58,1.0),\nvec4(0.62,0.55,0.53,1.0),\nvec4(0.62,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.69,0.62,0.6,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.60,0.53,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.62,0.54,0.52,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.70,0.63,0.61,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.61,0.54,0.51,1.0),\nvec4(0.60,0.53,0.51,1.0),\nvec4(0.63,0.56,0.54,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.54,0.30,0.23,1.0),\nvec4(0.41,0.23,0.18,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.49,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.45,0.24,0.19,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.50,0.28,0.21,1.0),\nvec4(0.56,0.31,0.24,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.55,0.30,0.23,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.52,0.29,0.22,1.0),\nvec4(0.71,0.64,0.62,1.0),\nvec4(0.69,0.38,0.30,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.43,0.23,0.18,1.0),\nvec4(0.40,0.22,0.17,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.46,0.25,0.19,1.0),\nvec4(0.51,0.28,0.22,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.49,0.27,0.21,1.0),\nvec4(0.48,0.27,0.21,1.0),\nvec4(0.49,0.27,0.21,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.57,0.31,0.24,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.67,0.6,0.58,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.61,0.34,0.27,1.0),\nvec4(0.56,0.31,0.24,1.0),\nvec4(0.64,0.35,0.27,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.66,0.36,0.29,1.0),\nvec4(0.55,0.30,0.23,1.0),\nvec4(0.68,0.61,0.59,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.64,0.35,0.27,1.0),\nvec4(0.60,0.33,0.26,1.0),\nvec4(0.60,0.33,0.26,1.0)\n);\n\nconst lowp vec4 TexGlass[256] = vec4[256](\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.75,0.96,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.70,0.83,0.85,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.99,0.99,0.99,1.0),\nvec4(0.75,0.96,0.99,1.0)\n);\n\nconst lowp vec4 TexSapling1[256] = vec4[256](\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.43,0.32,0.18,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.45,0.34,0.19,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.14,0.43,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.12,0.39,0.09,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.45,0.34,0.19,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.45,0.33,0.19,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.45,0.33,0.19,1.0),\nvec4(0.45,0.33,0.19,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.12,0.39,0.09,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.33,0.23,0.10,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.43,0.32,0.18,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.43,0.32,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.12,0.39,0.09,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.29,0.19,0.07,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.35,0.24,0.11,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.14,0.43,0.12,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.49,0.38,0.22,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.25,0.56,0.18,1.0),\nvec4(0.06,0.32,0.06,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.34,0.67,0.24,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0)\n);\n\nconst lowp vec4 TexSapling2[256] = vec4[256](\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.16,0.29,0.04,1.0),\nvec4(0.16,0.29,0.04,1.0),\nvec4(0.18,0.18,0.03,1.0),\nvec4(0.13,0.14,0.02,1.0),\nvec4(0.09,0.12,0.01,1.0),\nvec4(0.09,0.12,0.01,1.0),\nvec4(0.12,0.18,0.03,1.0),\nvec4(0.16,0.29,0.04,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.16,0.29,0.04,1.0),\nvec4(0.18,0.18,0.03,1.0),\nvec4(0.12,0.16,0.02,1.0),\nvec4(0.16,0.29,0.04,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.17,0.47,0.08,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.12,0.16,0.02,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.16,0.20,0.03,1.0),\nvec4(0.17,0.47,0.08,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.18,0.18,0.03,1.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.17,0.47,0.08,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.12,0.16,0.02,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.19,0.20,0.03,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.12,0.16,0.02,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.16,0.20,0.03,1.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.19,0.20,0.03,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.17,0.42,0.09,1.0),\nvec4(0.18,0.18,0.03,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.15,0.41,0.07,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.17,0.47,0.08,1.0),\nvec4(0.18,0.18,0.03,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.15,0.41,0.07,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.15,0.41,0.07,1.0),\nvec4(0.15,0.41,0.07,1.0),\nvec4(0.16,0.20,0.03,1.0),\nvec4(0.15,0.41,0.07,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.17,0.47,0.08,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.16,0.20,0.03,1.0),\nvec4(0.17,0.47,0.08,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.22,0.23,0.05,1.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.21,0.50,0.12,1.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0),\nvec4(0.0,0.0,0.0,0.0)\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Storage, primary rays and reflection ray\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign = -mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D = vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D = D.xzy;\n    else if (UV.y>2048.) D = D.zxy;\n    return texture(iChannel3,D);\n}\n\nvoid UpdateMouse(inout vec4 Output, vec4 Mouse) {\n    //Updates the mouse\n    if (Mouse.z>0.) {\n        if (Output.w==0.) {\n            Output.w = 1.;\n            Output.xy = Mouse.zw;\n        }\n    } else Output.w = 0.;\n}\n\nvoid UpdateEye(inout vec4 Output, vec4 CMouse, vec4 Mouse) {\n    //Updates the eye vector\n    if (CMouse.w==0.)  Output.zw = Output.xy;\n    if (CMouse.w==1.) {\n        //Y led\n        Output.x = Output.z+(Mouse.y-CMouse.y)*IRES.y*5.;\n        Output.x = clamp(Output.x,-2.8*0.5,2.8*0.5);\n        //X led\n        Output.y = Output.w-(Mouse.x-CMouse.x)*IRES.x*10.;\n        Output.y = mod(Output.y,3.1415926*2.);\n    }\n}\n\nHIT Trace(vec3 P, vec3 D, float Time) {\n    //Traces a ray through the quad tree\n    HIT OUT = HIT(100000.,vec3(0.),vec3(0.),vec3(-1.));\n    vec3 IDir = 1./D;\n    float bbDF = DFBox(P,vec3(32.));\n    vec2 bb = ABox(P,IDir,vec3(0.0001),vec3(31.9999));\n    if (bbDF>0. && (bb.x<0. || bb.y<bb.x)) return OUT;\n    float FAR = bb.y;\n    float t = ((bbDF<0.)?0.:bb.x+0.001);\n    float LFar = FAR; vec3 cp; vec4 C;\n    float LOD = 0.;\n    float LS = 1.;\n    float ILS = 1.;\n    vec4 Albedo; vec3 Normal,NTan,NBit; vec2 AUV,AUVOff;\n    vec3 fp = floor((P+D*t)*ILS)*LS;\n    for (int i=0; i<256; i++) {\n        if (t>FAR) break;\n        cp = P+D*t;\n        C = textureCube(vec2(fp.x+fp.y*32.+0.5,fp.z+0.5));\n        if (C.x<-0.5) {\n        } else if (C.x>50.) {\n            bb = ABox(P,IDir,fp,fp+1.);\n            if (bb.x>=0. && bb.y>bb.x) return HIT(bb.x,vec3(0.),vec3(0.),vec3(2.));\n        } else if (C.x<8.5) {\n            if (C.x<5.5 || C.x>50.) bb = ABox(P,IDir,fp,fp+1.);\n            else if (C.x<8.5) bb = ABox(P,IDir,fp+vec3(0.5-I16,0.,0.),fp+vec3(0.5+I16,1.,1.));\n            if (bb.x>=0. && bb.y>bb.x) {\n                if (C.x<5.5) Normal = ABoxNormal(P,IDir,fp,fp+1.);\n                else if (C.x<8.5) Normal = ABoxNormal(P,IDir,fp+vec3(0.5-I16,0.,0.),fp+vec3(0.5+I16,1.,1.));\n                vec3 PPos = P+D*bb.x;\n                vec3 AN = abs(Normal);\n                if (max(AN.x,AN.z)>AN.y) {\n                    NBit = vec3(0.,1.,0.);\n                    if (AN.x>AN.z) NTan = vec3(0.,0.,1.);\n                    else NTan = vec3(1.,0.,0.);\n                } else {\n                    NTan = vec3(1.,0.,0.);\n                    NBit = vec3(0.,0.,1.);\n                }\n                vec2 aUV = vec2(dot(PPos-fp,NTan),dot(PPos-fp,NBit));\n                vec3 AlbedoSample = fp+0.5;\n                AUV = clamp(floor(aUV*16.)+0.5,vec2(0.5),vec2(15.5));\n                AUVOff = vec2(16.*textureCube(vec2(AlbedoSample.x+floor(AlbedoSample.y)*32.,AlbedoSample.z)).x,256.);\n                Albedo = textureCube(AUV+AUVOff);\n                if (C.x>50.) Albedo = vec4(2.);\n                if (Albedo.w>0.1) {\n                    //Non-transparent pixel\n                    vec3 NMN = normalize(\n                            dot(textureCube(clamp(AUV+vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NTan+\n                            dot(textureCube(clamp(AUV+vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NBit+\n                            Normal);\n                    OUT =  HIT(bb.x,Normal,NMN,Albedo.xyz);\n                    break;\n                }\n            }\n        } else {\n            //First plane\n            float t0 = -dot(P.xz-fp.xz-0.5,vec2(0.707))/dot(D.xz,vec2(0.707));\n            if (t0>0. && abs(dot(P.xz-fp.xz-0.5+D.xz*t0,vec2(-0.707,0.707)))<0.5 && abs(P.y-fp.y-0.5+D.y*t0)<0.5) {\n                vec3 PPos = P+D*t0;\n                Normal = vec3(0.70710678,0.,0.70710678);\n                Normal *= (max(0.,sign(dot(Normal.xz,-D.xz)))*2.-1.);\n                NTan = vec3(Normal.z,0.,-Normal.x);\n                NBit = vec3(0.,1.,0.);\n                vec2 aUV = vec2(dot(PPos-fp-0.5,NTan)+0.5,PPos.y-fp.y);\n                vec3 AlbedoSample = fp+0.5;\n                AUV = clamp(floor(aUV*16.)+0.5,vec2(0.5),vec2(15.5));\n                AUVOff = vec2(16.*textureCube(vec2(AlbedoSample.x+floor(AlbedoSample.y)*32.,AlbedoSample.z)).x,256.);\n                Albedo = textureCube(AUV+AUVOff);\n                if (Albedo.w>0.1) {\n                    //Non-transparent pixel\n                    vec3 NMN = normalize(\n                            dot(textureCube(clamp(AUV+vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NTan+\n                            dot(textureCube(clamp(AUV+vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NBit+\n                            Normal);\n                    OUT =  HIT(t0,Normal,NMN,Albedo.xyz);\n                }\n            }\n            //Second plane\n            t0 = -dot(P.xz-fp.xz-0.5,vec2(-0.707,0.707))/dot(D.xz,vec2(-0.707,0.707));\n            if (t0>0. && abs(dot(P.xz-fp.xz-0.5+D.xz*t0,vec2(0.707)))<0.5 &&\n                abs(P.y-fp.y-0.5+D.y*t0)<0.5 && (OUT.C.x<-0.5 || t0<OUT.D)) {\n                vec3 PPos = P+D*t0;\n                Normal = vec3(-0.70710678,0.,0.70710678);\n                Normal *= (max(0.,sign(dot(Normal.xz,-D.xz)))*2.-1.);\n                NTan = vec3(Normal.z,0.,-Normal.x);\n                NBit = vec3(0.,1.,0.);\n                vec2 aUV = vec2(dot(PPos-fp-0.5,NTan)+0.5,PPos.y-fp.y);\n                vec3 AlbedoSample = fp+0.5;\n                AUV = clamp(floor(aUV*16.)+0.5,vec2(0.5),vec2(15.5));\n                AUVOff = vec2(16.*textureCube(vec2(AlbedoSample.x+floor(AlbedoSample.y)*32.,AlbedoSample.z)).x,256.);\n                Albedo = textureCube(AUV+AUVOff);\n                if (Albedo.w>0.1) {\n                    //Non-transparent pixel\n                    vec3 NMN = normalize(\n                            dot(textureCube(clamp(AUV+vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NTan+\n                            dot(textureCube(clamp(AUV+vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NBit+\n                            Normal);\n                    OUT =  HIT(t0,Normal,NMN,Albedo.xyz);\n                }\n            }\n            if (OUT.C.x>-0.5) break;\n        }\n        fp += ABoxfarNormal(P,IDir,fp,fp+LS,t)*LS;\n    }\n    //Return\n    return  OUT;\n}\n\nvec3 WeightedLPVSample(vec2 InputUV, float YFrac, float[8] OW) {\n    vec3 OUT = vec3(0.);\n    float XFrac = fract(InputUV.x);\n    float ZFrac = fract(InputUV.y);\n    vec2 UV = floor(InputUV)+0.5;\n    vec4 C0 = textureCube(UV)*OW[0];\n    vec4 C1 = textureCube(UV+vec2(1.,0.))*OW[1];\n    vec4 C2 = textureCube(UV+vec2(0.,1.))*OW[4];\n    vec4 C3 = textureCube(UV+vec2(1.,1.))*OW[5];\n    vec4 CYLow = mix(mix(C0*C0.w,C1*C1.w,XFrac),mix(C2*C2.w,C3*C3.w,XFrac),ZFrac)/\n                 (0.05+mix(mix(C0.w,C1.w,XFrac),mix(C2.w,C3.w,XFrac),ZFrac));\n    C0 = textureCube(UV+vec2(32.,0.))*OW[2];\n    C1 = textureCube(UV+vec2(33.,0.))*OW[3];\n    C2 = textureCube(UV+vec2(32.,1.))*OW[6];\n    C3 = textureCube(UV+vec2(33.,1.))*OW[7];\n    vec4 CYHigh = mix(mix(C0*C0.w,C1*C1.w,XFrac),mix(C2*C2.w,C3*C3.w,XFrac),ZFrac)/\n                 (0.05+mix(mix(C0.w,C1.w,XFrac),mix(C2.w,C3.w,XFrac),ZFrac));\n    return mix(CYLow.xyz*CYLow.w,CYHigh.xyz*CYHigh.w,YFrac)/(0.05+mix(CYLow.w,CYHigh.w,YFrac));\n}\n\nvec3 IntegrateLPV(vec3 P, vec3 N) {\n    //Samples the LPV\n    vec2 lpvUV = vec2(P.x-0.5+floor(P.y-0.5)*32.,P.z+64.-0.5);\n    float YFrac = fract(P.y-0.5);\n    //Init weights\n    ivec3 FP = ivec3(floor(fract(P-0.5)*2.)); \n    vec3 Diag3 = vec3(1-FP)*2.-1.;\n    float OW[8] = float[8](0.,0.,0.,0.,0.,0.,0.,0.);\n    OW[FP.x+FP.y*2+FP.z*4] = 1.; //Current voxel\n    OW[(FP.x+1)%2+FP.y*2+FP.z*4] = 1.; //Side in X\n    OW[FP.x+((FP.y+1)%2)*2+FP.z*4] = 1.; //Side in Y\n    OW[FP.x+FP.y*2+((FP.z+1)%2)*4] = 1.; //Side in Z\n    //Occlusion check\n    vec2 FUV = vec2(floor(P.x)+floor(P.y)*32.+0.5,floor(P.z)+64.5);\n    float WallX = textureCube(vec2(FUV.x+Diag3.x,FUV.y)).w;\n    float WallY = textureCube(vec2(FUV.x+32.*Diag3.y,FUV.y)).w;\n    float WallZ = textureCube(vec2(FUV.x,FUV.y+Diag3.z)).w;\n    OW[FP.x+((FP.y+1)%2)*2+((FP.z+1)%2)*4] = max(WallY,WallZ);\n    OW[((FP.x+1)%2)+((FP.y+1)%2)*2+FP.z*4] = max(WallX,WallY);\n    OW[((FP.x+1)%2)+FP.y*2+((FP.z+1)%2)*4] = max(WallX,WallZ);\n    OW[((FP.x+1)%2)+((FP.y+1)%2)*2+((FP.z+1)%2)*4] = max(max(WallX,WallY),WallZ);\n    //Sample LPV\n    vec3 LXP = WeightedLPVSample(lpvUV,YFrac,OW);\n    vec3 LXN = WeightedLPVSample(lpvUV+vec2(0.,32.),YFrac,OW);\n    vec3 LYP = WeightedLPVSample(lpvUV+vec2(0.,64.),YFrac,OW);\n    vec3 LYN = WeightedLPVSample(lpvUV+vec2(0.,96.),YFrac,OW);\n    vec3 LZP = WeightedLPVSample(lpvUV+vec2(0.,128.),YFrac,OW);\n    vec3 LZN = WeightedLPVSample(lpvUV+vec2(0.,160.),YFrac,OW);\n    //Interpolation\n    vec3 wp3 = max(vec3(0.),N*0.75+0.25);\n    vec3 wn3 = max(vec3(0.),-N*0.75+0.22);\n    return (LXP*wp3.x+LXN*wn3.x+LYP*wp3.y+LYN*wn3.y+LZP*wp3.z+LZN*wn3.z)*0.5;\n}\n\nvec3 APositions[10] = vec3[10](\n    vec3(13.05,2.2,20.7),\n    vec3(13.05,2.2,18.7),\n    vec3(10.2,2.5,15.7),\n    vec3(5.7,1.15,11.7),\n    vec3(13.07,2.1,10.3),\n    vec3(15.07,2.1,10.3),\n    vec3(23.07,7.9,12.3),\n    vec3(18.07,7.1,25.3),\n    vec3(16.07,3.9,9.3),\n    vec3(16.07,3.8,8.3)\n);\n\nvec2 AEyes[10] = vec2[10](\n    vec2(0.15,3.),\n    vec2(0.175,3.),\n    vec2(-0.15,3.9),\n    vec2(0.3,2.5),\n    vec2(0.1,0.05),\n    vec2(0.1,0.05),\n    vec2(-0.04,-0.4),\n    vec2(0.1,1.8),\n    vec2(0.1,0.5),\n    vec2(0.01,0.)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output = texture(iChannel0,fragCoord.xy*IRES);\n    if (iFrame==0) {\n        //Initialization\n        if (fragCoord.x<10. && fragCoord.y<1.) { //Store vars\n            if (fragCoord.x<1.) Output = vec4(0.,0.,0.,0.); //Mouse\n            else if (fragCoord.x<2.) Output = vec4(0.15,3.,0.,0.); //Player Eye (Angles)\n            else if (fragCoord.x<3.) Output = vec4(0.,0.,0.,1.); //Player Eye (Vector)\n            else if (fragCoord.x<4.) Output = vec4(13.05,2.2,20.7,1.); //Player Pos\n            else if (fragCoord.x<5.) Output = vec4(0.5,0.97,0.,0.); //Sun angles\n            else if (fragCoord.x<6.) Output = vec4(0.,0.,0.,0.); //Sun direction\n        }\n    } else {\n        //Update\n\t\tif (fragCoord.x<16. && fragCoord.y<1.) {\n            //Update vars\n            if (fragCoord.x<1.) { //Mouse\n                UpdateMouse(Output,iMouse);\n            } else if (fragCoord.x<2.) {\n                //Player Eye (Angles)\n                if (iTime<36.) {\n                    //Cubic interpolation\n                    int Index = int(floor(iTime*0.25));\n                    float t = fract(iTime*0.25);\n                    vec2 e0 = AEyes[max(0,Index-1)];\n                    vec2 e1 = AEyes[Index];\n                    vec2 e2 = AEyes[min(9,Index+1)];\n                    vec2 a2 = (e1-e0)-(e2-e1);\n                    vec2 b2 = -(e2-e1)+(e2-e1);\n                    Output.xy = (1.-t)*e1+t*e2+t*(1.-t)*((1.-t)*a2+t*b2);\n                    Output.zw = Output.xy;\n                } else {\n                    vec4 CMouse = texture(iChannel0,vec2(0.5,0.5)*IRES);\n                    UpdateMouse(CMouse,iMouse);\n                    UpdateEye(Output,CMouse,iMouse);\n                }\n            } else if (fragCoord.x<3.) {\n                //Player Eye (Vector)\n                vec4 A4;\n                if (iTime<36.) {\n                    //Cubic interpolation\n                    int Index = int(floor(iTime*0.25));\n                    float t = fract(iTime*0.25);\n                    vec2 e0 = AEyes[max(0,Index-1)];\n                    vec2 e1 = AEyes[Index];\n                    vec2 e2 = AEyes[min(9,Index+1)];\n                    vec2 a2 = (e1-e0)-(e2-e1);\n                    vec2 b2 = -(e2-e1)+(e2-e1);\n                    A4.xy = (1.-t)*e1+t*e2+t*(1.-t)*((1.-t)*a2+t*b2);\n                } else {\n                    A4 = texture(iChannel0,vec2(1.5,0.5)*IRES);\n                    vec4 CMouse = texture(iChannel0,vec2(0.5,0.5)*IRES);\n                    UpdateMouse(CMouse,iMouse);\n                    UpdateEye(A4,CMouse,iMouse);\n                }\n                Output.xyz = normalize(vec3(cos(A4.x)*sin(A4.y),sin(A4.x),cos(A4.x)*cos(A4.y)));\n            } else if (fragCoord.x<4.) {\n                //Player Pos\n                if (iTime<36.) {\n                    //Cubic interpolation\n                    int Index = int(floor(iTime*0.25));\n                    vec3 y0 = APositions[max(0,Index-1)];\n                    vec3 y1 = APositions[Index];\n                    vec3 y2 = APositions[min(9,Index+1)];\n                    float t = fract(iTime*0.25);\n                    vec3 a = (y1-y0)-(y2-y1);\n                    vec3 b = -(y2-y1)+(y2-y1);\n                    Output.xyz = (1.-t)*y1+t*y2+t*(1.-t)*((1.-t)*a+t*b);\n                } else {\n                    float Speed = iTimeDelta;\n                    if (texelFetch(iChannel1,ivec2(32,0),0).x>0.) Speed = 8.*iTimeDelta;\n                    //Update eye\n                    vec4 CMouse = texture(iChannel0,vec2(0.5,0.5)*IRES);\n                    UpdateMouse(CMouse,iMouse);\n                    vec4 Eye4 = texture(iChannel0,vec2(1.5,0.5)*IRES);\n                    UpdateEye(Eye4,CMouse,iMouse);\n                    vec3 Eye = normalize(vec3(cos(Eye4.x)*sin(Eye4.y),sin(Eye4.x),cos(Eye4.x)*cos(Eye4.y)));\n                    vec3 Tan = normalize(cross(vec3(Eye.x,0.,Eye.z),vec3(0.,1.,0.)));\n                    vec3 NEye = -Eye;\n                    vec3 NTan = -Tan;\n                    //Next position\n                    vec3 NPos = Output.xyz;\n                    if (texelFetch(iChannel1,ivec2(87,0),0).x>0.) NPos += Eye*Speed; //W\n                    if (texelFetch(iChannel1,ivec2(83,0),0).x>0.) NPos += NEye*Speed; //S\n                    if (texelFetch(iChannel1,ivec2(65,0),0).x>0.) NPos += NTan*Speed; //A\n                    if (texelFetch(iChannel1,ivec2(68,0),0).x>0.) NPos += Tan*Speed; //D\n                    Output.xyz = NPos;\n                }\n            } else if (fragCoord.x<5.) {\n                //Sun angle\n                //if (texelFetch(iChannel1,ivec2(77,0),0).x>0.) Output.y += iTimeDelta;\n                //if (texelFetch(iChannel1,ivec2(78,0),0).x>0.) Output.y -= iTimeDelta;\n                    //LPV uses one sample for sunlight -> flickerng\n                    //So moving the sun is disabled\n                Output.z = Output.y; //Sunangle last frame\n            } else if (fragCoord.x<6.) {\n                //Sun direction\n                vec2 Angles = texture(iChannel0,vec2(4.5,0.5)*IRES).xy;\n                Output = vec4(normalize(vec3(cos(Angles.y)*cos(Angles.x)\n                \t,sin(Angles.x),sin(Angles.y)*cos(Angles.x))),1.);\n            } else if (fragCoord.x<7.) {\n                //Last frame dir\n                Output = texture(iChannel0,vec2(2.5,0.5)*IRES);\n            } else if (fragCoord.x<8.) {\n                //Last frame position\n                Output = texture(iChannel0,vec2(3.5,0.5)*IRES);\n            } else if (fragCoord.x<9.) {\n                //Last frame SunDir\n                Output = texture(iChannel0,vec2(5.5,0.5)*IRES);\n            } else if (fragCoord.x<10.) {\n                //Last last frame dir\n                Output = texture(iChannel0,vec2(6.5,0.5)*IRES);\n            } else if (fragCoord.x<11.) {\n                //Last last frame position\n                Output = texture(iChannel0,vec2(7.5,0.5)*IRES);\n            }\n        }\n    }\n    if (DFBox(fragCoord-1.,RES-2.)<0.) {\n        Output = vec4(0.);\n        if (iFrame>1) {\n            //G-Buffer\n            float CurrentFrame = float(iFrame);\n            vec2 SSOffset = ARand23(vec2(CurrentFrame*0.2673,CurrentFrame*0.1736)).xy-0.5;\n            vec3 SunDir = texture(iChannel0,vec2(5.5,0.5)*IRES).xyz;\n            //Compensate for 1 frame lag\n            vec3 Pos = texture(iChannel0,vec2(3.5,0.5)*IRES).xyz;\n            vec4 CMouse = texture(iChannel0,vec2(0.5,0.5)*IRES);\n            UpdateMouse(CMouse,iMouse);\n            vec4 Eye4 = texture(iChannel0,vec2(1.5,0.5)*IRES);\n            UpdateEye(Eye4,CMouse,iMouse);\n            vec3 Eye = normalize(vec3(cos(Eye4.x)*sin(Eye4.y),sin(Eye4.x),cos(Eye4.x)*cos(Eye4.y)));\n            if (iTime<36.) {\n                int Index = int(floor(iTime*0.25));\n                //Cubic interpolation\n                vec3 y0 = APositions[max(0,Index-1)];\n                vec3 y1 = APositions[Index];\n                vec3 y2 = APositions[min(9,Index+1)];\n                float t = fract(iTime*0.25);\n                vec3 a = (y1-y0)-(y2-y1);\n                vec3 b = -(y2-y1)+(y2-y1);\n                Pos = (1.-t)*y1+t*y2+t*(1.-t)*((1.-t)*a+t*b);\n                vec2 e0 = AEyes[max(0,Index-1)];\n                vec2 e1 = AEyes[Index];\n                vec2 e2 = AEyes[min(9,Index+1)];\n                vec2 a2 = (e1-e0)-(e2-e1);\n                vec2 b2 = -(e2-e1)+(e2-e1);\n                Eye4.xy = (1.-t)*e1+t*e2+t*(1.-t)*((1.-t)*a2+t*b2);\n                Eye = normalize(vec3(cos(Eye4.x)*sin(Eye4.y),sin(Eye4.x),cos(Eye4.x)*cos(Eye4.y)));\n            } else {\n                float Speed = iTimeDelta;\n                if (texelFetch(iChannel1,ivec2(32,0),0).x>0.) Speed = 8.*iTimeDelta;\n                vec3 Tan = normalize(cross(vec3(Eye.x,0.,Eye.z),vec3(0.,1.,0.)));\n                vec3 NEye = -Eye;\n                vec3 NTan = -Tan;\n                if (texelFetch(iChannel1,ivec2(87,0),0).x>0.) Pos += Eye*Speed; //W\n                if (texelFetch(iChannel1,ivec2(83,0),0).x>0.) Pos += NEye*Speed; //S\n                if (texelFetch(iChannel1,ivec2(65,0),0).x>0.) Pos += NTan*Speed; //A\n                if (texelFetch(iChannel1,ivec2(68,0),0).x>0.) Pos += Tan*Speed; //D\n            }\n            mat3 EyeMat = TBN(Eye);\n            vec3 Dir = normalize(vec3(((fragCoord+SSOffset)*IRES*2.-1.)*(ASPECT*CFOV),1.)*EyeMat);\n            //Prior frame\n            vec3 PriorPos = texture(iChannel0,vec2(3.5,0.5)*IRES).xyz;\n            vec3 PriorEye = texture(iChannel0,vec2(2.5,0.5)*IRES).xyz;\n            vec3 PriorTan; vec3 PriorBit = TBN(PriorEye,PriorTan);\n            mat3 PriorEyeMat = TBN(PriorEye);\n            //Render scene\n            HIT Pixel = Trace(Pos,Dir,iTime);\n            if (Pixel.C.x>1.) {\n                //Emissive\n                Output = vec4(-2.,-2.,-2.,Pixel.C);\n            } else if (Pixel.C.x>=0.) {\n                //Geometry\n                vec3 PPos = Pos+Dir*Pixel.D+Pixel.N*0.0001;\n                Output.w = Pixel.D;\n                Output.z = Vec3ToFloat(Pixel.NMN*0.5+0.5);\n                \n                \n                \n                //\n                //Reflections\n                //\n                float RefDist = -1.;\n                vec3 RefC = vec3(0.);\n                vec3 CosRand = RandSampleCos(ARand23(fragCoord*IRES*(7.13+mod(CurrentFrame*7.363,13.64))).xy);\n                float RefCR = 0.2*min(1.,tan((HPI-acos(dot(-Dir,Pixel.N)))));\n                vec3 RandDir = normalize(CosRand*TBN(reflect(Dir,Pixel.NMN))*RefCR+reflect(Dir,Pixel.NMN));\n                if (dot(Pixel.N,RandDir)<0.) RandDir = reflect(RandDir,Pixel.N);\n                HIT Hit1 = Trace(PPos,RandDir,iTime);\n                if (Hit1.C.x>=0.) {\n                    vec3 PPos1 = PPos+RandDir*Hit1.D;\n                    RefDist = Hit1.D;\n                    //Direct light\n                    if (dot(Hit1.N,SunDir)>0.) {\n                        if (Trace(PPos1+Hit1.N*0.001,SunDir,iTime).C.x<-0.5) RefC += dot(Hit1.N,SunDir)*SunLight;\n                    }\n                    //Indirect light\n                    RefC += IntegrateLPV(clamp(PPos1+Hit1.N*0.5,vec3(0.51),vec3(31.49)),-Hit1.N);\n                    //Albedo\n                    RefC *= Hit1.C;\n                } else {\n                    RefC = SkyLight*(RandDir.y*0.5+0.5);\n                    RefDist = 100000.;\n                }\n                Output.x = Vec3ToFloat(RefC*ILightCoeff);\n                Output.y = RefDist;\n            } else {\n                //Sky\n                Output = vec4(Dir.y,0.,0.,-1.);\n            }\n        }\n    }\n    fragColor = Output;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Denoising pass 1\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output = vec4(-1.);\n    if (iFrame>1 && DFBox(fragCoord-1.,RES-2.)<0.) {\n        //G-Buffer\n        float CurrentFrame = float(iFrame);\n        vec2 SSOffset = ARand23(vec2(CurrentFrame*0.2673,CurrentFrame*0.1736)).xy-0.5;\n        vec3 SunDir = texture(iChannel0,vec2(5.5,0.5)*IRES).xyz;\n        vec3 Pos = texture(iChannel0,vec2(3.5,0.5)*IRES).xyz;\n        vec3 Eye = texture(iChannel0,vec2(2.5,0.5)*IRES).xyz;\n        vec3 Tan; vec3 Bit = TBN(Eye,Tan);\n        mat3 EyeMat = TBN(Eye);\n        vec3 Dir = normalize(vec3(((fragCoord+SSOffset)*IRES*2.-1.)*(ASPECT*CFOV),1.)*EyeMat);\n        //Sample attributes\n        vec4 CAttr = texture(iChannel0,fragCoord*IRES);\n        if (min(CAttr.w,CAttr.z)>-0.5) {\n            //Geometry\n            vec3 Normal = FloatToVec3(CAttr.z)*2.-1.;\n            float Dist = CAttr.w;\n            vec3 PPos = Pos+Dir*Dist+Normal*0.0001;\n            \n            \n            //\n            //Reflections denoising\n            //\n            vec4 RefC = vec4(FloatToVec3(CAttr.x)*LightCoeff*2.,2.);\n            vec3 RefDir = reflect(Dir,Normal);\n            float RefCR = 0.2*min(1.,tan((HPI-acos(dot(RefDir,Normal)))));\n            vec3 CVPos0 = vec3(CAttr.y*RefCR,0.,CAttr.y+CAttr.w)*TBN(Dir);\n            vec3 CVPos1 = vec3(-CAttr.y*RefCR,0.,CAttr.y+CAttr.w)*TBN(Dir);\n            vec3 LVPos0 = vec3(dot(CVPos0,Tan),dot(CVPos0,Bit),dot(CVPos0,Eye));\n            vec3 LVPos1 = vec3(dot(CVPos1,Tan),dot(CVPos1,Bit),dot(CVPos1,Eye));\n            vec2 Luv0 = ((LVPos0.xy/LVPos0.z)*0.5/(ASPECT*CFOV)+0.5)*RES;\n            vec2 Luv1 = ((LVPos1.xy/LVPos1.z)*0.5/(ASPECT*CFOV)+0.5)*RES;\n            float HalfRadius = min(32.,length(Luv0-Luv1)*0.5)*0.5;\n            for (float x=-2.; x<2.5; x+=1.) {\n                for (float y=-2.; y<2.5; y+=1.) {\n                    if (x==0. && y==0.) continue;\n                    vec2 Offset2 = normalize(vec2(x,y))*max(abs(x),abs(y))*HalfRadius;\n                    vec2 SUV = floor(fragCoord+Offset2)+0.5;\n                    vec4 SC = texture(iChannel0,SUV*IRES);\n                    vec3 SNormal = normalize(FloatToVec3(SC.z)*2.-1.);\n                    vec3 SDir = normalize(vec3(((SUV+SSOffset)*IRES*2.-1.)*(ASPECT*CFOV),1.)*EyeMat);\n                    if (min(SC.w,SC.z)<-0.5 || DFBox(SUV-vec2(0.,1.),RES-vec2(0.,1.))>0.) continue;\n                    vec2 SRand = ARand23(SUV*IRES*(1.+mod(CurrentFrame*7.253,9.234))).xy;\n                    vec3 SRefDir = reflect(SDir,SNormal);\n                    float SCR = 0.2*min(1.,tan((HPI-acos(dot(RefDir,Normal)))));\n                    vec3 SRDir = normalize(RandSampleCos(SRand)*TBN(SRefDir)*SCR+SRefDir);\n                    vec3 HitP = Pos+SDir*SC.w+SNormal*0.0001+SRDir*SC.y;\n                    if (dot(HitP-PPos,Normal)<=0.) continue;\n                    if (sqrt(1./dot(normalize(HitP-PPos),RefDir)-1.)<=RefCR) RefC += vec4(FloatToVec3(SC.x)*LightCoeff,1.);\n                }\n            }\n            Output.xyz = RefC.xyz /= RefC.w;\n        }\n    }\n    fragColor = Output;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Denoising pass 2 + Composition\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign = -mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D = vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D = D.xzy;\n    else if (UV.y>2048.) D = D.zxy;\n    return texture(iChannel3,D);\n}\n\nHIT Trace(vec3 P, vec3 D, float Time) {\n    //Traces a ray through the quad tree\n    HIT OUT = HIT(100000.,vec3(0.),vec3(0.),vec3(-1.));\n    vec3 IDir = 1./D;\n    float bbDF = DFBox(P,vec3(32.));\n    vec2 bb = ABox(P,IDir,vec3(0.0001),vec3(31.9999));\n    if (bbDF>0. && (bb.x<0. || bb.y<bb.x)) return OUT;\n    float FAR = bb.y;\n    float t = ((bbDF<0.)?0.:bb.x+0.001);\n    float LFar = FAR; vec3 cp; vec4 C;\n    float LOD = 0.;\n    float LS = 1.;\n    float ILS = 1.;\n    vec4 Albedo; vec3 Normal,NTan,NBit; vec2 AUV,AUVOff;\n    vec3 fp = floor((P+D*t)*ILS)*LS;\n    for (int i=0; i<256; i++) {\n        if (t>FAR) break;\n        cp = P+D*t;\n        C = textureCube(vec2(fp.x+fp.y*32.+0.5,fp.z+0.5));\n        if (C.x<-0.5) {\n        } else if (C.x>50.) {\n            bb = ABox(P,IDir,fp,fp+1.);\n            if (bb.x>=0. && bb.y>bb.x) return HIT(bb.x,vec3(0.),vec3(0.),vec3(2.));\n        } else if (C.x<8.5) {\n            if (C.x<5.5 || C.x>50.) bb = ABox(P,IDir,fp,fp+1.);\n            else if (C.x<8.5) bb = ABox(P,IDir,fp+vec3(0.5-I16,0.,0.),fp+vec3(0.5+I16,1.,1.));\n            if (bb.x>=0. && bb.y>bb.x) {\n                if (C.x<5.5) Normal = ABoxNormal(P,IDir,fp,fp+1.);\n                else if (C.x<8.5) Normal = ABoxNormal(P,IDir,fp+vec3(0.5-I16,0.,0.),fp+vec3(0.5+I16,1.,1.));\n                vec3 PPos = P+D*bb.x;\n                vec3 AN = abs(Normal);\n                if (max(AN.x,AN.z)>AN.y) {\n                    NBit = vec3(0.,1.,0.);\n                    if (AN.x>AN.z) NTan = vec3(0.,0.,1.);\n                    else NTan = vec3(1.,0.,0.);\n                } else {\n                    NTan = vec3(1.,0.,0.);\n                    NBit = vec3(0.,0.,1.);\n                }\n                vec2 aUV = vec2(dot(PPos-fp,NTan),dot(PPos-fp,NBit));\n                vec3 AlbedoSample = fp+0.5;\n                AUV = clamp(floor(aUV*16.)+0.5,vec2(0.5),vec2(15.5));\n                AUVOff = vec2(16.*textureCube(vec2(AlbedoSample.x+floor(AlbedoSample.y)*32.,AlbedoSample.z)).x,256.);\n                Albedo = textureCube(AUV+AUVOff);\n                if (C.x>50.) Albedo = vec4(2.);\n                if (Albedo.w>0.1) {\n                    //Non-transparent pixel\n                    vec3 NMN = normalize(\n                            dot(textureCube(clamp(AUV+vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NTan+\n                            dot(textureCube(clamp(AUV+vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NBit+\n                            Normal);\n                    OUT =  HIT(bb.x,Normal,NMN,Albedo.xyz);\n                    break;\n                }\n            }\n        } else {\n            //First plane\n            float t0 = -dot(P.xz-fp.xz-0.5,vec2(0.707))/dot(D.xz,vec2(0.707));\n            if (t0>0. && abs(dot(P.xz-fp.xz-0.5+D.xz*t0,vec2(-0.707,0.707)))<0.5 && abs(P.y-fp.y-0.5+D.y*t0)<0.5) {\n                vec3 PPos = P+D*t0;\n                Normal = vec3(0.70710678,0.,0.70710678);\n                Normal *= (max(0.,sign(dot(Normal.xz,-D.xz)))*2.-1.);\n                NTan = vec3(Normal.z,0.,-Normal.x);\n                NBit = vec3(0.,1.,0.);\n                vec2 aUV = vec2(dot(PPos-fp-0.5,NTan)+0.5,PPos.y-fp.y);\n                vec3 AlbedoSample = fp+0.5;\n                AUV = clamp(floor(aUV*16.)+0.5,vec2(0.5),vec2(15.5));\n                AUVOff = vec2(16.*textureCube(vec2(AlbedoSample.x+floor(AlbedoSample.y)*32.,AlbedoSample.z)).x,256.);\n                Albedo = textureCube(AUV+AUVOff);\n                if (Albedo.w>0.1) {\n                    //Non-transparent pixel\n                    vec3 NMN = normalize(\n                            dot(textureCube(clamp(AUV+vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NTan+\n                            dot(textureCube(clamp(AUV+vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NBit+\n                            Normal);\n                    OUT =  HIT(t0,Normal,NMN,Albedo.xyz);\n                }\n            }\n            //Second plane\n            t0 = -dot(P.xz-fp.xz-0.5,vec2(-0.707,0.707))/dot(D.xz,vec2(-0.707,0.707));\n            if (t0>0. && abs(dot(P.xz-fp.xz-0.5+D.xz*t0,vec2(0.707)))<0.5 &&\n                abs(P.y-fp.y-0.5+D.y*t0)<0.5 && (OUT.C.x<-0.5 || t0<OUT.D)) {\n                vec3 PPos = P+D*t0;\n                Normal = vec3(-0.70710678,0.,0.70710678);\n                Normal *= (max(0.,sign(dot(Normal.xz,-D.xz)))*2.-1.);\n                NTan = vec3(Normal.z,0.,-Normal.x);\n                NBit = vec3(0.,1.,0.);\n                vec2 aUV = vec2(dot(PPos-fp-0.5,NTan)+0.5,PPos.y-fp.y);\n                vec3 AlbedoSample = fp+0.5;\n                AUV = clamp(floor(aUV*16.)+0.5,vec2(0.5),vec2(15.5));\n                AUVOff = vec2(16.*textureCube(vec2(AlbedoSample.x+floor(AlbedoSample.y)*32.,AlbedoSample.z)).x,256.);\n                Albedo = textureCube(AUV+AUVOff);\n                if (Albedo.w>0.1) {\n                    //Non-transparent pixel\n                    vec3 NMN = normalize(\n                            dot(textureCube(clamp(AUV+vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(1.,0.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NTan+\n                            dot(textureCube(clamp(AUV+vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz-\n                                textureCube(clamp(AUV-vec2(0.,1.),vec2(0.5),vec2(15.5))+AUVOff).xyz,vec3(0.1))*NBit+\n                            Normal);\n                    OUT =  HIT(t0,Normal,NMN,Albedo.xyz);\n                }\n            }\n            if (OUT.C.x>-0.5) break;\n        }\n        fp += ABoxfarNormal(P,IDir,fp,fp+LS,t)*LS;\n    }\n    //Return\n    return  OUT;\n}\n\nvec3 WeightedLPVSample(vec2 InputUV, float YFrac, float[8] OW) {\n    vec3 OUT = vec3(0.);\n    float XFrac = fract(InputUV.x);\n    float ZFrac = fract(InputUV.y);\n    vec2 UV = floor(InputUV)+0.5;\n    vec4 C0 = textureCube(UV)*OW[0];\n    vec4 C1 = textureCube(UV+vec2(1.,0.))*OW[1];\n    vec4 C2 = textureCube(UV+vec2(0.,1.))*OW[4];\n    vec4 C3 = textureCube(UV+vec2(1.,1.))*OW[5];\n    vec4 CYLow = mix(mix(C0*C0.w,C1*C1.w,XFrac),mix(C2*C2.w,C3*C3.w,XFrac),ZFrac)/\n                 (0.05+mix(mix(C0.w,C1.w,XFrac),mix(C2.w,C3.w,XFrac),ZFrac));\n    C0 = textureCube(UV+vec2(32.,0.))*OW[2];\n    C1 = textureCube(UV+vec2(33.,0.))*OW[3];\n    C2 = textureCube(UV+vec2(32.,1.))*OW[6];\n    C3 = textureCube(UV+vec2(33.,1.))*OW[7];\n    vec4 CYHigh = mix(mix(C0*C0.w,C1*C1.w,XFrac),mix(C2*C2.w,C3*C3.w,XFrac),ZFrac)/\n                 (0.05+mix(mix(C0.w,C1.w,XFrac),mix(C2.w,C3.w,XFrac),ZFrac));\n    return mix(CYLow.xyz*CYLow.w,CYHigh.xyz*CYHigh.w,YFrac)/(0.05+mix(CYLow.w,CYHigh.w,YFrac));\n}\n\nvec3 IntegrateLPV(vec3 P, vec3 N) {\n    //Samples the LPV\n    vec2 lpvUV = vec2(P.x-0.5+floor(P.y-0.5)*32.,P.z+64.-0.5);\n    float YFrac = fract(P.y-0.5);\n    //Init weights\n    ivec3 FP = ivec3(floor(fract(P-0.5)*2.)); \n    vec3 Diag3 = vec3(1-FP)*2.-1.;\n    float OW[8] = float[8](0.,0.,0.,0.,0.,0.,0.,0.);\n    OW[FP.x+FP.y*2+FP.z*4] = 1.; //Current voxel\n    OW[(FP.x+1)%2+FP.y*2+FP.z*4] = 1.; //Side in X\n    OW[FP.x+((FP.y+1)%2)*2+FP.z*4] = 1.; //Side in Y\n    OW[FP.x+FP.y*2+((FP.z+1)%2)*4] = 1.; //Side in Z\n    //Occlusion check\n    vec2 FUV = vec2(floor(P.x)+floor(P.y)*32.+0.5,floor(P.z)+64.5);\n    float WallX = textureCube(vec2(FUV.x+Diag3.x,FUV.y)).w;\n    float WallY = textureCube(vec2(FUV.x+32.*Diag3.y,FUV.y)).w;\n    float WallZ = textureCube(vec2(FUV.x,FUV.y+Diag3.z)).w;\n    OW[FP.x+((FP.y+1)%2)*2+((FP.z+1)%2)*4] = max(WallY,WallZ);\n    OW[((FP.x+1)%2)+((FP.y+1)%2)*2+FP.z*4] = max(WallX,WallY);\n    OW[((FP.x+1)%2)+FP.y*2+((FP.z+1)%2)*4] = max(WallX,WallZ);\n    OW[((FP.x+1)%2)+((FP.y+1)%2)*2+((FP.z+1)%2)*4] = max(max(WallX,WallY),WallZ);\n    //Sample LPV\n    vec3 LXP = WeightedLPVSample(lpvUV,YFrac,OW);\n    vec3 LXN = WeightedLPVSample(lpvUV+vec2(0.,32.),YFrac,OW);\n    vec3 LYP = WeightedLPVSample(lpvUV+vec2(0.,64.),YFrac,OW);\n    vec3 LYN = WeightedLPVSample(lpvUV+vec2(0.,96.),YFrac,OW);\n    vec3 LZP = WeightedLPVSample(lpvUV+vec2(0.,128.),YFrac,OW);\n    vec3 LZN = WeightedLPVSample(lpvUV+vec2(0.,160.),YFrac,OW);\n    //Interpolation\n    vec3 wp3 = max(vec3(0.),N*0.75+0.25);\n    vec3 wn3 = max(vec3(0.),-N*0.75+0.25);\n    return (LXP*wp3.x+LXN*wn3.x+LYP*wp3.y+LYN*wn3.y+LZP*wp3.z+LZN*wn3.z)*0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output = vec4(-1.);\n    if (iFrame>1 && DFBox(fragCoord-1.,RES-2.)<0.) {\n        //G-Buffer\n        float CurrentFrame = float(iFrame);\n        vec2 SSOffset = ARand23(vec2(CurrentFrame*0.2673,CurrentFrame*0.1736)).xy-0.5;\n        vec3 SunDir = texture(iChannel0,vec2(5.5,0.5)*IRES).xyz;\n        vec3 Pos = texture(iChannel0,vec2(3.5,0.5)*IRES).xyz;\n        vec3 Eye = texture(iChannel0,vec2(2.5,0.5)*IRES).xyz;\n        vec3 Tan; vec3 Bit = TBN(Eye,Tan);\n        mat3 EyeMat = TBN(Eye);\n        vec3 Dir = normalize(vec3(((fragCoord+SSOffset)*IRES*2.-1.)*(ASPECT*CFOV),1.)*EyeMat);\n        //Sample attributes\n        vec4 CAttr = texture(iChannel0,fragCoord*IRES);\n        if (CAttr.z<-0.5) {\n            //Emissive\n            Output = vec4(2.5,1.5,1.5,1.);\n        } else if (CAttr.w>-0.5) {\n            //Geometry\n            HIT Pixel = Trace(Pos+Dir*(CAttr.w-0.01),Dir,iTime);\n            vec3 Normal = normalize(FloatToVec3(CAttr.z)*2.-1.);\n            float Dist = CAttr.w;\n            vec3 PPos = Pos+Dir*Dist+Normal*0.0005;\n            vec4 RefDiff = texture(iChannel1,fragCoord*IRES);\n            \n            \n            \n            //\n            //Reflections denoising\n            //\n            vec4 RefC = vec4(texture(iChannel1,fragCoord*IRES).xyz*2.,2.);\n            vec3 RefDir = reflect(Dir,Normal);\n            float RefCR = 0.2*min(1.,tan((HPI-acos(dot(RefDir,Normal)))));\n            vec3 CVPos0 = vec3(CAttr.y*RefCR,0.,CAttr.y+CAttr.w)*TBN(Dir);\n            vec3 CVPos1 = vec3(-CAttr.y*RefCR,0.,CAttr.y+CAttr.w)*TBN(Dir);\n            vec3 LVPos0 = vec3(dot(CVPos0,Tan),dot(CVPos0,Bit),dot(CVPos0,Eye));\n            vec3 LVPos1 = vec3(dot(CVPos1,Tan),dot(CVPos1,Bit),dot(CVPos1,Eye));\n            vec2 Luv0 = ((LVPos0.xy/LVPos0.z)*0.5/(ASPECT*CFOV)+0.5)*RES;\n            vec2 Luv1 = ((LVPos1.xy/LVPos1.z)*0.5/(ASPECT*CFOV)+0.5)*RES;\n            float HalfRadius = min(8.,length(Luv0-Luv1)*0.5)*0.5;\n            for (float x=-2.; x<2.5; x+=1.) {\n                for (float y=-2.; y<2.5; y+=1.) {\n                    if (x==0. && y==0.) continue;\n                    vec2 Offset2 = normalize(vec2(x,y))*max(abs(x),abs(y))*HalfRadius;\n                    vec2 SUV = floor(fragCoord+Offset2)+0.5;\n                    vec4 SC = texture(iChannel0,SUV*IRES);\n                    vec3 SNormal = normalize(FloatToVec3(SC.z)*2.-1.);\n                    vec3 SDir = normalize(vec3(((SUV+SSOffset)*IRES*2.-1.)*(ASPECT*CFOV),1.)*EyeMat);\n                    if (min(SC.w,SC.z)<-0.5 || DFBox(SUV-vec2(0.,1.),RES-vec2(0.,1.))>0.) continue;\n                    vec2 SRand = ARand23(SUV*IRES*(1.+mod(CurrentFrame*7.253,9.234))).xy;\n                    vec3 SRefDir = reflect(SDir,SNormal);\n                    float SCR = 0.2*min(1.,tan((HPI-acos(dot(RefDir,Normal)))));\n                    vec3 SRDir = normalize(RandSampleCos(SRand)*TBN(SRefDir)*SCR+SRefDir);\n                    vec3 HitP = Pos+SDir*SC.w+SNormal*0.0001+SRDir*SC.y;\n                    if (dot(HitP-PPos,Normal)<=0.) continue;\n                    if (sqrt(1./dot(normalize(HitP-PPos),RefDir)-1.)<=RefCR) RefC += vec4(texture(iChannel1,SUV*IRES).xyz,1.);\n                }\n            }\n            vec3 ReflectionLight = RefC.xyz/RefC.w;\n            \n            \n            \n            //\n            //Direct light\n            //\n            vec3 DiffuseLight = vec3(0.);\n            if (dot(Normal,SunDir)>0.) {\n                if (Trace(PPos,SunDir,iTime).C.x<0.) DiffuseLight += SunLight*dot(Normal,SunDir);\n            }\n            \n            \n            \n            \n            //\n            //Indirect light denoising\n            //\n            DiffuseLight += IntegrateLPV(clamp(PPos+Normal*0.5,vec3(0.51),vec3(31.49)),-Normal);\n            /*\n            //1spp path tracer for fun\n                //Could use ReSTIR here, since LPV reduces noise significantly\n                //But TAA in cubemap has its limitations\n            vec3 CosRand = RandSampleCos(ARand23(fragCoord*IRES*(7.13+mod(CurrentFrame*7.363,13.64))).xy);\n            vec3 RandDir = normalize(CosRand*TBN(Normal));\n            HIT Hit1 = Trace(PPos,RandDir,iTime);\n            if (Hit1.C.x<-1.5) {\n                DiffuseLight += vec3(2.5,1.5,1.5);\n            } else if (Hit1.C.x>=0.) {\n                //Geometry\n                vec3 PPos1 = PPos+RandDir*Hit1.D+Hit1.N*0.0001;\n                //Sunlight\n                CosRand = RandSampleCos(ARand23(fragCoord*IRES*(3.13+mod(CurrentFrame*6.763,13.64))).xy);\n                RandDir = SunDir;\n                if (dot(Hit1.N,SunDir)>0.) {\n                    if (dot(Hit1.N,RandDir)<0.) RandDir = reflect(RandDir,Hit1.N);\n                    if (Trace(PPos1,RandDir,iTime).C.x<0.) DiffuseLight += SunLight*dot(Hit1.N,SunDir);\n                }\n                //LPV cache\n                DiffuseLight += IntegrateLPV(clamp(PPos1+Hit1.N*0.5,vec3(0.51),vec3(31.49)),-Hit1.N);\n                //Albedo\n                DiffuseLight *= Hit1.C;\n            } else {\n                //Sky\n                DiffuseLight += SkyLight*2.*max(0.,RandDir.y);\n            }\n            //*/\n            \n            \n            //Albedo\n            DiffuseLight *= Pixel.C;\n            \n            \n            \n            //\n            //Composition\n            //\n            Output.xyz = mix(DiffuseLight,ReflectionLight,SchlickFresnel(vec3(0.2),max(0.,dot(-Dir,Normal))));\n        } else {\n            Output = vec4(SampleSky(Dir,iTime),-1.);\n        }\n    }\n    fragColor = Output;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//TAA\n\nvec4 sampleLevel0(vec2 PriorUV) {\n    return texture(iChannel3,PriorUV*IRES);\n}\n\nvec4 SampleTextureCatmullRom(vec2 uv) {\n    vec2 samplePos = uv;\n    vec2 texPos1 = floor(samplePos - 0.5) + 0.5;\n    vec2 f = samplePos - texPos1;\n    vec2 w0 = f * ( -0.5 + f * (1.0 - 0.5*f));\n    vec2 w1 = 1.0 + f * f * (-2.5 + 1.5*f);\n    vec2 w2 = f * ( 0.5 + f * (2.0 - 1.5*f) );\n    vec2 w3 = f * f * (-0.5 + 0.5 * f);\n    vec2 w12 = w1 + w2;\n    vec2 offset12 = w2 / w12;\n    vec2 texPos0 = texPos1 - vec2(1.0);\n    vec2 texPos3 = texPos1 + vec2(2.0);\n    vec2 texPos12 = texPos1 + offset12;\n    vec4 result = vec4(0.);\n    result += sampleLevel0( vec2(texPos0.x,  texPos0.y)) * w0.x * w0.y;\n    result += sampleLevel0( vec2(texPos12.x, texPos0.y)) * w12.x * w0.y;\n    result += sampleLevel0( vec2(texPos3.x,  texPos0.y)) * w3.x * w0.y;\n    result += sampleLevel0( vec2(texPos0.x,  texPos12.y)) * w0.x * w12.y;\n    result += sampleLevel0( vec2(texPos12.x, texPos12.y)) * w12.x * w12.y;\n    result += sampleLevel0( vec2(texPos3.x,  texPos12.y)) * w3.x * w12.y;\n    result += sampleLevel0( vec2(texPos0.x,  texPos3.y)) * w0.x * w3.y;\n    result += sampleLevel0( vec2(texPos12.x, texPos3.y)) * w12.x * w3.y;\n    result += sampleLevel0( vec2(texPos3.x,  texPos3.y)) * w3.x * w3.y;\n    return max(vec4(0.,0.,0.,1.),result);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output = vec4(0.,0.,0.,1.);\n    if (iFrame>1 && DFBox(fragCoord-1.,RES-2.)<0.) {\n        //Inside the screen\n        vec3 BCRef = texture(iChannel2,fragCoord*IRES).xyz;\n        vec3 FinalColor = vec3(BCRef.xyz);\n        //Reprojection\n        float CurrentFrame = float(iFrame);\n        vec2 SSOffset = SSOffsets[iFrame%16];\n        vec3 Pos = texture(iChannel0,vec2(3.5,0.5)*IRES).xyz;\n        vec3 Eye = texture(iChannel0,vec2(2.5,0.5)*IRES).xyz;\n        vec3 Tan; vec3 Bit = TBN(Eye,Tan);\n        mat3 EyeMat = TBN(Eye);\n        vec3 PriorPos = texture(iChannel0,vec2(7.5,0.5)*IRES).xyz;\n        vec3 PriorEye = texture(iChannel0,vec2(6.5,0.5)*IRES).xyz;\n        vec3 PriorTan; vec3 PriorBit = TBN(PriorEye,PriorTan);\n        mat3 PriorEyeMat = TBN(PriorEye);\n        vec3 Dir = normalize(vec3(((fragCoord+SSOffset)*IRES*2.-1.)*CFOV*ASPECT,1.)*EyeMat);\n        vec4 CAttr = texture(iChannel0,fragCoord*IRES);\n        float Distance = CAttr.w;\n        if (Distance<-0.5) Distance = 100000.; //Sky pixel\n        vec3 PPos = Pos+Dir*Distance;\n        //Prior position\n        vec3 PriorVPos = vec3(dot(PPos-PriorPos,PriorTan),dot(PPos-PriorPos,PriorBit),dot(PPos-PriorPos,PriorEye));\n        vec2 PriorUV = ((PriorVPos.xy/PriorVPos.z)*0.5/(ASPECT*CFOV)+0.5)*RES;\n        if (DFBox(PriorUV-1.,RES-2.)<0.) {\n            //Geometric validation\n            vec4 LFinalColor;\n            if (length(PriorUV-fragCoord-SSOffset)>0.02) {\n                //Catmull-rom sampling\n                PriorUV -= SSOffsets[(iFrame-1)%16];\n                LFinalColor = SampleTextureCatmullRom(PriorUV);\n            } else {\n                //Nearest neighbour sampling\n                PriorUV = floor(PriorUV)+0.5;\n                LFinalColor = texture(iChannel3,PriorUV*IRES);\n            }\n            //Clamping\n            vec3 FMIN = vec3(1000.);\n            vec3 FMAX = vec3(0.);\n            for (float x=-1.; x<1.5; x+=1.) {\n                for (float y=-1.; y<1.5; y+=1.) {\n                    vec3 Sample = texture(iChannel2,(fragCoord+vec2(x,y))*IRES).xyz;\n                    //Clamp\n                    FMIN = min(FMIN,Sample);\n                    FMAX = max(FMAX,Sample);\n                }\n            }\n            LFinalColor.xyz = clamp(LFinalColor.xyz,FMIN,FMAX);\n            //Output\n            Output = vec4((FinalColor+LFinalColor.xyz*LFinalColor.w)/(LFinalColor.w+1.),min(31.,LFinalColor.w+1.));\n        } else {\n            //Invalid geometry\n            Output = vec4(FinalColor,1.);\n        }\n    }\n    fragColor = Output;\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"//SDF volume and TAA\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign = -mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D = vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D = D.xzy;\n    else if (UV.y>2048.) D = D.zxy;\n    return texture(iChannel3,D);\n}\n\nvoid mainCubemap(out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir) {\n    vec4 Output = texture(iChannel3,rayDir);\n    vec2 UV; vec3 aDir = abs(rayDir);\n    if (aDir.z>max(aDir.x,aDir.y)) {\n        //Z-side\n        UV = floor(((rayDir.xy/aDir.z)*0.5+0.5)*1024.)+0.5;\n        if (rayDir.z<0.) UV.y += 1024.;\n    } else if (aDir.x>aDir.y) {\n        //X-side\n        UV = floor(((rayDir.yz/aDir.x)*0.5+0.5)*1024.)+0.5;\n        if (rayDir.x>0.) UV.y += 2048.;\n        else UV.y += 3072.;\n    } else {\n        //Y-side\n        UV = floor(((rayDir.xz/aDir.y)*0.5+0.5)*1024.)+0.5;\n        if (rayDir.y>0.) UV.y += 4096.;\n        else UV.y += 5120.;\n    }\n    if (UV.y<32.) {\n        //2x2 chunk, y-axis clamped to 32 voxels\n        if (iFrame>2 && false) {\n            fragColor = Output;\n            return;\n            discard; //Adding this makes me feel safe\n            float X = 5.; //Wat\n        } else {\n            Output = vec4(-1.);\n            vec3 sp = vec3(mod(UV.x,32.),floor(UV.x*I32)+0.5,UV.y);\n            vec3 rsp = vec3(16.-abs(16.-sp.x),sp.y,mod(sp.z,7.));\n            vec3 syp = vec3(rsp.x,sp.yz);\n            //Floor\n            if (DFBox(sp,vec3(32.,1.,32.))<0.) Output.x = 1.;\n            \n            //Staircase\n            if (sp.y>1. && sp.y<6. && DFBox(syp.xz-vec2(8.-(sp.y-4.5)*2.,26.),vec2(3.,2.))<0.) Output.x = 4.; //Bridge\n                if (sp.y>3. && sp.y<7. && syp.x>7. &&\n                    DFBox(syp.xz-vec2(8.-(sp.y-5.5)*2.,25.),vec2(3.,1.))<0.) Output.x = 0.; //Railing\n                if (sp.y>2. && sp.y<7. && DFBox(syp.xz-vec2(8.-(sp.y-5.5)*2.,28.),vec2(3.,1.))<0.) Output.x = 5.; //Railing\n                    if (sp.z>24. && sp.z<26. && DFBox(syp.xy-vec2(14.,1.),vec2(1.,sp.z-22.5))<0.) Output.x = 4.; //Stairs rail\n                if (DFBox(sp-vec3(15.,2.,26.),vec3(2.,1.,2.))<0.) Output.x = 4.;\n            \n            //Lower level books\n            if (abs(sp.y-2.5)<1.6 && abs(length(vec2(rsp.x-9.,rsp.z-4.))-4.5)<0.8 && rsp.x<7. && sp.z>7. && sp.z<29.) Output.x = 3.;\n                if (DFBox(rsp-vec3(7.,1.,0.),vec3(1.,3.,1.))<0.) Output.x = 2.; //Column\n                if (DFBox(rsp-vec3(7.,4.,0.),vec3(1.,1.,1.))<0.) Output.x = 200.; //Emissive\n            \n            //Upper level\n            if (DFBox(syp-vec3(0.,4.,7.),vec3(7.,1.,22.))<0.) Output.x = 4.; //Wood base\n                 if (DFBox(syp-vec3(6.,5.,7.),vec3(2.,1.,22.))<0.) Output.x = 4.; //Wood walkway\n                     if (DFBox(syp-vec3(7.,6.,7.),vec3(1.,1.,18.))<0.) Output.x = 8.; //Glass support\n                     if (abs(sp.y-5.5)<0.1 && length(rsp.xz-vec2(6.,4.))<2.) Output.x = 4.;\n                //Books\n                    if (abs(sp.y-6.5)<1.6 && abs(length(vec2(rsp.x-5.,rsp.z-4.))-4.5)<0.8\n                    && rsp.x<4. && sp.z>7. && sp.z<29.) Output.x = 3.;\n                        if (DFBox(rsp-vec3(3.,4.,0.),vec3(1.,4.,1.))<0.) Output.x = 2.; //Column\n                        if (DFBox(rsp-vec3(3.,8.,0.),vec3(1.,1.,1.))<0.) Output.x = 100.; //Emissive\n            \n            //Building\n                //Front\n                    if (abs(DFLine(sp,vec3(16.,-100.,17.),vec3(16.,8.,17.))-14.5)<0.7 && sp.z>28.) Output.x = 5.;\n                        if (DFBox(syp-vec3(0.,0.,28.),vec3(8.,14.,1.))<0.) Output.x = 5.; //Sides\n                    if (abs(sp.z-29.5)<0.1 && abs(length(sp.xy-vec2(16.,11.))-2.2)<0.4) Output.x = 100.; //Emissive\n                        if (abs(sp.z-29.5)<0.1 && syp.x>10. && sp.y<9. && \n                            abs(dot(syp.xy-vec2(15.5,4.5),vec2(2.,1.)))<0.5) Output.x = 100.;\n                        if (abs(sp.z-29.5)<0.1 && syp.x>10. &&\n                            sp.y<9. && abs(dot(syp.xy-vec2(15.5,3.5),vec2(2.,1.)))<0.5) Output.x = 100.;\n                //Roof over books\n                    if (DFLine(rsp,vec3(4.,9.,-1000.),vec3(4.,9.,1000.))<5. && sp.y>8. && rsp.x<9. && \n                    DFLine(rsp,vec3(32.,15.,4.),vec3(4.,8.5,4.))>3.8 && sp.z>7. && sp.z<28.) Output.x = 5.;\n                        //Round window\n                        if ((length(rsp.zy-vec2(4.,10.))<2.1 && sp.z<28.) || (false && sp.y>8. && rsp.x<1.)) Output.x = -1.;\n                        if (length(rsp.zy-vec2(4.,10.))<2.1 && sp.z>7. && sp.z<28. && abs(rsp.x-0.5)<0.1) Output.x = 8.;\n                //Back\n                    if (sp.z<7.) Output.x = -1.; //Remove voxels\n                    //Glass blocks\n                        if (DFBox(sp-vec3(5.,1.,6.),vec3(22.,13.,1.))<0.) Output.x = 0.;\n                            if (DFBox(sp-vec3(15.,4.,6.),vec3(2.,1.,1.))<0.) Output.x = 2.;\n                            if (DFBox(sp-vec3(15.,2.,6.),vec3(2.,2.,1.))<0.) Output.x = -1.; //Door\n                    //Back of upper walkway\n                        if (DFBox(syp-vec3(4.,5.,7.),vec3(3.,1.,1.))<0.) Output.x = 4.;\n                    //Entrance wall\n                        if (DFBox(syp-vec3(0.,0.,6.),vec3(7.,14.,1.))<0.) Output.x = 5.; //Sides\n                        if (abs(sp.z-6.5)<0.1) {\n                            if (sp.y<1.) Output.x = 2.; //Wood ground\n                            //Two circles\n                            if (abs(dot(syp.xy-vec2(9.,1.),vec2(0.707,-0.707)))<1.4) Output.x = 5.;\n                            if (abs(dot(syp.xy-vec2(3.,1.),vec2(0.707,-0.707)))<1.4) Output.x = 5.;\n                        }\n                        if (abs(sp.z-7.5)<0.1 && abs(dot(syp.xy-vec2(9.,1.),vec2(0.707,-0.707)))<0.4) Output.x = 5.;\n                        if (abs(sp.z-7.5)<0.1 && abs(dot(syp.xy-vec2(3.,1.),vec2(0.707,-0.707)))<0.4) Output.x = 5.;\n                //Roof\n                    if (sp.z>7.) {\n                        if (syp.x>6. && abs(syp.y-(12.5+(syp.x-5.)/11.*4.))<0.5) Output.x = 0.;\n                        if (DFLine(rsp,vec3(5.,12.,0.5),vec3(16.,16.,0.5))<1.1) Output.x = 5.;\n                        if (DFLine(rsp,vec3(5.,12.,7.5),vec3(16.,16.,7.5))<1.1) Output.x = 5.;\n                    }\n            //Middle ground walkway\n            if (sp.y<2. && length(sp.xz-vec2(16.,18.))<6.) Output.x = 4.; //Circle\n                //Entrance\n                    if (DFBox(sp-vec3(15.,1.,6.),vec3(2.,1.,23.))<0.) Output.x = 4.;\n                    if (DFBox(syp-vec3(14.,1.,6.),vec3(1.,4.,1.))<0.) Output.x = 5.;\n                //Middle decor\n                    if (sp.y<2. &&  length(sp.xz-vec2(16.,18.))<0.8) Output.x = 1.;\n                    if (abs(sp.y-1.5)<0.1 &&  abs(length(sp.xz-vec2(16.,18.))-1.5)<0.3) Output.x = 100.;\n                    if (abs(sp.y-2.5)<0.1 &&  abs(length(sp.xz-vec2(16.,18.))-1.5)<0.3) Output.x = 0.;\n                        if (length(sp-vec3(16.5,2.5,18.5))<0.1) Output.x = 9.;\n                        if (length(sp-vec3(15.5,2.5,17.5))<0.1) Output.x = 9.;\n                        if (length(sp-vec3(16.5,2.5,17.5))<0.1) Output.x = 10.;\n                        if (length(sp-vec3(15.5,2.5,18.5))<0.1) Output.x = 10.;\n        }\n    } else if (UV.y<63. && UV.x<256.) {\n        //Mipmaps\n        Output = vec4(0.);\n        float LOD = 4.-floor(-log2(1.-(UV.y-32.)*I32));\n        float LRES = pow(2.,LOD);\n        if (UV.x<LRES*LRES) {\n            vec2 CUV = vec2(floor(mod(UV.x,LRES))*2.+0.5,floor(UV.y-(64.-LRES*2.))*2.+0.5);\n            CUV.x += floor(UV.x/LRES)*LRES*4.; //Y Offset\n            CUV.y += (64.-LRES*4.); //Mipmap resampling offset\n            Output.x = max(max(max(textureCube(CUV).x,textureCube(vec2(CUV.x+1.,CUV.y)).x),\n                           max(textureCube(CUV+1.).x,textureCube(vec2(CUV.x,CUV.y+1.)).x)),\n                           max(max(textureCube(vec2(CUV.x+LRES*2.,CUV.y)).x,textureCube(vec2(CUV.x+LRES*2.+1.,CUV.y)).x),\n                           max(textureCube(vec2(CUV.x+LRES*2.+1.,CUV.y+1.)).x,textureCube(vec2(CUV.x+LRES*2.,CUV.y+1.)).x)));\n        }\n    } else if (DFBox(UV-vec2(0.,64.),vec2(1024.,192.))<0.) {\n        //LPV\n        vec3 SunDir = texture(iChannel0,vec2(5.5,0.5)*IRES).xyz;\n        bool InsideGeo = false;\n        vec2 CUV = UV-vec2(0.,64.);\n        vec3 VPos = vec3(mod(CUV.x,32.),floor(CUV.x*I32)+0.5,mod(CUV.y,32.));\n        vec3 VNor = ((CUV.y<64.)?vec3(((CUV.y<32.)?-1.:1.),0.,0.):((CUV.y<128.)?\n                    vec3(0.,((CUV.y<96.)?-1.:1.),0.):vec3(0.,0.,((CUV.y<160.)?-1.:1.))));\n        //Voxelize from mipmap 0\n        float GeoIndex = textureCube(vec2(CUV.x,mod(CUV.y,32.))).x;\n        InsideGeo = (abs(GeoIndex-3.5)<2.6);\n        if (GeoIndex>50.) {\n            //Emissive\n            Output = vec4(2.5,1.5,1.5,0.);\n        } else if (InsideGeo) {\n            //Inside geometry\n            Output = vec4(0.,0.,0.,0.);\n            //Sunlight\n            vec3 sPos = VPos+VNor;\n            if (dot(VNor,SunDir)>0. && abs(textureCube(vec2(sPos.x+floor(sPos.y)*32.,sPos.z)).x-3.)>3.1) {\n                float Visibility = 1.;\n                float t = 0.;\n                for (float y=0.; y<48.5; y++) {\n                    vec3 sp = floor(sPos+t*SunDir);\n                    if (DFBox(sp+0.5,vec3(32.))>0.) break;\n                    if (abs(textureCube(vec2(sp.x+0.5+sp.y*32.,sp.z+0.5)).x-3.5)<2.6) {\n                        Visibility = 0.;\n                        break;\n                    }\n                    t = ABoxfar(sPos,1./SunDir,sp,sp+1.)+0.001;\n                }\n                Output.xyz = SunLight*dot(VNor,SunDir)*Visibility*0.8; //Magic number\n            }\n        } else {\n            //Outside geometry\n            Output.w = 1.;\n            vec3 sPos = VPos-VNor;\n            //Propagation\n            if (DFBox(sPos,vec3(32.))<0.) {\n                //Inside volume\n                vec2 sUV = vec2(sPos.x+floor(sPos.y)*32.,sPos.z+64.);\n                vec3 UVOff = ((CUV.y<64.)?vec3(64.,128.,0.):((CUV.y<128.)?vec3(128.,0.,64.):vec3(0.,64.,128.)));\n                float ForwardOff = ((CUV.y<64.)?max(0.,sign(VNor.x))*32.:\n                                  ((CUV.y<128.)?max(0.,sign(VNor.y))*32.:max(0.,sign(VNor.z))*32.));\n                vec4 ForwardSample = textureCube(sUV+vec2(0.,UVOff.z+ForwardOff));\n                Output.xyz = ForwardSample.xyz*mix(1.,LPVForward,ForwardSample.w);\n                Output.xyz += (textureCube(sUV+vec2(0.,UVOff.x)).xyz+textureCube(sUV+vec2(0.,UVOff.x+32.)).xyz+\n                               textureCube(sUV+vec2(0.,UVOff.y)).xyz+textureCube(sUV+vec2(0.,UVOff.y+32.)).xyz)*LPVSide\n                               *ForwardSample.w;\n                //Bounce light\n                vec2 vUV = vec2(VPos.x+floor(VPos.y)*32.,VPos.z);\n                if (abs(textureCube(vec2(sUV.x,sUV.y-64.)).x-3.5)<2.6) {\n                    //Geometry behind - magic albedo\n                    Output.xyz += textureCube(vUV+vec2(0.,64.+UVOff.z+32.-ForwardOff)).xyz*0.9; //Another magic number\n                }\n            } else if (VNor.y<-0.9) {\n                //Outside volume\n                Output.xyz = vec3(0.);\n            }\n            //Skylight\n            if (VNor.y<-0.9) {\n                float Visibility = 1.;\n                for (float y=floor(VPos.y); y<31.5; y++) {\n                    if (abs(textureCube(vec2(VPos.x+y*32.,VPos.z)).x-3.5)<2.6) {\n                        Visibility = 0.;\n                        break;\n                    }\n                }\n                Output.xyz += SkyLight*0.1*Visibility; //The final magic number\n            }\n        }\n    } else if (DFBox(UV-vec2(0.,256.),vec2(176.,16.))<0.) {\n        //Textures\n        if (iFrame>2) {\n            fragColor = Output;\n            return;\n            discard;\n        } else {\n            ivec2 iUV = ivec2(floor(UV.x),floor(UV.y-256.));\n            int Index = iUV.x%16+iUV.y*16;\n            Output = vec4(0.99);\n            if (UV.x<16. || (UV.x>128. && UV.x<144.)) Output = TexGlass[Index];\n            else if (UV.x<32.) Output = TexStone[Index];\n            else if (UV.x<48.) Output = TexWoodTree[Index];\n            else if (UV.x<64.) Output = TexBooks[Index];\n            else if (UV.x<80.) Output = TexWood[Index];\n            else if (UV.x<128.) Output = TexBricks[Index];\n            else if (UV.x>144. && UV.x<160.) Output = TexSapling1[Index];\n            else if (UV.x>160. && UV.x<176.) Output = TexSapling2[Index];\n        }\n    } else {\n        fragColor = Output;\n        return;\n        discard;\n    }\n    //Output\n    fragColor = Output;\n}","name":"Cube A","description":"","type":"cubemap"}]}