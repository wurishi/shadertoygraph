{"ver":"0.1","info":{"id":"mlBczG","date":"1692250159","viewed":54,"name":"mix flowing and burning","username":"zma","description":"PT","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 add = vec2(1.0, 0.0);\n\nvec2 noise2(vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 res = mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    return res;\n}\n\nvec2 noise2b( in vec2 p )// Simplex Noise from IQ\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\tp /=2.;\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 nx = h*h*h*h*vec3( dot(a,hash2(i+0.0)), dot(b,hash2(i+o)), dot(c,hash2(i+1.0)));\n    vec3 ny = h*h*h*h*vec3( dot(a,hash2(i+4.5)), dot(b,hash2(i+o+4.5)), dot(c,hash2(i+1.0+4.5)));\n\n    return vec2(dot( nx, vec3(50.0) ),dot( ny, vec3(50.0) ));\n\t\n}\n\n\nmat2 m2;\n\nvec2 fbm2(vec2 x)\n{\n    vec2 r = vec2(0.0);\n    float a = 1.5;\n    \n    for (int i = 0; i < 9; i++)\n    {\n        r += m2*noise2b(x+r)*a; \n        x +=0.3*r+.4;\n    }     \n    return r;\n}\n\n\nvec2 water(vec2 x)\n{\n    x=fbm2(x);\n    x=abs(x)/dot(x, x)-1.;\n    return (x)/dot(x,x)-1.;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*fragCoord.xy / iResolution.yy;\n    uv*=10.;\n    float t = 1.5*iTime;\n    float st = sin(t), ct = cos(t);\n    m2 = mat2(ct,st,-st,ct);\n    vec2 uv0 = vec2(abs(uv.x-18.), uv.y);\n    float flow = abs(uv.x - 18.);\n    \n    //vec2 p = water(uv0+1.*iTime)+2.;\n    //float c = length(p)/5.;\n    //c=clamp(pow(c,1.),0.,1.);\n    float n = length(water(uv0) + vec2(0, 2.*sin(iTime)));\n    float c = 1. - 16. * pow( max( 0., length(uv0*vec2(1.8+uv0.y*1.5,.75) ) - n * max( 0., uv0.y + 0.3 ) ),1.0 );\n\tfloat c1 = n * c * (pow(2.50*uv.y,4.));\n\tc1=clamp(c1,0.,1.);\n\n    // Normalized pixel coordinates (from 0 to 1)\n  \n   \n    float water = abs(uv.x - 18.)/0.3;\n    water = clamp(pow(water, 3.),0.,1.);\n   \n    water = pow(water, 0.4);\n    //tempwater = pow(tempwater, 0.3);\n\n    // Time varying pixel color\n    vec3 col = vec3(water);\n    col = vec3 (1.5*c1, c1*c1*c1, c1*c1*c1*c1*c1*c1) ;\n    //col *= water;\n    //col *= flow;\n\tfragColor = vec4(col,1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}