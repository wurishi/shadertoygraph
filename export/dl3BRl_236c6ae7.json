{"ver":"0.1","info":{"id":"dl3BRl","date":"1701461915","viewed":11,"name":"Fractal Equalizer","username":"tassel","description":"Fractal Equalizer with parallax and glow","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["fractal","glow","equalizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Md33zX","filepath":"https://soundcloud.com/kim-naturd-rasmussen/cryptocurrency-alien-token?si=d3faaf70fa2e4b368a4bef7103fbf756","previewfilepath":"https://soundcloud.com/kim-naturd-rasmussen/cryptocurrency-alien-token?si=d3faaf70fa2e4b368a4bef7103fbf756","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nEXperimental Parallax Fractal Equalizer\nTassel / Shadertoy.com / Feel free to use it for whatever purpose you want.\nCool if you mention shadertoy.com, which has the credit for this being online ;)\n\nMusic by NATURD, (Kim Lopez-Stormo) - https://soundcloud.com/kim-naturd-rasmussen\n*/\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 fractalCenter = vec2(0.6, 0.5);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (uv - fractalCenter) * 5.0;\n\n    vec2 z1 = p;\n    vec2 z2 = p;\n    vec2 c = p;\n\n    float intensity = 0.05;\n    float t = iTime * 0.5;\n\n    // Get music data from iChannel0\n    float musicData = texture(iChannel0, vec2(t * 0.3, 0.5)).r;\n\n    // Use music data to modulate the scaling factors\n    float scale1 = mix(1.0, 2.0, musicData);\n    float scale2 = mix(1.0, 0.5, musicData);\n\n    for (int i = 0; i < 70; i++)\n    {\n        float x1 = z1.x * z1.x - z1.y * z1.y + c.x;\n        float y1 = 2.0 * z1.x * z1.y + c.y;\n\n        float x2 = z2.x * z2.x - z2.y * z2.y + c.x;\n        float y2 = 2.0 * z2.x * z2.y + c.y;\n\n        // Scale and offset the fractal layers\n        x1 *= scale1;\n        y1 *= scale1;\n\n        x2 *= scale2;\n        y2 *= scale2;\n\n        z1 = vec2(x1, y1);\n        z2 = vec2(x2, y2);\n\n        // Combine the intensity from both layers\n        intensity += 1.0 * smoothstep(5.0, 1.0, abs(length(z1)));\n        intensity += 1.0 * smoothstep(5.0, 1.0, abs(length(z2)));\n\n        // Adjust the offset for parallax'ish effect\n        c += vec2(sin(t), cos(t)) * 0.005;\n    }\n\n    // Adjust color based on intensity\n    vec3 color = mix(vec3(0.4, 0.2, 0.4), vec3(1.8, 0.9, 1.0), intensity / 90.0);\n\n    // Glow effect\n    float glowIntensity = smoothstep(0.2, 0.5, musicData) * 0.05;\n    color += vec3(1.0) * glowIntensity;\n\n    // Gradient'ish color\n    vec3 warmColor = vec3(0.5, 0.2, 0.4);\n    color = mix(color, warmColor, smoothstep(0.3, 0.01, intensity));\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}