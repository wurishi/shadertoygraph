{"ver":"0.1","info":{"id":"3l2yRh","date":"1593718827","viewed":109,"name":"Better Multicolor Metaballs","username":"Mischawake","description":"Trying to improve look, moved metaballs to an array, added better-looking shading and interactions between bordering colors. Building off https://www.shadertoy.com/view/3llyDB","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define hsv2rgb(h) clamp( abs(mod( h*6.+vec3(0,4,2), 6.)-3.)-1., 0., 1. )\n\nfloat calcInfluence( vec4 ball, vec2 uv)\n{ \n    float d = distance(ball.rg, uv);\n    float inf = pow( ball.b/d, 3.0);\n    return  inf;   \n}\n\nfloat calcShading( vec4 ball, vec2 uv )\n{\n    float d = distance(ball.rg, uv);\n    float inf = pow( ball.b/(d+ball.b), 3.0 );\n    return  inf;   \n}\n\nvec3[] colors = vec3[]\n(   \n\n    vec3(255./255., 77./255., 0./255.),\n    vec3(255./255., 246./255., 0./255.),\n    vec3(0./255., 192./255., 199./255.),\n    vec3(10./255., 84./255., 255./255.)\n);\n\n//for gradient\nvec3[] colors2 = vec3[]\n(   \n\n    vec3(230./255., 25./255., 56./255.),\n    vec3(230./255., 144./255., 25./255.),\n    vec3(0./255., 199./255., 152./255.),\n    vec3(10./255., 165./255., 255./255.)\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= 0.333;\n    \n   \tfloat threshold = 1.0;\n   \n    vec4 mouse = iMouse / iResolution.yyyy;\n    mouse.x -= 0.333;\n    \n    float rad = 0.1;\n    float jiggle = sin(iTime*(2.0)) * 0.0125;\n    \n    vec4[] balls = vec4[]\n    (\n        vec4(0.2 + jiggle,0.2 + jiggle, rad, 0.),\n        vec4(0.2 - jiggle,0.4,rad, 3.),\n        vec4(0.2,0.6 + jiggle,rad, 3.),\n        vec4(0.2 + jiggle,0.8 + jiggle,rad, 0.),\n\n        vec4(0.4 + jiggle,0.2 - jiggle,rad, 0.),\n        vec4(0.4 + jiggle,0.4,rad, 2.),\n        vec4(0.4,0.6 + jiggle,rad, 0.),\n        vec4(0.4 - jiggle * 3.,0.8+jiggle,rad, 0.),\n\n        vec4(0.6,0.2 - jiggle,rad, 1.),\n        vec4(0.6,0.4 - jiggle,rad, 2.),\n        vec4(0.6 - jiggle,0.6 - jiggle,rad, 2.),\n        vec4(0.6,0.8 - jiggle,rad, 1.),\n\n        vec4(0.8 + jiggle,0.2 + jiggle,rad, 0.),\n        vec4(0.8 + jiggle,0.4 - jiggle,rad, 2.),\n        vec4(0.8,0.6 + jiggle,rad, 1.),    \n        vec4(0.8,0.8 - jiggle,rad, 1.),\n\n        vec4( mouse.xy,rad, 2.),\n        vec4( abs(vec2(sin(iTime*0.25), cos(iTime*0.15))),rad, 1.)\n        \n     );\n    \n   \n   \n    int ballCount = 18;\n    \n    int accumulatorCount = 4;\n    float[] accumulators = float[]\n    (\n    \t0.0,\n        0.0,\n        0.0,\n        0.0\n    );\n    \n    float[] shaders = float[]\n    (\n    \t0.0,\n        0.0,\n        0.0,\n        0.0\n    );\n    \n    int i;\n    //first pass determine color with greatest influence\n    for( i = 0; i < ballCount; i++ )\n    {\n\n        int idx = int( balls[i].a );\n        accumulators[idx] += calcInfluence( balls[i], uv);   \n        shaders[idx] += calcShading( balls[i], uv);\n    }\n    \n    float maxInf = 0.0;\n    int maxIdx = 0;\n    vec3 totalColor = vec3(0,0,0);\n    float totalInf = 0.0;\n    \n    for( i = 0; i < accumulatorCount; i++ )\n    {\n        if( accumulators[i] > maxInf )\n        {\n            maxInf = accumulators[i];\n            maxIdx = i;\n        }\n        \n        totalInf += accumulators[i];\n        totalColor += accumulators[i] * colors[i];\n    }\n    \n    totalColor /= totalInf;\n    \n    float ps = (maxInf/totalInf);\n    ps = smoothstep( 0.15, 0.55, ps);\n    \n    vec3 baseColor = mix(colors[maxIdx],colors2[maxIdx],uv.y);\n    vec3 color = mix(vec3(0),baseColor,ps);\n   \n    float influence = accumulators[maxIdx];\n    \n    float totalShade = clamp(0.,1., shaders[maxIdx] );\n    totalShade = pow( 1.0 - pow( 1.0 - totalShade, 2.0), 1.0 );\n    \n    color *= smoothstep(0.0,1.0,totalShade) + 0.25;\n    \n    float aa = min( fwidth( influence ) * 1.5, 1.);\n   \tfloat smo = smoothstep( 0., aa, influence - threshold);\n   \n    color = mix( totalColor * 0.15, color, smo);\n\n    fragColor = vec4( color, 1.0 );\n    //fragColor = vec4( vec3(1.0)* totalShade, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}