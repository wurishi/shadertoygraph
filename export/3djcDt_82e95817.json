{"ver":"0.1","info":{"id":"3djcDt","date":"1587518875","viewed":78,"name":"Felix_CornellBox","username":"felixcui","description":"HW09 CIS 461 Cornell Box","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SMALLBOXPOS vec3(-2.0, -1.0, 3.75)\n#define LARGEBOXPOS vec3(-3.5, 0.0, -5.0)\n#define BACKPOS vec3(-10.0, 0.0, 0.0)\n#define RIGHTPOS vec3(0.0, 0.0, 10.0)\n#define LEFTPOS vec3(0.0, 0.0, -10.0)\n#define CEILINGPOS vec3(0.0, -18.0, 0.0)\n\n#define LIGHT_POS vec3(0.0, 7.45, 0.0)\n#define FOVY 3.141569 * 0.25\n\n// constants\nconst int RAY_STEPS = 256;\nconst float PI = 3.14159;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n    \n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos) {\n    float t0 = box(rotateY(pos + SMALLBOXPOS, -9.9), vec3(3.0, 3.0, 3.0));\n    float t1 = box(rotateY(pos + LARGEBOXPOS, -0.9), vec3(3.0, 8.0, 3.0));\n    float t2 = box(pos + vec3(0.0, 3.0, 0.0), vec3(15.0, 1.0, 15.0));\n\tfloat t3 = plane(pos + RIGHTPOS, vec4(0.0, 0.0, 1.0, 1.0));\n    float t4 = plane(pos + LEFTPOS, vec4(0.0, 0.0, -1.0, 1.0));\n\tfloat t5 = plane(pos + CEILINGPOS, vec4(0.0, -1.0, 0.0, 1.0));\n    float t6 = plane(pos + BACKPOS, vec4(-1.0, 0.0, 0.0, 1.0));\n    \n    float min = min(t5, min(t4, min(t3, min(t0, min(t2, min(t1, t6))))));\n    return min;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos) {\n\tfloat t0 = box(rotateY(pos + SMALLBOXPOS, -9.9), vec3(3.0, 3.0, 3.0));\n    float t1 = box(rotateY(pos + LARGEBOXPOS, -0.9), vec3(3.0, 8.0, 3.0));\n    float t2 = box(pos + vec3(0.0, 3.0, 0.0), vec3(15.0, 1.0, 15.0));\n\tfloat t3 = plane(pos + RIGHTPOS, vec4(0.0, 0.0, 1.0, 1.0));\n    float t4 = plane(pos + LEFTPOS, vec4(0.0, 0.0, -1.0, 1.0));\n\tfloat t5 = plane(pos + CEILINGPOS, vec4(0.0, -1.0, 0.0, 1.0));\n    float t6 = plane(pos + BACKPOS, vec4(-1.0, 0.0, 0.0, 1.0));\n    \n    obj = 0;\n    float min = min(t5, min(t4, min(t3, min(t0, min(t2, min(t1, t6))))));\n    t = min;\n    if (min == t0) {obj = 3;}\n    else if (min == t1) {obj = 3;}\n    else if (min == t3) {obj = 0;}\n    else if (min == t4) {obj = 1;}\n    else if (min == t6) {obj = 3;}\n    else {obj = 3;}\n}\n\nvoid rayCast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = rotateY(vec3(0.0, 1.0, 15.0), PI * 1.5);\n    ref = vec3(0.0, 0.0, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    \n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n\tt = 0.001;\n    for (int i = 0; i < RAY_STEPS; ++i) \n    {\n    \tvec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        \n        if (m < 0.01) \n        {\n         \treturn;   \n        }\n        \n        t += m;\n    }\n    \n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 light, vec3 view) {\n    float lambert = max(0.0, dot(n, light));\n\tswitch(hitObj)\n    {\n        case 0: // left wall\n        return vec3(1.0, 0.88, 0.7) * vec3(1.0, 0.0, 0.0) * lambert;\n        break;\n        case 1: // right wall\n        return vec3(1.0, 0.88, 0.7) * vec3(0.0, 0.88, 0.0) * lambert;\n        break;\n        case 3: // floor, ceiling, boxes\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n        case -1:\n        return vec3(0.0);\n        break;\n    }\n    \n    return vec3(1.0);\n}\n\nvec3 computeNormal(vec3 pos, vec3 lightPos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                            sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                            sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\n\n        \n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Convert to [-1, 1]\n    uv = 2.0 * uv - vec2(1.0, 1.0);\n    vec3 lightPos = vec3(-4.0, 18.0, 0.0);\n\tIntersection aaIsects[4];\n    vec3 dir, eye, ref;\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            rayCast(uv + vec2(i, j) / iResolution.xy, dir, eye, ref);\n            aaIsects[idx++] = sdf3D(dir, eye + vec3(-12.0, 8.0, 0.0), lightPos);\n        }\n    }\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.25;\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), 1.0);\n    float fogT = smoothstep(30.0, 50.0, distance(aaIsects[0].p, eye));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n}","name":"Image","description":"","type":"image"}]}