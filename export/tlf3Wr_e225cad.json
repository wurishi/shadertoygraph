{"ver":"0.1","info":{"id":"tlf3Wr","date":"1556063910","viewed":152,"name":"Sandpiles","username":"oalpha","description":"Sandpile fractal generator.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","sandpile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float previous = texture(iChannel0, uv).r;\n\n    if(previous > 3.5 / N)\n    \tfragColor = vec4(0.,0.,1.,1.);\n    else if(previous > 2.5 / N)\n    \tfragColor = vec4(1.,0.,0.,1.);\n    else if(previous > 1.5 / N)\n    \tfragColor = vec4(0.,1.,0.,1.);\n    else if(previous > 0.5 / N)\n    \tfragColor = vec4(1.,1.,0.,1.);\n    else\n    \tfragColor = vec4(0.,0.,0.,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float previous = texture(iChannel0, uv).r;\n    #define RAD2\n    #ifdef RAD1\n    float neighbors[] = float[4](\n        texture(iChannel0, uv + scale * vec2( 1., 0.) / iResolution.xy).r,\n        texture(iChannel0, uv + scale * vec2( 0., 1.) / iResolution.xy).r,\n        texture(iChannel0, uv + scale * vec2(-1., 0.) / iResolution.xy).r,\n        texture(iChannel0, uv + scale * vec2( 0.,-1.) / iResolution.xy).r\n    );\n    #elif defined RAD2\n    float neighbor_e = texture(iChannel0, uv + scale * vec2( 1., 0.) / iResolution.xy).r;\n    float neighbor_n = texture(iChannel0, uv + scale * vec2( 0., 1.) / iResolution.xy).r;\n    float neighbor_w = texture(iChannel0, uv + scale * vec2(-1., 0.) / iResolution.xy).r;\n    float neighbor_s = texture(iChannel0, uv + scale * vec2( 0.,-1.) / iResolution.xy).r;\n    float neighbor_ee = texture(iChannel0, uv + scale * vec2( 2., 0.) / iResolution.xy).r;\n    float neighbor_nn = texture(iChannel0, uv + scale * vec2( 0., 2.) / iResolution.xy).r;\n    float neighbor_ww = texture(iChannel0, uv + scale * vec2(-2., 0.) / iResolution.xy).r;\n    float neighbor_ss = texture(iChannel0, uv + scale * vec2( 0.,-2.) / iResolution.xy).r;\n    float neighbor_ne = texture(iChannel0, uv + scale * vec2( 1., 1.) / iResolution.xy).r;\n    float neighbor_nw = texture(iChannel0, uv + scale * vec2(-1., 1.) / iResolution.xy).r;\n    float neighbor_sw = texture(iChannel0, uv + scale * vec2(-1.,-1.) / iResolution.xy).r;\n    float neighbor_se = texture(iChannel0, uv + scale * vec2( 1.,-1.) / iResolution.xy).r;\n    #endif\n    if(iFrame == 0) {\n        if(distance(uv,vec2(.5)) < 2./max(iResolution.x,iResolution.y))\n            fragColor = vec4(1024.,0.,0.,1.);\n        else\n            fragColor = vec4(0.,0.,0.,1.);\n    }\n    else {\n        float next = previous;\n        #ifdef RAD1\n        for(int i = 0; i < 4; i++)\n            if(neighbors[i] > 3.5 / N)\n                next += 1. / N;\n        if(previous > 3.5 / N)\n            next -= 4. / N;\n        #elif defined RAD2\n        float  c = previous ;\n        float  e = neighbor_e ;\n        float  n = neighbor_n ;\n        float  w = neighbor_w ;\n        float  s = neighbor_s ;\n        float ee = neighbor_ee;\n        float nn = neighbor_nn;\n        float ww = neighbor_ww;\n        float ss = neighbor_ss;\n        float ne = neighbor_ne;\n        float nw = neighbor_nw;\n        float sw = neighbor_sw;\n        float se = neighbor_se;\n        if(previous > 3.5 / N) {\n            c -= 4. / N;\n            e += 1. / N;\n            n += 1. / N;\n            w += 1. / N;\n            s += 1. / N;\n        }\n        if(neighbor_e > 3.5 / N) {\n            e  -= 4. / N;\n            c  += 1. / N;\n            ee += 1. / N;\n            ne += 1. / N;\n            se += 1. / N;\n        }\n        if(neighbor_n > 3.5 / N) {\n            n  -= 4. / N;\n            c  += 1. / N;\n            nn += 1. / N;\n            ne += 1. / N;\n            nw += 1. / N;\n        }\n        if(neighbor_w > 3.5 / N) {\n            w  -= 4. / N;\n            c  += 1. / N;\n            ww += 1. / N;\n            nw += 1. / N;\n            sw += 1. / N;\n        }\n        if(neighbor_s > 3.5 / N) {\n            s  -= 4. / N;\n            c  += 1. / N;\n            ss += 1. / N;\n            se += 1. / N;\n            sw += 1. / N;\n        }\n        if(neighbor_ne > 3.5 / N) {\n            e += 1. / N;\n            n += 1. / N;\n        }\n        if(neighbor_nw > 3.5 / N) {\n            w += 1. / N;\n            n += 1. / N;\n        }\n        if(neighbor_sw > 3.5 / N) {\n            w += 1. / N;\n            s += 1. / N;\n        }\n        if(neighbor_se > 3.5 / N) {\n            e += 1. / N;\n            s += 1. / N;\n        }\n        if(neighbor_ee > 3.5 / N)\n            e += 1. / N;\n        if(neighbor_nn > 3.5 / N)\n            n += 1. / N;\n        if(neighbor_ww > 3.5 / N)\n            w += 1. / N;\n        if(neighbor_ss > 3.5 / N)\n            s += 1. / N;\n        previous = c;\n        neighbor_e = e;\n        neighbor_n = n;\n        neighbor_w = w;\n        neighbor_s = s;\n        if(previous > 3.5 / N)\n            c -= 4. / N;\n        if(neighbor_e > 3.5 / N)\n            c  += 1. / N;\n        if(neighbor_n > 3.5 / N)\n            c  += 1. / N;\n        if(neighbor_w > 3.5 / N)\n            c  += 1. / N;\n        if(neighbor_s > 3.5 / N)\n            c  += 1. / N;\n        next = c;\n        #endif\n        fragColor = vec4(next,0.,0.,1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float N = 256.;\nconst float scale = 1.;","name":"Common","description":"","type":"common"}]}