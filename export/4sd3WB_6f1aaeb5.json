{"ver":"0.1","info":{"id":"4sd3WB","date":"1452027905","viewed":2324,"name":"Finite Water","username":"overlii","description":"water simulation using finite differences approximation of the wave equation. Click on the surface to make some waves, would be happy to see someone make a proper rendering, maybe tomorrow..","likes":42,"published":1,"flags":32,"usePreview":0,"tags":["procedural","simulation","water","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Wave propagation simulation using finite differences.\n// See (f.ex.) http://www.uio.no/studier/emner/matnat/ifi/INF2340/v05/foiler/sim04.pdf\n// for the model and equations.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(2.0*texture(iChannel0, uv).x+0.5);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Mouse excitation\n    vec2 r = fragCoord.xy - iMouse.xy;\n    float d = 0.001*dot(r,r);\n    if(iMouse.z > 0.0 && d < 0.05) {\n    \tfragColor = vec4(0.0,0.2,0,0);\n        return;\n    } \n    \n    // Periodic excitation\n    r = fragCoord.xy - vec2(50, 70);\n    d = 0.001*dot(r,r);\n    if (mod(iTime, 0.5) < 0.1 && d < 0.05) {\n        fragColor = vec4(0.0,0.1,0,0);\n        return;\n   \t}\n\n    // just copy\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \tfragColor = texture(iChannel0, uv);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dx = 1.0/iResolution.x;\n    float dy = 1.0/iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 udu = texture(iChannel0, uv).xy;\n\t// old elevation\n    float u = udu.x;\n    // old velociy\n    float du = udu.y;\n    \n    // Finite differences\n    float ux = texture(iChannel0, vec2(uv.x+dx, uv.y)).x;\n    float umx = texture(iChannel0, vec2(uv.x-dx, uv.y)).x;\n    float uy = texture(iChannel0, vec2(uv.x, uv.y+dy)).x;\n    float umy = texture(iChannel0, vec2(uv.x, uv.y-dy)).x;\n\n    // new elevation\n    float nu = u + du + 0.5*(umx+ux+umy+uy-4.0*u);\n    nu = 0.99*nu;\n    \n    // store elevation and velocity\n    fragColor = vec4(nu,nu-u,0.0,0.0);\n\n}","name":"Buf B","description":"","type":"buffer"}]}