{"ver":"0.1","info":{"id":"md2Xzc","date":"1670682359","viewed":191,"name":"Fork of mrange' Triangle ðŸ”Š","username":"blurryroots","description":"Added some animations and used rgb signal as color mask. Reset after load, to make sure it syncs properly.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sound","triangles","pattern","twitter","dance","freedom"],"hasliked":0,"parentid":"ds2SRc","parentname":"Max Drekker Triangles"},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/md2Xzc\n\n// CC0: Max Drekker Triangles\n//  I liked Max's tweet: https://twitter.com/MaxDrekker/status/1601166513079484416?s=20&t=utQa4fiuhtOThlkZv7Rvig\n//  Simple and sweet.\n//  Inspired by the tweet I created this shader.\n#define SOUND_IN\n#define TEXTURE_MAPPED\n#define SOUND_REACTIVE\n#define TEXTURED_BACKGROUND\n#define MAIN_EFFECT\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define SCA(a)      vec2(sin(a), cos(a))\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define LW          0.00666\n#define MOD         0.025\n#define MAX         13.0\n\n#ifdef SOUND_IN\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n  return float(i-2*(i/2));\n}\n// ===\n#endif\n\nconst float phi = (1. + sqrt (5.)) / 2.;\nconst float phi0 = phi - 1.;\nconst float phi0i = 1. - phi0;\nconst vec4 linear_space = vec4(2.2);\nconst vec4 sRGB_space = vec4(0.4545);\n\nfloat psin (float t) {\n    return (1. + sin (t)) / 2.;\n}\nfloat pcos (float t) {\n    return (1. + cos (t)) / 2.;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// License: CC0, author: MÃ¥rten RÃ¥nge, found: https://github.com/mrange/glsl-snippets\nfloat pref(inout vec2 p, vec2 r, float sm) {\n  float d = dot(p, r);\n  p -= r*pmin(0.0, d, sm)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nvec2 dtri(vec2 p) {\n  float k = 3.0; //2.9 + .2*psin(iTime*3.);\n  vec2 n = SCA(PI/k);\n  const float sm = .02;\n  vec2 p0 = p;\n  p0.y = -pabs(p0.y, sm);\n  \n  float edgesmoothness = .5;// + 1.5 * psin(iTime);\n  pref(p0, n, edgesmoothness*sm);\n  \n  float n0 = mod1(p0.x, MOD);\n  float d0 = abs(p0.x) - (LW*n0/MAX);\n  float d = d0;\n  return vec2(d, n0);\n}\n\nvec3 effect(float t, bool up, vec2 p, vec2 pp, float k, float e) {\n  float aa = 2.0/RESOLUTION.y;\n  \n  float angle = PI;\n  angle *= up ? 1./6. : 1./2.;\n  \n  vec2 offset = up ? vec2(0.) : vec2(-0.125, -0.85/8.);\n  \n  vec3 col;\n  mat2 r = e * ROT(angle);\n  //p -= vec2(0.15, -0.2);\n  p -= offset;\n  p *= r;\n  vec3 bcol = vec3(1.0, 0.0, 0.25);\n  vec2 base = vec2 (0.05, 0.15);\n  \n  vec2 off = k*MOD*vec2(sin(iTime), cos(iTime));//+vec2(0.0, 0.5*MOD)*r;\n  for (int i = 0; i < 3; ++i) {\n    bcol = bcol.yzx;\n    float fi = float(i);\n    float ff = (fi + 1.) / 3.;\n    vec2 pb = p; // mix (p, 2.0*ff*p, psin (iTime/(0.1*phi)));\n    vec2 tp = pb+base+off*fi;\n    \n    vec2 d2 = dtri(tp);\n    vec3 tcol = bcol;\n    tcol *= smoothstep(0.0, MAX, d2.y);\n    tcol *= step(d2.y, MAX);\n    tcol *= smoothstep(aa, -aa, d2.x);\n    col += tcol;\n  }\n  return col;\n}\n\nfloat map (float t, vec2 a, vec2 b) {\n    float x = (t - a.x) / a.y;\n    float y = b.x + x * (b.y - b.x);\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  float r = iResolution.x / iResolution.y;\n  vec2 uvn = (fragCoord / iResolution.xy);\n  vec2 uv = uvn * vec2(r, 1.0);\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  #ifdef SOUND_IN\n  // Overlay by FabriceNeyret2 https://www.shadertoy.com/view/MtyXRW\n  if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n  #endif\n    \n  #ifdef SOUND_REACTIVE\n  float beat = texture(iChannel1, vec2(0.4, 0.)).x;\n  beat = map(beat, vec2(0.0, 0.3), vec2(0.0, 1.0));\n  float e = 0.8 + 0.2*beat;\n  #else\n  float e = (0.9 + 0.1*psin(iTime/.2*phi));\n  #endif  \n  float k = 9.0 * psin((iTime + PI/3.)/(.1*phi));\n  \n  float mr = .02;\n  float maskr = mr * smoothstep(1.5, 0.25, length(p - vec2(0.0, -0.0)));\n  maskr = pow(maskr, .3);\n  \n  float imaskr = mr * smoothstep(0.5, 1.5, length(p - vec2(0.0, -0.0)));\n  imaskr = pow(imaskr, 0.9);\n  \n  vec3 col;\n  \n  #ifdef TEXTURED_BACKGROUND\n  vec4 tx = texture(iChannel2, 2.*(uvn + 0.3*vec2(cos(iTime/13.), sin(iTime/13.))));\n  tx = pow(tx, linear_space);\n  col = (imaskr)*tx.rgb;\n  #endif\n  \n  //#undef MAIN_EFFECT\n  #ifdef MAIN_EFFECT\n  //k *= 0.;\n  float mt = mod(iTime, 8.);\n  bool up = 2. < mod (iTime, 4.);\n  vec2 effp = p - vec2 (-0.033, 0.15);\n  col += maskr * effect(iTime, up, effp, pp, k, e);\n  if (7. < mt) {\n      float k2 = phi0 * k;\n      bool up2 = false == up;\n      col += maskr * effect(iTime, up2, effp, pp, k2, e);\n  }\n  #endif\n  \n  #ifdef TEXTURE_MAPPED\n  float or = 4./3.; // source video\n  uvn *= 1.2;\n  uvn.x *= or;\n  uvn.x -= 0.25;\n  uvn.y -= 0.;\n  vec4 stayfree = texture(iChannel0, uvn);\n  stayfree = pow(stayfree, linear_space);\n  col = min (col, stayfree.rgb);\n  #endif\n\n  fragColor = vec4(col, 1.0);\n  #if defined(TEXTURE_MAPPED) || defined(TEXTURED_BACKGROUND)\n  fragColor = pow(fragColor, sRGB_space);\n  #endif\n}\n","name":"Image","description":"","type":"image"}]}