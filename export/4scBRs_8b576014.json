{"ver":"0.1","info":{"id":"4scBRs","date":"1526328327","viewed":779,"name":"3d Vector Field Ray Test...","username":"Chris_M_Thomasson","description":"I want to ray march this 3d volume! Need to get to work! ;^)","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["fractal","field","vector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nPre-Alpha Vector Field by Chris M. Thomasson ver:0.0.7\nThe code is basic, and the math can be streamlined.\nThis is a basic experiment, not thinking of sheer performance yet.\n\nCreate an attractor by clicking and dragging it around. \nCopyright (c) 2018\n___________________________________*/\n\n\n// The number of points in the spiral\n#define CT_N 10\n#define CT_LINES 32\n\n// Viewport Axes\nstruct ct_axes\n{\n    float xmin;\n    float xmax;\n    float ymin;\n    float ymax;\n};\n    \n    \nct_axes ct_axes_from_radius(\n    in vec3 vpcircle\n){\n    return ct_axes(\n        vpcircle.x - vpcircle.z,\n        vpcircle.x + vpcircle.z,\n        vpcircle.y - vpcircle.z,\n        vpcircle.y + vpcircle.z\n    );\n}\n\n\n// Simple 2d Plane\nstruct ct_plane2d\n{\n    ct_axes axes;\n    float xstep;\n    float ystep;\n};\n    \n    \nct_plane2d ct_plane2d_create(\n    in ct_axes axes\n){\n    float awidth = axes.xmax - axes.xmin;\n    float aheight = axes.ymax - axes.ymin;\n    \n    float daspect = abs(iResolution.y / iResolution.x);\n    float waspect = abs(aheight / awidth);\n    \n    if (daspect > waspect)\n    {\n        float excess = aheight * (daspect / waspect - 1.0);\n        axes.ymax += excess / 2.0;\n        axes.ymin -= excess / 2.0;\n    }\n    \n    else if (daspect < waspect)\n    {\n        float excess = awidth * (waspect / daspect - 1.0);\n        axes.xmax += excess / 2.0;\n        axes.xmin -= excess / 2.0;\n    }\n    \n    return ct_plane2d(\n        axes,\n        (axes.xmax - axes.xmin) / iResolution.x,\n        (axes.ymax - axes.ymin) / iResolution.y\n    );\n}\n\n\nvec2 ct_plane2d_project(\n\tin ct_plane2d self,\n    in vec2 z\n){\n\treturn vec2(\n        self.axes.xmin + z.x * self.xstep,\n        self.axes.ymin + z.y * self.ystep\n    );\n}\n\n\n// A vector field point\nstruct ct_vfpoint\n{\n    vec3 p;\n    float m;\n};\n\n\n// Our global per-pixel points\nct_vfpoint g_vfp[CT_N + 1];\n\n\n// Gain a normalized vector from p, \n// using a power of npow.\nvec3 ct_vfield_normal(\n    in vec3 p,\n    float npow\n){\n    vec3 g = vec3(0.0, 0.0, 0.0);\n    \n    const int imax = CT_N + 1;\n    \n    for (int i = 0; i < imax; ++i)\n    {\n        vec3 dif = g_vfp[i].p - p;\n        float sum = dif[0] * dif[0] + dif[1] * dif[1] + dif[2] * dif[2];\n        float mass = pow(sum, npow);\n        \n      \tg[0] = g[0] + g_vfp[i].m * dif[0] / mass;\n      \tg[1] = g[1] + g_vfp[i].m * dif[1] / mass;\n        g[2] = g[2] + g_vfp[i].m * dif[2] / mass;\n    }\n    \n    return normalize(g);\n}\n\n\nfloat ct_normal_pi(\n    in vec2 z,\n    in float sa\n){\n    float a = atan(z[1], z[0]) + sa;\n    if (a < 0.0) a += 6.28318;\n    a /= 6.28318;\n    return a;\n}\n\n\n// Vector Pixel Iteration\nvec4 ct_vpixel(\n    in vec3 z,\n    in int n,\n    in float npow\n){\n    vec3 vn = ct_vfield_normal(z, npow);\n    \n    float a = cos(iTime * .25) * 3.14;\n\n    //vec2 rc = vec2(\n    //    vn[0] * cos(a) - vn[1] * sin(a),\n    //    vn[0] * sin(a) + vn[1] * cos(a)\n    //);\n    \n    float color = ct_normal_pi(vn.xy, a) * float(CT_LINES);\n    color = mod(color, 1.0);\n    float color2 = 0.0;\n    if (color < .5)// + abs(cos(iTime * .5)) * .2)\n    {\n        color = 1.0 - color;\n        color2 = mod(vn.z * 3.0, 1.0);\n    }\n    \n    else\n    {\n        color = 0.0;\n        color2 = 0.0;\n    }\n    \n\n    return vec4(\n        color2, //mod(color * 4.0, 1.0), \n        mod(color * 3.0, 1.0), \n        mod(color * 2.0, 1.0),\n        1.0\n    );\n}\n\n\n// High-Level Entry\nvec4 ct_main(\n    in ct_plane2d plane,\n    in vec2 c\n){\n    const int n = CT_N;\n    float scale = 1.0;\n    \n    for (int x = 0; x < n; ++x)\n    {\n        int y = 0;\n        float xr = float(x) / float(n);\n        float angle = xr * 6.28;\n        \n        g_vfp[x] = ct_vfpoint(\n            vec3(cos(angle), sin(angle), sin(angle * 2.)), \n            1.0\n        );\n    }\n    \n    if (iMouse.z > 0.0)\n    {\n        vec2 cm = ct_plane2d_project(plane, vec2(iMouse));\n        g_vfp[n] = ct_vfpoint(\n            vec3(cm, .0), \n            -1.6\n        );\n    }\n    \n    vec3 z = vec3(c, sin(iTime * .5));\n    \n    return ct_vpixel(z, 128, 1.0 + abs(sin(iTime * 3.5)) * 2.0);\n}\n\n\n// Raw Entry.\nvoid mainImage(\n  \tout vec4 fragColor, \n\tin vec2 fragCoord\n){\n    vec3 vpcircle = vec3(\n        0.0, \n        0.0, \n        2.0\n    );\n    \n    ct_plane2d plane = ct_plane2d_create(\n        ct_axes_from_radius(vpcircle)\n    );\n    \n    vec2 c = ct_plane2d_project(plane, fragCoord);\n    \n    // Exec...\n    vec4 color = ct_main(plane, c);\n    \n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}