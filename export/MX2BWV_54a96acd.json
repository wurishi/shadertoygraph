{"ver":"0.1","info":{"id":"MX2BWV","date":"1729957740","viewed":106,"name":"julia spirals^n","username":"pb","description":"julia version of spirals^n after discussion with FabriceNeyret2\nuse the mouse if you like","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","exponential"],"hasliked":0,"parentid":"4XjBzK","parentname":"spirals^n"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime/3.\n//golfing by FabriceNeyret2\nvoid mainImage0( out vec4 O, vec2 u )\n{\n    vec2  R =  iResolution.xy, m=iMouse.xy, z,\n          U = ( u+u - R )/ R.y *  vec2(.08) + vec2(-.36,.31),\n          M = iMouse.w!=0.?( m+m - R )/ R.y : .3*vec2(cos(t),sin(t));\n    float i = -2.;\n    \n    z=U;  //Julia set: input is each pixel coordinate\n    for ( O *= 0. ; i++ < 1e3 && dot(z,z) < 1e9 ; )\n        z = mix( min(exp(z.x),1e9) * vec2( cos(z.y), sin(z.y) ), // exp(z)\n                 mat2(z,-z.y,z.x) * z,                           // zÂ²\n                .7)\n            + vec2(-1.469,-.23) + M/20.,\n                  \n        O[ int(z.x<0.)*2 + int(z.y<0.) ]++;          \n    \n    //O = cos( O.xzww * vec4(40,25,60,0) / i  );\n    //O = cos( O.xzww * vec4(29,26,65,0) / i  );\n    O = cos( O.xzww * vec4(16,12,36,0) / i  );\n    O*=O;\n}\n\n//FabriceNeyret2 antialiasing trick\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n        //O.b++;                        // uncomment to see where the oversampling occurs\n    }\n}\n","name":"Image","description":"","type":"image"}]}