{"ver":"0.1","info":{"id":"7tlGDj","date":"1622901629","viewed":66,"name":"PerlinPlasma","username":"gombie","description":"Old school plasma + perlin noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float M_PI = 3.14159265358979323846264338327950288;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = vec2(uv*5.0);\n    float n = noise(pos);\n    float cx=uv.x+0.5*sin(iTime/5.0);\n    float cy=uv.y+0.5*cos(iTime/3.0);\n    float v=sin(sqrt(100.0*(cx*cx+cy*cy)+1.0)+iTime);\n    v+=sin(10.0*(uv.x*sin(iTime/2.0))+uv.x*cos(iTime/3.0)+iTime);\n    v+=sin(uv.x*10.0+iTime);\n    vec3 col=vec3(cos(v*M_PI), sin(v*M_PI*n),sin(v*M_PI));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}