{"ver":"0.1","info":{"id":"WlKyzh","date":"1610469481","viewed":201,"name":"Inside a Tesseract","username":"pprovins","description":"An SDF function for a Bounding Box is used to create a \"tesseract\" fit enough for Matthew McConaughey to get lost in.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","boundingbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Credits to iquilezles fir SDF functions, https://iquilezles.org/articles/distfunctions\n// Creduts to Marius Horga for his Raymarching write-up, http://metalkit.org/2016/12/30/raymarching-in-metal.html\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct BoundingBox {\n    vec3 center;\n    vec3 bounds;\n    float edge;\n};\n\nfloat distToBoundingBox(Ray ray, BoundingBox bb) {\n    vec3 p = abs(ray.origin - bb.center) - bb.bounds;\n    vec3 q = abs(p + bb.edge) - bb.edge;\n    return min(min(\n             length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n             length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n             length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0)\n    );\n}\n\nfloat distToBoundingBoxScene(Ray r) {\n    BoundingBox bb = BoundingBox(vec3(1.0), vec3(1.0), 0.05);\n    Ray repeatRay = r;\n    repeatRay.origin = mod(r.origin, 2.0);\n    return distToBoundingBox(repeatRay, bb);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 camPos = vec3(1000.0 + (sin(iTime) / 2.0) + 1.0, 1000.0 + (cos(iTime) / 2.0) + 1.0, iTime);\n    Ray ray = Ray(camPos, normalize(vec3(uv, 1.0)));\n    vec3 col = vec3(0.0);\n    for (float i=0.0; i<100.0; i++) {\n        float dist = distToBoundingBoxScene(ray);\n        if (dist < 0.01) {\n              col = vec3(1.0);\n              break;\n        }\n        ray.origin += ray.direction * dist;\n    }\n    vec3 posRelativeToCamera = ray.origin - camPos;\n    fragColor = vec4(1.0) - vec4(col * abs(posRelativeToCamera / 5.0), 0.0);\n}","name":"Image","description":"","type":"image"}]}