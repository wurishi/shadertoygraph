{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"mat3 my(float beta)\n{\n\treturn mat3(cos(beta), 0, sin(beta),\n\t\t\t\t0, 1, 0,\n\t\t\t\t-sin(beta), 0, cos(beta));\n}\n\nmat3 mz(float beta)\n{\n\treturn mat3(cos(beta), -sin(beta), 0,\n\t\t\t\tsin(beta), cos(beta), 0,\n\t\t\t\t0, 0, 1);\n}\n\nmat3 mx(float beta)\n{\n\treturn mat3(1, 0, 0,\n\t\t\t\t0, cos(beta), sin(beta),\n\t\t\t\t0, -sin(beta), cos(beta));\n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec4 map(vec3 ro, vec3 rd)\n{\n\tvec4 ret = vec4(0., 0., 0., -1.0);\n\tbool con = true;\n\n\tfor (int j = 0; j <= 625; j++ )\n\t{\n\t\tfloat i = float(j) / float(50);\n\t\tfloat h_delta = 0.1;\n\t\tif(!con) continue;\n\t\t\n\t\tvec3 ray = ro + i * rd;\n\t\t//if (ray.z < 0.5)\tbreak;\n\t\tvec4 n = vec4(0.0, 0.5, 0.0, 0.2);\n\t\t\n\t\t//if (ray.y < 0.6) return -1.0; //below the bedrock\n\t\t\n\t\tfloat proj = dot(ray, n.xyz);\n\t\tvec2 pd = ray.xz;\n\t\t//proj -= 0.5;\n\t\t\n\t\tfloat d, height;\n\t\tvec3 r = ray.xyz / 2.35;\n\t\t//uniform sampler2D x;\n\t\tvec4 h3;\n\t\tif ( pow(ray.z, 2.0) + pow(ray.x, 2.0) > 18.)\n\t\t{\n\t\t\th3 = texture(iChannel0, vec2(r.x, r.z));\t\n\t\t\theight = length(h3.rgb) / 2.3;\n\t\t}\n\t\telse\n\t\t{\n\t\t\th3 = texture(iChannel1, vec2(r.x, r.z));\t\n\t\t\theight = length(h3.rgb) / 3.1;\n\t\t}\n\t\t\n\t\tif (height >= r.y + h_delta)\n\t\t{\n\t\t\tcon = false;\n\t\t\tret = vec4(h3.rgb, length(ray));\t\t\n\t\t}\n\t}\n\treturn ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat aspect = iResolution.x/iResolution.y;\n\tvec3 ro = vec3(0.0, 0.0, 5.5);\n\tvec3 rd = normalize(vec3( (-1.0+2.0*uv) * vec2(aspect, 1.0), -1.0));\n\t\n\tfloat a, b;\n\ta = 3.141529/8.;\n\tb = iTime/6.0;\n\tro *= mx(a) * my(b);\n\trd *= mx(a) * my(b);\n\n\tvec4 i = map(ro, rd);\n\tfloat d = i.z;\n\tvec3 col;\n\tif (d > 0.0)\n\t{\n\t\tcol = 1.5 * i.rgb - 1.15 * i.z;\n\t}\n\telse\n\t{\n\t\tcol = mix(vec3(1.0), vec3(0., 0., 0.16), 1.-0.2 * cos(iTime/1.));\n\t}\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsXGWl","date":"1382342581","viewed":252,"name":"city park","username":"ak","description":"An attempt of calculating distance field from texture.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["na"],"hasliked":0,"parentid":"","parentname":""}}