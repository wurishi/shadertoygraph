{"ver":"0.1","info":{"id":"7ltBWM","date":"1663187806","viewed":95,"name":"Custom Flower - CIS566","username":"lianghaoquan","description":"for CIS566","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["flower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n        \n    a -= iTime / 5.0;\n\n    float numSpike = 10.0;\n    float height = 25.0 * mix(pow(cos(a * numSpike), 3.0), pow(sin(a * numSpike),3.0), tan(iTime));\n    \n    radius = mix(radius, radius + height ,  cos(iTime));\n\n    return radius;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    \n    float maxRadius =  0.25 * iResolution.y ;\n\n\tfloat radius = computeRadius(uv);\n\n    \n    // Background layer\n\t//vec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n    //vec4 layer1 = vec4(rgb(204.0, 241.0, 241.0), 1.0);\n\t\n\t// Circle\n\t//vec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 lavenderWeb = rgb(227.0, 235.0, 255.0);\n    vec3 white = rgb(251.0, 251.0, 251.0);\n    vec3 aliceBlue = rgb(231.0, 240.0, 255.0);\n    vec3 magonolia =  rgb(236.0,232.0,239.0);\n    vec3 dodgerBlue = rgb(67.0, 146.0,241.0);\n\n    vec3 color = mix(magonolia,dodgerBlue, map(radius, 0.0, maxRadius, 0.0, 1.0));\n    \n    vec4 layer1 = vec4(mix(lavenderWeb, dodgerBlue, fragCoord.y/iResolution.y), 1.0); \n    layer1 = mix(layer1, vec4(aliceBlue, 1.0), fragCoord.x/iResolution.x); \n    \n    vec4 layer1_o = vec4(mix( dodgerBlue, lavenderWeb,fragCoord.y/iResolution.y), 1.0); \n    layer1_o = mix(vec4(aliceBlue, 1.0), layer1,  fragCoord.x/iResolution.x); \n    \n    layer1 = mix(layer1, layer1_o, clamp(abs(tan(iTime / 2.0)) / 3.0, 0.0, 0.8));\n\n\n\tvec4 layer2 = circle(uv, center, radius, color);\n    \n    \n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}