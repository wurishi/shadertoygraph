{"ver":"0.1","info":{"id":"X3VGDR","date":"1732206290","viewed":126,"name":"Fluid Fire","username":"capslpop","description":"Fire","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["phong","lighting","voxel","pervoxel"],"hasliked":0,"parentid":"MfGSWd","parentname":"Fluid sim 3D"},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n    //2.0 * sin(iTime * 2.7)\n\tvec3 rayPos = vec3(0.0, 0.0, -float(volumeSize.y) + 10.0);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, iTime); //(iMouse.x/iResolution.x)*14.0);\n\trayDir.xz = rotate2d(rayDir.xz, iTime); //(iMouse.x/iResolution.x)*14.0);\n\t\n    rayPos += vec3(volumeSize)/2.0;\n    \n\tivec3 mapPos = ivec3(floor(rayPos + 0.));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec4 color;\n\n    voxel vox;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        \n        // todo: make it so when the ray leaves the volume it breaks the loop\n        if (all(lessThan(mapPos, volumeSize)) && all(greaterThan(mapPos, ivec3(0.0))))\n        {\n            if (vox.color.a > 0.1)\n            {\n                //fragColor = vec4(vox.normal/2.0 + 0.5, 1.0); // vox.color;\n                fragColor = vox.color; // * vox.light * 3.5 + color;\n                return;\n            } else\n            {\n                color.rgb += vox.light.rgb * 0.003;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n\n\tfragColor.rgb = color.rgb + texture( iChannel1, rayDir ).rgb;\n\t//fragColor.rgb = vec3(0.1 * noiseDeriv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int MAX_RAY_STEPS = 256;\n\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n// size of the volume -- cant be bigger than the max about of pixels in the buffer\n// I set it manually for simplicity\nconst ivec3 volumeSize = ivec3(64);\n\n#define fluid_rho 0.5\nfloat Pf(float rho)\n{\n    return 0.4*(rho - 0.1);\n}\n\nfloat G(vec3 x)\n{\n    float norm_squared = dot(x, x);\n    float result = 0.0;\n    float radius_squared = 1.5; // assuming a unit radius for the kernel\n    if (norm_squared < radius_squared)\n    {\n        result = 1.0 - norm_squared / radius_squared;\n    }\n    return mix(result, exp(-norm_squared), 0.65);\n}\n\n// from Unorm Vec4 Packing \nhighp uint packUnorm(mediump uvec4 a) {\n    return uint( (a.x << 24)\n               | (a.y << 16)\n               | (a.z << 8 )\n               | (a.w << 0 ) ); }\nmediump uvec4 unpackUnorm(highp uint a) {\n    return uvec4( (a & 0xFF000000u) >> 24\n                , (a & 0x00FF0000u) >> 16\n                , (a & 0x0000FF00u) >> 8\n                , (a & 0x000000FFu) >> 0   ); }\n// Pack and unpack 4 floats in [0;1] <-> float (containing uint32)\nfloat packUnorm4x8(  vec4  a) { return uintBitsToFloat(packUnorm(uvec4(round(clamp(a, 0., 1.)*255.)))); }\nvec4  unpackUnorm4x8(float a) { return vec4(unpackUnorm(floatBitsToUint(a))) / 255.; }\n\n// Pack and unpack 4 floats in [-1;1] <-> float (containing uint32)\nfloat packSnorm4x8(  vec4  a) { return uintBitsToFloat(packUnorm(uvec4(round(clamp(a, -1., 1.)*127.5+127.5)))); }\nvec4  unpackSnorm4x8(float a) { return clamp((vec4(unpackUnorm(floatBitsToUint(a))) - 127.5) / 127.5, -1., 1.); }\n\nstruct voxel\n{\n    // color of the voxel\n    vec4 color;\n    \n    // light color\n    vec4 light;\n    \n    float height;\n    \n    vec3 velocity;\n};\n\n// first two positions are xy on buffer then which face of the cube map is z\nvec4 getPos(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    int c = pos.x + volumeSize.y * pos.y + volumeSize.z * volumeSize.y * pos.z;\n    \n    ivec2 d = ivec2(c%int(res.x), c/int(res.x));\n    \n    return texelFetch(buffer, d, 0);\n    }\n\n// this intakes the fragment position and outputs the correct voxel coord\nvec3 getPos(vec2 fragCoord, ivec2 res)\n{\n    int c = int(fragCoord.x) + int(fragCoord.y) * res.x;\n    \n    vec3 pos = vec3(c%volumeSize.x, (c/volumeSize.x)%volumeSize.y, c/(volumeSize.x*volumeSize.y));\n\n    return pos;\n}\n\nvoxel getVoxel(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    vec4 info = getPos(buffer, pos, res);\n\n    voxel v;\n    v.color = unpackUnorm4x8(info.r);\n    v.light = unpackUnorm4x8(info.g);\n    v.velocity = unpackSnorm4x8(info.b).xyz;\n    v.height = info.a;\n    \n    return v;\n}\n\nvec4 saveVoxel(voxel v)\n{\n    vec4 info;\n    info.r = packUnorm4x8(v.color);\n    info.g = packUnorm4x8(v.light);\n    info.b = packSnorm4x8(vec4(v.velocity, 0.0));\n    info.a = v.height;\n    \n    return info;\n}\n\n\nfloat getNext(vec3 posOne, vec3 posTwo, voxel p, float s)\n{\n    // get height contribution with no slope\n    vec3 dif = posTwo - posOne;\n    \n    // make sure that the function does not fall out of bounds\n    vec3 n = min(abs(dif), 1.0);\n    \n    vec3 then = (2.0 * n - 3.0) * n * n + 1.0;\n    \n    float height = then.x*then.y*then.z*p.height;\n    \n    // boundries\n    float numCells = 27.0;\n    \n    /*\n    // corners\n    if (posOne.x == 2.0 && posOne.y == 2.0 && posOne.z == 2.0)\n    {\n        numCells = 8.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0 && posOne.y == 2.0 && posOne.z == 2.0)\n    {\n        numCells = 8.0;\n    }\n    else if (posOne.x == 2.0 && posOne.y == 2.0 && posOne.z == float(volumeSize.x) - 2.0)\n    {\n        numCells = 8.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0 && posOne.y == 2.0 && posOne.z == float(volumeSize.x) - 2.0)\n    {\n        numCells = 8.0;\n    }\n    \n    // edges\n    else if (posOne.x == 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    else if (posOne.z == 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    else if (posOne.z == float(volumeSize.z) - 2.0 && posOne.y == 2.0)\n    {\n        numCells = 12.0;\n    }\n    \n    // sides\n    else if (posOne.y == 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.x == 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.z == 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.x == float(volumeSize.x) - 2.0)\n    {\n        numCells = 18.0;\n    }\n    else if (posOne.z == float(volumeSize.x) - 2.0)\n    {\n        numCells = 18.0;\n    }\n    */\n    \n    // remvove extra fluid out of bounds:\n    if (posOne.y < 2.0)\n    {\n        return 0.0;\n    }    \n    if (posOne.x < 2.0)\n    {\n        return 0.0;\n    }\n    if (posOne.z < 2.0)\n    {\n        return 0.0;\n    }\n    if (posOne.x > float(volumeSize.x) - 2.0)\n    {\n        return 0.0;\n    }\n    if (posOne.z > float(volumeSize.z) - 2.0)\n    {\n        return 0.0;\n    }\n    \n    \n    return mix(height, p.height / numCells, s);\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// dave\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 pos = getPos(fragCoord, ivec2(iResolution.xy));\n    \n    voxel pCenter = getVoxel(iChannel0, ivec3(pos), ivec2(iResolution.xy));\n \n    voxel p;\n    p.height = 0.0;\n    p.velocity = vec3(0.0);\n    p.color = vec4(0.0);\n \n    // for calculating the forces\n    vec3 F = vec3(0.0);\n    vec4 avgV = vec4(0.0);\n    \n    float nextPoint = 0.0;\n    range(i, -1, 1) range(j, -1, 1) range(k, -1, 1)\n    {\n        ivec3 tpos = ivec3(pos) + ivec3(i, j, k);\n        \n        voxel p_ = getVoxel(iChannel0, ivec3(tpos), ivec2(iResolution.xy));\n        \n        // smoothing amount\n        // subtract by an amount here! Important makes the fluid more particlly   \n        float s = clamp((p_.height)/5.0, 0.0, 0.8);\n        \n        // pos one is the new center point pos\n        // pos two is the point that will add to this one\n        nextPoint = getNext(vec3(pos), vec3(tpos) + p_.velocity, p_, s);\n        \n        // multipy new velocity by the mass that each cell contribues\n        p.height += nextPoint;\n        p.velocity += p_.velocity * nextPoint;\n        \n        // now calculate forces on fluid       \n        vec3 dx = vec3(pos) - (vec3(tpos) + p_.velocity); \n        float avgP = 0.5*p_.height*(Pf(pCenter.height) + Pf(p_.height));\n        float Gdx = G(dx);\n        F -= 0.5*Gdx*avgP*dx;\n        avgV += p_.height*Gdx*vec4(p_.velocity,1.);\n    }\n    \n    // normalize the velocity baced on mass\n    if (p.height > 0.0)\n    {\n        p.velocity = p.velocity / p.height;\n    }\n    \n    avgV.xyz /= avgV.w*2.0;\n\n    //viscosity\n    F -= 0.008*p.height*(avgV.xyz - p.velocity);\n    \n    // force from mouse\n    //if (distance(fragCoord, vec2(iMouse.xy/(zooming))) < 20.0 && iMouse.z > 1.0)\n    //{\n    //    vec2 newF = (fragCoord - vec2(iMouse.xy/(zooming))) / 1000.0;\n    //    \n    //    F.x += -newF.y + newF.x/1.0;\n    //    F.y += newF.x + newF.y/1.0;\n    //    \n    //    p.height += 0.01;\n    //}\n    \n    p.velocity -= (F/p.height); // + vec3(0.001, 0.001, 0.001);\n    \n    p.velocity += (hash32(fragCoord + iTime/64.0) - 0.5) / 10.0;\n    \n    if (distance(pos, vec3(volumeSize.x, 0.0, volumeSize.z)/2.0) < 8.0 && iMouse.z > 1.0 || (iMouse.x < 0.1 && distance(pos, vec3(volumeSize.x, 0.0, volumeSize.z)/2.0) < 8.0))\n    {\n        p.height += 0.03;\n        p.velocity = vec3(0.0, 0.2, 0.0);\n    }\n    \n    // make sure that the velocity does not exceed the limit\n    p.velocity = clamp(p.velocity, -2.0, 2.0); // sometimes it is infinite\n    float vel = length(p.velocity);\n    p.velocity /= (vel > 1.0)?vel:1.0;\n    \n    // boundry conditions\n    if (pos.y <= 2.0)\n    {\n        p.velocity.y = 0.0;\n        p.height = 0.0;\n    }\n    if (pos.x <= 2.0)\n    {\n        p.velocity.x = 0.0;\n        p.height = 0.0;\n    }\n    if (pos.z <= 2.0)\n    {\n        p.velocity.z = 0.0;\n        p.height = 0.0;\n    }\n    if (pos.x >= float(volumeSize.x) - 2.0)\n    {\n        p.velocity.x = 0.0;\n        p.height = 0.0;\n    }\n    if (pos.z >= float(volumeSize.z) - 2.0)\n    {\n        p.velocity.z = 0.0;\n        p.height = 0.0;\n    }\n    \n    if (p.height > 0.04)\n    {\n        vec3 cCol = mix(vec3(0.859,0.592,0.341), vec3(0.843,0.278,0.176) * p.height * 20.0, clamp(1.0/(p.height*p.height*400.0), 0.0, 1.0));\n        p.color.rgb = (1.0 - p.height*1.5 + length(p.velocity)*2.0 + 0.3)*cCol;\n        p.color.a = 1.0;\n    }\n    \n    fragColor = saveVoxel(p);\n}","name":"Buffer A","description":"","type":"buffer"}]}