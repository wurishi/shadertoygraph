{"ver":"0.1","info":{"id":"cstczH","date":"1694736570","viewed":89,"name":"Random Directions","username":"PrzemyslawZaworski","description":" ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","simple","math","sdf","tutorial","hash","direction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Hash(float p) // https://www.shadertoy.com/view/4djSRW\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\nfloat Line(vec3 p, vec3 a, vec3 b, float r) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nvec3 Rotation (vec3 p)\n{\n    return vec3(cos(iTime) * p.x - sin(iTime) * p.z, p.y, sin(iTime) * p.x + cos(iTime) * p.z);\n}\n\nfloat SDF(vec3 p)\n{\n    p = Rotation(p);\n    float sdf = 1e6;\n    for (int i = 0; i < 128; i++)\n    {\n        vec3 direction = normalize(Hash(float(i) + 1e6) * 2.0 - 1.0);\n        sdf = min(sdf, Line(p, vec3(0.0), direction, 0.03));\n    }\n    return sdf;\n}\n\nvec4 Raymarching(vec3 ro, vec3 rd)\n{\n    for (int i = 0; i < 64; i++)\n    {\n        float t = SDF(ro);\n        if (t<0.001) return vec4(length(ro));         \n        ro += t * rd;\n    }\n    return vec4(0,0,0,1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tfragColor = Raymarching(vec3 (0,0,-2.5), normalize(vec3(uv,2.)));\n}","name":"Image","description":"","type":"image"}]}