{"ver":"0.1","info":{"id":"flsSRs","date":"1626349053","viewed":234,"name":"Distance Transform test 2","username":"RiceFields","description":"two pass euclidean distance transform","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["distancetransform"],"hasliked":0,"parentid":"NllSzX","parentname":"Distance Transform test"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x *= 3.0f;\n\n    int i = int(uv.x);\n    vec2 fuv = fract(uv);\n   \n    if(i == 0) {\n        float f = texture(iChannel0, fuv).r;\n        fragColor.rgb = vec3(sqrt(f)*8.0f);\n    } else if(i == 1){\n        fragColor.rgb = texture(iChannel0, fuv).rgb*8.0f;\n    } else {\n       fragColor.rgb = vec3(grayscale(texture(iChannel1, fuv).rgb));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// D(p) = min(d(p) + f(q))\n// D(x,y) = min((x-x')^2 + Fx'(y))\n// Fx(y) = min((y-y')^2 + f(x', y')); \n// Ref: https://cs.brown.edu/people/pfelzens/papers/dt-final.pdf\n\n#define THRESHOLD 0.25\n\n// Pass 1 - Fx'(y) calculation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    float d = 1.0;\n    float texel = 1.0 / float(iResolution.y);  \n    \n    for (int i = 0; i < int(iResolution.y); ++i) {\n        vec2 q = p + vec2(0.0, float(i)*texel);\n        q.y = mod(q.y, 1.0);\n        vec2 dvec = p-q;\n        float f = dot(dvec,dvec) + step(THRESHOLD, grayscale(filter_green(texture(iChannel0, q), vec4(0.0)).rgb));\n        d = min(d, f);\n    }\n    fragColor.rgb = vec3(d);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// D(p) = min(d(p) + f(q))\n// D(x,y) = min((x-x')^2 + Fx'(y))\n// Fx(y) = min((y-y')^2 + f(x', y')); \n// Ref: https://cs.brown.edu/people/pfelzens/papers/dt-final.pdf\n\n// Pass 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    float d = 1.0;\n    float texel = 1.0 / float(iResolution.x);  \n    \n    for (int i = 0; i < int(iResolution.x); ++i) {\n        vec2 q = p + vec2(float(i)*texel, 0.0);\n        q.x = mod(q.x, 1.0);\n        vec2 dvec = p-q;\n        float f = dot(dvec,dvec) + texture(iChannel0, q).r;\n        d = min(d, f);\n    }\n    fragColor.rgb = vec3(sqrt(d));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Ref: https://www.shadertoy.com/view/MlVXWD, chroma key greenscreen removel\n\n//conversion between rgb and YUV\nmat4 RGBtoYUV = mat4(0.257,  0.439, -0.148, 0.0,\n                     0.504, -0.368, -0.291, 0.0,\n                     0.098, -0.071,  0.439, 0.0,\n                     0.0625, 0.500,  0.500, 1.0 );\n\n//color to be removed\nvec4 chromaKey = vec4(0.05, 0.63, 0.14, 1);\nvec2 maskRange = vec2(0.005, 0.26);\n\n//compute color distance in the UV (CbCr, PbPr) plane\nfloat colorclose(vec3 yuv, vec3 keyYuv, vec2 tol)\n{\n    float tmp = sqrt(pow(keyYuv.g - yuv.g, 2.0) + pow(keyYuv.b - yuv.b, 2.0));\n    if (tmp < tol.x)\n      return 0.0;\n   \telse if (tmp < tol.y)\n      return (tmp - tol.x)/(tol.y - tol.x);\n   \telse\n      return 1.0;\n}\n\nvec4 filter_green(vec4 texColor0, vec4 texColor1)\n{\n    //convert from RGB to YCvCr/YUV\n\tvec4 keyYUV =  RGBtoYUV * chromaKey;\n    vec4 yuv = RGBtoYUV * texColor0;\n\n    float mask = 1.0 - colorclose(yuv.rgb, keyYUV.rgb, maskRange);\n    return max(texColor0 - mask * chromaKey, 0.0);\n}\n\nfloat grayscale(vec3 color) {\n    return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\n","name":"Common","description":"","type":"common"}]}