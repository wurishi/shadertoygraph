{"ver":"0.1","info":{"id":"stVfDR","date":"1664380107","viewed":101,"name":"Damaged VC","username":"essaar","description":"Simulating a damaged VCR playing a video","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    if (sin((uv.y * 5.0 - (iTime * 0.5))) > 0.95)\n    {\n      warpedUv = vec2(warpedUv.x, tan(sin(warpedUv.y * 500.0)));\n    }\n    \n    vec2 offset1 = vec2(0.01, 0.0);\n    vec2 offset2 = vec2(0.01);\n    vec2 offset3 = vec2(-0.01);\n    \n    vec2 warpedUVRed = vec2(warpedUv.x, warpedUv.y - ((sin(iTime)) * 0.02));\n    vec2 warpedUVBlue = vec2(warpedUv.x, warpedUv.y + ((sin(iTime)) * 0.009));\n    \n    float r = texture(iChannel0, warpedUVRed + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUVBlue + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n    \n    if (sin((uv.y * 5.0 - (iTime * 0.67))) > 0.99)\n    {\n      col = vec3(sin(col.r * 50.0), sin(col.g * 20.0), sin(col.b * 80.0));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}