{"ver":"0.1","info":{"id":"l3lcDH","date":"1726187819","viewed":21,"name":"Test 2 effects 2+3","username":"zhavoronoki","description":"-","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["shaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ridged\n\nfloat uPower = 0.01;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    vec2 uv = fragCoord / iResolution.xy;\n    float ridged = ridgedFBM(uv,4, 0.9, 20.0);\n\n    vec3 color = texture(iChannel0, uv+ridged*uPower).rgb;\n    fragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Chromatic abberation\nfloat uRedOffset =10.0 ;\nfloat uGreenOffset = 3.0;\nfloat uBlueOffset = 3.0;\nfloat uIntensity = 5.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = fragCoord/iResolution.xy;\n\n  vec4 color = texture(iChannel0, uv);\n  float rOffset = 0.001 * uRedOffset * uIntensity;\n  float gOffset = 0.001 * uGreenOffset * uIntensity;\n  float bOffset = 0.001 * uBlueOffset * uIntensity;\n\n  float r = texture(iChannel0, uv * (1.0 + rOffset) - (rOffset / 2.0)).r;\n  float g = texture(iChannel0, uv * (1.0 + gOffset) - (gOffset / 2.0)).g;\n  float b = texture(iChannel0, uv * (1.0 + bOffset) - (bOffset / 2.0)).b;\n\n  fragColor = vec4(vec3(r,g,b),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Distortion\nfloat uDistortionBg = 0.02;\nfloat uDistortionSm = 0.15;\nfloat uSpeed = 1.0;\n\nvec2 wave(vec2 uv, float k)\n{\n    uv.x += pow(0.5 - 0.5 * cos(2.0 * PI * uv.y), 600.0) * cos(2.0 * PI * uv.y) * k;\n    return uv;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; \n\n  float noiseBig = (snoise(vec2(iTime*0.2, uv.y*0.2)) - 0.3) * uDistortionBg;\n\n  float noiseSmall = abs(snoise(vec2(iTime*uSpeed,uv.y ))* uDistortionSm);\n  \n  // Apply the small noise as X displacement for every 4 px\n  if (floor(mod(gl_FragCoord.y * 0.25, 2.0)) == 0.0) {\n  uv.x -=noiseSmall*noiseSmall* 0.25;\n  }\n  //wave\n  uv = wave(uv + vec2(0.0, fract(iTime*0.1)), 2.0*noiseBig) - vec2(0.0, fract(iTime*0.1));\n  fragColor = texture(iChannel0, vec2(uv.x, uv.y));\n \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Color Noise Dust Saturation \nfloat uGrainAmount = 0.1;\nfloat uSize = 1.0;\nfloat uStrngthPower = 0.4;\n\nfloat uSaturationAmount = 2.0;\nfloat uSpeed = 0.2;\n\n\nfloat noiseSpeed = 0.0;\nfloat noiseClampNum = 1.0;\nfloat noiseWaveNum = 0.2;\nfloat noisePower = 1.2;\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    float strength = random(vec2(uv))* uStrngthPower;\n    //Grain\n    //color += strength * uGrainAmount * uSize;\n    \n    \n    float t = mod(iTime*10.0,10.0);\n    //tweak down\n    vec2 tweakuv = uv;\n    tweakuv.x += step(0.97, 1.0 - uv.y )*sin(t*uSpeed)*0.02;\n    vec3 color = texture(iChannel0,tweakuv).rgb; \n    \n    vec3 colorNoise = vec3(0.0);\n    colorNoise.r = 0.5 + 0.5 * random(uv * 12.0 );\n    colorNoise.g = 0.5 + 0.5 * random(uv * 13.0 );\n    colorNoise.b = 0.5 + 0.5 * random(uv * 18.0 );\n \n    color =mix(color, colorNoise,strength);\n    \n    //Dust  \n    float downNoise = step(0.4,noise3(vec3(uv.x*0.4,uv.y*7.0, t*uSpeed)*40.0))*smoothstep(0.4*abs(sin(t*0.5*PI)), 0.0,uv.y);\n    float rareNoise = step(0.6,noise3(vec3(uv.x*0.4,uv.y*7.0, t*uSpeed)*40.0))*smoothstep(0., 1.0,uv.y);\n    //float nn = noise3(vec3(uv*10.0, t*uSpeed));\n    //rareNoise *=nn;\n    rareNoise = clamp(rareNoise,0.0,1.0);\n    downNoise +=rareNoise;\n    \n\n   // downNoise = pow(downNoise,2.0);\n    //noise +=noiseUp;\n    //noise *=abs(sin(iTime*PI));\n    color = mix(color, vec3(1.0), downNoise);\n   \n    //Saturation\n    float luminance = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    color = mix(vec3(luminance), color, uSaturationAmount);\n    \n    \n    fragColor = vec4(vec3(color),1.0);\n\n \n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//One pass blur!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n   \n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = blur(iChannel0, uv, ps);\n       \n    fragColor = vec4(vec3(color),1.0);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265358979323846\nfloat random(vec2 p)\n{\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n\n\nfloat hash(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec3 hash3( vec3 p ) \n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n            dot(p,vec3(269.5,183.3,246.1)),\n            dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise3( in vec3 p )\n{\n  vec3 i = floor( p );\n  vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n  return mix( mix( mix( dot( hash3( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                        dot( hash3( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                   mix( dot( hash3( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                        dot( hash3( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n              mix( mix( dot( hash3( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                        dot( hash3( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                   mix( dot( hash3( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                        dot( hash3( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat ridgedFBM(vec2 p, int octaves, float persistence, float lacunarity) {\n  float amplitude = 0.5;\n  float frequency = 10.0;\n  float total = 0.0;\n  float normalization = 0.0;\n\n  for (int i = 0; i < octaves; ++i) {\n    float noiseValue = noise(p * frequency);\n    noiseValue = abs(noiseValue);\n    noiseValue = 1.0 - noiseValue;\n\n    total += noiseValue * amplitude;\n    normalization += amplitude;\n    amplitude *= persistence;\n    frequency *= lacunarity;\n  }\n\n  total /= normalization;\n  total *= total;\n\n  return total;\n}\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson (https://github.com/stegu/webgl-noise)\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\n\nconst int samples = 6;\nconst float sigma = float(samples) * 0.25;\n\nfloat gaussian(vec2 i) {\n    return 1.0 / (2.0 * PI * pow(sigma,sigma)) * exp(-((pow(i.x,2.0) + pow(i.y,2.0)) / (2.0 * pow(sigma,sigma))));\n}\n\nvec3 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec3 col = vec3(0.0);\n    float accum = 0.0;\n    float weight;\n    vec2 offset;\n    \n    for (int x = -samples / 2; x < samples / 2; ++x) {\n        for (int y = -samples / 2; y < samples / 2; ++y) {\n            offset = vec2(x, y);\n            weight = gaussian(offset);\n            col += texture(sp, uv + scale * offset).rgb * weight;\n            accum += weight;\n        }\n    }\n    \n    return col / accum;\n}\n\n\n\n","name":"Common","description":"","type":"common"}]}