{"ver":"0.1","info":{"id":"Ws23Ry","date":"1549213236","viewed":147,"name":"Fast box rep twist","username":"rodgzilla","description":"Fast forward through a landspace of boxes.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define FOV 2.\n#define SHIFT 0.02\n#define SPEED 5.\n#define MIN_DIST 0.0001\n#define MAX_DIST 100.\n#define MAX_STEP 100\n#define PI 3.14159\n\nvec3 palette(float x) {\n  float wave = sin(3. * time) * 0.5 + 0.5;\n  wave = 0.;\n  vec3 a = vec3(.3, .6, .9);\n  vec3 b = vec3(0.5 + 0.5 * wave);\n  vec3 c = vec3(.5);\n  vec3 d = vec3(.3, .6, .7);\n\n  return a + b * cos(2. * PI * (c + d * x));\n}\n\nmat2 rot2d(float a) {\n  float c = cos(a);\n  float s = sin(a);\n\n  return mat2(c, s, -s, c);\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 d = abs(p) - b;\n\n  return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nfloat boxRep(vec3 p, vec3 b, vec3 rep) {\n  vec3 q = mod(p, rep) - 0.5 * rep;\n\n  return box(q, b);\n}\n\nfloat map(vec3 p) {\n  p.xy *= rot2d(sin(time) * 3. * sin(p.z / 10.));\n  float tSize = 1.;\n  float d = 500.;\n  vec3 b = vec3(.1);\n  float dBox1 = boxRep(p - vec3(2, 0, 0), b + 0.025 * sin(3. * time), vec3(.5, .5, 2.3));\n  float dBox2 = boxRep(p - vec3(2, -1, 2), b + 0.05 * sin(time), vec3(.5, .25, 2.3));\n  d = min(d, dBox1);\n  d = min(d, dBox2);\n\n  return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n  float d = 0.;\n\n  for (int i = 0; i < MAX_STEP; i++) {\n    vec3 p = ro + d * rd;\n    float m = map(p);\n    d += m;\n\n    if (m < MIN_DIST || m > MAX_DIST) {\n      break;\n    }\n  }\n\n  return d;\n}\n\nvec3 GetNormal(vec3 p) {\n  vec2 e = vec2(0.01, 0);\n\n  vec3 n = map(p) - vec3(\n    map(p - e.xyy),\n    map(p - e.yxy),\n    map(p - e.yyx)\n  );\n\n  return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n  vec3 light = vec3(0, 0, 0. + SPEED * time);\n  vec3 toLight = light - p;\n  vec3 n = GetNormal(p);\n  float dif = dot(n, normalize(toLight));\n  float d = RayMarch(p + SHIFT * n, normalize(toLight));\n\n  if (d < length(toLight)) {\n    dif *= 0.1;\n  }\n\n  return dif;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  uv *= FOV;\n  vec3 col = vec3(0);\n\n  vec3 ro = vec3(0, 0, SPEED * time);\n ro.xy *= rot2d(time / 3.);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n  float d = RayMarch(ro, rd);\n  vec3 p = ro + d * rd;\n  float dif = GetLight(p);\n\n  col = vec3(dif);\n  col = palette(1. - 3. * p.z / MAX_DIST) * dif;\n\n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}