{"ver":"0.1","info":{"id":"mtGfDK","date":"1702483985","viewed":34,"name":"Very Simple Raymarcher","username":"TheSkizzle","description":":)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Constants\n#define PI 3.1415925359\n#define TWO_PI 6.2831852\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .01\n\nfloat GetDist(vec3 p) {\n    vec4 sphere = vec4(0,1,6. + sin(iTime)*3., 1); //Sphere. xyz is position w is radius\n    float sphereDist = length(p - sphere.xyz) - sphere.w;\n    float planeDist = p.y;\n    float d = min(sphereDist,planeDist);\n \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n    float dO = 0.; //Distane Origin\n    for(int i=0;i<MAX_STEPS;i++)\n    {\n        vec3 p = ro + rd * dO;\n        float ds = GetDist(p); // ds is Distance Scene\n        dO += ds;\n        if(dO > MAX_DIST || ds < SURFACE_DIST) break;\n    }\n    return dO;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0,1,0); // Ray Origin/ Camera\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    float d = RayMarch(ro,rd); // Distance\n    d /= 10.;\n    vec3 color = vec3(d);\n     \n    // Set the output color\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}