{"ver":"0.1","info":{"id":"7l2BzD","date":"1651873369","viewed":61,"name":"Crap raycaster","username":"DeadPizza","description":"asd","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["asd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getNormal(in vec3 O, in vec3 C, in vec3 D, in float t)\n{\n\n    return abs(normalize(O + D * t - C));\n}\n\nvec3 computeLight(in vec3 O, in vec3 C, in vec3 D, in float t)\n{\n    return vec3(0, 0,0) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 scene[] = vec3[2](vec3(1, 1, 5), vec3(-2, 2, 6));\n    const vec3 colors[] = vec3[2](vec3(1, 1,1), vec3(0, 1, 0));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2(fragCoord - iResolution.xy/2.)/iResolution.x;\n    \n    vec3 col = vec3(1,1,1);\n    \n    vec3 O = vec3(0, 0, 0);\n    float t_min = 10000.0;\n    for(int i = 0; i < 2; ++i)\n    {\n        vec3 D = normalize(vec3(uv, 0.5) - O);\n        vec3 OC = O - scene[i];\n\n        float k1 = dot(D, D);\n        float k2 = dot(OC, D) * 2.;\n        float k3 = dot(OC, OC) - 1.;\n        float Disc = k2 * k2 - 4. * k1 * k3;\n        \n        if (Disc >= 0.)\n        {\n            float t1 = (-k2 + sqrt(Disc)) / (2. * k1);\n            float t2 = (-k2 - sqrt(Disc)) / (2. * k1);\n            if (t1 > 1. && t1 < t_min)\n            {\n                t_min = t1;\n                col = colors[i] * getNormal(O, scene[i], D, t_min);\n            }\n            if (t2 > 1. && t2 < t_min)\n            {\n                t_min = t2;\n                col = colors[i] * getNormal(O, scene[i], D, t_min);\n            }\n        }\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}