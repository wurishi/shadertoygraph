{"ver":"0.1","info":{"id":"7ddcW8","date":"1653415115","viewed":64,"name":"Rainbowy Mandelbrot","username":"Progdruid","description":"Mandelbrot in GLSL with ShaderToy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float threshold = 27.;\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec2 sqcomplex (vec2 v) {\n    float i = v.x * v.y * 2.;\n    float r = v.x * v.x - v.y * v.y;\n    return vec2(r, i);\n}\n\nfloat mandelbrot (vec2 c, int steps) {\n    vec2 z = c;\n    vec2 nz = c;\n    float dist = 0.;\n    \n    int i = 0;\n    while (i < steps) {\n        z = nz;\n        nz = sqcomplex(z) + c;\n        dist = distance(z, nz);\n        if (dist >= threshold)\n            return float(i) / float(steps);\n        i++;\n    }\n    \n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    \n    st *= 2.;\n    st -= vec2(1.);\n    st.x -= 1.4;\n    \n    float val = mandelbrot(st, 60);\n    val = sqrt(val);\n    val = sqrt(val);\n    //val = sqrt(val);\n    vec3 color = hsb2rgb(vec3(val + iTime, val, sqrt(val)+0.3));\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}