{"ver":"0.1","info":{"id":"WdGfzt","date":"1607683292","viewed":230,"name":"[TWITCH] Surprise!","username":"Flopine","description":"A smol isometric doodle I did during a twitch live. You can watch VODs here: https://www.twitch.tv/flopine","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","isometric","twitch","animration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define TAU 6.283183\n#define PI acos(-1.)\n#define ITER 64. \n\n#define dt(sp,off) fract((iTime+off)*sp)\n#define easeout(s,of) easeOutExpo(abs(-1.+2.*dt(s,of)))\n#define sw(sp,of,n) floor(dt(sp*(1./n),of)*n)\n#define bouncy(s,of) sqrt(abs(sin(dt(s,of)*TAU)))\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(puv,c,l) puv=(puv-c*clamp(round(puv/c),-l,l))\n#define pal(t,c,d) (vec3(0.5)+vec3(0.5)*cos(TAU*(c*t+d)))\n\n#define od(puv,d) (dot(puv,normalize(sign(puv)))-d)\n#define sphe(puv,d) (length(puv)-d) \n\n\nfloat easeOutExpo (float x)\n{return x == 1. ? 1. : 1. - exp2(-10. * x);}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n  return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat candy; vec2 cid;\nfloat SDF (vec3 p)\n{\n  p.yz *= rot(-atan(1./sqrt(2.)));\n  p.xz *= rot(PI/4.);\n  \n  int choose = int(sw(0.3,-1.5,3.));\n  vec2 per = vec2(1.9);\n  \n  vec3 ppp = p;\n  cid=round(ppp.xy/per); \n  crep(ppp.xy,per,3.);\n  if (choose == 0) candy = od(ppp,0.3);\n  else if (choose == 1) candy = sphe(ppp,0.3);\n  else candy = mix(od(ppp,0.3),box(ppp,vec3(.4)), 0.5);\n  \n  vec2 id = round(p.xy/per);\n  p.z = abs(p.z)-mix(0.0,4.,clamp(easeout(0.3,length(id*0.08))*2.-1.,0.001,1.));\n\n vec3 pp = p; \n crep(p.xy,per,3.);\n float d = max(dot(pp,normalize(vec3(0.,0.,-1.))),abs(mix(od(p,0.5),box(p,vec3(.6)), 0.5))-0.04);\n\n  return min(d,candy);\n}\n\nvec3 getnorm (vec3 p, vec2 eps)\n{return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n  vec3 ro = vec3(uv*8.,-100.), \n  rd=vec3(0.,0.,1.), \n  p=ro, \n  col=vec3(0.0,0.,0.015), \n  l=vec3(1.,-1.5,-2.);\n\n  bool hit = false; float d=0.;\n  for (float i=0.; i<ITER; i++)\n  {\n    d = SDF(p);\n    if (d<0.01)\n    {\n      hit = true;\n      break;\n    }\n    p += d*rd*0.55;\n  }\n\n  if (hit)\n  {\n    if (d==candy) col = pal(length(cid),vec3(0.5),vec3(.0,0.63,0.37)) ;\n    else col = vec3(1.);\n    vec3 n = getnorm(p,vec2(0.01,0.));\n    float light = max(dot(n,normalize(l)),0.);\n    col *= mix(vec3(0.3,0.1,0.05),vec3(0.9,0.7,0.2),light);\n  }\n  fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}