{"ver":"0.1","info":{"id":"lltGDS","date":"1471390214","viewed":199,"name":"Mandelbrot Pulse","username":"MM","description":"Music visualization using a Mandelbrot fractal.\n\nEpilepsy warning... probably. \n\nMusic credit to Disasterpiece: Synchrosynct\nhttps://soundcloud.com/dzasterpeace/synchrosynct","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["fractal","mandelbrot","synchrosynct"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dj3z1","filepath":"https://soundcloud.com/dzasterpeace/synchrosynct","previewfilepath":"https://soundcloud.com/dzasterpeace/synchrosynct","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//BABBIES FIRST FRACTAL. First attempt at shader toy. \n//Used this for reference: https://www.shadertoy.com/view/4lcGR2\n\n//If you stare into the abyss....\nconst float INFINITY = 10000000.0;\nconst int FRACTAL_ITERATIONS = 50;\n\n//Offsets for visualization of fractal\nconst float CONSTANT = -0.32;\nconst float ZOOM_OFFSET = 3.16; \nconst float TIME_POINT =  8.0;\nconst float TIME_OFFSET = 2.65;\n\n//Function using Mandelbrot Set z^2 + c\nbool fractal(inout vec2 coord, in float r) \n{\n    // Complex multiplication: (x + yi)^2 = x^2 + 2*x*(yi) + (yi)^2\n\tfloat a = coord.x * coord.x;\n    float b = 2.0 * coord.x * coord.y;\n    float c = -(coord.y * coord.y); \n    \n    coord = vec2(a + c + r, b + CONSTANT);\n    \n    //Did the coordinate reach our predefined infinity?\n    return length(coord) > INFINITY;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Coordinates of image\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    \n    //Get the intensity of the sound from music at point (0.0).\n    float sound = texture(iChannel0, vec2(0, 0)).b;\n    \n    //Make the fractal zoom based off of sound, and center image\n    float zoom = floor(ZOOM_OFFSET - sound * 2.0);\n    vec2 offset = vec2(zoom * .5, zoom * .5);\n    \n    // Calculate the coordinate of the screen we will be using for the complex function\n\tvec2 coord = (fragCoord.xy / iResolution.xy * zoom) - offset;\n           \n    //Make that fractal dance baby\n    float t = cos(TIME_POINT + sound * TIME_OFFSET);\n    \n    //Use the fractal iteration point for color. \n    int f = 0;\n    for (int i = 0; i < FRACTAL_ITERATIONS; i++) \n    {\n        if (fractal(coord, t)) \n        {\n            f = i;\n            break;\n        }\n    }\n\n    //Base color value of fractal.\n    float colorValue = float(f) / float(FRACTAL_ITERATIONS);\n    \n    //Paint the fractal color based off of sound. \n    float red = colorValue * (sound * 7.2) - 1.0;\n    float green = colorValue * (sound * 6.2) - 1.7;\n    float blue = colorValue * (sound * 5.9);\n        \n\tfragColor = vec4(red, green, blue, 0);\n}","name":"Image","description":"","type":"image"}]}