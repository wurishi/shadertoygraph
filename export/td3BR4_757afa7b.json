{"ver":"0.1","info":{"id":"td3BR4","date":"1604441828","viewed":265,"name":"Nyan Nyan Cat","username":"Osakazaur","description":"Nyan Cat animation with texelFetch.\n\nMusic I took from: https://www.shadertoy.com/view/XtB3zc","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["2d","nyancat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int fx = 256 - 15;\n    int parts = int(iResolution.x)/(fx / 6);\n    int deltaY = abs(32*parts - int(iResolution.y)) / 2;\n    vec2 uv = vec2(fragCoord.x + float(((iFrame/4 % 6)*fx/6)*parts),\n              \t   fragCoord.y+float(deltaY));\n    \n    ivec2 p = ivec2(uv) / parts;\n    \n    vec4 backColor = vec4(0.05, 0.21, 0.39, 1.);\n    vec4 nyanColor = texelFetch(iChannel0, p, 0);\n    if (nyanColor.w == 0.){fragColor = backColor;}\n    else {fragColor = nyanColor;}\n}\n \n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define fade (1.0 / 40.00)\nfloat ct; // current time\n\n// just like sin\nfloat saw(float x){\n    return fract( x );\n}\n\n// freq\n// at time\nfloat piano( float f, float t )\n{\n    float y  = \n        0.4 * fract(f * t)\n        * clamp( 1.0 -  0.0078 * f * t, 0.0, 1.0 ); // argh...\n    \n\treturn y;\t\n}\n\n\n// http://en.wikipedia.org/wiki/Musical_note\nfloat noteTofreq( in float x ) {\t\n    return 440.0 * pow( 2.0, x / 12.0 ); \n}\n\n\n\nfloat b = 0.0; // temp variable storing the full additive length\nfloat n = 0.0; // note\nfloat s1 = 0.0; // start of the sund\n// length\n// note\nvoid N1(int l_, int n_){\n    \n    if( ct > b ){\n        s1 = b;\n        n = float(n_);\n    }\n    b += float(l_);\n}\n\n\nfloat b2 = 0.0; // temp variable storing the full additive length\nfloat n2 = 0.0; // note\nfloat s2 = 0.0; // start of the sund\n// length\n// note\nvoid N2(int l_, int n_){\n    \n    if( ct > b2 ){\n        s2 = b2;\n        n2 = float(n_);\n    }\n    b2 += float(l_);\n}\n\nfloat boostBass(float note){\n    return 0.0;\n}\n\nfloat calcSound()\n{\n\n    \nN1(6,18);\nN2(18,-10);\nN1(6,19);\nN1(12,21);\nN1(12,14);\nN2(18,-10);\nN1(6,18);\nN1(6,19);\nN1(6,21);\nN2(18,-10);\nN1(6,14);\nN1(6,28);\nN1(6,42);\nN1(6,28);\nN2(18,-10);\nN1(6,13);\nN1(12,14);\nN1(12,21);\nN2(18,-10);\nN1(6,18);\nN1(6,19);\nN1(12,21);\nN2(18,-10);\nN1(12,14);\nN1(6,28);\nN2(18,-10);\nN1(6,13);\nN1(6,14);\nN1(6,28);\nN1(6,31);\nN2(18,-10);\nN1(6,42);\nN1(6,31);\nN1(6,28);\nN1(12,21);\nN2(12,-17);\nN1(12,23);\nN2(12,-5);\nN1(6,18);\nN2(12,-15);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,17);\nN2(12,-18);\nN1(6,16);\nN1(6,2);\nN2(12,-6);\nN1(12,2);\nN2(12,-13);\nN1(12,16);\nN2(12,-1);\nN1(12,17);\nN2(12,-20);\nN1(6,17);\nN2(12,-8);\nN1(6,16);\nN1(6,2);\nN2(12,-15);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,21);\nN1(6,23);\nN2(12,-34);\nN1(6,18);\nN1(6,21);\nN2(12,-22);\nN1(6,16);\nN1(6,18);\nN2(12,-34);\nN1(6,2);\nN1(6,16);\nN2(12,-22);\nN1(6,2);\nN1(12,18);\nN2(12,-17);\nN1(12,21);\nN2(12,-5);\nN1(6,23);\nN2(12,-15);\nN1(6,18);\nN1(6,21);\nN2(12,-3);\nN1(6,16);\nN1(6,18);\nN2(12,-18);\nN1(6,2);\nN1(6,17);\nN2(12,-6);\nN1(6,18);\nN1(6,17);\nN2(12,-13);\nN1(6,16);\nN1(6,2);\nN2(12,-1);\nN1(6,16);\nN1(12,17);\nN2(12,-20);\nN1(6,2);\nN2(12,-8);\nN1(6,16);\nN1(6,18);\nN2(12,-15);\nN1(6,21);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,16);\nN2(12,-34);\nN1(6,2);\nN1(12,16);\nN2(12,-22);\nN1(12,2);\nN2(12,-34);\nN1(12,16);\nN2(12,-22);\nN1(12,21);\nN2(12,-17);\nN1(12,23);\nN2(12,-5);\nN1(6,18);\nN2(12,-15);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,17);\nN2(12,-18);\nN1(6,16);\nN1(6,2);\nN2(12,-6);\nN1(12,2);\nN2(12,-13);\nN1(12,16);\nN2(12,-1);\nN1(12,17);\nN2(12,-20);\nN1(6,17);\nN2(12,-8);\nN1(6,16);\nN1(6,2);\nN2(12,-15);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,21);\nN1(6,23);\nN2(12,-34);\nN1(6,18);\nN1(6,21);\nN2(12,-22);\nN1(6,16);\nN1(6,18);\nN2(12,-34);\nN1(6,2);\nN1(6,16);\nN2(12,-22);\nN1(6,2);\nN1(12,18);\nN2(12,-17);\nN1(12,21);\nN2(12,-5);\nN1(6,23);\nN2(12,-15);\nN1(6,18);\nN1(6,21);\nN2(12,-3);\nN1(6,16);\nN1(6,18);\nN2(12,-18);\nN1(6,2);\nN1(6,17);\nN2(12,-6);\nN1(6,18);\nN1(6,17);\nN2(12,-13);\nN1(6,16);\nN1(6,2);\nN2(12,-1);\nN1(6,16);\nN1(12,17);\nN2(12,-20);\nN1(6,2);\nN2(12,-8);\nN1(6,16);\nN1(6,18);\nN2(12,-15);\nN1(6,21);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,16);\nN2(12,-34);\nN1(6,2);\nN1(12,16);\nN2(12,-22);\nN1(12,2);\nN2(12,-34);\nN1(12,16);\nN2(12,-22);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,19);\nN2(12,-10);\nN1(6,18);\nN1(6,19);\nN2(12,6);\nN1(6,21);\nN1(12,2);\nN2(12,-8);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,16);\nN2(12,-6);\nN1(6,2);\nN1(6,9);\nN2(12,-3);\nN1(6,6);\nN1(6,7);\nN2(12,-10);\nN1(6,9);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,2);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,11);\nN2(12,6);\nN1(6,9);\nN1(12,2);\nN2(12,-8);\nN1(6,2);\nN2(12,-5);\nN1(6,1);\nN1(6,2);\nN2(12,-1);\nN1(6,9);\nN1(6,11);\nN2(12,-10);\nN1(6,2);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,19);\nN2(12,-6);\nN1(6,21);\nN1(12,2);\nN2(12,-3);\nN1(12,1);\nN2(12,-10);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,16);\nN1(6,18);\nN2(12,-3);\nN1(6,2);\nN1(6,19);\nN2(12,-10);\nN1(6,18);\nN1(6,19);\nN2(12,6);\nN1(6,21);\nN1(12,2);\nN2(12,-8);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,16);\nN2(12,-6);\nN1(6,2);\nN1(6,9);\nN2(12,-3);\nN1(6,6);\nN1(6,7);\nN2(12,-10);\nN1(6,9);\nN1(12,2);\nN2(12,-5);\nN1(6,9);\nN2(12,-1);\nN1(6,11);\nN1(12,2);\nN2(12,-10);\nN1(6,9);\nN2(12,7);\nN1(6,11);\nN1(6,2);\nN2(12,-6);\nN1(6,2);\nN1(6,16);\nN2(12,-3);\nN1(6,18);\nN1(6,2);\nN2(12,-10);\nN1(6,9);\nN1(6,11);\nN2(12,6);\nN1(6,9);\nN1(12,2);\nN2(12,-8);\nN1(6,2);\nN2(12,-5);\nN1(6,1);\nN1(6,2);\nN2(12,-1);\nN1(6,9);\nN1(6,11);\nN2(12,-10);\nN1(6,2);\nN1(6,19);\nN2(12,-22);\nN1(6,18);\nN1(6,19);\nN2(12,-6);\nN1(6,21);\nN1(12,2);\nN2(12,-3);\nN1(12,16);\nN2(12,-10);\n\n\n  return \n      piano( noteTofreq( n ), (ct-s1) * fade) \n      + 0.5 * piano( noteTofreq( n2 ), (ct-s2) * fade);\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    // hardcoded music length :( anyways.. 60 sec limit is in ShaderToy\n    float maxt = 42.35;\n    ct = mod(time,maxt) / fade; \n    \n    vec2 y = vec2(calcSound());\n    return y;\n}\n","name":"Sound","description":"","type":"sound"}]}