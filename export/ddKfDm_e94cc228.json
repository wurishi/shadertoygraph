{"ver":"0.1","info":{"id":"ddKfDm","date":"1698304407","viewed":46,"name":"Function Shader","username":"shader_lucas","description":"Draw function into screen\nRewritten with suggestion from FabriceNeyret2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["functionshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float bias = 0.002f;\n\nfloat f(float x) {\n    return x + 0.2f;\n}\n\nfloat g(float x) {\n    return (x * x) + 0.2f;\n}\n\nfloat smooth_func(float func, vec2 uv, float _percentage) {\n    float dist = abs(distance(uv, vec2(uv.x, func)));\n    return smoothstep(0.0, 1.5f / iResolution.y, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 aspect = iResolution.xy / iResolution.y;\n\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n\n    uv.x += -0.5f;\n    uv.y += -0.1f;\n\n    uv *= aspect;\n    \n    vec3 color = vec3(0, 0, 0);\n    \n    vec3 red = vec3(1.0, 0.0, 0.0);\n    vec3 green = vec3(0.0, 1.0, 0.0);\n   \n    /*if(smooth_func(f(uv.x), uv, bias) < 0.1f) {\n        color.r = 1.0f;\n    }\n    \n    if(smooth_func(g(uv.x), uv, bias) < 0.1f) {\n        color.r = 1.0f;\n    }*/\n    \n    color = mix(red, color, smooth_func(f(uv.x), uv, bias));\n    color = mix(red, color, smooth_func(g(uv.x), uv, bias));\n    \n    /*if(smooth_func(f_min, uv, bias) < 0.1f) {\n        color.g = 1.0f;\n        color.r = 0.0f;\n    }*/\n    \n    float f_min = min(g(uv.x), f(uv.x));\n    \n    color = mix(green, color, smooth_func(f_min, uv, 0.002f));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}