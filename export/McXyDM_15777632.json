{"ver":"0.1","info":{"id":"McXyDM","date":"1721181415","viewed":78,"name":"intersection point from 3 planes","username":"jt","description":"Calculate point from intersection of three planes.\nI really like the symmetry of the determinant solution :-)\n(The way normals are unified with offsets...is that related to homogeneous coordinates?)\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["intersection","3","three","point","planes"],"hasliked":0,"parentid":"dtVfzG","parentname":"abstract desert rose"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/McXyDM intersection point from 3 planes, 2024 by jt\n\n// Calculate point from intersection of three planes.\n// I really like the symmetry of the determinant solution :-)\n// (unified normals with offsets - related to homogeneous coordinates?)\n\n// see also: \"Intersection of three planes\" in https://paulbourke.net/geometry/pointlineplane/\n\n// tags: intersection, 3, three, point, planes\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec2 hash21(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n/*\n// componentwise\nvec3 point_from_three_planes(vec4 n0, vec4 n1, vec4 n2) // https://www.shadertoy.com/view/McXyDM intersection point from 3 planes (jt)\n{\n    // wxMaxima solve([n_0_x*x+n_0_y*y+n_0_z*z=n_0_w,n_1_x*x+n_1_y*y+n_1_z*z=n_1_w,n_2_x*x+n_2_y*y+n_2_z*z=n_2_w],[x,y,z]);\n    return\n        vec3 // TODO: simplify\n        (\n            (n0.w*(n1.z*n2.y-n1.y*n2.z)+n0.y*(n1.w*n2.z-n1.z*n2.w)+n0.z*(n1.y*n2.w-n1.w*n2.y)),\n           -(n0.w*(n1.z*n2.x-n1.x*n2.z)+n0.x*(n1.w*n2.z-n1.z*n2.w)+n0.z*(n1.x*n2.w-n1.w*n2.x)),\n            (n0.w*(n1.y*n2.x-n1.x*n2.y)+n0.x*(n1.w*n2.y-n1.y*n2.w)+n0.y*(n1.x*n2.w-n1.w*n2.x))\n        )\n        /\n        (n0.x*(n1.z*n2.y-n1.y*n2.z)+n0.y*(n1.x*n2.z-n1.z*n2.x)+n0.z*(n1.y*n2.x-n1.x*n2.y));\n}\n*/\n/*\n// by triple products\nvec3 point_from_three_planes(vec4 p0, vec4 p1, vec4 p2) // https://www.shadertoy.com/view/McXyDM intersection point from 3 planes (jt)\n{\n    // wxMaxima solve([n_0_x*x+n_0_y*y+n_0_z*z=n_0_w,n_1_x*x+n_1_y*y+n_1_z*z=n_1_w,n_2_x*x+n_2_y*y+n_2_z*z=n_2_w],[x,y,z]); then manually simplified\n    return\n        vec3 // can this be further compactified? (perhaps by using determinant?)\n        (\n            dot(p0.wyz,cross(p1.wyz,p2.wyz)),\n            dot(p0.xwz,cross(p1.xwz,p2.xwz)),\n            dot(p0.xyw,cross(p1.xyw,p2.xyw))\n        )\n        /\n        dot(p0.xyz,cross(p1.xyz,p2.xyz));\n}\n*/\n// by determinants\nvec3 point_from_three_planes(vec4 p0, vec4 p1, vec4 p2) // https://www.shadertoy.com/view/McXyDM intersection point from 3 planes (jt)\n{\n    // wxMaxima solve([n_0_x*x+n_0_y*y+n_0_z*z=n_0_w,n_1_x*x+n_1_y*y+n_1_z*z=n_1_w,n_2_x*x+n_2_y*y+n_2_z*z=n_2_w],[x,y,z]); then manually simplified\n    return\n        vec3 // can this be further compactified?\n        (\n            determinant(mat3(p0.wyz,p1.wyz,p2.wyz)),\n            determinant(mat3(p0.xwz,p1.xwz,p2.xwz)),\n            determinant(mat3(p0.xyw,p1.xyw,p2.xyw))\n        )\n        /\n        determinant(mat3(p0.xyz,p1.xyz,p2.xyz));\n}\n/*\n// by inverse (as suggested by pyBlob - thanks!)\nvec3 point_from_three_planes(vec4 p0, vec4 p1, vec4 p2)\n{\n    //solve x:\n    //    p0.w = x.T * p0.xyz\n    //    p1.w = x.T * p1.xyz\n    //    p2.w = x.T * p2.xyz\n    return vec3(p0.w, p1.w, p2.w) * inverse(mat3(p0.xyz, p1.xyz, p2.xyz));\n}\n*/\nfloat display_three_planes(vec3 p, vec4 n0, vec4 n1, vec4 n2)\n{\n    float d0 = abs(dot(p,n0.xyz)-n0.w);\n    float d1 = abs(dot(p,n1.xyz)-n1.w);\n    float d2 = abs(dot(p,n2.xyz)-n2.w);\n\n    vec3 s = point_from_three_planes(n0, n1, n2);\n\n    float d = min(min(d0,d1),min(d2, length(p-s)-0.1));\n    //float d = min(max(min(min(d0,d1),d2),-(length(p-s)-0.12)), length(p-s)-0.08);\n\n    return max(d,length(p)-1.0); // confine planes to sphere\n}\n\n// https://stackoverflow.com/questions/5408276/sampling-uniformly-distributed-random-points-inside-a-spherical-volume\nvec3 random_unit_vector(float t)\n{\n    vec2 r = hash21(t);\n    float phi = r.x*pi*2.0;\n    float costheta = r.y*2.0-1.0;\n    float theta = acos(costheta);\n    return\n        vec3\n        (\n            sin(theta) * cos(phi),\n            sin(theta) * sin(phi),\n            cos(theta)\n        );\n}\n\nfloat map(vec3 p)\n{\n    //vec4 n0 = vec4(vec3(1,0,0),0.1);\n    //vec4 n1 = vec4(vec3(0,1,0),-0.2);\n    //vec4 n2 = vec4(vec3(0,0,1),-0.3);\n    float t = floor(iTime);\n    vec4 n0 = vec4(random_unit_vector(t+0.0/3.0),0.1);\n    vec4 n1 = vec4(random_unit_vector(t+1.0/3.0),0.1);\n    vec4 n2 = vec4(random_unit_vector(t+2.0/3.0),0.1);\n    //vec3 d = hash31(t);\n    //vec4 n0 = vec4(random_unit_vector(t+0.0/3.0),0.25*cos(2.0*pi*d*iTime));\n    //vec4 n1 = vec4(random_unit_vector(t+1.0/3.0),0.25*cos(2.0*pi*d*iTime));\n    //vec4 n2 = vec4(random_unit_vector(t+2.0/3.0),0.25*cos(2.0*pi*d*iTime));\n    return display_three_planes(p, n0, n1, n2)-0.0025;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) +\n                      k.yyx*map( p + k.yyx*h ) +\n                      k.yxy*map( p + k.yxy*h ) +\n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n\n    return t; // stop on running out of iterations\n    //return t1; // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1) < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // TODO\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-2.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    vec3 color = vec3(1);\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}