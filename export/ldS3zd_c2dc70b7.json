{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float a() {return 0.95 + cos(2.0 * iTime);}\nfloat b() {return 0.8 + 0.1 * sin(iTime);}\nfloat k() {return 1.0 + 4.0 * sin(iTime + 6.0);}\nfloat maxdist = 40.0;\nvec3 lightDir = vec3(1, 0, 0);\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n\t//http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\n}\n\nfloat f(float t, vec3 o, vec3 d) {\n    float x = o.x + t * d.x;\n    float y = o.y + t * d.y;\n    float z = o.z + t * d.z;\n\t\n\treturn pow(x * x + y * sin(y) + z * z - a() * k() * k(), 0.2e1) \n\t\t- b() * (pow(z - k(), 0.2e1) - 0.2e1 * x * x) * (pow(z + k(), 0.2e1) - 0.2e1 * y * y);\n}\n\nfloat raymarch(float t0, vec3 o, vec3 d) {\n\tfloat t = t0;\n\tfloat f2 = 100.0;\n\tfloat incr = 0.02;\n\tfor (int i = 0; i < 2000; i++) {\n\t\tf2 = f(t, o, d);\n\t\tif (f2 < 0.02)\n\t\t\tbreak;\n\t\tt += incr;\n\t}\n\treturn t;\n}\n\nfloat raymarch2(float t0, vec3 o, vec3 d) {\n\tfloat t = t0;\n\tfloat f2 = 100.0;\n\tfloat incr = 0.02;\n\tfor (int i = 0; i < 2000; i++) {\n\t\tf2 = f(t, o, d);\n\t\tif (f2 > -0.02)\n\t\t\tbreak;\n\t\tt += incr;\n\t}\n\treturn t;\n}\n\n\nfloat root(vec3 o, vec3 d) {\n\tfloat t0 = 0.0;\n\tfloat t1 = 10.0;\n\tfloat t2 = 0.0;\n\tfor (int i = 0; i < 40; i++) {\n\t\tfloat top = t0 * f(t1, o, d) - t1 * f(t0, o, d);\n\t\tfloat bottom = f(t1, o, d) - f(t0, o, d);\n\t\tif (bottom == 0.0) {\n\t\t\tbottom = 0.000000000001;\n\t\t}\n\t\tt2 = top / bottom;\n\t\tt0 = t1;\n\t\tt1 = t2;\n\t}\n\tif (f(t2, o, d) > 1.0)\n\t\treturn 100.0;\n\treturn t2;\n}\n\nvec3 intersectionPos(vec3 o, vec3 d) {\n\t//float t = root(o, d);\n\tfloat t = raymarch(0.01, o, d);\n\tif (t > maxdist - 1.0)\n\t\treturn vec3(100.0, 100.0, 100.0);\n\treturn o + t * d;\n}\n\nvec3 gradient(vec3 pos) {\n\tfloat x = pos.x;\n\tfloat y = pos.y;\n\tfloat z = pos.z;\n\t\n\tfloat dx = 0.4e1 * (x * x + y * sin(y) + z * z - a() * k() * k()) *\n\t\tx + 0.4e1 * b() * x * (pow(z + k(), 0.2e1) - 0.2e1 * y * y);\n\t\n\tfloat dy = 0.2e1 * (x * x + y * sin(y) + z * z - a() * k() * k()) * \n\t\t(sin(y) + y * cos(y)) + 0.4e1 * b() * (pow(z - k(), 0.2e1) - 0.2e1 * x * x) * y;\n\t\n\tfloat dz = 0.4e1 * (x * x + y * sin(y) + z * z - a() * k() * k()) * z - b() * (0.2e1 * z - 0.2e1 * k()) * \n\t\t(pow(z + k(), 0.2e1) - 0.2e1 * y * y) - b() * (pow(z - k(), 0.2e1) - 0.2e1 * x * x) * \n\t\t(0.2e1 * z + 0.2e1 * k());\n\t\n\treturn vec3(dx, dy, dz);\n}\n\n\nbool isVisible(vec3 pos, vec3 N) {\n\tvec3 rd = 2.0 * dot(N, -lightDir) * N + lightDir;\n\tvec3 ro = pos;\n\tif (raymarch(0.02, ro, rd) > maxdist)\n\t\treturn false;\n\treturn true;\n}\n\nvec4 shade(vec3 pos, vec3 N, vec3 view, bool subsurface) {\n\tmat4 rot = rotationMatrix(vec3(0, 0, 1), iTime * 0.7);\n\tlightDir = (rot * vec4(lightDir, 0.0)).xyz;\n\tlightDir = normalize(lightDir);\n\t\n\tif (isVisible(pos, N) == false)\n\t\treturn vec4(0, 0, 0, 1);\n\n\tvec3 lightColor = vec3(0.5, 0.5, 1);\n\tif (subsurface == true)\n\t\tlightColor = vec3(1, 1, 0.1);\n\tvec3 colorFar = vec3(1, 0, 0);\n\tvec3 colorDiff = colorFar - lightColor;\n\t\n\tvec3 specularColor = vec3(1, 1, 1);\n\t\n\tfloat NdotL = max(dot(N, lightDir), 0.0);\n\t\n\tvec3 diffuse = NdotL * (lightColor - colorDiff + colorDiff * max(1.0, length(pos)/4.0));\n\t\n\tvec3 H = normalize(lightDir + view);\n\tvec3 specular = vec3(0, 0, 0);\n\tif (length(view) > 0.1)\n\t\tspecular = specularColor * pow(dot(N, H), 79.0);\n\t\n\tvec4 color = vec4((diffuse + specular), 1.0);\n\treturn color;//vec4(vec3(ivec3(color.rgb * 5.0)) / 5.0, 1.0);\n}\n\nvec4 subsurface(vec3 pos, vec3 N, vec3 V, out float dist) {\n\tvec3 ro = pos - 0.05 * N;\n\tvec3 rd = 2.0 * dot(N, -V) * N + V;\n\tfloat t = raymarch2(0.0, ro, rd);\n\tvec3 newPos = ro + t * rd;\n\tvec3 newN = normalize(gradient(newPos));\n\tdist = max(0.0, 1.0-t/4.0);\n\treturn shade(newPos, newN, V, false);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 u = vec3(1, 0, 0);\n\tvec3 v = normalize(vec3(0, -1, 1));\n\tvec3 rayDirection = cross(u, v);\n\tfloat size = 18.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tuv.y = 0.7 * uv.y;\n\tuv = size * uv;\n\tu = u * uv.x * (cos(iTime) + 1.5);\n\tv = v * uv.y * (cos(iTime) + 1.5);\n\tvec3 cameraPos = vec3(0, 2.0, 7.0);\n\tvec3 rotAxis = vec3(0, 0, 1);\n\tvec3 rotAxis2 = vec3(1, 0, 0);\n\tfloat angle = 0.4 * sin(0.2*iTime);\n\tfloat angle2 = 0.0;\n\tmat4 rot = rotationMatrix(rotAxis, angle);\n\tmat4 rot2 = rotationMatrix(rotAxis2, angle2);\n\trayDirection = (rot * rot2 * vec4(rayDirection, 1.0)).xyz;\n\tu = (rot * rot2 * vec4(u, 1.0)).xyz;\n\tv = (rot * rot2 * vec4(v, 1.0)).xyz;\n\trayDirection = normalize((rot * rot2 * vec4(rayDirection, 0.0)).xyz);\n\t\n    vec3 rayOrigin = cameraPos + u + v;\n\n\tvec3 pos = intersectionPos(rayOrigin, rayDirection);\n\tvec3 normal = normalize(gradient(pos));\n\tvec4 color;\n\tfloat dist = 0.0;\n\tvec4 subsurfacecolor = subsurface(pos, normal, -rayDirection, dist);\n\tif (pos.x == 100.0)\n\t\tcolor = vec4(0, 0, 0, 1);\n\telse \n\t\tcolor = (1.0-dist) * shade(pos, normal, -rayDirection, false) + dist * subsurfacecolor;\n\t\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldS3zd","date":"1392276883","viewed":337,"name":"implicit surface","username":"atte2","description":"chair surface with a little modification","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["implicit","surface","chair"],"hasliked":0,"parentid":"","parentname":""}}