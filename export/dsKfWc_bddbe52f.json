{"ver":"0.1","info":{"id":"dsKfWc","date":"1698742796","viewed":103,"name":"Anxiety disorder (read desc)","username":"maras","description":"An attempt to visually recreate the feeling I personally experience during a panic attack.\nOf course it's only my subjective feeling, don't want to offend someone.\n\n","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["anxiety","mentaldisorder","subjective","panicattack"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nCore of raymarching a SDFs\ntaken from IQ`s https://www.shadertoy.com/view/3lsSzf .\n*/\n\n#define INTENSE mix(noise(iTime/2.0)*5.0+9.0,mix(sin(noise(iTime))+9.0, tan(iTime/11.0), step(iTime, 16.0)),step(iTime,20.0))/5.0\n\nfloat rand (in float x) {\n    return fract(sin(x)*1e4);\n}\n\nfloat noise(float x) {\n    x *= 10.0;\n    float i = floor(x);\n    float f = fract(x);\n    return mix(rand(i), rand(i+1.0), smoothstep(0.0, 1.0, f));\n}\n\nmat2 rotateFloor(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat sdSphere(in vec3 pos, float rad) {\n    return length(pos) - rad;\n}\n\nfloat map(in vec3 pos, inout float material)\n{\n    float ground = pos.y + 0.25;\n    float sphere = sdSphere(pos + vec3(noise(tan(INTENSE/1.0)*1.0), noise(cos(INTENSE/10.0)*1.0) - 1.0, noise(sin(INTENSE/2.0)*1.0)), 0.5);\n    \n      \n    float res;\n    \n    sphere += noise(sin(INTENSE / 3.0)) - 0.6\n    - noise(pos.x/5.0 + pos.y/10.0 + INTENSE/10.0) / 10.0 + rand(pos.y/15.0 + (INTENSE / 100.0)) / ((sin(iTime / 10.0) + 1.00001) * 500.0);\n    \n    \n    res = ground;\n    material = 0.0;\n    \n    if (sphere < res) {\n        res = sphere;\n        material = 1.0;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    float mat = 0.0;\n    \n    return normalize(  vec3(map(pos+e.xyy, mat) - map(pos-e.xyy, mat),\n                            map(pos+e.yxy, mat) - map(pos-e.yxy, mat),\n                            map(pos+e.yyx, mat) - map(pos-e.yyx, mat)));\n}\n\nfloat castRay (inout vec3 ro, vec3 rd, inout float material) {\n    float t = 0.0;\n    int i=0;    \n    for (; i<100; i++) {\n        float map_res = map(ro, material);\n        float h = map_res;\n        ro += h*rd;\n        \n        if (h < 0.001) {\n            break;\n        }\n        \n        t += h;\n        \n        if (t > 20.0) {\n            break;\n        }\n    }\n    \n    if (t > 20.0) t = -1.0;\n    \n    return t;\n}\n\nfloat castShadow (vec3 ro, vec3 rd) {\n    float t = 0.0;\n    vec3 pos = ro;\n    float material = 0.0;\n    for (int i=0; i<100; i++) {\n        float map_res = map(pos, material);\n        float h = map_res;\n        pos += h*rd;\n\n        \n        if (h < 0.0001) {\n            break;\n        }\n        \n        t += h;\n        \n        if (t > 20.0) {\n            break;\n        }\n    }\n    \n    if (t > 20.0) t = -1.0;\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float an_x = 0.0 + INTENSE; // + iTime TODO here speeding up\n    float an_y = 0.3 + INTENSE; // TODO prob here too\n    \n    vec3 ta = vec3(0.0, 0.25, 0.0);\n    vec3 ro = ta + vec3(1.5*sin(an_x), 1.5*sin(an_y), 1.5*cos(an_x));\n    ro *= 1.5;\n    \n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(vec3(p.x*uu + p.y*vv + 1.8*ww));\n    \n    vec3 col = vec3(0.4, 0.25, 1.0);\n    col = mix(col, vec3(0.7,0.5,0.8), exp(-10.0*rd.y));\n            \n    float material = 0.0;\n    float tp = castRay(ro, rd, material);\n    float t = tp;\n    vec3 pos = ro;\n    vec2 floor_pos = ro.xz;\n    \n    if (t > 0.0) {\n        vec3 nor = calcNormal(pos);\n        \n        float swirl_power = mix(1.0, 0.0, step(iTime,15.0)) * iTime;\n        float swirl = distance(floor_pos, vec2(tan(rand(swirl_power*2.0)), tan(swirl_power))) / 10.0;\n        floor_pos *= rotateFloor(swirl);\n        \n        float row = floor(mod(floor_pos.x * 2.0, 2.0));\n        float column = floor(mod(floor_pos.y * 2.0, 2.0));\n        \n        vec3 mate = vec3(0.2);\n        if (material < 0.5 && (row < 0.5 || column < 0.5) && !(row < 0.5 && column < 0.5)) mate = vec3(0.1);\n        if (material < 1.5 && material > 0.5) mate = vec3(0.3, 0.2, 0.1);\n        \n        vec3 sun_dir = normalize(vec3(sin(iTime / 5.0), 0.4, cos(iTime / 5.0)));\n        float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n        float sun_sha = step(castShadow(pos+nor*0.001, sun_dir), -0.5);\n        float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        float bou_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n        \n        col = mate*vec3(2.0*INTENSE, 5.0, 3.0)*sun_dif*sun_sha;\n        col += mate*vec3(0.5, 0.8*INTENSE, 0.9)*sky_dif;\n        col += mate*vec3(0.7, 0.3, 0.2)*bou_dif;\n    }\n        \n    col = pow(col, vec3(0.4545));\n    \n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}