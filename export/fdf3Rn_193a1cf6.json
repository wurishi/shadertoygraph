{"ver":"0.1","info":{"id":"fdf3Rn","date":"1615350568","viewed":121,"name":"Analytic vs. Euler Integration","username":"oneshade","description":"Learning to integrate and also comparing to Euler integration (is completely unfair ;)).","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["2d","math","learning","analytic","integral","parametric","comparison","euler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nHaving fun figuring out how to integrate!\nTrying out a comparison between numeric (euler) and analytic integration,\nthe winner is pretty obvious. Maybe I'll try some other numeric\nintegration schemes.\n\nDesmos graph:\nhttps://www.desmos.com/calculator/pxji4ovi3x\n*/\n\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    uv += c; // Bring into view\n\n    // Draw true path, it has to be brute forced in segments though :(\n    float tStep = TAU / PLOT;\n    vec2 prev = Position(-PI);\n    for (float t=tStep - PI; t < PI + tStep; t += tStep) {\n        vec2 cur = Position(t);\n        draw(sdLine(uv, prev, cur), vec3(1.0));\n        prev = cur;\n    }\n\n    vec2 vel = Velocity(iTime);\n    vec2 dir = normalize(vel);\n\n    // Draw points\n    vec2 pos = Position(iTime);\n    draw(sdLine(uv, pos, pos + dir), vec3(0.0, 0.0, 1.0));\n    draw(length(uv - pos) - 0.05, vec3(0.0, 1.0, 0.0));\n\n    pos = texelFetch(iChannel0, ivec2(0), 0).xy;\n    draw(sdLine(uv, pos, pos + dir), vec3(0.0, 0.0, 1.0));\n    draw(length(uv - pos) - 0.05, vec3(1.0, 0.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TAU 6.28\n#define PI 3.14\n\n#define PLOT 50.0 // Plot resolution\n\n#define k 10.0 // Fractal iterations\n#define c vec2(0.0, 4.0 / 3.0) // Constant of integration\n\nvec2 Velocity(in float t) {\n    vec2 p = vec2(0.0);\n    for (float n=0.0; n < k; n++) {\n        float s = pow(2.0, n), ts = t * s;\n        p += vec2(cos(ts), sin(ts)) / s;\n    }\n\n    return p;\n}\n\n// Analytic integral\nvec2 Position(in float t) {\n    vec2 p = vec2(0.0);\n    for (float n=0.0; n < k; n++) {\n        float ts = t * pow(2.0, n);\n        p += vec2(sin(ts), -cos(ts)) / pow(2.0, 2.0 * n);\n    }\n\n    return p + c;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFrame > 0 && iFragCoord == ivec2(0)) {\n        fragColor = texelFetch(iChannel0, ivec2(0), 0);\n        fragColor.xy += Velocity(iTime) * iTimeDelta; // Euler integration\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}