{"ver":"0.1","info":{"id":"l3sSDM","date":"1709660454","viewed":20,"name":"BrightnessRipple","username":"benthosdotpdf","description":"cycles through a band of accepted brightness values and rejects the rest. Touch the top or bottom of the screen to control ripple speed","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["liveshow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialize variables to store minimum and maximum brightness\n    float minBrightness = 1.0; // Initialize with highest possible value (1.0)\n    float maxBrightness = 0.0; // Initialize with lowest possible value (0.0)\n    float bandWidth = .1;\n    float speed = (iMouse.y/iResolution.y);\n    float t = iTime*speed;\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    // Calculate Brightness\n    float brightness = (col.r + col.g + col.b) / 3.0;\n    \n    // Update minimum and maximum brightness\n    minBrightness = min(minBrightness, brightness);\n    maxBrightness = max(maxBrightness, brightness);\n    \n    // Set color based on brightness range\n    float bCentroid = mod((iMouse.x/iResolution.x)+t , 1.0); \n    \n    float bHighBound = bCentroid + bandWidth;\n    float bLowBound  = bCentroid - bandWidth;\n    \n    bool  wrapCond   = bHighBound < bLowBound;\n    bool  bCond;\n    \n    if (!wrapCond) {\n        bCond = brightness < bHighBound && brightness > bLowBound;\n    } else {\n        bCond = !(brightness > bHighBound && brightness < bLowBound);\n    }\n    \n    if (bCond) { // Check if brightness is below 0.1\n        fragColor = vec4(mod(t*.3,.5)+(0.4*fragCoord.x/iResolution.x),\n                         mod(t*.5,.5)+(0.4*fragCoord.y/iResolution.y),\n                         mod(t*.9,.9), 1.0);       \n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0); // Black\n    }\n\n    //fragColor = col;\n}","name":"Image","description":"","type":"image"}]}