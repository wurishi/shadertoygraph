{"ver":"0.1","info":{"id":"7dfBWs","date":"1645544188","viewed":341,"name":"Red Sun (flow noise demo)","username":"stegu","description":"A shader celebrating the final publication of the 3D simplex noise with \"flow noise\" features by me and Ian McEwan in [url=http://jcgt.org/published/0011/01/02/]JCGT[/url].\n\nEdited a few times. I might revisit this to add some \"glow and throw\" around it.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["sun","sphere","star","turbulence","flownoise"],"hasliked":0,"parentid":"NsffDs","parentname":"2D noise on a Fibonacci sphere"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sphere_size = 1.0; // Unit sphere\n    // The number of facets can be anything from 8 to 2e6\n    const float FibN = 471.0;\n\n    vec3 bgcolor = vec3(0.0, 0.0, 0.0);\n\n    // Default view: fit unit circle in viewport\n    vec3 uvw;\n    uvw.xy = (2.0*fragCoord- iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    // Adjust scale by mouse drags (down-drag zooms out, up-drag zooms in)\n    float zoom = 1.1*pow(0.98,iMouse.y-abs(iMouse.w));\n    uvw.xy = zoom*uvw.xy;\n    // uvw is scaled but not rotated\n    float sphere_mask = 1.0 - aastep(sphere_size, length(uvw.xy));\n    if(sphere_mask == 0.0) { // Early exit - big saving in distant views\n        fragColor = vec4(bgcolor, 1.0);\n        return;\n    }\n    \n    // Fake sphere z in unit circle\n    uvw.z = sqrt(max(0.0, sphere_size*sphere_size-dot(uvw.xy,uvw.xy)));\n\n    // Spin vertically (rotate only the texcoords)\n    float el = 3.5*sin(iTime*0.02*sqrt(3.0));\n    float Se = sin(el);\n    float Ce = cos(el);\n    // Spin horizontally\n    float az = 7.0*sin(iTime*0.02*sqrt(2.0));\n    float Sa = sin(az);\n    float Ca = cos(az);\n    mat3 R = mat3(1.0,0.0,0.0, 0.0,Ce,-Se, 0.0,Se,Ce);\n    R *= mat3(Ca,0.0,Sa, 0.0,1.0,0.0, -Sa,0.0,Ca);\n\n    vec3 v = normalize(R*uvw); // Rescale coords to unit sphere\n\n\tfloat n;\n    float t = iTime*0.25;\n\tvec3 g, g1;\n    vec3 p = vec3(0.0);\n    float w = 0.05; // <-- Fun parameter to change!\n    \n\tn = psrdnoise(v, p, t, g);\n\tn += 0.5*psrdnoise(v*2.0+g*w, p, t*2.0, g1);\n\tg += g1;\n\tn += 0.25*psrdnoise(v*4.0+g*w, p, t*4.0, g1);\n\tg += g1;\n\tn += 0.125*psrdnoise(v*8.0+g*w, p, t*8.0, g1);\n\tg += g1;\n\tn += 0.0625*psrdnoise(v*16.0+g*w, p, t*16.0, g1);\n\tg += g1;\n\tfloat m = 0.2*n + 0.2*length(g); // <-- Try more or less of n here\n\n    const vec3 darkred = vec3(0.5, 0.0, 0.0);\n\tconst vec3 brightred = vec3(1.0, 0.3, 0.0);\n\tvec3 mixcolor;\n    mixcolor = mix(darkred, brightred, m);\n    mixcolor = mix(bgcolor, mixcolor, sphere_mask);\n\n    fragColor = vec4(mixcolor, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// A convenient anti-aliased step() using auto derivatives\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nvec4 permute(vec4 i) {\n\tvec4 im = mod(i, 289.0);\n\treturn mod(((im*34.0)+10.0)*im, 289.0);\n}\n\nfloat psrdnoise(vec3 x, vec3 period, float alpha, out vec3 gradient)\n{\n\tconst mat3 M = mat3(0.0, 1.0, 1.0, 1.0, 0.0, 1.0,  1.0, 1.0, 0.0);\n\tconst mat3 Mi = mat3(-0.5, 0.5, 0.5, 0.5,-0.5, 0.5, 0.5, 0.5,-0.5);\n\tvec3 uvw = M * x;\n\tvec3 i0 = floor(uvw), f0 = fract(uvw);\n\tvec3 g_ = step(f0.xyx, f0.yzz), l_ = 1.0 - g_;\n\tvec3 g = vec3(l_.z, g_.xy), l = vec3(l_.xy, g_.z);\n\tvec3 o1 = min( g, l ), o2 = max( g, l );\n\tvec3 i1 = i0 + o1, i2 = i0 + o2, i3 = i0 + vec3(1.0);\n\tvec3 v0 = Mi * i0, v1 = Mi * i1, v2 = Mi * i2, v3 = Mi * i3;\n\tvec3 x0 = x - v0, x1 = x - v1, x2 = x - v2, x3 = x - v3;\n\tif(any(greaterThan(period, vec3(0.0)))) {\n\t\tvec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);\n\t\tvec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);\n\t\tvec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);\n\t\tif(period.x > 0.0) vx = mod(vx, period.x);\n\t\tif(period.y > 0.0) vy = mod(vy, period.y);\n\t\tif(period.z > 0.0) vz = mod(vz, period.z);\n\t\ti0 = floor(M * vec3(vx.x, vy.x, vz.x) + 0.5);\n\t\ti1 = floor(M * vec3(vx.y, vy.y, vz.y) + 0.5);\n\t\ti2 = floor(M * vec3(vx.z, vy.z, vz.z) + 0.5);\n\t\ti3 = floor(M * vec3(vx.w, vy.w, vz.w) + 0.5);\n\t}\n\tvec4 hash = permute( permute( permute( \n\t\t\tvec4(i0.z, i1.z, i2.z, i3.z ))\n\t\t\t+ vec4(i0.y, i1.y, i2.y, i3.y ))\n\t\t\t+ vec4(i0.x, i1.x, i2.x, i3.x ));\n\tvec4 theta = hash * 3.883222077;\n\tvec4 sz = hash * -0.006920415 + 0.996539792;\n\tvec4 psi = hash * 0.108705628;\n\tvec4 Ct = cos(theta), St = sin(theta);\n\tvec4 sz_prime = sqrt( 1.0 - sz*sz );\n\tvec4 gx, gy, gz;\n\tif(alpha != 0.0) {\n\t\tvec4 px = Ct * sz_prime, py = St * sz_prime, pz = sz;\n\t\tvec4 Sp = sin(psi), Cp = cos(psi), Ctp = St*Sp - Ct*Cp;\n\t\tvec4 qx = mix( Ctp*St, Sp, sz), qy = mix(-Ctp*Ct, Cp, sz);\n\t\tvec4 qz = -(py*Cp + px*Sp);\n\t\tvec4 Sa = vec4(sin(alpha)), Ca = vec4(cos(alpha));\n\t\tgx = Ca*px + Sa*qx; gy = Ca*py + Sa*qy; gz = Ca*pz + Sa*qz;\n\t}\n\telse {\n\t\tgx = Ct * sz_prime; gy = St * sz_prime; gz = sz;  \n\t}\n\tvec3 g0 = vec3(gx.x, gy.x, gz.x), g1 = vec3(gx.y, gy.y, gz.y);\n\tvec3 g2 = vec3(gx.z, gy.z, gz.z), g3 = vec3(gx.w, gy.w, gz.w);\n\tvec4 w = 0.5-vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n\tw = max(w, 0.0); vec4 w2 = w * w, w3 = w2 * w;\n\tvec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));\n\tfloat n = dot(w3, gdotx);\n\tvec4 dw = -6.0 * w2 * gdotx;\n\tvec3 dn0 = w3.x * g0 + dw.x * x0;\n\tvec3 dn1 = w3.y * g1 + dw.y * x1;\n\tvec3 dn2 = w3.z * g2 + dw.z * x2;\n\tvec3 dn3 = w3.w * g3 + dw.w * x3;\n\tgradient = 39.5 * (dn0 + dn1 + dn2 + dn3);\n\treturn 39.5 * n;\n}\n","name":"Common","description":"","type":"common"}]}