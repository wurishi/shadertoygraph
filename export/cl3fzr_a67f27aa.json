{"ver":"0.1","info":{"id":"cl3fzr","date":"1700851562","viewed":38,"name":"TUNNEL 1 ","username":"fthr_tpolm","description":"tunnel by chatgpt prompting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tpolm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Transform uv to (-1, 1) range\n    uv.x *= iResolution.x / iResolution.y; // Correct aspect ratio\n\n    // 3D Tunnel effect\n    float fov = 3.14159 / 4.0; // Field of view\n    vec3 rayDir = normalize(vec3(uv, -1.0 / tan(fov / 2.0))); // Ray direction for each pixel\n    float z = iTime * 0.05; // Slow camera movement along z-axis\n    vec3 rayOrigin = vec3(0.0, 0.0, z);\n\n    // Calculate intersection with cylinder surface\n    float cylinderRadius = 1.0;\n    float a = rayDir.x * rayDir.x + rayDir.y * rayDir.y;\n    float b = 2.0 * (rayOrigin.x * rayDir.x + rayOrigin.y * rayDir.y);\n    float c = rayOrigin.x * rayOrigin.x + rayOrigin.y * rayOrigin.y - cylinderRadius * cylinderRadius;\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant > 0.0) {\n        float t = (-b - sqrt(discriminant)) / (2.0 * a);\n        vec3 hitPoint = rayOrigin + t * rayDir;\n\n        // Convert hit point to cylindrical UV\n        vec2 cylUV;\n        cylUV.x = atan(hitPoint.y, hitPoint.x) / (2.0 * 3.14159);\n        cylUV.y = hitPoint.z - floor(hitPoint.z);\n\n        // Dot pattern on cylinder\n        vec2 grid = vec2(5.0, 10.0); // Adjust grid size to spread dots horizontally\n        vec2 gridUV = fract(cylUV * grid);\n        float dot = smoothstep(0.3, 0.7, 0.5 - length(gridUV - 0.5)); // Large dot size\n\n        // Rainbow color tint\n        vec3 colorTint = 0.5 + 0.5 * cos(vec3(0.0, 2.0, 4.0) + cylUV.xyx * 3.14159 * 2.0);\n\n        // Color and output\n        vec3 col = colorTint * dot; // Apply rainbow tint to dots\n        fragColor = vec4(col, 1.0);\n    } else {\n        // Background color if ray doesn't hit the cylinder\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}