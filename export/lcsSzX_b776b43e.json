{"ver":"0.1","info":{"id":"lcsSzX","date":"1705576346","viewed":56,"name":"Springy Amogus","username":"GetItemFromBlock","description":"Forked from \"Springy Icosahedron\" by oneshade. https://shadertoy.com/view/7ssGW7\nModified version that looks kinda sus\nPress space to toggle vertices","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["3d","simulation","physics","lowpoly","spring","softbody","amongus","sus","amogus","sussy","crewmate"],"hasliked":0,"parentid":"4sfGRn","parentname":"Radial Blur"},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Springy Icosahedron\" by oneshade. https://shadertoy.com/view/7ssGW7\n// 2024-01-17 23:34:19\n\nIntersect iScene(in vec3 ro, in vec3 rd) {\n    Intersect scene = Intersect(false, -1.0, vec3(0.0), vec3(0.0), vec3(1.0));\n\n    // Intersect ground plane\n    float plane = iPlane(ro, rd, vec3(0.0, PLANE_HEIGHT, 0.0), vec3(0.0, 1.0, 0.0));\n    if (plane > 0.0) {\n        scene.hit = true;\n        scene.dist = plane;\n        scene.pos = ro + rd * plane;\n        scene.nor = nPlane(scene.pos, vec3(0.0, PLANE_HEIGHT, 0.0), vec3(0.0, 1.0, 0.0));\n    }\n    if (texelFetch(iChannel1, ivec2(32,2), 0).r > 0.)\n    // Intersect vertices (joints)\n    for (int n=0; n < joints.length(); n++) {\n        vec3 joint = getJoint(n).pos;\n        float sphere = iSphere(ro, rd, joint, JOINT_SIZE);\n        if (sphere > 0.0 && (scene.hit ? sphere < scene.dist : true)) {\n            scene.hit = true;\n            scene.dist = sphere;\n            scene.pos = ro + rd * sphere;\n            scene.nor = nSphere(scene.pos, joint, JOINT_SIZE);\n        }\n    }\n\n    // Intersect faces\n    for (int n=0; n < faces.length(); n++)\n    {\n        vec3 a = getJoint(faces[n][0]-1).pos;\n        vec3 b = getJoint(faces[n][1]-1).pos;\n        vec3 c = getJoint(faces[n][2]-1).pos;\n        float triangle = iTriangle(ro, rd, a, b, c);\n        if (triangle > 0.0 && (scene.hit ? triangle < scene.dist : true)) {\n            scene.hit = true;\n            scene.dist = triangle;\n            scene.pos = ro + rd * triangle;\n            scene.nor = nTriangle(scene.pos, a, b, c);\n            scene.col = n > 242 ? vec3(0.384,0.800,1.000) : vec3(1,0,0);\n        }\n    }\n\n    return scene;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 ro = CAMERA_POS;\n    vec3 rd = normalize(vec3(uv, -FOCAL_LENGTH));\n    rd = setRotation(-pi/4.)*rd;\n    \n\n    // Sky\n    fragColor = vec4(mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y), 1.0);\n\n    Intersect scene = iScene(ro, rd);\n    if (scene.hit) {\n        scene.nor *= sign(dot(scene.nor, -rd)); // Flip the normal towards the camera\n        vec3 light = normalize(vec3(-1.0, 1.0, 1.0));\n        fragColor.rgb = scene.col * vec3(max(0.0, mix(dot(scene.nor, light), dot(scene.nor, -rd), 0.5)));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Settings\n#define CAMERA_POS vec3(-4.0, 0.0, 4.0)\n#define FOCAL_LENGTH 1.0\n\n#define JOINT_SIZE 0.05\n#define JOINT_MASS 5.0\n\n#define PLANE_HEIGHT -2.0\n\n#define GRAVITY 0.01\n#define SPRINGINESS 0.007\n#define DAMPING 0.95\n#define SPEED_LIMIT 0.5\n\n// Constants\n#define e 2.7182818285\n#define phi 1.6180339887\n#define pi 3.14159265359\n#define tau 6.28318530718\n#define rho 1.57079632679\n\n// Geometry (copied from https://people.sc.fsu.edu/~jburkardt/data/obj/icosahedron.obj)\nconst vec3[] joints = vec3[](\nvec3(-0.000000, 0.457694, 0.000000),\nvec3(0.651247, 1.010474, 0.525725),\nvec3(-0.248749, 1.010474, 0.850649),\nvec3(-0.804984, 1.010478, 0.000000),\nvec3(-0.248749, 1.010474, -0.850649),\nvec3(0.651247, 1.010474, -0.525725),\nvec3(0.248749, 2.592220, 0.850649),\nvec3(-0.651247, 2.592219, 0.525725),\nvec3(-0.651247, 2.592219, -0.525725),\nvec3(0.248749, 2.592220, -0.850649),\nvec3(0.804984, 2.592216, 0.000000),\nvec3(-0.000000, 3.145000, 0.000000),\nvec3(-0.146210, 0.607040, 0.499995),\nvec3(0.382790, 0.607040, 0.309011),\nvec3(0.236582, 0.931956, 0.809012),\nvec3(0.765583, 0.931958, 0.000000),\nvec3(0.382790, 0.607040, -0.309011),\nvec3(-0.473157, 0.607042, 0.000000),\nvec3(-0.619370, 0.931958, 0.499997),\nvec3(-0.146210, 0.607040, -0.499995),\nvec3(-0.619370, 0.931958, -0.499997),\nvec3(0.236582, 0.931956, -0.809012),\nvec3(0.855952, 1.645000, 0.309013),\nvec3(0.855952, 1.645000, -0.309013),\nvec3(-0.000000, 1.645000, 1.000000),\nvec3(0.529007, 1.645000, 0.809017),\nvec3(-0.855952, 1.645000, 0.309013),\nvec3(-0.529007, 1.645000, 0.809017),\nvec3(-0.529007, 1.645000, -0.809017),\nvec3(-0.855952, 1.645000, -0.309013),\nvec3(0.529007, 1.645000, -0.809017),\nvec3(-0.000000, 1.645000, -1.000000),\nvec3(0.619370, 2.670736, 0.499997),\nvec3(-0.236582, 2.670738, 0.809012),\nvec3(-0.765583, 2.670736, 0.000000),\nvec3(-0.236582, 2.670738, -0.809012),\nvec3(0.619370, 2.670736, -0.499997),\nvec3(0.146210, 2.995654, 0.499995),\nvec3(0.473157, 2.995651, 0.000000),\nvec3(-0.382790, 2.995654, 0.309011),\nvec3(-0.382790, 2.995654, -0.309011),\nvec3(0.146210, 2.995654, -0.499995),\nvec3(0.570489, 1.186545, -0.000000),\nvec3(1.054094, 1.462935, 0.350475),\nvec3(0.385772, 1.462935, 0.567085),\nvec3(0.385772, 1.462935, -0.567085),\nvec3(1.054094, 1.462935, -0.350475),\nvec3(0.755206, 2.410155, 0.567085),\nvec3(0.755206, 2.410155, -0.567085),\nvec3(1.168257, 2.410153, -0.000000),\nvec3(-0.721043, 2.083841, 0.574786),\nvec3(0.461916, 1.261218, 0.333322),\nvec3(0.854743, 1.261218, 0.206002),\nvec3(0.746171, 1.423676, 0.539328),\nvec3(1.138999, 1.423677, -0.000000),\nvec3(0.854743, 1.261218, -0.206002),\nvec3(0.461916, 1.261218, -0.333322),\nvec3(0.746171, 1.423676, -0.539328),\nvec3(1.206105, 1.936545, 0.206003),\nvec3(1.206105, 1.936545, -0.206003),\nvec3(0.570489, 1.936545, 0.666650),\nvec3(0.963321, 1.936545, 0.539331),\nvec3(0.963321, 1.936545, -0.539331),\nvec3(0.570489, 1.936545, -0.666650),\nvec3(1.030423, 2.449413, 0.333323),\nvec3(0.394807, 2.449414, 0.539328),\nvec3(0.394807, 2.449414, -0.539328),\nvec3(1.030423, 2.449413, -0.333323),\nvec3(0.662966, 2.611872, 0.333322),\nvec3(0.921847, 2.611871, -0.000000),\nvec3(0.227107, 0.139354, 0.234999),\nvec3(-0.000000, -0.003714, 0.400000),\nvec3(0.662966, 2.611872, -0.333322),\nvec3(-1.020104, 2.083842, -0.000000),\nvec3(-0.721043, 2.083841, -0.574786),\nvec3(-0.086746, 0.139354, 0.133020),\nvec3(-0.453562, 2.614027, 0.574786),\nvec3(-0.937447, 2.614027, 0.355234),\nvec3(-0.937447, 2.614027, -0.355234),\nvec3(-0.453562, 2.614027, -0.574786),\nvec3(0.280720, 0.812721, 0.400000),\nvec3(-0.587302, 2.768730, -0.000000),\nvec3(-0.665913, 1.970934, 0.337848),\nvec3(-0.086746, 0.139354, 0.666980),\nvec3(-0.460104, 2.061867, 0.546651),\nvec3(-0.280720, 0.139356, 0.400000),\nvec3(0.227107, 0.139354, 0.565001),\nvec3(-0.812930, 1.970935, -0.000000),\nvec3(-0.920308, 2.061867, 0.337849),\nvec3(-0.665913, 1.970934, -0.337848),\nvec3(-0.920308, 2.061867, -0.337849),\nvec3(-0.460104, 2.061867, -0.546651),\nvec3(0.086746, 0.812722, 0.133020),\nvec3(-0.227107, 0.812722, 0.234999),\nvec3(-0.587302, 2.348934, 0.675703),\nvec3(-0.302880, 2.348934, 0.546655),\nvec3(-1.047507, 2.348934, 0.208801),\nvec3(-0.871724, 2.348934, 0.546655),\nvec3(-0.871724, 2.348934, -0.546655),\nvec3(-1.047507, 2.348934, -0.208801),\nvec3(-0.302880, 2.348934, -0.546655),\nvec3(-0.587302, 2.348934, -0.675703),\nvec3(-0.227107, 0.812722, 0.565001),\nvec3(-0.714501, 2.636001, 0.546651),\nvec3(-0.998920, 2.636001, -0.000000),\nvec3(-0.714501, 2.636001, -0.546651),\nvec3(0.086746, 0.812722, 0.666980),\nvec3(-0.508692, 2.726934, 0.337848),\nvec3(-0.793111, 2.726934, 0.208800),\nvec3(-0.793111, 2.726934, -0.208800),\nvec3(-0.508692, 2.726934, -0.337848),\nvec3(-0.050987, 0.012735, 0.556926),\nvec3(0.133489, 0.012735, 0.496985),\nvec3(0.082503, 0.114711, 0.653912),\nvec3(0.266980, 0.114712, 0.400000),\nvec3(0.133489, 0.012735, 0.303015),\nvec3(-0.165003, 0.012735, 0.400000),\nvec3(-0.215991, 0.114712, 0.556926),\nvec3(-0.050987, 0.012735, 0.243074),\nvec3(-0.215991, 0.114712, 0.243074),\nvec3(0.082503, 0.114711, 0.146088),\nvec3(0.298494, 0.456941, 0.496985),\nvec3(0.298494, 0.456941, 0.303015),\nvec3(-0.000000, 0.456941, 0.713855),\nvec3(0.184479, 0.456941, 0.653914),\nvec3(-0.298494, 0.456941, 0.496985),\nvec3(-0.184479, 0.456941, 0.653914),\nvec3(-0.184479, 0.456941, 0.146086),\nvec3(-0.298494, 0.456941, 0.303015),\nvec3(0.184479, 0.456941, 0.146086),\nvec3(-0.000000, 0.456941, 0.086145),\nvec3(0.215991, 0.837365, 0.556926),\nvec3(-0.082503, 0.837365, 0.653912),\nvec3(-0.266980, 0.837365, 0.400000),\nvec3(-0.082503, 0.837365, 0.146088),\nvec3(0.215991, 0.837365, 0.243074),\nvec3(0.227107, 0.139354, -0.565001),\nvec3(-0.000000, -0.003714, -0.400000),\nvec3(-0.086746, 0.139354, -0.666980),\nvec3(0.280720, 0.812721, -0.400000),\nvec3(-0.086746, 0.139354, -0.133020),\nvec3(-0.280720, 0.139356, -0.400000),\nvec3(0.227107, 0.139354, -0.234999),\nvec3(0.086746, 0.812722, -0.666980),\nvec3(-0.227107, 0.812722, -0.565001),\nvec3(-0.227107, 0.812722, -0.234999),\nvec3(0.086746, 0.812722, -0.133020),\nvec3(-0.050987, 0.012735, -0.243074),\nvec3(0.133489, 0.012735, -0.303015),\nvec3(0.082503, 0.114711, -0.146088),\nvec3(0.266980, 0.114712, -0.400000),\nvec3(0.133489, 0.012735, -0.496985),\nvec3(-0.165003, 0.012735, -0.400000),\nvec3(-0.215991, 0.114712, -0.243074),\nvec3(-0.050987, 0.012735, -0.556926),\nvec3(-0.215991, 0.114712, -0.556926),\nvec3(0.082503, 0.114711, -0.653912),\nvec3(0.298494, 0.456941, -0.303015),\nvec3(0.298494, 0.456941, -0.496985),\nvec3(-0.000000, 0.456941, -0.086145),\nvec3(0.184479, 0.456941, -0.146086),\nvec3(-0.298494, 0.456941, -0.303015),\nvec3(-0.184479, 0.456941, -0.146086),\nvec3(-0.184479, 0.456941, -0.653914),\nvec3(-0.298494, 0.456941, -0.496985),\nvec3(0.184479, 0.456941, -0.653914),\nvec3(-0.000000, 0.456941, -0.713855),\nvec3(0.215991, 0.837365, -0.243074),\nvec3(-0.082503, 0.837365, -0.146088),\nvec3(-0.266980, 0.837365, -0.400000),\nvec3(-0.082503, 0.837365, -0.653912),\nvec3(0.215991, 0.837365, -0.556926)\n);\n\nconst ivec3[] faces = ivec3[](\n    ivec3(1, 14, 13),\nivec3(2, 14, 16),\nivec3(1, 13, 18),\nivec3(1, 18, 20),\nivec3(1, 20, 17),\nivec3(2, 16, 23),\nivec3(3, 15, 25),\nivec3(4, 19, 27),\nivec3(5, 21, 29),\nivec3(6, 22, 31),\nivec3(2, 23, 26),\nivec3(3, 25, 28),\nivec3(4, 27, 30),\nivec3(5, 29, 32),\nivec3(6, 31, 24),\nivec3(7, 33, 38),\nivec3(8, 34, 40),\nivec3(9, 35, 41),\nivec3(10, 36, 42),\nivec3(11, 37, 39),\nivec3(39, 42, 12),\nivec3(39, 37, 42),\nivec3(37, 10, 42),\nivec3(42, 41, 12),\nivec3(42, 36, 41),\nivec3(36, 9, 41),\nivec3(41, 40, 12),\nivec3(41, 35, 40),\nivec3(35, 8, 40),\nivec3(40, 38, 12),\nivec3(40, 34, 38),\nivec3(34, 7, 38),\nivec3(38, 39, 12),\nivec3(38, 33, 39),\nivec3(33, 11, 39),\nivec3(24, 37, 11),\nivec3(24, 31, 37),\nivec3(31, 10, 37),\nivec3(32, 36, 10),\nivec3(32, 29, 36),\nivec3(29, 9, 36),\nivec3(30, 35, 9),\nivec3(30, 27, 35),\nivec3(27, 8, 35),\nivec3(28, 34, 8),\nivec3(28, 25, 34),\nivec3(25, 7, 34),\nivec3(26, 33, 7),\nivec3(26, 23, 33),\nivec3(23, 11, 33),\nivec3(31, 32, 10),\nivec3(31, 22, 32),\nivec3(22, 5, 32),\nivec3(29, 30, 9),\nivec3(29, 21, 30),\nivec3(21, 4, 30),\nivec3(27, 28, 8),\nivec3(27, 19, 28),\nivec3(19, 3, 28),\nivec3(25, 26, 7),\nivec3(25, 15, 26),\nivec3(15, 2, 26),\nivec3(23, 24, 11),\nivec3(23, 16, 24),\nivec3(16, 6, 24),\nivec3(17, 22, 6),\nivec3(17, 20, 22),\nivec3(20, 5, 22),\nivec3(20, 21, 5),\nivec3(20, 18, 21),\nivec3(18, 4, 21),\nivec3(18, 19, 4),\nivec3(18, 13, 19),\nivec3(13, 3, 19),\nivec3(16, 17, 6),\nivec3(16, 14, 17),\nivec3(14, 1, 17),\nivec3(13, 15, 3),\nivec3(13, 14, 15),\nivec3(14, 2, 15),\nivec3(43, 53, 52),\nivec3(44, 53, 55),\nivec3(43, 57, 56),\nivec3(44, 55, 59),\nivec3(45, 54, 61),\nivec3(47, 58, 63),\nivec3(44, 59, 62),\nivec3(47, 63, 60),\nivec3(48, 65, 69),\nivec3(49, 67, 73),\nivec3(50, 68, 70),\nivec3(72, 117, 119),\nivec3(70, 68, 73),\nivec3(68, 49, 73),\nivec3(76, 128, 131),\nivec3(70, 73, 69),\nivec3(72, 113, 112),\nivec3(87, 113, 115),\nivec3(87, 115, 122),\nivec3(66, 48, 69),\nivec3(69, 65, 70),\nivec3(65, 50, 70),\nivec3(60, 68, 50),\nivec3(60, 63, 68),\nivec3(63, 49, 68),\nivec3(64, 67, 49),\nivec3(61, 48, 66),\nivec3(62, 65, 48),\nivec3(62, 59, 65),\nivec3(59, 50, 65),\nivec3(63, 64, 49),\nivec3(63, 58, 64),\nivec3(58, 46, 64),\nivec3(61, 62, 48),\nivec3(61, 54, 62),\nivec3(54, 44, 62),\nivec3(59, 60, 50),\nivec3(59, 55, 60),\nivec3(55, 47, 60),\nivec3(56, 58, 47),\nivec3(56, 57, 58),\nivec3(57, 46, 58),\nivec3(55, 56, 47),\nivec3(55, 53, 56),\nivec3(53, 43, 56),\nivec3(52, 54, 45),\nivec3(52, 53, 54),\nivec3(53, 44, 54),\nivec3(76, 120, 128),\nivec3(71, 130, 123),\nivec3(84, 124, 127),\nivec3(71, 121, 130),\nivec3(72, 112, 117),\nivec3(87, 122, 125),\nivec3(86, 118, 126),\nivec3(84, 114, 124),\nivec3(72, 119, 116),\nivec3(86, 126, 129),\nivec3(123, 136, 81),\nivec3(123, 130, 136),\nivec3(130, 93, 136),\nivec3(131, 135, 93),\nivec3(131, 128, 135),\nivec3(128, 94, 135),\nivec3(129, 134, 94),\nivec3(129, 126, 134),\nivec3(126, 103, 134),\nivec3(127, 133, 103),\nivec3(127, 124, 133),\nivec3(124, 107, 133),\nivec3(125, 132, 107),\nivec3(125, 122, 132),\nivec3(122, 81, 132),\nivec3(130, 131, 93),\nivec3(130, 121, 131),\nivec3(121, 76, 131),\nivec3(128, 129, 94),\nivec3(128, 120, 129),\nivec3(120, 86, 129),\nivec3(126, 127, 103),\nivec3(126, 118, 127),\nivec3(118, 84, 127),\nivec3(124, 125, 107),\nivec3(124, 114, 125),\nivec3(114, 87, 125),\nivec3(122, 123, 81),\nivec3(122, 115, 123),\nivec3(115, 71, 123),\nivec3(116, 121, 71),\nivec3(116, 119, 121),\nivec3(119, 76, 121),\nivec3(119, 120, 76),\nivec3(119, 117, 120),\nivec3(117, 86, 120),\nivec3(117, 118, 86),\nivec3(117, 112, 118),\nivec3(112, 84, 118),\nivec3(115, 116, 71),\nivec3(115, 113, 116),\nivec3(113, 72, 116),\nivec3(112, 114, 84),\nivec3(112, 113, 114),\nivec3(113, 87, 114),\nivec3(138, 153, 155),\nivec3(139, 164, 167),\nivec3(138, 149, 148),\nivec3(143, 149, 151),\nivec3(143, 151, 158),\nivec3(139, 156, 164),\nivec3(137, 166, 159),\nivec3(141, 160, 163),\nivec3(137, 157, 166),\nivec3(138, 148, 153),\nivec3(143, 158, 161),\nivec3(142, 154, 162),\nivec3(141, 150, 160),\nivec3(138, 155, 152),\nivec3(142, 162, 165),\nivec3(159, 172, 140),\nivec3(159, 166, 172),\nivec3(166, 144, 172),\nivec3(167, 171, 144),\nivec3(167, 164, 171),\nivec3(164, 145, 171),\nivec3(165, 170, 145),\nivec3(165, 162, 170),\nivec3(162, 146, 170),\nivec3(163, 169, 146),\nivec3(163, 160, 169),\nivec3(160, 147, 169),\nivec3(161, 168, 147),\nivec3(161, 158, 168),\nivec3(158, 140, 168),\nivec3(166, 167, 144),\nivec3(166, 157, 167),\nivec3(157, 139, 167),\nivec3(164, 165, 145),\nivec3(164, 156, 165),\nivec3(156, 142, 165),\nivec3(162, 163, 146),\nivec3(162, 154, 163),\nivec3(154, 141, 163),\nivec3(160, 161, 147),\nivec3(160, 150, 161),\nivec3(150, 143, 161),\nivec3(158, 159, 140),\nivec3(158, 151, 159),\nivec3(151, 137, 159),\nivec3(152, 157, 137),\nivec3(152, 155, 157),\nivec3(155, 139, 157),\nivec3(155, 156, 139),\nivec3(155, 153, 156),\nivec3(153, 142, 156),\nivec3(153, 154, 142),\nivec3(153, 148, 154),\nivec3(148, 141, 154),\nivec3(151, 152, 137),\nivec3(151, 149, 152),\nivec3(149, 138, 152),\nivec3(148, 150, 141),\nivec3(148, 149, 150),\nivec3(149, 143, 150),\nivec3(51, 85, 95),\nivec3(74, 89, 97),\nivec3(75, 91, 99),\nivec3(51, 95, 98),\nivec3(74, 97, 100),\nivec3(75, 99, 102),\nivec3(78, 104, 109),\nivec3(79, 105, 110),\nivec3(80, 106, 111),\nivec3(111, 110, 82),\nivec3(111, 106, 110),\nivec3(106, 79, 110),\nivec3(110, 109, 82),\nivec3(110, 105, 109),\nivec3(105, 78, 109),\nivec3(109, 108, 82),\nivec3(109, 104, 108),\nivec3(104, 77, 108),\nivec3(102, 106, 80),\nivec3(102, 99, 106),\nivec3(99, 79, 106),\nivec3(100, 105, 79),\nivec3(100, 97, 105),\nivec3(97, 78, 105),\nivec3(98, 104, 78),\nivec3(98, 95, 104),\nivec3(95, 77, 104),\nivec3(101, 102, 80),\nivec3(101, 92, 102),\nivec3(92, 75, 102),\nivec3(99, 100, 79),\nivec3(99, 91, 100),\nivec3(91, 74, 100),\nivec3(97, 98, 78),\nivec3(97, 89, 98),\nivec3(89, 51, 98),\nivec3(95, 96, 77),\nivec3(95, 85, 96),\nivec3(90, 75, 92),\nivec3(90, 91, 75),\nivec3(90, 88, 91),\nivec3(88, 74, 91),\nivec3(88, 89, 74),\nivec3(88, 83, 89),\nivec3(83, 51, 89),\nivec3(83, 85, 51)\n);\n\n// Utilities\nstruct Joint {\n    vec3 pos;\n    vec3 vel;\n    float mass;\n};\n\n#define getJoint(id)                                  \\\n    Joint(texelFetch(iChannel0, ivec2(id, 0), 0).xyz, \\\n          texelFetch(iChannel0, ivec2(id, 1), 0).xyz, \\\n          JOINT_MASS)                                 \\\n\n// Intersectors\nstruct Intersect {\n    bool hit;\n    float dist;\n    vec3 pos;\n    vec3 nor;\n    vec3 col;\n};\n\nfloat iPlane(in vec3 ro, in vec3 rd, in vec3 o, in vec3 n) {\n    float d = dot(rd, n);\n    if (d != 0.0) return dot(o - ro, n) / d;\n    return -1.0;\n}\n\n// Assumes the ray is outside the sphere\n// The other side is: (b - sqrt(discr)) / a * 0.5\nfloat iSphere(in vec3 ro, in vec3 rd, in vec3 o, in float r) {\n    ro -= o;\n\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(ro, rd);\n    float c = dot(ro, ro) - r * r;\n\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) return -(sqrt(discr) + b) / a * 0.5;\n\n    return -1.0;\n}\n\n// Not as efficient as barycentric coordinates\n// BUT... it avoids having to introduce error margins\n// (though I guess square roots have errors of their own\n// so I guess its just a matter of elegance)\nfloat iTriangle(in vec3 ro, in vec3 rd, in vec3 a, in vec3 b, in vec3 c) {\n    ro -= a; b -= a; c -= a;\n    vec3 ba = normalize(b), cb = normalize(c - b), ac = normalize(-c);\n\n    vec3 n = cross(b, c);\n    float denom = dot(rd, n);\n    if (denom != 0.0) {\n        float t = -dot(ro, n) / denom;\n\n        vec3 p = ro + rd * t;\n        vec3 pa = normalize(p), pb = normalize(p - b), pc = normalize(p - c);\n\n        if (min(dot(pa, ba), dot(pa, -ac)) > dot(ba, -ac) &&\n            min(dot(pb, cb), dot(pb, -ba)) > dot(cb, -ba)) {\n            return t;\n        }\n    }\n\n    return -1.0;\n}\n\n// Normals\nvec3 nPlane(in vec3 p, in vec3 o, in vec3 n) {\n    return n; // For some weak polymorphism :P\n}\n\nvec3 nSphere(in vec3 p, in vec3 o, in float r) {\n    return (p - o) / r;\n}\n\nvec3 nTriangle(in vec3 p, in vec3 a, in vec3 b, in vec3 c) {\n    return normalize(cross(b - a, c - a));\n}\n\nmat3 setRotation(float y)\n{\n    float c = sin(y); float d = cos(y); \n\n    return mat3( d, 0.0, -c,\n                 0.0, 1.0, 0.0,\n                 c, 0.0, d);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n\n    // Simulation\n    if (iFragCoord.x < joints.length() && iFragCoord.y < 2) {\n        if (iFrame == 0) {\n            if (iFragCoord.y == 0) fragColor.xyz = joints[iFragCoord.x] - vec3(0.0, 1.95, 0.0);\n            if (iFragCoord.y == 1) fragColor.xyz = vec3(0.0);\n        }\n\n        else {\n            Joint joint1 = getJoint(iFragCoord.x);\n            vec3 startPos1 = joints[iFragCoord.x];\n\n            // Accumulate gravitational and spring forces\n            vec3 totalForce = vec3(0.0, -GRAVITY, 0.0);\n            for (int i=0; i < joints.length(); i++)\n            {\n            /*\n                bool skip = true;\n                for (int j=0; j < 3; j++)\n                {\n                    if (faces[i][j]-1 == iFragCoord.x)\n                    {\n                        skip = false;\n                        break;\n                    }\n                }\n                if (skip) continue;\n                for (int j=0; j < 3; j++)\n                {\n                    int n = faces[i][j]-1;\n                    if (n == iFragCoord.x) continue;\n                    Joint joint2 = getJoint(n);\n                    vec3 startPos2 = joints[int(float(n) + 0.5)]; // Why +0.5?\n\n                    float restLength = distance(startPos1, startPos2);\n                    vec3 force = normalize(joint2.pos - joint1.pos);\n                    float extension = restLength - distance(joint2.pos, joint1.pos);\n                    force *= -SPRINGINESS * extension;\n\n                    totalForce += force;\n                }\n                */\n                if (i == iFragCoord.x) continue;\n                Joint joint2 = getJoint(i);\n                vec3 startPos2 = joints[i];\n\n                float restLength = distance(startPos1, startPos2);\n                vec3 force = normalize(joint2.pos - joint1.pos);\n                float extension = restLength - distance(joint2.pos, joint1.pos);\n                force *= -SPRINGINESS * extension;\n\n                totalForce += force;\n            }\n\n            // Update\n            float dt = min(iTimeDelta, 1./30.);\n            joint1.vel += totalForce / joint1.mass * (144. * dt);\n            joint1.pos += joint1.vel * (144. * dt);\n            joint1.pos.y = max(joint1.pos.y, JOINT_SIZE + PLANE_HEIGHT);\n            joint1.vel *= DAMPING * sign(joint1.pos.y - PLANE_HEIGHT - JOINT_SIZE);\n\n            // Attract to mouse\n            if (iMouse.z > 0.0) {\n                vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n                vec3 ro = CAMERA_POS;\n                vec3 rd = normalize(vec3(mouse, -FOCAL_LENGTH));\n                rd = setRotation(-pi/4.)*rd;\n\n                bool closest = true;\n                vec3 targetPos = ro + rd * iPlane(ro, rd, joint1.pos, vec3(0.0, 0.0, 1.0));\n                float targetDist = distance(joint1.pos, targetPos);\n                for (int n=0; n < joints.length(); n++) {\n                    if (n == iFragCoord.x) continue;\n                    vec3 joint2 = getJoint(n).pos;\n                    vec3 targetPos2 = ro + rd * iPlane(ro, rd, joint2, vec3(0.0, 0.0, 1.0));\n                    if (distance(joint2, targetPos2) < targetDist - 0.1) {\n                        closest = false;\n                        break;\n                    }\n                }\n\n                if (closest) {\n                    joint1.vel = (targetPos - joint1.pos) * 0.5;\n                    joint1.vel = normalize(joint1.vel) * min(length(joint1.vel), SPEED_LIMIT);\n                }\n            }\n\n            // Store\n            if (iFragCoord.y == 0) fragColor.xyz = joint1.pos;\n            if (iFragCoord.y == 1) fragColor.xyz = joint1.vel;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}