{"ver":"0.1","info":{"id":"Xc33WM","date":"1711738932","viewed":50,"name":"Hitsuno_CannyEdge","username":"Hitsuono","description":"Canny Edge detection study.\nBased on \nhttps://www.shadertoy.com/view/wl2cW3\nand \nhttps://www.shadertoy.com/view/Xdf3Rf","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["edgedetection","canny"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COUNT_SELF 1\nconst float HYST_MIN = 2.;\n\nvec4 hysteresis(float stepx, float stepy, vec2 center){\n    float intens = intensity(texture(iChannel0, center));\n    float tleft = intensity(texture(iChannel0,center + vec2(-stepx,stepy)));\n    float left = intensity(texture(iChannel0,center + vec2(-stepx,0)));\n    float bleft = intensity(texture(iChannel0,center + vec2(-stepx,-stepy)));\n    float top = intensity(texture(iChannel0,center + vec2(0,stepy)));\n    float bottom = intensity(texture(iChannel0,center + vec2(0,-stepy)));\n    float tright = intensity(texture(iChannel0,center + vec2(stepx,stepy)));\n    float right = intensity(texture(iChannel0,center + vec2(stepx,0)));\n    float bright = intensity(texture(iChannel0,center + vec2(stepx,-stepy)));\n \n    float sum = tleft + left + bleft + top + + bottom + tright + right + bright;\n    #if COUNT_SELF\n    sum += intens;\n    #endif\n    if(intens > 0. && sum > HYST_MIN * high){\n        return vec4(1, 1, 1, 0);\n    }\n    return vec4(0,0,0,0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n \tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 color = texture(iChannel0, uv.xy);   \n    float pixStepx=step/iResolution[0];\n    float pixStepy = step/iResolution[1];\n    fragColor = hysteresis(pixStepx, pixStepy, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 sobel(float stepx, float stepy, vec2 center){\n    float tleft = intensity(texture(iChannel0,center + vec2(-stepx,stepy)));\n    float left = intensity(texture(iChannel0,center + vec2(-stepx,0)));\n    float bleft = intensity(texture(iChannel0,center + vec2(-stepx,-stepy)));\n    float top = intensity(texture(iChannel0,center + vec2(0,stepy)));\n    float bottom = intensity(texture(iChannel0,center + vec2(0,-stepy)));\n    float tright = intensity(texture(iChannel0,center + vec2(stepx,stepy)));\n    float right = intensity(texture(iChannel0,center + vec2(stepx,0)));\n    float bright = intensity(texture(iChannel0,center + vec2(stepx,-stepy)));\n \n    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;\n    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;\n    //float x = 0. * tleft + 2.0 * left + 0. * bleft - 0. * tright - 2.0 * right - 0. * bright;\n    //float y = -0. * tleft - 2.0 * top - 0. * tright + 0. * bleft + 2.0 * bottom + 0. * bright;\n\n    \n    float color = sqrt((x*x) + (y*y));\n    float angle = atan(y, x);\n    return vec4(color,color,color, angle);\n}\n\n\nvec4 doubleThreshold(float high, float low, vec4 col){\n    float intens = intensity(max(vec4(0,0,0,0),col));\n    if(intens >= high) return vec4(high, high, high,0);\n    if(intens < low) return vec4(0,0,0,0);\n    return vec4(low,low,low,0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 color = texture(iChannel0, uv.xy);\n    float pixStepx=step/iResolution[0];\n    float pixStepy = step/iResolution[1];\n    fragColor = sobel(pixStepx, pixStepy, uv);\n    \n    float angle = fragColor.a;\n    vec2 dir = vec2(pixStepx * cos(angle), pixStepy * sin(angle));\n    \n    if(max(sobel(pixStepx, pixStepy, uv + dir).rgb, fragColor.rgb) !=fragColor.rgb\n        || max(sobel(pixStepx, pixStepy, uv - dir).rgb, fragColor.rgb) !=fragColor.rgb){\n        fragColor = vec4(0,0,0,0);\n    }\n    \n    fragColor = doubleThreshold(high,low, fragColor);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float step = 1.;\nconst float high = 0.8;\nconst float low = 0.3;\nfloat intensity(in vec4 color){\n\treturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}","name":"Common","description":"","type":"common"}]}