{"ver":"0.1","info":{"id":"mt3BRS","date":"1701357905","viewed":108,"name":"// Fireplace 2 - HLSL fork","username":"oleg304","description":"fork Sparks drifting - https://www.shadertoy.com/view/MlKSWm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","fire","particles","sparks"],"hasliked":0,"parentid":"MlKSWm","parentname":"Sparks drifting"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fireplace 2 https://www.shadertoy.com/view/mt3BRS\n// HLSL -> GLSL https://anteru.net/blog/2016/mapping-between-HLSL-and-GLSL/\n#define float2   vec2\n#define float3   vec3\n#define float4   vec4\n#define lerp     mix\n#define atan2    atan\n#define frac     fract\n#define fmod     mod\n#define float2x2 mat2     \n#define mul(a, b) a*b \n#define texSampl 1.\n#define Texture2DSample(iChannel0, texSampl, uv) texture(iChannel0, uv)\n#define ddx dFdx\n#define ddy dFdy\n#define saturate(oo) clamp(oo, 0.0, 1.0)\n\n// fireplace\n//struct Func {\n\nfloat3 fmod289(float3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nfloat4 fmod289(float4 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;}\nfloat4 permute(float4 x) {\treturn fmod289(((x * 34.0) + 1.0) * x);}\nfloat4 taylorInvSqrt(float4 r){\treturn 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(float3 v){\n\tconst float2\tC = float2(1.0 / 6.0, 1.0 / 3.0);\n\tconst float4\tD = float4(0.0, 0.5, 1.0, 2.0);\n\t// First corner\n\tfloat3 i = floor(v + dot(v, C.yyy));\n\tfloat3 x0 = v - i + dot(i, C.xxx);\n\t// Other corners\n\tfloat3 g = step(x0.yzx, x0.xyz);\n\tfloat3 l = 1.0 - g;\n\tfloat3 i1 = min(g.xyz, l.zxy);\n\tfloat3 i2 = max(g.xyz, l.zxy);\n\tfloat3 x1 = x0 - i1 + C.xxx;\n\tfloat3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n\tfloat3 x3 = x0 - D.yyy;\t\t\t// -1.0+3.0*C.x = -0.5 = -D.y\n// Permutations\n\ti = fmod289(i);\n\tfloat4 p = permute(permute(permute(\n\t\ti.z + float4(0.0, i1.z, i2.z, 1.0))\n\t\t+ i.y + float4(0.0, i1.y, i2.y, 1.0))\n\t\t+ i.x + float4(0.0, i1.x, i2.x, 1.0));\n\t// Gradients: 7x7 points over a square, mapped onto an octahedron.\n\t// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n\tfloat n_ = 0.142857142857; // 1.0/7.0\n\tfloat3\tns = n_ * D.wyz - D.xzx;\n\tfloat4 j = p - 49.0 * floor(p * ns.z * ns.z);\t//\tfmod(p,7*7)\n\tfloat4 x_ = floor(j * ns.z);\n\tfloat4 y_ = floor(j - 7.0 * x_);\t\t// fmod(j,N)\n\tfloat4 x = x_ * ns.x + ns.yyyy;\n\tfloat4 y = y_ * ns.x + ns.yyyy;\n\tfloat4 h = 1.0 - abs(x) - abs(y);\n\tfloat4 b0 = float4(x.xy, y.xy);\n\tfloat4 b1 = float4(x.zw, y.zw);\n\t//float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;\n\t//float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;\n\tfloat4 s0 = floor(b0) * 2.0 + 1.0;\n\tfloat4 s1 = floor(b1) * 2.0 + 1.0;\n\tfloat4 sh = -step(h, float4(0.,0.,0.,0.));\n\tfloat4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tfloat4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\tfloat3 p0 = float3(a0.xy, h.x);\n\tfloat3 p1 = float3(a0.zw, h.y);\n\tfloat3 p2 = float3(a1.xy, h.z);\n\tfloat3 p3 = float3(a1.zw, h.w);\n\t//Normalise gradients\n\t\t//float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tfloat4 norm = 1./sqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\t// Mix final noise value\n\tfloat4 m = max(0.6 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),\n\t\tdot(p2, x2), dot(p3, x3)));\n}\n\n//////////////////////////////////////////////////////////////\n\n// PRNG\n// From https://www.shadertoy.com/view/4djSRW\nfloat prng(in float2 seed) {\n\tseed = frac(seed * float2(5.3983, 5.4427));\n\tseed += dot(seed.yx, seed.xy + float2(21.5351, 14.3137));\n\treturn frac(seed.x * seed.y * 95.4337);\n}\n\n//////////////////////////////////////////////////////////////\n\nfloat noiseStack(float3 pos, int octaves, float falloff) {\n\tfloat noise = snoise(float3(pos));\n\tfloat off = 1.0;\n\tif (octaves > 1) {\n\t\tpos *= 2.0;\n\t\toff *= falloff;\n\t\tnoise = (1.0 - off) * noise + off * snoise(float3(pos));\n\t}\n\tif (octaves > 2) {\n\t\tpos *= 2.0;\n\t\toff *= falloff;\n\t\tnoise = (1.0 - off) * noise + off * snoise(float3(pos));\n\t}\n\tif (octaves > 3) {\n\t\tpos *= 2.0;\n\t\toff *= falloff;\n\t\tnoise = (1.0 - off) * noise + off * snoise(float3(pos));\n\t}\n\treturn (1.0 + noise) / 2.0;\n}\n\nfloat2 noiseStackUV(float3 pos, int octaves, float falloff, float diff) {\n\tfloat displaceA = noiseStack(pos, octaves, falloff);\n\tfloat displaceB = noiseStack(pos + float3(3984.293, 423.21, 5235.19), octaves, falloff);\n\treturn float2(displaceA, displaceB);\n}\n\nfloat2 res(float2 uv, float time) {\n\t//float iTime = iTime;\n    float PI = 3.1415926535897932384626433832795;\n\tfloat ypartClip = uv.y*2.;\n\tfloat ypartClippedFalloff = clamp(2.0 - ypartClip, 0.0, 1.0);\n\tfloat ypartClipped = min(ypartClip, 1.0);\n\tfloat ypartClippedn = 1.0 - ypartClipped;\n\tfloat xfuel = 1.0 - abs(2.0 * uv.x - 1.0);//pow(1.0-abs(2.0*uv.x-1.0),0.5);\n\tfloat realTime = 0.5 * time;\n\tfloat2 coordScaled =  6.*uv - 0.2;\n\tfloat3 position = float3(coordScaled, 0.0) + float3(1223.0, 6434.0, 8425.0);\n\tfloat3 flow = float3(4.1 * (0.5 - uv.x) * pow(ypartClippedn, 4.0), -2.0 * xfuel * pow(ypartClippedn, 64.0), 0.0);\n\tfloat3 timing = realTime * float3(0.0, -1.7, 1.1) + flow;\n\tfloat3 displacePos = float3(1.0, 0.5, 1.0) * 2.4 * position + realTime * float3(0.01, -0.7, 1.3);\n\tfloat3 displace3 = float3(noiseStackUV(displacePos, 2, 0.4, 0.1), 0.0);\n\tfloat3 noiseCoord = (float3(2.0, 1.0, 1.0) * position + timing + 0.4 * displace3) / 1.0;\n\tfloat noise = noiseStack(noiseCoord, 3, 0.4);\n\tfloat flames = pow(ypartClipped, 0.3 * xfuel) * pow(noise, 0.3 * xfuel);\n\tfloat f = ypartClippedFalloff * pow(1.0 - flames * flames * flames, 8.0);\n\t//float fff = f * f * f;\n//\tfloat3 fire = 1.5 * float3(f, fff, fff * fff);\n\tfloat fire = 1.5 *  (pow(f,3.)+f);\n\t// smoke\n    //float smokeNoise = 0.5+snoise(0.4*position+timing*vec3(1.0,1.0,0.2))/2.0;\n\tfloat smokeNoise = .5 + snoise(0.4 *(position+float3(0.,1.,0.)) + timing * float3(1.,.8,-.5))/2.;\n//\tfloat3 smoke = float3(0.3 * pow(xfuel, 3.0) * pow(uv.y, 2.0) * (smokeNoise + 0.4 * (1.0 - noise)));\n\tfloat smoke = 0.6 * pow(xfuel, 3.0) * pow(uv.y, 2.0) * (smokeNoise + 0.4 * (1.0 - noise));\n\t// sparks\n\tfloat sparkGridSize = 30.0;\n\tfloat2 sparkCoord = uv*300. - float2(.0, 190.0 * realTime);\n\tsparkCoord -= 30.0 * noiseStackUV(0.01 * float3(sparkCoord, 30.0 * time), 1, 0.4, 0.1);\n\tsparkCoord += 100.0 * flow.xy;\n\tif (fmod(sparkCoord.y / sparkGridSize, 2.0) < 1.0) sparkCoord.x += 0.5 * sparkGridSize;\n\tfloat2 sparkGridIndex = float2(floor(sparkCoord / sparkGridSize));\n\tfloat sparkRandom = prng(sparkGridIndex);\n\tfloat sparkLife = min(10.0 * (1.0 - min((sparkGridIndex.y + (190.0 * realTime / sparkGridSize)) / (24.0 - 20.0 * sparkRandom), 1.0)), 1.0);\n\tfloat sparks = 0.;\n\tif (sparkLife > 0.) {\n\t\tfloat sparkSize = xfuel * xfuel * sparkRandom * .04;\n\t\tfloat sparkRadians = 999.0 * sparkRandom * 2.0 * PI + 2.0 * time;\n\t\tfloat2 sparkCircular = float2(sin(sparkRadians), cos(sparkRadians));\n\t\tfloat2 sparkOffset = (0.5 - sparkSize) * sparkGridSize * sparkCircular;\n\t\tfloat2 sparkfmodulus = fmod(sparkCoord + sparkOffset, sparkGridSize) - float2(.5,.5)* sparkGridSize;\n\t\tfloat sparkLength = length(sparkfmodulus);\n\t\tfloat sparksGray = max(0.0, 1.0 - sparkLength / (sparkSize * sparkGridSize));\n\t\tsparks = sparkLife * sparksGray;// * float3(1.0, 0.3, 0.0);\n\t}\n\treturn float2(max(fire, sparks), smoke);\n}\n\n//float iTime;};Func f; return f.res(tc, t);\n\nvoid mainImage(out float4 fragColor, in float2 fragCoord) {\n    float2 uv = fragCoord.xy/iResolution.xy;\n    float2 o = res(uv, iTime);\n    fragColor = o.x*vec4(1.,.5,.0,1.)+vec4(.9,.8,.7,1.)*o.y;\n}","name":"Image","description":"","type":"image"}]}