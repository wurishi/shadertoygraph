{"ver":"0.1","info":{"id":"4XtXDf","date":"1719716602","viewed":79,"name":"Spyral","username":"diggingnebula8","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 finalImage, vec2 texCoords) {\n    // Screen resolution\n    vec3 screenRes = iResolution;\n\n    // Position vector\n    vec3 o;\n\n    // Current time\n    float time = iTime;\n\n    // Spiral pattern control variables\n    float spiralFactor = 0.1;\n    float scale = 3.0;\n    float brightness = 2.0;\n    float maxExponent = 25.0;\n    float angleOffset = 0.314;\n    float modulationFactor = 0.1;\n    float fractOffset = 0.5;\n    float vectorScale = 1000.0;\n    vec4 rotationConstants = vec4(0.0, 11.0, 33.0, 0.0);\n    vec3 color1 = vec3(0.84, 0.74, 0.87);\n    vec3 color2 = vec3(0.9, 0.9, 0.6);\n\n    // Loop through exponent values\n    for (float exponent = 0.0; exponent < maxExponent; exponent++) {\n\n        // Modulus operation for z to create layers\n        o.z = mod(o.z, modulationFactor) - modulationFactor;\n\n        // Update x based on time and scale\n        float x = spiralFactor - time * scale;\n\n        // Transform the o.xy vector using rotation matrix\n        vec2 transformedVector = o.xy *= mat2(\n            cos(rotationConstants + round((atan(o.y, o.x) - x) / angleOffset) * angleOffset + x)\n        );\n        o.x = fract(transformedVector.x) - fractOffset;\n\n        // Calculate length of the vector\n        float vectorLength = length(o);\n\n        // Increment spiral factor\n        float timeScaleIncrement = vectorLength / scale;\n        spiralFactor += timeScaleIncrement;\n\n        // Calculate cosine and sine for color manipulation\n        float cosValue = cos(spiralFactor + time * scale);\n        float sinValue = sin(spiralFactor + time * scale);\n\n        // Color mask calculation\n        float colourMask = clamp(cos(time * scale) + sin(time * scale), 0.0, 1.0);\n\n        // Add to final image using brightness and vector length\n        finalImage += (brightness + cosValue) * (brightness + sinValue) / (vectorLength * vectorScale);\n\n        // Normalize and scale the position vector\n        o = spiralFactor * normalize(\n            vec3((texCoords + texCoords - screenRes.xy) * mat2(cos(rotationConstants + time * scale)), screenRes.y)\n        );\n\n        // Clamp final image values\n        finalImage = clamp(finalImage, 0.0, 1.0);\n\n        // Define two colors for mixing\n        vec3 mixedColor1 = finalImage.xyz * color1;\n        vec3 mixedColor2 = finalImage.xyz * color2;\n\n        // Mix colors based on the color mask\n        finalImage = vec4(mix(mixedColor1, mixedColor2, colourMask), 0.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}