{"ver":"0.1","info":{"id":"tdlfz7","date":"1634583437","viewed":93,"name":"Rule 30+Game of Life","username":"mgrant8164","description":"Essentially a replica of https://www.youtube.com/watch?v=IK7nBOLYzdE\nPoster of the YouTube video also posted his source code here (though this is not based on it): https://github.com/elliotwaite/rule-30-and-game-of-life","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["game","automata","life","cellular","30","rule"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(texture(iChannel0, vec2(fragCoord / iResolution.xy)).rgb, 1.);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash1(float n) {\n    return fract(sin(n)*138.5453123);\n}\n\nint Cell(ivec2 p) {\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    int f;\n    float last_set = texelFetch(iChannel0, px, 0 ).g;\n    \n    if(fragCoord.y / iResolution.y > 0.5) {\n        //game of life\n        const int table[8] = int[](0,0,1,3,0,0,0,0);\n\n        int k =   Cell(px+ivec2(-1,-1)) + Cell(px+ivec2(0,-1)) + Cell(px+ivec2(1,-1))\n                + Cell(px+ivec2(-1, 0))                        + Cell(px+ivec2(1, 0))\n                + Cell(px+ivec2(-1, 1)) + Cell(px+ivec2(0, 1)) + Cell(px+ivec2(1, 1));\n        f = (Cell(px) | 2) & table[k];\n\n        //if( iFrame==0 ) f = int(step(0.5, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1))) + 0.5);\n    } else {\n        //rule 30\n        //initial condition\n        \n        \n        if(px.y == 0)\n        \tf = Cell(px+ivec2(-1, 0)) ^ (Cell(px) | Cell(px+ivec2(1, 0)));\n        else\n            f = Cell(px + ivec2(0, -1));\n        \n        if(iFrame == 0 && px == ivec2(iResolution.x / 2., 0)) f = 1;\n    }\n    \n    if(f > 0)\n        last_set = 0.0;\n    else\n        last_set += iTimeDelta;\n    \n    if(iFrame == 0) last_set = 100000000000.;\n    \n    fragColor = vec4(f, last_set, 0., 0.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//vec3 color_gradient(float time) {\n    \n//}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = 0.25 * vec4(texture(iChannel1, vec2(fragCoord / iResolution.xy)).xxx, 1.0);\n    fragColor.rgb = vec3(texture(iChannel0, vec2(fragCoord / iResolution.xy)).xxx);\n    if(fragColor.r < 1.)\n        fragColor.rgb = mix(vec3(1., 0., 1.), vec3(0.0, 0.0, 0.4), pow(texture(iChannel0, vec2(fragCoord / iResolution.xy)).y, 2.) / 10.);\n    \n    /*\n\tif(uv.y < 0.1)\n    {\n        fragColor = vec4(mix(vec3(1., 0., 1.), vec3(0.0, 0.0, 0.4), uv.x), 1.);\n    }/**/\n}","name":"Buffer B","description":"","type":"buffer"}]}