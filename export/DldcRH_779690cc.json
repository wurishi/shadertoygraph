{"ver":"0.1","info":{"id":"DldcRH","date":"1698902870","viewed":25,"name":"Fork Silly Pump tracyli 813","username":"tracyli","description":"Happy Hallowe'en","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["itsabird","itsaplane","noitsapumpkin"],"hasliked":0,"parentid":"DsKfDd","parentname":"Silly Pumpkin 2023"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n// Draw a Jack'o Lantern\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\n    // Background\n    vec3 col = vec3(0.);\n    // ground\n    col = mix(col, 0.5*vec3(150./255., 75./255., 0.), 1.-smoothstep(0.19, 0.25, uv.y));\n    \n    // Body \n    col = mix(col, vec3(0.9,0.5,0.), smoothstep(0.,0.03, -sdCircle(r, 0.9)));\n    \n    vec3 cInside = vec3(1., 1., 0.);\n    vec3 cInside_ = vec3(1., 0.3, 0.);\n    vec2 rMirrorX = vec2(abs(r.x), r.y); \n    vec2 rMirrorY = vec2(r.x, abs(r.y)); \n    \n    // Carve eyes\n    //float eyes = smoothstep(0.,0.01, -sdEquilateralTriangle(rMirrorX-vec2(0.2, 0.4), 0.2));\n    float eyes = smoothstep(0., 0.1, -sdEllipse(rMirrorX-vec2(0.3,0.3), vec2(0.2,0.1)));\n    float eyes_ = smoothstep(0., 0.01, -sdEllipse(rMirrorX-vec2(0.3,0.3), vec2(0.2,0.1)));\n\n    //float eyes = smoothstep(0., 0.1, -sdEllipse(r-vec2(0.3,0.3), vec2(0.2,0.1)));\n\n    col = mix(col, cInside_, eyes_);\n    col = mix(col, cInside, eyes);\n    \n    // Carve nose\n    //float nose     = smoothstep(0.,0.01, -sdUnevenCapsule(r, 0.15, 0.05, 0.25));\n    float nose = smoothstep(0.,0.1, -sdEquilateralTriangle(r-vec2(0., 0.), 0.2));\n    float nose_ = smoothstep(0.,0.01, -sdEquilateralTriangle(r-vec2(0., 0.), 0.2));\n\n    //float noseSide = smoothstep(0., 0.01, -sdEllipse(r, vec2(0.2,0.1)));\n    //nose = max(nose,noseSide);\n    col = mix(col, cInside_, nose_);\n    col  = mix(col, cInside, nose);\n    \n    // Carve mouth\n    float mouth_ = smoothstep(0., 0.01, -sdEllipse(r-vec2(0.,-0.44), vec2(0.5,0.13)));\n    float mouth = smoothstep(0., 0.1, -sdEllipse(r-vec2(0.,-0.44), vec2(0.5,0.13)));\n    col = mix(col, cInside_, mouth_);\n    col = mix(col, cInside, mouth);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}