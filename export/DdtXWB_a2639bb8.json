{"ver":"0.1","info":{"id":"DdtXWB","date":"1680362472","viewed":59,"name":"A cool Julia Set","username":"phitaylr","description":" a julia set","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float escapeRadius = 16.0;\nconst float escapeRadius2 = escapeRadius * escapeRadius;\nconst int maxIterations = 30;\n\nvec2 ipow2(vec2 v) {\n  return vec2(v.x * v.x - v.y * v.y, v.x * v.y * 2.0);\n}\n\n// Procedural palette generator by Inigo Quilez.\n// See: http://iquilezles.org/articles/palettes/\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n  return a*abs(5.*sin(iTime/10.)+1.) + b * cos(6.28 * (c * t + d));\n}\n\nvec3 paletteColor(float t) {\n  vec3 a = vec3(0.2);\n  vec3 b = vec3(.8);\n  vec3 c = vec3(1.);\n  vec3 d = vec3(0.01, 0.1, .2);\n  return palette(fract(t + 0.5), a, b, c, d);\n}\n\n\nfloat map(float X, float A, float B, float C, float D){\n    return (X-A)/(B-A) * (D-C) + C;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = map(uv.x, 0., 1., -3., 3.);\n    uv.y = map(uv.y, 0., 1., -2.2, 2.2);\n    vec2 mouse = vec2(iMouse.x, iMouse.y)/iResolution.xy;\n    \n    mouse.x = map(mouse.x, 0., 1., -2.8, 1.8);\n    mouse.y = map(mouse.y, 0., 1., -2., 2.);\n    \n    float frame = iTime/1.;\n    \n    vec2 z = uv;\n    vec2 c = vec2(.355+.018*cos(frame), -.355+.018*sin(frame));\n     int iteration;\n\n  // Iterate until either the escape radius or max iteration is exceeded.\n  for (int i = 0; i < maxIterations; i++) {\n    z = ipow2(z) + c;\n    if (dot(z, z) > escapeRadius2) {\n      break;\n    }\n    iteration++;\n  }\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 color = iteration >= maxIterations ? vec3(0.0) : paletteColor(float(iteration) / float(maxIterations));\n//vec3 color = iteration >= maxIterations ?  col :  paletteColor(float(iteration) / float(maxIterations));\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}