{"ver":"0.1","info":{"id":"MtByRz","date":"1507141066","viewed":757,"name":"ReactionDiffusion 4 Field","username":"aiekick","description":"Reaction Diffusion 4","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["reaction","diffusion4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 field(vec2 pos) \n{\n\treturn vec2(cos(pos.x * 0.01 + pos.y * 0.01) + cos(pos.y * 0.05 + iTime), 2.0 * cos(pos.y * 0.01  + iTime * 0.3)) * 0.5;\n}\n\nvec2 cell(vec2 fragCoord, vec2 pixel)\n{\n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy / 1.;\n    //uv += iTime * 0.02;\n    //uv = mod(uv * 2., 1.);// for repeat the texture\n    \n    return texture(iChannel0, uv).rg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = mod(iTime,3.14159*2.);\n    \n    // thanks to shane for this lighting model\n\n    float c = cell(fragCoord, vec2(0,0)).g;\n    float c2 = cell(fragCoord, vec2(-1)/*vec2(cos(a),sin(a))*/).g;\n    \n    vec3 col = vec3(1)*c*c*1.5;\n    col += vec3(.2, .4, 1)*max(c2*c2*c2 - c*c*c, 0.0)*iResolution.y*.2;\n    //col += vec3(field(fragCoord/iResolution.xy),0);\n    \n    fragColor = sqrt(vec4(col, 1.));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\n#define GridCellSize 20.\n\nvec2 gridCell(vec2 pos) \n{\n\treturn (floor(pos / GridCellSize) + 0.5) * GridCellSize;\n}\n\nvec2 field(vec2 pos) \n{\n\treturn vec2(cos(pos.x * 0.01 + pos.y * 0.01) + cos(pos.y * 0.05 + iTime), 2.0 * cos(pos.y * 0.01  + iTime * 0.3)) * 0.5;\n}\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float z = 0.001;\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(z, -st), dir, a) +\n        cell(fragCoord, vec2(z, st), dir, a) +\n        cell(fragCoord, vec2(st, z), dir, a) +\n        cell(fragCoord, vec2(-st, z), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(z, z), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n    \n   \tif (iFrame < 30)\n    {\n        fragColor = texture(iChannel1, uv);\n        //uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    \t//if (length(uv) < 0.05)\n\t\t//\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv)); \n    }\n    else if (iMouse.z > 0.0)\n\t{\n\t\tfragColor = texture(iChannel0, uv);\n        if (length(uv-mo) < 0.01)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv-mo)); \n\t}\n    else\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 gc = gridCell(uv);\n        vec2 fi = field(gc);\n        dir = normalize(fi);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = 0.05;\n        float killCoef = 0.062;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .8, .2);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\n#define GridCellSize 20.\n\nvec2 gridCell(vec2 pos) \n{\n\treturn (floor(pos / GridCellSize) + 0.5) * GridCellSize;\n}\n\nvec2 field(vec2 pos) \n{\n\treturn vec2(cos(pos.x * 0.01 + pos.y * 0.01) + cos(pos.y * 0.05 + iTime), 2.0 * cos(pos.y * 0.01  + iTime * 0.3)) * 0.5;\n}\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float z = 0.001;\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(z, -st), dir, a) +\n        cell(fragCoord, vec2(z, st), dir, a) +\n        cell(fragCoord, vec2(st, z), dir, a) +\n        cell(fragCoord, vec2(-st, z), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(z, z), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 gc = gridCell(uv);\n        vec2 fi = field(gc);\n        dir = normalize(fi);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = 0.05;\n        float killCoef = 0.062;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .8, .2);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\n#define GridCellSize 20.\n\nvec2 gridCell(vec2 pos) \n{\n\treturn (floor(pos / GridCellSize) + 0.5) * GridCellSize;\n}\n\nvec2 field(vec2 pos) \n{\n\treturn vec2(cos(pos.x * 0.01 + pos.y * 0.01) + cos(pos.y * 0.05 + iTime), 2.0 * cos(pos.y * 0.01  + iTime * 0.3)) * 0.5;\n}\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float z = 0.001;\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(z, -st), dir, a) +\n        cell(fragCoord, vec2(z, st), dir, a) +\n        cell(fragCoord, vec2(st, z), dir, a) +\n        cell(fragCoord, vec2(-st, z), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(z, z), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 gc = gridCell(uv);\n        vec2 fi = field(gc);\n        dir = normalize(fi);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = 0.05;\n        float killCoef = 0.062;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .8, .2);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\n#define GridCellSize 20.\n\nvec2 gridCell(vec2 pos) \n{\n\treturn (floor(pos / GridCellSize) + 0.5) * GridCellSize;\n}\n\nvec2 field(vec2 pos) \n{\n\treturn vec2(cos(pos.x * 0.01 + pos.y * 0.01) + cos(pos.y * 0.05 + iTime), 2.0 * cos(pos.y * 0.01  + iTime * 0.3)) * 0.5;\n}\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b) \n{\n    float z = 0.001;\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(z, -st), dir, a) +\n        cell(fragCoord, vec2(z, st), dir, a) +\n        cell(fragCoord, vec2(st, z), dir, a) +\n        cell(fragCoord, vec2(-st, z), dir, a) +\n        cell(fragCoord, vec2(-st, -st), dir, b) +\n        cell(fragCoord, vec2(-st, st), dir, b) +\n        cell(fragCoord, vec2(st, -st), dir, b) +\n        cell(fragCoord, vec2(st, st), dir, b) -\n        cell(fragCoord, vec2(z, z), dir, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        vec2 gc = gridCell(uv);\n        vec2 fi = field(gc);\n        dir = normalize(fi);\n        \n        vec2 diffusionCoef = vec2(1,.3);\n        float feedCoef = 0.05;\n        float killCoef = 0.062;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1.);\n        vec2 lp = laplacian2D(fragCoord, dir, .8, .2);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n","name":"Buf D","description":"","type":"buffer"}]}