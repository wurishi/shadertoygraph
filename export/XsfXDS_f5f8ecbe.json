{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//////////////////\n// XBE\n// Halftone Sketch rendering\n\n///////\n// Distance Function and raymarching from IQ\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus882( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xy)-t.x,p.z);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus883( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.yz)-t.x,p.x);\n  return length8(q)-t.y;\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( sdSphere(    pos-vec3( 1.0,0.25, -0.5), 0.5 ), 46.9 ) );\n    res = opU( res, vec2( opS(\n\t\t             udRoundBox(  pos-vec3(-1.0,0.4, -0.5), vec3(0.30),0.1),\n\t                 sdSphere(    pos-vec3(-1.0,0.4, -0.5), 0.5)), 13.0 ) );\n//\tres = opU( res, vec2( sdTorus82(   pos-vec3( 0.0,0.25, 2.0), vec2(0.20,0.05) ),50.0 ) );\n\tres = opU( res, vec2( sdTorus88(   pos-vec3(0.0,0.5, 1.0), vec2(0.30,0.10) ),43.0 ) );\n\tres = opU( res, vec2( sdTorus882(   pos-vec3(0.0,0.5, 1.0), vec2(0.30,0.10) ),43.0 ) );\n\tres = opU( res, vec2( sdTorus883(   pos-vec3(0.0,0.5, 1.0), vec2(0.30,0.10) ),43.0 ) );\n//\tres = opU( res, vec2( 0.5*sdTorus82( opTwist(pos-vec3(-0.95,0.45, -0.95)),vec2(0.40,0.05)), 46.7 ) );\n    return res;\n}\n\n\n\n\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd )\n{\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<60; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;//break;\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t    m = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n\t\tif( t>maxt ) break;\n\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += 0.02;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 inc, out float dist, out vec3 nor )\n{ \n    vec3 col = vec3(0.0);\n    vec2 res = castRay(ro,rd,20.0);\n    float t = res.x;\n\tfloat m = res.y;\n    if ( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        nor = calcNormal( pos );\n\n\t\t//col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\tcol = vec3(0.65) + 0.35*sin( 10.*vec3(0.05,0.08,0.10)*(m+1.0) );\n\t\t\n        float ao = calcAO( pos, nor );\n\n\t\tvec3 lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n\t\tfloat sh = 1.0;\n\t\tif( dif>0.02 ) { sh = softshadow( pos, lig, 0.02, 10.0, 7.0 ); dif *= sh; }\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 0.20*amb*vec3(0.10,0.11,0.13)*ao;\n        brdf += 0.20*bac*vec3(0.15,0.15,0.15)*ao;\n        brdf += 1.20*dif*vec3(1.00,0.90,0.70);\n\n\t\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n\t\tfloat spe = sh*pow(pp,16.0);\n\t\tfloat fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n\t\tcol = col*brdf + vec3(1.0)*col*spe + 0.2*fre*(0.5+0.5*col);\n\t\t\n\t}\n\n\tdist = t;\n\t// Edges\n\tfloat d = 1.0;\n\tvec2 rest = castRay(ro,rd+inc,20.0);\n\td = rest.x-res.x < 0.09*res.x ? 1. : 0.;\n   \trest = castRay(ro,rd-inc,20.0);\n\td *= rest.x-res.x < 0.09*res.x ? 1. : 0.;\n\tcol *= d;\n\tcol *= exp( -0.01*t*t );\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\n// procedural noise from IQ\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\n/////////\n\nfloat aastep(float frequency, float threshold, float value)\n{\n\tfloat afwidth = frequency / 512.;\n\treturn smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nfloat hetched(vec2 p, vec2 q)\n{ \n\treturn (1.45*abs(p.y) + 0.25*noise(0.333*q));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\tvec3 inc = vec3(1.,0.,0.);\n\tinc.xy /= iResolution.xy;\n\tinc.x *= iResolution.x/iResolution.y;\n\t\t \n\tfloat Time = 0.25 * (15.0 + iTime);\n\n\t// camera\t\n\tvec3 ro = vec3( 3.0*cos(Time), 1.5, 3.0*sin(Time) );\n\tvec3 ta = vec3( -0.0, 0.15, 0.0 );\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n\tfloat dist;\n\tvec3 nor = vec3(0.,0.,0.);\n    vec3 col = render( ro, rd, inc, dist, nor );\n\tcol = 1.1*sqrt( col );\n\n\t/////////////////////////////\t\n\t// Sketching from here\n\tfloat gray = dot( col, vec3(0.299, 0.587, 0.114) );\n\tvec3 orig = col;\n\tcol = vec3(gray, gray, gray);\n\t//\n\tfloat _Angle = 3.14159265/6.0; //PI/6.0;\n\tmat2 rotmat = mat2(cos(_Angle), -sin(_Angle), sin(_Angle), cos(_Angle));\n\tvec2 qr = rotmat * p;\n//\tfloat frequency = 392.0*(1.0+0.01*nor.x);\n\tfloat frequency = iResolution.y*(1.1+0.01*nor.x);\n\tqr *= frequency;\n\tfloat hd = hetched(2.0*fract(qr) - 1.0, qr);\n\t//\n\tfloat radius = 1.0-gray;\n\t//\n\tvec3 white = vec3(1.0, 1.0, 1.0);\n\tvec3 black = vec3(0.0, 0.0, 0.0);\n\tcol *= mix( black, white, aastep(frequency, radius, hd) );\n\t\n\tcol += 0.35*vec3(1.-exp(-128.*dist));\n\tfloat noi = noise(512.0*p);\n\tcol += vec3(0.05+0.25*noi) ;\n\tcol *= mix(vec3( 0.9592, 0.8088, 0.6284 ), orig, 0.25);\n\n    fragColor=vec4( clamp(col,0.,1.), 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsfXDS","date":"1406117172","viewed":783,"name":"Hetchy Sketchy","username":"xbe","description":"Post-processing hetched rendering using halftoning. 3D objects raymarched reusing iq samples. Looks better in small smize, halftone lines frequency and contrast must be improved in fullscreen.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","postprocessing","halftone"],"hasliked":0,"parentid":"","parentname":""}}