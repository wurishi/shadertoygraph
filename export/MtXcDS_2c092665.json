{"ver":"0.1","info":{"id":"MtXcDS","date":"1506214456","viewed":225,"name":"manelbrautworst","username":"crertel","description":"greetz to numinit, distractions, dubvirus, and the 76krew","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["fractalmandelbrotaudio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lssSDf","filepath":"https://soundcloud.com/dubvirusmusic/sylvan","previewfilepath":"https://soundcloud.com/dubvirusmusic/sylvan","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 20\n#define NUM_FRACTALS 10\n\n#define THRESHOLD 2.\n#define COLOR_THRESHOLD 0.\n\nvec2 f(vec2 n, vec2 c) {\n    return vec2(n.x * n.x - n.y * n.y, 2. * n.x * n.y) + c;\n}\n\nvec3 hsv(float h, float s, float v) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(h + K.xyz) * 6.0 - K.www);\n    return v * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), s);\n}\n\nvec3 mandelbrot(vec2 originalUv, int idx) {\n    float order = float(32 * idx);\n    \n    vec2 uv = originalUv - vec2(0.5, 0.5);\n    uv = uv + (vec2(iMouse.x, iMouse.y) / iResolution.xy);\n    uv = uv * exp(float(idx-1));\n    \n    float fft  = texture( iChannel0, vec2(originalUv.x,0.0) ).x; \n    float fftHi  = texture( iChannel0, vec2(originalUv.y,0.0) ).x; \n    float amplitude  = texture( iChannel0, vec2(originalUv.y,1.0) ).x; \n\n    float magnitude = length(vec3(fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft) + 0.01;\n    \n    //uv = uv * abs(exp(magnitude/4.));// * (abs(sqrt(iTime)));\n    uv = uv * abs(tanh(magnitude));// * (abs(sqrt(iTime)));\n    uv.y += fftHi;\n    \n    float rotation = (fft/20.0) * float(idx + 1);\n    //float rotation = (amplitude/10.0) * float(idx + 1);\n    \n    uv = uv * mat2(-cos(rotation), sin(rotation), sin(rotation), cos(rotation));\n    //uv = uv * abs((sin(iTime) + 1.) / 128. + 0.01);    \n    uv = uv * abs((amplitude + 1.) / 128. + 0.01);    \n\n    int iter = 0;\n    vec2 val = normalize(vec2(magnitude, -magnitude)) / 4.;\n    \n    for (int i = 0; i < ITERATIONS; i++) {\n        val = f(val, uv);\n\n        if (length(val) > THRESHOLD) {\n            iter = i + 1;\n            break;\n        }\n    }\n\n    vec3 color_1 = hsv(\n        float(iter) / float(ITERATIONS) * abs(sin(iTime)),        \n        0.5,\n        float(iter) / float(ITERATIONS) * (abs(cos(iTime)/2.0)+0.5)\n\n    );\n    \n    return color_1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 curColor;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    for (int i = 0; i < NUM_FRACTALS; i++) {\n        float s = float(i) / float(NUM_FRACTALS);\n    \tcurColor = mandelbrot(uv, i);\n        if (length(curColor) > 0.) {\n            break;\n        }\n    }\n    fragColor = vec4(curColor, 1.);\n}\n","name":"Image","description":"","type":"image"}]}