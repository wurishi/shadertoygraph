{"ver":"0.1","info":{"id":"3syGDD","date":"1570144201","viewed":389,"name":"test  Stable Oscillator","username":"nabr","description":"[url=https://www.shadertoy.com/view/4ltfRN] orig shader [/url]","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["test","debug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/3syGDD\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(0);\n    vec2 p = (fragCoord*2.-iResolution.xy)/min(iResolution.x,iResolution.y);\n    //dither https://www.shadertoy.com/view/3tj3DW\n    vec3 dthr = 31.*fract(sin(p.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n    //--------camera\n    vec3 ro = vec3(0,2,0), \n         rd = normalize(vec3(p,-1));\n    //--------raymarch\n    float h = .002;\n\t#define s(_p)dot(_p,vec3(0,2.*sqrt(.125*dot(sin(iTime)+p,p)),0))\n    h+=s(ro + rd * h);\n    h+=s(ro + rd * h);\n    h+=s(ro + rd * h);\n    vec3 pos = ro + h * rd;\n    vec2 e = vec2(-.001,.001);\n    vec3 nor = normalize(e.yxx * s(pos + e.yxx) + e.xxy * s(pos + e.xxy) + e.xyx * s(pos + e.xyx) + e.yyy * s(pos + e.yyy));\n \t//--------texture\n    float z = 1.,f = 0.;\n   \tfor (int j = 0; j < 2; j++){\n        pos.xy *= mat2(1,2,-1,1);\n        vec3 p = pos; \n        p *= 2.;\n\t\tp.x += iTime;        \n    \tfor (float i = .5; i > 0.; i -= .254){\n        float u = floor(p).x + (floor(p).y * 27.);\n        vec4 v = vec4(u, u + 1., u + 27., u + 28.);\n        v = fract(.5 + fract(1.234568  * v) * v * 870.369);\n        f += i * mix(mix(v.x, v.y, fract(p.x)), mix(v.z, v.w, fract(p.x)), fract(p.y));\n        p.xy *= mat2(1.314,-3.14,3.14,1.341) + f * f;\n        }\t\n        pos *= .5;\n        z *= -1.1;   \n    \tf/=z; \n    }\n    //--------shade\n    float tx = clamp(f * f * 2.5, 0., 1.) * 2. - 1.;\n\tcol = sin(nor.y * tx * 1.52 + 1.52) * vec3(.2, 1., .9);\n    col = mix(col,vec3(0, .5, 1), clamp(exp(h * .45 - 5.), 0., 1.));\n    col = clamp(col * 1.25, 0., 1.);\n    col *= pow(smoothstep(0.,.2,(p.x + 1.)*(p.y + 1.)*(p.x - 1.)*(p.y - 1.)),.35);\n    \n    (abs(p.x)<1.||abs(h)<1.)?\n    (fragColor = vec4(col,1.)) \n    :(fragColor = vec4(dthr+vec3(.757),1.));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\r\nvec2 mainSound( in int s,float time)\r\n{\r\n    return mSound(s);\r\n}\r\n\r\n\r\n/*\r\nShadertoy Sound Shader footer with modifications\r\nCopyright 2018 Beautypi\r\n\r\nLicense unknown - please do not copy outside of Shadertoy.  -ttg\r\n\r\n\r\n\r\n// Override Shadertoy's Sound Shader footer: extract integer samples without\r\n// erroroneous floating point conversion\r\n\r\nlayout(location = 0) out vec4 outColor;\r\n\r\nvoid main()\r\n        {\r\n        int s = 512*512*int((iBlockOffset+0.5)*iSampleRate/(512.*512.)) +\r\n                int((gl_FragCoord.x-0.5) + (gl_FragCoord.y-0.5)*512.0);\r\n            vec2 y = mSound( s );\r\n\r\n            // Shadertoy original:\r\n\r\n            //float t = iBlockOffset + ((gl_FragCoord.x-0.5) + (gl_FragCoord.y-0.5)*512.0)/iSampleRate;\r\n            //vec2 y = mainSound( in int samp, t );\r\n\r\n\r\n            vec2 v  = floor((0.5+0.5*y)*65536.0);\r\n            vec2 vl =   mod(v,256.0)/255.0;\r\n            vec2 vh = floor(v/256.0)/255.0;\r\n            outColor = vec4(vl.x,vh.x,vl.y,vh.y);\r\n        }\r\n\r\n// \\\r\n// \\\r\n*/","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"float intfract(int s,float n)\n{\n    //Explanation and copyright : shadertoy.com/view/4ltfRN\n    int sn=int(n),a=s%sn,b=(s/sn);\n    const float MAXF=float(uint(-1))+1.;\n    return fract((float(a)/n)+float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF);\n}\n\nvec2 mSound(int samp)\n{\n    // Prelude and Fugue No. 1 in C major, BWV 846\n    const int n[]=int[](60,64,67,72,76,67,72,76,60,64,67,72,76,67,72,76,60,62,69,74,77,69,74,77,60,62,69,74,77,69,74,77,59,62,67,74,77,67,74,77,59,62,67,74,77,67,74,77,60,64,67,72,76,67,72,76,60,64,67,72,76,67,72,76,60,64,69,76,81,69,76,81,60,64,69,76,81,69,76,81,60,62,66,69,74,66,69,74,60,62,66,69,74,66,69,74,59,62,67,74,79,67,74,79,59,62,67,74,79,67,74,79);\n    \n    int t = samp / int(.2 * iSampleRate);\n    \n    float f, p;\n    f = 440. * exp2(float(n[t % n.length()] - 69) / 12.);\n    f = floor(.2 * f) / .2;\n    p = sin(6.283185 * intfract(samp, iSampleRate / f));\n    \n    return vec2(.501, .501) * p;\n}","name":"Common","description":"","type":"common"}]}