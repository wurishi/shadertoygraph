{"ver":"0.1","info":{"id":"XlGfRz","date":"1541610066","viewed":237,"name":"hex","username":"tbodt","description":"hex filter, with wave function or something","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\nfloat pixelsPerCell = 3.;\nfloat waveRadius = 100.;\n\nfloat wave(in vec2 pixel) {\n\tfloat radSq = waveRadius*waveRadius;\n    vec2 delta = pixel;\n    float deltaSq = delta.x*delta.x + delta.y*delta.y;\n    return sin(M_PI/2.*deltaSq/radSq);\n}\n\nvec4 img(in vec2 pixel) {\n    //return texture2D(iChannel0, pixel/iResolution.xy);\n    return vec4(vec3(wave(pixel)), 1.);\n}\n\nvec2 hex_center(in vec2 pixel, in float size);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = img(hex_center(fragCoord, pixelsPerCell));\n    //float fadeSeconds = 2.;\n    //float fade = 1.-abs(mod(iTime/fadeSeconds, 2.)-1.);\n    //fragColor = fade * img(hex_center(fragCoord, pixelsPerCell))\n    //    \t+ (1.-fade) * img(fragCoord);\n}\n\n// hex bullshit, pls ignore [1]\nvec3 axial_to_cube(in vec2 hex) {\n    float x = hex.x;\n    float z = hex.y;\n    float y = -x-z;\n    return vec3(x,y,z);\n}\nvec2 cube_to_axial(in vec3 cube) {\n    return vec2(cube.x, cube.z);\n}\nvec3 cube_round(in vec3 cube) {\n    float rx = round(cube.x);\n    float ry = round(cube.y);\n    float rz = round(cube.z);\n    float x_diff = abs(rx - cube.x);\n    float y_diff = abs(ry - cube.y);\n    float z_diff = abs(rz - cube.z);\n    if (x_diff > y_diff && x_diff > z_diff)\n        rx = -ry-rz;\n    else if (y_diff > z_diff)\n        ry = -rx-rz;\n    else\n        rz = -rx-ry;\n    return vec3(rx, ry, rz);\n}\nvec2 hex_round(in vec2 hex) {\n    return cube_to_axial(cube_round(axial_to_cube(hex)));\n}\nvec2 pixel_to_axial(in vec2 pixel, in float size) {\n    float q = (2./3. * pixel.x) / size;\n    float r = (-1./3. * pixel.x + sqrt(3.)/3. * pixel.y) / size;\n    return vec2(q,r);\n}\nvec2 axial_to_pixel(in vec2 hex, in float size) {\n    float x = size * 3./2. * hex.x;\n    float y = size * (sqrt(3.)/2. * hex.x + sqrt(3.) * hex.y);\n\treturn vec2(x,y);\n}\nvec2 hex_center(in vec2 pixel, in float size) {\n    return axial_to_pixel(hex_round(pixel_to_axial(pixel, size)), size);\n}\n","name":"Image","description":"","type":"image"}]}