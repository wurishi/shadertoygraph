{"ver":"0.1","info":{"id":"st2SRK","date":"1628120985","viewed":162,"name":"Inverse Julia Fractal","username":"Eriksonn","description":"julia fractal using Az^2 - 0.04A/z^2 + C\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Mult(vec2 A,vec2 B)\n{\n    return vec2(A.x*B.x-A.y*B.y,A.x*B.y+A.y*B.x);\n}\nvec2 Div(vec2 A, vec2 B)\n{\n    return vec2(A.x*B.x+A.y*B.y,-A.x*B.y+A.y*B.x)/dot(B,B);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 4.5*(fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec2 Z = vec2(uv);\n    \n    float angle1=iTime*0.2;\n    float angle2=angle1*0.4;\n    vec2 C = vec2(cos(angle2),sin(angle2))*0.30;\n    vec2 A=vec2(cos(angle1),sin(angle1));\n    vec2 B=-A*0.04;\n    fragColor = vec4(1,0,1,0);\n    vec2 Der =vec2(1,0);\n    for(int i =0;i<20;i++)\n    {\n        Z=Mult(A,Mult(Z,Z))+Div(B,Mult(Z,Z))+C;\n        Der =2.0*Mult(Der,Mult(A,Z)-Div(B,Mult(Z,Mult(Z,Z))));\n        float D = Z.x*Z.x+Z.y*Z.y;\n        if(D>20.0)\n        {\n            float e=-2.0+log(log(D)/(log(2.0)*2.0))/log(2.0);\n            float a=(float(i)-e)/20.0;\n            a=pow(a,0.8);\n            fragColor=vec4(a*a,0,a,1);\n            return;\n        }\n    }\n    float d = Der.x*Der.x+Der.y*Der.y;\n    d=pow(d,0.15);\n    fragColor = vec4(1,0,1,0)*d+vec4(0.3,0.2,0.8,0)*(1.0-d);\n}","name":"Image","description":"","type":"image"}]}