{"ver":"0.1","info":{"id":"wtVSDh","date":"1582758501","viewed":799,"name":"Wireframe rasterizer","username":"GCScholar","description":"A wireframe rasterizer that implements the OpenGL transformations from object space to the viewport. Good exercise to learn how a vertex makes its way to the screen :)","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["rasterizer","opengl","graphicpipeline","3dmesh","loadmesh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// An attempt to write the OpenGL pipeline Object->Model->View->Clip->Perspective->Screen. \n// It's quite slow even for a simple object due to all the vertices transforms\n// are computed in every fragment.\n// \n//\n\n\n// Get a linear index in the image from uv coord \nint uvToLinearCoord(vec2 uv) \n{\n\treturn int(((uv.y-0.5) * iResolution.x) + uv.x-0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\t\n    fragCoordGlobal = fragCoord;\n \tviewport_width = iResolution.x; \n\tviewport_eighth = iResolution.y;\n    \n\tfloat f = 0.0;\n    for(int i = 0; i<Mesh_Faces.length()/3; i++) \n    {\n        vec2 v_w[3];\n        \n        for(int j=0; j<3; j++) \n        {\n            // Fetch vertex from Buffer A\n        \tint vi = Mesh_Faces[3*i+j];\n            vec2 uv = vec2(mod(float(vi), iResolution.x) + 0.5, float(vi) / iResolution.x - 0.5) / iResolution.xy; \n          \n            v_w[j] = texture(iChannel0, uv).xy;\n        }       \n        \n        // Backface culling in NDC space\n        vec2 e0 = v_w[0]-v_w[1], e1 = v_w[2]-v_w[1];\n        if(e0.x*e1.y - e0.y*e1.x <0.0) continue;\n\n        f += drawTriangle(v_w[0], v_w[1], v_w[2]);\n    }\n        \n    fragColor = vec4(f, f, f, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const vec3 Mesh_Vertices[189] =  vec3[189](\n  vec3(0.999998927116394,-0.30858349800109863,2.500000238418579),\n  vec3(0.9577124118804932,-0.509706974029541,2.51639986038208),\n  vec3(0.7661495804786682,-0.6085837483406067,-1.9999996423721313),\n  vec3(0.7198773622512817,-0.28494563698768616,-1.8158639669418335),\n  vec3(0.09875283390283585,-0.42291247844696045,-4.143911838531494),\n  vec3(0.09875283390283585,-0.39425522089004517,-4.143911838531494),\n  vec3(1.0060056447982788,-0.3863033056259155,2.6944239139556885),\n  vec3(1.0060056447982788,-0.4308636784553528,2.6944239139556885),\n  vec3(1.006005048751831,-0.38630324602127075,3.892841339111328),\n  vec3(1.006005048751831,-0.430863618850708,3.892841339111328),\n  vec3(0.3216000497341156,-0.5585837960243225,-3.3333334922790527),\n  vec3(0.23924507200717926,-0.25858378410339355,-3.6666667461395264),\n  vec3(0.6177716851234436,-0.6085837483406067,-2.3333332538604736),\n  vec3(0.5000001788139343,-0.5085836052894592,-0.29999980330467224),\n  vec3(0.3350621461868286,-0.8085837960243225,-2.69468355178833),\n  vec3(0.09120448678731918,-0.42291247844696045,-4.143911838531494),\n  vec3(1.0060051679611206,-0.38630327582359314,3.732440710067749),\n  vec3(0.2677505910396576,-0.6421147584915161,-3.3333334922790527),\n  vec3(0.41583606600761414,-0.758583664894104,-2.0280168056488037),\n  vec3(3.9999990463256836,-0.42637115716934204,2.5000014305114746),\n  vec3(3.9999990463256836,-0.39079558849334717,2.5000014305114746),\n  vec3(3.9999992847442627,-0.39079564809799194,1.4000016450881958),\n  vec3(3.9999992847442627,-0.4263712167739868,1.4000016450881958),\n  vec3(1.5019543170928955,-0.42637142539024353,-0.3631219267845154),\n  vec3(1.5019543170928955,-0.39079585671424866,-0.3631219267845154),\n  vec3(4.099998950958252,-0.5085833668708801,2.500001907348633),\n  vec3(4.099998950958252,-0.3085833787918091,2.500001907348633),\n  vec3(4.09999942779541,-0.30858343839645386,1.4000016450881958),\n  vec3(4.09999942779541,-0.5085834264755249,1.4000016450881958),\n  vec3(4.029999732971191,-0.4485834240913391,1.20000159740448),\n  vec3(4.029999732971191,-0.36858344078063965,1.20000159740448),\n  vec3(4.069999694824219,-0.4485834240913391,1.20000159740448),\n  vec3(4.069999694824219,-0.36858344078063965,1.20000159740448),\n  vec3(0.4562229514122009,-0.008583714254200459,-1.5999999046325684),\n  vec3(0.6518319845199585,-0.032221801578998566,-1.4788991212844849),\n  vec3(2.204422950744629,-0.430863618850708,3.4933695793151855),\n  vec3(2.204422950744629,-0.38630324602127075,3.4933695793151855),\n  vec3(1.9381076097488403,-0.4308635890483856,4.159156322479248),\n  vec3(1.9381076097488403,-0.38630321621894836,4.159156322479248),\n  vec3(0.79999840259552,-0.008583465591073036,3.7722296714782715),\n  vec3(0.37499919533729553,-0.008583566173911095,1.8934086561203003),\n  vec3(0.12499924004077911,-0.5085836052894592,1.8934085369110107),\n  vec3(0.37499919533729553,-0.5085835456848145,1.8934086561203003),\n  vec3(0.24999873340129852,-0.574462890625,3.1092312335968018),\n  vec3(0.15586517751216888,-0.5482740998268127,3.1092312335968018),\n  vec3(0.5165359377861023,-0.4668540358543396,3.109231472015381),\n  vec3(0.5165358781814575,-0.05031295865774155,3.109231472015381),\n  vec3(0.24999871850013733,0.06064065918326378,3.1092312335968018),\n  vec3(0.15664497017860413,0.031730882823467255,3.1092312335968018),\n  vec3(0.12499921768903732,-0.008583576418459415,1.8934085369110107),\n  vec3(0.06637457758188248,-0.04048542305827141,3.1092312335968018),\n  vec3(0.12499846518039703,-0.6085835099220276,3.7722294330596924),\n  vec3(0.24999848008155823,-0.6433596014976501,3.7722294330596924),\n  vec3(0.3749984800815582,-0.6085834503173828,3.7722296714782715),\n  vec3(0.06637459993362427,-0.4766816198825836,3.1092312335968018),\n  vec3(0.5829114317893982,-0.008583473972976208,3.7722296714782715),\n  vec3(0.37499845027923584,0.09141650795936584,3.7722296714782715),\n  vec3(0.24999843537807465,0.130126491189003,3.7722294330596924),\n  vec3(0.12499844282865524,0.09141649305820465,3.7722294330596924),\n  vec3(0.06637430191040039,-0.04048539325594902,3.7722294330596924),\n  vec3(0.06637432426214218,-0.47668159008026123,3.7722294330596924),\n  vec3(0.1558649092912674,-0.548274040222168,3.7722294330596924),\n  vec3(0.24999846518039703,-0.5744628310203552,3.7722294330596924),\n  vec3(0.5165356397628784,-0.4668540060520172,3.7722296714782715),\n  vec3(0.5165355801582336,-0.05031292885541916,3.7722296714782715),\n  vec3(0.24999845027923584,0.060640688985586166,3.7722294330596924),\n  vec3(0.15664470195770264,0.03173091262578964,3.7722294330596924),\n  vec3(0.49999919533729553,-0.5085835456848145,1.8934086561203003),\n  vec3(0.9999989867210388,-0.5085835456848145,2.500000238418579),\n  vec3(0.963116466999054,-0.43543314933776855,2.6955065727233887),\n  vec3(0.582911491394043,-0.5085834264755249,3.7722296714782715),\n  vec3(1.0060051679611206,-0.4308636486530304,3.732440710067749),\n  vec3(1.0060055255889893,-1.503148078918457,3.053487539291382),\n  vec3(0.9634772539138794,-0.4376161992549896,3.497551918029785),\n  vec3(1.0060051679611206,-1.3737640380859375,3.7760844230651855),\n  vec3(0.9631163477897644,-1.5077173709869385,3.054570198059082),\n  vec3(1.0060051679611206,-0.4308636486530304,3.497551918029785),\n  vec3(0.9634770750999451,-1.380516767501831,3.7760844230651855),\n  vec3(0.9999991655349731,-0.308583527803421,2.0556347370147705),\n  vec3(0.9999992251396179,-0.5085835456848145,2.0556347370147705),\n  vec3(0.7661495208740234,-0.30858373641967773,-1.9999996423721313),\n  vec3(0.4562229812145233,-0.03222181275486946,-1.6315174102783203),\n  vec3(0.03939760476350784,-0.28494566679000854,-1.8158643245697021),\n  vec3(0.6853751540184021,-0.008583704940974712,-1.5999996662139893),\n  vec3(0.039397452026605606,-0.032221823930740356,-1.478899359703064),\n  vec3(0.03939766436815262,-0.28494566679000854,-1.968482494354248),\n  vec3(0.03939751535654068,-0.03222183138132095,-1.6315175294876099),\n  vec3(0.7198774218559265,-0.28494563698768616,-1.9684821367263794),\n  vec3(0.6518320441246033,-0.03222180902957916,-1.6315172910690308),\n  vec3(-7.602469622725039e-07,-0.5085836052894592,1.8934085369110107),\n  vec3(-1.000001072883606,-0.3085836172103882,2.499999761581421),\n  vec3(-0.9577144384384155,-0.509706974029541,2.516399383544922),\n  vec3(1.5099125505457778e-07,-0.6179630756378174,-0.29999998211860657),\n  vec3(-0.766147792339325,-0.6085837483406067,-2.000000238418579),\n  vec3(-0.7198758125305176,-0.28494569659233093,-1.8158646821975708),\n  vec3(8.400169235756039e-07,-0.3085837662220001,-2.0),\n  vec3(7.361063012467639e-07,-0.8179631233215332,-1.69468355178833),\n  vec3(1.153741550297127e-06,-0.9179632067680359,-2.69468355178833),\n  vec3(-0.09874936193227768,-0.42291247844696045,-4.143911838531494),\n  vec3(-0.09874936193227768,-0.39425522089004517,-4.143911838531494),\n  vec3(1.7297636532020988e-06,-0.39425522089004517,-4.143911838531494),\n  vec3(1.7310163684669533e-06,-0.42291247844696045,-4.143911838531494),\n  vec3(-1.0060077905654907,-0.3863034248352051,2.6944234371185303),\n  vec3(-1.0060077905654907,-0.43086379766464233,2.6944234371185303),\n  vec3(-1.0060083866119385,-0.3863033652305603,3.89284086227417),\n  vec3(-1.0060083866119385,-0.43086373805999756,3.89284086227417),\n  vec3(-0.32159724831581116,-0.5585837960243225,-3.3333334922790527),\n  vec3(-0.23924200236797333,-0.25858384370803833,-3.6666667461395264),\n  vec3(1.525293555459939e-06,-0.22858384251594543,-3.6666665077209473),\n  vec3(8.760465561863384e-07,-0.8679630756378174,-2.0280168056488037),\n  vec3(-0.6177696585655212,-0.6085838675498962,-2.333333730697632),\n  vec3(-0.49999988079071045,-0.5085837244987488,-0.3000001609325409),\n  vec3(-0.33505988121032715,-0.8085837960243225,-2.69468355178833),\n  vec3(-0.09120101481676102,-0.42291247844696045,-4.143911838531494),\n  vec3(-1.5585519577143714e-06,-0.008583500050008297,3.7722294330596924),\n  vec3(-1.006008267402649,-0.3863033950328827,3.732440233230591),\n  vec3(-0.26774778962135315,-0.6421147584915161,-3.3333334922790527),\n  vec3(-0.41583433747291565,-0.7585837841033936,-2.028017282485962),\n  vec3(-4.000000953674316,-0.4263715147972107,2.4999985694885254),\n  vec3(-4.000000953674316,-0.3907959461212158,2.4999985694885254),\n  vec3(-4.000000476837158,-0.3907960057258606,1.3999983072280884),\n  vec3(-4.000000476837158,-0.42637157440185547,1.3999983072280884),\n  vec3(-1.5019540786743164,-0.4263715445995331,-0.3631231188774109),\n  vec3(-1.5019540786743164,-0.3907959759235382,-0.3631231188774109),\n  vec3(-4.100000858306885,-0.5085837244987488,2.499998092651367),\n  vec3(-4.100000858306885,-0.30858373641967773,2.499998092651367),\n  vec3(-4.100000381469727,-0.3085837960243225,1.3999983072280884),\n  vec3(-4.100000381469727,-0.5085837841033936,1.3999983072280884),\n  vec3(-4.030000686645508,-0.44858378171920776,1.1999982595443726),\n  vec3(-4.030000686645508,-0.3685837984085083,1.1999982595443726),\n  vec3(-4.070000648498535,-0.44858378171920776,1.1999982595443726),\n  vec3(-4.070000648498535,-0.3685837984085083,1.1999982595443726),\n  vec3(-7.82102688390296e-07,-0.008583582006394863,1.8934085369110107),\n  vec3(-0.651830792427063,-0.032221853733062744,-1.478899598121643),\n  vec3(6.615978236368392e-07,-0.0085837347432971,-1.600000023841858),\n  vec3(-2.204425811767578,-0.43086379766464233,3.4933676719665527),\n  vec3(-2.204425811767578,-0.3863034248352051,3.4933676719665527),\n  vec3(-1.9381109476089478,-0.43086376786231995,4.159155368804932),\n  vec3(-1.9381109476089478,-0.3863033950328827,4.159155368804932),\n  vec3(-0.8000016212463379,-0.008583534508943558,3.7722291946411133),\n  vec3(-0.37500080466270447,-0.008583597838878632,1.8934084177017212),\n  vec3(-0.1250007450580597,-0.5085836052894592,1.8934085369110107),\n  vec3(-0.37500080466270447,-0.508583664894104,1.8934084177017212),\n  vec3(-1.536696345283417e-06,-0.5085834860801697,3.7722294330596924),\n  vec3(-0.2500012516975403,-0.574462890625,3.1092312335968018),\n  vec3(-0.15586771070957184,-0.5482740998268127,3.1092312335968018),\n  vec3(-0.5165384411811829,-0.4668540954589844,3.1092309951782227),\n  vec3(-0.5165385007858276,-0.05031300336122513,3.1092309951782227),\n  vec3(-0.25000128149986267,0.06064063683152199,3.1092312335968018),\n  vec3(-0.15664753317832947,0.03173086792230606,3.1092312335968018),\n  vec3(-0.12500077486038208,-0.00858358759433031,1.8934085369110107),\n  vec3(-0.06637714058160782,-0.040485430508852005,3.1092312335968018),\n  vec3(-0.12500151991844177,-0.6085835099220276,3.7722294330596924),\n  vec3(-0.2500015199184418,-0.6433596014976501,3.7722294330596924),\n  vec3(-0.3750015199184418,-0.6085835695266724,3.7722291946411133),\n  vec3(-0.06637711822986603,-0.4766816198825836,3.1092312335968018),\n  vec3(-0.5829146504402161,-0.008583526127040386,3.7722291946411133),\n  vec3(-0.37500154972076416,0.09141647815704346,3.7722291946411133),\n  vec3(-0.25000154972076416,0.130126491189003,3.7722294330596924),\n  vec3(-0.12500156462192535,0.09141649305820465,3.7722294330596924),\n  vec3(-0.0663774162530899,-0.04048540070652962,3.7722294330596924),\n  vec3(-0.06637739390134811,-0.47668159008026123,3.7722294330596924),\n  vec3(-0.15586797893047333,-0.548274040222168,3.7722294330596924),\n  vec3(-0.2500015199184418,-0.5744628310203552,3.7722294330596924),\n  vec3(-0.5165387392044067,-0.466854065656662,3.7722291946411133),\n  vec3(-0.5165387988090515,-0.05031297355890274,3.7722291946411133),\n  vec3(-0.25000154972076416,0.060640666633844376,3.7722294330596924),\n  vec3(-0.15664780139923096,0.03173089772462845,3.7722294330596924),\n  vec3(-0.5000007152557373,-0.508583664894104,1.8934084177017212),\n  vec3(-1.000001072883606,-0.5085835456848145,2.499999761581421),\n  vec3(-0.9631186127662659,-0.4354332685470581,2.6955060958862305),\n  vec3(-0.5829145908355713,-0.5085835456848145,3.7722291946411133),\n  vec3(-1.006008267402649,-0.43086376786231995,3.732440233230591),\n  vec3(-1.0060079097747803,-1.5031483173370361,3.0534870624542236),\n  vec3(-0.9634799957275391,-0.4376163184642792,3.497551441192627),\n  vec3(-1.006008267402649,-1.3737642765045166,3.7760839462280273),\n  vec3(-0.9631187319755554,-1.5077176094055176,3.054569721221924),\n  vec3(-1.006008267402649,-0.43086376786231995,3.497551441192627),\n  vec3(-0.9634801745414734,-1.3805170059204102,3.7760839462280273),\n  vec3(-1.0000009536743164,-0.30858364701271057,2.0556342601776123),\n  vec3(-1.0000009536743164,-0.5085835456848145,2.0556342601776123),\n  vec3(-0.7661478519439697,-0.3085837960243225,-2.000000238418579),\n  vec3(-0.03939606994390488,-0.28494566679000854,-1.8158643245697021),\n  vec3(-0.685373842716217,-0.008583764545619488,-1.6000003814697266),\n  vec3(-0.039396222680807114,-0.03222183138132095,-1.478899359703064),\n  vec3(-0.0393960103392601,-0.28494566679000854,-1.968482494354248),\n  vec3(-0.03939615935087204,-0.03222183883190155,-1.6315175294876099),\n  vec3(-0.7198757529258728,-0.28494569659233093,-1.9684828519821167),\n  vec3(-0.6518307328224182,-0.03222186118364334,-1.631517767906189)\n);\nconst int Mesh_Faces[1137] =  int[1137](\n122,123,181,174,178,176,97,116,101,15,10,17,6,35,7,101,15,17,93,117,96,113,106,98,41,143,89,15,101,100,63,62,53,164,144,146,24,22,23,0,7,68,118,180,119,126,125,119,30,31,29,21,29,22,47,48,50,20,79,19,36,37,35,9,38,8,36,6,16,67,53,42,141,142,92,8,71,9,74,73,77,40,56,55,21,20,27,114,49,132,63,46,45,82,34,3,152,162,163,44,62,43,112,117,110,54,61,44,148,165,147,48,65,66,50,66,59,102,115,139,1,72,75,77,72,74,186,133,188,86,33,81,87,83,80,82,86,84,183,186,188,3,88,87,107,95,108,108,99,107,46,65,47,108,95,97,108,5,100,135,102,103,165,146,147,14,10,12,18,2,96,11,95,80,141,143,152,100,101,113,28,25,19,121,123,122,78,21,24,169,103,90,27,26,25,2,12,80,121,118,127,130,129,128,128,120,121,144,145,155,0,39,6,137,136,135,138,105,104,115,136,138,154,168,142,179,123,120,172,104,105,174,175,178,140,156,157,134,150,132,150,114,132,50,60,54,160,159,167,151,161,160,84,86,81,185,94,182,144,162,145,45,62,63,145,161,155,127,124,125,167,148,149,160,149,151,133,182,94,91,173,169,178,173,176,69,75,73,186,182,184,3,85,82,94,188,133,181,107,106,107,99,98,106,107,98,106,110,181,110,93,181,93,122,181,91,170,176,170,174,176,112,116,97,116,113,101,15,4,10,6,36,35,14,97,17,97,101,17,117,112,109,112,97,109,109,96,117,96,92,111,111,93,96,93,110,117,113,116,106,41,51,143,100,5,15,5,4,15,70,71,16,16,39,70,39,55,64,70,39,63,55,56,64,56,57,65,64,56,65,57,58,65,58,114,59,65,58,66,59,66,58,63,39,64,52,53,62,53,70,63,143,51,60,51,52,62,61,60,51,62,61,51,164,163,144,24,21,22,74,72,76,72,68,7,68,79,78,78,0,68,0,6,7,7,76,72,180,179,119,119,125,118,125,124,118,119,120,126,120,129,131,126,120,131,30,32,31,21,30,29,50,54,45,54,44,43,45,54,43,45,46,50,46,47,50,20,78,79,19,25,20,25,26,20,36,38,37,9,37,38,16,8,38,38,36,16,67,70,53,91,169,180,180,118,121,122,93,111,180,121,122,174,170,171,170,91,168,171,170,168,180,122,168,122,111,168,91,180,168,111,92,142,168,111,142,13,2,23,135,103,177,105,137,172,137,135,172,171,172,174,172,135,177,172,177,174,13,23,67,23,22,79,141,92,89,22,19,79,79,68,1,1,69,67,69,73,70,76,7,35,76,35,71,35,37,71,37,9,71,71,70,73,70,67,69,42,53,52,42,52,41,52,51,41,41,89,92,92,42,41,67,42,13,13,42,92,141,152,153,73,76,71,141,153,142,153,154,142,79,1,67,79,67,23,8,16,71,74,76,73,26,27,20,27,32,21,32,30,21,114,58,49,63,64,46,82,84,34,139,115,171,115,172,171,171,154,164,154,153,163,158,157,166,157,156,165,166,157,165,156,139,165,139,171,164,154,163,164,153,152,163,143,60,161,60,59,161,159,158,166,166,167,159,59,114,160,161,59,160,164,165,139,152,143,161,152,161,162,44,61,62,110,106,112,106,116,112,54,60,61,148,166,165,48,47,65,50,48,66,139,183,179,183,181,179,139,179,90,90,102,139,1,68,72,77,75,72,186,184,133,86,134,33,88,81,33,80,95,87,95,181,187,185,95,187,185,186,86,186,134,86,86,85,185,95,185,85,88,33,83,87,88,83,95,85,87,82,85,86,183,134,186,188,187,183,187,181,183,3,34,88,107,181,95,108,100,99,46,64,65,96,109,95,109,97,95,97,101,108,101,100,108,108,11,5,135,136,102,165,164,146,12,18,14,14,17,10,96,109,18,109,97,14,18,109,14,18,12,2,2,13,96,13,92,96,11,108,95,141,89,143,98,99,113,99,100,113,19,22,28,22,29,31,28,22,31,121,120,123,24,80,78,78,20,21,169,173,103,173,175,177,103,173,177,103,102,90,90,179,180,90,180,169,25,28,27,28,31,27,31,32,27,12,10,80,10,4,11,4,5,11,11,80,10,80,24,23,2,80,23,124,127,118,127,130,121,130,128,121,130,131,129,128,129,120,155,151,147,151,149,148,147,151,148,147,146,155,146,144,155,0,78,39,78,80,83,83,39,78,39,16,6,137,138,136,138,137,105,138,104,115,115,102,136,154,171,168,120,119,179,179,181,123,172,115,104,174,177,175,40,55,39,39,83,40,83,33,40,134,183,140,183,139,140,33,134,49,40,33,49,57,56,40,139,156,140,140,157,158,57,40,49,49,58,57,134,140,150,140,158,150,158,159,150,132,49,134,150,159,114,50,59,60,160,114,159,151,155,161,88,34,81,34,84,81,185,187,94,144,163,162,45,43,62,145,162,161,125,126,127,126,131,127,131,130,127,167,166,148,160,167,149,133,184,182,91,176,173,178,175,173,1,75,69,75,77,73,186,185,182,3,87,85,94,187,188\n);\n\n\n\n#define M_PI 3.1415926535897932384626433832795\n#define drawPoint(P, r) step(length(P-fragCoordGlobal), r)\n#define drawLine(A, B, r) smoothstep( 2.0, 0., distanceFromSegment(fragCoordGlobal, A, B) )\n\nvec2 fragCoordGlobal;\n\nfloat viewport_x = 0.;\nfloat viewport_y = 0.; \nfloat viewport_width; \nfloat viewport_eighth;\n\n\n// Draw a segment between A and B, with thickness r.\n// It computes the disance of a point from a line and return it\n//  if the distance is 0 the point belong to the line\nfloat distanceFromSegment(vec2 U, vec2 A, vec2 B) \n{\n\tvec2 UA = U - A;\n    vec2 BA = (B - A);\n    \n    float s = dot(UA, BA) / length(BA);   // scalar projection of U-A on B-A\n    s = s / length(BA); \t\t\t\t  // normalize the projection value in the range [0,1], \n    \t\t\t\t\t\t\t\t      //  a value of 0 means the projection correspond to A, 1 to B,\n    \t\t\t\t\t\t\t\t\t  //  in between the projection is inside the segment, \n                                          //  outside [0,1] the projection is outside the segment.\n    s = clamp(s, 0., 1.);                 // If the scalar projection is outside [0,1], its value is clamped to \n                                          //  0 or 1 ...\n   \t\n    return length(UA - s*BA);          \t  // ... so here we compute the distance of U from its projection if it is\n                                          // inside the segment, or from the extreme points A or B if it is outside\n}\n\n\n\n// Translate \nmat4 Translate(float Tx, float Ty, float Tz) \n{\n\treturn mat4(\n  \t\t1., 0., 0., 0.,\n        0., 1., 0., 0.,\n        0., 0., 1., 0.,\n        Tx, Ty, Tz, 1.\n    );\n}\n\n// Rotate a vector of an angle around the x-axis\nmat4 RotateX(float angle) \n{\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat4(\n        1., 0., 0., 0.,\n        0., c,  s, 0.,\n        0., -s,  c, 0.,\n        0., 0., 0., 1.\n    );\n}\n\n// Rotate a vector of an angle around the x-axis\nmat4 RotateY(float angle) \n{\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat4(\n         c, 0., -s, 0.,\n        0., 1., 0., 0.,\n         s, 0.,  c, 0.,\n        0., 0., 0., 1.\n    );\n}\n\n// Rotate a vector of an angle around the x-axis\nmat4 RotateZ(float angle) \n{\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat4(\n         c,  s, 0., 0,\n        -s,  c, 0., 0,\n        0., 0., 1., 0,\n        0., 0., 0., 1\n    );\n}\n\n// Scale a vector along the x, y or z axis\nmat4 Scale(float Sx, float Sy, float Sz) \n{\n    return mat4(\n        Sx, 0., 0., 0,\n        0., Sy, 0., 0,\n        0., 0., Sz, 0,\n        0., 0., 0., 1\n    );\n}\n\n\nmat4 Projection(float fovy, float aspect, float zNear, float zFar) \n{\n    \n    float f = cos(fovy/2.)/sin(fovy/2.); // cotangent (fovy/2.)\n    \n    return mat4(\n        f / aspect, 0.,                              0.,  0.,\n                0.,  f,     \t     \t\t\t\t 0.,  0.,\n                0.,  0.,    (zFar+zNear) / (zNear-zFar), -1.,\n        \t\t0.,  0., (2.*zFar*zNear) / (zNear-zFar),  0.\n        );    \n}\n\n\nvec2 ViewportTransform(vec3 p) \n{\n\treturn vec2(\n        (viewport_width / 2.) * p.x + (viewport_x + viewport_width / 2.),\n        (viewport_eighth / 2.) * p.y + (viewport_y + viewport_eighth / 2.)\n        );\n}\n\n\nfloat drawTriangle(vec2 p1, vec2 p2, vec2 p3) \n{\n\treturn drawLine(p1, p2, 1.) \n        + drawLine(p2, p3, 1.)\n        + drawLine(p3, p1, 1.);   \n}\n\n\nbool cullFace(vec3 p1, vec3 p2, vec3 p3) \n{\n\treturn (dot(p1, cross(p2-p1, p3-p1)) > 0.) ? true : false;\n} ","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Get a linear index in the image from uv coord \nint uvToLinearCoord(vec2 uv) \n{\n\treturn int(((uv.y-0.5) * iResolution.x) + uv.x-0.5);\n}\n\n// Each fragment process only one vertices\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    fragCoordGlobal = fragCoord;\n \tviewport_width = iResolution.x; \n\tviewport_eighth = iResolution.y;\n\n    // From Object space to World Space: model transform\n    mat4 Mt = Translate(cos(iTime/2.)*3. + 1.2, 0., 10. + cos(iTime/2.)*3.);\n    mat4 Rtx = RotateX(0.4);\n    mat4 Rty = RotateY(iTime/2.);\n    mat4 Rtz = RotateZ(iTime/2.);\n    mat4 St = Scale(1., 1., 1.);\n    \n    // From World Space to Eye Space: View transform.\n    //    the camera is fixed at the origin facing negative z-axis\n    //  ... no change here\n    \n    // From Eye Space to Clip Space: Perspective transform\n    float aspectRatio = iResolution.x / iResolution.y;\n    mat4 Pt = Projection(45., aspectRatio, 0.1, 100.);\n   \n    // Cumulate transformation into a single modelview matrix \n    mat4 ModelView = Pt*Mt*Rty*Rtz*Rtx*St; \n    \n    \n    // Each fragment compute a single vertex in the mesh, indexed by uvToLinearCoord\n    int i = uvToLinearCoord(fragCoord);\n    \n    // If the mesh has less vertices than i, skip\n    if(i >= Mesh_Vertices.length()) \n    {\n    \tfragColor = vec4(0.);\n        return;\n    }\n    \n    // Fetch vertex\n    vec4 v_o = vec4(Mesh_Vertices[i],1.0);\n    \n    // ModelView transform\n    vec4 v_c = ModelView*v_o;\n\n    // From Clip to Normalized Device coordinates: dividing by w\n    vec4 v_ndc = v_c / v_c.w;\n    \n     // NDC to Viewport\n    vec2 v_w = ViewportTransform(v_ndc.xyz);\n\n    // Save Viewport coords\n    fragColor = vec4(v_w,0.0,0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}