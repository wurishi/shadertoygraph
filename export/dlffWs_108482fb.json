{"ver":"0.1","info":{"id":"dlffWs","date":"1693699505","viewed":22,"name":"Mandelbrot set fractal demo","username":"wackymoder","description":"mandelort set :333","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["fractal","math","mandelbrot","demo","keyboard","mandelbrotset","controls","wackymoder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int maxiter = 1000;\n\nfloat zoom = 1.0;\n\nvec2 z;\nvec2 x;\n\n//float zoom = 1.0;\n\nbool ReadKey( int key, bool toggle )\n{\n\tfloat keyVal = textureLod( iChannel0, vec2( (float(key)+.5)/256.0, toggle?.75:.25), 0.0 ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nint mandel(vec2 c){\n    int iter = 0;\n    float creal = c.x;\n    float cimag = c.y;\n    \n    float zreal = 0.0;\n    float zimag = 0.0;\n    \n    float xreal = 1.0;\n    float ximag = 1.0;\n\n\n    while ((zreal*zreal+zimag*zimag) < 4.0 && iter < maxiter) {\n        xreal = zreal;\n        ximag = zimag;\n\n        zreal = (xreal*xreal - ximag*ximag) + creal;\n        zimag = (xreal*ximag + ximag*xreal) + cimag;\n\n        iter++;\n\n        if (zreal == xreal && zimag == ximag) {\n            return maxiter;\n        }\n        //return maxiter;\n    }\n    return iter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //presses e\n    if(ReadKey(69, false)){\n        zoom*=exp(iTime*0.9);\n    } else {\n    zoom*=exp(iTime);\n    }\n    \n    float real;\n    float imag;\n    if(zoom == 1.0){\n        real = (fragCoord.x - iResolution.x / 2.0) * iResolution.x/200.0 / iResolution.x - 0.75 - float(iMouse.x)/200.0 + 2.75;\n        imag = (fragCoord.y - iResolution.y / 2.0) * iResolution.y/200.0 / iResolution.y - float(iMouse.y)/200.0 + 1.5;\n\n    }else{\n        real = (fragCoord.x - iResolution.x / 2.0) / zoom / iResolution.x*4.8 - 0.16428;\n        imag = (fragCoord.y - iResolution.y / 2.0) / zoom / iResolution.y*2.7+1.0392;\n    }\n    \n \n    vec2 c = vec2(real, imag);\n    \n\n    \n    int meit = mandel(c);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(uv,1);\n    \n    if(meit < maxiter){\n        float r = sin( float(meit) * 0.1) * 0.5 + 0.5;\n        float g = cos( float(meit) * 0.1) * 0.5 + 0.5;\n        float b = 1.0;\n        col = vec3(r,g,b);\n    }else{\n        col = vec3(0,0,0);\n    }\n    \n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}