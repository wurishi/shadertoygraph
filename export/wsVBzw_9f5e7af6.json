{"ver":"0.1","info":{"id":"wsVBzw","date":"1606840120","viewed":98,"name":"Biome interpolation","username":"ivanyou","description":"Biome interpolation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["biome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise2D(vec2 p) {\n    float a = fract(sin(dot(p, vec2(127.1, 311.7))) *\n                 43758.5453);\n\n    float b = fract(cos(dot(p, vec2(284.1, 132.4))) *\n                    43758.5453);\n    return fract(a + b);\n}\n\nvec2 cubic(vec2 p) {\n    return p*p*(3.f-2.f*p);\n}\n\nconst float twopi  = 6.28318530718f;\n\nfloat interpNoise2D(vec2 p) {\n    p = mod(p, 1000.f);  \n    vec2 p_flr = floor(p);\n    vec2 p_fra = fract(p);\n    \n\n    float tl = noise2D(p_flr) * twopi;\n    float tr = noise2D(p_flr + vec2(1.f, 0.f)) * twopi;\n    float bl = noise2D(p_flr + vec2(0.f, 1.f)) * twopi;\n    float br = noise2D(p_flr + vec2(1.f, 1.f)) * twopi;\n\n    vec2 tlvec = vec2(-sin(tl), cos(tl));\n    vec2 trvec = vec2(-sin(tr), cos(tr));\n    vec2 blvec = vec2(-sin(bl), cos(bl));\n    vec2 brvec = vec2(-sin(br), cos(br));\n    \n    float tldot = dot(tlvec, p_fra);\n    float trdot = dot(trvec, p_fra - vec2(1.f, 0.f));\n    float bldot = dot(blvec, p_fra - vec2(0.f, 1.f));\n    float brdot = dot(brvec, p_fra - vec2(1.f, 1.f));\n    \n    vec2 cubic = cubic(p_fra);\n    \n    float topmix = mix(tldot, trdot, cubic.x);\n    float botmix = mix(bldot, brdot, cubic.x);\n    return mix(topmix, botmix, cubic.y) + 0.5;\n}\n\nfloat fbm(vec2 p) {\n    float persistence = 0.5;\n    int octaves = 6;\n    float total = 0.0;\n\n    for(int i = 1; i <= octaves; i++) {\n        float freq = pow(2.f, float(i));\n        float amp = pow(persistence, float(i));\n\n        total += interpNoise2D(p* freq) * amp;\n    }\n    return total;\n}\n\n\n// uv in [0, 1]\nvec3 myInterp(vec3 tl, vec3 tr, vec3 bl, vec3 br, \n              vec2 uv) {\n    uv = uv*uv*(3.f-2.f*uv);\n    vec3 topmix = mix(tl, tr, uv.x);\n    vec3 botmix = mix(bl, br, uv.x);\n    return mix(topmix, botmix, uv.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    uv *= 8.f;\n    //float f = pow(fbm(uv), 2.5);\n    \n    float f = fbm(uv);\n    float k = fbm(uv + vec2(12429.f));\n    float my_t = (sin(iTime) + 1.0) / 2.0; // remapped iTime to [0, 1]\n    float sm = my_t / 2.0;\n    vec2 m = smoothstep(sm, 1.f-sm, vec2(f,k));\n    \n    \n    vec3 tl = vec3(1.f, 0.f, 0.f);\n    vec3 tr = vec3(0.f, 1.f, 0.f);\n    vec3 bl = vec3(0.f, 0.f, 1.f);\n    vec3 br = vec3(1.f, 0.f, 1.f);\n\n    \n    vec3 col = myInterp(tl, tr, bl, br, m);\n    \n\n    \n  \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}