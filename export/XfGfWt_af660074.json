{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"buffer","id":"4sXGR8","filepath":"/media/previz/buffer02.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":3,"type":"buffer","id":"XdfGR8","filepath":"/media/previz/buffer03.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float hash(float n) {\n    return fract(sin(n) * (sin(iTime*0.00000001)+1.0)/2.0*437548.5453123);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(mix(hash(i.x + i.y*57.0),\n                   hash(i.x+1.0 + i.y*57.0), u.x),\n               mix(hash(i.x+(i.y+1.0)*57.0),\n                   hash(i.x+1.0+(i.y+1.0)*57.0), u.x), u.y);\n}\n\n\nfloat fbm(vec2 p) {\n    float v = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < 5; i++) {\n        v += a * noise(p);\n        p *= 2.0;\n        a *= 0.5;\n    }\n    return v;\n}\nfloat turbulence(vec2 p, float t) {\n    float w = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < 6; i++) {\n        w += a * abs(noise(p + t * 0.1));\n        p *= 2.0;\n        a *= 0.5;\n    }\n    return w;\n}\n\nfloat localizedDisturbance(vec2 p, vec2 center, float t) {\n    float dist = length(p - center);\n    return exp(-dist * 10.0) * sin(t * 5.0 + dist * 20.0) * 0.1;\n}\n\nfloat waveHeight(vec2 p, float t) {\n    vec2 center = vec2(0.5, 0.5); \n    float h = 0.0;\n    h += sin(p.x * 0.3 + t * 1.5) * 0.3;\n    h += sin(p.y * 0.7 + t * 1.2) * 0.2;\n    h += fbm(p * 4.0 + t * 0.5) * 0.1;\n    h += localizedDisturbance(p, center, t); \n    return h;\n}\nvec3 calcNormal(vec2 p, float t) {\n    float eps = 0.01;\n    float h = waveHeight(p, t);\n    float hx = waveHeight(p + vec2(eps, 0.0), t) - h;\n    float hy = waveHeight(p + vec2(0.0, eps), t) - h;\n    return normalize(vec3(-hx, eps, -hy));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(0.0, 2.0, -5.0);\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    vec3 f = normalize(ta - ro);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f, r);\n    vec3 rd = normalize(f + uv.x * r + uv.y * u);\n\n    vec3 col = vec3(0.0);\n    float t = iTime * 0.3;\n\n    \n    vec2 clickPos = vec2(-10.0);\n    float clickTime = -10.0;\n\n    if (iMouse.z > 0.0) {\n       \n        clickPos = (iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n        clickPos.x *= iResolution.x / iResolution.y;\n        clickTime = iTime * 0.5;\n    }\n\n    if (rd.y < 0.0) {\n        vec3 pos = ro + rd * abs(ro.y / rd.y);\n        float h = waveHeight(pos.xz, t);\n        vec3 n = calcNormal(pos.xz, t);\n\n        vec3 lightDir = normalize(vec3(0.5, sin(t), 0.5));\n        float diff = max(dot(n, lightDir), 0.0);\n        float spec = pow(max(dot(reflect(-lightDir, n), normalize(-rd)), 0.0), 16.0);\n        float fresnel = pow(1.0 - max(dot(n, -rd), 0.0), 3.0);\n\n        float foam = smoothstep(0.6, 0.9, h - pos.y) * 0.6;\n        vec3 waterColor = mix(vec3(0.0, 0.1, 0.2), vec3(0.0, 0.3, 0.6), diff);\n        waterColor += vec3(1.0) * foam;\n        waterColor += vec3(1.0) * spec * 0.5;\n        waterColor += vec3(0.7, 0.8, 1.0) * fresnel * 0.2;\n\n        col = waterColor;\n\n        \n        if (iTime * 0.5 - clickTime < 10.0 && iTime * 0.5 >= clickTime) {\n            float dist = length(pos.xz - clickPos);\n            if (dist < 0.1) {\n                col = mix(col, vec3(1.0, 0.0, 0.0), 1.0 - dist / 0.1);\n            }\n        }\n    } else {\n        col = mix(vec3(0.00, 0.1, 0.2), vec3(0.0, 0.5, 0.8), uv.y * 0.5 + 0.5) * (0.4+(sin(t)+1.0)/2.0*0.8);\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfGfWt","date":"1734547720","viewed":141,"name":"wwater","username":"erpprog","description":"wwater","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""}}