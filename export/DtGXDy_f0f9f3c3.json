{"ver":"0.1","info":{"id":"DtGXDy","date":"1686316611","viewed":34,"name":"First attempt at Mandelbrot","username":"Armanuki","description":"My first shader after I learned about this site from https://www.youtube.com/watch?v=f4s1h2YETNY .","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/new\n\nconst int MAXIT = 300;\nconst float THRESH = 4.0;\n\nconst float MANDELBROT_HEIGHT = 3.0;\nconst bool SHOW_COORDS = false;\n\n\nvec2 cx_mul(vec2 a, vec2 b) {\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 cx_z_squared_plus_c(vec2 z, vec2 c) {\n    return cx_mul(z, z) + c;\n}\n\nfloat cx_squared_length(vec2 z) {\n    return z.x * z.x + z.y * z.y;\n}\n\nvec2 coord_transform(vec2 fragCoord, vec2 targetCenter, float targetHeight) {\n\n    float aspect = iResolution.x / iResolution.y;  \n    float targetWidth = targetHeight * aspect;\n    \n    vec2 fragCoordNormalized = (fragCoord/iResolution.yy);\n    vec2 fragCoordZoomed = fragCoordNormalized * (targetHeight);\n    float zoomFactor = targetHeight/MANDELBROT_HEIGHT;\n    vec2 fragCoordTanslated = fragCoordZoomed + targetCenter;\n    vec2 fragCoordShifted = fragCoordTanslated - vec2((targetHeight/2.0)*aspect, targetHeight/2.0);\n    \n    return fragCoordShifted;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Target aspect given in Mandelbrot coordinates\n    vec2 target_center = vec2(-0.74912,0.1);\n    //float target_height = 0.0001;\n    \n    float target_height;\n    if (mod(iTime, 120.0) < 60.0) {\n        target_height = 1.0/pow(1.17, mod(iTime, 60.0)) * 3.0;\n    } else {\n        target_height = 1.0/pow(1.17, mod(-iTime, 60.0)) * 3.0;   \n    }\n    \n    float maxit = max(float(MAXIT), 3.0/target_height);\n    \n\n    if (SHOW_COORDS) {\n\n        if (int(fragCoord.x) == int((iResolution.x - iResolution.y) / 2.0)) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            return;\n        }\n        \n        if (int(fragCoord.x) == int(iResolution.x - ((iResolution.x - iResolution.y) / 2.0))) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            return;\n        }        \n\n        if (int(fragCoord.x) == int(iResolution.x / 2.0)) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            return;\n        }\n\n        if (int(fragCoord.y) == int(iResolution.y / 2.0)) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            return;\n        }\n    \n    }\n\n    vec2 uv = coord_transform(fragCoord, target_center, target_height);\n\n    vec2 z = vec2(0,0);\n    int i;\n    for(i = 0 ; i < int(maxit) ; i++)\n    {\n        z = cx_z_squared_plus_c(z, uv);\n        if (cx_squared_length(z) > THRESH) {\n            break;\n        }\n    }\n\n    // Output to screen\n    if (i < MAXIT) {\n        float r = 0.9 * ((sin(float(i)/10.0)+1.0)/2.0) + 0.1 * (mod(float(i), 7.0) / 7.0);\n        float g = 0.9 * ((sin(float(i)/10.0 + 1.0)+1.0)/2.0) + 0.1 * (mod(float(i), 11.0) / 11.0);\n        float b = 0.9 * ((sin(float(i)/10.0 + 2.0)+1.0)/2.0) + 0.1 * (mod(float(i), 13.0) / 13.0);\n        \n        fragColor = vec4(r, g, b, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}