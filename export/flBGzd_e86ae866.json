{"ver":"0.1","info":{"id":"flBGzd","date":"1624465862","viewed":273,"name":"coverage of uniform vs blue poin","username":"FabriceNeyret2","description":"random L² points distribution.   Mouse to seed. \nLeft: Uniform ( i.e. Poisson, i.e.  white noise )\nRight: ~blue ( here, jittered grid ).\nCoverage is better, i.e. variance lower,  for the ~blue distribution.   try r = 2.","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["poisson","stats","pointsdistribution"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int   L = 10;  // LxL point distribution. left: Uniform right: Blue\nfloat r = 1.;  // kernel radius \n\n#define hash(i)    fract(sin( iMouse.xy + float(i) * vec2(12.9898, 78.233) ) * 43758.5453)// hash 1→2\n#define Pu(i)    ( hash(i) * vec2(-a,a) - vec2(0,1) )                   // uniform distrib\n#define Pb(i)    ( vec2(i%L,i/L)/l  * a - vec2(0,1) + hash(i)/l )       // ~blue distrib \n#define Ks(P)      smoothstep(2.*r/l, 0., length(P-U) ) / (r*r)           // splat kernel\n#define Kc(P)      smoothstep(3./R.y, 0., abs(length(P-U)-1./l) )         // circle kernel \n//#define Kc(P)    smoothstep(3./R.y, 0., abs(mod(length(P-U),.4/l)-.2/l) )*.02/length(P-U) // sin kernel  \n#define  K(P)    ( mod(iTime,4.) < 2. ? Ks(P) : Kc(P) )                 // kernel\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n    float l = float(L), a = R.x/R.y; \n\n    O = vec4(0);\n    if (U.x<0.)\n        for(int i=0; i<L*L; i++)\n            O += K(Pu(i));\n    else\n        for(int i=0; i<L*L; i++)\n            O += K(Pb(i));\n            \n    O*=.5;    // to better see superimposition\n}","name":"Image","description":"","type":"image"}]}