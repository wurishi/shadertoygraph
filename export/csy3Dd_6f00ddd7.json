{"ver":"0.1","info":{"id":"csy3Dd","date":"1679174873","viewed":129,"name":"Custom font bitmap","username":"ianertson","description":"Another experiment","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["text","bitmap","font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R (iResolution.xy)\n#define T (iTime)\n\nuint hash21u(in vec2 ip, in float seed) {\n    uvec2 p = uvec2(floatBitsToUint(ip.x), floatBitsToUint(ip.y)); uint s = floatBitsToUint(seed);\n    s ^= ~s >> 3U; p ^= (p << 17U); s ^= (~p.x); s ^= (~p.y);\n    p ^= (p >> 11U); p ^= (p << 5U); p ^= (s << 3U);\n    return ((p.x + p.y) ^ (p.x * s + p.y))*293U;\n}\n\nfloat hash21(in vec2 ip, in float seed) {return float(hash21u(ip, seed))/float(0xFFFFFFFFU);}\nfloat noise(in vec2 p, in float seed) {\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(hash21(id, seed), hash21(id+vec2(1, 0), seed), lv.x),\n        mix(hash21(id+vec2(0, 1), seed), hash21(id+vec2(1, 1), seed), lv.x),\n        lv.y\n    );\n}\n\n#define CHAR_WIDTH 5\n#define CHAR_HEIGHT 8\n#define NUM_CHARS 26\n#define FONT_LEN (CHAR_WIDTH * CHAR_HEIGHT * NUM_CHARS)\n\nfloat[FONT_LEN] font = float[FONT_LEN](\n    // A\n    0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    // B\n    0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    // C\n    0.0, 0.0, 0.0, 0.0, 0.0,  \n    0.0, 0.0, 1.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 0.0, 1.0, 1.0, 0.0,\n    // D\n    0.0, 1.0, 1.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0, \n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0, \n    0.0, 1.0, 0.0, 1.0, 0.0, \n    0.0, 1.0, 0.0, 1.0, 0.0, \n    0.0, 1.0, 1.0, 0.0, 0.0,\n    // E\n    0.0, 1.0, 1.0, 1.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 1.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 1.0, 1.0, 0.0,\n    // F\n    0.0, 1.0, 1.0, 1.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 1.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0, \n    0.0, 1.0, 0.0, 0.0, 0.0,\n    // G\n    0.0, 1.0, 1.0, 1.0, 0.0, \n    1.0, 0.0, 0.0, 0.0, 0.0, \n    1.0, 0.0, 0.0, 0.0, 0.0, \n    1.0, 0.0, 1.0, 1.0, 0.0, \n    1.0, 0.0, 0.0, 0.0, 1.0, \n    1.0, 0.0, 0.0, 0.0, 1.0, \n    1.0, 0.0, 0.0, 1.0, 1.0, \n    0.0, 1.0, 1.0, 0.0, 1.0,\n    // H\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 1.0, 1.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    // I\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    // J\n    0.0, 0.0, 1.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    // K\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 1.0, 0.0, 0.0,\n    1.0, 1.0, 0.0, 0.0, 0.0,\n    1.0, 1.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    // L\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 1.0, 1.0, 0.0,\n    // M\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 1.0, 0.0, 1.0, 1.0,\n    1.0, 0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    // N\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 1.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 1.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    // O\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0,\n    // P\n    1.0, 1.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 1.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    // Q\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 1.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    // R\n    1.0, 1.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 1.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 1.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    // S\n    0.0, 1.0, 1.0, 1.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    0.0, 1.0, 1.0, 1.0, 0.0,\n    // T\n    1.0, 1.0, 1.0, 1.0, 1.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    // U\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 1.0, 0.0, 0.0,\n    // V\n    0.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n\n    // W\n    0.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 0.0, 1.0,\n    1.0, 1.0, 0.0, 1.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    // X\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    1.0, 0.0, 0.0, 0.0, 1.0,\n    // Y\n    0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 1.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    // Z\n    1.0, 1.0, 1.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 1.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 0.0, 0.0, 0.0, 0.0,\n    1.0, 1.0, 1.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0\n);\n\nint uvidx(in vec2 uv, int c) {\n    uv.y = (float(CHAR_HEIGHT)-uv.y)-0.001;\n    return int((int(uv.y)+(c*CHAR_HEIGHT)) * CHAR_WIDTH + int(uv.x)) % FONT_LEN;\n}\n\nfloat letter(in vec2 uv) {\n    vec2 id = floor(uv*8.);\n    vec2 lv = fract(uv*8.);\n    return font[\n        uvidx(lv*vec2(CHAR_WIDTH, CHAR_HEIGHT),\n            int(noise(id+vec2(cos((T*0.2)+id.x), sin((T*0.2)+id.y)), 3.28938)*float(NUM_CHARS)))\n    ]*mod(id.x, 2.)*mod(id.y, 2.);\n}\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc/R.y;\n    uv += vec2(cos(T*0.5), sin(T*0.5))*0.33;\n    col += letter(uv*3.);\n    O = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}