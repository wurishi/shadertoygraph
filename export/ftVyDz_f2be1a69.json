{"ver":"0.1","info":{"id":"ftVyDz","date":"1673109108","viewed":58,"name":"moresdfs","username":"MatthewBanyas","description":"description","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdf(vec2 p) {\n    return sqrt(pow(p.x, 2.0) + pow(p.y, 2.0)) - 3.0;\n}\n\n// polar coordinates\n// If you want to go a dist of r in a direction of theta,\n// vec2(r * sin(theta), r * cos(theta))\nfloat manySDF(vec2 p, float time) {\n    float result = 10000.0;\n    for (float theta = 1.0; theta < 6.28; theta += 6.28 / 8.0) {\n        float r = 5.0 + 5.0 * cos(3.0 * theta + time);\n        result = min(result, \n            sdf(p - vec2(r * 3.0 * cos(theta), r * 1.5 * sin(theta)))\n        );\n    }\n    return result;\n}\n\nfloat sdBox(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 5.0 + 2.0*sin(iTime);\n    \n    vec2 p = fragCoord - vec2(iResolution.x/2.0, iResolution.y/2.0);\n    p *= 5.0/iResolution.y;\n    p *= scale;\n    \n    float dist = sdBox(p, vec2(3.0, 3.0));\n    \n    float frac = fract(dist);\n    float pfunc = pow(((pow((frac-0.5), 2.0))*4.0), 3.0);\n    float iredfunc = -pfunc * pow(1.5, dist) * min(0.0, dist);\n    float ibluefunc = pfunc * pow(0.675, dist) * max(0.0, dist);\n    float bkgblue = (-ibluefunc + 1.0) * max(0.0,(dist/abs(dist)));\n    float bkgred = (-iredfunc+ 1.0) * (min(0.0, sign(dist))*-1.0);\n    float border = -min(10.0*abs(dist), 1.0) + 1.0;\n    \n    vec3 bkgBlue = vec3(0.3, 0.33, 0.5);\n    vec3 bkgRed = vec3(0.5, 0.25, 0.2);\n    vec3 red = vec3(0.9, 0.8, -0.3);\n    vec3 blue = vec3(-0.3, 0.9, 1.1);\n    float bkgFalloff = 60.0 / (60.0 + abs(dist));\n    \n    // linear combination of colors\n    fragColor = vec4(\n        (border + bkgFalloff) * (\n            bkgBlue * bkgblue + bkgRed * bkgred\n        ) + iredfunc * red + ibluefunc * blue,\n        1.0\n    );\n}","name":"Image","description":"","type":"image"}]}