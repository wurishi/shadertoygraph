{"ver":"0.1","info":{"id":"dsc3zn","date":"1676892535","viewed":80,"name":"Astroid field raymarching","username":"Leo3065","description":"Raymarching on 3D version of Astroid.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distField(vec3 pos){\n    float theta_pre = .2 * PI - iTime * .0567 * PI;\n    float theta = .2 * PI + iTime * .227 * PI;\n    mat3 rot_mat_pre = mat3(\n        cos(theta_pre), 0, sin(theta_pre),\n        0, 1, 0,\n        -sin(theta_pre), 0, cos(theta_pre)\n    );\n    mat3 rot_mat_post = mat3(\n        cos(theta), 0, sin(theta),\n        0, 1, 0,\n        -sin(theta), 0, cos(theta)\n    );\n    pos = pos*rot_mat_pre;\n    pos = mod(pos+4., 8.) - 4.;\n    pos = pos*rot_mat_post;\n    return (\n        pow(abs(pos.x), 2./3.) + \n        pow(abs(pos.y), 2./3.) + \n        pow(abs(pos.z), 2./3.) - \n        pow(1., 2./3.))*.2;\n}\n\nvec3 distFieldNormal(vec3 pos){\n    float eps = 1e-3;\n    float dfx = distField(pos + eps*VX) - distField(pos - eps*VX);\n    float dfy = distField(pos + eps*VY) - distField(pos - eps*VY);\n    float dfz = distField(pos + eps*VZ) - distField(pos - eps*VZ);\n    return normalize(vec3(dfx, dfy, dfz));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    float y_offs = sin(iTime * .227 * PI);\n    \n    vec3 pos = vec3(0, y_offs, 5);\n    vec3 dir = normalize(vec3(uv.x*.5, uv.y*.5-.2 * y_offs, -1));\n    float d_step = 0.;\n    float d_dist = 0.;\n    \n    for(int i=0; i<128; i++){\n        d_step = distField (pos);\n        if(d_step < 0.){\n            break;\n        }\n        pos += dir*d_step;\n        d_dist += d_step;\n    }\n    \n    vec3 normal = distFieldNormal(pos);\n    \n    vec3 light = vec3(.5, .5, 2.5);\n    float hit_q = 1.-smoothstep(0., 0.01, d_step);\n    float base_n = dot(normalize(light-pos), normal);\n    float base_d = 1. / pow(1.05, d_dist);\n\n    vec3 col = vec3(hit_q*base_n*base_d);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159;\nconst float TAU = PI*2.;\nconst vec3 VX = vec3(1,0,0);\nconst vec3 VY = vec3(0,1,0);\nconst vec3 VZ = vec3(0,0,1);","name":"Common","description":"","type":"common"}]}