{"ver":"0.1","info":{"id":"cdcXRB","date":"1680729888","viewed":68,"name":"Pathtracer/marcher 1.0","username":"gcgac","description":"I couldn't decide which scene to use.\nFeatures:\nDiffuse surfaces\nReflective surfaces\nDepth of field\nAntialiasing\nGI\nSoft shadows","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["ray","gi","global","illumination","marching","pathtracer","tracing"],"hasliked":0,"parentid":"mstXWM","parentname":"Diffuse Pathtracer"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0,uv);\n    vec3 c = data.xyz/data.w;\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Thanks to Inigo Quilez for the PRNG and normal function\n\n\nint seed = 3;\nfloat arpeture_size = 0.0;\nfloat light = 0.0;\nfloat bri = 0.8;\nfloat schlick = 200000000000000000000000.0;\nvec3 rgb;\nfloat refl;\nint frand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat rand(void) { return float(frand())/32767.0; }\nvec3 point;\nfloat hash1( uint n ) {\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nfloat sde;\nvec3 pos;\nfloat maxl = 10000.0;\n\n\nfloat plane_sde(vec3 ray, vec3 nor, float planey, vec3 col, float l, float ref){\n    if (dot(ray,nor)+planey < sde){\n        sde = dot(ray,nor)+planey;\n        refl = ref;\n        rgb = col;\n        light = l;\n    }\n    return dot(ray,nor)+planey;\n}\n\n\nfloat sphere_sde(vec3 ray, vec3 position, float radius, vec3 col, float l, float ref){\n    if (length(position-ray)-radius < sde){\n        sde = length(position-ray)-radius;\n        refl = ref;\n        rgb = col;\n        light = l;\n    }\n    return length(position-ray)-radius;\n}\n\n \nfloat calc_sdf(vec3 ray){\n    sde = maxl;\n    sphere_sde(ray,vec3 (-20.0,3.0,80.0),13.0, vec3(bri,0,0),0.0,0.0);\n    plane_sde(ray,vec3(0,1,0),10.0, vec3(bri,bri,bri),0.0,0.0);\n    plane_sde(ray,vec3(1,0,0),41.0, vec3(0,bri,0),0.0,0.0);\n    plane_sde(ray,vec3(0,-1,0),46.0, vec3(2,2,2),1.0,0.0);\n    plane_sde(ray,vec3(0,0,-1),111.0, vec3(bri,bri,bri),0.0,0.0);\n    plane_sde(ray,vec3(0,0,1),11.0, vec3(0,0,0),0.0,0.0);\n    plane_sde(ray,vec3(-1,0,0),41.0, vec3(bri,0,0),0.0,0.0);\n    sphere_sde(ray,vec3 (0.0,2.0,80.0),10.0, vec3(0,bri,bri),0.0,0.0);\n    //sphere_sde(ray,vec3 (-10.0,30.0,80.0),10.0, vec3(5,5,5),1.0,0.0);\n    //sphere_sde(ray,vec3 (50.0,30.0,80.0),10.0, vec3(5,5,5),1.0,0.0);\n    //sphere_sde(ray,vec3 (-50.0,30.0,80.0),5.0, vec3(5,5,5),1.0,0.0);\n    //sphere_sde(ray,vec3 (-30.0,0.0,60.0),5.0, vec3(5,5,5),1.0,0.0);\n    sphere_sde(ray,vec3 (20.0,2.0,80.0),10.0, vec3(bri,bri,bri),0.0,0.3);\n    return sde;\n}\n\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(calc_sdf(p+h.xyy) - calc_sdf(p-h.xyy),\n                           calc_sdf(p+h.yxy) - calc_sdf(p-h.yxy),\n                           calc_sdf(p+h.yyx) - calc_sdf(p-h.yyx) ) );\n}\n\n\nvec4 raycol(vec3 orig, vec3 dir, float ml){\n    float len = 0.0;\n    light = 0.0;\n    sde = ml;\n    float steps = 0.0;\n    pos = orig;\n\n    while (len < ml && sde > 0.01){\n        sde = calc_sdf(pos);\n        pos += dir*sde;\n        len += sde;\n        steps += 1.0;\n    }\n    return vec4(pos,steps);\n}\n\n\nvec3 sphrand(){\n    point = vec3(2.0);\n    while(length(point)>=1.0){\n        point = vec3(rand()*2.0-1.0,rand()*2.0-1.0,rand()*2.0-1.0);\n    }\n    return point;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 newfrag = vec2(fragCoord.x+iResolution.x/2.0,fragCoord.y+iResolution.y/2.0); \n    uvec2 p = uvec2((newfrag-.5*iResolution.xy)/iResolution.y*1000.0);\n    seed = int(round(hash1( p.x + 1920U*p.y + (1920U*1080U))*100.0*(float(iFrame)+1.0)));\n    vec2 th = fragCoord/iResolution.xy;\n    vec3 colour = vec3(0);\n    for (int i = 0; i<1; i++){\n        vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y+sphrand().xy/iResolution.xy;\n        vec3 pos = vec3(sphrand().x*arpeture_size,sphrand().y*arpeture_size+10.0,-10.0);\n        vec3 direction = normalize(normalize(vec3(uv.x,uv.y,1.0))*80.0);\n        vec4 o;\n        float steps;\n        o = raycol(pos,direction,500.0);\n        vec3 newdir;\n        newdir = o.xyz;\n        if (sde <= 0.01){\n            vec3 fcol = rgb;\n            sde = 0.01;\n            float bounces = 0.0;\n            while (sde<=0.01 && bounces<4.0 && light == 0.0){    \n                float r = rand();\n                float pref = refl;\n                vec3 offset = sphrand();\n                vec3 pre = rgb;\n                steps =o.w;\n                vec3 inter = o.xyz+calcNormal(o.xyz)/10.0;\n                fcol *= pre;\n                if (pref<rand()){\n                    newdir = sphrand();\n                    if (dot(newdir,calcNormal(o.xyz))<0.0){\n                        newdir *= -1.0;\n                    }\n                } else{\n                    vec3 normal = calcNormal(o.xyz);\n                    newdir = newdir-2.0*dot(newdir,normal)*normal;\n                }\n                o = raycol(inter,normalize(newdir),1000.0);\n                bounces += 1.0;\n            }\n            if (light == 1.0){\n                if(bounces==0.0){\n                    colour += vec3(1.0);\n                } else{\n                    colour += fcol*rgb;\n                }\n            }\n        }else{\n            colour += vec3(0);\n        }\n    }\n    colour /= 1.0;\n    vec4 data = texture(iChannel0,th);\n    data += vec4(colour,1);\n    fragColor = data;\n}","name":"Buffer A","description":"","type":"buffer"}]}