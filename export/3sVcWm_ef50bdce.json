{"ver":"0.1","info":{"id":"3sVcWm","date":"1603022472","viewed":268,"name":"Grid road","username":"vanx","description":"Infinite 3D road with a grid texture and a moving sphere beneath it.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.0001\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat map(vec3 p) { \n    float sphere = distance(p, vec3(sin(iTime)*.2, sin(iTime)*.15, 0.0))-.1;    \n    float plane = p.y + (abs(p.x) > 2.?2.:0.);\n    return smin(plane,sphere,0.1);\n}\n\nfloat trace(vec3 origin, vec3 direction) {\n    float dist = 0.0;\n    for (float i = 0.0; i < 100.0 ; i++) {\n        vec3 p = origin + direction*dist;\n        float d = map(p);\n        if (d <= 0.001) {\n            break;\n        }\n        dist += d*.05;\n    }\n    return dist;\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 albedo(vec3 p) {\n  p *=2.5;\n  float a = 0.1;\n  float b = a + 0.01;\n  return 1.-vec3(2.) * smoothstep(a,b,fract(p.x))* smoothstep(a,b,fract(p.z + iTime*1.5));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    coord -= 0.5;\n    coord.x *= iResolution.x/iResolution.y;\n    \n    vec3 light = vec3(0.0, 15.5,2.0);\n\n    vec3 direction = normalize(vec3(coord, 1.0));\n    vec3 origin = vec3(0.0, 2.,-4.);\n    float dist = trace(origin, direction);  \n\n    vec3 p = origin + dist*direction;\n    vec3 norm = normal(p);    \n\n    vec3 diffuse = vec3(0.6,0.6,1.0)*clamp(dot(normalize(light-p), norm), 0.0, 1.0);    \n  \n    float brightness = 1.0-smoothstep(5.0, 300.0, distance(p, light));\n\n    vec3 color = vec3(0.0);  \n    color += diffuse*brightness*smoothstep(-20.0, -10.0, -distance(p, vec3(0.0))) * albedo(p);\n      \n    fragColor = vec4(color, 1.0);    \n}","name":"Image","description":"","type":"image"}]}