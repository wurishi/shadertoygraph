{"ver":"0.1","info":{"id":"4fcczf","date":"1730951867","viewed":21,"name":"trippy newtons method fractals","username":"tdkski","description":"fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 i = vec2(0., 1.);\n\n\nvec2 cmpmul(vec2 a, vec2 b) {\n    float real = a.x*b.x - a.y*b.y;\n    float imag = a.x*b.y + a.y*b.x;\n    return vec2(real, imag);\n}\nvec2 cmpdiv(vec2 a, vec2 b) {\n    float magsq = b.x*b.x + b.y*b.y;\n    float real = a.x*b.x + a.y*b.y;\n    float imag = a.y*b.x - a.x*b.y;\n    return vec2(real, imag) / magsq;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 a = vec2(0,0);\n    vec2 b = vec2(0,1);\n    vec2 c = 10. *(iMouse.xy - .5*iResolution.xy) / iResolution.x;\n    \n    vec2 x = 8. *(fragCoord.xy - .5*iResolution.xy) / iResolution.x;\n    \n    for(int i = 0; i < 300; i ++) {\n        vec2 f = cmpmul(cmpmul(a - x, b - x), x - c);\n        vec2 fPrime = cmpmul(a, b + c - 2.*x) + cmpmul(b, c - 2.*x) + cmpmul(x, 3.*x - 2.*c);\n        // Newton's Method Iteration\n        x -=  cmpdiv(f, fPrime);\n    }\n    float d1 = distance(x, a);\n    float d2 = distance(x, b);\n    float d3 = distance(x, c);\n      \n\n    vec3 col = vec3(.3/sqrt(x),3./(d1 + d2 + d3));\n \n \n    \n     \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}