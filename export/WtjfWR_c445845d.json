{"ver":"0.1","info":{"id":"WtjfWR","date":"1598659689","viewed":259,"name":"attemping clouds part 2","username":"danhel95","description":"my 2nd attempt to make  clouds !","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","ray","cloud","marching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Learning tutorial 5! \n// clouds part 2\n//Â based on https://www.shadertoy.com/view/wsjfRD by @42yeah,\n// and https://www.shadertoy.com/view/tt2cWh by @shikz86\n\n#define ITR 30.\n#define EPSILON 0.001\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n\nvec3 sun, sun_col;\nvec3 normal;\n\n\nstruct ray {\n    vec3 o;\n    vec3 d;\n    vec3 t;\n};\n\nfloat N21( vec3 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat N11(float n)\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat N31(in vec3 n)\n{\n\tvec3 i = floor(n);\n    vec3 f = fract(n);\n    f = f*f*(3.-2.*f);\n    float q = i.x+i.y*57.+i.z*113.;\n    float r =\n    mix(\n        mix(\n            mix(N11(q+0.),N11(q+1.),f.x),\n            mix(N11(q+57.),N11(q+58.),f.x),\n            f.y),\n        mix(\n            mix(N11(q+113.),N11(q+114.),f.x),\n            mix(N11(q+170.),N11(q+171.),f.x),\n            f.y),\n        f.z);\n\n    return r;\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f;\n    f = 0.5*N31(p);\n    return f;\n}\n\n\nfloat sphere( vec3 q,float r){\n\n    vec3 p = q *.5;\n    p *= 1. - .3*vec3(.1,0.2,.1);\n    p.z *= .6;\n    p.y -= pow(abs(p.x)/15.,-p.y*.1+1.5)*1.2;\n    p.x *= .8;\n    float d = length(p) - r;\n    return d;\n}\n\n\nfloat scene(in vec3 q)\n{\n    vec3 p = q - vec3(0.0,0.,2.0)*sin(iTime*.5);\n    float f = fbm(p);\n    vec2 r = vec2(6.,2.);\n    float d =1.;\n    d -= sphere(p,1.7);\n    d += 1.2*f;\n    return clamp(d,0.,.6);\n}\n\n\n\nmat3 camera(ray r , float roll)\n{\n\tvec3 f = normalize(r.t-r.o);\n    vec3 up = vec3(sin(roll),cos(roll),0.);\n    vec3 u = normalize(cross(f,up));\n    vec3 v = normalize(cross(u,f));\n    return mat3(u,v,f);\n}\n\nray raydir(vec2 uv) {\n\n    vec2 m = iMouse.xy / iResolution.xy;\n    float zoom = 1., roll=0.;\n    float camY = 4.+ .25*sin(iTime*.33) ;\n    float camX = 15. +.25*cos(iTime*.33);\n    float camZ = zoom - 8. ;\n    vec3 camPos = vec3(camX,camY,camZ);\n\n    //camPos += vec3(2., .0 ,2. );\n    vec3 lookat = vec3(0.);\n    ray r ;\n    r.o = camPos;\n    r.t = lookat;\n\n    mat3 viewCam = camera(r, roll);\n    vec3 o = vec3(uv,zoom);\n    vec3 rd =  viewCam * normalize(o);\n    r.d = normalize(rd);\n    return r;\n\n}\n\n\nvoid luminance(inout vec3 col, float lum)\n{\n\tlum /= \tdot(col.rgb,vec3(0.2126 , 0.7152  ,0.0722) );\n\tcol *= lum;\n}\n\n\nfloat fillMask(float dist)\n{\n\treturn clamp(-dist, 0.0, 1.0);\n}\nvec3 draw_light(vec3 p, vec3 l, vec3 color, float range, float radius,float shad)\n{\n\tfloat ld = length(p - l);\n\tvec3 rd = normalize(l - p);\n\tif (ld > range) return vec3(0.);\n\tfloat fall = (range - ld)/range;\n\tfall *= fall;\n\tfloat source = fillMask(sphere(p - l, radius));\n\treturn (shad* fall + source) * color;\n}\n\n\n\nvec4 march(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    // float denseD1 = .5;\n    // float denseE1 = .01;\n    float denseD2 = .01;\n    float denseE2 = .2 ;\n    float dd = 0.;\n    vec4 col = vec4(0.0);\n    for (float i = 0.; i < 1.; i+=1./ITR) {\n        float res = 0.;\n        vec3 p = ro + t * rd;\n        float d = scene(p);\n        vec4 color = vec4(d);\n        luminance(sun_col,1.5);\n        float dl = length(sun - p );\n        if (d < dl)\n            res = .5;\n        vec3 s = draw_light(p,sun,sun_col,100.,8.,.4);\n        color.rgb *= mix(s,color.rgb,.4);\n        //color *= pow(d/(denseD1 + d),denseE1);\n        color *= 1.2*exp(-(d -denseD2)*(d -denseD2)/denseE2);\n        col += color * (1. - col.a);\n        t += i;\n    }\n\n\n\n    col.rgb = clamp(col.rgb, 0., 1.) ;\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 st = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec2 uv = st*2.;\n\n    ray r = raydir(uv);\n    vec3 sky = mix(vec3(.1, .6, .9), vec3(.2, .2, .6), (.25-st.y));\n    sun = vec3(5.+.5*sin(iTime*.33)*10. , 15.  , 5.0 +.5*cos(iTime*.33)*10.  );\n    sun_col = vec3(.9, .3, 0.2) ;\n\n    vec4 col = march(r.o, r.d);\n    float fog = 1.1 - .8*col.a , a = 1.5, b = -.001;\n    vec3 colr = col.rgb;\n    colr = mix(vec3(col.rgb) * a * exp(b*col.a*col.a),sky, fog);\n    //gamma correction\n    colr = pow(colr,vec3(1./2.2));\n\n\n\n    fragColor = vec4(colr, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}