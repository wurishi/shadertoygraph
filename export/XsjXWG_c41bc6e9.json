{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define R 2.0\n#define max_steps 100\n#define max_distance 300.0\n#define epsilon 0.001\n#define shininess 5.0\n#define ambient 0.2\n#define bump_factor 0.05\n#define specular_koef 4.5\n#define K 0.37\n#define diffuse_koef 2.0\n\nvec4 texture3D(sampler2D t, vec3 p, vec3 n, float scale) {\n    return texture(t, p.yz * scale) * abs (n.x) +\n    \ttexture(t, p.xz * scale) * abs (n.y) +\n    \ttexture(t, p.xy * scale) * abs (n.z);\n}\n\nfloat get_distance(vec3 point) {\n    float bump = 0.0;\n    float elevation = 1.0;\n    \n    if(length(point) < R + bump_factor) {\n     \tbump = bump_factor * texture3D(iChannel1, point, normalize(-point), 0.5).r;   \n    }\n    return length(point) - R + bump;\n}\n\nfloat raymarch(vec3 ray_origin, vec3 ray_direction) {\n \tfloat d = 0.0;\n    \n    for (int i = 0; i < max_steps; i++) {\n    \tvec3 new_point = ray_origin + ray_direction*d;\n    \tfloat s = get_distance(new_point);\n    \tif (s < epsilon) return d;\n \t   \td += s;\n        if(d > max_distance) return max_distance;\n    }\n    \n\treturn max_distance;\n}\n\nvec3 get_normal(vec3 point) {\n \tfloat d0 = get_distance(point);\n    float dX = get_distance(point - vec3(epsilon, 0.0, 0.0));\n    float dY = get_distance(point - vec3(0.0, epsilon, 0.0));\n    float dZ = get_distance(point - vec3(0.0, 0.0, epsilon));\n    \n    return normalize(vec3(dX - d0, dY - d0, dZ - d0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ((2.0 * fragCoord.xy) - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 eye_pos = vec3(0.0, 0.0, -3.0);\n    vec3 forward = vec3(0.0, 0.0, 1.0);\n    vec3 light = vec3(cos(iTime), sin(iTime), -2.5);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = cross(up, forward);\n\tvec3 ray_dir = normalize(up * uv.y + right *uv.x + forward);\n    \n\tfloat d = raymarch(eye_pos, ray_dir);\n    \n    if(d < max_distance) {\n        vec3 point = (eye_pos+ray_dir*d);\n  \t\tvec3 point_normal = get_normal(point);\n  \t\tvec3 light_dir = -normalize(light-point);\n        vec3 reflected_light_dir = reflect(-light_dir, point_normal);\n  \t\tfloat dotp_diffuse = max(0.0, dot(reflected_light_dir, point_normal));\n\t\tfloat dotp_specular = pow(max(0.0, dot(ray_dir, reflected_light_dir)), shininess);\n        float attenuation = 1.0 / (1.0 + K*pow( length(light - point), 2.0));\n\n   \t\tif (dotp_diffuse <= 0.0) dotp_specular = 0.0;\n        \n        fragColor = texture3D(iChannel0, point, point_normal, 0.5) * (ambient + (dotp_diffuse*diffuse_koef + dotp_specular*specular_koef));\n    } else fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjXWG","date":"1415502451","viewed":261,"name":"Test Raymarch Ball","username":"Slyth","description":"test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}