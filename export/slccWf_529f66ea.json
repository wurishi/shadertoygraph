{"ver":"0.1","info":{"id":"slccWf","date":"1660653921","viewed":163,"name":"Hexagonal Circle Packing SDF","username":"TheTurk","description":"Distance function for circles arranged in a hexagonal lattice.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","circle","distance","hex","hexagonal","packing","circlepacking"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 position, float radius, float halfSpacing) {\n    vec2 s = vec2(2.0, sqrt(3.0) * 2.0) * (radius + halfSpacing);\n    position /= s;    \n    vec2 d1 = (fract(position) - 0.5) * s;\n    vec2 d2 = (fract(position + 0.5) - 0.5) * s;\n    return sqrt(min(dot(d1, d1), dot(d2, d2))) - radius;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float radius = 0.5;\n    float halfSpacing = 0.0;\n    float d = circle(position, radius, halfSpacing);\n\n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); // base color\n    color *= 1.0 - exp(-4.0 * abs(d)); // gradient\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d); // ripples\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.002) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = circle(mousePosition, radius, halfSpacing);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}