{"ver":"0.1","info":{"id":"cltfDB","date":"1701553651","viewed":64,"name":"QKEE2 Side-By-Side 3D","username":"tuxifan","description":"veins","likes":3,"published":1,"flags":1,"usePreview":0,"tags":["veins"],"hasliked":0,"parentid":"DttfDB","parentname":"QKEE2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nfloat hash( vec2 p ) { return fract(sin(1.0+dot(p,vec2(127.1,311.7)))*43758.545); }\nvec2  sincos( float x ) { return vec2( sin(x), cos(x) ); }\nvec3  opU( vec3 d1, vec3 d2 ){ return (d1.x<d2.x) ? d1 : d2;}\n\nvec2 sdCylinder( in vec3 p )\n{\n    return vec2( length(p.xz), (p.y+50.0)/100.0 );\n}\n\nvec3 map( vec3 p )\n{\n    float time = iTime*1.0;\n    \n    vec2  id = floor( (p.xz+1.0)/2.0 );\n    float ph = hash(id+113.1);\n    float ve = hash(id);\n\n    p.xz = mod( p.xz+1.0, 2.0 ) - 1.0;\n    p.xz += 0.5*cos( 2.0*ve*time + (p.y+ph)*vec2(0.53,0.32) - vec2(1.57,0.0) );\n\n    vec3 p1 = p; \n    p1.xz += .2*sincos(p.y-ve*time*ve+0.0);\n    vec3 p2 = p; \n    p2.xz += 0.15*sincos(p.y-ve*time*ve+2.0);\n    vec3 p3 = p; \n    p3.xz += 0.15*sincos(p.y-ve*time*ve+4.0);\n\n    // Reduce the Y-coordinate range for each worm\n    p1.y = clamp(p1.y, -10.0, -10.0); // Adjust these values as needed\n    p2.y = clamp(p2.y, -10.0, -10.0);\n    p3.y = clamp(p3.y, -10.0, -10.0);\n\n    vec2 h1 = sdCylinder( p1 );\n    vec2 h2 = sdCylinder( p2 );\n    vec2 h3 = sdCylinder( p3 );\n\n\n    return opU( opU( vec3(h1.x-0.15*(0.8+0.2*sin(200.0*h1.y)), ve + 0.000, h1.y), \n                     vec3(h2.x-0.15*(0.8+0.2*sin(200.0*h2.y)), ve + 0.015, h2.y) ), \n                     vec3(h3.x-0.15*(0.8+0.2*sin(200.0*h3.y)), ve + 0.030, h3.y) );\n\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd, in float px, const float maxdist )\n{\n    vec3 res = vec3(-1.0);\n    float t = 0.0;\n    for( int i=0; i<256; i++ )\n    {\n\t    vec3 h = map(ro + t*rd);\n        res = vec3( t, h.yz );\n        if( abs(h.x)<(px*t) || t>maxdist ) break;\n        t += min( h.x, 0.5 )*0.85;\n    }\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const vec2 e = vec2(1.0,-1.0)*0.003;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n    const float h = 0.1;\n\tfloat ao = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        vec3 dir = sin( float(i)*vec3(1.0,7.13,13.71)+vec3(0.0,2.0,4.0) );\n        dir = dir + 2.0*nor*max(0.0,-dot(nor,dir));            \n        float d = map( pos + h*dir ).x;\n        ao += h-d;\n    }\n    return clamp( 1.0 - 0.7*ao, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in float px )\n{\n    vec3 col = vec3(0.0);\n    \n    const float maxdist = 32.0;\n    vec3 res = intersect( ro, rd, px, maxdist );\n    if( res.x < maxdist )\n    {\n        vec3  pos = ro + res.x*rd;\n        vec3  nor = calcNormal( pos );\n        float occ = calcOcc( pos, nor );\n        \n        float blueHue = .6 + 1.*cos( res.y*10.0 + 1.0 );\n        col = vec3(blueHue, .0, .3); // Adjust the RGB values to get different shades of blue\n        col *= 0.5 + 1.5*nor.y; // This can be adjusted for shading effects\n        col += clamp(1.0+dot(rd,nor),0.0,1.0);\n\n       \n        float u = 800.0*res.z - sin(res.y)*iTime;\n       \n\n        float fl = mod( (0.5+cos(2.0+res.y*47.0))*iTime + res.y*7.0, 4.0 )/4.0;\n        col *= 2.5 - 1.5*smoothstep(0.02,0.04,abs(res.z-fl));\n        \n        col *= exp( -0.1*res.x );\n        col *= 1.0 - smoothstep( 20.0, 30.0, res.x );\n    }\n    \n    return pow( col, vec3(0.5,1.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    fragCoord.x *= 2.0;\n    bool isRight = fragCoord.x > iResolution.x;\n    if (isRight) fragCoord.x -= iResolution.x;\n\n\n    #define ZERO (min(iFrame,0))\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n    \n        vec3  ro = vec3(0.0, 1.0, isRight?-0.05:0.05); // Position camera above the scene\n        vec3  ta = vec3(0.0, 0.0, 0.0); // Target at the center of the scene\n        float fl = -2.0;\n        vec3  ww = normalize( ta - ro);\n        vec3  uu = normalize( cross( vec3(1.0, 0.0, 0.0), ww ) ); // Adjust camera up vector\n        vec3  vv = normalize( cross(ww, uu) );\n        vec3  rd = normalize( p.x*uu + p.y*vv - fl*ww ); // Adjust ray direction\n\n        vec3 col = render( ro, rd, 1.0/(iResolution.y*fl) );\n \n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    vec2 q = fragCoord.xy/iResolution.xy;\n    tot *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    \n\tfragColor = vec4( tot, 1.0 );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 ro = fragRayOri + vec3( 1.0, 0.0, 1.0 );\n    vec3 rd = fragRayDir;\n    vec3 col = render( ro, rd, 0.001 );\n    \n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}