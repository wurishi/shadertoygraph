{"ver":"0.1","info":{"id":"wtKXDW","date":"1582783173","viewed":656,"name":"Square to Cubemap","username":"iq","description":"Through Octahedron projection.","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 square_to_cube( in vec2 v )\n{\n    // Rune Stubbe's version, much faster than original\n    vec3 nor = vec3(v, 1.0 - abs(v.x) - abs(v.y));\n    float t = max(-nor.z,0.0);\n    nor.x += (nor.x>0.0)?-t:t;\n    nor.y += (nor.y>0.0)?-t:t;\n    return nor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // unit square \n    vec2 uv = fragCoord/iResolution.xy;\n\n    // to cube\n    vec3 dir = square_to_cube(2.0*uv-1.0);\n    \n    // sample cube (do max axis division internally)\n    vec3 col = texture( iChannel0, dir ).xyz;\n    \n    // mark octahedron faces\n    col *= 1.0 + 0.4*sign(dir)*smoothstep(-0.1,0.1,sin(2.0*iTime));\n        \n    // output\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}