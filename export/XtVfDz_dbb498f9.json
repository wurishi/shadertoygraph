{"ver":"0.1","info":{"id":"XtVfDz","date":"1542818207","viewed":467,"name":"Fractal Diamond Combination","username":"_polymath","description":"Some diamonds that merge as the camera pans out","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 p, float theta) {\n\tfloat s = sin(theta), c = cos(theta);\n    return vec2(\n    \tp.x * c + p.y * s,\n    \tp.y * c - p.x * s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float bigTime = mod(iTime / 10., 1.);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy - .5) * pow(2., bigTime);\n    uv = rotate(uv, 3.1415927 / 4.) * 5.;\n    vec2 bigUv = fract(uv * .5) * 2.;\n\tuv = fract(uv);\n    \n    vec4 back = vec4(0., 0., .4, 1.);\n    vec4 fore = vec4(0., 0., .8, 1.);\n    \n    if (bigTime > 0.5) {\n        if (bigUv.x > 1. != bigUv.y > 1.) {\n        \t// the top square that slides right\n            if (uv.y < 0.5)\n    \t    \tfragColor = (1. - uv.x > bigTime) ? fore : back;\n            else\n            // the bottom square that slides left\n    \t    \tfragColor = (uv.x > bigTime) ? fore : back;\n        } else {\n            // the constant squares\n            if (uv.x > 0.5 == uv.y > 0.5)\n                fragColor = fore;\n            // the square sliding in from the left\n            else if (uv.y < 0.5)\n                fragColor = (1.5 - uv.x < bigTime) ? fore : back;\n            // the square sliding in from the right\n            else\n                fragColor = (0.5 + uv.x < bigTime) ? fore : back;\n        }    \n    }\n    else {\n    \tif (uv.x > 0.5 != uv.y > 0.5)\n    \t    fragColor = back;\n\t    else\n    \t    fragColor = fore;\n    }\n}","name":"Image","description":"","type":"image"}]}