{"ver":"0.1","info":{"id":"wdy3Rt","date":"1570728333","viewed":428,"name":"ShaderTober - Frail","username":"Flopine","description":"A small doodle with inktober's theme \"Frail\"","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","transparency","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x, vec2(12.45,49.4564)))*1254.48);}\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a-per/2.,per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n// from: https://beta.observablehq.com/@mattdesl/heartbeat-function\nfloat beat (float value, float intensity, float frequency) \n{\n    float v = atan(sin(value * 3.14 * frequency) * intensity);\n    return (v + 3.14 / 2.) / 3.14;\n}\n\n// iq's formula https://iquilezles.org/articles/distfunctions\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\nfloat prim1(vec3 p)\n{return sdCapsule(p, vec3(0.,-1.5,0.), vec3(0.,1.5,0.), 1.4+p.y*0.3);}\n\nfloat cocoon(vec3 p)\n{\n    p *= 2.5;\n    p.x += sin(p.y*0.7);\n    p *= 0.4+beat(iTime,.3,1.);\n    float cap = prim1(p);\n    \n    p.xz *= rot(iTime);\n    p.xz *= rot(p.y*0.5);\n    p.xz = moda(p.xz, 2.*PI/3.);\n   \tp.x -= (2.-abs(p.y-1.)*0.3);\n    float branch1 = cyl(p.xz, 0.4);\n    \n    return smin(cap,branch1,3.)/2.5;\n}\n\nfloat ball (vec3 p)\n{\n    p.x += texNoise(p.yz*0.1-iTime*0.08).r*0.2;\n    p.y += texNoise(p.xz*0.1+iTime*0.05).r*0.2;\n    return max(-sphe(p,1.95),sphe(p,2.));\n}\n\nint mat_id;\nfloat SDF (vec3 p)\n{\n    float b = ball(p);\n    float c = max(cocoon(p),length(p)-2.);\n    float d = min(b,c);\n    \n    if (d == b) mat_id = 1;\n    if (d == c) mat_id = 2;\n    \n    return d;\n}\n\nvec3 get_normals (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(vec3(SDF(p+eps.xyy)-SDF(p-eps.xyy),\n                          SDF(p+eps.yxy)-SDF(p-eps.yxy),\n                          SDF(p+eps.yyx)-SDF(p-eps.yyx)\n                         )\n                    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(0.001,0.001,-3.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.),\n    \tlp = vec3(-4., 3, 1.);\n    \n   \t// transparency trick from Shane shader: \n    // https://www.shadertoy.com/view/Xd3SDs \n    float t=0., layers = 0., d, aD;\n    // light float parameters\n    float lDist, specular, lighting;\n    // thickness of the geometry\n    float thD = .00125;\n\n    for (float i=0.; i<64.; i++)\n    {\n        if(layers > 30. || t > 15.) break;\n        p = ro+t*rd;\n        d = SDF(p);\n\n        aD = (thD-abs(d))/thD;\n        if (aD>0.)\n        {\n            if (mat_id == 2) col += vec3(0.8,0.1,0.)*0.15;\n            vec3 sn = get_normals(p)*sign(d);\n            vec3 ld = (lp - p);\n            lDist = length(ld);\n            ld /= lDist;\n            specular = pow(max(dot(reflect(-ld, sn), -rd), 0.), 5.);\n            lighting = max(dot(ld, sn), 0.);\n            col += (lighting * 0.3 + vec3(0.,0.5,0.8)*specular)*aD / (1.+lDist*0.25 + lDist*lDist*0.05)*0.5;\n            layers ++;\n        }\n        d *= 0.9 + dither*0.02;\n        t += max(abs(d), thD*0.25);\n    }\n    \n    t = min(t, 15.);\n    col = mix(col, vec3(0.1), 1.-exp(-0.005*t*t));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}