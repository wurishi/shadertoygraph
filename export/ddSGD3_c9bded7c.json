{"ver":"0.1","info":{"id":"ddSGD3","date":"1668205616","viewed":147,"name":"Artober - Lattice","username":"Flopine","description":"Day 30 of artober challenge! Almost theeeeeeeere","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","lighting","pattern","hexagons","everyday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define hr vec2(1,sqrt(3.))\n#define hd(u) max(abs(u.x), dot(abs(u), normalize(hr)) )\n\n\nstruct obj\n{\n    float d;\n    int mat_id;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.x,p.y)+per*.5, per)-per*.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat hexgrid (vec2 uv)\n{\n    vec2 per = hr;\n    vec2 ga = mod(uv, per)-per*.5, gb=mod(uv-per*.5, per)-per*.5,\n    guv = (dot(ga,ga)<dot(gb,gb) ) ? ga:gb,\n    gid = uv-guv;\n    \n    float d = hd(guv);\n    d = .45-(1.*d);\n    moda(guv,3.);\n    d = min(d, abs(guv.y)-.025);\n    \n    return d;\n}\n\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 q = vec2(d, abs(p.z)-h);\n    return min(max(q.x, q.y), 0.)+length(max(q,0.));\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(PI/10.);\n    \n    p.y += iTime;\n    vec3 pp = p;\n    \n    p.z -= texture(iChannel0, p.xy*1.5).x*.08;\n    obj ground = obj(abs(p.z) -.1, 0);\n    \n    p = pp;\n    obj lace = obj(extrude(p, hexgrid(p.xy), 0.12)-.01, 1);\n    \n    return minobj(ground, lace);\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat spec (vec3 rd, vec3 l, vec3 n, float e)\n{return pow(max(dot(n, normalize(l-rd)),0.), e);}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e, 0., 1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.001, 0.01, -3.), rd=normalize(vec3(uv, 1.)), p=ro,\n    col=vec3(0.), l=vec3(.15, 0.8, -1.);\n    \n    obj O;\n    for (float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            break;\n        }\n        p += O.d*rd;\n    }\n    \n    vec3 n = gn(p); \n    float sp;\n    \n    if (O.mat_id == 0)\n    {\n        sp = spec(rd, l, n,20.); \n        col = vec3(0.,0.,0.04)+sp*vec3(0.3, 0.5, 0.6);\n    }\n    else if (O.mat_id == 1)\n    {\n        sp = spec(rd, l, n,50.);\n        col = vec3(.99, .75, 0.15)+sp*vec3(.9, .8, .4);\n    }\n    \n    float ao = AO(p,n,0.1)+AO(p,n,0.2)+AO(p,n,0.25);\n    col *= ao/3.;\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}