{"ver":"0.1","info":{"id":"XX2SDd","date":"1711240307","viewed":29,"name":"Instructor Course Presentation","username":"functorious","description":"Teaching something (anything) to hang gliders and paragliders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["teaching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 color, in vec2 coord )\n{\n    //vec3 pink = vec3(0.85,0.34,0.85);\n    //color = vec4(pink, 1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = coord/iResolution.xy;\n\n    // Play with math\n    //color = uv.x * vec4(pink, 1.0);\n    //color = uv.y * vec4(pink, 1.0);\n    //color = (1.0-uv.y) * vec4(pink, 1.0);\n    \n    //vec3 orange = vec3(0.9, 0.69, 0.43);\n    \n    //vec3 sunset = (1.-uv.y) * orange + (uv.y) * pink;\n    //color = vec4(sunset, 1.);\n    //sunset = (1.0 - uv.y) * sunset;\n    //color = vec4(sunset, 1.0);\n    \n    //vec3 sun = vec3(0.9, 0.9, 0.8);\n    //vec2 centerOfSun = vec2(0.5, 0.);\n    //float radiusOfSun = 0.15;\n    //float distanceFromSun = sqrt(pow(uv.x - centerOfSun.x, 2.0) +\n    //                            pow(uv.y - centerOfSun.y, 2.0));\n    //color = distanceFromSun < radiusOfSun\n    //            ? vec4(sun, 1.)\n    //            : vec4(sunset, 1.0);\n    \n    // Fix non-square aspect ratio\n    //distanceFromSun = sqrt(pow(uv.x - centerOfSun.x, 2.0) +\n    //                       pow(uv.y*0.7 - centerOfSun.y, 2.0));\n                \n    // Add hazy waves\n    //centerOfSun = vec2(0.01*sin(uv.y*300.) + 0.5, 0.);\n                                \n    // Make the sun set (and rise)\n    //centerOfSun = vec2(0.01*sin(uv.y*300.) + 0.5, 0.15*sin(iTime*0.2));\n    //sunset = sunset * 0.5*(sin(iTime*0.2) + 1.7);\n}","name":"Image","description":"","type":"image"}]}