{"ver":"0.1","info":{"id":"dl2BzD","date":"1706179544","viewed":31,"name":"sdArc Example","username":"sarram","description":"This shader, dynamically renders a rotating arc centered on the screen.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["arc","geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat sdArc(in vec2 position, in vec2 center, in float radius, in float thickness, in float angularWidth, in float angularOffset) {\n    // Translate position to be relative to the center\n    vec2 relPos = position - center;\n\n    // Convert to polar coordinates\n    float angle = atan(relPos.y, relPos.x);\n\n    // Adjust angle for rotation (angular offset)\n    angle -= angularOffset;\n\n    // Normalize the angle to be within the range [0, 2*PI]\n    if (angle < 0.0) angle += 2.0 * PI;\n    if (angle > 2.0 * PI) angle -= 2.0 * PI;\n\n    // Determine if the angle is within the arc's angular width\n    float halfWidth = angularWidth / 2.0;\n    bool insideAngle = angle >= halfWidth && angle <= 2.0 * PI - halfWidth;\n\n    // Compute the signed distance\n    float distance;\n    if (insideAngle) {\n        // Point is within the angular bounds of the arc\n        distance = abs(length(relPos) - radius) - thickness;\n    } else {\n        // Point is outside the angular bounds of the arc\n        // Calculate distance to the nearest point on the arc's boundary\n        vec2 nearestPointOnArc = center + vec2(cos(angle), sin(angle)) * radius;\n        distance = length(position - nearestPointOnArc) - thickness;\n    }\n\n    return distance;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Animation parameters\n    float time = iTime;\n\n    // Arc parameters\n    vec2 center = vec2(0.0, 0.0); // Center of the screen\n    float radius = 0.2; // Radius of the arc\n    float thickness = 0.02; // Thickness of the arc\n    float angularWidth = PI * 1.; // 90 degrees in radians\n    float angularOffset = PI * 0.5; // range[0 - 2PI]\n    \n    // Calculate the distance to the arc\n    float dist = sdArc(uv, center, radius, thickness, angularWidth, angularOffset);\n\n    // Render the arc based on the distance\n    float alpha = smoothstep(0.0, 0.01, -dist);\n    vec3 color = mix(vec3(0.0), vec3(1.0), alpha);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}