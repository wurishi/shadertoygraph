{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"mat2 rotate(float a)\n{\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\t\n}\n\n// https://www.shadertoy.com/view/MtsGWH\nvec4 boxmap( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n    vec3 m = pow( abs(n), vec3(k) );\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn (x*m.x + y*m.y + z*m.z)/(m.x+m.y+m.z);\n}\n\nfloat sdSphere(in vec3 p, in float r)\n{   \n    return (length(p)- r);\n}\n\nfloat udBox(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b,0.0));\n}\n\nfloat map1(in vec3 p)\n{   \n    p.y +=   0.3 * smoothstep( 0.2, 0.0, length(abs(p.xz) - vec2(0.4, 0.4))) * (1.0 - step(0.0, p.y));\n    p.y +=  -0.2 * smoothstep(0.15, 0.0, length(abs(p.xz - vec2(0.4,0.0)) - vec2(0.0, 0.4))) * step(0.0, p.y);\n    p.x += -0.15 * smoothstep( 0.4, 0.3, length(p.yz)) * step(0.0, p.x);\n    p.x +=  0.15 * smoothstep( 0.1, 0.0, length(abs(p.yz) - vec2(0.0, 0.1))) * step(0.0, p.x);\n    p.x +=   0.1 * smoothstep( 0.1, 0.0, length(abs(p.yz - vec2(0.35,0.0)) - vec2(0.0, 0.3))) * step(0.0, p.x);\n    p.x +=  0.15 * smoothstep( 0.1, 0.0, length(p.yz - vec2(0.35,0.0))) * (1.0 - step(0.0, p.x));\n    return 0.6 * sdSphere(p, 1.0);\n}\n\nfloat map2(in vec3 p)\n{   \n    float a;\n    a = atan(p.y, p.x);\n    p.xy += -0.1 * smoothstep(0.2, 0.0, abs(p.z)) * vec2(cos(a), sin(a));\n    a = atan(p.z, p.y);\n\tp.yz += -0.1 * smoothstep(0.4, 0.2, abs(p.x)) * vec2(cos(a), sin(a));\n    a = atan(p.x, p.z);\n    p.zx += 0.1 * smoothstep(0.3, 0.1, abs(p.y)) * vec2(cos(a), sin(a));\n    return 0.5 * udBox(p, vec3(0.7));\n}\n\nfloat map3(in vec3 p)\n{   \n    float a = atan(p.y, p.x);\n    p.xy += -0.1 * smoothstep(0.1, 0.0, abs(mod(p.z, 0.3) - 0.15)) * vec2(cos(a), sin(a));\n    return 0.6 * sdSphere(p, 1.0);\n}\n\nfloat de1(in vec2 p)\n{\n\treturn length(normalize(p) * 0.5 -p);\t\n}\n\nfloat de2(in vec2 p)\n{\n\treturn abs(abs(p.x) + abs(p.y) - 0.5);\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b)\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n\treturn length(pa - ba * h);\n}\n\nfloat de3(in vec2 p)\n{\n\treturn min(sdSegment(p, vec2(0.5, 0.5), vec2(-0.5, -0.5)),\n               sdSegment(p, vec2(-0.5, 0.5), vec2(0.5, -0.5)));\n}\n\nfloat map4(in vec3 p)\n{   \n    if (abs(p.x) > 0.6999) p.x += -0.15 * sign(p.x) * smoothstep(0.2, 0.0, de1(p.yz));\n    if (abs(p.y) > 0.6999) p.y += -0.15 * sign(p.y) * smoothstep(0.2, 0.0, de2(p.xz));\n    if (abs(p.z) > 0.6999) p.z += -0.15 * sign(p.z) * smoothstep(0.2, 0.0, de3(p.xy));\n    return 0.4 * udBox(p, vec3(0.7));\n}\n\nfloat map(in vec3 p)\n{   \n    float t = mod(iTime * 0.5, 12.0);\n    if (t < 3.0)  return mix(map1(p), map2(p), smoothstep( 1.0,  2.0, t));\n    if (t < 6.0)  return mix(map2(p), map3(p), smoothstep( 4.0,  5.0, t));\n    if (t < 9.0)  return mix(map3(p), map4(p), smoothstep( 7.0,  8.0, t));\n    if (t < 12.0) return mix(map4(p), map1(p), smoothstep(10.0, 11.0, t));\n    return 1.0;\n}\n\nvec3 calcNormal(in vec3 p)\n{\n\tconst vec2 e = vec2(0.0001, 0.0);\n\treturn normalize(vec3(\n\t\tmap(p + e.xyy) - map(p - e.xyy),\n\t\tmap(p + e.yxy) - map(p - e.yxy),\n\t\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n\tconst float maxd = 50.0;\n\tconst float precis = 0.001;\n    float h = precis * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for(int i = 0; i < 64; i++)\n    {\n        if(h < precis || t > maxd) break;\n\t    h = map(ro + rd * t);\n        t += h;\n    }\n    if(t < maxd) res = t;\n    return res;\n}\n\nvec3 transform(in vec3 p)\n{\n    p.yz *= rotate(iTime * 0.5);\n    p.zx *= rotate(iTime * 0.7);\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = vec3(0.1 + p.y * 0.15);\n   \tvec3 rd = normalize(vec3(p, -1.8));\n\tvec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 li = normalize(vec3(0.5, 0.8, 3.0));\n    ro = transform(ro);\n\trd = transform(rd);\n\tli = transform(li);\n    float t = march(ro, rd);\n    if(t > -0.001)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 n = calcNormal(pos);\n\t\tfloat dif = clamp((dot(n, li) + 0.5) * 0.7, 0.3, 1.0);\n        //col = texture(iChannel0, pos.xz).rgb * dif * dep;\n        col = boxmap( iChannel0, pos * 2.0, n, 32.0 ).xyz * dif;\n        col = pow(col, vec3(0.8));\n\t}\n   \tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtXGD7","date":"1422451086","viewed":237,"name":"boss","username":"gaz","description":"3d","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","de"],"hasliked":0,"parentid":"","parentname":""}}