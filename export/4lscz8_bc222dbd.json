{"ver":"0.1","info":{"id":"4lscz8","date":"1503535893","viewed":2226,"name":"Fractal Alien Text","username":"airtight","description":"Aztec Alien Fractal Text Transmission on a flag. Good at fullscreen.\nUses letter pattern shader by @_kzr: [url]https://github.com/keijiro/ShaderSketches/blob/master/Fragment/Text.glsl[/url]\n","likes":41,"published":3,"flags":32,"usePreview":0,"tags":["fractalflag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n\tAdding wobble and RGB shift PPO to Buffer A\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \n    vec3 col = vec3(0.0);\n    \n    //wobble\n    float strength = 0.008;\n    float size = 5.0; \n    float speed = 0.3;\n    vec2 p = -1.0 + 2.0 * uv;\n    float time = iTime * speed;\n    p.y -= time; //less wobble\n    vec2 wobble = strength * vec2(cos(time+length(p*size)), sin(time+length(p*size)));\n    uv += wobble;\n    \n    //offset rgb\n    vec2 offset = vec2(2) / iResolution.xy;\n    col.r = texture(iChannel0,uv + offset).r;\n    col.g = texture(iChannel0,uv ).g;\n    col.b = texture(iChannel0,uv - offset).b;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\n\tdraw letter shapes after subdividing uv space randomly\n\n*/\n\n#define PI 3.1415926535\n\nfloat random2d(vec2 n) { \n    return fract(sin(dot(n, vec2(129.9898, 4.1414))) * 2398.5453);\n}\n\nvec2 getCellIJ(vec2 uv, float gridDims){\n    return floor(uv * gridDims)/ gridDims;\n}\n\nvec2 rotate2D(vec2 position, float theta)\n{\n    mat2 m = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) );\n    return m * position;\n}\n\n//from https://github.com/keijiro/ShaderSketches/blob/master/Text.glsl\nfloat letter(vec2 coord, float size)\n{\n    vec2 gp = floor(coord / size * 7.); // global\n    vec2 rp = floor(fract(coord / size) * 7.); // repeated\n    vec2 odd = fract(rp * 0.5) * 2.;\n    float rnd = random2d(gp);\n    float c = max(odd.x, odd.y) * step(0.5, rnd); // random lines\n    c += min(odd.x, odd.y); // fill corner and center points\n    c *= rp.x * (6. - rp.x); // cropping\n    c *= rp.y * (6. - rp.y);\n    return clamp(c, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    //correct aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n\n    float t = iTime;\n    float scrollSpeed = 0.3;\n    float dims = 2.0;\n    int maxSubdivisions = 3;\n    \n    uv = rotate2D(uv,PI/12.0);\n    uv.y -= iTime * scrollSpeed;\n    \n    float cellRand;\n    vec2 ij;\n    \n   \tfor(int i = 0; i <= maxSubdivisions; i++) { \n        ij = getCellIJ(uv, dims);\n        cellRand = random2d(ij);\n        dims *= 2.0;\n        //decide whether to subdivide cells again\n        float cellRand2 = random2d(ij + 454.4543);\n        if (cellRand2 > 0.3){\n        \tbreak; \n        }\n    }\n   \n    //draw letters    \n    float b = letter(uv, 1.0 / (dims));\n\t\n    //fade in\n    float scrollPos = iTime*scrollSpeed + 0.5;\n    float showPos = -ij.y + cellRand;\n    float fade = smoothstep(showPos ,showPos + 0.05, scrollPos );\n    b *= fade;\n    \n    //hide some\n    //if (cellRand < 0.1) b = 0.0;\n    \n    fragColor = vec4(vec3(b), 1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}