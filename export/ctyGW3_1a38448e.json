{"ver":"0.1","info":{"id":"ctyGW3","date":"1684971035","viewed":32,"name":"T2_","username":"shorokhova_angelina","description":"--","likes":0,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 5; \nvec3 colAr[n] = vec3[n](vec3(0.2,0.8,0.1),vec3(0.65, 0.1,0.0),vec3(1.0, 0.0,0.0),vec3(1.0, 0.0,0.0),vec3(1.0, 0.0,0.0));\nvec3 BGcol = vec3(0.0, 0.0, 0.0); \nfloat zAr[n+1] = float[n+1](-5.0,7.0,3.0,3.0,4.0,-1000.); \nint F[5];\nconst int q = 10; \nvec2 polygons[q]=vec2[q](vec2(0.2,0.2),vec2(0.35,0.2),vec2(0.45,0.4),vec2(0.35,0.6),vec2(0.2,0.6),vec2(0.1,0.4),vec2(0.45,0.25),vec2(0.6,0.55),vec2(0.75,0.25),vec2(0.76,0.4));\nfloat r[3] = float[3](0.1,0.06,0.08);\nvec2 m[3]=vec2[3](vec2(0.0,0.0),vec2(0.,0.),vec2(0.,0.));\n \nvoid initPolygons(vec2 uv){ \npolygons[0]=vec2(0.3*sin(2.*iTime)+0.5,0.2+0.3*cos(2.*iTime));\npolygons[1]=vec2(0.3*sin(2.*iTime)+0.65,0.2+0.3*cos(2.*iTime));\npolygons[2]=vec2(0.3*sin(2.*iTime)+0.75,0.4+0.3*cos(2.*iTime));\npolygons[3]=vec2(0.3*sin(2.*iTime)+0.65,0.6+0.3*cos(2.*iTime));\npolygons[4]=vec2(0.3*sin(2.*iTime)+0.5,0.6+0.3*cos(2.*iTime));\npolygons[5]=vec2(0.3*sin(2.*iTime)+0.4,0.4+0.3*cos(2.*iTime));\npolygons[7]=vec2(0.4*cos(2.*iTime)-0.05*sin(2.*iTime)+0.4,0.4+0.6*sin(2.*iTime)+0.1*cos(2.*iTime));\npolygons[6]=vec2(0.1*cos(2.*iTime)-0.05*sin(2.*iTime)+0.4,0.4+0.3*sin(2.*iTime)+0.1*cos(2.*iTime));\npolygons[8]=vec2(0.25*cos(2.*iTime)-0.35*sin(2.*iTime)+0.4,0.4+0.45*sin(2.*iTime)+0.4*cos(2.*iTime));\npolygons[9]=vec2(0.26*cos(2.*iTime)-0.35*sin(2.*iTime)+0.43,0.55+0.45*sin(2.*iTime)+0.4*cos(2.*iTime));\nreturn;\n}\n\nbool inSphere(vec2 p,vec2 move_of_center,float r,int i){ \nfloat d =length( p - move_of_center )-r;\nzAr[i]=sqrt(r*r- (p.x-move_of_center.x)*(p.x-move_of_center.x)-(p.y-move_of_center.y)*(p.y-move_of_center.y))-cos(0.5*iTime)+50.;\n  if (d<0.0) return true; \n  return false;\n}\n\nfloat LeftTurn(vec2 v1, vec2 v2, vec2 v3){\nfloat d=(v2.x-v1.x)*(v3.y-v1.y)-(v3.x-v1.x)*(v2.y-v1.y);\n    if (d<0.0) return -1.0;\n    if (d==0.0) return 0.0;\n    return 1.0;\n} \n\n\nbool inPolygon(int size,int ind, vec2 p) {\nint c=0;\nfor(int i=ind;i<ind+size;i++){\nif(LeftTurn(polygons[i],polygons[i+1],p)>0.0)\nc++;\n}\nif(LeftTurn(polygons[size+ind],polygons[ind],p)>0.0)\nc++;\nif (c==size+1) return true;\nreturn false;\n}\n\nbool inPolygon2(int num, vec2 p) {\nvec2 a=polygons[6];\nvec2 b=polygons[7];\nvec2 c=polygons[8];\nif((LeftTurn(a,b,p)>0.0)&& (LeftTurn(b,c,p)>0.0)&&(LeftTurn(c,a,p)>0.0)) return true;\nreturn false;\n}\nbool inPolygon3(int num, vec2 p) {\nvec2 a=polygons[6];\nvec2 b=polygons[7];\nvec2 c=polygons[9];\nif((LeftTurn(a,b,p)>0.0)&& (LeftTurn(b,c,p)>0.0)&&(LeftTurn(c,a,p)>0.0)) return true;\nreturn false;\n}\nbool inPolygon4(int num, vec2 p) {\nvec2 a=polygons[6];\nvec2 b=polygons[8];\nvec2 c=polygons[9];\nif((LeftTurn(a,b,p)>0.0)&& (LeftTurn(b,c,p)>0.0)&&(LeftTurn(c,a,p)>0.0)) return true;\nreturn false;\n}\nbool inPolygon5(int num, vec2 p) {\nvec2 a=polygons[7];\nvec2 b=polygons[9];\nvec2 c=polygons[8];\nif((LeftTurn(a,b,p)>0.0)&& (LeftTurn(b,c,p)>0.0)&&(LeftTurn(c,a,p)>0.0)) return true;\nreturn false;\n}\n\n\nfloat get_z_f(vec2 p,int t){\nif (t==0) zAr[0]=-10.;\nelse if (t==1) zAr[1]= 0.5*p.x+0.5*p.y+51.-cos(17.*iTime);\nreturn zAr[t];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 col[6];\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    col[5]=BGcol;\n    initPolygons(uv);\n    m[0] = vec2(cos(2.*iTime)*0.4, sin(3.*iTime)*0.3-0.1);\n    m[1]=vec2(sin(2.*iTime)*0.2-0.3,cos(iTime)*0.4);\n    m[2]=vec2(sin(2.*iTime)*0.2+0.3,sin(iTime)*0.4);\n    if(inSphere(uv,m[0],r[0],4)){\n    F[4]=1;\n     col[4]=vec3(0.6,0.0,0.);\n    vec2 a=m[0];\n    for (float i=-2.0;i<2.0;i+=1.){\n    if((uv.y>a.y+a.x-r[0]*i-uv.x)&&(uv.y<a.y+a.x-r[0]*(i-0.3)-uv.x)){\n        col[4]=vec3(0.4,0.1,0.0);\n    }     \n    else if((uv.y>a.y+a.x-r[0]*i-uv.x)&&(uv.y<a.y+a.x-r[0]*(i-0.5)-uv.x)){\n        col[4]=vec3(1.0,0.0,0.0);\n    } \n}}\nif(inSphere(uv,m[1],r[1],3)){\nF[3]=1;\n    col[3]=vec3(0.6,0.0,0.);\n    vec2 a=m[1];\n    for (float i=-2.0;i<2.0;i+=0.5){\nif(((uv.y<a.y-a.x+r[1]*i+uv.x)&&(uv.y>a.y-a.x+r[1]*(i-0.1)+uv.x))||((uv.y>a.y+a.x-r[1]*i-uv.x)&&(uv.y<a.y+a.x-r[1]*(i-0.15)-uv.x))){\n col[3]=vec3(1.0,0.0,0.0);}\n    }}\n    if(inSphere(uv,m[2],r[2],2)){\n    F[2]=1;\n    col[2]=vec3(0.0,0.3,0.);\n    vec2 a=m[2];\n    for (float i=-2.0;i<2.0;i+=0.5){\nif((uv.y<a.y-a.x+r[2]*i+uv.x)&&(uv.y>a.y-a.x+r[2]*(i-0.2)+uv.x)){\n col[2]=vec3(0.,1.,0.0);\n    }}\n    }\n    uv+=0.5;\n    if (inPolygon(5,0,uv)) {\n    col[0]=colAr[1];}\n    F[0]=1;\n    if (inPolygon2(0,uv)) {F[1]=1; col[1]=colAr[0];}\n    else if (inPolygon4(0,uv)) {F[1]=1; col[1]=vec3(0.1, 0.5, 0.1);}\n    else if (inPolygon5(0,uv)) {F[1]=1; col[1]=vec3(0.1, 0.7, 0.1); }\n    else if (inPolygon3(0,uv)) {F[1]=1; col[1]=vec3(0.1, 0.1, 0.1);}\n    \n vec3 c;\n c=col[5];//BG\n int j=0;\n     float z_max = zAr[5];\n     float z1;\n        for(int k=0;k<5;k++){\n            if(F[k]==1)\n                z1 = get_z_f(uv, k);\n            if(z1>z_max){\n                z_max=z1;\n                c=col[k];\n            }\n\n        }\n        \n    fragColor = vec4(c,1.0);\n      \n}\n","name":"Image","description":"","type":"image"}]}