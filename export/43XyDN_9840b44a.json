{"ver":"0.1","info":{"id":"43XyDN","date":"1726163238","viewed":45,"name":"psyph 3D mandelbrot","username":"Psyph","description":"3D mandelbrot function drawer. its ok. now with bifurcation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\nvec3 palette(float t)\n\n{\n    vec3 a=vec3(0.600,0.600,0.500);\n    vec3 b=vec3(0.620,0.620,0.620);\n    vec3 c=vec3(.8,.8,.5);\n    vec3 d=vec3(0.000,0.2,0.5);\n\treturn a+b*cos(2.*PI*(c*t+d));\n}\n\nvec3 rot(vec3 p, vec3 axis, float ang)\n{\n    axis=normalize(axis);\n    return mix(dot(axis,p)*axis,p,cos(ang))+cross(axis,p)*sin(ang);\n}\n\nvec3 getm(float s)\n{\n    vec3 m = vec3((iMouse.y-abs(iMouse.w))/(50./s),-(iMouse.x-abs(iMouse.z))/(50./s),0.);\n    m.z=length(m.xy);\n    if(m.z==0.)\n    {\n        m=vec3(1.,0.,-iTime/2.);\n    }\n    return m;\n}\n\nvec2 iSqu(vec2 z)\n{\n    return vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y);\n}\n\nfloat func(vec2 p)\n{\n    //return (p.x*p.x+p.y*p.y);\n    //return cos(p.x*p.y)*sin(p.y)*p.x;\n    //return p.x*sin(p.y);\n    //return cos(p.x)*sin(p.y);\n    //return p.x+p.y;\n    return cos(p.x)*sin(.2*p.y)*3.;\n}\n\nbool mand2(vec3 p)\n{\n    float err=.005;\n    int i=0;\n    vec2 c=vec2(0.);\n    int mini=45;\n    while(i<70)\n    {\n        while(i<mini)\n        {\n            c=iSqu(c)+p.xy;\n            i++;\n            if(length(c)>3.)\n            {\n                return false;\n\n            }\n        }\n        \n        if(abs(length(c)-p.z*2.)<err)\n        {\n            return true;\n        }\n        mini++;\n    }\n    return false;\n}\n\nfloat funcB(vec3 p, vec3 b)\n{\n    \n    float dep=1.5;\n    //float c=0.;\n    float c=-dep;\n    //while(c<0.)\n    while(c<dep)\n    {\n        vec3 p2=p-c*b;\n        if(mand2(p2))\n        {\n            return p2.z;\n        }\n        //c+=20.;\n        c+=.01;\n    }\n    return dep+20.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float scale=1.1;\n    vec3 m=getm(scale);\n    uv=scale*2.*uv-scale;\n    uv+=vec2(-.55,0);\n    \n    vec3 back=vec3(0.,0.,1.);\n    back=rot(back,vec3(m.xy,0.),m.z);\n    \n    vec3 uv2=rot(vec3(uv,0.),vec3(m.xy,0.),m.z);\n    float ans=funcB(uv2,back);\n    \n    //vec3 col = vec3(ans);\n    vec3 col = vec3(0.);\n    col=palette(ans*1.5);\n    \n    if(ans>3.)\n    {\n        col=vec3(0.);\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}