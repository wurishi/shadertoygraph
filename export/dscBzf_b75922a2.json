{"ver":"0.1","info":{"id":"dscBzf","date":"1714997794","viewed":66,"name":"Fork Bleepy blocks","username":"chenxiang","description":"Wanted to test this funky square pattern before applying it in a raymarched tunnel.. which I hope is coming soon :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["simplesquaresrandom"],"hasliked":0,"parentid":"MsXSzM","parentname":"Bleepy blocks"},"renderpass":[{"inputs":[],"outputs":[],"code":"#ifdef UNIFORM_PARAM\n\nuniform int tiles; //[1,6,10]\n\nuniform float size; //[1.0,4.0,10.0]\nuniform float edge; //[1.0,2.0,10.0]\nuniform float speed; //[0.0,0.1,0.5]\n\nuniform vec3 color; //[0.2, 1.0, 0.5]\n\n#else\n\nconst int tiles = 6;\n\nconst float size = 4.0;\nconst float edge = 2.0;\nconst float speed = 0.1;\n\nconst vec3 color = vec3(0.2, 1.0, 0.5);\n\n#endif\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 p = (fragCoord - 0.5 * R) / min(R.x, R.y);\n\n    p *= float(tiles);\n    \n    vec2 pf = fract(p);\n    vec2 pn = floor(p);\n\n    // cell shape\n    vec2 r = size * pow(pf - 0.5, vec2(2.0));\n    float d = dot(r, r);\n    //d = clamp(d, 0.0, 1.0);\n    d = 1.0 - pow(d, edge);\n\n    // cell animation\n    float t = speed * iTime;\n    float rn = random(pn);\n    float b = 1.0 - fract(rn + t);\n    b = 3.0 * (b - 0.5);\n    b = clamp(b, 0.1, 1.0);\n    \n    // cell color\n    vec3 col = color * d * b;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}