{"ver":"0.1","info":{"id":"clsXDS","date":"1675896695","viewed":62,"name":"Poppcorn2","username":"asire","description":"playing with popcorn shaders and shapes","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat shapeSDF(vec3 samplePoint) {\n    float r = length(samplePoint.xy);\n    float theta = atan(samplePoint.y, samplePoint.x);\n    return length(10.0 + 25.0 * cos(sin( theta * iTime * 0.5 ) * 2.1 )) - 1.6 * r;\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n    return shapeSDF(samplePoint);\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    vec2 uv = fragCoord / iResolution.x + 0.01*iTime;vec2 gra = vec2(0.0);\n    vec3 col = vec3(0.0);\n    \n    float a = 64.0;\n        \n    if (dist > MAX_DIST - EPSILON) {\n    \n        uv *= 1.4;\n        a = 128.0;\n        \n        for( int i=0; i<64; i++ )\n        {\n            uv.x += (0.1/ a )*cos( 20.0 * cos(iTime * 0.01) + 2.2831*tan(4.2831*uv.yx + 0.06*iTime*vec2(1.0,2.1)) + 0.1*iTime*vec2(2.1,1.3) ).x;\n            uv.y += (0.1/ a)*cos( 2.2831*cos(8.2831*uv.yx + 0.02*iTime*vec2(1.7,2.1)) + 0.1*iTime*vec2(1.1,1.3) ).x;\n\n            vec3 tex = texture( iChannel0, uv ).xyz;\n            col += tex*(1.0/64.0);\n            gra += vec2( tex.x - texture( iChannel0, uv+vec2(1.0/iChannelResolution[0].x,0.0) ).x,\n                         tex.x - texture( iChannel0, uv+vec2(0.0,1.0/iChannelResolution[0].y) ).x );\n            \n        }\n        col += 0.02*(gra.x + gra.y);\n        fragColor = vec4( col * 0.5 + 0.5, 1.0 );\n        return;\n    }\n    \n\t\n    uv *= 0.4;    \n    vec2 ouv = uv;\n    \n    for( int i=0; i<64; i++ )\n    {\n        uv.x += (0.1/ a )*cos( 20.0 * cos(iTime * 0.01) + 2.2831*tan(4.2831*uv.yx + 0.06*iTime*vec2(1.0,2.1)) + 0.1*iTime*vec2(2.1,1.3) ).x;\n            uv.y += (0.1/ a)*cos( 2.2831*cos(8.2831*uv.yx + 0.02*iTime*vec2(1.7,2.1)) + 0.1*iTime*vec2(1.1,1.3) ).x;\n\n            vec3 tex = texture( iChannel0, uv ).xyz;\n            col += tex*(1.0/64.0);\n            gra += vec2( tex.x - texture( iChannel0, uv+vec2(1.0/iChannelResolution[0].x,0.0) ).x,\n                         tex.x - texture( iChannel0, uv+vec2(0.0,1.0/iChannelResolution[0].y) ).x );\n    }\n    \n    col += 0.01*(gra.x + gra.y);\n    fragColor = vec4( col * 0.5 + 0.5, 1.0 );\n}","name":"Image","description":"","type":"image"}]}