{"ver":"0.1","info":{"id":"MlXyz4","date":"1503621220","viewed":87,"name":"Test for variable wave deadzone.","username":"bradleygriffith","description":"Testing ability to dynamically adjust the width of the dip of a single wave from the center of a range between 0.0 and 1.0.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358\n\nfloat isWave(vec2 uv, float deadZoneWidth, float y) {\n    float x = uv.x + 0.25;\n    \n    // Distance of adjusted x from 0.75, min of 0.0 and max of 0.5\n    float firstDist = distance(x, 0.75);\n\n\t// Adjust pixel based deadZoneWidth to percentage of x\n    float dropDistance = deadZoneWidth / iResolution.x;\n    \n    // Divide dropDistance by two, as we will be working it out in either direction from the center position.\n    float halfDropDistance = dropDistance / 2.0;\n    \n    // Clamp distance of uv from center (0.75) to something between 0.5 and the halfDropDistance from center.\n    float removedDistance = max(firstDist, halfDropDistance);\n    \n    // Find the percentage of removedDistance within the range of halfDropDistance..0.5\n    float distanceOfRange = (removedDistance - halfDropDistance) / (0.5 - halfDropDistance);\n    \n    // Convert distanceOfRange to a number between 0.0 and 0.5. This means that for any pixel +/- halfDropDistance from center, the value will be 0.5.\n    float offsetDist = (0.5 * (1.0 - (distanceOfRange)));\n    \n\n    if (x < 0.75) {\n    \tx = 0.25 + offsetDist;  \n    } else {\n        x = 1.25 - offsetDist;\n    }\n\n    \n    float variance = sin((x) * PI * 2.0) / 2.0;\n    \n\n    // Adjust y\n    y += variance;\n    \n    // Draw\n    // `smoothstep` used instead of `step` to smooth aliasing on curves.\n    return smoothstep(y, y + 0.007, uv.y);\n}\n\nvec4 isWaveLine(vec2 uv, float deadZoneWidth, float width) {\n    float p = 1.0 / iResolution.y;\n    \n    width = width * p; // Normalize width.\n    \n\t// Define line constraints\n\tfloat h = width / 2.0;\n    float top = 0.5 + h;\n    float bottom = 0.5 - h;\n    \n    float topWave = isWave(uv, deadZoneWidth, top);\n    float bottomWave = isWave(uv, deadZoneWidth, bottom);\n    \n    return vec4(bottomWave - topWave);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    float deadZoneWidth = 1.0;\n    if (iMouse.z > 0.0) {\n        deadZoneWidth = iMouse.x;\n    }\n    \n    float width = 2.0;\n    \n    fragColor = isWaveLine(uv, deadZoneWidth, width);\n}","name":"Image","description":"","type":"image"}]}