{"ver":"0.1","info":{"id":"4ltSDX","date":"1481852574","viewed":187,"name":"Shader night - Audio Input 2","username":"inantop","description":"Shader night","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lsjGDW","filepath":"https://soundcloud.com/jerry-davis-6/beethovens-9th-symphony-1st","previewfilepath":"https://soundcloud.com/jerry-davis-6/beethovens-9th-symphony-1st","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//Check out https://www.shadertoy.com/view/XltSDX  if you haven't already.\n    \n    //We can get visually interesting results by taking both x and y positions of the pixel into consideration.\n    //For example, let's take the distance of the pixel from the center of the buffer as our key into the audio\n    //texture this time.\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Move our coordinate space from (0..1) on both axes to (-1..1) on both axes, with (0,0) in the center\n    uv = uv * 2.0 - 1.0;\n    \n    //Since the coordinate space is now (-1, 1), the maximum length possible is sqrt(1 + 1) i.e. sqrt(2).\n    //We'll normalize the length by this.\n    float len = length(uv) / sqrt(2.0);\n    \n    //You can try visualizing len by outputing fragColor = vec4(len)\n    \n    //Using the length as our key into the texture\n    vec2 firstRow = vec2(len, 0.25);\n    \n    fragColor = texture(iChannel0, firstRow);\n}","name":"Image","description":"","type":"image"}]}