{"ver":"0.1","info":{"id":"4cSyzD","date":"1721950512","viewed":121,"name":"GPU hacks #16 - C# CUDA ","username":"PrzemyslawZaworski","description":"Common tab contains simple CUDA framework for C# language (Windows) - with working example, visually equivalent to visible shader. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["framework","tutorial","particles","c","nvidia","cuda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord-iResolution.xy) / iResolution.y;        \n    float kx = 0.0;\n    float ky = 0.0;\n\tfor (float i = 1.0; i < 64.0; i++)\n\t{\n\t\tfloat qx = i * 127.1 + i * 311.7;\n        float qy = i * 269.5 + i * 183.3;\n\t\tfloat hx = fract(sin(qx) * 43758.5453);\n        float hy = fract(sin(qy) * 43758.5453);\n\t\tfloat px = cos(hx * iTime + 1.0);\n        float py = cos(hy * iTime + 1.0);\n\t\tfloat d = 0.015 / length(uv - vec2(px, py));\n\t\tkx += d * hx;\n        ky += d * hy;\n\t}\n\tfragColor = vec4(kx * ky, kx, ky, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// C# CUDA simple framework by Przemyslaw Zaworski. To run program, you need to have NVIDIA GPU.\n// Compile with Visual Studio C# command-line: csc CUDA.cs\n\n/////////// CUDA.cs:\n/*\nusing System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n\t[DllImport(\"user32.dll\")]\n\tstatic extern IntPtr CreateWindowEx(int dwExStyle, UInt16 regResult, string lpWindowName, UInt32 dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);\t\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern IntPtr DefWindowProc(IntPtr hWnd, uint uMsg, IntPtr wParam, IntPtr lParam);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern bool DestroyWindow(IntPtr hWnd);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern IntPtr DispatchMessage([In] ref MSG lpmsg);\t\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern short GetAsyncKeyState(System.Int32 vKey);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern IntPtr GetDC(IntPtr hWnd);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern IntPtr LoadCursor(IntPtr hInstance, int lpCursorName);\t\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern bool PeekMessage(out MSG lpMsg, uint hWnd, uint wMsgFilterMin, uint wMsgFilterMax, uint wRemoveMsg);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern void PostQuitMessage(int nExitCode);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern System.UInt16 RegisterClassEx([In] ref WNDCLASSEX lpWndClass);\n\n\t[DllImport(\"user32.dll\")]\n\tstatic extern bool TranslateMessage([In] ref MSG lpMsg);\n\n\t[DllImport(\"gdi32.dll\")]\n\tstatic extern int StretchDIBits(IntPtr hdc, int x, int y, int w, int h, int xs, int ys, int sw, int sh, IntPtr bs, [In] ref BITMAPINFO lpbmi, uint usage, uint rop);\t\n\n\t[DllImport(\"nvcuda.dll\")]\n\tstatic extern int cuInit(uint flags);\n\n\t[DllImport(\"nvcuda.dll\")]\n\tstatic extern int cuDeviceGet(out IntPtr device, int ordinal);\n\n\t[DllImport(\"nvcuda.dll\", EntryPoint=\"cuCtxCreate_v2\")]\n\tstatic extern int cuCtxCreate(out IntPtr pctx, uint flags, IntPtr device);\n\n\t[DllImport(\"nvcuda.dll\", EntryPoint = \"cuMemAlloc_v2\")]\n\tstatic extern int cuMemAlloc(out IntPtr dptr, uint bytesize);\n\n\t[DllImport(\"nvcuda.dll\")]\n\tstatic extern int cuModuleLoadDataEx(out IntPtr module, IntPtr image, uint numOptions, uint options, uint optionValues);\n\n\t[DllImport(\"nvcuda.dll\")]\n\tstatic extern int cuModuleGetFunction(out IntPtr hfunc, IntPtr hmod, string name);\n\n\t[DllImport(\"nvcuda.dll\")]\n\tstatic extern int cuLaunchKernel(IntPtr f, uint gx, uint gy, uint gz, uint bx, uint by, uint bz, uint shared, IntPtr stream, IntPtr[] args, IntPtr[] extra);\n\n\t[DllImport(\"nvcuda.dll\", EntryPoint = \"cuMemcpyDtoH_v2\")]\n\tstatic extern int cuMemcpyDtoH(IntPtr dstHost, IntPtr srcDevice, uint byteCount);\n\n\t[DllImport(\"nvcuda.dll\", EntryPoint = \"cuMemFree_v2\")] \n\tstatic extern int cuMemFree(IntPtr dptr);\n\n\tstruct POINT { public Int32 x; public Int32 Y; } \n\n\tstruct MSG { public IntPtr hwnd; public UInt32 message; public UIntPtr wParam; public UIntPtr lParam; public UInt32 time; public POINT pt;}  \n\n\tstruct WNDCLASSEX\n\t{\n\t\tpublic int cbSize;\n\t\tpublic int style;\n\t\tpublic IntPtr lpfnWndProc; \n\t\tpublic int cbClsExtra;\n\t\tpublic int cbWndExtra;\n\t\tpublic IntPtr hInstance;\n\t\tpublic IntPtr hIcon;\n\t\tpublic IntPtr hCursor;\n\t\tpublic IntPtr hbrBackground;\n\t\tpublic string lpszMenuName;\n\t\tpublic string lpszClassName;\n\t\tpublic IntPtr hIconSm;\n\t}\n\n\tstruct BITMAPINFOHEADER\n\t{\n\t\tpublic uint biSize;\n\t\tpublic int biWidth;\n\t\tpublic int biHeight;\n\t\tpublic ushort biPlanes;\n\t\tpublic ushort biBitCount;\n\t\tpublic int biCompression;\n\t\tpublic uint biSizeImage;\n\t\tpublic int biXPelsPerMeter;\n\t\tpublic int biYPelsPerMeter;\n\t\tpublic uint biClrUsed;\n\t\tpublic uint biClrImportant;\n\t}\n\n\tstruct RGBQUAD\n\t{\n\t\tpublic byte rgbBlue;\n\t\tpublic byte rgbGreen;\n\t\tpublic byte rgbRed;\n\t\tpublic byte rgbReserved;\n\t}\n\n\tstruct BITMAPINFO \n\t{\n\t\tpublic BITMAPINFOHEADER bmiHeader;\n\t\t[MarshalAsAttribute( UnmanagedType.ByValArray, SizeConst = 1, ArraySubType = UnmanagedType.Struct )]\n\t\tpublic RGBQUAD[] bmiColors;\n\t}\n\n\tdelegate IntPtr WndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam);\n\tstatic WndProc WindowProcPointer = WindowProc;\n\n\tstatic IntPtr WindowProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam)\n\t{\n\t\tif (msg==0x0010 || msg==0x0002 || (msg==0x0100 && wParam.ToInt32()==0x1B))\n\t\t{\n\t\t\tPostQuitMessage(0); return IntPtr.Zero;\n\t\t}\n\t\treturn DefWindowProc(hWnd, msg, wParam, lParam);\n\t}\n\n\tstatic void Main()\n\t{\n\t\tint width = 1280;\n\t\tint height = 720;\n\t\tIntPtr function, device;\n\t\tIntPtr zero = IntPtr.Zero;\n\t\tfloat start = Environment.TickCount * 0.001f;\n\t\tuint memory = (uint)(width * height * 4);\n\t\tcuInit(0);\n\t\tcuDeviceGet(out IntPtr cuDevice, 0);\n\t\tcuCtxCreate(out IntPtr context, 0, cuDevice);\n\t\tcuMemAlloc(out device, memory);\n\t\tbyte[] source = System.Text.Encoding.ASCII.GetBytes(PTX);\n\t\tIntPtr moduleData = Marshal.AllocHGlobal(source.Length);\n\t\tMarshal.Copy(source, 0, moduleData, source.Length);\n\t\tcuModuleLoadDataEx(out IntPtr module, moduleData, 0, 0, 0);\n\t\tcuModuleGetFunction(out function, module, \"mainImage\");\n\t\tGCHandle handle = GCHandle.Alloc(device, GCHandleType.Pinned);\n\t\tIntPtr[] addresses = new IntPtr[2] {handle.AddrOfPinnedObject(), zero};\n\t\tIntPtr host = Marshal.AllocHGlobal((int)memory);\n\t\tIntPtr[] extra = new IntPtr[1];\n\t\tIntPtr time = Marshal.AllocHGlobal(sizeof(float));\n\t\tfloat[] array = new float[] {0.0f};\n\t\tbool exit = false;\n\t\tMSG msg;\n\t\tWNDCLASSEX win = new WNDCLASSEX();\n\t\twin.cbSize = Marshal.SizeOf(typeof(WNDCLASSEX));\n\t\twin.style = (int) (1 | 2); \n\t\twin.hbrBackground = (IntPtr) 1 + 1 ;\n\t\twin.cbClsExtra = 0;\n\t\twin.cbWndExtra = 0;\n\t\twin.hInstance = System.Diagnostics.Process.GetCurrentProcess().Handle;\n\t\twin.hIcon = zero;\n\t\twin.hCursor = LoadCursor(zero, (int)32515);\n\t\twin.lpszMenuName = null;\n\t\twin.lpszClassName = \"Demo\";\n\t\twin.lpfnWndProc = Marshal.GetFunctionPointerForDelegate(WindowProcPointer);\n\t\twin.hIconSm = zero;\n\t\tIntPtr hwnd = CreateWindowEx(0, RegisterClassEx(ref win), \"Demo\", 0xcf0000 | 0x10000000, 0, 0, width, height, zero, zero, win.hInstance, zero);\n\t\tIntPtr hdc = GetDC(hwnd);\n\t\tBITMAPINFO bmi = new BITMAPINFO();\n\t\tbmi.bmiHeader.biSize = (uint)Marshal.SizeOf(typeof(BITMAPINFOHEADER));\n\t\tbmi.bmiHeader.biWidth = width;\n\t\tbmi.bmiHeader.biHeight = height;\n\t\tbmi.bmiHeader.biPlanes = 1;\n\t\tbmi.bmiHeader.biBitCount = 32;\n\t\tbmi.bmiHeader.biCompression = 0;\n\t\tbmi.bmiHeader.biSizeImage = memory;\n\t\tbmi.bmiHeader.biXPelsPerMeter = 0;\n\t\tbmi.bmiHeader.biYPelsPerMeter = 0;\n\t\tbmi.bmiHeader.biClrUsed = 0;\n\t\tbmi.bmiHeader.biClrImportant = 0;\n\t\tbmi.bmiColors = new RGBQUAD[1];\n\t\twhile (!exit)\n\t\t{\n\t\t\twhile(PeekMessage(out msg, 0, 0, 0, 0x0001))\n\t\t\t{\n\t\t\t\tif( msg.message == 0x0012 ) exit = true;\n\t\t\t\tTranslateMessage( ref msg );\n\t\t\t\tDispatchMessage( ref msg );\n\t\t\t}\n\t\t\tarray[0] = (Environment.TickCount * 0.001f) - start;\n\t\t\tMarshal.Copy(array, 0, time, 1);\n\t\t\taddresses[1] = time;\n\t\t\tcuLaunchKernel(function, (uint)width/8, (uint)height/8, 1, 8, 8, 1, 0, zero, addresses, extra);\n\t\t\tcuMemcpyDtoH(host, device, memory);\n\t\t\tStretchDIBits(hdc, 0, 0, width, height, 0, 0, width, height, host, ref bmi, 0, 0x00CC0020);\n\t\t}\n\t\thandle.Free();\n\t\tcuMemFree(device);\n\t\tMarshal.FreeHGlobal(host);\n\t\tMarshal.FreeHGlobal(moduleData);\n\t\tMarshal.FreeHGlobal(time);\n\t\tDestroyWindow(hwnd);\n\t}\n\n\tstatic string PTX = \n\t@\"\n\t\t.version 8.5\n\t\t.target sm_52\n\t\t.address_size 64\n\t\t.visible .entry mainImage(.param .u64 _Z9mainImageP6uchar4f_param_0,.param .f32 _Z9mainImageP6uchar4f_param_1)\n\t\t{\n\t\t\t.reg .pred \t%p<2>;\n\t\t\t.reg .b16 \t%rs<5>;\n\t\t\t.reg .f32 \t%f<163>;\n\t\t\t.reg .b32 \t%r<19>;\n\t\t\t.reg .b64 \t%rd<5>;\n\t\t\tld.param.u64 \t%rd1, [_Z9mainImageP6uchar4f_param_0];\n\t\t\tld.param.f32 \t%f9, [_Z9mainImageP6uchar4f_param_1];\n\t\t\tmov.u32 \t%r7, %ctaid.x;\n\t\t\tmov.u32 \t%r8, %ntid.x;\n\t\t\tmov.u32 \t%r9, %tid.x;\n\t\t\tmad.lo.s32 \t%r1, %r7, %r8, %r9;\n\t\t\tmov.u32 \t%r10, %ntid.y;\n\t\t\tmov.u32 \t%r11, %ctaid.y;\n\t\t\tmov.u32 \t%r12, %tid.y;\n\t\t\tmad.lo.s32 \t%r13, %r11, %r10, %r12;\n\t\t\tmul.lo.s32 \t%r2, %r13, 1280;\n\t\t\tcvt.rn.f32.u32 \t%f12, %r1;\n\t\t\tcvt.rn.f32.u32 \t%f13, %r13;\n\t\t\tfma.rn.f32 \t%f14, %f12, 0f40000000, 0fC4A00000;\n\t\t\tdiv.rn.f32 \t%f1, %f14, 0f44340000;\n\t\t\tfma.rn.f32 \t%f15, %f13, 0f40000000, 0fC4340000;\n\t\t\tdiv.rn.f32 \t%f2, %f15, 0f44340000;\n\t\t\tmov.f32 \t%f161, 0f00000000;\n\t\t\tmov.u32 \t%r18, 1;\n\t\t\tmov.f32 \t%f162, %f161;\n\t\t\tbra.uni \t$L__BB0_1;\n\t\t$L__BB0_2:\n\t\t\tcvt.rn.f32.s32 \t%f83, %r4;\n\t\t\tmul.f32 \t%f84, %f83, 0f439BD99A;\n\t\t\tfma.rn.f32 \t%f85, %f83, 0f42FE3333, %f84;\n\t\t\tmul.f32 \t%f86, %f83, 0f43374CCD;\n\t\t\tfma.rn.f32 \t%f87, %f83, 0f4386C000, %f86;\n\t\t\tadd.f32 \t%f88, %f85, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f89, %f88, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f90, %f89;\n\t\t\tsub.f32 \t%f91, %f89, %f90;\n\t\t\tfma.rn.f32 \t%f92, %f91, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f93, %f92;\n\t\t\tmul.f32 \t%f94, %f93, %f93;\n\t\t\tadd.f32 \t%f95, %f93, %f93;\n\t\t\tsub.f32 \t%f97, %f29, %f95;\n\t\t\tmul.f32 \t%f98, %f94, %f97;\n\t\t\tfma.rn.f32 \t%f99, %f98, 0f40000000, 0fBF800000;\n\t\t\tmul.f32 \t%f100, %f99, 0f472AEE8C;\n\t\t\tcvt.rmi.f32.f32 \t%f101, %f100;\n\t\t\tsub.f32 \t%f102, %f100, %f101;\n\t\t\tadd.f32 \t%f103, %f87, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f104, %f103, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f105, %f104;\n\t\t\tsub.f32 \t%f106, %f104, %f105;\n\t\t\tfma.rn.f32 \t%f107, %f106, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f108, %f107;\n\t\t\tmul.f32 \t%f109, %f108, %f108;\n\t\t\tadd.f32 \t%f110, %f108, %f108;\n\t\t\tsub.f32 \t%f111, %f29, %f110;\n\t\t\tmul.f32 \t%f112, %f109, %f111;\n\t\t\tfma.rn.f32 \t%f113, %f112, 0f40000000, 0fBF800000;\n\t\t\tmul.f32 \t%f114, %f113, 0f472AEE8C;\n\t\t\tcvt.rmi.f32.f32 \t%f115, %f114;\n\t\t\tsub.f32 \t%f116, %f114, %f115;\n\t\t\tfma.rn.f32 \t%f117, %f102, %f9, 0f3F800000;\n\t\t\tadd.f32 \t%f118, %f117, 0f3FC90FDB;\n\t\t\tadd.f32 \t%f119, %f118, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f120, %f119, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f121, %f120;\n\t\t\tsub.f32 \t%f122, %f120, %f121;\n\t\t\tfma.rn.f32 \t%f123, %f122, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f124, %f123;\n\t\t\tmul.f32 \t%f125, %f124, %f124;\n\t\t\tadd.f32 \t%f126, %f124, %f124;\n\t\t\tsub.f32 \t%f127, %f29, %f126;\n\t\t\tmul.f32 \t%f128, %f125, %f127;\n\t\t\tfma.rn.f32 \t%f129, %f128, 0f40000000, 0fBF800000;\n\t\t\tfma.rn.f32 \t%f130, %f116, %f9, 0f3F800000;\n\t\t\tadd.f32 \t%f131, %f130, 0f3FC90FDB;\n\t\t\tadd.f32 \t%f132, %f131, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f133, %f132, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f134, %f133;\n\t\t\tsub.f32 \t%f135, %f133, %f134;\n\t\t\tfma.rn.f32 \t%f136, %f135, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f137, %f136;\n\t\t\tmul.f32 \t%f138, %f137, %f137;\n\t\t\tadd.f32 \t%f139, %f137, %f137;\n\t\t\tsub.f32 \t%f140, %f29, %f139;\n\t\t\tmul.f32 \t%f141, %f138, %f140;\n\t\t\tfma.rn.f32 \t%f142, %f141, 0f40000000, 0fBF800000;\n\t\t\tsub.f32 \t%f143, %f1, %f129;\n\t\t\tsub.f32 \t%f144, %f2, %f142;\n\t\t\tmul.f32 \t%f145, %f144, %f144;\n\t\t\tfma.rn.f32 \t%f146, %f143, %f143, %f145;\n\t\t\tsqrt.rn.f32 \t%f147, %f146;\n\t\t\tdiv.rn.f32 \t%f149, %f81, %f147;\n\t\t\tfma.rn.f32 \t%f162, %f102, %f149, %f5;\n\t\t\tfma.rn.f32 \t%f161, %f149, %f116, %f6;\n\t\t\tadd.s32 \t%r18, %r4, 1;\n\t\t$L__BB0_1:\n\t\t\tcvt.rn.f32.s32 \t%f16, %r18;\n\t\t\tmul.f32 \t%f17, %f16, 0f439BD99A;\n\t\t\tfma.rn.f32 \t%f18, %f16, 0f42FE3333, %f17;\n\t\t\tmul.f32 \t%f19, %f16, 0f43374CCD;\n\t\t\tfma.rn.f32 \t%f20, %f16, 0f4386C000, %f19;\n\t\t\tadd.f32 \t%f21, %f18, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f22, %f21, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f23, %f22;\n\t\t\tsub.f32 \t%f24, %f22, %f23;\n\t\t\tfma.rn.f32 \t%f25, %f24, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f26, %f25;\n\t\t\tmul.f32 \t%f27, %f26, %f26;\n\t\t\tadd.f32 \t%f28, %f26, %f26;\n\t\t\tmov.f32 \t%f29, 0f40400000;\n\t\t\tsub.f32 \t%f30, %f29, %f28;\n\t\t\tmul.f32 \t%f31, %f27, %f30;\n\t\t\tfma.rn.f32 \t%f32, %f31, 0f40000000, 0fBF800000;\n\t\t\tmul.f32 \t%f33, %f32, 0f472AEE8C;\n\t\t\tcvt.rmi.f32.f32 \t%f34, %f33;\n\t\t\tsub.f32 \t%f35, %f33, %f34;\n\t\t\tadd.f32 \t%f36, %f20, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f37, %f36, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f38, %f37;\n\t\t\tsub.f32 \t%f39, %f37, %f38;\n\t\t\tfma.rn.f32 \t%f40, %f39, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f41, %f40;\n\t\t\tmul.f32 \t%f42, %f41, %f41;\n\t\t\tadd.f32 \t%f43, %f41, %f41;\n\t\t\tsub.f32 \t%f44, %f29, %f43;\n\t\t\tmul.f32 \t%f45, %f42, %f44;\n\t\t\tfma.rn.f32 \t%f46, %f45, 0f40000000, 0fBF800000;\n\t\t\tmul.f32 \t%f47, %f46, 0f472AEE8C;\n\t\t\tcvt.rmi.f32.f32 \t%f48, %f47;\n\t\t\tsub.f32 \t%f49, %f47, %f48;\n\t\t\tfma.rn.f32 \t%f50, %f35, %f9, 0f3F800000;\n\t\t\tadd.f32 \t%f51, %f50, 0f3FC90FDB;\n\t\t\tadd.f32 \t%f52, %f51, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f53, %f52, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f54, %f53;\n\t\t\tsub.f32 \t%f55, %f53, %f54;\n\t\t\tfma.rn.f32 \t%f56, %f55, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f57, %f56;\n\t\t\tmul.f32 \t%f58, %f57, %f57;\n\t\t\tadd.f32 \t%f59, %f57, %f57;\n\t\t\tsub.f32 \t%f60, %f29, %f59;\n\t\t\tmul.f32 \t%f61, %f58, %f60;\n\t\t\tfma.rn.f32 \t%f62, %f61, 0f40000000, 0fBF800000;\n\t\t\tfma.rn.f32 \t%f63, %f49, %f9, 0f3F800000;\n\t\t\tadd.f32 \t%f64, %f63, 0f3FC90FDB;\n\t\t\tadd.f32 \t%f65, %f64, 0fBFC90FDB;\n\t\t\tdiv.rn.f32 \t%f66, %f65, 0f40C90FDB;\n\t\t\tcvt.rmi.f32.f32 \t%f67, %f66;\n\t\t\tsub.f32 \t%f68, %f66, %f67;\n\t\t\tfma.rn.f32 \t%f69, %f68, 0f40000000, 0fBF800000;\n\t\t\tabs.f32 \t%f70, %f69;\n\t\t\tmul.f32 \t%f71, %f70, %f70;\n\t\t\tadd.f32 \t%f72, %f70, %f70;\n\t\t\tsub.f32 \t%f73, %f29, %f72;\n\t\t\tmul.f32 \t%f74, %f71, %f73;\n\t\t\tfma.rn.f32 \t%f75, %f74, 0f40000000, 0fBF800000;\n\t\t\tsub.f32 \t%f76, %f1, %f62;\n\t\t\tsub.f32 \t%f77, %f2, %f75;\n\t\t\tmul.f32 \t%f78, %f77, %f77;\n\t\t\tfma.rn.f32 \t%f79, %f76, %f76, %f78;\n\t\t\tsqrt.rn.f32 \t%f80, %f79;\n\t\t\tmov.f32 \t%f81, 0f3C75C28F;\n\t\t\tdiv.rn.f32 \t%f82, %f81, %f80;\n\t\t\tfma.rn.f32 \t%f5, %f35, %f82, %f162;\n\t\t\tfma.rn.f32 \t%f6, %f82, %f49, %f161;\n\t\t\tadd.s32 \t%r4, %r18, 1;\n\t\t\tsetp.eq.s32 \t%p1, %r4, 64;\n\t\t\t@%p1 bra \t$L__BB0_3;\n\t\t\tbra.uni \t$L__BB0_2;\n\t\t$L__BB0_3:\n\t\t\tadd.s32 \t%r14, %r2, %r1;\n\t\t\tmul.f32 \t%f150, %f6, 0f437F0000;\n\t\t\tmov.f32 \t%f151, 0f437F0000;\n\t\t\tmin.f32 \t%f152, %f150, %f151;\n\t\t\tmov.f32 \t%f153, 0f00000000;\n\t\t\tmax.f32 \t%f154, %f152, %f153;\n\t\t\tmul.f32 \t%f155, %f5, 0f437F0000;\n\t\t\tmin.f32 \t%f156, %f155, %f151;\n\t\t\tmax.f32 \t%f157, %f156, %f153;\n\t\t\tmul.f32 \t%f158, %f155, %f6;\n\t\t\tmin.f32 \t%f159, %f158, %f151;\n\t\t\tmax.f32 \t%f160, %f159, %f153;\n\t\t\tcvt.rzi.u32.f32 \t%r15, %f154;\n\t\t\tcvt.rzi.u32.f32 \t%r16, %f157;\n\t\t\tcvt.rzi.u32.f32 \t%r17, %f160;\n\t\t\tcvta.to.global.u64 \t%rd2, %rd1;\n\t\t\tmul.wide.u32 \t%rd3, %r14, 4;\n\t\t\tadd.s64 \t%rd4, %rd2, %rd3;\n\t\t\tcvt.u16.u32 \t%rs1, %r16;\n\t\t\tcvt.u16.u32 \t%rs2, %r15;\n\t\t\tcvt.u16.u32 \t%rs3, %r17;\n\t\t\tmov.u16 \t%rs4, 255;\n\t\t\tst.global.v4.u8 \t[%rd4], {%rs2, %rs1, %rs3, %rs4};\n\t\t\tret;\n\t\t}\n\t\";\n}\n\n*/\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n/////////// PTX assembly was generated by command:\n\n/////////// nvcc -ptx test.cu\n\n/////////// In generated PTX change function name to \"mainImage\"\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n/////////// test.cu:\n\n/*\n\n__device__ float Fract(float x)\n{\n\treturn x - floorf(x);\n}\n\n__device__ float Clamp(float x, float a, float b) \n{\n\treturn max(min(x, b), a);\n}\n\n__device__ float Length(float x, float y) \n{\n\treturn sqrtf(x * x + y * y);\n}\n\n__device__ float Sinus (float x)\n{\n\tfloat q = fabs(Fract((x - 0.017453292f * 90.0f) / (0.017453292f * 360.0f)) * 2.0f - 1.0f);     \n\treturn q * q * (3.0f - 2.0f * q) * 2.0f - 1.0f;\n}\n\n__device__ float Cosinus (float x)\n{\n\treturn Sinus(x + 1.57079632679f);\n}\n\n__global__ void mainImage(uchar4 *fragColor, float iTime)\n{\n\tint width = 1280;\n\tint height = 720;\n\tunsigned int x = blockIdx.x * blockDim.x + threadIdx.x;\n\tunsigned int y = blockIdx.y * blockDim.y + threadIdx.y;\n\tunsigned int i = x + width * y;\n\tfloat2 resolution = make_float2((float)width, (float)height);\n\tfloat2 fragCoord = make_float2((float)x, (float)y);\n\tfloat uvx = (2.0f * fragCoord.x - resolution.x) / resolution.y;\n\tfloat uvy = (2.0f * fragCoord.y - resolution.y) / resolution.y;\n\tfloat kx = 0.0f;\n\tfloat ky = 0.0f;\n\tfor (int i = 1; i < 64; i++)\n\t{\n\t\tfloat qx = i * 127.1f + i * 311.7f;\n\t\tfloat qy = i * 269.5f + i * 183.3f;\n\t\tfloat hx = Fract(Sinus(qx) * 43758.5453f);\n\t\tfloat hy = Fract(Sinus(qy) * 43758.5453f);\n\t\tfloat px = Cosinus(hx * iTime + 1.0f);\n\t\tfloat py = Cosinus(hy * iTime + 1.0f);\n\t\tfloat d = 0.015f / Length(uvx - px, uvy - py);\n\t\tkx += d * hx;\n\t\tky += d * hy;\n\t}\n\tfloat b = Clamp(255.0f * ky, 0.0f, 255.0f);\n\tfloat g = Clamp(255.0f * kx, 0.0f, 255.0f);\n\tfloat r = Clamp(255.0f * kx * ky, 0.0f, 255.0f);\n\tfragColor[i] = make_uchar4(b, g, r, 255);\n}\n*/","name":"Common","description":"","type":"common"}]}