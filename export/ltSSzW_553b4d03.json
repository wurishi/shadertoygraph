{"ver":"0.1","info":{"id":"ltSSzW","date":"1441902785","viewed":1223,"name":"Dithered Blob","username":"Klems","description":"Simple dithering exemple. Not exactly true dithering (unless PIXEL_SIZE is 1) but it's close enough ;)","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n\n#define PIXEL_SIZE 4.0\n\n\nbool getValue(float brightness, vec2 pos) {\n    \n    // do the simple math first\n    if (brightness > 16.0/17.0) return false;\n    if (brightness < 01.0/17.0) return true;\n    \n    vec2 pixel = floor(mod((pos.xy+0.5)/PIXEL_SIZE, 4.0));\n    int x = int(pixel.x);\n    int y = int(pixel.y);\n    bool result = false;\n    \n    // compute the 16 values by hand, store when it's a match\n    \t if (x == 0 && y == 0) result = brightness < 16.0/17.0;\n   \telse if (x == 2 && y == 2) result = brightness < 15.0/17.0;\n   \telse if (x == 2 && y == 0) result = brightness < 14.0/17.0;\n   \telse if (x == 0 && y == 2) result = brightness < 13.0/17.0;\n   \telse if (x == 1 && y == 1) result = brightness < 12.0/17.0;\n   \telse if (x == 3 && y == 3) result = brightness < 11.0/17.0;\n   \telse if (x == 3 && y == 1) result = brightness < 10.0/17.0;\n   \telse if (x == 1 && y == 3) result = brightness < 09.0/17.0;\n   \telse if (x == 1 && y == 0) result = brightness < 08.0/17.0;\n   \telse if (x == 3 && y == 2) result = brightness < 07.0/17.0;\n   \telse if (x == 3 && y == 0) result = brightness < 06.0/17.0;\n    else if (x == 0 && y == 1) result =\tbrightness < 05.0/17.0;\n   \telse if (x == 1 && y == 2) result = brightness < 04.0/17.0;\n   \telse if (x == 2 && y == 3) result = brightness < 03.0/17.0;\n   \telse if (x == 2 && y == 1) result = brightness < 02.0/17.0;\n   \telse if (x == 0 && y == 3) result = brightness < 01.0/17.0;\n        \n\treturn result;\n}\n\nmat2 rot(in float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\n// main distance function\nfloat de(vec3 p) {\n    \n    float de = 0.0;\n    \n    de += length(p) - 5.0;\n    \n    de += (sin(p.x*3.0424+iTime * 1.9318)*.5+.5)*0.3;\n    de += (sin(p.y*2.0157+iTime * 1.5647)*.5+.5)*0.4;\n    \n\treturn de;\n} \n\n// normal function\nvec3 normal(vec3 p) {\n\tvec3 e = vec3(0.0, 0.001, 0.0);\n\treturn normalize(vec3(\n\t\tde(p+e.yxx)-de(p-e.yxx),\n\t\tde(p+e.xyx)-de(p-e.xyx),\n\t\tde(p+e.xxy)-de(p-e.xxy)));\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.y *= iResolution.y / iResolution.x;\n\t\n\tvec3 from = vec3(-50, 0, 0);\n\tvec3 dir = normalize(vec3(uv*0.2, 1.0));\n\tdir.xz *= rot(3.1415*.5);\n\t\n\tvec2 mouse=(iMouse.xy / iResolution.xy - 0.5) * 0.5;\n\tif (iMouse.z < 1.0) mouse = vec2(0.0);\n\t\n\tmat2 rotxz = rot(iTime*0.0652+mouse.x*5.0);\n\tmat2 rotxy = rot(0.3-mouse.y*5.0);\n\t\n\tfrom.xy *= rotxy;\n\tfrom.xz *= rotxz;\n\tdir.xy  *= rotxy;\n\tdir.xz  *= rotxz;\n\n\tfloat mindist = 100000.0;\n\tfloat totdist = 0.0;\n\tbool set = false;\n\tvec3 norm = vec3(0);\n\t\n\tvec3 light = normalize(vec3(1.0, -3.0, 2.0));\n\t\n\tfor (int steps = 0 ; steps < 100 ; steps++) {\n\t\tif (set) continue;\n\t\tvec3 p = from + totdist * dir;\n\t\tfloat dist = max(min(de(p), 1.0), 0.0);\n        \n        mindist = min(dist, mindist);\n        \n\t\ttotdist += dist;\n\t\tif (dist < 0.01) {\n\t\t\tset = true;\n\t\t\tnorm = normal(p);\n\t\t}\n\t}\n    \n    if (set) {\n       fragColor = vec4(vec3(getValue( dot(light, norm)*.5+.5, fragCoord)), 1.0);\n    } else {\n        // add an edge around the object\n        if (mindist < 0.5) fragColor = vec4(vec3(0.0), 1.0);\n        else {\n            // do some whatever background with dithering as well\n            \n            vec2 pos = fragCoord - iResolution.xy * 0.5;\n            \n            vec2 dir = vec2(0.0, 1.0)*rot(sin(iTime*0.4545)*0.112);\n            float value = sin(dot(pos, dir)*0.048-iTime*1.412)*0.5+0.5;\n            \n            fragColor = vec4(vec3(getValue(value, pos)), 1.0);\n            \n        }\n\n    }\n\t\n\n}","name":"","description":"","type":"image"}]}