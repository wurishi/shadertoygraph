{"ver":"0.1","info":{"id":"Dd3Sz8","date":"1679423265","viewed":149,"name":"3D-mat_rot","username":"alesteba","description":"3D matrix transformations","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3dmatrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// using surfaces:\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\n\n// TO separate surfaces:\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 transform)\n{\n  p = (p - offset) * transform;\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\nSurface sdScene(vec3 p) {\n\n    // basic transforms:\n    // interpolation functions\n\n  Surface co = sdBox(\n      p,\n      vec3(abs(cos(iTime)), abs(sin(iTime)), abs(cos(iTime))),\n      vec3(0, 0.5, -4),\n      vec3(1, 0, 0),\n      rotateX(iTime) * rotateY(iTime) * rotateZ(iTime) // rotation matrices\n  );\n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n\n  float depth = start;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\n// rand geometry based on triangles:\n// transition geometry:\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n    vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n    Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n    // raycasting:\n\n    if (co.sd > MAX_DIST) {\n        col = backgroundColor; // ray didn't hit anything\n    } else {\n    \n        vec3 p = ro + rd * co.sd; // point on cube or floor we discovered from ray marching\n        vec3 normal = calcNormal(p);\n        vec3 lightPosition = vec3(2, 2, 7);\n        vec3 lightDirection = normalize(lightPosition - p);\n\n        float dif = clamp(dot(normal, lightDirection), 0.3, 1.); // diffuse reflection\n\n        col = dif * co.col + backgroundColor * .2; // Add a bit of background color to the diffuse color\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n// transitions ->make it: \n\n","name":"Image","description":"","type":"image"}]}