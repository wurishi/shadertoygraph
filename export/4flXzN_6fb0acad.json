{"ver":"0.1","info":{"id":"4flXzN","date":"1705007053","viewed":91,"name":"displaced line","username":"marlus","description":"displaced vertical line slide animation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["line","displace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI\t\t\t3.14159265359\n#define RADIAN\t\t180. / PI\n#define CAMERA_FOV\t60.4 * RADIAN\n\nfloat hash(vec3 p) {\n    return fract(sin(dot(p,vec3(127.1,311.7, 321.4)))*43758.5453123);\n}\n\nfloat noise(vec3 p) {\n\n    vec3 i = floor(p);\n    vec3 f = fract(p); \n    f *= f * (3.-2.*f);\n\n    vec2 c = vec2(0,1);\n\n    return mix(\n    mix(mix(hash(i + c.xxx), hash(i + c.yxx),f.x),\n      mix(hash(i + c.xyx), hash(i + c.yyx),f.x),\n      f.y),\n    mix(mix(hash(i + c.xxy), hash(i + c.yxy),f.x),\n      mix(hash(i + c.xyy), hash(i + c.yyy),f.x),\n      f.y),\n    f.z);\n}\n\nfloat fbm(vec3 p)\n{\n    float f = 0.;\n    f += .50000 * noise(1. * p);\n    f += .25000 * noise(2. * p);\n    f += .12500 * noise(4. * p);\n    f += .06250 * noise(8. * p);\n    return f;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n   vec2 uv = fragCoord/iResolution.xy;\n   float n = fbm(vec3(uv,1.0));\n   \n   // Define the width of the line and its smoothness\n    float lineWidth = 0.02; // Width of the line\n    float smoothness = 0.005; // Smoothness of the edges\n    \n    float lineX = fract(iTime/2.0);\n    \n    // noise\n    float freqX = 4.0;\n    float freqY = 2.0;\n    float displace = fbm(vec3(uv.x * freqX, uv.y * freqY, iTime/2.0));\n\n    // Calculate the smooth step\n    float screenW = 1.5;\n    float edge1 = lineX * screenW - screenW / 2.0 + displace - lineWidth / 2.0;\n    float edge2 = lineX * screenW - screenW / 2.0 + displace + lineWidth / 2.0;\n    float alpha = smoothstep(edge1 - smoothness, edge1, uv.x) - \n                  smoothstep(edge2, edge2 + smoothness, uv.x);\n   \n   fragColor = vec4(vec3(alpha),1.0);\n}","name":"Image","description":"","type":"image"}]}