{"ver":"0.1","info":{"id":"ddfXzM","date":"1668629324","viewed":145,"name":"Antialiased Graph","username":"Hatchling","description":"Uses dFdx to draw an anti-aliased filled line graph.\nIt isn't perfect but it is stupidly simple.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["graph","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Controls:\n// Mouse Click + Drag: Change the value of the graph \n//                     at and around the given point.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    float pixelHeight = fragCoord.y;\n    float graphHeight = fragColor.x * iResolution.y;\n    \n    float range = (1.0 + abs(dFdx(graphHeight))) * 1.0;\n    \n    float upper = graphHeight + range;\n    float lower = graphHeight - range;\n    \n    float value = (pixelHeight - lower) / (upper - lower);\n    \n    // Convert to a line instead of a solid graph.\n    // Increase the range's multiplier from 1.0 to 2.0 to use this.\n    //value = abs(value - 0.5) * 2.0;\n    \n    fragColor = vec4(smoothstep(0., 1., value));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Contains the function to display.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec4 mouseProxy = iMouse;\n    \n    if(iMouse.xy == vec2(0))\n    {\n        vec2 halfRes = iResolution.xy * 0.5;\n        mouseProxy.xy = vec2(sin(iTime), cos(iTime)) * halfRes + halfRes;\n        mouseProxy.z = 1.0;\n    }\n    \n    if(mouseProxy.z > 0.0)\n    {\n        float distanceToMouse = abs(mouseProxy.x - fragCoord.x) / iResolution.x;\n        \n        float weight = exp2(-distanceToMouse * 100.0);\n        weight = smoothstep(0., 1., weight);\n    \n        fragColor = mix(fragColor, vec4(mouseProxy.y / iResolution.y), weight);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}