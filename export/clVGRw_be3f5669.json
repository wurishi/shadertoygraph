{"ver":"0.1","info":{"id":"clVGRw","date":"1683731529","viewed":49,"name":"3d sphere in 2d","username":"Kolya142","description":"3d in 2d","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tmin 0.001\n#define sphere 1.\n#define rot(a) mat2(cos( a+ vec4(0,33,11,0) ))\n\nfloat sdSphere( vec3 p)\n{\n  return length(p)-sphere;\n}\n\nvec3 Norm(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = sdSphere(p + small_step.xyy) - sdSphere(p - small_step.xyy);\n    float gradient_y = sdSphere(p + small_step.yxy) - sdSphere(p - small_step.yxy);\n    float gradient_z = sdSphere(p + small_step.yyx) - sdSphere(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 vuv = fragCoord/iResolution.xy;\n    vec3 light = normalize(vec3(-.5, 1., 0)) * vec3(sin(iDate.w), cos(iDate.w), 1.);\n    vuv.x *= iResolution.x / iResolution.y;\n    vuv.x -= .35;\n    vec2 uv = vuv * 2.;\n\n    // Time varying pixel color\n    vec3 rd = vec3(uv - 1., sin(iDate.w) * .5 - .3);\n    float dis = sdSphere(rd);\n    \n    vec3 col = vec3(0);\n    \n    if (dis <= tmin) {\n        col = vec3(1.);\n    }\n    col *= dot(Norm(rd), light);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}