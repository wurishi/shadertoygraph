{"ver":"0.1","info":{"id":"WdXBDM","date":"1588311713","viewed":72,"name":"Mocadium Ball (WIP)","username":"Mocadium","description":"My second ever Shadertoy shader!\nThe Mocadium Ball!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 Eye (vec2 uv, float blur) {\n    vec4 eye = vec4(0.25, 0.15, 0.15, 0.0);\n    eye.a = smoothstep(0.03+blur, 0.03-blur, length(uv.x));\n    eye.a *= smoothstep(0.08+blur, 0.08-blur, length(uv.y));\n    eye.a += smoothstep(0.03+blur, 0.03-blur, length(uv+vec2(0.0, -0.08)));\n    eye.a += smoothstep(0.07+blur, 0.07-blur, length(uv+vec2(0.0, 0.13)));\n    eye.a *= smoothstep(0.11-blur, 0.11+blur, length(uv+vec2(0.0, 0.2)));\n    return clamp(eye, 0.0, 1.0);\n}\n\nvec4 Mouth (vec2 uv, float blur) {\n\tvec4 mouth = vec4(0.6, 0.2, 0.2, 0.0);\n    mouth.a = smoothstep(0.28+blur, 0.28-blur, length(uv+vec2(0.0, 0.08)));\n    mouth.a *= smoothstep(0.7-blur, 0.7+blur, length(uv+vec2(0.0, -0.56)));\n    mouth.rgb *= 1.0-smoothstep(-0.28, -0.05, uv.y)*0.75;\n    \n    float teeth = smoothstep(0.7+blur, 0.7, length(uv+vec2(0.0, -0.51)));\n    float teethcol = 1.0-smoothstep(0.1, 0.3, uv.x)*0.3;\n    mouth.rgb = mix(mouth.rgb, vec3(teethcol), teeth);\n    \n    float outline = smoothstep(0.27+blur, 0.27-blur, length(uv+vec2(0.0, 0.08)));\n    outline *= smoothstep(0.71-blur, 0.71+blur, length(uv+vec2(0.0, -0.56)));\n    vec3 outlinecol = vec3(0.25, 0.15, 0.15);\n\tmouth.rgb = mix(outlinecol, mouth.rgb, outline);\n    return clamp(mouth, 0.0, 1.0);\n}\n\nvec4 Ball (vec2 uv, float blur) {\n\tvec4 ball = vec4(0.95, 0.7, 0.1, 1.0);\n    float d = length(uv);\n    ball.a = smoothstep(0.5+blur, 0.5-blur, d);\n    \n    float outline = smoothstep(0.48-blur, 0.48+blur, d);\n    vec3 outlinecol = vec3(0.25, 0.15, 0.15);\n    ball.rgb = mix(ball.rgb, outlinecol, outline);\n        \n    return ball;\n}\n\nmat2 rotate (float a) {\n\tfloat s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 MCDMBall (vec2 uv, float blur, float facing) {\n    uv.x = abs(uv.x);\n    vec4 ball = Ball(uv, blur);\n    vec4 eye = Eye(uv*1.2+vec2(-0.28, -0.05+facing), blur);\n    vec4 mouth = Mouth(uv*1.2-vec2(0.0, -facing), blur);\n    vec4 col = vec4(0.0);\n    col = mix(col, ball, ball.a);\n    col = mix(col, eye, eye.a);\n\tcol = mix(col, mouth, mouth.a);\n\treturn col;\n}\n\nvec4 Layer (vec2 uv) {\n\n    // UV Manipulation;\n    vec2 id = floor(uv);\n    uv = fract(uv);\n    uv -= 0.5;\n    \n    //Variables\n    float hash = Hash21(id);\n    float scale = (hash*0.5)+1.0;\n    vec4 col = vec4(0.0);\n    float chance = floor(hash+1.0);\n        \n    //Create Ball\n    vec4 ball = MCDMBall(uv*scale, 0.001, 0.0);\n    \n    col = mix(col, ball, ball.a*chance);\n    col.rgb *= 1.0-smoothstep(0.1, 0.8, length(uv-0.2))*vec3(0.6, 0.7, 0.7)*ball.a;\n    \n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Coordinates\n    vec2 uv_real = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy*0.5)/iResolution.y;\n    vec2 uv = uv_real;\n    \n    //BG Color\n    vec3 col = mix(vec3(0.9, 0.7, 0.0), vec3(0.5, 0.3, 0.0), length(uv));\n\n    //Ball Render Loop\n    for (float i=0.0; i<1.0; i+=1.0/30.0) {\n    \tfloat scale = mix(10.0, 3.0, i);\n        vec4 layer = Layer(uv*scale+m*5.0);\n\t\tcol = mix(col, layer.rgb, layer.a);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}