{"ver":"0.1","info":{"id":"mlfBDX","date":"1700399628","viewed":103,"name":"ðŸŽ¶ audio reactive Discoteq","username":"wj","description":"just played a bit with supah's \"Discoteq 2\" shader to make something audio reactive","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["blur","lines","audiorective"],"hasliked":0,"parentid":"DtXfDr","parentname":"Discoteq 2"},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// audio reactive Discoteq\n// by wj\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define S smoothstep\nconst float NUM_LINES = 20.;\n\nvec4 Line(float vu0, float t, vec2 uv, float speed, float height, vec3 col) \n{\n    float ti = 1. - t;\n    float vu = ((texture( iChannel0, vec2(ti, .25)).x )) * ti;\n    \n    float b = S(1., 0., abs(uv.x)) * sin(iTime * speed + uv.x * height * t) * .2;\n    uv.y += b*2. * (vu0 *1. + 0.3);    \n\n    uv.x += vu * 12. - 2.;\n        \n    return vec4(S(.06 * S(.2, .9, abs(uv.x)), 0., abs(uv.y) - .004) * col, 1.0) * S(1., .3, abs(uv.x));\n}\n\nvoid mainImage(out vec4 O, in vec2 I) \n{\n    vec2 uv = (I - .5 * iResolution.xy) / iResolution.y;\n    O = vec4 (0.);\n\n    // obviously the global vu0 param should be passed in as an \n    // input uniform - which shadertoy unfortunately doesn't support\n    \n    float vu0 = (texture( iChannel0, vec2(0.1,  0.25)).x  +\n                   texture( iChannel0, vec2(0.2, 0.25)).x +\n                   texture( iChannel0, vec2(0.4, 0.25)).x +\n                   texture( iChannel0, vec2(0.6, 0.25)).x +\n                   texture( iChannel0, vec2(0.7, 0.25)).x +\n                   texture( iChannel0, vec2(0.9, 0.25)).x ) / 6.;\n\n    for (float i = 0.; i <= NUM_LINES; i += 1.) {\n        float t = i / NUM_LINES;\n\n        float c = (vu0 - t) + .3;\n        \n        O += Line(vu0, t, uv, 1. + t, 4. + t, vec3(.2 + c * .7, .2 + c * .4, 0.3)) * 2.;\n    }\n}","name":"Image","description":"","type":"image"}]}