{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/**\n * Check if coord is in display of the number.\n * @param coord The position to check (x,y)\n * @param n The number to display\n * @param numpos The position to draw the number (left-x,bottom-y,width,height)\n * @param a The thickness of the number\n * @return the check result (in -> true)\n */\nbool isInNumber(vec2 coord,float n,vec4 numpos,float a)\n{\n\t/*\n\t *  0\n\t * 5 1\n\t *  6\n\t * 4 2\n\t *  3\n\t *\n\t * n 0123456\n\t * 0 TTTTTTF\n\t * 1 FTTFFFF\n\t * 2 TTFTTFT\n\t * 3 TTTTFFT\n\t * 4 FTTFFTT\n\t * 5 TFTTFTT\n\t * 6 TFTTTTT\n\t * 7 TTTFFTF\n\t * 8 TTTTTTT\n\t * 9 TTTTFTT\n\t */\n\tn=floor(n);\n\t// 0\n\tif(n!=1.0 && n!=4.0 &&\n\tnumpos.x+a<=coord.x && coord.x<=numpos.x+numpos.z-a &&\n\tnumpos.y+numpos.w-a<=coord.y && coord.y<=numpos.y+numpos.w)return true;\n\t// 1\n\tif(n!=5.0 && n!=6.0 &&\n\tnumpos.x+numpos.z-a<=coord.x && coord.x<=numpos.x+numpos.z &&\n\tnumpos.y+numpos.w/2.0+a/2.0<=coord.y && coord.y<=numpos.y+numpos.w-a)return true;\n\t// 2\n\tif(n!=2.0 &&\n\tnumpos.x+numpos.z-a<=coord.x && coord.x<=numpos.x+numpos.z &&\n\tnumpos.y+a<=coord.y && coord.y<=numpos.y+numpos.w/2.0-a/2.0)return true;\n\t// 3\n\tif(n!=1.0 && n!=4.0 && n!=7.0 &&\n\tnumpos.x+a<=coord.x && coord.x<=numpos.x+numpos.z-a &&\n\tnumpos.y<=coord.y && coord.y<=numpos.y+a)return true;\n\t// 4\n\tif(n!=1.0 && n!=3.0 && n!=4.0 && n!=5.0 && n!=7.0 && n!=9.0 &&\n\tnumpos.x<=coord.x && coord.x<=numpos.x+a &&\n\tnumpos.y+a<=coord.y && coord.y<=numpos.y+numpos.w/2.0-a/2.0)return true;\n\t// 5\n\tif(n!=1.0 && n!=2.0 && n!=3.0 &&\n\tnumpos.x<=coord.x && coord.x<=numpos.x+a &&\n\tnumpos.y+numpos.w/2.0+a/2.0<=coord.y && coord.y<=numpos.y+numpos.w-a)return true;\n\t// 6\n\tif(n!=0.0 && n!=1.0 && n!=7.0 &&\n\tnumpos.x+a<=coord.x && coord.x<=numpos.x+numpos.z-a &&\n\tnumpos.y+numpos.w/2.0-a/2.0<=coord.y && coord.y<=numpos.y+numpos.w/2.0+a/2.0)return true;\n\treturn false;\n}\n\n/**\n * Check if coord is in the rect.\n * @param coord The position to check (x,y)\n * @param pos The position of the rect (left-x,bottom-y,width,height)\n * @return the check result (in -> true)\n */\nbool isInRect(vec2 coord,vec4 pos)\n{\n\treturn pos.x<=coord.x && coord.x<=pos.x+pos.z && pos.y<=coord.y && coord.y<=pos.y+pos.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tbool isDraw = false;\n\tfloat theTime = iDate.w;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t// draw the date\n\tisDraw = isDraw || isInNumber(uv,iDate.x/1000.0,vec4(0.05,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(iDate.x/100.0,10.0),vec4(0.15,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(iDate.x/10.0,10.0),vec4(0.25,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(iDate.x,10.0),vec4(0.35,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInRect(uv,vec4(0.455,0.575,0.03,0.06));\n\tisDraw = isDraw || isInNumber(uv,iDate.y/10.0,vec4(0.515,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(iDate.y,10.0),vec4(0.615,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInRect(uv,vec4(0.715,0.575,0.03,0.06));\n\tisDraw = isDraw || isInNumber(uv,iDate.z/10.0,vec4(0.78,0.575,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(iDate.z,10.0),vec4(0.88,0.575,0.07,0.3),0.015);\n\t// draw the time\n\tisDraw = isDraw || isInNumber(uv,theTime/36000.0,vec4(0.25,0.125,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(theTime/3600.0,10.0),vec4(0.35,0.125,0.07,0.3),0.015);\n\tisDraw = isDraw || isInRect(uv,vec4(0.455,0.185,0.03,0.06));\n\tisDraw = isDraw || isInRect(uv,vec4(0.455,0.305,0.03,0.06));\n\ttheTime = mod(theTime,3600.0);\n\tisDraw = isDraw || isInNumber(uv,theTime/600.0,vec4(0.515,0.125,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(theTime/60.0,10.0),vec4(0.615,0.125,0.07,0.3),0.015);\n\tisDraw = isDraw || isInRect(uv,vec4(0.715,0.185,0.03,0.06));\n\tisDraw = isDraw || isInRect(uv,vec4(0.715,0.305,0.03,0.06));\n\ttheTime = mod(theTime,60.0);\n\tisDraw = isDraw || isInNumber(uv,theTime/10.0,vec4(0.78,0.125,0.07,0.3),0.015);\n\tisDraw = isDraw || isInNumber(uv,mod(theTime,10.0),vec4(0.88,0.125,0.07,0.3),0.015);\n\tif(isDraw) {\n\t\tfragColor = vec4(0.0,0.0,0.0,1.0);\n\t} else {\n\t\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dfSzn","date":"1395542508","viewed":455,"name":"Simple Digital Clock","username":"MikeCAT","description":"This is an simple digital clock.\nThe background is what Shadertoy gives us as the default \"New Shader\".\nDespite of the simpleness of the display, it does too much calculation:\nit works in about 4.2 fps in my computer(Google Chrome 30, Core2Duo 2.10GHz)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","time","clock","practice"],"hasliked":0,"parentid":"","parentname":""}}