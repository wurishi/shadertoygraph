{"ver":"0.1","info":{"id":"lt3Szn","date":"1542859837","viewed":283,"name":"Now Loading","username":"Sobaya","description":"po","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["po"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sq(float t) {\n    return t * t;\n}\n\nfloat seg(vec2 s, vec2 e, vec2 p) {\n    float len = length(e - s);\n    vec2 v = (e - s) / len;\n    float t = dot(v, p - s) / len;\n    if (t > 1.) return length(p - e);\n    else if (t < 0.) return length(p - s);\n    else return sqrt(sq(length(p-s)) - sq(dot(p-s, v)));\n}\n\nvec2 rot(vec2 p, float a) {\n    float rad = a * 3.141592 / 180.;\n    float c = cos(rad);\n    float s = sin(rad);\n    return vec2(p.x * c - p.y * s,\n                p.x * s + p.y * c);\n}\n\n#define ADD(x) dist = min(dist, x)\n#define TIME iTime\n\nvec2 trans(vec2 p) {\n    return p * 0.2;\n}\n\nstruct Po {\n    float d;\n    int idx;\n};\n    \nconst int N = 55;\n\nPo dist(vec2 p) {\n    \n\tvec2 starts[N];\n\tvec2 ends[N];\n\tstarts[0] = vec2(-3.1097560975609757, -0.7073170731707317);\n\tends[0] = vec2(-3.1097560975609757, -0.0);\n\tstarts[1] = vec2(-3.1097560975609757, -0.0);\n\tends[1] = vec2(-2.6341463414634148, -0.7317073170731707);\n\tstarts[2] = vec2(-2.6341463414634148, -0.7317073170731707);\n\tends[2] = vec2(-2.6219512195121952, -0.0);\n\tstarts[3] = vec2(-2.1463414634146343, -0.24390243902439024);\n\tends[3] = vec2(-2.2804878048780486, -0.2804878048780488);\n\tstarts[4] = vec2(-2.2804878048780486, -0.2804878048780488);\n\tends[4] = vec2(-2.3536585365853657, -0.4024390243902439);\n\tstarts[5] = vec2(-2.3536585365853657, -0.4024390243902439);\n\tends[5] = vec2(-2.3536585365853657, -0.5487804878048781);\n\tstarts[6] = vec2(-2.3536585365853657, -0.5487804878048781);\n\tends[6] = vec2(-2.2804878048780486, -0.6829268292682926);\n\tstarts[7] = vec2(-2.2804878048780486, -0.6829268292682926);\n\tends[7] = vec2(-2.1707317073170733, -0.7439024390243902);\n\tstarts[8] = vec2(-2.1707317073170733, -0.7439024390243902);\n\tends[8] = vec2(-2.0121951219512195, -0.7073170731707317);\n\tstarts[9] = vec2(-2.0121951219512195, -0.7073170731707317);\n\tends[9] = vec2(-1.9024390243902438, -0.5487804878048781);\n\tstarts[10] = vec2(-1.9024390243902438, -0.5365853658536586);\n\tends[10] = vec2(-1.9268292682926829, -0.4024390243902439);\n\tstarts[11] = vec2(-1.9268292682926829, -0.4024390243902439);\n\tends[11] = vec2(-1.98780487804878, -0.29268292682926833);\n\tstarts[12] = vec2(-1.98780487804878, -0.29268292682926833);\n\tends[12] = vec2(-2.1341463414634148, -0.23170731707317072);\n\tstarts[13] = vec2(-1.7195121951219512, -0.25609756097560976);\n\tends[13] = vec2(-1.5853658536585367, -0.7195121951219512);\n\tstarts[14] = vec2(-1.5853658536585367, -0.7195121951219512);\n\tends[14] = vec2(-1.402439024390244, -0.2682926829268293);\n\tstarts[15] = vec2(-1.402439024390244, -0.2682926829268293);\n\tends[15] = vec2(-1.2195121951219512, -0.7073170731707317);\n\tstarts[16] = vec2(-1.2195121951219512, -0.7073170731707317);\n\tends[16] = vec2(-1.0609756097560976, -0.25609756097560976);\n\tstarts[17] = vec2(-0.46341463414634154, -0.07317073170731703);\n\tends[17] = vec2(-0.46341463414634154, -0.7195121951219512);\n\tstarts[18] = vec2(-0.46341463414634154, -0.7195121951219512);\n\tends[18] = vec2(-0.07317073170731725, -0.7195121951219512);\n\tstarts[19] = vec2(0.2682926829268292, -0.23170731707317072);\n\tends[19] = vec2(0.10975609756097587, -0.30487804878048785);\n\tstarts[20] = vec2(0.10975609756097587, -0.30487804878048785);\n\tends[20] = vec2(0.06097560975609771, -0.4878048780487805);\n\tstarts[21] = vec2(0.06097560975609771, -0.4878048780487805);\n\tends[21] = vec2(0.13414634146341495, -0.6585365853658536);\n\tstarts[22] = vec2(0.13414634146341495, -0.7073170731707317);\n\tends[22] = vec2(0.3170731707317074, -0.7439024390243902);\n\tstarts[23] = vec2(0.3414634146341465, -0.7195121951219512);\n\tends[23] = vec2(0.48780487804878025, -0.6219512195121952);\n\tstarts[24] = vec2(0.48780487804878025, -0.6219512195121952);\n\tends[24] = vec2(0.4999999999999997, -0.426829268292683);\n\tstarts[25] = vec2(0.4999999999999997, -0.426829268292683);\n\tends[25] = vec2(0.4390243902439028, -0.31707317073170727);\n\tstarts[26] = vec2(0.4390243902439028, -0.31707317073170727);\n\tends[26] = vec2(0.28048780487804875, -0.2195121951219512);\n\tstarts[27] = vec2(0.731707317073171, -0.24390243902439024);\n\tends[27] = vec2(0.9024390243902439, -0.23170731707317072);\n\tstarts[28] = vec2(0.9024390243902439, -0.23170731707317072);\n\tends[28] = vec2(1.0731707317073167, -0.29268292682926833);\n\tstarts[29] = vec2(1.0731707317073167, -0.29268292682926833);\n\tends[29] = vec2(1.097560975609756, -0.7317073170731707);\n\tstarts[30] = vec2(1.0853658536585364, -0.4512195121951219);\n\tends[30] = vec2(0.7926829268292681, -0.46341463414634143);\n\tstarts[31] = vec2(0.7926829268292681, -0.46341463414634143);\n\tends[31] = vec2(0.6951219512195125, -0.6097560975609757);\n\tstarts[32] = vec2(0.682926829268293, -0.6097560975609757);\n\tends[32] = vec2(0.8048780487804876, -0.7560975609756098);\n\tstarts[33] = vec2(0.8048780487804876, -0.7560975609756098);\n\tends[33] = vec2(1.0853658536585364, -0.6829268292682926);\n\tstarts[34] = vec2(1.7073170731707317, -0.012195121951219523);\n\tends[34] = vec2(1.7317073170731707, -0.7195121951219512);\n\tstarts[35] = vec2(1.695121951219512, -0.6341463414634145);\n\tends[35] = vec2(1.4878048780487805, -0.7804878048780488);\n\tstarts[36] = vec2(1.4878048780487805, -0.7804878048780488);\n\tends[36] = vec2(1.341463414634146, -0.5975609756097562);\n\tstarts[37] = vec2(1.3292682926829271, -0.5853658536585367);\n\tends[37] = vec2(1.3170731707317076, -0.3780487804878049);\n\tstarts[38] = vec2(1.3170731707317076, -0.3780487804878049);\n\tends[38] = vec2(1.4634146341463414, -0.24390243902439024);\n\tstarts[39] = vec2(1.4634146341463414, -0.24390243902439024);\n\tends[39] = vec2(1.695121951219512, -0.2682926829268293);\n\tstarts[40] = vec2(1.98780487804878, -0.04878048780487809);\n\tends[40] = vec2(2.024390243902439, -0.04878048780487809);\n\tstarts[41] = vec2(2.0121951219512195, -0.24390243902439024);\n\tends[41] = vec2(2.0121951219512195, -0.7073170731707317);\n\tstarts[42] = vec2(2.3048780487804876, -0.24390243902439024);\n\tends[42] = vec2(2.3048780487804876, -0.7317073170731707);\n\tstarts[43] = vec2(2.3048780487804876, -0.3414634146341463);\n\tends[43] = vec2(2.5243902439024386, -0.2195121951219512);\n\tstarts[44] = vec2(2.5243902439024386, -0.2195121951219512);\n\tends[44] = vec2(2.682926829268293, -0.31707317073170727);\n\tstarts[45] = vec2(2.682926829268293, -0.31707317073170727);\n\tends[45] = vec2(2.682926829268293, -0.7439024390243902);\n\tstarts[46] = vec2(3.3292682926829267, -0.2682926829268293);\n\tends[46] = vec2(3.3292682926829267, -0.8170731707317074);\n\tstarts[47] = vec2(3.3292682926829267, -0.8170731707317074);\n\tends[47] = vec2(3.182926829268293, -0.9634146341463414);\n\tstarts[48] = vec2(3.182926829268293, -0.9634146341463414);\n\tends[48] = vec2(2.9878048780487805, -0.9268292682926829);\n\tstarts[49] = vec2(3.3170731707317067, -0.30487804878048785);\n\tends[49] = vec2(3.1341463414634148, -0.24390243902439024);\n\tstarts[50] = vec2(3.1341463414634148, -0.24390243902439024);\n\tends[50] = vec2(2.951219512195122, -0.31707317073170727);\n\tstarts[51] = vec2(2.951219512195122, -0.31707317073170727);\n\tends[51] = vec2(2.8902439024390243, -0.524390243902439);\n\tstarts[52] = vec2(2.8902439024390243, -0.524390243902439);\n\tends[52] = vec2(3.036585365853659, -0.7073170731707317);\n\tstarts[53] = vec2(3.036585365853659, -0.7073170731707317);\n\tends[53] = vec2(3.1707317073170733, -0.7073170731707317);\n\tstarts[54] = vec2(3.158536585365854, -0.7073170731707317);\n\tends[54] = vec2(3.2926829268292677, -0.646341463414634);\n    Po res;\n    int idx = -1;\n    float dist = 114514.;\n    float t = TIME * 80.;\n    float po = (1. - cos(TIME)) / 2.;\n    for (int i = 0; i < N; i++) {\n        vec2 origin =  rot(vec2(1,0), float(i+0) * 360. / float(N) + t) * 0.5;\n        vec2 origin2 = rot(vec2(1,0), (float(i+0) + (i == 0 ? 0.2 : 1.)) * 360. / float(N) + t) * 0.5;\n        starts[i] = origin * (1. - po) + po * trans(starts[i]);\n        ends[i] = origin2 * (1. - po) + po * trans(ends[i]);\n        float d = seg(starts[i], ends[i], p);\n        if (d < dist) {\n            dist = d;\n            idx = i;\n        }\n    }\n    res.d = dist;\n    res.idx = idx;\n    return res;\n}\n\nconst float PI = 3.141592;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    Po po = dist(uv);\n    float t = 1. / po.d * 0.01;\n    float theta = float(po.idx) / float(N) * 360.;\n    fragColor.rgb = vec3(t) * 1.;\n    fragColor.a = 1.;\n}","name":"Image","description":"","type":"image"}]}