{"ver":"0.1","info":{"id":"MfsyRl","date":"1721476673","viewed":47,"name":"Snaky shapes","username":"andy_che","description":"Hello, my snaky shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"lfsyWN","parentname":"Hello, gears"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifndef PI\n#define PI 3.1415926535897932384626433832795\n#endif\n\n#define TWO_PI 6.28318530718\n\nfloat shape_mask(vec2 st, int N, float extra_rot, float shape_size, float smooth_border){\n    // Angle and radius from the current pixel\n    float a = atan(st.x, st.y) + PI + extra_rot;\n    float r = TWO_PI / float(N);\n\n    // Reference to\n    // http://thndl.com/square-shaped-shaders.html\n    // Shaping function that modulate the distance\n    float d = cos(floor(.5 + a / r) * r - a) * length(st);\n    float shape_mask = 1.0 - smoothstep(shape_size - smooth_border/ 2., shape_size + smooth_border / 2., d);\n    \n    return shape_mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 st_zero_one = fragCoord.xy / iResolution.xy;\n\n    // Remap the space to -1. to 1.\n    vec2 st = st_zero_one * 2. - 1.;\n\n    float x_squeeze = iResolution.x / iResolution.y;\n    st.x *= x_squeeze;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    float mask = 0.;\n    int N = 4;\n    float last_mask = 0.;\n\n    for(int layer = 0; layer < 40; layer++){\n        // float angle = PI * float(layer) * .05;\n        float rot_speed =  + sin(iTime * .3) * .15;\n\n        float angle = PI * sin(float(layer) * rot_speed) * .4;\n\n        angle *= pow(.99, (float(layer)));\n        float shape_size = pow(.94, (float(layer)));\n        \n        float shape_mask_border = shape_mask(st, N, angle, shape_size + .001, .007);\n\n        float shape_mask = shape_mask(st, N, angle, shape_size, .005);\n        shape_mask *= .8 + sin(float(layer) * .9) * .3;\n\n        mask = max(shape_mask, mask - shape_mask_border);\n        last_mask = shape_mask;\n    }\n\n    color = vec3(mask);\n    // color = vec3(d);\n    color = mix(color, vec3(0.8431, 0.0, 0.0), last_mask);\n\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}