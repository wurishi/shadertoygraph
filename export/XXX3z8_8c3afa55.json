{"ver":"0.1","info":{"id":"XXX3z8","date":"1707260060","viewed":96,"name":"Space Conveyor","username":"incre_ment","description":"Just messing around with drawing stuff in 2D.\n\nCode isn't good!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["space","blocks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nfloat PI = 3.14159;\nfloat TAU = 2.*3.14159;\n\n\nfloat Box(vec2 uv, float ww, float hh){\n  uv.y = abs(uv.y);\n  float m = smoothstep(.001,-.001, uv.y - hh/2.0);\n  uv.x = abs(uv.x);\n  m *= smoothstep(.001, -.001, uv.x - ww/2.0);  \n  return m;\n}\n\n\nfloat Flipper(vec2 uv){\n\nuv.x += .8*fract(iTime);\n\n   float t = fract(iTime);\n   \n   if (t <= .5){\n   float tt = 2.0*t;\n   uv.x -= .3;\n   uv.y += .1;\n   uv *= rotation(PI/2.*fract(tt));\n   uv.y -= .1;\n   uv.x += .3;\n   }\n   \n   if (t >= .5){\n   float tt = 2.0*(t - .5);\n   uv.x -= .2;\n   uv.y += .2;\n   \n   uv.x -= .3;\n   uv.y -= .1;\n   uv *= rotation(PI/2. + PI/2.*fract(tt));\n   uv.y += .1;\n   uv.x += .3;\n   }\n   \n   return Box(uv, .6, .2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n   \n   vec3 col = vec3(0);\n   uv *= 1.2;  \n   \n   // Stars\n   float rVal = mod(324.6*sin(46.7*uv.x)+674.3*cos(23.8*uv.y),1.0);\n   if (rVal > .995 && length(uv-vec2(1.,.5)) > .4){\n    col = vec3(1.5);\n   }\n   \n   vec2 uv2 = uv;\n   \n   // Flipper\n   col += Flipper(uv);\n   \n   // Conveyor\n   uv2.x *= 4.;\n   uv2.x += 3.*fract(iTime);\n   uv2.x = uv2.x - floor(uv2.x) - .5;\n  \n   float tileX = .9;\n   float tileY = .3;\n   col+= Box(uv2+vec2(0.,.25),tileX,tileY);\n   col-= Box(uv2+vec2(0.,.25),tileX*.9,tileY*.9);\n   \n   // Moon (old version)\n   // float moon = length(uv-vec2(1.,.5)) - .4; \n   // col += 1.- pow(moon,.25);\n   \n   // Moon by berelium (see comments)\n   float moon = 1. / (length(uv-vec2(1.,.5)) - .4); \n   col += pow(moon * 0.0025, 0.9); // dampen + intensify\n   col = pow(col, vec3(1.0/2.2)); // sRGB\n   \n   \n   \n   \n   // Output to screen\n   fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}