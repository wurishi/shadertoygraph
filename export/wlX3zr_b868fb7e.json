{"ver":"0.1","info":{"id":"wlX3zr","date":"1555484233","viewed":1230,"name":"Basics - Patterns 2","username":"trevorleake","description":"A simple study in use of noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","patterns","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in float x) {\n    return fract(sin(x)*1e4);\n}\n\n\n// Just a function to return a pleasant translation/velocity for each column\nfloat velocity(float column) {\n    float v = (random(column) - .5)/2.;\n    v *= 14.2857;\n    return iTime * v;\n}\n\n\nfloat box(vec2 uv, vec2 topLeft, vec2 bottomRight)\n{\n    return uv.x > topLeft.x && uv.x < bottomRight.x && uv.y < topLeft.y && uv.y > bottomRight.y ? 1. : 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center our coordinate system    \n    vec2 uv = (fragCoord - .5*iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // Scale the coords up by 10\n    uv *= 10.;\n        \n    // Assign translation by column\n    uv += vec2(0, velocity(floor(uv.x)));\n    \n\n    vec3 col = vec3(0);\n\n    // Determine each row exists (as columns are offset, this will look like each cell is determined individually\n    float rowExists = step(.7, random(floor(uv.y)));\n\n    // Paint in boxes if row exists\n    col += rowExists * box(fract(uv), vec2(0,.7), vec2(.3,0));\n\t\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n        \n\n","name":"Image","description":"","type":"image"}]}