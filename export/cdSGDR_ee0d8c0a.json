{"ver":"0.1","info":{"id":"cdSGDR","date":"1667432653","viewed":118,"name":"Psychedelic Playing with colors","username":"valdis","description":"learning, playing with shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Size 20.0\n#define cSize 0.7\n#define Speed 0.5\n#define PI 3.14159265\n#define E 2.718281828\n#define move(s,c,t) step(s - 1.0, mod(t, c)) * (1.0 - step(s, mod(t, c)))\n\nfloat star(vec2 uv, vec2 center, float radius)\n{\n    vec2 pos = (uv - center + 0.5) * 2.0 - 1.0;\n    vec2 polar = vec2(length(pos) * 3. / radius, atan(pos.y,pos.x));\n    float f = pow(E,sin(polar.y + 2.0*iTime))- 2.0 * cos(5.0 * polar.y - iTime) + pow(sin(2.0*polar.y/24.0),5.0);\n    return 1. - step(f, polar.x);\n}\n\nfloat stars(vec2 uv)\n{\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 i = mod(floor(uv * Size),2.0);\n    uv = fract(uv * Size);\n    \n    float p = Speed * iTime;\n    uv.y += move(1.0,2.0, p) * mod(p, 1.0) * (1.0 - step(0.9, i.x));\n    uv.x += move(2.0,2.0, p) * mod(p, 1.0) * step(0.9, i.y);\n    uv.y -= move(1.0,2.0, p) * mod(p, 1.0) * step(0.9, i.x);\n    uv.x -= move(2.0,2.0, p) * mod(p, 1.0) * (1.0 - step(0.9, i.y)) ;\n    \n    vec2 c11 = vec2(0.5);\n    vec2 c01 = vec2(-0.5,0.5);\n    vec2 c10 = vec2(0.5,-0.5);\n    vec2 c21 = vec2(0.5, 1.5);\n    vec2 c12 = vec2(1.5, 0.5);\n    \n    float col = \n    star(uv, c11, cSize) // 0,0\n    + star(uv, c01, cSize)//0,1\n    + star(uv, c10, cSize)//1,0\n    + star(uv, c21, cSize)//1,1\n    + star(uv, c12, cSize)//1,1\n    ;\n    return clamp(col,0.0,1.0);\n}\n\nvec3 anticolor(vec2 uv, float color)\n{\n    float border = dot(uv * 2.0 - 1.0, vec2(sin(-iTime + uv.x * PI*2.0),cos(-iTime+ uv.y * PI*3.0)));\n    float b = step(0.0,border);\n    uv -= vec2(1.0 - b);\n\n    return vec3(uv, b) * step(0.9, color) * border;\n}\n\nfloat rand(vec2 uv, float x, float y)\n{\n    return abs(fract(sin(iTime - uv.x * PI * x) + cos(uv.y * PI) * y));\n}\n\nvec3 mixer(vec2 uv, vec3 color)\n{\n    return 0.5 * normalize(cross(color, vec3(rand(uv,-1.1,0.2),rand(uv,0.5,-0.5), rand(uv,0.5, -0.5)))) + vec3(0.5);\n}\n\nvec3 mixtexture(vec2 uv, vec3 color)\n{\n    vec3 textColor = texture(iChannel0, uv).xyz * 2.0 - vec3(1.0);\n    return cross(textColor, color);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float col = stars(uv);\n\n    vec3 antiCol = anticolor(uv, col);\n    \n    vec3 text = mixtexture(uv,antiCol);\n    \n    vec3 mix1 = mixer(uv, text);\n    \n    // Output to screen\n    fragColor = vec4(mix1,1.0);\n}","name":"Image","description":"","type":"image"}]}