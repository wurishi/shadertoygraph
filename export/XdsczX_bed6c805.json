{"ver":"0.1","info":{"id":"XdsczX","date":"1489146672","viewed":525,"name":"ColorBlindness_v2","username":"lhog","description":"ColorBlindness correction. Another option","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","colorblindness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int NONE = 0;\nconst int PROTANOPIA = 1;\nconst int DEUTERANOPIA = 2;\nconst int TRITANOPIA = 3;\n\nconst int blindnessType = PROTANOPIA; //example\n\nvoid Daltonize( out vec4 myoutput, in vec4 myinput )\n{\n\t// RGB to LMS matrix conversion\n\tfloat L = (17.8824f * myinput.r) + (43.5161f * myinput.g) + (4.11935f * myinput.b);\n\tfloat M = (3.45565f * myinput.r) + (27.1554f * myinput.g) + (3.86714f * myinput.b);\n\tfloat S = (0.0299566f * myinput.r) + (0.184309f * myinput.g) + (1.46709f * myinput.b);\n    \n    float l;\n    float m;\n    float s;\n    \n    // Simulate color blindness\n    \n\tif ( blindnessType == PROTANOPIA) // Protanope - reds are greatly reduced (1% men)\n    {\n        l = 0.0f * L + 2.02344f * M + -2.52581f * S;\n        m = 0.0f * L + 1.0f * M + 0.0f * S;\n        s = 0.0f * L + 0.0f * M + 1.0f * S;\n    }    \n\telse if ( blindnessType == DEUTERANOPIA) // Deuteranope - greens are greatly reduced (1% men)\n    {\n        l = 1.0f * L + 0.0f * M + 0.0f * S;\n        m = 0.494207f * L + 0.0f * M + 1.24827f * S;\n        s = 0.0f * L + 0.0f * M + 1.0f * S;\n    }\n    \n\telse if ( blindnessType == TRITANOPIA) // Tritanope - blues are greatly reduced (0.003% population)\n    {\n        l = 1.0f * L + 0.0f * M + 0.0f * S;\n        m = 0.0f * L + 1.0f * M + 0.0f * S;\n        s = -0.395913f * L + 0.801109f * M + 0.0f * S;\n    }\n    else\n    {\n        myoutput = myinput;\n        return;\n    }\n    \n\t// LMS to RGB matrix conversion\n\tvec4 error;\n\terror.r = (0.0809444479f * l) + (-0.130504409f * m) + (0.116721066f * s);\n\terror.g = (-0.0102485335f * l) + (0.0540193266f * m) + (-0.113614708f * s);\n\terror.b = (-0.000365296938f * l) + (-0.00412161469f * m) + (0.693511405f * s);\n\terror.a = 1.0;\n\t\n    // Isolate invisible colors to color vision deficiency (calculate error matrix)\n\terror = (myinput - error);\n\t\n    // Shift colors towards visible spectrum (apply error modifications)\n\tvec4 correction;\n\tcorrection.r = 0.0; // (error.r * 0.0) + (error.g * 0.0) + (error.b * 0.0);\n\tcorrection.g = (error.r * 0.7) + (error.g * 1.0); // + (error.b * 0.0);\n\tcorrection.b = (error.r * 0.7) + (error.b * 1.0); // + (error.g * 0.0);\n\t\n    // Add compensation to original values\n    correction = myinput + correction;\n    correction.a = myinput.a;\n\t\n\tmyoutput = correction;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy; // Condensing this into one line\n    vec4 texColor = texture(iChannel0,xy); // Get the pixel at xy from iChannel0\n    Daltonize(fragColor, texColor);\n}","name":"Image","description":"","type":"image"}]}