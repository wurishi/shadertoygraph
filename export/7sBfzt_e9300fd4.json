{"ver":"0.1","info":{"id":"7sBfzt","date":"1646845770","viewed":183,"name":"Practice - Martijn Mashup","username":"mehow_one","description":"Merging two tutorials together to practice my raymarching.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["reflection","refraction","gyroids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Math Zoo - Alien Orb\" \n// https://www.shadertoy.com/view/tlcXWX\n// by Martijn Steinrucken aka BigWings/The Art of Code - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// +\n// \"[TUT] Bending Light - Part 2\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2021\n// https://www.shadertoy.com/view/sllGDN\n\n// https://www.shadertoy.com/view/slfyRM\n\n\n#define S smoothstep\n#define AA 2\n#define T iTime*.1\n#define TAU 6.283185\n#define PI TAU * .5\n\n#define MAX_STEPS 300\n#define MAX_DIST 30.\n#define SURF_DIST .001\n\nfloat sabs(float x, float k) {\n    return sqrt(x*x+k);\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,234.34));\n    p += dot(p, p+23.43);\n    return fract(p.x*p.y);\n}\n\nfloat Gyroid(vec3 p) {\n    float scale = TAU;\n    vec3 p2 = p*scale;\n    p2.xy *= Rot(T);\n    return (abs(dot(sin(p2+T*TAU), cos(p2.zxy-T*TAU)))-.5)/scale;\n}\n\nfloat diamond(in vec3 p, float r) {\n  float a = floor(atan(p.z,p.x)/(PI*.25)+.5)*PI*.25, c = cos(a), s = sin(a);\n  vec3  q = vec3(c*p.x+s*p.z, p.y, abs(-c*p.z+s*p.x)) / r;\n  float fcBezel = dot(q, vec3(.544639035, .8386705679, 0))           - .544639035;\n  float fcUGird = dot(q, vec3(.636291199, .7609957358, .1265661887)) - .636291199;\n  float fcLGird = dot(q, vec3(.675808237,-.7247156073, .1344266163)) - .675808237;\n  float fcStar  = dot(q, vec3(.332894535, .9328278154, .1378894313)) - .448447409;\n  float fcPMain = dot(q, vec3(.656059029,-.7547095802, 0))           - .656059029;\n  float fcTable =   q.y - .2727511892;\n  float fcCulet = - q.y - .8692867378 * .96;  \n  float fcGirdl = length(q.xz) - .975;\n  return max(fcGirdl, max(fcCulet, max(fcTable, max(fcBezel, max(fcStar, max(fcUGird, max(fcPMain,fcLGird)))))));\n}\n\n\nfloat GetDist(vec3 p) {\n    \n    float sphere = abs(length(p)-1.)-.05;\n    float d=smin(sphere, Gyroid(p)*.6, -.05);\n    d = diamond(p,1.);\n    return d;\n}\n\n// for culling\nfloat RayMarch(vec3 ro, vec3 rd, float side) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p)*side;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nfloat GlitterLayer(vec2 p, float seed) {\n    float t = iTime*3.+seed;\n    vec2 id = floor(p);\n    vec2 gv = fract(p)-.5;\n    \n    float n = Hash21(id);\n    float x = fract(n*12.32);\n    float y = fract(n*123.32);\n    vec2 offs = vec2(x,y)-.5;\n    \n    float d = length(gv-offs*.8);\n    float m = S(.2, .0, d);\n    \n    m *= pow(sin(t+n*6.2832)*.5+.5, 3.);\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime*.1;\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 1, -1)*2.;\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831+iTime*.05);\n    ro.y = max(ro.y, -.9);\n    \n    float IOR = 1.557; // index of refraction\n    vec3 col = vec3(0.);\n    vec3 rd = R(uv, ro, vec3(0,0,0), 1.);\n    col = texture(iChannel0, rd).rgb;\n    vec3 p = ro;\n    for(int n = 0;n<2;n++){\n    float dist = RayMarch(p, rd, 1.);\n    p = p + rd * dist;\n    if(dist<MAX_DIST) {\n        \n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 refOutside = texture(iChannel0, r).rgb;\n        vec3 rdIn = refract(rd, n, 1./IOR); // ray dir when entering\n        \n        vec3 pEnter = p - n*SURF_DIST*3.;\n        float dIn = RayMarch(pEnter, rdIn, -1.); // inside the object\n        \n        vec3 pExit = pEnter + rdIn * dIn; // 3d position of exit\n        vec3 nExit = -GetNormal(pExit); \n        \n        vec3 reflTex = vec3(0);\n        vec3 rdOut = vec3(0);\n        \n        float abb = 0.051;\n        \n        // red\n        rdOut = refract(rdIn, nExit, IOR-abb);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex.r = texture(iChannel0, rdOut).r;\n        \n        // green\n        rdOut = refract(rdIn, nExit, IOR);\n        rd = -nExit;\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex.g = texture(iChannel0, rdOut).g;\n        \n        // blue\n        rdOut = refract(rdIn, nExit, IOR+abb);\n        if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n        reflTex.b = texture(iChannel0, rdOut).b;\n        \n        float dens = 1.0;\n        float optDist = exp(-dIn*dens);\n        \n        reflTex = reflTex*optDist;//*vec3(1., .05,.2);\n        \n        float fresnel = pow(1.+dot(rd, n), 5.);\n        \n        col += mix(reflTex, refOutside, fresnel);\n        \n            }\n        }\n    \n   col /= float(AA*AA);\n   col *= 1.-dot(uv,uv);\n   col /= col+1.; col *= 3.; // tone mapping \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}