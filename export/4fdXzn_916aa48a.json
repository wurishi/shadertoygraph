{"ver":"0.1","info":{"id":"4fdXzn","date":"1713500757","viewed":111,"name":"Heat Filter","username":"Squidz","description":"I was looking for a heatwave effect that didn't have edge runoff issues, I tried a couple ideas but came up short. So in the end, I just cropped the image.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["filter","effect","heat","heatwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    \n    if(mod(round(iTime / 2.0), 3.0) != 0.0){//just for comparisons sake\n     //zoom in to avoid the edge clipping\n     float zoomIn = 0.1;\n     uv = (zoomIn/2.0) + (uv * (1.0 - zoomIn));\n     \n     //customisation variables\n     float wiggle_speed = 0.5;\n     float vertical_compression = 10.0;\n     float effect_intensity = 0.005;\n     \n     float x_off = sin((iTime * wiggle_speed) + (uv.y * vertical_compression));//offset the x part of the uv based on y and propagate up based on time\n     uv.x += effect_intensity * x_off;\n     \n     \n     col = texture(iChannel0, uv).rgb;\n     \n     //play with the colours a bit\n     col = mix(col, vec3(1.0,1.0,0.5), (1.0 - col.b)/10.0);\n     \n    } else {\n     col = texture(iChannel0, uv).rgb;\n    };\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}