{"ver":"0.1","info":{"id":"DscyRj","date":"1695497114","viewed":196,"name":"Tails","username":"Mathis","description":"A SDF model of Tails","likes":29,"published":1,"flags":32,"usePreview":0,"tags":["sdf","sonic","tails"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Deleted the layered 3D hair version, it needs some improvements\n\nvec3 acesFilm(vec3 x) {\n    //Aces film curve\n    return clamp((x*(2.51*x+0.03))/(x*(2.43*x+0.59)+0.14),0.,1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 Color = texture(iChannel0,fragCoord*IRES).xyz;\n    fragColor = vec4(pow(acesFilm(max(vec3(0.),Color)),vec3(0.45)),1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Constants\nconst float FOV = radians(62.);\nconst vec3 SkyLight = vec3(0.6,0.8,1.)*0.5;\nconst vec3 SunLight = vec3(1.,0.7,0.2)*5.;\nconst float CFOV = tan(FOV*0.5);\nconst float PI = 3.141592653;\nconst float HPI = PI*0.5;\nconst float IPI = 1./PI;\nconst float PI2 = PI*2.;\nconst float IPI2 = 0.5/PI;\nconst float ToRadians = PI/180.;\nconst float I3 = 1./3.;\nconst float I16 = 1./16.;\nconst float I32 = 1./32.;\nconst float I64 = 1./64.;\nconst float I128 = 1./128.;\nconst float I256 = 1./256.;\nconst float I300 = 1./300.;\nconst float I512 = 1./512.;\nconst float I1024 = 1./1024.;\nconst float I2048 = 1./2048.;\nconst vec2 eps = vec2(0.0002,0.);\n//RES\n#define RES iChannelResolution[0].xy\n#define IRES (1./iChannelResolution[0].xy)\n#define ASPECT vec2(RES.x/RES.y,1.)\n#define RESOff max(mod(iChannelResolution[0].xy,8.),vec2(0.,1.))\n\nstruct HIT { float D; vec3 N; float C; };\n\n//SDF\nfloat DFBox(vec3 p, vec3 b) {\n    vec3 d = abs(p-b*0.5)-b*0.5;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nfloat DFBoxC(vec3 p, vec3 b) {\n    vec3 d = abs(p)-b;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nfloat DFBox(vec2 p, vec2 b) {\n    vec2 d = abs(p-b*0.5)-b*0.5;\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\nfloat DFBoxC(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\nfloat DFDisk(vec3 p) {\n    float d = length(p.xz-0.5)-0.35;\n    vec2 w = vec2(d,abs(p.y));\n    return min(max(w.x,w.y),0.)+length(max(w,0.));\n}\n\nfloat DFLine(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b-a;\n    float k = dot(p-a,ba)/dot(ba,ba);\n    return length((a+clamp(k,0.,1.)*(b-a))-p);\n}\n\nfloat DFLine(vec2 p, vec2 a, vec2 b) {\n    vec2 ba = b-a;\n    float k = clamp(dot(p-a,ba)/dot(ba,ba),0.,1.);\n    return length((a+k*(b-a))-p);\n}\n\nvec2 DFLine2(vec2 p, vec2 a, vec2 b) {\n    vec2 ba = b-a;\n    float k = clamp(dot(p-a,ba)/dot(ba,ba),0.,1.);\n    return vec2(length((a+k*(b-a))-p),k);\n}\n\nfloat DFCylinder(vec3 p, float r, float h) {\n    vec2 d = vec2(length(p.xz)-r,abs(p.y)-h);\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\nfloat DFCone(vec3 p, float CR, float h) {\n    //Credit: iq\n    vec2 q = h*vec2(CR,-1.);\n    vec2 w = vec2(length(p.xz),p.y);\n    vec2 a = w-q*clamp(dot(w,q)/dot(q,q),0.,1.);\n    vec2 b = w-q*vec2(clamp( w.x/q.x,0.,1.),1.);\n    float k = sign(q.y);\n    float d = min(dot(a,a),dot(b,b));\n    float s = max(k*(w.x*q.y-w.y*q.x),k*(w.y-q.y));\n    return sqrt(d)*sign(s);\n}\n\nfloat DFPlane(vec3 p, vec3 p0, vec3 p1, vec3 p2) {\n    //Intersects a plane\n    vec3 Normal = normalize(cross(p1-p0,p2-p0));\n    vec3 tp = vec3(dot(p-p0,normalize(p1-p0)),dot(p-p0,normalize(p2-p0)),dot(p-p0,Normal));\n    return DFBox(tp-vec3(0.,0.,-0.005),vec3(length(p1-p0),length(p2-p0),0.01));\n}\n\nvec2 Rotate(vec2 p, float ang) {\n    float c = cos(ang), s = sin(ang);\n    return vec2(p.x*c-p.y*s,p.x*s+p.y*c);\n}\n\nvec2 Repeat0(vec2 p, float n) {\n    float ang = 2.*3.14159/n;\n    float sector = clamp(floor(atan(p.x,p.y)/ang+0.5),5.,7.);\n    p = Rotate(p,sector*ang);\n    return p;\n}\n\nvec2 Repeat1(vec2 p, float n) {\n    float ang = 2.*3.14159/n;\n    float sector = clamp(floor(atan(p.x,p.y)/ang+0.5),-10.,10.);\n    p = Rotate(p,sector*ang);\n    return p;\n}\n\nfloat smin(float a, float b, float k) {\n    //https://iquilezles.org/articles/smin\n    float h = max(k-abs(a-b),0.)/k;\n    return min(a,b)-h*h*h*k*(1.0/6.0);\n}\n\nmat3 TBN(vec3 N) {\n    vec3 Nb,Nt;\n    if (abs(N.y)>0.999) {\n        Nb=vec3(1.,0.,0.);\n        Nt=vec3(0.,0.,1.);\n    } else {\n    \tNb=normalize(cross(N,vec3(0.,1.,0.)));\n    \tNt=normalize(cross(Nb,N));\n    }\n    return mat3(Nb.x,Nt.x,N.x,Nb.y,Nt.y,N.y,Nb.z,Nt.z,N.z);\n}\n\nvec3 TBN(vec3 N, out vec3 O) {\n    O = ((abs(N.y)<=0.999)?normalize(cross(N,vec3(0.,1.,0.))):vec3(1.,0.,0.));\n    return normalize(cross(O,N));\n}\n\nvec3 RandSample(vec2 v) {\n    float r=sqrt(1.-v.x*v.x);\n    float phi=2.*3.14159*v.y;\n    return vec3(cos(phi)*r,sin(phi)*r,v.x);\n}\n\nvec3 RandSampleCos(vec2 v) {\n    float theta=sqrt(v.x);\n    float phi=2.*3.14159*v.y;\n    float x=theta*cos(phi);\n    float z=theta*sin(phi);\n    return vec3(x,z,sqrt(max(0.,1.-v.x)));\n}\n\nvec3 SchlickFresnel(vec3 r0, float angle) {\n    //Schlick Fresnel approximation\n    return r0+(1.-r0)*pow(1.-angle,5.);\n}\n\nvec3 ARand23(vec2 uv) {\n    //Analytic random\n    return fract(sin(uv.x*uv.y)*vec3(403.125,486.125,513.432)+cos(dot(uv,vec2(13.18273,51.2134)))*vec3(173.137,261.23,203.127));\n}\n\nfloat ARand21(vec2 uv) {\n    //Analytic random\n    return fract(sin(uv.x*uv.y)*403.125+cos(dot(uv,vec2(13.18273,51.2134)))*173.137);\n}\n\nvec2 ABox(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax) {\n    vec2 tMin = (bmin-origin)*dir;\n    vec2 tMax = (bmax-origin)*dir;\n    vec2 t1 = min(tMin,tMax);\n    vec2 t2 = max(tMin,tMax);\n    return vec2(max(t1.x,t1.y),min(t2.x,t2.y));\n}\n\nvec2 ABox(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t1 = min(tMin,tMax);\n    vec3 t2 = max(tMin,tMax);\n    return vec2(max(max(t1.x,t1.y),t1.z),min(min(t2.x,t2.y),t2.z));\n}\n\nfloat ABoxfar(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax) {\n    vec2 tMin = (bmin-origin)*dir;\n    vec2 tMax = (bmax-origin)*dir;\n    vec2 t2 = max(tMin,tMax);\n    return min(t2.x,t2.y);\n}\n\nvec2 ABoxfarNormal(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax, out float dist) {\n    vec2 tMin = (bmin-origin)*dir;\n    vec2 tMax = (bmax-origin)*dir;\n    vec2 t2 = max(tMin,tMax);\n    dist = min(t2.x,t2.y);\n    vec2 signdir = (max(vec2(0.),sign(dir))*2.-1.);\n    if (t2.x<t2.y) return vec2(signdir.x,0.);\n    else return vec2(0.,signdir.y);\n}\n\nvec3 ABoxfarNormal(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax, out float dist) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t2 = max(tMin,tMax);\n    dist = min(min(t2.x,t2.y),t2.z);\n    vec3 signdir = (max(vec3(0.),sign(dir))*2.-1.);\n    if (t2.x<min(t2.y,t2.z)) return vec3(signdir.x,0.,0.);\n    else if (t2.y<t2.z) return vec3(0.,signdir.y,0.);\n    else return vec3(0.,0.,signdir.z);\n}\n\nvec2 ABoxNormal(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax, out vec3 N) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t1 = min(tMin,tMax);\n    vec3 t2 = max(tMin,tMax);\n    vec3 signdir = -(max(vec3(0.),sign(dir))*2.-1.);\n    if (t1.x>max(t1.y,t1.z)) N = vec3(signdir.x,0.,0.);\n    else if (t1.y>t1.z) N = vec3(0.,signdir.y,0.);\n    else N = vec3(0.,0.,signdir.z);\n    return vec2(max(max(t1.x,t1.y),t1.z),min(min(t2.x,t2.y),t2.z));\n}\n\nvec3 ABoxNormal(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin = (bmin-origin)*dir;\n    vec3 tMax = (bmax-origin)*dir;\n    vec3 t1 = min(tMin,tMax);\n    vec3 t2 = max(tMin,tMax);\n    vec3 signdir = -(max(vec3(0.),sign(dir))*2.-1.);\n    if (t1.x>max(t1.y,t1.z)) return vec3(signdir.x,0.,0.);\n    else if (t1.y>t1.z) return vec3(0.,signdir.y,0.);\n    else return vec3(0.,0.,signdir.z);\n}\n\n//Encode/decode\nvec3 FloatToVec3(float v) {\n    int VPInt = floatBitsToInt(v);\n    int VPInt1024 = VPInt%1024;\n    int VPInt10241024 = ((VPInt-VPInt1024)/1024)%1024;\n    return vec3(VPInt1024,VPInt10241024,((VPInt-VPInt1024-VPInt10241024)/1048576))*I1024;\n}\n\nfloat Vec3ToFloat(vec3 v) {\n    ivec3 intv = min(ivec3(floor(v*1024.)),ivec3(1023));\n    return intBitsToFloat(intv.x+intv.y*1024+intv.z*1048576);\n}\n\nvec3 FloatToVec32(float v) {\n    int VPInt = floatBitsToInt(v);\n    int VPInt1024 = VPInt%512;\n    int VPInt10241024 = ((VPInt-VPInt1024)/512)%512;\n    return vec3(VPInt1024,VPInt10241024,((VPInt-VPInt1024-VPInt10241024)/262144))*I512;\n}\n\nfloat Vec3ToFloat2(vec3 v) {\n    ivec3 intv = min(ivec3(floor(v*512.)),ivec3(511));\n    return intBitsToFloat(intv.x+intv.y*512+intv.z*262144);\n}\n\nvec2 FloatToVec2(float v) {\n    int VPInt = floatBitsToInt(v);\n    int VPInt1 = VPInt%32768;\n    return vec2(VPInt1,((VPInt-VPInt1)/32768))/32768.;\n}\n\nfloat Vec2ToFloat(vec2 v) {\n    ivec2 intv = min(ivec2(floor(v*32768.)),ivec2(32767));\n    return intBitsToFloat(intv.x+intv.y*32768);\n}\n\nvec2 FloatToIVec2(float v) {\n    int VPInt = floatBitsToInt(v);\n    int VPInt1 = VPInt%32768;\n    return vec2(VPInt1,((VPInt-VPInt1)/32768))+0.5;\n}\n\nfloat IVec2ToFloat(vec2 v) {\n    ivec2 intv = min(ivec2(floor(v)),ivec2(32767));\n    return intBitsToFloat(intv.x+intv.y*32768);\n}\n\n//SKY\nvec3 SampleSky(vec3 d) {\n    vec3 L = vec3(0.1,0.4,1.)*(1.-0.5*d.y);\n    float bbfar = ABox(vec3(0.5),1./d,vec3(0.),vec3(1.)).y;\n    if (d.z<0.) L = ((d.x<0.)?vec3(1.,0.15,0.01)*2.:vec3(1.,1.,1.));\n    return L;\n}\n\nvec2 GradientField(vec2 p) {\n    //Gradient field for fur\n    //Eyes\n    vec2 dp = vec2(p.x-0.015,p.y-clamp(p.y,1.,1.05)); float dplen = length(dp);\n    vec2 HDir2 = vec2(dp.y,-dp.x)/(dplen+dplen*dplen*64.);\n    dp = vec2(p.x+0.015,p.y-clamp(p.y,1.,1.05)); dplen = length(dp);\n    HDir2 += vec2(-dp.y,dp.x)/(dplen+dplen*dplen*64.);\n    //Spiral\n    dp = vec2(p.x+0.045,p.y-1.06); dplen = length(dp);\n    HDir2 += 0.9*vec2(dp.y,-dp.x)/(dplen+dplen*dplen*200.);\n        dp = vec2(p.x,p.y-1.1); dplen = length(dp);\n        HDir2 += 1.2*vec2(dp.y,-dp.x)/(dplen+dplen*dplen*300.);\n        dp = vec2(p.x-0.07,p.y-1.03); dplen = length(dp);\n        HDir2 -= 0.3*vec2(-dp.y,dp.x)/(dplen+dplen*dplen*200.);\n    //Ears\n    float W = 3.-3.*exp(-max(0.,p.y-1.005)*32.);\n    dp = vec2(-0.23,1.2)-p; dplen = length(dp);\n    HDir2 += W*dp/(dplen+dplen*2.);\n    dp = vec2(0.2,1.2)-p; dplen = length(dp);\n    HDir2 += W*dp/(dplen+dplen*2.);\n    //Mouth hair dir\n    HDir2 += normalize(vec2(sign(p.x),p.y-1.))*min(max(0.,1.-abs(p.y-1.01)*50.),pow(max(0.,abs(p.x)-0.05)*64.,2.));\n    //Nose\n    if (p.y<1.) {\n        //Nose\n        dp = p-vec2(0.,0.995); dplen = length(dp);\n        HDir2 = vec2(dp.x,0.)/(dplen+dplen*dplen);\n        //Mouth\n        dp = p-vec2(-0.01,0.9755); dplen = length(dp);\n        HDir2 += 0.6*dp/(dplen+dplen*dplen);\n        //Mouth hair dir\n        HDir2 += normalize(vec2(sign(p.x),p.y-1.))*pow(max(0.,abs(p.x)-0.03)*64.,2.);\n    }\n    //Return\n    return normalize(vec2(HDir2.x,HDir2.y+0.001));\n}\n\nvec2 SDF(vec3 sp) {\n    //Sample the SDF\n    vec3 syp = vec3(abs(sp.x),sp.yz); //Symmetric position\n    float Type = 0.;\n    \n    //Head\n    float df = length(sp-vec3(0.,1.03,0.025))-0.08;\n        //Carving out eyes\n        df = -smin(-df,smin(-smin(smin(smin(-DFLine(syp,vec3(0.02,1.035,-0.04),vec3(0.302,0.,-0.5))+0.02,\n            length(sp-vec3(-0.015,-0.984,0.))-0.05,0.0075),-syp.x+0.0395,0.0075),\n             -(syp.x-0.016)*0.8-(sp.y-1.065)*0.6,0.02),DFBox(syp.xy-vec2(0.005,0.),vec2(0.02,1.02)),0.001),0.005);\n        //Ears\n        float tmpd1 = length(syp-vec3(-0.1475,1.05,-0.20))-0.3;\n        float tmpd2 = length(syp-vec3(0.1,1.025,-0.04))-0.12;\n        df = smin(df,max(-smin(smin(\n            -smin(-smin(-abs(tmpd1)+0.0025,-tmpd2,0.005),\n                -smin(-abs(tmpd2)+0.0025,-tmpd1,0.005),0.005)\n            ,dot(syp.xy-vec2(0.09,1.05),vec2(-0.9,0.4358899)),0.025)\n            ,syp.z,0.005),-syp.y+1.),0.005);\n    \n    //Nose\n    float d = length(sp-vec3(0.,1.,0.))-0.06;\n        //Upper and lower limit\n        d = -smin(-d,-sp.y+1.,0.015);\n        d = -smin(-d,sp.y-0.95,0.03);\n        //Nose\n        d = smin(d,-smin(-length(sp-vec3(0.,0.997,-0.056))+0.005,\n             DFLine(syp-vec3(0.0055,0.995,-0.062),vec3(0.),vec3(1.,0.05,0.))-0.004,0.003),0.005);\n    df = smin(df,d,0.005);\n    \n    //Long hair mouth (epic lore accurate name)\n    vec3 rsyp = syp; rsyp.xz = Rotate(syp.xz,-0.35);\n    vec2 rp = Repeat0(rsyp.xy-vec2(0.,0.997),22.).yx;\n    float uvx = max(1.57/128.,rp.x-0.045); //Avoid div by zero\n    float a = 128.;\n    float sinax = sin(a*uvx);\n    float f = 0.01*sinax/(a*uvx);\n    float dfdx = 0.01*(a*uvx*cos(a*uvx)-sinax)/(a*uvx*uvx);\n    float dff = abs(0.0035-f+rp.y)/sqrt(1.+dfdx*dfdx)-0.008+uvx*uvx*4.;\n    d = -smin(smin(-dff,-abs(rsyp.z+0.046)+0.0025,0.005),-rp.y+0.008,0.005);\n    df = smin(df,d,0.015);\n    \n    //Long hair head\n    //1\n    float b = 15.;\n    rsyp = sp-vec3(0.,1.07,-0.02);\n    rsyp.xz = Rotate(rsyp.xz,-0.32);\n    uvx = (0.02-rsyp.z)*0.06;\n    f = pow(rsyp.x,2.)+pow(rsyp.y+rsyp.z+b*rsyp.z*rsyp.z,2.);\n    vec3 dfgrad = 2.*vec3(rsyp.x,rsyp.y+rsyp.z*(1.+b*rsyp.z),(1.+2.*b*rsyp.z)*(rsyp.y+rsyp.z*(1.+b*rsyp.z)));\n    df = smin(df,max(abs(f/length(dfgrad))-0.006+uvx,-sp.y+1.05),0.015);\n    //2\n    rsyp = sp-vec3(0.,1.07,0.);\n    rsyp.xz = Rotate(rsyp.xz,0.04);\n    uvx = (0.-rsyp.z)*0.07;\n    b = 8.;\n    f = pow(rsyp.x,2.)+pow(rsyp.y+rsyp.z+b*rsyp.z*rsyp.z,2.);\n    dfgrad = 2.*vec3(rsyp.x,rsyp.y+rsyp.z*(1.+b*rsyp.z),(1.+2.*b*rsyp.z)*(rsyp.y+rsyp.z*(1.+b*rsyp.z)));\n    df = smin(df,max(abs(f/length(dfgrad))-0.006+uvx,-sp.y+1.05),0.005);\n    //3\n    rsyp = sp-vec3(0.,1.05,0.02);\n    rsyp.xz = Rotate(rsyp.xz,-0.16);\n    uvx = (-0.02-rsyp.z)*0.1;\n    b = 2.;\n    f = pow(rsyp.x,2.)+pow(rsyp.y+rsyp.z+b*rsyp.z*rsyp.z,2.);\n    dfgrad = 2.*vec3(rsyp.x,rsyp.y+rsyp.z*(1.+b*rsyp.z),(1.+2.*b*rsyp.z)*(rsyp.y+rsyp.z*(1.+b*rsyp.z)));\n    df = smin(df,max(abs(f/length(dfgrad))-0.006+uvx,-sp.y+1.05),0.005);\n    \n    //Body\n    rsyp = sp-vec3(-0.02,0.,-0.01);\n    d = DFBox(rsyp,vec3(0.04,0.935,0.005))-0.015-(0.94-rsyp.y)*0.15;\n    df = smin(df,d,0.01);\n        //Hair\n        b = clamp(floor(sp.y*100.),92.,94.)*0.01+0.005;\n        d = -smin(smin(-length(sp-vec3(0.,b-0.095,-0.035))+0.1,-length(sp-vec3(0.,b+0.095,-0.035))+0.1,0.005),\n            length(sp.xy-vec2(0.,1.025))-0.08,0.0025);\n        d = smin(d,DFLine(sp,vec3(0.,0.,-0.035),vec3(0.,0.93,-0.0235))-0.021,0.005);\n        d = -smin(-d,syp.z+0.038,0.0025);\n    df = smin(df,d,0.01);\n    \n    //Mouth\n    float dmouth = smin(-length(sp-vec3(0.,0.992,-0.047))+0.02,length(sp-vec3(0.0035,1.005,-0.06))-0.027,0.01);\n    //float dmouth = smin(-length(sp-vec3(0.,0.992,-0.047))+0.02,-length(sp-vec3(-0.008,0.931,-0.06))+0.05,0.01);\n    df = -smin(-df,-dmouth,0.005);\n    \n    //Eyes\n    d = max(max(length(syp-vec3(-0.005,1.0275,0.0475))-0.1,sp.z+0.0365),-sp.y+1.);\n    d = min(d,max(length(sp-vec3(0.,1.,0.))-0.0575,-dmouth));\n    if (d<df) { df = d; Type = 1.; }\n    \n    \n    //Output\n    return vec2(df,Type);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Rendering\n\nHIT Trace(vec3 P, vec3 D) {\n    //Traces the scene\n    HIT OUT = HIT(100000.,vec3(0.),-1.);\n    \n    //SDF\n    float t = 0.; vec2 dfs;\n    for (int i=0; i<512; i++) {\n        vec3 sp = P+D*t;\n        dfs = SDF(sp);\n        t += dfs.x;\n        if (min(12.-t,dfs.x-eps.x)<0.) break;\n    }\n    if (dfs.x<eps.x) {\n        vec3 sp = P+D*t;\n        OUT = HIT(t,normalize(vec3(SDF(sp+eps.xyy).x-SDF(sp-eps.xyy).x,\n                                    SDF(sp+eps.yxy).x-SDF(sp-eps.yxy).x,\n                                    SDF(sp+eps.yyx).x-SDF(sp-eps.yyx).x)),dfs.y);\n    }\n    //Return\n    return OUT;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output = texture(iChannel0,fragCoord*IRES);\n    if (iFrame<2 || DFBox(vec2(fragCoord.x-(RES.x-RES.y)*0.5,fragCoord.y),vec2(RES.y))>0.) {\n        Output = vec4(0.);\n    } else {\n        vec3 Pos = vec3(-0.015,1.025,-0.1975);\n        vec3 Eye = normalize(vec3(0.1,0.065,1.));\n        vec3 Tan; vec3 Bit = TBN(Eye,Tan);\n        mat3 EyeMat = TBN(Eye);\n        vec2 AAOffset = ARand23(fragCoord*IRES*(6.13+mod(float(iFrame)*3.663,14.64))).xy;\n        vec3 Dir = normalize(vec3(((fragCoord-0.5+AAOffset)*IRES*2.-1.)*(ASPECT*CFOV),1.)*EyeMat);\n        //Render scene\n        HIT Pixel = Trace(Pos,Dir);\n        vec3 Final = vec3(0.);\n        if (Pixel.C>-0.5) {\n            //Geometry\n            vec3 PPos = Pos+Dir*Pixel.D+Pixel.N*0.001;\n            //Determine color\n            vec3 Color;\n            bool FurTexture = true;\n            if (Pixel.C<0.5) {\n                //Skin texture\n                Color = vec3(1.,0.25,0.03);\n                Color *= exp(-max(0.,0.95-PPos.y)*64.);\n                //White under eyes\n                float tmpd = max(-PPos.y+0.955,max(PPos.y-0.9975-PPos.x*PPos.x*3.-0.006/(1.+PPos.x*PPos.x*1024.),\n                             -length(PPos-vec3(0.,1.035,0.07))+0.119));\n                tmpd = min(tmpd,max(PPos.y-0.95,PPos.z+0.0345));\n                Color = mix(vec3(0.55),Color,min(1.,pow(max(0.,tmpd)*512.,2.)));\n                //Nose\n                tmpd = max(length(PPos.xy-vec2(0.,0.999))-0.007,PPos.z+0.058);\n                Color = mix(vec3(0.02),Color,min(1.,pow(max(0.,tmpd)*1024.,2.)));\n                if (PPos.z<-0.059) Color += 0.25*vec3(max(0.,1.-max(0.,length((PPos.xy-vec2(-0.001,0.9995))*vec2(1.,0.7))*600.-0.1)));\n                //Ears\n                if (dot(vec2(abs(PPos.x),PPos.z)-vec2(0.04,0.0065),vec2(0.141,0.99))>0.) Color = vec3(1.);\n            } else if (Pixel.C<1.5) {\n                //Eye + mouth texture\n                Color = vec3(0.4);\n                FurTexture = false;\n                //Mouth\n                if (abs(PPos.y-0.978)<0.0039) {\n                    Color = vec3(0.);\n                    if (length(PPos.xy-vec2(-0.006,0.96))<0.016) Color = vec3(0.1,0.02,0.02);\n                }\n                //Iris & pupil\n                vec2 syp = vec2(abs(PPos.x+0.004),PPos.y);\n                vec2 IPos = (syp-vec2(0.0173,1.018))*vec2(1.,0.35);\n                float ILen = length(IPos)-0.0055;\n                float PLen = length((syp-vec2(0.0173,1.018))*vec2(1.,0.375))-0.00325;\n                if (PLen<0.) {\n                    //Pupil\n                    Color = vec3(0.);\n                    if (length((PPos.xy-vec2(0.0127,1.021))*vec2(1.,0.25))<0.001) Color = vec3(0.99);\n                    if (length((PPos.xy-vec2(-0.0213,1.021))*vec2(1.,0.25))<0.001) Color = vec3(0.99);\n                } else if (ILen<0.) {\n                    //Iris\n                    float fmix = -PLen/(ILen-PLen);\n                    vec3 IC = mix(vec3(0.,0.5,1.),vec3(0.,0.1,0.4),(syp.y-1.01225)/0.0175);\n                    //Lines\n                    float angle = fract((atan(IPos.y,IPos.x)+PI)*0.5*IPI*19.);\n                    IC = mix(vec3(0.,0.2,0.4),IC,1.-pow(abs(2.*angle-1.),0.5)*fmix*(2.-3.*fmix*fmix));\n                    //Circles\n                    vec2 CP = floor(PPos.xy*150.)+ARand23(floor(PPos.xy*150.)*0.4867).xy*0.4+0.3;\n                    float CLen = length(PPos.xy*150.-CP)-0.3;\n                    IC *= 1.4-0.4*pow(min(1.,1.+CLen/0.3),2.);\n                    //Interpolation\n                    Color = IC*(1.-fmix*fmix*fmix);\n                }\n            }\n            \n            \n            //\n            //Small path tracer\n            //\n            Final = vec3(0.);\n            vec3 CosRand = RandSampleCos(ARand23(fragCoord*IRES*(5.13+mod(float(iFrame)*7.363,13.64))).xy);\n            vec3 RandDir = normalize(CosRand*TBN(Pixel.N+0.00001));\n            HIT Hit1 = Trace(PPos,RandDir);\n            if (Hit1.C<-0.5) Final += SampleSky(RandDir)*Color;\n            else Final += Color*vec3(0.25,0.16,0.05)*(1.-0.9*exp(-Hit1.D*32.)); //Fake bounce\n            \n            //Fur albedo\n            if (FurTexture) {\n                vec2 fp = (floor((PPos.xy-vec2(0.002,0.001))*200.)+0.5)*0.005+vec2(0.002,0.001);\n                for (float x=-2.; x<2.5; x++) {\n                    for (float y=-2.; y<2.5; y++) {\n                        vec2 sp = fp+vec2(x,y)*0.005;\n                        sp += +(ARand23(sp*1.103).xy-0.5)*0.004;\n                        vec2 Grad2 = normalize(GradientField(sp)+(ARand23(sp*1.006).xy*2.-1.)*0.3);\n                        vec2 rp = PPos.xy-sp;\n                        Final *= 0.9+0.1*min(1.,sqrt(abs(length(rp)-min(0.01,0.0002-dot(rp,Grad2)))*2900.));\n                    }\n                }\n            }\n        } else {\n            //Sky\n            Final = vec3(0.); //+SampleSky(Dir);\n        }\n        //Output\n        Output = vec4((Output.xyz*Output.w+Final)/(Output.w+1.),Output.w+1.);\n        if (iFrame<10) Output = vec4(0.);\n    }\n    fragColor = Output;\n}","name":"Buffer A","description":"","type":"buffer"}]}