{"ver":"0.1","info":{"id":"4dyyDh","date":"1521705950","viewed":373,"name":"Decor Wall Tiles","username":"markusm","description":"Creates a decorated stone tile pattern. The id can be used for bump height and unique color per tile.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["wall","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- IQs Voronoi: https://www.shadertoy.com/view/MslGD8\n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      \tvec2  r = g - f + o;\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\n// --- Returns the stone tile height and id at the given pos\n\nconst float tileHeight = 0.4;\n\nvec2 stone( vec2 uv )\n{\n    vec2 _uv = uv;\n    \n    uv.y = floor( uv.y * 10. * 1./tileHeight );\n    \n    vec2 c = voronoi( 5. * uv );\n    float height = c.y * 0.7;\n            \n    return vec2( height, c.y );\n}\n\n// --\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n\n    p.y += iTime * 0.2;\n    \n    vec2 res = stone( p );\n\n    vec3 col = vec3( res.y * vec3( 0.5 ) ); \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}