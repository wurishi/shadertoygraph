{"ver":"0.1","info":{"id":"csdGzr","date":"1676915695","viewed":214,"name":"dec2frac spirals 2","username":"ChunderFPV","description":"Left spiral:   Numerator\nRight spiral: Denominator\nMouse X: Change value\nKey M: Save mouse position / stop animation\nKey O: Overlap spirals","likes":14,"published":1,"flags":16,"usePreview":0,"tags":["spiral","number","fraction","decimal","d2f"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185307179586\n#define CS(a) vec2(cos(a), sin(a))\n#define HUE(a) (cos(radians(vec3(0, 40, 100))-((a)*6.2832))*.5+.5) // hue pallete\n#define N(m) ((abs(m) > 1.) ? 1./(2.*sign(m)-(m)): m)              // range +/-2 to number line\n#define KT(i) texelFetch(iChannel0, ivec2(i, 2), 0).x              // key toggle\n#define G(x,r) max(0., 1.-(abs(fract((x)+.5)-.5)/fwidth(x)/r))     // grid\n#define S(s,r) (HUE(s) * s * min(1., r*.9) + pow(max(0., 1.-r), 20.)*.5) + pow(min(r, 1./r), 6.)\n\n// denominator spiral (use 1/n for numerator)\n// coords, value, exponent, rotation, point radius, cell overlap\nfloat ds(vec2 u, float n, float e, float a, float pr, float lim)\n{\n    float r, c;\n    for (float i=0.; i<lim; i++)\n        r = max(0., round((exp(log(length(u))/e)-i)/lim))*lim+i,\n        c = max(c, 1.-length(u-CS(a+n*TAU*r)*pow(r, e))/pr);\n    return c;\n}\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    bool  m = KT(77) > 0.; // key m\n    vec3  c = vec3(.04),\n          s = vec3(.9, .6, .1) * .13; // spiral color\n    vec2  R = iResolution.xy,\n          o = vec2(1.-KT(79), 0),  // offset\n          u = (XY-.5*R)/R.y*2.5;   // coords\n    u.y -= .15;\n    float co = 30.,  // cell overlap loop\n          sec = 60., // num seconds for number line\n          ra = (iMouse.z > 0. || m) ?\n              clamp((iMouse.x-.5*R.x)/R.y*2.5, -2., 2.): // mouse to range +/-2\n              ((mod(iTime, sec)/sec)-.5)*4.,             // time to range\n          t = N(ra), // value\n          e = -.4,   // exponent\n          px = length(fwidth(u))*.707, // pixel radius\n          pr = max(px*10., .05),       // point radius\n          s1 = ds(u+o, 1./t, e, -TAU/4., pr, co), // spiral numerator\n          s2 = ds(u-o,    t, e, -TAU/4., pr, co), // spiral denominator\n          x, r, d;\n    \n    // spirals\n    c.rgb += S(s1, length(u+o)) * s; // left\n    c.bgr += S(s2, length(u-o)) * s; // right\n    \n    // condensed number line\n    u.y += 1.4;\n    x = N(max(2.-abs(u.x), abs(u.x)));\n    if (u.y > 0. && u.y < 0.2 && abs(u.x) < 2.)\n        c += G(x, 1.5)*.2,             // grid\n        c *= pow(min(x, 1./x), .5)+.1, // darken\n        c += .001/abs(u.y);            // line\n    \n    // value indicator\n    r = max(0., 1.-length(u-vec2(ra, .2))*25.);\n    c.rbg += HUE(r+.2)*r;\n    \n    // digits\n    d = digit(iChannel1, u-vec2(ra, .25), t, .15, 7., 3.).x;\n    \n    RGBA = vec4(c*c*15.+d, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// font code from https://www.shadertoy.com/view/7tV3zK\nvec4 char(sampler2D ic, vec2 p, int c)\n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(ic, p/16. + fract( vec2(c, 15-c/16)/16.), dFdx, dFdy );\n}\nvec4 pInt(sampler2D ic, vec2 p, float n, float d)\n{\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(ic, p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = d; i>0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(ic, p - .5*vec2(i-1.,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// texture, screen coords, value, size, num left digits, num right digits\nvec3 digit(sampler2D ic, vec2 uv, float v, float s, float l, float r)\n{\n    float numleft = min(log2(abs(v))/log2(10.), l-1.);\n    l = max(floor(numleft), 0.)+1.;\n    uv /= s; // size\n    if (isinf(abs(v))) return vec3(char(ic, uv*.7+vec2(.5, .3), 153).x); // infinity symbol\n    uv += vec2((l+1.)/2., .28); // center on decimal\n    vec3 d = vec3(0);\n    d += pInt(ic, uv, v, l).x; // left of decimal\n    uv.x -= l/2.;\n    d += char(ic, uv, 46).x; // decimal point\n    uv.x -= .5;\n    d += pInt(ic, uv, floor(abs(v)*pow(10., r)), r).x; // right of decimal\n    return d;\n}","name":"Common","description":"","type":"common"}]}