{"ver":"0.1","info":{"id":"Wtdczf","date":"1609633003","viewed":124,"name":"Trig Approximations","username":"oneshade","description":"Approximations of the sine, cosine, and tangent trig functions using Bhaskara I's formula.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["cheap","approximation","trig","bhaskara"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define HALF_PI 1.5707963268\n#define TWO_PI 6.2831853072\n#define FIVE_PI_SQUARED 49.348022005\n\nfloat cheapSin(in float x) {\n    float nx = mod(x, PI);\n    float PI_MINUS_X = PI - nx;\n    float y = (16.0 * nx * PI_MINUS_X) / (FIVE_PI_SQUARED - 4.0 * nx * PI_MINUS_X);\n    return mod(x, TWO_PI) < PI ? y : -y;\n}\n\nfloat cheapCos(in float x) {\n    return cheapSin(x + HALF_PI);\n}\n\nfloat cheapTan(in float x) {\n    return cheapSin(x) / cheapCos(x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 16.0 / iResolution.y;\n\n    uv.x += iTime;\n\n    fragColor = vec4(smoothstep(unit, 0.0, abs(uv.y - cheapSin(uv.x))), 0.0, 0.0, 1.0);\n    fragColor.b += smoothstep(unit, 0.0, abs(uv.y - cheapCos(uv.x)));\n    fragColor.g += smoothstep(unit, 0.0, abs(uv.y - cheapTan(uv.x)));\n}","name":"Image","description":"","type":"image"}]}