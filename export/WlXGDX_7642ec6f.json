{"ver":"0.1","info":{"id":"WlXGDX","date":"1557800339","viewed":166,"name":"Ford Circles","username":"tpfto","description":"A depiction of the [url=https://en.wikipedia.org/wiki/Ford_circle]Ford circles[/url].","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","circle","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Depict the Ford circles (https://en.wikipedia.org/wiki/Ford_circle)\n\n// comment out to switch to light mode\n#define DARK_MODE\n\n// maximum number of disks\n#define NDISKS 50\n\n// for drawing a disk\n\n#define drawPrimitive(p, c, d) d = mix(c, d, p)\n\nfloat DISK(vec2 c, float r, vec2 p) // center c and radius r\n{\n      return smoothstep(0.0, 1.0/iResolution.y, length(c - p) - r);\n}\n\n// generate golden angle colors from HSV\n\nvec3 colors( float k )\n{\n     return clamp( abs(mod(6.0 * fract(1.618 * k + 0.412) + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n\tuv = 1.125 * uv + 0.5; // scale and shift for view\n\n    #ifdef DARK_MODE\n    vec3 col = vec3(0.0, 0.169, 0.212);\n    #else\n    vec3 col = vec3(0.992, 0.965, 0.89);\n    #endif\n    \n    drawPrimitive(DISK(vec2(0.0, 0.5), 0.5, uv), colors(1.0), col);\n\n    float nn = mod(floor(0.4 * iTime), 9.0) + 2.0; // animate the generation of the disks\n    mat2 ma = mat2(1.0, nn, 0.0, 1.0);\n    \n    float q = nn, f = 1.0/nn, r = 0.5/(q * q);\n    vec3 dc = colors(q);\n    drawPrimitive(DISK(vec2(f, r), r, uv), dc, col);\n    drawPrimitive(DISK(vec2(f, 1.0 - r), r, uv), dc, col);\n    \n    for (int j = 0; j < NDISKS; j++) // generate the Farey sequence, https://en.wikipedia.org/wiki/Farey_sequence\n    {\n        ma *= mat2(floor((nn + ma[1][1])/q), -1.0, 1.0, 0.0);\n        q = ma[0][1]; f = ma[0][0]/q; r = 0.5/(q * q);\n        dc = colors(q);\n        drawPrimitive(DISK(vec2(f, r), r, uv), dc, col);\n        if (f < 1.0) drawPrimitive(DISK(vec2(f, 1.0 - r), r, uv), dc, col);\n        else break;\n    }\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}