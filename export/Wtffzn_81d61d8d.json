{"ver":"0.1","info":{"id":"Wtffzn","date":"1595796018","viewed":2031,"name":"Cellular Wave Pattern","username":"reatured","description":"Learning Cellular pattern, random movement","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 10.0;\n    float offset = 0.1;  // change to 0.0 to align all the tiles\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    //tile\n\tuv*= zoom;\n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n    vec3 col = vec3(0.0);\n    \n    \n    //cell\n    float m_dist = 1.;\n    for(int y = -1; y<=1;y++){\n        for(int x = -1; x<=1;x++){\n            vec2 neighbor = vec2(float(x), float(y));\n            \n            //get random point\n            vec2 point = random2(i_uv + neighbor);\n            \n            point = vec2(0.5) + 0.5 *(sin(iTime+ 6.075 * point));\n                \n                \n            vec2 diff = neighbor + point - f_uv ;\n            diff +=  offset*random2(i_uv) * step(0.5, uv.x/10. );\n            \n            float dist = length(diff);\n            \n            m_dist = min(m_dist, dist);\n        }\n    }\n        \n        \n\n    col += vec3(m_dist);\n    \n    //col += step(0.97, 1.-m_dist);\n    \n    //col -= step(0.8,abs(sin(27.0*m_dist)))*.5;\n    col -= smoothstep(0., .1, abs(sin(27.0*m_dist)) - .8)*.5;\n    //col -= clamp(sin(64.*m_dist), 0., 1.)*.5;\n    \n    col.b += 0.65;\n    col.g += 0.35;\n    \n    vec3 color = vec3(m_dist);\n    //col = color;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}