{"ver":"0.1","info":{"id":"fdB3zD","date":"1617011736","viewed":211,"name":"For Willi, HSX","username":"MacLin","description":"For Willi, HSX","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 f = texture(iChannel0, uv) + 0.5;\n    vec2 duv = vec2(dFdx(f.x), dFdy(f.x)) * REFRACTION_RATIO;\n\n    vec4 col = texture(iChannel1, uv + duv);\n \n    //fragColor = vec4(f.x, 0.0, 0.0, 1.0);\n    //fragColor = vec4(0.0, f, 0.0, 1.0);\n    //fragColor = vec4(depth.x, depth.y, 0.0, 1.0);\n    //fragColor = vec4(0.0, 0.0, depth.z, 1.0);\n    //fragColor = vec4(duv.xy, 0.0, 1.0);\n    fragColor = vec4(col.xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"///////////////////////////////////////////////////////////\nbool CheckRainDrop(vec2 uv)\n{\n    float d = length(iMouse.xy - uv * iResolution.xy) / RAINDROP_SIZE;\n    \n    return d < 1.0 && iMouse.w>0.0;\n}\n\n\n///////////////////////////////////////////////////////////\nbool CheckWind(vec2 uv)\n{\n    float d = length(iMouse.x - uv.x * iResolution.x) / RAINDROP_SIZE;\n    \n    return d < 1.0 && iMouse.w>0.0;\n}\n\nvec3 getPositionVeclocityAcceleration(vec2 uv, float m, float k, float damping)\n{\n    // each texel meaning: r = position, g = velocity, b = acceleration\n    \n    // Get 4 neighbour pixel, (p)osition, (v)elocity, (a)cceleration\n    vec2 duv0 = vec2(0.0/iResolution.x,  1.0/iResolution.y);\n    vec2 duv1 = vec2(0.0/iResolution.x, -1.0/iResolution.y);\n    vec2 duv2 = vec2(-1.0/iResolution.x, 0.0/iResolution.y);\n    vec2 duv3 = vec2(1.0/iResolution.x, 0.0/iResolution.y);\n\n    vec4 oldpva0 = texture(iChannel0, uv + duv0);\n    vec4 oldpva1 = texture(iChannel0, uv + duv1);\n    vec4 oldpva2 = texture(iChannel0, uv + duv2);\n    vec4 oldpva3 = texture(iChannel0, uv + duv3);\n    vec4 oldpva = texture(iChannel0, uv);\n    \n    // calculate new force, negihbour pixel act like a spring, pulling center pixel\n    vec4 newpva = vec4(0.0, 0.0, 0.0, 0.0);\n    newpva.z += k * (oldpva0.x - oldpva.x) / m;  // F = -k * dx\n    newpva.z += k * (oldpva1.x - oldpva.x) / m;  // F = -k * dx\n    newpva.z += k * (oldpva2.x - oldpva.x) / m;  // F = -k * dx\n    newpva.z += k * (oldpva3.x - oldpva.x) / m;  // F = -k * dx\n\n    // calculate new velocity\n    newpva.y = oldpva.y + newpva.z;              // v = u + acc\n    newpva.y = damping * newpva.y;\n    \n    oldpva.x = CheckRainDrop(uv) ? RAINDROP_MAX_DEPTH : oldpva.x;\n    \n    newpva.x = oldpva.x + newpva.y;              // p1 = p0 + v\n#ifdef LIMIT_MAX_POSITION\n    newpva.x = clamp(newpva.x, -RAINDROP_MAX_DEPTH, RAINDROP_MAX_DEPTH);\n#endif\n        \n    return newpva.xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 pva = getPositionVeclocityAcceleration(uv, MASS, SPRING_K, DAMPING);  \n\n    fragColor = vec4(pva, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MASS     1.0\n#define SPRING_K 0.5\n#define DAMPING  0.98\n#define REFRACTION_RATIO 0.1\n\n#define RAINDROP_SIZE 3.0\n#define RAINDROP_MAX_DEPTH 2.0\n\n#define LIMIT_MAX_POSITION ","name":"Common","description":"","type":"common"}]}