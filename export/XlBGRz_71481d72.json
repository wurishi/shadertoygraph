{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define MOTION_BLUR\n\nfloat lineSegDist(vec2 uv, vec2 lineDir, vec2 linePoint, float r) {\n    vec2 ba = -lineDir * r;\n    vec2 pa = uv - linePoint + ba;\n    ba *= 2.0;\n    return length(pa - ba*clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0));\n}\n\nfloat aa(float dist, float threshold)\n{\n    float pixelSize = 2.0 / iResolution.y;\n\treturn dist < threshold-pixelSize ? 0.0 : min(1.0, 1.0-(threshold-dist)/pixelSize);\n}\n\nfloat scene(vec2 uv, float t)\n{\n    vec2 p = vec2(sin(t*40.3), cos(t*10.0)*0.4);\n\n    vec2 v = normalize(vec2(sin(t*8.0), cos(t*8.0)));\n\tvec2 p2 = vec2(sin(1.0+t*50.0), cos(0.7+t*24.0)*0.4);\n\n    vec2 p3 = vec2(sin(t*37.3+2.0)*1.2, sin(t*2.0)*0.2+cos(1.0+t*21.0)*0.4);\n\n    float r = (0.3);\n    vec2 p4 = vec2(cos(t*60.0), sin(t*64.0)) * r*2.5;\n    vec2 p5 = vec2(-cos(t*60.0+3.14159*2.0*0.3333), sin(t*65.0+3.14159*2.0*0.3333)) * r*2.0;\n    vec2 p6 = vec2(cos(t*50.0+3.14159*2.0*0.6666), sin(t*55.0+3.14159*2.0*0.6666)) * r;\n    vec2 p7 = vec2(cos(t*181.0)*0.03, cos(t*81.4)*0.02+sin(t*42.0)*0.02);\n\n    return min(aa(length(uv-p6), 0.03*(1.0+0.5*sin(t*50.0+3.14159*2.0*0.6666))),\n           min(aa(length(uv-p5), 0.04*(1.0+0.5*-sin(t*60.0+3.14159*2.0*0.3333))),\n           min(aa(length(uv-p4), 0.05*(1.0+0.5*sin(t*60.0))),\n           min(aa(length(uv-p3), 0.03),\n           min(aa(length(uv-p), 0.05),\n           min(aa(abs(length(uv-p7)-0.18-0.01*cos(t*150.0)), 0.01+0.0001*tan(0.1*t)),\n               aa(lineSegDist(uv, v, p2, 0.5), 0.05)\n              ))))));\n}\n\nfloat hash( vec2 v ) {\n    return texture(iChannel0, v, 0.0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(iResolution.x/iResolution.y, 1.0) * (-1.0 + 2.0*fragCoord.xy / iResolution.xy);\n\t#ifdef MOTION_BLUR\n\t    fragColor = vec4(0.0);\n        for (float i=0.0; i<12.0; i++) {\n            float r = hash(mod(fragCoord+vec2(i,0.0), 64.0) / 64.0);\n            fragColor += (1.0-scene(uv, iTime+(1.0/58.5)*((i+r)/12.0))) * vec4(abs(uv)+0.3,0.5+0.5*sin(20.0*iTime),1.0);\n        }\n        fragColor /= 12.0;\n    #else\n\t\tfragColor = (1.0-scene(uv, iTime)) * vec4(abs(uv)+0.3,0.5+0.5*sin(iTime),1.0);\n    #endif\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XlBGRz","date":"1426464993","viewed":1197,"name":"atomic motion","username":"kig","description":"Putting motion blur to use with lots of shake and fury. #shadeADay for 2015-03-15","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["2d","motionblur","shadeaday"],"hasliked":0,"parentid":"","parentname":""}}