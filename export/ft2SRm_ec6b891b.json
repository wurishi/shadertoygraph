{"ver":"0.1","info":{"id":"ft2SRm","date":"1627698740","viewed":276,"name":"Intersection Quadratic - X axis","username":"Yusef28","description":"Quadratic Formula","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["intersection","x","quadratic","y0"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//                                                         //\n// Author:Yusef28                                          //\n// Start Date: 26-07-2021                                  //\n// Status: On Going                                        //\n// Topic: Quadratic X Axis Intersection                    //\n// Sources: Rudimentary Concept (Google/Wikipedia/Youtube) //\n// Listening to: Best Of Djent Instrumental Volume 1       //\n//                                                         // \n/////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5,0.5)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    \n      ////////////////////////////////////////////\n      //                                       //\n////////      BACKGROUND GRID DESIG          //\n      //                                   //\n      /////////////////////////////////////\n      \n      \n    vec2 st = uv;//save the unscaled uv\n    //I'm only making an 8(*aspect)x8 grid, higher variables\n    //may end up with graphs completely outside it\n    uv*=8.;\n    \n    //graph background\n    vec3 col = vec3(0.1);\n    \n    //center highlights\n    col = mix(col,vec3(0.16),1.0-length(uv/8.));\n    \n    //dust \n    float specks = fract(sin(dot(uv,vec2(123.,16.)))*433413.);\n    \n    //nice soft texture \n    float tex = texture(iChannel0,st).x;\n    col = mix(col,vec3(0.25),pow(tex,2.));\n    \n    //small grid lines\n    vec2 lines = fract(uv*5.);\n    lines = smoothstep(0.45,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.24),lines.x);\n    col = mix(col,vec3(0.24),lines.y);\n    \n    //larger grid lines\n    lines = fract(uv);\n    lines = smoothstep(0.47,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.5),lines.x);\n    col = mix(col,vec3(0.5),lines.y);\n    \n    //axis lines\n    lines = smoothstep(0.0,0.02,abs(uv));\n    col = mix(col,vec3(0.6),1.0-lines.x);\n    col = mix(col,vec3(0.6),1.-lines.y);\n    col = mix(col,vec3(0.1),step(0.1,specks)*0.2);\n    \n    \n      ////////////////////////////////////////////\n      //                                       //\n////////     INTERSECTION CALCULATIONS       //\n      //                                   //\n      /////////////////////////////////////\n\n\n    //a b and c for the quadratic formula \n    //work out to this based on my algebraic manipulations\n    //starting with substituting y in the circle formula\n    //with the right hand side of the line equation y = mx+b\n    \n    float a = 1.;\n    float b = sin(iTime)*4.5;\n    float c = cos(iTime)*3.;\n    \n    //y calculated based on some qaudratic function of x\n    float y = uv.x*uv.x*a + uv.x*b + c;\n    \n    //the descriminant\n    float desc = b*b - 4.*a*c;\n    \n    //the two roots (or one or none depending)\n    float root1 = (-b + sqrt(desc))/2.*a;\n    float root2 = (-b - sqrt(desc))/2.*a;\n\n    //calculate the intersection points\n    vec2 intersectionPoint1 = vec2(root1, 0.);\n    vec2 intersectionPoint2 = vec2(root2, 0.);\n    \n    \n      ////////////////////////////////////////////\n      //                                       //\n////////        DRAWING EVERYTHING           //\n      //                                   //\n      /////////////////////////////////////\n    \n    \n    //Drawing the quadratic line\n    //float f = 1.0-smoothstep(0.02,0.06,abs(y-uv.y)); //old way\n    //new way using derivatives\n    //it's y - uv.y where \"y\" is some quadratic of x\n    float f = 1.0-smoothstep(0.02,0.15,abs(y-uv.y)/fwidth(y-uv.y)/20.);\n    col = mix(col, vec3(1.,.2,0.5), f);\n    \n    if(desc >= 0.){\n    //intersection point 1\n    f = 1.-smoothstep(0.02,0.04,abs(length(uv-intersectionPoint1)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-intersectionPoint1)-0.015);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    \n    //intersection point 2\n    f = 1.-smoothstep(0.02,0.04,abs(length(uv-intersectionPoint2)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-intersectionPoint2)-0.015);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    }\n    \n      ////////////////////////////////////////////\n      //                                       //\n////////          POST PROCESSING            //\n      //                                   //\n      /////////////////////////////////////\n        \n    \n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.15); // change pow for modifying the extend of the  vignette\n\n    // Output to screen\n    fragColor = vec4(col*vig,1.0);\n}","name":"Image","description":"","type":"image"}]}