{"ver":"0.1","info":{"id":"msKcW3","date":"1696700575","viewed":22,"name":"wacky_inflatable_tube","username":"andrewlook","description":"wacky inflatable tube man","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["funny"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nUploaded to: https://www.shadertoy.com/view/msKcW3\n*/\n\nfloat stroke(float x, float s, float w) {\n    float d = step(s, x + w * .5) - step(s, x - w * .5);\n    return clamp(d, 0., 1.);\n}\n\nfloat fill(float x, float size) {\n    return 1. - step(size, x);\n}\n\nfloat flip(float v, float pct) {\n    return mix(v, 1.-v, pct);\n}\n\nvec2 rotate(vec2 st, float a) {\n    st = mat2(cos(a), -sin(a), sin(a), cos(a)) * (st-.5);\n    return st + .5;\n}\n\nvec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a + b*cos( 6.28318*(c*t*d) );\n}\n\nvec3 mixPalette( vec3 c1, vec3 c2, float t )\n{\n    float mixFactor = 0.5 + sin(t);\n    return mix(c1, c2, mixFactor);\n}\n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat circleSDF(vec2 st) {\n    // NOTE: modified to reference zero\n    return length(st-.0)*2.;\n}\n\n// float vesicaSDF(vec2 st, float w) {\n//     vec2 offset = vec2(w*.5,0.);\n//     return max(circleSDF(st-offset), circleSDF(st+offset));\n// }\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n#define N 100.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    \n    //st = rotate(st, iSpin * iTime);\n    st.x *= iResolution.x/iResolution.y;\n    st = st * 4. - 2.;\n\n    st.y += .8;\n    st.x /= 2.;\n\n    vec3 color = vec3(0.);\n    float pct = 0.;\n    color = vec3(pct);\n\n\n    float circle_size = 0.4;\n    float y_offset = 2. / N;\n    float x_offset = 0.03;\n    float alpha_factor = 0.005;\n\n    float iSpeed = 1.0;\n    float flip_point = 100. * abs(sin(iSpeed * iTime));\n    // float flip_point = 50.;\n    // flip_point *= abs(sin(iTime));\n    float flip_factor = 1.;\n    float x_flip = 0.;\n\n    for (float i = 0.; i < N; i++) {\n        vec3 currColor = palette((i + N*iTime) / N);\n        \n        float x_wave_freq = .1;\n        float x_wave_speed = 4. * iSpeed;\n        float x_step = sin(x_wave_freq*i + x_wave_speed*iTime) * x_offset;\n        x_step *= clamp(i, 0., 10.) * 0.05; // fix the base of the wacky man (i=0 -> zero x_offset)\n        \n        float y_step = y_offset;\n        \n        if (i > flip_point) {\n            flip_factor = sin(iTime);\n            x_flip = 0.01 * sin(2.5*iTime);\n            float alpha_factor = 0.01;\n        }\n\n        //x_step += x_flip;\n        y_step *= flip_factor;\n        \n        st += vec2(x_step + x_flip, -y_step);\n\n        float circle_step = fill(circleSDF(st), circle_size);\n        // float circle_step = stroke(circleSDF(st), circle_size, 0.1);\n\n        // float circle_step = fill(circleSDF(st), circle_size)\n        //     + fill(circleSDF(st+vec2(1., 0.)), circle_size)\n        //     + fill(circleSDF(st+vec2(-1., 0.)), circle_size);\n\n        // vec3 currColor = mixPalette(c1hsb, c2hsb, (i + 200.*iTime) / N);\n        vec3 maskedColor = alpha_factor * (N-i) * currColor;\n\n        color += maskedColor * circle_step;\n\n        if (i == 80.) {\n            vec2 st2 = st;\n            vec2 st3 = st;\n            for (float i = 0.; i < 20.; i++) {\n                st2 += vec2(2. * x_step, -y_step * sin(8.*iTime));\n                st3 += vec2(2. * -x_step, -y_step * cos(16.*iTime));\n\n                if (i > 5.) {\n                    float armStep2 = fill(circleSDF(st2), circle_size * 0.5);\n                    color += 2. * maskedColor * armStep2;\n                    float armStep3 = fill(circleSDF(st3), circle_size * 0.5);\n                    color += 2. * maskedColor * armStep3;\n                }\n                \n            }\n        }\n\n\n    }\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}