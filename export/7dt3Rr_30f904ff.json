{"ver":"0.1","info":{"id":"7dt3Rr","date":"1629062519","viewed":109,"name":"shiny beat","username":"snflwrfld","description":"mouseX controls the density of squares","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","beat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TAU 6.28318530718\n\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st,vec2(1.9898,7.233))+2.)*\n        4378.5453123);\n}\n\nfloat growing_poly_pattern(vec2 st,float t,int N,float WIDTH,float GROWING_SPEED){\n    float l = length(st),th = atan(st.x,st.y)+PI;\n    float r = TAU/float(N);\n    float d = cos(floor(0.5+th/r)*r-th)*length(st);\n    return 1.0-smoothstep(.4,.41,mod(pow(d,0.508)-t*GROWING_SPEED,WIDTH));\n}\n\nfloat flashing_grid(vec2 st,float t,in vec2 ipos) {\n    return step(1.-iMouse.x/iResolution.x,mod(ipos.x+ipos.y,2.)+2.496*random(ipos*.2+t/900000.));\n}\n\nfloat pulse( float x, float a, float b ){\n    float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));\n    return k * pow( x, a ) * pow( 1.0-x, b );\n}\n\nfloat box (vec2 st,float size) {\n    float d = max(abs(st.x),abs(st.y));\n    return step(d,size);\n}\n\nmat2 rotate2d (float th) {\n    return mat2(cos(th),-sin(th),sin(th),cos(th));\n}\n\nfloat triangle (vec2 st, float size){\n  int N = 3;\n  float a = atan(st.x,st.y)+PI;\n  float r = TAU/float(N);\n\n  float d = cos(floor(.5+a/r)*r-a)*length(st);\n\n  return 1.0-step(.5*size,d);\n}\n\nfloat shapesnbeats(vec2 st, float t) {\n    float r = length(st);\n\n    vec3 color = vec3(0.);\n    \n    float beat = floor(mod(t,4.));\n    \n    float a=.5,b=2.;float x_max=a/(a+b);\n    float size = pulse(fract(t),a,b);\n    \n    \n    if (beat==0. || beat==2.){\n        color += step(r,1.*size);\n    } else if (beat==1.){\n        st = rotate2d(smoothstep(0.,.5,fract(t))*PI)*st;\n        color += box(st,1.*size);\n    } else {\n        st = rotate2d(smoothstep(0.,.5,fract(t))*2.*PI/3.)*st;\n        color += triangle(st,1.3*size);\n    }\n    \n    return color.x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st = st*2.-1.;\n    st.x *= iResolution.x/iResolution.y;\n    \n    // beat\n    float BPM = 120.;\n    float t = iTime*BPM/60.;\n    \n    \n    \n    // polygon pattern\n    int N = 6; //number of sides\n    float WIDTH = .7;\n    float GROWING_SPEED = 0.125;\n    \n    st = 2.*rotate2d(PI/6.)*st;\n    float hex = growing_poly_pattern(st,t,N,WIDTH,GROWING_SPEED);\n    \n    \n    \n    // grid parameters\n    float GRID_ROTATE_ANGLE = PI/25.;\n    float GRID_ZOOM = 6.5;\n    vec2 GRID_VEL = vec2(4.,1.5);\n    \n    st = rotate2d(GRID_ROTATE_ANGLE-PI*1./6.)*GRID_ZOOM*st;\n    st += GRID_VEL*t;\n    vec2 ipos=floor(st),fpos=fract(st);\n    \n    \n    \n    // white anim\n    vec2 COLOR_SHIFT = vec2(2.,0.0); //COULD BE IMPROVED\n    vec3 color_w ;\n    color_w.b= flashing_grid(st-COLOR_SHIFT,t,ipos);\n    color_w.g= flashing_grid(st,t,ipos);\n    color_w.r= flashing_grid(st+COLOR_SHIFT,t,ipos);\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    color_w += mix(vec3(0.225,0.820,0.702),vec3(1.000,0.977,0.720),smoothstep(.4,1.7,uv.x+uv.y));\n    \n    \n    \n    // black anim\n    vec3 color_b = vec3(0.100,0.072,0.063);\n    fpos = fpos*2.-1.;\n    float r = length(fpos);\n    \n    vec2 COLOR_SHIFT2 = vec2(.45,0.0)*pow(clamp(0.,1.,length(uv*2.-1.)),2.3);\n    color_b.r += shapesnbeats(fpos-COLOR_SHIFT2,t);\n    color_b.g  += shapesnbeats(fpos,t);\n    color_b.b += shapesnbeats(fpos+COLOR_SHIFT2,t);\n    \n    color_b *= 1.-flashing_grid(st,t,ipos);\n    \n    \n    \n    // mixing\n\tvec3 color = mix(color_w,color_b,hex);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}