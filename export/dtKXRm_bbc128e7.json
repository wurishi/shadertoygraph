{"ver":"0.1","info":{"id":"dtKXRm","date":"1686009785","viewed":49,"name":"Task_3_algoritms_CD","username":"pylankina_Ann","description":"task_3_algoritms_CD","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["task3algoritmscd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 5; \nvec3 colAr[n] = vec3[n](vec3(0.22,0.28,0.41),vec3(0.65, 0.18, 0.98),vec3(1.0, 0.9, 0.7),vec3(1.0, 0.2, 0.4),vec3(1.0, 0.0, 0.0));\nvec3 BGcol = vec3(0.608, 0.81117, 0.92156); \nfloat zAr[n] = float[n](0.1, 0.1, 0.1, .1, .1); \nint F[5];\nconst int q = 10; \nvec2 polygons[q]=vec2[q](vec2(0.2,0.2),vec2(0.35,0.2),vec2(0.45,0.4),vec2(0.35,0.6),vec2(0.2,0.6),vec2(0.1,0.4),vec2(0.45,0.25),vec2(0.6,0.55),vec2(0.75,0.25),vec2(0.76,0.4));\nconst float A = 1.0;\nconst float B = 1.0;\nconst float C = 1.0;\nconst float D = 1.0;\n\nvoid initPolygons(vec2 uv){ \n    polygons[6]=vec2(0.1*cos(iTime)-0.05*sin(iTime)+0.4,0.4+0.3*sin(iTime)+0.1*cos(iTime));\n    polygons[7]=vec2(0.5*cos(iTime)-0.05*sin(iTime)+0.4,0.4+0.6*sin(iTime)+0.1*cos(iTime));\n    polygons[8]=vec2(0.25*cos(iTime)-0.35*sin(iTime)+0.4,0.4+0.45*sin(iTime)+0.4*cos(iTime));\n    polygons[9]=vec2(0.26*cos(iTime)-0.35*sin(iTime)+0.43,0.55+0.45*sin(iTime)+0.4*cos(iTime));\nreturn;\n}\n\nbool inSphere(vec2 p, vec2 center, float r,int i){ \n    float d =length(p - center)-r;\n     if (d<0.0)\n          return true; \n      return false;\n}\n\nbool inSphere3(vec2 p, vec2 center, float r,int i){ \n    float d =length(p - center)-r;\n     if (d<0.0)\n          return true; \n      return false;\n}\n\nfloat LeftTurn(vec2 v1, vec2 v2, vec2 v3){\n    float d=(v2.x-v1.x)*(v3.y-v1.y)-(v3.x-v1.x)*(v2.y-v1.y);\n        if (d<0.0)\n            return -1.0;\n        if (d==0.0)\n            return 0.0;\nreturn 1.0;\n} \n\nbool inPolygon2(int num, vec2 p) {\n    vec2 a=polygons[6];\n    vec2 b=polygons[7];\n    vec2 c=polygons[8];\n    if(LeftTurn(a,b,p)>0.0)\n        if(LeftTurn(b,c,p)>0.0)\n            if(LeftTurn(c,a,p)>0.0)\n                return true;\n    return false;\n}\n\nbool inPolygon3(int num, vec2 p) {\n    vec2 a=polygons[6];\n    vec2 b=polygons[7];\n    vec2 c=polygons[9];\n    if(LeftTurn(a,b,p)>0.0)\n        if(LeftTurn(b,c,p)>0.0)\n            if(LeftTurn(c,a,p)>0.0)\n                return true;\n    return false;\n}\nbool inPolygon4(int num, vec2 p) {\n    vec2 a=polygons[6];\n    vec2 b=polygons[8];\n    vec2 c=polygons[9];\n    if(LeftTurn(a,b,p)>0.0)\n        if (LeftTurn(b,c,p)>0.0)\n            if(LeftTurn(c,a,p)>0.0)\n                return true;\n    return false;\n}\nbool inPolygon5(int num, vec2 p) {\n    vec2 a=polygons[7];\n    vec2 b=polygons[9];\n    vec2 c=polygons[8];\n    if(LeftTurn(a,b,p)>0.0)\n        if(LeftTurn(b,c,p)>0.0)\n            if(LeftTurn(c,a,p)>0.0)\n                return true;\n    return false;\n}\n\n\nbool inSquare1(in vec2 uv,in vec2 mc){ \n  if (uv.x+mc.x>=0.47)\n      if(uv.x+mc.x<=.9)\n          if(uv.y>=0.3)\n              if(uv.y<=1.0)\n                  return true;  \n  return false;\n}\n\n\nfloat get_z(vec2 p, int t, float R, vec2 Center2, vec2 df){\nif (t==0)\n    zAr[4]=0.;\nelse if (t==3){\n    zAr[t]=sqrt(R*R - (Center2.x - df.x)*(Center2.x - df.x) - (Center2.y - df.y)*(Center2.y - df.y));\n    //zAr[0]=zAr[t]+0.5;\n    }\nelse if (t==0)\n    zAr[t]=(D - B*p.y - A*p.x)/C;\nreturn zAr[t];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float r1= 0.1;\n    float r2=0.3;\n    float r3=0.07;\n    vec3 col[6];\n    vec2 center1= vec2(cos(iTime)*0.4, sin(3.*iTime)*0.3-0.1);\n    vec2 center2 =vec2(sin(2.*iTime)*0.2-0.3,cos(iTime)*0.4);\n    vec2 center3=vec2(sin(2.*iTime)*0.2+0.3,sin(iTime)*0.4);\n    col[5]=BGcol;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.05;    \n    initPolygons(uv); //creating the first figure \n    if (inPolygon2(0,uv)){\n        F[1]=1;\n        col[1]=vec3(.2, .3, 0.656)*4.5;\n    }\n    else if (inPolygon4(0,uv)){\n        F[1]=1;\n        col[1]=vec3(.343, 1.0, 1.0);\n    }\n    else if (inPolygon5(0,uv)) {\n        F[1]=1;\n        col[1]=vec3(1., .565, .464);\n    }\n    else if (inPolygon3(0,uv)) {\n        F[1]=1;\n        col[1]=vec3(.656, 1., .767);\n        \n    }\n    \n    vec2 kl = fragCoord/iResolution.xy; //creating the second figure \n    kl-=0.05;\n    if(inSphere(kl, center1, r1, 4)){\n        F[4]=1;\n        vec2 a=center1;\n        col[4]=vec3(0.333,0.0,0.9); \n        for (float i=-2.0;i<2.0;i+=1.){\n            if((uv.y>a.y+a.x-r1*i-uv.x) && (uv.y<a.y+a.x-r1*(i-0.11111111)-uv.x))\n                col[4]=vec3(0.4,0.1,0.0);\n          \n        }     \n    }\n    \n    vec2 df = fragCoord/iResolution.xy; //creating the third figure \n    df-=0.7;\n    if(inSphere(df, center2, r2, 3)){\n        F[3]=1;\n        col[3]=vec3(0.6,0.0,0.);\n    }\n    \n    vec2 pp = fragCoord/iResolution.xy; //creating the figure \n    pp-=0.01;\n    if (inSquare1(pp+0.3, vec2(0.3*cos(iTime), sin(1.85*iTime)))){\n        F[0]=1;\n        col[0]=colAr[1]*4.8;\n    }\n     \n    vec2 n = fragCoord/iResolution.xy; //creating the figure \n    n-=0.61;\n    if(inSphere3(kl, center3, r3, 2)){\n        F[2]=1;\n        col[2]=vec3(0.6235,0.8862,0.74901)* (cos(uv.x) + sin(uv.y)); \n     }\n     \n    vec3 c;\n    c=col[5];\n    int k=0;\n    float z_max = 0.0;\n    float z;\n    while(k<5){\n        if(F[k]==1)\n            z = get_z(uv, k, r2, center2, df);\n        if(z>z_max){\n            z_max=z;\n            c=col[k];\n            }\n        k++;\n    }\n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}