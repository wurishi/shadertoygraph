{"ver":"0.1","info":{"id":"cdG3WR","date":"1678361317","viewed":69,"name":"Aluminum \"like\" noisy texture","username":"psyduck1312","description":"Perlin noise algorithm procedurally generated texture","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","aluminum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(vec2 p)\n{\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 aluminumTexture(vec2 uv)\n{\n    // Add noise to the coordinates to break up the pattern\n    vec2 noiseUV = vec2(uv.x * 1.0, uv.y * 4.0);\n    float noiseValue = noise(noiseUV);\n    \n    // Calculate the horizontal and vertical lines\n    float hLines = smoothstep(0.495, 0.505, abs(fract(uv.y * 32.0) - 0.5));\n    float vLines = smoothstep(0.495, 0.505, abs(fract(uv.x * 8.0) - 0.5));\n    \n    // Calculate the final color\n    vec3 baseColor = vec3(0.2, 0.2, 0.2);\n    vec3 reflectionColor = vec3(0.7, 0.7, 0.7);\n    vec3 color = mix(baseColor, reflectionColor, noiseValue);\n    color = mix(color, vec3(1.0), hLines * vLines * 0.5);\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = aluminumTexture(uv);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}