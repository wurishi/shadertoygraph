{"ver":"0.1","info":{"id":"WsySRt","date":"1574678596","viewed":58,"name":"hex blob","username":"Sintel","description":"some hexagon test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//adapted from:\n\n// \"ShaderToy Tutorial - Hexagonal Tiling\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/VmrIDyYiJBA\n\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    \n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    \n    return c;\n}\n\nvec2 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n    \n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    //float x = atan(gv.x, gv.y);\n    //float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec2(id.x,id.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    uv *= 100.;\n    \n    vec2 hc = HexCoords(uv);\n    \n    //float c = smoothstep(41., 40., 5.*sin(hc.x*0.3) + 5.*sin(hc.y*0.3) + length(hc)+50.*sin(0.8*iTime));\n    \n    col.r = smoothstep(41., 40., 5.*sin(hc.x*0.3) + 5.*sin(hc.y*0.3) + length(hc)+50.*sin(0.8*iTime));\n    col.g = smoothstep(41., 30., 5.*sin(hc.x*0.3) + 5.*sin(hc.y*0.3) + length(hc)+50.*sin(0.8*iTime+0.1));\n    col.b = smoothstep(41., 40., 5.*sin(hc.x*0.3) + 5.*sin(hc.y*0.3) + length(hc)+50.*sin(0.8*iTime+0.2));\n    \n    col = floor(col*8.0)/8.0;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}