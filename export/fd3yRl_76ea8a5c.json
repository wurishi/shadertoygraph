{"ver":"0.1","info":{"id":"fd3yRl","date":"1653884079","viewed":190,"name":"Zero-G Lavalamp (blob sdf test)","username":"Dubswitcher","description":"Another SDF learning experience. Rotating the scene is possible with the mouse.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["test","sdf","experiment","lavalamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat3 rotation(float x, float y, float z) {\n    vec3 c = cos(vec3(x,y,z));\n    vec3 s = sin(vec3(x,y,z));\n    return mat3(vec3(1, 0, 0),vec3(0, c.x, -s.x),vec3(0, s.x, c.x)) *\n           mat3(vec3(c.y, 0, s.y),vec3(0, 1, 0),vec3(-s.y, 0, c.y)) *\n           mat3(vec3(c.z, -s.z, 0),vec3(s.z, c.z, 0),vec3(0, 0, 1));\n}\n\nfloat hash(in vec2 uv){\n    return fract(sin(dot(uv, vec2(14.478473612, 53.252567))) * 37482.1);\n}\n\nvec3 hash3(in vec2 uv)\n{\n    vec3 o = fract(vec3(uv.yxx*879.346)*vec3(0.163128, 0.131784, 0.178327));\n    o += dot(o.zxy, o.yzx+56.213);\n    return fract((o.yxz+o.zyx)*o.xzy);\n}\n\nfloat objMerge(float a, float b, float s)\n{\n    float x = clamp(.5+.5*(b-a)/s,0.,1.);\n    return mix(b,a,x) - s*x*(1.-x);\n}\n\nvec2 scene (vec3 p)\n{\n    highp vec3 bp[8] = vec3[8](\n        vec3(0.2,0.4,0.1)*sin(iTime*1.2),\n        vec3(-0.2,0.4,0.1)*sin(iTime*-3.-0.4),\n        vec3(1.2,-0.4,-0.1)*sin(iTime*1.2-1.5),\n        vec3(-0.2,0.6,0.6)*sin(iTime-1.5),\n        vec3(-0.2,0.45,-0.1)*sin(iTime*4.+0.4),\n        vec3(1.15,0.12,0.1)*sin(iTime*-1.8),\n        vec3(-0.2,-0.4,1.1)*sin(iTime*1.2+0.4),\n        vec3(0.2,0.4,-0.1)*sin(iTime-1.5)\n    );\n    \n    float blob = length(p)-0.2;\n    \n    float ht = 0.;\n    vec3 h2 = vec3(0.);\n    for (int i = 0; i < 8; i++)\n    {\n        ht = hash(vec2(float(i)*1.435,0.));\n        h2 = hash3(vec2(float(i)*5.382,0.42));\n        vec3 to = vec3(iTime*(h2*2.-1.)*4.);\n        vec3 pos = bp[i]*2.5-p * rotation(to.x,to.y,to.z);\n        blob = objMerge(blob,length(pos)-(0.1+ht/4.),0.7);\n    }\n    blob -= 0.3;\n    return vec2(blob,1.);\n}\n\nfloat gSpec(vec3 lDir, vec3 vDir, vec3 norm, float s) {\n\tvec3 H = normalize(lDir + vDir);\n\tfloat t = acos(dot(H, norm));\n\tfloat w = t / s;\n\treturn exp(-w*w);\n}\n\nmat3 camera(in vec3 cPos, in vec3 targ, in float roll)\n{\n    vec3 ww = normalize(targ - cPos);\n    vec3 uu = normalize(cross(ww,vec3(sin(roll),cos(roll),0.0)));\n    vec3 vv = normalize(cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 getNorm( in vec3 pos ){\n    vec3 n = vec3(0.0);\n    for(int i = 0; i < 4; i++)\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*scene(pos+0.0005*e).x;\n    }\n    return normalize(n);\n}\n\nvec2 view(in vec3 cPos, in vec3 rd){\n    float pr = 0.01, nc = 0.1, fc = 30.; //Precision, near clipping, far clipping\n    float h = pr;    \n    float t = 0., ray = -1., mat = -1.;    \n    for(int i = 0; i < 200; i++)\n    {\n        if(h < pr || t > fc) break;\n\t   \tvec2 m = scene(cPos+rd*t);\n        h = m.x; t += h; mat = m.y;       \n    }\n    if(t < fc) {\n        if(t > nc) ray = t; else mat = -1.;\n    } else mat = -1.;    \n    \n    return vec2(ray, mat);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    vec3 col = vec3(0.3,0.05,0.002);\n    \n    vec2 mp = (iMouse.xy-0.5*iResolution.xy)/iResolution.x*8.;\n    \n    vec3 eye = vec3(0.,0.,10.) * rotation(mp.y/2.,-mp.x,0.);\n    vec3 look = vec3(0.);\n    \n    mat3 cam = camera(eye,look,0.);\n    vec3 ray = normalize(cam*vec3(uv,0.8));\n    vec2 pix = view(eye, ray);\n    \n    \n    if (pix.y > 0.) {\n        vec3 p = eye+ray*pix.x;\n        vec3 n = getNorm(p);\n        \n        float light = dot(vec3(0.,0.,1.)*rotation(-0.9,0.7,0.2),n);\n        \n        col = vec3(0.9,0.3,0.);\n        col += gSpec(light-n,-ray,n,0.5)/3. * vec3(0.3,0.9,0.);\n        col *= light/2.+0.5;\n        col += vec3(1.,0.,0.)/3.;\n        col /= 1.5;\n        col += pow(1.-dot(normalize(eye),n)+0.2,2.)*vec3(1.,0.,0.);\n    } \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}