{"ver":"0.1","info":{"id":"ltKyRR","date":"1534891557","viewed":783,"name":"Substance flow","username":"Witek","description":"Simple effect achieved after playing around with 3D simplex noise functions.","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * This work is licensed under a \n * Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n * http://creativecommons.org/licenses/by-nc-sa/3.0/\n *  - You must attribute the work in the source code \n *    (link to https://www.shadertoy.com/view/ltKyRR).\n *  - You may not use this work for commercial purposes.\n *  - You may distribute a derivative work only under the same license.\n */\n\nvec3 random3(vec3 c)\n{\n    float j = 4096.0*sin(dot(c, vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0 * j);\n    j *= 0.125;\n    r.x = fract(512.0 * j);\n    j *= 0.125;\n    r.y = fract(512.0 * j);\n    return r - 0.5;\n}\n\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\n\n// taken from https://www.shadertoy.com/view/XsX3zB\nfloat simplex3d(vec3 p)\n{\n     vec3 s = floor(p + dot(p, vec3(F3)));\n     vec3 x = p - s + dot(s, vec3(G3));\n     vec3 e = step(vec3(0.0), x - x.yzx);\n     vec3 i1 = e*(1.0 - e.zxy);\n     vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n     vec3 x1 = x - i1 + G3;\n     vec3 x2 = x - i2 + 2.0*G3;\n     vec3 x3 = x - 1.0 + 3.0*G3;\n     vec4 w, d;\n     w.x = dot(x, x);\n     w.y = dot(x1, x1);\n     w.z = dot(x2, x2);\n     w.w = dot(x3, x3);\n     w = max(0.6 - w, 0.0);\n     d.x = dot(random3(s), x);\n     d.y = dot(random3(s + i1), x1);\n     d.z = dot(random3(s + i2), x2);\n     d.w = dot(random3(s + 1.0), x3);\n     w *= w;\n     w *= w;\n     d *= w;\n     return dot(d, vec4(52.0));\n}\n\nfloat simplex3d_fractal(vec3 m)\n{\n    float sum = 0.0;\n    for (int i = 0; i < 12; ++i)\n    {\n        float scale = pow(2.0, float(i));\n        sum += simplex3d(scale * m) / scale;\n    }\n    return sum;\n}\n\nvec3 flow_texture(in vec3 p)\n{\n    // animate initial coordinates\n    vec3 p1 = 0.1 * p + vec3(1.0 + iTime * 0.0023, 2.0 - iTime * 0.0017, 4.0 + iTime * 0.0005);\n    // distort noise sampling coordinates using the same noise function\n    vec3 p2 = p + 8.1 * simplex3d_fractal(p1) + 0.5;\n    vec3 p3 = p2 + 4.13 * simplex3d_fractal(0.5 * p2 + vec3(5.0, 4.0, 8.0 + iTime * 0.07)) + 0.5;\n\n    vec3 ret;\n    ret.x = simplex3d_fractal(p3 + vec3(0.0, 0.0, 0.0 + iTime * 0.3));\n    ret.y = simplex3d_fractal(p3 + vec3(0.0, 0.0, 0.2 + iTime * 0.3));\n    ret.z = simplex3d_fractal(p3 + vec3(0.0, 0.0, 0.3 + iTime * 0.3));\n\n    // scale output & map\n    ret = 0.5 + 0.5 * ret;\n    ret = smoothstep(vec3(0.15), vec3(0.85), ret);\n    return ret;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 result = vec3(0.0);\n\n    const int numSamples = 2; // cheap AA\n    for (int x = 0; x < numSamples; ++x)\n    {\n        for (int y = 0; y < numSamples; ++y)\n        {\n            vec2 offset = vec2(float(x), float(y)) / float(numSamples);\n            vec3 p = vec3((fragCoord.xy + offset) / iResolution.x, iTime*0.001);\n            result += flow_texture(p * 6.0);\n            \n        }\n    }\n\n    result /= float(numSamples * numSamples);\n    fragColor = vec4(sqrt(result), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}