{"ver":"0.1","info":{"id":"dlS3Wm","date":"1673385396","viewed":155,"name":"Schottky Limit Sets","username":"zenzicubic","description":"Made using Kento Nakamura's iterated inversion system algorithm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","schottky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUMCIRCS 2\n#define NUMITERS 50\n\n#define isIn(p, j) (length(p - cen[j]) < rad[j])\n#define col(t) 0.5 + 0.5 * cos(6.28 * (t + vec3(0., 0.33, 0.67)))\n\nfloat rad[NUMCIRCS] = float[](1., 1.);\nvec2 cen[NUMCIRCS] = vec2[](vec2(0.,1.),vec2(0.,-1.));\n\nvec2 invert(vec2 p, int j)\n{\n    vec2 d = p - cen[j];\n    return cen[j] + (rad[j] * rad[j] * d) / dot(d, d);\n}\n\nvec3 IIS(vec2 p)\n{\n    int c = 0;\n    bool inOutside;\n    \n    for (int i = 0; i < NUMITERS; i++) \n    {\n        inOutside = true;\n        for (int j = 0; j < NUMCIRCS; j ++)\n        {\n            if (isIn(p, j))\n            {\n                p = invert(p, j);\n                c ++;\n                inOutside = false;\n            }\n        }\n            \n        if (p.x > 1.)\n        {\n            p.x = 2. - p.x;\n            c ++;\n            inOutside = false;\n        }\n        if (p.x < -1.)\n        {\n            p.x = -2. - p.x;\n            c ++;\n            inOutside = false;\n        }\n        \n        if (inOutside) break;\n    }\n    \n    float t = 1. - float(c) / float(NUMITERS);\n    if (t == 1.) {\n        return vec3(0.);\n    }\n    \n    return col(t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.5*fragCoord - 1.25*iResolution.xy) / iResolution.y;\n    fragColor = vec4(IIS(p), 1.);\n}","name":"Image","description":"","type":"image"}]}