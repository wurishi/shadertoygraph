{"ver":"0.1","info":{"id":"sd3yWM","date":"1678262199","viewed":130,"name":"Alpine Mount Flight Ann255","username":"ytktkd69","description":"2022.05.26","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  original  \"River Flight\" by dr2 - 2014\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n//-----------------------------------  ad\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n//--------------------------------------- ad\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n//---------------------------------------------\nfloat Fbm2 (vec2 p)\n{\n  float f, a;  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2e (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 6; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.96875);\n}\n\n\n//-----------------------------------------\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  vec2 ff = f * f;\n  vec2 u = ff * (3. - 2. * f);\n  vec2 uu = 30. * ff * (ff - 2. * f + 1.);\n  vec4 h = Hashv4f (dot (i, cHashA3.xy));\n  return vec3 (h.x + (h.y - h.x) * u.x + (h.z - h.x) * u.y +\n     (h.x - h.y - h.z + h.w) * u.x * u.y, uu * (vec2 (h.y - h.x, h.z - h.x) +\n     (h.x - h.y - h.z + h.w) * u.yx));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n//----------------------------------- ad\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\n\nfloat PrCapsDf (vec3 p, vec2 b)\n{  return length (p - vec3 (0., 0., b.x * clamp (p.z / b.x, -1., 1.))) - b.y;\n} \n//------------------------------------- ad\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n/*\nfloat PrCylDf (vec3 p, vec2 b)\n{  return max (length (p.xy) - b.x, abs (p.z) - b.y);\n}  */\n//----------------------------------  ad\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x / rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r) {\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n//-------------------------------------------------- ad Ann225\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n//---------------------------------------------Ann Data \n\n\n//----------------------------------------------------\n//int idObj;\n//mat3 flyerMat,flMat ;\n//vec3 flyerPos,flPos, engPos, qHit, qHitTransObj, sunDir, sunCol;\nvec2 trkOffset;\nfloat szFac, wSpan, tCur, fusLen,  flyVel ;\nconst float dstFar = 400.;\n//const float pi = 3.14159;\n//------------------------------------- ad\n/*\nconst int idFus = 11, idPipe = 12, idWing = 13, idStrut = 14,\n   idHstab = 15, idFin = 16, idLeg = 17, idAxl = 18, idWhl = 19,\n   idNose = 20, idCkpit = 21, idPlt = 22;\n */  \n//---------------------------------------------Ann Data \nmat3 flMat;\nvec4 csWm, csWt;\nvec3 sunDir, qHit, flPos, dwf, dwr,sunCol;\nfloat  angWm, drpWm, angWt, drpWt, grndScl, flSzFac;\nint idObj, vuMode;\nbool wlDown;\nconst int idFus = 1, idCkp = 2, idEng = 3, idWngM = 4, idWngT = 5, idFin = 6,\n   idWhl = 7, idLeg = 8, idFr = 9;\nconst float pi = 3.1415927;\n\n////////////////////////////////////////////////////////  Font ad\n // [iq] https://www.shadertoy.com/view/4lyfzw\nfloat opExtrussion(vec3 p, float sdf, float h) {\n    vec2 w = vec2(sdf, abs(p.z) - h);\n  \treturn min(max(w.x,w.y),0.) + length(max(w,0.));\n}\n\nfloat sdFont(in vec2 p, in int c) {\n    vec2 uv = (p + vec2(float(c%16), float(15-c/16)) + .5)/16.;\n    return max(max(abs(p.x) - .25, max(p.y - .35, -.38 - p.y)), textureLod(iChannel1, uv, 0.).w - 127./255.);\n}\n                                         // 26 times\n///////////////////////////////////////////////\nfloat sdMessage_2D(vec2 p, int[26] txt, float scale) {  //  cut(int i0)\n    //p.y += .1;\n    p /= scale;\n \tfloat d = 999., w = .45; // letter width  \n    p.x += w*float(txt.length()-1)*.5; // center text arround 0\n    for (int id = 0; id<26; id++){\n    \td = min(d, sdFont(p, txt[id]));   \n    \tp.x -= w; \n    }\n    return scale*d;\n}\n//////////////////////////////////////////////\nfloat sdMessage3D(in vec3 p, int[26] txt, float scale, float h) { \n    return opExtrussion(p, sdMessage_2D(p.xy, txt, scale), h);\n}\n/////////////////////////////////////////////////////////////////   FOnt Data END\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 ww;\n  float dMin, d, s, w, t, wg;\n  dMin = dstFar / flSzFac;\n  p = flMat * (p - flPos) / flSzFac;\n  q = p;\n  w = 1.;\n  s = 0.;\n  if (q.z < -1.5) {\n    s = q.z + 1.5;\n    s *= s;\n    w *= 1. - 0.025 * s;\n    s *= 0.026;\n  } else if (q.z > 3.5) {\n    s = q.z - 3.5;\n    s *= s;\n    w *= 1. - 0.05 * s;\n    s *= -0.02;\n  }\n  d = PrCapsDf (q - vec3 (0., s, 0.), w, 7.);\n  if (wlDown) d = max (d, - min (PrBoxDf (vec3 (abs (q.x) - 0.45, q.y + 1., q.z - 0.4),\n     vec3 (0.2, 0.25, 1.6)), PrBoxDf (vec3 (abs (q.x) - 0.2, q.y + 1., q.z - 4.8),\n     vec3 (0.1, 0.3, 0.2))));\n  DMINQ (idFus);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.65, 0.1, 6.);\n  d = PrCapsDf (q, 0.02, 0.3);\n  DMINQ (idFr);\n  q = p;\n  q.z -= -0.7;\n  q.xz = abs (q.xz);\n  q -= vec3 (0.2, 0.8, 4.);\n  d = PrCapsDf (q.xzy, 0.07, 0.2);\n  DMINQ (idFr);\n  q = p;\n  q.yz -= vec2 (0.4, 3.5);\n  d = PrCapsDf (q, 0.6, 1.5);\n  DMINQ (idCkp);\n  ww = vec2 (4., 1.4);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (0.7, 1.3);\n  q.xy = Rot2Cs (q.xy, csWm.xy);\n  q.xz = Rot2Cs (q.xz, csWm.zw);\n  t = ww.y * (1. - 0.3 * q.x / ww.x);\n  s = 1.1 * (q.z - 0.2) / ww.y;\n  d = SmoothMax (PrCaps2Df (q.yz, 0.15 * (t - s * s), t), abs (abs (p.x) - ww.x) - ww.x, 0.06);\n  d = SmoothMax (d, - abs (PrBox2Df (vec2 (abs (p.x) - 6.9, q.z - 0.085 * q.x + 1.2),\n     vec2 (0.85, 0.2))), 0.03);\n  DMINQ (idWngM);\n  for (float k = 0.; k < 4.; k ++) {\n    q = p;\n    q.x = abs (q.x);\n    q -= (k + 1.1) * dwr + vec3 (0., 0.65, 0.1);\n    d = PrCapsDf (q, 0.05, 0.25);\n    DMINQ (idFr);\n  }\n  for (float k = 0.; k < 3.; k ++) {\n    q = p;\n    q.x = abs (q.x);\n    q -= (k + 1.3) * dwf + vec3 (0., 0.22, 2.8);\n    d = max (PrRoundCylDf (q.yzx - vec3 (0.25, -0.1, 0.), 0.25, 0.05, 0.), 0.3 - q.y);\n    DMINQ (idFr);\n    d = min (SmoothMax (abs (PrCapsDf (q, 0.3 * (1. - 0.5 * q.z * q.z), 0.9)) - 0.02,\n       abs (q.z + 0.1) - 0.55, 0.02), PrCylDf (q, 0.28, 0.25));\n    s = q.z + 0.2;\n    d = max (min (d, PrCapsDf (q + vec3 (0., 0., 0.2), 0.25 * (1. - 2. * s * s), 0.7)),\n       - PrCylDf (vec3 (q.xy, q.z + 0.8), 0.07, 0.2));\n    DMINQ (idEng);\n  }\n  ww = vec2 (1.3, 0.85);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (0.8, -5.8);\n  q.xy = Rot2Cs (q.xy, csWt.xy);\n  q.xz = Rot2Cs (q.xz, csWt.zw);\n  d = min (ww.x - abs (abs (p.x) - ww.x), abs (PrBox2Df (vec2 (abs (p.x) - 1.7,\n     q.z - 0.07 * q.x + 0.6), vec2 (0.7, 0.25))));\n  t = ww.y * (1. - 0.25 * q.x / ww.x);\n  s = (q.z - 0.1) / ww.y;\n  d = SmoothMax (PrCaps2Df (q.yz, 0.12 * (t - s * s), t), - d, 0.03);\n  DMINQ (idWngT);\n  ww = vec2 (1.5, 0.65);\n  q = p;\n  q.x = abs (q.x);\n  q.xy = Rot2Cs (q.xy, sin (drpWt + vec2 (0.5 * pi, 0.)));\n  q -= vec3 (2.7, 0.8, -6.9);\n  t = ww.y * (1. - 0.25 * abs (q.y) / ww.x);\n  s = (q.z + 0.1 * abs (q.y) / ww.x - 0.2) / ww.y;\n  d = SmoothMax (PrCaps2Df (vec2 (q.x, q.z + 0.1 * abs (q.y) / ww.x), 0.1 * (t - s * s), t),\n     abs (q.y - 0.35 * ww.x) - 0.65 * ww.x, 0.06);\n  d = SmoothMax (d, - abs (PrBox2Df (vec2 (q.y - 0.8, q.z + 0.3), vec2 (0.5, 0.2))), 0.03);\n  DMINQ (idFin);\n  q.z -= -0.3;\n  d = PrCapsDf (q, 0.05, 0.2);\n  DMINQ (idFr);\n  if (wlDown) {\n    q = p;\n    q.yz -= vec2 (-1., 0.4);\n    t = 0.45;\n    s = abs (q.z) - 3.5 * t;\n    q.z = mod (q.z + 0.5 * t, t) - 0.5 * t;\n    q.x = abs (q.x) - 0.5;\n    d = max (PrRoundCylDf (vec3 (q.yz, abs (q.x) - 0.09), 0.16, 0.03, 0.02), s);\n    DMINQ (idWhl);\n    d = max (min (PrCylDf (q.yzx, 0.05, 0.09), PrCylDf (vec3 (q.xz, q.y - 0.2), 0.03, 0.2)), s);\n    DMINQ (idLeg);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.2, -1.06, 4.8);\n    d = PrRoundCylDf (vec3 (q.yz, abs (q.x) - 0.07), 0.1, 0.03, 0.01);\n    DMINQ (idWhl);\n    d = min (PrCylDf (q.yzx, 0.05, 0.07), PrCylDf (vec3 (q.xz, q.y - 0.2), 0.03, 0.2));\n    DMINQ (idLeg);\n  }\n  return 0.6 * flSzFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 220; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4, colY4, colB4;\n  vec2 s;\n  float t;\n  col4 = vec4 (1., 1., 0.95, 0.2);\n  colY4 = vec4 (0.8, 0.8, 0., 0.2);\n  colB4 = vec4 (0.2, 0.2, 1., 0.2);\n  if (idObj == idFus) {\n    col4 = mix (colB4, col4, smoothstep (0.07, 0.08, abs (qHit.y + 0.6)));\n    col4 = mix (colY4, col4, smoothstep (0.07, 0.08, abs (qHit.y + 0.35)));\n    if (PrCylDf (qHit - vec3 (0., 0., 0.4), 0.98, 1.7) < 0. ||\n       abs (qHit.x) < 0.4 && qHit.y < 0. && PrCylDf (qHit - vec3 (0., 0., 4.7), 0.93, 0.3) < 0.)\n       col4 *= vec4 (vec3 (0.2), 0.);\n    if (! wlDown && qHit.y < 0.) col4 *= 0.7 + 0.3 * smoothstep (0.008, 0.012, \n       min (abs (PrBox2Df (vec2 (abs (abs (qHit.x) - 0.45) - 0.1, qHit.z - 0.4), vec2 (0.1, 1.6))),\n       abs (PrBox2Df (vec2 (abs (abs (qHit.x) - 0.2) - 0.05, qHit.z - 4.8), vec2 (0.05, 0.2)))));\n    col4 *= 0.7 + 0.3 * smoothstep (0.008, 0.01, abs (PrRoundBox2Df (qHit.yz - vec2 (-0.4, 3.5),\n       vec2 (0.3, 0.15), 0.05)));\n       /////////////////////////////////////////// ad Font\n \n \n \n \n       //////////////////////////////////////////  END Font\n  } else if (idObj == idCkp) {\n    if (qHit.z > 0.4 && abs (qHit.y - 0.45) < 0.07 && abs (abs (qHit.x) - 0.2) > 0.03 &&\n       abs (abs (qHit.z - 1.35) - 0.2) > 0.03) col4 = vec4 (0., 0., 0., -1.);\n  } else if (idObj == idEng) {\n    t = length (qHit.xy);\n    if (PrCapsDf (qHit, 0.3 * (1. - 0.5 * qHit.z * qHit.z), 0.85) < 0.) {\n      if (qHit.z > 0. && t < 0.14) col4 = vec4 (1., 0., 0., 0.2);\n      else col4 *= vec4 (vec3 (0.3), 0.);\n    } else {\n      if (abs (qHit.z + 0.1) > 0.5) col4 = colY4;\n      else col4 = mix (colB4, col4, smoothstep (0.02, 0.03, abs (qHit.z - 0.3)));\n    }\n  } else if (idObj == idWngM) {\n    t = qHit.z + 0.1 * abs (qHit.x);\n    col4 = mix (colB4, col4, smoothstep (0.04, 0.05, abs (t - 1.2)));\n    col4 = mix (colY4, col4, smoothstep (0.04, 0.05, abs (t - 1.)));\n    if (qHit.y < 0.) {\n      if (abs (abs (qHit.x) - 3.9) < 2.1) col4 *= 0.7 + 0.3 *\n         smoothstep (0.008, 0.012, abs (qHit.z - 0.1 * abs (qHit.x) + 1.));\n    } else {\n      s = Rot2D (qHit.xz - vec2 (3.5, -0.3), -0.1 * pi);\n      s.x = abs (abs (s.x) - 0.8) - 0.3;\n      col4 *= 0.7 + 0.3 * smoothstep (0.008, 0.012, abs (PrBox2Df (s, vec2 (0.3, 0.15))));\n    }\n  } else if (idObj == idWngT) {\n    t = qHit.z + 0.15 * abs (qHit.x);\n    col4 = mix (colB4, col4, smoothstep (0.02, 0.03, abs (t - 0.7)));\n    col4 = mix (colY4, col4, smoothstep (0.02, 0.03, abs (t - 0.6)));\n  } else if (idObj == idFin) {\n    t = qHit.z + 0.15 * abs (qHit.y);\n    col4 = mix (colB4, col4, smoothstep (0.02, 0.03, abs (t - 0.4)));\n    col4 = mix (colY4, col4, smoothstep (0.02, 0.03, abs (t - 0.3)));\n  } else if (idObj == idWhl) {\n    col4 = mix (vec4 (0.7, 0.7, 0.75, 0.1), vec4 (0.3, 0.3, 0.3, 0.),\n       step (0.07, length (qHit.yz)));\n  } else if (idObj == idLeg) {\n     col4 = vec4 (0.8, 0.8, 0.85, 0.1);\n  }\n  return col4;\n}\n//-------------------------------------------------\nvoid FlyerParms ()\n{\n  angWm = 0.1 * pi;\n  drpWm = 0.02 * pi;\n  csWm = vec4 (sin (drpWm + vec2 (0.5 * pi, 0.)), sin (angWm + vec2 (0.5 * pi, 0.)));\n  angWt = 0.12 * pi;\n  drpWt = -0.03 * pi;\n  csWt = vec4 (sin (drpWt + vec2 (0.5 * pi, 0.)), sin (angWt + vec2 (0.5 * pi, 0.)));\n  dwr = vec3 (1.4, 0., 0.);\n  dwr.xy = Rot2Cs (dwr.xy, sin (- drpWm + vec2 (0.5 * pi, 0.)));\n  dwr.xz = Rot2Cs (dwr.xz, sin (-0.7 * angWm + vec2 (0.5 * pi, 0.)));\n  dwf = vec3 (1.5, 0., 0.);\n  dwf.xy = Rot2Cs (dwf.xy, sin (-0.9 * drpWm + vec2 (0.5 * pi, 0.)));\n  dwf.xz = Rot2Cs (dwf.xz, sin (-1.3 * angWm + vec2 (0.5 * pi, 0.)));\n  wlDown = (mod (0.05 * tCur, 2.) > 1.);\n}\n\n//-------------------------------------------------Ann Data END   \n/*\nvec3 TrackPath (float t)      // one way river flight\n{\n  return vec3 (24. * sin (0.035 * t) * sin (0.012 * t) * cos (0.01 * t) +\n     19. * sin (0.0032 * t) + 100. * trkOffset.x, 0., t);\n}   */\n\n//----------------------------------  Yelllow Moth TrackPath\nvec3 TrackPath (float t)      // one way river flight => loop flight\n{\n  float s = sin (0.0095 * t);  // de (0.005*t)\n  float c = cos (0.0095 * t);\n  c /= (1. + s * s);\n  return vec3 (1. + 40. * c, 13. + 2. * sin (0.0073 * t), -5. + 40. * s * c);\n}\n\n//----------------------------------------\nfloat GrndHt (vec2 p, int hiRes)\n{\n  const vec2 vRot = vec2 (1.4624, 1.6721);\n  vec2 q = p * 0.06;\n  float w = (0.75 * Noisefv2 (0.25 * q) + 0.15) ;  // w=( )*0.0 sea\n  w *= 56.*(1.0+0.*sin(iTime*0.05)) * w;              // de 36.0 ;   ~~150.\n  vec2 vyz = vec2 (0.);\n  float ht = 0.;\n  for (int j = 0; j < 10; j ++) {\n    vec3 v = Noisev3v2 (q);\n    vyz += v.yz;\n    ht += w * v.x / (1. + dot (vyz, vyz));\n    if (j == 4) {\n      if (hiRes == 0) break;\n    }\n    w *= -0.41 ;     // de -0.37;      \n    q *= mat2 (vRot.x, vRot.y, - vRot.y, vRot.x);\n     }\n  vec3 pt = TrackPath (p.y);\n  pt.y -= 8.;      // de -=2.;\n  float g = smoothstep (1.5, 4.5*(1.+0.*sin(iTime*0.2)), \n           /*sqrt*/(sqrt (abs (p.x - pt.x))));// de (1.5,4.5 )\n  return min (ht, pt.y * (1. - g) + ht * g);  // out of TrackPath\n // return pt.y *  g + ht *(1.- g);     // GrndHt && Moth on the TrackPath\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz, 1);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy, 1), e.x,\n     ht - GrndHt (p.xz + e.yx, 1)));\n}\n\nvec4 GrndCol (vec3 p, vec3 n)\n{\n /* const*/ vec3 gCol1 = vec3 (0.6, 0.7, 0.7), gCol2 = vec3 (0.2, 0.1, 0.1),\n     gCol3 = vec3 (0.4, 0.3, 0.3), gCol4 = vec3 (0.1, 0.2, 0.1),\n     gCol5 = vec3 (0.7, 0.7, 0.8),     // upper eria\n     gCol6 = vec3 ( 1.-0.8*sin(iTime*0.05),0.3,0.03) ,   // de(0.05, 0.3, 0.03),middle eria\n     gCol7 = vec3 (0.1, 0.08, 0.);     // lower eria\n  vec2 q = p.xz;\n  float f, d;\n  float cSpec = 0.;\n  f = 0.5 * (clamp (Noisefv2 (0.1 * q), 0., 1.) +\n      0.8 * Noisefv2 (0.2 * q + 2.1 * n.xy + 2.2 * n.yz));\n  vec3 col = f * mix (f * gCol1 + gCol2, f * gCol3 + gCol4, 0.65 * f);\n  if (n.y < 0.5) {   // de n.y<0.5\n    f = 0.4 * (Noisefv2 (0.4 * q + vec2 (0., 0.57 * p.y)) +\n       0.5 * Noisefv2 (6. * q));\n    d = 4. * (0.5 - n.y);\n    col = mix (col, vec3 (f), clamp (d * d, 0.1, 1.));\n    cSpec += 0.1;\n  }\n  if (p.y > 22.) {    // de p.y>22.\n    if (n.y > 0.25) {\n      f = clamp (0.07 * (p.y - 22. - Noisefv2 (0.2 * q) * 15.), 0., 1.);\n      col = mix (col, gCol5, f);\n      cSpec += f;\n    }\n  } else {\n    if (n.y > 0.45) {      \n      vec3 c = (n.y - 0.3) * (gCol6 * vec3 (Noisefv2 (0.4 * q),\n         Noisefv2 (0.34 * q), Noisefv2 (0.38 * q)) + vec3 (0.02, 0.1, 0.02));\n      col = mix (col, c, smoothstep (0.45, 0.65, n.y) *\n         (1. - smoothstep (15., 22., p.y - 1.5 + 1.5 * Noisefv2 (0.2 * q))));\n    }\n    if (p.y < 0.35 && n.y > 0.84) {    // de p.y<0.65 && n.y>0.4\n      d = n.y - 0.4;\n      col = mix (col, d * d + gCol7, 2. * clamp ((0.65 - p.y -\n         0.35 * (Noisefv2 (0.4 * q) + 0.5 * Noisefv2 (0.8 * q) +\n         0.25 * Noisefv2 (1.6 * q))), 0., 0.3));\n      cSpec += 0.1;\n    }\n  }\n  return vec4 (col, cSpec);\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  float dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz, 0);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.15, 0.4 * h) + 0.008 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 10; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz, 0));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.1;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = 0.2 * wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.15, 0.2, 0.65);\n  vec3 col;\n  col = sbCol + 0.2 * sunCol * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\n\n\n//----------------------------------------Biplanes   SkyCol ad\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, clCol, col;\n  float fCloud, cloudLo, cloudRngI, atFac, colSum, attSum, s,\n     att, a, dDotS, ds;\n  const int nLay = 30;\n  cloudLo = 100.;  cloudRngI = 1./100.;  atFac = 0.045;\n  fCloud = 0.5;\n  if (rd.y > 0.) {\n    fCloud = clamp (fCloud, 0., 1.);\n    dDotS = max (dot (rd, sunDir), 0.);\n    ro.x += 2.5 * tCur;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz / rd.y;\n    p.y = cloudLo;\n    ds = 1. / (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;  attSum = 0.;\n    s = 0.;  att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + rd * s;\n      q.z *= 1.3197;          // de 0.7;\n      att += atFac * max (fCloud - Fbm3 (0.02 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;  s += ds;\n      if (attSum >= 1.) break;\n    }\n    colSum += 0.5 * min ((1. - attSum) * pow (dDotS, 3.), 1.);\n    clCol = vec3 (1.0) * 2.8 * (colSum + 0.05);\n    cSun = vec3 (1.) * clamp ((min (pow (dDotS, 1500.) * 2., 1.) +\n       min (pow (dDotS, 10.) * 0.75, 1.)), 0., 1.);\n    col = clamp (mix (SkyBg (rd) + cSun, clCol, attSum), 0., 1.);\n   // col = mix (col, SkyBg (rd), pow (1. - rd.y, 16.));\n  } else col = SkyBg (- rd);\n  return col;\n}\n    \n//-----------------------------------------------\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.01;\n  float eps = 0.001;\n  for (int i = 0; i < 80; i++) {\n    vec3 p = ro + rd * d;\n    float h = p.y - GrndHt (p.xz, 0);\n    sh = min (sh, 20. * h / d);\n    d += 0.5;\n    if (h < eps*(1.0+d)) break;\n    eps *= 1.02;\n  }\n  return clamp (sh, 0., 1.);\n}\n                                  //-----------END delete\n\n /*\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  float eps = 0.01;\n  vec4 col4;\n  vec3 objCol, col, vn;\n  float dstHit, dstGrnd, dstObj, dstPropel, f;\n  int idObjT;\n  vec3 roo = ro;\n  dstHit = dstFar;\n  dstGrnd = GrndRay (ro, rd);   fusLen =1.05 ; //---ad\n  wSpan = 1.2*fusLen;                         // de 12.;\n // engPos = vec3 (0.35 * wSpan, -0.2, -1.5);\n  idObj = 0;\n  dstObj = ObjRay (ro, rd);\n  idObjT = idObj;\n//  dstPropel = TransObjRay (ro, rd);\n // if (dstObj < dstPropel) dstPropel = dstFar;\n  float refFac = 1.;\n if (dstGrnd < dstObj && ro.y + dstGrnd * rd.y < 0.) {\n    float dw = - ro.y / rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaterNf (ro, dw));   // //rd=reflect();Canyon Image\n    ro += eps * rd;\n    eps *= 1.01;\n    dstGrnd = GrndRay (ro, rd);\n    idObj = 0;\n    dstObj = ObjRay (ro, rd);\n    idObjT = idObj;\n    refFac *= 0.6;\n  }\n  bool isGrnd = false;\n  if (dstObj < dstGrnd) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n   // col4 = FlyerCol (vn);     //River flight objCol = ObjCol (ro, vn);\n    col4 =ObjCol() ;\n    if (idObj == 10) col4.rgb = vec3 (0.2) + 0.5 * SkyCol (ro, reflect (rd, vn));\n    float dif = max (dot (vn, sunDir), 0.);\n    col = sunCol * col4.rgb * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) * ObjSShadow (ro, sunDir) *\n       (dif + 0.5 * pow (max (0., dot (sunDir, reflect (rd, vn))), 100.)));\n    dstHit = dstObj;\n  } else {\n    vec3 rp = ro + dstGrnd * rd;\n    if (refFac < 1.) dstHit = length (rp - roo);\n    else dstHit = dstGrnd;\n    if (dstHit < dstFar) {\n      ro = rp;\n      isGrnd = true;\n    } else {\n      col = refFac * SkyCol (ro, rd)*sin(tCur*0.01);\n    }\n  }\n  if (isGrnd) {\n     ro += dstGrnd * rd;      // -----------ad\n    vn = GrndNf (ro, dstHit);\n    col4 = GrndCol (ro, vn);\n    col = col4.xyz * refFac;\n    float dif = max (dot (vn, sunDir), 0.);\n    col *= sunCol * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) * GrndSShadow (ro, sunDir) *\n       (dif + col4.w * pow (max (0., dot (sunDir, reflect (rd, vn))), 100.)));\n  }\n  if (dstPropel < dstFar) col = 0.7 * col + 0.1 -\n     0.04 * SmoothBump (1.5, 1.7, 0.02, length (qHitTransObj.xy)); \n  if (dstHit < dstFar) {\n    f = dstHit / dstFar;\n    col = mix (col, refFac * SkyBg (rd), clamp (1.03 * f * f, 0., 1.));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return clamp (col, 0., 1.);\n}\n*/\n\n//----------------------------------------------- ShowScene Ann225 ad\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, dstGrnd, nDotL, sh,dstHit,dw, refFac;\n  FlyerParms ();\n  dstGrnd = (vuMode == 0) ? GrndRay (ro, rd) : dstFar;\n  dstObj = ObjRay (ro, rd);\n  \n  //-------------------------------------------- water reflection ad =>failure\n /*  if (dstGrnd < dstObj && ro.y + dstGrnd * rd.y < 0.) //{\n    float dw = - ro.y / rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaterNf (ro, dw));   // //rd=reflect();Canyon Image\n   */ \n  //--------------------------------------------\n  if (min (dstGrnd, dstObj) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col4 = ObjCol ();\n      if (col4.a >= 0.) {\n        nDotL = max (dot (vn, sunDir), 0.);\n        if (col4.a > 0.) nDotL = pow (nDotL, 1.5);\n        sh = ObjSShadow (ro, sunDir);\n        col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, sunDir), 0.) + 0.8 * sh * nDotL) +\n           col4.a * step (0.95, sh) * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n           \n      } else col = SkyCol (ro, reflect (rd, vn));\n    } else if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      vn =  GrndNf (ro,0.001);     // ex dstHit =0.01\n      col4 =GrndCol(ro,vn) ;      // ad GrndCol( , )\n     //-----------------------------------Case 1  all green color \n  /*    col = mix (vec3 (0.2, 0.4, 0.1), vec3 (0., 0.5, 0.), clamp (0.7 * Noisefv2 (ro.xz) - 0.3,\n         0., 1.));\n      col = mix (vec3 (0.6, 0.6, 0.7) * (0.7 + 0.3 * Noisefv2 (4. * vec2 (length (ro.xz), ro.y))),\n         col, smoothstep (0.5, 0.8, vn.y));\n        col *= 0.1 + 0.9 * max (0., max (dot (vn, sunDir), 0.)); \n     */     //  delete all grenn color\n       //----------------------------------Case 2 Red & Green color  \n       refFac =1.2984 ;\n        col = col4.xyz * refFac;\n        float dif = max (dot (vn, sunDir), 0.);\n    col *= sunCol * (0.2 *0.8* (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) * GrndSShadow (ro, sunDir) *\n       (dif + col4.w * pow (max (0., dot (sunDir, reflect (rd, vn))), 100.))); \n        \n     \n    }\n  } else {\n    col = (vuMode == 0) ? SkyCol (ro, rd) : vec3 (0.6, 0.6, 0.75) * (0.2 + 0.2 * (rd.y + 1.) *\n       (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\n//-----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n  vec2 uvs = uv;\n  uv.x *= iResolution.x / iResolution.y;\n  trkOffset = vec2 (0.);                       // fusLen=1.0 ; wSpan=1.2*fusLen;??\n  float zmFac = 2.7;                           // zmFac =2.7 ??\n  tCur = 13. * iTime + 100. * trkOffset.y;     // 10.  //15.*iTime ???\n  sunDir = normalize (vec3 (0.9, 1., -0.4));\n  sunCol = vec3 (1., 0.9, 0.8);\n  vec3 ro, rd, vd, fpF, fpB, vDir;\n  szFac = 4.25;                               // szFac =0.25; ??\n  \n  flSzFac=0.3*1.1; flyVel=2.5 ; vuMode= 0;  // vuMode=1 => delete BG\n  //----------------------------- flyerPM(  ) Start\n  float dt = 1.;\n  fpF = TrackPath (tCur + dt);\n  flPos = TrackPath (tCur);\n  fpB = TrackPath (tCur - dt);\n  vec3 vel = (fpF - fpB) / (2. * dt);         // flyVel =25.0 ; ???\n  vel.y = 0.;\n  vec3 acc = (fpF - 2. * flPos + fpB) / (dt * dt);\n  acc.y = 0.;\n  vec3 va = cross (acc, vel) / length (vel);\n  float roll = 12. * length (va);\n  if (va.y < 0.) roll *= -1.;\n  vDir = normalize (vel);\n  float cRl = cos (roll);\n  float sRl = sin (roll);\n  flMat = mat3 (cRl, - sRl, 0., sRl, cRl, 0., 0., 0., 1.) *\n     mat3 (vDir.z, 0., vDir.x, 0., 1., 0., - vDir.x, 0., vDir.z);\n  //------------------------------------ flyerPM  END   \n  float vuPeriod = 500.;\n  flPos.y = 6.05 + 0.80 * sin (2.5 * tCur / vuPeriod);   //de 3.+1.5*sin()\n  float lookDir = 2. * mod (floor (tCur / vuPeriod), 2.) - 1.;\n  ro = TrackPath (tCur - 40. * lookDir * (1. -\n     0.8 * abs (sin (pi * mod (tCur, vuPeriod) / vuPeriod))));\n  ro.y = 6.5 + 0.6 * sin (0.16 * tCur / vuPeriod);  // de 7.5+0.6*sin()\n  vd = flPos - ro;\n // vd.y = 0.;\n  vd = normalize (lookDir * vDir + 0.3 * normalize (vd));\n  mat3 scMat = mat3 (vd.z, 0., - vd.x, 0., 1., 0., vd);\n  rd = scMat * normalize (vec3 (uv, zmFac));\n  vec3 col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col = mix (vec3 (0.7), col, pow (max (0., 0.95 - length (uvs * uvs * uvs)), 0.3));\n  fragColor = vec4 (col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}