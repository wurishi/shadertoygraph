{"ver":"0.1","info":{"id":"4dSczK","date":"1492707490","viewed":361,"name":"Simple Sphere TOAST mapping ","username":"iKest","description":"Simple sphere TOAST maping (better than equirectangular mapping)","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["3d","sphere","cubemap","mapping","toast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** \n * Sphere TOAST mapping (Tessellated Octahedral Adaptive Subdivision Transform)\n * Link to demo: https://www.shadertoy.com/view/XsScRy\n * iKest @ ShaderToy, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n * https://creativecommons.org/licenses/by-nc-sa/3.0/\n *\n * Reference: \n * [1] TOAST projection: http://www.worldwidetelescope.org/docs/worldwidetelescopeprojectionreference.html\n * [2] Clarberg P. \"Fast Equal-Area Mapping of the (Hemi)Sphere using SIMD\" https://lup.lub.lu.se/search/publication/7e2d6972-7508-490a-bdd6-4d3019568e91\n *\n **/\n#define M_2_PI 0.63661977236758134308\n#define time iTime\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat sphere(vec3 ro, vec3 rd)\n{\n\tfloat c = dot(ro, ro) - 1.;\n\tfloat b = dot(rd, ro);\n\tfloat d = b*b - c;\n\tfloat t = -b - sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn mix(-1.0, t, st);\n}\n\nvec3 toast (vec3 p)\n{\n    float r = sqrt(1. - abs(p.z));\n    float phi = atan(abs(p.y), abs(p.x)) * M_2_PI;\n    vec2 uv = vec2(r) * vec2(1.-phi, phi);\n    uv = sign(p.xy) * mix(vec2(1.)-uv.yx, uv, step(0.,p.z));\n    uv = .5 * uv + vec2 (.5); // [-1;1] -> [0;1]\n\treturn texture(iChannel0, uv).xyz;  \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * \n\tvec2(iResolution.x/iResolution.y, 1.0);\n    vec2 um = (-1.0 + 2.0*iMouse.xy / iResolution.xy) * \n\tvec2(iResolution.x/iResolution.y, 1.0);\n\tvec3 ro = vec3(0.0, 0.0, -3.0);\n\tvec3 rd = normalize(vec3(uv, 2.5));\n    mat2 mx = mm2(time*.4+um.x*5.);\n    mat2 my = mm2(time*0.3+um.y*5.); \n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    float t = sphere(ro, rd);\n    vec3 pos = normalize(ro + t * rd);\n    vec3 bg = toast(rd);\n    vec3 col = toast(pos);\n    fragColor = vec4( mix(bg, col, step(0.0, t)),1.);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/** \n * Cubemap to TOAST (Tessellated Octahedral Adaptive Subdivision Transform)\n * Link to demo: https://www.shadertoy.com/view/XsScRy\n * iKest @ ShaderToy, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n * https://creativecommons.org/licenses/by-nc-sa/3.0/\n *\n * Reference: \n * [1] TOAST projection: http://www.worldwidetelescope.org/docs/worldwidetelescopeprojectionreference.html\n * [2] Clarberg P. \"Fast Equal-Area Mapping of the (Hemi)Sphere using SIMD\" https://lup.lub.lu.se/search/publication/7e2d6972-7508-490a-bdd6-4d3019568e91\n *\n **/\n#define M_PI_4 0.78539816339744830962\n\nvec3 st2xyz (in vec2 st) {  \n\tvec2 uv = 2. * st - vec2(1.,1.); // [0;1] -> [-1;1]\n    float d = 1. - (abs(uv.x) + abs(uv.y));\n    float r = 1. - abs(d);\n    float h = r * sqrt(2. - r*r);\n    float phi = 0.;\n    if ( r > 0.) phi = M_PI_4 * (1. + (abs(uv.y) - abs(uv.x)) / r); \n    return sign(vec3(uv,d)) * vec3(cos(phi) * h, sin(phi) * h, 1. - r*r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 st =fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, st2xyz(st));\n}\n\n","name":"Buf A","description":"","type":"buffer"}]}