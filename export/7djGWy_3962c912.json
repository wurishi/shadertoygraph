{"ver":"0.1","info":{"id":"7djGWy","date":"1618608313","viewed":79,"name":"Pyramid with water","username":"keklol","description":"315_Vorobyeva_v2v6","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["task2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv)/float(iFrame + 1);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//const vec3 CAMERA_POS = vec3(6, 3.0,-6);\nconst vec3 CAMERA_POS = vec3(0, 1.2,-7);\nconst float INF = 1e10;\nconst vec3 LIGHT1_POS = vec3(-2, 1.3, 4.0);\nconst float LIGHT1_R = 0.5;\nconst vec3 LIGHT1_C = vec3(1, 1, 1);\nconst vec3 LIGHT2_POS = vec3(1.5, 0.5, 2.0);\nconst float LIGHT2_R = 0.3;\nconst vec3 LIGHT2_C = vec3(0.1, 1, 0.2); \nconst vec3 LIGHT3_POS = vec3(-3.0, 1.0, -2.0);\nconst float LIGHT3_R = 0.2;\nconst vec3 LIGHT3_C = vec3(0.1, 0.4, 0.9); \nconst float EPS = 1e-3;\nvec3 randDir;\nconst float TAU = 6.28318530718;\nconst int MAX_ITER = 5;\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0){\n        return INF;\n    }\n    vec3 WorldPos = t * dir + pos;\n    if (dot(WorldPos.xz, WorldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal, float noize_val) {\n    float noize = noize_val * 0.09 * sin(16.0 * (pos.x + dir.x)) * sin(16.0 * (pos.y + dir.y)) * sin(16.0 * (pos.z + dir.z));\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - (r + noize) * (r + noize);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nstruct Triangle {\n    vec3 pos[3];\n    vec3 color;\n    vec3 normal;\n    float specular;\n};\nconst uint TRIANGLES_COUNT = 6u;\nTriangle TRIANGLES[TRIANGLES_COUNT];\n\nfloat traceTriangle(Triangle t, vec3 origin, vec3 dir) {\n    float normalViewAngle = dot(dir, t.normal);\n    if (abs(normalViewAngle) < EPS)\n        return INF;\n    float d = dot(t.pos[0] - origin, t.normal) / normalViewAngle;\n    if (d < 0.0)\n        return INF;\n    vec3 hitPos = origin + dir * d;\n    vec3 edges[3] = vec3[3](\n        t.pos[1] - t.pos[0],\n        t.pos[2] - t.pos[1],\n        t.pos[0] - t.pos[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - t.pos[0],\n        hitPos - t.pos[1],\n        hitPos - t.pos[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS)\n        return d;\n    return INF;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target){\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    TRIANGLES[0].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(-0.75, -1.0, -1.25), vec3(-1.25, -1.0, 0.75));\n    TRIANGLES[0].normal = normalize(vec3(80, -34, 20));\n    TRIANGLES[1].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(0.75, -1.0, 1.25), vec3(-1.25, -1.0, 0.75));\n    TRIANGLES[1].normal = normalize(vec3(20, -34, -80));\n    TRIANGLES[2].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(0.75, -1.0, 1.25), vec3(1.25, -1.0, -0.75));\n    TRIANGLES[2].normal = normalize(vec3(80, 34, 20));\n    TRIANGLES[3].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(-0.75, -1.0, -1.25), vec3(1.25, -1.0, -0.75));\n    TRIANGLES[3].normal = normalize(vec3(20, 34, -80));\n    TRIANGLES[4].pos = vec3[3](vec3(0.75, -1.0, 1.25) , vec3(-0.75, -1.0, -1.25), vec3(1.25, -1.0, -0.75));\n    TRIANGLES[4].normal = normalize(vec3(0, 17, 0));\n    TRIANGLES[5].pos = vec3[3](vec3(0.75, -1.0, 1.25) , vec3(-1.25, -1.0, 0.75), vec3(-0.75, -1.0, -1.25));\n    TRIANGLES[5].normal = normalize(vec3(0, -17, 0));\n    float t = traceTriangle(TRIANGLES[0], pos, dir);\n    float trg1 = traceTriangle(TRIANGLES[1], pos, dir);\n    if (trg1 < t){\n        t = trg1;\n    }\n    float trg2 = traceTriangle(TRIANGLES[2], pos, dir);\n    if (trg2 < t){\n        t = trg2;\n    }\n    float trg3 = traceTriangle(TRIANGLES[3], pos, dir);\n    if (trg3 < t){\n        t = trg3;\n    }\n    float trg4 = traceTriangle(TRIANGLES[4], pos, dir);\n    if (trg4 < t){\n        t = trg4;\n    }\n    float trg5 = traceTriangle(TRIANGLES[5], pos, dir);\n    if (trg5 < t){\n        t = trg5;\n    }\n    if (t < dist){\n        return true;\n    }\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    return false;\n} \n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal){\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_R) ? 0.0 : 50.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS+ randDir * LIGHT2_R) ? 0.0 : 30.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_R) ? 0.0 : 40.0f / distSq3;\n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_C\n      + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_C\n      + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_C)\n      + texture(iChannel1, normal).rgb * 0.3;\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2,out bool flag){\n    if (dot(v, normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize( v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0){\n        flag = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x){\n    return x * x;\n}\n\nfloat rand(float frame){\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy*0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3 (0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 ViewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE  = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    TRIANGLES[0].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(-0.75, -1.0, -1.25), vec3(-1.25, -1.0, 0.75));\n    TRIANGLES[0].color = vec3(1, 0, 0);\n    TRIANGLES[0].normal = normalize(vec3(80, -34, 20));\n    TRIANGLES[1].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(0.75, -1.0, 1.25), vec3(-1.25, -1.0, 0.75));\n    TRIANGLES[1].color = vec3(1, 0, 0);\n    TRIANGLES[1].normal = normalize(vec3(20, -34, -80));\n    TRIANGLES[2].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(0.75, -1.0, 1.25), vec3(1.25, -1.0, -0.75));\n    TRIANGLES[2].color = vec3(1, 0, 0);\n    TRIANGLES[2].normal = normalize(vec3(80, 34, 20));\n    TRIANGLES[3].pos = vec3[3](vec3(0.0, 1.5, 0.0) , vec3(-0.75, -1.0, -1.25), vec3(1.25, -1.0, -0.75));\n    TRIANGLES[3].color = vec3(1, 0, 0);\n    TRIANGLES[3].normal = normalize(vec3(20, 34, -80));\n    TRIANGLES[4].pos = vec3[3](vec3(0.75, -1.0, 1.25) , vec3(-0.75, -1.0, -1.25), vec3(1.25, -1.0, -0.75));\n    TRIANGLES[4].color = vec3(1, 0, 0);\n    TRIANGLES[4].normal = normalize(vec3(0, 17, 0));\n    TRIANGLES[5].pos = vec3[3](vec3(0.75, -1.0, 1.25) , vec3(-1.25, -1.0, 0.75), vec3(-0.75, -1.0, -1.25));\n    TRIANGLES[5].color = vec3(1, 0, 0);\n    TRIANGLES[5].normal = normalize(vec3(0, -17, 0));\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = ViewVec;\n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    const float WATER_N = 1.33;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    vec3 colorMult = vec3(1, 1, 1);\n    float a = 1.0;\n    bool isFullResolation = false;\n    \n    for (int i = 0; i < 20; i++){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t){\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 WorldPos = t * curDir + curPos;\n            color = texture(iChannel0, WorldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.5){\n                materialType = REFLECTION;\n            }\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_R, l1Norm, 0.0);\n        if (light1T < t){\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_C;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_R, l2Norm, 0.0);\n        if (light2T < t){\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_C;\n            normal = l2Norm;\n        }\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_R, l3Norm, 0.0);\n        if (light3T < t){\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_C;\n            normal = l3Norm;\n        }\n        float trg1 = traceTriangle(TRIANGLES[0], curPos, curDir);\n        if (trg1 < t){\n            t = trg1;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }else{\n                colorMult = vec3(0.9, 0.9, 0.9);\n                materialType = REFRACTION;\n                if (dot(curDir , normal) > 0.0){\n                    n2 = AIR_N;\n                } else{\n                    n2 = GLASS_N;\n                }\n            }\n            normal = TRIANGLES[0].normal;\n            color = vec3(0.5, 0.5, 1.0);\n        }\n        float trg2 = traceTriangle(TRIANGLES[1], curPos, curDir);\n        if (trg2 < t){\n            t = trg2;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }else{\n                colorMult = vec3(0.9,0.9, 0.9);\n                materialType = REFRACTION;\n                if (dot(curDir , normal) > 0.0){\n                    n2 = AIR_N;\n                } else{\n                    n2 = GLASS_N;\n                }\n            }\n            normal = TRIANGLES[1].normal;\n            color = vec3(0.5, 0.5, 1.0);\n        }\n        float trg3 = traceTriangle(TRIANGLES[2], curPos, curDir);\n        if (trg3 < t){\n            t = trg3;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }else{\n                colorMult = vec3(0.9,0.9, 0.9);\n                materialType = REFRACTION;\n                if (dot(curDir , normal) > 0.0){\n                    n2 = AIR_N;\n                } else{\n                    n2 = GLASS_N;\n                }\n            }\n            normal = TRIANGLES[2].normal;\n            color = vec3(0.5, 0.5, 1.0);\n        }\n        float trg4 = traceTriangle(TRIANGLES[3], curPos, curDir);\n        if (trg4 < t){\n            t = trg4;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }else{\n                colorMult = vec3(0.9,0.9, 0.9);\n                materialType = REFRACTION;\n                if (dot(curDir , normal) > 0.0){\n                    n2 = AIR_N;\n                } else{\n                    n2 = GLASS_N;\n                }\n            }\n            normal = TRIANGLES[3].normal;\n            color = vec3(0.5, 0.5, 1.0);\n        }\n        float trg5 = traceTriangle(TRIANGLES[4], curPos, curDir);\n        if (trg5 < t){\n            t = trg5;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }else{\n                colorMult = vec3(0.7, 0.7, 0.7);\n                materialType = REFRACTION;\n                if (dot(curDir , normal) > 0.0){\n                    n2 = AIR_N;\n                } else{\n                    n2 = GLASS_N;\n                }\n            }\n            normal = TRIANGLES[4].normal;\n            color = vec3(0.5, 0.5, 1.0);\n        }\n        float trg6 = traceTriangle(TRIANGLES[5], curPos, curDir);\n        if (trg6 < t){\n            t = trg6;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }else{\n                colorMult = vec3(0.7,0.7, 0.7);\n                materialType = REFRACTION;\n                if (dot(curDir , normal) > 0.0){\n                    n2 = AIR_N;\n                } else{\n                    n2 = GLASS_N;\n                }\n            }\n            normal = TRIANGLES[5].normal;\n            color = vec3(0.1, 0.1, 0.2);\n        }\n        vec3 sphNorm;\n        float sph2T = traceSphere(curPos + vec3(0.0, 0.4, 0.0), curDir, 0.4, sphNorm, 1.7);\n        if (sph2T < t){\n            t = sph2T;\n            normal = sphNorm;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3, worldPos).rgb + vec3(0, 0.4, 0.5);\n            a = texture(iChannel3, worldPos).a;\n            if (randVals.x * 0.005 < WATER_R){\n                materialType = EMISSION;\n            } \n            else{\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0){\n                    nEnter = GLASS_N;\n                } \n                else{\n                    nEnter = WATER_N;\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t){\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 WorldPos = t * curDir + curPos;\n            color = texture(iChannel2, WorldPos.xz * WorldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if ( t != INF){\n            vec3 WorldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, WorldPos.xz);\n            if (materialType == EMISSION){\n                fragColor.rgb = color * colorMult;\n                fragColor.a = a;\n                break;\n            } else if (materialType == DIFFUSE){\n                fragColor.rgb = computeLight(WorldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = WorldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION){\n                curDir = refraction(curDir, normal, n1, n2, isFullResolation);\n                curPos = WorldPos + curDir * 1e-5;\n                if (!isFullResolation){\n                    float tmp = n1;\n                    n1 = n2;\n                    n2 = tmp;\n                    n1 = nEnter;\n                }\n            }\n            \n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n            break;\n        }\n    \n    \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"#define TAU 6.28318530718\n#define MAX_ITER 5\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    float time =  .5+23.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n#ifdef SHOW_TILING\n\tvec2 p = mod(uv*TAU*2.0, TAU)-250.0;\n#else\n    vec2 p = mod(uv*TAU, TAU)-250.0;\n#endif\n\tvec2 i = vec2(p);\n\tfloat c = 1.5;\n\tfloat inten = .008;\n\n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n\t}\n\tc /= float(MAX_ITER);\n\tc = 1.17-pow(c, 1.4);\n\tvec3 colour = vec3(pow(abs(c), 8.0));\n    colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n    \n\n\t#ifdef SHOW_TILING\n\tvec2 pixel = 2.0 / iResolution.xy;\n\tuv *= 2.0;\n\n\tfloat f = floor(mod(time*.5, 2.0)); \t\n\tvec2 first = step(pixel, uv) * f;\t\t \n\tuv  = step(fract(uv), pixel);\t\t\t\n\tcolour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); \n\t\n\t#endif\n\tfragColor = vec4(colour, 0.000000001);\n}\n\n","name":"Cube A","description":"","type":"cubemap"}]}