{"ver":"0.1","info":{"id":"7ttXz8","date":"1638734970","viewed":165,"name":"Advanced Sharpening Filter","username":"xrayz13","description":"A filter mask shader tests and various experiments","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sharpening"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -- Sharpening --\n#define sharp_strength 1.25   //[0.10 to 3.00] Strength of the sharpening\n#define sharp_clamp    0.035  //[0.000 to 1.000] Limits maximum amount of sharpening a pixel recieves - Default is 0.035\n\n// -- Advanced sharpening settings --\n#define pattern 2        //[1|2|3|4] Choose a sample pattern. 1 = Fast, 2 = Normal, 3 = Wider, 4 = Pyramid shaped.\n#define offset_bias 1.0  //[0.0 to 6.0] Offset bias adjusts the radius of the sampling pattern.\n                         //I designed the pattern for offset_bias 1.0, but feel free to experiment.\n\n#define CoefLuma vec3(0.2126, 0.7152, 0.0722) // BT.709 & sRBG luma coefficient (Monitors and HD Television)\n\nvec4 sharpenMask (sampler2D tex, vec2 fragCoord)\n{\n    vec3 sharp_strength_luma = (CoefLuma * sharp_strength);\n\n    // Sharpen detection matrix [0,1,0],[1,-4,1],[0,1,0]\n    // Colors\n    vec4 up = texture (tex, (fragCoord + vec2 (0, 1))/iResolution.xy);\n    vec4 left = texture (tex, (fragCoord + vec2 (-1, 0))/iResolution.xy);\n    vec4 center = texture (tex, fragCoord/iResolution.xy);\n    vec4 right = texture (tex, (fragCoord + vec2 (1, 0))/iResolution.xy);\n    vec4 down = texture (tex, (fragCoord + vec2 (0, -1))/iResolution.xy);\n    \n    vec3 col = center.rgb;\n    vec4 t = (up + left + right + down) * 0.25;\n    vec3 diff = vec4(center - t).rgb;\n    \n    vec4 sharp_strength_luma_clamp = vec4(sharp_strength_luma * (0.5 / sharp_clamp),0.5);\n    float sharp_luma = clamp(dot(vec4(diff, 1.0), sharp_strength_luma_clamp), 0.0, 1.0);\n    sharp_luma = (sharp_clamp * 2.0) * sharp_luma - sharp_clamp;\n    \n    return center + sharp_luma;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Detect edges and output to screen\n    fragColor = sharpenMask (iChannel0, fragCoord);\n}\n","name":"Image","description":"","type":"image"}]}