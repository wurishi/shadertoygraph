{"ver":"0.1","info":{"id":"lfXXDl","date":"1705869907","viewed":146,"name":"colorful crosses","username":"dissident","description":"20240121\n\nPlaying around with some tips from FabriceNeyret2","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["color","cross"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define rotate(a) mat2(cos( a + vec4(0,33,11,0)))\n\nfloat rect(float width, float height, vec2 center, float rotation, vec2 uv) {\n    float smoothing = 3.0;\n    float pixel_width = smoothing / iResolution.y;\n    uv = rotate(rotation) * (uv - center);\n    uv = smoothstep(pixel_width, 0.0, abs(uv) - vec2(width, height) / 2.0);\n    return min(uv.x, uv.y);\n}\n\nfloat cros(float wide, vec2 center, float rotation, vec2 uv) {\n  float thin = wide / 4.0;\n  float horizontal = rect(wide, thin, center, rotation, uv);\n  float vertical = rect(thin, wide, center, rotation, uv);\n  return max(horizontal, vertical);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n\n    float size = 0.8;\n    float radius = cos(iTime);\n    float s = sin(iTime) * 0.5;\n    float c = cos(iTime) * 0.5;\n    vec2 center = vec2(s, c) * radius;\n    float crass = cros(size, center, iTime, uv);\n    float criss = cros(size, -center, iTime, uv);\n\n    s = sin(iTime + PI / 2.0) * 0.5;\n    c = cos(iTime + PI / 2.0) * 0.5;\n    radius = cos(iTime + PI);\n    center = vec2(s, c) * radius;\n    float cruss = cros(size, center, iTime, uv);\n    float cress = cros(size, -center, iTime, uv);\n\n    color = (crass + criss + cress + cruss) * color;\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}