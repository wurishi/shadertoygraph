{"ver":"0.1","info":{"id":"MfBSDV","date":"1717004746","viewed":59,"name":"Convolution Playground","username":"Plastic","description":"Convolution image processing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["convolution"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy, \n    uva = (fragCoord - vec2(1, 0))/iResolution.xy,\n    uvb = (fragCoord - vec2(1, -1))/iResolution.xy,\n    uvc = (fragCoord - vec2(0, -1))/iResolution.xy,\n    uvd = (fragCoord - vec2(-1, -1))/iResolution.xy,\n    uve = (fragCoord - vec2(-1, 0))/iResolution.xy,\n    uvf = (fragCoord - vec2(-1, 1))/iResolution.xy,\n    uvg = (fragCoord - vec2(0, 1))/iResolution.xy,\n    uvh = (fragCoord - vec2(1, 1))/iResolution.xy;\n    \n    float kernel_hor[9] = float[9](\n        1., 0., -1.,\n        1., 0., -1.,\n        1., 0., -1.\n    );\n    \n    float kernel_ver[9] = float[9](\n        1./9., 1./9., 1./9.,\n        1./9., 1./9., 1./9.,\n        1./9., 1./9., 1./9.\n    );\n    \n    vec3 orpix = texture(iChannel0, uv).rgb,\n    a = texture(iChannel0, uva).rgb,\n    b = texture(iChannel0, uvb).rgb,\n    c = texture(iChannel0, uvc).rgb,\n    d = texture(iChannel0, uvd).rgb,\n    e = texture(iChannel0, uve).rgb,\n    f = texture(iChannel0, uvf).rgb,\n    g = texture(iChannel0, uvg).rgb,\n    h = texture(iChannel0, uvh).rgb;\n    \n    vec3 finalpix = orpix*kernel_hor[4] +\n                    a*kernel_hor[5] +\n                    b*kernel_hor[8] +\n                    c*kernel_hor[7] +\n                    d*kernel_hor[6] +\n                    e*kernel_hor[3] +\n                    f*kernel_hor[0] +\n                    g*kernel_hor[1] +\n                    h*kernel_hor[2];\n                    \n    float lum = (finalpix.x+finalpix.y+finalpix.z)/3.;\n                    \n    if(lum > 0.1)\n    {\n        lum = 1.;\n    }\n    else\n    {\n        lum = .0;\n    }\n    \n    fragColor = vec4(orpix+vec3(lum),1.0);\n}","name":"Image","description":"","type":"image"}]}