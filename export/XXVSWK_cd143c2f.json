{"ver":"0.1","info":{"id":"XXVSWK","date":"1721750366","viewed":27,"name":"Rooster'sHW6","username":"RoosterWho","description":"julia","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAXITER 50\n\nvec2 complexExp(float a) {\n    return vec2(cos(a), sin(a));\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 z = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 c = vec2(-0.3, 0.8 * cos(iTime * 0.8));\n    c = vec2(complexExp(3.14 * (1.0 + sin(0.2 * iTime))));\n\n    int iter = 0;\n    while (length(z) < 2.0 && iter < MAXITER) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y);\n        z += c;\n        iter++;\n    }\n\n    float color = float(iter) / float(MAXITER);\n    color = (float(iter) + 1.0 - log(log(length(z))) / log(2.0)) / (float(MAXITER) + 1.0 - log(log(length(z))) / log(2.0));\n    color = pow(color, 0.2); // Gamma correction\n\n    // Map the color to a hue\n    float hue = 0.5 + 0.5 * cos(iTime + 6.28 * color);\n    vec3 hsv = vec3(hue, 1.0, color);\n    vec3 rgb = hsv2rgb(hsv);\n\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}