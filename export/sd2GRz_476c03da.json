{"ver":"0.1","info":{"id":"sd2GRz","date":"1616875279","viewed":82,"name":"3D Sphere Orbits","username":"warptarium","description":"This shader orbits two 3D sphere points around each other using sin/cos circular motion. They do not appear 3D, but in fact are. There is just no shading on them :P","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","shader","practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RED vec3(1.0, 0.0, 0.0)\n#define GREEN vec3(0.0, 1.0, 0.0)\n#define BLUE vec3(0.0, 0.0, 1.0)\n\n//distance from a point to a ray.\nfloat DistLine(vec3 ro, vec3 rd, vec3 p) \n{\n    return length(cross(p - ro, rd)) / length(rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //center uv\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //create look ray\n    vec3 ro = vec3(0.0, 0.0, -3);\n    vec3 rd = vec3(uv.x, uv.y, 0.0) - ro;\n    \n    //create the two circles and rotate them\n    vec3 p = vec3(sin(iTime) / 3., 0.0, cos(iTime)); \n    vec3 p1 = vec3(-sin(iTime) / 3., cos(iTime) / 3., 0.); \n    \n    //calculate the pixels with smoothstep\n    float d = DistLine(ro, rd, p);\n    vec3 dCol = vec3(smoothstep(0.09, 0.08, d)) * RED;\n    \n    float d2 = DistLine(ro, rd, p1);\n    vec3 d2Col = vec3(smoothstep(0.09, 0.08, d2)) * GREEN;\n\n    // Output to screen\n    fragColor = vec4(dCol + d2Col, 1.);\n}","name":"Image","description":"","type":"image"}]}