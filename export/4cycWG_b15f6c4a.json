{"ver":"0.1","info":{"id":"4cycWG","date":"1732289458","viewed":60,"name":"Game of 935.9082249873","username":"Nevil844","description":"Game of Life Simulation of patterns by students of Ahmedabad University.","likes":0,"published":3,"flags":48,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"McKcRd","parentname":"Game of Life 9209.82359523"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From https://github.com/hughsk/glsl-hsv2rgb\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 texel = vec4(texture(iChannel0, fragCoord / iResolution.xy));\n    fragColor = vec4(hsv2rgb(vec3(texel.g, texel.r * vec2(0.2, 0.8) + vec2(0.8, 0.2))), 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 935.9082249873;\n\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\nfloat hash13(vec3 p3) {\n    p3 = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 pushElement(in vec3 v, float n) {\n    v.yz = v.xy;\n    v.x = n;\n    return v;\n}\n\nfloat getAtIdx(vec3 v, int i) {\n    if (i == 0) return v.x;\n    else if (i == 1) return v.y;\n    else if (i == 2) return v.z;\n    else return 0.;\n}\n\nfloat keyPressed(int keyCode) {\n    return texture(iChannel1, vec2((float(keyCode) + 0.5) / 256., .5 / 3.)).r;   \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 0 || bool(keyPressed(82))) {\n        float hue = hash13(vec3(fragCoord, float(iFrame - 11)));\n        // Generate a random threshold value for each pixel\n        float randomThreshold = fract(sin(dot(fragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);  // Random value between 0 and 1\n        float alive = step(hash13(vec3(fragCoord, float(iFrame))), randomThreshold);\n\n        fragColor = vec4(alive, hue, 1.0, 1.0);\n    } else {\n        int n = 0;\n        vec3 hues = vec3(0);\n        for (float i = 0.; i < 8.; i += 1.) {\n            vec2 sampleOffset = vec2(cos(i * pi / 4.), sin(i * pi / 4.));\n            sampleOffset *= 2.;\n            sampleOffset = clamp(sampleOffset, -1., 1.);\n            vec4 texel = texture(iChannel0, fract((fragCoord + sampleOffset) / iResolution.xy));\n            if (texel.r > 0.5) {\n                hues = pushElement(hues, texel.g);\n                n += 1;\n            }\n        }\n        \n        float probability = fract(sin(dot(fragCoord.xy + vec2(iFrame), vec2(45.123, 67.456))) * 6789.123); // Generate random probability\n        \n        vec4 current = texture(iChannel0, fragCoord / iResolution.xy);\n        if (current.r < 0.5 && n == 3) {\n            current.r = step(probability, 0.7);\n            current.g = getAtIdx(hues, int(floor(mod(hash13(vec3(fragCoord, iTime) * 3.), 3.))));\n        } else if (n < 2 || n > 3) current.r = step(probability, 0.7);\n        fragColor = current;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}