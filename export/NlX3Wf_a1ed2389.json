{"ver":"0.1","info":{"id":"NlX3Wf","date":"1622955906","viewed":59,"name":"Perlin Practice (False Perlin)","username":"IceSelkie","description":"Perlin noise generator written in a few minutes, just to make sure I have the algorithm down before I try to implement it in another language.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\n// Not the best way to do random, but it should be good enough here.\nfloat random(vec3 st) {\n    return fract(sin(dot(st, vec3(53.81125,6.42648,24.40232)))*73424.64639);\n}\n\n// Linear interpolation\nfloat mid_lin(vec4 corners, vec2 location) {\n    vec2 mid = corners.xz*location.x+corners.yw*(1.-location.x);\n    return mid.x*location.y+mid.y*(1.-location.y);\n}\n\n// Cosine interpolation\nfloat mid_sin(vec4 corners, vec2 location) {\n    return mid_lin(corners, (cos(PI*(1.-location))+1.)/2.);\n}\n\n// Interpolate to find midpoint value.\nfloat midlicate(vec4 corners, vec2 location) {\n    return mid_sin(corners, location);\n}\n\nvec4 falsePerlin(vec2 fragCoord) {\n    int depth = 12;\n    float scaleCoeff = 5.;\n    vec2 shaderSize = vec2(1600./350., 900./350.)/scaleCoeff;\n    vec2 offset = vec2(iTime*0.75,iTime*0.5)/scaleCoeff;\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*shaderSize + offset;\n    \n    float total = 0.;\n    float power = 0.5;\n    for (int level=0; level<depth; level++) {\n        vec2 uvf = fract(uv/power);\n        vec3 uvi = vec3(floor(uv/power), level);\n        vec4 corners = vec4(random(uvi+vec3(1,1,0)),\n                            random(uvi+vec3(0,1,0)),\n                            random(uvi+vec3(1,0,0)),\n                            random(uvi+vec3(0,0,0)));\n        \n        total += power*midlicate(corners,uvf);\n        power /= 2.;\n    }\n    \n    float totalWeight = 1.-1./float(2<<depth);\n    total /= totalWeight;\n    \n    return vec4(vec3(1.-total),1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = falsePerlin(fragCoord);\n    //fragColor = perlin(fragCoord);\n}","name":"Image","description":"","type":"image"}]}