{"ver":"0.1","info":{"id":"l3X3WB","date":"1707874569","viewed":67,"name":"Spider Web - FixedBack - 3D","username":"davidmachadosf","description":"CONTROLS:\n  ARROWS : move image\n  * /    : zoom in/out  \n  + -    : increase/decrease zoom velocity\n  HOME:  : reset initial status\n  .      : cicles pallete\n\nThere are 15 different functions to generate images.\nPgUp and PgDown cicles different functions ","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"lXf3DS","parentname":"Spider Web - Parameters - 3D"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float n = 10.;\nfloat pi = 3.141592;\nfloat thetax = 0.;\nfloat thetay = .5*3.141592;\n\n\n\n\nfloat processFunction(int func, float x, float y){\n\n    switch(func){\n        case  0: return log(abs(x)) + log(abs(y));\n        case  1: return log(abs(x)) +         y  ;\n        case  2: return         x   + log(abs(y));\n        case  3: return         x   +         y  ;\n        case  4: return         x   +       y*y  ;\n        case  5: return       x*x   +       y*y  ;\n        case  6: return       x*x   +     y*y*y  ;\n        case  7: return     x*x*x   +       y*y  ;\n        case  8: return     x*x*x   +     y*y*y  ;\n        case  9: return   x*x*x*x   +   y*y*y*y  ;\n        case 10: return x*x*x*x*x   + y*y*y*y*y  ;\n        case 11: return      1./x   +      1./y  ;\n        case 12: return  1./(x*x)   +  1./(y*y)  ;\n        case 13: return 1./(x*x*x)  + 1./(y*y*y) ;\n        case 14: return  sin (log(abs(x*y))) + \n                         cos (log(abs(y/x)))     ;\n                         \n        case 15: return  sin (log(abs(x/y))) + \n                         cos (log(abs(y*(y+x))))     ;\n    }\n\n}\n\nfloat processDeep(int deep, int func, float x, float y){\n\n   switch(deep){ \n       //case 0: return cos(pow(y*y+x*x,.5));\n       case 0: return pow(y*y+x*x,.5);\n       case 1: return cos(x+y);\n       case 2: return abs(x*x);\n       case 3: return abs(y*y);\n       case 4: return 100.*processFunction(func,x,y);\n       //case 5: return 50.*processFunction(func,x,y) + 50.*processFunction(func+1>=16?0:func+1,x,y);\n       case 5: return 100.*processFunction(func,cos(x*10.),y*y);\n       case 6: return(x+y);\n       case 7: return(y*x);\n       case 8: return cos(x*y);\n       case 9: return sin(x*y);\n       case 10: return (x*y)/100.;\n   }\n    //return pow(y*y+x*x,.5);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    bool esq = int(fragCoord.y)%2==0;\n     \n    float[10] colors;\n    //int ini=2;\n    \n    //\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    // get parameters\n    float xi   = get(paramXi );\n    float xf   = get(paramXf );\n    float yi   = get(paramYi );\n    float yf   = get(paramYf );\n    float vel  = get(paramVel);\n    \n    float paralax  = get(paramParalax);\n    \n    int func = int(get(paramFunc));\n    bool cicle  = get(paramCicle)<0.;\n    int off = int(get(paramOff));\n    \n    int deep = int(get(paramDeep));\n\n    float x = (xi+(xf-xi)*uv.x);\n    float y = (yi+(yf-yi)*uv.y);\n    \n    x += paralax*processDeep(deep,func,x,y)*(esq?+1.:-1.);\n    \n    \n    \n    \n    float d, newx, newy;\n    \n          \n    for(int i=0;i<10;i++){\n    \n        //float xStereo = x + paralax*(esq?-1.:+1.);\n\n        d = processFunction(func,x,y);\n\n        if(cicle){\n           newx=sin(y/d+x/sqrt(n)+thetax);\n           newy=sin(x/d+y/sqrt(n)+thetay);\n        }\n        else {\n           newx=sin(y/d+x/sqrt(n)+thetax-2.*iTime);\n           newy=sin(x/d+y/sqrt(n)+thetay+.5*iTime);\n\t\t}\t\t\n\t\t\n        // bellow some different recurrence steps if anyone wants to test ;-)\n        \n        //newx=sin(y/d+x/d+thetax);\n        //newy=sin(x/d+y/d+thetay);\n\t\t\t\t\n\t\t//newx=sin(y/sqrt(n)+x/sqrt(n)+thetax);\n        //newy=sin(x/sqrt(n)+y/sqrt(n)+thetay);\n\t\t\t\t\n\t\t//newx=sin(log(y)/d+log(x)/sqrt(n)+thetax);\n        //newy=sin(log(x)/d+log(y)/sqrt(n)+thetay);\n\t\t\t\t\n        x = newx;\n\t\ty = newy;\n        \n        colors[i]=abs(280.-pow(x+y,2.)*128.);\n      }\n\t\t\t\n\n    // Output to screen\n    //vec3 col = vec3();\n    \n    fragColor = vec4(colors[off]/256.,colors[off+1]/256.,colors[off+2]/256.,1.0);\n   \n    \n    // uncomment to generate RED-BLUE anaglyphs,\n    // to visualize on non interlaced-3D devices\n    /*if(esq){\n        fragColor *= vec4(1.,0.,0.,0.);\n    }\n    else{\n        fragColor *= vec4(0.,1.,1.,0.);\n    }*/\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// parameters\nconst ivec2 paramXi = ivec2(0,0);\nconst ivec2 paramXf = ivec2(0,1);\nconst ivec2 paramYi = ivec2(0,2);\nconst ivec2 paramYf = ivec2(0,3);\n\nconst ivec2 paramVel   = ivec2(1,0);\nconst ivec2 paramFunc  = ivec2(2,0);\nconst ivec2 paramCicle = ivec2(3,0);\nconst ivec2 paramOff   = ivec2(4,0);\n\nconst ivec2 paramParalax   = ivec2(5,0);\nconst ivec2 paramDeep  = ivec2(6,0);\n\n#define get(var) texelFetch(iChannel0, var, 0).x\n#define set(var, value, fragColor, fragCoord) fragColor=(ivec2(fragCoord)==var?vec4(value,0.,0.,1.):fragColor)\n\n\n\n// change position\nconst int keyNorth = 38;\nconst int keySouth = 40;\nconst int keyEast  = 37;\nconst int keyWest  = 39;\n\n\n// change scale\nconst int keyZoomOut = 111; // /\nconst int keyZoomIn  = 106; // *\n\n\n// change scale velocity\nconst int keySlow = 109; // -\nconst int keyFast = 107; // +\n\n// change image functions\nconst int keyPrev = 33; // PgUp\nconst int keyNext = 34; // PgDown\n\n// reset to initial parameters\nconst int keyReset = 36; // Home\n\n\n// cicle palete over time\nconst int keyCicle = 110; // .\n\n// change deep map\nconst int keyDeepDec = 45; // Insert\nconst int keyDeepInc = 46; // Delete\n\n\n\n#define keyToggle(ascii)  ( texelFetch(iChannel1,ivec2(ascii,2),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel1,ivec2(ascii,1),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\n#define shift             ( texelFetch(iChannel1,ivec2(16,0),0).x  > 0.)\n#define ctrl              ( texelFetch(iChannel1,ivec2(17,0),0).x  > 0.)\n#define alt               ( texelFetch(iChannel1,ivec2(18,0),0).x  > 0.)\n#define modifier          ( int(shift) +2*int(ctrl) + 4*int(alt) )\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float iniXi    = -.1;\nfloat iniXf    =  .1;\nfloat iniYi    = -.1;\nfloat iniYf    =  .1;\nfloat iniVel   = .01;\nfloat iniFunc  =  5.;\nfloat iniCicle = -1.;\nfloat iniOff   =  2.;\n\nfloat iniParalax  =  .005;\nfloat iniDeep  =  5.;\n\n\n\n\nvoid initParameters(inout vec4 fragColor, in vec2 fragCoord){\n    set(paramXi,    iniXi,    fragColor, fragCoord);   \n    set(paramXf,    iniXf,    fragColor, fragCoord);   \n    set(paramYi,    iniYi,    fragColor, fragCoord);   \n    set(paramYf,    iniYf,    fragColor, fragCoord);   \n    set(paramVel,   iniVel,   fragColor, fragCoord);   \n    set(paramFunc,  iniFunc,  fragColor, fragCoord);   \n    set(paramCicle, iniCicle, fragColor, fragCoord);  \n    set(paramOff,   iniOff,   fragColor, fragCoord);  \n    \n    set(paramParalax,   iniParalax,   fragColor, fragCoord);  \n    set(paramDeep,   iniDeep,   fragColor, fragCoord);  \n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    if (iFrame==0) {\n        initParameters(fragColor, fragCoord);    \n    }\n\n    else { \n    \n        float xi    = get(paramXi);   \n        float xf    = get(paramXf);   \n        float yi    = get(paramYi);   \n        float yf    = get(paramYf);   \n        float vel   = get(paramVel);   \n        float func  = get(paramFunc);  \n        float cicle = get(paramCicle);\n        float off   = get(paramOff); \n        \n        float paralax = get(paramParalax); \n        float deep = get(paramDeep); \n        \n        \n        float dx = xf-xi;\n        float dy = yf-yi;\n        \n        if(keyDown(keyNorth)){\n            yi+=dy/100.;\n            yf+=dy/100.;\n        }\n        if(keyDown(keySouth)){\n            yi-=dy/100.;\n            yf-=dy/100.;\n        }\n        if(keyDown(keyEast)){\n            xi-=dx/100.;\n            xf-=dx/100.;\n        }\n        if(keyDown(keyWest)){\n            xi+=dx/100.;\n            xf+=dx/100.;\n        }\n        \n        if(keyDown(keyZoomOut)){\n            xi-=dx*vel;\n            xf+=dx*vel;\n            if(!shift){\n               yi-=dy*vel;\n               yf+=dy*vel;\n            }\n        }        \n        if(keyDown(keyZoomIn)){\n            xi+=dx*vel;\n            xf-=dx*vel;\n            if(!shift){\n               yi+=dy*vel;\n               yf-=dy*vel;\n            }\n        }\n        \n        if(keyClick(keySlow)){\n            if(!shift){\n                vel/=2.;\n            }\n        }        \n        if(keyClick(keyFast)){\n            if(!shift){\n                vel*=2.;\n            }\n        }\n        \n        if(keyDown(keySlow)){\n            if(shift){\n                paralax /= 1.03;\n            }\n        }        \n        if(keyDown(keyFast)){\n            if(shift){\n               paralax *= 1.03;\n            }\n        }\n        \n        if(keyClick(keyReset)){\n            \n            xi    = iniXi;\n            xf    = iniXf;\n            yi    = iniYi;\n            yf    = iniYf;\n            vel   = iniVel;\n            func  = iniFunc;\n            cicle = iniCicle;\n        }\n        \n        if(keyClick(keyPrev)){\n            if(!shift){\n                func = func-1.;\n                if(func<0.) func = 15.;\n            }\n            else{\n                off = off-1.;\n                if(off<0.) off = 7.;            \n            }\n        }        \n        if(keyClick(keyNext)){\n            if(!shift){ \n                func = func+1.;\n                if(func>=16.) func = 0.;\n            }\n            else{\n                off = off+1.;\n                if(off>=8.) off = 0.;\n            }\n        }\n        \n        if(keyClick(keyCicle)){\n            cicle*=-1.;\n        }\n        \n        \n        if(keyClick(keyDeepDec)){\n            deep = deep-1.;\n            if(deep<0.) deep = 10.;  \n        }        \n        if(keyClick(keyDeepInc)){\n            deep = deep+1.;\n            if(deep>=11.) deep = 0.;  \n        }\n    \n    \n        set(paramXi,    xi,    fragColor, fragCoord);   \n        set(paramXf,    xf,    fragColor, fragCoord);   \n        set(paramYi,    yi,    fragColor, fragCoord);   \n        set(paramYf,    yf,    fragColor, fragCoord);   \n        set(paramVel,   vel,   fragColor, fragCoord);   \n        set(paramFunc,  func,  fragColor, fragCoord);   \n        set(paramCicle, cicle, fragColor, fragCoord); \n        set(paramOff,   off,   fragColor, fragCoord); \n        \n        set(paramParalax,  paralax,   fragColor, fragCoord); \n        set(paramDeep,     deep,   fragColor, fragCoord); \n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}