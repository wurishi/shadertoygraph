{"ver":"0.1","info":{"id":"3lGGDw","date":"1579035804","viewed":265,"name":"Remove Color","username":"Clocktown","description":"Removes a color from the image, replacing it with gray.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["filter","color","rgb","remove"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// You can try it without SATURATE too\n#define SATURATE\n\nvoid remove_color(inout vec3 from, vec3 col) {\n    #ifdef SATURATE\n    \tfloat col_max = max(max(col.r, col.g), col.b);\n    \tcol = col / col_max;\n    #endif\n\tfloat r = col.r == 0.f ? 1.f : min(from.r / col.r, 1.f);\n\tfloat g = col.g == 0.f ? 1.f : min(from.g / col.g, 1.f);\n\tfloat b = col.b == 0.f ? 1.f : min(from.b / col.b, 1.f);\n    float col_part = min(min(r, g), b);\n\n    vec3 anti_col = max(from - col_part * col, vec3(0));\n\t\n\t//vec3 anti_col = from - col_part * col;\n\tfloat anti_col_part = dot(anti_col, vec3(1));\n    #ifdef SATURATE\n    \tanti_col_part = max(max(anti_col.r, anti_col.g), anti_col.b);\n    #endif\n\tcol_part = max(col_part - anti_col_part, 0.f);\n    \n    // Remove the color and add it back in as gray\n\tfrom = from - col_part * col + col_part * vec3(dot(col, vec3(0.3, 0.6, 0.1)));\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    // HSV with varying hue and brightness\n    //col = hsv2rgb(vec3(uv.x, 1, uv.y));\n    // HSV with varying hue and saturation\n    //col = hsv2rgb(vec3(uv.xy, 1));\n    // HSV with varying saturation and brightness\n    //float hue = 0.3;\n    //col = hsv2rgb(vec3(hue, uv.yx));\n    \n    // Time varying pixel color\n    // col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Video input\n    col = pow(texture(iChannel0, uv).rgb, vec3(2.2));\n    remove_color(col, vec3(0,1,0));\n        remove_color(col, vec3(1,1,0));\n\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1./2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}