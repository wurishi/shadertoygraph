{"ver":"0.1","info":{"id":"4cSyRK","date":"1722560757","viewed":60,"name":"parabola circle connector","username":"jt","description":"Connect a circle and a parabola C1-smootly (continuous position and derivative).\nGrey: parabola and circle.\nBlack: part parabola, part circle.\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["circle","parabola","connector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4cSyRK parabola circle connector, 2024 by jt\n\n// Connect a circle and a parabola C1-smootly\n// (continuous position and derivative).\n// Grey: parabola and circle.\n// Black: part parabola, part circle.\n\n// other connectors:\n// https://www.shadertoy.com/view/McBczy hyperboloid paraboloid connector\n// https://www.shadertoy.com/view/XfjcRy hyperbola circle connector\n// https://www.shadertoy.com/view/dsf3RB circular connector\n\n\n// tags: parabola, circle, connector\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define draw(q) o *= smoothstep(0.0, 0.01, abs(q))\n#define draw(q) o *= smoothstep(0.0, length(fwidth(I)), abs(q)) /* is fwidth supported on all devices? */\n\nfloat parabola(float s, float x)\n{\n    return s*x*x;\n}\n\nfloat parabola_derivative(float s, float x)\n{\n    return 2.0*s*x;\n}\n\nfloat draw_parabola(float s, vec2 p)\n{\n    if(p.y < 0.0) return 1.0;\n    return (parabola(s, p.x)-p.y)/length(vec2(parabola_derivative(s, p.x),-1.0)); // divide by length of the gradient to get a constant width line\n}\n\nfloat central_parabola_distance(float x, float s) // https://www.shadertoy.com/view/4cSyRK parabola circle connector (jt)\n{\n    float t = max((x - 0.5/s),0.0);\n    return length(vec2(sqrt(t/s),x-t));\n}\n\nvec2 circle_parabola_tangent_point(float d, float r, float s) // https://www.shadertoy.com/view/4cSyRK parabola circle connector (jt)\n{\n    //float q = sqrt(4.0*r*r*s*s-4.0*d*s+1.0); // XXX flickers - sqrt(negative) ? XXX\n    float q = sqrt(max(4.0*r*r*s*s-4.0*d*s+1.0,0.0)); // force non-zero\n\n    // wxMaxima solve([y=s*x^2,x^2+(y-d)^2=r^2],[x,y])\n    //vec2 p = vec2(-sqrt(-q+2.0*d*s-1.0)/(sqrt(2.0)*s),(-q+2.0*d*s-1.0)/(2.0*s));\n    //vec2 p = vec2(+sqrt(-q+2.0*d*s-1.0)/(sqrt(2.0)*s),(-q+2.0*d*s-1.0)/(2.0*s));\n    //vec2 p = vec2(-sqrt(q+2.0*d*s-1.0)/(sqrt(2.0)*s),(+q+2.0*d*s-1.0)/(2.0*s));\n    float Q = max(q+2.0*d*s-1.0,0.0); // force non-zero\n    //float Q = abs(q+2.0*d*s-1.0); // force non-zero\n    vec2 p = vec2(-sqrt(Q)/(sqrt(2.0)*s),Q/(2.0*s));\n\n    return p;\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nvoid mainImage(out vec4 o, in vec2 I) // [-1,+1]\n{\n    bool demo = length(iMouse.xy) < 10.0;\n    vec2 c = vec2(-0.5,-1.5);\n    vec2 R = iResolution.xy;\n    I = 2.0*(I+I-R)/R.y - c;\n    vec2 m = demo ? vec2(0,1) : 2.0*(2.0*iMouse.xy-R)/R.y - c;\n    float d = m.y;\n\n    o = vec4(1);\n\n    {\n        float s = mix(0.2, 3.0, 0.5+0.5*cos(iTime*tau/15.0));\n        float r = central_parabola_distance(d, s);\n\n        {\n            draw(draw_parabola(s, I));\n\n            draw(length(I-vec2(0.0,d))-r);\n        }\n\n        o = 0.5 + 0.5 * o;\n\n        {\n            vec2 p = circle_parabola_tangent_point(d, r, s);\n\n            draw(length(I-vec2(+p.x, p.y))-0.02);\n            draw(length(I-vec2(-p.x, p.y))-0.02);\n\n            if(I.y < p.y) draw(draw_parabola(s, I));\n            else draw(length(I-vec2(0.0,d))-r);\n        }\n\n    }\n\n    o = sqrt(o); // approx gamma\n}\n","name":"Image","description":"","type":"image"}]}