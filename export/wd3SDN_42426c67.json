{"ver":"0.1","info":{"id":"wd3SDN","date":"1572058316","viewed":148,"name":"Dragon Ball 3 Stars","username":"santiagoap","description":"First shader in shaderlab!. A dragon ball 3 stars ball shader!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dragonball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 CreateCircle(vec2 uv, float radius, vec2 offset, float blur, vec3 color, bool add, inout vec3 result)\n{\n    float myDistance = length(uv + offset); //Crear un offset desde el origen del circulo\n       \n    float resultSmoothed = smoothstep(radius, radius - blur, myDistance); //AA\n    vec3 newCircle = resultSmoothed * color; //directamente conseguir el circulo con el color\n    \n    if(add) result += newCircle; //si esta en modo add entonces se le suma newCircle a result\n    else result -= newCircle; //si esta en modo resta entonces se le resta newCircle a result\n    return newCircle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // 0 <> 1\n    \n    float brightnessMultiplier = 0.8; //multiplicador para el brillo del final\n    \n    uv -= 0.5f; //restarle la mitad de la pantalla al UV para que este en el medio el circulo, -0.5 <> 0.5\n    uv.x *= iResolution.x/iResolution.y; //aspect ratio para la pantalla siempre igual\n    \n    vec3 result; //resultado que va a ir cambiando con todos los circulos que hagamos por el out vec3 result\n    \n    float generalBlur = 0.004; //AA (antialiasing)\n    //Creacion de esfera de dragon con suma y resta de esferas.\n    vec3 circle1 = CreateCircle(uv, .4, vec2(0.), 0.07, vec3(1.,0.,0.), true, result);\n    vec3 circle2 = CreateCircle(uv, .35, vec2(0.), generalBlur, vec3(1.,0.3,0.), true, result);\n    vec3 circle3 = CreateCircle(uv, .09, vec2(0.13,0.13), generalBlur, vec3(1.,0.3,0.), false, result);\n\tvec3 circle4 = CreateCircle(uv, .09, vec2(-0.13,0.13), generalBlur, vec3(1.,0.3,0.), false, result);\n    vec3 circle5 = CreateCircle(uv, .09, vec2(0,-0.13), generalBlur, vec3(1.,0.3,0.), false, result);\n        \n    fragColor = vec4(result * brightnessMultiplier,1.); //devolver el color final con el result\n}\n","name":"Image","description":"","type":"image"}]}