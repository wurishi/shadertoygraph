{"ver":"0.1","info":{"id":"4d3XD8","date":"1458914922","viewed":325,"name":"rainbow snakes","username":"hclarke","description":"snakes on a real projective plane","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["snakes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat3 YUV_to_RGB = mat3(\n         1.0,1.0,1.0,\n        0.0,-0.39465,2.03211,\n        1.13983,-0.58060,0.0);\n\nvec4 hash(vec4 x) {\n  const vec4 m = vec4(.1072947, .1068421, .10281,.1092345)*1000.;\n    const vec3 one = vec3(1.);\n  vec4 r = fract(x*m);\n  r += dot(r,r.yzwx+19.19);\n    \n  return fract(vec4(\n      dot(r.yzw,one)*r.x,\n      dot(r.xzw,one)*r.y,\n      dot(r.zyw,one)*r.z,\n      dot(r.xyz,one)*r.w));\n}\n\nvec3 YUV_spiral(float v, float r, float l, float L, float h, float H) {\n    float hue = mix(h,H,v);\n    float lum = mix(l,L,v);\n    float amp = r*lum*(1.0-lum);\n \tfloat a = 3.14159*2.0*(hue);\n    vec3 c = vec3(lum,sin(a),cos(a));\n   \tc.yz *= amp;\n    return YUV_to_RGB*c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 snake = texture(iChannel0, uv);\n    vec4 r = hash(snake.wwww);\n    vec3 c = YUV_spiral(snake.x/snake.z, 0.5, 0.0, 1.0, r.x, r.x+0.5);\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 hash(vec4 x) {\n  const vec4 m = vec4(.1072947, .1068421, .10281,.1092345)*1000.;\n    const vec3 one = vec3(1.);\n  vec4 r = fract(x*m);\n  r += dot(r,r.yzwx+19.19);\n    \n  return fract(vec4(\n      dot(r.yzw,one)*r.x,\n      dot(r.xzw,one)*r.y,\n      dot(r.zyw,one)*r.z,\n      dot(r.xyz,one)*r.w));\n}\n\nvec4 get_sample(vec2 fragCoord, vec2 offset) {\n \tvec2 uv = (fragCoord + offset)/iResolution.xy;\n    //real projective plane\n    if(uv.x < 0.0 || uv.x > 1.0) {\n    \tuv.x = fract(uv.x);\n        uv.y = 1.0-uv.y;\n    }\n    else if(uv.y < 0.0 || uv.y > 1.0) {\n     \tuv.y = fract(uv.y);\n        uv.x = 1.0-uv.x;\n    }\n    return texture(iChannel0, uv);\n}\n\nvec4 getSnake(vec2 fragCoord, vec4 state, vec4 sr, vec4 sl, vec4 su, vec4 sd) {\n    float s = state.x - iTimeDelta;\n    \n    vec4 ns = state;\n    ns.y = 0.0;\n    ns.x -= iTimeDelta;\n    if(ns.x < 0.0) ns.x = 0.0;\n    \n    if(sr.y == 1.0) {\n        if(ns.x == 0.0) ns = sr;\n        else ns.y = 0.0;\n    }\n    if(sl.y == 3.0) {\n        if(ns.x == 0.0) ns = sl;\n        else ns.y = 0.0;\n    }\n    if(su.y == 2.0) {\n        if(ns.x == 0.0) ns = su;\n        else ns.y = 0.0;\n    }\n    if(sd.y == 4.0) {\n        if(ns.x == 0.0) ns = sd;\n        else ns.y = 0.0;\n    }\n\n    if(ns.y != 0.0) {\n        vec4 r = hash(vec4(fragCoord.xyx, iTime));\n        if(r.x < 0.01) {\n            ns.y -= 1.0;\n            if(ns.y == 0.0) ns.y = 4.0;\n        }\n        else if(r.x < 0.02) {\n            ns.y += 1.0;\n            if(ns.y > 4.0) ns.y = 1.0;\n        }\n    }\n\n    if(ns.x == 0.0) {\n        float t = iTime;\n        float tv = floor(t);\n        float tu = t-tv;\n        vec4 r = hash(vec4(t));\n        if(r.x < 1.0) {\n            vec2 rp = floor(r.yz * iResolution.xy);\n            if(floor(rp) == floor(fragCoord)) {\n                vec4 r2 = hash(vec4(rp.xy, iTime, 1.0));\n                float d = floor(r2.x*4.0)+1.0;\n                float len = mix(0.5, 5.0, r2.y);\n                ns = vec4(len, d, len, r.w);\n            }\n        }\n    }\n\n    return ns;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //time, dir, ?, ?\n    //dir = 0,n,e,s,w\n    vec2 o = vec2(1,0);\n    vec4 c = get_sample(fragCoord.xy, o.yy);\n    vec4 last = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    vec4 u = get_sample(fragCoord.xy, o.yx);\n    vec4 r = get_sample(fragCoord.xy, o.xy);\n    vec4 d = get_sample(fragCoord.xy, -o.yx);\n    vec4 l = get_sample(fragCoord.xy, -o.xy);\n    \n    //check for incoming snakes. two+ means explode\n    vec4 snake = getSnake(fragCoord.xy, c, r,l,u,d);\n    fragColor =  snake;\n    \n}","name":"Buf A","description":"","type":"buffer"}]}