{"ver":"0.1","info":{"id":"sdt3R2","date":"1630261281","viewed":132,"name":"Complex Function Plotter","username":"Escher","description":"Plots a general complex functions","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["plotterplotcomplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi acos(-1.)\n#define ss(a,b,c) smoothstep(a-b,a+b,c)\n#define angle(z) (atan(z.y/z.x) + pi * step(0.0, z.x))\n#define transition_speed 100.0\n#define st ((atan(transition_speed*cos(iTime/10.0))/atan(transition_speed)) * 0.5 + 0.5)\n#define res iResolution\n#define dd .02\n\n#define zoom 5.\n\nvec2 frame(vec2 v){\n    v=2.*v.xy/res.xy-1.;\n    v.x*=res.x/res.y;return v;\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 i = vec2(0.0,1.0);\n\nvec2 header(vec2 z) {\n    z.y -= z.x;\n    return z;\n}\n\nvec2 footer(vec2 r) {\n    r.y += r.x;\n    return r;\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n    vec2 r = vec2(\n        z.x*w.x - z.y*w.y, \n        z.x*w.y + z.y*w.x\n    );\n    return r;\n}\n\nvec2 pol(vec2 z) {\n    float size = sign(z.x) * length(z);\n    float angle = angle(z);\n    return vec2(length(z), angle);\n}\n\nvec2 cart(vec2 pol) {\n    return pol.x * vec2(cos(pol.y), sin(pol.y));\n}\n\nvec2 cpow(vec2 z, vec2 w) {\n    vec2 p1 = pol(z);\n    vec2 p = vec2(\n        pow(p1.x, w.x) * exp(-w.y*p1.y), \n        p1.y * w.x + log(p1.x) * w.y);\n    vec2 r = cart(p);\n    return r;\n}\n\nvec2 cpow(vec2 z, float w) {\n    return cpow(z, vec2(w,0.0));\n}\n\nvec2 cpow(vec2 z, int w) {\n    return cpow(z, float(w));\n}\n\nvec2 cmix(vec2 z, vec2 w, float t) {\n    //z = cart(z);\n    //w = cart(w);\n\n    vec2 r = mix(z,w,t);\n    //r = pol(r);\n    return r;\n}\n\nvec2 cln(vec2 z) {\n    vec2 p = pol(z);\n    vec2 r = vec2(log(p.x), p.y);\n    return r;\n}\n\nvec2 cexp(vec2 z) {\n    vec2 r = cart(vec2(exp(z.x), z.y));\n    return r;\n}\n\nfloat reduce(float x) {\n    return 1.0 - pow(1.01, -x);\n}\n\nvec3 hsv_from_complex(vec2 p) {\n    float size = length(p);\n    float p_grid = length(fract(p));\n    float radial = fract(log2(length(p)));\n    float angle = angle(p)/pi;\n    float angle_grid = 0.0 * fract(8.0*angle*floor(size));\n    float hue = 0.91 + 0.5 * angle;\n    float saturation = 0.4 + 0.2 * reduce(length(p));\n    float value = 0.4 + 0.1 * p_grid + 0.1 * angle_grid + 0.1 * radial;\n    vec3 hsv = vec3(hue, saturation, value);\n    return hsv;\n}\n\nvec4 projection(vec2 p) {\n    float othogonal = length(fract(p));\n    vec3 hsv = hsv_from_complex(p);\n    float transparency=0.2*othogonal;\n    return vec4(hsv2rgb(hsv), transparency);\n}\n\nvec2 mapping(vec2 z) {\n    vec2 r = cexp(cln(z) + cln(z));\n    return r; //z + cpow(z,5) + vec2(1.0,0.0);\n}\n\nvoid mainImage(out vec4 r,in vec2 i){\n    i-=iMouse.xy - res.xy * .5;\n    vec2 z=frame(i)*zoom;\n    float orthogonal = length(fract(z));\n    vec2 p = mapping(z);\n    p = cmix(z, p, st);\n    vec3 p_hsv = hsv_from_complex(p);\n    vec3 z_hsv = hsv_from_complex(z);\n    vec3 hsv = p_hsv;\n    hsv.x = p_hsv.x + 0.005 * fract(z_hsv.x * pow(2.0, 2.0 + floor(length(z))));\n    hsv.z = pow(2.0, mix(log2(p_hsv.z), log2(z_hsv.z), 0.4));\n\n    r = vec4(hsv2rgb(hsv), 1.0);\n}","name":"Image","description":"","type":"image"}]}