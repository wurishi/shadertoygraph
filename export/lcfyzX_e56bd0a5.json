{"ver":"0.1","info":{"id":"lcfyzX","date":"1721392780","viewed":47,"name":"Water Melon","username":"kaiware007","description":"1 hour limit shader coding","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.001\n#define MAX_DIST 100.0\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat sphere(vec3 p, float radius)\n{\n    return length(p) - radius;\n}\n\nmat3 camera(vec3 ro, vec3 ta)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 up = vec3(0,1,0);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvec2 map(vec3 p)\n{\n    p = p - vec3(0, abs(sin(iTime * 1.5) * 1.5), 0);\n    float dist = sphere(p, 1.0);\n    float material = 0.0;\n    \n    // Materialize\n    if(dist <= EPS){\n        vec2 uv = vec2(atan(p.z, p.x), p.y);\n        \n        material = sin(uv.x * 20.0 + sin(uv.y * 30.0)) > 0.0 ? 1.0 : 2.0;\n    }\n    \n    return vec2(dist, material);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    float camSpeed = 1.5;\n    float camLength = mix(5.0, 10.0, sin(iTime) * 0.5 + 0.5);\n    vec3 ro = vec3(cos(iTime * camSpeed) * camLength, sin(iTime * 1.3) * 5.0, sin(iTime * camSpeed) * camLength);\n    vec3 target = vec3(0,0,0);\n    \n    mat3 c = camera(ro, target);\n    vec3 ray = c * normalize(vec3(p, 3.5));\n    \n    float depth = 0.0;\n    vec3 pos = vec3(0);\n    vec2 result = vec2(100,0);\n    for(int i = 0; i < 100; i++)\n    {\n        pos = ro + ray * depth;\n        result = map(pos);       \n        if(result.x <= EPS || result.x > MAX_DIST)\n        {\n            break;\n        }\n        depth += result.x;\n    }\n    \n    vec3 col = vec3(0,0.3,1);\n\n    // Material to Color\n    switch(int(result.y))\n    {\n        case 1:\n            col = vec3(0.05, 0.5, 0.1);\n            break;\n        case 2:\n            col = vec3(0.01, 0.05, 0.07);\n            break;\n        default:\n            vec3 sky = mix(vec3(0.8,0.9,1), vec3(0.1,0.3,1), saturate(abs(ray.y * 2.0)));\n            vec3 ground = mix(vec3(0.8,0.9,1), vec3(0.7, 0.65, 0.4), saturate(abs(ray.y * 10.0)));\n            col = ray.y > 0.0 ? sky : ground;\n            break;\n    }\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}