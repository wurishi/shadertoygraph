{"ver":"0.1","info":{"id":"7dcczN","date":"1653069826","viewed":105,"name":"sort of domain coloring","username":"ronwnor","description":"still need to learn about hsv â†’ rgb conversion, but it looks pretty epic as it is","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","domaincoloring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//pi\nfloat pi = 3.1415962;\n\n//rgb values from hue\nfloat red(float x) {\n    return clamp(abs(3.- 6.*x)-1., 0., 1.);\n}\nfloat green(float x) {\n    return clamp(2.- abs(2. - 6.*x), 0., 1.);\n}\nfloat blue(float x) {\n    return clamp(2.- abs(4. - 6.*x), 0., 1.);\n}\n\nvec3 rgb(float x){\n    return vec3(red(x),green(x),blue(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 old_uv = uv;\n    \n    //complex function\n    for(int i; i < 48; i++){\n        uv = vec2(uv.x*uv.x - uv.y*uv.y, 2.*uv.x*uv.y) - vec2(.4,.59);\n    }\n    \n    //domain coloring, but I didn't know how to convert hue+value to rgb but this looked pretty cool so I left it like this\n        vec3 col =rgb(mod(atan(uv.y,uv.x)/(2.*pi) - iTime/10.,1.)) - sin(pi*log(length(uv)) + iTime);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}