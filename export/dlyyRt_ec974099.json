{"ver":"0.1","info":{"id":"dlyyRt","date":"1701288573","viewed":86,"name":"Fork UCSD CSE 167 Mikkl 729","username":"Mikkl","description":"mzji@ucsd: Michael's impl of homework 5 for UCSD CSE 167.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    // Exit if id is not valid\n    if (my_id > NUM_BOIDS) return;\n    \n    // Parameters\n    float s_max = 10.0;\n    float s_min = 5.0;\n    float d_s = 30.0;\n    float alpha_s = 0.02;\n    float d_v = 150.0;\n    float alpha_a = 0.03;\n    float alpha_c = 0.001;\n    float d_left = 200.0;\n    float d_right = iResolution.x - 200.0;\n    float d_top = 160.0;\n    float d_bottom = iResolution.y - 160.0;\n    float alpha_b = 0.5;\n    \n    // Force calculations\n    // F_s\n    float N = float(NUM_BOIDS);\n    float N_s = 0.0;\n    vec2 F_s = vec2(0.0, 0.0);\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iResolution.x), i / int(iResolution.x));\n        vec2 pos_i = texelFetch(iChannel0, tex_pos, 0).xy;\n        int i_id = tex_pos.y * int(iResolution.x) + tex_pos.x;\n        \n        if ((i_id != my_id) && (distance(pos, pos_i) < d_s)) {\n            F_s -= pos_i - pos;\n            N_s += 1.0;\n        }\n    }\n    if (N_s > 0.1) F_s /= N_s;\n    \n    float N_v = 0.0;\n    vec2 F_c = vec2(0.0, 0.0);\n    vec2 p_bar = vec2(0.0, 0.0);\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iResolution.x), i / int(iResolution.x));\n        vec2 pos_i = texelFetch(iChannel0, tex_pos, 0).xy;\n        int i_id = tex_pos.y * int(iResolution.x) + tex_pos.x;\n        \n        if ((i_id != my_id) && (distance(pos, pos_i) < d_v)) {\n            p_bar += pos_i;\n            N_v += 1.0;\n        }\n    }\n    if (N_v > 0.1) p_bar /= N_v;\n    F_c = p_bar - pos;\n    \n    vec2 F_a = vec2(0.0, 0.0);\n    vec2 v_bar = vec2(0.0, 0.0);\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iResolution.x), i / int(iResolution.x));\n        vec2 pos_i = texelFetch(iChannel0, tex_pos, 0).xy;\n        vec2 vel_i = texelFetch(iChannel0, tex_pos, 0).zw;\n        int i_id = tex_pos.y * int(iResolution.x) + tex_pos.x;\n        \n        if ((i_id != my_id) && (distance(pos, pos_i) < d_v)) {\n            v_bar += vel_i;\n        }\n    }\n    if (N_v > 0.0) v_bar /= N_v;\n    F_a = v_bar - vel;\n    \n    vec2 F_b = vec2(0.0, 0.0);\n    // Calculate F_b\n    if (pos.x < d_left) {F_b.x += 1.0;}\n    if (pos.x > d_right) {F_b.x -= 1.0;}\n    if (pos.y < d_top) {F_b.y += 1.0;}\n    if (pos.y > d_bottom) {F_b.y -= 1.0;}\n    \n    // Total force\n    vec2 F = alpha_s * F_s + alpha_c * F_c + alpha_a * F_a + alpha_b * F_b;\n    \n    // Update pos and vel\n    vec2 new_vel = vel + F;\n    vec2 new_pos = pos + new_vel;\n    \n    // Clamp vectors\n    if (length(new_vel) > 0.0) {\n        if (length(new_vel) > s_max) {new_vel = new_vel * (s_max / length(new_vel));}\n        if (length(new_vel) < s_min) {new_vel = new_vel * (s_min / length(new_vel));}\n    }\n    \n    fragColor = vec4(new_pos.x, new_pos.y, new_vel.x, new_vel.y);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}