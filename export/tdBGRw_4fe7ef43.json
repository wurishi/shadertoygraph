{"ver":"0.1","info":{"id":"tdBGRw","date":"1548397783","viewed":653,"name":"Fractal Crystal Growth","username":"ShnitzelKiller","description":"a botched attempt at a shortest path algorithm. AKA a crescent moon fires a death laser.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["fractal","fast","marching","distance","shortest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = texture(iChannel0, fragCoord/iResolution.xy);\n    color.x = mod(color.x/35.0, 1.0);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//exit penalty goes in the x channel\n//z = 0 if empty space, z = 1 for boundaries\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n        if (length(fragCoord - iResolution.xy/2.0) < 75.0 && length(fragCoord - iResolution.xy/2.0 - vec2(30., 0)) > 75.) {\n            fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        } else {\n        \tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n        return;\n    }\n    vec4 color = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define INF 99999.0\n\n//distance computation based on fast marching algorithm by sethian\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 state = texture(iChannel1, fragCoord / iResolution.xy);\n\n    if (iFrame == 0) {\n        if (state.z > 0.5) {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        } else {\n        \tfragColor = vec4(INF, 0., 0., 1.0);\n        }\n        return;\n    }\n    \n    if (state.z > 0.5) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    vec3 offsets = vec3(-1.0, 0.0, 1.0);\n    vec2 invres = vec2(1.0) / iResolution.xy;\n   \n    float Un = texture(iChannel0, (fragCoord + offsets.yz)/iResolution.xy).x;\n    float Ue = texture(iChannel0, (fragCoord + offsets.zy)/iResolution.xy).x;\n    float Us = texture(iChannel0, (fragCoord + offsets.yx)/iResolution.xy).x;\n    float Uw = texture(iChannel0, (fragCoord + offsets.xy)/iResolution.xy).x;\n    \n    float Uh = min(Ue, Uw);\n    float Uv = min(Un, Us);\n    \n    if (Uh < INF && Uv < INF) {\n        float Uhmv = Uh - Uv;\n        float disc = 2.0 - Uhmv*Uhmv;\n        if (disc <= 0.0) {\n            fragColor = vec4(0.5*(Uh+Uv)+0.5*sqrt(disc), 0.0, 0.0, 1.0);\n            return;\n        }\n    }\n    \n    if (Uh >= INF && Uv < INF) {\n        fragColor = vec4(1.0+Uv, 0.0, 0.2, 1.0);\n        return;\n    } else if (Uv >= INF && Uh < INF) {\n        fragColor = vec4(1.0+Uh, 0.2, 0.0, 1.0);\n        return;\n    } else {\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}