{"ver":"0.1","info":{"id":"Nt3BW4","date":"1663073095","viewed":78,"name":"Filled maze","username":"CanadianWarship","description":"different cell definition, same underlying idea","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["10print"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define CellNumber 15. // how many cells span the shorter side, any float\n#define Bias 0. // how frequent fwd slashes are relative to back slashes, [-0.5 ~ 0.5] default 0.\n#define Thickness 0.2 // how thick the slashes are, [0. ~ 1.] default 0.2\n#define TimeFactor 0.05 // how quickly the picture evolves, any float, default 0. or 0.05\n\nfloat random( vec2 n ){ // https://thebookofshaders.com/10/\n    return fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * \n        (43758.5453 + TimeFactor*iTime)); // default prng has no iTime\n}\n\nfloat slash (in vec2 position, vec2 uv){ //generates slash given cell coordinate and cell uv\n    float direction = random(position), result; // random float [0. ~ 1.]\n    if (direction > 0.5 - Bias) //choose cell orientation\n        \n        //abs(uv.x + uv.y - .5) < Thickness ? result = 1. : result; // upleft - downright : backslash\n        abs(uv.x - uv.y + .5) < Thickness || abs(uv.x - uv.y - .5) < Thickness ? result = 1. : result; // downleft - upright : fwd slash\n    else\n        abs(uv.x + uv.y - .5) < Thickness || abs(uv.x + uv.y - 1.5) < Thickness ? result = 1. : result; // upleft - downright : backslash\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y); // uv coordinates\n    vec2 pos = floor(uv * CellNumber) / CellNumber; // cell coordinates\n    vec2 celluv = fract(uv * CellNumber); // uv for each cell\n    float result = slash(pos, celluv); // draw slashes\nfragColor = vec4( result*.5 , 0.0 , 0.0 , 1.0);\n}","name":"Image","description":"","type":"image"}]}