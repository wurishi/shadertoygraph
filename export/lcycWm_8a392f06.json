{"ver":"0.1","info":{"id":"lcycWm","date":"1732193399","viewed":155,"name":"Ink Morph","username":"BabiesWithKnives","description":"Simple project for a wallpaper, stolen almost entirely from https://www.shadertoy.com/view/tdG3Rd\ncolors based off the Bomb Rush Cyberfunk main menu","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["noise","fbm","warp","ink"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PIby2 6.28318530718\nfloat colormap_red(float x) {\n    if (x < 0.0) {\n        return 16.0/255.0;\n    } else if (x <= 1.0) {\n        if (x <= 0.33) {\n            return 92.0 / 255.0;\n        }else if (x <= 0.66) {\n            return 16.0 / 255.0;\n        }else {\n            return 60.0 / 255.0;\n        }\n    } else {\n        return 219.0 / 255.0;\n    }\n}\n\n \nfloat colormap_green(float x) {\n    if (x < 0.0) {\n        return 183.0 /255.0;\n    } else if (x <= 1.0) {\n        if (x <= 0.33) {\n            return 196.0 / 255.0;\n        }else if (x <= 0.66) {\n            return 183.0 / 255.0;\n        }else {\n            return 60.0 / 255.0;\n        }\n    } else {\n        return 207.0 / 255.0;\n    }\n}\n\nfloat colormap_blue(float x) {\n    if (x < 0.0) {\n        return 202.0/255.0;\n    } else if (x <= 1.0) {\n        if (x <= 0.33) {\n            return 140.0 / 255.0;\n        }else if (x <= 0.66) {\n            return 202.0 / 255.0;\n        }else {\n            return 60.0 / 255.0;\n        }\n    } else {\n        return 157.0 / 255.0;\n    }\n}\n\n// blue : (16.0, 183.0, 202.0)\n// green : (92.0, 196.0, 140.0)\n// tan : (219.0, 207.0, 157.0)\n\nvec4 colormap(float x) {\n    return vec4(colormap_red(x), colormap_green(x), colormap_blue(x), 1.0);\n}\n\n//\n\n\nfloat sin_wave(float value, float frequence, float amplitude,vec2 offset) {\n    return amplitude*sin((value+offset.x/frequence)*PIby2*frequence)+offset.y;\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p + 2.0);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\nconst mat2 mtx = mat2( 0.10,  1.50, -0.60,  0.30 );\n\nfloat fbm( vec2 p )\n{\n    \n    float f = -0.5;\n    float slowed = 0.5 * iTime;\n    //float loop = 2.0 * (sin(slowed));\n    \n    float frequence = 0.01;\n    float amplitude = 10.0;\n    vec2 offset = vec2(0.0,0.0);\n    float loop = amplitude*sin((slowed+offset.x/frequence)*PIby2*frequence)+offset.y;\n    \n    f += 1.200000*noise( p +   loop  ); p = mtx*p*3.02;\n    f += 1.431250*noise( p ); p = mtx*p*2.01;\n    f += 0.750000*noise( p ); p = mtx*p*2.13;\n    f += 0.125000*noise( p ); p = mtx*p*2.01;\n    f += 0.15000*noise( p ); p = mtx*p*2.01;\n    f += 0.162500*noise( p ); p = mtx*p*2.0;\n    f += 0.015625*noise( p + loop );\n\n    return f/0.96875;\n}\n\nfloat pattern( in vec2 p )\n{\n\treturn fbm( p + fbm( p + fbm( p ) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n\tfloat shade = pattern(uv);\n    fragColor = vec4(colormap(shade).rgb, shade);\n}","name":"Image","description":"","type":"image"}]}