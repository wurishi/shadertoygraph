{"ver":"0.1","info":{"id":"clSczD","date":"1691513375","viewed":33,"name":"Rule110","username":"IsCoffeeTho","description":"Runs the Rule110 Algorithm\nLook at [Common] to change the starting parameters","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["algorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 col = 0.5 + (0.5 * cos((iTime / 2.0) + uv.xyx + vec3(0, 2, 4)));\n    \n    fragColor = vec4(col, 1.0) * texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define left 0\n#define center 1\n#define right 2\n\nbool solveRule(int rule)\n{\n    return ((ruleKey >> rule) & 0x1) == 0x1;\n}\n\nvec2 uvOf(vec2 c)\n{\n    return (c - vec2(0.5)) / iResolution.xy;\n}\n\nint fetchRule(vec2 p)\n{\n    int o = 0;\n    p.y++;\n    p.x++;\n    if (!(iResolution.x < p.x) && texture(iChannel0, uvOf(p)).r > 0.5)\n        o += 0x1;\n    p.x--;\n    if (texture(iChannel0, uvOf(p)).r > 0.5)\n        o += 0x2;\n    p.x--;\n    if (!(p.x < 0.0) && texture(iChannel0, uvOf(p)).r > 0.5)\n        o += 0x4;\n    return o;\n}\n\n\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    c = vec4(0.0);\n    p += vec2(0.5);\n    if (p.y == iResolution.y) {\n        if (startAt == left && p.x == 1.0) {\n            c = vec4(1.0);\n        }\n        if (startAt == center && p.x == float(int(iResolution.x)/2)) {\n            c = vec4(1.0);\n        }\n        if (startAt == right && p.x == iResolution.x) {\n            c = vec4(1.0);\n        }\n        return;\n    }\n    \n    int rule = fetchRule(p);\n    \n    if (solveRule(rule))\n        c = vec4(1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define startAt right\n#define ruleKey 110\n    \n/* Here are some notable rules */\n\n/*\n    Rule110:\n    \n    #define startAt right\n    #define ruleKey 110\n    \n    #define startAt left\n    #define ruleKey 124\n*/\n\n/*\n    Sierpinski Triangles:\n    \n    #define startAt right\n    #define ruleKey 102\n    \n    #define startAt center\n    #define ruleKey 18\n    \n    #define startAt center\n    #define ruleKey 126\n    \n    #define startAt left\n    #define ruleKey 60\n*/\n\n/*\n    Sierpinski Half Brothers:\n    \n    #define startAt right\n    #define ruleKey 126\n    \n    #define startAt left\n    #define ruleKey 126\n*/\n\n/*\n    Grided Triangle:\n    \n    #define startAt left\n    #define ruleKey 124\n*/","name":"Common","description":"","type":"common"}]}