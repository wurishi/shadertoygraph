{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"//Skewing and \"unskewing\" constants as decribed here:\n//https://en.wikipedia.org/wiki/Simplex_noise\n//N = dimensions, in this case: 2\n//Skewing factor for triangular grid\n#define F 0.366025403784 //(sqrt(N+1.0)-1.0)/N\n//Reverse skewing factor for square grid\n#define G 0.211324865405 //(1.0 - 1.0/sqrt(N+1.0))/N\n\nconst float PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481;\n\nvec2 rotateVec2(vec2 p, float a) {\n    return vec2(\n        p.x*cos(a) - p.y*sin(a), \n        p.x*sin(a) + p.y*cos(a)\n    );\n}\n\nvec2 noise2(vec2 p)\n{\n    return texelFetch(iChannel0, ivec2(p), 0).rg;\n}\n\nfloat get_simplex_2d(vec2 p) {\n    vec2 skew = p+F*(p.x+p.y);\n    //Break into cells\n    vec2 cell = floor(skew);\n    //Subcell coordinates, same as fract(skew)\n    vec2 sub = skew - cell;\n    //Pick end vertex depending on what cell half the sample position is in.\n    vec2 end = sub.x>sub.y ? vec2(1,0) : vec2(0,1);\n    \n    //Positions relative to the nearest 3 points\n    vec2 p0 = cell-p-G*(cell.x+cell.y    )    ;\n    vec2 p1 = cell-p-G*(cell.x+cell.y+1.0)+end;\n    vec2 p2 = cell-p-G*(cell.x+cell.y+2.0)+1.0;\n    \n    //Square distances to points\n    float d0 = pow(length(p0),2.0);//dot(p0,p0);\n    float d1 = pow(length(p1),2.0);//dot(p1,p1);\n    float d2 = pow(length(p2),2.0);//dot(p2,p2);\n    \n    //Compute gradient weights using distance to points\n    vec3 w = max(0.5 - vec3(d0, d1, d2), 0.0);\n    //Raise to 4th power\n    w *= w*w*w;\n    \n    //Compute gradients for each point\n    vec3 g;\n    g.x = dot(noise2(cell    )*2.0-1.0, p0);\n    g.y = dot(noise2(cell+end)*2.0-1.0, p1);\n    g.z = dot(noise2(cell+1.0)*2.0-1.0, p2);\n\n    //Sum gradients with their weights\n    return 0.5+dot(g,w)*32.0;\n    //32 here is the noise contrast factor\n    //The weights are at most 1/16th, but 32 was an arbitrary pick\n}\n\n// This could also probably be used with height maps\nvec3 get_gradient_normal(vec2 p) {\n    float e = 0.001;\n    float hp = get_simplex_2d(p);\n    float hu = get_simplex_2d(p+vec2(0.,e));\n    float hr = get_simplex_2d(p+vec2(e,0.));\n    \n    vec3 n = vec3((hr-hp)/(p.x-(p.x+e)),(hu-hp)/(p.x-(p.x+e)),1.0)*0.125+0.5;\n    n.z = length(n.xy*2.-1.);\n    n.z = (1.0-n.z)*0.5+0.5;\n    \n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.x;\n    p /= 0.05;\n    \n    //Skew sample position to Simplex grid\n    vec2 skew = p+F*(p.x+p.y);\n\n    // Output to screen\n    fragColor = vec4(get_gradient_normal(p), 1.0);//get_simplex_2d(p)\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"texture","id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const bool NORMALIZE = true;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(5,5);\n    ivec2 fc = ivec2(fragCoord);\n    \n    // Get color at point 'p' on iChannel0 texture (each color ranges from 0 to 1)\n    vec4 cc = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    // Defining 'off' as the formula;  (y-0.5)^2 + (x-0.5)^2 = sqrt(0.5)^2\n    // Rescale the 'cc' to a range of -1 to 1\n    vec2 off = cc.rg;\n    if (NORMALIZE) off = normalize(off*2.0-1.0) * sqrt(0.5) + vec2(0.5);\n    \n    //off = ( fc == p || fc == p-ivec2(0,1) || fc == p-ivec2(1,1) ? off : vec2(0.5) );\n    //off = ( fc == p ? off : vec2(0.5) );\n    \n    fragColor = vec4(off,0.0,0.0);\n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"lcVBWV","date":"1735105140","viewed":54,"name":"Normalized Simplex Noise 0934","username":"Ponjee","description":"Credit for simplex noise function: https://mini.gmshaders.com/p/noise3\n\nGradient offset values normalized to the sqrt of 0.5. Full formula of the radial constraint: (y-0.5)^2 + (x-0.5)^2 = sqrt(0.5)^2","likes":3,"published":1,"flags":32,"usePreview":1,"tags":["2d","noise","simplex"],"hasliked":0,"parentid":"","parentname":""}}