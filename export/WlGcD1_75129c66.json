{"ver":"0.1","info":{"id":"WlGcD1","date":"1610904383","viewed":52,"name":"Angle Coordinates","username":"m1ke","description":"Basic code on how to rotate a ray. Input an angle and a distance and it will give you the vec2 position of a point which has the angle and distance specified (relative to the origin);","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["maths","angles","angletovector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Line\n{\n    vec2 a;\n    vec2 b;\n    float t;\n};\nfloat dstToLine(vec2 P, Line l)\n{\n    vec2 g = l.b - l.a;\n    vec2 h = P - l.a;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(l.t, 0.9*l.t, d);\n}\nvoid DrawLine(inout vec3 col, vec2 uv, Line l)\n{\n    float intensity = dstToLine(uv, l);\n    col = mix(col, vec3(1), intensity);\n}\n\n//THE IMPORTAT PART\nconst float PI = 3.14159265359f;\nvec2 GetAngle(float angle, float dst)\n{\n    float b = angle*2.0f*PI;\n    return vec2(sin(b)*dst, cos(b)*dst);\n}\n//END\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 middle = iResolution.xy / 2.0f;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    //REFERENCE VERTICAL LINE\n    Line reference = Line(middle, middle+vec2(0,100), 10.0f);\n    DrawLine(col, fragCoord, reference);\n    \n    //USING FUNCTION\n    vec2 second = GetAngle(iTime, 100.0f);\n    \n    //DRAWING LINE\n    Line l = Line(middle, middle+second, 20.0f);\n    DrawLine(col, fragCoord, l);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}