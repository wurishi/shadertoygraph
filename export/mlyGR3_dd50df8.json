{"ver":"0.1","info":{"id":"mlyGR3","date":"1684348650","viewed":146,"name":"Liquid Glass Bulb","username":"kznsq","description":"// based on https://www.shadertoy.com/view/XsfGR8\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fractal","glass","bulb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://www.shadertoy.com/view/XsfGR8\nvec3 rotate( vec3 pos, float x, float y, float z )\n{\n\tmat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0, cos( x ), -sin( x ), 0.0, sin( x ), cos( x ) );\n\tmat3 rotY = mat3( cos( y ), 0.0, sin( y ), 0.0, 1.0, 0.0, -sin(y), 0.0, cos(y) );\n\tmat3 rotZ = mat3( cos( z ), -sin( z ), 0.0, sin( z ), cos( z ), 0.0, 0.0, 0.0, 1.0 );\n\n\treturn rotX * rotY * rotZ * pos;\n}\n\nfloat hit( vec3 r )\n{\n\tr = rotate( r, sin(iTime), cos(iTime), 0.0 );\n\tvec3 zn = vec3( r.xyz );\n\tfloat rad = 1.0;\n\tfloat hit = 0.09;\n\tfloat p = 9.0;;\n\tfloat d = 1.0;\n\tfor( int i = 0; i < 4; i++ )\n\t{\n\t\trad = length( zn );\n\n\t\tif( rad > 2.0 )\n\t\t{\t\n\t\t\thit = 1. * log(rad) * rad / d;\n\t\t}\n        else\n        {\n            float th = atan( length( zn.xy ), zn.z );\n            float phi = atan( zn.y, zn.x );\t\t\n\t\t\tfloat rado = pow(rad,17.0);\n\t\t\td = pow(rad, 7.) * 7. * d + 1.0;\n\n\t\t\tfloat sint = sin( th * p );\n\t\t\tzn.x = rado * sint * cos( phi * p );\n\t\t\tzn.y = rado * sint * sin( phi * p );\n\t\t\tzn.z = rado * cos( th * p) ;\n\t\t\tzn += r;\n\t\t}\t\n\t}\n    return min(hit, length(r)*0.1 - 0.);\n}\n\nvec3 eps = vec3( 0.1, 0., 0. );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = -0.75 + 1.5 * fragCoord.xy/iResolution.xy;\t\n\n\tpos.x *= iResolution.x / iResolution.y;\n\n\tvec3 ro = vec3( pos, -1. );\n\tvec3 la = vec3( 0.0, 0.0, 1. );\n\t\n\tvec3 cameraDir = normalize( la - ro );\n\tvec3 cameraRight = normalize( cross( cameraDir, vec3( 0.0, 1.0, 0.0 ) ) );\n\tvec3 cameraUp = normalize( cross( cameraRight, cameraDir ) );\n\t\n\tvec3 rd = normalize( cameraDir + vec3( pos, 0.0 ) );\n\n\tfloat t = 0.2;\n\tfloat d = 100.0;\n\t\n\tvec3 r;\n\tvec3 color = vec3(0.0);\n\n    for( int i = 0; i < 2; i++ )\n    {\t\t\n\t\tif( d > .1 )\n\t\t{\t\n\t\t\tr = ro + rd * t;\n\t\t\td = hit( r );\n\t\t\tt+=d;\t\n\t\t}\n\t}\n\n\tvec3 n = vec3( hit( r + eps ) - hit( r - eps ),\n  \t\t\thit( r + eps.yxz ) - hit( r - eps.yxz ),\n\t  \t\thit( r + eps.zyx ) - hit( r - eps.zyx ) );\n\t \n\tvec3 mat = vec3( 111.5, 1.75, 1.5 ); \n \tvec3 light = vec3( .0, .0, -1.0 );\n\tvec3 lightCol = vec3(12.5, 3.5, 1.5);\n\t\n\tvec3 ldir = normalize( light - r );\n  \tvec3 diff = dot( ldir, n ) * lightCol * 2.0;\n\t\n\tcolor = diff  * mat + vec3(0.5, 0.5, .7);\n\t\n    fragColor = vec4( color, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}