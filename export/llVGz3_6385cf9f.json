{"ver":"0.1","info":{"id":"llVGz3","date":"1476044525","viewed":241,"name":"countryside sketch","username":"wombleman","description":"sdf sketch. iterating fast so sloppy code :)\nstarted from: https://www.shadertoy.com/view/Xds3zN","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sB3zm","filepath":"https://soundcloud.com/danielasings/gentlemen","previewfilepath":"https://soundcloud.com/danielasings/gentlemen","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MAX_SCALE = 20.0;\nconst float MIN_SCALE = 2.0;\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat hash( vec2 p )\n{    \n\tfloat h = dot(p,vec2(127.1,311.7));\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat hash(float f)\n{    \n\tfloat h = f * 311.7;\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat scale(vec2 sq){\n    return floor(mix(MIN_SCALE,MAX_SCALE,hash(vec2(sq))));\n}\n\nvec2 square(vec3 pos){\n    vec2 sq = vec2(floor(pos.x)+0.5,floor(pos.z)+0.5);\n\tsq = vec2(floor(pos.x)+0.5,floor(pos.z)+0.5);\n        return sq;\n}\n\nfloat dTo(vec3 pos){\n        float s = scale(square(pos));\n        vec2 sq = square(s*pos);\n        vec2 delta = s*pos.xz - sq;\n        return dot(delta,delta);}\n\nbool isPath(vec3 pos){\n    return abs(pos.x) < 0.07 || mod(pos.z,2.0) < 0.14;\n    return abs(pos.x - sin(pos.z)*20.0) <1.0 || abs(pos.x) < 0.07;\n}\n\nbool isFarm(vec3 pos){\n    float h = hash(square(pos));\n    return h > 0.6 && h < 0.7 ;\n}\n\nfloat sdPlane( vec3 p )\n{\n    float t = iTime/2.0;\n    float h=0.0;\n    h -= 0.6*(sin(0.1*(p.x-p.z)+1.6)*cos(0.23*p.z));\n    if (!isPath(p) && !isFarm(p)) h += (1.0-dTo(p))*0.05;\n\treturn p.y-h;\n}\n\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )        \n{\n    return  vec2( sdPlane(     pos), 1.0 );;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.0;\n    float tmax = 40.0;\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nvec3 diffuse(vec3 pos){\n        vec2 sq = square(pos);\n    \tif(isPath(pos)) return vec3(0.3,0.3,0.3);\n        if(isFarm(pos)) return vec3(0.3,0.3,0.1);\n    \tsq = square(pos);\n        float d2 = dTo(pos);\n        float h = 0.2+0.3*hash(sq);\n        h += floor(d2*20.0)*0.05;\n    \n        vec3 rgb1 = hsv2rgb(vec3(h,0.9,0.3));\n        //vec3 rgb2 = hsv2rgb(vec3(0.6,0.6,0.2));\n        //vec3 rgb3 = hsv2rgb(vec3(0.0,1.0,1.0));\n        //rgb1 = mix(rgb1,rgb2,mod(sq.x, 2.0));\n\n    \tif (hash(sq) < 0.2) return vec3(0.6,0.4,0.2);\n    \n        return rgb1;\n}\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 skyTop = hsv2rgb(vec3(0.6,0.6,0.4));\n    vec3 skyBottom = hsv2rgb(vec3(0.55, 0.3, 0.6));\n    vec3 col = mix(skyBottom,skyTop,rd.y*5.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 diff = diffuse(pos);\n        vec3 L = vec3(2.0);\n        col = diff * dot(nor,vec3(0.0,1.0,0.0)) * L;\n    \tcol = mix( col, skyBottom, 1.0-exp( -0.002*t*t ) ); //fog\n\t\t\n    col = mix(vec3(0.5,0.0,0.0),col,m);\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = vec2(8.0,1.0);//iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime*5.0;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.5*cos(6.0*mo.x), 4.0 + 1.0*mo.y, -5.0 + 3.5*sin(6.0*mo.x) );\n    vec3 ta = vec3( -0.5, -0.4, 0.5 );\n    ro.z += 0.2*time;\n    ta.z += 0.2*time;\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}