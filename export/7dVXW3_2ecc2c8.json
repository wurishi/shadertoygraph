{"ver":"0.1","info":{"id":"7dVXW3","date":"1635437806","viewed":90,"name":"Color Interpolation 1","username":"Livie","description":"Color interpolation exploration","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["color","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  Conversion fns from IÃ±igo Quiles @ https://www.shadertoy.com/view/MsS3Wc\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 computeVoronoi(vec2 p) {\n    vec2 v1 = vec2(.2, sin(iTime)*.5+.5);\n    vec2 v2 = vec2(sin(iTime*.3)*.5+.5, .3);\n    vec2 v3 = vec2(sin(iTime*.6)*.5+.5, sin(iTime*.3)*.5+.5);\n   \n    // convert to actual pixels to deal with stretching with non-square aspect ratios\n    if (distance(p*iResolution.xy, v1*iResolution.xy) < 10. ||\n        distance(p*iResolution.xy, v2*iResolution.xy) < 10. ||\n        distance(p*iResolution.xy, v3*iResolution.xy) < 10.) {\n        return vec3(0., 0., 1.);\n    }\n    \n    float d1 = distance(p, v1);\n    float d2 = distance(p, v2);\n    float d3 = distance(p, v3);\n    if (d1 < d2 && d1 < d3) {\n        return vec3(.2, 1., 1.);\n    }\n    else if (d2 < d1 && d2 < d3) {\n        return vec3(.6, 1., 1.);\n    }\n    else {\n        return vec3(.9, 1., 1.);\n    }\n    \n}\n\n// Inverse Distance Weighting\nvec3 calculateIDW(vec2 p) {\n    vec2 v1 = vec2(.2, sin(iTime)*.5+.5);\n    vec2 v2 = vec2(sin(iTime*.3)*.5+.5, .3);\n    vec2 v3 = vec2(sin(iTime*.6)*.5+.5, sin(iTime*.3)*.5+.5);\n   \n    // convert to actual pixels to deal with stretching with non-square aspect ratios\n    float pWidth = 5.;\n    if (distance(p*iResolution.xy, v1*iResolution.xy) < pWidth ||\n        distance(p*iResolution.xy, v2*iResolution.xy) < pWidth ||\n        distance(p*iResolution.xy, v3*iResolution.xy) < pWidth) {\n        return vec3(0., 0., 1.);\n    }\n    \n    // Shepard's method\n    // https://en.wikipedia.org/wiki/Inverse_distance_weighting\n    float powerParam = 5.;\n    float w1 = 1./pow(distance(p, v1), powerParam);\n    float w2 = 1./pow(distance(p, v2), powerParam);\n    float w3 = 1./pow(distance(p, v3), powerParam);\n    float u1 = .2;\n    float u2 = .6;\n    float u3 = .9;\n    \n    float u = (w1*u1 + w2*u2 + w3*u3)/(w1+w2+w3);\n    return vec3(u, 1., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = calculateIDW(uv);\n\n    fragColor = vec4(hsb2rgb(col), 1.);\n}","name":"Image","description":"","type":"image"}]}