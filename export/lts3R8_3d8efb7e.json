{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//#define BOBMARLEY\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 q = p - vec2(0.34, 0.7);\n\t\n    vec3 col = mix(vec3(1.0, 0.4, 0.1), vec3(1.0, 0.8, 0.3), sqrt(p.y) * p.y);\n    col *= smoothstep(1.0, 0.0, length(p - vec2(sin(iTime / 3.0) / 2.0 + 0.5, cos(iTime / 3.0) / 2.0)));\n    \n    float b = smoothstep(0.4, 0.2, length(p - vec2(sin(iTime / 3.0) / 2.0 + 0.5, cos(iTime / 3.0) / 2.0)));\n    col = mix(col, vec3(1.0, 0.9, 0.3), b * sqrt(p.y));\n    \n    float r = 0.2 + 0.1 * cos(atan(q.y, q.x) * 10.0 + q.x * 20.0 + 1.0);    \n    col *= smoothstep(r, r + 0.01, length(q));\n    \n    r = 0.015 * cos(q.y * 110.0) * 0.1 + 0.015;\n    r += exp(p.y * -40.0);\n    col *= 1.0 - (1.0 - smoothstep(r, r + 0.002, abs(q.x - 0.2 * sin(q.y * 2.0)))) * (1.0 - smoothstep(0.0, 0.1, q.y));\n\n    #ifdef BOBMARLEY\n    col *= texture(iChannel0, -p*2.0).xyz * 4.0;\n    #endif\n    \n    fragColor = vec4(col, 1.0);    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lts3R8","date":"1418697811","viewed":214,"name":"IQ Demo/Cycles","username":"Slyth","description":"watched a video of iq's to understand how the math really works behind some of this stuff. It's very interesting and fun to play around with..","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}