{"ver":"0.1","info":{"id":"X3y3zy","date":"1717989230","viewed":56,"name":"Fragment Loop","username":"incre_ment","description":"A classic loop using domain repetition and an SDF.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["loop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nfloat PI = 3.14159;\nfloat TAU = 2.*3.14159;\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n   vec3 col = vec3(0.);   \n   float tt = fract(.5*iTime);\n   float s = 7.0;\n   uv *= s-(s-.5)*tt;\n   vec2 cellID = round(uv);\n   uv = fract(uv + .5) - .5; \n   uv *= rotation(PI*pow(tt,1.7));\n   float w = 2./iResolution.y;\n   if (abs(cellID.x) <= 1. && abs(cellID.y) <= 1.){\n    float squareDim = .5 - (2.75/s)*tt;\n    float sdf = sdBox(uv, vec2(squareDim,squareDim));\n    col += smoothstep(w,-w,sdf);\n   }  \n   fragColor = vec4(col,1.0);\n} ","name":"Image","description":"","type":"image"}]}