{"ver":"0.1","info":{"id":"tsSGWt","date":"1550247870","viewed":126,"name":"Quantum Socket","username":"XMunkki","description":"Visuals for a game made for/in the Quantum Wheel Game Jam 2019.\nhttps://xmunkki.itch.io/quantum-socket","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifndef UNITY_MODE\nvec2 mul2x2(mat2 m, vec2 p) { return m * p; }\nvec3 mul3x3(mat3 m, vec3 p) { return m * p; }\nfloat _atan(float x, float y) { return atan(x, y); }\n#endif\n\n// Uses code (MIT) from Inigo Quilez -- https://www.shadertoy.com/view/Xds3zN\n\n#define AA 2   // make this 2 or 3 for antialiasing\n\n\n//------------------------------------------------------------------\n\n#define PI (3.1415926535897932384626433832795)\n#define PI2 (2.0 * PI)\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n    \n}\n\nfloat sdRoundBox( in vec3 p, in vec3 b, in float r ) \n{\n    vec3 q = abs(p) - b;\n    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0)) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat dot2(in vec3 v ) {return dot(v,v);}\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = 1.73205;//sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCylinder_xy( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n#if 0\n// bound, not exact\nfloat sdOctahedron(vec3 p, float s ) \n{\n    p = abs(p);\n    return (p.x + p.y + p.z - s)*0.57735027;\n}\n#else\n// exacy distance\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    \n    float m = p.x + p.y + p.z - s;\n    \n\tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n#endif\n\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opS(vec2 d1, vec2 d2)\n{\n    return vec2(max(-d2.x,d1.x), d1.y);\n}\n\nfloat opU(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(mul2x2(m,p.xz),p.y);\n}\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n//#define ZERO (int(min(iTime,0.0))) // iOS fix\n\n//------------------------------------------------------------------\n\nfloat s2dCircle(in vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat s2dBox(in vec2 p, in vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat s2dCapsule(vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat s2dTri(in vec2 p)\n{\n   \tvec2 slope1 = normalize(vec2(0.6, 1));\n    vec2 slope2 = vec2(slope1.x, -slope1.y);\n    float slope_ofs = 0.065;\n    \n    float d = dot(p, vec2(-1, 0));\n    d = max(d, dot(p - vec2(0, slope_ofs), slope1));\n    d = max(d, dot(p - vec2(0, -slope_ofs), slope2));\n    \n    return d;\n}\n\nfloat s2dUsbLogo(in vec2 p)\n{\n    float d = 1e10;\n    \n    // Center\n    p.y -= 0.5;\n    \n    d = opU(d, s2dCircle(p-vec2(0.11,0.0), 0.1));\n    d = opU(d, s2dBox(p-vec2(0.5,0.0), vec2(0.39, 0.02)));\n    d = opU(d, s2dTri(p-vec2(0.88,0.0)));\n\n    d = opU(d, s2dCircle(p-vec2(0.56,0.15), 0.052));\n    d = opU(d, s2dCapsule(p,vec2(0.56,0.15), vec2(0.4,0.15), 0.02));\n    d = opU(d, s2dCapsule(p,vec2(0.25,0.0), vec2(0.4,0.15), 0.02));\n    \n    d = opU(d, s2dBox(p-vec2(0.74,-0.15), vec2(0.052, 0.052)));\n    d = opU(d, s2dCapsule(p,vec2(0.74,-0.15), vec2(0.58,-0.15), 0.02));\n    d = opU(d, s2dCapsule(p,vec2(0.38,0.0), vec2(0.58,-0.15), 0.02));\n    \n    return d;\n}\n\nvec3 rot_xy(vec3 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec3(p.x * c + p.y * s, p.x * s - p.y * c, p.z);\n}\n\n\n#define usb_plug_ratio (12.0 / 4.5)\n\nvec2 sdUsbHole(in vec3 pos)\n{\n    vec2 res = vec2( 1e10, 0.0 );\n    \n    float shell_mat = 46.0- length(pos.xy) * 10.0;\n    \n    // Shell\n    float d = sdCylinder_xy(pos-vec3(0, 0, 0.5), vec2(1.0, 0.5));\n    d = opS(d, sdCylinder_xy(pos-vec3(0, 0, -0.1), vec2(0.9, 0.2)));\n    d -= 0.03; // Roundness\n    \n    // Side supports\n    d = opU(d, sdCapsule(pos-vec3(0,0,0.7), vec3(-0.9,0,0), vec3(0.9,0,0), 0.3));\n    \n    // USB hole\n    d = opS(d, sdRoundBox(pos, vec3(0.1 * usb_plug_ratio, 0.1, 0.5), 0.05));\n    res = opU(res, vec2(d, shell_mat));\n    \n    res = opU(res, vec2(sdBox(pos-vec3(0, 0.05, 0.43), vec3(0.1 * usb_plug_ratio, 0.05, 0.3)), 333.0));\n    \n    return res;\n}\n\nvec2 sdUsbPlug(in vec3 pos)\n{\n    vec2 res = vec2( 1e10, 0.0 );\n    \n    pos.z = -pos.z; // Flip to face the wheel\n    \n    float d = 99999.0;\n    \n    // The head\n    res = opU(res, vec2(sdBox(pos, vec3(0.1 * usb_plug_ratio, 0.1, 0.6)), 123.0));\n    res = opU(res, vec2(sdBox(pos-vec3( 0.1,0,-0.35), vec3(0.06, 0.105, 0.1)), 85.0));\n    res = opU(res, vec2(sdBox(pos-vec3(-0.1,0,-0.35), vec3(0.06, 0.105, 0.1)), 85.0));\n    // The body\n    float body_mat = 55.0 - abs(fract(pos.z/0.4)) * 3.0;\n    res = opU(res, vec2(sdRoundBox(pos-vec3(0,0,0.5), vec3(0.1 * usb_plug_ratio, 0.1, 0.5), 0.1), body_mat));\n    res = opU(res, vec2(sdCylinder_xy(pos-vec3(0,0,1.0), vec2(0.3, 0.3)) - 0.03, 56.0));\n    // The wire \"cap\"\n    res = opU(res, vec2(sdCylinder_xy(pos-vec3(0,0,1.2), vec2(0.2, 0.3)) - 0.03, 6.0));\n    // The wire\n    res = opU(res, vec2(sdCylinder_xy(pos-vec3(0,0,5.2), vec2(0.11, 5.0)), 10.0));\n    \n    //res = opU(res, vec2(d, 123.0));\n\n    //res = opU(res, sdWheel(pos));\n    \n    return res;\n}\n\nvec2 sdWheel(in vec3 pos)\n{\n    vec2 res = vec2( 1e10, 0.0 );\n    \n    float segment_ang = PI2 / 6.0; // One segments \"pi\" angle\n    \n#ifndef UNITY_MODE\n    float rot_ang = iTime;\n#else\n    float rot_ang = _WheelPos;\n#endif\n    \n    rot_ang *= segment_ang; // Every integer step addvances one segment\n    rot_ang -= segment_ang / 2.0; // Align the angle so that every integer has a slot at the bottom\n                \n    float d = 0.0;\n    \n    \n    // Add the wheel\n    float wheel_mat = 15.0 + length(pos.xy) * 10.0;\n    float center_mat = 5486.0 + length(pos.xy) * 5.0;\n    \n    vec3 wpos = rot_xy(pos, rot_ang);\n    \n    float logo_scale = 4.0;\n    float logo = s2dUsbLogo((wpos.xy / logo_scale + vec2(0.5, 0.5))) * logo_scale;\n    if (logo <= 0.0) center_mat = 1000.0; \n    \n    d = sdCylinder_xy(wpos-vec3(0,0,1), vec2(5.2, 0.5));\n    d = opU(d, sdCylinder_xy(wpos-vec3(0,0,0.8), vec2(5.7, 0.1)));\n    //res = opU(res, vec2(d, 15.0));\n    res = opU(res, vec2(d, wheel_mat));\n    res = opU(res, vec2(sdRoundBox(wpos-vec3(0,0,0.6), vec3(1.8, 1.8, 0.1), 0.1), center_mat));\n    res = opU(res, vec2(sdRoundBox(rot_xy(wpos, PI/4.0)-vec3(0,0,0.6), vec3(1.8, 1.8, 0.1), 0.1), center_mat));\n\n    \n    // Pick the segment\n#ifndef UNITY_MODE\n    float seg_ang = _atan(pos.y, pos.x) - rot_ang;\n#else\n\tfloat seg_ang = atan2(pos.y, pos.x) - rot_ang;\n#endif\n    seg_ang += segment_ang / 2.0;\n    seg_ang -= mod(seg_ang, segment_ang);\n    seg_ang += rot_ang;\n    \n    // Insert the hole\n    vec3 hole_pos = vec3(cos(seg_ang), sin(seg_ang), 0.0) * 4.0;\n    \n    //float d = sdBox(pos - hole_pos, vec3(0.1, 0.1, 0.1));\n\n    res = opS(res, vec2(sdCylinder_xy(pos - hole_pos, vec2(1.1, 5.0)), 1.0)); // Small hole around the plug\n    res = opU(res, sdUsbHole(pos - hole_pos));\n\n    return res;\n}\n\nvec2 sdWheelExplosion(in vec3 pos)\n{\n    vec2 res = vec2( 1e10, 0.0 );\n    \n    float expl_time = 3.0;\n    float expl = mod(iTime, expl_time);\n\n#ifndef UNITY_MODE\n    expl=0.0;\n#else\n    expl = clamp(_WheelExplosion, 0.0, expl_time);\n#endif\n    expl *= 0.333;\n    expl = expl * cos(expl * pos.x * pos.y * pos.z);\n    \n    res = opU(res, sdWheel(pos));\n    res.x += expl * 3.0;\n        \n    return res;\n}\n\nvec2 sdSurrounds(in vec3 pos)\n{\n    float rep = 5.0;\n    vec3 rep3 = vec3(rep, rep, rep);\n\n    float manh_dist = max(abs(pos.x), max(abs(pos.y), abs(pos.z)));\n    if (manh_dist < 6.5)\n        return vec2(sdSphere(pos, -5000.0), 0.0);\n    \n    pos += rep3 * 0.5;\n    \n\tvec3 pos_rep = mod(pos,rep3)-0.5*rep;\n    vec3 cell = floor(pos / rep3);\n    \n    return sdUsbHole(pos_rep);\n}\n\nvec2 map(in vec3 pos)\n{\n    vec2 res = vec2( 1e10, 0.0 );\n\n#ifndef UNITY_MODE\n    float usb_plug_offset = pow(abs(cos(iTime*3.0)), 5.0);\n    float usb_plug_orientation = smoothstep(0.0, 1.0, abs(cos(iTime*1.1235)));\n#else\n    float usb_plug_offset = _PlugOffset;\n    float usb_plug_orientation = _PlugOrientation;\n#endif\n\n    usb_plug_offset *= 1.5;\n    float usb_plug_ang = usb_plug_orientation * PI;\n    \n    //res = opU(res, sdWheel(pos));\n    res = opU(res, sdWheelExplosion(pos));\n    \n    res = opU(res, sdUsbPlug(rot_xy(pos-vec3(0,-4.0,-0.15-usb_plug_offset),usb_plug_ang)));\n    \n    //res = opU(res, sdSurrounds(pos));\n    //res = sdSurrounds(pos);\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nconst float maxHei = 0.8;\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n/*\n    // raytrace floor plane\n    float tp1 = (0.0-ro.y)/rd.y;\n    if( tp1>0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    //else return res;\n*/    \n    \n    // raymarch primitives   \n    //vec2 tb = iBox( ro-vec3(0.0,0.4,0.0), rd, vec3(2.5,0.41,2.5) );\n    //if( tb.x<tb.y && tb.y>0.0 && tb.x<tmax)\n    {\n        //tmin = max(tb.x,tmin);\n        //tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<130 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                 break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n//    float tp = (maxHei-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 1\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\ncol *= 0.1; // Make sky darker\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = (m<1.5) ? vec3(0.0,1.0,0.0) : calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = checkersGradBox( 5.0*pos.xz );\n            col = 0.3 + f*vec3(0.1, 0.1, 0.1);\n        }\n\n        // lighting\n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.2, 0.2, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0, 0.0, 0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n        lin += 0.30*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.40*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 9.00*spe*vec3(1.00,0.90,0.70);\n\n    \t//col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    \tcol = mix( col, vec3(0.2,0.2,0.3), 1.0-exp( -0.0001*t*t*t ) );\n        \n        // Logo\n        if (m == 1000.0) col = vec3(0,0,0);\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 0.0 + iTime;\n\n#ifndef UNITY_MODE\n    float expl_amount = mod(iTime, 3.0);\n\texpl_amount = 0.0;\n#else\n    float expl_amount = _WheelExplosion;\n#endif\n    \n    // Explosion effects\n    if (expl_amount >= 0.0)\n    {\n        expl_amount = clamp(expl_amount * 0.2 - 0.025, 0.0, 1.0) * 0.1;\n        fragCoord.x += cos(fract(fragCoord.y * 1234.678) * 326.0) * iResolution.x * expl_amount;\n    }\n\n    \n    // camera\t\n    vec3 ro = vec3( 2.6*cos(0.5*time + 6.0*mo.x), -3.5 + 2.0*mo.y, -6.5 + 1.6*sin(0.5*time + 6.0*mo.x) );\n    //ro.z = -abs(ro.z);\n    vec3 ta = vec3( 0, -2.5, 0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0, 0.0, 0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = mul3x3(ca, normalize( vec3(p.xy,2.0) ));\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545, 0.4545, 0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    tot *= pow(max(0.0, 1.0 - length(fragCoord/iResolution.xy - vec2(0.5, 0.5)) * 0.8), 1.44);\n    \n    fragColor = vec4( tot, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}