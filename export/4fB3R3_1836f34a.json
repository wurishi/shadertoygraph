{"ver":"0.1","info":{"id":"4fB3R3","date":"1704446067","viewed":21,"name":"breathing octas","username":"kywi","description":"stolen from here in large parts https://www.youtube.com/watch?v=khblXafu7iA","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Octahedron SDF - https://iquilezles.org/articles/distfunctions/\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n// Custom gradient - https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    return .5+.5*cos(6.28318*(t+vec3(.6,.3,.9)));\n}\n\n// 2D rotation function\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Scene distance\nfloat map(vec3 p) {\n    p.z -= iTime * .4;\n    // Space repetition\n    p.xy = fract(p.xy) - .5;     // spacing: 1\n    p.z =  mod(p.z, .25) - .125; // spacing: .25\n    float circle = length(p) - (sin(iTime) + 4.) /3. * .08  ; // distance to a sphere of radius 1\n    float octa = sdOctahedron(p, .2); \n    return max(-circle, octa);\n    return octa;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    // Initialization\n    vec3 ro = vec3(0, 0, -3);         // ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\n    // Raymarching\n    int i = 0;\n    for (i; i < 80; i++) {\n        vec3 p = ro + rd * t;     // position along the ray\n        \n        p.xy *= rot2D(t*.15 * 1.);     // rotate ray around z-axis\n\n        p.y += sin(t*(.5+1.)*.5)*.5;  // wiggle ray\n        //p.x += sin(t*(.5+1.)*.5)*.5;  // wiggle ray\n\n        float d = map(p);         // current distance to the scene\n\n        t += d;                   // \"march\" the ray\n\n        if (d < .001) break;      // early stop if close enough\n        if (t > 100.) break;      // early stop if too far\n    }\n\n    // Coloring\n    col = vec3(t*.04 + float(i)*.005); \n    col = palette(t);\n    // color based on distance\n\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}