{"ver":"0.1","info":{"id":"MXXXD2","date":"1709996439","viewed":138,"name":"anamorphic lens flare","username":"tantalizedsoul","description":"horrible attempt at anamorphic lens flare. sponsored by J.J Abrams\n\nIDK why but choosing the 1961 commercial and the chrome video as an input just make the buffer A reads itself and resulting in black screen.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["blur","cinematic","anamorphic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex0 = texture(iChannel0, uv, 0.0);\n    vec4 tex1 = texture(iChannel1, uv, 0.0);\n    fragColor = tex0 + tex1;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv, 0.0);\n    \n    float brightness = dot(fragColor.rgb, vec3(0.2126, 0.7152, 0.0722));\n    \n    if (brightness > 0.85)\n    {\n        fragColor = texture(iChannel0, uv, 0.0);\n    }\n    else\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// blur shader by https://www.shadertoy.com/user/Loadus\n\nfloat SCurve (float x) {\n\t\n    \n    // ---- by CeeJayDK\n\n\t\tx = x * 2.0 - 1.0;\n\t\treturn -x * abs(x) * 0.5 + x + 0.5;\n\t\t\n        \n    //return dot(vec3(-x, 2.0, 1.0 ),vec3(abs(x), x, 1.0)) * 0.5; // possibly faster version\n\t\n  \n    \n    // ---- original for posterity\n    \n    // How to do this without if-then-else?\n    // +edited the too steep curve value\n    \n    // if (value < 0.5)\n    // {\n    //    return value * value * 2.0;\n    // }\n    \n    // else\n    // {\n    // \tvalue -= 1.0;\n    \n    // \treturn 1.0 - value * value * 2.0;\n    // }\n}\n\nvec4 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {\n\n\tif (radius >= 1.0)\n\t{\n\t\tvec4 A = vec4(0.0); \n\t\tvec4 C = vec4(0.0); \n\n\t\tfloat width = 1.0 / size.x;\n\n\t\tfloat divisor = 0.0; \n        float weight = 0.0;\n        \n        float radiusMultiplier = 1.0 / radius;\n        \n \t\tfor (float x = -radius; x <= radius; x++)\n\t\t{\n\t\t\tA = texture(source, uv + vec2(x * width, 0.0));\n            \n            \tweight = SCurve(1.0 - (abs(x) * radiusMultiplier)); \n            \n            \tC += A * weight; \n            \n\t\t\tdivisor += weight; \n\t\t}\n\n\t\treturn vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);\n\t}\n\n\treturn texture(source, uv);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfragColor = BlurH(iChannel0, vec2(128.0, 0.0).xy, uv, 96.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}