{"ver":"0.1","info":{"id":"Xt2fzd","date":"1516888821","viewed":378,"name":"9patch Scaler","username":"Oomek","description":"This is an attempt to implement a pixel shader based 9patch scaler for UI elements. \nThe goal is to make all the diagonal lines aligned on the edges of all 9 rectangles \nIt's up to you now wise heads to point out what did I screw up here :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ui","button","scale","scaler","9patch","patch","nine","ninepatch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nThis is an attempt to implement a pixel shader based 9patch scaler\nThe goal is to make all the diagonal lines aligned on the edges of all 9 rectangles \nIt's up to you now wise heads to point out what did I screw up here :)\n\n*** Please execute the following command to load my custom texture 200x200px ***\n\nHere is how to load the texture needed for this shader:\n - Open the javascript console of your browser:\n\t\t\t\t   Mac      /     Windows\n\tChrome:  cmd + opt + J  /  ctrl + shift J\n\tFirefox: cmd + opt + K  /  ctrl + shift K\n    IE:          na         /  F12 \n\n - Then copy the following line in the console and hit enter:\n\ngShaderToy.SetTexture(0, {mSrc:'https://dl.dropboxusercontent.com/s/hq1ar7hpvpspl0t/9patch200c.png?dl=', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n\n\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 textSize = vec2(200.0, 200.0); //Set to bitmap size\n    vec2 imageSize = iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ratio = textSize.xy / iResolution.xy;\n    vec2 border = textSize / 2.0 * (0.5 + sin(iTime) * 0.5);\n    vec2 bSrc = border / textSize;\n    vec2 bDst = border / imageSize;\n\n    if(uv.x < bDst.x)\n        uv.x = uv.x / ratio.x;\n    \n    else if(uv.x > (1.0 - bDst.x))\n        uv.x = 1.0 - (1.0 - uv.x) / ratio.x;\n        \n    else{\n        float t = (border.x * (textSize.x - imageSize.x)) / (textSize.x * (2.0 * border.x - imageSize.x));\n        uv.x = uv.x * (1.0 - t * 2.0) + t;\n    }\n\n    if(uv.y < bDst.y)\n        uv.y = uv.y / ratio.y;\n    \n    else if(uv.y > (1.0 - bDst.y))\n        uv.y = 1.0 - (1.0 - uv.y) / ratio.y;\n\n    else {\n        float t = (border.y * (textSize.y - imageSize.y)) / (textSize.y * (2.0 * border.y - imageSize.y));\n        uv.y = uv.y * (1.0 - t * 2.0) + t;\n    }\n        \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}