{"ver":"0.1","info":{"id":"NtB3z3","date":"1624340653","viewed":80,"name":"Quadratic Bezier (Casteljau)","username":"Yusef28","description":"A skeletal visualization\nA good resource: https://pomax.github.io/bezierinfo/\n\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bezier","quadratic","casteljau"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Pallete: Timeless & Nautical\n#define bgCol   vec3(0,41,60)/255.*0.8;\n#define lineCol vec3(30,101,109)/255.\n#define circleCol vec3(241,243,206)/255.\n#define magikCol vec3(246,42,0)/255.\n\nfloat distToLine(vec2 A, vec2 B, vec2 p){\n    \n    vec2 PA = p - A;\n    vec2 BA = B - A;\n    float d = dot(PA,BA);\n    float t = clamp(d/(length(BA)*length(BA)),0., 1.);//Vektorprodukt\n    vec2 normal = PA - BA*t;\n    return length(normal);\n\n}\n\nvec3 drawRing(float radius, float thickness, vec2 p, vec2 off, vec3 col, vec3 ringCol){\n    \n    p -= off;\n    \n    float eps = 1./min(iResolution.x,iResolution.y);\n    \n    float circle = 1.-smoothstep(-eps, eps, \n    abs(radius - length(p))-thickness);\n    \n    col = mix(col, ringCol, circle);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    float eps = 1./min(iResolution.x, iResolution.y);\n    vec2 p1 = vec2(-0.5, -0.3);\n    vec2 p2 = vec2(0.0, 0.3);\n    vec2 p3 = vec2(0.5, -0.3);\n    \n    vec2 line1 = p2-p1;\n    vec2 line2 = p3-p2;\n    float t = sin(iTime)*0.5+0.5;\n    \n    vec2 dLinePoint1 = p1*t + (1.0-t)*p2;\n    vec2 dLinePoint2 = p2*t + (1.0-t)*p3;\n    \n    vec2 magik = dLinePoint1*t + (1.0-t)*dLinePoint2;\n    \n    \n    vec3 col = bgCol;\n    // Time varying pixel color\n    vec3 magik_farber = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float line1Dist = 1.0-smoothstep(0.004, 0.005, distToLine(p1, p2, uv));\n    float line2Dist = 1.0-smoothstep(0.004, 0.005, distToLine(p2, p3, uv));\n    float line3Dist = 1.0-smoothstep(0.004, 0.005,\n    distToLine(dLinePoint1, dLinePoint2, uv));\n    \n    //float line4Dist = 1.0-smoothstep(0.004, 0.005,\n    //distToLine(magik, p2, uv));\n    \n    \n    col = drawRing(0.01, 0.003, uv, p1, col, lineCol*1.2);\n    col = drawRing(0.01, 0.003, uv, p2, col, lineCol*1.2);\n    col = drawRing(0.01, 0.003, uv, p3, col, lineCol*1.2);\n    \n    col = mix(col, lineCol, line1Dist);\n    col = mix(col, lineCol, line2Dist);\n    col = mix(col, lineCol, line3Dist);\n    //col = mix(col, circleCol, line4Dist);\n    \n    col = drawRing(0.01, 0.003, uv, dLinePoint1, col, circleCol);\n    col = drawRing(0.01, 0.003, uv, dLinePoint2, col, circleCol);\n    col = drawRing(0.01, 0.003, uv, magik, col, magikCol);\n    \n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.15); // change pow for modifying the extend of the  vignette\n\n    fragColor = vec4(col*vig,1.0);\n}","name":"Image","description":"","type":"image"}]}