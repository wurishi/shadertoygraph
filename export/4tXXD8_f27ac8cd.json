{"ver":"0.1","info":{"id":"4tXXD8","date":"1436171572","viewed":288,"name":"implicit-checker","username":"substack","description":"checkerboard implicit surface raytracer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec3 scene (vec3, vec3);\nconst float EPSILON = 0.001;\n\nfloat torus (float x, float y, float z) {\n  float r = 2.0, a = 0.25;\n  float b = r - sqrt(x*x + y*y);\n  return b*b + z*z - a*a;\n}\nfloat sphere (float x, float y, float z) {\n  float r = 0.8;\n  return sqrt(x*x + y*y + z*z) - r*r;\n}\nfloat geometry (float x, float y, float z) {\n  return 1.0\n    * torus(y + 0.0, x, z) / sphere(x + 0.0, y, z)\n    * torus(y - 2.0, z, x) / sphere(y - 2.0, z, x)\n    * torus(y + 2.0, z, x) / sphere(y + 2.0, z, x)\n    * torus(y - 4.0, x, z) / sphere(y - 4.0, x, z)\n    * torus(y + 4.0, z, x) / sphere(y + 4.0, z, x)\n  ;\n}\n#define surface(p) geometry((p).x,(p).y,(p).z)\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float aspect = iResolution.x / iResolution.y;\n  uv -= 0.5;\n  uv.x = aspect * uv.x;\n  float t = iTime;\n  float x = fragCoord.x, y = fragCoord.y;\n  \n  vec3 C = vec3(sin(t*0.5) * 6.0, 4.0, cos(t*0.25) * 8.0);\n  vec3 T = vec3(0);\n  vec3 E = normalize(T - C);\n  vec3 U = vec3(0,1,0);\n  vec3 D = normalize(E + uv.x * normalize(cross(E, U)) + uv.y * U);\n  vec3 N = scene(C, D);\n  vec3 color;\n  if (length(N) < EPSILON) {\n    color = vec3(\n        sin(t/4.0),sin((x+t/3.0)/(y+t/4.0)),cos(t/5.0)\n    ) / sin(x / 16.0) / cos(y / 16.0);\n  } else {\n    color = N / sin(x / 16.0) / cos(y / 16.0);\n  }\n  fragColor = vec4(color, 1.0);\n}\n\nvec3 scene (vec3 C, vec3 D) {\n  float t = surface(C + 10.0 * D);\n  vec3 v0, v1;\n  for (int i = 0; i < 30; i++) {\n    v0 = C - (t - EPSILON) * D;\n    v1 = C - (t + EPSILON) * D;\n    float t0 = surface(v0);\n    float t1 = surface(v1);\n    t = t - t0 / (t1 - t0) * 2.0 * EPSILON;\n    if (t0 < 0.01 || t1 < 0.01) {\n      vec3 N = (v1 - v0) / (EPSILON * 2.0);\n      return N + 0.5;\n    }\n  }\n  return vec3(0.0, 0.0, 0.0);\n}","name":"","description":"","type":"image"}]}