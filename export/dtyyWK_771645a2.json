{"ver":"0.1","info":{"id":"dtyyWK","date":"1700826085","viewed":88,"name":"HSV ColorPicker","username":"midorikuma","description":"Simply Color Picker","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","colorpicker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int dots[] = int[](\n    0xfbdf, 0xf464, 0xf496, 0xf8ef, 0x4f51, 0xfc3f, 0xfd3f, 0x248f, 0x75ae, 0xfcbf,\n    0x0, 0x9797, 0xed1e, 0xfb57, 0x99f9, 0x7c3e, 0x2255, 0x404, 0x4400\n    );\n\nivec3 digit3 (in float d){\n    int id = int(d);\n    return ivec3(id/100,id%100/10,id%10);\n}\nint convert_character(vec2 texCoord, vec2 offset, ivec4 ns) {\n    vec2 tpos = (texCoord-offset/12.0) * 12.0;\n    tpos.y *= -1.0;\n    float ts = 1.0;\n    vec2 uvs = vec2(floor(tpos.x/1.0)*1.0,0.0);\n    bool tf = all(bvec4(lessThan(uvs,tpos),lessThan(tpos,uvs+ts)));\n    \n    vec2 p = floor(vec2(fract((tpos + uvs) / ts) * 5.0));\n    bool pd = p.x<4.0 && p.y<4.0;\n\n    float j = p.y * 4.0 + p.x;\n    int dn = int(tpos.x+1.0)-1;\n    int n = 0<=dn&&dn<4 ? ns[dn] : 10;\n    float nval = mod(float(dots[n]), exp2(j + 1.0));\n    bool nf = floor(nval / exp2(j)) == 1.0;\n\n    return int(tf && pd && nf);\n}\n\nvec3 hsv2rgb(in vec3 HSV)\n{\n    return ((clamp(abs(fract(HSV.r+vec3(0,2,1)/3.)*6.-3.)-1.,0.,1.)-1.)*HSV.g+1.)*HSV.b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texCoord = fragCoord.x*fragCoord.y<1.0 ? vec2(1.0) : uv;\n\n    vec4 col = texture(iChannel0, texCoord);\n    fragColor = vec4(col.rgb, 1.);\n\n\n    int charFlag = 0;\n    vec2 nCoord = (fragCoord * 2.0 - iResolution.xy)/min(iResolution.x,iResolution.y)+vec2(1.0,-1.0);\n    vec3 HSV = texture(iChannel0, vec2(0.0)).rgb;\n    vec3 RGB = hsv2rgb(HSV);\n    HSV *= vec3(360.,255.,255.);\n    RGB *= vec3(255.);\n\n    charFlag += convert_character(nCoord,vec2(0.5,-0.5), ivec4(14,15,16,17));\n    charFlag += convert_character(nCoord,vec2(4.5,-0.5), ivec4(digit3(HSV.r),18));\n    charFlag += convert_character(nCoord,vec2(8.5,-0.5), ivec4(digit3(HSV.g),18));\n    charFlag += convert_character(nCoord,vec2(12.5,-0.5), ivec4(digit3(HSV.b),10));\n\n    charFlag += convert_character(nCoord,vec2(0.5,-1.5), ivec4(11,12,13,17));\n    charFlag += convert_character(nCoord,vec2(4.5,-1.5), ivec4(digit3(RGB.r),18));\n    charFlag += convert_character(nCoord,vec2(8.5,-1.5), ivec4(digit3(RGB.g),18));\n    charFlag += convert_character(nCoord,vec2(12.5,-1.5), ivec4(digit3(RGB.b),10));\n    \n    vec4 charcol = vec4(vec3(0.0), 1.0);\n    fragColor = bool(charFlag) ? charcol : fragColor;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI2 = acos(-1.0)*2.0;\nconst float LenSq = 0.5;\nconst float inRad = (LenSq+0.05)*sqrt(2.0);\nconst float OutRad = 0.95;\nconst vec3 LenCurH = vec3(0.05,0.01,0.5);\nconst vec2 LenCurSV = vec2(0.06,0.03);\n\nvec3 Normalize(in vec2 coord)\n{\n    vec2 nCoord = (coord * 2.0 - iResolution.xy)/min(iResolution.x,iResolution.y);\n    float angle = fract(atan(nCoord.y,nCoord.x)/PI2+1.0);\n    return vec3(nCoord,angle);\n}\nvec3 hsv2rgb(in vec3 HSV)\n{\n    return ((clamp(abs(fract(HSV.r+vec3(0,2,1)/3.)*6.-3.)-1.,0.,1.)-1.)*HSV.g+1.)*HSV.b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 nCoords = Normalize(fragCoord);\n    vec3 nMouses = Normalize(iMouse.xy);\n    nMouses.xy += vec2(0.5);\n    vec3 nMousesClick = Normalize(abs(iMouse.zw));\n    vec3 HSVtmp = texture(iChannel0, vec2(0.0)).rgb;\n    nMouses.z = inRad<length(nMousesClick.xy) ? nMouses.z : HSVtmp.r;\n    nMouses.xy = length(nMousesClick.xy)<inRad ? clamp(nMouses.xy,vec2(0.0),vec2(1.0)) : HSVtmp.gb;\n    \n    float addrot = floor(mod(nMouses.z-0.25,1.0)*2.0)*0.5;\n    float lenZ = abs(mod(nMouses.z+addrot,1.0)-mod(nCoords.z+addrot,1.0));\n    float lenC = length(nCoords.xy);\n    bool circle = inRad<lenC && lenC<OutRad;\n    bool cursorH = lenZ<LenCurH.y/lenC && inRad-LenCurH.x<lenC && lenC<OutRad+LenCurH.x;\n    bool cursorHin = lenZ<LenCurH.y/lenC*LenCurH.z && circle;\n    cursorH = cursorH && !cursorHin;\n\n    float lenXY = length((nMouses.xy-vec2(0.5))-nCoords.xy);\n    bool square = abs(nCoords.x)<LenSq && abs(nCoords.y)<LenSq;\n    bool cursorSV = lenXY < LenCurSV.x;\n    bool cursorSVin = lenXY < LenCurSV.y;\n    cursorSV = cursorSV && !cursorSVin;\n    \n    \n    vec3 HSV = nMouses.zxy;\n    vec3 inCol = hsv2rgb(vec3(HSV.r,nCoords.xy+0.5));\n    vec3 outCol = hsv2rgb(vec3(nCoords.z,1.0,1.0));\n    vec3 selectedCol = hsv2rgb(HSV);\n    vec3 col = square ? inCol : outCol;\n    \n    bool alpha = !circle&&!cursorH && !square&&!cursorSV;\n    bool inside = max(abs(nCoords.x),abs(nCoords.y))<1.0;\n    col = alpha ? (inside ? vec3(0.5) : selectedCol) : col;\n    \n    col = cursorH||cursorSV ? vec3(1.0) : col;\n    col = cursorHin ? hsv2rgb(vec3(HSV.r,1.0,1.0)) : col;\n    col = cursorSVin ? selectedCol : col;\n    col = fragCoord.x*fragCoord.y<1.0 ? HSV : col;\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}