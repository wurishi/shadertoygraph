{"ver":"0.1","info":{"id":"3ldXzN","date":"1580533086","viewed":335,"name":"Voronoi with Adjustable Power","username":"adasba","description":"A simple voronoi shader with a parameter for adjusting how the \"closest\" point is calculated. Rather than using x^2+y^2 to calculate the distance between two points, this shader uses x^1.2+y^1.2 by default, which can be adjusted.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define POWER 1.2\n\nconst int pointCount = 32;\n\nvec2 points[pointCount];\n\nint taxicabVoronoi(vec2[pointCount] pts, vec2 position, inout float finalDist) {\n    float minDist = 999.9;\n    int minDistIndex = 0;\n    for (int i = 0; i < pointCount; i++) {\n        float dist = pow(abs(position.x - pts[i].x), POWER) + pow(abs(position.y - pts[i].y), POWER);\n        if (dist < minDist) {\n        \tminDist = dist;\n            minDistIndex = i;\n        }\n    }\n    finalDist = minDist;\n    return minDistIndex;\n}\n\nfloat n(inout float noiseSeed) {\n    noiseSeed = noiseSeed + 0.02342;\n    return (texture(iChannel0, vec2(noiseSeed))[0]);\n}\n\nvoid setPoints() {\n    float s = 0.0;\n\n    \n    int pc = pointCount;\n    for (int i = 0; i < pointCount; i++) {\n    \tpoints[i].x = (n(s) - 0.25) * 2.0 + cos(iTime * n(s) * 0.5) * 0.3;\n        points[i].y = (n(s) - 0.25) * 2.0 + cos(iTime * n(s) * 0.5) * 0.3;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tsetPoints();\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/max(iResolution.x, iResolution.y);\n    \n    //stuff for borders\n    float dist;\n    float idx = float(taxicabVoronoi(points, uv.xy, dist));\n    float idx2 = 0.0;\n    bool borderCondition = false;\n    for (float i = 0.0; i < 4.0; i++) {\n    \tfloat dist2;\n    \tidx2 = float(taxicabVoronoi(points, uv.xy - vec2(mod(i, 2.0) * 0.002 - 0.001, floor(i / 2.0) * 0.002 - 0.001), dist2));\n        borderCondition = borderCondition || (idx != idx2);\n    }\n   \n    float border = 0.0;\n    border += (borderCondition) ? 1.0 : 0.0;\n    // Output to screen\n    fragColor = vec4(vec3(idx / float(pointCount * 2) + border), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}