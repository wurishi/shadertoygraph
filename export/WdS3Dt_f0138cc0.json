{"ver":"0.1","info":{"id":"WdS3Dt","date":"1550223074","viewed":80,"name":"Test of sprites","username":"42n4","description":"Mix of these\nhttps://www.shadertoy.com/view/XdByzy\nhttps://www.shadertoy.com/view/ldX3zr","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sprite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat head(vec2 pos, vec2 uv)//rysowanie glowy\n{\n    vec2 v = pos-uv;\n    float d = dot(v, v) *10.-1.;\n    return smoothstep(0., 0.03, d*d);\n}\n\nfloat body(vec2 pos, vec2 uv)//rysowanie linji ciala\n{\n    vec2 v = pos - uv;\n    float dx = v.x*v.x;\n    float d = dot(v, v);\n    return clamp(smoothstep(0., .1, dx*100.)+smoothstep(.5, .6, d), 0., 1.);\n}\n\nvec2 rotation(vec2 p, float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle))*p;\n}\n\nfloat leg(vec2 pos, vec2 uv, float angle)//rysowanie linij nog\n{\n    vec2 v = rotation(pos - uv, angle) - vec2(0., .5);\n    float dx = v.x*v.x;\n    float d = dot(v, v);\n    return clamp(smoothstep(0., .10, dx*100.)+smoothstep(.2, .3, d), 0.5,\n1.);\n}\n\nfloat arm(vec2 pos, vec2 uv, float angle1, float angle2)//rysowanie linij rak\n{\n    vec2 v = rotation(pos - uv, angle1) - vec2(0., .35);\n    float dx = v.x*v.x;\n    float d = dot(v, v);\n    vec2 v2 = rotation(v - vec2(0., .35), angle2) - vec2(0., .35);\n    float dx2 = v2.x*v2.x;\n    float d2 = dot(v2, v2);\n    return clamp(smoothstep(0., .1, dx*100.)+smoothstep(.1, .15, d), 0., 1.)*\n        clamp(smoothstep(0., .1, dx2*100.)+smoothstep(.1, .15, d2), 0., 1.);\n}\n\nfloat stickman(vec2 pos, vec2 uv, float bass, float angle1, float\nangle2)//zebranie linij w czlowieka\n{\n    vec2 v = uv-pos;\n    float d = head(vec2(0., .8), v*1.5);\n    d *= body(vec2(0., -.1), v*2.);\n    d *= leg(vec2(0., -.8), v*2., angle1);\n    d *= leg(vec2(0., -.8), v*2., -angle1);\n    d *= arm(vec2(0., .65), v*2., angle2+bass, iTime+bass*2.);\n    d *= arm(vec2(0., .65), v*2., -(angle2+bass), -iTime+bass*2.);\n        return d;\n}\nvec2 center = vec2(2.0,5.0);\nfloat speed = 0.5;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv =\n(-1.+2.*fragCoord.xy/iResolution.xy)*vec2(iResolution.x/iResolution.y,\n1.8);\n\n    float bass = 0.;//obrot rak w rozne strony\n\n    for(float f = 0.; f <= .25; f += 1./100.)\n    {\n        bass += texture(iChannel0, vec2(f, .25)).x;\n    }\n\n    bass = -1.+2.*bass;\n\n   float invAr = iResolution.y / iResolution.x;\n\n\n\nvec3 col = vec4(uv,0.5-0.5*sin(iTime),1.0).xyz;\n\nvec3 texcol;\n\nfloat x = (center.x/uv.x);//od prawej strony szerokie linii do lewej wezsze i rowniejsze\nfloat y = (center.y+uv.y) *invAr;//wskazuje kierunek linij\nfloat r = -(x/x * y/y);//dodaje czarne linii\nfloat z = 0.5 + 1.5*sin((x+iTime*speed)/0.05);//dodaje szerokosc linij\n\n\ntexcol.y = z;//dodaje zolto-zielony kolor\ntexcol.z = z;//roznokolorowe\n\n    vec3 co = vec3(3.);\n\n    col *= stickman(vec2(-1.3, 0.), uv, bass, PI/8., PI/4.);//pozycja czlowieka na ekranie\n    col *= stickman(vec2(1.3, 0.), uv, bass, PI/8., PI/2.);\n\n    col *= vec3(sin(uv.x), cos(uv.x), sin(uv.x/uv.y));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}