{"ver":"0.1","info":{"id":"MlSBDw","date":"1515978508","viewed":231,"name":"Simple Checkerboard Grid","username":"Scoo","description":"Checkerboard and grid line rendering.\nUseful as building blocks and debug visualizations for other shaders.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Checkerboard and grid line rendering.\n\nconst float GRID_CELL_SIZE = 40.0;  // Should be a multiple of 2.\nconst float GRID_LINE_SIZE =  2.0;  // Should be a multiple of 2.\nconst vec3 CHECKERBOARD_COLOR1 = vec3(0.0, 0.0, 0.0);\nconst vec3 CHECKERBOARD_COLOR2 = vec3(1.0, 1.0, 1.0);\nconst vec4 GRID_LINE_COLOR = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec4 MOUSE_CELL_COLOR = vec4(1.0, 0.5, 0.0, 0.5);\n\n// Outputs a checkerboard pattern with the requested alpha.\nvec4 drawCheckerboard(vec2 fragCoord, float alpha) {    \n    vec2 gridCell = floor(fragCoord.xy / GRID_CELL_SIZE);\n    float cellMix = mod(gridCell.x + mod(gridCell.y, 2.0), 2.0);\n    return vec4(mix(CHECKERBOARD_COLOR1, CHECKERBOARD_COLOR2, cellMix), alpha);\n}\n\n// Outputs GRID_LINE_COLOR grid lines on a transparent background.\nvec4 drawGridLines(vec2 fragCoord) {\n    vec2 totalCells = iResolution.xy / GRID_CELL_SIZE;    \n    vec2 gridCell = floor(fragCoord.xy / GRID_CELL_SIZE);\n    vec2 gridPos = fragCoord.xy - gridCell * GRID_CELL_SIZE;\n    \n    // Neighboring cells contribute half of the line size.\n    if (gridPos.x < GRID_LINE_SIZE / 2.0 ||\n        gridPos.y < GRID_LINE_SIZE / 2.0 ||\n        gridPos.x > GRID_CELL_SIZE - GRID_LINE_SIZE / 2.0 ||\n        gridPos.y > GRID_CELL_SIZE - GRID_LINE_SIZE / 2.0) {\n        return GRID_LINE_COLOR;\n    } else {\n        return vec4(0.0);\n    }\n}\n\n// Draws the grid cell that the mouse is located within (when pressed).\nvec4 drawMouseGridCell(vec2 fragCoord) {\n    vec2 gridCell = floor(fragCoord.xy / GRID_CELL_SIZE);\n    vec2 mouseGridCell = floor(iMouse.xy / GRID_CELL_SIZE);\n    return mouseGridCell == gridCell ? MOUSE_CELL_COLOR : vec4(0.0);\n}\n\n// Blends `source` color into `dest` color, using `source` alpha.\n// `dest` alpha is ignored and the output alpha is 1.0.\nvec4 alphaBlend(vec4 dest, vec4 source) {\n    vec3 blended = (source.rgb * source.a) + (dest.rgb * (1.0 - source.a));\n    return vec4(blended, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Background color.\n    fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    \n    // Blend in each component. These can be rearranged or commented out.\n    fragColor = alphaBlend(fragColor, drawCheckerboard(fragCoord, 0.2));\n    fragColor = alphaBlend(fragColor, drawGridLines(fragCoord));\n    fragColor = alphaBlend(fragColor, drawMouseGridCell(fragCoord));\n}","name":"Image","description":"","type":"image"}]}