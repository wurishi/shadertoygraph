{"ver":"0.1","info":{"id":"MdlcDB","date":"1489789064","viewed":1610,"name":"Voronoi : Hexagons to polygons","username":"qmuntada","description":"Simple addition to Iq shader : https://www.shadertoy.com/view/MslGD8","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","hexagons","polygons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// Modified by qmuntada (2017)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\n// return distance, and cell id\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n\tvec3 m = vec3(8.0);\n    for(int j=-1; j<=1; j++)\n    for(int i=-1; i<=1; i++)\n    {\n        vec2  g = vec2(float(i), float(j));\n        vec2  o = hash(n + g) * (cos(iTime) + 1.0) / 2.0;\n        \n        if (mod(n.x, 2.0) - float(i) == -1.0 || mod(n.x, 2.0) - float(i) == 1.0)\n            o.y += 0.5;\n        \n       \tvec2  r = g - f + o;\n        \n\t\tfloat d = dot(r, r);\n        if(d < m.x)\n            m = vec3(d, o);\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n    \n    // computer voronoi patterm\n    vec2 c = voronoi( (14.0+6.0*sin(0.2*iTime))*p );\n\n    // colorize\n    vec3 col = 0.5 + 0.5 * cos(c.y * 3.0 + vec3(0.0,1.0,2.0) );\t\n    col *= clamp(1.0 - 0.5 * c.x * c.x, 0.0, 1.0);\n    col -= (1.0-smoothstep( 0.05, 0.05, c.x));\n\t\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}