{"ver":"0.1","info":{"id":"WlfBW2","date":"1597702383","viewed":147,"name":"g_1","username":"TRASHTRASH","description":"todays glsl exercise based off art of code tut ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glsl","gyroid","visuals","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//created by TRASHTRASH\n#define MAX_STEPS 128\n#define MAX_DIST 100.\n#define SURF_DIST 0.001\n\n#define THICK 0.01\n#define bias .5\n#define bpm 124.\n//based of tut from BigWIngs aka art of code\n//pt1\n\nfloat sdBox(vec3 p, vec3 s) {\n \tp=abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,max(p.y, p.z)), 0.);\n}\nfloat sdGyroid(vec3 p, float scale){\n   p*= scale;\n   float b = iTime*bpm/60.;\n   //mult scale by 2 cuz largest of mul distortion of \n   return abs(dot(sin(p*2.+b), cos(p.zxy*sin(1.6)+(b*1.5)))-bias)/(scale*3.)-THICK;\n}\n\nfloat map(vec3 p) {\n    float box = sdBox(p-vec3(0.,1.,0.), vec3(3.));\n    float g = sdGyroid(p, 10.);\n    float d = max(box, g*.3);\n    return d;\n}\n\nfloat RM(vec3 ro, vec3 rd) {\n   float t = 0.;\n   \n   for(int i=0;i<MAX_STEPS;i++){\n       vec3 p = ro + rd * t;\n       float s = map(p);\n       t += s;\n    }\n    return t; \n}\n\nvec3 norm(vec3 p) {\n float d = map(p);\n vec2 e = vec2(.01, 0.);\n vec3 n = d - vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx));\n return normalize(n);\n}\n\nfloat shade(vec3 p, vec3 rd) {\n    vec3 lightPos = vec3(0.,5.,-5.);\t\n    vec3 l = normalize(lightPos - p);\n   \tvec3 n = norm(p);\n    float col = 0.;\n    float dif = clamp(dot(n,l),0.,1.);\n    float fr = pow(1.0+dot(n, rd),4.0);\n    float sp = pow(max(dot(reflect(-l, n),-rd),0.0),80.);\n   \tfloat ao = (1.0 - fr);\n   \tfloat fd = 1.0 - dif;\n   \tcol = sp + max(fr, 0.5) + dif * ao;\n \treturn col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n \tvec2 uv = (fragCoord-0.5 *iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n   \tvec3 ro = vec3(0.,1.,-5.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    float d = RM(ro, rd);\n    if(d<MAX_DIST) {\n      vec3 p = ro + rd * d;\n      vec3 c1 = vec3(1.,.27,0.);\n  \t  float dif = shade(p, rd);\n      col = vec3(dif)*c1+(sin(p.y+0.5))/2.;\n        //lol\n       col*=col*col*col*col*col;\n    }\n\t\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}