{"ver":"0.1","info":{"id":"3scXRj","date":"1572306971","viewed":81,"name":"Ultra Sin Wave","username":"santiagoap","description":"Third Shader ever on shadertoy! A practice to Sin Funcitons applied on shaders.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wave","sin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//creacion de rectangulo para deformar\nvec3 RectMask(vec2 uv, vec2 offset, vec2 size, float blur) \n{\n    uv -= offset; //aplicar offset del cuadrado\n    \n    //ajustar los offsets para que escale desde el medio\n    float startX = -size.x/2.; \n    float endX = size.x/2.;\n    float startY = -size.y/2.;\n    float endY = size.y/2.;\n    \n    //ajustar cada borde del rectangulo\n    float left = smoothstep(startX - blur, startX, uv.x);\n    float right = smoothstep(endX + blur, endX, uv.x);\n    float down = smoothstep(startY - blur, startY, uv.y);\n    float up = smoothstep(endY + blur, endY, uv.y);\n    \n    //obtener el resultado de cada eje\n    vec3 horizontalResult = vec3(left * right);\n    vec3 verticalResult = vec3(down * up);\n    \n    //multiplicar los ejes para devolver la mascara del rectangulo\n    return horizontalResult * verticalResult;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5); //Offset al medio de la pantalla\n    uv.x *= iResolution.x/iResolution.y; //ajustar a la resolucion de la pantalla\n    \n    float x = uv.x; //coordenada x\n    float y = uv.y; //coordenada y\n    float y2 = uv.y; //coordenada y prima para poder crear dos waves distintas.\n    \n    /* cuadratica\n    float m = (x - .5) * (x + .5); \n    y += m * m * 2.; */\n    \n    float sinTime = (sin(iTime) + 1./2.); //0 < seno del tiempo > 1\n    \n    float m = sin(x * sinTime * 10.);\n    y += m * sinTime / 4.;\n    \n    float m2 = sin(x * iTime * 10.);\n    y2 += m2 * sinTime / 4.;\n\n    vec3 mask2 = RectMask\n        (vec2(x,y2),\n         vec2(0.),\n         vec2(1.4 * sinTime,0.01 * sinTime),\n         0.01);\n    vec3 mask = RectMask\n        (vec2(x,y), \n         vec2(0.), \n         vec2(1.4 * sinTime,0.01 * sinTime),\n         0.01);\n\n    vec3 colorMask1 = vec3(sinTime / 0.3,0.5,0.);\n    mask *= colorMask1;\n    vec3 colorMask2 = vec3(1.,0.4 * sinTime,0.);\n    mask2 *= colorMask2;\n    mask += mask2;\n    \n    fragColor = vec4(mask,1.0);\n}","name":"Image","description":"","type":"image"}]}