{"ver":"0.1","info":{"id":"fstBRf","date":"1656946193","viewed":254,"name":"Colourspace Torus","username":"mla","description":"Map uv coordinates to points on a torus in RGB space (with mirrored repeats in all directions).\n\nMouse changes orientation of torus.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["torus","colorspace","colourspace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////////////\n//\n// Colourspace Torus, mla, 2022\n//\n// Map uv coordinates to points on a torus in RGB space (with \n// mirrored repeats in all directions).\n//\n// Since it's a torus, colours wrap around smoothly at top and bottom,\n// and at left and right.\n//\n// Mouse changes orientation of torus.\n//\n/////////////////////////////////////////////////////////////////////\n\nvec3 map(vec2 uv) {\n  // uv in range [-1,1]\n  float lambda = PI*uv.x;\n  float phi = PI*uv.y;\n  float r = 2.0;\n  float R = 1.0;\n  vec3 p = vec3(vec2(R,0)+rotate(vec2(r,0),lambda),0);\n  p.xz = rotate(p.xz,phi);\n  return 0.2*p; // Scale\n}\n\n// Based on http://www.oscars.org/science-technology/sci-tech-projects/aces\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return m2*(a/b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.xy;\n    vec2 uv0 = uv;\n    uv.y += 0.1618*iTime;\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.xy;\n    vec3 p = normalize(vec3(1,1,1));\n    p.xy = rotate(p.xy,PI*mouse.x);\n    p.yz = rotate(p.yz,PI*mouse.y);\n    vec3 q = cross(p,vec3(0,0,1));\n    vec3 r = cross(p,q);\n    vec3 col = mat3(p,q,r)*map(uv);\n    col += 0.5*iTime*p;\n    // Mod and mirror\n    col = mod(col,2.0);\n    col = min(col,2.0-col);\n    col = smoothstep(0.0,1.0,col);\n    col *= 0.9+0.1*texture(iChannel0,uv0).x;\n    col = aces_tonemap(2.0*col);\n    col = clamp(col,0.0,1.0);\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159;\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}","name":"Common","description":"","type":"common"}]}