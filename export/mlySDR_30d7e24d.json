{"ver":"0.1","info":{"id":"mlySDR","date":"1686034813","viewed":162,"name":"Chef's First Shader","username":"lrbender01","description":"First shader based on playing around with what's taught in kishimisu's tutorial video: https://www.youtube.com/watch?v=f4s1h2YETNY","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Palette function based on https://iquilezles.org/articles/palettes/\n// Interactive palette http://dev.thi.ng/gradients/\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n    \n    return a + (b * cos(6.28318 * (c * t + d)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Set up coords and variables ==============\n    \n    // Get uv coordinates 0 to 1 for entire screen\n    vec2 uvCoord = fragCoord / iResolution.xy;\n    // Translate origin to center and scale coordinates to -1 to 1\n    uvCoord = (uvCoord - 0.5) * 2.0;\n    // Scale coordiantes to aspect ratio\n    uvCoord.x *= iResolution.x / iResolution.y;\n    \n    vec2 uv0 = uvCoord;\n    vec3 finalColor = vec3(0.0);\n    \n    // Calculate color ==========================\n    for (float i = 0.0; i < 3.0; i++) {\n        uvCoord = fract(uvCoord * 1.3) - 0.5;\n        \n        // Hit the fractals with some stank\n        uvCoord *= exp(sin(iTime * 0.4));\n        \n        float dist = length(uvCoord);\n        \n        dist *= exp(-length(uv0));\n\n        // Get color based on length from center of the screen and time\n        vec3 paletteColor = palette(length(uv0) + dist + (i * iTime * 0.2));\n\n        // Scale length from center based on concentric rings\n        float sinScale = 15.0;\n        dist = sin(-(dist * sinScale) + iTime) / sinScale;\n        dist = abs(dist);\n\n        // Clip colors to be very beight or dark\n        dist = pow(0.01 / dist, 1.2);\n\n        finalColor += paletteColor * dist * 0.5;\n    }\n    \n\tfragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}