{"ver":"0.1","info":{"id":"Wt23W1","date":"1559377672","viewed":420,"name":"React||Diffuse","username":"Hadyn","description":"My first attempt at reaction diffusion! Click and drag to take control of the doodler.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float value = texture(iChannel0, uv).y;\n    value = smoothstep(0.1, 0.2, value);\n    fragColor = vec4(value);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    if(iFrame == 0)\n    {\n    \tvec2 uv = fragCoord/iResolution.xy;\n    \t//fragColor = vec4(1.0, smoothstep(0.4, 0.8, texture(iChannel1, uv).y), 0.0, 1.0);\n        return;\n    }\n    \n    ReactAndDiffuse(fragCoord, iChannel0, iResolution.xy, iTimeDelta, fragColor);\n    \n    \n    vec2 doodlePosition = iMouse.xy;\n    if(iMouse.z > .5)\n    {\n        doodlePosition = iMouse.xy;\n    }\n    else\n    {\n        float xt = sin(DoodleRate*iTime);\n        doodlePosition.x = 0.5 * iResolution.x + 0.25*iResolution.x*xt;\n        doodlePosition.y = 0.5 * iResolution.y + 0.075*iResolution.x*(sin(2.0*DoodleRate*iTime));\n    }\n    \n    fragColor.y += clamp(1.0 - length(fragCoord - doodlePosition)/(0.035*iResolution.y), 0.0, 1.0);\n    \n    fragColor.x = clamp(fragColor.x, 0.0, 1.0);\n    fragColor.y = clamp(fragColor.y, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec2 DiffusionRate = vec2(1.0, 0.5);\nconst float FeedRate = .055;\nconst float KillRate = .062;\nconst float Step = 40.0;\nconst float DoodleRate = 2.0;\nconst float PI = 3.14159;\nconst float HalfPI = 1.5708;\n\nvoid ComputeLaplacian(vec2 uv, sampler2D sampler, vec2 resolution, out vec2 laplacian)\n{\n    vec2 texelSize = vec2(1.0)/resolution;\n    laplacian =  texture(sampler, uv + vec2(-texelSize.x, texelSize.y)).xy * 0.05;\n    laplacian += texture(sampler, uv + vec2(texelSize.x, \ttexelSize.y)).xy * 0.05;\n    laplacian += texture(sampler, uv + vec2(-texelSize.x, -texelSize.y)).xy * 0.05;\n    laplacian += texture(sampler, uv + vec2(texelSize.x, \t-texelSize.y)).xy * 0.05;\n    laplacian += texture(sampler, uv + vec2(-texelSize.x, 0)).xy * 0.2;\n    laplacian += texture(sampler, uv + vec2(texelSize.x, \t0)).xy * 0.2;\n    laplacian += texture(sampler, uv + vec2(0, texelSize.y)).xy * 0.2;\n    laplacian += texture(sampler, uv + vec2(0, -texelSize.y)).xy * 0.2;\n    laplacian -=  texture(sampler, uv).xy;\n}\n\nvoid ReactAndDiffuse(vec2 fragCoord, sampler2D sampler, vec2 resolution, float timeDelta, out vec4 fragColor)\n{    \n    vec2 uv = fragCoord/resolution;\n    vec2 laplacian;\n    ComputeLaplacian(uv, sampler, resolution, laplacian);\n    \n    vec2 current = texture(sampler, uv).xy;\n    \n    float feedRate = FeedRate;    \n    float killRate = KillRate;\n    feedRate = FeedRate + mix(-1.0, 1.0, uv.x)*0.04;\n        \n    vec2 reaction;    \n    reaction.x = - current.x * current.y * current.y + feedRate * (1.0 - current.x);\n    reaction.y = current.x * current.y * current.y - (feedRate + killRate) * current.y;\n            \n    fragColor.xy = current + (DiffusionRate * laplacian + reaction) * Step * timeDelta;\n    fragColor.x = clamp(fragColor.x, 0.0, 1.0);\n    fragColor.y = clamp(fragColor.y, 0.0, 1.0);\n    \n    fragColor.zw = vec2(0.0, 1.0);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    if(iFrame == 0)\n    {\n    \tvec2 uv = fragCoord/iResolution.xy;\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n    \n    ReactAndDiffuse(fragCoord, iChannel0, iResolution.xy, iTimeDelta, fragColor);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    if(iFrame == 0)\n    {\n    \tvec2 uv = fragCoord/iResolution.xy;\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n    \n    ReactAndDiffuse(fragCoord, iChannel0, iResolution.xy, iTimeDelta, fragColor);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    if(iFrame == 0)\n    {\n    \tvec2 uv = fragCoord/iResolution.xy;\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n    \n    ReactAndDiffuse(fragCoord, iChannel0, iResolution.xy, iTimeDelta, fragColor);\n}","name":"Buffer D","description":"","type":"buffer"}]}