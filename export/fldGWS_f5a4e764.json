{"ver":"0.1","info":{"id":"fldGWS","date":"1636713155","viewed":130,"name":"⚛️🧬🔬🌎 Scale Universe 🪐☀️⭐🌌","username":"rmmcal","description":"Scale of the Universe","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["scale","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//   ...  ⚛️🧬🔬🌎 Scale Universe 🪐☀️⭐🌌 ...       ////\n/////////////////////////////////////////////////////////////\n// Brasil/Amazonas/Manaus\n// Created by Rodrigo Cal (twitter: @rmmcal)\n// - Published: 2021/11\n// https://www.shadertoy.com/view/fldGWS\n/////////////////////////////////////////////////////////////\n\n\nconst float pi = 3.1415926;\nconst float pi2 = 2.*pi;\nconst float rad = pi/180.;\nvec2 fc; \nfloat mt ;\nmat2 rotate(float x){\n    float c = cos(x);\n    float s = sin(x);\n    return mat2(c,s,-s,c);\n}\nmat3 rotateX(float x){\n    mat3 m = mat3(1,0,0,0,1,0,0,0,1);\n    m[0].xy *= rotate(x);\n    m[1].xy *= rotate(x);\n    return m;\n}\nvec4 v(float v){\n    return vec4(v, 0.,0.,0.);\n}\nvec4 v(float v, float v2){\n    return vec4(v, v2, 0.,0.);\n}\n\nvec4 vmin(vec4 v1, vec4 v2){\n    return v1.x < v2.x ? v1 : v2;\n}\n\nvec4 vmin(vec4 v1, float v2){\n    return v1.x < v2 ? v1 : v(v2);\n}\n\nvec4 vmin(vec4 v1, float v2, float v3){\n    return v1.x < v2 ? v1 : v(v2,v3);\n}\n\n//////////////////////////////////\n//https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//////////////////////////////////\n \n\nvec4 dist(vec3 p)\n{\n    vec4 d = v(100.);\n    p.xz *= rotate(iTime);\n    \n    p.xz *= rotate(-iTime);\n   \n    vec3 tp = p*0.5;\n  \n    float nx = ( sin(atan(tp.z,tp.x)) ) ;\n    float ny = ( sin(atan(tp.y,tp.x)) );\n   \n    float f;\n    f = 0.;\n    vec3 pk = p*2.0*vec3(1.,1.0,1.0)+vec3(1.);\n    float f2 = .18-abs(sin(pk.x)*cos(pk.y)+sin(pk.y)*cos(pk.z)+sin(pk.z)*cos(pk.x))/10.0;\n    pk = p*144.0*vec3(1.,1.0,1.0)+vec3(1.);\n    f2 += .01-abs(sin(pk.x)*cos(pk.y)+sin(pk.y)*cos(pk.z)+sin(pk.z)*cos(pk.x))/190.0;\n   \n    f = clamp(f+.05,0.,3.0);\n    f2 = clamp(f2 , 0., .2);\n  \n    vec3 pq = p*500.0;\n    float fv0 = .001-abs(sin(p.x)*cos(pq.y)+sin(pq.y)*cos(pq.z)+sin(pq.z)*cos(pq.x)+cos(iTime+pq.x))/800.0;\n    \n    float s = 500.0;\n    d = vmin(d, (length(p)-2.0 ) +  - 0.1   +fv0     , 1.0 );\n    d = vmin(d, (length(p)-2.0 ) +(f2-.13)*2.0, 2.0 );\n\n    pk = p*4.0*vec3(1.,1.0,1.0)+vec3(1.);\n    f2 = .01-abs(sin(pk.x)*cos(pk.y)+sin(pk.y)*cos(pk.z)+sin(pk.z)*cos(pk.x))/190.0;\n  \n    d = vmin(d, (length(p+cos(p*vec3(110.0,80.0,.0))*0.006-vec3(0.0,0.,-2.0))-.12 ), 3.0 );\n\n    d = vmin(d, (length(p-vec3(30.0,0.,-2.0))-3.0 ) +(f2-.13)*2.0, 2.0 );\n     \n    d = vmin(d, (length(p-vec3(-80.0,0.,-2.0))-22.0 ) +(f2-.13)*2.0, 6.0 );\n   \n    d = vmin(d, (length(p-vec3(-180.0,0.,-2.0))-18.0 ) +(f2-.13)*2.0, 7.0 );\n    d = vmin(d, (sdTorus((p-vec3(-180.0,00.,-2.0))*rotateX(0.5)*vec3(.25,1.0,0.25),vec2(8.,2.0))-1.0 ) , 8.0 );\n  \n     \n    d = vmin(d, (length(p-vec3(400.0,0.,-2.0))-150.0 ), 5.0 );\n\n    vec3 c = vec3(10.0*((1.0 - mt)*.7+.3));\n    \n    vec3 q = mod((p+c/2.0)+0.5*c,c)-0.5*c;\n    d = vmin(d, max((length(q)-.3), -(length(p-vec3(0.0,0.,.0))-1540.0 )) , 9.0 );\n \n    d = vmin(d, max((length(q-vec3(.2,0.2,0.0))-.2), -(length(p-vec3(0.0,0.,.0))-1540.0 )) , 9.0 );\n    d = vmin(d, max((length(q+vec3(.2,0.2,0.0))-.2), -(length(p-vec3(0.0,0.,.0))-1540.0 )) , 9.0 );\n \n    return d;\n}\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0., 0.01);\n    float x = dist(p-d.yxx).x;\n    float y = dist(p-d.xyx).x;\n    float z = dist(p-d.xxy).x;\n    return normalize(vec3(x,y,z)-dist(p).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime+39.0;\n    vec2 uv = fragCoord/iResolution.xy;\n    fc = uv;\n    vec2 pc = (uv-.5)*vec2(1, iResolution.y/iResolution.x);\n    vec3 p = vec3(0,0.,-10);\n    vec3 d = normalize(vec3(pc,1.0));\n    \n    p = vec3(0,0.,-2.2)+vec3(0,0.,-2550)* pow(smoothstep(0.,40.0,fract(time/40.0)*40.0),2.0);\n  \n    d = mix(d, normalize(d-vec3(0.,0.,0.995)) , \n        smoothstep( 22.,35.0, fract(time/40.0)*40.0)  \n                *\n        (1.0 - smoothstep( 33.,35.0, fract(time/40.0)*40.0) )\n    );\n    \n    d = mix(d, normalize(d-vec3(0.,0.,0.95)) , \n        smoothstep( 38.,40.0, fract(time/40.0)*40.0)  \n                *\n        (1.0 - smoothstep( 40.,43.0, fract(time/40.0)*40.0) )\n    );\n     \n    mt =  smoothstep( 33.,37.0, fract(time/40.0)*40.0) ;\n    \n    vec3 c;\n    \n    \n    {\n    ///////////////////////////////////////////////////\n        // https://www.shadertoy.com/view/XlfGRj\n        vec2 uv=fragCoord.xy/iResolution.xy-.5;\n        uv.y*=iResolution.y/iResolution.x;\n\n        vec3 v=vec3(0.);\n        vec3 p=vec3(1.,.52,.5)+.1*d;\n        float pa,a;\n        for (int i=0; i<25; i++) { \n            p=abs(p)/dot(p,p)-0.5; \n            a+=abs(length(p)-pa);  \n            pa=length(p);\n        }\n        a*=a*a; \n        v+=vec3(0.0002*a*.01)*vec3(1.,0.9,1.5); \n        c = v;\n     ///////////////////////////////////////////////////\n    }\n    \n    \n    float t = 0.;\n    vec4 q;\n    for (int i = 0 ; i < 60; i++)\n    {\n        q = dist(p);\n        float h=q.x; \n        if (h < 0.01)\n         break;\n        t+=h;\n        p += d*h;\n    }\n    \n    if (t < 1150.0)\n        c *= 0.0 ;\n    \n    if (q.y == 1.0)\n    {\n        c += ( getNormal(p).z )*vec3(0.1,.5,1.);\n    } \n    if (q.y == 2.0)\n    {\n        c += ( getNormal(p).z )*vec3(0.,.8,0.5);\n    }\n    if (q.y == 3.0)\n    {\n        c += ( getNormal(p).z )*vec3(0.7,0.5,0.1);\n    }\n    if (q.y == 4.0)\n    {\n        c += ( getNormal(p).z )*vec3(0.9,0.8,0.1);\n    }  \n    if (q.y == 5.0)\n    {\n        vec3 pk = vec3(fc.xy*100.0,1.0);\n        pk = p/10.0;\n        float f2 = .4-abs(sin(pk.x)*cos(pk.y)+sin(pk.y)*cos(pk.z)+sin(pk.z)*cos(pk.x))/1.0;\n        c += (( getNormal(p).z*3.0 ))*vec3(0.9,0.8,0.1)*3.;\n        c = clamp(c,vec3(0.),vec3(1.));\n        c += abs(cos(f2+iTime)*0.25+.75)*vec3(1.,.5,.5)*1.;\n    }  \n    if (q.y == 6.0)\n    {\n        \n        c += ( getNormal(p).z )*vec3(0.9,0.5,0.1)*1.;\n    } \n    if (q.y == 7.0)\n    {\n        \n        c += ( getNormal(p).z )*vec3(0.4,0.5,1.1)*1.;\n    } \n    if (q.y == 8.0)\n    {\n        \n        c += ( getNormal(p).z )*vec3(0.5,0.9,0.9)*1.;\n    } \n    if (q.y == 9.0)\n    {\n        c += ( getNormal(p).z/(t/50.0) )*vec3(1.)*1.;\n    } \n    \n    c = mix(c, vec3(0.7, 0.5, 0.1), smoothstep( 35.,40.0, fract(time/40.0)*40.0)  );\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}