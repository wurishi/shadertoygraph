{"ver":"0.1","info":{"id":"4XBBzw","date":"1729274854","viewed":241,"name":"cosmic light particle","username":"nayk","description":"source https://www.shadertoy.com/view/MdXSzS","likes":6,"published":3,"flags":0,"usePreview":1,"tags":["fractal","particle","cosmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define loops 24\n#define step .01\n#define stepAmount .01\n#define timeSpeed 1.\n#define tile_factor 0.2\n#define noise_factor 0.03\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define R2(p,a,t) mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a)\n#define H2(h) (cos((h)*6.3+vec3(0,23,21))*5.5+.5)\n\nfloat happy_star(vec2 uv, float anim)\n{\n \n    uv = abs(uv);\n     \n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nfloat easeFade(float x)\n{\n    return 1.-(2.*x-1.)*(2.*x-1.)*(2.*x-1.)*(2.*x-1.);\n}\nfloat holeFade(float t, float life, float lo)//lifeOffset\n{\n    return easeFade(mod(t-lo,life)/life);\n}\nvec2 getPos(float t, float life, float offset, float lo)\n{\n    return vec2(cos(offset+floor((t-lo)/life)*life)*iResolution.x/2.,\n    sin(2.*offset+floor((t-lo)/life)*life)*iResolution.y/2.);\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .52)) * 0.02;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\nvec4 o=fragColor;\nvec2 u=fragCoord;\nvec2 F=u;\nvec2 C=fragCoord;\n\nvec4 O;\n O=vec4(0);\n vec3 p3,r=iResolution,c=vec3(0),\n    d=normalize(vec3((C-.5*r.xy)/r.y,.7));\n    float i=0.,s2,e,g=0.,t3=-iTime;\n\tfor(;i++<90.;){\n        p3=R2(g*d,normalize(H2(t*1.1)),0.);\n  \n    p3.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n        p3=asin(.7*sin(p3));\n        s2=2.5+sin(.5*t+3.*sin(t*2.))*.5;\n      \n        for(int i=0;i++<6;p3=p3*e-vec3(2.2,.5+cos(iTime*0.1),3.5))\n            p3=abs(p3),\n            \n            p3=p3.x<p3.y?p3.zxy:p3.zyx,\n              p3=p3.y<p3.z?p3.xzy:p3.xyz,\n                p3=p3.y<p3.z?p3.xzy:p3.xyz,\n                \n            s2*=e=2.0;\n          \n        g+=e=abs(length(p3.xzxz)-.13)/s2+2e-5;\n\t    c+=mix(vec3(1),H(p3.z*.5+t*.1),.4)*.02/exp(.5*i*i*e);\n\t}\n\tc*=c;\n    O=vec4(c,1);\n    float j = .8, \n          k = 1.5;\n vec2 uv2 = fragCoord/iResolution.xy;\n    vec2 cenUv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n\n    vec4 col3;\n    col3 = texture(iChannel0, uv2);\n    for (int i = 0; i < loops; i++) {\n        col3 += texture(iChannel0, uv + (cenUv * -length(cenUv * (((sin(iTime * timeSpeed) + 1.) * step) + (float(i) * stepAmount)))));\n    }\n    col3 /= float(loops + 1);\n    \n    col3.x += texture(iChannel0, uv + vec2(.005, 0.)).x;\n    col3.y += texture(iChannel0, uv + vec2(0., .005)).y;\n    col3.z += texture(iChannel0, uv + (cenUv * -length(cenUv * .005))).z;\n    \n    col3 /= 2.;\n    vec2 n = iResolution.xy, \n         p = k*(u+u-n)/n.y;\n               \n    mat2 m = mat2(j, -1, 1, o = 0.*o + j);  \n\n    for (o.z = k + p.y/4.; j < 1e2; j *= k)\n        p = (k*p - .2*iTime - j) * m,\n        n *= m,\n        \n        n += sin(p + n),\n        o += o.zxyw*dot(cos(p + n), p/p)/9./j;\n        \n    o = 1.-exp(-4.*o*o);\n     vec2 R = iResolution.xy; \n    o-=o;\n    for(float d,t = -iTime*.01, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( F - R *.5 ) / R.y *d ,i,0 ) * 28.;            \t\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n                    -vec4( 7.-.2*sin(t) , 6.3 , .7 , 1.-cos(t/.8))/7.);\t\n       o -= c * c.yzww  * d--*d  / vec4(3,5,1,1);                     \n    }\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n  vec2 coord = fragCoord * 2. - iResolution.xy;\n    // Normalized pixel coordinates (from 0 to 1)\n \n\n    coord.xy*=ma;\n    coord.xy*=mat2(cos(iTime*0.1), sin(iTime*0.1), -sin(iTime*0.1), cos(iTime*0.1));\n    float holeSize = iResolution.y/10.;\n    float holeLife = 2.;\n    \n    \n    vec3 final;\n    for (int i = 0; i<10; i++) {\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(float(i),2.*float(i)+4.,4.*float(i)+16.));\n\n        float s = holeSize;\n        float lifeOffset = float(i)/2.;\n\n        vec2 pos = getPos(iTime, holeLife, float(i)*4.5,lifeOffset);\n\n        float d = distance(coord,pos)/s;\n        d = 1./d-.1;\n        \n        final += mix(vec3(0),col, d)*holeFade(iTime,holeLife,lifeOffset);\n    }\n    \n\tfloat s = 0.0;\n\tfor (int i = 0; i < 50; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, (iTime*0.011));\n\t  p.xy*=ma;\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)+o.xyz*col3.xyz*O.xyz;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\tvec2 v = iResolution.xy;\n         u = .2*(u+u-v)/v.y;    \n         \n    vec4 z = o = vec4(1,2,3,0);\n     \n    for (float a = .5, t = iTime, i; \n         ++i < 19.; \n         o += (1. + cos(z+t)) \n            / length((1.+i*dot(v,v)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t))\n         )  \n        v = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,                 \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 250.;\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n\tfragColor=vec4(min(pow(abs(col*o.xyz), vec3(1.2)), 1.0)*final*5.515, 1.0);\n      \n       uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 0.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(happy_star(uv, anim) * vec3(1.0,1.0,1.0)*0.052, 1.0);\n}","name":"Image","description":"","type":"image"}]}