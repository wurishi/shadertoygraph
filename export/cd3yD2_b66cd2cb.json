{"ver":"0.1","info":{"id":"cd3yD2","date":"1695476458","viewed":47,"name":"cam controls (rotor/quaternion)","username":"DeltaT","description":"might be a few faults here and there","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","quaternion","rotor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 32.\n\n// (for bivectors: x = yz, y = zx, z = xy)\n\nvec3 rotSandwich(vec3 v, vec4 R) {\n    vec3 i = cross(R.xyz, v); // inner part rotated 90 degrees (multiplied by bivector), so this is actually the inner product\n    return v + 2.*(R.w * i + cross(R.xyz, i));\n}\n\nvec4 rotStack(vec4 Q, vec4 R) {\n  return vec4(Q.w*R.xyz + R.w*Q.xyz + cross(Q.xyz, R.xyz), Q.w*R.w-dot(Q.xyz, R.xyz));\n}\n\nfloat distBox(vec3 p, float r) {\n    vec3 p1 = abs(p);\n    float d = length(max(p1-r, 0.));\n    float dsigned = min(max(max(p1.x-r, p1.y-r), p1.z-r), 0.);\n    return d + dsigned;\n}\n\nfloat distSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat distScene(vec3 p) {\n    return min(max(distBox(p, 1.), -distSphere(p, 1.3)), distSphere(p, 1.));\n}\n\nfloat rayMarch(vec3 pos, vec3 rd) {\n    float d = 0.;\n    while (d <= MAX_DIST) {\n        vec3 p = pos + rd*d;\n        float ds = distScene(p);\n        if (ds <= 0.001) { break; }\n        d += ds;\n    }\n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    float d = distScene(p);\n    vec3 n = d-vec3(distScene(p-e.xyy), distScene(p-e.yxy), distScene(p-e.yyx));\n    return normalize(n);\n}\n\nvec3 render(vec3 campos, vec4 rot, vec2 coord) {\n    vec3 raydir = rotSandwich(normalize(vec3(coord.x, 1.5, coord.y)), rot);\n    float d = rayMarch(campos, raydir);\n    if (d >= MAX_DIST) { return vec3(0); }\n    vec3 p = campos + raydir * d;\n    \n    vec3 n = getNormal(p);\n    vec3 light = campos+vec3(1);\n    float diff = dot(n, normalize(light-p));\n    return vec3(diff);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)*2./iResolution.yy;\n    vec2 mouse = (iMouse.xy-iResolution.xy/2.)*2./iResolution.yy;\n    \n    vec4 dir = rotStack(vec4(0, 0, sin(-mouse.x), cos(-mouse.x)), vec4(sin(mouse.y), 0, 0, cos(mouse.y)));\n    vec3 campos = rotSandwich(vec3(0, -4, 0), dir);\n    \n    vec3 col = render(campos, dir, uv);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}