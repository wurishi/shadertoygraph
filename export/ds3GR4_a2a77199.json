{"ver":"0.1","info":{"id":"ds3GR4","date":"1677033511","viewed":102,"name":"Filled Julia Set Explorer","username":"memdbp","description":"Explore convergence. Click and move the mouse to adjust the value of c","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// function is defined as f(x) = x^2 + c where c is some complex number\n// The x and y coordinates here represent the value of the complex variable x input into f(x)\n// If the function f(x) is repeatedly composed with itself converges to a value then it is colored blue\n\n\n// complex multiplication\nvec2 mult( vec2 i, vec2 j ){\n    return vec2( (i.x*j.x - i.y*j.y) , (i.x*j.y + i.y*j.x) );\n}\n// f(x) = x^2 + c\nvec2 f( vec2 i , vec2 c ){\n    return mult(i,i) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1) based on y-axis\n    vec2 coord = (2.*fragCoord-iResolution.xy ) / iResolution.y;\n    vec2 mouse = fragCoord/iMouse.xy;\n    vec3 col = vec3(0.,0.,0.);\n    \n    // Set complex number c in f(x) to change with time. This code kinda traces semicircles in an interesting area\n    vec2 complexnum = vec2(-0.5+abs(sin(iTime+13.))*-0.3+sin(iTime*0.7+2.5)*.1,cos(iTime+.233)*0.2);\n    // Set complex number c in f(x) based on mouse coords\n    if(iMouse.z > 0.) {\n        complexnum = (2.*iMouse.xy-iResolution.xy ) / iResolution.y;\n    }\n    \n    // Julia tyme\n    vec2 pt=coord;\n    int j = 0;\n    // Iterate f on the pixel coord until it diverges\n    while(abs(pt.x)<=2. && j<256) {\n        j += 1;\n        pt = f(pt,complexnum); \n    }\n    col = vec3(0.1,0.91,0.98)/30.0*float(j);\n    \n    // Draw Coordinate Lines on the coord plane\n    if (abs(coord.x) < 0.005 || abs(coord.y) < 0.005) {\n        col = vec3(1.0);\n    }\n    \n    // Dot represents the complex number in f(x)\n    if(distance(complexnum,coord) <= 0.05) {\n    col = vec3(1.,0.,0.);\n    }\n    \n    // Output\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}