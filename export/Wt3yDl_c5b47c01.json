{"ver":"0.1","info":{"id":"Wt3yDl","date":"1723551901","viewed":66,"name":"Sound reactive raymarch fractal","username":"Lehdari","description":"Different frequencies produce different shapes and colors","likes":0,"published":1,"flags":4,"usePreview":0,"tags":["fractal","raymarch","sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 fold(in vec3 p, in vec3 n, in float d)\n{\n    p -= 2.0 * min(0.0, dot(p+n*d, n)) * n;\n    return p;\n    \n    /*float t = dot(p+n*d, n);\n    if (t<0.0) { p-=2.0*t*n; }\n    return p;*/\n}\n\nfloat fractalSphere(in vec3 p)\n{\n    for (int i=0; i<16; ++i) {\n        float fi = float(i)+1.0;\n        p = fold(p, normalize(vec3(\n            cos(iTime*fi*0.01238479 - 0.72134),\n            sin(iTime*fi*0.03423685 + 3.4324685),\n            cos(iTime*fi*0.0236234 + 5.3284796))),\n            1.5*exp(-fi*0.1)*texelFetch(iChannel0, ivec2(i*16,0), 0).x);\n        /*p = fold(p, normalize(vec3(\n            -0.25+texelFetch(iChannel0, ivec2(4*i,0), 0).x,\n            -0.25+texelFetch(iChannel0, ivec2(4*i+1,0), 0).x,\n            -0.25+texelFetch(iChannel0, ivec2(4*i+2,0), 0).x)),\n            -0.25+2.0*texelFetch(iChannel0, ivec2(4*i+3,0), 0).x);*/\n        //p = fold(p, normalize(vec3(cos(iTime*fi*0.0238479 - 0.72134)*2.0, sin(iTime*fi*0.0423685), cos(0.1+iTime*fi*0.036234))), 2.0*exp(-fi));\n        //p = fold(p, normalize(vec3(cos(iTime*0.071273545*fi), sin(iTime*0.0834721543*fi), fi/8.933352*cos(iTime*0.1))), 0.1*fi);\n    }\n    return sdOctahedron2(p, 1.0);\n}\n\nfloat df(in vec3 p)\n{\n    mat3 t = mat3(\n        cos(iTime), 0.0, -sin(iTime),\n        0.0, 1.0, 0.0,\n        sin(iTime), 0.0, cos(iTime));\n    return fractalSphere(t*(p-vec3(0.0, 0.0, -10.0)));\n}\n\nvec3 dfn(in vec3 p)\n{\n   \tfloat eps = 0.0001;\n    \n    vec3 n = vec3(\n        df(vec3(p.x + eps, p.yz)) -\n        df(vec3(p.x - eps, p.yz)),\n        df(vec3(p.x, p.y + eps, p.z)) -\n        df(vec3(p.x, p.y - eps, p.z)),\n        df(vec3(p.xy, p.z + eps)) -\n        df(vec3(p.xy, p.z - eps)));\n    \n    n /= 2.0*eps;\n    return normalize(n);\n}\n\nint maxVolumeFrequency()\n{\n    float maxVol = 0.0;\n    int maxFreq = 0;\n    for (int i=0; i<512; i+=8) {\n        float vol = texelFetch(iChannel0, ivec2(i,0), 0).x;\n        if (vol > maxVol) {\n            maxVol = vol;\n            maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n\nvec3 fToCol(float x)\n{\n    float x2 = x*6.28318530717;\n    return 0.5+0.5*normalize(vec3(cos(x2), cos(x2+2.0943951023), cos(x2+4.1887902047)));\n}\n\nvec3 soundToCol()\n{\n    float volSum = 0.0;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    for (int i=0; i<512; i+=8) {\n        float vol = texelFetch(iChannel0, ivec2(i,0), 0).x;\n        col += fToCol(sqrt(float(i)/512.0))*vol;\n        volSum += vol;\n    }\n    return col/volSum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspectRatio = iResolution.y/iResolution.x;\n    vec2 uv = fragCoord/iResolution.xx - vec2(0.5, 0.5*aspectRatio);\n    \n    const vec3 lightDirection = normalize(vec3(0.3, 1.0, 1.0));\n    \n    vec3 ray = normalize(vec3(uv, -focalLength));\n    float l = 0.0;\n    for (int i=0; i<16; ++i) {\n        vec3 p = l*ray;\n        float d = df(p);\n        if (d < 0.02) {\n            float diff = max(dot(dfn(p), lightDirection), 0.0);\n            \n            //vec3 color = vec3(pow(l*0.1,0.5+diff)-0.5, l*0.1-0.5, l*0.1-0.5);\n            //vec3 color = vec3(diff, diff, diff);\n            \n            //vec3 color = vec3(\n            //    1.0-pow(l*(0.08+0.02*sin(iTime*0.2732)), 1.0+sin(iTime*0.9123 + 2.3258)+diff),\n            //    1.0-pow(l*(0.08+0.02*sin(iTime*0.1237)), 1.0-sin(iTime*0.7124 + 1.0837)+diff),\n            //    1.0-pow(l*(0.08+0.02*sin(iTime*0.3946)), 1.0+sin(iTime*0.4323 + 4.3284)+diff));\n            //fragColor = vec4(color, 1.0);\n            \n            int maxFreq = maxVolumeFrequency();\n            fragColor = vec4(soundToCol()*diff, 1.0);\n            return;\n        }\n            \n        l += 0.999*d;\n    }\n\n    // Output to screen\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define DEG_TO_RAD 0.01745329251994329577\n\n\nconst float focalLength = 1.0;\n\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x+p.y+p.z-s;\n    vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdOctahedron2( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n","name":"Common","description":"","type":"common"}]}