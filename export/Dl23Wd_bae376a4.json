{"ver":"0.1","info":{"id":"Dl23Wd","date":"1674175412","viewed":429,"name":"ChatGPT psychedelic","username":"Patan77","description":" Generated using OpenAI ChatGPT  : psychedelic ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["distort","ai","chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generated using OpenAI ChatGPT\n// Prompt #1 > Create the code for the most creative and crazy shadertoy shader you possible can\n// Prompt #2 > Make the animation more dynamic\n// Prompt #3 > Add more distortion effects\n// Prompt #4 > Make it look fractal\n// Prompt #5 > Add more effects\n// Prompt #6 > Add chromatic aberration\n// Prompt #7 > Add glow\n// Prompt #8 > Add a blur effect\n\n// Descritpion generated by ChatGPT: \n// This is a super crazy and creative shadertoy shader\n// that uses multiple textures and noise functions to\n// create a psychedelic and constantly changing pattern\n\n\n/*\nvec2 hash2( vec2 n ) \n{ \n    return fract(sin(vec2(dot(n,vec2(127.1,311.7)),dot(n,vec2(269.5,183.3))))*43758.5453); \n}\n\nfloat noise(vec2 n) { return fract(sin(dot(n,vec2(12.9898,78.233)))* 43758.5453); }\n    vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n*/\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n\n\n\nfloat fractalNoise(vec2 uv)\n{\n    float fractal = 0.0;\n    float amplitude = 1.0;\n    float frequency = 0.1;\n    float persistence = 0.5;\n    float octaves = 5.0;\n    for (float i = 0.0; i < octaves; i++) {\n        fractal += amplitude * noise(uv * frequency);\n        amplitude *= persistence;\n        frequency *= 2.0;\n    }\n    return fractal;\n}\n\nvec3 chromaticAberration(vec2 uv, float amount) {\n    vec2 offset = vec2(amount);\n    vec3 c = vec3(0.0);\n    c.r = texture(iChannel0, uv + offset).r;\n    c.g = texture(iChannel0, uv).g;\n    c.b = texture(iChannel0, uv - offset).b;\n    return c;\n}\n\n\nvec4 textureGlow(sampler2D tex, vec2 texCoord, float amount) {\n    vec4 color = vec4(0.0);\n    vec2 offset = vec2(0.0);\n    for (int i = -4; i <= 4; i++) {\n        for (int j = -4; j <= 4; j++) {\n            offset = vec2(i, j) * 0.005;\n            color += texture(tex, texCoord + offset) * amount;\n        }\n    }\n    return color;\n}\n\nvec4 blur(sampler2D tex, vec2 texCoord, vec2 resolution, vec2 direction) {\n    vec4 color = vec4(0.0);\n    vec2 offset = vec2(0.0);\n    float weight[5] = float[](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\n    for (float i = -2.0; i <= 2.0; i++) {\n        offset = vec2(i * direction.x / resolution.x, i * direction.y / resolution.y);\n        color += texture(tex, texCoord + offset) * weight[int(i) + 2];\n    }\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * 2.0 - 1.0;\n    vec3 c = vec3(0.0);\n\n    float n1 = fractalNoise(uv * 10.0 + vec2(iTime * 0.1, 0.0));\n    float n2 = fractalNoise(uv * 5.0 + vec2(iTime * 0.2, 0.0));\n    float n3 = fractalNoise(uv * 20.0 + vec2(0.0, iTime * 0.1));\n\n    // Use multiple textures to add even more\n    // complexity and variation to the pattern\n    vec4 t1 = texture(iChannel0, uv + vec2(n1 * 0.1, n2 * 0.1) + iTime * 0.1);\n    vec4 t2 = texture(iChannel1, uv + vec2(n2 * 0.2, n3 * 0.1) + iTime * 0.2);\n    vec4 t3 = texture(iChannel2, uv + vec2(n3 * 0.3, n1 * 0.1) + iTime * 0.3);\n\n    // Add distortion effects to the pattern\n    vec2 d = vec2(sin(iTime + uv.x * 5.0) * 0.05, cos(iTime + uv.y * 5.0) * 0.05);\n    vec2 distortedUV = uv + d;\n    \n    // Add chromatic aberration effect\n    float chromaAmount = sin(iTime) * 0.5;\n    vec3 chromaColor = chromaticAberration(distortedUV, chromaAmount).rgb;\n\n    // Add glow effect\n    float glowAmount = sin(iTime*10.0) * 0.003;\n    vec4 glowColor = textureGlow(iChannel0, distortedUV, glowAmount);   \n\n    // Add blur effect\n    float blurAmount = sin(iTime) * 100.5;\n    vec4 blurColor = blur(iChannel0, distortedUV, iResolution.xy, vec2(blurAmount, 10.0));\n\n    // Combine the colors, fractal noise values and distortion effects to\n    // create a chaotic and fractal pattern\n\n    c = mix(c, t1.rgb, n1);\n    c = mix(c, t2.rgb, n2);\n    c = mix(c, t3.rgb, n3);\n    c = mix(c, chromaColor, 0.5);\n    c = mix(c, glowColor.rgb, 0.3); \n    c = mix(c, blurColor.rgb, 0.3);\n\n\n\n    // Output the final color\n    fragColor = vec4(c*2.0, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}