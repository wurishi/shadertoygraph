{"ver":"0.1","info":{"id":"cs3fDs","date":"1697748646","viewed":56,"name":"perlin noise 2d","username":"DeltaT","description":"basic and probably inefficient implementation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash12(vec2 p) { // hash function taken from shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 randDir(vec2 id) {\n    float a = hash12(id)*6.28319 + iTime;\n    return vec2(cos(a), sin(a));\n}\n\nvec2 smootherstep(vec2 x) {\n    return x*x*x*(x*(6.*x-15.)+10.);\n}\n\nfloat perlin(vec2 coord) {\n    vec2 gridId = floor(coord);\n    vec2 gridUv = fract(coord);\n    \n    vec2 bottomLeft = gridUv;\n    vec2 bottomRight = gridUv-vec2(1, 0);\n    vec2 topLeft = gridUv-vec2(0, 1);\n    vec2 topRight = gridUv-vec2(1, 1);\n    \n    vec2 gridUvSmooth = smootherstep(gridUv);\n    float lerp1 = mix(dot(bottomLeft, randDir(gridId)), dot(bottomRight, randDir(gridId+vec2(1, 0))), gridUvSmooth.x);\n    float lerp2 = mix(dot(topLeft, randDir(gridId+vec2(0, 1))), dot(topRight, randDir(gridId+vec2(1, 1))), gridUvSmooth.x);\n    \n    return mix(lerp1, lerp2, gridUvSmooth.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float noise = perlin(uv*5.);\n    \n    fragColor = vec4(vec3(noise+.5), 1);\n}","name":"Image","description":"","type":"image"}]}