{"ver":"0.1","info":{"id":"stdSDX","date":"1652649989","viewed":28,"name":"Testing gamma-correction","username":"SNMetamorph","description":"With gamma-correction, gradient looks more black/white visually balanced, without repeating colors which is good. But in opposite, then gradient becomes non-linear in numerical terms.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gamma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GAMMA_CORRECTION 1\n\nfloat perPixelMarkersFraction(in float x, in float stepSize)\n{\n    return step(stepSize - 1.0, mod(x, stepSize));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 quantizedUvCoord = floor(uv * 10.0) / 10.0;\n    vec3 outputColor = quantizedUvCoord.x * vec3(1.0); // linear gradient from 0 to 1\n    float markers = perPixelMarkersFraction(fragCoord.x, iResolution.x / 10.0);\n    \n#if GAMMA_CORRECTION > 0\n    outputColor = pow(outputColor, vec3(2.2)); // gamma-correction\n#endif\n    outputColor += markers * vec3(1.0, 0.0, 0.0);\n    fragColor = vec4(outputColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}