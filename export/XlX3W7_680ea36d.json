{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float random(vec2 point) \n{\n  float value = sin(dot(point,vec2(12.9898, 78.233))) * 43758.5453;\n  return fract(value);\n}\n\n#define V2_X vec2(1.0, 0.0)\n#define V2_Y vec2(0.0, 1.0)\n\nfloat valueNoise(vec2 point)\n{\n  vec2 integer = floor(point), remainder = fract(point);\n  \n  mat2 columns = mat2(\n    random(integer),        random(integer + V2_X),\n    random(integer + V2_Y), random(integer + 1.0));\n    \n    vec2 row = mix(columns[0], columns[1], remainder.yy);\n    return mix(row[0], row[1], remainder.x);\n}\n\n#define OCTAVES 16\n#define DEG_TO_RAD 0.0174532925\n#define sind(x) sin(DEG_TO_RAD * x)\n#define cosd(x) cos(DEG_TO_RAD * x)\n#define THETA 30.0\n\nfloat fractalNoise(vec2 point) \n{\n    float result = 0.0;\n    float contribution = 0.5;\n    \n    for (int i = 0; i < OCTAVES; i++) \n    {\n    \tmat2 rotationMatrix = mat2( cosd(THETA), sind(THETA),\n        \t                       -sind(THETA), cosd(THETA));        \n        result += valueNoise(point) * contribution;\n        contribution /= 2.0;\n        point *= 2.0;\n        point *= rotationMatrix;\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n    \n    vec4 color = texture(iChannel0, uv);\n    \n    uv.y = 1.0 - uv.y;\n    \n    if (((uv.x - mod(uv.x, 0.025)) +\n        (uv.y - mod(uv.y, 0.025)) * 35.0 \n      > \n        pow(fractalNoise(vec2(t, 0.0)) + t, 2.5) / 5.0) \n     && ((uv.x - mod(uv.x, 0.025)) +\n        (uv.y - mod(uv.y, 0.025)) * 35.0 \n      < \n        pow(fractalNoise(vec2(t, 0.0)) + t, 2.5) / 5.0 + 0.025))\n    {\n        color *= 2.0;        \n        color += 1.0;\n    }\n    \n    color.rgb -= \n        (uv.x - mod(uv.x, 0.025)) +\n        (uv.y - mod(uv.y, 0.025)) * 35.0 \n      < \n        pow(fractalNoise(vec2(t, 0.0)) + t, 2.5) / 5.0 ? 0.0 : 1.0;    \n    \n\tfragColor = vec4(color.xyz, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XlX3W7","date":"1422324600","viewed":454,"name":"Slow block load ","username":"renaudbedard","description":"A simulation of a slow per-block texture load, like the internets of yore (sorta)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","transition"],"hasliked":0,"parentid":"","parentname":""}}