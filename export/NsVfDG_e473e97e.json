{"ver":"0.1","info":{"id":"NsVfDG","date":"1658802161","viewed":99,"name":"3D Texture as Stacked 2D slices","username":"mattdeeds","description":"A simple stacking of 2D textures to form a 3D SDF.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sphere(vec3 pos, vec3 center, float radius) {\n  vec2 delta = (iMouse.xy - iResolution.xy * 0.5) / iResolution.x;\n  vec3 delta3 = vec3(delta, 0);\n\n  float t = iTime * 0.4;\n  mat3 rotate = mat3(\n    cos(t), 0, sin(t),\n    0, 1, 0,\n    -sin(t), 0, cos(t));\n    \n  center -= vec3(0.5);\n  center = center * rotate;\n  center += vec3(0.5);\n   \n  return length(pos - center - delta3) - radius;\n}\n\n\nfloat sdf(vec3 pos) {\n  float d = 1e12;\n  // A bunch of spheres at random places.  Numbers generated using external RNG.\n  d = min(d, sphere(pos, vec3(0.74397356579458, 0.767888466294992, 0.333685479086883), 0.1));\n  d = min(d, sphere(pos, vec3(0.543322478879202, 0.543735028863537, 0.00858854768573003), 0.1));\n  d = min(d, sphere(pos, vec3(0.317412784567174, 0.694972942373063, 0.862023203864835), 0.1));\n  d = min(d, sphere(pos, vec3(0.910150931649028, 0.939092545777584, 0.785066152608003), 0.1));\n  d = min(d, sphere(pos, vec3(0.46556541561798, 0.677943433488807, 0.468281589996164), 0.1));\n  d = min(d, sphere(pos, vec3(0.114446992089305, 0.0465190450437388, 0.294631982871869), 0.1));\n  d = min(d, sphere(pos, vec3(0.246210112178609, 0.0306994695180992, 0.207166563184111), 0.1));\n  d = min(d, sphere(pos, vec3(0.183971884471938, 0.717955032924875, 0.163597907144718), 0.1));\n  d = min(d, sphere(pos, vec3(0.984455633774329, 0.321695765078864, 0.838325471447654), 0.1));\n  d = min(d, sphere(pos, vec3(0.426124608519475, 0.197625097464326, 0.567150856048224), 0.1));\n  d = min(d, sphere(pos, vec3(0.11101994267166, 0.0391093347661174, 0.435906031246015), 0.1));\n  d = min(d, sphere(pos, vec3(0.736097264487414, 0.118625239270796, 0.560945153089572), 0.1));\n  d = min(d, sphere(pos, vec3(0.363067998474009, 0.743633079514088, 0.11116372467873), 0.1));\n  d = min(d, sphere(pos, vec3(0.343609897709101, 0.742903482902688, 0.906355842040407), 0.1));\n  return d * 2.0;\n}\n\n\nvec3 uvToXYZ(in vec2 uv) {\n  float x = fract(uv.x * 8.0);\n  float y = fract(uv.y * 8.0);\n  \n  float a = floor(uv.x * 8.0);\n  float b = floor(uv.y * 8.0);\n  \n  float z = 0.125 * a + 0.125 * 0.125 * b;\n  \n  return vec3(x, y, z);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(sdf(uvToXYZ(uv)));\n    col.b = smoothstep(-0.1, 0.1, col.b);\n    col.r = smoothstep(0.1, -0.1, col.r);\n    col.g = col.g + 0.2;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}