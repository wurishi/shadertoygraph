{"ver":"0.1","info":{"id":"XtySDG","date":"1485549208","viewed":149,"name":"Hexalot","username":"pthextract","description":"A lot of hexagons. Tried to put two pieces of code together here. :) \n\n//Based on this: https://www.shadertoy.com/view/XstXzs (135 chars ;-p ) posted by FabriceNeyret2\n\t[url]https://www.shadertoy.com/view/XstXzs[/url]\n\n//code from https://www.shadertoy.co","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hexes","lot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on this: https://www.shadertoy.com/view/XstXzs (135 chars ;-p ) posted by FabriceNeyret2\n\n//code from https://www.shadertoy.com/view/ls23Dc  -- pyalot\n//code from https://www.shadertoy.com/view/ls23Dc  -- pyalot\n\nconst float PI = acos(-1.);\nconst float TAU = 2.0*PI;\nconst float deg30 = TAU/12.0;\n\n// http://www.gamedev.net/page/resources/_/technical/game-programming/coordinates-in-hexagon-based-tile-maps-r1800\n// nearest hexagon sampling, not quite sure if it's correct\n\nfloat hexDist(vec2 a, vec2 b){\n\tvec2 p = abs(b-a);\n\tfloat s = sin(deg30);\n\tfloat c = cos(deg30);\n\t\n\tfloat diagDist = s*p.x + c*p.y;\n\treturn max(diagDist, p.x)/c;\n}\n\nvec2 nearestHex(float s, vec2 st){\n\tfloat h = sin(deg30)*s;\n\tfloat r = cos(deg30)*s;\n\tfloat b = s + 2.0*h;\n\tfloat a = 2.0*r;\n\tfloat m = h/r;\n\n\tvec2 sect = st/vec2(2.0*r, h+s);\n\tvec2 sectPxl = mod(st, vec2(2.0*r, h+s));\n\t\n\tfloat aSection = mod(floor(sect.y), 2.0);\n\t\n\tvec2 coord = floor(sect);\n\tif(aSection > 0.0){\n\t\tif(sectPxl.y < (h-sectPxl.x*m)){\n\t\t\tcoord -= 1.0;\n\t\t}\n\t\telse if(sectPxl.y < (-h + sectPxl.x*m)){\n\t\t\tcoord.y -= 1.0;\n\t\t}\n\n\t}\n\telse{\n\t\tif(sectPxl.x > r){\n\t\t\tif(sectPxl.y < (2.0*h - sectPxl.x * m)){\n\t\t\t\tcoord.y -= 1.0;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(sectPxl.y < (sectPxl.x*m)){\n\t\t\t\tcoord.y -= 1.0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcoord.x -= 1.0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfloat xoff = mod(coord.y, 2.0)*r;\n\treturn vec2(coord.x*2.0*r-xoff, coord.y*(h+s))+vec2(r*2.0, s);\n}\n\nvec4 sideImage(  in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\tfloat s = iResolution.x/100.0;\n\tvec2 nearest = nearestHex(s, fragCoord.xy);\n\tvec4 texel = texture(iChannel0, nearest/iResolution.xy, -100.0);\n\tfloat dist = hexDist(fragCoord.xy, nearest);\n\t\n\tfloat luminance = (texel.r + texel.g + texel.b)/3.0;\n\t//float interiorSize = luminance*s;\n\tfloat interiorSize = s;\n\tfloat interior = 1.0 - smoothstep(interiorSize-1.0, interiorSize, dist);\n\t//fragColor = vec4(dist);\n\treturn  vec4(texel.rgb*interior, 1.0);\n\t//fragColor = vec4(nearest, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n\tU = 2.2 * U/iResolution.y - 1.1; \n    U.x =asin(U.x/cos(U=asin(U)).y);O.g=.1*U.x;\n    O+=2.*(O.r=.2*U.x)+sideImage((U+iDate.wx)*iResolution.xy/7.); \n    O*=O*.8;\n}","name":"Image","description":"","type":"image"}]}