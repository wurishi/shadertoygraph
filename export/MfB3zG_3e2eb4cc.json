{"ver":"0.1","info":{"id":"MfB3zG","date":"1704345280","viewed":30,"name":"noiseTOP from TouchDesigner","username":"shiyuugo","description":"implement noiseTOP from TouchDesigner.\n\nI'm not sure the actual implementation, but this is usefull ;-)\n\nreference:\nhttps://forum.derivative.ca/t/tdsimplexnoise-built-in-glsl/253387/3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// default Params from TouchDesigner\nfloat noiseTD(vec2 uv, float time) {\n    return noiseTD(uv, 1, vec3(0.0, 0.0, time), 1., 2, 2.0, 0.7, 1., 0.5, 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / min(iResolution.x, iResolution.y);\n    \n    fragColor = vec4(vec3(noiseTD(uv, iTime *.1)),1.); \n    return;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\nfloat mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\n\nfloat permute(float x) { return mod289(((x * 34.0) + 1.0) * x);}\nvec2 permute(vec2 x) { return mod289(((x * 34.0) + 1.0) * x);}\nvec3 permute(vec3 x) { return mod289(((x * 34.0) + 1.0) * x);}\nvec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x);}\n\n/*============================== SimplexNoise ==============================*/\n//### 2D\nfloat snoise(vec2 v) {\n    vec4 C = vec4(0.211324865405187, 0.366025403784439, - 0.577350269189626, 0.024390243902439);\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n    \n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m * m;\n    m = m * m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\nfloat fbm(vec2 uv, int oct) {\n    vec2 pos = uv;\n    float amp = 1.0, val = 0.0;\n    for(int i = 0; i < oct; i ++ ) {\n        val += amp * snoise(pos);\n        pos *= 2.0;\n        amp *= 0.5;\n    }\n    return val;\n}\n\n//### 3D\nfloat snoise(vec3 v) {\n    vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy), i2 = max(g.xyz, l.zxy);\n    vec3 x1 = x0 - i1 + C.xxx, x2 = x0 - i2 + C.yyy, x3 = x0 - D.yyy;\n    i = mod289(i);\n    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n    float n_ = 0.142857142857;\n    vec3 ns = n_ * D.wyz - D.xzx;\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n    vec4 s0 = floor(b0) * 2.0 + 1.0, s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0, 0, 0, 0));\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy, a1 = b1.xzyw + s1.xzyw * sh.zzww;\n    vec3 p0 = vec3(a0.xy, h.x), p1 = vec3(a0.zw, h.y), p2 = vec3(a1.xy, h.z), p3 = vec3(a1.zw, h.w);\n    //Normalise gradients\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n}\n\n\nfloat noiseTD(vec2 uv, int seed, vec3 transform, float period, int harmonics, float spread, float gain, float exponent, float offset, float amplitude) {\n    // reference : https://forum.derivative.ca/t/tdsimplexnoise-built-in-glsl/253387/3\n    //--- TD Default Params\n    // int seed = 1;\n    // float period = 1.;\n    // int harmonics = 2;\n    // float spread = 2.;\n    // float gain = 0.7;\n    // float exponent = .5;\n    // float offset = 0.5;\n    // float amplitude = 0.5;\n    float frequency = 1.0 / period;\n    float noise = 0.0;\n    for(int i = 0; i < harmonics; i ++ ) {\n        noise += snoise(vec3(uv * frequency, float(seed)) + transform) * amplitude;\n        frequency *= spread;\n        amplitude *= gain;\n    }\n    noise = sign(noise) * pow(abs(noise), exponent);\n    noise += offset;\n    return noise;\n}\n\n","name":"Common","description":"","type":"common"}]}