{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float PI = 3.1415926536;\n\nfloat quantize(float x, float amount) {\n\treturn floor(x / amount) * amount;\n}\n\nvec2 quantize(vec2 v, float amount) {\n\treturn vec2(\n\t\tquantize(v.x, amount),\n\t\tquantize(v.y, amount));\n}\n\nfloat rand (vec2 v) {\n\treturn fract(sin(dot(v, vec2 (.129898,.78233))) * 437585.453);\n}\n\nfloat rand(float seed) {\n\treturn fract(sin(seed * 12.9898) * 43758.5453);\n}\n\n// triangle wave from 0 to 1\nfloat wrap(float n) {\n\treturn abs(mod(n, 2.)-1.) * -1. + 1.;\n}\n\n// creates a cosine wave in the plane at a given angle\nfloat wave(float angle, vec2 point, float phase) {\n\tfloat cth = cos(angle);\n\tfloat sth = sin(angle);\n\treturn (cos (phase + cth*point.x + sth*point.y) + 1.) / 2.;\n}\n\nconst float waves = 10.;\n// sum cosine waves at various interfering angles\n// wrap values when they exceed 1\nfloat quasi(float interferenceAngle, vec2 point, float phase) {\n\tfloat sum = 0.;\n\tfor (float i = 0.; i < waves; i++) {\n\t\tsum += wave(PI*i*interferenceAngle, point, phase);\n\t}\n\treturn wrap(sum);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n\tfloat stage = mod(time / 2., 5.);\n\t\n\tvec2 size = iResolution.xy;\n\tfloat positionDivider = floor(mod(time / 4., 2.)) * 4.;\n\tfloat camoStrength = floor(mod(time / 8., 2.)) * 10.;\n\tfloat offsetSpeed = floor(mod(time / 16., 2.)) * 1.;\n\tfloat scrollSpeed = floor(mod(time / 32., 2.)) * 1.;\n\t\n\tfloat b;\n\tvec2 position = vec2(fragCoord.x, size.y - fragCoord.y);\n\tvec2 raw = position;\n\tposition.x += sin(time * 5. + position.y / 25.) * camoStrength;\n\tposition.y += sin(time * 5. + position.x / 25.) * camoStrength;\n\tposition.x += sin(time * 5. + position.y / 50.) * 2. * camoStrength;\n\tposition.y += sin(time * 5. + position.x / 50.) * 2. * camoStrength;\n\tif(positionDivider > 1.) {\n\t\tvec2 quant = quantize(position, positionDivider);\n\t\tif(offsetSpeed > 0.) {\n\t\t\tfloat offset = rand(quant);\n\t\t\tposition = quantize(position + offset * time * offsetSpeed, positionDivider);\n\t\t} else if (scrollSpeed > 0.) {\n\t\t\tfloat offset = rand(quant.x);\n\t\t\tposition = quantize(position + vec2(0, offset * time * scrollSpeed), positionDivider);\n\t\t} else {\n\t\t\tposition = quant;\n\t\t}\n\t}\n\tvec2 center = size / 2.;\n\tvec2 positionNorm = (position - center) / size.y;\n\tfloat positionAngle = atan(positionNorm.y / positionNorm.x);\n\n\tif(stage <= 1.) {\n\t\tfloat angleSpeed = .01;\n\t\tfloat phaseSpeed = 5.;\n\t\tfloat scale = 100.;\n\t\tb = quasi(time * angleSpeed, (positionNorm) * scale, time * phaseSpeed);\n\t} else if(stage <= 2.) {\n\t\tfloat chunks = 20.;\n\t\tfloat angle = .01 * time;\n\t\tb = wave(angle, positionNorm * chunks, time);\n\t} else if(stage <= 3.) {\n\t\tfloat base = 100.;\n\t\tconst int n = 6;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tb = rand(quantize(raw, base));\n\t\t\tb = fract(b + time);\n\t\t\tb *= float(n - i);\n\t\t\tif(b < 1.) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbase /= 2.;\n\t\t}\n\t\t//b = rand(quantize(raw, 4) + time);\n\t} else if(stage <= 4.) {\n\t\tfloat speed = -10.;\n\t\tfloat scale = 100.;\n\t\tfloat wiggleStrength = .005;\n\t\tfloat petals = 20.;\n\t\tfloat spiral = 20.;\n\t\tfloat power = .1;\n\t\tfloat wiggle = sin(length(positionNorm) * spiral + time + positionAngle * petals);\n\t\tfloat base = pow(length(positionNorm), power) + wiggle * wiggleStrength;\n\t\tb = sin(base * scale + speed * time);\t\n\t} else if(stage <= 5.) {\n\t\tb = rand(time);\n\t} else if(stage <= 6.) {\n\t\tb = quasi(.0001 * (sin(time) + 1.5) * 400., (positionNorm) * 700., time);\n\t}\n\n\tif(stage < 4.) {\n\t\t// post process to black and white\n\t\tb = b > .5 ? 1. : 0.;\n\t}\n\n\tfragColor = vec4(vec3(b), 1.);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjGWG","date":"1392927716","viewed":750,"name":"Projection Testing","username":"kcimc","description":"Some effects for testing projection in 2D.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","epilepsy"],"hasliked":0,"parentid":"","parentname":""}}