{"ver":"0.1","info":{"id":"cdVGDd","date":"1679237486","viewed":151,"name":"High Up in the Clouds","username":"grom12345","description":"Forked from here: https://www.shadertoy.com/view/ltsyWl\nUsed 3d simplex noise for god rays layers to create fog effect.\nDither with a noise texture - also works!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["clouds","shadow","dither","fog","godrays","eclipse","lightrays","dithering","crepuscular","misty"],"hasliked":0,"parentid":"ltsyWl","parentname":"Simpler dither godrays"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define blur 50.\n\n#define DECAY\t\t.85\n#define EXPOSURE\t.5\n\n#define SAMPLES\t16\n#define DENSITY\t.93\n#define WEIGHT  .36\n\n\n//planar zoom.\n#define ViewZoom 1.\n\n//View Frame\n#define fra(u) (u-.5*iResolution.xy)*ViewZoom/iResolution.y\nfloat iib(vec2 u){\n return texture(iChannel1,u/iChannelResolution[1].xy).x;\n}\n\n//x is result, yz are position in normalized coords.\nvec3 sun( vec2 uv ) {\n    vec2 p=fra(abs(iMouse.xy));\n    if(iMouse.z<=0.)p=vec2(sin(iTime*.1), sin(iTime*.3)*.5);\n    vec3 res;\n    float di = distance(uv, p);\n    res.x =  di <= .3333 ? sqrt(1. - di*3.) : 0.;\n    res.yz = p;\n    res.y /= (iResolution.x / iResolution.y);\n    res.yz = (res.yz+1.)*.5;\n    return res;}\n\n#define SS blur/min(iResolution.x,iResolution.y)\n\nfloat circle( vec2 p, float r){\n return smoothstep(SS,-SS,length(p)-r);\n}\n\n\nvec4 BA(in vec2 uv ){  \n    uv=uv*2.-1.;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    vec2 m=(1./iResolution.xy)*2.-1.;//set mouse position\n    m.x *= aspect;\n    //above framing is not pretty. but thats not what is demoed here.\n    \n    float occluders=circle(uv-vec2(-.66,0), .366)-circle(uv+vec2(.75,.1),.18);\n    occluders+=circle(uv-vec2(.6,.2),.23);\n    float mouse=smoothstep(SS,-SS,abs(abs(length(uv-m)-.2)-.05)-.02);\n    occluders = min(occluders, 1.);\n    vec3 light=min(sun(uv),1.);\n    float col = max(light.x - occluders, 0.);\n    return vec4(col,occluders,light.yz);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 coord = uv;\n    vec4 ic=BA(uv);\n    vec2 lightpos = ic.zw;   \t\n    float occ = ic.x; //light\n    float obj = ic.y; //objects\n    float dither = iib(fragCoord);\n    vec2 dtc = (coord - lightpos)*(DENSITY/float(SAMPLES));\n    float illumdecay = 1.;\n    \n    for(int i=0; i<SAMPLES; i++)    {\n        \n        coord -= dtc;\n        \n        vec2 uv1 = coord+(dither*dtc);\n        float fi = float(i);\n        float noise = (simplex3d_fractal(vec3(coord*3., iTime*.2+fi*.1))+1.)*fi;\n        float s = BA(uv1).x+noise*.1;\n        s *= illumdecay * WEIGHT;\n        occ += s;\n        illumdecay *= DECAY;\n    }\n        \n\tfragColor = vec4(vec3(.1,.1,.1)*obj*0.+occ*EXPOSURE*vec3(1.1,1.05,1.),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//3D Fractal Simplex Noise\n//source: https://www.shadertoy.com/view/XsX3zB\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}","name":"Common","description":"","type":"common"}]}