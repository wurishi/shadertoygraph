{"ver":"0.1","info":{"id":"WdXBzs","date":"1588834434","viewed":113,"name":"Good Morning Empenn !!!","username":"arthursw","description":"Good Morning Empenn LED light panel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","letters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433\n\n\nbool line(ivec2 n, int x1, int x2, int x3, int y) {\n\treturn ((n.x==0 && x1==1)||\n            (n.x==1 && x2==1)||\n            (n.x==2 && x3==1)) && n.y==y;\n}\n\nbool G(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 1, 0, 0, 3) ||\n\t\t\tline(n, 1, 0, 1, 2)  ||\n\t\t\tline(n, 1, 0, 1, 1)  ||\n\t\t\tline(n, 1, 1, 1, 0);\n}\n\nbool O(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 1, 0, 1, 3) ||\n\t\t\tline(n, 1, 0, 1, 2)  ||\n\t\t\tline(n, 1, 0, 1, 1)  ||\n\t\t\tline(n, 1, 1, 1, 0);\n}\n\nbool D(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 0, 4)   ||\n\t\t\tline(n, 1, 0, 1, 3) ||\n\t\t\tline(n, 1, 0, 1, 2)  ||\n\t\t\tline(n, 1, 0, 1, 1)  ||\n\t\t\tline(n, 1, 1, 0, 0);\n}\n\nbool M(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 0, 1, 4)   ||\n\t\t\tline(n, 1, 1, 1, 3) ||\n\t\t\tline(n, 1, 0, 1, 2)  ||\n\t\t\tline(n, 1, 0, 1, 1)  ||\n\t\t\tline(n, 1, 0, 1, 0);\n}\n\nbool R(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 0, 4)   ||\n\t\t\tline(n, 1, 0, 1, 3) ||\n\t\t\tline(n, 1, 1, 0, 2)  ||\n\t\t\tline(n, 1, 0, 1, 1)  ||\n\t\t\tline(n, 1, 0, 1, 0);\n}\n\nbool N(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 1, 0, 1, 3) ||\n\t\t\tline(n, 1, 0, 1, 2)  ||\n\t\t\tline(n, 1, 0, 1, 1)  ||\n\t\t\tline(n, 1, 0, 1, 0);\n}\n\nbool I(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 0, 1, 0, 3) ||\n\t\t\tline(n, 0, 1, 0, 2)  ||\n\t\t\tline(n, 0, 1, 0, 1)  ||\n\t\t\tline(n, 1, 1, 1, 0);\n}\n\nbool E(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 1, 0, 0, 3) ||\n\t\t\tline(n, 1, 1, 1, 2)  ||\n\t\t\tline(n, 1, 0, 0, 1)  ||\n\t\t\tline(n, 1, 1, 1, 0);\n}\n\nbool P(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 1, 0, 1, 3) ||\n\t\t\tline(n, 1, 1, 1, 2)  ||\n\t\t\tline(n, 1, 0, 0, 1)  ||\n\t\t\tline(n, 1, 0, 0, 0);\n}\n\nbool C(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 1, 0, 0, 3) ||\n\t\t\tline(n, 1, 0, 0, 2)  ||\n\t\t\tline(n, 1, 0, 0, 1)  ||\n\t\t\tline(n, 1, 1, 1, 0);\n}\n\nbool J(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 1, 1, 4)   ||\n\t\t\tline(n, 0, 1, 0, 3) ||\n\t\t\tline(n, 0, 1, 0, 2)  ||\n\t\t\tline(n, 0, 1, 0, 1)  ||\n\t\t\tline(n, 1, 1, 0, 0);\n}\n\nbool ii(ivec2 np, int x, int y)\n{\n    ivec2 n = np + ivec2(x, y);\n\treturn  line(n, 1, 0, 1, 4)   ||\n\t\t\tline(n, 1, 0, 1, 3) ||\n\t\t\tline(n, 1, 0, 1, 2)  ||\n\t\t\tline(n, 0, 0, 0, 1)  ||\n\t\t\tline(n, 1, 0, 1, 0);\n}\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat easeInOutCubic(float t){\n    return t<0.5 ? 4.*t*t*t : (t - 1.)*(2.*t - 2.)*(2.*t - 2.) + 1.;\n}\n\nfloat appearDelayInOutCubic(float delay, float speed, float t){\n\treturn t < delay ? 0.0 : easeInOutCubic(speed * (t - delay));\n}\n\nfloat appearDelayExpo(float delay, float speed, float t) {\n\treturn t < delay ? 0.0 : exponentialOut(speed * (t - delay));\n}\n\nfloat appearDelay(float delay, float speed, float duration, float t) {\n\treturn t < delay ? 0.0 : mod(speed * (t - delay), speed * duration);\n}\n\nfloat triangle(float duration, float t) {\n\treturn 1. - 2. * abs((mod(t, duration) / duration) - 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xx;\n\n\n    p -= vec2(0.5,0.5*iResolution.y/iResolution.x);\n    \n    float t = mod(iTime, 10.);\n    \n    float angle = appearDelayExpo(5.25, 0.5, t) * PI;\n\t\n    mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\tp *= rotationMatrix;\n    \n    p *= - 40.0 + 80.*appearDelayExpo(0., 0.25, t) + -80.*appearDelayExpo(3.25, 0.25, t);// * p.y;\n\n\t//p *= sin(7.0*t)*0.001+40.0;\n//\tp.x -= 10.5;\n\tvec2 n = floor(p);\n\tvec2 f = fract(p);\n\t\n\tfloat dist = 0.0;\n\t\n\t\n\t// dist = 1.0/length(p-(n+0.5));\n\tdist = sqrt(1.0/dot(p-(n+0.5), p-(n+0.5)));\n\t\n\tn.x += 8.00;\n\tn.y += 2.00;\n    \n\tivec2 ni = ivec2(n.x, n.y-6.0);\n\t\n\tfloat scale = 0.35;\n\t\n\tif(sin(t*4.0)>0.0)\n\t{\n\t\tdist *= scale;\n\t\tscale = 1.0/scale;\n\t}\n\tfloat delay = 0.75;\n\tfloat speed = 1.0;\n\tfloat offset = 50.0;\n\tfloat dist2 = 50.0;\n\tivec2 ni1 = ni + ivec2(offset - dist2 * appearDelayExpo(delay + 0.5, speed, t), 0);\n\tif( G(ni1, 0, 0) || O(ni1, -4, 0) || O(ni1, -8, 0) || D(ni1, -12, 0) )\n\t\tdist *= scale;\n\tni += ivec2(6, 6);\n\tivec2 ni2 = ni + ivec2(-offset + dist2 * appearDelayExpo(delay + 0.75, speed, t), 0);\n\tif( M(ni2, 0, 0) || O(ni2, -4, 0) || R(ni2, -8, 0) || N(ni2, -12, 0) || I(ni2, -16, 0) || N(ni2, -20, 0) || G(ni2, -24, 0) )\n\t\tdist *= scale;\n\tni += ivec2(2, 6);\n\tivec2 ni3 = ni + ivec2(offset - dist2 * appearDelayExpo(delay + 1.0, speed, t), 0);\n\tif( E(ni3, 0, 0) || M(ni3, -4, 0) || P(ni3, -8, 0) || E(ni3, -12, 0) || N(ni3, -16, 0) || N(ni3, -20, 0) || ii(ni3, -24, 0) || ii(ni3, -28, 0) )\n\t\tdist *= scale;\n\t\n\tvec3 c1 = vec3(0.25,0.33,0.4);\n\tvec3 c2 = vec3(0.525,0.2633,0.24);\n\tvec3 c=c1;\n\tif(mod(t,1.0)>0.5)\n\t\tc = c2;\n\tfragColor = vec4(c*dist,1.0);\n}","name":"Image","description":"","type":"image"}]}