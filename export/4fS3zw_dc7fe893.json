{"ver":"0.1","info":{"id":"4fS3zw","date":"1703935455","viewed":136,"name":"New Year's colored dots","username":"Efim","description":"Happy New Year, happiness to all!","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","christmas","sdf","text","dots","snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SNOW background from @g1mishr's \"Snow Simple \" https://www.shadertoy.com/view/DlGczD\n#define TILES 10.0\n\n//2D random from https://www.shadertoy.com/view/WstGDj\nfloat random (vec2 uv) {\n    return fract(sin(dot(uv, vec2(135., 263.))) * 103.214532);\n}\n\nvec4 drawSnow(vec2 curid, vec2 uv, vec4 fragColor, float r, float c)\n{\n    float maxoff = 2.0 / TILES; //calculate the max offset a particle can have (two tiles)\n\n    //loop through neighboring tiles\n    for(int x=-2; x<=1; x++)\n    {\n        for(int y=-2; y<=0; y++)\n        {\n            float rad = (1.0 / (TILES * 5.0)) * r; //set default radius\n            vec2 id = curid + vec2(x, y); //get the id of the tile we're visiting\n            vec2 pos = id / TILES; //calculate position\n            float xmod = mod(random(pos), maxoff);\n            pos.x += xmod; //add a random x-offset\n            pos.y += mod(random(pos+vec2(4,3)), maxoff); //add a random y-offset\n            rad *= mod(random(pos), 1.0); //vary the radius by multiplying by a random val\n            pos.x += 0.5*(maxoff-xmod)*sin(iTime*r + random(pos)*100.0); //dynamic sin wave x-offset\n            \n            float len = length(uv - pos); //calculate distance from tile's particle\n\n            //if we're inside the particle, draw it\n            float v = smoothstep(0.0, 1.0, (rad - len) / rad*0.75);\n            fragColor = mix(fragColor, vec4(c), v);      \n        }\n    }\n    \n    return fragColor;\n}\n\n\nvec4 snowBackground( vec2 fragCoord )\n{\n    vec4 fragColor = vec4(0.0);\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.x;\n    uv.y -= 0.3;\n    \n    //uv.x -= 0.6;\n\n    \n    vec3 col = mix(vec3(0.0, 0.45, 0.85), vec3(1), -0.3-uv.y);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    vec4 bg = vec4(.529, .808, .922, 1) * 0.25;\n    vec2 uvNorm = fragCoord.xy / iResolution.xy; //normalized UV coordinate [0, 1]\n    vec2 uvog = fragCoord.xy / iResolution.y; //UV coordinate (will remain static)\n    uv = fragCoord.xy / iResolution.y; //UV coordinate (we'll modify this one)\n    \n    //draw the closest snow layer\n    uv += 0.2*vec2(-iTime, iTime); //move the UV coords based on time\n    vec2 curid = floor(uv * TILES); //calculate the ID associated with the current UV\n    curid += vec2(0.5); //center the ID\n    \n    //if(curid.y > 10.0)\n    {\n    fragColor = drawSnow(curid, uv, fragColor, 1.0, 0.9); //draw closest snow layer\n    \n    //draw the middle snow layer, calculate new UV and ID\n    uv = uvog + 0.1*vec2(-iTime - 100.0, iTime + 100.0);\n    curid = floor(uv * TILES);\n    curid += vec2(0.5);\n    fragColor += drawSnow(curid, uv, vec4(0), 0.75, 0.45); \n    \n    //draw the far snow layer, calculate new UV and ID\n    uv = uvog + 0.05*vec2(-iTime - 150.0, iTime + 150.0);\n    curid = floor(uv * TILES);\n    curid += vec2(0.5);\n    fragColor += drawSnow(curid, uv, vec4(0), 0.5, 0.225);\n    \n    //fragColor = smoothstep(0.0, 3.0, iTime)*fragColor;\n    }\n    return fragColor;\n}\n\n// END Snow Simple https://www.shadertoy.com/view/DlGczD\n\n\n\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\nconst float eps = 0.001;\n\nvec3 sdfColor;\nvec3 resColor;\nfloat sdfReflect = 0.;\nvec3 col1 = vec3(0.3764, 0.8196, 0.3725);\nvec3 col2 = vec3(0.8117, 0.1764, 0.8078);\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n    \n}\n\n//https://www.shadertoy.com/view/mlcyDj\nvec4 texChar(float char, vec2 uv) {\n    vec2 pt = uv/16.0;\n    pt.x += char/16.0;\n    pt.y += 12.0/16.0;\n    return texture(iChannel0, pt);\n}\n\nfloat sdTextBox ( vec2 p, vec2 b, float char ) {\n    float l = sdBox(p,b);\n    vec2 pn = (p.xy / b.xy) * .5 + .5;\n    float lt = (texChar(char, pn).w - 0.5);\n    return max(lt,l); \n}\n//===========================================\n\nfloat sdBox3( in vec3 p, in vec2 b, float h, float char)\n{\n    float d = sdTextBox(p.xy, b, char);\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0)) - 0.02;\n}\n\nfloat glzoom = 1.0;\nfloat mapChar( in vec3 pos, float char )\n{\n    return sdBox3(pos, vec2(glzoom, glzoom), 0.2*glzoom, char);\n}\n\n\n\nfloat map(vec3 p) {\n    float text[4]; \n    text[0] = 2.;\n    text[1] = 0.;\n    text[2] = 2.;\n    text[3] = 4.;\n    float start = 1.5;//1.4;\n    float d = dist_infin;\n    for (int i = 0; i < 4; i++)\n    {\n        vec3 shift = vec3(start-float(i), 0., 0.);\n        d = min(mapChar(p+shift, text[i]), d);\n    }\n    return d;\n}\n\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n#define AA 1\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec3 p){  \n    return fract(sin(mod(dot(normalize(p), vec3(27.609, 57.583, 11.2345)), 6.2831853))*43758.5453); \n}\n\nfloat npp = 60.;\nfloat level = 0.85;\nvec3 point(vec3 p) {\n    return floor(p*npp)/npp;\n}\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    //https://www.shadertoy.com/view/lcfGWH\n    vec3 snowBgcol = snowBackground( fragCoord ).rgb;\n    vec3 bg = snowBgcol;\n\n    vec3 light = normalize(vec3(0.0, .0, 1.)); //light\n    vec3 light2 = normalize(vec3(0.0, 0.0, -1.)); //light\n    vec2 mo = vec2(.0, 1.0);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    glzoom = 1.1*clamp(1.0 - clamp(cos(iTime/2.), 0., 1.0), 0.01, 1.0);\n    vec3 ro = vec3(0.0, 0.0, 2.); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y * PI);\n    ro.xz *= rot(-mo.x * TAU);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg; // background  \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                \n                if(h < eps)\n                {\n                    vec3 pp = point(pos);\n                    float fil = hash21(pp);\n                    if (fil > level /*&& length(pos-pp) < 1./npp*/)\n                        break;\n                    else\n                        h = 0.05;    \n                }\n                td += h;\n                if (td >= dist_infin)\n                    break;\n            }\n            if(td < dist_infin) {\n                vec3 pp = point(pos);\n                float fil = hash21(pp);\n                if (fil > level /*&& length(pos-pp) < 1./npp*/)\n                {\n                    //float blink=1.0;//-cos(5.0*2.0*iTime);\n                    col = hsb2rgb(vec3(fract(fil*1000.)*3., 1., 2.)); //blink+0.9\n                }\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    //tot = sqrt(tot) / float(AA);\n    tot = tot / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}