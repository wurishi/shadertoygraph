{"ver":"0.1","info":{"id":"Nttfzl","date":"1663554084","viewed":83,"name":"fidgety curves","username":"pb","description":"fractal parts appear and disappear from the ends of the bright curves as iteration count increases and decreases","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    //size of one texel in iChannel0\n    vec2 texel = 1./iResolution.xy;\n\n    vec4 total_color;\n    //see 5x5 gaussian weights in Common \n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n   \n    fragColor = total_color;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 invz2( in vec2 z ) {\n    float xy = z.x*z.y; z*=z;\n    float modz2 = 1./max(z.x*z.x + z.y*z.y + 2.*xy*xy, 1e-6);\n    z.x = z.x - z.y; z.y = -2.*xy;\n    return modz2*z; }\nvec2 expz( in vec2 z ) { return vec2( exp(z.x)*cos(z.y), exp(z.x)*sin(z.y) ); }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float max_iter=1., mix_factor=min(1.01,1.005+.02*sin(iTime/7.)), infinity=1e9, escape_value=0.;\n    vec2 uv = (fragCoord.xy-2.*iResolution.xy)/iResolution.y;\n    vec2 center = vec2(2.6,-1.5), width  = vec2( .17,.22),\n         c = (uv - center)*width, wgt=vec2(mix_factor, 1.-mix_factor),            \n         iter=vec2(0.), new_iter;\n         \n    float  t1=20.,t2=t1/2.;     \n    float T=mod(iTime*3.,t1);\n\n    if ( T < t2  ) max_iter += mod(T*2.,t1);\n    else           max_iter += t1 - mod( (T-t2)*2.,t1);\n    \n    for ( float i=0.; i<max_iter; i++ ) {\n        new_iter = wgt.y * invz2(iter) + wgt.x*expz(iter) + c;\n        iter = new_iter; \n        float distance = new_iter.x*new_iter.x + new_iter.y*new_iter.y;\n        if ( distance > infinity ) {\n            escape_value = i;\n            break;\n        }\n    }  \n\n    if ( escape_value != 0. ) {\n        fragColor = vec4( vec3(0.), 1.);\n    }\n    else {\n        vec2 l1 = cos(log(abs(new_iter))*vec2(.6,.4));\n        float l2 = cos(atan( new_iter.y/new_iter.x)*.5);\n        fragColor = vec4( (vec3(l1*l1, l2*l2)), 1. );\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}