{"ver":"0.1","info":{"id":"Xl3fRN","date":"1538720968","viewed":96,"name":"paukparl-wheel","username":"paukparl","description":"The frequency constantly adds up.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a,b,t)\n\nstruct ray  {\n    vec3 o, d;\n};\n\n    ray GetRay(vec2 uv, vec3 camPos, vec3 lookat, float zoom) {\n        ray a;\n        a.o = camPos;\n        vec3 f = normalize(lookat-camPos);\n        vec3 r = cross(vec3(0, 1., 0), f);\n        vec3 u = cross(f, r);\n        vec3 c = a.o + f * zoom;\n        vec3 i = c + uv.x * r + uv.y * u;\n\n        a.d = normalize(i - a.o);\n\n        return a;\n    }\n\n\nvec3 ClosestPoint(ray r, vec3 p) {\n    return r.o + max(0., dot(p-r.o, r.d))*r.d;\n}\n\nfloat DistRay(ray r, vec3 p) {\n    return length(p-ClosestPoint(r,p));\n}\n\nvec3 Point(vec3 camPos, ray r, vec3 p, float size, float blur) {\n\tfloat d = DistRay(r, p);\n    vec3 c = vec3(S(size, size*(1.-blur), d));\n\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    \n    float t = iTime *2.;\n    \n    vec3 camPos = vec3(sin(t*.07)*1., .4, cos(t*.07)*1.);\n    vec3 lookat = vec3(0, -.05, 0);\n    ray r = GetRay(uv, camPos, lookat, 2.);\n    \n    vec3 col = vec3(0);\n    \n    float s = m.y*.01;\n    for (float i=0.; i<m.y*2.; i+=s) {\n        float ti = t-i;\n        col += Point(camPos, r, vec3(sin(ti*t*0.8)*.25, sin(ti)*.1, cos(ti)*.3), (m.x*.05), .1+i*2.);\n    }\n    \n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}