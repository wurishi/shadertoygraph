{"ver":"0.1","info":{"id":"clXSD7","date":"1676121979","viewed":121,"name":"Waveforms","username":"peremoya2000","description":"Shows diferent waveforms and their sound. Click on the Play and the the Start Again button in order for audio and visuals to align.","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["wave","audio","waveform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LARGE_NUM 100.\n\n//Based on https://www.shadertoy.com/view/3sKSWc\nfloat distanceToLineSegment(vec2 p0, vec2 p1, vec2 p)\n{\n    float distanceP0 = length(p0 - p);\n    float distanceP1 = length(p1 - p);\n    \n    float l2 =pow(length(p0 - p1), 2.);\n    float t = max(0., min(1., dot(p - p0, p1 - p0) / l2));\n    vec2 projection = p0 + t * (p1 - p0); \n    float distanceToProjection = length(projection - p);\n    \n    return min(min(distanceP0, distanceP1), distanceToProjection);\n}\n\nfloat function(float x)\n{\n    x = x * 20.;    \n    float y = getWaveValue(x, getWaveType(iTime));    \n    return y/5.;\n}\n\nfloat distanceToFunction(vec2 p, float xDelta)\n{\n    float result = LARGE_NUM;\n    vec2 q;\n    for (float i = -3.; i < 3.; i += 1.)\n    {\n        q = p;\n        q.x += xDelta * i;\n\n        vec2 current = vec2(q.x, function(q.x));\n    \tvec2 next = vec2(q.x + xDelta, function(q.x + xDelta));\n        result = min(result, distanceToLineSegment(current, next, p));\n    }\n\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    float distanceToPlot = distanceToFunction(uv, 1. / iResolution.x);\n    float intensity = smoothstep(0., 1., 1. - distanceToPlot * .5 * iResolution.y);\n    intensity = pow(intensity,1./2.2);\n    \n    vec3 col = vec3(intensity);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    float noteTime = TAU*440.0*time;\n    float y = getWaveValue(noteTime, getWaveType(time))*.2;\n    return vec2(y);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define TAU 6.28318530718\n#define PI 3.14159265359\n\nfloat saw(float x)\n{\n    return (fract(x/TAU)-.5)*2.;\n}\n\nfloat triangle(float x)\n{\n    float saw = fract(x/TAU);\n    float triangle;\n    if(saw<.5)\n    {\n        triangle = saw;\n    }\n    else\n    {\n        triangle = 1.-saw;\n    }\n    return triangle*4.-1.;\n}\n\nfloat sine(float x)\n{\n    return sin(x-PI/2.);\n}\n\nfloat square(float x)\n{\n    float sine = sine(x);\n    return step(0., sine)*2.-1.;\n}\n\nfloat smoothSquare(float x)\n{\n    float sine = sine(x);\n    return smoothstep(-.25,.25, sine)*2.-1.;\n}\n\nint getWaveType(float time)\n{\n    return int(mod(time*.5, 5.));\n}\n\nfloat getWaveValue(float x, int type)\n{  \n    switch (type) \n    {\n        case 0:\n            return sine(x);\n        case 1:\n            return saw(x);\n        case 2:\n            return triangle(x);\n        case 3:\n            return square(x);\n        case 4:\n            return smoothSquare(x);\n    }\n    return smoothSquare(x);\n}","name":"Common","description":"","type":"common"}]}