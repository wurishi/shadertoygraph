{"ver":"0.1","info":{"id":"Wts3RX","date":"1557124580","viewed":138,"name":"QSBlur","username":"qiaosen2008","description":"高斯模糊","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 5x5高斯卷积核，CENTER为卷积中心\nconst int KERNEL_SIZE = 5;\nconst int CENTER = KERNEL_SIZE / 2;\n\n// 纹理大小, 512x512\nconst float TEXTURE_SIZE = 512.0;\n\n// 单像素纹理尺寸\nconst float PIXEL_SIZE = (1.0 / TEXTURE_SIZE);\n\n// 高斯方程\nfloat gaussianExpression(float sigma, float xy)\n{\n    return exp(-(xy * xy) / (2.0 * sigma * sigma));\n}\n\n// 单像素的高斯模糊, 使用KERNEL_SIZExKERNEL_SIZE大小的卷积\nvec3 blurPerPixel(in vec2 uv)\n{\n    // sigma值用sin函数做变幻，模糊程度随时间变化\n    float sigma = sin(iTime) * 5.0;\n    \n    float sum = 0.0;\n    vec3 ret = vec3(0);\n        \n    // 一共需要KERNEL_SIZExKERNEL_SIZE次高斯滤波\n    for (int y = 0; y < KERNEL_SIZE; ++y) {\n        // Y方向高斯滤波\n        float float_y = gaussianExpression(sigma, float(y) - float(CENTER));\n        \n        // 卷积中当前点的Y偏移，乘以像素尺寸\n        float offset_y = float(y - CENTER) * PIXEL_SIZE;\n        \n        // X轴迭代\n        for (int x = 0; x < KERNEL_SIZE; ++x) {\n            // X方向高斯滤波\n            float float_x = gaussianExpression(sigma, float(x) - float(CENTER));\n            \n            // 卷积中当前点的X偏移, 乘以像素尺寸\n            float offset_x = float(x - CENTER) * PIXEL_SIZE;\n            \n            sum += float_x * float_y;            \n            ret += texture(iChannel0, uv + vec2(offset_x, offset_y)).rgb * float_x * float_y;\n        }\n    }\n\n    return ret / sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * vec2(1, 1);\n\tfragColor = vec4(blurPerPixel(uv), 1.0);\n}","name":"Image","description":"","type":"image"}]}