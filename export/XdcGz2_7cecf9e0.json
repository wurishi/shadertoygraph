{"ver":"0.1","info":{"id":"XdcGz2","date":"1455484713","viewed":333,"name":"Polygon Distance Fields","username":"davidp","description":"Learning how to render distance fields from a polygon.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Distance field learning\n//\n// 1. Configurable distance from a 2D polygon, where a polygon is a collection of edges\n// \n// If a polygon is a collection of edges, how do we determine distance for a given point?\n// Is it a combination of values?  Or is it simply the closest edge?\n\nconst int MAX_COORDS = 3;\nvec2 polygon[MAX_COORDS];\n\n\n// https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\nfloat lineDistance(in vec2 uv, in vec2 p1, in vec2 p2) {\n    float n = abs((p2.y - p1.y)*uv.x - (p2.x - p1.x)*uv.y + (p2.x * p1.y) + (p2.y * p1.x));\n    float d = sqrt(pow(p2.y - p1.y, 2.) + pow(p2.x - p1.x, 2.));\n    return abs(n/d) * 10.;\n}\n\n\nfloat segmentDistance(in vec2 uv, in vec2 p1, in vec2 p2) {\n    vec2 line = p2 - p1;\n    // u =  ((x3 - x1) * px + (y3 - y1) * py) / float(something)\n    float u = ((uv.x - p1.x) * line.x + (uv.y - p1.y) * line.y) / (line.x * line.x + line.y * line.y);\n\tu = clamp(u, 0., 1.);\n    \n    float x = (p1.x + u * line.x) - uv.x;\n    float y = (p1.y + u * line.y) - uv.y;\n    \n    return sqrt(x * x + y * y) * 10.;\n}\n\n\nfloat polygonDistance(in vec2 uv) {\n    float winner = 1.;\n    for (int i = 0; i < MAX_COORDS; ++i) {\n        float distance;\n        \n        vec2 a = polygon[i];\n        vec2 b = polygon[int(mod(float(i + 1), float(MAX_COORDS)))];\n        \n        if (false) { //fract(iTime * 0.5) < 0.5) {\n\t\t\tdistance = lineDistance(uv, a, b);\n    \t} else {\n\t\t\tdistance = segmentDistance(uv, a, b);\n    \t}\n        \n        if (distance < winner) {\n            winner = distance;\n        }\n    }\n    return winner;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n   \n    \n    polygon[0] = vec2(0.25, 0.25);\n    polygon[1] = vec2(0.75, 0.75);\n    polygon[2] = vec2(0.25, 0.75);\n    \n\t float distance = polygonDistance(uv);\n    \n    fragColor = vec4(vec3(fract(1.0 - distance)), 1.);\n}","name":"Image","description":"","type":"image"}]}