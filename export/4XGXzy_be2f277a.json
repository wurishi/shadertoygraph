{"ver":"0.1","info":{"id":"4XGXzy","date":"1720084314","viewed":66,"name":"mike_van Damme in Matrix revised","username":"mike2367","description":"click to find the full figure of van Damme","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code ref: https://www.shadertoy.com/view/l3VSDm\n// code ref: https://www.shadertoy.com/view/XdVXRh\n// code ref: https://www.shadertoy.com/view/lsVBWy\n#define PI 3.1415926\n#define CELLS vec2(64.0,30.0)\n#define FALLERS 9.0\n#define FALLERHEIGHT 12.0\n\nvec2 rand(vec2 uv) {\n    return floor(abs(mod(cos(\n        uv * 652.6345 + uv.yx * 534.375 +\n        0.001*cos(iTime * PI / 100.) * dot(uv, texture(iChannel2, uv).xy)),\n     0.001)) * 16000.0);\n}\nfloat in_circle(vec2 uv){\n    vec2 mouse = (iMouse.xy * 2. - iResolution.xy)/iResolution.y;\n    return (smoothstep(0.2,0.4, length(uv-mouse))-1.)*-1.;\n}\n\nfloat fallerSpeed(float col, float faller) {\n    return mod(cos(col * 363.435  + faller * 234.323), 0.1) * 1.0 + 0.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // the video effect part\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    \n    vec3 value = color.rgb;\n    vec3 oldcolor = value + (value * texture(iChannel1, (mod(fragCoord, 4.0) / 4.0)).rgb);\n    vec3 newcolor = floor(oldcolor)*(1.-in_circle(uv)) + value * in_circle(uv);\n    \n    // the rain part\n    vec2 pix = mod(uv, 1.0/CELLS);\n    vec2 cell = (uv - pix) * CELLS;\n    pix *= CELLS * vec2(0.8, 1.0) + vec2(0.1, 0.0);\n   \n    float c = texture(iChannel1, (rand(cell) + pix) / 16.0).x;\n    \n    float b = 0.0;\n    for (float i = 0.0; i < FALLERS; ++i) {\n        float f = 3.0 - cell.y * 0.05 -\n            mod((iTime + i * 3534.34) * fallerSpeed(cell.x, i), FALLERHEIGHT);\n        if (f > 0.0 && f < 1.0)\n            b += f;\n    }\n    \n    vec4 layer1 = vec4(0. ,b*c , 0. , 0.9);\n    vec4 layer2 = vec4(newcolor, 1.0);\n    \n    fragColor = vec4(mix(layer1, layer2,   0.6));\n}","name":"Image","description":"","type":"image"}]}