{"ver":"0.1","info":{"id":"3lS3W3","date":"1561269738","viewed":145,"name":"Physical Spheres","username":"VoidChicken","description":"Some physics spheres cause why not. Fly around with W, A, S, D, Q, and E.\nUse mouse to control the camera.\nZ to pause, T to reset the spheres, and Y to add a force to the spheres.","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["spheres","physics","fresnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  \n    n = max((abs(n) - 0.2)*7., 0.001);\n    n /= (n.x + n.y + n.z );  \n    \n\treturn (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n}\n\nfloat map(vec3 p)\n{\n    float dist = p.y;\n    for (int i = 0; i < BODY_COUNT; i++)\n    {\n\t\tvec4 texel = texelFetch(iChannel0, ivec2(i*2, 0), 0);\n        vec3 pos = texel.xyz;\n        float radius = texel.w;\n        dist=min(dist,length(pos-p)-radius);\n    }\n\treturn dist;    \n}\n\nvec3 calcNormal( in vec3 x )\n{\n    vec2 e = vec2( 0.001, 0.0 );\n    return normalize( vec3( map(x+e.xyy) - map(x-e.xyy),\n                            map(x+e.yxy) - map(x-e.yxy),\n                            map(x+e.yyx) - map(x-e.yyx) ) );\n}\n\nfloat schlick(vec3 i, vec3 n, float ior)\n{\n\tfloat R0 = pow((1.0 - ior) / (1.0 + ior), 2.0);\n    float R = R0 + R0 * dot(-i, n) - dot(-i, n) - R0 + 1.0;\n    return R;\n}\n\nfloat trace(vec3 o, vec3 d)\n{\n    float t = 0.0;\n    for (int i = 0; i < 64; i++) {\n        float h = map(o + d * t);\n        t+=h;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy, uv = (fragCoord/R.xy*2.-1.)*vec2(R.x/R.y,1.);\n\tvec4 qw = texelFetch(iChannel3, ivec2(1, 0), 0);\t\n    mat4 rotMat =  rotationMatrix(vec3(0,0,1),qw.z) * rotationMatrix(vec3(0,1,0),qw.y) * rotationMatrix(vec3(1,0,0),qw.x);\n    vec3 o = texelFetch(iChannel3, ivec2(0, 0), 0).rgb;\n    vec3 d = mat3(rotMat) * normalize(vec3(uv, 1.3));\n        \n    float t = trace(o, d);\n    vec3 h = o + d * t;\n    vec3 col = texture(iChannel2, d).rgb;\n    if (map(h) < .01) {\n    \tvec3 on = calcNormal(h);\n        vec3 noff = tex3D(iChannel1, h, on);\n        vec3 n=normalize(on+(noff*.1-0.05));\n        float fr = schlick(d, n, 1.5);\n        vec3 diff = vec3(1);\n        if (h.y<.01) diff = (tex3D(iChannel1, h, n));\n        vec3 spec = texture(iChannel2, reflect(d, n)).rgb;\n        float ao = mix(.7,1.,map(h+n*.1)/.1);\n        vec3 sunDir = normalize(vec3(cos(iTime / 10.),1.,sin(iTime/12.)));\n        float srw = trace(h+n*.01,sunDir);\n        float shadow = 1.0;\n        if (map(h+sunDir*srw) < .01)\n        {\n            shadow = 0.6;\n        }\n        col=mix(diff, spec, fr * .3) * ao * shadow;\n    }\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 last = texelFetch(iChannel3, ivec2(fragCoord),0);\n    fragColor=last;\n    \n    if (mod(floor(fragCoord.x),2.)==0.){\n   \tvec3 vel = texelFetch(iChannel3, ivec2(fragCoord)+ivec2(1,0),0).rgb;\n    int bodyId = int(fragCoord.x / 2.);\n    float fBodyId = fragCoord.x / 2.;\n    if(iFrame == 0 || texelFetch(iChannel1, ivec2(84,1), 0).r > 0.0)\n    {float rad = mix(0.5,1.,rand(vec2(fBodyId,0)));\n    \tfragColor=vec4(mod(fBodyId,3.)*3.,rad + 5.,floor(fBodyId/3.)*3., rad);    \n    }\n        if (texelFetch(iChannel1, ivec2(90,2), 0).r<=0.)\n        fragColor.xyz+=vel;\n        \n        \n    } \n    else\n    {\n    \t\tfloat fBodyId = floor((fragCoord.x - 1.)/ 2.);\n        vec4 body = texelFetch(iChannel3, ivec2(fragCoord)-ivec2(1,0),0);\n        \n        vec3 vel = last.xyz;\n        //calculate collisions\n        if (iFrame == 0|| texelFetch(iChannel1, ivec2(84,1), 0).r > 0.0)\n        {\n        \tvel+=.1*(texelFetch(iChannel0, ivec2(fBodyId),0).rgb*2.-1.);    \n        }\n        vel.y-=.005;   \n        if (body.y - body.w < 0.)\n        {\n        \tvel.y = abs(vel.y) * 0.9;    \n        }\n        \n        for (int i = 0; i < BODY_COUNT; i++)\n        {\n            if (i==int(fBodyId)) continue;\n        \tvec4 other = texelFetch(iChannel3, ivec2(i*2,0), 0);\n            float coreDist = distance(other.xyz, body.xyz);\n            float expectDist = other.w+body.w;\n            if (coreDist < expectDist)\n            {\n             \tvec3 cNormal = normalize(body.xyz-other.xyz);\n                vec3 cReflect = reflect(normalize(vel),cNormal);\n                vel=length(vel) * .7 * cNormal;\n            }\n            if (texelFetch(iChannel1, ivec2(89,1), 0).r > 0.0)\n            {\n                vel -= .01 * normalize(body.xyz-other.xyz);\n            }\n        }\n        if (texelFetch(iChannel1, ivec2(90,2), 0).r<=0.)\n        fragColor.xyz=vel*.999;\n        \n        \n        \n        \n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BODY_COUNT 15\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    float keyW = texelFetch(iChannel1, ivec2(87, 0), 0).r;\n    float keyA = texelFetch(iChannel1, ivec2(65, 0), 0).r;\n    float keyS = texelFetch(iChannel1, ivec2(83, 0), 0).r;\n    float keyD = texelFetch(iChannel1, ivec2(68, 0), 0).r;    \n    float keyQ = texelFetch(iChannel1, ivec2(81, 0), 0).r;\n    float keyE = texelFetch(iChannel1, ivec2(69, 0), 0).r;\n\t\n    int p = int(fragCoord.x);\n    if (p==0)\n    {\n    \tvec4 d = texelFetch(iChannel0, ivec2(1, 0), 0);\n        \n        mat4 a = rotationMatrix(vec3(0,0,1),d.z) * rotationMatrix(vec3(0,1,0),d.y) * rotationMatrix(vec3(1,0,0),d.x);\n    \tif (keyW > 0.0)\n        {\n        \tc.xyz += mat3(a) *  vec3(0,0,.1);    \n        }\n        if (keyA > 0.0)\n        {\n        \tc.xyz += mat3(a) * vec3(-.1,0,0);    \n        }\n        if (keyS > 0.0)\n        {\n        \tc.xyz += mat3(a) * vec3(0,0,-.1);    \n        }\n        if (keyD > 0.0)\n        {\n        \tc.xyz += mat3(a) * vec3(.1,0,0);    \n        }\n        if (keyQ > 0.0)\n        {\n         \tc.xyz += mat3(a) * vec3(0,-.1,0);   \n        }\n        if (keyE > 0.0)\n        {\n         \tc.xyz += mat3(a) * vec3(0,.1,0);   \n        }\n    }\n    if (p==1)\n    {\n     \tvec3 lm = texelFetch(iChannel0, ivec2(2, 0), 0).rgb;\n        if (lm.b > 0. && iMouse.z > 0.)\n        {\n         \tvec2 dwl = (iMouse.xy-lm.xy)/iResolution.xy * 5.;\n            c.yx+=dwl.xy*vec2(-1,1);\n        }\n    }\n    if (p==2)\n    {\n\t\tc = iMouse;\n    }\n    if (iFrame == 0) { \n    if (p==0)\n        c = vec4(0,5,-8,0);\n  \n    }\n    fragColor = c;\n}","name":"Buffer B","description":"","type":"buffer"}]}