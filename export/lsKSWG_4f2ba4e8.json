{"ver":"0.1","info":{"id":"lsKSWG","date":"1466401678","viewed":423,"name":"Sparkle Particle","username":"thecodewarrior","description":"Sparkle particle shader","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["superellipse","particle","sparkle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COUNT 15\n\nvec4 glColor = vec4(1, 0.5, 0, 0.75);\nvec4 foreground = vec4(1, 1, 1, 1);\nvec4 centerColor = vec4(0, 1, 1, 1);\n\nfloat backgroundFade = 5.;\nfloat lengthRandomness = 0.4;\nfloat centerRadius = 0.05;\n\nfloat rand(int n){return fract(sin(float(n)) * 43758.5453123);}\n\nvec4 godSparkleSimple( vec2 uv )\n{\n    vec4 color = vec4(0, 0, 0, 0);\n    \n    float len = sqrt( uv.x * uv.x + uv.y * uv.y );\n    vec2 check = vec2(0, 1);\n    \n    float dotP = check.x*uv.x + check.y*uv.y;\n\tfloat detP = check.x*uv.y - check.y*uv.x;\n    \n    float angle = degrees(atan(detP, dotP));\n    angle += 180.;\n    \n    int randID = 0;\n    \n    for(int i = 0; i < COUNT; i++) {\n        float startAngle = 360. * rand(randID++);\n        float angleWidth = 360. / float( int( 3. + rand(randID++) * 5. )*2);\n        float speed = 200. * ( rand(randID++) - 0.5 );\n        \n        startAngle += speed * iTime;\n        \n        float checkAngle = angle - startAngle;\n        \n        checkAngle = mod(checkAngle, angleWidth*2.);\n        float anglePercent = (checkAngle/angleWidth - 0.5)*2.;\n        \n        float dist = 0.6-lengthRandomness\n            +( lengthRandomness * rand(randID++)    );\n        float distPercent = len/dist;\n        \n        float w = glColor.w\n            *( 1.-( distPercent+0.1*rand(int(checkAngle)))    /**/)\n            *( 1.-clamp(pow(anglePercent, backgroundFade*2.), 0., 1.)    /**/)\n        ;\n        float centerW = clamp(10.*centerRadius-len*10., 0., 1.);\n        \n        float foreW = foreground.w\n            *clamp(1.-len*2., 0., 1.)\n        ;\n        \n        vec4 ourColor = mix(glColor, foreground, clamp(foreW, 0., 1.));\n        ourColor = mix(ourColor, centerColor, centerW);\n        \n        ourColor.w = max( centerW, w );\n        color = mix(color, ourColor, ourColor.w);\n    }\n    \n    return color;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = min(iResolution.x, iResolution.y);\n    float maxsize = max(iResolution.x, iResolution.y);\n    \n    vec2 offset = vec2(0);\n    float offsetAmount = ((maxsize-size)/2. )/size;\n    \n    if(iResolution.x > iResolution.y)\n        offset.x = offsetAmount;\n    if(iResolution.y > iResolution.x)\n        offset.y = offsetAmount;\n    \n    vec2 uv = fragCoord.xy/size;\n    uv -= offset;\n    \n    if(uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.)\n    {\n        fragColor = vec4(1, 0, 1, 1);\n    } else {\n        uv = uv - vec2(0.5);\n        fragColor = godSparkleSimple(uv);\n    }\n}","name":"Image","description":"","type":"image"}]}