{"ver":"0.1","info":{"id":"3dXfDr","date":"1588004495","viewed":205,"name":"Implicit Star","username":"harry7557558","description":"A modification of my first shader https://www.shadertoy.com/view/WtjSD3. Make the code faster and look less naive.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["star","implicit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// the equation of the star shape:\n// 4(x²+2y²+z²-1)²-(5x⁴z-10x²z³+z⁵)-1=0\n// or: 4(x²+2y²+z²-1)²-Im((x+zi)⁵)-1=0\n\nfloat func(in vec3 p){\n    vec3 u = p*p;\n    float d = u.x+2.0*u.y+u.z-1.0;\n    if (d>3.0) return d;  // clipping needed because its degree is odd\n    return 4.0*d*d-p.z*(5.*u.x*u.x-10.*u.x*u.z+u.z*u.z)-1.0;\n}\n\nvec3 calcGrad(vec3 p){\n    const float e = .0001;\n\tfloat a = func(p+vec3(e,e,e));\n\tfloat b = func(p+vec3(e,-e,-e));\n\tfloat c = func(p+vec3(-e,e,-e));\n\tfloat d = func(p+vec3(-e,-e,e));\n\treturn vec3(a+b-c-d,a-b+c-d,a-b-c+d)*(.25/e);\n}\n\n\nconst vec3 light = normalize(vec3(-0.3, 0.1, 1));\n\nvec3 castRay(vec3 p, vec3 d) {\n\tfloat t = 1e-3, dt;\n\tif (func(p) < 0.0) return vec3(0.0, 0.0, 0.0);\n\tfor (int i = 0; i < 1024; i++) {\n\t\tdt = func(p + t * d);\n        dt /= length(calcGrad(p + t * d));\n\t\tt += 0.5*dt;\n        if (dt < 1e-2) {\n\t\t\tp += t * d;\n    \t\tvec3 n = normalize(calcGrad(p));\n    \t\tif (dot(n, d) > 0.0) n = -n;\n    \t\tfloat dif = clamp(dot(n, light), 0.0, 1.0);\n    \t\treturn (0.7*dif+0.2*pow(max(dot(d, light),0.0),4.0)+0.4)*vec3(1.0,0.6,0.1);\n        }\n\t\tif (t > 20.0) break;\n\t}\n    vec3 col = sin(30.0*d.x)+sin(30.0*d.y)+sin(30.0*d.z)>0.0 ?\n        vec3(1.0,0.8,0.6) : vec3(0.9,0.6,0.8);\n\tt = max(dot(d,light), 0.0);\n\treturn (0.3+0.7*t)*col;\n}\n\n#define AA 2\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float h = 1.5*cos(0.4*iTime)+1.0;\n    float r = sqrt(20.0-h*h)+0.2*(cos(iTime)+1.0);\n    vec3 pos = vec3(r*cos(iTime), r*sin(iTime), h);\n    float Unit = 0.5*length(iResolution);\n\n    vec3 w = normalize(pos);\n    vec3 u=normalize(vec3(-w.y,w.x,0));\n    vec3 v=cross(w,u);\n    mat3 M=-mat3(u,v,w);\n\n    vec3 col;\n    for (int i=0;i<AA;i++) for (int j=0;j<AA;j++) {\n        vec3 d=M*vec3(0.5*iResolution.xy-(fragCoord.xy+vec2(i,j)/float(AA)),Unit);\n        col += castRay(pos,normalize(d));\n    }\n    col/=float(AA*AA);\n\n    col.x=pow(col.x,0.75),col.y=pow(col.y,0.75),col.z=pow(col.z,0.75);\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}