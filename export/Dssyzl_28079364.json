{"ver":"0.1","info":{"id":"Dssyzl","date":"1687801097","viewed":45,"name":"Scanning circle","username":"ojaoweir","description":"My first own shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318*(c*t+d));\n}\n\nvec4 GetFragColor(float distanceFromLine, float distanceFromCenter, vec3 upperHalfColor, vec3 lowerHalfColor) \n{\n    if(distanceFromLine < 0.0) {\n        return vec4(distanceFromCenter * lowerHalfColor,1.0);\n    } else {\n        return vec4(distanceFromCenter * upperHalfColor,1.0);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)  / iResolution.y;\n    vec2 uv_line = uv;\n    \n    float minCircleRadius = 0.7;\n    float maxCircleRadius = 0.8;\n    float circleRadius = minCircleRadius;\n    float lineWidth = 0.1;\n    float numberOfColors = 4.0;\n    \n    \n    // Generate line that passes through screen\n    // Adjust height so it starts at top of screen\n    float currentLineHeight = sin(iTime + (PI/2.0));\n    float distanceFromLine = uv_line.y - currentLineHeight;\n    float useLineColor = step(lineWidth, abs(distanceFromLine));\n    float linePercentage =1.0 - (abs(distanceFromLine) / lineWidth);\n    useLineColor = 1.0 - useLineColor;\n    \n    if(useLineColor > 0.0) {\n        circleRadius = mix(minCircleRadius, maxCircleRadius, smoothstep(0.1, 0.9, linePercentage));\n    }\n    \n    \n    float distanceFromCenter = length(uv);\n    distanceFromCenter -= circleRadius;\n    \n    distanceFromCenter = smoothstep(0.0,0.05, distanceFromCenter);\n    \n    \n    //Inverse distance to highlight cirle\n    distanceFromCenter = 1.0 - distanceFromCenter;\n    \n    \n    // Define which period we are in\n    float periodCount = iTime / PI;\n    float pastPeriodCount = (iTime - PI)/ PI;\n    periodCount = ceil(periodCount)/numberOfColors;\n    pastPeriodCount = ceil(pastPeriodCount)/numberOfColors;\n    \n    if(useLineColor > 0.0) {\n        vec4 color1 = GetFragColor(distanceFromLine, distanceFromCenter, palette(pastPeriodCount), palette(periodCount));\n        vec4 color2 = GetFragColor(distanceFromLine, distanceFromCenter, palette(periodCount), palette(pastPeriodCount));\n        vec4 colorMix = mix(color1, color2, 0.5);\n        \n        if(mod(periodCount,(1.0/(numberOfColors/2.0))) == 0.0) {\n            fragColor = mix(color1, colorMix, linePercentage);\n        } else {\n            fragColor = mix(color2, colorMix, linePercentage);\n        }\n    } else {\n        // Define if we are moving upwards or downwards\n        if(mod(periodCount,(1.0/(numberOfColors/2.0))) == 0.0) {\n            fragColor = GetFragColor(distanceFromLine, distanceFromCenter, palette(pastPeriodCount), palette(periodCount));\n        } else {\n            fragColor = GetFragColor(distanceFromLine, distanceFromCenter, palette(periodCount), palette(pastPeriodCount));\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}