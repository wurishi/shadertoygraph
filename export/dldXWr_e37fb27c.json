{"ver":"0.1","info":{"id":"dldXWr","date":"1685300158","viewed":103,"name":"pulse_grid_rb","username":"johnowhitaker","description":"Messing about with the shader from https://www.shadertoy.com/view/mtyGWy","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["pulse","palette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \nA pulsing animation based on the shader in https://youtu.be/f4s1h2YETNY\n*/\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.702,0.196,0.196);\n    vec3 b = vec3(0.878,0.122,0.122);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // UV coord form -1 to 1, but scaled so we don't get stretch\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 2.0; i++) { // Fractal-ish... change 2.0 -> 4.0 for more\n        uv = fract(uv * (i + 1.5)) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n        \n        d = max(d, 0.03); // Avoid infinite nesting rings\n        \n        d = 0.05/d; // Set scale\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4); // color\n        \n        // Expanding rungs\n        d = sin(d - iTime)/8.;\n        d = abs(d);\n        d = pow(0.02 / d, 1.2); // Change 0.02 -> 0.05 for brighter\n\n        finalColor += col * d;\n        \n    }\n    \n    // Pulse brightness in sync with anim:\n    float mux = abs(sin(iTime));\n    finalColor *= mux;\n    \n    // Final output\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}