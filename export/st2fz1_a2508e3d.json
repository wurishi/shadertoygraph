{"ver":"0.1","info":{"id":"st2fz1","date":"1651809693","viewed":236,"name":"Radar shader","username":"pancakespeople","description":"A radar screen just like in the movies.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["grid","radar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat ring(float uvRadius, float ringRadius) {\n    return smoothstep(ringRadius - 0.01, ringRadius, uvRadius) * smoothstep(ringRadius + 0.01, ringRadius, uvRadius);\n}\n\nfloat grid(vec2 uv) {\n    if (fract(uv.x * 10.0) < 0.01) return 1.0;\n    if (fract(uv.y * 10.0) < 0.01) return 1.0;\n    return 0.0;\n}\n\nvec2 random2(vec2 st) {\n\tst = vec2(dot(st, vec2(127.1, 311.7)),\n\t\tdot(st, vec2(269.5, 183.3)));\n\treturn -1.0 + 2.0 * fract(sin(st) * 43758.5453123 * 0.7897);\n}\n\nfloat circle(vec2 uv, vec2 pos, float radius) {\n    return smoothstep(radius, 0.0, length(uv-pos));\n}\n\nfloat circle2(vec2 uv, vec2 pos, float radius) {\n    return radius*0.1 / length(uv-pos);\n}\n\nfloat randomSin(float t) {\n    return sin(t*0.2352)*sin(t*1.5843)*sin(t*1.2968)+1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    float radius = length(uv);\n    vec3 col = vec3(0.0);\n    \n    col += ring(radius, 0.1); \n    col += ring(radius, 0.25);\n    col += ring(radius, 0.4);\n    \n    col += smoothstep(0.01, 0.0, uv.x-uv.y) * smoothstep(-0.01, 0.0, uv.x-uv.y);\n    col += smoothstep(0.01, 0.0, -uv.x-uv.y) * smoothstep(-0.01, 0.0, -uv.x-uv.y);\n    \n    col += grid(uv) * smoothstep(0.4, 0.39, radius);\n    \n    for (int i = 0; i < 10; i++) {\n        vec2 pos = random2(vec2(i, i))*0.25;\n        float size = randomSin(iTime/2.0 + random2(vec2(i+200, i+300)).x)*0.05;\n        col += circle2(uv, pos, size);\n    }\n    \n    uv *= rotate(iTime);\n    \n    if (uv.y > 0.0 && uv.x > 0.0) {\n        col += vec3(smoothstep(radius / 5.0, 0.0, uv.y)) * smoothstep(0.4, 0.39, radius);\n    }\n\n    col *= mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), smoothstep(0.7, 0.8, fract(iTime/10.0)) * smoothstep(1.0, 0.9, fract(iTime/10.0)));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}