{"ver":"0.1","info":{"id":"Ds2SWm","date":"1670404309","viewed":63,"name":"Logistic Iteration","username":"complexbezier","description":"Iterations of the function x[n+1] = a*x[n]*(1.0-x[n]), where the y-coordinate maps to the initial x value on a scale of zero to one, and the x-coordinate maps to the value of the a-parameter used in the iteration function. Note the periodicity.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["iterative","logistic","mathematical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//All the meaningful code is in Buffer A\n//Sadly I'm not sure how to get this to work in fullscreen. Ah well.\n//Make sure to hit the restart button when you want to reset the simulation!\n//It's a must!!!!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor=texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Horizontal zoom factor. Please keep >= 1\nfloat zoomFactor=1.0;\n//Max a-value. iteration always escapes after 4, so this is the default.\nfloat aMax = 4.0;\n//Sleep for this many frames before iterating (less one, technically).\n//The higher this is, the 'slower' this iterative animation progresses\nint sleepFrames = 30;\n\nfloat f(float x, float a) {\n    return a*x*(1.0-x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //Set this higher than 1 if you're interested in seeing the detail on the right\n    float a = uv.x*aMax/zoomFactor+aMax*(1.-1./zoomFactor);\n    \n    float x;\n    if (iTime<1.) {\n        x = uv.y;\n        x = f(x,a);\n    }\n    else {\n        x = texture(iChannel0,uv).r;\n        if (iFrame % sleepFrames == 0)\n            x = f(x,a);\n    }\n    \n    fragColor = vec4(x,0.,0.,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}