{"ver":"0.1","info":{"id":"4fycDR","date":"1731670922","viewed":26,"name":"Fork Box SDF (f michael_dl 910","username":"michael_dll","description":"FORK FROM IQ\nSIGNED distance to a non-rounded box, with a long comment describing what's going on","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","distance","signed"],"hasliked":0,"parentid":"tdGSDd","parentname":"Box SDF (from iQ's website)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance to a 2D rounded box\n\n\n// (0, 0) is the center of the box.\n// The four corners of the box are (+/- b.x, +/- b.y).\n// d is the vector between p and the closest box corner,\n// mapped into the positive quadrant: negative values\n// for dimensions inside the box and positive values for\n// dimensions outside the box.\n// max(d, vec2(0)) is 0 for dimensions inside the box\n// and negative for dimensions outside the box.\n// length(max(d,vec2(0))) is 0 if p is inside the box and\n// the distance from the closest point inside the box if\n// p is outside the box.\n// If p is outside the box, max(d.x,d.y) is positive and\n// min(max(d.x,d.y),0.0) is zero.\n// If p is inside the box, max(d.x,d.y) is the negative\n// distance from p to the closest point on an edge of the box,\n// and min(max(d.x,d.y),0.0) is the same.\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\tvec2 size = vec2(0.2);\n\n\tfloat dist = sdBox( uv, size);\n\n    vec3 col = vec3(1.0) - sign(dist)*vec3(1.0,1.0,1.0);\n    \n    float smoothness = 0.5;\n    \n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,smoothness,abs(dist)) );\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}