{"ver":"0.1","info":{"id":"wdGXzR","date":"1573342447","viewed":467,"name":"equalizzzzer","username":"ArthurSango","description":"eq","likes":5,"published":3,"flags":4,"usePreview":0,"tags":["eq"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nmat2 rot(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nmat2 fuck(float _angle){\n    return mat2(acos(_angle),-sin(_angle),\n                -sin(_angle),tan(_angle));\n}\n#define time iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float sign = step(0.5, uv.x) ;\n   \n    \n    uv = abs( 2. * uv - 1. );\n    uv *= 0.5 ;\n    vec2 iuv = uv;\n    \n   // uv = fract( 5. * uv ) * 0.5 ;\n    \n  // uv = fract( abs( uv * fbm(uv)  ) );\n  \n    \n    vec3 col = vec3(0.);\n    \n    uv *=  rot( fbm(uv) * 3.28);\n    \n  //  uv = fract( uv * 5. * (sin(time) + 1. ));\n    \n   // uv = fract( uv * 5.);\n\n\n   \n    vec4 t = texture( iChannel0, uv);\n    \n    float d = distance( vec2(sin(time)), vec2(t.x) );\n    \n    float v = smoothstep( uv.y - 0.2, uv.y , t.x) -smoothstep( uv.y, uv.y + 0.2, t.x);\n    float h =  smoothstep( uv.x - 0.2, uv.x , t.x) -smoothstep( uv.x, uv.x + 0.2, t.x);\n    float dist = smoothstep( 0.1 , 0.4 * t.x, distance(iuv, vec2(0.0)) );\n    \n    \n      \n    float v2 = smoothstep( iuv.y - 0.2, iuv.y , t.x) -smoothstep( iuv.y,iuv.y + 0.2, t.x);\n    float h2 =  smoothstep( iuv.x - 0.2, iuv.x , t.x) -smoothstep( iuv.x, iuv.x + 0.2, t.x);\n    float dist2 = smoothstep( 0.1 , 0.4 * t.x, distance(iuv, vec2(0.0)) );\n  \n   col.x =    v;\n    col.z = h  ;\n    \n    vec3 col2 = vec3( v2, h2, dist2);\n   \n    //col.z = fbm( vec2(v, h) );\n//col = col2;\n    //col = mix( col, col2, 0.5);\n  // col.y= dist   ;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}