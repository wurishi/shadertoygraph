{"ver":"0.1","info":{"id":"4XSfDK","date":"1729933751","viewed":16,"name":"Example: SDF Rounded/Annular ","username":"ElliotPadfield","description":"This shader renders a purple hexagon with both rounding and annular effects applied. UV Normalisation: Adjusts for aspect ratio. Rounding Effector: Softens edges based on a dynamic radius. Annular Effector: Creates ring effect based on animated thickness.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference: https://iquilezles.org/articles/distfunctions/\n\n// Rounded effector for SDF\nfloat opRound(float dist, float r) {\n    return dist - r; // Moves isosurface outward by `r` for rounded edges\n}\n\n// Annular effector for SDF\nfloat opOnion(float dist, float r) {\n    return abs(dist) - r; // Creates ring effect by layering isosurface\n}\n\n// SDF for a regular hexagon\nfloat sdHexagon(vec2 p, float r) {\n    const vec3 k = vec3(-0.866025404, 0.5, 0.577350269); // Hexagon constants\n    p = abs(p);\n    p -= 2.0 * min(dot(k.xy, p), 0.0) * k.xy;\n    p -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n    return length(p) * sign(p.y); // Distance from `p` to hexagon edge\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Step 1: Normalize UV coordinates with aspect ratio correction\n    // More information at: https://www.shadertoy.com/view/lf2fWw\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - R) / min(R.x, R.y); // Normalize to [-1, 1] along the shortest side\n    vec2 normUV = uv * 0.5 + 0.5;\n\n    // Step 2: Define size and animated effect parameters\n    float size = 0.3;               // Hexagon radius\n    float roundingRadius = 0.00 + 0.05 * sin(iTime);  // Animate rounding effect over time\n    float ringThickness = 0.05 + 0.03 * cos(iTime);   // Animate annular effect over time\n\n    // Step 3: Compute base SDF for the hexagon\n    float dist = sdHexagon(uv, size);\n\n    // Step 4: Apply both rounding and annular effectors\n    dist = opOnion(opRound(dist, roundingRadius), ringThickness);\n\n    // Step 5: Anti-aliasing for smooth edges\n    // For more details on anti-aliasing, see: https://www.shadertoy.com/view/MfjBDw\n    float pix = 1.5 / min(R.x, R.y);  // Pixel width for consistent scaling\n    float aa = smoothstep(-pix, pix, dist);\n\n    // Step 6: Render the shape with purple color\n    vec3 shapeColor = mix(vec3(0.5, 0.0, 0.5), vec3(0.0), aa); // Purple color\n    fragColor = vec4(shapeColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}