{"ver":"0.1","info":{"id":"WltcDM","date":"1609262981","viewed":108,"name":"sdfscape","username":"pni","description":"SDFs with soft shadows, displacement, subtraction.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sdfsoftshadowdisplacement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat smoothDiff(float d2, float d1, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0 );\n    return mix(d2, -d1, h ) + k * h * (1.0 - h);\n}\n\nmat2 rot(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat scene(vec3 p, out float id) {\n    id = 0.;\n    float d = 0.02 * (cos(10. * p.x + iTime) * sin(15. * p.z + iTime) + \n              .5 * sin(13. * p.x + iTime) + 25. * sin(p.x / 3. + iTime));\n    \n    d *= 1. - smoothstep(0., 10., p.z);\n    float t = sin(iTime * 4.) * .5 + .5;\n\n    float plane = 1e20;\n    {\n        plane = min(plane, p.y - (-1.2));\n        plane += pow(abs(d), .9);\n    }\n    \n    float ball = 1e20;\n    {\n        vec3 q = p;\n        q.xz = q.xz * rot(sin(iTime) / 2.);\n        q.yz = q.yz * rot(sin(iTime) / 2.);\n        q.y -= t;\n        \n        ball = box(q - vec3(0., 0., 0.), vec3(.5));\n        ball -= .2;\n        ball = smoothDiff(ball, sphere(q - vec3(0., 0., -.4), .4), .3);\n        ball = smoothDiff(ball, sphere(q - vec3(0., 0., .4), .4), .3);\n    }\n    \n    float ball2 = 1e20;\n    {\n        vec3 q = p;\n        q -= vec3(1.5 * sin(iTime * 2.), 1., 1.2 * cos(iTime * 2.));\n        ball2 = sphere(q, .3);\n    }\n    \n    float ball3 = 1e20;\n    {\n        vec3 q = p;\n        q -= vec3(1.5 * sin(iTime), -.5, 1.2 * cos(iTime));\n        ball3 = sphere(q, .5);\n    }\n    \n    \n    float bgBox1 = 1e20;\n    {\n        vec3 q = p;\n        q -= vec3(3, -.75, 3.5);\n        q.xy = q.xy * rot(.2);\n        bgBox1 = box(q, vec3(1.));\n        bgBox1 -= .15;\n    }\n    \n    float bgBox2 = 1e20;\n    {\n        vec3 q = p;\n        q -= vec3(-2, -1, 5.);\n        q.xy = q.xy * rot(.2);\n        q.xz = q.xz * rot(2.3);\n\n        bgBox2 = box(q, vec3(2.));\n        bgBox2 -= .45;\n    }\n      \n    float bgBox3 = 1e20;\n    {\n        vec3 q = p;\n        q -= vec3(-5, -1, 3.5);\n        q.xy = q.xy * rot(.2);\n        q.xz = q.xz * rot(.4);\n        q.yz = q.yz * rot(.4);\n\n\n        bgBox3 = box(q, vec3(1.));\n        bgBox3 -= .15;\n    }\n    \n    float bgBox4 = 1e20;\n    {\n        vec3 q = p;\n        q -= vec3(5, -1, 3.5);\n        q.xy = q.xy * rot(.2);\n        q.xz = q.xz * rot(.4);\n        q.yz = q.yz * rot(.4);\n\n\n        bgBox4 = box(q, vec3(.6));\n        bgBox4 -= .15;\n    }\n    \n    \n    float scene = plane;\n    \n    if (ball < scene) {\n      id = 1.;\n      scene = ball;\n    }\n    \n    if (ball2 < scene) {\n      id = 2.;\n      scene = ball2;\n    } \n    \n    if (ball3 < scene) {\n      id = 3.;\n      scene = ball3;\n    } \n    \n    if (bgBox1 < scene) {\n      id = 4.;\n      scene = bgBox1;\n    } \n    \n      \n    if (bgBox2 < scene) {\n      id = 5.;\n      scene = bgBox2;\n    } \n    \n    if (bgBox3 < scene) {\n      id = 6.;\n      scene = bgBox3;\n    } \n    \n     \n    if (bgBox4 < scene) {\n      id = 7.;\n      scene = bgBox4;\n    } \n    \n    \n    return scene;\n}\n\nfloat march(vec3 from, vec3 to, out vec3 p, float maxDist, out float softness, out float id) {\n    float d = 0.1;\n    softness = 1e20;\n    vec3 dir = normalize(to - from);\n    float ph = 1e20; \n\n    for (int i = 0; i < 200; i++) {\n        p = from + d * dir;\n        float dd = scene(p, id);\n        float y = dd * dd / (2.0 * ph);\n        float qq = sqrt(dd * dd - y * y);\n        softness = min(softness, qq / max(0.0, d - y));\n        \n        if (dd < 0.001 * d) {\n            return 1.;\n        }\n        if (dd > maxDist) {\n            return 0.;\n        }   \n        ph = dd;\n\n        d += dd;\n    }\n    return 0.;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 EPS = vec2(0.0001, 0.0);\n    float id;\n    return normalize(vec3(\n        scene(p + EPS.xyy, id) - scene(p - EPS.xyy, id),\n        scene(p + EPS.yxy, id) - scene(p - EPS.yxy, id),\n        scene(p + EPS.yyx, id) - scene(p - EPS.yyx, id)\n    ));\n}\n\nconst vec3 cam = vec3(0, 0, -4.);\n\nvec3 getFW(vec2 fragCoord) {\n   vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv *= 2.;\n    uv.x *= iResolution.x / iResolution.y;\n    return vec3(uv, -2.);\n}\n\nmat3 refl(vec3 n) {\n    return mat3(1.0) - 2. * outerProduct(n,n);\n}\n\nfloat ill(vec3 lightPos, vec3 surfPos) {\n    vec3 dir = \n        normalize(lightPos - surfPos);\n        \n    vec3 n =\n        getNormal(surfPos);\n        \n    vec3 occPos;  \n    float soft;\n\n    float id;\n\n    float occ = \n        march(surfPos, lightPos, occPos, length(surfPos - lightPos), soft, id);\n        \n    vec3 camDir = \n        normalize(cam - surfPos);\n        \n    float spec = \n        smoothstep(.98, 1., dot(-dir, camDir * refl(n)));\n\n    return 4.5 * spec + clamp(2. * soft * (1. - occ), 0., 1.) * clamp(dot(dir, n), 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 fw = getFW(fragCoord);\n    vec3 p;\n    float soft;\n    float id;\n    float mask = march(cam, fw, p, 200., soft, id);\n    \n    vec3 mat = vec3(.5, .5, .5);\n    if (id > 6.5) {\n        mat = vec3(0.5, .25, .65);\n    }\n    else if (id > 5.5) {\n        mat = vec3(0.4, 2.25, 1.25);\n    }\n    else if (id > 4.5) {\n        mat = vec3(0.4, 1.25, 1225);\n    }\n    else if (id > 3.5) {\n        mat = vec3(1.5, 0.35, 0.55);\n    }\n    else if (id > 2.5) {\n        mat = vec3(0.4, 1.25, 1.25);\n    }\n    else if (id > 1.5) {\n        mat = vec3(1.4, 1.25, .125);\n    }\n    else if (id > 0.5) {\n        mat = vec3(1.9, .125, .125);\n    }\n    vec3 color = vec3(0.);\n    color += mat * vec3(1., .8, .7) * ill(vec3(2., 4., -3.), p);\n    color += mat * vec3(.1, .2, 2.0) * ill(vec3(-3., 1., 1.), p);\n    color += mat * .05 * vec3(.1, .15, 1.8);\n    \n    if (mask < 1.) {   \n        float t = smoothstep(-.5, 1.2, fw.y);\n        color = (1. - t) * vec3(.1, .15, 1.8);\n    }\n    fragColor = vec4(pow(color, vec3(.4545)), 1.);\n\n}","name":"Image","description":"","type":"image"}]}