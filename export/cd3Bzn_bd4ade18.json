{"ver":"0.1","info":{"id":"cd3Bzn","date":"1698220400","viewed":77,"name":"Frequency Modulation Demo","username":"derangedlines","description":"Step by step demo to illustrate frequency modulation and demodulation effect on an image. Inspired by the work of Tomasz Sulej (https://github.com/tsulej/GenerateMe).\nControls:\nmouse x-axis: Carrier frequency\nmouse y-axis: Sensitivity of modulator","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["fm","effect","modulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Read mouse pos, to adjust parameters\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // Show different stages of the process\n    vec3 col = vec3(0.0);\n    \n    if (fragCoord.y/iResolution.y > 0.5) \n        if (fragCoord.x/iResolution.x < 0.5)\n            col = texture(iChannel0, fragCoord.xy/iResolution.xy*2.0-vec2(0.0,1.0)).rgb; //top left\n        else\n            col = texture(iChannel1, fragCoord.xy/iResolution.xy*2.0-1.0).rgb; //top right\n    else\n        if (fragCoord.x/iResolution.x < 0.5)\n            col = texture(iChannel2, fragCoord.xy/iResolution.xy*2.0).rgb; //bottom left\n        else\n            col = texture(iChannel3, fragCoord.xy/iResolution.xy*2.0-vec2(1.0,0.0)).rgb; //bottom righz\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Load texture\n    vec3 col = texture(iChannel0, fragCoord.xy/iResolution.xy).rgb;\n    \n    // Output to buffer\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Integrate input image line-by-line\n    vec3 col = vec3(0.0);\n    for(float x = 0.0; x<fragCoord.x; x = x + 1.0)\n    {\n        col += texture(iChannel0, vec2(x, fragCoord.y)/iResolution.xy).rgb;\n    }\n    \n    // FM modulate each channel individually using a sinusoidal baseband signal.\n    // Modulated signal is offset by 0.5, so the values fit in [0.0,1.0] (for visualization)\n    col = 0.5 + AC * cos(2.0*PI*(fragCoord.x/TC+KF*AM*col));\n    \n    //---------------------------------------------------\n    // Distort the FM signal by quantizing\n    float q = 2.0;\n    col = floor(col*(q-1.0)+0.5)/(q-1.0);\n    \n    // Distort the FM signal by adding noise\n    vec3 noise = hash33(vec3(fragCoord.xy, iTime))-0.5;\n    col += 0.5 * noise;\n    \n    // Output to buffer\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Global variables\n#define TC (iResolution.x*(sqrt(1.0-iMouse.x/iResolution.x))) //Carrier's base period [px].\n//#define FC 1.0/TC //Carrier's base frequency [1/px].\n#define KF (0.1+0.7*(iMouse.y/iResolution.y)) //Sensitivity of the frequency modulator\n#define AM 1.0 //Amplitude of base signal (corresponds to the value range of input image)\n#define AC 0.5 //Amplitude of modulated signal (corresponds to the value range of the modulated image)\n\n#define PI 3.14159265\n\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //---------------------------------------------------\n    // Demodulate by derivation (difference from previous pixel)\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    col -= texture(iChannel0, (fragCoord-vec2(1.0, 0.0))/iResolution.xy).rgb;\n\n    // Envelope filtering with absolute value\n    col = abs(col);\n    \n    // Compensate for discrete time derivation\n    // col /= (sin(2.0*PI*(1.0/TC+KF*AM)/2.0));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define A 1.0/(1.0*PI/TC+1.0) //Low-pass filter parameter. Cutoff frequency set to FC.\n#define W 10 // Windows size for averaging. 10 just happens to works.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Low-pass filtering with leaky integrator\n    vec3 col = vec3(0.0);\n    for(int x=1; float(x)<=fragCoord.x; x++)\n    {\n        col = (1.0-A) * col + A * texture(iChannel0, vec2(float(x), fragCoord.y)/iResolution.xy).rgb;\n    }\n    \n    \n    // Second Low-pass filtering with average\n    for(int x = -W/2; x<W/2; x++)\n    {\n        col += texture(iChannel0, (fragCoord.xy+vec2(float(x), 0.0))/iResolution.xy).rgb;\n    }\n    col /= float(W+1);\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}