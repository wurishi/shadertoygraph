{"ver":"0.1","info":{"id":"3dSyRK","date":"1586905153","viewed":369,"name":"Harmonic Stars","username":"PHTest","description":"Make sure the music is playing in iChannel0!\n\n","likes":10,"published":1,"flags":64,"usePreview":0,"tags":["3d","spectrum","music","spheres","audio","stars","audioreactive","audiovisual","vj","custom","frequencies"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lt23Wh","filepath":"https://soundcloud.com/stampthewax/premiere-vels-trio-yellow-ochre-pt1-stw-premiere","previewfilepath":"https://soundcloud.com/stampthewax/premiere-vels-trio-yellow-ochre-pt1-stw-premiere","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat3 rot(vec3 ang) {\n\tmat3 x = mat3(1.0,0.0,0.0,0.0,cos(ang.x),-sin(ang.x),0.0,sin(ang.x),cos(ang.x));\n\tmat3 y = mat3(cos(ang.y),0.0,sin(ang.y),0.0,1.0,0.0,-sin(ang.y),0.0,cos(ang.y));\n\tmat3 z = mat3(cos(ang.z),-sin(ang.z),0.0,sin(ang.z),cos(ang.z),0.0,0.0,0.0,1.0);\n\treturn x*y*z;\n}\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,128.852))) * 43758.5453)*2.0-1.0;\n}\n\nfloat loudness(float i, float mag) {\n\treturn 10.0*mag*sqrt(log(i + 1.0));\n}\n\nfloat sphereDistance(vec3 st, vec3 center, float radius) {\n\treturn (distance(st, center) - radius);\n}\n\nvec3 opRep( in vec3 p, in vec3 c) {\n  \tvec3 q = mod(p,c)-0.5*c;\n  \treturn q;\n}\n\nvec3 map( in vec3 p ) {\n  \tvec3 rep = vec3(118.0);\n  \tvec3 randIndex = floor(p.xyz/rep.xyz);\n  \tfloat rand = noise3D(randIndex);\n  \tfloat f = 1.0*noise3D(1.13*floor(p.xyz/rep.xyz));\n  \tfloat spectrumRange = abs(f)*0.40;\n  \tfloat freqMag = 1.0*texture(iChannel0, vec2(spectrumRange,0.0)).x;\n  \tfreqMag = loudness(spectrumRange, freqMag);\n\tp = opRep( p, rep);\n  \tvec4 sphere = vec4(rand*0.15*rep.x, f*0.15*rep.y, (0.5*f + 0.5*rand)*0.15*rep.z, 1.0 + 5.0*abs(f));\n  \tfloat dist = sphereDistance(p, sphere.xyz, sphere.w);\n\n  \tvec3 result = vec3(dist, f, freqMag);\n  \treturn result;\n}\n\nvec3 GetSphereIndexColor(float index) {\n  \tvec3 cA = vec3(0.2, 0.6, 0.9);\n  \tvec3 cB = vec3(0.3, 0.5, 0.2);\n  \tvec3 cC = vec3(1.0, 1.0, 1.0);\n  \tvec3 cD = vec3(0.1, 0.2, 0.5);\n\treturn palette(index + 0.4, cA, cB, cC, cD);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = (2.*fragCoord - iResolution.xy ) / iResolution.y;\n\t// Camera setup.\n\tvec3 viewDir = vec3(0.0,0.0,1.0);\n    vec3 camUp = vec3(0.0,1.0,0.0);\n    vec3 camPos = vec3(0.0);\n\tvec3 u = normalize(cross(camUp,viewDir));\n\tvec3 v = cross(viewDir,u);\n\tvec3 vcv = (camPos + viewDir);\n\tvec3 srcCoord = vcv+p.x*u+p.y*v;\n\tvec3 rayDir = rot(vec3(0.3*iTime,sin(0.3*iTime),cos(0.223*iTime)))*normalize(srcCoord - camPos);\n\n  \tvec4 c = vec4(0.0,0.0,0.0,1.0);\n\n  \tfloat depth = 0.0;\n  \tfloat d = 0.0;\n \tvec3 pos = vec3(0);\n  \tvec3 colorAcc = vec3(0);\n  \tfor (int i = 0; i < 109; i++) {\n    \tpos = camPos + rayDir * depth + 40.0*iTime;\n    \tvec3 mapRes = map(pos);\n    \td = mapRes.x;\n    \tfloat lightFalloffFactor = 1.2 - 0.6*mapRes.z;\n    \tlightFalloffFactor = clamp(lightFalloffFactor, 0.1, 1.0);\n    \tcolorAcc += exp(-d*lightFalloffFactor) * 1.0*GetSphereIndexColor(mapRes.y);\n    \tdepth += d*(0.4);\n  \t}\n  \tc = vec4(colorAcc*0.24,1.0);\n\n  \tfragColor = c;\n}\n","name":"Image","description":"","type":"image"}]}