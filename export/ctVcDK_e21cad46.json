{"ver":"0.1","info":{"id":"ctVcDK","date":"1700677830","viewed":51,"name":"Remix: Passage + audio","username":"MV10","description":"Everything is better with audio-reactivity! And color!\nThe track? Maze Guardian, of course... (takes about 30 sec to get going ... x=0.07 works best with a strong beat)","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["3d","audio","maze"],"hasliked":0,"parentid":"mlKyRK","parentname":"Passage [320]"},"renderpass":[{"inputs":[{"id":"Mst3R2","filepath":"https://soundcloud.com/space_wizard_music/the-maze-guardian","previewfilepath":"https://soundcloud.com/space_wizard_music/the-maze-guardian","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/tstcDX\nvec3 rgb2hsv(vec3 c)\n{\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    const float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// https://www.shadertoy.com/view/tstcDX\nvec3 hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    // mv10 - time-twitch based on beat\n    float fft = texture(iChannel0, vec2(0.07, 0.5)).x;\n    float time = iTime + (fft - 0.45);\n\n    //Clear fragcolor\n    O *= 0.;\n    \n    //Raymarch loop:\n    //iterator, step-size, raymarch distance, Tau\n    //Raymarchs 100 times adding brightness when close to a surface\n    for(float i,s,d,T=6.283; i++<1e2; O+=1e-5/(.001-s))\n    {\n        //Rotation matrix\n        mat2 R = mat2(8,6,-6,8)*.1;\n        //Resolution for scaling\n        vec3 r = iResolution,\n        //Project sample with roll rotation and distance\n        p = vec3((I+I-r.xy)/r.x*d*R, d-9.)*.7;\n        //Rotate pitch\n        p.yz *= R;\n        //Step forward (negative for code golfing reasons)\n        d -= s = min(p.z, cos(dot(\n            //Compute subcell coordinates\n            modf(fract((\n            //Using polar-log coordinates\n            vec2(atan(p.y,p.x),log(s=length(p.xy)))/T-time/2e1)*\n            //Rotate 45 degrees and scale repetition\n            mat2(p/p,-1))*15., p.xy),\n        //Randomly flip cells and correct for scaling\n        sign(cos(p.xy+p.y)))*T)*s/4e1);\n    }\n\n\n    // mv10 - time-based hue-shifting\n    vec3 hsv = rgb2hsv(O.rgb);\n    float hue = hsv.x + abs(sin(iTime * 0.1));\n    vec3 rgb = hsv2rgb(vec3(hue, 1.0, hsv.z));\n    O = vec4(rgb.rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}