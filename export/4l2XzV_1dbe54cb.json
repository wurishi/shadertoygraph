{"ver":"0.1","info":{"id":"4l2XzV","date":"1445062928","viewed":220,"name":"Scale-invariant dots","username":"blair1618","description":"A dot pattern that adjusts itself to remain nearly invariant under scaling","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float circle(vec2 uv, vec2 c, float r)\n{\n    return 1. - smoothstep(r * 0.975, r * 1.025, length(uv - c));\n}\n\n// Replace this with a signed distance field sampler for more flexibility\nfloat dots_base(vec2 uv, float scale, float weight)\n{\n    uv = mod(uv, scale);\n    float r = 0.2 * scale * weight;\n    return circle(uv, vec2(0.25 * scale), r) + circle(uv, vec2(0.75 * scale), r);\n}\n\nfloat dots_blended(vec2 uv, float scale)\n{\n    float f = fract(log2(scale));\n    float scale0 = .5 * exp2(f);\n    float scale1 = .5 * scale0;\n    float blend = smoothstep(.35, .65, f);\n    return dots_base(uv, scale0, 1. - blend) + dots_base(uv, scale1, blend);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y);\n    float scale = abs(.55 + .45 * sin(iTime / 1.2));\n    fragColor = vec4(uv, .5 + .5 * sin(iTime), 1.0);\n    fragColor *= dots_blended(uv - vec2(.5), scale);\n}\n","name":"","description":"","type":"image"}]}