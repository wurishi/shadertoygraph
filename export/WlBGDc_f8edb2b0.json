{"ver":"0.1","info":{"id":"WlBGDc","date":"1561301083","viewed":153,"name":"Mandelbrot potential coloring","username":"matistjati","description":"Modified version of the algorithm described in\nhttps://www.math.univ-toulouse.fr/~cheritat/wiki-draw/index.php/Mandelbrot_set#The_potential\nThe modification is combining distance estimation along with the potential.\nThe juice lies around line 43","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","mandelbrotset","potential"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 origin = vec2(-.01,.74);\nconst float escapeRadius = 1000000.;\n\nvec3 getColor(float v)\n{\n    /*vec3 col = vec3(0.1) * sin(v);\n    col = mix(col, vec3(0.1, 0.2, 0.4), sin(1.-v));\n    col = mix(col, vec3(0.1, 0.2, 0.7), pow(sin(1.-v),2.));\n    return col;*/\n\t\n    float a = 1.;\n    float b = 0.34004648219;  // 1/3*sqrt(2)\n    float c = 0.17965377284; // 1/7*3^(1/8)\n    return vec3((1.-cos(a*v))*0.5, (1.-cos(b*v))*0.5, (1.-cos(c*v))*0.5);\n}\n\nvec3 iterate(vec2 c)\n{\n    float m = dot(c,c);\n    vec2 z = c;\n    vec2 dz = vec2(0.0);\n    vec3 col = vec3(1.);\n\n    \n    //const float k = 0.69314718056;\n    const float maxIter = 1000.;\n    float i=0.;\n    float power = 1.;\n    for(;i<maxIter;i++)\n    {\n        dz = 2.* mat2(z,-z.y,z.x) * dz + 1.;\n        \n        power = power * 2.;\n        z = mat2(z, -z.y, z.x) * z + c;\n        \n        m = dot(z,z);\n        if(m>escapeRadius)\n        {\n            float dist = sqrt( m/dot(dz, dz))*0.5f*log(m);\n\t\t\t\n            float k;\n            k = abs(sin(iTime*0.3))*3.;\n            // Try uncommenting these individually\n            k = (1./sqrt(sqrt(sqrt(sqrt(dist)))))* (k*k+.25);\n            //k *= 100.;\n            //k = k + (1.-(1./(sqrt(sqrt(sqrt(dist))))));\n                \n            \n        \tfloat v = log(log(m)/power)/k;\n            col = getColor(v);\n            break;\n        }\n        \n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = 2157.7;\n    float tz = 0.5-0.5*cos(0.225*t);\n    float zoom = pow( 0.5, 13.0*tz );\n    \n\tvec2 uv = (2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    vec2 c = origin + uv*zoom;\n    \n    vec3 col = iterate(c);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}