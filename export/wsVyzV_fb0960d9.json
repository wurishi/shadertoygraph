{"ver":"0.1","info":{"id":"wsVyzV","date":"1603291559","viewed":254,"name":"Shore Flood","username":"Leasel","description":"It shows a way to make a flood in parallel","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["buffers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //Shows the flood propagating\n    vec4 Col = texture(iChannel0, uv);\n    vec4 waves = mod(texture(iChannel0, uv), 0.5)*2.;\n    fragColor = Col + waves;\n    \n    //Shows the amount of not being able to transfer fluids neighbours a cell has\n    //fragColor += texture(iChannel1, uv)*0.1f;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//This per cell what it can take from other neighbours and if the other neighbours can't get water from itsel it means it has to hold it(this is done with buffer C)\n//iChannel2 determiness where there can be water and not\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dif = vec3(1./iResolution.xy, 0); \n    vec2 uv = fragCoord.xy*dif.xy; \n    \n    float AmountIGetWhenFlooded = (texture(iChannel2, uv).x != 0. ?\n        (\n        texture(iChannel0, uv + dif.xz).x * (1.-texture(iChannel2, uv + dif.xz).x) +\n        texture(iChannel0, uv - dif.xz).x * (1.-texture(iChannel2, uv - dif.xz).x) +\n        texture(iChannel0, uv + dif.zy).x * (1.-texture(iChannel2, uv + dif.zy).x) +\n        texture(iChannel0, uv - dif.zy).x * (1.-texture(iChannel2, uv - dif.zy).x) +\n        fragColor.x * texture(iChannel1, uv).x \n        )*0.25 + texture(iChannel0, uv).x * texture(iChannel2, uv).x : 0.);\n    \n    AmountIGetWhenFlooded += length(fragCoord - iMouse.xy) < 50. && texture(iChannel2, uv).x >= 0.5 && iMouse.z>0. ? 1. : 0.;\n    \n    fragColor = vec4(AmountIGetWhenFlooded);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Set Buffer B to the new flood map\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Amount of passages free, calculates the neighbour amount of not being be able to transfer water\n//This buffer should actually be calculated only once\n//iChannel0 determiness where there can be water and not\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dif = vec3(1./iResolution.xy, 0); \n    vec2 uv = fragCoord.xy*dif.xy;\n    \n    //Loses water to the border, can negate this effect by acknowledging that the border can't get any water => count that as +1\n    fragColor = vec4(4.)-vec4(\n        texture(iChannel0, uv + dif.xz).x+\n        texture(iChannel0, uv - dif.xz).x+\n        texture(iChannel0, uv + dif.zy).x+\n        texture(iChannel0, uv - dif.zy).x);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//This holds the map that is saying where water can be from 1 - 0\n//Is not needed but is a lot cleaner\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buffer D","description":"","type":"buffer"}]}