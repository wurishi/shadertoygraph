{"ver":"0.1","info":{"id":"MX33Ws","date":"1717126856","viewed":64,"name":"Enter Watermelon","username":"ShadeWhizz","description":"its a stereographic inverse with some sum's/differences","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["inverse","stereographic"],"hasliked":0,"parentid":"4XtGzM","parentname":"Stereographic Inverse"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\nfloat sdGrid(in vec2 position, in float margin) {\n\n\t// Calculate per-axis distance from 0.5 to position mod 1\n\tvec2 gridDist = abs(fract(position) - 0.5) - margin;\n    //gridDist.x = 0.0; //makes it look like a magnetic field\n    // nb somehow related to mobius transformations which is related to smith chart\n    // smith chart is z-1/z+1\n\t\n\t// Calculate length for round outer corners, ripped from Inigo Quilez\n\tfloat outsideDist = length(max(gridDist, 0.0));\n\t// Calculate inside separately, ripped from Inigo Quilez\n\tfloat insideDist = min(max(gridDist.x, gridDist.y), 0.0);\n\t\n\treturn outsideDist + insideDist;\n}\n\n// lets define a cool function of stuff on circle\nfloat circle_thing(vec3 cart)\n{\n    float y_angle = acos(cart.y / length(cart));\n    float xz_angle = atan(cart.z, cart.x);\n    \n    y_angle += iTime / 8.0;\n    xz_angle += iTime / 4.0;\n    \n    vec2 p = 6.0 * vec2(y_angle, xz_angle) / PI;\n    return sdGrid(p, 0.1);\n}\n\nvec3 my_stereo_inv(vec2 p)\n{\n    float den = dot(p,p)+1.0;\n    return vec3(\n        2.0*p.x / den,\n        2.0*p.y / den,\n        (den-2.0)/den\n    );\n}\n\nfloat channel(vec2 uv) {\n    //return circle_thing(vec3(uv, 0.0));\n    return circle_thing(my_stereo_inv(uv));\n}\n\nvec3 image(vec2 uv) {\n    float x = channel(uv);\n    float y = channel(-uv);\n    //float z1 = abs(x+y / x-y); // pineapple\n    float z2 = abs(x-y / x+y);\n    float z3 = 3.0*abs(x*y/(x+y));\n    float z1 = 0.25*abs(x*y/(x-y)); // watermelon\n    return vec3(z1,z2,z3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = (uv * 2.0) - 1.0;\n    ndc *= 4.0;\n    fragColor = vec4(image(ndc), 1.0);\n}","name":"Image","description":"","type":"image"}]}