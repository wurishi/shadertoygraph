{"ver":"0.1","info":{"id":"NstBWN","date":"1656498294","viewed":156,"name":"Logo in Resin","username":"TimurAB","description":"Cube made using a tutorial from \"The Art of Code\" YouTube channel\nCrappy attempt to make NVidia logo by me","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","refraction","logo","nvidia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float time_scale = .5;\nconst bool RotateCamera = false;\n\nfloat GetDist1 (vec3 point) {\n    // cube\n    vec4 cube = vec4(0,0,0,1.2);\n\tvec3 q = abs(point - cube.xyz) - cube.w;\n\treturn length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n    // ball\n    //return length(point) - 1.5;\n}\n\nvec3 GetNormal1 (vec3 point) {\n\treturn normalize(GetDist1(point) - vec3(\n\t\tGetDist1(point - vec3(0.01,0,0)),\n\t\tGetDist1(point - vec3(0,0.01,0)),\n\t\tGetDist1(point - vec3(0,0,0.01))\n\t));\n}\n\nfloat GetDist2 (vec3 point) {\n\tfloat\n\t\tr0 = .7,\n\t\tr1 = .6,\n\t\tr2 = .5,\n\t\tr3 = .4;\n    point.y *= -1.0;\n\tvec3 p = point;\n\tp.y = .2 + abs(p.y);\n\tfloat box = max(abs(point.y)-r0, abs(point.x - r0) - r0);\n\tfloat  d = max(length(p) - r2, -(length(p) - r3));\n\td = min(d, max(length(p) - r0, -(length(p) - r1)));\n\t\n\tvec3 p1 = point;\n\tif (p1.y > .0) p1.x /= 1.51;\n\tp1.y = .2 + abs(p1.y);\n\tfloat  d1 = max(length(p1) - r2, -(length(p1) - r3));\n\td1 = -min(d1, max(length(p1) - r0, -(length(p1) - r1)));\n\t\n\td = min(max(d, -box), max(d1, box));\n\td = max(d, abs(point.z) - .12);\n\treturn d;\n}\n\nvec3 GetNormal2 (vec3 point) {\n\treturn normalize(GetDist2(point) - vec3(\n\t\tGetDist2(point - vec3(0.01,0,0)),\n\t\tGetDist2(point - vec3(0,0.01,0)),\n\t\tGetDist2(point - vec3(0,0,0.01))\n\t));\n}\n\nvec3 GetBG (vec3 dir) {\n    if (!RotateCamera) {\n        float t = time_scale * iTime;\n        dir.xz = vec2(\n            dir.x * cos(t) + dir.z * sin(t),\n            dir.x * sin(t) - dir.z * cos(t)\n        );\n    }\n    return texture(iChannel0, dir).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec3 cam = vec3(0,0,-6);\n\tvec3 dir = normalize(vec3(uv,2));\n\t\n\tfloat t = time_scale * iTime;\n\tcam.xz = vec2(\n\t\tcam.x * cos(t) + cam.z * sin(t),\n\t\tcam.x * sin(t) - cam.z * cos(t)\n\t);\n\tdir.xz = vec2(\n\t\tdir.x * cos(t) + dir.z * sin(t),\n\t\tdir.x * sin(t) - dir.z * cos(t)\n\t);\n\t\n\tvec3 col = GetBG(dir);\n\t\n\t// raymarch 1\n\tconst float IOR = 1.1, surf_dist = .002;\n\tfloat d = .0, total = .0;\n\tvec3 p;\n\tfor(int i = 0; i < 100; i ++) {\n\t\tp = cam + dir * total;\n\t\td = GetDist1(p);\n\t\ttotal += d;\n\t\tif (d < surf_dist || total > 50.)\n\t\t\tbreak;\n\t}\n\tif (total < 50.) {\n\t\tvec3 n = GetNormal1(p);\n\t\tvec3 EnterP = p - n * surf_dist * 2.;\n\t\tvec3 refl = GetBG(reflect(dir, n));\n\t\tdir = refract(dir, n, 1.0/IOR);\n\t\t\n\t\t// raymarch 2\n\t\tfloat d0, d1;\n\t\ttotal = .0;\n\t\tfor(int i = 0; i < 100; i ++) {\n\t\t\tp = EnterP + dir * total;\n\t\t\td0 = -GetDist1(p);\n\t\t\td1 = GetDist2(p);\n\t\t\td = min(d0, d1);\n\t\t\ttotal += d;\n\t\t\tif (d < surf_dist || total > 50.) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (total < 50.) {\n            if (d0 < d1) {\n\t\t\t\tn = -GetNormal1(p);\n\t\t\t\tvec3 ExitDir = refract(dir, n, IOR);\n\t\t\t\tif (dot(ExitDir, ExitDir) == .0) {\n\t\t\t\t\tExitDir = reflect(dir, n);\n\t\t\t\t}\n\t\t\t\tcol = GetBG(ExitDir) * (dot(n, vec3(1,2,.2)) * .3 + .4);\n\t\t\t} else {\n\t\t\t\tn = GetNormal2(p);\n\t\t\t\tcol = vec3(0,1,0) * (dot(n, vec3(1,2,.2)) * .3 + .3);\n\t\t\t}\n\t\t\tcol = mix(col, refl, .25);\n\t\t}\n\t}\n\t\n\tfragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}