{"ver":"0.1","info":{"id":"WtXXD2","date":"1564252788","viewed":493,"name":"Distribution weight based blur","username":"robobo1221","description":"Multipass blurring shader with a configureable distribution function","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["blur","distribution","multipass","robobo1221","weight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texcoord = fragCoord/iResolution.xy;\n\t\n    vec4 inColor = texture(iChannel0, texcoord);\n    vec4 inColor1 = texture(iChannel1, texcoord);\n    vec3 color = decodeColor(mix(inColor.rgb, inColor1.rgb, 0.0));\n\n    fragColor = vec4(color / (color + 1.0),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texcoord = fragCoord / iResolution.xy;\n    \n    vec4 inTex = texture(iChannel0, texcoord);\n    vec3 color = inTex.rgb * inTex.a;\n    color /= (1.001 - color);\n    \n    fragColor = vec4(encodeColor(color),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 calcBlur(vec2 texcoord, vec2 pixelSize){\n\tconst int steps = blurSteps;\n    \n    float totalWeight = 0.0;\n    vec3 totalColor = vec3(0.0);\n    \n    float offsetSize = pixelSize.x * blurOSize;\n    \n    for (int i = -steps; i <= steps; ++i){\n        float offset = float(i);\n        float x = abs(offset / blurOSize * ramp);\n\t\tfloat weight = distribution(x);\n        \n        totalColor += texture(iChannel0, texcoord + vec2(offset * offsetSize, 0.0)).rgb * weight;\n        totalWeight += weight;\n    }\n    \n    return decodeColor(totalColor / totalWeight);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n    vec2 texcoord = fragCoord * pixelSize;\n    \n    vec4 inColor = texture(iChannel0, texcoord);\n    vec3 color = calcBlur(texcoord, vec2(blurPSize));\n    \n    fragColor = vec4(encodeColor(color),1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec3 calcBlur(vec2 texcoord, vec2 pixelSize){\n\tconst int steps = blurSteps;\n    \n    float totalWeight = 0.0;\n    vec3 totalColor = vec3(0.0);\n    \n    float offsetSize = pixelSize.y * blurOSize;\n    \n    for (int i = -steps; i <= steps; ++i){\n        float offset = float(i);\n        float x = abs(offset / blurOSize * ramp);\n\t\tfloat weight = distribution(x);\n        \n        totalColor += texture(iChannel0, texcoord + vec2(0.0, offset * offsetSize)).rgb * weight;\n        totalWeight += weight;\n    }\n    \n    return decodeColor(totalColor / totalWeight);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n    vec2 texcoord = fragCoord * pixelSize;\n    \n    vec4 inColor = texture(iChannel0, texcoord);\n    vec3 color = calcBlur(texcoord, vec2(blurPSize));\n    \n    fragColor = vec4(encodeColor(color),1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define blurSteps 100\n\n#define blurOSize 3.0\n#define blurPSize 0.00025\n\n#define ramp 0.2\n\n#define distribution(x) exp(-x * x)\n\nvec3 encodeColor(vec3 color){\n\treturn color * 0.001;\n}\n\nvec3 decodeColor(vec3 color){\n\treturn color * 1000.0;\n}","name":"Common","description":"","type":"common"}]}