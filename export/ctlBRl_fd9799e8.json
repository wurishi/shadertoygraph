{"ver":"0.1","info":{"id":"ctlBRl","date":"1693338740","viewed":83,"name":"imagen binaria","username":"nictemeral","description":"binaria","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["bianria"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//esta es una cuenta quizas algo avanzada para obtener algo cercano a la luminosidad de la imagen\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n  //return dot(color.rgb, vec3(0.333));\n}\n//en cambio podemos usar el promedio del rgb\nfloat promedio(vec4 color) {\n  return (color.r+color.g+color.b)/3.;\n}\n//y por ultimo podemos convertir la imagen rgb y hsb y extraer de estas el canal del brillo\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float umbral = sin(iTime*0.5)*0.5+0.5;\n    vec2 uv = fragCoord/iResolution.xy;\n    float px =1./iChannelResolution[1].x;\n    \n    // Time varying pixel color\n    \n    vec4 tex = texture(iChannel1, uv +vec2(px,0));\n    //float sum +=;\n     \n    float v = step(umbral,luma(tex));\n    //float v = step(umbral,promedio(tex));\n    //float v = step(umbral,rgb2hsb(tex.rgb).b);\n      \n    \n    vec3 col = vec3(v);\n    //para ver las diferentes formas de generar una imagen en b/n\n   //  col = vec3(promedio(tex));\n     //col = vec3(luma(tex));\n    //col = vec3(rgb2hsb(tex.rgb).b);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}