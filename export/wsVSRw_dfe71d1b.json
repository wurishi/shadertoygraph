{"ver":"0.1","info":{"id":"wsVSRw","date":"1573684688","viewed":142,"name":"noise to rotating lines","username":"thisisthais","description":"i liked this one","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","lines","rotation","tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nfloat lines(float thickness,float num){\n  return smoothstep(thickness, thickness + .1, abs(sin(num)));\n}\n\nvec2 rotate2D(vec2 _st,float _angle){\n  _st-=.5;\n  _st=mat2(cos(_angle),-sin(_angle),\n  sin(_angle),cos(_angle))*_st;\n  _st+=.5;\n  return _st;\n}\n\nfloat random(in vec2 st){\n  return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 st){\n  vec2 i=floor(st);\n  vec2 f=fract(st);\n  \n  // Four corners in 2D of a tile\n  float a=random(i);\n  float b=random(i+vec2(1.,0.));\n  float c=random(i+vec2(0.,1.));\n  float d=random(i+vec2(1.,1.));\n  \n  // Smooth Interpolation\n  \n  // Cubic Hermine Curve.  Same as SmoothStep()\n  vec2 u=f*f*(3.-2.*f);\n  // u = smoothstep(0.,1.,f);\n  \n  // Mix 4 coorners percentages\n  return mix(a,b,u.x)+\n  (c-a)*u.y*(1.-u.x)+\n  (d-b)*u.x*u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 st=fragCoord.xy/iResolution.yy;\n  vec2 norm_mouse=iMouse.xy/iResolution.xy;\n  vec3 color=vec3(0.,0.,0.);\n  \n  float timeSin=abs(sin(iTime/5.));\n  float timeCos=abs(cos(iTime/5.));\n  float swirlFreq=10.*(timeSin)+5.;\n  float swirlAmpl=10.*(timeCos)+5.;\n  float rotateAngle=mod(iTime/10.,2.*PI);\n  \n  st=rotate2D(st+noise(st*swirlFreq)/swirlAmpl,rotateAngle);\n  color=vec3(lines(.7,st.y*iResolution.y/5.));\n  \n  fragColor=vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}