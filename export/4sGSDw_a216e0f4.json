{"ver":"0.1","info":{"id":"4sGSDw","date":"1467902885","viewed":7969,"name":"Sinuous","username":"nimitz","description":"fluid-like motion imitation","likes":302,"published":1,"flags":32,"usePreview":1,"tags":["2d","smooth","neon","fakefluid","strings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sinuous by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/4sGSDw\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Code is in the other tabs:\n//Buf A = Particle velocity and position handling\n//Buf B = Rendering\n\n/*\n\tBy using the scalar value of a combined noise function as the\n\tangle to define a normalized vector field, we can produce a \n\tdivergence-free vector field as long as the angle varies smoothly\n\twhich can then be used to create fluid-like motion for particles.\n\n\tThe rest is scaling and offsetting the angles so that there \n\tis a directional bias to the produced vector field. Allowing\n\tfor directional motion without creating divergence (and therefore\n\tpockets of \"stuck\" particles)\n\n\tThe rest is just fancy coloring to create a visually pleasing effect.\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 p = fragCoord.xy/iResolution.xy;\n    vec4 c = vec4(texture(iChannel0, p).rgb, 1.0);\n    fragColor = vec4(mix(c, 1.-c, smoothstep(-.3,.3,sin(p.y+iTime*.0717+3.4))));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Sinuous by nimitz (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Velocity handling\n\nconst float initalSpeed = 10.;\n#define time iTime\n\n//From Dave (https://www.shadertoy.com/view/4djSRW)\nvec2 hash(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3.zxy, p3.yxz+19.19);\n    return fract(vec2(p3.x * p3.y, p3.z*p3.x))*2.0 - 1.0;\n}\n\n//From iq (https://www.shadertoy.com/view/XdXGW8)\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\nfloat fbm( in vec2 p, float tm )\n{\n    p *= 2.0;\n    p -= tm;\n\tfloat z=2.;\n\tfloat rz = 0.;\n    p += time*0.001 + 0.1;\n\tfor (float i= 1.;i < 7.;i++ )\n\t{\n\t\trz+= abs((noise(p)-0.5)*2.)/z;\n\t\tz = z*1.93;\n        p *= m2;\n\t\tp = p*2.;\n\t}\n\treturn rz;\n}\n\nvec3 update(in vec3 vel, vec4 p, in float id) { \n    \n    float n1a = fbm(p.xy, p.w);\n    float n1b = fbm(p.yx, p.w);\n    float nn = fbm(vec2(n1a,n1b),0.)*5.8 + .5;\n    \n    vec2 dir = vec2(cos(nn), sin(nn));\n    vel.xy = mix(vel.xy, dir*1.5, 0.005);\n    return vel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n    vec4 col= vec4(0);\n    vec2 w = 1./iResolution.xy;\n    if (fragCoord.y > 60.)discard;\n    \n    //vec2 mo = iMouse.xy/iResolution.xy;\n    \n    vec4 pos = texture(iChannel0, vec2(q.x,100.*w));\n    vec3 velo = texture(iChannel0, vec2(q.x,0.0)).xyz;\n    velo = update(velo, pos, pos.w);\n    col.w = pos.w;\n    \n    float mdf = mod(float(iFrame),1601.);\n    \n    if (fragCoord.y < 30.)\n    {\n    \tif (mdf < 2.5)\n        {\n            col = vec4(0.1,0,0,0);\n            col.w++;\n        }\n        else\n        \tcol.rgb = velo;\n    }\n    else\n    {\n        if (mdf < 2.5)\n        {\n            pos = vec4(-0.99,((texture(iChannel1, q*1.+3.15 + time))-.5).x,0,0);\n            col.w++;\n        }\n        pos.xy += velo.xy*0.002;\n        col.xyz = pos.xyz;\n    }\n    \n\t\n    //Init\n    if (iFrame < 15) \n    {\n        if (fragCoord.y < 30.)\n            col = vec4(0.1,0,0,0);\n        else {\n            col = vec4(-0.99,((texture(iChannel1, q*.5+3.15))-.5).x,0,0);;\n        }\n    }\n    \n\tfragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Sinuous by nimitz (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Rendering\n\n/*\n\tThis buffer renders each particles\n\tmultiple times per frame to allow particles\n\tto move more than one pixel per frame while still\n\tleaving a solid trail.\n*/\n\n#define time iTime\n\n//Anywhere under 800 \"should\" work fine (might slow down though)\nconst int numParticles = 500;\n\nfloat mag(vec2 p){return dot(p,p);}\n\nvec4 drawParticles(in vec2 p)\n{\n    vec4 rez = vec4(0);\n    vec2 w = 1./iResolution.xy;\n    \n    for (int i = 0; i < numParticles; i++)\n    {\n        vec2 pos = texture(iChannel0, vec2(i,50.0)*w).rg;\n        vec2 vel = texture(iChannel0, vec2(i,0.0)*w).rg;\n        float d = mag(p - pos);\n        d *= 500.;\n        d = .01/(pow(d,1.0)+.001);\n\n        //rez.rgb += d*abs(sin(vec3(2.,3.4,1.2)*(time*.01 + float(i)*.0017 + 2.5) + vec3(0.8,0.,1.2))*0.7+0.3)*0.04;\n        rez.rgb += d*abs(sin(vec3(2.,3.4,1.2)*(time*.07 + float(i)*.0017 + 2.5) + vec3(0.8,0.,1.2))*0.7+0.3)*0.04;\n        pos.xy += vel*0.002*0.2;\n    }\n    \n    return rez;\n}\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n\nvec3 roty(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(c*p.x + s*p.z, p.y, -s*p.x + c*p.z);\n}\n\nvec3 rotz(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy / iResolution.xy-.5;\n    mo = (mo==vec2(-.5))?mo=vec2(-0.15,0.):mo;\n\tmo.x *= iResolution.x/iResolution.y;\n    mo*=6.14;\n    \n    p *= 1.1;\n    \n    vec4 cola = drawParticles(p)*0.05;\n    \n    vec4 colb = 1.-texture(iChannel1, q);\n    vec4 col = cola + colb;\n    \n    vec4 base = 1.-vec4(1,0.98,0.9,0.9)*(1.-mag(p+vec2(-0.20,-.3))*0.1);\n    \n    float mdf = mod(float(iFrame),1601.);\n    \n    if (iFrame < 15 || mdf < 2.5) col = base;\n    fragColor = 1.-col;\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}