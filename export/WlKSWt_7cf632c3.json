{"ver":"0.1","info":{"id":"WlKSWt","date":"1583854321","viewed":128,"name":"2D Shaded Metaballs","username":"lewdoo","description":"Using fake normals and light source to generate shaded effect on 2D metaballs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat ratio = iResolution.x / iResolution.y;\n\tvec2 uv = vec2(ratio, 1.) * (2. * fragCoord.xy / iResolution.xy - 1.);\n\t\n    uv *= 3.;\n    uv.x -= 0.;\n\n    vec3 normals = vec3(0.);\n    vec3 baseCol = vec3(0.);\n    \n    for(float i = 0.; i < 7.; i++){\n        vec2 st = uv;\n    \tst.x += sin(iTime + i * 2.25 + sin(i * iTime) * 0.2) * 1.5;\n        st.y += cos(iTime + i * 1.25) * 1.5;\n\n        st *= 0.6;\n        \n        baseCol += vec3((st * 0.5 + 0.5) * vec2((1. - smoothstep(0., 1.,distance(st, vec2(0., .0))))), 0.);\n    }\n    //this smooths the normals between the balls\n \tnormals = normalize(baseCol);\n    \n    vec3 rlp = vec3(.3, .1, 1.1);\n    vec3 rld = vec3(normalize(rlp));\n    float rim = sqrt(max(dot(rld, baseCol), .0));\n    \n    //used to average the normals produced in the for functions\n    float shape = float(baseCol.r + baseCol.g + baseCol.b);\n\n    //used to make clear outlines around each orb\n    float outline = sign((shape) - 0.2) * 0.5 + 0.5;\n    outline = smoothstep(0., 0.1, shape - 0.2);\n\n    vec3 col = vec3(.505, .0, .8823);\n\n    vec3 lightPos =vec3(-2., 10.7, .1);\n    vec3 lightDir = normalize(lightPos);\n    \n    float diffuse = sqrt(pow(max(dot(lightDir, normals + 0.05), .0), 1.));\n    float hlight = pow(diffuse - 0.2, 5.5);\n\tfloat h = max(dot(lightDir, normals * 10. - 8.), 0.);\n    \n    //sqrt is used to smooth out the lighting\n    col = vec3(sqrt(diffuse + hlight * 2.8) * outline);\n\n    float v = .5;\n    \n    //col = col * v + vec3(.9647, .1294, .4313) * (1. - v) * outline;\n    \n    vec3 invertLight = vec3(2., -3., 0.2);\n    //the +0.2 is to balance out the smoothstep\n    float fakeBase = (1. - clamp((1. - (1. - rim)), 0., 1.)) * 1.6;\n    \n    fakeBase = max(dot(invertLight, baseCol - .95),0.);\n    \n    col -= vec3(pow(fakeBase, 2.)) * .3;\n    \n    col *= vec3(.7, .7, .1);\n    \n  \t//col = vec3(fakeBase);\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}