{"ver":"0.1","info":{"id":"WdlcWM","date":"1584914191","viewed":604,"name":"Gray Scott Reaction Diffusion 2","username":"Eybor","description":"An better implementation of Gray Scott Model of Reaction Diffusion. You can reinitialize the shader by pressing space, or draw on it with your mouse.","likes":1,"published":3,"flags":48,"usePreview":0,"tags":["2d","reactiondiffusion","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I used hash function from https://www.shadertoy.com/view/XdGfRR\n\n// An better implementation of Gray Scott Model of Reaction Diffusion.\n// You can reinitialize the shader by pressing space, or draw on it with your mouse.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float f = 8.*texture(iChannel0, uv).r;\n\n\tfloat iPos = floor(f);\n    float fPos = fract(f);\n    \n    vec3 c1 = hash31(iPos-1.);\n    vec3 c2 = hash31(iPos);\n\n    vec3 color = mix(c1, c2, fPos);\n    \n\tfragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Hash functions from https://www.shadertoy.com/view/XdGfRR\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\n//vec4 params = vec4(.04,.06,.2,.1);\n//vec4 params = vec4(.02,.05,.2,.1);\nvec4 params = vec4(.02,.05,.1,.05);\n\nvec3 hash31(float p)\n{\n\n\tuvec3 n = uint(int(p)) * UI3;\n\tn = (n.x ^ n.y ^ n.z) * UI3;\n\treturn vec3(n) * UIF;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture(iChannel0, vec2(0.)).w == 0. || texture(iChannel2,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x/4. && fragCoord.x < 3.*iResolution.x/4. &&\n           fragCoord.y > iResolution.y/4. && fragCoord.y < 3.*iResolution.y/4.)\n        {\n            fragColor.xyz = vec3(.5);\n        }\n        else\n        { \n            fragColor.xyz = vec3(1.);\n        }\n        fragColor.w = 1.; \n    }\n\telse\n    {       \n        vec3 laplacian =    texture(iChannel0, (fragCoord-vec2(0., 1.))/iResolution.xy).rgb +\n                            texture(iChannel0, (fragCoord-vec2(1., 0.))/iResolution.xy).rgb -\n                         4.*texture(iChannel0, fragCoord/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel0, (fragCoord+vec2(1., 0.))/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel0, (fragCoord+vec2(0., 1.))/iResolution.xy).rgb;\n                \n        vec3 vu = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n        vec3 vv = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n        \n        vec3 newColor = vu + params.z*laplacian+params.x*(1.-vu)-vu*vv*vv;\n        \n        if(iMouse.z > 0.)\n        {\n            vec2 mousePos = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n            vec2 pos = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n            vec2 v = pos-mousePos;\n\n            float d = sqrt(dot(v, v));\n            \n            newColor = mix(newColor, vec3(.5), step(d, .05));\n        }\n        \n        fragColor = vec4(newColor, 1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture(iChannel1, vec2(0.)).w == 0. || texture(iChannel2,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x/4. && fragCoord.x < 3.*iResolution.x/4. &&\n           fragCoord.y > iResolution.y/4. && fragCoord.y < 3.*iResolution.y/4.)\n        {\n            fragColor.xyz = vec3(.25);\n        }\n        else\n        {\n            fragColor.xyz = vec3(0.);\n        }\n        fragColor.w = 1.;\n    }\n    else\n    {\n        vec3 laplacian =    texture(iChannel1, (fragCoord-vec2(0., 1.))/iResolution.xy).rgb +\n                            texture(iChannel1, (fragCoord-vec2(1., 0.))/iResolution.xy).rgb -\n                         4.*texture(iChannel1, fragCoord/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel1, (fragCoord+vec2(1., 0.))/iResolution.xy).rgb +\n            \t\t\t \ttexture(iChannel1, (fragCoord+vec2(0., 1.))/iResolution.xy).rgb;\n\n        vec3 vu = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n        vec3 vv = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n        \n        vec3 newColor = vv + params.w*laplacian-(params.x+params.y)*vv+vu*vv*vv;\n        \n        if(iMouse.z > 0.)\n        {\n            vec2 mousePos = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n            vec2 pos = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n            vec2 v = pos-mousePos;\n\n            float d = sqrt(dot(v, v));\n            \n            newColor = mix(newColor, vec3(.25), step(d, .05));\n        }\n        \n        fragColor = vec4(newColor, 1.);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}