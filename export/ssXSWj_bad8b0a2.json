{"ver":"0.1","info":{"id":"ssXSWj","date":"1619216246","viewed":138,"name":"Recursion Tunneling","username":"Timster","description":"Tunneling through space","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float layers = 32.0;\nconst float gap = 0.25;\nconst float speed = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = uv*2.0 - 1.0;\n    \n    vec4 final;\n    \n    for (float i = 0.0; i < layers; i += gap) {\n        vec2 s = ndc*(i-fract(iTime*speed)*gap);\n        vec2 t = s*0.5 + 0.5;\n        \n        if (fract(t) == t) {\n            float alpha = (1.0 - s.x*s.x*s.x*s.x)*(1.0 - s.y*s.y*s.y*s.y);\n            \n            final.rgb = alpha*texture(iChannel0, t).rgb + (1.0-alpha)*final.rgb;\n            final.a = alpha + (1.0 - final.a);\n        }\n        \n    }\n    \n    fragColor = vec4(final.rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}