{"ver":"0.1","info":{"id":"Xldfz2","date":"1540342493","viewed":267,"name":"3D Raycaster","username":"scratch13764","description":"This is my first ray caster ever, I made it without using any tutorials which is why it's so mediocre.\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["ray","pixel","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Old TV effect by @mackycheese21, modified to remove b&w filter and reduce distortion\n//   https://www.shadertoy.com/view/XldcDf\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord.xy/iChannelResolution[0].xy;\n    vec4 sum=vec4(0.0);\n    float num=0.0;\n    for(int i=0;i<3;i++){\n        vec2 offset= texture(iChannel1,mod(vec2(uv.x*124.5523+5230.354323*iTime+2523.254*float(i),uv.y*.5364+624.667*iTime+2523.789*float(i)),1.0)).xy;\n        offset-=0.5;\n        offset*=1.9;\n        sum+=texture(iChannel0,uv+(offset/3.));\n        num++;\n    }\n    fragColor=sum/num;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nMain 3D rendering buffer\nRaycasts spheres with an analytical texture for horizontal stripes and a simple hard shadow.\n*/\nfloat a (vec3 ray)\n{\n    return length(vec3(mod(ray.x, 2.0)-1.0,mod(ray.y, 2.0)-1.0,mod(ray.z + iTime, 2.0)-1.0)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.y /= iResolution.x/iResolution.y; // I know it's unorthodox to normalize this way, but it makes FOV easier\n    \n    uv=round(uv*164.0)/164.0; // @mackycheese21\n    \n    ///////////////////////\n    // Graphics Settings //\n    ///////////////////////\n    int lim = 2000;         // Maximum steps allowed\n    float stp = 0.01;       // Ray step\n    float FOV = 1.0;        // 1.0 = 90 Deg.\n    \n    \n    ////////////////////\n    // Initialize Ray //\n    ////////////////////\n    float playerDir = iTime / 4.0;\n    float rayYaw = atan(uv.x/1.5)/FOV + playerDir;\n    float rayPitch = atan(uv.y/1.5)+radians(0.0);\n    vec3 rayv = vec3(sin(rayYaw),cos(rayYaw),sin(rayPitch))*vec3(stp); // Ray step in terms of XYZ\n    vec3 ray = vec3(sin((playerDir+radians(90.0)))*uv.x*0.5, (cos(playerDir+radians(90.0)))*uv.x*0.5, uv.y);                                    // XYZ of ray\n    //vec3 ray = vec3(0.0,0.0,0.0);\n    vec3 col;\n    \n    ////////////////////\n    // Ray Collisions //\n    ////////////////////\n    \n    for (int i = 0; i < lim; i++)\n    {\n        ray += rayv;\n        if (a(ray) < 0.25)\n        {\n            if (mod(ray.z + iTime,0.15) <= 0.075) col = vec3 (.8,.8,.8);\n            else col = texture(iChannel0,round(vec3(ray.xy,ray.z+iTime))/32.+.5).rgb;\n            col *= vec3(1.0 - float(i)/1000.0);\n            \n            if (a(vec3(ray.x-0.01,ray.y,ray.z)) < 0.25)\n            {\n                col *= 0.5; //Really simple shadow effect, which ends up creating a cool dither effect when pixelated\n            \n                break;\n            }\n            break;\n        }\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Motion blur / trails\n\n#define Blur 2. //Change this to a higher value to increase intensity of motion blur/trails\n//Set Blur to 0 to get rid of all blur effects\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 a = texture(iChannel0,uv);\n    \n    vec4 b = texture(iChannel1,uv);\n    fragColor = (Blur*b+a)/(1.+Blur);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Outputs a 50/50 mixture of buffers A and B, rounded to the nearest 16^3 colors\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 a = texture(iChannel0,uv);\n    vec4 b = texture(iChannel1,uv);\n    fragColor = round((a+b)*16.)/16.;\n}","name":"Buffer C","description":"","type":"buffer"}]}