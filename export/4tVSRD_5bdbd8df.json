{"ver":"0.1","info":{"id":"4tVSRD","date":"1483323718","viewed":440,"name":"Holographic Memories","username":"stb","description":"Slight edit of https://www.shadertoy.com/view/4tKSRD#\nSee Buf A for options.\nUse the mouse!","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["3d","noise","ray","volume","clouds","volumetric","jitter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 FO, in vec2 FI ) {\n\tFO = texture(iChannel0, FI / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int MaxSteps\t= 128;\t// max number of ray steps (affects draw dist & fog)\nconst float Step\t= 0.2;\t// amount to advance ray (affects draw dist & fog)\nconst float Bailout\t= 0.1;\t// transparency bailout: higher==faster but less precise\nconst float CMix\t= 0.63;\t// amount to mix color from previous frames (0.0-1.0)(higher==nicer but w/ more motion blur)\nconst float Speed\t= 1.5;\t// camera z-speed\nconst float Fuzzy\t= 0.13;\t// cloud fuzziness (0.0-0.5)\n\n// uncomment for stereo rendering (cross eyed)\n//#define STEREO\n\n#define iGT iTime\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(443.8975, 397.2973, 491.1871) // uv range\nfloat hash13(vec3 p3) {\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * MOD3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n// spiral cloud tunnel\nfloat map(in vec3 p) {\n    p *= .1;\n    p.z *= 12.;\n    float f =\n        mix(\n            texture(iChannel0, p.xy*.4-hash21(floor(p.z))).r,\n            texture(iChannel0, p.xy*.4-hash21(floor(p.z)+1.)).r,\n            smoothstep(0., 1., fract(p.z))\n\t\t);\n    f -= .5 - abs(p.y);\n    return clamp(f, 0., 1.);\n}\n\nvoid mainImage(out vec4 FO, in vec2 FI) {\n\tvec2 res = iResolution.xy;\n   \tvec2 uv = FI/res, p=(FI-res/2.)/res.y;\n\t\n    vec3 ray=vec3(0.), rTmp, rDir=vec3(p, 1.), col=vec3(0.), hCol;\n\tfloat tr=1., v;\n    \n    #ifdef STEREO\n        ray.x -= .1 * sign(p.x);\n        rDir.x -= .4 * sign(p.x);\n    #endif\n    \n    ray.xy += vec2(4., 1.) * vec2(sin(.2*iGT), cos(.2*iGT));\n    \n    // mousing around\n    if(iMouse.z>0.)\n    \tray.xy -= 8. * (iMouse.xy/res-.5);\n    \n    // z-movement\n    ray.z += Speed * iGT;\n    \n    // advance ray & accumate color\n    for(int i=0; i<MaxSteps; i++) {\n        \n        // bail out if sample contribution is low (based on transparency)\n        if(tr<Bailout)\n            break;\n        \n        // temporary ray position (jittered along rayDir)\n        rTmp = ray + 2. * Step * rDir * (.5-hash13(ray+mod(.1*iGT, 100.)));\n        \n        // volume sample\n        v = smoothstep(.5-Fuzzy, .5+Fuzzy, map(rTmp));\n        //v = map(rayTmp);\n        \n        // add a shaded, colored sample (proportionate to transparency)\n        hCol = mix(1.3*vec3(1., .75, .5), vec3(.2, .5, 1.), min(1., .7*length(uv-.5)));\n        col += 1.2 * tr * v * hCol * (1.-1.2*map(rTmp-vec3(.1, -.2, .1)));\n        \n        // add fog (proportionate to transparency & MaxSteps)\n        col += 1.4 * tr * vec3(.7, .8, 1.) / float(MaxSteps);\n        \n        // adjust bailout/mixing variable\n        tr -= v;\n        \n        // advance ray position\n        ray += Step * rDir;\n    }\n    \n    // mix this frame's color with last frame's color\n    col = mix(col, texture(iChannel1, uv).rgb, CMix);\n    \n    \n\tFO = vec4(col, 1.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}