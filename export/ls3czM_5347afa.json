{"ver":"0.1","info":{"id":"ls3czM","date":"1518173679","viewed":1784,"name":"Lens flare","username":"Zgragselus","description":"Lens flare example with atmospheric scattering","likes":29,"published":1,"flags":32,"usePreview":0,"tags":["lensflare","atmosphericscattering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int uGhosts = 5; // number of ghost samples\nfloat uGhostDispersal = 0.6; // dispersion factor\n\nvec4 lensFlare(in vec2 coord)\n{\n      vec2 texcoord = -coord + vec2(1.0);\n      vec2 texelSize = vec2(1. / iResolution.x, 1. / iResolution.y);\n \n   // ghost vector to image centre:\n      vec2 ghostVec = (vec2(0.5) - texcoord) * uGhostDispersal;\n   \n   // sample ghosts:  \n      vec4 result = vec4(0.0);\n      for (int i = 0; i < uGhosts; ++i) { \n         vec2 offset = fract(texcoord + ghostVec * float(i));\n  \n         float weight = length(vec2(0.5) - offset) / length(vec2(0.5));\n         weight = pow(1.0 - weight, 10.0);\n          \n         result += texture(iChannel1, offset) * weight;\n      }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //fragColor = texture(iChannel0, uv);\n    fragColor = lensFlare(uv) * 4.0 + texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Atmospheric scattering credits go to robobo1221 - https://www.shadertoy.com/view/4tVSRt\n\nconst float coeiff = 0.25;\nconst vec3 totalSkyLight = vec3(0.3, 0.5, 1.0);\n\nvec3 mie(float dist, vec3 sunL){\n    return max(exp(-pow(dist, 0.25)) * sunL - 0.4, 0.0);\n}\n\nvec3 getSky(vec2 uv){\n\t\n\tvec2 sunPos = vec2(0.7, cos(-iTime * 0.3 + 3.14 * 0.564));\n    \n    float sunDistance = distance(uv, clamp(sunPos, -1.0, 1.0));\n\t\n\tfloat scatterMult = clamp(sunDistance, 0.0, 1.0);\n\tfloat sun = clamp(1.0 - smoothstep(0.01, 0.011, scatterMult), 0.0, 1.0);\n\t\n\tfloat dist = uv.y;\n\tdist = (coeiff * mix(scatterMult, 1.0, dist)) / dist;\n    \n    vec3 mieScatter = mie(sunDistance, vec3(1.0));\n\t\n\tvec3 color = dist * totalSkyLight;\n    \n    color = max(color, 0.0);\n    \n\tcolor = max(mix(pow(color, 1.0 - color),\n\tcolor / (2.0 * color + 0.5 - color),\n\tclamp(sunPos.y * 2.0, 0.0, 1.0)),0.0)\n\t+ sun + mieScatter;\n\t\n\tcolor *=  (pow(1.0 - scatterMult, 10.0) * 10.0) + 1.0;\n\t\n\tfloat underscatter = distance(sunPos.y * 0.5 + 0.5, 1.0);\n\t\n\tcolor = mix(color, vec3(0.0), clamp(underscatter, 0.0, 1.0));\n\t\n\treturn color;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec3 color = getSky(fragCoord.xy / iResolution.x);\n\t\n\tcolor = color / (2.0 * color + 0.5 - color);\n\t\n\tfragColor = vec4(color, 1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 bias = vec4(-0.7);\nvec4 scale = vec4(4.);\nint samples = 5;\n\nvec4 scaleAndBias(in vec2 coord)\n{\n\treturn max(vec4(0.0), texture(iChannel0, coord) + bias) * scale;\n}\n\n// Simulate downsample and blur (inefficient)\nvec4 blur(in vec2 coord, in int samples)\n{\n    vec4 result = vec4(0.);\n    vec2 pixelSize = vec2(1. / iResolution.x, 1. / iResolution.y) * 2.;\n    for (int i = -samples; i <= samples; i++)\n    {\n        for (int j = -samples; j <= samples; j++)\n        {\n            result += scaleAndBias(coord + vec2(float(i) * pixelSize.x, float(j) * pixelSize.y));\n        }\n    }\n    result /= float(samples * 2 + 1);\n    result /= float(samples * 2 + 1);\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = blur(uv, samples);\n}","name":"Buf B","description":"","type":"buffer"}]}