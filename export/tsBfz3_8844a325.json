{"ver":"0.1","info":{"id":"tsBfz3","date":"1590502945","viewed":61,"name":"simple olas","username":"jorge2017a1","description":"simple olas","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simpleolas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\nfloat tiempoA, tiempoB=0.5;\n\n\n\nvec3 ambientColor = vec3(0.05, 0.15, 0.2);\nvec3 diffuseColor = vec3(0.2, 0.6, 0.8);\nvec3 specularColor = vec3(1.0, 1.0, 1.0);\nvec3 lightDir = normalize(vec3(0.0, 4.0, 5.0));\nvec3 spherePos = vec3(0.0, 0.5, 0.0);\n//-----------------------------------\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n\nvec3 opUvec3(vec3 d1, vec3 d2 ) {\n  vec3 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, -sa, +.0,\n\t\t+sa, +ca, +.0,\n\t\t+.0, +.0, +1.0);\n}\n\n\n\n///-----------------------------------------\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\nvec3 LightShading(vec3 N,vec3 L,vec3 V,vec3 color)\n{\n    vec3 diffuse = max(0.,dot(N,-L))*color;\n    vec3 specular = pow(max(0.,dot(N,normalize(-L-V))),100.)*vec3(1.,1.,1.); \n    return diffuse + specular;\n}\n\n    \n    \n//-------------------------------------------------\n\n\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 noise2(vec2 x)\n{\n    vec2 add = vec2(1.0, 0.0);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    \n}\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n//-----------------------------------------------------\nfloat mapCerrov3(vec3 pp)\n{\n    vec3 p= pp;\n    \n    \n    float h = dot(sin(p - cos(p.yzx*1.3)), vec3(.13));\n    h += dot(sin(p*2. - cos(p.yzx*1.3*2.)), vec3(.1/2.));\n    return p.y + 1. + h;     \n}\n\n//-----------------------------------------------------\n\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp, p2,p3;\n    pp=p; p2=p;p3=p;\n    \n \n    float planeDist1 = p.y+1.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n   \n    \n    res = vec2(9999, 0);\n    \n    \n    //res =opU(res, vec2(planeDist1,3)); //inf\n    //res =opU(res, vec2(planeDist2,32)); //sup\n    //res =opU(res, vec2(planeDist3,32));  //izq\n    //res =opU(res, vec2(planeDist4,32));  //der\n    //res =opU(res, vec2(planeDist5,33));  //atras\n    \n    \n\n    \n    \n    float tmpx=p2.x;\n    float tmpy;\n    tmpy =p2.y;\n    \n     tmpy+=1.0*cos(tmpx*5.50+iTime)-2.0;   //repetir obj z\n     p3.x= tmpy;\n     p3.y+=sin(p3.y*1.25+p.x*0.06856+iTime)-0.5-3.0;  \n     \n    \n    p3.y+=mapCerrov3(p.xyz);\n\n    float sdb3= sdBox( p3- vec3(0.0,0.0,0.0), vec3(30.0,1.0,40.0) ); \n    res =opU(res, vec2(sdb3,17)); \n    \n    res =opU(res, vec2(0.9,0.0));\n\n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n///----------------------------------------------------------\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat dO=0.2;\n    //Determines size of shadow\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        \n        float dS = GetDist(p);\n        \n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) \n        {\n            //mObj.dist=dO; \t\n            mObj.p=p; \t\n            \n            gres2 = vec2(dO,dS); \n            break;\n    \t}    \n        \n    }\n    \n    return dO;\n}\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n    \n\n#define offset1 4.7\n#define offset2 4.6\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) \n{\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n\n// phong shading\nvec3 p_shadingv2( vec3 v, vec3 n, vec3 eye, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t// ...add lights here...\n\t\n\t//float shininess = 16.0;\n    float shininess = 30.0;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t// light 0\n\t{\n\t\n\t\tvec3 vl = normalize( plight_pos1 - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n        \n        final += plight_color1 * ( diffuse + specular ); \n\t}\n\t\n\t\n\n    return (final);\n}\n\nvec3 srgb(float r, float g, float b) \n{\n    return vec3(r*r,g*g,b*b);\n}\n\n\n\n//-----------------------------\n//https://www.shadertoy.com/view/lsd3zN\n// Taken from D3DX_DXGIFormatConvert.inl\nfloat D3DX_FLOAT_to_SRGB ( float val )\n{\n\tif( val < 0.0031308 )\n\t\tval *= 12.92;\n\telse\n\t\tval = 1.055 * pow(val,1.0/2.4) - 0.055;\n\treturn val;\n}\n\n// Taken from D3DX_DXGIFormatConvert.inl\n// Technically this is not bit-exact - that requires a look-up table,\n// but it's accurate enough for our purposes here.\nfloat D3DX_SRGB_to_FLOAT(float val)\n{\n    if( val < 0.04045 )\n        val /= 12.92;\n    else\n        val = pow((val + 0.055)/1.055,2.4);\n    return val;\n}\n\n\nvec3 cam(vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cu,cf));\n    return normalize(uv.x*cu+uv.y*cr+2.*cf);\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    itime=iTime*3.0;\n   \n    \n \n light_pos1   = vec3( 0.0, 10.0, 0.0 ); \n light_color1 = vec3( 1.0 );\n\n light_pos2   = vec3( 5.0, 15.0, 0.0 );\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n //light_color2 = vec3( 0.65, 0.5, 1.0 );\n\n\t\n    float ti=iTime*2.0; \n    vec3 ro = vec3(0.0,5.0,-20.0);\n\n\t//ro = get_mouse(ro);\n    vec3 rd = normalize( vec3(uv,1.0));\n    \n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n    \n    float dif=0.5;\n  \n    \n    mObj.dist =d;\n    vec3 colobj;\n    \n    vec3 nor= GetNormal( p);\n    \n    \n    \n    \n    colobj=getSphereColor(int( Obj.tipo));\n    \n    float dif1=1.0;\n   \n    \n    vec3 col2;\n    \n   \n   col2= p_shadingv2( p, nor, ro, light_pos1, light_color1 )*colobj;\n   col2+= p_shadingv2( p, nor, ro, light_pos2, light_color2 )*colobj;\n    \n    \n    \n    //col= (col2*dif*dif1+col);\n    col= (col2*dif*dif1+col);\n    \n    col.x=D3DX_SRGB_to_FLOAT(col.x);\n    col.y=D3DX_SRGB_to_FLOAT(col.y);\n    col.z=D3DX_SRGB_to_FLOAT(col.z);\n    \n    col = pow(col, vec3(1.0/2.8));  \n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n};\n\n\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n\n//-----------------------\nfloat sdcirclevec2(vec2 pos, vec2 center, float radius)\n{\n    float d = length(pos - center) - radius;\n    return d;\n}\n\n\n\n//-------------------\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\n\n///----------------------\nfloat floorTex(vec3 rp) {\n    rp.x += itime * -2.0;\n    vec2 m = mod(rp.xz, 4.0) - 2.0;\n    if (m.x * m.y > 0.0) {\n        return 0.8 + noise(rp * 4.0) * 0.16;\n    }\n    return 0.2 + noise((rp + 0.3) * 3.0) * 0.1;\n}\n\n\n\n\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tif(i==0 )\n    { return vec3(0.0);    }\n    \n    if(i== 1 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 2 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 3 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 4 )\n    { return vec3(0, 1, 1);} \n    if(i== 5 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    if(i== 6 )\n    { return  vec3(0.5, 0.8, 0.9);} \n    if(i== 7 )\n     {return vec3(1.0, 1.0, 1.0);} \n    if(i== 8 )\n    { return vec3(0.425, 0.56, 0.9); } \n    if(i== 9 )\n    { return vec3(0.5, 0.6, 0.6);} \n    if(i== 10 )\n    { return vec3(0.0, 1.0, 0.0);} \n    if(i== 11 )\n    { return vec3(0.25, 0.25, 0.25); } \n    \n    \n       if(i== 12 )\n    {\n        vec3 tmp;\n        tmp =glpRoRd;\n        \n        //tmp=rotate_x(tmp,90.0);\n        //tmp=rotate_x(tmp,90.0);\n        \n        return  vec3(0.8, 1.0, 0.4) * floorTex(tmp); \n        } \n    \n    \n     if(i== 13 )\n    {\n        float d = 0.0;\n\t\t\t// checkerboard function that returns 0 or 1\n\t\t\td = mod(floor(glpRoRd.x)+floor(glpRoRd.z),2.0);\n\t\t\t// vary between red (0) and yellow (1)\n\t\treturn vec3(0.8 + 0.1*d, 0.3 + 0.55*d, 0.15 - 0.1*d)*0.8;\n    } \n    \n    \n     if(i== 14 )\n    {\n        \t// checkerboard hack\n\t\t\tvec2 cb = floor(glpRoRd.xz);\n\t\t\tfloat cb2 = mod(cb.x + cb.y, 2.0);\n        \treturn vec3(0.4 + 0.1*cb2, 0.3 + 0.85*cb2, 0.35 - 0.3*cb2)*0.8;\n     } \n    \n    \n    \n     if(i== 15 )\n    { return vec3(1.0,0.0,1.);} \n     if(i== 16 )\n     { return vec3(1.0,1.0,0.0);} \n    if(i== 17 )\n     { return vec3(0.5,0.5,1.0);} \n    \n    \n    \n     if(i== 20 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n\n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n    \t\t\n         vec3 surfaceColor;\n        \tsurfaceColor = mix(vec3(0.1,0.8,0.5),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\n     } \n    \n    \n    \n    if(i== 21 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p;\n    \n            marbleP.x += sin(p.y*20.0)*0.12;\n            marbleP.z += sin(p.y*22.0)*0.1;\n            marbleP.y += sin(p.x*25.0)*0.13;\n            marbleP.y += sin(p.z*23.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 22.0;\n            marbleP.z *= 23.0;\n            marbleP.y *= 11.0;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n    }    \n\t\n    \n    if(i== 22)\n    {\n       return  vec3(0.5, 0.2, 1.0);  \n    }  \n    \n     if(i== 23)\n    { return  vec3(0.425, 0.5, 0.6);} \n    \n    if(i== 24)\n    {\n      float size = (-mObj.uv.y+.1)/2.5;\n     vec3 color = vec3(0.,0.,0.);\n     color += vec3(mod(floor(mObj.uv.x/size+sin(itime)) + floor(mObj.uv.y*20./size+itime),2.)-.8-mObj.uv.y);\n\n     // Lightsource falloff on floor\n     color *= vec3(smoothstep(0.,1.,1.-length(vec2(.2-mObj.uv.x/6.,.6+mObj.uv.y/1.5))));\n        return color;\n\t}    \n    \n    \n    if(i== 25)\n    {\n      float size = (-mObj.p.y+.1)/2.5;\n     vec3 color = vec3(0.,0.,0.);\n     color += vec3(mod(floor(mObj.p.x/size) + floor(mObj.p.y*20./size),2.)-.8-mObj.p.y);\n\n     // Lightsource falloff on floor\n     color *= vec3(smoothstep(0.,1.,1.-length(vec2(.2-mObj.p.x/6.,.6+mObj.p.y/1.5))));\n        return color;\n\t} \n    \n    if(i== 26)\n    {\n        // checkerboard hack\n\t\t\tvec2 cb = floor(mObj.p.xz);\n\t\t\tfloat cb2 = mod(cb.x*1.2 + cb.y, 2.);\n        \treturn vec3(1.4 + 0.1*cb2, 0.3 + 0.85*cb2, 0.35 - 0.3*cb2)*0.8;\n            \n    }   \n    \n    if(i== 27)\n    {\n      vec3 outColor = vec3(0.0);\n      float sinus1 = sin(mObj.uv.x*5.1 +itime*0.5) * 0.1 - 0.2;\n      float land1 = step(sinus1, mObj.uv.y);\n      vec3 landColor1 = vec3(0.2, 0.4, 0.3);\n      outColor = mix(outColor, landColor1, 1.0 - land1);\n        return outColor;\n    }\n    \n    \n    if(i== 28)\n    { return vec3(0.9,0.9,0.2);  }\n    \n    if(i== 29)\n    { return vec3(1.0,1.0,1.0); }\n    \n     \n    if (i== 30)\n     {  \n        //checkboard\n        //vec3 col = vec3(0.75)*(0.3 + mod(floor(mObj.p.x) + floor(mObj.p.z), 2.0));\n        vec3 col = vec3(1.0)*(0.23 + mod(floor(mObj.p.x*0.25) + floor(mObj.p.z*0.25), 2.0));\n         return col;\n     }\n    \n    \n    if(i== 31 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 2.8;\n            marbleP.y *= 1.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 22.0;\n            marbleP.z *= 23.0;\n            marbleP.y *= 11.0;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    \n    if(i== 32 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    \n    if(i== 33 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.012;\n            marbleP.z += sin(p.y*0.3)*0.01;\n            marbleP.y += sin(p.x*5.0)*0.013;\n            marbleP.y += sin(p.z*3.0)*0.014;\n\n            marbleP.y += sin(p.x*1.3)*0.05;\n            marbleP.y += sin(p.z*1.5)*0.06;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.015;\n            marbleP.z *= 0.08;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n        \n            marbleP = p;\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.1,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    \n    \n    if(i== 34 )\n    {\n     \n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*0.3)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    \n    if(i== 35 )\n    {\n     \n        \n        float freq=0.125;\n        vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*freq)*0.12;\n            marbleP.z += sin(p.y*freq)*0.1;\n            marbleP.y += sin(p.x*freq)*0.13;\n            marbleP.y += sin(p.z*freq)*0.14;\n\n            marbleP.y += sin(p.x*freq)*0.5;\n            marbleP.y += sin(p.z*freq)*0.6;\n\n            marbleP.x += sin(p.y*freq)*0.011;\n            marbleP.z += sin(p.y*freq)*0.013;\n            marbleP.y += sin(p.x*freq)*0.012;\n            marbleP.y += sin(p.z*freq)*0.015;\n\n            marbleP.x *= freq;\n            marbleP.z *= freq;\n            marbleP.y *= freq;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,1.0,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n\n    \n    if(i== 36 )\n    {\n    \t///oro color oro\n    \t//float factor = shadow*length(sin(rf*3.)*0.5+0.5)/sqrt(2.);\n        float factor = 0.985*length(sin(mObj.rf*4.)*0.5+0.5)/sqrt(2.);\n        \n  \t\tvec3 col= mix(vec3(0.3,0.25,0.1), vec3(0.8,0.6,0.2), factor) + pow(factor*0.8, 6.);\n        return col;\n        \n    \n   }\n    \n    \n    \n    if(i== 37 )\n    {\n     \n           //vec3 p = glpRoRd;\n           vec3 p = mObj.p;\n        \n           //vec3 marbleP = p+glpRoRd;\n           vec3 marbleP = p*2.0;\n\n            marbleP.x += sin(p.y*20.0)*0.012;\n            marbleP.z += sin(p.y*22.0)*0.01;\n            marbleP.y += sin(p.x*25.0)*0.013;\n            marbleP.y += sin(p.z*23.0)*0.014;\n\n            marbleP.y += sin(p.x*1.3)*0.05;\n            marbleP.y += sin(p.z*1.5)*0.06;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 20.0;\n            marbleP.z *= 20.0;\n            marbleP.y *= 10.0;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n    \t\t\n         vec3 surfaceColor;\n        \tsurfaceColor = mix(vec3(0.1,0.8,0.5),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\n     } \n  \n    \n    \n    \n    \n    if(i== 38 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n        \n  \tfor (int s = 0; s < 8; s++) {\n    vec2 r;\n    r = vec2(cos(mObj.uv.y * i0 - i4 + itime / i1), sin(mObj.uv.x * i0 - i4 + itime / i1)) / i2;\n    r += vec2(-r.y, r.x) * 0.3;\n    mObj.uv.xy += r;\n\n    i0 *= 1.93;\n    i1 *= 1.15;\n    i2 *= 1.7;\n    i4 += 0.05 + 0.1 * itime * i1;\n  \t}\n        \n    \tfloat r = sin(mObj.uv.x - itime+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.uv.y + itime*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.uv.x + mObj.uv.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}      \n    \n    \n    \n    \n    if(i== 39 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n       \n        \n  \t   for (int s = 0; s < 8; s++)  \n       {\n       vec2 r;\n        r = vec2(cos(mObj.uv.y * i0 - i4 + 1.0 / i1), sin(mObj.uv.x * i0 - i4 + 1.0 / i1)) / i2;\n        r += vec2(-r.y, r.x) * 0.3;\n        mObj.uv.xy += r;\n\n        i0 *= 1.93;\n        i1 *= 1.15;\n        i2 *= 1.7;\n        i4 += 0.05 + 0.1 * 1.0 * i1;\n  \t  }\n        \n    \tfloat r = sin(mObj.uv.x - 1.0+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.uv.y + 1.0*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.uv.x + mObj.uv.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}      \n    \n    \n    \n    if(i== 40 )\n    {\n        \n        float i0 = 1.0;\n  \t\tfloat i1 = 1.0;\n  \t\tfloat i2 = 1.0;\n  \t\tfloat i4 = 0.0;\n       \n        \n  \t   for (int s = 0; s < 8; s++)  \n       {\n       vec2 r;\n        r = vec2(cos(mObj.p.y * i0 - i4 + 1.0 / i1), sin(mObj.p.x * i0 - i4 + 1.0 / i1)) / i2;\n        r += vec2(-r.y, r.x) * 0.3;\n        mObj.p.xy += r;\n\n        i0 *= 1.93;\n        i1 *= 1.15;\n        i2 *= 1.7;\n        i4 += 0.05 + 0.1 * 1.0 * i1;\n  \t  }\n        \n    \tfloat r = sin(mObj.p.x - 1.0+2.0) * 0.25 + 0.5;\n  \t\tfloat b = sin(mObj.p.y + 1.0*2.0+2.0) * 0.5 + 0.5;\n  \t\tfloat g = sin((mObj.p.x + mObj.p.y + sin(1.0 * 0.5)) * 0.5) * 0.5 + 0.5;\n        vec3 col= vec3(r,g,b);\n        return col;\n\t}  \n    \n    if(i==41)\n    {\n\t\tfloat  sdc1= sdcirclevec2(vec2(mObj.p.x, mObj.p.y), vec2(mObj.p.x/4.0,mObj.p.y/4.0), 1.0);\n        \n        return  mix(vec3(0.5), vec3(0.3,0.63,0.8), sdc1);\n        \n    }   \n        \n}\n\n///--------------------------------------------\n","name":"Common","description":"","type":"common"}]}