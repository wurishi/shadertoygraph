{"ver":"0.1","info":{"id":"MffGWH","date":"1703004066","viewed":31,"name":"Texture Painter","username":"TheJinxedArtist","description":"A really simple method for giving an image a \"painted\" look, It takes quite a while to actually make anything, but I think it's kinda cool.\nOnly uses circles (for now).","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["painterly","paint","brush"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MIN_BRUSH_SIZE 25.0\n#define MAX_BRUSH_SIZE 30.0\n\n//Random Value.\nfloat hash(float t) { return fract(sin(t * 1000.0) * 1000.0); }\n\n//Procedural Brush Texture (WILL CHANGE).\nfloat BrushTexture(vec2 uv, float s)\n{\n    uv *= s;\n    return step(0.5, length(uv - 0.5));\n}\n\nfloat Stroke(vec2 uv, out vec2 p)\n{\n    // Stroke Position.\n    p.x = mix(-1.0, 1.0, hash(iTime - 100.0));\n    p.y = mix(-0.5, 0.5, hash(iTime + 100.0));\n    \n    //Stroke Scale.\n    float s = mix(MIN_BRUSH_SIZE, MAX_BRUSH_SIZE, hash(iTime - 200.0));\n    \n    //Stroke Rotation (-PI to PI).\n    //Will use this when I manage to get a different brush texture.\n    //float r = mix(-3.14, 3.14, hash(iTime + 200.0));\n    \n    //Return The Brush.\n    return BrushTexture(uv - p, s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    \n    //Create Brush Texture And Point.\n    vec2 p = vec2(0);\n    float brush = Stroke(uv, p);\n    \n    //Sample Colour At Stroke Position.\n    vec3 c = texture(iChannel0, p - 0.5).rgb;\n    \n    //Mix Between Last Rendered Frame And What The Next Colour Should Be Based On The Brush.\n    vec3 final = mix(texture(iChannel1, uv2).rgb, c, 1.0 - brush);\n    \n    fragColor = vec4(final, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}