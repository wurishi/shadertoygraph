{"ver":"0.1","info":{"id":"4sKfWK","date":"1530546830","viewed":215,"name":"Buddhabrot mod","username":"stduhpf","description":"Replacing the monte carlo approach with a simple fmb in the naive buddahbrot algorithm","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = atan(.1*texture(iChannel0,uv)*iResolution.x/(iMouse.x+10.))*2./acos(-1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DOTS 10\n#define ITERATIONS 4000\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 noise(float a){\nreturn mix(hash21(floor(a)),hash21(ceil(a)),smoothstep(0.,1.,fract(a)));\n}\n\nvec2 fbm(float a){\n    return noise(a)*.5+.35*noise(2.01*a)+.15*noise(4.01*a);\n}\n\nvec2 getPolar(vec2 a){\n    a.x*=acos(-1.)*4.;\n    a.y=fract(a.y*4.);\n \treturn sqrt(a.y)*vec2(cos(a.x),sin(a.x));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv = 2.*(2.*fragCoord-iResolution.xy)/iResolution.y;\n    //uv.y = abs(uv.y);\n    vec3 color = vec3(0),col=color,col2 = col;\n    float eps = 3./iResolution.y;\n    bool escape;\n    if(length(uv)<2.){\t\n     for(int j=0;j<DOTS;j++){\t\n        escape = false;\n        vec2 z =2.* getPolar(fbm(iTime*.01*(j%2==0?1.:-1.)+100.2*float(j-DOTS/2)))\n                 ,c=z,z2=z;\n        for(int i=0;i++<ITERATIONS;z=z*mat2(z.x,-z.y,z.yx)+c){\n            float interpolant = clamp(sqrt(distance(z,z2)/2.),0.,1.);\n            z2=z;\n            if(length(z)>2.){\n             \tescape = true;\n                i=ITERATIONS;\n            }\n            if(distance(z,uv)<eps && i!=1){\n                    col2  = (1.0 - interpolant) * vec3(0.1, 0.4, 1.0) + interpolant * vec3(1.0, 0.6, 0.1);//color for buddabrot\n                    col = (1.0 - interpolant) * vec3(0.0, 1.0, 0.0) + interpolant * vec3(1.0, 0.1, 0.9);//color for anti-buddabrot\n            }  \n        }\n     \n        color += escape?col:col2*0.;\n        col*=0.;col2*=0.;\n        //replace col2*0 with col2*0.1 or something to also show the anti-buddabrot\n     }\n    }\n    \n    fragColor = texture(iChannel0,fragCoord/iResolution.xy)+vec4(color,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}