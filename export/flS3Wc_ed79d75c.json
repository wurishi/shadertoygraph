{"ver":"0.1","info":{"id":"flS3Wc","date":"1624810390","viewed":82,"name":"Distorted pixel shape","username":"Envy24","description":"Use mouse.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blur","distortion","pixel","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n#define CH iChannel0\n\nvec2 rescalePixel(vec2 XY, float pixelSize)\n{\n    return floor(XY / pixelSize) * pixelSize;\n}\n\nvec2 distortion0(vec2 XY, float o, float amount)\n{\n    float t = length((XY - R.xy * 0.5) / R.y) * amount;\n    \n    XY = rescalePixel(XY - R.xy * 0.5, t + o);\n    \n    return XY + R.xy * 0.5;\n}\n\nvec2 distortion1(vec2 XY, float o, float amount)\n{\n    float t = length((XY - R.xy * 0.5) / R.y) * amount;\n    \n    XY = rescalePixel(XY + R.xy * 0.5, t + o);\n    \n    return XY - R.xy * 0.5;\n}\n\nvec4 noFilter(vec2 XY, float o, float amount)\n{\n    vec2 C;\n\n    if (XY.x >= R.x * 0.5) { C = distortion0(XY, o, amount); }\n    else { C = distortion1(XY, o, amount); }\n    \n    return texture(CH, C / R.xy);\n}\n\nvec4 averageFilter(vec2 XY, float o, float amount)\n{\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    float size = 4.0;\n    float noiseScale = 3.0;\n    \n    for (float u = 0.0; u < size; u += 1.0)\n    {\n        for (float v = 0.0; v < size; v += 1.0)\n        {\n            vec2 rand = vector2HashUI32(\n                uint(XY.x + iTime * 600.0),\n                uint(XY.y + iTime * 1100.0));\n                \n            rand *= noiseScale;\n            \n            vec2 C;\n            \n            if (XY.x >= R.x * 0.5) { C = distortion0(XY + vec2(u, v) + rand, o, amount); }\n            else { C = distortion1(XY + vec2(u, v) + rand, o, amount); }           \n        \n            color += texture(CH, C / R.xy);\n        }\n    }\n    \n    return color / (size * size);\n}\n\nvoid mainImage( out vec4 O, in vec2 XY )\n{\n    float m = 1.0 + (iMouse.x / R.x) * 10.0;\n    float amount = 1.0 + (iMouse.y / R.y) * 20.0;\n    \n    vec4 color;\n\n    if (XY.y >= R.y * 0.5) { color = noFilter(XY, m, amount); }\n    else { color = averageFilter(XY, m, amount); }\n    \n    if (abs(XY.x - R.x * 0.5) < 1.0) { color = vec4(0.0, 0.0, 0.0, 1.0); }\n    if (abs(XY.y - R.y * 0.5) < 1.0) { color = vec4(0.0, 0.0, 0.0, 1.0); }\n\n    O = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint enthropy0 = 123u;\n    const uint enthropy1 = 456u;\n    const uint enthropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * enthropy2 + x;\n    uint value1 = x * enthropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += enthropy1; value0 *= 445593459u; value0 ^= enthropy0;\n    value1 += enthropy1; value1 *= 445593459u; value1 ^= enthropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n","name":"Common","description":"","type":"common"}]}