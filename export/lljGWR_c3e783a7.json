{"ver":"0.1","info":{"id":"lljGWR","date":"1428247891","viewed":353,"name":"Xiaolin Wu's line","username":"TioTio","description":"Implementation Wu's line algorithm in shader. I know those &quot;if&quot; are terrible, but i can't do anything with them =(","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","mouse","line","wu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineWu(vec2 a, vec2 b, vec2 c)\n{   \n    float minX = min(a.x, b.x);\n    float maxX = max(a.x, b.x);\n    float minY = min(a.y, b.y);\n    float maxY = max(a.y, b.y);\n        \n    // crop line segment\n    if (c.x < floor(minX) || c.x > ceil(maxX))\n        return 0.0;\n    if (c.y < floor(minY) || c.y > ceil(maxY))\n        return 0.0;\n    \n    // swap X and Y\n\tvec2 d = vec2(abs(a.x - b.x), abs(a.y - b.y));\n    if (d.y > d.x) \n    {\n        a = a.yx;\n        b = b.yx;\n        c = c.yx;\n        d = d.yx;\n        \n        minX = minY;\n        maxX = maxY;\n    } \n    \n    // handle end points\n    float k = 1.0;\n    if (c.x == floor(minX))\n        k = 1.0 - fract(minX);\n    if (c.x == ceil(maxX))\n        k = fract(maxX);\n    \n\n    // find Y by two-point form of linear equation\n    // http://en.wikipedia.org/wiki/Linear_equation#Two-point_form\n    float y = (b.y - a.y) / (b.x - a.x) * (c.x - a.x) + a.y;\n\n    // calculate result brightness\n    float br = 1.0 - abs(c.y - y);\n   \treturn max(0.0, br) * k * (0.5 * length(d) / d.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 a = vec2(0.5,0.0);\n\tvec2 b = vec2(5.5,1.0);\n    \n    a = iMouse.xy;    \n    \n    vec2 c = fragCoord - 0.5;\n            \n    float n = lineWu(a, b, c);\n    \n    fragColor = vec4(n,n,n,1.0);\n}","name":"Image","description":"","type":"image"}]}