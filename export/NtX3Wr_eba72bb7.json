{"ver":"0.1","info":{"id":"NtX3Wr","date":"1621858057","viewed":155,"name":"Distribution Ray Tracing and DOF","username":"HQ","description":"Distribution Ray Tracing with depth-of-field and anti-aliasing","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================\n// STUDENT NAME: Li Hengqiong\n// STUDENT NO.: A0225542L\n// NUS EMAIL ADDRESS: e0576176@u.nus.edu\n// COMMENTS TO GRADER:\n//\n//============================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In degrees.\nconst float FOVY = 50.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 3;\nconst int NUM_PLANES = 2;\nconst int NUM_SPHERES = 2;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of\n// Lecture Topic 9 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 3.5;\n    Plane[1].materialID = 0;\n\n    // Center bouncing sphere.\n    Sphere[0].center = vec3( 0.0, abs(sin(2.0 * iTime)) + 0.7, 0.0 );\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 1;\n\n    // Circling sphere.\n    Sphere[1].center = vec3( 1.5 * cos(iTime), 0.5, 1.5 * sin(iTime) );\n    Sphere[1].radius = 0.5;\n    Sphere[1].materialID = 2;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Returns a random number between 0 and 1.\n//\n// This pseudorandom number generator is based on the 32-bit combined LFSR\n// generator proposed in the paper \"Tables of Maximally-Equidistributed\n// Combined LFSR Generators\" by Pierre L'Ecuyer.\n// (http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.43.3639)\n/////////////////////////////////////////////////////////////////////////////\n\n// VERY IMPORTANT: The initial seeds rand_z1, rand_z2, rand_z3, rand_z4\n// must be larger than 1, 7, 15, and 127 respectively.\nconst uint CONST_RAND_SEED = 987654321U;\nuint rand_z1 = uint(CONST_RAND_SEED + 2U);\nuint rand_z2 = uint(CONST_RAND_SEED + 8U);\nuint rand_z3 = uint(CONST_RAND_SEED + 16U);\nuint rand_z4 = uint(CONST_RAND_SEED + 128U);\n\nfloat rand(void)\n{\n    uint b  = ((rand_z1 << 6) ^ rand_z1) >> 13;\n    rand_z1 = ((rand_z1 & 4294967294U) << 18) ^ b;\n    b       = ((rand_z2 << 2) ^ rand_z2) >> 27;\n    rand_z2 = ((rand_z2 & 4294967288U) << 2) ^ b;\n    b       = ((rand_z3 << 13) ^ rand_z3) >> 21;\n    rand_z3 = ((rand_z3 & 4294967280U) << 7) ^ b;\n    b       = ((rand_z4 << 3) ^ rand_z4) >> 12;\n    rand_z4 = ((rand_z4 & 4294967168U) << 13) ^ b;\n    return float(rand_z1 ^ rand_z2 ^ rand_z3 ^ rand_z4) * 2.3283064365386963e-10;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray,\n                     in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray,\n                     in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray,\n                      in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 o_ = ray.o - sph.center;\n    float b = 2. * dot(ray.d, o_);\n    float c = dot(o_, o_) - sph.radius * sph.radius;\n    float d = b * b - 4. * c;\n    if (d < 0.) return false;\n    if (d == 0.) {\n        float t0 = -b / 2.;\n        if ( t0 < tmin || t0 > tmax ) return false;\n        t = t0;\n    }\n    else {\n        float t0 = (-b + sqrt(d)) / 2.;\n        float t1 = (-b - sqrt(d)) / 2.;\n        if ( t0 < tmin || t0 > tmax ) {\n            if ( t1 < tmin || t1 > tmax ) return false;\n            else t = t1;\n        }\n        else {\n            if ( t1 < tmin || t1 > tmax ) t = t0;\n            else t = (t0 < t1)? t0 : t1;\n        }\n    }\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n    return true;  // Replace this with your code.\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray,\n                      in float tmin, in float tmax )\n{\n    vec3 o_ = ray.o - sph.center;\n    float b = 2. * dot(ray.d, o_);\n    float c = dot(o_, o_) - sph.radius * sph.radius;\n    float d = b * b - 4. * c;\n    if (d < 0.) return false;\n    if (d == 0.) {\n        float t0 = -b / 2.;\n        if ( t0 < tmin || t0 > tmax ) return false;\n    }\n    else {\n        float t0 = (-b + sqrt(d)) / 2.;\n        float t1 = (-b - sqrt(d)) / 2.;\n        if ( t0 < tmin || t0 > tmax ) {\n            if ( t1 < tmin || t1 > tmax ) return false;\n        }\n    }\n    return true;  // Replace this with your code.\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos,\n              out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n\n    for (int i=0; i<NUM_PLANES; i++) {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit) {\n            hasHitSomething = true;\n            if (temp_t < nearest_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n\n    for (int i=0; i<NUM_SPHERES; i++) {\n        temp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit) {\n            hasHitSomething = true;\n            if (temp_t < nearest_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n        }\n    }\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    for (int i=0; i<NUM_LIGHTS; i++) {\n        Ray_t shadowRay;\n        shadowRay.o = nearest_hitPos;\n        vec3 d = Light[i].position - nearest_hitPos;\n        float dst = sqrt(dot(d, d));\n        shadowRay.d = normalize(d);\n        bool inShadow = false;\n        for (int j=0; j<NUM_PLANES; j++) {\n            if (IntersectPlane(Plane[j], shadowRay, DEFAULT_TMIN, dst)) {\n                inShadow = true;\n                break;\n            }\n        }\n        if (!inShadow) {\n            for (int j=0; j<NUM_SPHERES; j++) {\n                if (IntersectSphere(Sphere[j], shadowRay, DEFAULT_TMIN, dst)) {\n                    inShadow = true;\n                    break;\n                }\n            }\n        }\n        I_local += PhongLighting(shadowRay.d, nearest_hitNormal, -ray.d, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialize random number generator before the first call to rand().\n    uint RAND_SEED = uint( (mod(iTime*100.0, 100.0) + 101.01) *\n                           (fragCoord.x + 17.0) * (fragCoord.y + 23.0) );\n    rand_z1 = uint(RAND_SEED + 2U);\n    rand_z2 = uint(RAND_SEED + 8U);\n    rand_z3 = uint(RAND_SEED + 16U);\n    rand_z4 = uint(RAND_SEED + 128U);\n\n\n    InitScene();\n\n\n    // Camera position and orientation in world space.\n    vec3 cam_pos = vec3( 2.5, 1.0, 2.5 );\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Vertical field-of-view angle of camera. In radians.\n    float cam_FOVY = FOVY * PI / 180.0;\n\n    // Perpendicular distance of the image rectangle from the camera.\n    // If implementing depth-of-field, the plane of the image rectangle\n    // is the plane of focus.\n    float image_dist = distance(cam_pos, vec3(0.0, 0.7, 0.0));\n\n    float image_height = 2.0 * image_dist * tan(cam_FOVY / 2.0);\n    float image_width = image_height * iResolution.x / iResolution.y;\n    float pixel_width = image_width / iResolution.x;\n\n    // Image rectangle origin (bottom-leftmost corner) position in camera space.\n    vec3 image_origin = vec3(-image_width/2.0, -image_height/2.0, -image_dist);\n\n\n\n    //=======================================================================\n    // These constants are used for distribution ray tracing to produce\n    // depth-of-field effect and for image anti-aliasing (reduce jaggies).\n    //=======================================================================\n    // Number of samples (random primary rays) per pixel.\n    const int SPP = 32;\n\n    // Lens aperture width. Assume square aperture.\n    const float aperture_width = 0.3;\n    //=======================================================================\n\n\n    // Current pixel 3D position in camera space.\n    //vec3 pixel_pos = image_origin + vec3(pixel_width * fragCoord, 0);\n    // Create primary ray.\n    vec2 offsetLen, offsetPixel;\n    vec3 pixel_pos, len_pos;\n    Ray_t pRay[SPP];\n    for (int i=0; i<SPP; i++) {\n        offsetLen.x = rand();\n        offsetLen.y = rand();\n        offsetLen = (offsetLen - 0.5) * aperture_width / 2. / 0.5;\n        offsetPixel.x = rand();\n        offsetPixel.y = rand();\n        offsetPixel = (offsetPixel - 0.5) * pixel_width / 2. / 0.5;\n        len_pos = cam_pos + offsetLen.x * cam_x_axis + offsetLen.y * cam_y_axis;\n        pixel_pos = image_origin + vec3(pixel_width * fragCoord, 0) + vec3(offsetPixel, 0);\n        pRay[i].o = len_pos;\n        pRay[i].d = normalize(cam_pos + pixel_pos.x * cam_x_axis  +\n                                        pixel_pos.y * cam_y_axis  +\n                                        pixel_pos.z * cam_z_axis - pRay[i].o);\n    }\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n    vec3 fragColor_ = vec3(0.);\n    for (int i=0; i<SPP; i++) {\n        Ray_t nextRay = pRay[i];\n        vec3 I_result = vec3( 0.0 );\n        vec3 compounded_k_rg = vec3( 1.0 );\n        for ( int level = 0; level <= NUM_ITERATIONS; level++ ) {\n            bool hasHit;\n            vec3 hitPos, hitNormal, k_rg;\n\n            vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n            I_result += compounded_k_rg * I_local;\n\n            if ( !hasHit ) break;\n\n            compounded_k_rg *= k_rg;\n\n            nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n        }\n        fragColor_ += I_result;\n    }\n\n    fragColor = vec4( fragColor_ / float(SPP), 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}