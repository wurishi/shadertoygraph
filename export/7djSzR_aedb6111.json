{"ver":"0.1","info":{"id":"7djSzR","date":"1619576236","viewed":99,"name":"bg_xarma","username":"xarmalarma","description":"bgplot","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bgcolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The unit vector v returns a color that is a linear blend of light blue and dark blue depending on the y value of v\nvec3 background_color(in vec3 v) {\n    float u = v.y; \n    return vec3(u*vec3(0.7, 0.8, 0.9) + (1.0-u)*vec3(0.05, 0.05, 0.2));\n}\n\n\nvec3 unit_vector(in vec3 v) {\n    // len = math.sqrt(np.dot(v,v))\n    return normalize(v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float window_depth = 2.0;\n    float aspect_ratio = iResolution.y/iResolution.x;\n    \n    vec3 ray_direction = unit_vector(vec3(2.0*uv.x-1.0, aspect_ratio*(2.0*uv.y-1.0), -window_depth));\n    \n    // Output to screen\n    fragColor = vec4(background_color(ray_direction), 1.0); \n \n}","name":"Image","description":"","type":"image"}]}