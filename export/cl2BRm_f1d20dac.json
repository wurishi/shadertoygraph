{"ver":"0.1","info":{"id":"cl2BRm","date":"1693892820","viewed":59,"name":"Depth to Quilt converter","username":"Cieric","description":"Load the depth image to iChannel0, and the color image to iChannel1 this performs a crappy parallax that looks great on a looking glass portrait.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lookingglass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void tile( out vec4 fragColor, in vec2 fragCoord, float xOffset )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel1, uv).rgb;\n\n    for(int i=255; i>0; --i) {\n        float fi = float(i);\n        float offset = xOffset * (fi / 255.0);\n        if(uv.x + offset < 0.0 || uv.x + offset > 1.0) continue;\n        float tex = texture(iChannel0, uv + vec2(offset, 0.0)).r;\n        if(tex > fi / 255.0)\n        {\n            col = texture(iChannel1, uv + vec2(offset, 0.0)).rgb;\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nvec3 tileCount = vec3(8.0, 6.0, -1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    tileCount.z = tileCount.x * tileCount.y;\n    float xOffset = iMouse.x / iResolution.x - 0.5;\n    float range = 0.3;\n    float halfRange = range / 2.0;\n    vec2 tileXY = floor((fragCoord / iResolution.xy) * tileCount.xy);\n    float tileID = tileXY.x + tileXY.y * tileCount.x;\n    \n    xOffset = (tileID / tileCount.z) * range - halfRange;\n    \n    tile(fragColor, mod(fragCoord * tileCount.xy, iResolution.xy), xOffset);\n}","name":"Image","description":"","type":"image"}]}