{"ver":"0.1","info":{"id":"DtVczV","date":"1700440685","viewed":37,"name":"ACEScct / ACEScc","username":"kanzwataru2","description":"Converting to ACEScct / ACEScc color space without relying on OCIO.\nNOTE: Completely unverifed! Could be incorrect!\n\nAP1 and ACEScc conversion borrowed from Unity code.\nACEScct implemented from spec.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colormanagement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define WITH_DIVIDING_LINE 1\n\nfloat acescg_to_acescct(float x)\n{\n    // https://docs.acescentral.com/specifications/acescct/#color-space\n    if(x <= 0.0078125) {\n        return 10.5402477416545 * x + 0.0729055341958355;\n    }\n    else {\n        return (log2(x) + 9.72) / 17.52;\n    }\n}\n\nfloat ACES_to_ACEScc(float x)\n{\n    // https://github.com/Unity-Technologies/FPSSample/blob/master/Packages/com.unity.postprocessing/PostProcessing/Shaders/ACES.hlsl\n    if (x <= 0.0)\n        return -0.35828683; // = (log2(pow(2.0, -15.0) * 0.5) + 9.72) / 17.52\n    else if (x < pow(2.0, -15.0))\n        return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\n    else // (x >= pow(2.0, -15.0))\n        return (log2(x) + 9.72) / 17.52;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const mat3x3 sRGB_2_AP1 = mat3x3(\n        // https://github.com/Unity-Technologies/FPSSample/blob/master/Packages/com.unity.postprocessing/PostProcessing/Shaders/ACES.hlsl\n        0.61319, 0.33951, 0.04737,\n        0.07021, 0.91634, 0.01345,\n        0.02062, 0.10957, 0.86961\n    );\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    if(uv.x < 0.5) {\n        col = texture(iChannel1, uv).rgb;\n    }\n    \n    if(uv.y > 0.3) {\n        // Reverse sRGB curve (approximate)\n        col.r = pow(col.r, 2.2);\n        col.g = pow(col.g, 2.2);\n        col.b = pow(col.b, 2.2);\n\n        // Convert to ACEScg AP1 primaries\n        col = col * sRGB_2_AP1;\n    \n        if(uv.y > 0.6) {\n            // ACEScct\n            col.r = acescg_to_acescct(col.r);\n            col.g = acescg_to_acescct(col.g);\n            col.b = acescg_to_acescct(col.b);\n        }\n        else {\n            // ACEScc\n            col.r = ACES_to_ACEScc(col.r);\n            col.g = ACES_to_ACEScc(col.g);\n            col.b = ACES_to_ACEScc(col.b);\n        }\n    }\n\n#if WITH_DIVIDING_LINE\n    if((uv.y > 0.3 && uv.y < 0.301) ||\n       (uv.y > 0.6 && uv.y < 0.601))\n   {\n        col = vec3(1.0, 1.0, 1.0);\n    }\n#endif\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}