{"ver":"0.1","info":{"id":"MdjfRK","date":"1501247131","viewed":3104,"name":"glow shader test","username":"remonvv","description":"glow shader test for effect. Intended to generate a glowing border around n-gons.","likes":82,"published":1,"flags":0,"usePreview":0,"tags":["glowfire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898,12.1414))) * 83758.5453);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = mix(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvec3 ramp(float t) {\n\treturn t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;\n}\n\nfloat fire(vec2 n) {\n    return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    float t = iTime;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    uv.x += uv.y < .5 ? 23.0 + t * .35 : -11.0 + t * .3;    \n    uv.y = abs(uv.y - .5);\n    uv *= 5.0;\n    \n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 1.61, vec3(4.0))));\n    \n    float grad = pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n    color = ramp(grad);\n    color /= (1.50 + max(vec3(0), color));\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}