{"ver":"0.1","info":{"id":"llXXWl","date":"1440482448","viewed":394,"name":"balls bounce","username":"rcread","description":"inspired by https://www.shadertoy.com/view/MllSDX","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by randy read - rcread/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat sum( vec2 a ) { return a.x + a.y; }\nfloat min2( vec2 a ) { return min( a.x, a.y ); }\nfloat hash11( float a ) { return fract( sin( a ) * 13131. ); }\t//\tdeliberately 'bad' hash\n\nvec3 checker( vec3 ro, vec3 rd ) {\n\tfloat t, c; vec2 p, ps;\n\tt\t\t\t=\t-ro.y / rd.y;\t\t\t\t\t\t\t\t//\tdistance to floor\n\tif ( t <= 0. ) return vec3( 0 );\n\tp\t\t\t=\tro.xz + t * rd.xz;\t\t\t\t\t\t\t//\t2d floor position\n\tc\t\t\t=\tmod( sum( floor( p ) ), 2. );\t\t\t\t//\tfloor color\n\tps\t\t\t=\tfwidth( p );\t\t\t\t\t\t\t\t//\tpixel gradient\n\tp\t\t\t=\tfract( p );\n\tp\t\t\t=\tmin( p, 1. - p ) / ps;\t\t\t\t\t\t//\tAA alpha\n\tc\t\t\t=\tmix( .5, c, clamp( min2( p ), 0., 1. ) * max( 0., .9 * ( .9 - length( ps ) ) ) ) / max( 1., .06 * t );\n\treturn vec3( c );\n}\n\nvoid gen( vec3 ro, vec3 rd, float i, float n, out vec3 p, out vec3 c ) {\n\tfloat a, s, r, t, h;\n\ta\t\t\t=\tatan( rd.z, rd.x );\t\t\t\t\t\t\t//\tray angle\n\ts\t\t\t=\t( .5 + floor( a * n ) ) / n;\t\t\t\t//\tray sector\n\tr\t\t\t=\thash11( s );\t\t\t\t\t\t\t\t//\tray sector-specific random number\n\tr\t\t\t=\tfract( r * 3. );\n\tt\t\t\t=\tsqrt( n ) * ( 2. + 1e1 * sqrt( r ) );\t\t//\tdistance to ball\n\tr\t\t\t=\tfract( r * 3. );\n\th\t\t\t=\t( 2. + 8. * r ) * sqrt( smoothstep( 0., 1., abs( 1. - 2. * fract( i + r ) ) ) );\t//\tball height\n\tp\t\t\t=\tvec3( t * cos( s ), h, t * sin( s ) );\t\t//\tball position\n\tc\t\t\t=\tfract( r * vec3( 3, 9, 27 ) );\t\t\t\t//\tball color\n\tc\t\t\t/=\tmax( 1e-5, max( c.x, max( c.y, c.z ) ) );\n}\n\nvec3 sphere( vec3 ro, vec3 rd, vec3 p, float r, vec3 c, vec4 l, out float a ) {\n\tfloat d, t; vec3 i;\n\tt\t\t\t=\tdot( p - ro, rd );\t\t\t\t\t\t\t//\tdistance to nearest point on ray to sphere_center\n\ti\t\t\t=\tro + t * rd;\t\t\t\t\t\t\t\t//\tnearest point on ray to sphere_center\n\td\t\t\t=\tlength( p - i );\t\t\t\t\t\t\t//\tperpendicular distance ray nearest point to sphere_center\n\ta\t\t\t=\t1. - clamp( ( d - r ) / ( t / iResolution.y ), 0., 1. );\t//\tAA alpha\n\tt\t\t\t-=\t( d < r ) ? sqrt( r * r - d * d ) : 0.;\t\t//\tdistance to near side sphere intersect point\n\ti\t\t\t=\tro + t * rd;\t\t\t\t\t\t\t\t//\tnear side sphere intersect point\n\treturn c * l.w * max( 0., dot( normalize( i - p ), normalize( l.xyz - i ) ) );\n}\n\n\nvoid mainImage( out vec4 o, vec2 i ) {\n\tfloat a, t; vec2 uv; vec3 p, ro, rd, c, c2, up, cam, right;\n    \n\tt\t\t\t=\tiTime / 2.;\n\tro\t\t\t=\tvec3( 0, 4. * ( 1.01 + sin( t / 4. ) ), 0 );\n\ti\t\t\t=\tfloor( i ) / iResolution.y - .5;\n\tuv\t\t\t=\tvec2( t / 2e1, 0 );\n    up\t\t\t=\tvec3( 0, 1, 0 );\n\tcam\t\t\t=\tnormalize( vec3( sin( uv.x ), 2. * asin( uv.y ), cos( uv.x ) ) );\n\tright\t\t=\tnormalize( cross( cam, up ) );\n\trd\t\t\t=\tnormalize( cam + i.x * right + i.y * up );\n\n\tc\t\t\t=\tchecker( ro, rd );\n\n\t\t\t\t\tgen( ro, rd, t, 1e4, p, c2 );\n\tc\t\t\t=\tmix( c, sphere( ro, rd, p, .1, c2, vec4( 0, 1e2, 1e2, 1.5 ), a ), a );\n\t\t\t\t\tgen( ro, rd, t, 5e2, p, c2 );\n\tc\t\t\t=\tmix( c, sphere( ro, rd, p, .1, c2, vec4( 0, 1e2, 1e2, 1.5 ), a ), a );\n\t\t\t\t\tgen( ro, rd, t, 4e1, p, c2 );\n\tc\t\t\t=\tmix( c, sphere( ro, rd, p, .1, c2, vec4( 0, 1e2, 1e2, 1.5 ), a ), a );\n\t\t\t\t\tgen( ro, rd, t, 1e1, p, c2 );\n\tc\t\t\t=\tmix( c, sphere( ro, rd, p, .1, c2, vec4( 0, 1e2, 1e2, 1.5 ), a ), a );\n\n    o.rgb\t\t=\tc;\n}\n","name":"Image","description":"","type":"image"}]}