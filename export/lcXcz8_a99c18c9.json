{"ver":"0.1","info":{"id":"lcXcz8","date":"1720756968","viewed":38,"name":"COLOR LINGHT","username":"ankye","description":" ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","colorful","lights"],"hasliked":0,"parentid":"wlSSDt","parentname":"Colorful Lights"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n#define LIGHT_NUM  73\n\nvec3 lightsPos[LIGHT_NUM];\nvec4 lightsCol1[LIGHT_NUM];\nvec4 lightsCol2[LIGHT_NUM];\nfloat lightsRad1[LIGHT_NUM];\nfloat lightsRad2[LIGHT_NUM];\n\n\nmat3 lookAt(vec3 eye, vec3 target, vec3 up) //calculate view matrix\n{\n    vec3 w = normalize(target - eye);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = cross(u, w);\n    return mat3(u, v, -w);\n}\n\n\n\nvoid rotate(inout vec2 v, float a) { v = cos(a)*v+sin(a)*vec2(-v.y,v.x); }\n\n\n\nvec4 render(vec3 ro, vec3 rd)\n{\n    //init lights\n lightsPos[0] = vec3(0.0);\n lightsCol1[0] = 0.5*vec4(1.0,0.8,0.3,1.0);\n lightsCol2[0] =8.0*vec4(1.0,0.6,0.3,1.0);\n lightsRad1[0] = 0.0;\n lightsRad2[0] = 0.0;\n\n\n     vec4 col[3] ;\n     col[0]= vec4(0.4,0.3,0.6,1.0);\n     col[1] = vec4(1.0,0.0,0.0,1.0);\n     col[2] =vec4(0.1,0.9,0.1,1.0);\n  \n    for (int i = 1; i < LIGHT_NUM; ++i)\n    {\n       \n         lightsPos[i] = vec3(0.0);\n         lightsCol1[i] = 0.4*col[int(mod(float(i), 3.0))];\n         lightsCol2[i] =2.0*vec4(1.0);\n         lightsRad1[i] =  2.0;\n         lightsRad2[i] =0.3;\n    }\n    \n    //update lights\n    const int N = (LIGHT_NUM-1)/3;\n    float an = 0.0, dt = 2.0*PI/float(N); \n    float r=-0.5;\n    vec2 offset = vec2(1.0,1.0);\n    float ioffset = 0.0;\n    float time = iTime*1.0;\n    for (int i = 1; i < LIGHT_NUM; ++i)\n   {\n        ioffset = 0.0;//float(int(mod(float(i), 3.0)));\n         lightsPos[i].xy = (3.0+ioffset*0.01) * vec2(2.0*smoothstep(0.3,1.7,1.0+sin(an+time))-offset.x,1.0*smoothstep(0.3+r+ioffset*0.2,1.7+r,1.0+cos(an+time))-offset.y);    \t\n\n        \n        if ( int(mod(float(i), 3.0))==0) an += dt;\n    }\n    \n\n    for (int i = 0; i < N; ++i) \n   {\n        rotate(lightsPos[3*i+2].xy, -PI/4.0);\n        rotate(lightsPos[3*i+3].xy, PI/4.0); \n    }\n    float scale = (sin(iTime*10.0)*0.5);\n    //draw lights\n    vec4 color = vec4(0.0,0.0,0.0,0.0);\n    for (int i = 0; i < LIGHT_NUM; ++i)\n    {\n        vec3  lv =  lightsPos[i] - ro;\n        float an = acos(dot(rd, lv/length(lv)));\n \n        float w =(i == 0) ? 1.0 : 0.3;\n        color += lightsCol1[i] * pow((1.0-smoothstep(0.0, lightsRad1[i], an*length(lv))), \t 8.0+scale) * w;\n        color += lightsCol1[i] * pow((1.0-smoothstep(0.0, lightsRad2[i]*3.0, an*length(lv))), 8.0+scale);\n       color += lightsCol2[i] * pow( (1.0-smoothstep(0.0, lightsRad2[i], an*length(lv))),\t 8.0+scale);\n\n        \n        \n        \n    }\n    return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2  uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    float an = PI;\n    vec3  rayOri = 5.0 * vec3(sin(an), 0.0, cos(an));\n    mat3  viewMat = lookAt(rayOri, vec3(0.0), vec3(0.0,1.0,0.0));\n    vec3  rayDir = viewMat * normalize(vec3(uv, -1.5));\n \n   \tvec4 color = render(rayOri, rayDir);\n    color = pow(color, vec4(0.95+0.4*sin(iTime)));\n    fragColor = color ;//vec4(color, smoothstep(0.0,1.0,color.r+color.g+color.b));\n}","name":"Image","description":"","type":"image"}]}