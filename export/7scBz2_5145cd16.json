{"ver":"0.1","info":{"id":"7scBz2","date":"1656778559","viewed":110,"name":"Quaternion Mandelbrot Noise","username":"mattdeeds","description":"I iterate the z = z^2 + z_0 Mandelbrot equation, and use a sine function to keep it from exploding.  Instead of using complex numbers, I use quaternions.  This produces a 4 dimensional noise function.  I'm using the first three dimensions for color.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","mandelbrot","quaternion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define kIterations 50\n#define kScale 9.0\n#define kSpeed 0.1\n#define kSlope 0.7\n\n\nvec4 qMultiply(in vec4 a, in vec4 b) {\n  // https://en.wikipedia.org/wiki/Quaternion\n  // Hamilton product\n  \n  return vec4(\n    a.x * b.x - a.y * b.y - a.z * b.z - a.w * b.w,\n    a.x * b.y + a.y * b.x + a.z * b.w - a.w * b.z,\n    a.x * b.z - a.y * b.w + a.z * b.x + a.w * b.y,\n    a.x * b.w + a.y * b.z - a.z * b.y + a.w * b.x);\n}\n\nvec4 sSin(in vec4 x) {\n  return sin(x * kSlope);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord/iResolution.xy) - 0.5) * kScale;\n\n    vec4 a = vec4(uv, sin(iTime * kSpeed), cos(iTime * kSpeed));\n    vec4 a0 = a;\n    \n    for (int i = 0; i < kIterations; ++i) {\n      a = sSin(qMultiply(a, a) + a0);\n    }\n    vec3 col = a.xyz * 0.5 + 0.5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}