{"ver":"0.1","info":{"id":"lXBXzd","date":"1710947098","viewed":53,"name":"Gravity Virus","username":"BlackBow","description":"gravity","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gravityy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Smooth vs sharp boolean operations for combining shapes\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return max(d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nfloat randomBetween(float min, float max, float seed) {\n    return mix(min, max, fract(sin(seed) * 43758.5453));\n}\n\nfloat hash(vec2 x)\n{\n    return fract(sin(dot(x, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat S( float x)\n{\n    return 3.0*pow(x, 2.0) - 2.0*pow(x, 3.0);\n}\n\nfloat coefA(vec2 ij)\n{\n    float u = 50. * fract(ij.x / 3.14);\n    float v = 50. * fract(ij.y / 3.14);\n    return hash(vec2(u, v));\n    //return 2. * fract(u * v * (u + v)) - 1.;\n}\n\nfloat coefB(vec2 ij) { return coefA(ij + vec2(1., 0.)); }\n\nfloat coefC(vec2 ij) { return coefA(ij + vec2(0., 1.)); }\n\nfloat coefD(vec2 ij) { return coefA(ij + vec2(1., 1.)); }\n\nfloat noise(vec2 xz)\n{\n    vec2 ij = vec2(floor(xz.x), floor(xz.y));\n    float i = ij.x;\n    float j = ij.y;\n    float x = xz.x;\n    float z = xz.y;\n    float a = coefA(ij);\n    float b = coefB(ij);\n    float c = coefC(ij);\n    float d = coefD(ij);\n    return a +\n           (b - a) * S(x - i) +\n           (c - a) * S(z - j) +\n           (a - b - c + d) * S(x - i) * S(z - j);\n}\n\n//-------------------------------------------------\n\nfloat sdSphere( in vec3 p, in float r )\n{\n    float noise = 0.2*sin(0.8*iTime)*sin (10.0*p.x)*sin (10.*p.y)*sin (10.8*p.z);\n    return length(p)-r + noise;\n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdLiquidBox (vec3 p, vec3 b){\n    float noise = 0.1*sin(0.8*iTime)*sin (4.0*p.x)*sin (10.*p.y)*sin (.8*p.z);\n    return noise + sdBox (p,b);\n}\n\nmat3 rotationMatrixY (float theta)\n{\n    float c = cos (theta);\n    float s = sin (theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n\nvec3 rotateY (vec3 p, float theta)\n{\n    return p*rotationMatrixY(theta); \n}\n\n\nfloat twistedBox( vec3 p, vec3 b , float t) {\n    vec3 q = rotateY(p, p.y*t);\n    return sdBox(q,b); \n}\n\n\n//---------------------------------\n\nfloat map(in vec3 pos)\n{\n    float an = sin(iTime);\n    float dfinal = 0.0;\n    vec3 q = pos - vec3(0.2,0.0,1.0);\n    float d2 = sdLiquidBox(q, vec3(8.6,0.01,8.7)); \n    vec3 r = q + vec3(0.0,-0.5,-0.7);\n\n    dfinal = d2;\n    \n    \n    vec3 q1 = pos - vec3(0.9, 0.5,1.0);\n    float cicle = sdSphere(q1, 0.3);\n    //dfinal = opUnion(d2, opUnion(d1,cicle));\n    \n   const int NUM_ROCKS = 10;\n   for( int i = 1; i < NUM_ROCKS; i++)\n   {\n       float ypos = randomBetween(-1.0, float(i), 1.);\n       if(mod(float(i),2.0) == 0.0)\n       {\n            ypos = randomBetween(2.0, 3., 10000.);\n        }\n        else{\n            ypos = randomBetween(-1.0, float(i), 100.);\n        }\n       \n       float zpoz = randomBetween(5.0, 10. * an , 1000.);\n       vec3 q = pos - vec3( float(i)- 3.,0.5, -1);\n       float d1 = sdSphere( q-vec3(0.0,0.1+ypos *an,zpoz), 0.5 );\n       //float d2 = sdRoundBox(q, vec3(0.6,0.2,0.7), 0.1 ); \n       float dt = opSmoothUnion(d1,d2, 0.25);\n       dfinal = opUnion( dfinal, dt );\n   }\n   \n    return dfinal;\n}\nvec3 localRay;\n\nvoid CamPolar( out vec3 pos, out vec3 ray, in vec3 origin, in vec2 rotation, in float distance, in float zoom, in vec2 fragCoord )\n{\n\t// get rotation coefficients\n\tvec2 c = vec2(cos(rotation.x),cos(rotation.y));\n\tvec4 s;\n\ts.xy = vec2(sin(rotation.x),sin(rotation.y)); // worth testing if this is faster as sin or sqrt(1.0-cos);\n\ts.zw = -s.xy;\n\n\t// ray in view space\n\tray.xy = fragCoord.xy - iResolution.xy*.5;\n\tray.z = iResolution.y*zoom;\n\tray = normalize(ray);\n\tlocalRay = ray;\n\t\n\t// rotate ray\n\tray.yz = ray.yz*c.xx + ray.zy*s.zx;\n\tray.xz = ray.xz*c.yy + ray.zx*s.yw;\n\t\n\t// position camera\n\tpos = origin - distance*vec3(c.x*s.y,s.z,c.x*c.y);\n}\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 tot = vec3(0.0);\n    \n   vec2 p = (-iResolution.xy + 3.0*fragCoord)/iResolution.y; \n   //center of screen: (0,0)\n   //dimensions: +/- 0.5\n \n   //vec3 ro = vec3(0.0,3.0,8.4);\n //  vec3 rd = normalize(vec3(p-vec2(0.1,1.9),-6.));\n    \n        //Better Camera \n\tvec2 camRot = vec2(.5,.5)+vec2(-.35,4.5)*(iMouse.yx/iResolution.yx);\n\tvec3 ro, rd;\n\tCamPolar( ro, rd, vec3(0), camRot, 15.0*iMouse.x/iResolution.x, 1.0, fragCoord );\n    \n   float t = 1.0;\n   for( int i=0; i<128; i++ )\n   {\n\tvec3 p = ro + t*rd;\n\tfloat h = map(p);\n\tif( abs(h)<0.0001 || t>11.0 ) break;\n\tt += h;\n   }\n\n   vec3 col = vec3(0.478,0.600,0.839);\n\n   if( t<11.0 )\n   {\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal(pos);\n    vec3  lig = normalize(vec3(1.0,0.8,-0.2));\n    float dif = clamp(dot(nor,lig),0.0,1.0);\n    float sha = calcSoftshadow( pos, lig, 0.001, 1.0, 16.0 );\n    float amb = 0.5 + 0.5*nor.y;\n    col = vec3(0.05,0.1,0.15)*amb + vec3(1.00,0.9,0.80)*dif*sha;\n   }\n\n    col = sqrt( col );\n    tot += col;\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}