{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Created by Tommy Walton\n// Combining the work of https://www.shadertoy.com/view/4sl3zn and https://www.shadertoy.com/view/MdX3zr\n\nvec2 disp( in vec3 p )\n{\n\treturn vec2( pow( 0.0, 2.0 ),\n                 pow( 0.5 + 0.5*cos( 25.0*p.x  + 1.5*iTime)*\n\t\t\t\t\t            sin( 25.0*p.y  + 2.0*iTime )*\n\t\t\t\t\t            sin( 25.0*p.z  + 1.0*iTime ), 3.0) );\n}\n\nfloat obj( in vec3 p )\n{\n\tvec3 ax = vec3(-2.0,2.0,1.0)/3.0;\n\tvec3 ce = vec3(0.0,-0.2,-0.2);\n\n\tfloat d1 = dot(p,ax) - 0.1;\n    float d2 = length(p) - 1.0;\n\tfloat d3 = length( p-ce - ax*dot(p-ce,ax)) - 1.0;\n\n\treturn max( max( d1, d2 ), -d3 );\n}\n\n\nvec2 map( in vec3 p )\n{\n\tfloat d1 = obj( p );\n\tfloat d2 = obj( p*vec3(-1.0,-1.0,1.0) );\n\n    vec2        res = vec2( d1, 0.0 );\n\tif( d2<d1 ) res = vec2( d2, 1.0 );\n\n\tvec2 di = disp( p );\n\tres.x -= 0.04*di.x*di.y;\n\n\treturn res;\n}\n\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat t = 0.0;\n\tvec2 h = vec2( -1.0 );\n    for( int i=0; i<32; i++ )\n    {\n        h = map(ro+rd*t);\n\t\tt += h.x;\n\t}\n\t\n\tif( h.x<0.1 ) return vec2(t,h.y);\n\n\treturn vec2(-1.0);\n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.02,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat noise(vec3 p) //Thx to Las^Mercury\n{\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n\tvec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat sphere(vec3 p, vec4 spr)\n{\n\treturn length(spr.xyz-p) - spr.w;\n}\n\n\nfloat flame(vec3 p)\n{\n\tfloat d = sphere(p*vec3(.25,.5,1.), vec4(.0,-.95,.0,1.));\n\treturn d + (noise(p+vec3(.0,iTime*2.,.0)) + noise(p*3.)*.5)*.25*(p.y) ;\n}\n\nfloat scene(vec3 p)\n{\n\treturn min(100.-length(p) , abs(flame(p)) );\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n\t\n\tfor(int i=0; i<64; i++)\n\t{\n\t\td = scene(p) + eps;\n\t\tp += d * dir;\n\t\tif( d>eps )\n\t\t{\n\t\t\tif(flame(p) < .0)\n\t\t\t\tglowed=true;\n\t\t\tif(glowed)\n       \t\t\tglow = float(i)/64.;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nvec4 fire(vec2 fragCoord){\n    //flame\n        vec2 vf = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tvf.x *= iResolution.x/iResolution.y;\n        \n        vec3 orgf = vec3(0., -2., 4.);\n\tvec3 dirf = normalize(vec3(vf.x*1.6, -vf.y, -1.5));\n\t\n\tvec4 pf = raymarch(orgf, dirf);\n\tfloat glowf = pf.w;\n\t\n\tvec4 colf = mix(vec4(1.,.5,.1,1.), vec4(0.1,.5,1.,1.), pf.y*.02+.4);\n\t\n\treturn mix(vec4(0.), colf, pow(glowf*2.,4.));\n}\n\nfloat magnitude(vec4 col){\n\treturn (col.r + col.g + col.b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    vec2 m = iMouse.xy/iResolution.xy;\n\tif( iMouse.z<0.0 ) m = vec2(0.0);\n\t\n    // camera\n\tfloat an = -6.2*m.x + 0.2*sin(0.5*iTime) + 6.5;\n    vec3 ro = 1.5*normalize(vec3(sin(an),-6.0*m.y, cos(an)));\n\n    vec3 ww = normalize( vec3(0.0,0.0,0.0) - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.0*ww );\n\n    vec3 col = vec3(1.0);\n\n\t// raymarch\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.y>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd,nor);\n\t\tvec3 lig = normalize(vec3(-0.6,0.5,0.2));\n\t\tvec2 dis = disp( pos );\n     \n        \n        \n        // lights\n        float con = 1.0;\n        float amb = 0.5 + 0.5*nor.y;\n        float dif = max(dot(nor,lig),0.0);\n        float bac = max(0.2 + 0.8*dot(nor,vec3(-lig.x,lig.y,-lig.z)),0.0);\n        float rim = pow(1.0+dot(nor,rd),8.0);\n        float spe = pow(clamp(dot(lig,ref),0.0,1.0),8.0);\n        float occ = mix( 1.0, 0.9 + 3.0*dis.y, dis.x );\n\n\t\t// shadow\n\t\tfloat sh = softshadow( pos, lig, 0.01, 8.0 );\n\t\tdif *= sh;\n\t\tspe *= sh;\n\t\trim *= sh;\n\t\t\n        col  = 0.10*con*vec3(1.0)*occ;\n        col += 1.00*dif*vec3(1.0,0.8,0.6);\n        col += 0.40*bac*vec3(1.0)*occ;\n        col += 0.25*amb*vec3(0.6,0.8,1.0)*occ;\n\n        // material\n\t\tcol *= mix( vec3(0.7,0.1,0.1), vec3(0.0,0.2,1.0), tmat.y );\n\t\t\n\t\t// speculars\n        col += 0.50*spe*vec3(1.0);\n\t\tcol += 1.00*rim*vec3(1.0);\n\t\n\t\t\n        // gamma\n        col = sqrt(col);\n    }\n\n\tvec4 firecol = fire(fragCoord);\n    col *= magnitude(firecol);\n    fragColor = vec4(col, 1.0);\n    //fragColor = vec4( col.r * firecol.r, col.g * firecol.g, col.b * firecol.b, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdsSWs","date":"1407871114","viewed":231,"name":"SIG2014 Hackathon","username":"tommywalton","description":"SIGGRAPH 2014 Shadertoy Hackathon entry","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2014","hackathon","siggraph","sig2014"],"hasliked":0,"parentid":"","parentname":""}}