{"ver":"0.1","info":{"id":"mdyBzR","date":"1697811479","viewed":39,"name":"Beginner's Shader #2","username":"gocki","description":"My second shader - doing baby steps to get better. Lessons learned: 1) how to use iResolution instead of fixed values. 2) use functions to check if a fragment is within or outside a circle. Todo: Learn trigonometric functions :'D\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lines","semicircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float halfHeight = iResolution.y / 2.0;\n    float halfWidth = iResolution.x / 2.0;\n    float quarterWidth = iResolution.x / 4.0;\n    \n    // is the fragment in the bottom half?\n    if (fragCoord.y < halfHeight)\n    {\n        // calculate a sinus curve with a period that becomes shorter and shorter.\n        // Move the sinus curve up by 1, so that the value is never lower than 0.\n        // Multiply the sinus curve by 0.5, so that the value is never higher than 1.\n        // Use the time variable \"pull\" the curve.\n        \n        // I still do not fully understand the sinus function, \n        // so there is much room for improvement and much to learn :D .\n        \n        float b = (sin((1.0+fragCoord.y*0.5)/200.0*fragCoord.y+iTime*5.0)+1.0)*0.5;\n        fragColor = vec4(0.0, 1.0-b, b, 1.0);\n    }\n    // is the fragment left or right of the middle half-circle?\n    else if (fragCoord.x < quarterWidth || fragCoord.x > iResolution.x - quarterWidth)\n    {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    else\n    {\n        // the border of the middle circle\n        float border = sqrt(pow(quarterWidth, 2.0) - pow((fragCoord.x - halfWidth), 2.0) ) + halfHeight;\n        \n        // is fragment is within the circle?\n        if (fragCoord.y < border)\n        {\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }\n        else\n        {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}