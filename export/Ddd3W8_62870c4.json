{"ver":"0.1","info":{"id":"Ddd3W8","date":"1677201599","viewed":62,"name":"Simplest raymarching algorithm","username":"iyadahmed","description":"Simplest raymarching algorithm","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereSDF(vec3 p)\n{\n    return distance(p, vec3(0.0, 0.0, -1.)) - 1.;\n}\n\n\nfloat sceneSDF(vec3 p)\n{\n    return sphereSDF(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // https://www.shadertoy.com/view/llt3R4\n    float fieldOfView = 45.0;\n    vec2 xy = fragCoord - iResolution.xy / 2.0;\n    float z = iResolution.y / tan(radians(fieldOfView) / 2.0);\n    vec3 rayDirection = normalize(vec3(xy, -z));\n\n    vec3 rayOrigin = vec3(0., 0., 5.);\n    \n    vec3 ro = rayOrigin;\n    vec3 rd = rayDirection;\n    float depth = 0.0;\n    for (int i = 0; i < 255; i++)\n    {\n        float dist = sceneSDF(ro);\n        ro += rd * dist;\n        depth += dist;\n    }\n    \n    const float eps = 0.00001;\n    float n_px = sceneSDF(ro + vec3(eps, 0, 0));\n    float n_py = sceneSDF(ro + vec3(0, eps, 0));\n    float n_pz = sceneSDF(ro + vec3(0, 0, eps));\n    vec3 n = normalize(vec3(n_px, n_py, n_pz));\n\n    fragColor = vec4(n, 1.);\n}","name":"Image","description":"","type":"image"}]}