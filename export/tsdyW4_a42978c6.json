{"ver":"0.1","info":{"id":"tsdyW4","date":"1675867224","viewed":67,"name":"Lab4-Lighting","username":"PatFagan","description":"sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tAuthors: Patrick Fagan and Maxwell VanWalsen\n\n\tClass : GPRO-200 Section 02\n\tAssignment : Lab 4\n\tDate Assigned : September 24\n\tDue Date :  October 1\n\n\tDescription :\n\t\tThis program runs lighting on a sphere in GLSL.\n\n\tCertification of Authenticity :\n\t\tI certify that this is entirely my own work, except where I have given\n\t\tfully - documented references to the work of others.I understand the\n\t\tdefinitionand consequences of plagiarismand acknowledge that the assessor\n\t\tof this assignment may, for the purpose of assessing this assignment :\n\t\t-Reproduce this assignmentand provide a copy to another member of\n\t\tacademic staff; and/or\n\t\t-Communicate a copy of this assignment to a plagiarism checking\n\t\tservice(which may then retain a copy of this assignment on its\n\t\tdatabase for the purpose of future plagiarism checking)\n\n\tSources :\n\tRay Tracing in One Weekend. raytracing.github.io/books/RayTracingInOneWeekend.html\n\t\tAccessed 09 24. 2020.\n*/\n// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN\n\n// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)\n//    point: input 3D vector\nvec4 asPoint(in vec3 point)\n{\n    return vec4(point, 1.0);\n}\n\n// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)\n//    offset: input 3D vector\nvec4 asOffset(in vec3 offset)\n{\n    return vec4(offset, 0.0);\n}\n\n// calcViewport: calculate the viewing plane (viewport) coordinate\n//    viewport:       output viewing plane coordinate\n//    ndc:            output normalized device coordinate\n//    uv:             output screen-space coordinate\n//    aspect:         output aspect ratio of screen\n//    resolutionInv:  output reciprocal of resolution\n//    viewportHeight: input height of viewing plane\n//    fragCoord:      input coordinate of current fragment (in pixels)\n//    resolution:     input resolution of screen (in pixels)\nvoid calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,\n                  out float aspect, out vec2 resolutionInv,\n                  in float viewportHeight, in float focalLength,\n                  in vec2 fragCoord, in vec2 resolution)\n{\n    // inverse (reciprocal) resolution = 1 / resolution\n    resolutionInv = 1.0 / resolution;\n    \n    // aspect ratio = screen width / screen height\n    aspect = resolution.x * resolutionInv.y;\n\n    // uv = screen-space coordinate = [0, 1) = coord / resolution\n    uv = fragCoord * resolutionInv;\n\n    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1\n    ndc = uv * 2.0 - 1.0;\n\n    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f\n    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);\n}\n\n// calcRay: calculate the ray direction and origin for the current pixel\n//    rayDirection: output direction of ray from origin\n//    rayOrigin:    output origin point of ray\n//    viewport:     input viewing plane coordinate (use above function to calculate)\n//    focalLength:  input distance to viewing plane\nvoid calcRay(out vec4 rayDirection, out vec4 rayOrigin,\n             in vec3 eyePosition, in vec3 viewport)\n{\n    // ray origin relative to viewer is the origin\n    // w = 1 because it represents a point; can ignore when using\n    rayOrigin = asPoint(eyePosition);\n\n    // ray direction relative to origin is based on viewing plane coordinate\n    // w = 0 because it represents a direction; can ignore when using\n    rayDirection = asOffset(viewport - eyePosition);\n}\n\n// Lights structure\nstruct lights\n{\n\tvec4 center;\n    vec4 color;\n    float intensity;\n};\n// Lights constructor\nvoid lightSource(out lights point1, in vec3 center, in vec4 color, in float intensity)\n{\n\tpoint1.center = asPoint(center);\n    point1.color = color;\n    point1.intensity = intensity;\n}    \n\n// Sphere structure\nstruct sSphere\n{\n\tvec4 center;\n    float radius;\n};\n// Sphere constructor\nvoid inItSphere(out sSphere sphere, in vec3 center, in float radius)\n{\n\tsphere.center = asPoint(center);\n    sphere.radius = radius;\n}\n\nfloat lenSq(vec2 x)\n{\n\treturn dot(x, x);\n}\n\nvoid lightCalc(in sSphere sphere, in lights point1, in vec3 normal, in vec4 rayOrigin, out vec4 finCol, in vec4 lightCol) {\n    float difInt;\n    float difCoe;\n    float attInt;\n    \n    float sphere_light_distance = distance(point1.center, rayOrigin);\n\n    vec3 lightClr = (point1.center.xyz - sphere.center.xyz) / sphere_light_distance;\n\n    difCoe = max(0.0,dot(normal, lightClr));\n\n    float distanceOverIntensity = (sphere_light_distance / point1.intensity);\n\n    attInt = 1.0/(1.0 + distanceOverIntensity * distanceOverIntensity);\n\n    difInt = difCoe * attInt;\n\n    vec4 sphereCol = vec4(normal, 1.0);\n\n    finCol = difInt * sphereCol * point1.color;\n\n    // Phong Reflectance\n    vec3 viewVector = (point1.center.xyz - sphere.center.xyz) / sphere.radius; \n    vec3 reflLightVector = viewVector-2.0*dot(normal, viewVector)*normal; // reflect(-viewVector, normal); \n    //float k = max(0.0, dot(viewVector, reflLightVector));\n    // Blinn-Phong\n    float kPrime = dot(normal, normalize(viewVector + lightClr)); // calculating k'\n    // creating the alpha' exponent\n    float alphaPrime = kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*\n        kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime*kPrime;\n    float modIntensity = 4.0*alphaPrime * kPrime; // calculating the modified blinn-phong intensity\n\t// Final Color Equation\n    float ambInt = 10.0f; // ambient color intensity\n    vec4 ambCol = vec4(0.5, 0.5, 0.5, 1.0); // ambient color of the scene (filter)\n    vec4 difCol = vec4(0.5, 0.5, 0.5, 1.0); // color of the sphere\n    vec4 specCol = vec4(0.5, 0.5, 0.5, 1.0); // specular reflection color of surface\n    finCol = difInt * sphereCol + (difInt*difCol + modIntensity*specCol)*lightCol; // final phong color  \n    //return finCol;\n}\n\n// calcColor: calculate the color of a pixel given a ray\n//    rayDirection: input ray direction\n//    rayOrigin:    input ray origin\nvec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)\n{\n    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS\n    //  -> what does the ray look like as color?\n    //return rayDirection;\n    \n    //SCENE\n    sSphere sphere;\n    inItSphere(sphere, vec3(0.0, 0.0, -4.0),0.5);\n    \n    vec3 dp;\n    dp.xy = rayDirection.xy - sphere.center.xy;\n    float lSq = lenSq(dp.xy),\n    rSq = sphere.radius * sphere.radius;\n    \n    if (lSq <= rSq)\n    {\n        dp.z = rSq - lSq;\n        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));\n        vec3 normal = (position - sphere.center.xyz) / sphere.radius; //normalize(position - sphere.center.xyz);\n        \n        // Create light objects\n        lights point1;\n        lightSource(point1, vec3(1.5*cos(iTime), 1.5, -0.5), vec4(1.0, 1.0, 0.0, 1.0), 3.0);\n        lights point2;\n        lightSource(point2, vec3(8.5*sin(iTime), -8.5, -0.5), vec4(0.0, 1.0, 0.3, 1.0), 1.0);\n        lights point3;\n        lightSource(point3, vec3(-4.5*cos(iTime), -2.5, -0.5), vec4(1.0, 0.0, 0.0, 0.0), 1.0);\n        \n        vec4 finCol;\n        vec4 finCol2;\n        vec4 finCol3;\n        vec4 lightCol = vec4(1.0, 0.0, 0.0, 1.0); // color of light\n        lightCalc(sphere, point1, normal, rayOrigin, finCol, lightCol);\n        lightCol = vec4(1.0, 1.0, 0.0, 1.0);\n        lightCalc(sphere, point2, normal, rayOrigin, finCol2, lightCol);\n        lightCol = vec4(1.0, 1.0, 1.0, 1.0);\n        lightCalc(sphere, point3, normal, rayOrigin, finCol3, lightCol);\n        \n        return finCol + finCol2 + finCol3;\n    }\n\t\n\t// BACKGROUND\n\tconst vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);\n\treturn vec4(mix(warm, cool, rayDirection.y), 1.0);\n    return vec4(0.5);\n}\n\n// mainImage: process the current pixel (exactly one call per pixel)\n//    fragColor: output final color for current pixel\n//    fragCoord: input location of current pixel in image (in pixels)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // viewing plane (viewport) info\n    vec3 viewport;\n    vec2 ndc, uv, resolutionInv;\n    float aspect;\n    const float viewportHeight = 2.0, focalLength = 1.0;\n\n    // ray\n    vec4 rayDirection, rayOrigin;\n\n    // setup\n    fragColor = vec4(0.0);\n    \n    calcViewport(viewport, ndc, uv, aspect, resolutionInv,\n    \t             viewportHeight, focalLength,\n    \t             fragCoord, iResolution.xy);\n    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);\n    \n    fragColor += calcColor(rayDirection, rayOrigin);\n}\n","name":"Image","description":"","type":"image"}]}