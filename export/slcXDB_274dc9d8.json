{"ver":"0.1","info":{"id":"slcXDB","date":"1639686910","viewed":137,"name":"breaking Tiling","username":"stduhpf","description":"simple way to break the grid effect when tiling an organic texture, with anisotropic filtering support","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["filtering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\nvec4 noRepeat(vec2 uv)\n{\n    vec2 en = floor(uv);\n    vec2 lo = fract(uv);\n    \n    vec2 ddx = dFdx(uv);\n    vec2 ddy = dFdy(uv);\n    \n    vec4 o = vec4(0);\n    float W = 0.;\n    for(float x = -1.;x<2.;x++){\n    for(float y = -1.;y<2.;y++){\n        vec2 disp = vec2(x,y);\n        vec2 p = en+disp;\n        \n        vec4 noise = hash42(p);\n        //noise*=.5+.5*sin(iTime);\n        \n        float a = noise.x * 2.*acos(-1.);\n        \n        \n        float c = cos(a),s = sin(a);\n        mat2 r = mat2(c,s,-s,c);\n        \n        vec2 local = (lo-disp-.5)*r + noise.yz+.5;\n        \n        vec2 dist = lo-disp -.5;\n        dist*=dist;\n        dist*=dist;\n        \n        float w = (noise.w*10.+1.)/(dot(dist,dist)+.001);\n        \n        vec2 dx = ddx*r;\n        vec2 dy = ddy*r;\n\n        vec4 sam = textureGrad(iChannel0,local,dx,dy);\n        //sam = noise;\n        o += w*sam;\n        W+=w;\n    }\n    }\n    return o/W;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // plane projection\n    uv.x-=.5;\n    uv/=(1.2-uv.y);\n    uv*=10.;\n    uv.x+=.5;\n    \n    // Output to screen\n    fragColor = noRepeat(uv);\n}","name":"Image","description":"","type":"image"}]}