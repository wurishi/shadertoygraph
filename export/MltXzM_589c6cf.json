{"ver":"0.1","info":{"id":"MltXzM","date":"1478817015","viewed":617,"name":"#codevember - 10","username":"jcksmssng","description":"Going back to 2d to try some rotation matrices + pattern\nFollowing the awesome book of shaders lesson by Patricio Gonzalez Vivo\nhttps://thebookofshaders.com/09/","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["matrix","fract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d( float angle )\n{\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nfloat map(float value, float oldMin, float oldMax, float newMin, float newMax) \n{\n    return newMin + (newMax - newMin) * (value - oldMin) / (oldMax - oldMin);\n}\n\nfloat circle ( vec2 point, float radius ) \n{\n    //vec2 origin = vec2( sin( iTime ), .0 );\n   \tvec2 origin = vec2( .0, .0 );\n    return length(point - origin) - radius;\n}\n\nfloat colorize( float dist, vec2 point )\n{\n    float m = map(point.x, -1., 1., 0., .7);\n    return dist < 0.0 ? 1.0 - m : m;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n\tvec2 uv = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n    uv.x += sin( iTime );\n    uv *= sin( iTime ) * 3. + sin( 2. * iTime ) / 4.;\n    uv *= rotate2d( sin ( iTime ));\n    uv = 2. * sin( iTime ) * fract( uv );\n    uv *= rotate2d( iTime );\n    \n    float radius = 0.5 * cos( iTime );\n    float c = circle( uv, radius ); \n    \n    float b = colorize( c, uv );\n\tvec3 color = vec3( .18, .18, b );\n\n    fragColor = vec4( color, 1.0 );\n}","name":"Image","description":"","type":"image"}]}