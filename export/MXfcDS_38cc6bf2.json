{"ver":"0.1","info":{"id":"MXfcDS","date":"1726611474","viewed":23,"name":"StarField Variant","username":"pqy","description":"from tutorial: https://www.youtube.com/watch?v=rvDo9LvfoVE","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["starfield"],"hasliked":0,"parentid":"X3XyDB","parentname":"Single star from tutorial"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 6.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n\n}\n\nfloat Star(vec2 uv, float flare) {\n    float d = length(uv);\n    \n    float m = 0.06/d; // the middle cirle of the star\n    \n    float rays = max(0.,1.-abs(uv.x * uv.y*888.));\n    m += rays * flare;\n    uv *= Rot(3.1415/4.);\n    rays = max(0.,1.-abs(uv.x * uv.y*888.));\n    m += rays * .3 * flare;\n    \n    m *= smoothstep(.8, .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x * p.y);\n}\n\nvec3 StarLayer(vec2 uv) {\n    vec3 col = vec3(0);\n    \n    vec2 gv = fract(uv)-0.5; // fractional component\n    vec2 id = floor(uv); // integer component\n    \n    for(int y=-1; y<=1; y++) {\n        for(int x=-1; x<=1; x++) {\n            vec2 offs = vec2(x,y); //add contribution of all negighboring stars\n            \n            float n = Hash21(id+offs); //random btw 0 and 1 for each grid \n            float size = fract(n*456.78)*1.2;\n            float flare = smoothstep(.3, .9, size);//for ray only\n            flare *= abs(sin(iTime*2.)); \n            float star = Star(gv-offs-vec2(n,fract(n*68.))+.5, flare);\n            vec3 tint1 = vec3(0.6+size*0.35,.9,.9);\n            vec3 tint2 = vec3(0.7+size*0.25,.75,.75);\n            vec3 color = mix(tint1, tint2,abs(cos(iTime))+n);\n            color *= fract(n*1234.5);\n            \n            star *= sin(iTime*3.+n*6.2821)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy - iResolution.xy*.5)/iResolution.y;\n    \n    //uv *= .5;\n    // uv.x -= 0.2 * iTime;\n    float t = iTime*.05;\n    \n    // uv += M;\n    uv *= Rot(t);\n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n        float depth = fract(i+t);\n        float scale = mix(20.,.5,depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col += StarLayer(uv*scale+i*456.45-M)*fade;\n        \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}