{"ver":"0.1","info":{"id":"DlccDf","date":"1702174106","viewed":19,"name":"Gran palo","username":"Buchibuchi","description":"Es un gran palo girando","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["palo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Función para rotar un punto en 2D\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\n// Función para calcular la distancia firmada a un segmento de línea\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b ) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba) / dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba * h );\n}\n\n// Función principal para definir el color de cada píxel\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Transforma las coordenadas del fragmento\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Calcula la rotación basada en el tiempo\n    float angle = iTime;\n    mat2 rot = rotate2d(angle);\n\n    // Define los puntos rotados del segmento\n    vec2 a = rot * vec2(-0.5, -0.5);\n    vec2 b = rot * vec2(0.5, 0.5);\n\n    // Calcula la distancia al segmento rotado\n    float d = sdSegment(uv, a, b);\n\n    // Utiliza un umbral para determinar el color (blanco o negro)\n    d = step(0.05, d);\n    fragColor = vec4(sqrt(d));\n}\n\n","name":"Image","description":"","type":"image"}]}