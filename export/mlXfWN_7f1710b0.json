{"ver":"0.1","info":{"id":"mlXfWN","date":"1692929063","viewed":46,"name":"Lattice Gas Automaton","username":"joyal","description":"A basic simulation of a gas using a cellular automaton. See https://en.wikipedia.org/wiki/Lattice_gas_automaton","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["simulation","pattern","cellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uint countbits(uint n) {\n    return (n & 1u) + ((n & 2u) >> 1) + ((n & 4u) >> 2) + ((n & 8u) >> 3);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    uint u = uint(texture(iChannel0, fragCoord / iResolution.xy).x * 16.0);\n    float v = 1.0 - float(countbits(u)) / 4.0;\n    fragColor = vec4(v, v, v, 1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const uint N = 16u;\n\nuint hash(uint x) {\n    x = ((x >> 16) ^ x) * 0x45d9f3bu;\n    x = ((x >> 16) ^ x) * 0x45d9f3bu;\n    x = (x >> 16) ^ x;\n    return x;\n}\n\nuint hash(uint x, uint y) {\n    return hash(hash(x) ^ y);\n}\n\nvec2 norm(uvec2 n) {\n    return vec2(n) / 4294967295.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    uint seed = uint(iDate.w + iDate.x);\n    uint x = hash(uint(fragCoord.x) ^ seed, uint(fragCoord.y) ^ seed);\n    \n    float c = 0.0;\n    \n    for (uint i = 0u; i < N; ++i) {\n        seed = hash(seed);\n        vec2 d = fragCoord - norm(uvec2(seed, hash(seed + 1u))) * iResolution.xy;\n        float r = min(iResolution.x, iResolution.y) * 0.25 * norm(uvec2(seed, hash(seed + 2u))).y;\n        if (d.x*d.x + d.y*d.y < r*r) {\n            c = float(x & 0xFu) / 16.0;\n            break;\n        }\n    }\n\n    fragColor = vec4(c, c, c, 1);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const vec2 i = vec2(1, 0);\nconst vec2 j = vec2(0, 1);\n\nconst uint UP =    8u;\nconst uint DOWN =  4u;\nconst uint LEFT =  2u;\nconst uint RIGHT = 1u;\n\nuint inv(uint d) {\n    return ((d & 10u) >> 1u) | ((d & 5u) << 1u);\n}\n\nuint op(uint d) {\n    return (~d ^ inv(d)) & 0xFu;\n}\n\nbool has(vec2 coords, uint d) {\n    uint state = uint(texture(iChannel1, coords / iResolution.xy).x * 16.0);\n    return ((state & d) != 0u && state != (~op(d) & 0xFu)) || state == op(d);\n}\n\nvec4 get_next_state(vec2 coords) {\n    uint state = 0u;\n    \n    if (coords.x < 1.5) {\n        if (has(coords, LEFT))     state |= RIGHT;\n        if (has(coords + i, LEFT)) state |= LEFT;\n    }\n    else if (coords.x > iResolution.x - 1.5) {\n        if (has(coords, RIGHT))     state |= LEFT;\n        if (has(coords - i, RIGHT)) state |= RIGHT;\n    }\n    else if (coords.y > iResolution.y - 1.5) {\n        if (has(coords, UP))     state |= DOWN;\n        if (has(coords - j, UP)) state |= UP;\n    }\n    else if (coords.y < 1.5) {\n        if (has(coords, DOWN))     state |= UP;\n        if (has(coords + j, DOWN)) state |= DOWN;\n    }\n    else {\n        if (has(coords + i, LEFT))  state |= LEFT;\n        if (has(coords - i, RIGHT)) state |= RIGHT;\n        if (has(coords - j, UP))    state |= UP;\n        if (has(coords + j, DOWN))  state |= DOWN;\n    }\n    \n    float n = float(state) / 16.0;\n    return vec4(n, n, n, 1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 0) {\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n        return;\n    }\n    \n    fragColor = get_next_state(fragCoord);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}