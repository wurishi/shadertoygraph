{"ver":"0.1","info":{"id":"lcf3RX","date":"1708037593","viewed":49,"name":"ray marching expanded","username":"mw_frac","description":"Test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette ( float t )\n{\n    vec3 a = vec3(0.718, 0.500, 0.500);\n    vec3 b = vec3(-0.752, 0.500, 0.500);\n    vec3 c = vec3(3.138, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n    \n    return a + b*cos(6.28318*(c*t*d));\n}\n\n\nfloat opUnion(float d1, float d2){\n    return min(d1, d2);\n}\n\nfloat opSubtraction(float d1, float d2){\n    return max(-d1, d2);\n}\n\nfloat opIntersection(float d1, float d2){\n    return max(d1, d2);\n}\n\nfloat opSmoothUnion (float d1, float d2, float k){\n    float h = clamp( .5 + .5 * (d2-d1)/k, 0.0, 1.0);\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdOctahedron(vec3 p, float s){\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\n\nmat2 rot2D(float angle){\n// drop an axis to rotate \n// to rotate around aa coords, p.xz *= rot2D(angle) (drop y) to rotate around y\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvec3 rot3D_(vec3 p, vec3 axis, float angle){\n    // Rodrigues rotation formula\n    // Lets you rotate around arbitrary vectors\n    return mix(dot(axis, p) * axis, p, cos(angle))\n        + cross(axis, p) * sin(angle);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)), 0.0);\n}\n\nfloat getOcot(vec3 p){\n    p.z += iTime * .4;\n    \n    p.xy = (fract(p.xy) - .5);   // spacing 1\n    p.z = mod(p.z, .25) - .125;   // spacing .25\n    \n    \n    //float box = sdBox(p * 2., vec3(.75)) / 2.;  // can multiply by a diff vector to scale non uniformkly\n    float o = sdOctahedron(p, .15);\n    \n    return o;\n\n}\n\n\nfloat map(vec3 p) {\n    float octo = getOcot(p);\n    return octo;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    \n    \n    // Initializatino \n    vec3 ro = vec3(0,0,-3); // Ray Origin\n    float FOV = 1.;\n    vec3 rd = normalize(vec3(uv * FOV, 1)); // Ray Direction\n    vec3 col = vec3(0);\n\n    \n    float t = 0.; // Total Distance Travelled\n    \n    // Vertical Camera Rotation\n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n    \n    // horizontal camera rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    // Raymarching\n    int i;\n    for (i = 0; i < 80; i++){\n        vec3 p = ro + rd * t;          // Position Along Ray\n        \n        p.xy *= rot2D(t*.1);\n        //\n        p.y += sin(t)*.25;\n        p.y -= cos(t-.5)*.25;\n        \n        //p.z += p.z * .1;\n    \n        float d = map(p);              // Current Distance to Scene\n    \n        t += d;                        // \"March\"\n        \n        if (d < .001 || t > 50.) break; // Early out if close enough or too far\n        \n        \n    }\n    \n    //Coloring\n    //col = vec3(float(i) / 80.);\n    col = palette(t * .04 + float(i) * .01);\n    //col = palette(t * 1.04);\n\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}