{"ver":"0.1","info":{"id":"WsSyzd","date":"1587654518","viewed":70,"name":"Chip Mandelbrot","username":"chipbell4","description":"Rendering the mandelbrot set","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int N = 300;\nconst float EPSILON = 0.001;\n\n\n#define p(x) (max(0.0, 4.0 * (x) * (1.0 - (x))))\n\nvec3 color(float t) {\n    float r = p(t * 2.0);\n    float g = p(t * 2.0 - 0.5);\n    float b = p(t * 2.0 - 1.0);\n    \n    return vec3(r, g, b);\n}\n\nvec2 complex_exponent(vec2 c1, float f) {\n    float r = length(c1);\n    float phi = atan(c1.y, c1.x);\n    \n    float r_exponent = pow(r, f);\n\n    return vec2(r_exponent * cos(f * phi), r_exponent * sin(f * phi));\n}\n\nvec2 mult_complex(vec2 c1, vec2 c2) {\n    return vec2(c1.x * c2.x - c1.y * c2.y, c1.x * c2.y + c1.y * c2.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord -.5* iResolution.xy) / iResolution.y;\n    \n    // our uv coordinates, transformed to make the shape fit the window more nicely\n    vec2 c = 3. * uv;\n    \n    // our exponent for composed function. 2.0 is a mandelbrot set, but many exponents look good!\n    float min_exponent = 2.0;\n    float max_exponent = 10.0;\n    float exponent = (min_exponent + max_exponent) * 0.5 + (max_exponent - min_exponent) * 0.5 * sin(iTime * 1.0);\n    \n    vec2 z = vec2(0., 0.);\n    vec2 f = z;\n    for (int i = 0; i < N; i++) {\n        f = complex_exponent(f, exponent) + c;\n    }\n    \n    float d = distance(f, z);\n    \n  \tfloat intensity = (1.0 - d) * (1.0 - d);\n    \n    fragColor = vec4(color(intensity), 1.0);\n}","name":"Image","description":"","type":"image"}]}