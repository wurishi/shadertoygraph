{"ver":"0.1","info":{"id":"3tXGz4","date":"1555697943","viewed":140,"name":"Maldelbrot - Julia Map","username":"GMWolf","description":"Click on a region of the mandelbrot set to view the corresponding julia set.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int MAX_ITER = 250;\nint samples = 2;\n\nint julia(vec2 pos, vec2 c) {\n    for(int i = 0; i < MAX_ITER; i++) {\n        vec2 pos2 = pos*pos;\n        pos = vec2(pos2.x - pos2.y,\n       \t\t\t   2.0 * pos.x * pos.y);\n        pos += c;\n        if (dot(pos, pos) > 4.0) {\n         return i;   \n        }\n    }\n    return MAX_ITER;\n}\n\nint mandelbrot(vec2 pos) {\n return julia(vec2(0,0), pos);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float d = 1.0 / float(samples);\n    \n    float value = 0.0;\n    for(int i = 0; i < samples; i++)\n    for(int j = 0; j < samples; j++)\n    {\n        vec2 spo = (vec2(i,j) + vec2(0.5, 0.5)) * d;\n    \tvec2 p = ((fragCoord + spo) * 2.0 - iResolution.xy) / iResolution.y;\n        vec2 mp = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \t\n        if (iMouse.z > 0.0) {\n    \t\tvalue += float(julia(p, mp))/ float(MAX_ITER);\n        } else {\n         \tvalue += float(mandelbrot(p)) / float(MAX_ITER);   \n        }\n    }\n    \n    value /= float(samples * samples);\n    \n    fragColor = vec4(vec3(value),1.0);\n}","name":"Image","description":"","type":"image"}]}