{"ver":"0.1","info":{"id":"dlyfDt","date":"1702970416","viewed":29,"name":"Free Form Moving Dither","username":"ErgunAkleman","description":"Gray Level dither","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float pi=3.14;\n    float size = 1.0;\n    vec2 pos = fragCoord - floor(fragCoord / size) * size;\n    vec3 col = vec3(0.0,0.0,0.0);\n    vec4 img = texture(iChannel0, uv);\n    //float comp = /64.0\n    \n    \n    // grayscale = 0.299 ∙ Red + 0.587 ∙ Green + 0.114 ∙ Blue\n    float grays = 0.299 * img.x + 0.587 * img.y + 0.114 * img.z;\n     //grays=0.5*(grays+(fragCoord.x)/(iResolution.x));\n     grays=(fragCoord.x)/(iResolution.x);\n    \n    float periodT,periodT0,periodT1;\n    float numDis = 1.00;\n    float width = 30.0;\n    periodT= width*(1.0 - floor(grays*numDis)/numDis);\n    //periodT=10.00;\n    periodT0=1.0*periodT;\n    periodT1=1.0*periodT;\n    \n    float func0,func1,func;\n    float theta=20.0*iTime;\n    vec2 po = vec2(0, 0);\n    vec2 dir0 = vec2(cos(pi*theta/180.+pi/2.0), sin(pi*theta/180.+pi/2.0));\n    //theta=15.;\n    vec2 dir1 = vec2(cos(pi*theta/180.), sin(pi*theta/180.));\n    func0 = dot((fragCoord-po), dir0)+30.0*iTime;\n    func1 = dot((fragCoord-po), dir1);\n    \n    // func = func / periodT\n    func0 = func0 / periodT0;\n    func0 = abs(func0 - floor(func0+0.5));\n    \n    func1 = func1 / periodT1;\n    func1 = abs(func1 - floor(func1+0.5));\n    \n    //func= func0 + func1; //Rhombus: L1 norm\n    func= sqrt(func0*func0 + func1*func1); //Circular: L2 Norm\n    //func= func0; //Lines\n    \n    //func = sin(func);\n    \n   \n   //col = vec3(0.1,0.2,0.3);\n  \n    float r=0.10; //Amount of noise for antialising \n    col = vec3(ceil(grays - 2.0*func + r*(random (fragCoord)-0.5)));\n    //col = vec3(grays);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);//vec4(col,1.0); img;\n}","name":"Image","description":"","type":"image"}]}