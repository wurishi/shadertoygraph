{"ver":"0.1","info":{"id":"XcS3RD","date":"1703863572","viewed":43,"name":"Image Convolution","username":"afmika","description":"Simple image convolution shader with 3x3 kernels","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","imageprocessing","convolution","kernel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define IMAGE_BUFFER iChannel0\n\n// Inspired from GLSL example at\n// https://en.wikipedia.org/wiki/Kernel_(image_processing)\n#define identity mat3(0, 0, 0, 0, 1, 0, 0, 0, 0)\n#define edge0 mat3(1, 0, -1, 0, 0, 0, -1, 0, 1)\n#define edge1 mat3(0, 1, 0, 1, -4, 1, 0, 1, 0)\n#define edge2 mat3(-1, -1, -1, -1, 8, -1, -1, -1, -1)\n#define sharpen mat3(0, -1, 0, -1, 5, -1, 0, -1, 0)\n#define box_blur mat3(1, 1, 1, 1, 1, 1, 1, 1, 1) * 0.1111\n#define gaussian_blur mat3(1, 2, 1, 2, 4, 2, 1, 2, 1) * 0.0625\n#define emboss mat3(-2, -1, 0, -1, 1, 1, 0, 1, 2)\n\n\nvec4 image(vec2 uv) {\n    return texture(IMAGE_BUFFER, uv);\n}\n\nvec4 convolute(vec2 uv, mat3 kernel) {\n    vec4 color = vec4(0);\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            // normalized coordinates\n            vec2 offset = vec2(i, j) / iResolution.xy;\n            color += kernel[i + 1][j + 1] * image(uv + offset);\n        }\n    }\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // normalized coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    const int n = 8;\n    const float n_f = float(n);\n    mat3 kernels[n] = mat3[n] (\n        identity,\n        edge0,\n        edge1,\n        edge2,\n        sharpen,\n        box_blur,\n        gaussian_blur,\n        emboss\n    );\n    \n    mat3 kernel = kernels[int(floor(n_f * uv.x))];\n\n    fragColor = convolute(uv, kernel);\n}","name":"Image","description":"","type":"image"}]}