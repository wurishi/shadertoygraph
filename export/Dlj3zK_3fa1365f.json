{"ver":"0.1","info":{"id":"Dlj3zK","date":"1673547004","viewed":91,"name":"Mandelbrot set with TAA","username":"Cesium_137","description":"Mandelbrot set with TAA. Q and E to zoom in and out, arrow keys to move","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["antialiasing","antialias","webcam","taa"],"hasliked":0,"parentid":"dtSGzV","parentname":"TAA Video"},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pos = 0.0;\n    if (iMouse.xy != vec2(0)) pos = iMouse.x / iResolution.x;\n    \n    vec2 pixel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 cam = texture(iChannel0, uv + (diskPt(hash21(iTime)) / iResolution.xy / 2.0));\n    fragColor = mix(vec4(0.),cam, factor);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float factor = 0.3;\n\nvec2 diskPt(vec2 p) {\n    return sqrt(p.x) * vec2(sin(6.2832 * p.y), cos(6.2832 * p.y));\n}\n\nvec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float getZoom(){\n    if(texelFetch(iChannel0, ivec2(2, 0), 0).r > -1.0){\n        return texelFetch(iChannel0, ivec2(2, 0), 0).r;\n    }\n    else{\n        return -0.5;\n    }\n}\nconst int KEY_A = 65;\nconst int KEY_W = 87;\nconst int KEY_D = 68;\nconst int KEY_S = 83;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\nconst int KEY_Q = 81;\nconst int KEY_E = 69;\nconst int KEY_R = 82;\nconst float speed = 350.0;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float zoom=0.25*pow(1.03,getZoom());\n    float outData=0.0;\n    switch(int(fragCoord.x)) {\n        case 0:\n        \toutData = texelFetch(iChannel0, ivec2(0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_D, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_A, 0), 0).r;\n        \tbreak;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \tbreak;\n        case 2:\n            if(texelFetch(iChannel0, ivec2(2,0),0).r > -1.0){\n                outData = texelFetch(iChannel0,ivec2(2, 0), 0).r +\n                iTimeDelta * speed * 0.125 * texelFetch(iChannel1, ivec2(KEY_E, 0), 0).r -\n                iTimeDelta * speed * 0.125 * texelFetch(iChannel1, ivec2(KEY_Q, 0), 0).r;\n            }\n            else{\n                outData = 0.0;\n            }\n            break;\n    }\n    fragColor = vec4(outData,0.0,0.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const int MAX_ITERATIONS = 512;\nvec2 getCoord() {\n    return vec2(texelFetch(iChannel0,ivec2(0, 0), 0).r,texelFetch(iChannel0,ivec2(1,0),0).r);\n}\nfloat getZoom() {\n    if(texelFetch(iChannel0, ivec2(2, 0), 0).r > -1.0){\n        return texelFetch(iChannel0,ivec2(2,0),0).r;\n    }\n    else {\n        return -0.5;\n    }\n}\nint getzoomthingy() {\n    return int(texelFetch(iChannel0, ivec2(3, 0), 0).r);\n}\nvec2 coord;\nint fractal(vec2 c, vec2 z) {\n  for (int iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n\n    float real = z.x * z.x - z.y * z.y + c.x;\n    float imaginary = 2.0 * z.x * z.y + c.y;\n\n    z.x = real;\n    z.y = imaginary;\n\n    if (length(z) > 2.0) {\n      return iteration;\n    }\n  }\n\n  return 0;\n}\n\nint mandelbrot(vec2 frag) {\n  vec2 c = frag;\n  vec2 z = vec2(0);\n\n  return fractal(c, z);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    float zoom = pow(1.03, getZoom()) / 4.;\n    vec2 R = iResolution.xy,\n        coordRatio = (fragCoord - .5 * R) / R.y / zoom;\n    vec2 z = vec2(0.0, 0.0);\n    vec2 c = coordRatio + getCoord() / R.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float color = (15.0 * float(mandelbrot(c))) / float(mandelbrot(c)+256);\n    fragColor = vec4(color, color, color, 1.0);    \n}","name":"Buffer C","description":"","type":"buffer"}]}