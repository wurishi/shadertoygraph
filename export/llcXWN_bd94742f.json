{"ver":"0.1","info":{"id":"llcXWN","date":"1479564674","viewed":269,"name":"2D Mandelbox implosion","username":"stduhpf","description":"Variation of the scaling factor of the 2D mandelbox.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbox","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 I)\n{\n    vec2 R= iResolution.xy;\n\tI = 7.*(I+I -R)/R.x;\n    O=vec4(I,-5.*cos(iTime*.1),1.);//scaling  factor\n    float d=1.;\n    for(int i=0;i<20;i++){ //this mandelbox loop should also work in 3D(with a proper DE (initialize d at O.z,remove the +1.,and the factor 5 at the end)\n        I=clamp(I,-1.,1.)*2.-I;//boxfold\n        float b = (O.a=length(I))<.5?4.:O.a<1.?1./O.a:1.;//ballfold\n        I=O.z*I*b+O.xy; //scaling\n        d=b*d*abs(O.z)+1.;//bound distance estimation\n         }\n    d=pow(length(I)/d,.1)*5.;\n    O=.5+.5*vec4(cos(d),sin(10.*d+1.),cos(3.*d+1.),0);\n}","name":"Image","description":"","type":"image"}]}