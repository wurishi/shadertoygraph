{"ver":"0.1","info":{"id":"WddSRs","date":"1572642079","viewed":108,"name":"Checkerboard of Textures","username":"matthew_e","description":"This shader should create a checkerboard pattern where one texture \"sees through\" the other. The squares should also cut off evenly along the edge of the screen and the number of tiles is modifiable. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 numTiles = vec2(4.0,4.0); //the vec2 for the number of Tiles\nvec4 image1; //vec4 for showing the textures\nvec4 image2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float divideNum = 2.0;\n    float modValue;\n    vec4 layer1; //different values for the function\n    float t;\n    \n    image1 = texture(iChannel0,uv);\n    image2 = texture(iChannel1,uv);\n  \n    uv = fract(uv * numTiles);\n    vec2 numForMod = numTiles * uv;\n    modValue = floor(numForMod.x) + floor(numForMod.y); \n    modValue = mod(modValue,divideNum); //mod value for coming if statements\n   \n    if(modValue == 1.0) //this should allow one texture to see through the other\n    {\n      \tt = 1.0; \n    }\n    else if(modValue == 0.0)\n    {\n\t\tt = 0.0;\n    }\n    \n    layer1 = (1.0 - t) * image1 + t * image2; //mix the images together for output\n\n    // Output to screen\n    fragColor = vec4(layer1);\n}","name":"Image","description":"","type":"image"}]}