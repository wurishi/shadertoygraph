{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Reference\n// https://www.shadertoy.com/view/MdBGRm\n// https://www.shadertoy.com/view/4dX3zl\n\nfloat sdSphere(in vec3 p, in float d )\n{\n    return length( p ) - d; \n} \n\nfloat sdTorus( in vec3 p, in vec2 t )\n{\n  vec2 q = vec2( length( p.xz ) - t.x, p.y );\n  return length( q ) - t.y;\n}\n\nfloat map( in vec3 p )\n{\n    return min(sdSphere( p, 1.0 ), sdTorus( p, vec2( 1.5, 0.2 ) ));\n}\n\nvec2 rotate( in vec2 p, in float t )\n{\n\treturn p * cos( -t ) + vec2( p.y, -p.x ) * sin( -t );\n}   \n\nvec3 rotate( in vec3 p, in vec3 t )\n{\n    p.yz = rotate( p.yz, t.x );\n    p.zx = rotate( p.zx, t.y );\n\tp.xy = rotate( p.xy, t.z );\n    return p;\n}\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = ( 2.0 * fragCoord.xy - iResolution.xy ) / iResolution.y;\n    vec3 rd =normalize( vec3( p, -1.8 ) );\n\tvec3 ro = vec3( 0.0, 0.0, 3.0 );\n    vec3 rot = vec3( 0.5, iTime * 0.3, iTime * 0.2 );\n\tro = rotate( ro, rot );\n\trd = rotate( rd, rot );       \n    float s = 10.0;\n    ro *= s;\n  \tvec3 grid = floor( ro );\n\tvec3 grid_step = sign( rd );\n\tvec3 delta = ( -fract( ro ) + 0.5 * ( grid_step + 1.0 ) ) / rd;    \n\tvec3 delta_step =  1.0 / abs( rd );\n\tvec3 mask = vec3( 0.0 );\n    vec3 pos;\n    bool hit = false;\n\tfor ( int i = 0; i < 96; i++ )\n    {\n        pos = ( grid + 0.5 ) / s;\n\t\tif ( map( pos ) < 0.0 ) \n       \t{\n           \thit = true;\n           \tbreak;\n        }\n\t\tvec3 c = step( delta, delta.yzx );\n\t\tmask = c * ( 1.0 - c.zxy );\n\t\tgrid += grid_step * mask;\t\t\n\t\tdelta += delta_step * mask;\n\t}\n    vec3 col = vec3( 0.4 + 0.15 * p.y );\n    if ( hit )\n    {\n        col = hsv( 0.2 * length( pos ) + 0.03 * iTime, 0.6, 1.0 );        \n\t    float br = dot( vec3( 0.5, 0.9, 0.7 ), mask );\n        float depth = dot( delta - delta_step, mask );\n \t\tfloat fog = min( 1.0, 300.0 / depth / depth );       \n        vec3 uvw = fract( ro + rd * depth );\n        vec2 uv = vec2( dot( uvw.yzx, mask ), dot( uvw.zxy, mask ) );\n        uv = abs( uv - vec2( 0.5 ) );\n        float gr = 1.0 - 0.1 * smoothstep( 0.4, 0.5, max( uv.x, uv.y ) );\n        col *= br * fog * gr;\n               \n    }\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldjXz1","date":"1409240300","viewed":1012,"name":"Voxel Saturn","username":"gaz","description":"voxel","likes":47,"published":1,"flags":0,"usePreview":0,"tags":["distancefunction","voxel"],"hasliked":0,"parentid":"","parentname":""}}