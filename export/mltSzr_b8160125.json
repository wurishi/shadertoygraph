{"ver":"0.1","info":{"id":"mltSzr","date":"1684985198","viewed":71,"name":"Field flow","username":"ChunderFPV","description":"the usual stuff","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["grid","flow","field","transform","magnetic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RT(a) mat2(cos(m.a*1.5708+vec4(0,-1.5708,1.5708,0)))\n#define P(u) .4*min(4., 1./length((fract(u-vec2(t*round(u.y/2.), t)+.5)-.5)/fwidth(u)/1.5))/max(1., abs(u.y))\n#define H(a) (cos(radians(vec3(0, 60, 120))-((a)*6.2832))*.5+.5)\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    float t = -iTime/10.,\n          fov = .75, // field of view\n          aa = 2.;   // anti-aliasing (1 = off)\n    vec2 R = iResolution.xy,\n         m = (iMouse.xy/R*4.)-2.;\n    vec3 c = vec3(0);\n    if (iMouse.z < 1.) m = vec2(0);\n    mat2 pitch = RT(y), \n         yaw   = RT(x);\n    for (int k = 0; k < int(aa*aa); k++) // aa loop\n    {\n        vec2 o = vec2(k%2, k/2)/aa; // aa offset\n        vec3 u = normalize(vec3((U-.5*R+o)/R.y, fov))*5.;\n        u.yz *= pitch;\n        u.xz *= yaw;\n        u = (u*u+u.yzx*u.yzx-sin(t*2.))/u;\n        u /= u.yzx;\n        u = max(abs(u), 1./abs(u)); // reflect\n        c += P(u.yx) + P(u.zx); // points\n        c += P(u.xy) + P(u.zy);\n        c += P(u.yz) + P(u.xz);\n    }\n    c /= aa*aa; // fix brightness\n    c = H(c+t)*c+c*c; // color\n    C = vec4(c*c+2.*c, 1);\n}","name":"Image","description":"","type":"image"}]}