{"ver":"0.1","info":{"id":"Xty3zW","date":"1473412779","viewed":239,"name":"Perlin Ray Traced Terrain","username":"paperweight86","description":"TODO:\n- Shading\n- Planetoid (how raytrace & perlin seams?)\n- Water","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["procedural","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noise by Ian McEwan, Ashima Arts.\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat f( float x, float z )\n{\n    if( x >= 4.0 || z >= 4.0 )\n        return -1.0;\n        \n    if( x <= 0.0 || z <= 0.0 )\n        return -1.0;\n    \n\treturn texture(iChannel0, vec2(x/4.0,z/4.0)).y * 1.2;\n}\n\nfloat c( float x, float z, float y )\n{   \n\treturn snoise(vec3(x*1.0+(float(iTime)*0.75),y*4.0,z*1.0+(float(iTime)*0.75)));\n}\n\nbool castRayClouds( vec3 ro, vec3 rd, float off, out float resT )\n{\n    resT = 0.0;\n    vec3 p0 = vec3(0.0,off,0.0);\n    float denom = dot(p0, rd);\n    if (abs(denom) > 1e-6) \n    { \n        vec3 p0l0 = p0 - ro;\n        float t = dot(p0l0, vec3(0.0,1.0,0.0)) / denom;\n        vec3 inter = ro + rd*t;\n        if(t >= 0.0 )\n        {\n            if( inter.x >= 4.0 || inter.z >= 4.0 )\n        \t\treturn false;\n\n            if( inter.x <= 0.0 || inter.z <= 0.0 )\n                return false;\n            \n            resT = c(inter.x, inter.z, off );\n            \n            return true;\n        }\n    } \n \n    return false;\n}\n\nbool castRayTerrain( vec3 ro,vec3 rd, out float resT )\n{\n    const float delt = 0.01;\n    const float mint = 0.001;\n    const float maxt = 10.0;\n    //float t = 0.0;\n    int num_iters = int((maxt-mint)/delt);\n    //for( float t = mint; t < maxt; t += delt )\n    for( int i = 0; i < num_iters; ++i)\n    {\n        float t = mint + float(i) * delt;\n        vec3 p = ro + rd*t;\n        float y = f( p.x, p.z );\n        if( p.y < y )\n        {\n            resT = p.y;// t - 0.5*delt;\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 brown = mix(vec3(1.0,1.0,1.0), vec3(0.23, 0.152, 0.0234), 0.75);\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n     // camera movement\t\n\tfloat an = -0.25*iTime;\n\tvec3 ro =vec3( 3.0*cos(an), (sin(float(iTime/2.0))+1.0)/2.0 + 0.8, 3.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n    \n    vec4 cloudFrag = vec4(1.0,1.0,1.0,0.0);\n    float y = 0.0;\n    for( int i = 100; i > 0; -- i )\n    {\n        if( castRayClouds( ro + vec3(2.0, 0.0, 2.0), rd, 1.0+0.001*float(i), y) )\n        {\n            if( y < 0.3 )\n            {\n                //if( y > 0.2 && y < 0.3 )\n                //{\n                y = 0.0;\n                //fragColor = vec4(y);\n                //return;\n                //}\n                //else\n                //{\n                //    y = 0.0;\n                //}\n            }\n            else\n            {\n                y /= 80.0;\n               //y = (0.2-y)*10.0;\n            }\n            cloudFrag = vec4(cloudFrag.rgb,clamp(cloudFrag.a + y, 0.0, 1.0));\n        }\n    }\n    \n            /*if( castRayClouds( ro + vec3(2.0, 0.0, 2.0), rd, y) )\n        {\n            if( y > 0.2 )\n            {\n                //if( y > 0.2 && y < 0.3 )\n                //{\n                y = (y + 0.4) * 0.6;\n                y = (y - 0.2) / 0.8;\n                y = mix(0.02,0.0,y);\n                //fragColor = vec4(y);\n                //return;\n                //}\n                //else\n                //{\n                //    y = 0.0;\n                //}\n            }\n            else\n            {\n               y = (0.2-y)/0.2;\n            }\n            cloudFrag = vec4(cloudFrag.rgb,cloudFrag.a + y);\n        }*/\n    \n\ty = 0.0;\n    if( castRayTerrain( ro + vec3(2.0, 0.0, 2.0), rd, y ) )\n    {\n        if(y > 0.4)\n        {\n            float coeff = (y-0.4)/0.6;\n            coeff = coeff/pow(2.0,coeff) * 2.0;\n    \t\tfragColor = vec4(mix(vec3(y)*brown, vec3(y), coeff), 1.0);\n        }\n\t\telse if(y < 0.0)\n        {\n            fragColor = vec4(vec3(0.0), 1.0);\n        }\n        else if(y < 0.25)\n        {\n            vec3 green = vec3(0.01, 0.2, 0.02);\n            fragColor = vec4(mix(green,y * brown,y/0.25), 1.0);\n            if(y < 0.15)\n            {\n                vec3 ray = refract(rd, vec3(0.0,1.0,0.0),0.1);\n                castRayTerrain( y + vec3(2.0, 0.0, 2.0), rd, y );\n                fragColor = vec4(vec3(0.0,0.0,1.0), 1.0);\n            }\n        }\n        else\n            fragColor = vec4(vec3(y)*brown, 1.0);\n    }\n    else\n        fragColor = vec4(0.0);\n    \n    fragColor = cloudFrag.a * cloudFrag + (1.0 - cloudFrag.a) * fragColor;\n    \n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n    //fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 10.0 + iTime * 0.75;\n    vec3 noise = vec3(0.0);\n    int max = 8;\n    float maxHeight = 6.0f;\n    for(int i = 0; i < max; ++i)\n    {\n        float expo = float(i+1);\n        float scale = float(max-i)/float(max)*maxHeight;\n        //float noisesingle = snoise(uv/scale)*scale;\n        float noisesingle = snoise(uv/expo);\n        float pownoise = pow(0.5+0.5*noisesingle, expo);\n    \t//noise += vec3(noisesingle/maxHeight, noisesingle/maxHeight, noisesingle/maxHeight);\n        noise += vec3(pownoise/maxHeight, pownoise/maxHeight, pownoise/maxHeight);\n        //maxHeight -= 6.0/float(max);\n    }\n    \n\tfragColor = vec4(noise, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}