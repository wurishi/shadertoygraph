{"ver":"0.1","info":{"id":"4f2SzV","date":"1707318105","viewed":53,"name":"Octahedron screenshake","username":"BCFlavin","description":"Do you know whats going on?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","screenshake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Built from kishimisu's raymarching starter and Screen Shake by ZhihongYe\n//https://www.shadertoy.com/view/MfX3WH\n//https://www.shadertoy.com/view/tdSyWz\n\n// shake vars\nvec2 uniA = vec2(100., 100.);\nvec2 uniB = vec2(1., 3.);\nvec2 uniScale = vec2(0.05, 0.05);\n\nmat2 rot(float angle) {\n    float c = sin(angle), s = cos(angle);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nvec3 pal(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.00, 0.15, 0.20);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n\n}\n\nfloat map(vec3 p) {\n\n    vec3 q = p;\n\n    p.z += iTime;\n    \n    p.xy *= rot(sin(iTime * 0.5) * 0.05);\n    \n    q = fract(p) -.5;\n\n    float oct = sdOctahedron(q, 0.25);\n\n    return oct;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    \n    // shake\n    uv.x += sin(iTime * uniA.x + uniB.x) * uniScale.x;\n    uv.y += cos(iTime * uniA.y + uniB.y) * uniScale.y;\n    \n        // Initialization\n    vec3 ro = vec3(0, 0, -3);         // ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\n    // Raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;     // position along the ray\n\n        float d = map(p);         // current distance to the scene\n\n        t += d;                   // \"march\" the ray\n\n        if (d < .001)\n            break;      // early stop if close enough\n        if (t > 100.)\n        break;      // early stop if too far\n        if (t > 40.) uniA = vec2(100, 100);\n    }\n\n    // Coloring\n    col += vec3(t * 0.1 + pal(t * 0.2));           // color based on distance\n\n\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}