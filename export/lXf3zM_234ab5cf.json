{"ver":"0.1","info":{"id":"lXf3zM","date":"1707273293","viewed":81,"name":"Ising model 2D periodic","username":"Rogolop","description":"Ising model in a 2D square lattice with periodic boundary conditions.\nMouse control:\n- Horizontally to adjust temperature (left: ~0K, center: phase transition, right: >>0)\n- Vertically to adjust external magnetic field (up: >0, center: =0, down: <0)","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["2d","periodic","cellularautomaton","isingmodel"],"hasliked":0,"parentid":"X3s3zn","parentname":"Rock paper scissors cellular aut"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Ising model in a 2D square lattice with periodic boundary conditions.\n//\n// Mouse control:\n// - Horizontally to adjust temperature\n//     (left: ~0K, center: phase transition, right: >>0)\n// - Vertically to adjust external magnetic field\n//     (up: >0, center: =0, down: <0)\n\n\n// ---------- Settings ----------\n\n#define ZOOM 1.\n#define PALETTE 2\n\n// ---------- Colors ----------\n\n// https://webflow.com/blog/best-color-combinations\n// https://airtightinteractive.com/util/hex-to-glsl/\n#if (PALETTE == 1)\n    #define COLOR1 vec3(1,0,0)\n    #define COLOR2 vec3(0,0,1)\n#elif (PALETTE == 2)\n    #define COLOR1 vec3(.8,.95,.5)\n    #define COLOR2 vec3(.28,.19,.83)\n#elif (PALETTE == 3)\n    #define COLOR1 vec3(.99,.96,.96)\n    #define COLOR2 vec3(.6, 0, .07)\n#elif (PALETTE == 4)\n    #define COLOR1 vec3(1,1,1)\n    #define COLOR2 vec3(.54,.66,90)\n#elif (PALETTE == 5)\n    #define COLOR1 vec3(0.,1.,1.)\n    #define COLOR2 vec3(1.,0.412,0.706)\n#elif (PALETTE == 6)\n    #define COLOR1 vec3(0.933,0.851,0.443)\n    #define COLOR2 vec3(1.,0.639,0.318)\n#elif (PALETTE == 7)\n    #define COLOR1 vec3(0.592,0.737,0.384)\n    #define COLOR2 vec3(0.173,0.373,0.176)\n#elif (PALETTE == 8)\n    #define COLOR1 vec3(0.878,0.663,0.427)\n    #define COLOR2 vec3(0.125,0.118,0.125)\n#elif (PALETTE == 9)\n    #define COLOR1 vec3(0.984,0.973,0.745)\n    #define COLOR2 vec3(0.137,0.306,0.439)\n#elif (PALETTE == 10)\n    #define COLOR1 vec3(1,.3,.3)\n    #define COLOR2 vec3(0,.1,.7)\n#elif (PALETTE == 11)\n    #define COLOR1 vec3(0.478,0.125,0.282)\n    #define COLOR2 vec3(0.251,0.557,0.776)\n#else\n    #define COLOR1 vec3(1,1,1)\n    #define COLOR2 vec3(0,0,0)\n#endif\n\n// ---------- Draw on screen ----------\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragCoord /= ZOOM;\n    float sigma = texelFetch(iChannel0, ivec2(fragCoord), 0).x; // simulation values\n    fragColor = vec4(sigma == 1. ? COLOR1 : COLOR2, 1.);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// ---------- Settings ----------\n\n// slow down simulation\n#define iterationEachNFrames 1\n\n// ---------- Functions ----------\n\n#define prev(X,Y) ( texelFetch(iChannel0, ivec2(mod(mod(fragCoord+vec2(X,Y),iResolution.xy)+iResolution.xy,iResolution.xy)), 0) )\n\n// Random float in interval [0,1), for each pixel each frame.\n// Source: https://www.shadertoy.com/view/3tlfRs\nprecision highp float;\nprecision highp int;\n// uint -> random float in interval [0,1) (16 psuedo-random bits)\nfloat squares16(uint ctr) {\n    const uint key = uint(0x7a1a912f);\n    uint x, y, z;\n    y = ctr*key; z = (ctr+uint(1))*key; // initialize Weyl sequence vars y,z\n    x = y; // initialize mixing var x\n    x = x*x + y; x = (x>>16) | (x<<16); // mixing round 1\n    x = x*x + z; x = (x>>16) | (x<<16); // mixing round 2\n    x = (x*x + y) >> 16; // mixing round 3\n    return float(x)/65536.; // 65536 = 2^16\n}\nfloat rand(vec2 fragCoord, int frame) {\n    float id = dot(fragCoord.xy, vec2(1, iResolution.x));\n    int cnt_pixels = int(iResolution.x * iResolution.y);\n    return squares16(uint(id)+uint(frame*cnt_pixels));\n}\n\n// ---------- Ising model simulation ----------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    float sigma = prev(0,0).x; // spin (magnetic dipole moment), +1 or -1\n    \n    // External parameters\n    //   (remark: iMouse != vec4(0) is used for initialization until user clicks,\n    //   works as long as user doesn't click and release exactly (0,0)=bottom left)\n    // inverse temperature\n    float beta = iMouse == vec4(0) ? 0.44 :0.44/(2.*max(0.5,iMouse.x)/iResolution.x); // -log(max(0.5,iMouse.x)/iResolution.x);\n    // external magnetic field\n    float h = iMouse == vec4(0) ? 0. : 1.*pow(-0.5+iMouse.y/iResolution.y,3.); // -log(max(0.5,iMouse.x)/iResolution.x);\n    \n    if (iFrame % iterationEachNFrames == 0) {\n        // don't update all the pixels at once, to prevent both neighbors\n        // from updating at same time\n        if ((int(fragCoord.x + fragCoord.y) + iFrame/iterationEachNFrames) % 3 == 0) {\n            float neigh = prev(1,0).x+prev(0,1).x+prev(-1,0).x+prev(0,-1).x;\n            // energy difference (assuming interaction strength = 1)\n            float deltaH = 1.*(2.*neigh*sigma) + h*(2.*sigma);\n            float updateProbability = deltaH < 0. ? 1. : exp(-beta*deltaH);\n            // flip the spin according to probability\n            if (rand(fragCoord, iFrame) <= updateProbability) {\n                sigma *= -1.;\n            }\n        }\n    }\n    \n    // Initial condition\n    if (iFrame < 5) {\n        sigma = rand(fragCoord, 0) < 0.5 ? +1. : -1.;\n    }\n\n    fragColor = vec4(sigma, 0., 0., 0.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}