{"ver":"0.1","info":{"id":"mt3SD4","date":"1685393094","viewed":53,"name":"2D Light Source","username":"MertTetik","description":"!!Play with global variables!! That supposed be a ligth source. It still is actually. As long as uv is not multiplied by 1000000 and restrictYAxisPos is set to false.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","game","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Noisy rotating light\n\n//No need to give credits if you want to reuse this shader\n\nconst float rotationVelocity = 1.5;\nconst float noiseIntensity = 0.03;\nconst vec3 lightPosition = vec3(0.5, 0.5, 1.0);\nconst vec3 bgColor = vec3(0.);\nconst vec3 lightColor = vec3(1.0, 1.0, 1.0);\nfloat lightPowerReduce = 2.;\nfloat distribution = 0.1;\nfloat focus = 0.0; //Max recommended value is 0.6\n\nbool restrictYAxisPos = true; //Turn that off to have a smooth positioning\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    lightPowerReduce *= (iResolution.x-iMouse.x + 1.) / iResolution.x; \n    distribution /= (iResolution.x-iMouse.x + 1.) / iResolution.x;\n    focus = ((iResolution.x-iMouse.x + 1.) / iResolution.x - 0.4) / 1.3;\n    \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y * 1000000.;\n    \n    vec2 p = uv; //Position\n    \n    if(restrictYAxisPos)\n        p.y /= 4.;\n        \n    vec2 center = vec2(0., 0.0);\n\n    //Create rotation matrix\n    float rotAngle = iTime * rotationVelocity;\n    mat2 rotMatrix = mat2(cos(rotAngle), sin(rotAngle), -sin(rotAngle), cos(rotAngle));\n    p = rotMatrix * p;\n\n\n    //Gaussian noise\n    float noise = fract(sin(dot(p, vec2(100., 100.))) * 1000.);\n    p += noiseIntensity * (2.0 * noise - 1.0);\n\n    //Lighting\n    vec3 normal = normalize(vec3(p - center, distribution));\n    float diffuse = max(0.0, dot(normal, normalize(lightPosition)));\n    if(diffuse < focus)\n        diffuse = 0.;\n    vec3 litColor = lightColor * (diffuse / lightPowerReduce);\n\n    //Final\n    vec3 color = bgColor + litColor;\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}