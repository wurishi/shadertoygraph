{"ver":"0.1","info":{"id":"3ddfDM","date":"1605391234","viewed":47,"name":"1-1. 2D Starting Point","username":"rito15","description":"2d","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// 0 : No Grids / 1 : 0.05 unit / 2 : 0.1 unit\n#define LEVEL_GRID_DEBUG 1\n\n// 0 : No Grids / 1 : Behind Shapes / 2 : In Front of Shapes\n#define LEVEL_SHOW_GRID 1\n\n/**************************************************************************************************\n * Main\n **************************************************************************************************/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV ================================================================================================\n    float2 uv  = fragCoord/iResolution.xy;\t\t\t\t\n    float2 uv0 = uv;                                                          // Full Screen  0.0 ~ 1.0\n    float2 uv1 = uv * 2.0 - 1.0;                                              // Full Screen -1.0 ~ 1.0\n    float2 uv2 = (uv - 0.5) * float2(iResolution.x/iResolution.y, 1.0) + 0.5; // Square Area  0.0 ~ 1.0\n    float2 uv3 = uv2 * 2.0 - 1.0;\t\t\t\t\t\t                      // Square Area -1.0 ~ 1.0\n    \n    // Final Variables ===================================================================================\n    float3 shp = float3(0.0);\t// Shape\n    float3 col = float3(0.0);\t// Color\n    float3 grd = float3(0.0);   // Debug Grids\n    \n    \n    \n    /******************************************************************************************************************\n     * Body Start                                                                                                     *\n     ******************************************************************************************************************/\n    \n    // 1. circle\n    float2 circlePos    = float2(-0.4, -0.4);\n    float  circleRadius = 0.4;\n    float  circleBlur   = 0.1;\n    float2 uvCircle     = uv3;\n    float  circle = smoothstep(circleRadius, circleRadius - circleBlur, length(uvCircle - circlePos));\n    \n    // 2. heart\n    float2  heartPos    = float2(0.2, 0.2);\n    float2  heartSizeWH = float2(0.5, 0.5);\n    float   heartBlur = 0.01;\n    float2  uvHeart   = (uv3 - heartPos) / (heartSizeWH * float2(1.15, 0.97));\n    float2  heartBase = float2(uvHeart.x, uvHeart.y - sqrt(abs(uvHeart.x)) * 0.7 + 0.18);\n    float   heart = smoothstep(0.87, 0.87 - heartBlur, length(heartBase));\n    \n    float3  colHeart = heart * MAGENTA;\n    \n    /******************************************************************************************************************\n     *                                                                                                       Body End *\n     ******************************************************************************************************************/\n    \n    \n    // Draw Shapes =======================================================================================\n    shp += circle;\n    shp += heart;\n        \n    // Apply Colors ======================================================================================\n    col += colHeart;\n    col += circle;\n    \n    \n    \n    \n    // Debug Grids =======================================================================================\n    float2 uvGrd = uv2;\n    \n    //grd += debugCenterLine(uvGrd) * float(LEVEL_GRID_DEBUG);\n    grd += debugOutLine(uvGrd) * float(LEVEL_GRID_DEBUG);\n    grd += debugGrid(uvGrd, 0.05 * float(LEVEL_GRID_DEBUG) );\n\n    \n    \n    \n    // End Point =========================================================================================\n    fragColor.a = 1.0;\n    fragColor.rgb = shp * col;\n    \n    #if LEVEL_SHOW_GRID == 1\n    \n    fragColor.rgb += grd * (1. - shp);\n    \n    #elif LEVEL_SHOW_GRID == 2\n    \n    float3 grdWB = float3(step(0.001, grd.r+grd.g+grd.b));\n    fragColor.rgb = lerp(fragColor.rgb, grd, grdWB);\n    \n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/**************************************************************************************************\n * DEFINITIONS : Unity Compatibility\n **************************************************************************************************/\n#define float2   vec2\n#define float3   vec3\n#define float4   vec4\n#define float2x2 mat2\n#define float3x3 mat3\n#define float4x4 mat3\n\n#define frac(x)     fract(x)\n#define saturate(x) clamp(x, 0., 1.)\n\n#define atan2(x,y)    atan(y,x)\n#define tex2D(s,t)    texture(s,t)\n#define mul(mat,vec)  vec*mat;\n\n#define lerp(a,b,t) mix(a,b,t)\n\n/**************************************************************************************************\n * DEFINITIONS - Constant\n **************************************************************************************************/\n#define PI 3.141592653589793\n\n/**************************************************************************************************\n * DEFINITIONS - Function\n **************************************************************************************************/\n#define S(a, b, t) smoothstep(a, b, t)\n\n// Remap : (0 ~ 1) => (a, b)\n#define R01(t, a, b) (b - a) * t + a\n\n// Remap : (-1 ~ 1) => (a, b)\n#define R11(t, a, b) (b - a) * (1. - t) * 0.5 + a\n\n/**************************************************************************************************\n * DEFINITIONS - float3 Colors\n **************************************************************************************************/\n#define BLACK float3(0.0, 0.0, 0.0)\n#define WHITE float3(1.0, 1.0, 1.0)\n\n#define RED   float3(1.0, 0.0, 0.0)\n#define GREEN float3(0.0, 1.0, 0.0)\n#define BLUE  float3(0.0, 0.0, 1.0)\n\n#define YELLOW  float3(1.0, 1.0, 0.0)\n#define CYAN    float3(0.0, 1.0, 1.0)\n#define MAGENTA float3(1.0, 0.0, 1.0)\n\n/**************************************************************************************************\n * Functions\n **************************************************************************************************/\n// Smooth Max\nfloat3 smax(float3 a, float3 b, float k)\n{\n    float3 h = clamp((b - a) / k + 0.5, 0.0, 1.0);\n    return mix(a, b, h) + h * (1.0 - h) * k * 0.5;\n}\n\n/**************************************************************************************************\n * DEBUG Functions \n **************************************************************************************************/\nfloat3 debugCenterLine(float2 uv)\n{\n    if(uv.x > 0.498 && uv.x < 0.502 || uv.y > 0.498 && uv.y < 0.502)\n        return float3(1., 0., 0.);\n}\nfloat3 debugOutLine(float2 uv)\n{\n    if(uv.x > 1.0 && uv.x <= 1.004 || uv.x < 0.0 && uv.x >= -0.004)\n        return float3(0., 0., 1.);\n}\nfloat3 debugGrid(float2 uv, float interval)\n{\n    if(interval <= 0.0) return float3(0.);\n    \n    float2 uvTile = uv / interval + 0.025;\n    uvTile = frac(uvTile);\n    \n    float grid = smoothstep(0.1, 0.00, min(abs(uvTile.x), abs(uvTile.y)));\n    return float3(0., grid * 0.2, 0.);\n}","name":"Common","description":"","type":"common"}]}