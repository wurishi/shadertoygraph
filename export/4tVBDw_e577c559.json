{"ver":"0.1","info":{"id":"4tVBDw","date":"1542768613","viewed":861,"name":"Liquid Crystal V","username":"wyatt","description":"So all the other liquid crystals I made are based on the the dynamics of a bunch of dipoles whose directions are heavily blended. This, whoever is my regular old fluid simulation, but the velocities are strongly encouraged to be of a specific magnitude.","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["fluid","dynamics","liquid","physics","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 R;\nvec2 hash(vec2 p) // Dave Hoskins\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nfloat intersect (vec2 coes) {\n    float det = coes.x*coes.x-4.*coes.y;\n    if (det < 0.) return 1e4;\n    return 0.5*(-coes.x-sqrt(det));\n}\nfloat ellipse (vec3 p, vec3 d, vec3 a, vec3 b, float r) {\n\ta = p-a;b = p-b;\n    float \n        rr = r*r,\n        ad = dot(a,d),\n        bd = dot(b,d),\n        aa = dot(a,a),\n        bb = dot(b,b);\n    return intersect(vec2(\n    \tad*aa-ad*bb+bd*bb-bd*aa-rr*(ad+bd),\n        -aa*bb+0.25*(aa*aa+bb*bb+rr*rr)+0.5*(aa*bb-rr*(aa+bb))\n    )/(ad*ad+bd*bd-rr-2.*ad*bd));\n}\nfloat sphere (vec3 p, vec3 d, vec3 c, float r) {\n\tc = p-c;\n    return intersect(vec2(2.*dot(c,d),dot(c,c)-r*r));\n}\nvec3 norEllipse (vec3 p, vec3 a, vec3 b) {\n    return normalize(normalize(p-a)+normalize(p-b));\n}\nfloat plane (vec3 p, vec3 d) {\n\treturn  dot(-p,vec3(0,0,1))/dot(d,vec3(0,0,1));\n}\nvec3 O (vec2 U) {return normalize(texture(iChannel0,U/R).xyz);}\nvec3 col (vec3 o) {\n   vec2 t = vec2(atan(o.y,o.x),atan(length(o.xy),o.z));\n    float w = sin(0.5*iTime+3.*t.x);\n    return vec3(w);\n   \n}\nfloat D (vec3 p, vec3 d, vec2 v, float e, inout vec4 color) {\n    \n    vec2 U = floor(p.xy+0.5+v);\n    vec2 h = hash(U)*2.-1.;\n    vec3 o = O(U);\n    U+=.25*h;\n    vec3 q = vec3(U,0),\n         a = q + 1.3*o,\n         b = q - 1.3*o;\n    vec4 co = vec4(col(o),1.);\n    float f = ellipse(p,d,a,b,2.64);\n    \n   if (f < e) {\n    \te = f;\n        vec3 n = norEllipse(p+d*e,a,b);\n        float m = dot(n,o);\n        color = dot(n,vec3(0,0,-1))*(0.5+0.5*co);\n    }\n    float t = .5*iTime+h.x;\n    for (int i = 0; i < 3; i++) {\n        t += 0.333;\n        a = q+2.*o*(fract(t)*2.-1.);\n        f = sphere(p,d,a,.4*abs(fract(t+0.5)*2.-1.));\n        if (f < e) {\n            e = f;\n            vec3 n = normalize(p+d*e-a);\n            float m = dot(n,o);\n            color = dot(n,vec3(0,0,-1))*(0.1+0.9*co);\n        }\n    }\n    return e;\n}\nvec4 X (vec3 p, vec3 d) {\n\tp += d*plane(p, d);\n\tvec4 color = vec4(0);\n    float e = 1e3;\n    for (int x = -1; x<=1; x++)\n    for (int y = -1; y<=1; y++)\n        e = D (p, d, vec2(x,y), e, color);\n    return color;\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n if (iMouse.z > 0.) {\n \tU = 2.*(U-0.5*R)/R.y;\n \tvec3 p = vec3(iMouse.xy+(20.+10.*sin(0.25*iTime))*U,-1),\n         d = normalize(vec3(U*0.1,1));\n \tC = X(p,d);\n } else {\n \tvec3 o = O(U);\n \tvec2 dz = vec2(\n    \tO(U+vec2(1,0)).z-O(U-vec2(1,0)).z,\n    \tO(U+vec2(0,1)).z-O(U-vec2(0,1)).z\n    );\n \tC.xyz = (0.8+0.5*dz.xxx)*col(o);\n }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Fluid Algorithm  https://www.shadertoy.com/view/MtdBDB\nvec2 R;float N;\nfloat hash12(vec2 p)\n{ // Dave H\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nfloat X (vec2 U0, vec2 U, vec2 U1, inout vec4 Q, in vec2 r, inout vec2 v) {\n    vec2 V = U + r, \n         V0 = V - T(V).xy,\n         V1 = V + T(V).xy;\n    vec4 t = T (V0);\n    float rr = length(r);\n    Q.xy -= r*(t.z-Q.z)/rr/N;\n    v += t.xy/N;\n    return (0.5*(length(V0-U0)-length(V1-U1))+t.z)/N;\n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 U0 = U - T(U).xy,\n         U1 = U + T(U).xy;\n \tfloat P = 0.; Q = T(U0);\nif (length(Q.xy)==0. || iFrame < 1) {\n     float h = 6.3*hash12(U);\n     Q = 0.05*vec4(sin(h),cos(h),0,0);\n} else {\n \t\n \tN = 8.;\n    vec2 v = vec2(0);\n    P += X (U0,U,U1,Q, vec2( 1, 0) ,v);\n \tP += X (U0,U,U1,Q, vec2( 0, 1) ,v);\n \tP += X (U0,U,U1,Q, vec2(-1, 0) ,v);\n \tP += X (U0,U,U1,Q, vec2( 0,-1) ,v);\n    P += X (U0,U,U1,Q, vec2( 1, 1) ,v);\n \tP += X (U0,U,U1,Q, vec2(-1, 1) ,v);\n \tP += X (U0,U,U1,Q, vec2( 1,-1) ,v);\n \tP += X (U0,U,U1,Q, vec2(-1,-1) ,v);\n    \n \tQ.z = P;\n    Q.xy = mix(Q.xy,v,.06);\n \tQ.xy = mix(Q.xy, 0.1*normalize(Q.xy), 0.01) ;\n}\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Fluid Algorithm  https://www.shadertoy.com/view/MtdBDB\nvec2 R;float N;\nfloat hash12(vec2 p)\n{ // Dave H\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nfloat X (vec2 U0, vec2 U, vec2 U1, inout vec4 Q, in vec2 r, inout vec2 v) {\n    vec2 V = U + r, \n         V0 = V - T(V).xy,\n         V1 = V + T(V).xy;\n    vec4 t = T (V0);\n    float rr = length(r);\n    Q.xy -= r*(t.z-Q.z)/rr/N;\n    v += t.xy/N;\n    return (0.5*(length(V0-U0)-length(V1-U1))+t.z)/N;\n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 U0 = U - T(U).xy,\n         U1 = U + T(U).xy;\n \tfloat P = 0.; Q = T(U0);\nif (length(Q.xy)==0. || iFrame < 1) {\n     float h = 6.3*hash12(U);\n     Q = 0.05*vec4(sin(h),cos(h),0,0);\n} else {\n \t\n \tN = 8.;\n    vec2 v = vec2(0);\n    P += X (U0,U,U1,Q, vec2( 1, 0) ,v);\n \tP += X (U0,U,U1,Q, vec2( 0, 1) ,v);\n \tP += X (U0,U,U1,Q, vec2(-1, 0) ,v);\n \tP += X (U0,U,U1,Q, vec2( 0,-1) ,v);\n    P += X (U0,U,U1,Q, vec2( 1, 1) ,v);\n \tP += X (U0,U,U1,Q, vec2(-1, 1) ,v);\n \tP += X (U0,U,U1,Q, vec2( 1,-1) ,v);\n \tP += X (U0,U,U1,Q, vec2(-1,-1) ,v);\n    \n \tQ.z = P;\n    Q.xy = mix(Q.xy,v,.06);\n \tQ.xy = mix(Q.xy, 0.1*normalize(Q.xy), 0.01) ;\n}\n}","name":"Buffer B","description":"","type":"buffer"}]}