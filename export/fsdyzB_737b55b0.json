{"ver":"0.1","info":{"id":"fsdyzB","date":"1653654214","viewed":814,"name":"Rounded rect + border & shadow","username":"inobelar","description":"GLSL shader for rendering: individually rounded rectangle with border and shadow\n\nColor transparency is allowed (blend layer-by-layer)\n\nBased on shaders from @amine_sebastian:\n- https://www.shadertoy.com/view/WtdSDs\n- https://www.shadertoy.com/view/tltXDl","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","shadow","square","ui","rect","rounded","border"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on shaders from @amine_sebastian and @iq:\n//   - https://www.shadertoy.com/view/WtdSDs\n//   - https://www.shadertoy.com/view/tltXDl\n\n\n// TODO: Shadow 'u_colorShadow.a' is unused; Only used 'u_colorShadow.rgb' components\n\n\n// from https://iquilezles.org/articles/distfunctions\n// additional thanks to iq for optimizing conditional block for individual corner radii!\nfloat roundedBoxSDF(vec2 CenterPosition, vec2 Size, vec4 Radius)\n{\n    Radius.xy = (CenterPosition.x > 0.0) ? Radius.xy : Radius.zw;\n    Radius.x  = (CenterPosition.y > 0.0) ? Radius.x  : Radius.y;\n    \n    vec2 q = abs(CenterPosition)-Size+Radius.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - Radius.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // =========================================================================\n    // Inputs (uniforms)\n\n    vec2  u_rectSize   = vec2(250.0, 250.0);     // The pixel-space scale of the rectangle.\n    vec2  u_rectCenter = (iResolution.xy / 2.0); // The pixel-space rectangle center location\n    \n    float u_edgeSoftness   = 2.0; // How soft the edges should be (in pixels). Higher values could be used to simulate a drop shadow.\n    vec4  u_cornerRadiuses = vec4(10.0, 20.0, 40.0, 60.0); // The radiuses of the corners(in pixels): [topRight, bottomRight, topLeft, bottomLeft]\n    \n    // Border\n    float u_borderThickness = 5.0; // The border size (in pixels) \n    float u_borderSoftness  = 2.0; // How soft the (internal) border should be (in pixels)\n    \n    // Shadow\n    float u_shadowSoftness = 30.0;            // The (half) shadow radius (in pixels)\n    vec2  u_shadowOffset   = vec2(0.0, 10.0); // The pixel-space shadow offset from rectangle center\n    \n    // Colors\n    vec4  u_colorBg     = vec4(0.93, 0.93, 0.93, 1.0); // The color of background\n    vec4  u_colorRect   = vec4(1.0,  0.30, 0.45, 1.0); // The color of rectangle\n    vec4  u_colorBorder = vec4(0.7,  0.25, 0.55, 1.0); // The color of (internal) border\n    vec4  u_colorShadow = vec4(0.4,  0.4,  0.4,  1.0); // The color of shadow\n    \n    // =========================================================================\n\n    vec2 halfSize = (u_rectSize / 2.0); // Rectangle extents (half of the size)\n    \n    vec4 radius = vec4((sin(iTime) + 1.0)) * u_cornerRadiuses; // Animated corners radiuses\n    \n    // -------------------------------------------------------------------------\n    \n    // Calculate distance to edge.   \n    float distance = roundedBoxSDF(fragCoord.xy - u_rectCenter, halfSize, radius);\n       \n    // Smooth the result (free antialiasing).\n    float smoothedAlpha = 1.0-smoothstep(0.0, u_edgeSoftness, distance);\n    \n    // -------------------------------------------------------------------------\n    // Border.\n    \n    float borderAlpha   = 1.0-smoothstep(u_borderThickness - u_borderSoftness, u_borderThickness, abs(distance));\n    \n    // -------------------------------------------------------------------------\n    // Apply a drop shadow effect.\n    \n    float shadowDistance  = roundedBoxSDF(fragCoord.xy - u_rectCenter + u_shadowOffset, halfSize, radius);\n    float shadowAlpha \t  = 1.0-smoothstep(-u_shadowSoftness, u_shadowSoftness, shadowDistance);\n    \n\n    // -------------------------------------------------------------------------\n    // Debug output\n    \n        // vec4 debug_sdf = vec4(distance, 0.0, 0.0, 1.0);\n    \n        // Notice, that instead simple 'alpha' here is used 'min(u_colorRect.a, alpha)' to enable transparency\n        // vec4 debug_rect_color   = mix(u_colorBg, u_colorRect, min(u_colorRect.a, smoothedAlpha));\n    \n        // Notice, that instead simple 'alpha' here is used 'min(u_colorBorder.a, alpha)' to enable transparency\n        // vec4 debug_border_color = mix(u_colorBg, u_colorBorder, min(u_colorBorder.a, min(borderAlpha, smoothedAlpha)) ); \n\n    // -------------------------------------------------------------------------\n    // Apply colors layer-by-layer: background <- shadow <- rect <- border.\n    \n    // Blend background with shadow\n    vec4 res_shadow_color = mix(u_colorBg, vec4(u_colorShadow.rgb, shadowAlpha), shadowAlpha);\n\n    // Blend (background+shadow) with rect\n    //   Note:\n    //     - Used 'min(u_colorRect.a, smoothedAlpha)' instead of 'smoothedAlpha'\n    //       to enable rectangle color transparency\n    vec4 res_shadow_with_rect_color = \n        mix(\n            res_shadow_color,\n            u_colorRect,\n            min(u_colorRect.a, smoothedAlpha)\n        );\n        \n    // Blend (background+shadow+rect) with border\n    //   Note:\n    //     - Used 'min(borderAlpha, smoothedAlpha)' instead of 'borderAlpha'\n    //       to make border 'internal'\n    //     - Used 'min(u_colorBorder.a, alpha)' instead of 'alpha' to enable\n    //       border color transparency\n    vec4 res_shadow_with_rect_with_border =\n        mix(\n            res_shadow_with_rect_color,\n            u_colorBorder,\n            min(u_colorBorder.a, min(borderAlpha, smoothedAlpha))\n        );\n    \n    // -------------------------------------------------------------------------\n     \n    fragColor = res_shadow_with_rect_with_border;\n}","name":"Image","description":"","type":"image"}]}