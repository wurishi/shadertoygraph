{"ver":"0.1","info":{"id":"4cX3DB","date":"1703426872","viewed":27,"name":"stars and cloth","username":"nayk","description":"copypast and combination ","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["distortion","stars","universe","cloth","rippples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/XlXXR4*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nfloat lucky_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvec2 GetOffsetFromCenter(vec2 screenCoords, vec2 screenSize)\n{\n    vec2 halfScreenSize = screenSize / 2.0;\n    \n\treturn (screenCoords.xy - halfScreenSize) / min(halfScreenSize.x, halfScreenSize.y);\n}\n\n\nfloat EffectDuration =0.5;\nfloat EffectFadeInTimeFactor = 0.5;\nfloat EffectWidth = 0.4;\nfloat EffectMaxTexelOffset = 20.0;\n\nvec2 GetDistortionTexelOffset(vec2 offsetDirection, float offsetDistance, float time)\n{\n    float progress = mod(time, EffectDuration) / EffectDuration;\n    \n    float halfWidth = EffectWidth / 5.0;\n    float lower = 1.0 - smoothstep(progress - halfWidth, progress, offsetDistance);\n    float upper = smoothstep(progress, progress + halfWidth, offsetDistance);\n    \n    float band = 1.0 - (upper + lower);\n    \n    \n    float strength = 1.0 - progress;\n    float fadeStrength = smoothstep(0.0, EffectFadeInTimeFactor, progress);\n    \n    float distortion = band * strength * fadeStrength;\n    \n    \n    return distortion * offsetDirection * EffectMaxTexelOffset;\n}\n\n\nvec3 GetTextureOffset(vec2 coords, vec2 textureSize, vec2 texelOffset)\n{\n    vec2 texelSize = 1.0 / textureSize;\n    vec2 offsetCoords = coords + texelSize * texelOffset;\n    \n    vec2 halfTexelSize = texelSize / 2.0;\n    vec2 clampedOffsetCoords = clamp(offsetCoords, halfTexelSize, 1.0 - halfTexelSize);\n    \n    return texture(iChannel0, clampedOffsetCoords).rgb;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\nfloat time2 = iTime;\n    \n    vec2 screenCoords = fragCoord.xy;\n    vec2 screenSize = iResolution.xy;\n    \n    \n    vec2 offsetFromCenter = GetOffsetFromCenter(screenCoords, screenSize);\n    vec2 offsetDirection = normalize(-offsetFromCenter);\n    float offsetDistance = length(offsetFromCenter);\n    \n    \n    vec2 offset = GetDistortionTexelOffset(offsetDirection, offsetDistance, time2);\n    \n    \n    vec2 coords = (fragCoord.xy / screenSize);\n    coords.y = 1.0 - coords.y;\n    \n    vec3 background = GetTextureOffset(coords, screenSize, offset);\n\nvec2 m = (.5 * iResolution.xy - iMouse.xy) / iResolution.x * 6.28;\n\n    vec3 e = vec3(cos(iTime) * cos(iTime), sin(iTime) * cos(iTime), sin(iTime));\n    vec3 u = normalize(vec3(e.y, -e.x, 0));\n    vec3 v = cross(e, u);\n   \n\tvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n  \n\tfloat cLength = length(cPos);\n\n\t\n\n    vec3 d3 = e + uv.x * u + uv.y * v;\n    \n    vec3 a = (e + .1) / d3;\n    vec3 b = (e - .1) / d3;\n    float mi = max(max(min(a.x, b.x), min(a.y, b.y)), min(a.z, b.z));\n    float ma = min(min(max(a.x, b.x), max(a.y, b.y)), max(a.z, b.z));\n    float t2 = mi < ma ? mi : 10.;\n    vec3 i2 = e - d3 * t2;\n       \n\t\n    vec3 c = (step(-.099, i2) + step(.099, i2) - 1.)+d3; \n\tc.xy= fragCoord.xy/iResolution.xy+(cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.03;\n\tvec3 from=vec3(1.,.5,0.5)*background+c;\n\tfrom+=vec3(time*2.,time,-2.);\n\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n    \n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*= vec4( lucky_star(uv,anim) * vec3(0.55,0.5,0.55), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}