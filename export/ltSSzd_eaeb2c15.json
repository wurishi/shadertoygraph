{"ver":"0.1","info":{"id":"ltSSzd","date":"1445836054","viewed":1065,"name":"Transparent blob+soft shadow","username":"1j01","description":"Slight modification of https://www.shadertoy.com/view/lljXDW#","likes":24,"published":1,"flags":0,"usePreview":1,"tags":["metaballs","metaball","blob","liquid","drops","marchingshadow","metablob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float zNear = 1.0;\nconst float zFar  = 400.0;\nconst float SHININESS = 20.0;\n\nconst float NBSOURCES = 9.0;\n\n\nvec3 getSource(float i) {\n    \n    return vec3(8.0-0.7*(i*sqrt(i)), -2.0+0.8*mod(i+1.0,4.0), 40) \n           \t\t + vec3(mod(i,2.0)*sin(iTime*mod(i,5.0)*0.3)*3.0,\n                        mod(i,7.0)*sin(iTime*mod(i,3.0)*0.2)*2.0, 0);    \n}\n\n\nfloat getFieldIntensity(in vec3 m, out vec3 normal) {\n    \n    normal = vec3(0,0,0);\n    float \tfieldIntensity = 0.0;\n    \n    for(float i=0.0; i<NBSOURCES; i+=1.0) {\n        \n        vec3 source = getSource(i);\n        float d = length(m - source);\n        \n        float intensity = 1.0 / (d*d);\n        vec3 localNormal = normalize(m - source);\n        \n        normal += localNormal * intensity;\n        fieldIntensity += intensity;\n    }\n    \n    normal = normalize(normal);\n    return fieldIntensity;\n}\n\nfloat getFieldIntensity(in vec3 origin, in vec3 ray, out vec3 m, out vec3 normal) {\n    \n    float\tmarchingDist = 30.0;\n    float \tnbIter \t\t = 0.0;\n\n \tm = origin;   \n    float ii=0.0;\n    \n    for(float nbIter = 0.0; nbIter<200.0; nbIter += 1.0) {\n        \n    \tfloat fieldIntensity = getFieldIntensity(m, normal);\n        \n        ii+=fieldIntensity;\n        marchingDist += 0.4;\n      \tm = origin + ray * marchingDist;    \n    }\n    \n\treturn ii;    \n}\n\n\nbool rayMarching(in vec3 origin, in vec3 ray, out vec3 m, out vec3 normal) {\n    \n    float\tmarchingDist = 38.0;\n    float \tnbIter \t\t = 0.0;\n\n \tm = origin;   \n    \n    for(int i=0; i<200; i++) {\n        \n    \tfloat fieldIntensity = getFieldIntensity(m, normal);\n        \n        if(fieldIntensity > 0.5) {\n            return true;\n        }\n        else {\n            marchingDist += 0.075;\n        \tm = origin + ray * marchingDist;    \n        }\n    }\n    \n\treturn false;    \n}\n\n\nvec4 computeColor(in vec3 ray, in vec3 m, in vec3 normal, in vec3 light) {\n    \n    vec3 lightRay = normalize(m - light);\n    float diffuse = dot(normal, -lightRay);\n    \n    vec3 reflectedLight  = reflect(lightRay, normal);\n    float hilight \t\t = pow(max(dot(reflectedLight, -ray),0.0), SHININESS);\n\n    //vec3 baseColor = vec3(1,0.6,0.1);\n    \n    vec3 baseColor = vec3(texture(iChannel0, vec2(ray.x, ray.y))) * vec3(1,0.9,0.1);\n    \n    vec3 diffuseComponent = baseColor * 0.8 * diffuse;\n    vec3 hilightComponent = vec3(1.0, 1.0, 1.0) * hilight;    \n    vec3 ambiantComponent = vec3(1,0.3,0.1) * 0.4;        \n\n    return vec4(diffuseComponent + hilightComponent + ambiantComponent, 1.0);\n}\n\nfloat shadow(in vec3 light, in vec3 eye, in vec3 ray, in vec3 m, in vec3 normal) {\n    \n    const float wallDist = 42.0;\n    vec3 wallPoint = ray / ray.z * wallDist;\n\n    vec3 lightdir = normalize(wallPoint - light);\n\n    const float e = 0.2;\n    float nbColl = 1.0;\n    \n    float i = getFieldIntensity(light, lightdir, m, normal);\n    \n    \n    return 1.0 - smoothstep(7.5,17.5, i);\n    \n    \n    /*\n    if(rayMarching(light, lightdir, m, normal)) {\n        \n        float shadow = max(dot(-lightdir,normal), 0.0);\n        \n        return 1.0 - shadow;\n    }\n    else {\n\t \treturn 1.0;   \n    }\n\t*/\n}\n\nvec4 background(in vec3 viewportCoord, in vec3 light, in vec3 eye, in vec3 ray, in vec3 m, in vec3 normal) {\n    \n    vec3 texcol = texture(iChannel0, viewportCoord.xy + 0.5).rgb;\n\tvec3 finalColor = mix(texcol, vec3(0,0,0), 1.0 - shadow(light, eye, ray, m, normal));    \n    \n    return vec4(finalColor, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float \tratio \t\t\t= iResolution.x/iResolution.y;\n    vec3 \tviewportCoord \t= vec3(fragCoord.xy/iResolution.y - vec2(ratio/2.0, 0.5), zNear);\n    \n    vec3\teye\t\t\t\t= vec3(0.0, 0.0, -0.8);\n    vec3\tray\t\t\t\t= normalize(viewportCoord - eye);\n    //vec3\tlight\t\t\t= vec3(-15.0*cos(iTime), 5.0*cos(iTime/3.0), 5.0);\n    vec3\tlight\t\t\t= vec3(-15.0, 5.0, 5.0);\n    \n    vec3\tm;\n    vec3 \tnormal;\n    \n    if(rayMarching(eye, ray, m, normal)) {\n        fragColor = computeColor(ray, m, normal, light);\n    }\n    else {\n        fragColor = background(viewportCoord, light, eye, ray, m, normal);\n    }\n}","name":"","description":"","type":"image"}]}