{"ver":"0.1","info":{"id":"4t3yRr","date":"1531536601","viewed":174,"name":"SickBow's Eye","username":"sickbow","description":"Eye","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["eye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1419526535\n\nfloat noise(vec2 uv){\n \n    return fract(sin(uv.x*100. + uv.y*100.));\n    \n}\n\nvec3 eyeBall (vec2 uv, vec3 col, float sizeR, vec2 focus){\n \n    vec2 uvFocus = uv-focus;\n    vec2 glareCenter = vec2(.2,.2);\n    vec3 iris = vec3(57./255., 113./255., 204./255.);\n    float pupSize = sizeR/4.25 + (sin(iTime))/2. * .05;\n    \n    //polar coordinates\n    float r = length(uvFocus);\n    float a = atan(uvFocus.y/uvFocus.x);\n    float rOfTheta = length(vec2(sizeR/2.*cos(45.*a) * cos(a), sizeR/2.*cos(45.*a) * sin(a))); //vector valued function of polar function inside of iris\n    float d = 100.; //distance of uv vector from rOfTheta\n    \n     //iris\n     col = mix(iris, col, smoothstep(sizeR/2.3, sizeR/2., r ));\n \n    //pupil   \n     col = mix(vec3(0.), col, smoothstep( pupSize * 4.25/5.5, pupSize, r ) );\n        \n    //shadows \n     col = mix(col, vec3(0.), smoothstep( 0.5, sizeR, length(uv-focus/2.5)) ); //divide focus to change the speed of outer eye proportional to iris/pupil\n\t col = mix(col, vec3(255./255., 16./255., 2./255.), smoothstep( 0.5, sizeR+.55, length(uv-focus/2.5) ) ); //divide focus to change the speed of inner eye proportional to iris/pupil\n    \n    //lines\n    if (r < rOfTheta)\n    {\n        for(float i = 0.; i < 2.*pi; i+= 2.*pi/10.)\n        {    \n           d = min(d, length(uvFocus - rOfTheta * vec2( cos(a+i), sin(a+i)) ) ); \n        }\n        \n     col = mix(vec3(0.), col, smoothstep(pupSize, pupSize*1.5, r)*smoothstep(.95, 0., d)*smoothstep(0., sizeR/2., r ));   \n    }\n    \n    //glare\n    col += 1.-smoothstep(0., .3, length(uv-glareCenter));\n    \n    //eyelids\n    float cosWave = .35*cos(2.*pi/3.*uv.x);\n    \n    if(uv.y > cosWave){\n     col = mix(vec3(0.), col, 1.-smoothstep(0.,.1, uv.y-(cosWave) ) );     \n    }\n    if(uv.y < -cosWave){\n     col = mix(vec3(0.), col,1.- smoothstep(0.,.1, (-cosWave)-uv.y) );   \n    }\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\tvec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(1.);\n\t\n    float d = .1*(2.*(floor(sin(iTime/(3.*pi/5.)))+.5)) * (1.+sin(iTime/(3.*pi/5.)))/3.;\n    float theta = 0.;\n    theta += noise( vec2(floor(iTime/(3.*pi/5.)) ));\n    \n    vec2 focusVec = vec2(cos(theta),sin(theta)) * d;\n    \n    //focusVec = mouse; //uncomment to focus eye on mouse\n    \n    col = eyeBall (uv, col, .75, focusVec);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}