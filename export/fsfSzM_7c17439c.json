{"ver":"0.1","info":{"id":"fsfSzM","date":"1618850045","viewed":548,"name":"Long-Exposure Camera","username":"Zi7ar21","description":"yeet","likes":2,"published":3,"flags":34,"usePreview":0,"tags":["camera","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ####### Long-Exposure Camera #######\n// Made by Zi7ar21 on April 19th, 2021\n// Last Updated:\n// April 19th, 2021 at 10:10 Mountain Standard Time\n\n// If you found this anywhere except Shadertoy, the original and possibly updated version can be found at:\n// https://www.shadertoy.com/view/fsfSzM\n\n// Image Preview\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Get the Image\n    vec4 texel = texel0;\n\n    // Convert Linear to sRGB\n    vec3 color = pow(texel.rgb, vec3(1.0/gamma));\n\n    // Output the Image Preview\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// ##### CAMERA INPUT #####\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Get the Incoming Frame from the Camera\n    vec3 color = texture(iChannel0, gl_FragCoord.xy/resolution.xy).rgb;\n\n    // Convert sRGB to Linear\n    color = pow(color, vec3(gamma));\n\n    // Ensure the Frame is within Range\n    color = clamp(color, 0.0, 1.0);\n\n    // Output the New Frame\n    fragColor = vec4(color*cameraBrightness, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// ##### IMAGE PROCESSING #####\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Get the Previous Frame\n    fragColor = iFrame != 0 ? texel0 : vec4(0.0);\n\n    // Get the Frame from the Camera Buffer\n    vec4 texel = texel1;\n\n    // Output the New Frame\n    fragColor += vec4(texel.rgb, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// ##### PARAMETERS #####\n#define gamma 2.2\n\n// Camera Adjustments\n// These are performed to the input, not the stack\n#define cameraBrightness 1.0\n\n// Processed Adjustments\n// These are performed to the stack, not the input\n#define postfxBrightness 1.0\n\n// ##### CONSTANTS #####\n#define resolution iResolution\n\n// Sample Channels\n#define texel0 texelFetch(iChannel0, ivec2(gl_FragCoord.xy), 0)\n#define texel1 texelFetch(iChannel1, ivec2(gl_FragCoord.xy), 0)\n#define texel2 texelFetch(iChannel2, ivec2(gl_FragCoord.xy), 0)\n#define texel3 texelFetch(iChannel3, ivec2(gl_FragCoord.xy), 0)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// ##### IMAGE EXPORT #####\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Get the Frame\n    vec4 texel = texel0;\n\n    // Compute the Final Image\n    vec3 color = texel.a != 0.0 ? texel.rgb/texel.a : texel.rgb;\n\n    // Output the Rendered Image\n    fragColor = vec4(color*postfxBrightness, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}