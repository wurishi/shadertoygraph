{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Distributed under CC-BY-NC-SA license (c) 2013 by Anssi EtelÃ¤niemi, aetelani(a)live.com \n#define PI 3.141593\nvec2 r, d;\nbool blur = false;\n\nvec4 gb(sampler2D tex, vec2 p);\n\nfloat ref(sampler2D t, vec2 p,float offx, float offy) {\n\tvec4 v = blur ? gb(t, vec2(p.x + offx, p.y + offy)) :\n\ttexture(t, vec2(p.x + offx, p.y + offy)/r);\n\treturn dot(v.rgb, vec3(0.2125, 0.7154, 0.0721));\n}\n\nvec4 gb(sampler2D tex, vec2 p) {\n\tconst float sigma = 2.0;\n\tvec4 acc = texture(tex, p/r);\n\tconst int it = int(sigma * 3.0);\n\tfloat Z = sigma/(sqrt(float(it) * PI));\t\n\tfor (int i = 1; i <= it; i++) {\n\t\tfloat c = exp(-0.5 * float(i) * float(i)/ (sigma * sigma));\n\t\tacc += \n\t\t\t(texture(tex, (d.x - float(i))/r)) * c +\n\t\t\t(texture(tex, (d.x + float(i))/r)) * c +\n\t\t\t(texture(tex, (d.y - float(i))/r)) * c +\n\t\t\t(texture(tex, (d.y + float(i))/r)) * c;\n\t} \n\treturn acc * Z;\n}\n\nvec4 ed(sampler2D t, vec2 p) {\n// Sobel Edge detection\n    float\n\t\tsx =\n\t\t1.0 * ref(t, p,  1.0, -1.0) +\n\t\t2.0 * ref(t, p,  1.0,  0.0) +\n\t\t1.0 * ref(t, p,  1.0,  1.0) +\t\t\n\t\t-1.0 * ref(t, p, -1.0, -1.0) +\n\t\t-2.0 * ref(t, p, -1.0,  0.0) +\n\t\t-1.0 * ref(t, p, -1.0,  1.0),\n\t\tsy =\n\t\t1.0 * ref(t, p, -1.0,  1.0) +\n\t\t2.0 * ref(t, p,  0.0,  1.0) +\n\t\t1.0 * ref(t, p,  1.0,  1.0) +\t\t\n\t\t-1.0 * ref(t, p, -1.0, -1.0) +\n\t\t-2.0 * ref(t, p,  0.0, -1.0) +\n\t\t-1.0 * ref(t, p,  1.0, -1.0);\n\treturn vec4(sqrt(sx + sy));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    r = iResolution.xy;\n    d = fragCoord.xy;\n\tvec2 p = fragCoord.xy;\n\tvec2 uv = p / iResolution.xy;\n\tvec4 mon = texture(iChannel0, uv);\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\tfragColor = mon;\n\t\n\tif(p.x  >= iMouse.x && p.y >= iMouse.y) { // I\n\t\tblur = true;\n\t\tfragColor =  mix(mon, ed(iChannel0, p), 0.5);\n\t} else if(p.x >= iMouse.x && p.y < iMouse.y) { // II\n\t\tblur = true;\n\t\tfragColor = ed(iChannel0, p);\n\t} else if(p.x < iMouse.x && p.y < iMouse.y) { // III\n\t\tblur = false;\n\t\tfragColor = ed(iChannel0, p);\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBGWR","date":"1385811299","viewed":406,"name":"edge recognition","username":"aetelani","description":"optimized versions. mouse controls, point and click.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["blur","contrast"],"hasliked":0,"parentid":"","parentname":""}}