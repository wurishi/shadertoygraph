{"ver":"0.1","info":{"id":"4cGcWt","date":"1732509739","viewed":25,"name":"Infinity-Test","username":"adras","description":"Infinity-Test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["infinity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= vec2(0.5, 0.5); // Center the coordinates\n    uv *= 2.0;\n\n    // Parameters for wave oscillations\n    float freqMultiplier = 20.0;\n    float timeMultiplier = 8.0;\n    float time = iTime;\n\n    // Pyramid geometry (projected onto 2D)\n    vec2 vertices[5];\n    vertices[0] = vec2(-0.5, -0.5); // Bottom-left\n    vertices[1] = vec2(0.5, -0.5);  // Bottom-right\n    vertices[2] = vec2(0.0, 0.7);   // Top (apex)\n    vertices[3] = vec2(0.0, -1.2);  // Bottom (inverted apex)\n    vertices[4] = vertices[0];      // Close the base loop\n\n    // Draw lines between vertices with wave oscillations\n    float lineThickness = 0.02; // Thickness of the lines\n    float colorIntensity = 0.0; // Composite intensity for coloring\n\n    for (int i = 0; i < 4; i++) {\n        // Start and end points of the line segment\n        vec2 start = vertices[i];\n        vec2 end = vertices[i + 1];\n\n        // Parametric equation for the line\n        float t = dot(uv - start, normalize(end - start)) / length(end - start);\n\n        // Projection of uv onto the line\n        vec2 proj = mix(start, end, clamp(t, 0.0, 1.0));\n\n        // Distance from uv to the line\n        float dist = length(uv - proj);\n\n        // Add wave oscillation along the line\n        float wave = sin(freqMultiplier * t + timeMultiplier * time);\n        dist -= wave * lineThickness * 0.5; // Oscillating effect\n\n        // Accumulate color intensity for lines within thickness\n        colorIntensity += smoothstep(lineThickness, 0.0, dist);\n    }\n\n    // Final color based on wave intensity\n    fragColor = vec4(colorIntensity, colorIntensity * 0.5, 1.0 - colorIntensity, 1.0);\n}","name":"Image","description":"","type":"image"}]}