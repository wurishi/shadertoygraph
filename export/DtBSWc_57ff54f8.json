{"ver":"0.1","info":{"id":"DtBSWc","date":"1676652750","viewed":276,"name":"Bilinear interpolation test","username":"djancool","description":"Bilinear interpolation test to learn to understand how it works","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["filtering","interpolation","bilinear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res 16.0\n\nfloat s_curve(float x, float p)\n{\n    float x1 = pow(x, p);\n    float x2 = pow(1.0 - x, p);\n    return x1 / (x1 + x2);\n}\n\nvec3 hash(vec2 i) {\n  return vec3(fract(sin(dot(i.xy, vec2(12.9898, 78.233))) * 43758.5453),\n              fract(sin(dot(i.xy, vec2(54.323, 21.123))) * 23452.2345),\n              fract(sin(dot(i.xy, vec2(31.432, 93.532))) * 98562.9867));\n}\n\nvec3 tex2D(vec2 uv)\n{\n    uv = fract(uv);\n    uv = floor(uv * res) / res;\n    return hash(uv);\n}\n\nvec3 bilInterp(vec2 uv)\n{\n    float pxl = 1.0 / res;\n    uv -= pxl * 0.5;\n    vec2 blend = fract(uv * res);\n\n    vec3 col_x1 = tex2D(uv + vec2(0.0, 0.0));\n    vec3 col_x2 = tex2D(uv + vec2(pxl, 0.0));\n    vec3 col_y1 = tex2D(uv + vec2(0.0, pxl));\n    vec3 col_y2 = tex2D(uv + vec2(pxl, pxl));\n    \n    vec3 col_x = mix(col_x1, col_x2, blend.x);\n    vec3 col_y = mix(col_y1, col_y2, blend.x);\n    vec3 col = mix(col_x, col_y, blend.y);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x + iTime * 0.02;\n    uv *= 3.0;\n    uv = (uv - vec2(0.0, 0.333));\n    \n    // Base color\n    vec3 col_NN = tex2D(uv);\n    vec3 col_BI = bilInterp(uv);\n    \n    float time_frac = fract(iTime * 0.2);\n    float blend = s_curve(min(time_frac, 1.0 - time_frac) * 2.0, 14.0);\n    vec3 col = mix(col_NN, col_BI, blend);\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}