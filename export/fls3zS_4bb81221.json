{"ver":"0.1","info":{"id":"fls3zS","date":"1622325419","viewed":293,"name":"gif mask","username":"Carandiru","description":"fork of https://www.shadertoy.com/view/wtByz1\n","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["goldenratio"],"hasliked":0,"parentid":"wtByz1","parentname":"golden ratio sphere"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/fls3zS\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 col = textureLod(iChannel0, uv, 1.5).ra;\n    vec2 blur = textureLod(iChannel0, uv, 4.0).ra;\n    \n    float opacity = col.x;\n    float d = 1.0f / (1.0f + fract(col.y*col.y));\n    \n    float color = opacity * d;\n    \n    opacity = blur.x;\n    d = 1.0f / (1.0f + fract(blur.y*blur.y));\n    \n    color = mix(color, opacity * d, d);\n    \n    color += color * color;\n    \n    fragColor = vec4(vec3(color),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/fls3zS\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n#define NUM_SAMPLES 146.0\n#define USE_GOLDEN_RATIO\n\nfloat circle(in vec2 uv, in vec2 p, in float rad)\n{\n    vec2 puv = uv - p;\n    float rsquare = rad*rad;\n    return smoothstep(rsquare + 0.000000625, rsquare - 0.000000625, dot(puv, puv));\n}\n\nmat3 rotateAroundY(float a)\n{\n    float cs = cos(a);\n    float sn = sin(a);\n    return\n        mat3( cs, 0.0, -sn,\n              sn, 0.0,  cs,\n             0.0, 1.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = radians(180.0);\n    float aspect = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = 2.0f * uv - 1.0f;\n    \n    float col = 0.0;\n    \n    mat3 rot = rotateAroundY(iTime / 3.0);\n    \n    for(float i = 0.0; i < NUM_SAMPLES; i += 1.0) {\n        float phi = acos(1.0 - 2.0 * (i + 0.5) / NUM_SAMPLES);\n\n        float theta = pi * (1.0 + sqrt(130.0)) * i;\n\n        float sphi = sin(phi);\n        vec3 p = vec3(\n            sphi * cos(theta), \n            sphi * sin(theta),\n            cos(phi)\n        );\n        p = rot * p;\n        p *= 0.97f;\n        \n        float clr = (1.0 - (p.z + 0.5) * 0.5);\n\n        float plot = circle(uv, p.xy, 0.0065);\n        col = mix(col, clr, plot);\n    }\n    \n    float last = textureLod(iChannel0, fragCoord.xy/iResolution.xy, 0.0).r;\n    \n    fragColor = vec4(vec3(col + last * 0.98f),float(iTime));\n}","name":"Buffer A","description":"","type":"buffer"}]}