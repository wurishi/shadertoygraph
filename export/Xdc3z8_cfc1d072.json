{"ver":"0.1","info":{"id":"Xdc3z8","date":"1447906042","viewed":3661,"name":"adrenaline","username":"jt","description":"Testing Shadertoy's new Soundcloud-feature to visualize my composition \"adrenaline\"\n(basically a polar version of [url]https://www.shadertoy.com/view/Mst3Rr[/url])","likes":47,"published":1,"flags":64,"usePreview":0,"tags":["noise","clouds","music","lighting","particles","polar","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zr","filepath":"https://soundcloud.com/jakobthomsen/adrenaline-revisited","previewfilepath":"https://soundcloud.com/jakobthomsen/adrenaline-revisited","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Adrenaline - written 2015-11-19 by Jakob Thomsen\n// Testing Shadertoy's new Soundcloud-feature to visualize my composition \"adrenaline\".\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// (basically a polar version of https://www.shadertoy.com/view/Mst3Rr)\n// Lighting based on binary-tree https://www.shadertoy.com/view/lljXW3\n// Clouds based on https://www.shadertoy.com/view/Ml2XDK\n// Sparks based on https://www.shadertoy.com/view/4l2SW3\n// FFT-colors based on https://www.shadertoy.com/view/MsdGzn\n\n#define pi 3.1415926\n\nvec2 BinaryTreeSubDiv2(vec2 v)\n{\n    v *= exp2(ceil(-log2(v.y)));\n    v.x *= .5;\n    return fract(v);\n}\n\n// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nfloat simplegridnoise(vec2 v)\n{\n    // NOTE: Setting s = 0.01 causes horizontal-lines-artifact with texture-lookup.\n    //       Use s = 1.0 / 256.0 (thanks iq) or switch filtering to linear (thanks tomkh).\n    //float s = 0.01;\n    float s = 1.0 / 256.0;\n    vec2 fl = floor(v);\n    vec2 fr = fract(v);\n    float mindist = 1000.0;\n    for(float y = -1.0; y <= 1.0; y++)\n    {\n        for(float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offset = vec2(x, y);\n            float phi = 3.1415926 * 2.0 * (iTime * 0.2 + hash(fl + offset).x);\n            vec2 pos = 0.5 + 0.5 * vec2(cos(phi), sin(phi));\n            float d = length(fr - (pos + offset));\n            mindist = min(mindist, d);\n        }\n    }\n    \n    return mindist;\n}\n\nfloat spherenoise(vec2 v)\n{\n    return (1.0 - pow(simplegridnoise(v) / sqrt(2.0), 2.0));\n}\n\nvec3 spherenoisenrm(vec2 v)\n{\n    float d = 0.01;\n    return normalize(\n           vec3(spherenoise(v + vec2(  d, 0.0)) - spherenoise(v + vec2( -d, 0.0)),\n                spherenoise(v + vec2(0.0,   d)) - spherenoise(v + vec2(0.0,  -d)),\n                d));\n}\n\nfloat fractalspherenoise(vec2 v)\n{\n    float val = 0.0;\n    const float n = 4.0;\n    for(float i = 0.0; i < n; i++)\n    {\n    \tval += pow(0.5, i + 1.0) * spherenoise(pow(2.0, i) * v);\n    }\n    return val;\n}\n\nfloat blobnoise(vec2 v, float s)\n{\n    return pow(.5 + .5 * cos(pi * clamp(simplegridnoise(v)*2., 0., 1.)), s);\n}\n\nfloat fractalblobnoise(vec2 v, float s)\n{\n    float val = 0.;\n    const float n = 2.;\n    for(float i = 0.; i < n; i++)\n        val += 1.0 / (i + 1.0) * blobnoise((i + 1.0) * v + vec2(0.0, -iTime * 10.0), s);\n    \t//val += pow(0.5, i+1.) * blobnoise(exp2(i) * v + vec2(0, iTime * 1.0), s);\n\n    return val;\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n{\n    U = U.xy / iResolution.xy;\n    U = 2.*U-1.;\n    U *= 0.75;\n    U.x *= iResolution.x / iResolution.y;\n    U = vec2(atan(U.y, U.x) / pi, length(U));\n    float fft  = texture( iChannel0, vec2(U.y,0.25) ).x; // freq\n    float wave = texture( iChannel0, vec2(U.x,0.75) ).x; // wave\n    float val = pow(fractalspherenoise(U * 10.0-vec2(0.,2.*iTime)), 2.0);\n    vec3 c = mix(abs(wave)*2.0 * mix(vec3(1.0, 0.125, 0.0), vec3(1.0, 1.0, 0.0), U.y) * fractalblobnoise( U * 20., 20.), vec3(fft, 4.0 * fft * (1.0 - fft), 1.0 - fft) * fft, vec3(val));\n    vec4 rnd0 = texture(iChannel1, fract(U + iTime * .1));\n    vec4 rnd1 = texture(iChannel1, fract(.1 * U + iTime * .1));\n    vec2 V = BinaryTreeSubDiv2((vec2(U.x*4., 1. -.75*U.y) + 0.1 * vec2(2.0 * rnd1.x - 1.0, 0.0)));\n    c += hash(vec2(iTime)).x * clamp(abs(wave)*4.0 * rnd1.y*U.y*(1. - smoothstep(0., .5 * rnd0.x, abs(4. * abs(V.x -.5) - (1. - V.y)))), 0., 1.);\n    //c += 4.0 * clamp(10.0*pow(hash(vec2(iTime)).x, 5.0)-9.0,0.0,1.0) * clamp(rnd1.y*(1. - smoothstep(0., .5 * rnd0.x, abs(4. * abs(V.x -.5) - (1. - V.y)))), 0., 1.);\n    o = vec4(c,1.0);\n}\n","name":"","description":"","type":"image"}]}