{"ver":"0.1","info":{"id":"NlK3RW","date":"1637256490","viewed":147,"name":"FEZ Shader - Pixel Stars","username":"sterlingsowards","description":"This simple shader is inspired by the game Fez. Click on the left half of the screen to make the background black like the start screen, and the right half to make the background a deep purple (like in the scene where you get the Fez)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","zoom","pixel","colorful","stars","rainbow","starfield","videogame","fez","indie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 15.\n#define WIDTH .005\n#define ZOOM_FAR 9.\n#define ZOOM_CLOSE .0\n\nfloat rand( float n )\n{\n    return fract(sin(n * 592.) * 2467.) * .5 + .5;\n}\n\nvec4 starLayer( vec2 uv, float zoom, float layer, float blur )\n{\n    blur = clamp(pow(blur, 3.), 0., 1.);\n    // Create grid coordinates based on zoom\n    vec2 gz = fract(uv * zoom) - .5;\n    float id = floor(uv * zoom).x * 67. + floor(uv * zoom).y * 13.;\n    \n    // Give each star a random color determined by the id\n    float n = rand(id + layer * 87.);\n    vec4 col = vec4(n, fract(n*54.), fract(n*347.), 1.);\n    \n    // Decide if the point is in the star or not\n    col.a = (abs(gz.x) < WIDTH && abs(gz.y) < WIDTH) ? blur : 0.;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) irrespective of aspect ratio\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    // Set the background color - click on left side of screen its black, right its deep purple\n    vec3 col = vec3(0.14117647058, 0.0862745098, 0.20392156862) * smoothstep(.499999, .5, iMouse.x / iResolution.x);\n    \n    for (float i = 0.; i < NUM_LAYERS; i++) {\n        // Draw a star layer back to front\n        // i = 0, star is far away\n        // i = 1, star is close\n        float zoom = mix(ZOOM_FAR, ZOOM_CLOSE, fract((i+iTime)/(NUM_LAYERS - 1.)));\n        float blur = (zoom - ZOOM_FAR) / ((ZOOM_CLOSE+1.) - ZOOM_FAR);\n        vec4 sl = starLayer(uv, zoom, i, blur);\n        col = sl.rgb * 2. * sl.a + col * (1. - sl.a);\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}