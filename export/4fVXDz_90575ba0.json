{"ver":"0.1","info":{"id":"4fVXDz","date":"1715052816","viewed":58,"name":"Goop","username":"Grendor","description":"raymarch, noises","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","noises"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);\n}\n\n// Simplex Noise\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy;\n    vec3 x3 = x0 - D.yyy;\n\n    i = mod(i, 289.0);\n    vec4 p = permute(permute(permute(\n        i.z + vec4(0.0, i1.z, i2.z, 1.0))\n        + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n        + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    vec4 j = p - 49.0 * floor(p * 0.020833333);\n    vec4 x_ = floor(j * 0.025);\n    vec4 y_ = floor(j - 7.0 * x_);\n    vec4 x = x_ * 0.142857142857;\n    vec4 y = y_ * 0.142857142857;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 g0 = vec3(a0.xy, h.x);\n    vec3 g1 = vec3(a0.zw, h.y);\n    vec3 g2 = vec3(a1.xy, h.z);\n    vec3 g3 = vec3(a1.zw, h.w);\n\n    vec4 norm = inversesqrt(vec4(dot(g0, g0), dot(g1, g1), dot(g2, g2), dot(g3, g3)));\n    g0 *= norm.x;\n    g1 *= norm.y;\n    g2 *= norm.z;\n    g3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n\n    return 42.0 * dot(m * m, vec4(dot(g0, x0), dot(g1, x1), dot(g2, x2), dot(g3, x3)));\n}\n\n// Simplex noise wrapper for the shader\nfloat noise(vec3 p) {\n    return snoise(p);\n}\n\nfloat noisey(vec3 p, float scale) {\n    p *= scale;\n    vec3 gridPos = floor(p);\n    vec3 gridFrac = fract(p);\n\n    float minDist = 1.0;\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            for (int z = -1; z <= 1; z++) {\n                vec3 neighbor = vec3(x, y, z);\n                vec3 point = neighbor + vec3(hash(neighbor.xy + gridPos.xy));\n                vec3 diff = gridFrac - point;\n                float dist = dot(diff, diff * 0.99);\n                minDist = min(minDist, dist);\n            }\n        }\n    }\n    return sqrt(minDist);\n}\n\n// Modified noiseDifferenceSDF to use Simplex noise\nfloat noiseDifferenceSDF(vec3 p, float t1, float t2) {\n    float noise1 = noise(p * t1);\n    float noise2 = noisey(p * t2, 0.1);\n    float noise3 = (noise2 / noise1) * 2.;\n    float noise4 = dot(noise1, noise3);\n    return abs(noise1 - ((0.5 * noise2) + (0.25 * noise3)*(0.25 * noise4)));\n}\n\nvec3 getNormal(vec3 p, float t1, float t2) {\n    vec2 e = vec2(0.1, 0.0);\n    return normalize(vec3(\n        noiseDifferenceSDF(p + e.xyy, t1, t2) * noiseDifferenceSDF(p - e.xyy, t1, t2)*4.,\n        noiseDifferenceSDF(p + e.yxy, t1, t2) / noiseDifferenceSDF(p - e.yxy, t1, t2),\n        noiseDifferenceSDF(p + e.yyx, t1, t2) / noiseDifferenceSDF(p - e.yyx, t1, t2)\n    ));\n}\n\nvec3 rotateLight(vec3 lightDir, float angleX, float angleY) {\n    float cosX = cos(angleX);\n    float sinX = sin(angleX);\n    float cosY = cos(angleY);\n    float sinY = sin(angleY);\n\n    mat3 rotationX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, cosX, -sinX,\n        0.0, sinX, cosX\n    );\n\n    mat3 rotationY = mat3(\n        cosY, 0.0, sinY,\n        0.0, 1.0, 0.0,\n        -sinY, 0.0, cosY\n    );\n\n    return rotationY * rotationX * lightDir;\n}\n\nvec3 rayMarch(vec3 ro, vec3 rd, float t1, float t2, vec3 lightDir, float minDepth, float maxDepth) {\n    float t = minDepth;\n    vec3 accumulatedColor = vec3(0.0); // Initialize accumulated color\n    float accumulatedAlpha = 0.0; // Initialize accumulated alpha\n\n    for (int i = 0; i < 50; i++) {\n        vec3 p = ro + t * rd;\n        float d = noiseDifferenceSDF(p, t1, t2);\n\n        if (d < 0.2 + (iTime * 0.0001)) {\n            vec3 normal = getNormal(p, t1, t2);\n            float diff = max(dot(normal, lightDir), 0.0);\n\n            // Color based on light\n            vec3 color = vec3(0.5, 0.3 , 0.8) + diff*vec3(0.0, 0.2, 0.55);\n\n            // Transparency based on distance\n            float alpha = exp(-t * 4.09);\n\n            // Blend the accumulated color using alpha\n            accumulatedColor = mix(accumulatedColor, color, alpha);\n            accumulatedAlpha += alpha;\n\n            // If opacity exceeds a threshold, stop marching\n            if (accumulatedAlpha >= 0.9) break;\n        }\n\n        t += d * 1.95;\n        if (t > maxDepth) break;\n    }\n\n    return accumulatedColor * (17.3 - accumulatedAlpha)*7.5; // Adjust final color by accumulated alpha\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float t1 = 1.0 + iTime * 0.00301;\n    float t2 = 3.0 + iTime * 0.001;\n\n    vec3 ro = vec3(0.25 * sin(iTime * 0.01), 0.1, 3.0-(iTime*0.05)); // Camera position\n    vec3 rd = normalize(vec3(uv, -1.0)); // Ray direction\n\n    vec2 normalizedMouse = iMouse.xy / iResolution.xy;\n    float angleX = normalizedMouse.y * 2.0 * 3.14159265; // Range: [0, 2π]\n    float angleY = normalizedMouse.x * 2.0 * 3.14159265; // Range: [0, 2π]\n\n    vec3 lightDir = rotateLight(normalize(vec3(1.0, 0.8, -1.0)), angleX, angleY);\n\n    float minDepth = 1.3; // Minimum depth to start ray marching\n    float maxDepth = 4.6; // Maximum depth to stop ray marching\n\n    vec3 color = rayMarch(ro, rd, t1, t2, lightDir, minDepth, maxDepth);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}