{"ver":"0.1","info":{"id":"Wly3Dz","date":"1580853704","viewed":69,"name":"RayMarching 2 spheres 1 torus","username":"GrisWoldDiablo","description":"raymarching 2 spheres and a torus","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p){\n\tvec4 s = vec4(0.+sin(iTime),1,6,1);\n    float sphereDist = length(p-s.xyz)-s.w;\n    vec4 s2 = vec4(1,1,4.*sin(iTime)+4.,1);\n    float sphereDist2 = length(p-s2.xyz)-s2.w;\n    vec4 s3 = vec4(-2,1,6,.5);\n    float sphereDist3 = length(p-s3.xyz)-s3.w;     \n    float planeDist = p.y;\n    float d = min(sphereDist, planeDist);\n    d = min(sphereDist2, d);\n    d = min(d, sphereDist2);\n    d = min(d, sphereDist3);\n    p.z -= 3.;\n    p.y -= abs(1. *sin(iTime) *.5);\n    \n    //p.y += 1.;\n    d = min(d,length(vec2(length(p.xz)-.5,p.y)) - .1);\n    d = min(d, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    for(int i = 0; i<MAX_STEPS;i++){\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n\t\n\treturn dO;\n}\n\nvec3 GetNormal(vec3 p){\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec2 M){\n\tvec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n\n    float dif = clamp(dot(n, l),0.,1.);\n\tfloat d = RayMarch(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = (iMouse.xy/iResolution.xy)*2.-1.;\n    M.y *= cos(M.y);//2.;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0.,1.,0);\n    ro.xy += M;\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro,rd);\n    vec3 p = ro + rd * d;\n\n    float dif = GetLight(p, M);\n    vec3 n = GetNormal(p);\n    col.rb = n.rg;\n    col.r += dif;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}