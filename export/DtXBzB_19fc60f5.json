{"ver":"0.1","info":{"id":"DtXBzB","date":"1693083837","viewed":66,"name":"Mandelbrot antialiasing","username":"adrians","description":"Slowly panning across a fractal aliases even if you average multiple samples.\nHere I'm constraining the samples to a grid based on pixel footprint and bilinearly interpolating the results.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","antialising"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on https://www.shadertoy.com/view/4df3Rn\n\n\nfloat mandelbrot( in vec2 c )\n{\n    #if 1\n    {\n        float c2 = dot(c, c);\n        // skip computation inside M1 - https://iquilezles.org/articles/mset1bulb\n        if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;\n        // skip computation inside M2 - https://iquilezles.org/articles/mset2bulb\n        if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;\n    }\n    #endif\n\n\n    const float B = 256.0;\n    float l = 0.0;\n    vec2 z  = vec2(0.0);\n    for( int i=0; i<512; i++ )\n    {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        if( dot(z,z)>(B*B) ) break;\n        l += 1.0;\n    }\n\n    if( l>511.0 ) return 0.0;\n    \n    // ------------------------------------------------------\n    // smooth interation count\n    //float sl = l - log(log(length(z))/log(B))/log(2.0);\n\n    // equivalent optimized smooth interation count\n    return l - log2(log2(dot(z,z))) + 4.0;\n}\n\nvec3 mandelbrotc(float n) {\n    return 0.5 + 0.5*cos( 3.0 + n*0.15 + vec3(0.0,0.6,1.0));\n}\n\nvec3 mandelbrotc(vec2 c) {\n    return mandelbrotc(mandelbrot(c));\n}\n\nvec3 mandelbrotaa(vec2 c, bool aa) {\n    float footprint = dFdx(c.x);\n    \n    if (!aa) {\n        vec3 v0 = mandelbrotc(c + vec2(0,0) * footprint);\n        vec3 v1 = mandelbrotc(c + vec2(1,0) * footprint);\n        vec3 v2 = mandelbrotc(c + vec2(0,1) * footprint);\n        vec3 v3 = mandelbrotc(c + vec2(1,1) * footprint);\n        return (v0 + v1 + v2 + v3) / 4.0;\n    }\n\n    // lower resolution grid\n    float log2g = log2(footprint) + 1.0;\n    float granularity = pow(2.0, floor(log2g));\n        \n    vec2 cf = fract(c / granularity);\n    c = c - cf * granularity;\n\n    vec3 v0 = mandelbrotc(c + vec2(0,0) * granularity);\n    vec3 v1 = mandelbrotc(c + vec2(1,0) * granularity);\n    vec3 v2 = mandelbrotc(c + vec2(0,1) * granularity);\n    vec3 v3 = mandelbrotc(c + vec2(1,1) * granularity);\n    \n    vec3 col0 = mix(mix(v0, v1, cf.x), mix(v2, v3, cf.x), cf.y);\n        \n    // higher resolution grid\n    vec3 v4 = mandelbrotc(c + vec2(0.5,0.5) * granularity);\n    vec3 v5 = mandelbrotc(c + vec2(step(0.5, cf.x), 0.5) * granularity);\n    vec3 v6 = mandelbrotc(c + vec2(0.5, step(0.5, cf.y)) * granularity);\n    vec3 v7 = cf.x < 0.5 ? (cf.y < 0.5 ? v0 : v2) : (cf.y < 0.5 ? v1 : v3);\n    \n    vec2 cf1 = abs(cf - 0.5) * 2.0;\n    vec3 col1 = mix(mix(v4, v5, cf1.x), mix(v6, v7, cf1.x), cf1.y);\n   \n    return mix(col1, col0, fract(log2g));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0* fragCoord.xy) / iResolution.y;\n    float sep = iMouse.x;\n\n   \n   #if 0\n    vec2 c = vec2(-0.75, cos(.2*iTime)*.1) + p / 64.0;\n   #else\n    float zoo = 0.63 + 0.37*cos(.07*iTime);\n    zoo = pow( zoo,8.0);\n    vec2 c = vec2(-.745,.186) + p*zoo;\n   #endif\n   \n    vec3 col = mandelbrotaa(c, fragCoord.x > sep);\n\n    col = mix(vec3(1,0,0), col, step(1.0, abs(fragCoord.x - sep)));\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}