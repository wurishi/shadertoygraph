{"ver":"0.1","info":{"id":"MlS3zK","date":"1430439315","viewed":456,"name":"VoxelSpace","username":"dila","description":"This went terribly wrong. I must learn how to do voxels properly.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["cube","voxel","world"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat noise(vec3 p)\n{\n    float ta = texture(iChannel0, vec2(p.x,p.y)).x;\n    float tb = texture(iChannel0, vec2(p.y,p.z)).x;\n    float tc = texture(iChannel0, vec2(p.x,p.z)).x;\n    return (ta + tb + tc) / 3.0;\n}\n\nfloat fakeBox(vec3 p)\n{\n    vec3 q = abs(p);\n    return min(q.x,min(q.y,q.z));\n}\n\nfloat toffset = 0.0;\n\nfloat map(vec3 p, vec3 r)\n{  \n    float sc = 3.0;\n    \n\tvec3 pc = floor(p*sc);\n    \n    vec3 pf = fract(p*sc) * 2.0 - 1.0;\n    \n    bool skip = false;\n    \n    if (noise((pc+toffset)*0.01) > 0.5) {\n     \tskip = true;\n    }\n    \n    if (abs(pc.x)<2.0 && abs(pc.y)<2.0) {\n     \tskip = true;\n    }\n    \n    if (skip) {\n        return 0.05 * fakeBox(pf + sign(r) * 4.0);\n    }\n    \n    return sdBox(pf, vec3(1.0));\n}\n\nvec3 normal(vec3 p, vec3 r)\n{\n    vec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(\n        map(p+o,r) - map(p-o,r),\n        map(p+o.yxy,r) - map(p-o.yxy,r),\n        map(p+o.yyx,r) - map(p-p.yyx,r)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p, r);\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvec3 shade(vec3 o, vec3 r)\n{\n    float t = trace(o, r);\n    vec3 world = o + r * t;\n    vec3 seed = floor(world*3.0) * 0.5;\n    vec3 sn = normal(world, r);\n    \n    vec3 ta = vec3(sin(seed.x+seed.z), cos(seed.y), sin(seed.z+seed.y));\n    ta = ta * 0.5 + 0.5;\n    vec3 tb = ta * 0.9;\n    \n    float bl = max(dot(sn,r), 0.0);\n    \n    vec3 fc = mix(ta, tb, 1.0-bl);\n    \n    float fog = 1.0 / (1.0 + t * t * t * 1.0);\n    \n    vec3 sh = fc * fog;\n    \n    return sh;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.33));\n    r *= xrot(iTime*0.5) * yrot(iTime) * zrot(iTime*0.5);\n    \n    vec3 o = vec3(0.0);\n    o.z += iTime;\n    \n    float tsc = 0.5;\n    float base = floor(50.0+iTime*tsc);\n    float intp = fract(50.0+iTime*tsc);\n    \n    toffset = 0.0;\n\tvec3 sa = shade(o, r);\n\n    toffset = base - 1.0;\n\tvec3 sb = shade(o, r);\n    \n    toffset = base - 2.0;\n\tvec3 sc = shade(o, r);\n    \n    float it = smoothstep(0.0, 1.0, intp);\n    \n    vec3 fa = mix(sa, sb, it);\n    vec3 fb = mix(fa, sc, 1.0-it);\n    \n\tfragColor = vec4(fb,1.0);\n}","name":"","description":"","type":"image"}]}