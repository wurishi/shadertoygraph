{"ver":"0.1","info":{"id":"dtffzn","date":"1696280304","viewed":179,"name":"IT HAS BUTTONS","username":"Kerdek","description":"A RENDERER WITH BUTTONS","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["renderer","buttons"],"hasliked":0,"parentid":"dtcXRj","parentname":"teds marcher 2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// gShaderToy.SetTexture(2, {mSrc:'https://ojuea.us/feathers.png', mType:'texture', mID:1, mSampler:{ filter: 'nearest', wrap: 'repeat', vflip:'true', srgb:'true', internal:'byte' }});\n\nDEFGET\n\nvoid mainImage(\n  out vec4 c,\n  in vec2 xy) {\n  c = texture(iChannel0, xy/iResolution.xy);\n  \n  // divide out number of samples\n  c.rgb /= c.a;\n  \n  // apply exposure\n  c.rgb *= get(3).y;\n  \n  // no negative colors\n  c.rgb = max(vec3(0.0), c.rgb);\n  \n  // DEUCES biophotometric tone mapping\n  c.rgb = exp(-1.0 / c.rgb);\n  \n  // convert sRGB to sR'G'B'\n  c.r = srgb_gamma(c.r);\n  c.g = srgb_gamma(c.g); \n  c.b = srgb_gamma(c.b);\n  \n  bool visible = get(0).x > 0.0;\n  bool click = iMouse.z > 0.0;\n  bool down = click && get(1).z < 0.0;\n\n  int x = int(iMouse.x);\n  int y = int(iMouse.y);\n\n  int px = int(xy.x);\n  int py = int(xy.y);\n\n  if (visible) {\n    if (px < 100 && py < 100) {\n      c = 0.25 + 0.5 * c; }\n\n#define CLICKY(l, r, b, t, v, u) \\\n    else if (    px > (l) && px < (r) && py > (b) && py < (t)) { \\\n      c = (v) &&  x > (l) &&  x < (r) &&  y > (b) &&  y < (t) ? vec4(1.0) : (u) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0); }\n\n    if (false) {}\n    CLICKY(10, 20, 10, 20, click, false) // left\n    CLICKY(25, 35, 10, 20, click, false) // down\n    CLICKY(40, 50, 10, 20, click, false) // right\n    CLICKY(10, 20, 25, 35, click, false) // port\n    CLICKY(25, 35, 25, 35, click, false) // up\n    CLICKY(40, 50, 25, 35, click, false) // starboard\n    CLICKY(55, 65, 10, 20, click, false) // dolly -\n    CLICKY(55, 65, 25, 35, click, false) // dolly +\n    // sensor controls\n    CLICKY(10, 20, 40, 50, click, get(3).x == 0.0) // rolloff +\n    CLICKY(10, 20, 55, 65, click, false) // rolloff -\n    CLICKY(25, 35, 40, 50, click, false) // iso -\n    CLICKY(25, 35, 55, 65, click, false) // iso +\n    // lens controls\n    CLICKY(40, 50, 40, 50, click, false) // zoom -\n    CLICKY(40, 50, 55, 65, click, false) // zoom +\n    CLICKY(55, 65, 40, 50, click, false) // focus -\n    CLICKY(55, 65, 55, 65, click, false) // focus +\n    CLICKY(70, 80, 40, 50, click, false) // aperture -\n    CLICKY(70, 80, 55, 65, click, false) // aperture +\n    CLICKY(70, 80, 10, 20, click, get(5).x > 0.0) // movement mode\n    CLICKY(70, 80, 10, 20, click, get(5).y > 0.0) // movement speed modifier\n  }\n    \n    \n  }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"DEFGET\n\n// object constants\n\nconst int obj_none = -1;\nconst int obj_backdrop = 0;\nconst int obj_planet = 1;\nconst int obj_sphere[2] = int[2](2, 3);\nconst int obj_tet = 4;\nconst int obj_torus = 5;\nconst int obj_absorb = 6;\nconst int obj_scatter = 7;\n\n// shading mode constants\n\nconst int bump_mode_none = -1;\nconst int bump_mode_linear = 0;\nconst int bump_mode_logistic = 1;\nconst int bump_mode_sqrt = 2;\n\nconst int scatter_mode_none = -1;\nconst int scatter_mode_uniform = 0;\nconst int scatter_mode_rayleigh = 1;\n\nconst int absorb_mode_none = -1;\nconst int absorb_mode_quadratic = 0;\n\n// main parameters\n\nconst int imax = 256;\nconst float dhit = 1e-5;\n\nconst float wavelength_min = 360.0;\nconst float wavelength_max = 780.0;\n\nvoid mainImage(out vec4 c, in vec2 xy) {\n  // skip the first frame because the config states\n  // haven't been filled in yet\n  if(iFrame == 0) discard;\n\n  // infinity\n  float inf = 1.0 / zero;\n\n  // ray state\n\n  int seed; // for pseudorandom state\n  vec4 cairn; // last visited\n  vec4 heading; // from cairn\n  float distance = 0.0; // since cairn\n  float wavelength; // wavelength\n  int obstacle = obj_none; // last hit\n  float weight = 1.0; // of sample\n  float contribution = 0.0; // of energy\n\n  { // setup\n\n    vec4 view_parms = get(2);\n    vec4 lens_parms = get(4);\n\n    // pseudorandom generator\n    seed = hash(iFrame, int(xy.x), int(xy.y));\n\n    // view matrix\n    mat4 view = translate(vec4(get(6).xyz, 0.0))\n      * rotate(dy, view_parms.x)\n      * rotate(dx, view_parms.y)\n      * rotate(dz, view_parms.z)\n      * translate(vec4(0.0, 0.0, -view_parms.w, 0.0));\n\n    vec2 lenspoint =\n      sqrt(unitrand(seed)) * lens_parms.z\n      * dir2(6.28318530718 * boxrand(seed));\n\n    wavelength = unitrand(seed)\n      * (wavelength_max - wavelength_min)\n      + wavelength_min;\n\n    cairn = vec4(lenspoint, 0.0, 1.0);\n\n    heading = normalize(vec4(\n      (1.0 - wavelength / 40000.0)\n      / (iResolution.y * lens_parms.x)\n      * (xy - 0.5 * iResolution.xy + vec2(boxrand(seed), boxrand(seed)))\n      - (lenspoint / lens_parms.y),\n      1.0, 0.0));\n\n  #if 1\n    // lens roughness\n    if (unitrand(seed) < 0.1){\n      heading = axial(heading, 1.0 - pow(unitrand(seed), 20.0), seed); }\n  #endif\n\n    // view to world space\n    cairn = view * cairn;\n    heading = view * heading;\n\n  } // setup\n\n  // transform for the marble\n  mat4 marble_transform = translate(vec4(0.0, 0.3, 0.0, 0.0));\n  marble_transform *= rotate(dx, -0.3);\n  // marble_transform *= rotate(dy, 0.00003 * float(iFrame)); spinny\n\n  // size of the backdrop sphere\n  float r_backdrop = 100.0;\n\n  // size and transform for the planet\n  float r_planet = 6000.0;\n  mat4 planet_transform = translate(vec4(0.0, r_planet + 1.0, 0.0, 0.0));\n\n  // object state\n  bool in_sphere[2] = bool[2](\n    false,\n    false);\n  bool in_tet = false;\n\n  for(int i = 0; i < imax; i++) { // iteration\n\n    // does not belong\n    vec4 ntet;\n\n    { // objects\n\n      int hit_obj = obj_backdrop;\n      vec4 p = cairn + distance * heading;\n      float dmin = inf;\n\n      {\n        // absorb\n        bool enable_absorb =\n          in_sphere[0] &&\n          !in_tet;\n        int absorb_mode =\n          in_sphere[0] ? absorb_mode_quadratic :\n          /*          */ absorb_mode_none;\n        float absorb_density =\n          in_sphere[0] ?\n            in_sphere[1] ? 4e-3 :\n            /*          */ 2e-4 :\n          /*          */ 0.0;\n        float absorb_center =\n          in_sphere[0] ?\n            in_sphere[1] ? 666.0 :\n            /*          */ 520.0 :\n          /*          */ 0.0;\n        float absorb_width =\n          in_sphere[0] ?\n            in_sphere[1] ? 1.0 :\n            /*          */ 5.0 :\n          /*          */ 1.0;\n\n        if (enable_absorb) {\n          float absorb =\n            absorb_mode == absorb_mode_quadratic ?\n              absorb_density * quadsorb(wavelength, absorb_center, absorb_width) :\n            0.0;\n          combine(-log(unitrand(seed)) / absorb, obj_absorb, dmin, hit_obj); }\n      }\n\n      {\n        // scatter\n        bool enable_scatter =\n          !in_sphere[0] ||\n          in_tet ||\n          in_sphere[1];\n        int scatter_mode =\n          in_sphere[0] ?\n            in_tet       ? scatter_mode_rayleigh :\n            in_sphere[1] ? scatter_mode_uniform :\n            /*          */ scatter_mode_none :\n          /*          */ scatter_mode_rayleigh;\n        float scatter_density =\n          in_sphere[0] ?\n            in_tet       ? 800.0 :\n            in_sphere[1] ? 100.0 :\n            /*          */   0.0 :\n          /*          */ 150.0;\n        if (enable_scatter) {\n          float scatter =\n            scatter_mode == scatter_mode_uniform ?\n              scatter_density :\n            scatter_mode == scatter_mode_rayleigh ?\n              rayleigh(wavelength, scatter_density) :\n            0.0;\n          combine(-log(unitrand(seed)) / scatter, obj_scatter, dmin, hit_obj); }\n      }\n\n      {\n        // spheres\n        bool enable_backdrop =\n          !in_sphere[0];\n\n        bool enable_planet =\n          !in_sphere[0]\n          && obstacle != obj_planet;\n\n        bool enable_sphere[2] = bool[2](\n          !in_sphere[1] && !in_tet\n          && (obstacle != obj_sphere[0] || in_sphere[0]),\n          in_sphere[0] && !in_tet\n          && (obstacle != obj_sphere[1] || in_sphere[1]));\n        float r_sphere[2] = float[2](0.7, 0.28);\n        mat4 t_sphere[2] = mat4[2](\n          marble_transform,\n          marble_transform);\n\n#if 1\n      // backdrop sphere\n      if (enable_backdrop) {\n        float dpp = -dot(p.xyz, heading.xyz);\n        float rc =\n          pow(r_backdrop, 2.0)\n          - pow(length(p.xyz + dpp * heading.xyz), 2.0);\n        if (rc >= 0.0) {\n          float src = sqrt(rc);\n          float d = dpp + src;\n          if (d >= 0.0) {\n            combine(d, obj_backdrop, dmin, hit_obj); } } }\n#endif\n\n      // planet\n      if (enable_planet) {\n        vec4 p_obj = planet_transform * p;\n        vec4 heading_obj = planet_transform * heading;\n        float dpp = -dot(p_obj.xyz, heading_obj.xyz);\n        float rc =\n          pow(r_planet, 2.0)\n          - pow(length(p_obj.xyz + dpp * heading_obj.xyz), 2.0);\n        if (rc >= 0.0) {\n          float src = sqrt(rc);\n          float d = dpp - src;\n          if (d >= 0.0) {\n            combine(d, obj_planet, dmin, hit_obj); } } }\n\n        // spheres\n        for (int i = 0; i < 2; i++) {\n          if (enable_sphere[i]) {\n            vec4 p_obj = t_sphere[i] * p;\n            vec4 heading_obj = t_sphere[i] * heading;\n            float dpp = -dot(p_obj.xyz, heading_obj.xyz);\n            float rc =\n              pow(r_sphere[i], 2.0)\n              - pow(length(p_obj.xyz + dpp * heading_obj.xyz), 2.0);\n            if (rc >= 0.0) {\n              float src = sqrt(rc);\n              float d = in_sphere[i] ? dpp + src : dpp - src;\n              if (d >= 0.0) {\n                combine(d, obj_sphere[i], dmin, hit_obj); } } } }\n      }\n\n      bool enable_torus = !in_sphere[0];\n\n      // ring light\n      if (enable_torus) {\n        vec4 p_obj = p;\n        p_obj = rotate(dz, 0.6) * p_obj;\n        p_obj.xy += vec2(1.0, -2.0);\n        float d = d_torus(p_obj, 0.1);\n        d = max(d, dhit);\n        if (d < dmin) {\n          dmin = d;\n          hit_obj = dmin == dhit ? obj_torus : obj_none; } }\n\n      bool enable_tet = in_sphere[0] && !in_sphere[1];\n\n      // marble decoration\n      if (enable_tet) {\n        vec4 p_obj = marble_transform * p;\n        vec4 pt0 = p_obj;\n        pt0 *= 2.0;\n        vec4 ntet0, ntet1, ntet2;\n        float tsoft0, tsoft1, tsoft2;\n        float d = softmax_logistic(\n          -d_sphere(p_obj * 3.0),\n          softmax_logistic(\n            d_tetrahedron(pt0 * rotate(dy, 2.0 * 1.0471975512), ntet2),\n            softmax_logistic(\n              d_tetrahedron(pt0 * rotate(dy, 1.0 * 1.0471975512), ntet1),\n              d_tetrahedron(pt0, ntet0), 100.0, tsoft0),\n            100.0, tsoft1),\n          100.0, tsoft2);\n        ntet =\n          normalize((1.0 - tsoft2) * -n_sphere(p_obj)\n          + tsoft2 * ((1.0 - tsoft1) * (\n            ntet2 * rotate(dy, -2.0 * 1.0471975512))\n            + tsoft1 * ((1.0 - tsoft0) * (\n              ntet1 * rotate(dy, -1.0 * 1.0471975512))\n              + tsoft0 * ntet0)));\n        if (in_tet) {\n          d = -d; }\n        d = max(d, dhit);\n        if (d < dmin) {\n          dmin = d;\n          hit_obj = dmin == dhit ? obj_tet : obj_none; } }\n\n      distance += dmin;\n      obstacle = hit_obj;\n\n    } // end objects\n\n    vec4 p = cairn + distance * heading;\n\n    // transform\n    mat4 transform =\n      obstacle == obj_planet    ? planet_transform :\n      obstacle == obj_sphere[0] ? marble_transform :\n      obstacle == obj_sphere[1] ? marble_transform :\n      obstacle == obj_tet       ? marble_transform :\n      /*                       */ scale(1.0);\n\n    vec4 p_obj = transform * p;\n\n    // normal\n    vec4 normal =\n      obstacle == obj_planet    ||\n      obstacle == obj_sphere[0] ||\n      obstacle == obj_sphere[1] ? n_sphere(p_obj) :\n      obstacle == obj_tet       ? ntet :\n      /*                       */ nil;\n\n    normal = inverse(transform) * normal;\n\n    // stupid fucking exception for implicit surfaces\n    if (obstacle == obj_tet || obstacle == obj_torus) {\n      float dpn = dot(heading, normal);\n      if (0.0 < (in_tet ? -dpn : dpn)) {\n        continue; } }\n\n    {\n      // cairn control\n      bool move_cairn =\n        obstacle == obj_scatter   ||\n        obstacle == obj_planet    ||\n        obstacle == obj_sphere[0] ||\n        obstacle == obj_sphere[1] ||\n        obstacle == obj_tet;\n\n      if (move_cairn) {\n        cairn = p;\n        distance = 0.0; }\n    }\n\n    {\n      // emission\n      bool emit_enable =\n        //obstacle == obj_backdrop ||\n        obstacle == obj_torus ||\n        obstacle == obj_scatter && (\n          in_tet);\n      float emit =\n        //obstacle == obj_backdrop ? cied65(wavelength) * pow(3.0, length(texture(iChannel3, heading.xyz).xyz)) * pow(max(dot(heading, dy), 0.0), 4.0) :\n        obstacle == obj_torus ? 3.0 * cied(wavelength, 4000.0) :\n        obstacle == obj_scatter ?\n          in_tet       ? 0.05 * cied65(wavelength) :\n          /*          */ 0.0 :\n        /*                   */ 0.0;\n\n      if (emit_enable) {\n        contribution += emit; }\n    }\n\n    {\n      // scatter parameters\n      bool scatter_enable =\n        obstacle == obj_scatter;\n      int scatter_mode =\n        obstacle == obj_scatter ?\n          in_sphere[0] ?\n            in_sphere[1] ? scatter_mode_uniform :\n            in_tet       ? scatter_mode_rayleigh :\n            /*          */ scatter_mode_none :\n          /*          */ scatter_mode_rayleigh :\n        /*                    */ scatter_mode_none;\n\n      if (scatter_enable) {\n        heading =\n          scatter_mode == scatter_mode_uniform  ? axial(heading, 2.0 * boxrand(seed), seed) :\n          scatter_mode == scatter_mode_rayleigh ? normalize((boxrand(seed) < 0.0 ? heading : -heading) + axial(heading, 2.0 * boxrand(seed), seed)) :\n          /*                                   */ heading; }\n    }\n\n    vec4 rough_normal = normal;\n\n    {\n      // bump paramters\n      bool bump_enable =\n        obstacle == obj_sphere[0] ||\n        obstacle == obj_sphere[1] ||\n        obstacle == obj_tet;\n      int bump_mode =\n        obstacle == obj_sphere[0] ? bump_mode_sqrt :\n        obstacle == obj_sphere[1] ? bump_mode_logistic :\n        obstacle == obj_tet       ? bump_mode_logistic :\n        /*                       */ bump_mode_none;\n      int harmonics = 20;\n      float freq =\n        obstacle == obj_sphere[0] ? 80.0 :\n        obstacle == obj_sphere[1] ? 20.0 :\n        obstacle == obj_tet       ? 40.0 :\n        /*                       */  1.0;\n      float division =\n        obstacle == obj_sphere[0] ? 0.5 :\n        obstacle == obj_sphere[1] ? 0.2 :\n        obstacle == obj_tet       ? 1.0 :\n        /*                       */ 1.0;\n      float attenuation =\n        obstacle == obj_sphere[0] ? 0.5 :\n        obstacle == obj_sphere[1] ? 0.2 :\n        obstacle == obj_tet       ? 0.0 :\n        /*                       */ 0.0;\n      float threshold =\n        obstacle == obj_sphere[0] ? 5.0 :\n        obstacle == obj_sphere[1] ? 0.0 :\n        obstacle == obj_tet       ? 0.0 :\n        /*                       */ 0.0;\n      float power =\n        obstacle == obj_sphere[0] ? 2.0 :\n        obstacle == obj_sphere[1] ? 1.0 :\n        obstacle == obj_tet       ? 1.0 :\n        /*                       */ 1.0;\n      float scale =\n        obstacle == obj_sphere[0] ? -0.00001 :\n        obstacle == obj_sphere[1] ?  0.005 :\n        obstacle == obj_tet       ?  0.00002 :\n        /*                       */  0.0;\n\n      if (bump_enable) {\n        vec4 bump = fractal3d(\n          0.0, freq * p_obj.xyz,\n          division, attenuation,\n          harmonics);\n        bump.xyz *= freq;\n        bump.xyz = (inverse(transform) * vec4(bump.xyz, 0.0)).xyz;\n        bump.w -= threshold;\n        bump *= power;\n        bump =\n          bump_mode == 0 ? bump :\n          bump_mode == 1 ? logisticg(bump) :\n          bump_mode == 2 ? sqrteg(bump) :\n          nil;\n        rough_normal.xyz = normalize(\n          rough_normal.xyz\n          + scale * rejectu(\n            bump.xyz,\n            rough_normal.xyz)); }\n    }\n\n    {\n      // rough normal parameters\n      bool rough_enable =\n        obstacle == obj_sphere[0] ||\n        obstacle == obj_sphere[1] ||\n        obstacle == obj_tet;\n      float rough_smoothness =\n        obstacle == obj_sphere[0] ? 80.0 :\n        obstacle == obj_sphere[1] ?  8.0 :\n        obstacle == obj_tet       ? 40.0 :\n        /*                       */  1.0;\n\n      if (rough_enable) {\n        rough_normal = axial(\n          rough_normal,\n          1.0 - pow(\n            unitrand(seed),\n            rough_smoothness),\n          seed); }\n    }\n\n    {\n      // Fresnel shader\n      bool fresnel_enable =\n        obstacle == obj_sphere[0] ||\n        obstacle == obj_sphere[1] ||\n        obstacle == obj_tet;\n      float fresnel_ior =\n        obstacle == obj_sphere[0] ? glassior(wavelength) :\n        obstacle == obj_sphere[1] ||\n        obstacle == obj_tet       ? stoneior(wavelength) / glassior(wavelength) :\n        /*                       */ 1.0;\n      bool fresnel_interior =\n        obstacle == obj_sphere[0] ? in_sphere[0] :\n        obstacle == obj_sphere[1] ? in_sphere[1] :\n        obstacle == obj_tet       ? in_tet :\n        /*                       */ false;\n      vec4 fresnel_normal = rough_normal;\n\n      if (fresnel_enable) {\n        shade_fresnel(\n          seed, heading,\n          fresnel_interior,\n          fresnel_normal,\n          fresnel_ior); }\n    }\n\n    // chance to terminate\n\n    bool done =\n      obstacle == obj_absorb ||\n      obstacle == obj_torus ||\n      obstacle == obj_backdrop;\n\n    {\n      // diffuse shader\n      bool diffuse_enable =\n        obstacle == obj_planet;\n      float diffuse_smoothness =\n        obstacle == obj_planet ? 1.0 :\n        /*                    */ 1.0;\n      float diffuse_ref =\n        obstacle == obj_planet ? 0.9\n          * (mod(p_obj.x, 0.3) < 0.01 ? exp(-pow((wavelength - 650.0) / 80.0, 2.0)) * 0.5 + 0.5 : 1.0)\n          * (mod(p_obj.z, 0.3) < 0.01 ? exp(-pow((wavelength - 450.0) / 80.0, 2.0)) * 0.5 + 0.5 : 1.0) :\n        /*                    */ 1.0;\n      vec4 diffuse_normal = rough_normal;\n\n      if (diffuse_enable) {\n        done = done || unitrand(seed) > shade_diffuse(seed, heading, diffuse_normal, diffuse_smoothness, diffuse_ref); }\n    }\n\n    if (done) {\n      break; }\n\n    // post-shading\n    bool interior = dot(heading, normal) < 0.0;\n    if (obstacle == obj_sphere[0]) {\n      in_sphere[0] = interior; }\n    else if (obstacle == obj_sphere[1]) {\n      in_sphere[1] = interior; }\n    else if (obstacle == obj_tet) {\n      in_tet = interior; }\n\n  } // iteration\n\n  float amt = get(3).x;\n  c = texture(iChannel0, xy / iResolution.xy);\n  if (amt > 0.0) c *= 1.0 - (1.0 / amt);\n  c.rgb += XYZ2sRGB * ciecmf(wavelength) * contribution;\n  c.a += weight; }","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// https://cie.co.at/data-tables\n\nvec3 cmf2[] = vec3 [](\nvec3(0.000129900000,0.0000039170000,0.000606100000),\nvec3(0.000145847000,0.0000043935810,0.000680879200),\nvec3(0.000163802100,0.0000049296040,0.000765145600),\nvec3(0.000184003700,0.0000055321360,0.000860012400),\nvec3(0.000206690200,0.0000062082450,0.000966592800),\nvec3(0.000232100000,0.0000069650000,0.001086000000),\nvec3(0.000260728000,0.0000078132190,0.001220586000),\nvec3(0.000293075000,0.0000087673360,0.001372729000),\nvec3(0.000329388000,0.0000098398440,0.001543579000),\nvec3(0.000369914000,0.0000110432300,0.001734286000),\nvec3(0.000414900000,0.0000123900000,0.001946000000),\nvec3(0.000464158700,0.0000138864100,0.002177777000),\nvec3(0.000518986000,0.0000155572800,0.002435809000),\nvec3(0.000581854000,0.0000174429600,0.002731953000),\nvec3(0.000655234700,0.0000195837500,0.003078064000),\nvec3(0.000741600000,0.0000220200000,0.003486000000),\nvec3(0.000845029600,0.0000248396500,0.003975227000),\nvec3(0.000964526800,0.0000280412600,0.004540880000),\nvec3(0.001094949000,0.0000315310400,0.005158320000),\nvec3(0.001231154000,0.0000352152100,0.005802907000),\nvec3(0.001368000000,0.0000390000000,0.006450001000),\nvec3(0.001502050000,0.0000428264000,0.007083216000),\nvec3(0.001642328000,0.0000469146000,0.007745488000),\nvec3(0.001802382000,0.0000515896000,0.008501152000),\nvec3(0.001995757000,0.0000571764000,0.009414544000),\nvec3(0.002236000000,0.0000640000000,0.010549990000),\nvec3(0.002535385000,0.0000723442100,0.011965800000),\nvec3(0.002892603000,0.0000822122400,0.013655870000),\nvec3(0.003300829000,0.0000935081600,0.015588050000),\nvec3(0.003753236000,0.0001061361000,0.017730150000),\nvec3(0.004243000000,0.0001200000000,0.020050010000),\nvec3(0.004762389000,0.0001349840000,0.022511360000),\nvec3(0.005330048000,0.0001514920000,0.025202880000),\nvec3(0.005978712000,0.0001702080000,0.028279720000),\nvec3(0.006741117000,0.0001918160000,0.031897040000),\nvec3(0.007650000000,0.0002170000000,0.036210000000),\nvec3(0.008751373000,0.0002469067000,0.041437710000),\nvec3(0.010028880000,0.0002812400000,0.047503720000),\nvec3(0.011421700000,0.0003185200000,0.054119880000),\nvec3(0.012869010000,0.0003572667000,0.060998030000),\nvec3(0.014310000000,0.0003960000000,0.067850010000),\nvec3(0.015704430000,0.0004337147000,0.074486320000),\nvec3(0.017147440000,0.0004730240000,0.081361560000),\nvec3(0.018781220000,0.0005178760000,0.089153640000),\nvec3(0.020748010000,0.0005722187000,0.098540480000),\nvec3(0.023190000000,0.0006400000000,0.110200000000),\nvec3(0.026207360000,0.0007245600000,0.124613300000),\nvec3(0.029782480000,0.0008255000000,0.141701700000),\nvec3(0.033880920000,0.0009411600000,0.161303500000),\nvec3(0.038468240000,0.0010698800000,0.183256800000),\nvec3(0.043510000000,0.0012100000000,0.207400000000),\nvec3(0.048995600000,0.0013620910000,0.233692100000),\nvec3(0.055022600000,0.0015307520000,0.262611400000),\nvec3(0.061718800000,0.0017203680000,0.294774600000),\nvec3(0.069212000000,0.0019353230000,0.330798500000),\nvec3(0.077630000000,0.0021800000000,0.371300000000),\nvec3(0.086958110000,0.0024548000000,0.416209100000),\nvec3(0.097176720000,0.0027640000000,0.465464200000),\nvec3(0.108406300000,0.0031178000000,0.519694800000),\nvec3(0.120767200000,0.0035264000000,0.579530300000),\nvec3(0.134380000000,0.0040000000000,0.645600000000),\nvec3(0.149358200000,0.0045462400000,0.718483800000),\nvec3(0.165395700000,0.0051593200000,0.796713300000),\nvec3(0.181983100000,0.0058292800000,0.877845900000),\nvec3(0.198611000000,0.0065461600000,0.959439000000),\nvec3(0.214770000000,0.0073000000000,1.039050100000),\nvec3(0.230186800000,0.0080865070000,1.115367300000),\nvec3(0.244879700000,0.0089087200000,1.188497100000),\nvec3(0.258777300000,0.0097676800000,1.258123300000),\nvec3(0.271807900000,0.0106644300000,1.323929600000),\nvec3(0.283900000000,0.0116000000000,1.385600000000),\nvec3(0.294943800000,0.0125731700000,1.442635200000),\nvec3(0.304896500000,0.0135827200000,1.494803500000),\nvec3(0.313787300000,0.0146296800000,1.542190300000),\nvec3(0.321645400000,0.0157150900000,1.584880700000),\nvec3(0.328500000000,0.0168400000000,1.622960000000),\nvec3(0.334351300000,0.0180073600000,1.656404800000),\nvec3(0.339210100000,0.0192144800000,1.685295900000),\nvec3(0.343121300000,0.0204539200000,1.709874500000),\nvec3(0.346129600000,0.0217182400000,1.730382100000),\nvec3(0.348280000000,0.0230000000000,1.747060000000),\nvec3(0.349599900000,0.0242946100000,1.760044600000),\nvec3(0.350147400000,0.0256102400000,1.769623300000),\nvec3(0.350013000000,0.0269585700000,1.776263700000),\nvec3(0.349287000000,0.0283512500000,1.780433400000),\nvec3(0.348060000000,0.0298000000000,1.782600000000),\nvec3(0.346373300000,0.0313108300000,1.782968200000),\nvec3(0.344262400000,0.0328836800000,1.781699800000),\nvec3(0.341808800000,0.0345211200000,1.779198200000),\nvec3(0.339094100000,0.0362257100000,1.775867100000),\nvec3(0.336200000000,0.0380000000000,1.772110000000),\nvec3(0.333197700000,0.0398466700000,1.768258900000),\nvec3(0.330041100000,0.0417680000000,1.764039000000),\nvec3(0.326635700000,0.0437660000000,1.758943800000),\nvec3(0.322886800000,0.0458426700000,1.752466300000),\nvec3(0.318700000000,0.0480000000000,1.744100000000),\nvec3(0.314025100000,0.0502436800000,1.733559500000),\nvec3(0.308884000000,0.0525730400000,1.720858100000),\nvec3(0.303290400000,0.0549805600000,1.705936900000),\nvec3(0.297257900000,0.0574587200000,1.688737200000),\nvec3(0.290800000000,0.0600000000000,1.669200000000),\nvec3(0.283970100000,0.0626019700000,1.647528700000),\nvec3(0.276721400000,0.0652775200000,1.623412700000),\nvec3(0.268917800000,0.0680420800000,1.596022300000),\nvec3(0.260422700000,0.0709110900000,1.564528000000),\nvec3(0.251100000000,0.0739000000000,1.528100000000),\nvec3(0.240847500000,0.0770160000000,1.486111400000),\nvec3(0.229851200000,0.0802664000000,1.439521500000),\nvec3(0.218407200000,0.0836668000000,1.389879900000),\nvec3(0.206811500000,0.0872328000000,1.338736200000),\nvec3(0.195360000000,0.0909800000000,1.287640000000),\nvec3(0.184213600000,0.0949175500000,1.237422300000),\nvec3(0.173327300000,0.0990458400000,1.187824300000),\nvec3(0.162688100000,0.1033674000000,1.138761100000),\nvec3(0.152283300000,0.1078846000000,1.090148000000),\nvec3(0.142100000000,0.1126000000000,1.041900000000),\nvec3(0.132178600000,0.1175320000000,0.994197600000),\nvec3(0.122569600000,0.1226744000000,0.947347300000),\nvec3(0.113275200000,0.1279928000000,0.901453100000),\nvec3(0.104297900000,0.1334528000000,0.856619300000),\nvec3(0.095640000000,0.1390200000000,0.812950100000),\nvec3(0.087299550000,0.1446764000000,0.770517300000),\nvec3(0.079308040000,0.1504693000000,0.729444800000),\nvec3(0.071717760000,0.1564619000000,0.689913600000),\nvec3(0.064580990000,0.1627177000000,0.652104900000),\nvec3(0.057950010000,0.1693000000000,0.616200000000),\nvec3(0.051862110000,0.1762431000000,0.582328600000),\nvec3(0.046281520000,0.1835581000000,0.550416200000),\nvec3(0.041150880000,0.1912735000000,0.520337600000),\nvec3(0.036412830000,0.1994180000000,0.491967300000),\nvec3(0.032010000000,0.2080200000000,0.465180000000),\nvec3(0.027917200000,0.2171199000000,0.439924600000),\nvec3(0.024144400000,0.2267345000000,0.416183600000),\nvec3(0.020687000000,0.2368571000000,0.393882200000),\nvec3(0.017540400000,0.2474812000000,0.372945900000),\nvec3(0.014700000000,0.2586000000000,0.353300000000),\nvec3(0.012161790000,0.2701849000000,0.334857800000),\nvec3(0.009919960000,0.2822939000000,0.317552100000),\nvec3(0.007967240000,0.2950505000000,0.301337500000),\nvec3(0.006296346000,0.3085780000000,0.286168600000),\nvec3(0.004900000000,0.3230000000000,0.272000000000),\nvec3(0.003777173000,0.3384021000000,0.258817100000),\nvec3(0.002945320000,0.3546858000000,0.246483800000),\nvec3(0.002424880000,0.3716986000000,0.234771800000),\nvec3(0.002236293000,0.3892875000000,0.223453300000),\nvec3(0.002400000000,0.4073000000000,0.212300000000),\nvec3(0.002925520000,0.4256299000000,0.201169200000),\nvec3(0.003836560000,0.4443096000000,0.190119600000),\nvec3(0.005174840000,0.4633944000000,0.179225400000),\nvec3(0.006982080000,0.4829395000000,0.168560800000),\nvec3(0.009300000000,0.5030000000000,0.158200000000),\nvec3(0.012149490000,0.5235693000000,0.148138300000),\nvec3(0.015535880000,0.5445120000000,0.138375800000),\nvec3(0.019477520000,0.5656900000000,0.128994200000),\nvec3(0.023992770000,0.5869653000000,0.120075100000),\nvec3(0.029100000000,0.6082000000000,0.111700000000),\nvec3(0.034814850000,0.6293456000000,0.103904800000),\nvec3(0.041120160000,0.6503068000000,0.096667480000),\nvec3(0.047985040000,0.6708752000000,0.089982720000),\nvec3(0.055378610000,0.6908424000000,0.083845310000),\nvec3(0.063270000000,0.7100000000000,0.078249990000),\nvec3(0.071635010000,0.7281852000000,0.073208990000),\nvec3(0.080462240000,0.7454636000000,0.068678160000),\nvec3(0.089739960000,0.7619694000000,0.064567840000),\nvec3(0.099456450000,0.7778368000000,0.060788350000),\nvec3(0.109600000000,0.7932000000000,0.057250010000),\nvec3(0.120167400000,0.8081104000000,0.053904350000),\nvec3(0.131114500000,0.8224962000000,0.050746640000),\nvec3(0.142367900000,0.8363068000000,0.047752760000),\nvec3(0.153854200000,0.8494916000000,0.044898590000),\nvec3(0.165500000000,0.8620000000000,0.042160000000),\nvec3(0.177257100000,0.8738108000000,0.039507280000),\nvec3(0.189140000000,0.8849624000000,0.036935640000),\nvec3(0.201169400000,0.8954936000000,0.034458360000),\nvec3(0.213365800000,0.9054432000000,0.032088720000),\nvec3(0.225749900000,0.9148501000000,0.029840000000),\nvec3(0.238320900000,0.9237348000000,0.027711810000),\nvec3(0.251066800000,0.9320924000000,0.025694440000),\nvec3(0.263992200000,0.9399226000000,0.023787160000),\nvec3(0.277101700000,0.9472252000000,0.021989250000),\nvec3(0.290400000000,0.9540000000000,0.020300000000),\nvec3(0.303891200000,0.9602561000000,0.018718050000),\nvec3(0.317572600000,0.9660074000000,0.017240360000),\nvec3(0.331438400000,0.9712606000000,0.015863640000),\nvec3(0.345482800000,0.9760225000000,0.014584610000),\nvec3(0.359700000000,0.9803000000000,0.013400000000),\nvec3(0.374083900000,0.9840924000000,0.012307230000),\nvec3(0.388639600000,0.9874182000000,0.011301880000),\nvec3(0.403378400000,0.9903128000000,0.010377920000),\nvec3(0.418311500000,0.9928116000000,0.009529306000),\nvec3(0.433449900000,0.9949501000000,0.008749999000),\nvec3(0.448795300000,0.9967108000000,0.008035200000),\nvec3(0.464336000000,0.9980983000000,0.007381600000),\nvec3(0.480064000000,0.9991120000000,0.006785400000),\nvec3(0.495971300000,0.9997482000000,0.006242800000),\nvec3(0.512050100000,1.0000000000000,0.005749999000),\nvec3(0.528295900000,0.9998567000000,0.005303600000),\nvec3(0.544691600000,0.9993046000000,0.004899800000),\nvec3(0.561209400000,0.9983255000000,0.004534200000),\nvec3(0.577821500000,0.9968987000000,0.004202400000),\nvec3(0.594500000000,0.9950000000000,0.003900000000),\nvec3(0.611220900000,0.9926005000000,0.003623200000),\nvec3(0.627975800000,0.9897426000000,0.003370600000),\nvec3(0.644760200000,0.9864444000000,0.003141400000),\nvec3(0.661569700000,0.9827241000000,0.002934800000),\nvec3(0.678400000000,0.9786000000000,0.002749999000),\nvec3(0.695239200000,0.9740837000000,0.002585200000),\nvec3(0.712058600000,0.9691712000000,0.002438600000),\nvec3(0.728828400000,0.9638568000000,0.002309400000),\nvec3(0.745518800000,0.9581349000000,0.002196800000),\nvec3(0.762100000000,0.9520000000000,0.002100000000),\nvec3(0.778543200000,0.9454504000000,0.002017733000),\nvec3(0.794825600000,0.9384992000000,0.001948200000),\nvec3(0.810926400000,0.9311628000000,0.001889800000),\nvec3(0.826824800000,0.9234576000000,0.001840933000),\nvec3(0.842500000000,0.9154000000000,0.001800000000),\nvec3(0.857932500000,0.9070064000000,0.001766267000),\nvec3(0.873081600000,0.8982772000000,0.001737800000),\nvec3(0.887894400000,0.8892048000000,0.001711200000),\nvec3(0.902318100000,0.8797816000000,0.001683067000),\nvec3(0.916300000000,0.8700000000000,0.001650001000),\nvec3(0.929799500000,0.8598613000000,0.001610133000),\nvec3(0.942798400000,0.8493920000000,0.001564400000),\nvec3(0.955277600000,0.8386220000000,0.001513600000),\nvec3(0.967217900000,0.8275813000000,0.001458533000),\nvec3(0.978600000000,0.8163000000000,0.001400000000),\nvec3(0.989385600000,0.8047947000000,0.001336667000),\nvec3(0.999548800000,0.7930820000000,0.001270000000),\nvec3(1.009089200000,0.7811920000000,0.001205000000),\nvec3(1.018006400000,0.7691547000000,0.001146667000),\nvec3(1.026300000000,0.7570000000000,0.001100000000),\nvec3(1.033982700000,0.7447541000000,0.001068800000),\nvec3(1.040986000000,0.7324224000000,0.001049400000),\nvec3(1.047188000000,0.7200036000000,0.001035600000),\nvec3(1.052466700000,0.7074965000000,0.001021200000),\nvec3(1.056700000000,0.6949000000000,0.001000000000),\nvec3(1.059794400000,0.6822192000000,0.000968640000),\nvec3(1.061799200000,0.6694716000000,0.000929920000),\nvec3(1.062806800000,0.6566744000000,0.000886880000),\nvec3(1.062909600000,0.6438448000000,0.000842560000),\nvec3(1.062200000000,0.6310000000000,0.000800000000),\nvec3(1.060735200000,0.6181555000000,0.000760960000),\nvec3(1.058443600000,0.6053144000000,0.000723680000),\nvec3(1.055224400000,0.5924756000000,0.000685920000),\nvec3(1.050976800000,0.5796379000000,0.000645440000),\nvec3(1.045600000000,0.5668000000000,0.000600000000),\nvec3(1.039036900000,0.5539611000000,0.000547866700),\nvec3(1.031360800000,0.5411372000000,0.000491600000),\nvec3(1.022666200000,0.5283528000000,0.000435400000),\nvec3(1.013047700000,0.5156323000000,0.000383466700),\nvec3(1.002600000000,0.5030000000000,0.000340000000),\nvec3(0.991367500000,0.4904688000000,0.000307253300),\nvec3(0.979331400000,0.4780304000000,0.000283160000),\nvec3(0.966491600000,0.4656776000000,0.000265440000),\nvec3(0.952847900000,0.4534032000000,0.000251813300),\nvec3(0.938400000000,0.4412000000000,0.000240000000),\nvec3(0.923194000000,0.4290800000000,0.000229546700),\nvec3(0.907244000000,0.4170360000000,0.000220640000),\nvec3(0.890502000000,0.4050320000000,0.000211960000),\nvec3(0.872920000000,0.3930320000000,0.000202186700),\nvec3(0.854449900000,0.3810000000000,0.000190000000),\nvec3(0.835084000000,0.3689184000000,0.000174213300),\nvec3(0.814946000000,0.3568272000000,0.000155640000),\nvec3(0.794186000000,0.3447768000000,0.000135960000),\nvec3(0.772954000000,0.3328176000000,0.000116853300),\nvec3(0.751400000000,0.3210000000000,0.000100000000),\nvec3(0.729583600000,0.3093381000000,0.000086133330),\nvec3(0.707588800000,0.2978504000000,0.000074600000),\nvec3(0.685602200000,0.2865936000000,0.000065000000),\nvec3(0.663810400000,0.2756245000000,0.000056933330),\nvec3(0.642400000000,0.2650000000000,0.000049999990),\nvec3(0.621514900000,0.2547632000000,0.000044160000),\nvec3(0.601113800000,0.2448896000000,0.000039480000),\nvec3(0.581105200000,0.2353344000000,0.000035720000),\nvec3(0.561397700000,0.2260528000000,0.000032640000),\nvec3(0.541900000000,0.2170000000000,0.000030000000),\nvec3(0.522599500000,0.2081616000000,0.000027653330),\nvec3(0.503546400000,0.1995488000000,0.000025560000),\nvec3(0.484743600000,0.1911552000000,0.000023640000),\nvec3(0.466193900000,0.1829744000000,0.000021813330),\nvec3(0.447900000000,0.1750000000000,0.000020000000),\nvec3(0.429861300000,0.1672235000000,0.000018133330),\nvec3(0.412098000000,0.1596464000000,0.000016200000),\nvec3(0.394644000000,0.1522776000000,0.000014200000),\nvec3(0.377533300000,0.1451259000000,0.000012133330),\nvec3(0.360800000000,0.1382000000000,0.000010000000),\nvec3(0.344456300000,0.1315003000000,0.000007733333),\nvec3(0.328516800000,0.1250248000000,0.000005400000),\nvec3(0.313019200000,0.1187792000000,0.000003200000),\nvec3(0.298001100000,0.1127691000000,0.000001333333),\nvec3(0.283500000000,0.1070000000000,0.000000000000),\nvec3(0.269544800000,0.1014762000000,0.000000000000),\nvec3(0.256118400000,0.0961886400000,0.000000000000),\nvec3(0.243189600000,0.0911229600000,0.000000000000),\nvec3(0.230727200000,0.0862648500000,0.000000000000),\nvec3(0.218700000000,0.0816000000000,0.000000000000),\nvec3(0.207097100000,0.0771206400000,0.000000000000),\nvec3(0.195923200000,0.0728255200000,0.000000000000),\nvec3(0.185170800000,0.0687100800000,0.000000000000),\nvec3(0.174832300000,0.0647697600000,0.000000000000),\nvec3(0.164900000000,0.0610000000000,0.000000000000),\nvec3(0.155366700000,0.0573962100000,0.000000000000),\nvec3(0.146230000000,0.0539550400000,0.000000000000),\nvec3(0.137490000000,0.0506737600000,0.000000000000),\nvec3(0.129146700000,0.0475496500000,0.000000000000),\nvec3(0.121200000000,0.0445800000000,0.000000000000),\nvec3(0.113639700000,0.0417587200000,0.000000000000),\nvec3(0.106465000000,0.0390849600000,0.000000000000),\nvec3(0.099690440000,0.0365638400000,0.000000000000),\nvec3(0.093330610000,0.0342004800000,0.000000000000),\nvec3(0.087400000000,0.0320000000000,0.000000000000),\nvec3(0.081900960000,0.0299626100000,0.000000000000),\nvec3(0.076804280000,0.0280766400000,0.000000000000),\nvec3(0.072077120000,0.0263293600000,0.000000000000),\nvec3(0.067686640000,0.0247080500000,0.000000000000),\nvec3(0.063600000000,0.0232000000000,0.000000000000),\nvec3(0.059806850000,0.0218007700000,0.000000000000),\nvec3(0.056282160000,0.0205011200000,0.000000000000),\nvec3(0.052971040000,0.0192810800000,0.000000000000),\nvec3(0.049818610000,0.0181206900000,0.000000000000),\nvec3(0.046770000000,0.0170000000000,0.000000000000),\nvec3(0.043784050000,0.0159037900000,0.000000000000),\nvec3(0.040875360000,0.0148371800000,0.000000000000),\nvec3(0.038072640000,0.0138106800000,0.000000000000),\nvec3(0.035404610000,0.0128347800000,0.000000000000),\nvec3(0.032900000000,0.0119200000000,0.000000000000),\nvec3(0.030564190000,0.0110683100000,0.000000000000),\nvec3(0.028380560000,0.0102733900000,0.000000000000),\nvec3(0.026344840000,0.0095333110000,0.000000000000),\nvec3(0.024452750000,0.0088461570000,0.000000000000),\nvec3(0.022700000000,0.0082100000000,0.000000000000),\nvec3(0.021084290000,0.0076237810000,0.000000000000),\nvec3(0.019599880000,0.0070854240000,0.000000000000),\nvec3(0.018237320000,0.0065914760000,0.000000000000),\nvec3(0.016987170000,0.0061384850000,0.000000000000),\nvec3(0.015840000000,0.0057230000000,0.000000000000),\nvec3(0.014790640000,0.0053430590000,0.000000000000),\nvec3(0.013831320000,0.0049957960000,0.000000000000),\nvec3(0.012948680000,0.0046764040000,0.000000000000),\nvec3(0.012129200000,0.0043800750000,0.000000000000),\nvec3(0.011359160000,0.0041020000000,0.000000000000),\nvec3(0.010629350000,0.0038384530000,0.000000000000),\nvec3(0.009938846000,0.0035890990000,0.000000000000),\nvec3(0.009288422000,0.0033542190000,0.000000000000),\nvec3(0.008678854000,0.0031340930000,0.000000000000),\nvec3(0.008110916000,0.0029290000000,0.000000000000),\nvec3(0.007582388000,0.0027381390000,0.000000000000),\nvec3(0.007088746000,0.0025598760000,0.000000000000),\nvec3(0.006627313000,0.0023932440000,0.000000000000),\nvec3(0.006195408000,0.0022372750000,0.000000000000),\nvec3(0.005790346000,0.0020910000000,0.000000000000),\nvec3(0.005409826000,0.0019535870000,0.000000000000),\nvec3(0.005052583000,0.0018245800000,0.000000000000),\nvec3(0.004717512000,0.0017035800000,0.000000000000),\nvec3(0.004403507000,0.0015901870000,0.000000000000),\nvec3(0.004109457000,0.0014840000000,0.000000000000),\nvec3(0.003833913000,0.0013844960000,0.000000000000),\nvec3(0.003575748000,0.0012912680000,0.000000000000),\nvec3(0.003334342000,0.0012040920000,0.000000000000),\nvec3(0.003109075000,0.0011227440000,0.000000000000),\nvec3(0.002899327000,0.0010470000000,0.000000000000),\nvec3(0.002704348000,0.0009765896000,0.000000000000),\nvec3(0.002523020000,0.0009111088000,0.000000000000),\nvec3(0.002354168000,0.0008501332000,0.000000000000),\nvec3(0.002196616000,0.0007932384000,0.000000000000),\nvec3(0.002049190000,0.0007400000000,0.000000000000),\nvec3(0.001910960000,0.0006900827000,0.000000000000),\nvec3(0.001781438000,0.0006433100000,0.000000000000),\nvec3(0.001660110000,0.0005994960000,0.000000000000),\nvec3(0.001546459000,0.0005584547000,0.000000000000),\nvec3(0.001439971000,0.0005200000000,0.000000000000),\nvec3(0.001340042000,0.0004839136000,0.000000000000),\nvec3(0.001246275000,0.0004500528000,0.000000000000),\nvec3(0.001158471000,0.0004183452000,0.000000000000),\nvec3(0.001076430000,0.0003887184000,0.000000000000),\nvec3(0.000999949300,0.0003611000000,0.000000000000),\nvec3(0.000928735800,0.0003353835000,0.000000000000),\nvec3(0.000862433200,0.0003114404000,0.000000000000),\nvec3(0.000800750300,0.0002891656000,0.000000000000),\nvec3(0.000743396000,0.0002684539000,0.000000000000),\nvec3(0.000690078600,0.0002492000000,0.000000000000),\nvec3(0.000640515600,0.0002313019000,0.000000000000),\nvec3(0.000594502100,0.0002146856000,0.000000000000),\nvec3(0.000551864600,0.0001992884000,0.000000000000),\nvec3(0.000512429000,0.0001850475000,0.000000000000),\nvec3(0.000476021300,0.0001719000000,0.000000000000),\nvec3(0.000442453600,0.0001597781000,0.000000000000),\nvec3(0.000411511700,0.0001486044000,0.000000000000),\nvec3(0.000382981400,0.0001383016000,0.000000000000),\nvec3(0.000356649100,0.0001287925000,0.000000000000),\nvec3(0.000332301100,0.0001200000000,0.000000000000),\nvec3(0.000309758600,0.0001118595000,0.000000000000),\nvec3(0.000288887100,0.0001043224000,0.000000000000),\nvec3(0.000269539400,0.0000973356000,0.000000000000),\nvec3(0.000251568200,0.0000908458700,0.000000000000),\nvec3(0.000234826100,0.0000848000000,0.000000000000),\nvec3(0.000219171000,0.0000791466700,0.000000000000),\nvec3(0.000204525800,0.0000738580000,0.000000000000),\nvec3(0.000190840500,0.0000689160000,0.000000000000),\nvec3(0.000178065400,0.0000643026700,0.000000000000),\nvec3(0.000166150500,0.0000600000000,0.000000000000),\nvec3(0.000155023600,0.0000559818700,0.000000000000),\nvec3(0.000144621900,0.0000522256000,0.000000000000),\nvec3(0.000134909800,0.0000487184000,0.000000000000),\nvec3(0.000125852000,0.0000454474700,0.000000000000),\nvec3(0.000117413000,0.0000424000000,0.000000000000),\nvec3(0.000109551500,0.0000395610400,0.000000000000),\nvec3(0.000102224500,0.0000369151200,0.000000000000),\nvec3(0.000095394450,0.0000344486800,0.000000000000),\nvec3(0.000089023900,0.0000321481600,0.000000000000),\nvec3(0.000083075270,0.0000300000000,0.000000000000),\nvec3(0.000077512690,0.0000279912500,0.000000000000),\nvec3(0.000072313040,0.0000261135600,0.000000000000),\nvec3(0.000067457780,0.0000243602400,0.000000000000),\nvec3(0.000062928440,0.0000227246100,0.000000000000),\nvec3(0.000058706520,0.0000212000000,0.000000000000),\nvec3(0.000054770280,0.0000197785500,0.000000000000),\nvec3(0.000051099180,0.0000184528500,0.000000000000),\nvec3(0.000047676540,0.0000172168700,0.000000000000),\nvec3(0.000044485670,0.0000160645900,0.000000000000),\nvec3(0.000041509940,0.0000149900000,0.000000000000),\nvec3(0.000038733240,0.0000139872800,0.000000000000),\nvec3(0.000036142030,0.0000130515500,0.000000000000),\nvec3(0.000033723520,0.0000121781800,0.000000000000),\nvec3(0.000031464870,0.0000113625400,0.000000000000),\nvec3(0.000029353260,0.0000106000000,0.000000000000),\nvec3(0.000027375730,0.0000098858770,0.000000000000),\nvec3(0.000025524330,0.0000092173040,0.000000000000),\nvec3(0.000023793760,0.0000085923620,0.000000000000),\nvec3(0.000022178700,0.0000080091330,0.000000000000),\nvec3(0.000020673830,0.0000074657000,0.000000000000),\nvec3(0.000019272260,0.0000069595670,0.000000000000),\nvec3(0.000017966400,0.0000064879950,0.000000000000),\nvec3(0.000016749910,0.0000060486990,0.000000000000),\nvec3(0.000015616480,0.0000056393960,0.000000000000),\nvec3(0.000014559770,0.0000052578000,0.000000000000),\nvec3(0.000013573870,0.0000049017710,0.000000000000),\nvec3(0.000012654360,0.0000045697200,0.000000000000),\nvec3(0.000011797230,0.0000042601940,0.000000000000),\nvec3(0.000010998440,0.0000039717390,0.000000000000),\nvec3(0.000010253980,0.0000037029000,0.000000000000),\nvec3(0.000009559646,0.0000034521630,0.000000000000),\nvec3(0.000008912044,0.0000032183020,0.000000000000),\nvec3(0.000008308358,0.0000030003000,0.000000000000),\nvec3(0.000007745769,0.0000027971390,0.000000000000),\nvec3(0.000007221456,0.0000026078000,0.000000000000),\nvec3(0.000006732475,0.0000024312200,0.000000000000),\nvec3(0.000006276423,0.0000022665310,0.000000000000),\nvec3(0.000005851304,0.0000021130130,0.000000000000),\nvec3(0.000005455118,0.0000019699430,0.000000000000),\nvec3(0.000005085868,0.0000018366000,0.000000000000),\nvec3(0.000004741466,0.0000017122300,0.000000000000),\nvec3(0.000004420236,0.0000015962280,0.000000000000),\nvec3(0.000004120783,0.0000014880900,0.000000000000),\nvec3(0.000003841716,0.0000013873140,0.000000000000),\nvec3(0.000003581652,0.0000012934000,0.000000000000),\nvec3(0.000003339127,0.0000012058200,0.000000000000),\nvec3(0.000003112949,0.0000011241430,0.000000000000),\nvec3(0.000002902121,0.0000010480090,0.000000000000),\nvec3(0.000002705645,0.0000009770578,0.000000000000),\nvec3(0.000002522525,0.0000009109300,0.000000000000),\nvec3(0.000002351726,0.0000008492513,0.000000000000),\nvec3(0.000002192415,0.0000007917212,0.000000000000),\nvec3(0.000002043902,0.0000007380904,0.000000000000),\nvec3(0.000001905497,0.0000006881098,0.000000000000),\nvec3(0.000001776509,0.0000006415300,0.000000000000),\nvec3(0.000001656215,0.0000005980895,0.000000000000),\nvec3(0.000001544022,0.0000005575746,0.000000000000),\nvec3(0.000001439440,0.0000005198080,0.000000000000),\nvec3(0.000001341977,0.0000004846123,0.000000000000),\nvec3(0.000001251141,0.0000004518100,0.000000000000) );\n\nvec3 cmf10[] = vec3[](\nvec3(0.000000122200,0.000000013398,0.000000535027),\nvec3(0.000000185138,0.000000020294,0.000000810720),\nvec3(0.000000278830,0.000000030560,0.000001221200),\nvec3(0.000000417470,0.000000045740,0.000001828700),\nvec3(0.000000621330,0.000000068050,0.000002722200),\nvec3(0.000000919270,0.000000100650,0.000004028300),\nvec3(0.000001351980,0.000000147980,0.000005925700),\nvec3(0.000001976540,0.000000216270,0.000008665100),\nvec3(0.000002872500,0.000000314200,0.000012596000),\nvec3(0.000004149500,0.000000453700,0.000018201000),\nvec3(0.000005958600,0.000000651100,0.000026143700),\nvec3(0.000008505600,0.000000928800,0.000037330000),\nvec3(0.000012068600,0.000001317500,0.000052987000),\nvec3(0.000017022600,0.000001857200,0.000074764000),\nvec3(0.000023868000,0.000002602000,0.000104870000),\nvec3(0.000033266000,0.000003625000,0.000146220000),\nvec3(0.000046087000,0.000005019000,0.000202660000),\nvec3(0.000063472000,0.000006907000,0.000279230000),\nvec3(0.000086892000,0.000009449000,0.000382450000),\nvec3(0.000118246000,0.000012848000,0.000520720000),\nvec3(0.000159952000,0.000017364000,0.000704776000),\nvec3(0.000215080000,0.000023327000,0.000948230000),\nvec3(0.000287490000,0.000031150000,0.001268200000),\nvec3(0.000381990000,0.000041350000,0.001686100000),\nvec3(0.000504550000,0.000054560000,0.002228500000),\nvec3(0.000662440000,0.000071560000,0.002927800000),\nvec3(0.000864500000,0.000093300000,0.003823700000),\nvec3(0.001121500000,0.000120870000,0.004964200000),\nvec3(0.001446160000,0.000155640000,0.006406700000),\nvec3(0.001853590000,0.000199200000,0.008219300000),\nvec3(0.002361600000,0.000253400000,0.010482200000),\nvec3(0.002990600000,0.000320200000,0.013289000000),\nvec3(0.003764500000,0.000402400000,0.016747000000),\nvec3(0.004710200000,0.000502300000,0.020980000000),\nvec3(0.005858100000,0.000623200000,0.026127000000),\nvec3(0.007242300000,0.000768500000,0.032344000000),\nvec3(0.008899600000,0.000941700000,0.039802000000),\nvec3(0.010870900000,0.001147800000,0.048691000000),\nvec3(0.013198900000,0.001390300000,0.059210000000),\nvec3(0.015929200000,0.001674000000,0.071576000000),\nvec3(0.019109700000,0.002004400000,0.086010900000),\nvec3(0.022788000000,0.002386000000,0.102740000000),\nvec3(0.027011000000,0.002822000000,0.122000000000),\nvec3(0.031829000000,0.003319000000,0.144020000000),\nvec3(0.037278000000,0.003880000000,0.168990000000),\nvec3(0.043400000000,0.004509000000,0.197120000000),\nvec3(0.050223000000,0.005209000000,0.228570000000),\nvec3(0.057764000000,0.005985000000,0.263470000000),\nvec3(0.066038000000,0.006833000000,0.301900000000),\nvec3(0.075033000000,0.007757000000,0.343870000000),\nvec3(0.084736000000,0.008756000000,0.389366000000),\nvec3(0.095041000000,0.009816000000,0.437970000000),\nvec3(0.105836000000,0.010918000000,0.489220000000),\nvec3(0.117066000000,0.012058000000,0.542900000000),\nvec3(0.128682000000,0.013237000000,0.598810000000),\nvec3(0.140638000000,0.014456000000,0.656760000000),\nvec3(0.152893000000,0.015717000000,0.716580000000),\nvec3(0.165416000000,0.017025000000,0.778120000000),\nvec3(0.178191000000,0.018399000000,0.841310000000),\nvec3(0.191214000000,0.019848000000,0.906110000000),\nvec3(0.204492000000,0.021391000000,0.972542000000),\nvec3(0.217650000000,0.022992000000,1.038900000000),\nvec3(0.230267000000,0.024598000000,1.103100000000),\nvec3(0.242311000000,0.026213000000,1.165100000000),\nvec3(0.253793000000,0.027841000000,1.224900000000),\nvec3(0.264737000000,0.029497000000,1.282500000000),\nvec3(0.275195000000,0.031195000000,1.338200000000),\nvec3(0.285301000000,0.032927000000,1.392600000000),\nvec3(0.295143000000,0.034738000000,1.446100000000),\nvec3(0.304869000000,0.036654000000,1.499400000000),\nvec3(0.314679000000,0.038676000000,1.553480000000),\nvec3(0.324355000000,0.040792000000,1.607200000000),\nvec3(0.333570000000,0.042946000000,1.658900000000),\nvec3(0.342243000000,0.045114000000,1.708200000000),\nvec3(0.350312000000,0.047333000000,1.754800000000),\nvec3(0.357719000000,0.049602000000,1.798500000000),\nvec3(0.364482000000,0.051934000000,1.839200000000),\nvec3(0.370493000000,0.054337000000,1.876600000000),\nvec3(0.375727000000,0.056822000000,1.910500000000),\nvec3(0.380158000000,0.059399000000,1.940800000000),\nvec3(0.383734000000,0.062077000000,1.967280000000),\nvec3(0.386327000000,0.064737000000,1.989100000000),\nvec3(0.387858000000,0.067285000000,2.005700000000),\nvec3(0.388396000000,0.069764000000,2.017400000000),\nvec3(0.387978000000,0.072218000000,2.024400000000),\nvec3(0.386726000000,0.074704000000,2.027300000000),\nvec3(0.384696000000,0.077272000000,2.026400000000),\nvec3(0.382006000000,0.079979000000,2.022300000000),\nvec3(0.378709000000,0.082874000000,2.015300000000),\nvec3(0.374915000000,0.086000000000,2.006000000000),\nvec3(0.370702000000,0.089456000000,1.994800000000),\nvec3(0.366089000000,0.092947000000,1.981400000000),\nvec3(0.361045000000,0.096275000000,1.965300000000),\nvec3(0.355518000000,0.099535000000,1.946400000000),\nvec3(0.349486000000,0.102829000000,1.924800000000),\nvec3(0.342957000000,0.106256000000,1.900700000000),\nvec3(0.335893000000,0.109901000000,1.874100000000),\nvec3(0.328284000000,0.113835000000,1.845100000000),\nvec3(0.320150000000,0.118167000000,1.813900000000),\nvec3(0.311475000000,0.122932000000,1.780600000000),\nvec3(0.302273000000,0.128201000000,1.745370000000),\nvec3(0.292858000000,0.133457000000,1.709100000000),\nvec3(0.283502000000,0.138323000000,1.672300000000),\nvec3(0.274044000000,0.143042000000,1.634700000000),\nvec3(0.264263000000,0.147787000000,1.595600000000),\nvec3(0.254085000000,0.152761000000,1.554900000000),\nvec3(0.243392000000,0.158102000000,1.512200000000),\nvec3(0.232187000000,0.163941000000,1.467300000000),\nvec3(0.220488000000,0.170362000000,1.419900000000),\nvec3(0.208198000000,0.177425000000,1.370000000000),\nvec3(0.195618000000,0.185190000000,1.317560000000),\nvec3(0.183034000000,0.193025000000,1.262400000000),\nvec3(0.170222000000,0.200313000000,1.205000000000),\nvec3(0.157348000000,0.207156000000,1.146600000000),\nvec3(0.144650000000,0.213644000000,1.088000000000),\nvec3(0.132349000000,0.219940000000,1.030200000000),\nvec3(0.120584000000,0.226170000000,0.973830000000),\nvec3(0.109456000000,0.232467000000,0.919430000000),\nvec3(0.099042000000,0.239025000000,0.867460000000),\nvec3(0.089388000000,0.245997000000,0.818280000000),\nvec3(0.080507000000,0.253589000000,0.772125000000),\nvec3(0.072034000000,0.261876000000,0.728290000000),\nvec3(0.063710000000,0.270643000000,0.686040000000),\nvec3(0.055694000000,0.279645000000,0.645530000000),\nvec3(0.048117000000,0.288694000000,0.606850000000),\nvec3(0.041072000000,0.297665000000,0.570060000000),\nvec3(0.034642000000,0.306469000000,0.535220000000),\nvec3(0.028896000000,0.315035000000,0.502340000000),\nvec3(0.023876000000,0.323335000000,0.471400000000),\nvec3(0.019628000000,0.331366000000,0.442390000000),\nvec3(0.016172000000,0.339133000000,0.415254000000),\nvec3(0.013300000000,0.347860000000,0.390024000000),\nvec3(0.010759000000,0.358326000000,0.366399000000),\nvec3(0.008542000000,0.370001000000,0.344015000000),\nvec3(0.006661000000,0.382464000000,0.322689000000),\nvec3(0.005132000000,0.395379000000,0.302356000000),\nvec3(0.003982000000,0.408482000000,0.283036000000),\nvec3(0.003239000000,0.421588000000,0.264816000000),\nvec3(0.002934000000,0.434619000000,0.247848000000),\nvec3(0.003114000000,0.447601000000,0.232318000000),\nvec3(0.003816000000,0.460777000000,0.218502000000),\nvec3(0.005095000000,0.474340000000,0.205851000000),\nvec3(0.006936000000,0.488200000000,0.193596000000),\nvec3(0.009299000000,0.502340000000,0.181736000000),\nvec3(0.012147000000,0.516740000000,0.170281000000),\nvec3(0.015444000000,0.531360000000,0.159249000000),\nvec3(0.019156000000,0.546190000000,0.148673000000),\nvec3(0.023250000000,0.561180000000,0.138609000000),\nvec3(0.027690000000,0.576290000000,0.129096000000),\nvec3(0.032444000000,0.591500000000,0.120215000000),\nvec3(0.037465000000,0.606741000000,0.112044000000),\nvec3(0.042956000000,0.622150000000,0.104710000000),\nvec3(0.049114000000,0.637830000000,0.098196000000),\nvec3(0.055920000000,0.653710000000,0.092361000000),\nvec3(0.063349000000,0.669680000000,0.087088000000),\nvec3(0.071358000000,0.685660000000,0.082248000000),\nvec3(0.079901000000,0.701550000000,0.077744000000),\nvec3(0.088909000000,0.717230000000,0.073456000000),\nvec3(0.098293000000,0.732570000000,0.069268000000),\nvec3(0.107949000000,0.747460000000,0.065060000000),\nvec3(0.117749000000,0.761757000000,0.060709000000),\nvec3(0.127839000000,0.775340000000,0.056457000000),\nvec3(0.138450000000,0.788220000000,0.052609000000),\nvec3(0.149516000000,0.800460000000,0.049122000000),\nvec3(0.161041000000,0.812140000000,0.045954000000),\nvec3(0.172953000000,0.823330000000,0.043050000000),\nvec3(0.185209000000,0.834120000000,0.040368000000),\nvec3(0.197755000000,0.844600000000,0.037839000000),\nvec3(0.210538000000,0.854870000000,0.035384000000),\nvec3(0.223460000000,0.865040000000,0.032949000000),\nvec3(0.236491000000,0.875211000000,0.030451000000),\nvec3(0.249633000000,0.885370000000,0.028029000000),\nvec3(0.262972000000,0.895370000000,0.025862000000),\nvec3(0.276515000000,0.905150000000,0.023920000000),\nvec3(0.290269000000,0.914650000000,0.022174000000),\nvec3(0.304213000000,0.923810000000,0.020584000000),\nvec3(0.318361000000,0.932550000000,0.019127000000),\nvec3(0.332705000000,0.940810000000,0.017740000000),\nvec3(0.347232000000,0.948520000000,0.016403000000),\nvec3(0.361926000000,0.955600000000,0.015064000000),\nvec3(0.376772000000,0.961988000000,0.013676000000),\nvec3(0.391683000000,0.967540000000,0.012308000000),\nvec3(0.406594000000,0.972230000000,0.011056000000),\nvec3(0.421539000000,0.976170000000,0.009915000000),\nvec3(0.436517000000,0.979460000000,0.008872000000),\nvec3(0.451584000000,0.982200000000,0.007918000000),\nvec3(0.466782000000,0.984520000000,0.007030000000),\nvec3(0.482147000000,0.986520000000,0.006223000000),\nvec3(0.497738000000,0.988320000000,0.005453000000),\nvec3(0.513606000000,0.990020000000,0.004714000000),\nvec3(0.529826000000,0.991761000000,0.003988000000),\nvec3(0.546440000000,0.993530000000,0.003289000000),\nvec3(0.563426000000,0.995230000000,0.002646000000),\nvec3(0.580726000000,0.996770000000,0.002063000000),\nvec3(0.598290000000,0.998090000000,0.001533000000),\nvec3(0.616053000000,0.999110000000,0.001091000000),\nvec3(0.633948000000,0.999770000000,0.000711000000),\nvec3(0.651901000000,1.000000000000,0.000407000000),\nvec3(0.669824000000,0.999710000000,0.000184000000),\nvec3(0.687632000000,0.998850000000,0.000047000000),\nvec3(0.705224000000,0.997340000000,0.000000000000),\nvec3(0.722773000000,0.995260000000,0.000000000000),\nvec3(0.740483000000,0.992740000000,0.000000000000),\nvec3(0.758273000000,0.989750000000,0.000000000000),\nvec3(0.776083000000,0.986300000000,0.000000000000),\nvec3(0.793832000000,0.982380000000,0.000000000000),\nvec3(0.811436000000,0.977980000000,0.000000000000),\nvec3(0.828822000000,0.973110000000,0.000000000000),\nvec3(0.845879000000,0.967740000000,0.000000000000),\nvec3(0.862525000000,0.961890000000,0.000000000000),\nvec3(0.878655000000,0.955552000000,0.000000000000),\nvec3(0.894208000000,0.948601000000,0.000000000000),\nvec3(0.909206000000,0.940981000000,0.000000000000),\nvec3(0.923672000000,0.932798000000,0.000000000000),\nvec3(0.937638000000,0.924158000000,0.000000000000),\nvec3(0.951162000000,0.915175000000,0.000000000000),\nvec3(0.964283000000,0.905954000000,0.000000000000),\nvec3(0.977068000000,0.896608000000,0.000000000000),\nvec3(0.989590000000,0.887249000000,0.000000000000),\nvec3(1.001910000000,0.877990000000,0.000000000000),\nvec3(1.014160000000,0.868930000000,0.000000000000),\nvec3(1.026500000000,0.860160000000,0.000000000000),\nvec3(1.038800000000,0.851520000000,0.000000000000),\nvec3(1.051000000000,0.842960000000,0.000000000000),\nvec3(1.062900000000,0.834390000000,0.000000000000),\nvec3(1.074300000000,0.825620000000,0.000000000000),\nvec3(1.085200000000,0.816760000000,0.000000000000),\nvec3(1.095200000000,0.807540000000,0.000000000000),\nvec3(1.104200000000,0.797950000000,0.000000000000),\nvec3(1.112000000000,0.787890000000,0.000000000000),\nvec3(1.118520000000,0.777410000000,0.000000000000),\nvec3(1.123800000000,0.766490000000,0.000000000000),\nvec3(1.128000000000,0.755310000000,0.000000000000),\nvec3(1.131100000000,0.743850000000,0.000000000000),\nvec3(1.133200000000,0.732190000000,0.000000000000),\nvec3(1.134300000000,0.720350000000,0.000000000000),\nvec3(1.134300000000,0.708280000000,0.000000000000),\nvec3(1.133300000000,0.696060000000,0.000000000000),\nvec3(1.131200000000,0.683620000000,0.000000000000),\nvec3(1.128100000000,0.671050000000,0.000000000000),\nvec3(1.123990000000,0.658340000000,0.000000000000),\nvec3(1.118900000000,0.645550000000,0.000000000000),\nvec3(1.112900000000,0.632720000000,0.000000000000),\nvec3(1.105900000000,0.619820000000,0.000000000000),\nvec3(1.098000000000,0.606890000000,0.000000000000),\nvec3(1.089100000000,0.593880000000,0.000000000000),\nvec3(1.079200000000,0.580780000000,0.000000000000),\nvec3(1.068400000000,0.567650000000,0.000000000000),\nvec3(1.056700000000,0.554490000000,0.000000000000),\nvec3(1.044000000000,0.541230000000,0.000000000000),\nvec3(1.030480000000,0.527960000000,0.000000000000),\nvec3(1.016000000000,0.514630000000,0.000000000000),\nvec3(1.000800000000,0.501360000000,0.000000000000),\nvec3(0.984790000000,0.488124000000,0.000000000000),\nvec3(0.968080000000,0.474935000000,0.000000000000),\nvec3(0.950740000000,0.461834000000,0.000000000000),\nvec3(0.932800000000,0.448823000000,0.000000000000),\nvec3(0.914340000000,0.435917000000,0.000000000000),\nvec3(0.895390000000,0.423153000000,0.000000000000),\nvec3(0.876030000000,0.410526000000,0.000000000000),\nvec3(0.856297000000,0.398057000000,0.000000000000),\nvec3(0.836350000000,0.385835000000,0.000000000000),\nvec3(0.816290000000,0.373951000000,0.000000000000),\nvec3(0.796050000000,0.362311000000,0.000000000000),\nvec3(0.775610000000,0.350863000000,0.000000000000),\nvec3(0.754930000000,0.339554000000,0.000000000000),\nvec3(0.733990000000,0.328309000000,0.000000000000),\nvec3(0.712780000000,0.317118000000,0.000000000000),\nvec3(0.691290000000,0.305936000000,0.000000000000),\nvec3(0.669520000000,0.294737000000,0.000000000000),\nvec3(0.647467000000,0.283493000000,0.000000000000),\nvec3(0.625110000000,0.272222000000,0.000000000000),\nvec3(0.602520000000,0.260990000000,0.000000000000),\nvec3(0.579890000000,0.249877000000,0.000000000000),\nvec3(0.557370000000,0.238946000000,0.000000000000),\nvec3(0.535110000000,0.228254000000,0.000000000000),\nvec3(0.513240000000,0.217853000000,0.000000000000),\nvec3(0.491860000000,0.207780000000,0.000000000000),\nvec3(0.471080000000,0.198072000000,0.000000000000),\nvec3(0.450960000000,0.188748000000,0.000000000000),\nvec3(0.431567000000,0.179828000000,0.000000000000),\nvec3(0.412870000000,0.171285000000,0.000000000000),\nvec3(0.394750000000,0.163059000000,0.000000000000),\nvec3(0.377210000000,0.155151000000,0.000000000000),\nvec3(0.360190000000,0.147535000000,0.000000000000),\nvec3(0.343690000000,0.140211000000,0.000000000000),\nvec3(0.327690000000,0.133170000000,0.000000000000),\nvec3(0.312170000000,0.126400000000,0.000000000000),\nvec3(0.297110000000,0.119892000000,0.000000000000),\nvec3(0.282500000000,0.113640000000,0.000000000000),\nvec3(0.268329000000,0.107633000000,0.000000000000),\nvec3(0.254590000000,0.101870000000,0.000000000000),\nvec3(0.241300000000,0.096347000000,0.000000000000),\nvec3(0.228480000000,0.091063000000,0.000000000000),\nvec3(0.216140000000,0.086010000000,0.000000000000),\nvec3(0.204300000000,0.081187000000,0.000000000000),\nvec3(0.192950000000,0.076583000000,0.000000000000),\nvec3(0.182110000000,0.072198000000,0.000000000000),\nvec3(0.171770000000,0.068024000000,0.000000000000),\nvec3(0.161920000000,0.064052000000,0.000000000000),\nvec3(0.152568000000,0.060281000000,0.000000000000),\nvec3(0.143670000000,0.056697000000,0.000000000000),\nvec3(0.135200000000,0.053292000000,0.000000000000),\nvec3(0.127130000000,0.050059000000,0.000000000000),\nvec3(0.119480000000,0.046998000000,0.000000000000),\nvec3(0.112210000000,0.044096000000,0.000000000000),\nvec3(0.105310000000,0.041345000000,0.000000000000),\nvec3(0.098786000000,0.038750700000,0.000000000000),\nvec3(0.092610000000,0.036297800000,0.000000000000),\nvec3(0.086773000000,0.033983200000,0.000000000000),\nvec3(0.081260600000,0.031800400000,0.000000000000),\nvec3(0.076048000000,0.029739500000,0.000000000000),\nvec3(0.071114000000,0.027791800000,0.000000000000),\nvec3(0.066454000000,0.025955100000,0.000000000000),\nvec3(0.062062000000,0.024226300000,0.000000000000),\nvec3(0.057930000000,0.022601700000,0.000000000000),\nvec3(0.054050000000,0.021077900000,0.000000000000),\nvec3(0.050412000000,0.019650500000,0.000000000000),\nvec3(0.047006000000,0.018315300000,0.000000000000),\nvec3(0.043823000000,0.017068600000,0.000000000000),\nvec3(0.040850800000,0.015905100000,0.000000000000),\nvec3(0.038072000000,0.014818300000,0.000000000000),\nvec3(0.035468000000,0.013800800000,0.000000000000),\nvec3(0.033031000000,0.012849500000,0.000000000000),\nvec3(0.030753000000,0.011960700000,0.000000000000),\nvec3(0.028623000000,0.011130300000,0.000000000000),\nvec3(0.026635000000,0.010355500000,0.000000000000),\nvec3(0.024781000000,0.009633200000,0.000000000000),\nvec3(0.023052000000,0.008959900000,0.000000000000),\nvec3(0.021441000000,0.008332400000,0.000000000000),\nvec3(0.019941300000,0.007748800000,0.000000000000),\nvec3(0.018544000000,0.007204600000,0.000000000000),\nvec3(0.017241000000,0.006697500000,0.000000000000),\nvec3(0.016027000000,0.006225100000,0.000000000000),\nvec3(0.014896000000,0.005785000000,0.000000000000),\nvec3(0.013842000000,0.005375100000,0.000000000000),\nvec3(0.012862000000,0.004994100000,0.000000000000),\nvec3(0.011949000000,0.004639200000,0.000000000000),\nvec3(0.011100000000,0.004309300000,0.000000000000),\nvec3(0.010311000000,0.004002800000,0.000000000000),\nvec3(0.009576880000,0.003717740000,0.000000000000),\nvec3(0.008894000000,0.003452620000,0.000000000000),\nvec3(0.008258100000,0.003205830000,0.000000000000),\nvec3(0.007666400000,0.002976230000,0.000000000000),\nvec3(0.007116300000,0.002762810000,0.000000000000),\nvec3(0.006605200000,0.002564560000,0.000000000000),\nvec3(0.006130600000,0.002380480000,0.000000000000),\nvec3(0.005690300000,0.002209710000,0.000000000000),\nvec3(0.005281900000,0.002051320000,0.000000000000),\nvec3(0.004903300000,0.001904490000,0.000000000000),\nvec3(0.004552630000,0.001768470000,0.000000000000),\nvec3(0.004227500000,0.001642360000,0.000000000000),\nvec3(0.003925800000,0.001525350000,0.000000000000),\nvec3(0.003645700000,0.001416720000,0.000000000000),\nvec3(0.003385900000,0.001315950000,0.000000000000),\nvec3(0.003144700000,0.001222390000,0.000000000000),\nvec3(0.002920800000,0.001135550000,0.000000000000),\nvec3(0.002713000000,0.001054940000,0.000000000000),\nvec3(0.002520200000,0.000980140000,0.000000000000),\nvec3(0.002341100000,0.000910660000,0.000000000000),\nvec3(0.002174960000,0.000846190000,0.000000000000),\nvec3(0.002020600000,0.000786290000,0.000000000000),\nvec3(0.001877300000,0.000730680000,0.000000000000),\nvec3(0.001744100000,0.000678990000,0.000000000000),\nvec3(0.001620500000,0.000631010000,0.000000000000),\nvec3(0.001505700000,0.000586440000,0.000000000000),\nvec3(0.001399200000,0.000545110000,0.000000000000),\nvec3(0.001300400000,0.000506720000,0.000000000000),\nvec3(0.001208700000,0.000471110000,0.000000000000),\nvec3(0.001123600000,0.000438050000,0.000000000000),\nvec3(0.001044760000,0.000407410000,0.000000000000),\nvec3(0.000971560000,0.000378962000,0.000000000000),\nvec3(0.000903600000,0.000352543000,0.000000000000),\nvec3(0.000840480000,0.000328001000,0.000000000000),\nvec3(0.000781870000,0.000305208000,0.000000000000),\nvec3(0.000727450000,0.000284041000,0.000000000000),\nvec3(0.000676900000,0.000264375000,0.000000000000),\nvec3(0.000629960000,0.000246109000,0.000000000000),\nvec3(0.000586370000,0.000229143000,0.000000000000),\nvec3(0.000545870000,0.000213376000,0.000000000000),\nvec3(0.000508258000,0.000198730000,0.000000000000),\nvec3(0.000473300000,0.000185115000,0.000000000000),\nvec3(0.000440800000,0.000172454000,0.000000000000),\nvec3(0.000410580000,0.000160678000,0.000000000000),\nvec3(0.000382490000,0.000149730000,0.000000000000),\nvec3(0.000356380000,0.000139550000,0.000000000000),\nvec3(0.000332110000,0.000130086000,0.000000000000),\nvec3(0.000309550000,0.000121290000,0.000000000000),\nvec3(0.000288580000,0.000113106000,0.000000000000),\nvec3(0.000269090000,0.000105501000,0.000000000000),\nvec3(0.000250969000,0.000098428000,0.000000000000),\nvec3(0.000234130000,0.000091853000,0.000000000000),\nvec3(0.000218470000,0.000085738000,0.000000000000),\nvec3(0.000203910000,0.000080048000,0.000000000000),\nvec3(0.000190350000,0.000074751000,0.000000000000),\nvec3(0.000177730000,0.000069819000,0.000000000000),\nvec3(0.000165970000,0.000065222000,0.000000000000),\nvec3(0.000155020000,0.000060939000,0.000000000000),\nvec3(0.000144800000,0.000056942000,0.000000000000),\nvec3(0.000135280000,0.000053217000,0.000000000000),\nvec3(0.000126390000,0.000049737000,0.000000000000),\nvec3(0.000118100000,0.000046491000,0.000000000000),\nvec3(0.000110370000,0.000043464000,0.000000000000),\nvec3(0.000103150000,0.000040635000,0.000000000000),\nvec3(0.000096427000,0.000038000000,0.000000000000),\nvec3(0.000090151000,0.000035540500,0.000000000000),\nvec3(0.000084294000,0.000033244800,0.000000000000),\nvec3(0.000078830000,0.000031100600,0.000000000000),\nvec3(0.000073729000,0.000029099000,0.000000000000),\nvec3(0.000068969000,0.000027230700,0.000000000000),\nvec3(0.000064525800,0.000025486000,0.000000000000),\nvec3(0.000060376000,0.000023856100,0.000000000000),\nvec3(0.000056500000,0.000022333200,0.000000000000),\nvec3(0.000052880000,0.000020910400,0.000000000000),\nvec3(0.000049498000,0.000019580800,0.000000000000),\nvec3(0.000046339000,0.000018338400,0.000000000000),\nvec3(0.000043389000,0.000017177700,0.000000000000),\nvec3(0.000040634000,0.000016093400,0.000000000000),\nvec3(0.000038060000,0.000015080000,0.000000000000),\nvec3(0.000035657000,0.000014133600,0.000000000000),\nvec3(0.000033411700,0.000013249000,0.000000000000),\nvec3(0.000031315000,0.000012422600,0.000000000000),\nvec3(0.000029355000,0.000011649900,0.000000000000),\nvec3(0.000027524000,0.000010927700,0.000000000000),\nvec3(0.000025811000,0.000010251900,0.000000000000),\nvec3(0.000024209000,0.000009619600,0.000000000000),\nvec3(0.000022711000,0.000009028100,0.000000000000),\nvec3(0.000021308000,0.000008474000,0.000000000000),\nvec3(0.000019994000,0.000007954800,0.000000000000),\nvec3(0.000018764000,0.000007468600,0.000000000000),\nvec3(0.000017611500,0.000007012800,0.000000000000),\nvec3(0.000016532000,0.000006585800,0.000000000000),\nvec3(0.000015521000,0.000006185700,0.000000000000),\nvec3(0.000014574000,0.000005810700,0.000000000000),\nvec3(0.000013686000,0.000005459000,0.000000000000),\nvec3(0.000012855000,0.000005129800,0.000000000000),\nvec3(0.000012075000,0.000004820600,0.000000000000),\nvec3(0.000011345000,0.000004531200,0.000000000000),\nvec3(0.000010659000,0.000004259100,0.000000000000),\nvec3(0.000010017000,0.000004004200,0.000000000000),\nvec3(0.000009413630,0.000003764730,0.000000000000),\nvec3(0.000008847900,0.000003539950,0.000000000000),\nvec3(0.000008317100,0.000003329140,0.000000000000),\nvec3(0.000007819000,0.000003131150,0.000000000000),\nvec3(0.000007351600,0.000002945290,0.000000000000),\nvec3(0.000006913000,0.000002770810,0.000000000000),\nvec3(0.000006501500,0.000002607050,0.000000000000),\nvec3(0.000006115300,0.000002453290,0.000000000000),\nvec3(0.000005752900,0.000002308940,0.000000000000),\nvec3(0.000005412700,0.000002173380,0.000000000000),\nvec3(0.000005093470,0.000002046130,0.000000000000),\nvec3(0.000004793800,0.000001926620,0.000000000000),\nvec3(0.000004512500,0.000001814400,0.000000000000),\nvec3(0.000004248300,0.000001708950,0.000000000000),\nvec3(0.000004000200,0.000001609880,0.000000000000),\nvec3(0.000003767100,0.000001516770,0.000000000000),\nvec3(0.000003548000,0.000001429210,0.000000000000),\nvec3(0.000003342100,0.000001346860,0.000000000000),\nvec3(0.000003148500,0.000001269450,0.000000000000),\nvec3(0.000002966500,0.000001196620,0.000000000000),\nvec3(0.000002795310,0.000001128090,0.000000000000),\nvec3(0.000002634500,0.000001063680,0.000000000000),\nvec3(0.000002483400,0.000001003130,0.000000000000),\nvec3(0.000002341400,0.000000946220,0.000000000000),\nvec3(0.000002207800,0.000000892630,0.000000000000),\nvec3(0.000002082000,0.000000842160,0.000000000000),\nvec3(0.000001963600,0.000000794640,0.000000000000),\nvec3(0.000001851900,0.000000749780,0.000000000000),\nvec3(0.000001746500,0.000000707440,0.000000000000),\nvec3(0.000001647100,0.000000667480,0.000000000000),\nvec3(0.000001553140,0.000000629700,0.000000000000));\n\nfloat d65[] = float[](\n  0.00,   0.03,   0.33,   1.60,   4.17,   8.76,  15.61,  24.24,\n 31.93,  37.94,  43.65,  47.99,  47.23,  46.01,  49.19,  52.63,\n 67.11,  81.45,  85.97,  90.20,  90.96,  91.75,  88.40,  85.08,\n 93.98, 102.94, 109.14, 115.49, 116.30, 117.08, 115.89, 114.62,\n115.30, 115.97, 112.55, 109.12, 109.48, 109.82, 109.12, 108.41,\n106.93, 105.42, 106.84, 108.25, 106.54, 104.83, 104.57, 104.29,\n102.16, 100.00,  98.03,  96.01,  95.50,  94.97,  91.19,  87.44,\n 87.84,  88.27,  87.86,  87.41,  86.16,  84.90,  82.50,  80.13,\n 80.05,  79.97,  77.97,  75.97,  75.83,  75.69,  76.44,  77.15,\n 74.94,  72.77,  68.58,  64.42,  65.04,  65.62,  66.60,  67.57,\n 61.51,  55.50,  59.00,  62.46,  64.50,  66.48,  61.13,  55.83,\n 48.09,  40.41,  49.09,  57.70,  56.00,  54.30);\n\nfloat sun[] = float[](\n0.979, 0.894, 1.175, 0.958, 1.015, 1.263, 1.249, 1.214,\n1.088, 1.331, 1.075, 1.307, 1.065, 0.838, 0.878, 1.141,\n1.101, 1.291, 1.341, 1.000, 1.289, 1.096, 0.733, 0.684,\n1.027, 0.954, 1.071, 0.966, 0.912, 1.227, 1.223, 1.398,\n0.955, 0.489, 1.101, 1.378, 0.650, 1.040, 1.538, 1.655,\n1.649, 1.796, 1.803, 1.658, 1.602, 1.672, 1.624, 1.545,\n1.824, 1.706, 1.502, 1.819, 1.791, 1.758, 1.739, 1.736,\n1.844, 1.667, 1.686, 1.703, 1.760, 1.799, 1.584, 1.713,\n1.770, 1.697, 1.700, 1.571, 1.589, 1.477, 1.136, 1.688,\n1.648, 1.733, 1.672, 1.725, 1.931, 1.808, 1.569, 1.827,\n1.715, 1.933, 1.982, 1.911, 1.975, 1.823, 1.893, 2.079,\n1.975, 2.029, 2.146, 2.111, 1.943, 1.972, 1.981, 2.036,\n2.079, 2.102, 1.973, 2.011, 2.042, 2.057, 2.106, 2.042,\n1.978, 2.044, 1.923, 2.017, 1.996, 1.992, 1.879, 2.020,\n2.043, 1.993, 2.053, 2.018, 1.958, 2.077, 2.011, 2.078,\n2.037, 2.092, 2.025, 2.021, 1.971, 1.832, 1.627, 1.832,\n1.916, 1.962, 2.009, 1.898, 1.898, 1.890, 2.060, 1.928,\n2.019, 2.020, 1.868, 1.972, 1.859, 1.814, 1.896, 1.936,\n1.871, 1.995, 1.963, 1.908, 1.921, 1.918, 1.949, 1.999,\n1.869, 1.863, 1.876, 1.902, 1.671, 1.728, 1.656, 1.830,\n1.833, 1.908, 1.825, 1.896, 1.960, 1.932, 1.676, 1.830,\n1.899, 1.920, 1.954, 1.965, 1.773, 1.925, 1.860, 1.992,\n1.873, 1.884, 1.906, 1.834, 1.772, 1.883, 1.827, 1.881,\n1.881, 1.903, 1.881, 1.835, 1.865, 1.897, 1.864, 1.873,\n1.848, 1.884, 1.900, 1.899, 1.823, 1.848, 1.789, 1.810,\n1.845, 1.826, 1.852, 1.863, 1.856, 1.800, 1.831, 1.889,\n1.812, 1.862, 1.772, 1.825, 1.894, 1.878, 1.869, 1.832,\n1.848, 1.859, 1.786, 1.830, 1.840, 1.855, 1.875, 1.859,\n1.862, 1.786, 1.832, 1.850, 1.752, 1.614, 1.815, 1.789,\n1.810, 1.798, 1.776, 1.785, 1.807, 1.783, 1.760, 1.777,\n1.748, 1.753, 1.721, 1.789, 1.779, 1.766, 1.762, 1.760,\n1.745, 1.746, 1.705, 1.748, 1.707, 1.685, 1.715, 1.715,\n1.611, 1.709, 1.726, 1.709, 1.736, 1.692, 1.715, 1.668,\n1.658, 1.634, 1.699, 1.699, 1.699, 1.679, 1.641, 1.653,\n1.658, 1.656, 1.653, 1.616, 1.623, 1.629, 1.605, 1.560,\n1.608, 1.601, 1.534, 1.386, 1.551, 1.573, 1.557, 1.562,\n1.537, 1.548, 1.518, 1.523, 1.512, 1.510, 1.500, 1.494,\n1.481, 1.457, 1.469, 1.463, 1.450, 1.450, 1.438, 1.418,\n1.427);\n\n// integer domain CIEXYZ Color Matching Functions\nvec3 ciecmfi(\n  int l) {\n  return l >= 360 && l <= 830 ? cmf2[l - 360] : vec3(0.0); }\n\n// integer domain CIE Standard Illuminant D65\nfloat cied65i(\n  int l) {\n  return l >= 315 && l <= 780 ? d65[(l - 315) / 5] : 0.0; }\n\n// integer domain sunlight spectral power distribution function\nfloat sunlighti(\n  int l) {\n  return l >= 360 && l <= 700 ? sun[l - 360] : 0.0; }\n\n// CIEXYZ Color Matching Functions\nvec3 ciecmf(\n  float l) {\n  return ciecmfi(int(l)); }\n\n// sunlight spectral power distribution function\nfloat sunlight(\n  float l) {\n  return sunlighti(int(l)); }\n\n// CIE Standard Illuminant D65\nfloat cied65(\n  float l) {\n  return cied65i(int(l)); }\n\n// color math\n\n// inverse term in Planck's law\nfloat planck_d(\n  float l,\n  float T) {\n  return exp(1.43877688e7 / (l * T)) - 1.0; }\n\n// CIE Standard Illuminant D\nfloat cied(\n  float l,\n  float T) {\n  return planck_d(l, 6500.0) / planck_d(l, T) * cied65(l); }\n\n// Planck's law\nfloat black_body(\n  float l,\n  float T) {\n  return 5.95521486e19 * pow(l, -4.0) / planck_d(l, T); }\n\n// Rayleigh law\nfloat rayleigh(\n  float l,\n  float s) {\n  return pow(l / s, -4.0); }\n\n// CIEXYZ color to linear sRGB color\nconst mat3 XYZ2sRGB = mat3(\n  3.2410,-0.9692, 0.0556,\n  -1.5374, 1.8760,-0.2040,\n  -0.4986, 0.0416, 1.0570);\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_gamma(\n  float v) {\n  return v <= 0.0031308\n    ? v * 12.92\n    : 1.055 * pow(v, 0.41666666666) - 0.055; }\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_igamma(\n  float v) {\n  return v <= 0.04045\n    ? v * 0.0773993808\n    : pow((v + 0.055) * 0.94786729857, 2.4) ; }\n\n// physical quantities\n\n// Fresnel defaults\nfloat glassior(float wavelength) {\n  return 1.45 - 0.00004979186 * wavelength; }\n\nfloat stoneior(float wavelength) {\n  return 2.7 - 0.00005 * wavelength; }\n\n// math lib\n\n// needed to produce infinities\nfloat zero = 0.0;\n\nvec2 dir2(\n  float a) {\n  return vec2(cos(a), sin(a)); }\n\nfloat quadsorb(float wavelength, float c, float w) {\n  return 1.0 + pow((wavelength - c) / w, 2.0); }\n\nvec3 projectu(vec3 v, vec3 u) {\n  return u * dot(v, u); }\n\nvec3 rejectu(vec3 v, vec3 u) {\n  return v - projectu(v, u); }\n\nfloat clampe(\n  float v) {\n  return\n    v < 0.5 ? 0.0 :\n    v > 0.5 ? 1.0 :\n    0.5 + v; }\n\nfloat clampep(\n  float v) {\n  return\n    v < 0.5 ? 0.0 :\n    v > 0.5 ? 0.0 :\n    1.0; }\n\nfloat sine(\n  float v) {\n  return\n    v <= -0.78539816339 ? 0.0 :\n    v >= 0.78539816339 ? 1.0 :\n    0.5 + 0.5 * sin(v); }\n\nfloat sinep(\n  float v) {\n  return\n    v <= -0.78539816339 ? 0.0 :\n    v >= 0.78539816339 ? 0.0 :\n    0.5 * cos(v); }\n\nfloat logistic(\n  float v) {\n  return 1.0 / (1.0 + exp(-v)); }\n\nfloat logisticp(\n  float v) {\n  float q = 1.0 / (1.0 + exp(v));\n  return q - q * q; }\n\nfloat sqrte(\n  float v) {\n  return v > 0.0 ? sqrt(v) : 0.0; }\n\nfloat sqrtep(\n  float v) {\n  return v > 0.0 ? 0.5 * pow(v, -0.5) : 0.0; }\n\n// functions with gradients\n\nvec4 constantg(\n  vec4 v) {\n  return v; }\n\nvec4 addg(\n  vec4 v,\n  vec4 u) {\n  return v + u; }\n\nvec4 subtractg(\n  vec4 v,\n  vec4 u) {\n  return v - u; }\n\nvec4 maxg(\n  vec4 v,\n  vec4 u) {\n  return v.w > u.w ? v : u; }\n\nvec4 ming(\n  vec4 v,\n  vec4 u) {\n  return v.w < u.w ? v : u; }\n \nvec4 clampeg(\n  vec4 v) {\n  return vec4(clampep(v.w) * v.xyz, clampe(v.w)); }\n\nvec4 sineg(\n  vec4 v) {\n  return vec4(sinep(v.w) * v.xyz, sine(v.w)); }\n\nvec4 logisticg(\n  vec4 v) {\n  return vec4(logisticp(v.w) * v.xyz, logistic(v.w)); }\n\nvec4 sqrteg(\n  vec4 v) {\n  return vec4(sqrtep(v.w) * v.xyz, sqrte(v.w)); }\n\n// amazing softminmax functions\n\nfloat softmax_clampe(float a, float b, float speed, out float param) {\n  param = clampe(speed * (b - a));\n  return (1.0 - param) * a + param * b; }\n\nfloat softmin_clampe(float a, float b, float speed, out float param) {\n  param = clampe(speed * (a - b));\n  return (1.0 - param) * a + param * b; }\n\nfloat softmax_logistic(float a, float b, float speed, out float param) {\n  param = logistic(speed * (b - a));\n  return (1.0 - param) * a + param * b; }\n\nfloat softmin_logistic(float a, float b, float speed, out float param) {\n  param = logistic(speed * (a - b));\n  return (1.0 - param) * a + param * b; }\n\nfloat softmax_sin(float a, float b, float speed, out float param) {\n  param = sine(speed * (b - a));\n  return (1.0 - param) * a + param * b; }\n\nfloat softmin_sin(float a, float b, float speed, out float param) {\n  param = sine(speed * (a - b));\n  return (1.0 - param) * a + param * b; }\n\n// vector lib\n\n// handy nil vector\nconst vec4 nil = vec4(0.0);\n\n// basis vectors\nconst vec4 dx = vec4(1.0, nil.xyz);\nconst vec4 dy = dx.wxyz;\nconst vec4 dz = dy.wxyz;\nconst vec4 dw = dz.wxyz;\n\n// transformation matrices\n\nmat4 translate(\n  vec4 by) {\n  return mat4(dx, dy, dz, dw + by); }\n\nmat4 scale(\n  float by) {\n  return mat4(by * dx, by * dy, by * dz, dw); }\n\nmat4 rotate(\n  vec4 axis,\n  float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  vec4 l = (1.0 - c) * axis;\n  vec3 m = l.xyz * axis.yzx;\n  vec4 n = s * axis;\n  return mat4(\n    l.x * axis.x, m.x - n.z, m.z + n.y, 0.0,\n    m.x + n.z, l.y * axis.y, m.y - n.x, 0.0,\n    m.z - n.y, m.y + n.x, l.z * axis.z, 0.0,\n    nil) + scale(c); }\n\n// raytracing lib\n\nvoid combine(float d, int obj, inout float dmin, inout int hit_obj) {\n  if (d < dmin) {\n    dmin = d;\n    hit_obj = obj; } }\n\n// hypotenuses, distance estimators, and normals\n\nfloat d_torus(\n  vec4 p,\n  float r) {\n  return (sqrt(pow(length(p.xz) - 1.0, 2.0) + pow(p.y, 2.0)) - r) / p.w; }\n\nfloat d_sphere(\n  vec4 p) {\n  return \n    (length(p.xyz) - 1.0) / p.w; }\n\nfloat d_apo(\n  vec4 p,\n  out vec4 n) {\n  for (int i = 0; i < 8; ++i) {\n    p.xyz = mod(p.xyz - 1.0, 2.0) - 1.0;\n    p *= 1.4 / dot(p.xyz, p.xyz); }\n  n = vec4(normalize(p.xyz), 0.0);\n  return length(p.yz) / (3.0 * p.w); }\n\nvec4 n_sphere(\n  vec4 p) {\n  return vec4(normalize(p.xyz), 0.0); }\n\nfloat d_box(\n  vec4 p,\n  out vec4 n) {\n  vec3 a = abs(p.xyz) - 0.5;\n  float d = max(max(a.x, a.y), a.z);\n  n = normalize(\n    d == a.x ? vec4(p.x, nil.yzw) :\n    d == a.y ? vec4(nil.x, p.y, nil.zw) :\n    /*      */ vec4(nil.xy, p.z, nil.w));\n  return d / p.w; }\n\nfloat d_tetrahedron(\n  vec4 p,\n  out vec4 n) {\n  vec4 a = vec4(\n    -p.x - p.y - p.z,\n     p.x + p.y - p.z,\n    -p.x + p.y + p.z,\n     p.x - p.y + p.z);\n  float d = max(max(max(a.x, a.y), a.z), a.w);\n  n = normalize(\n    d == a.x ? vec4(-1.0, -1.0, -1.0, 0.0) :\n    d == a.y ? vec4(1.0, 1.0, -1.0, 0.0) :\n    d == a.z ? vec4(-1.0, 1.0, 1.0, 0.0) :\n    /*      */ vec4(1.0, -1.0, 1.0, 0.0));\n  return (d - 1.0) / (p.w * sqrt(3.0)); }\n\nfloat h_plane(\n  vec4 p,\n  vec4 dp,\n  vec4 n) {\n  float v = dot(dp, n);\n  return v > 0.0 ? 1.0 / zero : -dot(p, n) / (v * p.w); }\n\n// pseudorandom\n\n// i can't believe it's an LCG\n// https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00996-5/S0025-5718-99-00996-5.pdf\nint next_hash(\n  int s) {\n  return s * 594156893; }\n\n// multilinear congruential seed function\nint hash(\n  int k,\n  int x,\n  int y) {\n  int s = next_hash(k * 37769685);\n  s ^= next_hash(x * 26757677);\n  s ^= next_hash(y * 20501397);\n  return next_hash(s); }\n\nint rand(\n  inout int s) {\n  s = next_hash(s);\n  return s >> 1; }\n\nconst int rand_size = 1 << 31;\n\nfloat unitrand(\n  inout int s) {\n  return float(rand(s) + (rand_size >> 1)) / float(rand_size); }\n\nfloat boxrand(\n  inout int s) {\n  return float(rand(s)) / float(rand_size); }\n\n// shading routines\n\n// models an interaction with isotropic roughness\n// n - the surface normal\n// s - the azimuth of the incoming ray\n// you should supply a random value between 1.0 and -1.0 for s\nvec4 axial(\n  vec4 n,\n  float v,\n  inout int s) {\n  float u = 6.28318530718 * boxrand(s);\n  float r = sqrt(1.0 - pow(v, 2.0));\n  vec3 t = normalize(vec3(-n.z, 0.0, n.x));\n  vec3 b = cross(n.xyz, t.xyz);\n  return vec4(v * n.xyz + r * (cos(u) * t + sin(u) * b), 0.0); }\n\n// diffuse reflection\n// models interaction with a surface with power-law-distributed isotropic roughness\n// reduces the reflectivity by a factor of ref0 for each intermediate interaction\n// give up after 4 tries\nfloat shade_diffuse(\n  inout int seed,\n  inout vec4 heading,\n  vec4 normal,\n  float smoothness,\n  float reflectance) {\n  float ref = 1.0;\n  int i = 0;\n  while (++i != 4 && dot(heading, normal) < 0.0) {\n    ref *= reflectance;\n    heading = axial(reflect(heading, normal), 1.0 - 2.0 * pow(unitrand(seed), smoothness), seed); }\n  if (i == 4) heading = axial(normal, 1.0 - pow(unitrand(seed), smoothness), seed);\n  return ref; }\n\nvoid shade_fresnel(inout int seed, inout vec4 heading, bool interior, vec4 normal, float ior) {\n  if (!interior) normal = -normal;\n  float ior1 = interior ? ior : 1.0;\n  float ior2 = interior ? 1.0 : ior;\n  float dt1 = dot(heading, normal);\n  float ior12 = pow(ior1, 2.0);\n  float ior22 = pow(ior2, 2.0);\n  float dt12 = pow(dt1, 2.0);\n  float discriminant = -1.0 + ior22 / ior12 + dt12;\n    // total internal reflection by default\n  float reflectance = 1.0;\n  vec4 refracted_heading;\n  if (discriminant >= 0.0) {\n    // fresnel reflectance for positive discriminant\n    refracted_heading = normalize(\n      heading\n      + (-dt1 + sqrt(discriminant)) * normal);\n    float dt2 = dot(refracted_heading, normal);\n    float dt22 = pow(dt2, 2.0);\n    float k1 = ior12 * dt12 + ior22 * dt22;\n    float k2 = ior22 * dt12 + ior12 * dt22;\n    float v = 2.0 * ior1 * ior2 * dt1 * dt2;\n    reflectance = 0.5 * (\n      (k1 - v) / (k1 + v)\n      + (k2 - v) / (k2 + v)); }\n  heading =\n    reflectance >= unitrand(seed) ?\n      reflect(heading, normal) :\n    refracted_heading; }\n\n// 3d noise\n\nfloat hash3d(\n  float seed,\n  vec3 p) {\n  p = 50.0 * fract(p * 0.3183099 + vec3(0.71, 0.113, 0.33));\n  return -1.0 + 2.0 * fract(1.375986 * seed + p.x * p.y * p.z * (p.x + p.y + p.z)); }\n\n// perlin noise with gradient\nvec4 noise3d(\n  float seed,\n  vec3 p) {\n  vec3 i = floor(p);\n  vec3 f = p - i;\n  vec3 u = f * f * (3.0 - 2.0 * f);\n  vec3 v = 1.0 - u;\n  vec3 w = -6.0 * (f - 1.0) * f;\n  float k[8] = float[8](\n    hash3d(seed, i + vec3(0.0, 0.0, 0.0)),\n    hash3d(seed, i + vec3(1.0, 0.0, 0.0)),\n    hash3d(seed, i + vec3(0.0, 1.0, 0.0)),\n    hash3d(seed, i + vec3(1.0, 1.0, 0.0)),\n    hash3d(seed, i + vec3(0.0, 0.0, 1.0)),\n    hash3d(seed, i + vec3(1.0, 0.0, 1.0)),\n    hash3d(seed, i + vec3(0.0, 1.0, 1.0)),\n    hash3d(seed, i + vec3(1.0, 1.0, 1.0)));\n  return vec4(\n    -w.x * v.y * v.z * k[0]\n   + w.x * v.y * v.z * k[1]\n   - w.x * u.y * v.z * k[2]\n   + w.x * u.y * v.z * k[3]\n   + w.x * v.y * u.z * k[4]\n   - w.x * v.y * u.z * k[5]\n   + w.x * u.y * u.z * k[6]\n   - w.x * u.y * u.z * k[7],\n\n    -v.x * w.y * v.z * k[0]\n   - u.x * w.y * v.z * k[1]\n   + v.x * w.y * v.z * k[2]\n   + u.x * w.y * v.z * k[3]\n   - v.x * w.y * u.z * k[4]\n   - u.x * w.y * u.z * k[5]\n   + v.x * w.y * u.z * k[6]\n   + u.x * w.y * u.z * k[7],\n\n    -v.x * v.y * w.z * k[0]\n   - u.x * v.y * w.z * k[1]\n   - v.x * u.y * w.z * k[2]\n   - u.x * u.y * w.z * k[3]\n   + v.x * v.y * w.z * k[4]\n   + u.x * v.y * w.z * k[5]\n   + v.x * u.y * w.z * k[6]\n   + u.x * u.y * w.z * k[7],\n\n     v.x * v.y * v.z * k[0]\n   + u.x * v.y * v.z * k[1]\n   + v.x * u.y * v.z * k[2]\n   + u.x * u.y * v.z * k[3]\n   + v.x * v.y * u.z * k[4]\n   + u.x * v.y * u.z * k[5]\n   + v.x * u.y * u.z * k[6]\n   + u.x * u.y * u.z * k[7]); }\n\n// fractal noise with gradient\nvec4 fractal3d(\n  float seed,\n  vec3 p,\n  float division,\n  float attenuation,\n  int harmonics) {\n  vec4 value = vec4(0.0);\n  float ampl = 1.0;\n  float freq = 1.0;\n  for (int i = 0; i < harmonics; i++) {\n    vec4 step = noise3d(seed, freq * p);\n    step *= ampl;\n    step.xyz *= freq;\n    value += step;\n    freq += division;\n    ampl += attenuation;\n    seed += 1.0; }\n  return value; }\n\n// hardcore interactive programming\n\n#define DEFGET \\\nvec4 get(\\\n  int prop) {\\\n  vec2 xy = vec2(\\\n    float(prop % int(iResolution.x) + 1),\\\n    float(prop / int(iResolution.x) + 1));\\\n  return texture(iChannel1, xy / iResolution.xy); }\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"DEFGET\n\nint at(vec2 a) {\n  return\n    int(a.x) + int(iResolution.x) * int(a.y); }\n\nvoid mainImage(out vec4 c, in vec2 xy) {\n  c = get(int(xy.x) + int(iResolution.x) * int(xy.y));\n\n  bool visible = get(0).x > 0.0;\n  bool click = iMouse.z > 0.0;\n  bool down = click && get(1).z < 0.0;\n  int x = int(iMouse.x);\n  int y = int(iMouse.y);\n\n  switch (at(xy)) {\n  case 0: {\n    if (iFrame == 0) {\n      c = vec4(-1.0); }\n    if (down && (!visible || x >= 100 || y >= 100)) {\n      c.x = c.x > 0.0 ? -1.0 : 1.0; } }\n  break;\n  case 1: {\n    c = iMouse; }\n  break;\n\n#define CLICKY(l, r, b, t, z) \\\n      else if (x > l && x < r && y > b && y < t) { \\\n        z; }\n  // orbit\n  case 2: {\n    if (iFrame == 0) {\n      c = vec4(-0.5, 0.0, 0.0, 6.0); }\n    if (!visible || !click) {}\n    else {\n      if (false) {}\n      CLICKY(55, 65, 10, 20, c.w *= exp(-0.01);) // fore dolly\n      CLICKY(55, 65, 25, 35, c.w *= exp(0.01);) // hind dolly\n      else if (get(5).x > 0.0) {}\n      CLICKY(10, 20, 10, 20, c.x -= 0.01;) // left yaw\n      CLICKY(25, 35, 10, 20, c.y -= 0.01;) // fore pitch\n      CLICKY(40, 50, 10, 20, c.x += 0.01;) // right yaw\n      CLICKY(10, 20, 25, 35, c.z += 0.01;) // left roll\n      CLICKY(25, 35, 25, 35, c.y += 0.01;) // hind pitch\n      CLICKY(40, 50, 25, 35, c.z -= 0.01;) // right roll\n    } }\n  break;\n  // position\n  case 6: {\n    if (iFrame == 0) {\n      c = vec4(0.0, -0.32, 0.0, 1.0); }\n    if (!visible || !click || get(5).x < 0.0) {}\n    else {\n      vec4 dir;\n      vec4 amt = get(2);\n      if (false) {}\n      CLICKY(10, 20, 10, 20, dir = -amt.w * dx;) // left sway\n      CLICKY(25, 35, 10, 20, dir = -amt.w * dz;) // hind thrust\n      CLICKY(40, 50, 10, 20, dir = amt.w * dx;) // right sway\n      CLICKY(10, 20, 25, 35, dir = amt.w * dy;) // up heave\n      CLICKY(25, 35, 25, 35, dir = amt.w * dz;) // fore thrust\n      CLICKY(40, 50, 25, 35, dir = -amt.w * dy;) // down heave\n      dir *= rotate(dz, -amt.z);\n      dir *= rotate(dx, -amt.y);\n      dir *= rotate(dy, -amt.x);\n      c += 0.01 / get(4).x * dir;\n    } }\n  break;\n  // movement modes\n  case 5: {\n    if (iFrame == 0) {\n      c = vec4(-1.0, -1.0, 0.0, 0.0); }\n    if (!visible || !down) {}\n    CLICKY(70, 80, 10, 20, c.x = c.x > 0.0 ? -1.0 : 1.0;) // movement mode\n    CLICKY(70, 80, 25, 35, c.y = c.y > 0.0 ? -1.0 : 1.0;) // movement speed modifier\n  }\n  break;\n  // sensor controls\n  case 3: {\n    if (iFrame == 0) {\n      c = vec4(0.0, 3.0, 0.0, 0.0); }\n    if (!visible || !click) {}\n    CLICKY(10, 20, 40, 50, { c.x -= 1.0; if (c.x < 0.0) c.x = 0.0; }) // rolloff +\n    CLICKY(10, 20, 55, 65, c.x += 1.0;) // rolloff -\n    CLICKY(25, 35, 40, 50, c.y *= exp(-0.03);) // iso -\n    CLICKY(25, 35, 55, 65, c.y *= exp(0.03);) // iso +\n  }\n  // lens controls\n  break;\n  case 4: {\n    if (iFrame == 0) {\n      c = vec4(3.3, 6.0, 0.008, 0.0); }\n    if (!visible || !click) {}\n    CLICKY(40, 50, 40, 50, c.x *= exp(-0.01);) // zoom -\n    CLICKY(40, 50, 55, 65, c.x *= exp(0.01);) // zoom +\n    CLICKY(55, 65, 40, 50, c.y *= exp(-0.01 / c.x);) // focus -\n    CLICKY(55, 65, 55, 65, c.y *= exp(0.01 / c.x);) // focus +\n    CLICKY(70, 80, 40, 50, c.z *= exp(-0.01);) // aperture -\n    CLICKY(70, 80, 55, 65, c.z *= exp(0.01);) // aperture +\n  }\n  break;\n  }\n}","name":"Buffer B","description":"","type":"buffer"}]}