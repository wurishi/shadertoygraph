{"ver":"0.1","info":{"id":"XddcRr","date":"1517791538","viewed":1981,"name":"Spreading Frost","username":"dos","description":"Animated glass frost spreading over the screen. Inspired by https://www.shadertoy.com/view/MsySzy","likes":21,"published":3,"flags":0,"usePreview":0,"tags":["lens","animated","glass","ice","frosted","freeze","frost"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Spreading Frost by dos\n// Inspired by https://www.shadertoy.com/view/MsySzy by shadmar\n\n#define FROSTYNESS 0.5\n//#define RANDNERF 2.5\n\nfloat rand(vec2 uv) {\n    #ifdef RANDNERF\n    uv = floor(uv*pow(10.0, RANDNERF))/pow(10.0, RANDNERF);\n    #endif\n    \n    float a = dot(uv, vec2(92., 80.));\n    float b = dot(uv, vec2(41., 62.));\n    \n    float x = sin(a) + cos(b) * 51.;\n    return fract(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float progress = fract(iTime / 4.0);\n\n    vec4 frost = texture(iChannel1, uv);\n    float icespread = texture(iChannel2, uv).r;\n\n    vec2 rnd = vec2(rand(uv+frost.r*0.05), rand(uv+frost.b*0.05));\n            \n    float size = mix(progress, sqrt(progress), 0.5);   \n    size = size * 1.12 + 0.0000001; // just so 0.0 and 1.0 are fully (un)frozen and i'm lazy\n    \n    vec2 lens = vec2(size, pow(size, 4.0) / 2.0);\n    float dist = distance(uv.xy, vec2(0.5, 0.5)); // the center of the froziness\n    float vignette = pow(1.0-smoothstep(lens.x, lens.y, dist), 2.0);\n   \n    rnd *= frost.rg*vignette*FROSTYNESS;\n    \n    rnd *= 1.0 - floor(vignette); // optimization - brings rnd to 0.0 if it won't contribute to the image\n    \n    vec4 regular = texture(iChannel0, uv);\n    vec4 frozen = texture(iChannel0, uv + rnd);\n    frozen *= vec4(0.9, 0.9, 1.1, 1.0);\n        \n    fragColor = mix(frozen, regular, smoothstep(icespread, 1.0, pow(vignette, 2.0)));\n}","name":"Image","description":"","type":"image"}]}