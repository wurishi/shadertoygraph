{"ver":"0.1","info":{"id":"3lfGR7","date":"1555849080","viewed":1522,"name":"Inner outline test","username":"Dogrtt","description":"Inner outline shader for Match2 game cell.\nBased on shader created by @remonvv\nhttps://www.shadertoy.com/view/MdjfRK\n\nThanks to t.me/ru_cocos2dx@satan_black for help","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["fire","glow","outline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inner outline shader for Match2 game cell.\n// Based on shader created by @remonvv\n// https://www.shadertoy.com/view/MdjfRK\n//\n// Thanks to t.me/ru_cocos2dx@satan_black for help\n\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898,12.1414))) * 83758.5453);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = mix(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);   \n}\n\nvec3 ramp(float t) {\n\treturn t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;\n}\n\nfloat fire(vec2 n) {\n    return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n}\n\n/*\nvec3 getLine(vec2 fc, mat2 mtx, float shift){\n    float t = iTime;\n    vec2 uv = (fc / iResolution.xy) * mtx;\n    \n    uv.x += uv.y < .5 ? 23.0 + t * .35 : -11.0 + t * .3;    \n    uv.y = abs(uv.y - shift);\n    uv *= 10.0;\n        \n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 1.61, vec3(4.0))));\n    \n    float grad = pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n    color = ramp(grad);\n    color /= (1.50 + max(vec3(0), color));\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(getLine(fragCoord, mat2(1., 1., 0., 1.), 1.), 1.);\n    fragColor += vec4(getLine(fragCoord, mat2(1., 1., 1., 0.), 1.), 1.);\n    fragColor += vec4(getLine(fragCoord, mat2(1., 1., 0., 1.), 0.), 1.);\n    fragColor += vec4(getLine(fragCoord, mat2(1., 1., 1., 0.), 0.), 1.);\n    if(fragColor.r <= .05 && fragColor.g <= .05 && fragColor.b <= .05 ){\n    \tfragColor = texture(iChannel0, uv);\n    } else {\n        fragColor += texture(iChannel0, uv);\n    }\n}\n*/\n\nvec3 getLine(vec3 col, vec2 fc, mat2 mtx, float shift){\n    float t = iTime;\n    vec2 uv = (fc / iResolution.xy) * mtx;\n    \n    uv.x += uv.y < .5 ? 23.0 + t * .35 : -11.0 + t * .3;    \n    uv.y = abs(uv.y - shift);\n    uv *= 5.0;\n    \n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 1.61, vec3(4.0))));\n    \n    float grad = pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n    color = ramp(grad);\n    color /= (1.50 + max(vec3(0), color));\n    \n    if(color.b < .00000005)\n        color = vec3(.0);\n    \n    return mix(col, color, color.b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = vec3(0.);\n    color = getLine(color, fragCoord, mat2(1., 1., 0., 1.), 1.02);\n    color = getLine(color, fragCoord, mat2(1., 1., 1., 0.), 1.02);\n    color = getLine(color, fragCoord, mat2(1., 1., 0., 1.), -0.02);\n    color = getLine(color, fragCoord, mat2(1., 1., 1., 0.), -0.02);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}