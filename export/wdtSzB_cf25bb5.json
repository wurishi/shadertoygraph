{"ver":"0.1","info":{"id":"wdtSzB","date":"1572299031","viewed":249,"name":"Borderlands koch shader","username":"henrybergstrom","description":"Shader to project webcam in bended space.","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["webcam","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Use mouse left-right to change angle\n// Use mouse top-down to change number of folds\n#define ZOOM 0.3*sin(iTime * 0.1)\n#define REPEAT 1.0\n#define SHOW_LINE true\n#define CENTER_CIRCLE 0.5 \n\nvec2 N(in float angle) {\n\treturn vec2(sin(angle), cos(angle));\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5 * iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    // annoying rotation\n    uv *= Rot(3.1415*step(length(uv), CENTER_CIRCLE)); \n    uv *= 2.0;\n    \n    vec3 col = vec3(0);\n    \n    uv.x = abs(uv.x); // reflect\n    uv.y += 0.5 * tan((5./6.) * 3.1415); // centralize\n    \n    vec2 n = N(((mouse.x*6.)/6.) * 3.1415);\n    float d = dot(uv-vec2(0.5, 0.0), n);\n  \n    // bend space\n    uv -= n * max(0.0, d)*2.0;\n    \n    uv.x += 0.5;\n    float scale = 1.0;\n    n = N(((2.)/3.0) * 3.1415);\n    \n    for (int i = 0; i < int(mouse.y*10.); i++) {\n        uv *= 3.0;\n        scale *= 3.0;\n        uv.x -= 1.5;\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n        uv -= n * min(0.0, dot(uv, n)) * 2.0;\n    }\n\t\n    \n    d = length(uv - vec2(clamp(uv.x, -1.0, 1.0), 0.0));\n    if (SHOW_LINE)\n    \tcol += smoothstep(1./iResolution.y, 0.0, d/scale); // line\n    uv /= scale;\n\t\n    vec2 st = uv * REPEAT + ZOOM;\n \tcol += texture(iChannel0, st).rgb;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}