{"ver":"0.1","info":{"id":"Dl33R2","date":"1682676966","viewed":261,"name":"Ball Roller","username":"dr2","description":"Balls rolling...","likes":24,"published":3,"flags":0,"usePreview":0,"tags":["mechanics","ball","track"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Ball Roller\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\n\nconst int nBall = 5;\nvec3 bPos[nBall], qHit, ltDir;\nvec2 aTurnCs;\nfloat dstFar, tCur, tRad, bRad;\nint idObj;\nconst int idTrk = 1, idSup = 2, idBas = 3, idBall = 4;\nconst float pi = 3.1415927;\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#if 1\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, dc, r, rm, rs, a, hMax, ts, tw;\n  dMin = dstFar;\n  hMax = 3.;\n  tw = 0.02;\n  ts = bRad + tw + 0.01;\n  p.y -= tRad - hMax + 2.;\n  q = p;\n  r = length (q.xz);\n  a = (r > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (float (2 * nBall) * a) + 0.5) / float (2 * nBall));\n  rm = length (q.xy) - tRad;\n  rs = 0.2 * tRad - r;\n  d = abs (length (vec2 (rm, q.z)) - ts) - tw;\n  d = max (max (max (d, - rm), rs), tRad - hMax + q.y);\n  DMINQ (idTrk);\n  d = max (max (max (length (vec2 (abs (q.x + 0.65 * tRad) - 0.25 * tRad, q.z)) - 0.15,\n     0.3 - rm), - q.y - tRad - 0.4), q.y);\n  DMINQ (idSup);\n  q = p;\n  q.xz = Rot2Cs (q.xz, aTurnCs);\n  rm = length (q.xy) - tRad;\n  dc = length (vec2 (rm, q.z)) - ts;\n  d = max (max (max (abs (dc) - tw, - rm), 0.025 - rs), q.y);\n  DMINQ (idTrk);\n  q.y -= - tRad - 0.25;\n  d = max (max (r - 0.15 * tRad, abs (q.y) - 0.18), - dc);\n  DMINQ (idSup);\n  q.y -= - 0.15;\n  d = PrCylDf (q.xzy, tRad + 0.5, 0.05);\n  DMINQ (idBas);\n  for (int n = 0; n < nBall; n ++) {\n    q = p - bPos[n];\n    d = PrSphDf (q, bRad);\n    DMINQ (idBall + n);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nfloat BAng (float s)\n{\n  return 0.36 * pi * sin (0.5 * tCur + 2. * s);\n}\n\nvec4 BCol ()\n{\n  vec3 q, col;\n  float s;\n  col = vec3 (0.7, 0.6, 0.1);\n  s = pi * float (idObj - idBall) / float (nBall);\n  q = qHit;\n  q.xz = Rot2D (qHit.xz, s + 0.5 * pi);\n  q.xy = Rot2D (q.xy, BAng (s) * tRad / bRad);\n  if (abs (q.z) < 0.03) col = vec3 (1., 1., 0.3);\n  else col = (q.z * (mod (pi + atan (q.x, q.y), 2. * pi) - pi) > 0.) ? vec3 (0., 1., 1.) :\n     vec3 (1., 0., 1.);\n  return vec4 (col, 0.2);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, sh, nDotL, a, aMin, s, sMin;\n  tRad = 5.;\n  bRad = 0.25;\n  aMin = 99.;\n  for (int n = 0; n < nBall; n ++) {\n    s = pi * float (n) / float (nBall);\n    a = BAng (s);\n    if (abs (a) < aMin) {\n      aMin = abs (a);\n      sMin = s;\n    }\n    bPos[n] = vec3 (0., - tRad * sin (a + vec2 (0.5 * pi, 0.)));\n    bPos[n].xz = Rot2D (bPos[n].xz, - s);\n  }\n  aTurnCs = sin (sMin + 0.5 * pi + vec2 (0.5 * pi, 0.));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj == idTrk) {\n      col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.9 + 0.1 * cos (128. * atan (qHit.x, qHit.y)));\n    } else if (idObj == idSup) {\n      col4 = vec4 (0.7, 0.5, 0.2, 0.1) * (0.9 + 0.1 * sin (2. * pi * fract (8. * qHit.y)));\n    } else if (idObj == idBas) {\n      col4 = vec4 (0.5, 0.6, 0.5, 0.1) * (0.97 + 0.03 * sin (32. * float (nBall) *\n         atan (qHit.z, qHit.x)));\n    } else if (idObj >= idBall) {\n      col4 = BCol ();\n      nDotL *= nDotL;\n    }\n    sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n  } else {\n    col = vec3 (0.1);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  zmFac = 4.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n    zmFac += 2. * abs (az);\n  } else {\n    az -= 0.03 * pi * tCur;\n    el -= 0.1 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, 0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -24.);\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (-0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n","name":"Image","description":"","type":"image"}]}