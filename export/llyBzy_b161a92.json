{"ver":"0.1","info":{"id":"llyBzy","date":"1542929869","viewed":640,"name":"Kaleidoscope 42","username":"surjikal","description":"Kaleidoscope using textures","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hacked together using code from:\n// https://graphicdesign.stackexchange.com/questions/88165/program-for-image-kaleidoscope-mirror-effect-similar-to-adobe-capture-pattern-tr\n\nprecision mediump float;\n\nconst float PI = 3.14159265359;\nconst int numberOfAxis = 6;\n\n\n\nint intModulo(float a,float b) {\n    float m = mod(a, b);\n    return int(m+0.5);\n}\n\nvec4 colorCycle(vec4 inputColor, float offset) {\n\n\tfloat U = 1.0 + cos(offset * 0.9) * 3.0;\n\tfloat W = 1.0 + sin(offset * 0.9) * 3.0;\n    vec4 outputColor;\n\n\toutputColor.r = (.299+.701*U+.168*W)*inputColor.r\n\t+ (.587-.587*U+.330*W)*inputColor.g\n\t+ (.114-.114*U-.497*W)*inputColor.b;\n\toutputColor.g = (.299-.299*U-.328*W)*inputColor.r\n\t+ (.587+.413*U+.035*W)*inputColor.g\n\t+ (.114-.114*U+.292*W)*inputColor.b;\n\toutputColor.b = (.299-.3*U+1.25*W)*inputColor.r\n\t+ (.587-.588*U-1.05*W)*inputColor.g\n\t+ (.114+.886*U-.203*W)*inputColor.b;\n    outputColor.a = inputColor.a;\n\t\n\treturn outputColor;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float angleFrac = (2.0 * PI) / float(2 * numberOfAxis);\n\n    vec2 c = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // convert to polar coordinates \n    float phi = abs(atan(c.y, c.x)); \n    float r = length(c);\n\n    int count = int(phi / angleFrac);\n\n    phi = mod(phi, angleFrac);\n    if ( intModulo(float(count),2.0) == 1) {\n      phi = angleFrac - phi;\n    }\n\n    float x = r * cos(phi);\n    float y = r * sin(phi);\n\n    float frame = iTime * 0.05;\n    float zoom = 1.0 + sin(iTime * 0.3) / 3.0;\n\t\n    vec2 cc = (vec2(x,y) * zoom) + frame; //map to range [0.0, 1.0]\n    vec4 color = texture(iChannel0, cc);\n    fragColor = colorCycle(color, iTime);\n}","name":"Image","description":"","type":"image"}]}