{"ver":"0.1","info":{"id":"DtKyRD","date":"1699997534","viewed":99,"name":"70s Stripes","username":"wb4","description":"a repeating pattern of curved stripes in a 70s color scheme, gently scrolling and turning","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","animated","70s"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mapRange(float v, float a0, float b0, float a1, float b1) {\n    float t = (v - a0) / (b0 - a0);\n    return mix(a1, b1, t);\n}\n\nvec2 rotateDeg(vec2 v, float angleDeg) {\n    float angleRad = radians(angleDeg);\n    float cosAngle = cos(angleRad);\n    float sinAngle = sin(angleRad);\n    \n    return vec2(\n        v.x * cosAngle - v.y * sinAngle,\n        v.x * sinAngle + v.y * cosAngle\n    );\n}\n\nvec2 oscillatingRotationDeg(vec2 pos, float minAngle, float maxAngle, float period) {\n    float phase = mapRange(iTime, 0., period, 0., radians(360.));\n    float angleDeg = mapRange(sin(phase), -1., 1., minAngle, maxAngle);\n    return rotateDeg(pos, angleDeg);\n}\n\nconst int STRIPE_COUNT = 6;\nconst float STRIPE_WIDTH = 0.15;\nconst float STRIPE_BLUR = 0.07;\nconst float STRIPE_SPEED = 0.3;\n\nconst float MIN_ANGLE_DEG = -5.;\nconst float MAX_ANGLE_DEG = 95.;\n\nconst float OSCILLATION_PERIOD = 40.;\n\nconst vec3 STRIPE_COLORS[STRIPE_COUNT] = vec3[STRIPE_COUNT](\n    vec3(.24, .12, .02),  // brown\n    vec3(.73, .28, .02),  // mid orange\n    vec3(0.898, 0.204, 0.0439),  // bright orange\n    vec3(0.949, 0.541, 0.059),  // yellow\n    vec3(.15, 0.3, 0.),  // green\n    vec3(0.047, 0.337, 0.475)  // blue\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 pos = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    pos = oscillatingRotationDeg(pos, MIN_ANGLE_DEG, MAX_ANGLE_DEG, OSCILLATION_PERIOD);\n    \n    // flare out a bit towards the top and bottom with a parabola\n    pos.x = pos.x * (1. - pow(abs(pos.y) / 3., 2.));\n    \n    // scroll sideways\n    pos.x += iTime * STRIPE_SPEED;\n\n    // Repeat the pattern forever.\n    // Normalize stripeX so that each stripe is 1 unit wide.\n    float stripeX = mod(pos.x, float(STRIPE_COUNT) * STRIPE_WIDTH) / STRIPE_WIDTH;\n    \n    vec3 color;\n    \n    int rightColorIndex = int(floor(stripeX + .5)) % STRIPE_COUNT;\n    int leftColorIndex = (rightColorIndex + STRIPE_COUNT - 1) % STRIPE_COUNT;\n    \n    float t = fract(stripeX + .5);\n    \n    float mask = smoothstep(.5 - STRIPE_BLUR, .5 + STRIPE_BLUR, t);\n    \n    vec3 leftColor = mix(STRIPE_COLORS[leftColorIndex], STRIPE_COLORS[leftColorIndex] * .5, mask);\n    vec3 rightColor = mix(STRIPE_COLORS[rightColorIndex] * .5, STRIPE_COLORS[rightColorIndex], mask);\n    \n    color = mix(leftColor, rightColor, mask);\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}