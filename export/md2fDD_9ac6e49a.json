{"ver":"0.1","info":{"id":"md2fDD","date":"1689753691","viewed":31,"name":"Moon test taroto","username":"Ceffa93","description":"moon","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getSunDirection(float time)\n{\n    return normalize(vec3(sin(iTime),0., cos(iTime)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    \n    vec2 P = uv*2.-1.; // Point coordinates in 2D, as if moon was a circle. -1 to 1\n    \n    if (dot(P, P) > 1.) discard; // discard points outside moon circle\n    \n    float k = 1. - dot(P, P); // Distance between the 2D point (on flat moon) and the 3D point (as if moon was a sphere)\n    \n    vec3 point3D = vec3(P, k); // 3D coordinate of the point on the moon surface\n    \n    vec3 normal = normalize(point3D); // Normal at the surface\n    \n    vec3 sun = getSunDirection(iTime);\n    \n    // Dick around with this. \n    // You can for example scale the result for sharper/softwe effect.\n    float shadowStrenght = 2.;\n    float shadow = shadowStrenght * dot(normal, sun);    \n\n    fragColor = vec4(shadow, shadow, shadow,1.0);\n}","name":"Image","description":"","type":"image"}]}