{"ver":"0.1","info":{"id":"WlGBzW","date":"1613925288","viewed":390,"name":"space web","username":"YitingLiu","description":"exploring the space as a web.","likes":9,"published":3,"flags":64,"usePreview":0,"tags":["spider","universe","web","ethereal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MtfXz7","filepath":"https://soundcloud.com/yitingliu/afar","previewfilepath":"https://soundcloud.com/yitingliu/afar","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//tutorial https://www.youtube.com/watch?v=KGJUl8Teipk\n//tutorial https://www.youtube.com/watch?v=3CycKKJiwis\n\n#define S(a,b,t) smoothstep(a,b,t)\n\nfloat DistLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*t);\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(233.34,4564.2));\n    p+=dot(p,p+23.45);\n    return fract(p.x*p.y);\n\n}\n\n//make it more efficient \nvec2 N22 (vec2 p){\n    float n = N21(p);\n    return vec2(n,N21(n+p));\n\n}\n\nvec2 GetPos(vec2 id, vec2 offs){\n   \n   vec2 n = N22(id+offs)*iTime;\n\n   return offs+sin(n);//*.4;\n}\nfloat Line(vec2 p, vec2 a, vec2 b){\n\n    float d = DistLine(p,a,b);\n    float m = S(.02,.01,d);\n    float d2 = length(a-b);\n    m*=S(1.2,.8,d2)+S(.05,.03,abs(d2-.75));// the second smoothstep add flash effect \n    return m;\n}\n\nfloat Layer(vec2 uv, float fft){\n   float m =0.;\n   float t = iTime*10.;\n\n   vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n   // vec2 p = GetPos(id);// can make firefly\n   \n   vec2 p[9];//determining array sizes \n   \n   int i =0; \n   \n   for(float y = -1.; y <=1.; y++){\n       for(float x = -1.; x <=1.; x++){\n       vec2 offs= vec2(x,y);\n       p[i++]=GetPos(id,offs);\n       \n       }\n   \n   }\n   \n   for (int i = 0; i <9; i++){\n       m+=Line(gv, p[4],p[i]);\n       vec2 j = (p[i]-gv)*20.;\n       float sparkle = 1./dot(j,j)*fft*10.;\n       m+=sparkle*(sin(t+fract(p[i].x*10.))*.5+.5);// add fract to avoid obvioux grid \n   }\n   \n   m+=Line(gv, p[1],p[3]);\n   m+=Line(gv, p[1],p[5]);\n   m+=Line(gv, p[7],p[3]);\n   m+=Line(gv, p[7],p[5]);\n   \n   \n//       if(gv.x>.48||gv.y>.48) col = vec3(1,0,0);\n\n   return m;\n   \n}\n\nmat2 Rot(float a){\n    float c =cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n        float gradient = uv.y;\n\n    vec3 col = vec3(0);\n    vec2 mouse = (iMouse.xy/iResolution.xy)-.5;\n \n\n    float fft  = texelFetch( iChannel0, ivec2(0.,0), 0 ).x; \n\n    float t = iTime*0.05;\n\n    float m = 0.;\n    \n    uv*=Rot(t) ;\n    mouse *=Rot(t);\n    \n     for (float i =0.; i <1.; i+=1./4.){\n         float z = fract(i+t);\n         float size = mix(10.,.52,z);\n         float fade = S(0.,.5,z)*S(1.,.8,z);\n         m+=Layer(uv*size+i*20.-mouse,fft*2.)*fade;\n\n     }\n     \n   vec3 base = sin(t*vec3(.556,.456,.548))*.4+.6;\n     \n   col=m*base;\n\n   \n   gradient-=fft;\n   \n   col-=base*gradient;\n\n   \n    fragColor = vec4(col*(fft+1.),1.);\n}","name":"Image","description":"","type":"image"}]}