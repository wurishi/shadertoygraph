{"ver":"0.1","info":{"id":"NlyfRK","date":"1664795391","viewed":134,"name":"wooden composition","username":"omeometo","description":"experiment with distance median","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["something"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(in uint i){\n    i += 33u;\n    i ^= (i<<1);\n    i *= 394834343u;\n    i ^= (i>>7);\n    i *= 324423431u;\n    i ^= (i<<5);\n    return float(i) / pow(2.0, 32.0);\n}\n\nvec3 rotX(in vec3 p, in float t){vec3 q=p; q.yz *= mat2(cos(t),-sin(t),sin(t),cos(t)); return q;}\nvec3 rotY(in vec3 p, in float t){vec3 q=p; q.xz *= mat2(cos(t),-sin(t),sin(t),cos(t)); return q;}\n\nvec3 hash3(in uint i){return vec3(hash(3u*i),hash(3u*i+1u),hash(3u*i+2u));}\n\nvoid upd(inout vec4 best, float val) {\n    if (val < best.x) {best = vec4(val, best.xyz);}\n    else if (val < best.y) {best = vec4(best.x, val, best.yz);}\n    else if (val < best.z) {best = vec4(best.xy, val, best.z);}\n    else if (val < best.w) {best = vec4(best.xyz, val);}\n}\n\nfloat cub(in vec3 pos){\n    vec3 q = abs(pos)-3.0;\n    return length(max(q,0.0))+min(0.0,max(q.x,max(q.y,q.z)))-0.05;\n}\n\nfloat dist(in vec3 pos, in float t){\n    pos = asin(sin(pos/4.5))*4.5;\n    vec4 best = vec4(100);\n    for(uint ii=0u;ii<7u;++ii){\n        uint i = ii % 6u;\n        vec3 c = 2.0*asin(sin(hash3(i)*t+hash3(i+1000u)*6.3));\n        float d = cub(rotY(pos-c, hash(i+2000u)*6.3));\n        upd(best, d);\n    }\n    return max(best.w, abs(best.z+0.04)-0.04);\n}\n\nvec3 getNormal(in vec3 pos, in float t){\n    vec2 e=vec2(1e-3,-1e-3);\n    return normalize(\n        e.xxx * dist(pos+e.xxx, t)\n      + e.xyy * dist(pos+e.xyy, t)\n      + e.yxy * dist(pos+e.yxy, t)\n      + e.yyx * dist(pos+e.yyx, t));\n}\n\nvoid getColor(out vec4 fragColor, in vec3 cen, in vec3 rd, in float t) {\n    fragColor = vec4(0,0,0,1);\n    float total_d = 0.0;\n    for(int i=0;i<64;i++){\n        vec3 pos = cen + rd * total_d;\n        float d = dist(pos, t);\n        if(d<1e-3){\n            vec3 nor = getNormal(pos, t);\n            vec3 col = (vec3(1.8,1.1,0.5)*dot(nor, -rd) + vec3(2,2,1)*max(pow(reflect(rd,nor).y,5.0),0.0)) * pow(0.9,total_d);\n            fragColor = vec4(col, 1);\n            break;\n        }\n        total_d += d;\n    }\n    fragColor = pow(fragColor, vec4(0.45));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float t = iTime*0.6;\n\n    vec3 cen = vec3(6,8,15);\n    vec3 fwd = -normalize(cen);\n    vec3 up = vec3(0,1,0);up=normalize(up-dot(fwd,up)*fwd);\n    vec3 right = cross(fwd,up);\n    vec3 rd = normalize((uv.x*right+uv.y*up)*0.2+fwd);\n    \n    getColor(fragColor, cen, rd, t);\n}","name":"Image","description":"","type":"image"}]}