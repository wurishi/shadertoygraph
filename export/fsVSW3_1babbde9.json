{"ver":"0.1","info":{"id":"fsVSW3","date":"1635407423","viewed":201,"name":"Glimerring mandala 01","username":"mulf","description":"My first shader ever, actually! (Code could be simplified for sure, especially color pattern)\nNote it's actually resolution-dependant. Also, it evolves over time - getting more and more dense.\n\nhttps://instagram.com/made.up.lifeforms","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","evolving"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0,\n        0.0, 1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nfloat circle( float r ) {\n    return smoothstep(0., 1., 1. - r);\n}\n\nfloat pattern( vec2 xy, float radius ) {\n    float tcycle = iTime * 0.5;\n    \n    float r = smoothstep(0., 1., 1. - radius);\n    return 5. * r * (iTime + 600.);\n}\n\n\nfloat fc( vec3 p ) {\n    return p[0] + sin(p[1]) + (p[2]);\n}\nfloat colorPattern( vec2 uv ) {\n    float tcycle = iTime * 2.0;\n\n    vec3 p = vec3( 10.0 * uv.yx, 5.*sin(tcycle)) * 0.01;\n\n    float n0 = fc( p + vec3(20., 0., sin(tcycle)) );\n    float n1 = fc( p * n0 * 20. + vec3(0., 0., cos(tcycle)) );\n\n    return n1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 whmax = vec2(max(iResolution.x, iResolution.y));\n    vec2 uv = fragCoord.xy/whmax;\n    uv -= ( iResolution.xy - whmax ) / whmax / 2.; // align center\n    \n    // Polar coordinates\n    vec2 toCenter = vec2(0.5) - uv;\n    // float angle = atan( toCenter.y, toCenter.x );   // -PI/2 .. PI/2\n    float radius = length( toCenter ) * 2.0;\n    \n    float n = pattern(uv, radius);\n    float nc = colorPattern(uv);\n    \n    vec3 color = hsb2rgb( vec3( \n        nc * radius*0.01 + 0.1, \n        0.8 * (1.-radius), \n        smoothstep( 0., 1., sin(n)) * circle(radius) + 0.2 ) \n    );\n\n    // Output to screen\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}