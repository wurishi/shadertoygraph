{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Ugly code ahead. Yolo.\n\nconst float Pi = 3.14159;\nconst float Pi2 = Pi * 2.0;\nconst float hPi = Pi * 0.5;\nvec3 ct[9]; \n\nvec3 lookup(const float pos)\n{\n    float p = fract(pos) * 7.999;\n    int i = int(p);\n    float f = fract(p);\n    vec3 res = vec3(0.0);\n    vec3 a = vec3(0.0);\n    vec3 b = vec3(0.0);\n    \n    // This used to be 8 * \"if\". There if no else.\n    \n    if (i < 4)\n    {\n        if (i < 2)\n        {\n            if (i == 0)\n            {\n                a = ct[0]; b = ct[1];    \n            }\n            else\n            {\n                a = ct[1]; b = ct[2];\n            }            \n        }\n        else\n        {\n            if (i == 2)\n            {\n                a = ct[2]; b = ct[3];    \n            }\n            else\n            {\n                a = ct[3]; b = ct[4];\n            }            \n        }    \n    }\n    else\n    {\n\t    if (i < 6)\n        {\n            if (i == 4)\n            {\n                a = ct[4]; b = ct[5];    \n            }\n            else\n            {\n                a = ct[5]; b = ct[6];\n            }            \n        }\n        else\n        {\n            if (i == 6)\n            {\n                a = ct[6]; b = ct[7];    \n            }\n            else\n            {\n                a = ct[7]; b = ct[8];\n            }            \n        }    \n    }\n    \n\treturn mix(a, b, f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// Alternative colors.\n/*\n\tct[0] = vec3(0.5, 0.0, 0.3);\n\tct[1] = vec3(1.0, 0.4, 0.0);\n\tct[2] = vec3(1.0, 0.0, 0.3);\n\tct[3] = vec3(1.0, 0.6, 0.0);\n\tct[4] = vec3(1.0, 0.0, 0.6);\n\tct[5] = vec3(1.0, 0.8, 0.0);\n\tct[6] = vec3(1.0, 0.4, 0.0);\n\tct[7] = vec3(1.0, 0.6, 0.0);\n\tct[8] = vec3(0.5, 0.0, 0.3);\n*/  \n    \n\tct[0] = vec3(0.5, 0.0, 0.3);\n\tct[1] = vec3(0.3, 0.1, 0.0);\n\tct[2] = vec3(1.0, 0.3, 0.0);\n\tct[3] = vec3(1.0, 0.6, 0.0);\n\tct[4] = vec3(1.0, 0.9, 0.0);\n\tct[5] = vec3(1.0, 0.6, 0.0);\n\tct[6] = vec3(1.0, 0.3, 0.0);\n\tct[7] = vec3(0.3, 0.1, 0.0);\n\tct[8] = vec3(0.5, 0.0, 0.3);\n     \n    float zoomTime = iTime * 0.073;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 uvCos = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x = uv.x * aspect;\n    \n    uvCos.x = -cos(uvCos.x * Pi2) * 0.5 + 0.5;\n    uvCos.y = -cos(uvCos.y * Pi2) * 0.5 + 0.5;\n    \n    float zp = -sin(hPi + zoomTime) * 0.5 + 0.5;\n    float s = 0.5 + 8.0 * zp * ((0.8 + uvCos.x * 0.9) + (0.9 + (1.0 - -cos(uvCos.y + iTime)) * 1.3) + (0.9 + (1.0 - -cos(uvCos.x + iTime)) * 1.3) );\n    uv.xy *= s;\n    uv.x -= s;\n    uv.y -= s * 0.5;\n      \n    \n    float x = 0.5 + 0.5 * -cos(uv.x * Pi2 + iTime * 2.0)  * (uvCos.y + 1.0);\n    x += 0.25 + 0.25 * -cos((uv.x + iTime * 0.2) * Pi2 * 2.5);\n    float y = 0.5 + 0.5 * -cos(uv.y * Pi2);\n    float blah = (0.5 + 0.5 * -cos(iTime * 0.134)) * (uv.x + iTime * 0.1);\n    y += 0.25 + 1.0 * -cos(blah + uv.y * Pi2 * 0.1);\n    \n\tfragColor = vec4(lookup(x * y * (1.1 - pow(zp, 0.125)) * 4.1 + iTime * 0.001), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBSzt","date":"1414849705","viewed":573,"name":"The wall, it breathes","username":"ErnstHot","description":"Inspired by Amiga demos like Keftales by Kefrens and Total Triple Trouble by Rebels.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","psychedelic","trippy","keftales"],"hasliked":0,"parentid":"","parentname":""}}