{"ver":"0.1","info":{"id":"MfKGzt","date":"1718854983","viewed":35,"name":"He's in trouble again","username":"Squidz","description":"playing around with my muse again, still having an alpha mixing problem","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["vandamme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float easeIn(float val){\n    return val * val;\n}\nfloat easeOut(float val){\n    return 1.0 - easeIn(1.0 - val);\n}\nfloat easeInOut(float val){\n    return flerp(easeIn(val), easeIn(val), val);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float interpolator = 1.0 - clamp(mod(iTime, _interval) / _fadeSpeed, 0.0, 1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n    float newScale = flerp(1.0,0.8, easeOut(clamp((1.0 - interpolator) * 5.0, 0.0, 1.0)));\n    uv2 = ((uv2 - 0.5) * newScale) + 0.5;\n    \n    vec4 currentFrame = texture(iChannel1, uv);\n    vec4 frozenFrame = texture(iChannel0, uv2);\n    \n    //zoom flash\n    vec4 col = mix(currentFrame, frozenFrame, interpolator);\n    //white flash\n    //col = mix(col, vec4(1.0,1.0,1.0,1.0), interpolator * 0.5);\n    \n    //add bg\n    fragColor = mix(texture(iChannel2, uv), col, col.a);\n    \n    //if(uv2.x < 0.5){\n     //fragColor = vec4(0.0,0.0,0.0,1.0);\n    //};\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec4 green = vec4(0.05,0.67,0.15, 1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 bgColor = vec4(0.0,0.0,0.0,0.0);\n    \n    vec4 col0 = texture(iChannel0, uv);\n    //just grab the colour from red or blue, depending on the larger, and compare it to the green channel.\n    float identityValue = max(col0.r, col0.b);\n    //in this way the mix function can just use the result to interpolate, thats the easy part.\n    float interpolator = clamp((col0.g - identityValue) * 3.0, 0.0, 1.0);\n    //the tricky bit is next, removing the green that was missed\n    //some of the original color data was stored in the red and blue channels, so we need to de-green only\n    //we don't want to overwrite the green channel if the new value is higher\n    col0.g = min(col0.g, identityValue * 0.8);    \n    //now we just mix the colour and we're done\n    fragColor = mix(col0, bgColor, interpolator);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float _interval = 2.0;\nconst float _fadeSpeed = _interval/2.0;\n\nvec4 chromaticAbberation(sampler2D _channel, vec2 _uv, float _strength){\n    \n    vec2 uvl = vec2(_uv.x - _strength, _uv.y);\n    vec2 uvr = vec2(_uv.x + _strength, _uv.y);\n\n    //varying x color\n    vec4 col0 = texture(_channel, _uv);\n    vec4 col1 = texture(_channel, uvl);\n    vec4 col2 = texture(_channel, uvr);\n    \n    //subcomps\n    float r = col1.r;\n    float g = col2.g;\n    float b = (col1.b + col2.b)/2.0;\n    float a = 1.0;\n    \n    //return(v4lerp(vec4(r,g,b,a), col0, 0.5));\n    return(vec4(r,g,b,a));\n}\n\nfloat flerp(float val0, float val1, float interpolator){\n    return ((1.0 - interpolator) * val0) + (interpolator * val1);\n}\n\nvec4 v4lerp(vec4 val0, vec4 val1, float interpolator){\n    float x = ((1.0 - interpolator) * val0.x) + (interpolator * val1.x);\n    float y = ((1.0 - interpolator) * val0.y) + (interpolator * val1.y);\n    float z = ((1.0 - interpolator) * val0.z) + (interpolator * val1.z);\n    float a = ((1.0 - interpolator) * val0.a) + (interpolator * val1.a);\n    return vec4(x,y,z,a);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(mod(iTime, _interval) < 0.05){\n     fragColor = chromaticAbberation(iChannel1, uv, 0.0025);\n    } else {\n     fragColor = texture(iChannel0, uv);\n    };\n}","name":"Buffer B","description":"","type":"buffer"}]}