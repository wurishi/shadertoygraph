{"ver":"0.1","info":{"id":"ss2BRh","date":"1645712680","viewed":293,"name":"correct interpolation of random ","username":"FabriceNeyret2","description":"when interpolating stochastic fields (texture, rand...) at least renormalize stats (right) or you'll got loose and fluctuating contrast (left).\nYou may even renormalize histograms as in https://hal.inria.fr/hal-01824773 (cf slides), but more complicated.","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["random","interpolation","short","stochastic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// At least renormalize statistics when mixing stochastic fields ( textures, noises, etc )\n// If you also want to have the law distribution back, you have to recover the histogram: see https://hal.inria.fr/hal-01824773 \n// Uniform case treated here: https://www.shadertoy.com/view/sdSfRw\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec3 R = iResolution;\n    O = U.y > R.y/2. \n          ? texelFetch(iChannel0, ivec2(U/3.)%256, 0 ) // top: white noise\n          : texelFetch(iChannel1, ivec2(U/3.)%256, 0 );// bottom: blue noise\n    float v,t = mod(iTime,2.); t = min(t,2.-t); // saw interpolant\n\n    if (    int(U)/2 == int(R)/4              // red separators\n         || int(U.y)/2 == int(R.y)/4 )\n      { O = vec4(1,0,0,1); return; }\n      \n    if ( U.x < R.x/2. )                       // --- left: naive interpolation\n        v =  mix( O.x , O.y, t);\n\n    else {                                    // --- right: interpolation with moments renormalization\n        O = (O-.5) / .289 ;                   // move to 0-mean, 1-variance\n        // go-to 1-variance is only required when mixing 2 different statistics\n        v = mix( O.x , O.y, t);\n        v /=  sqrt(2.*t*t-2.*t+1.);           // renormalize from variance =  (1-t)² + t²\n        v = .5 + .289 * v;                    // back to target (here, initial) statistics\n    }\n    O = vec4( pow(v, 1./2.2) );               // to sRGB\n}","name":"Image","description":"","type":"image"}]}