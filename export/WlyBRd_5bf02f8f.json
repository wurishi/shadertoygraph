{"ver":"0.1","info":{"id":"WlyBRd","date":"1614922972","viewed":120,"name":"Trig-less Hash","username":"Rugged","description":"Hash function with no trig function. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","hash","sinless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//summary: hash3 is barely slower but gives noise with all values\n//         from 0. to 1. (hash3 = better)\n\n\n\n//this hash doesn't have every value 0. to 1. but still works if you need noise\n//next hash has all numbers 0. to 1.\nfloat hash(vec2 xy){\n    xy = mod(xy, 0.19) + 0.5;\n    float h = dot(xy.yyx, xy.yxy + vec3(.013, 27.15, 2027.3));\n    h *= h;\n    \n    return fract(h);\n}\n\n\n//this hash gives good noise and has all numbers 0. to 1., \n//it is very slightly slower\nfloat hash3(vec2 xy){\n    xy = mod(xy, .19);\n    float h = dot(xy.yyx, vec3(.013, 27.15, 2027.3));\n    h *= h;\n    h *= fract(h);\n    \n    return fract(h);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(vec3(hash3(uv + iTime)),1.0);\n}","name":"Image","description":"","type":"image"}]}