{"ver":"0.1","info":{"id":"wl2yRR","date":"1607523708","viewed":50,"name":"irresponsible-raycast","username":"ichi_raven","description":"maybe this isn't true shading","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["maybesomethinggowrong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.yy;\n\n    vec3 start = vec3(0.9f, 0.5f, 0);\n    \n    vec3 ray = normalize(vec3(uv.xy, 5) - start);\n    \n    vec3 point = vec3(0.5, 0.5, 200);    \n    \n    float dist = 10.f;\n    \n    float t = ray.x * (point.x - start.x) + ray.y * (point.y - start.y) + ray.z * (point.z - start.z);\n    t /= ray.x * ray.x + ray.y * ray.y + ray.z * ray.z;\n    \n    vec3 hitPoint = start + ray * t;\n    \n    if(distance(hitPoint, point) > dist)\n    {\n        fragColor = vec4(0.f);\n        return;\n    }\n    \n    vec3 l = normalize(vec3(0, 1, 0));\n    l.x = l.x * cos(iTime) - l.y * sin(iTime);\n    l.y = l.x * sin(iTime) + l.y * cos(iTime);\n    vec3 n = normalize(point - hitPoint);\n    \n    vec4 baseColor = vec4(1.f, 0.f, 0.f, 1.f);\n    \n    vec4 ambient = vec4(0.5, 0.5, 0.5, 1.0);\n   \n    vec4 color = vec4(0.f);\n    \n    color = baseColor * ambient;\n    \n    color += baseColor * min(max(dot(l, n), 0.f), 1.f);\n\n    fragColor = color;\n    \n}","name":"Image","description":"","type":"image"}]}