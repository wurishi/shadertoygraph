{"ver":"0.1","info":{"id":"3tdyDj","date":"1609926791","viewed":122,"name":"blender noise texture","username":"gemps","description":"https://github.com/blender/blender/blob/master/intern/cycles/kernel/shaders/node_noise.h\nhttps://github.com/blender/blender/blob/master/intern/cycles/kernel/shaders/node_noise_texture.osl\nhttps://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat safe_snoise(vec3 p)\n{\n  float f = snoise(p);\n  if (isinf(f))\n    return 0.0;\n  return f;\n}\n\n// https://github.com/blender/blender/blob/master/intern/cycles/kernel/shaders/node_noise.h\n\nfloat fractal_noise(vec3 p, float details, float roughness)\n{\n  float fscale = 1.0;\n  float amp = 1.0;\n  float maxamp = 0.0;\n  float sum = 0.0;\n  float octaves = clamp(details, 0.0, 16.0);\n  int n = int(octaves);\n  for (int i = 0; i <= n; i++) {\n    float t = safe_snoise(fscale * p);\n    sum += t * amp;\n    maxamp += amp;\n    amp *= clamp(roughness, 0.0, 1.0);\n    fscale *= 2.0;\n  }\n  float rmd = octaves - floor(octaves);\n  if (rmd != 0.0) {\n    float t = safe_snoise(fscale * p);\n    float sum2 = sum + t * amp;\n    sum /= maxamp;\n    sum2 /= maxamp + amp;\n    return (1.0 - rmd) * sum + rmd * sum2;\n  }\n  else {\n    return sum / maxamp;\n  }\n}\n\n// https://github.com/blender/blender/blob/master/intern/cycles/kernel/shaders/node_noise_texture.osl\nvec3 random_vec3_offset(float seed)\n{\n  return vec3(100.0 + snoise(vec3(seed)) * 100.0,\n                 100.0 + snoise(vec3(seed)) * 100.0,\n                 100.0 + snoise(vec3(seed)) * 100.0);\n}\n\nvec3 noiseTexture(vec3 pos, float detail, float roughness){\n    vec3 p = pos;\n    float value = fractal_noise(p, detail, roughness);\n    \n    return (vec3(value,\n                fractal_noise(p+random_vec3_offset(0.), detail, roughness),\n                fractal_noise(p+random_vec3_offset(1.), detail, roughness)));\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.;\n    \n    float detail1 = 16.;\n    float detail2 = 1.;\n    float roughness1 = .5;\n    float roughness2 = .5;\n    vec3 pIn1 = vec3(uv,iTime/5.);\n    vec3 pIn2 = noiseTexture(pIn1,detail1,roughness1);\n    \n    vec3 col = noiseTexture(pIn2,detail2,roughness2);\n\n    // contrast\n    col *= .7;\n    // brightness\n    col += .5;\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}