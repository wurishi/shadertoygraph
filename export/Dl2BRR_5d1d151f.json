{"ver":"0.1","info":{"id":"Dl2BRR","date":"1693680456","viewed":63,"name":"jigsaw tiling","username":"thacks42","description":"parametric jigsaw tiling","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["sdf","tiling","puzzle","jigsaw","paramteric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smooth_union( float d1, float d2) {\n    float k = 0.004;\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nfloat smooth_intersection(float d1, float d2){\n    float k = 0.002;\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat smooth_difference( float d1, float d2) {\n    float k = 0.002;\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat circle(vec2 c, float r, vec2 p){\n    float dx = c.x - p.x;\n    float dy = c.y - p.y;\n    return r*r - (dx * dx + dy * dy);\n}\n\n// Basic noise\nfloat bnoise(float x){\n    // setup    \n    float i = floor(x);\n    float f = fract(x);\n    float s = sign(fract(x/2.0)-0.5);\n    float k = fract(i*.1731);\n\n    // quartic polynomial\n    return s*f*(f-1.0)*((16.0*k-4.0)*f*(f-1.0)-1.0);\n}\n\nfloat fbm(float x){\n    float n = 0.0;\n    float s = 1.0;\n    for(int i=0; i<2; i++){\n        n += s*bnoise(x);\n        s *= 0.5;\n        x *= 2.0;\n        //x += 0.131;\n    }\n    return n;\n}\n\nfloat displace_coordinate(float root0, float root1, int seed, float p){\n    float dx = root1 - root0;\n    return 0.05*fbm((p - root0)/dx + float((seed+32)*5));\n}\n\nvec3 circle_from_points(vec2 a, vec2 b, vec2 c){\n    float x1 = a.x;\n    float x2 = b.x;\n    float x3 = c.x;\n    \n    float y1 = a.y;\n    float y2 = b.y;\n    float y3 = c.y;\n    \n    float m11 = determinant(mat3(vec3(x1, x2, x3), vec3(y1, y2, y3), vec3(1.0, 1.0, 1.0)));\n    float m12 = determinant(mat3(vec3(x1*x1 + y1*y1, x2*x2 + y2*y2, x3*x3 + y3*y3), vec3(y1, y2, y3), vec3(1.0, 1.0, 1.0)));\n    float m13 = determinant(mat3(vec3(x1*x1 + y1*y1, x2*x2 + y2*y2, x3*x3 + y3*y3), vec3(x1, x2, x3), vec3(1.0, 1.0, 1.0)));\n    float m14 = determinant(mat3(vec3(x1*x1 + y1*y1, x2*x2 + y2*y2, x3*x3 + y3*y3), vec3(x1, x2, x3), vec3(y1, y2, y3)));\n    \n    float x = 0.5*m12/m11;\n    float y = -0.5*m13/m11;\n    float r = sqrt(x*x + y*y + m14/m11);\n    \n    return vec3(x,y,r);\n}\n\nfloat jigsaw_piece(mat4 jigsaw_params, ivec2 offsets, bool even, vec2 p){\n    vec3 p_top =    circle_from_points(jigsaw_params[0].xy, jigsaw_params[1].xy, jigsaw_params[0].zw);\n    vec3 p_right =  circle_from_points(jigsaw_params[1].xy, jigsaw_params[2].xy, jigsaw_params[1].zw);\n    vec3 p_bottom = circle_from_points(jigsaw_params[2].xy, jigsaw_params[3].xy, jigsaw_params[2].zw);\n    vec3 p_left =   circle_from_points(jigsaw_params[3].xy, jigsaw_params[0].xy, jigsaw_params[3].zw);\n    \n    vec2 top_notch_center = 0.5*(jigsaw_params[0].xy + jigsaw_params[1].xy);\n    top_notch_center = top_notch_center + 2.0 * (jigsaw_params[0].zw - top_notch_center);\n    \n    vec2 right_notch_center = 0.5*(jigsaw_params[1].xy + jigsaw_params[2].xy);\n    right_notch_center = right_notch_center + 2.0 * (jigsaw_params[1].zw - right_notch_center);\n    \n    vec2 bottom_notch_center = 0.5*(jigsaw_params[2].xy + jigsaw_params[3].xy);\n    bottom_notch_center = bottom_notch_center + 2.0 * (jigsaw_params[2].zw - bottom_notch_center);\n    \n    vec2 left_notch_center = 0.5*(jigsaw_params[3].xy + jigsaw_params[0].xy);\n    left_notch_center = left_notch_center + 2.0 * (jigsaw_params[3].zw - left_notch_center);\n    \n    int seed_0 = 5*offsets.x + 2*offsets.y;\n    int seed_1 = 3*offsets.x - 2*offsets.y;\n    int seed_2 = 5*offsets.x + 2*(offsets.y-1);\n    int seed_3 = 3*(offsets.x-1) - 2*offsets.y;\n    \n    vec2 top_notch_offset = vec2(1.00 * fbm(fract(3.141592 * float(seed_0))), \n                                 0.05 * fbm(fract(1.6180339 * float(seed_0))));\n    \n    vec2 right_notch_offset = vec2(0.15 * fbm(fract(1.6180339 * float(seed_1))),\n                                   0.60 * fbm(fract(3.141592 * float(seed_1))));\n    \n    vec2 bottom_notch_offset = vec2(1.00 * fbm(fract(3.141592 * float(seed_2))),\n                                    0.05 * fbm(fract(1.6180339 * float(seed_2))));\n    \n    vec2 left_notch_offset = vec2(0.15 * fbm(fract(1.6180339 * float(seed_3))),\n                                  0.60 * fbm(fract(3.141592 * float(seed_3))));\n    \n    \n    top_notch_center += top_notch_offset;\n    right_notch_center += right_notch_offset;\n    bottom_notch_center += bottom_notch_offset;\n    left_notch_center += left_notch_offset;\n    \n    float c_top =    circle(p_top.xy, p_top.z, p);\n    float c_right =  circle(p_right.xy, p_right.z, p);\n    float c_bottom = circle(p_bottom.xy, p_bottom.z, p);\n    float c_left =   circle(p_left.xy, p_left.z, p);\n    \n    \n    float c_top_notch = circle(top_notch_center, 0.04, p);\n    float c_right_notch = circle(right_notch_center, 0.04, p);\n    float c_bottom_notch = circle(bottom_notch_center, 0.04, p);\n    float c_left_notch = circle(left_notch_center, 0.04, p);\n    \n    \n    \n    c_top    += displace_coordinate(jigsaw_params[0].x, jigsaw_params[1].x, seed_0, p.x);\n    c_right  += displace_coordinate(jigsaw_params[1].y, jigsaw_params[2].y, seed_1, p.y) * 0.2;\n    c_bottom += displace_coordinate(jigsaw_params[3].x, jigsaw_params[2].x, seed_2, p.x);\n    c_left   += displace_coordinate(jigsaw_params[0].y, jigsaw_params[3].y, seed_3, p.y) * 0.2;\n    \n    \n    \n    if(even) return -smooth_difference(-smooth_difference(smooth_union(smooth_union(-smooth_difference(-smooth_difference(smooth_intersection(c_top, c_bottom),c_left), c_right), c_top_notch), c_bottom_notch), c_right_notch), c_left_notch);\n    else     return smooth_union(smooth_union(-smooth_difference(-smooth_difference(-smooth_difference(-smooth_difference(smooth_intersection(c_left, c_right),c_top), c_bottom), c_top_notch), c_bottom_notch), c_right_notch), c_left_notch);\n}\n\nfloat sdf(ivec2 offset_i, vec2 p, bool even){\n    //vec2 offset = vec2(float(offset_i.x) * 0.3, float(offset_i.y) * 0.2);\n    vec2 offset = vec2(float(offset_i.x) * 0.3, float(offset_i.y) * 0.2);\n    vec2 corner0 = vec2(-0.15, 0.1) + offset;\n    vec2 corner1 = vec2(0.15, 0.1) + offset;\n    vec2 corner2 = vec2(0.15, -0.1) + offset;\n    vec2 corner3 = vec2(-0.15, -0.1) + offset;\n    \n    vec2 displacement0;\n    vec2 displacement1;\n    vec2 displacement2;\n    vec2 displacement3;\n    \n    if(even){\n        displacement0 = vec2(0.0, 0.11) + offset;\n        displacement1 = vec2(0.14, 0.0) + offset;\n        displacement2 = vec2(0.0, -0.11) + offset;\n        displacement3 = vec2(-0.14, 0.0) + offset;\n    }\n    else{\n        displacement0 = vec2(0.0, 0.09) + offset;\n        displacement1 = vec2(0.16, 0.0) + offset;\n        displacement2 = vec2(0.0, -0.09) + offset;\n        displacement3 = vec2(-0.16, 0.0) + offset;\n    }\n    \n    \n    mat4 jigsaw_params = mat4(vec4(corner0, displacement0),\n                              vec4(corner1, displacement1),\n                              vec4(corner2, displacement2),\n                              vec4(corner3, displacement3));\n    \n    return jigsaw_piece(jigsaw_params, offset_i, even, p);\n}\n\nvec3 random_color(int x, int y){\n    float r = fract(0.842 + float(x) * 3.1415 + float(y) * 1.414692);\n    float g = fract(0.216 + float(x) * 2.7912 + float(y) * 3.712852);\n    float b = fract(0.308 + float(x) * 1.6621 + float(y) * 2.938125);\n    \n    return vec3(r,g,b);\n}\n\nvec3 make_jigsaw(vec2 p){\n    int off = 0;\n    for(int y = -6; y <= 6; y++){\n        for(int x = -8 + off; x <= 8; x+=2){\n            ivec2 offset = ivec2(x, y);\n            vec3 col = random_color(x,y);\n            \n            if(sdf(offset, p, true) > 0.0) return col;\n        }\n        off = 1-off;\n    }\n    off = 1;\n    for(int y = -6; y <= 6; y++){\n        for(int x = -8 + off; x <= 8; x+=2){\n            ivec2 offset = ivec2(x, y);\n            vec3 col = random_color(x,y);\n            \n            if(sdf(offset, p, false) > 0.0) return col;\n        }\n        off = 1-off;\n    }\n    return vec3(0.0, 0.0, 0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float ymax = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord/iResolution.xx - vec2(0.5, 0.5*ymax);\n    uv *= 4.0;\n    float d_pixel = 1.0/iResolution.x;\n    \n    \n    vec2 offset0 = vec2(d_pixel * 0.75, -d_pixel * 0.25);\n    vec2 offset1 = vec2(d_pixel * 0.25, d_pixel * 0.75);\n    vec2 offset2 = vec2(-d_pixel * 0.75, d_pixel * 0.25);\n    vec2 offset3 = vec2(-d_pixel * 0.25, -d_pixel * 0.75);\n    \n    vec3 col0 = make_jigsaw(uv+offset0);\n    vec3 col1 = make_jigsaw(uv+offset1);\n    vec3 col2 = make_jigsaw(uv+offset2);\n    vec3 col3 = make_jigsaw(uv+offset3);\n    \n    fragColor = vec4(0.25 * (col0 + col1 + col2 + col3),1.0);\n    \n    //fragColor = vec4(make_jigsaw(uv), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}