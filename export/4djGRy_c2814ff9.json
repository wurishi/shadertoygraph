{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sp, out vec3 nor )\n{\n    float t = -1.0;\n\tnor = vec3(0.0);\n\t\n\tvec3  rc = ro - sp.xyz;\n\tfloat b =  dot(rc,rd);\n\tfloat c =  dot(rc,rc) - sp.w*sp.w;\n\tfloat k = b*b - c;\n\tif( k>0.0 )\n\t{\n\t\tt = -b - sqrt(k);\n\t\tnor = normalize( (ro+rd*t) - sp.xyz );\n\t}\n\n\treturn t;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 p = -1.0 + 2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 sunDir_o = normalize(vec3(-0.0, -0.6, 1.0));\n\tvec3 sunDir = sunDir_o;\n\tfloat sunrot = -iTime / 40.0;\n\tsunDir.y = sunDir_o.y * cos(sunrot) - sunDir_o.z * sin(sunrot);\n\tsunDir.z = sunDir_o.y * sin(sunrot) + sunDir_o.z * cos(sunrot);\n\n\t// camera\n\tvec3  ro = vec3(0.0,0.0,0.0);\n    vec3  rd_o = normalize( vec3(p.xy,-2.0) );\n\tvec3  rd_y = rd_o;\n\tfloat camrot = 0.0;// - iMouse.y / 100.0;\n\trd_y.y = rd_o.y * cos(camrot) - rd_o.z * sin(camrot);\n\trd_y.z = rd_o.y * sin(camrot) + rd_o.z * cos(camrot);\n\tcamrot = 0.0;// - iMouse.x / 100.0;\n\tvec3 rd = rd_y;\n\trd.x = rd_y.x * cos(camrot) - rd_y.z * sin(camrot);\n\trd.z = rd_y.x * sin(camrot) + rd_y.z * cos(camrot);\n\n\tvec3 seamultiplier = vec3(1.0);\n\t\n\tvec3 earthnor = vec3(0.0);\n\tfloat t2 = iSphere(ro, rd, vec4(0.0, -900.0, 0.0, 899.99), earthnor);\n\tif (t2 > 0.0)\n\t{\n\t\tro = rd * t2;\n\t\tearthnor = normalize(earthnor + sin(ro.xyz*1300.0 + iTime) * 0.01 + cos(ro.zxy*2000.0 + iTime) * 0.01);\n\t\trd = rd - 2.0 * earthnor * dot(rd, earthnor);\n\t\tseamultiplier = vec3(0.5);\n\t}\n\t\n\tvec3 nor;\n\tfloat t = -iSphere(ro, rd, vec4(0.0, 900.0, 0.0, 1000.0), nor);\n\tvec3 skycolor = vec3(0.0, 0.6, 1.0);\n\tvec3 skyabsorbsion = (t * 0.003) * skycolor;\n\tvec3 col = skyabsorbsion * clamp(dot(vec3(0.0, -1.0, 0.0), sunDir), 0.0, 1.0);\n\t\n\tvec3 suncol = vec3(0.0);\n\t\n\t// compute sun\n\tif (dot(rd, sunDir) < -0.999)\n\t{\n\t\tsuncol = vec3(2.0, 2.0, 2.0) - skyabsorbsion * 2.3;\n\t}\n\t\n\tcol += 2.0 * pow(clamp(-dot(rd, sunDir) - 0.0, 0.0, 1.0), 16.0) * (vec3(2.0, 2.0, 2.0) - skyabsorbsion * 2.3) * (t * 0.0015);\n\t\n\tcol += suncol;\n\t\n\tcol *= seamultiplier;\n\t\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4djGRy","date":"1390558770","viewed":847,"name":"Sunset by Sea","username":"Yhdz","description":"My first shader here at shader toy. I had a lot of fun playing around with a simple atmosphere simulation.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""}}