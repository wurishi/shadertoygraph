{"ver":"0.1","info":{"id":"lsjfRw","date":"1500282065","viewed":991,"name":"[SH17A] a Game in 280 characters","username":"pellicus","description":"Player,Level,Score,HighScore...it's a GAME!...in 2 tweets \nEndless \"Dodger\" game: Mouse to move, avoid the Green Rocks, enjoy your Cyan Score & Blue HiScore. \nHints: the level never change, Fullscreen helps. \n+ Pellicus&theGiallo Tinyest Shader Trick","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["game","endless","running","sh17a","280"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This should be the smallest code in Shadertoy to copy the logic buffer A\nvoid mainImage(out vec4 o, vec2 c){o=texelFetch(iChannel0,ivec2(c),0);}\n\n// that was an idea by me and theGiallo while experimenting for this super fun contest.\n// reference: www.shadertoy.com/view/Xd2BWh Tiniest Shadertoy Trick\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define g(c) texture( iChannel2, ((c)+p.z*p.z)/3e4 ).x < .2\n\n\nvoid mainImage(out vec4 o,vec2 c){vec4 p=texture( iChannel0, c-c );p.w =max(p.w,p.z+=.06);o= c.x>1.?vec4(6.-length(p.xy-c),g(c) ?1.:p.z-c.y,p.w-c.y, 0 ):g( p.xy+=.2*(iMouse-p).xy)?p*=o :p;}\n\n/*\n\tPlayer (Red Ball) +\n\tHuge Ripetitive Level (Green Rocks) +\n\tCurrent Score (Cyan Bottom Bar) +\n\tBest Score (Blue Bottom Bar)\n\t------------\n\ta GAME!\n\t...in 2 tweets \n\nHints: - the level never change so you could replay it remembering the obstacle positions,\n\t   - Fullscreen helps :D.\n\t   - Best experience (hahahha :J) at 60 fps\n\t   - ..never take it seriously\n*/\n\n/*\nvoid mainImage(out vec4 o,vec2 c) {\n    \n    vec4 p = texture( iChannel0, c-c );\n\n\t// yes.. .i hope that everything goes at 60fps\n\t// and we have the highscore!\n    p.w =max(p.w,p.z+=.04);\n    \n\t// the game state is stored in the 0,0 pixel, garbage on the rest of the very left column\n\to= c.x>1.?\n            vec4( 6.-length(p.xy-c), \n                   g(c)  ?1.:p.z-c.y, \n                   p.w-c.y, 0 )\n     :\n  \t\t// the player position ... i think it's more challenging moving the player like that\n\t\t// instead of stick it to the iMouse position without delay.\n     \tg( p.xy+=.2*(iMouse-p).xy)\n          ? \n \t// because the #degine mainImage trick I know that o is vec4(0,0,0,1) and i want to save\n    // the highscore in p.w so i could reset the game state with a p*=o\n        p*=o :\n\t// otherwise i save the state.\n        p ;\n  \n }\n\n\n\n*/","name":"Buffer @","description":"","type":"buffer"}]}