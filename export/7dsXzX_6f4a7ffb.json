{"ver":"0.1","info":{"id":"7dsXzX","date":"1619166023","viewed":144,"name":"Rotating circles spiral 1","username":"smjty","description":"Use the mouse to change the radius of the inner circles. This shader is available on hicetnunc: https://www.hicetnunc.xyz/objkt/41129\nI used a finite complex sum to solve the position of inner circles.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","circle","comples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Source code for the piece: https://www.hicetnunc.xyz/objkt/41129    |  Twitter: @smjtyazdi. \n//Special thanks to @FabriceNeyret2 !\n#define PI 3.14159265\n\nfloat circle(vec2 pos, vec3 circ){\n    return max(length(pos-circ.xy) - circ.z,0.0)/2.;\n\n}\nfloat flip(float a , float b){\n    b = b*2.-1.;\n    return a*b - b/2. + 0.5;\n}\n\n//complex funcs\nvec2 Cinv(vec2 a){\n    return vec2(a.x,-a.y)/dot(a,a);\n}\nvec2 Cmul(vec2 a , vec2 b){\n    return vec2(a.x*b.x - a.y*b.y , a.x*b.y+a.y*b.x);\n}\nvec2 Cpow(vec2 a, float n){\n    float r = length(a);\n    float t = atan(a.y,a.x);\n    return vec2(cos(t*n), sin(t*n))*pow(r,n);\n}\n///////////////\n\nfloat render(vec2 p){\n\n    float scale = iResolution.y/2.1;\n    float r = clamp(0.07 + iMouse.x/iResolution.x/2.31 , 0. , 0.9);\n    \n    float time = iTime/2.;\n    float t = time - sin(time);\n    \n    vec2 A = vec2(cos(t),sin(t))*(1.-r);\n\tfloat col = 1.;\n    \n    float radi = 1.;\n    \n    for(int i=0;i<50;i++){\n\n        vec2 pos = scale * r * Cmul( vec2(1.,0.) - Cpow(A,float(i)) , Cinv( vec2(1.,0.) - A ) );\n        col = flip(col , clamp(circle(p,vec3(pos,scale*radi)) , 0.,1.0 ));\n        if(i>0)\n            col = flip(col , clamp(circle(-p,vec3(pos,scale*radi)) , 0.,1.0 ));\n            \n        radi *= 1.-r ;\n        \n        if(radi*scale<0.2)break;\n    }\n   \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 p = (fragCoord.xy  - iResolution.xy/2.0);\n   float col = render(p);\n   \n   vec3 color2 = vec3(0,0,0);\n   vec3 color1 = vec3(1,1,1);\n\n   fragColor = vec4(mix(color2,color1,col),1.0);\n}","name":"Image","description":"","type":"image"}]}