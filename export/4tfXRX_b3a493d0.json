{"ver":"0.1","info":{"id":"4tfXRX","date":"1438441878","viewed":207,"name":"sound blades","username":"public_int_i","description":"sdfkglsd\n\nmetal sphincter ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sadfjlsj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//Ethan Alexander Shulman 2015     http://etahn.com/     https://twitter.com/EthanShulman\n//This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n//http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n#define FOV_SCALE .5\n#define ITER 128\n#define EPSILON .01\n#define NORMAL_EPSILON .01\n\n\nvec3 lightDir = normalize(vec3(-4.,6.,2.));\n\nvec3 background(in vec3 rd) {\n    \n    vec3 c = vec3( (ceil(fract(rd.x*12.)*2.-1.) + ceil(fract(rd.y*12.)*2.-1.))*.04 );\n    \n    float sun = max(0., (dot(rd,lightDir)-.18)*9. );//Thanks to 834144373 for the sun suggestion\n\tc = mix(c,vec3(.6,0.,0.),sun);\n    \n    float hm = max(0., dot(rd.xz,vec2(0.,-1.))-abs(rd.y) );\n    c = mix(c,vec3(1.),hm);\n    \n    return c;\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n\nfloat df(in vec3 rp) {\n    //rp += cos(rp*10.)*.02;\n    \n    vec3 lp = rp;\n    lp.z = mod(rp.z+iTime*4.,14.)-7.;\n            \n    float dst = floor(length(rp.xy)*.5+1.);\n    float ang = atan(rp.y,rp.x)*8.+iTime+dst;//+texture(iChannel0,vec2(rp.z/200., .05)).x*6.;\n    \n    vec2 angPos = vec2(sin(ang),\n                       cos(ang))*dst*(.7+texture(iChannel0,vec2(rp.z/300., .05)).x*2.);\n    return sdCapsule(lp, vec3(angPos,0.), vec3(angPos,10.), 1.3);//length(max(abs(lp-vec3(angPos,0.))-vec3(1.2,1.2,5.),0.));\n}\nconst vec3 ne = vec3(NORMAL_EPSILON,0.,0.);\nvec3 normal(in vec3 rp) {\n    return normalize(vec3(df(rp+ne)-df(rp-ne),\n                          df(rp+ne.yxz)-df(rp-ne.yxz),\n                          df(rp+ne.yzx)-df(rp-ne.yzx)));\n}\n\nvec2 rot2d(in vec2 p, float a) {\n    float ss = sin(a);\n    float sc = cos(a);\n    \n    return vec2(p.x*sc - p.y*ss,\n                p.x*ss + p.y*sc);\n}\n\n//float MOUSE_X_ANGLE = iMouse.x/iResolution.x*6.14;\nvec3 look(in vec2 uv) {\n    vec3 rd = normalize(vec3(sin(iTime*.4)*.2,cos(iTime*.64)*.2, 1.));\n    //vec3 rd = normalize(vec3(sin(MOUSE_X_ANGLE),0.,cos(MOUSE_X_ANGLE)));\n    vec3 rr = cross(vec3(0.,1.,0.),rd);\n    \n    return normalize(rd*FOV_SCALE + uv.x*rr + uv.y*cross(rd,rr));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec3 rp = vec3(0., 0., 0.);\n    vec3 rd = look(rot2d(uv,0.));\n    \n    float glow = 0.;\n    float d, s = 0.;\n    for (int i = 0; i < ITER; i++) {\n        if ((d = df(rp)) < EPSILON) break;\n        \n        glow += df(rp/.1);\n        d *= .25;\n        rp += d*rd;\n        rd = look(rot2d(uv,pow(s/12.,1.2)));//\n        s += d;\n    }\n\n    rd = look(rot2d(uv,0.));\n\tif (d > EPSILON) {\n        fragColor.xyz =  mix(background(rd), vec3(.6,0.,0.), clamp(glow/30000., 0., 1.));\n    \treturn;\n\t}\n    \n    //fragColor.xyz = background(rd);\n    //return;\n    \n    vec3 c = vec3(1.);\n    vec3 n = normal(rp);\n    c = .3*c+max(0.,dot(lightDir,n))*c;\n    \n    c = mix(c,background(reflect(rd,-n)),.65);\n    c = mix(c,background(rd),min(1.,pow(s/40.,1.6)));\n    \n    c = mix(c,vec3(.6,0.,0.),clamp(glow/3000., 0., 1.));\n    \n    fragColor = vec4(c,1.);\n}","name":"","description":"","type":"image"}]}