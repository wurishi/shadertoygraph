{"ver":"0.1","info":{"id":"XXBGDt","date":"1709065278","viewed":371,"name":"[Kiltun] Singularity","username":"Kiltun","description":"i like it","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","gradient","glow","singularity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CIRCLE_RADIUS 0.5\n#define CIRCLE_SMOOTHNESS 0.4\n\nvec3 palette( float t ) {  \n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// 3D Noise - from https://www.shadertoy.com/view/XsGyzR\nvec3 random3(vec3 st)\n{\n    st = vec3( dot(st,vec3(127.1,311.7,211.2)),\n            \tdot(st,vec3(269.5,183.3, 157.1)), dot(st,vec3(269.5,183.3, 17.1))  );\n   \treturn -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec3 st) \n{\n\tvec3 i = floor(st) ;\n  \tvec3 f = fract(st);\n\t\t\n    vec3 u = smoothstep(0.,1.,f);\n    \n\tfloat valueNowxy01 =mix( mix( dot( random3(i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ),\n                    \t\t \t dot( random3(i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                \t\tmix( dot( random3(i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ),\n                     \t\t \t dot( random3(i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y);\n\tfloat valueNowxy02 =mix( mix( dot( random3(i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ),\n                    \t\t \t dot( random3(i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                \t\tmix( dot( random3(i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ),\n                     \t\t \t dot( random3(i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y);\n\n    return abs(mix(valueNowxy01, valueNowxy02, u.z));\n\n}\n\n\nfloat sdCircle( vec2 p, float r, float s)\n{\n    float c = length(p);\n    c = smoothstep(r-s,r,c);\n    c = abs(1.-c);\n    return c;\n}\n\nvec2 normalizeLength(in vec2 noiseUV, in vec2 uv, in float scale)\n{\n    float currLength = length(noiseUV);\n    vec2 uvOutput = vec2(noiseUV.x *2./ currLength, noiseUV.y*2. / currLength);\n    \n    uv*=scale;\n    float mixVal = clamp(0.,1.,sdCircle(uv, CIRCLE_RADIUS*scale, CIRCLE_SMOOTHNESS*scale));\n    return mix(uvOutput, uv, mixVal);\n}\n\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;    \n\n    //Circle\n    float c = sdCircle(uv, CIRCLE_RADIUS, CIRCLE_SMOOTHNESS);\n    \n    //Noise\n    float timeFlow = iTime*0.3;\n    float noiseScale = 2.0;\n    vec2 noiseUV = uv;\n    noiseUV = normalizeLength(noiseUV,uv, noiseScale);\n    float noiseTex = noise(vec3(noiseUV,timeFlow));\n    noiseTex = smoothstep(0.1,0.8,noiseTex);\n    \n    float stepsBloom = 10.;  \n    c*=noiseTex;\n    \n    for(float i = 1.; i<stepsBloom; i++)\n    {\n        float stepCircle = sdCircle(uv, CIRCLE_RADIUS+(1.9*(i/stepsBloom)),CIRCLE_SMOOTHNESS);\n        \n        stepCircle*= abs(1.-(i/stepsBloom));\n        stepCircle*=noiseTex;\n        c+=stepCircle;\n    }\n    \n\n    vec3 col =palette(length(noiseUV)) * c;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);    \n    //fragColor = vec4(vec3(noiseUV),1.0); \n}","name":"Image","description":"","type":"image"}]}