{"ver":"0.1","info":{"id":"4ltcDj","date":"1534121916","viewed":394,"name":"skulls","username":"nabr","description":"And the blood drains down like devil's rain\nWe'll bathe tonight","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["texture","musicvisualisation","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4d2SWV","filepath":"https://soundcloud.com/midocamusic/misfits-skulls-dark-waves-midoca-cover-1","previewfilepath":"https://soundcloud.com/midocamusic/misfits-skulls-dark-waves-midoca-cover-1","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/4ltcDj\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n#define time iTime\n#define _ vec2((fragCoord.xy*2.001-iResolution.xy )/iResolution.y)\n\n#define pi 3.14159265359\n#define pi2 6.28318530718\n\nfloat music(vec2 r){\n    \n    // ----- music texture https://www.shadertoy.com/view/Xds3Rr\n    \n \t// the sound texture is 512x2\n    int tx = int( r.x * 512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x ; \n\n    // second row is the sound wave, one texel is one mono sample\n    return texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // music texture\n    float m = (music( abs(_) / 22.001 ))* .5 +.5 ;\n    \n    // make a tunnel\n    float a = (.5+atan( length ( _ ), 1. ) * pi2);\n    float r = clamp(  a - acos(  _.y * 1.18 ) / pi2, 0., 1.);\n    \n    // animate\n    // https://en.wikipedia.org/wiki/Shadertoy#Usage\n    vec2 uv =  vec2( 1./r + 0.2* time, m+a );\n    float f = sin(uv.x) * cos ( time  - uv.y);\n    \n    // grid overlay\n    float grid = abs(0.01/ sin(  f + _.x * 12.) - f * cos( _.y)) \n        \t\t - uv.y * abs(0.0015 / sin( f - _.y * 12.) - .081/cos(f*_.x));\n    \n    // shade\n    vec3 col = (grid * 0.5) + (0.25 * cos(time- 0.25 + (pi2 * grid) + vec3( -pi/2., pi/2.6, pi )));\n    \n    fragColor.rgb =  grid + pow(col + 0.2 , 2.2 / vec3( uv.x, uv.y , 1.-(uv.x+uv.y) ) );\n    fragColor.a = 1.;\n}","name":"Image","description":"","type":"image"}]}