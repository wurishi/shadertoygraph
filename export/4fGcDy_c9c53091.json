{"ver":"0.1","info":{"id":"4fGcDy","date":"1732298430","viewed":84,"name":"hr6ywub4v5bty","username":"TestCoder","description":"dfgdfg","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["dfgdfg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Class\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates to range from -1 to 1\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Parameters for the grid\n    float gridScale = 50.0; // Number of cells along one axis\n    vec2 gridPos = floor(uv * gridScale);\n    \n    // Center of the pulsating effect\n    vec2 center = vec2(0.0);\n    \n    // Compute distance from center of the effect\n    float distance = length(gridPos - center);\n    \n    // Breathing effect: Sine wave with time modulation\n    float pulsate = 0.5 + 0.5 * sin(iTime * 3.0 - distance * 1.5);\n    \n    // Cell boundaries\n    vec2 cell = fract(uv * gridScale) - 0.5;\n    \n    // Size of the squares\n    float size = 0.2 * pulsate;\n    \n    // Check if we are inside a square\n    float inSquare = step(abs(cell.x), size) * step(abs(cell.y), size);\n    \n    // Assign color: squares in white, background in black\n    fragColor = mix(vec4(0.0), vec4(1.0), 1. - inSquare);\n}\n","name":"Image","description":"","type":"image"}]}