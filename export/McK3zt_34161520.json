{"ver":"0.1","info":{"id":"McK3zt","date":"1713180349","viewed":64,"name":"Relativistic Poles","username":"StarySky","description":"Grid of moving poles when the speed of light is significantly slower.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","relativity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 50.\n#define RAYMARCH_TIME 256\n#define PRECISION .0001\n#define AA 3\n#define PI 3.14159265\n#define lightspeed 5.\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfSphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdfBox(in vec3 p, in vec3 r) {\n    vec3 b = abs(p) - r;\n    return length(max(b, 0.)) + min(max(max(b.x, b.y), b.z), 0.);\n}\n\nfloat sdfCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdf(in vec3 p, in float t) {\n    float retardedt = t - length(p)/lightspeed;\n    p = p * vec3(1.,1.,1./sqrt(1.-pow(cos(retardedt)/lightspeed,2.)));\n    float r = sdfBox(vec3(mod(p.x-2.,3.)-1.5,p.y,mod(p.z-sin(retardedt),3.)-1.5), vec3(.2,2.,.2));\n    return r;\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd * .5;\n        float d = sdf(p, iTime);\n        if(abs(d) < PRECISION)\n            break;\n        t += d;\n    }\n    return t;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 5e-6;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * sdf(p + k.xyy * h, iTime) +\n        k.yyx * sdf(p + k.yyx * h, iTime) +\n        k.yxy * sdf(p + k.yxy * h, iTime) +\n        k.xxx * sdf(p + k.xxx * h, iTime));\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.4,0.7,0.8)*1.2+length(uv)*vec3(0.1,0.25,0.3);\n    vec3 ro = vec3(0.);\n\n    vec3 ta = vec3(1.,0.,0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    vec3 rd = normalize(cam * vec3(uv, 2.));\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(-4,5.,PI)*10.;\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        float amb = 0.5;\n        color = amb * vec3(0.2,.4,.9) + 0.7* dif * vec3(0.2,.4,.9);\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}