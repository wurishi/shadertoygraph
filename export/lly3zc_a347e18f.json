{"ver":"0.1","info":{"id":"lly3zc","date":"1475871661","viewed":196,"name":"Meta regular n-gons","username":"twitchingace","description":"Mucking about, trying to implement regular meta n-gons.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","metaball","learning","gooey","metacube","metapolygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////////////////////\n// Set COL to 0. to see the shapes colorized.\n// Use ISSOLID in conjunction with ISTHRESHOLDto determine if \n// the shape should be filled in.\n/////////////////////////////////////////////////////////////////////////////\n\n#define COL 1.\n#define ISSOLID 0\n#define ISTHRESHOLD 1\n#define PI 3.14159\n#define MAXSIDES 10\n\nstruct metaball{\n    vec2 pos;\n    vec3 colour;\n    float radius;\n    \n};    \nstruct metangon{\n\tvec2 pos;\n    int numSides;\n    vec3 colour;\n    float radius;\n};\n    \nvec2 rotate(in vec2 vec, in float rot){\n    vec2 newVec;\n\tnewVec.x = vec.x * cos(rot) - vec.y * sin(rot);\n\tnewVec.y = vec.x * sin(rot) + vec.y * cos(rot); \n    return newVec;\n}\n\nvec3 doMetangon(in metangon mngon, in vec2 testPoint, in float rot){\n    // Basically, we want to fake a \"distance\" to use by finding the projection\n    // of the vector from the center of the shape to the testPoint onto the\n    // normal (scaled by \"radius\") of each side, and take the biggest one.\n    \n    vec2 testVec = testPoint - mngon.pos;   \n    vec2 sideNormal = vec2(0., mngon.radius);\n    sideNormal = rotate(sideNormal, rot);    \n    float maxDist = dot(testVec, normalize(sideNormal));    \n    for (int i = 1; i < MAXSIDES; i++){\n        // A silly hack to get around the need for constant loop iterations\n        if (i >= mngon.numSides){\n            break;\n        }            \n        sideNormal = rotate(sideNormal, radians(360./ float(mngon.numSides))); \n        maxDist = max(maxDist, dot(testVec, normalize(sideNormal)));\n    }\n        \n    return mngon.colour * mngon.radius / maxDist;\n}\n\nvec3 doMetaball(in metaball mball, in vec2 testPoint){\n    vec2 pos = mball.pos;\n\treturn mball.colour *  mball.radius/length(pos - testPoint);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    \n    metaball ball1 = metaball(vec2(0.5+ .5*cos(iTime + 0.4), 0.25 + .2*sin(iTime)),\n                              vec3(COL,1.,1.), .1);\n    metangon cube1 = metangon(vec2(0.5 + .5 * sin(iTime), 0.15), 4,\n                              vec3(1.,1., COL), .07);\n    metangon tri1 = metangon(vec2(abs(0.3 + .5 * sin(iTime)), 0.4 + .2 * cos(iTime)), 3,\n                              vec3(1.,COL, 1.), .07);\n    metaball ball2 = metaball(vec2(abs(0.1 + sin(iTime)), 0.2 + 0.2 * cos(iTime)), \n                              vec3(1., COL, COL), 0.05);    \n    metangon pentagon1 = metangon(vec2(0.5, abs(0.3 + .2 * sin(iTime * 0.7 + 5.))), 5,\n                              vec3(COL, 1., COL), .075);    \n    metangon septagon1 = metangon(vec2(abs(0.4 + sin(iTime)), 0.4 - 0.2 * cos(iTime)), 7,\n                              vec3(1., 1., 1.), 0.06);\n    \n    vec3 rgb = vec3(0.);\n    rgb += doMetaball(ball2, uv);\n    rgb += doMetaball(ball1, uv);\n    rgb += doMetangon(cube1, uv, iTime * 1.1 + 0.3);\n\trgb += doMetangon(tri1, uv, iTime);\n    rgb += doMetangon(pentagon1, uv, -iTime);\n    rgb += doMetangon(septagon1, uv, 0.);                            \n    rgb /= 1.75;\n    \n    #if ISTHRESHOLD == 1\n    float threshold = 1.;\n    if (rgb.x <= threshold){\n        rgb.x = 0.;\n    }\n    if (rgb.y <= threshold){\n        rgb.y = 0.;\n    }\n    if (rgb.z <= threshold){\n        rgb.z = 0.;\n    }    \n    #if ISSOLID == 0\n    if (rgb.x > threshold + 0.1 || \n        \trgb.y > threshold + 0.1 ||\n        \trgb.z > threshold + 0.1){\n        rgb = vec3(0.);\n    }\n    #endif\n    #endif\n    \n\tfragColor = vec4(rgb ,1.0);\n}","name":"Image","description":"","type":"image"}]}