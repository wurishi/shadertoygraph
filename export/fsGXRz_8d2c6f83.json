{"ver":"0.1","info":{"id":"fsGXRz","date":"1634228093","viewed":232,"name":"Interactive Newton Fractal","username":"Ultraviolet","description":"Click on a root to move it around.\nUse up/down arrow to add/remove roots, space to show a grid.\nTODO : improve FPS.\n\nNOTE : I added a bias in search direction that makes things much more trippy","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["fractal","newton","root"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define NB_ITER 100\n#define AA 2.0\n#define BIAS 0.165\n\nvec2 mul(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x-z1.y*z2.y, z1.x*z2.y+z1.y*z2.x);\n}\n\nvec2 div(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x+z1.y*z2.y, z1.y*z2.x-z1.x*z2.y)/(z2.x*z2.x+z2.y*z2.y);\n}\n\n\nint nb_root() {\n    \n    return int(texelFetch(iChannel0, ivec2(0,0), 0).x);\n\n}\n\nvec2 get_root(int i) {\n    return texelFetch(iChannel0, ivec2(i+1,0), 0).xy;\n}\n\nbool root_selected(int i) {\n\n    return texelFetch(iChannel0, ivec2(i+1,0), 0).w>0.5;\n}\n\nvec2 f(vec2 z) {\n\n    vec2 res = vec2(1.,0.);\n\n    for(int i=0; i<nb_root(); ++i) {\n        res = mul(res, z - get_root(i));\n    }\n    return res;\n}\n\n// todo: use dual complex numbers instead\nvec2 df_dz(vec2 z) {\n//*\n\n    vec2 res = vec2(0.,0.);\n\n    for(int i=0; i<nb_root(); ++i) {\n        vec2 temp_res = vec2(1.,0.);\n\n        for(int j=0; j<nb_root(); ++j) {\n            if(j != i)\n                temp_res = mul(temp_res, z - get_root(j));\n        }\n        res += temp_res;\n    }\n    \n    float t = iTime*0.1*2.*PI;\n    t = BIAS*2.*PI;\n    return mul(res, vec2(cos(t), sin(t)));\n/*/\n    \n    float epsilon = 1.e-6;\n    vec2 fz = f(z);\n    vec2 dfdx = (f(z+vec2(epsilon, 0.))-fz)/epsilon;\n    vec2 dfdy = div(f(z+vec2(0., epsilon))-fz, vec2(0,epsilon));\n    //vec2 dfdy = (f(z+vec2(0., epsilon))-fz)/epsilon;\n    \n    return dfdx-mul(dfdy, vec2(0,1));\n    //return dfdx+dfdy;\n//*/\n}\n\nint closest_root(vec2 z) {\n    int i_min=0;\n    for(int i=1; i<nb_root(); ++i) {\n        if( length(z-get_root(i)) < length(z-get_root(i_min)))\n            i_min = i;\n    }\n    return i_min;\n}\n\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 root_color(int i) {\n    return hsv2rgb_smooth(vec3(float(i) / float(nb_root()), .8, .8));\n}\n\n\nvec2 screen2world(vec2 fragCoord) {\n    return (fragCoord/iResolution.xy - 0.5)*2.*vec2(iResolution.x/iResolution.y, 1.)/ZOOM;\n}\n\n\nvec3 compute_scene(vec2 fragCoord) {\n\n    vec2 z = screen2world(fragCoord);\n    vec2 z0 = z;\n    float l = 0.;\n\n    for(int i=0; i<NB_ITER; ++i) {\n        vec2 z_prev = z;\n    \n        //*\n        z -= div(f(z), df_dz(z));\n        /*/\n        vec2 fz = f(z);\n        vec2 dfdz = (dFdx(fz)-mul(dFdy(fz),vec2(0,1)));\n        z -= div(fz, dfdz);\n        //*/\n        \n        l += length(z-z_prev);\n    }\n    \n    int r = closest_root(z);\n    //*\n    float dis_based_damping = exp(-l/100.);\n    /*/\n    float dis_based_damping = 1.;\n    //*/\n    vec3 c = root_color(r)*dis_based_damping;\n    \n    for(int i=0; i<nb_root(); ++i) {\n        DRAW_C(Circle(get_root(i), 0.05), z0, root_selected(i)?vec3(0.5):vec3(0.), 1.,c);\n    }\n    \n    if(texelFetch(iChannel1, ivec2(32,2),0).x>0.5) {\n        DRAW_C(Grid(1.), z0, vec3(.1), .5, c);\n        DRAW_C(Grid(.2), z0, vec3(.1), .2, c);\n    }\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 c = vec3(0.0);\n    for(float xx = 0.; xx < AA; xx+=1.0) {\n    for(float yy = 0.; yy < AA; yy+=1.0) {\n        c += compute_scene(fragCoord+vec2(xx,yy)/AA);\n    }\n    }\n    \n    c /= AA*AA;\n    \n\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define PI 3.14159\n#define ZOOM 0.75\n\n\n\n//---------------------------------------\n// Circle\n\nstruct Circle\n{\n    vec2 ctr;\n    float rad;\n};\n\nvec2 getPt(Circle c, float t)\n{\n    return c.ctr + c.rad*vec2(cos(t*PI*2.), sin(t*PI*2.));\n}\n    \nfloat dist(Circle c, vec2 p)\n{\n    return (length(c.ctr-p)-c.rad);\n}\n\n//---------------------------------------\n// Grid\n\nstruct Grid\n{\n    float inter;\n}; \n\nfloat dist(Grid g, vec2 p)\n{\n    vec2 d = abs(mod(p+g.inter*.5,g.inter*2.)-g.inter)-g.inter*.5;\n    return max(min(d.x, d.y), min(-d.x, -d.y));\n}\n\n\n//---------------------------------------\n// Drawing Macros\n\n// draw the inside of the shape\n#define DRAW(O,P,C,CC)\tCC=mix(CC,C,mix(1.,0.,clamp(dist(O,P)*iResolution.y/2., -1., 1.)*.5+.5))\n\n// draw the inside of the shape, with alpha\n#define DRAW_A(O,P,C,CC)\tCC=mix(CC,C.rgb,(mix(1.,0.,clamp(dist(O,P)*iResolution.y/2., -1., 1.)*.5+.5))*C.a)\n\n// draw the contour of the shape \n#define DRAW_C(O,P,C,W,CC)\tCC=mix(CC,C,mix(1.,0.,clamp(abs(dist(O,P))*iResolution.y/2.-W, -1., 1.)*.5+.5))\n\n// draw the contour of the shape with alpha\n#define DRAW_CA(O,P,C,W, CC)\tCC=mix(CC,C.rgb,(mix(1.,0.,clamp(abs(dist(O,P))*iResolution.y/2. -  W, -1., 1.)*.5+.5))*(1.-C.a))\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nint nb_root() {\n\n    if(iFrame <= 10)\n        return 3;\n    \n    return int(texelFetch(iChannel0, ivec2(0,0), 0).x);\n\n}\n\nvec2 get_root_init(int i) {\n    float alpha = float(i)*2.*PI/float(nb_root());\n    return vec2(cos(alpha), sin(alpha));\n}\n\nvec2 get_root(int i) {\n\n    if(iFrame <= 10)\n        return get_root_init(i);\n        \n    if(length(iMouse.xy)<10.) {\n    \n        float t = iTime*.6 + float(i)*2.*PI/float(nb_root());\n        return vec2(cos(t), 1.5*sin(t)*cos(t))/(1.+sin(t)*sin(t));\n    }        \n    \n    return texelFetch(iChannel0, ivec2(i+1,0), 0).xy;\n}\n\n\nvec2 screen2world(vec2 fragCoord) {\n    return (fragCoord/iResolution.xy - 0.5)*2.*vec2(iResolution.x/iResolution.y, 1.)/ZOOM;\n}\n\nbool add_root() {\n    return texelFetch(iChannel1, ivec2(38,1), 0).x > 0.5;\n}\n\nbool rm_root() {\n    return texelFetch(iChannel1, ivec2(40,1), 0).x > 0.5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    ivec2 ifc = ivec2(fragCoord);\n    int nb_roots = nb_root();\n    \n    if(ifc.x == 0 && ifc.y == 0) {\n        \n        if(add_root())\n            nb_roots++;\n        if(rm_root())\n            nb_roots--;\n        \n        fragColor = vec4(float(nb_roots), 0., 0., 0.);\n        return;\n    }\n    \n    int root_id = ifc.x-1;\n    if(ifc.x <= nb_roots) {\n    \n        \n        if(root_id == nb_roots && add_root())\n        {\n            fragColor = vec4(vec2(0.), 0., 0.);\n            return;\n        }\n        \n        vec2 root_pos = get_root(root_id);\n        vec2 mouse_pos = screen2world(iMouse.xy);\n        \n        bool hovered = length(mouse_pos - root_pos) < 0.05;\n        bool selected = iMouse.z>0.5 && hovered;\n        \n        selected = selected || iMouse.z>0.5 && texelFetch(iChannel0, ivec2(root_id+1,0), 0).w > 0.5;\n        \n        if(selected)\n            root_pos = mouse_pos;\n        \n        \n        fragColor = vec4(root_pos, hovered, selected);\n        return;\n    }\n    \n    discard;\n}","name":"Buffer A","description":"","type":"buffer"}]}