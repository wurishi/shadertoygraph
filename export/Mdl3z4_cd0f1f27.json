{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const float kernelWidth = 3.;\nconst float kernelHeight = 3.;\nconst float kernelSize = kernelWidth * kernelHeight;\n\nvec2 getUV(vec2 fragCoord) {\n\treturn vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat kernel[(int(kernelWidth * kernelHeight))];\n\tkernel[0] = -1.;\n\tkernel[1] = -1.;\n\tkernel[2] = -1.;\n\tkernel[3] = -1.;\n\tkernel[4] =  8.;\n\tkernel[5] = -1.;\n\tkernel[6] = -1.;\n\tkernel[7] = -1.;\n\tkernel[8] = -1.;\n\t\n\tvec4 result = vec4(0.);\n\tvec2 uv = getUV(fragCoord);\n\t\n\tfor(float y = 0.; y < kernelHeight; ++y) {\n\t\tfor(float x = 0.; x < kernelWidth; ++x) {\n\t\t\tresult += texture(iChannel0, vec2(uv.x + (float(int(x - kernelWidth / 2.)) / iResolution.x), \n\t\t\t\t\t\t\t\t\t\t\t\tuv.y + (float(int(y - kernelHeight / 2.)) / iResolution.y)))\n\t\t\t\t\t\t\t\t\t\t   * kernel[int(x + (y * kernelWidth))];\n\t\t}\n\t}\n\t\n\tfragColor = result;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mdl3z4","date":"1364580146","viewed":542,"name":"box filter edge detection","username":"danielmarg","description":"simple edge detection","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["boxfilter","edgedetection"],"hasliked":0,"parentid":"","parentname":""}}