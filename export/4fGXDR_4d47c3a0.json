{"ver":"0.1","info":{"id":"4fGXDR","date":"1715010605","viewed":51,"name":"Neighbour cell iteration","username":"mrboggieman","description":"A cheap way of iterating through neighbouring cells by iterating through each axis, every cell is visited only once. Note: distance is not iterated in order since cells can be range between radius -> sqrt(2) * radius. Drag mouse to move center point.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distance","iteration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float mag = 0.0;\n    ivec2 size = ivec2(iResolution.xy);\n    ivec2 pix_pos = ivec2(fragCoord);\n    ivec2 p = ivec2(iResolution.xy / 2.0);\n    \n    if (length(iMouse.y) > 10.0) {\n        p = ivec2(iMouse.xy);\n    }\n    \n    if (pix_pos == p) {\n        // center point\n        mag = 0.0;\n    }\n\n    int max_radius = max(max(p.x, p.y), max(size.x - p.x, size.y - p.y));\n\n    for (int r=1; r<=max_radius; r++) {\n        float col = float(r) / float(max_radius);\n \n        int x = p.x - r;\n        int y = p.y - r;\n        int x2 = p.x + r;\n        int y2 = p.y + r;\n\n        int from_x = max(0, x);\n        int to_x = min(size.x-1, x2);\n\n        int from_y = max(0, y+1);\n        int to_y = min(size.y-1, y2-1);\n        \n        // we can just lookup whether the current point is inside the radius border for this demo\n        if (\n            ((pix_pos.y == y || pix_pos.y == y2) && pix_pos.x >= from_x && pix_pos.x <= to_x)\n            || ((pix_pos.x == x || pix_pos.x == x2) && pix_pos.y >= from_y && pix_pos.y <= to_y)\n        ) {\n            mag += col;\n        }\n        \n        /*\n        // for this demo skip the iteration\n\n        //bottom line\n        if (y >= 0) {\n            if (pix_pos.y == y) {\n                for (int new_x = from_x; new_x <= to_x; new_x++) {\n                    if (pix_pos.x == new_x) {\n                        mag = col;\n                    }\n                }\n            }\n        }\n\n        //left line\n        if (x >= 0) {\n            if (pix_pos.x == x) {\n                for (int new_y = from_y; new_y <= to_y; new_y++) {\n                    if (pix_pos.y == new_y) {\n                        mag = col;\n                    }\n                }\n            }\n        }\n        \n        //top line\n        if (y2 < size.y) {\n            if (pix_pos.y == y) {\n                for (int new_x = from_x; new_x <= to_x; new_x++) {\n                    if (pix_pos.x == new_x) {\n                        mag = col;\n                    }\n                }\n            }\n        }\n\n        //right line\n        if (x2 < size.x) {\n            if (pix_pos.x == x) {\n                for (int new_y = from_y; new_y <= to_y; new_y++) {\n                    if (pix_pos.y == new_y) {\n                        mag = col;\n                    }\n                }\n            }\n        }\n        */\n    }\n\n    fragColor = vec4(vec3(mag), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}