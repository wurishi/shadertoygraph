{"ver":"0.1","info":{"id":"llVfDt","date":"1544599040","viewed":113,"name":"Dartmouth Icon","username":"ShadingKnight","description":"A Dartmouth icon","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\nfloat merge_smooth(float d1, float d2, float k){\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0-h);\n}\nfloat merge(float d1, float d2){\n\treturn min(d1, d2);\n}\nfloat substract(float d1, float d2){\n\treturn max(-d1, d2);\n}\nmat2 rotate(float a){\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\t\n}\nvec2 translate(vec2 p, vec2 t){\n\treturn p - t;\n}\nfloat sdf_circle(vec2 p, float radius){\n\treturn length(p) - radius;\n}\nfloat sdf_triangle(vec2 p, float width, float height){\n\tvec2 n = normalize(vec2(height, width / 2.0));\n\treturn max(\tabs(p).x*n.x + p.y*n.y - (height*n.y), -p.y);\n}\nfloat sdf_rect(vec2 p, vec2 size, float radius){\n\tsize -= vec2(radius);\n\tvec2 d = abs(p) - size;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n}\nbool two_point_in_same_side_of_one_line(vec2 p1, vec2 p2, vec2 start, vec2 end){\n\tvec3 start_to_end = vec3(end, 0.0) - vec3(start, 0.0);\n\tvec3 start_to_p1 = vec3(p1, 0.0) - vec3(start, 0.0);\n\tvec3 start_to_p2 = vec3(p2, 0.0) - vec3(start, 0.0);\n\treturn dot(cross(start_to_end,start_to_p1), cross(start_to_end, start_to_p2)) > 0.0;\n}\nbool point_in_triangle(vec2 p, vec2 a, vec2 b, vec2 c){\n\treturn two_point_in_same_side_of_one_line(p, c, a, b) && two_point_in_same_side_of_one_line(p, b, a, c) && two_point_in_same_side_of_one_line(p, a, b, c); \n}\nfloat udf_line(vec2 p, vec2 start, vec2 end){\n\tvec2 start_to_p = p - start;\n\tvec2 start_to_end = end - start;\n\tvec2 end_to_start = start - end;\n\tvec2 end_to_p = p - end;\n\tif(dot(start_to_p, start_to_end) < 0.0){\n\t\treturn length(start_to_p);\n\t}\n\telse if(dot(end_to_p, end_to_start) < 0.0){\n\t\treturn length(end_to_p);\n\t}\n\telse{\n\t\tvec2 normal = normalize(start_to_end * rotate(PI/2.0));\n\t\treturn abs(dot(normal, start_to_p));\n\t}\n}\nfloat sdf_round_triangle(vec2 p, vec2 a, vec2 b, vec2 c, float r){\n\tfloat dis = min(udf_line(p, a, b), min(udf_line(p, b, c), udf_line(p, a, c)));\n\tbool is_inside = point_in_triangle(p, a, b, c);\n\treturn is_inside? -dis - r: dis - r;\n}\nfloat fill_mask(float dist){\n\treturn clamp(-dist, 0.0, 1.0);\n}\nfloat sdf_leaves(vec2 p){\n\tfloat leaves = sdf_round_triangle(translate(p, vec2(291.9, 105.0)), vec2(2.0, 13.0), vec2(19.0, 7.5), vec2(42.0, 32.0), 2.0);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(277.0, 121.0)), vec2(0.0, 13.5), vec2(11.0, 4.0), vec2(55.0, 23.0), 2.5), leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(270.0, 140.8)), vec2(0.0, 15.8), vec2(7.2, 4.0), vec2(144.0, 25.2), 2.5), leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(272.0, 160.8)), vec2(0.0, 17.8), vec2(3.2, 5.5), vec2(96.0, 12.2), 2.5), leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(276.0, 181.5)), vec2(0.6, 17.8), vec2(3.2, 6.5), vec2(106.0, -2.2), 2.5), leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(284.5, 200.9)), vec2(0.6, 15.8), vec2(3.2, 5.5), vec2(126.0, -22.2), 2.0),leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(293.5, 215.2)), vec2(0.6, 15.8), vec2(0.6, 7.5), vec2(156.0, -45.2), 2.0),leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(303.5, 227.2)), vec2(0.6, 15.8), vec2(0.6, 8.5), vec2(156.0, -62.2), 2.0),leaves);\n\tleaves = merge(sdf_round_triangle(translate(p, vec2(311.8, 235.9)), vec2(0.6, 15.8), vec2(0.6, 11.2), vec2(156.0, -79.2), 2.0),leaves);\n\treturn substract(sdf_rect(translate(p, vec2(425.0, 175.0)), vec2(100.0, 105.0), 0.0), leaves);\n}\nfloat sdf_scene(vec2 p){\n\tfloat circle = sdf_circle(translate(p, vec2(320.0, 180.0)), 150.0);\n\tfloat circle_inner = sdf_circle(translate(p, vec2(320.0, 180.0)), 95.0);\n    float square_left = sdf_rect(translate(p, vec2(282.0, 180.0)), vec2(58.0, 95.0), 30.0);\n\tfloat result = substract(circle_inner, circle);\n\tresult = substract(square_left, result);\n\tfloat square_inner = sdf_rect(translate(p, vec2(230.0, 180.0)), vec2(28.0, 98.0), 20.0);\n\tresult = merge_smooth(square_inner, result, 3.5);\n\tfloat triangle = sdf_triangle(translate(p, vec2(325.0, 60.0)), 22.0, 270.0);\n\tfloat triangle_sub = sdf_triangle(translate(p, vec2(325.0, 253.0)), 22.0, 270.0);\n\tfloat triangle_top = sdf_triangle(translate(p, vec2(325.0, 251.25)), 7.34, 8.7);\n\ttriangle = substract(triangle_sub, triangle);\n\ttriangle = merge(triangle, triangle_top);\n\tresult = merge(triangle, result);\n\tresult = merge(sdf_leaves(p), result);\n\tvec2 mirrored_p = vec2((-p.x + 651.0), p.y);\n\treturn merge(sdf_leaves(mirrored_p), result);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 p = fragCoord.xy + vec2(0.5);\n    p *= 360.0 / iResolution.y;\n\tfloat dist = sdf_scene(p);\n\tfragColor = mix(vec4(1.0), vec4(0.17, 0.41, 0.26, 1.0), fill_mask(dist));\n}","name":"Image","description":"","type":"image"}]}