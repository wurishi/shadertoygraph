{"ver":"0.1","info":{"id":"4ddGW7","date":"1450107013","viewed":487,"name":"007.01[F] Basic Filters","username":"pawsiem","description":"This is mine simple implementation of grayscale, erode, and dilatate.\nHave You any best idea?","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["filters","greyscale","erode","dilatate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec4 drawNormal(sampler2D sampler, vec2 uv){\n    return texture(sampler,uv);\n}\nvec4 drawGrayScale(sampler2D sampler, vec2 uv){\n    vec4 c = drawNormal(sampler,uv);\n    return vec4(vec3(c.r+c.g+c.b)/3.,1.);\n    \n}\n\nvec4 drawErode(sampler2D sampler, vec2 uv, mat3 mask,vec2 s){\n    vec4 c = vec4(1.);\n    if(mask[1][1]==1.)\n   \t\tc = drawNormal(sampler,uv);\n    if(mask[0][1]==1.)\n\t\tc = min(c,drawNormal(sampler,vec2(uv.x-s.x,uv.y)));\n    if(mask[2][1]==1.)\n\t\tc = min(c,drawNormal(sampler,vec2(uv.x+s.x,uv.y)));\n    if(mask[1][0]==1.)\n   \t\tc = min(c,drawNormal(sampler,vec2(uv.x,uv.y - s.y)));\n    if(mask[0][0]==1.)\n\t\tc = min(c,drawNormal(sampler,vec2(uv.x-s.x,uv.y- s.y)));\n    if(mask[2][0]==1.)\n\t\tc = min(c,drawNormal(sampler,vec2(uv.x+s.x,uv.y- s.y)));\n    if(mask[1][2]==1.)\n   \t\tc = min(c,drawNormal(sampler,vec2(uv.x,uv.y + s.y)));\n    if(mask[0][2]==1.)\n\t\tc = min(c,drawNormal(sampler,vec2(uv.x-s.x,uv.y+ s.y)));\n    if(mask[2][2]==1.)\n\t\tc = min(c,drawNormal(sampler,vec2(uv.x+s.x,uv.y+ s.y)));\n    \n    \n    \n   return c;\n}\n\nvec4 drawDilatate(sampler2D sampler, vec2 uv, mat3 mask,vec2 s){\n    vec4 c = vec4(0.);\n    if(mask[1][1]==1.)\n   \t\tc = drawNormal(sampler,uv);\n    if(mask[0][1]==1.)\n\t\tc = max(c,drawNormal(sampler,vec2(uv.x-s.x,uv.y)));\n    if(mask[2][1]==1.)\n\t\tc = max(c,drawNormal(sampler,vec2(uv.x+s.x,uv.y)));\n    if(mask[1][0]==1.)\n   \t\tc = max(c,drawNormal(sampler,vec2(uv.x,uv.y - s.y)));\n    if(mask[0][0]==1.)\n\t\tc = max(c,drawNormal(sampler,vec2(uv.x-s.x,uv.y- s.y)));\n    if(mask[2][0]==1.)\n\t\tc = max(c,drawNormal(sampler,vec2(uv.x+s.x,uv.y- s.y)));\n    if(mask[1][2]==1.)\n   \t\tc = max(c,drawNormal(sampler,vec2(uv.x,uv.y + s.y)));\n    if(mask[0][2]==1.)\n\t\tc = max(c,drawNormal(sampler,vec2(uv.x-s.x,uv.y+ s.y)));\n    if(mask[2][2]==1.)\n\t\tc = max(c,drawNormal(sampler,vec2(uv.x+s.x,uv.y+ s.y)));\n    \n    \n    \n   return c;\n}\nvoid mainImage( out vec4 o, in vec2 p )\n{\n\tp = p / iResolution.xy*2.-1.;\n    \n    if(p.x<0.){ \n        if(p.y<0.)\n    \t\to = drawNormal(iChannel0,p);\n        else\n            o = drawGrayScale(iChannel1,p);\n    }else{\n        if(p.y<0.){\n            p.y+=1.;\n    \t\to = drawErode(iChannel0,p,mat3(1.,1.,1.,1.,1.,1.,1.,1.,1.),1.0/vec2(2.));\n        }else{\n            o = drawDilatate(iChannel0,p,mat3(1.,1.,1.,1.,1.,1.,1.,1.,1.),1.0/vec2(8.));\n        }\n        \n    }\n        \n}","name":"Image","description":"","type":"image"}]}