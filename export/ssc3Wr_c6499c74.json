{"ver":"0.1","info":{"id":"ssc3Wr","date":"1629550170","viewed":406,"name":"nyooooooom","username":"HaleyHalcyon","description":"a","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.14159265358979)\n\n// gives pure saturated color from input [0, 6) for phase\nvec3 hue(float x) {\n    x = mod(x, 6.);\n    return clamp(vec3(\n        abs(x - 3.) - 1.,\n        -abs(x - 2.) + 2.,\n        -abs(x - 4.) + 2.\n    ), 0., 1.);\n}\n\n// does pseudo overexposure filter\nvec3 deepfry(vec3 rgb, float x) {\n    rgb *= x;\n    return rgb + vec3(\n      max(0., rgb.g - 1.) + max(0., rgb.b - 1.),\n      max(0., rgb.b - 1.) + max(0., rgb.r - 1.),\n      max(0., rgb.r - 1.) + max(0., rgb.g - 1.)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = mod(iTime, 6.);\n    // Scales coords so that the diagonals are all dist 1 from center\n    float scale = length(iResolution.xy);\n    vec2 uv = (fragCoord / scale\n\t- (iResolution.xy / scale / 2.)) * 2.;\n    \n    // for wormhole or perspective effect\n    float r = (log(uv.x*uv.x+uv.y*uv.y) + length(uv) * -1.6) * (1.0 + 0.4 * sin(time * PI / 3.));\n    float theta = atan(uv.y, uv.x);\n    \n    \n    // if you want the angle in range [0, 1) and not (-π, π]\n    // divide angle by 2pi and mod1 it\n    // float theta = fract(atan(uv.y, uv.x) / 6.2831853071795);\n\n    // Time varying pixel color\n    vec3 col = deepfry(\n        hue(r * -3. + theta * 6. / PI + time * 3.),\n        1. + 0.5 * sin(r * 1.8 + theta * 1.0 + time * -2. * PI)\n    );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}