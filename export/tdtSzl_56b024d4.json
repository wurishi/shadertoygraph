{"ver":"0.1","info":{"id":"tdtSzl","date":"1572671353","viewed":302,"name":"Kif Kifs","username":"slipperyJed","description":"Adaptation of the KIFS fractal \nKoch Snoflake\nhttps://www.youtube.com/watch?v=il_Qg9AqQkE","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["kipsartofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N(float angle)\n{\n    return vec2(sin(angle), cos(angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Origin is in the middle\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    // Mouse coordinates\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    // Zoom\n    uv *= 1.25;\n    \n    // Translation\n    uv.x = abs(uv.x);\n    uv.y += tan((5./6.)*3.1415)*.5;\n\t\n    \n    vec2 n = N(mouse.x / .8 * 3.1415);\n    float d = dot(uv - vec2(.5, 0), n);\n    \n    // Bend at origin\n    uv -= n * max(0., d) * 2.0;\n    \n    // Visualize the line which we bend over\n    // col += smoothstep(.01, .0, abs(d));\n   \n    float scale = 1.0;\n    uv.x += .5;\n    \n    for(int i = 0; i<5; i++)\n    {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        // uv x shows as red, absolute value mirrors it\n        uv.x = abs(uv.x);\n        // Shift out\n        uv.x -= .5;\n        // Bend at origin\n        uv -= n * min(0., dot(uv, n)) * 2.0;\n    }\n    \n\n    d = length(uv - vec2(clamp(uv.x, -1., 1.), 0));\n    col += smoothstep(1./iResolution.y, .0, d/scale);\n\n    uv /= scale;\n    \n    // Color uv's in red and green\n    // col.rg += uv / scale;\n    \n    col += texture(iChannel0, uv * 2. + iTime*.03).rgb;\n    col -= texture(iChannel1, uv * 2. + iTime*.03).rgb;\n\t\n   \n    // Output to Screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}