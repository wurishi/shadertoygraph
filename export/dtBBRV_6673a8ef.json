{"ver":"0.1","info":{"id":"dtBBRV","date":"1694230196","viewed":21,"name":"mandelbrot gpt 2","username":"dieku","description":"The zoom function not is that i want but works XD, and the colors are ok","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void zoomController(inout vec2 p)\n{\n    // Calcular el zoom basado en la posición del mouse\n    float zoomFactor = 1.0 + 0.1 * length(iMouse.xy - iResolution.xy / 2.0);\n\n    // Ajustar el centro del zoom basado en la posición del mouse\n    vec2 zoomCenter = vec2(iMouse.x / iResolution.x, iMouse.y / iResolution.y);\n\n    // Aplicar el zoom y el desplazamiento\n    p = (p - zoomCenter) / zoomFactor + zoomCenter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Escala y desplazamiento para el conjunto de Mandelbrot\n    vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n    \n    // Llamar a la función zoomController para aplicar el zoom y el desplazamiento\n    zoomController(p);\n    vec2 z = p;\n    \n    // Iteraciones máximas y factor de escape\n    int iter = 0;\n    int maxIter = 700;\n    float escape = 4.0;\n    \n    // Calculamos el conjunto de Mandelbrot\n    while(iter < maxIter && dot(z, z) < escape)\n    {\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + p;\n        iter++;\n    }\n    \n    // Asignamos un color basado en el número de iteraciones\n    float hue = float(iter) / float(maxIter) ;\n    fragColor = vec4(hue, 0.5, 0.7, 1.0);\n}","name":"Image","description":"","type":"image"}]}