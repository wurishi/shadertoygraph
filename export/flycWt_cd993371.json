{"ver":"0.1","info":{"id":"flycWt","date":"1662417200","viewed":142,"name":"Overlapping fractal","username":"tk87","description":"This is a naive implementation.\nIs there a way to achieve overlap more effectively?","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\nconst float SQ2 = 1.4142;\n\nmat2 rotate2D(float r){\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nvec3 square(vec2 p, float r, float s) {\n    vec3 col = vec3(0);\n    vec2 q = abs(p) - r;\n    col += smoothstep(.01/s, .0, length(max(q,.0)+min(max(q.x,q.y),.0)));\n    q = step(abs(p), vec2(r,r));\n    col += q.x * q.y * .3;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    float t = iTime * .5;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    vec2 uv = 2.0 * (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec3 col = vec3(0);\n    \n        vec3 red = vec3(.7,.2,0), green = vec3(0,.6,0);\n    for(int j=0;j<1<<4;++j){\n        vec2 p = uv, q;\n        p.y+=.7;\n        float r = .2, scale = 1.;\n        for(int i=0;i<9;++i){\n            if(i>=4||(j>>i)==0){\n                col += square(p, r, scale) * mix(red, green, float(i)/8.);\n            }\n            \n            float angle = fract(t*.3)*PI, a2 = PI*.25;\n            q=p;\n\n\n            if(i<4&&(j>>i&1)==1||i>=4&&q.x/r<cos(angle)){\n                float rot = -angle*.5, s = cos(rot);\n                q.y -= r + r*s*sin(a2-rot)*SQ2;\n                q.x += r - r*s*cos(a2-rot)*SQ2;\n                q *= rotate2D(-rot);\n                scale *= s;\n                q/= s;\n            }\n            else{\n                float rot = -PI*.5 + angle*.5, s = cos(rot);\n                q.y -= r + r*s*sin(a2-rot)*SQ2;\n                q.x -= r - r*s*cos(a2-rot)*SQ2;\n                q *= rotate2D(rot);\n                scale *= s;\n                q/= s;\n            }\n            p=q;\n        }\n    }\n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}