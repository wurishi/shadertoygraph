{"ver":"0.1","info":{"id":"MXc3D4","date":"1716778625","viewed":58,"name":"The Floors of El Dorado ","username":"mrbobasan","description":"I would imagine this is what the floors of el dorado looked like. Maybe the pool.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265\n\n\n#define cx_mul(a, b) vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y)),((a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y)))\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\n// https://hturan.com/writing/complex-numbers-glsl\n\nvec2 as_polar(vec2 z) {\n  return vec2(\n    length(z),\n    atan(z.y, z.x)\n  );\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    vec2 polar = as_polar(a);\n    float rpart = polar.x;\n    float ipart = polar.y;\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_pow(vec2 v, float p) {\n  vec2 z = as_polar(v);\n  return pow(z.x, p) * vec2(cos(z.y * p), sin(z.y * p));\n}\n\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos(2.*PI*(c*t+d));\n}\n\n\n// Define our points\nvec2 a0 = vec2(0.32, -0.45);\nvec2 a1 = vec2(-0.49, -0.32);\nvec2 a2 = vec2(-0.31, 0.38);\nvec2 a3 = vec2(-0.12, 0.04);\n\nvec2 b0 = vec2(-0.71, 0.53);\nvec2 b1 = vec2(0.01, 0.23);\nvec2 b2 = vec2(-0.24, 0.31);\nvec2 b3 = vec2(-0.01, -0.42);\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    vec2 z = uv  * 3.;\n  \n  \n    float angle = sin(iTime/2.) * 2. * PI;\n    float length = 1.5;\n    \n    /*\n    \n    vec2 polyA = a0\n      + cx_mul(a1, vec2(cos(iTime + z) * 6.))\n      + cx_mul(a2, vec2(cos(iTime + z)* 2.))\n      + cx_mul(a3, cx_pow(z, 2.0));\n\n    // Calculate the sum of our second polynomial\n    vec2 polyB = b0\n      + cx_mul(b1, vec2(sin(iTime + z)))\n      + cx_mul(b2, vec2(tan(iTime + z)))\n      + cx_mul(b3, cx_pow(z, 2.));\n      \n      */\n      \n      // Calculate the sum of our first polynomial\n    vec2 polyA = a0\n        + cx_mul(vec2(sin(a1+iTime) * z * 5.), vec2(sin(a1*3. * cos(a1 + z + iTime) * 5. )))\n        + cx_mul(vec2(cos(a2+iTime) * z * 2.), vec2(cos(a2*2. + iTime)))\n        + cx_mul(a3, cx_pow(z, 6.0));\n\n\n    // Calculate the sum of our second polynomial\n   \n    vec2 polyB = b0\n        + cx_mul(vec2(sin(b1+iTime) * z), vec2(tan(10. * cos( z + iTime) )))\n        + cx_mul(vec2(sin(b2+iTime) * z), vec2(tan(a2*3. + iTime + z  )))\n        + cx_mul(vec2(cos(b3+iTime) * z), cx_pow(z, 2.0));\n     \n    vec2 result = cx_div(polyA, polyB);\n\n    float imaginary = cx_log(result).x * cx_log(result).y  ;\n    float x = (imaginary / PI);\n\n   \n    float a = 1.0;\n    vec4 col = vec4(pal(x, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25)  ), 1.0);\n\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}