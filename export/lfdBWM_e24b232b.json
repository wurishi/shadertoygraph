{"ver":"0.1","info":{"id":"lfdBWM","date":"1733179213","viewed":30,"name":"honeycomb spiral","username":"bombblob","description":"spinning honeycomb effect","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lines","spiral","illusion","trippy","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize UV coordinates to range [-1, 1]\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; // Correct aspect ratio\n\n    // Parameters\n    float halfLines = 5.0; // Number of radial lines\n    float time = iTime; // Time for animation\n    float spinSpeed = 0.75; // Speed of rotation\n    float numBands = 10.0;\n    float bandStep = 1.0 / numBands; // Size of each rotating section\n    float spiralFactor = 3.0; // Controls the amount of spiral\n    float groupSize = 2.5;\n    float groupOffset = 0.25;\n\n    // Compute distance and angle from center\n    float distance = length(uv);\n    float angle = atan(uv.y, uv.x);\n\n    // Add spiral effect for white lines\n    float angleWhite = angle + distance * spiralFactor;\n\n    // Add spiral effect for black lines (opposite direction)\n    float angleBlack = angle - distance * spiralFactor;\n\n    // Determine band index and adjust rotation\n    float bandIndex = groupSize + floor(distance / bandStep);\n    float speedAdjust = mod(bandIndex, groupSize) * (groupOffset / groupSize) + 1.0; // Alternate speeds\n    float groupIndex = floor(bandIndex / groupSize);\n    speedAdjust += modf(groupIndex, groupSize) * (groupOffset / groupSize);\n    float rotation = speedAdjust * time * spinSpeed;\n\n    // Apply rotation\n    angleWhite += rotation;\n    angleBlack += rotation;\n\n    // Create line patterns\n    float linePatternWhite = abs(sin(angleWhite * halfLines));\n    float linePatternBlack = abs(sin(angleBlack * halfLines));\n    float radialFade = smoothstep(0.00005, 0.1, distance);\n\n    // Calculate intensities\n    float intensityWhite = radialFade * smoothstep(0.6, 0.9, linePatternWhite);\n    float intensityBlack = radialFade * smoothstep(0.6, 0.9, linePatternBlack);\n\n    // Combine white and black lines\n    float combinedIntensity = intensityWhite - intensityBlack;\n\n    // Output color\n    vec3 color = vec3(combinedIntensity); // White and black lines\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}