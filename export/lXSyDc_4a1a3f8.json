{"ver":"0.1","info":{"id":"lXSyDc","date":"1727797063","viewed":13,"name":"Black Hole by Ray March technic","username":"Handolf","description":"Black Hole!!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SAMPLES_COUNT 300\n#define STEP_SEIZE 0.005\n#define EPSILON 0.01\n#define PI 3.14\n\n//by:https://iquilezles.org/articles/distfunctions/\nfloat sdf_torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\nfloat sphere_sdf(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat scene_sdf(vec3 p)\n{\n    //view\n    vec3 view_rot = vec3 (0.5 * iTime, 0.0, 0.0);\n    mat4 view = mat4(\n        vec4(1.0,   0.0,     0.0,                    0.0),\n        vec4(0.0, cos(view_rot.x), -sin(view_rot.x), 0.0),\n        vec4(0.0, sin(view_rot.x),  cos(view_rot.x), 0.0),\n        vec4(0.0,   0.0,     0.0,                    1.0)\n    );\n    view = mat4(\n        vec4( cos(view_rot.y), 0.0, sin(view_rot.y), 0.0),\n        vec4(            0.0, 1.0,              0.0, 0.0),\n        vec4(-sin(view_rot.y), 0.0, cos(view_rot.y), 0.0),\n        vec4(            0.0, 0.0,              0.0, 1.0)\n    ) * view;\n    view = mat4(\n        vec4(cos(view_rot.y), -sin(view_rot.y), 0.0, 0.0),\n        vec4(sin(view_rot.y),  cos(view_rot.y), 0.0, 0.0),\n        vec4(           0.0, 0.0,               1.0, 0.0),\n        vec4(           0.0, 0.0,               0.0, 1.0)\n    ) * view;\n    \n    //rotate\n    p = (vec4(p, 1.0) * view).xyz;\n    \n    //scale\n    p *= vec3(1.0, 6.0, 1.0);\n    \n    return sdf_torus(p, vec2(0.2, 0.08));\n}\n\nvec3 march(vec3 r_o, vec3 r_d)\n{\n    float sdf_dist = 0.0;\n    \n    for(int i = 0; i < SAMPLES_COUNT; i++)\n    {\n        //black hole\n        if (length(r_o) < 0.065)\n        return vec3(0.0);\n        \n        //disk\n        sdf_dist = scene_sdf(r_o); \n        if(sdf_dist < EPSILON)\n        return mix(\n            vec3(1.0),\n            vec3(0.8, 0.9, 1.0),\n            pow(length(r_o)*7.0, 4.0)\n        );\n        \n        //gravity lens\n        //MRB disable\n        if(iMouse.z < 1.0)\n        {\n            vec3 pos = r_o;\n            pos += r_d * STEP_SEIZE;\n            pos += ( (0.00001) / length(pos)) * normalize(-pos);\n            r_d = normalize(pos - r_o);\n        }\n        \n        r_o += r_d * STEP_SEIZE;\n    }\n    \n    //background\n    return vec3(0.0, 0.0, 0.09);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect_raito = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.y;\n    \n    //centralized uv\n    uv -= vec2(0.5 - (1.-aspect_raito) * 0.5, 0.5);\n    \n    vec3 r_o = vec3(0.0, 0.0, -1.0);\n    vec3 r_d = normalize(vec3(uv, 0.0) - r_o);\n    \n    //ray march\n    vec3 col = march(r_o, r_d);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}