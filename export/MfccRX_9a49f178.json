{"ver":"0.1","info":{"id":"MfccRX","date":"1730942082","viewed":22,"name":"Mandelbrot Set simple","username":"zcedar","description":"From: https://physicspython.wordpress.com/2020/02/16/visualizing-the-mandelbrot-set-using-opengl-part-1/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERATIONS 500\nfloat center_x = 0.;\nfloat center_y = 0.;\n \nint get_iterations(vec2 uv, float zoom)\n{\n    //float real = ((gl_FragCoord.x / 1080.0 - 0.5) * zoom + center_x) * 5.0;\n    //float imag = ((gl_FragCoord.y / 1080.0 - 0.5) * zoom + center_y) * 5.0;\n\t\n\tfloat real = ((uv.x - 0.5) * zoom + center_x) * 5.0;\n    float imag = ((uv.y - 0.5) * zoom + center_y) * 5.0;\n \n    int iterations = 0;\n    float const_real = real;\n    float const_imag = imag;\n \n    while (iterations < MAX_ITERATIONS)\n    {\n        float tmp_real = real;\n        real = (real * real - imag * imag) + const_real;\n        imag = (2.0 * tmp_real * imag) + const_imag;\n         \n        float dist = real * real + imag * imag;\n         \n        if (dist > 4.0)\n        break;\n \n        ++iterations;\n    }\n    return iterations;\n}\n \nvec4 return_color(vec2 uv, float zoom)\n{\n    int iter = get_iterations(uv, zoom);\n    if (iter == MAX_ITERATIONS)\n    {\n        gl_FragDepth = 0.0;\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    }\n \n    float iterations = float(iter) / float(MAX_ITERATIONS);    \n    return vec4(0.0, iterations, 0.0f, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =  ( fragCoord - .5 ) /iResolution.y; //fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = return_color(uv, 1.0).xyz * 10.0;//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}