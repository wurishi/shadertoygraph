{"ver":"0.1","info":{"id":"ssdBWB","date":"1657490902","viewed":81,"name":"First shader for learning","username":"bagidea","description":"First shader, Just a simple shader.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["helloworld"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // define aspect ratio value\n    float aspect = iResolution.y / iResolution.x;\n    \n    // Setting screen\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5f;\n    uv.x *= aspect;\n    \n    // calculate pixel as a percent\n    vec2 percent = fragCoord/iResolution.xy;\n    percent -= vec2(0.5f, 0.5f);\n    percent.x /= aspect;\n    \n    // get the circle instance grid cell\n    vec2 instanceCell = floor(percent / 0.3f);\n    \n    // repeat the circle\n    percent = mod(percent, 0.3f);\n    \n    // calculate radius\n    float radiusPercent = ((sin(instanceCell.x * 64.0f) + cos(instanceCell.y * 512.0f)) + 2.0f) / 4.0f;\n    float radius = mix(0.05f, 0.12f, radiusPercent);\n\n    // calculate distance of pixel from circle\n    float dist = length(percent - vec2(0.15f, 0.15f)) - (radius * (abs(cos(iTime * 3.0f)) + 0.2f));\n    \n    // output final color\n    /*if(dist < 0.0f)\n        fragColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n    else\n        fragColor = vec4(0.0f, 0.0f, 1.0f, 1.0f);*/ \n      \n    // calculate shade of circle based on distance and smooth it out for aliasing.\n    float s = smoothstep(0.0f, 0.005f, dist);\n    \n    // smooth step maual not perfect\n    //float s = dist < 0.0f ? 0.0f : 1.0f;\n    \n    // output final color after used smooth step\n    //fragColor = vec4(s, s, s, 1.0f);\n    \n    // calculate color\n    vec3 color = vec3(\n        mod(abs(instanceCell.x) * 1024.0f, 10.0f) / 10.0f * (1.0f - cos(iTime)),\n        mod(abs(instanceCell.y) * 1024.0f, 10.0f) / 10.0f * cos(iTime * 2.0f),\n        mod(abs(instanceCell.x * instanceCell.y + 3.0f) * 1024.0f, 10.0f) / 10.0f * cos(iTime * 5.0f)\n    );\n    \n    // make the actual color\n    color = mix(\n        color,\n        vec3(\n            instanceCell.x * sin(iTime) * uv.y,\n            instanceCell.y * cos(iTime * 5.0f) * 0.2f,\n            (instanceCell.x * instanceCell.y) * cos(iTime * 10.0f) * uv.x * uv.y),\n        s\n    );\n    \n    color += uv.x * uv.y;\n    \n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"}]}