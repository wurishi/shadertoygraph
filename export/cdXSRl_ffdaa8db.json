{"ver":"0.1","info":{"id":"cdXSRl","date":"1669356250","viewed":86,"name":"Newton Fractal - cdolghier","username":"virvan","description":"Newton Fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"dsXSDM","parentname":"Voronoi-cdolghier"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Source {\n  vec2 pos;\n  vec3 color;\n};\n\nvec2 noisify(in vec2 coord, float speed)\n{\n  return coord + vec2(sin(iTime*6.0*speed) / 1135.0, sin(iTime * 6.0*speed) / 1135.0);\n}\n\nvec3 noisify(in vec3 coord, float speed)\n{\n  return coord + vec3(sin(iTime*6.0*speed) / 1135.0, sin(iTime * 6.0*speed) / 1135.0, sin(iTime * 6.0*speed) / 1135.0);\n}\n\nfloat square(in float v)\n{\n  return v * v;\n}\n\nvec2 translateToUniformCoos(in vec2 v)\n{\n  float m = max(iResolution.x, iResolution.x);\n  vec2 uv = vec2(0.5) + (v - 0.5* vec2(iResolution.x, iResolution.y)) / m; \n  return uv;\n}\n \n#define N 7\n#define ITERATIONS 100\n#define EPSILON 0.000003\n\nvec2 mul(in vec2 a, in vec2 b)\n{\n  return vec2(a.x*b.x - a.y * b.y, a.y*b.x + a.x*b.y);\n}\n\nvec2 div(in vec2 a, in vec2 b)\n{\n  float sqm = dot(b, b);\n  return vec2((a.x*b.x + a.y*b.y) / sqm, (a.y*b.x - a.x*b.y) / sqm);\n}\n\nvec2 newton(in vec2 pos, in Source[N] roots)\n{\n  vec2 prod = pos - roots[0].pos;\n  for(int i = 1; i < N; i++)\n  {\n       prod = mul(prod, pos - roots[i].pos);\n  }\n  int iter = ITERATIONS;\n  vec2 vn = pos;\n  while (iter > 0 && (dot(vn, vn) > EPSILON))\n  {\n    vec2 deriv = vec2(0, 0);\n    for(int i = 0; i < N; i++)\n    {\n      deriv = deriv + div(prod, pos - roots[i].pos);\n    }\n    \n    vn = vn - div(prod, deriv);\n    iter --;\n  }\n  return vn;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    Source[N] sources = Source[N](\n        Source(noisify(vec2(0.75, 0.65), 0.6), vec3(1.0, 0.0, 0.0)),\n        Source(noisify(vec2(0.25, 0.35), 1.1), vec3(0.0, 1.0, 0.0)),\n        Source(noisify(vec2(0.85, 0.4), 0.35), vec3(0.0, 0.0, 1.0)),\n        Source(noisify(vec2(0.25, 0.6), 0.45), vec3(0.0, 1.0, 1.0)),\n        Source(noisify(vec2(0.15, 0.3), 0.65), vec3(1.0, 1.0, 0.0)),\n        Source(noisify(vec2(0.35, 0.5), 0.65), vec3(1.0, 0.0, 1.0)),\n        Source(noisify(translateToUniformCoos(iMouse.xy), 0.65), vec3(0.7, 0.9, 0.6))\n    );\n\n    vec2 startingPoint = translateToUniformCoos(fragCoord);\n    vec2 uv = newton(startingPoint, sources);\n    \n    int closest = -1;\n    float minDistance = 99999999.9;\n    for(int i = 0; i < N; i++) {\n      vec2 delta = uv - sources[i].pos;\n      float squareDistance = dot(delta, delta);\n      if (squareDistance < minDistance)\n      {\n          minDistance = squareDistance;\n          closest = i;\n      }\n    }\n        \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(sources[closest].color,1.0);\n}","name":"Image","description":"","type":"image"}]}