{"ver":"0.1","info":{"id":"dtySzV","date":"1686321245","viewed":82,"name":"Wonky Sand Physics","username":"BerryArray","description":"Use the mouse to place sand, or remove it if you put it in sand.\n(the removal \"feature\" is unintentional: the code is so bad I don't even know why it's happening!)\n\n(PS: don't touch the top border: it's also broken!)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["sandbox","physics","sand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Just shows buffer A to screen.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n\n  vec3 col = texture(iChannel0, uv).rgb;\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A is for storing last frame and adding sand from mouse.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    \n    if (distance(fragCoord, iMouse.xy) < 10.0) {\n        col = vec3(1.0);\n    }\n    \n    col += texture(iChannel0, uv).rgb;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B is for the janky physics logic.\n// Somewhere here I messed up.\n\nvec3 empty = vec3(0.0);\nvec3 filled = vec3(1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord/iResolution.xy;\n    bool isFilled = texture(iChannel0, UV).rgb == filled;\n    \n    if (isFilled) {\n        //if at bottom of screen\n            //stay filled\n        if (fragCoord.y == 0.5) {\n            fragColor = vec4(filled, 1.0);\n            return;\n        }\n        //if down empty\n            //become empty\n        if (texture(iChannel0, (fragCoord - vec2(0.0, 1.0))/iResolution.xy).rgb != filled) {\n            fragColor = vec4(empty, 1.0);\n            return;\n        }\n        //if downright empty and right empty\n            //become empty\n        if (texture(iChannel0, (fragCoord - vec2(1.0, 1.0))/iResolution.xy).rgb != filled && \n            texture(iChannel0, (fragCoord - vec2(1.0, 0.0))/iResolution.xy).rgb != filled) {\n            fragColor = vec4(empty, 1.0);\n            return;\n        }\n        //else if downleft empty and left empty and (2left empty or 2left1down empty)\n            //become empty\n        if (texture(iChannel0, (fragCoord - vec2(-1.0, 1.0))/iResolution.xy).rgb != filled && \n            texture(iChannel0, (fragCoord - vec2(-1.0, 0.0))/iResolution.xy).rgb != filled &&\n            (texture(iChannel0, (fragCoord - vec2(-2.0, 0.0))/iResolution.xy).rgb != filled ||\n             texture(iChannel0, (fragCoord - vec2(-2.0, 1.0))/iResolution.xy).rgb != filled)) {\n            fragColor = vec4(empty, 1.0);\n            return;\n        }\n        //else\n            //stay filled\n        else {\n            fragColor = vec4(filled, 1.0);\n            return;\n        }\n    }\n    //else\n    else {\n        //if up filled\n            //become filled\n        if (texture(iChannel0, (fragCoord - vec2(0.0, -1.0))/iResolution.xy).rgb == filled) {\n            fragColor = vec4(filled, 1.0);\n            return;\n        }\n        //if upleft filled and left filled\n            //become filled\n        if (texture(iChannel0, (fragCoord - vec2(-1.0, -1.0))/iResolution.xy).rgb == filled &&\n            texture(iChannel0, (fragCoord - vec2(-1.0, 0.0))/iResolution.xy).rgb == filled) {\n            fragColor = vec4(filled, 1.0);\n            return;\n        }\n        //if upright filled and right filled and 2right filled\n            //become filled\n        if (texture(iChannel0, (fragCoord - vec2(1.0, -1.0))/iResolution.xy).rgb == filled &&\n            texture(iChannel0, (fragCoord - vec2(1.0, 0.0))/iResolution.xy).rgb == filled &&\n            texture(iChannel0, (fragCoord - vec2(2.0, 0.0))/iResolution.xy).rgb == filled) {\n            fragColor = vec4(filled, 1.0);\n            return;\n        }\n        //else\n            //stay empty\n        else {\n            fragColor = vec4(empty, 1.0);\n            return;\n        }\n    }\n    \n    fragColor = vec4(empty, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}