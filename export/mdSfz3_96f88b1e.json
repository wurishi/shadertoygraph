{"ver":"0.1","info":{"id":"mdSfz3","date":"1689943407","viewed":50,"name":"Fire And Mars","username":"luhongdi","description":"The first attempt to make a flame with noise was very low  \nThe great perilin","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","fire","simplexnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define NUM_OCTAVES 5\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n//this noise function from https://thebookofshaders.com/edit.php#11/iching-03.frag\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                     + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nfloat noise_sum_abs(vec2 p,float f)\n{\n    p = p * 2.0;\n    f += 1.0000 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.5000 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.2500 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.1250 * abs(snoise(p)); p = 2.0 * p;\n    f += 0.0625 * abs(snoise(p)); p = 2.0 * p;\n\n    return f;\n}\n\nfloat noise_sum(vec2 p,float f)\n{\n    p = p * 2.0;\n    f += 1.0000 * (snoise(p)); p = 2.0 * p;\n    f += 0.5000 * (snoise(p)); p = 2.0 * p;\n    f += 0.2500 * (snoise(p)); p = 2.0 * p;\n    f += 0.1250 * (snoise(p)); p = 2.0 * p;\n    f += 0.0625 * (snoise(p)); p = 2.0 * p;\n\n    return f;\n}\nfloat noise_sum0_1(vec2 p,float f)\n{\n    p = p * 2.0;\n    f += 1.0000 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.5000 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.2500 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.1250 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n    f += 0.0625 * 0.5*(snoise(p)+1.0); p = 2.0 * p;\n\n    return f;\n}\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    \n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * (snoise(_st)+1.0)*0.5;\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\nfloat fbmnormal ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(00.0);\n\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * (snoise(_st)+1.0)*0.5;\n        _st =  _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 st =uv*vec2(10.0,8.0);\n    float u_time=iTime;\n    float time=2.5*u_time;\n    vec2 Orig_Point=vec2(5.0,5.0);\n    vec2 New_st=st-Orig_Point;\n\n \t vec3 color ;\n    \n    float noisestvalue1=noise_sum(vec2(New_st.x-0.0*sin(time),New_st.y-0.3*time),0.0);\n    float noisestvalue12=noise_sum0_1(vec2(New_st.x-0.0*sin(time),New_st.y-0.6*time),0.0);\n    float noisestvalue2=noise_sum_abs(vec2(New_st.x-0.0*sin(time),New_st.y-0.5*time),0.0);\n    float noisestvalue3=fbm(vec2(New_st.x-0.0*sin(time),New_st.y-0.6*time));\n    float noisestvalue32=fbmnormal(vec2(New_st.x-0.0*sin(time),New_st.y-0.6*time));\n    float noisestvalue=noisestvalue3;\n    \n    float totalnoise=smoothstep(0.3,0.5,noisestvalue);\n    float totalnoisestep=step(1.0,noisestvalue1);\n    float circler=0.8+(0.2+1.0*noisestvalue12)*cos(atan(New_st.y,New_st.x)*(.0+0.0*noisestvalue1)-2.5*New_st.x+0.15*totalnoise*noisestvalue12*sin(10.0*st.y+time));\n    \n    float circler1 =0.43+(0.2)*cos(atan(New_st.y,New_st.x)*(0.3+0.3*noisestvalue1)-7.7*New_st.x);\n    \n    \n    float circle=smoothstep(circler,circler+0.05,length(New_st));    \n    float circle1=smoothstep(circler1,circler1+0.05,length(vec2(New_st.x,New_st.y+1.8)));\n    circle*=circle1;\n    \n     vec2 q = vec2(0.);\n    q.x = fbm( New_st - 0.30*u_time);\n    q.y = fbm( New_st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( New_st + 2.0*q + vec2(1.7,9.2)+ 0.25*u_time );\n    r.y = fbm( New_st + 1.0*q + vec2(8.3,2.8)+ 0.126*u_time);\n\n    float f = fbm(New_st+r);\n    \n    float bb=totalnoisestep;\n\n    float uuu=9.4;\n    color = mix(vec3(0.660,0.667,0.175),\n                vec3(0.646,0.040,0.668),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(sin(0.1*uuu),cos(0.2*uuu),sin(0.5*uuu)),\n                clamp(length(r.x),0.0,1.0));\n\n    color=mix(vec3(0.970,0.568,0.130),color,clamp(length(vec2(New_st.x,New_st.y+1.7)),1.0,1.0));\n    circle=1.0-circle;\n\n\n    color = color*circle;\n\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}