{"ver":"0.1","info":{"id":"tsB3Wd","date":"1550269683","viewed":152,"name":"Raymarch light test","username":"darkeclipz","description":"Raymarch light test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarchlighttest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define MaxSteps 64.\n#define MinDistance 0.01\n#define eps 0.001\n#define Iterations 32.\n#define speed iTime\n#define M ((2.*iMouse.xy-R)/R.y*4.)\n\n#define red vec3(227./255., 10./255., 4./255.)\n#define yellow vec3(250./255., 100./255., 1./255.)\n#define salmon vec3(1., 227./255., 161./255.)\n#define blue vec3(163./255.,228./255.,1.)\nmat2 r2(float angle) { return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); }\nmat3 rotateY(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c, 0, -s, 0, 1, 0, s, 0, c);\n}\n\nmat3 rotateZ(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\n// from IQ\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos(6.28318 * (c*t + d));\n}\n\n// from IQ\nfloat sdCircle(vec2 p, float r) {\n\treturn length(p) - r;    \n}\n\n// from IQ\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec2 T(vec2 p) {\n\n    vec4 w = texture( iChannel0, vec2(15./256.,0.1));\n    vec4 w2 = texture( iChannel0, vec2(150./256.,0.1));\n    float s = 0.0006 + 0.0005 * cos(iTime/2.);\n    for(float i=0.; i < Iterations; i++) {\n    \tp = abs(p) - s - i/Iterations; \n        p *= r2(3.1415*fract(iTime / 20.) + w.x/4.);\n        p *= (i/Iterations*.4 + 1.);\n    }\n    \n    return p;\n}\n\nfloat kaleidoscope(vec2 p) {\n\tfloat d = sdCircle(T(p), 0.5);\n    return d;\n}\n\n// from IQ\nfloat sdSphere(vec3 p, float r) { return length(p) - r; }\nfloat sdYPlane(vec3 p, float y) { return p.y - y; }\n\n// from IQ\nfloat sdBox(vec3 p, vec3 b) { \n\tvec3 d = abs(p) - b;\n    return length(max(d,0.0));\n}\n\nvec3 map(vec3 p) {\n    //mat3 rot = rotateZ(0.13*p.z);\n    //p *= rot;\n    float x = fract(p.x) - 0.5;\n    float z = fract(p.z) - 0.5;\n    return vec3(x, p.y, z);\n}\n\n// Smooth min function from IQ\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smoothstep2(float a, float b, float w, float v) {\n\treturn smoothstep(a-w, a, v) - smoothstep(b, b+w, v);\n}\n\nfloat scale = .3;\nvec2 scene(vec3 p) {\n    p = map(p);\n    \n    float sphere = sdSphere(p, scale);\n    \n    float width = .4;\n    float t = fract(iTime / 4.);\n    float anim = smoothstep(0., width, t) - smoothstep(width, 1., t);\n    \n    float box = sdBox(p, vec3(.15 + 0.2 * anim));\n    sphere = smin(sphere, box, .15);\n    float plane = sdPlane(p, vec4(0., 1., 0., scale));\n    int id = 0;\n    if(sphere > plane) id = 1;\n    return vec2(min(sphere, plane), id);\n}\n\nfloat shadowScene(vec3 p){\n    p = map(p);\n    float sphere = sdSphere(p, scale);\n    \n    float width = .4;\n    float t = fract(iTime / 4.);\n    float anim = smoothstep(0., width, t) - smoothstep(width, 1., t);\n    \n    float box = sdBox(p, vec3(.15 + 0.2 * anim));\n    sphere = smin(sphere, box, .15);\n    sphere = smin(sphere, box, .15);\n    \n\treturn sphere;\n}\n\nvec3 calcNormal(vec3 p) {\n    float h = 0.0001;\n    vec2 k = vec2(1,-1);\n    vec3 n = normalize( k.xyy*scene( p + k.xyy*h ).x + \n                  k.yyx*scene( p + k.yyx*h ).x + \n                  k.yxy*scene( p + k.yxy*h ).x + \n                  k.xxx*scene( p + k.xxx*h ).x );    \n    return n;\n}\n    \nvec3 march(vec3 ro, vec3 rd) {\n    float t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        vec2 hit = scene(p);\n        float dt = hit.x;\n        float id = hit.y;\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn vec3(t-MinDistance, id, 1.-i/MaxSteps);  \n        }\n    }\n    return vec3(0.);\n}\n\nfloat marchShadow(vec3 ro, vec3 rd) {\n\tfloat t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        float dt = shadowScene(p);\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn t-MinDistance;    \n        }\n    }\n    return 0.;\n}\n\n// https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\nvec3 shadeBlinnPhong(vec3 p, vec3 viewDir, vec3 normal, vec3 lightPos, float lightPower, vec3 lightColor) {\n    vec3 diffuseColor = vec3(0.5);\n    vec3 specColor = vec3(1);\n    float shininess = 32.;\n\n    vec3 lightDir = lightPos - p;\n    float dist = length(lightDir);\n    dist = dist*dist;\n    lightDir = normalize(lightDir);\n    \n    float lambertian = max(dot(lightDir, normal), 0.0);\n    float specular = .0;\n    \n    if(lambertian > 0.) {\n        viewDir = normalize(-viewDir);\n        \n        vec3 halfDir = normalize(viewDir + lightDir);\n        float specAngle = max(dot(halfDir, normal), .0);\n        specular = pow(specAngle, shininess);\n    }\n    \n    vec3 color = /*ambientColor +*/\n                 diffuseColor * lambertian * lightColor * lightPower / dist +\n        \t\t specColor * specular * lightColor * lightPower / dist;\n    \n   \treturn color;\n}\n\nvec3 light(vec3 p, vec3 sn, vec3 rd) {\n    //vec4 w1 = texture( iChannel0, vec2(10./256.,0.1));\n    //vec4 w2 = texture( iChannel0, vec2(75./256.,0.1));\n    //vec4 w3 = texture( iChannel0, vec2(150./256.,0.1));\n    //vec4 w4 = texture( iChannel0, vec2(220./256.,0.1));\n    \n    float t1 = cos(iTime / 2.);\n    float t2 = cos(iTime / 3. + .5);\n    float t3 = cos(iTime / 4. + 1.5);\n    float t4 = cos(iTime / 2. + 1.);\n    float t5 = cos(iTime / 2. + 2.);\n    \n    mat3 rotY = rotateY(iTime);\n    vec3 col1 = cos(vec3(0,2,4) + iTime);\n    vec3 col2 = cos(vec3(0,2,4) + iTime + .25);\n    vec3 L1 = shadeBlinnPhong(p, rd, sn, vec3(1,.10,0) + vec3(0,0,3) * t1, 1., vec3(.9,.1,.1));\n    vec3 L2 = shadeBlinnPhong(p, rd, sn, vec3(2,.10,1) + vec3(0,3,0) * t2, 1., vec3(.9, .4, .4));\n    vec3 L3 = shadeBlinnPhong(p, rd, sn, vec3(3,.10,1) + vec3(3,0,0) * t3, 1., vec3(.1,.1,.9));\n    vec3 L4 = shadeBlinnPhong(p, rd, sn, vec3(2,.10,2) + vec3(0,0,3) * t4, 1., vec3(.9));\n    vec3 L5 = shadeBlinnPhong(p, rd, sn, vec3(3,.10,3) + vec3(0,3,0) * t5, 1., col2);\n    \n    vec3 top = shadeBlinnPhong(p, rd, sn, vec3(0,5,0), 25., vec3(.9));\n    \n    vec3 ambient = vec3(.1);\n    \n    return L1 + L2 + L3 + L4 + L5 + ambient + top;\n    \n}\n\nfloat checker(vec2 p, float scale) {\n    p = trunc(fract(p)*scale);\n    if(mod(p.x + p.y, 2.) == 0.) return 1.;\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    vec3 col = vec3(.0);\n    vec3 ro = vec3(0,1.2,-5);\n    mat3 rot = rotateY(iTime/4.);\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 0) - ro);\n    ro *= rot;\n    rd *= rot;\n    \n    //ro += vec3(0,0,speed);\n    \n    vec3 hit = march(ro, rd);\n    float t = hit.x;\n    float id = hit.y;\n    \n    if(t > eps) {\n        vec3 p = ro + t * rd;\n    \tvec3 n = calcNormal(p);\n        col = light(p, n, rd);\n        \n        // sphere\n        if(id == 0.) {\n \n            \n\t\t\t//col *= hit.z;\n            col += vec3(.6) * hit.z;\n        }\n        \n        // floor\n        if(id == 1.) {\n         \n            vec3 checkerBoard = mix(vec3(0), vec3(1), checker(p.xz, 2.));\n            col = mix(col, checkerBoard, 0.5) * hit.z;\n        }\n        \n        float shadow = marchShadow(p, normalize(vec3(2,4,-5) - p));\n        if(shadow > eps) {\n        \tcol = mix(col, vec3(0), .5);    \n        }\n        \n        float fog = 1. / (1. + t * t * 0.05);\n        col = mix(vec3(0), col, fog);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}