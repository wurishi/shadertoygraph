{"ver":"0.1","info":{"id":"7ddGDr","date":"1629615816","viewed":120,"name":"pastel swirl","username":"HaleyHalcyon","description":"a","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"7stGDr","parentname":"Fork bumpy stri haleyhalcy 752"},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.14159265358979)\n#define STRIPECOUNT 8.0\n#define DENSITY 1.0\n#define COLORSMOOTH 0.3\n#define STRIPESMOOTH 0.8\n\nvec3 getColor(float r) {\n    r = fract(r);\n    float mix0 = smoothstep(0.00, 0.00 + COLORSMOOTH, r);\n    float mix1 = smoothstep(0.25, 0.25 + COLORSMOOTH, r);\n    float mix2 = smoothstep(0.50, 0.50 + COLORSMOOTH, r);\n    float mix3 = smoothstep(0.75, 0.75 + COLORSMOOTH, r);\n    \n    vec3 color0 = vec3(0xE8, 0xF7, 0xF1) / 255.;\n    vec3 color1 = vec3(0xDF, 0xFF, 0xFF) / 255.;\n    vec3 color2 = vec3(0xA1, 0xC3, 0xF1) / 255.;\n    vec3 color3 = vec3(0x9F, 0xDE, 0xFE) / 255.;\n    \n    return (\n        color0 * (mix0 - mix1) +\n        color1 * (mix1 - mix2) +\n        color2 * (mix2 - mix3) +\n        color3 * (mix3 - mix0 + 1.)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = fract(iTime / 8.);\n    // Scales coords so that the diagonals are all dist 1 from center\n    float scale = length(iResolution.xy);\n    vec2 uv = (fragCoord / scale\n\t- (iResolution.xy / scale / 2.)) * 2.;\n    \n    vec4 noise = texture(iChannel0, vec3(\n        uv.x * 0.4 + uv.y * 0.1, \n        uv.x * 0.1 + uv.y * -0.4, \n        time + uv.x * -0.2 + uv.y * 0.2\n    ));\n    \n    // wiggle coords using prebaked noise\n    uv += 0.01 * (noise.rg - 0.5);\n    \n    // for wormhole or perspective effect\n    float r = log(length(uv)) + (1.0 + 0.2 * sin(time * 2. * PI));\n    \n    \n    // if you want the angle in range [0, 1) and not (-π, π]\n    // divide angle by 2pi and mod1 it\n    float theta = fract(atan(uv.y, uv.x) / 6.2831853071795) + noise.a * 0.3;\n    \n    float ofs_raw = ((time * 4. + r * 0.5 + theta) * STRIPECOUNT);\n    \n    float ofs = fract((\n        floor(\n            ofs_raw\n        ) + smoothstep(\n            0.0,\n            STRIPESMOOTH, \n            fract(ofs_raw)\n        )\n    ) / STRIPECOUNT);\n    float rings = r * DENSITY;\n\n    // Time varying pixel color\n    vec3 col = getColor(ofs + rings) + (sin(noise.bbb - 0.5)) * 0.1;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}