{"ver":"0.1","info":{"id":"tlsGWN","date":"1556395039","viewed":258,"name":"Rounded Rectangle 2 by Dmitry","username":"dmitrykolesnikovich","description":"Rounded Rectangle.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","rounded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define center       vec2(200, 200)\n#define size         vec2(200, 200)\n#define radius       20.0\n\nfloat roundedRectangle(vec2 fragCoord)\n{   \n    vec2 pixel = fragCoord.xy - center;\n    vec2 uv = pixel / (0.5 * size);                           // (u, v) = (-1..1, -1..1)\n    vec2 angularity = size / radius;                          // n = 0..Infinity\n    return pow(uv.x, angularity.x) + pow(uv.y, angularity.y); // u^n + v^n = 0..1 - это основная магия, дальше подгон полученного под желаемое\n}\n\nfloat invertIntence(float value /*0..1*/)\n{\n    float intenseValue = pow(value, 32.0);\n    float invertedIntenseValue = 1.0 - intenseValue;\n    return invertedIntenseValue;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    float darkness = roundedRectangle(fragCoord);\n    float brightness = invertIntence(darkness);\n    fragColor = vec4(1, 0.85, 0, 0) * brightness;\n}","name":"Image","description":"","type":"image"}]}