{"ver":"0.1","info":{"id":"X3jGW3","date":"1709132951","viewed":46,"name":"RoundedBarCut VladimirZd","username":"VladimirZdravkov","description":"Exersice sdf shapes 2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["exersice"],"hasliked":0,"parentid":"clVyRV","parentname":"RoundedBar-vz"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////\n// Rotation and translation //\n//////////////////////////////\n\n#define PI 3.14286\n\nvec2 rotateCCW(vec2 p, float angle)\n{\n    float rad = PI/180. * angle;\n\tmat2 m = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n\treturn m * p;\t\n}\n\n\nvec2 rotateCW(vec2 p, float angle)\n{\n    float rad = PI/180. * angle;\n\tmat2 m = mat2(cos(rad), -sin(rad), sin(rad), cos(rad));\n\treturn m * p;\n}\n\nvec2 translate(vec2 p, vec2 t)\n{\n\treturn p - t;\n}\n\n/////////////////////////////////\n\nfloat boxDist(vec2 p, vec2 size, float radius)\n{\n\tsize -= vec2(radius);\n\tvec2 d = abs(p) - size;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n}\n\nfloat pie(vec2 p, float angle)\n{\n\tangle = radians(angle) / 2.0;\n\tvec2 n = vec2(cos(angle), sin(angle));\n\treturn abs(p).x * n.x + p.y*n.y;\n}\n\nfloat circleDist(vec2 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\n// logical operations\n\nfloat substract(float d1, float d2)\n{\n\treturn max(-d1, d2);\n}\n\nfloat intersect(float d1, float d2)\n{\n\treturn max(d1, d2);\n}\n\nfloat merge(float d1, float d2)\n{\n\treturn min(d1, d2);\n}\n\nfloat mergeExclude(float d1, float d2)\n{\n\treturn min(max(-d1, d2), max(-d2, d1));\n}\n\n//////////////////////////////\n// Geometry\n\nfloat triangleDist(vec2 p, float width, float height)\n{\n\tvec2 n = normalize(vec2(height, width / 2.0));\n\treturn max(\tabs(p).x*n.x + p.y*n.y - (height*n.y), -p.y);\n}\n\n\nfloat semiCircleDist(vec2 p, vec2 offsetCenter, float radius, float startAngle, float endAngle, float width, float rounding)\n{\n    // angle 0 = vertical, + CW\n    // offsetCenter - center of arc for bar\n    float angleAmpl = 360. - abs(endAngle - startAngle);\n    vec2 pos = rotateCW(p - offsetCenter, 90. - startAngle/2. - endAngle/2.);  // compensate overall rotation of arc\n\twidth /= 2.0;\n\tradius -= width;\n    float arcDist = substract(pie(pos, angleAmpl), \n\t\t\t\t\t abs(circleDist(pos, radius)) - width);                     \n                     \n\treturn arcDist; \n}\n\n//float tick(vec2 p, vec2 offsetCenter, vec2 tickSize, float tickRadius, float angle, float barRadius, float barWidth )\n// {\n//    float barOriginAngle = 90.;\n//    float angleBar = angle - barOriginAngle;\n//    \n//    vec2 tickRadShift = vec2(tickSize.x * cos(angleBar * PI/180.), tickSize.y * sin(angleBar * PI/180.));\n//    vec2 tickBar = offsetCenter + vec2((barRadius - barWidth) * cos(angleBar * PI/180.), (150. - barWidth ) * sin(angleBar * PI/180.));\n//    float roundedTickBar = boxDist(rotateCW(translate(p, tickBar), barOriginAngle), tickSize, tickRadius);\n//    return roundedTickBar;\n//}\n\n\nfloat circArcDist(vec2 p, float radius, vec2 vec2_tr, float rotAngle,  float angle)\n{\n    float pieDist = pie(rotateCCW(translate(p, vec2_tr), rotAngle), 270.);\n    float circleDist = circleDist(rotateCW(translate(p, vec2_tr), rotAngle), radius);\n    return substract(pieDist, circleDist);\n}\n\n\n/////////////////////////////////////////////\n\nfloat fillMask(float dist)\n{\n\treturn clamp(-dist, 0.0, 1.0);\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord.xy + vec2(0.5);\n\tvec2 c = iResolution.xy / 2.0;\n    \n    float radiusThickArc = 170.;\n    float angleEndEdgeThick = 50.;\n    float anglePieEckOnThickArc = 180. - angleEndEdgeThick;\n    float angleCutArc = 45.;\n    \n    \n    float widthThickArc = 40.;\n    \n    vec2 offsetOfCenter = c/1.0;\n    \n    vec2 vecRightCut = offsetOfCenter + vec2(radiusThickArc * cos(anglePieEckOnThickArc * PI/180.), radiusThickArc * sin(anglePieEckOnThickArc * PI/180.));\n       \n    float dist2 = pie(rotateCW(p - vecRightCut, 90.-angleEndEdgeThick), angleCutArc);\n    float dist = semiCircleDist( p, c/1.0,  150., 00., 90.,  20., 0.);  // Bar\n      \n    float dist3 = semiCircleDist( p, c/1.0,  radiusThickArc, 00.,  angleEndEdgeThick,  widthThickArc, 0.);  // Bar2\n    \n    vec2 tickSize = vec2(3., 7.);       \n    \n//    float tickOnBar = substract( tick(p, c/1.5, vec2(3.,7.), 4., 100., 150., 20.), dist ); \n\n    \n    dist3 = substract(dist2, dist3); // substract pie\n    \n    dist = mergeExclude(dist, dist3);\n    \n    \n    vec4 col = vec4(0.5, 0.5, 0.5, 1.0);\n    \n    col = mix(col, vec4(1.0, 0.0, 1.0, 1.0), fillMask(dist/*tickOnBar*/));\n    \n    fragColor = clamp(col, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}