{"ver":"0.1","info":{"id":"43l3WX","date":"1708714046","viewed":39,"name":"appalo_tp1","username":"dewa","description":"tp1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["appalo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plan\n// p : point\n// n : norme du plan\n// c : centre\nfloat Plan(vec3 p,vec3 n, vec3 c)\n{\n  n= normalize (n);\n  return dot(p-c,n);\n}\n\n\n// Tore\n// p : point\n// c : centre\n// r1 : rayon section centrale \n// r2 : rayon cercle\nfloat Tore(vec3 p, vec3 c, float r1, float r2)\n{\n    p=p-c;\n  vec2 q = vec2(length(p.xz) - r1, p.y);\n  return length(q) - r2;\n}\n\n//Cylindre\n//p : point\n//c : centre\n//h : hauteur\n//r : rayon\n\nfloat Cylindre(vec3 p, vec3 c, float h, float r)\n{\n    vec2 d =abs(vec2(length(p.xz - c.xz),p.y - c.y)) - vec2 (r,h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n }\n \n  // Capsule\nfloat capsule(vec3 point, vec3 start, vec3 end, float radius)\n{\n    vec3 direction_unit = normalize(end - start); // Normalisation du vecteur direction de la capsule\n    float distance_to_start = dot(point - start, direction_unit); // Calcul de la distance entre le point et le début de la capsule\n\n    float distance_to_surface;\n\n    if (distance_to_start < 0.0)\n    {\n        // Point à l'extérieur de la capsule près de l'extrémité de départ\n        distance_to_surface = length(point - start) - radius; \n    }\n    else if (distance_to_start > length(end - start))\n    {\n        // Point à l'extérieur de la capsule près de l'extrémité de fin\n        distance_to_surface = length(point - end) - radius; \n    }\n    else\n    {\n        // Point à l'intérieur de la capsule\n        float distance_to_axis = sqrt(length(point - start) * length(point - start) - distance_to_start * distance_to_start);\n        distance_to_surface = distance_to_axis - radius; \n    }\n    \n    return distance_to_surface; \n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n// intersection\nfloat Intersection(float a,float b)\n{\n  return max(a,b);\n  }\n  \n  \n float boite(vec3 p)\n{\n    float v1 = Intersection(Plan(p, vec3(3., 0., 0.), vec3(3., 0., 0.)), Plan(p, vec3(0., 3., 0.), vec3(0., 3., 0.)));\n    v1 = Intersection(v1, Plan(p, vec3(0., 0., 3.), vec3(0., 0., 3.)));\n    \n    v1 = Intersection(v1, Plan(p, vec3(-3., 0., 0.), vec3(-3., 0., 0.)));\n    v1 = Intersection(v1, Plan(p, vec3(0., -3., 0.), vec3(0., -3., 0.)));\n    v1 = Intersection(v1, Plan(p, vec3(0., 0., -3.), vec3(0., 0., -3.)));\n\n    return v1;\n}\n\n\n// p : point\nfloat object(vec3 p)\n{\n  float v=boite(p);\n   //float v;\n   \n  v = Union(v, Tore(p, vec3(-5., 10., 5.), 3., 1.));\n      // v = Tore(p, vec3(-5., 10., 5.), 4., 1.);\n  \n   v = Union(v,Sphere(p,vec3(0.,15.,-12.),5.));\n      //v = Sphere(p,vec3(0.,15.,0.),7.);\n   \n   v = Union(v, Cylindre(p, vec3(0.0, 15.0, 0.0), 4.0, 2.0));\n     // v = Cylindre(p, vec3(0.0, 0.0, 0.0), 7.0, 2.5);\n   \n   float capsule_dist = capsule(p, vec3(7.0), vec3(10.0, 5.0, 0.0), 1.0);\n   v = Union(v, capsule_dist);\n      //float capsule_dist = capsule(p, vec3(5.0), vec3(10.0, 0.0, 0.0), 1.5);\n     //v =  capsule_dist;\n    \n  return v;\n}\n\n// p : point\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=false;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}