{"ver":"0.1","info":{"id":"XsVSDc","date":"1467136599","viewed":915,"name":"Hex Space","username":"gleurop","description":"zooming into (sqrt 2, sqrt 2)","likes":16,"published":3,"flags":0,"usePreview":0,"tags":["procedural","fractal","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// thanks FabriceNeyret2 for simplification\n\nfloat hex( vec2 p, float h )\n{\n    vec2 q = abs(p);\n    return max((q.x*.866025 + q.y*.5),q.y) - h;\n}\n\n#define rot(t) mat2(cos(t), sin(t), -sin(t),cos(t))\n\nfloat samp(vec2 U)\n{\n    float t = iTime;\n    vec2 R = iResolution.xy,\n\t\t uv = (U+U - R) / R.x * .01 / exp(mod(t,3.52)) * rot(t*.3) + sqrt(2.);\n    \n\tfloat orb = 1.;\n\tfor(int i = 0; i < 13; i++) {\n\t\tuv = abs(uv-1.);\n\t\tuv = abs(uv/dot(uv,uv) - 1.);\n\t\tuv = 2.*fract(abs(uv-.5));\n\t\torb = min(orb, hex(uv, .3));\n\t}\n    \n    return step(orb,0.) + fract(t/3.52)*.2;\n\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    O = vec4( samp(U) );\n}","name":"Image","description":"","type":"image"}]}