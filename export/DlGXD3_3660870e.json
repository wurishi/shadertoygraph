{"ver":"0.1","info":{"id":"DlGXD3","date":"1686397690","viewed":208,"name":"JWST neon green Pulsar","username":"Carandiru","description":"tried to move it into 3d, sorta works. no more time - but it looks nice!","likes":8,"published":3,"flags":0,"usePreview":1,"tags":["astrophysics","optics","blackbody","fourier","planck","psf"],"hasliked":0,"parentid":"dtKSDV","parentname":"JWST diffraction spike"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// tried to move it into 3d, sorta works. no more time - but it looks nice!\n//\n// original shader @ https://www.shadertoy.com/view/dtKSDV\n//                 & https://www.shadertoy.com/view/7syBzW\n\n#define R32 0.8660254\n\nconst mat3 rot1 = mat3(0.5, -R32, 0.0,\n                       R32, 0.5, 0.0,\t\n                       0.0, 0.0, 0.5);\n                       \nconst mat3 rot2 = mat3(0.5, R32, 0.0,\n                       -R32, 0.5, 0.0,\t\n                       0.0, 0.0, 0.5);\n\nfloat spike(vec3 d) {\n    vec3 s = abs(d) * vec3(8,1,1);\n    return 16.*(dot(s,s) + sqrt(s.x) + s.y);\n}\nfloat spikes(vec3 p, mat3 matView) {\n    float d = length(p);\n    if(d > 1.) return 0.;\n    \n    return 0.3/spike(matView*p.yxz) + 1.0/spike(matView*p) \n    + 1.0/spike(matView*rot1*p) + 1.0/spike(matView*rot2*p);\n\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float an = (iTime*0.25f)*(iTime*0.25f);\n    vec3 ro = vec3( 25.0*sin(an), 2.0, 2.5*cos(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n        \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0f);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = ((fragCoord+o)-0.5*iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n#endif\n        vec3 col = vec3(0.3f, 0.95f, 0.05f) * spikes(vec3(p, p.y-p.x), mat3(uu, vv, ww));\n    \n        // to gamma space\n        col = sqrt( col );\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \n    float dither = textureLod(iChannel1, fragCoord.xy / 1024.0f, 0.0).r;\n    \n    tot = tot + dither * 17.0f/255.0f;\n    tot = tot * tot;\n    \n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}