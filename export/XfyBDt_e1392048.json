{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"vec2 warpCoords(vec2 uv, float fact) {\n    return uv / (1.0 + fact * (1.0 - uv.y));\n}\n\nmat2 rot2D(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    \n    return mat2(c, -s, s, c);\n}\n\nvec3 getColour(float i, float n) {\n    return vec3(float(i)/n);\n}\n\nconst vec3 rainbow[7] = vec3[](\n    vec3(1.0, 0.0, 0.0), // Red\n    vec3(1.0, 0.5, 0.0), // Orange\n    vec3(1.0, 1.0, 0.0), // Yellow\n    vec3(0.0, 1.0, 0.0), // Green\n    vec3(0.0, 0.0, 1.0), // Blue\n    vec3(0.29, 0.0, 0.51), // Indigo\n    vec3(0.56, 0.0, 1.0)  // Violet\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= (iResolution.x/2.)/iResolution.y;\n    vec3 col = vec3(0., 0.0, 0.);  \n    float fact = 0.99;\n    float n = 100.;\n    \n    for( int i = int(n); i >= 0; i--) {\n        vec2 wuv = uv;\n        vec2 t = vec2(.5, 0.);\n        wuv = warpCoords(wuv * pow(fact, float(i)), 1.);\n        \n        int maximum = int(ceil(texture(iChannel0, wuv + t).r*n));\n        float height = texture(iChannel0, wuv + t).r*n;\n        \n        if (maximum > i ) {\n            col = getColour(float(maximum), n) * rainbow[(i)%7] * .5;\n            break;\n        }\n        else if (i == maximum) {\n            col = getColour(float(maximum), n) * mix(rainbow[i%7], rainbow[i%7] * .5, 0.);\n            break;\n        }\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x += iTime*0.03;\n    fragColor = vec4(fbm(uv, 20, iTime));\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[],"inputs":[],"code":"// Voronoi\n\nvec2 hash22(vec2 p) {\n    p = fract(p * vec2(0.1031, 0.11369));\n    p += dot(p, p.yx + vec2(33.33, 71.17));\n    return fract(sin(p) * vec2(43758.5453123, 22578.1459123));\n}\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(0.1031, 0.11369));\n    p += dot(p, p.yx + vec2(33.33, 71.17));\n    return fract(sin(dot(p, vec2(43758.5453123, 22578.1459123))));\n}\n\nvec2 hash12(float p) {\n    vec2 k = vec2(0.1031, 0.11369);\n    p = fract(p * 0.1031);\n    p += dot(vec2(p, p), k);\n    return fract(sin(vec2(p, p + 33.33)) * vec2(43758.5453123, 22578.1459123));\n}\n\n\nvec2 getPoint(vec2 t) {\n    return hash22(t);\n}\n\nfloat voronoi2D(vec2 uv, float tileCount) {\n    vec2 t = floor(vec2(uv*tileCount));\n    vec2 tuv = fract(vec2(uv*tileCount));\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    float dist = 1.;\n    int scanDist = 1;\n    for (int x = -scanDist; x <= scanDist; x++) {\n        for (int y = -scanDist; y <= scanDist; y++) {\n            vec2 offset = vec2(x, y);\n            vec2 point = getPoint(t + offset) + offset;\n            float oldDist = dist;\n            dist = length(tuv - point);\n            dist = min(dist, oldDist);\n        }\n        \n    }\n    \n    return dist;\n}\n\nfloat fbm(vec2 uv, int n, float t) {\n    float ampFact = 0.8;\n    float freqFact = 1.2;\n    float amp = 1.;\n    float freq = 2.;\n    float maxAmp = 0.;\n    float dist = 0.;\n    for (int i = 0; i < n; i++) {\n        amp *= ampFact;\n        freq *= freqFact;\n        uv+= 0.02*t*(hash12(float(i)) - .5);\n        dist += amp*voronoi2D(uv, freq);\n        maxAmp += amp;\n    }\n    \n    float normalized = dist / maxAmp;\n    float minVal = 0.0;\n    float maxVal = 1.0;\n    return (normalized - minVal) / (maxVal - minVal);\n}","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XfyBDt","date":"1734561883","viewed":62,"name":"Rainbow Mountains","username":"GarlicGraphix","description":"Playing with voronoi noise","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"MfdyRl","parentname":"Flying Over Landscape"}}