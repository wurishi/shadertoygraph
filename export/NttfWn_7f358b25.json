{"ver":"0.1","info":{"id":"NttfWn","date":"1662936223","viewed":18,"name":"translated","username":"artefox","description":"translated","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["translated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Thanks to umsoea/georg240p for providing the sphere intersection https://www.youtube.com/watch?v=ZpsGVsv94zQ\nfloat sphere(vec3 ro, vec3 rd, vec3 center, float radius, out float dist, out vec3 normal, out vec3 hit) {\n    float len = dot(center - ro, rd);\n    float b = distance(ro + rd * len, center);\n    if (b > radius || distance(ro, center) <= radius) {\n        normal = vec3(0.0, 1.0, 0.0);\n        return 10000.0;\n        hit = vec3(0.0);\n    }\n    float a = sqrt(radius * radius - b * b);\n    float d = len - a;\n\n    if (d < 0.0) {\n        normal = vec3(0.0, 1.0, 0.0);\n        return 10000.0;\n        hit = vec3(0.0);\n    }\n    dist = d;\n    hit = ro + rd * d;\n    normal = (hit - center) / radius;\n    return 0.0;\n}\n\nfloat addSphere(vec3 ro, vec3 rd, vec3 center, float radius, out float dist, out vec3 normal, out vec3 hit) {\n    float oldDist = dist;\n    vec3 oldNormal = normal;\n    vec3 oldHit = hit;\n    \n    sphere(ro, rd, center, radius, dist, normal, hit);\n    if (dist >= oldDist) {\n        dist = oldDist;\n        normal = oldNormal;\n        hit = oldHit;\n    }\n    return 0.0;\n}\n\nfloat ray(vec3 ro, vec3 rd, out float dist, out vec3 normal, out vec3 hit) {\n    addSphere(ro, rd, vec3(0.7, 0.5, 1.5), 0.5, dist, normal, hit);\n    addSphere(ro, rd, vec3(0.0, 0.5, 2.0), 0.5, dist, normal, hit);\n    addSphere(ro, rd, vec3(0.0, -10000.0, 0.0), 10000.0, dist, normal, hit);\n    \n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fov = 90.0;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = (2.0 * fragCoord / iResolution.xy - 1.0) * tan(radians(fov / 2.0));\n    uv.x *= aspect;\n    \n    vec3 ro = vec3(0.0, 0.5, -2.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    vec3 col;\n    vec3 hit;\n    float dist = 10000.0;\n    vec3 normal = vec3(0.0);\n    \n    ray(ro, rd, dist, normal, hit);\n    \n    vec3 light = vec3((2.0 * iMouse.xy / iResolution.xy - 1.0) * 4.0, -1.0);\n    vec3 vtol = light - hit;\n    float ld = length(vtol);\n    vtol /= ld;\n    \n    if (dist < 10000.0) {\n        vec3 shade = vec3(max(dot(normal, vtol), 0.0) / (ld * ld));\n        float dist2 = 10000.0;\n        ray(hit, vtol, dist2, normal, hit);\n        col = dist2 > ld ? shade : vec3(0.0);\n    } else {\n        col = mix(vec3(0.6, 0.7, 1.0), vec3(0.3, 0.4, 0.7), rd.y);\n    }\n    \n\n    // gamma\n    col = pow(col, vec3(1.0 / 2.2));\n    \n    // output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}