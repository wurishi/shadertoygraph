{"ver":"0.1","info":{"id":"csfGRM","date":"1665794930","viewed":56,"name":"absulit-test1","username":"absulit","description":"first shader on shadertoy, just testing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*float distance(vec2 p1, vec2 p2){\n    float dx = p2.x - p1.x;\n    float dy = p2.y - p1.y;\n    return sqrt(dx*dx + dy*dy);\n}*/\n\nfloat fnusin(float speed){\n    return sin(iTime * speed) * .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    vec2 circlePosition = vec2(0.5, .5);\n    float d = distance(uv,  circlePosition);\n    float circle = 0.;\n    if (d < .2 + .1 * fnusin(1.68)) {\n        circle = 1.0;\n    }\n \n    float a = sin(uv.x * uv.y * 60. + 100. * fnusin(.7));\n    float r = circle * fnusin(1.7) -a * 1.-uv.x * uv.y;\n    float g = 1.-uv.y * 1.-circle;\n    float b = a * circle;\n    vec3 col = vec3( r, g, b);\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}