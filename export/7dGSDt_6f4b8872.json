{"ver":"0.1","info":{"id":"7dGSDt","date":"1635483676","viewed":49,"name":"binary tree maze","username":"e000","description":"https://pragprog.com/titles/jbmaze/mazes-for-programmers/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["maze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 4\n\nfloat rand(vec2 co){\n    // https://thebookofshaders.com/10\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nbool containsWall(int x, int y) {\n    bool val = rand(vec2(float(x / 2), float(y / 2))) > 0.5;\n    return (x % 2 == 0) ? val : !val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int ix = int(fragCoord.x) / SCALE;\n    int iy = int(fragCoord.y) / SCALE;\n    \n    float col;\n    if (ix % 2 == 0 && iy % 2 == 0) {\n        col = 1.; // open cell\n    } else if (ix % 2 == 1 && iy % 2 == 1) {\n        col = 0.; // corners\n    } else if (containsWall(ix, iy)) {\n        col = 0.;\n    } else {\n        col = 1.;\n    }\n    \n    fragColor = vec4(col, col, col, 1.0);\n}","name":"Image","description":"","type":"image"}]}