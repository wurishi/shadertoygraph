{"ver":"0.1","info":{"id":"WdX3z7","date":"1545365344","viewed":163,"name":"Psyco Kirby","username":"ryohey","description":"aaaa","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["aaa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// polynomial smooth min (from IQ)\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat smax(float a,float b, float k)\n{\n    return -smin(-a,-b,k);\n}\n\nmat2 rotmat(float a)\n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat shoesDist(vec3 p)\n{\n    vec3 op=p;\n    float d=1e4;\n\n    p.y-=1.5;\n\n    // right shoe\n    op=p;\n    p-=vec3(-.5,-.6,-.9);\n    p.yz=rotmat(-.7)*p.yz;\n    p.xz=rotmat(0.1)*p.xz;\n    d=min(d,-smin(p.y,-(length(p*vec3(1.6,1,1))-.64),.2));\n    p=op;\n\n    // left shoe\n    op=p;\n    p-=vec3(.55,-.8,0.4);\n    p.x=-p.x;\n    p.yz=rotmat(1.4)*p.yz;\n    d=min(d,-smin(p.y,-(length(p*vec3(1.6,1,1))-.73),.2));\n    p=op;\n    return d;\n}\n\nfloat sceneDist(vec3 p)\n{\n    vec3 op=p;\n    float d=shoesDist(p);\n\n    d=min(d,p.y);\n    p.y-=1.5;\n\n    // torso\n    d=min(d,length(p)-1.);\n\n\n    // left arm\n    op=p;\n    p-=vec3(.66,.7,0);\n    p.xz=rotmat(-0.1)*p.xz;\n    d=smin(d,(length(p*vec3(1.8,1,1))-.58),.07);\n    p=op;\n\n    // right arm\n    op=p;\n    p-=vec3(-.75,0.2,0);\n    d=smin(d,(length(p*vec3(1,1.5,1))-.54),.03);\n    p=op;\n\n    // mouth\n    p.y-=.11;\n    float md=smax(p.z+.84,smax(smax(p.x-.2,p.y-.075,.2),dot(p,vec3(.7071,-.7071,0))-.1,.08),.04);\n    p.x=-p.x;\n    md=smax(md,smax(p.z+.84,smax(smax(p.x-.2,p.y-.075,.2),dot(p,vec3(.7071,-.7071,0))-.1,.08),.01),.13);\n    d=smax(d,-md,.012);\n\n    // tongue\n    p=op;\n    d=smin(d,length((p-vec3(0,.03,-.75))*vec3(1,1,1))-.16,.01);\n\n    return min(d,10.);\n}\n\n\n\nvec3 sceneNorm(vec3 p)\n{\n    vec3 e=vec3(1e-3,0,0);\n    float d = sceneDist(p);\n    return normalize(vec3(sceneDist(p + e.xyy) - sceneDist(p - e.xyy), sceneDist(p + e.yxy) - sceneDist(p - e.yxy),\n                          sceneDist(p + e.yyx) - sceneDist(p - e.yyx)));\n}\n\n\n// from simon green and others\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.15;\n\n    float a = 0.0;\n    float weight = 4.;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - sceneDist(p + n*d));\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\n// a re-shaped cosine, to make the peaks more pointy\nfloat cos2(float x){return cos(x-sin(x)/3.);}\n\nfloat starShape(vec2 p)\n{\n    float a=atan(p.y,p.x)+iTime/3.;\n    float l=pow(length(p),.8);\n    float star=1.-smoothstep(0.,(3.-cos2(a*5.*2.))*.02,l-.5+cos2(a*5.)*.1);\n    return star;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float an=cos(iTime)*.1;\n\n    vec2 ot=uv*2.-1.;\n    ot.y*=iResolution.y/iResolution.x;\n    vec3 ro=vec3(0.,1.4,4.);\n    vec3 rd=normalize(vec3(ot.xy,-1.3));\n\n    rd.xz=mat2(cos(an),sin(an),sin(an),-cos(an))*rd.xz;\n    ro.xz=mat2(cos(an),sin(an),sin(an),-cos(an))*ro.xz;\n\n    float s=20.;\n\n    // primary ray\n    float t=0.,d=0.;\n    for(int i=0;i<80;++i)\n    {\n        d=sceneDist(ro+rd*t);\n        if(d<1e-4)\n            break;\n        if(t>10.)\n            break;\n        t+=d*.9;\n    }\n\n    t=min(t,10.0);\n\n    // shadow ray\n    vec3 rp=ro+rd*t;\n    vec3 n=sceneNorm(rp);\n    float st=5e-3;\n    vec3 ld=normalize(vec3(2,4,-4));\n    for(int i=0;i<20;++i)\n    {\n        d=sceneDist(rp+ld*st);\n        if(d<1e-5)\n            break;\n        if(st>5.)\n            break;\n        st+=d*2.;\n    }\n\n    // ambient occlusion and shadowing\n    vec3 ao=vec3(ambientOcclusion(rp, n));\n    float shad=mix(.85,1.,step(5.,st));\n\n    ao*=mix(.3,1.,.5+.5*n.y);\n\n    // soft floor shadow\n    if(rp.y<1e-3)\n        ao*=mix(mix(vec3(1,.5,.7),vec3(1),.4)*.6,vec3(1),smoothstep(0.,1.6,length(rp.xz)));\n\n\n\n    vec3 diff=vec3(1);\n    vec3 emit=vec3(0);\n\n    // skin\n    diff*=vec3(1.15,.3,.41)*1.4;\n    diff+=.4*mix(1.,0.,smoothstep(0.,1.,length(rp.xy-vec2(0.,1.9))));\n    diff+=.5*mix(1.,0.,smoothstep(0.,.5,length(rp.xy-vec2(.7,2.5))));\n    diff+=.36*mix(1.,0.,smoothstep(0.,.5,length(rp.xy-vec2(-1.1,1.8))));\n\n    if(rp.y<1e-3)\n        diff=vec3(.6,1,.6);\n\n    // mouth\n    diff*=mix(vec3(1,.3,.2),vec3(1),smoothstep(.97,.99,length(rp-vec3(0,1.5,0))));\n\n    // shoes\n    diff=mix(vec3(1.,.05,.1),diff,smoothstep(0.,0.01,shoesDist(rp)));\n    diff+=.2*mix(1.,0.,smoothstep(0.,.2,length(rp.xy-vec2(-0.5,1.4))));\n    diff+=.12*mix(1.,0.,smoothstep(0.,.25,length(rp.xy-vec2(0.57,.3))));\n\n    // bounce light from the floor\n    diff+=vec3(.25,1.,.25)*smoothstep(-.3,1.7,-rp.y+1.)*max(0.,-n.y)*.7;\n\n    vec3 orp=rp;\n    rp.y-=1.5;\n    rp.x=abs(rp.x);\n\n    // blushes\n    diff*=mix(vec3(1,.5,.5),vec3(1),smoothstep(.1,.15,length((rp.xy-vec2(.4,.2))*vec2(1,1.65))));\n\n    rp.xy-=vec2(.16,.45);\n    rp.xy*=.9;\n    orp=rp;\n    rp.y=pow(abs(rp.y),1.4)*sign(rp.y);\n\n    // eye outline\n    diff*=smoothstep(.058,.067,length((rp.xy)*vec2(.9,.52)));\n\n    rp=orp;\n    rp.y+=.08;\n    rp.y-=pow(abs(rp.x),2.)*16.;\n\n    // eye reflections\n    emit+=vec3(.1,.5,1.)*(1.-smoothstep(.03,.036,length((rp.xy)*vec2(.7,.3))))*max(0.,-rp.y)*10.;\n\n    rp=orp;\n    rp.y-=.12;\n\n    // eye highlights\n    emit+=vec3(1)*(1.-smoothstep(.03,.04,length((rp.xy)*vec2(1.,.48))));\n\n    // fresnel\n    diff+=pow(clamp(1.-dot(-rd,n),0.,.9),4.)*.5;\n\n    // background and floor fade\n    vec3 backg=vec3(1.15,.3,.41)*.9;\n    ot.x+=.6+iTime/50.;\n    ot.y+=cos(floor(ot.x*2.)*3.)*.1+.2;\n    ot.x=mod(ot.x,.5)-.25;\n    backg=mix(backg,vec3(1.,1.,.5),.1*starShape((ot-vec2(0.,.6))*8.)*smoothstep(9.,10.,t));\n    diff=mix(diff,backg,smoothstep(.9,10.,t));\n\n    fragColor.rgb=mix(vec3(.15,0,0),vec3(1),ao)*shad*diff*1.1;\n    fragColor.rgb+=emit;\n\n    fragColor.rgb=pow(fragColor.rgb,vec3(1./2.4));\n    \n    if (distance(fragCoord, iMouse.xy) > 80.0)\n    {\n      vec2 aaauv = fragCoord.xy/iResolution.xy;\n       vec4 col = texture(iChannel0,aaauv);\n       fragColor.rgb = col.rgb;  \n    }\n}\n","name":"Image","description":"","type":"image"}]}