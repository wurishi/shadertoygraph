{"ver":"0.1","info":{"id":"M3VSDw","date":"1720055147","viewed":67,"name":"mandelbubbles4d","username":"pb","description":"3d projection of 4d raymarch","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d","mandelbox"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Gaussian blur effect\n    vec2 texel = 1.0 / iResolution.xy;\n    vec4 total_color = vec4(0.0);\n\n    // Gaussian kernel\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    // Apply Gaussian blur to the texture from channel 0\n    for (int i = 0; i < 5; i++) {\n        float fi = float(i) - 2.0;\n        for (int j = 0; j < 5; j++) {\n            float fj = float(j) - 2.0;\n            vec4 color = texture(iChannel0, uv + vec2(texel.x * fi, texel.y * fj));\n            total_color += color * gk1s[i * 5 + j];\n        }\n    }\n\n    // Output the final color\n    fragColor = total_color;\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos(  h + vec3(3,2,6)   )*.6 + .5 )\n\n#define H2(h)  (  cos(  h + vec3(1,2,1)   )*.7 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .5*R.y, R.y*2.))*100.;\n    \n    float param = mod(iTime,10.)<5.?.2:.15;\n    \n    float sc,dotp,totdist=0., tt=iTime/3., t=0.;\n    \n    for (float i=0.; i<100.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n            \n        p.xyz += vec3(0,0,-400); \n        \n        p.xz *= rot( tt/2. + abs(sin(tt/3.)));\n           \n        p.yzw = ROT(p.xyz, normalize( vec3(sin(t/2.), cos(t/3.), 0. )  ),t);\n\n        sc = 1.; \n        \n        p.zw *= rot(tt);\n  \n        vec4 w = p;\n        \n        for (float j=0.; j<7.; j++) {\n          \n            p = abs(p)*.65;\n       \n            \n            dotp = max(1./dot(w,w),.1);\n            sc *= dotp*1.1; \n            \n            p = p * dotp - .55; \n            \n            w = .8*log(1.+abs(p)*p*p) - param;\n            \n        }\n         \n        float dist = abs( length(p)-.1)/sc ;  //funky distance estimate\n        float stepsize = dist/10. ;     \n        totdist += stepsize;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c +=\n             2e-2* H2(  atan( p.w, p.z )) + \n             + mix( vec3(1), H(M(sc)),.95) *.015*  exp(-i*i*stepsize*stepsize/4.);\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}