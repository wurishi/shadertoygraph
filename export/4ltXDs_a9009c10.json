{"ver":"0.1","info":{"id":"4ltXDs","date":"1482235705","viewed":263,"name":"Ballons","username":"Seledorn","description":" Just playing a little with 2D distance fields :) Based on Umbrellar by candycat.\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on Umbrellar by candycat\n\nfloat circle(vec2 center, float radius, vec2 coord )\n{\n    return length(center-coord) - radius;\n}\n\nfloat square(vec2 center,float radius, vec2 coord)\n{\n    vec2 d = coord-center;\n\treturn max(abs(d.x),abs(d.y))-radius;\n}\n\nfloat rect(vec2 center, float half_width, float half_height,vec2 coord)\n{\n    vec2 p = coord-center;\n\treturn max(abs(p.x)-half_width,abs(p.y)-half_height);\n}\n\nfloat perc_in_range_clamped(float edge0, float edge1, float value)\n{\n    return clamp((value-edge0)/(edge1-edge0),0.0,1.0);\n}\n\nfloat trapetzoid(vec2 center, float upper_half_width, float lower_half_width, float half_height, vec2 coord)\n{\n    vec2 p = coord-center;\n    float width = mix(upper_half_width,lower_half_width,perc_in_range_clamped(-half_height,half_height,p.y));\n\treturn rect(center,width,half_height,coord);\n}\n\n\nfloat line(vec2 p0, vec2 p1, float width, vec2 coord)\n{\n    vec2 dir0 = p1 - p0;\n\tvec2 dir1 = coord - p0;\n\tfloat h = clamp(dot(dir0, dir1)/dot(dir0, dir0), 0.0, 1.0);\n\treturn (length(dir1 - dir0 * h) - width * 0.5);\n}\n\nfloat opSU( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat opU( const float a, const float b )\n{\n    return min(a, b);\n}\n\nfloat opS( const float a, const float b)\n{\n    return max(a, -b);\n}\n\nfloat opI( const float a, const float b )\n{\n    return max(a, b);\n}\n\nfloat f_width(float f)\n{\n    return pow((pow(dFdx(f),2.0) + pow(dFdy(f),2.0)),0.5);\n}\n\n\n\nvec4 render(float d, vec3 color, float stroke)\n{\n    float fw = f_width(d);\n    float anti = fw * 1.0;\n    float fw_stroke = fw*stroke;\n    vec4 strokeLayer = vec4(vec3(0.05), 1.0-smoothstep(-anti, anti, d - fw_stroke));\n    vec4 colorLayer = vec4(color, 1.0-smoothstep(-anti, anti, d));\n\n    if (stroke < 0.000001) {\n    \treturn colorLayer;\n    }\n    //return mix(vec4(0.0),vec4(1.0),smoothstep(0.0,0.04,d));\n    return  vec4(mix(strokeLayer.rgb, colorLayer.rgb, colorLayer.a), strokeLayer.a);\n\n}\n\nfloat ballon(vec2 center, float radius, vec2 coord,float pearness)\n{\n    float enlongation = pearness*radius;\n    float l = line(center,center -vec2(0.0,enlongation+radius),0.75*radius,coord);\n    float c = circle(center,radius,coord);\n    float t = trapetzoid(center-vec2(0.0,enlongation+1.44*radius),0.1*radius,0.02*radius,0.1*radius,coord);\n    return opSU(t,opSU(l,c,0.5*radius),0.03*radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n\n    float size = min(iResolution.x, iResolution.y);\n    float pixSize = 1.0 / size;\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    float stroke = 1.5;\n    vec2 center = vec2(0.0,0.0);\n    \n    vec3 white = vec3(1.0);\n    vec3 black = vec3(0.0);\n    vec3 blue  = vec3(0.4,0.5,0.6);\n    vec3 red   = vec3(0.8,0.3,0.3);\n    vec3 green = vec3(0.4,0.7,0.4);\n   \tvec3 yellow = vec3(0.8,0.8,0.3);\n   \tvec3 orange = vec3(0.8,0.4,0.15);\n    vec3 colors[5];\n    colors[0]=blue;\n    colors[1]=red;\n    colors[2]=green;\n    colors[3]=yellow;\n    colors[4]=orange;\n\n    vec4 layer0 = vec4(0.0);\n\tvec4 layer1 = vec4(0.0);\n    vec3 bcol = blue*1.5*(1.0-0.30*length(p));\n    \n        \n    fragColor = vec4(bcol, 1.0);  \n    for(float i = 0.0; i < 20.0;i++)\n    {\n        float r = mod(i * 101.0,31.0);//silly random\n        float theta = iTime + r;\n        center = vec2(0.2*i-1.7,sin(theta)*2.3*sign(cos(theta))); //d/dx sin = cos, dir(sin) = sign(cos) \n        center += vec2(sin(center.y*2.0)/10.0,0.0);\n        \n        vec4 b = render(ballon(center,0.4+0.1*sin(theta),p,sin(r)*0.2),\n                        colors[int(mod(mod(i*101.0,31.0),5.0))],1.5); //rcalc r, can't store because of const\n        fragColor = mix(fragColor, b, b.a);\n    }\n    \n   \n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}