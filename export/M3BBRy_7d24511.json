{"ver":"0.1","info":{"id":"M3BBRy","date":"1731270827","viewed":26,"name":"pierre sur du bois ","username":"lindoush","description":"partie sur la modélisation avancée : mise en place de la texture bois et une fonction de turbulence pour la pierre. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// modélisation avance => bois \n\n// Modeling - 2024.09.15\n// Eric Galin\n\nstruct Ray{\n    vec3 o;// Origin\n    vec3 d;// Direction\n};\n\nstruct Val {\n  float v; // Signed distance\n  int c; // Cost\n  int type; // Type of object: 0 = Sphere, 1 = Plane\n};\n\n// Compute point on ray\n// ray : The ray\n//   t : Distance\nvec3 Point(Ray ray,float t)\n{\n    return ray.o+t*ray.d;\n}\n\n// Random direction in a hemisphere\n// seed : Integer seed, from 0 to N\n//    n : Direction of the hemisphere\nvec3 Hemisphere(int seed,vec3 n)\n{\n    float a=fract(sin(176.19*float(seed)));// Uniform randoms\n    float b=fract(sin(164.19*float(seed)));\n    \n    float u=2.*3.1415*a;// Random angle\n    float v=acos(2.*b-1.);// Arccosine distribution to compensate at poles\n    \n    vec3 d=vec3(cos(u)*cos(v),sin(u)*cos(v),sin(v));// Direction\n    if(dot(d,n)<0.){d=-d;}// Hemisphere\n    \n    return d;\n}\n\n// Camera -------------------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives -------------------------------------------------------------------------------\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nVal Sphere(vec3 p,vec3 c,float r)\n{\n  return Val(length(p-c)-r,2, 0);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nVal Plane(vec3 p, vec3 n, vec3 o)\n{\n    return Val(dot((p-o),n),1, 1);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Turbulence\n// p : point \n// scale : scale of the turbulence\nfloat Turbulence(vec3 p, float scale) {\n    float total = 0.0;\n    float amplitude = 1.0;\n    float frequency = scale;\n    for (int i = 0; i < 5; i++) {\n        total += abs(Noise(p * frequency)) * amplitude;\n        frequency *= 2.0;\n        amplitude *= 0.5;\n    }\n    return total;\n}\n\n// Wood\n// p : point\nvec3 Wood(vec3 p) {\n    vec3 q = p + 0.2 * Turbulence(p, 5.0);\n    float r = 0.5 * (1.0 + sin(length(q.xy) * 12.0)); \n    return mix(vec3(0.4, 0.2, 0.1), vec3(0.8, 0.6, 0.3), r); \n}\n\n// Apply Wood \n// p : point\nvec3 ShadeWood(vec3 p) {\n    vec3 woodColor = Wood(p);\n    return woodColor;\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nVal Union(Val a, Val b) {\n  if (a.v < b.v) {\n    return Val(a.v, a.c + b.c + 1, a.type); // Keep the type of 'a'\n  } else {\n    return Val(b.v, a.c + b.c + 1, b.type); // Keep the type of 'b'\n  }\n}\n\n\n// Potential field of the object\n// p : point\nVal object(vec3 p)\n{\n  Val v1 = Sphere(p, vec3(0., 2., 2.), 4.*2.25);\n  Val v2 = Sphere(p, vec3(3., 0., -1.), 4.*3.);\n  Val plane = Plane(p, vec3(0., 0., 1.), vec3(0.0, 0.0, -4.0)); \n\n  Val v = Union(v1, v2); \n  v.v+= 0.95*Noise(p/2.) + 0.5*Noise(p/1.) + 0.25*Noise(p/0.5) ; \n  v.v = v.v /1.5;  \n  v = Union(v, plane);  \n\n  return v;\n}\n\n\n// Analysis of the scalar field -----------------------------------------------------------------\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  Val val=object(p);\n  float v=val.v;\n  n.x=object(vec3(p.x+eps,p.y,p.z)).v-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : The ray\n//   e : Maximum distance\n//   h : hit\n//   s : Number of steps\n//   c : cost\nbool SphereTrace(Ray ray,float e,out float t,out int s,out int c)\n{\n  bool h=false;\n  \n  // Start at the origin\n  t=0.0;\n  c=0;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    Val val=object(p);\n    float v=val.v;\n    c+=val.c;\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n// Lighting -------------------------------------------------------------------------------\n\n// Background color\n// ray : Ray \nvec3 background(Ray ray)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),ray.d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  float t;\n  int s;\n  int c;\n  bool hit=SphereTrace(Ray(p+Epsilon*n,l),100.,t,s,c);\n  if(!hit)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n//   p : Point\n//   n : Normal at point\n// eye : Eye direction\nvec3 Shade(vec3 p,vec3 n,Ray eye)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(Ray(p,n));\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(eye.d,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n,int m)\n{\n  float t=float(n)/(float(m));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\nvoid mainImage(out vec4 color, in vec2 pxy)\n{  \n    // Convert pixel coordinates\n    vec2 pixel = (-iResolution.xy + 2. * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    Ray ray = CreateRay(m, pixel);\n\n    // Trace ray\n\n    // Hit and number of steps\n    float t = 0.0;\n    int s = 0;\n    int c;\n    bool hit = SphereTrace(ray, 100., t, s, c);\n\n    // Shade background\n    vec3 rgb = background(ray);\n\n    if (hit)\n    {\n        // Position\n        vec3 p = Point(ray, t);\n\n        // Compute normal\n        vec3 n = ObjectNormal(p);\n\n        // Get the object hit\n        Val val = object(p);\n\n        // Check if the type of an object\n        if (val.type == 1) {  \n            rgb = ShadeWood(p); \n        } else {\n            rgb = Shade(p, n, ray);\n        }\n    }\n\n    color = vec4(rgb, 1.);\n}\n","name":"Image","description":"","type":"image"}]}