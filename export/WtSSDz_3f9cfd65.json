{"ver":"0.1","info":{"id":"WtSSDz","date":"1566655711","viewed":344,"name":"Tamby's Starfield","username":"TambakoJaguar","description":"My own interpretation of a starfield. Sadly it's quite slow when there are lots of stars (line 4) even if I used a technique to split the screen in 4 parts. Any help to make it faster would be welcome, thanks!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","space","stars","fake3d","starfield","points","movement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\"Tamby's Starfield\" by Emmanuel Keller aka Tambako - August 2019\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nContact: tamby@tambako.ch\n*/\n\n// Makes everything 4x faster but there are some artifacts on the axes\n#define split_screen\n\nconst int nbStars = 5000;\nconst float xzSize = 60.;\nconst float zSize = 200.;\nconst float zoomFact = 1.5;\nconst float t0 = 0.1;\nconst float int0 = 700.;\n\nfloat camSpeed;\nfloat camPosZ;\n\nfloat hash(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 333.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 getStarPos(float sn, float camPosZ)\n{\n    vec3 pos;\n    pos.z = zSize*(hash(sn*169.6));\n    float xyrf = floor((pos.z-camPosZ)/zSize);\n    \n    #ifdef split_screen\n    pos.x = xzSize*(hash(sn*251.2 + 25.6*xyrf)*0.5 - 0.5*round(sn/float(nbStars)));\n    pos.y = xzSize*(hash(sn*472.4 + 54.1*xyrf)*0.5 - 0.5*round(fract(sn*2./float(nbStars))));\n    #else\n    pos.x = xzSize*(hash(sn*251.2 + 25.6*xyrf) - 0.5);\n    pos.y = xzSize*(hash(sn*472.4 + 54.1*xyrf) - 0.5);   \n    #endif\n    \n    return pos;\n}\n\nvec3 getStarColor(float sn)\n{\n    vec3 col;\n    \n    float rv = hash(sn*341.8);\n    col.r = rv<0.5?pow(smoothstep(0., 0.5, rv) + 0.1, .3):1.;\n    col.g = rv>0.5?pow(smoothstep(0.5, 1., rv) + 0.1, .3):1.;\n    col.b = rv>0.5?pow(smoothstep(0.5, 1., rv) + 0.1, .3):1.;\n        \n    return col;\n}\n\nvec3 map2D(float sn, vec3 pos, float camPosZ, float zoomFact)\n{\n    vec3 pos2;\n    \n    pos.z-= camPosZ;\n    pos.z = mod(pos.z, zSize);\n    \n    pos2.x = zoomFact*pos.x/max(pos.z, 0.) + 0.5;\n    pos2.y = zoomFact*pos.y/max(pos.z, 0.) + 0.5*iResolution.y/iResolution.x;\n    pos2.z = (1. - 0.5* hash(float(sn)*745.5))*smoothstep(zSize, zSize*0.5, pos.z)/pos.z;\n    \n    return pos2;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    camSpeed = 5. + (1.2* iTime);\n    camPosZ = t0 + iTime*camSpeed;\n    vec2 uv = fragCoord/iResolution.xx;\n    \n    vec3 col;\n    float s2;\n    \n    #ifdef split_screen\n    for (float s=1.; s<float(nbStars)/4.; s++)\n    {\n        s2 = s + (uv.x<0.5?float(nbStars)/2.:0.);\n        s2+= ((uv.y<0.5*iResolution.y/iResolution.x)?float(nbStars)/4.:0.);    \n    #else\n    for (int s=1; s<nbStars; s++)\n    { \n        s2 = s;\n    #endif    \n        vec3 pos = getStarPos(s2, camPosZ);\n        vec3 pos2d = map2D(s2, pos, camPosZ, zoomFact);\n        float sint = 0.002/length(pos2d.xy-uv);\n        if (sint>0.1)\n        {\n            sint = int0*pos2d.z*smoothstep(0.08, 1.5, sint*max(10.*pos2d.z*hash(float(s2)*586.2), 0.08));\n            col+= sint*getStarColor(s2);\n        }\n    }\n\n    fragColor = vec4(pow(col, vec3(0.5)),1.0);\n}","name":"Image","description":"","type":"image"}]}