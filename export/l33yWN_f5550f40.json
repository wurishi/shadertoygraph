{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nvec3 pallete(float t){\n\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5); \n    vec3 c = vec3(0.588, 0.598, 1.588); \n    vec3 d = vec3(0.526, 0.047, 0.025);\n    \n    return a + b*cos(6.28318 * (c * t + d));\n\n}\n\nfloat sdVesica(vec2 p, float r, float d)\n{\n    p = abs(p);\n    float b = sqrt(r*r-d*d);\n    return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d,0.0))-r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n     vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n     uv.x *= iResolution.x / iResolution.y;\n     \n     vec2 uv0 = uv;\n     \n     vec3 finalColor = vec3(0.0);\n     \n     for(float i = 0.0; i < 3.0; i++){\n         uv = fract(1.35 * uv) - 0.5 ;\n     \n         float d = exp(-length(uv));\n     \n         vec3 color = pallete(length(uv0) + iTime*0.4 + 2.0*sin(iTime));\n     \n         d = sin(8.0*sdVesica(uv, 2.0, 0.25) + iTime)/ 8.0;  //sin(d*8.0 + iTime)/8.0;\n         d = pow(0.01/d, 2.0);\n     \n         color = color * d;\n     \n     \n         finalColor += color * d;\n     }\n     vec4 outColor = vec4(finalColor, 1.0);\n     \n     fragColor = outColor;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"l33yWN","date":"1735067324","viewed":30,"name":"Xeno's first Shader","username":"Xenorosth","description":"Following a tutorial and made small edits, I made this!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}