{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Oblivion by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/XtX3DH\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n/*\n\tMostly showing off animated triangle noise, the idea is to just use\tcombinations\n\tof moving triangle waves to create animated noise. In practice, only very few\n\tlayers of triangle wave basis are needed to produce animated noise that\tis visually\n\tinteresting (using 4 layers here), meaning that this runs considerably faster\n\tthan equivalent animated perlin-style noise and without the need for value noise as input.\n*/\n\n#define ITR 50\n#define FAR 25.\n#define time iTime*2.\n\n#define MSPEED 5.\n#define ROTSPEED .3\n\n#define VOLSTEPS 20\n\n//#define PENTAGRAM_ONLY\n\nfloat hash(in float n){ return fract(sin(n)*43758.5453); }\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}                           \n\nvec3 path(in float t){return vec3(sin(t*.3),sin(t*0.25),0.)*0.3;}\n\nmat2 m2 = mat2( 0.970,  0.242, -0.242,  0.970 );\nfloat triNoise3d(in vec3 p)\n{\n    float z=1.5;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.)*1.;\n        p += (dg+time*0.25);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.1;\n        p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\nfloat map(vec3 p)\n{\n    p -= path(p.z);\n    float d = 1.-length(p.xy);\n    return d;\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float d = 0.;\n    float id = 0.;;\n    for( int i=0; i<ITR; i++ )\n    {\n        if( abs(h)<precis || d>FAR ) break;\n        d += h;\n\t    float res = map(ro+rd*d);\n        h = res;\n    }\n\treturn d;\n}\n\nfloat mapVol(vec3 p)\n{\n    p -= path(p.z);\n    float d = 1.-length(p.xy);\n    d -= triNoise3d(p*0.15)*1.2;\n    return d*0.55;\n}\n\nvec4 marchVol( in vec3 ro, in vec3 rd )\n{\n\tvec4 rz = vec4(0);\n\n\tfloat t = 0.3;\n\tfor(int i=0; i<VOLSTEPS; i++)\n\t{\n\t\tif(rz.a > 0.99)break;\n\n\t\tvec3 pos = ro + t*rd;\n        float r = mapVol( pos );\n\t\t\n        float gr =  clamp((r - mapVol(pos+vec3(.0,.1,.5)))/.5, 0., 1. );\n        vec3 lg = vec3(0.7,0.5,.1)*1.2 + 3.*vec3(1)*gr;\n        vec4 col = vec4(lg,r+0.55);\n        col *= sin(time + pos.z*0.2 + sin(pos.x+pos.y))*0.15+0.88;\n\t\t\n\t\tcol.a *= .2;\n\t\tcol.rgb *= col.a;\n\t\trz = rz + col*(1. - rz.a);\n\t\tt += 0.05;\n\t}\n\trz.b += rz.w*0.2;\n    rz.rg *= mm2(-rd.z*0.09);\n    rz.rb *= mm2(-rd.z*0.13);\n\treturn clamp(rz, 0.0, 1.0);\n}\n\nvec2 tri2(in vec2 p)\n{\n    const float m = 1.5;\n    return vec2(tri(p.x+tri(p.y*m)),tri(p.y+tri(p.x*m)));\n}\n\nfloat triNoise2d(in vec2 p)\n{\n    float z=2.;\n    float z2=1.5;\n\tfloat rz = 0.;\n    vec2 bp = p;\n    rz+= (tri(-time*0.5+p.x*(sin(-time)*0.3+.9)+tri(p.y-time*0.2)))*.7/z;\n\tfor (float i=0.; i<=2.; i++ )\n\t{\n        vec2 dg = tri2(bp*2.)*.8;\n        dg *= mm2(time*2.);\n        p += dg/z2;\n\n        bp *= 1.7;\n        z2 *= .7;\n\t\tz *= 2.;\n\t\tp *= 1.5;\n        p*= m2;\n        \n        rz+= (tri(p.x+tri(p.y)))/z;\n\t}\n\treturn rz;\n}\n\n\nvec3 shadePenta(in vec2 p, in vec3 rd)\n{   \n    p*=2.5;    \n\tfloat rz= triNoise2d(p)*2.;\n    \n    vec2 q = abs(p);\n    float pen1 = max(max(q.x*1.176+p.y*0.385, q.x*0.727-p.y), p.y*1.237);\n    float pen2 = max(max(q.x*1.176-p.y*0.385, q.x*0.727+p.y), -p.y*1.237);\n    float d = abs(min(pen1,pen1-pen2*0.619)*4.28-.95)*1.2;\n    d = min(d,abs(length(p)-1.)*3.);\n    d = min(d,abs(pen2-0.37)*4.);\n    d = pow(d,.7+sin(sin(time*4.1)+time)*0.15);\n    rz = max(rz,d/(rz));\n    \n    vec3 col1 = vec3(.3,0.5,0.45)/(rz*rz);\n    vec3 col2 = vec3(1.,0.5,0.25)/(rz*rz);\n    vec3 col = mix(col1,col2,clamp(rd.z,0.,1.));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n    \n    float ext = smoothstep(0.7, 1.0,2.*tri(time*0.11));\n\tp += vec2(hash(time),hash(time+1.))*0.02*ext;\n    p += vec2(sin(time*1. + cos(time*1.5)),sin(time*2.5+1.))*0.025;\n    float dz = sin(time*ROTSPEED)*8.+1.;\n    vec3 ro = path(time*MSPEED+dz)*.7+vec3(0,0,time*MSPEED);\n    ro.z += dz;\n    ro.y += cos(time*ROTSPEED)*.4;\n    ro.x += cos(time*ROTSPEED*2.)*.4;\n    \n    vec3 tgt = vec3(0,0,time*MSPEED+1.);\n    vec3 eye = normalize( tgt - ro);\n    vec3 rgt = normalize(cross( vec3(0.0,1.0,0.0), eye ));\n    vec3 up = normalize(cross(eye,rgt));\n    vec3 rd = normalize( p.x*rgt + p.y*up + .75*eye );\n\t\n    #ifndef PENTAGRAM_ONLY\n    \n\tfloat rz = march(ro,rd);\n    \n    vec3 pos = ro+rz*rd;\n            \n    vec4 col = marchVol(pos,rd);\n    vec3 ligt = normalize( vec3(-.0, 0., -1.) );\n    vec2 spi = vec2(sin(time),cos(time))*1.;\n    float flick = clamp(1.-abs(((pos.z-time*MSPEED)*0.3+mod(time*5.,30.))-15.),0.,1.)*clamp(dot(pos.xy,spi),0.,1.)*1.7;\n    flick += \t clamp(1.-abs(((pos.z-time*MSPEED)*0.3+mod(time*5.+10.,30.))-15.),0.,1.)*clamp(dot(pos.xy,spi),0.,1.)*2.;\n    flick += \t clamp(1.-abs(((pos.z-time*MSPEED)*0.3+mod(time*5.+20.,30.))-15.),0.,1.)*clamp(dot(pos.xy,spi),0.,1.)*2.;\n    col.rgb += flick*(step(mod(time,2.5),0.2))*.4;\n    col.rgb += flick*(step(mod(time*1.5,3.2),0.2))*.4;\n    \n    col.rgb = mix(col.rgb*col.rgb,col.rgb*shadePenta(p,rd)*1.2, (tri(time*3.5)*0.9+0.1)*ext);\n    \n    #else\n    vec3  col = shadePenta(p,rd);\n    col = pow(col,vec3(1.5))*0.4;\n    #endif\n    \n\tfragColor = vec4( col.rgb, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtX3DH","date":"1421350423","viewed":3317,"name":"Oblivion","username":"nimitz","description":"Thanks to eiffie for the idea of playing with triangle noise in 3d. I wanted to add floating objects but couldn't think of anything, let me know if you have ideas.","likes":74,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","volumetric","trianglenoise","epilepsywarning"],"hasliked":0,"parentid":"","parentname":""}}