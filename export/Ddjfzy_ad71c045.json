{"ver":"0.1","info":{"id":"Ddjfzy","date":"1689852149","viewed":62,"name":"Alien crystal","username":"Algunalien","description":"First shader that plays with audio and colors.\n\nThanks to @kishimisu tutorial.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["colors","fractals","techno","audiovisualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldtGWr","filepath":"https://soundcloud.com/stephanbodzin/02-stephan-bodzin-river","previewfilepath":"https://soundcloud.com/stephanbodzin/02-stephan-bodzin-river","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Assume the sound texture is 512x2, and you want to divide it into n segments\nconst int numSegments = 16;\nconst int texWidth = 512;\nconst int texHeight = 2;\nconst int segmentWidth = texWidth / numSegments;\n\n// Function to get the average value of a segment\nfloat getSegmentAverage(sampler2D tex, int segmentIndex) {\n    float sum = 0.0;\n    for (int x = segmentIndex * segmentWidth; x < (segmentIndex + 1) * segmentWidth; x++) {\n        sum += texelFetch(tex, ivec2(x, 0), 0).x; // Access the red channel (or average all channels)\n    }\n    return sum / float(segmentWidth);\n}\n\n\nvec3 palette(float t)\n{\n//[[1.118 -0.172 3.138] [0.521 -1.236 -0.972] [3.138 -1.682 -0.572] [-0.792 0.628 0.408]]\n    vec3 a = vec3(1.118, -0.172, 3.138);\n    vec3 b = vec3(0.521, -1.236, -0.972);\n    vec3 c = vec3(3.138, -1.682, -0.572);\n    vec3 d = vec3(-0.792, 0.628, 0.408);\n    return a + b * cos(6.28318 * c * t+d);\n}\nvec2 rotateUV(vec2 uv, float rotation)\n{\n    return vec2(\n        cos(rotation) * (uv.x) + sin(rotation) * (uv.y),\n        cos(rotation) * (uv.y) - sin(rotation) * (uv.x)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Access the sound texture\n    float fftData[numSegments];\n    for (int i = 0; i < numSegments; i++) {\n        fftData[i] = getSegmentAverage(iChannel0, i);\n    }\n    \n   \n   //track of the center of the canvas\n   vec2 uv0 = uv;\n   \n   vec3 finalColor = vec3(0.0); \n   \n   uv = rotateUV(uv,iTime*0.1);\n  \n   for(float i = 0.0; i < 2.0; i++){\n       //center of each fraction\n       uv = fract(uv * 1.5 ) - 0.5;\n\n       float d = length(uv) * exp(-length(uv0));\n       \n       vec3 color = palette(length(uv0) * (fftData[2]) + iTime*0.8);\n       d = d * (pow(fftData[0]*1.2,1.2) +sin(iTime)*0.1 + cos(-iTime)*0.2);\n       d = abs(d-0.28);\n\n       d = pow(fftData[10]*0.01/d,1.1);\n\n       color.r *= fftData[0]; \n        \n       finalColor += color * d;\n\n   }\n   finalColor.x += fftData[2] * 0.02;\n   finalColor.y += fftData[9]* 0.02;\n   finalColor.z += fftData[15]* 0.02; \n   \n   fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}