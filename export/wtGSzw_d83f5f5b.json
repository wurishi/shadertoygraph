{"ver":"0.1","info":{"id":"wtGSzw","date":"1582424178","viewed":183,"name":"JoyStick with Flag","username":"icaroleles1","description":"My own version of the Logo of a brazilian game dev group.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14\nvec3 lightPos = vec3(2, 7, 4);\nstruct mat{\n    \n    \n vec3 diffuseColor;\n vec3 specularColor;\n float spec;\n    \n    \n};\n    vec3 baseCubePos = vec3(0,.0,1);\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//iq's SDFs\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat addCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdPlane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat addCube(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.))-.08;\n}\n\nfloat addSphere(vec3 p,vec3 spherePos, float r){\n    \n   float sphereDistance = length(p - spherePos.xyz)-r;   \n    \n    return sphereDistance;\n}\n\n\nvec2 opUnion(vec2 r1, vec2 r2){\n    return r1.x < r2.x ? r1 : r2;\n}\n\nvec2 mapScene(vec3 p){\n    vec2 res;\n\n    vec3 spherePos = vec3(0,3.8,1);\n    float sphere = addSphere(p,spherePos,.6);\n    res = vec2(sphere,1.0);\n    \n    float baseCube = addCube(p-baseCubePos,vec3(2.1,.5,2.1))-.2;\n   \tres = opUnion(res,vec2(baseCube,3.0));\n    \n    vec3 polePos = baseCubePos + vec3(0,2,0);\n    float pole = addCylinder(p-polePos,.3,1.2);\n    res = opUnion(res,vec2(pole,7.0));\n    \n    vec3 buttomPos = p -baseCubePos + vec3(-1.39,-.6,-1.2);\n   // buttom.yz *=Rot(2000.*1.57);\n    float prisma = sdRoundedCylinder( buttomPos,.35,.35,.01);\n    res = opUnion(res,vec2(prisma,4.));\n    \n    \n    \n        vec3 flagPos = p - baseCubePos + vec3(-1.8,-4.6,.6);\n\tvec3 uv = flagPos;\n       //Wave from https://www.shadertoy.com/view/3lyGRd\n         float w = sin((uv.x - uv.y*uv.y - iTime * 2.75 + sin(4.5 * uv.x + 4.5 * uv.y) * PI * .3)\n                  * PI * .6); \n              p.xy *= 1. + (.036 - .036 * w);\n        uv *= 1. + (.036 - .036 * w);\n\n   float flag = addCube(uv,vec3(1.7,.7,.001))*.4;\n    res = opUnion(res,vec2(flag,5.));\n    \n    res = opUnion(res,vec2(p.y,1.1));\n    \n    return res;\n}\n\n\nvec2 rayMarch(vec3 ro,vec3 rd){\n    float dO = 0.;\n    vec2 d;\n    for(int i=0;i<100;i++){\n     vec3 p = ro + rd*dO;\n        d = mapScene(p);\n        \n\n        dO+=d.x;\n        if(d.x >20.0|| d.x<.01)\n            break;\n\n    }\n        float id=d.y;\n        float dist = dO;\n    \n    return vec2(dist,id);\n}\n    \nvec3 getNormal(vec3 p){\n    \n    vec2 d = mapScene(p);\n    \n    vec2 e= vec2(.01,.0);\n    \n    vec3 normal = d.x -vec3(mapScene(p-e.xyy).x,\n                          mapScene(p-e.yxy).x,\n                          mapScene(p-e.yyx).x);\n    \n      \n    return normalize(normal);\n}    \n\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 18;\n    const float delta = 1.5;\n\n    float a = 0.0;\n    float weight = .5;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - mapScene(p + n*d).x);\n        weight *= 0.6;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvec3 shadeScene(vec3 p,vec3 ro,vec3 uv,float geometry){\n    \n\n    \n    vec3 lightDir = normalize(lightPos-p);\n    vec3 normal = getNormal(p);\n    \n    \n    float dist = distance(lightPos,p);\n    float diff = clamp(dot(normal, lightDir), 0., 1.);\n    float d = rayMarch(p+normal*0.02*2., lightDir).x;\n    if(d<length(lightPos-p)) diff *= .1;\n    \n    \n    vec3 eff = vec3(0);\n    vec3 viewDir = normalize(uv-ro);\n    vec3 reflectDir = reflect(-lightDir,normal);\n    vec3 ambient = vec3(.1,.2,.4);\n\n    mat material;\n    \n    if(geometry==-1.0){\n        material.diffuseColor = vec3(0.,.3,.3);\n        material.specularColor = vec3(1);\n        material.spec = .0;\n }\n    else   if(geometry==1.0){\n        \n        material.diffuseColor = vec3(.0,.1,.9);\n        material.specularColor = vec3(1.0);\n        material.spec = 128.0;\n       if(p.z>.88){\n       eff.rg+= .04/length(p.x-.1) ;\n       eff *= .07/length(p.z-1.654)*2.4*eff.r;\n       eff *= .9/length(p.y-3.932)*vec3(.2,.1,.87);\n       }      \n       // eff*=.04/length(p.y);\n  \n\t\t\t\n    }\n   \n    else   if(geometry==1.1){\n \n        material.diffuseColor = vec3(0.4);\n        material.specularColor = vec3(1.0);\n        material.spec = 4.0;\n  \n\t\t\t\n    }\n    \n    else   if(geometry==7.0){\n        \n        material.diffuseColor = vec3(.0,.1,.9);\n        material.specularColor = vec3(.1,.1,.7);\n        material.spec = 128.0;\n         \n  \n\t\t\t\n    }\n  \n    else if(geometry == 3.0){\n       \n        material.diffuseColor = vec3(0.114,.4,.8);\n        material.specularColor = vec3(1);\n        material.spec = 2.;\n         //eff.b+= .57/length(p.x+.55)*eff.g;\n          \n\t\n        \n    }\n      \n    \n   \telse if(geometry ==4.0 ){\n        material.diffuseColor = vec3(1,.9,.0);\n        material.specularColor = vec3(.5,.1,.9);\n        material.spec = 4.;\n  \n    }\n      \n    else if(geometry ==5.0 ){\n        \n      \n        material.specularColor = vec3(.6);\n        material.spec = 2.;\n          \n       \n\n          if(abs(p.y)>4.700000000001){\n           material.diffuseColor= vec3(12,11,0);   \n          }\n          else{\n                         material.diffuseColor= vec3(0,1,0);   \n\n          }\n                \n    }\n     \n    else if(geometry ==6.0 ){\n        \n        material.diffuseColor = vec3(.0,.1,.1);\n        material.specularColor = vec3(.6);\n        material.spec = 4.;\n        \n        \n    }\n    \n    else if(geometry ==7.0 ){\n        \n        material.diffuseColor = vec3(.1,.3,.3);\n        material.specularColor = vec3(.6);\n        material.spec = 256.;\n   \n    }\n    \n    else{\n        \n         material.diffuseColor = vec3(0);\n        material.specularColor = vec3(.6);\n        material.spec = 2.;\n    \t}\n    \n    \n    float itensity = max(dot(viewDir,reflectDir),.0);\n    \n    \n   float spec = pow(itensity,material.spec);\n\n\tdist*=dist;\n    material.diffuseColor*=diff * 1./(dist*.012);\n    material.specularColor*=spec*1./(dist*.012  +.1);\n    \n    float ao = pow(ambientOcclusion(p,normal),2.0);\n    vec3 col =  (material.diffuseColor + material.specularColor) + ambient+  eff ;\n    \n\treturn col*ao;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n#define suncolor vec3(0.7,0.6,0.9)\nvec3 sky(vec3 rd, vec3 sky){\n    float sa=max(dot(rd ,sky),0.0);\n    float v=pow(1.0-(rd.y+.3),8.0);\n    vec3 s=mix(vec3(0.7,0.8,0.9),vec3(0.3,0.3,.8),v);\n        s=s+suncolor*sa*sa*0.6;\n        s=s+suncolor*min(pow(sa,32.0),0.3);\n    return clamp(s,0.0,1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=1.8;\n    vec3 col =vec3(0);\n\n    vec3 ro = vec3(5,5,3.1);\n\tvec3 sun=normalize(vec3(0.08,0.5-0.25,.1));\n\n    ro.xz*=Rot( (iTime*.3));\n   ;\n    vec3 ta = baseCubePos +vec3(0,1.4,0);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 rd = ca *normalize(vec3(uv,1.0));\n    \n    vec2 scene = rayMarch(ro,rd);\n    vec3 point = ro + rd*scene.x;\n    vec3 color   = sky(rd,vec3(0,5,0));\n    \n    if(scene.x<=20. && scene.x>.01)\n            color = shadeScene(point,ro,rd,scene.y);  \n\t\n\n    col+= color;\n\n    // Output to screen\n    float GAMMA = 2.2;\n\n    col = pow(col,vec3(GAMMA));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}