{"ver":"0.1","info":{"id":"NsSGDt","date":"1618080090","viewed":44,"name":"just a cool lookin orb","username":"IMLXH","description":"this happened on accident but it looks badass","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0, 1, 6, 1); // sphere\n    \n    float sphereDist = length(p-s.xyz)-s.w; // s.w is sphere radius i guess\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.01, 0.);\n    float d = GetDist(p);\n    vec3 n = d - vec3(\n        d - GetDist(p-e.xyy),\n        d - GetDist(p-e.yxy),\n        d - GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    return 1.;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS<SURF_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; // OOH you can do this all in one line\n\n    vec3 col = vec3(0);\n    \n    // CAMERA\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p); // diffuse lighting\n    \n    d /= 6.;\n    col = vec3(dif);\n    col = GetNormal(p);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}