{"ver":"0.1","info":{"id":"ldsfDr","date":"1495795667","viewed":286,"name":"Happy Birthday Bytebeat","username":"FractalCurious","description":"No lookup tables, only integer formulas. Not sure why that can be useful (other than obfuscation) since resulting code is not really smaller than the lookup table, but it was fun working on this)","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["bytebeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tblPos = vec2(60., 60.);\nvec2 tblCellSize = vec2(80., 60.);\nvec2 tblBorder = vec2(1., 1.);\nvec2 tblPadding = vec2(22., 23.);\n\nvec2 globCoord;\nvec3 globColor;\n\nvoid rect(float x1, float y1, float x2, float y2, vec3 color)\n{\n    if (globCoord.x > x1 && globCoord.x < x2 && globCoord.y > y1 && globCoord.y < y2) {\n    \tglobColor = color;\n    }\n}\n\nvoid rectByL(float x, float y, float w, float h, vec3 color) {\n\trect(x, y, x + w, y + h, color);\n}\n\nvoid rectByL(vec2 pos, vec2 size, vec3 color) {\n\trect(pos.x, pos.y, pos.x + size.x, pos.y + size.y, color); \n}\n\nvoid drawDigit(int digit, float x, float y, vec3 color)\n{\n    float scale = 1.99;\n    \n    if (digit == 2 || digit == 6 || digit == 8 || digit == 0) {\n    \trectByL(x             , y + 1. * scale, 1. * scale, 2. * scale, color); // segment 5\n    }\n    \n    if (digit == 4 || digit == 5 || digit == 6 || digit == 8 || digit == 9 || digit == 0) {\n    \trectByL(x             , y + 4. * scale, 1. * scale, 2. * scale, color); // segment 6\n    }\n    \n    if (digit == 1 || digit == 2 || digit == 3 || digit == 4 || digit == 7 || digit == 8 || digit == 9 || digit == 0) {\n    \trectByL(x + 3. * scale, y + 4. * scale, 1. * scale, 2. * scale, color); // segment 2\n    }\n    \n    if (digit == 1 || digit == 3 || digit == 4 || digit == 5 || digit == 6 || digit == 7 || digit == 8 || digit == 9 || digit == 0) {\n    \trectByL(x + 3. * scale, y + 1. * scale, 1. * scale, 2. * scale, color); // segment 3\n    }\n    \n    if (digit == 2 || digit == 3 || digit == 5 || digit == 6 || digit == 8 || digit == 9 || digit == 0) {\n    \trectByL(x + 1. * scale, y             , 2. * scale, 1. * scale, color); // segment 4\n    }\n    \n    if (digit == 2 || digit == 3 || digit == 4 || digit == 5 || digit == 6 || digit == 8 || digit == 9 ) {\n    \trectByL(x + 1. * scale, y + 3. * scale, 2. * scale, 1. * scale, color); // segment 7\n    }\n    \n    if (digit == 2 || digit == 3 || digit == 5 || digit == 6 || digit == 7 ||digit == 8 || digit == 9 || digit == 0) {\n    \trectByL(x + 1. * scale, y + 6. * scale, 2. * scale, 1. * scale, color); // segment 1\n    }\n}\n\nvoid drawInt(int number, vec2 pos, vec3 color)\n{\n    float scale = 1.99;\n    \n    if (number < 0) {\n    \trectByL(pos.x + 1. * scale, pos.y + 3. * scale, 2.5 * scale, 1. * scale, color);\n        \n        number = - number;\n    }\n    \n    drawDigit(number % 10, pos.x + 15. * scale, pos.y, color);\n    drawDigit(number / 10 % 10, pos.x + 10. * scale, pos.y, color);\n    drawDigit(number / 100 % 10, pos.x + 5.* scale, pos.y, color);\n}\n\nint notes(int t0) {\n    \n    int t = t0 >> 14;\n    \n    int Qzm = t % 24 % 18 / 17;\n    int Qbdm = t % 6 / 3;\n    \n    int Qbd = 2 * (t & 2) - 8 * (21 - t % 12 & 6) + 192;\n    \n    int Qa = 240 - 24 * (t & 1);\n    \n    int Q3d = 3 * ((t % 24 * 21 - 375) % 25 * (t / 6 & 1) + (1 + t & 2) * 16);\n    \n    int result = Qbdm * Qbd + 24 * Qzm + (1 - Qbdm) * (Qa - t % 24 / 12 * Q3d);\n    \n    return result; \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tglobColor = vec3(0., 0., 0.);\n    globCoord = fragCoord;\n    \n    rectByL(tblPos, vec2(tblCellSize.x * 6., tblCellSize.y * 4.), vec3(1., 1., 1.));\n    \n    for (int t2 = 0; t2 < 24; t2++) {\n        \n        int x = t2 % 6;\n        int y = (23 - t2) / 6;\n        \n        vec2 cellPos = tblPos + vec2(float(x) * tblCellSize.x, float(y) * tblCellSize.y);\n        \n    \trectByL(cellPos + tblBorder, tblCellSize - 2. * tblBorder, vec3(.1, .1, .1));\n        drawInt(t2, cellPos + vec2(2., 2.), vec3(1., 0., 0.));\n        drawInt(notes(t2 << 46), cellPos + tblBorder + tblPadding, vec3(1., 1., .5));\n    }\n    \n\tfragColor = vec4(globColor, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int notes(int t0) {\n    \n    int t = t0 >> 14;\n    \n    int Qzm = t % 24 % 18 / 17;\n    int Qbdm = t % 6 / 3;\n    \n    int Qbd = 2 * (t & 2) - 8 * (21 - t % 12 & 6) + 192;\n    \n    int Qa = 240 - 24 * (t & 1);\n    \n    int Q3d = 3 * ((t % 24 * 21 - 375) % 25 * (t / 6 & 1) + (1 + t & 2) * 16);\n    \n    int result = Qbdm * Qbd + 24 * Qzm + (1 - Qbdm) * (Qa - t % 24 / 12 * Q3d);\n    \n    return result; \n}\n\nvec2 mainSound( in int samp,float time)\n{\n    int t = int(time * iSampleRate);\n    return vec2((t / notes(t) & 1) - 1);\n}","name":"Sound","description":"","type":"sound"}]}