{"ver":"0.1","info":{"id":"MstSzj","date":"1460393709","viewed":615,"name":"Sinefield 2","username":"halcy","description":"200% bullshit powered\n\nneeds audio, looks bad without","likes":18,"published":1,"flags":65,"usePreview":1,"tags":["music","sync","sines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdjSzy","filepath":"https://soundcloud.com/edmtunestv/thefatrat-unity","previewfilepath":"https://soundcloud.com/edmtunestv/thefatrat-unity","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Twiddle these knobs:\nconst float GLOWINESS = 212.0;\nconst float FLOOR_STRETCH = 150.0;\nconst float SKY_STRETCH = 4.0;\nconst float FLOOR_ZPART_MUL = 0.01;\nconst float FLOOR_ZPART_STRETCH = 3.0;\nconst float HEIGHT_OVER_FLOOR = 1.0;\nconst float SINE_Z_DIVIDE = 3.0;\nconst float BASSVAL_MULT = 0.5;\nconst float BASSVAL_EXP = 2.5;\nconst float TEXVAL_MULT = 0.5;\n\n// WAHas Spectrum analyzer palette\nvec3 palette(float i){\n\tif(i<4.0){\n\t\tif(i<2.0){\n\t\t\tif(i<1.0) return vec3(0.0,0.0,0.0);\n\t\t\telse return vec3(1.0,3.0,31.0);\n\t\t}\n        else {\n\t\t\tif(i<3.0) return vec3(1.0,3.0,53.0);\n\t\t\telse return vec3(28.0,2.0,78.0);\n\t\t}\n\t} \n    else if(i<8.0) {\n\t\tif(i<6.0) {\n\t\t\tif(i<5.0) return vec3(80.0,2.0,110.0);\n\t\t\telse return vec3(143.0,3.0,133.0);\n\t\t}\n\t\telse {\n\t\t\tif(i<7.0) return vec3(181.0,3.0,103.0);\n\t\t\telse return vec3(229.0,3.0,46.0);\n\t\t}\n\t}\n\telse {\n\t\tif(i<10.0) {\n\t\t\tif(i<9.0) return vec3(252.0,73.0,31.0);\n\t\t\telse return vec3(253.0,173.0,81.0);\n\t\t}\n\t\telse if(i<12.0) {\n\t\t\tif(i<11.0) return vec3(254.0,244.0,139.0);\n\t\t\telse return vec3(239.0,254.0,203.0);\n\t\t}\n\t\telse {\n\t\t\treturn vec3(242.0,255.0,236.0);\n\t\t}\n\t}\n}\n\n// Palette usage function\nvec4 colour(float c) {\n\tc*=12.0;\n\tvec3 col1=palette(c)/256.0;\n\tvec3 col2=palette(c+1.0)/256.0;\n\treturn vec4(mix(col1,col2,c-floor(c)),1.0);\n}\n\n// Actual rendered thing\nfloat distfunc(vec3 pos) {\n    float actz = pos.z - iTime*10.0;\n    float skyz = pos.y - abs(pos.z) * 0.001;\n    float sky = skyz < 0.0 ? 1.0 : 1.0 - pow(abs(pos.x / 80.0) * skyz, 0.3);\n    float texpos = -cos(actz / FLOOR_ZPART_STRETCH) * FLOOR_ZPART_MUL + (sin(abs(pos.x / FLOOR_STRETCH)) + 1.0) / 2.0;\n    float texval = pow(clamp(texture(iChannel1, vec2(texpos,0.0)).r, 0.0, 1.0), 2.0) * 10.0;\n    float bassval = texture(iChannel1, vec2(0.01,0.0)).r +\n                    texture(iChannel1, vec2(0.03,0.0)).r +\n                    texture(iChannel1, vec2(0.06,0.0)).r;\n    bassval = pow(bassval, BASSVAL_EXP);\n    bassval += 4.0;\n    float dist = (cos(pos.x) + cos(pos.z / SINE_Z_DIVIDE)) + texval * TEXVAL_MULT + pos.y + HEIGHT_OVER_FLOOR + bassval * BASSVAL_MULT;\n    return(dist * sky);\n}\n\n// For ray fuzzing, from some other shader\nvec3 hash33(vec3 p){ \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n); \n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir ) {\n    vec2 coords=(2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n\n\tvec3 ray_dir=fragRayDir;\n\tvec3 ray_pos=vec3(0.0,-3.0,iTime*10.0) + fragRayOri - vec3(0.0, 1.0, 0.0);\n    \n    \n\tray_dir += hash33(ray_dir) * 0.005 * length(coords);\n\tfloat a=sin(-3.14 * iTime * 0.05) * 10.0;\n\n\tfloat i=512.0;\n\tfor(int j=0;j<512;j++)\n\t{\n\t\tfloat dist=distfunc(ray_pos);\n\t\tray_pos+=dist*ray_dir*0.3;\n\n\t\tif(abs(dist)<0.01) { i=float(j); break; }\n\t}\n    \n    float skyz = ray_pos.y - abs(ray_pos.z) * 0.001;\n    float sky = skyz < 0.0 ? clamp(abs(skyz / 5.0), 0.0, 1.0) : 1.0 - pow(abs(ray_pos.x / 80.0) * skyz, 0.3);\n    float skytex = texture(iChannel0, ray_dir.xy).r;\n     \n\tfloat c = i/(512.0 - GLOWINESS);\n    float bval = texture(iChannel1, vec2(abs(coords.x / SKY_STRETCH), 0.0)).r * 2.0 + 0.5;\n\tfragColor = colour(c * bval);\n    fragColor += colour(clamp(skytex - 0.3, 0.0, 1.0)) * (1.0 - sky);\n    fragColor = fragColor * clamp(mod(fragCoord.y, 2.0),  .7, 1.0); \n}\n\n// Actual rendering\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tvec2 coords=(2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n\n\tvec3 ray_dir=normalize(vec3(coords.x, coords.y - 0.1, 1.0+0.0*sqrt(coords.x*coords.x+coords.y*coords.y)));\n\tvec3 ray_pos=vec3(0.0,-3.0,iTime*10.0);\n    \n    \n\tray_dir += hash33(ray_dir) * 0.005 * length(coords);\n\tfloat a=sin(-3.14 * iTime * 0.05) * 10.0;\n\n\tfloat i=512.0;\n\tfor(int j=0;j<512;j++)\n\t{\n\t\tfloat dist=distfunc(ray_pos);\n\t\tray_pos+=dist*ray_dir*0.3;\n\n\t\tif(abs(dist)<0.01) { i=float(j); break; }\n\t}\n    \n    float skyz = ray_pos.y - abs(ray_pos.z) * 0.001;\n    float sky = skyz < 0.0 ? clamp(abs(skyz / 5.0), 0.0, 1.0) : 1.0 - pow(abs(ray_pos.x / 80.0) * skyz, 0.3);\n    float skytex = texture(iChannel0, ray_dir.xy).r;\n     \n\tfloat c = i/(512.0 - GLOWINESS);\n    float bval = texture(iChannel1, vec2(abs(coords.x / SKY_STRETCH), 0.0)).r * 2.0 + 0.5;\n\tfragColor = colour(c * bval);\n    fragColor += colour(clamp(skytex - 0.3, 0.0, 1.0)) * (1.0 - sky);\n    fragColor = fragColor * clamp(mod(fragCoord.y, 2.0),  .7, 1.0); \n}   \n  \n\n\n","name":"Image","description":"","type":"image"}]}