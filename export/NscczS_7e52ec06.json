{"ver":"0.1","info":{"id":"NscczS","date":"1653586364","viewed":164,"name":"IGNITION","username":"EDragon","description":"the normal maplestory tradition\nnot the greatest but eh, it's done","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["easing","maplestory","recreation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define s smoothstep\n#define res iResolution.xy\n#define t iTime\n#define pi 3.1415\n\nfloat num = 25.;\n\nfloat s2(float uv, float a){\n    return s(-a, -a+.003, -uv);\n}\n\nmat2 rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat I(vec2 uv){\n    float i = s2(abs(uv.x), .03)*s2(abs(uv.y-uv.x), .15);\n    return min(i, 1.);\n}\n\nfloat G(vec2 uv){\n    float g = s2(abs(uv.x), .075);\n    g *= s2(abs(uv.y-uv.x*.8), .18);\n    g *= s2(abs(uv.y+uv.x*.8), .18);\n    g *= 1.-s2(abs(uv.x), .03)*s2(abs(uv.y+uv.x*.8), .1)\n    *(1.-s2(uv.y-uv.x*.8, -.042)*s2(-.03, uv.x+uv.y*1.2));\n    g *= 1.-s2(abs(uv.x-.05), .03)*s2(abs(uv.y-uv.x*.8+.005), .04);\n\n    return min(g, 1.);\n}\n\nfloat N(vec2 uv){\n    float d = .06;\n    float n = s2(abs(uv.x+d), .03)*s2(abs(uv.y-uv.x-d), .15)*s2(uv.x,.0);\n    n += s2(abs(uv.x-d), .03)*s2(abs(uv.y-uv.x+d), .15)*s2(.0,uv.x);\n    n += s2(abs(uv.y-.1)-uv.x-.11, .0)*s2(uv.x,-.08)*s2(.1,uv.y);\n    uv *= rot(pi*.395);\n    n += s2(abs(uv.y),.03)*s2(abs(uv.x),.19)*s2(abs(uv.y+uv.x*2.), .33);\n    return min(n, 1.);\n}\n\nfloat T(vec2 uv){\n    float d = .15;\n    float t = s2(abs(uv.x), .03)*s2(abs(uv.y-uv.x), .15);\n    t += s2(abs(uv.y-d), .03)*s2(abs(uv.y-uv.x-d+.015), .12);\n    return min(t, 1.);\n}\n\nfloat O(vec2 uv){\n    float d = .03;\n    float o = step(abs(uv.x), .12);\n    o *= step(abs(uv.y-uv.x), .175)*(step(d, abs(uv.x+d))+(step(uv.y, .0)));\n    o *= step(abs(uv.y+uv.x), .175);\n    o *= 1.-(step(abs(uv.y-uv.x), .06))*step(abs(uv.y+uv.x), .06);\n    o *= 1.-step(abs(uv.y+uv.x+.04), .02)*step(.0, uv.x);\n    \n    uv *= rot(pi*-.25);\n    o += step(abs(uv.x-.083), .041)*step(abs(uv.y-uv.x+.06), .1);\n    uv *= rot(pi*+.25);\n    o += step(abs(uv.x-.005), .0335)*step(uv.y-uv.x-.13, .1)*step(-.05, uv.y+uv.x-.15);\n\n    return min(o, 1.);\n}\n\n\nfloat fire(vec2 uv, vec2 size){\n    uv *= size;\n    float i = s2(abs(uv.x), .075)*s2(abs(uv.y-uv.x), .175)*s2(abs(uv.y+uv.x), .175);\n    return min(i, 1.);\n}\n\nfloat rand(float f){\n    return fract(sin(f*254.343)*532.327);\n}\n\nfloat ember(vec2 uv, float brightness, float num){\n    float flare;\n    float d, b;\n    float a = res.x/res.y;\n\n    for (float i; i<=num; i++){\n        b = (brightness*rand(i*362.123))*(sin(t*rand(i*135.13)*10.)*.5+.75);\n        d = b/length(uv-vec2(\n            sin(t*1.+i)*.1+mix(-.5*a, .5*a, rand(i+1.)),\n            fract(t*mix(.3, 1., rand(i))*.2+i*.63542)*1.5-.75)\n        );\n        flare += d;\n    }\n    return flare;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*res)/res.y;\n    vec2 ouv = uv;\n    uv.x -= .02; // I am not moving everything AGAIN\n    vec2 uv2 = uv;\n    vec2 uv3 = uv;\n    vec2 auv = uv;\n    vec2 auv2 = uv;\n    vec2 auv3 = uv;\n\n    vec3 col = vec3(0.75,0.,0.2);\n    \n    uv2.y += .025*sin(uv2.x+t);\n    uv3.y += .050*sin(uv3.x+t*1.5);\n\n    auv *= rot(pi*-.265);\n    auv2 *= rot(pi*.735);\n    auv3 *= rot(pi*-.25);\n    \n    vec2 po = vec2(.257, -.21);\n    vec2 po2 = vec2(-.338, .465);\n    vec2 po3 = vec2(.4365, -.1575);\n    col += 2.*vec3(s(.25, -2., uv.y),s(.4, -1., uv.y)*0.506,s(.5, -1., uv.y)*0.102);\n    col += s(-.25, -1., uv2.y)*1.;\n    col += s(-.25, -1., uv3.y)*1.;\n    \n    auv.x *= step(uv.x, .4);\n    auv2.x *= step(.45, uv.x);\n    auv3.x *= step(uv.x, .5);\n    \n    col += I(uv-vec2(-.825, .0));\n    col += G(uv-vec2(-.65, .0));\n    col += N(uv-vec2(-.415, .0));\n    col += I(uv-vec2(-.22, .0));\n    col += T(uv-vec2( .0, .0));\n    col += I(uv-vec2( .2251, .0));\n    float o = O(uv-vec2( .45, -.0075));\n    col += o\n    *vec3(s(1., -1., uv2.y), s(.6, -1., uv2.y), s(.15, -1., uv2.y))*2.\n    *vec3(s(-1., .0, uv2.y))\n    *vec3((1.-s(2.5, 2.75, atan(auv.x-po.x, auv.y-po.y))*.5))\n    *vec3((1.-s(2.5, 2.75, atan(auv2.x-po2.x, auv2.y-po2.y))*.5))\n    *vec3((1.-s(2.5, 2.75, atan(auv3.x-po3.x, auv3.y-po3.y))*.5));\n    col += N(uv-vec2( .725, .0));\n    \n    vec2 f1 = vec2(.65, -.45);\n    vec2 f2 = vec2(-.6, -.43);\n    vec2 f3 = vec2(-.1, -.4);\n    vec2 f4 = vec2(.2, -.45);\n    vec2 f5 = vec2(-.4, -.5);\n\n    vec2 s1 = vec2(.5, 10.);\n    vec2 s2 = vec2(.5, 10.);\n    vec2 s3 = vec2(.5, 10.);\n    vec2 s4 = vec2(.5, 10.);\n    vec2 s5 = vec2(.5, 10.);\n    \n    float loop1 = mod(t, 4.);\n    float loop2 = mod(t+3.1235, 4.);\n    float loop3 = mod(t+2.35, 4.);\n    float loop4 = mod(t+1., 4.);\n    float loop5 = mod(t+2., 4.);\n    \n    f1.y += linear(.0, 4., 1.25, loop1);\n    s1.y -= outExpo(0., .5, 8.5, loop1); \n    s1.x += outCubic(0., .5, 1., loop1);\n    \n    f2.y += linear(.0, 4., 1.25, loop2);\n    s2.y -= outExpo(.0, .5, 8.5, loop2); \n    s2.x += outCubic(.0, .5, 1.5, loop2);\n    \n    f3.y += linear(.0, 4., 1.25, loop3);\n    s3.y -= outExpo(.0, .5, 8., loop3); \n    s3.x += outCubic(.0, .5, 2., loop3);\n    \n    f4.y += linear(.0, 4., 1.25, loop4);\n    s4.y -= outExpo(.0, .5, 8., loop4); \n    s4.x += outCubic(.0, .5, 1.75, loop4);\n    \n    f5.y += linear(.0, 4., 1.25, loop5);\n    s5.y -= outExpo(.0, .5, 8., loop5); \n    s5.x += outCubic(.0, .5, 2., loop5);\n    \n    \n    for (float i; i <= 3.; i++){\n        s1.x -= inOutCubic(.0+i, 1., .25, loop1);\n        s1.y += inOutCubic(.0+i, 1., .25, loop1);\n        s1.x += inOutCubic(.5+i, 1., .25, loop1);\n        s1.y -= inOutCubic(.5+i, 1., .25, loop1);\n        \n        s2.x -= inOutCubic(.0+i, 1., .35, loop2);\n        s2.y += inOutCubic(.0+i, 1., .35, loop2);\n        s2.x += inOutCubic(.5+i, 1., .35, loop2);\n        s2.y -= inOutCubic(.5+i, 1., .35, loop2);\n        \n        s3.x -= inOutCubic(.0+i, 1., .25, loop3);\n        s3.y += inOutCubic(.0+i, 1., .25, loop3);\n        s3.x += inOutCubic(.5+i, 1., .25, loop3);\n        s3.y -= inOutCubic(.5+i, 1., .25, loop3);\n        \n        s4.x -= inOutCubic(.0+i, 1., .4, loop4);\n        s4.y += inOutCubic(.0+i, 1., .4, loop4);\n        s4.x += inOutCubic(.5+i, 1., .4, loop4);\n        s4.y -= inOutCubic(.5+i, 1., .4, loop4);\n        \n        s5.x -= inOutCubic(.0+i, 1., .4, loop5);\n        s5.y += inOutCubic(.0+i, 1., .4, loop5);\n        s5.x += inOutCubic(.5+i, 1., .4, loop5);\n        s5.y -= inOutCubic(.5+i, 1., .4, loop5);\n    }\n    \n    col += fire(uv-f1, s1)*.20;\n    col += fire(uv-f2, s2)*.15;\n    col += fire(uv-f3, s3)*.05;\n    col += fire(uv-f4, s4)*.10;\n    col += fire(uv-f5, s5)*.20;\n    \n    col += ember(ouv, .01, num)\n    *3.*vec3(s(.25, -2., uv.y),s(.4, -1., uv.y)*0.506,s(.5, -1., uv.y)*0.102);\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Shoutout to easings.net\n\n#define pi 3.1415\n#define tr start,dur,x\n#define par float start, float dur, float p, float x\n\n// writing start,dur,x everywhere gets annoying\n\nfloat c(float x){\n    return max(0., min(1., (x - .0) / (1. - .0)));\n}\n\nfloat o(float x){\n    return clamp(x,-1., .0);\n}\n\nfloat ease(float easing, float start, float dur, float x){\n    start += 1.;\n    if (x >= start - 1. && x <= start){\n        return easing;\n    }else return o(x - start) + 1.;\n}\n\nfloat linear(par){\n    start /= dur; x /= dur;\n    return p*ease(x - start,tr);\n}\n\nfloat inSine(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - cos(((x - start) * pi) / 2.),tr);\n}\n\nfloat outSine(par){\n    start /= dur; x /= dur;\n    return p*ease(sin(((x - start) * pi) / 2.),tr);\n}\n\n// I am pretty sure doing inEase + outEase would give the same result\n// but whatev, I've already wrote everything out\n\nfloat inOutSine(par){\n    start /= dur; x /= dur;\n    return p*ease(-(cos(pi * (x - start)) - 1.) / 2., tr);\n}\n\nfloat outInSine(par){\n    start /= dur; x /= dur;\n    return p*outSine(start, .5, .5, x) + p*inSine(start + .5, .5, .5, x);\n}\n\nfloat inQuad(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 2.),tr);\n}\n\nfloat outQuad(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(1. - (x - start), 2.),tr);\n}\n\nfloat inOutQuad(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5 \n    ? p*ease(2. * ((x - (start * 1.)) * (x - (start * 1.))),tr)\n    : p*ease(1. - pow(-2. * (x - (start * 1.)) + 2., 2.) / 2.,tr);\n}\n\nfloat outInQuad(par){\n    start /= dur; x /= dur;\n    return p*outQuad(start, .5, .5, x) + p*inQuad(start + .5, .5, .5, x);\n}\n\n\nfloat inCubic(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 3.),tr);\n}\n\nfloat outCubic(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow( 1. - (x - start), 3.),tr);\n}\n\nfloat inOutCubic(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5\n    ? p*ease(4. * (x - start) * (x - start) * (x - start), tr)\n    : p*ease(1. - pow(-2. * (x - start) + 2., 3.) / 2., tr);\n}\n\nfloat outInCubic(par){\n    start /= dur; x /= dur;\n    return p*outCubic(start, .5, .5, x) + p*inCubic(start+.5, .5, .5, x);\n}\n\nfloat inQuart(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 4.),tr);\n}\n\nfloat outQuart(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(1. - (x - start), 4.), tr);\n}\n\nfloat inOutQuart(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5 \n    ? p*ease(8. * pow(x - start, 4.), tr)\n    : p*ease(1. - pow(-2. * (x - start) + 2., 4.) / 2., tr);\n}\n\nfloat outInQuart(par){\n    start /= dur; x /= dur;\n    return p*outQuart(start, .5, .5, x) + p*inQuart(start + .5, .5, .5, x);\n}\n\nfloat inQuint(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(x - start, 5.),tr);\n}\n\nfloat outQuint(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(1. - (x - start), 5.), tr);\n}\n\nfloat inOutQuint(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5 \n    ? p*ease(16. * pow(x - start, 5.), tr)\n    : p*ease(1. - pow(-2. * (x - start) + 2., 5.) / 2., tr);\n}\n\nfloat outInQuint(par){\n    start /= dur; x /= dur;\n    return p*outQuint(start, .5, .5, x) + p*inQuint(start + .5, .5, .5, x);\n}\n\nfloat inExpo(par){\n    start /= dur; x /= dur;\n    return p*ease(pow(2., 10. * (x - start) - 10.),tr);\n}\n\nfloat outExpo(par){\n    start /= dur; x /= dur;\n    return p*ease(1. - pow(2., -10. * (x - start)), tr);\n}\n\nfloat inOutExpo(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5\n    ? p*ease(pow(2., 20. * (x - start) - 10.) / 2., tr)\n    : p*ease((2. - pow(2., -20. * (x - start) + 10.)) / 2., tr);\n}\n\nfloat outInExpo(par){\n    start /= dur; x /= dur;\n    return p*outExpo(start, .5, .5, x) + p*inExpo(start + .5, .5, .5, x);\n}\n\nfloat inCirc(par){\n    start /= dur; x /= dur;\n    return p*ease(c(1. - sqrt(1. - pow(x - start, 2.))), tr);\n}\n\nfloat outCirc(par){\n    start /= dur; x /= dur;\n    return p*ease(c(sqrt(1. - pow(x - start - 1., 2.))), tr);\n}\n\nfloat inOutCirc(par){\n    start /= dur; x /= dur;\n    return x - (start - 1.) < 1.5\n    ? p*ease((1. - sqrt(1. - pow(2. * x - start * 2., 1.))) / 2., tr)\n    : p*ease((sqrt(1. - pow(-2. * x + start * 2. + 2., 2.)) + 1.) / 2., tr);\n}\n\nfloat outInCirc(par){\n    start /= dur; x /= dur;\n    return p*outCirc(start, .5, .5, x) + p*inCirc(start + .5, .5, .5, x);\n}\n\nfloat inBack(par, float c1){\n    start /= dur; x /= dur;\n    if (c1 < .0) {\n        c1 = 1.70158;\n    }\n    float c3 = c1 + 1.;\n    \n    return p*ease(c3 * pow((x - start), 3.) - c1 * pow((x - start), 2.), tr);\n}\n\nfloat outBack(par, float c1){\n    start /= dur; x /= dur;\n    if (c1 < .0) {\n        c1 = 1.70158;\n    }\n    float c3 = c1 + 1.;\n    \n    return p*ease(1. + c3 * pow((x - start) - 1., 3.) + c1 * pow((x - start) - 1., 2.), tr);\n}\n\nfloat inOutBack(par){\n    start /= dur; x /= dur;\n    float c1 = 1.70158;\n    float c2 = c1 * 1.525;\n    \n    return x - (start - 1.) < 1.5\n    ? p*ease((pow(2. * (x - start), 2.) * ((c2 + 1.) * 2. * (x - start) - c2)) / 2., tr)\n    : p*ease((pow(2. * (x - start) - 2., 2.) * ((c2 + 1.) * ((x - start) * 2. - 2.) + c2) + 2.) / 2., tr);\n}\n\nfloat outInBack(par, float c1){\n    start /= dur; x /= dur;\n    return p*outBack(start, .5, .5, x, c1) + p*inBack(start + .5, .5, .5, x, c1);\n}\n\nfloat inElastic(par){\n    start /= dur; x /= dur;\n    float c4 = (2. * pi) / 3.;\n    \n    return p*ease(-pow(2., 10. * (x - start) - 10.) * sin(((x - start) * 10. - 10.75) * c4), tr);\n}\n\nfloat outElastic(par){\n    start /= dur; x /= dur;\n    float c4 = (2. * pi) / 3.;\n    \n    return p*ease(pow(2., -10. * (x - start)) * sin(((x - start) * 10. - 0.75) * c4) + 1., tr);\n}\n\nfloat inOutElastic(par){\n    start /= dur; x /= dur;\n    float c5 = (2. * pi) / 4.5;\n    \n    return x - (start - 1.) < 1.5\n      ? p*ease(-(pow(2., 20. * (x - start) - 10.) * sin((20. * (x - start) - 11.125) * c5)) / 2., tr)\n      : p*ease((pow(2., -20. * (x - start) + 10.) * sin((20. * (x - start) - 11.125) * c5)) / 2. + 1., tr);\n}\n\nfloat outInElastic(par){\n    start /= dur; x /= dur;\n    return p*outElastic(start, .5, .5, x) + p*inElastic(start + .5, .5, .5, x);\n}\n","name":"Common","description":"","type":"common"}]}