{"ver":"0.1","info":{"id":"WdtBRS","date":"1605434684","viewed":485,"name":"Julia Fractal Orbit Trap","username":"JuliaPoo","description":"A small doodle bcuz I'm bored","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["julia","orbit","trap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 500\n#define INF 100.\n\n#define col1 vec3(1., .3, .4)\n#define col2 vec3(.4, 1., .2)\n#define col3 vec3(.3, .4, 1.)\n\nfloat trap(in vec2 uv, in vec2 p) {\n    float txt = texture(iChannel0, uv).x;\n    return distance(uv, p) * (txt + 1.);\n}\n\nfloat shake(float off)\n{\n    return sin(iTime*.5 + off) + .2*sin(iTime*.7+.5 + off*.3) + .1*sin(iTime+.3 + off*.7);\n}\n\nvec3 render(in vec2 uv)\n{\n    float s = .13*sin(iTime*.3);\n    vec2 c = vec2(-0.77568377,0.134646737) + s*s;\n    int i = 0;\n    \n    float mdist1 = INF; float mdist2 = INF; float mdist3 = INF;\n    float dist1, dist2, dist3; \n    for (i=0; i<MAX_ITER; ++i)\n    {\n        if (uv.x*uv.x + uv.y*uv.y > 4.) break;\n        \n        uv = vec2(uv.x*uv.x - uv.y*uv.y, 2.*uv.x*uv.y) + c;\n        \n        dist1 = trap(uv, vec2(0.,0.));\n        dist2 = trap(uv, vec2(0.,.5));\n        dist3 = trap(uv, vec2(.5,0.));\n        \n        if (mdist1 > dist1) mdist1 = dist1;\n        if (mdist2 > dist2) mdist2 = dist2;\n        if (mdist3 > dist3) mdist3 = dist3;\n    }\n    \n    // Compute smooth iteration:\n    // https://iquilezles.org/articles/msetsmooth\n    float iter = float(i) - log2(log2(dot(uv,uv))) + 4.0;\n    iter /= float(MAX_ITER);\n    \n    vec3 col = mdist1*col1 + mdist2*col2 + mdist3*col3;\n    col *= (cos(iter*1.57)+.6)/2.;\n    col *= col;\n    col = 1.-col;\n    \n    return clamp(vec3(col), 0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s1, s2;\n    s1 = shake(0.); s2 = shake(1.5);\n    \n    vec2 uv = (1.9 + .1*s1)*(fragCoord/iResolution.xy - .5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = render(uv);\n    vec3 w = vec3(2.,.2,.1);\n    col += vec3(.1,-.7,.2)*(length(w) - dot(col, w));\n    col = pow(col, vec3(1., 1.5, 1.9));\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}