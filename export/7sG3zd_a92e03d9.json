{"ver":"0.1","info":{"id":"7sG3zd","date":"1631958550","viewed":256,"name":"snowflake lattice","username":"pali6","description":"It's the previous project but now all layers overlaid on top of each other and inverted pretty much.","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["tiling","penrose"],"hasliked":0,"parentid":"fdyGz3","parentname":"tiling that has neat gradients"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DEPTH 21\n#define PHI ((1. + sqrt(5.)) / 2.)\n#define PI 3.141592653589\n//#define DEPTH int(round(16. - 7. * cos(iTime / 5.)))\n\n\n#define S(M, O) (0.5 + 0.5 * sin(O + M * pos.x)) / 6.\n#define C(M, O) (0.5 + 0.5 * cos(O + M * pos.y)) / 6.\n\nvec2 rotate(vec2 v, float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nbool onRight(vec2 a, vec2 b, vec2 x)\n{\n    return cross(vec3(a - b, 0), vec3(x - b, 0)).z > 0.;\n}\n\nfloat cr(vec2 a, vec2 b)\n{\n    return a.x * b.y - b.x * a.y;\n}\n\nfloat cr(vec2 a, vec2 b, vec2 c)\n{\n    return cr(b - a, c - b);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = fragCoord / iResolution.xx;\n    \n    float scale = 72. + 18. * sin(iTime / 10.) + 20. * sin(4. + iTime / 15.) + 30. * sin(iTime / 6.);\n    vec2 camPos = vec2(0.5, 0.5);\n    float SF = 1. / pow(scale, 0.3);\n    camPos += vec2(0.02 * sin(iTime / 15.), -0.07 * cos(iTime / 19.)) * SF;\n    camPos += vec2(-0.1 * sin(3. + iTime / 37.), -0.1 * cos(4. + iTime / 27.)) * SF;\n    camPos += vec2(0.07 * sin(9. + iTime / 47.), -0.08 * cos(20. + iTime / 31.)) * SF;\n    camPos += vec2(0.04 * sin(19. + iTime / 7.), 0.06 * cos(25. + iTime / 5.)) * SF;\n    \n    pos -= vec2(0.5, 0.5);\n    pos = rotate(pos, iTime / 30. + PI * cos(iTime / 37.) + 2. * PI * sin(iTime / 87. + 10.));\n    pos /= scale;\n    pos += camPos;\n    \n    vec2 ota = vec2(-1., 0.);\n    vec2 otb = vec2(2., 0.);\n    \n    vec2 ta = ota;\n    vec2 tb = otb;\n    vec2 tc;\n    bool gn = true;\n    float fl = -1.;\n    \n    float f = 0.;\n    \n    // vec2 otc;\n    \n    float nDark = 0.;\n    \n    for(int i = 0; i < DEPTH; i++)\n    {\n        vec2 next;\n        if(gn)\n            tc = ta + rotate(tb - ta, fl * PI / 5.) / PHI;\n        else\n            tc = ta + rotate(tb - ta, fl * 2. * PI / 5.) * PHI;\n            \n        if(!(gn && min(length(pos - ta), length(pos - tb)) > length(ta - tb) / 3. || \\\n          !gn && length(pos - tb) <= length(tc - tb) * PHI / 3.5))\n        {\n            nDark += 1.;\n        }\n        \n        \n        if(gn)\n        {\n            next = tb + (ta - tb) / PHI;\n            if(abs(cr(next, tc, pos)) * float(i + 1) < 0.000001)\n                f = 1.;\n            if(cr(next, tc, pos) * cr(next, tc, tb) > 0.)//onRight(next, tc, pos))\n            {\n                gn = false;\n                ta = next;\n                tb = tc;\n                fl *= -1.;\n                i--;\n            }\n            else\n            {\n                gn = true;\n                tb = ta;\n                ta = tc;\n            }\n        }\n        else\n        {\n            next = tc + (tb - tc) / PHI;\n            if(abs(cr(ta, next, pos)) * float(i + 1) < 0.000001)\n                f = 1.;\n            if(cr(ta, next, pos) * cr(ta, next, tb) > 0.)//onRight(ta, next, pos))\n            {\n                gn = false;\n                ta = tb;\n                tb = next;\n            }\n            else\n            {\n                gn = true;\n                tb = ta;\n                ta = tc;\n            }\n        }\n        //if(i == 0)\n        //    otc = tc;\n    }\n    /*\n    fragColor =\n        (1. - nDark / float(DEPTH)) * vec4(\n            S(30., 0.) + C(10., 1.) + S(50., 6.) + S(99., 5.),\n            C(90., 0.) + S(70., 2.) + C(73., 8.) + C(67., 19.),\n            S(70., 0.5) + C(31., 7.) + S(55., 35.) + C(123., 5.),\n            1.\n        ) * 1.8 +\n        (nDark / float(DEPTH)) * vec4(\n            S(30., 10.) + C(10., 11.) + S(50., 16.) + S(99., 15.),\n            C(20., 10.) + S(70., 12.) + C(23., 18.) + C(67., 119.),\n            S(70., 10.5) + C(31., 17.) + S(55., 135.) + C(123., 15.),\n            1.\n        ) / 2.;\n    */\n    fragColor =\n        (nDark / float(DEPTH)) * vec4(\n            0.10 + S(30., 10.) + C(10., 11.) + S(50., 16.) + S(99., 15.) + S(1., 42.) + C(1.5, 73.),\n            0.10 + C(20., 10.) + S(70., 12.) + C(23., 18.) + C(67., 119.) + S(1.2, 49.) + C(0.9, 79.),\n            0.15 + S(70., 10.5) + C(31., 17.) + S(55., 135.) + C(123., 15.) + S(0.7, 13.) + C(0.11, 31.),\n            1.\n        ) * 1.5;\n\n    /*\n    if(gn)\n        tc = ta + rotate(tb - ta, fl * PI / 5.) / PHI;\n    else\n        tc = ta + rotate(tb - ta, fl * 2. * PI / 5.) * PHI;\n    \n    if(gn && min(length(pos - ta), length(pos - tb)) > length(ta - tb) / 3. || \\\n      !gn && length(pos - tb) <= length(tc - tb) * PHI / 3.5)\n    {\n        fragColor = vec4(\n            S(30., 0.) + C(10., 1.) + S(50., 6.) + S(99., 5.),\n            C(90., 0.) + S(70., 2.) + C(73., 8.) + C(67., 19.),\n            S(70., 0.5) + C(31., 7.) + S(55., 35.) + C(123., 5.),\n            1.\n        );\n    }\n    else\n        fragColor = vec4(\n            S(30., 10.) + C(10., 11.) + S(50., 16.) + S(99., 15.),\n            C(20., 10.) + S(70., 12.) + C(23., 18.) + C(67., 119.),\n            S(70., 10.5) + C(31., 17.) + S(55., 135.) + C(123., 15.),\n            1.\n        ) / 2.;\n        */\n    \n    // if(f > 0.) fragColor = vec4(1, 0, 0, 1);\n    \n    /*\n    if(length(uv - ota) <= 0.01)\n        fragColor += vec4(0.5, -0.5, -0.5, 0.0);\n    if(length(uv - otb) <= 0.01)\n        fragColor += vec4(-0.5, 0.5, -0.5, 0.0);\n    if(length(uv - otc) <= 0.01)\n        fragColor += vec4(-0.5, -0.5, 0.5, 0.0);\n    */\n}","name":"Image","description":"","type":"image"}]}