{"ver":"0.1","info":{"id":"MffyD4","date":"1721131420","viewed":171,"name":"Curious Blob","username":"chronos","description":"Inspired by: \"A simple procedural animation technique\" by argonaut:\nhttps://www.youtube.com/watch?v=qlfh_rv6khY","likes":28,"published":1,"flags":32,"usePreview":1,"tags":["procedural","2d","interactive","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Curious Blob by chronos\n    -------------------------------------------\n    \n    Inspired by: \"A simple procedural animation technique\" by argonaut\n    https://www.youtube.com/watch?v=qlfh_rv6khY\n    \n    self link: https://www.shadertoy.com/view/MffyD4\n    \n*/\n\nvec3 body_color = vec3(9,3,9)/30.;\n\nfloat smoothmin(float x, float y)\n{\n    float sharpness = 20.;\n\n    float m = min(x, y);\n    float wy = exp(sharpness*y) / (exp(sharpness*x) + exp(sharpness*y));\n    \n    return mix(y, x, wy);\n}\n\nfloat seg(vec2 a, vec2 b, vec2 p)\n{\n    p-=a; b-=a;\n    return length(clamp(dot(p,b)/dot(b,b), 0., 1.) * b - p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 mouse = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n \n    float ps = 2. / iResolution.y; // pixel size, in UV coordinates for anti-aliased drawing\n \n    vec3 color = vec3(3, 6, 9)/90.; // Background color\n    color *= 1.-length(uv*.25);     // Basic vignette\n    \n    vec2 target_pos = texelFetch(iChannel0, ivec2(num_links, 0), 0).xy;\n\n    float sdf = 9e9; // sdf for body\n    \n    // Iterate over links\n    for(float link_index = 0.; link_index < num_links-1.; link_index++)\n    {\n        vec4 this_link = texelFetch(iChannel0, ivec2(link_index, 0), 0);\n        vec4 next_link = texelFetch(iChannel0, ivec2(link_index+1., 0), 0);\n        \n        vec2 link_pos = this_link.xy;\n        vec2 next_link_pos = next_link.xy;\n        \n        float offset = seg(link_pos, next_link_pos, uv);\n        \n        float dist = offset-draw_radius;\n        if(sdf > 10.) sdf = min(dist, sdf);\n        else sdf = smoothmin(dist, sdf);\n    }\n    \n    // Draw body\n\n    float alpha = smoothstep(ps, -ps, sdf);\n    color = mix(color, body_color, alpha);\n    \n    // Draw head\n    {\n        vec4 head_link = texelFetch(iChannel0, ivec2(num_links-1., 0), 0);\n        vec4 neck_link = texelFetch(iChannel0, ivec2(num_links-2., 0), 0);\n        vec2 head_center = head_link.xy;\n        vec2 head_dir = normalize(target_pos - head_center);\n        \n        vec2 eye_pos0 = head_center + (head_dir + vec2(-1,1)*head_dir.yx) * 0.5 * draw_radius;\n        vec2 eye_pos1 = head_center + (head_dir - vec2(-1,1)*head_dir.yx) * 0.5 * draw_radius;\n        \n        float dist = min(length(uv - eye_pos0), length(uv - eye_pos1)) - 0.01;\n        float alpha = smoothstep(2. * ps, ps, dist );\n        color = mix(color, vec3(0), alpha);\n    }\n    \n    // Draw target\n    {\n        float dist = length(uv - target_pos) - 0.02;\n        float alpha = smoothstep(ps, -ps, dist );\n        color = mix(color, vec3(.3, .8, .3), alpha);\n    }\n\n    // Apply gamma and dither\n    color = pow(color, vec3(1./2.2));\n    color += (texelFetch(iChannel1, ivec2(fragCoord)%ivec2(1024),0).rgb-.5)/255.;\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float link_index = floor(fragCoord.x);\n\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 mouse = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    if(length(iMouse.xy) < 10.) mouse = vec2(1.4*cos(iTime*.5), .75*sin(iTime));\n\n    if(link_index >= num_links) { fragColor = vec4(mouse,0,1); return; }\n    if(iFrame == 0) { fragColor = vec4(2. * link_index/num_links - 1.2,-.3+.2*sin(2.*3.14159265 * link_index/num_links),0,1); return; }\n    \n    vec4 bufA = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec4 next_link = texelFetch(iChannel0, ivec2(fragCoord)+ivec2(1,0), 0);\n    \n    vec2 pos = bufA.xy;\n    vec2 next_pos = next_link.xy;\n    \n    if(link_index == num_links - 1.) next_pos = mix(pos, next_pos, .125);\n   \n    //if(length(pos - next_pos) < 1e-7) pos+=1.;\n    vec2 new_pos = next_pos + normalize(pos - next_pos) * link_radius;\n\n    fragColor = vec4(new_pos, 0,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float num_links = 20.;\nconst float link_radius = .5*.125;\nconst float draw_radius = .25;","name":"Common","description":"","type":"common"}]}