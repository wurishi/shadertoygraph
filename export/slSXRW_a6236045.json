{"ver":"0.1","info":{"id":"slSXRW","date":"1627337328","viewed":8200,"name":"Production Sky Rendering","username":"AndrewHelmer","description":"Sky implementation of \"A Scalable and Production Ready Sky and Atmosphere Rendering Technique\", Hillaire (2020), with multiple scattering approximation. Doesn't implement aerial perspective froxels.","likes":107,"published":1,"flags":32,"usePreview":0,"tags":["sun","sky","atmosphere","physical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Partial implementation of\n *    \"A Scalable and Production Ready Sky and Atmosphere Rendering Technique\"\n *    by Sébastien Hillaire (2020).\n * Very much referenced and copied Sébastien's provided code: \n *    https://github.com/sebh/UnrealEngineSkyAtmosphere\n *\n * This basically implements the generation of a sky-view LUT, so it doesn't\n * include aerial perspective. It only works for views inside the atmosphere,\n * because the code assumes that the ray-marching starts at the camera position.\n * For a planetary view you'd want to check that and you might march from, e.g.\n * the edge of the atmosphere to the ground (rather than the camera position\n * to either the ground or edge of the atmosphere).\n *\n * Also want to cite: \n *    https://www.shadertoy.com/view/tdSXzD\n * Used the jodieReinhardTonemap from there, but that also made\n * me realize that the paper switched the Mie and Rayleigh height densities\n * (which was confirmed after reading Sébastien's code more closely).\n */\n\n/*\n * Final output basically looks up the value from the skyLUT, and then adds a sun on top,\n * does some tonemapping.\n */\nvec3 getValFromSkyLUT(vec3 rayDir, vec3 sunDir) {\n    float height = length(viewPos);\n    vec3 up = viewPos / height;\n    \n    float horizonAngle = safeacos(sqrt(height * height - groundRadiusMM * groundRadiusMM) / height);\n    float altitudeAngle = horizonAngle - acos(dot(rayDir, up)); // Between -PI/2 and PI/2\n    float azimuthAngle; // Between 0 and 2*PI\n    if (abs(altitudeAngle) > (0.5*PI - .0001)) {\n        // Looking nearly straight up or down.\n        azimuthAngle = 0.0;\n    } else {\n        vec3 right = cross(sunDir, up);\n        vec3 forward = cross(up, right);\n        \n        vec3 projectedDir = normalize(rayDir - up*(dot(rayDir, up)));\n        float sinTheta = dot(projectedDir, right);\n        float cosTheta = dot(projectedDir, forward);\n        azimuthAngle = atan(sinTheta, cosTheta) + PI;\n    }\n    \n    // Non-linear mapping of altitude angle. See Section 5.3 of the paper.\n    float v = 0.5 + 0.5*sign(altitudeAngle)*sqrt(abs(altitudeAngle)*2.0/PI);\n    vec2 uv = vec2(azimuthAngle / (2.0*PI), v);\n    uv *= skyLUTRes;\n    uv /= iChannelResolution[1].xy;\n    \n    return texture(iChannel1, uv).rgb;\n}\n\nvec3 jodieReinhardTonemap(vec3 c){\n    // From: https://www.shadertoy.com/view/tdSXzD\n    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tc = c / (c + 1.0);\n    return mix(c / (l + 1.0), tc, tc);\n}\n\nvec3 sunWithBloom(vec3 rayDir, vec3 sunDir) {\n    const float sunSolidAngle = 0.53*PI/180.0;\n    const float minSunCosTheta = cos(sunSolidAngle);\n\n    float cosTheta = dot(rayDir, sunDir);\n    if (cosTheta >= minSunCosTheta) return vec3(1.0);\n    \n    float offset = minSunCosTheta - cosTheta;\n    float gaussianBloom = exp(-offset*50000.0)*0.5;\n    float invBloom = 1.0/(0.02 + offset*300.0)*0.01;\n    return vec3(gaussianBloom+invBloom);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 sunDir = getSunDir(iTime);\n    \n    vec3 camDir = normalize(vec3(0.0, 0.27, -1.0));\n    float camFOVWidth = PI/3.5;\n    float camWidthScale = 2.0*tan(camFOVWidth/2.0);\n    float camHeightScale = camWidthScale*iResolution.y/iResolution.x;\n    \n    vec3 camRight = normalize(cross(camDir, vec3(0.0, 1.0, 0.0)));\n    vec3 camUp = normalize(cross(camRight, camDir));\n    \n    vec2 xy = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;\n    vec3 rayDir = normalize(camDir + camRight*xy.x*camWidthScale + camUp*xy.y*camHeightScale);\n    \n    vec3 lum = getValFromSkyLUT(rayDir, sunDir);\n\n    // Bloom should be added at the end, but this is subtle and works well.\n    vec3 sunLum = sunWithBloom(rayDir, sunDir);\n    // Use smoothstep to limit the effect, so it drops off to actual zero.\n    sunLum = smoothstep(0.002, 1.0, sunLum);\n    if (length(sunLum) > 0.0) {\n        if (rayIntersectSphere(viewPos, rayDir, groundRadiusMM) >= 0.0) {\n            sunLum *= 0.0;\n        } else {\n            // If the sun value is applied to this pixel, we need to calculate the transmittance to obscure it.\n            sunLum *= getValFromTLUT(iChannel0, iChannelResolution[0].xy, viewPos, sunDir);\n        }\n    }\n    lum += sunLum;\n    \n    // Tonemapping and gamma. Super ad-hoc, probably a better way to do this.\n    lum *= 20.0;\n    lum = pow(lum, vec3(1.3));\n    lum /= (smoothstep(0.0, 0.2, clamp(sunDir.y, 0.0, 1.0))*2.0 + 0.15);\n    \n    lum = jodieReinhardTonemap(lum);\n    \n    lum = pow(lum, vec3(1.0/2.2));\n    \n    fragColor = vec4(lum,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159265358;\n\n// Units are in megameters.\nconst float groundRadiusMM = 6.360;\nconst float atmosphereRadiusMM = 6.460;\n\n// 200M above the ground.\nconst vec3 viewPos = vec3(0.0, groundRadiusMM + 0.0002, 0.0);\n\nconst vec2 tLUTRes = vec2(256.0, 64.0);\nconst vec2 msLUTRes = vec2(32.0, 32.0);\n// Doubled the vertical skyLUT res from the paper, looks way\n// better for sunrise.\nconst vec2 skyLUTRes = vec2(200.0, 200.0);\n\nconst vec3 groundAlbedo = vec3(0.3);\n\n// These are per megameter.\nconst vec3 rayleighScatteringBase = vec3(5.802, 13.558, 33.1);\nconst float rayleighAbsorptionBase = 0.0;\n\nconst float mieScatteringBase = 3.996;\nconst float mieAbsorptionBase = 4.4;\n\nconst vec3 ozoneAbsorptionBase = vec3(0.650, 1.881, .085);\n\n/*\n * Animates the sun movement.\n */\nfloat getSunAltitude(float time)\n{\n    const float periodSec = 120.0;\n    const float halfPeriod = periodSec / 2.0;\n    const float sunriseShift = 0.1;\n    float cyclePoint = (1.0 - abs((mod(time,periodSec)-halfPeriod)/halfPeriod));\n    cyclePoint = (cyclePoint*(1.0+sunriseShift))-sunriseShift;\n    return (0.5*PI)*cyclePoint;\n}\nvec3 getSunDir(float time)\n{\n    float altitude = getSunAltitude(time);\n    return normalize(vec3(0.0, sin(altitude), -cos(altitude)));\n}\n\nfloat getMiePhase(float cosTheta) {\n    const float g = 0.8;\n    const float scale = 3.0/(8.0*PI);\n    \n    float num = (1.0-g*g)*(1.0+cosTheta*cosTheta);\n    float denom = (2.0+g*g)*pow((1.0 + g*g - 2.0*g*cosTheta), 1.5);\n    \n    return scale*num/denom;\n}\n\nfloat getRayleighPhase(float cosTheta) {\n    const float k = 3.0/(16.0*PI);\n    return k*(1.0+cosTheta*cosTheta);\n}\n\nvoid getScatteringValues(vec3 pos, \n                         out vec3 rayleighScattering, \n                         out float mieScattering,\n                         out vec3 extinction) {\n    float altitudeKM = (length(pos)-groundRadiusMM)*1000.0;\n    // Note: Paper gets these switched up.\n    float rayleighDensity = exp(-altitudeKM/8.0);\n    float mieDensity = exp(-altitudeKM/1.2);\n    \n    rayleighScattering = rayleighScatteringBase*rayleighDensity;\n    float rayleighAbsorption = rayleighAbsorptionBase*rayleighDensity;\n    \n    mieScattering = mieScatteringBase*mieDensity;\n    float mieAbsorption = mieAbsorptionBase*mieDensity;\n    \n    vec3 ozoneAbsorption = ozoneAbsorptionBase*max(0.0, 1.0 - abs(altitudeKM-25.0)/15.0);\n    \n    extinction = rayleighScattering + rayleighAbsorption + mieScattering + mieAbsorption + ozoneAbsorption;\n}\n\nfloat safeacos(const float x) {\n    return acos(clamp(x, -1.0, 1.0));\n}\n\n// From https://gamedev.stackexchange.com/questions/96459/fast-ray-sphere-collision-code.\nfloat rayIntersectSphere(vec3 ro, vec3 rd, float rad) {\n    float b = dot(ro, rd);\n    float c = dot(ro, ro) - rad*rad;\n    if (c > 0.0f && b > 0.0) return -1.0;\n    float discr = b*b - c;\n    if (discr < 0.0) return -1.0;\n    // Special case: inside sphere, use far discriminant\n    if (discr > b*b) return (-b + sqrt(discr));\n    return -b - sqrt(discr);\n}\n\n/*\n * Same parameterization here.\n */\nvec3 getValFromTLUT(sampler2D tex, vec2 bufferRes, vec3 pos, vec3 sunDir) {\n    float height = length(pos);\n    vec3 up = pos / height;\n\tfloat sunCosZenithAngle = dot(sunDir, up);\n    vec2 uv = vec2(tLUTRes.x*clamp(0.5 + 0.5*sunCosZenithAngle, 0.0, 1.0),\n                   tLUTRes.y*max(0.0, min(1.0, (height - groundRadiusMM)/(atmosphereRadiusMM - groundRadiusMM))));\n    uv /= bufferRes;\n    return texture(tex, uv).rgb;\n}\nvec3 getValFromMultiScattLUT(sampler2D tex, vec2 bufferRes, vec3 pos, vec3 sunDir) {\n    float height = length(pos);\n    vec3 up = pos / height;\n\tfloat sunCosZenithAngle = dot(sunDir, up);\n    vec2 uv = vec2(msLUTRes.x*clamp(0.5 + 0.5*sunCosZenithAngle, 0.0, 1.0),\n                   msLUTRes.y*max(0.0, min(1.0, (height - groundRadiusMM)/(atmosphereRadiusMM - groundRadiusMM))));\n    uv /= bufferRes;\n    return texture(tex, uv).rgb;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A generates the Transmittance LUT. Each pixel coordinate corresponds to a height and sun zenith angle, and\n// the value is the transmittance from that point to sun, through the atmosphere.\nconst float sunTransmittanceSteps = 40.0;\n\nvec3 getSunTransmittance(vec3 pos, vec3 sunDir) {\n    if (rayIntersectSphere(pos, sunDir, groundRadiusMM) > 0.0) {\n        return vec3(0.0);\n    }\n    \n    float atmoDist = rayIntersectSphere(pos, sunDir, atmosphereRadiusMM);\n    float t = 0.0;\n    \n    vec3 transmittance = vec3(1.0);\n    for (float i = 0.0; i < sunTransmittanceSteps; i += 1.0) {\n        float newT = ((i + 0.3)/sunTransmittanceSteps)*atmoDist;\n        float dt = newT - t;\n        t = newT;\n        \n        vec3 newPos = pos + t*sunDir;\n        \n        vec3 rayleighScattering, extinction;\n        float mieScattering;\n        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);\n        \n        transmittance *= exp(-dt*extinction);\n    }\n    return transmittance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x >= (tLUTRes.x+1.5) || fragCoord.y >= (tLUTRes.y+1.5)) {\n        return;\n    }\n    float u = clamp(fragCoord.x, 0.0, tLUTRes.x-1.0)/tLUTRes.x;\n    float v = clamp(fragCoord.y, 0.0, tLUTRes.y-1.0)/tLUTRes.y;\n    \n    float sunCosTheta = 2.0*u - 1.0;\n    float sunTheta = safeacos(sunCosTheta);\n    float height = mix(groundRadiusMM, atmosphereRadiusMM, v);\n    \n    vec3 pos = vec3(0.0, height, 0.0); \n    vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));\n    \n    fragColor = vec4(getSunTransmittance(pos, sunDir), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B is the multiple-scattering LUT. Each pixel coordinate corresponds to a height and sun zenith angle, and\n// the value is the multiple scattering approximation (Psi_ms from the paper, Eq. 10).\nconst float mulScattSteps = 20.0;\nconst int sqrtSamples = 8;\n\nvec3 getSphericalDir(float theta, float phi) {\n     float cosPhi = cos(phi);\n     float sinPhi = sin(phi);\n     float cosTheta = cos(theta);\n     float sinTheta = sin(theta);\n     return vec3(sinPhi*sinTheta, cosPhi, sinPhi*cosTheta);\n}\n\n// Calculates Equation (5) and (7) from the paper.\nvoid getMulScattValues(vec3 pos, vec3 sunDir, out vec3 lumTotal, out vec3 fms) {\n    lumTotal = vec3(0.0);\n    fms = vec3(0.0);\n    \n    float invSamples = 1.0/float(sqrtSamples*sqrtSamples);\n    for (int i = 0; i < sqrtSamples; i++) {\n        for (int j = 0; j < sqrtSamples; j++) {\n            // This integral is symmetric about theta = 0 (or theta = PI), so we\n            // only need to integrate from zero to PI, not zero to 2*PI.\n            float theta = PI * (float(i) + 0.5) / float(sqrtSamples);\n            float phi = safeacos(1.0 - 2.0*(float(j) + 0.5) / float(sqrtSamples));\n            vec3 rayDir = getSphericalDir(theta, phi);\n            \n            float atmoDist = rayIntersectSphere(pos, rayDir, atmosphereRadiusMM);\n            float groundDist = rayIntersectSphere(pos, rayDir, groundRadiusMM);\n            float tMax = atmoDist;\n            if (groundDist > 0.0) {\n                tMax = groundDist;\n            }\n            \n            float cosTheta = dot(rayDir, sunDir);\n    \n            float miePhaseValue = getMiePhase(cosTheta);\n            float rayleighPhaseValue = getRayleighPhase(-cosTheta);\n            \n            vec3 lum = vec3(0.0), lumFactor = vec3(0.0), transmittance = vec3(1.0);\n            float t = 0.0;\n            for (float stepI = 0.0; stepI < mulScattSteps; stepI += 1.0) {\n                float newT = ((stepI + 0.3)/mulScattSteps)*tMax;\n                float dt = newT - t;\n                t = newT;\n\n                vec3 newPos = pos + t*rayDir;\n\n                vec3 rayleighScattering, extinction;\n                float mieScattering;\n                getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);\n\n                vec3 sampleTransmittance = exp(-dt*extinction);\n                \n                // Integrate within each segment.\n                vec3 scatteringNoPhase = rayleighScattering + mieScattering;\n                vec3 scatteringF = (scatteringNoPhase - scatteringNoPhase * sampleTransmittance) / extinction;\n                lumFactor += transmittance*scatteringF;\n                \n                // This is slightly different from the paper, but I think the paper has a mistake?\n                // In equation (6), I think S(x,w_s) should be S(x-tv,w_s).\n                vec3 sunTransmittance = getValFromTLUT(iChannel0, iChannelResolution[0].xy, newPos, sunDir);\n\n                vec3 rayleighInScattering = rayleighScattering*rayleighPhaseValue;\n                float mieInScattering = mieScattering*miePhaseValue;\n                vec3 inScattering = (rayleighInScattering + mieInScattering)*sunTransmittance;\n\n                // Integrated scattering within path segment.\n                vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;\n\n                lum += scatteringIntegral*transmittance;\n                transmittance *= sampleTransmittance;\n            }\n            \n            if (groundDist > 0.0) {\n                vec3 hitPos = pos + groundDist*rayDir;\n                if (dot(pos, sunDir) > 0.0) {\n                    hitPos = normalize(hitPos)*groundRadiusMM;\n                    lum += transmittance*groundAlbedo*getValFromTLUT(iChannel0, iChannelResolution[0].xy, hitPos, sunDir);\n                }\n            }\n            \n            fms += lumFactor*invSamples;\n            lumTotal += lum*invSamples;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x >= (msLUTRes.x+1.5) || fragCoord.y >= (msLUTRes.y+1.5)) {\n        return;\n    }\n    float u = clamp(fragCoord.x, 0.0, msLUTRes.x-1.0)/msLUTRes.x;\n    float v = clamp(fragCoord.y, 0.0, msLUTRes.y-1.0)/msLUTRes.y;\n    \n    float sunCosTheta = 2.0*u - 1.0;\n    float sunTheta = safeacos(sunCosTheta);\n    float height = mix(groundRadiusMM, atmosphereRadiusMM, v);\n    \n    vec3 pos = vec3(0.0, height, 0.0); \n    vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));\n    \n    vec3 lum, f_ms;\n    getMulScattValues(pos, sunDir, lum, f_ms);\n    \n    // Equation 10 from the paper.\n    vec3 psi = lum  / (1.0 - f_ms); \n    fragColor = vec4(psi, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buffer C calculates the actual sky-view! It's a lat-long map (or maybe altitude-azimuth is the better term),\n// but the latitude/altitude is non-linear to get more resolution near the horizon.\nconst int numScatteringSteps = 32;\nvec3 raymarchScattering(vec3 pos, \n                              vec3 rayDir, \n                              vec3 sunDir,\n                              float tMax,\n                              float numSteps) {\n    float cosTheta = dot(rayDir, sunDir);\n    \n\tfloat miePhaseValue = getMiePhase(cosTheta);\n\tfloat rayleighPhaseValue = getRayleighPhase(-cosTheta);\n    \n    vec3 lum = vec3(0.0);\n    vec3 transmittance = vec3(1.0);\n    float t = 0.0;\n    for (float i = 0.0; i < numSteps; i += 1.0) {\n        float newT = ((i + 0.3)/numSteps)*tMax;\n        float dt = newT - t;\n        t = newT;\n        \n        vec3 newPos = pos + t*rayDir;\n        \n        vec3 rayleighScattering, extinction;\n        float mieScattering;\n        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);\n        \n        vec3 sampleTransmittance = exp(-dt*extinction);\n\n        vec3 sunTransmittance = getValFromTLUT(iChannel0, iChannelResolution[0].xy, newPos, sunDir);\n        vec3 psiMS = getValFromMultiScattLUT(iChannel1, iChannelResolution[1].xy, newPos, sunDir);\n        \n        vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);\n        vec3 mieInScattering = mieScattering*(miePhaseValue*sunTransmittance + psiMS);\n        vec3 inScattering = (rayleighInScattering + mieInScattering);\n\n        // Integrated scattering within path segment.\n        vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;\n\n        lum += scatteringIntegral*transmittance;\n        \n        transmittance *= sampleTransmittance;\n    }\n    return lum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x >= (skyLUTRes.x+1.5) || fragCoord.y >= (skyLUTRes.y+1.5)) {\n        return;\n    }\n    float u = clamp(fragCoord.x, 0.0, skyLUTRes.x-1.0)/skyLUTRes.x;\n    float v = clamp(fragCoord.y, 0.0, skyLUTRes.y-1.0)/skyLUTRes.y;\n    \n    float azimuthAngle = (u - 0.5)*2.0*PI;\n    // Non-linear mapping of altitude. See Section 5.3 of the paper.\n    float adjV;\n    if (v < 0.5) {\n\t\tfloat coord = 1.0 - 2.0*v;\n\t\tadjV = -coord*coord;\n\t} else {\n\t\tfloat coord = v*2.0 - 1.0;\n\t\tadjV = coord*coord;\n\t}\n    \n    float height = length(viewPos);\n    vec3 up = viewPos / height;\n    float horizonAngle = safeacos(sqrt(height * height - groundRadiusMM * groundRadiusMM) / height) - 0.5*PI;\n    float altitudeAngle = adjV*0.5*PI - horizonAngle;\n    \n    float cosAltitude = cos(altitudeAngle);\n    vec3 rayDir = vec3(cosAltitude*sin(azimuthAngle), sin(altitudeAngle), -cosAltitude*cos(azimuthAngle));\n    \n    float sunAltitude = (0.5*PI) - acos(dot(getSunDir(iTime), up));\n    vec3 sunDir = vec3(0.0, sin(sunAltitude), -cos(sunAltitude));\n    \n    float atmoDist = rayIntersectSphere(viewPos, rayDir, atmosphereRadiusMM);\n    float groundDist = rayIntersectSphere(viewPos, rayDir, groundRadiusMM);\n    float tMax = (groundDist < 0.0) ? atmoDist : groundDist;\n    vec3 lum = raymarchScattering(viewPos, rayDir, sunDir, tMax, float(numScatteringSteps));\n    fragColor = vec4(lum, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}