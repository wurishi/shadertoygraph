{"ver":"0.1","info":{"id":"WlXcR4","date":"1591503290","viewed":65,"name":"checkerbox","username":"disambiguator","description":".","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["checkerbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float spacing = 0.2;\nconst float margin = 0.1;\n\nfloat checkerboard(vec2 pos) {\n    vec2 p = mod(pos, spacing);\n    \n    //Smoothstep\n    float w = fwidth(pos.x); // to recover the scaling;\n    p = smoothstep(-w, w, p-.1);\n    \n    // Step\n    //p = step(margin, p);\n    \n    return max(p.x, p.y);\n}\nconst vec3 blue = vec3(0,0,1);\nconst vec3 green = vec3(0,1,0);\nconst vec3 red = vec3(1,0,0);\nconst vec3 black = vec3(0,0,0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pos = (fragCoord*2.- iResolution.xy)/iResolution.y;\n    \n    float time = iTime;\n    \n    float blueCheckerboard = checkerboard((pos + time/8.) * sin(time/8.) * (sin(time/8.) + 0.5));\n    float greenCheckerboard = checkerboard((pos - time/16.)* sin(time/8.));\n    float redCheckerboard = checkerboard((pos + time/8.) * sin(time/8.) + vec2(0.2, 0.2*sin(time/8.)));\n    \n    vec3 color =  blueCheckerboard * blue\n        + (1. - blueCheckerboard) * greenCheckerboard * green\n        + (1. - blueCheckerboard) * (1. - greenCheckerboard) * redCheckerboard * red;\n    //fragColor = vec4(color, 1.0);                    \n \n    fragColor = vec4(pow(color,vec3(1./2.2)), 1);   \n}","name":"Image","description":"","type":"image"}]}