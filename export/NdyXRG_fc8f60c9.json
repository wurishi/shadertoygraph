{"ver":"0.1","info":{"id":"NdyXRG","date":"1634788678","viewed":110,"name":"Stroboscopic Display","username":"rmccampbell7","description":"*Flashing light warning*\nInspired by https://www.youtube.com/watch?v=2h312IVR6Ww&ab_channel=3DprintedLife","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["strobeeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float DROPSPEED = 6.;\nconst vec2 DROPSPACING = vec2(.03, .04);\nconst float DROPSIZE = .015;\nconst float PERIOD = 1./DROPSPEED;\nconst float STROBEDUR = .1*PERIOD;\nconst vec3 DROPCOLOR = vec3(.5,.8,1);\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\n// Put any binary function in here which can change over time\nbool getImage(vec2 p, float t) {\n    float s = .2*sin(6.28*t)+1.;\n    return sdCircle(p*vec2(s,1./s), .3) < 0.;\n}\n\nstruct Coords {\n    vec2 local;\n    vec2 global;\n};\n\nCoords getDropCoords(vec2 p, float t, float t2) {\n    vec2 local = mod(p + vec2(0, t*DROPSPEED), DROPSPACING) - .5*DROPSPACING;\n    local += vec2(0, (t2-t)*DROPSPEED);\n    vec2 global = p - local;\n    return Coords(local, global);\n}\n\nfloat getDropsDist(vec2 p) {\n    float prevStrobeTime = floor(iTime/PERIOD)*PERIOD;\n    float nextStrobeTime = prevStrobeTime + PERIOD;\n    vec2 local = getDropCoords(p, iTime, iTime).local;\n    vec2 prevStrobePos = getDropCoords(p, iTime, prevStrobeTime).global;\n    vec2 nextStrobePos = getDropCoords(p, iTime, nextStrobeTime).global;\n    bool prevStrobeInImage = getImage(prevStrobePos, prevStrobeTime);\n    bool nextStrobeInImage = getImage(nextStrobePos, nextStrobeTime);\n    bool dropInImage = prevStrobeInImage || nextStrobeInImage;\n    float dropDist = sdCircle(local, DROPSIZE/2.);\n    return dropInImage ? dropDist : 1.;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 drop = smoothstep(.005, -.005, getDropsDist(uv)) * DROPCOLOR;\n    float strobe = step(mod(iTime+.5*STROBEDUR, PERIOD), STROBEDUR);\n    float lighting = mix(.2, 1., strobe);\n\n    vec3 col = drop * lighting;\n    // Uncomment to view image directly\n    //col = float(getImage(uv, iTime)) * DROPCOLOR;\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}