{"ver":"0.1","info":{"id":"MsycWG","date":"1523113049","viewed":162,"name":"Lens Cleanse","username":"nr4","description":"Practice Shader for live coding performances. \nTask: Code visuals for .5s-beat tracks.\n25min, bring only keyboard and mouse. This one took me a little longer than allowed =/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","livecoding","caleidoscope","30min"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Lens Cleanse\n * \n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst vec2 c = vec2(1.,0.);\nconst float pi = acos(-1.);\n\nfloat iScale;\n\nvec3 rot(vec3 x, vec3 d)\n{\n    return mat3(cos(d.x), sin(d.x), 0., -sin(d.x), cos(d.x), 0., 0., 0., 1.)\n        *mat3(cos(d.y), 0., sin(d.y), 0., 1., 0., -sin(d.y), 0., cos(d.y))\n        *mat3(1., 0., 0., 0., cos(d.z), sin(d.z), 0., -sin(d.z), cos(d.z))*x;\n}\n\nvec2 scene(vec3 x)\n{\n    vec2 sdf = c.xy;\n    \n    float m = .25+.2*sin(iTime/.5);\n    \n    vec3 cy = vec3(sqrt(x.x*x.x+x.y*x.y), atan(x.x/x.y), mod(x.z, .1)-.05);\n    vec3 cz = vec3(sin(cy.x* m)-.5*m, cy.y, cy.z);\n\n    cz = rot(cz, vec3(1.,1.5, 2.)*iTime);\n    \n    vec3 z = vec3(mod(cz.x*cos(2.*cz.y+iScale), .5)-.25, cz.x*sin(7.*cz.y-iScale), mod(cz.z, 2.e-1*iScale)-1.e-1*iScale);\n    \n    //z = rot(z, vec3(3.,-2.,1.)*iTime);\n    \n    sdf = vec2(length(z/iScale)-1.e-1/iScale, 1.);\n    \n   \tcy = vec3(sqrt(x.x*x.x+x.y*x.y), atan(-x.y/x.x), mod(x.z, 1.e1*iScale)-5.e0*iScale);\n    cz = vec3(atanh(cy.x+ m)-.5*m, cy.y, cy.z);\n    \n    //cz = rot(cz, vec3(2.,3.5, 1.)*iTime);\n    \n    z = vec3(cz.x*cos(cz.y), cz.x*sin(cz.y), cz.z);\n    \n    vec2 sdb = vec2(length(z/iScale)-1.e-1/iScale, 2.);\n    \n    \n    sdf = mix(sdb, sdf, step(sdb.x, sdf.x));\n    \n    sdf.x *= iScale;\n    \n    return sdf;\n}\n\n\nvec3 normal(vec3 x)\n{\n    const float dx = 1.e-4;\n    float s=scene(x).x;\n    return normalize(vec3(scene(x+dx*c.xyy).x-s, scene(x+dx*c.yxy).x-s, scene(x+dx*c.yyx).x-s));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    iScale = mod(iTime, .5)/.5;\n    \n    vec2 uv = fragCoord/iResolution.xy-.5, s=c.xy;\n    vec3 col = c.yyy, o = 4.*c.yyx, t=c.yyy, u = c.yxy, d = normalize(t-o), ro = o+uv.x*cross(d, u)+uv.y*u, x;\n    \n    float l=0.;\n    for(int i=0; i<100; ++i)\n    {\n        x = ro + l*d;\n        s = scene(x);\n        if(s.x < 1.e-4) break;\n        if(i==100 || l >= 1.e2)\n        {\n            fragColor = c.yyyx;\n            return;\n        }\n        l += s.x;\n    }\n    \n    vec3 n = normal(x);\n    \n    if(s.y == 1.)\n\t    col = mix(\n            .3*c.yyx + rot(c.xyy, vec3(1.,2.,3.)*iTime)*dot(c.yxx, n)+rot(c.xyx, vec3(1.,-1.,3.56)*iTime)*dot(reflect(c.xyx, n), normalize(ro-x)),\n            .3*c.yxy + rot(c.yxx, vec3(2.,3., 1.)*iTime)*dot(c.yxx, n)+rot(c.xyx, vec3(-1.,1.,3.56)*iTime)*dot(reflect(c.xyx, n), normalize(ro-x))\n            , .5+.5*sin(iTime/.5));\n    else col = mix(\n            .3*c.yxx + rot(c.xxy, vec3(1.,1.,3.56)*iTime)*dot(c.xyx, n)+rot(c.xyx, vec3(1.,1.,-3.56)*iTime)*dot(reflect(c.xyx, n), normalize(ro-x)),\n            .3*c.xxy + rot(c.yyx, vec3(5.,-1., 2.)*iTime)*dot(c.yxy, n)+rot(c.xyx, vec3(3.,1.,2.56)*iTime)*dot(reflect(c.xyx, n), normalize(ro-x))\n            , .5+.5*sin(iTime/.5));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}