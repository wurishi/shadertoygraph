{"ver":"0.1","info":{"id":"3s3GRs","date":"1574932876","viewed":68,"name":"Geometry  Collection","username":"yearown","description":"we are exercise every day","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gemoetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat map( in vec3 pos )\n{\n    vec3 qos = vec3( fract(pos.x+0.5)-0.5, pos.yz );\n    return sdBox(qos.xyz-vec3( 0.0,0.25, 0.0), vec3(0.2,0.5,0.2));\n    return min( sdPlane(pos.xyz),sdBox(qos.xyz-vec3( 0.0,0.25, 0.0), vec3(0.2,0.5,0.2) ) );\n}\n\nvec3 render(vec3 ro,vec3 rd)\n{\n    vec3 ret = vec3(0,0,0); \n    float t = 0.0;\n    for(int i = 0;i<64;i++)\n    {\n        vec3 pos = ro + rd * t;\n        float d = map(pos);\n        if(d <=0.001)\n            ret = vec3(0.5,0.5,0.4);\n        t += d;\n    }\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera\t\n    float an = 12.0 - sin(0.1*iTime);\n    vec3 ro = vec3( 3.0*cos(0.1*an), 1.0, -3.0*sin(0.1*an) );\n    vec3 ta = vec3( 0.0, -0.4, 0.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n    \n    // render\t\n    vec3 col = render( ro, rd);\n    \n    fragColor = vec4( col, 1.0 );\n    \n}\n","name":"Image","description":"","type":"image"}]}