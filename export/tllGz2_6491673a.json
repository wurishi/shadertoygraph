{"ver":"0.1","info":{"id":"tllGz2","date":"1556989352","viewed":84,"name":"projection test for surface 1-1-","username":"MODer","description":"sdvs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["er"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define d iResolution.xy\n#define t iTime\n//  Proected test for serface 1-1-1\nvec3 ro(vec3 p, float r){return vec3(p.x,p.y*cos(r)+p.z*sin(r),p.z*cos(r)-p.y*sin(r));}\nvec3 m(vec3 p, vec3 r){return ro((ro((ro((p).yxz, r.y).yxz).yxz, r.z).zxy).xyz, r.x).xyz;}\nint part(float p1){if(p1 >=0.){if(p1 <=1.){return 1;}}return 0;}\n\n\n\nconst float CamF = 0.5;\nvec3 CamRot = vec3(iMouse.yx/d.yx-vec2(0.5),0.0)*vec3(1.,-1.,-1.);\nfloat smood(float s, vec2 inf){return smoothstep(1.0/inf.x, (1.-inf.y)/inf.x, abs(s-0.5));}\n\n\n\nvec4 plane(vec3 v, vec3 uv, vec3 r){\n    vec4 col;\n    \n    //uv = m(uv, v*3.14/2.);\n    uv = m(uv, r);\n    if(uv.z < 0.){\n    uv = uv/uv.z*CamF;\n    uv += vec3(0.5);\n    vec2 sp = vec2(2., 0.009);\n    col = texture(iChannel0,uv.xy, uv.z)*smood(uv.x, sp)*smood(uv.y, sp);\n    }\n    return col;\n\n}\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 cor )\n{\n    vec3 uv = vec3(cor.xy/d, 0.);\n    vec4 col;\n    vec3 r;\n    float g;\n    \n    \n    \n    uv -= vec3(0.5);\n    //r = vec3(t,t*1.25, t*0.532);\n    //r.x = t;\n    //r.x = t/2.;\n    r.z = t*2.;\n    \n    r += -CamRot;\n    \n    col += plane(vec3(0,1,0), uv, r.xyz);\n    //col += plane(vec3(0,0,1), uv, vec3(1,-1,1)*r.yxz);\n    \n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n\n\n#define d iResolution.xy\n#define t iTime\n\n\nvec3 ro(vec3 p, float r){return vec3(p.x,p.y*cos(r)+p.z*sin(r),p.z*cos(r)-p.y*sin(r));}\n\nvec3 m(vec3 p, vec3 r){return ro((ro((ro((p).yxz, r.y).zxy).yxz, r.z).xyz).zxy, r.x).xyz;}\n\n//ro((ro((ro((p).yxz, r.y).yxz).yxz, r.z).zxy).xyz, r.x).xyz\n\nconst float CamF = 0.5;\nfloat smood(float s, vec2 inf){return smoothstep(1.0/inf.x, (1.-inf.y)/inf.x, abs(s-0.5));;}\n\n\nvec2 plane(vec2 u, vec2 pos, vec3 r){\n    vec3 p;\n    \n    \n    p = m(vec3(u.xy-0.5,0.5), r).xyz+0.5;\n    p.xy /= p.z;\n    \n    p.xy += pos;\n    \n    \n    \n    return p.xy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 cor )\n{\n    vec3 uv = vec3(cor.xy/d, 0.);\n    vec4 col;\n    vec3 r;\n    vec3 pos;\n    vec2 sp; \n    r = vec3(0.,t,0.);\n    sp = vec2(2., 0.001);\n    \n    pos = m(vec3(10.,0.,10.), r);\n    vec2 use = plane(uv.xy, pos.xy/pos.z, r);\n    col += texture(iChannel0,use)*smood(use.x, sp)*smood(use.y, sp);\n    \n    \n    \n    fragColor = col;\n}\n*/","name":"Common","description":"","type":"common"}]}