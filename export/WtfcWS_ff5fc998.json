{"ver":"0.1","info":{"id":"WtfcWS","date":"1592876316","viewed":78,"name":"Descent into the underworld :)","username":"jorge2017a1","description":"Descent into the underworld :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["descentintotheunderworld"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n    \n    \n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n///---------------------------------------\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n\n///-----------------------------------------\n\n\nfloat BoxInteriorFrenteDer( vec3 p )\n{   \n   float anchobox=10.0;\n   float grosorpared=0.5;\n   float  sdb1=sdBox( p, vec3(anchobox) );\n   float  sdb2=sdBox( p, vec3(anchobox-grosorpared,anchobox-grosorpared,anchobox+grosorpared) );\n       \n    float dif1= differenceSDF(sdb1, sdb2);\n    return dif1;\n}\n\nfloat BoxInteriorFrenteDerSinTecho( vec3 p )\n{   \n   float anchobox=10.0;\n   float grosorpared=0.5;\n   float  sdb1=sdBox( p, vec3(anchobox,anchobox,anchobox) );\n   float  sdb2=sdBox( p-vec3(0.0,2.0*grosorpared,0.0), vec3(anchobox-grosorpared,anchobox-grosorpared,anchobox+grosorpared) );\n       \n    float dif1= differenceSDF(sdb1, sdb2);\n    return dif1;\n}\n\n\nfloat BoxInteriorInferior(vec3 p)\n{\n    \n   float anchobox=10.0;\n   float grosorpared=0.5; \n   float  sdb1=sdBox( p, vec3(anchobox) );\n   float  sdb2=sdBox( p-vec3(0.0,0.0,0.0), vec3(anchobox-0.5,anchobox+0.5,anchobox+0.5) );\n       \n    float dif1= differenceSDF(sdb1, sdb2);  //dos paredes der e izq\n    \n    float  sdb3=sdBox( p-vec3(0.0,0.0,anchobox-grosorpared), vec3(anchobox,anchobox,grosorpared) );  //atras\n    float  sdb4=sdBox( p -vec3(0.0,anchobox,0.0), vec3(anchobox,0.5,anchobox) );  //superior\n    \n    dif1=unionSDF(dif1, sdb3);\n    dif1=unionSDF(dif1, sdb4);\n    \n    return dif1;\n}\n\n\nfloat BoxInterior4ParedesInferior(vec3 p)\n{\n    \n   float anchobox=10.0;\n   float grosorpared=0.5; \n   float  sdb1=sdBox( p, vec3(anchobox) );\n   float  sdb2=sdBox( p, vec3(anchobox-grosorpared,anchobox+grosorpared,anchobox+grosorpared) );\n    \n    //float dif1=9999.0;\n    float dif1= differenceSDF(sdb1, sdb2);\n    \n    float  sdb3=sdBox( p-vec3(0.0,0.0,anchobox-grosorpared), vec3(anchobox,anchobox,grosorpared) );  //atras\n    float  sdb4=sdBox( p -vec3(0.0,0,-anchobox), vec3(anchobox,anchobox,0.5) );  //superior\n    \n    dif1=unionSDF(dif1, sdb3);\n    dif1=unionSDF(dif1, sdb4);\n    \n    \n    return dif1;\n}\n\n\n\n\nfloat BoxInteriorDosParedesIzqDer(vec3 p)\n{\n    \n   float anchobox=10.0;\n   float grosorpared=0.5; \n   float  sdb1=sdBox( p, vec3(anchobox) );\n   float  sdb2=sdBox( p, vec3(anchobox-grosorpared,anchobox+grosorpared,anchobox+grosorpared) );\n       \n    float dif1= differenceSDF(sdb1, sdb2);\n    return dif1;\n}\n\n\n\n//-------------------------------------------------\n\n\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp, p2,p3;\n    \n    \n    pp=p;\n\n    \n    float planeDist1 = p.y+100.0;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n    float planeDist3 = p.x+33.0; //pared izq\n    float planeDist4 = 33.0-p.x;  //pared der\n    float planeDist5 = -p.z+60.0;  //pared atras\n    float planeDist6 = p.z+60.0;  //pared atras\n   \n    \n    res = vec2(9999, 0);\n    \n  \n  \n    float posY, incY;\n    incY=20.0;\n    \n    \n    \n    //nivel 1 -hor\n    float sdb1=  BoxInteriorFrenteDer(p -vec3(0.0));\n    res =opU(res, vec2(sdb1,100)); \n    \n    \n    //nivel 1-hor\n    float sdb2=  BoxInteriorInferior(p -vec3(0.0,0.0,20.0));\n    res =opU(res, vec2(sdb2,101)); \n    \n    //descender\n    posY+=incY;\n    float sdb3=  BoxInterior4ParedesInferior(p -vec3(0.0,-posY,20.0));\n    res =opU(res, vec2(sdb3,100)); \n    \n    //descender\n    posY+=incY;\n    float sdb4=  BoxInterior4ParedesInferior(p -vec3(0.0,-posY,20.0));\n    res =opU(res, vec2(sdb4,101)); \n    \n    //descender\n    posY+=incY;\n    float sdb5=  BoxInterior4ParedesInferior(p -vec3(0.0,-posY,20.0));\n    res =opU(res, vec2(sdb5,100)); \n    \n   \n    posY+=incY;\n\n    float sdb6=  BoxInteriorFrenteDerSinTecho(p -vec3(0.0,-posY,20.0));\n    res =opU(res, vec2(sdb6,101));\n    \n    \n    //nivel inferior\n    //posY+=incY;\n    float sdb7=  BoxInteriorFrenteDer(p -vec3(0.0,-posY,40.0));\n    res =opU(res, vec2(sdb7,100)); \n    \n    float sdb8=  BoxInteriorFrenteDer(p -vec3(0.0,-posY,60.0));\n    res =opU(res, vec2(sdb8,100)); \n    \n    \n    float sdb9=  BoxInteriorFrenteDer(p -vec3(0.0,-posY,80.0));\n    res =opU(res, vec2(sdb9,100)); \n    \n    \n    \n    \n    res =opU(res, vec2(1.0,0)); \n    \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        dO += dS;\n        \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n  \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) \n{\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n\n// phong shading\nvec3 p_shadingv3( vec3 pos, vec3 normal, vec3 ro, vec3 rd, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t// ...add lights here...\n  \n    float shininess = 1.25;\n    \n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( pos - ro );\n\tvec3 ref_ev = reflect( ev, normal );\n\t\n\t\n\t\tvec3 vl = normalize( plight_pos1 - pos );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, normal ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\t\n        final += plight_color1 * ( diffuse + specular );\n        \n    \n    \n\tvec3 color = vec3(1.0);\n    color = color * 0.75 + 0.25;\n   \n    color *= normal * .25 + .75;\n    \n    \n    float ambient2 = 0.1;\n    float diffuse2 = 0.5 * -dot(normal,rd);\n    float specular2 = 1.0 * max(0.0, -dot(rd, reflect(rd,normal)));\n    \n    color *= vec3(ambient2 + diffuse2 + pow(specular2,5.0));\n\n    color *= smoothstep(12.0,6.0,length(pos));\n    \n    \n    \n    return (final+color)/2.0;\n}\n\n\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\n\n//https://www.shadertoy.com/view/4llSWf\n\nvec3 Shade(vec3 position, vec3 normal, vec3 direction, vec3 camera)\n{\n   // position *= scale;\n    vec3 color = vec3(1.0);\n    \n    color = color * 0.75 + 0.25;\n    \n    color *= normal * .25 + .75;\n    \n    \n    float ambient = 0.1;\n    float diffuse = 0.5 * -dot(normal,direction);\n    float specular = 1.0 * max(0.0, -dot(direction, reflect(direction,normal)));\n    \n    color *= vec3(ambient + diffuse + pow(specular,5.0));\n\n    color *= smoothstep(12.0,6.0,length(position));\n    \n    return color;\n}\n\n\n//-------------------------------\nvec3 getColorTex( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n    \n}\n\n\n//Por Spalmer....dia 24/jun/2020.......Gracias por su coperacion\nfloat unmix(float a, float b, float t) \n{\n    return (t - a) / (b - a);\n}\n\n    \n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    itime=iTime;\n    float t;\n    \n   \n    \n \n light_pos1   = vec3(-20.0, 12.0, -15.0 ); \n light_color1 = vec3( 1.0 );\n\n light_pos2   = vec3( 0.0, 15.0, 0.0 );\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n   float start_pos, end_pos, rof; \n   float unmixed;\n    \n       \n   float pasot=2.0; \n   t=iTime*pasot; \n   //t=mod(t,128.0/(pasot*0.35));  \n   //t=mod(t,60.0/(pasot*0.35));  \n   t=mod(t,18.0);  \n    \n   \n   vec3 ro = vec3(0.0,0.0,-25.0+20.0*cos(t));\n    \n    \n    \n    \n   /*if (t<6.14)\n    ro = vec3(0.0,0.0,-20.0+30.0*cos(t));    \n   */\n   \n    //Por Spalmer....dia 24/jun/2020.......Gracias por su coperacion\n    unmixed = unmix( 0., 1.5,t); \n    start_pos=0.0; \n    end_pos=6.15;\n    \n     if  (unmixed>0.0 && unmixed<=1.0)\n   \t{     \n    \t//rof=mix(start_pos, end_pos, smoothstep(0., 1., unmixed));\n   \t\tro = vec3(0.0,0.0,-20.0+20.0*unmixed);\n   \t}  \n   /* \n   if (t>6.15 && t<8.0) \n    ro = vec3(0.0,0.0,12.0);    \n\t*/\n    \n    start_pos=6.15; \n    end_pos=8.0;\n    unmixed = unmix( start_pos, end_pos,t); \n    if  (unmixed>0.0 && unmixed<=1.0)\n   {     \n    rof=mix(start_pos, end_pos, smoothstep(0., 1., unmixed));\n   \tro =vec3(0.0,0.0,12.0*unmixed);\n    } \n    \n\t\n   \t/*\t\n   if (t>8.1 && t<75.0 ) \n    {\n    \n       ro = vec3(0.0,-mod(t,95.0),12.0);    \n    }\n   */\n    \n    \n    start_pos=8.1; \n    end_pos=start_pos+2.0;\n    unmixed = unmix( start_pos, end_pos,t); \n    if (unmixed>0.0 && unmixed<=1.0)\n    {  \n   \t \trof=mix(start_pos, end_pos, smoothstep(0., 1., unmixed));\n   \t\tro = vec3(0.0,-mod(unmixed*rof,95.0)*rof,12.0);\n    }\n    \n    \n\t/*   \n    if (t>75.1 ) \n   {\n       ro = vec3(0.0,-80,15.0+mod(t,72.0));    \n    }   \n    */\n    \n    start_pos=end_pos; \n    end_pos=start_pos+10.0;\n    unmixed = unmix( start_pos, end_pos,t); \n    if (unmixed>0.0 && unmixed<=1.0)\n    {  \n   \t \trof=mix(start_pos, end_pos, smoothstep(0., 1., unmixed));\n   \t\tro = vec3(0.0,-80,15.0+mod(unmixed*rof*2.0,72.0));  \n    }\n    \n    \n   \n\t//ro = get_mouse(ro);\n    vec3 rd = normalize( vec3(uv,1.0));\n  \n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n    \n    \n  \n    \n    mObj.dist =d;\n    vec3 colobj;\n    \n    vec3 nor= GetNormal( p);\n    \n  \n    \n    \n    colobj=getColor(int( Obj.tipo));\n    vec3 coltex=getColorTex(p, nor, int( Obj.tipo));\n    \n    \n    \n    if (Obj.tipo>=100.0) \n        colobj=coltex;\n       \n    \n\n  float dif1=1.5;\n   \n    \n    /*\n \tfloat dif1= GetLightPar(p,light_pos1);\n    dif1+= GetLightPar(p,light_pos2);\n     dif1= (dif1 )/2.0;\n    */\n    \n    \n    vec3 col2;\n        \n   \n   \t\tcol2=+ p_shadingv3( p, nor, ro,rd, light_pos1, light_color1 )*colobj;\n   \t\tcol2+= p_shadingv3( p, nor, ro,rd, light_pos2, light_color2 )*colobj;\n \t \n    \n    col=(col2)*dif1;\n    \n\n\n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n   \n};\n\n\nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n\n///--------------------------------------------\n///----------Orbit Camera\n///---------https://www.shadertoy.com/view/WlVGD1\n///----------Creditos de : spalmer en 2020-01-12\n///--------------------------------------------INICIO\nconst float orbit_scale = 3.0; // of radius of object\nconst float radius = 8.0; // of object resting on ground to examine\n\nvec2 StoQ(vec2 s, vec2 r)\n{\n\treturn (s + s - r) / r.y; \n}\n\nmat3 CameraMatrix(vec3 camFwd)\n{\n    vec3 w = normalize(camFwd)\n       , u = normalize(cross(vec3(0., 1., 0.), w))\n       , v = normalize(cross(w, u));\n    return mat3(u, v, w);\n}\n\n\nvec3 sph2cart(vec3 a) // spherical radians theta, psi, radius -> cartesian\n{\n    float cx = cos(a.x), sx = sin(a.x)\n        , cy = cos(a.y), sy = sin(a.y);\n    return vec3(sx*cy, sy, cx*cy) * a.z;\n}\n\nvec3 OrbitCamera(vec2 angles)\n{ // angles is yaw, pitch in radians\n    angles.x *= 2.; // kludge because Shadertoys clip mouse to window\n    angles.y = clamp(angles.y, -.4, .3);\n    return sph2cart(vec3(angles * PI, 1.));\n} \n\n///--------------------------------------------FIN\n///--------------------------------------------\n\n\n\n\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\n\n//-ooooooooooooooooooooooooooooooooooooooooooooooooooooo\n//https://www.shadertoy.com/view/XlBXWw\nvec2 hash22(vec2 p) { \n    float n = sin(dot(p, vec2(41, 289)));\n    return fract(vec2(262144, 32768)*n); \n    \n}\n\nfloat Voronoi(vec2 p)\n{\t\n    // Partitioning the 2D space into repeat cells.\n    vec2 ip = floor(p); // Analogous to the cell's unique ID.\n    p -= ip; // Fractional reference point within the cell (fract(p)).\n    float d = 1.;\n    \n    for (int i = -1; i <= 1; i++){\n\t    for (int j = -1; j <= 1; j++){\n\t    \n     \t    vec2 cellRef = vec2(i, j); // Base cell reference point.\n            \n            vec2 offset = hash22(ip + cellRef); // 2D offset.\n            \n            // Vector from the point in the cell to the offset point.\n            vec2 r = cellRef + offset - p; \n            float d2 = dot(r, r); // Squared length of the vector above.\n            \n            d = min(d, d2); // If it's less than the previous minimum, store it.\n        }\n    }\n    \n    // In this case, the distance is being returned, but the squared distance\n    // can be used too, if preferred.\n    return sqrt(d); \n}\n///oooooooooooooooooooooooooooooooooooooooooooooooooooooo\n\n\n//----------------\n///https://www.shadertoy.com/view/wsjBD3\n\nfloat sdcirclevec2(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvec2 mod2(inout vec2 p, vec2 size) \n{\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec2 hashvec2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nfloat noise1(vec2 p)\n{\n   const float cellWidth     = 1.0;\n  vec2 n = mod2(p, vec2(cellWidth));\n  vec2 hh = hashvec2(sqrt(2.0)*(n+1000.0));\n  hh.x *= hh.y;\n  \n  float r = 0.225*cellWidth;\n \n  float d = sdcirclevec2(p, 2.0*r);\n  \n  float h = hh.x*smoothstep(0.0, r, -d);\n\n  return h*0.25;\n}\n\n//--------------------------------\n    \n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\n\n//-------------------\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\n\nvec3 wave_color(float d, float s, vec2 uv )\n{\n    float b = 0.001;\n    // border\n    float bw = 0.08;\n    float innergray =\n        mix(.5,0.,smoothstep(-0.01,0.01,d))\n      + mix(.0,1.,smoothstep(bw,2.*bw,d));\n    vec3 blue = vec3(\n        vec2(s) + 0.2*length(0.2*uv)        , 1.);\n    vec3 white = vec3(1.);\n    return mix(white, blue, 2.*innergray);\n}\n    \n\n\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    float m;\n        \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\n\n      \n    if(i== 139 )\n    {\n     \n           vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    if (i==140)\n    { \n        vec2 p=mObj.p.xz;\n        float vo= Voronoi(p);\n     \tvec3 col= mix( vec3(0.25, 0.25, 0.25)*vo, vec3(0.26,0.54,1.0),vo); \n        return col;\n    } \n    \n    \n    if (i==141)\n    { \n        vec2 p=mObj.p.xz;\n        float vo= Voronoi(p);\n        float no1= noise1(p);\n        vo=vo*no1*10.5;\n     \tvec3 col= mix( vec3(0.25, 0.25, 0.25)*vo, vec3(0.26,0.54,1.0),vo); \n        return col;\n    } \n\t\n\t\n    \n    if (i==142)\n    { \n    \treturn  wave_color( mObj.dist, 0.22, mObj.uv );\n    }    \n    \n    //////// Colorization\n\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}