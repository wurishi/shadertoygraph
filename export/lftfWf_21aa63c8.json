{"ver":"0.1","info":{"id":"lftfWf","date":"1733588461","viewed":29,"name":"Rotate Texture Y","username":"Markant","description":"Rotate texture on Y","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Norm\n    vec2 resolution = iResolution.xy;\n    vec2 uv = fragCoord / resolution;\n    vec2 center = vec2(0.5, 0.5); \n    \n    // Scale\n    float scale = 1.2;\n    uv = (uv - center) * scale + center;\n    \n    // Speed\n    float angle = iTime * 2.1; \n    \n    // 3D-Koordinaten der Textur (wir fügen Z hinzu für Perspektive)\n    vec3 pos = vec3(uv - center, 0.0); // Texturposition als 3D-Vektor\n    \n    // Rotate\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    \n    float rotatedX = pos.x / cosAngle - pos.z * sinAngle; // x' = x * cos(angle) - z * sin(angle)\n    float rotatedZ = pos.x * sinAngle + pos.z / cosAngle; // z' = x * sin(angle) + z * cos(angle)\n    \n    // Position\n    pos = vec3(rotatedX, pos.y, rotatedZ);\n    \n    // Perspective\n    float perspective = 1. + pos.z * 0.3; \n    \n    // UV Tex\n    vec2 rotatedUV = pos.xy * perspective + center; \n    vec3 color = texture(iChannel0, rotatedUV).rgb;\n    \n    // bg\n    if (rotatedUV.x < 0.0 || rotatedUV.x > 1.0 || rotatedUV.y < 0.0 || rotatedUV.y > 1.0)\n    {\n        color = vec3(0.0);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}