{"ver":"0.1","info":{"id":"4lSBDh","date":"1579485324","viewed":134,"name":"Spin draft 1","username":"SudoNhim","description":"first draft of visual for gabby's song spin","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["voxels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSzw","filepath":"https://soundcloud.com/gabby-chuchro/spin","previewfilepath":"https://soundcloud.com/gabby-chuchro/spin","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\n#define VOXEL_NONE  0\n#define VOXEL_WATER 1\n#define VOXEL_SAND  2\n#define VOXEL_EARTH 3\n#define VOXEL_STONE 4\n#define VOXEL_GRASS 5\n\n// from https://www.shadertoy.com/view/4sfGzS\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n    vec2 uv = p.xy + f.xy;\n\tvec2 rg = vec2(texture( iChannel0, (uv+vec2(37.0,17.0)*p.z+0.5)/256.0, -100.0 ).x,\n                   texture( iChannel0, (uv+vec2(37.0,17.0)*(p.z+1.0)+0.5)/256.0, -100.0 ).x );\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat map(vec2 p)\n{\n    float h = texture(iChannel0, p/800.0).r;\n    return h;\n}\n\nfloat mmap(vec2 p)\n{\n    float f = map(p) * 0.3;\n    return texture(iChannel2, vec2(f, 0.1)).r;\n}\n\nint getVoxelAt(ivec3 ip)\n{ \n    if (ip.y <= 0) return VOXEL_WATER;\n    \n    float h = map(vec2(ip.xz))*20.0-2.0;\n    \n    if (float(ip.y) <= h)\n        return VOXEL_SAND;\n\n    return VOXEL_NONE;\n}\n\nfloat dfVoxel(vec3 p, int voxelType)\n{\n    return length(p) - 0.5;\n}\n\nvec3 nrmVoxel(vec3 p, int voxelType) \n{\n    vec2 dd = vec2(0.001,0.0);\n    float base = dfVoxel(p, voxelType);\n    return normalize(vec3(\n        dfVoxel(p+dd.xyy, voxelType) - base,\n        dfVoxel(p+dd.yxy, voxelType) - base,\n        dfVoxel(p+dd.yyx, voxelType) - base\n    ));\n}\n\nvoid voxelMarch(vec3 ro, vec3 rd, out ivec3 hitVoxels[4], out int hitCount, out float mAccums[4]) \n{\n    hitCount = 0;\n\n    ivec3 mapPos = ivec3(floor(ro));\n    vec3 deltaDist = abs(vec3(length(rd)) / rd);\n    ivec3 rayStep = ivec3(sign(rd));\n    vec3 sideDist = (sign(rd) * (vec3(mapPos) - ro) + (sign(rd) * 0.5) + 0.5) * deltaDist; \n    bvec3 mask;\n    \n    float mAccum = 0.0;\n\t\n    for (int i = 0; i < 128; i++) {\n\n        // check current position for voxel\n        if (getVoxelAt(mapPos) != VOXEL_NONE) {\n            // no non-const indexing? :<\n            if (hitCount == 0) hitVoxels[0] = mapPos;\n            else if (hitCount == 1) hitVoxels[1] = mapPos;\n            else if (hitCount == 2) hitVoxels[2] = mapPos;\n            else if (hitCount == 3) hitVoxels[3] = mapPos;\n            hitCount++;\n            if (hitCount == 4) return;\n        }\n        \n        mAccum += mmap(vec2(mapPos.xz));\n        mAccums[hitCount] = mAccum;\n\n        // march forward to next position by discrete digital analyzer\n        if (sideDist.x < sideDist.y) {\n            if (sideDist.x < sideDist.z) {\n                sideDist.x += deltaDist.x;\n                mapPos.x += rayStep.x;\n                mask = bvec3(true, false, false);\n            } else {\n                sideDist.z += deltaDist.z;\n                mapPos.z += rayStep.z;\n                mask = bvec3(false, false, true);\n            }\n        } else {\n            if (sideDist.y < sideDist.z) {\n                sideDist.y += deltaDist.y;\n                mapPos.y += rayStep.y;\n                mask = bvec3(false, true, false);\n            } else {\n                sideDist.z += deltaDist.z;\n                mapPos.z += rayStep.z;\n                mask = bvec3(false, false, true);\n            }\n        }\n    }\n}\n\nvoid resolveHitVoxels(\n    vec3 ro, vec3 rd, ivec3 hitVoxels[4], float mAccums[4], int hitCount, \n    out ivec3 hitVoxel, out vec3 hit, out int terrainType, out float mAccum) \n{ \n  mAccum = mAccums[0];\n  for (int i=0; i<4; i++) {\n    if (i == hitCount) return;\n    \n    hitVoxel = hitVoxels[i];\n    mAccum = mAccums[i];\n    terrainType = getVoxelAt(hitVoxel);\n    vec3 hitVoxelCenter = vec3(hitVoxel) + 0.5;\n    \n    // intersect with voxel cube\n    vec3 cubeIntersect = (hitVoxelCenter - ro - 0.5*sign(rd))/rd;\n    float d = max(cubeIntersect.x, max(cubeIntersect.y, cubeIntersect.z));\n\n    // fallback in case of no distance intersection\n    hit = ro + rd * (d - 0.01) - hitVoxelCenter;\n      \n    // attempt better intersect with distance marching\n    float diff;\n    vec3 p = ro + rd * d;\n    for (int j=0; j<4; j++) {\n      diff = dfVoxel(p - hitVoxelCenter, terrainType);\n      d += diff;\n      p = ro + rd * d;\n    }\n    if (diff < 0.05) { // good enough distance marched intersection\n      hit = p - hitVoxelCenter;\n      return;\n    }\n  }\n}\n\nvec3 doColoring(vec3 hit, int terrainType, vec3 ldir)\n{\n    vec3 n = nrmVoxel(hit, terrainType);\n    float diffuse = max(dot(-ldir, n), 0.1);\n    \n    // render\n    vec3 color = vec3(0.0);\n    if (terrainType == VOXEL_WATER) color = vec3(0.6, 0.6, 1.0);\n    if (terrainType == VOXEL_EARTH) color.r = 1.0;\n    if (terrainType == VOXEL_SAND) color.rg = vec2(1.0, 0.6);\n    if (terrainType == VOXEL_STONE) color.rgb = vec3(0.5);\n    if (terrainType == VOXEL_GRASS) color.g = 1.0;\n    \n    color *= (0.8 + 0.2*diffuse);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera stolen from Shane :) https://www.shadertoy.com/view/ll2SRy\n\tvec2 uv = (fragCoord - iResolution.xy*.5 )/iResolution.y;\n    vec3 rd = normalize(vec3(uv, (1.-dot(uv, uv)*.5)*.5));\n    vec3 ro = vec3(0., 20., iTime*3.0);\n    float t = sin(iTime * 0.2) + noise(ro/32.0);\n    ro.y += 4.0*t;\n\tfloat cs = cos( t ), si = sin( t );\n    rd.yz = mat2(cs, si,-si, cs)*rd.yz;\n    rd.xz = mat2(cs, si,-si, cs)*rd.xz;\n    \n    // voxel march into the scene storing up to four intersections\n    int hitCount;\n    ivec3 hitVoxels[4];\n    float mAccums[4];\n    voxelMarch(ro, rd, hitVoxels, hitCount, mAccums);\n\n    // resolve to one accurate intersection by distance marching\n    int terrainType = VOXEL_NONE;\n    ivec3 hitVoxel;\n    vec3 hit;\n    float mAccum;\n    resolveHitVoxels(ro, rd, hitVoxels, mAccums, hitCount, hitVoxel, hit, terrainType, mAccum);\n\n    vec3 hitGlobal = vec3(hitVoxel) + hit;\n    \n    // color\n    vec3 ldir = normalize(hitGlobal - ro);\n    vec3 color = doColoring(hit, terrainType, ldir);\n    \n    // fog\n    float fog = smoothstep(1.0, 0.0, length(hitGlobal - ro)/96.0);\n    color *= fog;\n    \n    color += mAccum/32.0;\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}