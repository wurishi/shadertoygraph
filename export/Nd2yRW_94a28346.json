{"ver":"0.1","info":{"id":"Nd2yRW","date":"1643172005","viewed":98,"name":"Julia Set Moving Along Edges","username":"c0rymcg","description":"This is an animated Julia set render where the location of the constant C follows the major contours of the Mandelbrot Set. (it traces the main cartioid and period-2 bulb)\n\nSince C moves along the contours, each frame is guaranteed to be full of chaos.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on https://www.shadertoy.com/view/WlcXR4\n\nvec2 f(vec2 x, vec2 c) {\n    return mat2(x,-x.y,x.x)*x + c;\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n#define PI 3.14159\n#define TAU 6.28318\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float time = iTime/8.;\n    \n    int u_maxIterations = 100;\n    \n    //select a point along the cartoid for C\n    float angle = mod(time,TAU*2.);\n    if (iMouse.z>0.){\n        vec2 mPos = iMouse.xy/iResolution.xx;\n        angle=mPos.x*TAU*2.;\n        \n        //mPos -= 0.5;mPos *= 1.3;mPos += 0.5;\n        //mPos=3.*(mPos-vec2(0.5,0.22));\n        \n    }\n    bool type1 = true;\n    \n    vec2 c = vec2(-1,0);\n    if (angle < PI){type1 = false;}\n    if (angle > TAU+PI){type1=false;}\n    float a = mod(angle,TAU);\n    \n    if (type1==true){c = vec2(cos(a),sin(a))/1.99 - vec2(cos(a*2.),sin(a*2.))/3.98;}\n\telse{c = vec2(cos(PI-a)/3.99-1.,sin(PI-a)/3.99);}\n    \n    \n    vec3 col=vec3(0.);\n    //aa\n    #define AA 3\n    \n    for (int aax=0; aax<AA; aax++){\n      for (int aay=0; aay<AA; aay++){\n        \n        vec2 uv = (fragCoord + vec2(aax,aay)/float(AA))/iResolution.xx;\n        uv -= 0.5;uv *= 1.3;uv += 0.5;\n        uv=3.*(uv-vec2(0.5,0.22));\n        \n        \n        vec2 z = uv;\n    \n        bool escaped = false;\n        int iterations;\n        float sum = 0.;\n    \n    \n        for (int i = 0; i < u_maxIterations; i++) {\n            //if (i > u_maxIterations) break;\n            iterations = i;\n            z = f(z, c);\n            sum += max(0.,1.5 - length(z));\n            if (dot(z,z) > 4.0) {\n                escaped = true;\n                break;\n            }\n        }\n      \n    \n\t\t\t\n        vec3 iterationCol = vec3(palette(sum/10., vec3(0.5), vec3(0.5), vec3(1.0, 1.0, 0.0), vec3(0.3, 0.2, 0.2)));\n\t\t\n        col += iterationCol;//vec3(escaped ? iterationCol : vec3(0.));\n\t  }\n    }\n    \n    //float f_ite = float(iterations);\n    //float f_maxIte = float(u_maxIterations);\n    fragColor = vec4(col/float(AA*AA),1.);\n}\n\n","name":"Image","description":"","type":"image"}]}