{"ver":"0.1","info":{"id":"WddSDs","date":"1573152808","viewed":86,"name":"stripes to triangles, colorful","username":"thisisthais","description":"an exercise from chapter 9 of the book of shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triangle","colors","shapes","stripes","tiling","rotation","tboss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 _st,float _angle){\n  _st-=.5;\n  _st=mat2(cos(_angle),-sin(_angle),\n  sin(_angle),cos(_angle))*_st;\n  _st+=.5;\n  return _st;\n}\n\nvec2 tile(vec2 _st,float _zoom){\n  _st*=_zoom;\n  return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st){\n  \n  //  Scale the coordinate system by 2x2\n  _st*=2.;\n  \n  //  Give each cell an index number\n  //  according to its position\n  float index=0.;\n  index+=step(1.,mod(_st.x,2.));\n  index+=step(1.,mod(_st.y,2.))*2.;\n  \n  //      |\n  //  2   |   3\n  //      |\n  //--------------\n  //      |\n  //  0   |   1\n  //      |\n  \n  // Make each cell between 0.0 - 1.0\n  _st=fract(_st);\n  \n  // Rotate each cell according to the index\n  // 0 rotates 0\n  if(index==1.){\n    //  Rotate cell 2 by -90 degrees\n    _st=rotate2D(_st,PI*-.5);\n  }else if(index==2.){\n    //  Rotate cell 1 by 90 degrees\n    _st=rotate2D(_st,PI*.5);\n  }else if(index==3.){\n    //  Rotate cell 3 by 180 degrees\n    _st=rotate2D(_st,PI);\n  }\n  \n  return _st;\n}\n\n// https://iquilezles.org/articles/palettes\n// As t runs from 0 to 1 (our normalized palette index or domain),\n//the cosine oscilates c times with a phase of d.\n//The result is scaled and biased by a and b to meet the desired constrast and brightness.\nvec3 cosPalette(float t,vec3 a,vec3 b,vec3 c,vec3 d)\n{\n  return a+b*cos(6.28318*(c*t+d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 myRes = iResolution.yy/1.5;\n  vec2 st=fragCoord.xy/myRes.xy;\n  \n  st=tile(st,3.);\n  st=rotateTilePattern(st);\n  \n  // Make more interesting combinations\n  st=tile(st,3.);\n  st=rotate2D(st,-PI*iTime*.15);\n  //st = rotateTilePattern(st*2.);\n  // st = rotate2D(st,PI*u_time*0.25);\n  \n  vec3 color=cosPalette(iTime/10.,vec3(.8),vec3(.3),vec3(1.),vec3(iTime*.01,iTime*.1,iTime*.2));\n  // step(st.x,st.y) just makes a b&w triangles\n  // but you can use whatever design you want.\n  fragColor=vec4(vec3(step(st.x,st.y))*color,1.);\n}\n","name":"Image","description":"","type":"image"}]}