{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define M_PI (3.1415926535897932384626433832795)\n\nfloat qScanLine (vec2 uv, float n) {\n\treturn abs (sin (uv.y*M_PI*n)) ; \n}\n\nfloat qVignete (vec2 uv,float q, float o) {\n\tfloat x = clamp (1.0 - distance (uv, vec2 (0.5,0.5))*q, 0.0, 1.0);\n\treturn (log((o - 1.0/exp (o))*x + 1.0/exp (o)) + o)/(log(o) + o);\n}\n\n\nvec2 vCrtCurvature (vec2 uv, float q) {\n\tfloat x = 1.0- distance (uv, vec2 (0.5, 0.5));\n\tvec2 g = vec2 (0.5, 0.5) - uv;\n\treturn uv + g*x*q;\n}\n\nvec4 v2DNoiseSample (vec2 gPos) {\n\tvec2 nPos = vec2(\n\t\tmod (gPos.x+iTime*9.66,1.0),\n\t\tmod (gPos.y+iTime*7.77,1.0)\n\t);\t\t\n\treturn texture (iChannel1, nPos);\n}\n\nvec4 v1DNoiseSample (float idx, float s) {\t\n\treturn texture (iChannel1, vec2 (\n\t\tmod (idx, 1.0), \n\t\tmod (iTime*s, 1.0))\n\t);\n}\n\nfloat q2DNoiseSample (vec2 gPos) {\n \tvec4 nPnt = v2DNoiseSample (gPos);\n\treturn nPnt.x;\n}\n\nfloat q1DNoiseSample (float idx, float s){\n\tvec4 nPnt = v1DNoiseSample (idx, s);\n\treturn nPnt.x;\n}\n\nvec4 cSignalNoise (vec4 c,float q, vec2 gPos) {\n\treturn c*(1.0 - q) + q*q2DNoiseSample(gPos);\n}\n\nvec2 vScanShift (vec2 uv, float q, float dy, float dt) {\n\treturn vec2 (uv.x + q1DNoiseSample (uv.y*dy, dt)*q, uv.y);\n}\n\nvec2 vFrameShift (vec2 uv, float q, float dt) {\n\tfloat s = (q1DNoiseSample (0.5, dt) - 0.5)/500.0;\n\treturn vec2 (uv.x, mod (uv.y + iTime*(q+s), 1.0));\t\n}\n\nvec2 vDirShift (vec2 uv, float angle, float q) {\n\tfloat a =(angle/180.0)*M_PI;\n\tvec2 dir = vec2 (sin (a), cos (a));\n\treturn uv + dir*q;\n}\n\nvec4 vRGBWithShift (vec2 uv, float angle, float q) {\n\tvec2 rPos = vDirShift (uv, angle, q);\n\tvec2 gPos = uv;\n\tvec2 bPos = vDirShift (uv, -angle, q);\n\tvec4 rPix = texture (iChannel0, rPos);\n\tvec4 gPix = texture (iChannel0, gPos);\n\tvec4 bPix = texture (iChannel0, bPos);\n\treturn vec4 (rPix.x, gPix.y, bPix.z, 1.0);\n}\n\nvec4 vPowerNoise (vec4 col, vec2 uv, float b, float dt, float w) {\n\tfloat s = q1DNoiseSample (0.0, 0.001)/500.0;\n\tfloat y = mod (iTime * (dt + s) , 1.0);\n\tfloat d = 1.0 - clamp (abs (uv.y - y), 0.0, w)/w;\n\treturn pow (col,vec4(1.0/(1.0 + b*d)) ) ;\n}\n\nvec4 qGamma (vec4 i, vec4 g){\n\treturn pow(i, 1.0/g);\n}\n\nvec4 vRGBTint (vec4 col, vec3 g, float q) {\t\n\treturn qGamma (col, vec4 (g, 1.0))*q + (1.0 - q)*col;\t\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 vColorDrift (vec4 col, float q) {\n\tvec3 hsv = rgb2hsv (col.xyz);\n\thsv.y = mod (hsv.y * q, 1.0);\n\treturn vec4 (hsv2rgb (hsv), col.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 cRes = iChannelResolution [0].xy;\n\tvec2 gRes = iResolution.xy;\n\tvec2 gPos = fragCoord.xy / gRes;\t\n\tvec2 cPos = gPos ;\n\tvec4 cCol = vec4(1.0);\n\tvec2 bPos = vec2(1.0);\n\tfloat qNoise = q1DNoiseSample(0.01,0.01);\n\t\n\tcPos = vScanShift (cPos, 0.02, 0.1, 0.1);\t\t\t// snaline shift\n\tcPos = vCrtCurvature (cPos, 0.3);\t\t\t\t\t// crt curving of coords\n\tbPos = vCrtCurvature (gPos, 0.3);\t\t\t\t\t// curvature for the noize bar\n\tcPos = vFrameShift (cPos, 0.01, 0.001);\t\t\t\t// frame shift\t\t\n\tcCol = vColorDrift (cCol, 1.0 - qNoise);\t\n\tcCol = vRGBWithShift (cPos, 100.0, 0.01); \t\t\t// sample signal color\t\n\tcCol = cSignalNoise (cCol, qNoise * 0.8, gPos);\t\t\t\t// add signal noise\n\tcCol = vPowerNoise (cCol, bPos, 4.0, -0.2, 0.1); \t// power line noize\n\tcCol = vRGBTint (cCol, vec3 (0.9, 0.7, 1.2), 1.0);\t// gamma tint\n\tcCol = cCol * qScanLine (gPos, 120.0); \t\t\t\t// add scanlines\n\tcCol = cCol * qVignete (gPos, 1.5, 3.0); \t\t\t// add edge darkening\n\tfragColor = cCol;\n\t\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsfXzM","date":"1398338989","viewed":1197,"name":"ColdbergTVShader","username":"Coldberg","description":"old tv shader","likes":18,"published":1,"flags":0,"usePreview":1,"tags":["tvshader"],"hasliked":0,"parentid":"","parentname":""}}