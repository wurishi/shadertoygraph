{"ver":"0.1","info":{"id":"XdlBDs","date":"1498852057","viewed":110,"name":"Ã‰querre 6 Star (Kisrhombille)","username":"ttoinou","description":"see https://www.shadertoy.com/view/XdsfWs","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["triangle","tiling","kisrhombille","reptile","equerre"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHOW_POINTS 1\n#define SHOW_SEGMENTS 1\n\n// segment.x is distance to closest point\n// segment.y is barycentric coefficient for closest point\n// segment.z is length of closest point on curve, on the curve, starting from A\n// segment.a is approximate length of curve\nvec4 segment( vec2 p, vec2 a, vec2 b )\n{\n  a -= p;\n  b -= p;\n  vec3 k = vec3( dot(a,a) , dot(b,b) , dot(a,b) );\n  float t = (k.x - k.z)/( k.x + k.y - 2.*k.z );\n  float len = length(b-a);\n    \n  if( t < 0. ){\n      return vec4( sqrt(k.x) , 0. , 0. , len );\n  } else if( t > 1. ){\n      return vec4( sqrt(k.y) , 1. , len , len );\n  } else {\n  \treturn vec4( length(a*(1.-t) + b*t) , t , t*len , len );\n  }\n}\n\n// https://www.shadertoy.com/view/4djSRW\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define PRECISION 0.2\n\nvec3 hash3point(vec2 p)\n{\n    //vec3 col = hash32(p);\n    vec3 col = \n            hash32(p*1.25672+vec2(.2,.8))\n          * hash32(vec2(p.y,p.x)/3.42464-vec2(.5,.0))\n          - hash32(vec2(3.0+p.y,1.2))\n    ;\n    \n    return clamp(pow(\n        abs(col)\n        , vec3(.6,.5,.4)\n      ),0.0,1.0\n    );\n    /*ivec2 ip = ivec2(\n        round(p.x / PRECISION) ,\n        round(p.y / PRECISION)\n    );\n    \n    return hash32(vec2(ip));*/\n}\n\nvoid mixColorPoint(vec2 uv,inout vec3 col,vec2 colPoint,float scale)\n{\n    col = mix(\n        col , \n        hash3point(colPoint) ,\n        1.0 - smoothstep(0.0,1.0,sqrt(sqrt( length(uv - colPoint)* scale )))\n    );\n}\n\n\nvoid mixColorLine(vec2 uv,inout vec3 col,vec2 lineA,vec2 lineB,float scale)\n{\n    col = mix(\n        col , \n        hash3point(lineA+lineB) ,\n        1.0 - smoothstep(0.0,1.0,sqrt(sqrt( segment(uv,lineA,lineB).x * scale )))\n    );\n}\n\nbool pointsOnSameSideOfLine(vec2 pointA,vec2 pointB,vec2 lineA, vec2 lineB)\n{\n    vec2 n = lineB - lineA;\n    n = vec2(n.y,-n.x);\n    return  dot(pointA-lineA,n)\n          * dot(pointB-lineA,n)\n    > 0.0;\n}\n\nfloat viewportMagnify = 1.0;\nvec2 screenToViewport(vec2 uv)\n{\n    return (uv - iResolution.xy/2.0 ) / min(iResolution.x,iResolution.y) * viewportMagnify;\n}\n\nfloat uhash( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    \n    \n    //return 1.0 - float(n&0x7fffffffU)/float(0x7fffffff);\n  \n    // floating point conversion from https://iquilezles.org/articles/sfrand\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\nfloat hash( float n ) \n{\n    return ( tanh(uhash(uint(n))) + 1.0 ) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    int nbIterations = 4 + int(floor((cos(iTime*3.14/5.0)+1.1)*3.5));\n    \n\tint EquerreVersion = 1;\n    vec2 base = vec2(sqrt(3.0),1.0);\n    base *= 50000.0;\n    \n    \n\tvec2 uv = screenToViewport(fragCoord.xy );\n    \n    viewportMagnify = base.x / 4.1;\n    uv *= viewportMagnify;\n    uv += base/3.5;\n    \n    // Base Triangle\n    vec2 A = vec2(0.0);\n    vec2 B = A + vec2(base.x,0.0);\n    vec2 C = A + vec2(0.0,base.y);\n    \n    vec2 D,E,F;\n    #define SWAP(X,Y) F = X; X = Y; Y = F;\n    \n    #ifdef REPEAT_TILING\n   \t\t// Upper Triangle\n        if( !pointsOnSameSideOfLine(uv,\n                         A,B,C) )\n        {\n            A += vec2(base.x,base.y);\n            SWAP(B,C)\n        }\n    #endif\n    \n    float TriangleID = 1.0;\n    \n    for(int i = 0 ; i < nbIterations ; i++)\n    {\n        D = (2.0 * A + B)/3.0;\n        E = (B + C)/2.0;\n        \n        if( pointsOnSameSideOfLine(uv,\n                                A,D,C) )\n        {\n            B = D;\n            SWAP(B,C)\n        }\n        else if( pointsOnSameSideOfLine(uv,\n                                B,D,E) )\n        {\n            A = E;\n            C = D;\n            TriangleID++;\n        }\n        else \n        {\n            A = E;\n            B = C;\n            C = D;\n            TriangleID++;\n            TriangleID++;\n        }\n        \n        TriangleID *= 3.0;\n    }\n    \n    TriangleID /= 3.0;\n    \n    /*fragColor.rgb = vec3(\n        hash(mod(TriangleID,2.0)),\n        hash(mod(TriangleID,2.0)),\n        hash(mod(TriangleID,2.0))\n    );*/\n    \n    fragColor.r = mod(TriangleID,3.0)/2.0;\n    fragColor.g = mod(TriangleID,3.0)/2.0;\n    fragColor.b = mod(TriangleID,3.0)/2.0;\n    \n    float scale = float(nbIterations);\n    scale = pow(2.0,scale)/viewportMagnify/scale;\n    \n    #if SHOW_SEGMENTS==1\n        mixColorLine(uv,fragColor.rgb,A,B,scale);\n        mixColorLine(uv,fragColor.rgb,B,C,scale);\n        mixColorLine(uv,fragColor.rgb,C,A,scale);\n    #endif\n    \n    //scale /= float(nbIterations);\n   \n    #if SHOW_POINTS==1\n        mixColorPoint(uv,fragColor.rgb,A,scale);\n        mixColorPoint(uv,fragColor.rgb,B,scale);\n        mixColorPoint(uv,fragColor.rgb,C,scale);\n    #endif\n    \n    \n\tfragColor.rgb = pow(fragColor.rgb,vec3(0.5,.6,.7));\n}\n\n\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 p = uvec2(fragCoord);\n    \n\tfloat f = hash( p.x + 1920U*p.y + (1920U*1080U)*uint(iFrame) );\n    \n\tfragColor = vec4(f,f,f,1.0);\n}\n\n*/","name":"Image","description":"","type":"image"}]}