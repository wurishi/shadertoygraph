{"ver":"0.1","info":{"id":"4XfGz8","date":"1707104057","viewed":69,"name":"Fractal Fluid ","username":"Fuergu","description":"Just try","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gradient (float grayscale,vec3 offset, vec3 amp, vec3 freq,vec3 phase)\n{\n    return offset+amp*sin(freq*grayscale+phase);\n}\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n//Compute Zn2 +C\nvec2 computeNext(vec2 current,vec2 constant)\n{\n    // zn2\n    float zr = (current.x* current.x - current.y * current.y);\n    float zi= (1.+3.*sin(iTime/5.+45.)) * current.x* current.y;\n    vec2 Zn2 = vec2(zr,zi);\n    // Add constant\n    //return Zn2+ constant + dot(Zn2,Zn2);\n    return Zn2+ constant + dot(zr,zi);\n}\n\n//Computes sequence elements until mod exceeds threshold or max iteration is reached\nvec3 computeIterations(vec2 z0, vec2 constant, int maxIteration)\n{\n    vec2 zn = z0;\n    int iteration =0;\n    while(dot(zn,zn)<40000000.0 && iteration< maxIteration)\n    {\n        zn = computeNext(zn,constant);\n        iteration++;\n    }\n    return vec3(log(zn),iteration);\n}\nvec3 render(vec2 fragCoordIn)\n{\n    vec2 uv = (fragCoordIn-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy-vec2(.5);\n    uv*=2.;\n    uv*=Rot(90.);\n\t\n    float scale =1./float(fragCoordIn.y /2.);\n    \n    float sinTime = sin(iTime);\n    float cosTime = cos(iTime);\n    vec2 constant = vec2(.352*(0.4857+.5),.1*(0.1969+.5));//+.0005*vec2(cosTime,sinTime);\n    // Compute color\n    vec3 endComp = computeIterations(uv,constant,150);\n    float col = 1.-length(endComp.xy)*.2;\n    //col = endComp;\n    //vec3 col = vec3(endComp.z);\n    // Output to screen\n    vec3 color = gradient(col+.5+cos(iTime)*.5,vec3(0.6284,0.490,0.500),vec3(-0.392,0.500,0.500),vec3(0.5,1.000,1.000),vec3(-0.841,-0.572,0.667));          \n    float alpha = log(endComp.z/2.);\n    color*=alpha;\n    return color;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float SMOOTH = 0.05;\n    vec3 color = 0.25*render(fragCoord+vec2(SMOOTH,0.));\n    color+=0.25*render(fragCoord+vec2(-SMOOTH,0));\n    color+=0.25*render(fragCoord+vec2(0.,SMOOTH));\n    color+=0.25*render(fragCoord+vec2(0.,-SMOOTH));\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}