{"ver":"0.1","info":{"id":"7sGSWm","date":"1634735023","viewed":196,"name":"Basic Cube Example","username":"yuempek","description":"How is cube buffer stored   ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cubetexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// click and move your mouse on player\n\n#define PI 3.14159265\n#define Degree /180.*PI\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat zoom = (1.0 - iMouse.y/iResolution.y)*2.0;//0..+1\n\t\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;//-1..+1\n    float aspect = iResolution.x/iResolution.y;\n    uv.y /= aspect;\n    \n    float fov = 180.0 Degree;\n    \n    fov = 180.0 Degree / pow(2.0, zoom * 2.0);\n    \n    float k = fishEyeCorrection (fov, uv); \n    uv = vec2(uv.x/k, uv.y/k); //more fisheye\n    \n    \n    \n    fragColor = texture(iChannel0, vec3(uv, zoom*2.0));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"#define PI 3.14159265\n\nmat2 rotate2d(float a) {\n\tfloat c = cos(a); \n    float s = sin(a);\n\treturn mat2(c, s, \n               -s, c);\n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    //vec2 uv = fragCoord/iResolution.xy;\n\t//fragColor = texture(iChannel0, vec2(1)-uv);\n    \n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    \n    float rot = iMouse.x/iResolution.x*2.0-1.0;//-1..+1\n\n    rayDir.xz = rayDir.xz * rotate2d(rot*2.0*PI);\n\tfragColor = texture(iChannel1, rayDir);\n    \n}","name":"Cube A","description":"","type":"cubemap"},{"inputs":[],"outputs":[],"code":"float fishEyeCorrection (float fov, vec2 uv) {\n    float x = uv.x;\n    float y = uv.y;\n    float z = 1.0/tan(fov / 2.0);\n\n\n    float length_xy = length(uv);\n\n\n    //float a = atan(x, y);\n    float b = atan(length_xy, z);\n    float k = 2.0*b/(length_xy*fov);\n\n    return k;\n}","name":"Common","description":"","type":"common"}]}