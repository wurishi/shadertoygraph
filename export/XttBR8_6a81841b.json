{"ver":"0.1","info":{"id":"XttBR8","date":"1538674746","viewed":82,"name":"Layered House EGP-200 ","username":"benphantom41","description":"Created a house using layers without any conditionals (if/else statements)\nAlso has the ability to turn off layers at will","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["egp200"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Background color\nvec4 BGColor = vec4(0.0,0.74902,1.0,1.0);\n\n//Vectors for the house\nvec2 lowerHouse = vec2(0.85,0.4);\nvec2 hDimentions = vec2(0.3,0.2); \nvec3 hColor = vec3(0.85,0.25,0.0);\n\n//Vectors for the Chimney\nvec2 lowerChimney = vec2(1.323,0.75);\nvec2 cDimentions = vec2(0.035,0.07);\nvec3 cColor = vec3(0.37,0.09,0.12); \n\n//Vectors for the windows\nvec2 lowerWindow1 = vec2(0.52,0.5);\nvec2 wDimentions1 = vec2(0.05,0.1);\n\nvec2 lowerWindow2 = vec2(1.18,0.5);\nvec2 wDimentions2 = vec2(0.05,0.1);\n\nvec2 lowerWindow3 = vec2(0.85,0.59);\nvec2 wDimentions3 = vec2(0.05,0.05);\n\nvec3 wColor = vec3(0.9,0.9,0.9);\n\n//Vectors for the door\nvec2 lowerDoor = vec2(0.85, 0.223);\nvec2 dDimentions = vec2(0.05, 0.1);\nvec3 dColor = vec3(0.31,0.16,0.03);\n\n//Variables for the door handle\nvec2 dhCenter = vec2(0.9,0.2);\nvec3 dhColor = vec3(0.0,0.0,0.0);\nfloat dhRadius = 0.01;\n\n//Variables for the sun\nvec2 sCenter = vec2(-0.08,1.04);\nvec3 sColor = vec3(1.0,1.0,0.0);\nfloat sRadius = 0.2;\n\n//antiAlias for circles\nfloat antiAlias = 0.003;\n\n//Modifies alpha to turn \"off\" or \"on\" the layers\nfloat houseAlpha = 1.0;\nfloat chimneyAlpha = 1.0;\nfloat windowAlpha = 1.0;\nfloat doorAlpha = 1.0;\nfloat sunAlpha = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat aspectRatio = iResolution.y / iResolution.x;\n\tuv.y *= aspectRatio;\n    \n    //Fixes the aspect ratio for the shapes\n    lowerHouse *= aspectRatio;\n    lowerChimney *= aspectRatio;\n    lowerWindow1 *= aspectRatio;\n    lowerWindow2 *= aspectRatio;\n    lowerWindow3 *= aspectRatio;\n    lowerDoor *= aspectRatio;\n    dhCenter *= aspectRatio;\n    sCenter *= aspectRatio;\n    \n    float sDistance = length(sCenter - uv);\n    float dhDistance = length(dhCenter - uv);\n    \n    //Interpolates between the vectors to create the shapes\n    float hInterpX = (1.0 - step(hDimentions.x, length(lowerHouse.x - uv.x)));\n    float hInterpY = (1.0 - step(hDimentions.y, length(lowerHouse.y - uv.y)));\n    \n    float cInterpX = (1.0 - step(cDimentions.x, length(lowerChimney.x - uv.x)));\n    float cInterpY = (1.0 - step(cDimentions.y, length(lowerChimney.y - uv.y)));\n\t\n    float wInterpX1 = (1.0 - step(wDimentions1.x, length(lowerWindow1.x - uv.x)));\n    float wInterpY1 = (1.0 - step(wDimentions1.y, length(lowerWindow1.y - uv.y)));\n    \n    float wInterpX2 = (1.0 - step(wDimentions2.x, length(lowerWindow2.x - uv.x)));\n    float wInterpY2 = (1.0 - step(wDimentions2.y, length(lowerWindow2.y - uv.y)));\n    \n    float wInterpX3 = (1.0 - step(wDimentions3.x, length(lowerWindow3.x - uv.x)));\n    float wInterpY3 = (1.0 - step(wDimentions3.y, length(lowerWindow3.y - uv.y)));\n    \n    float dInterpX = (1.0 - step(dDimentions.x, length(lowerDoor.x - uv.x)));\n    float dInterpY = (1.0 - step(dDimentions.y, length(lowerDoor.y - uv.y)));\n    \n    float sInterp = smoothstep(sDistance, sDistance+antiAlias, sRadius);\n    \n    float dhInterp = smoothstep(dhDistance, dhDistance+antiAlias, dhRadius);\n    \n    //Assembles the layers\n    vec4 BGLayer = BGColor;\n    vec4 layer1 = vec4(cColor, (cInterpX * cInterpY) * chimneyAlpha);\n    vec4 layer2 = vec4(hColor, (hInterpX * hInterpY) * houseAlpha);\n        \n    vec4 layer3 = vec4(wColor, (wInterpX1 * wInterpY1) * windowAlpha);\n    \t layer3 += vec4(wColor, (wInterpX2 * wInterpY2) * windowAlpha);\n   \t\t layer3 += vec4(wColor, (wInterpX3 * wInterpY3) * windowAlpha);\n    \n    vec4 layer4 = vec4(dColor, (dInterpX * dInterpY) * doorAlpha);\n    \t layer4 += vec4(dhColor, (dhInterp * doorAlpha));\n    \n    vec4 layer5 = vec4(sColor, (sInterp * sunAlpha)); \n        \n    //Mixes the layers together\n    vec4 composite = mix(BGLayer, layer1, layer1.a); \n    composite = mix(composite, layer2, layer2.a);\n    composite = mix(composite, layer3, layer3.a);\n    composite = mix(composite, layer4, layer4.a);\n    composite = mix(composite, layer5, layer5.a);\n        \n    // Output to screen\n    fragColor = composite;\n}","name":"Image","description":"","type":"image"}]}