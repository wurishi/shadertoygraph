{"ver":"0.1","info":{"id":"tls3zN","date":"1555820884","viewed":429,"name":"Simple Explosion in 2D","username":"10000volts","description":"Imitate the explosion effect in Soul Knight.\nThis's my first submission...","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","explosion","pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n\n// draw a moving bullet.\nconst float TIME_PHASE1 = 2.0;\n// draw explosion.\nconst float TIME_PHASE2 = 2.5;\n\nconst float BULLET_RADIUS = 4.0;\nconst float BULLET_RADIUS2 = 9.0;\nconst float EXPLOSION_RADIUS = 15.0;\nconst vec3 BULLET_COLOR = vec3(1.0, 0.6, 0.0);\nconst vec4 EXPLOSION_COLOR = vec4(1.0, 0.6, 0.0, 1.0);\nconst vec4 EXPLOSION_SQUARE_COLOR = vec4(1.0, 1.0, 0.6, 1.0);\nconst int SQUARE_COUNT = 3;\nconst float SQUARE_MAX_HALF_WIDTH = 11.0;\n\n// the speed of bullet.\nfloat MOVING_SPEED;\nfloat START_X;\nfloat START_Y;\nfloat explosionX;\nfloat explosionY;\n\nvec2 uv;\n\nvoid drawBackground(out vec4 fragColor){\n    fragColor = vec4(vec3(texture(iChannel0, uv/iResolution.xy)), 1.0);\n}\n\n// xy: position of squares' center.\n// z: the half of width and height of the squares.\nvec4 square[SQUARE_COUNT];\nvoid drawExplosion(float t, out vec4 fragColor){\n    // draw circle.\n    float r = t * EXPLOSION_RADIUS / (TIME_PHASE2 - TIME_PHASE1); \n    vec2 o = vec2(explosionX, explosionY);\n    float d = distance(uv, o);\n    if(d <= EXPLOSION_RADIUS && d > r){\n    \tfragColor = EXPLOSION_COLOR;\n    }\n    \n    // draw squares.\n    int i;\n    for(i = 0; i < SQUARE_COUNT; ++i){\n    \tif(abs(uv.x - square[i].x) <= square[i].z && \n           abs(uv.y - square[i].y) <= square[i].z){\n    \t\tfragColor = EXPLOSION_SQUARE_COLOR;\n        }\n    }\n}\n\nvoid drawBullet(float t, out vec4 fragColor){\n    // the center of the two circles.\n    vec2 o = vec2(START_X + MOVING_SPEED * t, START_Y);\n    float d = distance(uv, o);\n    \n    // draw smaller circle.\n    if(d <= BULLET_RADIUS){\n\t\tfragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n\t// draw bigger circle.\n    else if(d <= BULLET_RADIUS2){\n    \tfloat R, G, B;\n        float W = smoothstep(BULLET_RADIUS, BULLET_RADIUS2, d);\n        R = 1.0 - (1.0 - BULLET_COLOR.x) * W;\n        G = 1.0 - (1.0 - BULLET_COLOR.y) * W;\n        B = 1.0 - (1.0 - BULLET_COLOR.z) * W;\n\t\tfragColor = vec4(R, G, B, 1.0);\n    }\n}\n\nvoid init(vec2 fragCoord){\n    uv = fragCoord;\n    \n    START_Y = iResolution.y / 2.0;\n    START_X = iResolution.x / 4.0;\n    MOVING_SPEED = iResolution.x * 0.5 / TIME_PHASE1;\n    \n    explosionX = START_X + MOVING_SPEED * TIME_PHASE1;\n    explosionY = START_Y;\n}\n\n#define rand(x, y) fract(cos(x * (12.9898) + y * (4.1414)) * 43758.5453)\n#define rand2(x, y) fract(cos(x * (11.2333) + y * (6.6262)) * 43758.5453)\n\nvoid randExplusionEffect(float t, vec2 xy){\n    float ti = ceil(iTime / TIME_PHASE2);\n\tvec2 seed = vec2(ti, 100.0 / (ti + 1.0));\n    int i;\n    float r;\n    float degree;\n    for(i = 0; i < SQUARE_COUNT; ++i){\n        r = rand(seed.x, seed.y) * EXPLOSION_RADIUS;\n        degree = rand2(seed.x, seed.y) * PI * 2.0;\n        \n        square[i].x = explosionX + r * cos(degree);\n        square[i].y = explosionY + r * sin(degree);\n        square[i].z = \n            rand(square[i].x, square[i].y) * SQUARE_MAX_HALF_WIDTH * (\n            1.0 - t / (TIME_PHASE2 - TIME_PHASE1));\n        \n        seed.x = iResolution.x * rand(seed.x + ti, seed.y);\n        seed.y = iResolution.y * rand2(seed.y + ti, seed.x);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    init(fragCoord);\n\t\n    // draw background\n    drawBackground(fragColor);\n    \n    float t = iTime;\n    while(t > TIME_PHASE2) {\n        t -= TIME_PHASE2;\n    }\n    \n    if(t < TIME_PHASE1){\n\t\tdrawBullet(t, fragColor);\n    }else{\n    \trandExplusionEffect(t - TIME_PHASE1, fragCoord);\n\t\tdrawExplosion(t - TIME_PHASE1, fragColor);\n    }\n}","name":"Image","description":"","type":"image"}]}