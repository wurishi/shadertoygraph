{"ver":"0.1","info":{"id":"stfBWS","date":"1651431343","viewed":55,"name":"2 Spheres inside a cube","username":"Runar","description":"2 dimensional spheres within a cube","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dspheresinacube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotates uv theta*pi clockwise\nvec2 rotate(vec2 uv, float theta) {\n    theta *= 3.1415;\n    return mat2(cos(theta),sin(theta),-sin(theta),cos(theta)) * uv;\n}\n\n// Makes a cube with size and offset\nfloat cube(vec2 uv, float size, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    // Fix aspect ratio, i.e. make it cube not rect\n    x *= 8./4.5;\n    \n    vec2 rotd = rotate(vec2(x,y), 1.0 * sin(iTime));\n    \n    float d = max(abs(rotd.x), abs(rotd.y)) - size;\n    \n    return d;\n}\n\n// Makes a sphere with size, offset and color\nfloat sphere(vec2 uv, float size, vec2 offset) {\n    vec2 pos = vec2(uv.x - offset.x, uv.y - offset.y);\n    \n    pos.x *= 8./4.5;\n    \n    float dist = sqrt(pow(pos.x, 2.0) + pow(pos.y, 2.0)) - size;\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col2 = 0.5+ 0.5*sin(iTime+uv.xyx+vec3(2,1,3));\n    \n    // Get cube distance\n    float cube = cube(uv, .4, vec2(.5,.5));\n    \n    // Get spheres distances\n    float sphere1 = sphere(uv, .2, vec2(.5 + cos(iTime) / 4.0, .5 - sin(iTime) / 4.0));\n    float sphere2 = sphere(uv, .2, vec2(.5 - sin(iTime) / 4.0, .5 + cos(iTime) / 4.0));\n\n    vec3 finalCol = vec3(1.0);\n    \n    // Mix both spheres\n    finalCol = mix(col1, finalCol, step(0.0,sphere1));\n    finalCol = mix(col2, finalCol, step(0.0,sphere2));\n    \n    // Limit them to inside of cube\n    finalCol = mix(vec3(1.0), finalCol, step(cube,0.0));\n    \n    // Make everything else black\n    finalCol = finalCol.r + finalCol.g + finalCol.b < 3.0 ? finalCol : vec3(0.0);\n\n    // Output to screen\n    fragColor = vec4(finalCol,1.0);\n}","name":"Image","description":"","type":"image"}]}