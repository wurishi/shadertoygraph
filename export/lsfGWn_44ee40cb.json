{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":3,"type":"texture","id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\nfloat nrand( vec2 n ) {\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453); }\n\nvec2 rot2d( vec2 p, float a ) {\n\tvec2 sc = vec2(sin(a),cos(a));\n\treturn vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n}\n*/\n\nvec4 basis_from_angle( float a )\n{\n    vec2 sc = vec2(sin(a),cos(a));\n\n    vec4 ret;\n    ret.xy = vec2(  sc.y, sc.x ); //p = vec2(1,0);\n    ret.zw = vec2( -sc.x, sc.y ); //p = vec2(0,1);\n    \n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y = 1.0-uv.y;\n   \n    float max_siz;\n    if ( iMouse.z > 0.5 )\n\t\tmax_siz = 32.0 * (1.0-iMouse.x / iResolution.x); // * (0.5+0.5*sin(iTime));\n    else\n        max_siz = 32.0 * (0.5+0.5*sin(2.0*uv.x + iTime));\n        \n    //fragColor = vec4( vec3(max_siz), 1.0 ); return;\n\t\n    //note: for samples-positions see\n    //      https://github.com/GPUOpen-Effects/ShadowFX/blob/master/amd_shadowfx/src/Shaders/\n    const int NUM_TAPS = 18;\n    const vec2 fTaps_Poisson[NUM_TAPS]\n        = vec2[NUM_TAPS]( vec2(-0.220147, 0.976896),\n                          vec2(-0.735514, 0.693436),\n                          vec2(-0.200476, 0.310353),\n                          vec2( 0.180822, 0.454146),\n                          vec2( 0.292754, 0.937414),\n                          vec2( 0.564255, 0.207879),\n                          vec2( 0.178031, 0.024583),\n                          vec2( 0.613912,-0.205936),\n                          vec2(-0.385540,-0.070092),\n                          vec2( 0.962838, 0.378319),\n                          vec2(-0.886362, 0.032122),\n                          vec2(-0.466531,-0.741458),\n                          vec2( 0.006773,-0.574796),\n                          vec2(-0.739828,-0.410584),\n                          vec2( 0.590785,-0.697557),\n                          vec2(-0.081436,-0.963262),\n                          vec2( 1.000000,-0.100160),\n                          vec2( 0.622430, 0.680868) );\n\n    if ( uv.y > 0.5 )\n    {\n        fragColor = texture( iChannel0, uv, log2(max_siz) );\n    }\n    else\n    {\n        vec4 sum = vec4(0);\n        \n        //float rnd = 6.28 * nrand( uv + fract(iTime) );\n        //\n        float bn = texelFetch( iChannel3, (ivec2(fragCoord.xy)+ivec2(vec2(81,90)*7.0*iTime))%textureSize(iChannel3,0).xy, 0 ).r;\n        //fragColor = vec4( vec3(bn), 1.0 ); return;\n        float rnd = 6.28*bn;\n\n        vec4 basis = basis_from_angle( rnd );\n\n        for (int i=0; i < NUM_TAPS; i++)\n        {\n            vec2 ofs = fTaps_Poisson[i];\n            ofs = vec2( dot(ofs,basis.xz),\n                        dot(ofs,basis.yw) );\n            \n            vec2 texcoord = uv + max_siz * ofs / iResolution.xy;\n            sum += texture(iChannel0, texcoord, -10.0);\n        }\n\n        fragColor = sum / float(NUM_TAPS);\n    }    \n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsfGWn","date":"1367026703","viewed":2942,"name":"Blur: Poisson Disc","username":"hornet","description":"Just a regular poisson-disc blur.\n(bottom picking from mipmap instead)","likes":37,"published":1,"flags":0,"usePreview":0,"tags":["2d","blur","post","poisson"],"hasliked":0,"parentid":"","parentname":""}}