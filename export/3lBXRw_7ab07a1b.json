{"ver":"0.1","info":{"id":"3lBXRw","date":"1565307692","viewed":661,"name":"Juggle","username":"mewo2","description":"Cubes in a cave","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raymarch","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\nfloat hash(float x){\n    x = fract(sin(x*416.31434));\n    x = fract(sin(x*234.41523));\n    x = fract(sin(x*235.51424));\n\treturn x;\n}\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\nfloat smin(float a, float b, float k) {\n    float h = clamp( 0.5 + 0.5*(b - a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 uni(vec2 a, vec2 b) {\n    if (a.x < b.x) return a;\n    return b;\n}\n\nvec3 eye() {\n    vec3 p = vec3(-.2,.3,2.5);\n    p.yz = rot(.05 * cos(iTime/17.)) * p.yz;\n    p.xy = rot(.1 * sin(iTime/8.)) * p.xy;\n    return p;\n}\n\nvec3 look() {\n    return vec3(.2 * cos(iTime/3.9)+.5,.2 * sin(iTime/2.7) -.4,.1 * sin(iTime/11.2));\n}\n\nfloat sph(vec3 p, vec3 c, float r) {\n    return length(p - c) - r;\n}\n\nfloat box(vec3 p, vec3 c, vec3 r) {\n    vec3 d = abs(p - c) - r;\n    return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat menger(vec3 p) {\n   float d = -1000.;\n\n   float s = 1.0;\n   for( int m=0; m<3; m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.x,r.y);\n      float db = max(r.y,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      d = max(d,c);\n   }\n\n   return d;\n}\n        \nfloat torus(vec3 p, vec3 c, float r1, float r2) {\n    vec3 v = p - c;\n    return length(vec2(length(v.xy) - r1, v.z)) - r2;\n}\nvec2 sdf(vec3 p) {\n    float ships = 1000.;\n    for (int i = 0; i < 3; i++) {\n        float angle = 2.*float(i)*PI/3. + iTime/1.3;\n        vec3 q = p - vec3(.2*cos(angle), .2*sin(angle), 1.5);\n        q.yz = rot(iTime + angle) * q.yz;\n        q.xy = rot(iTime/3.2) * q.xy;\n        float shipsize = .1;\n        float ship = max(box(q, vec3(0., 0., 0.), vec3(shipsize )), menger(q/shipsize)*shipsize);\n        ships = min(ships, ship);\n    }\n    float z = p.z - iTime;\n\tp.x += cos(z)* .2;\n   \tfloat d =  1. - length(p.xy);\n    p.xy = rot(z + sin(z) + iTime/5. + sin(iTime/4.)/6.) * p.xy;\n    float s = 1.;\n    z /= 2.;\n    for (int i = 0; i < 7; i++) {\n        p *= 1.9;\n        s *= 1.9;\n        z *= 2.57;\n        d += (sin(z/4.1) + cos(z/.4)) * sin(p.x+cos(p.y)) * .3/s;\n    }\n    return uni(vec2(d, 0.), vec2(ships, 1.));\n}\n\nvec3 march(vec3 start, vec3 ray) {\n    float t = 0.0;\n    vec3 c = vec3(1., 0.5, 0.);\n    for (int i = 0; i < 99; i++) {\n        vec3 p = start + t * ray;\n        vec2 d = sdf(p);\n        if (d.y == 0.) {\n            c += vec3(0.05, d.x/20., d.x*sqrt(sqrt(t))/10.);\n        } else {\n            c += vec3(.0, .03, 0.05);\n        }\n        t += d.x * .6;\n        if (d.x/t < 0.001) {\n            if (d.y == 1.) c -= vec3(1., 0., 0.);\n            return c;\n        }\n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy / 2.)/iResolution.y;\n\t\n    vec3 e = eye();\n    vec3 l = look();\n    vec3 fwd = normalize(l - e);\n    vec3 right = normalize(cross(fwd, vec3(0.,1.,0.)));\n    vec3 up = cross(right, fwd);\n    \n    vec3 ray = normalize(uv.x * right + uv.y * up + fwd);\n    \n    float vignette = 1. - length(uv);\n    float noise = hash(uv.x + hash(uv.y + hash(iTime)));\n    vec3 c = vignette * march(e, ray) + noise * .05;\n\tfloat w = c.r + c.g + c.b;\n    \n    // Output to screen\n    fragColor = vec4(c * (w/(5. + w)),1.0);\n}","name":"Image","description":"","type":"image"}]}