{"ver":"0.1","info":{"id":"lcdyz2","date":"1730998818","viewed":21,"name":"Flux time","username":"brlch","description":"Flux time","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["experimental"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pi, the ratio of a circle's circumference to its diameter.\n    const float M_PI = 3.14159265358979323846264338327950288;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(4,2,0));\n    vec3 white  = vec3(1,1,1);\n\n    vec2 center = vec2(0.5,0.5);\n    float num = 50.;\n    float speed = 1.5;\n    bool inside = false;\n    \n    for(float i = 0. ; i<2.*M_PI ; i+= 2.*M_PI/num){\n        vec2 circle = vec2(center.x,center.y);\n        float ang = i+iTime*speed;\n        float offset = 0.25*sin(ang*i*uv.y*uv.x/iTime);\n        circle.x += offset;\n        float rad = 0.03*i*circle.x*circle.y;\n\n        vec2 tmp = vec2(circle.x-center.x,circle.y-center.y);\n        \n        circle.x = (tmp.x * cos(ang) - tmp.y * sin(ang))+center.x;\n        circle.y = (tmp.x * sin(ang) + tmp.y * cos(ang))*ratio+center.y;\n        \n        float dist = sqrt(pow(circle.x-uv.x,2.)*ratio+pow(circle.y-uv.y,2.)/ratio);\n        \n        inside = inside || dist<rad;\n    }\n\n    // Output to screen\n    fragColor = vec4(inside?col2:white,1.0);\n}","name":"Image","description":"","type":"image"}]}