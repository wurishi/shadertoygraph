{"ver":"0.1","info":{"id":"XdKSzW","date":"1463350016","viewed":194,"name":"StupidBox","username":"dila","description":"Doesn't know if it wants to be open or closed.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float t)\n{\n    return mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat mgt = 0.0;\nvec3 mpos = vec3(0.0);\nfloat mat = 0.0;\n\nfloat anim(float idx)\n{\n    float c = clamp(mgt - idx, 0.0, 1.0);\n    c = smoothstep(0.0, 1.0, c);\n    return c;\n}\n\nfloat map(vec3 p)\n{    \n    vec2 fs = vec2(0.1, 1.0);\n    float fo = 1.0;\n    \n    float d = fs.x + p.y;\n    mpos = p;\n    mat = 0.0;\n        \n    float sat = udBox(p, fs.yxy);\n    if (sat < d) {\n        d = sat;\n    \tmpos = p;\n        mat = 1.0;\n    }\n    \n    float sbt = anim(2.0);\n    vec3 sbp = p;\n    sbp.x -= fo;\n    sbp.xy *= rot(sbt * -1.57);\n    sbp.y -= fo;\n    float sb = udBox(sbp, fs.xyy);\n    if (sb < d) {\n        d = sb;\n        mpos = sbp;\n        mat = 1.0;\n    }\n    \n    float sct = anim(4.0);\n    vec3 scp = p;\n    scp.z -= fo;\n    scp.yz *= rot(sct * 1.57);\n    scp.y -= fo;\n    float sc = udBox(scp, fs.yyx);\n    if (sc < d) {\n        d = sc;\n        mpos = scp;\n        mat = 1.0;\n    }\n    \n\tfloat sdt = anim(1.0);\n    vec3 sdp = p;\n    sdp.x += fo;\n    sdp.xy *= rot(sdt * 1.57);\n    sdp.y -= fo;\n    float sd = udBox(sdp, fs.xyy);\n    if (sd < d) {\n        d = sd;\n        mpos = sdp;\n        mat = 1.0;\n    }\n    \n    float set = anim(3.0);\n    vec3 sep = p;\n    sep.z += fo;\n    sep.yz *= rot(set * -1.57);\n    sep.y -= fo;\n    float se = udBox(sep, fs.yyx);\n    if (se < d) {\n        d = se;\n        mpos = sep;\n        mat = 1.0;\n    }\n    \n    float sft = anim(0.0); \n    sep.y -= fo;\n    sep.z -= fo;\n    sep.yz *= rot(1.57);\n    sep.y += fo;\n    sep.yz *= rot(sft * -1.57);\n    sep.y -= fo;\n    float sf = udBox(sep, fs.yyx);\n    if (sf < d) {\n        d = sf;\n        mpos = sep;\n        mat = 1.0;\n    }\n\n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d;\n    }\n    return t;\n}\n\nvec3 _texture(vec3 p)\n{\n    vec3 ta = texture(iChannel0, p.yz).xyz;\n    vec3 tb = texture(iChannel0, p.xz).xyz;\n    vec3 tc = texture(iChannel0, p.xy).xyz;\n    return (ta*ta + tb*tb + tc*tc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float fgt = fract(iTime);\n    mgt = abs(fgt - 0.5) * 2.0 * 5.0;\n    float fcl = 0.0;\n\n    mat2 m = rot(iTime);\n    vec3 r = normalize(vec3(uv, 1.0));\n    r.yz *= rot(-0.5);\n    r.xz *= m;\n\n    vec3 o = vec3(0.0, 4.0, -4.0);\n    o.xz *= m;\n\n    float t = trace(o, r);\n\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n\n    float eye = max(dot(sn, -r), 0.0);\n    vec3 fc = eye * _texture(mpos * 0.25);\n    \n    if (mat == 0.0) {\n        fc *= 0.5;\n    }\n    \n    vec3 lpos = o + vec3(0.0, 6.0, 0.0);\n    vec3 ldir = w + sn * 0.01 - lpos;\n    float ldist = length(ldir);\n    ldir /= ldist;\n    float lt = trace(lpos, ldir);\n    float la = 0.0;\n    if (ldist < lt) {\n        float lit = max(dot(sn, -ldir), 0.0);\n        lit /= 1.0 + ldist * ldist * 0.0001;\n\t\tla += lit;\n    }\n    \n    fc *= la;\n    \n    float fog = 1.0 / (1.0 + t * t * 0.001);\n    fc = mix(vec3(1.0), fc, fog);\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}