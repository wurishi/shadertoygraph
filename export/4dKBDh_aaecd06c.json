{"ver":"0.1","info":{"id":"4dKBDh","date":"1528643262","viewed":147,"name":"Music + Mandlebrot","username":"sujay","description":"Tried using the spherical coordinate representation of UV as a constant C in the standard equation. Found this interesting shape.","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["fractals","mandlebrot","soundcloud","audiodrivenanimations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBXRc","filepath":"https://soundcloud.com/mina-nabih/nigel-stanfordcymatics","previewfilepath":"https://soundcloud.com/mina-nabih/nigel-stanfordcymatics","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n\tuv.y = uv.y+0.5;\n\t\n    //sound data\n    // first texture row is frequency data\n\t\n\t\n    // second texture row is the sound wave\n\t\n\t\n\t// convert frequency to colors\n\t//vec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n    \n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    uv.xy=uv.yx;\n    uv = vec2 ( sqrt(uv.x*uv.x + uv.y*uv.y), atan(uv.y, uv.x)/2.0*3.14 );\n    vec2 z = vec2(0.0, .0);;\n    //vec2 c = uv*sin(iTime/3.0);\n    float wave = texture( iChannel0, vec2(uv.x,uv.y/20.) ).x;\n    float fft  = texture( iChannel0, vec2(uv.x,0.5) ).x; \n    vec2 c = uv*0.4;\n\t\n    float iter=30.0 * fft;//10.0+abs(10.0*sin(iTime*0.1));\n    float flag =1.0;\n    float j= 0.0;\n    \n    for(float i = 0.0; i<iter;i= i+1.0)\n    {\n        z = vec2(z.x*z.x -z.y*z.y, 2.0*z.x*z.y) + c;\n        j = i;//iter -i;\n\t\tif((z.x*z.x +z.y*z.y) > 4.0)\n        {\n            flag = 0.0;\n            break;\n        }\n    }\n    \n    float sn = float(j) - log2(log2(dot(z,z)));// + 40.0;\n    if(flag == 1.0)\n    {\n        fragColor = vec4(vec3(0), 1.0);\n    }\n    else\n    {\n        //fragColor=vec4(vec3(j/iter)*vec3(2,0,0)*abs(sin(0.2*iTime)),1.0);\n        fragColor=vec4(vec3(j/iter)*col*wave*vec3(1,1,1)*sn,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}