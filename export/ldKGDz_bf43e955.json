{"ver":"0.1","info":{"id":"ldKGDz","date":"1454104405","viewed":318,"name":"Suresh's Voronoi Party","username":"klacansky","description":"Voronoi diagrams using cone projection with Ian Mallet's help. Different norms can be tested such as l-1, l-2 and l-infinity. Dragging cone down may cause multiple points in one cell.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MS_PER_STEP 1000.0\n#define N_POINTS 16\n#define RADIUS 0.02\n\n/* possible norms are NORM_L1, NORM_L2 (default), and NORM_LINF */\n#define NORM_L2\n\n/* set weight of -0.5 on the first cone (pulls it down), does not work with line boundaries */\n/* #define WEIGHT_FIRST_CONE */\n\n\n/* TODO: ugly mess */\n#ifdef NORM_L1\n\t#define NORM l1\n#else\n\t#ifdef NORM_LINF\n\t\t#define NORM linf\n\t#else\n\t\t#define NORM l2\n\t\t#define NORM_L2\n\t#endif\n#endif\n\n\nfloat\nl1(vec2 p0, vec2 p1)\n{\n    vec2 tmp = abs(p0 - p1);\n \treturn tmp.x + tmp.y;\n}\n\n\nfloat\nl2(vec2 p0, vec2 p1)\n{\n    return distance(p0, p1);\n}\n\nfloat\nlinf(vec2 p0, vec2 p1)\n{\n    vec2 tmp = abs(p0 - p1);\n\treturn max(tmp.x, tmp.y);\n}\n\n\nvec2\nndc(vec2 p)\n{\n    return 2.0*p - 1.0;\n}\n\n\nvoid\nmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    \n    /* TODO: y > x */\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 xy = 2.0*uv - 1.0;\n    xy *= aspect;\n\t\n    const float du = 1.0/float(N_POINTS);\n    \n    float dmin = 5.0;\n    float dmin_snd = dmin;\n    vec2 pmin;\n    vec2 pmin_snd;\n    \n    for (float u = 0.0; u < 1.0; u += du) {\n        vec4 color_sample = texture(iChannel0, vec2(u, iTime/MS_PER_STEP));\n        vec2 position = aspect*ndc(color_sample.xy);\n        vec4 color = texture(iChannel0, vec2(u, 0.0));\n        \n        /* use l1, l2, or l_inf norm */\n    \tfloat d = NORM(xy, position);\n             \n        /* draw disk for point */\n        if (d < RADIUS) {\n            fragColor = vec4(1.0);\n        \treturn;   \n        }\n        \n        /* drag first cone down */\n#ifdef WEIGHT_FIRST_CONE\n        if (u < du)\n            d -= 0.5;\n#endif\n        \n        /* draw closest cone */\n        if (d < dmin) {\n            dmin = d;\n            pmin = position;\n            fragColor = color;\n        /* second closest point */\n        } else if (d < dmin_snd) {\n            dmin_snd = d;\n            pmin_snd = position;\n        }\n       \n        /* TODO: works only for l2 */\n#if defined(NORM_L2) && !defined(WEIGHT_FIRST_CONE)\n        vec2 n = (pmin - pmin_snd)/NORM(pmin, pmin_snd);\n        if (dmin_snd < 5.0 && abs(dot(n, xy - (pmin + pmin_snd)/2.0)) < 0.01)\n            fragColor = vec4(0.0);\n#endif\n    }\n}","name":"Image","description":"","type":"image"}]}