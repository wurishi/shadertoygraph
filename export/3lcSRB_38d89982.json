{"ver":"0.1","info":{"id":"3lcSRB","date":"1581169664","viewed":417,"name":"3D earth","username":"cgjingling","description":"简化了原版","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["3dearth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define mul(a, b) (a) * (b)\n\n\n\n\nstruct ray_t {\n\tvec3 origin;\n\tvec3 direction;\n};\n\n\nstruct sphere_t {\n\tvec3 origin;\n\tfloat radius;\n\tint material;\n};\n\nstruct plane_t {\n\tvec3 direction;\n\tfloat distance;\n\tint material;\n};\n\nstruct hit_t {\n\tfloat t;\n\tint material_id;\n\tvec3 normal;\n\tvec3 origin;\n};\n\n\thit_t no_hit = hit_t (\n\tfloat(1e8 + 1e1), \n\t-1, \n\tvec3(0., 0., 0.),\n\tvec3(0., 0., 0.) \n);\n\n\nray_t get_primary_ray(\n\tin vec3  cam_local_point,\n\tinout vec3 cam_origin,\n\tinout vec3  cam_look_at\n){\n\tvec3 fwd = normalize(cam_look_at - cam_origin);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 right = cross(up, fwd);\n\tup = cross(fwd, right);\n\n\tray_t r = ray_t (\n\t\tcam_origin,\n\t\tnormalize(fwd + up * cam_local_point.y + right * cam_local_point.x)\n\t);\n\treturn r;\n}\n\nmat3 mat3_ident = mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\n\nmat2 rotate_2d(\n\tin float  angle_degrees\n){\n\tfloat angle = radians(angle_degrees);\n\tfloat _sin = sin(angle);\n\tfloat _cos = cos(angle);\n\treturn mat2(_cos, -_sin, _sin, _cos);\n}\n\nmat3 rotate_around_z(\n\tin float angle_degrees\n){\n\tfloat angle = radians(angle_degrees);\n\tfloat _sin = sin(angle);\n\tfloat _cos = cos(angle);\n\treturn mat3(_cos, -_sin, 0, _sin, _cos, 0, 0, 0, 1);\n}\n\nmat3 rotate_around_y(\n\tin  float  angle_degrees\n){\n\tfloat angle = radians(angle_degrees);\n\tfloat _sin = sin(angle);\n\tfloat _cos = cos(angle);\n\treturn mat3(_cos, 0, _sin, 0, 1, 0, -_sin, 0, _cos);\n}\n\nmat3 rotate_around_x(\n\tin float  angle_degrees\n){\n\tfloat angle = radians(angle_degrees);\n\tfloat _sin = sin(angle);\n\tfloat _cos = cos(angle);\n\treturn mat3(1, 0, 0, 0, _cos, -_sin, 0, _sin, _cos);\n}\n\n\nvec3 linear_to_srgb(\n\tin vec3  color\n){\n\tconst float p = 1. / 2.2;\n\treturn vec3(pow(color.r, p), pow(color.g, p), pow(color.b, p));\n}\nvec3 srgb_to_linear(\n\tin vec3  color\n){\n\tconst float p = 2.2;\n\treturn vec3(pow(color.r, p), pow(color.g, p), pow(color.b, p));\n}\n\nfloat checkboard_pattern(\n\tin vec2  pos,\n\tin float scale\n){\n\tvec2 pattern = floor(pos * scale);\n\treturn mod(pattern.x + pattern.y, 2.0);\n}\n\nfloat band (\n\tin float start,\n\tin float peak,\n\tin float end,\n\tin float t\n){\n\treturn\n\tsmoothstep (start, peak, t) *\n\t(1. - smoothstep (peak, end, t));\n}\n\nvoid fast_orthonormal_basis(in vec3 n , out vec3 f , out vec3 r)\n{\n\tfloat a = 1. / (1. + n.z);\n\tfloat b = -n.x*n.y*a;\n\tf = vec3(1. - n.x*n.x*a, b, -n.x);\n\tr = vec3(b, 1. - n.y*n.y*a, -n.y);\n}\n\n\nvoid intersect_sphere(\n\tin ray_t ray,\n\tin sphere_t sphere,\n\tinout hit_t  hit\n){\n\tvec3 rc = sphere.origin - ray.origin;\n\tfloat radius2 = sphere.radius * sphere.radius;\n\tfloat tca = dot(rc, ray.direction);\n\tif (tca < 0.) return;\n\n\tfloat d2 = dot(rc, rc) - tca * tca;\n\tif (d2 > radius2) return;\n\n\tfloat thc = sqrt(radius2 - d2);\n\tfloat t0 = tca - thc;\n\tfloat t1 = tca + thc;\n\n\tif (t0 < 0.) t0 = t1;\n\tif (t0 > hit.t) return;\n\n\tvec3 impact = ray.origin + ray.direction * t0;\n\n\thit.t = t0;\n\thit.material_id = sphere.material;\n\thit.origin = impact;\n\thit.normal = (impact - sphere.origin) / sphere.radius;\n}\n\n\n\nstruct volume_sampler_t {\n\tvec3 origin; \n\tvec3 pos; \n\tfloat height;\n\n\tfloat coeff_absorb;\n\tfloat T; \n\n\tvec3 C; \n\tfloat alpha;\n};\n\nvolume_sampler_t begin_volume(\n\tin vec3 origin,\n\tin float coeff_absorb\n){\n\tvolume_sampler_t v = volume_sampler_t (\n\t\torigin, origin, 0.,\n\t\tcoeff_absorb, 1.,\n\t\tvec3(0., 0., 0.), 0.\n\t);\n\treturn v;\n}\n\nfloat illuminate_volume(\n\tinout volume_sampler_t  vol,\n\tin vec3 V,\n\tin vec3 L\n);\n\nvoid integrate_volume(\n\tinout volume_sampler_t  vol,\n\tin vec3 V,\n\tin vec3 L,\n\tin float density,\n\tin float dt\n){\n\n\tfloat T_i = exp(-vol.coeff_absorb * density * dt);\n\tvol.T *= T_i;\n\tvol.C += vol.T * illuminate_volume(vol, V, L) * density * dt;\n\tvol.alpha += (1. - T_i) * (1. - vol.alpha);\n}\n\n\n\n\nfloat hash(\n\tin float n\n){\n\treturn fract(sin(n)*753.5453123);\n}\n\nfloat noise_iq(\n\tin vec3 x\n){\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f*f*(3.0 - 2.0*f);\n\n\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n\n}\n\n\nfloat fbm(in vec3 pos, in float  lacunarity, in float  init_gain, in float gain) \n{ \n\tvec3 p = pos; \n\tfloat H = init_gain; \n\tfloat t = 0.; \n\tfor (int i = 0; i < 4; i++) \n\t{\n\t\t t += noise_iq(p) * H; \n\t\t p *= lacunarity; \n\t\t H *= gain; \n\t} \n\t\t return t; \n}\n\n\nsphere_t planet = sphere_t (\n\tvec3(0, 0, 0), 1., 0\n);\n\n\nvec3 background(\n\tin ray_t eye\n){\n\n\tvec3 sun_color = vec3(1., .9, .55);\n\tfloat sun_amount = dot(eye.direction, vec3(0, 0, 1));\n\n\tvec3 sky = mix(\n\t\tvec3(.0, .05, .2),\n\t\tvec3(.15, .3, .4),\n\t\t1.0 - eye.direction.y);\n\tsky += sun_color * min(pow(sun_amount, 30.0) * 5.0, 1.0);\n\tsky += sun_color * min(pow(sun_amount, 10.0) * .6, 1.0);\n\n\treturn sky;\n\n}\n\n\n\nvoid setup_camera(\n\tinout vec3  eye,\n\tinout vec3 look_at\n){\n\n\teye = vec3(0, 0, -2.5);\n\tlook_at = vec3(0, 0, 2);\n\n}\n\n\nfloat fbm_clouds(in vec3  pos, in float  lacunarity, in float  init_gain, in float  gain) \n{ \n\tvec3 p = pos; \n\tfloat H = init_gain; \n\tfloat t = 0.; \n\tfor (int i = 0; i < 4; i++) \n\t{\n\t\t t += (abs(noise_iq(p) * 2. - 1.)) * H; \n\t\t p *= lacunarity; \n\t\t H *= gain; \n\t} \n\t\t return t; \n}\n\n\n\n\nvolume_sampler_t cloud;//构造函数\n\nfloat illuminate_volume(\n\tinout volume_sampler_t  cloud,\n\tin vec3  V,\n\tin vec3  L\n){\n\treturn exp(cloud.height) / 0.055;\n}\n\nvoid clouds_map(\n\tinout volume_sampler_t  cloud,\n\tin float  t_step\n){\n\tfloat dens = fbm_clouds(\n\t\tcloud.pos * 3.2343 + vec3(0.35, 13.35, 2.67),2.0276, 0.5, 0.5);\n\n\n\n\tdens *= smoothstep(0.29475675, 0.29475675 + 0.0335 , dens);\n\n\tdens *= band(0.2, 0.35, 0.65, cloud.height);\n\n\tintegrate_volume(cloud,\n\t\tcloud.pos, cloud.pos, \n\t\tdens, t_step);\n}\n\nvoid clouds_march(\n\tin ray_t eye,\n\tinout volume_sampler_t  cloud,\n\tin float  max_travel,\n\tin mat3  rot\n){\n\tconst int steps = 75;\n\tconst float t_step = (.4 * 4.) / float(steps);\n\tfloat t = 0.;\n\n\tfor (int i = 0; i < steps; i++) {\n\t\tif (t > max_travel || cloud.alpha >= 1.) return;\n\t\t\t\n\t\tvec3 o = cloud.origin + t * eye.direction;\n\t\tcloud.pos = mul(rot, o - planet.origin);\n\n\t\tcloud.height = (length(cloud.pos) - planet.radius) / .4;\n\t\tt += t_step;\n\t\tclouds_map(cloud, t_step);\n\t}\n}\n\nvoid clouds_shadow_march(\n\tin vec3  dir,\n\tinout volume_sampler_t  cloud,\n\tin mat3  rot\n){\n\tconst int steps = 5;\n\tconst float t_step = .4 / float(steps);\n\tfloat t = 0.;\n\n\tfor (int i = 0; i < steps; i++) {\n\t\tvec3 o = cloud.origin + t * dir;\n\t\tcloud.pos = mul(rot, o - planet.origin);\n\n\t\tcloud.height = (length(cloud.pos) - planet.radius) / .4;\n\t\tt += t_step;\n\t\tclouds_map(cloud, t_step);\n\t}\n}\n\n\n\nfloat fbm_terr(in vec3  pos, in float  lacunarity, in float  init_gain, in float  gain) \n{ \n\tvec3 p = pos; \n\tfloat H = init_gain; \n\tfloat t = 0.; \n\tfor (int i = 0; i < 3; i++) \n\t{\n\t\t t += noise_iq(p)* H; \n\t\t p *= lacunarity; \n\t\t H *= gain; \n\t} \n\t\t return t; \n}\n\nfloat fbm_terr_r(in vec3  pos, in float  lacunarity, in float  init_gain, in float  gain) \n{ \n\tvec3 p = pos; \n\tfloat H = init_gain; \n\tfloat t = 0.; \n\tfor (int i = 0; i < 3; i++) \n\t{\n\t\t t += (1. - abs(noise_iq(p) * 2. - 1.))* H; \n\t\t p *= lacunarity; \n\t\t H *= gain; \n\t} \n\t\t return t; \n}\n\n\n\nfloat fbm_terr_normals(in vec3 pos, in float  lacunarity, in float  init_gain, in float  gain) \n{ \n\tvec3 p = pos; \n\tfloat H = init_gain; \n\tfloat t = 0.; \n\tfor (int i = 0; i < 7; i++) \n\t{\n\t\t t += noise_iq(p)* H; \n\t\t p *= lacunarity; \n\t\t H *= gain; \n\t} \n\t\t return t; \n}\n\n\n\nfloat fbm_terr_r_normals(in vec3  pos, in float lacunarity, in float init_gain, in float gain) \n{ \n\tvec3 p = pos; \n\tfloat H = init_gain; \n\tfloat t = 0.; \n\tfor (int i = 0; i < 7; i++) \n\t{\n\t\t t += (1. - abs(noise_iq(p) * 2. - 1.))* H; \n\t\t p *= lacunarity; \n\t\t H *= gain; \n\t} \n\t\t return t; \n}\n\n\n\nvec2 sdf_terrain_map(in vec3  pos)\n{\n\tfloat h0 = fbm_terr(pos * 2.0987, 2.0244, .454, .454);\n\tfloat n0 = smoothstep(.35, 1., h0);\n\n\tfloat h1 = fbm_terr_r(pos * 1.50987 + vec3(1.9489, 2.435, .5483), 2.0244, .454, .454);\n\tfloat n1 = smoothstep(.6, 1., h1);\n\t\n\tfloat n = n0 + n1;\n\t\n\treturn vec2(length(pos) - planet.radius - n * .4, n / .4);\n}\n\nvec2 sdf_terrain_map_detail( in vec3  pos)\n{\n\tfloat h0 = fbm_terr_normals(pos * 2.0987, 2.0244, .454, .454);\n\tfloat n0 = smoothstep(0.35, 1., h0);\n\n\tfloat h1 = fbm_terr_r_normals(pos * 1.50987 + vec3(1.9489, 2.435, .5483), 2.0244, .454, .454);\n\tfloat n1 = smoothstep(.6, 1., h1);\n\n\tfloat n = n0 + n1;\n\n\treturn vec2(length(pos) - planet.radius - n * .4, n / .4);\n}\n\nvec3 sdf_terrain_normal( in vec3  p)\n{\n\n\tvec3 dt = vec3(0.001, 0, 0);\n    vec3 nn = normalize(vec3(sdf_terrain_map_detail(p + dt.xzz).x - sdf_terrain_map_detail(p - dt.xzz).x , sdf_terrain_map_detail(p + dt.zxz).x - sdf_terrain_map_detail(p - dt.zxz).x , sdf_terrain_map_detail(p + dt.zzx).x - sdf_terrain_map_detail(p - dt.zzx).x));\n\treturn nn;\n\n}\n\n\nvec3 setup_lights(\n\t in vec3  L,\n\t in vec3  normal\n){\n\tvec3 diffuse = vec3(0, 0, 0);\n\n\n\tvec3 c_L = vec3(7, 5, 3);\n\tdiffuse += max(0., dot(L, normal)) * c_L;\n\n\n\tfloat hemi = clamp(.25 + .5 * normal.y, .0, 1.);\n\tdiffuse += hemi * vec3(.4, .6, .8) * .2;\n\n\n\tfloat amb = clamp(.12 + .8 * max(0., dot(-L, normal)), 0., 1.);\n\tdiffuse += amb * vec3(.4, .5, .6);\n\n\treturn diffuse;\n}\n\nvec3 illuminate(\n\t in vec3  pos,\n\t in vec3  eye,\n\t in mat3  local_xform,\n\t in vec2  df\n){\n\n\tfloat h = df.y;\n\n\n\tvec3 w_normal = normalize(pos);\n\n\n\tvec3 normal = sdf_terrain_normal(pos);\n\tfloat N = dot(normal, w_normal);\n\n\tfloat s = smoothstep(.4, 1., h);\n\tvec3 rock = mix(\n\t\tvec3(.080, .050, .030), vec3(.600, .600, .600),\n\t\tsmoothstep(1. - .3*s, 1. - .2*s, N));\n\n\tvec3 grass = mix(\n\t\tvec3(.086, .132, .018), rock,\n\t\tsmoothstep(0.211, 0.351, h));\n\t\t\n\tvec3 shoreline = mix(\n\t\tvec3(.153, .172, .121), grass,\n\t\tsmoothstep(0.17, 0.211, h));\n\n\tvec3 water = mix(\n\t\tvec3(.015, .110, .455) / 2., vec3(.015, .110, .455),\n\t\tsmoothstep(0., 0.05, h));\n\n\n\tvec3 L = mul(local_xform, normalize(vec3(1, 1, 0)));\n\tshoreline *= setup_lights(L, normal);\n\tvec3 ocean = setup_lights(L, w_normal) * water;\n\n\t\n\treturn mix(\n\t\tocean, shoreline,\n\t\tsmoothstep(0.05, 0.17, h));\n}\n\n\nvec3 render(\n\t in ray_t  eye,\n\t in vec3  point_cam\n){\n\tmat3 rot_y = rotate_around_y(27.);\n\tmat3 rot = mul(rotate_around_x( iTime * -12.), rot_y);\n\tmat3 rot_cloud = mul(rotate_around_x( iTime * 8.), rot_y);\n    if (iMouse.z > 0.) {\n        rot = rotate_around_y(-iMouse.x);\n        rot_cloud = rotate_around_y(-iMouse.x);\n        rot = mul(rot, rotate_around_x(iMouse.y));\n        rot_cloud = mul(rot_cloud, rotate_around_x(iMouse.y));\n    }\n\n\tsphere_t atmosphere = planet;\n\tatmosphere.radius += .4;\n\n\thit_t hit = no_hit;\n\tintersect_sphere(eye, atmosphere, hit);\n\tif (hit.material_id < 0) {\n\t\treturn background(eye);\n\t}\n\n\tfloat t = 0.;\n\tvec2 df = vec2(1, .4);\n\tvec3 pos;\n\tfloat max_cld_ray_dist = (.4 * 4.);\n\t\n\tfor (int i = 0; i < 120; i++) {\n\t\tif (t > (.4 * 4.)) break;\n\t\t\n\t\tvec3 o = hit.origin + t * eye.direction;\n\t\tpos = mul(rot, o - planet.origin);\n\n\t\tdf = sdf_terrain_map(pos);\n\n\t\tif (df.x < 0.005) {\n\t\t\tmax_cld_ray_dist = t;\n\t\t\tbreak;\n\t\t}\n\n\t\tt += df.x * .4567;\n\t}\n\n\n\tcloud = begin_volume(hit.origin, 30.034);\n\tclouds_march(eye, cloud, max_cld_ray_dist, rot_cloud);\n\n\t\n\tif (df.x < 0.005) {\n\t\tvec3 c_terr = illuminate(pos, eye.direction, rot, df);\n\t\tvec3 c_cld = cloud.C;\n\t\tfloat alpha = cloud.alpha;\n\t\tfloat shadow = 1.;\n\n\n\t\tpos = mul(transpose(rot), pos);\n\t\tcloud = begin_volume(pos, 30.034);\n\t\tvec3 local_up = normalize(pos);\n\t\tclouds_shadow_march(local_up, cloud, rot_cloud);\n\t\tshadow = mix(.7, 1., step(cloud.alpha, 0.33));\n\n\n\t\treturn mix(c_terr * shadow, c_cld, alpha);\n\t} else {\n\t\treturn mix(background(eye), cloud.C, cloud.alpha);\n\t}\n}\n\n\n\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n\n\tvec2 aspect_ratio = vec2(iResolution.x / iResolution.y, 1);\n\n\tvec3 color = vec3(0, 0, 0);\n\n\tvec3 eye, look_at;\n\tsetup_camera(eye, look_at);\n\n\tvec2 point_ndc = fragCoord.xy / iResolution.xy;\n\n\tvec3 point_cam = vec3(\n\t\t(2.0 * point_ndc - 1.0) * aspect_ratio * tan(radians(30.)),\n\t\t-1.0);\n\n\tray_t ray = get_primary_ray(point_cam, eye, look_at);\n\n\tcolor += render(ray, point_cam);\n\n\tfragColor = vec4(linear_to_srgb(color), 1);\n}\n","name":"Image","description":"","type":"image"}]}