{"ver":"0.1","info":{"id":"wdlyDl","date":"1586307499","viewed":57,"name":"36 Days Of Type - M","username":"nicolasdnl","description":"36 Days Of Type - M","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["letter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat msign( in float x ) { return (x>0.0)?1.0:-1.0; }\n\n// https://iquilezles.org/articles/distfunctions2d\nvec2 sdSqLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( dot2(pa-ba*h), ba.x*pa.y-ba.y*pa.x );\n}\n\nfloat sdCrescent(vec2 p, float r0, float r1, float d, float sign0, float sign1)\n{\n    float a = (r0*r0 - r1*r1 + d*d) / (2.0 * d);\n    \n    if( a < r0)\n    {\n        p.y = abs(p.y);\n        float b = sqrt(r0*r0-a*a);\n        float k = p.y*a - p.x*b;\n        float h = min(d*sign0*(d*(p.y-b)-k ),\n                      d*sign1*k);\n        if (h>0.0)\n        {\n            return length(p-vec2(a,b));\n        }\n    }\n    \n    return max(sign0*(length(p          )-r0),\n               sign1*(length(p-vec2(d,0))-r1));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nvec2 sdSqArc( in vec2 p, in vec2 a, in vec2 b, in float h, float d2min )\n{\n    vec2  ba  = b-a;\n    float l   = length(ba);\n    float ra2 = h*h + l*l*0.25;\n\n    // recenter\n    p -= (a+b)/2.0 + vec2(-ba.y,ba.x)*h/l;\n    \n    float m = ba.y*p.x-ba.x*p.y;\n    float n = dot(p,p);\n    \n    if( abs(h)*abs(ba.x*p.x+ba.y*p.y) < msign(h)*l*0.5*m )\n    {\n        d2min = min( d2min, n + ra2 - 2.0*sqrt(n*ra2) );\n    }\n\n    return vec2(d2min, -max(m,ra2-n) );\n}\n\n\n//------------------------------------------------------------\n\n\n\n// SDF of a shape made of a set line and arc segments\n//float sdShape( in vec2 p, int kType[10], float kPath[22] )\nfloat sdShape( in vec2 p, int kType[5], float kPath[12] )\n{\n    vec2 vb = vec2(kPath[0],kPath[1]);\n    \n    float d = dot2(p-vb);\n    int off = 0;\n    float s = 1.0;\n    for( int i=0; i<kType.length(); i++ )\n    {\n        vec2 va = vb;\n        vec2 ds;\n        \n        if( kType[i]==0) // line (x,y)\n        {\n            vb = vec2(kPath[off+2],kPath[off+3]);\n            ds = sdSqLine( p, va, vb );\n            off += 2;\n        }\n        else if( kType[i]==1 || kType[i]==2 ) // arc (x,y,r)\n        {\n            vb = vec2(kPath[off+3],kPath[off+4]);\n            ds = sdSqArc(p, va, vb, kPath[off+2], d );\n        \toff += 3;\n\n        }\n        \n        // in/out test\n        if ( kType[i]==2 )\n        {\n            bvec3 cond = bvec3( p.y<va.y, p.y<vb.y, ds.y>0.0 );\n            if( all(cond) || all(not(cond)) ) s*=-1.0;\n        }\n        else\n        {\n            bvec3 cond = bvec3( p.y>=va.y, p.y<vb.y, ds.y>0.0 );\n            if( all(cond) || all(not(cond)) ) s*=-1.0;\n        }\n\n        d = min( d, ds.x );\n    }\n    \n    //if( p.y < 0. ) s*=-1.0;\n    \n\treturn s*sqrt(d);\n}\n\nfloat sdA( in vec2 p )\n{\n    float width = 1.;\n    float height = 1.;\n    \n   \tint kType[] = int[](0,0,0,0,0);\n\tfloat kPath[] = float[]( -width*0.5,  height*0.5,\n                             -width*0.5, -height*0.5,\n                              width*0.5, -height*0.5,\n                              width*0.5,  height*0.5,\n                              0.0, 0.0,\n                             -width*0.5,  height*0.5 );\n    /*int kType[] = int[](0,0,0,0,0,0,0,0,0,0);\n\tfloat kPath[] = float[]( -width*0.5,  height*0.5,\n                             -width*0.5, -height*0.5,\n                             -width*0.4, -height*0.5,\n                             -width*0.4, 0.0,\n                              0.0, -height*0.22,\n                              width*0.4, 0.0,\n                              width*0.4, -height*0.5,\n                              width*0.5, -height*0.5,\n                              width*0.5,  height*0.5,\n                              0.0, height*0.22,\n                             -width*0.5,  height*0.5 );*/\n    return sdShape(p,kType,kPath );\n}\n\nvec3 generateBorder(in vec3 col, in float border)\n{\n    col = mix( col, vec3(0.0), 1.0-smoothstep(0.0,0.015,border) );\n    return col;\n}\n\nfloat getLetter(float d)\n{\n    float letter = 1.-sign(d);\n\tletter = mix( letter, 1., 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    return letter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pBase = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 cols[6] = vec3[6](\n    \tvec3(1.,0.,0.),\n        vec3(0.,0.,1.),\n        vec3(0.,1.,0.),\n        vec3(1.,1.,0.),\n        vec3(0.,1.,1.),\n        vec3(1.,0.,1.)\n    );\n    \n    float t = mod(iTime * 0.1, 0.1) / 0.1 * PI * 2.;\n    float count = 50.;\n    \n    for (int i=50; i>=0; i--)\n    {\n    \tvec2 p = pBase * (1. + float(i)*0.05);\n        p.x += sin(t) * (float(i)-count*0.) * 0.008;\n\t\t//p.y += cos(t) * (float(i)-count*0.) * 0.008;\n        p.y += float(i) * 0.01;\n        \n        float d = sdA(p);\n        \n        float letter = getLetter(d);\n        \n        //col = mix(col, 0.94-vec3((float(i)+1.)/(count+10.)), min(1., max(0., letter)));\n        col = mix(0.94-vec3((float(i)+1.)/(count+10.)), col, min(1., max(0., letter)));\n        //col = mix(col, cols[i], min(1., max(0., letter)));\n    }\n    \n    float d = sdA(pBase);\n    float letter = getLetter(d);\n    //col *= letter;\n    col = mix(vec3(0.96), col, min(1., max(0., letter)));\n\n    // output\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}