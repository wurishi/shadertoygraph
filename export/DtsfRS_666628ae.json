{"ver":"0.1","info":{"id":"DtsfRS","date":"1693108133","viewed":132,"name":"Arabesque knots 7 (music)","username":"jarble","description":"A variant of my \"Banded mosaic\" pattern with a more interesting color palette.","likes":5,"published":3,"flags":8,"usePreview":0,"tags":["fractal","music","arabesque"],"hasliked":0,"parentid":"NlyyWh","parentname":"Fractal mosaic 6"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 =\n        a+a2\n    ;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\n\n\n\n\nvec3 fractal(vec2 uv,float s1,float s2){\n    vec3 col = vec3(0.);\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = false;\n    for(int k = 0; k < 12; k++){\n        \n        //uv.x += t1_(floor(uv),floor(uv));\n        \n        float offset =\n            0.\n        ;\n        uv =\n            (uv+t2)/scale\n            \n            //looks better with more iterations\n            //(uv+t2+fract(-t2/1.5))/scale\n        ;\n        //uv = (fract(vec2(uv+vec2(.5,1.5))*2.)-.5)/2.;\n        //if(uv.x<uv.y) {uv = uv.yx;}\n        t2 =\n            triangle_wave(uv+.5*s1+offset)\n        ;\n        uv =\n            t2-triangle_wave(uv.yx+s2+offset)\n        ;\n        float c1 =\n            uv.y-uv.x\n            //uv.y+uv.x*sign(t2.x-t2.y)\n        ;\n        col = vec3(c1,col.yz);\n        if(t3 =\n            t2.x < t2.y\n            //t2.x < t2.y || uv.x<uv.y\n        ) col =\n            col.yzx\n        ;\n        {uv=-uv.yx;t2=-t2.yx;}\n\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.*16.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    col = fractal(uv,1.,0.);\n    fragColor = vec4(abs(col)*2.,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat fmod2(float a, float b){\n    return b*mod(floor(a),b);\n}\n\nfloat fmod(float x,float y,float z){\n    //x += floor(floor(x)/floor(y+2.)/floor(z+2.));\n    x += floor(mod(x/4.,4.));\n    y += floor(mod(y/4.,4.));  \n    return\n        floor(max(mod(floor(x)*3.,y),mod(floor(-x)*4.,y)))\n        //floor(sqrt(floor(max(mod(floor(x)*3.*y,y*y),mod(floor(-x)*4.*y,y*y)))))\n    ;\n}\n\nfloat fmod1(float x,float y){\n    //x += mod(x,4.)-mod(x,3.);\n    return\n        floor(min(mod(floor((x))*3.,y),mod(floor(-x)*4.,y)))\n        //floor(min(mod(mod(floor((x))*3.,y),y*y),mod(mod(floor(-x)*4.,y),y*y)))\n    ;\n}\n\n#define fract2(a) fract(a)*fract(a)\n\nfloat fract1(float a){\n    return\n        abs(fract(a)+.25)/1.25\n    ;\n}\n\nvec2 mainSound(int samp, float time){  \n  float\n  tempo = 1.;\n  float t1=\n      1.\n  ;\n  float\n  s1 =\n      pow(2.,1.+fmod(time/8.,3.,time))\n  ,\n  s2 = pow(2.,1.+fmod1(time/8.,3.)),\n  m1 = s1*(1.+fmod(time/s2/s1+1.,2.,time)),\n  t =\n      time\n  ;\n  float m4 = fmod1(t*s1/(1.+fmod(t/s1,2.,time)),s2),\n  m3 = fmod((t*t1+m4)*s1/m1,s2,time);\n  t *= s1/(1.+fmod(t/s1,2.,time));\n  float m2 =\n      1. + fmod(t,s1,time)\n  ,\n  a =\n      //pow(2.,2.-log(fract(t)))/2.\n      //pow(2.-log(fract(t)),2.)/2.\n      //pow(1.-log(fract2(t)/8.)/2.,2.)\n      pow(log(1./64.+fract2(t)/8.),2.)\n      //pow(1.-log(fract(t)/2.),2.)\n  ,\n  nb = time*tempo*pow(2.,(m3+m2)/5.+7.);\n  return\n      //abs(.5-1.5*vec2(fract(nb*.998),fract(nb)))*a\n      \n      //sitar\n      a/16./8.*log(1./4.+.5*abs(a/16.-abs(.5-vec2(fract2(nb*.998),fract2(nb)))*a))\n  ;\n}","name":"Sound","description":"","type":"sound"}]}