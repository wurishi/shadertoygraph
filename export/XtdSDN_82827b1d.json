{"ver":"0.1","info":{"id":"XtdSDN","date":"1576860461","viewed":138,"name":"Multi Pass Glitch Dither Fog","username":"bradleygriffith","description":"dither fog","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["testing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 block = floor(fragCoord.xy / vec2(64));\n\tvec2 uv_noise = block / vec2(64);\n\tuv_noise += floor(vec2(iTime * 0.1)) / vec2(512);\n\t\n\tfloat block_thresh = pow(fract((iTime * 0.05) * 1236.0453), 2.0) * 0.5;\n\n\tvec2 uv_r = uv, uv_g = uv, uv_b = uv;\n\n\tif (texture(iChannel1, uv_noise).r < block_thresh ) {\n\t\tvec2 dist = (fract(uv_noise) / iResolution.xy) * 1.25;\n\t\tuv_r += dist * 1.65;\n\t\tuv_g += dist * 1.05;\n\t\tuv_b += dist * 1.795;\n\t}\n\n\tfragColor.r = texture(iChannel0, uv_r).r;\n\tfragColor.g = texture(iChannel0, uv_g).g;\n\tfragColor.b = texture(iChannel0, uv_b).b;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define ANIMATED\n//#define CHROMATIC\n\n\n\n\n\n\nfloat random (in vec2 st) { \n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st, in float speed) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(st + speed * iTime);\n        st *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nvoid combineColors( out vec4 adjustedColor, in vec4 bg, in vec4 color ) {\n    float a = color.a;\n\n    float r = (1.0 - a) * bg.r + a * color.r;\n    float g = (1.0 - a) * bg.g + a * color.g;\n    float b = (1.0 - a) * bg.b + a * color.b;\n\n    adjustedColor = vec4(r, g, b, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    const float c0 = 128.0;\n\n    float speed = 0.35;\n    float spread = 2.0;\n\n    float its = mix(0.0, 1.0 / c0, 0.985 + (0.015 * sin(speed * iTime)));\n    float ofs = texture(iChannel0, fragCoord.xy / iChannelResolution[0].xy / spread).r;\n\n    vec3 ditherColor;\n    ditherColor = vec3(its + (ofs / 255.0));\n    ditherColor.rgb = floor( ditherColor.rgb * 255.0 ) / 255.0;\n    ditherColor.rgb *= c0;\n\n    vec4 outColor = vec4(vec3(0.0), 1.0 - min(ditherColor.r, min(ditherColor.g, ditherColor.b)));\n    \n    vec2 st = uv;\n    st.x *= iResolution.x / iResolution.y;\n    vec3 noise = vec3(0.0);\n    noise += fbm(st * 3.344, speed * 5.0);\n\t\n    \n    outColor = vec4(outColor.rgb, (outColor.a) * smoothstep(0.0, 1.0, (noise.r + noise.g + noise.b) / 3.0) - 0.085);\n    \n    combineColors(fragColor, vec4(1.0), outColor);\n\n}\n","name":"Buffer A","description":"","type":"buffer"}]}