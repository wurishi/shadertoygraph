{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\n#define REFLECTIONS 16\n\n#define FOG_STRENGTH 1.0\n#define REFLECTION_STRENGTH 100000.0\n#define COLOR_STRENGTH 10.0\n#define BRIGHTNESS 10.0\n\nstruct ray {\n\tvec3 p;\n\tvec3 d;\n};\n\nstruct material {\n\tvec3 color;\n\tvec3 emmision;\n\tfloat diffusion;\n};\n\nstruct hit {\n\tvec3 p;\n\tvec3 n;\n\tfloat t;\n\tmaterial m;\n};\n\nvoid plane (vec3 v, float f, ray r, material m, inout hit h) {\n\tfloat t = (f - dot (v, r.p)) / dot (v, r.d);\n\t\n\tif (t < 0.0)\n\t\treturn;\n\t\n\tif (t < h.t) {\n\t\th.t = t;\n\t\th.p = r.p + r.d * t;\n\t\th.n = /*normalize*/ (faceforward (v, v, r.d));\n\t\t\n\t\th.m = m;\n\t}\n}\n\nvoid sphere (vec3 v, float f, ray r, material m, inout hit h) {\n\tvec3 d = r.p - v;\n\t\n\tfloat a = dot (r.d, r.d);\n\tfloat b = dot (r.d, d);\n\tfloat c = dot (d, d) - f * f;\n\t\n\tfloat g = b*b - a*c;\n\t\n\tif (g < 0.0)\n\t\treturn;\n\t\n\tfloat t = (-sqrt (g) - b) / a;\n\t\n\tif (t < 0.0)\n\t\treturn;\n\t\n\tif (t < h.t) {\n\t\th.t = t;\n\t\th.p = r.p + r.d * t;\n\t\th.n = (h.p - v) / f;\n\t\t\n\t\th.m = m;\n\t}\n}\n\nhit scene (ray r) {\n\thit h;\n\th.t = 1e20;\n\t\n\tmaterial m0 = material (vec3 (1), vec3 (0), 0.5);\n\t\n\tplane\t(vec3 ( 1.0, 0.1, 0.0), 3.0, r, m0, h);\n\tplane\t(vec3 ( 1.0, 0.4, 0.0),-3.0, r, m0, h);\n\tplane\t(vec3 ( 0.0, 1.0, 0.0), 0.0, r, m0, h);\n\tplane\t(vec3 ( 0.0, 1.0, 0.0), 5.0, r, m0, h);\n\tplane\t(vec3 ( 0.0, 0.0, 1.0), 5.0, r, m0, h);\n\tplane\t(vec3 ( 1.0, 0.0, 1.0),-6.0, r, m0, h);\n\tsphere\t(vec3 (-1.0, sin (iTime) + 3.0,0), 1.0, r, m0, h);\n\tsphere\t(vec3 ( 1.0, 1.0, 2.0), 1.0, r, m0, h);\n\t\n\th.m.color *= h.n * h.n;\n\t\n\treturn h;\n}\n\nray getRay (in vec3 origin, in vec3 forward, in vec3 up, in vec2 uv) {\n\tray r;\n\t\n\tr.p = origin;\n\tvec3 right = cross (up, forward);\n\tup = cross (forward, right);\n\tr.d = normalize (right * uv.x + up * uv.y + forward);\n\t\n\treturn r;\n}\n\nvec3 surface (ray r) {\n\tvec3 color = vec3 (0);\n\t\n\tfloat depth = 0.0;\n\t\n\tfloat l = 0.0;\n\t\n\tfor (int i = 0; i < REFLECTIONS; i++) {\n\t\thit h = scene (r);\n\t\t\n\t\tfloat c = dot (h.n, r.d);\n\t\tdepth += (1.0 / REFLECTION_STRENGTH) + h.t * FOG_STRENGTH;\n\t\t\n\t\tr = ray (h.p + h.n * 0.0001, reflect (normalize (r.d), h.n));\n\t\t\n\t\tfloat d = 1.0 / (depth * depth);\n\t\tcolor = (color + c*c*d) * (1.0 - h.m.color * d * COLOR_STRENGTH);\n\t}\n\t\n\treturn color * BRIGHTNESS;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 camera = vec3 (sin (iTime * 0.5), 2, -4.0);\n\tvec3 forward = vec3 (0,0,1);\n\t\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.xx;\n\tray r = getRay (camera, forward, vec3 (0,1,0), uv);\n\t\n\tfragColor = vec4 (surface (r) * (1.3 - max (abs (uv.x), abs (uv.y * 1.5))), 1.0);\n    \n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sS3zc","date":"1391470082","viewed":2164,"name":"Mirror Room","username":"DiLemming","description":"runs surpringly fast","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","reflection","reflections"],"hasliked":0,"parentid":"","parentname":""}}