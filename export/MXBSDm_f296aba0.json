{"ver":"0.1","info":{"id":"MXBSDm","date":"1710687138","viewed":149,"name":"Dragon Smoke","username":"MV10","description":"A combination my music visualizer displayed last night. Better full-screen / high-res. Really a fork of my simple variant that adds audio (https://www.shadertoy.com/view/432XWD) and the rainbow edge-detection here: https://www.shadertoy.com/view/Wdfyz2","likes":5,"published":1,"flags":96,"usePreview":0,"tags":["fractal","postfx","audio","forked"],"hasliked":0,"parentid":"4cs3Rs","parentname":"Flamished Fractalited Formings"},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Output the results\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lscGDs","filepath":"https://soundcloud.com/george-acosta-official/19-1","previewfilepath":"https://soundcloud.com/george-acosta-official/19-1","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Only adds audio versus original at https://www.shadertoy.com/view/4cs3Rs\n\nfloat gyroid (vec3 seed) \n{ \n    return dot(sin(seed),cos(seed.yzx)); \n}\n\nfloat fbm (vec2 pos)\n{\n    vec3 p = vec3(pos, iTime*.1);\n    float result = 0., a = .5;\n    for (int i = 0; i < 3; ++i, a /= 2.) {\n        result += abs(gyroid(p/a)*a);\n    }\n    result = sin(result*6.283+iTime*.5-length(pos));\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 e = vec2(1./iResolution.y,0);\n    vec2 curl = vec2(fbm(p+e.xy)-fbm(p-e.xy), fbm(p+e.yx)-fbm(p-e.yx)) / (2.*e.x);\n    curl = vec2(curl.y, -curl.x);\n    \n    float dist = abs(length(p)-.5);\n    float mask = smoothstep(.01, 0., dist);\n    \n    curl *= 0.005;\n    vec4 frame = texture(iChannel0, uv + curl);\n\n    // audio\n    float FFT = texture(iChannel1, vec2(0.07, 0.25)).r * 0.005;\n    mask = max(mask, frame.r - FFT);\n    \n    fragColor = vec4(mask, curl, 1);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Unchanged from https://www.shadertoy.com/view/4cs3Rs\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 map = texture(iChannel0, uv);\n    \n    map.r -= 0.1;\n    \n    #define T(u) textureLod(iChannel0, uv+u, 4.).r\n    vec3 ep = vec3(10./iChannelResolution[0].xy,0);\n    vec3 normal = normalize(vec3(T(-ep.xz)-T(ep.xz), T(-ep.zy)-T(ep.zy), map.r));\n    \n    float light = dot(normal, normalize(vec3(0,1,1)))*.5+.5;\n    vec3 color = vec3(light*light);\n    \n    color *= smoothstep(.0,.01,map.r);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Unchanged from https://www.shadertoy.com/view/Wdfyz2\n\nfloat light(in vec4 c) \n{\n\treturn (c.r + c.g + c.b) / 3.0;\n}\n\nvec2 vector(in float r, in float d) \n{\n\treturn vec2(cos(r), sin(r)) * d;\n}\n\nvec3 hueShift(vec3 col, float shift)\n{\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float DISTANCE = 2.0;\n    int RAY = 8;\n    float LAG_VECTOR = 0.97;\n    \n    vec2 sum = vec2(0, 0);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    for (int i = 0; i < RAY; i++) {\n        vec2 offset = vector(float(i) / float(RAY) * 3.14159 * 2.0, DISTANCE);\n        vec2 uvo = \n            (\n                fragCoord \n                + offset\n            )\n            / iResolution.xy;\n        \n        sum = sum + normalize(offset) * light(texture(iChannel0, uvo));\n    }\n    \n    sum = sum * 16.0 / float(RAY);\n    \n    float strength = length(sum);\n    float direction = atan(sum.y, sum.x);\n    fragColor = \n        vec4(hueShift(vec3(strength, 0.0, 0.0), direction), 1.0) * (1.0 - LAG_VECTOR / 1.1)\n        + texture(iChannel1, uv + vec2(1.0, 0.0) / iResolution.xy) * LAG_VECTOR * 0.25\n        + texture(iChannel1, uv + vec2(0.0, 1.0) / iResolution.xy) * LAG_VECTOR * 0.25\n        + texture(iChannel1, uv + vec2(-1.0, 0.0) / iResolution.xy) * LAG_VECTOR * 0.25\n        + texture(iChannel1, uv + vec2(0.0, -1.0) / iResolution.xy) * LAG_VECTOR * 0.25;\n}","name":"Buffer C","description":"","type":"buffer"}]}