{"ver":"0.1","info":{"id":"ltlBDS","date":"1513192107","viewed":278,"name":"Cubic Toris Tunnel","username":"balkhan","description":"slow shader","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","raynarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\nfloat \tt;\n\n#define I_MAX\t\t100\n#define E\t\t\t0.00001\n#define FAR\t\t\t30.\n\n\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nvec2\trot(vec2 p, vec2 ang);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tmylength(vec2 p);\nfloat\tmylength(vec3 p);\n\nvec3\tid;\nvec3\th;\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    h *= 0.;\n    t = iTime;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2\tuv  = vec2(.35+f.x/iResolution.x, f.y/iResolution.y);\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(-.0, .0, 25.0-sin(iTime*.125)*25.*0.-21.+2.);\n\n    vec4\tinter = (march(pos, dir));\n\n    col = .5 - h;\n\n    c_out =  vec4(col, h.x);\n}\n\nfloat\tscene(vec3 p)\n{\n    float\tmind = 1e5;\n    p.z -= -20.;\n    p.z -= iTime*5.;\n\n    p.y += sin(iTime*-1.+p.z*.5)*.5;\n    p.x += cos(iTime*-1.+p.z*.5)*.5;\n    rotate(p.xy, p.z*.25 + 1.0*sin(p.z*.125 - iTime*0.5) + 1.*iTime);\n    \n    float\ttube = max(-(length(p.yx)-2.), (length(p.yx)-8.));\n    tube = max(tube, p.z-10.-0./length(p.yx*.06125) );\n    tube = max(tube, -p.z-10.-0./length(p.yx*.06125) );\n    vec3\tpr = p;\n    \n    pr.xy = fract(p.xy*.5)-.5;\n    id = vec3(floor(p.xy*.5), floor(p.z*2.));\n    p.z += (mod(id.x*1., 2.)-1. == 0. ? 5. : 0. );\n    p.z += (mod(id.y*1., 2.)-1. == 0. ? 5. : 0. );\n    rotate(pr.xy, clamp( (mod(floor(p.z*.5), 2.)-1. == 0. ? 1. : -1.)+(mod(id.x, 2.)-1. == 0. ? 1. : -1.) + (mod(id.y, 2.)-1. == 0. ? 1. : -1.), -2., 2.) * iTime*2.+(mod(id.x, 2.)-1. == 0. ? -1. : -1.)*p.z*2.5 + iTime*0. );\n    \n    pr.xy = abs(pr.xy)-.05-(sin(p.z*0.5+iTime*0.)*.15);\n    pr.xy *= clamp(1./length(pr.xy), .0, 2.5);\n    pr.z = (fract(pr.z*2.)-.5);\n\tmind = mylength(vec2(mylength(pr.xy)-.1, pr.z ))-.04;\n    \n    return(mind);\n}\n\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec4\tstep = vec4(0.0, 0.0, 0.0, 0.0);\n\tvec3\tdirr;\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n        dirr = dir;\n    \trotate(dirr.zx, .025*dist.y );\n    \tp = pos + dirr * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x*.5;\n        vec3\ts = p- 1.*vec3(.0,7.0,0.0);\n        float\td = length(s.xy)-.1;\n        h -= vec3(.3, .2, .0)*.1/ (d+.0);\n        h += (\n            .001/(dist.x*dist.x+0.01) \n            -\n            1./(dist.y*dist.y+40.)\n             )\n            *\n            vec3\n        (\n    \t\tabs(sin(id.z+id.x+id.y+0.00) )\n            ,\n            abs(sin(id.z+id.x+id.y+1.04) )\n            ,\n            abs(sin(id.z+id.x+id.y+2.08) )\n        );\n        // log trick by aiekick\n        if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < E || dist.y >= FAR)\n        {\n            if (dist.x < E || log(dist.y*dist.y/dist.x/1e5)>0.)\n\t            step.y = 1.;\n            break;\n        }\n        step.x++;\n    }\n    step.w = dist.y;\n    return (step);\n}\n\n// Utilities\n\nfloat\tmylength(vec3 p)\n{\n\tfloat\tret = 1e5;\n    \n    p = p*p;\n    p = p*p;\n    p = p*p;\n    \n    ret = p.x + p.y + p.z;\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret = 1e5;\n    \n    p = p*p;\n    p = p*p;\n    p = p*p;\n    \n    ret = p.x + p.y;\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x-.85) * right + (uv.y-0.5) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}