{"ver":"0.1","info":{"id":"tdlfW8","date":"1588340004","viewed":48,"name":"ytb","username":"samstinson","description":"ch√©po","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p)\n{\t\n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n    return length(q) -0.25;\n   \n}\nfloat trace (vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for ( int i = 0; i< 32; ++i) {\n        vec3 p = o + r * t ;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    float the = iTime * 0.25;\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    vec3 o = vec3(0.0, iTime, iTime);\n    \n    float t = trace (o, r);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    vec3 fc = vec3(fog);\n    \n    fragColor = vec4(fc,1.0);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}