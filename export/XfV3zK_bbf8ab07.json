{"ver":"0.1","info":{"id":"XfV3zK","date":"1723928132","viewed":10,"name":"Odd Mushroom aug 17","username":"po_gl","description":"ocarina of time odd mush","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingoot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D( float angle ) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere( vec3 p, float s ) {\n    return length(p) - s;\n}\n\nfloat sdTorus( vec3 p, vec2 t ) {\n    vec2 q = vec2(length(p.xz)-t.x, p.y);\n    return length(q)-t.y;\n}\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h ) {\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    \n    vec2 q = vec2(length(p.xz), p.y);\n    float k = dot(q, vec2(-b,a));\n    if (k < .0) return length(q) - r1;\n    if (k > a*h) return length(q-vec2(.0,h)) - r2;\n    return dot(q, vec2(a,b)) - r1;\n}\n\nfloat checkers( vec2 p ) {\n    vec2 q = floor(p);\n    return mod(q.x+q.y, 2.0);\n}\n\n\nfloat map( vec3 p ) {\n\n    vec3 q = p;\n    q.xz *= rot2D(iTime * 0.5);\n    q.xy *= rot2D(0.3);\n    q.yz *= rot2D(0.4);\n\n    // mushroom\n    vec3 pos = vec3(.0, 2.5, .0);\n    float top = sdSphere(q - pos, 1.1);\n    \n    vec3 donutPos = vec3(.0, .0, .0);\n    pos += vec3(.0, -.8, .0);\n    float donut = sdTorus(q - pos, vec2(1.0, 0.7));\n    \n    pos += vec3(.0, -1.6, .0);\n    float stem = sdRoundCone(q - pos, 0.6, .1, 2.3);\n    \n    return opSmoothUnion(top, opSmoothUnion(donut, stem, 0.2), 0.5);\n}\n\nvec3 getNormal(vec3 p) {\n    float eps = 0.0001;\n    vec3 grad = vec3(\n        map(p + vec3(eps, 0, 0)) - map(p - vec3(eps, 0, 0)),\n        map(p + vec3(0, eps, 0)) - map(p - vec3(0, eps, 0)),\n        map(p + vec3(0, 0, eps)) - map(p - vec3(0, 0, eps)));\n    return normalize(grad);\n}\n\nfloat ground( vec3 p ) {\n    return p.y + 1.9;\n}\n\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.588, 0.3, 0.5);\n    vec3 b = vec3(0.538, 0.428, 0.538);\n    vec3 c = vec3(0.528, 0.648, 0.508);\n    vec3 d = vec3(-0.342, 0.508, 0.508);\n\n    return a + b*cos(6.28318*(c*t+d)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Clip space\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n\n    // Ray origin\n    vec3 ro = vec3(0., 1., -5.1);\n    // Ray direction\n    vec3 rd = normalize(vec3(uv, 1.5));\n    // Final color\n    vec3 col = vec3(0);\n    \n    // Total distance traveled\n    float t = 0.;\n    float tg = 0.;\n    \n    // Camera controls\n    ro.yz *= rot2D(max(-0.4, -m.y));\n    rd.yz *= rot2D(max(-0.4, -m.y));\n    \n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    int i;\n    vec3 p;\n    vec3 pg;\n    vec3 tang;\n    vec3 norm;\n    for (i = 0; i < 50; i++) {\n        p = ro + rd * t;\n        pg = ro + rd * tg;\n        \n        float d = map(p);\n        float dg = ground(pg);\n        \n        if (d < .001) {\n            norm = getNormal(p);\n            tang = normalize(cross(norm, rd));\n            break;\n        }\n        \n        t += d;\n        tg += dg;\n        \n        // early stop if distance is tiny (close to object)\n        // or very far (overshot off map)\n        if ((d < .001 || t > 100.) && (dg < .001 || tg > 100.)) break;\n    }\n    \n    // ground color\n    col = vec3(1) - vec3(tg * .08);\n    float f = checkers(.8*pg.xz);\n    col += f;\n    col += 0.1 * palette(tg*.2 + float(i)*.002);\n    \n    // map color\n    if (t < 20.0) {\n        //col = vec3(1) - vec3(t * .10);\n        //col += 0.5 * palette(t*.4 + float(i)*.009);\n        //col += tang;\n        \n        col = vec3(0) + vec3(t * 0.06);\n        col += 0.5 * palette(norm[2]);\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}