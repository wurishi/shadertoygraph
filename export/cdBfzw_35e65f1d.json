{"ver":"0.1","info":{"id":"cdBfzw","date":"1689535338","viewed":258,"name":"Mergesort","username":"fad","description":"Stable mergesort where each merge is done in a single pass for a total of log(n) passes. Each pixel does O(log(n)) work each pass so O(n*log(n)^2) total time complexity. Sorts 1080p in ceil(log(1920*1080))=21 frames.","likes":4,"published":3,"flags":32,"usePreview":1,"tags":["sort","merge","parallel","stable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool lessThan_(vec4 a, vec4 b) {\n    // Comparison function for sorting\n    return length(a.rgb) < length(b.rgb);\n}\n\nvec4 get(int i) {\n    int w = textureSize(iChannel0, 0).x;\n    return texelFetch(iChannel0, ivec2(i % w, i / w), 0);\n}\n\nbool lessThan_(vec4 a, int i, vec4 b, int j) {\n    // Comparison function that uses pixel index for stable sort\n    return lessThan_(a, b) ? true : lessThan_(b, a) ? false : i < j;\n}\n\nvec4 kth(int arr1, int m, int arr2, int n, int k) {\n    // Returns the kth element (zero-indexed) from the result of merging\n    // sorted arrays arr1 and arr2 with lengths m and n respectively in\n    // O(log(k)) time.\n    \n    // Taken with modification from\n    // https://www.geeksforgeeks.org/k-th-element-two-sorted-arrays/\n\n    // we do a little recursive tomfoolery\n    #define RECURSE(a, b, c, d, e) {             \\\n        int A = a, B = b, C = c, D = d, E = e;   \\\n        arr1 = A, m = B, arr2 = C, n = D, k = E; \\\n        continue;                                \\\n    }\n    \n    ++k; // original algorithm had k one-indexed\n    \n    while (true) {\n        if (k > m + n || k < 1) {\n            return vec4(0.0, 1.0, 0.0, 1.0);\n        }\n\n        if (m > n) {\n            RECURSE(arr2, n, arr1, m, k);\n        }\n\n        if (m == 0) {\n            return get(arr2 + k - 1);\n        }\n\n        if (k == 1) {\n            vec4 a = get(arr1);\n            vec4 b = get(arr2);\n            return lessThan_(a, arr1, b, arr2) ? a : b;\n        }\n\n        int i = min(m, k / 2);\n        int j = min(n, k / 2);\n        int ai = arr1 + i - 1;\n        int bi = arr2 + j - 1;\n\n        if (lessThan_(get(ai), ai, get(bi), bi)) {\n            RECURSE(arr1 + i, m - i, arr2, n, k - i);\n        }\n        \n        RECURSE(arr1, m, arr2 + j, n - j, k - j);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    ivec2 r = ivec2(iResolution);\n    ivec2 p = ivec2(fragCoord);\n    \n    if (iFrame == 0) {\n        // Initialize data to sort on first frame\n        fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n        return;\n    }\n    \n    int N = r.x * r.y;\n    int t = int(ceil(log2(float(N)))); // number of passes\n    int i = p.x + r.x * p.y;\n    \n    if (iFrame > t) {\n        // Sorting finished\n        fragColor = get(i);\n        return;\n    }\n    \n    int arr1 = i >> iFrame << iFrame;\n    int m = min(arr1 + (1 << iFrame - 1), N) - arr1;\n    int arr2 = arr1 + m;\n    int n = min(arr2 + m, N) - arr2;\n    int k = i - arr1;\n    fragColor = kth(arr1, m, arr2, n, k);\n}","name":"Buffer A","description":"","type":"buffer"}]}