{"ver":"0.1","info":{"id":"7dfSzN","date":"1618712620","viewed":65,"name":"319(1)_Dudka_v4v2","username":"Hydr0n","description":"Стеклянный кристалл в форме додекаэдра с вкраплениями из алмазных шариков.\nРеализованные дополнительные пункты:\n1) Мягкие тени.\n2) Анти-алиасинг.\n3) Окружение в виде текстурированного Кубмапа.\n4) Motion Blur.\n5) Реалистичность...?","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["rays"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Render v arhive otlichaetsya ot konechnogo iz-za togo, chto ya zabyl\npomenyat' mestami pokazateli prelomleniya pri vyhode lucha iz ob'ekta\n(na rendere v arhive iz-za etogo otsutstvuyut \"dal'nie\" grani).\nPerezalivat' arhiv uzhe ne stal, a reshil zdes' eto ukazat'\n\nP.S. Zadanie vypolnyalos' na PC pod upravleniem Windows 10, pri zapuske\niz-pod Linux vozmozhno nekorrektnoe otobrazhenie (provereno na Kali i Ubuntu)\n\nUPD. Perezalil arhiv s pozvoleniya V. Frolova (bez poteri ballov) s pravil'nym izobrazheniem. \n\n*/\n\n\nconst float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(-1, 5, -11);\n\nvec3 LIGHT2_POS = vec3(1.0, 0, 6.5);\nconst float LIGHT2_RADIUS = 0.6;\nconst vec3 LIGHT2_COLOR = vec3(0.15, 0.56, 0.91);\nvec3 randDir;\n\nvec3 LIGHT3_POS = vec3(-4, 1, 1);\nconst float LIGHT3_RADIUS = 0.6;\nconst vec3 LIGHT3_COLOR = vec3(1, 1, 1);\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool face_check(vec3 a1, vec3 a2, vec3 a3, vec3 a4, vec3 a5,  vec3 point)\n{\n    vec3 v1 = a2 - a1;\n    vec3 v2 = a3 - a2;\n    vec3 v3 = a4 - a3;\n    vec3 v4 = a5 - a4;\n    vec3 v5 = a1 - a5;\n    \n    vec3 normal = normalize(cross(v1, v2));\n    \n    if (dot((cross(v1, point - a1)), normal) < 0.0 || dot((cross(v2, point - a2)), normal) < 0.0 ||\n        dot((cross(v3, point - a3)), normal) < 0.0 || dot((cross(v4, point - a4)), normal) < 0.0 ||\n        dot((cross(v5, point - a5)), normal) < 0.0 ) return false;\n        \n    return true;\n}\n\n\nfloat face(vec3 v1, vec3 v2, vec3 v3, vec3 v4, vec3 v5, vec3 dir, vec3 pos, out vec3 normal, float t, vec3 centr)\n{\n    float cur_t;\n    vec3 vect1 = v2 - v1;\n    vec3 vect2 = v3 - v2;\n    vec3 cur_normal =  - normalize(cross(vect1, vect2));\n    vec3 to_centr = centr - v1;\n    \n    float dDotN = dot(dir, cur_normal);\n    \n\tcur_t = dot(v2 - pos, cur_normal) / dDotN;\n    vec3 worldPos = cur_t * dir + pos;\n    \n    if (face_check(v1, v2, v3, v4, v5, worldPos))\n    {\n        if (cur_t < t || t < 0.0)\n        {\n            if (dot(cur_normal, to_centr) <= 0.0)\n                normal = cur_normal;\n            else\n                normal = - cur_normal;\n            return cur_t;\n        }\n    }\n    return t;  \n}\nfloat traceDod(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float cur_t, t = -1.0;\n    vec3 cur_normal;\n    \n    vec3 centr = vec3(0, 0.099, 0);   \n    \n    vec3 v0 = vec3(0.88, 1.52305, 0.02208);\n\tvec3 v1 = vec3(0.88, 0.61208, -1.50208);\n\tvec3 v2 = vec3(0.88, -0.03208, 0.90208);\n\tvec3 v3 = vec3(0.88, -0.943047, -0.62208);\n    vec3 v4 = vec3(-0.88, 1.52305, 0.02208);\n\tvec3 v5 = vec3(-0.88, 0.61208, -1.50208);\n\tvec3 v6 = vec3(-0.88, -0.03208, 0.90208);\n\tvec3 v7 = vec3(-0.88, -0.943047, -0.62208);\n\n\tvec3 v8 = vec3(0, 1.52305, 0.661125);\n\tvec3 v9 = vec3(0, 0.049045, -1.80497);\n\tvec3 v10 = vec3(0, 0.530955, 1.20497);\n\tvec3 v11 = vec3(0, -0.943047, -1.26113);\n\n\tvec3 v12 = vec3(0.54384, 1.52305, -1.01192);\n\tvec3 v13 = vec3(0.54384, -0.943047, 0.41192);\n\tvec3 v14 = vec3(-0.54384, 1.52305, -1.01192);\n\tvec3 v15 = vec3(-0.54384, -0.943047, 0.41192);\n\n\tvec3 v16 = vec3(1.42384, 0.56192, 0.170965);\n\tvec3 v17 = vec3(1.42384, 0.01808, -0.770965);\n\tvec3 v18 = vec3(-1.42384, 0.56192, 0.170965);\n\tvec3 v19 = vec3(-1.42384, 0.01808, -0.770965);\n    \n    t = face(v0, v16, v2, v10, v8, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v0, v8, v4, v14, v12, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v16, v17, v1, v12, v0, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v1, v9, v11, v3, v17, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n    \n    t = face(v1, v12, v14, v5, v9, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v2, v13, v15, v6, v10, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v13, v3, v17, v16, v2, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v3, v11, v7, v15, v13, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n    \n    t = face(v4, v8, v10, v6, v18, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v14, v5, v19, v18, v4, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v5, v19, v7, v11, v9, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    t = face(v15, v7, v19, v18, v6, dir, pos, normal,  t, centr);\n    if (t == INF) return INF;\n \n    if(t < 0.0) return INF;\n        \n    return t;\n}\n   \n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 dodNorm;\n    float dodT = traceDod(pos, dir, dodNorm); \n    if (dodT < dist) return true;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 ambient_light = vec3 (0, 0, 0);\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 40.0f / distSq2;\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 15.0f / distSq3;\n    \n    return ambient_light + color * (\n        max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.2\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 LIGHT3_POS = vec3(-4, 1, 1) + vec3(0, 1, 0) * randVals.x * 0.1;\n    vec3 LIGHT2_POS = vec3(1.0, 0, 6.5) + vec3(0, 1, 0) * randVals.x * 0.1;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 sphNorm;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(GLASS_N - DIAMOND_N) / pow2(DIAMOND_N + GLASS_N);\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb  * colorMult;\n            normal = planeNorm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 dodNorm;\n        float dodT = traceDod(curPos, curDir, dodNorm);\n        if (dodT < t) {\n            t = dodT;\n            normal = dodNorm;\n            if (randVals.x < GLASS_R * 12.0) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;              \n                    n1 = GLASS_N;                           \n                } else {\n                    nEnter = GLASS_N;\n                    n1 = AIR_N;\n                }\n            }\n        }\n        \n        float sph1T = traceSphere(curPos - vec3(0, 0.5, 0.2), curDir, 0.1, sphNorm);\n        if (sph1T < t) {\n            t = sph1T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1.0, 0.6);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                    n1 = DIAMOND_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                    n1 = GLASS_N;\n                }\n            }\n        }\n        \n        float sph2T = traceSphere(curPos - vec3(0, -0.3, 0.2), curDir, 0.1, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1.0, 0.6);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                    n1 = DIAMOND_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                    n1 = GLASS_N;\n                }\n            }\n        }\n        \n        float sph3T = traceSphere(curPos - vec3(0.4, 0.1, -0.2), curDir, 0.1, sphNorm);\n        if (sph3T < t) {\n            t = sph3T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1.0, 0.6);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                    n1 = DIAMOND_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                    n1 = GLASS_N;\n                }\n            }\n        }\n        \n        float sph4T = traceSphere(curPos - vec3(-0.4, 0.1, -0.2), curDir, 0.1, sphNorm);\n        if (sph4T < t) {\n            t = sph4T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1.0, 0.6);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                    n1 = DIAMOND_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                    n1 = GLASS_N;\n                }\n            }\n        }\n        \n        float sph5T = traceSphere(curPos - vec3(0, 0.2, 0), curDir, 0.1, sphNorm);\n        if (sph5T < t) {\n            t = sph5T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1.0, 0.6);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                    n1 = DIAMOND_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                    n1 = GLASS_N;\n                }\n            }\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult * 1.25;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}