{"ver":"0.1","info":{"id":"MtjBDG","date":"1517077290","viewed":133,"name":"25/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Ok, yeah I'm bit out of ideas and time. So Friday night's tunnel turned into groovy Saturday night tunnel. I try to experiment with motion blurr here.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","pathtracing","motionblurr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 30\n#define FAR 60.0\n#define PIXELR 0.5/iResolution.x\n\n#define BOUNCES 3\n#define SAMPLES 4.0\n\nfloat CTIME = 0.0;\n\n//Hash methods from https://www.shadertoy.com/view/4djSRW\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\nvec3 hash33(vec3 p3){\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n#define HASHSCALE1 443.8975\nfloat hash13(vec3 p3){\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n//Distance functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n\n// 3D noise function (IQ)\nfloat noise(vec3 p){\n\tvec3 ip = floor(p);\n    p -= ip;\n    vec3 s = vec3(7.0,157.0,113.0);\n    vec4 h = vec4(0.0, s.yz, s.y+s.z)+dot(ip, s);\n    p = p*p*(3.0-2.0*p);\n    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\nvec2 dist(vec3 p){\n    vec3 pp = p;\n    pR(pp.xy, CTIME);\n    float tunnel = -fBox(pp, vec3(4.0, 4.0, 2.0*FAR));\n    \n    pp = p;\n    pR(pp.xz, CTIME*0.75);\n    pR(pp.yz, CTIME*0.25);\n    float box = fBox(pp, vec3(0.5))-noise((pp+CTIME*0.5)*0.5)*2.0;\n    \n    float scene = min(tunnel, box);\n    float id = 0.0;\n    \n    if(box < tunnel){\n        id = 1.0;\n    }\n    \n    return vec2(scene, id);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(PIXELR, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy).x-dist(p-eps.xyy).x,\n        dist(p+eps.yxy).x-dist(p-eps.yxy).x,\n        dist(p+eps.yyx).x-dist(p-eps.yyx).x\n    ));\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nvec2 march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.0;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro).x);\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p).x;\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < PIXELR || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p).x);\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= PIXELR){\n\t\tt = candidate_t;\n\t}\n    \n    p = ro+rd*t;\n    float id = dist(p).y;\n    \n\treturn vec2(t, id);\n}\n\n//returns material of the object hit\n// emissive color is xyz, and reflectance w\nvec4 getMaterial(float obj, vec3 p){\n    vec3 base = vec3(0.0);\n    float reflectance = 0.0;\n    float m = mod(p.z-(CTIME*10.0), 8.0) - 4.0;\n    vec3 col = vec3(0.4, 0.3, 0.8);\n    \n    if(obj == 0.0){\n        if(m > 0.0 && m > 2.0){\n            base = col;\n        }\n        else if( m < 0.0 && m > -2.0){\n            base = col.bgb;\n        }\n        reflectance = m > 0.0 ? 0.2 : 0.5;\n    }\n    else if(obj == 1.0){\n        base = col.brg;\n        reflectance = 0.8;\n    }\n    \n    \n    return vec4(base, reflectance);\n}\n\nvec3 render(vec3 o, vec3 d, vec2 uv){\n    \n    vec3 ro = o;\n    vec3 rd = d;\n    \n    vec3 pixel_color = vec3(0.0);\n    vec3 absorption_factor = vec3(1.0);\n    \n    for(int i = 0; i < BOUNCES; ++i){\n        vec2 t = march(ro, rd);\n        vec3 p = ro+rd*t.x;\n        \n        if(t.y < 0.0 || t.x > FAR){\n            break;\n        }\n        \n        //material.xyz == emissive\n        //material.w == reflectance\n        vec4 material = getMaterial(t.y, p);\n        pixel_color += material.xyz * absorption_factor;\n        absorption_factor *= material.w;\n        \n        vec3 n = normals(p);\n        ro = p+(n*0.02);\n        if(t.y == 0.0){\n            rd = reflect(rd,n);\n            //Thanks to fizzer to introducing this skew thing! :)\n            rd = normalize(rd + (hash33(vec3(uv, float(i))) - 0.5)*0.1); \n        }\n        else if(t.y == 1.0){\n            rd = reflect(rd,n);\n        }\n        \n    }\n    \n    return pixel_color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 4.0);\n    vec3 rt = vec3(0.0, 0.0, -2.0);\n\n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 color = vec3(0.0);\n    \n    for(float i = 0.0; i < SAMPLES; ++i){\n        //from https://iquilezles.org/articles/simplepathtracing\n        CTIME = (iTime-iTimeDelta) + 0.6*(1.0/24.0)*hash13(vec3(uv, iTime*0.01));\n        \n    \tvec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(60.0)));\n    \tcolor += render(ro, rd, uv);\n    }\n    color /= SAMPLES;\n    color = smoothstep(0.2, 0.9, color);\n    \n    color = pow(color, 1.0/vec3(2.2));\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}