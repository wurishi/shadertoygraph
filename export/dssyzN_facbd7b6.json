{"ver":"0.1","info":{"id":"dssyzN","date":"1686645629","viewed":62,"name":"Angry Trig","username":"akr51","description":"Mostly sin with some layering and accumulation color channels. I'm new to shader programming. I love it. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sin","cos","trig"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat linear_plot(vec2 st, float pct)\n{\n\n    return smoothstep(pct - 0.03, pct, st.y) - smoothstep(pct, pct + 0.03, st.y);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    float accumulation_r = 0.0f;\n    float accumulation_g = 0.0f;\n    float accumulation_b = 0.0f;\n    \n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n    for (float i = 0.0; i < 13.0; ++i) {\n        \n    \n        float pct = linear_plot(uv, ((sin(uv.x * i + iTime * 0.5) / 2.0) + 0.5) * cos(iTime + i) + 0.5 * (sin(iTime * 2.0 + i)) + 0.5);\n        accumulation_r += pct * (1.0 + sin(iTime * 2.0) + sin(iTime / 10.0));\n        accumulation_g += pct * (1.0 + cos(iTime * 3.5) + sin(iTime / 5.0));\n        accumulation_b += pct * (1.0 + tan(iTime * 0.25) + 2.0 * iTime);\n    \n    }\n    \n    float y = sin(iTime) / 2.0 + 0.5;\n    \n    \n    \n    color += (1.0 - accumulation_r) * color + accumulation_r * vec3(1.0, 0.0, 0.0);\n    color += (1.0 - accumulation_g) * color + accumulation_g + vec3(0.0, 1.0, 0.0);\n    color += (1.0 - accumulation_b) * color + accumulation_b + vec3(0.0, 0.0, 1.0);\n    \n    color /= 10.0;\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}