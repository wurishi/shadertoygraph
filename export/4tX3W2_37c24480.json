{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec3 lens(vec2 fragCoord) {\n    return normalize(vec3((fragCoord / iResolution.xy) - 0.5, 0.3));\n}\n\nfloat distanceAlongLine(vec3 eye, vec3 normal, vec3 origin) {\n    return dot(origin - eye, normal);\n}\n\nfloat cubic(float val) {\n    return val * val * val;\n}\n\nfloat quadratic(float val) {\n    return val * val * val * val;\n}\n\nfloat radial(vec3 eye, vec3 normal, vec3 origin, float radius) {\n    float distanceAlong = distanceAlongLine(eye, normal, origin);\n    return clamp(distanceAlong / radius, 0.0, 1.0) * max(0.0, 1.0 - (distance(eye + normal * distanceAlong, origin) / radius));\n}\n\nfloat spot(vec3 eye, vec3 normal, vec3 origin, vec3 lightNormal, float spotSize) {\n    float distanceAlong = distanceAlongLine(eye, normal, origin);\n    return max(0.0, dot(lightNormal, normalize(vec3(spotSize, 1.0, spotSize) * ((eye + normal * distanceAlong) - origin))));\n}\n\nvec3 shade(vec3 apply, float intensity) {\n    return apply * intensity;\n}\n\nvec3 sky(vec3 worldNormal) {\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 eye = vec3(0.0, 0.0, sin(iTime) * 10.0);\n    vec3 normal = lens(fragCoord);\n    vec3 color = \n        sky(normal)\n        + shade(vec3(1.0, 0.8, 0.2), quadratic(radial(eye, normal, vec3(-4.0, 3.0, 16.0), 6.0)))\n        + shade(vec3(0.8, 0.7, 0.1), quadratic(radial(eye, normal, vec3(4.0, 3.0, 6.0), 8.0)))\n        + shade(vec3(0.2, 0.5, 0.3), quadratic(radial(eye, normal, vec3(1.0, -3.0, 6.0), 8.0)))\n        + shade(vec3(0.1, 0.3, 1.0) * 5.0, spot(eye, normal, vec3(-4.0, -3.0, 6.0), vec3(0.0, 1.0, 0.0), 15.0) * radial(eye, normal, vec3(-4.0, -3.0, 6.0), 32.0))\n        ;\n\tfragColor = pow(vec4(color, 1.0), vec4(1.0 / 2.2));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tX3W2","date":"1425074596","viewed":238,"name":"False volumetrics","username":"jameswilddev","description":"Inspired by the \"closest point only\" approach of distance field raymarching, though single-sample; no for-loops or iteration.  Currently very rough.  Wondering if you could make an entire game using these sort of visuals, would be very atmospheric.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fakedistancefieldvolumetrics"],"hasliked":0,"parentid":"","parentname":""}}