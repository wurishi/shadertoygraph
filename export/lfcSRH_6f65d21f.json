{"ver":"0.1","info":{"id":"lfcSRH","date":"1713613616","viewed":51,"name":"JFA Contour","username":"Mitko","description":"JFA implementation.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["jfa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// presentation\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 load1(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv);\n}\n\n#define CANNEL_BUFFER_A iChannel2\n\nfloat ReadDemoType() {\n    return texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).x;\n}\nint ReadJFAStep() {\n    return int(texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).y);\n}\nfloat ReadContourThickness() {\n    return texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float demoType = ReadDemoType();\n    ivec2 shadowOffset = ivec2(0);\n    if (demoType == DemoShadow)\n        shadowOffset = ivec2(iResolution.xy / 2.0f - iMouse.xy);\n        \n    vec2 aspect = vec2(iResolution.x / iResolution.y,1.0);\n\tvec2 uv = (fragCoord.xy + vec2(shadowOffset)) / iResolution.xy;\n    uv = (uv * 2.0 - 1.0) * aspect;\n    \n    vec2 nearest = load1(ivec2(fragCoord + 0.5) + shadowOffset).xy / iResolution.xy;\n    vec2 p = (nearest * 2.0 - 1.0) * aspect;    \n    \n    float d = length(uv - p);\n    vec3 n = vec3(normalize(uv - p),0.0) * 0.5 + 0.5;\n    \n    vec3 col;\n    if (demoType == DemoJFASteps)\n    {\n        int frame = ReadJFAStep();\n        col = vec3(nearest, 0.0);\n    }\n    else if (demoType == DemoTrippy)\n    {\n        float h = d - iTime;\n        vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n        col = rgb;\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    }\n    else if (demoType >= DemoContour && demoType <= DemoGlow)\n    {\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        uv.x = clamp(uv.x * iResolution.x / iResolution.y - 0.3, 0.0, 1.0);\n        float ww = 40.0f;\n        float animationFrame = mod(float(iFrame / 13 - 1), 6.0);\n        vec4 cat = texelFetch(iChannel3, ivec2(animationFrame * vec2(ww, 0.0) + vec2(ww, 32.0) * uv), 0);\n        col.xyz = cat.xyz;\n        \n        float texelSize = 1.0f / 256.0f;\n        if (demoType == DemoContour)\n        {\n            if (d > 0.001f && d < (texelSize * ReadContourThickness()))\n                col = vec3(1.0f, 0.0f, 0.0f);\n        }\n        else if (demoType == DemoShadow && cat.w <= 0.0)\n        {\n            if (d < (texelSize * ReadContourThickness()))\n                col = mix(vec3(0.0f, 0.0f, 0.0f), col.xyz, smoothstep(0.0, texelSize * ReadContourThickness(), d) + 0.5);\n        }\n        else if (demoType == DemoGlow)\n        {\n            if (d > 0.001f && d < (texelSize * ReadContourThickness()))\n                col = mix(vec3(1.0f, 0.0f, 0.0f), col.xyz, smoothstep(0.0, texelSize * ReadContourThickness(), d));\n        }\n    }\n    else\n    {\n        col = n;\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int SPACE_KEY = 32;\n\nconst int KEY_1 = 49;\nconst int KEY_2 = 50;\nconst int KEY_3 = 51;\n\nconst int KEY_A = 65;\nconst int KEY_B = 66;\nconst int KEY_C = 67;\nconst int KEY_D = 68;\nconst int KEY_E = 69;\nconst int KEY_F = 70;\nconst int KEY_G = 71;\nconst int KEY_H = 72;\nconst int KEY_Q = 81;\nconst int KEY_R = 82;\nconst int KEY_S = 83;\nconst int KEY_T = 84;\nconst int KEY_W = 87;\n\n#define CANNEL_KEYBOARD iChannel0\n#define CANNEL_BUFFER_A iChannel1\n\nbool IsKeyPressed(int key) {\n    return texelFetch(CANNEL_KEYBOARD, ivec2(key, 0), 0).x > 0.0f;\n}\nbool CheckKeyPress(int key) {\n    return texelFetch(CANNEL_KEYBOARD, ivec2(key, 1), 0).x > 0.0f;\n}\nbool IsKeyToggled(int key) {\n    return texelFetch(CANNEL_KEYBOARD, ivec2(key, 2), 0).x > 0.0f;\n}\n\nfloat ReadDemoType() {\n    return texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).x;\n}\nint ReadJFAStep() {\n    return int(texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).y);\n}\nfloat ReadContourThickness() {\n    return texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (ivec2(fragCoord) == DEMO_TYPE_ADDRESS)\n    {\n        float demoType = ReadDemoType();\n        for (int i = 0; i < DemosCount; ++i) {\n            if (IsKeyPressed(KEY_1 + i)) {\n                demoType = float(i);\n            }\n        }\n\n        fragColor.x = demoType;\n    }\n    \n    if (ivec2(fragCoord) == DEMO_TYPE_ADDRESS)\n    {\n        int JFAStep = ReadJFAStep();\n        if (CheckKeyPress(KEY_W)) {\n            JFAStep = (JFAStep + 1) % JFASteps;\n        }\n        if (CheckKeyPress(KEY_Q)) {\n            JFAStep = (JFAStep + JFASteps - 1) % JFASteps;\n        }\n\n        fragColor.y = float(JFAStep);\n    }\n    \n    if (ivec2(fragCoord) == DEMO_TYPE_ADDRESS)\n    {\n        float thickness = ReadContourThickness();\n        if (IsKeyPressed(KEY_S)) {\n            thickness += 1.0f;\n        }\n        if (IsKeyPressed(KEY_A)) {\n            thickness -= 1.0f;\n        }\n\n        fragColor.z = clamp(thickness, 1.0f, 100.0f);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n// channel 1: JFA steps\n\nvec4 load0(ivec2 p)\n{\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvoid store(out vec4 t, vec4 v) {\n    t = v;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float iter = mod(float(iFrame), 13.0);\n    if (iter < 0.5f)\n    {\n        // init\n        vec2 uv = fragCoord / iResolution.xy;\n        uv.x = clamp(uv.x * iResolution.x / iResolution.y - 0.3, 0.0, 1.0);\n        float ww = 40.0f;\n        float animationFrame = mod(float(iFrame / 13), 6.0);\n        vec4 color = texelFetch(iChannel1, ivec2(animationFrame * vec2(ww, 0.0f) + vec2(ww, 32.0f) * uv), 0);\n        //float lum = dot(color.rgb,vec3(0.299,0.587,0.114)); \n        if (color.w != 0.0f) {\n            store(fragColor, vec4(fragCoord,0.0,0.0));\n        } else {\n            store(fragColor, vec4(0.0));\n        }\n    }\n    else\n    {\n        // JFA step (for up to 4096x4096)\n        float level = clamp(iter-1.0,0.0,11.0);\n        int stepwidth = int(exp2(11.0 - level)+0.5);\n        \n        ivec2 tc = ivec2(fragCoord + 0.5);\n        \n        float best_dist = 999999.0;\n        vec2 best_coord = vec2(0.0);\n        vec2 center = vec2(tc);\n        for (int y = -1; y <= 1; ++y) {\n            for (int x = -1; x <= 1; ++x) {\n                ivec2 fc = tc + ivec2(x,y)*stepwidth;\n\t\t        vec2 ntc = load0(fc).xy;\n                float d = length(ntc - center);\n                if ((ntc.x != 0.0) && (ntc.y != 0.0) && (d < best_dist)) {\n                    best_dist = d;\n                    best_coord = ntc;\n                }\n            }\n        }        \n        store(fragColor,vec4(best_coord,0.0,0.0));\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int JFASteps = 12;\n\nconst ivec2 JFA_STEP_ADDRESS = ivec2(0, 0);\n\n#define CANNEL_STATE CANNEL_BUFFER_A\n\nconst ivec2 DEMO_TYPE_ADDRESS = ivec2(0, 0);\nconst float DemoJFASteps = 0.0f;\nconst float DemoUV = 1.0f;\nconst float DemoContour = 2.0f;\nconst float DemoShadow = 3.0f;\nconst float DemoGlow = 4.0f;\nconst float DemoTrippy = 5.0f;\nconst int DemosCount = int(DemoTrippy) + 1;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// channel 2: take snapshot of stage\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 load1(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv);\n}\n\nvoid store(out vec4 t, vec4 v) {\n    t = v;\n}\n\n#define CANNEL_BUFFER_A iChannel2\n\nfloat ReadDemoType() {\n    return texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).x;\n}\nint ReadJFAStep() {\n    return int(texelFetch(CANNEL_STATE, DEMO_TYPE_ADDRESS, 0).y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 tc = ivec2(fragCoord + 0.5);\n    int iter = int(mod(float(iFrame),13.0));\n    int frame = JFASteps;\n    \n    float depoType = ReadDemoType();\n    if (depoType == DemoJFASteps)\n        frame = ReadJFAStep();\n    \n    if ((iter == frame) || ((frame > 12) && (iter == 12)))\n    {\n        // snapshot\n        store(fragColor, load0(tc));\n    }\n    else\n    {\n        // copy\n        store(fragColor, load1(tc));\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}