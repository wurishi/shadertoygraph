{"ver":"0.1","info":{"id":"l3sczX","date":"1726515055","viewed":33,"name":"Noise Using Permutation Table","username":"GCScholar","description":"Method used back in the day to generate random for different kind of noises. \n\nTaken from the book 'Texturing and Modeling: A Procedural Approach.'","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random","table","permutation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///////////////////////////////////////////////////////////////////////////////////////////////////////////\n// This method based on a permutation table was used back in the days to generate random numbers \n// that were used for different kind of noises.\n// It seems a pretty good noise and probably was convenient to generate it in this way,\n// sparing memory and getting a random number in constant time.\n//\n// Perlin used it in its seminal paper 'An Image Synthetizer', in 1985.\n// (https://articles.researchsolutions.com/an-image-synthesizer/doi/10.1145/325334.325247)\n//\n// Nowadays it's pretty bad doing this in shaders, indeed it could cause thread divergence and has poor cache performance.\n//\n// Taken from the book 'Texturing and Modeling: A Procedural Approach.'\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst int PermutationTable[256] = int[256](\n    225, 155, 210, 108, 175, 199, 221, 144, 203, 116, 70, 213, 69, 158, 33, 252,\n    5, 82, 173, 133, 222, 139, 174, 27, 9, 71, 90, 246, 75, 130, 91, 191,\n    169, 138, 2, 151, 194, 235, 81, 7, 25, 113, 228, 159, 205, 253, 134, 142,\n    248, 65, 224, 217, 22, 121, 229, 63, 89, 103, 96, 104, 156, 17, 201, 129,\n    36, 8, 165, 110, 237, 117, 231, 56, 132, 211, 152, 202, 18, 150, 143, 218,\n    170, 163, 51, 172, 157, 47, 80, 212, 176, 250, 87, 49, 99, 242, 136, 189,\n    162, 115, 44, 43, 124, 94, 150, 161, 247, 32, 10, 198, 223, 255, 72, 53,\n    131, 84, 57, 220, 197, 58, 50, 208, 11, 241, 28, 3, 192, 62, 202, 11,\n    18, 215, 153, 24, 76, 41, 19, 179, 39, 46, 55, 6, 128, 167, 23, 188,\n    106, 34, 187, 140, 164, 73, 112, 182, 244, 195, 227, 13, 35, 77, 196, 185,\n    26, 200, 226, 119, 31, 123, 168, 125, 249, 68, 183, 230, 177, 135, 160, 180,\n    12, 1, 243, 148, 102, 166, 38, 238, 251, 37, 240, 126, 64, 74, 161, 40,\n    184, 149, 171, 178, 101, 66, 99, 59, 146, 61, 254, 107, 42, 86, 154, 4,\n    236, 232, 120, 21, 233, 209, 45, 98, 193, 114, 78, 19, 206, 14, 118, 127,\n    48, 79, 147, 85, 30, 207, 219, 54, 88, 234, 190, 122, 95, 67, 143, 109,\n    137, 214, 145, 93, 92, 100, 245, 0, 216, 186, 60, 83, 105, 97, 204, 52\n);\n\n#define TABLE_SIZE 256\n#define TABLE_MASK TABLE_SIZE-1\n\n// Assure the x is always in [0,255] ((x)&TABLE_MASK)\n#define PERM(x) PermutationTable[(x)&TABLE_MASK]\n\n// Get a pseudo random integer doing three lookups\n#define INDEX(i,j,k) PERM(i + PERM(j + PERM(k)))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int i = int(fragCoord.x) + iFrame;    // Sum iFrame just to animate the noise\n    int j = int(fragCoord.y);\n    int k = int(fragCoord.x+fragCoord.y); // Get a value for the k index somehow\n    \n    int random_int = INDEX(i,j,k);\n    \n    // Range conversion [0,255]->[0,1]\n    fragColor = vec4(float(random_int) / float(TABLE_SIZE));\n}","name":"Image","description":"","type":"image"}]}