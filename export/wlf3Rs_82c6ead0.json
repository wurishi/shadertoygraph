{"ver":"0.1","info":{"id":"wlf3Rs","date":"1558512808","viewed":369,"name":"Palantiri","username":"skaplun","description":"Credits:\nSDF hand - @zguerrero\nMarble pattern - @FabriceNeyret2\nFire pattern - @remonvv","likes":20,"published":1,"flags":0,"usePreview":1,"tags":["raytracing","raymarching","noise","sdf","fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float epsilon = 0.01;\nconst float pi = 3.14159265359;\nconst float halfpi = 1.57079632679;\nconst float twopi = 6.28318530718;\n\nfloat saturate(float f){\n    return clamp(f, 0.0, 1.0);\n}\n\nvec4 RotationToQuaternion(vec3 axis, float angle){\n    axis = normalize(axis);\n    float half_angle = angle * halfpi / 180.0;\n    vec2 s = sin(vec2(half_angle, half_angle + halfpi));\n    return vec4(axis * s.x, s.y);\n}\n\nvec3 Rotate(vec3 pos, vec4 quaternion){\n    return pos + 2.0 * cross(quaternion.xyz, cross(quaternion.xyz, pos) + quaternion.w * pos);\n}\n\n//Distance Field function by iq :\n//https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s ){\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r1, float r2, float m){\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - mix(r1, r2, clamp(length(pa) / m, 0.0, 1.0));\n}\n\nfloat box(vec3 pos, vec3 size){\n\treturn length(max(abs(pos) - size, 0.0));\n}\n\nfloat smin(float a, float b, float k){\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//taken from shane's desert canyon, originaly a modification of the smin function by iq\n//https://www.shadertoy.com/view/Xs33Df\nfloat smax(float a, float b, float s)\n{   \n    float h = clamp( 0.5 + 0.5*(a-b)/s, 0., 1.);\n    return mix(b, a, h) + h*(1.0-h)*s;\n}\n\nfloat finger(vec3 pos, FingerParams fp)\n{ \n    pos = Rotate(pos, fp.quat);\n    \n    float s1 = sdCapsule(pos, fp.a.xyz, fp.b.xyz, fp.a.w, fp.b.w, fp.lengths.x);\n    float s2 = sdCapsule(pos, fp.b.xyz, fp.c.xyz, fp.b.w, fp.c.w, fp.lengths.y);\n    float s3 = sdCapsule(pos, fp.c.xyz, fp.d.xyz, fp.c.w, fp.d.w, fp.lengths.z);\n    float s4 = sdCapsule(pos, fp.d.xyz, fp.e.xyz, fp.d.w, fp.e.w, fp.lengths.w);\n        \n\treturn smin(smin(smin(s1, s2, 0.1), s3, 0.075), s4, 0.05);\n}\n  \n#define f1A vec4(0,0,0,0.1)\n#define f1B vec4(0,0,3,0.425)\n#define f1C vec4(0.07961927,-0.3662486,3.796193,0.34)\n#define f1D vec4(0.1336378,-0.9874623,4.336379,0.306)\n#define f1E vec4(0.1589203,-1.714333,4.589203,0.29)\n#define f1Quat vec4(-0.01375867,-0.1100694,0.06879336,0.9914449)\n#define f1Lengths vec4(3,0.88,0.8250002,0.7699998)\n\n#define f2A vec4(0,0,0,0.1)\n#define f2B vec4(0,0,3,0.46875)\n#define f2C vec4(0,-0.4651021,3.930204,0.375)\n#define f2D vec4(0,-1.154531,4.619634,0.3375)\n#define f2E vec4(0,-2.007883,4.93569,0.25)\n#define f2Quat vec4(-0.002759293,-0.02207434,0.01379647,0.9996573)\n#define f2Lengths vec4(3,1.04,0.9750001,0.91)\n\n#define f3A vec4(0,0,0,0.1)\n#define f3B vec4(0,0,3,0.4125)\n#define f3C vec4(0,-0.4090538,3.77915,0.33)\n#define f3D vec4(0,-1.006468,4.348116,0.297)\n#define f3E vec4(0,-1.726023,4.622232,0.22)\n#define f3Quat vec4(0.009187022,0.07349618,-0.04593511,0.9961947)\n#define f3Lengths vec4(3,0.8800001,0.8250002,0.77)\n\n#define f4A vec4(0.2,-0.5,0.4,0.9)\n#define f4B vec4(0.2,-0.5,2.7,0.375)\n#define f4C vec4(0.01168381,-0.7981673,3.327721,0.3)\n#define f4D vec4(-0.1317746,-1.252452,3.805915,0.27)\n#define f4E vec4(-0.2189538,-1.804587,4.096512,0.2)\n#define f4Quat vec4(0.05904933,0.2361973,-0.2952467,0.9238795)\n#define f4Lengths vec4(2.3,0.7199999,0.675,0.63)\n\n#define f5A vec4(-0.1,0,0,1.25)\n#define f5B vec4(-0.1,0,1,0.64)\n#define f5C vec4(-0.1,-0.3469815,1.630875,0.44)\n#define f5D vec4(-0.1,-0.846441,2.08493,0.36)\n#define f5E vec4(-0.1,-1.419972,2.345625,0.28)\n#define f5Quat vec4(0.112371,-0.7491399,0.5993119,0.2588191)\n#define f5Lengths vec4(1,0.72,0.6750001,0.6299999)\n\n#define quat0 vec4(0.7071068, 0.0, 0.0, 0.7071068) //RotationToQuaternion(vec3(1.0, 0.0, 0.0), 90.0)\n#define quat1 vec4(0.3, 0.0, 0.0, 0.3) //RotationToQuaternion(vec3(1.0, 0.0, 0.0), 40.0)\n\nvec2 distfunc(vec3 pos){ \n    vec3 rpos = pos;\n    rpos += vec3(-.35, -1.25, 1.5);\n    rpos *= 3.;\n    float arm = sdCapsule(rpos * vec3(1.0, 1.2, 1.0), vec3(-0.2, 0.0, 0.0), vec3(0.0, 3.0, -3.5), 0.7, 1.5, 5.0);\n    rpos = Rotate(rpos, quat1);\n    vec3 p1 = rpos;\n    vec3 p2 = rpos + vec3(0.4, -0.1, 0.0); \n    vec3 p3 = rpos + vec3(0.8, 0.0, 0.0);  \n    vec3 p4 = rpos + vec3(1.0, 0.1, 0.0); \n    vec3 p5 = rpos + vec3(-0.3, 0.6, -0.7);\n\n    FingerParams fingerParams1;\n    fingerParams1.a = f1A;\n    fingerParams1.b = f1B;\n    fingerParams1.c = f1C;\n    fingerParams1.d = f1D;\n    fingerParams1.e = f1E;\n    fingerParams1.quat = f1Quat;\n    fingerParams1.lengths = f1Lengths;\n        \n    float f1 = finger(p1, fingerParams1);\n    \n    FingerParams fingerParams2;\n    fingerParams2.a = f2A;\n    fingerParams2.b = f2B;\n    fingerParams2.c = f2C;\n    fingerParams2.d = f2D;\n    fingerParams2.e = f2E;\n    fingerParams2.quat = f2Quat;\n    fingerParams2.lengths = f2Lengths;\n    \n    float f2 = finger(p2, fingerParams2);\n    \n    FingerParams fingerParams3;\n    fingerParams3.a = f3A;\n    fingerParams3.b = f3B;\n    fingerParams3.c = f3C;\n    fingerParams3.d = f3D;\n    fingerParams3.e = f3E;\n    fingerParams3.quat = f3Quat;\n    fingerParams3.lengths = f3Lengths;\n    \n    float f3 = finger(p3, fingerParams3);\n        \n    FingerParams fingerParams4;\n    fingerParams4.a = f4A;\n    fingerParams4.b = f4B;\n    fingerParams4.c = f4C;\n    fingerParams4.d = f4D;\n    fingerParams4.e = f4E;\n    fingerParams4.quat = f4Quat;\n    fingerParams4.lengths = f4Lengths;\n    \n    float f4 = finger(p4, fingerParams4);\n    \n    FingerParams fingerParams5;\n    fingerParams5.a = f5A;\n    fingerParams5.b = f5B;\n    fingerParams5.c = f5C;\n    fingerParams5.d = f5D;\n    fingerParams5.e = f5E;\n    fingerParams5.quat = f5Quat;\n    fingerParams5.lengths = f5Lengths;\n    \n    float f5 = finger(p5, fingerParams5);\n    float fingers = min(min(min(f1, f2), f3), f4);\n    vec3 mainPos = rpos * vec3(1.0, 1.4, 1.0);\n    float main = sdCapsule(mainPos, vec3(0.0, 0.0, 0.0), vec3(0.15, -0.5, 2.25), 0.5, 1.0, 2.25);\n    main = smin(main, sdCapsule(mainPos, vec3(-0.5, 0.0, 1.0), vec3(-1.0, -0.25, 2.25), 0.5, 1.0, 2.5), 0.5);\n    main = smin(main, sdSphere(rpos + vec3(-0.2, 0.7, -0.3), 0.7), 0.1);\n    float hand = smin(smin(smin(main, fingers, 0.2), f5, 0.9), arm, 0.5);\n    float d = textureLod(iChannel2, (pos.xy - pos.z*0.2) * vec2(0.6, 0.4) + vec2(0.1, 0.0), 0.0).x;\n    hand += d * 0.135;\n    return vec2(hand / 3., 0.5);\n}\n\nvec4 marchHand(vec3 rayDir, vec3 cameraOrigin){\n    const int maxItter = 100;\n\tconst float maxDist = 30.0;\n    \n    float totalDist = 0.0;\n\tvec3 pos = cameraOrigin;\n\tvec2 dist = vec2(epsilon, 1.0);\n    float accum = 0.0;\n    \n    for(int i = 0; i < maxItter; i++){\n       \tdist = distfunc(pos);\n        \n\t\ttotalDist += dist.x; \n\t\tpos += dist.x * rayDir;\n        accum += smoothstep(2.0, 0.0, dist.y);\n        \n        if(dist.x < epsilon || totalDist > maxDist)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n    \n    return vec4(dist.x, totalDist, saturate(accum / 100.0), dist.y);\n}\n\nvec3 calculateNormals(vec3 pos){\n\tvec2 eps = vec2(0.0, epsilon);\n\tvec3 n = normalize(vec3(\n\tdistfunc(pos + eps.yxx).x - distfunc(pos - eps.yxx).x,\n\tdistfunc(pos + eps.xyx).x - distfunc(pos - eps.xyx).x,\n\tdistfunc(pos + eps.xxy).x - distfunc(pos - eps.xxy).x));\n\treturn n;\n}\n\nvec3 makeColor(in Ray inray){\n\tHitRecord rec;\n\tvec3 clr = vec3(0.);\n    float minDst = 100000.;\n    if(plane_hit(inray, Plane(vec3(0., -1., 0.), vec3(0., -1., 0.)), rec)){\n    \tclr = floorClr( rec.p, vec3(0., 1., 0.), inray.dir, true );\n        minDst = rec.t;\n    }\n    \n    vec3 sphereCntr = vec3(0.);\n    if(plane_hit(inray, Plane(sphereCntr, normalize(sphereCntr - inray.origin)), rec)\n       && distance(rec.p, vec3(0.)) < 1. && rec.t < minDst){\n    \tclr = eyeClr((rec.p * eyeMat).xy, iTime);\n        minDst = rec.t;\n    }\n    \n    if(sphere_hit(Sphere(sphereCntr, 1.), inray, rec) && rec.t < minDst){\n    \tclr = mix(clr, vec3(0.), cld(rec.p, iTime));\n        vec3 rr = reflect(inray.dir, rec.normal);\n        if(rr.y < 0. && plane_hit(Ray(rec.p, rr), Plane(vec3(0., -1., 0.), vec3(0., -1., 0.)), rec))\n            clr += .5 * floorClr( rec.p, vec3(0., 1., 0.), inray.dir, false );\n\n        vec4 dist = marchHand(rr, rec.p);\n        if(dist.x < epsilon){\n            vec3 pos = rec.p + dist.y * rr;\n            vec3 nrm = calculateNormals(pos);\n            clr += .5 * handClr(pos, nrm, normalize(-pos));\n        }\n        minDst = rec.t;\n    }\n    \n    vec4 dist = marchHand(inray.dir, inray.origin);\n    if(dist.x < epsilon && dist.y < minDst){\n        vec3 pos = inray.origin + dist.y * inray.dir;\n        vec3 nrm = calculateNormals(pos);\n        \n        clr = handClr(pos, nrm, normalize(-pos));\n    }\n    \n    return clr;\n}\n\nvec3 trace(vec2 fragCoord, vec2 res){\n\tvec3 viewDir = rayDirection(60., res.xy, fragCoord);\n    float angle = iTime*.5 + iMouse.x/iResolution.x * 6.283;\n    vec3 origin = vec3(5. * sin(angle), (sin(angle) + 1.) * 1., 5. * cos(angle));\n    eyeMat *= rotateY(-atan(origin.x, origin.z));\n    mat4 viewToWorld = viewMatrix(origin, vec3(0.), vec3(0., 1., 0.));\n    vec3 dir = (viewToWorld * vec4(viewDir, 1.0)).xyz;\n    return makeColor(Ray(origin, dir));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\ttime = iTime;\n    vec2 uv = (2.*fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    vec3 col = trace(fragCoord, iResolution.xy);\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float time;\nmat3 eyeMat = mat3(1.);\n\nstruct Sphere{ vec3 origin; float rad; };\nstruct Plane{ vec3 origin; vec3 normal; };\nstruct Ray{ vec3 origin, dir; };\nstruct HitRecord{ float t; vec3 p; vec3 normal; };\nstruct FingerParams{ vec4 a, b, c, d, e, quat, lengths; };\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n    \nbool sphere_hit(const in Sphere sphere, const in Ray inray, inout HitRecord rec) {\n    vec3 oc = inray.origin - sphere.origin;\n    float a = dot(inray.dir, inray.dir);\n    float b = dot(oc, inray.dir);\n    float c = dot(oc, oc) - sphere.rad*sphere.rad;\n    float discriminant = b*b - a*c;\n    if (discriminant >= 0.) {\n        float temp = (-b - sqrt(discriminant))/a;\n        \n        rec.t = temp;\n        rec.p = inray.origin + inray.dir * rec.t;\n        rec.normal = (rec.p - sphere.origin) / sphere.rad;\n        return true;\n    }\n    return false;\n}\n\nbool plane_hit(in Ray inray, in Plane plane, out HitRecord rec) {\n    float denom = dot(plane.normal, inray.dir);\n    if (denom > 1e-6) {\n        vec3 p0l0 = plane.origin - inray.origin;\n        float t = dot(p0l0, plane.normal) / denom;\n        \n        rec.t = t;\n        rec.p = inray.origin + inray.dir * rec.t;\n        rec.normal = -plane.normal;\n        return true;\n    }\n    return false;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.;\n    float z = size.y / tan(radians(fieldOfView) / 2.);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye),\n         s = normalize(cross(f, up)),\n         u = cross(s, f);\n    return mat4(vec4(s, 0.), vec4(u, 0.), vec4(-f, 0.), vec4(vec3(0.), 1.));\n}\n\nvec2 hash(vec2 p){\n    p = mod(p, 4.); \n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 getVoronoi(vec2 x, float time){\n    vec2 n = floor(x),\n         f = fract(x),\n         mr;\n    float md=5.;\n    for( int j=-1; j<=1; j++ ){\n        for( int i=-1; i<=1; i++ ){\n            vec2 g=vec2(float(i),float(j));\n            vec2 o=0.5+0.5*sin(time + 6.2831*hash(n+g));\n            vec2 r=g+o-f;\n            float d=dot(r,r);\n            if( d<md ) {md=d;mr=r;}\n\t\t}\n    }\n    return vec3(md,mr);\n}\n\nfloat hash(vec3 p){\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(hash(b).x, hash(b + d.yx).x, f.x), mix(hash(b + d.xy).x, hash(b + d.yy).x, f.x), f.y);\n}\n\nfloat noise( in vec3 x ){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(p+vec3(0,0,0)), \n                        hash(p+vec3(1,0,0)),f.x),\n                   mix( hash(p+vec3(0,1,0)), \n                        hash(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(p+vec3(0,0,1)), \n                        hash(p+vec3(1,0,1)),f.x),\n                   mix( hash(p+vec3(0,1,1)), \n                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nfloat fbm(vec3 q){\n\tfloat f  = 0.5000*noise( q ); q = m*q*2.01;\n          f += 0.2500*noise( q ); q = m*q*2.02;\n          f += 0.1250*noise( q ); q = m*q*2.03;\n          f += 0.0625*noise( q ); q = m*q*2.01;\n    \n    return f;\n}\n\nfloat OFFSET = .5, RATIO = 5., CRACK_depth = 3., CRACK_zebra_scale = 1.,\n      CRACK_zebra_amp = .67, CRACK_profile = 1., CRACK_slope = 50., CRACK_width = .0;\nvec3 hash3( uvec3 x ) {\n#   define scramble  x = ( (x>>8U) ^ x.yzx ) * 1103515245U // GLIB-C const\n    scramble; scramble; scramble; \n    return vec3(x) / float(0xffffffffU) + 1e-30;\n}\n#define hash22(p)  fract( 18.5453 * sin( p * mat2(127.1,311.7,269.5,183.3)) )\n#define disp(p) ( -OFFSET + (1.+2.*OFFSET) * hash22(p) )\n\nvec3 voronoiB( vec2 u ){\n    vec2 iu = floor(u), C, P;\n\tfloat m = 1e9,d;\n    for( int k=0; k < 9; k++ ) {\n        vec2  p = iu + vec2(k%3-1,k/3-1),\n              o = disp(p),\n      \t      r = p - u + o;\n\t\td = dot(r,r);\n        if( d < m ) m = d, C = p-iu, P = r;\n    }\n    m = 1e9;\n    for( int k=0; k < 25; k++ ) {\n        vec2 p = iu+C + vec2(k%5-2,k/5-2),\n\t\t     o = disp(p),\n             r = p-u + o;\n\n        if( dot(P-r,P-r)>1e-5 )\n        m = min( m, .5*dot( (P+r), normalize(r-P) ) );\n    }\n    return vec3( m, P+u );\n}\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nint MOD = 1;\n\n#define hash21(p) fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123)\nfloat noise2(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p); f = f*f*(3.-2.*f);\n\n    float v= mix( mix(hash21(i+vec2(0,0)),hash21(i+vec2(1,0)),f.x),\n                  mix(hash21(i+vec2(0,1)),hash21(i+vec2(1,1)),f.x), f.y);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\n#define noise22(p) vec2(noise2(p),noise2(p+17.7))\nvec2 fbm22(vec2 p) {\n    vec2 v = vec2(0);\n    float a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 6; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise22(p);\n\n    return v;\n}\n\nvec3 marble( vec2 U ){\n    vec3 O;\n    //U *= 4./iResolution.y;\n    vec2 I = floor(U/2.); \n    vec3 H0;\n    \n    for(float i=0.; i<CRACK_depth ; i++) {\n        vec2  V =  U / vec2(RATIO,1),\n              D = CRACK_zebra_amp * fbm22(U/CRACK_zebra_scale) * CRACK_zebra_scale;\n        vec3  H = voronoiB( V + D ); if (i==0.) H0=H;\n        float d = H.x;                                // distance to cracks\n        d = min( 1., CRACK_slope * pow(max(0.,d-CRACK_width),CRACK_profile) );\n        O += vec3(1.-d) / exp2(i);\n        U *= 1.5 * rot(.37);\n    }\n    return O;\n}\n\nfloat cld(vec3 p, float time){\n\tfloat ang = atan(p.x, p.z);\n    float f = getVoronoi(vec2(ang + p.y * 2., p.y - time * 2.) * 4./6.2831, time * .1).x;\n    f = smoothstep(.1, .15, f);\n    f *= smoothstep(.25, .5, fbm(p * 6. * rotateY(p.y * 2.) - vec3(0., time * 5., 0.)));\n\treturn f;\n}\n\nvec2 polarMap(vec2 uv, float inner) {\n\tfloat px = atan(uv.y, uv.x) / 6.283 + .5;\n    float py = (length(uv) * (1.0 + inner * .75) - inner) * 2.0;\n    \n    return vec2(px, py);\n}\n\nfloat fire(vec2 n) {\n    return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;\n}\n\nfloat shade(vec2 uv, float t) {\n    float q = fire(uv - t * .013) / 2.0;\n    vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));\n    return pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);\n}\n\nvec3 color(float grad, float power) {\n    float m2 = .125;\n    grad =sqrt( grad);\n    vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 2.61, vec3(2.0))));\n    vec3 color2 = color;\n    grad = pow(grad, power);\n    color = vec3( 1., 1. - grad * .9, 1.  - grad * 1.4) / grad;\n    return color / (m2 + max(vec3(0), color));\n}\n\nvec3 eyeClr( vec2 uv, float t ) {\n    vec2 muv = polarMap(uv, 2.5);\n    muv.y = abs(muv.y);\n    muv.x *= 35.;\n    vec3 outer = clamp(color(shade(muv, t), 1.5 + step(.85, length(uv)) * 5.), 0., 1.);\n    \n    float pupil = pow(max(0., cos(uv.y * 3.14)), .75) * .1;\n    pupil = smoothstep(pupil, pupil + .05, abs(uv.x));\n    \n    muv = polarMap(uv * vec2(2.5, 1.), .5);\n    muv.x *= 15.;\n    vec3 inner = clamp(color(shade(muv, t) - (1. - pupil) * 20., 4.), 0., 1.);\n    return clamp(inner+outer, 0., 1.);\n}\n\nvec3 floorClr(vec3 pos, vec3 nor, vec3 rd, bool reflectEye ){\n\tvec3 albedo = pow( marble(pos.xz), vec3( 2.2 ) );\n    float roughness = .7 - clamp( 0.5 - dot( albedo, albedo ), 0.05, 0.95 );\n\t\n    vec3 lColor = vec3(0.);\n    vec3 reflected = reflect(rd, nor);\n    HitRecord rec;\n    if(reflectEye && plane_hit(Ray(pos, reflected), Plane(vec3(0.), normalize(-pos)), rec)\n       && distance(rec.p, vec3(0.)) < 3.){\n       lColor = eyeClr((rec.p * eyeMat).xy, time) * (1. - roughness);\n    }\n    float cloud = 1.;\n    if(sphere_hit(Sphere(vec3(0.), 1.), Ray(pos, normalize(vec3(0.) - pos)), rec))\n        cloud = 1. - pow(cld(rec.p, time), .5);\n    return clamp(1. - length(pos.xz) * .15, 0., 1.) * cloud * (albedo + lColor);\n}\n\nvec3 handClr( vec3 pos, vec3 nor, vec3 rd ){\n\tvec3 albedo\t\t= clamp(vec3(dot(nor, rd)), 0., 1.);\n    albedo *= smoothstep(1.8, 1.6, length(pos));\n    HitRecord rec;\n    if(sphere_hit(Sphere(vec3(0.), 1.), Ray(pos, normalize(vec3(0.) - pos)), rec))\n    \talbedo *= 1. - pow(cld(rec.p, time), .5);\n    return pow( albedo, vec3( 1.0 / 2.2 ) );\n}","name":"Common","description":"","type":"common"}]}