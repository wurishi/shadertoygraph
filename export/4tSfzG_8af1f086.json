{"ver":"0.1","info":{"id":"4tSfzG","date":"1516165610","viewed":210,"name":"Thing_1","username":"balkhan","description":"horn","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["horn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t400.\n#define E\t\t\t0.00001\n#define FAR\t\t\t50.\n#define PI\t\t\t3.14\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, 0.0);\n\n    pos.z = 4.5+1.5*sin(t*10.);    \n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    if (inter.y < FAR)\n    col.xyz = ret_col*(1.-inter.y*.03);\n    col += h * .4;\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    ret = p.x + p.y;\n    ret = pow(ret, 1./4.);\n    \n    return ret;\n}\n\nfloat\tmylength(vec3 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    ret = p.x + p.y + p.z;\n    ret = pow(ret, 1./4.);\n    \n    return ret;\n}\n\nvoid\trot_rub(inout vec3 p, float axis, float top_bot, float direction)\n{\n\tif (axis == 0.)\n    {\n        rotate(p.xz, step(p.y*top_bot+(.5+-top_bot*.25), .25)*iTime*direction );\n\t    p.xz += .25;\n    }\n    else if (axis == 1.)\n    {\n        rotate(p.xy, step(p.z*top_bot+(.5+-top_bot*.25), .25)*iTime*direction );\n\t    p.xy += .25;\n    }\n    else if (axis == 2.)\n    {\n        rotate(p.yz, step(p.x*top_bot+(.5+-top_bot*.25), .25)*iTime*direction );\n\t    p.yz += .25;\n    }\n}\n\nfloat\tmap_rub(vec3 p)\n{  \n    float\tmind = 1e5;\n    rotate(p.xz, 1.57-.5*iTime);\n    rotate(p.yz, -1.57-.75*iTime);\n    \n    rot_rub(p, 0.+floor(mod(iTime*.16, 3.))*1.\n            ,\n            1.0*pow(floor(sin(iTime*.16) ) , -1.)\n            ,\n            1.0\n           );\n\n\tvec3\ttt = p;\n    p.xyz = mod(p.xyz, .5)-.25;\n    // we are doing a rubick's cube\n    /*\n\twe need to get the color of the faces\n\tbefore turning the cubes\n\tneed 6 colors\n\twe can use 1./3. of one axis as the id\n\tneed to find a way to colorize faces and not cubes\n\tcheck if mind == p.x or -p.x etc ...\n\t*/\n\n    mind = max(max(abs(p.x), abs(p.y) ), abs(p.z))-.225;\n    \n    if (mind == p.x-.225)\n    {\n    \tret_col = vec3(1., .0, .0);\n    }\n    else if (mind == -p.x-.225)\n    {\n    \tret_col = vec3(0., 1.0, .0);\n    }\n    else if (mind == p.y-.225)\n    {\n    \tret_col = vec3(0., .0, 1.0);\n    }\n    else if (mind == -p.y-.225)\n    {\n    \tret_col = vec3(0., 1.0, 1.0);\n    }\n    else if (mind == p.z-.225)\n    {\n    \tret_col = vec3(1., 1.0, .0);\n    }\n    else if (mind == -p.z-.225)\n    {\n    \tret_col = vec3(1.0, 1.0, 1.0);\n    }\n    \n    mind = max(mind, (max(max(abs(tt.x-.25), abs(tt.y-.25) ), abs(tt.z-.25))-.125*6.) );\n\n    return (mind);\n}\n\n\nfloat\tscene(vec3 p)\n{  \n    float\tvar;\n    float\tmind = 1e5;\n    p.z += 15.;\n    \n    rotate(p.xz, 1.57+1.57-5.92*.5-1.0*.5*iTime );\n    rotate(p.yz, 1.57-1.0*.5*iTime );\n\n    vec3\tap = p;\n//    rotate(p.xy, 1.57);\n    var = atan(p.x,p.y);\n    rotate(p.yz, var*.25 +sin(iTime*10.+1.57+var*10./max(var/6.28+1., .71) )*.0251);\n    rotate(p.xz, var*.25 +cos(iTime*10.+1.57+var*10./max(var/6.28+1., .71) )*.0251);\n    vec2 q = vec2( ( length(p.xy) )-6.,p.z);\n    rotate(q, ( (var*.2))*3.14);\n    float\toldvar = var*1.;\n    mind = mylength(q)-(.35*var+1.);\n    mind = min(mind, length(ap-vec3(-0.,-3.85,-4.))-3.5);\n    mind = max(mind, -(mylength(ap)-3.) );\n    mind = max(mind, -(mylength(vec2(abs(ap.x)-1., ap.z+4.20))-.5) );\n    float minf = map_rub(ap);\n    ap.yz -= vec2(-3., -7.5);\n    rotate(ap.xy, 1.57+iTime*10.);\n    var = atan(ap.x, ap.y);\n    q = vec2(length(ap.xy)-3.5, ap.z );\n    float ming = mylength(q)-.125+.25*abs( sin( (var)*1.-3.14) );\n    mind = min(mind, ming);\n    mind = min(mind, minf);\n    if (mind != minf)\n    {\n        ret_col = 1.-vec3(.350, .2, .3);\n    }\n        \n    h -= vec3(-3.20,.20,1.0)*vec3(1.)*.0025/(1.051+(mind-sin(oldvar*1. - iTime*1.*sin(iTime*.25051) + 3.14)*.125 )*(mind-sin(oldvar*1. - iTime*1.*sin(iTime*.25051) + 3.14)*.125 ) );\n    h += vec3(.26, .24, .15)*.0025/(.021+mind*mind);\n    \n    return (mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p);\n\t        dist.y += dist.x*.2; // makes artefacts disappear\n            // log trick by aiekick\n\t        if (log(dist.y*dist.y/dist.x/1e5) > .0 || dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n\t        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}