{"ver":"0.1","info":{"id":"ttd3Wr","date":"1576139234","viewed":521,"name":"Magnetic field indicators","username":"bitless","description":"An experiment with hexagonal tiling","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["2d","field","tiling","hexagonal","magnetic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: bitless\n// Title: Magnetic field indicators\n// Thanks to Patricio Gonzalez Vivo & Jen Lowe for \"The Book of Shaders\"\n// and Fabrice Neyret (FabriceNeyret2) for https://shadertoyunofficial.wordpress.com/\n// and Inigo Quilez (iq) for  https://iquilezles.org/www/index.htm\n// and whole Shadertoy community for inspiration.\n\n//Force field function based on https://www.shadertoy.com/view/Xl2Gz1 by Gijs\n\n#define SCALE 10.\n\nvec4 hex(vec2 uv)\n{\n    vec2    rf = vec2(1.,1.73),\n            h = rf/2.,\n            a = mod(uv,rf)-h,\n            b = mod(uv-h,rf)-h,\n            c = dot(a,a)<dot(b,b) ? a : b,\n            d = (uv-c)/SCALE;\n    return vec4(c.x,c.y,d.x,d.y); //local cell coord , cell center \n}\n\nvoid mainImage( out vec4 C, in vec2 P)\n{\n    vec2 r = iResolution.xy\n        ,uv = (P+P-r)/r.y;\n    uv += uv * length(uv)*-.15;\n\n    vec4    hx = hex(uv*SCALE); //hex grid\n    float \tl = length(hx.xy);//dist to cell center\n    \n    vec2    d =  vec2(cos(iTime)*.5,sin(iTime)*.5),\n            d0 = d + vec2(cos(iTime*1.7)*.4,sin(iTime*1.7)*.4) - hx.zw, //red pole\n            d1 = d - vec2(cos(iTime*1.7)*.4,sin(iTime*1.7)*.4) - hx.zw, //blue pole\n            f = d0/dot(d0,d0)-d1/dot(d1,d1); //force field vector\n    \n    float   dp = abs(dot(hx.xy*vec2(-1.,1),f.yx))/length(f), \n            df = abs(dot(hx.xy,f))/length(f);\n            \n    C = smoothstep (.08,.004, dp*df) // X shape\n         *smoothstep(.5,.45,l) \n         *(smoothstep(.15,.2,l) + smoothstep(.25,.0,l)) //center circle\n         *(vec4(1.,0.,0.,1.)*dot(f,hx.xy)*length(d1) //red light\n            +vec4(0.,0.,1.,1.)*(-dot(f,hx.xy))*length(d0) //blue light\n            +vec4(.2,.2,.2,1.)); //neutral light\n}","name":"Image","description":"","type":"image"}]}