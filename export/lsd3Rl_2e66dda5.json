{"ver":"0.1","info":{"id":"lsd3Rl","date":"1451840481","viewed":375,"name":"Brush blending problem","username":"kig","description":"Trying to draw a good-looking self-intersecting soft brushstroke. The stroke alpha should cap at its max component alpha. The use case is painting flat areas of color with pressure-controlled brush opacity.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","hack"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void strokeBlend(\n    vec3 srcColor, float srcAlpha,\n    vec3 dstColor, float dstAlpha,\n    out vec3 color, out float alpha\n)\n{\n    alpha = srcAlpha + (1.0-srcAlpha)*dstAlpha;\n    color = srcColor*srcAlpha + dstColor*dstAlpha*(1.0-srcAlpha);\n    alpha = max(max(dstAlpha, srcAlpha), alpha - srcAlpha * dstAlpha);\n    color /= alpha;\n\n    color = clamp(vec3(0.0), vec3(1.0), color);\n}\n\nvec4 layerBlend( vec3 bgColor, float bgAlpha, vec3 strokeColor, float strokeAlpha )\n{\n    return vec4(\n        strokeColor * strokeAlpha + bgColor * (1.0-strokeAlpha),\n        strokeAlpha + (1.0-strokeAlpha)*bgAlpha\n   \t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 bgColor = texture(iChannel0, uv).g * vec3(0.4);\n    float bgAlpha = 1.0;\n\n    vec3 color1 = vec3(1.0, 1.0, 0.0);\n    float strokeAlpha1 = 0.5;\n    float brushAlpha1 = smoothstep(0.5, 0.9, 1.0 - abs(2.0*(uv.y+sin(uv.x*3.0+iTime)*0.1 - 0.3)));\n\n    vec3 color2 = vec3(1.0, 1.0, 1.0);\n    float strokeAlpha2 = 0.25;\n    float brushAlpha2 = smoothstep(0.5, 0.9, 1.0 - abs(4.0*(uv.x - 0.3)));\n\n    vec3 color3 = vec3(0.0, 1.0, 1.0);\n    float strokeAlpha3 = 1.0;\n    float brushAlpha3 = smoothstep(0.5, 0.9, 1.0 - abs(4.0*(uv.x+sin(uv.y*3.0+iTime)*0.1 - 0.7)));\n\n\n    vec3 strokeColor;\n    float strokeAlpha;\n    \n\tstrokeBlend(\n        color1, strokeAlpha1*brushAlpha1, // yellow on top of cyan\n        color3, strokeAlpha3*brushAlpha3,\n        strokeColor, strokeAlpha\n    );\n\n    strokeBlend(\n        color2, strokeAlpha2*brushAlpha2, // grey on top of red\n        strokeColor, strokeAlpha,\n        strokeColor, strokeAlpha\n    );\n    \n    // Blend 4 cyan strokes\n    for (int i=0; i<4; i++) {\n        vec3 color4 = vec3(0.0, 1.0, 1.0);\n        float strokeAlpha4 = 0.5;\n        float brushAlpha4 = smoothstep(0.5, 0.9, 1.0 - abs(4.0*(uv.x+sin(uv.y*3.0+iTime)*0.1 - 1.2-(0.07+0.1*sin(iTime))*float(i))));\n        strokeBlend(\n            color4, strokeAlpha4*brushAlpha4,\n            strokeColor, strokeAlpha,\n            strokeColor, strokeAlpha\n        );\n    }\n\n    fragColor = layerBlend(bgColor, bgAlpha, strokeColor, strokeAlpha);\n}","name":"","description":"","type":"image"}]}