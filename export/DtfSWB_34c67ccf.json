{"ver":"0.1","info":{"id":"DtfSWB","date":"1675267577","viewed":180,"name":"yep, a rasterizer.","username":"Poisson","description":"A simple rasterizer, for the triangle intersection, I used the technique described in this video of Sebastian Lague: // https://www.youtube.com/watch?v=HYAgJN3x4GA","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["2d","triangle","intersection","antialiasing","rainbow","aa","interpolation","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 4 // antialiasing\n\n// point P inside a triangle ABC function\n// to understand the maths, watch this awesome video of Sebastian Lague\n// https://www.youtube.com/watch?v=HYAgJN3x4GA\nvec2 triIntersect(vec2 p, vec2 a, vec2 b, vec2 c) {\n    vec2 ca = c - a, // vector from c to a\n         ba = b - a, // vector from b to a\n         pa = p - a; // vector from p to a\n\n    float u = (a.x*ca.y + pa.y*ca.x - p.x*ca.y) /\n              (ba.y*ca.x - ba.x*ca.y);\n              \n    float v = (pa.y - u*ba.y) / ca.y;\n    \n    if (u<0. || v<0. || u+v>1.)  return vec2(-1); // no intersection\n    return vec2(u, v); // return u and v\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0); // accumulated color\n    \n    // AA for loops\n    for (int m=0; m<AA; m++)\n    for (int n=0; n<AA; n++) {\n        vec2 off = vec2(m,n)/float(AA) - .5; // AA offset\n        // pixel coordinates centered at the origin\n        vec2 p = (fragCoord+off - .5*iResolution.xy) / iResolution.y;\n\n        // background\n        vec3 col = vec3(.5+.5*p.y)*.03;\n\n        // 3 points of the triangle\n        vec2 a = vec2(-.4,-.3)+.1*sin(iTime)*vec2(-1,2);\n        vec2 b = vec2(.1,.4)-.2*sin(iTime+2.);\n        vec2 c = vec2(.6,-.2)+.05*sin(4.-iTime)*vec2(2,-3);\n    \n        vec2 uv = triIntersect(p, a, b, c); // triangle coordinates\n        if (uv.x>0.) { // intersecting?\n            // coloring based on the triangle coordinates\n            col = mix(mix(vec3(1,0,0), \n                          vec3(0,0,1), uv.x), \n                          vec3(0,1,0), uv.y);\n            \n            col = mix(col, texture(iChannel0, uv).rgb, pow(.5+.5*sin(iTime),3.));\n        }\n                \n        col = pow(col, vec3(.4545)); // gamma correction\n        \n        tot += col;\n    }\n    tot /= float(AA*AA);\n    \n    // vignette\n    vec2 q = fragCoord/iResolution.xy;\n    tot *= .5+.5*pow(16. * q.x*q.y*(1.-q.x)*(1.-q.y), .1);\n     \n    // dithering to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,17,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n     \n    // output\n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}