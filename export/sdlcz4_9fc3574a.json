{"ver":"0.1","info":{"id":"sdlcz4","date":"1641815200","viewed":69,"name":"simple Mandelbrot set","username":"p0ancf_36","description":"Mandelbrot set","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define iterations_count 100\n#define scale 4\n\n#define zoom iTime*4.0\n#define position -0.75, -0.15\n\nconst vec4 BLACK = vec4(0, 0, 0, 1);\n\nfloat sqrLength(vec2 v);\nvec2 f(vec2 z, vec2 c);\nvec3 hsv2rgb(vec3 c);\nvec3 getColor(int i);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 c = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * float(scale) / float(zoom) + vec2(position);\n    vec2 z = vec2(0);\n    \n    int i = 0;\n    for (; i < iterations_count; i++) {\n        z = f(z, c);\n        if (sqrLength(z) > 4.0) { break; }\n    }\n    if (i >= iterations_count - 1) {\n        fragColor = BLACK;\n        return;\n    }\n    fragColor = vec4(getColor(i), 1);\n}\n\n\nfloat sqrLength(vec2 v) { return v.x*v.x + v.y*v.y; }\nvec2 f(vec2 z, vec2 c) {\n    return vec2(\n        (z.x*z.x - z.y*z.y) + c.x,\n        (2.0 * z.x * z.y) + c.y\n    );\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 getColor(int i) {\n    float progress = float(i) / float(iterations_count);\n    return hsv2rgb(vec3(progress, 1, 1));\n}\n    ","name":"Image","description":"","type":"image"}]}