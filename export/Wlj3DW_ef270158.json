{"ver":"0.1","info":{"id":"Wlj3DW","date":"1559601101","viewed":131,"name":"Sonar Ping","username":"charon","description":"Noise creates random terrain which lights up depending on time and it's distance from a sonar emitter point","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distance","sonar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\n\n\n\n// noise function taken from https://www.shadertoy.com/view/4sdGD8\n\nlowp vec3 permute(in lowp vec3 x) { return mod( x*x*34.+x, 289.); }\nlowp float snoise(in lowp vec2 v) {\n  lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n      x0 = (i.x+i.y)*.211324865405187 + v - i;\n  lowp float s = step(x0.x,x0.y);\n  lowp vec2 j = vec2(1.0-s,s),\n      x1 = x0 - j + .211324865405187, \n      x3 = x0 - .577350269189626; \n  i = mod(i,289.);\n  lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy) - 0.5;\n\n    \n    // generatying rays to cast from camera based on coordinates\n    \t\t// z serves to modify field of view\n    \t\t// y moves to look up and to horizon\n    //vec3 rayDir = normalize( vec3(uv.x, uv.y , 1 ));\n    vec3 rayDir = normalize( vec3(uv.x, uv.y , 0.25 - distance(uv, vec2(0,0))/4.0 ));\n    \n    vec3 position = vec3(0,0,0);\n    \n    vec3 color = vec3(0, 0.3, 1.0);\n   \n    for (float i = 1.0; i < 100.0; i+=0.5){\n        \tif (pow(snoise(rayDir.xz*i/5.0), 3.0) < 0.2)\n            {\n                color = vec3(1,0.5,0);\n            \tposition = rayDir*i;\n                i = 101.0;\n            }\n   \t\t\t\n\n    }\n\n    float t = time*5.0;\n    \n    if (position == vec3(0,0,0))\n        fragColor = vec4 (0,0,0,1);\n   \telse if (distance (position, vec3 (0, 0, 5)) < t + 0.50 && distance (position, vec3 (0, 0, 5)) > t)\n    \tfragColor = vec4(0.8, 0.8, 1.0, 1.0);\n        else{\n            float depth = 1.0-distance(vec3(0,0,0),position)/10.0;\n        fragColor = vec4(depth + 0.1, depth, depth+0.2, 1); \n        }\n}\n","name":"Image","description":"","type":"image"}]}