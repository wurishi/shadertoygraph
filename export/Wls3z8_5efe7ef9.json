{"ver":"0.1","info":{"id":"Wls3z8","date":"1555633451","viewed":148,"name":"Rectangular","username":"johnyboy94","description":"After fooling around with the grid shader taught by Bigwings used for water drops, came upon a nice pattern by chance.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["grid","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float N2(vec2 p)\n{\t// Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//applied n2 to kinda sorta get a random vec2\nvec2 randVec2(vec2 p)\n{\n\treturn vec2(N2(p), N2(p.yx)) - .5;\n}\n\n\nvec2 getCellStar(vec2 cellID)\n{\n    vec2 temp = randVec2(cellID);\n \treturn vec2(sin(iTime * temp.x), cos(iTime * temp.y)) * .4;\t//moving\n    return vec2(temp.x, temp.y) * .8;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    //uv *= 2.f;\n    //uv -= 1.f;\n    //uv.x *= iResolution.x/iResolution.y;\n    \n    //thanks Fabrice\n    vec2 uv = (2.* fragCoord -  iResolution.xy ) /iResolution.y;\n    uv *= 5.;\n\n    vec2 gridCell = floor(uv);\n    vec2 gridOffset = fract(uv) - .5;\n\n    vec2 cellPoint = getCellStar(gridCell);\n\t\n    vec2 rekt = gridOffset - cellPoint;\t\n    float dToPoint = max(rekt.x, rekt.y);\n    \n\t//dToPoint = sin(iTime) > 0. ? dToPoint :smoothstep(.1, .05, dToPoint);\n    //dToPoint = smoothstep(sin(iTime) * .3, .05, dToPoint);\n\tdToPoint = mix(dToPoint, smoothstep(.1, .05, dToPoint), sin(iTime));\n    \n    fragColor = vec4(dToPoint);\n}\n\n  \t","name":"Image","description":"","type":"image"}]}