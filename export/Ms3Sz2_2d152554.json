{"ver":"0.1","info":{"id":"Ms3Sz2","date":"1460248744","viewed":1050,"name":"Space Tiling2","username":"akohdr","description":"Using Iq's viewer to tile Isohedral Tetrahedron added sdIsoTet() and orientation macros\nMouse controls camera, added some interlacing flags YMMV","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefields","primitives"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// based on Iq's primitives viewer https://www.shadertoy.com/view/Xds3zN\n\n// Interlacing YMMV potentially useful for debugging/speed/cooling/projection\n//#define INTERLACE_AGGRESSIVE\n//#define INTERLACE_X\n//#define INTERLACE_Y\n// try this with all interlacing flags uncommented, then switch them off/on individually\n//#define SPOOKY\n\n// Isohedral Tetrahedron distance function\nfloat sdIsoTet(vec3 p, float h) \n{\n    vec3 q = abs(p);\n    \n    float y = p.y,\n          d1 = q.z-max(0.,y),\n          d2 = max(q.x*.5 + y*.5,.0) - min(h, h+y);\n    return length(max(vec2(d1,d2),.005)) + min(max(d1,d2), 0.);\n}\n\nfloat sdOctahedron(vec3 p, float h) \n{\n    vec2 d = .5*(abs(p.xz)+p.y) - min(h,p.y);\n    return length(max(d,0.)) + min(max(d.x,d.y), 0.);\n}\n\nfloat sdTruncOct(vec3 p, float h, float k) \n{\n    vec2 d = max(.5*(abs(p.xz)-p.y),.0) - min(h-k, h-p.y);\n    return length(max(d,0.)) + min(max(d.x,d.y), 0.);\n}\n\nfloat sdSpheresCursor(vec3 p, float h, float r) {\n\treturn length(max(abs(p)-h, -1.))-r;\n}\n\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n  return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//=======================================================================================\n// TODO: Is there a colorspace gen func out there?\n#define RED 290.67\n#define GRN 110.67\n#define BLU 209.67\n#define YEL 170.67\n#define CYN 333.67\n#define PRP 143.67\n\n#define ISOTET_RED(p,s,u) sdIsoTet((p-vec3(.0,-u,.0)).zyx,s)\n#define ISOTET_BLU(p,s,u) sdIsoTet((p-vec3(.0,.0,.0)).xyz,s)\n#define ISOTET_GRN(p,s,u) sdIsoTet((p-vec3(.0,.0,.0)).xzy,s)\n#define ISOTET_YEL(p,s,u) sdIsoTet((p-vec3(.0,.0,-u)).yzx,s)\n#define ISOTET_CYN(p,s,u) sdIsoTet((p-vec3(.0, u,.0)).zxy,s)\n#define ISOTET_PRP(p,s,u) sdIsoTet((p-vec3(-u,-u,.0)).yxz,s)\n\n//=======================================================================================\nvec2 map( in vec3 pos )\n{\n    // We keep a collection of more interesting primitives to show shadows\n    \n    // central sphere on plane\n    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ), 46.9 ) );\n    \n    // tiled Isohedral Tetrahedron\n    float sT = sin(iTime), cT = cos(iTime),\n          o = cT*1.5*(1.+cos(2.1+sT)), h=.9,\n          s = .15, u = s+s;\n    res = opU( res, vec2(ISOTET_BLU(pos-vec3(-o, h, o),s,u), BLU ) );\n    res = opU( res, vec2(ISOTET_YEL(pos-vec3( 0, h, o),s,u), YEL ) );\n    res = opU( res, vec2(ISOTET_CYN(pos-vec3( o, h, o),s,u), CYN ) );\n    res = opU( res, vec2(ISOTET_RED(pos-vec3(-o, h,-o),s,u), RED ) );\n    res = opU( res, vec2(ISOTET_GRN(pos-vec3( 0, h,-o),s,u), GRN ) );\n    res = opU( res, vec2(ISOTET_PRP(pos-vec3( o, h,-o),s,u), PRP ) );\n\n    // cluster spheres\n    res = opU( res, vec2(sdSpheresCursor(pos-vec3(-2, .3, 1),.2,.08), BLU ) );\n\n    // truncated octahedron\n    res = opU( res, vec2(sdTruncOct(pos-vec3(-2., .3, 0.),.2,.1), RED ) );\n\n    // regular octahedron\n    res = opU( res, vec2(sdOctahedron(pos-vec3(-3., .1, 0.),.25), GRN ) );\n        \n    // box minus sphere\n    res = opU( res, vec2( opS(\n\t\t             udRoundBox(  pos-vec3(-1., .3, 0.), vec3(0.15),0.05),\n\t                 sdSphere(    pos-vec3(-1., .3, 0.), 0.25)), 13.0 ) );\n\n    // tri prism minus box\n    res = opU( res, vec2( opS(\n\t\t\t\t\t sdTriPrism(  pos-vec3(2., .3, 0.), vec2(0.45,0.05)), \n\t\t             udRoundBox(  pos-vec3(2., .3, 0.), vec3(0.15),0.05)\n             )));\n    \n  \t// twisted torus\n\tres = opU( res, vec2( 0.5*sdTorus( opTwist(pos-vec3(1., 0.35, 0.)),vec2(.2, .05)), 46.7 ) );\n\n    return res;\n}\n//=======================================================================================\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<100; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += .5*res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n// TODO: use bit-ops in GLSL 3.0 instead of mod\n#ifdef SPOOKY\n#define INTERLACE(c,p,f,a,b,C) if(mod(p.f-mod(float(iFrame),a),a)<b){c=C;discard;}\n#else\n#define INTERLACE(c,p,f,a,b,C) if(mod(p.f-mod(float(iFrame),a),a)<b){c=C;return;}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n#ifdef INTERLACE_Y\n#ifdef INTERLACE_AGGRESSIVE\n    INTERLACE(fragColor,fragCoord,y,4.,3.,vec4(.3))\n#else\n    INTERLACE(fragColor,fragCoord,y,2.,1.,vec4(.3))\n#endif\n#endif\n\n#ifdef INTERLACE_X\n#ifdef INTERLACE_AGGRESSIVE\n    INTERLACE(fragColor,fragCoord,x,6.,5.,vec4(.3))\n#else\n    INTERLACE(fragColor,fragCoord,x,2.,1.,vec4(.3))\n#endif\n#endif\n        \n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy+vec2(0,1);\n\t\t \n\tfloat time = 28.0 + iTime*7.;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + .8*mo.y, 0.5 + 3.5*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}