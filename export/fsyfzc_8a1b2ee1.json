{"ver":"0.1","info":{"id":"fsyfzc","date":"1658584783","viewed":218,"name":"Laser cube in laser cube","username":"NicoEl","description":"Nested laser light wireframe cubes scaled to fit in outer cube. \nNot sure this scaling logic is working perfectly, feels like it's scaling too much sometimes. Anyway, happy with the result and I'll call it a day :P","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["cube","light","laser","nested"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distToLine2D(vec2 x, vec2 a, vec2 b, out float t)\n{\n\tvec2 xa = x - a;\n\tvec2 ba = b - a;\n\t\n\tt = dot(xa, ba) / dot(ba, ba);\n\tt = clamp(t, 0., 1.);\n\treturn length(xa - ba * t);\n}\n\nvec4 drawLine3D(vec2 uv, vec3 p0, vec3 p1, mat4 m0, mat4 m1, vec4 col0, vec4 col1, float f0, float f1, float p)\n{\n\tp0 = (vec4(p0, 1.) * m0).xyz;\n\tp1 = (vec4(p1, 1.) * m1).xyz;\n\n\tp0.xy = p0.xz / p0.y;\n\tp1.xy = p1.xz / p1.y;\n\n\tfloat t;\n\tfloat d = distToLine2D(uv, p0.xy, p1.xy, t);\n\treturn mix(col0, col1, t)  * pow(smoothstep(mix(f0, f1, t), 0.0, d), p);\n}\n\nvec4 drawLine3D(vec2 uv, vec3 p0, vec3 p1, mat4 m, vec4 col, float f0, float f1, float p)\n{\n\treturn drawLine3D(uv, p0, p1, m, m, col, col, f0, f1, p);\n}\n\nvec4 drawCube3D(vec2 uv, in mat4 m, in vec4 col, float f0, float f1, float p)\n{\n\tvec4 ret = vec4(0);\n\tret += drawLine3D(uv, cube[0], cube[1], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[1], cube[3], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[3], cube[2], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[2], cube[0], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[4], cube[5], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[5], cube[7], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[7], cube[6], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[6], cube[4], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[0], cube[4], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[5], cube[1], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[2], cube[6], m, col, f0, f1, p);\n\tret += drawLine3D(uv, cube[7], cube[3], m, col, f0, f1, p);\n\tret.a /= 12.0;\n\treturn ret;\n}\n\nvec4 drawCubeConnection(vec2 uv, in mat4 m0, in mat4 m1, in vec4 col0, in vec4 col1, float f0, float f1, float p)\n{\n\tvec4 ret = vec4(0);\n\tfor(int i = 0; i < 8; i++)\n\t{\n\t\tret += drawLine3D(uv, cube[i], cube[i], m0, m1, col0, col1, f0, f1, p);\n\t}\n\tret.a /= 8.0;\n\treturn ret;\n}\n\nmat4 translationMat(vec3 t) { return mat4(1, 0, 0, t.x, 0, 1, 0, t.y, 0, 0, 1, t.z, 0, 0, 0, 1); }\n\nmat4 scaleMat(vec3 scale) { return mat4(mat3(scale.x, 0, 0, 0, scale.y, 0, 0, 0, scale.z)); }\n\nmat4 angleAxisRotMat(vec3 axis, float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\tfloat t = 1.0 - c;\n\n\treturn mat4(mat3(\n\t\tc + (axis.x * axis.x) * (t),\t\t    (axis.y * axis.x) * (t) + (axis.z * s),\t\t(axis.z * axis.x) * (t) - (axis.y * s),\n\t\t(axis.x * axis.y) * (t) - (axis.z * s),\tc + (axis.y * axis.y) * (t),        \t\t(axis.z * axis.y) * (t) + (axis.x * s),\n\t\t(axis.x * axis.z) * (t) + (axis.y * s),\t(axis.y * axis.z) * (t) - (axis.x * s),\t\tc + (axis.z * axis.z) * (t)));\n}\n\nvec4 makeColor(float t, float a)\n{\n    return vec4(pal(t, vec3(.5,.5,.5),vec3(.4,.5,.5),vec3(1.,1.,1.),vec3(.2,.125,.27)), a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat uvTiling = 2.;\n\tvec2 uv = (uvTiling * fragCoord.xy - iResolution.xy) / iResolution.y;\n\t\n\tvec2 time = vec2(.5, .25) * (1. + iTime);\n\n\tmat4 m = IdentityMat;\n\t\n\tvec3 axis = vec3(0, -1, 1);\n    float outerCubeSpeed = 0.2 * time.x;\n\tm *= angleAxisRotMat(axis.xxz, outerCubeSpeed);\n\tm *= angleAxisRotMat(axis.xzx, outerCubeSpeed);\n\tm *= angleAxisRotMat(axis.zxx, outerCubeSpeed);\n\n\tmat4 mT = translationMat(vec3(.5 * cos(time.x), -.9, 0.));\n\n\tfloat fCubeBase = .075;\tfloat cubeAlpha = 3.5;\n\tfloat fConnBase = .8;\tfloat connAlpha = 0.8;\n    \n\tint n = 6; float nf = float(n); float invN = 1. / nf;\n\n\tvec4 outCube = vec4(0);\tvec4 outCubeConnections = vec4(0);\n    \n    float scale0 = 0.;\n\n\tfor (int i = 0; i < n - 1; i++)\n\t{\n        vec3 fi = vec3(float(i));\n        fi.yz += vec2(-1, 1);\n        vec3 t = fi * invN;\n        vec2 fMod = (2. + (t.xy) * sin((time.xy + fi.xy) * vec2(-PI, PI)));\n\n        vec2 fCube = fCubeBase * fMod;\n        vec2 fConn = fConnBase * fMod;\n        vec2 p = 1. + 16. * fMod * vec2(fi.z, 4. * pow(fi.z, 4.));\n\t\tvec4 cubeCol = makeColor(t.x + .1 * time.x, cubeAlpha);\n\t\tvec4 connCol = makeColor(t.y + .1 * time.x, connAlpha);\n\t\t\n\t\tmat4 mi = m;\n\t\tfloat rotSpeed = time.y * t.x;\n\t\tmi *= angleAxisRotMat(axis.xxz, rotSpeed);\n\t\tmi *= angleAxisRotMat(axis.xzx, rotSpeed);\n\t\tmi *= angleAxisRotMat(axis.zxx, rotSpeed);\n\n\t\tfloat scale = sqrt(3.0);\n\n\t\tfor (int dIdx = 0; dIdx < 4; dIdx++)\n\t\t{\n\t\t\tvec3 rotDiag = (vec4(cubeDiagonals[dIdx], 1) * mi).xyz;\n\t\t\tvec3 absRotDiag = abs(rotDiag);\n\t\t\tfloat maxNorm = max(max(absRotDiag.x, absRotDiag.y), absRotDiag.z);\n\t\t\trotDiag /= maxNorm;\n\t\t\tscale = min(length(rotDiag), scale);\n\t\t}\n        \n        scale0 = i == 0 ? scale / sqrt(3.0) : scale0;\n\n\t\tmi *= scaleMat(vec3(scale / sqrt(3.0)));\n\t\t\n\t\tmat4 miSRT = mi * mT;\n\n\t\toutCube += drawCube3D(uv, miSRT, cubeCol, fCube.x, fCube.x, p.x);\n\t\toutCubeConnections += drawCubeConnection(uv, m * mT, miSRT, vec4(connCol.rgb, i == 0 ? 0. : connCol.a), vec4(cubeCol.rgb, connCol.a), fConn.x, fConn.y, p.y);\n\t\t\n\t\tm = mi;\n\t}\n\t\n    float alphaModulation = 0.075;\n\toutCube.rgb *= outCube.a/(alphaModulation * nf);\n\toutCubeConnections.rgb *= outCubeConnections.a/(alphaModulation * (nf-1.));\n\t\n    float bgt = 1.1 + scale0 * sin(PI * fract(0.25 * time.y));\n    vec2 uvbg = (sqrt(2.) + bgt) * (fragCoord/iResolution.xy - 0.5);\n\n\tvec3 bg = pal((dot(uvbg, uvbg)), vec3(0.01,0.04,0.04), vec3(0.05,0.05,0.05),vec3(.25,.25,.25),vec3(.04,.0125,.07));\n\t\n\tfragColor = vec4(bg + outCube.rgb + outCubeConnections.rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define IdentityMat mat4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)\n#define PI 3.14159265359\n\nvec3 cube[8] = vec3[8](\n\tvec3(-.5, -.5, -.5),\n\tvec3(.5, -.5, -.5),\n\tvec3(-.5, .5, -.5),\n\tvec3(.5, .5, -.5),\n\tvec3(-.5, -.5, .5),\n\tvec3(.5, -.5, .5),\n\tvec3(-.5, .5, .5),\n\tvec3(.5, .5, .5));\n\nvec3 cubeDiagonals[4] = vec3[4](\n\tvec3(1., 1., 1.),\n\tvec3(-1., 1., 1.),\n\tvec3(1., 1., -1.),\n\tvec3(-1., 1., -1.));\n\n// ----------------------------------------------------------\n// https://www.shadertoy.com/view/ll2GD3\n\n// The MIT License\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// A simple way to create color variation in a cheap way (yes, trigonometrics ARE cheap\n// in the GPU, don't try to be smart and use a triangle wave instead).\n\n// See https://iquilezles.org/articles/palettes for more information\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n// ----------------------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}