{"ver":"0.1","info":{"id":"wdlyWf","date":"1585769271","viewed":141,"name":"Paper Lilly","username":"Flopine","description":"Made a small shader as a training for a Cookie stream and to experiment with plane folding + toon shading\nYou can watch Cookie streams here: https://www.twitch.tv/cookiecollectif/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","flower","toonshading","origami"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define TAU (2.*PI)\n#define time iTime\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if(p.y>p.x) p = p.yx;\n}\n\nfloat hash21(vec2 x)\n{return fract(sin(dot(x,vec2(42.35,51.5)))*124.5);}\n\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat plane (vec3 p, vec3 n)\n{return dot(p,normalize(n));}\n\nfloat lily (vec3 p)\n{\n    float a = atan(p.z,p.x);\n    p.y += (mod(a, TAU/5.))*0.2;\n    return cyl(p.xzy, 3.,0.15);\n}\n\nfloat flower (vec3 p)\n{\n    p.y += .3;\n    p.y += sin(length(p.xz*2.)-time)*0.4;\n    mo(p.xz, vec2(.5));\n    mo(p.xy, vec2(.5));\n    mo(p.yz, vec2(.3));\n    return plane(p, vec3(0.5,0.5,1.));\n}\n\nfloat water (vec3 p)\n{\n    p.y += 1.2;\n    p.y += texNoise(p.xz*0.05+time*0.02).r + texNoise(p.xz*0.04-time*0.01).r;\n    return abs(p.y)-1.;\n}\n\nfloat li,wat, flo;\nfloat SDF (vec3 p)\n{\n    li = lily(p);\n    wat = water(p);\n    flo = flower(p);\n    return min(li,min(flo,wat));\n}\n\nvec3 getcam (vec3 ro, vec3 tar, vec2 uv)\n{\n    vec3 f = normalize(tar-ro);\n    vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n    vec3 u = normalize(cross(f,l));\n    return normalize(f + l*uv.x + u*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    float dither = hash21(uv);\n    vec3 ro = vec3(0.001,8.,-2.),\n        p = ro,\n        tar = vec3(0.),\n        rd = getcam(ro, tar, uv),\n        col = vec3(0.);\n\n    float d, shad = 0.;\n\n    for (float i=0.; i<64.; i++)\n    {\n        d = SDF(p);\n        if (d <0.001)\n        {\n            shad = i/64.;\n            break;\n        }\n        d *= 0.8+dither*0.05;\n        p += d*rd;\n    }\n\n    if (d == wat)\n    {\n        col = mix(vec3(0.1,0.2,0.8),vec3(0.7,0.8,0.9),floor((shad)*7.)/7.);\n    }\n    if (d == li)\n    {\n        col = mix(vec3(0.1,0.5,0.2),vec3(0.7,0.9,0.8),floor((shad)*6.)/6.);\n    }\n    if (d == flo)\n    {\n        col = mix(vec3(0.9,0.55,0.9),vec3(0.7,0.1,0.8),floor((shad)*7.)/7.);\n    }\n    \n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}