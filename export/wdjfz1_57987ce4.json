{"ver":"0.1","info":{"id":"wdjfz1","date":"1589535916","viewed":1812,"name":"Persp-correct bary tri rast","username":"TomF","description":"A simple triangle rasteriser, with perspective-correct barycentric interpolation.\n\nDoes not obey proper fill rules - too lazy :-)","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["triangle","barycentric","rasteriser","perspectivecorrect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nstruct Vertex\n{\n    vec4 Pos;\n};\n\n\n// Test a position against a triangle and return\n// the non-perspective-correct barycentric coordinates in the triangle\n// Vertex z and w values are ignored.\nvec2 BaryTri2D ( vec2 pos, Vertex v1, Vertex v2, Vertex v3 )\n{\n    vec2 posv1 = pos - vec2(v1.Pos);\n    \n    vec2 v21 = vec2(v2.Pos) - vec2(v1.Pos);\n    vec2 v31 = vec2(v3.Pos) - vec2(v1.Pos);\n    \n    float scale = v21.x * v31.y - v21.y * v31.x;\n    float rscale = 1.0 / scale;\n    float baryi = ( posv1.x * v31.y - posv1.y * v31.x ) * rscale;   \n    float baryj = ( posv1.x * v21.y - posv1.y * v21.x ) * -rscale;\n    \n    return vec2 ( baryi, baryj );\n}\n\n\n#if 0\n// Test a position against a triangle and return\n// the perspective-correct barycentric coordinates in the triangle\n// Note the z value in the vertex is ignored, it's the w that matters.\nvec2 BaryTri3D ( vec2 pos, Vertex v1, Vertex v2, Vertex v3 )\n{\n    // Note some 3D pipelines will already have 1/w for each vertex, so this line may not be needed.\n    vec3 recipw = vec3 ( 1.0/v1.Pos.w, 1.0/v2.Pos.w, 1.0/v3.Pos.w );\n\n    vec2 posv1 = pos - vec2(v1.Pos);\n    \n    vec2 v21 = vec2(v2.Pos) - vec2(v1.Pos);\n    vec2 v31 = vec2(v3.Pos) - vec2(v1.Pos);\n    \n    float scale = v21.x * v31.y - v21.y * v31.x;\n    float rscale = 1.0 / scale;\n    float baryi = ( posv1.x * v31.y - posv1.y * v31.x ) * rscale;\n    float baryj = ( posv1.x * v21.y - posv1.y * v21.x ) * -rscale;\n    \n    // Now interpolate the canonical coordinates (0,0,1,v1.w), (1,0,1,v2.w) and (0,1,1,v3.w)\n    // with perspective correction\n    // So we project all three by their respective w:\n    // (0,0,v1.w) -> (0,     0,     1/v1.w)\n    // (1,0,v2.w) -> (1/v2.w,0,     1/v2.w)\n    // (0,1,v3.w) -> (0,     1/v3.w,1/v3.w)\n    // Then interpolate those values linearly to produce (nx,ny,nw),\n    // then divide by nw again.\n   \n    float baryk = 1.0 - baryi - baryj;\n    float newi = recipw.y * baryi;\n    float newj = recipw.z * baryj;\n    //float neww = recipw.x * baryk + recipw.y * baryi + recipw.z * baryj;\n    float neww = recipw.x * baryk + newi + newj;\n    \n    // ...and project back.\n    float rneww = 1.0/neww;\n    float perspi = newi * rneww;\n    float perspj = newj * rneww;\n        \n    return vec2 ( perspi, perspj );\n}\n\n#else\n// This is the same code as above, but refactored slightly.\n// It should be slightly faster on some cards, but is harder to read.\nvec2 BaryTri3D ( vec2 pos, Vertex v1, Vertex v2, Vertex v3 )\n{\n    // Note some 3D pipelines will already have 1/w for each vertex, so this line may not be needed.\n    vec3 recipw = vec3 ( 1.0/v1.Pos.w, 1.0/v2.Pos.w, 1.0/v3.Pos.w );\n\n    vec2 posv1 = pos - vec2(v1.Pos);\n    \n    vec2 v21 = vec2(v2.Pos) - vec2(v1.Pos);\n    vec2 v31 = vec2(v3.Pos) - vec2(v1.Pos);\n    \n    float scale = v21.x * v31.y - v21.y * v31.x;\n    float baryis = ( posv1.x * v31.y - posv1.y * v31.x );\n    float baryjs = ( posv1.y * v21.x - posv1.x * v21.y );\n    float baryks = ( scale - baryis - baryjs );\n    \n    float newis = recipw.y * baryis;\n    float newjs = recipw.z * baryjs;\n    float newws = recipw.x * baryks + newis + newjs;\n    \n    // ...and project back.\n    float rnewws = 1.0/newws;\n    float perspi = newis * rnewws;\n    float perspj = newjs * rnewws;\n        \n    return vec2 ( perspi, perspj );\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    Vertex v1 = Vertex (vec4(0.5, 0.5, 0.0, 0.5));\n    Vertex v2 = Vertex (vec4(0.9, 0.6, 0.0, 0.8));\n    Vertex v3 = Vertex (vec4(0.4, 0.8, 0.0, 0.9));\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col.xy = uv.xy;\n    col.z = 0.0;\n\n    int rep = 0;\n    // Uncomment this line for \"benchmarking\"\n    //for ( rep = 0; rep < 5000; rep++ )\n    {\n        float angle = iTime + 0.1 * float(rep);\n        v1.Pos.xy = 0.5 + 0.2 * vec2 ( cos ( angle ), sin ( angle ) );\n        v2.Pos.xy = 0.5 + 0.2 * vec2 ( sin ( angle ), -cos ( angle ) );\n\n        vec2 bary = BaryTri3D ( uv, v1, v2, v3 );\n        if ( ( bary.x >= 0.0 ) &&\n             ( bary.y >= 0.0 ) &&\n             ( bary.x + bary.y < 1.0 ) )\n        {\n            col.xy = bary;\n            col.z = 1.0;\n            if ( fract ( bary.x * 4.0 ) < 0.05 ) { col.z = 0.0; }\n            if ( fract ( bary.y * 4.0 ) < 0.05 ) { col.z = 0.0; }\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}