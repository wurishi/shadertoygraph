{"ver":"0.1","info":{"id":"cssGDS","date":"1666735312","viewed":186,"name":"Artober - Hire me for VJing","username":"Flopine","description":"Day 23 of october everyday challenge. This is me under chiptune ","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","repetition","animation","discard","everyday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define palette(t,c,d) ( vec3(0.5)+vec3(0.5)*cos(2.*PI*(c*t+d)) ) \n\n#define noise(u) texture(iChannel0, u).x \n#define hash21(x) fract(sin(dot(x, vec2(324.1, 419.0)))*1674.8)\n\n// found in iq's shader\n// https://www.shadertoy.com/view/7tSXzt\n// signed distance to a n-star polygon with external angle en\nfloat sdRegularPolygon(in vec2 p, in float r, in int n )\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = PI/float(n);\n    vec2  acs = vec2(cos(an),sin(an));\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p.y += clamp( -p.y, 0.0, r*acs.y);\n    return length(p)*sign(p.x);\n}\n\nfloat torus (vec3 p, vec2 d, int n, float off)\n{\n    vec2 q = vec2(sdRegularPolygon(p.xy, d.x, n), p.z);\n    float a = atan(p.x,p.y)+iTime*off;\n    q *= rot(a);\n    return sdRegularPolygon(q, d.y, 4);\n}\n\nvec2 path(float t) \n{\n\tfloat a = sin(t*.2 + 1.5), b = sin(t*.2);\n\treturn vec2(a*2., a*b);\n}\n\nfloat id, g1=0.;\nfloat SDF (vec3 p)\n{\n    float per = 1.;    \n    id = floor(p.z/per);   \n    p.xy -= path(p.z);\n    float offset = (mod(id, 2.) <.5) ? 1. : -1.;\n    \n    p.z = mod(p.z, per)-per*0.5;\n    p.xy *= rot(iTime*offset);\n    float d = torus(p,vec2(2., 0.3), 5, offset);\n    g1 += 0.01/(0.01+d*d);\n    \n    return d;\n}\n\nvec3 camera(vec3 ro, vec2 uv, vec3 ta) \n{\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 left = cross(vec3(0, 1, 0), fwd);\n\tvec3 up = cross(fwd, left);\n\treturn normalize(fwd + uv.x*left + up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float dither = hash21(uv), anim = iTime*10.;\n    \n    if (noise(uv.yx*.35+vec2(iTime, 0.))<.3) discard;\n    \n    vec3 ro = vec3(0.001, 0.001, -3.+anim), \n    ta = vec3(0., 0., anim),\n    rd; \n    \n    ro.xy += path(ro.z);\n\tta.xy += path(ta.z);\n\trd = camera(ro, uv, ta);\n    \n    vec3 p=ro, col=vec3(0.);\n    \n    bool hit = false;\n    for (float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;break;\n        }\n        d *= 0.99+dither*0.08;\n        p += d*rd;\n    }\n    \n    col += g1*palette(id,vec3(0.1), vec3(0.25, 0.4, 0.5) ) * .4;\n    \n    float dit = texture(iChannel1, fragCoord.xy/8.).r;\n    float detail = 4.;\n    col += dit/detail;\n    col = floor(col*detail)/detail;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}