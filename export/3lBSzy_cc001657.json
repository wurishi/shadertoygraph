{"ver":"0.1","info":{"id":"3lBSzy","date":"1566232675","viewed":63,"name":"Raytracer testing","username":"vizaxo","description":"Simple raytracer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Converts a color from linear light gamma to sRGB gamma\n// from https://gamedev.stackexchange.com/a/148088\nvec4 fromLinear(vec4 linearRGB)\n{\n    bvec4 cutoff = lessThan(linearRGB, vec4(0.0031308));\n    vec4 higher = vec4(1.055)*pow(linearRGB, vec4(1.0/2.4)) - vec4(0.055);\n    vec4 lower = linearRGB * vec4(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n// Converts a color from sRGB gamma to linear light gamma\nvec4 toLinear(vec4 sRGB)\n{\n    bvec4 cutoff = lessThan(sRGB, vec4(0.04045));\n    vec4 higher = pow((sRGB + vec4(0.055))/vec4(1.055), vec4(2.4));\n    vec4 lower = sRGB/vec4(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n\nstruct material {\n    vec4 color;\n    bool light;\n    float reflectivity;\n};\n    \nconst float tau = 6.28318;\n    \nmaterial blue = material(vec4(.1, .2, .9, 1.), false, .2);\nmaterial mirror = material(vec4(1., 1., 1., 1.), false, 1.);\nmaterial redLight = material(vec4(4., .0, 0., 1.), true, 0.1);\nmaterial ground = material(vec4(.4, .3, .1, 1.), false, 0.0);\n                         \nstruct hit {\n    float dist;\n    material mat;\n    vec3 hitNorm;\n};\n\nconst float epsilon = 0.001;\n\nfloat minNZ(float a, float b) {\n    if (a < 0.)\n        return b;\n    if (b < 0.)\n        return a;\n    return min(a, b);\n}\n\nhit minHit(hit a, hit b) {\n    if (a.dist < 0.)\n        return b;\n    if (b.dist < 0.)\n        return a;\n    if (a.dist < b.dist)\n        return a;\n    else\n        return b;\n}\n\nhit intersectPlane(vec3 rd, vec3 ro, vec3 n, float d, material mat) {\n    float denom = dot(n, rd);\n    if (denom == 0.) return hit(-1., mat, n);\n    float t = -((dot(n, ro) + d) / denom);\n    return hit(t > epsilon ? t : -1., mat, n);   \n}\n\nhit intersectSphere(vec3 rd, vec3 roWorld, vec3 centre, float radius, material mat) {\n    vec3 ro = roWorld - centre;\n    float b = 2. * dot(rd, ro);\n    float c = dot(ro, ro) - (radius * radius);\n    \n    float root = sqrt(b*b - 4.*c);\n    \n    float t1 = (-b + root) / 2.;\n    float t2 = (-b - root) / 2.;\n    float t = minNZ(t1, t2);\n    vec3 hitNorm = normalize(ro + rd*t);\n\treturn hit(t > epsilon ? t : -1., mat, hitNorm);\n}\n\nhit intersect(vec3 rd, vec3 ro) {\n    material whiteLight = material(vec4(vec3((sin(iTime*2.)+1.) * 2. + 0.2), 1.), true, 0.);\n    \n    return minHit(minHit(\n        minHit(minHit(intersectPlane(rd, ro, normalize(vec3(0, 1, 0)), 0., ground),\n               intersectSphere(rd, ro, vec3(3, 1, 10), 3., whiteLight)),\n               intersectSphere(rd, ro, vec3(7.*sin(iTime) + 3., .5, 7.*cos(iTime) + 10.), 2., blue)),\n               intersectSphere(rd, ro, vec3(-10., 4, 10.), 4., redLight)),\n               intersectSphere(rd, ro, vec3(-7.*sin(iTime) + 3., .5, -7.*cos(iTime) + 10.), 2., mirror));\n\n\n}\n\n\nvec3 ray(int n, vec3 ro, vec3 rd) {\n    if (n <= 0)\n        return vec3(0);\n}\n\n//from https://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nfloat getRand( float f ) {\n    const uint mantissaMask = 0x007FFFFFu;\n    const uint one          = 0x3F800000u;\n   \n    uint h = hash( floatBitsToUint( f ) );\n    h &= mantissaMask;\n    h |= one;\n        \n    float  r2 = uintBitsToFloat( h );\n    return r2 - 1.0;\n}\n\n\nvec3 sampleSphere(float seed) {\n    float u1 = getRand(seed);\n    float u2 = getRand(seed+1.);\n    float r = sqrt(1. - u1*u1);\n    float phi = tau * u2;\n    return vec3(cos(phi) * r, sin(phi) * r, 2. * u1);\n}\n\nvec3 sampleHemisphere(vec3 normal, float seed) {\n    vec3 v = sampleSphere(seed*2.);\n    if (dot(normal, v) < 0.)\n        return -v;\n    else\n        return v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - .5) * vec2(1, iResolution.y / iResolution.x);\n\n    vec3 camPos = vec3(0, 3, -10);\n    vec3 lookAt = vec3(0, 2.9, -9);\n\n    \n    vec3 skyCol = vec3(.05, .05, .06);\n    vec3 col = vec3(0.);\n    int maxBounces = 3;\n    int rpp = 500;\n    for(int rays = 0; rays<rpp; rays++) {\n        vec3 filmPos = lookAt + vec3(uv, 0) + 0.005*vec3(getRand(float(rays)));\n    \tvec3 rd = normalize(filmPos - camPos);\n    \tvec3 ro = filmPos;\n\n        vec3 rayCol = vec3(1. / float(rpp));\n        int bounces = 0;\n        for(; bounces<maxBounces; bounces++) {\n            hit h = intersect(rd, ro);\n            if (h.dist > epsilon) {\n                vec3 hitPos = ro + h.dist*rd;\n                vec3 perfectReflect = reflect(rd, h.hitNorm);\n                float seed = getRand(getRand(fragCoord.x * iResolution.x + fragCoord.y) + float(rays)) + float(bounces);\n                vec3 randReflect = sampleHemisphere(h.hitNorm, seed);\n                rd = normalize(mix(randReflect, perfectReflect, h.mat.reflectivity));\n                ro = hitPos;\n                rayCol *= h.mat.color.rgb;\n                if (h.mat.light) {\n                    break;\n                }\n            } else {\n                rayCol *= skyCol;\n                break;\n            }\n        }\n        if (bounces == maxBounces)\n            rayCol = vec3(0);\n    \n        col += rayCol;\n    }\n\n    fragColor = fromLinear(vec4(col,1.0));\n    //fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"}]}