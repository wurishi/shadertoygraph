{"ver":"0.1","info":{"id":"DsdfDr","date":"1697052591","viewed":224,"name":"Simple hue-to-RGB function","username":"ruudhelderman","description":"Function hue2rgb is simple, but not optimized for performance (it uses sin).\n","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["rainbow","hue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple hue-to-RGB function\n// by Ruud Helderman, 2023-10-11 - MIT License\n\nconst float saturation = 1.0;   // lower for gray, higher for discrete color bands\n\nvec3 hue2rgb(float hue)\n{\n    const vec3 offset = vec3(0, 2.0944, 4.1888);    // 2*PI full circle, divided into 3\n    return clamp(saturation * sin(hue + offset) + 0.5, 0.0, 1.0);\n}\n\nvec3 freaky(float y)        // playing with more silly effects...\n{\n    return hue2rgb(y);                                // rainbow\n    //return vec3(1.0 - pow(abs(sin(y * 5.0)), 9.0));   // thin stripes\n    //return vec3(fract(y));                            // gradient stripes\n    //return vec3(1);                                   // none\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float mono = length(texture(iChannel0, uv).rgb);\n    fragColor = vec4(mono * freaky(4.0 * mono - 30.0 * uv.y + iTime), 1);\n}\n","name":"Image","description":"","type":"image"}]}