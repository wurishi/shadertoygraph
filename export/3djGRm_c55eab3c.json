{"ver":"0.1","info":{"id":"3djGRm","date":"1548450246","viewed":912,"name":"Random Glows","username":"KAJAJJJ","description":"Random bokeh/glow circles","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["bokeh","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA_SIZE 0.0015\n\n// Sampling\nint g_seed;\n\nint Hash(int x)\n{\n    x = (x ^ 61) ^ (x >> 16);\n    x = x + (x << 3);\n    x = x ^ (x >> 4);\n    x = x * 0x27d4eb2d;\n    x = x ^ (x >> 15);\n    x = 1103515245 * x + 12345;\n    return x;\n}\n\n// Time\nfloat GetTime()\n{\n\treturn iTime;   \n}\n\nvoid Rand_Init(int seed)\n{\n    g_seed = seed;\n}\n\nfloat Rand_GetFloat01()\n{\n    g_seed = Hash(g_seed);\n    return float(g_seed) * 2.3283064365386963e-10 * 0.5 + 0.5;\n}\n\nfloat Rand_Range(float min, float max)\n{\n    return Rand_GetFloat01() * (max - min) + min;\n}\n\nvec2 Rand_Sample2D()\n{\n    return vec2(Rand_GetFloat01(), Rand_GetFloat01());\n}\n\nvec3 Rand_Sample3D()\n{\n    return vec3(Rand_GetFloat01(), Rand_GetFloat01(), Rand_GetFloat01());\n}\n\nfloat Circle(vec2 point, float radius, float slope, vec2 uv)\n{\n    return smoothstep(radius + slope, radius - slope, length(uv - point));\n}\n\nfloat Rectangle(vec2 point, vec2 size, vec2 uv)\n{\n    return smoothstep(size.x + AA_SIZE, size.x - AA_SIZE, length(uv.x - point.x))\n        * smoothstep(size.y + AA_SIZE, size.y - AA_SIZE, length(uv.y - point.y));\n}\n\nfloat Sin01(float x)\n{\n    return sin(x) * 0.5 + 0.5;\n}\n\nfloat Cos01(float x)\n{\n    return cos(x) * 0.5 + 0.5;\n}\n\nvec3 DrawZero(vec2 point, vec2 uv)\n{\n    vec3 result = vec3(0.0);\n    for (int i = 0; i < 50; ++i)\n    {\n        float start = Rand_GetFloat01();\n        float t = GetTime();\n        float r1 = Rand_GetFloat01();\n        float r2 = Rand_GetFloat01();\n        float r3 = Rand_GetFloat01();\n        float r4 = Rand_GetFloat01();\n        float x = cos(t * r1 + start) * r3;\n        float y = sin(t * r2 + start) * r4;\n        vec3 color = vec3(Sin01(Rand_GetFloat01() * GetTime() + Rand_GetFloat01()), Cos01(Rand_GetFloat01() * GetTime()),Sin01(Rand_GetFloat01() * GetTime())) * Rand_Range(0.25, 0.5);\n        float radius = Rand_GetFloat01() * 0.2 + 0.01;\n        float slope = Rand_Range(0.001, 0.5) * radius;\n        result += max(color * Circle(Rand_Sample2D() * 2.0 - 1.0 + vec2(x, y), radius, slope, uv), 0.0);\n    }\n    \n    for (int i = 0; i < 10; ++i)\n    {\n        float start = Rand_GetFloat01();\n        float t = GetTime();\n        float r1 = Rand_GetFloat01();\n        float r2 = Rand_GetFloat01();\n        float r3 = Rand_GetFloat01() * 1.5;\n        float r4 = Rand_GetFloat01() * 1.5;\n        float x = cos(t * r1 + start) * r3;\n        float y = sin(t * r2 + start) * r4;\n        vec3 color = Rand_Sample3D() * Rand_Range(0.1, 0.25);\n        float radius = 0.3;//Rand_GetFloat01() * 0.2 + 0.01;\n        float slope = Rand_Range(0.001, 0.5);\n        result += max(color * Circle(Rand_Sample2D() * 2.0 - 1.0 + vec2(x, y), radius, slope, uv), 0.0);\n    }\n    \n    for (int i = 0; i < 10; ++i)\n    {\n        float start = Rand_GetFloat01();\n        float t = GetTime();\n        float r1 = Rand_GetFloat01();\n        float r2 = Rand_GetFloat01();\n        float r3 = Rand_GetFloat01() * 1.5;\n        float r4 = Rand_GetFloat01() * 1.5;\n        float x = cos(t * r1 + start) * r3;\n        float y = sin(t * r2 + start) * r4;\n        vec3 color = Rand_Sample3D() * Rand_Range(0.1, 0.25);\n        float radius = 0.7;//Rand_GetFloat01() * 0.2 + 0.01;\n        float slope = Rand_Range(0.001, 0.5);\n        result += max(color * Circle(Rand_Sample2D() * 2.0 - 1.0 + vec2(x, y), radius, slope, uv), 0.0);\n    }\n    \n    return max(result, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Rand_Init(int(32));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = DrawZero(vec2(0.0, 0.0), uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}