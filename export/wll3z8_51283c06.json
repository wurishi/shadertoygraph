{"ver":"0.1","info":{"id":"wll3z8","date":"1555786628","viewed":554,"name":"Phong illumination","username":"munrocket","description":"Phong illumination model + reflection ligth with Schlick's approximation","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["phong","illumination","shading","balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float switcher = step(0., -sin(1.2*cos(iTime)));\n    \n    // Grid parameters\n    vec2 cellcount = vec2(9., 5.);\n    float zoom = 0.83;\n    \n    // Cell coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 cellcoord = fract(uv * cellcount);\n    vec2 cellgrid = floor(uv * cellcount) / cellcount;\n    vec2 ratio = vec2(iResolution.x / cellcount.x / iResolution.y * cellcount.y , 1.0);\n    vec2 xy = (2. * cellcoord - 1.) / zoom * ratio;\n    \n    // Mask and normals\n    float aa_mask = smoothstep(1. + 0.02*cellcount.y, 1., dot(xy, xy));\n    vec3 N = vec3(xy, sqrt(1. - clamp(dot(xy, xy), 0., 1.)));\n    \n    // Light and material paremeters\n    vec3 base_color = vec3(0.12);\n    vec3 L = normalize(vec3(sin(sin(iTime)),cos(sin(iTime)), 0.15));\n    vec3 V = vec3(0.,0.,1.);\n    float r0 = 0.3;\n    \n    // Ambient color\n    vec3 ambient = base_color;\n    \n    // Diffuse light\n    float ldotn = clamp(dot(L, N), 0., 1.);\n    vec3 diffuse = mix(vec3(0.0), 1.0 - base_color, ldotn);\n    \n    // Specular light\n    vec3 Rm = 2.0 * ldotn * N - L;\n    float specular = pow(dot(Rm, V), 30.);\n    \n    // Reflection light with Schlick's approximation\n    float r = r0 + (1.0 - r0) * pow(1. - dot(V, N), 5.0);\n    vec3 reflection = r * texture(iChannel1, reflect(-V, N)).xyz;\n    \n    // Grid variator\n    diffuse *= cellgrid.y;\n    specular *= cellgrid.x;\n    reflection *= cellgrid.x * switcher;\n    \n    // Output color\n    vec3 balls = ambient + diffuse + specular + reflection;\n    vec3 world = texture(iChannel0, normalize(vec3(uv-0.5, 0.9))).xyz * switcher;\n    fragColor = vec4(mix(world, balls, aa_mask), 1.);\n}","name":"Image","description":"","type":"image"}]}