{"ver":"0.1","info":{"id":"clBGDd","date":"1675032296","viewed":176,"name":"flat_curves23","username":"edwardbraed","description":"A collection of some obvious (and not so obvious) flat curves","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["bernoulli","rose","kappa","hypocycloid","epicycloid","epitrochoid","hypotrochoid","cissoid","strophoid","agnesi","eudoxus","gerono"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define cmpv(v, b) (v.x > b.x && v.y > b.y && v.x < (b.x + 1.0) && v.y < (b.y + 1.0))\n#define drw(p, auv, c) max(1.0 - pow(distance(p + c, auv) / 0.004, 3.0), 0.0)\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\n//------------------------------------------------------------\n\n// https://en.wikipedia.org/wiki/Trigonometric_functions\nvec2 sinusoid(float t, vec2 sz)\n{\n    float st = tan(t);\n    return vec2(st, sin(st)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Trigonometric_functions\nvec2 tangenta(float t, vec2 sz)\n{\n    float st = tan(t);\n    return vec2(st, tan(st)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Cissoid_of_Diocles\nvec2 cissoid(float t, vec2 sz)\n{\n    float tt = tan(t);\n    float tt2 = tt * tt;\n    float tt2p = tt2 + 1.0;\n    return vec2(2.0 * sz.x * tt2 / tt2p,\n                2.0 * sz.y * tt * tt * tt / tt2p);\n}\n\n// https://en.wikipedia.org/wiki/Strophoid\nvec2 strophoid(float t, vec2 sz)\n{\n    float tt = tan(t);\n    float tt2 = tt * tt;\n    return vec2(sz.x * ((tt2 - 1.0) / (tt2 + 1.0)),\n                sz.y * tt * ((tt2 - 1.0) / (tt2 + 1.0)));\n}\n\n// https://en.wikipedia.org/wiki/Witch_of_Agnesi\nvec2 agnesi(float t, vec2 sz)\n{\n    return vec2(tan(t), pow(cos(t), 2.0)) * sz * 2.0;\n}\n\n//------------------------------------------------------------\n\n// https://en.wikipedia.org/wiki/Serpentine_curve\nvec2 serpentine(float t, vec2 sz)\n{\n    return vec2(tan(t), sin(t) * cos(t)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Kappa_curve\nvec2 kappa(float t, vec2 sz)\n{\n    return vec2(sin(t), sin(t) * tan(t)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Kampyle_of_Eudoxus\nvec2 eudoxus(float t, vec2 sz)\n{\n    return vec2(1.0 / cos(t), tan(t) * 1.0 / cos(t)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Logarithmic_spiral\nvec2 log_spiral(float t, float e, float k, float a)\n{\n    t = tan(t);\n    float p = pow(e, k * t);\n    return vec2(a * p * sin(t),\n                a * p * cos(t));\n}\n\n// https://en.wikipedia.org/wiki/Archimedean_spiral\nvec2 arch_spiral(float t, float v, float c, float w)\n{\n    t = tan(t);\n    float vtc = v * t + c;\n    return vec2(vtc * cos(w * t),\n                vtc * sin(w * t));\n}\n\n//------------------------------------------------------------\n\n// https://en.wikipedia.org/wiki/Ellipse\nvec2 ellipse(float t, vec2 sz)\n{\n    return vec2(sin(t), cos(t)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Superellipse\nvec2 superellipse(float t, vec2 sz)\n{\n    float n2 = 2.0 / 3.14155;\n    vec2 st = vec2(sin(t), cos(t));\n    return vec2(pow(abs(st[0]), n2) * sign(st[0]), \n                pow(abs(st[1]), n2) * sign(st[1])) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Lemniscate_of_Bernoulli\nvec2 bernoulli(float t, vec2 sz)\n{\n    vec2 st = vec2(sin(t), cos(t));\n    float s2 = st[0] * st[0];\n    return vec2((sz.x * 1.41421 * st[1]) / (1.0 + s2),\n                (sz.y * 1.41421 * st[0] * st[1]) / (1.0 + s2));\n}\n\n// https://en.wikipedia.org/wiki/Lemniscate_of_Gerono\nvec2 gerono(float t, vec2 sz)\n{\n    float ct = cos(t);\n    return vec2(ct, sin(t) * ct) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Lissajous_curve\nvec2 lissajous(float t, vec2 sz, vec2 hz, float o)\n{\n    return vec2(sin(t * hz.x + o),\n                sin(t * hz.y)) * sz;\n}\n\n//------------------------------------------------------------\n\n// https://en.wikipedia.org/wiki/Rose_(mathematics)\nvec2 rose(float t, float r, float k)\n{\n    return vec2(r * cos(k * t) * cos(t),\n                r * cos(k * t) * sin(t));\n}\n\n// https://en.wikipedia.org/wiki/Hypotrochoid\nvec2 hypotrochoid(float t, float r1, float r2, float h)\n{\n    float r = r1 - r2;\n    float m = r / r2;\n    return vec2(r * cos(t) + h * cos(m * t),\n                r * sin(t) + h * sin(m * t));\n}\n\n// https://en.wikipedia.org/wiki/Epitrochoid\nvec2 epitrochoid(float t, float r1, float r2, float h)\n{\n    float m = r2 / r1;\n    float mo = m + 1.0;\n    float mt = m * t;\n    return vec2(r1 * mo * cos(mt) - h * cos(mo * t),\n                r1 * mo * sin(mt) - h * sin(mo * t));\n}\n\n// https://en.wikipedia.org/wiki/Hypocycloid\nvec2 hypocycloid(float t, float r, float k)\n{\n    float ko = k - 1.0;\n    float rk = r * ko;\n    float kt = t * ko;\n    return vec2(rk * (cos(t) + cos(kt) / ko),\n                rk * (sin(t) - sin(kt) / ko));\n}\n\n// https://en.wikipedia.org/wiki/Epicycloid\nvec2 epicycloid(float t, float r, float k)\n{\n    float ko = k + 1.0;\n    float rk = r * ko;\n    float kt = t * ko;\n    return vec2(rk * (cos(t) - cos(kt) / ko),\n                rk * (sin(t) - sin(kt) / ko));\n}\n\n//------------------------------------------------------------\n\n// https://en.wikipedia.org/wiki/Fish_curve\nvec2 fish(float t, vec2 sz)\n{\n    vec2 st = vec2(sin(t), cos(t));\n    return vec2(sz.x * st[1] - (sz.y * st[0] * st[0]) / 1.414213,\n                sz.y * st[0] * st[1]);\n}\n\nvec2 heart(float t, vec2 sz)\n{\n    float ct = cos(t);\n    return vec2(ct, sin(t) + pow(abs(ct), 0.7)) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Bicorn\nvec2 bicorn(float t, vec2 sz)\n{\n    vec2 st = vec2(sin(t), cos(t));\n    return vec2(st[0], \n                pow(st[1], 2.0) * (2.0 + st[1]) / (3.0 + st[0] * st[0])) * sz;\n}\n\n// https://math.stackexchange.com/questions/3375853/parametric-equations-for-a-true-egg-shape\nvec2 egg(float t, vec2 sz, float k, float b)\n{\n    float k2 = k*k;\n    float km4 = k * 4.0;\n    float b2 = b*b;\n    return vec2( 1.0 / (2.0 * sqrt(1.0 + k2)) * \n                ((k2 - 1.0) / k * b + (k2 + 1.0) / k * sqrt(b2 - km4 * cos(t))) - 1.0,\n                 2.0 * sin(t) / (b + sqrt(b2 - km4 * cos(t)))) * sz;\n}\n\n// https://en.wikipedia.org/wiki/Butterfly_curve_(transcendental)\nvec2 butterfly(float t, vec2 sz, float e)\n{\n    vec2 st = vec2(sin(t), cos(t));\n    float c4t = cos(4.0 *t);\n    float r = pow(e, st[0]) - 2.0 * c4t + pow(sin(0.083 * t), 5.0);\n    return vec2(st[1] * r,\n                st[0] * r) * sz;\n}\n\n//------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 a = calcAspect(iResolution.xy);\n    vec2 auv = uv * a;\n    const vec2 cells = vec2(5, 5);\n    vec2 cell = cells * uv;\n    vec2 cc = (floor(cell) + 0.5) / cells * a;\n    \n    float t = iTime * 3.0;\n    vec2 pt = vec2(0.0);\n        \n    if(cmpv(cell, vec2(0.0, 0.0)))\n        pt = sinusoid(t * 0.7, vec2(0.06));\n    else if(cmpv(cell, vec2(1.0, 0.0)))\n        pt = tangenta(t * 0.6, vec2(0.06));\n    else if(cmpv(cell, vec2(2.0, 0.0)))\n        pt = cissoid(t, vec2(0.03));\n    else if(cmpv(cell, vec2(3.0, 0.0)))\n        pt = strophoid(t, vec2(0.03));\n    else if(cmpv(cell, vec2(4.0, 0.0)))\n        pt = agnesi(t, vec2(0.025)) - vec2(0.0, 0.03);\n        \n    else if(cmpv(cell, vec2(0.0, 1.0)))\n        pt = serpentine(t, vec2(0.03, 0.05));\n    else if(cmpv(cell, vec2(1.0, 1.0)))\n        pt = kappa(t, vec2(0.03, 0.04));\n    else if(cmpv(cell, vec2(2.0, 1.0)))\n        pt = eudoxus(t, vec2(0.01, 0.02));\n    else if(cmpv(cell, vec2(3.0, 1.0)))\n        pt = log_spiral(t * 0.5, 0.01, 0.1, 0.01);\n    else if(cmpv(cell, vec2(4.0, 1.0)))\n        pt = arch_spiral(t * 0.2, 0.04, 0.01, 8.0);\n    \n    else if(cmpv(cell, vec2(0.0, 2.0)))\n        pt = ellipse(t, vec2(0.06, 0.03));\n    else if(cmpv(cell, vec2(1.0, 2.0)))\n        pt = superellipse(t * 0.5, vec2(0.04));\n    else if(cmpv(cell, vec2(2.0, 2.0)))\n        pt = bernoulli(t, vec2(0.04));\n    else if(cmpv(cell, vec2(3.0, 2.0)))\n        pt = gerono(t, vec2(0.05));\n    else if(cmpv(cell, vec2(4.0, 2.0)))\n        pt = lissajous(t * 0.5, vec2(0.03), vec2(3.0, 2.0), 0.0);\n        \n    else if(cmpv(cell, vec2(0.0, 3.0)))\n        pt = rose(t * 0.5, 0.04, 3.0);\n    else if(cmpv(cell, vec2(1.0, 3.0)))\n        pt = epitrochoid(t * 3.0, 0.03, 0.0075, 0.003);\n    else if(cmpv(cell, vec2(2.0, 3.0)))\n        pt = hypotrochoid(t * 2.0, 0.006, 0.018, 0.03);\n    else if(cmpv(cell, vec2(3.0, 3.0)))\n        pt = epicycloid(t * 0.7, 0.005, 6.0);\n    else if(cmpv(cell, vec2(4.0, 3.0)))\n        pt = hypocycloid(t * 0.7, 0.005, 7.0);\n        \n    else if(cmpv(cell, vec2(0.0, 4.0)))\n        pt = fish(t, vec2(0.05));\n    else if(cmpv(cell, vec2(1.0, 4.0)))\n        pt = heart(t, vec2(0.04, 0.025));\n    else if(cmpv(cell, vec2(2.0, 4.0)))\n        pt = bicorn(t, vec2(0.06, 0.04)) - vec2(0.0, 0.02);\n    else if(cmpv(cell, vec2(3.0, 4.0)))\n        pt = egg(t, vec2(0.06), 1.0, 2.02);\n    else if(cmpv(cell, vec2(4.0, 4.0)))\n        pt = butterfly(t, vec2(0.01), 0.3);\n        \n    float gc = texelFetch(iChannel1, ivec2(cell.y, cell.x), 0).r;\n    vec3 col = vec3(abs(gc * 6.0 - 3.0) - 1.0, \n                    2.0 - abs(gc * 6.0 - 2.0),\n                    2.0 - abs(gc * 6.0 - 4.0));\n    vec3 r = texture(iChannel0, uv).rgb * 0.95 + col * drw(pt, auv, cc);\n    \n    // draw grid\n    for(float x = 0.0; x < cells.x; x += 1.0)\n        for(float y = 0.0; y < cells.y; y += 1.0)\n            r += (1.0 - smoothstep(0.0, 0.01, abs(cell.x - x)) * smoothstep(0.0, 0.010, abs(cell.y - y))) * 0.005;\n\n    \n    fragColor = vec4(r, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}