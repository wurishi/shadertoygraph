{"ver":"0.1","info":{"id":"7dX3W8","date":"1616794927","viewed":755,"name":"Bliss","username":"cas","description":"tracemontecarlobufferpoawuejrpoa","likes":9,"published":3,"flags":48,"usePreview":0,"tags":["raymarch","raytrace","montecarlo"],"hasliked":0,"parentid":"3tKfDK","parentname":"Disco montecarlo"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//created by Cas Brugman\n\n//move with arrows(left, right, forward, backward), H+J(up and down) and Q+E(rotate left and right).\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0);\n  \n    if(iFrame > 0)\n    {\n        col = texture(iChannel0, uv).xyz;\n        int changedFrame = int(texelFetch(iChannel1, ivec2(BUFF_CHD, 0), 0).x) - 1;\n        col /= float(iFrame - changedFrame) * float(SAMPLES);\n        col = pow(col, vec3(0.4545));\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//created by Cas Brugman\n\nconst float PI = 3.14159;\nconst float MAX_DISTANCE = 200.0;\nconst float COLLISION_DISTANCE = 0.001;\n\nfloat si = 100.0;\nvec2 seed;\n\nfloat rand()\n{\n    return fract(sin(dot(seed.xy * si++, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec3 rotateX(vec3 vec, float angle)\n{\n    mat3 mat;\n    mat[0] = vec3(1, 0, 0);\n    mat[1] = vec3(0, cos(angle), -sin(angle));\n    mat[2] = vec3(0, sin(angle), cos(angle));\n    \n    return vec * mat;\n}\n\nvec3 rotateY(vec3 vec, float angle)\n{\n    mat3 mat;\n    mat[0] = vec3(cos(angle), 0, sin(angle));\n    mat[1] = vec3(0, 1, 0);\n    mat[2] = vec3(-sin(angle), 0, cos(angle));\n    \n    return vec * mat;\n}\n\nvec3 rotateZ(vec3 vec, float angle)\n{\n    mat3 mat;\n    mat[0] = vec3(cos(angle), -sin(angle), 0);\n    mat[1] = vec3(sin(angle), cos(angle), 0);\n    mat[2] = vec3(0, 0, 1);\n    \n    return vec * mat;\n}\n\n//credit to iq for some sd functions\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTurningBox(vec3 p, vec3 b)\n{\n    p = rotateY(p, radians(30.0) * p.y);\n    return sdBox(p,b) / 2.0;\n}\n\nfloat sdSphere(vec3 ro, vec3 pos, float rad)\n{\n    return distance(ro, pos) - rad;\n}\n\nfloat sand(vec3 pos)\n{\n    \n    float big = sin(pos.x * 0.1 + 2.0) * 2.0 + sin(pos.z * 0.1 + 1.0) * 2.0;\n    \n    float sfactor = min(max(0.010 * big, 0.0), 0.1);\n    float afactor = 4.0;\n    float small = sin(pos.x * afactor) * sfactor + sin(pos.z * afactor) * sfactor;\n    \n    float complete = small + big;\n    return sdPlane(pos, vec3(0,1,0), complete) - 3.5;\n}\n\nvec2 map(vec3 pos)\n{\n    float dist = MAX_DISTANCE;\n    float distb;\n    float id = 0.0;\n    \n    distb = sdSphere(pos, vec3(-1.25, 0.5,0), 1.1);\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 1.0;\n    }\n    \n    vec3 post = rotateZ(rotateX(pos - vec3(1.5,.5, 0.0), 0.3), 0.1);\n    distb = sdTurningBox(post, vec3(1,1.5,1));\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 1.0;\n    }\n    \n    distb = sand(pos);\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 0.0;\n    }\n    \n    distb = sdSphere(pos, vec3(.5, 0.5, 6), 1.0);\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 3.0;\n    }\n    \n    //middle\n    distb = sdBox(rotateY(rotateX(rotateZ(pos - vec3(-11.0, 1.0, 1), 0.12), -0.15), 0.2), vec3(1.1));\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 2.0;\n    }\n    \n    //left\n    distb = sdBox(rotateY(rotateZ(pos - vec3(-9.0, 0.0, 9.0), .01), 1.35), vec3(1.1));\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 2.0;\n    }\n    \n    //right\n    distb = sdBox(rotateY(rotateZ(pos - vec3(8.0, 2.0, -8.0), -0.4), .6), vec3(1.1));\n    if(distb < dist)\n    {\n        dist = distb;\n        id = 2.0;\n    }\n   \n    \n    return vec2(dist, id);\n}\n\nvec3 normal(vec3 pos)\n{\n    float epsilon = COLLISION_DISTANCE * 0.1;\n    float dist = map(pos).x;\n    vec3 normal = normalize(vec3(\n        map(vec3(pos.x + epsilon, pos.y, pos.z)).x - dist,\n        map(vec3(pos.x, pos.y + epsilon, pos.z)).x - dist,\n        map(vec3(pos.x, pos.y, pos.z + epsilon)).x - dist));\n       \n    //vec3 normal = normalize(vec3(\n        //map(vec3(pos.x + epsilon, pos.y, pos.z)).x - map(vec3(pos.x - epsilon, pos.y, pos.z)).x,\n        //map(vec3(pos.x, pos.y + epsilon, pos.z)).x - map(vec3(pos.x, pos.y - epsilon, pos.z)).x,\n        //map(vec3(pos.x, pos.y, pos.z + epsilon)).x - map(vec3(pos.x, pos.y, pos.z - epsilon)).x));\n        \n    if (dist < 0.0)\n    {\n        return -normal;\n    }\n    return normal;\n}\n\nvec3 diffuse(vec3 dir, vec3 normal)\n{\n    float theta = (rand() * 2.0 -1.0) * PI / 2.0;\n    float phi = rand() * PI * 2.0;\n    vec3 random = vec3(sin(theta)*cos(phi), cos(theta), sin(theta) * sin(phi));\n\n    vec3 helper = vec3(0,1,0);\n    if(abs(normal.y) > 0.9)\n    {\n        helper = vec3(-1,0,0);\n    }\n\n    vec3 xaxis = normalize(cross(helper, normal));\n    vec3 zaxis = normalize(cross(normal, xaxis));\n    mat3 mat = mat3(xaxis, normal, zaxis);\n\n    return random * inverse(mat);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(iFrame == 0)\n    {\n        return;\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    if (texelFetch(iChannel1, ivec2(BUFF_CHD, 0), 0).y > 0.5)\n    {\n        col = vec3(0);\n    }\n    \n    seed = uv * iTime * 0.01;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 co = texelFetch(iChannel1, ivec2(BUFF_POS, 0), 0).xyz;\n    vec3 angle = texelFetch(iChannel1, ivec2(BUFF_ROT, 0), 0).xyz;\n    vec3 cd = vec3(sin(angle.x), 0, -cos(angle.x));\n    \n    float fov = radians(90.0);\n    \n    vec3 skyLight = 0.1*vec3(0.164, 0.329, 2.619);\n    vec3 sunLight = 20.0*vec3(1.1, 0.6, 0.4);\n    vec3 sunDirection = normalize(vec3(-1.0, 0.0, 0.3));\n    float sunAngle = radians(10.0);\n    float reflectance = 0.8;\n    \n    for(int i = 0; i < SAMPLES; i++)\n    {\n        float weight = 1.0;\n        vec3 light = vec3(0);\n        \n        vec2 r = vec2(rand() * 2.0 - 1.0, rand() * 2.0 - 1.0) / iResolution.xy;\n        vec2 suv = (uv + r) * 2.0 - 1.0;\n        vec2 aspectsuv = vec2(suv.x, suv.y / aspect);\n        vec2 offset = aspectsuv * tan(fov / 2.0);\n\n        vec3 front = (cd);\n        vec3 right = normalize(cross(front, vec3(0,1,0)));\n        vec3 up = cross(right, front);\n\n        vec3 rd = normalize(front + right * offset.x + up * offset.y);\n        float blur = 0.00;\n        //blur = 0.0;\n        vec3 ro = co + up * (rand() * 2.0 - 1.0) * blur + right * (rand() * 2.0 - 1.0) * blur;\n        \n        int maxBounces = 10;\n        for(int bounces = 0; bounces < maxBounces; bounces++)\n        {\n            bool hit = false;\n            float id = 0.0;\n            vec3 pos = ro;\n            int maxSteps = 1000;\n\n            for(int steps = 0; distance(co, pos) < MAX_DISTANCE && steps < maxSteps;steps++)\n            {\n                vec2 map_result = map(pos);\n                float dist = map_result.x;\n                id = map_result.y;\n\n                if(abs(dist) < COLLISION_DISTANCE)\n                {\n                    hit = true;\n                    break;\n                }\n\n                pos += rd * abs(dist);\n            }\n            \n\n            if (hit)\n            {                \n                weight *= reflectance;\n\n                vec3 normal = normal(pos);\n                ro = pos + normal * (COLLISION_DISTANCE * 2.0);\n                \n                if (bounces == 0){\n                    //col = vec3(distance(co, pos) * 0.01);\n                    //break; \n                }\n                               \n                                \n                if(id == 1.0){\n                    if(map(pos).x < 0.0){\n                        normal = -normal;\n                        ro = pos + normal * (COLLISION_DISTANCE * 2.0);\n                    }\n                \n                    if(rand() > .2 && (bounces > 0 || rand() > .9))\n                    {\n\n                        float hue = (pos.x + pos.z + 3.4) * 0.085;\n                        vec3 color = hsv2rgb(vec3(hue, 1.0, 1.0));\n                        color = pow(color, vec3(1.0 / 0.4545));\n                        light = 10.0*color;\n                        break;\n\n                    }\n                    else if(rand() > 0.1)\n                    {\n                        rd = diffuse(rd, normal);\n                    }\n                    else\n                    {\n                        rd = reflect(rd, normal);\n                    }\n                    \n                }\n                else if(id == 2.0){\n                \n                    if(rand() > 0.9)\n                    {\n                        rd = diffuse(rd, normal);\n                    }\n                    else\n                    {\n                        rd = reflect(rd, normal);\n                    }\n                    \n                }\n                else if(id == 3.0){\n                    if(rand() > .5 && map(pos).x > 0.0)\n                    {\n                        rd = reflect(rd, normal);\n                    }\n                    else\n                    {\n                        ro = pos - normal * (COLLISION_DISTANCE * 2.0);\n                        rd = refract(rd, normal, 0.2);\n                    }\n\n                }\n                else \n                {\n                    if(rand() > 0.3)\n                    {\n                        rd = diffuse(rd, normal);\n                    }\n                    else\n                    {\n                        rd = reflect(rd, normal);\n                    }\n                }\n                \n            }\n            else\n            {\n                if(dot(rd, sunDirection) > 1.0 - (1.0 / PI / 2.0) * (sunAngle / 2.0))\n                {\n                    light = sunLight;\n                }\n                else\n                {\n                    light = skyLight;\n                }\n                break;\n            }\n        }\n        \n        col += light * weight;\n        \n    }\n    \n    fragColor.rgb = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//created by Cas Brugman\n\nconst int BUFF_POS = 0;\nconst int BUFF_ROT = 1;\nconst int BUFF_CHD = 2;\nconst int BUFF_RES = 3;\n\nconst int SAMPLES = 1;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//created by Cas Brugman\n\nconst float MOVE_SPEED = 0.1;\nconst float ROT_SPEED = 0.05;\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst int KEY_Q     = 81;\nconst int KEY_E     = 69;\n\nconst int KEY_H     = 72;\nconst int KEY_J     = 74;\n\nbool isKeyPressed(int key)\n{\n    return texelFetch(iChannel1, ivec2(key,0),0).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (int(fragCoord.y) > 0)\n    {\n        return;\n    }\n    \n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n    float changed = 1.0;\n    \n    if(iFrame < 1)\n    {\n        switch(int(fragCoord.x))\n        {\n            case(BUFF_POS):\n                col = vec3(9.7,1.88,13.5);\n                break;\n\n            case(BUFF_ROT):\n                col = normalize(vec3(-.75,0,0.8));\n                break;\n            case(BUFF_RES):\n                col = iResolution;\n                break;\n        }\n    }\n    else\n    {\n        switch(int(fragCoord.x))\n        {\n            case(BUFF_POS):\n                vec3 vec = vec3(0);\n                if(isKeyPressed(KEY_LEFT))\n                {\n                    vec.x = 1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_RIGHT))\n                {\n                    vec.x = -1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_UP))\n                {\n                    vec.z = 1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_DOWN))\n                {\n                    vec.z = -1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_H))\n                {\n                    vec.y = 1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_J))\n                {\n                    vec.y = -1.0;\n                    changed = 0.0;\n                }\n                \n                vec3 angle = texelFetch(iChannel0, ivec2(BUFF_ROT, 0), 0).xyz;\n                vec3 cd = vec3(sin(angle.x), 0, -cos(angle.x));\n                \n                vec3 helper = vec3(0,1,0);\n                vec3 xaxis = normalize(cross(helper, cd));\n                \n                vec3 movement = vec3(0);\n                \n                movement += cd * vec.z;\n                movement += xaxis * vec.x;\n                movement += helper * vec.y;\n                \n                col += movement * MOVE_SPEED;\n                break;\n                \n            case(BUFF_ROT):\n            \n                if(isKeyPressed(KEY_Q))\n                {\n                    col.x -= ROT_SPEED;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_E))\n                {\n                    col.x += ROT_SPEED;\n                    changed = 0.0;\n                }\n                break;\n            case(BUFF_RES):\n                if (col.xy != iResolution.xy){\n                    changed = 0.0;\n                    col = iResolution;\n                }\n                break;\n                \n                \n                \n            case(BUFF_CHD):\n                if (texelFetch(iChannel0, ivec2(BUFF_POS, 0), 0).w < 0.5 ||\n                    texelFetch(iChannel0, ivec2(BUFF_ROT, 0), 0).w < 0.5 ||\n                    texelFetch(iChannel0, ivec2(BUFF_RES, 0), 0).w < 0.5)\n                {\n                    col.x = float(iFrame);\n                    col.y = 1.0;\n                }\n                else\n                {\n                    col.y = 0.0;\n                }\n                break;\n        }\n    }\n    \n    fragColor = vec4(col, changed);\n}","name":"Buffer B","description":"","type":"buffer"}]}