{"ver":"0.1","info":{"id":"lX2yzG","date":"1727401379","viewed":65,"name":"Distorted sdf","username":"franco1234811","description":"Playing around with sdf distortion. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","distortion","colorful","loop","brightness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TRIANGLE_COUNT 15.0f\n#define TWO_PI 6.28318530718\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nmat2 create_rotation_matrix(float angle)\n{\n    float c_a = cos(angle);\n    float s_a = sin(angle);\n    return mat2(\n        vec2(c_a, -s_a),\n        vec2(s_a, c_a));\n}\n\nvec3 sampleColor(float t)\n{\n    return vec3(\n        sin(t * TWO_PI + 0.25f) * 0.5f + 0.5f,\n        sin(t * TWO_PI + 1.5f) * 0.5f + 0.5f,\n        sin(t * TWO_PI + 2.5f) * 0.5f + 0.5f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centered_uv = 2.0f * uv - vec2(1.0f);\n    float aspect_ratio = iResolution.x / iResolution.y;\n    centered_uv.y /= aspect_ratio;\n    \n    // Parameter used to loop the animation\n    float loop_t = 0.5f + 0.5f * abs(sin(iTime) * 0.5f + 0.5f);\n    \n    float triangle_sd = sdEquilateralTriangle(centered_uv, loop_t * 0.55f);\n    \n    // Creates rotation matrix with the signed distance of the centered triangle\n    mat2 rotation = create_rotation_matrix(iTime + 3.0f * triangle_sd);\n    \n    float rotated_triangle = mix(\n        sdEquilateralTriangle(rotation * centered_uv, loop_t * 0.75f), \n        length(centered_uv),\n        abs(sin(iTime) * 0.5f + 0.5f) * 0.5f);\n    \n    // Time changing color t\n    float color_sample_t = iTime * 0.1f + rotated_triangle;\n    \n    // Samples base color\n    vec3 color_a = sampleColor(color_sample_t);\n    \n    // Calculates bright color with brightness\n    float brightness = (1.0f - length(centered_uv)) * 5.0f;\n    vec3 bright_color = color_a * brightness;\n    float t = smoothstep(0.10, 0.15f, fract(rotated_triangle * TRIANGLE_COUNT));\n    // Output to screen\n    fragColor = vec4(mix(bright_color, color_a, t), 1);\n}","name":"Image","description":"","type":"image"}]}