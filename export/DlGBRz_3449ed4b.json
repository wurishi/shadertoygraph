{"ver":"0.1","info":{"id":"DlGBRz","date":"1701758681","viewed":32,"name":"Damped Oscillator for Phys class","username":"Rugged","description":"This is my damped oscillator graph for questiono 3b on the HW. The red line is 0, and the oscillator starts at x=1.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["ode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    vec4 col = vec4(0.);\n    \n    \n   \n    \n    \n    col = texture(iChannel0, uv);\n    \n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//p has structure (x, t, v, 0)\nvec4 advect(vec4 p, float dt){\n    \n    float omega = sqrt(k / m);\n    \n    \n    \n    \n    float xdotdot = -(2. * B * p.z) - (p.x * (k / m));\n    \n    vec4 outV = p;\n    \n    outV.x += p.z * dt;\n    outV.z += xdotdot * dt;\n    outV.y += dt;\n    \n    //outV.x = 0.;\n    \n    return outV;\n    \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 col = vec4(0.);\n    \n    ivec2 fragi = ivec2(fragCoord);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    \n    if(iFrame == 0){\n        \n        if(fragi.x == 0 && fragi.y == 0){\n            \n            //starting at x0, t0, v0, 0\n            col = vec4(1., 0., 0., 0.);\n        }\n        \n    }\n    else{\n        \n        \n        if(fragi.x == 0 && fragi.y == 0){\n        \n        \n            col = texelFetch(iChannel0, fragi, 0);\n            \n            \n            \n            col = advect(col, iTimeDelta * 2.);\n            \n            //col = vec4(0., 10. * iTime, 0., 0.);\n            \n            \n        }\n        \n        \n        \n    }\n    \n    \n    \n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define k 4.\n#define m 8.\n#define B 0.2\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    \n    // load previous positions\n    vec4 col = texture(iChannel1, uv);\n    \n    \n     vec2 uvc = uv - vec2(0., .5);\n    \n    vec2 scale = vec2(100., 20.);\n    \n    \n    \n    \n    \n    \n    ivec2 fragi = ivec2(fragCoord);\n    \n    vec4 p = texelFetch(iChannel0, ivec2(0, 0), 0);\n    \n    p.xy *= scale.xy;\n    \n    \n    \n    \n    \n    vec2 graphP = uvc * iResolution.xy;\n    \n    vec2 gScale = graphP / scale.yx;\n    \n    \n    \n    //add graph lines\n    if(abs(graphP.y) < 1.){\n        \n        //dont draw over already placed points\n        if(length(col) < .1){\n            col = vec4(1., 0., 0., 0.);\n        }\n        \n    }\n    \n    if(abs((graphP.y / scale.x) - 1.) < 1.){\n        //col = vec4(0., 0., 1., 0.);\n    }\n    \n    \n    \n    \n    \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    //if near the point then show it\n    if(distance(graphP, p.yx) < 1.){\n        col = vec4(1.);\n    }\n    \n    \n    //add in new position\n    //col += texture(iChannel0, uv);\n    \n    \n    \n    \n    \n    \n    \n    \n    if(iFrame == 0){\n        col = vec4(0.);\n    }\n    \n    \n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"}]}