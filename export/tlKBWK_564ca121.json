{"ver":"0.1","info":{"id":"tlKBWK","date":"1615100302","viewed":95,"name":"RotateEye","username":"LuminousPath","description":"Eye based on Inigo Quilez's Eye runthrough at https://www.youtube.com/watch?v=emjuqqyq_qc","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float interpolate(in float a0, in float a1, in float w)\n{\n    return (a1 - a0) * w + a0;\n}\n\nvec2 randomGradient(in int ix, in int iy)\n{\n    float random = 1920.0 * sin(float(ix) * 21942.0 + float(iy) * 1324.0 + 1912.0) * cos(float(ix) * 2157.0 * float(iy) * 27832.0 + 9758.0); \n    vec2 returnvalue = vec2(0.0, 0.0);\n    returnvalue.x = cos(random);\n    returnvalue.y = sin(random);\n    return returnvalue;\n}\n\nfloat dotGridGradient(in int ix, in int iy, in float x, in float y)\n{\n    vec2 gradient = randomGradient(ix, iy);\n    \n    float dx = x - float(ix);\n    float dy = y - float(iy);\n    \n    return (dx*gradient.x + dy*gradient.y);\n}\n\nfloat perlin( in vec2 incoord)\n{\n    vec2 p1 = floor(incoord);\n    vec2 p2 = fract(incoord);\n    int x0 = int(p1.x);\n    int x1 = x0 + 1;\n    int y0 = int(p1.y);\n    int y1 = y0 + 1;\n\n    float n0 = dotGridGradient(x0, y0, incoord.x, incoord.y);\n    float n1 = dotGridGradient(x1, y0, incoord.x, incoord.y);\n    float ix0 = interpolate(n0, n1, p2.x);\n    \n    float n2 = dotGridGradient(x0, y1, incoord.x, incoord.y);\n    float n3 = dotGridGradient(x1, y1, incoord.x, incoord.y);\n    float ix1 = interpolate(n2, n3, p2.x);\n    \n    float value = interpolate(ix0, ix1, p2.y);\n    return value;\n}\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*perlin(p);p *= 2.02;\n    f += 0.2500*perlin(p);p *= 2.03;\n    f += 0.1250*perlin(p);p *= 2.01;\n    f += 0.0625*perlin(p);p *= 2.04;\n    f /= 0.9375;\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    \n    float r = sqrt( dot(p,p) );\n    float a = atan( p.y, p.x );\n    \n    vec3 col = vec3( 1.0 );\n    \n    if( r<0.8)\n    {\n        col = vec3(0.2, 0.3, 0.4);\n        \n        float f = fbm(10.0*p);\n        col = mix (col, vec3(0.2, 0.5, 0.4), f );\n\n        f = 1.0 - smoothstep(0.2, 0.4, r);\n        col = mix(col , vec3(0.9, 0.6, 0.2), f);\n        \n        a += cos(iTime);\n        a += fbm(2.0*cos(iTime)*p);\n        \n        f = smoothstep( -0.3, 0.5, fbm( vec2(5.0*r, 10.0*a) ) );\n        col = mix( col, vec3(1.0), f);\n        \n        f = smoothstep(-0.3, 1.0, fbm(vec2(9.0*r, 10.0*a)) );\n        col *= (1.0 - f);\n        \n        f = smoothstep(0.6, 0.8, r);\n        col *= 1.0 - 0.5*f;\n        \n        f = smoothstep(0.2, 0.24, r);\n        col *= f;\n        \n        f = 1.0 - smoothstep( 0.0, 0.3, length(p - vec2(0.1, 0.1) ) );\n        col += vec3(f);\n        \n        f = smoothstep(0.75, 0.8, r);\n        col = mix(col, vec3(1.0), f);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}