{"ver":"0.1","info":{"id":"Nd33Rn","date":"1628943579","viewed":76,"name":"Prison Break ","username":"omegasbk","description":"Having fun with SDF","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n// 14.8.2021.\n\n#define MAX_STEPS 100\n#define MAX_DIST 5.\n#define SURF_DIST .005\n\n#define PI 3.14159265359\n\nconst vec3 lightPosition = vec3(0, 3, 4);\nconst vec3 lightColor    = vec3(0.2, 0.2, 0.2) * 2.;\n\nfloat add(float d1, float d2) \n{ \n    return min(d1,d2); \n}\n\nvec3 repeat(in vec3 p, in float s)\n{\n    return mod(p + s*0.5,s)-s*0.5;\n}\n\nfloat smoothUnion(float d1, float d2, float k) \n{\n    float h = clamp(0.5 + 0.5 * (d2-d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0  -h); \n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    vec3 texCol = texture(iChannel1, p.xy + p.xz + p.yz).rgb;\n    q += texCol/ 23.;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat getDist(in vec3 p)\n{\n    vec3 q = p + vec3(0.8, 0., 0.);\n    vec3 r = repeat(q, 1.3);\n    float boxRoot = box(r, vec3(0.2, 0.2, 0.2));\n    \n    q = p + vec3(0.15, 0., 0.);\n    r = repeat(q, 1.3);\n    float connection = box(r, vec3(0.45, 0.05, 0.05));\n\n    q = p + vec3(0.8, 0.65, 0.);\n    r = repeat(q, 1.3);\n    float connection2 = box(r, vec3(0.05, 0.45, 0.05));\n    \n    connection = add(connection, connection2);\n    \n \n    return smoothUnion(boxRoot, connection, 0.1);\n}\n\nvec3 getNormal(in vec3 p) \n{\n    int body;\n    float d = getDist(p);\n    \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy), \n        getDist(p - e.yxy), \n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        \n        if (dO > MAX_DIST || dS < SURF_DIST) \n            break;\n    }\n    \n    return dO;\n}\n\nvec3 getLight(in vec3 p, in vec3 rd)\n{    \n\tvec3 normal = getNormal(p);\n    vec3 lightDir = normalize(p - lightPosition);\n    \n    float cosa = pow(0.5+0.5*dot(normal, -lightDir), 3.0);\n    float cosr = max(dot(-rd, reflect(lightDir, normal)), 0.0);\n    \n    vec3 ambiant = vec3(0.42);\n    vec3 diffuse = vec3(0.8 * cosa);\n    vec3 phong = vec3(0.5 * pow(cosr, 16.0));\n    \n    return lightColor * (ambiant + diffuse + phong);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(-.15 + sin(iTime * 2.3) / 11., 1.9 + sin(iTime * 2.) / 10., iTime);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 0.8));\n        \n    float d = rayMarch(ro, rd);\n    if (d < MAX_DIST)\n    {\n        vec3 p = ro + rd * d;   \n        \n        vec3 n = getNormal(p);\n        col = vec3(getLight(p, rd)) / exp(exp(d) / 8.); \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}