{"ver":"0.1","info":{"id":"MtjfRd","date":"1516911250","viewed":2012,"name":"Radial Blur 2k18","username":"PrzemyslawZaworski","description":"Full procedural shader.\n","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","fbm","blur","fake","lighting","radial","art","cartography"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Just combination of two shaders:\n//https://www.shadertoy.com/view/4sfGRn by Inigo Quilez\n//https://www.shadertoy.com/view/ld2fRt by Przemyslaw Zaworski\n\n#define factor 74\n\nfloat hash (vec3 n) \n{ \n\treturn fract(sin(dot(n, vec3(95.43583, 93.323197, 94.993431))) * 65536.32);\n}\n\nfloat noise (vec3 n)\n{\n    vec3 base = floor(n * 64.0) * 0.015625;\n    vec3 dd = vec3(0.015625, 0.0, 0.0);\n    float a = hash(base);\n    float b = hash(base + dd.xyy);\n    float c = hash(base + dd.yxy);\n    float d = hash(base + dd.xxy);\n    vec3 p = (n - base) * 64.0;\n    float t = mix(a, b, p.x);\n    float tt = mix(c, d, p.x);\n    return mix(t, tt, p.y);\n}\n\nfloat fbm(vec3 n)\n{\n    float total = 0.0;\n    float m1 = 1.0;\n    float m2 = 0.1;\n    for (int i = 0; i < 5; i++)\n    {\n        total += noise(n * m1) * m2;\n        m2 *= 2.0;\n        m1 *= 0.5;\n    }\n    return total;\n}\n\nfloat heightmap (vec3 n)\n{\n\treturn fbm((5.0 * n) + fbm((5.0 * n) * 3.0 - 1000.0) * 0.05);\n}\n\nvec3 surface(vec2 uv)\n{\n   \tfloat color = clamp(heightmap(vec3(uv.xy*5.0,2.0)*0.02)-1.0,0.0,1.0);\n    if (color<0.1) return vec3(0.35,0.40,0.44);\n    else if (color<0.2) return vec3(0.29,0.32,0.35);\n    else if (color<0.3) return vec3(0.20,0.21,0.22);\n    else if (color<0.55) return vec3(0.09,0.11,0.09);\n    else if (color<0.65) return vec3(0.18,0.19,0.14);\n    else if (color<0.75) return vec3(0.52,0.52,0.33);\n    else if (color<0.85) return vec3(0.45,0.37,0.27);\n    else if (color<0.95) return vec3(0.34,0.25,0.17);     \n    else if (color<0.99) return vec3(0.59,0.34,0.29);        \n\telse return vec3(0.14,0.09,0.08); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3  col = vec3(0.0,0.0,0.0);\n    vec2  d = (vec2(0.0,0.0)-p)/float(factor);\n    float w = 1.0;\n    vec2  s = p;\n    for( int i=0; i<factor; i++ )\n    {\n        vec3 res = surface(vec2(s.x+iTime,s.y)+sin(iTime));\n        col += w*smoothstep( 0.0, 1.0, res );\n        w *= .985;\n        s += d;\n    }\n    col = col * 4.5 / float(factor);\n\tfragColor = vec4( col,1.0 );\n}","name":"Image","description":"","type":"image"}]}