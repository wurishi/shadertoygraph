{"ver":"0.1","info":{"id":"DdXGWS","date":"1670596676","viewed":60,"name":"Projekti2","username":"ahvetuo","description":"Sehän olisi sitä projektia siinä.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["projekti"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool vanha = false;\n\n// 0 = ympyrä, 1 = taustalevy\nint hitID;\nvec3 normal;\n\n// (Ex 8.) Yksittäinen SDF\nfloat SDF_scene(vec3 p) {\n    // Ympyrä\n    float closestHit = length(p - vec3(0.0,2.0,0.0)) - 1.0;\n    hitID = 0;\n    \n    // Taustalevy\n    if(abs(p.y - 1.0) < closestHit) {\n        closestHit = abs(p.y - 1.0);\n        hitID = 1;\n    }\n    \n    // Palautetaan se, joka on lähempänä\n    return closestHit;\n}\n\n// (Ex 8.) Esimerkkikoodia tehtävänannosta\nvec3 calculateNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n                          SDF_scene(p + e.xyy) - SDF_scene(p - e.xyy),\n                          SDF_scene(p + e.yxy) - SDF_scene(p - e.yxy),\n                          SDF_scene(p + e.yyx) - SDF_scene(p - e.yyx)\n    ));                   \n}\n\n// (Ex 8.) Saa säteen lähteen sekä suunnan, palauttaa etäisyyden\nfloat rayMarching(vec3 rayOrigin, vec3 rayDirection) {\n    // (Ex 7.) Muunnetaan tehtävänannon pseudokoodi todelliseksi\n    float t = 0.0;\n    for (int i = 0; i < 500; i++) {\n        \n        // Piirretään ympyrää\n        vec3 p = rayOrigin + t * rayDirection;\n        \n        float d = SDF_scene(p);\n        if (d < 0.001) {\n            normal = calculateNormal(p);\n            return t;\n        }    \n        \n\n        t = t + d;\n    }\n    \n    // Ei osuta minnekään\n    return -1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Bonus: Kameraohjaus\n    float an = iMouse.x / iResolution.x;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Musta on uusi musta\n    vec3 col = vec3(0,0,0);\n    \n    // (Ex 7.) Kokeilukoodia tehtävänannosta\n    float aspect_ratio = iResolution.x / iResolution.y;\n    vec3 raydir = vec3(uv * 2.f - 1.f + an, -1.0);\n    raydir.x *= aspect_ratio;\n    raydir = normalize(raydir);\n    \n    // Säädetään selkeä muuttuja origolle\n    vec3 origo = vec3(0,2,2);\n    float dist = rayMarching(origo, raydir);\n    vec3 osumakohta = origo + dist*raydir;\n    \n    // Tähän väliin värejä valon suuntaa\n    vec3 lightdir = vec3(3,1,1);\n    lightdir = normalize(lightdir);\n    if(hitID == 0) {\n        col = vec3(0.2,0.5,0.3)*max(dot(normal,lightdir),0.0);\n    }\n    \n    if(hitID == 1) {\n        col = vec3(0.3,0.1,0.9)*max(dot(normal,lightdir),0.0);\n    }\n    \n    // Laskelmoidaan varjolle valaistusta, samalla metodilla\n    dist = rayMarching(osumakohta+normal*0.01, lightdir);\n    if (dist > 0.0) {\n        // Varjoa\n        col = col*0.5;\n    }\n    \n    \n    // Lopuksi värit näytölle\n    float gamma = 2.2;\n    col = pow(col, vec3(1.0/gamma));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}