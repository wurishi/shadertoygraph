{"ver":"0.1","info":{"id":"MtGGDK","date":"1476788044","viewed":263,"name":"Liquid Symmetry","username":"guarajeno","description":"Playing with rgb channels.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","rgb","liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 20.0\n#define time iTime * 0.7\n\nfloat hash( vec2 p)\n{\n    vec3 p2 = vec3(p.xy, 2.0);\n    return fract(sin(dot(p2, vec3(27.1, 20.7, 2.4))) * 0.5453123);\n}\n\nfloat noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    f *= f * (3.0 - 2.0 * f);\n    \n    return mix(mix(hash(i + vec2(0., 0.)), hash(i + vec2(1., 0.)), f.x),\n               mix(hash(i + vec2(0., 1.)), hash(i + vec2(1., 1.)), f.x),\n               f.y);\n}\n\nfloat random(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat range(float a, float b, float n)\n{\n    return a + (b - a) * random(n);\n}\n\nfloat lux(vec2 uv, float x, float y)\n{\n    float val = 0.011 / distance(uv, vec2(x, y));\n    return pow(val, 1.0);\n}\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec4 color;\n    \n    for (float i = 0.0; i < N; i += 1.0)\n    {\n        float x = 2.0 * noise(vec2(range(0.9, 2.2, i + 0.1), time * range(0.9, 2.2, i + 0.2))) - 1.0;\n        float y = 2.0 * noise(vec2(range(0.9, 2.2, i + 0.3), time * range(0.9, 2.2, i + 0.4))) - 1.0;\n        \n        x *= 0.8;\n        y *= 0.8;\n        \n    \tcolor.r += lux(uv, -x, y);\n        color.b += lux(uv, x, -y);\n        color.g += lux(uv, x, y);\n    }\n    \n    color = step(0.55, color);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}