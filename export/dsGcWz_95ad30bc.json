{"ver":"0.1","info":{"id":"dsGcWz","date":"1695981820","viewed":51,"name":"Synthwave mode 7","username":"Yxuer","description":"This began with me trying to recreate the mode 7 perspective effect of the SNES, but I ended up delving into synthwave territory.\n\nJust plug in your favourite synthwave tune, and enjoy the  𝚊 𝚎 𝚜 𝚝 𝚑 𝚎 𝚝 𝚒 𝚌\n\nRotation is still WIP","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["perspective","snes","synthwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4s33RS","filepath":"https://soundcloud.com/synthwave80s/01-vice-point?in=synthwave80s/sets/dreams","previewfilepath":"https://soundcloud.com/synthwave80s/01-vice-point?in=synthwave80s/sets/dreams","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float get_scaling_factor(float y, float horizon) {\n    return 1.0 / (horizon - y);\n}\n\nvec2 rotate(vec2 v, float a, vec2 around) {\n    v -= around;\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn around + (m * v);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float horizon = 0.1;\n\n    // Above half screen, paint blue\n    vec3 finalColor = vec3(0.1, 0.1, 0.1);\n    \n    // Below, perspective\n    if (uv.y < horizon) {\n        float sf = get_scaling_factor(uv.y, horizon);\n        vec2 new_uv = uv * sf;\n        new_uv.y *= 10.0;\n        new_uv.y += iTime * 2.0;\n        new_uv.x += cos(iTime) * 1.0;\n        new_uv = rotate(new_uv, sin(iTime) * 0.1, vec2(cos(iTime) * 1.0, iTime * 2.0));\n        new_uv = abs(mod(new_uv, 1.0) - 0.5) * 2.0;\n        new_uv = 1.0/new_uv/100.0;\n        \n        // Compute color\n        float colorFactor = textureLod(iChannel0, vec2(new_uv.y,0.75), 0.0 ).x;\n        float cf = max(new_uv.x, new_uv.y);\n        vec3 baseColor = vec3(0.8, 0.0, 0.8);\n        finalColor = mix(cf * baseColor, cf * vec3(0.0, 0.0, 0.8), colorFactor) * 8.0;\n    }\n    else {\n        float deformFactor = 1.0 / textureLod(iChannel0, vec2(uv.y / 10.0 + 0.01,0.25), 0.0 ).x;\n        deformFactor = smoothstep(0.0, 1.4, deformFactor);\n        uv.x *= deformFactor;\n        float centerDist = length(uv - vec2(0.0, 0.1));\n        float circle = 1.0 - smoothstep(0.60, 0.61, centerDist);\n        float noSun = step(-0.5, sin(pow(uv.y, 1.5) * 100.0 + iTime * 3.0));\n        circle *= noSun;\n        vec3 sunColor = mix(vec3(0.8, 0.8, 0.0), vec3(0.8, 0.2, 0.0), 1.0 - map(uv.y, -0.2, 0.46, 0.0, 1.0));\n        finalColor = (circle * sunColor) + ((1.0 - circle) * vec3(0.2, 0.0, 0.7 * (1.0 - uv.y)));\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}