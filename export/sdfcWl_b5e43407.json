{"ver":"0.1","info":{"id":"sdfcWl","date":"1642888258","viewed":105,"name":"[Template] Scene w/ AA and MB","username":"Hatchling","description":"Template for creating a scene with spatial and temporal super sampling","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["motionblur","template","aa"],"hasliked":0,"parentid":"st3SW4","parentname":"[SIG15] sig-n-sine, impr. mblur"},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec3 scene(float time, vec2 uv)\n{\n    uv = uv * 2.0 - 1.0;\n    \n   // uv = atanh(uv);\n\n    vec2 olduv = uv;\n    uv.x += sin(olduv.y * 2. + time* 20.) * 0.5;\n    uv.y -= sin(olduv.x * 2. + time* 16.1) * 0.2;\n    olduv = uv;\n    uv.x += sin(olduv.y * 2. + time* 16.1) * 0.2;\n    uv.y -= sin(olduv.x * 2. + time* 20.) * 0.5;\n    \n   // uv = tanh(uv);\n    \n    uv = uv * 0.5 + 0.5;\n    \n    vec3 c = texture(iChannel0, uv).rgb;\n    \n    // Fake an HDR texture.\n    c = pow(c, vec3(4)) * 6.;\n    \n    return pow(c, vec3(2.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // For aspect corrected UV's use the following calculation: \n    /*\n    float s = min(iResolution.x, iResolution.y);\n   \tvec2 uv = (2.*fragCoord.xy - vec2(iResolution.xy)) / s;\n    */\n    \n    // For UVs sampling from textures use the following calculation:\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    mat2 jitter;\n    jitter[0] = dFdx(uv);\n    jitter[1] = dFdy(uv);\n    \n    vec2 blueNoiseUV = fragCoord.xy / iChannelResolution[1].xy;\n    \n    float blueNoise = texture(iChannel1, blueNoiseUV).r / 9.;\n    \n\n    //aa and motion blur\n    float t = iTime + blueNoise*iTimeDelta;\n    vec3 c \n        = scene(t,                    uv)\n        + scene(t-iTimeDelta*(1./9.), uv+jitter*vec2( 0.66,  0.00  ))\n        + scene(t-iTimeDelta*(2./9.), uv+jitter*vec2(-0.66,  0.00  ))\n        + scene(t-iTimeDelta*(3./9.), uv+jitter*vec2( 0.00,  0.66))\n        + scene(t-iTimeDelta*(4./9.), uv+jitter*vec2( 0.00, -0.66))\n        + scene(t-iTimeDelta*(5./9.), uv+jitter*vec2( 0.50,  0.50))\n        + scene(t-iTimeDelta*(6./9.), uv+jitter*vec2(-0.50,  0.50))\n        + scene(t-iTimeDelta*(7./9.), uv+jitter*vec2(-0.50, -0.50))\n        + scene(t-iTimeDelta*(8./9.), uv+jitter*vec2( 0.50, -0.50));\n        \n    c /= 9.;\n    \n    fragColor = vec4(pow(c, vec3(1.0/2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}