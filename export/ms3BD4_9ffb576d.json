{"ver":"0.1","info":{"id":"ms3BD4","date":"1697149171","viewed":89,"name":"Margarita","username":"snolot","description":"just for fun!\n\nmany parts borrowed from leon ;)","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// global variable\nfloat material;\nfloat rng;\n\nfloat map( vec3 p) {\n\n\n    // time\n    float t = iTime*0.5;// + rng*0.1;\n    \n    vec3 angle = vec3(.1,-.5,.1)+(t-length(p)*0.5);\n    \n    float size = sin(rng*3.14);\n    \n    // kif\n    const int count = 6;\n    float a = 1.0;\n    float scene = 1000.;\n    float shape = 1000.;\n    \n    for (int index = 0; index < count; ++index)\n    {\n        p.xz = abs(p.xz)-1.*a;\n        \n        // rotate\n        p.xz *= rot(angle.y/a);\n        p.yz *= rot(angle.x/a);\n        p.yx *= rot(angle.z/a);\n        \n        // sphere\n        shape = length(p)-0.48*a;\n        \n        // material blending\n        material = mix(material, float(index), smoothing(shape, scene, 0.3*a));\n        \n        // add\n        scene = smin(scene, shape, 1.6*a);\n        \n        // falloff\n        a /= 1.9;\n    }\n    \n    return scene;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0,0,0,1);\n    material = 0.0;\n    \n    // camera coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 eye = vec3(0,0,-4.);\n    vec3 at = vec3(0,0,0);\n    vec3 z = normalize(at-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 ray = normalize(vec3(z * 1. + uv.x * x + uv.y * y));\n    vec3 pos = eye + ray;\n    \n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    rng = 1.;// -  hash13(seed) * .31;\n    \n    \n    const int steps = 20;\n    \n    for (int index = steps; index > 0; --index)\n    {\n        float dist = map(pos);\n        \n        if (dist < 0.001) {\n            float shade = float(index)/float(steps);\n            \n            // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n            vec2 off=vec2(.001,0);\n            vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n            \n            // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)\n            vec3 tint = vec3(.5)+vec3(.5)*cos(vec3(.1,2,3)+material*.5+length(pos)*1.);\n            \n            // lighting\n            float ld = dot(reflect(ray, normal), vec3(0,1,0))*0.5+0.5;\n            vec3 light = vec3(1.000,1.000,1.000) * pow(ld, 2.);\n            ld = dot(reflect(ray, normal), vec3(0,0,-1))*0.5+0.5;\n            light += vec3(0.789,0.649,0.559);// * pow(ld, 0.95);\n            \n            // pixel color\n            fragColor.rgb = tint *  (light) * pow(shade, 1.);\n            \n            break;\n        }\n        \n        dist *= 0.7 + .1 * rng;\n        // raymarch\n        pos += ray * dist;\n    }\n    \n    fragColor = max(fragColor, texture(iChannel0, gl_FragCoord.xy/iResolution.xy) - 0.01);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat smoothing(float d1, float d2, float k) { return clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 ); }\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n#define repeat(p,r) (mod(p,r)-r/2.)","name":"Common","description":"","type":"common"}]}