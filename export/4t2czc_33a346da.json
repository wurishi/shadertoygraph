{"ver":"0.1","info":{"id":"4t2czc","date":"1509654330","viewed":103,"name":"dist","username":"Donald","description":"Colours points based on the distance from different objects.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mess"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n    float lensq(vec2 r){return dot(r,r);}\n\n/*float perpdist(float d1, float d2, float b){\n    float d3=(d2-d1-1.)/2.;\n \td3=d3*d3;\n return d1-d3;}*/\nfloat perpdist(vec2 p1, vec2 p2, vec2 px){\n vec2 k=p2-p1;\n k=k.yx;\n k.x=-k.x;\n k=normalize(k);\n return dot(k,px-p1);\n    \n}\n\n\nstruct Point {\n  vec2 position;\n};\n float dist(Point c, vec2 pixelCoords)\n{\n  return distance(c.position,pixelCoords);\n    \n}\n struct Circle {\n  vec2 p;\n  float r;\n};\n float dist(Circle c, vec2 pixelCoords)\n{\n  return distance(c.p,pixelCoords)-c.r;\n}\nstruct Line {\n  vec2 p1;\n  vec2 p2;\n  vec2 k;\n  vec2 r;\n  float l;\n};\n    Line new_line(  vec2 p1, vec2 p2){\n    \n    \n     vec2 k=p2-p1;\n     float l=sqrt(dot(k,k));\n     k=k/l;\n     vec2 r=k.yx;\n   \t r.y=-r.y;    \n     return Line(p1,p2,k,r,l);}\n\n//float dist(Line c, vec2 px)\n//{\t\n//    if (dot(c.k,px-c.p1)<0.){return distance(c.p1,px);}\n//   if (dot(c.k,px-c.p2)>0.){return distance(c.p2,px);}\n//  float ldist=abs(dot(c.r,px-c.p1));\n//  return ldist;\n // }\nfloat dist(Line c, vec2 px)\n    \n{\t\n    float lsq=c.l*c.l;\n    float d1=lensq(c.p1-px)/lsq;\n    float d2=lensq(c.p2-px)/lsq;\n    if (abs(d1-d2)>=1.){return sqrt(min(d1,d2))*c.l;}\n \t//d1-d2==1-2*dist along line/c.l\n \tfloat d3=(d2-d1-1.)/2.;\n \td3=d3*d3;\n return sqrt(d1-d3)*c.l;}\n\nstruct Tri {\n  /*Line l1;\n  Line l2;\n  Line l3;*/\n  vec2 p1;\n  vec2 p2;\n  vec2 p3;\n    \n};\n/* Tri new_tri(  vec2 p1, vec2 p2, vec2 p3){\n     return Tri(new_line(p1,p2),new_line(p2,p3),new_line(p3,p1));\n}\n/*float dist(Tri c, vec2 px)\n{\t\n    \n  vec3 d=vec3(dot(c.l1.r,px-c.l1.p1),dot(c.l2.r,px-c.l2.p1),dot(c.l3.r,px-c.l3.p1));\n    float m=max(max(d.x,d.y),d.z);\n    if (m<0.){return m;}\n\tint count=0;\n    \n    for (int i=0;i<3;i++){if(d[i]>0.){count++;}}\n    if (count<2){return m;}\n  vec2 p;\n         if(d.x<0.){p=c.l3.p1;}\n    else if(d.y<0.){p=c.l1.p1;}\n    else if(d.z<0.){p=c.l2.p1;}\n  return distance(px,p);\n  //  if (dot(c.k,px-c.p1)<0.){return distance(c.p1,px);}\n  // if (dot(c.k,px-c.p2)>0.){return distance(c.p2,px);}\n  //float ldist=abs(dot(c.r,px-c.p1));\n  //return ldist;\n  }*/\n\n\nfloat dist(Tri c, vec2 px){\n    \n    //float lsq=c.l*c.l;\n    float d1=lensq(c.p1-px);\n    float d2=lensq(c.p2-px);\n    float d3=lensq(c.p3-px);\n    vec3 d=vec3(d1,d2,d3);\n    vec3 l=vec3(lensq(c.p2-c.p3),lensq(c.p3-c.p1),lensq(c.p1-c.p2));\n    vec3 e=d-l.zxy;\n    vec3 f=d-l.yzx;\n    //if(d.x<min(f.y,e.z)){return sqrt(d.x);}\n    for (int i=0;i<3;i++){if(d[i]<min(f[(i+1)%3],e[(i+2)%3])){return sqrt(d[i]);}}\n    if (perpdist(c.p1,c.p2,c.p3)<0.){\n    \treturn max(max(perpdist(c.p1,c.p2,px),perpdist(c.p2,c.p3,px)),perpdist(c.p3,c.p1,px));\n    }else{\n    return -min(min(perpdist(c.p1,c.p2,px),perpdist(c.p2,c.p3,px)),perpdist(c.p3,c.p1,px));}\n    return d1;\n}\n/*    if (abs(d1-d2)>=1.){return sqrt(min(d1,d2))*c.l;}\n \t//d1-d2==1-2*dist along line/c.l\n \tfloat d3=(d2-d1-1.)/2.;\n \td3=d3*d3;\n return sqrt(d1-d3)*c.l;}*/\n\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    vec2 mou=iMouse.xy/iResolution.x;\n\tCircle c1 = Circle(mou,0.1); \n    Line l1 = new_line(vec2(0.5,0.05),vec2(0.85,0.45));\n   //Line l2 = new_line(vec2(0.6,0.1),vec2(0.4,0.5));\n    Tri t1 = Tri(vec2(0.3,0.1),vec2(0.7,0.1),vec2(0.5,0.5));\n    float dt1=dist(t1,uv);//min(dist(l1,uv),dist(t1,uv));\n    float dc1=dist(c1,uv);\n    float dl1=dist(l1,uv);\n    \n    float d=min(min(dc1,dt1),dl1);\n    float b=smoothstep(-.3,.3,sin(d*500.));\n    \n    fragColor = vec4(b*.1+d+0.2);  \n    if (d>0.){fragColor.b-=.2;}\n    //if (abs(dc1-dt1)<0.001){fragColor=vec4(0.,1.,1.,1.);}\n  \n}\n","name":"Image","description":"","type":"image"}]}