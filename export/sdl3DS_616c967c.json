{"ver":"0.1","info":{"id":"sdl3DS","date":"1616580326","viewed":110,"name":"61 sdf test","username":"small61","description":"sdf test\nuse mouse to control a sdf ball","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI \t\t\t\t3.14159265359\n#define EPSILON         .0001\n#define uVelocityBox    .5\n#define uVelocitySphere .2\n#define uProgress       1.\n#define uDistance       4.\n#define uAngle          1.5\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a,float b,float k)\n{\n    float h=clamp(.5+.5*(b-a)/k,0.,1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\nvec3 background(vec2 uv){\n    float dist=length(uv-vec2(.5));\n    vec3 bg=mix(vec3(.3),vec3(.0),dist);\n    return bg;\n}\n\n\n// https://gist.github.com/yiwenl/3f804e80d0930e34a0b33359259b556c\nmat4 rotationMatrix(vec3 axis,float angle){\n    axis=normalize(axis);\n    float s=sin(angle);\n    float c=cos(angle);\n    float oc=1.-c;\n    \n    return mat4(oc*axis.x*axis.x+c,oc*axis.x*axis.y-axis.z*s,oc*axis.z*axis.x+axis.y*s,0.,\n        oc*axis.x*axis.y+axis.z*s,oc*axis.y*axis.y+c,oc*axis.y*axis.z-axis.x*s,0.,\n        oc*axis.z*axis.x-axis.y*s,oc*axis.y*axis.z+axis.x*s,oc*axis.z*axis.z+c,0.,\n    0.,0.,0.,1.);\n}\n\nvec3 rotate(vec3 v,vec3 axis,float angle){\n    mat4 m=rotationMatrix(axis,angle);\n    return(m*vec4(v,1.)).xyz;\n}\n\nfloat sdSphere(vec3 p,float r)\n{\n    return length(p)-r;\n}\n\n\nfloat sdBox(vec3 p,vec3 b)\n{\n    vec3 q=abs(p)-b;\n    return length(max(q,0.))+min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat movingSphere(vec3 p,float shape){\n    float rad=uAngle*PI;\n    vec3 pos=vec3(cos(rad),sin(rad),0.)*uDistance;\n    vec3 displacement=pos*fract(iTime*uVelocitySphere);\n    float gotoCenter=sdSphere(p-displacement,.15);\n    return smin(shape,gotoCenter,.3);\n}\n\nfloat sdf(vec3 p){\n    vec3 p1=rotate(p,vec3(1.),iTime*uVelocityBox);\n    float box=sdBox(p1,vec3(.3));\n    float sphere=sdSphere(p,.3);\n    float sBox=smin(box,sphere,.3);\n    float mixedBox=mix(sBox,box,uProgress);\n    mixedBox=movingSphere(p,mixedBox);\n    float aspect=iResolution.x/iResolution.y;\n    vec2 mousePos=iMouse.xy/iResolution.xy* 2.-1.;\n    mousePos.x*=aspect;\n    float mouseSphere=sdSphere(p-vec3(mousePos,0.),.3);\n    return smin(mixedBox,mouseSphere,.1);\n    //return mixedBox;\n}\n\n\n// http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\n// https://gist.github.com/sephirot47/f942b8c252eb7d1b7311\nfloat rayMarch(vec3 eye,vec3 ray,float end,int maxIter){\n    float depth=0.;\n    for(int i=0;i<maxIter;i++){\n        vec3 pos=eye+depth*ray;\n        float dist=sdf(pos);\n        depth+=dist;\n        if(dist<EPSILON||dist>=end){\n            break;\n        }\n    }\n    return depth;\n}\n\nvec2 centerUv(vec2 uv){\n    uv=2.*uv-1.;\n    float aspect=iResolution.x/iResolution.y;\n    uv.x*=aspect;\n    return uv;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p)\n{\n    const float eps=.0001;\n    const vec2 h=vec2(eps,0);\n    return normalize(vec3(sdf(p+h.xyy)-sdf(p-h.xyy),\n    sdf(p+h.yxy)-sdf(p-h.yxy),\n    sdf(p+h.yyx)-sdf(p-h.yyx)));\n}\n\n// https://github.com/hughsk/matcap/blob/master/matcap.glsl\nvec2 matcap(vec3 eye,vec3 normal){\n    vec3 reflected=reflect(eye,normal);\n    float m=2.8284271247461903*sqrt(reflected.z+1.);\n    return reflected.xy/m+.5;\n}\n\nfloat fresnel(float bias,float scale,float power,vec3 I,vec3 N)\n{\n    return bias+scale*pow(1.+dot(I,N),power);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 vUv = fragCoord/iResolution.xy;\n    // coordinates from -1 to 1\n    vec2 cUv = centerUv(vUv);\n    vec3 bg=background(vUv);\n    \n    vec3 color=bg;\n    \n    vec3 eye=vec3(0.,0.,2.5);\n    vec3 ray=normalize(vec3(cUv,-eye.z));\n    float end=5.;\n    int maxIter=256;\n    float depth=rayMarch(eye,ray,end,maxIter);\n    if(depth<end){\n        vec3 pos=eye+depth*ray;\n        vec3 normal=calcNormal(pos);\n        vec2 matcapUv=matcap(ray,normal);\n        //color=texture(iChannel0,matcapUv).rgb;\n        color=texture(iChannel1, reflect(ray, normal)).rgb;\n        float F=fresnel(0.,.4,3.2,ray,normal);\n        color=mix(color,bg,F);\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}