{"ver":"0.1","info":{"id":"mtf3zl","date":"1672223675","viewed":249,"name":"Palladian Schneekugel","username":"dr2","description":"A snow globe in the style of Palladio","likes":33,"published":3,"flags":0,"usePreview":0,"tags":["snow","architecture","globe","palladio","palace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Palladian Schneekugel\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h);\nfloat PrTetDf (vec3 p, float d);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Minv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3f (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, ltDirEx, qHit, drSize, gId, gobDisp, gobRot;\nvec2 wnSize[2], drAngCs;\nfloat tCur, dstFar, bWid, bHt, bThk, wnWid, wfRad, wnUp[2], spRad, tCyc, nCyc, vSpd,\n   vDisp, gSzFac, pSnow;\nint idObj;\nbool gOcc;\n\nconst int idWall = 1, idRf = 2, idDom = 3, idPort = 4, idStr = 5, idPil = 6, idFlr = 7,\n   idWfrm = 8, idDoor = 9, idTree = 10, idGrnd = 11;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, pr;\n  vec2 u;\n  float dMin, d, wx, drUp, dd;\n  drUp = 0.48;\n  dMin = dstFar;\n  pr = p;\n  pr.xz = mix (abs (pr.xz), abs (pr.zx), step (abs (pr.z), abs (pr.x)));\n  q = pr;\n  q.yz -= vec2 (bHt, bWid);\n  wx = abs (abs (q.x) - 2.1) - 0.4;\n  d = PrBox2Df (vec2 (q.y, q.z), vec2 (bHt, bThk));\n  for (int k = 0; k < 2; k ++) d = max (min (d, PrRoundBoxDf (vec3 (wx, q.y + wnUp[k], q.z),\n     vec3 (wnSize[k], bThk), 0.03)), - PrBox2Df (vec2 (wx, q.y + wnUp[k]), wnSize[k]));\n  d = min (d, PrRoundBoxDf (vec3 (q.x, q.y + drUp, q.z),\n     vec3 (drSize.xy * vec2 (2., 1.), 0.04), 0.04));\n  d = max (d, - PrBox2Df (vec2 (q.x, q.y + drUp), drSize.xy * vec2 (2., 1.)));\n  DMINQ (idWall);\n  q = pr;\n  q.yz -= vec2 (bHt - drUp, bWid);\n  q.x = abs (q.x);\n  q.xz -= vec2 (0.2, 0.01);\n  q.xz = Rot2Cs (q.xz - drSize.xz * vec2 (1., -1.), drAngCs) + drSize.xz * vec2 (1., -1.);\n  d = PrBoxDf (q, drSize);\n  DMINQ (idDoor);\n  q = pr;\n  q.yz -= vec2 (bHt, bWid);\n  u = vec2 (abs (abs (wx) - 0.5 * wnWid) - 0.5 * wnWid, abs (abs (q.y + wnUp[0]) -\n     0.5 * wnSize[0].y) - 0.5 * wnSize[0].y);\n  dd = length (vec2 (u.x, q.z)) - wfRad;\n  d = min (max (dd, abs (u.y) - wnSize[0].y), PrCylDf (vec3 (u, q.z).yzx, wfRad, wnSize[0].x));\n  DMINQ (idWfrm);\n  u.y = abs (q.y + wnUp[1]) - wnSize[1].y;\n  d = min (max (dd, abs (u.y) - wnSize[1].y), PrCylDf (vec3 (u, q.z).yzx, wfRad, wnSize[1].x));\n  DMINQ (idWfrm);\n  q = pr;\n  q.yz -= vec2 (2.8, bWid);\n  d = max (abs (dot (vec2 (q.y, - q.z), CosSin (-0.1 * pi))) - 0.02, q.z - bThk);\n  d = max (d, 1. - length (p.xz));\n  DMINQ (idRf);\n  q = p;\n  q.y -= 3.;\n  d = max (abs (length (vec3 (q.xz, max (q.y, 0.8)).xzy) - 1.28) - 0.02, 0.3 - q.y);\n  d = max (d, 0.1 - length (vec2 (pr.x, q.y - 0.63)));\n  DMINQ (idDom);\n  q = p;\n  q.y = abs (q.y - 0.2) - 0.18;\n  d = PrRoundBoxDf (q, vec3 (bWid + bThk, 0., bWid + bThk), 0.02);\n  q = p;\n  q.y = abs (q.y - 2.23) - 0.55;\n  d = min (d, PrRoundBoxDf (q, vec3 (bWid + bThk, 0., bWid + bThk), 0.02));\n  DMINQ (idFlr);\n  q = pr;\n  q.yz -= vec2 (0.9, bWid + 0.5);\n  d = PrBox2Df (q.xz, vec2 (1.3, 0.5));\n  q.y -= 1.65;\n  u.y = dot (q.yx, CosSin (0.1 * pi));\n  d = max (d, max (max (u.y, -0.45 - q.y), - max (max (u.y + 0.06, -0.39 - q.y), 0.42 - q.z)));\n  d = max (d, - PrCylDf (q - vec3 (0., -0.25, 0.47), 0.08, 0.1));\n  DMINQ (idPort);\n  q = pr;\n  u = q.yz - 2.1;\n  u = 20. * vec2 (u.x + u.y, - u.x + u.y) / sqrt(2.);\n  d = (1./20.) * (u.x - abs (0.5 - abs (0.5 - fract (u.y / sqrt(2.)))) * sqrt(2.));\n  d = 0.5 * max (d, max (max (abs (q.x) - 1.3, abs (q.y - 0.2) - 0.2), bWid - q.z));\n  DMINQ (idStr);\n  q = pr;\n  q.yz -= vec2 (1.25, bWid + 0.6);\n  d = 1.3 - abs (q.x);\n  q.x = (fract (2.2 * q.x) - 0.5) / 2.2;\n  d = max (min (PrCylDf (q.xzy, 0.06, 0.85), PrBoxDf (vec3 (q.x, abs (q.y) - 0.83, q.z),\n     vec3 (0.08, 0.02, 0.08))), - d);\n  DMINQ (idPil);\n  q = pr;\n  q.x = abs (q.x);\n  q -= vec3 (2.7, 0.15, bWid + 2.5);\n  d = PrRoundBox2Df (vec2 (length (q.xz) - 0.55, q.y), vec2 (0.15, 0.2) - 0.1, 0.1);\n  DMINQ (idTree);\n  q.y -= 1.25;\n  d = PrConCapsDf (q.xzy, CosSin (0.03 * pi), 0.15, 1.1);\n  DMINQ (idTree);\n  q = pr;\n  q.x = abs (q.x);\n  q -= vec3 (1.45, 0.2, bWid + 3.1);\n  d = PrRoundBoxDf (q, vec3 (0.15, 0.25, 1.6) - 0.1, 0.1);\n  DMINQ (idTree);\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (32. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 32.);\n  q.xy -= vec2 (-8.5, 1.);\n  d = PrConCapsDf (q.xzy, CosSin (0.04 * pi), 0.15, 0.75);\n  d = max (d, 1.3 - abs (pr.x));\n  DMINQ (idTree);\n  q = p;\n  q.y -= -0.51;\n  d = PrCylDf (q.xzy, spRad, 0.51);\n  DMINQ (idGrnd);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  d = dstFar / gSzFac;\n  if (gOcc) {\n    p -= gobDisp;\n    p /= gSzFac;\n    p.yz = Rot2Cs (p.yz, CosSin (gobRot.x));\n    p.xz = Rot2Cs (p.xz, CosSin (gobRot.y));\n    p.xy = Rot2Cs (p.xy, CosSin (gobRot.z));\n    for (float k = -1.; k <= 1.; k += 2.) {\n      q = p;\n      q.y *= k;\n      q.xz = Rot2Cs (q.xz, CosSin (- k * pi / 6.));\n      q.xy = Rot2Cs (q.xy, CosSin (pi / 2. - 0.5 * acos(1./3.)));\n      q.xz = Rot2Cs (q.xz, CosSin (pi / 4.));\n      d = min (d, PrTetDf (q, 0.04));\n    }\n  }\n  return gSzFac * d;\n}\n\nvoid GObjState (vec3 p)\n{\n  vec3 vRan, q;\n  vRan = Hashv3f (dot (gId, vec3 (31.1, 41.1, 51.1)) + 99.);\n  gOcc = (length (gId.xz + 0.5) < spRad && length (vRan) < sqrt(3.) * pSnow);\n  if (gOcc) {\n    q = gId + 0.5;\n    gobDisp = q + 0.3 * cos ((1. + vRan) * tCur + vRan.zxy);\n    gobRot = 2. * (vRan - 0.5) * tCur;\n    q.y = floor (q.y - vDisp);\n    gSzFac = 0.001 + 0.999 * smoothstep (0., 0.1 * spRad, min (spRad - length (q), p.y));\n  }\n}\n\nvec3 GObjCell (vec3 p)\n{\n  gId.xz = floor (p.xz);\n  vDisp = vSpd * tCur * (1. + Hashfv2 (gId.xz));\n  p.y += vDisp;\n  gId.y = floor (p.y);\n  return p;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, pp, gIdP, rdi;\n  float dHit, d, eps;\n  eps = 0.001;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi = 1. / rd;\n  gIdP = vec3 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    pp = ro + dHit * rd;\n    p = GObjCell (pp);\n    if (gId != gIdP) {\n      GObjState (pp);\n      gIdP = gId;\n    }\n    d = ((length (floor (pp + 0.5)) - 1.) < spRad) ? GObjDf (p) : dstFar;\n    d = min (d, abs (Minv3 ((gId + step (0., rd) - p) * rdi)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q, pr;\n  float dMin, d, wx;\n  dMin = dstFar;\n  pr = p;\n  pr.xz = mix (abs (pr.xz), abs (pr.zx), step (abs (pr.z), abs (pr.x)));\n  q = pr;\n  q.yz -= vec2 (bHt, bWid);\n  wx = abs (abs (q.x) - 2.1) - 0.4;\n  d = dMin;\n  for (int k = 0; k < 2; k ++) d = min (d, PrBox2Df (vec2 (wx, q.y + wnUp[k]), wnSize[k]));\n  d = max (d, abs (q.z) - wfRad + 0.004);\n  DMINQ (0);\n  q = p;\n  d = max (abs (length (q.xz) - 1.) - 0.02, length (vec2 (pr.x, q.y - 3.63)) - 0.1);\n  DMINQ (0);\n  return dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 50; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 SphHit (vec3 ro, vec3 rd, float rad)\n{\n  vec3 vn;\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + rad * rad - dot (ro, ro);\n  d = dstFar;\n  if (w >= 0.) {\n    d = - b - sqrt (w);\n    vn = (ro + d * rd) / rad;\n  }\n  return vec4 (d, vn);\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (2. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, d4;\n  vec3 col, vn, roo, vnSph;\n  vec2 vf, u;\n  float dstObj, dstTrObj, dstGObj, dstExtSph, snowFac, sh, t;\n  bool outside;\n  bWid = 3.;\n  bHt = 1.4;\n  bThk = 0.05;\n  wfRad = 0.012;\n  wnWid = 0.18;\n  wnSize[0] = vec2 (wnWid, 0.45);\n  wnSize[1] = vec2 (wnWid, 0.2);\n  wnUp[0] = 0.35;\n  wnUp[1] = -0.95;\n  drSize = vec3 (0.2, 0.55, 0.02);\n  drAngCs = CosSin (-0.5 * pi * clamp (-0.3 + 1.6 * abs (2. * fract (0.25 * tCur) - 1.), 0., 1.) *\n     (1. - smoothstep (0.01, 0.1, pSnow)));\n  outside = true;\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    vf = vec2 (0.);\n    if (idObj == idWall) {\n      if (qHit.z < 0.) {\n        col4 = vec4 (0.7, 0.7, 0.75, 0.05);\n        outside = false;\n     } else {\n        col4 = vec4 (0.9, 0.9, 0.5, 0.02);\n        if (abs (qHit.z - 0.05) < 0.002) {\n          u = qHit.xy * vec2 (1./6., 1.) * 16.;\n          if (abs (vn.x) < abs (vn.z)) u.x += 0.5;\n          t = u.x + 1./3. + ((fract (0.5 * u.y) < 0.5) ? 0. : 0.5);\n          col4 *= 0.8 + 0.2 * smoothstep (0.12, 0.15,\n             min (fract (u.y), 6. * min (fract (t), fract (t + 2./3.))));\n          vf = vec2 (64., 1.);\n        }\n      }\n    } else if (idObj == idRf) {\n      col4 = vec4 (1., 0.5, 0., 0.1) * (0.8 + 0.2 * smoothstep (0.08, 0.1, fract (8. * qHit.z)));\n      vf = vec2 (64., 0.1);\n    } else if (idObj == idDom) {\n      if (qHit.y > 0.8) {\n        col4 = vec4 (0.95, 1., 0.95, 0.05) * (0.9 + 0.1 * smoothstep (0.08, 0.1,\n           fract (8. * length (qHit.xz) + 0.5)));\n      } else {\n        col4 = vec4 (0.9, 0.9, 0.5, 0.1);\n        vf = vec2 (64., 0.5);\n      }\n    } else if (idObj == idFlr) {\n      if (max (abs (qHit.x), abs (qHit.z)) > bWid) {\n        col4 = vec4 (0.7, 0.7, 0.4, 0.1);\n      } else {\n        col4 = (vn.y > 0.) ? vec4 (0.7, 0.4, 0.2, 0.05) : vec4 (1., 1., 1., 0.05);\n        outside = false;\n     }\n    } else if (idObj == idPort) {\n      col4 = vec4 (0.8, 0.8, 0.7, 0.1);\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idStr) {\n      col4 = vec4 (0.8, 0.8, 0.7, 0.1);\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idPil) {\n      col4 = vec4 (0.8, 0.7, 0.7, 0.1);\n      if (abs (qHit.y) < 0.81) col4 *= (0.8 + 0.2 * smoothstep (0.06, 0.08,\n         fract (4.9 * qHit.y))) * (1. - 0.3 * smoothstep (0.15, 0.17, fract (16. *\n         atan (qHit.z, qHit.x) / (2. * pi) + 0.5)));\n      else vf = vec2 (64., 0.5);\n    } else if (idObj == idWfrm) {\n      col4 = vec4 (0.2, 0.4, 0.2, 0.2);\n      outside = false;\n    } else if (idObj == idDoor) {\n      col4 = vec4 (0.7, 0.3, 0.1, 0.1);\n      col4 *= 1. - 0.5 * smoothstep (0.01, 0.012, PrBox2Df (qHit.xy, drSize.xy - 0.05));\n      outside = false;\n    } else if (idObj == idTree) {\n      col4 = vec4 (0., 0.5, 0., 0.);\n      vf = vec2 (16., 8.);\n    } else if (idObj == idGrnd) {\n      if (qHit.y > 0.5) {\n        if (Minv2 (abs (qHit.xz)) < 1.4 || length (qHit.xz) < sqrt(2.) * bWid + 0.5) {\n          col4 = vec4 (0.8, 0.8, 0.6, 0.1);\n          vf = vec2 (16., 0.2);\n        } else {\n          col4 = vec4 (0., 0.8, 0., 0.05);\n          if (vn.y > 0.1) vf = vec2 (8., 0.5);\n        }\n      } else {\n        col4 = vec4 (0.6, 0.3, 0., 0.1) * (0.8 + 0.2 * sin (16. * pi * qHit.y));\n      }\n    }\n    snowFac = smoothstep (0.15, 0.35, tCyc - 0.15 * Fbm2 (2. * ro.xz + mod (nCyc, 16.))) -\n       smoothstep (0.8, 0.95, tCyc);\n    if (vf.y > 0.) {\n      if (snowFac > 0. && outside && vn.y > 0.01) vf = vec2 (min (vf.x, 16.), max (vf.y, 0.2));\n      vn = VaryNf (vf.x * ro, vn, vf.y);\n    }\n    if (snowFac > 0. && outside && vn.y > 0.01)\n       col4 = mix (col4, vec4 (0.95, 0.95, 1., 0.1), snowFac);\n    sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n    col = col4.rgb * (0.3 + 0.7 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n  } else {\n    col = SkyCol (rd);\n  }\n  ro = roo;\n  dstTrObj = TrObjRay (ro, rd);\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro += dstTrObj * rd;\n    vn = TrObjNf (ro);\n    col = mix (col, SkyCol (reflect (rd, vn)), 0.3 + 0.7 * pow (1. - abs (dot (vn, rd)), 5.));\n  }\n  ro = roo;\n  d4 = SphHit (ro, rd, spRad);\n  dstExtSph = d4.x;\n  vnSph = d4.yzw;\n  if (dstExtSph < dstFar) {\n    ro += dstExtSph * rd;\n    dstGObj = GObjRay (ro, rd);\n    if (dstGObj < min (dstObj, dstFar)) {\n      vn = GObjNf (GObjCell (ro + dstGObj * rd));\n      col = vec3 (1.) * (0.2 + 0.8 * max (- dot (rd, vn), 0.));\n    }\n    if (ro.y > 0.) col += 0.02 + 0.05 * max (dot (ltDirEx, vnSph), 0.) +\n       0.25 * pow (max (dot (reflect (ltDirEx, vnSph), rd), 0.), 64.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, asp, sr, tCycLen;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    az += 0.02 * pi * tCur;\n    el -= 0.05 * pi * sin (0.01 * pi * tCur);\n  }\n  el = clamp (el, -0.3 * pi, -0.02 * pi);\n  vuMat = StdVuMat (el, az);\n  spRad = 10.;\n  vSpd = 0.05 * spRad;\n  ro = vuMat * vec3 (0., 2., -5. * spRad);\n  zmFac = 4.5 + 1.2 * abs (mod (az + pi, 2. * pi) - pi);\n  dstFar = length (ro) + spRad;\n  tCycLen = 25.;\n  nCyc = floor (tCur / tCycLen);\n  tCyc = fract (tCur / tCycLen);\n  pSnow = smoothstep (0.05, 0.5, tCyc) - smoothstep (0.65, 0.8, tCyc);\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  ltDirEx = vuMat * normalize (vec3 (0.6, 1., -0.03));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h)\n{\n  float d;\n  d = max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n  h /= cs.x * cs.x;\n  r /= cs.x;\n  d = min (d, min (length (vec3 (p.xy, p.z + r * cs.y - h)) - r + h * cs.y,\n     length (vec3 (p.xy, p.z + r * cs.y + h)) - r - h * cs.y));\n  return d;\n}\n\nfloat PrTetDf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (1., -1.) / sqrt(3.);\n  return max (max (dot (p, e.yxx), dot (p, e.xyx)), max (dot (p, e.xxy), dot (p, e.yyy))) - d;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n","name":"Image","description":"","type":"image"}]}