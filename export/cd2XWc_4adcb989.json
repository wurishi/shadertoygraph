{"ver":"0.1","info":{"id":"cd2XWc","date":"1671092099","viewed":167,"name":"ychen_rayMarching_glow","username":"ychen","description":"glow\nreference:https://www.shadertoy.com/view/3dlcWl","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// helpers\nfloat hash(float s) { return fract(sin(s)*42422.42); }\nmat2 rot(float v) { float a = cos(v), b = sin(v); return mat2(a,b,-b,a); }\nfloat torus(vec3 p, vec2 q) { return length( vec2(length(p.xz)-q.x,p.y) ) - q.y; } \nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab,ap)/dot(ab,ab);\n    //t = clamp(t,0.,1.);\n    vec3 c = a + t*ab;\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x,y),0.));\n    float i = min(max(x,y),0.);\n    return e+i;\n}\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.));\n}\n// global + params\n#define att 15.\nfloat time;\nfloat id;\nvec3 glow;\n\n// distance function\nfloat map( vec3 p ) {\n    // rotate the world\n\tp.xy *= rot(time*.1);\n\tp.xz *= rot(time*.2);\n    \n    // small point light on the center\n\tfloat d =  length(p);\n\tglow += vec3(1.) / ( .1 + d*200.);\n    \n    // 30 torus\n\tfloat s = .25;\n\tfor(int i=0; i<10; i++) {\n    \ts += .25;\n    \tp.xy *= rot(time*.05);\n    \tp.xz *= rot(time*.1);\n        \n    \tfloat dt = torus(p,vec2(s, 0.14));\n        float dcy = sdCylinder(p,vec3(s,s, 0.14),vec3(1,s,.2),.5);\n        //float db = sdCylinder(p,vec3(s,s, 0.14),vec3(1,s,.2),.5);\n        float db = dBox(p-s, vec3(.1*s));\n        \n        // we accumulate the lighting here\n    \tfloat intensity = 2. / ( 1. + pow(abs(db*att),1.3));\n    \tif(i == 3 && id == 0.) {\n    \t\tglow += vec3(1.,.3,1.) * intensity;\n    \t} else if(i == 5 && id == 1.) {\n      \t\tglow += vec3(1.,1.,.1) * intensity;\n    \t} else if(i == 7 && id == 2.) {\n      \t\tglow += vec3(.1,1.,.1) * intensity;\n    \t} else if(i == 9 && id == 3.) {\n      \t\tglow += vec3(.2,2.,2.) * intensity;\n    \t}\n        \n    \td = min(d, dt);\n        d = min(d, dcy);\n        d = min(d, db);\n\t}\n\treturn d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime + 10.;\n    \n    // uv stuff\n    vec2 uv = fragCoord/iResolution.xy;\n  \tvec2 v = uv*2.-1.;\n  \tv.x /= iResolution.y / iResolution.x;\n\n    // which torus is on ?\n\tid = floor(hash(floor(iTime*5.*hash(floor(time*.2))))*5.);\n    \n    // ray setup\n  \tvec3 ro = vec3(0.,0.,-10.);\n  \tvec3 rd = normalize(vec3(v, 1.));\n\n\n    // raymarching by distance field\n  \tvec3 p = ro+rd ;\n  \tglow = vec3(0.);\n  \tfor(int i=0; i<32; i++) {\n    \tp += rd * map(p);\n  \t}\n    \n    // glow + vignetting + gamma correction\n  \tvec3 col = glow;\n  \tcol *= pow(uv.x*uv.y*(1.-uv.x)*(1.-uv.y), .8)*2.;\n  \tcol = pow(col,vec3(1./2.2));\n    \n  \tfragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}