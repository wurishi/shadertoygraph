{"ver":"0.1","info":{"id":"ssK3z1","date":"1631129454","viewed":611,"name":"Worm Soup","username":"kastorp","description":".\n","likes":47,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","particles","worms"],"hasliked":0,"parentid":"NlXGRB","parentname":"Flocking Bubbles"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Worm Soup  by kastorp\n\nGETTERS\n\nvec2 Worm(in vec2 pos){\n    ivec4 nb = getClosest(ivec2(pos/ZOOM));\n  \n    bool ghost;\n    vec4 pi0 = getParticle(nb[0],ghost);\n    vec4 pi1 = getParticle(nb[1],ghost);\n    vec4 pi2 = getParticle(nb[2],ghost);\n    vec4 pi3 = getParticle(nb[2],ghost);\n\n    float d0 = distance(pos/ZOOM,pi0.xy)*ZOOM;\n    float d1 = abs(nb[1]-nb[0])==N.x ? 1000.:  distance(pos/ZOOM,pi1.xy)*ZOOM;  \n    float d2 = abs(nb[2]-nb[0])==N.x ? 1000.: distance(pos/ZOOM,pi2.xy)*ZOOM; \n    float d3 = abs(nb[3]-nb[0])==N.x ? 1000.: distance(pos/ZOOM,pi3.xy)*ZOOM; \n         \n    float df = d0/ min(.4/(1./max(d1 - d0, .001) + .2/max(d2 - d0, .001)+ .05/max(d3 - d0, .001)), 1.);\n    df= smoothstep(RADIUS*ZOOM*2.2,RADIUS*ZOOM*1.8,df);\n    \n    int idn= nb[0];\n    return vec2(df,idn);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n   \n    vec2 c = Worm(U);\n    float cid = fract(float(i2xy(int(c.y)).x)  /float(N.x));\n    vec3  col = mix(vec3(0.05,0.08,0.02),(i2xy(int(c.y)).y<1 ?1.:.85) * pal( cid, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.),vec3(0.,0.25,0.25) ), c.x);\n\tO = vec4(sqrt(clamp(col, 0., 1.)), 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//configurable settings:\n#define NP 2500. //number of particles,  must be <=  (iResolution.x)^2\n#define NGH 300 // number of ghosts scanned each frame\n#define dt 2. // time interval;  \n#define RADIUS (5. *min(1.,iResolution.x/640.  ))//average dist\n#define MAXSIZE 500.\n//-----------------------\n#define ZERO  min(iFrame,0)\n#define N ivec2(int(sqrt(NP)),int(sqrt(NP)))\n#define size min(vec2(MAXSIZE*iResolution.x/iResolution.y,MAXSIZE),vec2(iResolution.xy))\n#define ZOOM (iResolution.y/size.y)\n#define mouse (iMouse/ZOOM)\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define GETTERS ivec4 getClosest(ivec2 p){ return floatBitsToInt(texel(iChannel2, p));} \\\nivec4 getNeighbor(int id){ return floatBitsToInt(texel(iChannel1, i2xy(id)));} \\\nivec4[2] getNeighbor2(int id){ uvec4 v= floatBitsToUint(texel(iChannel1, i2xy(id))); return ivec4[2](ivec4(v&65535u), ivec4(v>>16)); }\\\nvec4 getParticle(int id,out bool ghost){ vec4 p= texel(iChannel0, i2xy(id));ghost=min(p.x,p.y)<0.;return vec4(abs(p.xy),p.zw); }\nconst int tot_n = N.x*N.y;\n\nivec2 i2xy(int id)\n{\n    return ivec2(id%N.x, id/N.x);\n}\nint xy2i(ivec2 p)\n{\n    return p.x + p.y*N.x;\n}\n\nconst float stiffness=0.05;\nconst float damping=0.2;\nvec2  spring(vec2 posdif,vec2 veldif, float edgelen)\n{\n    vec2 vel = normalize(posdif)*(length(posdif)-edgelen)*stiffness; // spring\n    if(dot(veldif,veldif)!=0.)  vel +=normalize(posdif)*( dot(normalize(posdif),veldif)*damping); // damper\n    return vel;\n}\n\n\n//Iq palettes https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//particle physics\n\nGETTERS\n\nint cid;\n\nvec2 Fv(vec4 p0, int pid)\n{\n    if(pid < 0 || pid >= tot_n || pid == cid) return vec2(0);\n    bool ghost;\n   \tvec4 p1 = getParticle(pid,ghost);\n    float d = distance(p1.xy,p0.xy);       \n    float fd =   0.8/(1.+d/RADIUS) - 4.*exp(-d/RADIUS);   \n    vec2 flocking_force =(p1.zw - p0.zw)/(1.+7.*d/RADIUS);   \n    vec2 interaction = normalize(p1.xy-p0.xy)* min(0.01,fd);\n    return flocking_force*0.1 +  interaction*0.5;\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    if(p.x >= N.x || p.y >= N.y) discard;\n    else\n    {\n        pos = floor(pos); \n        //this pixel value\n        U = texel(iChannel0, pos);\n        U.xy=abs(U.xy);\n        int id = xy2i(p);\n        cid = id;\n        \n        //this pixel value\n        if(iFrame<10 ||  U==vec4(0) )\n        { \n            U.xy = size*vec2(p)/vec2(N);\n        \n\t\t\tU.zw = vec2(0);\n      \t\treturn;\n        }\n        \n   \t\tivec4 cp = getNeighbor(id);\n   \t  \n        //flocking force \n        vec2 F = (Fv(U, cp.x) +Fv(U, cp.y) + Fv(U, cp.z) +Fv(U, cp.w));\n      \n        bool gh;\n        vec4 p0 = getParticle(id,gh); \n      \n        //spring force\n        if(p.y>1) \n        {\n            vec4 p1 = getParticle(xy2i(ivec2(p.x,p.y-1)),gh); \n            F+=  spring(p1.xy-p0.xy,p1.zw-p0.zw,RADIUS*1.5);\n        }\n       if(p.y< N.y-1) \n        {\n            vec4 p1 = getParticle(xy2i(ivec2(p.x,p.y+1)),gh); \n            F+= spring(p1.xy-p0.xy,p1.zw-p0.zw,RADIUS*1.5);\n        }\n\n        //mouseable\n        if(iMouse.z > 0.) \n        {\n            float d = distance(mouse.xy, U.xy);\n            if(d<size.y*.3) F -=.5*normalize(mouse.xy - U.xy)/(sqrt(d)+2.);\n        }\n        \n        U.zw += (0.5*F)*dt;\n        \n        //random force field\n         U.zw +=((p.y<1)  ? .005 :.002  )*dt* ( -2. * texture(iChannel3, 0.6*U.xy/size).xy + 1.);\n        \n        //U.zw = normalize(U.zw);\n        U.xy += U.zw*dt;\n        \n        //border conditions\n        if(size.x - U.x < RADIUS*2.) { U.z = -abs(U.z); U.x = size.x - RADIUS*2.;}\n        if(U.x < RADIUS*2.) {U.z = abs(U.z);U.x = RADIUS*2.;}\n        if(size.y - U.y < RADIUS*2.) {U.w = -abs(U.w); U.y = size.y - RADIUS*2.;}\n        if(U.y < RADIUS*2.) {U.w = abs(U.w); U.y = RADIUS*2.;}\n                \n        U.xy = mod(U.xy, size);\n        \n        bool ghost=true;\n        ivec4 nb = getClosest(ivec2(U.xy));\n        for(int i = 0; i<4; i++)\n        {\n            if(nb[i]==id) {ghost=false; break;}\n        }\n        if(ghost) U.xy=-U.xy;        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//particcle connection\n\nGETTERS\n\n\n//sorting closest 4 particles\n\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //this particle position\nint tid;\nbool ghost;//true if not visible\n\n//insertion sort\nvoid sort(int utemp)\n{\n    if(utemp == tid || utemp < 0) return;\n       \n   \tvec4 part = getParticle(utemp,ghost);\n    vec2 dx = part.xy - pos;\n    float dtemp = length(dx);\n    //4 directions \n    if(dx.x > abs(dx.y) && d.x > dtemp)\n    {\n            d.x = dtemp;\n        \tu.x = utemp;\n    }\n    else if(dx.x < -abs(dx.y) && d.y > dtemp)\n    {\n            d.y = dtemp;\n        \tu.y = utemp;        \n    }\n    else if(dx.y > abs(dx.x) && d.z > dtemp) \n    {   \n            d.z = dtemp;\n        \tu.z = utemp;        \n    }\n    else if(dx.y < -abs(dx.x) && d.w > dtemp) \n    {\n        d.w = dtemp;\n        u.w = utemp;\n    }\n}\n\nvoid sortneighbor(int id)\n{\n    ivec4 nb = getNeighbor(id);\n    for(int j = 0; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{  \n    \n    ivec2 p = ivec2(fragCoord);\n\n    if(p.x > N.x || p.y > N.y) discard;\n    \n    int id = xy2i(p);\n     \n    u = ivec4(-1); d = vec4(1e10); \n   \n    tid = id;\n    pos = getParticle(id,ghost).xy;\n    \n    sortneighbor(id); \n    \n    for(int i = 0; i < NGH; i++)\n    {\n        //sort(hash(ivec4(p, iFrame, i)).x%tot_n); //random sort  \n        int id=(iFrame*NGH+i) % tot_n;\n        vec4 pp= getParticle(id,ghost);\n        if(ghost) sort(id); //random sort \n    }\n    ivec4 nc = getClosest(ivec2(pos));\n    for(int i = ZERO; i < 4; i++)\n    {\n        sort(nc[i]); \n    }\n    \n    ivec4 nb = getNeighbor(id);\n    for(int i = 0; i < 4; i++)\n    {\n        //sort 4x4  particles \n        sortneighbor(nb[i]); \n         ivec4 nbb = getNeighbor(nb[i]);\n        for(int j = 0; j < 4; j++)\n    \t{\n            //sort 4x4x4  particles\n            sortneighbor(nbb[j]); \n        }\n    }\n    \n    if( any(lessThan(u, ivec4(-1))) || any(greaterThan(u, ivec4(tot_n))))\n    {\n        u = ivec4(0);\n    }\n    \n    \n    U = intBitsToFloat(u);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//4th order voronoi particle tracking for each screen position\n\nGETTERS\n\nivec2 cross_distribution(int i)\n{\n    return (1<<(i/4)) * ivec2( ((i&2)/2)^1, (i&2)/2 ) * ( 2*(i%2) - 1 );\n}\n\nivec4 u; //ids\nvec4 d; //distances\nvec2 pos; //pixel position\nbool ghost; //true if not visible\n\nfloat particleDistance(int id, vec2 p)\n{\n    return distance(getParticle(id,ghost).xy, p);\n}\n\n//insertion sort\nvoid sort(int utemp)\n{\n    if(utemp <0) return; \n   \tfloat dtemp = particleDistance(utemp, pos);\n    //sorting\n     if(d.w > dtemp){\n        if(d.x > dtemp)\n        {\n            d = vec4(dtemp, d.xyz);\n            u = ivec4(utemp, u.xyz);\n        }\n        else if(d.y > dtemp && dtemp > d.x)\n        {\n            d.yzw = vec3(dtemp, d.yz);\n            u.yzw = ivec3(utemp, u.yz);\n        }\n        else if(d.z > dtemp && dtemp > d.y)\n        {\n            d.zw = vec2(dtemp, d.z);\n            u.zw = ivec2(utemp, u.z);\n        }\n        else if(d.w > dtemp && dtemp > d.z)\n        {\n            d.w = dtemp;\n            u.w = utemp;\n        }\n    }\n}\n\nvoid sortpos(ivec2 p)\n{\n    ivec4 nb = getClosest(p);\n    for(int j = ZERO; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n}\n\nvoid sortPart(int id)\n{\n\n    ivec4 nb = getNeighbor(id);\n    for(int j = ZERO; j < 4; j++)\n    {\n        sort(nb[j]);\n    }\n\n}\n\nvoid mainImage( out vec4 U, in vec2 fragCoord )\n{\n    pos = fragCoord;\n    \n    if (any(greaterThan(pos,ceil(size) ))) { discard;} //skip pixels out of screen\n    \n    ivec2 p = ivec2(pos);\n     \n    u = ivec4(-1); d = vec4(1e10); \n   \n    sortpos(p); //resort this position, cause particles are moving\n    \n    //jump flood sorting; minimized gere, raising to 12 or 16 has small effect and  high impact on framerate  \n    for(int i = ZERO; i < 16; i++)\n    {\n        ivec2 p2 =p+cross_distribution(i);\n        \n        //if (! any(greaterThan(p2,ivec2(ceil(size)) )) && ! (! any(lessThan(p2,ivec2(0u) )))) \n        sortpos(p2); \n    }\n    \n    \n    // sort neighbors of closest particles\n    for(int i = ZERO; i<4; i++)\n    {\n        if(u[i]<0) continue;\n        sortPart(u[i]);       \n    }\n    \n    // if( any(lessThan(u, ivec4(-1))) || any(greaterThan(u, ivec4(tot_n))) )  u = ivec4(0); \n    \n    \n    U = intBitsToFloat(u);\n}\n","name":"Buffer C","description":"","type":"buffer"}]}