{"ver":"0.1","info":{"id":"lctyWX","date":"1731296246","viewed":138,"name":"sequoia","username":"77Tigers","description":"sequoia, kinda jank but it looks pretty and that is all that matters","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["sequoia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.0001\n\nfloat sdf( inout vec3 pos ) {\n    vec2 mx = mod(pos.xz + 2.0, 4.0) - 2.0;\n    mx += vec2(cos(pos.y + pos.z) * 0.1, cos(pos.y - pos.x) * 0.1);\n    float angle = atan(mx.y, mx.x) + sin(pos.y) * 0.3;\n    float dist = sqrt(mx.x*mx.x + mx.y * mx.y) - 1.2 + pos.y * 0.05 + sqrt(max(cos(angle * 10.), 0.1)) * 0.05 - 0.5 * 1./sqrt(2. + pos.y * pos.y);\n    if (dist < 0.1) {\n        dist *= 0.6;\n    }\n    return clamp(dist * 0.9, -2.0, 1.0);\n}\n\nvec3 colFn( in float x ) {\n    vec3 yellow = vec3(1.0, 0.9, 0.6);\n    vec3 orange = vec3(0.9, 0.6, 0.6);\n    vec3 lightBlue = vec3(0.4, 0.7, 1.0);\n    vec3 blue = vec3(0.1, 0.1, 1.0);\n    if (x < 0.333333) {\n        x = x * 3.0;\n        return mix(blue, lightBlue, clamp(x, 0., 1.));\n    } else if (x < 0.666666) {\n        x = x * 3.0 - 1.0;\n        return mix(lightBlue, orange, clamp(x, 0., 1.));\n    } else {\n        x = x * 3.0 - 2.0;\n        return mix(orange, yellow, clamp(x, 0., 1.));\n    }\n    \n}\n\nfloat shadeFn( in vec3 pos ) {\n    vec2 mx = mod(pos.xz + 2.0, 4.0) - 2.0;\n    mx += vec2(cos(pos.y + pos.z) * 0.1, cos(pos.y - pos.x) * 0.1);\n    float angle = atan(mx.y, mx.x) + sin(pos.y) * 0.1;\n    float old = abs(cos(angle * 40. + 0.3 * sin(angle * 23.))) * (0.1 + 0.1 * sin(pos.y + angle * 2.0)) + sqrt(clamp(cos(angle * 10.), 0.0, 1.0)) * 0.7 - 1.5;\n    return old * (2./sqrt(.5 + pos.y * pos.y)  + 1.);\n}\n\n// thanks to FabriceNeyret2 for feedback!\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float size = min(iResolution.x, iResolution.y);\n    \n    vec2 p = (fragCoord - (iResolution.xy/2.0)) / size;\n    \n    vec3 cam = vec3(2.0, 0.0, iTime);\n    \n    float shade = 1.0;\n    \n    // march\n    vec3 ray = cam;\n    float ct, st;\n    ct = cos(0.9);\n    st = sin(0.9);\n    \n    vec3 dir = normalize(vec3(p, 1.0));\n    dir.yz *= mat2(ct,st,-st,ct);\n    dir.xz *= mat2(ct,st,-st,ct);\n    \n    float total_dist = 0.0;\n    \n    int i;\n    for (i = 0; i < 40; i++) {\n        float dist = sdf(ray);\n        ray += dir * dist / sqrt(1.0 - dir.y * dir.y) * 0.99;\n        total_dist += dist;\n        if (dist < EPS) {\n            // float num = 0.1 * total_dist + ray.y * 0.3 - 1.5;\n            // shade = 1. / (1. + exp(-num));\n            break;\n        }\n    }\n    float num = 0.2 * total_dist + ray.y * 0.3 - 2.0;   \n    num += shadeFn(ray) * 0.1;\n    \n    shade = 1. / (1. + exp(-num));\n    \n    float l = length(p - vec2(0.0, 1.0));\n    shade += pow(clamp((1.-l), 0., 1.), 4.0) * 0.01 * ray.y + dir.y * 0.05;\n    \n    vec3 col = colFn(shade);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}