{"ver":"0.1","info":{"id":"tlc3RM","date":"1575897302","viewed":61,"name":"voronoi glass","username":"giezu","description":"Voronoi glass shader based on cncd/fairlight number one/another one demo","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    float scale = 9.0;\n    uv *= scale;\n    vec3 col = vec3(0.0);\n\n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n\n    float md = scale;  // minimun distance\n    vec2 mg;\n    vec2 mr;\n    vec2 mp;\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 g = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 p = random2(i_uv + g);\n\n\t\t\t// Animate the point\n            p = 0.5 + 0.5*sin(iTime * 0.1 + 6.2831*p);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 r = g + p - f_uv;\n\n            // Distance to the point\n            float d = dot(r, r);\n\n            // Keep the closer distance\n            if (d < md)\n            {\n                md = d;\n                mr = r;\n                mg = g;\n                mp = p;\n            }\n        }\n    }\n    \n    md = scale;\n    for( int j=-2; j<=2; j++ )\n    {\n        for( int i=-2; i<=2; i++ )\n        {\n            vec2 g = mg + vec2(float(i),float(j));\n            vec2 o = random2( i_uv + g );\n            o = 0.5 + 0.5*sin( iTime*0.1 + 6.2831*o );\n            vec2 r = g + o - f_uv;\n\n            if( dot(mr-r,mr-r)>0.000001 )\n            {\n            // distance to line\t\t\n            float d = dot( 0.5*(mr+r), normalize(r-mr) );\n\n            md = min( md, d );\n            }\n        }\n    }\n    \n    uv /= scale;\n    uv *= 0.9;\n    uv += mp * 0.1;\n    col.rgb = texture(iChannel0, uv).rgb;\n    //col.rgb = vec3(m);\n    float l = smoothstep( 0.0, 0.05, md);\n    col.rgb = mix(col.rgb * 0.75, col.rgb, l);\n    //if (l <= 0.1)\n        //l += 0.8;\n    //col.rgb *= l;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}