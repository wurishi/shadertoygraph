{"ver":"0.1","info":{"id":"NttcDH","date":"1659725613","viewed":138,"name":"All Blend Filters","username":"MouadAbdelghafourAITALI","description":"All blend filters such as overlay, soft light, image add and image color.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blend","overlayblend","softlightblend","imageaddblend","imagecolorblend"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Source : https://github.com/cats-oss/android-gpuimage\n\n\n//overlayBlendFilter :\nvec4 overlayBlendFilter(vec4 base,vec4 overlay){\n    float ra;\n    if (2.0 * base.r < base.a) {\n         ra = 2.0 * overlay.r * base.r + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\n    } else {\n         ra = overlay.a * base.a - 2.0 * (base.a - base.r) * (overlay.a - overlay.r) + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\n    }\n\n     float ga;\n     if (2.0 * base.g < base.a) {\n         ga = 2.0 * overlay.g * base.g + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\n     } else {\n         ga = overlay.a * base.a - 2.0 * (base.a - base.g) * (overlay.a - overlay.g) + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\n     }\n\n     mediump float ba;\n     if (2.0 * base.b < base.a) {\n         ba = 2.0 * overlay.b * base.b + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\n     } else {\n         ba = overlay.a * base.a - 2.0 * (base.a - base.b) * (overlay.a - overlay.b) + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\n     }\n\n     return vec4(ra, ga, ba, 1.0);\n}\n\n\n//softLightBlendFilter :\nvec4 softLightBlendFilter(vec4 base,vec4 overlay){\n    return base * (overlay.a * (base / base.a) + (2.0 * overlay * (1.0 - (base / base.a)))) + overlay * (1.0 - base.a) + base * (1.0 - overlay.a);\n}\n\n\n//imageAddBlendFilter :\nvec4 imageAddBlendFilter(vec4 base,vec4 overlay){\n  float r;\n  if (overlay.r * base.a + base.r * overlay.a >= overlay.a * base.a) {\n    r = overlay.a * base.a + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\n  } else {\n    r = overlay.r + base.r;\n  }\n\n  float g;\n  if (overlay.g * base.a + base.g * overlay.a >= overlay.a * base.a) {\n    g = overlay.a * base.a + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\n  } else {\n    g = overlay.g + base.g;\n  }\n\n  float b;\n  if (overlay.b * base.a + base.b * overlay.a >= overlay.a * base.a) {\n    b = overlay.a * base.a + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\n  } else {\n    b = overlay.b + base.b;\n  }\n\n  float a = overlay.a + base.a - overlay.a * base.a;\n  \n  return vec4(r, g, b, a);\n}\n\n\n//imageColorBlendFilter :\n\nfloat lum(lowp vec3 c) {\n     return dot(c, vec3(0.3, 0.59, 0.11));\n}\n\nvec3 clipcolor(lowp vec3 c) {\n     highp float l = lum(c);\n     lowp float n = min(min(c.r, c.g), c.b);\n     lowp float x = max(max(c.r, c.g), c.b);\n\n     if (n < 0.0) {\n         c.r = l + ((c.r - l) * l) / (l - n);\n         c.g = l + ((c.g - l) * l) / (l - n);\n         c.b = l + ((c.b - l) * l) / (l - n);\n     }\n     if (x > 1.0) {\n         c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);\n         c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);\n         c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);\n     }\n\n     return c;\n }\n\nvec3 setlum(lowp vec3 c, highp float l) {\n     highp float d = l - lum(c);\n     c = c + vec3(d);\n     return clipcolor(c);\n}\n\nvec4 imageColorBlendFilter(vec4 base,vec4 overlay){\n      return vec4(base.rgb * (1.0 - overlay.a) + setlum(overlay.rgb, lum(base.rgb)) * overlay.a, base.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 base = texture(iChannel0, uv);\n    vec4 overlay = texture(iChannel1, uv);\n    //overlayBlend Filter\n    if(uv.x<.25)fragColor = overlayBlendFilter(base, overlay);\n\t//softLightBlend Filter\n\telse if (uv.x<.5)fragColor = softLightBlendFilter(base, overlay);\n\t//imageAddBlend Filter\n\telse if (uv.x<.75)fragColor = imageAddBlendFilter(base, overlay);\n\t//imageColorBlend Filter\n\telse fragColor = imageColorBlendFilter(base, overlay);\n\t//separator\n\tif( mod(abs(uv.x+.5/iResolution.y),.25)<0.5/iResolution.y ) fragColor = vec4(1.);\n}","name":"Image","description":"","type":"image"}]}