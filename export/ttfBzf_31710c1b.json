{"ver":"0.1","info":{"id":"ttfBzf","date":"1597481708","viewed":76,"name":"Sphere_Noise_1","username":"TRASHTRASH","description":"my second ray marching shader\ntrying to learn and grow each day practice makes perfect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","beginner","perlin","sphere","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TRASHTRASH by Josh deLorimier\n//Praticing Ray Marching Daily\n//my niece's favorite color is RED\n//trying to post daily exercises keeping it simple today\n\n#define MAX_STEPS 60\n#define MAX_DIST 30.0\n#define SURF_DIST 0.001\n#define BPM 123.\n//simplex noise from Patricio Gonzalez Vivo\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0);} \n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nmat2 Rot(float a) {\n float s = sin(a);\n float c = cos(a);\n  return mat2(c,-s,s,c);\n}\n\n//geo                      \nfloat map(vec3 p) {\n    float b = iTime*BPM/60.;\n   float n1 = snoise(p.xy+b);\n   float n2 = snoise(p.xx+b);\n    float n3 = n1*n2;\n    vec3 sp = vec3(n1,n2*n3,n2)/6.;\n    sp.xz *= Rot(iTime*0.5);\n    sp.yz *= Rot(iTime*0.9);\n  \tfloat s = length(p-sp)-5.0;\n    return s;\n}\n\n                  \n//marcher\nfloat RM(vec3 ro, vec3 rd) {\n \tfloat or = 0.;\n    for(int i=0;i<MAX_STEPS;++i){\n     \tvec3 p = ro + rd * or;\n        float sc = map(p);\n        if(or>MAX_DIST || abs(sc)<SURF_DIST) break;\n        or += sc;\n    }\n    return or;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 norm(vec3 p) {\n \tfloat d = map(p);\n    vec2 e = vec2(.001, 0.);\n    vec3 n = d - vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx));\n    return normalize(n);\n}\n\nfloat shade(vec3 p, vec3 rd, vec3 n) {\n \tvec3 lp = vec3(-5.,6.,-2.);\n    vec3 l = normalize(lp-p);\n   \tfloat col = 0.;\n    float dif = clamp(dot(n,l)*.5+.5,0.,1.);\n    float d = RM(p+n*SURF_DIST*2., l);\n    float fr = pow(1.0+dot(n, rd),4.0);\n    float sp = pow(max(dot(reflect(-l, n),-rd),0.0),80.);\n   \tfloat ao = (1.0 - fr);\n   \tfloat fd = 1.0 - dif;\n    col = sp + max(fr, 0.5) + dif * ao;\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n   \tvec3 col = vec3(0.0);\n    vec3 ro = vec3(0., 4., 10.);\n    ro.yz *= Rot(-m.y);\n    ro.xz *= Rot(-m.x);\n   \tvec3 rd = R(uv, ro, vec3(0,0,0),1.);\n    float d = RM(ro, rd);\n    float n1 = snoise((uv.yx)+(iTime*BPM/60.));\n    vec3 fog = mix(vec3(SURF_DIST*3.), vec3(1.,0.,0.)+n1+0.4, (uv.y + .58)*2.);\n    float prod = 1.0;\n    if(d<MAX_DIST) {\n       vec3 p = ro + rd * d;\n       vec3 n = norm(p);\n       float dif = shade(p,rd, n);\n       vec3 c1 = vec3(1.,0.,0.)/2.;\n       col = vec3(dif)*c1;\n       col *= col;\n    } else {\n    \tcol += fog;\n        col*col;\n    }\n    col = pow(col, vec3(.4545));\n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}