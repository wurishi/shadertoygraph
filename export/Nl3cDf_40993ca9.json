{"ver":"0.1","info":{"id":"Nl3cDf","date":"1660634732","viewed":315,"name":"BRDF TEST","username":"zyl","description":"BRDF TEST","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfPlane(vec3 p){\n    return p.y + 0.5;\n}\n\nfloat sdfCircle(vec3 p){\n    return length(p - vec3(0.,.5,0.)) - 1.2;\n}\n\nfloat sdfRect(vec3 p){\n    vec3 b = vec3(1.,1.,1.);\n    vec3 q = abs(p - vec3(0.,0.5,0.)) - b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat sdfCombo(vec3 p){\n    return min(sdfRect(p),sdfCircle(p));\n}\n\nfloat map(vec3 p){\n    return min(sdfPlane(p),sdfCombo(p));\n}\n\nfloat rayMatch(vec3 ro,vec3 rd){\n    float d = 0.;\n    for(int i = 0;i < 255;i++){\n        vec3 p = ro + rd * d;\n        float sd = map(p);\n        d = d + sd;\n        if(sd < 0.001 || d > 40.0){\n            break;\n        }\n    }\n    return d;\n}\n\nfloat shadow(vec3 ro,vec3 rd){\n    float hit = 1.;\n    float t = 0.02;\n    \n    for(int i = 0;i < 255;i++){\n        vec3 p = ro + rd * t;\n        float h = map(p);\n        if(h < 0.001){\n            return 0.;\n        }\n        t += h;\n        hit = min(hit, 10. * h / t);\n        if(t >= 10.0){\n            break;\n        }\n    }\n    return clamp(hit,0.,1.);\n}\n\nmat3 cameraToWorld(vec3 ro,vec3 lookAt){\n    vec3 a = normalize(lookAt - ro);\n    vec3 b = cross(vec3(0.,1.,0),a);\n    vec3 c = cross(a,b);\n    return mat3(b,c,a);\n}\n\nvec3 normal(vec3 p){\n    float d = map(p);\n    vec2 dd = vec2(0.001,0.);\n    float dx = d - map(p - dd.xyy);\n    float dy = d - map(p - dd.yxy);\n    float dz = d - map(p - dd.yyx);\n    return normalize(vec3(dx,dy,dz));\n}\n\nfloat disney_a(float f90,float k){\n    return 1. + (f90 - 1.) * pow(1. - k,5.);\n}\n\nfloat disney_f90(float rough,float HdotL){\n    return 0.5 + 2. * rough * HdotL * HdotL;\n}\n\nvec3 disney_diffuse(vec3 color,float rough,float HdotL,float NdotL,float NdotV){\n    float f90 = disney_f90(rough,HdotL);\n    return color / 3.14 * disney_a(f90,NdotL) * disney_a(f90,NdotV);\n}\n\nfloat ggx(float rough,float NdotH){\n    float rr = rough * rough;\n    float num = max(3.14 * pow(NdotH * NdotH * (rr - 1.) + 1.,2.),0.001);\n    return rr / num;\n}\n\nfloat smith_ggx(float k,float d){\n    return d / (d * (1. - k) + k);\n}\n\nfloat smith(float rough,float NdotV,float NdotL){\n    float a = pow((rough + 1.) / 2.,2.);\n    float k = a / 2.;\n    return smith_ggx(k,NdotV) * smith_ggx(k,NdotL);\n}\n\nvec3 fresnel(vec3 f0,float HdotV){\n    return f0 + (1. - f0) * pow(1. - HdotV,5.);\n}\n\nvec3 g_specular(vec3 baseColor,float rough,float NdotH,float NdotV,float NdotL,float HdotV){\n    return ggx(rough,NdotH) * smith(rough,NdotV,NdotL) * fresnel(baseColor,HdotV) / (4. * NdotL * NdotV);\n}\n\n\nvec3 calLightColor(vec3 rd,vec3 p,vec3 n,vec3 lp,vec3 lc){\n        vec3 sp = p + n * 0.002;\n        vec3 col = vec3(0.);\n        vec3 l = normalize(lp - p);\n        vec3 v = normalize(-rd);\n        vec3 h = normalize(l + v);\n        \n        float NdotL = clamp(dot(n,l),0.,1.);\n        float HdotL = clamp(dot(h,l),0.,1.);\n        float NdotV = clamp(dot(n,v),0.,1.);\n        float NdotH = clamp(dot(n,h),0.,1.);\n        float HdotV = clamp(dot(h,v),0.,1.);\n        vec3 baseColor;\n        if(sdfPlane(p) < 0.001){\n            float k = mod(floor(p.x * 2.) + floor(p.z * 2.),2.);\n            baseColor = 0.4 + k * vec3(0.6);\n        }else{\n            baseColor = vec3(0.77,0.78,0.78);\n        }\n        float rough = 0.2;\n        \n        float shadow = shadow(sp,l);\n        vec3 diffuse = disney_diffuse(baseColor,rough,HdotL,NdotL,NdotV);\n        vec3 specular = g_specular(baseColor,rough,NdotH,NdotV,NdotL,HdotV);\n        vec3 k = shadow * clamp(diffuse + specular,0.,1.) * NdotL * 3.14;\n        col += lc * k;\n        return col;\n}\n\nvec3 rayMatchColor(in vec3 ro,in vec3 rd,out bool hit,out vec3 p,out vec3 n){\n    vec3 col = vec3(0.);\n    float d = rayMatch(ro,rd);\n    if(d <= 40.0){\n        p = ro + rd * d;\n        n = normal(p);\n        vec3 lp = vec3(0.,5.,-8.);\n        vec3 lc = vec3(0.7,0.7,0.7);\n        col += calLightColor(rd,p,n,lp,lc);\n        vec3 lp2 = vec3(0.,2.,4.);\n        vec3 lc2 = vec3(0.3,0.3,0.3);\n        col += calLightColor(rd,p,n,lp2,lc2);\n        hit = true;\n    }else{\n        hit = false;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(5. * cos(iTime),3.,5. * sin(iTime));\n    vec3 rd = cameraToWorld(ro,vec3(0.,0.,0.)) * vec3(uv,1.);\n    \n    vec3 col = vec3(0.);\n    bool hit;\n    vec3 p;\n    vec3 n;\n    col += rayMatchColor(ro,rd,hit,p,n);\n    if(hit && sdfCombo(p) < 0.001){\n        vec3 rro = p + n * 0.002;\n        vec3 rrd = normalize(reflect(normalize(rd),n));\n        vec3 pp;\n        vec3 nn;\n        vec3 rColor = rayMatchColor(rro,rrd,hit,pp,nn) * 0.64;\n        col += rColor;\n    }\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}