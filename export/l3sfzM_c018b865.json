{"ver":"0.1","info":{"id":"l3sfzM","date":"1728209773","viewed":47,"name":"diffraction gratingdtd","username":"bailesdtd","description":"quick diffraction grating emulation inspired by the recent 3blue1brown video on holograms. \n\nthe math may not be correct, this is just based on what I think I know about how wave interference works.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["diffraction","3b1b"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2831853\n#define GRATE_HEIGHT -0.5\n\n//comment out to see the absolute amplitude of the wave\n// otherwise red is negative, blue is positive\n#define USE_COL\n\n// uncomment to control brightness and frequency with mouse (hacky)\n//#define CLIP_BRIGHTNESS_CONTROL\n//define FREQ_CONTROL\n\nfloat ss(float c){\n    return smoothstep(3./iResolution.y,0.0,c);\n}\n\n#ifdef USE_COL\nvec3 amp2col(float a)\n{\n    return max(vec3(0),a*vec3(-1,0,1));\n}\n#else\nvec3 amp2col(float a)\n{\n    return vec3(abs(a));\n}\n#endif\n\nfloat wave(vec2 uv,float xOff, float frequency, float phase)\n{\n    float theta = length(uv-vec2(xOff,GRATE_HEIGHT));\n    return sin((theta*frequency-phase)*TAU)/(theta*theta+1.0);\n}\n\nfloat flatwave(float y, float frequency, float phase, float div)\n{\n    return sin(TAU*(y*frequency-phase))/div;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float barrierWidth = 0.005, slitWidth = 0.01;\n\n    #ifdef FREQ_CONTROL\n    float frequency = 3.0+exp(5.0*iMouse.y/iResolution.y);\n    #else\n    float frequency = 20.0;\n    #endif\n    \n    float numSlits = 8.0, \n        amplitude = 0.0, \n        min_d = 1e6,\n        grateWidth = 0.2;\n        \n    for(float x = -grateWidth; x <= grateWidth; x+=(2.0*grateWidth)/(numSlits-1.0)){\n        //vertical bar sdf at slit x position\n        min_d = min(min_d,abs(uv.x-x)-slitWidth*0.5);\n        amplitude += uv.y>GRATE_HEIGHT?wave(uv, x, frequency, iTime):flatwave(uv.y,frequency,iTime,numSlits);\n    }\n    amplitude /= numSlits;\n    \n    #ifdef CLIP_BRIGHTNESS_CONTROL\n    float brightness = 5.0*iMouse.x/iResolution.x;\n    amplitude *= brightness;\n    amplitude = tanh(amplitude);\n    #endif\n\n   \n    // computing horizontal bar and subtracting vertical bars \n    min_d = max(-min_d, abs(uv.y-GRATE_HEIGHT)-barrierWidth*0.5);\n    \n    fragColor = vec4(amp2col(amplitude)+ss(min_d)*vec3(1),1.0);\n}","name":"Image","description":"","type":"image"}]}