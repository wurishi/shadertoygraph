{"ver":"0.1","info":{"id":"Ns2SRR","date":"1619605847","viewed":174,"name":"Reaction Diffusion Attempt","username":"Krafpy","description":"Basic implementation of reaction diffusion. Direct implementation of : https://www.karlsims.com/rd.html","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","diffusion","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Use the mouse to place bubbles !\n\nfloat map(ivec2 p){\n    vec2 ab = texelFetch(iChannel0, p, 0).xy;\n    return clamp(ab.x - ab.y, 0., 1.);\n}\n\nvec2 grad(ivec2 p){\n    ivec2 h = ivec2(1, 0);\n    ivec2 res = ivec2(iResolution.xy);\n    return vec2(map(wrap(p + h.xy)) - map(wrap(p - h.xy)),\n                map(wrap(p + h.yx)) - map(wrap(p - h.yx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    ivec2 p = ivec2(fragCoord);\n    \n    vec2 ab = texelFetch(iChannel0, p, 0).rg;\n    \n    float k = clamp(ab.x - ab.y, 0., 1.);\n    vec3 col = mix(vec3(1., 0.3, 0.5), vec3(0.3, 0.2, 0.4)*0.5, k);\n    \n    vec2 g = grad(p);\n    float d1 = clamp01(dot(g, vec2(1.)));\n    float d2 = clamp01(dot(g, vec2(-1.)));\n    col = mix(col, vec3(1.), d1*k*2.);\n    col = mix(col, vec3(0.4,1.,0.5), d2*k*2.);\n        \n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Comment that line to remove autochange and set I to the desired index\n#define CHANGE_RATE 20.\n#define N 5\n#define I 4\n\nconst float da = 1.0;\nconst float db = 0.5;\n\n// example values from : https://mrob.com/pub/comp/xmorphia/pearson-classes.html\nconst float[N] fs = float[](0.010, 0.026, 0.014, 0.030, 0.038);\nconst float[N] ks = float[](0.047, 0.055, 0.047, 0.055, 0.061);\n\nvec2 laplace(ivec2 p){\n    ivec3 h = ivec3(1, 0, -1);\n    ivec2 res = ivec2(iResolution.xy);\n    \n    vec4 sum = texelFetch(iChannel0, p, 0) * -1.;\n    \n    sum += texelFetch(iChannel0, wrap(p + h.xy), 0) * 0.2;\n    sum += texelFetch(iChannel0, wrap(p - h.xy), 0) * 0.2;\n    sum += texelFetch(iChannel0, wrap(p + h.yx), 0) * 0.2;\n    sum += texelFetch(iChannel0, wrap(p - h.yx), 0) * 0.2;\n    \n    sum += texelFetch(iChannel0, wrap(p + h.xx), 0) * 0.05;\n    sum += texelFetch(iChannel0, wrap(p - h.xx), 0) * 0.05;\n    \n    sum += texelFetch(iChannel0, wrap(p + h.xz), 0) * 0.05;\n    sum += texelFetch(iChannel0, wrap(p + h.zx), 0) * 0.05;\n    \n    return sum.xy;\n    \n    return sum.xy;\n}\n\nvec2 place(vec2 p, vec2 c, vec2 col){\n    return mix(col, vec2(0.,1.), smoothstep(4.,3.,length(p-c)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    ivec2 p = ivec2(fragCoord);\n    \n    if(iFrame == 0){\n        fragColor = vec4(1., 0., 0, 1.);\n        for(float i = 0.; i < 12.; ++i){\n            vec2 c = vec2(hash(i), hash(i + 13.1541)) * iResolution.xy;\n            fragColor.xy += place(fragCoord.xy, c, fragColor.xy);\n        }\n        /*if(length((uv-0.5) * vec2(iResolution.x/iResolution.y, 1.)) < 0.01){\n            fragColor = vec4(1., 1., 0., 1.);\n        } else {\n            fragColor = vec4(1., 0., 0., 1.);\n        }*/\n    } else {\n        #ifdef CHANGE_RATE\n        //int i = int(hash(floor(iTime / CHANGE_RATE)) * float(N));\n        int i = int(floor(iTime / CHANGE_RATE)) % N;\n        float f = fs[i];\n        float k = ks[i];\n        #else\n        float f = fs[I];\n        float k = ks[I];\n        #endif\n        \n        vec2 ab = texelFetch(iChannel0, p, 0).xy;\n        float a = ab.x;\n        float b = ab.y;\n\n        vec2 lap = laplace(p);\n\n        float na = a + (da*lap.x - a*b*b + f*(1.-a));\n        float nb = b + (db*lap.y + a*b*b - (k+f)*b);\n\n        ab = clamp(vec2(na, nb), 0., 1.);\n        \n        fragColor = vec4(ab, 0., 1.);\n    }\n    \n    if(iMouse.z > 0.){\n        fragColor.xy = place(fragCoord.xy, iMouse.xy, fragColor.xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define wrap(x) (x+res)%res\n#define clamp01(x) clamp(x,0.,1.)\n\nfloat hash(float x){\n    return fract(sin(x)*44312.15);\n}","name":"Common","description":"","type":"common"}]}