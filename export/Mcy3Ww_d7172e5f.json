{"ver":"0.1","info":{"id":"Mcy3Ww","date":"1713681188","viewed":25,"name":"Swinger","username":"zma","description":"Just swing it.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","beginer","concepts","poppin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nvec3 rotation(in vec3 p, float an){\n    p.y += 1.5;\n    p.xy *= mat2(cos(an),-sin(an),sin(an),cos(an));\n    return p;\n}\n\nvec3 rotation_xz(in vec3 p, float an){\n    p.xz *= mat2(cos(an),-sin(an),sin(an),cos(an));\n    return p;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b )\n{\n  vec3 q1 = rotation(p, sin(2.*iTime));\n  vec3 q = abs(q1) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p){\n\n    \n    float s1 = sdRoundBox(vec3(p.x, p.y-3.5 , p.z), vec3(0.5, 0.2, 0.1));\n    float s2 = sdVerticalCapsule(vec3(p.x, p.y, p.z), 2.0, 0.15);\n    //float h = clamp(0.5 + 0.5*(s1-s2)/0.25 ,0.0, 1.0);\n     return min(s1, s2);\n    //else return s2;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Camera\n    vec3 ro = vec3(0.0, -1.0, -4.0);\n    vec3 ta = vec3(0.0, -1.0, 0.0);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(ww, uu));\n    vec2 p = (2.*fragCoord.xy - iResolution.xy)/iResolution.x;\n    \n    mat3 camera = mat3(uu, vv, ww);\n    \n    vec3 rd = camera * vec3(p.x, p.y, 1.0);\n    float fT = sin(1.5*iTime);\n    //render\n    float tmax = 5.;\n    float t = 0.3;\n    for(int i=0; i<256; i++){\n        vec3 pos = ro + t*rd;\n        float dist = map(rotation(pos, fT));\n        if(t > tmax || dist < 0.001) break;\n        t += dist;\n    }\n    vec3 col = vec3(0.0);\n    if(t < tmax){\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(rotation(pos, fT));\n        vec3  lig = normalize(vec3(0.5,0.5,-0.5));\n        float dif = clamp(dot(nor,lig),0.0,1.0);\n        col = dif*vec3(1.0,0.9,0.8);\n   \n    }\n    \n    col = sqrt(col);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}