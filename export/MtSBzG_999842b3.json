{"ver":"0.1","info":{"id":"MtSBzG","date":"1516212434","viewed":573,"name":"plain volumetric shader template","username":"public_int_i","description":"3d volumetric shader template","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["ray","clouds","volumetric","template","shader","march","render"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash(vec2 p) {\n    return fract(dot(p+vec2(.36834,.723), normalize(fract(p.yx*73.91374)+1e-4))*7.38734);\n}\n\nvoid mainImage( out vec4 o, in vec2 u )\n{\n    float time = iTime*30.;\n    //camera ray origin and direction\n\tvec3 ro = time*vec3(.3,.2,1), rd = normalize(vec3((u*2.-iResolution.xy)/iResolution.x,1.));\n    \n    //ray march\n    vec4 s = vec4(0.);//color sum\n    for (float j = 1.; j < 32.; j++) {\n        //current ray position\n        vec3 p = ro+rd*pow(j+hash(u+j*.1),1.2);\n        \n        //scene function\n\t\ts += pow(texture(iChannel0,p*.003).x,1.)*.04;\n        if (s.w >= 1.) break;\n    }\n    \n    //blend background and post fx\n    o = mix(vec4(0),s,s.w);\n}","name":"Image","description":"","type":"image"}]}