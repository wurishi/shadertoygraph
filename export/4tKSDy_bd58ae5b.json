{"ver":"0.1","info":{"id":"4tKSDy","date":"1485837475","viewed":104,"name":"EGP Assignment 2","username":"vedantchaudhari","description":"EGP","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["egp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nmat3 blur = mat3 (\n    0.111, 0.111, 0.111,\n    0.111, 0.111, 0.111,\n    0.111, 0.111, 0.111\n    );\n\n\nmat3 sharpen = mat3 (\n     0., -1, 0.0,\n     -1, 5, -1,\n     0., -1, 0.0\n\t);\n\nmat3 edge = mat3 (\n    -1.0, -1.0, -1.0,\n    -1.0, 8.0, -1.0,\n    -1.0, -1.0, -1.0\n    );\n\nvec3 sample(const int x, const int y, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n    \n    return texture(iChannel0, uv).xyz;\n}\n\nvec3 sampleBackground(const int x, const int y, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[1].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[1].xy;\n    \n    return texture(iChannel1, uv).xyz;\n}\n\nvec3 filter(in vec2 fragCoord, mat3 kernel, int flag)\n{\n    if (flag == 0)\n    {\n    \tvec3 sum = sample(-1, -1, fragCoord) * kernel[0][0]\n     + sample(-1, 0, fragCoord) * kernel[0][1]\n     + sample(-1, 1, fragCoord) * kernel[0][2]\n     + sample( 0, -1, fragCoord) * kernel[1][0]\n     + sample( 0, 0, fragCoord) * kernel[1][1]\n     + sample( 0, 1, fragCoord) * kernel[1][2]\n     + sample( 1, -1, fragCoord) * kernel[2][0]\n     + sample( 1, 0, fragCoord) * kernel[2][1]\n     + sample( 1, 1, fragCoord) * kernel[2][2];\n\n     return sum;    \n    }\n    else\n    {\n    \tvec3 sum = sampleBackground(-1, -1, fragCoord) * kernel[0][0]\n     + sampleBackground(-1, 0, fragCoord) * kernel[0][1]\n     + sampleBackground(-1, 1, fragCoord) * kernel[0][2]\n     + sampleBackground( 0, -1, fragCoord) * kernel[1][0]\n     + sampleBackground( 0, 0, fragCoord) * kernel[1][1]\n     + sampleBackground( 0, 1, fragCoord) * kernel[1][2]\n     + sampleBackground( 1, -1, fragCoord) * kernel[2][0]\n     + sampleBackground( 1, 0, fragCoord) * kernel[2][1]\n     + sampleBackground( 1, 1, fragCoord) * kernel[2][2];\n\n     return sum;      \n    }\n}\n\nconst float RADIUS = 0.2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// uv with aspect ratio correction\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec2 fc = fragCoord.xy;\n    \n    vec3 cfForeground = filter(fc, blur, 0);\n    vec3 cfBackground = filter(fc, sharpen, 1);\n\n    vec4 background = vec4(cfBackground, 0.7);\n    vec4 foreground = vec4(cfForeground, 1.0);\n    \n    vec2 mouseCenter = vec2(iMouse.x, iMouse.y);\n    \n    float mouseDistance = distance(fragCoord.xy, iMouse.xy) / iResolution.y;\n    \n    \n    if (mouseDistance > RADIUS)\n    {\n    \tfragColor = foreground;   \n    }\n    else\n    {\n    \t// Blend background into foreground and display it\n        float blend = 1.0 - (exp(RADIUS / mouseDistance) / 2.7);\n        \n        fragColor = mix(background, foreground, blend);\n    }\n}","name":"Image","description":"","type":"image"}]}