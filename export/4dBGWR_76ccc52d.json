{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n//------------------ ------------------------------------------\n// complex number operations\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cinv( vec2 z)  { float d = dot(z,z); return vec2( z.x, -z.y ) / d; }\nvec2 csqr( vec2 a ) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\nvec2 csqrt( vec2 z ) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\nvec2 cexp( vec2 z) {  return exp( z.x )*vec2( cos(z.y), sin(z.y) ); }\nvec2 clog( vec2 z) {  return vec2( 0.5*log(z.x*z.x+z.y*z.y), atan(z.y,z.x)); }\nvec2 csin( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*sin(z.x),(r-1.0/r)*cos(z.x));}\nvec2 ccos( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*cos(z.x),-(r-1.0/r)*sin(z.x));}\n//------------------------------------------------------------\n\nvec2 z0;\nvec2 c;\nfloat zoom= 1.0;\nfloat preci = 1e5;\nfloat eps = 1.0/1e5;\nfloat g = 1e10;\n\n\n\nvec2 f( vec2 x ){return cinv(x+z0)+ x-z0  ;}//Infinity\n//vec2 f( vec2 x ){return csqr(x+z0)- x+ z0  ;}\n//vec2 f( vec2 x ){return cdiv(x-z0 ,x+z0) ;}\n//vec2 f( vec2 x ){return csqr(x) + z0  ;}//Mandelbrot\n//vec2 f( vec2 x ){return csqr(x-z0) ;}//alternate Mandelbrot\n//vec2 f( vec2 x ){return csin(x)+ z0  ;}\n//vec2 f( vec2 x ){return csqr(z0+csin(x)) +ccos(z0) +c ;}\n//vec2 f( vec2 x ){return csin(x+cinv(z0))+cinv(z0) ;}\n//vec2 f( vec2 x ){return (cpow(x+1.0*csin(z0+x),-3.0))+c   ;}\n//vec2 f( vec2 x ){return (cpow(x+1.0*csin(z0+x),-2.0))-x +z0  ;}//flower dragon\n//vec2 f( vec2 x ){return (cpow(x+csin(z0+x),-2.4))-x +z0  ;}//flower dragon 2\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float range =4.0*zoom;\n    vec2 q = (fragCoord.xy-iMouse.xy) / iResolution.xy+(iMouse.xy==vec2(0.,0.)?0.:.5);\n    vec2 p = -0.5*range + range * q;\n    p.y *= iResolution.y/iResolution.x;\n\n\t\n\t\n    c = vec2( 0.0, 0.0 ) + \n        vec2( sin(0.2*iTime), cos(0.12*iTime) ) + \n\t0.5*vec2( sin(0.31*iTime), cos(0.33*iTime) );\n\n\n    // iterate\t\t\n\t\n    vec2 z = p;\n    vec2 z1 = vec2(1.0,-1.0);\n    z0=p;\n    \n    float h = 1e5;\n    float k=100.0;\n    float dz;\n\tvec4 dmin = vec4(preci);\n        \n    for(int i=0; i<100; i++ )\n\t{\n        vec2 prevz=z;\n       \n\n        // function\t\t\n\t\tz = f( z );\n\t\t\n\t\n        \n\t\tdz = dot(z-prevz,z-prevz);\n        dmin=min(dmin, vec4(\n            abs(0.0+z.y + 0.5*sin(z.x)), \n            abs(1.0+z.x + 0.5*sin(z.y)), \n            abs(dot(z-z0,z0)),\n            length( fract(z)-0.5) \n        ));\n\t\t\n\t\t// bailout\n        if( dz<eps ){\n            k = dz/eps;\n            z = k*z+(1.0-k)*prevz;\n            k = k+float(i);\n           break;\n        }\n        if( dz>preci ){\n            k = preci/dz;\n            z = k*z+(1.0-k)*prevz;\n            k = k+float(i);\n            break;\n            } \n\t\t\n\t}\n\t\n\t\n    vec3 color = vec3( dmin.w );\n\tcolor = mix( color, vec3(1.0,0.80,0.60),     min(1.0,pow(dmin.x*0.25,0.20)) );\n        color = mix( color, vec3(0.72,0.70,0.80),     min(1.0,pow(dmin.y*0.50,0.50)) );\n\tcolor = mix( color, vec3(1.00,1.00,1.00), 1.0-min(1.0,pow(dmin.z*1.00,0.15) ));\n\n\tcolor = 1.25*color*color;\n\n    fragColor = vec4( color, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dBGWR","date":"1385587036","viewed":1122,"name":"Vision of infinity","username":"guil","description":"Fractal based on a very simple formula : f(z) = 1/(z+c)+z-c\nColor rendering and orbit trap borrowed from IQ in https://www.shadertoy.com/view/4dfGRn","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""}}