{"ver":"0.1","info":{"id":"lttBDM","date":"1539898376","viewed":850,"name":"simple display of audio data","username":"XIX","description":"Show the audio data so I can visually check what data shadertoy is providing,\n\nThe maximum FFT frequency seems to be half what I would expect and slowly fades out similar to a graphic equaliser display.\n","likes":6,"published":3,"flags":4,"usePreview":0,"tags":["audio","display","outlands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// start with black\n    fragColor=vec4(0);\n\n// normalise x,y coords\n    vec2 uv = fragCoord/iResolution.xy;\n\n// i goes 0 to +1 from left to right\n    float i=uv.x;\n\n// v goes -1 to +1 from bottom to top\n    float v=(uv.y-0.5)*2.0;\n\n// a simple horizontal octave measuring scale in dark red \n    fragColor.r += fract(log(i*iSampleRate/32.70)/log(2.0))*0.25;\n// each black to red horizontal band is an octave in the FFT\n// the right edge of the screen is 11025hz and the left edge 0hz\n// the unfinished octave on the far right is C9-E9ish\n// the octave that is almost in the center is C8-C9\n// to the left of that is C7-C8 then C6-C7 then C5-C6 etc\n\n// read the fft bucket\n    float fft=texture(iChannel0,vec2(i,0.25)).r;    \n\n// add blue if we are closer to center than fft value\n    if(abs(v)<=fft)\n    {\n\t    fragColor.b += 1.0;\n    }\n    \n// read the wav sample and convert from 0 to 1 into -1 to +1\n    float wav=(texture(iChannel0,vec2(i,0.75)).r-0.5)*2.0;\n\n// add green if we are closer to center than wav value\n    if( ( (v<=0.0) && (v>=wav) ) || ( (v>=0.0) && (v<=wav) ) )\n    {\n\t    fragColor.g += 1.0;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}