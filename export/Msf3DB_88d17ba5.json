{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//my first attempt at raymarching\n//heavily based on https://www.shadertoy.com/view/Xds3zN by IQ\n//give me a shout if you have any suggestions/improvements\n//ndxbxrme\n\nfloat pn(vec3 p) {\n\t//noise function by CPU https://www.shadertoy.com/view/4sfGRH\n    vec3 i = floor(p); \n\tvec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n    vec3 f = cos((p-i)*3.141592653589793)*(-.5) + .5;  \n\ta = mix(sin(cos(a)*a), sin(cos(1.+a)*(1.+a)), f.x);\n    a.xy = mix(a.xz, a.yw, f.y);   \n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat getNoise(vec2 pos, float pulse) {\n\tvec3 q = vec3(pos * 2., pos.x-pos.y + iTime * 0.3);\n\tfloat b = (pulse * 1.6) + pn(q * 2.) + 2.8;\n\tb +=  .25 * pn(q * 4.);\n\tb +=  .25  * pn(q * 8.);\n\tb +=  .5  * pn(vec3(pos, pos.x-pos.y + iTime * 0.3) * 12.23);\n\tb = pow(b,0.5);\t\n\treturn b;\n}\n\nvec2 rotate(vec2 uv, float d)\n{\n\tvec2 tuv = uv;\t\t\n\tuv.x = tuv.x*cos(d)-tuv.y*sin(d);\n\tuv.y = tuv.x*sin(d)+tuv.y*cos(d);\n\treturn uv;\n}\n\nvec3 sun(vec2 pos, float size, float pulse)\n{\n\t//scale the scene\n\tpos *= size;\n\t//make a circle\n\tfloat r = length(pos);\n    float f = 0.23 / r;\n\t//tighten it a little\n    f *= smoothstep(0.2, 0.8, f * .5);\n\t//bring the noise\n\tfloat b = getNoise(pos, pulse);\n\t//mix circle and noise\n\tb = mix(0.0, b, f);\n\tb *= f;\n\tb *= 0.5;\n\t//draw the sun\n \treturn vec3(b, 0.67 * b  * (0.7 + sin(iTime * 7.) * 0.01) , 0.0);\n}\n\nvec3 binaryStar(vec2 uv, float size, float pulse)\n{\n\t//scale the scene\n\tuv *= size;\n\t//rotate the scene\n\t///uv = rotate(uv, sin(iTime * .25));\n\t//draw the suns\n\treturn sun(uv + vec2(0.,0.), 1.0, pulse) \n\t\t+ sun(uv + vec2(sin(iTime)*0.4, cos(iTime)*0.1), 3.0-cos(iTime) * 1.4, pulse);\n}\n\nvec3 sky(vec3 ro, vec3 rd)\n{\n\trd.y -= 0.2;\n\tfloat c = pow(rd.x,2.0) * 0.2 + pow(rd.y,2.0);\n  \tvec3 col = vec3(c * 0.25,c * 0.8,c * 0.8);\t\n\tcol += binaryStar(rd.xy, 1.0, 1.0);\n\treturn col;\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n\tp.y = pow(p.y, 13.0);\n    return length(p)-s;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat dunes(in vec3 pos)\n{\n\treturn 0.3 * sin(pos.z + pn(pos))* sin(pos.x) * 1.5;\n}\n\nvec2 map(in vec3 pos)\n{\n\t \n\tvec2 res = opU(vec2(sdPlane(pos) + dunes(pos) , 1.0),\n\t\t\t\t   vec2( \n\t\t\t\t\t   sdSphere(    \n\t\t\t\t\t\t   pos-vec3( 0.0,dunes(pos)-.6, 0.0 - iTime + pn(pos)),\n\t\t\t\t\t\t   0.025 ),\n\t\t\t\t\t46.9 ) );\n\treturn res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd )\n{\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<60; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;//break;\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t    m = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n\t\tif( t<maxt )\n\t\t{\n        float h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += 0.02;\n\t\t}\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n\tvec3 col = sky(ro,rd);\n\tvec2 res = castRay(ro, rd, 20.0);\t\n\tfloat t = res.x;\n\tfloat m = res.y;\n\tif(m>-0.5)\n\t{\n\t\tvec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n\n\t\t//col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\tvec3 newcol = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) ) + getNoise(pos.xx * 5.2, 1.0) * 0.25;\n\t\t\n        float ao = calcAO( pos, nor );\n\n\t\tvec3 lig = normalize( vec3(-sin(iTime)*0.8, 0.8, -4.7) );\n\t\tfloat amb = clamp( 0.5+0.2*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n\t\tfloat sh = 1.0;\n\t\tif( dif>0.001 ) { sh = softshadow( pos, lig, 0.02, 10.0, 7.0 ); dif *= sh; }\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 0.20*amb*vec3(0.10,0.11,0.13)*ao;\n        brdf += 0.20*bac*vec3(0.15,0.15,0.15)*ao;\n        brdf += 1.20*dif*vec3(1.00,0.90,0.70);\n\n\t\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 0.2 );\n\t\tfloat spe = sh*pow(pp,32.0);\n\t\tfloat fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n\t\tfloat fog = exp(-0.05 * res.x*res.x);\n\t\tnewcol = newcol*brdf + vec3(1.0)*newcol*spe + 0.2*fre*(0.5+0.5*newcol) ;\t\n\t\tcol = mix(col, newcol, fog);\n\t}\n\t//col *= exp( -0.01*t*t );\n\treturn clamp(col, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\tvec3 ro = vec3( sin(iTime)*0.2, 0.05, 2.5 - iTime);\n\tvec3 ta = vec3( -0.0, -0.0, 0.0 - iTime);\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n\t\n    vec3 col = render( ro, rd );\n\t\n\tcol = sqrt( col );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Msf3DB","date":"1378308207","viewed":1306,"name":"Desert Chase","username":"ndxbxrme","description":"Chase the teleporting thingy across distant digital sands.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","3d","noise","raymarch","landscape"],"hasliked":0,"parentid":"","parentname":""}}