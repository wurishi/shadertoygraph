{"ver":"0.1","info":{"id":"MftXzH","date":"1713622116","viewed":85,"name":"Raymarched Blender Default Scene","username":"PixelCopernicus","description":"Blender default scene using mostly raymarching.\n\nFeel free to let me know how I could've improved it in the comments.\n\nAny help is welcome, specially if it's related to the code itself (good practices, correct implementation, missed optimizations, etc).","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","blender"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ROLL 3.141592 * ((iMouse.y * 2. - iResolution.y) / iResolution.y) * .5\n#define PITCH 3.141592 * -((iMouse.x * 2. - iResolution.x) / iResolution.x)\n\n#define ID_DEFAULT_CUBE 0\n#define ID_Y_AXIS 1\n#define ID_X_AXIS 2\n#define ID_BACKGROUND 3\n#define ID_FLOOR_GRID 4\n#define ID_Z_AXIS 5\n\nvec3 rotX( vec3 p, float alpha )\n{\n    mat3 rot = mat3(\n        1., 0., 0.,\n        0., cos(alpha), -sin(alpha),\n        0., sin(alpha), cos(alpha)\n    );\n    \n    return rot * p;\n}\n\nvec3 rotY( vec3 p, float alpha )\n{\n    mat3 rot = mat3(\n        cos(alpha), 0., sin(alpha),\n        0., 1., 0.,\n        -sin(alpha), 0., cos(alpha)\n    );\n    \n    return rot * p;\n}\n\nfloat sdCube( vec3 p, float b )\n{\n  vec3 q = abs(p) - vec3(b);\n  \n  return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdSphere( vec3 p, float r )\n{\n    return length(p) - r;\n}\n\nvec3 getColor( in int id )\n{\n    switch (id)\n    {\n        case ID_DEFAULT_CUBE:\n            return vec3(.65);\n            \n        case ID_Y_AXIS:\n            return vec3(99., 138., 40.) / 255.;\n            \n        case ID_X_AXIS:\n            return vec3(151., 60., 74.) / 255.;\n            \n        case ID_BACKGROUND:\n            return vec3(63. / 255.);\n            \n        case ID_FLOOR_GRID:\n            return vec3(75. / 255.);\n        \n        case ID_Z_AXIS:\n            return vec3(47., 132., 227.) / 255.;\n        \n        default: //Error\n            return vec3(1., 0., 0.);\n    }\n}\n\nvec3 getBackground( in vec3 ro, in vec3 rd )\n{\n    if (ro.y * rd.y > 0.)\n        return getColor(ID_BACKGROUND);\n\n    vec3 p = ro + vec3( - rd.x * (ro.y / rd.y), - ro.y, - rd.z * (ro.y / rd.y));\n\n    if (abs(p.x) < .03)\n        return getColor(ID_Y_AXIS);\n        \n    if (abs(p.z) < .03)\n        return getColor(ID_X_AXIS);\n\n    if (abs(fract(p.x * .1)) < .005 || abs(fract(p.z * .1)) < .005)\n        return getColor(ID_FLOOR_GRID);\n\n    if (abs(fract(p.x)) < .025 || abs(fract(p.z)) < .025)\n        return getColor(ID_FLOOR_GRID);\n\n    return getColor(ID_BACKGROUND);\n}\n\nvec3 shade (in int id, in vec3 col, in vec3 p )\n{\n    if (id != ID_DEFAULT_CUBE)\n        return col;\n    \n    vec3 ld = normalize(vec3(-1., 3., -2.));\n    \n    ld = rotX(ld, ROLL);\n    ld = rotY(ld, PITCH);\n    \n    vec3 norm;\n        \n    if (abs(p.x) >= abs(p.y) && abs(p.x) >= abs(p.z))\n    {\n        norm = vec3(p.x, 0., 0.);\n    }\n    else if (abs(p.y) >= abs(p.x) && abs(p.y) >= abs(p.z))\n    {\n        norm = vec3(0., p.y, 0.);\n    }\n    else\n    {\n        norm = vec3(0., 0., p.z);\n    }\n        \n    norm = normalize(norm);\n    \n    return + col * (.5 + .5* dot(norm, ld));\n}\n\nfloat map( out int id, in vec3 p )\n{\n    float aux, d = 10000.;\n    \n    id = -1;\n    \n    aux = sdCube(p, 1.025);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = 0;\n    }\n    \n    return d;\n}\n\nvec3 raymarch( vec3 ro, vec3 rd )\n{\n    vec3 col, p = ro;\n    \n    int id;\n    \n    for (int i = 0; i < 80; ++i)\n    {\n        float d = map(id, p);\n        \n        if (d < .0001)\n            break;\n        \n        p += rd * d;\n        \n        if (abs(p.x) + abs(p.y) + abs(p.z) > 1000.)\n            break;\n    }\n    \n    if (map(id, p) < .0001 && p.y * ro.y >= 0.)\n        return shade(id, getColor(id), p);\n    \n    col = getBackground(ro, rd);\n    \n    if (col != getColor(ID_BACKGROUND) || abs(p.x) + abs(p.y) + abs(p.z) > 1000.)\n        return col;\n        \n    return shade(id, getColor(id), p);\n}\n\nfloat gizmoMap( out int id, in vec3 p )\n{\n    float aux, d = 10000.;\n    \n    id = -1;\n    \n    aux = sdSphere(p - vec3(-6., 0., 0.), 2.);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = ID_X_AXIS;\n    }\n    \n    aux = sdSphere(p - vec3(6., 0., 0.), 2.);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = ID_X_AXIS;\n    }\n    \n    aux = sdSphere(p - vec3(0., 0., -6.), 2.);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = ID_Y_AXIS;\n    }\n    \n    aux = sdSphere(p - vec3(0., 0., 6.), 2.);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = ID_Y_AXIS;\n    }\n    \n    aux = sdSphere(p - vec3(0., 6., 0.), 2.);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = ID_Z_AXIS;\n    }\n    \n    aux = sdSphere(p - vec3(0., -6., 0.), 2.);\n    \n    if (aux < d)\n    {\n        d = aux;\n        id = ID_Z_AXIS;\n    }\n    \n    return d;\n}\n\nvec4 gizmo( vec3 ro, vec3 rd )\n{   \n    vec3 col, p = ro;\n    \n    int id;\n    \n    for (int i = 0; i < 80; ++i)\n    {\n        float d = gizmoMap(id, p);\n        \n        if (d < .0001)\n            break;\n        \n        p += rd * d;\n        \n        if (abs(p.x) + abs(p.y) + abs(p.z) > 1000.)\n            break;\n    }\n    \n    if (gizmoMap(id, p) < .0001)\n        return vec4(getColor(id), 1.);\n        \n    return vec4(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    vec3 ro = rotY(rotX(vec3(0., 0., -20.), ROLL), PITCH);\n    vec3 rd = rotY(rotX(normalize(vec3(uv, 2.)), ROLL), PITCH);\n\n    fragColor = vec4(raymarch(ro, rd), 1.0);\n\n    vec4 col;\n\n    uv -= vec2(iResolution.x / iResolution.y - .2, 1. - .2);\n\n    if (length(uv) <= .1)\n    {\n        uv /= .1;\n    \n        vec3 ro = rotY(rotX(vec3(0., 0., -20.), ROLL), PITCH);\n        vec3 rd = rotY(rotX(normalize(vec3(uv, 2.)), ROLL), PITCH);\n    \n        col = gizmo(ro, rd);\n        \n        if (col.a != 0.)\n            fragColor = col;\n    }\n}","name":"Image","description":"","type":"image"}]}