{"ver":"0.1","info":{"id":"Mcy3WW","date":"1712759644","viewed":652,"name":"Aurora Radar","username":"DasBooter","description":"Best seen with 30+ fps","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["noise","contour","short"],"hasliked":0,"parentid":"ldfczS","parentname":"isovalues 3"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O,  vec2 U )\n{\n\tO = texture( iChannel0, U / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// forked from here:\n// https://www.shadertoy.com/view/ldfczS\n\n// --- noise from procedural pseudo-Perlin (better but not so nice derivatives) ---------\n                    // ( adapted from IQ )\n\nfloat noise3( vec3 x ) {\n    vec3 p = floor(x),f = fract(x);\n\n    f = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    return mix( mix(mix( hash3(p+vec3(0,0,0)), hash3(p+vec3(1,0,0)),f.x),       // triilinear interp\n                    mix( hash3(p+vec3(0,1,0)), hash3(p+vec3(1,1,0)),f.x),f.y),\n                mix(mix( hash3(p+vec3(0,0,1)), hash3(p+vec3(1,0,1)),f.x),       \n                    mix( hash3(p+vec3(0,1,1)), hash3(p+vec3(1,1,1)),f.x),f.y), f.z);\n}\n\n#define noise(x) (noise3(x)+noise3(x+11.5)) / 2. // pseudoperlin improvement from foxes idea \n\n\n\nvoid mainImage( out vec4 O, vec2 U ) // ------------ draw isovalues\n{ \n    vec2 R = iResolution.xy;\n    float n = noise(vec3(U*2.0/min(R.x,R.y), .03*iTime)),//first num controlls zoom, second speed.\n          v = sin(26.28*(sin(iTime / 25.0) + 4.)*n),\n        t = iTime;\n    \n    v = smoothstep(1.,0., .8*abs(v)/fwidth(v));\n    \n\tO = mix( exp(-50./R.y )* texture( iChannel0, (U+vec2(cos(0.3*iTime),sin(0.5*t)))/R), // .97\n             .5+.5*sin(05.*n+(sin(iTime / 10.0) * 5.0)+vec4(0,2.1,-2.1,0)),\n             v );\n \n}","name":"Buffer A","description":"","type":"buffer"}]}