{"ver":"0.1","info":{"id":"DsSGzG","date":"1667931876","viewed":231,"name":"The One CUM","username":"LoganOracio","description":"One Cum to rule them all. One Cum to find them,\nOne Cum to bring them all and in the darkness bind them\nIn the Land of Mordor where the Shadows lie.","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["lotr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = mix(texture(iChannel0,uv),texture(iChannel1,uv),0.6);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = mix(texture(iChannel1,uv),texture(iChannel0,uv),0.05);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// I was too lazy to find a way to write elvish letters soooooooooo\n\n\n// Some of the Ray Marching stuff taken from mrange:\n\n// CC0: Wednesday messing around\n#define MAX_RAY_LENGTH  30.0\n#define MAX_RAY_MARCHES 100\n#define TOLERANCE       0.001\n#define NORM_OFF        0.01\n\n#define RING_SIZE 3.0\n#define RING_HEIGHT 0.3\n#define RING_GIRTH 2.3\n#define RING_ROT 0.3*iTime\n\nint g_hit     = 0;\n\nconst float raymarchFactor = 0.99;\n\nfloat smax(float a, float b, float k)\n{\n    return log(exp(k*a)+exp(k*b))/k;\n}\n\nfloat df(vec3 p) {\n    vec3 P = vec3(p.x,p.y*cos(RING_ROT)+p.z*-sin(RING_ROT),p.y*sin(RING_ROT)+p.z*cos(RING_ROT));\n    vec2 temp = vec2(length(P.xz)-RING_SIZE,P.y);\n    return sqrt(temp.x*temp.x+pow(abs(temp.y/RING_GIRTH),2.0))-RING_HEIGHT;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float ti) {\n  float t = ti;\n  int i = 0;\n  vec2 dti = vec2(1e10,0.0);\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    if (d<dti.x) { dti=vec2(d,t); }\n    t += raymarchFactor*d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; }\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 thin_film_interference(float fresnel)\n{\n    fresnel = mod(fresnel,1.0);\n    if(fresnel<0.333)\n    {\n        return mix(vec3(0.0,1.0,1.0),vec3(1.0,0.0,1.0),fresnel*3.0);\n    }\n    else if(fresnel<0.666)\n    {\n        return mix(vec3(1.0,0.0,1.0),vec3(1.0,1.0,0.0),(fresnel-0.333)*3.0);\n    }\n    else\n    {\n        return mix(vec3(1.0,1.0,0.0),vec3(0.0,1.0,1.0),(fresnel-0.666)*3.0);\n    }\n}\n\nvec2 cum_(vec2 uv)\n{\n    vec2 outuv = vec2(mod(uv.x*16.0,1.0),uv.y);\n    float let = mod(floor(uv.x*16.0),4.0);\n    if(let == 0.0)\n    {\n        outuv += vec2(3.0,11.0);\n    }\n    else if(let== 1.0)\n    {\n        outuv += vec2(5.0,10.0);\n    }\n    else if(let== 2.0)\n    {\n        outuv += vec2(13.0,11.0);\n    }\n    else\n    {\n        outuv += vec2(0.0,13.0);\n    }\n    return outuv/16.0;\n}\n\nvec3 render(vec2 p) {\n  \n  vec3 ro = vec3(cos(iTime*.4+iMouse.x/iResolution.x*7.0)*11.0, 0.0, sin(iTime*.4+iMouse.x/iResolution.x*7.0)*8.0);\n  vec3 la = vec3(0.0, 0.0, 0.0);\n  vec3 ww = normalize(la-ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  const float fov = 3.0;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww );\n  \n  g_hit = -1;\n  float t = rayMarch(ro, rd, 1.0);\n  int hit = g_hit;\n  \n  vec3 col = vec3(3.0,1.5,0.5)*(vec3(1.02)-sqrt(sqrt(texture(iChannel1,rd).zyy)));\n  if (t < MAX_RAY_LENGTH) {\n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    \n    vec3 P = vec3(p.x,p.y*cos(RING_ROT)+p.z*-sin(RING_ROT),p.y*sin(RING_ROT)+p.z*cos(RING_ROT));\n    vec3 N = vec3(n.x,n.y*cos(RING_ROT)+n.z*-sin(RING_ROT),n.y*sin(RING_ROT)+n.z*cos(RING_ROT));\n    \n    float inside = sign(dot(N,vec3(-P.x,0.0,-P.z)));\n    vec2 UV = vec2(atan(P.z,P.x)/6.28318530718+0.5,P.y*inside*.5+.5);\n    \n    vec3 fresnel = mix(vec3(0.65,0.65,0.7),vec3(1.0),pow(1.0-abs(dot(n,rd)),0.5));\n    col = fresnel*mix(thin_film_interference(2.3*pow(1.0-abs(dot(n,rd)),0.1)),vec3(1.2),0.8)*\n    vec3(1.4,0.5,0.0)*(vec3(1.02)-sqrt(sqrt(texture(iChannel0,r).zyy)))\n    +smoothstep(0.1,1.0,texture(iChannel2,cum_(UV)).x)*vec3(7.0,4.0,1.0);\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    vec3 col = render(uv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}