{"ver":"0.1","info":{"id":"3djSRc","date":"1554537022","viewed":163,"name":"Fast random placement on a grid","username":"evan","description":"Fast random placement on a grid","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From: https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 posInCell(vec2 cell) {\n  if (hash12(cell * 109.0) < 0.8) {\n    // Cell is empty, so return something really far off screen\n    return vec2(-100.0);\n  }\n  return cell + vec2(hash12(cell), hash12(cell * 33.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float s = 10.0 * pow(2.0, cos(iTime));\n  vec2 grid = fract(fragCoord.xy / s) * s;\n  vec2 cell = floor(fragCoord.xy / s);\n  float gridLines = clamp(2.0 - min(grid.x, grid.y), 0.0, 0.1);\n  float color = gridLines;\n\n  for (float x = -1.0; x <= 1.0; x += 1.0) {\n    for (float y = -1.0; y <= 1.0; y += 1.0) {\n      vec2 neighbor = cell + vec2(x, y);\n      vec2 pos = posInCell(neighbor);\n      float len = length(fragCoord.xy / s - pos);\n      float neighborColor = clamp(s * 0.25 - len * s, 0.0, 1.0);\n      color = max(color, neighborColor);\n    }\n  }\n\n  fragColor = vec4(vec3(color), 1);\n}\n","name":"Image","description":"","type":"image"}]}