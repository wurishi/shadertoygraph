{"ver":"0.1","info":{"id":"4d3cDj","date":"1520157311","viewed":491,"name":"Simple Mandelbrot/Julia set","username":"VioletGiraffe","description":"A basic Mandelbrot/Julia fractal visualization, no fancy stuff here. Mouse-clicking a point on the Mandelbrot set will display the related Julia set.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_NUM_ITERATIONS = 50;\n\nvec2 complexMul(vec2 a, vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nfloat _zoom = 2.0;\nvec2 _offset = vec2(-0.5, 0.);\n\nfloat checkPoint(vec2 screenRelatedPoint, vec2 juliaPoint) {\n\tvec2 z = screenRelatedPoint;\n\tfor (int i = 0; i < MAX_NUM_ITERATIONS; ++i)\n\t{\n        vec2 K = (juliaPoint.x == 0.0 && juliaPoint.y == 0.0) ? screenRelatedPoint : juliaPoint;\n\t\tz = complexMul(z, z) + K;\n\t\tfloat moduleSquared = dot(z, z);\n\t\tif (moduleSquared > 15.0)\n\t\t\treturn float(i) + 1.0 - (log2(log2(moduleSquared)) - 1.0);\n\t}\n\n\treturn 0.0;\n}\n\nvec3 hsv2rgb(float r, float g, float b) {\n    vec4 tmp = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(r, r, r) + tmp.xyz) * 6.0 - tmp.www);\n    return b * mix(tmp.xxx, clamp(p - tmp.xxx, 0.0, 1.0), g);\n}\n\nvec2 screenPointToComplexPlane(vec2 screenPoint, vec2 aspectRatio, bool ignoreZoom) {\n    vec2 p = (screenPoint.xy/iResolution.xy * aspectRatio - vec2(0.5, 0.5));\n    return ignoreZoom ? p * 4.0 : p * _zoom + _offset;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 aspectRatio = iResolution.x > iResolution.y ?\n        vec2(iResolution.x/iResolution.y, 1.0) :\n    \tvec2(1.0, iResolution.y/iResolution.x);\n    \n    bool julia = fragCoord.x > iResolution.x/2.0;\n    \n    float pointDivergence;\n    if (julia) {\n        vec2 relatedMandelbrotPoint = screenPointToComplexPlane(vec2(iMouse.xy), aspectRatio, false);\n        vec2 screenPoint = screenPointToComplexPlane(fragCoord - vec2(iResolution.x/2.0, 0.0), aspectRatio, true);\n        pointDivergence = checkPoint(screenPoint, relatedMandelbrotPoint) / float(MAX_NUM_ITERATIONS);\n    } else {\n        vec2 point = screenPointToComplexPlane(fragCoord, aspectRatio, false);\n        pointDivergence = checkPoint(point, vec2(0., 0.)) / float(MAX_NUM_ITERATIONS);\n    }\n\n\tif (pointDivergence == 0.0)\n\t\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\telse\n\t\tfragColor = vec4(hsv2rgb(pointDivergence * 1.2 + 0.5, 0.9, 0.9), 1.0);\n}","name":"Image","description":"","type":"image"}]}