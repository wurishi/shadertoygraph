{"ver":"0.1","info":{"id":"7lKfWc","date":"1665409514","viewed":179,"name":"Run for your life! ","username":"tsh","description":"Run! Run! Run! \nIt's the end of time. The universe is folding itself.\n\nSometimes I see faces in the shapes in the sky, and it's terrifying -- featuring light geometrical shapes, cockroaches and spiders around mid-song. <!>","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["spiders","running","forcefields","endoftime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4lSSWh","filepath":"https://soundcloud.com/thatchaoticart/end-of-evangelion-komm-susser","previewfilepath":"https://soundcloud.com/thatchaoticart/end-of-evangelion-komm-susser","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* thnx nusan! */\nfloat cyl(vec2 p, float s) {\n    return length(p) - s;\n}\n\nfloat sph(vec3 p, float s) {\n    return length(p) - s;\n}\n\n\nvec3 repeat(vec3 p, vec3 s) {\n    return ((fract(p/s-0.5)-0.5))*s;\n    \n}\n\nvec2 repeat(vec2 p, vec2 s) {\n    return (fract(p/s-0.5)-0.5)*s;\n}\n\nfloat repeat(float p, float s) {\n    return (fract(p/s-0.5)-0.5)*s;\n}\n\n\n\nmat2 rot(float a) {\n    float ca=cos(a);\n    float sa=sin(a);\n    return mat2(ca, sa, -sa, ca);\n}\n\nfloat box(vec3 p, vec3 s) {\n    p=abs(p)-s;\n    return max(p.x, max(p.y, p.z));\n}\n\n\nvec3 kifs(vec3 p, float t) {\n\n    p.xz = repeat(p.xz, vec2(35));\n    p.xz = abs(p.xz);\n\n    vec2 s = vec2(10, 7) * 0.7;\n    for(int i=0; i < 5; ++i) {\n        p.xz *= rot(t);\n        \n        p.xz = abs(p.xz) - s;\n        p.y += 0.2*abs(p.z);\n        s*=vec2(0.7, 0.5);\n    }\n    return p;\n}\n\nvec3 kifs3d(vec3 p, float t) {\n\n    p = repeat(p, vec3(25));\n    p = abs(p);\n\n    vec2 s = vec2(10, 7) * 1.0;\n    for(int i=0; i < 5; ++i) {\n        p.yz *= rot(t*0.7);\n        p.xz *= rot(t);\n        \n        p.xz = abs(p.xz) - s;\n        //p.y += 0.2*abs(p.z);\n        s*=vec2(0.7, 0.5);\n    }\n    return p;\n}\n\n\n\nvec3 tunnel(vec3 p) {\n    vec3 off=vec3(0);\n    float dd = p.z*.15;\n    off.x += sin(dd)*8.;\n    off.y += sin(dd*0.7)*8.;\n    \n    return off;\n}\n\n\nvec3 tunnel2(vec3 p) {\n    vec3 off=vec3(0);\n    off.y += abs(repeat(p.z, 1.))*0.1;\n    off.y += abs(repeat(p.z, 1.))*0.1;\n    \n    return off;\n    \n\n}\n\nfloat structure(vec3 p) {\n    \n    vec3 pp = p;\n    pp += tunnel2(p);\n    float path = abs(pp.x) -3.2;\n    \n    vec3 p2 = kifs(p, 0.5);\n    vec3 p3 = kifs(p+vec3(3., -1., 0.), 3.9);\n    \n    float b1 = box(p2, vec3(11., 5., 2.5));\n    float b2 = box(p3, vec3(.5, 34., 1.5));\n\n    float m1 = max(abs(b1), abs(b2)) - 0.2;\n    \n    float s1 = length(p2+vec3(0., 0.9, 0.))-0.8;\n    float s2 = length(p3+vec3(0., 0.5, 0.))-0.9;\n\n    m1 = min(m1, max(abs(s1), abs(s2))-0.05);\n    \n    m1 = max(m1, -path);\n    \n    float d = m1;\n\n    d = min(d, -p.y);\n    d *= 0.7; // luz\n    \n    return d;\n}\n\n\nfloat shiny(vec3 p) {\n    \n    vec3 p2 = kifs3d(p-vec3(0., 2., 3.), 0.8 + iTime * 0.1);\n    vec3 p3 = kifs3d(p-vec3(5., 0., 0.), 1.2 + iTime * 0.03);\n\n    \n    float b1 = box(p2, vec3(4));\n    float b2 = box(p3, vec3(7));\n    \n    float m1 = max(abs(b1), abs(b2)) - 1.2;\n    \n    //m1 *= 0.6;\n    \n    return abs(m1) - 0.1;\n\n}\n\nfloat at = 0.;\nbool isShiny = false;\nfloat map(vec3 p) {\n\n    float s = structure(p);\n    float shi = shiny(p);\n    \n    at = 0.2/(0.04+abs(shi));\n    \n    isShiny = shi < s;\n    //return shi;\n    \n    \n    return min(s, shi);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 s = vec3(0, -2, -3);\n    vec3 t = vec3(0., -2. + sin(iTime*0.2)*0.5, 0.);\n    float advance = mod(iTime, 120.)*3.;\n    s.z += advance;\n    t.z += advance;\n    \n    //s.xz *= rot(iTime*0.3);\n    \n    s -= tunnel2(s);\n    t -= tunnel2(t);\n    vec3 cz=normalize(t-s);\n    vec3 cx=normalize(cross(cz, vec3(0,1,0)));\n    vec3 cy=normalize(cross(cz, cx));\n    \n    vec3 r = normalize(uv.x*cx + uv.y*cy + cz);\n    //vec3 r = normalize(vec3(-uv, 1));\n    \n    vec3 p=s;\n    \n    int i = 0;\n    for (i = 0; i < 100; ++i)\n    {\n    \n        float d=map(p);\n        if(d<0.001) {\n            if(!isShiny) {\n                break;\n            }\n            d = 0.1;\n        }\n        p+=r*d;\n        \n    }\n\n    vec3 col = vec3(0.);\n    col += pow(1.0 - float(i) / 101.0, 6.);\n    col *= 1.7; // iluminacion\n    col += at*6.6*vec3(0.3, 0.3, 0.5);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}