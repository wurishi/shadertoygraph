{"ver":"0.1","info":{"id":"lsGfDG","date":"1530203284","viewed":70,"name":"Cosines","username":"megha_not_so_tiny","description":"Learning shader writing - 01","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cosine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //bring everything in the -0.5 to 0.5 space\n   \tvec2 q = uv - vec2(0.2, 0.5);\n\n    // polar coordinates\t\n    // cos along the circumference of the circle\n    // atan - postion of every point along the circle\n    float r = 0.2 + 0.2* cos(atan(q.x, q.y)*10.0 - 10.0*q.x)*mod(iTime,100.0);\n    //float s = 0.2 + 0.2*sin(r);\n    vec3 col = vec3(0.9, 0.3, 0.0);\n   \n   \n    col *= smoothstep(r, r + 0.1, length(q));\n    // Time varying pixel color\n    //col *= 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    if (pow(q.x,q.y) == pow(q.y,q.x))\n    {\n        col = vec3(1,1,1);\n    }\n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}