{"ver":"0.1","info":{"id":"tdlBz8","date":"1587706149","viewed":256,"name":"RGB like you mean it","username":"ShaderPrankster","description":"An experiment on WebGL RT, which is more about weird ray stuff. I was learning about doing raytracing on shaders and then that somehow resulted in this.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["raytracing","sphere","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//RT code based on https://www.shadertoy.com/view/ldS3DW by kig\n//Credit should go to this creator, all I did was playing around XD\n\nfloat sphere(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n\tvec3 rc = ray-center;\n    \n\tfloat c = dot(rc, rc) - (radius*radius);\n\tfloat b = dot(dir, rc);\n\tfloat d = b*b - c;\n    \n\tfloat t = -b - sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n    \n\treturn mix(-1.0, t, st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * \n\t\tvec2(iResolution.x/iResolution.y, 1.0);\n    \n\tvec3 ro = vec3(0.0, sin(iTime) * 0.5, -2.0);\n\tvec3 rd = normalize(vec3(uv, 1.0));\n\tvec3 p = vec3(cos(iTime) * 0.6, sin(iTime) * 0.4, 0.0);\n    \n\tfloat t = sphere(ro, rd, p, abs(cos(iTime) * 0.8));\n\tvec3 nml = normalize(p - (ro+rd*t));\n    \n\trd = reflect(rd, nml);\n    \n\tvec3 col = vec3(cos(iTime), sin(iTime), sin(iTime) * cos(iTime)) * rd;\n\tfragColor = vec4( mix(vec3(uv, rd.x * rd.z), col, step(0.0, t)), 1.0 );\n}","name":"Image","description":"","type":"image"}]}