{"ver":"0.1","info":{"id":"slGSzz","date":"1640070033","viewed":236,"name":"Function Plot Illustrate","username":"pdcxs","description":"A simple shader to show how to draw functions","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","function","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n\nvec2 fixUV(in vec2 c) {\n    return 3. * (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nvec3 Grid(in vec2 uv) {\n    vec3 color = vec3(0.);\n    vec2 fraction = 1. - 2. * abs(fract(uv) - 0.5);\n\n    if (abs(uv.x) <= 2. * fwidth(uv.x)) {\n        color.g = 1.;\n    } else if (abs(uv.y) <= 2. * fwidth(uv.y)) {\n        color.r = 1.;\n    } else if (fraction.x < 3. * fwidth(uv.x) || fraction.y < 3. * fwidth(uv.y)) {\n        color = vec3(1.);\n    }\n    return color;\n}\n\nfloat segment(in vec2 p, in vec2 a, in vec2 b, in float w) {\n    float f = 0.;\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n    float proj = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    float d = length(proj * ba - pa);\n    if (d <= w) {\n        f = 1.;\n    }\n    return f;\n}\n\nfloat func(in float x) {\n    float T = 4. + 2. * sin(iTime);\n    return sin(2. * PI / T * x);\n}\n\nfloat funcPlot(in vec2 uv) {\n    float f = 0.;\n    for(float x = 0.; x <= iResolution.x; x += 1.) {\n        float fx = fixUV(vec2(x, 0.)).x;\n        float nfx = fixUV(vec2(x + 1., 0.)).x;\n        f += segment(uv, vec2(fx, func(fx)), vec2(nfx, func(nfx)), 2.*fwidth(uv.x));\n    }\n    return clamp(f, 0., 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fixUV(fragCoord);\n    vec3 color = Grid(uv);\n    color = mix(color, vec3(1., 1., 0.), funcPlot(uv));\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}