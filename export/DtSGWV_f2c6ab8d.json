{"ver":"0.1","info":{"id":"DtSGWV","date":"1673955098","viewed":375,"name":"Tribal Ornament","username":"leon","description":"Tribalistic pixels","likes":44,"published":3,"flags":32,"usePreview":0,"tags":["kif","tribal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Tribal Ornament by Leon Denise 2023-01-17\n\n// Buffer A is drawing a circle in motion on a kif\n// Image is doing basic lighting and color pattern\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 frame = texture(iChannel0, uv).rgb;\n    \n    // pattern\n    float pattern = sin(frame.r*12.+3.14);\n    color = vec3(1) * smoothstep(.0,.5,pattern);\n    \n    // normal\n    #define T(uv) texture(iChannel0, uv).r\n    vec3 unit = vec3(1./iResolution.xy, 0);\n    vec3 normal = normalize(vec3(T(uv+unit.xz)-T(uv-unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 frame.r * frame.r));\n    \n    // light\n    color *= dot(normal, normalize(vec3(0,1,1)))*.5+.5;\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// Tribal Ornament by Leon Denise 2023-01-17\n\n// Buffer A is drawing a circle in motion on a kif\n// Image is doing basic lighting and color pattern\n\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float lp = length(p);\n    \n    // angle of rotation\n    float t = iTime * 0.5;\n    \n    // range\n    float r = .5 + .2 * sin(lp*1.-iTime);\n\n    // kaleidoscopic iterated function\n    float a = 1.;\n    const float count = 6.;\n    for (float i = 0.; i < count; ++i)\n    {\n        p.x = abs(p.x)-r*a;\n        p *= rot(t/a);\n        a /= 1.7;\n    }\n    \n    // shape\n    float thin = .04+.02*sin(iTime*4.+lp*10.);\n    vec3 color = vec3(smoothstep(thin,.0,length(p)));\n    \n    // fade \n    vec4 frame = texture(iChannel0, uv);\n    color = max(color, frame.rgb - .005);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}