{"ver":"0.1","info":{"id":"4XSfzm","date":"1729279402","viewed":60,"name":"parabola through three points","username":"jt","description":"A parabola through three points.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["three","point","parabola"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4XSfzm parabola through three points, 2024 by jt\n\n//(see also: https://www.shadertoy.com/view/X3SBDR cubic through four points)\n\n// A parabola through three points.\n\n// tags: three, point, parabola\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define draw_point(q) o *= smoothstep(0.0, 3.0/R.y, abs(q)) // resolution-independent anti-aliasing thanks to Fabrice!\n#define draw_circle(r, I) draw_point(length(I) - r)\n#define draw_quadratic(A, B, C, I) draw_point(draw_quadratic_helper(A, B, C, I))\n\nfloat parabola(float A, float B, float C, float x)\n{\n    return A*x*x+B*x+C;\n}\n\nfloat parabola_derivative(float A, float B, float x) // NOTE: C disappears due by derivative\n{\n    return 2.0*A*x+B;\n}\n\nfloat draw_quadratic_helper(float A, float B, float C, vec2 I)\n{\n    return (parabola(A, B, C, I.x)-I.y)/length(vec2(parabola_derivative(A, B, I.x),-1.0)); // divide by length of the gradient to get a constant width line - thanks, mla!\n}\n\nmat3 explicit_inverse(mat3 M)\n{\n    return \n        transpose\n        (\n            mat3\n            (\n                cross(M[1],M[2]),\n                cross(M[2],M[0]),\n                cross(M[0],M[1])\n            )\n        )\n        /\n        determinant(M);\n}\n\nfloat dot2(vec3 v)\n{\n    return dot(v,v);\n}\n\n// calculates inverse(mat3(q*q,q,vec3(1)))\nmat3 inverse210(vec3 q)\n{\n    vec3 qq = q*q;\n    return \n        transpose\n        (\n            mat3\n            (\n                q.yzx - q.zxy,\n                //(q.zxy - q.yzx)*(q.zxy + q.yzx),\n                qq.zxy - qq.yzx,\n                //qq.yzx*q.zxy - qq.zxy*q.yzx\n                q.yzx*q.zxy*(q.yzx-q.zxy)\n            )\n        )\n        /\n        dot(qq,q.yzx-q.zxy);\n}\n\nvec3 parabola_through_three_points(mat3x2 p) // https://www.shadertoy.com/view/4XSfzm parabola through three points (jt)\n{\n    //   I    y_0 = a x_0^2 + b x_0 + c\n    //  II    y_1 = a x_1^2 + b x_1 + c\n    // III    y_2 = a x_2^2 + b x_2 + c\n    //\n    //        /x_0^2   x_0   1\\ /a\\   /y_0\\\n    //        |x_1^2   x_1   1| |b| = |y_1|\n    //        \\x_2^2   x_2   1/ \\c/   \\y_2/\n    //\n    //        /a\\   /x_0^2   x_0   1\\^-1 /y_0\\\n    //        |b| = |x_1^2   x_1   1|    |y_1|\n    //        \\c/   \\x_2^2   x_2   1/    \\y_2/\n    mat2x3 q = transpose(p);\n    return inverse210(q[0])*q[1]; // optimized\n    return // original\n        inverse\n        //explicit_inverse\n        (\n            mat3\n            (\n                q[0]*q[0],\n                q[0],\n                vec3(1)\n            )\n        )\n        *\n        q[1];\n}\n\nvec3 parabola_through_three_points(vec2 p0, vec2 p1, vec2 p2) // https://www.shadertoy.com/view/4XSfzm parabola through three points (jt)\n{\n    if(true) // straight forward: invert 3x3 matrix\n    {\n        //   I    y_0 = a x_0^2 + b x_0 + c\n        //  II    y_1 = a x_1^2 + b x_1 + c\n        // III    y_2 = a x_2^2 + b x_2 + c\n        //\n        //        /x_0^2   x_0   1\\ /a\\   /y_0\\\n        //        |x_1^2   x_1   1| |b| = |y_1|\n        //        \\x_2^2   x_2   1/ \\c/   \\y_2/\n        //\n        //        /a\\   /x_0^2   x_0   1\\^-1 /y_0\\\n        //        |b| = |x_1^2   x_1   1|    |y_1|\n        //        \\c/   \\x_2^2   x_2   1/    \\y_2/\n        return\n            inverse\n            (\n                mat3\n                (\n                    vec3(p0.x*p0.x,p1.x*p1.x,p2.x*p2.x),\n                    vec3(p0.x,p1.x,p2.x),\n                    vec3(1)\n                )\n            )\n            *\n            vec3(p0.y,p1.y,p2.y);\n\n        // more compact variant, suggested by pyBlob:\n        vec3 x = vec3(p0.x, p1.x, p2.x);\n        vec3 y = vec3(p0.y, p1.y, p2.y);\n        return inverse(mat3(x*x, x, 1, 1, 1)) * y;\n    }\n    else // more efficient: invert only 2x2 matrix\n    {\n        //   I    y_0 = a x_0^2 + b x_0 + c\n        //  II    y_1 = a x_1^2 + b x_1 + c\n        // III    y_2 = a x_2^2 + b x_2 + c\n        //\n        //  II-I  y_1-y_0 = a (x_1^2 - x_0^2) + b (x_1 - x_0)\n        // III-I  y_2-y_0 = a (x_2^2 - x_0^2) + b (x_2 - x_0)\n        //\n        //        /x_1^2 - x_0^2   x_1 - x_0\\ /a\\   /y_1-y_0\\\n        //        |                         | | | = |       |\n        //        \\x_2^2 - x_0^2   x_2 - x_0/ \\b/   \\y_2-y_0/\n        //\n        //        /a\\   /x_1^2 - x_0^2   x_1 - x_0\\^-1 /y_1-y_0\\\n        //        | | = |                         |    |       |\n        //        \\b/   \\x_2^2 - x_0^2   x_2 - x_0/    \\y_2-y_0/\n        //\n        //        c = y_0 - (a x_0^2 + b x_0)\n        mat2 M =\n            mat2\n            (\n                vec2(p1.x*p1.x-p0.x*p0.x,p2.x*p2.x-p0.x*p0.x),\n                vec2(p1.x-p0.x,p2.x-p0.x)\n            );\n        vec2 ab = inverse(M)*vec2(p1.y-p0.y,p2.y-p0.y);\n        return vec3(ab,p0.y - (ab.x*p0.x*p0.x + ab.y*p0.x));\n    }\n\n    return vec3(0); // this shouldn't be reached\n}\n\nvec2 polar(float t)\n{\n    return vec2(cos(t),sin(t));\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 m = iMouse.xy;\n    bool demo = length(m) < 10.0;\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    m = (m+m-R)/R.y;\n\n    o = vec4(1);\n\n    //vec2 a = vec2(-0.5,+0.5);\n    vec2 a = vec2(-0.5,+0.5)+polar(iTime)*0.1;\n    vec2 b = demo ? vec2( 0.0,-0.5)+polar(iTime).yx*0.2 : m;\n    vec2 c = vec2(+0.5, 0.0)-polar(iTime)*0.1;\n\n    //vec3 k = parabola_through_three_points(a, b, c);\n    vec3 k = parabola_through_three_points(mat3x2(a,b,c));\n\n    draw_circle(0.01,I-a);\n    draw_circle(0.01,I-b);\n    draw_circle(0.01,I-c);\n\n    draw_quadratic(k.x,k.y,k.z, I);\n}\n","name":"Image","description":"","type":"image"}]}