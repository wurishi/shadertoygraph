{"ver":"0.1","info":{"id":"stBXRm","date":"1627308068","viewed":80,"name":"NUS ray tracing","username":"ShmilyQi","description":"shanghai","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shmilyqi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926536;\nconst float E = 2.7182818285;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 1;\nconst int NUM_MATERIALS = 2;\nconst int NUM_PLANES = 1;\nconst int NUM_PILLARS = 4;\nconst int NUM_BEAMS = 8 * 3;\nconst int NUM_BOXES = NUM_PILLARS * 5 + NUM_BEAMS;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Box_t {\n    // The maximum point and the minimum point.\n    vec3 maxp, minp;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nBox_t Box[NUM_BOXES];\n\n//============================================================================\n// Constants for constructing the scene.\n//============================================================================\nconst float pillarBias = 0.1;\nconst float pillarWidth = 1.0;\nconst float maxPillarHeight = 3.0;\n\nconst float beamBottomPlane = 2.0;\nconst float beamWidth = 0.3;\nconst float beamLengthBase = 3.0;\nconst float beamLengthInc = 1.2;\nconst float beamCornerRatio = 3.0;\nconst float middleBeamAt[8] = float[8](\n    0.4, 0.3, 0.7, 0.6, 0.5, 0.5, 0.8, 0.4\n);\n\nconst float lightCircleRadius = 8.0;\n\n// A pillar consists of 5 boxes, one silver box inside and four red ones outside.\nvoid makePillar(inout int boxCnt, in vec3 minp, in float height)\n{\n    // The centeral silver box.\n    Box[boxCnt].minp = minp;\n    Box[boxCnt].maxp = vec3(minp.x + pillarWidth, minp.y + height, minp.z + pillarWidth);\n    Box[boxCnt++].materialID = 0;\n\n    // Four surrrounding red boxes.\n    float subWidth = pillarWidth * 0.5;\n    float subTop = minp.y + height + pillarBias;\n    Box[boxCnt].minp = vec3(minp.x - pillarBias, minp.y, minp.z - pillarBias);\n    Box[boxCnt].maxp = vec3(Box[boxCnt].minp.x + subWidth, subTop, Box[boxCnt].minp.z + subWidth);\n    Box[boxCnt++].materialID = 1;\n    Box[boxCnt].minp = vec3(minp.x + subWidth + pillarBias, minp.y, minp.z - pillarBias);\n    Box[boxCnt].maxp = vec3(Box[boxCnt].minp.x + subWidth, subTop, Box[boxCnt].minp.z + subWidth);\n    Box[boxCnt++].materialID = 1;\n    Box[boxCnt].minp = vec3(minp.x - pillarBias, minp.y, minp.z + subWidth + pillarBias);\n    Box[boxCnt].maxp = vec3(Box[boxCnt].minp.x + subWidth, subTop, Box[boxCnt].minp.z + subWidth);\n    Box[boxCnt++].materialID = 1;\n    Box[boxCnt].minp = vec3(minp.x + subWidth + pillarBias, minp.y, minp.z + subWidth + pillarBias);\n    Box[boxCnt].maxp = vec3(Box[boxCnt].minp.x + subWidth, subTop, Box[boxCnt].minp.z + subWidth);\n    Box[boxCnt++].materialID = 1;\n}\n\nvoid makeBeam(inout int boxCnt, in vec3 minp, in float len, in bool alignX)\n{\n    float deltax = alignX? len : beamWidth;\n    float deltaz = alignX? beamWidth : len;\n    Box[boxCnt].minp = minp;\n    Box[boxCnt].maxp = vec3(minp.x + deltax, minp.y + beamWidth, minp.z + deltaz);\n    Box[boxCnt++].materialID = 1;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    float timeBase = 0.5 * (sin(iTime * 0.5) + 1.0);\n    int boxCnt = 0;\n\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Four pillars.\n    float pillarHeight = log(1.0 + timeBase * (E-1.0)) * maxPillarHeight;   // Smooth the movement.\n    makePillar(boxCnt, vec3(-1.5, 0.0, 0.5), pillarHeight);\n    makePillar(boxCnt, vec3(-1.5, 0.0, -1.5), pillarHeight);\n    makePillar(boxCnt, vec3(0.5, 0.0, -1.5), pillarHeight);\n    makePillar(boxCnt, vec3(0.5, 0.0, 0.5), pillarHeight);\n\n    // CrossBeams.\n    // CrossBeams are placed at 8 planes, the `lenBase` is a square on the current\n    // plane used as a reference, the true length of a beam is `len`.\n    // Four beanms are placed around the reference square, with their inside faces\n    // aligned to the square's edge. They are divided into two groups, one aligned\n    // to x axis and another alinged to z axis. The second group is longer.\n    float c = beamCornerRatio;\n    float lenBase = beamLengthBase;\n    float bottom, len;\n    float halfLen = lenBase * 0.5;\n    for (int i = 0; i < 4; ++i) {\n        // The movement of crossbeams are controlled by a cubed sin function,\n        // which slows down the movement when combined with pillars and speeds\n        // up when rising up.\n        bottom = pow(1.0-timeBase, 3.0) * float(i*2) * 1.5 + beamBottomPlane + float(i*2) * beamWidth;\n        lenBase *= beamLengthInc;\n        halfLen = lenBase * 0.5;\n        len = lenBase + beamCornerRatio * beamWidth;\n        c *= 0.5;\n        makeBeam(boxCnt, vec3(-halfLen - c*beamWidth, bottom, -halfLen - beamWidth), len, true);\n        makeBeam(boxCnt, vec3(-halfLen - c*beamWidth, bottom, halfLen), len, true);\n        makeBeam(boxCnt, vec3(-halfLen - c*beamWidth, bottom, -halfLen + middleBeamAt[i*2]*lenBase), len, true);\n\n        bottom = pow(1.0-timeBase, 3.0) * float(i*2+1) * 1.5 + beamBottomPlane + float(i*2+1) * beamWidth;\n        len += beamCornerRatio * beamWidth;\n        c *= 2.0;\n        makeBeam(boxCnt, vec3(-halfLen - beamWidth, bottom, -halfLen - c*beamWidth), len, false);\n        makeBeam(boxCnt, vec3(halfLen, bottom, -halfLen - c*beamWidth), len, false);\n        makeBeam(boxCnt, vec3(-halfLen + middleBeamAt[i*2+1]*lenBase, bottom, -halfLen - c*beamWidth), len, false);\n    }\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Red material.\n    Material[1].k_d = vec3( 0.87, 0.13, 0.13 );\n    Material[1].k_a = 0.6 * Material[1].k_d;\n    Material[1].k_r = 0.6 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 32.0;\n\n    // Light 0.\n    Light[0].position = vec3( lightCircleRadius * cos(iTime*0.1), abs(lightCircleRadius * sin(iTime*0.1)) + 1.0, -3.0 );\n    Light[0].I_a = vec3( 0.2, 0.2, 0.2 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a axis-aligned box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// The normal vector at the intersection will always point outside the box.\n// This functino may work incorrectly when the ray's origin is in the box.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax,\n                  out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n    float tnear, tfar;\n    float t1, t2;\n    vec3 temp_hitNormal;\n    float tnearmax = -tmax - 1.0;\n    float tfarmin = tmax + 1.0;\n    \n    t1 = (box.minp.x - ray.o.x) / ray.d.x;\n    t2 = (box.maxp.x - ray.o.x) / ray.d.x;\n    tnear = min(t1, t2);\n    tfar = max(t1, t2);\n    tfarmin = min(tfarmin, tfar);\n    if (tnear > tnearmax) {\n        tnearmax = tnear;\n        temp_hitNormal = (t1 < t2)? vec3(-1.0, 0.0, 0.0) : vec3(1.0, 0.0, 0.0);\n    }\n    t1 = (box.minp.y - ray.o.y) / ray.d.y;\n    t2 = (box.maxp.y - ray.o.y) / ray.d.y;\n    tnear = min(t1, t2);\n    tfar = max(t1, t2);\n    tfarmin = min(tfarmin, tfar);\n    if (tnear > tnearmax) {\n        tnearmax = tnear;\n        temp_hitNormal = (t1 < t2)? vec3(0.0, -1.0, 0.0) : vec3(0.0, 1.0, 0.0);\n    }\n    t1 = (box.minp.z - ray.o.z) / ray.d.z;\n    t2 = (box.maxp.z - ray.o.z) / ray.d.z;\n    tnear = min(t1, t2);\n    tfar = max(t1, t2);\n    tfarmin = min(tfarmin, tfar);\n    if (tnear > tnearmax) {\n        tnearmax = tnear;\n        temp_hitNormal = (t1 < t2)? vec3(0.0, 0.0, -1.0) : vec3(0.0, 0.0, 1.0);\n    }\n    if (tnearmax < tmin || tnearmax > tmax)\n        return false;\n\n    if (tnearmax < tfarmin) {\n        t = tnearmax;\n        hitPos = ray.o + tnearmax * ray.d;\n        hitNormal = temp_hitNormal;\n        return true;\n    }\n    else\n        return false;\n}\n\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax)\n{\n    float tnear, tfar;\n    float t1, t2;\n    float tnearmax = -tmax - 1.0;\n    float tfarmin = tmax + 1.0;\n    \n    t1 = (box.minp.x - ray.o.x) / ray.d.x;\n    t2 = (box.maxp.x - ray.o.x) / ray.d.x;\n    tnear = min(t1, t2);\n    tfar = max(t1, t2);\n    tfarmin = min(tfarmin, tfar);\n    if (tnear > tnearmax) {\n        tnearmax = tnear;\n    }\n    t1 = (box.minp.y - ray.o.y) / ray.d.y;\n    t2 = (box.maxp.y - ray.o.y) / ray.d.y;\n    tnear = min(t1, t2);\n    tfar = max(t1, t2);\n    tfarmin = min(tfarmin, tfar);\n    if (tnear > tnearmax) {\n        tnearmax = tnear;\n    }\n    t1 = (box.minp.z - ray.o.z) / ray.d.z;\n    t2 = (box.maxp.z - ray.o.z) / ray.d.z;\n    tnear = min(t1, t2);\n    tfar = max(t1, t2);\n    tfarmin = min(tfarmin, tfar);\n    if (tnear > tnearmax) {\n        tnearmax = tnear;\n    }\n    if (tnearmax < tmin || tnearmax > tmax)\n        return false;\n\n    if (tnearmax < tfarmin)\n        return true;\n    else\n        return false;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from smaxpace point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n        // return vec3(1.0);\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for (int i = 0; i < NUM_PLANES; ++i) {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit) {\n            hasHitSomething = true;\n            if (temp_t < nearest_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n    for (int i = 0; i < NUM_BOXES; ++i) {\n        temp_hasHit = IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit) {\n            hasHitSomething = true;\n            if (temp_t < nearest_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Box[i].materialID;\n            }\n        }\n    }\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    for (int i = 0; i < NUM_LIGHTS; ++i) {\n        // Make the shadow ray for current light source, the maximum t value represents\n        // the position of light source.\n        Ray_t shadowRay = Ray_t(nearest_hitPos, normalize(Light[i].position - nearest_hitPos));\n        float tmax = distance(Light[i].position, nearest_hitPos);\n        bool inShadow = false;\n        for (int j = 0; j < NUM_PLANES && !inShadow; ++j) {\n            if (IntersectPlane(Plane[j], shadowRay, DEFAULT_TMIN, tmax))\n                inShadow = true;\n        }\n        for (int j = 0; j < NUM_BOXES && !inShadow; ++j) {\n            if (IntersectBox(Box[j], shadowRay, DEFAULT_TMIN, tmax))\n                inShadow = true;\n        }\n        I_local += PhongLighting(shadowRay.d, nearest_hitNormal, -ray.d, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 12.0*sin(iTime*0.2), 4.0, 12.0*cos(iTime*0.2) );\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}