{"ver":"0.1","info":{"id":"wdycRG","date":"1603100533","viewed":110,"name":"Example 47 - raytrace mandelbrot","username":"jt","description":"Simple & inefficient way to raytrace the mandelbrot set.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","example","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926\n\n#define iterations 16\n\nfloat mandelbrot(vec2 p)\n{\n    vec2 c = 4.0 * p - 1.0;\n    c.x -= 1.0;\n    vec2 z = vec2(0.0, 0.0);\n    \n    float h = 1.0;\n    int i = 0;\n    for(i = 0; i < iterations; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if(length(z) > 2.0)\n        {\n            h = float(i) / float(iterations);\n            break;\n        }\n    }\n    \n    return h;\n}\n\nvec2 lookup(vec2 p)\n{\n    return (p + vec2(iTime, 0.0));\n}\n\nfloat heightmap(vec2 p)\n{\n    vec2 l = lookup(p);\n    //return 0.5 * (0.5 + 0.5 * sin(l.x * 2.0 * pi) * sin(l.y * 2.0 * pi)); // waves\n    //return 0.5 * (1.0 - abs(sin(l.x * 2.0 * pi)) * abs(sin(l.y * 2.0 * pi))); // waffles\n    //return 0.5 * ((1.0 - abs(sin(l.x * 2.0 * pi))) * (1.0 - abs(sin(l.y * 2.0 * pi)))); // spikes\n    return 0.5 * mandelbrot(fract(l));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 d = vec3(2.0 * fragCoord/iResolution.xy - 1.0, 1.0);\n    \n    fragColor = vec4(0.0, 0.0, 0.5, 1.0);\n    \n    float s = 0.001;\n    s /= abs(d.y); // larger step-size for shallow rays\n    for(vec3 q = vec3(0.0); abs(q.y) < 1.0; q += d * s)\n    {\n        float c = heightmap(q.xz);\n        float h = 1.0 * c - 1.0;\n        if(q.y < h)\n        {\n            float W = heightmap(q.xz + vec2(-1.0,0.0)/iResolution.xy);\n            float O = heightmap(q.xz + vec2(+1.0,0.0)/iResolution.xy);\n            float S = heightmap(q.xz + vec2(0.0,-1.0)/iResolution.xy);\n            float N = heightmap(q.xz + vec2(0.0,+1.0)/iResolution.xy);\n            vec3 n = normalize(vec3(O - W, N - S, 0.01));\n            //fragColor = vec4(c);\n            //fragColor = vec4(n.z);\n            float brightness = dot(n, normalize(vec3(1.0, 0.0, 1.0))); // lighting\n            fragColor = vec4(brightness); \n            break;\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}