{"ver":"0.1","info":{"id":"7l3yR8","date":"1706194966","viewed":102,"name":"3D seamless Voronoi","username":"Famousghost","description":"3D seamless Voronoi","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["voronoiseamlessmodulo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv * 2.0f).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 random(vec3 p, float offset)\n{\n    float x = sin(dot(p, vec3(19.3143f, 88.23423f, 321.213343f)));\n    float y = sin(dot(p, vec3(21.223434f, 99.134243f, 432.3423423f)));\n    float z = sin(dot(p, vec3(33.2423432f, 121.3434f, 325.34324f)));\n    \n    vec3 res = vec3(x, y, z);\n    \n    return vec3(sin(res.x * offset) * 0.5f + 0.5f, cos(res.y * offset) * 0.5f + 0.5f, cos(res.z * offset) * 0.5f + 0.5f);\n}\n\nvec3 moduloUv(vec3 uv, float density)\n{\n    return vec3(mod(uv.x, density), mod(uv.y, density), mod(uv.z, density));\n}\n\nfloat voronoi(vec3 p, float angleOffset, float density, float t)\n{\n    vec3 ip = floor(p * density);\n    vec3 fp = fract(p * density);\n    float result = t;\n    for(int x = -1; x <= 1; ++x)\n    {\n        for(int y = -1; y <= 1; ++y)\n        {\n            for(int z = -1; z <= 1; ++z)\n            {\n                vec3 lattice = vec3(x, y, z);\n                vec3 modIp = moduloUv(ip + lattice, density);\n                vec3 offset = random(modIp, angleOffset);\n                float dist = distance(fp, lattice + offset);\n                if(result >= dist)\n                {\n                    result = dist;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nfloat fbm(vec3 p, float angleOffset, float density, float t)\n{\n    float amp = 0.5f;\n    float lacunarity = 2.0f;\n    float result = 0.0f;\n    int octaves = 3;\n    for(int i =0 ; i < octaves; ++ i)\n    {\n        result += amp * voronoi(p, angleOffset, density, t);\n        p += p * lacunarity;\n        amp *= 0.5f;\n    }\n    \n    return result;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.0f - voronoi(vec3(uv, 1.0f), 45.0f + iTime * 0.5f, 8.0f, 1.0f));\n    //vec3 col = vec3(1.0f - fbm(vec3(uv, 1.0f), 45.0f + iTime * 0.5f, 8.0f, 1.0f));// more cloudy look\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}