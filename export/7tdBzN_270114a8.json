{"ver":"0.1","info":{"id":"7tdBzN","date":"1679549447","viewed":126,"name":"Invader Rusia America China","username":"DENFOR","description":"2022.09.10 test1  Russia America flag myutually  0~32 space()\n         32~42sconds  Russia   42~52 America  52~62 Russia    repeat by 10 seconds ~~~\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Created by iapafoto  https://www.shadertoy.com/view/MsjGRt\n// Created by sebastien durand - 01/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// ------------------------------------------------------------------------------\n// Deep Space \n// Star Nest by Kali\n// https://www.shadertoy.com/view/4dfGDM\n// ------------------------------------------------------------------------------\n// Metal effect\n// Exterminate! by Antonalog\n// https://www.shadertoy.com/view/ldX3RX\n// Blue Spiral by donfabio\n// ------------------------------------------------------------------------------\n// Spiral effect\n// BLue Spiral by donfabio\n// https://www.shadertoy.com/view/lds3WB\n\n//#define ANTIALIASING\n// Anti-Aliasing Level\n#define AA 3\n\n\n#define NB_ITER 64\n#define PI 3.14159265359\n#define TAO 6.28318531\n#define MAX_DIST 4000.\n#define PRECISION .0001\n\n#define PLANET 200.\n#define SHIP_GLOB 103.\n#define SHIP_HUBLOT 104.\n#define SHIP_TOP 500.\n#define SHIP_BOTTOM 501.\n#define SHIP_SIDE 502.\n#define SHIP_ARM 505.\n#define FLAG 300.\n\n#define COS cos\n#define SIN sin\n#define ATAN atan\n\n\nconst vec2 V01 = vec2(0,1);\nconst vec2 Ve = V01.yx*.001;\nvec3 L = normalize(vec3(10.25,.33,-.7));\n\nconst mat2 Rot1 = mat2(0.54030230586, 0.8414709848, -0.8414709848, 0.54030230586);\n\nfloat C1,S1, C2, S2, time; \n\nint AnimStep = 0;\nbool withPlanet = true;\n\n// 0.1% error - enough for animations\nfloat sin_(in float x) {\n\tx = mod(PI+x,2.*PI) - PI;\n\tfloat s = x*(1.27323954 - .4052847345*abs(x));\n\treturn s*(.776 + .224*abs(s));\n}\n\n// 0.1% error - enough for animations\nfloat cos_(in float x) {\n\treturn sin_(x+PI*.5);\n}\n/*\nfloat atan2_(float y, float x) {\n  float t0, t1, t2, t3, t4;\n  t3 = abs(x);\n  t1 = abs(y);\n  t0 = max(t3, t1);\n  t1 = min(t3, t1);\n  t3 = float(1) / t0;\n  t3 = t1 * t3;\n  t4 = t3 * t3;\n  t0 =         - .013480470;\n  t0 = t0 * t4 + .057477314;\n  t0 = t0 * t4 - .121239071;\n  t0 = t0 * t4 + .195635925;\n  t0 = t0 * t4 - .332994597;\n  t0 = t0 * t4 + .999995630;\n  t3 = t0 * t3;\n  t3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\n  t3 = (x < 0.) ?  3.141592654 - t3 : t3;\n  return (y < 0.) ? -t3 : t3;;\n}\n*/\n\n// k : [0..1]\nfloat steps(in float x, in float k) {\n\tfloat fr = fract(x);\n\treturn floor(x)+(fr<k?0.:(fr-k)/(1.-k));\n}\n\nfloat pyramid(in float x) {\n\tfloat fr = fract(x*.5+1./16.);\n\treturn clamp(4.*min(fr,1.-fr)-1.,-.75,.75);\n}\n\nfloat Noise(in vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat Noise( in vec2 x ) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tvec2 uv = p.xy + f.xy*f.xy*(3.0-2.0*f.xy);\n\treturn textureLod( iChannel0, (uv+118.4)/256.0, -100.0 ).x;\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix(b, a, h ) - k*h*(1.0-h);\n}\n\nfloat Kaleido(inout vec2 v, in float nb){\n\tfloat id=floor(.5+ATAN(v.x,-v.y)*nb/TAO);\n\tfloat a = id*TAO/nb;\n\tfloat ca = COS(a), sa = SIN(a);\n\tv*=mat2(ca,sa,-sa,ca);\n\treturn id;\n}\n\nvec2 Kaleido2(inout vec3 p, in float nb1, in float nb2, in float d) {\n\tfloat id1 = Kaleido(p.yx, nb1);\n\tfloat id2 = Kaleido(p.xz, nb2*2.);\n\tp.z+=d;\t\n\treturn vec2(id1,id2);\n}\n\nvec2 minObj(vec2 o1, vec2 o2) {\n\treturn o1.x<o2.x?o1:o2;\n}\n\nvec2 sminObj(vec2 o1, vec2 o2, float k) {\n\tfloat d = smin(o1.x, o2.x, k);\n\treturn vec2(d, o1.x<o2.x?o1.y:o2.y);\n}\n\nvec2 maxObj(vec2 o1, vec2 o2) {\n\treturn o1.x>o2.x?o1:o2;\n}\n\nconst vec3 \n\tCOLOR_GLOBE1 = vec3(.1,.1,.1),\n\tCOLOR_GLOBE2 = vec3(.1,2.,2.),\n\tCOLOR_HUBLOT = vec3(.2,.2,.2),\n\tCOLOR_SIDE = vec3(.0,9.0,9.0);\n\t\n// ------------------------------------------------------------------------------\n// Spiral texture\n// Blue Spiral by donfabio\n// https://www.shadertoy.com/view/lds3WB\nfloat textureSpiral(vec2 uv) {\n\tfloat angle = ATAN(uv.y, uv.x),\n\tshear = length(uv),\n\tblur = 0.5;\n\treturn smoothstep(-blur, blur, cos_(8.0 * angle + 200.0 * time - 12.0 * shear));\n}\n\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r1, float r2) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - mix(r1,r2,h);\n}\n\nfloat textureInvader(vec2 uv) {\n\tfloat y = 7.-floor((uv.y)*16.+4.);\n\tif(y < 0. || y > 7.) return 0.;\n\tfloat x = floor((abs(uv.x))*16.);\n//\tif(x < 0. || x > 14.) return 0.;\n\tfloat v=(y>6.5)? 6.:(y>5.5)? 40.:(y>4.5)? 47.:(y>3.5)? 63.:\n\t\t\t(y>2.5)? 27.:(y>1.5)? 15.:(y>0.5)? 4.: 8.;\n\treturn floor(mod(v/pow(2.,x), 2.0)) == 0. ? 0.: 1.;\n}\n\nvec4 DEFlag(vec3 p) {\n    vec3 ba = vec3(1.5,0,0);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec2 d = vec2(length( p - ba*h ) - .02, 1.);\n\tp.y -= .4;\n\tp.x -= 1.2;\n\tfloat box = length(max(abs(p)-vec3(.3,.4,.005),0.));\n\td = min(vec2(box, FLAG), d);\n\treturn vec4(d.x, FLAG, p.y, p.x);\n}\n\n\nfloat DEAlienArm(vec3 p0) {\n\tvec3 p = p0;\n\tp.x = -p.x;\n\tfloat d = MAX_DIST;\n\tfloat dy, dx = abs(C1);\n\tdx = clamp(dx,0.,.8);\n\tdy = .5*sqrt(1.-dx*dx);\n\tp.x-=dx;\n\tfloat x = dx;\n\tp = abs(p);\n\td = min(d, sdCapsule(p, vec3(x-dx,0,-dy), vec3(x, 0,dy),.01,.01));\n\td = min(d, sdCapsule(p, vec3(x,.04,-dy), vec3(x-dx,.04,dy),.01,.01));\n\td = min(d, length(p.xz+vec2(x-dx,-dy))-.05);\n\td = min(d, length(p.xz+vec2(-x,-dy))-.05);\n\tx+=dx;\n\td = min(d, sdCapsule(p, vec3(x-dx,0,-dy), vec3(x-dx*.5, 0,0),.01,.01));\n\td = min(d, sdCapsule(p, vec3(x-dx*.5,.04,.04), vec3(x-dx,.04,dy),.01,.01));\n\td = max(p.y-.06,max(-p.y+.005,d));\n\treturn d;\n}\n\n\nvec4 DEAlien(vec3 p0) {\n\tvec3 p=p0;\n\tvec2 d = minObj(vec2(length(p+vec3(-.125,0,0))-.75, SHIP_GLOB),\n\t\t\t\t\tvec2(length(p+vec3(1.6,0,0))-2., SHIP_TOP));\n\tp.yz = -abs(p.yz);\n\tp.yz+= .7;\n\td = minObj(vec2(length(p)-.24, SHIP_GLOB),d);\n\td = maxObj(vec2(length(p0-vec3(1.6,0,0))-2.,SHIP_BOTTOM),d);\n\tp.x+= .1;\n\tp.yz = -abs(p.yz);\n\tp.y+= .3;\n\tp.z+=.3;\n\td = maxObj(vec2(length(p0)-1.15, SHIP_SIDE), sminObj(vec2(length(p)-.2,SHIP_BOTTOM), d, .1));\n\n\tfloat r=0.;\n\tif (AnimStep >= 6) {\n\t\tr = 0.; //.05*(1.-clamp(0.,1.,time-7.25));\n\t} else if (AnimStep >= 3) { // ouverture du panneau\n\t\tr = .05*clamp(0.,1.,time-5.25);\n\t}\n\tif (r>0.) {\n\t\tfloat dd = length(max(abs(p0+vec3(.35,0,0))-vec3(r,r,9.*r),0.))-r;\n\t\td = maxObj(vec2(-dd,SHIP_SIDE), d); \n\t}\n\tif (AnimStep == 4 || AnimStep == 5) {\n\t\tp0.x += .2;\n\t\td = minObj(vec2(DEAlienArm(p0), SHIP_ARM), d);\n\t}\n\t\n\treturn vec4(d.x,d.y, p0.yz);\n}\n\nfloat DECrater(vec3 p) {\n\tfloat d = MAX_DIST;\n\tvec2 id = Kaleido2(p, 9.,6.,2.);\n\tfloat noise = Noise(id*10.);\n\tif (noise<.6 && abs(id.y)>0.&&abs(id.y)<6.-1.) {  \n\t\td = sdCapsule(p, vec3(0,0,-.15), vec3(0,0,.1),.1+noise*.2,.1+noise*.5);\n\t\td = max(-(length(p-vec3(0,0,-.25))-(.1+noise*.5)),d);\n\t\td = max(-(length(p-vec3(0,0,-.05))-(.1+noise*.15)),d);\n\t\td*=.8;\n\t}\n\treturn d;\n}\n\nbool intersectSphere(in vec3 ro, in vec3 rd, in vec3 c, in float r) {\n    ro -= c;\n\tfloat b = dot(rd,ro), d = b*b - dot(ro,ro) + r*r;\n\treturn (d>0. && -sqrt(d)-b > 0.);\n}\n\n// vec4 : distance / id (object) / uv (texture) \nvec4 DE(vec3 p0) {\n\tfloat scalePlanet = 10.,\n\t\t  scaleFlag = 2.,\n\t\t  scaleAlien = .5;\n\tvec4 res = vec4(1000);\t\n\tvec3 p = p0;\n    float d,d1,dx;\n\n//    if (withPlanet) {\n\tp = p0;\n\tp.x+=2.;\n\tp*=scalePlanet;\n\tp.yz *= Rot1;\n\tp.xz *= mat2(C2,S2,-S2,C2);\n    if (withPlanet) {    \n\td1 = DECrater(p);\n// Much better but cannot be render with the full scene in my computer\n//\tp.xz *= Rot1;\n//\tp.xy *= Rot1;\n//\tfloat d2 = DECrater(p);\n\td = smin(length(p)-2.,d1,.15); //smin(d2, d1,.2),.15);\n\n\td += .1*Noise((p)*2.);\n\td += .005*Noise((p)*20.);\n\tres = vec4(d/=scalePlanet,PLANET, length(p), p.z);\n\t\n    }\n    \n\tif (AnimStep >= 4) {\n\t\tdx = abs(C1);\n\t\tdx = clamp(dx,.1,.8);\n\t\t\n\t\tif (AnimStep == 4) {\n\t\t\tp = p0;\n\t\t\tp.x += (2.5*dx/scaleAlien) - 2.1;\n\t\t} else {\n\t\t\tp /= scalePlanet;\n\t\t\t//p.x-=1.;\n\t\t}\n\t\tp = p*scaleFlag;\n\t\tvec4 dFlag = DEFlag(p);\n\t\tdFlag.x /= scaleFlag;\n\t\tres = (dFlag.x<res.x) ? dFlag: res;\n\t}\n\t\n\tif (AnimStep > 1 && AnimStep < 7) {\n\t\tp = p0;\n\t\tif (AnimStep < 3) {\n\t\t\tp.x -= 3.2-steps(10.*(.038+time-5.25),.75);\n\t\t\tp.z -= 2.* /*floor*/(5.*pyramid(10.*(.038+time-5.25)));\n\t\t} else if(AnimStep>5) {\n\t\t\tp.x -= 3.2-steps(10.*(.038+6.75-time),.75);\n\t\t\tp.z -= 2.* /*floor*/(5.*pyramid(10.*(.038+6.75-time)));\n\t\t} else {\n\t\t\tp.x-=3.2;\n\t\t}\n\t\tp*=scaleAlien;\n\t\tvec4 dAlien = DEAlien(p);\n\t\tdAlien.x/=scaleAlien;\n\t\tres = (dAlien.x<res.x) ? dAlien: res;\n\t}\n\treturn res;\n}\n\nvec3 N(in vec3 p) {\n    vec2 e = vec2(Ve.x, -Ve.x); \n    return normalize(e.xyy * DE(p + e.xyy).x + e.yyx * DE(p + e.yyx).x + e.yxy * DE(p + e.yxy).x + e.xxx * DE(p + e.xxx).x);;\n}\n\nfloat softshadow(in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k) {\n\tfloat res = 1.0, h, t = mint;\n    for( int i=0; i<20; i++ ) {\n\t\th = DE( ro + rd*t ).x;\n\t\tres = min( res, k*h/t );\n                if( res<0.0001 ) break;\n\t\tt += 0.02;\n    }\n    return clamp(res, 0., 1.);\n}\n\n// ------------------------------------------------------------------------------\n// Deep Space \n// Star Nest by Kali\n// https://www.shadertoy.com/view/4dfGDM\n\n#define iterations 17\n#define formuparam 0.53\n#define volsteps 10\n#define stepsize 0.1\n#define tile   0.850\n#define brightness 0.0015\n#define darkmatter 1.500\n#define distfading .530\n#define saturation 0.650\n\nvec4 space(vec3 rd)\n{\n\tvec3 dir=rd;\n\tvec3 from=vec3(1.,.5,0.5);\n\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\treturn vec4(v*.01,1.);\t\n}\n\n// ------------------------------------------------------------------------------\n// Metal effect\n// Exterminate! by Antonalog\n// https://www.shadertoy.com/view/ldX3RX\nfloat one_pi = 0.31830988618;\nfloat lightIntensity = 1.0;\n\nvec3 rho_d = vec3(0.147708, 0.0806975, 0.033172);\nvec3 rho_s = vec3(0.160592, 0.217282, 0.236425);\nvec3 alpha = vec3(0.122506, 0.108069, 0.12187);\nvec3 ppp = vec3(0.795078, 0.637578, 0.936117);\nvec3 F_0 = vec3(9.16095e-12, 1.81225e-12, 0.0024589);\nvec3 F_1 = vec3(-0.596835, -0.331147, -0.140729);\nvec3 K_ap = vec3(5.98176, 7.35539, 5.29722);\nvec3 sh_lambda = vec3(2.64832, 3.04253, 2.3013);\nvec3 sh_c = vec3(9.3111e-08, 8.80143e-08, 9.65288e-08);\nvec3 sh_k = vec3(24.3593, 24.4037, 25.3623);\nvec3 sh_theta0 = vec3(-0.284195, -0.277297, -0.245352);\n\nvoid initShipColor() {\t\t\t\n\trho_d = vec3(0.0657916, 0.0595705, 0.0581288);\n\trho_s = vec3(1.55275, 2.00145, 1.93045);\n\talpha = vec3(0.0149977, 0.0201665, 0.0225062);\n\tppp = vec3(0.382631, 0.35975, 0.361657);\n\tF_0 = vec3(4.93242e-13, 1.00098e-14, 0.0103259);\n\tF_1 = vec3(-0.0401315, -0.0395054, -0.0312454);\n\tK_ap = vec3(50.1263, 38.8508, 34.9978);\n\tsh_lambda = vec3(3.41873, 3.77545, 3.78138);\n\tsh_c = vec3(6.09709e-08, 1.02036e-07, 1.01016e-07);\n\tsh_k = vec3(46.6236, 40.8229, 39.1812);\n\tsh_theta0 = vec3(0.183797, 0.139103, 0.117092);\n}\n\t\t\t\nvec3 Fresnel(vec3 F0, vec3 F1, float V_H)\n{\n\treturn F0 - V_H * F1  + (1. - F0)*pow(1. - V_H, 5.);\n}\n\nvec3 D(vec3 _alpha, vec3 _p, float cos_h, vec3 _K)\n{\n\tfloat cos2 = cos_h*cos_h;\n\tfloat tan2 = (1.-cos2)/cos2;\n\tvec3 ax = _alpha + tan2/_alpha;\n\t\n\tax = max(ax,0.); //bug?\n\t\n\treturn one_pi * _K * exp(-ax)/(pow(ax,_p) * cos2 * cos2);\n\t// return vec3( 0.0 / (cos2 * cos2));\n}\n\nvec3 G1(float theta) {\n\ttheta = clamp(theta,-1.,1.); //bug?\n\treturn 1.0 + sh_lambda * (1. - exp(sh_c * pow(max(acos(theta) - sh_theta0,0.), sh_k)));\n}\n\nvec3 shade(float inLight, float n_h, float n_l, float n_v, float v_h)\n{\n  \treturn  one_pi*inLight*(n_l*rho_d+rho_s*D(alpha,ppp,n_h,K_ap)*G1(n_l)*G1(n_v)*Fresnel(F_0,F_1,v_h));\n}\n\nvec3 brdf(vec3 lv, vec3 ev, vec3 n)\n{\n\tvec3 halfVector = normalize(lv + ev);\n\t\n\tfloat v_h = dot(ev, halfVector);\n\tfloat n_h = dot(n, halfVector);\n\tfloat n_l = dot(n, lv); \n\tfloat inLight = 1.0;\n\tif (n_l < 0.) inLight = 0.0;\n\tfloat n_v = dot(n, ev); \n\t\n\tvec3 sh = shade(inLight, n_h, n_l, n_v, v_h);\n\tsh = clamp( sh, 0., 1.); //bug?\n\tvec3 retColor = lightIntensity * sh;\n\t\n\treturn retColor;\n}\n\n// -------------------------------------------------------------------- \n\n\t\nvec3 findColor(float obj, vec2 uv, vec3 n) {\n\tif (obj == FLAG) {\n// FLAG\n\t\tfloat c = textureInvader(uv);\n\t\treturn vec3(1.,c, c);\n\t} else if (obj == PLANET) {\n// PLANET\n\t\treturn mix(vec3(.7,.3,0),vec3(1,0,0), clamp(1.1-5.*(uv.x-1.8),0.1,.9));\n\t} else if (obj == SHIP_SIDE) {\n\t\tfloat spi = textureSpiral(uv);\n\t\treturn mix(COLOR_SIDE, .4*COLOR_SIDE, spi);\n\t} else {\n\t\tvec3 c, sp = space(n).xyz;\n\t\tif (obj == SHIP_GLOB || obj == SHIP_HUBLOT) {\n\t\t\tc = mix(COLOR_GLOBE1, COLOR_GLOBE2, .5+.5*C2);\n\t\t\treturn mix(c, sp, .8);\n\t\t} else if (obj == SHIP_ARM) {\n\t\t\treturn mix(vec3(1), sp, .2);\n\t\t} else {\t\t\t\n\t\t\tfloat spi = textureSpiral(uv);\n\t\t\tconst vec3 lightblue = .25*vec3(0.5, 0.7, 0.9);\n\t\t\tc = mix(lightblue,lightblue*.4, spi);\n\t\t\treturn mix(c, sp, .4);\n\t\t}\n\t}\n}\n\nvec3 Render(in vec3 p, in vec3 rd, in float t, in float obj, in vec2 uv) {\n\t//return V01.xxy*(dot(N(p),L));\t\n\n\tvec3 nor = N(p);\n\tvec3 col = findColor(obj, uv, reflect(rd,nor));\t\n\tvec3 sunLight = L;\n\tfloat\tamb = clamp(.5+.5*nor.y, .0, 1.),\n            dif = clamp(dot( nor, sunLight ), 0., 1.),\n            bac = clamp(dot( nor, normalize(vec3(-sunLight.x,0.,-sunLight.z))), 0., 1.)*clamp( 1.0-p.y,0.0,1.0);\n\n\tfloat sh = softshadow( p, sunLight, .02, 100., 7.); \n\t\n\tif (obj != PLANET && obj != FLAG) {\n\t\tif (obj != SHIP_ARM) {\n\t\t\tinitShipColor();\n\t\t}\n\t\tfloat gamma = 2.2;\n\t\tlightIntensity *= 10.*(5.+.5*sh);\n\t\tcol *= (brdf(sunLight, -rd, nor) + .4*brdf(-sunLight, -rd, nor));\n\t\treturn sqrt(col);\n\t} else {dif *= sh; \n\n\t\t\tvec3 brdf = \n\t\t\t\t.2*(amb*vec3(.10,.11,.13) + bac*.15) +\n\t\t\t\t1.2*dif*vec3(1.,.9,.7);\n\t\n\t\t\tfloat \n\t\t\t\tpp = (obj == PLANET) ? 0. : clamp(dot(reflect(rd,nor), sunLight),0.,1.),\n\t\t\t\tspe = 2.*sh*pow(pp,16.),  // brillance\n\t\t\t\tfre = pow( clamp(1.+dot(nor,rd),0.,1.), 2.);\n\t\n\t\t\tcol = col*(.1+brdf + spe) + .2*fre*(.5+.5*col)*exp(-.01*t*t);\n\t\t\n\t\treturn sqrt(clamp(col,0.,1.));\n\t}\n}\n\n\nmat3 lookat(in vec3 ro, in vec3 up){\n\tvec3 fw=normalize(ro);\n\tvec3 rt=normalize(cross(fw,up));\n\treturn mat3(rt, cross(rt,fw),fw);\n}\n\n\n\nvec3 RD(in vec3 ro, in vec3 cp, vec2 fCoord) {\n\treturn lookat(cp-ro, V01.yxx)*normalize(vec3((2.*fCoord-iResolution.xy)/iResolution.y, 12.0));\n}\n\n////////////////////////////////////////////  America flag Data\nvec3 WHITE = vec3(1);\nvec3 RED = vec3(178, 34, 52)/255.;\nvec3 BLUE = vec3(60, 59, 110)/255.;\n\nfloat Star(vec2 uv, float size) {\n    uv.x = abs(uv.x);\n    \n    float a = 6.2832/5.;\n    float d1 = dot(uv, vec2(sin(a), cos(a)));\n    a = 3.*6.2832/5.;\n    float d2 = dot(uv, vec2(sin(a), cos(a)));\n    \n    a = 2.*6.2832/5.;\n    float d4 = dot(uv, vec2(sin(a), cos(a)));\n    \n    float d = min(max(d1, d2), max(uv.y, d4));\n    float w = min(fwidth(d), 0.05);\n    \n    return smoothstep(w, -w, d-size);\n}\n\nvec2 Remap(vec2 p, float b, float l, float t, float r) {\n    return vec2( (p.x-l) / (r-l), (p.y-b) / (t-b));\n}\n\nvec3 Flag(vec2 uv) {\n    float y = sin(uv.y*3.1415*13.);\n    float w = fwidth(y);\n    float stripes = smoothstep(-w, w, y);\n    w = fwidth(uv.y);\n    vec3 col = mix(WHITE, RED, stripes);\n    \n    vec2 st = Remap(uv, .46, 0., 1., .4);\n    \n    float size = .07;\n    if(st.x>0. && st.x<1. && st.y>0. && st.y<1.) {        \n        vec2 gv = fract( st*vec2(6,5) )-.5;\n        \n        col = mix(\n            mix(col, BLUE, smoothstep(0., w*3., st.y)), \n            WHITE, \n            Star(gv, size)\n        );\n        \n        st = Remap(st, .1, .0833, .9, .9166);\n        if(st.x>0. && st.x<1. && st.y>0. && st.y<1.) { \n            vec2 gv = fract( st*vec2(5,4) )-.5;\n            col = mix(col, WHITE, Star(gv, size));\n        }\n    }\n    \n    col *= smoothstep(w, .0, abs(uv.y-.5)-.5+w);\n    return col;\n}\n/////////////////////////////////////////// America Flag Data END\n\n/////////////////////////////////////////// China flag Data\n  #define S(a,b,t) smoothstep(a,b,t) \n//#define PI 3.1415927\n\nmat2 Rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    \n    return mat2(c, -s, s, c);\n}\n\nfloat DrawGrid(vec2 uv)\n{\n    vec2 gv = fract(uv * 10. - 0.025);\n    \n    float grid = 0.;\n    \n    if(gv.x > .95) grid = 1.;\n    if(gv.y > .95) grid = 1.;\n    \n    return grid;\n}\n\nfloat Sta(vec2 uv, float feature)   // Sta =Star function already has a body message\n{\n    uv.x = abs(uv.x);\n    \n    float S1 = 0.11;\n    float S2 = S1 - feature;\n    \n    float side1 = S(S1, S2, uv.y);\n    \n    vec2 dv = Rot(0.4*PI*2.) * uv;\n    float side2 = S(S1, S2, dv.y);\n    \n    dv = Rot(0.4*PI*3.) * uv;\n    float side3 = S(S1, S2, dv.y);\n    \n    dv = Rot(0.4*PI*4.) * uv;\n    float side4 = S(S1, S2, dv.y);\n    \n    return side2*side4+side1*side3;\n}\n\nfloat StarLayer(vec2 uv)\n{\n    float star1 = Sta((uv+vec2(0.4, 0.))*1.1, .01);\n    \n    float star2 = Sta(((uv+vec2(-0.1, 0.4))*3.1)* Rot(0.5), .02);\n    \n    float star3 = Sta(((uv+vec2(-0.3, 0.2))*3.1), .02);\n    \n    float star4 = Sta(((uv+vec2(-0.3, -0.1))*3.1)* Rot(-0.25), .02);\n    \n    float star5 = Sta(((uv+vec2(-0.1, -0.3))*3.1)* Rot(0.5), .02);\n    \n    return star1+star2+star3+star4+star5;\n}\n\n\n/////////////////////////////////////////// China Flag Data END\n\n//////////////////////////////////////////////////// Twian flag Data\n  #define PI 3.14159265359\n#define TAU (2. * PI)\n#define BlueHeight (1.0 - ((1.0 / 14.0) * 8.0))\n\nvec3 REDT = vec3(204.0/255.0, 0.0, 0.0);\n//vec3 WHITE = vec3(1.0,0.,0.);\n//vec3 BLUE = vec3(0.0, 0.0, 202.0/255.0);\nvec3 YELLOW = vec3(254.0/255.0, 254.0/255.0, 1.0)*1.5;// => White\nvec3 BLACK  =vec3(0) ;\n\nfloat drawCircle (vec2 uv, vec2 pos, float radius){\n    return float(smoothstep(radius, radius - 0.002, length(uv - pos)));\n}\n\nfloat Star14(vec2 uv, float size) {\n    float a = mod( atan(uv.x,uv.y)*14.,TAU ) / TAU -PI/TAU,\n      angle = PI*.73,\n          d = length(uv)*  sin(angle+abs(a)),\n          w = fwidth(d);\n    return length(uv)>.4 ? 0. : smoothstep(size + w, size - w, d);\n}\n\n/*\nvec2 Remap(vec2 p, float b, float l, float t, float r) {\n    return vec2( (p.x-l) / (r-l), (p.y-b) / (t-b));\n} */\n\nvec3 FlagTai(vec2 uv) {\n\n    float y = sin(uv.y*PI/**14.*/);\n    float w = fwidth(y);\n    float stripes = smoothstep(-w, w, y);\n    vec3 col = mix(REDT, /*WHITE*/REDT, stripes);  // no stripes\n\n    vec2 st = Remap(uv, BlueHeight, 0.0, 1.0, 0.5);\n    if(st.x>0. && st.x<1. && st.y>0. && st.y<1.) {\n        col = BLUE;\n        vec2 stM = Remap(uv, 0.15, 0.211, 0.7650795, 0.6548);                                     // pos             radius\n        float Moon = clamp( drawCircle(stM, vec2(0.0820,1.0400), 0.13050)\n                           -drawCircle(stM, vec2(0.0820,1.0400), 0.11050) ,0.0,1.0);\n        \n        vec2 stS = Remap(uv, 0.79, 0.2457303, 1.4, 0.73*0.8);\n        float Star = Star14(stS.xy, 0.11508);\n      \n      //  col += vec3(abs( Star+Moon)) * YELLOW;   // Default ???\n        col += vec3(abs( Star)) * YELLOW +vec3(abs(Moon))*vec3(-1.999 ) ;\n    }\n\n    if (uv.y < .0 || uv.y > 1.0) col = col * vec3(0.);\n    return col;\n}\n\n\n/////////////////////////////////////////////////////  Twian flag Data END\n\n////////////////////////////////////////////////////////// Skull Data Start\n#define R iResolution.xy\n#define f fragCoord.xy\n\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat box(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat circ(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n//https://iquilezles.org/articles/distfunctions2d\nfloat arc(vec2 p, vec2 sa, vec2 sb, float ra, float rb)\n{\n    p*=mat2(sa.x,sa.y,-sa.y,sa.x);\n    p.x = abs(p.x);\n    float q = (sb.y*p.x>sb.x*p.y) ? dot(p.xy, sb) : length(p.xy);\n    return sqrt( dot(p,p)+ra*ra-2.0*ra*q)-rb;\n}\n\n\nmat2 rot(float a)\n{\n    float c = cos(a), s=sin(a);\n    return mat2(c, -s, s, c);\n}\n\n\n  float hatline(vec2 p, float ta, float tb, float rb)\n{\n    return SS(arc(p,vec2(sin(ta),cos(ta)),vec2(sin(tb),cos(tb)), 0.5, rb));\n}\n\n/////////////////////////////////////////////////////////// Skull END\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\ttime = 3.*TAO+iTime*.75;\n\t\n\tC1 = COS(time);\n\tS1 = SIN(time);\n\tS2 = 2.*S1*C1;\n\tC2 = 1.-2.*S1*S1;\n\t\n// Animation\t\n\ttime /= TAO;\n\tAnimStep = 0;\n\n\tvec3 cp = (AnimStep<2) ? vec3(-2,0,0) : vec3(0,0,0);\n\tfloat rCam = (AnimStep<2)?5.:45.;\n\n\tif (time > 7.25) {\n\t\tAnimStep = 7; // apres de la remontee\n\t\trCam = mix(45.,5.,clamp(time-7.25,0.,1.));\n\t\tcp = mix(vec3(0,0,0), vec3(-2,0,0),clamp(time-7.25,0.,1.));\n\t} else if (time>6.75) {\n\t \tAnimStep = 6; // apres de la remontee\n\t\trCam = 45.;\n//\t\tcp = vec3(0,0,0);\n\t\tcp = mix(vec3(1,0,0),vec3(0,0,0),clamp(time-6.25,0.,1.));\n\t} else if (time>6.5) {\n\t\tAnimStep = 5; // remontee sans drapeau\n\t\trCam = 45.;\n//\t\tcp = vec3(0,0,0);\n\t\tcp = mix(vec3(1,0,0),vec3(0,0,0),clamp(time-6.25,0.,1.));\n\t} else if (time>6.25) {\n\t\tAnimStep = 4; // pause du drapeau\n\t\trCam = 45.;\n\t\tcp = mix(vec3(1,0,0),vec3(0,0,0),clamp(time-6.25,0.,1.));\n\t} else if (time>5.25) {\n\t\tAnimStep = 3; // pause\n\t\trCam = mix(160.,45.,clamp(time-5.25,0.,1.));\n\t\tcp = vec3(1,0,0);\n\t} else if (time>3.25) {\t\t\n\t\tAnimStep = 2; // arrivee du vaiseau\n\t\trCam = mix(5.,160.,clamp(time-3.25,0.,1.));\n\t\tcp = mix(vec3(-2,0,0), vec3(1,0,0),clamp(time-3.25,0.,1.));\n\t}\n\n\tvec3 rd, ro = rCam*vec3(-.5+4.*iMouse.y/iResolution.y,\n\t\t\t\t\t\t-SIN(time*2.12+iMouse.x/iResolution.x),\n\t\t\t\t\t\t-COS(time*2.12)\n\t\t\t\t\t    );\n\t\n\tvec3 ctot = vec3(0);\n\t\n#ifdef ANTIALIASING \n\tfor (int i=0;i<AA;i++) {\n\t\tvec2 fCoord = fragCoord.xy+.4*vec2(COS(6.28*float(i)/float(AA)),SIN(6.28*float(i)/float(AA)));\t\n#else\n\t\tvec2 fCoord = fragCoord.xy;\n#endif\n\t\trd = RD(ro, cp, fCoord);\n\t\n        withPlanet = intersectSphere(ro, rd, vec3(-2.,0,0), .21);\n        \n\t\t// Ray marching\n\t\tfloat t=0.0,d=1.0,od=1.0;\n\t\tvec4 res;\n\t\tfor(int i=0;i<NB_ITER;i++){\n\t\t\tif(d<PRECISION|| t>MAX_DIST)break;\n\t\t\tt += res.x;\n\t\t\tres=DE(ro+rd*t); // *0.95;\n\t\t}\n\t\n\t\t// Render colors\n\t\tif(t<MAX_DIST){// if we hit a surface color it\n\t\t\tctot += Render(ro + rd*t, rd,t, res.y, res.zw);\n\t\t} else {\n        \n        ctot +=  space(rd).xyz ;             // default\n   \n        ////////////////////////////////////////////////////////////\n        ////////////////////////////////////////////////////////////////\n        /////////////////////////////////// ad flag Russia China America Twian Skull\n       float tchange =iTime-32. ;\n       float tc1     =mod(tchange, 50.);    // range from 0 to 40 seconds\n       \n       /////////////////////////////////////// Russia\n        if(iTime>32. && tc1<10.5) {\n        \n        vec2 uv = 1.8*fragCoord/iResolution.xy; \n    vec3 col ;\n    float balanco=(sin(iTime+(uv.x*4.0))/20.0);  \n    float vel= 2.0*0.15;\n    float freq = 20.0*0.5;   \n    float timeshift = (iTime * vel) + (uv.x * freq) + uv.y;    \n    float wiggle = sin(iTime*2.0+(uv.y*5.0))*0.04;    \n    float shadow = 0.5 + cos(timeshift) * 0.2 ;\n        \n    if(uv.y<0.05+balanco){} \n    else if(uv.x<0.1+balanco){}\n    else if(uv.x>0.9+balanco){}\n    else if(uv.y>0.8+balanco){}\n    else   if(uv.y<0.3+balanco){\n        col = vec3(5,0,0)*1.0-balanco*5.0 +shadow;\n    }else if(uv.y>0.55+balanco){\n        col = vec3(1,1,1)*1.0-balanco*5.0 +shadow; \n    }else\n        col = vec3(0,0,.8)*1.0-balanco*5.0 + shadow ; \n        \n\t\t\tctot +=  col ; }\n           ////////////////////////////////////////// Russia END\n           \n           ///////////////////////////////////////////////// America Start\n         if(iTime>32. && tc1>10.  && tc1<20.){  \n      \n      \n       /////////////////////////////////////\n        vec2 uv = 1.8*fragCoord/iResolution.xy-vec2(0.1,0.8); \n  //        if (uv.x < .0 || uv.x > 1.0) vec3 col = col * vec3(0.); \n\n    float t = uv.x*7.-2.*iTime+uv.y*3.;\n    uv.y += sin(t)*.05;\n    \n    vec3 col = Flag(uv);\n         if (uv.x > 1.0 || uv.x<0.05 )  col = col * vec3(0.); \n         \n    col *= .7+cos(t)*.3;\n    \n           ctot +=  col ; }  \n       ////////////////////////////////////////////////////  America END\n       \n       ///////////////////////////////////////////// China Start\n        if(iTime>32. && tc1>20.  && tc1<30.){  \n       \n        vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = uv;\n\n    uv -= .5;  \n    uv.x *= iResolution.x/iResolution.y;\n  \n  \n    uv = (uv+vec2(.45, -.25))*2.;\n    \n    float w = sin((uv.x + uv.y - iTime * .75 + sin(1.5 * uv.x + 4.5 * uv.y) * PI * .3)\n                  * PI * .6); // fake waviness factor  \n    uv *= 1. + (.036 - .036 * w);\n    \n    float tex = texture(iChannel0, uv * 200.).r;\n      \n    vec3 col = vec3(0.870588,0.1607843,0.0627451);\n    col = mix(col, vec3(1., 0.8705882, 0.), clamp(StarLayer(uv),0.,1.));\n    col += w * .15;\n    col *= tex*2.;\n    \n    float v = 16. * st.x * (1. - st.x) * st.y * (1. - st.y); // vignette\n    col *= vec3(1. - .25 * exp2(-4.5 * v));\n    \n       \n        ctot +=  col ; }  \n       \n       /////////////////////////////////////////////  China END\n       \n       ///////////////////////////////////////////////////////// Ukrina Start\n      if(iTime>32. && tc1>2.  && tc1<10.){  \n\n    vec2 uv = 2.*fragCoord/iResolution.xy-vec2(0.975,0.975);\n    \n    float x=uv.x;\n    float y=uv.y;    \n //   x+=x*.3*sin(iTime*.5)*0.5;\n\n    \n    float t=x*7.+2.*y-2.*iTime;\n    uv.y+=y*x*sin(t*.5)*.04*4.;\n    uv.x+=y*x*sin(t)*.01*5.;\n    \n    float t2=x*7.-1.*y-2.*iTime;\n  //  uv.y+=y*x*cos(t2*4.)*.01;\n  //  uv.x+=y*x*cos(t2*4.)*.01; \n\n    //division line for colors:\n    float w=fwidth(uv.y);\n    float m= smoothstep(.5-w,.5+ w, uv.y);\n\n    //colors of the flag:\n    vec3 col = vec3(1,.9,0);\n    vec3 blue= vec3(.1,.3,1);\n    \n    vec3 sky= vec3(.2,.6,7.)*0.;\n    vec3 bg =vec3(1,0,0);\n    \n    col= mix(col, blue, m);\n    col*=mix(1.,.9+cos(t+sin((-x-y)*2.))*.3,uv.x);\n    col+=-x*y*sin(t2*2.+cos((-2.*x+y)*2.*0.5)*3.*0.5)*.2;\n\n    //flag bounds:\n    col*=smoothstep(1.0,.99, uv.y);\n    col*=smoothstep(-.01,0., uv.y);\n    col*=smoothstep(1.0,.99, uv.x);\n    col*=smoothstep(-.01,-.0, uv.x);\n    \n    \n       ctot +=  col ; }     \n       \n       ///////////////////////////////////////////////////////// Ukrina END\n \n \n       ///////////////////////////////////////////// Twian Start\n         if(iTime>32. && tc1>30.  && tc1<41.){  \n       \n     vec2 uv = 2.2*fragCoord/iResolution.xy -vec2(1.2,1.0) ;    // default\n   // vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.xy+0.5 ;　// shrink\n\n    float t = uv.x*7.-2.*iTime+uv.y*3.;\n    uv.y += sin(t)*.05;\n    \n    vec3 col = FlagTai(uv);\n         if (uv.x < .0 || uv.x > 1.0) col = col * vec3(0.);  // ad for shrink syukusyou\n    \n    col *= .7+cos(t)*.3;\n    \n       ctot +=  col ; }  \n       ///////////////////////////////////////////// Twian END\n       \n       ///////////////////////////////////////////////////////////Skull Start\n        if(iTime>32. && tc1>40. && tc1<50.){  \n       \n      vec2 p = ((2.*f-R)/R.y)*1.6 -vec2(-1.675, -0.5   ); //shrink  off set vec2(0.5,0.5);\n    \n    //flag wave inspiration from https://www.shadertoy.com/view/tl2fRm\n    float w = cos(p.y + p.x - iTime + cos(p.x * 2.14 + 4.2 * p.y)+sin(p.x*.8));\n    p *= 1. + (.03 - .03 * w);\n\n    vec2 ap= abs(p);\n    p.y-=.25;\n    vec2 mp = vec2(abs(p.x),p.y);\n    \n    //hat\n    float dout = SS(1.0-circ(p,-.36));\n    float d = SS(circ(p,.6))*float(p.y>.05);    \n    vec2 op = p-vec2(0.05,.1);\n    float ta = .5775;\n    float tb = .15;\n    float rb = .015;\n    float a = hatline(op, ta, tb, rb);\n    op.x-=.1;\n    tb = .1;\n    ta = .5;\n    float a2 = hatline(op, ta, tb, rb);    \n    op.x-=.1;\n    tb = .05;\n    ta = .45;\n    float a3 = hatline(op, ta, tb, rb);\n    op.x+=.3;\n    tb = .13;\n    ta = 2.585;\n    float a4 = hatline(op, ta, tb, rb);\n    op.x+=.12;\n    tb = .055;\n    ta = 2.65;\n    float a5 = hatline(op, ta, tb, rb);\n    float loff = .15;\n    float lo = SS(length(p.y-loff)-.11);\n    float l = SS(length(p.y-loff)-.075)*d;\n    float b = SS(box(p,vec2(.9,.0))-.035);\n    \n    //skull\n    float s = SS(circ(p,.6)) * (1.0-SS(length(p.y)-.075));\n    float eyes = SS(circ(mp-vec2(.23,-.27),.165));\n    float nose = SS(circ((p+vec2(0,.48))/vec2(1.3,1),.05));\n    \n    //jaw and teeth\n    float jaw = SS(box(p+vec2(0,.725),vec2(0.01,0.05))-.425*(abs(p.y)/2.+.45))*dout;\n    float jawout = SS(box(p+vec2(0,.725),vec2(0.01,0.05))-.45*(abs(p.y)/2.+.47));\n    float t1 = .79, td = .035;\n    vec2 tt = p/vec2(.98,1.)+vec2(0,.02);\n    float tee = SS( circ(tt,t1)) - SS( circ(tt,t1-td));\n    float t2 = .95, t2d = .035;\n    float tee2 = SS( circ(tt,t2)) - SS( circ(tt,t2-t2d));\n    float g = SS(length(p.x)-.015) * float(p.y<-.61 && p.y > -.95);\n    vec2 rp = (p+vec2(.075,0))*rot(.15);\n    float g2 = SS(length(rp.x)-.015) * float(rp.y<-.61 && rp.y > -.95);\n    vec2 rp2 = (p-vec2(.075,0))*rot(-.15);\n    float g3 = SS(length(rp2.x)-.015) * float(rp2.y<-.61 && rp2.y > -.95);\n    \n    //cross bones\n    ap = ap-vec2(.775);\n    ap.x+= (p.y<0.?.1:-.1);\n    float bo = SS(length(ap+vec2(-0.075,0.075))-.125);\n    float bo2 = SS(length(ap-vec2(-0.075,.075))-.125);    \n    vec2 r2p = (p*rot(.79))-vec2(.25,0.);\n    float bol = SS(length(r2p.x)-.08)*float(r2p.y>-1.2 && r2p.y<1.);\n    vec2 r3p = (p*rot(-.79))+vec2(.25,0);\n    float bol2 = SS(length(r3p.x)-.08)*float(r3p.y>-1.2 && r3p.y<1.);\n\n    //coloring\n    vec3 col = vec3(0);\n    vec3 ylw = vec3(1.,0.95,0.9   )  ; //vec3(1.,.95,0.2);\n\n    col = mix(col, vec3(1), s);\n    col = mix(col, vec3(1), jaw);\n    col = mix(col, vec3(0), tee);\n    col = mix(col, vec3(0), tee2);\n    col = mix(col,vec3(0), g);\n    col = mix(col,vec3(0), g2);\n    col = mix(col,vec3(0), g3);\n    \n   \tcol = mix(col, ylw, d);\n    col = mix(col, vec3(0), a);\n    col = mix(col, vec3(0), a2);\n    col = mix(col, vec3(0), a3);\n    col = mix(col, vec3(0), a4);\n    col = mix(col, vec3(0), a5);\n    \n    col = mix(col, vec3(0), lo);\n\tcol = mix(col, vec3(0.2,0.26,0.2), l);  //green  red tape of hat\n    col = mix(col, ylw, b);\n    col = mix(col, vec3(0), eyes);\n    col = mix(col, vec3(0), nose);\n    \n    vec3 bones =  vec3(bo);\n    bones = mix(bones,vec3(1), bo2);\n    bones = mix(bones,vec3(1), bol);\n    bones = mix(bones,vec3(1), bol2);\n    bones = mix(bones, vec3(0), 1.0-dout);\n    bones = mix(bones, vec3(0), jawout);\n    \n    col+=bones;\n    \n    col.rgb = col+w*.15;\n     \n       \n       ctot +=  col ; }  \n       /////////////////////////////////////////////////////////// Skull END\n           \n\t\t}\n        \n        \n#ifdef ANTIALIASING \t\t\n    }\n\tctot /= float(AA);\t\n#endif \t\t\n\tfragColor = vec4(ctot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}