{"ver":"0.1","info":{"id":"4dyGW3","date":"1456608047","viewed":174,"name":"Moving Blocky Blobs","username":"VoidChicken","description":"Blobs made of blocks.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","blobs","voxel","random","raymarcher","minecraft","animation","blocks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n//This work by VoidChicken is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\n \n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\nvec3 pos;\nmat4 rm(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\nfloat n (vec3 v) {\n\treturn noise(v/40.0+iDate.w/10.0);\n}\nbool isc (vec3 v, vec3 c) {\n    if (floor(length(v-c)) < 10.0) return false;\n\treturn n((v))>0.76;\n}\nvec3 ray(vec3 ro, vec3 rd) {\n\tfor (int i = 1; i < 512;i++) {\n\t\tvec3 p = ro+rd*float(i)/2.0;\t\n        p=floor(p/20.0)*20.0;\n\t\tif (isc(p, ro))\n\t\t\treturn (1.0-floor(float(i))/256.0)* vec3(sin(time), 1.0-sin(time), sin(-time));\n\t}\n\treturn vec3(0);\n}\n\nvoid mainImage( out vec4 v, in vec2 f ) {\n\n\tvec2 uv = ( f.xy / iResolution.xy ) ;\n\tvec4 a = vec4(uv-0.5, 1, 1);\n    a*= rm(vec3(0, 1, 0), 4.0*(iMouse.x/iResolution.x));\n     a*= rm(vec3(1, 0, 1), 4.0*(iMouse.y/iResolution.y));\n\tv = vec4(ray(vec3(0, 1, time*10.0), a.xyz) , 1.0 );\n\n}","name":"Image","description":"","type":"image"}]}