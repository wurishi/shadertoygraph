{"ver":"0.1","info":{"id":"ltjGWt","date":"1433718082","viewed":435,"name":"Isometric Grid","username":"lejeunerenard","description":"Trying my hand at creating an isometric grid procedurally.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","grid","isometric","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Kudos to @FabriceNeyret2 for a ton of suggestions and changes\nfloat divScotFlag( vec2 uv) {\n    float botRight = step( uv.x + uv.y, 1. );\n    float botLeft = step( uv.x + 1. - uv.y, 1. );\n    \n    // Scottish flag ( sorta )\n    float scotFlag = abs(botRight - botLeft);\n    float divider = step( uv.x, .5);\n    \n    // Divided scottish flag\n    return abs( divider - scotFlag);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.y; // Aspect Ratio adjustment\n\n    // float angle = .4 * iTime;\n    // float c = cos(angle), s = sin(angle);\n\t// uv = mat2(c,-s,s,c)*uv; // via @FabriceNeyret2\n\n    uv.y *= 5./3.; // adjust height width ratio\n\n    // Checker pattern\n\tfragColor = vec4(\n        // RGB\n        vec3( divScotFlag( fract(uv * 4.) ) ),\n        // A\n        1.0);\n}","name":"","description":"","type":"image"}]}