{"ver":"0.1","info":{"id":"wlyBWy","date":"1614962672","viewed":107,"name":"AODOFractal","username":"efairbanks","description":"MouseX: change depth of field\nMouseY: morph fractal\n\nFork of DOFractal /w global-illum-based ambient occlusion. Runs @ ~40FPS on an NVidia GTX2060.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","dof","kifs"],"hasliked":0,"parentid":"WtyBWR","parentname":"DOFractal"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 p) {\n    p+=10.;\n    float r=fract(fract(dot(p.x*1.3242413, p.y*3.346346)*342.23523523)*232.23423)*2.-1.;\n    return r*r;\n}\nfloat cube(vec3 p, float s) {\n    p=abs(p);\n    return max(p.x,max(p.y,p.z))-s;\n}\nvec2 c2p(vec2 p) {return vec2(atan(p.y,p.x),length(p));}\nvec2 p2c(vec2 p) {return vec2(cos(p.x),sin(p.x))*p.y;}\nfloat map(vec3 p) {\n    vec3 ac=p;\n    vec3 sc=p;\n    float my=iMouse.y/iResolution.y;\n    for(int i=0;i<9;i++) {\n        ac.xy=p2c(c2p(ac.xy)+vec2(mix(0.3,1.6,my),0.));\n        ac.xz=p2c(c2p(ac.xz)+vec2(mix(2.0,.4,my),0.));\n        ac=abs(ac)-0.1;\n        sc.xy=p2c(c2p(sc.xy)+vec2(mix(2.3,.6,my),0.));\n        sc.xz=p2c(c2p(sc.xz)+vec2(mix(0.1,1.2,my),0.));\n        sc=abs(sc)-0.15;\n    }\n    return max(cube(ac,0.2),-cube(sc,0.14));\n}\nvec3 gradient(vec3 p) {\n    vec2 e=vec2(0.,0.01);\n    return normalize(vec3(\n                map(p+e.yxx)-map(p-e.yxx),\n                map(p+e.xyx)-map(p-e.xyx),\n                map(p+e.xxy)-map(p-e.xxy)\n            ));\n}\nvec3 pixel(vec2 p, vec3 o) {\n    vec3 t=vec3(0.);\n    vec3 fwd=normalize(t-o);\n    vec3 right=cross(fwd,normalize(vec3(0.,-1.,0.)));\n    vec3 up=cross(fwd,right);\n    vec3 r=normalize(fwd+right*p.x+up*p.y);\n    // focal stuff\n    vec3 fp=o+r*mix(1.,3.,iMouse.x/iResolution.x);\n    o=o+(sin(rand(p.xy*1.235313)*3.145)*right+sin(rand(p.yx*0.82352332)*3.145)*up)*0.06;\n    r=normalize(fp-o);\n    // bounce\n    float dt;\n    float dtt=0.;\n    vec3 absorb=vec3(0.89,0.93,0.95);\n    for(int b=0;b<4;b++) {\n        dt=0.01;\n        for(int i=0;i<90;i++) {\n            float d=map(o+r*dt);\n            if(d<0.005) {dtt+=dt;absorb*=absorb;break;};\n            dt+=d*0.85;\n        }\n        o=o+r*dt;\n        r=reflect(r,gradient(o));\n    }\n    return vec3(absorb*2.)/pow(2.,dtt);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    if(length(uv)>0.9) {fragColor=vec4(0.5);return;}\n    vec3 col = vec3(0.);\n    int ssaa=4;\n    for(int i=0;i<ssaa;i++) {\n        vec2 offset=vec2(rand(uv)+float(i),rand(uv*vec2(1.234324,0.943534)+vec2(7.345346,11.346443)+float(i)*0.57458));\n        col+=pixel(uv+offset*0.5/iResolution.xy, vec3(cos(iTime),sin(iTime*0.7)*0.8,sin(iTime))*2.2)/float(ssaa);\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}