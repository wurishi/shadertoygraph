{"ver":"0.1","info":{"id":"clXGWj","date":"1672378666","viewed":67,"name":"Ex2: Primary rays","username":"MauLande228","description":"Exercise 2 of Intel's path-tracing workshop","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pathtracing","exercise","workshop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Computes the direction vector of a primary ray\n// \\param x, y Coordinates between 0 and 1 for the pixel that the ray\n//      passes through (x, y)\n// \\param camera_position Position vector for the camera (o)\n// \\param left_bottom Position vector for the left bottom corner of\n//      the image plane (c)\n// \\param right, up Direction vectors towards the right and top end\n//      of the image plane (r, u)\n// \\return A direction vector of length 1 for a ray through the\n//      specified pixel (d)\nvec3 get_primary_ray_direction(float x, float y, vec3 camera_position, vec3 left_bottom, vec3 right, vec3 up) {\n    vec3 p = left_bottom + (x*right) + (y*up);\n    vec3 rayDir = p - camera_position;\n    return normalize(rayDir);\n}\n\n\nvoid mainImage(out vec4 out_color, in vec2 pixel_coord) {\n    // Define the camera position and the view plane\n    vec3 camera_position = vec3(0.278, 0.8, 0.2744);\n    vec3 middle = camera_position - vec3(0.0, 0.8, 0.0);\n    vec3 up = vec3(0.0, 0.0, 0.56);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    vec3 right = aspect * vec3(-0.56, 0.0, 0.0);\n    vec3 left_bottom = middle - 0.5 * right - 0.5 * up;\n    // Compute the camera ray\n    vec2 tex_coord = pixel_coord / iResolution.xy;\n    vec3 ray_direction = get_primary_ray_direction(\n        tex_coord.x, tex_coord.y, camera_position, left_bottom, right, up);\n    // Display the ray direction as color (mapping [-1,1] to [0, 1])\n    out_color.rgb = ray_direction * 0.5 + vec3(0.5);\n    out_color.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}