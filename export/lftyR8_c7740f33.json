{"ver":"0.1","info":{"id":"lftyR8","date":"1730253772","viewed":84,"name":"Exact Algebra Of The 1920*4-Gon","username":"rikr","description":"I never did an elementary construction of a 15360-gon before either.. So here I tried to make it compact and made it into shader code... Made By Rik Riesmeijer - No Rights Reserved. License: CC0, Released To The Public Domain.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["cycle","circle","ring","tower","dots","sqrt","algebra","compass","ruler","cyclic","construct","surd","extensions","pentadecagon","153"],"hasliked":0,"parentid":"lf3yzH","parentname":"Exact Pentadecagon Algebra"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Exact Algebra Of The 1920*4-Gon.\n// Made By Rik Riesmeijer - No Rights Reserved.\n// License: CC0, Released To The Public Domain.\n\n// One color for each pentadecagon corner.\nvec4 cl01 = vec4(1.0, 1.0, 1.0, 1);\nvec4 cl02 = vec4(0.6, 0.0, 0.8, 1);\nvec4 cl03 = vec4(0.5, 0.4, 0.9, 1);\nvec4 cl04 = vec4(0.3, 0.7, 0.5, 1);\nvec4 cl05 = vec4(0.6, 0.4, 0.8, 1);\nvec4 cl06 = vec4(0.9, 0.4, 0.9, 1);\nvec4 cl07 = vec4(1.0, 0.7, 1.0, 1);\nvec4 cl08 = vec4(0.4, 0.7, 0.9, 1);\nvec4 cl09 = vec4(0.5, 0.9, 0.6, 1);\nvec4 cl10 = vec4(0.5, 1.0, 0.7, 1);\nvec4 cl11 = vec4(0.9, 0.4, 0.4, 1);\nvec4 cl12 = vec4(0.8, 1.0, 0.2, 1);\nvec4 cl13 = vec4(0.9, 0.8, 0.0, 1);\nvec4 cl14 = vec4(0.8, 0.2, 1.0, 1);\nvec4 cl15 = vec4(1.0, 0.4, 0.0, 1);\n\n// Euclidean norm based distance function.\nfloat dist(vec2 x, vec2 y) {\n    return length(x - y);\n}\n\n// Shaping function for color blending.\nfloat smst(float x) {\n    return smoothstep(0.01221, 0.00121, x);\n}\n\n// Main shader function.\nvoid mainImage(out vec4 y, vec2 z) {\n    y = vec4(0.0); // Initialize color.\n    \n    // Normalize coordinates.\n    z = z - 0.5 * iResolution.xy;\n    z = 2.3 * z / iResolution.yy;\n    \n    // Enumerate the algebraic expression for each corner.\n    float x01024 =  0.125 * (sqrt(5.0) + 1.0 + sqrt(30.0 - sqrt(180.0)));\n    float y01024 =  sqrt((7.0 + sqrt(5.0) - sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p01024 =  vec2(x01024, y01024);\n    \n    float x00512 =  sqrt(0.5 + 0.5 * sqrt(x01024));\n    float y00512 =  sqrt(0.5 - 0.5 * sqrt(x01024));\n    vec2  p00512 =  vec2(x00512, y00512);\n    \n    float x00256 =  sqrt(0.5 + 0.5 * sqrt(x00512));\n    float y00256 =  sqrt(0.5 - 0.5 * sqrt(x00512));\n    vec2  p00256 =  vec2(x00256, y00256);\n    \n    float x00128 =  sqrt(0.5 + 0.5 * sqrt(x00256));\n    float y00128 =  sqrt(0.5 - 0.5 * sqrt(x00256));\n    vec2  p00128 =  vec2(x00128, y00128);\n    \n    float x00064 =  sqrt(0.5 + 0.5 * sqrt(x00128));\n    float y00064 =  sqrt(0.5 - 0.5 * sqrt(x00128));\n    vec2  p00064 =  vec2(x00064, y00064);\n    \n    float x00032 =  sqrt(0.5 + 0.5 * sqrt(x00064));\n    float y00032 =  sqrt(0.5 - 0.5 * sqrt(x00064));\n    vec2  p00032 =  vec2(x00032, y00032);\n    \n    float x00016 =  sqrt(0.5 + 0.5 * sqrt(x00032));\n    float y00016 =  sqrt(0.5 - 0.5 * sqrt(x00032));\n    vec2  p00016 =  vec2(x00016, y00016);\n    \n    float x00008 =  sqrt(0.5 + 0.5 * sqrt(x00016));\n    float y00008 =  sqrt(0.5 - 0.5 * sqrt(x00016));\n    vec2  p00008 =  vec2(x00008, y00008);\n    \n    float x00004 =  sqrt(0.5 + 0.5 * sqrt(x00008));\n    float y00004 =  sqrt(0.5 - 0.5 * sqrt(x00008));\n    vec2  p00004 =  vec2(x00004, y00004);\n    \n    float x00002 =  sqrt(0.5 + 0.5 * sqrt(x00004));\n    float y00002 =  sqrt(0.5 - 0.5 * sqrt(x00004));\n    vec2  p00002 =  vec2(x00002, y00002);\n    \n    float x00001 =  sqrt(0.5 + 0.5 * sqrt(x00002));\n    float y00001 =  sqrt(0.5 - 0.5 * sqrt(x00002));\n    vec2  p00001 =  vec2(x00001, y00001);\n    \n    float x02048 =  sqrt(5.0) / 8.0 - 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y02048 =  sqrt((7.0 - sqrt(5.0) + sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p02048 =  vec2(x02048, y02048);\n    \n    float x03072 =  sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y03072 =  sqrt((10.0 + sqrt(20.0)) / 16.0);\n    vec2  p03072 =  vec2(x03072, y03072);\n    \n    float x04096 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y04096 =  sqrt((7.0 + sqrt(5.0) + sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p04096 =  vec2(x04096, y04096);\n    \n    float x05120 = -4.0 / 8.0;\n    float y05120 =  sqrt(12.0 / 16.0);\n    vec2  p05120 =  vec2(x05120, y05120);\n    \n    float x06144 = -sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y06144 =  sqrt((10.0 - sqrt(20.0)) / 16.0);\n    vec2  p06144 =  vec2(x06144, y06144);\n    \n    float x07168 = -sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 + sqrt(5.0)) / 64.0);\n    float y07168 =  sqrt((7.0 - sqrt(5.0) - sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p07168 =  vec2(x07168, y07168);\n    \n    float x08192 = -sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 + sqrt(5.0)) / 64.0);\n    float y08192 = -sqrt((7.0 - sqrt(5.0) - sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p08192 =  vec2(x08192, y08192);\n    \n    float x09216 = -sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y09216 = -sqrt((10.0 - sqrt(20.0)) / 16.0);\n    vec2  p09216 =  vec2(x09216, y09216);\n    \n    float x10240 = -4.0 / 8.0;\n    float y10240 = -sqrt(12.0 / 16.0);\n    vec2  p10240 =  vec2(x10240, y10240);\n    \n    float x11264 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y11264 = -sqrt((7.0 + sqrt(5.0) + sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p11264 =  vec2(x11264, y11264);\n    \n    float x12288 =  sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y12288 = -sqrt((10.0 + sqrt(20.0)) / 16.0);\n    vec2  p12288 =  vec2(x12288, y12288);\n    \n    float x13312 =  sqrt(5.0) / 8.0 - 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y13312 = -sqrt((7.0 - sqrt(5.0) + sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p13312 =  vec2(x13312, y13312);\n    \n    float x14336 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y14336 = -sqrt((7.0 + sqrt(5.0) - sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p14336 =  vec2(x14336, y14336);\n    \n    float x15360 =  1.0;\n    float y15360 =  0.0;\n    vec2  p15360 =  vec2(x15360, y15360);\n    \n    // Calculate screen distance.\n    float d01 = dist(z, p00001);\n    float d02 = dist(z, p00002);\n    float d03 = dist(z, p00004);\n    float d04 = dist(z, p00008);\n    float d05 = dist(z, p00016);\n    float d06 = dist(z, p00032);\n    float d07 = dist(z, p00064);\n    float d08 = dist(z, p00128);\n    float d09 = dist(z, p00256);\n    float d10 = dist(z, p00512);\n    float d11 = dist(z, p01024);\n    float d12 = dist(z, p02048);\n    float d13 = dist(z, p03072);\n    float d14 = dist(z, p05120);\n    float d15 = dist(z, p08192);\n    \n    // Color the canvas.\n    y = smst(d01) * cl01 + y;\n    y = smst(d02) * cl02 + y;\n    y = smst(d03) * cl03 + y;\n    y = smst(d04) * cl04 + y;\n    y = smst(d05) * cl05 + y;\n    y = smst(d06) * cl06 + y;\n    y = smst(d07) * cl07 + y;\n    y = smst(d08) * cl08 + y;\n    y = smst(d09) * cl09 + y;\n    y = smst(d10) * cl10 + y;\n    y = smst(d11) * cl11 + y;\n    y = smst(d12) * cl12 + y;\n    y = smst(d13) * cl13 + y;\n    y = smst(d14) * cl14 + y;\n    y = smst(d15) * cl15 + y;\n}\n","name":"Image","description":"","type":"image"}]}