{"ver":"0.1","info":{"id":"ft3XR2","date":"1639384072","viewed":102,"name":"Sphube","username":"OlafDoschke","description":"Generalization of Sphere with distance metric |x|^n+|y|^n+|z|^n with sphere for n=2, cube for n infinity\ncavalier projection: 0.5 * z is added to x and y;\n\nfor n fixed to 2.0 a factor 0.2 looks more like a sphere but then the cube looks too flat.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cube","sphere","sphube","cavalier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Sphube(vec3 uvf, float r, float n, float blur)\n{\n    float c = pow(abs(uvf.x),n)+pow(abs(uvf.y),n)+pow(abs(uvf.z),n);\n    \n    return smoothstep(r+blur,r-blur,c);\n}\n\n\nvec4 samplePixel(vec3 uvf) {\n    // Put all your actual drawing code in here\n    float c= Sphube(uvf,1.,iTime,.05);\n    \n    return vec4(c*(uvf.y+1.)/2.);\n}\n\nvec4 superSamplePixel(vec2 pos) {\n    vec4 sum = vec4(0.);\n    \n    for (int f=-1010; f<1010; f++) {\n        float z = float(f)/1000.;\n        \n        vec3 pos3d = vec3(pos.x-.2*z, pos.y-.2*z, z);\n        \n        vec4 sp = samplePixel(pos3d);\n        \n        if (length(sp)>length(sum))\n        sum = sp;\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    \n    uv = 3.*(uv-.5)*aspect;\n    \n    fragColor = superSamplePixel(uv);\n}","name":"Image","description":"","type":"image"}]}