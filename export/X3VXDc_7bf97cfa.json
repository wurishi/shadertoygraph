{"ver":"0.1","info":{"id":"X3VXDc","date":"1720596852","viewed":16,"name":"chamfered rectangle with SDF","username":"icchar","description":"simplified the shader from TheTurk","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","rectangle","distance","box","rect","primitive","octagon","chamfer","chamfered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float chamferRect(vec2 pos, vec2 rt, float val) {\n   pos = abs(pos) - rt;\n   vec2 d1 = vec2(max(pos.x + val, 0.0), pos.y);\n   vec2 d2 = vec2(pos.x, max(pos.y + val, 0.0));\n   float k = clamp((pos.x - pos.y + val) * 0.5, 0.0, val);\n   vec2 d3 = pos + vec2(val - k, k);\n   float s = sign(max(d3.x, d1.y));\n   return sqrt(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3))) * s;\n}\n\nfloat chamferRect(vec2 pos, vec2 rt, vec2 cr) {\n   pos = abs(pos) - rt;\n   // vector from x-corner point to current point\n   vec2 d1 = pos + vec2(cr.x, 0.0);\n   // vector of the bevel edge\n   vec2 end = vec2(cr.x, -cr.y);\n   // distance vector from the bevel edge to current point\n   vec2 d3 = d1 - end * dot(d1, end) / dot(end, end);\n   // inside points satisfy: d3.x<0 && d1.y<0 && d2.x<0\n   float s = sign(max(max(d3.x, pos.y), pos.x));\n   return s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // mapping the dimension to (-1,1)\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    // rect color\n    vec3 line_color = vec3(1.0,1.0,0.0);\n    // background color\n    vec3 color = vec3(0.6);\n    // the half size of the rect\n    vec2 halfSize = vec2(0.8,0.6);\n    // the chamfer size\n    vec2 chamferRadius = vec2(0.3,0.2);\n    //float chamferRadius = 0.5;\n    \n    float pct = chamferRect(position, halfSize, chamferRadius);\n    color = mix(color,line_color,1.0-smoothstep(0.0,0.01,pct));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}