{"ver":"0.1","info":{"id":"ssKczK","date":"1661291160","viewed":142,"name":"Overheating Protection","username":"Tomasz","description":"OP","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["overheatingprotection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n#define t iTime/4.0\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 Testy(vec2 uv, float a) {\n   \n \tmat2 m = mat2(cos(vec4(0,55,39,0)));\n    for(float k=.4, i=0.; i<a; i++)\n        k *= .7+.1*sin(2.243 +7.4),\n        uv.y = abs( uv *= mat2(cos(7.4 + vec4(0,552,39,0))) ).y - k;\n\t\n    return uv;\n}\nfloat ShapeFuncton() {\n\n\n    float x = mod(iTime,5.65)/5.65;\n   \n        if( x < 0.12) {          \n            return pow(x -(0.1/0.83), 2.0)*50.4;\n        }else if ( x <0.71) {  \n            return 0.0;\n        }else if (x < 0.82) { \n            return pow(x -(0.1134/0.16), 2.0)*80.8;   \n        }else if (x < 0.95) { \n            return 1.0;\n        }else if (x < 1.0) { \n            return pow(x -(0.1/0.0775), 2.0)*8.76;\n    }\n}\n\nfloat GetDist(vec3 p) {\n    float d = 0.0;\n    float d1 = 0.0;\n    \n    \n    vec2 xy = Testy(vec2(length(p.xz), abs(p.y)), 10.0);\n    vec2 yz = Testy(vec2(length(p.yz), abs(p.x)), 10.0);\n    vec2 zx = Testy(vec2(length(p.zx), abs(p.z)), 10.0);\n    \n    vec2 xy1 = Testy(vec2(length(p.xz), abs(p.y)), 9.0);\n    vec2 yz1 = Testy(vec2(length(p.yz), abs(p.x)), 9.0);\n    vec2 zx1 = Testy(vec2(length(p.zx), abs(p.z)), 9.0);\n    \n    d = max(xy.x, max(xy.y, yz.x));\n    d1 = max(xy1.x, max(xy1.y, yz1.x));\n    \n    \n    d = mix(d1,d, ShapeFuncton());\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO= 0.0;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat BouncyFunction() {\n\n    float d1 = 2.75;\n  \n    float time = mod(iTime,5.65)/5.65;\n    \n        if( time < (0.352 / d1)) {\n            return 30.5625 * time * time + 0.5;\n        }else if ( time < 1.108 /d1) {\n            return 19.5625 * pow((time - (0.73 / d1)),2.0) + 0.6375;\n        }else if (time < 1.6088 /d1) {\n            return 43.7625 * pow((time - (1.3584 / d1)),2.0) + 0.6375;\n        }else if (time < 1.858 /d1) {\n            return 177.5625 * pow((time - (1.73359 / d1)),2.0) + 0.6343;\n        }else if (time < 2.108 /d1) {\n            return 177.5625 * pow((time - (1.983 / d1)),2.0) + 0.6343;\n        }else if (time < 2.3 /d1) {\n            return 300.5625 * pow((time - (2.204 / d1)),2.0) + 0.6343;\n        }else if (time < 2.6795 /d1) {\n            return 1.3;\n        }else if (time < 2.75 /d1) {\n            return 300.5625 * pow((time - (2.804 / d1)),2.0) + 0.385;\n        \n            }\n}  \n\nvec2 HeatDistortion(vec2 uv) {\n    \n    vec2 uvDistFromCenter = -vec2(length(uv.x),length(uv.y));\n    \n\tuvDistFromCenter.x = uvDistFromCenter.x + iChannelResolution[1].x * sin(T * 0.00001);\n\tuvDistFromCenter.y = uvDistFromCenter.y + iChannelResolution[1].y * sin(T * 0.00001);\n\t\n\tvec4 distortionColor = texture(iChannel1, uvDistFromCenter);\n    vec4 distortion = S(0.0 , 0.9,distortionColor);\n\t\n\tuv.x = uv.x + distortion.x/16.0 * BouncyFunction();\n\tuv.y = uv.y + distortion.y/16.0 * BouncyFunction();\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tvec2 mp = iMouse.xy/iResolution.xy*0.5+0.5;\n \n    vec3 lightCol = vec3(1.0, 0.8, 0.7);\n    \n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-mp.y*PI+1.);\n    ro.xz *= Rot(-mp.x*TAU);\n\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0,0), 9.0);\n    \n    vec2 uvDistortion = HeatDistortion(uv);\n       \n    float cds = dot(uvDistortion, uvDistortion);\n      \n    float light = 0.08/cds;\n    vec3 col = vec3(0);\n     \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n               \n        vec3 LightDir = -normalize(p);\n        float dif = dot(n, LightDir)*.5+.5;\n        col = vec3(dif) * BouncyFunction();\n        \n        col *= texture(iChannel0, r).rgb;\n        \n    }\n\n    col += light * S(0.0, 0.1,  d - 4.08) * lightCol;\n    \n    col *= BouncyFunction();\n    \n  \n    col = pow(col, vec3(.4545));\t\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}