{"ver":"0.1","info":{"id":"3ttyRs","date":"1609723220","viewed":435,"name":"Screenspace Normal Calculation","username":"oneshade","description":"asdf asdf","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["normals","heightmap","screenspace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 fetch(in vec2 p) {\n    return texture(iChannel0, p / iResolution.xy).rg;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 r = fetch(fragCoord + vec2(1.0, 0.0));\n    vec2 t = fetch(fragCoord + vec2(0.0, 1.0));\n    vec2 o = fetch(fragCoord);\n\n    vec3 n = normalize(vec3(o.r - r.r, o.r - t.r, 1.0));\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (o.g > 0.5) {\n        fragColor.rgb += max(0.0, dot(n, vec3(-0.58, 0.58, 0.58)));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float mapScene(in vec3 p) {\n    float r = iTime * 0.5;\n    float c = cos(r), s = sin(r);\n    p.xz *= mat2(c, s, -s, c);\n    p.yz *= mat2(c, s, -s, c);\n    return max(abs(p.x) - 2.0, max(abs(p.y) - 1.0, abs(p.z) - 3.0));\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 1000000.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (float i=0.0; i < 150.0; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            fragColor.r = p.z;\n            fragColor.g = 1.0;\n            break;\n        }\n\n        if (t > 50.0) {\n            break;\n        }\n\n        t += d;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}