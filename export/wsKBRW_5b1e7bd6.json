{"ver":"0.1","info":{"id":"wsKBRW","date":"1606820290","viewed":215,"name":"Lava Material 2","username":"treize","description":"Lava Material 2","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","lava"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void Lava2(vec2 UV,vec2 UVScale,float Scale,vec3 FilterColor,out vec3 Out,out float Line)\n{\n    vec2 p=UV*UVScale;\n    float noise=fbm(p);\n    float value=1.0+cos(noise*Scale)/2.0;\n    float value2=1.0+tan(noise*Scale)/ 2.0;\n    vec3 lava=FilterColor*value;\n   \tlava = mix(lava*0.95,lava,160.);\n    Out=lava*0.15;\n    //TODO\n    Line=pow(clamp(value2,0.0,1.0)*2.4,4.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \tvec2 p = (fragCoord* 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 lava;\n    float line;\n    Lava2(p,vec2(5.0),10.0,vec3(1.0,0.4,0.1),lava,line);\n    vec3 color;\n    color=lava;\n    //color=vec3(line);\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash(float p)\n{\n\tp = fract(p * .1031);\n\tp *= p + 33.33;\n\tp *= p + p;\n\treturn fract(p);\n}\nfloat noise( vec2 uv )\n{\n    vec3 x = vec3(uv, 0);\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+0.0), hash(n+1.0),f.x),\n                   mix( hash(n+57.0), hash(n+58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\nmat2 m = mat2(0.8,0.6,-0.6,0.8);\nfloat fbm(vec2 p)\n{\n    float f = 0.0;\n    f += 0.5000*noise( p );\n    p*=m*2.02;\n    f += 0.2500*noise( p );\n    p*=m*2.03;\n    f += 0.1250*noise( p );\n    p*=m*2.01;\n    f += 0.0625*noise( p );\n    f /= 0.9375;\n    return f;\n}\nvec2 voronoi_noise_randomVector(vec2 UV, vec2 offset)\n{\n\tmat2 m = \tmat2(15.27, 47.63, 99.41, 89.98);\n\tUV = fract(sin(UV* m) * 46839.32);\n\treturn vec2(sin(UV.y * +offset.x) * 0.5 + 0.5, cos(UV.x * offset.y) * 0.5 + 0.5);\n}\n\nvoid Voronoi(vec2 UV, vec2 AngleOffset, vec2 CellDensity, out float Out, out float Cells, out float Lines,out float Points)\n{\n\tvec2 g = floor(UV * CellDensity);\n\tvec2 f = fract(UV * CellDensity);\n\t\n\tfloat res = 8.0;\n\tfloat md=8.0;\n    vec2 mr;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n                mr=r;\n\t\t\t}\n\t\t}\n\t}\n    res = 8.0;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n\t\t    float d = dot(r,r);\n\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n\t\t\t    Out = res;\n\t\t\t    Cells = offset.x;\n\t\t\t}\n\t\t\tif( dot(mr-r,mr-r)>0.00001)\n\t\t\t{\n                md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t//Lines = mix(1.0, 0.0, smoothstep( 0.03, 0.06, md ));\n    Lines = mix(1.0, 0.0, smoothstep( 0.0, 0.1, md ));\n\tPoints =1.0-smoothstep( 0.0, 0.1, res );\n}","name":"Common","description":"","type":"common"}]}