{"ver":"0.1","info":{"id":"X3fGWN","date":"1707433907","viewed":70,"name":"Blinn-Phong DSA ","username":"omaribrahim","description":"Blinn-Phong DSA ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blinn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(in vec2 _st, in float _radius){\n    vec2 dist = _st - vec2(0.5);\n    return 1.0 - smoothstep(_radius - (_radius * 0.01),\n                            _radius + (_radius * 0.01),\n                            dot(dist, dist) * 4.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1) and move to the center\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    // Repeat the pattern\n    uv = fract(uv * 2.0);\n    // Create a mask for a circle, repeated according to\n    // fract\n    vec3 mask = vec3(circle(uv, 1.));\n\n    // Get the position of the surface at point in the uv space\n    float x = uv.x - .5; // Center the x coordinate\n    float y = uv.y - .5; // Center the y coordinate\n    // .25 creates more depletion around the edges\n    float z = sqrt(.25 - (pow(x, 2.0) + pow(y, 2.0))); // x^2 + y^2 + z^2 = 1\n\n    // Apply the mask to the surface\n    vec3 uSurface = vec3(mask.x * x, mask.y * y, z * mask.z);\n\n    // Normalize the surface\n    vec3 uNorm = normalize(uSurface);\n\n    // Get an interactive light direction\n    vec3 lightDir = normalize(vec3(iMouse.xy / iResolution.xy, 1.) - .5);\n\n    // Diffuse component from Blinn-Phong\n    float nL = max(0.0, dot(uNorm, lightDir));\n\n    // Ambient component\n    vec3 cM = vec3(x, y, .5) * mask;\n    float kA = .9;\n\n    // Specular Component\n    vec3 viewDir = normalize(vec3(0.5, 0.50, 1.0));\n    vec3 halfVec = normalize(lightDir + viewDir);\n    float p = 100.0;\n    float kS = .7;\n    float spec = pow(max(0.0, dot(uNorm, halfVec)), p); // Adjust shininess\n\n    // Final color calculation\n    vec3 cL = vec3(1.0, 1.0, 1.0) *.9;\n    vec3 col = kA * cM + cL * nL + kS * cL * spec;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}