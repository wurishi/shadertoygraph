{"ver":"0.1","info":{"id":"tlBBzz","date":"1598207392","viewed":64,"name":"Squish Zone","username":"scanlime","description":"Just some spheres","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdf(vec3 p)\n{\n    float t = iTime * .5;\n \tfloat d = -length(p - vec3(0.)) + 10.;   \n    d = min(d, length(p - vec3(sin(t) * 4., cos(t) * 4., 10.)) - 3.);\n    d = min(d, length(p - vec3(0., 0., 20.)) - 13. + sin(iTime*.8 + 4.*p.x));       \n    return d;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    color = vec4(0., 0., 0., 1.);\n    vec2 res = iResolution.xy;\n    vec2 uv = (coord/res - vec2(.5)) * vec2(res.x/res.y, 1.);\n\n    vec3 ep = vec3(0.001, 0., 1000.);\n    vec3 eye = vec3(0., 0., 0.);\n\tvec3 view = normalize(vec3(uv.xy, 1.));\n  \tfloat dist = 0., st = 0.;\n    \n    for (int i=0; i<10; i++) {\n        vec3 pt = eye + view * dist;\n\t\tdist += (st = sdf(pt));\n        if (st < ep.x) {\n\t\t\tvec3 grad = normalize(\n                vec3(sdf(pt + ep.xyy) - st,\n                             sdf(pt + ep.yxy) - st,\n                             sdf(pt + ep.yyx) - st));\n\n           \tvec3 light = normalize(vec3(sin(iTime*0.6),-1.,-3.));\n            \n            color.xyz += vec3(.2,.2,.6) * dot(grad, light);\n            color.xyz += vec3(.8,.9,.2) * pow(dot(grad, light), 20.);\n            \n            return;\n        }\n    }\n    discard;\n}","name":"Image","description":"","type":"image"}]}