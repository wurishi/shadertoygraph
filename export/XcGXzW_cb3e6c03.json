{"ver":"0.1","info":{"id":"XcGXzW","date":"1714845168","viewed":86,"name":"bae #003 ~ Gloop Eggs","username":"BretHudson","description":"Gloop da gloop","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["eggs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(in float t)\n{\n    vec3 a = vec3(0.731, 1.098, 0.192);\n    vec3 b = vec3(0.358, 1.090, 0.657);\n    vec3 c = vec3(1.077, 0.360, 0.328);\n    vec3 d = vec3(0.965, 2.265, 0.837);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat antialias(in float d)\n{\n    return smoothstep(1.0, -1.0, d / fwidth(d));\n}\n\nfloat circles = 6.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.x;\n    \n    uv *= circles;\n    \n    float d = 1.0;\n    \n    float ooo = 1.75;\n    uv.y += ooo;\n    for (float i = -circles; i < circles; i += 1.0)\n    {\n        float curStep = round((uv.x + iTime) / 2.0) - iTime / 2.0;\n        float xOffset = -curStep * 2.0;\n        float yOffset = -abs(curStep) * abs(curStep) * 0.1;\n        //yOffset = 0.0;\n        vec2 cUV = uv;\n        vec2 circlePos = cUV + vec2(xOffset, yOffset);\n        d = min(d, distance(circlePos, vec2(0.0, cUV.y * cUV.y / 3.5)) - 0.75 * (1.0 - abs(curStep / circles)));\n    }\n\n    // Time varying pixel color\n    vec3 col = palette(round((uv.x + iTime) / 2.0));\n    col *= antialias(d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}