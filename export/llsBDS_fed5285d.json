{"ver":"0.1","info":{"id":"llsBDS","date":"1513197386","viewed":336,"name":"Spinning Tunnel Stuff","username":"balkhan","description":"another tunnel to add to my collection !!","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n** License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n** Created by bal-khan\n*/\n\nfloat   t;\n\n#define I_MAX       50\n#define E           0.001\n#define FAR         30.\n\n\nvec4    march(vec3 pos, vec3 dir);\nvec3    camera(vec2 uv);\nvec3    calcNormal(in vec3 pos, float e, vec3 dir);\nvec2    rot(vec2 p, vec2 ang);\nvoid    rotate(inout vec2 v, float angle);\n\nvec3    id;\nvec3    base;\nvec3    h;\n\nvoid mainImage(out vec4 c_out, in vec2 uv)\n{\n    h *= 0.;\n    t = iTime;\n\n    vec2\tu = (uv.xy - iResolution.xy*.5) / iResolution.y;\n    \n    vec3\tpos = vec3(.0,.0,.0);\n    vec3\tdir = camera(u*3.);\n    \n    vec4    inter = (march(pos, dir));\n    vec3    col = vec3(0, 0, 0);\n\n    base = vec3\n        (\n            abs(sin(id.z+id.x+id.y+0.00) )\n            ,\n            abs(sin(id.z+id.x+id.y+1.04) )\n            ,\n            abs(sin(id.z+id.x+id.y+2.08) )\n        );\n    if (inter.y == 1.)\n        col.xyz = base * ( -1.*inter.w*.05 + 1. -inter.x*.001 )-h;\n\n    c_out =  vec4(col, 1.);\n}    \n\nfloat   mylength(vec3 p)\n{\n    float   ret = 1e5;\n    \n    p = p*p;\n    p = p*p;\n    p = p*p;\n    \n    ret = p.x + p.y + p.z;\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nfloat   mylength(vec2 p)\n{\n    float   ret = 1e5;\n    \n    p = p*p;\n    p = p*p;\n    p = p*p;\n    \n    ret = p.x + p.y;\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\nfloat   scene(vec3 p)\n{\n    float   mind = 1e5;\n    p.z -= iTime*3.;\n\n    p.y += sin(iTime*-1.+p.z*.5)*.5;\n    p.x += cos(iTime*-1.+p.z*.5)*.5;\n    rotate(p.xy, p.z*.25 + 1.0*sin(p.z*.06125 - iTime*0.5) + .25*iTime);\n\n    vec3    pr = p;\n    \n    pr.xy = fract(p.xy*.5)-.5;\n    id = vec3(floor(p.xy*.5), floor(p.z*5.));\n    p.z += (mod(id.x*1., 2.)-1. == 0. ? 5. : 0. );\n    p.z += (mod(id.y*1., 2.)-1. == 0. ? 5. : 0. );\n    rotate(pr.xy, clamp( +(mod(id.x, 2.)-1. == 0. ? 1. : -1.) + (mod(id.y, 2.)-1. == 0. ? 1. : -1.), -2., 2.) * iTime*2.+(mod(id.x, 2.)-1. == 0. ? -1. : -1.)*p.z*2.5 + iTime*1. );\n    \n    pr.xy = abs(pr.xy)-.05-(sin(p.z*0.5+iTime*2.5)*.15);\n    pr.xy *= clamp(1./length(pr.xy), .0, 2.5);\n    pr.z = (fract(pr.z*5.)-.5);\n    mind = mylength(pr.xy*(.1*pr.z+.5))-.051;\n    \n    return(mind);\n}\n\nvec4    march(vec3 pos, vec3 dir)\n{\n    vec2    dist = vec2(0.0, 0.0);\n    vec3    p = vec3(0.0, 0.0, 0.0);\n    vec4    step = vec4(0.0, 0.0, 0.0, 0.0);\n    vec3    dirr;\n    //rotate(dir.zy, .7);\n\t//rotate(dir.xy, 1.7);\n\t//rotate(dir.xz, 1.7);\n    \n    for (int i = -1; i < I_MAX; ++i)\n    {\n        dirr = dir;\n        rotate(dirr.zx, .025*dist.y );\n        p = pos + dirr * dist.y;\n        dist.x = scene(p)*1.;\n        dist.y += dist.x;\n        vec3    s = p- 1.*vec3(.0,7.0,0.0); // lightpos\n        float   d = length(s.xy)-.1;\n        h -= vec3(.3, .2, .0)*.1/ (d+.01);\t// it brightens the scene but u can see an ugly cylinder\n        \t\t\t\t\t\t\t\t\t// on the top-middle when not hidden by the scene\n        h += (\n            .001/(dist.x*dist.x+0.01) \n            -\n            1./(dist.y*dist.y+40.)\n             )\n        ;\n        if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < E || dist.y >= FAR)\n        {\n            if (dist.x < E || log(dist.y*dist.y/dist.x/1e5)>0.)\n                step.y = 1.;\n            break;\n        }\n        step.x++;\n    }\n    step.w = dist.y;\n    return (step);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n    v = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3    camera(vec2 uv)\n{\n    float       fov = 1.;\n    vec3        forw  = vec3(0.0, 0.0, -1.0);\n    vec3        right = vec3(1.0, 0.0, 0.0);\n    vec3        up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x-.85) * right + (uv.y-0.5) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}