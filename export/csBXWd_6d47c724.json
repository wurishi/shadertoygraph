{"ver":"0.1","info":{"id":"csBXWd","date":"1671058882","viewed":69,"name":"Sun Fire","username":"4LT","description":"Fun with modular arithmetic and polar coordinates!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["bw"],"hasliked":0,"parentid":"DdSXWt","parentname":"Rotri"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float speed = 0.2;\nconst float width = 60.0;\nconst float swirlScale = 3.0;\nconst float tau = 2.0 * acos(-1.0);\nconst int sides = 50;\n\n\n\nconst float hWidth = width / 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float radius = iResolution.y / 2.0;\n    float fragRadius = length(fragCoord - iResolution.xy / 2.0);\n    float swirl = swirlScale / iResolution.y;\n    \n    vec2[sides] pts;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n    for (int i = 0; i < sides; i++) {\n        float angle = (float(i) + speed * iTime - fragRadius * swirl) / float(sides) * tau;\n        pts[i] = vec2(radius * cos(angle), radius * sin(angle));\n        pts[i] = pts[i] + iResolution.xy / 2.0;\n    }\n    \n    float shortestDist = 999999.9;\n    for (int i = 0; i < sides; i++) {\n        vec2 start = pts[i];\n        vec2 end = pts[(i+23)%sides];\n        \n        vec2 delta = end - start;\n        vec2 v = normalize(delta);\n        \n        float t = (dot(v, fragCoord) - dot(v, start))/dot(v, v);\n        \n        float dist;\n        if (t <= 0.0) {\n            dist = length(start - fragCoord);\n        } else if (t >= length(delta)) {\n            dist = length(end - fragCoord);\n        } else {\n            dist = length(start + v*t - fragCoord);\n        }\n        \n        shortestDist = min(dist, shortestDist);\n    }\n    \n    color = vec3(cos(mod(shortestDist - speed * iTime * 64.0, hWidth)/hWidth * tau));\n    color = pow(color, vec3(0.4545));\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}