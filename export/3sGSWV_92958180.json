{"ver":"0.1","info":{"id":"3sGSWV","date":"1574951410","viewed":1389,"name":"Improved film grain","username":"noby","description":"A lot of \"film grain\" shaders usually just default to some sort of white or value noise summation. This rarely looks like realistic grain present on most film reproductions. Here instead we perform a more convincing high-pass operation on value noise.","likes":23,"published":1,"flags":0,"usePreview":1,"tags":["noise","postprocessing","film","grain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Licensed under the MIT license:\n// https://opensource.org/licenses/MIT.\n\n#define USE_COLOR_GRAIN\n\n// From Dave Hoskins: https://www.shadertoy.com/view/4djSRW\nfloat hash(vec3 p3){\n    p3 = fract(p3 * 0.1031);\n    p3 += dot(p3,p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// From iq: https://www.shadertoy.com/view/4sfGzS\nfloat noise(vec3 x){\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(mix(hash(i+vec3(0, 0, 0)), \n                       hash(i+vec3(1, 0, 0)),f.x),\n                   mix(hash(i+vec3(0, 1, 0)), \n                       hash(i+vec3(1, 1, 0)),f.x),f.y),\n               mix(mix(hash(i+vec3(0, 0, 1)), \n                       hash(i+vec3(1, 0, 1)),f.x),\n                   mix(hash(i+vec3(0, 1, 1)), \n                       hash(i+vec3(1, 1, 1)),f.x),f.y),f.z);\n}\n\n// Slightly high-passed continuous value-noise.\nfloat grain_source(vec3 x, float strength, float pitch){\n    float center = noise(x);\n\tfloat v1 = center - noise(vec3( 1, 0, 0)/pitch + x) + 0.5;\n\tfloat v2 = center - noise(vec3( 0, 1, 0)/pitch + x) + 0.5;\n\tfloat v3 = center - noise(vec3(-1, 0, 0)/pitch + x) + 0.5;\n\tfloat v4 = center - noise(vec3( 0,-1, 0)/pitch + x) + 0.5;\n    \n\tfloat total = (v1 + v2 + v3 + v4) / 4.0;\n\treturn mix(1.0, 0.5 + total, strength);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n\t\n    vec2 x = fragCoord;\n    // Alternatively use iTime here instead and change the grain_rate\n    // parameter to correspond to frames-per-second.\n    float t = mix(0.0, float(iFrame), step(0.5, uv.x));\n    vec3 color = mix(texture(iChannel0, uv*2.0).rgb, vec3(0.5), step(0.5, uv.y));\n    vec3 grain = vec3(0);\n    \n    const float grain_strength = 1.0;\n    const float grain_rate = 1.0;\n    // Range: [0.5, 1.0].\n    const float grain_pitch = 1.0;\n    \n#ifdef USE_COLOR_GRAIN\n    float rg = grain_source(vec3(x, floor(grain_rate*(t))),     grain_strength, grain_pitch);\n    float gg = grain_source(vec3(x, floor(grain_rate*(t+9.0))), grain_strength, grain_pitch);\n    float bg = grain_source(vec3(x, floor(grain_rate*(t-9.0))), grain_strength, grain_pitch);\n    \n    // Consider using values outside the [0, 1] range as well\n    // to introduce interesting color shifts to the source.\n    const float color_level = 1.0;\n    vec3 color_grain = vec3(rg, gg, bg);\n    color_grain = mix(vec3(dot(color_grain, vec3(0.2126, 0.7152, 0.0722))), color_grain, color_level);\n    grain = color_grain;\n#else\n    const float neutral_grain_factor = sqrt(2.0);\n    grain = vec3(grain_source(vec3(x, floor(grain_rate*t)), grain_strength/neutral_grain_factor, grain_pitch));\n#endif\n    \n    // Control whether to add or multiply or lift the source with the grain.\n    // Multiply (0.0) should be more true to life, but adjust to taste.\n    const float grain_lift_ratio = 0.5;\n    color = max(mix(color*grain, color+(grain-1.0), grain_lift_ratio), 0.0);\n    \n    // After this you would normally perform tone mapping,\n    // apply the grain before that.\n    fragColor.rgb = color;\n}","name":"Image","description":"","type":"image"}]}