{"ver":"0.1","info":{"id":"3dGGWh","date":"1570039308","viewed":86,"name":"GuitarGame","username":"JoeVN","description":"Use keys 1 to 5 to select the fret and enter to strum","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["game","music","guitar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Keyboard iChannel0\n#define Notes iChannel1\n\nNote GetNote(int noteIndex){\n    vec4 noteInfo = texture(Notes,(vec2(noteIndex,0)+0.5)/iResolution.xy);\n\treturn CreateNoteStruct(noteIndex,noteInfo) ;\n}\n\n// http://thrill-project.com/archiv/coding/bitmap/\nfloat Character(float n, vec2 p)\n{\n    p = floor(p*vec2(4.0, -4.0) + 2.5);\n\n    if (clamp(p.x, 0.0, 4.0) == p.x)\n    {\n        if (clamp(p.y, 0.0, 4.0) == p.y)\n        {\n            if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\n        }\n    }\n    return 0.0;\n}\n\nvoid DrawNumberPart(float part,float fontSize, vec2 position,inout float characters,inout vec3 currentColor, in vec2 uv){\n\twhile(part>=0.9)\n    {\n        int digit = int(mod(part,10.));\n        vec2 textUV =position * fontSize + uv*fontSize;\n        textUV.x*=-1.;\n        textUV.y*=-1.;\n        textUV-= vec2(characters,0.) ;\n        currentColor+= vec3(1.) * Character(GetDigit(digit),textUV);\n        part /= 10.;\n        characters++;\n    }\n\n}\n\nvoid DrawNumber(float number,float fontSize, vec2 position,inout vec3 currentColor, in vec2 uv){\n    fontSize = 100./fontSize;\n    float intPart = floor(number);\n    float decimalPart = floor(fract(number)*PRECISION);\n    float characters = 0.;\n    \n\tDrawNumberPart(decimalPart,fontSize,position,characters,currentColor,uv + vec2(-0.01,.0));\n    vec2 textUV =position * fontSize + uv*fontSize;\n    textUV.x*=-1.;\n    textUV.y*=-1.;\n    textUV-= vec2(characters - .7  ,0.) ;\n    currentColor+= Character(4.,textUV);\n\tDrawNumberPart(intPart,fontSize,position,characters,currentColor,uv);\n\n\n    \n}\n\nvec3 Circle(vec2 center, float radius,vec3 color,float blur,vec2 uv){\n    float dist= length(uv - center );\n\treturn smoothstep(radius,radius-blur,dist) * color;\n}\n\nvec3 GetFretColor(int fretIndex){\n\tint iterations = fretIndex/3;\n   \tvec3 fretColor= vec3(0);\n    fretColor[fretIndex%3] += .515;\n    if(iterations !=0 ){\n    \tfor(int i=0;i<iterations;i++){\n        \tfretColor[(fretIndex + i +1)%3] += .2;\n    \t}\n    }\n    return fretColor;\n}\n\n\nvoid CreateFret(int fretIndex, inout vec3 currentColor, in vec2 uv){\n    vec3 keyColor=  KeyPressed(Keyboard,FretKey(fretIndex))? vec3(.4):vec3(.0);\n\tvec3 fretColor= GetFretColor(fretIndex) + keyColor;\n    vec2 position = GetFretPosition(fretIndex);\n    currentColor += Circle(position,FretRadius,fretColor,.02,uv);\n    currentColor -= Circle(position,NoteRadius,fretColor,.02,uv);\n\n}\n\nvoid CreateNote(int noteIndex, inout vec3 currentColor, in vec2 uv){\n    Note note =  GetNote(noteIndex);\n    if(note.Deleted){\n    \treturn;\n    }\n    int fretIndex= note.FretIndex;\n\tvec3 fretColor= note.Hit? vec3(1.): GetFretColor(fretIndex);\n\tvec2 fretPosition = GetFretPosition(fretIndex);\n    fretPosition.y = GetNoteY(note.LifeTime);\n    currentColor += Circle(fretPosition,NoteRadius,fretColor,.02,uv);\n    currentColor += Circle(fretPosition,NoteRadius*.8,vec3(.2),.05,uv);\n}\n\n\nvoid CreateNotes(inout vec3 currentColor,in vec2 uv){\n    for(int i=0;i< MAX_NOTES;i++){\n    \tCreateNote(i,currentColor,uv);\n    }\n}\n\nvoid CreateUI(inout vec3 currentColor,in vec2 uv){\n    for(int i=0;i<FretCount;i++){\n\t\tCreateFret(i,currentColor,uv);\n        //DrawNumber(1.,5.,vec2(-0.1,-.45),currentColor,uv);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n\tuv.x *= iResolution.x/iResolution.y;\n    float perspectiveAngle = 30.;\n    vec3 color = vec3(0,0,0);\n    CreateNotes(color,uv);\n\tCreateUI(color,uv);\n    \n    fragColor =vec4(color,0) ;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Notes iChannel0\n#define Music iChannel1\n#define Keyboard iChannel2\n#define SoundCloud iChannel3\n\nfloat FFT(float texel){\n    #ifdef SOUND_CLOUD\n    \treturn texture(SoundCloud, vec2(texel/512.,0.25) ).x; \n    #else\n   \t\treturn texelFetch(Music, ivec2(texel,0), 0 ).x; \n    #endif\n}\n\nvoid Write(ivec2 position, vec4 data,inout vec4 fragColor, in ivec2 fragC){\n\tif(position==fragC) fragColor = data;\n}\n\nvoid Write(Note note,inout vec4 fragColor, in ivec2 fragC){\n    ivec2 position = ivec2(note.NoteIndex,0);\n    vec4 data = vec4(float(note.FretIndex),note.LifeTime,note.Hit? 1.: 0.,note.Deleted?0.:1.);\n    Write(position,data,fragColor,fragC);\n}\n\nvoid DeleteNote(Note note,inout vec4 fragColor, in ivec2 fragC){\n    ivec2 position = ivec2(note.NoteIndex,0);\n    vec4 data = vec4(0.);\n\tWrite(position,data,fragColor,fragC);\n}\n    \n\nNote GetCurrentNote(inout vec4 fragColor,in ivec2 fragC){\n\tNote note = CreateNoteStruct(fragC.x,fragColor);\n    if(fragC.y!= 0){\n    \tnote.NoteIndex = -1;\n    }\n\treturn note ;\n}\n\nbool CheckHit(Note note){\n    if(note.Deleted){\n\t\treturn false;\n    }\n    float fretY = GetFretPosition(note.FretIndex).y;\n    float noteY = GetNoteY(note.LifeTime);\n    bool keyPressed = KeyPressed(Keyboard,FretKey(note.FretIndex)) &&\n        KeyClick(Keyboard,StrumKey) ;\n    return( keyPressed &&\n        \t(noteY - NoteDetectionRadius) <  (fretY + NoteDetectionRadius) && \n            (noteY + NoteDetectionRadius) >  (fretY - NoteDetectionRadius) );\n}\n\nvoid UpdateNote(inout vec4 fragColor, in ivec2 fragC){\n    Note note= GetCurrentNote(fragColor,fragC);\n    if(note.NoteIndex == -1){\n    \treturn;\n    }\n    note.LifeTime+= iTimeDelta;\n    if(note.LifeTime > MAX_LIFETIME || note.Hit)\n\t\tDeleteNote(note,fragColor,fragC);\n    else{\n    \tnote.Hit = CheckHit(note);\n        Write(note,fragColor,fragC);\n    }\n}\n\nvoid GenerateNotes(inout vec4 fragColor, in ivec2 fragC){ \n    Note note= GetCurrentNote(fragColor,fragC);\n    if(note.Deleted && FFT(float(note.NoteIndex) * 256./float(MAX_NOTES))>.5){\n        note.Deleted=false;\n        note.LifeTime=0.;\n        note.FretIndex= note.NoteIndex % FretCount;\n    \tWrite(note,fragColor,fragC);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(Notes,fragCoord/iResolution.xy);\n    ivec2 fragC= ivec2(fragCoord);\n    UpdateNote(fragColor,fragC);\n    GenerateNotes(fragColor,fragC);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define FretBaseKey 49\n#define FretKey(index) FretBaseKey + index\n#define StrumKey 13\n#define FretCount 5\n#define FretRadius .1\n#define NoteDetectionRadius FretRadius * .3\n\n//#define SOUND_CLOUD\n\n#define NoteRadius FretRadius * .9\n#define NoteSpeed .4\n#define MAX_LIFETIME (1.+NoteRadius)/NoteSpeed\n#define MAX_NOTES 5\n\n#define PRECISION 100.\n#define PI 3.14159265359\n#define DEG_TO_RAD PI / 180.0\n\nstruct Note {\n    int NoteIndex;\n\tint FretIndex;\n    float LifeTime;\n    bool Deleted;\n    bool Hit;\n};\n\n    \nstruct Score{\n    int Hit;\n    int Miss;\n};\n    \nvec2 GetFretPosition(int fretIndex){\n\tfloat posX = -float(FretCount)*.125 + float(fretIndex+1)*2.*FretRadius;\n    float posY = -.37;\n    return vec2(posX,posY);\n}\n\nfloat GetNoteY(float LifeTime){\n    return  .5 + FretRadius - NoteSpeed* LifeTime;\n}\n\nNote CreateNoteStruct(int noteIndex, vec4 noteInfo){\n    Note note;\n   \tnote.NoteIndex =noteIndex;\n    note.FretIndex = int(noteInfo.x);\n   \tnote.LifeTime = noteInfo.y;\n    note.Hit = noteInfo.z > 0.;\n    if(note.NoteIndex >= MAX_NOTES){\n        note.NoteIndex=-1;\n    }else if(noteInfo.w == 0.){\n    \tnote.Deleted=true;\n    } \n\treturn note;\n}\n\nScore CreateScoreStruct(vec4 info){\n    Score score;\n    score.Hit = int(info.x);\n\tscore.Miss = int(info.y);\n\treturn score;\n}\n\nfloat KeyData(sampler2D keyboard , int keyCode, int state){\n\treturn texelFetch(keyboard,ivec2(keyCode,state),0).x;\n}\n\nbool KeyPressed(sampler2D keyboard,int keyCode){\n\treturn KeyData(keyboard,keyCode,0) > 0.;\n}\n\nbool KeyClick(sampler2D keyboard,int keyCode){\n\treturn KeyData(keyboard,keyCode,1) > 0.;\n}\n\n// Utils\n\nfloat GetDigit(int number){\n\tif(number == 0) return 15018318.;\n\tif(number == 1) return 4329604.;\n    if(number == 2) return 14758158.;\n    if(number == 3) return 14954766.;\n    if(number == 4) return 10827842.;\n    if(number == 5) return 14956622.;\n    if(number == 6) return 14956878.;\n    if(number == 7) return 14747714.;\n    if(number == 8) return 15022414.;\n    if(number == 9) return 15022158.;\n}\n\n\n","name":"Common","description":"","type":"common"}]}