{"ver":"0.1","info":{"id":"NdXSD7","date":"1618692588","viewed":94,"name":"MashMashGraph","username":"Polyester","description":"Kozhukh Polina 312 \ntask 5-6 - Icosahedron and water\nAmbient Occlusion\nМягкие тени\nAntialiasing \nОкружение в виде текстурированной плоскости \nОкружение в виде текстурированного куб-мапа ","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["icosahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //simple vignette posteffect\n    float vig = 1.0 - distance(uv, vec2(0.5));\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) * vig / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(-6, 7, 14);\nconst vec3 LIGHT1_POS = vec3(-2, 1.5, -3);\nconst float LIGHT1_RADIUS = 1.0;\nconst vec3 LIGHT1_COLOR = vec3(1.0, 0.8, 0.9);\n\nconst vec3 LIGHT2_POS = vec3(3.0, 1.0, 1.0);\nconst float LIGHT2_RADIUS = 1.0;\nconst vec3 LIGHT2_COLOR = vec3(1.0, 1.0, 1.0);\nvec3 randDir;\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-2.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.5 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.5) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.5) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nbool belongtriangle(vec3 a1, vec3 a2, vec3 a3, vec3 point)\n{\n    vec3 v1 = a2 - a1;\n    vec3 v2 = a3 - a2;\n    vec3 v3 = a1 - a3;\n    vec3 normal = normalize(cross(v1, v2));\n    \n    if (dot((cross(v1, point - a1)), normal) < 0.0 ||\n        dot((cross(v2, point - a2)), normal) < 0.0 ||\n        dot((cross(v3, point - a3)), normal) < 0.0)\n    {\n        return false;   \n    }\n    return true;\n}\n\n\nfloat make_side(vec3 v1, vec3 v2, vec3 v3, vec3 dir, vec3 pos, out vec3 normal, float t, vec3 centr)\n{\n    float cur_t;\n    vec3 vect1 = v2 - v1;\n    vec3 vect2 = v3 - v2;\n    vec3 cur_normal =  - normalize(cross(vect1, vect2));\n    vec3 to_centr = centr - v1;\n    \n    float dDotN = dot(dir, cur_normal);\n\n\tcur_t = dot(v2 - pos, cur_normal) / dDotN;\n    vec3 worldPos = cur_t * dir + pos;\n    \n    if (belongtriangle(v1, v2, v3, worldPos))\n    {\n        if (cur_t < t || t < 0.0)\n        {\n            if (dot(cur_normal, to_centr) <= 0.0)\n                normal = cur_normal;\n            else\n                normal = - cur_normal;\n            return cur_t;\n        }\n    }\n    return t;  \n}\n\nfloat traceIco(vec3 pos, vec3 dir, out vec3 normal, vec3 shuffle) \n{\n    float cur_t, t = -1.0;\n    vec3 cur_normal;\n    vec3 centr = vec3(0, 0, 0);\n    float sqrt5 = 2.2360679775;\n    \n    float phi = (1.0 + sqrt5) / 2.0;\n\n    \nvec3 p2= vec3(1.0, 0.0, phi);\nvec3 p6= vec3(-1.0, 0.0, phi); \n\nvec3 p12= vec3(0.0, phi, 1.0); \nvec3 p17= vec3(0.0, -phi, 1.0);\n\nvec3 p27= vec3(phi, 1.0, 0.0); \nvec3 p31= vec3(-phi, 1.0, 0.0);\nvec3 p33= vec3(-phi, -1.0, 0.0); \nvec3 p37= vec3(phi, -1.0, 0.0);\n\nvec3 p46= vec3(0.0, phi, -1.0); \nvec3 p51= vec3(0.0, -phi, -1.0);\n\nvec3 p54= vec3(1.0, 0.0, -phi); \nvec3 p58= vec3(-1.0, 0.0, -phi); \n\n\np2 += shuffle;\np6 += shuffle;\n\np12 += shuffle;\np17 += shuffle;\n\np27 += shuffle;\np31 += shuffle;\np33 += shuffle;\np37 += shuffle;\n\np46 += shuffle;\np51 += shuffle;\n\np54 += shuffle;\np58 += shuffle;\n\n\n    t = make_side(p2, p6, p17, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p2, p12, p6, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p2, p17, p37, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n    t = make_side(p2, p37, p27, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n \n \n \n     t = make_side(p2, p27, p12, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p37, p54, p27, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p27, p54, p46, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n    t = make_side(p27, p46, p12, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n        \n        \n         t = make_side(p12, p46, p31, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p12, p31, p6, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p6, p31, p33, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n    t = make_side(p6, p33, p17, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n        \n        \n        t = make_side(p17, p33, p51, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p17, p51, p37, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p37, p51, p54, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n    t = make_side(p58, p54, p51, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n        \n    t = make_side(p58, p46, p54, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p58, p31, p46, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    t = make_side(p58, p33, p31, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n        \n    t = make_side(p58, p51, p33, dir, pos, normal,  t, centr);\n    if (t == INF)\n        return INF;\n \n    if(t < 0.0)\n        return INF;\n        \n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    \n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    if (cylT < dist)\n        return true;\n        \n    vec3 Icosahedron;\n    vec3 shuffle2 = vec3(-2, 0, -1.5);\n    float dodT = traceIco(pos + vec3(0, 0, 0.5), dir, Icosahedron, shuffle2);\n    if (dodT < dist)\n        return true;\n    \n    return false;\n\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    \n    vec3 toLight1 = LIGHT1_POS - pos;\n    vec3 ambient_light = vec3 (0, 0, 0);\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0 / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0 / distSq2;\n    \n    return ambient_light + color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.2\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 motion_random_vector = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    // motion blur\n    vec3 LIGHT2_POS = vec3(4, 1.5, 2) + vec3(1.0, 0, 0) * motion_random_vector.x * 0.07;\n    \n   \n    vec3 randomValues = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randomValues - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randomValues.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    const float WATER_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n            \n        vec3 firstlight;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, firstlight);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = firstlight;\n        }\n\n        vec3 secondlight;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, secondlight);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = secondlight;\n        }\n\n        vec3 cylinder;\n        float cylT = traceCylinder(curPos, curDir, cylinder);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylinder;\n        }\n        \n\n        vec3 Icosahedron;\n        vec3 shuffle2 = vec3(0, 0.25, 0);\n        float IcoT = traceIco(curPos, curDir, Icosahedron, shuffle2);\n        if (IcoT < t) {\n            t = IcoT;\n            normal = Icosahedron;\n            \n            if (randomValues.x  > GLASS_R * 14.0) {\n               materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1.0, 1.0, 1.0);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n       \n        vec3 sphere;\n        float sphT = traceSphere(curPos, curDir, 0.7, sphere);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphere;\n            \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3, worldPos.xy * worldPos.y).rgb;\n            \n            if (randomValues.x > GLASS_R * 8.0) {\n              materialType = EMISSION;\n            } else {\n                materialType = REFRACTION;\n                nEnter = WATER_N; \n            }\n    \n        }\n      \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define PHI 6.28318530718\n#define NUMBER 15\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\n    vec2 z = mod(uv*PHI, PHI)-250.0;\n\n\tvec2 i = vec2(z);\n\tfloat a = 1.0;\n\tfloat inten = .005;\n\n\tfor (int n = 0; n < NUMBER; n++) \n\t{\n\t\tfloat t = (1.0 - (3.5 / float(n+1)));\n\t\ti = z + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\ta += 1.0/length(vec2(z.x / (sin(i.x+t)/inten),z.y / (cos(i.y+t)/inten)));\n\t}\n\ta /= float(NUMBER);\n\ta = 1.17-pow(a, 1.4);\n\tvec3 colour = vec3(pow(abs(a), 8.0));\n    colour = clamp(colour + vec3(0.0, 0.2, 0.24), 0.0, 1.0);\n    \n\n\tvec2 pixel = 2.0 / iResolution.xy;\n\tuv *= 2.0;\n\n\tfloat f = floor(mod(.5, 2.0)); \n\tvec2 first = step(pixel, uv) * f;\t\t   \t\n\tuv  = step(fract(uv), pixel);\t\t\t\t\n\tfragColor.rgb = colour;\n}\n","name":"Buffer C","description":"","type":"buffer"}]}