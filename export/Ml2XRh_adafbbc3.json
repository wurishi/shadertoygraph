{"ver":"0.1","info":{"id":"Ml2XRh","date":"1441715715","viewed":339,"name":"The Happy Rectangle Project","username":"Sleicreider","description":"Rectangles(in this case squares :O )\nCreate own coordinates sys. for rectangle, and add other rectangles to it. \nI'm a noob","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"struct Rect\n{\n    float width;\n    float height;\n    float x;\n    float y;\n    vec3  color;\n    float rotation;\n    \n    vec2 csys; //it's own coordinate system\n};\n    \nRect CreateRect(float width, float height, float x, float y, vec3 color)\n{\n    Rect rect;\n    \n    rect.width = width;\n    rect.height = height;\n    rect.x = x;\n    rect.y = y;\n    rect.color = color;\n    \n    return rect;\n}\n\nvoid DrawRect(inout Rect rect,vec2 p, inout vec3 pix)\n{\n   \tfloat dx = p.x - rect.x;\n    float dy = p.y - rect.y;\n    \n    dx = cos(rect.rotation)*(p.x - rect.x) + sin(rect.rotation)*(p.y - rect.y);\n    dy = -sin(rect.rotation)*(p.x - rect.x) + cos(rect.rotation)*(p.y - rect.y);\n    \n    float fL = - rect.width/2.;  //far left\n    float fR = + rect.width/2.;  //far right\n    float fT = + rect.height/2.; //far top\n    float fB = - rect.height/2.; //far bottom\n\n    //anti-aliasing\n    float del;\n    del =  smoothstep(fL - 0.005, fL + 0.005,dx);\n    del *= 1. - smoothstep(fR - 0.005, fR + 0.005,dx);\n    del *=  smoothstep(fB - 0.005, fB + 0.005,dy);\n    del *= 1. - smoothstep(fT - 0.005, fT + 0.005,dy);\n    \n    float d = 0.005;\n    \n    if(dx > fL-d && dx < fR+d \n    && dy < fT+d && dy > fB-d)\n    {\n        pix = mix(pix,rect.color,del);\n    }\n    \n    rect.csys = vec2(dx,dy);\n}\n\nvoid AddRectTo(Rect rect,Rect target, inout vec3 pix)\n{\n    vec2 p = target.csys;\n    \n    float fL = rect.x - rect.width/2.;\n    float fR = rect.x + rect.width/2.;\n    float fT = rect.y + rect.height/2.;\n    float fB = rect.y - rect.height/2.;\n    \n    //anti-aliasing\n    float del;\n    del =  smoothstep(fL - 0.005, fL + 0.005,p.x);\n    del *= 1. - smoothstep(fR - 0.005, fR + 0.005,p.x);\n    del *=  smoothstep(fB - 0.005, fB + 0.005,p.y);\n    del *= 1. - smoothstep(fT - 0.005, fT + 0.005,p.y);\n    \n    float d = 0.005;\n    \n    if(p.x > fL-d && p.x < fR+d \n    && p.y < fT+d && p.y > fB-d)\n    {\n\t\tpix = mix(pix,rect.color,del);\n    }\n}  \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 r = 2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 bgCol = vec3(0.0);\n    vec3 white = vec3(1.0);\n    \n    vec3 red = vec3(1.0,0.0,0.0);\n    vec3 blue = vec3(0.0,0.0,1.0);\n    \n    vec3 pixel = bgCol;\n    \n    vec3 r1col = mix(red,blue,cos(iTime*5.));\n    Rect r1 = CreateRect(0.4,0.4,-0.5,0.0,r1col);\n    r1.rotation = 1.0 * iTime;\n    \n   \tRect r2 = CreateRect(0.4,0.4,1.0,0.0,vec3(1.,1.,0.));\n    r2.rotation = .1 * iTime;\n    \n    DrawRect(r1,r,pixel);\n    DrawRect(r2,r,pixel);\n   \t\n    Rect rsub1 = CreateRect(0.4,0.4,0.4,0.0,white);   \n    AddRectTo(rsub1,r2,pixel);\n    \n    Rect rsub2 = CreateRect(0.4,0.4,-0.4,0.0,white);   \n    AddRectTo(rsub2,r2,pixel);\n    \n    Rect rsub3 = CreateRect(0.4,0.4,0.0,0.4,white);   \n    AddRectTo(rsub3,r2,pixel);\n    \n    Rect rsub4 = CreateRect(0.4,0.4,0.0,-0.4,white);   \n    AddRectTo(rsub4,r2,pixel);\n    \n    fragColor = vec4(pow(pixel,vec3(1.0/2.2)),1.0); //Gamma correction\n}","name":"","description":"","type":"image"}]}