{"ver":"0.1","info":{"id":"sd2cW1","date":"1643477999","viewed":59,"name":"Imploding Color Wheel","username":"matsakis27","description":"First shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colorwheel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author:\n// Title:\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TWO_PI 6.28318530718 \nuniform vec2 u_resolution;\nuniform float u_time;\n\n// Function from IÃ±igo Quiles\n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat circle(float r, vec2 st) {\n    return smoothstep(r,r+0.008,distance(vec2(0.5), st));\n}\n\nfloat adjustment (float f) {\n    return pow(f, 1.416);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.0);\n\n    // Use polar coordinates instead of cartesian\n    vec2 toCenter = vec2(0.5)-st;\n    float angle = (atan(toCenter.y,toCenter.x)/TWO_PI + 0.5);\n    float angleplus = adjustment(angle);\n    float radius = length(toCenter)*2.0;\n\n    color = hsb2rgb(vec3(angleplus,radius,1.0));\n    vec3 color_mod = sin(iTime / color);\n\tcolor = mix(color_mod, vec3(1.0), circle(0.476, st));\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}