{"ver":"0.1","info":{"id":"M3KGWG","date":"1718308290","viewed":41,"name":"simple fractal shader","username":"omdalvii","description":"first shader attempt","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["practiice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fully based on Kishmisu's tutorial\n// Kishmisu's shader: https://www.shadertoy.com/view/mtyGWy\n// Video: https://www.youtube.com/watch?v=f4s1h2YETNY&list=LL&index=1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Position system and final color variable\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy )/iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0, 0.0, 0.0);\n    \n    \n    // Editable parameters\n    bool randColor = true;\n    \n    float iter_count = 5.0;\n    float frac_scale = 1.5;\n    \n    float exp_offset = 1.5;\n    float d_sin_scale = 8.0;\n    float sin_iter_offset = 1.57;\n    float speed = 0.75;\n    \n    float glow_intensity = 1.5; //must be > 0.0\n    \n    bool init_fract = true;\n    float init_fract_count = 1.0;\n\n\n    // Set up initial fract\n    if(init_fract){\n        for (float i = 1.0; i < init_fract_count; i++){uv = fract(uv * frac_scale) - 0.5;}\n    }\n    \n    // Iterate \n    for (float i = 0.0; i < iter_count; i++){\n        if(init_fract){uv = fract(uv * frac_scale) - 0.5;}\n        \n        float d = length(uv) * (exp_offset+exp(-length(uv0)));\n        vec3 col = palette(d, randColor);\n\n        d = sin(d*d_sin_scale + i*sin_iter_offset + iTime*speed)/d_sin_scale;\n        d = abs(d);\n\n        d = glow_intensity/(d*100.0);\n        d = pow(d, 2.0);\n\n        finalColor += col * d;\n        \n        if(!init_fract){uv = fract(uv * frac_scale) - 0.5;}\n    }\n    \n    // Final pixel color\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Color Palette generator/lookup\nvec3 palette( float dist, bool rand )\n{\n    if (rand) {\n        // Seed for hash functions\n        //vec3 seed = vec3(52.34, 23.13, 4.97); //orange\n        //vec3 seed = vec3(532.34, 223.13, 344.97); //turquoise\n        //vec3 seed = vec3(342.34, 434.213, 4331.97); //green & blue\n        vec3 seed = vec3(522.34, 233.13, 4331.97); // purple & lightblue\n        //vec3 seed = vec3(20.0, 569.0, 4200.0); //offwhite\n        //vec3 seed = vec3(420.0, 69.0, 42069.0); //pink\n        //vec3 seed = vec3(0.576,0.263,0.533); //green & yellow\n        //vec3 seed = vec3(0.243,0.733,0.702); //swag\n        //vec3 seed = vec3(0.235,0.561,0.604);\n    \n        vec3 a = vec3(dot(seed,vec3(127.1,311.7, 74.7)),\n                      dot(seed,vec3(269.5,183.3,246.1)),\n                      dot(seed,vec3(113.5,271.9,124.6)));\n        a = fract(sin(a)*43758.5453123);\n                  \n        vec3 b = vec3(dot(seed,vec3(147.1,311.7, 745.7)),\n                      dot(seed,vec3(229.5,163.3,246.1)),\n                      dot(seed,vec3(113.5,271.9,14.6)));\n        b = fract(sin(a)*43758.5453123);\n                  \n                  \n        vec3 c = vec3(dot(seed,vec3(147.1,511.7, 64.7)),\n                      dot(seed,vec3(259.5,123.3,456.1)),\n                      dot(seed,vec3(153.5,361.9,144.6)));\n        c = fract(sin(a)*43758.5453123);\n                  \n                  \n        vec3 d = vec3(dot(seed,vec3(137.1,611.7, 724.7)),\n                      dot(seed,vec3(229.5,383.3,266.1)),\n                      dot(seed,vec3(113.5,251.9,164.6)));\n        d = fract(sin(a)*43758.5453123);\n                  \n                  \n        return a + b*cos(6.28318 * (c * dist + d));\n    }else{\n        vec3 a = vec3(0.829, 0.269, 0.672);\n        vec3 b = vec3(0.608, 0.693, 0.087);\n        vec3 c = vec3(1.429, 0.454, 0.537);\n        vec3 d = vec3(0.195, 3.210, 1.174);\n        \n        return a + b*cos(6.28318 * (c * dist + d));\n    }\n}","name":"Common","description":"","type":"common"}]}