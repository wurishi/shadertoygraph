{"ver":"0.1","info":{"id":"XdfyWf","date":"1490065240","viewed":492,"name":"Simple Modulo Checkerboard","username":"r3eckon","description":"A very simple checkerboard shader I wrote to learn shader programming.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["simple","tutorial","modulo","checkers","cherckerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Simple Modulo Checkerboard\n//by r3eckon\n\n//Calculate odd or even (mod(x,2.0)) using modulo of input point divided by size\nvec2 calc(vec2 point, float size)\n{\n    vec2 value = vec2(mod(point.x/size,2.0),mod(point.y/size,2.0));\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Check current pixel\n    vec2 result = calc(fragCoord, 100.0);\n\t\n    //If calculated point components are both on the same \"side\" of the modulo operation\n    //current pixel must be white. Otherwise pixel must be black. \n    \n    if((result.x <=1.0 && result.y<=1.0) || (result.x >= 1.0 && result.y >= 1.0))\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n    else\n        fragColor = vec4(0.0,0.0,0.0,0.0);\n    \n    //Basically, if they are both divisable by 2 or both NOT divisable by two, place a white square. \n    //If only one of the components is divisable by 2 at a time, place a black square.\n    \n    //If you still dont understand how this works, write out the x,y coords of a checker board and look\n    //at how the pattern is distributed\n    \n}","name":"Image","description":"","type":"image"}]}