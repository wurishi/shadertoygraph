{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//2nd attempt to raymarch a 3d fractal\n//references https://www.shadertoy.com/view/XsfGzS by the mighty Kali\n//and Knighty's Kaleidoscopic IFS 3D Fractals, described here:\n//http://www.fractalforums.com/3d-fractal-generation/kaleidoscopic-%28escape-time-ifs%29/\n//if you have any suggestions/improvements let me know\n//ndxbxrme\n\nfloat detail = .025;\nvec3 lightdir = -vec3(1.5, 2., -0.5);\n\nconst int Iterations = 14;\nfloat Scale = 1.1;\nvec3 Offset = vec3(2.0123, 5.49, -0.065);\nmat3 rot;\nvec3 RotVector = vec3(0.25, 2.43333, 0.5);\nfloat RotAngle = 0.0;\n\nmat3  rotationMatrix3(vec3 v, float angle)\n{\n\tfloat c = cos(radians(angle));\n\tfloat s = sin(radians(angle));\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\nfloat fractal(vec3 z)\n{\n\tint n = Iterations;\n\tfor (int on = 0; on < Iterations; on++) {\n\t\tif(dot(z,z)<100000.0){\n\t\t\tz.xy = abs(z.xy);\n\t\t\tif(z.y>z.x) z.xy=z.yx;\n\t\t\tz.y=0.1927-abs(z.y-0.1927);\n\t\t\tz.x+=0.1927;\n\t\t\tif(z.z>z.x) {\n\t\t\t\tz.xz=z.zx; \n\t\t\t\tz.x-=0.1927;\n\t\t\t}\n\t\t\tz.x-=0.1927;\n\t\t\tif(z.z>z.x) {\n\t\t\t\tz.xz=z.zx;\n\t\t\t\tz.x+=0.1927;\n\t\t\t}\n\t\t\tz = rot *z;\n\t\t}\n\t\telse {\n\t\t\tn = on;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn abs(length(z)-length(Offset)) * pow(Scale, float(-n));\n}\n\nfloat DE(vec3 pos)\n{\n\treturn fractal(pos);\t\n}\n\nvec3 normal(vec3 p) {\n\tvec3 e = vec3(0.0,detail,0.0);\n\t\n\treturn normalize(vec3(\n\t\t\tDE(p+e.yxx)-DE(p-e.yxx),\n\t\t\tDE(p+e.xyx)-DE(p-e.xyx),\n\t\t\tDE(p+e.xxy)-DE(p-e.xxy)\n\t\t\t)\n\t\t);\t\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{   //IQ style\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<48; i++ )\n    {\n        float h = DE(ro + rd*t);\n\t\th = max( h, 0.0 );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 0.5 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat light(in vec3 p, in vec3 dir) {\n\tvec3 ldir=normalize(lightdir);\n\tvec3 n=normal(p);\n\tfloat sh=softshadow(p,-ldir,1.,20.);\n\tfloat diff=max(0.,dot(ldir,-n));\n\tvec3 r = reflect(ldir,n);\n\tfloat spec=max(0.,dot(dir,-r));\n\treturn diff*sh+pow(spec,30.)*.5*sh+.15*max(0.,dot(normalize(dir),-n));\t\n}\n\nvec3 castRay(vec3 ro, vec3 rd)\n{\n\tfloat td = 0.;\n\tfloat d = 10.;\n\tvec3 p;\n\tfor(int f=0; f<84; f++)\n\t{\n\t\tif(d > detail && td<100.){\n\t\t\tp = ro + td * rd;\t\n\t\t\td = DE(p);\n\t\t\ttd += d;\n\t\t}\n\t\t\n\t}\n\tvec3 col = vec3(0.0);\n\tif( d < detail) {\n\t\tcol = vec3(light(p - detail * rd, rd)) + vec3(0.02,0.00,0.05);\n\t}\n\telse {\n\t\tcol = vec3(0.2 + clamp(1.-dot(rd,lightdir),0.0,1.0) * 0.2);\t\n\t}\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n\tuv.y *= iResolution.y/iResolution.x;\n\tvec3 ro = vec3( sin(iTime * .2) * 50.0, 10.,cos(iTime * .2) * 50.);\n\tvec3 ta = vec3(0., 0.0, 0.0);\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(0.0,1.0,0.0);\n\tvec3 cu = normalize(cross(cw, cp));\n\tvec3 cv = normalize(cross(cu, cw));\n\tvec3 rd = normalize(uv.x * cu + uv.y * cv + 2.5 * cw);\n\t\t\n\tRotVector += iTime;\n\trot = rotationMatrix3(normalize(RotVector),RotAngle + iTime * 1.2);\n\t\n\tvec3 col = castRay(ro, rd);\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsfGD2","date":"1379540996","viewed":409,"name":"1927","username":"ndxbxrme","description":"A friendly fractal asteroid I used to know.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","raymarch"],"hasliked":0,"parentid":"","parentname":""}}