{"ver":"0.1","info":{"id":"ctGfzt","date":"1702356741","viewed":54,"name":"AI eye2","username":"nayk","description":"stars, cosmos, AI, data,copy past","likes":1,"published":1,"flags":1,"usePreview":0,"tags":["stars","cosmos","data","ai","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* originals https://www.shadertoy.com/view/4tyfWy  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DtGfzV and other*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\n\na*=a*a; // add contrast\nif (r>6) fade*=1.1; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.01,1.);\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\n vec3 col = vec3(0.);\n    float t1 = 6.,c1=0.;\n\n vec4 O =fragColor;\n    vec2 C =fragCoord;\n    O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(3),H(g*2.1),sin(2.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=-iTime*1.5;\n         p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));\n          p.zy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));\n           p.xz*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));\n                float t = iTime * .1 + ((.25 + .05 * sin(iTime * 1.1))/(length(d.xy) + .022)) * 1.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n\n        a=100.;\n        p=mod(p-a,a*2.)-a;\n        s=4.;\n         \n             \n        for(int i=0;i++<8;){\n            p=.23-abs(p);\n           \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n     \n            s*=e=1.4+sin(-iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    10.+cos(iTime*.3+.05*sin(iTime*.3))*0.2,\n                    122,\n                    1.+cos(iTime*.5)*5.\n                 );\n                 p.zy*=ma;\n         }\n         g+=e=length(p.yz)/s;\n           g+=e=length(p.xz)/s;\n    }\n\n\n\n\n\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    for(int k = 0; k < 9; k++){\n \n        uv = (uv+t2)/scale;\n       \n        uv = (fract(vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n       \n        t2 = triangle_wave(uv+.5);\n        uv =\n            (t2+triangle_wave(uv.yx))\n        ;\n        c1 =\n            max(abs(uv.y-uv.x)/2.,c1)\n        ;\n        c1 =\n            abs(2.*c1-1.)\n        ;\n        col.x =\n            max(length(uv-t2-c1)/3.,col.x)\n        ;\n        col =\n            abs(col-(1.-(c1*col.x)));\n        col1 =\n            abs(col1*c1-col-1.).yzx;\n    }\n\nvec3 from=vec3(1.,.5,0.5)+O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\nuv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n   \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n \nmainVR(fragColor, fragCoord, from, dir);\n   \n    fragColor+=O;\n       fragColor+= vec4(cheap_star(uv,anim) * vec3(0.15,0.12,0.15), 1.0);\n   \n}","name":"Image","description":"","type":"image"}]}