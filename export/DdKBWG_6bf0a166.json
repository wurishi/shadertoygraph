{"ver":"0.1","info":{"id":"DdKBWG","date":"1698597917","viewed":182,"name":"Glitch Effect Synced to Music","username":"vivekseth","description":"This shader attempts to produce a \"glitch\" effect in sync with the input music. \n\nTo view the effect, hit the pause button on `iChannel1`, and then hit the play button. This will get the audio to start playing and will allow the shader to access the audio","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["video","music","audio","glitch"],"hasliked":0,"parentid":"dsGfDy","parentname":"Fork Fork Fork  vivekseth 386"},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImageOld( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvRev = vec2(1.0 - uv.x, uv.y);\n    \n    vec4 camInput = vec4(texture(iChannel0, uvRev).rgb, 1);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 tInput = vec2(0.0, 0.0);\n    \n    \n    vec4 audioInput = texture(iChannel1, vec2(uv.x * 1.0, uv.y + 0.25));\n    \n    vec4 audioInput2 = vec4(texture(iChannel1, vec2(uv.x * 1.0, uv.y + 0.25)).x, 1.0, 1.0, 1.0);\n    \n\n    // Output to screen\n    // vec4(col,1.0) * \n    fragColor = audioInput;\n}\n\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\n\nfloat getFFTValue(sampler2D sampler, float xInput) {\n    // the sound texture is 512x2\n    int tx = int(xInput*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch(sampler, ivec2(tx,0), 0 ).x;\n    \n    return fft;\n}\n\nfloat getWaveValue(sampler2D sampler, float xInput) {\n    // the sound texture is 512x2\n    int tx = int(xInput*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat wave = texelFetch( sampler, ivec2(tx,1), 0 ).x;\n    \n    return wave;\n}\n\n\nvec4 getVideoPixel(vec2 uv, float noiseFactor, float shiftFactor) {\n    float noiseA = cnoise(vec3(uv, -1.0 * 0.0 + noiseFactor));\n    float noiseB = cnoise(vec3(uv, 0.0 + noiseFactor));\n    \n    vec2 videoCoord = uv;\n    videoCoord.x += shiftFactor * (noiseA);    \n    videoCoord.y += shiftFactor * (noiseB);\n    \n    vec4 videoPixel = texture(iChannel0, videoCoord);\n    return videoPixel;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float fft = getFFTValue(iChannel1, uv.x);\n    float wave = getWaveValue(iChannel1, uv.x);\n    \n    float shiftFactor = max((wave - 0.4), 0.0);\n    \n    shiftFactor += 1.0;\n    shiftFactor *= shiftFactor;\n    shiftFactor *= shiftFactor;\n    shiftFactor *= shiftFactor;\n    shiftFactor -= 1.0;\n        \n    vec4 videoR = getVideoPixel(uv, 0.0, 0.01 * shiftFactor);\n    vec4 videoG = getVideoPixel(uv, 10.0, 0.01 * shiftFactor);\n    vec4 videoB = getVideoPixel(uv, 20.0, 0.01 * shiftFactor);\n    \n    vec4 video = vec4(\n      videoR.r,\n      videoG.g,\n      videoB.b,\n      1.0\n    );\n    \n\t\n\t// convert frequency to colors\n\tvec3 col = vec3(0.0);\n    \n    col.xyz = video.xyz;\n    \t\n\t// output final color\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}