{"ver":"0.1","info":{"id":"l3SyzG","date":"1727366309","viewed":74,"name":"Trigger star effect (voronoi)","username":"int_45h","description":"Trying to mimic the look of \"Trigger stars\", the sparkles you see from Kill la Kill, that kinda thing. It's not great but it should do for now. \n\nI used 3D Voronoi with Minkowski distance, then used a sharpening filter (to try and isolate the mach bands).","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float get_sharpen(vec2 uv)\n{\n    vec3 k = .005*vec3(-1, 0, 1);\n    \n    float _10 = texture(iChannel0, uv+k.yx).w;\n    float _01 = texture(iChannel0, uv+k.xy).w;\n    float _11 = texture(iChannel0, uv+k.yy).w;\n    float _21 = texture(iChannel0, uv+k.zy).w;\n    float _12 = texture(iChannel0, uv+k.yz).w;\n    \n    return (-1.*_10+-1.*_01+5.8*_11+-1.*_21+-1.*_12);\n}\n\nvec4 get_blur(vec2 uv)\n{\n    int w = 3;\n    int h = 1;\n    vec3 c = vec3(0.);\n    for (int y=0; y<h; y++){\n        for (int x=0; x<w; x++){\n            vec2 xy = vec2(x-w/2, y-h/2)*.0025;\n            c += texture(iChannel0, uv+xy).rgb;\n        }\n    }\n    return vec4(c / float(w*h), texture(iChannel0, uv).w);\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 ires = iResolution.xy;\n    vec2 uv = U/ires;\n    float m = get_sharpen(uv);\n    m = smoothstep(0.3, 0.8, m);\n    \n    vec4 col = get_blur(uv);\n    col = mix(col, vec4(1.), vec4(m));\n    O = col;\n    \n    //O = texture(iChannel0, uv);//vec4(m);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat minkowski_dist(vec3 a, vec3 b, float p) \n{ \n    return pow(\n        pow(abs(a.x-b.x),p)+\n        pow(abs(a.y-b.y),p)+\n        pow(abs(a.z-b.z),p),\n        1./p\n    );\n}\n\nfloat get_noise(vec3 p)\n{\n    vec3 pg = floor(p), pc = fract(p);\n    float d = 8.;\n    \n    for (int i=0;i<27;i++)\n    {\n        vec3 n = vec3(i%3, (i/3)%3, i/9)-1.;\n        float dn = minkowski_dist(n+hash33(pg+n), pc, .4);\n        d = min(d,length(dn));\n    }\n\n    return 1.-clamp(d, 0., 1.);\n}\n\nstruct vor3D_tile{ vec4 pd; vec3 id; };\nvor3D_tile voronoi3D(vec3 p)\n{\n    vec3 pg = floor(p);\n    vec3 pc = fract(p);\n    \n    float d = 1.;\n    vec3 c = vec3(100.);\n    vec3 pv = vec3(0.);\n    for (int i=0;i<27;i++)\n    {\n        vec3 n = vec3(\n            float(i%3), \n            float((i/3)%3),\n            float(i/9)\n        )-1.;\n        vec3 pn = hash33(pg+n);\n        float dn = minkowski_dist(n+hash33(pg+n), pc, .4);\n        \n        if (d > dn)\n        {\n            d = dn;\n            c = n;\n            pv = pn+n-pc;\n        }\n    }\n    \n    return vor3D_tile(vec4((pv),d), pg+c);\n}\n\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 ires = iResolution.xy;\n    vec2 uv = (U-.5*ires)/ires.y;\n    float c = 9.;\n    float t = iTime * 2.;\n    t = floor(t*c)/c;\n    float size = 6.;\n    vor3D_tile vt = voronoi3D(vec3(uv*size, t));\n    float s = 1.-vt.pd.w;\n    \n    vec4 col = HSV_to_RGB(vec4((vt.pd.x*1.5)*PI, 1., 1., 1.));\n    O = vec4(vec3(s)*col.rgb*2.5, s);\n    //O = HSV_to_RGB(vec4(((U.x/ires.x)*2.)*PI, 1., 1., 1.));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n// from https://www.shadertoy.com/view/XdGfRR\nvec3 hash33(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tq = (q.x ^ q.y ^ q.z)*uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(q) * 2.328306437080797e-10;\n}\n\nvec4 HSV_to_RGB(vec4 HSV)\n{\n    vec3    k = mod(vec3(5.f, 3.f, 1.f) + HSV.x*3.f/PI, 6.f),\n            RGB = HSV.z - HSV.z*HSV.y*max(vec3(0.f), min(min(k, 4.f-k), vec3(1.f)));\n    return vec4(RGB, 1.f);\n}","name":"Common","description":"","type":"common"}]}