{"ver":"0.1","info":{"id":"dsKBRm","date":"1698083164","viewed":67,"name":"SDF blob","username":"AndreCorrea","description":"Bad performance but the effect seems cool, move it around to see the lighting better. Would love performance improvement suggestions","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","sdf","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nprecision highp float;\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nconst int MAX_MARCHING_STEPS = 1000;\nconst float THRESHOLD1 = 3.0;\nconst float THRESHOLD2 = 0.00000001;\n\nfloat stepSize = 0.05;\n\nvec3 repeat(vec3 p){\n  float s = 3.0;\n  p.x = p.x - s*round(p.x/s);\n  p.y = p.y - s*round(p.y/s);\n  p.z = p.z - s*round(p.z/s);\n  return p;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\nfloat sdSphere(vec3 p,vec3 c,float r) {\n  return length(p - c) - r;\n}\n\nfloat scene(vec3 p) {\n\n  // p = repeat(p);\n  float sphere = sdSphere(p, vec3(0, 0, 0), 1.5);\n  return sphere;\n}\n\nvec3 calcNormal(vec3 p) {\n    float eps = 0.00001; // Adjust as needed\n    \n    float dx = (scene(p + vec3(eps, 0, 0)) - scene(p - vec3(eps, 0, 0))) / (2.0 * eps);\n    float dy = (scene(p + vec3(0, eps, 0)) - scene(p - vec3(0, eps, 0))) / (2.0 * eps);\n    float dz = (scene(p + vec3(0, 0, eps)) - scene(p - vec3(0, 0, eps))) / (2.0 * eps);\n    \n    return normalize(vec3(dx, dy, dz));\n}\n\n\n\n\nvec3 march(vec3 cam, vec3 dir) {\n  float totalDistance = 0.0;\n  vec3 currentPos = cam;\n  vec3 col = vec3(0.0);\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n\n    float dist = scene(currentPos);\n    if (dist < THRESHOLD1){\n      vec3 normal = calcNormal(currentPos);\n      // aply noise to dist in normal direction\n      dist += snoise(currentPos +iTime*0.3);\n      if (dist < THRESHOLD2) {\n        vec3 normal = calcNormal(currentPos);\n        vec3 lightDir = normalize(vec3(-1.0, -1.0, -1.0)); \n\n        float lightIntensity = max(dot(normal, -lightDir), 0.0);\n        vec3 ambientLight = vec3(0.2, 0.2, 0.2);\n        //specular\n        vec3 viewDir = normalize(cam - currentPos);\n        vec3 reflectDir = reflect(lightDir, normal);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 2048.0);\n        vec3 col = vec3(0.871, 0.58, 1.0) * lightIntensity+ vec3(spec); \n        return col;\n      }\n      totalDistance += dist;\n      currentPos += dir * stepSize;\n    }\n  }\n\n\n  return col;\n}\n\nfloat zoomFactor = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 backgroundColor = vec3(0.835, 1, 1);\n    vec3 col = vec3(1);\n\n    // Define camera position and direction\n\n    vec3 dir = normalize(vec3(uv, 1));\n\n    // Get mouse rotation\n\n\n    float rotX = iMouse.y / iResolution.y * 8.; // Adjust the sensitivity as needed\n    float rotY = iMouse.x / iResolution.x * 8.;\n  \n    vec3 cam = vec3(0, 0, -4.0);\n    mat3 rotationMatrix = mat3(\n        cos(rotY), 0, sin(rotY),\n        0, 1, 0,\n        -sin(rotY), 0, cos(rotY)\n    ) * mat3(\n        1, 0, 0,\n        0, cos(rotX), -sin(rotX),\n        0, sin(rotX), cos(rotX)\n    );\n\n    cam = rotationMatrix * cam;\n    dir = normalize(rotationMatrix * dir);\n\n    col = march(cam, dir);\n\n    fragColor = vec4(col, 1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}