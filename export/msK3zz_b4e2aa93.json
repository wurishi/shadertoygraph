{"ver":"0.1","info":{"id":"msK3zz","date":"1678146326","viewed":56,"name":"Finding circles","username":"GeoffL","description":"When it comes down to it it's just a distorted circle.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lissajous","phasechange"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on the code here: https://www.shadertoy.com/view/4dcfW8\n\n#define S(d,r) smoothstep( r*2./R.y, 0., d)   // antialiased draw. r >= 1.5\n\n// --- line segment with disc ends: seamless distance to segment\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    return length(p - b * h);                         // dist to segment\n}\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    vec2 R = iResolution.xy;\n    uv = 2.* ( uv +uv - R ) / R.y;\n    vec3 col = vec3(0,0,.2);\n    float t=iTime;\n\n    float d=length(uv);\n    float r=1.;\n    col = vec3(smoothstep(r+.01, r, d))*vec3(.6,0,0);\n    \n    \n    // Change a, b and c for different shapes\n    float a=5., b=7., c=1.;\n   \n    #define f(x) vec2( sin(a*x-t) , cos(b*x-t) ) -.75*sin(c*x) // func to draw\n\n    vec2 P=f(0.);\n    r=0.05;\n    col += vec3(smoothstep(r+.01, r, length(uv-P)))*vec3(0,1,1);\n    P=f(3.142);\n    r=0.05;\n    col += vec3(smoothstep(r+.01, r, length(uv-P)))*vec3(0,1,1);\n    \n    d = 1.;\n    for (float x = 0.; x < 6.284; x += .02 )\n        d = min(d, line( uv, P, P = f(x)) );\n   \n    O = vec4(S(d, 5.))+ vec4(col, 1.) ;\n}","name":"Image","description":"","type":"image"}]}