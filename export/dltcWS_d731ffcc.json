{"ver":"0.1","info":{"id":"dltcWS","date":"1699610498","viewed":44,"name":"gradation01 patterns","username":"shiyuugo","description":"two color set pattern with noise\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","oklab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n#define DEMO\n// #define USE_FBM\n#define ADD_NOISE\n\nstruct ColorSet { vec3 col1, col2; };\nconst ColorSet Pattern1 = ColorSet(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0));\nconst ColorSet Pattern2 = ColorSet(vec3(0.3882, 1.0, 0.9686), vec3(0.7333, 0.949, 0.502));\nconst ColorSet Pattern3 = ColorSet(vec3(0.9176, 0.3804, 0.9451), vec3(0.5373, 1.0, 0.9059));\nconst ColorSet Pattern4 = ColorSet(vec3(0.9843, 0.9608, 0.6941), vec3(1.0, 0.3686, 0.3686));\nconst ColorSet Pattern5 = ColorSet(vec3(1.00, 1.00, 1.00), vec3(0.00, 0.00, 1.00));\n\n#define PATTERN_NUM 5\nColorSet[PATTERN_NUM]list = ColorSet[PATTERN_NUM](\n    Pattern1,\n    Pattern2,\n    Pattern3,\n    Pattern4,\n    Pattern5\n);\n\n#define NOISE_SPEED 0.3\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = vec3(0, 0, 0);\n    vec2 uv = fragCoord / min(iResolution.x, iResolution.y);\n    \n    vec3 col1 = vec3(0.50, 0.85, 0.85);\n    vec3 col2 = vec3(0.74, 0.55, 0.70);\n    \n    #ifdef DEMO\n    int index = int(iTime / 3.0)% PATTERN_NUM;\n    col1 = list[index].col1;\n    col2 = list[index].col2;\n    #endif\n    \n    vec2 scaleUV = uv * 1.5;\n    #ifdef USE_FBM\n    float n = 0.5 + 0.5 * fbm(scaleUV, 5, iTime * NOISE_SPEED);\n    #else\n    float n = 0.5 + 0.5 * snoise(vec3(scaleUV.x, scaleUV.y, iTime * NOISE_SPEED));\n    #endif\n    color = oklab_mix(col1, col2, n);\n    \n    ///--- ADD NOISE\n    #ifdef ADD_NOISE\n    color += random(uv) * 0.2;\n    #endif\n    \n    ///--- ADD GRADATION BAR on LEFT\n    vec3 gradation = oklab_mix(col1, col2, uv.y);\n    float barWidth = 0.05; // 25.0 / iResolution.x;\n    float lineWidth = 0.002; //2.0 / iResolution.x;\n    color = uv.x < barWidth ? gradation :\n    uv.x < (barWidth + lineWidth) ? vec3(0, 0, 0) : color;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*--------------------------------------------------\n # glslUtils\n - https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n - https://github.com/ashima/webgl-noise\n - https://thebookofshaders.com/\n - \n--------------------------------------------------*/\n\nfloat random(float n){return fract(sin(n) * 43758.5453123);}\nfloat random(vec2 st) {return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);}\nfloat noise(float p){\n\tfloat fl = floor(p), fc = fract(p);\n\treturn mix(random(fl), random(fl + 1.0), fc);\n}\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(random(b), random(b + d.yx), f.x), mix(random(b + d.xy), random(b + d.yy), f.x), f.y);\n}\n\n\nfloat mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\n\nfloat permute(float x) { return mod289(((x * 34.0) + 1.0) * x);}\nvec2 permute(vec2 x) { return mod289(((x * 34.0) + 1.0) * x);}\nvec3 permute(vec3 x) { return mod289(((x * 34.0) + 1.0) * x);}\nvec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x);}\n\n/*============================== SimplexNoise ==============================*/\n//### 2D\nfloat snoise(vec2 v) {\n  vec4 C   = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n  vec2 i   = floor(v + dot(v, C.yy));\n  vec2 x0  = v - i + dot(i, C.xx);\n  vec2 i1  = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i      = mod289(i);  // Avoid truncation effects in permutation\n  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n\n  vec3 m  = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n  m       = m * m;\n  m       = m * m;\n  vec3 x  = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h  = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n  vec3 g;\n  g.x  = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\nfloat fbm(vec2 uv, int oct) {\n  vec2  pos = uv;\n  float amp = 1.0, val = 0.0;\n  for (int i = 0; i < oct; i++) {\n    val += amp * snoise(pos);\n    pos *= 2.0;\n    amp *= 0.5;\n  }\n  return val;\n}\n\n//### 3D\nfloat snoise(vec3 v) {\n  vec2 C   = vec2(1.0 / 6.0, 1.0 / 3.0);\n  vec4 D   = vec4(0.0, 0.5, 1.0, 2.0);\n  vec3 i   = floor(v + dot(v, C.yyy));\n  vec3 x0  = v - i + dot(i, C.xxx);\n  vec3 g   = step(x0.yzx, x0.xyz);\n  vec3 l   = 1.0 - g;\n  vec3 i1  = min(g.xyz, l.zxy),i2  = max(g.xyz, l.zxy);\n  vec3 x1  = x0 - i1 + C.xxx, x2  = x0 - i2 + C.yyy, x3  = x0 - D.yyy;\n  i        = mod289(i);\n  vec4  p  = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n  float n_ = 0.142857142857;\n  vec3  ns = n_ * D.wyz - D.xzx;\n  vec4  j  = p - 49.0 * floor(p * ns.z * ns.z);\n  vec4  x_ = floor(j * ns.z);\n  vec4  y_ = floor(j - 7.0 * x_);\n  vec4  x  = x_ * ns.x + ns.yyyy;\n  vec4  y  = y_ * ns.x + ns.yyyy;\n  vec4  h  = 1.0 - abs(x) - abs(y);\n  vec4  b0 = vec4( x.xy, y.xy );\n  vec4  b1 = vec4( x.zw, y.zw );\n  vec4  s0 = floor(b0) * 2.0 + 1.0, s1 = floor(b1) * 2.0 + 1.0;\n  vec4  sh = -step(h, vec4(0, 0, 0, 0));\n  vec4  a0 = b0.xzyw + s0.xzyw * sh.xxyy, a1 = b1.xzyw + s1.xzyw * sh.zzww;\n  vec3  p0 = vec3(a0.xy, h.x), p1 = vec3(a0.zw, h.y), p2 = vec3(a1.xy, h.z), p3 = vec3(a1.zw, h.w);\n  //Normalise gradients\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n  m      = m * m;\n  return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n}\nfloat fbm(vec2 uv, int oct, float time) {\n  vec2  pos = uv;\n  float amp = 1.0;\n  float val = 0.0;\n  for (int i = 0; i < oct; i++) {\n    val += amp * snoise(vec3(pos, time));\n    pos *= 2.0;\n    amp *= 0.5;\n  }\n  return val;\n}\n\n\n\n//-----\nvec3 oklab_mix( vec3 colA, vec3 colB, float h )\n{\n    // https://bottosson.github.io/posts/oklab\n    const mat3 kCONEtoLMS = mat3(                \n         0.4121656120,  0.2118591070,  0.0883097947,\n         0.5362752080,  0.6807189584,  0.2818474174,\n         0.0514575653,  0.1074065790,  0.6302613616);\n    const mat3 kLMStoCONE = mat3(\n         4.0767245293, -1.2681437731, -0.0041119885,\n        -3.3072168827,  2.6093323231, -0.7034763098,\n         0.2307590544, -0.3411344290,  1.7068625689);\n                    \n    // rgb to cone (arg of pow can't be negative)\n    vec3 lmsA = pow( kCONEtoLMS*colA, vec3(1.0/3.0) );\n    vec3 lmsB = pow( kCONEtoLMS*colB, vec3(1.0/3.0) );\n    // lerp\n    vec3 lms = mix( lmsA, lmsB, h );\n    // gain in the middle (no oaklab anymore, but looks better?)\n // lms *= 1.0+0.2*h*(1.0-h);\n    // cone to rgb\n    return kLMStoCONE*(lms*lms*lms);\n}\n\n","name":"Common","description":"","type":"common"}]}