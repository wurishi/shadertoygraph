{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define pi 3.14159265359\n\n\nfloat planeIntersection(vec3 N,vec3 V,vec3 pos){\n\tfloat distToPlane = -dot(pos,N);\n\tfloat rayDotPlane = -dot(V,N);\n    if (rayDotPlane > 0. && distToPlane > 0.)\n        return distToPlane/rayDotPlane;\n    else return 0.;\n}\n\nvec2 getUV(vec3 perpX, vec3 perpY, vec3 pos){\n\treturn vec2(dot(perpX,pos),dot(perpY,pos));\n}\n\nvec3 planeColor(vec2 uv, bool reverse, bool change_scene){\n    float aspect = iResolution.x/iResolution.y;\n    uv = (0.5/aspect) * uv + vec2(0.5, 0.5/aspect);\n    uv.y *= iResolution.x/iResolution.y;   \n    if (reverse)\n        uv.y = 1. - uv.y;\n    \n    return (change_scene) \n        ? texture(iChannel0, uv).rgb \n        : texture(iChannel1, uv).rgb;\n}\n\nfloat sdfStar5( in vec2 p )\n{\n    // repeat domain 5x\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292); // pi/5\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    \n    // draw triangle\n    const vec2 k3 = vec2(0.951056516295,  0.309016994375); // pi/10\n    return dot( vec2(abs(p.x)-0.3,p.y), k3);\n}\n\n\nbool check_if_inside(vec2 uv, float one, float _sign) {\n    uv *= _sign;\n    float limit = one - sdfStar5(uv);\n    return limit > one;\n}\n\nvec4 boxColor(vec3 viewingNormal, vec3 boxPos, vec3 planeX,vec3 planeY, vec3 planeZ, bool change_scene){\n    \n    float star_width = 0.2;\n    \n    bool reverse = true;\n    float one = length(planeX);\n    \n    bool colored = false;\n    \n    ////////////////////////////////////\n    ///         MAIN Plane 1         ///\n    ////////////////////////////////////\n    vec4 col_1 = vec4(0.);\n    vec3 planePos = boxPos + star_width * planeZ;\n    float t1 = planeIntersection(planeZ,viewingNormal,planePos);\n    vec2 uv;\n    if (t1 > 0.){\n        vec3 pos = t1 * viewingNormal;\n        uv = getUV(planeX,planeY,pos - planePos);\n        if (\n            check_if_inside(uv, one, -1.) \n            && uv.y < length(planeX) \n            && uv.y > -length(planeX)\n        )\n            col_1 = (colored) \n            ? vec4(1, 0, 0, 1) \n            : vec4(planeColor(uv, reverse, change_scene),1.);\n        else\n            t1 = 1000.;\n    } else t1 = 1000.;\n\t\n    \n    /////////////////////////////////\n    \n    planeX *= -1.;\n    planeY *= -1.;\n    planeZ *= -1.;\n    \n    reverse = !reverse;\n    \n    /////////////////////////////////\n    \n    \n    ////////////////////////////////////\n    ///         MAIN Plane 2         ///\n    ////////////////////////////////////\n    vec4 col_2 = vec4(0.);\n    planePos = boxPos + star_width * planeZ;\n    float t2 = planeIntersection(planeZ,viewingNormal,planePos);\n    if (t2 > 0.){\n        vec3 pos = t2 * viewingNormal;\n        uv = getUV(planeX,planeY,pos - planePos);\n        if (\n            check_if_inside(uv, one, 1.) \n            && uv.y < one && uv.y > -one\n        )\n            col_2 = (colored) \n            ? vec4(0, 0, 1, 1) \n            : col_2 = vec4(planeColor(uv, reverse, change_scene),1.);\n        else\n            t2 = 1000.;\n    } else t2 = 1000.;\n    \n    \n    ///////////////////////////////\n    ///         Plane 3         ///\n    ///////////////////////////////\n    vec3 rot = planeY;\n    float rot_ratio = 0.245;\n    float move_ratio = 0.285;\n        \n    vec4 col_3 = vec4(0, 0.5, 0, 1);\n    vec3 _planeX = normalize(mix(planeX, rot, rot_ratio));\n    _planeX *= move_ratio;\n    \n    planePos = boxPos + _planeX;\n    float t3 = planeIntersection(_planeX,viewingNormal,planePos);\n    if (t3 > 0.){\n        vec3 pos = t3 * viewingNormal;\n        uv = getUV(planeZ,planeY,pos - planePos);\n        if (\n            uv.x < one * star_width\n            && uv.x > -one * star_width\n            && uv.y < one * 0.84\n            && uv.y > -one * 0.84\n        )\n            col_3 = (colored) \n            ? vec4(0, 0.5, 0.5, 1) \n            : vec4(planeColor(uv, reverse, change_scene),t3);\n        else\n            t3 = 1000.;\n    } else t3 = 1000.;\n    \n    \n    ///////////////////////////////\n    ///         Plane 4         ///\n    ///////////////////////////////\n    vec4 col_4 = vec4(0, 0.5, 0, 1);\n    _planeX = normalize(mix(-planeX, rot, rot_ratio));\n    _planeX *= move_ratio;\n    \n    planePos = boxPos + _planeX;\n    float t4 = planeIntersection(_planeX,viewingNormal,planePos);\n    if (t4 > 0.){\n        vec3 pos = t4 * viewingNormal;\n        uv = getUV(planeZ,planeY,pos - planePos);\n        if (\n            uv.x < one * star_width\n            && uv.x > -one * star_width\n            && uv.y < one * 0.84\n            && uv.y > -one * 0.84\n        )\n            col_4 = (colored) \n            ? vec4(0., 0.5, 0.5, 1) \n            : vec4(planeColor(uv, reverse, change_scene),t4);\n        else\n            t4 = 1000.;\n    } else t4 = 1000.;\n    \n    \n    ///////////////////////////////\n    ///         Plane 5         ///\n    ///////////////////////////////\n    rot = planeY;\n    rot_ratio = 1.;\n    move_ratio = 0.285;\n        \n    vec4 col_5 = vec4(0, 0.5, 0, 1);\n    _planeX = planeY; // normalize(mix(planeX, rot, rot_ratio));\n    _planeX *= move_ratio;\n    \n    planePos = boxPos + _planeX;\n    float t5 = planeIntersection(_planeX,viewingNormal,planePos);\n    if (t5 > 0.){\n        vec3 pos = t5 * viewingNormal;\n        uv = getUV(planeZ,planeX,pos - planePos);\n        if (\n            uv.x < one * star_width\n            && uv.x > -one * star_width\n            && uv.y < one * 0.87\n            && uv.y > -one * 0.87\n        )\n            col_5 = (colored) \n            ? vec4(0, 0.5, 0.5, 1) \n            : vec4(planeColor(uv, reverse, change_scene),t5);\n        else\n            t5 = 1000.;\n    } else t5 = 1000.;\n    \n    \n    ///////////////////////////////\n    ///         Plane 6         ///\n    ///////////////////////////////\n    rot = planeY;\n    rot_ratio = 0.58;\n    move_ratio = -0.287;\n        \n    vec4 col_6 = vec4(0, 0.5, 0, 1);\n    _planeX = normalize(mix(planeX, rot, rot_ratio));\n    _planeX *= move_ratio;\n    \n    planePos = boxPos + _planeX;\n    float t6 = planeIntersection(_planeX,viewingNormal,planePos);\n    if (t6 > 0.){\n        vec3 pos = t6 * viewingNormal;\n        uv = getUV(planeZ,planeX,pos - planePos);\n        uv.y *= -1.;\n        if (\n            uv.x < one * star_width\n            && uv.x > -one * star_width\n            && uv.y < one * 0.71\n            && uv.y > -one * 0.71\n        )\n            col_6 = (colored) \n            ? vec4(0, 0.5, 0.5, 1.) \n            : vec4(planeColor(uv, reverse, change_scene),t6);\n        else\n            t6 = 1000.;\n    } else t6 = 1000.;\n    \n    \n    ///////////////////////////////\n    ///         Plane 7         ///\n    ///////////////////////////////\n    rot = -planeY;\n    rot_ratio = 0.58;\n    move_ratio = 0.287;\n        \n    vec4 col_7 = vec4(0, 0.5, 0, 1);\n    _planeX = normalize(mix(planeX, rot, rot_ratio));\n    _planeX *= move_ratio;\n    \n    planePos = boxPos + _planeX;\n    float t7 = planeIntersection(_planeX,viewingNormal,planePos);\n    if (t7 > 0.){\n        vec3 pos = t7 * viewingNormal;\n        uv = getUV(planeZ,planeX,pos - planePos);\n        if (\n            uv.x < one * star_width\n            && uv.x > -one * star_width\n            && uv.y < one * 0.71\n            && uv.y > -one * 0.71\n        )\n            col_7 = (colored) \n            ? vec4(0, 0.5, 0.5, 1) \n            : vec4(planeColor(uv, reverse, change_scene),t7);\n        else\n            t7 = 1000.;\n    } else t7 = 1000.;\n    \n    \n    \n    /////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////\n    \n    float _min_ = min(min(min(min(min(min(t1, t2), t3), t4), t5), t6), t7);\n    \n    if (_min_ == t1) return col_1;\n    if (_min_ == t2) return col_2;\n    if (_min_ == t3) return col_3;\n    if (_min_ == t4) return col_4;\n    if (_min_ == t5) return col_5;\n    if (_min_ == t6) return col_6;\n    if (_min_ == t7) return col_7;\n    \n}\n\n\n\n\nconst float speed = 0.7;\nconst float farthest_pos = 15.;\nconst float closest_pos = 2.;\nconst float rotation_speed = 3.;\nconst float speed_power = 3.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ///////////////////////////////\n    ///   Scene change params   ///\n    ///////////////////////////////\n    bool change_scene = int((speed*iTime + 0.5)/2.) % 2 == 0;\n    float ratio = mod(speed*iTime, 2.) - 1.;\n    ratio *= step(0., ratio);\n    \n    \n    ////////////////////////////\n    ///   Background color   ///\n    ////////////////////////////\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 col = (change_scene) \n        ? texture(iChannel0, uv).rgb \n        : texture(iChannel1, uv).rgb;\n    fragColor = vec4(col,1);\n    if (ratio<=0.) {\n        return;\n    }\n    \n    ///////////////////////\n    ///   Cube params   ///\n    ///////////////////////\n    uv = fragCoord.xy/iResolution.x;\n    float aspect = iResolution.x/iResolution.y;\n    vec3 viewingNormal = normalize(vec3(uv-vec2(0.5,0.5/aspect),1));\n    vec3 boxPos = vec3(\n        0,0, mix(closest_pos, \n                 farthest_pos, \n                 pow((ratio-0.5)*2., speed_power))\n    );\n    \n    \n    ///////////////////////////\n    ///   Rotation params   ///\n    ///////////////////////////\n    vec3 planeZ = normalize(vec3(\n        sin(rotation_speed * iTime),    \n        0,\n        cos(rotation_speed * iTime)\n    ));\n    vec3 planeX = normalize(cross(planeZ,vec3(\n        0, 1, 0\n    )));\n    vec3 planeY = normalize(cross(planeZ,planeX));\n       \n    \n    ////////////////////////////////\n    ///   Actual cube function   ///\n    ////////////////////////////////\n    vec4 boxCol = boxColor(viewingNormal,boxPos,planeX,\n                           planeY,planeZ,change_scene);\n    \n    \n    //////////////////////////////////////\n    ///   Mixing with the background   ///\n    //////////////////////////////////////\n    col = mix(col, boxCol.rgb, step(0.5, boxCol.a));\n    fragColor = vec4(col,1);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"tddfRX","date":"1734427162","viewed":26,"name":"Transition.Star3d.No.1","username":"avartation","description":"kjbhkjb","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["ljb","jbn"],"hasliked":0,"parentid":"","parentname":""}}