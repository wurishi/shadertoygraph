{"ver":"0.1","info":{"id":"7dlGDf","date":"1616690126","viewed":170,"name":"Blowtorch","username":"stduhpf","description":"Simulation of black body radiation and heat transfer on a sheet of iron.\nHold left click to heat-up the metal. ","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["simulation","spectrum","blackbody"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// tonemaping to avoid color clamping on bright parts\nvec4 rein(vec4 c){\n    c*=1.;\n    float l = dot(c.rgb,vec3(.2126,.7152,.0722));\n    return c/(2.+l);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iChannelResolution[0].xy);\n    float expo = texture(iChannel3,1./iChannelResolution[0].xy).r;\n    fragColor = pow(rein(fragColor/expo),vec4(1./2.4));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//hat equation\n\nvec2 get2ndDeriv(vec2 p, int c){\n    //based on lagrangian interpolation, then derived twice\n        vec2 dxh = vec2(3.,0.);\n    float u = texture(iChannel0,p/iChannelResolution[0].xy)[c];\n    float dfx = texture(iChannel0,(p+dxh)/iChannelResolution[0].xy)[c]-\n        2.*u\n        +texture(iChannel0,(p-dxh)/iChannelResolution[0].xy)[c];\n    float ddx = dfx/(dxh.x*dxh.x);\n    \n    float dfy = texture(iChannel0,(p+dxh.yx)/iChannelResolution[0].xy)[c]-\n        2.*u\n        +texture(iChannel0,(p-dxh.yx)/iChannelResolution[0].xy)[c];\n    float ddy = dfy/(dxh.x*dxh.x);\n\n    return vec2(ddx,ddy); \n}\n\nfloat dot2(vec2 a){return dot(a,a);}\n\n#define Air_Temp 300.\n#define Air_Cooling .00001\n#define Conductivity 80.  //80 for iron, 66. for tin, 390 for copper, 418 for silver, 237 for aluminum\n//high conductivities migh need lower frametimes to remain stable\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    float dt = min(1./60.,iTimeDelta); //if the frametimes are too high (higher than 16ms), the dt value is clamped\n    O = texture(iChannel0,I/iChannelResolution[0].xy)*1000.;\n    \n    vec2 grad = get2ndDeriv(I,0)*1000.;\n    \n    float lag = grad.x+grad.y;\n    \n    O.r+=Conductivity*(lag*dt + Air_Cooling*dt*(Air_Temp-O.r));\n    \n    if(iMouse.z>0.)\n    O.r+=15000.*dt*exp(-dot2((I-iMouse.xy)/15.));\n    if(iFrame==0)O.r=Air_Temp*(1.+7.*I.x/iResolution.x*texture(iChannel1,I/iChannelResolution[1].xy).r);\n    O/=1000.;\n    O.r= max(O.r,0.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//black-body radiation\n\nfloat blackbody(float wl, float T){\n    float h = 6.6e-34; // Planck constant\n    float k = 1.4e-23; // Boltzmann constant\n    float c = 3e8;// Speed of light\n   \twl*=1e-9;\n    return  2.*h*(c*c)/(wl*wl*wl*wl*wl*(exp(h*c/(T*wl*k))-1.));\n}\n\n\nfloat gaussian(float x,float al, float mu, float s1, float s2){\n    float y = x-mu;\n    y/=y<0.?s1:s2;\n    return al*exp(-y*y*.5);\n}\n\n\nvec3 lambdatoXYZ(float wl){\n    return vec3( gaussian(wl, 1.056, 599.8, 37.9, 31.0)+gaussian(wl, 0.362, 442.0, 16.0, 26.7)+ gaussian(wl, -0.065, 501.1, 20.4, 26.2)\n                ,gaussian(wl, 0.821, 568.8, 46.9, 40.5)+gaussian(wl,0.286, 530.9, 16.3, 31.1)\n                ,gaussian(wl, 1.217, 437.0, 11.8, 36.0)+gaussian(wl, 0.681, 459.0, 26.0, 13.8));\n}\nconst mat3 xyz = mat3(\n\t3.240479, -1.537150, -0.498535,\n    -0.969256, 1.875992, 0.041556,\n    0.055648, -0.204043, 1.057311);\n\nvec3 spectrum_to_rgb(in float w){\n    float wl = w;\n\n    return lambdatoXYZ(w)*xyz;\n}\n\n\n#define spectrum_samples 13\n#define lmin 200.\n#define lmax 900.\n\nvec3 rgblackbody(float t,float h){\n    float l = lmin;\n    float lstep = (lmax-lmin)/(float(spectrum_samples)+1.);\n    l+=lstep*h;\n    vec3 col = vec3(0);\n    float s=0.;\n    for(int i=0;i<spectrum_samples;i++){\n        col+=spectrum_to_rgb(l)*blackbody(l,t*1000.);\n        l+=lstep;\n        s++;\n    }\n    return col/s;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iChannelResolution[0].xy);\n    vec3 col = rgblackbody(fragColor.r,texture(iChannel1,fragCoord/iChannelResolution[1].xy).r);\n    col+=pow(texture(iChannel2,fragCoord/iChannelResolution[2].xy).rgb,vec3(2.4))*150.;\n    fragColor.rgb = (col);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//exposure-adaptation, to avoid relying too much on the tonemapping fo dynamic range\n\n#define AVGEXPS 8.\n#define expocurve  4.8\n#define EXPOSURE_SPEED 0.01\n\n\nconst float phi2=1.32471795724474602596090885447809734; //root of X^3-X-1=0.\nconst float phi2sq=phi2*phi2;\n\nconst vec2 R2_factor = 1./vec2(phi2sq,phi2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float avgexp=1.,expo=1.;\n  expo = texture(iChannel0,1./iChannelResolution[0].xy).a;\n  if(max(fragCoord.x,fragCoord.y)<2.){\n    const vec3 lumaWeights = vec3(.3,.59,.11);\n    avgexp=0.;\n    float o = 0.;\n    for(float x=0.;x<1.;x+=1./AVGEXPS){\n      for(float y=0.;y<1.;y+=1./AVGEXPS){\n        vec2 offset = fract((x+y*AVGEXPS+float(iFrame))*R2_factor);\n        vec2 p = vec2(x,y)+(.5+offset)/AVGEXPS;\n        float s =dot(texture(iChannel1,p).rgb*2.,lumaWeights);\n        p=p+p-1.;\n        float w = 1.;\n        avgexp += pow(s,1./expocurve)*w;\n        o+=w;\n        }\n      }\n    avgexp/=o;\n    avgexp=pow(avgexp,expocurve);\n    avgexp=mix(avgexp,expo,exp2(-EXPOSURE_SPEED));\n  }\n  fragColor = texture(iChannel0,fragCoord/iChannelResolution[0].xy);\n  fragColor.r = expo;\n  fragColor.a = avgexp;\n  if(iFrame==0)fragColor=vec4(1000.);\n}","name":"Buffer C","description":"","type":"buffer"}]}