{"ver":"0.1","info":{"id":"MXXBzj","date":"1728597938","viewed":34,"name":"learning_experiment_3","username":"austinoxyz","description":"learning experiment 3\n\nits supposed to be the mandelbrot set","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["experiment","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define time (iTime)\n#define res  (iResolution)\n\n#define SMOOTH_ITERATION_COLORING 1\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318*(c*t+d));\n}\n\nfloat mandelbrot(vec2 c) {\n    const float B = 256.; // max dist from (0,0)\n    const float M = 80.; // max iters\n    float n = 0.0;\n    vec2 z = vec2(0.0);\n    do {\n        z = vec2(z.x*z.x-z.y*z.y, 2.*z.x*z.y) + c;\n        n += 1.0;\n    } while (sqrt(dot(z,z)) < B && n < M);\n    if (SMOOTH_ITERATION_COLORING == 1)\n        n = n - log2(log2(dot(z,z))) + 4.;\n    return step(n, M-.1)*n; // zero all values greater than M (divergent, black part)\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - res.xy) / res.y;\n\n    // initial camera position\n    vec2 c = 1.2 * uv;\n    c.x -= 0.5;\n    \n    // mandelbrot each point and apply palette to smoothed iteration count (t)\n    float t = mandelbrot(c);\n    vec3 finalColor = step(0.1, t) * palette(.08*t);\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}