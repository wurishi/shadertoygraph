{"ver":"0.1","info":{"id":"ftVXWW","date":"1640701991","viewed":323,"name":"Starfield simulation","username":"joskwanten","description":"Flowed instructions from the YouTube channel the Art of Code","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["stars","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_OF_LAYERS 10.\n\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat hash12(vec2 p) {\n    p = fract(p * vec2(123.45, 98.765));\n    p += dot (p, p + 2.67);\n    return fract(p.x * p.y);\n}\n\n\nfloat star(vec2 uv, float flare) {\n    \n    float d = length(uv);\n    float m = 0.05/d;\n    \n    float rays = max(0., 1. - abs(uv.x * uv.y * 1000.));\n    m += rays * flare;\n    uv *= rotate(3.1415/4.);\n    rays = max(0., 1. - abs(uv.x * uv.y * 1000.));\n    m += rays * flare * .3;\n    m *= smoothstep(1., .2, d);\n    return m;\n}\n\nvec3 starLayer(vec2 uv) {\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv) - .5;\n    vec2 id = floor(uv);\n\n    for (int y = -1 ; y <= 1; y++) {\n        for (int x = -1 ; x <= 1; x++) {\n            vec2 offs = vec2(x, y);\n            float n = hash12(id + offs);\n            float size = fract(n * 931.261);\n            float star = star(gv - offs - vec2(n, fract(n * 34.)) + .5, smoothstep(.9, 1., size) * .6);\n            vec3 color = sin(vec3(.2, .3, .4) * fract(n * 2345.6) * 123.45) * .5 + .5;\n            color *= vec3(1., .25, 1. + size);\n            \n            star *= 1. + sin(n * iTime * 23. + n * 6.2831) * .125;\n            col += size * star * color;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    float t = iTime * .05;\n    uv *= rotate(t);\n    \n    vec3 col = vec3(0);\n    \n    for (float i = 0.; i < 1.; i += 1. / NUM_OF_LAYERS) {\n        float depth = fract(i + t);\n        float fade = depth * smoothstep(1., .9, depth);\n        float scale = mix(20., .5, depth);\n        col += starLayer(uv * scale + i * 342.23) * fade;\n    }\n    \n    //if (gv.x > .48 ||gv.y > .48) col.r = 1.;\n    //col += hash12(uv);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}