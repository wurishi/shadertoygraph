{"ver":"0.1","info":{"id":"dlG3DV","date":"1685144756","viewed":95,"name":"Cherenkov","username":"tigrou","description":"Some evaldraw raymarching experiment ported to GLSL","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow","nuclear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy) - vec2(0.5, 0.5);\n    uv *= vec2(2.3, 2.3);\n\n    vec3 ro = vec3(0.0 ,  0.0,-1.0);\n    vec3 rd = vec3(uv.x, uv.y, 1.0);   \n    \n    //lens fish\n    rd.z -= length(rd.xy) / 2.0; \n    rd /= length(rd);\n    \n    float time = iTime * 0.2;\n    \n    //camera        \n    if(iMouse.z < 1.0)\n    {        \n        rd.yz *= rot(time);\n        rd.xz *= rot(sin(time) * 1.3);\n        rd.xy *= rot(time * 0.3);\n    }    \n    else\n    {\n        vec2 m = (iMouse.xy / iResolution.xy - vec2(0.5, 0.5)) * vec2(8.0, 6.0);        \n        m.y = clamp(m.y, -PI/2.0 + 0.01, PI/2.0 - 0.01);        \n        rd.yz *= rot(m.y);\n        rd.xz *= rot(m.x);\n    }        \n    \n    ro.y += time;    \n    ro.x += cos(time*3.2)*0.2;\n    ro.z += sin(time*3.2)*0.2;     \n        \n    //raymarching\n    vec3 col = vec3(0.0);\n    \n    bool glass = false;\n    vec3 n = vec3(0.0);\n    float v = 0.0, t = 0.0;\n    float glow = 0.0;\n    \n    for (int i = 0; i < 100; i++)\n    {\n       vec3 p = ro + t * rd;\n       vec2 r = scene(p, time, glass);\n       \n       float d = r.x;       \n       if (r.y == 3.0f)\n       {\n           glow += pow(0.001 / d, 0.55);\n       }\n       \n       if (d < 0.0001)\n       {\n          vec2 e = vec2(0.02, 0.0);\n          n = vec3(          \n              scene(p + e.xyy, time, glass).x - scene(p - e.xyy, time, glass).x,\n              scene(p + e.yxy, time, glass).x - scene(p - e.yxy, time, glass).x,\n              scene(p + e.yyx, time, glass).x - scene(p - e.yyx, time, glass).x);\n          n /= length(n);\n          v = r.y;\n          \n          if (!glass && v == 2.0)\n          {\n             col += shade(rd, n, v, t, 0.0f);            \n             rd.xy += (0.5 - texture(iChannel0, uv).x) * 0.02;\n             glass = true;\n          }\n          else\n          {\n              break;\n          }\n       }\n       \n       t = t + min(d, 0.1);\n    }\n    \n    //shading\n    col += shade(rd, n, v, t, glow);\n    if (glass)\n    {\n        col *= vec3(1.0, 0.8, 1.0);\n    }\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI               3.141592653\n\nfloat cyl(vec3 p, float size, float height)\n{\n    return max(length(p.xz) - size, abs(p.y) - height);\n}\n\nfloat cube(vec3 p, vec3 size)\n{\n    vec3 c = abs(p) - size;\n    return max(max(c.x, c.y), c.z);\n}\n\nmat2 rot(in float a) \n{\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\t\n}\n\nvec2 scene(vec3 p, float t, bool glass)\n{\n    float tt = t + floor(p.z) * 9.0 + floor(p.x) * 7.0; \n    \n    vec3 p1 = mod(p, vec3(1.0, 2.0, 1.0)) - vec3(0.5, 1.0, 0.5);  \n    vec3 p2 = mod(p - vec3(0.5, 1.0, 0.5), vec3(1.0, 1.0, 1.0)) - vec3(0.5, 1.0, 0.5);  \n        \n    float c1 = cube(vec3(p1.x, p1.y,  0.0), vec3(0.2));\n    float c2 = cube(vec3(p1.x,  0.0, p1.z), vec3(0.1));\n    float c3 = cube(vec3( 0.0, p1.y, p1.z), vec3(0.2));\n    \n    float c4 = cyl(p1+vec3(0.0,-sin(tt*10.0      ) * 0.2 + 0.5, 0.0), 0.2, 0.1);\n    float c5 = cyl(p1+vec3(0.0,-sin(tt*13.0 + 2.0) * 0.2 - 0.5, 0.0), 0.2, 0.1);\n    float c6 = cyl(vec3(p1.x, 0.0, p1.z), 0.22, 0.0);\n    \n    float c7 = cyl(vec3(p2.x, 0.0, p2.z), 0.02, 0.0);\n    if (glass) c6 = 9999999.0;\n            \n    float d = min(min(min(c1, c2), min(c3, c4)), min(min(c5, c6), c7));\n    \n    float v = 0.0;\n    if (d==c2 || d==c4 || d==c5) v = 1.0;\n    if (d==c6) v = 2.0;\n    if (d==c7) v = 3.0;\n    \n    return vec2(d, v);\n}\n\nvec3 shade(vec3 dir, vec3 n, float v, float t, float glow)\n{\n    float la = dot(n, dir);\n    vec3 h = reflect(dir, n);\n    float sp = dot(h, dir);\n    \n    float l = pow(-la, 2.0) / max(pow(t, 3.0), 1.0);\n    float s = pow(max(-sp, 0.0), 20.0) * l;\n    \n    vec3 col = vec3(s, s, s);\n    if (v == 0.0) col += vec3(0.0, 0.4, 0.6);\n    else if (v == 1.0) col += vec3(0.0, 0.4, 0.6);\n    else if (v == 2.0) col += vec3(0.2, 0.2, 0.2);\n    else col = vec3(0.0);\n    \n    return col*l+glow*vec3(0.0,0.5,0.3);\n}\n","name":"Common","description":"","type":"common"}]}