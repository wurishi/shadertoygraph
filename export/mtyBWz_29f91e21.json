{"ver":"0.1","info":{"id":"mtyBWz","date":"1702212775","viewed":16,"name":"D8 - Flag waving effect","username":"SilverFox","description":"Simple Wave: Create a waving effect, ideal for flags or foliage.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flag","aoc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// More realisting noise approach \n// https://thebookofshaders.com/11/\n\n// Hash function to generate pseudo-random values\nfloat hash(float n) \n{\n    return fract(sin(n) * 43758.5453);\n}\n\n// 2D Noise function\nfloat noise(vec2 st) \n{\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = hash(i.x + i.y * 57.0);\n    float b = hash(i.x + 1.0 + i.y * 57.0);\n    float c = hash(i.x + (i.y + 1.0) * 57.0);\n    float d = hash(i.x + 1.0 + (i.y + 1.0) * 57.0);\n\n    // Cubic Hermite Curve.  Same as SmoothStep()\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    // Mix 4 corners percentages\n    return mix(a, b, u.x) +\n           (c - a) * u.y * (1.0 - u.x) +\n           (d - b) * u.x * u.y;\n}\n\nfloat realisticWave(vec2 uv, float time, float amplitude, float frequency, float speed) \n{\n    // Non-uniform wave amplitude\n    float varAmplitude = amplitude * (sin(uv.x * 2.0 * 3.14159) * 0.5 + 0.5);\n\n    // Adding a noise factor for more randomness\n    float noiseFactor = noise(uv * frequency * 0.5);\n\n    // Combining sine wave with noise factor for a more complex and realistic motion\n    float wave = varAmplitude * sin(uv.x * frequency + time * speed + noiseFactor);\n\n    return wave;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Parameters for the wave\n    float waveAmplitude = 0.1;\n    float waveFrequency = 10.0;\n    float waveSpeed = 4.0;\n\n    // Calculate wave offset\n    float wave = realisticWave(uv, iTime, waveAmplitude, waveFrequency, waveSpeed);\n    //float wave = waveAmplitude * sin(uv.x * waveFrequency + iTime * waveSpeed);\n\n    \n    // Apply the wave offset to the x-coordinate of texture\n    vec2 wavedUV = uv;\n    wavedUV.y += wave;\n\n    // Fetch texture with waved coordinates\n    vec4 textureColor = texture(iChannel0, wavedUV);\n\n    // Output to screen\n    fragColor = textureColor;\n}\n","name":"Image","description":"","type":"image"}]}