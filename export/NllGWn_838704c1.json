{"ver":"0.1","info":{"id":"NllGWn","date":"1623243496","viewed":111,"name":"Pixelize and rotate lines","username":"artem_hlezin","description":"Rotations depend on cell intensity","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["pixelize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RATIO iResolution.x / iResolution.y\n#define GRID_SIZE vec2(25.0) * vec2(RATIO, 1.0)\n#define PI 3.14159\n\n\n// Pixelize uv cordinates\n// num: number of values\nvec2 quantize(vec2 uv, vec2 num) \n{\n    return ceil(uv * num) / num;\n}\n\n\n// Tile uv cordinates\n// num: number of horizontal and vertical tiles\nvec2 tile(vec2 uv, vec2 num)\n{\n    return mod(uv * num, 1.0);\n}\n\n\n// Calculate average of RGB colors\nfloat luminance(vec3 color)\n{\n    return dot(color, vec3(1.0)) * 0.33;\n}\n\n\n\n// Calculate signed distance field (SDF) for rectangle\n// Code from: https://iquilezles.org/articles/distfunctions2d\nfloat box_sdf(in vec2 p, in vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\n\n// Calculate rotation matrix\n// angle: in radians (2Pi for 360 turn)\nmat2 rotation_matrix(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = vec2(1.0 - uv.x, uv.y);  // Flip video (x axis)\n\n    vec2 uv_pixelized = quantize(uv, GRID_SIZE);\n    vec2 uv_tiled = tile(uv, GRID_SIZE) * 2.0 - 1.0;  // Tile and remap to [-1.0, 1.0]\n    \n    vec4 color = texture(iChannel0, uv_pixelized);\n    float luma = luminance(color.rgb);\n    \n    vec2 uv_tiled_rot = rotation_matrix(luma * PI) * uv_tiled;\n    float mask = step(box_sdf(uv_tiled_rot, vec2(0.2, 1.0)), 0.0);\n    float bg = 0.2;\n    \n    fragColor = color * clamp(mask, bg, 1.0);\n}","name":"Image","description":"","type":"image"}]}