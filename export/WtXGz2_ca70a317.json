{"ver":"0.1","info":{"id":"WtXGz2","date":"1556902456","viewed":210,"name":"190503_helix","username":"omeometo","description":"sum of atan2 functions, or some riemann-surface thing","likes":9,"published":1,"flags":1,"usePreview":0,"tags":["math","function"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float nearint(float x){\n\treturn abs(x-round(x));\n}\n\nfloat f0(in vec2 p){\n\treturn atan(p.y, p.x) / 6.2832;\n}\n\nvec2 f(in vec2 p){\n\tconst float pi=3.1416;\n\tconst float w=pi/2.;\n    float t=iTime*0.1;\n    \n    float trim=-1e9;\n    float val=0.0;\n    for(int i=0;i<4;i++){\n        vec2 pole = vec2(cos(t+w*float(i)),sin(3.*(t+w*float(i)))); \n\t\tfloat wt = (i%2==0?1.:-1.);\n        val += f0(p-pole)*wt;\n        trim = max(trim, 0.2-length(p-pole));\n    }\n    return vec2(val, trim);\n}\n\nfloat dist(in vec3 p){\n    vec2 vt = f(p.xz);\n    float a = vt.x-p.y;\n    float trim = vt.y;\n    trim = max(trim, length(p.xz)-2.0);    \n    \n    float dist = abs(a-round(a))-0.02;\n    return max(trim, dist)*0.5;\n}\n\nvoid getColor( out vec4 fragColor, in vec3 pos, in vec3 ray){\n    float depth = 0.;\n    for(int i=0;i<200;i++){\n\t\tfloat d=dist(pos);\n        if(d<1e-3){\n            float col=1.0-float(i)/200.;\n            float eps=1e-3;\n            vec3 u=vec3(\n            \tdist(pos+vec3(eps,0.0,0.0))-dist(pos-vec3(eps,0.0,0.0)),\n            \tdist(pos+vec3(0.0,eps,0.0))-dist(pos-vec3(0.0,eps,0.0)),\n            \tdist(pos+vec3(0.0,0.0,eps))-dist(pos-vec3(0.0,0.0,eps))\n            );\n            u=normalize(u);\n            col *= 0.5+0.5*max(0.0, dot(u,-ray));\n            fragColor = vec4(vec3(col), 1.0);\n            return;\n        }\n        depth += d;\n        pos += d * ray;\n        if(depth>1e2){\n        \tfragColor=vec4(vec3(0.0), 1.0);\n            return;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 pos = vec3(0.0, 0.5, 6.0);\n    vec3 eye = vec3(0.0, 0.0, -1.0);\n\tvec3 up = vec3(0.0, 1.0, 0.0);\n    eye=normalize(eye);\n    up=normalize(up);\n    vec3 right = cross(up, eye);\n    float angle = 0.4;\n    \n    vec3 ray = eye + (uv.x * right + uv.y * up) * angle;\n    ray = normalize(ray);\n\tgetColor(fragColor, pos, ray);  \n}\n\nvoid mainVR(out vec4 fragColor, in vec2 hoge, in vec3 pos, in vec3 ray){\n\tgetColor(fragColor, pos, ray);\n}","name":"Image","description":"","type":"image"}]}