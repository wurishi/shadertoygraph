{"ver":"0.1","info":{"id":"4f2Gzz","date":"1703759451","viewed":75,"name":"DomainWarping","username":"Leabemo","description":"fbm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//===========================================================\nconst mat2 m = mat2( 0.8,  0.6, -0.6,  0.8 );\n\nfloat radom( in vec2 p )\n{\n\treturn sin(p.x)*sin(p.y);\n}\n\nfloat noise( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*radom( p ); p = m*p*2.02;\n    f += 0.2500*radom( p ); p = m*p*2.03;\n    f += 0.1250*radom( p ); p = m*p*2.01;\n    f += 0.0625*radom( p );\n    return f/0.9375;\n}\n\n//===========================================================\n\nvec2 radom2(in vec2 i){\n    \n    i = vec2(dot(i,vec2(127.1,311.7)),dot(i,vec2(269.5,183.3)));\n    return fract(sin(i))*2.-1.;\n\n}\n\nfloat noise2 (in vec2 uv){\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    float a = dot(radom2(i),f);    \n    float b = dot(radom2(i + vec2(1.0,0.0)),f - vec2(1.0,0.0));\n    float c = dot(radom2(i + vec2(0.0,1.0)),f - vec2(0.0,1.0));\n    float d = dot(radom2(i + vec2(1.0,1.0)),f - vec2(1.0,1.0));\n    \n    // Smooth Interpolation\n    vec2 u = f*f*(3.-2.*f);\n    \n    float noise = mix(mix(a,b,u.x),mix(c,d,u.x),u.y);\n\n    return noise*1.2+0.5;\n}\n\n//============================================================\n\n#define NUM_OCTAVES 5\nfloat fbm(in vec2 st){\n    \n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    \n     // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),-sin(0.5), cos(0.50));\n    \n    // Loop of octaves\n    for(int i=0;i<=NUM_OCTAVES;i++){\n       value += noise(st) * amplitude;\n       st *= 2. * rot;\n       amplitude *= .5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 3.*fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec2 j = vec2(0.);\n    j.x = fbm(uv + 0.15*iTime);\n    j.y = fbm(uv + vec2(0.,1.) - 0.03*iTime);\n    \n    vec2 k = vec2(0.);\n    k.x = fbm(uv + j*4.0 + vec2(0.970,0.590)*iTime*0.5);    \n    k.y = fbm(uv + j*1.2 + vec2(0.860,0.310) - 0.12*iTime);\n\n    float l = fbm(uv + k);\n    \n    col += vec3(l);\n    // Mix color\n    col = mix(vec3(0.2,0.3,0.4), vec3(0.3,0.05,0.05),l);\n\n    col = mix( col, vec3(0.9,0.8,0.9), k.x);\n\n    col = mix( col, vec3(0.4,0.3,0.3),0.5*j.x*j.x );\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}