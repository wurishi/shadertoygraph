{"ver":"0.1","info":{"id":"DtfSDS","date":"1675425711","viewed":35,"name":"Infinite Shader Test","username":"sanivel","description":"infinite shader test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["infinite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 opRep(vec3 p, vec3 c)\n{\n    return mod(p+0.5*c,c)-0.5*c;\n}\n\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\n\nfloat map(vec3 pos)\n{\n    float v = 0.0;\n    \n    pos = opRep(pos, vec3(4.0));\n    \n    \n    float cube1 = sdBox(pos, vec3(0.8));\n    float cube2 = sdBox(pos+vec3(2.,0.,0.), vec3(0.8));\n    float sphere = sdSphere(pos+vec3(1.0,0.,0.), 1.3);\n    \n    v = min(cube1, cube2);\n    v = max(-sphere, v);\n    \n    return v;\n}\n\nfloat CastRay(vec3 ro, vec3 rd) \n{\n    float contact = 0.;\n    \n    for(int i=0; i<64; i++)\n    {\n        float ray = map(ro + rd * contact);\n        \n        if(ray < (0.0001*contact))\n        {\n            return float(i)/32.;;\n        }\n        contact += ray;\n    }\n\n    return -1.0;\n}\n\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    float contact = CastRay(ro, rd);\n    \n    vec3 col = vec3(0.);\n   \n    if(contact == -1.0)\n    {\n        col = vec3(0.0);\n    }\n    else\n    {\n        // col = vec3(1.0);\n        col = vec3(1.0 - contact);\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 cameraPos = vec3(0., 0., iTime-5.);\n    vec3 cameraTar = vec3(0., 0., iTime);\n    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0., -1, 0.), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + forward);\n    \n    vec3 col = render(cameraPos, viewDir);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}