{"ver":"0.1","info":{"id":"cljfRG","date":"1694692173","viewed":139,"name":"golden iteration","username":"Carandiru","description":"iteration from 0 to n with inline shuffling of the current iteration index. The shuffling is uniformly distributed for the range 0 to n.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// iteration from 0 to n with inline shuffling of the current iteration index. \n// The shuffling is uniformly distributed for the range 0 to n.\n\n#define GOLDEN_RATIO (1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066057189033788811218482216986198774837979833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080980526767303517699677977504091090378155646968210243) // 1618033988\n#define GOLDEN_RATIO_ZERO (0.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066057189033788811218482216986198774837979833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080980526767303517699677977504091090378155646968210243)\n\nuvec2 murmur3( in uvec2 u )\n{\n  u ^= ( u >> 16 ); u *= 0x85EBCA6Bu;\n  u ^= ( u >> 13 ); u *= 0xC2B2AE35u;\n  u ^= ( u >> 16 );\n\n  return u;\n}\nvec2 unorm(uvec2 n) { return(fract(vec2(n) * (1.0 / float(0xffffffffU)))); }\n\nvec2 hash22(in vec2 m) \n{\n    uvec2 mu = floatBitsToUint(m * GOLDEN_RATIO) | 0x1u;\n\n    mu = murmur3(mu);\n\n    return(1.0f - unorm(mu));\n}\n\nfloat rand(in vec2 st) {\n  vec2 r = hash22(st) * GOLDEN_RATIO_ZERO;\n  return fract(abs(r.y-r.x) * 111.111111 * 111.111111 + r.y * 111.111111 + r.x);\n}\n\n#define saturate(a) clamp(vec3(0), vec3(1), a)\n\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);\n}\n\n#define fma(a,b,c) (a*b+c)\nvec2 rotate( in vec2 p, in vec2 cossin )\n{\n\t#define c_ x\n\t#define s_ y\n\n\treturn( vec2(fma(p.x, cossin.c_, p.y * cossin.s_), fma(p.x, -cossin.s_, p.y * cossin.c_)) );\n\n\t#undef c_\n\t#undef s_\n}\nvec2 rotate( in vec2 p, in float angle )\n{\n    return rotate(p, vec2(cos(angle), sin(angle)));\n}\n\n#define R iResolution.xy\n#define t iTime\n#define dt iTimeDelta\n#define ff float(iFrame)\n#define phi GOLDEN_RATIO\n#define iphi GOLDEN_RATIO_ZERO\n#define pi 3.14\n#define pi2 (2.0*pi)\n\nconst vec3 color_a = vec3(0.9f, 0.01f, 0.05f);\nconst vec3 color_b = vec3(0.99f, 0.00f, 0.01f);\n\nvec2 diamondize(in vec2 uv, in float resolution) // original - dominionxvii - https://www.shadertoy.com/view/dlBfz1\n{\n    vec2 diamondUV = rotate(uv, radians(45.));\n    diamondUV = floor(diamondUV * resolution) / resolution;\n    diamondUV = rotate(diamondUV, -radians(45.));\n    \n    return diamondUV;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/R;\n    uv = 2.0f * uv - 1.0f;\n   // uv *= t;\n    \n    // begin free sorting \n    float r0 = rand(R); // fixed seed\n    bool ratio = (uv.y >= -(iphi));\n    vec3 s = vec3(0);\n\n    ivec2 uv_index = ivec2(floor(mix(diamondize(uv, 100.0f), uv, bvec2(ratio)) * R));\n    \n    const float n = 10.0f;  // last n seconds\n    for (float i = 1.0f; i <= n; ++i) { // history / sequence\n\n        float r1 = r0 + floor(phi*i*t) * iphi;\n        float r2 = r0 + floor(phi*(i + 1.0f)*t) * iphi;\n       \n        r1 = mod(r1, 1.0f) * 2.0f - 1.0f;\n        r2 = mod(r2, 1.0f) * 2.0f - 1.0f;\n        \n        // end free sorting\n\n        ivec2 golden_index_a = ivec2(floor(vec2(r1 * R.x, r1 * R.y)));\n        ivec2 golden_index_b = ivec2(floor(vec2(r2 * R.x, r2 * R.y)));\n\n        const float amp = 1000.0f;\n        vec3 c0 = vec3(0), c1 = vec3(0);\n        \n        float ft = fract(t);\n        float sig = abs(sin(i/t * pi2));\n        \n        c0 += (color_a * (1.0f - sig)/ft) * (exp(amp * -sig * float(abs(golden_index_a.x - uv_index.x)) / R.x));\n        c0 *= smoothstep(-R.y, R.y, float((golden_index_b.y - golden_index_a.y) & 399)) / ft; // bleed effect\n        \n        c1 += (color_b * (1.0f - sig)/ft) * (exp(amp * -sig * float(abs(golden_index_b.x - uv_index.x)) / R.x));\n        c1 *= smoothstep(-R.y, R.y, float((golden_index_a.y - golden_index_b.y) & -399)) / ft; // bleed effect\n        \n        bool last = bool(i - n);\n        c0 *= mix(0.6f, 1.0f, ratio && last);\n        c1 *= mix(0.7f, 1.0f, ratio && last);\n\n        s += (c0 + c1);// * mix(c0, c1, bvec3(ratio));\n    }\n\n    vec3 color = vec3( s);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}