{"ver":"0.1","info":{"id":"Ms3cDN","date":"1518875780","viewed":156,"name":"Pixelize-Effect","username":"Rustywolf","description":"Pixelize effect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pixelize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel count across width of screen\n    float pixelCountX = (sin(iTime/5.0-1.0) + 1.0) * 50.0 + 50.0;\n    // scaled pixel count according to ratio of width v length\n    float pixelCountY = (pixelCountX * iResolution.y) / iResolution.x;\n    \n    // how many samples are done for both x and y\n    // increase for higher accuracy\n    float sampleCount = 4.0;\n   \n    // Normalized coordinates of current pixel\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Current \"pixel\" effect base coordinate (top-left)\n    vec2 curr = vec2(floor(uv.x * pixelCountX)/pixelCountX, floor(uv.y * pixelCountY)/pixelCountY); \n\n    // Total RGB colour of current \"pixel\" effect\n    vec3 total = vec3(0, 0, 0);\n    \n    // Loop over x/y for samples\n    for (float y = 0.0; y < 1.0 / pixelCountX; y += 1.0 / (pixelCountX * sampleCount)) {\n    \tfor (float x = 0.0; x < 1.0 / pixelCountY; x += 1.0 / (pixelCountY * sampleCount)) {\n        \ttotal = total + texture(iChannel0, curr + vec2(x, y)).rgb;\n        }    \n    }\n\n    // Divide by total sample count to determine average\n    vec3 average = total / vec3(sampleCount*sampleCount);\n    \n    \n    // Apply colour\n    fragColor = vec4(average, 1.0);\n}","name":"Image","description":"","type":"image"}]}