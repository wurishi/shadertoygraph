{"ver":"0.1","info":{"id":"MXXfWn","date":"1728250308","viewed":28,"name":"random overlap circle square xor","username":"jt","description":"Random overlapping circles and rotated squares in a grid, combined by fuzzy xor operator.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circle","random","rotate","square","xor","overlap"],"hasliked":0,"parentid":"43fcDM","parentname":"random overlapping circles xored"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MXXfWn random overlap circle square xor, 2024 by jt\n// based on https://www.shadertoy.com/view/43fcDM random overlapping circles xored\n// combined with https://www.shadertoy.com/view/l3XyWS rnd overlap rotate squares xored\n\n// Searching for simple, efficient, seemingly random patterns:\n// Random overlapping circles and rotated squares in a grid,\n// combined by fuzzy xor operator.\n\n// tags: circle, random, rotate, square, xor, overlap\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec4 hash42(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nfloat rotated_square(ivec2 t, vec2 q)\n{\n    vec4 r = (hash42(vec2(t)*13.456)*0.5+0.5);\n    float a = tau*r.w;\n    mat2 R = mat2(cos(a),sin(a),-sin(a),cos(a));\n    q = R*(q-0.5)+0.5;\n    return 1.0-smoothstep(-0.01,+0.01,max(abs(q.x-r.x),abs(q.y-r.y))-r.z);\n}\n\nfloat circle(ivec2 t, vec2 q)\n{\n    vec3 r = (hash32(vec2(t)*13.456)*0.5+0.5);\n    return 1.0-smoothstep(-0.01,+0.01,length(q-r.xy)-r.z);\n}\n\nfloat fuzzy_xor(float a, float b)\n{\n    return max(min(a,b),1.0-max(a,b));\n}\n\nfloat tile_env(ivec2 t, vec2 q)\n{\n    float d = 0.0;\n    for(int y = -1; y <= +1; y++)\n        for(int x = -1; x <= +1; x++)\n            d =\n                fuzzy_xor\n                (\n                    d,\n                    hash12(vec2(t+ivec2(x,y))) < 0.5\n                    ?\n                    rotated_square(t+ivec2(x,y), q-vec2(x,y))\n                    :\n                    circle(t+ivec2(x,y), q-vec2(x,y))\n                );\n\n    return d;\n}\n\nfloat random_overlapping_shapes_xored(vec2 p, float n)\n{\n    ivec2 t = ivec2(floor(p*n));\n    vec2 q = fract(p*n);\n\n    return tile_env(t, q);\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = .5 + (I - R / 2.) / R.y;\n\n    o = vec4(0);\n    //if(all(lessThan(abs(I - 0.5), vec2(0.5))))\n    {\n        o = vec4(I.xy,0.0,1.0);\n\n        o = vec4(vec3(random_overlapping_shapes_xored(I.xy, 5.0)),1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}