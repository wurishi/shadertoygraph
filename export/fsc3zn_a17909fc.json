{"ver":"0.1","info":{"id":"fsc3zn","date":"1628953346","viewed":161,"name":"Planet Expedition","username":"omegasbk","description":"SDF planet","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["sdf","planet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n// 14.8.2021.\n\n#define MAX_STEPS 100\n#define MAX_DIST 200.\n#define SURF_DIST .005\n\n#define PI 3.14159265359\n\nconst vec3 lightPosition = vec3(0, 3, 4);\nconst vec3 lightColor    = vec3(0.2, 0.2, 0.226) * 2.;\n\nfloat noise(vec2 uv)\n{\n    return fract(sin(uv.x * 113. + uv.y * 412.) * 6339.);\n}\n\nfloat noiseSmooth(vec2 uv)\n{\n    vec2 index = floor(uv);\n    \n    vec2 pq = fract(uv);\n    pq = smoothstep(0., 1., pq);\n     \n    float topLeft = noise(index);\n    float topRight = noise(index + vec2(1, 0.));\n    float top = mix(topLeft, topRight, pq.x);\n    \n    float bottomLeft = noise(index + vec2(0, 1));\n    float bottomRight = noise(index + vec2(1, 1));\n    float bottom = mix(bottomLeft, bottomRight, pq.x);\n    \n    return mix(top, bottom, pq.y);\n}\n\nfloat plane(vec3 p, vec3 n, float h)\n{\n  return dot(p,n) + h;\n}\n\nfloat getDist(in vec3 p)\n{\n    float h = noiseSmooth(p.xz / 8.) * 5.2;\n\n    h += texture(iChannel1, p.xz / 20.).r;\n    return plane(p, vec3(0., 1., 0), h);\n}\n\nvec3 getNormal(in vec3 p) \n{\n    int body;\n    float d = getDist(p);\n    \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy), \n        getDist(p - e.yxy), \n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        \n        if (dO > MAX_DIST || dS < SURF_DIST) \n            break;\n    }\n    \n    return dO;\n}\n\nvec3 getLight(in vec3 p, in vec3 rd)\n{    \n\tvec3 normal = getNormal(p);\n    vec3 lightDir = normalize(p - lightPosition);\n    \n    float cosa = pow(0.5+0.5*dot(normal, -lightDir), 3.0);\n    float cosr = max(dot(-rd, reflect(lightDir, normal)), 0.0);\n    \n    vec3 ambiant = vec3(0.42);\n    vec3 diffuse = vec3(0.8 * cosa);\n    vec3 phong = vec3(0.5 * pow(cosr, 16.0));\n    \n    return lightColor * (ambiant + diffuse + phong);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(-.15 + sin(iTime) / 4., 1.9 + sin(sin(iTime)) / 2., iTime * 2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y-0.2, 0.8));\n        \n    float d = rayMarch(ro, rd);\n    if (d < MAX_DIST)\n    {\n        vec3 p = ro + rd * d;   \n        \n        vec3 n = getNormal(p);\n        col = (vec3(getLight(p, rd)) / exp(d / 4.) * 10.); \n    }\n    else \n    {    \n        col = vec3(smoothstep(0.998, 0.999, noise(uv)) * noise(uv * 0.5));\n        col -= min(0., noiseSmooth((uv + sin(iTime/10.)) * 20.) / 2.);\n        // col += (1.1 - uv.y * 2.) / 20.;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}