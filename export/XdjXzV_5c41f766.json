{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Color blindness simulator\n// http://www.daltonize.org/search/label/Daltonize\n\n// | Normal      | Protanope |\n// | Deuteranope | Tritanope |\n\nvec3 RGBtoLMS(vec3 color)\n{\n    return vec3(\n        dot(vec3(17.8824,   43.5161,  4.11935), color),\n        dot(vec3(3.45565,   27.1554,  3.86714), color),\n        dot(vec3(0.0299566, 0.184309, 1.46709), color)\n    );\n}\n\nvec4 LMStoRGB(vec3 color)\n{\n    return vec4(\n        dot(vec3(0.0809444479,    -0.130504409,   0.116721066), color),\n        dot(vec3(-0.0102485335,    0.0540193266, -0.113614708), color),\n        dot(vec3(-0.000365296938, -0.00412161469, 0.693511405), color),\n        1.0\n    );\n}\n\n// Red color blindness\nvec3 Protanope(vec3 color)\n{\n    return vec3(\n        dot(vec3(0.0, 2.02344, -2.52581), color),\n        dot(vec3(0.0, 1.0,      0.0),     color),\n        dot(vec3(0.0, 0.0,      1.0),     color)\n    );\n}\n\n// Green color blindness\nvec3 Deuteranope(vec3 color)\n{\n    return vec3(\n        dot(vec3(1.0,      0.0, 0.0),     color),\n        dot(vec3(0.494207, 0.0, 1.24827), color),\n        dot(vec3(0.0,      0.0, 1.0),     color)\n    );\n}\n\n// Blue color blindness\nvec3 Tritanope(vec3 color)\n{\n    return vec3(\n        dot(vec3( 1.0,       0.0,      0.0), color),\n        dot(vec3( 0.0,       1.0,      0.0), color),\n        dot(vec3(-0.395913,  0.801109, 0.0), color) \n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv0 = fragCoord.xy / iResolution.xy;\n    vec2 uv = (uv0 * 2.0 - 1.0);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 LMS = vec3(0);\n    vec4 color = vec4(0);\n    \n    if(uv.x < 0.0) {\n        if(uv.y > 0.0) {\n            vec3 rgb = texture(iChannel0, uv0 * vec2(2.0, 2.0) - vec2(0.0, 1.0)).rgb;\n            color = vec4(rgb, 1.0);\n        } else {\n            vec3 rgb = texture(iChannel0, uv0 * vec2(2.0, 2.0) - vec2(0.0, 0.0)).rgb;\n            color = LMStoRGB(Protanope(RGBtoLMS(rgb)));\n        }\n    } else {\n        if(uv.y > 0.0) {\n        \tvec3 rgb = texture(iChannel0, uv0 * vec2(2.0, 2.0) - vec2(1.0, 1.0)).rgb;\n            color = LMStoRGB(Deuteranope(RGBtoLMS(rgb)));\n        } else {            \n        \tvec3 rgb = texture(iChannel0, uv0 * vec2(2.0, 2.0) - vec2(1.0, 0.0)).rgb;\n            color = LMStoRGB(Tritanope(RGBtoLMS(rgb)));\n        }\n    }\n    \n    // borders\n    color += max(smoothstep(0.01,0.005,abs(uv.x)),0.0);\n    color += max(smoothstep(0.01,0.005,abs(uv.y)),0.0);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdjXzV","date":"1413888790","viewed":353,"name":"Color blindness simulation","username":"bazhenovc","description":"This shader simulates three different color blindness types.\nUpper left corner - no color blindess, upper right corner - protanopia, lower left corner - deuteranopia and lower right corner - tritanopia.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colorblind","protanope","deuteranope","tritanope","lms"],"hasliked":0,"parentid":"","parentname":""}}