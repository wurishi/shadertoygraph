{"ver":"0.1","info":{"id":"lXsfRn","date":"1727961918","viewed":69,"name":"Rainbow Dispersion","username":"bogdanmikh","description":"Rainbow","likes":3,"published":1,"flags":32,"usePreview":1,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distortion = 0.01;      // the bias of the barrel distortion\nconst float iterations = 20.0;  // how many samples to use for edge blur\nfloat strength = 0.15;      // how much edge blur is applied (to obscure the r, g, b separation)\nfloat separation = 0.65;      // how much to separate the r, g and b\nfloat powerRainbow = 1.0; // powerRainbow = [0.0, 1.0] \n\nvec4 Aberrate(sampler2D source, vec2 texuv, vec2 squareUv, float amount) {\n    return texture(source, 0.5 + texuv / sqrt(1.0 + amount * dot(texuv, squareUv)));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 v_TexCoordOut = fragCoord.xy / iResolution.xy;        \n    vec2 squareUv = v_TexCoordOut - 0.5;\n    vec2 uv = v_TexCoordOut - 0.5;\n  \n    squareUv.x *= 0.3; // change radius\n    squareUv.y *= 0.3; // change radius\n    \n    vec4 A = vec4(0, 0, 0, 1);\n    vec4 rainbow = vec4(0, 0, 0, 1);\n    \n    for (float i = -iterations; i < iterations; i++) {\n        A.r += Aberrate(iChannel0, uv, squareUv, i * strength + (distortion + separation)).r;       \n        A.g += Aberrate(iChannel0, uv, squareUv, i * strength).g;\n        A.b += Aberrate(iChannel0, uv, squareUv, i * strength + (distortion - separation)).b;\n        \n        rainbow.r += Aberrate(iChannel1, uv, squareUv, i * strength + (distortion + separation)).r;\n        rainbow.g += Aberrate(iChannel1, uv, squareUv, i * strength).g;\n        rainbow.b += Aberrate(iChannel1, uv, squareUv, i * strength + (distortion - separation)).b;\n    }\n    \n    A.rgb /= iterations * 2.0;\n    rainbow.rgb /= iterations * 2.0;\n    float dist = distance(v_TexCoordOut, vec2(0.5));\n    \n     \n   // fragColor = A + rainbow * dist * powerRainbow * 0.3;\n   fragColor = mix(A, rainbow, dist * powerRainbow * 0.6);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float dist = length(uv);\n  \n    float numRings = 10.0;\n    float radius = 0.1;\n    float ringWidth = 0.05;\n\n    float ringId = floor(dist / ringWidth);\n    \n    float angle = ringId / numRings;\n    vec3 color = vec3(0.5 + 0.5 * cos(angle * 3.14159 * 2.0 + vec3(0.0, 2.0, 4.0))); // Цвета радуги\n\n    if (dist < radius + ringId * ringWidth && dist > ringId * ringWidth) {\n        fragColor = vec4(color, 1.0);\n    } else {\n        fragColor = vec4(0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}