{"ver":"0.1","info":{"id":"wssBDf","date":"1589221077","viewed":188,"name":"ShATI - Cl√©","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 8th subject: key :) ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","keys","everyday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI 3.141592\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat tore (vec3 p, vec2 t)\n{return length(vec2(length(p.xz)-t.x,p.y))-t.y;}\n\nfloat key (vec3 p, float t)\n{\n    float thick = t;\n    float body = cyl(p.xzy, thick,1.5);\n    float encoche = tore(p.xzy+vec3(-(2.*thick),0.05,1.),vec2(thick,0.1));\n    float head = max(-cyl(p-vec3(0.,2.2,0.),0.65,thick*1.5),cyl(p-vec3(0.,2.2,0.), 0.8, thick));\n    p.y = abs(abs(p.y-0.45)-0.8)-0.15;\n    float ts = tore(p,vec2(thick, 0.08));\n\n    return min(encoche,min(min(body,head),ts));\n}\n\nfloat SDF(vec3 p)\n{\n    p.xy *= rot(PI/3.);\n    p.xz *= rot(iTime*0.5);\n    vec3 pp = p-vec3(0.,2.,0.);\n    float small = 3.5;\n    float thick = 0.25;\n    float d = key(p,thick);\n    for (int i=0; i<2; i++)\n    {\n        pp.xz *= rot(iTime*(float(i)+1.));\n        d = min(d, key(pp*small,thick)/small);\n        pp.y -= 0.55;\n        small *= 4.;\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(-1.,0.6,-4.),\n        rd = normalize(vec3(uv,1.8)),\n        p = ro,\n        col = vec3(0.1,0.15,0.2);\n\n    float shad,d=0.; \n    bool hit = false;\n\n    for (float i=0.;i<64.; i++)\n    {\n        d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        col = vec3(0.8,0.74,0.75);\n        col *= (1.-shad);\n    }\n\n    // vignetting (from iq)\n    vec2 q = fragCoord.xy / iResolution.xy;\n    col *= .5 + 0.5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), 0.2);\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}