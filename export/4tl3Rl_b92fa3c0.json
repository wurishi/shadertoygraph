{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\n\t\n\tAll Code stolen from \n\thttps://www.shadertoy.com/view/Mdl3Rr\n\n\tand\n\t\n\thttps://iquilezles.org/www/index.htm\n\thttps://www.shadertoy.com/user/iq\n\n*/\n\n\n\n\n\n\n// Robert Cupisz 2013\n// Creative Commons Attribution-ShareAlike 3.0 Unported\n//\n// Bits of code taken from Inigo Quilez, including fbm(), impulse()\n// and friends, sdCone() and friends; also box() by Simon Green.\n\n#define INF 1.0e38\n#define HIT(x) hit = min(hit, x)\n#define ROOFPOS vec3(0,-1,0.01)\n\nvec4 spherePos[10];\n\nmat2 rot(float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\treturn mat2(c,-s,s,c);\n}\nvec3 rot (vec3 v, vec3 axis, vec2 sincosangle)\n{\n\treturn v*sincosangle.y + cross(axis, v)*sincosangle.x + axis*(dot(axis, v))*(1.0 - sincosangle.y);\n}\n\nfloat sdSphere (vec3 p, float s)\n{\n\treturn length(p)-s;\n}\n\n\n// rd doesn't have to be normalized\nfloat sphere(vec3 ro, vec3 rd, float r)\n{\n\tfloat b = dot(ro, rd);\n\tfloat c = dot(ro, ro) - r * r;\n\tfloat a = dot(rd, rd);\n\t// Exit if râ€™s origin outside s (c > 0) and r pointing away from s (b > 0)\n\tif (c > 0.0 && b > 0.0)\n\t\treturn INF;\n\tfloat discr = b*b - a*c;\n\t// A negative discriminant corresponds to ray missing sphere\n\tif (discr < 0.0)\n\t\treturn INF;\n\t// Ray now found to intersect sphere, compute smallest t value of intersection\n\tfloat t = - b - sqrt(discr);\n\tt /= a;\n\t// If t is negative, ray started inside sphere so clamp t to zero\n\tt = max(0.0, t);\n\treturn t;\n}\n\n\n\nfloat hash (float n)\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise (in vec3 x)\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\n\tf = f*f*(3.0-2.0*f);\n\n\tfloat n = p.x + p.y*57.0 + 113.0*p.z;\n\n\tfloat res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n\t\t\t\t\t\tmix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n\t\t\t\t\tmix(mix( hash(n+113.0), hash(n+114.0),f.x),\n\t\t\t\t\t\tmix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n\treturn res;\n}\n\nfloat box(vec3 org, vec3 dir, vec3 size, out float far)\n{\n\t// compute intersection of ray with all six bbox planes\n\tvec3 invR = 1.0 / dir;\n\tvec3 tbot = invR * (-0.5*size - org);\n\tvec3 ttop = invR * (0.5*size - org);\n\t\n\t// re-order intersections to find smallest and largest on each axis\n\tvec3 tmin = min (ttop, tbot);\n\tvec3 tmax = max (ttop, tbot);\n\t\n\t// find the largest tmin and the smallest tmax\n\tvec2 t0 = max (tmin.xx, tmin.yz);\n\tfloat near;\n\tnear = max (t0.x, t0.y);\n\tt0 = min (tmax.xx, tmax.yz);\n\tfar = min (t0.x, t0.y);\n\n\t// check for hit\n\treturn near < far && far > 0.0 ? near : INF;\n}\n\nfloat box(vec3 org, vec3 dir, vec3 size)\n{\n\tfloat far;\n\treturn box(org, dir, size, far);\n}\n\n\n\n// Makes brighter near top\nfloat transmittance (vec3 p)\n{\n\treturn exp (0.4*p.y);\n}\n\nfloat intersect (vec3 ro, vec3 rd)\n{\n\tfloat hit = INF;\n\n    for( int i = 0; i < 10; i++ ){\n\t\tHIT(sphere(ro - spherePos[i].xyz, rd,.1));\n    }\n\n\n\tHIT(box (ro - vec3(0,-1.,0), rd, vec3(10,.01,10)));\n\n\n\treturn hit;\n}\n\n#define STEPS 50\nvec3 inscatter (vec3 ro, vec3 rd, vec3 roLight, vec3 rdLight, vec3 lightDir, float hit, vec2 screenPos)\n{\n\tfloat far;\n\tfloat near = box(roLight + vec3(0.0, 1.0, 0.0), rdLight, vec3(1.5, 3.0, 1.5), far);\n\tif(near == INF || hit < near)\n\t\treturn vec3(0);\n\t\n\tfloat distAlongView = min(hit, far) - near;\n\tfloat oneOverSteps = 1.0/float(STEPS);\n\tvec3 step = rd*distAlongView*oneOverSteps;\n\tvec3 pos = ro + rd*near;\n\tfloat light = 0.0;\n\t\n\t// add noise to the start position to hide banding\n\tpos += rd*noise(vec3(2.0*screenPos, 0.0))*0.05;\n\n\tfor(int i = 0; i < STEPS; i++)\n\t{\n\t\tfloat l = intersect(pos, lightDir) == INF ? 1.0 : 0.0;\n\t\tl *= transmittance(pos);\n\t\tlight += l;\n        \n        //include light particles later ?\n\t\t//light += particles(pos)*l;\n\t\tpos += step;\n\t}\n\n\tlight *= oneOverSteps * distAlongView;\n\treturn light*vec3(0.3, .2 , 1. );\n}\n\n\n\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n     for( int i =0; i < 10; i++ ){\n        \n        float x = .4 * cos(5. *.13 * (float( i )+2.));\n        float y = .44 * sin(5. * .075 * (float( i )+4.));\n        float z = .4 * sin(5. * .1 * (float( i )+3.3));\n        float r = .00001 * ( sin( iTime * .1  *( float( i) +1.))+2.);\n    \tspherePos[i] = vec4( x ,  y ,  z , .001 );\n        \n        \n    }\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    \n    // raycast the scene\n\tfloat hit = intersect(ro,rd);\n\tvec3 hitPos = ro + hit * rd;\n\t\n    vec3 col = vec3( 0. );\n    \n   \n\t// white window\n\tif (hit == INF)\n\t{\n\t\tcol = vec3( 0. , 0. , 0. );\n        \n\n    }else{\n        col = vec3( 0. , 0. , 0. );\n    }\n     \n    /*vec3 roLight = vec3( 0. , 4. , 0. );\n    vec3 rdLight = vec3( 0. , -1. , 0. );\n    vec3 lightDir = normalize( rdLight );\n    \n    col += inscatter(ro, rd, roLight, rdLight, lightDir, hit, fragCoord.xy);*/\n    \n    // direct light (screw shading!)\n\tvec3 lightRotAxis = vec3( sin( iTime ) , .2 , cos( iTime ));//vec3(0.707,0,0.707); //1,0,1 normalized\n    \n    float angle = .28; //* sin(iTime);\n\tvec2 lightAngleSinCos = vec2(sin(angle), cos(angle));\n\tvec3 lightDir = rot(vec3(0,1,0), lightRotAxis, lightAngleSinCos);\n\tfloat shadowBias = 1.0e-4;\n\t//vec3 col = vec3(0.0);\n\t//if (intersect(hitPos + lightDir*shadowBias, lightDir) == INF)\n\t//\tcol = vec3(0.9,0.,0.);\n\t\n\t// inscatter\n\tlightAngleSinCos.x *= -1.0; // rev angle\n\tvec3 roLight = rot(ro + ROOFPOS, lightRotAxis, lightAngleSinCos);\n\tvec3 rdLight = rot(rd, lightRotAxis, lightAngleSinCos);\n\tcol += inscatter(ro, rd, roLight, rdLight, lightDir, hit, fragCoord.xy);\n    \n\n    \n \tfragColor = vec4( col , 1. );   \n    \n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tl3Rl","date":"1424325456","viewed":702,"name":"SHADE A DAY ( 2 / 18 / 2015 )","username":"cabbibo","description":"Trying to understand volumetric surfaces more with raytracing. Large majority of code stolen from this absolutely divine shader by Robert Cupisz: https://www.shadertoy.com/view/Mdl3Rr","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["light","volumetric","raytrace"],"hasliked":0,"parentid":"","parentname":""}}