{"ver":"0.1","info":{"id":"tdBGDc","date":"1550130040","viewed":190,"name":"Raymarching twisted columns","username":"darkeclipz","description":"raymarching twisted columns.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define MaxSteps 64.\n#define MinDistance 0.01\n#define eps 0.001\n\n#define red vec3(227./255., 10./255., 4./255.)\n#define yellow vec3(250./255., 100./255., 1./255.)\n\nmat3 rotateY(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c, 0, s, 0, 1, 0, -s, 0, c);\n}\n\nmat3 rotateZ(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\nfloat sdSphere(vec3 p, float r) { return length(p) - r; }\nfloat sdYPlane(vec3 p, float y) { return p.y - y; }\nfloat sdBox(vec3 p, vec3 b) { \n\tvec3 d = abs(p) - b;\n    return length(max(d,0.0));\n}\n// from IQ\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec3 map(vec3 p) {\n    //mat3 rot = rotateZ(0.13*p.z);\n    //p *= rot;\n    float x = fract(p.x) - 0.5;\n    float z = fract(p.z) - 0.5;\n    return vec3(x, p.y, z);\n}\n\n// Smooth min function from IQ\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat scene(vec3 p) {\n\tp = map(p);\n    float outerSphere = sdSphere(p - vec3(0,-0.5,0), .20); \n    \n    float plane = sdPlane(p - vec3(0,0,0), normalize(vec4(0,1,0,0.5)));\n    float yPlane = sdYPlane(p, -0.5);\n    \n    mat3 ry = rotateY(3.*p.y);\n    float box = sdBox(ry*p, vec3(.05, 1, .05));\n    \n    \n    yPlane = min(yPlane, box);\n    \n    return smin(yPlane, outerSphere, 0.15);\n}\n\nvec3 calcNormal(vec3 p) {\n    float h = 0.0001;\n    vec2 k = vec2(1,-1);\n    vec3 n = normalize( k.xyy*scene( p + k.xyy*h ) + \n                  k.yyx*scene( p + k.yyx*h ) + \n                  k.yxy*scene( p + k.yxy*h ) + \n                  k.xxx*scene( p + k.xxx*h ) );    \n    return n;\n}\n    \nfloat march(vec3 ro, vec3 rd) {\n    float t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        float dt = scene(p);\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn t-MinDistance;  \n        }\n    }\n    return 0.;\n}\n\n// https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\nvec3 shadeBlinnPhong(vec3 p, vec3 viewDir, vec3 normal, vec3 lightPos, float lightPower, vec3 lightColor) {\n    vec3 diffuseColor = vec3(0.5);\n    vec3 specColor = vec3(1);\n    float shininess = 16.;\n\n    vec3 lightDir = lightPos - p;\n    float dist = length(lightDir);\n    dist = dist*dist;\n    lightDir = normalize(lightDir);\n    \n    float lambertian = max(dot(lightDir, normal), 0.0);\n    float specular = .0;\n    \n    if(lambertian > 0.) {\n        viewDir = normalize(-viewDir);\n        \n        vec3 halfDir = normalize(viewDir + lightDir);\n        float specAngle = max(dot(halfDir, normal), .0);\n        specular = pow(specAngle, shininess);\n    }\n    \n    vec3 color = /*ambientColor +*/\n                 diffuseColor * lambertian * lightColor * lightPower / dist +\n        \t\t specColor * specular * lightColor * lightPower / dist;\n    \n   \treturn color;\n}\n\nvec3 light(vec3 p, vec3 sn, vec3 rd) {\n       \n    mat3 rot = rotateY(iTime);\n    mat3 rot2 = rotateY(iTime);\n    vec3 L1 = shadeBlinnPhong(p, rd, sn, rot*vec3(5) + vec3(0,0,iTime*2.), 35., red);\n    vec3 L2 = shadeBlinnPhong(p, rd, sn, rot2*vec3(-5, 5, -5) + vec3(0,0,iTime*2.), 20., yellow);\n    \n    vec3 ambient = vec3(.1);\n    \n    return L1 + L2 + ambient;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    vec3 col = vec3(.0);\n    vec3 ro = vec3(0,1,-5);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 0) - ro);\n    mat3 rot = rotateY(cos(iTime/8.));\n    //rd *= rot;\n\n    ro += vec3(0,0,iTime*2.);\n    float t = march(ro, rd);\n    \n    if(t > eps) {\n        vec3 p = ro + t * rd;\n    \tvec3 n = calcNormal(p);\n        col = light(p, n, rd);\n        float fog = 1. / (1. + t * t * 0.02);\n        col = mix(vec3(0), col, fog);\n        //col = n*.5+.5;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}