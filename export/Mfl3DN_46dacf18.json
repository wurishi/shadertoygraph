{"ver":"0.1","info":{"id":"Mfl3DN","date":"1703101616","viewed":39,"name":"gradient sphere 52","username":"vssense","description":"gradient sphere with sdf","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float R = 0.7;\nconst float frequency = 10.0;\n\nfloat sdf(vec3 pos, float time)\n{\n    vec2 polar = vec2(\n        atan(pos.z, pos.x),\n        atan(pos.x * pos.x + pos.z * pos.z, -pos.y)\n    );\n    \n    return length(pos) - R - sin(polar.x * frequency + polar.y * frequency + time) * 0.04;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float gradient_offset = 0.01;\n    const float MIN_DIST = 0.01;\n    const float MAX_DIST = 110.0;\n    const int MAX_ITER = 32;\n    \n    vec2 uv = fragCoord.xy / iResolution.yy * 2.0;\n    vec3 start_pos = vec3(uv.x-1.0, uv.y-1.0, 0.0);\n    vec3 camera = vec3(0.0, 0.0,-100.0);\n    vec3 direction = normalize(start_pos - camera);\n\n    vec3 pos = start_pos + vec3(-R, 0.0, -1);\n    \n    float d = 0.0;\n    \n    for(int i =0; i < MAX_ITER; i++) {\n        d = sdf(pos, iTime);\n        pos += direction * d;\n        \n        if (d < MIN_DIST || d > MAX_DIST) break;\n    }\n\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n    if(d <= MIN_DIST) {\n        vec3 gradient = sdf(pos, iTime) - vec3(\n            sdf(pos + vec3(gradient_offset, 0.000, 0.000), iTime),\n            sdf(pos + vec3(0.000, gradient_offset, 0.000), iTime),\n            sdf(pos + vec3(0.000, 0.000, gradient_offset), iTime)\n        );\n        \n        color = normalize( gradient );\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}