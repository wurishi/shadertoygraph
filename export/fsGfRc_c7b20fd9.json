{"ver":"0.1","info":{"id":"fsGfRc","date":"1658787940","viewed":206,"name":"Square Koch curve","username":"chickenlegs","description":"This is a square Koch curve implementation following a similar implementation by The Art of Code (https://www.youtube.com/watch?v=il_Qg9AqQkE&ab_channel=TheArtofCode).","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["reflection","random","kochcurve","fbn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getNormal(float angle)\n{\n    return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Getting values\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // Setting up view port\n    float zoom = 15.;\n    vec2 zoomCenter = vec2(0., 0.);\n    float viewPortCenter = 0.5;\n    float ratio = iResolution.y/iResolution.x;\n    \n    // Establishing screen xy values\n    vec2 xy = (uv - viewPortCenter) * zoom + zoomCenter;\n    xy = vec2(xy.x, xy.y*ratio);\n    \n    // Establishing mouse xy values\n    mouse = (mouse - viewPortCenter) * zoom + zoomCenter;\n    mouse.y *= ratio;\n    \n    // Width of a single pixel \n    float pixel = zoom / iResolution.x;\n    \n    // Color init\n    vec3 col = vec3(0.);\n    float test;\n\n    vec2 n;\n    float a;\n    float d1;\n    float d2;\n\n    xy.x = abs(xy.x);\n    xy.y = abs(xy.y) - 1.;\n\n    n = getNormal(.625*sin(iTime/3.)+2.375);\n    d1 = dot(xy-vec2(1.5,0), n);\n\n    xy -= n*max(d1, 0.)*2.;\n    \n    //n = getNormal(3.*PI/4.);\n    n = getNormal(.75*sin(iTime/2.)+1.75);\n\n    xy.x = abs(xy.x);\n    d1 = dot(xy-vec2(0.5,0), n);\n    d2 = dot(xy+vec2(0.5,0), n);\n    xy.x -= 0.5;\n    xy -= n*min(d1, 0.)*2.;\n    xy += n*min(d2, 0.)*2.;\n    \n    int iter = 3;\n    float scale = 1.;\n    \n    for (int i = 0; i < iter; ++i)\n    {\n        xy *= 3.;\n        xy.x -= 1.5;\n        scale *= 3.;\n    \n        xy.x = abs(xy.x);\n        d1 = dot(xy-vec2(0.5,0), n);\n        d2 = dot(xy+vec2(0.5,0), n);\n        xy.x -= 0.5;\n        xy -= n*min(d1, 0.)*2.;\n        xy += n*min(d2, 0.)*2.;\n    }\n    \n    float ldf = length(xy - vec2(clamp(xy.x,-1., 1.), 0));\n    float line = eq(ldf/scale, 0., pixel/zoom*10.);\n    //col.rgb += line;\n    \n    xy /= scale;\n    //col.rg += xy;\n    col.rgb += texture(iChannel0, xy/6.).xyz;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926538\n\n//// Comparison functions\nfloat gt(float v1, float v2)\n{\n    return step(v2,v1);\n}\n\nfloat lt(float v1, float v2)\n{\n    return step(v1, v2);\n}\n\nfloat between(float val, float start, float end)\n{\n    return gt(val,start)*lt(val,end);\n}\n\nfloat eq(float v1, float v2, float e)\n{\n    return between(v1, v2-e, v2+e);\n}\n\nfloat s_gt(float v1, float v2, float e)\n{\n    return smoothstep(v2-e, v2+e, v1);\n}\n\nfloat s_lt(float v1, float v2, float e)\n{\n    return smoothstep(v1-e, v1+e, v2);\n}\n\nfloat s_between(float val, float start, float end, float epsilon)\n{\n    return s_gt(val,start,epsilon)*s_lt(val,end,epsilon);\n}\n\nfloat s_eq(float v1, float v2, float e, float s_e)\n{\n    return s_between(v1, v2-e, v2+e, s_e);\n}\n\nvec2 rotate(vec2 vec, float a)\n{\n    return vec2(vec.x*cos(a)-vec.y*sin(a), vec.x*sin(a)+vec.y*cos(a));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Some useful functions for snoise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n#define FBNLOOP 5\nfloat fbm(vec2 xy) // Fractal Brownian Motion\n{\n    float val = 0.;\n    float amp = 0.5;\n    float lac = 2.;\n    \n    for (int i = 0; i < FBNLOOP; i++) \n    {\n        float n = snoise(xy);\n        val += amp * (n*0.5+0.5); // Regular FBN        \n        //val += amp * abs(n); // turbulence FBN\n        //val += amp * pow(1.-abs(n), 2.); // ridge FBN\n        xy *= lac;\n        amp *= .5;\n    }\n    return val;\n}\n\nvoid fbmRain(vec2 xy, inout vec3 col, float pixel)\n{\n    vec2 q;\n    q.x = fbm(xy + iTime/10.);\n    q.y = fbm(xy + vec2(1));;\n    \n    vec2 r;\n    r.x = snoise(xy + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime);\n    r.y = snoise(xy + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n\n    float fbm = fbm(xy+q-r);\n    \n    col = mix(vec3(0.101961,0.619608,0.666667), vec3(0.666667,0.666667,0.498039),\n                clamp((fbm*fbm)*4.0,0.0,1.0));\n          \n    col = mix(col, vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n                \n    col = mix(col, vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Getting values\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // Setting up view port\n    float zoom = 10.;\n    vec2 zoomCenter = vec2(0., 0.);\n    float viewPortCenter = 0.5;\n    float ratio = iResolution.y/iResolution.x;\n    \n    // Establishing screen xy values\n    vec2 xy = (uv - viewPortCenter) * zoom + zoomCenter;\n    xy = vec2(xy.x, xy.y*ratio);\n    \n    // Establishing mouse xy values\n    mouse = (mouse - viewPortCenter) * zoom + zoomCenter;\n    mouse.y *= ratio;\n    \n    // Width of a single pixel \n    float pixel = zoom / iResolution.x;\n    \n    // Color init\n    vec3 col = vec3(0.);\n    \n    fbmRain(xy, col, pixel);\n    \n    fragColor = vec4(col,1);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}