{"ver":"0.1","info":{"id":"4sycDK","date":"1523312419","viewed":5307,"name":"ZoneAlarm","username":"dila","description":"I wanted to write something tonight but had to finish up quick. Could use some more lighting. Sorry about the stale metal texture and lack of bump mapping.","likes":55,"published":1,"flags":0,"usePreview":1,"tags":["raymarched"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float x) {\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nconst float mk = 8.0;\nvec3 tuv = vec3(0.0);\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat map(vec3 p) {\n    vec2 bt = vec2(mk, 0.0);\n    vec2 dk = floor(mod(p.xz / mk * 2.0, 2.0)) * 2.0 - 1.0;\n    \n    float t = fract(iTime * 0.5) * 2.0;\n    float dt0 = smoothstep(0.0, 1.0, clamp(t, 0.0, 1.0));\n    float dt1 = smoothstep(0.0, 1.0, clamp(t - 1.0, 0.0, 1.0));\n    \n    float d = 1000.0;\n    for (int i = 0; i < 4; ++i) {\n        float fi = float(i);\n        float xo = mod(fi, 2.0) * 2.0 - 1.0;\n        float yo = floor(fi / 2.0) * 2.0 - 1.0;\n\n        vec2 po = vec2(xo, yo) * rot(3.141592 * 0.25) * sqrt(0.5);\n\n        vec3 r = p + vec3(po.x, 0.0, po.y) * mk * 0.5;\n        \n        r.x += dk.y * dt0 * mk * 0.5;\n        r.z += dk.x * dt1 * mk * 0.5;\n\n        vec2 fp = (fract(r.xz / mk) - 0.5) * mk;\n        vec3 q = vec3(fp.x, abs(p.y) - 4.0, fp.y);\n        \n        tuv = q;\n\n        float bss = 0.23;\n        vec3 bs = vec3(mk * bss, 0.25, mk * bss);\n    \tfloat ba = udRoundBox(q - bt.xyx * 0.25, bs, 0.125);\n    \tfloat bb = udRoundBox(q + bt.xyx * 0.25, bs, 0.125);\n        \n        vec3 cbs = vec3(0.4, 100.0, 0.4);\n        vec3 sf = vec3(-1.0, 0.0, 1.0) * 0.25;\n        vec3 dp = vec3(q.x, p.y, q.z);\n        \n        vec3 ca = dp + bt.xyx * sf;\n        float da = udRoundBox(ca, cbs, 0.25);\n\n        vec3 cb = dp - bt.xyx * sf;\n        float db = udRoundBox(cb, cbs, 0.25);\n        \n        float gb = min(ba, bb);\n        float pb = min(da, db);\n        \n    \td = min(d, min(gb, pb));\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        t += map(o + r * t);\n    }\n    return t;\n}\n\nvec3 tex(vec3 p) {\n    vec3 ta = texture(iChannel0, p.yz).xyz;\n    vec3 tb = texture(iChannel0, p.xz).xyz;\n    vec3 tc = texture(iChannel0, p.xy).xyz;\n    return (ta * ta + tb * tb + tc * tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.12));\n    vec3 o = vec3(mk * 0.5, 0.0, 0.0);\n    \n    r.xy *= rot(3.141592 * -0.125);\n    r.xz *= rot(iTime * 0.5);\n\n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 tc = tuv;\n    vec3 sn = normal(w);\n    float aoc = map(w + sn * 1.3);\n    \n    vec3 lp = vec3(mk, 1.5, mk);\n    \n    vec3 lv = w - lp;\n    float ld = length(lv);\n    lv /= ld;\n    float lk = max(dot(lv, -sn), 0.0);\n    lk /= 1.0 + ld * 0.01;\n    \n    float lt = trace(w + sn * 0.1, -lv);\n    float s = max(sign(lt - ld), 0.0);\n    \n    float f = 1.0 / (1.0 + t * t * 0.01);\n    vec3 ref = reflect(lv, sn);\n    float sp = pow(abs(dot(ref, r)), 12.0) * f * lk;\n    \n    float fs = mix(0.2, 1.0, s) * lk;\n    vec3 spc = sp * vec3(0.0, 1.0, 1.0);\n    vec3 fc = tex(tc * 0.25) * fs * f * aoc + spc;\n\n    fragColor = vec4(sqrt(fc), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}