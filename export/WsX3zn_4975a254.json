{"ver":"0.1","info":{"id":"WsX3zn","date":"1544648644","viewed":101,"name":"sphere Demo for peeps","username":"billyboy123","description":"demo of a 2d rendered sphere, no raymarching, using some simple maths","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","lighting","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Radius 0.5f\n#define lighting vec3(1,5,2)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    float PointDistance = length(uv);\n    float Dist = PointDistance / Radius;\n    //float Circle = 1.0 - clamp(floor(Dist), 0.0, 1.0);\n\tfloat Z = sqrt(1.0-Dist*Dist);\n    vec3 Normals = vec3(uv.xy / Radius, Z);\n    float atten = dot(Normals, normalize(lighting)); //* Circle;\n    \n\n    // Output to screen\n    fragColor = vec4(atten, atten, atten,1.0);\n}","name":"Image","description":"","type":"image"}]}