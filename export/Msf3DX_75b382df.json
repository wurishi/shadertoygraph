{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const int MAX_STEPS = 500;\nconst float MAX_DIST = 10.0;\n\nfloat lowFreq = 0.0;\nfloat midFreq = 0.0;\nfloat bassEnergy = 0.0;\n\nfloat myShape( vec3 p )\n{\n  float pr = length(p);\n  float r = 2.0;\n  float lowdisp =  0.1*sin(p.y*80.0*lowFreq);\n  float middisp =  0.1*cos(p.x*80.0*midFreq);\n  float highdisp = 0.0;\n  float disp = lowdisp + middisp + highdisp;\n  return pr - r -5.0*lowFreq -disp;\n}\n\nfloat myFloor( vec3 p )\n{\n  float pd = p.y+2.0;\n  return pd + bassEnergy*(sin(p.x*5.0)+sin(p.z*5.0));\n}\n\nfloat fdist( vec3 p )\n{\n  float dfloor = myFloor(p);\n  float dmyshape = myShape(p);\n  return min(dfloor, dmyshape);\n}\n\nvec3 fnorm( vec3 p )\n{\n  vec2 dd = vec2(0.0001,0.0);\n  return normalize(vec3(\n    fdist(p+dd.xyy) - fdist(p-dd.xyy),\n    fdist(p+dd.yxy) - fdist(p-dd.yxy),\n    fdist(p+dd.yyx) - fdist(p-dd.yyx)\n    ));\n}\n\nvec4 skyColor( vec2 pos )\n{\n  float fftx = pos.x*0.2+0.5;\n  fftx -= mod(fftx,0.02);\n  float vol = texture(iChannel0, vec2(fftx,0.4)).x;\n  float line = 10.0*min(max(vol - pos.y, 0.0),1.0);\n  vec3 c = vec3(line*0.5,line, lowFreq*10.0)*0.5;\n  return vec4(c,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  lowFreq = texture(iChannel0, vec2(0.1,0.4)).x/10.0;\n  midFreq = texture(iChannel0, vec2(0.4,0.4)).x/10.0;\n  bassEnergy = texture(iChannel0, vec2(0.1,0.0)).x/10.0;\n  \n  // Cast the ray into the scene\n  vec2 pos = 2.0*fragCoord.xy/iResolution.yy;\n  pos += vec2(-2.4,-1.0);\n  vec3 ro = vec3(0.0,0.0,-5.0);\n  vec3 rd = normalize(vec3(pos.xy, -4.0)-ro);\n  \n  // Marching\n  float d=0.0,fd;\n  int steps = 0;\n  for (int i=0;i<MAX_STEPS;i++) {\n    fd = fdist( ro+d*rd );\n    d += max(fd,0.01);\n    if (fd<0.0) break;\n\tsteps = i;\n  }\n  \n  if (steps == MAX_STEPS || d >= MAX_DIST) {\n    fragColor = skyColor(pos);\n    return;\n  }\n  \n  // Intersection data\n  vec3 rp = ro+d*rd;\n  vec3 n = fnorm( rp );\n  \n  // Lighting\n  vec3 lpos = vec3(10.0,10.0,-10.0);\n  vec3 ldir = normalize(lpos - rp);\n  float diffuse = max(dot(n,ldir),0.0);\n  float spec = pow(dot(normalize(ldir-rd), n), 32.0);\n  \n  float c = 0.5*diffuse+0.5*spec;\n  fragColor = vec4(c,c,c, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Msf3DX","date":"1380459662","viewed":246,"name":"Audioglob","username":"SudoNhim","description":"My first visualizer, ported to WebGL\nI'll be learning on ShaderToy now, as the WebGL finally works on my machine. You guys are inspiring :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","visualizer"],"hasliked":0,"parentid":"","parentname":""}}