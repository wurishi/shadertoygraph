{"ver":"0.1","info":{"id":"lcjBRy","date":"1725140081","viewed":54,"name":"cut columns terrain","username":"jt","description":"Terrain made of a heightmap placing voxel columns cut at random angles.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","terrain","raymarch","voxels","sdf","random","column","distance","heightmap","rectangular","dda","hybrid","euclidean","cut","exact","plugin"],"hasliked":0,"parentid":"lXGGR3","parentname":"raymarch voxels with color"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lcjBRy cut columns terrain, 2024 by jt\n// shards: https://www.shadertoy.com/view/Mf2fzR rectangular column cut by plane\n// using https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Terrain made of a heightmap placing voxel columns cut at random angles.\n\n// tags: 3d, terrain, raymarch, voxels, sdf, random, distance, heightmap, dda, hybrid, plugin, euclidean, exact, cut, column, rectangular, cuboid, shards\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample neighbor voxels (slow!)\n//#define HIGH_QUALITY\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat box(vec2 p, vec2 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    vec3 color;\n    float dist;\n};\n\nfloat line(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = dot(pa,ba)/dot(ba,ba);\n    return length(pa - ba*h);\n}\n\nvec3 point_from_three_planes(vec4 p0, vec4 p1, vec4 p2) // https://www.shadertoy.com/view/McXyDM intersection point from 3 planes (jt)\n{\n    // wxMaxima solve([n_0_x*x+n_0_y*y+n_0_z*z=n_0_w,n_1_x*x+n_1_y*y+n_1_z*z=n_1_w,n_2_x*x+n_2_y*y+n_2_z*z=n_2_w],[x,y,z]); then manually simplified\n    return\n        vec3 // can this be further compactified? (perhaps by using determinant?)\n        (\n            dot(p0.wyz,cross(p1.wyz,p2.wyz)),\n            dot(p0.xwz,cross(p1.xwz,p2.xwz)),\n            dot(p0.xyw,cross(p1.xyw,p2.xyw))\n        )\n        /\n        dot(p0.xyz,cross(p1.xyz,p2.xyz));\n}\n\nfloat plane(vec3 n, vec3 q, vec3 p)\n{\n    return dot(n,p) - dot(n,q);\n}\n\nfloat cut_column(vec3 p, vec3 n) // https://www.shadertoy.com/view/Mf2fzR rectangular column cut by plane (jt)\n{\n    bvec3 oct = greaterThanEqual(p, vec3(0)); // octant of point relative to center [0,1]\n    ivec3 dir = ivec3(oct) * 2 - 1; // direction of octant [-1,+1]\n    vec3 x0 = normalize(vec3(+dir.x,0,0));\n    vec3 y0 = normalize(vec3(0,+dir.y,0));\n    vec3 z0 = normalize(n)*float(dir.z);\n\n    vec3 q = point_from_three_planes(vec4(x0,1),vec4(y0,1),vec4(z0,1)); // vertex\n    vec3 xy0 = normalize(cross(x0,y0));\n    vec3 yz0 = normalize(cross(y0,z0));\n    vec3 zx0 = normalize(cross(z0,x0));\n    vec3 yx0 = -xy0;\n    vec3 zy0 = -yz0;\n    vec3 xz0 = -zx0;\n\n    vec3 xyx = normalize(cross(xy0,x0));\n    vec3 yzy = normalize(cross(yz0,y0));\n    vec3 zxz = normalize(cross(zx0,z0));\n\n    vec3 yxy = normalize(cross(yx0,y0));\n    vec3 zyz = normalize(cross(zy0,z0));\n    vec3 xzx = normalize(cross(xz0,x0));\n\n    bvec3 sgn =\n        greaterThanEqual\n        (\n            vec3 // distance to three nearest halfspaces in every direction\n            (\n                plane(xy0, q, p),\n                plane(yz0, q, p),\n                plane(zx0, q, p)\n            ),\n            vec3(0)\n        ); // outside of halfspace?\n\n    float flip = oct.x != oct.y != oct.z ? +1.0 : -1.0;\n\n    if(flip * plane(xy0, q, p) < 0.0 && plane(xyx, q, p) > 0.0 && plane(yxy, q, p) > 0.0) return line(p, q-xy0,q+xy0);\n    if(flip * plane(yz0, q, p) < 0.0 && plane(yzy, q, p) > 0.0 && plane(zyz, q, p) > 0.0) return line(p, q-yz0,q+yz0);\n    if(flip * plane(zx0, q, p) < 0.0 && plane(zxz, q, p) > 0.0 && plane(xzx, q, p) > 0.0) return line(p, q-zx0,q+zx0);\n\n    if(sgn == bvec3(oct.x != oct.y != oct.z))\n        return length(p-q);\n\n    return\n        max\n        (\n            max\n            (\n                plane(x0, q, p),\n                plane(y0, q, p)\n            ),\n            plane(z0, q, p)\n        );\n}\n\nvec2 polar(float t)\n{\n    return vec2(cos(t), sin(t));\n}\n\nfloat wave(vec2 p, vec2 f)\n{\n    return sin(2.0*pi*p.x/f.x)*cos(2.0*pi*p.y/f.y);\n}\n\nfloat height(vec2 p)\n{\n    float l = length(p);\n    //return wave(p, vec2(40,40)) + wave(p, vec2(20,40));\n    return 1.0*(0.5*cos(-2.0*pi*l/10.0)+wave(p, vec2(20,20)));\n    //return texture(iChannel0, p*0.01).x - 0.5;\n}\n\nresult map(ivec2 v, vec3 l) // PLACE SDF TO DEBUG HERE\n{\n    float h = height(vec2(v))*2.0-2.0;\n    float t = pi * 2.0 * iTime / 24.0;\n    //vec3 n = vec3(polar(t*3.0), 1.0);\n    vec3 n = vec3(polar(tau*hash12(vec2(v)*123.456)), 1.0);\n    //vec3 n = hash32(vec2(v));\n    return result(vec3(hash32(vec2(v))),cut_column((l-0.5)*2.0-vec3(0,0,h), n)/2.0);\n}\n\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(vec3(0), DIST_MAX);\n    ivec2 s = ivec2(step(0.5, fract(p.xy)));\n    ivec2 o;\n    for(o.y = s.y-1; o.y < s.y+1; o.y++)\n        for(o.x = s.x-1; o.x < s.x+1; o.x++)\n        {\n            result r = map(ivec2(floor(p.xy))+o, vec3(fract(p.xy)-vec2(o),p.z));\n            if(r.dist < d.dist)\n                d = r;\n        }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec2(floor(p.xy)), vec3(fract(p.xy),p.z));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec2 sgn(vec2 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec2(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec2 sd = (sgn(rd.xy)*0.5 - (fract(p.xy) - 0.5))/rd.xy; // distances to voxel sides / walls\n            vec2 n = step(sd.xy, sd.yx); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, n) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    //return result(h.color, t); // stop on running out of iterations\n    return result(h.color, t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n#ifdef HIGH_QUALITY\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n#endif\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0);\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = mix(vec3(0,0.25,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        //color *= (ambient * calcAO(dst, n) + brightness); // hard AO\n        color *= (ambient * mix(0.25,1.0,calcAO(dst, n)) + brightness); // soft AO\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}