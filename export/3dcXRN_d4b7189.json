{"ver":"0.1","info":{"id":"3dcXRN","date":"1572579167","viewed":179,"name":"Interference Pattern Reflections","username":"Hotrhodium","description":"Making fake wave reflections. The waves do not maintain independent velocity but are relative to the movement of the center point.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["reflections","wavepatterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/vec2(iResolution.y);\n    int i = 0;\n    const int SquarCount = 5;\n    float freq = 50.0;\n    float yCal = 0.0;\n    float Fade = 1.48;\n    \n    yCal = iResolution.x/iResolution.y;\n    \n    vec2 CirCen0[9];\n    CirCen0[0] = vec2(0.9-(cos((iTime+5.0)*0.27)*0.9),0.5+(0.5*cos(iTime*.33)));\n    CirCen0[1] = vec2(1,-1) * CirCen0[0];\n    CirCen0[2] = CirCen0[1]+vec2(0,2);\n    CirCen0[3] = vec2(-1,1) * CirCen0[0];\n    CirCen0[4] = CirCen0[3]+vec2((yCal)*2.0,0);\n\n    vec2 CirCen1[9];\n    CirCen1[0] = vec2(0.9-(cos(iTime*0.59)*0.9),0.5+(0.5*cos((iTime+5.0)*.41)));\n    CirCen1[1] = vec2(1,-1) * CirCen1[0];\n    CirCen1[2] = CirCen1[1]+vec2(0,2);\n    CirCen1[3] = vec2(-1,1) * CirCen1[0];\n    CirCen1[4] = CirCen1[3]+vec2((yCal)*2.0,0);\n    \n    float MyDist = 0.0;\n    float Darkness = 0.0;\n    float Adj = float(SquarCount) * 2.0;\n    \n    for(int i=0;i<SquarCount;i++)\n    {\n        MyDist = distance(CirCen0[i],uv);\n        if (MyDist < Fade)\n        {    \n        \tDarkness += (cos((MyDist*freq)-iTime*10.0)/(Adj))*(Fade-MyDist);\n        }\n    }\n    for(int i=0;i<SquarCount;i++)\n    {\n        MyDist = distance(CirCen1[i],uv);\n        if (MyDist < Fade)\n        {    \n        \tDarkness += (cos((MyDist*freq)-iTime*10.0)/(Adj))*(Fade-MyDist);\n        }\n    \n    }\n\t\n\tDarkness = Darkness+0.5;\n    fragColor = vec4(vec3(Darkness),1.0);\n}","name":"Image","description":"","type":"image"}]}