{"ver":"0.1","info":{"id":"dlK3R1","date":"1683586053","viewed":122,"name":"Orthographic 3D","username":"ChunderFPV","description":"3D vectors without perspective view.  Use mouse to rotate.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","simple","lines","vector","orthographic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Q(p1, p2) max(0., 1.-smoothstep(0., px*3., L(u, P(p1, p), P(p2, p))))\n\n// sdLine from https://iquilezles.org/articles/distfunctions2d/\nfloat L(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a, ba = b-a;\n    return length(pa - ba*clamp(dot(pa,ba)/dot(ba,ba), 0., 1.));\n}\n\n// project xyz to xy: based on an old JS function I wrote 10 years ago\n// works in conjunction with xyz coords & line 25\nvec2 P(vec3 u, vec4 a)\n{\n\treturn vec2( (u.x*a.z)+(u.z*a.x), (u.y*a.w)+(u.z*a.y*a.z)-(u.x*a.y*a.x) );\n}\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec2 R = iResolution.xy,\n         u = (U-.5*R)/R.y*4., // screen coords\n         m = clamp( (iMouse.xy-.5*R)/R.y*2., -1., 1.); // mouse coords\n    vec3 c = vec3(0),\n         cube = c,\n         oct = c;\n    vec4 p = vec4(m, sqrt(1.-m*m)); // perspective from mouse\n    float px = length(fwidth(u))/1.414; // pixel radius\n    \n    // white line on mouse click\n    if (iMouse.z > 0.) c += Q( vec3(0), vec3(0, 0, 1) );\n    \n    cube += Q( vec3(1), vec3(-1,1,1) )\n          + Q( vec3(1), vec3(1,-1,1) )\n          + Q( vec3(1), vec3(1,1,-1) )\n          + Q( vec3(-1), vec3(1,-1,-1) )\n          + Q( vec3(-1), vec3(-1,-1,1) )\n          + Q( vec3(-1), vec3(-1,1,-1) )\n          + Q( vec3(1,1,-1), vec3(-1,1,-1) )\n          + Q( vec3(-1,1,-1), vec3(-1,1,1) )\n          + Q( vec3(-1,1,1), vec3(-1,-1,1) )\n          + Q( vec3(-1,-1,1), vec3(1,-1,1) )\n          + Q( vec3(1,1,-1), vec3(1,-1,-1) )\n          + Q( vec3(1,-1,-1), vec3(1,-1,1) );\n    c += cube*vec3(1, .5, 0); // color & add\n    \n    oct += Q( vec3(0,1,0), vec3(0,0,1) )\n         + Q( vec3(0,1,0), vec3(0,0,-1) )\n         + Q( vec3(0,1,0), vec3(1,0,0) )\n         + Q( vec3(0,1,0), vec3(-1,0,0) )\n         + Q( vec3(0,-1,0), vec3(0,0,1) )\n         + Q( vec3(0,-1,0), vec3(0,0,-1) )\n         + Q( vec3(0,-1,0), vec3(1,0,0) )\n         + Q( vec3(0,-1,0), vec3(-1,0,0) )\n         + Q( vec3(0,0,1), vec3(1,0,0) )\n         + Q( vec3(0,0,1), vec3(-1,0,0) )\n         + Q( vec3(0,0,-1), vec3(1,0,0) )\n         + Q( vec3(0,0,-1), vec3(-1,0,0) );\n    c += oct*vec3(1, .1, 0); // color & add\n    \n    C = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}