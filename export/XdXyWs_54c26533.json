{"ver":"0.1","info":{"id":"XdXyWs","date":"1490214673","viewed":241,"name":"Bloom Chin","username":"jukniz","description":"Bloom","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy) / iResolution.xy  ;\n \n\tfragColor = texture ( iChannel1, uv);\n    \n\tvec4 blurredImg = texture ( iChannel0, uv);\n    \n    \n    fragColor += blurredImg;\n    \n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LIGHT_TRESHOLD 0.289\n\n#define LUMINANCE_MULT 1.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy) / iResolution.xy  ;\n \n\tfragColor = texture ( iChannel0, uv);\n    \n\t\n    vec4 fraglight = fragColor;\n    \n    \n    //calculate luminance\n    float luminance = (fraglight.xyz.r*0.2126+fraglight.xyz.g*0.7152+fraglight.xyz.b*0.0722)/3.0;\n    \n\n    //get brighter pixels\n    if ( luminance > LIGHT_TRESHOLD) {\n           \n        fragColor.xyz.rgb = vec3( fraglight.xyz.r*LUMINANCE_MULT,fraglight.xyz.g*LUMINANCE_MULT,fraglight.xyz.b*LUMINANCE_MULT);\n           \n    }else{\n        fragColor.xyz.rgb = vec3(0.0);\n    }\n    \n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define RADIUS 20.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   //Vertical blur\n\n    float horizontalKernel = 0.123317;\n    float pointKernel = 0.195346;\n    float diagonalKernel = 0.077847;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture ( iChannel0, uv);\n    float height = 1.0/iResolution.y;  \n\n    vec4 pixel = vec4(0.0);\n    vec4 tempColor = vec4(0.0);\n    float divisor = 0.0;\n    float kernelValue = 0.12;\n\n    //calculate value of the selected pixel\n\n    for ( float i = -RADIUS ; i <= RADIUS ; i++){   \n        //select the pixel\n\n       pixel = texture(iChannel0 , uv + vec2(0.0  , i * height));\n\n        if ( i == 0.0){\n            kernelValue = pointKernel;\n        }else{\n            kernelValue = horizontalKernel;\n        }\n        //apply weight\n       tempColor += pixel * kernelValue;\n        //save the amount of weight used\n       divisor += kernelValue;\n    }\n\n    //apply to the actual pixel\n   fragColor.xyz.rgb = vec3 ( tempColor.xyz.r/divisor,\n                              tempColor.xyz.g/divisor,\n                              tempColor.xyz.b/divisor);\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define RADIUS 20.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //horizontal blur\n    \n    float horizontalKernel = 0.123317;\n    float pointKernel = 0.195346;\n    float diagonalKernel = 0.077847;\n   \n    float height = 1.0/iResolution.y;  \n    vec4 pixel = vec4(0.0);\n    vec4 tempColor = vec4(0.0);\n    \n    float divisor = 0.0;\n    \n    float kernelValue = 0.12;\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    fragColor = texture ( iChannel0, uv );\n    \n    \n    //calculate value of the selected pixel\n    for ( float i = -RADIUS ; i <= RADIUS ; i++){   \n        \n        //select the pixel\n       pixel = texture(iChannel0 , uv + vec2(i * height  , 0.0));\n        \n        \n        if ( i == 0.0){\n            kernelValue = pointKernel;\n        }else{\n            kernelValue = horizontalKernel;\n        }\n        \n      \n        //apply weight\n       tempColor += pixel * kernelValue;\n        //save the amount of weight used\n       divisor += kernelValue;\n        \n        \n    }\n    \n    //apply to the actual pixel\n   fragColor.xyz.rgb = vec3 ( tempColor.xyz.r/divisor,\n                              tempColor.xyz.g/divisor,\n                              tempColor.xyz.b/divisor);\n}\n","name":"Buf C","description":"","type":"buffer"}]}