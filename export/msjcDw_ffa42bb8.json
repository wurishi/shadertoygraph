{"ver":"0.1","info":{"id":"msjcDw","date":"1687796975","viewed":41,"name":"alternation maps","username":"cxm","description":"I think normal can't be close alternation loop when the axies was -1 to 1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","map"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define TAU 6.2831852\n#define T( s ) fract( iTime * s ) * PI * 4.\n#define calcLine( a ) step( mod( a, .5 ) - .25, 0. )\n#define count 4.\n\n\nfloat smin (float a, float b, float r)\n{\n    float h = clamp(.5+.5*(b-a)/r,0.,1.);\n    return mix(b, a, h) - r*h*(1.-h);\n}\n\nfloat smax(float a, float b, float c) {\n    return -smin(-a, -b, c);\n}\n\nmat2 rotation(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat deg2Rad(float deg) {\n  // return deg * PI / 180.;\n  return radians(deg);\n}\n\nfloat calcSegment( vec3 p, float r ){\n    float d = 5.;\n    \n    p.xz *= rotation( r );\n    \n    p.x += cos(p.y * PI * 1.) * .4;\n    p.z += sin(p.y * PI * 1.) * .4;\n    \n    d = min(\n        d,\n        max( length( p.xz ) - .1, abs( p.y ) - 1. )\n    );\n    \n    return d;\n}\n\nfloat calcSphere( vec3 p ){\n    p.xz *= rotation( T( .05 ) );\n    return length( p ) - .25;\n}\n\nfloat map(vec3 p)\n{\n    \n    float d = 5.;\n    \n    for( float i = 0.; i < count; i++ ){\n        \n        d = min(\n            d,\n            calcSegment( p, deg2Rad((360. / count) * i ) )\n        );\n        \n    }\n    \n    d = smin(\n        d,\n        calcSphere( p ),\n        .0\n    );\n\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos) {\n    vec2 e = vec2(1.0, -1.0) * 0.5773;\n    const float eps = 0.0005;\n    return normalize(e.xyy * map(pos + e.xyy * eps) +\n        e.yyx * map(pos + e.yyx * eps) +\n        e.yxy * map(pos + e.yxy * eps) +\n        e.xxx * map(pos + e.xxx * eps));\n}\n\nvec3 raymarching( vec3 ro, vec3 rd ){\n    \n    float t = 0.,\n          dist = 0.;\n    \n    vec3 pos = vec3( 0. );\n    \n    for( int i = 0; i < 64; i++ ){\n        \n        pos = ro + rd * t;\n        pos.xz *= rotation( T( .05 ) );\n        dist = map( pos );\n        \n        if( t > 1e3 ){\n            break ;\n        }\n        \n        t += dist;\n    }\n    \n    \n    if( dist < 1e-3 ){\n        \n        vec3 nor = calcNormal(pos);\n\n        float dif = clamp(dot(nor, vec3(.1, 1., -.6)), 0.0, 1.0);  \n        \n        vec3 b = nor;\n        \n        if( map( pos ) == calcSphere( pos ) ){\n            b.xz *= rotation( -T( .1 ) );   \n        }\n        \n        return vec3( .5 ) * dif + calcLine( b.x * 2. ) * .7;\n        \n    }\n        \n    return vec3( 0. );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //uv = (uv - .5) * 2.;\n\n    //uv.x *= iResolution.x / -iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    vec3 ro = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 2.0, 1.0);\n\tvec3 rd = vec3(0.0, 0.0, -1.0);\n\n    \n    col = raymarching( ro, rd );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}