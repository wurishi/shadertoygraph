{"ver":"0.1","info":{"id":"3tGXzK","date":"1583097756","viewed":68,"name":"Blending shapes","username":"ti","description":"Smooth minimum functions comparison.\n\nsmin code from iq\ndraw code from hughsk","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* ref.: https://hughsk.io/fragment-foundry/chapters/09b-blending-shapes.html\n *       https://iquilezles.org/articles/smin\n *       https://www.shadertoy.com/view/XsyGRW\n */\n\n#define myTime iTime * 8.0\n\n// 0 = Polynomial #1 (quadratic)\n// 1 = Polynomial #2 (cubic)\n// 2 = Exponential\n// 3 = Power\n#define FUNCTION -1\n\n#if FUNCTION == 0\n  #define SMIN(a, b) polynomial_smin(a, b, 0.1)\n#elif FUNCTION == 1\n  #define SMIN(a, b) cubic_smin(a, b, 0.1)\n#elif FUNCTION == 2\n  #define SMIN(a, b) exponential_smin(a, b, 32.0)\n#elif FUNCTION == 3\n  #define SMIN(a, b) power_smin(a, b, 8.0)\n#else\n  #define SMIN(a, b) min(a, b)\n#endif\n\nvec3 draw_line(float d, float thickness) {\n  const float aa = 3.0;\n  return vec3(smoothstep(0.0, aa / iResolution.y, max(0.0, abs(d) - thickness)));\n}\n\nvec3 draw_line(float d) {\n  return draw_line(d, 0.0025);\n}\n\nfloat draw_solid(float d) {\n  return smoothstep(0.0, 3.0 / iResolution.y, max(0.0, d));\n}\n\nvec3 draw_distance(float d, vec2 p) {\n  float t = clamp(d * 0.85, 0.0, 1.0);\n  vec3 grad = mix(vec3(1, 0.8, 0.5), vec3(0.3, 0.8, 1), t);\n\n  float d0 = abs(1.0 - draw_line(mod(d + 0.1, 0.2) - 0.1).x);\n  float d1 = abs(1.0 - draw_line(mod(d + 0.025, 0.05) - 0.025).x);\n  float d2 = abs(1.0 - draw_line(d).x);\n  vec3 rim = vec3(max(d2 * 0.85, max(d0 * 0.25, d1 * 0.06125)));\n\n  grad -= rim;\n  grad -= mix(vec3(0.05, 0.35, 0.35), vec3(0.0), draw_solid(d));\n\n  return grad;\n}\n\nfloat polynomial_smin(float a, float b, float k) {\n  // float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  // return mix(b, a, h) - k * h * (1.0 - h);\n  float h = max(k - abs(a - b), 0.0) / k;\n  return min(a, b) -  h * h * k * (1.0 / 4.0);\n}\n\nfloat cubic_smin(float a, float b, float k) {\n  float h = max(k - abs(a - b), 0.0) / k;\n  return min(a, b) -  h * h * h * k * (1.0 / 6.0);\n}\n\nfloat exponential_smin(float a, float b, float k) {\n  float res = exp(-k * a) + exp(-k * b);\n  return log(res) / k;\n}\n\nfloat power_smin(float a, float b, float k) {\n  a = pow(a, k);\n  b = pow(b, k);\n  return pow((a * b) / (a + b), 1.0 / k);\n}\n\nfloat distanceField(vec2 point, vec2 origin1, vec2 origin2, float radius) {\n  float d1 = length(point - origin1) - radius;\n  float d2 = length(point - origin2) - radius;\n  return SMIN(d1, d2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0; // [-1, 1]\n    uv.x *= iResolution.x / iResolution.y;\n  \n    vec2 origin = vec2(sin(myTime * 0.11) * 0.3);\n    float radius = (sin(myTime * 0.25) * 0.5 + 0.5) * 0.3 + 0.05;\n    float dist = distanceField(uv, origin, -origin, radius);\n\t\n    fragColor = vec4(draw_distance(dist, uv), 1.0);\n}","name":"Image","description":"","type":"image"}]}