{"ver":"0.1","info":{"id":"4cfyDB","date":"1721493228","viewed":99,"name":"Belousov-Zhabotinsky automaton","username":"draradech","description":"Belousov-Zhabotinsky reaction, cellular automaton.\n\nTakes about a minute (depending on framerate) to reach steady state (the spiral pattern).\nFramerate is slowed down on purpose, set SLOWDOWN in Common to 1 for full speed.\nClick to reset.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["2d","ca","cellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 2\n\n#define V 12.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2(fragCoord);\n    px = px / SCALE;\n\tfloat v = texelFetch(iChannel0, px, 0).x / (V + 2.);\n    fragColor = vec4(pow(v, 1.0), pow(v, 2.5), pow(v, 6.0), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SLOWDOWN 4\n\n#define V 12.\n#define G 3.\n\nfloat wrapFetch(in ivec2 p)\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p + r) % r;\n    return texelFetch(iChannel0, p, 0 ).x;\n}\n\nfloat frand(in vec2 c)\n{\n    return fract(sin(c.x + 1000. * fract(sin(c.y + 1000. * fract(sin(iDate.w) * 1000.)) * 1000.)) * 1000.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 px = ivec2(fragCoord);\n\n    if (iFrame == 0 || iMouse.z > 0.)\n    {\n        fragColor.x = step(0.9999, frand(fragCoord));\n        return;\n    }\n    \n    if (iFrame % SLOWDOWN != 0)\n    {\n        fragColor.x = wrapFetch(px); \n        return;\n    }\n    \n    float sum = 0.;\n    float nonzero = 0.;\n    float self = wrapFetch(px);\n\n    for (int dx = -1; dx <= 1; dx++)\n    {\n        for (int dy = -1; dy <= 1; dy++)\n        {\n            if (dx == 0 && dy == 0) continue;\n            float n = wrapFetch(px + ivec2(dx, dy));\n            sum += n;\n            if (n > 0.) nonzero++;\n        }\n    }\n\n    if (self >= V)\n    {\n        fragColor.x = 0.;\n    }\n    else if (self > 0.)\n    {\n        fragColor.x = min(floor(sum / 8.) + G, V);\n    }\n    else\n    {\n        fragColor.x = nonzero;\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}","name":"Common","description":"","type":"common"}]}