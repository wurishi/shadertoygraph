{"ver":"0.1","info":{"id":"lXjyD1","date":"1727263141","viewed":13,"name":"Checkered Flag BG Diag","username":"cslowik","description":"Stylized checkered flag shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graphic"],"hasliked":0,"parentid":"M3jyD1","parentname":"Checkered Flag BG"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to rotate the UV coordinates\nmat2 rotate2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c); // 2x2 rotation matrix\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Center the UV coordinates around (0,0)\n    uv -= 0.5;\n    \n    // Slowly move up and to the left\n    uv.y -= iTime * 0.02;\n    uv.x += iTime * 0.01;\n\n    // Rotate the UV coordinates by 45 degrees to achieve diagonal movement\n    uv = rotate2D(0.485398) * uv; // 0.785398 radians = 45 degrees\n\n    // Apply a waving effect along the x-axis (now diagonal due to rotation)\n    float wave = sin(uv.x * 4.0 + iTime * -1.8) * 0.05; // wave strength and speed\n    uv.y += wave; // Modify the y-coordinate to make it wave\n\n    // Scale the UV coordinates for the checkered pattern\n    uv *= 5.0;\n\n    // Create the checkered pattern using modulus\n    float checker = mod(floor(uv.x) + floor(uv.y), 2.0);\n    \n    \n    // Use smoothstep for anti-aliasing and alternate colors for the checkered effect\n    vec3 color = mix(vec3(1.0), vec3(0.0), checker * 0.1 - (wave / 2.0));\n\n\n    // Output the color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}