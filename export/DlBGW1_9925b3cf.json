{"ver":"0.1","info":{"id":"DlBGW1","date":"1677561629","viewed":129,"name":"Hola Shaders con sonido","username":"degarmel","description":"un shader simple que reacciona al sonido de los canales","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["audioreactive","begginer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\nfloat circulo(vec2 actual, vec2 cen, float r, float al)\n{\n   \n   float dis = length(actual-cen);\n   if(dis<r) return al;\n   return 0.0;\n}\n\nfloat circle(vec2 uv,vec2 cen, float r, float blur){\n    float d = length(uv-cen);\n    float c = smoothstep(r, r-blur, d);\n    return c;\n}\n\nfloat square(vec2 uv, float size, float blur) {\n    vec2 center = vec2(0.5);\n    vec2 halfSize = vec2(size / 2.0);\n    vec2 dist = abs(uv - center) - halfSize + vec2(blur);\n\n    float squareValue = smoothstep(0.0, blur, max(dist.x, dist.y));\n\n    return squareValue;\n}\n\nfloat drawCircles(vec2 uv,  float radius, float blur, vec2 center, float bigR, int numCircles, float vel) {\n    float circleValue = 0.0;\n    for(int i = 0; i < numCircles; i++) {\n        float angle = TIME * 2.0 * PI * vel + TAU / float(numCircles) * float(i);\n        vec2 circleCenter = center + vec2(bigR * cos(angle), bigR * sin(angle));\n        circleValue += circle(uv, circleCenter, radius, blur);\n    }\n    return circleValue;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   // uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft_x  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n    \n    float fft_altos= texelFetch( iChannel0, ivec2(0,0), 0 ).x;\n    \n    float fft_bajos= texelFetch( iChannel0, ivec2(0,0), 0 ).x;\n    \n    float radius = 0.09*fft_altos;\n    float blur = 0.06*fft_bajos;\n    float bigR = 0.05*fft_bajos;\n    vec2 center = vec2(0.5);\n        center.x*=iResolution.x / iResolution.y;\n    \n\n    float circleValue = drawCircles(uv, radius, blur, center, 0.04, 6, 0.4);\n        \n        for(float i = 1. ; i<= 15. ; i++){\n            circleValue += drawCircles(uv, radius-0.001*i, blur, center, bigR+0.05*i, 3*int(i),0.005*i);\n        } \n        \n    fragColor = vec4(circleValue, 0.0, 0.0, 1.0);\n        \n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}