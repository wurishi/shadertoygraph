{"ver":"0.1","info":{"id":"mdfcRr","date":"1686512231","viewed":33,"name":"my attempt at planets","username":"hammy","description":"planets based on some old art I used to do","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["planets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\nvec3 background = vec3(0.204, 0.239, 0.275);\n\nvoid planetTypeA(inout vec3 color, vec2 uv, vec3 primary, vec3 secondary, float rad, float rSize, vec3 noise){\n    float v = step(0.2, sdCircle(uv, rad * 2.0));\n    if (v == 1.0) {\n        return; \n    } \n\n    float row = floor((uv.y) * rSize)/rSize;\n\n    float r = 1.0/(2.0 * rSize);\n\n    vec2 edgeCenter = uv - vec2(perlin_noise(row * noise.x + noise.z)*noise.y, row + r);\n\n    v = sdCircle(edgeCenter, r);\n\n    v = step(0.0, -v);\n\n    color = mix(primary, secondary, max(v, step(0.0, -edgeCenter.x)));\n    return;\n}\n\nvoid planetTypeB(inout vec3 color, vec2 uv, vec3 primary, vec3 secondary, float rad, float rSize, vec3 noise){\n    float v = step(0.2, sdCircle(uv, rad * 2.0));\n    if (v == 1.0) {\n        return; \n    } \n\n    float row = floor((uv.y) * rSize)/rSize;\n\n    float r = 1.0/(2.0 * rSize);\n\n    vec2 edgeCenter = uv - vec2(perlin_noise(row * noise.x + noise.z)*noise.y, row + r);\n\n    v = sdCircle(edgeCenter, r);\n    \n    if ((mod(abs(row * rSize), 2.0) * 2.0) - 1.0 == -1.0){\n        v = step(0.0, -v);\n        color = mix(secondary, primary, max(v, step(0.0, edgeCenter.x)));\n        return;\n    }\n    \n    v = step(0.0, v);\n    color = mix(primary, secondary, min(v, step(0.0, edgeCenter.x)));\n    return;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 color = background * 0.2;\n    \n    // stars\n    color += (random1(uv.x * uv.y + 1.0) - vec3(0.995)) * 300.0;\n\n    // Pinky\n    planetTypeA(color, uv + vec2(1.1, -0.3), vec3(0.80, 0., 0.327), vec3(0.996, 0.086, 0.459), 0.064, 8.25, vec3(2.1, 1.2, 9.1));\n   \n    // Earth\n    planetTypeB(color, uv + vec2(-0.9, -0.45), vec3(0.0, 0.5, 0.0), vec3(0.255, 0.643, 0.875), 0.03, 8.6, vec3(9.14, 0.73, 10.1));\n    \n    // Purple Dark\n    planetTypeA(color, uv + vec2(-1.2, 0.55), vec3(0.71,0.318,0.635), vec3(0.267,0.267,0.267), 0.03, 10.25, vec3(9.14, 1.03, 10.1));\n    \n    // Sun\n    planetTypeB(color, uv + vec2(-0.05, 0.1), vec3(0.976, 0.6, 0.031), vec3(0.976, 0.91, 0.11), 0.09, 6.6, vec3(102.2,0.851,0.749));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float smoooth(float f){\n    f = 6.0 * pow(f, 5.0) - 15.0 * pow(f, 4.0) +  10.0 * pow(f, 3.0);\n    return fract(f);\n}\n\nfloat random1(float st){\n  float S = dot(vec3(st),vec3(127.1,311.7,783.089));\n  return fract(sin(S)*43758.5453123);\n}\nfloat perlin_noise(float seed){\n    float p1 = random1(floor(seed));\n    float p2 = random1(floor(seed) + 1.0);\n    \n    float d1 = floor(seed) - seed;\n    float d2 = floor(seed) + 1.0 - seed;\n    \n    float smoothed = smoooth(fract(seed));\n\n    return mix(dot(p1, d1), dot(p2, d2), smoothed);\n}","name":"Common","description":"","type":"common"}]}