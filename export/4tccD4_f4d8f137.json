{"ver":"0.1","info":{"id":"4tccD4","date":"1532544460","viewed":177,"name":"Gridded Space","username":"Veggiebob","description":"An infinite grid of 3D space, like it should be.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","light","modulus","infinite","smooth","reflective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON pow(10., -5.)\n#define bigness 0.01\n#define PI 3.1415926\n#define light_col vec3(0.5, 0., 1.)\n#define scale_of_world 0.5\nvec3 tex (vec3 p, sampler2D t){\n    vec3 t1 = texture(t, p.xy).rgb/3.;\n    t1+=texture(t, p.xz).rgb/3.;\n    t1+=texture(t, p.yz).rgb/3.;\n    return t1;\n}\nfloat align (float diff, float dim){\n    if(diff>=dim){\n        return diff-dim;\n    } else {\n        return 0.;\n    }\n}\nfloat box3D (vec3 boxPos, vec3 boxSize, vec3 pos){\n    float n = align(abs(pos.x-boxPos.x), boxSize.x)+align(abs(pos.y-boxPos.y), boxSize.y);\n    n+=align(abs(pos.z-boxPos.z), boxSize.z);//just to keep the lines short\n    return n;\n}\nfloat sphere (vec3 spherePos, vec3 pos, float radius){\n    return length(pos-spherePos)-radius;\n}\n//Credit to Inigo Quilez for original function-- https://iquilezles.org/articles/distfunctions\nfloat CappedCylinder( vec3 pos, vec3 p, vec2 h )\n{\n  p = p-pos;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat cylinder (vec3 pos, vec3 p, float radius, float height){\n    vec3 diff = p-pos;\n    float yd = abs(diff.y);\n    return (length(diff.xz)-radius)+smoothstep(yd, -height*0.5, height*0.6);//+smoothstep(abs(diff.y)-height, 0., -height);\n}\nfloat doubleCone (vec3 pos, vec3 p, vec2 s){\n    vec3 diff = p-pos;\n    float yd = abs(diff.y)-s.y;\n    return (length(diff.xz)-s.x)-yd;\n}\n//useful functions\nvec2 rotate2D (vec2 p, float angle){\n    float a = atan(p.y, p.x)+angle;\n    float m = length(p);\n    return vec2(cos(a)*m, sin(a)*m);\n}\n//from IQ -- https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k)\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat mymin (float a, float b, float k){\n    return min(a, b)-abs(a-b)/(k*100.);\n}\nvec3 calcLight (float t) {\n    return vec3(cos(t), sin(t), sin(t*2.))*bigness*2.;\n}\nvec4 SDF (vec3 p){\n    vec3 np = p;\n    vec3 matCol = vec3(0.);\n    float total = 1000.;\n    float cyx = CappedCylinder(vec3(0.), np, vec2(0.1, 1.)*bigness);\n    total = min(total, cyx);\n    float cyy = CappedCylinder(vec3(0.), vec3(rotate2D(np.xy, PI/2.), np.z), vec2(0.1, 1.)*bigness);\n    total = smin(total, cyy, 0.003);\n    float cyz = CappedCylinder(vec3(0.), vec3(np.x, rotate2D(np.yz, PI/2.)), vec2(0.1, 1.)*bigness);\n    total = smin(total, cyz, 0.004);\n    float light = sphere(calcLight(iTime*0.5), np, bigness*0.1);\n    if(light<=total){\n        matCol = light_col;\n    }\n    total = min(total, light);\n    return vec4(total, matCol);\n}\nvec4 trace (vec3 o, vec3 r) {\n    float t = 0.;\n    vec3 p = o;\n    vec3 shift = vec3(0.);\n    float modu = bigness*2.0;\n    for(int i = 0; i<128; i++){\n        p = o+r*t;\n        shift = floor(max(-p, 0.)/modu)+1.;\n        p+=shift*modu;\n        p = mod(p+modu/2., modu)-modu/2.;\n        float d = SDF(p).x;\n        t+=d*0.8;\n        if(d<0.0001||t>0.5){\n            break;\n        }\n    }\n    return vec4(p, t);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        SDF(vec3(p.x + EPSILON, p.y, p.z)).x - SDF(vec3(p.x - EPSILON, p.y, p.z)).x,\n        SDF(vec3(p.x, p.y + EPSILON, p.z)).x - SDF(vec3(p.x, p.y - EPSILON, p.z)).x,\n        SDF(vec3(p.x, p.y, p.z  + EPSILON)).x - SDF(vec3(p.x, p.y, p.z - EPSILON)).x\n    ));\n}\n\n//made this one myself with some tutorials I found out there on the \nfloat diffuseLight (vec3 n, vec3 r){\n    return dot(n, -r);\n}\nfloat specularLight (vec3 n, vec3 r){\n    vec3 nr = reflect(r, n);\n    return pow(max(dot(nr, -r), 0.), 2.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //setup coordinates\n    vec2 mouse = iMouse.xy/iResolution.xy - vec2(0.5, 0.);\n    if(iMouse.xy == vec2(0.))mouse = vec2(0.5, 0.2);\n    mouse.x*=5.;\n    mouse.y*=2.;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    //setup camera + rays\n    float angle = mouse.x;\n    float fov = 0.5;\n    float camDist = bigness*6.*scale_of_world;\n    vec3 camera = vec3(cos(mouse.x)*camDist, 0., sin(mouse.x)*camDist);\n    vec3 ray = vec3(-cos(mouse.x+uv.x*fov)*2., uv.y, -sin(mouse.x+uv.x*fov)*2.);\n    ray = normalize(ray);\n    mouse.y-=0.5;\n    mouse.y*=-2.5;\n    camera = vec3(rotate2D(camera.xy, mouse.y), camera.z);\n    ray = vec3(rotate2D(ray.xy, mouse.y), ray.z);\n    \n    //do the raymarching\n    vec4 v = trace(camera, ray);\n    vec3 normal = estimateNormal(v.xyz);//keep here\n    vec3 col = vec3(0.);\n    //optional reflection:\n    col = SDF(v.xyz).yzw;\n    \n    //do the lighting https://learnopengl.com/Lighting/Basic-Lighting\n    vec3 ligr = -normalize(v.xyz-calcLight(iTime*0.5));\n    col+=texture(iChannel0, reflect(ray, normal)).r*0.3;//reflection\n    col+=diffuseLight(normal, ray)*0.5;\n    col+=specularLight(normal, ligr)*light_col*0.8;//tint it yellow\n    \n    \n    //col *= 1./(1.+pow(v.w*1., 2.)*0.1);//distance shading\n    col*=max(1.-v.w/0.2, 0.);\n    //col = max(min(col, 1.), 0.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}