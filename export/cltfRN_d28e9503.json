{"ver":"0.1","info":{"id":"cltfRN","date":"1701026277","viewed":137,"name":"Morning Dust 2","username":"Kerdek","description":".","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["dust"],"hasliked":0,"parentid":"mlycWd","parentname":"Morning Dust"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// gShaderToy.SetTexture(2, {mSrc:'https://ojuea.us/feathers.png', mType:'texture', mID:1, mSampler:{ filter: 'nearest', wrap: 'repeat', vflip:'true', srgb:'true', internal:'byte' }});\n\nDEFGET\n\nvoid mainImage(\n  out vec4 c,\n  in vec2 xy) {\n  c = texture(iChannel0, xy/iResolution.xy);\n  \n  // divide out number of samples\n  c.rgb /= c.a;\n  \n  // apply exposure\n  c.rgb *= get(3).y;\n  \n  // no negative colors\n  c.rgb = max(vec3(0.0), c.rgb);\n  \n  if (get(3).z == 1.0) {\n    // ACES tone mapping\n    c.rgb = aces(c.rgb); }\n  else if (get(3).z == 2.0) {\n    // DEUCES biophotometric tone mapping\n    c.rgb = exp(-0.25 / c.rgb); }\n  \n  // convert sRGB to sR'G'B'\n  c.r = srgb_gamma(c.r);\n  c.g = srgb_gamma(c.g); \n  c.b = srgb_gamma(c.b);\n  \n  bool visible = get(0).x > 0.0;\n  bool click = iMouse.z > 0.0;\n  bool down = click && get(1).z < 0.0;\n\n  int x = int(iMouse.x);\n  int y = int(iMouse.y);\n\n  int px = int(xy.x);\n  int py = int(xy.y);\n\n  if (visible) {\n    if (px < 100 && py < 100) {\n      c = 0.25 + 0.5 * c; }\n\n#define CLICKY(l, r, b, t, v, u) \\\n    else if (    px > (l) && px < (r) && py > (b) && py < (t)) { \\\n      c = (v) &&  x > (l) &&  x < (r) &&  y > (b) &&  y < (t) ? vec4(1.0) : u; }\n\n    if (false) {}\n    CLICKY(10, 20, 10, 20, click, vec4(0.0, 0.0, 0.0, 1.0)) // left\n    CLICKY(25, 35, 10, 20, click, vec4(0.0, 0.0, 0.0, 1.0)) // down\n    CLICKY(40, 50, 10, 20, click, vec4(0.0, 0.0, 0.0, 1.0)) // right\n    CLICKY(10, 20, 25, 35, click, vec4(0.0, 0.0, 0.0, 1.0)) // port\n    CLICKY(25, 35, 25, 35, click, vec4(0.0, 0.0, 0.0, 1.0)) // up\n    CLICKY(40, 50, 25, 35, click, vec4(0.0, 0.0, 0.0, 1.0)) // starboard\n    CLICKY(55, 65, 10, 20, click, vec4(0.0, 0.0, 0.0, 1.0)) // dolly -\n    CLICKY(55, 65, 25, 35, click, vec4(0.0, 0.0, 0.0, 1.0)) // dolly +\n    // sensor controls\n    CLICKY(10, 20, 40, 50, click, get(3).x == 0.0 ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0)) // rolloff +\n    CLICKY(10, 20, 55, 65, click, vec4(0.0, 0.0, 0.0, 1.0)) // rolloff -\n    CLICKY(25, 35, 40, 50, click, vec4(0.0, 0.0, 0.0, 1.0)) // iso -\n    CLICKY(25, 35, 55, 65, click, vec4(0.0, 0.0, 0.0, 1.0)) // iso +\n    CLICKY(10, 20, 70, 80, click, get(3).w > 0.0 ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0)) // run/pause\n    CLICKY(25, 35, 70, 80, click, get(3).z == 1.0 ? vec4(0.0, 1.0, 0.0, 1.0) : get(3).z == 2.0 ? vec4(0.0, 0.0, 1.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0)) // curve selection\n    // lens controls\n    CLICKY(40, 50, 40, 50, click, vec4(0.0, 0.0, 0.0, 1.0)) // zoom -\n    CLICKY(40, 50, 55, 65, click, vec4(0.0, 0.0, 0.0, 1.0)) // zoom +\n    CLICKY(55, 65, 40, 50, click, vec4(0.0, 0.0, 0.0, 1.0)) // focus -\n    CLICKY(55, 65, 55, 65, click, vec4(0.0, 0.0, 0.0, 1.0)) // focus +\n    CLICKY(70, 80, 40, 50, click, vec4(0.0, 0.0, 0.0, 1.0)) // aperture -\n    CLICKY(70, 80, 55, 65, click, vec4(0.0, 0.0, 0.0, 1.0)) // aperture +\n    CLICKY(70, 80, 10, 20, click, get(5).x > 0.0 ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0)) // movement mode\n    CLICKY(70, 80, 10, 20, click, get(5).y > 0.0 ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0)) // movement speed modifier\n  }\n    \n    \n  }","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://cie.co.at/data-tables\n\n// CIEXYZ 2-degree observer color matching functions\nvec3 cmf2[] = vec3 [](\nvec3(0.000129900000,0.0000039170000,0.000606100000),\nvec3(0.000145847000,0.0000043935810,0.000680879200),\nvec3(0.000163802100,0.0000049296040,0.000765145600),\nvec3(0.000184003700,0.0000055321360,0.000860012400),\nvec3(0.000206690200,0.0000062082450,0.000966592800),\nvec3(0.000232100000,0.0000069650000,0.001086000000),\nvec3(0.000260728000,0.0000078132190,0.001220586000),\nvec3(0.000293075000,0.0000087673360,0.001372729000),\nvec3(0.000329388000,0.0000098398440,0.001543579000),\nvec3(0.000369914000,0.0000110432300,0.001734286000),\nvec3(0.000414900000,0.0000123900000,0.001946000000),\nvec3(0.000464158700,0.0000138864100,0.002177777000),\nvec3(0.000518986000,0.0000155572800,0.002435809000),\nvec3(0.000581854000,0.0000174429600,0.002731953000),\nvec3(0.000655234700,0.0000195837500,0.003078064000),\nvec3(0.000741600000,0.0000220200000,0.003486000000),\nvec3(0.000845029600,0.0000248396500,0.003975227000),\nvec3(0.000964526800,0.0000280412600,0.004540880000),\nvec3(0.001094949000,0.0000315310400,0.005158320000),\nvec3(0.001231154000,0.0000352152100,0.005802907000),\nvec3(0.001368000000,0.0000390000000,0.006450001000),\nvec3(0.001502050000,0.0000428264000,0.007083216000),\nvec3(0.001642328000,0.0000469146000,0.007745488000),\nvec3(0.001802382000,0.0000515896000,0.008501152000),\nvec3(0.001995757000,0.0000571764000,0.009414544000),\nvec3(0.002236000000,0.0000640000000,0.010549990000),\nvec3(0.002535385000,0.0000723442100,0.011965800000),\nvec3(0.002892603000,0.0000822122400,0.013655870000),\nvec3(0.003300829000,0.0000935081600,0.015588050000),\nvec3(0.003753236000,0.0001061361000,0.017730150000),\nvec3(0.004243000000,0.0001200000000,0.020050010000),\nvec3(0.004762389000,0.0001349840000,0.022511360000),\nvec3(0.005330048000,0.0001514920000,0.025202880000),\nvec3(0.005978712000,0.0001702080000,0.028279720000),\nvec3(0.006741117000,0.0001918160000,0.031897040000),\nvec3(0.007650000000,0.0002170000000,0.036210000000),\nvec3(0.008751373000,0.0002469067000,0.041437710000),\nvec3(0.010028880000,0.0002812400000,0.047503720000),\nvec3(0.011421700000,0.0003185200000,0.054119880000),\nvec3(0.012869010000,0.0003572667000,0.060998030000),\nvec3(0.014310000000,0.0003960000000,0.067850010000),\nvec3(0.015704430000,0.0004337147000,0.074486320000),\nvec3(0.017147440000,0.0004730240000,0.081361560000),\nvec3(0.018781220000,0.0005178760000,0.089153640000),\nvec3(0.020748010000,0.0005722187000,0.098540480000),\nvec3(0.023190000000,0.0006400000000,0.110200000000),\nvec3(0.026207360000,0.0007245600000,0.124613300000),\nvec3(0.029782480000,0.0008255000000,0.141701700000),\nvec3(0.033880920000,0.0009411600000,0.161303500000),\nvec3(0.038468240000,0.0010698800000,0.183256800000),\nvec3(0.043510000000,0.0012100000000,0.207400000000),\nvec3(0.048995600000,0.0013620910000,0.233692100000),\nvec3(0.055022600000,0.0015307520000,0.262611400000),\nvec3(0.061718800000,0.0017203680000,0.294774600000),\nvec3(0.069212000000,0.0019353230000,0.330798500000),\nvec3(0.077630000000,0.0021800000000,0.371300000000),\nvec3(0.086958110000,0.0024548000000,0.416209100000),\nvec3(0.097176720000,0.0027640000000,0.465464200000),\nvec3(0.108406300000,0.0031178000000,0.519694800000),\nvec3(0.120767200000,0.0035264000000,0.579530300000),\nvec3(0.134380000000,0.0040000000000,0.645600000000),\nvec3(0.149358200000,0.0045462400000,0.718483800000),\nvec3(0.165395700000,0.0051593200000,0.796713300000),\nvec3(0.181983100000,0.0058292800000,0.877845900000),\nvec3(0.198611000000,0.0065461600000,0.959439000000),\nvec3(0.214770000000,0.0073000000000,1.039050100000),\nvec3(0.230186800000,0.0080865070000,1.115367300000),\nvec3(0.244879700000,0.0089087200000,1.188497100000),\nvec3(0.258777300000,0.0097676800000,1.258123300000),\nvec3(0.271807900000,0.0106644300000,1.323929600000),\nvec3(0.283900000000,0.0116000000000,1.385600000000),\nvec3(0.294943800000,0.0125731700000,1.442635200000),\nvec3(0.304896500000,0.0135827200000,1.494803500000),\nvec3(0.313787300000,0.0146296800000,1.542190300000),\nvec3(0.321645400000,0.0157150900000,1.584880700000),\nvec3(0.328500000000,0.0168400000000,1.622960000000),\nvec3(0.334351300000,0.0180073600000,1.656404800000),\nvec3(0.339210100000,0.0192144800000,1.685295900000),\nvec3(0.343121300000,0.0204539200000,1.709874500000),\nvec3(0.346129600000,0.0217182400000,1.730382100000),\nvec3(0.348280000000,0.0230000000000,1.747060000000),\nvec3(0.349599900000,0.0242946100000,1.760044600000),\nvec3(0.350147400000,0.0256102400000,1.769623300000),\nvec3(0.350013000000,0.0269585700000,1.776263700000),\nvec3(0.349287000000,0.0283512500000,1.780433400000),\nvec3(0.348060000000,0.0298000000000,1.782600000000),\nvec3(0.346373300000,0.0313108300000,1.782968200000),\nvec3(0.344262400000,0.0328836800000,1.781699800000),\nvec3(0.341808800000,0.0345211200000,1.779198200000),\nvec3(0.339094100000,0.0362257100000,1.775867100000),\nvec3(0.336200000000,0.0380000000000,1.772110000000),\nvec3(0.333197700000,0.0398466700000,1.768258900000),\nvec3(0.330041100000,0.0417680000000,1.764039000000),\nvec3(0.326635700000,0.0437660000000,1.758943800000),\nvec3(0.322886800000,0.0458426700000,1.752466300000),\nvec3(0.318700000000,0.0480000000000,1.744100000000),\nvec3(0.314025100000,0.0502436800000,1.733559500000),\nvec3(0.308884000000,0.0525730400000,1.720858100000),\nvec3(0.303290400000,0.0549805600000,1.705936900000),\nvec3(0.297257900000,0.0574587200000,1.688737200000),\nvec3(0.290800000000,0.0600000000000,1.669200000000),\nvec3(0.283970100000,0.0626019700000,1.647528700000),\nvec3(0.276721400000,0.0652775200000,1.623412700000),\nvec3(0.268917800000,0.0680420800000,1.596022300000),\nvec3(0.260422700000,0.0709110900000,1.564528000000),\nvec3(0.251100000000,0.0739000000000,1.528100000000),\nvec3(0.240847500000,0.0770160000000,1.486111400000),\nvec3(0.229851200000,0.0802664000000,1.439521500000),\nvec3(0.218407200000,0.0836668000000,1.389879900000),\nvec3(0.206811500000,0.0872328000000,1.338736200000),\nvec3(0.195360000000,0.0909800000000,1.287640000000),\nvec3(0.184213600000,0.0949175500000,1.237422300000),\nvec3(0.173327300000,0.0990458400000,1.187824300000),\nvec3(0.162688100000,0.1033674000000,1.138761100000),\nvec3(0.152283300000,0.1078846000000,1.090148000000),\nvec3(0.142100000000,0.1126000000000,1.041900000000),\nvec3(0.132178600000,0.1175320000000,0.994197600000),\nvec3(0.122569600000,0.1226744000000,0.947347300000),\nvec3(0.113275200000,0.1279928000000,0.901453100000),\nvec3(0.104297900000,0.1334528000000,0.856619300000),\nvec3(0.095640000000,0.1390200000000,0.812950100000),\nvec3(0.087299550000,0.1446764000000,0.770517300000),\nvec3(0.079308040000,0.1504693000000,0.729444800000),\nvec3(0.071717760000,0.1564619000000,0.689913600000),\nvec3(0.064580990000,0.1627177000000,0.652104900000),\nvec3(0.057950010000,0.1693000000000,0.616200000000),\nvec3(0.051862110000,0.1762431000000,0.582328600000),\nvec3(0.046281520000,0.1835581000000,0.550416200000),\nvec3(0.041150880000,0.1912735000000,0.520337600000),\nvec3(0.036412830000,0.1994180000000,0.491967300000),\nvec3(0.032010000000,0.2080200000000,0.465180000000),\nvec3(0.027917200000,0.2171199000000,0.439924600000),\nvec3(0.024144400000,0.2267345000000,0.416183600000),\nvec3(0.020687000000,0.2368571000000,0.393882200000),\nvec3(0.017540400000,0.2474812000000,0.372945900000),\nvec3(0.014700000000,0.2586000000000,0.353300000000),\nvec3(0.012161790000,0.2701849000000,0.334857800000),\nvec3(0.009919960000,0.2822939000000,0.317552100000),\nvec3(0.007967240000,0.2950505000000,0.301337500000),\nvec3(0.006296346000,0.3085780000000,0.286168600000),\nvec3(0.004900000000,0.3230000000000,0.272000000000),\nvec3(0.003777173000,0.3384021000000,0.258817100000),\nvec3(0.002945320000,0.3546858000000,0.246483800000),\nvec3(0.002424880000,0.3716986000000,0.234771800000),\nvec3(0.002236293000,0.3892875000000,0.223453300000),\nvec3(0.002400000000,0.4073000000000,0.212300000000),\nvec3(0.002925520000,0.4256299000000,0.201169200000),\nvec3(0.003836560000,0.4443096000000,0.190119600000),\nvec3(0.005174840000,0.4633944000000,0.179225400000),\nvec3(0.006982080000,0.4829395000000,0.168560800000),\nvec3(0.009300000000,0.5030000000000,0.158200000000),\nvec3(0.012149490000,0.5235693000000,0.148138300000),\nvec3(0.015535880000,0.5445120000000,0.138375800000),\nvec3(0.019477520000,0.5656900000000,0.128994200000),\nvec3(0.023992770000,0.5869653000000,0.120075100000),\nvec3(0.029100000000,0.6082000000000,0.111700000000),\nvec3(0.034814850000,0.6293456000000,0.103904800000),\nvec3(0.041120160000,0.6503068000000,0.096667480000),\nvec3(0.047985040000,0.6708752000000,0.089982720000),\nvec3(0.055378610000,0.6908424000000,0.083845310000),\nvec3(0.063270000000,0.7100000000000,0.078249990000),\nvec3(0.071635010000,0.7281852000000,0.073208990000),\nvec3(0.080462240000,0.7454636000000,0.068678160000),\nvec3(0.089739960000,0.7619694000000,0.064567840000),\nvec3(0.099456450000,0.7778368000000,0.060788350000),\nvec3(0.109600000000,0.7932000000000,0.057250010000),\nvec3(0.120167400000,0.8081104000000,0.053904350000),\nvec3(0.131114500000,0.8224962000000,0.050746640000),\nvec3(0.142367900000,0.8363068000000,0.047752760000),\nvec3(0.153854200000,0.8494916000000,0.044898590000),\nvec3(0.165500000000,0.8620000000000,0.042160000000),\nvec3(0.177257100000,0.8738108000000,0.039507280000),\nvec3(0.189140000000,0.8849624000000,0.036935640000),\nvec3(0.201169400000,0.8954936000000,0.034458360000),\nvec3(0.213365800000,0.9054432000000,0.032088720000),\nvec3(0.225749900000,0.9148501000000,0.029840000000),\nvec3(0.238320900000,0.9237348000000,0.027711810000),\nvec3(0.251066800000,0.9320924000000,0.025694440000),\nvec3(0.263992200000,0.9399226000000,0.023787160000),\nvec3(0.277101700000,0.9472252000000,0.021989250000),\nvec3(0.290400000000,0.9540000000000,0.020300000000),\nvec3(0.303891200000,0.9602561000000,0.018718050000),\nvec3(0.317572600000,0.9660074000000,0.017240360000),\nvec3(0.331438400000,0.9712606000000,0.015863640000),\nvec3(0.345482800000,0.9760225000000,0.014584610000),\nvec3(0.359700000000,0.9803000000000,0.013400000000),\nvec3(0.374083900000,0.9840924000000,0.012307230000),\nvec3(0.388639600000,0.9874182000000,0.011301880000),\nvec3(0.403378400000,0.9903128000000,0.010377920000),\nvec3(0.418311500000,0.9928116000000,0.009529306000),\nvec3(0.433449900000,0.9949501000000,0.008749999000),\nvec3(0.448795300000,0.9967108000000,0.008035200000),\nvec3(0.464336000000,0.9980983000000,0.007381600000),\nvec3(0.480064000000,0.9991120000000,0.006785400000),\nvec3(0.495971300000,0.9997482000000,0.006242800000),\nvec3(0.512050100000,1.0000000000000,0.005749999000),\nvec3(0.528295900000,0.9998567000000,0.005303600000),\nvec3(0.544691600000,0.9993046000000,0.004899800000),\nvec3(0.561209400000,0.9983255000000,0.004534200000),\nvec3(0.577821500000,0.9968987000000,0.004202400000),\nvec3(0.594500000000,0.9950000000000,0.003900000000),\nvec3(0.611220900000,0.9926005000000,0.003623200000),\nvec3(0.627975800000,0.9897426000000,0.003370600000),\nvec3(0.644760200000,0.9864444000000,0.003141400000),\nvec3(0.661569700000,0.9827241000000,0.002934800000),\nvec3(0.678400000000,0.9786000000000,0.002749999000),\nvec3(0.695239200000,0.9740837000000,0.002585200000),\nvec3(0.712058600000,0.9691712000000,0.002438600000),\nvec3(0.728828400000,0.9638568000000,0.002309400000),\nvec3(0.745518800000,0.9581349000000,0.002196800000),\nvec3(0.762100000000,0.9520000000000,0.002100000000),\nvec3(0.778543200000,0.9454504000000,0.002017733000),\nvec3(0.794825600000,0.9384992000000,0.001948200000),\nvec3(0.810926400000,0.9311628000000,0.001889800000),\nvec3(0.826824800000,0.9234576000000,0.001840933000),\nvec3(0.842500000000,0.9154000000000,0.001800000000),\nvec3(0.857932500000,0.9070064000000,0.001766267000),\nvec3(0.873081600000,0.8982772000000,0.001737800000),\nvec3(0.887894400000,0.8892048000000,0.001711200000),\nvec3(0.902318100000,0.8797816000000,0.001683067000),\nvec3(0.916300000000,0.8700000000000,0.001650001000),\nvec3(0.929799500000,0.8598613000000,0.001610133000),\nvec3(0.942798400000,0.8493920000000,0.001564400000),\nvec3(0.955277600000,0.8386220000000,0.001513600000),\nvec3(0.967217900000,0.8275813000000,0.001458533000),\nvec3(0.978600000000,0.8163000000000,0.001400000000),\nvec3(0.989385600000,0.8047947000000,0.001336667000),\nvec3(0.999548800000,0.7930820000000,0.001270000000),\nvec3(1.009089200000,0.7811920000000,0.001205000000),\nvec3(1.018006400000,0.7691547000000,0.001146667000),\nvec3(1.026300000000,0.7570000000000,0.001100000000),\nvec3(1.033982700000,0.7447541000000,0.001068800000),\nvec3(1.040986000000,0.7324224000000,0.001049400000),\nvec3(1.047188000000,0.7200036000000,0.001035600000),\nvec3(1.052466700000,0.7074965000000,0.001021200000),\nvec3(1.056700000000,0.6949000000000,0.001000000000),\nvec3(1.059794400000,0.6822192000000,0.000968640000),\nvec3(1.061799200000,0.6694716000000,0.000929920000),\nvec3(1.062806800000,0.6566744000000,0.000886880000),\nvec3(1.062909600000,0.6438448000000,0.000842560000),\nvec3(1.062200000000,0.6310000000000,0.000800000000),\nvec3(1.060735200000,0.6181555000000,0.000760960000),\nvec3(1.058443600000,0.6053144000000,0.000723680000),\nvec3(1.055224400000,0.5924756000000,0.000685920000),\nvec3(1.050976800000,0.5796379000000,0.000645440000),\nvec3(1.045600000000,0.5668000000000,0.000600000000),\nvec3(1.039036900000,0.5539611000000,0.000547866700),\nvec3(1.031360800000,0.5411372000000,0.000491600000),\nvec3(1.022666200000,0.5283528000000,0.000435400000),\nvec3(1.013047700000,0.5156323000000,0.000383466700),\nvec3(1.002600000000,0.5030000000000,0.000340000000),\nvec3(0.991367500000,0.4904688000000,0.000307253300),\nvec3(0.979331400000,0.4780304000000,0.000283160000),\nvec3(0.966491600000,0.4656776000000,0.000265440000),\nvec3(0.952847900000,0.4534032000000,0.000251813300),\nvec3(0.938400000000,0.4412000000000,0.000240000000),\nvec3(0.923194000000,0.4290800000000,0.000229546700),\nvec3(0.907244000000,0.4170360000000,0.000220640000),\nvec3(0.890502000000,0.4050320000000,0.000211960000),\nvec3(0.872920000000,0.3930320000000,0.000202186700),\nvec3(0.854449900000,0.3810000000000,0.000190000000),\nvec3(0.835084000000,0.3689184000000,0.000174213300),\nvec3(0.814946000000,0.3568272000000,0.000155640000),\nvec3(0.794186000000,0.3447768000000,0.000135960000),\nvec3(0.772954000000,0.3328176000000,0.000116853300),\nvec3(0.751400000000,0.3210000000000,0.000100000000),\nvec3(0.729583600000,0.3093381000000,0.000086133330),\nvec3(0.707588800000,0.2978504000000,0.000074600000),\nvec3(0.685602200000,0.2865936000000,0.000065000000),\nvec3(0.663810400000,0.2756245000000,0.000056933330),\nvec3(0.642400000000,0.2650000000000,0.000049999990),\nvec3(0.621514900000,0.2547632000000,0.000044160000),\nvec3(0.601113800000,0.2448896000000,0.000039480000),\nvec3(0.581105200000,0.2353344000000,0.000035720000),\nvec3(0.561397700000,0.2260528000000,0.000032640000),\nvec3(0.541900000000,0.2170000000000,0.000030000000),\nvec3(0.522599500000,0.2081616000000,0.000027653330),\nvec3(0.503546400000,0.1995488000000,0.000025560000),\nvec3(0.484743600000,0.1911552000000,0.000023640000),\nvec3(0.466193900000,0.1829744000000,0.000021813330),\nvec3(0.447900000000,0.1750000000000,0.000020000000),\nvec3(0.429861300000,0.1672235000000,0.000018133330),\nvec3(0.412098000000,0.1596464000000,0.000016200000),\nvec3(0.394644000000,0.1522776000000,0.000014200000),\nvec3(0.377533300000,0.1451259000000,0.000012133330),\nvec3(0.360800000000,0.1382000000000,0.000010000000),\nvec3(0.344456300000,0.1315003000000,0.000007733333),\nvec3(0.328516800000,0.1250248000000,0.000005400000),\nvec3(0.313019200000,0.1187792000000,0.000003200000),\nvec3(0.298001100000,0.1127691000000,0.000001333333),\nvec3(0.283500000000,0.1070000000000,0.000000000000),\nvec3(0.269544800000,0.1014762000000,0.000000000000),\nvec3(0.256118400000,0.0961886400000,0.000000000000),\nvec3(0.243189600000,0.0911229600000,0.000000000000),\nvec3(0.230727200000,0.0862648500000,0.000000000000),\nvec3(0.218700000000,0.0816000000000,0.000000000000),\nvec3(0.207097100000,0.0771206400000,0.000000000000),\nvec3(0.195923200000,0.0728255200000,0.000000000000),\nvec3(0.185170800000,0.0687100800000,0.000000000000),\nvec3(0.174832300000,0.0647697600000,0.000000000000),\nvec3(0.164900000000,0.0610000000000,0.000000000000),\nvec3(0.155366700000,0.0573962100000,0.000000000000),\nvec3(0.146230000000,0.0539550400000,0.000000000000),\nvec3(0.137490000000,0.0506737600000,0.000000000000),\nvec3(0.129146700000,0.0475496500000,0.000000000000),\nvec3(0.121200000000,0.0445800000000,0.000000000000),\nvec3(0.113639700000,0.0417587200000,0.000000000000),\nvec3(0.106465000000,0.0390849600000,0.000000000000),\nvec3(0.099690440000,0.0365638400000,0.000000000000),\nvec3(0.093330610000,0.0342004800000,0.000000000000),\nvec3(0.087400000000,0.0320000000000,0.000000000000),\nvec3(0.081900960000,0.0299626100000,0.000000000000),\nvec3(0.076804280000,0.0280766400000,0.000000000000),\nvec3(0.072077120000,0.0263293600000,0.000000000000),\nvec3(0.067686640000,0.0247080500000,0.000000000000),\nvec3(0.063600000000,0.0232000000000,0.000000000000),\nvec3(0.059806850000,0.0218007700000,0.000000000000),\nvec3(0.056282160000,0.0205011200000,0.000000000000),\nvec3(0.052971040000,0.0192810800000,0.000000000000),\nvec3(0.049818610000,0.0181206900000,0.000000000000),\nvec3(0.046770000000,0.0170000000000,0.000000000000),\nvec3(0.043784050000,0.0159037900000,0.000000000000),\nvec3(0.040875360000,0.0148371800000,0.000000000000),\nvec3(0.038072640000,0.0138106800000,0.000000000000),\nvec3(0.035404610000,0.0128347800000,0.000000000000),\nvec3(0.032900000000,0.0119200000000,0.000000000000),\nvec3(0.030564190000,0.0110683100000,0.000000000000),\nvec3(0.028380560000,0.0102733900000,0.000000000000),\nvec3(0.026344840000,0.0095333110000,0.000000000000),\nvec3(0.024452750000,0.0088461570000,0.000000000000),\nvec3(0.022700000000,0.0082100000000,0.000000000000),\nvec3(0.021084290000,0.0076237810000,0.000000000000),\nvec3(0.019599880000,0.0070854240000,0.000000000000),\nvec3(0.018237320000,0.0065914760000,0.000000000000),\nvec3(0.016987170000,0.0061384850000,0.000000000000),\nvec3(0.015840000000,0.0057230000000,0.000000000000),\nvec3(0.014790640000,0.0053430590000,0.000000000000),\nvec3(0.013831320000,0.0049957960000,0.000000000000),\nvec3(0.012948680000,0.0046764040000,0.000000000000),\nvec3(0.012129200000,0.0043800750000,0.000000000000),\nvec3(0.011359160000,0.0041020000000,0.000000000000),\nvec3(0.010629350000,0.0038384530000,0.000000000000),\nvec3(0.009938846000,0.0035890990000,0.000000000000),\nvec3(0.009288422000,0.0033542190000,0.000000000000),\nvec3(0.008678854000,0.0031340930000,0.000000000000),\nvec3(0.008110916000,0.0029290000000,0.000000000000),\nvec3(0.007582388000,0.0027381390000,0.000000000000),\nvec3(0.007088746000,0.0025598760000,0.000000000000),\nvec3(0.006627313000,0.0023932440000,0.000000000000),\nvec3(0.006195408000,0.0022372750000,0.000000000000),\nvec3(0.005790346000,0.0020910000000,0.000000000000),\nvec3(0.005409826000,0.0019535870000,0.000000000000),\nvec3(0.005052583000,0.0018245800000,0.000000000000),\nvec3(0.004717512000,0.0017035800000,0.000000000000),\nvec3(0.004403507000,0.0015901870000,0.000000000000),\nvec3(0.004109457000,0.0014840000000,0.000000000000),\nvec3(0.003833913000,0.0013844960000,0.000000000000),\nvec3(0.003575748000,0.0012912680000,0.000000000000),\nvec3(0.003334342000,0.0012040920000,0.000000000000),\nvec3(0.003109075000,0.0011227440000,0.000000000000),\nvec3(0.002899327000,0.0010470000000,0.000000000000),\nvec3(0.002704348000,0.0009765896000,0.000000000000),\nvec3(0.002523020000,0.0009111088000,0.000000000000),\nvec3(0.002354168000,0.0008501332000,0.000000000000),\nvec3(0.002196616000,0.0007932384000,0.000000000000),\nvec3(0.002049190000,0.0007400000000,0.000000000000),\nvec3(0.001910960000,0.0006900827000,0.000000000000),\nvec3(0.001781438000,0.0006433100000,0.000000000000),\nvec3(0.001660110000,0.0005994960000,0.000000000000),\nvec3(0.001546459000,0.0005584547000,0.000000000000),\nvec3(0.001439971000,0.0005200000000,0.000000000000),\nvec3(0.001340042000,0.0004839136000,0.000000000000),\nvec3(0.001246275000,0.0004500528000,0.000000000000),\nvec3(0.001158471000,0.0004183452000,0.000000000000),\nvec3(0.001076430000,0.0003887184000,0.000000000000),\nvec3(0.000999949300,0.0003611000000,0.000000000000),\nvec3(0.000928735800,0.0003353835000,0.000000000000),\nvec3(0.000862433200,0.0003114404000,0.000000000000),\nvec3(0.000800750300,0.0002891656000,0.000000000000),\nvec3(0.000743396000,0.0002684539000,0.000000000000),\nvec3(0.000690078600,0.0002492000000,0.000000000000),\nvec3(0.000640515600,0.0002313019000,0.000000000000),\nvec3(0.000594502100,0.0002146856000,0.000000000000),\nvec3(0.000551864600,0.0001992884000,0.000000000000),\nvec3(0.000512429000,0.0001850475000,0.000000000000),\nvec3(0.000476021300,0.0001719000000,0.000000000000),\nvec3(0.000442453600,0.0001597781000,0.000000000000),\nvec3(0.000411511700,0.0001486044000,0.000000000000),\nvec3(0.000382981400,0.0001383016000,0.000000000000),\nvec3(0.000356649100,0.0001287925000,0.000000000000),\nvec3(0.000332301100,0.0001200000000,0.000000000000),\nvec3(0.000309758600,0.0001118595000,0.000000000000),\nvec3(0.000288887100,0.0001043224000,0.000000000000),\nvec3(0.000269539400,0.0000973356000,0.000000000000),\nvec3(0.000251568200,0.0000908458700,0.000000000000),\nvec3(0.000234826100,0.0000848000000,0.000000000000),\nvec3(0.000219171000,0.0000791466700,0.000000000000),\nvec3(0.000204525800,0.0000738580000,0.000000000000),\nvec3(0.000190840500,0.0000689160000,0.000000000000),\nvec3(0.000178065400,0.0000643026700,0.000000000000),\nvec3(0.000166150500,0.0000600000000,0.000000000000),\nvec3(0.000155023600,0.0000559818700,0.000000000000),\nvec3(0.000144621900,0.0000522256000,0.000000000000),\nvec3(0.000134909800,0.0000487184000,0.000000000000),\nvec3(0.000125852000,0.0000454474700,0.000000000000),\nvec3(0.000117413000,0.0000424000000,0.000000000000),\nvec3(0.000109551500,0.0000395610400,0.000000000000),\nvec3(0.000102224500,0.0000369151200,0.000000000000),\nvec3(0.000095394450,0.0000344486800,0.000000000000),\nvec3(0.000089023900,0.0000321481600,0.000000000000),\nvec3(0.000083075270,0.0000300000000,0.000000000000),\nvec3(0.000077512690,0.0000279912500,0.000000000000),\nvec3(0.000072313040,0.0000261135600,0.000000000000),\nvec3(0.000067457780,0.0000243602400,0.000000000000),\nvec3(0.000062928440,0.0000227246100,0.000000000000),\nvec3(0.000058706520,0.0000212000000,0.000000000000),\nvec3(0.000054770280,0.0000197785500,0.000000000000),\nvec3(0.000051099180,0.0000184528500,0.000000000000),\nvec3(0.000047676540,0.0000172168700,0.000000000000),\nvec3(0.000044485670,0.0000160645900,0.000000000000),\nvec3(0.000041509940,0.0000149900000,0.000000000000),\nvec3(0.000038733240,0.0000139872800,0.000000000000),\nvec3(0.000036142030,0.0000130515500,0.000000000000),\nvec3(0.000033723520,0.0000121781800,0.000000000000),\nvec3(0.000031464870,0.0000113625400,0.000000000000),\nvec3(0.000029353260,0.0000106000000,0.000000000000),\nvec3(0.000027375730,0.0000098858770,0.000000000000),\nvec3(0.000025524330,0.0000092173040,0.000000000000),\nvec3(0.000023793760,0.0000085923620,0.000000000000),\nvec3(0.000022178700,0.0000080091330,0.000000000000),\nvec3(0.000020673830,0.0000074657000,0.000000000000),\nvec3(0.000019272260,0.0000069595670,0.000000000000),\nvec3(0.000017966400,0.0000064879950,0.000000000000),\nvec3(0.000016749910,0.0000060486990,0.000000000000),\nvec3(0.000015616480,0.0000056393960,0.000000000000),\nvec3(0.000014559770,0.0000052578000,0.000000000000),\nvec3(0.000013573870,0.0000049017710,0.000000000000),\nvec3(0.000012654360,0.0000045697200,0.000000000000),\nvec3(0.000011797230,0.0000042601940,0.000000000000),\nvec3(0.000010998440,0.0000039717390,0.000000000000),\nvec3(0.000010253980,0.0000037029000,0.000000000000),\nvec3(0.000009559646,0.0000034521630,0.000000000000),\nvec3(0.000008912044,0.0000032183020,0.000000000000),\nvec3(0.000008308358,0.0000030003000,0.000000000000),\nvec3(0.000007745769,0.0000027971390,0.000000000000),\nvec3(0.000007221456,0.0000026078000,0.000000000000),\nvec3(0.000006732475,0.0000024312200,0.000000000000),\nvec3(0.000006276423,0.0000022665310,0.000000000000),\nvec3(0.000005851304,0.0000021130130,0.000000000000),\nvec3(0.000005455118,0.0000019699430,0.000000000000),\nvec3(0.000005085868,0.0000018366000,0.000000000000),\nvec3(0.000004741466,0.0000017122300,0.000000000000),\nvec3(0.000004420236,0.0000015962280,0.000000000000),\nvec3(0.000004120783,0.0000014880900,0.000000000000),\nvec3(0.000003841716,0.0000013873140,0.000000000000),\nvec3(0.000003581652,0.0000012934000,0.000000000000),\nvec3(0.000003339127,0.0000012058200,0.000000000000),\nvec3(0.000003112949,0.0000011241430,0.000000000000),\nvec3(0.000002902121,0.0000010480090,0.000000000000),\nvec3(0.000002705645,0.0000009770578,0.000000000000),\nvec3(0.000002522525,0.0000009109300,0.000000000000),\nvec3(0.000002351726,0.0000008492513,0.000000000000),\nvec3(0.000002192415,0.0000007917212,0.000000000000),\nvec3(0.000002043902,0.0000007380904,0.000000000000),\nvec3(0.000001905497,0.0000006881098,0.000000000000),\nvec3(0.000001776509,0.0000006415300,0.000000000000),\nvec3(0.000001656215,0.0000005980895,0.000000000000),\nvec3(0.000001544022,0.0000005575746,0.000000000000),\nvec3(0.000001439440,0.0000005198080,0.000000000000),\nvec3(0.000001341977,0.0000004846123,0.000000000000),\nvec3(0.000001251141,0.0000004518100,0.000000000000) );\n\nfloat d65[] = float[](\n  0.00,   0.03,   0.33,   1.60,   4.17,   8.76,  15.61,  24.24,\n 31.93,  37.94,  43.65,  47.99,  47.23,  46.01,  49.19,  52.63,\n 67.11,  81.45,  85.97,  90.20,  90.96,  91.75,  88.40,  85.08,\n 93.98, 102.94, 109.14, 115.49, 116.30, 117.08, 115.89, 114.62,\n115.30, 115.97, 112.55, 109.12, 109.48, 109.82, 109.12, 108.41,\n106.93, 105.42, 106.84, 108.25, 106.54, 104.83, 104.57, 104.29,\n102.16, 100.00,  98.03,  96.01,  95.50,  94.97,  91.19,  87.44,\n 87.84,  88.27,  87.86,  87.41,  86.16,  84.90,  82.50,  80.13,\n 80.05,  79.97,  77.97,  75.97,  75.83,  75.69,  76.44,  77.15,\n 74.94,  72.77,  68.58,  64.42,  65.04,  65.62,  66.60,  67.57,\n 61.51,  55.50,  59.00,  62.46,  64.50,  66.48,  61.13,  55.83,\n 48.09,  40.41,  49.09,  57.70,  56.00,  54.30);\n\nfloat sun[] = float[](\n0.979, 0.894, 1.175, 0.958, 1.015, 1.263, 1.249, 1.214,\n1.088, 1.331, 1.075, 1.307, 1.065, 0.838, 0.878, 1.141,\n1.101, 1.291, 1.341, 1.000, 1.289, 1.096, 0.733, 0.684,\n1.027, 0.954, 1.071, 0.966, 0.912, 1.227, 1.223, 1.398,\n0.955, 0.489, 1.101, 1.378, 0.650, 1.040, 1.538, 1.655,\n1.649, 1.796, 1.803, 1.658, 1.602, 1.672, 1.624, 1.545,\n1.824, 1.706, 1.502, 1.819, 1.791, 1.758, 1.739, 1.736,\n1.844, 1.667, 1.686, 1.703, 1.760, 1.799, 1.584, 1.713,\n1.770, 1.697, 1.700, 1.571, 1.589, 1.477, 1.136, 1.688,\n1.648, 1.733, 1.672, 1.725, 1.931, 1.808, 1.569, 1.827,\n1.715, 1.933, 1.982, 1.911, 1.975, 1.823, 1.893, 2.079,\n1.975, 2.029, 2.146, 2.111, 1.943, 1.972, 1.981, 2.036,\n2.079, 2.102, 1.973, 2.011, 2.042, 2.057, 2.106, 2.042,\n1.978, 2.044, 1.923, 2.017, 1.996, 1.992, 1.879, 2.020,\n2.043, 1.993, 2.053, 2.018, 1.958, 2.077, 2.011, 2.078,\n2.037, 2.092, 2.025, 2.021, 1.971, 1.832, 1.627, 1.832,\n1.916, 1.962, 2.009, 1.898, 1.898, 1.890, 2.060, 1.928,\n2.019, 2.020, 1.868, 1.972, 1.859, 1.814, 1.896, 1.936,\n1.871, 1.995, 1.963, 1.908, 1.921, 1.918, 1.949, 1.999,\n1.869, 1.863, 1.876, 1.902, 1.671, 1.728, 1.656, 1.830,\n1.833, 1.908, 1.825, 1.896, 1.960, 1.932, 1.676, 1.830,\n1.899, 1.920, 1.954, 1.965, 1.773, 1.925, 1.860, 1.992,\n1.873, 1.884, 1.906, 1.834, 1.772, 1.883, 1.827, 1.881,\n1.881, 1.903, 1.881, 1.835, 1.865, 1.897, 1.864, 1.873,\n1.848, 1.884, 1.900, 1.899, 1.823, 1.848, 1.789, 1.810,\n1.845, 1.826, 1.852, 1.863, 1.856, 1.800, 1.831, 1.889,\n1.812, 1.862, 1.772, 1.825, 1.894, 1.878, 1.869, 1.832,\n1.848, 1.859, 1.786, 1.830, 1.840, 1.855, 1.875, 1.859,\n1.862, 1.786, 1.832, 1.850, 1.752, 1.614, 1.815, 1.789,\n1.810, 1.798, 1.776, 1.785, 1.807, 1.783, 1.760, 1.777,\n1.748, 1.753, 1.721, 1.789, 1.779, 1.766, 1.762, 1.760,\n1.745, 1.746, 1.705, 1.748, 1.707, 1.685, 1.715, 1.715,\n1.611, 1.709, 1.726, 1.709, 1.736, 1.692, 1.715, 1.668,\n1.658, 1.634, 1.699, 1.699, 1.699, 1.679, 1.641, 1.653,\n1.658, 1.656, 1.653, 1.616, 1.623, 1.629, 1.605, 1.560,\n1.608, 1.601, 1.534, 1.386, 1.551, 1.573, 1.557, 1.562,\n1.537, 1.548, 1.518, 1.523, 1.512, 1.510, 1.500, 1.494,\n1.481, 1.457, 1.469, 1.463, 1.450, 1.450, 1.438, 1.418,\n1.427);\n\n// integer domain CIEXYZ Color Matching Functions\nvec3 ciecmfi(\n  int l) {\n  return l >= 360 && l <= 830 ? cmf2[l - 360] : vec3(0.0); }\n\n// integer domain CIE Standard Illuminant D65\nfloat cied65i(\n  int l) {\n  return l >= 315 && l <= 780 ? d65[(l - 315) / 5] : 0.0; }\n\n// integer domain sunlight spectral power distribution function\nfloat sunlighti(\n  int l) {\n  return l >= 360 && l <= 700 ? sun[l - 360] : 0.0; }\n\n// CIEXYZ Color Matching Functions\nvec3 ciecmf(\n  float l) {\n  return ciecmfi(int(l)); }\n\n// sunlight spectral power distribution function\nfloat sunlight(\n  float l) {\n  return sunlighti(int(l)); }\n\n// CIE Standard Illuminant D65\nfloat cied65(\n  float l) {\n  return cied65i(int(l)); }\n\n// color math\n\n// inverse term in Planck's law\nfloat planck_d(\n  float l,\n  float T) {\n  return exp(1.43877688e7 / (l * T)) - 1.0; }\n\n// CIE Standard Illuminant D\nfloat cied(\n  float l,\n  float T) {\n  return planck_d(l, 6500.0) / planck_d(l, T) * cied65(l); }\n\n// Planck's law\nfloat black_body(\n  float l,\n  float T) {\n  return 5.95521486e19 * pow(l, -4.0) / planck_d(l, T); }\n\n// Rayleigh law\nfloat rayleigh(\n  float l,\n  float s) {\n  return pow(l / s, -4.0); }\n  \n// CIEXYZ color to linear sRGB color\nconst mat3 XYZ2sRGB = mat3(\n  3.2410,-0.9692, 0.0556,\n  -1.5374, 1.8760,-0.2040,\n  -0.4986, 0.0416, 1.0570);\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_gamma(\n  float v) {\n  return v <= 0.0031308\n    ? v * 12.92\n    : 1.055 * pow(v, 0.41666666666) - 0.055; }\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_igamma(\n  float v) {\n  return v <= 0.04045\n    ? v * 0.0773993808\n    : pow((v + 0.055) * 0.94786729857, 2.4) ; }\n\n// apparently this transforms linear srgb to aces srgb\nvec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0); }\n\n// math lib\n\n// needed to produce infinities\nfloat zero = 0.0;\n\nvec2 dir2(\n  float a) {\n  return vec2(cos(a), sin(a)); }\n\nfloat quadsorb(float wavelength, float c, float w) {\n  return 1.0 + pow((wavelength - c) / w, 2.0); }\n\n// vector lib\n\n// handy nil vector\nconst vec4 nil = vec4(0.0);\n\n// basis vectors\nconst vec4 dx = vec4(1.0, nil.xyz);\nconst vec4 dy = dx.wxyz;\nconst vec4 dz = dy.wxyz;\nconst vec4 dw = dz.wxyz;\n\n// transformation matrices\n\nmat4 translate(\n  vec4 by) {\n  return mat4(dx, dy, dz, dw + by); }\n\nmat4 scale(\n  float by) {\n  return mat4(by * dx, by * dy, by * dz, dw); }\n\nmat4 rotate(\n  vec4 axis,\n  float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  vec4 l = (1.0 - c) * axis;\n  vec3 m = l.xyz * axis.yzx;\n  vec4 n = s * axis;\n  return mat4(\n    l.x * axis.x, m.x - n.z, m.z + n.y, 0.0,\n    m.x + n.z, l.y * axis.y, m.y - n.x, 0.0,\n    m.z - n.y, m.y + n.x, l.z * axis.z, 0.0,\n    nil) + scale(c); }\n\n// pseudorandom\n\n// i can't believe it's an LCG\n// https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00996-5/S0025-5718-99-00996-5.pdf\nint next_hash(\n  int s) {\n  return s * 594156893; }\n\n// multilinear congruential seed function\nint hash(\n  int k,\n  int x,\n  int y) {\n  int s = next_hash(k * 37769685);\n  s ^= next_hash(x * 26757677);\n  s ^= next_hash(y * 20501397);\n  return next_hash(s); }\n\nint rand(\n  inout int s) {\n  s = next_hash(s);\n  return s >> 1; }\n\nconst int rand_size = 1 << 31;\n\nfloat unitrand(\n  inout int s) {\n  return float(rand(s) + (rand_size >> 1)) / float(rand_size); }\n\nfloat boxrand(\n  inout int s) {\n  return float(rand(s)) / float(rand_size); }\n\nconst float inv_4pi = 0.07957747154;\n\n// models an interaction with isotropic roughness\n// n - the surface normal\n// s - the azimuth of the incoming ray\n// you should supply a random value between 1.0 and -1.0 for s\nvec3 axial(\n  vec3 n,\n  float v,\n  inout int s) {\n  float u = 6.28318530718 * boxrand(s);\n  float r = sqrt(1.0 - pow(v, 2.0));\n  vec3 t = normalize(abs(n.y) > 0.5 ? vec3(-n.y, n.x, 0.0) : vec3(-n.z, 0.0, n.x));\n  vec3 b = cross(n, t.xyz);\n  return vec3(v * n + r * (cos(u) * t + sin(u) * b)); }\n\n// hardcore interactive programming\n\n#define DEFGET \\\nvec4 get(\\\n  int prop) {\\\n  vec2 xy = vec2(\\\n    float(prop % int(iResolution.x) + 1),\\\n    float(prop / int(iResolution.x) + 1));\\\n  return texture(iChannel1, xy / iResolution.xy); }\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"DEFGET\n\nconst float epsilon_free_distance = 1e-4;\n\nconst float wavelength_min = 360.0;\nconst float wavelength_max = 780.0;\n\nvoid mainImage(out vec4 c, vec2 xy) {\n  vec4 sensor_parms = get(3);\n\n  if (iFrame == 0 || sensor_parms.w > 0.0) {\n    discard; }\n\n  int seed; // for pseudorandom state\n  vec4 cairn; // last visited\n  vec4 heading; // from cairn\n  vec4 lens_normal; // for lens shading\n  float leg = 0.0; // distance\n  float wavelength; // wavelength\n  float weight = 1.0; // of sample\n  float contribution = 0.0; // of energy\n  float divisor = 1.0; // for monte carlo sum\n  bool for_sun = true;\n\n  { // setup\n\n    vec4 orbit_parms = get(2);\n    vec4 lens_parms = get(4);\n    vec4 position_parms = get(6);\n\n    // pseudorandom generator\n    seed = hash(iFrame, int(xy.x), int(xy.y));\n\n    // view matrix\n    mat4 view = translate(vec4(position_parms.xyz, 0.0))\n      * rotate(dy, orbit_parms.x)\n      * rotate(dx, orbit_parms.y)\n      * rotate(dz, orbit_parms.z)\n      * translate(vec4(0.0, 0.0, -orbit_parms.w, 0.0));\n\n    vec2 lens_uv = sqrt(unitrand(seed)) \n      * dir2(6.28318530718 * boxrand(seed));\n    vec2 lenspoint = lens_parms.z * lens_uv;\n\n    wavelength = unitrand(seed)\n      * (wavelength_max - wavelength_min)\n      + wavelength_min;\n\n    cairn = vec4(lenspoint, 0.0, 1.0);\n\n    heading = normalize(vec4(\n      (1.0 - wavelength / 40000.0)\n      / (iResolution.y * lens_parms.x)\n      * (xy - 0.5 * iResolution.xy + vec2(boxrand(seed), boxrand(seed)))\n      - (lenspoint / lens_parms.y),\n      1.0, 0.0));\n\n    // view to world space\n    cairn = view * cairn;\n    heading = view * heading;\n    lens_normal = view * normalize(vec4(lens_uv * 0.2, 1.0, 0.0));\n\n  } // setup\n\n  // light source sampling\n\n  float sun_size = 0.00000951927;\n  float sun_cosine = 1.0 - sun_size;\n  float sun_density = 1.0 / sun_size;\n  const vec3 sun_dir = normalize(vec3(1.0, 0.3, 1.0));\n  vec3 sun_heading = axial(sun_dir, 1.0 - sun_size * unitrand(seed), seed);\n  float sun_dist = 2.0 * sun_density * inv_4pi;\n\n  // lens shading\n\n  if (unitrand(seed) < 0.1) {\n    float p = 20.0;\n    if (dot(sun_heading, lens_normal.xyz) < 0.0 || unitrand(seed) < 0.5) {\n      heading.xyz = axial(normalize(lens_normal.xyz + heading.xyz), 1.0 - pow(unitrand(seed), p), seed);\n      for_sun = false; }\n    else {\n      float inv_p = 1.0 / p;\n      weight *= 2.0 * inv_4pi * inv_p * pow(1.0 - dot(sun_heading, normalize(lens_normal.xyz + heading.xyz)), inv_p - 1.0) / sun_dist;\n      heading.xyz = sun_heading;\n      for_sun = true; } }\n\n  // iterative ray-tracing\n\n  for(int i = 0; i < 1024; ++i) {\n\n    // our current position, used for intersection calculations\n    vec4 position = cairn + leg * heading;\n\n    // initially assume the free path is infinitely long\n    float free_distance = 1.0 / zero;\n\n    float city_free_distance = -1.0 / zero;\n    vec4 city_normal;\n    int city_color;\n    int city_normal_iter;\n    const int city_iters = 12;\n    vec3 city_parms[city_iters];\n    vec4 city_position = position;\n    mat2 tcity0 = mat2(cos(2.0), sin(2.0), -sin(2.0), cos(2.0));\n    mat2 itcity0 = inverse(tcity0);\n    int roof = 0;\n    float j = 100.0;\n    for(int i = 0; i < city_iters; i++) {\n      city_position.xz *= tcity0;\n      vec3 disc = mod(city_position.xyz, 2.0 * j) - j;\n      city_position.xyz = j * 0.8 - abs(disc);\n      city_parms[i] = -sign(disc);\n      if(disc.y > 0.0) { roof++; }\n      city_free_distance = max(city_free_distance, min(min(city_position.x, city_position.y), city_position.z));\n      if (city_free_distance == city_position.x) {\n        city_normal = dx;\n        city_normal_iter = i;\n        city_color = 0; }\n      else if (city_free_distance == city_position.y) {\n        city_normal = dy;\n        city_normal_iter = i;\n        city_color = roof % 4 + 1; }\n      else if (city_free_distance == city_position.z) {\n        city_normal = dz;\n        city_normal_iter = i;\n        city_color = 0; }\n      j *= 0.4; }\n    city_free_distance = max(city_free_distance, position.y);\n    if (city_free_distance == position.y) {\n      city_normal = dy;\n      city_normal_iter = -1;\n      city_color = 1; }\n    city_free_distance = max(city_free_distance, epsilon_free_distance);\n    free_distance = min(free_distance, city_free_distance);\n\n    float scatter_free_distance;\n    {\n      float scatter = rayleigh(wavelength, 130.0);\n      scatter_free_distance = -log(unitrand(seed)) / scatter;\n      free_distance = min(free_distance, scatter_free_distance);\n    }\n\n    float dust_free_distance = 1e20;\n    if (position.y < 1.0) {\n      float dust = 0.0005;\n      dust_free_distance = -log(unitrand(seed)) / dust;\n      free_distance = min(free_distance, dust_free_distance); }\n\n    leg += free_distance;\n\n    position = cairn + leg * heading;\n\n    if (position.y > 50.0) {\n      if (dot(heading.xyz, sun_dir) > sun_cosine) {\n        if (!for_sun) {\n          divisor = 0.0; }\n        else {\n          contribution += weight * sun_density * sunlight(wavelength); } }\n      break; }\n\n    // unit roll for deciding shading methods\n    float method_roll = unitrand(seed);\n\n    if (free_distance == scatter_free_distance) {\n      cairn = position; leg = 0.0;\n      if (method_roll > 0.5) {\n        weight *= inv_4pi * (1.0 + pow(dot(heading.xyz, sun_heading), 2.0)) / sun_dist;\n        heading.xyz = sun_heading;\n        for_sun = true; }\n      else {\n        vec3 heading1 = normalize((boxrand(seed) < 0.0 ? heading.xyz : -heading.xyz) + axial(heading.xyz, 2.0 * boxrand(seed), seed));\n        heading.xyz = heading1;\n        for_sun = false; } }\n    else if (free_distance == dust_free_distance) {\n      cairn = position; leg = 0.0;\n      if (method_roll > 0.5) {\n        weight *= inv_4pi / sun_dist;\n        heading.xyz = sun_heading;\n        for_sun = true; }\n      else {\n        vec3 heading1 = axial(heading.xyz, 2.0 * boxrand(seed), seed);\n        heading.xyz = heading1;\n        for_sun = false; } }\n    else if (free_distance == city_free_distance && free_distance == epsilon_free_distance) {\n      cairn = position; leg = 0.0;\n      for(int i = city_normal_iter + 1; --i >= 0;) {\n        city_normal.xyz *= city_parms[i].xyz;\n        city_normal.xz = city_normal.xz * itcity0; }\n      city_normal = normalize(city_normal);\n      if (dot(heading.xyz, city_normal.xyz) < 0.0) {\n        if (city_color == 0) {\n          vec4 normal = -city_normal;\n          float ior1 = 1.0;\n          float ior2 = 2.7;\n          float ior12 = pow(ior1, 2.0);\n          float ior22 = pow(ior2, 2.0);\n          float dt1 = dot(heading, normal);\n          float dt12 = pow(dt1, 2.0);\n          float discriminant = -1.0 + ior22 / ior12 + dt12;\n          // no total internal reflection in this scene, so\n          // discriminant is always nonnegative.\n          vec4 refracted_heading = normalize(\n            heading\n            + (-dt1 + sqrt(discriminant)) * normal);\n          float dt2 = dot(refracted_heading, normal);\n          float dt22 = pow(dt2, 2.0);\n          float k1 = ior12 * dt12 + ior22 * dt22;\n          float k2 = ior22 * dt12 + ior12 * dt22;\n          float v = 2.0 * ior1 * ior2 * dt1 * dt2;\n          float reflectance = 0.5 * (\n            (k1 - v) / (k1 + v)\n            + (k2 - v) / (k2 + v));\n          if (method_roll > reflectance) {\n            break; }\n          heading.xyz = reflect(heading.xyz, city_normal.xyz);\n          for_sun = true; }\n        else {\n          //if (city_color == 2) {\n          //  contribution += weight * 0.001 * cied65(wavelength); }\n          if (dot(sun_dir, city_normal.xyz) < 0.0 || method_roll > 0.5) {\n            heading.xyz = axial(city_normal.xyz, unitrand(seed), seed);\n            for_sun = false; }\n          else {\n            weight *= 2.0 * inv_4pi / sun_dist;\n            heading.xyz = sun_heading;\n            for_sun = true; }\n          weight *=\n            city_color == 1 ? 0.8 :\n            city_color == 3 ? exp(-0.1 * quadsorb(wavelength, 550.0, 2.0)) :\n            city_color == 2 || city_color == 4 ? 0.95 :\n            0.0; } } } }\n\n  float amt = sensor_parms.x;\n  c = texture(iChannel0, xy / iResolution.xy);\n  if (amt > 0.0) c *= 1.0 - (1.0 / amt);\n  c.rgb += XYZ2sRGB * ciecmf(wavelength) * contribution;\n  c.a += divisor; }","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"DEFGET\n\nint at(vec2 a) {\n  return\n    int(a.x) + int(iResolution.x) * int(a.y); }\n\nvoid mainImage(out vec4 c, in vec2 xy) {\n  c = get(int(xy.x) + int(iResolution.x) * int(xy.y));\n\n  bool visible = get(0).x > 0.0;\n  bool click = iMouse.z > 0.0;\n  bool down = click && get(1).z < 0.0;\n  int x = int(iMouse.x);\n  int y = int(iMouse.y);\n\n  switch (at(xy)) {\n  case 0: {\n    if (iFrame == 0) {\n      c = vec4(-1.0); }\n    if (down && (!visible || x >= 100 || y >= 100)) {\n      c.x = c.x > 0.0 ? -1.0 : 1.0; } }\n  break;\n  case 1: {\n    c = iMouse; }\n  break;\n\n#define CLICKY(l, r, b, t, z) \\\n      else if (x > l && x < r && y > b && y < t) { \\\n        z; }\n  // orbit\n  case 2: {\n    if (iFrame == 0) {\n      c = vec4(-0.8, -0.05, 0.0, 1.0); }\n    if (!visible || !click) {}\n    else {\n      if (false) {}\n      CLICKY(55, 65, 10, 20, c.w *= exp(-0.01);) // fore dolly\n      CLICKY(55, 65, 25, 35, c.w *= exp(0.01);) // hind dolly\n      else if (get(5).x > 0.0) {}\n      CLICKY(10, 20, 10, 20, c.x -= 0.01;) // left yaw\n      CLICKY(25, 35, 10, 20, c.y -= 0.01;) // fore pitch\n      CLICKY(40, 50, 10, 20, c.x += 0.01;) // right yaw\n      CLICKY(10, 20, 25, 35, c.z += 0.01;) // left roll\n      CLICKY(25, 35, 25, 35, c.y += 0.01;) // hind pitch\n      CLICKY(40, 50, 25, 35, c.z -= 0.01;) // right roll\n    } }\n  break;\n  // position\n  case 6: {\n    if (iFrame == 0) {\n      c = vec4(-6.0, -6.0, 60.0, 1.0); }\n    if (!visible || !click || get(5).x < 0.0) {}\n    else {\n      vec4 dir;\n      vec4 amt = get(2);\n      if (false) {}\n      CLICKY(10, 20, 10, 20, dir = -amt.w * dx;) // left sway\n      CLICKY(25, 35, 10, 20, dir = -amt.w * dz;) // hind thrust\n      CLICKY(40, 50, 10, 20, dir = amt.w * dx;) // right sway\n      CLICKY(10, 20, 25, 35, dir = amt.w * dy;) // up heave\n      CLICKY(25, 35, 25, 35, dir = amt.w * dz;) // fore thrust\n      CLICKY(40, 50, 25, 35, dir = -amt.w * dy;) // down heave\n      dir *= rotate(dz, -amt.z);\n      dir *= rotate(dx, -amt.y);\n      dir *= rotate(dy, -amt.x);\n      c += 0.01 / get(4).x * dir;\n    } }\n  break;\n  // movement modes\n  case 5: {\n    if (iFrame == 0) {\n      c = vec4(-1.0, -1.0, 0.0, 0.0); }\n    if (!visible || !down) {}\n    CLICKY(70, 80, 10, 20, c.x = c.x > 0.0 ? -1.0 : 1.0;) // movement mode\n    CLICKY(70, 80, 25, 35, c.y = c.y > 0.0 ? -1.0 : 1.0;) // movement speed modifier\n  }\n  break;\n  // sensor controls\n  case 3: {\n    if (iFrame == 0) {\n      c = vec4(0.0, 10.0, 0.0, -1.0); }\n    if (!visible || !click) {}\n    CLICKY(10, 20, 40, 50, { c.x -= 1.0; if (c.x < 0.0) c.x = 0.0; }) // rolloff +\n    CLICKY(10, 20, 55, 65, c.x += 1.0;) // rolloff -\n    CLICKY(25, 35, 40, 50, c.y *= exp(-0.03);) // iso -\n    CLICKY(25, 35, 55, 65, c.y *= exp(0.03);) // iso +\n    \n    if (!visible || !down) {}\n    CLICKY(10, 20, 70, 80, c.w = c.w > 0.0 ? -1.0 : 1.0;) // run/pause\n    CLICKY(25, 35, 70, 80, c.z = mod(c.z + 1.0, 3.0);) // curve selection\n  }\n  // lens controls\n  break;\n  case 4: {\n    if (iFrame == 0) {\n      c = vec4(1.8, 6.0, 0.0008, 0.0); }\n    if (!visible || !click) {}\n    CLICKY(40, 50, 40, 50, c.x *= exp(-0.01);) // zoom -\n    CLICKY(40, 50, 55, 65, c.x *= exp(0.01);) // zoom +\n    CLICKY(55, 65, 40, 50, c.y *= exp(-0.01 / c.x);) // focus -\n    CLICKY(55, 65, 55, 65, c.y *= exp(0.01 / c.x);) // focus +\n    CLICKY(70, 80, 40, 50, c.z *= exp(-0.01);) // aperture -\n    CLICKY(70, 80, 55, 65, c.z *= exp(0.01);) // aperture +\n  }\n  break;\n  }\n}","name":"Buffer B","description":"","type":"buffer"}]}