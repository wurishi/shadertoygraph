{"ver":"0.1","info":{"id":"wdVczG","date":"1603170048","viewed":671,"name":"Monospace Text Rendering","username":"aeva","description":"A simple monospace text rendering shader for debugging and adding nice labels to things.\n\nSupports ASCII values from 32 to 126.\n\nThe embedded public domain font is from https://twitter.com/castpixel/status/1281345373336985612.","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["fonts"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Written in 2020 by Aeva Palecek\n//\n// To the extent possible under law, the author has dedicated all copyright\n// and related and neighboring rights to this software to the public domain\n// worldwide.  This software is distributed without any warranty.\n//\n// See http://creativecommons.org/publicdomain/zero/1.0/ for more information.\n//\n\n#define STRLEN 50\n#define String int[STRLEN]\nvec4 Print(vec2 fragCoord, ivec2 LowerLeft, String Line)\n{\n    ivec2 Area = ivec2(STRLEN * 8, 8);\n    ivec2 Pixel = ivec2(floor(fragCoord)) - LowerLeft;\n    if (Pixel.x >= 0 && Pixel.y >= 0 && Pixel.x < Area.x && Pixel.y < Area.y)\n    {\n        int GlyphsPerRow = int(floor(iResolution.x)) / 8;\n        int GlyphIndex = Line[Pixel.x / 8];\n        if (GlyphIndex >= 0)\n        {\n        \tivec2 Glyph = ivec2(GlyphIndex % GlyphsPerRow, GlyphIndex / GlyphsPerRow);\n\t\t\tvec2 UV = vec2(0.5 + vec2(Glyph * 8 + (Pixel % 8))) / iResolution.xy;\n        \treturn vec4(texture(iChannel0, UV).rgb, 1.0);\n        }\n    }\n\treturn vec4(0.0);\n}\n\n\n#define LINE_00 44, 79, 82, 69, 77, 0, 73, 80, 83, 85, 77, 0, 68, 79, 76, 79, 82, 0, 83, 73, 84, 0, 65, 77, 69, 84, 12, 0, 67, 79, 78, 83, 69, 67, 84, 69, 84, 85, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_01 65, 68, 73, 80, 73, 83, 67, 73, 78, 71, 0, 69, 76, 73, 84, 12, 0, 83, 69, 68, 0, 68, 79, 0, 69, 73, 85, 83, 77, 79, 68, 0, 84, 69, 77, 80, 79, 82, 0, 73, 78, 67, 73, 68, 73, 68, 85, 78, 84, -1\n#define LINE_02 85, 84, 0, 76, 65, 66, 79, 82, 69, 0, 69, 84, 0, 68, 79, 76, 79, 82, 69, 0, 77, 65, 71, 78, 65, 0, 65, 76, 73, 81, 85, 65, 14, 0, 53, 84, 0, 69, 78, 73, 77, 0, 65, 68, -1, -1, -1, -1, -1, -1\n#define LINE_03 77, 73, 78, 73, 77, 0, 86, 69, 78, 73, 65, 77, 12, 0, 81, 85, 73, 83, 0, 78, 79, 83, 84, 82, 85, 68, 0, 69, 88, 69, 82, 67, 73, 84, 65, 84, 73, 79, 78, 0, 85, 76, 76, 65, 77, 67, 79, 0, -1, -1\n#define LINE_04 76, 65, 66, 79, 82, 73, 83, 0, 78, 73, 83, 73, 0, 85, 84, 0, 65, 76, 73, 81, 85, 73, 80, 0, 69, 88, 0, 69, 65, 0, 67, 79, 77, 77, 79, 68, 79, 0, 67, 79, 78, 83, 69, 81, 85, 65, 84, 14, 0, -1\n#define LINE_05 36, 85, 73, 83, 0, 65, 85, 84, 69, 0, 73, 82, 85, 82, 69, 0, 68, 79, 76, 79, 82, 0, 73, 78, 0, 82, 69, 80, 82, 69, 72, 69, 78, 68, 69, 82, 73, 84, 0, 73, 78, 0, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_06 86, 79, 76, 85, 80, 84, 65, 84, 69, 0, 86, 69, 76, 73, 84, 0, 69, 83, 83, 69, 0, 67, 73, 76, 76, 85, 77, 0, 68, 79, 76, 79, 82, 69, 0, 69, 85, 0, 70, 85, 71, 73, 65, 84, 0, -1, -1, -1, -1, -1\n#define LINE_07 78, 85, 76, 76, 65, 0, 80, 65, 82, 73, 65, 84, 85, 82, 14, 0, 37, 88, 67, 69, 80, 84, 69, 85, 82, 0, 83, 73, 78, 84, 0, 79, 67, 67, 65, 69, 67, 65, 84, 0, 67, 85, 80, 73, 68, 65, 84, 65, 84, -1\n#define LINE_08 78, 79, 78, 0, 80, 82, 79, 73, 68, 69, 78, 84, 12, 0, 83, 85, 78, 84, 0, 73, 78, 0, 67, 85, 76, 80, 65, 0, 81, 85, 73, 0, 79, 70, 70, 73, 67, 73, 65, 0, 68, 69, 83, 69, 82, 85, 78, 84, -1, -1\n#define LINE_09 77, 79, 76, 76, 73, 84, 0, 65, 78, 73, 77, 0, 73, 68, 0, 69, 83, 84, 0, 76, 65, 66, 79, 82, 85, 77, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_10 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_11 52, 72, 69, 0, 81, 85, 73, 67, 75, 0, 66, 82, 79, 87, 78, 0, 70, 79, 88, 0, 74, 85, 77, 80, 83, 0, 79, 86, 69, 82, 0, 84, 72, 69, 0, 76, 65, 90, 89, 0, 68, 79, 71, 14, -1, -1, -1, -1, -1, -1\n#define LINE_12 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_13 17, 18, 19, 20, 21, 22, 23, 24, 25, 16, 59, 61, 1, 32, 3, 4, 5, 62, 6, 10, 8, 9, 91, 93, 11, 31, 29, 2, 28, 30, 29, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_14 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n#define LINE_15 33, 69, 86, 65, 0, 87, 65, 83, 0, 72, 69, 82, 69, 0, 62, 63, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n\n#define PRINT(LINE) Text += Print(fragCoord / Scale, ivec2(0, (Cursor++) * 8), String(LINE));\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{  \n    float SlugWidth = float(STRLEN) * 8.0;\n    float Scale = max(round(iResolution.x / SlugWidth), 1.0);\n       \n    int Cursor = 1;\n    vec4 Text = vec4(0.0);\n    PRINT(LINE_15);\n    PRINT(LINE_14);\n    PRINT(LINE_13);\n    PRINT(LINE_12);\n    PRINT(LINE_11);\n    PRINT(LINE_10);\n    PRINT(LINE_09);\n    PRINT(LINE_08);\n    PRINT(LINE_07);\n    PRINT(LINE_06);\n    PRINT(LINE_05);\n    PRINT(LINE_04);\n    PRINT(LINE_03);\n    PRINT(LINE_02);\n    PRINT(LINE_01);\n    PRINT(LINE_00);\n    fragColor.rgb = mix(vec3(fragCoord.x / iResolution.x * 0.5 + 0.5), Text.rgb, Text.a);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\n// Written in 2020 by Aeva Palecek\n//\n// To the extent possible under law, the author has dedicated all copyright\n// and related and neighboring rights to this software to the public domain\n// worldwide.  This software is distributed without any warranty.\n//\n// See http://creativecommons.org/publicdomain/zero/1.0/ for more information.\n//\n\nint GLYPHS[190] = int[190](0xFFFFFFFF, 0xFFFFFFFF, 0xF3FFF3F3, 0xF3F3FFFF, 0xFFFFFFFF, 0xFFDBC9FF, 0xFFFFC980, 0xC980C9FF, 0xE781A781, 0xE581E7FF, 0x9D99F3E7, 0xCF99B9FF, 0xFF839981, 0xE3DBC7FF, 0xFFFFFFFF, 0xFBF3F3FF, 0xFFE7F3FB, 0xFBF3E7FF, 0xFFF3E7EF, 0xEFE7F3FF, 0xFF99C3C3, 0x81E7FFFF, 0xFFF7F7C1, 0xF7F7FFFF, 0xF7F3F3FF, 0xFFFFFFFF, 0xFFFFFFC1, 0xFFFFFFFF, 0xFFE7E7FF, 0xFFFFFFFF, 0xFDF9F3E7, 0xCF9FBFFF, 0xFFC39999, 0x9999C3FF, 0xFFC3E7E7, 0xE7E3E7FF, 0xFF81F9C3, 0x9F99C3FF, 0xFFC3999F, 0xCF99C3FF, 0xFF9F9F81, 0x999999FF, 0xFFC3999F, 0xC1F981FF, 0xFFC39999, 0xC1F9C3FF, 0xFFF3F3E7, 0xCF9F81FF, 0xFFC39999, 0xC399C3FF, 0xFFC3999F, 0x8399C3FF, 0xFFF3F3FF, 0xF3F3FFFF, 0xF9F3F3FF, 0xF3F3FFFF, 0xEFE7F3F9, 0xF3E7EFFF, 0xFFFFC1FF, 0xFFC1FFFF, 0xFBF3E7CF, 0xE7F3FBFF, 0xE7FFE7C7, 0x9F99C3FF, 0xFFFFFFFF, 0xFFF3F9FF, 0xFF999981, 0x9999C3FF, 0xFFC19999, 0xC199C1FF, 0xFFC399F9, 0xF999C3FF, 0xFFC199B9, 0xB999C1FF, 0xFF81F9F9, 0xC1F981FF, 0xFFF9F9F9, 0xC1F981FF, 0xFF83B999, 0xF999C3FF, 0xFF999999, 0x819999FF, 0xFFC3E7E7, 0xE7E7C3FF, 0xFFF1E4E7, 0xE7E7C3FF, 0xFF99C9E1, 0xE1C999FF, 0xFF81F9F9, 0xF9F9F9FF, 0xFF9C9480, 0x80889CFF, 0xFF998981, 0x819199FF, 0xFFC39999, 0x9999C3FF, 0xFFF9F9C1, 0x9999C1FF, 0xFF8FC399, 0x9999C3FF, 0xFFB999C1, 0x9999C1FF, 0xFFC19F9F, 0xC3F983FF, 0xFFE7E7E7, 0xE7E781FF, 0xFFC39999, 0x999999FF, 0xFFE7C399, 0x999999FF, 0xFF9C8880, 0x949C9CFF, 0xFF9999C3, 0xE7C399FF, 0xFFE7E7E7, 0xC39999FF, 0xFF81F3E7, 0xCF9F81FF, 0xFFE1F9F9, 0xF9F9E1FF, 0xBF9FCFE7, 0xF3F9FDFF, 0xFFC3CFCF, 0xCFCFC3FF, 0xFFFFFFFF, 0xC9E3F7FF, 0xC1FFFFFF, 0xFFFFFFFF, 0xFFE3F98D, 0x8D99C3FF, 0xFF839983, 0x9FC3FFFF, 0xFFC19999, 0xC1F9F9FF, 0xFF83F9F9, 0xF983FFFF, 0xFF839999, 0x839F9FFF, 0xFFC3F981, 0x99C3FFFF, 0xFFF3F3F3, 0xC1F387FF, 0xC39F8399, 0x9983FFFF, 0xFF999999, 0xC1F9F9FF, 0xFFC3E7E7, 0xE3FFE7FF, 0xE3C9CFCF, 0xCFFFCFFF, 0xFF99C9E1, 0xC9D9F9FF, 0xFFE7E7E7, 0xE7E7E3FF, 0xFF9C9C94, 0x80C8FFFF, 0xFF999999, 0x99C1FFFF, 0xFFC39999, 0x99C3FFFF, 0xF9F9C199, 0x99C1FFFF, 0x9F9F8399, 0x9983FFFF, 0xFFF9F9F9, 0x99C1FFFF, 0xFFC18FC3, 0xF183FFFF, 0xFFCFE7E7, 0xE781E7FF, 0xFF839999, 0x9999FFFF, 0xFFE7C399, 0x9999FFFF, 0xFFC98094, 0x9C9CFFFF, 0xFF99C3E7, 0xC399FFFF, 0xC39F8399, 0x9999FFFF, 0xFF81F3E7, 0xCF81FFFF, 0xE7F3F3F9, 0xF3F3E7FF, 0xF3F3F3F3, 0xF3F3F3FF, 0xE7CFCF9F, 0xCFCFE7FF, 0xFFFFFFCD, 0x81B3FFFF);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 Coord = ivec2(floor(fragCoord));\n    int GlyphsPerRow = int(floor(iResolution.x)) / 8;\n    int RowsNeeded = int(ceil(95.0 / float(GlyphsPerRow)));\n    ivec2 Cell = (Coord / 8) % ivec2(GlyphsPerRow, RowsNeeded);\n    int CharCode = (Cell.y * GlyphsPerRow + Cell.x) % 95;\n    ivec2 Pixel = ivec2(Coord.x % 8, Coord.y % 8);\n    Pixel.y = (7 - Pixel.y) % 4;\n    int GlyphHalf = (Coord.y / 4) % 2;\n    int GlyphIndex = CharCode * 2 + GlyphHalf;\n    int Glyph = GLYPHS[GlyphIndex];\n    int Mask = 1 << (Pixel.y * 8 + Pixel.x);\n    if ((Glyph & Mask) == 0)\n    {\n       \tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n\t   \tfragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}