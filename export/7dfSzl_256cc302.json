{"ver":"0.1","info":{"id":"7dfSzl","date":"1619036274","viewed":99,"name":"CG-2","username":"ju_kom","description":"Икосаэдр с каплями воды в тумане\n+Мягкие тени \n+Окружение в виде текстурированного куб-мапа ","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["icosahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float PI = 3.14159265358979323846;\nconst float EPS = 1e-5;\n\nconst float ico_a = 0.525731;\nconst float ico_b = 0.850651;\nconst int ICO_FACES = 20;\nconst float MARCH_SIZE = 0.01;\n\nconst float AIR_N = 1.0;\n\n//const vec3 CAMERA_POS = vec3(2, 1.2, -5);\n//const vec3 CAMERA_POS = vec3(-5, 1.2, 1);\nconst vec3 CAMERA_POS = vec3(1, 1.2, -5);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\nconst vec3 LIGHT2_COLOR = vec3(0, 0.3, 0.9);\nvec3 randDir;\n\nconst float NOIZE_AMPLITUDE = 0.15;\nconst vec3 WATER_COLOR = vec3(0, 0.3, 0.9);\n\nstruct TriangleHit {\n    float t;\n    vec3 bary;\n    vec3 normal;\n};\nconst TriangleHit noHit = TriangleHit(INF, vec3(0.0), vec3(0.0));\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.8 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -0.8) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -0.8) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nconst uvec3 icoIndices[ICO_FACES] = uvec3[ICO_FACES](\n    uvec3(0, 1, 4),\n    uvec3(0, 6, 1),\n    uvec3(2, 5, 3),\n    uvec3(2, 3, 7),\n    \n    uvec3(4, 5, 8),\n    uvec3(4, 10, 5),\n    uvec3(6, 9, 7),\n    uvec3(6, 7, 11),\n\n    uvec3(8, 9, 0),\n    uvec3(8, 2, 9),\n    uvec3(10, 1, 11),\n    uvec3(10, 11, 3),\n    \n    uvec3(0, 4, 8),\n    uvec3(0, 9, 6),\n    uvec3(1, 10, 4),\n    uvec3(1, 6, 11),\n    uvec3(2, 8, 5),\n    uvec3(2, 7, 9),\n    uvec3(3, 11, 7),\n    uvec3(3, 5, 10)\n);\n\nvec3 icoVec(uint index) {\n    uint i = index / 4u;\n    uint j = index - i * 4u;\n    float asign = (j & 1u) == 1u ? -1.0 : 1.0;\n    float bsign = j >= 2u ? -1.0 : 1.0;\n    \n    if (i == 0u) {\n        return vec3(0.0, asign * ico_a, bsign * ico_b);\n    } else if (i == 1u) {\n        return vec3(bsign * ico_b, 0.0, asign * ico_a);\n    } else {\n        return vec3(asign * ico_a, bsign * ico_b, 0.0);\n    }\n}\n\nTriangleHit rayIcoHit(vec3 origin, vec3 dir, uvec3 indices) {\n    vec3 v1 = icoVec(indices.x);\n    vec3 v2 = icoVec(indices.y);\n    vec3 v3 = icoVec(indices.z);\n    vec3 d12 = v2 - v1;\n    vec3 d13 = v3 - v1;\n    vec3 h = cross(dir, d13);\n    vec3 s = origin - v1;\n    vec3 q = cross(s, d12);\n    \n    float a = dot(d12, h);\n    float f = 1.0 / a;\n    float u = dot(s, h) * f;\n    float v = dot(dir, q) * f;\n    float w = 1.0 - u - v;\n    float t = dot(d13, q) * f;\n    \n    if (t >= 0.0001 && u < 1.0 && u >= 0.0 && v >= 0.0 && w > 0.0) {\n        TriangleHit hit;\n        hit.t = t;\n        hit.normal = normalize(cross(d12, d13));\n        hit.bary = vec3(u, v, w);\n        return hit;\n    }\n\n    return noHit;\n}\n\nTriangleHit Hit(vec3 origin, vec3 dir, float nEnter) {\n    for (int i = 0; i < ICO_FACES; i++) {\n        TriangleHit hit = rayIcoHit(origin, dir, icoIndices[i]);\n            if (nEnter == AIR_N && hit != noHit && dot(dir, hit.normal) < 0.0) {\n                return hit;\n            } else if (nEnter != AIR_N && hit != noHit) {\n                return hit;\n            }\n        }\n    return noHit;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    TriangleHit hit = Hit(pos, dir, AIR_N);\n    if (hit.t < dist) {\n        return true;\n    }\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0) { \n        return reflect(v, normal); \n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos) {\n    return length(pos) - 1.0;\n}\n\nfloat beerLambert(float absorptionCoefficient, float distanceTraveled) {\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir) {\n    float t = fogSdf(pos);\n    float opacity = 1.0;\n    float absorption = 7.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= beerLambert(absorption * (texture(iChannel3, curPos * 0.2).x + texture(iChannel3, curPos * 0.4).x\n                                               + texture(iChannel3, curPos * 0.8).x + texture(iChannel3, curPos * 1.6).x) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0, 3, 4) * totalAbs, 1.0 - opacity);\n}\n\nfloat waterSdf(vec3 pos) {\n    float displacement = (sin(27.0 * pos.x) * sin(27.0 * pos.y) * sin(27.0 * pos.z) + 0.5) * NOIZE_AMPLITUDE;\n    return length(pos) - (0.15 + displacement);\n}\n\nvec3 waterSdfNormal(vec3 pos) {\n    const float E = 0.01;\n    return normalize(vec3(waterSdf(vec3(pos.x + E, pos.y, pos.z)) - waterSdf(vec3(pos.x - E, pos.y, pos.z)),\n                          waterSdf(vec3(pos.x, pos.y + E, pos.z)) - waterSdf(vec3(pos.x, pos.y - E, pos.z)),\n                          waterSdf(vec3(pos.x, pos.y, pos.z  + E)) - waterSdf(vec3(pos.x, pos.y, pos.z - E))));\n}\n\nfloat Water(vec3 pos, vec3 dir, out vec3 normal, int tmp) {\n    float t = waterSdf(pos);\n    if (tmp == 0) {\n      for (int i = 0; i < 150; i++) {\n            vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n            float sdf = waterSdf(curPos);\n            if (sdf < 0.0) {\n                normal = waterSdfNormal(curPos);\n                return float(i) * MARCH_SIZE + t;\n            }\n      }  \n    } else {\n        for (int i = 0; i < 150; i++) {\n            vec3 curPos = pos + (float(i) * MARCH_SIZE) * dir;\n            float sdf = waterSdf(curPos);\n            if (sdf > 0.0) {\n                normal = waterSdfNormal(curPos);\n                return float(i) * MARCH_SIZE;\n            }\n        }\n    }\n    return INF;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    \n    float n1 = AIR_N;\n    const float WATER_N = 1.33;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    \n    float WATER_R = pow2(GLASS_N - WATER_N) / pow2(GLASS_N + WATER_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    vec3 reflMult = vec3(0.5, 0.5, 0.5);\n    \n    for (int i = 0; i < 10; ++i) {\n        bool is_water = false;\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        randVals = vec3(rand(float(iFrame + i)), rand(float(iFrame + 5 + i)), rand(float(iFrame + 15 + i)));\n        \n        TriangleHit hit;\n        hit = Hit(curPos, curDir, nEnter);\n        if (hit.t < t) {\n            is_water = false;\n            t = hit.t;\n            normal = hit.normal;\n            if (randVals.x < GLASS_R * 10.0) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 20.0) {\n                materialType = EMISSION;\n                vec3 worldPos = t * curDir + curPos;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * colorMult;\n                colorMult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 waterNorm;\n        float waterT = Water(curPos, normalize(curDir + randVals * 0.02), waterNorm, 0);\n        if (waterT < t) {\n            t = waterT;\n            normal = waterNorm;\n            is_water = true;\n            float randomValue = randVals.x;\n            \n            vec3 newNormal = normal;\n            if (dot(normalize(curDir + randVals * 0.02), newNormal) < 0.0) {\n                newNormal = -newNormal;\n            }\n            if (randomValue < WATER_R) {\n                materialType = REFLECTION;\n                is_water = false;\n            } else {\n                materialType = REFRACTION;\n                colorMult += vec3(0, 0.4, 0.9) ;\n                nEnter = WATER_N;\n            }\n        }\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            is_water = false;\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            is_water = false;\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            is_water = false;\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            is_water = false;\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color*colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                worldPos = (t - EPS) * curDir + curPos;\n                fragColor.rgb = mix(fragColor.rgb, computeLight(worldPos, color, normal), colorMult);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                 if (!is_water) {\n                   curDir = refraction(normalize(curDir), normalize(normal), n1, nEnter);\n                } else {\n                   curDir = refraction(normalize(curDir + randVals * 0.02), normalize(normal), n1, nEnter);\n                }\n                curPos = worldPos + curDir * EPS;\n                n1 = nEnter;\n                if (is_water) {\n                    nEnter = GLASS_N;\n                    float waterOut;\n                    vec3 waterNormal;\n                    waterOut = Water(curPos, curDir, waterNormal, 1);\n                    float randomValue = randVals.y;\n                    curPos = curPos + (waterOut + EPS) * curDir;\n                    vec3 newNormal = waterNormal;\n                    if (dot(curDir, newNormal) < 0.0) {\n                        newNormal = -newNormal;\n                    }\n                    if (randomValue < WATER_R) {\n                        curDir = reflect(curDir, waterNormal);\n                    } else {\n                        curDir = refraction(curDir, waterNormal, n1, nEnter);\n                    }\n                    n1 = nEnter;\n                }\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}