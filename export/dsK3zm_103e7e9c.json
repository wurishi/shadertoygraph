{"ver":"0.1","info":{"id":"dsK3zm","date":"1678871537","viewed":51,"name":"test shader (real","username":"smhmyhead","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 sdfCircle(vec2 uv, float r) {\n  float x = uv.x;\n  float y = uv.y;\n  \n  float d = length(vec2(x, y)) - r;\n  if (d > 0.)\n      return vec3(1.);\n  else return vec3(mix(0.5, 1.0, 1.0 * (sin(3.0 * iTime) + 1.0) / 2.0),mix(0.5, 1.0, 1.0 * (cos(3.0 * iTime) + 1.0) / 2.0) , mix(0.5, 1.0, 1.0 * (sin(3.0 * iTime) + 1.0) / 2.0));\n  \n  \n}\n\nvec3 line(vec2 uv) {\n    vec2 coord = uv/iResolution.xy; //normalise the coordinate\n    coord.x *= (iResolution.x/iResolution.y); //account for aspect ratio\n    if (coord.x == coord.y) // if on diagonal\n        return vec3(1.); // draw white\n    else return vec3(0); //else draw black\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = fragCoord.xy / iResolution.xy;\n     \n     float equation = 0.5 * sin(iTime) * cos(15.0 * uv.x - 1.5 * iTime) + 0.5;\n     \n     if (equation > uv.y + 0.007 || equation < uv.y - 0.007 )\n         fragColor = vec4(0,0,0,0);\n     else fragColor = vec4(1.,1.,1.,0);\n}","name":"Image","description":"","type":"image"}]}