{"ver":"0.1","info":{"id":"X3S3DG","date":"1710093456","viewed":176,"name":"Welding","username":"moji","description":"Welding / sparks","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["2d","particles","buffer"],"hasliked":0,"parentid":"dtdSRn","parentname":"Screen Welding"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Screen Welding 0.6.230524 by QuantumSuper\n// pseudorandom particles leaving traces on a buffer\n// \n\nvoid mainImage( out vec4 col, in vec2 fC){\n    col = getDat( iChannel0, fC);\n    col.rgb *= .5 + .5*abs( cos( .06*iTime + PI/vec3(.5,2.,4.) - PI/3.)); //color shift \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// BUFFER A (0.61) of Screen Welding by QuantumSuper\n// draw points on lots of different parabolas & use unclamped buffer as heatmap history\n// \n\n#define numOfParts 50.\n#define aTime iTime/34.\n\nfloat hash21(vec2 p){ //pseudorandom generator, see The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nvec2 parametricParabola(float t, vec2 seed){\n    float d = .1 + 3.*hash21(.678*seed.yx); //y-stretch\n    float c = sign(t) * (.01 + 2.*hash21(.987*seed)); //maximum shift\n    float b = abs(c) + hash21(.285*seed) + .001; //x-stretch\n    float a = c*c/b/b; //origin height\n    t -= c/b;\n    return vec2( b*t+c, (a-t*t)*d);\n}\n\nfloat lightUp(float dist, vec2 modif){ //light around dist=0\n    return 6.*smoothstep(.025*modif.x, .0, dist)+clamp(.00008/dist/dist,.0,1.)+(1.+modif.y)*.0001/dist; \n    //combined semi-hard shape with semi-soft & soft glow\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\n    // View definition\n    vec2 uv = 6. * (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -3 to 3, square aspect ratio       \n    uv += 0.01; //shape definitions\n\n    // Draw particles\n    float mySpeed, \n          myTime;\n    vec2 myMod,\n         seed = vec2(iTime);\n    vec3 myColor,\n         col = vec3(0);   \n    \n    for (float n=0.;n++<numOfParts;){\n        myTime = iTime/2. + n/numOfParts;\n        seed = vec2(ceil(myTime)*.123,ceil(myTime)*.456);\n        mySpeed = sign(.5-hash21(seed+.123*n)) * (1.5+2.5*hash21(seed*n*.456));\n        myMod = vec2( hash21(seed/n*.123), 5.+25.*hash21(seed/n*.456));\n        myColor = fract(-myTime) * vec3( 1.+fract(myTime), .5+.6*fract(-myTime), .2+fract(-myTime)*fract(-myTime));\n        col += myColor * lightUp( length( uv - parametricParabola( .7*fract(myTime)*mySpeed, seed*n)), myMod);\n        \n\t} \n    \n    // Utility\n    //col += step(fract(uv.x)-.005,.01)+step(fract(uv.y)-.005,.01); //grid\n\n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// COMMON (0.1) of Screen Welding by QuantumSuper\n// \n// \n\n#define PI 3.14159265359\n\n#define getDat(buf,addr) texelFetch( buf, ivec2(addr), 0)","name":"Common","description":"","type":"common"}]}