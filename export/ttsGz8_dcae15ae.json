{"ver":"0.1","info":{"id":"ttsGz8","date":"1556295614","viewed":63,"name":"Polar Coordinates Experiments","username":"toridango","description":"Experiments with polar coordinates","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define EPS 0.01\n\n// Imperial Japan with rotation\n/*\nvec2 uv = (fragCoord - 0.1 * iResolution.xy) / iResolution.y;\nvec2 pol = vec2(atan(uv.y, uv.x), length(uv));\nvec3 col = vec3(iTime*sin(pol.y), cos(pol.y), tan(2.0*iTime+pol.x*iTime*-0.01));\nfragColor = vec4(col,1.0);\n*/\n\n// Sakura\n/*\nvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\nvec2 pol = vec2(atan(uv.y, uv.x), length(uv));\npol = vec2(pol.x/6.2831 + 0.5, pol.y);\nfloat m = min(fract(pol.x*5.0), fract(1.0 - pol.x*5.0));\nfloat f = smoothstep(0.0, 0.1, m*0.3 + 0.2 - pol.y);\nfragColor = vec4(0.8*f, 0.5*f, 0.7*f, 1.0);\n*/\n\n// Hurricane-ish\n/*\nvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\nvec2 pol = vec2(atan(uv.y, uv.x), length(uv));\npol = vec2(pol.x/5.24 - 0.1*iTime + pol.y, pol.y);\nfloat m = min(fract(pol.x*5.0), fract(1.0 - pol.x*5.0));\nfloat f = smoothstep(0.0, 0.1, m*0.3 + 0.2 - pol.y);\nfragColor = vec4(f);\n*/\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    // Polar coordinates \n    vec2 pol = vec2(atan(uv.y, uv.x), length(uv));\n\t//vec3 col = vec3(iTime+sin(pol.y), cos(pol.y), sin(2.0*iTime+pol.x*iTime*-0.015)/1.2);\n\tvec3 col = vec3(iTime+sin(pol.y), cos(pol.y), sin(2.0*iTime+pol.x*iTime*-0.015)/1.6);\n    \n    pol = vec2(pol.x/5.24 - 0.1*iTime + pol.y, pol.y);\n    \n    float m = min(fract(pol.x*5.0), fract(1.0 - pol.x*5.0));\n    \n    //vec3 col = 0.5 + 0.5*cos(iTime + pol.xyx + vec3(0,2,4));\n    //vec3 col = vec3(sin(pol.y), cos(pol.y), tan(-1.0*iTime+pol.x));\n    \n    float f = smoothstep(0.0, 0.1, m*0.3 + 0.2 - pol.y);\n    // Output to screen\n    fragColor = vec4(f*col, f);\n    //fragColor = vec4(col, 1.0);\n    //fragColor = distance(vec3(0.0), fragColor.xyz) < EPS ? vec4(1.0) : fragColor;\n}","name":"Image","description":"","type":"image"}]}