{"ver":"0.1","info":{"id":"wtlXRl","date":"1563967412","viewed":224,"name":"Pulfrich 3D Effect","username":"jackdavenport","description":"This is my attempt to create the Pulfrich effect optical illusion. If you cover your right eye with the lens of a pair of sunglasses, the sphere should appear 3D. See: https://www.youtube.com/watch?v=Q-v4LsbFc5c","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","sphere","illusion","pulfrich"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pulfrich 3D Effect by jackdavenport\n// All code is free to use with appropriate credit :)\n//\n// This shader and the code within it is licensed under CC BY 4.0\n// See https://creativecommons.org/licenses/by/4.0/ for more information\n//\n// For more information on how this optical illusion works, see the video \n// at https://www.youtube.com/watch?v=Q-v4LsbFc5c to learn more.\n\n#define PI     3.14159265359\n#define TWO_PI 6.28318530718\n\nconst vec3 spherePos = vec3(0.);\nconst vec3 lightDir  = normalize(vec3(45.,30.,-45.));\n\nfloat sphere(vec3 ro, vec3 rd, vec3 p, float r) {\n    float a = dot(rd, rd);\n   \tfloat b = dot(rd, ro - p) * 2.;\n    float c = dot(ro - p, ro - p) - (r*r);\n    float d = (b*b) - 4. * a * c;\n    \n    float l = (-b - sqrt(d)) / 2. * a;\n    \n    return l >= 0. && d >= 0. ? l : -1.;\n}\n\nvec3 shade(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0.);\n    float t  = sphere(ro, rd, spherePos, 1.);\n    \n    if(t > -1.) {\n        vec3 p = ro + rd * t;\n        vec3 n = normalize(p-spherePos);\n        vec3 r = normalize(reflect(rd, n));\n        \n        float ndotl = max(dot(n,lightDir),.2);\n        float rdotl = max(dot(r,lightDir),0.);\n        \n        vec2 uv = vec2(atan(n.x,n.z) / TWO_PI, n.y * .5) + .5;\n        col = texture(iChannel2, uv * 3.).xyz * ndotl + pow(rdotl, 30.);\n        \n        vec3 refl = texture(iChannel1, r).xyz;\n        float frs = 1.-clamp(pow(max(-dot(rd,n),0.),.5),0.,1.);\n        col = mix(col, refl, frs);\n    } else {\n        col = texture(iChannel0, rd).xyz;\n    }\n    \n    // light flare\n    float flr = pow(max(dot(rd,lightDir),0.),20.);\n    col += flr;\n    \n    return col;\n}\n\n//---------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec3 ro = vec3(0.,0.,0.);\n    vec3 rd = vec3(uv, 1.);\n    \n    // calculate camera origin and direction\n    float  t = iTime * PI * .2;\n    vec3 eye = vec3(cos(t),0.,sin(t)) * 4.;\n    vec3 f   = normalize(spherePos-eye);\n    vec3 u   = normalize(cross(f, vec3(0.,1.,0.)));\n    vec3 v   = normalize(cross(u, f));\n    ro += eye;\n    rd  = mat3(u,v,f) * rd;\n    \n    // shade pixel\n    fragColor.xyz = shade(ro, normalize(rd));\n    fragColor.w   = 1.;\n}","name":"Image","description":"","type":"image"}]}