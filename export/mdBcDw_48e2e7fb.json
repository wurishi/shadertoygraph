{"ver":"0.1","info":{"id":"mdBcDw","date":"1700603018","viewed":70,"name":"Drop Distance","username":"spalmer","description":"golfing [url=http://shadertoy.com/view/4lcBWn]iq sdUnevenCapsule2d[/url]","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","unevencapsule"],"hasliked":0,"parentid":"DslcWB","parentname":"Early skipping sdCapsule"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based vaguely on iquilezles.org/articles/distfunctions2d\n// at some point I did begin with Inigo's sdUnevenCapsule2d, iirc,\n// http://shadertoy.com/view/4lcBWn\n// then golfed the fork out of it\n\n// interpolate a point at origin, to sphere at b with radius r\nfloat drop(vec2 p, vec2 b, float r)\n{\n\tfloat h = length(b);\n    if (h <= r) return length(p) - r;\n\tp = vec2(dot(vec2(-b.y, b.x), p), dot(p, b)) / h; // unrotate along y axis\n\tp.x = abs(p.x); // for 2d we must simply mirror the x axis\n\tfloat s = -r / h, c = sqrt(1. - s * s), // sin and cos of cone half angle\n\t  k = dot(p, vec2(-s, c)); // distance measured diagonally along cone from tip via perpdot\n\treturn k < 0.\n\t\t? length(p) // origin vertex voronoi\n\t\t: k > c*h\n\t\t? length(p - vec2(0, h)) - r // h vertex voronoi\n\t\t: dot(p, vec2(c, s)); // conic distance\n}\n\nfloat map(vec2 p) \n{\n    // iq animate\n    vec2 b = cos(iTime + vec2(0.0,2.00) + 0.0),\n\t     a = cos(iTime + vec2(0.0,1.50) + 1.5);\n    float rb = .5 - .5*cos(.3*iTime),\n          ra = .3 - .3*cos(0.+1.3*iTime);\n    //vec2 a = vec2(-.3, -.3), b = vec2(.5, .5); float ra = .1, rb = .3\n    return drop(p - a, b - a, rb - ra) - ra;\n}\n\nvoid mainImage(out vec4 o, vec2 u)\n{\nfloat s = 1.4;\n    vec2 r = iResolution.xy,\n\t     p = (2.*u-r)*s/r.y,\n         m = vec2(.9);\n\n\tfloat d = map(p);    \n\n    vec3 c = d > 0. ? vec3(.9,.6,.3) : vec3(.65,.85,1);\n    c *= 1. - exp2(-9. * abs(d));\n\tc *= .8 + .2*cos(150. * d);\n\tc = mix(vec3(1), c, smoothstep(0.,6./r.y,abs(d)));\n    if (iMouse.z > .0) m = (2.*iMouse.xy-r)*s/r.y;\n    if (true) { // circle\n        d = map(m);\n        c = mix(vec3(1,1,0), c, smoothstep(0., 4./r.y, abs(length(p-m) - abs(d)) - 2./r.y));\n    }\n\to = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}