{"ver":"0.1","info":{"id":"XlKczR","date":"1534880094","viewed":1030,"name":"Procedural Hexagons","username":"pedrolb","description":"A simple way to create procedural hexagons","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["procedural","hexagons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float uvTile = 10.0;\nfloat hexagonSeparation = 0.05; //[0.0, 1.0]\nfloat hexagonAspect = sqrt(3.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    uv.y *= hexagonAspect;\n    \n    vec2 uvTiled = uv * uvTile + iTime;\n    vec2 uvOffset = uvTiled + floor((uvTiled.y) / 1.5) * 0.5;\n    vec2 uvChanged = abs(fract(uvOffset) - 0.5) * 2.0;\n    \n    float hexagonMask = 0.0;\n    \n    if(mod(uvTiled.y, 1.5) < 1.0)\n    {\n    \thexagonMask = step(uvChanged.x, 1.0 - hexagonSeparation);\n    }\n    else\n    {\n        hexagonMask = \n                step(uvChanged.x + hexagonSeparation * hexagonAspect, uvChanged.y) + \n                step(uvChanged.y + hexagonSeparation * hexagonAspect, uvChanged.x);\n    }\n\n    // Output to screen\n    //fragColor = vec4(uvChanged, 0.0, 1.0);\n    fragColor = vec4(hexagonMask);\n}","name":"Image","description":"","type":"image"}]}