{"ver":"0.1","info":{"id":"DlVcDD","date":"1700244042","viewed":32,"name":"Audio History Texture Smoothed","username":"MV10","description":"Green is the time-smoothed variant of Audio History data (averages current and previous N values).\nUsing BufferA and Soundcloud in iChannel1. See comments.\nMost clearly visible with highly synthetic music. Re-saved, Soundcloud is working now.","likes":0,"published":1,"flags":96,"usePreview":0,"tags":["audio","history"],"hasliked":0,"parentid":"msKfDR","parentname":"Audio History Texture"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n  RED: Audio history (https://www.shadertoy.com/view/msKfDR)\n  GREEN: Smoothed (averaged) audio history\n\n  The top row (max Y) is current audio data. Each row below that is\n  increasingly older. BufferA \"scrolls\" this one row down per frame.\n  \n  This variation has the current data in red on the left, and the\n  time-smoothed data on the right in green. This really grew out of\n  something I'm working on with full-desktop OpenGL 4.x. In the world\n  of web browsers, the concept of smoothing is a little bit weird\n  because the WebAudio specification already applies a smoothing effect\n  (80% of the \"current\" FFT is actually the previous sample, only 20%\n  of the current value is actually returned). But even smoothed data can\n  be smoothed further, and here we are. Plus, I wanted REALLY smoothed\n  data for a sound viz conversion I have in mind.\n  \n  Note this smoothing is really just averaging previous samples with\n  the current sample. A weighted average would also be interesting.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MstGz2","filepath":"https://soundcloud.com/space_wizard_music/the-maze-guardian","previewfilepath":"https://soundcloud.com/space_wizard_music/the-maze-guardian","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LOD 0\n\n// number of rows of history data to average with current-frame sample\n#define samples 15\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sigh ... fragCoord.y isn't 0-to-resolution, it's 0.5 to resolution minus 0.5\n\n    // top row is new (current) audio data\n    if(fragCoord.y == iResolution.y - 0.5)\n    {\n        vec2 uv = fragCoord / iResolution.xy;\n\n        // sample the range twice, once for each half\n        float freq = (uv.x - step(uv.x, 0.5) * 0.5) * 2.0;\n        float fft = texture(iChannel1, vec2(freq, 0.5)).x;\n\n        // left/red is FFT data as Shadertoy provides it\n        if(uv.x < 0.5)\n        {\n            fragColor = vec4(fft, 0.0, 0.0, 1.0);\n        }\n        \n        // right/green is smoothed (averaged) data; the\n        // current sample and history rows on the left half\n        // are averaged and copied to the right half; keep in\n        // mind the top row of iChannel0 is the previous frame's\n        // current data, not what will be output by the first half\n        // of the if/else block above.\n        else\n        {\n            int x = int((uv.x - 0.5) * iResolution.x);\n            float sum = fft;\n            for(int y = 0; y < samples; y++)\n                sum += texelFetch(iChannel0, ivec2(x, int(iResolution.y) - y), LOD).r;\n\n            float averaged = sum / float(samples + 1);\n            fragColor = vec4(0.0, averaged, 0.0, 1.0);\n        }\n    }\n\n    // subsequent rows are history data\n    else\n    {\n        // copy from one row above into the current row\n        ivec2 xy = ivec2(fragCoord.x, fragCoord.y + 1.0);\n        fragColor = texelFetch(iChannel0, xy, LOD);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}