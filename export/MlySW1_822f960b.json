{"ver":"0.1","info":{"id":"MlySW1","date":"1484319880","viewed":194,"name":"Mandelbulb infinite marcher","username":"pixartist","description":"Mandelbulb fractal marcher\nControls: \nWASD, Space, alt to move\nDrag mouse to rotate\nQ to decrease movement speed, E to increase movement speed","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["fractalmarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This raymarcher is designed in a way that ray-information is stored (in buf b) and ray marching is resumed each frame.\n//This way near infinite (bounded by float-accuracy) fidelity can be achieved over time.\n//Settings for the ray marcher are in buf b and buf c (buf a does the final render at the location given by buf b)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n    fragColor /= fragColor.a;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//This program is for controls / keyboard and mouse input\nconst float PI = 3.14159265359;\n//movement speed\n\nint kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nint k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nint kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40,kCtrl=17;\nfloat ReadKeyFloat(int key)\n{\n\tfloat keyVal = texture( iChannel0, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal;\n}\nvec4 readData(int x, int y)\n{\n    return texture(iChannel1, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\nbool checkPos(int x, int y, vec2 fc)\n{\n    return int(fc.x) == x && int(fc.y) == y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = readData(0,6).r;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel1, uv);\n    self.a = 0.0;\n\tif(iFrame < 5)\n    {\n        if(checkPos(0,0,fragCoord))\n    \t{\n            //set your initial position\n        \tself = vec4(0.0, 0.0, 2000.0, 0.0);\n        }\n        else if(checkPos(0,2,fragCoord))\n    \t{\n            self.rg = vec2(0.0);\n            self.a = 1.0;\n        }\n        else if(checkPos(0,3,fragCoord))\n    \t{\n            self.rg = iResolution.xy * 0.5;\n            self.a = 1.0;\n        }\n        else if(checkPos(0,4,fragCoord))\n    \t{\n            self.r = 1.0;\n        }\n        else if(checkPos(0,1, fragCoord))\n        {\n            //and direction here\n            self = vec4(0.0, 0.0 ,-1.0, 1.0);\n        }\n        else if(checkPos(0,6,fragCoord)) // speed\n        {\n            self.r = 10.0;\n        }\n    }\n\n    //Position with WASD, space and ctrl\n    if(checkPos(0,0,fragCoord))\n    {\n        \n        vec3 fw = readData(0, 1).rgb;\n        if(ReadKeyFloat(kW) > 0.0)\n        {\n            self += vec4(fw * speed, 1.0);\n        }\n        if(ReadKeyFloat(kS) > 0.0)\n        {\n            self -= vec4(fw * speed, -1.0);\n        }\n        if(ReadKeyFloat(kA) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            self -= vec4(right * speed, -1.0);\n        }\n        if(ReadKeyFloat(kD) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            self += vec4(right * speed, 1.0);\n        }\n        if(ReadKeyFloat(kSpace) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            vec3 up = cross(fw, -right);\n            self += vec4(up * speed, 1.0);\n        }\n        if(ReadKeyFloat(kCtrl) > 0.0)\n        {\n            vec3 right = cross(fw, vec3(0.0, 1.0, 0.0));\n            vec3 up = cross(fw, -right);\n            self -= vec4(up * speed, -1.0);\n        }\n    }\n    //Direction by mouse\n    else if(checkPos(0,1,fragCoord))\n    {\n        vec3 lmp = readData(0, 2).xyw;\n        if(lmp.z > 0.0)\n        {\n            \n            float x = (lmp.x / iResolution.x) * PI * 2.0 * 2.0;\n            float y = (lmp.y / iResolution.y) * PI;\n            float upDown = -cos(y);\n            vec3 d = vec3(cos(x), upDown * 2.0, sin(x));\n            self = vec4(normalize(d), 1.0);\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    } \n    //mouse loca\n    else if(checkPos(0,2,fragCoord))\n    {\n        vec4 lmp = readData(0, 3).xyzw;\n        if(lmp.w > 0.0)\n        {\n            if(lmp.z <= 0.0)\n                lmp.xy = iMouse.xy;\n            self.xy += vec2(iMouse.x - lmp.x ,iMouse.y - lmp.y);\n            self.y = clamp(self.y, 0.0, iResolution.y);\n            self.a = 1.0;\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    //last mouse pos\n    else if(checkPos(0,3,fragCoord))\n    {\n        if(iMouse.z > 0.0)\n        {\n            self = vec4(iMouse.x,iMouse.y, 1.0, 1.0);\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    else if(checkPos(0,4,fragCoord))\n    {\n    }   //reset\n    else if(checkPos(0,5,fragCoord))\n    {\n        self.r = readData(0,0).a + readData(0,1).a;\n    } \n    else if(checkPos(0,6,fragCoord)) // speed\n    {\n        if(self.g <= 0.0)\n        {\n            if(ReadKeyFloat(kE) > 0.0)\n            {\n                self.r = min(50.0, self.r * 2.0);\n                self.g = 1.0;\n            }\n            if(ReadKeyFloat(kQ) > 0.0)\n            {\n                self.r = max(0.05, self.r / 2.0);\n                self.g = 1.0;\n            }\n        }\n        else\n        {\n            self.g -= 0.1;\n        }\n    }   \n    fragColor = self;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Created by pixartist (pixartist dot de at gmail dot com)\n//Feel free to use this as long as you credit me\n\n\n//seed for random algorithm\nvec2 seed = vec2(0.0);\n//global uv coordinate\nvec2 uv;\n//color of self\nvec4 self;\n//helper for RNG\n#define uv2 uv+vec2(72.12, -12.423457)*mod(seed.y, 23.12639)\n\n//mmmhh PIE\nconst float PI = 3.14159265359;\n\n\n//\n//SETTINGS, SHOULD BE THE SAME IN BUF B AND BUF C !!!\n//\n//power of the mandelbulb fractal\nconst int power = 8;\n//number of iterations of the mandelbulb algorithm\nconst int iterations = 325;\nconst int iterationsMoving = 15;\n//minimum distance for the tracer to step out. Lower value = finder details\nconst float minDist = 0.00005;\nconst float minDistMoving = 0.0005;\n//inner sphere radius\nconst float innerRad = 0.4;\n//outer sphere radius (unused)\nconst float outerRad = 1.5;\n//width of the camera plane\nconst float camSize = 0.001;\n//iterator steps of the tracer\nconst int steps = 80;\nconst int stepsMoving = 50;\n//\nconst float rayJitter = 0.000015;\n//\nconst float rayMarcherStepLengthFactor = 0.1;\n\n//\n//END OF GLOBAL SETTINGS\n//\nfloat minDistF;\nfloat stepF;\n//ray struct\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n};\n\n//reads data from input buffer (for controls)\nvec4 readData(int x, int y)\n{\n    return texture(iChannel1, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\n\n\n//custom random function\nfloat rand() \n{ \n    vec2 s = uv2;\n    float n = fract(sin(seed.x+=1.0)*43758.5453123);\n    return fract(n + fract(sin(dot(vec2(n * s.y, s.x)*0.123,vec2(12.9898,78.233))) * 43758.5453));\n}\n//returns a random direction vector inside the hemisphere of the given normal\nvec3 rndDirHemisphere(vec3 n)\n{\n    float r2 = rand();\n    float phi = 2.0*PI*rand();\n    float sina = sqrt(r2);\n    float cosa = sqrt(1. - r2);\n    vec3 w = normalize(n), u = normalize(cross(w.yzx, w)), v = cross(w, u);\n\treturn (u*cos(phi) + v*sin(phi)) * sina + w * cosa;\n}\n//returns a random direction vector inside the hemisphere of the given normal mixed with the given normal by a factor\nvec3 weightedRndDirHemisphere(vec3 n, float randomness)\n{\n    return mix(n, rndDirHemisphere(n), randomness);\n}\n//creates a view\nRay makeView(vec3 p, vec3 up, vec3 tgt)\n{\n    float f = iResolution.x / iResolution.y;\n    vec3 dir = normalize(tgt - p);\n    up = normalize(up);\n    vec3 right = cross(dir, up);\n    Ray res;\n    vec3 uv3 = right * (uv.x - 0.5) * f + up * (uv.y - 0.5);\n    res.o = (p + uv3) * camSize;\n    res.d = dir + uv3 * 1.3;\n    res.d = normalize(weightedRndDirHemisphere(res.d, rayJitter * sqrt(iResolution.x)));\n    return res;\n}\n\n//init is called at the start (after uv was set)\nvoid init()\n{\n    seed.x = (uv.y + iTime * 0.523413187) * sqrt(uv.x * 0.77777777 * iTime);\n    seed.y = iTime;\n}\nvec4 map(vec3 p)\n{\n    p.xyz = p.xzy;\n\tvec3 z = p;\n    \n\tvec3 dz=vec3(0.0);\n    \n\tfloat pf = float(power);\n    \n\tfloat r, theta, phi;\n\tfloat dr = 1.0;\n\t\n\n\tfor(int i = 0; i < iterations; ++i) {\n\t\tr = length(z);\n\t\tif(r > 2.0) \n            return vec4(min(length(p) - innerRad, 0.5 * log(r) * r / dr), float(i) / float(iterations), dr, r);\n\t\ttheta = atan(z.y / z.x);\n\t\tphi = asin(z.z / r);\n\t\t\n\t\tdr = pow(r, pf - 1.0) * dr * pf + 1.0;\n\t\n\t\tr = pow(r, pf);\n\t\ttheta = theta * pf;\n\t\tphi = phi * pf;\n\t\t\n\t\tz = r * vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi)) + p;\n\t\t\n\t}\n\treturn vec4(minDistF, 1.0, dr, r);\n}\nvec4 mapFast(vec3 p)\n{\n    p.xyz = p.xzy;\n\tvec3 z = p;\n    \n\tvec3 dz=vec3(0.0);\n    \n\tfloat pf = float(power);\n    \n\tfloat r, theta, phi;\n\tfloat dr = 1.0;\n\t\n\n\tfor(int i = 0; i < iterationsMoving; ++i) {\n\t\tr = length(z);\n\t\tif(r > 2.0) \n            return vec4(min(length(p) - innerRad, 0.5 * log(r) * r / dr), float(i) / float(iterations), dr, r);\n\t\ttheta = atan(z.y / z.x);\n\t\tphi = asin(z.z / r);\n\t\t\n\t\tdr = pow(r, pf - 1.0) * dr * pf + 1.0;\n\t\n\t\tr = pow(r, pf);\n\t\ttheta = theta * pf;\n\t\tphi = phi * pf;\n\t\t\n\t\tz = r * vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi)) + p;\n\t\t\n\t}\n\treturn vec4(minDistF, 1.0, dr, r);\n}\nvec3 nrm(vec3 p, float d)\n{\n    vec3 n = vec3(d, 0.0, -d);\n    return normalize(vec3(map(p+n.xyy).x - map(p+n.zyy).x, map(p+n.yxy).x - map(p+n.yzy).x, map(p+n.yyx).x - map(p+n.yyz).x));\n}\nvoid trace(Ray r, out float t, inout float iter)\n{\n\tt = self.r;\n    for(int i = 0; i < steps; i++)\n    {\n        vec3 at = r.o + r.d * t;\n        vec4 res = map(at);\n        iter++;\n        if(res.x <= minDistF)\n        {\n            \n            break;\n        }\n        t += res.x * stepF;\n    }\n}\nvoid traceFast(Ray r, out float t, inout float iter)\n{\n\tt = self.r;\n    for(int i = 0; i < stepsMoving; i++)\n    {\n        vec3 at = r.o + r.d * t;\n        vec4 res = mapFast(at);\n        iter++;\n        if(res.x <= minDistF)\n        {\n            \n            break;\n        }\n        t += res.x * stepF;\n    }\n}\n\n\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n\tinit();\n    vec4 pos = readData(0,0);\n    vec4 fw = readData(0,1);\n\n    self = texture(iChannel0, uv);\n    \n    bool moving = fw.a > 0.0 || pos.a > 0.0;\n    bool justStopped = readData(0, 5).r > 0.0;\n    vec3 up = cross(fw.xyz, -cross(fw.xyz, vec3(0.0, 1.0, 0.0)));\n    minDistF = minDist;\n    stepF = rayMarcherStepLengthFactor;\n    seed = self.yz;\n    Ray v = makeView(\n        pos.xyz,\n        up,\n        pos.xyz + fw.xyz\n    );\n    if(moving || justStopped)\n    {\n        minDistF = minDistMoving;\n        stepF = 1.0;\n    }\n    if(moving || iFrame < 1 || justStopped || map(v.o + v.d * self.r).x <= minDist)\n    {\n        self.x = 0.0;\n        self.y = seed.x+1.0;\n        self.z = iTime;\n        self.w = 0.0;\n        seed = self.yz;\n        v = makeView(\n            pos.xyz,\n            up,\n            pos.xyz + fw.xyz\n        );\n       \n    }\n\n    float k;\n    float iter = self.w;\n    if(moving)\n        traceFast(v, k, iter);\n    else\n    \ttrace(v, k, iter);\n    self.x = k;\n    self.w = iter;\n\n    \n    fragColor = self;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Created by pixartist (pixartist dot de at gmail dot com)\n//Feel free to use this as long as you credit me\n\n\n\n//seed for random algorithm\nvec2 seed = vec2(0.0);\n//global uv coordinate\nvec2 uv;\n//color of self\nvec4 self;\n//helper for RNG\n#define uv2 uv+vec2(72.12, -12.423457)*mod(seed.y, 23.12639)\n//mmmhh PIE\nconst float PI = 3.14159265359;\n\n\n//\n//SETTINGS, SHOULD BE THE SAME IN BUF B AND BUF C !!!\n//\n//power of the mandelbulb fractal\nconst int power = 8;\n//number of iterations of the mandelbulb algorithm\nconst int iterations = 325;\n//minimum distance for the tracer to step out. Lower value = finder details\nconst float minDist = 0.00005;\nconst float minDistMoving = 0.0005;\n//inner sphere radius\nconst float innerRad = 0.4;\n//outer sphere radius (unused)\nconst float outerRad = 1.5;\n//width of the camera plane\nconst float camSize = 0.001;\n\n//END OF GLOBAL SETTINGS\n//\nfloat minDistF;\n\n//ray struct\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n};\nbool isNan(float val)\n{\n  return (val <= 0.0 || 0.0 <= val) ? false : true;\n}\n//reads data from input buffer (for controls)\nvec4 readData(int x, int y)\n{\n    return texture(iChannel2, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\n\n\n//custom random function\nfloat rand() \n{ \n    vec2 s = uv2;\n    float n = fract(sin(seed.x+=1.0)*43758.5453123);\n    return fract(n + fract(sin(dot(vec2(n * s.y, s.x)*0.123,vec2(12.9898,78.233))) * 43758.5453));\n}\n//returns a random direction vector inside the hemisphere of the given normal\nvec3 rndDirHemisphere(vec3 n)\n{\n    float r2 = rand();\n    float phi = 2.0*PI*rand();\n    float sina = sqrt(r2);\n    float cosa = sqrt(1. - r2);\n    vec3 w = normalize(n), u = normalize(cross(w.yzx, w)), v = cross(w, u);\n\treturn (u*cos(phi) + v*sin(phi)) * sina + w * cosa;\n}\n//returns a random direction vector inside the hemisphere of the given normal mixed with the given normal by a factor\nvec3 weightedRndDirHemisphere(vec3 n, float randomness)\n{\n    return mix(n, rndDirHemisphere(n), randomness);\n}\n//creates a view\nRay makeView(vec3 p, vec3 up, vec3 tgt)\n{\n    float f = iResolution.x / iResolution.y;\n    vec3 dir = normalize(tgt - p);\n    up = normalize(up);\n    vec3 right = cross(dir, up);\n    Ray res;\n    vec3 uv3 = right * (uv.x - 0.5) * f + up * (uv.y - 0.5);\n    res.o = (p + uv3) * camSize;\n    res.d = dir + uv3 * 1.3;\n    res.d = normalize(weightedRndDirHemisphere(res.d, 0.000015 * sqrt(iResolution.x)));\n    return res;\n}\n\n//init is called at the start (after uv was set)\nvoid init()\n{\n    seed.x = (uv.y + iTime * 0.523413187) * sqrt(uv.x * 0.77777777 * iTime);\n    seed.y = iTime;\n}\n\nvec4 map(vec3 p)\n{\n    p.xyz = p.xzy;\n\tvec3 z = p;\n    \n\tvec3 dz=vec3(0.0);\n    \n\tfloat pf = float(power);\n    \n\tfloat r, theta, phi;\n\tfloat dr = 1.0;\n\t\n    r = length(p) - outerRad;\n    if(r > 1.0) return vec4(r, 0.0, 0.0, 0.0);\n\n\tfor(int i = 0; i < iterations; ++i) {\n\t\tr = length(z);\n\t\tif(r > 2.0) \n        {\n            return vec4(min(length(p) - innerRad, 0.5 * log(r) * r / dr), float(i) / float(iterations), dr, r);\n        }\n\t\ttheta = atan(z.y / z.x);\n\t\tphi = asin(z.z / r);\n\t\t\n\t\tdr = pow(r, pf - 1.0) * dr * pf + 1.0;\n\t\n\t\tr = pow(r, pf);\n\t\ttheta = theta * pf;\n\t\tphi = phi * pf;\n\t\t\n\t\tz = r * vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi)) + p;\n\t\t\n\t}\n\treturn vec4(minDistF, 1.0, dr, r);\n}\nvec3 nrm(vec3 p, float d)\n{\n    vec3 n = vec3(d, 0.0, -d);\n    return normalize(vec3(map(p+n.xyy).x - map(p+n.zyy).x, map(p+n.yxy).x - map(p+n.yzy).x, map(p+n.yyx).x - map(p+n.yyz).x));\n}\n\nbool render(vec4 raw, vec4 hit, vec3 pos, bool moving, out vec3 color)\n{\n    if(hit.x <= minDistF)\n    {\n        vec3 n = mix(nrm(pos, minDistF * 1.0), nrm(pos, minDistF * 5.0), 0.5);\n\n        float brightness = 0.5 + 0.5 * dot(n, normalize(vec3(1., 1., 1.)));\n        if(!moving)\n        {\n\n            //float d1 = clamp(0.5 + 0.5 * (sin((p.y * 10000.0))), 0.0, 1.0);\n            float glow = raw.w / 600.0;\n            glow -= 0.2;\n            //float d3 = length(hit);\n            color.r = glow;\n            color.g = 0.3 * pow(glow,1.5);\n            color.b = 0.05 * pow(glow,2.0);\n            color = clamp( color, vec3(0.0), vec3(1.0));\n            color += vec3(0.1, 0.03, 0.01);\n            color = mix(color * brightness, color, clamp(glow, 0.0, 1.0));\n            //if(raw.x > 5.0)\n            // color = vec3(raw.x, 0.0, 0.0);\n        }\n        else\n        {\n            color = vec3(brightness);\n        }\n        return true;\n    }\n    return false;\n\n}\n\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n\tinit();\n    vec4 pos = readData(0,0);\n    vec4 fw = readData(0,1);\n\tvec3 up = cross(fw.xyz, -cross(fw.xyz, vec3(0.0, 1.0, 0.0)));\n    vec4 self = texture(iChannel0, uv);\n    vec3 color = vec3(0.0);\n    \n    bool moving = fw.a > 0.0 || pos.a > 0.0;\n    bool justStopped = readData(0, 5).r > 0.0;\n    \n\tminDistF = minDist;\n    if(moving)\n        minDistF = minDistMoving;\n    if(moving || justStopped)\n        self = vec4(0.0);\n    \n    vec4 src = texture(iChannel1, uv);\n    seed = src.yz;\n\n    Ray v = makeView(\n        pos.xyz,\n        up,\n        pos.xyz + fw.xyz\n    );\n    vec3 p = v.o + v.d * src.r;\n    vec4 hit = map(p);\n\tfragColor = self;\n   // if(hit.x <= minDistF)\n    {\n        if(render(src, hit, p, moving, color))\n           fragColor += vec4(color, 1.0);\n    }\n}","name":"Buf C","description":"","type":"buffer"}]}