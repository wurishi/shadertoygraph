{"ver":"0.1","info":{"id":"NtlcRS","date":"1648211719","viewed":116,"name":"Basic circular audio visualiser","username":"tipounlogick","description":"Fits into panon kde widget","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sounds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \n\n #define pixel_fill 4.\n\n #define pixel_empty 1.\n\n #define radius 0.6\n\n #define arc_start 20.\n\n #define arc_end 339.\n\n #define flip true\n \n #define shortened false\n  \n\n  \n\n //credit for this function goes to rbn42 \n\n vec4 mean(float _from,float _to) { \n\n     if(_from>1.0) \n\n         return vec4(0); \n\n  \n\n     _from=iChannelResolution[1].x*_from; \n\n     _to=iChannelResolution[1].x*_to; \n\n  \n\n     vec4 v=texelFetch(iChannel1, ivec2(_from,0),0) * (1.0-fract(_from)) ; \n\n  \n\n     for(float i=ceil(_from); i<floor(_to); i++) \n\n         v+=texelFetch(iChannel1, ivec2(i,0),0) ; \n\n  \n\n     if(floor(_to)>floor(_from)) \n\n         v+=texelFetch(iChannel1,ivec2(_to,0),0)* fract(_to); \n\n     else \n\n         v-=texelFetch(iChannel1,ivec2(_to,0),0)*(1.0- fract(_to)); \n\n  \n\n     return v/(_to-_from); \n\n } \n\n  \n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) \n\n { \n\n     //making uv \n\n     float aspect = iResolution.x/iResolution.y; \n\n     vec2 uv= fragCoord/iResolution.xy; \n\n     uv -= vec2(.5); \n\n  \n\n     if(iResolution.x>iResolution.y) \n\n         uv.x *= aspect; \n\n     if(iResolution.x<iResolution.y) \n\n         uv.y /= aspect; \n\n     uv = vec2(degrees(radians(180.)-atan(uv.x,-uv.y)),length(uv)*2.); \n\n  \n\n     //let's gooooooooo \n\n     fragColor = vec4(0.); \n\n     float height_g=1.-radius; \n\n     float rad=radius; \n\n     float unit = pixel_fill+pixel_empty; \n     \n     float pix = pixel_fill;\n     if(shortened) pix *= radius/uv.y;\n  \n\n     if(mod((uv.x-arc_start),unit)<pix && uv.x>arc_start && uv.x<arc_end){ \n\n         //can't find better solution than wrap rbn42's bar shader \n\n         float id=floor((uv.x-arc_start)/unit); \n\n         float arc=arc_end-arc_start; \n\n         vec3 rgb = vec3(1.);\n         vec4 sample1=mean(id*unit/arc,(id+1.)*unit/arc); \n\n         float height=(sample1.r*.5+sample1.g*.5)*height_g; \n\n  \n\n         if(bool(flip)){ \n\n             if(uv.y>=0.99 && uv.y<=1.) fragColor=vec4(rgb*1.,1.); \n\n             if(uv.y>=0.99-height && uv.y<=0.99) fragColor=vec4(rgb*1.,1.); \n\n         }else{ \n\n             if(uv.y>=rad-0.01 && uv.y<=rad) fragColor=vec4(rgb*1.,1.); \n\n             if(uv.y>=rad && uv.y<=rad+height) fragColor=vec4(rgb*1.,1.); \n\n         } \n\n     } \n\n  \n\n }\n","name":"Image","description":"","type":"image"}]}