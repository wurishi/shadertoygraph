{"ver":"0.1","info":{"id":"WdyBWw","date":"1607210812","viewed":223,"name":"Simpler Webcam Edge Detection","username":"oneshade","description":"I've improved (and simplified) the edge detection \"algorithm\" (I don't think it's technically an algorithm anymore ;) ) from my \"Simple Webcam Edge Detection\" shader.","likes":2,"published":3,"flags":2,"usePreview":0,"tags":["edgedetection","webcam","improvement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float brightness = 1.0; // Set to 5.0 for a creepier look.\n\nvec3 webcam(in vec2 xy) {\n    return texture(iChannel0, xy / iResolution.xy).rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 gx = (webcam(fragCoord + vec2(1.0, 0.0)) - webcam(fragCoord - vec2(1.0, 0.0))) * 0.5;\n    vec3 gy = (webcam(fragCoord + vec2(0.0, 1.0)) - webcam(fragCoord - vec2(0.0, 1.0))) * 0.5;\n    fragColor = vec4(dot(abs(gx) + abs(gy), vec3(1.0)) * brightness); // The dot product is just used as a shorthand way to sum up the elements of a vector.\n}","name":"Image","description":"","type":"image"}]}