{"ver":"0.1","info":{"id":"dd2XWd","date":"1671172520","viewed":111,"name":"icecream","username":"karanbpathak","description":"//inspired by : \n// Signed distance and gradient of the quadratic smooth minimum.\n// (https://iquilezles.org/articles/smin)\n// List of other 2D distances+gradients:\n// https://iquilezles.org/articles/distgradfunctions2d\n// and\n// https://www.shadertoy.com","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["gradient","smooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance and gradient of the quadratic smooth minimum.\n// (https://iquilezles.org/articles/smin)\n//\n// Please note that the smooth-minimum is not a SDF preserving\n// operator. It's a good approximation when far enough from the\n// surfaces, but quickly distorts near them. However, the gradient\n// stays smaller than 1, which explains why it does NOT break\n// raymarchers, but just slows them down.\n//\n// List of other 2D distances+gradients:\n//\n// https://iquilezles.org/articles/distgradfunctions2d\n//\n// and\n//\n// https://www.shadertoy.com/playlist/M3dSRf\n\nstruct surf\n{\n    vec4 col;\n    vec3 t;\n};\nint hash( ivec2 z )\n{\n    int n = z.x+z.y*11111;\n    n = (n<<13)^n;\n    return (n*(n*n*15731+789221)+1376312589)>>16;\n}\n// .x = f(p)\n// .yz = ∇f(p) = {∂f(p)/∂x, ∂f(p)/∂y} with ‖∇f(p)‖<1 unfortunatelly\nvec3 sdgSMin( in vec2 p, in vec3 a, in vec3 b, in float k )\n{\n    surf s;\n    float h = max(k-abs(a.x-b.x),0.0);\n    float m = 0.25*h*h/k; // [0 - k/4] for [|a-b|=k - |a-b|=0]\n    float n = 0.50*  h/k; // [0 - 1/2] for [|a-b|=k - |a-b|=0]\n    return vec3( min(a.x,  b.x) - m, \n                 mix(a.yz, b.yz, (a.x<b.x)?n:1.0-n) );\n}\n\n\nvec3 sdgEllipse( vec2 p, in vec2 ab )\n{\n    vec2 sp = sign(p); p = abs( p );\n    \n    bool s = dot(p/ab,p/ab)>1.0;\n    float w = atan(p.y*ab.x, p.x*ab.y);\n    if(!s) w=(ab.x*(p.x-ab.x)<ab.y*(p.y-ab.y))? 1.570796327 : 0.0;\n    \n    for( int i=0; i<4; i++ )\n    {\n        vec2 cs = vec2(cos(w),sin(w));\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    vec2  q = ab*vec2(cos(w),sin(w));\n\n    float d = length(p-q);\n    return vec3( d, sp*(p-q)/d ) * (s?1.0:-1.0);\n}\nvec3 sdgRoundEclipse( in vec2 p, in vec2 b, in float r )\n{\n    vec3 dis_gra = sdgEllipse(p, b);\n    return vec3( dis_gra.x - r, dis_gra.yz );\n}\n\n// .x = f(p)\n// .yz = ∇f(p) = {∂f(p)/∂x, ∂f(p)/∂y} with ‖∇f(p)‖=1\nvec3 sdgBox( in vec2 p, in vec2 b )\n{\n    if (p.x < 0.5){\n        p.x = 1.1*p.x*sin(1.4+p.y);\n    }\n    vec2 w = abs(p)-b;\n    vec2 s = vec2(p.x<0.0?-1:1,p.y<0.0?-1:1);\n    \n    float g = max(w.x,w.y);\n\tvec2  q = max(w,0.0);\n    float l = length(q);\n    \n    return vec3(   (g>0.0)?l   : g,\n                s*((g>0.0)?q/l : ((w.x>w.y)?vec2(1,0):vec2(0,1))));\n}\nvec3 sdgRoundBox( in vec2 p, in vec2 b, in float r )\n{\n    vec3 dis_gra = sdgBox(p, b);\n    return vec3( dis_gra.x - r, dis_gra.yz );\n}\n// .x = f(p)\n// .yz = ∇f(p) = {∂f(p)/∂x, ∂f(p)/∂y} with ‖∇f(p)‖=1\nvec3 sdgSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.1 );\n    vec2  q = pa-h*ba;\n    float d = length(q);\n    return vec3(d,q/d);\n}\nvec3 sdgnuts(in vec2 p)\n{\n    //p.x *= 1.1-0.1*sin(p.x);\n    p.y = fract(p.x-p.y)-mod(cos(p.x*14.0),length(p)-(p.y*p.x));\n    float st = 1.8 / (iTime);\n    return vec3(cos(p.x),1.0-sin(p.y),st/p.y);\n}\nsurf map( in vec2 p )\n{\n    vec3 dg0 = sdgnuts(p);\n    vec3 dg1 = sdgRoundBox(p-vec2(0.1,0.2),vec2(0.01,0.2),0.3);\n    vec3 dg2 = sdgSegment( p, vec2(0.1,-0.4), vec2(0.1,-0.7) ) - vec3(0.08,0.0,0.0);\n    surf s;\n    s.t = 0.9*sdgSMin(p,dg1,dg2,0.15);\n    if (s.t.x < dg2.x)\n    {\n        if (length(dg2) < length(dg0))\n        {\n            s.col = vec4(0.42,0.23,0.14,1.0);\n        }\n        else\n        {\n            s.col = vec4(vec3(1.0),2.0);\n        }\n    }\n    else\n    {\n        s.col = vec4(0.8,0.6,0.5,3.0);\n        s.col.xyz = mix(s.col.xyz,0.9 + 0.1*cos(300.0*dg2),0.4*length(dg2));\n        \n    }\n    \n    return s;\n}\nmat2 rX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        vec2(c, -s),\n        vec2(s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat2 rY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        vec2(c, s),\n        vec2(-s, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat2 rZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        vec2(c, -s),\n        vec2(s, c)\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    // sdf(p) and gradient(sdf(p))\n    \n    if( p.x>0.0 ) \n    {\n        p.x=p.x-0.5;\n        p*=rX(0.3);\n    }\n    else\n    {\n        p.x=p.x+0.5;\n        p*=rX(-0.3);\n    }\n    surf dg = map(p);\n    float d = dg.t.x;\n    vec2  g = dg.t.yz;\n    float tt1 = float(hash(ivec2(dg.t.x,dg.t.y)));\n    float tt = 1.1-0.02*smoothstep(0.0001,0.001,0.1-1.9*sin(dg.t.y/dg.t.x));\n\t// coloring\n    vec4 col;\n    col.xyz = (d>0.0) ? vec3(0.8,0.8,0.8)*tt-d*0.3: dg.col.xyz;\n    col.xyz *= 0.9 + vec3(0.2,-0.1,0.2*sin(g.x-g.y));\n    col.w = dg.col.w;\n    if (col.w < 3.0)\n        col.xyz *= 1.0 - 0.5*exp(-16.0*abs(d));\n    \n\n\tfragColor = vec4(col.xyz,1.0);\n}","name":"Image","description":"","type":"image"}]}