{"ver":"0.1","info":{"id":"4tcfzM","date":"1538944935","viewed":77,"name":"Nature.2 Shapeshifting Worm","username":"tqle","description":"Nature Projects, experiment #2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["nature"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//define functions, as to not be redundant \n#define repeat(v, r) (mod(v, r)-r/2.)\n//constructors, similar to that of a class in Java\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n//parametize vec2 -> randomize float \nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n//rotating distance of objects\nmat2 rot(float a){\n  float r = cos(a);\n  float f = sin(a);\n  return mat2(sin(r + pow(r, 2.)), f, abs(cos(-f)), tan(r) + sin(iTime));\n}\n//* Shapes *//\nfloat sphere(vec3 v, float r){\n  return length(v)-sin(r);\n}\n\n//converts cartesian coordinate system to \nvoid pModPolar(inout vec2 v, float r){\n  float f = 6.28318/r;\n  float z = atan(v.y, v.x)+f*0.5;\n  z = mod(z, f)-f*0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n}\n\nShape orbs(vec3 c){\n  Shape shape;\n  float s;\n  float s1;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(.75); // Initial Color\n\n\n  vec3 i = c;\n  vec2 two = vec2(i[0], i[1]);\n  vec2 three = vec2(i[1], i[2]);\n  vec2 randVal = vec2(random(two), random(three));\n  vec3 ii = vec3(two, random(three) + iTime);\n    i.zx *= rot(c.y*0.1+iTime*0.5); // Twist Coord Sys\n    pModPolar(i.xy, 22.4); // Twist Repeat\n    i.x -= abs(cos(iTime*0.5))*3.; // Offset from origin\n    //pMod1(i.z, 3.);\n  \ts = sphere(i, 0.75); \n    s1 = sphere(ii, tan(iTime));\n\n    // Plug-in distance to object and color\n    vec4 color = vec4(1.0, 0.0, .75 + sin(iTime), 1.);\n  \tshape.dist = min(s, s1);\n  \tshape.color = color;\n\n  return shape;\n}\n\n\n//mapping pixels according to shape functions \nShape map(vec3 c){\n  Shape orb = orbs(c);\n  return orb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  //remapping coordinate system, -.5 -> .5\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  \n  vec3 cam = vec3(0., 0., -10.); // Setup Camera\n  vec3 f = normalize(vec3(v, 1.)); // Frustrum\n  vec3 scene = cam;\n  fragColor = vec4(0.); // Background Color\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.03){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.001){\n      fragColor = c.color*(1.-z); // Hit  - invert pixels\n      break;\n    }\n    scene += f * c.dist; // Step to SDF\n\n\n  }\n}\n","name":"Image","description":"","type":"image"}]}