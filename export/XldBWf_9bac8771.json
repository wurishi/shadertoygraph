{"ver":"0.1","info":{"id":"XldBWf","date":"1542180338","viewed":170,"name":"Thing_12","username":"balkhan","description":"Triangles thing","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tmylength(vec3 p);\nfloat\tmylength(vec2 p);\nvec3 \tcameraLookAt(vec3 target, vec3 camPos, vec3 up, vec2 uv, float camNear);\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t200.\n#define E\t\t\t0.0001\n#define FAR\t\t\t100.\n#define PI\t\t\t3.14\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n    vec3\tpos = vec3(.250+0.*clamp((1.-1.*exp((-iTime+20.))), .0, 1.), .250+0.*clamp((1.-1.*exp((-iTime+20.))), .0, 1.), 20.0);\n\n\tvec3\tdir = camera(uv);\n    //cameraLookAt(vec3(.0, .0, .0), pos, vec3(.0,  1., .0), uv, .3);\n\n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    col += h*.00625125;\n    c_out =  vec4(col,1.0);\n}\n\n// iq's Capsule sdf modified\nfloat sdThing( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec3 pbh = pa - ba*h;\n    return max(1.5,mylength(pbh)) - r*length( pbh )*.25;\n}\n\nfloat\tscene(vec3 p)\n{  \n    float\tvar;\n    float\tmind = 1e5;\n    p.z -=-30.;\n    rotate(p.xz, 1.57*1.0-1.05*iTime*1.0+.5*sin(iTime*2.));\n    \n    vec3 pp = p;\n    ret_col = 1.-vec3(.5, .5, .3);\n    \n    rotate(p.zy, -iTime*.125+p.x*(.125+.105*sin(-iTime*.25) ));\n    \n    mind = sdThing(p, vec3(-10., -5.0*cos(iTime*1.+p.x*.5), -5.0*sin(iTime*1.+p.x*.5) ), vec3(10.,.0,.0), 2.5);\n    mind = abs(mind)-.25;\n    mind = mix(mind, max(mind, sin(p.x*3.+iTime*50.)+.998), .5 + .5*sin(iTime*.25));    \n    mind = mix(abs(mind)+.01, mind, .5 + .5*sin(iTime*.25));\n\n    h += vec3(2.75,.8,.5)*vec3(1.)*.0125/max(.01, (mind)*(mind) );\n\n    return (mind)*.25;\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n    for (float i = -1.; i < I_MAX; ++i)\n    {\n\t   \tp = pos + dir * dist.y;\n\t    dist.x = scene(p)*1.;\n        dist.y += dist.x; // makes artefacts disappear\n        if (dist.x < E || dist.y > FAR)\n        {\n            break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat\tmylength(vec3 p) {return max(max(abs(p.x), abs(p.y)), abs(p.z));}\nfloat\tmylength(vec2 p) {return (max(abs(p.x), abs(p.y)));}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 cameraLookAt(vec3 target, vec3 camPos, vec3 up, vec2 uv, float camNear)\n{\n    vec3 axisZ = normalize(target - camPos);\n    vec3 axisX = cross(axisZ, up);\n    vec3 axisY = cross(axisX, axisZ);\n    return normalize(axisX * uv.x + axisY * uv.y + camNear * axisZ); \n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}\n","name":"Image","description":"","type":"image"}]}