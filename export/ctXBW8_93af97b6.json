{"ver":"0.1","info":{"id":"ctXBW8","date":"1692829576","viewed":52,"name":"Fork N-Sided spinning cylinder","username":"pkclsoft","description":"I took N-Sided wireframe cylinder and played with it to give me an effect I wanted.\n\nCollab with @Tater\nSee their version: [url] https://www.shadertoy.com/view/NsB3zK[/url]","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wireframe","nsided"],"hasliked":0,"parentid":"NsB3zV","parentname":"N-Sided wireframe cylinder"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n#define pi2 6.283185307179586\n\nfloat lsdf(vec2 p, vec2 a, vec2 b ) {\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1. );\n\treturn length( pa - ba*h )*1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float minAxis = min(iResolution.x, iResolution.y) / 2.0;\n    \n    const float points = 25.0;\n    const float height = 0.1;\n    const float squish = 2.5;  \n    const float expand = 2.0;\n    \n    \n    float bright = 0.;\n    float timeFactor = cos(iTime / 4.0) + sin(iTime / 8.0);\n\n    float glow = 800.0 * timeFactor;\n\n    for(float i = 0.; i < points; i++)\n    {\n        float iByTime = (i/points + timeFactor) * pi2;\n        float iM1ByTime = ((i - 1.) / points + timeFactor) * pi2;\n        float iP1ByTime = ((i + 1.) / points + timeFactor) * pi2;\n        \n        vec2 point1 = vec2(sin(iByTime) / expand, cos(iByTime) / squish) + vec2(0., cos(i*2.0) * sin(i*2.0) * 0.3);\n        vec2 point10 = vec2(sin(iM1ByTime) / expand, cos(iM1ByTime) / squish) + vec2(0., cos(i*2.0) * sin(i*2.0) * 0.3); \n        vec2 point11 = vec2(sin(iP1ByTime) / expand, cos(iP1ByTime) / squish) + vec2(0., cos(i*2.0) * sin(i*2.0) * 0.3); \n        \n        vec2 point2 = point1;\n        vec2 point21 = point11;\n    \n        if((point1.x > point11.x || point1.x < point11.x && point1.x < point10.x) || points < 1.)\n        {       \n            bright += step(lsdf(uv, point1, point2), 0.009);\n            bright += abs(0.5 / (glow * lsdf(uv,point1,point2)));     \n        }\n        \n        bright += step(lsdf(uv, point1, point11), 0.009);\n        bright += abs(0.5 / (glow * lsdf(uv,point1,point10))); \n              \n        if(point2.x > point21.x || points < 1.)\n        {    \n            bright += step(lsdf(uv, point2, point21), 0.009);   \n            bright += abs(0.5 / (glow * lsdf(uv,point2,point21)));\n        }\n    }\n    \n    // Output to screen\n    float len = abs(length(uv));\n    float radius = 0.5;\n    vec3 current_color = fragColor.rgb;\n\n    if (len > 1.0) {\n        fragColor = vec4(current_color, 0.0);\n    } else {\n        vec3 mixed = vec3(bright,bright,bright) * vec3(0, 1.0, 0.5) * (1.0 - len);\n        fragColor = vec4(mixed, 0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}