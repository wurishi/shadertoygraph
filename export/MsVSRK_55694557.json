{"ver":"0.1","info":{"id":"MsVSRK","date":"1465537836","viewed":160,"name":"Apollonian Babel","username":"soma_arc","description":"Kissing Schottky Group (Apollonian Packing) + Terrain Raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","kissingschottky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nCreated by soma_arc - 2016\nThis work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported.\n*/\n\nconst float PI = 3.14159265;\nconst vec2 c1Pos = vec2(0, 1);\nconst vec2 c2Pos = vec2(4, 4);\nconst vec2 c3Pos = vec2(-4, 4);\nconst float c1R = 1.;\nconst float c2R = 4.;\nconst float c3R = 4.;\n\nvec2 circleInverse(vec2 pos, vec2 circlePos, float circleR){\n    float d = distance(pos, circlePos);\n\treturn ((pos - circlePos) * circleR * circleR)/(d*d) + circlePos;\n}\n\nfloat loopNum = 0.;\nconst int ITERATIONS = 6;\nfloat IIS(vec2 pos){\n    loopNum = 0.;\n\tbool cont = false;\n\tfor(int i = 0 ; i < ITERATIONS ; i++){\n\t\tcont = false;\n\t\tif(distance(pos,c1Pos) < c1R){\n\t\t\tpos = circleInverse(pos, c1Pos, c1R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}else if(distance(pos, c2Pos) < c2R){\n\t\t\tpos = circleInverse(pos, c2Pos, c2R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}else if(distance(pos, c3Pos) < c3R){\n\t\t\tpos = circleInverse(pos, c3Pos, c3R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}else if(pos.y < 0.){\n\t\t\tpos = vec2(pos.x, -pos.y);\n            cont = true;\n            loopNum++;\n\t\t}\n\t\tif(cont == false) break;\n\t}\n\tif(length(pos) < 3.5)\n        return float(ITERATIONS) + abs(loopNum - float(ITERATIONS));\n\treturn loopNum;\n}\n\n\nfloat calcHeight(vec2 p){\n    return IIS(p) * .8;\n}\n\nconst vec3 BLACK = vec3(0);\nfloat march(vec3 rayOrigin, vec3 rayDir){\n    const float delt = 0.02;\n    const float mint = .01;\n    const float maxt = 50.;\n    for( float t = mint; t < maxt; t += delt ) {\n        vec3 p = rayOrigin + rayDir * t;\n        if(p.y < calcHeight(p.xz)) {\n            return t - 0.5 * delt;\n        }\n    }\n    return -1.;\n}\n\nconst vec2 d = vec2(0.01, 0.);\nvec3 calcNormal(const vec3 p){\n  return normalize(vec3(calcHeight(p.xz - d.xy) - calcHeight(p.xz + d.xy),\n                     \t2. * d.x,\n                     \tcalcHeight(p.xz - d.yx) - calcHeight(p.xz + d.yx)));\n}\n\nconst float PI_4 = 12.566368;\nvec3 diffuseLighting(const vec3 p, const vec3 n, const vec3 diffuseColor,\n                     const vec3 lightPos, const vec3 lightPower){\n  \tvec3 v = lightPos - p;\n  \tfloat d = dot(n, normalize(v));\n  \tfloat r = length(v);\n  \treturn (d > 0. ) ?\n    \t(lightPower * (d / (PI_4 * r * r))) * diffuseColor\n    \t: vec3(0.);\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst vec3 lightPos = vec3(0, 100, 0);\nconst vec3 lightPower = vec3(50000.);\nvec3 calcColor(vec3 eye, vec3 ray){\n  \tvec3 l = BLACK;\n  \tfloat coeff = 1.;\n    float t = march(eye, ray);\n  \t\n    //if(t > 0.){\n        vec3 intersection = eye + ray * t;\n        vec3 normal = calcNormal(intersection);\n        vec3 matColor = intersection.y <= 0.1 ? vec3(0):vec3(hsv2rgb(vec3((loopNum -.5)/ 7. ,1., 1.)));\n   \t\tl += diffuseLighting(intersection, normal, matColor, lightPos, lightPower);\n    //}\n  \treturn l;\n}\n\nvec3 calcRay (const vec3 eye, const vec3 target, const vec3 up, const float fov,\n              const float width, const float height, const vec2 coord){\n\tfloat imagePlane = (height * .5) / tan(fov * .5);\n  \tvec3 v = normalize(target - eye);\n \tvec3 xaxis = normalize(cross(v, up));\n  \tvec3 yaxis =  normalize(cross(v, xaxis));\n  \tvec3 center = v * imagePlane;\n  \tvec3 origin = center - (xaxis * (width  *.5)) - (yaxis * (height * .5));\n  \treturn normalize(origin + (xaxis * coord.x) + (yaxis * (height - coord.y)));\n}\n\nconst float DISPLAY_GAMMA_COEFF = 1. / 2.2;\nvec3 gammaCorrect(vec3 rgb) {\n\treturn vec3((min(pow(rgb.r, DISPLAY_GAMMA_COEFF), 1.)),\n                (min(pow(rgb.g, DISPLAY_GAMMA_COEFF), 1.)),\n                (min(pow(rgb.b, DISPLAY_GAMMA_COEFF), 1.)));\n}\n\nconst vec3 up = vec3(0, 1, 0);\nfloat fov = radians(60.);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t = iTime;\n    t -= 2.9;\n    vec3 target = vec3(0., 0, 0);\n    vec3 eye;\n    target = vec3(sin(t), 0., 0.);\n    eye = vec3(cos(t) + sin(t) * cos(t),\n               6.5 + 9. * abs(cos(t)),\n               1. + 5. * sin(t));\n    const vec2 coordOffset = vec2(0.5);\n  \tvec3 ray = calcRay(eye, target, up, fov,\n    \t               iResolution.x, iResolution.y,\n        \t           gl_FragCoord.xy + coordOffset);\n\n  \tfragColor = vec4(gammaCorrect(calcColor(eye, ray)), 1.);\n\n}","name":"Image","description":"","type":"image"}]}