{"ver":"0.1","info":{"id":"wdcczn","date":"1605110015","viewed":255,"name":"Sin transition","username":"ElMehdiBouamama","description":"Minimal code for a grid (Used for debugging purposes)","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define grid_opacity 1.\n#define anti_aliasing 0.007\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n\tuv *= 10.;\n    // Time varying pixel color\n    float distance = length(uv);\n    \n    float y = sin(iTime) * abs(distance * (uv.y + uv.y)) + cos(iTime);\n    float x = cos(iTime) * abs(distance * (uv.x + uv.x)) + sin(iTime);\n\tfloat angle = atan(atan(x),atan(y));\n    \n    float color = fract(atan(distance,angle));\n\tfloat colo = fract(fract(angle)*(uv.x-uv.y));\n    //color *= atan(colo);\n    vec3 col = vec3(color,0., .6) * 1.3;\n    // Output to screens\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}