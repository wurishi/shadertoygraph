{"ver":"0.1","info":{"id":"tt2yWR","date":"1691868790","viewed":35,"name":"The Parallax View","username":"DannnYXZ","description":"3D to work with head tracking","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","parallax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 h3(float t){\n    return sin(vec3(1028., 667., 12.)*t);\n}\nfloat sd_tor(vec3 p, vec2 r){\n    return length(vec2(length(p.xz)-r.x, p.y))-r.y;\n}\nfloat sd_box(vec3 p, vec3 r){\n    vec3 q = abs(p) - r;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat map(vec3 p){\n    //float d = sd_bx(p-vec3(0,0,-1), vec3(.24));\n    float d = 1e10;\n    float a = iResolution.x/iResolution.y;\n    float wall_w = .5, wall_d = .5;\n    float bq = sd_box(p-vec3(0, 0, -wall_d), vec3(a+wall_w, 1.+wall_w, wall_d));\n    float mq = sd_box(p-vec3(0, 0, -wall_d+.5), vec3(a, 1., wall_d));\n    d = min(d, max(bq, -mq));\n    for(float i=0.;i<10.;i+=1.) d = min(d, sd_box(p-h3(i), h3(i+.01)*.2));\n    d = min(d, sd_box(p-vec3(0,0,.3), vec3(.2)));\n    return d; \n}\n\nfloat march(vec3 ro, vec3 rd){\n    float d = 0.;\n    for(int i = 0; i < 64; i++){\n        float r = map(ro + rd * d);\n        d += r;\n        if(r < 0.0001 || r > 1e5) break;\n    }\n    return d;\n}\nvec3 eye_pos(){\n     vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y*3.141592653*.5;\n     float sa=sin(m.x), ca=cos(m.x), sb=sin(m.y), cb=cos(m.y);\n     vec3 ro = mat3(vec3(1,0,0), vec3(0, cb, -sb), vec3(0, sb, cb))\n         * mat3(vec3(ca, 0, -sa), vec3(1,0,0), vec3(sa, 0, ca))\n         * vec3(0,0,3.);\n    return ro;\n}\nvec3 pallete(float t, float id){\n    vec3 a, b, c, d;\n    if(id == 0.){\n        a = vec3(0.5); b = vec3(.5); c = vec3(1.); d = vec3(0., 0.33, 0.67);\n    }\n    return a + b*cos(6.28318 * (c * t + d));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.* fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = eye_pos();\n    vec3 rd = normalize(vec3(uv.xy,0.)-ro);\n    float d = march(ro, rd);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col = pallete(d*.1, 0.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}