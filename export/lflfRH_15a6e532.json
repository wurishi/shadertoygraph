{"ver":"0.1","info":{"id":"lflfRH","date":"1723392190","viewed":24,"name":"2D polygon shapes","username":"WilliamWang","description":"2D polygon shapes","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polygonshapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define num_Sides 20.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    \n    st -= 0.5;\n    st.y += 0.05;\n    st *= 2.0;\n    \n    st.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    \n    float d = 0.0;\n    \n    // Number of sides of your shape\n    float sinValue = sin(iTime * 1.5);\n    float N = mix(3.0, num_Sides, (sinValue + 1.0) / 2.0); // animation\n    //float N = round(mix(3.0, 20.0, (sinValue + 1.0) / 2.0));  \n\n    // Angle and radius from the current pixel\n    float a = atan(st.x,st.y)+PI; //This is the angle of the current pixel in radians, adjusted to fit within [0, TWO_PI] by adding PI in the end\n    \n    float r = TWO_PI/float(N); // The angle between the vertices of the polygon.\n\n    // Shaping function that modulate the distance\n    d = cos(floor(0.5+a/r)*r-a)*length(st); /* I use cosine to smoothly transition the distance from the center to the edge of the polygon.\n                                               The cosine function ensures that the distance smoothly decreases as the pixel moves from a\n                                               vertex (where it should be farthest from the center) towards the middle of an edge \n                                               (where it should be closer)\n                                               \n                                               a/r: Divides the angle a by the angle r to determine\n                                                    which segment of the polygon the current angle falls into\n                                                    is between 0 and r, a / r will be between 0 and 1, placing it in the first segment.*/\n    col = vec3(1.0-smoothstep(.4,.41,d));\n    //col = vec3(d);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}