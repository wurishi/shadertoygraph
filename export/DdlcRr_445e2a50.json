{"ver":"0.1","info":{"id":"DdlcRr","date":"1686524483","viewed":39,"name":"Mandelbrotzoom - Test Shader","username":"laminator42","description":"testing mandelbrot zoom","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 512.\n#define B 256.\n\nvec2 rotate2d(vec2 uv, float angle) {\n    // simple rotation of a vector around the origin\n    // NOTE: not used, yet\n    mat2 rotationMatrix = mat2(cos(angle),-sin(angle),\n                               sin(angle), cos(angle));\n    return rotationMatrix * uv;\n}\n\nfloat iterate(vec2 p) {\n    // mandelbrot calculation. no adjustments to be made here\n    vec2 z = vec2(0), c = p;\n    float i;\n    for(i=0.; i < N; i++) {\n        z = mat2(z, -z.y, z.x) * z + c;\n        if(dot(z, z) > B*B) break;\n    }\n    // subtract a fractional part to smooth out the color gradient\n    return i - log(log(dot(z, z)) / log(B)) / log(2.);       \n}\n\nvec3 palette( in float t) {\n    // procedural color gradient\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 frame(vec2 shift, vec2 fragCoord) {\n    // for bouncy zoom. change parameters to alter depth and speed\n    \n    // INTERACTIVE: 0.75 is zoom (time) length and 0.16 is acceleration?\n    float ltime = 0.75*(1.0-cos(iTime*0.16));\n    // exponential zoom based on normalized time\n    float zoom = pow(0.9, 50.0*ltime );\n    // INTERACTIVE: uncomment and set zoomlevel if you want to have it fixed\n    zoom = 0.01;\n\n    // normalize canvas\n    vec2 uv = (2. * fragCoord - iResolution.xy - 1.) / iResolution.y;\n    uv = zoom * uv - shift;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    vec2 uv = frame(vec2(.892, -0.23527), fragCoord);\n    \n    // calculate smoothed n\n    float sn = iterate(uv) / N;\n    if (sn == 1.) {\n        fragColor = vec4(0.);\n    } else {\n        fragColor = vec4(vec3(palette(fract(sn + 0.5))), 1.0);\n        // INTERACTIVE: uncomment for pulsing colors\n        fragColor = vec4(vec3(palette(fract((sn*0.21 + 0.2)*(iTime+30.)))), 1.0);\n        //fixed color palette\n    }\n}\n","name":"Image","description":"","type":"image"}]}