{"ver":"0.1","info":{"id":"XtVfDw","date":"1542768682","viewed":509,"name":"Polyphase Scanlines (for MiSTer)","username":"ghogan42","description":"This is a copy of my polyphase filter with a different texture loaded so you can see it zoomed in. That is all. Change Coefficients in Buffer A and Buffer B.  This is a copy of the scaling that we get in the Altera VIP Scaler core for FPGAs","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["scanlines","pixelart","polyphase"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n/*    \n\tIf you change the texture in Buffer A then you MUST also change the\n\ttexture in Buf B to match\n*/\n\n/*  You set the SCALE for how much to scale the texture by\n*/\n        \n    float SCALEY = 2.2; //set this to scale the texture up by this amount vertially\n    \n/*  You put your coefficients for the VERTICAL AXIS here on Buffer A Tab */\n/*  Coefficients for the HORIZONTAL AXIS are on the Buf B Tab  */\n/* The coefficients below are 40% scanlines */\n    \n    vec4 P0  = vec4(     0, 128,   0,   0   )/128.0;\n    vec4 P1  = vec4(     0, 126,   1,   0   )/128.0;\n    vec4 P2  = vec4(     0, 116,   5,   0   )/128.0;\n    vec4 P3  = vec4(     0, 102,  10,   0   )/128.0;\n    vec4 P4  = vec4(     0,  86,  16,   0   )/128.0;\n    vec4 P5  = vec4(     0,  71,  21,   0   )/128.0;\n    vec4 P6  = vec4(     0,  57,  26,   0   )/128.0;\n    vec4 P7  = vec4(     0,  46,  31,   0   )/128.0;\n    vec4 P8  = vec4(     0,  38,  38,   0   )/128.0;\n    vec4 P9  = vec4(     0,  31,  46,   0   )/128.0;\n    vec4 P10 = vec4(     0,  26,  57,   0   )/128.0;\n    vec4 P11 = vec4(     0,  21,  71,   0   )/128.0;\n    vec4 P12 = vec4(     0,  16,  86,   0   )/128.0;\n    vec4 P13 = vec4(     0,  10, 102,   0   )/128.0;\n    vec4 P14 = vec4(     0,   5, 116,   0   )/128.0;\n    vec4 P15 = vec4(     0,   1, 126,   0   )/128.0;\n    \n/* Below here is the actual shader */\n\tfragColor.rgb = vec3(0.0);\n    //Basic uv calculations\n    vec3 texSize = iChannelResolution[0];\n    vec2 fpos = (fragCoord.xy)/iResolution.xy/vec2(1.0,SCALEY);\n    vec2 cpos = fpos * texSize.xy;\n    vec2 centerpos = floor(cpos-0.5)+0.5;\n    vec2 uv = centerpos / texSize.xy;\n    float phase = cpos.y - centerpos.y;\n    \n    vec2 fdx = vec2( 1.0/texSize.x, 0.0);\n    vec2 fdy = vec2( 0.0 , 1.0/texSize.y);\n    \n    //Hack to get correct size on x axis. Bad bad bad\n    uv.x = fragCoord.x/texSize.x;\n    uv.x = (floor(uv.x*texSize.x) + 0.5)/texSize.x;\n    \n    //Get the 4 Taps\n\tvec4 T0 = texture( iChannel0 , uv - fdy);\n\tvec4 T1 = texture( iChannel0 , uv );\n\tvec4 T2 = texture( iChannel0 , uv + fdy);\n\tvec4 T3 = texture( iChannel0 , uv + 2.0*fdy);\n   \n    //float phase = 0.0;\n    float phasewidth = 1.0/16.0;\n\n    //Fuck it. 16 if statements\n    if(uv.x < 1.0) {\n    if( phase < phasewidth)\n    {\n        fragColor.r = dot(P0, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P0, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P0, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 2.0*phasewidth)\n    {\n        fragColor.r = dot(P1, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P1, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P1, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 3.0*phasewidth)\n    {\n        fragColor.r = dot(P2, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P2, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P2, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 4.0*phasewidth)\n    {\n        fragColor.r = dot(P3, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P3, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P3, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 5.0*phasewidth)\n    {\n        fragColor.r = dot(P4, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P4, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P4, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 6.0*phasewidth)\n    {\n        fragColor.r = dot(P5, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P5, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P5, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 7.0*phasewidth)\n    {\n        fragColor.r = dot(P6, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P6, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P6, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 8.0*phasewidth)\n    {\n        fragColor.r = dot(P7, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P7, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P7, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 9.0*phasewidth)\n    {\n        fragColor.r = dot(P8, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P8, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P8, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 10.0*phasewidth)\n    {\n        fragColor.r = dot(P9, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P9, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P9, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 11.0*phasewidth)\n    {\n        fragColor.r = dot(P10, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P10, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P10, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 12.0*phasewidth)\n    {\n        fragColor.r = dot(P11, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P11, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P11, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 13.0*phasewidth)\n    {\n        fragColor.r = dot(P12, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P12, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P12, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 14.0*phasewidth)\n    {\n        fragColor.r = dot(P13, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P13, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P13, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 15.0*phasewidth)\n    {\n        fragColor.r = dot(P14, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P14, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P14, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else\n    {\n        fragColor.r = dot(P15, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P15, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P15, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n}\n        \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n/* You must choose the same texure in iChannel0 that you choose in BufferA's iChannel0\n    or the calculations will be messed up! */\n    \n    \n/*  You set the SCALE for how much to scale the texture by  */\n    \n    float SCALEX = 1.0; //set this to scale the texture up by this amount horizontally\n    \n    \n/*  Coefficients for the HORIZONTAL AXIS are here on the Buf B Tab  */\n/* These are Sharp Bilinear Coefficients btw */\n    \n    vec4 P0  = vec4(   0, 128,   0,   0 )/128.0;\n    vec4 P1  = vec4(   0, 128,   0,   0 )/128.0;\n    vec4 P2  = vec4(   0, 127,   1,   0 )/128.0;\n    vec4 P3  = vec4(   0, 125,   3,   0 )/128.0;\n    vec4 P4  = vec4(   0, 120,   8,   0 )/128.0;\n    vec4 P5  = vec4(   0, 112,  16,   0 )/128.0;\n    vec4 P6  = vec4(   0, 101,  27,   0 )/128.0;\n    vec4 P7  = vec4(   0,  85,  43,   0 )/128.0;\n    vec4 P8  = vec4(   0,  64,  64,   0 )/128.0;\n    vec4 P9  = vec4(   0,  43,  85,   0 )/128.0;\n    vec4 P10 = vec4(   0,  27, 101,   0 )/128.0;\n    vec4 P11 = vec4(   0,  16, 112,   0 )/128.0;\n    vec4 P12 = vec4(   0,   8, 120,   0 )/128.0;\n    vec4 P13 = vec4(   0,   3, 125,   0 )/128.0;\n    vec4 P14 = vec4(   0,   1, 127,   0 )/128.0;\n    vec4 P15 = vec4(   0,   0, 128,   0  )/128.0;\n    \n/* Below here is the actual shader */\n\n    //Basic uv calculations\n    /*\n    vec3 texSize = iChannelResolution[0];\n    vec2 fpos = fragCoord.xy/vec2(texSize.x,iResolution.y);\n    vec2 cpos = fpos * texSize.xy ;\n    cpos.x *= texSize.x/iResolution.x;\n    vec2 centerpos = floor(cpos-0.5)+0.5;\n    //vec2 uv = centerpos / texSize.xy;\n    vec2 uv = vec2(centerpos.x/texSize.x , fpos.y);\n    float phase = cpos.x - centerpos.x;\n    \n    vec2 fdx = vec2( 1.0/texSize.x, 0.0);\n    vec2 fdy = vec2( 0.0 , 1.0/texSize.y);\n  */\n\n    vec3 texSize = iChannelResolution[0];\n\tvec2 uv = fragCoord/iResolution.xy;\n    vec2 fdx = vec2(1.0/iResolution.x , 0.0);    \n    vec2 cpos = uv*texSize.xy;\n    vec2 centerpos = (floor(cpos - 0.5) + 0.5);\n    uv.x = centerpos.x/iResolution.x;\n    float phase = cpos.x - centerpos.x;    \n    \n    \n    //Get the 4 Taps\n\tvec4 T0 = texture( iChannel1 , uv - fdx);\n\tvec4 T1 = texture( iChannel1 , uv );\n\tvec4 T2 = texture( iChannel1 , uv + fdx);\n\tvec4 T3 = texture( iChannel1 , uv + 2.0*fdx);\n   \n    //float phase = 0.0;\n    float phasewidth = 1.0/16.0;\n\n    //Fuck it. 16 if statements\n\n    if( phase < phasewidth)\n    {\n        fragColor.r = dot(P0, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P0, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P0, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 2.0*phasewidth)\n    {\n        fragColor.r = dot(P1, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P1, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P1, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 3.0*phasewidth)\n    {\n        fragColor.r = dot(P2, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P2, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P2, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 4.0*phasewidth)\n    {\n        fragColor.r = dot(P3, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P3, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P3, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 5.0*phasewidth)\n    {\n        fragColor.r = dot(P4, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P4, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P4, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 6.0*phasewidth)\n    {\n        fragColor.r = dot(P5, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P5, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P5, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 7.0*phasewidth)\n    {\n        fragColor.r = dot(P6, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P6, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P6, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 8.0*phasewidth)\n    {\n        fragColor.r = dot(P7, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P7, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P7, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 9.0*phasewidth)\n    {\n        fragColor.r = dot(P8, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P8, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P8, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 10.0*phasewidth)\n    {\n        fragColor.r = dot(P9, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P9, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P9, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 11.0*phasewidth)\n    {\n        fragColor.r = dot(P10, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P10, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P10, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 12.0*phasewidth)\n    {\n        fragColor.r = dot(P11, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P11, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P11, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 13.0*phasewidth)\n    {\n        fragColor.r = dot(P12, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P12, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P12, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 14.0*phasewidth)\n    {\n        fragColor.r = dot(P13, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P13, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P13, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else if( phase < 15.0*phasewidth)\n    {\n        fragColor.r = dot(P14, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P14, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P14, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n    else\n    {\n        fragColor.r = dot(P15, vec4(T0.r, T1.r, T2.r, T3.r));\n        fragColor.g = dot(P15, vec4(T0.g, T1.g, T2.g, T3.g));\n        fragColor.b = dot(P15, vec4(T0.b, T1.b, T2.b, T3.b));\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}