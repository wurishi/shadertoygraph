{"ver":"0.1","info":{"id":"M3fXR2","date":"1710346884","viewed":302,"name":"Water Shader 2D ","username":"mnasell","description":"Simple 2D Water effect on a background image.\nJust tried to get it working in a shader based on my poor shader knowledge ... ðŸ˜¬\n\n@mnasell","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["simulation","water","fun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ---------------------------------------------------------------------------------------------------\n// Simple 2D Water effect on background image (no real fluid simulation)\n// ---------------------------------------------------------------------------------------------------\n// - made ages ago in C, based on a description found on the net ~ millennium !?\n// - (unfortunately, I didn't found the old references anymore maybe still anywhere in web-archive !?)\n// - \n// - Now just wanted to try to get it applied in a shader in some way ...\n// - I'm really not very experienced in shader dev, so excuse any dump approaches \n// - and no-go's here in my code.\n// -\n// - Big \"thank you!\" to @iq for his amazing articles and examples,\n// - both here and on his sites (https://iquilezles.org/articles/)\n// - They're so mind-blowing that I reckon it'll take me another lifetime\n// - just to scratch the surface of understanding them, let alone fully get them.\n// -\n// - Also thanks @all here on shaderToy for their incredible shader work\n// - and their willingness to share it for learning and enjoyment.\n// - \n// - @mnasell\n// ---------------------------------------------------------------------------------------------------\n#define N 15.\n#define B 0.03\n#define S (1./N)\n#define C1 vec3(0.0, 0.0, 0.5)\n#define C2 vec3(0.9, 0.45, 0.)\n#define CB vec3(0.9,0.9,1.)\n\nvec3 checkerboard(vec2 uv)\n{\n    float aR  = iResolution.x / iResolution.y;\n    vec2  bW  = vec2((B/N),(B/N)*aR);\n    vec2  bS  = bW/S;\n    vec2  rP  = floor(uv / S);\n    vec2  fP  = mod(uv, S) / S;\n    return any(lessThan(fP, bS)) || any(greaterThan(fP, 1.0-bS))\n           ? CB : mix(C1, C2, mod(rP.x + rP.y, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv      = fragCoord/iResolution.xy;\n    float hmap    = texture(iChannel0, uv).r;\n    vec2  offset  = vec2(1.0)/vec2(textureSize(iChannel0, 0));\n    // refraction based on hightmap\n    vec2  refSize = vec2(2.) * offset;\n    vec2  ruv     = uv - (vec2(texture(iChannel0, uv + vec2(-refSize.x, 0.0)).r,texture(iChannel0, uv + vec2(0.0, -refSize.y)).r)-.5)\n                       + (vec2(texture(iChannel0, uv + vec2( refSize.x, 0.0)).r,texture(iChannel0, uv + vec2(0.0,  refSize.y)).r)-.5);                      \n    // apply + some fake light reflections\n    vec3 col      = checkerboard(clamp(ruv,0.,1.));\n    fragColor     = vec4(mix(col, clamp(col+200.*hmap,0.,1.), hmap+.5),1.0);    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Backbuffer to calculate the changes hightmap depending on previous state\n// @mnasell\n\n#define AUTO\n#define SIZE      0.02\n#define INTENSITY 0.02\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv      = fragCoord / iResolution.xy;\n    vec2  offset  = vec2(1.0)/vec2(textureSize(iChannel0, 0));    \n    vec3  muvp    = vec3(iMouse.xy/iResolution.xy,iMouse.z);\n    vec3  data    = texture(iChannel0, uv).rgb;\n    float damping = 0.98;\n\n    float height  = data.g;\n    float mean    = (  texture(iChannel0, uv+vec2(-offset.x, 0.)).r\n                     + texture(iChannel0, uv+vec2( offset.x, 0.)).r\n                     + texture(iChannel0, uv+vec2( 0., -offset.y)).r\n                     + texture(iChannel0, uv+vec2( 0., offset.y)).r\n                     + texture(iChannel0, uv+vec2( -offset.x, -offset.y)).r\n                     + texture(iChannel0, uv+vec2( offset.x, -offset.y)).r\n                     + texture(iChannel0, uv+vec2( offset.x, offset.y)).r\n                     + texture(iChannel0, uv+vec2( -offset.x, offset.y)).r)*.25;\n                         \n#ifdef AUTO\n    if (muvp.z < 1.) {\n      float t = iTime * 1.5;\n      float r=cos((4./6.)*t);\n      muvp = vec3(.5+vec2(r*cos(t),r*sin(t))*.4,1.);\n    }\n#endif\n    if (muvp.z > 0.) {\n      float dist = (pow(uv.x - muvp.x, 2.) + pow(uv.y - muvp.y, 2.));\n      if (dist < pow(SIZE,2.)) {\n        height = INTENSITY * (SIZE-dist) / SIZE;\n      }\n    }        \n    fragColor = vec4(clamp(((mean-height) * damping), -.5, .5), data.r, 0., 0.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}