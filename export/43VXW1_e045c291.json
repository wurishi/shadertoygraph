{"ver":"0.1","info":{"id":"43VXW1","date":"1719903458","viewed":43,"name":"kishimisu Tutorial attempt","username":"Zanywany","description":"my first toy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","kishimisu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette ( float t ) {\n  vec3 a = vec3(1.278, -0.342, 0.918);\n  vec3 b = vec3(0.754, 1.118, 0.600);\n  vec3 c = vec3(0.929, 0.750, -1.502);\n  vec3 d = vec3(-0.893, 0.358, 0.817);\n  \n  return a + b*cos( 6.28318*(c*t*+d) );\n  }\n \n  //[[1.278 -0.342 0.918] [0.754 1.118 0.600] [0.929 0.750 -1.502] [-0.893 0.358 0.817]] raw palette values\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  vec2 uv0 = uv; // Keeps track of original length of the canvas, letting color gradient affect the whole\n                 // canvas instead of each Frac'd repetition\n  vec3 finalColor = vec3(0.0); \n  \n   // Output to screen\n    \n  // uv -= 0.5;\n  // uv.x *= iResolution.x/iResolution.y;\n   \n  // float r = 0.3;\n  // float c = smoothstep(r, r-0.05, d);\n   \n  // uv *= 2.0;\n  // uv = fract(uv);\n  // uv -= 0.5;\n  \n  for (float i = 0.0; i < 4.0; i ++) {\n  \n  uv = fract(uv *1.6) - 0.5; // Above three lines are combined\n  \n  float d = length(uv) * exp (-length(uv0));\n   \n  vec3 col = palette(length(uv0) + i*.4 + iTime*.5);\n    \n  d = sin(d*8.0 + iTime)/8.0;\n  d = abs(d);\n    \n  // d = smoothstep (0.0, 0.1, d);\n  d = pow(0.01/ d, 1.3); \n   \n  finalColor += col * d;\n }\n \n  fragColor = vec4(finalColor, 1.0);\n    \n    \n} ","name":"Image","description":"","type":"image"}]}