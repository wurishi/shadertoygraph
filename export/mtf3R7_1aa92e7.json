{"ver":"0.1","info":{"id":"mtf3R7","date":"1671495252","viewed":237,"name":"Catacombs Of Solaris Demake","username":"Trixelized","description":"A very hacky experiment of remaking the visual effect found in Catacombs Of Solaris. Someone here can definitely do this way better than me utilizing matrixes ^^'","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["trippy","weird","liminal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame > int(every_x_frames - 1.0)) {\n        if (mod(float(iFrame), every_x_frames) == 0.0) {\n            fragColor = texture(iChannel1, fragCoord.xy / iResolution.xy);\n        } else {\n            fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n        }\n    } else {\n        fragColor = texture(iChannel2, -fragCoord.xy / iResolution.xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Thanks to Xor for 'voxels explained'\n// Which helped me set up geometry\n// https://www.shadertoy.com/view/fstSRH\n\nvec3 getcampos(float frame) {\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    cam.x = 12.0 * (smoothstep(-1., 1., cos(0.004 * frame)) - 0.5);\n    cam.z = 12.0 * (smoothstep(-1., 1., sin(0.004 * frame)) - 0.5);\n    cam.y = sin(frame * 0.01) * 0.5;\n    return cam;\n}\n\nfloat getcamframeoff(float frame) {\n    return sin(frame) * 1234.5678;\n}\n\nfloat map(vec3 pos)\n{\n    return\n        min(1.0 - length(pos.y) + 2.0 * fract(sin(pos.x * 1.2 + pos.z * 3.4) * 51234.5678901234),\n        min(17.0 - length(pos.x),\n        min(17.0 - length(pos.z),\n        2.0 - length((round(pos.xz / 3.0) * 3.0) - pos.xz))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fr = floor(float(iFrame) / every_x_frames)*every_x_frames;\n    \n    vec3 cam = getcampos(float(iFrame) + getcamframeoff(fr));\n    vec3 pos = cam;\n    vec3 ray = normalize(vec3(fragCoord*2.0 - iResolution.xy, iResolution.y));\n    vec3 cell = vec3(0,0,0);\n    \n    for(int i = 0; i<50; i++)\n    {\n        vec3 dist = fract(-pos * sign(ray)) + 1e-4,\n        leng = dist / abs(ray),\n        near = min(leng.xxx, min(leng.yyy, leng.zzz));\n        pos += ray * near;\n        cell = ceil(pos) - 0.5;\n        if (map(cell) < 0.0) break;\n    }\n    \n    pos -= getcampos(fr + getcamframeoff(fr));\n    vec2 uv = (pos.xy) / pos.z;\n    uv.x /= iResolution.x / iResolution.y;\n    uv = fract(uv / 2.0 + 0.5);\n    \n    \n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col, 1);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define every_x_frames 200.0","name":"Common","description":"","type":"common"}]}