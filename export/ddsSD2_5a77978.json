{"ver":"0.1","info":{"id":"ddsSD2","date":"1669608615","viewed":88,"name":"Britney Sphears","username":"janpitokiala","description":"Mapping normal to texture\nMost of this code is not mine. I only mapped a texture on according to the normal map. You can change iChannel0 or change the distance function. Be sure to include the \"Rotation?\" part too!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"DdsSW2","parentname":"Pixar Engine ~ RayMarch Demo"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define C 0.15915494309189535\n// 1 / 2pi\n\n//#define TORUS\n\n#ifdef TORUS\nfloat m( vec3 p ){\n    //Rotation?\n    float rand = 0.62;\n    p.xy = vec2(cos(iTime*rand)*p.x-sin(iTime*rand)*p.y,sin(iTime*rand)*p.x+cos(iTime*rand)*p.y);\n    p.yz = vec2(cos(iTime)*p.y-sin(iTime)*p.z,sin(iTime)*p.y+cos(iTime)*p.z);\n    \n    return length(vec2(length(p.zx)-0.5,p.y))-.25;\n}\n#else\nfloat m( vec3 p ){\n    return length(p)-.5;\n}\n#endif\n\nvec3 n( vec3 p ){\n    vec2 e = vec2(0.001,0.0);\n    return normalize(vec3(\n        m(p + e.xyy)-m(p - e.xyy),\n        m(p + e.yxy)-m(p - e.yxy),\n        m(p + e.yyx)-m(p - e.yyx)\n    ));\n}\n\nfloat r( vec3 ro, vec3 rd ){\n    float t = 0.0;\n    for( int i=0; i<100; i++ ){\n        vec3 p = ro+rd*t;\n        float d = m(p);\n        if(d<0.001) break;\n        t += d;\n        if(t>20.0) break;\n    }\n    if(t>20.0) t=-1.0;\n    return t;\n}\n\nvoid mainImage( out vec4 Pixar, in vec2 Pixel ){\n\n    vec2 p = (2.0*Pixel-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(p,1.5);\n    vec3 rd = normalize(vec3(0.0,0.0,-1.5));\n    float t = r(ro,rd);\n    vec4 col = vec4(1.);\n    \n    if( t>0.0 ){\n        vec3 pos = ro+rd*t;\n        vec3 nor = n(pos);\n        vec3 non = nor;\n        //Rotation?\n        float rand = 0.62;\n        nor.xy = vec2(cos(iTime*rand)*nor.x-sin(iTime*rand)*nor.y,sin(iTime*rand)*nor.x+cos(iTime*rand)*nor.y);\n        nor.yz = vec2(cos(iTime)*nor.y-sin(iTime)*nor.z,sin(iTime)*nor.y+cos(iTime)*nor.z);\n        \n        col = texture(iChannel0, vec2(.5+C*atan(nor.x,nor.z),2.*C*(acos(-nor.y))));\n        \n        //Remove one slash from the line below to remove shading (eg, for doing shading in the texture)\n        //*\n        vec3 dir = vec3(2.0,1.0,1.0);\n        float dif = clamp(dot(non,dir),0.0,1.0);\n        col *= mix(0.5,1.0,dif);\n        //*/\n    }\n    \n    Pixar = col;\n}","name":"Image","description":"","type":"image"}]}