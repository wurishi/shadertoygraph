{"ver":"0.1","info":{"id":"ltBfWK","date":"1517178893","viewed":207,"name":"cube to angular","username":"gomi","description":"mapping cube faces to angular (dome/fisheye) map\nmodify fovd for different field of view","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["projection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI    3.1415926535\n\nvec4 tex(vec2 uv, int face) {\n    float tex_domain = (step(0.0, uv.x)-step(1.0, uv.x))*(step(0.0, uv.y)-step(1.0, uv.y));\n\tfloat u_axis = (step(0.5, uv.y)-step(0.52, uv.y))*(step(0.5, uv.x)-step(1.0, uv.x));\n    float v_axis = (step(0.5, uv.x)-step(0.52, uv.x))*(step(0.5, uv.y)-step(1.0, uv.y));\n    vec2 saw = fract(4.0*uv)-0.5;\n    float checkerboard = step(saw.x*saw.y,0.0);\n    vec4 color = (face==0 ? 1.0 : 0.0) * vec4(0.8, 0.5, 0.6, 1.0)  // front: pink\n               + (face==1 ? 1.0 : 0.0) * vec4(0.5, 0.7, 1.0, 1.0)  // right: blue\n               + (face==2 ? 1.0 : 0.0) * vec4(0.9, 0.6, 0.1, 1.0)  // left: orange\n               + (face==3 ? 1.0 : 0.0) * vec4(1.0, 0.9, 0.3, 1.0)  // up: yellow\n               + (face==4 ? 1.0 : 0.0) * vec4(0.7, 0.4, 0.9, 1.0)  // down: purple\n               + (face==5 ? 1.0 : 0.0) * vec4(0.4, 0.8, 0.3, 1.0); // back: green\n\n    color *= mix(vec4(0.5, 0.5, 0.5, 1.0), vec4(1.0), checkerboard);\n    color = mix(color, vec4(0.0, 0.0, 0.0, 1.0), u_axis);\n    color = mix(color, vec4(1.0), v_axis);\n    color = mix(vec4(0.5, 0.5, 0.5, 1.0), color, tex_domain);\n\treturn color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fovd = 360.0; // input: field of view in degrees\n    float hfov = fovd*PI/360.0;\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.x, iResolution.y);\n    float phi = length(uv)*hfov; // phi: 0 to fov/2\n    float theta = atan(uv.y, uv.x); // theta: -pi to pi\n\n    float cost = cos(theta);\n    float sint = sin(theta);\n    float tant = tan(theta);\n    float tanp = tan(phi);\n    float tanpcost = tanp*cost;\n    float tanpsint = tanp*sint;\n\n    float side = step(1.0, abs(tanp)*max(abs(cost), abs(sint))); // right/up/left/down faces\n    float right = side*step(abs(sint), cost);\n    float up = side*step(abs(cost), sint);\n    float left = side*step(abs(sint), -cost);\n    float down = side*step(abs(cost), -sint);\n    float front = (1.0-side)*step(0.0, tanp);\n    float back = (1.0-side)*step(tanp, 0.0);\n\n\tfragColor = front*tex(vec2(tanpcost, tanpsint)*0.5+0.5, 0)\n              + right*tex(vec2(-1.0/tanpcost, tant)*0.5+0.5, 1)\n              + left*tex(vec2(-1.0/tanpcost, -tant)*0.5+0.5, 2)\n              + up*tex(vec2(1.0/tant, -1.0/tanpsint)*0.5+0.5, 3)\n              + down*tex(vec2(-1.0/tant, -1.0/tanpsint)*0.5+0.5, 4)\n              + back*tex(vec2(-tanpcost, tanpsint)*0.5+0.5, 5);\n    fragColor *= step(phi, hfov); // map mask\n}","name":"Image","description":"","type":"image"}]}