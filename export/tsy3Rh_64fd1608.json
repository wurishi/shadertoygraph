{"ver":"0.1","info":{"id":"tsy3Rh","date":"1569694190","viewed":519,"name":"Piet Mondrian Practice ","username":"leviathwaite","description":"Shape practice from \"The Book of Shaders\"","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rectangles","practice","squares","bookofshaders","pietmondrian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://thebookofshaders.com/07/\n\n// Drunk Mondrain https://www.shadertoy.com/view/wsXXzf\n// Random Quadtree https://www.shadertoy.com/view/MlsXDf\n// Simple Mondrain https://www.shadertoy.com/view/tllSzn\n// Mondrian Grid https://www.shadertoy.com/view/WdcGzn\n// Another Piet Mondrian - Tableau https://www.shadertoy.com/view/4t3cRH\n\n// Paint colors.\n    vec3 red    = vec3(0.725, 0.141, 0.149);\n    vec3 blue   = vec3(0.012, 0.388, 0.624);\n    vec3 yellow = vec3(0.988, 0.784, 0.173);\n    vec3 beige  = vec3(.976, .949, .878);\n    vec3 black  = vec3(0.078, 0.09, 0.114);\n\nfloat Band(float pos, float width)\n{\n  \tfloat halfWidth = width * 0.5;\n  \treturn step(-halfWidth, pos) - step(halfWidth, pos);\n}\n\n// uses 2 bands\nfloat Rectangle(vec2 pos, float width, float height)\n{\n  \treturn Band(pos.x, width) * Band(pos.y, height);\n}\t\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t// Normalized pixel coordinates \n    // fragCoord(from 0.0 to 1.0) left to right\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // center origin\n    uv -= 0.5;\n    \n    // uv *= 1.25;\n\n    // adjust for aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    // flip x coords, not sure why their wrong...\n    uv.x = -uv.x;\n    \n    float width = 0.15;\n    float height = 0.3;\n    float margin = 0.025;\n    \n    // set background to beige\n    vec3 col = beige;\n\n    // red areas\n    vec2 rectPos = vec2(uv.x - width * 5.0, uv.y - height - 0.1);\n    float redRect = Rectangle(rectPos, width * 3.0, height);\n    \n    // yellow areas\n    rectPos.x = uv.x + width * 6.0;\n    float yellowRect = Rectangle(rectPos, width, height);\n    \n    // blue areas\n    rectPos.y = uv.y + height * 1.5;\n    float blueRect = Rectangle(rectPos, width, height * 2.0);\n    \n    // black lines, 4 vertcal, 2 horizontal\n    rectPos = vec2(uv.x, uv.y);\n    float blackRect = Band(rectPos.x - width * 4.75, margin);\n    blackRect += Band(rectPos.x - width * 3.5, margin);\n    blackRect += Band(rectPos.x + width * 3.0, margin);\n    blackRect += Band(rectPos.x + width * 5.5, margin);\n    \n    // horizontal\n    blackRect += Band(rectPos.y - height + 0.05, margin);\n    blackRect += Band(rectPos.y + height * 0.5, margin);\n    \n    // beige rect for touchup\n    rectPos = vec2(uv.x - width * 5.1, uv.y + height * 1.3);\n    float beigeRect = Rectangle(rectPos, width * 3.0, height * 1.51);\n\n    col = mix(col, red, redRect);  \n    col = mix(col, yellow, yellowRect); \n    col = mix(col, blue, blueRect);\n    col = mix(col, black, blackRect);\n    col = mix(col, beige, beigeRect);\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}