{"ver":"0.1","info":{"id":"dsfXzr","date":"1668429775","viewed":297,"name":"cross hatch from natron plugins","username":"axiomgraph","description":"cross hatch from natron plugins","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["cross","hatch","drawingeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : crok_crosshatch Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : crok_crosshatch Matchbox for Autodesk Flame\n\n\n// iChannel0: Source, filter = linear, wrap = mirror\n// BBox: iChannel0\n\n\n float pDensity = 9.0; // Density : (density), min=1, max=30\n float pWidth = 5.0; // Width : (width), min=0.3, max=10\n\n\n\n// The brightnesses at which different hatch lines appear\nfloat hatch_1 = 0.8;\nfloat hatch_2 = 0.6;\nfloat hatch_3 = 0.3;\nfloat hatch_4 = 0.15;\n\n// How close together hatch lines should be placed\n// float pDensity = 10.0;\n\n// How wide hatch lines are drawn.\n// float pWidth = 1.0;\n\n// enable GREY_HATCHES for greyscale hatch lines\n#define GREY_HATCHES\n\n#ifdef GREY_HATCHES\nfloat hatch_1_brightness = 0.8;\nfloat hatch_2_brightness = 0.6;\nfloat hatch_3_brightness = 0.3;\nfloat hatch_4_brightness = 0.0;\n#else\nfloat hatch_1_brightness = 0.0;\nfloat hatch_2_brightness = 0.0;\nfloat hatch_3_brightness = 0.0;\nfloat hatch_4_brightness = 0.0;\n#endif\n\nfloat d = 1.0; // kernel offset\n\nfloat lookup(vec2 p, float dx, float dy)\n{\n    vec2 uv = (p.xy + vec2(dx * d, dy * d)) / iResolution.xy;\n    vec4 c = texture(iChannel0, uv.xy);\n\t\n\t// return as luma\n    return 0.2126*c.r + 0.7152*c.g + 0.0722*c.b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//\n\t// Inspired by the technique illustrated at\n\t// http://www.geeks3d.com/20110219/shader-library-crosshatching-glsl-filter/\n\t//\n\tfloat ratio = iResolution.y / iResolution.x;\n\tfloat coordX = fragCoord.x / iResolution.x;\n\tfloat coordY = fragCoord.y / iResolution.x;\n\tvec2 dstCoord = vec2(coordX, coordY);\n\tvec2 srcCoord = vec2(coordX, coordY / ratio);\t\n\tvec2 uv = srcCoord.xy;\n\n\tvec3 res = vec3(1.0, 1.0, 1.0);\n    vec4 tex = texture(iChannel0, uv);\n    float brightness = (0.2126*tex.x) + (0.7152*tex.y) + (0.0722*tex.z);\n  \n    if (brightness < hatch_1) \n    {\n      if (mod(fragCoord.x + fragCoord.y, pDensity) <= pWidth)\n\t\t  res = vec3(hatch_1_brightness);\n    }\n  \n    if (brightness < hatch_2) \n    {\n\t\tif (mod(fragCoord.x - fragCoord.y, pDensity) <= pWidth)\n\t\t\tres = vec3(hatch_2_brightness);\n    }\n  \n    if (brightness < hatch_3) \n    {\n\t\tif (mod(fragCoord.x + fragCoord.y - (pDensity*0.5), pDensity) <= pWidth)\n\t\t\tres = vec3(hatch_3_brightness);\n    }\n  \n    if (brightness < hatch_4) \n    {\n\t\tif (mod(fragCoord.x - fragCoord.y - (pDensity*0.5), pDensity) <= pWidth)\n\t\t\tres = vec3(hatch_4_brightness);\n    }\n\t\n\tvec2 p = fragCoord.xy;\n    \n\t// simple sobel edge detection,\n\t// borrowed and tweaked from jmk's \"edge glow\" filter, here:\n\t// https://www.shadertoy.com/view/Mdf3zr\n    float gx = 0.0;\n    gx += -1.0 * lookup(p, -1.0, -1.0);\n    gx += -2.0 * lookup(p, -1.0,  0.0);\n    gx += -1.0 * lookup(p, -1.0,  1.0);\n    gx +=  1.0 * lookup(p,  1.0, -1.0);\n    gx +=  2.0 * lookup(p,  1.0,  0.0);\n    gx +=  1.0 * lookup(p,  1.0,  1.0);\n    \n    float gy = 0.0;\n    gy += -1.0 * lookup(p, -1.0, -1.0);\n    gy += -2.0 * lookup(p,  0.0, -1.0);\n    gy += -1.0 * lookup(p,  1.0, -1.0);\n    gy +=  1.0 * lookup(p, -1.0,  1.0);\n    gy +=  2.0 * lookup(p,  0.0,  1.0);\n    gy +=  1.0 * lookup(p,  1.0,  1.0);\n    \n\t// hack: use g^2 to conceal noise in the video\n    float g = gx*gx + gy*gy;\n\tres *= (1.0-g);\n\t\n\tfragColor = vec4(res, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}