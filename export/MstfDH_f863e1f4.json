{"ver":"0.1","info":{"id":"MstfDH","date":"1525026289","viewed":458,"name":"Cubicalotahedron","username":"dpiponi","description":"Iterated transforms and reflections of a cube.\nAdded some mouse control.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 translate(vec3 p) {\n    return mat4(1.0,  0.0,  0.0,  -p.x,\n              0.0,  1.0,  0.0,  -p.y,\n              0.0,  0.0,  1.0,  -p.z,\n              0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 scale(vec3 s) {\n    return mat4(s.x,  0.0,  0.0,  0.0,\n              0.0,  s.y,  0.0,  0.0,\n              0.0,  0.0,  s.z,  0.0,\n              0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat4(c,  -s,  0.0,  0.0,\n              s,  c,  0.0,  0.0,\n              0.0,  0.0,  1.0,  0.0,\n              0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat4(c,  0.0, s,  0.0,\n              0.0,  1.0, 0.0, 0.0,\n              -s,  0.0, c,  0.0,\n              0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat4(1.0, 0.0, 0.0, 0.0,\n                0.0, c,  -s,  0.0, \n                0.0, s,  c,  0.0,\n                0.0,  0.0,  0.0,  1.0);\n}\n\nfloat g(vec3 x) {\n    return max(x.z,max(-x.z,max(x.y,max(-x.y,max(x.x, -x.x)))))-1.0;\n}\n\nfloat h(vec3 x) {\n    mat4 m = rotateZ(1.5*iTime-3.128)*scale(vec3(1.0, 1.0, 1.0));\n    return g((vec4(x, 1.0)*m).xyz);\n}\n\nvec2 xy;\n\nfloat f(vec3 x) {\n    mat4 m = translate(vec3(1.4, -0.71+0.0*xy.y, 0.1+0.0*xy.x))*rotateY(5.123+0.01*iTime)\n        *scale(vec3(1.02, 1.01, 1.01))*rotateZ(-0.125+0.075*iTime);\n    float norm = 1.02;\n    float s = 1.0;\n    float t = 1000.0;\n    for (int i = 0; i < 10; ++i) {\n        x.x = abs(x.x);\n        float hh = h(x)/s;\n        t = min(t, hh);\n        x = (vec4(x, 1.0)*m).xyz;\n        s *= norm;\n    }\n    return t;\n}\n\nfloat eps = 0.0001;\nfloat lambda = 2.0;\n\nvec3 ico[12];\n\n//vec3 hash3(vec3 x) {\n//    float u = 1000.0*sin(x.x*x.y+3.3*x.z-2.2*x.y+10.123*x.y+11.12*x.y*x.z);\n//    float v = 1000.0*sin(x.z*x.y-2.1*x.z+3.0*x.z+7.211*x.y+32.12*x.y*x.x);\n//    float w = 1000.0*cos(x.z*x.y+3.4*x.z-3.0*x.x+17.97*x.y+11.12*x.x*x.y);\n//    return vec3(u-floor(u), v-floor(v), w-floor(w));\n//}\n\nfloat lighting(vec3 x, vec3 n) {\n    float t = 0.0;\n    for (int i = 0; i < 12; ++i) {\n        t += f(x+0.5*n+0.25*ico[i]);\n    }\n    return t/12.0;\n}\n\nvec3 march(vec3 p, vec3 d) {\n    float c;\n    c = f(p);\n    if (c < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    }\n    for (int i = 0; i < 70; ++i) {\n        float step = max(0.02, c);\n        p = p+step*d;\n        c = f(p);\n        if (c <= 0.0) {\n            float ex, ey, ez;\n            ex = f(p+vec3(eps, 0.0, 0.0));\n            ey = f(p+vec3(0.0, eps, 0.0));\n            ez = f(p+vec3(0.0, 0.0, eps));\n            vec3 n = vec3(ex-c, ey-c, ez-c)/eps;\n            n = normalize(n);\n            mat4 m = rotateY(0.1*iTime);\n            vec3 light = (vec4(1.0,1.0,-1.0,1.0)*m).xyz;\n            float l = 0.0;\n            l += 0.1+0.4*max(dot(n, light)/sqrt(3.0), 0.0);\n            l += 1.0*lighting(p, n);\n            return vec3(l)*vec3(0.7, 0.7, 0.7);\n        }\n    }\n    return vec3(0.1, 0.1, 0.1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n\nico[0]=    vec3(-0.26286500, 0.0000000, 0.42532500);\nico[1]=    vec3(0.26286500, 0.0000000, 0.42532500);\nico[2]=    vec3(-0.26286500, 0.0000000, -0.42532500);\nico[3]=    vec3(0.26286500, 0.0000000, -0.42532500);\nico[4]=    vec3(0.0000000, 0.42532500, 0.26286500);\nico[5]=    vec3(0.0000000, 0.42532500, -0.26286500);\nico[6]=    vec3(0.0000000, -0.42532500, 0.26286500);\nico[7]=    vec3(0.0000000, -0.42532500, -0.26286500);\nico[8]=    vec3(0.42532500, 0.26286500, 0.0000000);\nico[9]=    vec3(-0.42532500, 0.26286500, 0.0000000);\nico[10]=    vec3(0.42532500, -0.26286500, 0.0000000);\nico[11]=    vec3(-0.42532500, -0.26286500, 0.0000000);    \n    \n    vec2 uv = fragCoord.xy-0.5*iResolution.xy;\n    uv = 2.0*uv/iResolution.y;\n    xy = iMouse.xy/iResolution.xy;\n\n    vec3 p = vec3(0.0, 0.0, -12.0)+0.1*vec3(xy.x, xy.y, 0.0);;\n    vec3 d = normalize(vec3(0.5*uv, 1.0));\n    mat4 m = rotateY(0.1*iTime-6.28*xy.x);\n    p = (vec4(p, 1.0)*m).xyz;\n    d = (vec4(d, 1.0)*m).xyz;\n    vec3 color = march(p, d);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}