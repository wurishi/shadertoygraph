{"ver":"0.1","info":{"id":"mljXD3","date":"1676719146","viewed":55,"name":"Rounded box","username":"itan","description":"rounded corner box using sdf","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec3 sdfDebugColor(float d)\n{\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\treturn mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n}\n\nfloat sdfSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n\nfloat sdfShape(vec2 uv, vec2 p, vec2 s, vec2 r, float blur)\n{\n    uv.x /= r.x;\n    uv.y /= r.y;\n    s /= r;\n    float d = length(max(abs(uv - p) - s, 0.));\n    float m = d - length(r);\n    return 1.0 - smoothstep(0.0, blur, m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv = (uv - .5) * 4.;\n    uv.x *= aspect;\n    // Time varying pixel color\n    vec3 col = vec3((abs(sin(uv.x + iTime) * cos(uv.y * iTime))*.4 + .6));\n    col *= vec3(cos(iTime * 2.)* .4 + .6, 0.7, 0.8 * (uv.x + sin(iTime)) * cos(uv.y));\n    \n    vec2 p = vec2(0.0);\n    vec2 r = vec2(abs(sin(iTime * 0.1)), abs(cos(iTime * 0.2)));\n    vec2 s = vec2(2.4 * max(0.,sin(iTime * .4)), .8);\n    float b = 0.1;\n\n    float m = sdfShape(uv,p, s, r, b);\n   \n    \n    // Output to screen\n    fragColor = vec4(col,1.0) * m;\n}","name":"Image","description":"","type":"image"}]}