{"ver":"0.1","info":{"id":"Xl3Szj","date":"1481481758","viewed":461,"name":"Praise the sun!  \\[T]/","username":"stduhpf","description":"A famous character from dark souls(i've never played this game, but this character is funny)\nSorry if it's slow.\nYou can disable volumetric light and shadow if you want a better framerate.(or use low resolution image)\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["modeling","raytraced","solaireofastora"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR 11.\n\n#define shadows\n#define God_Rays\n#define normal_mapping\n#define Sky\n\n#define Volsteps 10. //quality of the godrays 10 is low but ok with the dithering\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co,vec2(12.9898,78.233)))*43758.5453)-.5;}\nfloat noise(vec2 uv)\n{\n    vec2 u = floor(uv);\n    vec2 v =fract(uv);\n    return mix(\n        mix(\n            rand(u),\n            rand(u+vec2(1,0)),\n            smoothstep(0.,1.,v.x))\n        ,mix(rand(u+vec2(0,1)),\n          rand(u+1.),smoothstep(0.,1.,v.x)),\n                    smoothstep(0.,1.,v.y));\n}\n\nfloat fbm(vec2 uv)\n{\n    float n =1.;\n    float r =1.;\n    for (int i =0;i<8;i++)\n    {\n        uv*=1.9;\n        uv+=100.;\n        n=mix(n,noise(uv),r);\n        r*=.25;\n    }\n    return n;\n}\n\nvec3 sol(vec2 uv)\n{\n    vec3 col = vec3(1.);\n    vec2 p= vec2(length(uv),atan(uv.x,uv.y)+.2);\n    col=mix(col,vec3(1,.4,.1),smoothstep(.005,-.005,p.x-.2*pow(.51+.51*cos(8.*p.y+fbm(vec2(10.*p.x,p.y))),5.-.5)-.15));\n    col=mix(col,vec3(.5,.15,.15),smoothstep(.005,-.005,abs(p.x-.2*pow(.51+.51*cos(8.*p.y+fbm(vec2(10.*p.x,p.y))),5.-.5)-.15)-.01));    \n    col=mix(col,vec3(1,1,.25),smoothstep(.005,-.005,p.x-.13));\n    col=mix(col,vec3(.5,.15,.15),smoothstep(.005,-.005,2.*abs(p.x-.13)-.005));\n\treturn col;\n}\n\n\nfloat rand(vec3 co){\n    return fract(sin(dot(co,vec3(12.9898,78.233,45.4159)))*43758.5453)-.5;}\nfloat noise(vec3 uv)\n{\n    vec3 u = floor(uv);\n    vec3 v =fract(uv);\n    return mix(\n        mix(\n        mix(\n            rand(u),\n            rand(u+vec3(1,0,0)),\n            smoothstep(0.,1.,v.x))\n        ,mix(rand(u+vec3(0,1,0)),\n          rand(u+vec3(1,1,0)),smoothstep(0.,1.,v.x)),\n                    smoothstep(0.,1.,v.y)),\n            mix(\n        mix(\n            rand(u+vec3(0,0,1)),\n            rand(u+vec3(1,0,1)),\n            smoothstep(0.,1.,v.x))\n        ,mix(rand(u+vec3(0,1,1)),\n          rand(u+1.),smoothstep(0.,1.,v.x)),\n                    smoothstep(0.,1.,v.y))\n        ,smoothstep(0.,1.,v.z));\n}\nfloat fbm(vec3 uv)\n{\n    float n =1.;\n    float r =1.;\n    for (int i =0;i<8;i++)\n    {\n        uv*=2.;\n        uv+=100.;\n        n=mix(n,noise(uv),r);\n        r*=.25;\n    }\n    return n;\n}\n\n\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = abs(vec2(length(p.xz)-t.x,p.y));\n  return max(q.x,q.y)-t.y;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\t#define dot2(n) dot(n,n)\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat feather(vec3 p)\n{\n    p.x+=.02*cos(20.*p.y+smoothstep(.0,.03,p.y)*iTime);\n    return udTriangle(p,vec3(0,0,0),vec3(0,0,.05),vec3(0,.2,.08));\n}\n\nfloat helmet(vec3 p)\n{\n    float d = sdCappedCylinder(p,vec2(.1,.11))-.03;\n    d=min(d,sdCappedCylinder(p+vec3(0,-.03,0),vec2(.101,.02))-.03);\n    d=min(d,sdBox(p+vec3(.13,.03,0),vec3(.005,.08,.02)));\n    d=max(d,-sdCappedCylinder(p+vec3(.25,-.03,0),vec2(.2,.005)));\n    d=min(d,length(p+vec3(.128,0,0))-.01);\n    d=min(d,length(p+vec3(.128,.04,0))-.01);\n    d=min(d,length(p+vec3(.128,.08,0))-.01);\n    d=min(d,length(p+vec3(.128,-.041,0))-.01);\n    d=smin(d,sdTorus(p+vec3(0,.15,0),vec2(.12+.002*sin(20.*atan(p.x,p.z)),.05)),.03);\n    return d;\n}\n\nvec2 smun(vec2 a,vec2 b,float r)\n{\n\treturn vec2(smin(a.x,b.x,r),b.x<a.x?b.y:a.y);\n}\n\nvec2 chest(vec3 p)\n{\n    p.y+=.15;\n    vec2 d = vec2(udRoundBox(p,vec3(.05+.1*sin(p.y),.18,.12+.01*sin(15.*p.y)),.1),2);\n    d.x=smin(d.x,udTriangle(p,vec3(-.1,-.2,.17),vec3(-.2,-.5,.2),vec3(-.12,-.2,-.1)),.05);\n    d.x=smin(d.x,udTriangle(p,vec3(-.1,-.2,-.17),vec3(-.15,-.5,-.2),vec3(-.12,-.2,.1)),.03);\n    d.x=smin(d.x,udTriangle(p,vec3(.1,-.2,.17),vec3(.11,-.5,.2),vec3(.12,-.2,-.1)),.05);\n    d.x=smin(d.x,udTriangle(p,vec3(.1,-.2,-.17),vec3(.1,-.5,-.2),vec3(.12,-.2,.1)),.03);\n    p.z=-abs(p.z);\n   \tp+=vec3(0,-.18,.18);\n    p.yz*=mat2(cos(.5),-sin(.5),sin(.5),cos(.5));\n    float m= sdCappedCylinder(p,vec2(.1,.08))-.02;\n    d=smun(d,vec2(m,4),.05);\n    return d;\n}\n\nfloat arms(vec3 p)\n{\n        p.z=-abs(p.z);\n\n    p.yz*=mat2(cos(.6),-sin(.6),sin(.6),cos(.6));\n float d =sdCappedCylinder(p-vec3(0,.2,-.16),vec2(.075,.2));  \n    p.yz*=mat2(cos(.2),sin(.2),-sin(.2),cos(.2));\n    d=smin( d,sdCappedCylinder(p-vec3(0,.48,-.23),vec2(.06,.15)),.01);\n        p.yz*=mat2(cos(.2),sin(.2),-sin(.2),cos(.2));\n    d=smin(d,udRoundBox(p-vec3(0,.62,-.35),vec3(.04,.08,.01+sin(240.*p.x)*.003*smoothstep(.61,.63,p.y)),.01),.02);\n    return d;\n}\n\nvec2 un(vec2 a,vec2 b)\n{\n    return b.x<a.x?b:a;\n}\n\nvec2 legs(vec3 p)\n{\n     p.z=-abs(p.z);\n\n    p.yz*=mat2(cos(.3),sin(.3),-sin(.3),cos(.3));\n vec2 d =vec2(sdCappedCylinder(p-vec3(0,-.55,.05),vec2(.075,.2)),5.);\n    p.yz*=mat2(cos(.3),-sin(.3),sin(.3),cos(.3));\n    d.x=smin(d.x,sdCappedCylinder(p-vec3(0,-.85,-.17),vec2(.065,.12)),.05);\n    d=un(d,vec2(smin(\n        sdCappedCylinder(p-vec3(0,-1.05,-.17),vec2(.07,.12)),\n        udRoundBox(p-vec3(-.08,-1.2,-.17),vec3(.15,.02,.05),.02),.1)\n        ,1.));\n    return d;\n}\nfloat tower(vec3 p)\n{\n    float d = sdCappedCylinder(p-vec3(0,-10.,0),vec2(2.5,8.8));\n    d=min(d,sdTorus82(p-vec3(0,-1.,0),vec2(2.5,.3)));\n    p.xz=vec2(length(p.xz),atan(p.x,p.z));\n    p.z=mod(p.z+.315,.63)-.315;\n    p.xz=p.x*vec2(cos(p.z),sin(p.z));\n    d=min(d,udRoundBox(p-vec3(2.6,-.6,0),vec3(.2,.4,.4),.01));\n    return d;\n    }\n\nvec2 map(vec3 p)\n{\n    vec2 m = vec2(helmet(p+vec3(0,-.25,0)),1);\n    m=un(m,chest(p));\n    m=un(m,vec2(feather(p-vec3(0,.35,.05)),3));\n    m=un(m,vec2(arms(p),5));\n    m=smun(m,legs(p),.1);\n    m=un(m,vec2(tower(p),6.));\n    return m;\n}\n\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(.0001,0);\n    vec3 n=  vec3 (map(p+e.xyy).x-map(p-e.xyy).x,map(p+e.yxy).x-map(p-e.yxy).x,map(p+e.yyx).x-map(p-e.yyx).x);\n    return normalize(n);\n}\n\n\nvec2 intersect(vec3 ro, vec3 rd)\n{\n    float f=0.;\n    for(int i = 0; i <500; i++)\n    {\n        vec2 h = map(ro+f*rd);\n            if(h.x<.002)\n                return vec2(f,h.y);\n           if(f > FAR)\n           \t\tbreak;\n            f+=.9*h.x;\n    }\n    return vec2(FAR,0);\n}\n\nfloat shad(vec3 rd,vec3 ro)\n{\n    float t=0.01;\n    for(int i=0;i<100;i++)\n    {\n        vec3 pos = ro+t*rd;\n        vec2 h= map(pos);\n        if(h.x<.005)\n                return 0.;\n        t+=.8*h.x;\n        if(t>FAR)\n        break;\n        }\n\n    return 1.;\n}\n#ifdef God_Rays\nfloat scat(vec3 p, vec3 rd, vec3 ld, float d)\n{\n    float Step= d/Volsteps;\n    float scat=0.;\n    p-=Step*rd*rand(sin(rd.xy/rd.z+iTime)*100.);\n    for(float i =0.;i<Volsteps;i++)\n    {\n        p+=Step*rd;\n        scat+=shad(ld,p);\n    }\n    return scat/Volsteps;\n}\n#endif\n\nfloat ao(vec3 p, vec3 n)\n{\n    const float ao_it =4.;\n    float d=0.;\n    float sm =0.;\n    for(float i=1.;i<ao_it;i++)\n    {\n        d+=.3;\n        float h = map(p+d*n).x;\n        sm+=(d-h)/pow(2.8,i);\n    }\n    return max(0.,1.-sm*4.);\n\n}\n\nvec3 gettex(vec3 p , float i)\n{\n    if(i==1.)\n    \treturn .4+.2*texture(iChannel0,vec2(p.y+p.x,atan(p.x,p.z))).rgb;\n    if(i==2.)\n        return abs(p.y+.3)<.01?vec3(.32,.08,.08):(p.x<0.?sol(2.2*p.yz+vec2(.2,0)):vec3(1));\n    if(i==3.)\n        return vec3(.8,.1,.1);\n     if(i==4.)\n        return vec3(.1,.4,.1);\n     if(i==5.)\n    \treturn .2+.2*texture(iChannel0,vec2(p.y+p.x,atan(p.x,p.z))).rgb;\n      if(i==6.)\n    \treturn .4+.2*texture(iChannel2,p.xz).rgb;\n    return vec3(1);\n}\n#ifdef normal_mapping\nvec3 normap(vec3 nor,vec3 pos,float i)\n{\n    if(i==1.)\n        return normalize(nor+.1*vec3(fbm(40.*pos),fbm(40.*pos+10.),fbm(40.*pos+20.)));\n    if(i==2.)\n        return  normalize(nor+.15*texture(iChannel1,vec2(pos.y+pos.x,atan(pos.x,pos.z))).rgb);\n    if(i==3.)\n        return normalize(nor+.25*texture(iChannel1,vec2(pos.y+pos.x,atan(pos.x,pos.z))).rgb);\n    if(i==4.)\n        return normalize(nor+.2*vec3(fbm(20.*pos),fbm(20.*pos+10.),fbm(20.*pos+20.)));\n    if(i==5.)\n        return normalize(nor+.3*cos(200.*pos)*cos(200.*pos)); \n    return nor;\n}\n#endif\nfloat getspec(float i)\n{\n    if(i==1.)\n        return 2.;\n    if(i==2.)\n        return .3;\n    if(i==4.)\n        return .15;\n    if(i==5.)\n        return 1.;\n    return 0.;\n}\n\nvec4 gamma(vec4 x, float p)\n{\n    return vec4(pow(x.x,p),pow(x.y,p),pow(x.z,p),pow(x.w,p));\n}\n#ifdef Sky\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol1 = vec3 (0.05, 0.05, 0.15), sbCol2 = vec3 (0.2, 0.25, 0.5);\n  vec3 col = sbCol2 + 0.2 * vec3(1,.9,.5) * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\nvec3 SkyCol (vec3 ro, vec3 rd,vec3 sunDir)  //adapted from \"train ride\" by dr2\n{\n  const vec3 sCol1 = vec3 (0.06, 0.04, 0.02), sCol2 = vec3 (0.03, 0.03, 0.06),\n     mBrite = vec3 (-0.5, -0.4, 0.77);\n  const float skyHt = 150.;\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 0.5 ;\n    vec2 p = 0.02 * (rd.xz * (skyHt - ro.y) / rd.y + ro.xz);\n    float w = 0.8;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * fbm (.8+p*.5)*2.+.1;\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (5. * (f - 0.4) * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n\n    float s = max (dot (rd, sunDir), 0.);\n    col = SkyBg (rd) + vec3(1,.9,.5) * (0.35 * pow (s, 6.) +\n       0.65 * min (pow (s, 256.), 0.3));\n    col = mix (col, vec3 (0.55), cloudFac);\n  \n  return col;\n}\n#endif\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy -iResolution.xy)/iResolution.y;\n    vec2 mse =iMouse.xy/iResolution.x-vec2(.5,.5+(iResolution.y-iResolution.x)/(2.*iResolution.x));\n    mse*=8.*vec2(-1,1)/*part of the fix*/;\n    if(iMouse.xy==vec2(0))\n        mse=vec2(-2.5,.3);\nmat3 rdroty = mat3(1,0,0,0,cos(mse.y),sin(mse.y),0,-sin(mse.y),cos(mse.y));\nmat3 rdrotx = mat3(cos(mse.x),0,sin(mse.x),0,1,0,-sin(mse.x),0,cos(mse.x));\n\n    vec3 ro = vec3(0,0,-2.)*rdroty*rdrotx;\n    vec3 rd = normalize(vec3(uv*vec2(-1,1)/*part of the fix*/,2.))*rdroty*rdrotx;\n    rd=rd.zyx; //i fucked up with the distance fuction so this is just a fix\n    ro=ro.zyx;\n    float m =0.;\n    vec2 i = intersect(ro,rd);\n    \n    vec3 ld = normalize(vec3(-1.,.5,-.5));\n    \n    m+=.1/distance(rd,ld);\n    #ifdef Sky\n    vec3 col = SkyCol(ro,rd,ld);\n    #else\n    vec3 col= mix(vec3(.5,.6,.9),vec3(1,.9,.5),min(1.,.1/distance(rd,ld)));\n     #endif\n    if(i.y>0.)\n    {\n    vec3 pos = ro+i.x*rd;\n    vec3 nor = normal(pos);\n    float amb =ao(pos,nor)*.5;\n        #ifdef normal_mapping\n    nor=normap(nor,pos,i.y);\n\t#endif\n        m=amb;\n        float sh =1.;\n        #ifdef shadows\n       sh=shad(ld,pos+.01*nor);\n        #endif\n        m+=max(0.,dot(nor,ld))*sh;\n       m+=min(1.,pow(.1/distance(reflect(rd,nor),ld),2.))*getspec(i.y)*sh;\n        col= gettex(pos,i.y);\n             col *= (m);\n\n        \n    }\n    #ifdef God_Rays\n   col = mix(col, vec3(1,.9,.6),scat(ro,rd,ld,i.x)/4.);\n    #endif\n    \n\tfragColor = gamma(vec4(col,1.0),.8);\n}","name":"Image","description":"","type":"image"}]}