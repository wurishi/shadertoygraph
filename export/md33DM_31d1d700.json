{"ver":"0.1","info":{"id":"md33DM","date":"1677346232","viewed":175,"name":"swept mess","username":"louis_C","description":"Playing out with the nice vector field feature dither from JeroenDStout (https://www.shadertoy.com/view/wsycRt) it; made very nice level of detail quite difficult to recapture in video.\n","likes":11,"published":1,"flags":40,"usePreview":0,"tags":["sound","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nif(int(distance(fragCoord.x,iResolution.x*0.5))<640\n    && int(distance(fragCoord.y,iResolution.y*0.5))<360 ){\n    vec2 uv = fragCoord/iResolution.xy;\n    float col = texture(iChannel0,uv).z;\n   vec3 hue =clamp( mix(vec3(1.),3.*abs(1.-2.*fract(col*0.1+0.7+vec3(0.,-1./3.,1./3.)))-1.,0.15),0.,1.);\n   \n    fragColor = vec4(vec3(hue*texture(iChannel0,uv).x),1.);}\n    else{fragColor = vec4(0.);}\n    //fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rd ( float t ) { return fract(sin(dot(floor(t),45.236))*7845.236);}\nfloat no ( float t ) { return mix(rd(t),rd(t+1.),smoothstep(0.,1.,fract(t)));}\nfloat rd2 ( vec2 uv ) { return fract(sin(dot(floor(uv),vec2(78.125,98.226)))*7932.265+iTime);}\nfloat no2 ( vec2 uv ) { float a = rd2(uv);float b = rd2(uv+vec2(1.,0.));float c = rd2(uv+vec2(0.,1.)); float d = rd2 (uv +vec2 (1.));\nvec2 h = smoothstep(0.,1.,fract(uv));return mix(mix(a,b,h.x),mix(c,d,h.x),h.y);}\n#define PI 3.1415927\nfloat rds(float t){return fract(sin(dot(floor(t),45.5))*7845.236);}\nfloat n1s (float t){ return mix(rds(t), rds(t+1.),fract(t));}\nfloat n2s (float t){ return mix(rds(t), rds(t+1.),smoothstep(0.,1.,fract(t)));}\nfloat hs(float t){return fract(sin(dot(t,45.5))*7845.236);}\nvec2 si1 (float tf,float t,float i){   \tfloat t1 = pow(n1s(tf),0.5);\n\tfloat d1 = sin(i*pow(t1,2.))+sin(i*0.1*pow(t1,0.2))*4.;\n  \tfloat t2 = pow(n1s(tf+mix(1.,-1.,step(0.5,fract(t*0.25)))),0.5);\n\tfloat d2 = sin(i*pow(t2,2.))+sin(i*0.1*pow(t2,0.2))*4.;  \n  return vec2(d1,d2);}\nvec2 syn(float time){\n   float v0 =clamp(time*0.1,0.,1.);\n  float v1 = 0.;\n  float v2 = clamp(time*0.1-1.5,0.,1.);\n\n  \n\tfloat t = time;\n\tfloat va = n1s(t*0.5); \t\n    float va2 = 1.-va; \n    float va3 = rds(t);\n  \tvec2 s1 = vec2(0.);\n\n  \tfor(int  i = 0 ; i <  20 ; i++){\n      float ts1 = t+float(i)*0.25;\n      float tf1 = ((rds(ts1)*6.+4.)*ts1); \n\ts1 += si1(tf1,ts1,5000.)*v0;\n     float ts2 = t+float(i)*0.5;\n      float tf2 = ((rds(ts2)*6.+4.)*ts2); \n\ts1 += si1(tf2,ts2,10000.)*(v1);\n       float ts3 = t+float(i);\n      float tf3 = ((rds(ts3)*6.+4.)*ts3); \n\ts1 += si1(tf3,ts3,5000.)*v2;\n    }\n  \ts1/=20.;\n\n  return s1*0.33*(1.-clamp(time-170.,0.,10.)*0.1);\n  }\n  float eu( float tp, float nb, float time ){\n    float t = mod(floor( time )*tp,nb);\n    return floor((t-tp)/tp)+1.0+fract(time);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = fragCoord.xy / iResolution.xy;\n   \n    const float n = 4.0;\n    float fi = floor((uv.x*4.) * n * 0.5);\n    float angle = 2.0 * PI * fi / n;\n    vec2  di = vec2(cos(angle), sin(angle));\n    vec2  df = vec2(1.0, 0.0);\n    vec2  f  = vec2(0.0, 0.0);\n\n   \n        float x = mix(mix(1./4.,2./4.,step(0.33,uv.x)),3./4.,step(0.66,uv.x));\n\n        float t = iTime;\n        vec2  w = syn(t);\n        float v = (w.x + w.y) * 0.5;\n        v *= 0.5 * (1.0 - cos(2.0 * PI * x));\n        f += df * v;\n        df = df.xy * di.x + vec2(-1.0, 1.0) * df.yx * di.y;\n    float y =  length(f);\n    y = sqrt(y / (1.0 + y));\n    y = clamp(y, 0.0, 1.0)\n    *(1.-mix(mix(1./4.,2./4.,step(0.33,uv.x)),3./4.,step(0.66,uv.x)));\n      vec2 u = fragCoord /iResolution.xy;\n      vec4 s1 = vec4(clamp(vec3(texture(iChannel0,vec2(0.1,0.5)).y,texture(iChannel0,vec2(0.4,0.5)).y,texture(iChannel0,vec2(0.6,0.5)).y)*vec3(15.,10.,100.)-0.5,0.,1.),texture(iChannel0,vec2(0.9,0.5)).y);\n    vec3 spectrum = vec3(texture(iChannel0,vec2(0.2,0.)).z*0.15,\n    texture(iChannel0,vec2(0.25,0.)).z*1.,\n    texture(iChannel0,vec2(0.5,0.)).z*0.1); \n     float v1 = mix(mix(spectrum.x,mix(spectrum.y,spectrum.z,step(0.5,u.x)),step(0.25,u.x)),s1.x+s1.y+s1.z,step(0.75,u.x));\n     float v2 = mix(clamp(texture(iChannel0,u).y*0.95+v1*0.05,0.,1.),texture(iChannel0,u).y+v1,step(0.75,u.x));\n    if(int(distance(fragCoord.x,iResolution.x*0.5))<640\n    && int(distance(fragCoord.y,iResolution.y*0.5))<360 ){\n   vec2 vres = min(vec2(1280.,720.), iResolution.xy);\n    vec2 res = iResolution.xy/vres;\n    vec2 res2 = clamp( iResolution.xy-vec2(1280.,720.),0.,1.);\n    vec2 uv = -1. + 2. * fragCoord /iResolution.xy;\n    vec2 u2 = uv;\n    vec2 fac  = vec2(iResolution.x/iResolution.y,1.);\n    u2 *= fac;\n    vec2 u = fragCoord /iResolution.xy;\n  \n    float zo = 0.;\n    uv += vec2 ( no2(uv*10. )-0.5,no2(uv*10.+45.369)-0.5)*no(s1.a)*0.1;\n    float tt = s1.a*0.003;\n    float tt2 = s1.a*0.1;\n    for (int i = 0 ; i <  150 ; i ++){\n    vec2 pp =( vec2 (no(tt+float(i)*22.659),no(tt+float(i)*78.26))-0.5)*2.5+( vec2 (no(tt2+float(i)*73.265),no(tt2+float(i)*95.125))-0.5)*0.15;\n    zo = max (zo, smoothstep(pow(spectrum.x,1.1)*4.*no(tt+float(i)*12.)+0.01,0.001,distance(u2,pp*fac)));\n    }\n   \n    float vb = max(zo,texture(iChannel0,u).a*0.99); \n    float tta = 0.001;\n    vec2 nm = (vb - vec2 (mix(texture(iChannel0,u-vec2(tta,0.)).x,texture(iChannel0,u-vec2(tta,0.)).x,no(s1.a*6.)),mix(texture(iChannel0,u-vec2(0.,tta)).x,texture(iChannel0,u-vec2(0.,tta)).x,no(s1.a*6.+45.236))));\n    uv +=nm;\n    float t1 =abs(sin(atan(uv.x,sin(uv.y*spectrum.x*500.+iTime)))+no(s1.a*0.01+486.)-0.5);\n    float l1 = abs(dot (nm,normalize((vec2(no(spectrum.y*28.2),no(spectrum.x*28.2+45.269))-0.5)*2.)));\n    float f1 = mix (mix(t1,1.-t1,smoothstep(0.3,0.7,no(s1.a*0.01+235.56))),l1,smoothstep(0.4,0.6,no(s1.a*0.2)));\n\n     float vr = step(-0.5+v2 *mix(mix(15.,mix(5.,100.,step(0.5,u.x)),step(0.25,u.x)),1.,step(0.75,u.x)),u.y);\n    fragColor = vec4(vec3(clamp(f1,0.,1.),v2,y),vb);}\n    else{fragColor = vec4(0.,v2,pow(y,1.5),0.);}\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n if(int(distance(fragCoord.x,iResolution.x*0.5))<640\n    && int(distance(fragCoord.y,iResolution.y*0.5))<360 ){\n        vec2 uv = fragCoord/iResolution.xy;\n       vec2 off  = vec2(1. / 40.);\n    \n    float val[12];\n    vec2  acc = vec2(0.);\n    \n    val[ 0] = (texture(iChannel0, vec2(uv.x - off.x, uv.y - off.y * 2.)).x);\n    val[ 1] = (texture(iChannel0, vec2(uv.x + off.x, uv.y - off.y * 2.)).x);\n    val[ 2] = (texture(iChannel0, vec2(uv.x - off.x * 2., uv.y - off.y * 1.)).x);\n    val[ 3] = (texture(iChannel0, vec2(uv.x - off.x * 1., uv.y - off.y * 1.)).x);\n    val[ 4] = (texture(iChannel0, vec2(uv.x + off.x * 2., uv.y - off.y * 1.)).x);\n    val[ 5] = (texture(iChannel0, vec2(uv.x + off.x * 1., uv.y - off.y * 1.)).x);\n    val[ 6] = (texture(iChannel0, vec2(uv.x - off.x * 2., uv.y + off.y * 1.)).x);\n    val[ 7] = (texture(iChannel0, vec2(uv.x - off.x * 1., uv.y + off.y * 1.)).x);\n    val[ 8] = (texture(iChannel0, vec2(uv.x + off.x * 2., uv.y + off.y * 1.)).x);\n    val[ 9] = (texture(iChannel0, vec2(uv.x + off.x * 1., uv.y + off.y * 1.)).x);\n    val[10] = (texture(iChannel0, vec2(uv.x - off.x, uv.y + off.y * 2.)).x);\n    val[11] = (texture(iChannel0, vec2(uv.x + off.x, uv.y + off.y * 2.)).x);\n    \n    acc += texture(iChannel1, vec2(uv.x - off.x * .125, uv.y - off.y * .125)).zw;\n    acc += texture(iChannel1, vec2(uv.x + off.x * .125, uv.y - off.y * .125)).zw;\n    acc += texture(iChannel1, vec2(uv.x - off.x * .125, uv.y + off.y * .125)).zw;\n    acc += texture(iChannel1, vec2(uv.x + off.x * .125, uv.y + off.y * .125)).zw;\n    \n    float prev_value = texture(iChannel1, uv).x;\n    \n    \n    float mean = 0.;\n    for (int i = 0; i < 12; i++) {\n        val[i] = pow(val[i], 2.2);\n        mean += val[i];\n    }\n    mean /= 12.;\n    \n    float var = 0.;\n    for (int i = 0; i < 12; i++) {\n        var += pow(val[i]-mean, 2.);\n    }\n    \n    mean *= 0.05;\n    mean += acc.x * 0.95 * 0.25;\n    var *= 0.05;\n    var += acc.y * 0.95 * 0.25;\n    \n    float overShot = max(0., sqrt(var)*1.5 + mean * 0.8 - 1.0);\n    \n    fragColor.y     = overShot;\n    \n    fragColor.z     = mean;\n    fragColor.w     = var;\n    \n    float vid = (texture(iChannel0, uv).x);\n    \n    fragColor.x = pow(vid, 2.2) - mean;\n    fragColor.x /= min(1., max(4e-1, sqrt(var) * .85));\n    fragColor.x += 0.15 + mean * 0.8;\n \n    \n    float diff = abs(fragColor.x - prev_value);\n    fragColor.y = sqrt(diff);}\n    else{fragColor = vec4(0.);}\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float kernel_l[25] = float[25](\n     .1, .2, .2, .2, .1,\n     .2, .3, .3, .3, .2,\n     .2, .3, .4, .3, .2,\n     .2, .3, .3, .3, .2,\n     .1, .2, .2, .2, .1\n);\n\nfloat kernel_h[25] = float[25](\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6\n);\n\nfloat kernel_v[25] = float[25](\n     .6,  .6,  .6,  .6,  .6,\n     .3,  .3,  .3,  .3,  .3,\n     .0,  .0,  .0,  .0,  .0,\n    -.3, -.3, -.3, -.3, -.3,\n    -.6, -.6, -.6, -.6, -.6\n);\n\nfloat kernel_s[25] = float[25](\n    -.1, -.2, -.2, -.2, -.1,\n    -.2,  .1,  .1,  .1, -.2,\n    -.2,  .1,  .5,  .1, -.2,\n    -.2,  .1,  .1, -.1, -.2,\n    -.1, -.2, -.2, -.2, -.1\n);\nfloat samplePx(in vec2 px)\n{\n    if (px.x < 0. || px.y < 0. || px.x > 1. || px.y > 1.)\n        return 0.;\n    return texture(iChannel0, px).x - texture(iChannel1, px).x;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nif(int(distance(fragCoord.x,iResolution.x*0.5))<640\n    && int(distance(fragCoord.y,iResolution.y*0.5))<360 ){\n   vec2 pxSz = vec2(1., 1.) / iResolution.xy;\n    vec2 uv = fragCoord/ iResolution.xy;\n    \n    float sample_video[25];\n    int index = 0;\n    for (float y = -2.; y <= 2.; y += 1.) {\n        for (float x = -2.; x <= 2.;x += 1.) {\n            sample_video[index++] = samplePx(uv + vec2(pxSz.x * x, pxSz.y * y));\n        }\n    }\n    \n    float filter_l = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_l += sample_video[i] * kernel_l[i];\n    }\n    filter_l *= .2;\n    \n    float filter_h = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_h += sample_video[i] * kernel_h[i];\n    }\n    \n    float filter_v = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_v += sample_video[i] * kernel_v[i];\n    }\n    \n    float filter_s = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_s += sample_video[i] * kernel_s[i];\n    }\n\n    // Output to screen\n    fragColor = vec4(filter_l, filter_h, filter_v, filter_s);}\n    else{fragColor = vec4(0.);}\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float kernel_l[25] = float[25](\n     .1, .2, .2, .2, .1,\n     .2, .3, .3, .3, .2,\n     .2, .3, .4, .3, .2,\n     .2, .3, .3, .3, .2,\n     .1, .2, .2, .2, .1\n);\n\nfloat kernel_h[25] = float[25](\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6,\n    .6, .3, 0., -.3, -.6\n);\n\nfloat kernel_v[25] = float[25](\n     .6,  .6,  .6,  .6,  .6,\n     .3,  .3,  .3,  .3,  .3,\n     .0,  .0,  .0,  .0,  .0,\n    -.3, -.3, -.3, -.3, -.3,\n    -.6, -.6, -.6, -.6, -.6\n);\n\nfloat kernel_s[25] = float[25](\n    -.1, -.2, -.2, -.2, -.1,\n    -.2,  .1,  .1,  .1, -.2,\n    -.2,  .1,  .5,  .1, -.2,\n    -.2,  .1,  .1, -.1, -.2,\n    -.1, -.2, -.2, -.2, -.1\n);\nvec4 sample_diff_tex(vec2 uv)\n{\n    if (uv.x < 0. || uv.x > 1. || uv.x < 0. || uv.y > 1.)\n      return vec4(0., 0., 0., 0.);\n    \n    return texture(iChannel0, uv);\n}\nuint HashWang( uint a )\n{\n    a = (a ^ 61u) ^ (a >> 16u);\n    a = a + (a << 3u);\n    a = a ^ (a >> 4u);\n    a = a * 0x27d4eb2du;\n    a = a ^ (a >> 15u);\n    return a;\n}\nuint Rand( inout uint seed )\n{\n    seed += 13u;\n    return HashWang( seed );\n}\n\nfloat FRand( inout uint seed )\n{\n    uint urand = Rand( seed );    \n    const uint mantissaMask = (0xffffffffu) >> ( 32u - 23u );\n    return fract(float(urand & mantissaMask) / float(mantissaMask)); \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nif(int(distance(fragCoord.x,iResolution.x*0.5))<640\n    && int(distance(fragCoord.y,iResolution.y*0.5))<360 ){\n      uint seed = uint( iTime * 23.456 ) + uint(fragCoord.x *23.45f) * 12326u + uint(fragCoord.y * 36.43) * 42332u;\n    float rnd = FRand(seed);\n    \n    vec2 pxSz = vec2(1., 1.) / iResolution.xy;\n    vec2 uv = fragCoord/ iResolution.xy;\n    \n    vec4 old_sample = texture(iChannel2, uv);\n    vec4 proc_video = texture(iChannel1, uv);\n    \n    float rate = proc_video.y;\n    float tired_rate = pow(0.995, 1.0 + rate * 10.);\n    float shift_rate = 7. + 1. * pow(2.0, -1. + rate * 2.);\n    \n    float prev_bw = old_sample.x;\n    float luminosity = old_sample.y;\n    float luminosity_shift = 0.;\n    float tiredness = old_sample.w * tired_rate;\n    \n    vec4 sample_diff[25];\n    int index = 0;\n    for (float y = -2.; y <= 2.; y += 1.) {\n        for (float x = -2.; x <= 2.;x += 1.) {\n            sample_diff[index++] = sample_diff_tex(uv + vec2(pxSz.x * x, pxSz.y * y));\n        }\n    }\n    \n    float filter_l = 0.;\n    float filter_h = 0.;\n    float filter_v = 0.;\n    float filter_s = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_l += sample_diff[i].x * kernel_l[i];\n        filter_h += sample_diff[i].y * kernel_h[i];\n        filter_v += sample_diff[i].z * kernel_v[i];\n        filter_s += sample_diff[i].w * kernel_s[i];\n    }\n    luminosity_shift += filter_l * 10.0;\n    luminosity_shift += filter_h * -9.;\n    luminosity_shift += filter_v * -9.;\n    luminosity_shift += filter_s * 10.;\n    \n\n    \n    tiredness *= pow(0.9, abs(luminosity_shift * 0.005));\n    \n    luminosity_shift *= shift_rate;\n    \n    luminosity += sign(luminosity) * (100. * log(1. + tiredness));\n    luminosity *= 0.9995;\n    luminosity += luminosity_shift;\n    \n    luminosity = max(-1000., min(1000., luminosity));\n    \n    float new_bw = luminosity > 0. ? 1. : 0.;\n    if (new_bw != prev_bw)\n        tiredness += 1. + 100. * rnd;\n    fragColor = vec4(new_bw, luminosity, filter_s, tiredness);}\n    else{fragColor = vec4(0.);}\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float rd(float t){return fract(sin(dot(floor(t),45.5))*7845.236);}\nfloat n1 (float t){ return mix(rd(t), rd(t+1.),fract(t));}\nfloat n2 (float t){ return mix(rd(t), rd(t+1.),smoothstep(0.,1.,fract(t)));}\nfloat hs(float t){return fract(sin(dot(t,45.5))*7845.236);}\nvec2 si1 (float tf,float t,float i){   \tfloat t1 = pow(n1(tf),0.5);\n\tfloat d1 = sin(i*pow(t1,2.))+sin(i*0.1*pow(t1,0.2))*4.;\n  \tfloat t2 = pow(n1(tf+mix(1.,-1.,step(0.5,fract(t*0.25)))),0.5);\n\tfloat d2 = sin(i*pow(t2,2.))+sin(i*0.1*pow(t2,0.2))*4.;  \n  return vec2(d1,d2);}\nfloat eu( float tp, float nb, float time ){\n    float t = mod(floor( time )*tp,nb);\n    return floor((t-tp)/tp)+1.0+fract(time);}\nvec2 mainSound( int samp, float time )\n{\n     float v0 =clamp(time*0.1,0.,1.)*(1.-clamp(time*0.1-3.,0.,1.))\n     +clamp(time*0.1-4.5,0.,1.)*(1.-clamp(time*0.1-6.65,0.,1.))\n    +mix(0.,0.8,clamp(eu(rd(time*0.2)*7.+1.,8.,time),0.,1.))\n     *clamp(time*0.1-8.5,0.,1.);\n  float v1 = clamp(time*0.1-3.,0.,1.);\n  float v2 = clamp(time*0.1-1.5,0.,1.)*(1.-clamp(time*0.1-3.,0.,1.))\n  +clamp(time*0.1-6.,0.,1.);\n\n  \n\tfloat t = time;\n\tfloat va = n1(t*0.5); \t\n    float va2 = 1.-va; \n    float va3 = rd(t);\n  \tvec2 s1 = vec2(0.);\n\n  \tfor(int  i = 0 ; i <  20 ; i++){\n      float ts1 = t+float(i)*0.25;\n      float tf1 = ((rd(ts1)*6.+4.)*ts1); \n\ts1 += si1(tf1,ts1,5000.)*v0;\n     float ts2 = t+float(i)*0.5;\n      float tf2 = ((rd(ts2)*6.+4.)*ts2); \n\ts1 += si1(tf2,ts2,10000.)*(v1);\n       float ts3 = t+float(i);\n      float tf3 = ((rd(ts3)*6.+4.)*ts3); \n\ts1 += si1(tf3,ts3,5000.)*v2;\n    }\n  \ts1/=20.;\n\n  return s1*0.5*(1.-clamp(time-170.,0.,10.)*0.1);\n}","name":"Sound","description":"","type":"sound"}]}