{"ver":"0.1","info":{"id":"sdVcWd","date":"1662338537","viewed":193,"name":"lightning line","username":"dizndaz","description":"I thought lightning would be cool and easy to try","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 tex = texture(iChannel0, uv);\n    // Output to screen\n    fragColor = tex;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define scale 10. \n#define acc 16384.\n#define OCTAVES 8\nfloat rand(float seed)\n{\n  return fract(sin(seed) * 522734.567);\n}\n\nfloat fractalWave(float pct)\n{\n    float f = 0.;\n    float amp = 1.;\n    float freq = 1.;\n    for(int i = 0; i < OCTAVES; i++){\n        f += amp * sin(freq * pct);\n        amp *= .5;\n        freq *= 2.2;\n    }\n    return f;\n}\n\nvec2 proj(vec2 p, vec2 a, vec2 b){\n\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    \n    vec2 t = dot(pa,ba)/dot(ba,ba) * ba + a;\n    return t;\n}\n\nfloat projPCT(vec2 p, vec2 a, vec2 b){\n\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    \n    float t = dot(pa,ba)/dot(ba,ba);\n    return t;\n}\n\nfloat lightning(vec2 uv, vec2 m, vec2 center){\n    vec2 p = proj(uv,center, m);\n    float pct = projPCT(uv,center,m) * scale + rand(iTime) * 1000.;\n    float mask = sin(clamp(projPCT(uv,center, m),0.,1.) * 3.141592);\n    float wave = fractalWave(pct);\n    float dotting = rand(floor(pct* 50.));\n    float dist = distance(uv,p) * scale;\n\n    if(m.x > center.x ){\n        if(uv.y > p.y){\n            dist *= -1.;\n        }\n    }else{\n        if(abs(m.x - center.x) < .001){\n            if(uv.x < m.x){\n                if(m.y > center.y){\n                    dist *= -1.;\n                }\n                \n            }else{\n                if(m.y < center.y){\n                    dist *= -1.;\n                }\n            }\n        } \n        else if(uv.y < p.y){\n            dist *= -1.;\n        }\n    }\n    wave *= mask;\n    float waveOff = (wave + .1);\n    float f = 0.;\n    \n    /*if(dist > wave){\n       f = sign(dist - wave);\n    } \n    if(dist > waveOff){\n        f = 0.;\n    }*/\n    f = abs(wave - dist);\n    f = 1. - smoothstep(0.,.2, f);\n    return f * smoothstep(.0,.2,mask);// * (dotting );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 texUV = fragCoord/iResolution.xy;\n    vec2 m = iMouse.xy/ iResolution.y;\n\n\n\n    vec4 tex = texture(iChannel0, texUV);\n    \n    vec2 prev = vec2(float((int(tex.w ) & 0xffff0000) >> 16 )/ acc,\n                     float(int(tex.w ) & 0xffff)/ acc );\n    vec2 newCenter = prev + .02 * (m - prev);\n\n    \n    float write = float(((int(newCenter.x * acc) & 0xffff) << 16 ) |\n                        ((int(newCenter.y * acc) & 0xffff)));\n    tex.w = write;\n    // Output to screen\n    float f = lightning(uv,m, vec2(iResolution.x/iResolution.y,1.));\n    tex.xyz *= vec3(.90,.93,.97);\n    tex.xyz += vec3(clamp(f,0.,100.));\n    \n    fragColor = tex;\n}","name":"Buffer A","description":"","type":"buffer"}]}