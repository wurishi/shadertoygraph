{"ver":"0.1","info":{"id":"XltfDS","date":"1540864777","viewed":459,"name":"Complex Mandelbrot Set","username":"loveless_savage","description":"simple rendering of a Mandelbrot Set\nchange RESOL to adjust the number of iterations","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//resolution of each test\n#define RESOL 50\n\n//square a 2D vector as a complex value\nvec2 csq(vec2 z){\n        return vec2( z.x*z.x-z.y*z.y , 2.0*z.x*z.y );\n}\n\n//given the 4D Julia set coordinates, test for divergence with a certain resolution\nint runTest(vec2 c){\n    vec2 z = vec2(0.0,0.0);\n\n    for(int i=0;i<RESOL;i++){\n        if( length(z)>2.0 ) return i;\n        z = csq(z) + c;\n    }\n    return RESOL;\n}\n\n//calculate the color of the model given a depth\nvec4 modelColor(float dep){\n                float temp[3] = float[3](0.0,0.0,0.0);\n                float depmod = mod(dep,0.2);\n                if(dep==1.0) {\n                    return vec4(0.0);\n                }\n\n                int depnum = int((dep-depmod)*5.0);\n\n                if((depnum&1)>0) depmod = 0.2-depmod;\n\n                temp[(4-depnum) % 3]=5.0*depmod;\n\n                depnum += 1;\n                depnum >>= 1;\n\n                temp[depnum]=1.0;\n\n                return vec4(temp[0],temp[1],temp[2],1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Adjusted pixel coordinates; transform to window of Mandelbrot Set\n    vec2 c = 2.0*fragCoord.xy-iResolution.xy;\n    c = 2.0*c/min(iResolution.x,iResolution.y);\n    \n    //Test for divergence\n    int inum = runTest(c);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+c.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = modelColor( float(inum)/float(RESOL) );\n}","name":"Image","description":"","type":"image"}]}