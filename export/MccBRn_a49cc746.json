{"ver":"0.1","info":{"id":"MccBRn","date":"1732614836","viewed":97,"name":"Hourglass Nebula (MyCn 18)","username":"toninoni","description":"The Hourglass Nebula (MyCn 18), modeled from my Butterfly Nebula shader.","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["cloud","star","space","nebula","jet","dust","filament"],"hasliked":0,"parentid":"XfyyWd","parentname":"Butterfly Nebula (M2-9)"},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Butterfly nebula by toninoni.\n// Same license as works it is based on, see below.\n//-------------------------------------------------------------------------------------\n// Based on Fork of \"Supernova remnant\" by Duke\n// https://www.shadertoy.com/view/MdKXzc\n//\n// Based on \"Dusty nebula 4\" (https://www.shadertoy.com/view/MsVXWW) \n// and \"Protoplanetary disk\" (https://www.shadertoy.com/view/MdtGRl) \n// otaviogood's \"Alien Beacon\" (https://www.shadertoy.com/view/ld2SzK)\n// and Shane's \"Cheap Cloud Flythrough\" (https://www.shadertoy.com/view/Xsc3R4) shaders\n// Some ideas came from other shaders from this wonderful site\n// Press 1-2-3 to zoom in and zoom out.\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n//-------------------------------------------------------------------------------------\n\n#define ITERATIONS 70\n#define ROTATE\n\n//-------------------\n#define pi 3.14159265\n#define R(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n// iq's noise\nfloat noise( in vec3 x ){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn 1. - 0.82*mix( rg.x, rg.y, f.z );\n}\n\nfloat fbm(vec3 p){\n   return noise(p*.06125)*.5 + noise(p*.125)*.25 + noise(p*.25)*.125 + noise(p*.4)*.2;\n}\n\nfloat length2( vec2 p ){\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length8( vec2 p ){\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\n\nfloat Sphere( vec3 p, float s ){\n  return length(p)-s;\n}\nfloat Xor(float d1, float d2 ){\n    return max(min(d1,d2),-max(d1,d2));\n}\n\n//==============================================================\n// otaviogood's noise from https://www.shadertoy.com/view/ld2SzK\n//--------------------------------------------------------------\n// This spiral noise works by successively adding and rotating sin waves while increasing frequency.\n// It should work the same on all computers since it's not based on a hash function like some other noises.\n// It can be much faster than other noise functions if you're ok with some repetition.\nconst float nudge = 0.9;\t// size of perpendicular vector\nfloat normalizer = 1.0 / sqrt(1.0 + nudge*nudge);\t// pythagorean theorem on that perpendicular to maintain scale\nfloat SpiralNoiseC(vec3 p)\n{\n    float n = 0.0;\t// noise amount\n    float iter = 1.5;\n    for (int i = 0; i < 6; i++)\n    {\n        // add sin and cos scaled inverse with the frequency\n        n += -abs(sin(p.y*iter) + cos(p.x*iter)) / iter;\t// abs for a ridged look\n        // rotate by adding perpendicular and scaling down\n        p.xy += vec2(p.y, -p.x) * nudge;\n        p.xy *= normalizer;\n        // rotate on other axis\n        p.xz += vec2(p.z, -p.x) * nudge;\n        p.xz *= normalizer;\n        // increase the frequency\n        iter *= 1.833733;\n    }\n    return n;\n}\n\nfloat NebulaNoise(vec3 p){\n    vec3 p1 = vec3(p.x, p.y - 1.0, p.z);\n    float s1 = Sphere(p1, 1.4);\n    s1 += fbm(p1 * 10.0);\n    s1 += SpiralNoiseC(p1 * 0.222);\n    \n    vec3 p2 = vec3(p.x, p.y + 2.1, p.z);\n    float s2 = Sphere(p2, 1.4);\n    s2 += fbm(p2 * 10.0);\n    s2 += SpiralNoiseC(p2 * 0.33);\n   \n    float final = Xor(s2, s1);\n\n    return final;\n}\n\nfloat map(vec3 p) {\n    p = p.xyz;\n    #ifdef ROTATE\n\tR(p.xz, iMouse.x*0.009*pi+iTime*0.1);\n    #else\n    R(p.yz, iMouse.x*0.009*pi);\n    #endif\n\n\tfloat NebNoise = abs(NebulaNoise(p/0.645)*0.35);\n    \n\treturn NebNoise+0.088;\n}\n\nbool RaySphereIntersect(vec3 org, vec3 dir, out float near, out float far){\n    const float radius = 4.5;\n\tfloat b = dot(dir, org);\n\tfloat c = dot(org, org) - (radius * radius);\n\tfloat delta = b*b - c;\n\tif( delta < 0.0) \n\t\treturn false;\n\tfloat deltasqrt = sqrt(delta);\n\tnear = -b - deltasqrt;\n\tfar = -b + deltasqrt;\n\treturn far > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){  \n    float zoom = (iMouse.y / iResolution.y) * 2.0 - 1.0;\n\t// ro: ray origin\n\t// rd: direction of the ray\n\tvec3 rd = normalize(vec3((fragCoord.xy-0.5*iResolution.xy)/iResolution.y, 1.));\n\tvec3 ro = vec3(0., 0., -6.+1.6 + (5.0 * zoom));\n    \n\t// ld, td: local, total density \n\t// w: weighting factor\n\tfloat ld=0., td=0., w=0.;\n\n\t// t: length of the ray\n\t// d: distance function\n\tfloat d=1., t=0.;\n    \n    const float h = 0.1;\n   \n\tvec4 sum = vec4(0.0);\n   \n    float min_dist=0.0, max_dist=0.0;\n\n    if(RaySphereIntersect(ro, rd, min_dist, max_dist)) {\n       \n\tt = min_dist*step(t,min_dist);\n   \n\t// raymarch loop\n\tfor (int i=0; i < ITERATIONS; i++) {\n\t \n\t\tvec3 pos = ro + t*rd;\n  \n\t\t// Loop break conditions.\n\t    if(td > 1.0 || d < 0.1*t*0.5 || t>35.0 || sum.a > 0.99 || t>max_dist) break;\n\n        // Evaluate distance function\n        float d = map(pos);\n\t\t       \n\t\t// Change this string to control density \n\t\td = max(d,0.0);\n        \n        // Point light calculations\n        vec3 ldst = vec3(0.0)-pos;\n        float lDist = max(length(ldst), 0.001);\n\n        // The color of light \n        float _T = lDist * 1.6 + 1.6;\n        vec3 lightColor=0.45 + 0.42 * cos(_T * 0.83 + pi * 0.24 * vec3(0.9,0.2,0.2));\n       \n        // Star\n        sum.rgb+=(vec3(0.37,0.85,0.50)/(lDist * lDist * 6.0) / 40.0);\n        // Bloom\n        sum.rgb+=(lightColor/exp(lDist*lDist * lDist * 0.08) / 40.0);\n        \n\t\tif (d < h) {\n\t\t\t// compute local density \n\t\t\tld = h - d;\n            \n            // compute weighting factor \n\t\t\tw = (1. - td) * ld;\n     \n\t\t\t// accumulate density\n\t\t\ttd += w + 1.0/50.0;\n\t\n\t\t\tvec4 col = vec4(0.3, 0.1, 0.0, td);\n            \n            // emission\n            sum += sum.a * vec4(sum.rgb, 0.0) * 0.2;\t\n            \n\t\t\t// uniform scale density\n\t\t\tcol.a *= 0.2;\n\t\t\t// colour by alpha\n\t\t\tcol.rgb *= col.a;\n\t\t\t// alpha blend in contribution\n\t\t\tsum = sum + col*(1.0 - sum.a);  \n       \n\t\t}\n      \n\t\ttd += 1./70.;\n\t\t\n        // trying to optimize step size near the camera and near the light source\n        t += max(d * 0.1 * max(min(length(ldst),length(ro)),1.0), 0.02);\n        \n\t}\n    \n    // simple scattering\n\tsum *= 1.0 / exp( ld * 0.5 );\n        \n   \tsum = clamp( sum, 0.0, 1.0 );\n   \n    sum.xyz = sum.xyz*sum.xyz*(3.0-2.0*sum.xyz);\n    \n\t}\n    \n    vec4 nebula = pow(vec4(sum.xyz,td), vec4(1.0));\n    // Alpha blending.\n    //vec4 bg = texture(iChannel1, fragCoord/iResolution.xy);\n    //fragColor = vec4(bg.rgb * (1.0 - nebula.a) + nebula.rgb * nebula.a, 1.0);\n    // Only nebula.\n    fragColor = vec4(nebula.rgb, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}