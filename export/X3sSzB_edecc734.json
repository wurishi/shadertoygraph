{"ver":"0.1","info":{"id":"X3sSzB","date":"1709678122","viewed":133,"name":"Water FBM","username":"moshe","description":"Water fragment shader using Fractional Brownian Motion","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fbm","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (C) Moshe 2024\n\nconst float PI = 3.14159265358979323846;\n\n// lighting parameters\nvec3 camera = vec3(0.5, 0.5, 5.0);\nconst vec3 sunDirection = vec3(5.0, 5.0, 10.0);\nconst vec3 sunColor = vec3(1.0, 1.0, 0.0);\nconst vec3 lightColor = vec3(1.0, 1.0, 1.0);\nconst vec3 ambientColor = vec3(0.2, 0.4, 0.6);\nconst vec3 fresnelColor = vec3(0.5, 0.4, 0.5);\nconst vec3 diffuseReflectanceColor = vec3(0.53, 0.61, 1.0);\nconst vec3 specularReflectanceColor = vec3(1.0, 1.0, 1.0);\nconst vec3 tipColor = vec3(0.71, 1.0, 1.0);\nconst float specularShininess = 10.0;\nconst float tipAttenuation = 5.0;\nconst float fresnelBias = 0.15;\nconst float fresnelStrengt = 0.05;\nconst float fresnelShininess = 10.0;\nconst float specularNormalStrength = 1.0;\nconst float fresnelNormalStrength = 1.0;\n\n// Fractional Brownian Motion parameters\nconst float segments = 25.0;\nconst int fbmWaveCount = 40;\nconst float fbmFrequency = 1.0;\nconst float fbmAmplitude = 1.0;\nconst float fbmInitialSpeed = 2.0;\nconst float fbmSeed = 215.157;\nconst float fbmMaxPeak = 1.0;\nconst float fbmDrag = 1.0;\nconst float fbmFrequencyMult = 1.18;\nconst float fbmAmplitudeMult = 0.82;\nconst float fbmSpeedRamp = 1.07;\nconst float fbmSeedIter = 1253.7237;\nconst float fbmPeakOffset = 1.0;\nconst float fbmHeight = 1.0;\n\nfloat rand(in vec2 seed) {\n    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat randf(in float a, in float b, in vec2 seed) {\n    return mix(a, b, rand(seed));\n}\n\nvec3 fractionalBrownianMotion(vec3 v) {\n    float f = fbmFrequency;\n    float a = fbmAmplitude;\n    float speed = fbmInitialSpeed;\n    float seed = fbmSeed;\n    vec3 p = v;\n\n    float h = 0.0;\n    vec2 n = vec2(0.0);\n\n    float amplitudeSum = 0.0;\n    for(int i = 0; i < fbmWaveCount; ++i) {\n        vec2 d = normalize(vec2(cos(seed), sin(seed)));\n        float x = dot(d, p.xy) * f + iTime * speed;\n        float wave = a * exp(fbmMaxPeak * sin(x) - fbmPeakOffset);\n        vec2 dw = f * d * (fbmMaxPeak * wave * cos(x));\n        h += wave;\n        p.xy += -dw * a * fbmDrag;\n        n += dw;\n        amplitudeSum += a;\n        f *= fbmFrequencyMult;\n        a *= fbmAmplitudeMult;\n        speed *= fbmSpeedRamp;\n        seed += fbmSeedIter;\n    }\n\n    vec3 outNormal = vec3(n, h) / amplitudeSum;\n    outNormal.z *= fbmHeight;\n\n    return outNormal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= segments;\n    vec3 p = vec3(uv, 0.0);\n    vec3 lightDir = -normalize(sunDirection);\n    vec3 viewDir = normalize(camera - p);\n    vec3 halfwayDir = normalize(lightDir + viewDir);\n    \n    vec3 normal = vec3(0.0);\n    vec3 fbm = fractionalBrownianMotion(p);\n    float height = fbm.z;\n    normal.xy = fbm.xy;\n    normal = normalize(vec3(-normal.xy, 1.0 - normal.z));\n\n    // diffuse\n    float ndotl = max(dot(lightDir, normal), 0.0);\n    vec3 diffuseReflectance = diffuseReflectanceColor / PI;\n    vec3 diffuse = lightColor * ndotl * diffuseReflectance;\n\n    // Schlick Fresnel approximation\n    vec3 fresnelNormal = normal;\n    fresnelNormal.xy *= fresnelNormalStrength;\n    fresnelNormal = normalize(fresnelNormal);\n    float base = 1.0 - dot(viewDir, fresnelNormal);\n    float exponential = pow(base, fresnelShininess);\n    float R = exponential + fresnelBias * (1.0f - exponential);\n    R *= fresnelStrengt;\n    vec3 fresnel = fresnelColor * R;\n\n    // specular\n    vec3 specularReflectance = specularReflectanceColor;\n    vec3 specNormal = normal;\n    specNormal.xy *= specularNormalStrength;\n    specNormal = normalize(specNormal);\n    float spec = pow(max(dot(specNormal, halfwayDir), 0.0), specularShininess) * ndotl;\n    vec3 specular = lightColor * specularReflectance * spec;\n\n    // Schlick Fresnel for specular\n    base = 1.0 - max(dot(viewDir, halfwayDir), 0.0);\n    exponential = pow(base, 5.0);\n    R = exponential + fresnelBias * (1.0 - exponential);\n    specular *= R;\n\n    vec3 tipColor = tipColor * pow(height, tipAttenuation);\n    vec3 finalColor = ambientColor + diffuse + specular + fresnel + tipColor;\n    \n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}