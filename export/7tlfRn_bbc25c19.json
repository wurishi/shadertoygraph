{"ver":"0.1","info":{"id":"7tlfRn","date":"1650557366","viewed":67,"name":"zyq_lines","username":"zhouyongqiang","description":"lines","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineWidth = 0.01;\nvec3 lineColor = vec3(1.0, 1.0, 1.0);\n\nfloat distance_point_line(vec3 a, vec3 b, vec3 p)\n{\n    vec3 v1 = b - a;\n    vec3 v2 = p-a;\n    vec3 v3 = p - b;\n    if(dot(v1,v2) < 0.0) return length(v2);\n    if(dot(v1, v3) > 0.0) return length(v3);\n       \n    \n    float h = length(cross(v1, v2) / length(v1));\n    return h;\n}\n\nvoid drawLine(vec2 uv, out vec3 color)\n{\n    const int num = 24;\n    float tmp = 0.0;\n    vec3 lines[] = vec3[num](\n    vec3(-0.3, -0.0, 0.0), vec3(0.0, 0.3, 0.0),\n    vec3(0.0, 0.3, 0.0), vec3(0.3, 0.0, 0.0),\n    vec3(-0.3, 0.0, 0.0), vec3(0.0, -0.3, 0.0),\n    vec3(0.0, -0.3, 0.0), vec3(0.3, 0.0, 0.0),\n    vec3(-0.3, 0.5, 0.0), vec3(0.0, 0.8 + tmp, 0.0),\n    vec3(0.0, 0.8, 0.0), vec3(0.3, 0.5 + tmp, 0.0),\n    vec3(-0.3, 0.5, 0.0), vec3(0.0, 0.2 + tmp, 0.0),\n    vec3(0.0, 0.2, 0.0), vec3(0.3, 0.5 + tmp, 0.0),\n    vec3(-0.3, 0.0, 0.0), vec3(-0.3, 0.5 + tmp, 0.0),\n    vec3(0.0, 0.3, 0.0), vec3(0.0, 0.8 + tmp, 0.0),\n    vec3(0.3, 0.0, 0.0), vec3(0.3, 0.5 + tmp, 0.0),\n    vec3(0.0, -0.3, 0.0), vec3(0.0, 0.2 + tmp, 0.0)\n    );\n    \n    color = vec3(0.0);\n    //遍历线段\n    for(int i = 0;i < num; i += 2)\n    {\n        vec3 a = lines[i];\n        vec3 b = lines[i + 1];\n        //将线简单投影到屏幕上\n        a.z = 0.0;\n        b.z = 0.0;\n        //判断点到线的距离\n        float dis1 = abs(distance_point_line(a,b,vec3(uv,0.0)));\n        float dis2 = abs(distance_point_line(b,a,vec3(uv,0.0)));\n        //if(dis1 < lineWidth)\n        {\n            float term = 1.0 / dis1 * lineWidth;\n            color += pow(lineColor * term, vec3(1.4));\n            \n        }\n            \n    }\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    lineWidth = 0.01 + 0.01 * abs(sin(iTime));\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv *= iResolution.x / iResolution.y;\n\n    // Output to screen\n    vec3 color;\n    drawLine(uv, color);\n    fragColor = vec4(color,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}