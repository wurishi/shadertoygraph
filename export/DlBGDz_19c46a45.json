{"ver":"0.1","info":{"id":"DlBGDz","date":"1673254536","viewed":58,"name":"Genuary2023 SDF","username":"motus_art","description":"Playing around with SDFs for Genuary 2023 day 8.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","genuary","genuary2023"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Genuary 2023: Day 8\n// \"Signed Distance Functions\"\n//\n// @motus_art\n// https://owenmcateer.github.io/Motus-Art\n//\n// SPF from: https://iquilezles.org/articles/distfunctions2d/\n//\n\nfloat dot2( in vec2 v ) {\n  return dot(v,v);\n}\n\nfloat inverseLerp(float v, float minValue, float maxValue) {\n  return (v - minValue) / (maxValue - minValue);\n}\n\nfloat remap(float v, float inMin, float inMax, float outMin, float outMax) {\n  float t = inverseLerp(v, inMin, inMax);\n  return mix(outMin, outMax, t);\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float size ) {\n  const float k = sqrt(3.0);\n  p.x = abs(p.x) - size;\n  p.y = p.y + 1.0/k;\n  if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n  p.x -= clamp( p.x, -2.0, 0.0 );\n  return -length(p)*sign(p.y);\n}\n\n\nfloat sdRoundedCross( in vec2 p, in float h ) {\n  float k = 0.5*(h+1.0/h); // k should be const at modeling time\n  p = abs(p);\n  return ( p.x<1.0 && p.y<p.x*(k-h)+h ) ? \n           k-sqrt(dot2(p-vec2(1,k)))  :\n           sqrt(min(dot2(p-vec2(0,h)),\n           dot2(p-vec2(1,0))));\n}\n\nmat2 rotate2D(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n  // Position\n  vec2 pos = p - vec2(cos(iTime * 0.5) * 0.9, sin(iTime * 0.5) * 0.5);\n  pos *= rotate2D(iTime * 0.25);  \n  float d = sdEquilateralTriangle(pos, remap(sin(iTime * 0.5), -1.0, 1.0, 0.2, 0.9));\n  \n  // Blend\n  d *= sdRoundedCross(p, 0.5);\n    \n\n  // coloring\n  vec3 col;\n  if (d>0.0) {\n    col = vec3(0.15);\n    col *= 0.8 + 0.937 * cos(50.0 * d + iTime * -10.0);\n  } else {\n    col = vec3(0.937);\n  }\n    \n  col *= 2.0 - exp(-6.0*abs(d));\n\t\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}