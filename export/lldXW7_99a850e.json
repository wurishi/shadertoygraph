{"ver":"0.1","info":{"id":"lldXW7","date":"1483118432","viewed":704,"name":"Bifurcation v. 2","username":"piotrekli","description":"Bifurcation diagrams.\nSpace to reset","likes":7,"published":3,"flags":48,"usePreview":0,"tags":["2d","fractal","map","chaos","logistic","bifurcation","lyapunov"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 tex = texture(iChannel0, uv).xyz;\n    float maxValue = texture(iChannel0, vec2(uv.x, 0.)).w;\n    tex /= maxValue;\n    tex = log(1.0+tex*exp(1.));\n\tfragColor = vec4(tex, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ITER 5000\n#define MODE 1\n\n// https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n/* LOGISTIC MAP */\nfloat  lm(float a, float r) { return r*a*(1.0-a); }\nfloat dlm(float a, float r) { return r*(1.0-2.0*a); }\n\n\n/* RICKER MAP\nconst float k = 0.5;\nfloat  lm(float a, float r) { return a*exp(r*(1.0-a/k)); }\nfloat dlm(float a, float r) { return (exp(r*(1.0-a/k))*(k-r*a))/k; }\n*/\n\n/* ???\nfloat  lm(float a, float r) { return cos(r*a)*0.5+0.5; }\nfloat dlm(float a, float r) { return -r*sin(r*a)*0.5; }\n*/\n\n/* TENT MAP\nfloat  lm(float a, float r) { return r-r*abs(a-0.5)*2.0; }\nfloat dlm(float a, float r) { return a > 0.5 ? -2.0*r : 2.0*r; }\n*/\n\n/* NUMERICAL DIFFERENTIATION - for custom lm()\nfloat dlm(float a, float r)\n{\n    const float delta = 0.001;\n    return (lm(a+delta, r)-lm(a, r))/delta;\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y != 0.5) return;\n    fragCoord.x += hash11(iTime+0.38275);\n    float uvx = fragCoord.x/iResolution.x;\n    float r = mix(1.0, 4.0, uvx);\n    float a = hash11(iTime+(MODE == 1 ? fragCoord.x : 0.0));\n    float le = 0.0;\n    for (int j=0; j<ITER; ++j)\n    {\n        a = lm(a, r);\n        le += log(abs(dlm(a, r)));\n    }\n    le /= float(ITER);\n    fragColor = vec4(a*1.0, le, 0.0, 1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define LINE_WIDTH (1.5)\n\nvec3 color(float le)\n{\n    vec3 col;\n    if (le <= 0.0) col = vec3(0.0, 1.0+le*0.25, sqrt(abs(le))*0.8);\n    else col = vec3(1.0, 0.25, le*0.5);\n    return normalize(clamp(col, 0.0, 1.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || texture(iChannel3, vec2(32.0/255.0, 0.5)).x > 0.5)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel1, uv);\n    vec2 tex = texture(iChannel0, vec2(uv.x, 0.)).xy;\n    if (fragCoord.y == 0.5)\n    {\n        float newValue = texture(iChannel1, vec2(uv.x, tex.x)).w;\n        fragColor.w = max(fragColor.w, newValue); // heuristic!\n    }\n    else\n    {\n        tex.y = clamp(tex.y, -1000.0, 1000.0);\n        float f = abs((tex.x*iResolution.y+0.5-fragCoord.y)/LINE_WIDTH);\n        float multiplier = clamp(1.0-f, 0.0, 1.0);\n        vec3 col = color(tex.y)*multiplier;\n        fragColor += vec4(col, multiplier);\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}