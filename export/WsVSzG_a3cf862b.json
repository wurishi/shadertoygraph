{"ver":"0.1","info":{"id":"WsVSzG","date":"1574296974","viewed":115,"name":"squishyTruchet Light]saber's","username":"cmarangu","description":"[url=https://twitter.com/c010011012/status/1197064563012726784][/url]","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["truchet","automorphism"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// /*\n\n// Current Code for: \"squishyTruchet Light]saber's\"\n// Created: 2019 11/21\n// Tags: truchet\n// Description: https://twitter.com/c010011012/status/1197064563012726784\n\n\n// 0 1 or 2\nconst int style = 2;\n\n\n// 6 is the quantity of tiles visible vertically\nconst float q = 7.;\n\n// seconds per iteration â†’ more is slower\n// recommended: ~0.5-3 to ~10.\nconst float speed = 2.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    // amimation argument loops every [speed] seconds\n    float arg = mod(iTime, speed)/speed;\n    // cordinate systeme\n    vec2 screen = fragCoord/iResolution.y;\n    screen.x += 2./q*arg;\n    vec2 loc = mod(screen, 1./q)*q;\n    vec2 fl = floor(screen*q);\n    // checkerboard 0 or 1 per tile\n    float czk = mod(fl.x+fl.y, 2.);\n    // \"random\" number 0 or 1 per tile\n    float phase0 = floor(mod(fl.x*436.+fl.x*fl.x*51.+fl.y*fl.x*37.+fl.y*275., 100.)/100.*2.);\n    // now here is some dum stuff i do to get the\n    // \"phase\" of neighboring cell 2 to the left\n    fl.x -= 2.;\n    float phase1 = floor(mod(fl.x*436.+fl.x*fl.x*51.+fl.y*fl.x*37.+fl.y*275., 100.)/100.*2.);\n    fl.x += 2.;\n    float phase_ = mix(phase0, phase1, arg);\n    \n    // next 2 lines for fun interpolation\n    phase_ = clamp((phase_-.5)*1.7+.5, 0., 1.);\n    phase_ = smoothstep(0., 1., phase_);\n    \n    // AHA SO HERE IS THE NIGHTMARE CODE WHERE\n    // WE DEFINE THE SQUISHy morphy tiles. More\n    // specifically the amount from 0-1 which determines\n    // what trucet tile we are in. if its <0.5 we are in \n    // a \"0\" tile or else we are in a \"1\" tile\n    // I added transition to sqare tiles to inverse\n    // trucet tiles for fun challenge\n    float lr = 0.;\n    if (czk == 0.) {\n        if (phase_ < .5) {\n            lr = mix(\n                min(length(vec2(0., 1.)-loc), length(vec2(1., 0.)-loc) ),\n                max(min(loc.x, loc.y), min(1.-loc.x, 1.-loc.y) ),\n                phase_*2.\n            );\n        }\n        else {\n            lr = mix(\n                max(min(loc.x, loc.y), min(1.-loc.x, 1.-loc.y) ),\n                1.-min(length(vec2(0., 0.)-loc), length(vec2(1., 1.)-loc) ),\n                phase_*2.-1.\n            );\n        }\n    }\n    else if (czk == 1.) {\n        if (phase_ < .5) {\n            lr = mix(\n                min(length(vec2(0., 0.)-loc), length(vec2(1., 1.)-loc) ),\n                1.-max(min(loc.x, loc.y), min(1.-loc.x, 1.-loc.y) ),\n                phase_*2.\n            );\n        }\n        else {\n            lr = mix(\n                1.-max(min(loc.x, loc.y), min(1.-loc.x, 1.-loc.y) ),\n                1.-min(length(vec2(0., 1.)-loc), length(vec2(1., 0.)-loc) ),\n                phase_*2.-1.\n            );\n        }\n    }\n    float a = 0.;\n    float b = 0.;\n    float glo = abs(lr-.5);\n    if (style == 0) {\n        a = 1.;\n        b = 1.;\n        if (glo < .03) {\n            a = 0.;\n            b = 0.;\n        }\n    }\n    else if (style == 1) {\n        a = floor(lr*2.);\n        b = .5;\n    }\n    else if (style == 2) {\n        if (glo < 0.02) {\n            a = 1.;\n            b = 1.;\n        }\n        else {\n            a = mix(.9, 0., min((glo-0.02)*5., 1.));\n            b = lr < .5 ? .0 : .9;\n        }\n    }\n    fragColor = vec4(min(a, b), a, max(a, b), 1.);\n\t\n}\n\n/**/\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}