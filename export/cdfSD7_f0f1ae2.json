{"ver":"0.1","info":{"id":"cdfSD7","date":"1668984122","viewed":64,"name":"Primitive: waterWave","username":"foxtrotwhiskey9","description":"An inverse humpWave","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["primiative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\nconst float THICKNESS = 8.0; // Thickness of wave display\nconst float NUM_WAVE_LENGTHS = 1.0; // Num wavelengths on the screen at the same time\n\nfloat waterWave(float angle) {\n  return -(abs(sin(angle)) - 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float xScale = iResolution.x / PI / NUM_WAVE_LENGTHS;\n    float yScale = iResolution.y - 2. * THICKNESS;\n    \n    fragColor = vec4(1.0, 1.0, 0.0, 1.0);\n    float graph = yScale * waterWave(iTime + fragCoord.x / xScale) + THICKNESS;\n\n    if (fragCoord.y >= graph - THICKNESS && fragCoord.y <= graph + THICKNESS) {\n      fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}