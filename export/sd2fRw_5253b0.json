{"ver":"0.1","info":{"id":"sd2fRw","date":"1645904646","viewed":102,"name":"IFS orb","username":"darkeclipz","description":"doodling with ifs'","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n\nmat2 rot(float theta) {\n    float c = cos(theta), s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nfloat circle(vec2 p, float r, float s) {\n    float lenP = length(p-s/2.);\n    return smoothstep(s, 0., abs(lenP-r));\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*R)/R.y;\n    vec2 mouse = iMouse.z > 0. ? (iMouse.xy-0.5*R)/R.y : vec2(0.1);\n    mouse = abs(mouse);\n    float t = iTime;\n    \n    float n = 16.;\n    float scale = 1.1;\n    uv *= 2.2;\n    vec3 col = vec3(0);\n    vec2 offset = mouse;\n    uv += offset;\n    \n    for (float i = 0.; i < n; i++) {\n        uv -= offset;\n        uv *= rot(.5*length(uv) * 0.31);\n        uv = abs(uv);\n        uv *= scale;\n    }\n    \n    float arg = atan(uv.y, uv.x);\n    col = hsv2rgb(vec3(arg, 1.0, 1.0)) * 0.05;\n    col += hsv2rgb(vec3(arg, 1.0, 1.0)) * circle(uv - vec2(0.1), 0.1, 20./iResolution.y);\n    \n    #if 0 // grid\n    float pixelSize = 24./iResolution.y;\n    float gridSize = 10.;\n    vec2 grid = smoothstep(pixelSize, 0., abs(fract(gridSize * uv)-pixelSize));\n    col += mix( col, vec3(1), clamp(grid.x + grid.y, .0, 1.) );\n    #endif\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}