{"ver":"0.1","info":{"id":"Ns2Gzt","date":"1618346984","viewed":138,"name":"RogozhinGraph2","username":"DenisRogozhin","description":"GraphTask2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["graphtask2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) /  float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define VERTEXCOUNT 12\n#define TRIANGLECOUNT 20\n#define PHI 0.809\n\nconst vec3 LIGHT1_POS = vec3(1.7, 0.95, -0.15);\nconst float LIGHT1_RADIUS = 0.15;\nconst vec3 LIGHT1_COLOR = vec3(0, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(- 1, 0.75, -0.35);\nconst float LIGHT2_RADIUS = 0.15;\nconst vec3 LIGHT2_COLOR = vec3(0, 0, 1);\n\n\nconst vec3 LIGHT3_POS = vec3( 0.05, 1.05, -0.35);\nconst float LIGHT3_RADIUS = 0.15;\nconst vec3 LIGHT3_COLOR = vec3(1, 1, 0);\n\nconst vec3 CAMERA_POS = vec3(-1, 1.4, -4.5); //-4.5\n//const vec3 CAMERA_POS = vec3(0, 10, -6);\nconst float INF = 1e10;\nconst float EPS = 1e-3;\n\nvec3 randDir;\n\nstruct Triangle {\n    vec3 pos[3];\n    vec3 color;\n    vec3 normal;\n}; \n\nvec3 vertices[VERTEXCOUNT] = vec3[VERTEXCOUNT]\n(\n    vec3(-0.5,  PHI, 0),   //0\n    vec3( 0.5,  PHI, 0),   //1\n    vec3(-0.5, -PHI, 0),   //2\n    vec3( 0.5, -PHI, 0),   //3\n    \n    vec3(0, -0.5,  PHI),   //4\n    vec3(0,  0.5,  PHI),   //5\n    vec3(0, -0.5, -PHI),   //6\n    vec3(0,  0.5, -PHI),   //7\n    \n    vec3( PHI, 0, -0.5),   //8\n    vec3( PHI, 0,  0.5),   //9\n    vec3(-PHI, 0, -0.5),   //10\n    vec3(-PHI, 0,  0.5)    //11\n);\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float s = - 0.8;\n    float t = (s - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= s) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= s) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n// This array stores the indices of three vertices which form a triangle\nint triangles[TRIANGLECOUNT * 3] = int[TRIANGLECOUNT * 3]\n(\n     5, 11,  0,\n     1,  5,  0,\n     7,  1,  0,\n    10,  7,  0,\n    11, 10,  0,\n    \n     9,  5,  1,\n     4, 11,  5,\n     2, 10, 11,\n     6,  7, 10,\n     8,  1,  7,\n    \n     4,  9,  3,\n     2,  4,  3,\n     6,  2,  3,\n     8,  6,  3,\n     9,  8,  3,\n    \n     5,  9,  4,\n    11,  4,  2,\n    10,  2,  6,\n     7,  6,  8,\n     1,  8,  9\n);\n\nvec3 colors[20] = vec3[20] \n(\n   vec3(0,0,0.25),\n   vec3(0,0,0.5),\n   vec3(0,0,0.75),\n   vec3(0,0,1),\n   vec3(0,0.25,0),\n   vec3(0,0.5,0),\n   vec3(0,0.75,0),\n   vec3(0,1,0),\n   vec3(0,1,0.25),\n   vec3(1,2,0.5),\n   vec3(0,1,0.75),\n   vec3(0,1,1),\n   vec3(1,0,0.25),\n   vec3(1,0,0.5),\n   vec3(1,0,0.75),\n   vec3(1,0,1),\n   vec3(1,0.25,0),\n   vec3(1,0.5,0),\n   vec3(1,0.75,0),\n   vec3(1,1,0)\n);\n\nfloat ray_triangle_intersection(Triangle t, vec3 origin, vec3 dir) {\n    float normalViewAngle = dot(dir, t.normal);\n    if (abs(normalViewAngle) < EPS)\n        return INF;\n    float d = dot(t.pos[0] - origin, t.normal) / normalViewAngle;\n    if (d < 0.0)\n        return INF;\n    vec3 hitPos = origin + dir * d;\n    vec3 edges[3] = vec3[3](\n        t.pos[1] - t.pos[0],\n        t.pos[2] - t.pos[1],\n        t.pos[0] - t.pos[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - t.pos[0],\n        hitPos - t.pos[1],\n        hitPos - t.pos[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS)\n        return d;\n    return INF;\n}\n\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nTriangle TRIANGLES[TRIANGLECOUNT];\n\nbool isOccluded(vec3 pos, vec3 target, Triangle TRIANGLES[TRIANGLECOUNT]) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    for (int j = 0 ; j < TRIANGLECOUNT ; j++ ) {\n            float triangleT = ray_triangle_intersection(TRIANGLES[j], pos, dir);\n            if (triangleT < dist)\n                return true;\n    }\n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal, Triangle TRIANGLES[TRIANGLECOUNT]) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS, TRIANGLES) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS, TRIANGLES) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS, TRIANGLES) ? 0.0 : 10.0f / distSq3;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.4\n    );\n}\n\n\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool change) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (abs(sinB) > 1.0){\n        change = false;\n        return reflect(v, normal);   \n    }    \n    float cosB = sqrt(1.0 - sinB * sinB);\n    change = true;\n    return normalize(sinB * tang + cosB * normal);\n}\n\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    //vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.x;\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    float n1 = AIR_N;\n    float nEnter = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float WATER_N = 1.33;\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    float AIR_R = pow2(WATER_N - AIR_N) / pow2(WATER_N + AIR_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n\n    for (int i = 0; i< TRIANGLECOUNT ; i++ ){\n        int k = 3 * i;\n        TRIANGLES[i].pos = vec3[3](vertices[triangles[k]],vertices[triangles[k+1]], vertices[triangles[k+2]]);\n        TRIANGLES[i].color = colors[i];\n        TRIANGLES[i].normal = - normalize(cross(TRIANGLES[i].pos[0] - TRIANGLES[i].pos[1], TRIANGLES[i].pos[1] - TRIANGLES[i].pos[2]));\n    } \n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    bool last_ihos = false;\n    vec3 mult = vec3(1,1,1);\n    for (int i = 0 ; i < 10 ; i++) {\n        vec3 normal;\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos , curDir , planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            last_ihos = false;\n            vec3 worldPos = curPos + t * curDir;\n            color = texture(iChannel0,worldPos.xz * 0.1).rgb  ;\n            materialType = DIFFUSE;\n            normal = planeNorm ; \n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            last_ihos = false;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        } \n        vec3 l2Norm ; \n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            last_ihos = false;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        } \n        vec3 l3Norm ; \n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            last_ihos = false;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        } \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n            last_ihos = false;\n        }\n        for (int j = 0 ; j < TRIANGLECOUNT ; j++ ) {\n            float triangleT = ray_triangle_intersection(TRIANGLES[j], curPos, curDir);\n            if (triangleT < t) {\n                t = triangleT;\n                normal = TRIANGLES[j].normal;\n                if (randVals.x < GLASS_R) {\n                    materialType = REFLECTION;\n                }\n                else {\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = AIR_N;\n                    } \n                    else {\n                        nEnter = GLASS_N;\n                    }\n                }\n                last_ihos = true;\n             } \n        } \n        vec3 sphNorm;\n        float sph2T = traceSphere(curPos, curDir, 0.40, sphNorm); \n        if ((sph2T < t) && (randVals.x < 0.7)) {\n            t = sph2T;\n            normal = sphNorm;\n            vec3 worldPos = curPos + t * curDir;\n            if (randVals.x < WATER_R ) {\n                materialType = EMISSION;\n                vec3 worldPos = curPos + t * curDir;\n                color = texture(iChannel3, worldPos).rgb * 1.4;\n            } \n            else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } \n                else {\n                    nEnter = WATER_N;\n                }\n                mult = texture(iChannel3, worldPos).rgb * 1.4;\n            } \n        } \n        if (t != INF) {\n            vec3 worldPos = curPos + t * curDir;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n               fragColor.rgb = mult * color ; \n               break;\n            }\n            else if (materialType == DIFFUSE) {\n                    fragColor.rgb =  mult * computeLight(worldPos , color , normal, TRIANGLES);\n                  \n                    break;\n                 }\n            else if (materialType == REFLECTION) {\n                    curDir = reflect(curDir , normal );\n                    curPos = worldPos + curDir * 1e-5;\n                 }\n            else if (materialType == REFRACTION) {\n                    bool change ;\n                    curDir = refraction(curDir, normal, n1, nEnter, change);\n                    curPos = worldPos + curDir * 1e-5;\n                    if (change)\n                        n1 = nEnter;    \n                 }     \n        }\n        else if (last_ihos)\n                 fragColor.rgb =  mult * texture(iChannel1, normalize(curDir + curPos)).rgb ;\n             else\n                 fragColor.rgb =  mult* texture(iChannel1,curDir).rgb ;\n             \n       \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"#define DRAG_MULT 0.048\n#define ITERATIONS_RAYMARCH 13\n#define ITERATIONS_NORMAL 48\n#define WATER_DEPTH 2.1\n\n#define Resolution (iResolution.xy)\n#define Time (iTime)\n\n// returns vec2 with wave height in X and its derivative in Y\nvec2 wavedx(vec2 position, vec2 direction, float speed, float frequency, float timeshift) {\n    float x = dot(direction, position) * frequency + timeshift * speed;\n    float wave = exp(sin(x) - 1.0);\n    float dx = wave * cos(x);\n    return vec2(wave, -dx);\n}\n\nfloat getwaves(vec2 position, int iterations){\n\tfloat iter = 0.0;\n    float phase = 6.0;\n    float speed = 2.0;\n    float weight = 1.0;\n    float w = 0.0;\n    float ws = 0.0;\n    for(int i=0;i<iterations;i++){\n        vec2 p = vec2(sin(iter), cos(iter));\n        vec2 res = wavedx(position, p, speed, phase, 3.0f);\n        position += normalize(p) * res.y * weight * DRAG_MULT;\n        w += res.x * weight;\n        iter += 12.0;\n        ws += weight;\n        weight = mix(weight, 0.0, 0.2);\n        phase *= 1.18;\n        speed *= 1.07;\n    }\n    return w / ws;\n}\n\nfloat raymarchwater(vec3 camera, vec3 start, vec3 end, float depth){\n    vec3 pos = start;\n    float h = 0.0;\n    float hupper = depth;\n    float hlower = 0.0;\n    vec2 zer = vec2(0.0);\n    vec3 dir = normalize(end - start);\n    for(int i=0;i<318;i++){\n        h = getwaves(pos.xz * 0.1, ITERATIONS_RAYMARCH) * depth - depth;\n        if(h + 0.01 > pos.y) {\n            return distance(pos, camera);\n        }\n        pos += dir * (pos.y - h);\n    }\n    return -1.0;\n}\n\nfloat H = 0.0;\nvec3 normal(vec2 pos, float e, float depth){\n    vec2 ex = vec2(e, 0);\n    H = getwaves(pos.xy * 0.1, ITERATIONS_NORMAL) * depth;\n    vec3 a = vec3(pos.x, H, pos.y);\n    return normalize(cross(normalize(a-vec3(pos.x - e, getwaves(pos.xy * 0.1 - ex.xy * 0.1, ITERATIONS_NORMAL) * depth, pos.y)), \n                           normalize(a-vec3(pos.x, getwaves(pos.xy * 0.1 + ex.yx * 0.1, ITERATIONS_NORMAL) * depth, pos.y + e))));\n}\nmat3 rotmat(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nvec3 getRay(vec2 uv){\n    uv = (uv * 2.0 - 1.0) * vec2(Resolution.x / Resolution.y, 1.0);\n\tvec3 proj = normalize(vec3(uv.x, uv.y, 1.0) + vec3(uv.x, uv.y, -1.0) * pow(length(uv), 2.0) * 0.05);\t\n    if(Resolution.x < 400.0) return proj;\n\tvec3 ray = rotmat(vec3(0.0, -1.0, 0.0), 3.0 * 4.0 ) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (-4.0 * 2.0 - 1.0)) * proj;\n    return ray;\n}\n\nfloat intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal)\n{ \n    return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); \n}\n\nvec3 getatm(vec3 ray, float roughness){\n    vec3 sharp = mix(vec3( 0.0293, 0.0698, 0.1717) * 10.0, vec3(3.0), pow(1.0 - ray.y, 8.0));\n    vec3 rough = vec3(vec3( 0.0293, 0.0698, 0.1717) + vec3(1.0));\n    return mix(sharp, rough, roughness);\n}\n\nfloat sun(vec3 ray){\n    return pow(max(0.0, dot(ray, normalize(vec3(1.0, 1.0, 0.0)))), 668.0) * 110.0;\n}\n\nvec3 getColor(vec2 uv){\n\tvec3 ray = getRay(uv);\n    \n    if(ray.y >= -0.01){\n        vec3 C = getatm(ray, 0.0) * 1.0 + sun(ray) * 2.0;\n     \treturn C; \n    }\n    \n\tvec3 wfloor = vec3(0.0, -WATER_DEPTH, 0.0);\n\tvec3 wceil = vec3(0.0, 0.0, 0.0);\n\tvec3 orig = vec3(0.0, 2.0, 0.0);\n\tfloat hihit = intersectPlane(orig, ray, wceil, vec3(0.0, 1.0, 0.0));\n\tfloat lohit = intersectPlane(orig, ray, wfloor, vec3(0.0, 1.0, 0.0));\n    vec3 hipos = orig + ray * hihit;\n    vec3 lopos = orig + ray * lohit;\n\tfloat dist = raymarchwater(orig, hipos, lopos, WATER_DEPTH);\n    vec3 pos = orig + ray * dist;\n\n\tvec3 N = normal(pos.xz, 0.01, WATER_DEPTH);\n    vec2 velocity = N.xz * (1.0 - N.y);\n    vec3 R = reflect(ray, N);\n    float roughness = 1.0 - 1.0 / (dist * 0.01 + 1.0);\n    N = normalize(mix(N, vec3(0.0, 1.0, 0.0), roughness));\n    R = normalize(mix(R, N, roughness));\n    R.y = abs(R.y);\n    float fresnel = (0.04 + (1.0-0.04)*(pow(1.0 - max(0.0, dot(-N, ray)), 5.0)));\n\t\n    vec3 C = fresnel * (getatm(R, roughness) + sun(R)) * 2.0;\n    \n\treturn C;\n}\n\nvec3 gammacorrect(vec3 c){\n    return pow(c, vec3(1.0 / 2.4));\n}\n\nvec3 render(vec2 uv){\n \tvec3 ray = getRay(uv);\n    vec3 C = getColor(uv);\n    return gammacorrect(C);  \n}\n\n\n\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{ vec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfragColor = vec4(render(uv),1.0);\n}","name":"Cube A","description":"","type":"cubemap"}]}