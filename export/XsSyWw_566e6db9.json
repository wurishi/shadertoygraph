{"ver":"0.1","info":{"id":"XsSyWw","date":"1492247211","viewed":696,"name":"Colorful Swirl 4","username":"ccorcos","description":"Plotting hue radially on a grid with some magical functions that just happen to work perfectly together :)","likes":7,"published":1,"flags":16,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HSL colorspace:\n// https://www.shadertoy.com/view/XljGzV\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n\n// GLSL Tutorial for reference:\n// https://www.shadertoy.com/view/Md23DV\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Coordinate to width:\n    vec2 p = vec2(fragCoord.xy / iResolution.xy);\n    \n    // Number of tiles across\n    float tiles = 4.0;\n    \n    // Project point into that tile\n    vec2 tp = p * tiles;\n    \n    // Determine the spin of that tile\n    float sx = floor(mod(tp.x, 2.0)) * 2.0 - 1.0;\n    float sy = floor(mod(tp.y, 2.0)) * 2.0 - 1.0;\n    float spin = sx * sy;\n    \n    // Normalize the tile point\n    vec2 coord = mod(tp, 1.0) * iResolution.xy;\n     \n    // Just an alias for no reason\n    vec3 res = iResolution;\n            \n    // Polar coordinates:\n    // https://www.shadertoy.com/view/ltlXRf\n    vec2 rel = coord.xy - (res.xy / 2.0);\n    vec2 polar;\n    polar.y = sqrt(rel.x * rel.x + rel.y * rel.y);\n    polar.y /= res.x / 2.0;\n    polar.y = 1.0 - polar.y;\n\n    polar.x = atan(rel.y, rel.x);\n    polar.x -= 1.57079632679;\n    if(polar.x < 0.0){\n\t\tpolar.x += 6.28318530718;\n    }\n    polar.x /= 6.28318530718;\n    polar.x = 1.0 - polar.x;\n    \n    // Visualization params:\n    float speed = 0.3;\n    float arms = 1.0;\n    //float tightness = (sin(iTime * 2.0 / 3.0) + 1.0) * 0.5 * arms + 0.5;\n    float tightness = 1.5 * arms;\n    \n    // Compute swirl:\n    float hue = spin * polar.x * arms\n        + mod(arms, 2.0) * sy * 0.25\n        + iTime * speed\n        + spin * rel.x * rel.y / res.x / res.y * tightness;\n\n    // Compute rgb:\n    vec3 rgb = hsl2rgb(vec3(hue, 1.0, 0.6));\n    fragColor = vec4(rgb, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}