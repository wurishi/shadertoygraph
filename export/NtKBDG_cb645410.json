{"ver":"0.1","info":{"id":"NtKBDG","date":"1665168636","viewed":52,"name":"Smiley face emoji","username":"airepods","description":"A strange face that loves to follow your mouse","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["smiley","face","meme","emoji"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 draw_rectangle(vec2 st, float width, float height, vec3 color, vec2 pos, float angle)\n{\t\n    // translate rectangle by moving the st space\n    pos = -pos;\n    st+=pos;\n    \n    // rotate rectangle by angle\n    angle = radians(angle);\n    // move space from the center to the vec2(0.0)\n    st -= vec2(0.5);\n    // rotate the space\n    st = rotate2d(angle) * st;\n    // move it back to the original place\n    st += vec2(0.5);\n    \n    // map offset to rectangle size\n    // i.e 0.1 to 0.8 (0.1 offset from both sides)\n    width = (1.0-width)/2.0;\n    height = (1.0-height)/2.0;\n    \n    vec2 bl = step(vec2(width, height), st);\n    vec2 tr = step(vec2(width, height), 1.0-st);\n    \n    // create rectangle -> white rectangle <1.0, 1.0, 1.0>\n    vec3 shape = vec3(bl.x*bl.y*tr.x*tr.y);\n    return shape*color;\n}\n\nvec3 draw_rectangle_outline(vec2 st, float width, float height, float border_size, vec3 color, vec2 pos, float angle)\n{\n\treturn draw_rectangle(st, width + border_size, height + border_size, color, pos, angle) - \n           draw_rectangle(st, width, height, color, pos, angle);   \n}\n\nvec3 draw_circle(vec2 st, float radius, vec3 color, vec2 pos)\n{\n    // translate circle by moving the st space\n    pos = -pos;\n    st+=pos;\n    \n    vec3 shape = vec3(0.0);\n    // vector from center to pixel coordinate\n    vec2 toCenter = st - vec2(0.5);\n    \n    // radius to negative\n    radius = -radius;\n    // invert length of vector for getting a colored circle and \n    // getting embebbed on canvas\n    shape = vec3(smoothstep(radius, radius+0.002, -length(toCenter)));\n    \n    return shape*color;\n    \n}\n\nvec3 draw_smooth_circle(vec2 st, float radius, vec3 color, vec2 pos)\n{\n    // translate circle by moving the st space\n    pos = -pos;\n    st+=pos;\n    \n    vec3 shape = vec3(0.0);\n    // vector from center to pixel coordinate\n    vec2 toCenter = st - vec2(0.5);\n    \n    // radius to negative\n    radius = radius;\n    // invert length of vector for getting a colored circle and \n    // getting embebbed on canvas\n    shape = vec3(smoothstep(radius, 0.0, length(toCenter)));\n    \n    return shape*color;\n}\n\n\nvec3 blendNegation(vec3 base, vec3 blend) {\n\treturn vec3(1.0)-abs(vec3(1.0)-base-blend);\n}\n\nvec3 blendNegation(vec3 base, vec3 blend, float opacity) {\n\treturn (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n     \n    st.x *= aspect;\n    st.x -= 0.35;\n    \n    vec3 color = vec3(0.0);\n    \n    vec3 face1_color = mix(vec3(251, 175, 34)/255.0, vec3(252, 223, 41)/255.0, 1.5*pow(1.0-st.y, 2.0));\n    vec3 face2_color = mix(vec3(255,245,212)/255.0, vec3(252, 223, 41)/255.0, 4.0*pow(1.0-st.y, 2.0));\n    \n    vec3 blush_color = vec3(14.235,87.759,248.000)/255.0;\n    \n    vec3 blushleft = draw_smooth_circle(st, 0.2, blush_color ,vec2(0.25,-0.08));\n    vec3 blushright = draw_smooth_circle(st, 0.2, blush_color ,vec2(-0.25,-0.08));\n    \n    // face\n    vec3 face1 = draw_circle(st, 2.0, face1_color ,vec2(0.0,0.0));\n    vec3 face10 = draw_circle(st, 0.4, face1_color ,vec2(0.0,0.0));\n    vec3 face20 = draw_circle(st, 0.384, face1_color ,vec2(0.0,0.0));\n    \n    vec3 face = face1 - face10 + face20;\n    \n    // semicircle\n    vec3 rect = draw_rectangle(st, 0.672, 0.284, vec3(1.0, 1.0, 1.0), vec2(0.020,0.240), 0.0);\n    vec3 face2 = draw_circle(st, 0.328, vec3(1.0, 1.0, 1.0) ,vec2(0.000,0.020));\n    vec3 semicircle = (face2 * rect)*face2_color;\n    \n    // mouth\n    vec3 mouth1 = draw_rectangle(st, 0.576, 0.788, vec3(1.0, 1.0, 1.0), vec2(0.000,-0.480), 0.0) *\n                  draw_circle(st, 0.240, vec3(1.0, 1.0, 1.0) ,vec2(0.000,0.0));\n    mouth1 *= vec3(175.000,86.647,98.382)/255.0;\n    \n    vec3 mouth2 = draw_rectangle(st, 0.5, 0.808, vec3(1.0, 1.0, 1.0), vec2(0.000,-0.480), 0.0) *\n                  draw_circle(st, 0.248, vec3(1.0, 1.0, 1.0) ,vec2(0.000,0.0));\n    \n    vec3 mouth = mouth1 - mouth2;\n    \n    // delta for moving the eyes\n    // map mouse coordinates [0.0, 1.0] to [-0.5, 0.5] for left-right movement\n    vec2 delta = 0.08*(mouse-0.5);\n    \n\t//eyes\n    vec3 eyeleft = draw_circle(st, 0.106, face1_color, vec2(-0.150,0.130)); \n    vec3 irisleft = draw_circle(st, 0.098, vec3(1.0, 1.0, 1.0), vec2(-0.150,0.130)); \n    vec3 pupilleft = draw_circle(st, 0.050, vec3(1.0, 1.0, 1.0), vec2(-0.150,0.130) + delta); \n    \n    vec3 eyeright = draw_circle(st, 0.106, face1_color, vec2(0.150,0.130));\n    vec3 irisright = draw_circle(st, 0.098, vec3(1.0,1.0,1.0), vec2(0.150,0.130)); \n    vec3 pupilright = draw_circle(st, 0.050, vec3(1.0,1.0,1.0), vec2(0.150,0.130) + delta); \n    \n    // + -> union\n    // * -> intersection\n    // - -> difference (A-B)\n    //color = (face1 - mouth - blushleft - blushright) - (eye1 + eye2) + pup1;\n    color = face - eyeleft + irisleft - pupilleft - eyeright + irisright - pupilright + (mouth) - blushleft - blushright;\n    \n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}