{"ver":"0.1","info":{"id":"ldfyRH","date":"1487337504","viewed":91,"name":"weooo","username":"ziptos","description":"its really simple","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p){\n\treturn length(p) - 1.0;   \n}\n\nvec3 calcNormal(vec3 v){\n    return normalize (vec3 ( map ( v + vec3(1.0,0.0,0.0)), \n           \t\t  map ( v + vec3(0.0,1.0,0.0)),\n          \t\t  map ( v + vec3(0.0,0.0,1.0))));\n}\n\n\nvec3 trace (vec3 o, vec3 r){\n    vec3 c = vec3(0,0,0);\n    float t = 0.0;\n    float d = 0.0;\n    vec3 light = vec3(2.0,0.0,-3.0);\n    for( int i = 0; i < 100; i++ ){\n    \tvec3 p = o + r * t;\n        float d = map(p);\n        t += d * 1.0;\n        \n        if(d < 0.001){\n            \n            vec3 normal = calcNormal(p);\n            float lit = dot (normal,light);\n            \n        \tc = lit * vec3(1,1,1);   \n            break;\n   \t\t}\n    } //end of for-loop\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    vec3 o = vec3(0.0,0.0,-3.0);\n\n    vec3 fc = trace(o,r);\n    \n    \n\tfragColor = vec4(fc,0.0);\n}","name":"Image","description":"","type":"image"}]}