{"ver":"0.1","info":{"id":"7scyWf","date":"1654149353","viewed":101,"name":"Rainbow Palettes","username":"Kneebiter","description":"Different visualizations of a rainbow palette. Use mouse click to toggle gamma correction.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["palette","rainbow","pride"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * A collection of rainbow palettes as a starting point for my attempt to do one shader per day for Pride month.\n *\n * Additional palettes will be added as I experiment with additional techniques.\n *\n * Please see comments above each function for proper attributions for palettes that are not my own.\n * Duplicated here for convenience.\n * \n * Visible spectrum by WAHa_06x36: https://www.shadertoy.com/view/4dXXzN\n * Based on code by Spektre posted at http://stackoverflow.com/questions/3407942/rgb-values-of-visible-spectrum\n * \n * iq's palette function: https://iquilezles.org/articles/palettes/\n *\n * FabriceNeyret2's shortest rainbow / hue (93 ch):   https://www.shadertoy.com/view/ll2cDc\n *\n **/\n\n// https://www.shadertoy.com/view/4dXXzN\n// Based on code by Spektre posted at http://stackoverflow.com/questions/3407942/rgb-values-of-visible-spectrum\nvec3 spectral_colour(float l) // RGB <0,1> <- lambda l <400,700> [nm]\n{\n    l = l * 300. + 400.;\n\t\n    float r=0.0,g=0.0,b=0.0;\n    \n         if ((l>=400.0)&&(l<410.0)) { float t=(l-400.0)/(410.0-400.0); r=    +(0.33*t)-(0.20*t*t); }\n    else if ((l>=410.0)&&(l<475.0)) { float t=(l-410.0)/(475.0-410.0); r=0.14         -(0.13*t*t); }\n    else if ((l>=545.0)&&(l<595.0)) { float t=(l-545.0)/(595.0-545.0); r=    +(1.98*t)-(     t*t); }\n    else if ((l>=595.0)&&(l<650.0)) { float t=(l-595.0)/(650.0-595.0); r=0.98+(0.06*t)-(0.40*t*t); }\n    else if ((l>=650.0)&&(l<700.0)) { float t=(l-650.0)/(700.0-650.0); r=0.65-(0.84*t)+(0.20*t*t); }\n         \n         if ((l>=415.0)&&(l<475.0)) { float t=(l-415.0)/(475.0-415.0); g=             +(0.80*t*t); }\n    else if ((l>=475.0)&&(l<590.0)) { float t=(l-475.0)/(590.0-475.0); g=0.8 +(0.76*t)-(0.80*t*t); }\n    else if ((l>=585.0)&&(l<639.0)) { float t=(l-585.0)/(639.0-585.0); g=0.82-(0.80*t)           ; }\n         \n         if ((l>=400.0)&&(l<475.0)) { float t=(l-400.0)/(475.0-400.0); b=    +(2.20*t)-(1.50*t*t); }\n    else if ((l>=475.0)&&(l<560.0)) { float t=(l-475.0)/(560.0-475.0); b=0.7 -(     t)+(0.30*t*t); }\n\n\treturn vec3(r,g,b);\n}\n\n// https://iquilezles.org/articles/palettes/\n#define iq_rainbow_palette(t) palette(t, vec3(.5), vec3(.5), vec3(1.), vec3(0.,.33,.67))\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// https://www.shadertoy.com/view/ll2cDc\nvec3 fabriceNeyret_rainbow_palette(float t) {\n    return .6 + .6 * cos(6.3* t + vec3(0,23,21));\n}\n\n// my own\nvec3 rainbow_lookup(int c) {\n    vec3 col = vec3(0.);\n    if( c == 0 ) {\n        col = vec3(1.,0.,0.);\n    } else if ( c == 1 ) {\n        col = vec3(1.,.5,0.);\n    } else if ( c == 2) {\n        col = vec3(1.,1.,0.);\n    } else if ( c == 3 ) {\n        col = vec3(0.,.9,0.);\n    } else if ( c == 4 ) {\n        col = vec3(0.,0.,.9);\n    } else if ( c == 5 ) {\n        col = vec3(.5,0.,.8);\n    }\n    return col;\n}\n\n// my own\nvec3 six_color_rainbow(float t) {\n    return rainbow_lookup(int(t * 6.));\n}\n\n// my own\nvec3 linear_interpolation(float t) {\n    vec3 c1 = rainbow_lookup(int(t * 6.));\n    vec3 c2 = rainbow_lookup(int(mod(t * 6. + 1., 6.)));\n    \n    return mix(c1, c2, fract(t * 6.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col;\n    \n    float timeRate = 0.5;\n    float cTime = iTime * timeRate;\n    \n    if (uv.y > 0.8) {\n       col = spectral_colour(fract(cTime + uv.x + 0.8));\n    } else if (uv.y > 0.6) {\n       col = iq_rainbow_palette(cTime + uv.x);\n    } else if (uv.y > 0.4) {\n       col = fabriceNeyret_rainbow_palette(-cTime - uv.x);\n    } else if (uv.y > 0.2) {\n       col = six_color_rainbow(1. - fract(cTime + uv.x - 0.2));\n    } else {\n       col = linear_interpolation(1. - fract(cTime + uv.x - 0.1));\n    }\n    \n    if (sign(iMouse.z) != 1.) {\n        col = pow( col, vec3(1.0/2.2) );\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}