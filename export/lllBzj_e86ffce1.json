{"ver":"0.1","info":{"id":"lllBzj","date":"1512587082","viewed":281,"name":"Modified 1½ Gray Scott Systems","username":"FlexMonkey","description":"There's an extra `v` species, hence the extra 1½.\n\nThe Gray Scott model is also modified: reaction rate is multiplied by `step(0.410, u)`, the delta `u` has an additional term, `v1*v2`, and there's a little random noise. \n\nFinal result is mitosing blobs.","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tint radius = 4; \n    vec2 pixelSize = vec2(1.0 / iResolution.xy); \n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 zero = texture(iChannel0, coord).xyz;\n  \tfloat count = 0.0;\n    \n    vec3 ab = vec3(0);\n    \n    for (int x = -radius; x <= radius; x++) {\n        for (int y = -radius; y <= radius; y++) {\n            if (length(vec2(x, y)) < float(radius)) {\n            \tab += texture(iChannel0, coord + pixelSize * vec2(x, y)).xyz;\n                count++;\n            }\n        }\n    }\n    \n    ab /= count;\n\n    float diff = smoothstep(0.001, 0.0025, abs(ab.y - ab.z));\n\n    vec3 cd = sqrt(texture(iChannel0, coord).xyz);\n    \n\tfragColor = vec4(cd * diff, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\nfloat f = 0.0175;\nfloat k1 = 0.0675;\nfloat k2 = 0.042;\nfloat dU = 0.2097;\nfloat dV1 = 0.1;\nfloat dV2 = 0.2;\n\nfloat timestep = 1.0;\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0; \n\n    vec3 p = texture(iChannel0, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float u = p.x;\n    float v1 = p.y;\n    float v2 = p.z;\n    \n    float reactionRate = u * v1 * v2 * step(0.35, u);  \n    \n    float delta_u = dU * laplacian.x - reactionRate + f * (1.0 - u + v1*v2); \n    \n    float rnd = 0.0029*noise(fragCoord * iTime); \n    \n    float delta_v1 = dV1 * laplacian.y + reactionRate - rnd - (f + k1) * v1;\n    float delta_v2 = dV2 * laplacian.z + reactionRate - rnd - (f + k2) * v2;\n\n   \tvec3 result = clamp(vec3(u + delta_u * timestep, \n                             v1 + delta_v1 * timestep,\n                             v2 + delta_v2 * timestep), 0.0, 1.0);\n\n    if(texture(iChannel2, coord).xyz == vec3(0) || reset()) {\n        fragColor = texture(iChannel1, coord) * vec4(1, 0.5, 0.25, 1);\n        float aspect = iResolution.x / iResolution.y;\n        if (abs(coord.x - 0.5) > 0.02 || abs(coord.y - 0.5) > 0.02 * aspect) {\n            fragColor = vec4(1,0,0,1);\n        }\n        \n    } \n    else {\n        \n\t\tfragColor = vec4(result.xyz, 1.0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\nfloat f = 0.018;\nfloat k1 = 0.0665;\nfloat k2 = 0.041;\nfloat dU = 0.2097;\nfloat dV1 = 0.09;\nfloat dV2 = 0.19;\n\nfloat timestep = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.5; \n\n    vec3 p = texture(iChannel0, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float u = p.x;\n    float v1 = p.z;\n    float v2 = p.y;\n    \n    float reactionRate = u * v1 * v2 ;  \n    \n    float delta_u = dU * laplacian.x - reactionRate + f * (1.0 - u + v1*v2); \n    float delta_v1 = dV1 * laplacian.y + reactionRate - (f + k1) * v1;\n    float delta_v2 = dV2 * laplacian.z + reactionRate - (f + k2) * v2;\n\n   \tvec3 result = clamp(vec3(u + delta_u * timestep, \n                             v1 + delta_v1 * timestep,\n                             v2 + delta_v2 * timestep), 0.0, 1.0);\n\n    fragColor = vec4(result.xyz, 1.0);\n    \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\nfloat f = 0.0185;\nfloat k1 = 0.0655;\nfloat k2 = 0.040;\nfloat dU = 0.2097;\nfloat dV1 = 0.08;\nfloat dV2 = 0.18;\n\nfloat timestep = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 2.0; \n\n    vec3 p = texture(iChannel0, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float u = p.x;\n    float v1 = p.y;\n    float v2 = p.z;\n    \n    float reactionRate = u * v1 * v2 ;  \n    \n    float delta_u = dU * laplacian.x - reactionRate + f * (1.0 - u + v1*v2); \n    float delta_v1 = dV1 * laplacian.y + reactionRate - (f + k1) * v1;\n    float delta_v2 = dV2 * laplacian.z + reactionRate - (f + k2) * v2;\n\n   \tvec3 result = clamp(vec3(u + delta_u * timestep, \n                             v1 + delta_v1 * timestep,\n                             v2 + delta_v2 * timestep), 0.0, 1.0);\n\n    fragColor = vec4(result.xyz, 1.0);\n    \n}","name":"Buf C","description":"","type":"buffer"}]}