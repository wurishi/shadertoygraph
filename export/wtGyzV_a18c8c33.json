{"ver":"0.1","info":{"id":"wtGyzV","date":"1611333969","viewed":294,"name":"Vibrant Cubes","username":"Kamoshika","description":"two and a half hours live coding","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rand(x) fract(sin(x)*43758.5453)\n\nconst float pi = acos(-1.);\nconst float pi2 = pi*2.;\n\nfloat rand2(vec2 p) {\n  return rand(dot(p, vec2(24.1214, 15.2321)));\n}\n\nfloat rand3(vec3 p) {\n  return rand(dot(p, vec3(24.1214, 15.2321, 21.2362)));\n}\n\nmat2 rotate(float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvec2 pmod(vec2 p, float n) {\n  float a = pi2 / n;\n  float theta = atan(p.y, p.x) + .5*a;\n  theta = floor(theta/a)*a;\n  return p*rotate(-theta);\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 res = fract(h+vec3(0,2,1)/3.);\n  res = abs(res*6.-3.)-1.;\n  res = clamp(res, 0., 1.);\n  res = (res-1.)*s+1.;\n  res *= v;\n  return res;\n}\n\nfloat interval_xy = 10.;\nfloat interval_z = 5.;\nfloat dist1(vec3 p) {\n  vec3 z = p;\n  vec2 id = floor(z.xy/interval_xy);\n  \n  z.z -= fract(iTime)*10.;\n  z.xy = mod(z.xy, interval_xy) - .5*interval_xy;\n  z.xy *= rotate(floor(z.z/interval_z)*.2 + iTime);\n  z.z = mod(z.z, interval_z) - .5*interval_z;\n  \n  float r1 = rand2(id+floor(iTime)*.1);\n  z.xy = pmod(z.xy, floor(r1*8.+3.));\n  z.x -= 1.5;\n\n  return length(max(abs(z)-vec3(.5), 0.));\n}\n\nfloat dist2(vec3 p) {\n  vec3 z = p;\n  z = abs(z)-.25;\n  z *= 2.;\n  z = abs(z)-.25;\n  z *= 2.;\n  \n  float size = .5+pow(sin(iTime*10.)*.5+.5, 5.);\n  size *= .5;\n  return length(max(abs(z)-vec3(size), 0.))/4.;\n}\n\nvec3 calcNormal1(vec3 p, float eps) {\n  vec2 e = vec2(0, eps);\n  return normalize(vec3(dist1(p+e.yxx)-dist1(p-e.yxx),\n  dist1(p+e.xyx)-dist1(p-e.xyx),\n  dist1(p+e.xxy)-dist1(p-e.xxy)));\n}\n\nvec3 calcNormal2(vec3 p, float eps) {\n  vec2 e = vec2(0, eps);\n  return normalize(vec3(dist2(p+e.yxx)-dist2(p-e.yxx),\n  dist2(p+e.xyx)-dist2(p-e.xyx),\n  dist2(p+e.xxy)-dist2(p-e.xxy)));\n}\n\nfloat exp2Fog(float dist, float density) {\n  float s = dist*density;\n  return exp(-s*s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (fragCoord*2.-iResolution.xy) / min(iResolution.x, iResolution.y);\n  vec3 col = vec3(0);\n  \n  float c = iTime;\n  float L = 1.-fract(c);\n  float id = ceil(c);\n  for(int i=0; i<10; i++) {\n    float a = atan(.7, L)*3.;\n    vec2 z = p/a;\n    float r1 = rand(id);\n    float r2 = rand(id+20.);\n    z = pmod(z, floor(r1*10.+3.));\n    z.x += -1.;\n    z *= rotate(iTime*.5+pi2/20.*id);\n    z = pmod(z, floor(r1*8.+3.));\n    z.x += -1.;\n    z = pmod(z, floor(r1*8.+3.));\n    col += .005/abs(z.x-.5)*hsv2rgb(r2, 1., 1.);\n    L++;\n    id++;\n  }\n  \n  vec3 cPos = vec3(0, 0, 5.);\n  vec3 cDir = vec3(0, 0, -1);\n  vec3 cUp = vec3(0, 1, 0);\n  cUp.xy *= rotate(iTime*.1);\n  vec3 cSide = cross(cDir, cUp);\n  vec3 ray = normalize(p.x*cSide + p.y*cUp + cDir*2.5);\n  \n  float d = 0.;\n  vec3 rPos = cPos;\n  for(int i=0; i<100; i++) {\n    d = dist1(rPos);\n    if(d<0.001) {\n      break;\n    }\n    rPos += ray*d;\n  }\n  \n  if(d<0.1) {\n    vec3 normal = calcNormal1(rPos, 0.0001);\n    vec3 normal2 = calcNormal1(rPos, 0.1);\n    float edge = clamp(length(normal-normal2), 0., 1.);\n    vec2 id = floor(rPos.xy/interval_xy);\n    float r1 = rand2(id+floor(iTime)*.1);\n    float fog = exp2Fog(length(rPos-cPos), 0.01);\n    col = mix(col, hsv2rgb(r1, 1., 1.)*edge, fog);\n  }\n  \n  cPos.zx *= rotate(.5);\n  cPos.yz *= rotate(iTime);\n  cDir = normalize(-cPos);\n  vec3 up = vec3(0, 1, 0);\n  cSide = normalize(cross(cDir, up));\n  cUp = normalize(cross(cSide, cDir));\n  ray = normalize(p.x*cSide + p.y*cUp + cDir*2.5);\n  \n  d = 0.;\n  rPos = cPos;\n  for(int i=0; i<30; i++) {\n    d = dist2(rPos);\n    if(d<0.0001 || length(rPos-cPos) > 10.) {\n      break;\n    }\n    rPos += ray*d;\n  }\n  \n  vec3 lightDir = normalize(vec3(1));\n  if(d<0.1) {\n    vec3 normal = calcNormal2(rPos, 0.0001);\n    vec3 normal2 = calcNormal2(rPos, 0.01);\n    float edge = clamp(length(normal-normal2)*1.5, 0., 1.);\n    vec3 id = floor(rPos*4.);\n    float diff = max(dot(lightDir, normal), .0);\n    float r1 = rand3(id+floor(iTime*10.)*.1);\n    col = hsv2rgb(r1, diff*.5+.5, 1.)*(1.-edge);\n  }\n  \n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}