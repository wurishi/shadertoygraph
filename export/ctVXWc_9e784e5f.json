{"ver":"0.1","info":{"id":"ctVXWc","date":"1686472520","viewed":130,"name":"11-06-2023 - 1 - Dunes","username":"Eise","description":"Cool pattern of sine functions and such, looking like dunes.","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["waves","pattern","cool","dunes","warm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float divisionD(vec2 uv, vec2 pos) {\n    float d = 0.0;\n    d = sin(iTime + uv.y * uv.x) * (uv.x - pos.x) - uv.y + pos.y;\n    float fase = mod(iTime, 6.283);\n    d = step(0.8, d); \n    return d;\n}\n\n// Only for debugging\nfloat pointD(vec2 uv, vec2 pos) {\n    float d = length(uv - pos);\n    d = step(0.05, d);\n    d = 0.00001 / d;\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 finCol = vec3(0.0);\n    vec3 divCol = vec3(0.7, 0.3, 0.0);\n    vec3 pointCol = vec3(0.0, 1.0, 1.0);\n    \n    vec2 points[4] = vec2[4](vec2(sin(iTime), cos(iTime)), vec2(cos(iTime), 0.5), vec2(0.8, sin(iTime * 0.1)), vec2(cos(iTime)));\n    for (int i = 0; i < points.length(); i++) {   \n        finCol += divisionD(uv, points[i]) * divCol;\n        //finCol += pointD(uv, points[i]) * pointCol;\n    }\n\n\n    fragColor = vec4(finCol, 1.0);\n}","name":"Image","description":"","type":"image"}]}