{"ver":"0.1","info":{"id":"tdKGzD","date":"1569862671","viewed":128,"name":"color Tunnel","username":"arifr123","description":"drag the mouse over the screen","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat torusDist(vec3 p, float r1, float r2)\n{\n    float d = sqrt(pow(p.z, 2.0) + pow(length(p.xy) - r1, 2.0));\n    if(r2 <= d)\n    \treturn d - r2;\n    else\n        return r2 - d;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 getColor(vec3 p, float r1, float time, vec3 cp)\n{\n    vec4 col = vec4(0, 0, 0, 0.25);//black\n    \n    float t = atan(p.y, p.x) / (2.0*PI) + 0.5;\n\n    float rings = 10.;\n\n    t = rings*r1*t;\n\n    float colorNum = 2.0;\n    float colorChange = 0.025;//0 - 1\n\n    if(0.9 < fract(t + time))\n    {\n        col.rgb = hsv2rgb(vec3((t + (1. + colorChange)*time)/colorNum, 1.0, 1.0));\n        col.rgb *= 50. / pow(distance(p, cp), 2.);\n        \n        col.a = 1.0;//opaque\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = 8.*iTime;\n    \n    vec2 uv = (fragCoord - iResolution.xy/2.0) / iResolution.y;\n    \n    vec2 um = (iMouse.xy - iResolution.xy/2.0) / iResolution.y;\n    um = 1.5*um.yx;\n    float umLength = 0.3*length(um);\n    um = normalize(um);\n    \n    \n    float r1 = 1.0 / umLength;\n    float r2 = 0.75;//0.55 + 0.5*sin(time/5.0);\n    \n    float torusCameraDist = 0.5*r2;\n    \n    vec3 cp = vec3(-r1, 0, 0);\n    vec3 i = vec3(um.y, 0, -um.x);\n    vec3 j = vec3(um.x, 0, um.y);\n    vec3 k = -vec3(0, 1, 0);\n    \n    //vec3 cp = vec3(r1, 0, 3);\n    //vec3 i = vec3(0, 1, 0);\n    //vec3 j = normalize(vec3(-3, 0, 3));\n    //vec3 k = normalize(vec3(-3, 0, -3));\n    \n    \n    float zoom = 0.007;\n    \n    \n    uv *= 0.01;\n    vec3 ld = normalize(uv.x * i + uv.y * j + zoom * k);\n    \n    vec4 col = vec4(0);\n    bool searchAgain = true;\n    \n    vec3 smp = cp;\n    \n    while(searchAgain)\n    {\n        searchAgain = false;\n        \n        vec3 p = smp;\n        \n        for(int i = 0; i < 200; i++)\n        {\n            float d = torusDist(p, r1, r2);\n            p += d * ld;\n            \n            if(d < 0.01)\n            {\n                vec4 nc = getColor(p, r1, time, cp);\n                col.rgb = mix(nc.rgb, col.rgb, col.a);\n                col.a = 1. - (1. - col.a)*(1. - nc.a);\n                \n                smp = p + 0.01 * ld;\n                \n                searchAgain = true;\n                \n                break;\n            }\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col.a * col.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}