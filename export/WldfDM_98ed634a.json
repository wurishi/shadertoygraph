{"ver":"0.1","info":{"id":"WldfDM","date":"1612872396","viewed":98,"name":"fractono","username":"tono","description":"fractal","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat bo(vec3 p , vec3 s){p = abs(p) - s;return max(p.x,max(p.y,p.z));}\nfloat pi = acos(-1.);\n\n#define ITERATIONS 5\nfloat deMengerSponge2(vec3 p, vec3 offset, float scale) {\n    vec4 z = vec4(p, 1.0);\n    for (int i = 0; i < ITERATIONS; i++) \n    {\n        z = abs(z);\n        if (z.x < z.y) z.xy = z.yx;\n        if (z.x < z.z) z.xz = z.zx;\n        //if (z.y < z.z) z.yz = z.zy;\n        z *= scale;\n        z.xyz -= offset * (scale - 1.0);\n        if (z.z < -0.5 * offset.z * (scale - 1.0))\n            z.z += offset.z * (scale - 1.0);\n    }\n    return (length(max(abs(z.xyz) - vec3(1.0, 1.0, 1.0), 0.0))) / z.w;\n}\n\nvec2 pmod(vec2 p, float r)\n{\n    float a = atan(p.x, p.y) + pi / r;\n    float n = (pi * 2.) / r;\n    a =  floor(a / n) * n;\n    return p * rot(-a);\n}\n\nvec2 map(vec3 p)\n{\n    float id = 0.;\n    float o = 10.;\n    //p.z  += time;\n\n    vec3 op = p;\n    p = sin(p);\n\t\n    p.xy *= rot(p.z);\n    \n    p.xz = pmod(p.xz , 7.);\n    p.xz = abs(p.xz) - 1.;\n\n    p.xz = (p.x > p.z)?p.zx:p.xz;\n    o  = deMengerSponge2( p , vec3(1.7) , 3. );\n    p.xy *= rot(pi / 6.);\n    float cab = deMengerSponge2( p , vec3(1.9) , 3.2 ) ;\n    if(cab < o)\n    {\n        o = cab;\n        id = 1.;\n    }\n\top.xy *= rot( sign( sin( op.z ) ) * iTime + sin( length( op.xy ) * .4 ) );\n\n    op = sin(op) * .6;\n    op = clamp(op ,-1. ,1.);\n   \top = abs(op) - .9;\n    float sp = length(op) - .6 ;\n\n    if(sp < o)\n    {\n        o = sp;\n        id = 2.;\n    }\n\n    return vec2(o * .9,id);\n}\n\nvec2 march(vec3 cp, vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0; i < 66 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(d.x < 0.01)\n        {\n            return vec2(depth,d.y);\n        }\n        if(depth > 30.){break;}\n        depth += d.x;\n    }\n    return vec2(-depth,0.);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tfloat t = floor(iTime) + pow(fract(iTime),1.1);\n    p *= rot(t/3.);\n    vec3 col = vec3(.1);\n    vec3 bcol = col;\n    vec3 forward = vec3(0.,0.,0.);\n    forward.z += iTime;\n    vec3 cp = vec3(.3,0.,-5.) ;\n    cp.xy *= rot(iTime);\n    cp += forward;\n    vec3 target = vec3(2.,0.,0.) ;\n    target.y += sin( t/4. ) * 4.;\n    target .xy *= rot(iTime);\n    target += + forward;\n    vec3 cd = normalize(target - cp);\n    vec3 cs = normalize(cross(cd,vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = .5;\n    vec3 rd = normalize(p.x * cs + p.y * cu + cd * fov);\n    \n    vec2 d = march(cp,rd);\n    if(d.x > 0.)\n    {\n        vec3 pos = d.x * rd + cp;\n        vec2 e   = vec2(0.,0.001);\n        vec3 N   = -normalize(map(pos).x - vec3(map(pos - e.xyy).x,map(pos - e.yxy).x,map(pos - e.yyx)));\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        sun.xz *= rot(iTime);\n        col = vec3( 1. ) * pow( 1. - exp( -.0003 * d.x * d.x * d.x ) , 1.1);\n    \tfloat diff = max(0.,dot(N,sun));\n        diff = mix(diff,1.,.1);\n        float sp   = max(0.,dot(reflect(sun,N),cd));\n        vec3 ocol = vec3(.8);\n\n    \tif(d.y == 0.)\n        {\n            ocol = vec3(.5,0.,1.);\n            sp = pow(sp,6.) * 10.;\n        \tcol = diff * ocol + sp * vec3(1.);\n        }\n        else if(d.y == 1.)\n        {\n            ocol =  vec3( 0., 0., 1.);\n            sp = pow(sp,2. ) * 10.;\n        \tcol = diff * ocol + sp * vec3(1.);\n            col += vec3( 1., 0., 1.) * floor( sin( pos.z - iTime * 2. ) + .01 );\n        }\n        else if(d.y == 2.)\n        {\n            \n            ocol = vec3( 0.1,0.,0.1);\n            sp = pow(sp,2.);\n        \tcol = diff * ocol + sp * vec3(1.);\n        }\n\n        \n        float tt = 1. - exp(d.x * d.x * d.x * d.x * d.x * -.01);\n        col = mix(col,bcol,tt);\n    }\n    vec3 hsv = rgb2hsv(col);\n    hsv.y = (sin(hsv.y) + 1.) * .5;\n    hsv.x += sin(iTime / 50.);\n    //hsv.z = 1.;\n    col = hsv2rgb(hsv);\n\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}