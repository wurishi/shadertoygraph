{"ver":"0.1","info":{"id":"fd23Dz","date":"1617283775","viewed":236,"name":"Panning and Tilting the Camera","username":"inspirnathan","description":"Examples on how to pan and tilt/rotate the camera. Learn more about how this all works in my tutorial: [url]https://inspirnathan.com/posts/55-shadertoy-tutorial-part-9/[/url]","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","camera","panning","pan","tilt","inspirnathan","tilting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visit my tutorial to learn how this works: https://inspirnathan.com/posts/55-shadertoy-tutorial-part-9\n// Click the center of the canvas to return the scene back to normal\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n    int id; // identifier for each surface/object\n};\n\n/*\nSurface IDs:\n1. Floor\n2. Box\n*/\n\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 transform)\n{\n  p = (p - offset) * transform;\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col, 2);\n}\n\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col, 1);\n}\n\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\nSurface sdScene(vec3 p) {\n  vec3 floorColor = vec3(.5 + 0.3*mod(floor(p.x) + floor(p.z), 2.0));\n  Surface co = sdFloor(p, floorColor);\n  co = minWithColor(co, sdBox(p, vec3(1), vec3(0, 0.5, -4), vec3(1, 0, 0), identity()));\n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n\n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouse = iMouse.xy / iResolution.xy - 0.5; // <-0.5,0.5>\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n  vec3 col = vec3(0);\n  \n  /*\n  ** Section 1 shows an example of tilting the camera with the mouse\n  ** Section 2 shows an example of panning the camera with the mouse\n  ** Comment out Section 1 and uncomment out section 2 if you want to see the panning example\n  */\n\n  // Start of Section 1 - Tilting\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n  rd *= rotateY(mouse.x) * rotateX(mouse.y); // apply yaw and pitch\n  // End of Section 1\n  \n\n  // Start of Section 2 - Panning\n  // vec3 ro = vec3(2. * mouse.x, 2. * mouse.y, 3); // pan camera with mouse\n  // vec3 rd = normalize(vec3(uv, -1)); // ray direction\n  // End of Section 2\n\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point on sphere or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n\n    // check material ID        \n    if( co.id == 1 ) // floor\n    {\n        col = co.col;\n    } else {\n      // lighting\n      vec3 lightPosition = vec3(2, 2, 7);\n      vec3 lightDirection = normalize(lightPosition - p);\n\n      // color\n      float dif = clamp(dot(normal, lightDirection), 0.3, 1.); // diffuse reflection\n      col = dif * co.col + backgroundColor * .2; // Add a bit of background color to the diffuse color\n    }\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}