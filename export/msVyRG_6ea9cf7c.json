{"ver":"0.1","info":{"id":"msVyRG","date":"1696267685","viewed":49,"name":"3D Perlin Noise all by me","username":"3TheHedgehogCoder3","description":"Just 3D Perlin Noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rand(vec3 p) {\n    float a = fract(sin(dot(p, vec3(12.9898, 78.233, 25.906))) * 43758.5453);\n    float b = fract(sin(dot(p, vec3(4.898, 7.23, 10.945))) * 23421.6312);\n    float c = fract(sin(dot(p, vec3(53.5253, 82.143, 28.971))) * 23421.6312);\n    return normalize(2.0 * vec3(a, b, c) - vec3(1));\n}\n\nfloat noise(vec3 p) {\n    vec3 cell = floor(p);\n    vec3 pos = fract(p);\n    vec3 v1 = rand(cell + vec3(0.0, 0.0, 0.0));\n    vec3 v2 = rand(cell + vec3(1.0, 0.0, 0.0));\n    vec3 v3 = rand(cell + vec3(0.0, 1.0, 0.0));\n    vec3 v4 = rand(cell + vec3(1.0, 1.0, 0.0));\n    vec3 v5 = rand(cell + vec3(0.0, 0.0, 1.0));\n    vec3 v6 = rand(cell + vec3(1.0, 0.0, 1.0));\n    vec3 v7 = rand(cell + vec3(0.0, 1.0, 1.0));\n    vec3 v8 = rand(cell + vec3(1.0, 1.0, 1.0));\n    float d1 = dot(v1, vec3(0, 0, 0) - pos);\n    float d2 = dot(v2, vec3(1, 0, 0) - pos);\n    float d3 = dot(v3, vec3(0, 1, 0) - pos);\n    float d4 = dot(v4, vec3(1, 1, 0) - pos);\n    float d5 = dot(v5, vec3(0, 0, 1) - pos);\n    float d6 = dot(v6, vec3(1, 0, 1) - pos);\n    float d7 = dot(v7, vec3(0, 1, 1) - pos);\n    float d8 = dot(v8, vec3(1, 1, 1) - pos);\n    pos = smoothstep(0.0, 1.0, pos);\n    float m1 = mix(d1, d2, pos.x);\n    float m2 = mix(d3, d4, pos.x);\n    float m3 = mix(m1, m2, pos.y);\n    float m4 = mix(d5, d6, pos.x);\n    float m5 = mix(d7, d8, pos.x);\n    float m6 = mix(m4, m5, pos.y);\n    float m7 = mix(m3, m6, pos.z);\n    return m7 * 1.15470053838;\n}\n\nfloat fbm(vec3 p, int octs) {\n    float scale = 1.0;\n    float mag = 0.0;\n    for (int i = 1; i < 50; i++) {\n        mag += noise(p * scale) / scale;\n        scale *= 2.0;\n        if (i == octs) {\n            return mag;\n        }\n    }\n    return mag;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float screenSize = float(min(iResolution.x, iResolution.y));\n    vec2 uv = fragCoord/screenSize;\n    vec3 col = vec3(fbm(vec3(3.0 * uv, iTime), 2));\n    col = col * 0.5 + 0.5;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}