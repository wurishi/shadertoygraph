{"ver":"0.1","info":{"id":"ll3yzr","date":"1531431222","viewed":142,"name":"Cellular Noise and Cell Size ","username":"JohanFlod","description":"building on top of example found here \n\nhttps://thebookofshaders.com/12/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distance","cells"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int NUM_POINTS = 3;\nconst float PI = 3.14159265;\nvec2 points[NUM_POINTS];\nprecision mediump float;\n\nfloat random( vec2 p )\n{\n\n    return fract(sin(dot(p,vec2(145.1,322323.7))*4.45678));\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(17.1,32.7)),dot(p,vec2(261.5,11.3))))*4.3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(.0);\n    st.x *= iResolution.x/iResolution.y;\n   \tst *= 4.;\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    //vec2 point = random2(i_st);\n    //vec2 diff = point - f_st;\n    //float dist = length(diff);\n    \n    float m_dist = 1.;\n    \n    for(int y= -1;y <= 1;y++) {\n        for ( int x= -1; x <= 4; x++){\n        \tvec2 neighbor_offset = vec2(float(x),float(y));\n            vec2 neighbor = i_st + neighbor_offset;\n        \tvec2 point = random2(neighbor);\n            point = 0.5+0.5*sin(iTime + point*2.*PI);\n            vec2 diff = neighbor_offset + point - f_st;\n            float dist = length(diff);\n            m_dist = min(m_dist,dist);\n            \n        \n        }\n    \n    }\n    \n   \n    \n    \n    // creating a larger grid system \n    vec2 i_st_x2 = floor(st*.5);\n    \n    // within each cell of the grid the cell size is random\n    float outline= fract(smoothstep(0.02,0.5*random(i_st_x2)+.25,m_dist));\n    \n\n    fragColor = vec4(vec3(1.-outline),1.0);\n\n}\n    \n    \n","name":"Image","description":"","type":"image"}]}