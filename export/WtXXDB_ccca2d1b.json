{"ver":"0.1","info":{"id":"WtXXDB","date":"1564028437","viewed":390,"name":"Cosmic Roulette","username":"rory618","description":"Using parameters from https://www.deviantart.com/prelkia/art/Cosmic-Roulette-148159773 this time, building up a library of standard xforms, referencing https://github.com/mwegner/chaotica-apophysis-plugins-from-jwildfire/releases/tag/JW.Plugin.Set.2019032","likes":19,"published":1,"flags":48,"usePreview":0,"tags":["3d","fractal","flame","particles","chaos","montecarlo","flam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n\tO = texture(iChannel2,I/R.xy);\n\tfloat Z = texture(iChannel1,vec2(I/R.xy)).z;\n\tif(texelFetch(iChannel0, ivec2(82,0),0).x<.5)\n    \tO = pow(O/Z*log(O.w)/log(Z)*4.,vec4(1.5));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\n#define branches 6\n#define mIters 25.\n\n#define pi 3.14159\n#define R iResolution\n#define iR ivec3(R)\n#define uR uvec3(R)\n#define IHash3(x,y,z) IHash(int(x)^IHash(int(y)^IHash(int(z))))\n#define dot2(o) dot((o),(o))\n#define tx(ch,p,R) texelFetch(ch, Zmod(p,iR.xy),0)\n\n//Roboust/universal integer modulus function\n#define Zmod(x,y) (((x)+(y)+(y)+(y))-(((x)+(y)+(y)+(y))/(y))*(y))\n//#define Zmod(x,y) ((x+y*10)%y)\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348593),\n                Hash(seed^0x8593D5));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\nvec2 randc(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(r.x);\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n\nstruct particle {\n    bool nil;\n    vec2 coord;\n    vec3 color;\n};\n    \nvec2 packParticle(particle p){\n    uvec2 px = uvec2(p.coord);\n    uvec3 c = uvec3(p.color * 7000. + 1000.);\n    uint n = uint(p.nil);\n    uint x = px.x & 0x7FFu;\n    uint y = px.y & 0x7FFu;\n    uint r = c.r & 0x1FFFu;\n    uint g = c.g & 0x1FFFu;\n    uint b = c.b & 0x1FFFu;\n    uint A = (b >> 9) | (g << 4) | (r << 17) | (n << 30);\n    uint B = (y) | (x << 11) | ((b & 0x1FFu) << 22);\n    return vec2(uintBitsToFloat(A),uintBitsToFloat(B));\n}\nparticle unpackParticle(vec2 p){\n    uint A = floatBitsToUint(p.x);\n    uint B = floatBitsToUint(p.y);\n    uint n = (A >> 30) & 0x1u;\n    uint r = (A >> 17) & 0x1FFFu;\n    uint g = (A >> 4) & 0x1FFFu;\n    uint b = ((B >> 22) & 0x1FFu) | ((A & 0xFu) << 9);\n    uint y = B & 0x7FFu;\n    uint x = (B >> 11) & 0x7FFu;\n    return particle(bool(n), vec2(x,y)+.5,(vec3(r,g,b)-1000.)/7000.);\n}\n\n#define mapping_iters 2\nvec2 forward_mapping(vec2 Z,vec3 R, int seed){\n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x + IHash(y^seed)%p,p);\n        y = Zmod(y + IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n    \n}\nvec2 reverse_mapping(vec2 Z,vec3 R, int seed){\n    \n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x - IHash(y^seed)%p,p);\n        y = Zmod(y - IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n}\n\nfloat score(particle p, vec2 I, vec3 R, int seed){\n    if(p.nil) return 1e6;\n    \n    vec2 Z = forward_mapping(p.coord, R, seed);\n    \n    vec2 D = Z-I;\n    D = mod(D+R.xy/2.,R.xy)-R.xy/2.;\n    return max(abs(D.x),abs(D.y));\n    \n}\n\n//Update ranking, save a list of two particle xy indices. O.xy is better particle, O.zw is a different not as good one\nvoid updateRank2x(particle n, inout vec4 O, inout float s0, inout float s1, vec2 I, vec3 R,int seed){\n    float sn = score(n,I,R,seed);\n    if(sn<s0){\n        //Shift down the line\n        s1=s0;\n        O.zw=O.xy;\n        s0=sn;\n        O.xy=packParticle(n);\n    } else if(sn<s1){\n        //Bump off the bottom one\n        s1=sn;\n        O.zw=packParticle(n);\n        \n    }\n}\n\n\nfloat scale = 100.;\nvec2 center =vec2(0, 0.097);\nfloat Sqrt1pm1(float x)\n\t{\n\t\tif (-0.0625 < x && x < 0.0625)\n\t\t{\n\t\t\tfloat num = 0.;\n\t\t\tfloat den = 0.;\n\t\t\tnum += 1.0 / 32.;\n\t\t\tden += 1.0 / 256.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 5.0 / 16.;\n\t\t\tden += 5.0 / 32.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 3.0 / 4.;\n\t\t\tden += 15.0 / 16.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 1.0 / 2.;\n\t\t\tden += 7.0 / 4.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tden += 1.;\n\t\t\treturn num / den;\n\t\t}\n\n\t\treturn sqrt(1. + x) - 1.;\n\t}\n\nvec3 Cylinder(vec3 x){\n    return vec3(sin(x.x),x.y,cos(x.x));\n}\nvec3 zcone(vec3 x){\n    return vec3(0,0,length(x.xy));\n}\nvec2 Elliptic(vec2 x){\n    vec2 o;\n    float x2 = 2.*x.x;\n    float l = dot(x,x);\n    float u = l + x2;\n    float v = l - x2;\n    float xmaxm1 = 0.5 * (Sqrt1pm1(u) + Sqrt1pm1(v));\n    float a = x.x / (1. + xmaxm1);\n    float ssx = xmaxm1 < 0. ? 0. : sqrt(xmaxm1);\n    o.x = clamp(a, -1., 1.);\n\tif (x.y > 0.)\n\t\to.y = log(1.+xmaxm1 + ssx);\n\telse\n\t\to.y = -log(1.+xmaxm1 + ssx);\n\n\treturn o;\n    \n}\n\nvec2 Bipolar(vec2 x, float m_S) {\n\t\tfloat x2y2 = dot(x,x);\n\t\tfloat t = x2y2 + 1.;\n\t\tfloat x2 = 2. * x.x;\n\t\tfloat y = 0.5 * atan(2. * x.y, x2y2 - 1.) + m_S;\n\n\t\tif (y > pi*2.)\n\t\t\ty = -pi*2. + mod(y + pi*2., pi*2.);\n\t\telse if (y < -pi*2.)\n\t\t\ty = pi*2. - mod(pi*2. - y, pi*2.);\n\n\t\tfloat f = t + x2;\n\t\tfloat g = t - x2;\n\n\t\tif ((g == 0.) || (f / g <= 0.))\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn vec2(pi/2. * log((t + x2) / (t - x2)), pi*2. * y);\n\t\t}\n\t}\n\nvec3 splits(vec3 x, vec2 m) {\n    vec3 o;\n    o.z=x.z;\n\t\tif (x.x >= 0.)\n\t\t\to.x = x.x + m.x;\n\t\telse\n\t\t\to.x = x.x - m.x;\n\n\t\tif (x.y >= 0.)\n\t\t\to.y = x.y + m.y;\n\t\telse\n\t\t\to.y = x.y - m.y;\n\n\treturn o;\n}\n\nvec3 Bubble(vec3 x){\n    float denom = 0.25 * dot(x.xy,x.xy) + 1.;\n    return vec3(x.xy/denom,2./(denom)-1.);\n}\nvec3 Spherical(vec3 x){\n    return vec3(x.xy/(1e-6+dot(x.xy,x.xy)),x.z);\n}\nvec3 Spherical3D(vec3 x){\n    return vec3(x/(1e-6+dot(x.xyz,x.xyz)));\n}\nvec3 Hyperbolic(vec3 x){\n    float a = atan(x.x, x.y);\n    float r = length(x.xy) + 1e-6;\n    return vec3(sin(a)/r,cos(a)*r,x.z);\n}\n/*\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}*/\n\nvec2 julia(vec2 x, int seed){\n    float a = atan(x.y, x.x)/2.0;\n    if(Hash(seed)>.5) a += 3.14159;\n    float r = pow(dot(x,x), 0.25);\n    return vec2(r*cos(a),r*sin(a));\n}\n\nvec3 Julia3D(vec3 x, int seed, float m_N){\n    float m_AbsN = abs(m_N);\n    float m_Cn = (1. / m_N - 1.) / 2.;\n\tfloat z = x.z / m_AbsN;\n\tfloat r = 1./pow(dot(x.xy,x.xy) + z*z, -m_Cn);\n\tfloat tmp = r * length(x.xy);\n\tfloat ang = (atan(x.x,x.y) + pi*2. * float(IHash(seed^0x6acb43d3 )%int(m_AbsN) ) ) / m_N;\n\treturn vec3(tmp * cos(ang),tmp * sin(ang),r * z);\n}\n\nint[] palette = int[] (\n0x220083,0x19007F,0x10007B,0x0F0077,0x0E0473,0x120A6E,0x120D6B,0x0E0F71,0x0A1076,0x06117B,0x06117C,0x07117E,0x0A0F80,0x0E0C82,0x130D7F,0x150A7F,0x0F0C7B,0x0D0F7B,0x0C137B,0x0B127C,0x0B127D,0x0E1279,0x101178,0x0D196B,0x0A226C,0x082C6D,0x073070,0x073474,0x07367B,0x093583,0x0B358B,0x09348D,0x093194,0x0A3295,0x0B3397,0x12329A,0x1B309A,0x222A9B,0x282398,0x271991,0x1F168E,0x18138B,0x16128A,0x151289,0x150F86,0x1D0B82,0x2B077D,0x370577,0x4B036B,0x4E0469,0x520568,0x510865,0x4E0C63,0x520F62,0x531662,0x642467,0x6C2B68,0x74326A,0x74316A,0x75316A,0x762E68,0x752E65,0x742C66,0x722C69,0x723176,0x722F79,0x722E7D,0x6F2981,0x6D2584,0x6F2185,0x712185,0x752A91,0x772D92,0x793094,0x783393,0x773292,0x742E92,0x712D93,0x6D3098,0x6531A1,0x5F31AA,0x5D2EA8,0x5C2CA7,0x56269E,0x501D96,0x491892,0x3E148E,0x2E1AA0,0x2C1CA4,0x2A1FA9,0x2826AF,0x2B2BB1,0x2F32B3,0x373DAE,0x404AAA,0x4D55A8,0x5B61A7,0x696BAA,0x7273AE,0x767AB7,0x7882BB,0x7C8ABE,0x7F8CBF,0x8191BC,0x7F8FBA,0x7E8EB9,0x7887BA,0x6A7FB9,0x5E78B6,0x536FB3,0x4A62B0,0x4456AB,0x414BA7,0x3F43A3,0x3A3CA2,0x3637A1,0x32359F,0x2D309F,0x28289E,0x23229F,0x201E9C,0x1B1E9C,0x1A219D,0x1A28A0,0x1B32A4,0x1B38A7,0x1A3DAE,0x1B3FB1,0x173EB0,0x133EAF,0x103BAD,0x0F3DAA,0x0E3DA4,0x0F3EA1,0x1240A1,0x193D9E,0x223C9B,0x293397,0x302B96,0x322391,0x331B89,0x2F1885,0x2A1382,0x291480,0x27127F,0x271081,0x240F84,0x220D84,0x1E0F81,0x170F7E,0x110D7A,0x0C0C70,0x090E6C,0x07156C,0x081A70,0x0D2274,0x142D78,0x1B327E,0x24347F,0x2B347F,0x30377D,0x33397C,0x323B7E,0x304280,0x2D4785,0x2D4C8A,0x2F4D91,0x305193,0x355593,0x365891,0x33548A,0x2E5083,0x284F7C,0x244B7B,0x214B7B,0x20497D,0x234E87,0x214C89,0x1F4B8B,0x18488C,0x11468E,0x0C448D,0x08428C,0x004290,0x024492,0x064695,0x104B97,0x1B519A,0x275495,0x345891,0x39578D,0x3F568A,0x565076,0x684F6E,0x7A4E66,0x874A61,0x94475D,0x9A455A,0xA14358,0xAB304A,0xAB2848,0xAC2047,0xA61D4F,0xA01A58,0x9C1A5D,0x981B62,0x96196C,0x921471,0x890A7E,0x850483,0x820088,0x74008E,0x660094,0x600195,0x5A0396,0x4A0B95,0x4E058E,0x530087,0x54007F,0x560078,0x530076,0x510074,0x47006E,0x3F0369,0x340F63,0x3F125D,0x4A1557,0x561253,0x62104F,0x670F4E,0x6C0E4D,0x6A104F,0x6A0E54,0x6A0D59,0x6A105D,0x6B1462,0x6B1463,0x6C1464,0x6E1569,0x6C1A6C,0x661E74,0x692173,0x6D2572,0x6E2570,0x6F266F,0x6D2570,0x692175,0x521C81,0x4D1980,0x481780,0x4A147A,0x4D1174,0x4D0D72,0x4E0971,0x4F0072,0x400079);\nint palette_count = 256;\nvec3 get_pallete(float f){\n    //f = fract(f+iMouse.x/R.x);\n    int a = int(f*float(palette_count));\n    int c0 = palette[a%palette_count];\n    int c1 = palette[(a+1)%palette_count];\n    vec3 rgb0 = vec3((c0>>16)&0xFF,(c0>>8)&0xFF,c0&0xFF)/255.;\n    vec3 rgb1 = vec3((c1>>16)&0xFF,(c1>>8)&0xFF,c1&0xFF)/255.;\n    return mix(rgb0,rgb1,fract(f*float(palette_count)));\n}\n\n\nfloat particles = 4e6;\n/*\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x34a513),\n                Hash(seed^0xf5d32b));\n}\n\n//Convert uniform random to normal\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}*/\n\n\n\nint getParticle(float id, vec3 R, int iFrame){\n    int seed = IHash(int(id))^IHash(int(iFrame));\n    return seed;\n}\n\n\n/*\nvec3 V0(vec3 x,int seed){return (x);}\nvec3 V1(vec3 x,int seed){return Hyperbolic(x)+vec3(0,0,15);}\nvec3 V2(vec3 x,int seed){return Cylinder(x)+vec3(0,0,-1);}\nvec3 V3(vec3 x,int seed){return 0.383*Bubble(x)+vec3(0,0,length(x))+vec3(0,0,15);}\n\nvec3 F0(vec3 x,int seed){\n    vec2 rnd = (floor(rand4(seed).zw*3.)-1.);\n    if(rnd==vec2(0)) rnd=vec2(1);\n    x.xy = mat2(0.728968, 0.684548, -0.684548, 0.728968) * x.xy  + vec2(2, 2)*rnd;\n    return \tV0(x,seed);\n}\nvec3 F1(vec3 x,int seed){\n    x.xy += randn(rand4(seed).zw)*0.00001;\n    x.xy = mat2(0.728968, 0.684548, -0.684548, 0.728968) * x.xy + vec2(0, 0);\n    return \tV1(x,seed);\n}\nvec3 F2(vec3 x,int seed){\n    x.xy = mat2(0.728968, 0.684548, -0.684548, 0.728968) * x.xy + vec2(0, 0);\n    return \tV2(x,seed);\n}\nvec3 F3(vec3 x,int seed){\n    x.xy = mat2(-0.571373, -0.536555, 0.536555, -0.571373) * x.xy + vec2(0, 0);\n    return \tV3(x,seed) + vec3(1,0,0);\n}\n\nvec3 FF(vec3 x,int seed){\n    return Julia3D(x,seed,-2.);\n    //return 2.*Bipolar(x*mat2(1, 0, 0, 1),0.);\n}\n*/\n\nvec3 V0(vec3 x){return Bubble(x);}\nvec3 V1(vec3 x){return Spherical3D(x);}\nvec3 V2(vec3 x){return 0.45*Cylinder(x);}\n\nvec3 F0(vec3 x,int seed){\n    return Spherical(x)*50.;\n}\nvec3 F1(vec3 x,int seed){\n    x.z += -0.4;\n    return \tJulia3D(x,seed,-2.);\n}\nvec3 F2(vec3 x,int seed){\n    return \tJulia3D(x,seed,-4.)*.25;\n}\nvec3 F3(vec3 x,int seed){\n    return \tJulia3D(x,seed,-50.)*.5;\n}\nvec3 F4(vec3 x,int seed){\n    x.xy += randn(rand2(seed))*0.6;\n    return x;\n}\nvec3 F5(vec3 x,int seed){\n    return x + vec3(-2,0,0);\n}\nvec3 F6(vec3 x,int seed){\n    return vec3((-0.6*x.xy)*mat2(0,-1,1,0),.6*x.z);// + vec2(-2,0);\n}\n\nvec3 FF(vec3 x,int seed){\n    return x+vec3(0,0,sqrt(max(0.,1.-dot(x.xy,x.xy))));\n    //return 2.*Bipolar(x*mat2(1, 0, 0, 1),0.);\n}\n/*\n\n<xform weight=\"0.9\" color=\"0.942307641496882\" symmetry=\"0.1\" spherical=\"50\" coefs=\"1 0 0 1 0 0\" />\n<xform weight=\"1\" color=\"0.478854787535965\" ztranslate=\"-0.4\" julia3D=\"1\" coefs=\"1 0 0 1 0 0\" julia3D_power=\"-2\" />\n<xform weight=\"1\" color=\"0.299102009506896\" symmetry=\"0.6\" julia3D=\"0.25\" coefs=\"1 0 0 1 0 0\" julia3D_power=\"-4\" />\n<xform weight=\"1\" color=\"0.501225656364113\" symmetry=\"0.9\" julia3D=\"0.5\" coefs=\"1 0 0 1 0 0\" julia3D_power=\"-50\" />\n<xform weight=\"0.2\" color=\"0.332931966288015\" symmetry=\"0.9\" blur=\"0.6\" coefs=\"1 0 0 1 0 0\" />\n<xform weight=\"5\" color=\"0.0259966740850359\" symmetry=\"0.9\" linear3D=\"1\" coefs=\"1 0 0 1 0 0\" post=\"1 0 0 1 -2 0\" />\n<xform weight=\"0.5\" color=\"0.430155847221613\" symmetry=\"0.98\" linear3D=\"0.6\" coefs=\"-1 0 0 -1 0 0\" post=\"0 1 -1 0 0 0\" />\n\n*/\nvoid iter(inout vec3 x, inout float col, inout int seed){\n    float def = 0.5;\n    float r = Hash(seed)*9.6;\n    seed=IHash(seed);\n    if(r<0.9){\n        col = mix(col,0.942307641496882,1.0-0.1);\n        x = F0(x,seed);\n    } else if (r<1.9){\n        col = mix(col,0.478854787535965,1.0-def);\n        x = (F1(x,seed));\n    } else if (r<2.9){\n        col = mix(col,0.299102009506896,1.0-0.6);\n        x = (F2(x,seed));\n    } else if (r<3.9){\n        col = mix(col,0.501225656364113,1.0-0.9);\n        x = F3(x,seed);\n    } else if (r<4.1){\n        col = mix(col,0.332931966288015,1.0-0.9);\n        x = F4(x,seed);\n    } else if (r<9.1){\n        col = mix(col,0.0259966740850359,1.0-0.9);\n        x = F5(x,seed);\n    } else {\n        col = mix(col,0.430155847221613,1.0-0.98);\n        x = F6(x,seed);\n    }\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec2 perspectiveTransform(vec3 x, int seed){\n    //x.z+=iMouse.x/iResolution.x-.5;\n    float cam_pitch=1.0471975511966-3.14159/2.;\n    float cam_yaw=3.14159/4.;//-3.14159/2.;\n    if(iMouse.x>0.){\n        cam_yaw = pi*2.*iMouse.x/iResolution.x;\n        cam_pitch = pi*2.*(iMouse.y/iResolution.y-.5);\n    }\n    //float cam_perspective=0.1505;\n    vec3 forward = normalize(vec3(cos(cam_pitch)*cos(cam_yaw),cos(cam_pitch)*sin(cam_yaw),sin(cam_pitch)));\n    vec3 right = normalize(cross(forward,vec3(0,0,-1)));\n    vec3 up = cross(right,forward);\n    vec3 c0 = vec3(0,0,0);\n    float a = dot(x-c0,forward);\n    float b = dot(x-c0,-right);\n    float c = dot(x-c0,up);\n    return 25.*(vec2(b,c)-.2*center)+randc(rand2(seed))*a*0.0;///cam_perspective ;\n}\n\n//Particle buffer\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec3 col;// = texture(iChannel0, I/R.xy).xyz*.01+.5;\n    vec2 coord;\n    \n    int seed = int(iMouse.x);\n\n    int seed2 = int(I.x + I.y*2000.)+iFrame*4000000;\n    coord = rand2(seed2)*R.xy;\n    vec4 t = texture(iChannel3,I/R.xy);\n    \n    coord = (.04*R.y*(perspectiveTransform(t.xyz,seed2))*vec2(1,-1)+.5*R.xy);\n    coord += rand2(IHash(seed2))-.5;\n    col = get_pallete(t.w);\n    particle p = particle(!(coord.x>0.&&coord.x<R.x&&coord.y>0.&&coord.y<R.y), coord, col);\n    O.xy = packParticle(p);\n    O.z = max(texture(iChannel0, I/R.xy).z,max(texture(iChannel0, rand2(seed2)).z,texture(iChannel2, rand2(seed2)).w));\n\tif(texelFetch(iChannel1, ivec2(82,0),0).x>.5) O.z*=0.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    //Split frames into 8 stages\n    int stage = iFrame%8;\n    int seed = iFrame/8;\n    int size = int(.5+pow(2.45,float(7-stage)));\n    \n    \n    float s0;\n    float s1;\n    //init with top left corner and center\n    if(stage==0){\n        vec2 u0 = tx(iChannel0, ivec2(I)-size,R).xy;\n        vec2 u1 = tx(iChannel0, ivec2(I),R).xy;\n        particle p0 = unpackParticle(u0);\n        particle p1 = unpackParticle(u1);\n                                                                         \n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n        \n        O.xy=u0;\n        O.zw=u1;\n        \n        //Select the better one, make sure scores are in order with s0<s1\n        if(s0>s1){\n            vec2 _ = O.xy;\n            O.xy = O.zw;\n            O.zw = _;\n            _.x = s0;\n            s0 = s1;\n            s1 = _.x;\n        }\n    } else {\n        O = tx(iChannel1, ivec2(I)-size,R );\n        particle p0 = unpackParticle(O.xy);\n        particle p1 = unpackParticle(O.zw);\n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n    }\n    for(int i = 1; i < 9; i++){\n        if(stage==0){\n        \tvec2 u = tx(iChannel0,ivec2(I)-size+size*ivec2(i/3,i%3),R).xy;\n            particle p = unpackParticle(u);\n            updateRank2x(p,O,s0,s1,I,R,seed);\n            \n        } else {\n        \tvec4 t;\n            vec4 u = tx(iChannel1,ivec2(I)-size+size*ivec2(i/3,i%3),R); \n            particle p0 = unpackParticle(u.xy);\n            particle p1 = unpackParticle(u.zw);\n            updateRank2x(p0,O,s0,s1,I,R,seed);\n            updateRank2x(p1,O,s0,s1,I,R,seed);\n        }\n        \n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void splat(inout vec4 O, vec2 I, particle p){\n    if(floor(I) == floor(p.coord) && !p.nil){\n        O += vec4(p.color,1); \n    }\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\n    O = vec4(0);\n    int seed = iFrame/8;\n    \n    if(iFrame%8==7){\n            vec2 ip = forward_mapping(I,R,seed);\n            vec4 t = texelFetch(iChannel0,ivec2(ip),0);\n            \n\n            splat(O,I,unpackParticle(t.xy));\n            splat(O,I,unpackParticle(t.zw));\n        O += texture(iChannel2,I/R.xy);\n    } else {\n        O = texture(iChannel2,I/R.xy);\n    }\n    O += vec4(0,0,0.,1)/100.;\n    if(iFrame%8==6&&texelFetch(iChannel1, ivec2(82,0),0).x>.5) O*=0.;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    int seed2 = int(I.x + I.y*2000.)+iFrame*4002400;\n    \n    O = texture(iChannel3, rand2(seed2));\n    \n    if(Hash(seed2)<.001){\n        O = vec4(10.*randn(rand2(seed2)),0,0);\n    } else {\n        iter(O.xyz,O.w,seed2);\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}