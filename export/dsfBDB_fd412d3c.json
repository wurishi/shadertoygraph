{"ver":"0.1","info":{"id":"dsfBDB","date":"1689121855","viewed":52,"name":"Repeating Laser Spirals 2.0","username":"Wheat","description":"The colors are better now","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Colorful Glowing Spinning Spiral\" by Wheat. https://shadertoy.com/view/mdXBDB\n// 2023-07-12 00:21:57\n\n// Fork of \"Glowing Spinning Spiral\" by Wheat. https://shadertoy.com/view/mdXfWB\n// 2023-07-11 23:58:55\n\n// Fork of \"Spinning Spiral\" by Wheat. https://shadertoy.com/view/msfBWB\n// 2023-07-11 23:47:00\n\n// Fork of \"Shrinking Circles 2\" by Wheat. https://shadertoy.com/view/msffDS\n// 2023-07-11 23:10:32\n\n// cosine based palette. from Inigo Quilez\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(.5,.2,.25);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set scale; sizes to y resolution\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Color variation by location in frame & time\n    vec3 col = palette(length(uv)/7. + iTime/15.0\n        + uv.x*uv.y/10.0);\n    \n    \n    // makes the screen repeat\n    uv *= 2.0;\n    uv = fract(uv) - 0.5;\n    \n    // color variation by location in individual spiral\n    col *= palette(length(uv)/2.0);\n\n    // find points a certain distance from circle w/ .5 radius\n        // float d = lengt h(uv);\n        // d = sin(d * 8.0 + iTime) / 8.0;\n        // d = abs(d);\n        \n    // make a spiral (angle from x-axis: atan(y/x))\n    float tightness = 1.6;\n    float speed = .6;\n    float sufficientlyLargeFloat = 100000.;\n    float numPins = 8.0; // keep even\n    float thickness = 75.0 * smoothstep(-0.5,1.0,length(uv));\n    // makes distance from center, angle from x-axis,\n    // and time factors\n    float d = length(uv)\n        + atan(uv.y / uv.x) / tightness\n        + iTime * speed\n        + sufficientlyLargeFloat;\n    // d = abs(d);\n    // makes it repeat\n    d = sin(d*numPins)/thickness;\n    d = abs(d);\n    \n    d = .015/d;\n    \n    col *= d;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}