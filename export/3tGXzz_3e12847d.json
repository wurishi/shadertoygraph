{"ver":"0.1","info":{"id":"3tGXzz","date":"1582034529","viewed":277,"name":"visualizing 3d noise","username":"aodnawg","description":"refs:\n\n- https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n- https://qiita.com/gaziya5/items/e36578f9281e9bd0d22a\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 5; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid makeRoRd(in vec2 uv, out vec3 ro, out vec3 rd) {\n    ro = vec3(0,0,-5);\n    vec2 mou = (iMouse.xy/iResolution.xy-.5) * 10.;\n    vec3 lookat = vec3(mou,0);\n    vec3 f = normalize(lookat-ro);\n    float z = 1.;\n    vec3 c = ro+f*z;\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    vec3 i = c + uv.x * r + uv.y * u;\n    rd = normalize(i-ro);\n}\n\nmat2 rot (float a) {\n    return mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n    );\n}\n\nfloat getDist(in vec3 p) {\n    p.xz *= rot(iTime*.1);\n    float wave = sin(iTime)*.05;\n    return length(fbm(p)-.15 + wave)-.1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(1.);\n\n    vec3 ro,rd;\n    makeRoRd(uv, ro, rd);\n    col = rd;\n\n    float t=0., step=0.;\n    vec3 hitPos;\n    for(int i=0; i<=100; i++) {\n        vec3 p = ro+rd*t;\n        float dS = getDist(p);\n\n        if(dS<0.01) {\n            hitPos = p;\n            col.r = 1.;\n            break;\n        }\n        if(t>100.) break;\n        t += dS;\n        step += 1./100.;\n    }\n\n    float m = pow(step, 2.0);\n\n    col.rgb = vec3(m);\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}