{"ver":"0.1","info":{"id":"NssSzn","date":"1620552185","viewed":35,"name":"smooth noise animation","username":"RiceFields","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand (float x) {\n    return fract(sin(x)*1e4);\n}\n\nfloat noise(float x) {\n  float i = floor(x);\n  float f = fract(x);\n  float u = f * f * (3.0 - 2.0 * f ); // cubic function for smoothstep\n  return mix(rand(i), rand(i + 1.0), u);\n}\n\nvec3 cog1(float a, float r) {\n    float f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;\n    return vec3(1.0f - smoothstep(f, f+0.02, r));\n}\n\nvec2 rotate2d(vec2 uv, float angle) {\n    mat2 mat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); \n    return 0.5f + (mat*(uv-0.5f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    uv = rotate2d(uv, noise(uv.y + iTime)); // smmoth \n    \n    uv += (1.0f - noise(iTime))*0.2f; // smooth translation\n    \n    uv -= 0.5f;\n    \n    float r = length(uv)*cos(noise(uv.x + iTime))*5.0f; // smooth zoom\n    float a = atan(uv.y, uv.x);\n\n    vec3 col = cog1(a, r);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}