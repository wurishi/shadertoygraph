{"ver":"0.1","info":{"id":"mts3Wn","date":"1671736862","viewed":115,"name":"hexagonal truchet uv","username":"VL","description":".","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define int2 vec2\n#define float2 vec2\n#define int3 vec3\n#define float3 vec3\n#define int4 vec4\n#define float4 vec4\n#define frac fract\n#define float2x2 mat2\n#define float3x3 mat3\n#define float4x4 mat4\n#define saturate(x) clamp(x,0.,1.)\n#define lerp mix\n#define sincos(x,s,c) s = sin(x),c = cos(x)\n#define mul(x,y) (x*y)\n#define atan2 atan\n#define fmod mod\n\nconst float InvPI = 0.318309886f;\nconst float PId2 = 1.57079632f;\nconst float PI = 3.141592653f;\nconst float PI2 = 6.2831853f;\nconst float MaxDist = 100.f;\nconst float SurfaceDist = 0.0001f;\nconst float FloatMax = 3.402823466e+38F;\n\nfloat2 hash(float2 p)\n{\n    float3 p3 = frac(float3(p.xyx) * float3(164.1031, 114.1030, 177.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return frac((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat3 hash(float3 p3)\n{\n    p3 = frac(p3 * float3(164.1031, 157.1030, 164.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return frac((p3.xxy + p3.yxx) * p3.zyx);\n}\nfloat minkowskiLength(float2 v, float p)\n{\n    v = abs(v);\n    return pow(pow(v.x,p)+pow(v.y,p), 1.f / p);\n}\n\nfloat sdf2dHexagon(float2 p)\n{\n    p = abs(p);\n    return max(dot(p, float2(1.f, sqrt(3.f))/2.f), p.x);\n}\n\nfloat3 hexTruchet(float2 p, float thickness, float flow)\n{\n    const float2 k = float2(1.f, sqrt(3.f));\n    \n    float2 pk = p/k;\n    float2 aIdx = floor(pk);\n    float2 a = (pk - aIdx)*k - k*0.5;\n    \n    pk = (p - k*0.5)/k;\n    float2 bIdx = floor(pk);\n    float2 b = (pk - bIdx)*k - k*0.5;\n    \n    float2 hexUV = dot(a,a) < dot(b,b) ? a : b;\n    float2 hexIdx = dot(a,a) < dot(b,b) ? aIdx : (bIdx + 0.5);\n    float2 rand = hash(hexIdx);\n    \n    bool flip =  rand.x > 0.5;\n    hexUV.y = flip ? hexUV.y : -hexUV.y;\n    \n    float len = length(hexUV);\n    float angle = fmod(atan2(hexUV.y, hexUV.x) - PI/6.f, PI2/3.f);\n\n    float s, c;\n    sincos(angle,s,c);\n    hexUV = float2(c,s) * len * k.y;\n    hexUV -= k*0.5;\n    float at = atan2(hexUV.y, hexUV.x);\n    float u = at - flow;\n    \n    len = length(hexUV)-0.5;\n    float hT = thickness*0.5;\n    float v = clamp(len,-hT,hT)+hT;\n    v = (flip ? v :-v)/thickness;\n     \n    return float3(frac(u/(PI2/3.f)), v, smoothstep(0.01,0., abs(len)-hT));\n}\n\nfloat3 tex(float2 uv)\n{\n    return texture(iChannel0, uv*float2(0.3,1.f)).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord)/iResolution.y*2.2+iTime*0.1;    \n    \n    float3 hex1 = hexTruchet(uv, 0.5,iTime);\n    vec3 col = vec3(tex(hex1.xy)*hex1.z);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}