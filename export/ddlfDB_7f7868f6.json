{"ver":"0.1","info":{"id":"ddlfDB","date":"1689152414","viewed":45,"name":"Simple Recursive Fractal","username":"Ore0","description":"New to shader writing - Simple Recursive Fractal rendering","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,0.7,0.4);\n    vec3 d = vec3(0.0,0.15,0.20);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y; \n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColour = vec3(-1);\n\n    float radius = 0.5;\n    vec2 mouseDist = uv - mouse;\n\n    for(int i = 0; i < 2; i++){\n        vec3 col = palette(length(uv0) + 0.5 * iTime);\n        // This scales the space, meaning that next iterations are smaller\n        mouseDist = fract(mouseDist * 2.0) - 0.5;\n\n        // White circle at mouse position\n        float dist = sdCircle(mouseDist, radius);\n        dist = radius * sin(dist * 5.0 + iTime * 1.0);\n        dist = abs(dist);\n        dist = 0.05 / dist;\n\n        finalColour += 1.0 * col * dist;\n    }\n\n    // Display the circle\n    fragColor = vec4(finalColour,1.0);\n}","name":"Image","description":"","type":"image"}]}