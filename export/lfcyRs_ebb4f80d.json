{"ver":"0.1","info":{"id":"lfcyRs","date":"1731019589","viewed":44,"name":"SDF -  Chamfered Box 2D","username":"JohnKaz","description":"Based on https://www.shadertoy.com/view/3ltSW2 by iq\n\nChamfered Box 2D\n\nan attempt to figure out https://www.shadertoy.com/view/ftG3Dw on my own.\nOptimizing this would probably result in what TheTurk came up with.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","union"],"hasliked":0,"parentid":"dsSfR3","parentname":"SDF -  Round Inset"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2024 João Desager\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// chamfered box 2D\n\n// SDF primitives taken from:\n// and iquilezles.org/articles/distfunctions2d\n\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat segment( in vec2 p, in vec2 w, in vec2 q)\n{\n    vec2 pq = p-q, wq = w-q;\n    float h = clamp( dot(pq,wq)/dot(wq,wq), 0.0, 1.0 );\n    float seg_dist = length( pq - wq*h );\n    \n    return seg_dist;\n}\n\n\n// old version\nfloat sdBoxChamf( in vec2 p, in vec2 b, in float r )\n{\n\n    p = abs(p);\n    \n    float flip2 = max(sign(p.y-b.y), sign(p.x-b.x));\n    \n    vec2 t = p;\n    t -= b;\n    t = clamp(p, 0.0, 20.0);\n    \n    float offset = min(b.x, b.y);\n    if (b.x > b.y)\n        offset = max(b.x, b.y);\n        \n    float flip = sign((t.x+t.y)-(r+offset) );\n    flip = max(flip, flip2);\n    \n\n    // reflection would probably be cheaper than 3 line segments\n    vec2 m = vec2(0.0, b.y);\n    vec2 o = vec2(b.x, 0.0);\n    \n    vec2 w = vec2(b.x-r, b.y);\n    vec2 q = vec2(b.x, b.y-r);\n    \n    float chamf = segment(p, w, q);\n    float chamf2 = segment(p, o, q);\n    float chamf3 = segment(p, m, w);\n    \n    return flip*min(min(chamf, chamf2), chamf3);\n}\n\n\nfloat sdBoxChamf2( in vec2 p, in vec2 b, in float r)\n{\n    r = min(r, min(b.x, b.y));\n    p = abs(p)-b;\n        \n    float seg_sign = sign( min((p.x+p.y), min(p.x, p.y))+r );\n    vec2 w = vec2(-r, 0.0);\n    vec2 q = vec2(0.0, -r);\n    float segment = seg_sign*segment(p, w, q);\n    float box = max(p.y, p.x);\n\n    return max(segment, box);\n}\n\nfloat sdBoxChamf2Rounded(in vec2 p, in vec2 b, in float r, in float bevelr)\n{\n    return sdBoxChamf2(p, b-bevelr, r)-bevelr;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    vec2 pos = p;\n    \n    float sinetime =(0.5+0.5*sin(iTime));\n    float bx = sinetime*0.8;\n    float rx = sinetime*0.4;\n\n    //float d = sdBoxChamf2Rounded( pos, vec2(0.8, 0.4), 0.2, rx);\n    float d = sdBoxChamf2( pos, vec2(bx, 0.4), 0.2);\n\n\t// coloring, iq style\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    pos = m;\n\tfloat d = sdBoxChamf2( pos, vec2(bx, 0.4), 0.2);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}