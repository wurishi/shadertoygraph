{"ver":"0.1","info":{"id":"3l33DN","date":"1576297899","viewed":376,"name":"noisy sphere","username":"aodnawg","description":"noisy sphere","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float N11(float n ) {\n    return fract(sin(n * 314.21)*521.53);\n}\n\nfloat N21(vec2 n) {\n\treturn N11(n.y+N11(n.x));\n}\nfloat N31(vec3 n) {\n\treturn N11(n.z+N11(n.y+N11(n.x)));\n}\nfloat ease(float n){\n\treturn n*n*(3.-2.*n);\n}\nfloat smoothNoise(vec2 uv, float z) {\n    vec2 gv = fract(uv * z);\n    vec2 id = floor(uv * z);\n    \n    float tl = N21(id);\n    float tr = N21(id+vec2(1., 0.));\n    float bl = N21(id+vec2(0., 1.));\n    float br = N21(id+vec2(1., 1.));\n    return mix(mix(tl, tr, ease(gv.x)), mix(bl, br, ease(gv.x)), ease(gv.y));\n}\nfloat smoothNoise(vec3 xyz, float z) {\n    vec3 gv = fract(xyz * z);\n    vec3 id = floor(xyz * z);\n    \n    float ftl = N31(id);\n    float ftr = N31(id+vec3(1., 0., 0.));\n    float fbl = N31(id+vec3(0., 1., 0.));\n    float fbr = N31(id+vec3(1., 1., 0.));\n    float front = mix(mix(ftl, ftr, ease(gv.x)), mix(fbl, fbr, ease(gv.x)), ease(gv.y));\n    \n    float rtl = N31(id+vec3(0., 0., 1.));\n    float rtr = N31(id+vec3(1., 0., 1.));\n    float rbl = N31(id+vec3(0., 1., 1.));\n    float rbr = N31(id+vec3(1., 1., 1.));\n    float rear = mix(mix(rtl, rtr, ease(gv.x)), mix(rbl, rbr, ease(gv.x)), ease(gv.y));\n    \n    return mix(front, rear, ease(gv.z));\n}\nfloat noisySphere(vec2 uv, float t) {\n    float m = 0.;\n    float noise = smoothNoise(vec3(uv,  t),5.);\n    float s = .7;\n    float a = mix(s*-1., s, noise) *.5 + 1.; \n    uv *= vec2(a);\n    m = distance(vec2(.0), uv);\n    m = smoothstep(.30, .29, m) - smoothstep(.29, .28, m);\n\treturn m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(.5);\n    uv.x /= iResolution.y/iResolution.x;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    float m = 0.;\n    float z = 10.;\n\n    for(float i = 0.; i<=1.; i+=1./256.) {\n    \tm += noisySphere(uv, i + iTime * .1) * .025;\n    }\n    // m = noisySphere(uv, .1);\n    col = vec3(m);\n    \n    // apply color\n    col = pow(min(vec3(.9, 1, 1.2)*m, 1.), vec3(4, 3, 12));\n    \n    // col.rb = suv;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}