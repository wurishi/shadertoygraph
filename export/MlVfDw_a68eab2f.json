{"ver":"0.1","info":{"id":"MlVfDw","date":"1542816726","viewed":79,"name":"beginner Mandelbrot set attempt","username":"briagd","description":"a beginner Mandelbrot set attempt","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsvToRgb(float h, float s, float v){\n    vec3 col = vec3(0.); \n\t\n    float c = v*s;\n    float h2 = h *6.;\n    float x = c * (1. - abs(mod(h2,2.)-1.));\n    if (h2>=0. && h2<=1.){\n        col = vec3(c,x,0.);\n            } else if (h2<=2.){\n        col = vec3(x,c,0.);\n    } else if (h2<=3.){\n        col = vec3(0.,c,x);\n    }else if (h2<=4.){\n        col = vec3(0.,x,c);\n    }else if (h2<=5.){\n        col = vec3(x,0.,c);\n    }else if (h2<=6.){\n        col = vec3(c,0.,x);\n    } \n\treturn col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t \n    //uv.x = uv.x*3. - 2.;\n    //uv.y = uv.y*2. - 1.;\n    \t\n\t\tfloat width = .0001*(1.2+sin(iTime/3.));\n    \tfloat colorFactor = 250.*(1.2+sin(iTime/4.));\t\n    \tfloat xcenter = -0.761574;\n    \tfloat ycenter = - 0.0847596;\n    \tuv.x = uv.x*width - (width/2. - xcenter);\n    \t//-0.761574,-0.0847596\n    \tuv.y = uv.y *width - (width/2. - ycenter) ;\n\n    vec2 zn = vec2(0.,0.);\n    \n    float maxiterations = 10000.;\n    float iteration = 0.;\n        \n    while (dot(zn,zn)<4. && iteration<maxiterations)\n    {\n     \tzn = vec2(zn.x*zn.x-zn.y*zn.y,2.*zn.x*zn.y)+uv;\n        iteration += 1.;\n        \n    }\n    \n    vec3 color = vec3(0.);\n    \n    if (iteration < maxiterations){\n        float log_zn = log( dot(zn,zn) ) / 2.;\n    \tfloat nu = log( log_zn / log(2.) ) / log(2.);\n    \titeration = iteration + 3. - nu;\n        //float h = mix(1.-colorFactor*floor(iteration)/maxiterations,1.-colorFactor*(floor(iteration)+1.)/maxiterations,\n               //       fract(iteration));\n        //float h = 1.-colorFactor*iteration/maxiterations;\n        float h1 = 2.-colorFactor*floor(iteration)/maxiterations;\n        float h2 = 2.-colorFactor*(floor(iteration)+1.)/maxiterations;\n        float s = .9;\n        \n        float l =  1.;\n        vec3 color1 = hsvToRgb(h1,s,l);\n        vec3 color2 = hsvToRgb(h2,s,l);\n        color = mix(color1,color2,fract(iteration));\n        //color = hsvToRgb(h,s,l);\n    }\n\n    // Output to screen\n   \tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}