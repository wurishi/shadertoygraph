{"ver":"0.1","info":{"id":"Xt2fz1","date":"1514608500","viewed":320,"name":"Bit Stream","username":"Passion","description":"bit flow","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["grid","raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// reference https://thebookofshaders.com/10/\n\n#define NUM_SAMPLES 64\n#define EPS 0.001\n#define MAX_DIST 30.0\n#define reflections 1\n#define applyCurve 1\n\n#define rnd(p) fract(sin(dot(p,vec2(4313.2342,1234.431)))*4245.4235)\n\nmat2 r2(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s,c,-c,s);\n}\n\nvec3 camPath(float t){\n    float a = sin(t*3.14159265/16. + 1.5707963*1.);\n    float b = cos(t*3.14159265/16.);\n    vec3 path = vec3((t)+a*2., b*a, t);\n    return path;    \n}\n\nfloat random (in float x) {\n    return fract(sin(x)*1e4);\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat pattern(vec2 st, vec2 v, float t) {\n    vec2 p = floor(st+v);\n    return step(t, random(100.+p*.000001)+random(p.x)*0.5 );\n}\n\nfloat map(vec3 p){    \n    const float depth = .1; \n    p.xy -= camPath(p.z).xy;\n    \n    float dsp = sin(p.x*8.)* sin(p.y*8.)* sin(p.z*8.);\n    float tun = (.5 ) - length(max(abs(p.xy)-4.0,0.0));     \n    return tun;\n    \n}\n\n\nfloat trace(vec3 o, vec3 r){\n    float t = 0.0;\n    for(int i = 0; i < NUM_SAMPLES; i++){\n        vec3 p = o + r * t;\n        float d = map(p);\n        if(abs(d) < EPS || t > MAX_DIST) break;\n        t += d * 0.75;\n    }\n    return t;\n}\n\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.0, 0.001);\n    return normalize((vec3(map(p+e.xxy), map(p+e.xyx), map(p+e.yxx)) - map(p)) / e.y);\n}\n\nvec4 strpPattern(vec3 sp){\n    vec2 grid = vec2(50.0,50.)*.15;\n    \n    vec2 st = sp.xy * grid;\n    st -= camPath(sp.z).xy;\n\n    vec2 ipos = floor(st);  // integer\n    vec2 fpos = fract(st);  // fraction\n\n    vec2 vel = vec2((sin(iTime*4.)*20.)+iTime*25.*max(grid.x,grid.y))/2.; // time\n    vel *= vec2(1.,0.0) * random(1.0+ipos.y); // direction\n\n    // Assign a random value base on the integer coord\n    vec2 offset = vec2(0.1,0.);\n\n    float bitScale = iResolution.x / 2.;\n    if(iMouse.z > 0.1)\n        bitScale = iMouse.x;\n    \n    vec3 color = vec3(0.);\n    color.r = pattern(st+offset,vel,0.5+bitScale/iResolution.x);\n    color.g = pattern(st,vel,0.5+bitScale/iResolution.x);\n    color.b = pattern(st-offset,vel,0.5+bitScale/iResolution.x);\n\n    // Margins\n    color *= step(0.2,fpos.y);\n\n    return  vec4(color,1.0);\n}\nvec4 chkrPattern(vec3 sp){\n    float t = iTime*2.-sin(iTime)*400.;\n\t\n    vec2 u = sp.xz;\n    vec2 f = vec2(0.0);\n    f = smoothstep(0.,1.5,abs(fract(u-.5)-.5)/fwidth(u));\n        u.x = rnd( floor(u)-t/5e6 ); \n    vec4 O = vec4(0.0);\n    O = f.x*f.y* ( cos(u.x*vec4(1,2,3,0)) -floor(u*1.5).x );\n\treturn O;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * .33));\n    r.xz *= r2(1.-sin(iTime)*.5+cos(iTime/3.));\n    vec3 o = camPath(iTime*5.3);\n    o.y -= 3.0*sin(iTime);\n    //o.x-=.5;\n    r.xy*=r2(o.x*.01);\n    \n    float hit = trace(o, r);\n    vec3 sp = o + r * hit;\n    float d = map(sp);\n    float fog = smoothstep(-.05, .7, hit*.03);\n    vec3 n = norm(sp);\n    \n    float diffuse = clamp(dot(vec3(1.), n), 0.15, 1.0);\n    vec3 incdnt = refract(r, n, 1.0 / 1.33);\n    vec4 tc = texture(iChannel0, incdnt)*3.;\n    \n    vec3 tsp = sp;\n    tc = reflections < 1 ? vec4(1.0) : tc;\n    tsp.xy = applyCurve < 1 ? sp.xy : sp.xy - camPath(sp.z).xy;\n    \n    \n    if(abs(d) < .5){    //vec4(.2)+\n        fragColor = vec4(mix(tc*strpPattern(tsp*vec3(1, 1, 2)), vec4(0.0), fog));\n        if(abs(dot(n, vec3(0.0,1.0,0.0))) > .9)\n            fragColor=mix(tc*chkrPattern(sp), vec4(0.0), fog);\n    }\n    else\n        fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"}]}