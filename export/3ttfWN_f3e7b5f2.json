{"ver":"0.1","info":{"id":"3ttfWN","date":"1612767023","viewed":58,"name":"Genuary 2021 – 08 – Inter (B)","username":"endymion","description":"Genuary 2021 – 08 – Interference Patterns (B)\n\nMore dynamic version of https://www.shadertoy.com/view/tlcBW4.\n\nTry changing the number of CIRCLES.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["trippy","interferencepatterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**\n * Constants\n */\n#define PI 3.14159265359\n\n#define CIRCLES 5\n\n/**\n * Pseudo-random based on sine with float input\n * @src https://thebookofshaders.com/10/\n * @param seed {float}\n * @return {float}\n */\nfloat random(float seed) {\n    return fract(sin(seed)*1e4);\n}\n\n/**\n * Map range to new range\n */\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n/**\n * Simplex noise\n * @src https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n */\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return map(130.0 * dot(m, g), -1., 1., 0., 1.);\n}\n\n/** \n * Circle distance function\n * @src https://iquilezles.org/articles/distfunctions2d\n */\nfloat sdCircle(in vec2 point, in vec2 center, in float radius) {\n    return distance(point, center) / radius;\n}\n \n/**\n * HSB to RGB\n * All components are in the range [0…1], including hue.\n * @src https://stackoverflow.com/a/17897228\n */\nvec3 hsb2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/** \n * Get color hues\n */\nfloat getHues(in vec2 point, in vec3[CIRCLES] c) {\n    float hue;\n\n    float[CIRCLES] hues;\n    for (int i = 0; i < CIRCLES; i++) {\n        float r = random(float(i));\n        hues[i] = (0.25 + r * 0.75) + 0.125 * cos(iTime * (0.05 + r * 0.05));\n    }\n    \n    for (int i = 0; i < CIRCLES; i++) {\n        if (i == 0) hue = hues[i];\n        else {\n            float distA = distance(point, c[i - 1].xy);\n            float distB = distance(point, c[i].xy);\n            \n            float dist;\n            dist = distA / (distB + distA);\n            hue = mix(hue, hues[i], dist);\n        }\n    }\n    \n    return hue;\n}\n\n/**\n * Get circle centers, xy is center point, z is distance field\n */\nvec3[CIRCLES] circles(in vec2 point) {\n    vec3[CIRCLES] centers; \n    for (int i = 0; i < CIRCLES; i++) {\n        float t = float(i);\n        float rand = random(t);\n        vec2 center = vec2(\n            snoise(vec2(20., 2000. * t) + vec2(0.25, 2.5) * iTime * (.008 + rand * 0.025)),\n            snoise(vec2(2000. * t, 20.) + vec2(1.75, 0.5) * iTime * (.0015 + rand * 0.025))\n        );\n        centers[i] = vec3(\n            center, \n            sdCircle(point, center, 0.375 * rand + (0.25 + rand * 0.125) * sin(iTime * (0.025 + 0.0125 * rand)))\n        );\n    }\n    return centers;\n}\n\n/**\n * @main\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3[CIRCLES] c = circles(uv);\n    float dist = 0.;\n    for (int i = 0; i < CIRCLES; i++) {\n        dist += fract(c[i].z);\n    }\n    if (CIRCLES > 2) dist /= float(CIRCLES - 1);\n    \n    float pattern = smoothstep(0.2, 0.9, dist);\n    float pixelNoise = snoise(uv * 300.);\n    \n    float hue = getHues(uv, c);\n    fragColor = vec4(hsb2rgb(vec3(\n        hue + pattern * .15,\n        0.5,\n        1. - pixelNoise * 0.05\n    )), 1.0);\n}","name":"Image","description":"","type":"image"}]}