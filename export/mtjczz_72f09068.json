{"ver":"0.1","info":{"id":"mtjczz","date":"1691443329","viewed":99,"name":"Transformations of normals","username":"Envy24","description":"See Imge tab header.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["normal","inverse","transpose","transrotmation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Source: https://stackoverflow.com/questions/13654401/why-transform-normals-with-the-transpose-of-the-inverse-of-the-modelview-matrix\n// Description:\n//   Left - before transformation,\n//   Right - after transformation.\n//   Hold LMB to see correct normals.\n// Example of how to use this with raytracing: https://www.shadertoy.com/view/mtXyDS\n#define SCENE_SCALE               ( 2.3 )\n#define UNIT                      ( (SCENE_SCALE*4.0) / iResolution.y  )\n#define SMAA(d)                   ( smoothstep(UNIT, 0., d) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\nmat2 scale(vec2 s)\n{\n    mat2 M = mat2(\n        s.x,   0,\n          0, s.y);\n    return M;\n}\nmat2 rotz(float rad)\n{\n    float s = sin(rad),\n          c = cos(rad);\n    mat2 M = mat2(\n          c, s,\n         -s, c);\n    return M;\n}\nmat2 shear(vec2 M)\n{\n    return \n        mat2(1, M.x,\n             M.y, 1);\n}\n\n/**/\nvec2 A = vec2(-1,1),  B = vec2(1,1),\n     D = vec2(-1,-1), C = vec2(1,-1),\n     NAB = vec2(0,1), NBC = vec2(1,0),\n     NCD = vec2(0,-1), NDA = vec2(-1,0);\n/**/\n\nvec3 draw(vec3 color, vec2 ndc)\n{\n    color = mix(color, vec3(1,0,0), SMAA(segmentSDF(ndc, A, B, 0.)));\n    color = mix(color, vec3(1,0,0), SMAA(segmentSDF(ndc, B, C, 0.)));\n    color = mix(color, vec3(1,0,0), SMAA(segmentSDF(ndc, C, D, 0.)));\n    color = mix(color, vec3(1,0,0), SMAA(segmentSDF(ndc, D, A, 0.)));\n    color = mix(color, vec3(0,0,1), SMAA(arrowSDF(ndc, (A+B)*0.5, (A+B)*0.5+NAB, 0.)));\n    color = mix(color, vec3(0,0,1), SMAA(arrowSDF(ndc, (B+C)*0.5, (B+C)*0.5+NBC, 0.)));\n    color = mix(color, vec3(0,0,1), SMAA(arrowSDF(ndc, (C+D)*0.5, (C+D)*0.5+NCD, 0.)));\n    color = mix(color, vec3(0,0,1), SMAA(arrowSDF(ndc, (D+A)*0.5, (D+A)*0.5+NDA, 0.)));\n    return color;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0), false);\n    \n    vec3 color = vec3(1);\n         //color = mix( color, vec3(0.8), SMAA(cellsSDF(NDC)) );\n         //color = mix( color, vec3(0), SMAA(x_axisSDF(NDC)) );\n         color = mix( color, vec3(0), SMAA(y_axisSDF(NDC)) );\n\n    color = draw(color, vec2(NDC.x + 2.05, NDC.y));\n\n    vec2 M = iMouse.xy == vec2(0) ? vec2(0.5, 0.) : iMouse.xy/iResolution.xy;\n    //mat2 J = rotz(M.x+M.y)*shear(M)*scale(M);\n    mat2 J = shear(vec2(M.x, 0.)); // from link\n\n    A = A * J; B = B * J; C = C * J; D = D * J;\n    \n    // Need to recover normals?\n    if (iMouse.z > 0.) \n    {\n        // Proof: t-tangent, n-normal, E - identity, J - fwd or bwd linear transformation.\n        //   t-tangent,  length(t) = 1,\n        //   n-normal, length(n) = 1,\n        //   E - identity, J - fwd or bwd linear transformation.\n        //                                          General properties:\n        //   dot(t, n) = 0                          \n        //   dot(E*t, n) = 0                        E = inverse(M) * M = M * inverse(M), M - arbitrary linear transformation\n        //   dot(inverse(J)*J*t, n) = 0             dot(Ma, b) = dot(a, transpose(M)b), a,b - arbitrary vectors\n        //   dot(J*t, transpose(inverse(J))*n) = 0\n        // So to transform t with J use  t' = J*t, then normalize t'\n        // And to transform n with J use n' = transpose(inverse(J))*n, then normalize n'\n        // EOP.\n        J = transpose(inverse(J)); // OR J = inverse(transpose(J));\n        NAB = normalize(NAB * J); NBC = normalize(NBC * J);\n        NCD = normalize(NCD * J); NDA = normalize(NDA * J);\n    }\n\n    color = draw(color, vec2(NDC.x - 2.05, NDC.y));\n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float y_axisSDF(vec2 NDC) { return abs(NDC.x); }\nfloat x_axisSDF(vec2 NDC) { return abs(NDC.y); }\nfloat vertical_lineSDF(vec2 NDC, float x0) { return abs(NDC.x-x0); }\nfloat horizontal_lineSDF(vec2 NDC, float y0) { return abs(NDC.y-y0); }\nfloat cellsSDF(vec2 NDC)\n{\n    //NDC *= 10.; // Finer cells\n    NDC = fract(NDC);\n    NDC = fract(min(NDC, 1. - NDC));\n    return\n        min(vertical_lineSDF(NDC, 0.), horizontal_lineSDF(NDC, 0.));\n}\n\nfloat diskSDF(in vec2 NDC, in vec2 C, in float r) { return length(C - NDC)-r; }\nfloat segmentSDF(in vec2 NDC, in vec2 B, in vec2 E, in float r)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - r;\n}\nfloat arrowSDF(\n    in vec2 NDC,\n    in vec2 B,\n    in vec2 E,\n    in float R)\n{\n    float len = length(B-E);    \n    vec2 dir = normalize(E-B),\n         //up = cross(vec3(dir, 0.), vec3(0, 0, -1)).xy,   \n         up = vec2(-dir.y, dir.x),\n         C = E - dir * 0.275, //      U--\n         U = C + up  * 0.10,  // B----C----E\n         D = C - up  * 0.10;  //      D--\n    \n    vec3 BARY = inverse(mat3(\n            U.x, U.y, 1.0,\n            D.x, D.y, 1.0,\n            E.x, E.y, 1.0)) * vec3(NDC.x, NDC.y, 1.0);\n    \n    float sign = \n        BARY.x >= 0.0 &&    \n        BARY.y >= 0.0 && \n        BARY.z >= 0.0 ?  // inside triangle?\n            -1. : 1.;\n    \n    float d = segmentSDF(NDC, U, D, 0.);\n          d = min(d, segmentSDF(NDC, U, E, 0.));\n          d = min(d, segmentSDF(NDC, D, E, 0.));\n          d = \n              len < 0.0275 ? \n                  d :\n                  min(d, segmentSDF(NDC, B, C, 0.));\n    \n    return sign*d-R;           \n}","name":"Common","description":"","type":"common"}]}