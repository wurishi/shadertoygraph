{"ver":"0.1","info":{"id":"MlyfDm","date":"1545916029","viewed":119,"name":"Wuszt's RayMarching 2","username":"Wuszt","description":"Cool effect","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int STEPS_AMOUNT = 1500;\nconst float STEP_VALUE = 0.01f;\nconst vec3 AMBIENT_LIGHT = vec3(0.1f,0.1f,0.1f);\n\n\nfloat SphereSDF(vec3 p)\n{\n    return length(p) - 1.0f - 0.2f * texture(iChannel0, p.xy).x * tan(iTime);\n}\n\nfloat CubeSDF(vec3 p)\n{\n    vec3 d = abs(p) - vec3(1.0f,1.0f,1.0f);\n    \n    float inside = min(0.0f, max(d.x, max(d.y,d.z)));\n    \n    float outside = length(max(d, 0.0));\n    \n    return inside + outside;\n}\n\nfloat Intersect(float a, float b)\n{\n    return max(a,b);\n}\n\nfloat Difference(float a, float b)\n{\n    return Intersect(a, -b);\n}\n\nfloat Union(float a, float b)\n{\n    return min(a, b);\n}\n\nfloat SceneSDF(vec3 p)\n{\n    return SphereSDF(p);//Union(SphereSDF(vec3(sin(iTime) * 5.0f,0.0f,0.0f) + p * 2.0f) * 0.5f, Difference(CubeSDF(p) * 1.2f, SphereSDF(p / 1.2f) * 1.2f));\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float e = 0.00001f;\n    \n    vec3 normal;\n    normal.x = SceneSDF(vec3(p.x + e,p.y,p.z)) - SceneSDF(vec3(p.x - e, p.y, p.z));\n    normal.y = SceneSDF(vec3(p.x,p.y + e,p.z)) - SceneSDF(vec3(p.x, p.y - e, p.z));\n    normal.z = SceneSDF(vec3(p.x,p.y,p.z + e)) - SceneSDF(vec3(p.x, p.y, p.z - e));\n    \n    return normalize(normal);\n}\n\nvec3 ProcessLighting(vec3 baseColor, vec3 eyePos, vec3 surfacePoint)\n{\n    vec3 diffuseDir = normalize(vec3(sin(iTime),cos(iTime),1.0f));\n    float diffuseIntensity = 0.7f;\n    \n    vec3 color = AMBIENT_LIGHT * baseColor;\n    \n    vec3 normal = GetNormal(surfacePoint);\n    \n    float d = dot(-diffuseDir, normal);\n    \n    d = abs(d);\n    \n    color += baseColor * d * diffuseIntensity;\n    \n    return color;\n}\n\nvec3 GetColor(vec3 eyePos,vec3 dir)\n{\n    for(int i=0;i<STEPS_AMOUNT;++i)\n    {\n        vec3 currentPoint = eyePos + dir * float(i) * STEP_VALUE;\n        if(SceneSDF(currentPoint) < 0.0f)\n        {\n            vec3 color = vec3(1.0f, 0.0f,0.0f);\n\n            color = ProcessLighting(color, eyePos, currentPoint);\n            \n            return color;\n        }\n    }\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, z));\n}\n\nmat4 GetViewMatrix(vec3 eyePos, vec3 lookAt, vec3 worldUp)\n{\n    vec3 forward = lookAt - eyePos;\n    vec3 side = cross(forward, worldUp);\n    vec3 up = cross(side, forward);\n    \n    forward= normalize(forward);\n    side = normalize(side);\n    up = normalize(up);\n    \n    return mat4(\n        vec4(side, 0.0f),\n        vec4(up, 0.0f),\n        vec4(forward, 0.0f),\n        vec4(0.0f,0.0f,0.0f,1.0f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = rayDirection(45.0f, iResolution.xy, fragCoord);\n    \n    vec3 eyePos = vec3(8.0f *sin(iTime),sin(iTime) * 5.0f,8.0f *cos(iTime));\n    \n    dir = (GetViewMatrix(eyePos, vec3(0.0f,0.0f,0.0f), vec3(0.0f,1.0f,0.0f)) * vec4(dir,0.0f)).xyz;\n\n       \n    vec3 color = GetColor(eyePos, dir);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}