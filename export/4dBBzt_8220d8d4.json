{"ver":"0.1","info":{"id":"4dBBzt","date":"1505132870","viewed":110,"name":"2017-08-01 gradient experiment","username":"grapespace","description":"The tutorial  I used is commented in the top.\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n//shapes https://iquilezles.org/articles/distfunctions\n// tutorial https://demosceneacademy.wordpress.com/2014/09/03/sphere-tracing-pt-i/\n\n//constants\n#define STEPS 64\n#define EPS 0.02\n#define FAR 10.0\n#define time iTime\n\n\n\n// function for distance\nfloat map(vec3 p){\n    \n    float r=1.0 + 0.25*cos(10.*p.y+time)*.25*sin(10.*p.x+time);\nreturn length(p)-r;\n}\n\n//gradient as a function of the distance\nvec3 grad(vec3 p){\nvec2 q = vec2(0.0, EPS);\n    return vec3(map(p + q.yxx) - map(p-q.yxx),\n                map(p + q.xyx) - map(p-q.xyx),\n                map(p + q.xxy) - map(p-q.xxy));\n    \n}\n\nvec3 shade(vec3 ro, vec3 rd, float t){\n\nvec3 n = normalize(grad(ro+ t*rd));\n    \n    //rgb \n    return vec3(.8,.4,.25)*2.* pow(1.0-dot(-rd,n),5.); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //centering uv and fix screenresolution\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv-=.5;\n    uv.x*=  iResolution.x/iResolution.y;\n    //\n    \n    //setting up camera:\n    //ray origin // camera starting position\n\tvec3 ro = vec3(.0, .0, 2.5);\n    //ray direction the vector shotting in to the camera\n    // remember you linear algebra (projection)\n\tvec3 rd = normalize(vec3(uv, -1.));\n    \n    \n    \n  /*\nA logical connective joining two or more predicates \nthat yields the logical value \"true\" when at least one of the predicates is true.\n*/\n    \n    //loop for the raymarching\n\tfloat t = 0.0, d = EPS;\n    for(int i = 0; i < STEPS; ++i){\n        d = map(ro + t*rd);\n        if(d<EPS || t >FAR) break;\n        t+=d;\n    \n        \n    }\n    \n    \n    //shading\n    vec3 col = d < EPS ? shade(ro,rd, t)  : mix(vec3(0.0),vec3(0.3, 0.5, 0.7), 2.2-length(uv));\n    \n    \n    col = pow(col, vec3(0.45));\n   \n\tvec2 bl = smoothstep(vec2(-1.8), vec2 (0.2),uv);\n\tvec2 tr = smoothstep(vec2(-.8), vec2 (0.55), vec2(1.0)-uv);\n\tvec3 color = vec3(bl.x*tr.y*tr.x*bl.y);\n    \n    \n    \n\tfragColor = vec4(col*color, 1.0);\n}","name":"Image","description":"","type":"image"}]}