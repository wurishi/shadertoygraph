{"ver":"0.1","info":{"id":"Mct3zM","date":"1713058582","viewed":64,"name":"Base Test Code","username":"Iris_","description":"Test code","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f(in vec2 uv)\n{\n    return uv.x * uv.x - uv.y * uv.y + 0.5;\n}\n\nvec2 rotate(in vec2 uv, float theta)\n{\n    return vec2(uv.x*sin(theta) + uv.y*cos(theta), uv.y*sin(theta) - uv.x*cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5f;\n\n    float[] factor = float[3](0.5, 0.8, 1.2);\n    vec3[] colormap = vec3[3](vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0));\n\n    vec3 col = vec3(0);\n    for(int i = 0; i < 3; i++)\n    {\n        col += colormap[i] * f(rotate(uv, iTime*factor[i]));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}