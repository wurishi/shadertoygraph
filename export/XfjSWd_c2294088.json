{"ver":"0.1","info":{"id":"XfjSWd","date":"1706990841","viewed":140,"name":"Tiling shaded floor / ceiling","username":"WasabiThumbs","description":"tiling shaded floor / ceiling using y=mx+b","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["light","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\nconst float fov = M_PI / 2.0;\nconst float halfFov = fov / 2.0;\nconst float camY = 1.0;\nconst float camZ = 1.0 / tan(halfFov);\nconst vec3 camPos = vec3(0, camY, -camZ);\n\nbool getPlaneCoords(float u, float v, out vec2 planeCoords) {\n    vec3 screenPos = vec3((u - 0.5) * 2.0, (v - 0.5) * 2.0 + camY, 0);\n    \n    float dz = screenPos.z - camPos.z;\n    \n    float dx = screenPos.x - camPos.x;\n    float tdm;\n    float tdb;\n    bool tdv = false;\n    if (abs(dx) > 0.001) {\n        tdm = dz / dx;\n        tdb = camPos.z - (camPos.x * tdm);\n    } else {\n        tdv = true;\n    }\n    \n    float dy = screenPos.y - camPos.y;\n    float iz;\n    if (dy > 0.0) {\n        dy = -dy;\n    }\n    if (abs(dy) > 0.001) {\n        float sdm = dz / dy;\n        iz = camPos.z - (camPos.y * sdm);\n    } else {\n        return false;\n    }\n  \n    float ix;\n    if (tdv) {\n        ix = 0.0;\n    } else {\n        ix = (iz - tdb) / tdm;\n    }\n    \n    planeCoords = vec2(ix, iz);\n    \n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 planeCoords;\n    \n    if (getPlaneCoords(uv.x, uv.y, planeCoords)) {\n        float d = dot(planeCoords, planeCoords);\n        float u = fract(planeCoords.x);\n        float v = fract(planeCoords.y + iTime / 2.0);\n        fragColor = texture(iChannel0, vec2(u,v)) / max(d * 0.2, 1.0);\n    } else {\n        fragColor = vec4(0,0,0,0);\n    }\n}","name":"Image","description":"","type":"image"}]}