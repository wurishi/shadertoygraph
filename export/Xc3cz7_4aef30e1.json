{"ver":"0.1","info":{"id":"Xc3cz7","date":"1732641732","viewed":75,"name":"Distant Alien Planet","username":"Handolf","description":"Alien Planet!\nControls:\n-mouse look","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["3d","space","forest","alien"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 250\n#define FAR_DIST 9999.0\n#define EPS 0.001\n\n#define VIEW_ROT vec3(iMouse.y / iResolution.y * 1.57 -  0.8, -(iMouse.x / iResolution.x * 3.14 - 1.57), 0.0)\n#define VIEW_POS vec3(0.0, sin(iTime * 4.0) * 0.004, iTime * 0.08)\n\n#define LEFT    vec3(1.0, 0.0, 0.0) \n#define UP      vec3(0.0, 1.0, 0.0)\n#define FORWARD vec3(0.0, 0.0, 1.0)\n\n#define GAMMA 2.2\n\nvec3 rotate(vec3 p, vec3 angle)\n{\n    return (vec4(p, 1.0) * mat4(\n        vec4(1.0,        0.0,         0.0, 0.0),\n        vec4(0.0, cos(angle.x), -sin(angle.x), 0.0),\n        vec4(0.0, sin(angle.x),  cos(angle.x), 0.0),\n        vec4(0.0,          0.0,           0.0, 1.0)\n    ) * mat4(\n        vec4( cos(angle.y), 0.0, sin(angle.y), 0.0),\n        vec4(          0.0, 1.0,          0.0, 0.0),\n        vec4(-sin(angle.y), 0.0, cos(angle.y), 0.0),\n        vec4(          0.0, 0.0,          0.0, 1.0) \n    ) * mat4(\n        vec4(cos(angle.z), -sin(angle.z), 0.0, 0.0),\n        vec4(sin(angle.z),  cos(angle.z), 0.0, 0.0),\n        vec4(         0.0,           0.0, 1.0, 0.0),\n        vec4(         0.0,           0.0, 0.0, 1.0)\n    )).xyz;\n}\n\nfloat floor_sdf(vec3 p)\n{\n    return p.y + perlin(p.xz * vec2(1.0, 3.0)) * 0.15;\n}\n\nfloat cilynder_sdf(vec3 p, float r, float h)\n{\n    return max(length(p.xz) - r, abs(p.y) - h);\n}\n\nfloat sphere_sdf(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sky_sdf(vec3 p)\n{\n    return -(length(p - VIEW_POS) - 5.0);\n}\n\nfloat cone_sdf(vec3 p, float r, float h)\n{\n    return length(p.xz) - (r - p.y * (1.0 / h));\n}\n\nfloat tree_sdf(vec3 p)\n{\n    vec2 cel_id = floor(p.xz);\n    vec2 cel_pos = fract(p.xz);\n    p.xz = cel_pos;\n    p.xz -= (hash22(cel_id + 1.0)) * 0.25 + 0.5;\n    \n    p.y += perlin(p.xy * 10.0 + cel_id);\n    \n    float f = max( cilynder_sdf(p, 0.05, 10.0), cone_sdf(p, 0.05, 30.0) );\n    \n    return f;\n}\n\nfloat scene(vec3 p, out int obj_id)\n{   \n    float obj[3];\n    obj[0] = floor_sdf (p + vec3(0.0, 0.1, 0.0));\n    obj[1] = sky_sdf   (p); \n    obj[2] = tree_sdf  (p);\n    \n    float dist = 999.0;\n    \n    for(int i = 0; i < 3; i++)\n    {\n        if(obj[i] < dist)\n        {\n            dist = obj[i];\n            obj_id = i;\n        }\n    }\n    return dist;\n}\n\n\n//get normals from: https://iquilezles.org/articles/normalsSDF/\nvec3 get_normal(vec3 p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    int obj_id = -1;\n    return normalize( vec3(scene(p+h.xyy, obj_id) - scene(p-h.xyy, obj_id),\n                           scene(p+h.yxy, obj_id) - scene(p-h.yxy, obj_id),\n                           scene(p+h.yyx, obj_id) - scene(p-h.yyx, obj_id) ) );\n}\n\nvec3 shading(vec3 p, vec3 n, vec3 ld)\n{\n    return max(vec3(dot(n, ld)), 0.01);\n}\n\nfloat fog(vec3 p, float d, float k)\n{\n    return  pow( length(p.xz + vec2(0.0, 1.0)) * d, k);\n}\n\nvec4 triplanar(sampler2D text, vec3 p, vec3 n, float k)\n{\n    vec3 w = vec3(\n        abs(dot(LEFT, n)),\n        abs(dot(UP, n)),\n        abs(dot(FORWARD, n))\n    );\n    \n   w = pow(w, vec3(k));\n   w = w / (w.x + w.y + w.z);\n   \n    \n    vec4 o  = texture(text, p.zy) * w.x;\n         o += texture(text, p.xz) * w.y;\n         o += texture(text, p.xy) * w.z;\n    \n    return pow(o, vec4(GAMMA));\n}\n\nvec3 march(vec3 ro, vec3 rd)\n{\n    int obj_id = 0;\n    float d = 0.0;\n    vec3 p = ro + VIEW_POS;\n    vec3 col;\n    \n    if(iMouse.z >= 1.0)\n        rd = rotate(rd, VIEW_ROT);\n    \n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        d = scene(p, obj_id);\n        if(d < EPS || dot(p,p) > FAR_DIST) break;\n        p += rd *  d * 0.5;\n    }\n    \n    //render\n    vec3 ld = normalize(vec3(0.5, 0.1, -1.0));\n    vec3 n = get_normal(p);\n    \n    switch (obj_id)\n    {\n    case 0:\n        col = triplanar(iChannel1, p, n, 1.0).rgb * shading(p, n, ld);\n        break;\n    case 1:\n        col = triplanar(iChannel2, normalize(p - VIEW_POS) * 3.0, n, 25.0).rgb;\n        break;\n    case 2:\n        col = triplanar(iChannel0, p, n, 2.0).rgb * shading(p, n, ld);\n        break;\n    }\n    \n    col = mix(col, vec3(0.05, 0.0, 0.0), fog(p - VIEW_POS, 0.15, 1.0));\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    uv -= vec2(0.88, 0.5);\n    \n    vec3 ro = vec3(0.0, 0.0, -1.0);\n    vec3 rd = normalize(vec3(uv, 0.0) - ro);\n    vec3 col = march(ro, rd);\n    \n    //GAMMA correction\n    col = pow(col, vec3(1.0/GAMMA));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//by: https://www.shadertoy.com/view/4XXfRN\nvec3 get_star(vec2 p, float scale)\n{\n    //centralize\n    p -= vec2(0.5, 0.5);\n    \n    //scale\n    p *=  clamp(scale, 1.75, 10.0);\n    \n    //color\n    vec3 colors[3];\n    colors[0] = vec3(0.5, 0.6, 1.0);//blue\n    colors[1] = vec3(1.0, 0.4, 0.0);//red\n    colors[2] = vec3(0.8, 0.5, 0.0);//yellow\n    \n    float alpha = smoothstep(0.2, 0.01, length(p));\n    alpha *= alpha;\n\n    return mix(\n        colors[int(abs(scale) * 3.0)],\n        vec3(1.0),\n        alpha * alpha\n    ) * alpha;\n}\n\nvec3 get_star_field(vec2 uv, float seed)\n{\n    vec3 col = vec3(0.0);\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            vec2 neighbor = vec2(float(i), float(j));\n            vec2 p = uv;\n            vec2 p_fract = fract(p);\n            vec2 p_floor = floor(p);\n            vec2 disp = hash22(p_floor + neighbor + vec2(seed)) + neighbor;\n            \n            col = max(col, get_star(\n                disp - p_fract,\n                hash12(neighbor + p_floor) * 1.5\n            ));\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect_raito = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.y;\n    \n    //centralized uv\n    uv -= vec2(0.5 - (1.0-aspect_raito) * 0.5, 0.5);\n    \n    float speed = 0.25;\n    float max_scale = 14.0;\n    vec3 col = vec3(0.0);\n    \n    for(int i = 1; i < 5; i++)\n    {\n        float scale = ( max_scale - mod((12.0 - 3.0 * float(i)), max_scale) );\n        col = max( col, mix( get_star_field(uv * scale, float(i) * 10.0  ), vec3(0.0),  scale/max_scale) );\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//hash22 from: https://www.shadertoy.com/view/ldc3RB\nvec2 hash22(vec2 p)\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\n//from: https://www.shadertoy.com/view/XdGfRR\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n/////////\n\nfloat perlin(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    //cubic hermite curve: f(x) = x*x*(3.0-2.0*x)\n    //vec2 t = smoothstep(vec2(0.), vec2(1.), f);\n    \n    //quintic interpolation curve:\n    vec2 t = f*f*f*(f*(f*6.-15.)+10.);\n    \n    return mix( mix(dot(hash22(i                ), f                ), dot(hash22(i + vec2(1., 0.) ), f - vec2(1.,0.) ), t.x),\n                mix(dot(hash22(i + vec2(0., 1.) ), f - vec2(0., 1.) ), dot(hash22(i + vec2(1., 1.) ), f - vec2(1.,1.) ), t.x),\n                t.y);\n}","name":"Common","description":"","type":"common"}]}