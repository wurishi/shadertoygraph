{"ver":"0.1","info":{"id":"mslSz2","date":"1669275575","viewed":127,"name":"Grass extremi","username":"remilanza","description":"generate a grass leaf","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926\n\nconst vec4 COL_LEAF = vec4(0.6, 0.8, 0.3, 0.0);\nconst vec4 COL_BACKGROUND = vec4(0.9, 0.9, 1., 1.);\nconst float GRASS_MAX_WIDTH = 0.25;\nconst float GRASS_WAVE_LENGTH_FAC = 0.25;\nconst float SPEED_FAC = 1.;\n\nvoid rescaleUV(inout vec2 uv){\n    //UV from [0., 0.] to [1., 1.]\n    uv = uv/iResolution.xy;\n    //UV.x from -1. to 1.\n    uv.x = 2.*uv.x - 1.;    \n}\n\nvoid mainImage(out vec4 FragColor, in vec2 fragCoord )\n{\n    float time = SPEED_FAC * iTime;\n\n    vec2 uv = fragCoord;\n    rescaleUV(uv);\n\n    //Swaying leaf by moving Y-axis along X\n    uv.x += sin(time)*0.5*uv.y*uv.y;\n    uv.y += abs(sin(time)*sin(time)*0.3*uv.y*uv.y*uv.y);\n\n\n\n\tfloat x = abs(uv.x);\t\n\tfloat alpha = (1./GRASS_WAVE_LENGTH_FAC)*pow(uv.y, 1.);\n\t//float grassEdgeX = (0.0 + 0.5 * 0.5*(1. + sin(alpha)));\n    float grassEdgeX = GRASS_MAX_WIDTH * sin(alpha + 0.1);\n    grassEdgeX *= (0.1 + 0.9*uv.y*uv.y);\n\t\n    //over the leaf (sine wave complete)\n    if(alpha > M_PI){ \n\t\tFragColor = COL_BACKGROUND;\n\t}\n    //sides of the leaf\n\telse if(x > grassEdgeX){ \n\t\tFragColor = COL_BACKGROUND;\n\t}\n    //within the leaf\n    else{\n        FragColor = COL_LEAF;\n        \n        FragColor.r += 0.2*uv.y;\n        FragColor.g += 0.2*uv.y;\n        FragColor.b -= 0.4*uv.y;\n        \n        FragColor.rgb *= pow(x/GRASS_MAX_WIDTH, 0.05);\n        FragColor.rgb *= pow(x/GRASS_MAX_WIDTH, 0.1);\n        \n        \n        //Vertical lines        \n        float alphas[5] = float[](0.3 * M_PI, 0.4 * M_PI, 0.525 * M_PI, 0.65 * M_PI, 0.8 * M_PI);\n        \n        float thk = 0.045 * (1.6*grassEdgeX - abs(uv.x))/(grassEdgeX);\n        for(int i = 0; i < 5; i++){\n        \n            float alpha2 = alphas[i] + 1.4*x;\n            if(alpha > (alpha2 - thk/2.) && alpha < (alpha2 + thk/2.)){\n                if(x > 0. && x < grassEdgeX){\n                    //FragColor = vec4(1.0, 0.0, 0.0, 1. );\n                    const vec4 lineCol = vec4(0., 0., 0., 1.0);\n                    FragColor.rgb *= pow(x/GRASS_MAX_WIDTH, 0.05);\n                    FragColor.rgb *= pow(x/GRASS_MAX_WIDTH, 0.1);\n                    //FragColor = mix(lineCol, FragColor, smoothstep(alpha, alpha + thk/2., alpha2));\n                    //FragColor = mix(lineCol, FragColor, smoothstep(alpha - thk, alpha, alpha2));\n                }\n            }      \n        }                              \n        \n    }\n    \n    //debug:\n    if(false){\n        float d_lineY = 0.7;\n        float d_lineX = 0.00;\n        float d_thk = 0.005;\n        if(uv.y > (d_lineY - d_thk/2.) && uv.y < (d_lineY + d_thk/2.)){\n            FragColor = vec4(1., 0., 0., 1. );\n        }\n        if(uv.x > (d_lineX - d_thk/2.) && uv.x < (d_lineX + d_thk/2.)){\n            if(alpha < M_PI)\n                FragColor = vec4(1., 0., 0., 1. );\n        }\n        float d_lineY2 = 0.5 + 0.8*abs(uv.x);\n        d_thk = 0.045 * (1.2*grassEdgeX - abs(uv.x))/(grassEdgeX);\n        if(uv.y > (d_lineY2 - d_thk/2.) && uv.y < (d_lineY2 + d_thk/2.)){\n            if(abs(uv.x) > 0. && abs(uv.x) < grassEdgeX)\n                FragColor = vec4(1.0, 0.0, 0.0, 1. );\n        }\n    }\n\n\t//FragColor.x = uv.y;\n    //FragColor = vec4(1., 0., 0., 1.);\n} ","name":"Image","description":"","type":"image"}]}