{"ver":"0.1","info":{"id":"fsByDR","date":"1643561212","viewed":209,"name":"Modifiable Binary Tiling","username":"Koulatko","description":"* Number of cells is just screen width in pixels, didn't bother with more intelligent packing\n* The hyperboloid model isn't really needed for most of the rendering, working directly in the Poincare disk projection might have had better numerical precision","likes":10,"published":1,"flags":48,"usePreview":0,"tags":["2d","buffer","hyperbolic","noneuclidean"],"hasliked":0,"parentid":"sssyDl","parentname":"Hyperbolic Plane"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 fragcoord_to_hyperboloid(vec2 fragCoord){\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    if(dot(p, p) > 1.0) discard;\n    \n    vec4 Q = texelFetch(iChannel3, ivec2(0, 0), 0);\n    \n\n    vec3 h = conformal_disk_to_hyperboloid(p);\n    \n    vec4 Qconj = vec4(Q.x, -Q.yzw);\n    return split_quat_mul(Q, split_quat_mul(vec4(0.0, h.zxy), Qconj)).zwy;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    if(dot(p, p) > 1.0){fragColor = vec4(vec3(0.1/(dot(p,p)*dot(p,p))), 1.0); return;}\n    \n    vec3 h = fragcoord_to_hyperboloid(fragCoord);\n    \n    //h = beltrami2_to_hyperboloid(p);\n    \n    float g = 0.0;\n    \n    \n    vec3 col;\n    \n    vec2 horo = horo_coords(h);\n    \n    \n    int I = horotree_index(horo);\n    \n    \n    col = texelFetch(iChannel0, ivec2(I, 0), 0).xyz;\n    \n    vec2 rel = vec2(mod(horo.y*exp2(floor(horo.x)+1.0), 1.0), mod(horo.x, 1.0));\n    \n    \n    float k = length(rel-0.5);\n    k = max(abs(rel.x-0.5), abs(rel.y-0.5));\n    k *= k;\n    col = mix(col, 1.0-col*col, k);\n    \n    if(horo.x < -1.0 || horo.y < 0.0 || horo.y > 1.0 || I+1 > int(iChannelResolution[0].x)) col = vec3(0.0);\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 update_camera_matrix(vec4 cur){\n    vec4 m = vec4(2.0,0.0,sqrt(3.0),0.0);\n    m = vec4(1.0, 0.0, 0.0, 0.0);\n    if(iFrame == 0){\n        return m;\n    }\n    \n    \n    float W = texelFetch(iChannel1, ivec2(87, 0), 0).x;\n    float S = texelFetch(iChannel1, ivec2(83, 0), 0).x;\n    float A = texelFetch(iChannel1, ivec2(65, 0), 0).x;\n    float D = texelFetch(iChannel1, ivec2(68, 0), 0).x;\n    float Q = texelFetch(iChannel1, ivec2(81, 0), 0).x;\n    float E = texelFetch(iChannel1, ivec2(69, 0), 0).x;\n    float space = texelFetch(iChannel1, ivec2(32, 0), 0).x;\n    float shift = texelFetch(iChannel1, ivec2(16, 0), 0).x;\n    \n    vec4 prev_mouse = texelFetch(iChannel0, ivec2(0, 1), 0);\n    \n    m = vec4(1.0, 0.0, 0.0, 0.0);\n    \n    float camera_angular_speed = 0.5*iTimeDelta;\n    if(W > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0,-sinh(k), 0.0), m);\n    }\n    if(S > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0, sinh(k), 0.0), m);\n    }\n    if(A > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0, 0.0,-sinh(k)), m);\n    }\n    if(D > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0, 0.0, sinh(k)), m);\n    }/*\n    if(W > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0, 0.0, sinh(k)), m);\n    }\n    if(S > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0, 0.0,-sinh(k)), m);\n    }\n    if(A > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0,sinh(k),0.0), m);\n    }\n    if(D > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cosh(k), 0.0,-sinh(k),0.0), m);\n    }*/\n    if(Q > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cos(k),-sin(k), 0.0, 0.0), m);\n    }\n    if(E > 0.5){\n        float k = camera_angular_speed;\n        m = split_quat_mul(vec4(cos(k), sin(k), 0.0, 0.0), m);\n    }\n    \n    vec4 curconj = vec4(cur.x, -cur.yzw);\n    \n    vec3 camera_pos = split_quat_mul(cur, split_quat_mul(vec4(0.0, 1.0, 0.0, 0.0), curconj)).zwy;\n    vec3 h;\n    \n    \n    \n    \n    cur = split_quat_mul(cur, m);\n    return cur;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    ivec2 fc = ivec2(fragCoord);\n    if(fc.y == 0 && fc.x == 0){\n        vec4 cur = texelFetch(iChannel0, ivec2(0, 0), 0);\n        fragColor = update_camera_matrix(cur);\n    }\n    if(fc == ivec2(0, 1)){\n        fragColor = iMouse;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MAGIC_NUMBER 0.658\n\nvec2 cmul(vec2 a, vec2 b){\n    return vec2(a.x*b.x-a.y*b.y,a.x*b.y + b.x*a.y);\n}\nvec2 cdiv(vec2 a, vec2 b){\n    return vec2(a.x*b.x+a.y*b.y, b.x*a.y - a.x*b.y)/(b.x*b.x + b.y*b.y);\n}\n\nvec3 conformal_disk_to_hyperboloid(vec2 p){\n    float t = 2.0/(1.0-dot(p, p));\n    return t*vec3(p, 1.0) - vec3(0.0, 0.0, 1.0);\n}\n\nvec3 beltrami2_to_hyperboloid(vec2 p){\n    float rt = sqrt(1.0 - dot(p, p));\n    return vec3(p, 1.0)/rt;\n}\n\n\nvec2 horo_coords(vec3 h){\n    \n    float conc = log2(h.x + h.z);\n    float temp1 = (h.x*h.x + h.y*h.y + h.x*(h.z + 1.0))/((h.x + h.z + 1.0)*(h.z + 1.0));\n    \n    \n    \n    temp1 = 2.*atanh(temp1);\n    \n    temp1 = 2.0*sqrt((cosh(temp1)*h.z - sinh(temp1)*h.x - 1.0)/2.0);\n    \n    temp1 *= sign(h.y);\n    temp1 /= (h.x + h.z);\n    \n    return vec2(conc, temp1);\n}\n\nint horotree_index(vec2 horo){\n    int A = int(floor(horo.x)+1.0);\n    int H = int(floor(horo.y*exp2(floor(horo.x)+1.0)));\n    return (1<<(A))+H-1;\n}\n\n\nvec4 split_quat_mul(vec4 a, vec4 b){\n    return vec4(\n    (a.x*b.x-a.y*b.y+a.z*b.z+a.w*b.w),\n    (a.x*b.y+a.y*b.x-a.z*b.w+a.w*b.z),\n    (a.x*b.z+a.z*b.x-a.y*b.w+a.w*b.y),\n    (a.x*b.w+a.w*b.x-a.z*b.y+a.y*b.z));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 fragcoord_to_hyperboloid(vec2 fragCoord){\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    if(dot(p, p) > 1.0) discard;\n    \n    vec4 Q = texelFetch(iChannel3, ivec2(0, 0), 0);\n    \n\n    vec3 h = conformal_disk_to_hyperboloid(p);\n    \n    vec4 Qconj = vec4(Q.x, -Q.yzw);\n    return split_quat_mul(Q, split_quat_mul(vec4(0.0, h.zxy), Qconj)).zwy;\n}\n\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    vec3 mouse = fragcoord_to_hyperboloid(iMouse.xy);\n    \n    vec2 horo_m = horo_coords(mouse);\n    \n    \n    int I = int(fragCoord.x);\n    int Im = horotree_index(horo_m);\n    \n    ivec2 fc = ivec2(fragCoord);\n    \n    \n    vec4 cur = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if(!(horo_m.x < -1.0 || horo_m.y < 0.0 || horo_m.y > 1.0) && I == Im && iMouse.z > texelFetch(iChannel0, ivec2(0, 1), 0).z){\n        cur = 1.0-cur;\n    }\n    \n    \n    if(fc.x == 0 && fc.y == 1) cur = iMouse;\n    \n    fragColor = cur;\n    \n    \n}","name":"Buffer B","description":"","type":"buffer"}]}