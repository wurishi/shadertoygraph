{"ver":"0.1","info":{"id":"wtsXD7","date":"1563277322","viewed":1065,"name":"blue noise jittering","username":"FabriceNeyret2","description":"Blue-noise error is perceptively better (since no low-frequency that whitenoise has).\nHere: naive explicit bluenoise-jittering (not even truely blue) of blurry render.\nFor a more general method, read [url]https://eheitzresearch.wordpress.com/772-2/[/url]","likes":17,"published":3,"flags":0,"usePreview":0,"tags":["pathtracing","bluenoise","jittering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define JIT 40.                                 // amout of jittering\n\nvoid mainImage( out vec4 O, vec2 U )\n{  \n    vec2 R = iResolution.xy, \n         P = ( 2.*U - R ) / R.y, S;\n    \n    if (P.x==-P.y) { O=vec4(1,0,0,0); return; } // red separator\n    \n    // --- random seed for the current location\n\n    S = P.x > -P.y\n        ? texelFetch( iChannel0, ivec2(U)%1024, 0).xy  // top: bluenoise\n        : texelFetch( iChannel1, ivec2(U)%256 , 0).xy; // left: whitenoise\n    \n    // --- stochastic cone-trace the scene ( = 1 sphere ) \n    \n    P += .3*cos(iTime+vec2(0,33));              // camera motion\n    \n    vec3 D = vec3( P + JIT* (S-.5)/R.y, 1),                // pseudo-blue noise\n       //D = vec3( P + JIT* (S.x-.5)/R.y*normalize(P), 1), // real radial bluenoise\n         C = vec3(0,0,-1), L = normalize(vec3(-1,1,-2)), N,H;\n    D = normalize(D);\n    float r = .5, b = dot(D,C), c = dot(D,D) - r*r, d = b*b - c;\n    O = vec4(0);\n    if (d>0.) { \n        d = -b - sqrt(d); C += d*D;             // ray-sphere intersection\n        N = normalize(C);                       // local normal\n        H = normalize(L+vec3(0,0,-1));\n        O =   dot(N,L) *vec4(0,1,0,0)           // diffuse shading\n            + 2.*pow(max(0.,dot(N,H)),100.) ;   // specular shading\n      }\n}","name":"Image","description":"","type":"image"}]}