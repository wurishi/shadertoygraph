{"ver":"0.1","info":{"id":"M3sfz4","date":"1728132292","viewed":76,"name":"Fluid Field Simulation","username":"Fuergu","description":"Fork of \"Interactive Fluid Simulation\" by wyatt. [url]https://shadertoy.com/view/XtGcDK[/url]","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["simulation","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**************  GO TO COMMON  ***************/\n/*      Move Your Mouse To Move Obstacle     */\n/*********************************************/\n\n\n// Fork of \"Interactive Fluid Simulation\" by wyatt. https://shadertoy.com/view/XtGcDK\n// 2024-10-05 12:04:22\n\n// 2D vector field visualization by Morgan McGuire, @morgan3d, http://casual-effects.com\n#define PI 3.1415927\n\n// Choose your arrow head style\n#define ARROW_TILE_SIZE 12.\n#define ADAPTIVE_ARROW 0\n// How sharp should the arrow head be? Used\nconst float ARROW_HEAD_ANGLE = 70.0 * PI / 180.0;\n\n// Used for ARROW_LINE_STYLE\n#define ARROW_HEAD_LENGTH (arrow_tile_size / 6.0)\nconst float ARROW_SHAFT_THICKNESS = .5;\n\t\n\n\n// Computes the center pixel of the tile containing pixel pos\nvec2 arrowTileCenterCoord(vec2 pos, float arrow_tile_size) {\n\treturn (floor(pos / arrow_tile_size) + 0.5) * arrow_tile_size;\n}\n\n\n// v = field sampled at tileCenterCoord(p), scaled by the length\n// desired in pixels for arrows\n// Returns 1.0 where there is an arrow pixel.\nfloat arrow(vec2 p, vec2 v, float arrow_tile_size) {\n\t// Make everything relative to the center, which may be fractional\n\tp -= arrowTileCenterCoord(p,arrow_tile_size);\n\t\t\n    float mag_v = length(v), mag_p = length(p);\n\t\n\tif (mag_v > 0.0) {\n\t\t// Non-zero velocity case\n\t\tvec2 dir_p = p / mag_p, dir_v = v / mag_v;\n\t\t\n\t\t// We can't draw arrows larger than the tile radius, so clamp magnitude.\n\t\t// Enforce a minimum length to help see direction\n\t\tmag_v = clamp(mag_v, 5.0, arrow_tile_size / 2.0);\n\n\t\t// Arrow tip location\n\t\tv = dir_v * mag_v;\n\t\t\n\t\t// Define a 2D implicit surface so that the arrow is antialiased.\n\t\t// In each line, the left expression defines a shape and the right controls\n\t\t// how quickly it fades in or out.\n\n        // Signed distance from a line segment based on https://www.shadertoy.com/view/ls2GWG by \n        // Matthias Reitinger, @mreitinger\n\n        // Line arrow style\n        float dist = \n            max(\n                // Shaft\n                ARROW_SHAFT_THICKNESS / 4.0 - \n                    max(abs(dot(p, vec2(dir_v.y, -dir_v.x))), // Width\n                        abs(dot(p, dir_v)) - mag_v + ARROW_HEAD_LENGTH / 2.0), // Length\n\n                 // Arrow head\n                 min(0.0, dot(v - p, dir_v) - cos(ARROW_HEAD_ANGLE / 2.0) * length(v - p)) * 2.0 + // Front sides\n                 min(0.0, dot(p, dir_v) + ARROW_HEAD_LENGTH - mag_v)); // Back\n\t\t\n\t\treturn clamp(1.0 + dist, 0.0, 1.0);\n\t} else {\n\t\t// Center of the pixel is always on the arrow\n\t\treturn max(0.0, 1.2 - mag_p);\n\t}\n}\n\n// by iq, https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 U )\n{\n    float gray = texture(iChannel0,U/iResolution.xy).a;\n    gray = 1.1*log(1.+gray);\n    // gamma\n    gray = pow(gray,.9);\n    float velocity = length(texture(iChannel0,U/iResolution.xy).xy);\n    velocity = 4.*log(1.+velocity)-0.7;\n    float pressure = texture(iChannel0,U/iResolution.xy).z;\n    vec3 col = vec3(0.);\n    vec3 a = vec3(0.650, 0.500, 0.310);\n    vec3 b = vec3(-0.650, 0.500, 0.600);\n    vec3 c = vec3(0.333, 0.278, 0.278);\n    vec3 d = vec3(0.660, 0.000, 0.667);\n    col = gray*palette(1.-gray, a, b, c, d);\n    if (iMouse.x<iResolution.x*0.5 && iMouse.z>0. && MOUSE_OBSTACLE == 0 )\n    {\n      float LOGpressure = 0.2+2.*log(1.+pressure);\n      col = palette(LOGpressure, a, b, c, d);\n    }\n    if (iMouse.x>iResolution.x*0.5 && iMouse.z>0. && MOUSE_OBSTACLE == 0 )\n    {\n      col = palette(1.-velocity, a, b, c, d);\n    }\n    \n    if( SHOW_ARROW == 1 )\n    {\n        // draw arrow\n        vec2 arrow_v = texture(iChannel0,U.xy/iResolution.xy).xy;\n        //arrow_v.x-=0.05;\n        float arrow_tile_size = ARROW_TILE_SIZE;\n        if (ADAPTIVE_ARROW == 1)\n        {\n            arrow_tile_size*=gray;\n            arrow_tile_size = clamp(arrow_tile_size,ARROW_TILE_SIZE*.8,ARROW_TILE_SIZE*1.2);\n            col+=3.*log(gray+1.3)*arrow(U.xy, arrow_v * arrow_tile_size*gray, arrow_tile_size);\n        }\n        else\n        {\n            col+=2.*log(1.05+gray)*arrow(U.xy, arrow_v * arrow_tile_size, arrow_tile_size);\n        }\n    }\n    \n    // draw obstacle\n    if(ENABLE_OBSTACLE == 1)\n    {\n        vec2 R = iResolution.xy;\n        vec2 obstacleCenter = vec2(0.2 * R.x, 0.5 * R.y);\n        if(MOUSE_OBSTACLE == 1)  obstacleCenter = iMouse.xy;\n        if(ENABLE_OBSTACLE_MOVEMENT == 1) obstacleCenter = vec2(0.2 * R.x, 0.5 * R.y+80.*cos(iTime));\n        float radius = OBSTACLE_RADIUS;\n        if (length(U - obstacleCenter) < radius && length(U - obstacleCenter) > radius-2.) {\n            col = vec3(1.);\n        }\n    }\n    fragColor = vec4(col,0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { \n    return length(p - a - (b - a) * clamp(dot(p - a, b - a) / dot(b - a, b - a), 0., 1.));\n}\n\nvoid mainImage(out vec4 Q, in vec2 U)\n{   \n    R = iResolution.xy;\n    vec2 A = U + vec2(1, 0), B = U + vec2(0, 1), C = U + vec2(-1, 0), D = U + vec2(0, -1);\n    \n    vec4 u = texture(iChannel0, U / R);\n    vec4 a = texture(iChannel0, A / R);\n    vec4 b = texture(iChannel0, B / R);\n    vec4 c = texture(iChannel0, C / R);\n    vec4 d = texture(iChannel0, D / R);\n    \n    vec4 p = vec4(0.);\n    vec2 g = vec2(0.);\n    #define I 2\n    for (int i = 0; i < I; i++) {\n        U -= u.xy; A -= a.xy; B -= b.xy; C -= c.xy; D -= d.xy; \n        p += vec4(length(U - A), length(U - B), length(U - C), length(U - D)) - 1.;\n        g += vec2(a.z - c.z, b.z - d.z);\n        u = texture(iChannel0, U / R);\n        a = texture(iChannel0, A / R);\n        b = texture(iChannel0, B / R);\n        c = texture(iChannel0, C / R);\n        d = texture(iChannel0, D / R);\n    }\n    \n    Q = u; \n    vec4 N = (a + b + c + d)/4.; \n    Q = mix(Q, N, vec4(0, 0, 1, 0)); \n    Q.xy -= g / 10. / float(I); \n    Q.z += (p.x + p.y + p.z + p.w) / 10.; \n    \n    Q.z *= 0.99;\n\n    if (length(U - vec2(0.05 * R.x, 0.5 * R.y)) < 10. ) \n    {\n        Q.w = 1.;\n        Q.xy = vec2(.7, 0.);\n    }\n    \n    if (length(U - vec2(0.05 * R.x, 0.1 * R.y)) < 5. ) \n    {\n        Q.w = 1.;\n        Q.xy = vec2(.7, 0.);\n    }\n    \n    if (length(U - vec2(0.05 * R.x, 0.9 * R.y)) < 5. ) \n    {\n        Q.w = 1.;\n        Q.xy = vec2(.7, 0.);\n    }\n    \n    if (length(U - vec2(0.05 * R.x, 0.3 * R.y)) < 5. ) \n    {\n        Q.w = 1.;\n        Q.xy = vec2(.7, 0.);\n    }\n    \n    // Add some ink and speed to the top and bottom of the screen\n    if (length(U - vec2(0.05 * R.x, 0.7 * R.y)) < 5. ) \n    {\n        Q.w = 1.;\n        Q.xy = vec2(.7, 0.);\n    }\n    \n    // Get mouse position and previous position from buffer B\n    vec4 mouse = texture(iChannel1,vec2(0.5));\n    // Find the distance of the line segment from the mouse start position to the end position\n    float q = ln(U,mouse.xy,mouse.zw);\n    vec2 m = mouse.xy-mouse.zw;\n    float l = length(m);\n    vec2 mouseVelocity = vec2(0.);\n    if (mouse.z > 0. && l > 0.) {\n    // Accelerating fluids and adding ink\n    // Calculate the speed of the ink\n    mouseVelocity = normalize(m) * min(l, 20.0) / 25.0;\n    }\n    if(ENABLE_OBSTACLE == 1)\n    {\n        vec2 obstacleCenter = vec2(0.2 * R.x, 0.5 * R.y);\n        if(MOUSE_OBSTACLE == 1)  obstacleCenter = iMouse.xy;\n        if(ENABLE_OBSTACLE_MOVEMENT == 1) obstacleCenter = vec2(0.2 * R.x, 0.5 * R.y+80.*cos(iTime));\n        float radius = OBSTACLE_RADIUS;\n        if (length(U - obstacleCenter) < radius+1.&& length(U - obstacleCenter) > radius-8.) {\n                vec2 normal = normalize(U - obstacleCenter); \n                Q.xy = 1.1*reflect(Q.xy, normal) + 2.*mouseVelocity; \n                if (mouse.z > 0. && l > 0.) Q.xy = mix(Q.xy,mouseVelocity,.5);\n                Q.w *= 1.01;\n            }\n        if (length(U - obstacleCenter) < radius) {\n            vec2 normal = normalize(U - obstacleCenter); \n            Q.xyzw*=0.;\n        }\n    }\n    \n    \n    Q.x += 0.0002;\n    float noiseIntensity = 0.001;\n    vec2 randomNoise = vec2(2.*texture(iChannel2,5.*U / iResolution.xy).r-1.);\n    Q.xy += randomNoise * noiseIntensity;\n    if (U.x < 1. || U.y < 1. || R.x - U.x < 1. || R.y - U.y < 1.) Q.xyzw*=0.;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n// Gradient Noise (http://en.wikipedia.org/wiki/Gradient_noise), not to be confused with\n// Value Noise, and neither with Perlin's Noise (which is one form of Gradient Noise)\n// is probably the most convenient way to generate noise (a random smooth signal with \n// mostly all its energy in the low frequencies) suitable for procedural texturing/shading,\n// modeling and animation.\n//\n// It produces smoother and higher quality than Value Noise, but it's of course slighty more\n// expensive.\n//\n// The princpiple is to create a virtual grid/latice all over the plane, and assign one\n// random vector to every vertex in the grid. When querying/requesting a noise value at\n// an arbitrary point in the plane, the grid cell in which the query is performed is\n// determined, the four vertices of the grid are determined and their random vectors\n// fetched. Then, the position of the current point under  evaluation relative to each\n// vertex is doted (projected) with that vertex' random vector, and the result is\n// bilinearly interpolated with a smooth interpolant.\n\n// All noise functions here:\n//\n// https://www.shadertoy.com/playlist/fXlXzf&from=0&num=12\n\n\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n#if 0\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n    \n#else\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n#endif                              \n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);// + iTime*0.25;\n\t\n\tfloat f = 0.0;\n\t\n    // left: noise\t\n\t//if( p.x<0.6 )\n\t{\n\t\tf = noise( 32.0*uv );\n\t}\n    /*\n    // right: fractal noise (4 octaves)\n    else\t\n\t{\n\t\tuv *= 8.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); uv = m*uv;\n\t}\n    */\n\tf = 0.5 + 0.5*f;\n\t\n    //f *= smoothstep( 0.0, 0.005, abs(p.x-0.6) );\t\n\t\n\tfragColor = vec4( f, f, f, 1.0 );\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Enable arrow\n#define SHOW_ARROW 1\n\n//Enable obstacle\n#define ENABLE_OBSTACLE 1\n#define OBSTACLE_RADIUS 30.\n\n//Enable obstacle movement\n#define ENABLE_OBSTACLE_MOVEMENT 0\n\n//Enable mouse-controlled obstacle\n#define MOUSE_OBSTACLE 1","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// keep track of mouse\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texture(iChannel0,fragCoord/iResolution.xy);\n    if (iMouse.z>0.) {\n        if (p.z>0.) fragColor =  vec4(iMouse.xy,p.xy);\n    \telse fragColor =  vec4(iMouse.xy,iMouse.xy);\n    }\n    else fragColor = vec4(-iResolution.xy,-iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"}]}