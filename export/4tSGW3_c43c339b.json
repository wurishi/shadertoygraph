{"ver":"0.1","info":{"id":"4tSGW3","date":"1432768335","viewed":1159,"name":"Faking gold and murder","username":"denzen","description":"Experimenting with warping and fractional brownian motion. Implemented the latter with this algorithm: http://bit.ly/1FjCaS5 using the ashima simplex noise function. I probably have a lot of optimization to do.\nAnd of course: http://bit.ly/1GHSZul\n","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* ~~~ Util: Ashima Webgl Noise ~~~ */\n\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n/* ~~~ End Webgl Noise ~~~ */\n\n\n#define NB_OCTAVES 6\n#define LACUNARITY 2.0\n#define GAIN 0.5\n\nfloat fbm(in vec2 p) {\n    float total = 0.0,\n          frequency = 1.0,\n          amplitude = 1.0;\n    \n    for (int i = 0; i < NB_OCTAVES; i++) {\n        total += snoise(p * frequency) * amplitude;\n        frequency *= LACUNARITY;\n        amplitude *= GAIN;\n    }    \n    return total;\n}\n\nfloat t;\nfloat c1, c2, s1, s2;\n\nfloat pattern(in vec2 p, out float c) {\n    float t = iTime;\n    vec2 q = vec2( fbm( p + vec2(0.0, 0.0) ),\n                  fbm(  p + vec2(c2*.1, t*.02)) );\n\n    c = fbm( p + 2.0*q + vec2(c1+c2,-t*.01));\n    return fbm( p + 2.0*q );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    t = iTime;\n    \n    c1 = 0.1 + cos(t * 0.01) * 0.9; c2 = 0.4 + cos(t * 0.06) * 0.4;\n    s1 = sin(t * 0.03); s2 = sin(t*0.3);\n    \n    vec2 p = vec2(uv.x + c1 * 0.4 + c2 * 0.6, uv.y * 0.3 );\n\n    p.x *= 0.4+ c2 * 0.4;\n\n    float c;\n    vec3 col = vec3(pattern(p, c));\n    col.r = .6+mix(col.x, c, .2);\n    col.b = 0.2+mix(col.x, c, .5)*.1;\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}