{"ver":"0.1","info":{"id":"dtSyWc","date":"1692350417","viewed":43,"name":"chrome hyperbolic paraboloid","username":"Efim","description":"https://en.wikipedia.org/wiki/Paraboloid","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","reflection","paraboloid","hyperboloid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nmat3 rotateX(float f)\n{\n    return mat3(\n    vec3(1.0,    0.0,      0.0),\n    vec3(0.0,\t cos(f),  -sin(f)), \t\n\tvec3(.0, sin(f), cos(f))\n    );\n}\n\n\nmat3 rotateZ(float f)\n{\n    return mat3(\n    vec3(cos(f),    -sin(f),  0.0),\n    vec3(sin(f),\t cos(f),  0.0), \t\n\tvec3(0.0, 0.0, 1.0)\n    );\n    \n}\n\n\nmat3 rotateY(float f)\n{\n    return mat3(\n    vec3(cos(f), 0.0,  sin(f)),\n    vec3(0.0,\t 1.0,  0.0), \t\n\tvec3(-sin(f), 0.0, cos(f))\n    );\n}\n\n\nstruct HIT\n{\n    float dist;\n    vec3 nor;\n    vec3 pos;\n};\n\n\nconst float dist_infin = 100000.0;\nconst HIT hit_inf = HIT(100000.0, vec3(0.0), vec3(0.0));\n\nvec3 calcSkyReflect(vec3 rd, vec3 nor, mat3 sky)\n{\n    vec3 n = nor;\n    float d = dot(rd, nor);\n    n = nor*sign(d);\n    vec3 r = reflect(rd, n);\n    vec3 col = texture(iChannel0, r).rgb;\n    return col;\n\n}\n\nvec3 culccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light, vec3 nor)\n{\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if (d < 0.0)\n        col = backcol;\n    \n    nor *= -sign(d);\n    float difu = dot(nor, light);\n    col *= clamp(difu, 0.05, 1.0);\n    return col;   \n}\nHIT giperI(vec3 ro, vec3 rd, float ax, float by, float h, float t)\n{\n    if (t > 0.0)\n        return hit_inf;\n    vec3 pos = ro + rd*t;\n    if (length(pos) > h)\n        return hit_inf;\n    float dist = length(ro - pos);\n    vec3 nor = vec3(-2.0*pos.x/ax/ax, 2.0*pos.y/by/by, -1.0);\n    nor = normalize(nor);\n    return HIT(dist, nor, pos);\n}\n\nHIT giper3D(vec3 ro1, vec3 rd1, float ax, float by, float h)\n{\n    vec3 ro = vec3(ro1.x/ax, ro1.y/by, ro1.z);\n    vec3 rd = vec3(rd1.x/ax, rd1.y/by, rd1.z);\n    float a = -rd.x*rd.x + rd.y*rd.y;\n    float b = 2.0 * (-ro.x*rd.x + ro.y*rd.y) - rd.z;\n    float c = -ro.x*ro.x + ro.y*ro.y - ro.z;\n    float d = b*b - 4.0*a*c;\n    if (d < 0.0)\n        return hit_inf;\n\n    \n    d = pow(d, 0.5);\n    float t1 = (-b + d)/2.0/a;\n    float t2 = (-b - d)/2.0/a;\n\n    HIT r = hit_inf;\n    HIT r1 = giperI(ro1, rd1,  ax,  by,  h,  t1);\n    if (r1.dist < r.dist)\n        r = r1;\n    \n    HIT r2 = giperI(ro1, rd1,  ax,  by,  h,  t2);\n    if (r2.dist < r.dist)\n        r = r2;\n\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 light = normalize(vec3(2.0, 1.0, -1.0)); //light\n\n\tvec3 ro = vec3(0.0, 0.0, 70.0); // camera\t\n    const float fl = 2.5; // focal length\n\n    vec3 rd = normalize( vec3(p,fl) ); // ray direction\n    float t = iTime;\n\t\n    vec3 col = vec3(0.7, 0.7, 0.9); // background\n    //t = 0.0;\n    \n    float dist = dist_infin;\n    mat3 rota  = rotateX(-t)*rotateZ(PI/3.0+t/3.0);\n    mat3 rota_1  = rotateZ(-PI/3.0-t/3.0)*rotateX(t);\n    mat3 sky = rotateZ(0.0)*rotateX(PI/2.0);\n    \n\n\n    HIT giper = giper3D(rota*(ro), rota*rd, 5.0, 5.0, 20.0);\n    if (giper.dist < dist)\n    {\n        col = vec3(1.0, 1.0, 0.0);\n        vec3 backcol = vec3(0.0, 1.0, 1.0);\n        vec3 nor = rota_1*giper.nor;\n        //col = culccolor(col, backcol, rd, light, nor);\n        // gamma\n        //col = pow( col, vec3(0.4545) ); \n        //reflect\n        col = calcSkyReflect(rd, nor, sky);\n    }\n    \n   \n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}