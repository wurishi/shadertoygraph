{"ver":"0.1","info":{"id":"mdXczf","date":"1687043996","viewed":55,"name":"Redline fractal","username":"HawkOfCinders","description":"A simple shader based on kishimisu's introductional tutorial to shader art coding.\n\nhttps://www.youtube.com/watch?v=f4s1h2YETNY","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float angle){\n\treturn mat2(\n\tcos(angle), -sin(angle),\n\tsin(angle), cos(angle)\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float lineScale = 0.35;\n    const float neonBlur = 0.01;\n    const float frequency = 50.0;\n    const float timeScale = 0.5;\n    const float rotationSpeed = 0.2;\n    \n    vec2 uv = (fragCoord.xy*2.0 - iResolution.xy) / iResolution.y;\n   \tvec2 uv0 = uv;\n   \tvec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 2.0; i++){\n    \tuv = rotate((iTime * timeScale) * rotationSpeed) * uv0;\n    \tuv = fract(uv * 1.5)- 0.5;\n    \t\n    \t\n    \tfloat d = length(uv)*0.3;\n    \td *= exp(-length(uv0));\n    \td = sin(d * frequency + iTime * timeScale);\n    \td = abs(d);\n    \td = smoothstep(0.0, lineScale, d);\n    \n    \tfinalColor += neonBlur / d;\n    }\n   \n    fragColor = vec4(finalColor.x, 0, 0, 1.0);\n}","name":"Image","description":"","type":"image"}]}