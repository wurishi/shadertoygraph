{"ver":"0.1","info":{"id":"ct2yzt","date":"1692187375","viewed":39,"name":"Fork SoundEclip Jeusus 468","username":"Jeusus","description":"This is optimized to look best on my tv with a lotta transparent overlays and all\nI'll be the first to admit that its a little bright on a \"normal\" display","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["audiovisualization"],"hasliked":0,"parentid":"4tGXzt","parentname":"SoundEclipse"},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// credit: https://www.shadertoy.com/view/4tGXzt\n\n#define PI_INV .3183099\n#define TAU_INV .1591549\n\nconst float FREQ_RANGE = 9.;\nconst float RADIUS = 0.6;\nconst float SATURATION = 0.75;\n\nvec3 hsl2rgb(vec3 c){\n    // credit for this function: https://www.shadertoy.com/view/XljGzV\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nfloat getfrequency_pure(float x) {\n\treturn texture(iChannel0, vec2(x, 0.0)).x;\n}\n\nfloat getfrequency(float x) {\n    float freq = floor(x * FREQ_RANGE + 1.) / FREQ_RANGE;\n\treturn texture(iChannel0, vec2(freq, 0.0)).x;\n}\n\nfloat getfrequency_smooth(float x) {\n\tfloat index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n\tfloat f = mix(getfrequency(index), getfrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n    return f*f;\n}\n\nfloat get_eclipse_darkness(float d, float r){\n    float b = d - r + 1.;\n    return pow(b, 50.);\n}\n\nvec3 doHalo(vec2 fragment, float radius) {\n    float f1 = getfrequency_pure(.0);\n    float f2 = getfrequency_pure(.0075); // **should** be ~90hz\n    f1 = f1 * f2 + f1 + f2;\n    radius *= f1 * .3 * .25 + 1.;\n\n\tfloat dist = length(fragment);\n\tfloat ring = .5 / (abs(dist - radius) + .25);\n\tfloat angle = atan(fragment.x, fragment.y);\n\n    // the eclipse itself\n\tfloat b = radius < dist ? 1. : get_eclipse_darkness(dist, radius);\n\n\tvec3 col = vec3(0.0);\n    float hue = angle * TAU_INV + sin(iTime * 6.28318 * .125) * .05 + .1;\n\n    float volume = max(getfrequency_smooth(cos(angle * 2.) * .45 + .45), 0.) + .05;\n    float val = volume * b * ring;\n\n\tcol += hsl2rgb(vec3(hue, SATURATION, val));\n\n\treturn col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 fragPos = fragCoord / iResolution.xy;\n\tfragPos = (fragPos - 0.5) * 2.0;\n    fragPos.x *= iResolution.x / iResolution.y;\n\n\tvec3 color = vec3(0.0134, 0.052, 0.1);\n\tcolor += doHalo(fragPos, RADIUS);\n\n    /*\n    if(abs(fragPos.x - 1./FREQ_RANGE) < .005)\n        color = vec3(0,0,1);\n    if(abs(fragPos.x) < .005)\n        color = vec3(0,1,0);\n    if(fragPos.y < getfrequency_pure(fragPos.x))\n        color = vec3(1,1,0);\n    if(fragPos.y < getfrequency_smooth(fragPos.x))\n        color = vec3(1,0,0);\n        */\n\n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}