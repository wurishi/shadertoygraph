{"ver":"0.1","info":{"id":"wtlyDS","date":"1592988345","viewed":82,"name":"Archimedean Spiral (antialiased)","username":"Ultraviolet","description":"This shader draws an antialiased Archimedean Spiral.\nUse mouse to zoom.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","vectorgraphics","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat spiral_coord_1(vec2 p) {\n    \n\tfloat l = length(p);\n\tfloat alpha = -atan(p.y/l,p.x/l)/PI/2.;\n    return (ceil(l+alpha)-alpha);\n}\n\nfloat spiral_coord_2(vec2 p) {\n    \n\tfloat l = length(p);\n    vec2 norm_vec = vec2(cos(2.*PI*l), sin(2.*PI*l));\n\tfloat res = acos(dot(p/l, norm_vec))/PI;\n    res *= sign(cross(vec3(p/l, 0), vec3(norm_vec, 0)).z);\n    //if(cross(vec3(p/l, 0), vec3(norm_vec, 0)).z<0.)\n    //    res = 1.-res;\n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    vec2 p = (fragCoord -iResolution.xy*.5)*pixelSize;\n    \n    vec3 col = vec3(1.);\n    float d;\n    \n    \n    //col = vec3(spiral_coord_1(p)/spiral_coord_1(iResolution.xy*.5*pixelSize));\n    col = vec3(.9+.1*sin(spiral_coord_2(p)*PI*3.)*sin(spiral_coord_2(p)*PI*3.));\n    \n    //col = vec3(mod(spiral_coord_1(p),2.) < 1.);\n    //col = vec3((mod(spiral_coord_2(p), 0.5) < .25) != (spiral_coord_2(p) < 0.5));\n        \n    // Background grid\n    DRAW(Grid(1.), p, vec3(.5), .5, col);\n    \n    // Axis\n    DRAW(Ray(vec2(0.), vec2(1.,0.)), p, vec3(.1), 1., col);\n    DRAW(Ray(vec2(0.), vec2(0.,1.)), p, vec3(.1), 1., col);\n    \n    DRAW(Spiral(vec2(0.), 0.0), p, vec3(.9,.1,.1), 1., col);\n\n    \n    fragColor = vec4(col, 0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI\t3.1415926535\n\n//#define zoom    \t(5.+10.*iMouse.x/iResolution.x)\n#define zoom    \t(.5/abs((iMouse.x/iResolution.x - 0.5)))\n#define pixelSize\t(zoom/iResolution.y)\n\n\nstruct Circle\n{\n    vec2 ctr;\n    float rad;\n};\n    \nstruct Ray\n{\n    vec2 org;\n    vec2 dir;\n};\n    \nstruct Segment\n{\n    vec2 A;\n    vec2 B;\n};\n    \nstruct Spiral\n{\n    vec2 org;\n    float angle;\n};\n    \nstruct Grid\n{\n    float inter;\n};\n\nfloat dist(Ray r, vec2 p)\n{\n    return abs(dot(r.dir.yx*vec2(-1., 1.), p-r.org)/dot(r.dir, r.dir));\n}\n\nfloat dist(Spiral s, vec2 p)\n{\n//    float l = sqrt(p.x*p.x+p.y*p.y);\n//    float alpha = atan(p.y,p.x)/PI/2.;\n//    return ceil(l+alpha)-alpha;\n    \n\tfloat l = length(p-s.org);\n\treturn acos(dot(p/l, vec2(cos(2.*PI*l+s.angle), sin(2.*PI*l+s.angle))))/PI/2.;\n\t//return (1.-dot(p/l, vec2(cos(PI*l+s.angle), sin(PI*l+s.angle))))*2.*PI;\n}\n\nfloat dist(vec2 p0, vec2 p1)\n{\n    return length(p1-p0);\n}\n\nfloat dist(Circle c, vec2 p)\n{\n    return abs(length(c.ctr-p)-c.rad);\n}\n\nfloat dist(Segment s, vec2 p)\n{\n\tvec2 pa = p-s.A, ba = s.B-s.A;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n    \n}\n\nfloat dist(Grid g, vec2 p)\n{\n    vec2 d = mod(p,g.inter);\n    d = min(d, g.inter-d);\n    return min(d.x, d.y);\n}\n\n#define DRAW(O,P,C,W, CC)\tCC=mix(CC,C,mix(1.,0.,clamp(dist(O,P)/pixelSize - W, -1., 1.)*.5+.5))\n\n\n\n\n","name":"Common","description":"","type":"common"}]}