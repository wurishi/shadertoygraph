{"ver":"0.1","info":{"id":"M3lyWf","date":"1726747794","viewed":144,"name":"Fork Fork spark Lionel 772","username":"Lionel","description":"3d proj of 4d ","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d"],"hasliked":0,"parentid":"M3lyWj","parentname":"Fork sparkly4d  Lionel 181"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h,id)  (  cos( h*2.*cos(iTime/2.+length(id)) + 40.*vec3(1,2,.3)   )*.6 + .5 )\n\n#define H2(h)  (  cos(  h/2. + vec3(3,2,1)   )*.7 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .5*R.y, R.y))*300.;\n    \n    float sc,dotp,totdist=0., tt=iTime/7., t=iTime/2.;\n    \n    for (float i=0.; i<120.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n            \n        p.xyz += vec3(.5*sin(t),.5*cos(t/2.),-1.+sin(t/5.)); \n        \n       \n        p.xz *= rot( tt/2. + sin(tt));\n             \n        p.yzw = ROT(p.xyz,normalize(vec3(cos(t/2.),sin(t/3.),sin(t/5.))),t/2.);\n        \n        p.xw  =  sin(p.xw);\n        \n        vec2  id = (p.xw);\n        \n        sc = 1.; \n     \n        vec4 w = p;\n        \n        for (float j=0.; j<5.; j++) {\n          \n            p = abs(p)*.6;\n       \n            dotp = max(1./dot(w,w),.3);\n            sc *= dotp; \n            \n            p = p * dotp - .45; \n            \n            w = .9*log(1.+log(1.+log(1.+p)*p)*p) - vec4(.3,.1,.2,.3); \n                \n            \n        }\n         \n        float dist = abs( length(p)-.1)/sc ;  //funky distance estimate\n        float stepsize = dist/15. ;     \n        totdist += stepsize;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c +=\n            0.02* H2(  atan( p.w, p.z )) * exp(-i*i*1e-3)\n             + .04 * mix( vec3(1), H(M(sc),id),.95) * exp(-i*i*stepsize*stepsize*2e4);\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}