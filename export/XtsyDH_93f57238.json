{"ver":"0.1","info":{"id":"XtsyDH","date":"1504724384","viewed":486,"name":"Torchlight Test","username":"ackleyrc","description":"Shader to replicate glow of a flickering torchlight. Change the position with the mouse. Torchlight gradually diminishes in size until it completely dies out. For potential use in 2D roguelike, Fool's Gold: https://ehgoodenough.github.io/fools-gold/","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","flame","fire","light","glow","vignette","flicker","myfirstshader","prng","coherentnoise","torch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float seed)\n{\n\t// Very simple pseudo-random number generator\n    // Returns a value between 0 and 1\n    // Preferentially returns the midrange\n    return mod(fract(sin(seed * 6789.54321)) + 0.5, 1.0);\n}\n\nfloat coherentNoise(float seed)\n{\n\tfloat a = floor(seed);\n    float b = ceil(seed);\n    float rA = rand(a);\n    float rB = rand(b);\n    if (rA == rB) {\n        return rA;\n    } else {\n        float nT = (1.0 - (b - seed)) / (b - a);\n        float cT = nT * nT * (3.0 - 2.0 * nT);\n        return rA + (cT * (rB - rA));\n    }\n}\n\nfloat multiOctaveNoise(float seed, int numOcts, float lacunarity, float persistence)\n{\n    float sum = 0.0;\n    for (int i = 0; i < numOcts; ++i)\n    {\n        float oct = coherentNoise(seed * pow(lacunarity, float(i)));\n        sum += oct * pow(persistence, float(i));  \n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = vec2(0.5,0.5);\n    if (iMouse.xy != vec2(0.0,0.0))\n    {\n        m = iMouse.xy / iResolution.xy;\n    }\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= m;\n    uv.x *= iResolution.x/iResolution.y;\n    float d = length(uv);\n    float speed = 1.3;\n    float decayTime = 120.0; // How long until the torchlight completely dies out\n    float variation = multiOctaveNoise(iTime * speed, 3, 2.5, 0.75);\n    float redRadius = 0.475 + (0.025 * variation);\n    float redDecayed = redRadius * clamp((decayTime - iTime) / decayTime, 0.0, decayTime);\n    float redComp = smoothstep(redDecayed, redDecayed-0.25, d);\n    float yellowRadius = 0.375 + (0.025 * variation);\n    float yellowDecayed = yellowRadius * clamp((decayTime - iTime) / decayTime, 0.0, decayTime);\n    float greenComp = smoothstep(yellowDecayed, yellowDecayed-0.25, d);\n\tfragColor = vec4(redComp, greenComp, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}