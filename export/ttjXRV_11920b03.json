{"ver":"0.1","info":{"id":"ttjXRV","date":"1566568872","viewed":89,"name":"roughness of spheres","username":"Murloc_Knight","description":"Â ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define r 0.1\n#define roughness 4.0\n\nvec2 myRound(vec2 a,float c){\n\tvec2 b = round(a/c);\n    return b*c;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightPos = vec3((iMouse.xy / iResolution.xy - 0.5)*10.0,2.0);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv -= 0.5;\n    vec2 c = myRound(uv,r*2.0);\n    vec3 FragPos = vec3(uv,1.0 - length(uv - c)/r);\n    \n    vec3 norm = normalize(vec3(uv - c, 1.0 - length(uv - c)/r));\n    norm.x += (rand(c*2.0) - rand(uv*2.0)) * length(c)/roughness;\n    norm.y += (rand(c*3.0) - rand(uv*3.0)) * length(c)/roughness;\n    norm.z += (rand(c*4.0) - rand(uv*4.0)) * length(c)/roughness;\n    \n    vec3 lightDir = normalize(lightPos - FragPos);\n    float diff = max(dot(norm, lightDir), 0.0);\n    \n    vec3 col = vec3(diff) * step(length(uv - c),r);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}