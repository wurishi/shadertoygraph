{"ver":"0.1","info":{"id":"td3Gz4","date":"1567898968","viewed":129,"name":"Tile with light source","username":"Fieu","description":"Just my small experiment with color diffuse on a tile.\nSince tile is a 2d plane, it has always constant vector normal that points upwards.\nI avoided specular reflection assuming my tile is made of non-reflective material.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["texture","light","lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float lightIntensity = 0.02;\nconst float lightHeight = 0.15;\n\nvec3 diffuse(vec2 p, vec3 ambient, vec3 diffColor, vec3 lightPos, float intensity) {\n    vec3 n = vec3(0.0, 0.0, 1.0);\n    vec3 lightRay = lightPos - vec3(p, 0.0);\n    vec3 l = normalize(lightRay);\n    \n    return ambient\n        + diffColor * max(0.0, dot(n, l) / dot(lightRay, lightRay) * intensity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    vec3 ambient = vec3(0.05, 0.1, 0.2) * col.rgb;\n    vec3 diffColor = vec3(1.0, 1.0, 1.0) * col.rgb;\n    vec3 lightPos = vec3(iMouse.xy / iResolution.xy, lightHeight);\n    \n    col.rgb = diffuse(uv, ambient, diffColor, lightPos, lightIntensity);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}