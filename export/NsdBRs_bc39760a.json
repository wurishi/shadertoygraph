{"ver":"0.1","info":{"id":"NsdBRs","date":"1657031457","viewed":97,"name":"Quaternionbrot","username":"mattdeeds","description":"Regular Mandelbrot set calculated using quaternions.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define kIterations 50\n#define kScale 2.0\n#define kSpeed 0.1\n#define kSlope 0.7\n\n\nvec4 qMultiply(in vec4 a, in vec4 b) {\n  // https://en.wikipedia.org/wiki/Quaternion\n  // Hamilton product\n  \n  return vec4(\n    a.x * b.x - a.y * b.y - a.z * b.z - a.w * b.w,\n    a.x * b.y + a.y * b.x + a.z * b.w - a.w * b.z,\n    a.x * b.z - a.y * b.w + a.z * b.x + a.w * b.y,\n    a.x * b.w + a.y * b.z - a.z * b.y + a.w * b.x);\n}\n\nvec4 sSin(in vec4 x) {\n  return sin(x * kSlope);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord/iResolution.xy) - 0.5) * kScale * vec2(2.0, 1.0);\n\n    float t = 0.1 * iTime;\n    vec4 a = vec4(cos(t) * uv.x, cos(t) * uv.y, sin(t) * uv.x, sin(t) * uv.y);\n    vec4 a0 = a;\n    \n    float escape = 0.0;\n    for (int i = 0; i < kIterations; ++i) {\n      if (length(a) < 1.5) {\n        a = qMultiply(a, a) + a0;\n        escape += 1.0;\n      }\n    }\n    vec3 col = a.xyz * (escape / float(kIterations));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}