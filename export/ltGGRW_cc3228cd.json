{"ver":"0.1","info":{"id":"ltGGRW","date":"1473429541","viewed":358,"name":"Kaleidoscope","username":"novogrammer","description":"Kaleidoscope for Movie or Webcam.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope","movie","imouse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float len2(vec2 v){\n    return dot(v,v);\n}\n\n// Get the rotation matrix from an axis and an angle (in radians)\nmat3 rotationAxisAngle( vec3 v,  float a )\n{\n    float si = sin( a );\n    float co = cos( a );\n    float ic = 1.0 - co;\n    return mat3( v.x*v.x*ic + co,       v.y*v.x*ic - si*v.z,    v.z*v.x*ic + si*v.y,\n                v.x*v.y*ic + si*v.z,   v.y*v.y*ic + co,        v.z*v.y*ic - si*v.x,\n                v.x*v.z*ic - si*v.y,   v.y*v.z*ic + si*v.x,    v.z*v.z*ic + co );\n}\n\nvec2 repeatCoordHex(vec2 coord,float unitLength){\n    vec2 rect=vec2(unitLength*3.0,sin(radians(60.0))*unitLength*2.0);\n    vec2 rep=mod(coord,rect);\n    //0 1\n    // 4\n    //2 3\n    vec2 p[5];\n    p[0]=rep;\n    p[1]=vec2(rep.x-rect.x,rep.y);\n    p[2]=vec2(rep.x,rep.y-rect.y);\n    p[3]=rep-rect;\n    p[4]=rep-rect*0.5;\n    int shortestIndex=0;\n    float shortestLength=len2(p[0]);\n    for(int i=1;i<5;++i){\n        float l=len2(p[i]);\n        if(l<shortestLength){\n            shortestLength=l;\n            shortestIndex=i;\n        }\n    }\n    //return p[shortestIndex];\n    if(shortestIndex==0){\n        return p[0];\n    }else if(shortestIndex==1){\n        return p[1];\n    }else if(shortestIndex==2){\n        return p[2];\n    }else if(shortestIndex==3){\n        return p[3];\n    }else{\n        return p[4];\n    }\n}\n\nvec2 calcCoord(vec2 coord){\n    float l=length(coord);\n    float angle=atan(coord.y,coord.x);\n    const float rad60=radians(60.0);\n    angle=mod(angle,rad60*2.0);\n    if(angle>rad60){\n        angle=rad60*2.0-angle;\n    }\n    return vec2(cos(angle),sin(angle))*l;\n}\n\nvec2 rotateCoord(vec2 coord,float rotation){\n    \n    return (rotationAxisAngle(vec3(0,0,1),rotation)*vec3(coord,1)).xy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat unitLength=(sin(iTime*0.5)+1.5)*100.0;\n    \n    float rotation=iTime*0.1;\n    vec2 center=iMouse.xy;\n    if(len2(center.xy)==0.0){\n        center=iResolution.xy/2.0;\n    }\n    vec2 scopeCenter=vec2(unitLength*0.5,unitLength*0.5/sqrt(3.0));\n    vec2 texCoord =\n        rotateCoord(\n            calcCoord(\n                repeatCoordHex(\n                    rotateCoord(\n                        fragCoord.xy-center,\n                        rotation\n                    )+scopeCenter,\n                    unitLength\n                )\n            )-scopeCenter,\n            -rotation\n        )+center;\n    \n    fragColor=texture(iChannel0,mod(texCoord,iResolution.xy)/iResolution.xy);\n}","name":"Image","description":"","type":"image"}]}