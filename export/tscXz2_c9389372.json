{"ver":"0.1","info":{"id":"tscXz2","date":"1572381460","viewed":563,"name":"change sphere","username":"zrcoy","description":"Sphere changes","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DIST_SURFACE .001f\n#define DIST_MAX 1000.f\n#define MAX_STEPS 100\n\nfloat remap(float a, float b, float t)//ramap t from a-b to 0-1\n{\n \treturn (t-a) / (b-a);   \n}\n\nfloat dsSphere(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat dsWholeMap(vec3 p)\n{\n    float displacement = sin(5.0 * p.x + iTime *5.f) * sin(5.0 * p.y + iTime * 5.f) * sin(5.0 * p.z + iTime * 5.f) * .15f;\n \tfloat dSphere = dsSphere(p, vec3(0), 2.f);\n    \n    return dSphere + displacement;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    vec2 swizzle = vec2(.001f, 0);\n \tfloat gradient_x = dsWholeMap(p + swizzle.xyy) - dsWholeMap(p - swizzle.xyy);\n    float gradient_y = dsWholeMap(p + swizzle.yxy) - dsWholeMap(p - swizzle.yxy);\n    float gradient_z = dsWholeMap(p + swizzle.yyx) - dsWholeMap(p - swizzle.yyx);\n    \n    return normalize(vec3(gradient_x, gradient_y, gradient_z));\n}\n\nfloat GetLightDifuse(vec3 p, vec3 lightP)\n{\n    vec3 normal = GetNormal(p);\n    vec3 dirToL = normalize(lightP - p);\n    float f = remap(-1.f, 1.f, dot(normal, dirToL));\n    return f;\n}\n\nvec3 RayMarching(vec3 ro, vec3 rd)\n{\n \tfloat totalDist = 0.f;\n    for(int i=0; i<MAX_STEPS;i++)\n    {\n     \tvec3 currentPos = ro + rd * totalDist;\n        vec3 center = vec3(0);\n        float dS = dsWholeMap(currentPos);\n        if(dS < DIST_SURFACE)\n        {\n            vec3 lightPos = vec3(4.f * sin(iTime) ,4.f ,4.f * cos(iTime));\n            float difuse = GetLightDifuse(currentPos, lightPos);\n            //vec3 col = vec3(1.f,0,0);\n            vec3 col = 0.5 + 0.5*cos(iTime+currentPos.xyx+vec3(0,2,4));\n         \treturn  difuse * col;   \n        }\n        if(dS > DIST_MAX)\n            break;\n        \n        totalDist += dS;\n    }\n    \n    return vec3(0);\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.f - 1.f;// make it -1 - 1\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //primitive camera\n    vec3 ro = vec3(0,0.f,-5.f);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.f));\n    \n    vec3 col_sphere = RayMarching(ro, rd);\n    \n    fragColor = vec4(col_sphere, 1.f);\n}","name":"Image","description":"","type":"image"}]}