{"ver":"0.1","info":{"id":"sldSWN","date":"1639494549","viewed":72,"name":"mandelbrot cool","username":"random_online_name","description":"very cool shape","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iterateMandelbrot(vec2 coord);\nvec2 squareImaginary(vec2 number);\nvec2 modifyCentre(vec2 centre, float scale);\nconst int maxIterationsInt = 1024;\nconst float maxIterations = float(maxIterationsInt);\nconst int AA = 2;\n\n// Official HSV to RGB conversion \nvec3 hsv2rgb(in vec3 c) {\n    vec3 rgb = clamp(\n        abs(mod(c.x*6.0+vec3(0., 4., 2.), 6.) - 3.) - 1.,\n        0.0, 1.0);\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec4 getColor(vec2 uv)\n{\n   int escapeTime = int(iterateMandelbrot(uv));\n   \n   if(escapeTime < maxIterationsInt){\n       float colourStartVal = 1.0 - log(float(escapeTime % 256)) / log(256.0);\n       return vec4(hsv2rgb(vec3(log(colourStartVal),1.0,1.0)),1.0);\n   }else{\n       return vec4(0.0,0.0,0.0,1.0);\n   }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n   float scale = 1.0/pow(1.5, texelFetch(iChannel0, ivec2(2,0),0).x/4.0);\n   float offset = 0.0;\n   \n   fragColor = vec4(0.0,0.0,0.0,0.0);\n       \n   vec2 centre = vec2(texelFetch(iChannel0, ivec2(0,0),0).x,texelFetch(iChannel0, ivec2(1,0),0).x);\n   \n   for( float m=0.0; m<1.0; m+=1.0/float(AA) )\n   for( float n=0.0; n<1.0; n+=1.0/float(AA) )\n   {\n       vec2 uv = ((fragCoord.xy + vec2(n, m))/iResolution.xy)*2.0 - 1.0;\n\n       float aspectRatio = iResolution.y / iResolution.x;\n       uv.y = aspectRatio * uv.y;\n\n       uv *= (scale*4.0);\n       uv += centre;\n       \n       fragColor += getColor(uv)/(float(AA*AA));\n   }\n}\n\nvec2 squareImaginary(vec2 number, float power){\n\treturn vec2(\n\t\tpow(number.x,power)-pow(number.y,power),\n\t\t2.0*number.x*number.y\n\t);\n}\n\nfloat iterateMandelbrot(vec2 coord){\n\tvec2 z = vec2(0,0);\n\tfor(int i=0;i<maxIterationsInt;i++){\n\t\tz = squareImaginary(z, 2.0) + coord;\n\t\tif(length(z)>2.0){\n            return float(i);\n        }\n\t}\n\treturn maxIterations;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float[4] values = float[4](0.0,0.0,0.0,0.0);\n\nfloat setVariable(int bufferAddress, float value);\nfloat readVariable(int bufferAddress);\n\nbool isKeyPressed(int key)\n{\n\treturn texelFetch(iChannel1, ivec2(key,0), 0 ).x > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y < 1.0 && int(fragCoord.x) < 4)\n    {\n        float scale = 1.0/pow(1.5, texelFetch(iChannel0, ivec2(2,0),0).x/4.0);\n        \n        int x = int(fragCoord.x);\n        \n        values[0]=readVariable(x);\n        \n        float slow = 1.0;\n                \n        if(isKeyPressed(16)){\n            slow = 0.2;\n        }\n        \n        if(isKeyPressed(37) && x == 0){\n            values[0] -= 0.1 * scale * slow;\n        }\n        \n        if(isKeyPressed(39) && x == 0){\n            values[0] += 0.1 * scale * slow;\n        }\n        \n        if(isKeyPressed(38) && x == 1){\n            values[0] += 0.1 * scale * slow;\n        }\n        \n        if(isKeyPressed(40) && x == 1){\n            values[0] -= 0.1 * scale * slow;\n        }\n        \n        if(isKeyPressed(32) && x == 2){\n            values[0] += 1.0 * slow;\n        }\n        \n        if(isKeyPressed(13) && x == 2){\n            values[0] -= 1.0 * slow;\n        }\n\n        fragColor = vec4(values[0], 0.0, 0.0, 0.0);\n    }\n}\n\nfloat readVariable(int bufferAddress)\n{\n    return texelFetch(iChannel0, ivec2(bufferAddress,0),0).x;\n}\n\nfloat setVariable(int bufferAddress, float value)\n{\n    return values[bufferAddress] = value;\n}","name":"Buffer A","description":"","type":"buffer"}]}