{"ver":"0.1","info":{"id":"ttsyRS","date":"1592476015","viewed":115,"name":"shitball's explosion","username":"shitball","description":"Main reference\nhttps://github.com/ssloy/tinykaboom/wiki/KABOOM!-in-180-lines-of-code","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["explosion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere_radius;\nfloat sphere_radius_square; //= sphere_radius * sphere_radius;\nconst float eps = 0.01;\nconst vec3 background = vec3(0.1,0.2,0.5);\nconst float upper_bound = 6.;\n\nfloat hash(float num){\n    return fract(sin(num) * 11451.419);\n}\n\nfloat noise(vec3 pos){\n    vec3 p = floor(pos);\n    vec3 f = fract(pos);\n    \n    const vec3 a = vec3(1.,57.,113.);\n    \n    f = smoothstep(0.,1.,f);\n    float n = dot(p,a);\n    \n    return mix(\n       mix(\n            mix(hash(n),hash(n + 1.),f.x),mix(hash(n + 57.),hash(n + 58.),f.x),f.y\n       ),\n       mix(\n       \t\tmix(hash(n + 113.),hash(n + 114.),f.x),mix(hash(n + 170.),hash(n + 171.),f.x),f.y\n       ),\n       f.z\n    );\n}\n\nfloat fbm(vec3 pos){\n    float f = 0.;\n    f += noise(pos) * 0.5;pos *= 2.;\n    f += noise(pos) * 0.25;pos *= 2.;\n    f += noise(pos) * .125;pos *= 2.;\n    f += noise(pos) * .0625;pos *= 2.;\n    return f / 0.9375;\n}\n\n//The sphere's position is (0,0,0),radius is 4\nbool intersectSphere(vec3 rd,vec3 o,out float near,out float far){\n    float b = 2.0 * dot(rd,o);\n    float c = dot(o,o) - sphere_radius_square;\n    \n    float delta = b*b - c*4.0;\n    if(delta < 0.0) return false;\n    delta = sqrt(delta);\n    \n    near = (-b - delta) / 2.0;\n    far = (-b + delta) /2.0;\n    \n    return far > 0.0;\n}\n\nfloat surface_distance(vec3 pos){\n    float radius = sphere_radius;\n    \n    radius -= fbm(pos.xyz) * radius;\n    return length(pos) - radius;\n}\n\nbool marching(out vec3 pos,vec3 dir){\n    for(int i = 0;i != 128;i++){\n        float d = surface_distance(pos);\n        if(d <= 0.) return true;\n        float st = max(d * 0.1,0.02);\n        pos += st * dir;\n    }\n    return false;\n}\n\nvec3 getDir(vec2 coord){\n    return normalize(\n        vec3((coord - iResolution.xy * 0.5) / iResolution.y , 1.0)\n    );\n}\n\n//direction of the normal on a surface equals \n//the gradient of the function which calculates \n//the distance from a point to the geometry's \n//surface\nvec3 distance_normal(vec3 pos){\n    float d = surface_distance(pos);\n    return normalize(vec3(\n    surface_distance(pos + vec3(eps,   0,   0)) - d,\n    surface_distance(pos + vec3(  0, eps,   0)) - d,\n    surface_distance(pos + vec3(  0,   0, eps)) - d\n    ));\n}\n\nfloat speed(float time,float loop,float bound){\n    time = mod(time,loop);\n    return bound * (pow(time,5.14))/ (pow(loop, 5.14));\n}\n\n\nvec3 flare_color(vec3 pos){\n    float d = length(pos) / 4.;\n    \n    const vec3 center = vec3(2.0,1.5,1.5);\n    const vec3 inside = vec3(1.0,0.7,0);\n    const vec3 edge = vec3(1.0,0.,0.);\n    const vec3 border = vec3(0.,0.,0.);\n    \n    vec3 color = center;\n    color = mix(color,inside,smoothstep(0.05,0.5,d));\n    color = mix(color,edge,smoothstep(0.5,0.75,d));\n    color =  mix(color,border,smoothstep(0.75,1.,d));\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = getDir(fragCoord);\n    vec3 pos = vec3(0,0,-10.);\n    \n    sphere_radius = speed(iTime,8.,6.);\n    sphere_radius_square = sphere_radius * sphere_radius;\n    \n    vec3 lightDir = getDir(iResolution.xy - iMouse.xy);\n\n    vec3 col = background,flare,diff;\n    \n    float near,far;\n    \n    if(intersectSphere(dir,pos,near,far)){\n        pos = pos + near * dir;\n        if(marching(pos,dir)){\n        \tdiff = vec3(1.0,1.0,1.0) * dot( lightDir, - distance_normal(pos));\n            flare = flare_color(pos);\n            col = step(.5,iMouse.z) * (diff - flare) + flare;\n        }\n    }\n    \n    //col = fbm(fragCoord.xy / iResolution.xy * 10.) * vec3(1,1,1);\n    fragColor = vec4(col, 0);\n}","name":"Image","description":"","type":"image"}]}