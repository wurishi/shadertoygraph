{"ver":"0.1","info":{"id":"X3jfRy","date":"1729615469","viewed":239,"name":"colorful connected spaceship","username":"nayk","description":"source from fractal 77","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["fractal","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nmat2 rot(float a) {\n\n    float s=sin(a) , c=cos(a);\n    \n    return mat2(c, -s, s, c);\n}    \n\nfloat star(vec2 uv, float flare) {\n\nfloat d = length (uv);\n\t\n\tfloat m = .05 / d;\n\t\n\tfloat rays = max (1. , 7. -abs (uv.x * uv.y * 1000.));\n\tm +=rays * flare;\n\tuv *=rot(3.1415/4.);\n    rays = max (0. , 1. -abs (uv.x * uv.y * 1000.));\n\tm +=rays*.3 * flare;\n    m *= smoothstep(1.,.2,d);\n    return m;\n  \n}  \n#define num_layers 6.\nfloat hash (vec2 p) {\n\n    p = fract(p*vec2(123.34,456.567));\n    p += dot(p, p+45.32);\n    return fract(p.x * p.y);\n}\n\nvec3 starlayer (vec2 uv)\n{\nvec3 col = vec3(0);\n\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    for (int y=-1;y<=1;y++) {\n        for (int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x,y);\n            float n = hash(id+offs); // random value\n            float size = fract(n*456.32);\n\n            float star1 = star (gv-offs-vec2(n,fract (n*34.))+.5, smoothstep(.85,1.,size));\n            \n            vec3 color = vec3(0.4+(sin(uv.y+uv.x*2.0+n*1121.43)*.5),0.5,1.);\t//sin(vec3(.2,.5,.9)*fract(n*4232.4)*6.28)*.5+.5;\n            //color = color * vec3(1.,1,1.);\n            //star1 *= sin(time*2.+n*12.56)*.5+1.;\n\t\tcolor.b *= 0.5+sin(n*17.7)*0.5;\n            col+= star1*size*color;\n            \n        }\n    }\n   return col;\n}\n#define time iTime\n#define resolution iResolution.xy\n#define n1Q(p) p *= 2.*ri(round(atan(p.x, p.y) * 4.) / 4.)\n#define ri(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\nvoid mainImage(out vec4 O, vec2 C)\n\n{\n    O=vec4(0);\n    vec2 uv = (C -.5 * resolution.xy) / resolution.y;\n\tuv = C.xy/resolution.xy * vec2(1.0, resolution.y / resolution.x);\n\tuv-=0.5;\n    //if (gv.x > .48 || gv.y > .48) col.r = 1.;\n    \n    vec3 col = vec3 (0.);\n    float t = time*.024+time/100.;\n\tuv *= rot(t);\n\n    for (float i=0.;i < 1.;i += 1./num_layers)\n    {\n    float depth = fract(i+t);\n    float scale = mix (20., .5, depth);\n    float fade = depth*smoothstep (1.,.9,depth);;\n\n    col+= starlayer(uv*scale+i*347.9)*fade;\n    }\n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    for(\n        float i=0.,g=0.,e,s;\n        ++i<99.;\n        O.rgb+=mix(r/r,H(log(s)),.7)*.08*exp(-i*i*e))\n    {\n        p=g*d;\n       \n       float perem2 = mod(iTime,3.);\n      \n        p.z-=.56;\n     \n        s=4.;\n        float perem = mod(iTime,3.);\n          p=R(p,vec3(0,1,0),iTime*0.2);\n           if(perem2<2.){\n           \n       p=p;\n       }\n        if(perem2>2.){\n        \n        n1Q(p.xy);\n       }\n      p=p.x<p.y?p.zxy:p.zyx;\n        for(float j=0.;j++<5.+perem;)\n      \n      \n            p=abs(p),\n            p=p.x<p.y?p.zxy:p.zyx,\n            \n            s*=e=1.7/min(dot(p,p),1.0),\n            p=p*e-vec3(12.+1.1*sin(iTime),3,3.+0.1*cos(iTime));\n        g+=e=length(p.xz)/s;\n        \n  \n    }\n     \n    O=pow(O,vec4(5));\n    O+=vec4(col,1.);\n }","name":"Image","description":"","type":"image"}]}