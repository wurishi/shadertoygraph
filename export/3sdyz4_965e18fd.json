{"ver":"0.1","info":{"id":"3sdyz4","date":"1600530787","viewed":255,"name":"fast 1D calm ripples, waves","username":"arifd","description":"Simple fluid shader.\n\nCan be used to fill in 2D containers of fluid.\n\nAny tips or tweaks welcome!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["waves","ripples","sea","water","fluid","1d","liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define WAVE_SIZE 0.025\n\n//////////////////////////////////////\n// GENERATE THE SURFACE\n/////////////////////////////////////\n\nfloat surface(vec2 uv) {\n    // ripples\n    float r1 = sin(uv.x * 9.2134 + iTime);\n    float r2 = sin(uv.x * .63457 * r1 - r1 - iTime);\n    \n    // return 0 or 1 depending on above/below crest\n    //return 1. - step(1. - WAVE_SIZE + (r2 * WAVE_SIZE), uv.y);\n\t\n    // with anti-aliasing\n    return smoothstep(1., .992, uv.y + (r2 * WAVE_SIZE) + WAVE_SIZE - .008);\n}\n\n//////////////////////////////////////\n//////////////////////////////////////\n\n///////////////////////////////\n// GENERATE THE WATER TEXTURE\n///////////////////////////////\n\nvec3 water(vec2 uv) {\n    // blue gradient\n    return vec3(.1, uv.y * (uv.y * .9), uv.y * (-uv.y + 2.5));\n}\n\n///////////////////////////////////////\n///////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // the idea here is to draw water texture everywhere,\n    // then trim away above the waves/crest by multiplying with 0;\n    fragColor = vec4(water(uv), 1.) * surface(uv);\n}","name":"Image","description":"","type":"image"}]}