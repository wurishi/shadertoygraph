{"ver":"0.1","info":{"id":"cldcD8","date":"1699138982","viewed":63,"name":"Simple Terrain-Simplex Algorithm","username":"MariPoza","description":"Uses Ashima's optimized simplex noise generator to create a basic heightmap. https://github.com/ashima/webgl-noise/tree/master/src","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\n//algorithm by ashima https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec3 generateColor(vec2 fragCoord)\n{\n    vec3 grassCol = vec3(0.28,0.71,0.4);\n    vec3 sandCol  = vec3(0.96, 0.97, 0.64)/1.2;\n    vec3 waterCol = vec3(0.15,0.42,0.84);\n    vec3 rockCol  = vec3(0.6,0.8,0.6);\n    vec3 lowWaterCol = vec3(0.32, 0.62, 0.97);\n\n    vec3 col = waterCol;\n\n    float height = snoise(fragCoord/400.0)\n    +snoise(fragCoord/200.0)/2.0\n    +snoise(fragCoord/100.0)/3.0\n    +snoise(fragCoord/50.0)/4.0\n    +snoise(fragCoord/25.0)/4.0;\n    \n    //normalize and set sea level\n    height = height/2.33-0.1f;\n    \n    if(height>0.0 && height < 0.05){\n        col = mix(lowWaterCol, sandCol, height*5.0);\n    }\n    else if(height >= 0.05 && height < 0.35){\n        col = mix(sandCol, grassCol, (height-0.05)*3.333);\n    }\n    else if (height >= 0.35){\n        col = mix(grassCol, rockCol, (height-0.35)*2.0);\n    }\n    else{\n        col = mix(lowWaterCol, waterCol, clamp(-height*5.0,0.0,1.33));\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 position = fragCoord + vec2(iMouse.x,iMouse.y);\n\n    vec3 pixel = generateColor(position);\n\n    fragColor = vec4(pixel,1.0);\n}","name":"Image","description":"","type":"image"}]}