{"ver":"0.1","info":{"id":"NtVXDy","date":"1641305723","viewed":79,"name":"Rotation Matrix for X and Y Axis","username":"DexM","description":"Rotate vector (0, 0, 1) depending on the distance from the center of the canvas using rotation matrixes. Y (green) component is calculated well. Z (blue) component has small artifacts. X (red) component has very noticeable artifacts.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    // UV has origin at the center of the screen and farthest edge of the canvas is at distance 1\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / max(iResolution.x, iResolution.y);\n    \n    // Angles for vector rotation at current pixel\n    vec2 angles = radians(150.0) * uv;\n    \n    // Rotation matrixes for current angles\n    vec2 s = sin(angles);\n    vec2 c = cos(angles);\n    \n    mat3 rotationX = mat3(\n        1, 0,   0,\n        0, c.y, -s.y,\n        0, s.y, c.y);\n    \n    mat3 rotationY = mat3(\n        c.x, 0, -s.x,\n        0,   1, 0,\n        s.x, 0, c.x);\n\n    mat3 rotationXY = rotationX * rotationY;\n\n    // Vector to rotate\n    vec3 vec = vec3(0, 0, 1);\n\n    // Rotation: pitch -> yaw\n    vec *= rotationXY;\n\n    // Render result\n    vec3 color;\n    float time = fract(iTime / 7.0);\n    if (time < 0.25)\n        color = vec3(vec);\n    else if (time < 0.5)\n        color = vec3(abs(vec.x), 0, 0);\n    else if (time < 0.75)\n        color = vec3(0, abs(vec.y), 0);\n    else\n        color = vec3(0, 0, abs(vec.z));\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}