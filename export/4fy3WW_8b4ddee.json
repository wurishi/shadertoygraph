{"ver":"0.1","info":{"id":"4fy3WW","date":"1712733178","viewed":224,"name":"loopless epicycloid 2","username":"FabriceNeyret2","description":"now totally loopless.\nI analytically solve pixel closest to Cycloid_n(t), by same distance to center, and approx same angle.\n\nAny idea how to have less jaggies ?","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["golf","loopless","epicycloid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// improving https://shadertoy.com/view/XfKGW1\n\n#define CS(a) cos(a+vec2(0,11))                  // (cos(a),sin(a))\n\n            // solves atan( epicycloid(t) ) ~ atan(U) \n#define C  T = t + 6.283/n* round( (atan(U.y,U.x) - t ) *n/6.283 ); \\\n                       /*  epicycloid       */                      \\\n           l = length( CS(T) + r* CS((n+1.)*T) - U ) ;              \\\n           O += smoothstep( 1.5, 0., l/min(.1,fwidth(l)) ) // AA draw\n\nvoid mainImage( out vec4 O, vec2 u )\n{   \n    vec2  R = iResolution.xy,\n          U = 2.*( u+u - R ) / R.y;              // normalized coordinates\n    float n = 9., r = .2, T, l,                  // epicycloid parameters\n                                                 // solves | epicycloid(t) | = | U | \n          t = acos( clamp( ( dot(U,U) - 1. - r*r ) *.5/r , -1.,1.) ) / n;  // clamp to avoid NaN\n     O = vec4(0);\n     C; t = -t; C;                               // cos(t) & cos(-t) solutions\n}","name":"Image","description":"","type":"image"}]}