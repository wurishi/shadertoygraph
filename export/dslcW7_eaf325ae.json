{"ver":"0.1","info":{"id":"dslcW7","date":"1686890250","viewed":93,"name":"Fork HexDump jayce_lai 240","username":"jayce_lai","description":"hex dump","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hexdump"],"hasliked":0,"parentid":"4dtyzr","parentname":"HexDump"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define U4 uint\n#define U4x2 uvec2\n#define U4x3 uvec3\n#define U4x4 uvec4\n//\n#define F4 float\n#define F4x2 vec2\n#define F4x3 vec3\n#define F4x4 vec4\n\n\n\n\n//=============================================================================================================================\n//\n// [HXD] HEX DUMP\n//\n//=============================================================================================================================\n// Uses 4x8 bitmap characters.\n//-----------------------------------------------------------------------------------------------------------------------------\n// 000  0  000 000 0 0 000 000 000 000 000     0         0      00\n// 0 0  0    0   0 0 0 0   0     0 0 0 0 0 000 000 000 000 000  0\n// 0 0  0  000  00 0 0 000 000   0 000 000   0 0 0 0   0 0 0 0 000\n// 0 0  0  0     0 000   0 0 0   0 0 0   0 0 0 0 0 0   0 0 0    0\n// 000  0  000 000   0 000 000   0 000 000 000 000 000 000 000  0\n//=============================================================================================================================\n// Hex to bitmap.\nU4 HxdTab(U4 h){U4 m=0u;\n if(h==0x0u)m=0x755570u;\n if(h==0x1u)m=0x222220u;\n if(h==0x2u)m=0x717470u;\n if(h==0x3u)m=0x746470u;\n if(h==0x4u)m=0x475550u;\n if(h==0x5u)m=0x747170u;\n if(h==0x6u)m=0x757170u;\n if(h==0x7u)m=0x444470u;\n if(h==0x8u)m=0x757570u;\n if(h==0x9u)m=0x747570u;\n if(h==0xau)m=0x754700u;\n if(h==0xbu)m=0x755710u;\n if(h==0xcu)m=0x711700u;\n if(h==0xdu)m=0x755740u;\n if(h==0xeu)m=0x715700u;\n if(h==0xfu)m=0x227260u;\n return m;}\n//-----------------------------------------------------------------------------------------------------------------------------\n// Given 'p' integer position, and bitmap 'm', returns pixel 1=on, 0=off.\nU4 HxdChr(U4x2 p,U4 m){return 1u&(m>>(((p.y&7u)<<2u)+(p.x&3u)));}\n//-----------------------------------------------------------------------------------------------------------------------------\n// Given 'p' integer position, and number 'n', return pixel 1=on, 0=off. Zero is all off.\nU4 HxdNum(U4x2 p,U4 n){if(n==0u)return 0u;return HxdChr(p,HxdTab(15u&(n>>((7u*4u)-(p.x&0x1cu)))));}\n//-----------------------------------------------------------------------------------------------------------------------------\n// Given 'p' integer position, pick color (1.0 or 0.5), checker pattern.\n//  X - ..x..... - 32-bit value\n//  Y - ....y... - even/odd line\nF4 HxdCol(U4x2 p){return 0.5+F4(1u&((p.x>>5u)^(p.y>>3u)))*0.5;}\n\n\n\n\n\n\n\n\nU4 Number(U4x2 p){return (p.x>>5u)+(p.y>>3u)*242993u;}\n//\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n U4x2 uv;\n uv.x=U4(fragCoord.x*0.5);\n uv.y=U4((iResolution.y-fragCoord.y)*0.5);   \n //uv.y = U4(fragCoord.x*2.0);\n //uv.y = U4(fragCoord.y*3.0);\n F4 i=HxdNum(uv,U4(1))==1u?1.0:0.0;\n i*=HxdCol(uv);\n fragColor=F4x4(i,i,i,i);}","name":"Image","description":"","type":"image"}]}