{"ver":"0.1","info":{"id":"4sjcWw","date":"1492351738","viewed":108,"name":"Julia_01","username":"Fading","description":"Simple animation of gradually moving the constant in the Julia set along a circle.\n\nYou can move the circle around the mandelbrot set with the mouse.\n\nFXAA applied version: https://www.shadertoy.com/view/Xs2cWw","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Copyright (c) 2017 Niklas Rosenstein\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nvec2 cmpxcjg(in vec2 c) {\n\treturn vec2(c.x, -c.y);\n}\n\nvec2 cmpxmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cmpxdiv(in vec2 a, in vec2 b) {\n    return cmpxmul(a, cmpxcjg(b));\n}\n\nfloat cmpxmag(in vec2 c) {\n    return sqrt(c.x * c.x + c.y * c.y);\n}\n\nint julia(in vec2 z, in vec2 c, in int max) {\n    int num = 0;\n    while (cmpxmag(z) < 2.0 && num < max) {\n    \tz = cmpxmul(z, z) + c;\n        num++;\n    }\n    return num;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float ratio = (iResolution.x / iResolution.y);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy - vec2(0.5, 0.5);\n    mouse.x *= ratio;\n    mouse *= -2.0;\n    vec2 squareUv = (vec2(uv.x * ratio, uv.y) - vec2(1.0, 0.5)) * 3.0;\n    \n    // Coordinate in the fractal.\n    vec2 inp = (uv - vec2(0.5, 0.5)) * 2.0;\n\n   \t// Constant in the fractal iteration.\n    vec2 pos = vec2(cos(iTime), sin(iTime)) - mouse;\n\n    // Calculate the number of steps until the input coordinate\n    // tends towards infinity.\n    int max = 30;\n    int num = julia(inp, pos, max);\n\tfloat t = float(num) / float(max);\n    fragColor = vec4(t, t, t, 1.0);\n    \n    // Render the mandelbrot below the coordinate system.\n    num = julia(squareUv, squareUv, max);\n    t = float(num) / float(max);\n    fragColor = mix(fragColor, vec4(t, t, t, 1.0), t);\n    \n    // We want to display the current `pos` parameter as well.\n    vec2 delta = abs(squareUv - pos);\n    if (length(delta) < 0.03) {\n        fragColor = vec4(1.0, 1.0, 0.5, 1.0);\n    }\n    // Also render the line on which the `pos` is rotating about.\n    else if (abs(length(squareUv + mouse) - 1.0) <= 0.01) {\n        fragColor = vec4(0.4, 0.3, 1.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}