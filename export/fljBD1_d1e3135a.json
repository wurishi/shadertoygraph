{"ver":"0.1","info":{"id":"fljBD1","date":"1652170536","viewed":110,"name":"RPS(3) quasiparticles","username":"biogeo","description":"A model of the \"rock-paper-scissors\" reaction-diffusion system. This visualizes the \"poles\" of the field (points where the reaction spirals) as quasiparticles. This is a very quick-and-dirty visualization.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"fl2fDz","parentname":"RPS(3) reaction-diffusion"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const bool viewQuasiparticles = true;\nconst float particle_radius = 3.5;\n\nconst mat3 colors = mat3(\n    0.8, 0.3, 1.0,   // For field x\n    0.2, 0.9, 0.5,   // For field y\n    0.95, 0.65, 0.15 // For field z\n);\n\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec2 pseudoGrad(in sampler2D field, in vec2 pos) {\n    vec3 delta = vec3(0.5/iResolution.xy, 0.0);\n    vec3 grad1 = texture(field, pos+delta.xz).xyz-texture(field,pos-delta.xz).yzx;\n    vec3 grad2 = texture(field, pos+delta.zy).xyz-texture(field,pos-delta.zy).yzx;\n    return vec2(\n        grad1.x*grad1.y*grad1.z,\n        grad2.x*grad2.y*grad2.z\n    );\n    \n}\n\nvec2 angle2unitVec(in float theta) {\n    return vec2(cos(theta), sin(theta))/iResolution.xy;\n}\n\nfloat pseudoPole(in sampler2D field, in vec2 pos) {\n    float jumpCounter = 0.0;\n    vec2 s = pos + particle_radius*angle2unitVec(0.0);\n    float f1 = rgb2hsv(texture(field, s).xyz).x;\n    float f2;\n    float d;\n    \n    for (float theta=0.0; theta < 361.0; theta += 30.0) {\n        s = pos + particle_radius*angle2unitVec(radians(theta));\n        f2 = rgb2hsv(texture(field, s).xyz).x;\n        d = f2-f1;\n        jumpCounter += float(abs(d)>0.4) * sign(d);\n        f1=f2;\n    }\n    return jumpCounter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    /*\n    vec3 rps = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n    rps = 1.0 - pow(1.0 - rps, vec3(2.2));\n    //fragColor.rgb = rps;\n    fragColor.rgb = colors * rps;\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.8));\n    //fragColor = mix(sqrt(fragColor),fragColor,.4) ;\n    //fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    */\n    /*\n    vec3 rps = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n    float ff = 1.e2*rps.x*rps.y*rps.z;\n    ff = pow(ff,0.2);\n    fragColor = vec4(vec3(ff), 0.0);\n    */\n    /*\n    vec2 uv = fragCoord / iResolution.xy;\n    //vec2 grad = pseudoGrad(iChannel1, uv);\n    vec2 delta = 1.0/iResolution.xy;\n    float vorticity =\n        pseudoGrad(iChannel1, uv+vec2(1.,0.)*delta).y\n        - pseudoGrad(iChannel1, uv+vec2(1.,1.)*delta).x\n        - pseudoGrad(iChannel1, uv+vec2(0.,1.)*delta).x\n        - pseudoGrad(iChannel1, uv+vec2(-1.,1.)*delta).y\n        - pseudoGrad(iChannel1, uv+vec2(-1.,0.)*delta).y\n        + pseudoGrad(iChannel1, uv+vec2(-1.,-1.)*delta).x\n        + pseudoGrad(iChannel1, uv+vec2(0.,-1.)*delta).x;\n        + pseudoGrad(iChannel1, uv+vec2(1.,-1.)*delta).y;\n    vorticity *= 5.;\n    vorticity += 0.5;\n    fragColor = vec4(vec3(vorticity), 0.0);\n    //grad = 20.*grad + .5;\n    //fragColor = vec4(grad, 0.5, 0.0);\n    */\n    vec3 rps = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n    rps = 1.0 - pow(1.0 - rps, vec3(2.2));\n    //fragColor.rgb = rps;\n    fragColor.rgb = colors * rps;\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.8));\n    //fragColor.rgb = vec3(rgb2hsv(rps).x);\n    if (viewQuasiparticles) {\n        float f = pseudoPole(iChannel1, fragCoord/iResolution.xy);\n        if (f > 0.0) {\n            fragColor.rgb = vec3(0.0, 0.2, 1.0);\n        } else if (f < 0.0) {\n            fragColor.rgb = vec3(1.0, 0.2, 0.0);\n        }\n        //fragColor = mix(vec4(vec3(f), 0.0), fragColor, 0.4);\n    }\n    /*\n    vec3 rps = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n    float angle = rgb2hsv(rps).x;\n    \n    fragColor = vec4(vec3(angle), 0.0);\n    */\n    /*\n    vec3 f1 = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    vec3 f2 = texture(iChannel1, fragCoord/iResolution.xy).xyz;\n    vec3 df = (2.-f2.xyz)/(2.-f1.yzx);\n    float ff = df.x*df.y*df.z;\n    fragColor.rgb = vec3(0.8e0*ff);\n    */\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float diffusionCoef = 1.0e-5;\nconst float reactionCoef = 10.;\n\nvec3 laplacian(in vec2 uv) {\n    vec2 step = vec2(1.0/iResolution.y, 0.0);\n    return (\n        texture(iChannel0, mod(uv + step.xy,1.0)).xyz +\n        texture(iChannel0, mod(uv - step.xy,1.0)).xyz +\n        texture(iChannel0, mod(uv + step.yx,1.0)).xyz +\n        texture(iChannel0, mod(uv - step.yx,1.0)).xyz +\n        -4.0 * texture(iChannel0, uv).xyz\n    ) / (step.x*step.x);\n}\n\nvoid mainImage( out vec4 vals, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame==0) {\n        vals.xyz = clamp(fractalNoise(uv+hash(iDate.zw)),0.0,1.0);\n        vals.xyz = vec3(0.5);\n    } else {\n        vals = texture(iChannel0, uv);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 hash( vec2 p ) {\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat simplexNoise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nvec3 fractalNoise(in vec2 p) {\n    vec2 uv;\n    vec3 res;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    uv = p*5.0 + vec2(10.76543, 30.384756);\n\tres.x  = 0.5000*simplexNoise( uv ); uv = m*uv;\n\tres.x += 0.2500*simplexNoise( uv ); uv = m*uv;\n\tres.x += 0.1250*simplexNoise( uv ); uv = m*uv;\n    res.x += 0.0625*simplexNoise( uv ); uv = m*uv;\n    uv = p*5.0 + vec2(14.87443, 508.12743);\n\tres.y  = 0.5000*simplexNoise( uv ); uv = m*uv;\n\tres.y += 0.2500*simplexNoise( uv ); uv = m*uv;\n\tres.y += 0.1250*simplexNoise( uv ); uv = m*uv;\n    res.y += 0.0625*simplexNoise( uv ); uv = m*uv;\n    uv = p*5.0 + vec2(83.21675, 123.45678);\n\tres.z  = 0.5000*simplexNoise( uv ); uv = m*uv;\n\tres.z += 0.2500*simplexNoise( uv ); uv = m*uv;\n\tres.z += 0.1250*simplexNoise( uv ); uv = m*uv;\n    res.z += 0.0625*simplexNoise( uv ); uv = m*uv;\n    return res;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float diffusionCoef = 2.0e-5;\nconst float reactionCoef = 30.;\nconst float noiseLevel = 0.006;\n\nvec3 laplacian(in vec2 uv) {\n    vec2 step = vec2(1.0/iResolution.y, 0.0);\n    return (\n        texture(iChannel0, mod(uv + step.xy,1.0)).xyz +\n        texture(iChannel0, mod(uv - step.xy,1.0)).xyz +\n        texture(iChannel0, mod(uv + step.yx,1.0)).xyz +\n        texture(iChannel0, mod(uv - step.yx,1.0)).xyz +\n        -4.0 * texture(iChannel0, uv).xyz\n    ) / (step.x*step.x);\n}\n\nvoid mainImage( out vec4 vals, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vals = texture(iChannel0, uv);\n    float rho = vals.x + vals.y + vals.z;\n    vals.xyz = vals.xyz + iTimeDelta * (\n        diffusionCoef * laplacian(uv).xyz +\n        vals.xyz * (1.0 - rho/3.0 - reactionCoef*vals.yzx)\n    );\n    vals.xyz += noiseLevel * fractalNoise(uv + hash(vec2(iTime)));\n    vals.xyz = clamp(vals.xyz, 0.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}