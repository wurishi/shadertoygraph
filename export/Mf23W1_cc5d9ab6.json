{"ver":"0.1","info":{"id":"Mf23W1","date":"1704197057","viewed":81,"name":"Magic bubbles","username":"ChunderFPV","description":"Playing around with that fibonacci-1 fractal.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["fractal","circles","phi","fibonacci"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// radial blur\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n#define T(p) texture(iChannel0, mix(u, m, p-i*p), a).rgb // scale texture\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R,\n         u = U/R;\n    if (iMouse.z < 1.) m = vec2(.5);\n    \n    vec3 c = texture(iChannel0, u).rgb, k;\n    \n    float l = 60.,  // loop size\n          j = 1./l, // increment size\n          a = length((U+U-R)/R.y*3.), // mipmap aa\n          b = j*2.,   // brightness\n          i = j;\n    \n    for (; i<=1.; i+=j)\n          k = T(1.) + T(-1.), // blur both ways\n          c += b * sqrt(i) * H(i-iTime/5.) * (k + .1 - i*.2); // light, color, shadow\n    \n    c.r += .35-a*.1;\n    C = vec4(tanh(c*c), 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Fork of \"Fibonacci - 1\" by ChunderFPV. https://shadertoy.com/view/dd2yWw\n#define A(a) mat2(cos(a+vec4(0, -1.5708, 1.5708, 0))) // rotate\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float s = 3.4,  // scale\n          t = iTime/10.,\n          i = 0., h = i, r;\n    \n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-R/2.)/R.y*s,\n         u = (U-R/2.)/R.y*s;\n    \n    if (iMouse.z < 1.)\n        m = sin(t*6.2832 + vec2(0, 1.5708)), // move in circle\n        m.x *= 2.058; // stretch x\n    \n    t = pow(t, 2.);\n    vec3 c = vec3(0, 1, 2)/20.*max(1., 2.-length(u)); // background\n    if (iMouse.z > 0.) c += min(1., .01/length(u-m)); // mouse light\n    \n    for (; i++< 10.;)\n    {\n        r = length(u);\n        r = min(1., .02/abs(1.-r)); // rings\n        c -= r*.02 + r*h*1.3; // shadow\n        mat2 a = A(sqrt(2.*i*t*3.1416)); // rotation\n        r = length(u/max(0., 1.272-dot(u, u))-m); // transform\n        u *= a*1.618; // rotate & scale\n        m *= a*1.618;\n        u.x = abs(u.x)-1.272; // shift\n        m.x = abs(m.x)-1.272;\n        h = min(1., .1/r)*.5;\n        c += h; // directional lights\n        c += min(1., .013/length(u) + .006/length(abs(u)-vec2(0, 1))); // points\n    }\n    \n    C = vec4(c*1.2, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}