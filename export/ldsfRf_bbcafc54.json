{"ver":"0.1","info":{"id":"ldsfRf","date":"1497366364","viewed":120,"name":"Flubber","username":"brainslug","description":"Flubber","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flubber"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.002\n#define MAX_STEPS 320\n\nfloat map(vec3 p)\n{\n    float d1 = length(p) - 1.;\n    float d2 = sin(sin(iTime*.2)*6.*p.x)*sin(sin(iTime*.2)*7.*p.y)*sin(sin(iTime*.2)*2.*p.z);\n    return d1 + d2;\n}\n\nvec3 getNormal(vec3 p)\n{\n    return normalize(vec3(\n    \tmap(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UVs\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Camera\n    vec3 origin = vec3(sin(iTime) * 5., 0.0, cos(iTime) * 5.);\n    vec3 target = vec3(0.0, 0.0, 0.0);\n    \n    vec3 lookDir = normalize(target - origin);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = cross(lookDir, up);\n    float fov = 2.5;\n    \n    vec3 rayDir = normalize(uv.x * right + uv.y * up + fov * lookDir);\n    \n    // March\n    vec3 rayPos;\n    float depth;\n    int i;\n    for (i = 0; i < MAX_STEPS; i++)\n    {\n        rayPos = origin + (rayDir * depth);\n        float dist = map(rayPos);\n        \n        if (dist < EPSILON)\n        {\n            break;\n        }\n        \n        depth += dist;\n    }\n    \n    // Lighting\n    //vec3 lightPos = vec3(sin(iTime) * 5.0, 0., cos(iTime) * 5.0);\n    vec3 lightPos = vec3(5.0, 0.0, -5.0);\n    vec3 lightDir = normalize(lightPos - rayPos);\n    vec3 viewDir = normalize(origin - rayPos);\n    vec3 halfwayDir = normalize(lightDir + viewDir);\n    \n    vec3 normal = getNormal(rayPos);\n    \n\tfloat diff = max(dot(normal, lightDir), 0.0);\n\tvec3 diffuse = diff * vec3(1., 1., 1.);\n    \n    float shininess = 16.0;\n    vec3 lightColour = vec3(0.8, 0.8, 0.8);\n    float spec = pow(max(dot(getNormal(rayPos), halfwayDir), 0.0), shininess);\n    vec3 specular = lightColour * spec;\n    \n    vec3 glowColour = vec3(0.0, 0.2, 1.0);\n    vec3 glow = (float(MAX_STEPS) / float(i)) * glowColour;\n    \n    vec3 colour = (getNormal(rayPos) + 1.0 / 2.0);\n    vec3 fc =  colour * (0.1 + diffuse + specular);\n    \n\tfragColor = vec4(fc, 1.0);\n}","name":"Image","description":"","type":"image"}]}