{"ver":"0.1","info":{"id":"XlSGWt","date":"1433367185","viewed":1727,"name":"CeramicGlassMosaic","username":"ChristinaCoffin","description":"Mosaic ceramic+glass tiles with some fake light+fx mixed in.\nMouse X-axis controls the mosaic scale of the tiles. Mouse Y-axis controls glossy effect.","likes":36,"published":1,"flags":0,"usePreview":0,"tags":["2d","glass","tile","mosaic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Created by Christina Coffin - @christinacoffin\n// 2015-06-03 - 1st version, needs AA\n// \n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 uv = p*0.841;\t\n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    //---------------------------------------------\t\n    // layered time animation on the x-axis so we can see the fx change when\n\t//\tthe mouse isnt being moved    \n    float anim_A= sin(iTime);\n    anim_A *= anim_A*anim_A;\n\tmo.x+= abs(anim_A)*0.01;\n\n    //---------------------------------------------\t\n    mo.x *= 0.25;    // mouse axis to control the mosaic size\n    \n    float mosaicScaler = 0.15 + mo.x*1.0;// 0.1 = big!  , 0.9 = tiny\n    float glassTileScale = 1.0;//mo.y;// 0.2 = ceramicTile , 0.95 = glassblockTile\n    \n\tfloat textureResolution = 64.0 * mosaicScaler;\n\tuv = uv*textureResolution + 0.5;\n\tvec2 iuv = floor( uv );\n\tvec2 fuv = fract( uv )*glassTileScale;\n\tvec2 fuv_2 = fuv;  \n    \n   \tfuv = fuv*fuv*(3.0-2.0*fuv);\n\n\tvec2\tuv_X = (iuv + fuv - 0.5)/textureResolution;\n\tvec3 \tcol_X = texture( iChannel1, uv_X ).xyz;    \n    \n    fuv = fuv*fuv*(3.0-2.0*fuv);\n    // even smootherstep to get a nice beveled tile shape\n    vec2 xsq = fuv *fuv;\n    vec2 xsqsq = xsq*xsq;\n    fuv = xsqsq * ( 25.0 - 48.0 * fuv + xsq * (25.0 -xsqsq));    \n    uv = iuv + fuv*fuv*(3.0-2.0*fuv);          \n\tuv = (uv - 0.5)/textureResolution;\n\tvec3 colB = texture( iChannel0, uv ).xyz;\n    \n\tvec3 colNoise = texture( iChannel0, uv ).xyz;//noise applied to whole screen, used for gloss warp \n    \n    float blendit = smoothstep(0.2, 0.8, fract(uv.x));//screenspace x axis blend from our ceramic to glass tiles\n    colB = mix( colB, col_X, blendit );// blend between the two\n    vec3 col = colB;\n    \n    //-----------------------------------------------------\n\t// fake glossyness along the middle area\n    float refrWarp = 0.39;\n    float glossFreq = mix( 0.15, 10.0, mo.y+0.13 );\n    col.rgb *= 1.0+fract(smoothstep(0.0, 1.0, 2.0*sin((p.y*2.0)+\n               2.0- (glossFreq * length(col.rgb+colNoise.rgb)*refrWarp)))\n                        );\n    //-----------------------------------------------------\n    \n\t//-----------------------------------------------------\n\t// post\n    vec2 q = p;\n\tcol = pow( abs(clamp(col,0.0,1.0)), vec3(0.945) );// gamma warp\n    // contrast, desat, tint and vignetting\t\n\tcol = col*1.2 + 0.2*col*col*col*col*(4.0-2.0*col);// hacky saturated contrast\n\tcol = mix( col, vec3(col.x+col.y+col.z)*0.333, 0.25 );//desat\n\tcol *= vec3(1.10,1.02,0.96);//tint\n\tcol.rg *= 0.55 + 0.45*pow( abs(4.0*q.x*(2.0-q.x)*(0.0-q.y)), 0.95 );  //vignette fakelight across the screen \n    \n    col = clamp(col,0.0,1.0);//clamp to 0-1\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}