{"ver":"0.1","info":{"id":"43XXW2","date":"1728579142","viewed":47,"name":"Julia set part2","username":"kukovisuals","description":"voronoi ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n   Property of Kuko Visuals \n   This shader code is intended for non-commercial use only.\n   Unauthorized commercial use or resale is prohibited.\n*/\n\nvec3 renderJuliaSet(vec2 point, float iTime) {\n    // Oscillation zoom effect\n    float zoomFactor = 10.0 + 0.5 * sin(iTime * 0.5);\n    \n    // Rotation effect\n    float angle = iTime * 0.05; // Rotate over time\n    \n    mat2 rotMat = mat2(\n        cos(angle), -sin(angle), \n        sin(angle),  cos(angle)\n   );\n\n    vec2 c = vec2(-0.77, 0.112); // Constant defining the Julia set shape\n    vec2 z = rotMat * (point * 0.4 / zoomFactor); // Apply zoom and rotation to initial point\n\n\n    float escapeRadiusSquared = 256.0;\n    int i;\n    vec2 ot = vec2(1.0); // Initialize ot for edge tracking\n\n    // Main iteration loop for the Julia set\n    for (i = 0; i < 256; i++) {\n        if (dot(z, z) > escapeRadiusSquared) break;\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        // Update ot for edge effect\n        ot = min(ot, abs(z) + 0.05 * fract(max(abs(z.x), abs(z.y)) * 10.5 + iTime * 0.5 + float(i) * 30.02));\n    }\n\n    // Apply the exponential scaling to ot\n    ot = exp(-200. * ot) * 0.9;\n\n    // Directly use ot for coloring, similar to the original example\n    vec3 color = vec3(ot.x, ot.y * 0.8 + ot.x * 0.2, ot.y);\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoord = fragCoord.xy / iResolution.xy;\n    vec3 color = renderJuliaSet(normalizedCoord, iTime);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}