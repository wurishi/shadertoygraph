{"ver":"0.1","info":{"id":"td2yRG","date":"1586882096","viewed":155,"name":"Hindsight Sketch","username":"baksej","description":"Hindsight Sketch","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["static"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random1f(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat map(float v, float a, float b, float c, float d) {\n    float nv = (v - a) / (b - a);\n    nv = pow(nv, 3.0);\n    float o = nv * (d - c) + c;\n    \n    return o;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec2 A = vec2(-0.5, -.2);\n    vec2 B = vec2(0.5, -.2);\n    vec2 C = vec2(0, 0.5);\n    vec2 D = vec2(0.5, -.8);\n    \n    float k1 = 0.8; // size\n    float k2 = 2.0; // shape\n    \n    // warp domains\n    vec2 uvA = uv * vec2(1.0, 0.8);\n    uvA.x += sin(uv.y * 5.0 + iTime) * 0.1;\n    vec2 uvB = uv * vec2(0.8, 1.0);\n    uvB.x += sin(uv.y * 4.0 + iTime) * 0.1;\n    vec2 uvC = uv * vec2(1.0, 0.8);\n    uvC.y += sin(uv.x * 4.0 + iTime) * 0.1;\n    vec2 uvD = uv * vec2(0.2, 0.8);\n    uvD.y += sin(uv.x * 4.0 + iTime) * 0.1;\n    \n    // create shaped gradient\n    float dA = max(0.0, 1.0 - pow(distance(uvA, A) / k1, k2));\n    float dB = max(0.0, 1.0 - pow(distance(uvB, B) / k1, k2));\n    float dC = max(0.0, 1.0 - pow(distance(uvC, C) / k1, k2));\n    float dD = max(0.0, 1.0 - pow(distance(uvD, D) / k1, k2));\n    \n    // smooth in, out\n    dA = smoothstep(0.0, 1.0, dA);\n    dB = smoothstep(0.0, 1.0, dB);\n    dC = smoothstep(0.0, 1.0, dC);\n    dD = smoothstep(0.0, 1.0, dD);\n    \n    // define colors\n    vec3 blue = vec3(35.0, 122.0, 144.0) / 255.0;\n    vec3 pink = vec3(255.0, 122.0, 114.0) / 255.0;\n    vec3 green = vec3(44.0, 162.0, 148.0) / 255.0;\n    vec3 black = vec3(20.0, 10.0, 0.0) / 255.0;\n    \n    vec3 vanta = vec3(-25, -25, -25) / 255.0;\n    \n    // lay in color blobs\n    vec3 color = vec3(0.0);\n    color = mix(color, blue, dA);\n    color = mix(color, vanta, dC);\n    color = mix(color, pink, dB);\n    color = mix(color, green, dD);\n    \n    // add noise\n    color += vec3(\n        random1f(uv),\n        random1f(uv + 1.0),\n        random1f(uv + 2.0)\n    ) * 0.1;\n    \n    color += vec3(\n        random1f(uv),\n        0,\n        0\n    ) * 0.5 * dB;\n    \n    // complex noise\n    \n    // float t = floor(iTime * 10.0);\n    // float t_next = floor(iTime * 10.0 + 1.0);\n    // float f = fract(iTime * 10.0);\n    \n    // vec3 noise = mix(\n        //     vec3(\n            //         random1f(uv + t),\n            //         random1f(uv + t + 1.0),\n            //         random1f(uv + t + 2.0)\n        //     ),\n        //     vec3(\n            //         random1f(uv + t_next),\n            //         random1f(uv + t_next + 1.0),\n            //         random1f(uv + t_next + 2.0)\n        //     ),\n    // f);\n    \n    // color += noise * 0.1;\n    \n    fragColor = vec4(color, 1.0);\n    // fragColor = vec4(vec3(ddA + 0.1), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}