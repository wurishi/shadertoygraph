{"ver":"0.1","info":{"id":"7sjBRt","date":"1646887393","viewed":191,"name":"Inverse Square Light Falloff","username":"Andrew900460","description":"Inverse Square Based Light Falloff","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["light","equation","falloff","inversesquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inverse square based light falloff functions.\n// Also a version that has a center light radius, if you want full-bright light for a certain distance.\n// iMouse.x can be used to tweak the radius.\n\n// The functions work in normalized space, so you would have to transform your lights (in your game?)\n// into a normalized space to use these functions properly.\n// [ie, if your light has a max visible distance of \"5\", then you have to divide by 5 somewhere]\n\n// provide x value between [0,1]\nfloat inverseFalloff(float x){\n    // 10 is a good number, but you can also try \"iMouse.y\" to test values\n    float const1 = 10.0;\n    float xSq = x*x;\n    return (1.0-xSq)/(const1*xSq+1.0);\n}\n\nfloat inverseFalloffWithRadius(float x, float lightSize){\n    if(x<lightSize) return 1.0;\n    else return inverseFalloff( (x-lightSize) / (1.0-lightSize) );\n}\n\nfloat gamma(float x) {\n    return pow(x,1.0/1.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 mouseUV = iMouse.xy/iResolution.xy;\n    \n    vec2 center = vec2(0.5,0.5);\n    \n    float dist = distance(center,uv)*2.0;\n    \n    float x = dist;\n    \n    if(uv.x > 0.5) {\n        x = smoothstep(1.0,0.0,x); // smooth step based (right)\n    }\n    else {\n        // if you prefer, you can set the radius to zero\n        float lightCenterRadius = mouseUV.x;\n        x = inverseFalloffWithRadius(x,lightCenterRadius); // inverse square based (left)\n    }\n    \n    // this is used to assure that the light drops to zero at x=1\n    // if you see a hard edge around x=1, then your light falloff is not smooth eanough.\n    // you can also set it to \"x = 1.0;\" to see where the \"light edge\" is.\n    if(dist > 1.0) x = 0.0;\n    \n    vec3 col = vec3( gamma(x) );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}