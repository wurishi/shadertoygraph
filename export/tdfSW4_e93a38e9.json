{"ver":"0.1","info":{"id":"tdfSW4","date":"1551266013","viewed":512,"name":"FlowMap","username":"Draedrus","description":"Flow map editor simple\n\nKeyboard keys :\nD - Clear flow map\nP - When active, the mouse paint the flow map, when not active the mouse will erase the flow map\nQ - diminishes the brush to 0.5x\nS - increments the brush to 2x","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["editor","flowmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/****************************************************************\n * @author: pierre.plans@gmail.com\n ****************************************************************/\n\nvoid flowmap(\n    float blend_cycle, float cycle_speed,\n    float offset,\n    vec2 flow, float flow_speed, vec2 flow_scale,\n    vec2 base_uv,\n    out float blend_factor,\n    out vec2 ouv1, out vec2 ouv2)\n{\n    // Compute cycle, phases\n\tfloat half_cycle = blend_cycle * 0.5;\n\n\tfloat phase0 = mod(offset + iTime * cycle_speed, blend_cycle);\n\tfloat phase1 = mod(offset + iTime * cycle_speed + half_cycle, blend_cycle);\n\n\t// Blend factor to mix the two layers\n\tblend_factor = abs(half_cycle - phase0)/half_cycle;\n\n\t// Offset by halfCycle to improve the animation for color (for normalmap not absolutely necessary)\n\tphase0 -= half_cycle;\n\tphase1 -= half_cycle;\n\n\t// Multiply with scale to make flow speed independent from the uv scaling\n\tflow *= flow_speed * flow_scale;\n\n\touv1 = flow * phase0 + base_uv;\n\touv2 = flow * phase1 + base_uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float blend_cycle = 1.0\n        , cycle_speed = 0.5\n        , offset = 0.0\n        , flow_speed = 1.0;\n    vec4 flowmapTex = texture(iChannel0, uv);\n    vec2 flow = -1.0+2.0*flowmapTex.rg\n        , flow_scale = vec2(0.05)\n        , base_uv = uv;\n    float oBlend_factor = 0.0;\n    vec2 oLayer1, oLayer2;\n    \n    flowmap(blend_cycle, cycle_speed,\n    texture(iChannel3, uv).r*.5,\n    flow, flow_speed, flow_scale,\n    base_uv,\n    oBlend_factor,\n    oLayer1, oLayer2);\n        \n\tfragColor.rgb = vec3(mix(\n        texture(iChannel1, oLayer1).r,\n        texture(iChannel1, oLayer2).r,\n        oBlend_factor));\n    \n    // grey\n    //fragColor.rgb = vec3(fragColor.r);\n    // water\n    //fragColor.b += flowmapTex.a;\n    float s = mix(\n        texture(iChannel2, oLayer1).r,\n        texture(iChannel2, oLayer2).r,\n        oBlend_factor);\n    float sp = pow(s, 8.);\n    float A = clamp(exp(flowmapTex.a*2.), 0., 1.);\n    fragColor.rgb = mix(fragColor.rgb, (1.-A)*fragColor.rgb+A*(vec3(0.02, 0.25, 0.4)+sp), flowmapTex.a);\n    \n    // debug overlay\n    //fragColor += flowmapTex*flowmapTex.a*0.8;\n    // debug\n    //fragColor = texture(iChannel0, uv);\n    //fragColor.rgba = vec4(A);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/****************************************************************\n * @author: pierre.plans@gmail.com\n ****************************************************************/\n\n// https://www.shadertoy.com/view/llySRh\n#define keyToggle(ascii, sampler)  ( texelFetch(sampler,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii, sampler)    ( texelFetch(sampler,ivec2(ascii,1),0).x > 0.)\n#define KEY_D 68\n#define KEY_E 69\n#define KEY_P 80\n#define KEY_Q 81\n#define KEY_S 83\n\n#define BRUSH_RADIUS 0.08\n#define BRUSH_SMOOTH 0.2/*between 0 and 1*/\n#define BRUSH_SHARP 0.1\n\n#define UV_MOUSE vec2(0.0, 0.0)\n\n#define BRUSH(d, r, a) a*max(0.0, 1.0-exp(d-r))\n\nvoid Store(in vec4 what, vec2 currentCoord, vec2 coord, inout vec4 where)\n{\n    if(abs(currentCoord.x-coord.x)<0.5 && abs(currentCoord.y-coord.y)<0.5)\n    \twhere = what;\n}\n\nvec4 Read(sampler2D buffer, ivec2 coord)\n{\n    return texelFetch(buffer, coord, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 miMouse = iMouse;\n    vec4 mouse_pos = miMouse.xyzw/iResolution.xyxy;\n    vec4 keys = Read(iChannel0, ivec2(0, 0)).xyzw/iResolution.xyxy;\n    vec4 oMouse = Read(iChannel0, ivec2(1, 0));\n    \n    fragColor.rg = texture(iChannel0, uv).rg;\n    float size = 0.005;\n    if(keyToggle(KEY_Q, iChannel1))\n    {\n        size *= 0.5;\n    }\n    if(keyToggle(KEY_S, iChannel1))\n    {\n        size *= 2.0;\n    }\n    \n    bool bPaint = keys.x==1.?!keyToggle(KEY_P, iChannel1):keyToggle(KEY_P, iChannel1);\n    bool bErase = keys.y==1.?!keyToggle(KEY_E, iChannel1):keyToggle(KEY_E, iChannel1);\n    bool bReset = keyToggle(KEY_D, iChannel1);\n    vec2 dir = iMouse.xy-oMouse.xy;\n    float brush = max(0., BRUSH_RADIUS-length(mouse_pos.xy-uv));\n    if(length(dir)>0.01)\n    {\n        if(miMouse.z>0. && bPaint)\n        {\n            dir = normalize(dir);\n            fragColor.rg = fragColor.rg-(dir)*brush;\n        }\n        else if(bErase)\n        {\n            fragColor.rg = mix(fragColor.rg, vec2(0.5, 0.5), brush);\n        }\n        if(bReset)\n        {\n            fragColor = vec4(0.5, 0.5, 0.0, 1.0);\n        }\n    }\n    if(iTime<0.5)\n    {\n        fragColor = vec4(0.5, 0.5, 0.0, 1.0);\n        bPaint = true;\n    }\n    fragColor.a = length(fragColor.rg-.5);\n    fragColor = clamp(fragColor, 0.0, 1.);\n    Store(vec4(bPaint?1.:0., bErase?1.:0., 0., 0.), fragCoord, vec2(0.5, 0.5), fragColor);\n    Store((fract(iTime)<0.1?iMouse:oMouse), fragCoord, vec2(1.5, 0.5), fragColor);\n}","name":"Buffer A","description":"","type":"buffer"}]}