{"ver":"0.1","info":{"id":"3tfcDl","date":"1593370424","viewed":109,"name":"Sun on the water (2D FBM)","username":"noobay","description":"A creative exploration of FBM","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","fbm","water","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// noise and fbm taken from https://iquilezles.org/articles/fbml, https://www.shadertoy.com/view/Msf3WH\n// simplex, fbm and parabola SDF by - Inigo Quilez\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm( in vec2 x, in float H, in int numOctaves )\n{    \n    float t = 0.0;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*noise(f*x);\n    }\n    return t;\n}\n\nfloat sdParabola( in vec2 pos, in float k )\n{    \n    pos.x = abs(pos.x);\n    \n    float p = (1.0-2.0*k*pos.y)/(6.0*k*k);\n    float q = -abs(pos.x)/(4.0*k*k);\n    \n    float h = q*q + p*p*p;\n    float r = sqrt(abs(h));\n\n    float x = (h>0.0) ? \n        pow(-q+r,1.0/3.0) - pow(abs(-q-r),1.0/3.0)*sign(q+r) :\n        2.0*cos(atan(r,-q)/3.0)*sqrt(-p);\n    \n    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) /iResolution.y;\n\n    float parabola = sdParabola(uv, 1.0) * 0.3;\n \n    float fbmResult = fbm(uv + iTime, 0.5, 5);\n\n    vec3 col = vec3(smoothstep(parabola * vec3(1.0, 0.8, 1.0), fbmResult * vec3(0.1, 0.1, 0.86), vec3(distance(parabola , fbmResult))));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}