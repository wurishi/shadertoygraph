{"ver":"0.1","info":{"id":"4sfBW8","date":"1495798819","viewed":585,"name":"fract(-fract(log(d))*fract(a)+b)","username":"ollj","description":"searching for a good function to visualize distance fields that;\n- has sharp contrast and direction.\n- is relatively immune to zooming \n- is immune to optical illusions of transparency overlay .","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["distance","fract","log"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define frame(u) (u-.5*iResolution.xy)/iResolution.y\n\nvoid mainImage(out vec4 O,in vec2 U){vec2 u=frame(U);\n float zoom=(sin(iTime*.2)*.5+.6)*99.;\n u*=zoom;\n vec2 m=frame(iMouse.xy)*zoom-u;//mouse point\n \n float d=log(length(m*9.));//log scales better\n float a=sin(iTime)*.25+.75;\n d=fract(.25-(fract(d)-.5)*a);//woha\n //d=fract(.25-a*(d-.5));//one less fract. more confusing on zooming\n \n u=fract(u);//tiled carthesian\n u.x*=.5;//reduce green for dichromachy constrast\n O=vec4(d,u,1.);}\n ","name":"Image","description":"","type":"image"}]}