{"ver":"0.1","info":{"id":"NtXfRM","date":"1650623254","viewed":34,"name":"Pixar lamp","username":"furtivesock","description":"Cursed lamp\nI have no skill in GLSL","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Smooth vs sharp boolean operations for combining shapes\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\n// Homework by Sophie Nguyen and Léandre Becq\n\n// UI (credits: MrOkiDoki https://www.shadertoy.com/view/WllyWs)\nconst float width = 1.;\nconst float height = 0.02;\nfloat selectedSpeed = 0.;\nconst float SPEED_COEFF = 20.;\n\nvec4 DrawSlider(vec2 uv,float width,float height,float value)\n{\n    vec4 col = vec4(0.);\n    if(abs(uv.y) < height && abs(uv.x) < width)\n        \n        if(uv.x+width < value*width*2.)\n            col = vec4(mix(vec3(1,0,0),vec3(0,1.,0),value),1);\n        else\n        \tcol = vec4(.1,.1,.1,1);\n    return col;\n}\n\nmat3 rotationMatrixX(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, -s, c),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotationMatrixY(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotationMatrixZ(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nvec3 rotateY(vec3 p, float theta)\n{\n    return p*rotationMatrixY(theta);\n}\n\nvec3 rotateX(vec3 p, float theta)\n{\n    return p*rotationMatrixX(theta);\n}\n\nvec3 rotateZ(vec3 p, float theta)\n{\n    return p*rotationMatrixZ(theta);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n//-------------------------------------------------\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return max(d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\n//-------------------------------------------------\n\nfloat sdSphere( in vec3 p, in float r )\n{\n    return length(p)-r;\n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// 6.\nfloat sdTwistedBox( vec3 p, vec3 b )\n{\n    // vec3 q = rotateY(p, p.y * 1.7);\n    // Depending on mouse on x-axis\n    vec3 q = rotateY(p, p.y * iMouse.x/50.);\n    \n    // Won't do nothing alone, so we need to transform p\n    return sdBox(q, b);\n}\n\n// 7. Adding box\nfloat sdLiquidBox( vec3 p, vec3 b )\n{\n    // Create the box\n    float d = sdBox(p, b);\n    float noise = 0.1 * sin(iTime) * sin(20.0*p.x) * sin(20.0*p.y) * sin(20.0*p.z);\n    return d + noise;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n    // sampling independent computations (only depend on shape)\n    float w = sqrt(r*r-h*h);\n    \n    // sampling dependant computations\n    vec2 q = vec2( length(p.xz), p.y );\n    return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                            abs(length(q)-r) ) - t;\n}\n\n//---------------------------------\n\nfloat lampBulb(in vec3 pos)\n{\n    vec3 q = rotateY(pos, iTime * SPEED_COEFF * selectedSpeed);\n    vec3 r = q + vec3(-1.5, -0.35, 0.);\n    \n    r = rotateZ(r, 1.57);\n    vec3 offset = vec3(0, 1, 0);\n    float ratio = 0.9;\n    float d1 = sdCappedCone(r + 0.6 * offset * ratio, 0.2 * ratio, 0.3 * ratio, 0.4 * ratio);\n    float d2 = sdCutHollowSphere(r, 0.6 * ratio * ratio, 0.1 * ratio, 0.04 * ratio);\n    float d3 = sdRoundedCylinder(r + 1.0 * offset * ratio, 0.11 * ratio, 0.04 * ratio, 0.1 * ratio);\n    float d4 = sdSphere(r + 0.25 * offset * ratio, 0.28 * ratio);\n    \n    float dt1 = opSmoothUnion(d1, d2, 0.4 * ratio);\n    float dt2 = opSmoothUnion(dt1, d3, 0.4 * ratio);\n    float dt3 = opUnion(dt2, d4);\n    \n    return dt3;\n}\n\nfloat map(in vec3 pos, out int material)\n{\n    vec3 q = pos - vec3(0, 0.0, 0.0);\n    // Plane\n    float plane = sdBox(q, vec3(3.6, 0.02, 5.7)); \n\n    // Support\n\n    // 5. Rotate on y-axis\n\n    // 5. r = rotate around 30 degrees on y-axis using rotation matrix\n    // Rotate animation\n    // r = rotateY(r, 0.30);\n    //r = rotateY(r, sin(iTime));\n        \n    // To repeat : with mod on x axis and z axis\n    // r = vec3(mod(r.x, 1.0), r.y, mod(r.z, 1.0));\n    \n    // 6. Twist\n    // float d1 = sdTwistedBox( r, vec3(0.2,0.3,0.2));\n    \n    // 7. Adding details\n    // float d1 = sdLiquidBox(r, vec3(0.2,0.5,0.2));\n    vec3 support_p = q + vec3(0., -0.1, 0.);\n    float support_bottom = sdRoundedCylinder(support_p, 0.3, 0.02, 0.001);\n    vec3 support_top_p = support_p + vec3(0., -0.05, 0.);\n    float support_top = sdRoundedCylinder(support_top_p, 0.28, 0.08, 0.0001);\n    float support = opUnion(support_bottom, support_top);\n    \n    // Button\n    vec3 button_p = support_top_p + vec3(-0.3, -0.0001, 0.);\n    float button = sdCappedCylinder(button_p, 0.03, 0.15);\n\n    support = opUnion(support, button);\n\n    // Nod\n    vec3 nod_down_p = support_top_p + vec3(0., -0.0001, 0.);\n    float nod_down = sdCappedCylinder(nod_down_p, 0.06, 0.25);\n\n    vec3 nod_ring_p = nod_down_p + vec3(0., -0.15, 0.);\n    float nod_ring = sdTorus(nod_ring_p, vec2(0.06, 0.015));\n\n    vec3 nod_top_p = nod_down_p + vec3(0., -0.1, 0.);\n    float nod_top = sdCappedCylinder(nod_top_p, 0.03, 0.2);\n\n    float nod = opUnion(nod_ring, nod_down);\n    nod = opUnion(nod, nod_top);\n\n    float lamp_bottom = opSmoothUnion(support, nod, 0.08);\n\n    // Lamp frame\n    vec3 frame1_p = nod_top_p + vec3(0.25, -0.6, 0.);\n    vec3 frame1_rotated_p = rotateZ(frame1_p, 0.6);\n    float frame1 = sdBoxFrame(frame1_rotated_p, vec3(0.45, 0.15, 0.2), 0.03);\n\n    vec3 frame2_p = frame1_p + vec3(0.04, -0.45, 0.05);\n    vec3 frame2_rotated_p = rotateZ(frame2_p, -1.);\n    float frame2 = sdBoxFrame(frame2_rotated_p, vec3(0.45, 0.1, 0.2-0.03-0.02), 0.03);\n\n    float frame = opUnion(frame1, frame2);\n\n    // Bulb\n    // vec3 lamp_bulb_p = frame2_p + vec3(0., 0., 0.);\n    float lamp_bulb = lampBulb(frame2_p);\n\n    float lamp = opUnion(lamp_bottom, frame);\n    lamp = opUnion(lamp, lamp_bulb);\n\n    // Merging with the ground using smooth union\n    float dt = opUnion(lamp, plane);\n\n    // Coloring\n    if (plane == dt)\n        material = 1;\n    else\n        material = 2;\n    \n    return dt;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    int mat = 0; \n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep, mat ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep, mat ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep, mat ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep, mat ) );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n    int mat = 0;\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t, mat );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 tot = vec3(0.0);\n   \n   // Speed slider\n   // Note: Selected value is divided by 2 (according to mouse position) for some reason...\n   selectedSpeed = iMouse.x / iResolution.x;\n    selectedSpeed *= 1. / (width * 2.);\n    selectedSpeed += .5;\n    selectedSpeed = clamp(selectedSpeed, 0., 1.);\n  \n   // 1. Set up the camera (primary ray for pixel)\n   vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y; \n   \n   // UI display\n   // p = (fragCoord-0.5 * iResolution.xy) / iResolution.x;\n    vec4 slider = DrawSlider(p + vec2(0., 0.95), width, height, selectedSpeed);\n   //center of screen: (0,0)\n   //dimensions: +/- 0.5\n \n   // Move the camera\n   vec3 ro = vec3(0.1, 4, 8.5);\n    // How the camera is looking on the screen\n    // Last parameter : Distance with the object\n   vec3 rd = normalize(vec3(p-vec2(0.1,1.9), -5.5));\n\n   // 2. Raymarching\n   float t = 7.0;\n   // Coloring\n   int mat = 0; \n   for ( int i=0; i<128; i++ )\n   {\n        vec3 p = ro + t*rd;\n        float h = map(p, mat);\n        if( abs(h)<0.0001 || t>11.0 ) break;\n        t += h;\n   }\n\n   vec3 col = vec3( 77./255., 110./255., 153./255. );\n   // 3. Coloring the shadow\n   \n   // Intersection\n   if( t < 11.0 )\n   {\n        vec3 pos = ro + t*rd;\n        // Normal\n        vec3 nor = calcNormal(pos);\n        // Shadow of object\n        vec3  lig = normalize(vec3(1.0,0.8,-0.2));\n        float dif = clamp(dot(nor,lig),0.0,1.0);\n        // Shadow\n        float sha = calcSoftshadow( pos, lig, 0.001, 1.0, 16.0 );\n        // Ambient light\n        float amb = 0.5 + 0.5*nor.y;\n        col = vec3(0.05,0.1,0.15)*amb + vec3(1.00,0.9,0.80)*dif*sha;\n\n        // Coloring shapes\n        if (mat == 1)\n            // Plane\n            col *= vec3( 131./255., 163./255., 204./255. );\n        else\n            // Lamp\n            col *= vec3( 195./255., 202./255., 212./255.);\n   }\n\n    col = sqrt( col );\n    tot += col;\n    \n    fragColor = mix(vec4(tot, 1.), slider, slider.a);\n}","name":"Image","description":"","type":"image"}]}