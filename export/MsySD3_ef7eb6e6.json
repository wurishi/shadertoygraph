{"ver":"0.1","info":{"id":"MsySD3","date":"1467054896","viewed":8437,"name":"SquarePortals","username":"dila","description":"Not sure what this is.","likes":97,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdBoxXY( vec3 p, vec2 b )\n{\n  vec2 d = abs(p.xy) - b;\n  return min(max(d.x,d.y),0.0) +\n         length(max(d,0.0));\n}\n\n#define room (iTime * -0.25)\nfloat mat = 0.0;\nvec2 muv = vec2(0.0);\nvec3 mpos = vec3(0.0);\n\nfloat map(vec3 p)\n{\n    mat = 1.0;\n\tfloat d = 1000.0;\n    \n    vec3 h = p;\n    h *= zrot(room * 2.0);\n    h *= yrot(room * 3.0);\n    \n    float rs = 4.0;\n    d = min(d, -sdBox(h, vec3(rs)));\n    mpos = h;\n    \n    float cv = 0.3;\n\td = max(d, -sdBoxXY(h, rs * vec2(cv)));\n    float o = -sdBoxXY(h.zyx, rs * vec2(cv));\n    if (o > d) {\n        d = o;\n        mpos = h.zyx;\n    }\n    \n    o = -sdBoxXY(h.xzy, rs * vec2(cv));\n    if (o > d) {\n        d = o;\n        mpos = h.xzy;\n    }\n    \n    vec3 q = p - vec3(0.0, 0.0, 3.0);\n    q *= zrot(room * 3.14159 * 2.0);\n    vec3 ps = vec3(1.0, 1.0, 0.11);\n    float frame = sdBox(q, ps + vec3(0.1, 0.1, -0.01));\n    if (frame < d) {\n        d = frame;\n        mat = 2.0;\n        muv = q.xy / ps.xy;\n        mpos = q;\n    }\n    \n    float portal = sdBox(q, ps);\n    if (portal < d) {\n        d = portal;\n        mat = 0.0;\n        muv = q.xy / ps.xy;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d;\n    }\n    return t;\n}\n\nmat3 xform(float t)\n{\n    mat3 xfm = yrot((mod(t, 3.0) + 1.0) * pi * 0.5);\n    //xfm *= xrot(t * pi * 0.5);\n    return xfm;\n}\n\nvec3 campos(float t, float u)\n{\n    vec3 exit = vec3(0.0, 0.0, 2.99);\n    vec3 enter = exit * xform(t);\n    vec3 pos = mix(enter, exit, u);\n    return pos;\n}\n\nmat3 slerp(vec3 a, vec3 b, float t)\n{\n\tvec3 fw = normalize(a);\n  \tvec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 left = normalize(cross(fw, up));\n    up = normalize(cross(left, fw));\n    mat3 xfm = mat3(left, up, fw);\n    vec3 k = xfm * b;\n    float theta = atan(k.x, k.z) * t;\n    fw = vec3(sin(theta), 0.0, cos(theta)) * xfm;\n    left = normalize(cross(fw, up));\n    up = normalize(cross(left, fw));\n    return mat3(left, up, fw);\n}\n\nvec3 _texture(sampler2D s, vec3 p, vec3 n)\n{\n    mat3 t = mat3(texture(s, p.zy).xyz,\n                  texture(s, p.xz).xyz,\n                  texture(s, p.xy).xyz);\n\treturn t * t * abs(n);\n}\n\n/* Shane's bump mapping */\nvec3 bump(sampler2D s, vec3 p, vec3 n)\n{\n\tvec2 d = vec2(0.01, 0.0);\n    mat3 m = mat3(_texture(s, p - d.xyy, n),\n                  _texture(s, p - d.yxy, n),\n                  _texture(s, p - d.yyx, n));\n    vec3 gs = vec3(0.299, 0.587, 0.114);\n    vec3 v = gs * m;\n    vec3 c = dot(_texture(s, p, n), gs) - v;\n    return normalize(n + c * 0.5);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float fov = 0.9;\n    vec3 sv = normalize(vec3(uv, fov - dot(uv, uv) * 0.2));\n\n    vec3 oo = campos(floor(room), fract(room));\n    sv *= zrot(room * 3.14159);\n    \n    vec3 or = sv;\n    float st = 1.0 - pow(1.0 - fract(room), 2.0);\n    vec3 rto = vec3(0.0, 0.0, 1.0);\n    vec3 rfrom = -rto * xform(floor(room));\n    or = or * slerp(rfrom, rto, st);\n\n    vec3 r = or;\n    vec3 o = oo;\n    \n    vec3 fc = vec3(0.0);\n    \n    for (int i = 0; i < 8; ++i) {\n\t\tfloat fi = float(i);\n        \n        float t = trace(o, r);\n        vec3 w = o + r * t;\n        vec3 sn = normal(w);\n        \n        if (mat != 0.0) {\n            \n            vec3 sc = vec3(0.0);\n            float rtex = mod(floor(room + fi), 3.0);\n            if (rtex == 0.0) {\n                sn = bump(iChannel0, mpos * 0.125, sn);\n                sc = _texture(iChannel0, mpos * 0.25, sn);\n            } else if (rtex == 1.0) {\n                sn = bump(iChannel1, mpos * 0.25, sn);\n                sc = _texture(iChannel1, mpos * 0.25, sn);\n            } else if (rtex == 2.0) {\n                sn = bump(iChannel2, mpos * 0.25, sn);\n                sc = _texture(iChannel2, mpos * 0.25, sn);\n            }\n            \n            vec3 lpos = vec3(2.0, 2.0, -2.0);\n            vec3 ldir = lpos - w;\n            float ldist = length(ldir);\n            ldir /= ldist;\n            float lprod = max(dot(ldir, sn), 0.0);\n            float lpow = 1.0 / (1.0 + ldist * ldist * 0.01);\n\n        \tfloat fog = lprod / (1.0 + t * t * 0.001);\n            \n            fc += vec3(fog) * sc * lpow;\n            \n            break;\n        }\n        \n        float to = clamp(-sign(fi - 0.5), 0.0, 1.0);\n        \n        vec2 pmuv = muv * vec2(-1.0,1.0);\n        r = normalize(vec3(pmuv, fov - dot(pmuv, pmuv) * 0.2));\n        float speed = pow(fract(room), 4.0);\n        r = mix(r, sv, speed * to);\n        r = normalize(r);\n        vec3 srt = vec3(0.0, 0.0, 1.0);\n        vec3 srf = -srt * xform(floor(room + fi + 1.0));\n        r = r * slerp(srf, srt, 0.0);\n        o = campos(floor(room + fi + 1.0), 0.0);\n    }\n    \n\tfragColor = vec4(fc, 1.0);\n}","name":"Image","description":"","type":"image"}]}