{"ver":"0.1","info":{"id":"X3jcDw","date":"1727313749","viewed":14,"name":"volcanic grassy hills cut voxels","username":"jt","description":"Approximating a terrain/heightmap by cutting voxels tangential to the surface.\nNot as smooth as marching cubes but simpler and faster :) Now with my favorite plants :D\nUsing DDA-raymarch hybrid to step through voxels.\nCamera follows terrain.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","terrain","raymarch","voxels","sdf","circle","random","approximation","heightmap","dda","hybrid","plant","orthogonal","plugin"],"hasliked":0,"parentid":"lX2yRW","parentname":"terrain approximation cut voxels"},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lX2yRW terrain approximation cut voxels, 2024 by jt\n// voxel version of https://www.shadertoy.com/view/4cBfRR terrain approximation with tiles\n// using https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Approximating a terrain/heightmap by cutting voxels tangential to the surface.\n// Not as smooth as marching cubes but simpler and faster :)\n// Using DDA-raymarch hybrid to step through voxels.\n// Camera follows terrain.\n\n// tags: 3d, terrain, raymarch, voxels, sdf, random, approximation, heightmap, dda, hybrid, plugin\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample neighbor voxels (slow!)\n//#define HIGH_QUALITY\n\n#define EPSILON 0.001\n#define DIST_MAX 100.0\n#define ITER_MAX 400u\n\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box(vec3 p, vec3 p0, vec3 p1)\n{\n    return box(p-(p1+p0)/2.0, abs(p1-p0)/2.0);\n}\n\nfloat box(vec3 p, vec3 p0, vec3 p1, float r)\n{\n    r = max(r,0.0);\n    return box(p-(p1+p0)/2.0, abs(p1-p0)/2.0-r)-r;\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat frame(vec3 p, vec3 b, float e) // https://iquilezles.org/articles/distfunctions/\n{\n        p = abs(p  )-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n        length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n        length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n        length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat frame(vec3 p, vec3 p0, vec3 p1, float e)\n{\n    return frame(p-(p1+p0)/2.0,abs(p1-p0)/2.0,e);\n}\n\nfloat ortho_circle_flower_sdf(int n, vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    n = 2*n+1; // n must be odd\n    float slice = pi/float(n);\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nfloat ortho_circle_flower_sdf(int m, int n, vec3 p) // https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant (jt)\n{\n    float phi = round(atan(p.y,p.x)/(2.0*pi/float(m)))*(2.0*pi/float(m)); // polar & quantize\n    p.xy = mat2(cos(phi),-sin(phi),sin(phi),cos(phi))*p.xy;\n    return length(vec2(ortho_circle_flower_sdf(n, vec2(p.xz)),p.y));\n}\n\nfloat wave(vec2 p, vec2 f)\n{\n    return sin(2.0*pi*p.x/f.x)*cos(2.0*pi*p.y/f.y);\n}\n\nfloat height(vec2 p)\n{\n    float l = length(p);\n    return 4.0*(0.5*cos(-2.0*pi*l/20.0)+wave(p, vec2(40)));\n    //return 4.0*(texture(iChannel0, p*0.01).x - 0.5);\n}\n\nstruct result\n{\n    vec3 color;\n    float dist;\n    bool specular;\n};\n\nresult combine(result a, result b)\n{\n    if(a.dist < b.dist)\n        return a;\n    return b;\n}\n\nresult terrain_approximation_cut_voxels(ivec3 v, vec3 l) // https://www.shadertoy.com/view/lX2yRW terrain approximation cut voxels\n{\n    float h = height(vec2(v.xy));\n    ivec2 W = ivec2(-1,0);\n    ivec2 E = ivec2(+1,0);\n    ivec2 S = ivec2(0,-1);\n    ivec2 N = ivec2(0,+1);\n    float west = height(vec2(v.xy+W));\n    float east = height(vec2(v.xy+E));\n    float south = height(vec2(v.xy+S));\n    float north = height(vec2(v.xy+N));\n    float c = (west+east+south+north)/4.0;\n    vec3 n =\n        normalize\n        (\n            vec3\n            (\n                west-east,\n                south-north,\n                2.0\n            )\n        );\n\n    if(v.z <= int(floor(h+0.5))+1) // NOTE: grow plant across three voxels: h-1,h,h+1\n    {\n        float terrain_brightness = hash13((vec3(v)+l)*123.456);\n        vec3 terrain_color = vec3(mix(0.05,0.1,terrain_brightness));\n\n        float d = dot(n, l-vec3(0.5,0.5,h-float(v.z))); // solid\n        //float d = abs(dot(n, l-vec3(0.5,0.5,h-float(v.z))))-0.1; // laminar\n\n        result terrain = result(vec3(terrain_color), max(box(l-0.5,vec3(0.5)),d),false/*no spec*/);\n        if(terrain_brightness > 0.75) terrain.specular = true; // glint\n        if(v.z < int(floor(h+0.5))-1) // NOTE: plant can grow in two voxels: h-1, h, h+1\n            return terrain;\n        //float s = mix(0.5,1.0,h-float(v.z)/*r.z*/);\n        vec2 r = 0.5*hash22(vec2(v.xy))-0.25;\n        float s = 2.0;\n\n        //result plant = result(max(hash32(vec2(v.xy)),vec3(0,1,0)), ortho_circle_flower_sdf(5, 5, (l-0.5-vec3(0,0,h-float(v.z)))*s-vec3(0,0,1.0-0.5*s))/s-0.01);\n        result plant = result(mix(vec3(0.125,0.5,0.125),vec3(0.5,1,0.5),hash32(vec2(v.xy))), ortho_circle_flower_sdf(5, 5, (l-0.5-vec3(0,0,h-float(v.z)))*s-vec3(r,1.0-0.5*s))/s-0.01, true/*spec*/);\n        return combine(terrain, plant);\n    }\n\n    return result(vec3(0), DIST_MAX, false/*no spec*/); // signal to skip this voxel\n}\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    return terrain_approximation_cut_voxels(v, l);\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(vec3(0), DIST_MAX, false/*no spec*/);\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r.dist < d.dist)\n                    d = r;\n            }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1, bool pass) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t, h.specular);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    return result(h.color, pass ? t1 : t, h.specular); // pass/stop on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1, true/*pass*/).dist < t1 ? 0.0 : 1.0;\n}\n#ifdef HIGH_QUALITY\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n#endif\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // plain\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5)); // checker\n}\n\nvoid mainImage(out vec4 color_alpha, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y); // circle\n    //float pitch = pi - pi * float(iMouse.y) / float(R.y); // look around\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    //pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0; // look slightly down\n    pitch = !demo ? pitch : pi / 2.0; // look to distance\n\n    //vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 ro = vec3(0.0, 0.0,-20.0); // circle\n    //vec3 ro = vec3(0.0, 0.0,0.0); // look around\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z = max(ro.z,height(ro.xy)); // avoid clipping into terrain / \"walk\" on terrain\n    ro.z += 1.5; // hover above ground\n\n    //vec3 lightdir = normalize(vec3(3.0, 0.0, 1.0));\n    float t = iTime/100.0;\n    vec3 lightdir = normalize(vec3(sin(tau*t/3.0),-cos(tau*t/3.0),0.5-0.5*sin(tau*t/3.0)));\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = mix(vec3(0,0.25,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 fog_color = sky_color;\n    float fade = 1.0-pow(1.0-(0.5-0.5*sin(tau*t)),5.0);\n    sky_color = mix(mix(vec3(1,0.5,0.0),vec3(0,0,1),abs(-rd.z)),sky_color,1.0-(1.0-fade)*pow(0.5+0.5*dot(rd.xy,lightdir.xy),2.0));\n    vec3 suncolor = mix(vec3(1,0.5,0.1),vec3(1),fade);\n    vec3 color = vec3(1);\n    //result r = trace(ro, rd, 0.0, DIST_MAX, false/*stop*/); // XXX fixes terrain but breaks sun XXX\n    result r = trace(ro, rd, 0.0, DIST_MAX, true/*pass*/); // XXX breaks terrain but fixes sun XXX\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 ambient = vec3(0.05);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        color *= (ambient * calcAO(dst, n) + brightness * suncolor);\n\n        if(r.specular)\n        {\n            if(brightness > 0.0)\n            {\n                float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 500.0);\n                color += specular;\n            }\n        }\n\n        vec3 fog_color = vec3(0,0.125,0.25);\n        color = mix(fog_color, vec3(color), exp(-pow((1.0-rd.z*rd.z)*r.dist/40.0, 2.0))); // fog but not below\n    }\n    else\n    {\n        color *= sky_color;\n\n        {\n            float d = max(0.0, dot(rd, lightdir));\n            float sun = 50.0*smoothstep(0.999, 1.000, d) + exp(-pow((1.0-d)*1000.0, 2.0)); // sun with halo\n            color += sun * suncolor;\n        }\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color_alpha = vec4(color, 1);\n    color_alpha = sqrt(color_alpha); // approximate gamma\n    color_alpha.xyz += fract(sin(I.x*vec3(13,1,11)+I.y*vec3(1,7,5))*158.391832)/255.0; // dither to remove banding in the background (iq)\n}\n","name":"Image","description":"","type":"image"}]}