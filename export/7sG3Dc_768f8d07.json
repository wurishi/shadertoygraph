{"ver":"0.1","info":{"id":"7sG3Dc","date":"1632324267","viewed":96,"name":"C-spiral","username":"rafastv","description":"Colored spiral. Apple's beachball cousin.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["spiral","wheel","colored","spin","spinning","apple","beachball","pinwheel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi acos(-1.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /* control parameters */\n    vec3 color, bg_color = vec3(.2), acu_color = vec3(0.);\n    vec2 uv,ab;\n    float aspect_ratio = iResolution.x/iResolution.y;\n    float alpha, angle, count = 0.; \n    float twist = 3., speed = -2.; // spiral\n    float aa_step = .1, aa = 1.; // anti-alias\n    // shadow\n    vec2 shadow_center = vec2(0.03,-0.03);\n    uv = fragCoord/iResolution.y - .5*vec2(aspect_ratio, 1.);\n    float t = smoothstep(0.3, 0.5, length(uv-shadow_center));\n    bg_color = bg_color*t + vec3(.0)*(1.-t);\n    // spinning wheel\n    for (float i=-aa;i<=aa;i+=aa_step)\n        for (float j=-aa;j<=aa;j+=aa_step)\n    {\n        uv = (fragCoord + vec2(i,j))/iResolution.y - .5*vec2(aspect_ratio, 1.);\n        ab = vec2(cos(speed*iTime+twist*length(uv)), sin(speed*iTime+twist*length(uv)));\n        angle = atan(cross(vec3(uv,0.),vec3(ab,0.)).z/dot(uv,ab));\n        angle = (angle/pi + .5)*180.;\n        if (cross(vec3(uv,0.),vec3(ab,0.)).z < 0.)\n            angle += 180.;\n        if (angle < 30.)\n           color = vec3(0.,0.,1.);\n        else if (angle < 90.)\n           color = vec3(1.,0.,1.);\n        else if (angle < 150.)\n           color = vec3(0.,1.,1.);\n        else if (angle < 180.0)\n           color = vec3(0.,0.,1.);\n        else if (angle < 210.0)\n           color = vec3(1.,1.,0.);\n        else if (angle < 270.)\n           color = vec3(0.,1.,0.);\n        else if (angle < 330.)\n           color = vec3(1.,0.,0.);\n        else\n           color = vec3(1.,1.,0.);\n        alpha = smoothstep(0.95,1.0,length(uv)/0.45);\n        color = bg_color*alpha + color*(1.-alpha);\n        acu_color = acu_color + color;\n        count += 1.;\n    }    \n    // Output to screen\n    fragColor = vec4(acu_color*1.0/pow((2.*aa)*1./aa_step,2.),1.0);\n}\n\n/* Copyright (c) 2021 Rafael S. T. Vieira\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights  \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */","name":"Image","description":"","type":"image"}]}