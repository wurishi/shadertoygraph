{"ver":"0.1","info":{"id":"4XdXzf","date":"1719419620","viewed":131,"name":"tangled neon","username":"pb","description":"a tangled mess","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//logic taken from gaz: https://www.shadertoy.com/view/ftKBzt\n//and made more verbose and tweaked\n\n#define rot(a) mat2( cos(a + vec4(0,11,33,0) ) )\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos( h/2. + vec3(31,10,20) )*.6 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c*c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0), rd = normalize( vec3(U-.5*R.xy, R.y))*10.;\n    \n    float sc,dotp,totdist=0., t=iTime/3.;\n    \n    for (float i=0.; i<150.; i++) {\n        \n        vec4 p = vec4( rd*totdist, 0.);\n      \n        \n        p.xyz += vec3(0,0,-18.);\n        p.xyz = ROT(p.xyz, normalize( vec3(sin(t/7.),cos(t/11.),0)  ), (t+7.5)/4.);\n        sc = 1.;  //scale factor\n        \n        \n        for (float j=0.; j<6.; j++) {\n        \n            p = abs(p)*.56  - vec4( .025*cos(p.xy/5.), .01*sin(p.zw/3.));\n            \n            \n            dotp = max(1./dot(p,p),.4);\n            sc *= dotp ;\n            \n            p.zw = length(p.xz)<length(p.zw) ? p.xz : p.zw;  //reflection                   \n  \n            p = abs( p ) * dotp - 1.;       \n               \n            \n        }\n         \n        float dist = abs( length(p)-.1)/sc ;  //funky distance estimate\n        float stepsize = dist + 1e-4;         //distance plus a little extra\n        totdist += stepsize;                  //move the distance along rd\n        \n       \n        //accumulate color, fading with distance and iteration count\n        c += mix( vec3(1), H(M(sc)),.6) *.014*  exp(-i*i*stepsize*stepsize/2.);\n    }\n    \n    c *= c;\n    c = 1. - exp(-c);\n    O = ( vec4(c,0) );\n               \n}        \n        ","name":"Image","description":"","type":"image"}]}