{"ver":"0.1","info":{"id":"3stXR2","date":"1572386436","viewed":657,"name":"Quaternion  controls ","username":"munrocket","description":"Rotation with quaternions. Push to rotate.\nExample with orbit control here: https://www.shadertoy.com/view/wsGXzR","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","quaternion","array","controls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 150.\n#define MAX_DIST 15.\n#define DIFF_EPS 0.001\n#define SHAD_EPS 0.002\n\n#define SMALL_R 0.08\n#define BIG_R 0.2\n\nfloat map(vec3 pos) {\n    pos.xz = fract(pos.xz-0.5)-0.5;\n    pos.y += 0.3;\n\tvec2 l = vec2(length(pos.xz) - BIG_R, pos.y);\n  \tfloat d = length(l) - SMALL_R;\n    float d2 = pos.y + SMALL_R + SHAD_EPS*2.0;\n    return min(d, d2);\n}\n\nvec3 normal(vec3 pos) {\n    const vec2 e = vec2(DIFF_EPS, 0.);\n    vec3 N = vec3(\tmap(pos + e.xyy) - map(pos - e.xyy),\n        \t\t\tmap(pos + e.yxy) - map(pos - e.yxy),\n        \t\t\tmap(pos + e.yyx) - map(pos - e.yyx));\n   \treturn normalize(N);\n}\n\nfloat rayCast(vec3 camera, vec3 dir) {\n    float t = 0.;\n    vec3 pos;\n    for(float i = 0.; i < MAX_STEPS; i++) {\n    \tpos = camera + t * dir;\n        float dt = map(pos);\n        t += dt;\n        if(dt < DIFF_EPS || t > MAX_DIST) break;\n    }\n    return mix(t, -1., step(MAX_DIST, t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = (2.*fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 dir = normalize(vec3(uv, 2.));\n    vec3 camera = vec3(0., 0., -2.);\n    \n    vec4 mouse = qmouse(iMouse, iResolution, iTime, 0.01);\n    dir = rotate(dir, mouse);\n    \n    float t = rayCast(camera, dir);\n   \tvec3 pos = camera + t * dir;\n        \n    vec3 N = normal(pos) * (1. - step(MAX_DIST, t)), col;\n    \n    vec3 sun_dir = normalize(vec3(-1.5, 1.5, .5));\n    float sun_dif = clamp( dot(N, sun_dir), 0., 1. );\n    float sun_sha = step(rayCast(pos + N * SHAD_EPS, sun_dir), 0.);\n    float sky_dif = clamp(.5 + .5 * dot(N, vec3(0.,1.,0.)), 0., 1.);\n\n    col = sun_dif * sun_sha * vec3(1., .6, .4);\n    col += sky_dif * vec3(0., .2, .4);\n    col = mix(vec3(.6, .7, .8), col, step(0., t)) + vec3(-1. + 2.*step(0., t), 0., 0.);\n        \n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI   3.1415926\n#define TAU 6.2831853\n#define PI_2 1.5707963\n\n/* quaternions, where vec4(x,y,z,w) is w+ix+jy+kz */\n\nvec4 qmult(vec4 p, vec4 q) {\n    vec3 pv = p.xyz, qv = q.xyz;\n    return vec4(p.w * qv + q.w * pv + cross(pv, qv), p.w * q.w - dot(pv, qv));\n}\n\nvec4 qaxisang(vec3 axis, float angle) {\n    return vec4(sin(angle*0.5) * axis, cos(angle*0.5));\n}\n\nvec3 rotate(vec3 point, vec4 unitquat) {\n    vec3 rv = unitquat.xyz;\n    return qmult(unitquat, vec4(point * unitquat.w - cross(point, rv), dot(point, rv))).xyz;\n}\n\nvec4 qmouse(vec4 iMouse, vec3 iResolution, float iTime, float initRotation) {\n    vec2 init = vec2(0.5 + 0.25*initRotation * sin(iTime), 0.5 + initRotation * cos(iTime));\n    vec2 mouse = mix(init, iMouse.xy / iResolution.xy, step(0.0027, iMouse.y));\n    vec4 rotY = qaxisang(vec3(0., 1., 0.), PI - TAU * mouse.x);\n    vec4 rotX = qaxisang(vec3(1., 0., 0.), PI * mouse.y - PI_2);\n    return qmult(rotY, rotX);\n}","name":"Common","description":"","type":"common"}]}