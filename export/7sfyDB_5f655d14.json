{"ver":"0.1","info":{"id":"7sfyDB","date":"1687426723","viewed":114,"name":"Simple line with normal and trim","username":"G4ROOT","description":"Draw a line and trim each end. draw other stuff base on the line normal","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["line","geometry","dot"],"hasliked":0,"parentid":"Xtl3RS","parentname":"Basic line drawing"},"renderpass":[{"inputs":[],"outputs":[],"code":"#define POINT_SIZE 0.007\n#define LINE_WIDTH 0.0025 // wanna get rectangle? :)\n\n\n#define CHK_POINT(uv, point) (distance(uv, point) < POINT_SIZE)\n\nfloat normal_dist(vec2 linepos, vec2 linevec, vec2 pos)\n{\n    // invert middle - to swap direction\n    return (linevec.x * (pos.y - linepos.y) - linevec.y * (pos.x - linepos.x))\n        / length(linevec); // scale\n}\n\n\nbool inLine(vec2 linepos, vec2 linevec, vec2 pos, bool trim)\n{\n    bool r = abs(normal_dist(linepos, linevec, pos)) < LINE_WIDTH;\n\n    // trim line ending\n    if (trim && r) {\n        float l = dot(linevec, linevec);\n        r = l > dot(linepos - pos, linevec) // above vector end\n         && l < dot(linepos - pos + linevec, linevec); // below line start\n    }\n\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float PI = 3.14159265;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = fragCoord.xy / iResolution.yy;\n\n    //set background color to black\n    vec3 color = vec3(0.);\n\n    vec2 point1 = vec2(sin(iTime)*0.2+0.5, cos(iTime)*0.2+0.5);\n    vec2 point2 = vec2(sin(iTime+PI)*0.2+0.5, cos(iTime+PI)*0.2+0.5);\n    float lineDist;\n\n    if (CHK_POINT(pos, point1)) { // line start dot\n      color = vec3(1., 0., 0.);\n    } else if (CHK_POINT(pos, point2)) { // line end dot\n      color = vec3(0., 0., 1.);\n    } else if (inLine(point1, point1 - point2, pos, true)) { // in the line?\n      color = vec3(0., 1., 0.);\n    } else if ((lineDist = normal_dist(point1, point1 - point2, pos)) > 0.) { // on wich side of the line?\n       // render fancy stuff on the right side of the line\n       color = lineDist * 6. * vec3(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}