{"ver":"0.1","info":{"id":"WsBfz1","date":"1590731775","viewed":191,"name":"Lost in the K-hole","username":"postpoptart","description":"Enjoyed the  version @chronos and decided I wanted to tweak a little for color and, well, it got colored. Sorta loops around 100 seconds. ","likes":12,"published":1,"flags":48,"usePreview":0,"tags":["2d","cellular","smooth","automaton","continuous","sandpile","abelian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Smooth Abelian Sandpile\" by chronos. https://shadertoy.com/view/MlKSDm\n\n#define asymptotic 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 buffer = texture(iChannel0, uv);\n    \n#if asymptotic\n    vec3 color = vec3(   2. / (1. + exp(-1.*buffer.r)) - 1.   ); // tanh\n\n    color.rg = exp(color.rg)-(sin(iTime*.125)+1.5);\n    color.gb = sqrt(color.gb)-(sin(iTime*.0625)-.25);\n    color = mix(vec3(1), color, smoothstep(0.2,0.5,buffer.r));\n    \n    \n#else\n    vec3 color = vec3(mod(buffer.r, 1.));\n#endif\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Mouse 0\n\nfloat transition(float x, float eps)\n{\n    //return min(floor(x), 1.); // or (1.-step(1., x));\n    return smoothstep(1.-eps, 1.+eps, x); // modified rule\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 buffer = vec4(0.);\n    \n    if(iFrame < 10 || texture( iChannel1, vec2(32.5/256.0, 0.5) ).x > 0.5) \n    {       \n        buffer.rgb = 1.*vec3(smoothstep(1.0, 0., length(fragCoord.xy/iResolution.xx- vec2(0.5,0.3))));\n    } else {\n        \n        \n    \tbuffer = texture(iChannel0, uv);\n    \tvec4 left   = texture(iChannel0, (fragCoord.xy + vec2( -1.,  0.) ) / iResolution.xy);\n    \tvec4 right  = texture(iChannel0, (fragCoord.xy + vec2(  1.,  0.) ) / iResolution.xy);\n    \tvec4 top    = texture(iChannel0, (fragCoord.xy + vec2(  0.,  1.) ) / iResolution.xy);\n    \tvec4 bottom = texture(iChannel0, (fragCoord.xy + vec2(  0., -1.) ) / iResolution.xy);\n    \n        \n        float eps = 0.3;\n    \tbuffer.xyz -= transition(buffer.r, eps);\n    \n    \tbuffer.xyz += 1./4. * transition(left.r  , eps);\n    \tbuffer.xyz += 1./4. * transition(right.r , eps);\n    \tbuffer.xyz += 1./4. * transition(top.r   , eps);\n    \tbuffer.xyz += 1./4. * transition(bottom.r, eps);\n    \n        buffer.xyz = max(buffer.xyz, 0.);\n        \n\t\t#if Mouse\n        \tbuffer.xyz += 0.3*smoothstep(.04, 0., length((iMouse.xy - fragCoord)/iResolution.xx));\n\t\t#endif\n    }\n     \n\tfragColor = vec4(buffer.xyz, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}