{"ver":"0.1","info":{"id":"Md33zB","date":"1450429026","viewed":5530,"name":"Rorschach test","username":"zifnab","description":"Mirrored and thresholded noise function to generate what looks like ink blots from the Rorschach test","likes":157,"published":1,"flags":0,"usePreview":0,"tags":["noise","inkblot","rorschach"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"/*\n A noise function mirrored and thresholded to maximize the value at the center of the screen\n Combined with a second layer of noise to produce an ink on paper effect\n*/\n\nconst vec3 inkColor = vec3(0.01, 0.01, 0.1);\nconst vec3 paperColor = vec3(1.0, 0.98, 0.94);\n\nconst float speed = 0.0075;\nconst float shadeContrast = 0.55;\n\n//3D simplex noise from: https://www.shadertoy.com/view/XsX3zB\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t vec4 w, d;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f = 0.0;\t\n\tfloat frequency = 1.0;\n\tfloat amplitude = 0.5;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += simplex3d(p * frequency) * amplitude;\n\t\tamplitude *= 0.5;\n\t\tfrequency *= 2.0 + float(i) / 100.0;\n\t}\n\treturn min(f, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Setup coordinates\n    vec2 uv = 1.0 - fragCoord.xy / iResolution.xy;\n    vec2 coord = 1.0 - uv * 2.0;\n    uv.x = 1.0 - abs(1.0 - uv.x * 2.0);\n    vec3 p = vec3(uv, iTime * speed);\n    \n    //Sample a noise function\n    float blot = fbm(p * 3.0 + 8.0);\n    float shade = fbm(p * 2.0 + 16.0);\n    \n    //Threshold\n    blot = (blot + (sqrt(uv.x) - abs(0.5 - uv.y)));\n    blot = smoothstep(0.65, 0.71, blot) * max(1.0 - shade * shadeContrast, 0.0);\n    \n    //Color\n    fragColor = vec4(mix(paperColor, inkColor, blot), 1.0);\n    fragColor.rgb *= 1.0 - pow(max(length(coord) - 0.5, 0.0), 5.0);\n}","name":"","description":"","type":"image"}]}