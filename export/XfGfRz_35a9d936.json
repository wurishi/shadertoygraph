{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"vec3 colorGradients(vec2 fragCoord, vec3 iResolution) {\n    float h = floor(1.0 + 24.0 * fragCoord.y / iResolution.y) / 24.0 * 3.141592 * 2.;\n    float L = floor(fragCoord.x * 24.0 / iResolution.y) / (24.0 / iResolution.y) / iResolution.x - 0.4;\n    vec3 color = cos(h + vec3(0.0, 1.0, 2.0) * 3.141592 * 2.0 / 3.0);\n    float maxRGB = max(color.r, max(color.g, color.b));\n    float minRGB = min(color.r, min(color.g, color.b));\n\n    return exp(15.0 * L) * (color - minRGB) / (maxRGB - minRGB);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n \n    vec3 color = colorGradients(fragCoord, iResolution);\n\n    color = agx_tonemapping(color);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"// In practice, there is still debate and confusion around whether sRGB data\n// should be displayed with pure 2.2 gamma as defined in the standard,\n// or with the inverse of the OETF.\n// https://en.wikipedia.org/wiki/SRGB\n#define BT709_OETF\n\n#if defined(PURE_GAMMA)\nvec3 to_linear(vec3 sRGB) {\n    return pow(sRGB, vec3(2.2));\n}\n\nvec3 from_linear(vec3 linearRGB) {\n    return pow(linearRGB, vec3(1.0 / 2.2));\n}\n\n#elif defined(BT709_OETF)\nvec3 to_linear(vec3 sRGB) {\n    bvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n    vec3 higher = pow((sRGB + vec3(0.055)) / vec3(1.055), vec3(2.4));\n    vec3 lower = sRGB / vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n\nvec3 from_linear(vec3 linearRGB) {\n    bvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n    vec3 higher = vec3(1.055) * pow(linearRGB, vec3(1.0 / 2.4)) - vec3(0.055);\n    vec3 lower = linearRGB * vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n\n#endif\n\nvec3 saturate(vec3 v) {\n    return clamp(v, 0.0, 1.0);\n}\n\nvec3 agx_curve3(vec3 v) {\n    const float threshold = 0.6060606060606061;\n    const float a_up = 69.86278913545539;\n    const float a_down = 59.507875;\n    const float b_up = 13.0 / 4.0;\n    const float b_down = 3.0 / 1.0;\n    const float c_up = -4.0 / 13.0;\n    const float c_down = -1.0 / 3.0;\n\n    vec3 mask = step(v, vec3(threshold));\n    vec3 a = a_up + (a_down - a_up) * mask;\n    vec3 b = b_up + (b_down - b_up) * mask;\n    vec3 c = c_up + (c_down - c_up) * mask;\n    return 0.5 + (((-2.0 * threshold)) + 2.0 * v) * pow(1.0 + a * pow(abs(v - threshold), b), c);\n}\n\nvec3 agx_tonemapping(vec3 /*Linear BT.709*/ci) {\n    const float min_ev = -12.473931188332413;\n    const float max_ev = 4.026068811667588;\n    const float dynamic_range = max_ev - min_ev;\n\n    const mat3 agx_mat = mat3(0.8424010709504686, 0.04240107095046854, 0.04240107095046854, 0.07843650156180276, 0.8784365015618028, 0.07843650156180276, 0.0791624274877287, 0.0791624274877287, 0.8791624274877287);\n    const mat3 agx_mat_inv = mat3(1.1969986613119143, -0.053001338688085674, -0.053001338688085674, -0.09804562695225345, 1.1519543730477466, -0.09804562695225345, -0.09895303435966087, -0.09895303435966087, 1.151046965640339);\n\n    // Input transform (inset)\n    ci = agx_mat * ci;\n\n    // Apply sigmoid function\n    vec3 ct = saturate(log2(ci) * (1.0 / dynamic_range) - (min_ev / dynamic_range));\n    vec3 co = agx_curve3(ct);\n\n    // Inverse input transform (outset)\n    co = agx_mat_inv * co;\n\n    return /*BT.709 (NOT linear)*/co;\n}","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfGfRz","date":"1733670451","viewed":220,"name":"AgX_no_LUT","username":"bWFuanVzYWth","description":"Minimal AgX in GLSL, WITHOUT LUT. This is not a fitting, but the exact solution I obtained through algebraic simplification.\nhttps://github.com/bWFuanVzYWth/AgX","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["tonemapping","tonemapping","tonemap","tonemap","agx","agx"],"hasliked":0,"parentid":"","parentname":""}}