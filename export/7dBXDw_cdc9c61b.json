{"ver":"0.1","info":{"id":"7dBXDw","date":"1620346996","viewed":269,"name":"jumpflood monte carlo take 2","username":"Carandiru","description":"applying the jfa algorithm for lighting (emission only no occulders)\n\nthis is a much faster version.\n\n*** If anyone can suggest some improvements to achieve correct blending of light colors in this algorithm I would be very grateful! ***","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["2d","lighting","jfa"],"hasliked":0,"parentid":"7s2XDW","parentname":"jumpflood monte carlo"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// jumpflood lights​ (research) - proper bluenoise properties retained in this versioon\n// http://bit.ly/supersinfulsilicon\n\n// jumpflood lights by Jason Tully is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/7dBXDw\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n// really nice article referenced by samuelbigos :\n// @ https://samuelbigos.github.io/posts/2dgi1-2d-global-illumination-in-godot.html\n\n// jumpflood shader template taken from:\n// https://www.shadertoy.com/view/MstBWX\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = textureLod(iChannel0,fragCoord/iResolution.xy,0.0);\n    fragColor = vec4(data.rgb/data.a, 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n\n\n//--------------------------------------------------\n\nvec4 JFAStep(vec2 fragCoord, int level)\n{\n    // current data in texture on fragCoord position\n    vec4 ret = texture(iChannel0, fragCoord/iChannelResolution[0].xy);\n    \n    // big number so any real distance will be smaller than that\n    float curDist = 999999999.;\n    \n    // that means the current data contains info of a nearby seed\n    if( ret != vec4(0.) )\n    {\n        vec2 seedCoord;\n\t\tvec3 seedColor;\n        \n        DecodeData(ret, seedCoord, seedColor);\n        \n        curDist = distance(fragCoord, seedCoord);\n    }\n    \n    vec2 offset = vec2(exp2(max(0., float(JFA_MAX_STEPS - level) ) ) );\n    \n    for(int x = -1; x <= 1; x++)\n    {\n    \tfor(int y = -1; y <= 1; y++)\n        {\n\t\t\tvec4 read = texture(iChannel0, (fragCoord + vec2(x,y)*offset)/iChannelResolution[0].xy );\n            if( read != vec4(0.) )\n            {\n                vec2 coord;\n                vec3 color;\n                \n                DecodeData(read, coord, color);\n                \n                float dist = distance(coord, fragCoord);\n                \n                if( dist < curDist)\n                {\n                    ret = read;\n                }\n            }\n        }\n    }\n    \n    return ret;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    // Create seeds\n    if(iFrame == 0)\n    {\n\t\tif(Rand(fragCoord) > (1.- SEED_CHANCE))\n        {\n            fragColor = EncodeData(fragCoord, RandColor(fragCoord));\n        }\n        else\n        {\n            fragColor = vec4(0.);\n        }\n        \n    }\n    else\n    {\n        if(mod( float(iFrame), FRAME_DELAY) == 0.)\n        {\n        \tfragColor = JFAStep(fragCoord, int(float(iFrame) / float(FRAME_DELAY)) );\n            \n        }\n        else\n        {\n            fragColor = texture(iChannel0, fragCoord/iChannelResolution[0].xy);\n        }\n    }\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// jumpflood shader template taken from:\n// https://www.shadertoy.com/view/MstBWX\n\n#define MARCH_STEPS 7   // SEEMS LESS IS BETTER ???\n\n#define SEED_CHANCE .0002\n#define JFA_MAX_STEPS 10\n#define FRAME_DELAY 1.0\n\n//============================================================\n// Hash without sine from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n// copied the random functions...\n//============================================================\n// returns 0..1\nfloat Rand(vec2 co)\n{\n    co.x += fract(iDate.w * 5.342);\n    co.y += fract(iDate.w * 11.214);\n    return hash12(co);\n}\n\n//============================================================\nvec3 RandColor (vec2 co)\n{\n    return vec3\n    (\n        Rand(co),\n        Rand(co*2.143),\n        Rand(co*3.163)\n\t);\n}\n\n// Putting coordinate encoded in the color\nvec4 EncodeData(vec2 coord, vec3 color)\n{\n\tvec4 ret = vec4(0.);\n\tret.xy = coord;\n    ret.z = floor(color.x * 255.)*256. + floor(color.y * 255.);\n    ret.w = floor(color.z * 255.);\n\treturn ret;\n}\n\n// Getting the coordinate out of the color\nvoid DecodeData(in vec4 data, out vec2 coord, out vec3 color )\n{\n\tcoord = data.xy;\n    color.x = floor(data.z/256.)/255.;\n    color.y = mod(data.z,256.)/255.;\n    color.z = mod(data.w,256.)/255.;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// jumpflood lights​ (research)\n// http://bit.ly/supersinfulsilicon\n\n// jumpflood lights by Jason Tully is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/7dBXDw\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n// jumpflood shader template taken from:\n// https://www.shadertoy.com/view/MstBWX\n\nvec2 random(vec2 uv) \n{\n   return textureLod(iChannel1, (uv * iResolution.xy) / 1024.0f, 0.0f).rg;\n}\n\nfloat sample_distance_color(in vec2 uv, out vec3 seedColor) {\n\n    vec2 seedCoord;\n\n    vec4 read = textureLod(iChannel0, uv, 0.0f);\n    \n    DecodeData(read, seedCoord, seedColor);\n    \n    return(distance(uv, seedCoord/iResolution.xy));\n}\n\nvec4 map( in vec2 p )\n{\n    vec4 sampling;\n    \n    sampling.a = sample_distance_color(p, sampling.rgb);\n    \n    return sampling;\n}\n\nvec2 randomInCircle( in vec2 p )\n{\n    return normalize(random(p) * 2.0f - 1.0f);\n}\n    \n// WoS\nvec3 march( in vec2 p )\n{\n    vec4 h;\n    vec2 uv = p;\n\tfor( int i=0; i<MARCH_STEPS; ++i )\n    {\n        h = map(p);\n        if( h.a<0.001 ) break;\n        p = p + h.a*randomInCircle((p + float(iFrame)));\n    }\n    \n    return h.rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec3 col = march(p);\n        \n    // montecarlo\n    vec4 data = textureLod(iChannel2,p,0.0);\n    data.rgb += col;\n    ++data.a;\n    fragColor = data;    \n}","name":"Buffer B","description":"","type":"buffer"}]}