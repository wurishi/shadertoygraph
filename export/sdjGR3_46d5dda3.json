{"ver":"0.1","info":{"id":"sdjGR3","date":"1617751507","viewed":877,"name":"Sphere Rim Lighting with Fresnel","username":"inspirnathan","description":"Simple example of rim lighting a sphere using fresnel reflection.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fresnel","inspirnathan","rimlighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n** Simple example of rim lighting using fresnel reflection\n*/\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nfloat sdSphere(vec3 p, float r )\n{\n  vec3 offset = vec3(0, 0, -2);\n  return length(p - offset) - r;\n}\n\nfloat sdScene(vec3 p) {\n  return sdSphere(p, 1.);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy) +\n      e.yyx * sdScene(p + e.yyx) +\n      e.yxy * sdScene(p + e.yxy) +\n      e.xxx * sdScene(p + e.xxx));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.1);\n\n  vec3 ro = vec3(0, 0, 3);\n  vec3 rd = normalize(vec3(uv, -1));\n\n  float d = rayMarch(ro, rd);\n\n  vec3 p = ro + rd * d;\n  vec3 normal = calcNormal(p);\n  vec3 lightPosition = vec3(4, 4, 7);\n  vec3 lightDirection = normalize(lightPosition - p);\n\n  float diffuse = clamp(dot(normal, lightDirection), 0., 1.);\n  vec3 diffuseColor = vec3(0, 0.6, 1);\n\n  float exponent = 2.; // lower number makes lighting go deeper into sphere\n  float fresnel = pow(clamp(1. - dot(normal, -rd), 0., 1.), exponent);\n  vec3 rimColor = vec3(1, 0, 1);\n  \n  vec3 sphereColor = diffuse * diffuseColor + fresnel * rimColor;\n  \n  col = mix(col, sphereColor, step(d - MAX_DIST, 0.));\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}