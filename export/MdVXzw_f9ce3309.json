{"ver":"0.1","info":{"id":"MdVXzw","date":"1463608473","viewed":1717,"name":"Squares Background v2","username":"vamoss","description":"Square animation for background","likes":51,"published":1,"flags":0,"usePreview":0,"tags":["square","rectangle","background","watery"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 bgColor = vec3(0.01, 0.16, 0.42);\nvec3 rectColor = vec3(0.01, 0.26, 0.57);\n\n//noise background\nconst float noiseIntensity = 2.8;\nconst float noiseDefinition = 0.6;\nconst vec2 glowPos = vec2(-2., 0.);\n\n//rectangles\nconst float total = 60.;//number of rectangles\nconst float minSize = 0.03;//rectangle min size\nconst float maxSize = 0.08-minSize;//rectangle max size\nconst float yDistribution = 0.5;\n\n\nfloat random(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise( in vec2 p )\n{\n    p*=noiseIntensity;\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( random( i + vec2(0.0,0.0) ), \n                     random( i + vec2(1.0,0.0) ), u.x),\n                mix( random( i + vec2(0.0,1.0) ), \n                     random( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm( in vec2 uv )\n{\t\n\tuv *= 5.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    \n\tf = 0.5 + 0.5*f;\n    return f;\n}\n\nvec3 bg(vec2 uv )\n{\n    float velocity = iTime/1.6;\n    float intensity = sin(uv.x*3.+velocity*2.)*1.1+1.5;\n    uv.y -= 2.;\n    vec2 bp = uv+glowPos;\n    uv *= noiseDefinition;\n\n    //ripple\n    float rb = fbm(vec2(uv.x*.5-velocity*.03, uv.y))*.1;\n    //rb = sqrt(rb); \n    uv += rb;\n\n    //coloring\n    float rz = fbm(uv*.9+vec2(velocity*.35, 0.0));\n    rz *= dot(bp*intensity,bp)+1.2;\n\n    //bazooca line\n    //rz *= sin(uv.x*.5+velocity*.8);\n\n\n    vec3 col = bgColor/(.1-rz);\n    return sqrt(abs(col));\n}\n\n\nfloat rectangle(vec2 uv, vec2 pos, float width, float height, float blur) {\n    \n    pos = (vec2(width, height) + .01)/2. - abs(uv - pos);\n    pos = smoothstep(0., blur , pos);\n    return pos.x * pos.y; \n   \n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //bg\n    vec3 color = bg(uv)*(2.-abs(uv.y*2.));\n    \n    //rectangles\n    float velX = -iTime/8.;\n    float velY = iTime/10.;\n    for(float i=0.; i<total; i++){\n        float index = i/total;\n        float rnd = random(vec2(index));\n        vec3 pos = vec3(0, 0., 0.);\n        pos.x = fract(velX*rnd+index)*4.-2.0;\n        pos.y = sin(index*rnd*1000.+velY) * yDistribution;\n        pos.z = maxSize*rnd+minSize;\n        vec2 uvRot = uv - pos.xy + pos.z/2.;\n    \tuvRot = rotate2d( i+iTime/2. ) * uvRot;\n        uvRot += pos.xy+pos.z/2.;\n        float rect = rectangle(uvRot, pos.xy, pos.z, pos.z, (maxSize+minSize-pos.z)/2.);\n\t    color += rectColor * rect * pos.z/maxSize;\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}