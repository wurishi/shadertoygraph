{"ver":"0.1","info":{"id":"Xstyzn","date":"1517778619","viewed":2090,"name":"GranTurismo tone mapper","username":"meshula","description":"An implementation of the Gran Turismo tone mapper, as described here https://www.desmos.com/calculator/gslcdxvipg","likes":11,"published":1,"flags":0,"usePreview":1,"tags":["hdr","tonemapping","tonemapper","granturismo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// GT Tonemap\n// Copyright(c) 2017 by Hajime Uchimura @ Polyphony Digital Inc.\n// Translated to GLSL by Nick Porcino from\n// Romain Guy's translation of https://www.desmos.com/calculator/gslcdxvipg\n// merged with lots of stuff from\n// Timothy Lotte's shader - https://www.shadertoy.com/view/XljBRK\n// original presentation here - https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp\n\n#define F1 float\n#define F3 vec3\n\nF1 Linear1(F1 c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}\nF3 Linear3(F3 c){return F3(Linear1(c.r),Linear1(c.g),Linear1(c.b));}\nF1 Srgb1(F1 c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\nF3 Srgb3(F3 c){return F3(Srgb1(c.r),Srgb1(c.g),Srgb1(c.b));}\n\nF1 w(F1 x, F1 e0, F1 e1)\n{\n    if (x <= e0) return 0.0;\n    if (x >= e1) return 1.0;\n    F1 m = (x-e0)/(e1-e0);\n    return m * m * 3.0 - 2.0 * m;\n}\nF3 w3(F3 x, F3 e0, F3 e1) { return F3(w(x.x, e0.x, e1.x),\n                                      w(x.y, e0.y, e1.y),\n                                      w(x.z, e0.z, e1.z));}\nF3 Hue(F1 n){return clamp(F3(\n abs(fract(n)-0.5)*(-6.0)+2.0,\n abs(fract(n+(1.0/3.0))-0.5)*(-6.0)+2.0,\n abs(fract(n-(1.0/3.0))-0.5)*(-6.0)+2.0),F3(0.0),F3(1.0));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // these parameters would be uniforms\n    //\n    // Maximum brightness, 1 .. 100\n    float P_in = 1.0;\n    \n    // Contrast 1 .. 5\n    float a_in = 1.0;\n    \n    // Linear section start 0 .. 1\n    float m_in = 0.4;\n    \n    // Linear section length 0 .. 1\n    float l_in = 0.24;\n    \n    // Black tightness 1 .. 3, 0 .. 1\n    float c_in = 1.33;\n    float b_in = 0.0;\n    //\n    // end of parameters section\n    \n    vec4 P = vec4(P_in);\n    vec4 a = vec4(a_in);\n    vec4 m = vec4(m_in);\n    vec4 l = vec4(l_in);\n    vec4 c = vec4(c_in);\n    vec4 b = vec4(b_in);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 x = texture(iChannel0, uv * 3.0);\n \tx.rgb=Linear3(x.rgb) * 0.5;\n\n    // swatches from Timothy Lotte's shader - https://www.shadertoy.com/view/XljBRK\n \n #if 1\n  // Add colored gradients\n  F3 bars=Hue(uv.y/(5.0/8.0))*2.0;   \n  x.xyz+=bars*bars*(uv.x*uv.x*uv.x*uv.x*uv.x);\n #endif\n    #if 1\n    float fy = 1.0-uv.y;\n  // Draw swatches\n  if(fy>7.0/8.0){\n   x.b=fract(uv.x*8.0);\n   x.r=1.0-fract(fy*8.0);\n   x.g=floor(uv.x*8.0)/8.0;\n   x.rgb=Linear3(x.rgb);}\n  else if(fy>6.0/8.0){\n   x.r=fract(uv.x*8.0);\n   x.g=1.0-fract(fy*8.0);\n   x.b=floor(uv.x*8.0)/8.0;\n   x.rgb=Linear3(x.rgb);}\n  else if(fy>5.0/8.0){\n   x.g=fract(uv.x*8.0);\n   x.b=1.0-fract(fy*8.0);\n   x.r=floor(uv.x*8.0)/8.0;\n   x.rgb=Linear3(x.rgb);}\n#endif\n\n    x *= 4.0;\n     #if 1\n  // Fade in/out\n  x.rgb*=pow(abs(sin(fract(iTime/16.0)*3.14159*2.0)),2.2);    \n #endif\n\n\n    // Linear Region Computation\n    // l0 is the linear length after scale\n    vec4 l0 = ((P - m) / l) / a;\n    vec4 L0 = m - (m / a);\n    vec4 L1 = m + (l - m) / a;\n    vec4 Lx = m + a * (x - m);\n\n    // Toe\n    vec4 Tx = m * pow(x / m, c) + b;\n    \n    // Shoulder\n    vec4 S0 = m + l0;\n    vec4 S1 = m + a * l0;\n    vec4 C2 = (a * P) / (P - S1);\n    vec4 Sx = P - (P - S1) * exp(-(C2 * (x - S0) / P));\n    \n    // Toe weight\n    vec4 w0;\n    w0.xyz = w3(x.xyz, vec3(0.0), m.xyz);\n    w0 = vec4(1.0) - w0;\n\n    // Shoulder weight\n    vec4 w2 = smoothstep(m + l0, m + l0, x);\n    // Linear weight\n    vec4 w1 = vec4(1) - w0 - w2;\n    \n    x = Tx * w0 + Lx * w1 + Sx * w2;\n    x.rgb = Srgb3(x.rgb);\n\n    fragColor = x;\n}\n","name":"Image","description":"","type":"image"}]}