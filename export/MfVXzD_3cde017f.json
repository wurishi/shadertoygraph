{"ver":"0.1","info":{"id":"MfVXzD","date":"1714916709","viewed":83,"name":"2-3-4","username":"jt","description":"A grid of 3 by 3 tiles filled with rectangles 2x1, 3x1 and 2x2 in random orientation.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["grid","random","tiling","2","3","4","2x2","3x1","2x1","3by3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MfVXzD 2-3-4, 2024 by Jakob Thomsen\n\n// A grid of 3 by 3 tiles filled with rectangles 2x1, 3x1 and 2x2 in random orientation.\n\n// tags: random, tiling, 2, 3, 4, 2x1, 2x2, 3x1, 3by3, grid\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define N 5.0\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nbool checker(vec2 q)\n{\n    return (fract(q.x/2.0)<0.5)==(fract(q.y/2.0)<0.5);\n}\n\nvec3 tile(vec2 p)\n{\n    vec2 q = floor(p); // global tile index\n    p = fract(p); // repeat, 0 <= p < 1\n    vec3 h = hash32(q + floor(iTime/2.0));\n    if(h.z < 0.5) p.xy = p.yx; // diagonal flip\n    if(h.y < 0.5) p.y = 1.0-p.y; // vertical mirror\n    if(h.x < 0.5) p.x = 1.0-p.x; // horizontal mirror\n    vec2 t = floor(p*3.0); // local tile coordinates, t in {0, 1, 2}\n    vec3 c = t.y < 1.0 ? vec3(0,0,1) : t.x < 2.0 ? vec3(0,1,0) : vec3(1,0,0);\n    return checker(q) ? 1.0 - c : c; // invert colors in checker pattern\n}\n\nbool edge(vec2 I)\n{\n    float e = 0.02;\n    vec3 a = tile(vec2(I-e));\n    vec3 b = tile(vec2(I+e));\n    return\n        any(greaterThan(abs(a-b),vec3(e))) // edges\n        ||\n        any(lessThan(fract(I), vec2(e))); // fix \"holes\" where same color meets over corners\n}\n\nvoid mainImage(out vec4 f, in vec2 p) // [-1,+1]\n{\n    vec2 R = iResolution.xy;\n    p = (2. * p - R) / R.y;\n    f = vec4(0);\n    if(all(lessThan(abs(p), vec2(1))))\n    {\n        p *= N;\n        f = vec4(tile(p),1);\n        if(checker(floor(p))) f = 1.0 - f; // remove color inversion\n        if(iMouse.z > 0.0) f = vec4(1); // click to remove colors\n        if(edge(p)) f *= 0.0;\n    }\n}\n","name":"Image","description":"","type":"image"}]}