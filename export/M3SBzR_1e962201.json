{"ver":"0.1","info":{"id":"M3SBzR","date":"1729103580","viewed":37,"name":"Damaged VCR Zhen Ren","username":"renzhen","description":"Simulating a damaged VCR playing a video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    float scale = 0.03;\n    vec2 jitter = vec2(0.2 * scale * cos(iTime * 0.5), 0.1 * scale * cos(iTime * 0.4));\n    vec2 offset1 = vec2(scale, 0.4 * scale * sin(0.5 * iTime)) + jitter;\n    vec2 offset2 = vec2(1.5f * scale, 0.4 * scale * sin(0.5 * iTime)) + jitter;\n    vec2 offset3 = vec2(0.5f * scale, 0.2 * scale * sin(0.5 * iTime)) + jitter;\n    \n    float lo = mod(iTime * 0.2, 1.0);\n    float hi = lo + 0.15f;\n    if (warpedUv.y > lo && warpedUv.y < hi) {\n        warpedUv.x += -0.02f * tan(100.f * uv.y + 2000.f * iTime);\n    }\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b) * pow(rand(uv + 0.3f * iTime), 0.2f);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}