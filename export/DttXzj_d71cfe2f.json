{"ver":"0.1","info":{"id":"DttXzj","date":"1685598766","viewed":121,"name":"chromatic speaker","username":"Carandiru","description":"cool multicolor spiral in original shader\n\n*updated* - look at those primes!","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"NtyBzt","parentname":"spiral masked"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cool multicolor spiral in original shader\n\n// *updated* - look at those primes!\n\n#define GOLDEN_RATIO (1.61803398874989484820)\n#define PI (3.14159265358979323846)\n\nvec4 HueShift (in vec3 Color, in float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    \n    vec3 U = Color-P;\n    \n    vec3 V = cross(vec3(0.55735),U);    \n\n    Color = U*cos(Shift*2.0*PI) + V*sin(Shift*2.0*PI) + P;\n    \n    return vec4(Color,1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 correction = vec2(iResolution.x/iResolution.y, 1.);\n\n    uv *= correction;\n    uv += (correction-1.)/-2.;\n\n    vec2 disp = uv-.5;\n    float dist = length(disp);\n\n    float z = GOLDEN_RATIO * length(uv)+length(fwidth(uv)) * 0.5f + 0.5f;\n    float t = iTime;\n    \n    vec3 a = vec3(HueShift(vec3(uv, z), dist*t+t*t*dist));\n    vec3 b = vec3(HueShift(vec3(uv, z), dist*(t + 1.0f)+t*t*dist));\n    \n    vec3 c = vec3(0);\n    dist = length(a-b)*fract(t);\n    c = abs(a-b) / (1.0f + dist*dist);\n    \n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}