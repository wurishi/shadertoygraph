{"ver":"0.1","info":{"id":"clyfRD","date":"1701873936","viewed":85,"name":"Purple Corridor","username":"KingJ","description":"Guess what it is","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["vortex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float height(in vec2 uv) {\n    return texture(iChannel0,uv).b*texture(iChannel1,uv+vec2(0.0,iTime*0.1)).b;\n}\n\nconst vec2 NE = vec2(0.05,0.0);\nvec3 normal(in vec2 uv) {\n    return normalize(vec3(height(uv+NE.xy)-height(uv-NE.xy),\n                          0.0,\n                          height(uv+NE.yx)-height(uv-NE.yx)));\n}\n\n\nconst vec4 waterColor = vec4(0.1,0.1,0.32,1.0);\nvec3 lightDir = normalize(vec3(10.0,15.0,5.0));\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy/iResolution.xy-vec2(.5);\n    uv.y *= iResolution.y/iResolution.x;\n    //uv *= 3.;\n    \n    float dist = length(uv);\n    float angle = atan(uv.y,uv.x);\n    \n    vec2 ruv = uv;\n    uv = vec2(cos(angle+dist*3.),dist+(iTime*0.2));\n\n    float h = height(uv);\n    vec3 norm = normal(uv);\n    \n    int lineAmount = 30;\n    float lineEndDist = .7;\n    float lineMaxWidth = .8;\n    float lineSmoothWidth = .2;\n    float curving = 8.;\n    float rotations = 1.;\n    \n    vec3 lines = vec3(smoothstep(lineMaxWidth, lineMaxWidth+lineSmoothWidth, .5*cos(angle * float(lineAmount) + iTime*rotations + curving/dist*1.1+2.)+.5 + dist/lineEndDist));\n    vec3 color = lines * smoothstep(.1, .3, dist) * smoothstep(.7, .0, dist) * .2 + vec3(.1, .01, .2);\n\tfragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}