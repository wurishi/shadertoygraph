{"ver":"0.1","info":{"id":"M3scDr","date":"1726069309","viewed":8,"name":"geant's awesome flower 3","username":"geant","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"MXsyDn","parentname":"geant's awesome flower 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\nfloat secondFlower(float a, float radius)\n{\n    float p = 3.14159265359;\n    float epic = sin(6.0 * iTime / p) * 0.50 + 0.50;\n    float t = fract((2.5 * a) / p);\n    \n    t = bias(t, 0.1);\n    // it's not even a flower at this point but it's funny so\n    return radius + 30.0 * t + (10.0 * epic) + sin(iTime * 4.0) * pow(tan(a * 3.0), 2.0);\n}\n\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    float funny = sin(2.0 * iTime) * 0.50 + 0.50;\n    funny = bias(funny, 0.1);\n    \n    return secondFlower((a  + 8.0 * funny), radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n        \n    center.x += 100.0 * tan(0.5 + iTime); // used a trick from Aaron Tian's flower\n    center.y += 100.0 * sin(0.5 + iTime);\n    \n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n    float m = 225.0 * (cos(iTime * 2.0) * 0.50 + 0.5);\n    m *= 2.0 * sin((fragCoord.y * 6.0 + fragCoord.x * 6.0) + 9.0 * iTime);\n    \n\tvec4 layer1 = vec4(rgb(m, 255.0 * fragCoord.y + iTime, fragCoord.x * 255.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(0.3, 0.3, 0.3);\n    \n    float sillySpeed = 4.0;\n    float silly = 0.5 * sin(iTime * sillySpeed) + 0.50;\n    float silly2 = 0.5 * cos(iTime * sillySpeed) + 0.50;\n    float silly3 = 0.5 * cos(iTime * sillySpeed + 0.50) + 0.50;\n    \n    vec3 funColor = 255.0 * rgb(silly, silly2, silly3) * rgb(0.5, 0.5, 0.5);\n    vec3 bloo = rgb((0.5 * sin(1.0 + iTime) + 0.50) * 255.0, 225.0, (0.5 * sin(1.0 + iTime) + 0.50) * 255.0);\n    \n    vec3 color = mix(funColor, bloo, radius / 225.0);\n    \n    //color = mix(color, 255.0 * rgb(silly, silly2, silly3), radius / 225.0);\n    \n\tvec4 layer2 = circle(uv, center, radius, color);    \n    layer1 += layer2;\n\t    \n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}