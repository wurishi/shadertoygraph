{"ver":"0.1","info":{"id":"lsycDD","date":"1522023959","viewed":124,"name":"rounded rect v7","username":"matkatmusic","description":"I didn't write this algorithm.  so I'm not sure what it does.\n\nrounded rect v.7  need to convert it so radius, gap from left edge, gap from right edge, gap from top edge, gap from bottom edge, and gradient width are all in pixels and user-definable. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["roundedrect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 glFragColor, in vec2 glFragCoord )\n{\n    /*\nI would like to be able to control, in pixels:\nthe gap from left edge where the gradient starts\nthe gap from right edge where the gradient starts\nthe gap from the top edge where the gradient starts\nthe gap from the bottom edge where the gradient starts\nthe radius of the rounded corners\nthe width of the gradient. \n\t*/\n    vec2 R = iResolution.xy;\n    vec2 U = glFragCoord;\n    U = ( R - abs( U+U - R ) ) / R.y;\n    \n    U = 1. - U/.5;\n    float m = min(U.x,U.y);\n    float M = max(U.x,U.y);\n    glFragColor = mix(vec4(1,0,0,0), vec4(0,1,1,0), vec4( m<0. ? M : length(U) ) );\n    //glFragColor = sqrt(glFragColor);\n}","name":"Image","description":"","type":"image"}]}