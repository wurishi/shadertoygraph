{"ver":"0.1","info":{"id":"WldfWs","date":"1614365191","viewed":752,"name":"Inversion cosmology","username":"Bananaft","description":"Drag mouse to move center of inversion.\nA-Z to zoom in and out. Click part of the screen you want to zoom.\n\nMore info: https://twitter.com/Bananaft/status/1365381704635060226","likes":25,"published":1,"flags":48,"usePreview":0,"tags":["stereographicprojection","sphereinversion","mobiustransformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat man1(vec2 uv)\n{\n    float n= -0.1 + length(vec2(0.0,0.3) - uv);\n    n = min(n, sdRoundedBox(uv,vec2(0.13,0.2),vec4(0.05)));\n    n = min(n,-0.05 + sdSegment(uv,vec2(0.2,0.15),vec2(0.05,0.15)));\n    n = min(n,-0.05 + sdSegment(uv,vec2(0.2,0.15),vec2(0.2,-0.2)));\n    n = min(n,-0.05 + sdSegment(uv,vec2(0.08,-0.15),vec2(0.08,-0.54)));\n    return n;\n}\n\nfloat man2(vec2 uv)\n{\n    float n= -0.1 + length(vec2(0.0,0.31) - uv);\n    n = min(n, sdRoundedBox(uv,vec2(0.13,0.2),vec4(0.05)));\n    n = min(n,-0.05 + sdSegment(uv,vec2(0.1,0.15),vec2(0.4,0.0)));\n    n = min(n,0.1* (-0.05 + sdSegment(uv,vec2(0.0,-0.15),vec2(0.0,0.3)))); // making neck dark and flat\n    n = min(n,-0.05 + sdSegment(uv,vec2(0.08,-0.15),vec2(0.15,-0.525)));\n    return n;\n}\n\nvec3 picture(vec2 pos, float k)\n{\n    //float d = fract(pos.x) * fract(pos.y);\n    //vec3 col = vec3(fract(pos.x*0.25),sign(pos.y), fract(length(pos)));\n    vec3 col = vec3(0.);\n    float planet = -3.0 + length(pos);\n    if(planet<0.)\n    {\n        //GRASS\n        float grass = 0.2 - 0.05 * sin(atan(pos.x, pos.y) * 32.);\n        col = vec3(0.2,0.6,0.1) * 1.+ 1.5 * min(planet,grass); // grass color\n        //SOIL   \n        if ((planet+ grass)<0.0)\n            col = vec3(0.3,0.25,0.15); //dirt color\n            \n        col *= 1. - 0.6 * clamp(1.0-pos.x-pos.y,0.,1.); // planet self-shadow\n            \n        //MANTLE\n            if (planet + grass *0.1< -0.8)\n                col = vec3(0.5,0.1,0.05) * (0.01 -planet); // lava color\n    \n    } else {\n        \n        //HOUSE\n        vec2 hpos = abs(pos);\n        float house = sdBox(hpos +vec2(0.,-3.5), vec2(1.,1.));\n        house = max(house, hpos.x *0.5 +hpos.y - 4.5);\n        //house = max(house, -(pos.x *0.5 -pos.y + 4.5));\n        \n        if(house < 0.)\n        {\n            \n            //WALLS\n            if(house > -0.15)  \n                col = vec3(0.2,0.2,0.2);  // walls color\n            else\n            {\n               \n                \n                if(pos.y>0.)\n                {\n                    vec2 wp = pos * 5.;\n                    float wlppr = length(vec2(abs(0.5 - fract(wp.x+wp.y)) ,abs(0.5 - fract(wp.y-wp.x))));\n                    col =  mix(vec3(1.,0.8,0.3),vec3(0.9,0.4,0.1),clamp(4.1 -wlppr * 16.,0.,1.));   //boy's wallpapers\n                } else {\n                    vec2 wp = pos * 3.;\n                    float wlppr = length(vec2(0.5 - abs(fract(wp.x+wp.y)) ,0.5 - abs(fract(wp.y-wp.x))));\n                    wlppr  = 2. * abs(0.5 - fract(wlppr*2.));\n                    col =  mix(vec3(0.6,0.3,0.7),vec3(0.5,0.2,0.6),clamp(2.1 -wlppr * 3. ,0.,1.));   //girl's wallpapers\n                }\n                \n                vec2 mpos = abs(pos)+vec2(0.,-3.57);\n                //MAN\n                \n                float man = man2(mpos);\n                if(man<0.)\n                {\n                    if(pos.y>0.) col = vec3(0.7,0.51,0.4);  //boy skin tone\n                    else col = vec3(0.98,0.68,0.6);  //girl skin tone\n                    \n                    float eye = length(mpos+vec2(-0.04,-0.33)) - 0.02;\n                    if (eye < 0.0)\n                    {\n                        col = vec3(0.7,0.7,0.7) * (1.- 50. * eye); // sclera\n                        if (eye < -0.01)\n                        {\n                             if(pos.y>0.) col = vec3(0.1,0.1,0.3); // boy eyes\n                             else col = vec3(0.2,0.03,0.03); //girl eyes\n                        }\n                    }\n\n                    //UNDERPANTS\n                    if (man > 4. * sdBox(mpos + vec2(0.,0.15), vec2(0.2,0.08)))\n                        col = vec3(0.2,0.2,0.5);\n                    \n                    col *= min(0.5 - man * 5.0,1.0);\n                }\n                \n                if(pos.y < 0.)\n                {\n                   \n                          \n                    float hair = sdUnevenCapsule(mpos -vec2(0.,0.1),0.2,0.13,0.2);\n                    \n                    hair = max(hair,min( -man, -0.07 + length(pos-vec2(-0.06,-3.98))));\n                    \n                    if (hair<0.)\n                        col = vec3(0.08,0.06,0.05); // girl's hair\n                        \n                    float dress =  max(sdTriangleIsosceles(pos+vec2(0.,4.1),vec2(0.23,0.8)),mpos.y-0.2)-man*0.3;\n                    dress = max(dress,0.07 - length(mpos+vec2(0.,-0.19)));\n                    if (dress<0.)\n                          col = vec3(0.9) * (0.8+(pos.x*pos.x)*-5.);   //dress\n\n                }\n            } \n            \n        }else {\n                 \n             //SKY\n             vec2 moonPos = pos + vec2(7. * sin(iTime*0.3),7. * cos(iTime*0.3));\n             float moon = 1. - length(moonPos);\n\n             float sun = length(pos - vec2(50.,50.));\n             col += vec3(1.,0.8,0.2) * clamp(3. - sun * 0.2,0.,8.);\n\n             float earthShadow = clamp(-1. *(2.4-sdSegment(pos,vec2(-0.5), vec2(-20.) )),0.,1.);\n             float moonShadow =  clamp(-1. *(0.1-sdSegment(moonPos,vec2(0), vec2(-30.) )),0.,1.);\n\n             col += vec3(1.,0.4,0.06) * 0.2 * clamp(1.0 - sun * 0.01,0.,1.0);  //sun outer glow\n             col += vec3(0.1,0.6,1.0) * max(1.-planet * 0.4,0.);   //atmosphere\n             col *= earthShadow;\n             col *= moonShadow;\n             \n             if (moon > 0.)\n             {          //dark side of the moon | lunar eclipse | bright side of the moon\n                 col = mix(vec3(0.1,0.1,0.1),mix(vec3(0.2,0.1,0.1),vec3(0.6,0.5,0.4),earthShadow), max(moonPos.x + moonPos.y,0.));\n             }\n             \n             col +=(1. - min(abs(sun - 300.) * 0.005,1.)) * vec3(0.3,0.,1.) * 0.2; // oort cloud, deep space or whatever\n\n        }\n\n    }\n    \n    \n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    uv.y /= aspect;\n\tvec2 mpol = texture( iChannel0, vec2(.5,.5)/iResolution.xy, -100.0 ).zw;\n    \n    vec2 m = vec2(0.,mpol.y);//mpol.y * vec2(sin(mpol.x),cos(mpol.x));\n    \n    vec2 zoom = texture( iChannel0, vec2(1.5,.5)/iResolution.xy, -100.0 ).xy;\n    //m.x = iMouse.x/iResolution.x; m.y = iMouse.y/iResolution.y;\n    //m.x += 1.0;\n   \n    \n    vec2 pos = uv;\n  \n    vec3 col;\n    \n    if (uv.x>0.5)\n    {\n        m = m / zoom.y;\n\n        \n        vec2 p = vec2(-0.75, -0.5/aspect) + pos;\n        \n        float r2 = dot(p,p);\n        float k = (1.f)/(r2);\n        \n        pos = p;\n        \n        pos *= k / zoom.y;\n        pos -= m * zoom.y;\n        pos = rotate(pos,3.0 * mpol.x);\n        \n        col = picture(pos, k);\n\n    } else {\n        m = m / zoom.x;\n        pos = vec2( -0.25, -0.5/aspect) + pos - m;\n        pos *= zoom.x;\n        pos = rotate(pos,3.0 * mpol.x);\n        \n\n        //pos*=10.;\n        col = picture(pos, 1.0);\n    \n    }\n     \n\n    \n    \n\tvec2 csu = abs(vec2(-(fragCoord.x-iResolution.x/2.) - iResolution.x/4., fragCoord.y-iResolution.y/2.));\n    float hud = (1.-step(1., csu.x)) * (step(12.,csu.y) - step(16.,csu.y)) + (1.-step(1., csu.y)) * (step(12.,csu.x) - step(16.,csu.x)); \n    col = mix(col, vec3(1.,1.,1.), hud);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int Key_A = 65;\nconst int Key_Z = 90;\n\n\nconst int Key_S = 83; \nconst int Key_X = 88; \n\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\nconst int Key_Space = 32;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn texture( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( int(fragCoord.y) == 0 )\n    {\n       \n            vec4 pos = texture( iChannel0, vec2(.5,.5)/iResolution.xy, -100.0 );\n            vec4 zoom = texture( iChannel0, vec2(1.5,.5)/iResolution.xy, -100.0 );\n      \t\t\n        \tbool press = (iMouse.z > .0);\n       \n            if ( press )\n            {\n                //vec2 mv = \n                pos.xy = (iMouse.xy - abs(iMouse.zw)) * -0.01 * zoom.x;\n                pos.x *= -0.25;\n               // pos.xy = clamp(pos.xy,vec2(-4.),vec2(4.));\n            }\n           \t\n            float zoom_speed = 2.0;\n            \n            if (texelFetch( iChannel1, ivec2(Key_A,0), 0 ).x>0.5)\n            {\n                if(iMouse.x < iResolution.x/2.)\n                    zoom.x += zoom.x * iTimeDelta * zoom_speed;\n                else\n                    zoom.y += zoom.y * iTimeDelta * zoom_speed;\n            }\n            if (texelFetch( iChannel1, ivec2(Key_Z,0), 0 ).x>0.5)\n            {\n                if(iMouse.x < iResolution.x/2.)\n                    zoom.x -= zoom.x * iTimeDelta * zoom_speed;\n                else\n                    zoom.y -= zoom.y * iTimeDelta * zoom_speed;\n            }\n           \n            zoom = clamp(zoom,0.2,1000.0);\n        \t       \t\n        \tpos.xy *= 0.95;\n        \tpos.zw -= pos.xy*iTimeDelta * 0.1;\n        \tvec2 v = pos.zw;\n        \tpos.w = clamp(pos.w,-8.0,8.0);\n            \n               \n        \tif (iFrame<5) \n            {\n                pos.zw = vec2(0.,-3.0);//0.15 * vec2(1. + 2.*sin(iTime),0.7+cos(iTime));\n                zoom = vec4(14.);\n            }\n            if ( int(fragCoord.x) == 0 )\n            {\n            \tfragColor = pos;\n            }\n            else\n            {\n            \tfragColor = zoom;\n            }\n            \n\n    } \n}","name":"Buffer A","description":"","type":"buffer"}]}