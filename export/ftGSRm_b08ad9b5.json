{"ver":"0.1","info":{"id":"ftGSRm","date":"1640322633","viewed":265,"name":"Ray Marching Study (Sphere)","username":"pdcxs","description":"Simple raymarching case, just for studying.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","basic","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfSphere(in vec3 p) {\n    return length(p - vec3(0., 0., 2.)) - 1.5;\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        float d = sdfSphere(p);\n        if(d < PRECISION)\n            break;\n        t += d;\n    }\n    return t;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * sdfSphere(p + k.xyy * h) +\n        k.yyx * sdfSphere(p + k.yyx * h) +\n        k.yxy * sdfSphere(p + k.yxy * h) +\n        k.xxx * sdfSphere(p + k.xxx * h));\n}\n\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.);\n    vec3 ro = vec3(0., 0., -1.5);\n    vec3 rd = normalize(vec3(uv, 0.) - ro);\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(2. * cos(iTime - 2.0), 1., 2. * sin(iTime - 2.0) + 2.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n        color = amb * vec3(0.23) + dif * vec3(1.);\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}