{"ver":"0.1","info":{"id":"slXyDM","date":"1648110028","viewed":46,"name":"kirby_de_pacotille","username":"the_tanina","description":"kirby in raymarching, xoxo\n\nstroboscope party","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","kirby"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//ro = rayon d'origine, rd = direction\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 opRep(vec3 p, vec3 c)\n{\n    return mod(p+.5*c, c)-0.5*c;\n}\n\n//op basiks\nfloat union1(float f1, float f2)\n{\n    return min(f1, f2);\n}\n\nvec2 union2(vec2 f1, vec2 f2)\n{\n    return (f1.x < f2.x) ? f1 : f2;\n}\n\nfloat sub(float f1, float f2)\n{\n    return max(-f1, f2);\n}\n\nvec3 rotateY(vec3 st, float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat3(c, 0., -s, 0., 1., 0., s, 0., c)*st;\n}\n\n//formes basiks\nfloat sphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\n//raymarching render\nvec2 map(vec3 pos)\n{\n    vec2 body = vec2(sphere(pos+vec3(0., 0., 0.), 1.), 0.);\n\n    vec2 feet1 = vec2(sphere(pos+vec3(.7, 1.1, 0.), .6), 1.);\n    vec2 feet2 = vec2(sphere(pos+vec3(-.7, 1.1, 0.), .6), 1.);\n\n    vec2 arm1 = vec2(sphere(pos+vec3(.8, -.5, 0.), .4), 2.);\n    vec2 arm2 = vec2(sphere(pos+vec3(-.8, -.5, 0.), .4), 2.);\n    \n    vec2 vol = union2(body, feet1);\n    vol = union2(vol, feet2);\n    vol = union2(vol, arm1);\n    vol = union2(vol, arm2);\n\n    return vol;\n}\n\nvec3 getNormal (vec3 pos)\n{\n    float v = map(pos).x;\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(pos+e.xyy).x,\n        map(pos+e.yxy).x,\n        map(pos+e.yyx).x\n        ) - v);\n}\n\nvec2 castRay(vec3 ro, vec3 rd)\n{\n    float contact = 0.;\n\n    for(int i=0; i<64; i++)\n    {\n        vec2 res = map(ro + rd * contact);\n        if(res.x < (0.0001*contact))\n        {\n            return vec2(contact, res.y);\n        }\n        contact += res.x;\n    }\n    return vec2(-1., 0.);\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    vec2 contact = castRay(ro, rd);\n    vec3 col = vec3(0.);\n    \n    if(contact.x == -1.)\n    {\n        col = vec3(0.);\n    } else {\n        vec3 normal = getNormal(ro + rd*contact.x);\n        float lum = max(dot(normal, -normalize(vec3(cos(iTime*10.), -1., sin(iTime*10.)))), 0.);\n        if(contact.y == 0.)\n        {\n            col = hsv2rgb(vec3(1., .3, 1.));\n            col = mix(col, vec3(1.), step(1.-.05, dot(normal, normalize(vec3(.5, 1., 1.5)))));\n            col = mix(col, vec3(1.), step(1.-.05, dot(normal, normalize(vec3(-.5, 1., 1.5)))));\n            \n            col = mix(col, vec3(0.), step(1.-.02, dot(normal, normalize(vec3(.5, 1., 1.5)))));\n            col = mix(col, vec3(0.), step(1.-.02, dot(normal, normalize(vec3(-.5, 1., 1.5)))));\n        } else if(contact.y == 1.) {\n            col = hsv2rgb(vec3(1., 1., 1.));\n        } else {\n            col = hsv2rgb(vec3(1., .3, 1.));\n        }\n        col *= lum;\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = 2. * fragCoord/iResolution.xy - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    //camera\n    vec3 camPos = rotateY(vec3(0., 2., 5.), iTime);\n    vec3 camTar = vec3(0.);\n    \n    vec3 forward = normalize(camTar - camPos);\n    vec3 right = normalize(cross(vec3(0., -1., 0.), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + 2. * forward);\n\n    //affichage\n    vec3 col = render(camPos, viewDir);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}