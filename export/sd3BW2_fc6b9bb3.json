{"ver":"0.1","info":{"id":"sd3BW2","date":"1657199947","viewed":135,"name":"rhombus and ladder","username":"jorge2017a2","description":"rhombus and ladder","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rhombusandladder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------image\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\nfloat Intersect(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Union(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Difference(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nfloat opRep1D( float p, float c )\n    { float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdStairs( in vec2 p, in vec2 wh, in float n )\n{  vec2 ba = wh*n;// base\n    float d = min(dot2(p-vec2(clamp(p.x,0.0,ba.x),0.0)), dot2(p-vec2(ba.x,clamp(p.y,0.0,ba.y))) );\n    float s = sign(max(-p.y,p.x-ba.x) );\n    // steps repetition\n#if 1\n    float dia = length(wh);\n    p = mat2(wh.x,-wh.y, wh.y,wh.x)*p/dia;\n    float lid = clamp(round(p.x/dia),0.0,n-1.0);\n    p.x = p.x - lid*dia;\n    p = mat2(wh.x, wh.y,-wh.y,wh.x)*p/dia;\n#else\n    float dia2 = dot(wh,wh);\n    p = mat2(wh.x,-wh.y,wh.y,wh.x)*p;\n    float lid = clamp(round(p.x/dia2),0.0,n-1.0);\n    p.x = p.x - lid*dia2;\n    p = mat2(wh.x,wh.y,-wh.y,wh.x)*p/dia2;\n#endif    \n    // single step\n    float hh = wh.y/2.0;\n    p.y -= hh;\n    if( p.y>hh*sign(p.x) ) s=1.0;\n    p = (lid<0.5 || p.x>0.0) ? p : -p;\n    d = min( d, dot2(p-vec2(0.0,clamp(p.y,-hh,hh))) );\n    d = min( d, dot2(p-vec2(clamp(p.x,0.0,wh.x),hh)) );\n    return sqrt(d)*s;\n}\n\nfloat opScaleEscalera( in vec3 p )\n{ float s=0.125; return sdStairs(p.xy/s, vec2(10.0,10.0), 10.0 )*s;}\n\nvec2 escalerav2(vec3 p )\n{   vec2 res= vec2(9999.0, -1.0); \n    float d1a= opScaleEscalera(p);\n    float d2a= opScaleEscalera(p-vec3(0.5,-0.5,0.0));\n    float d1b= sdBox(p, vec3(10.0,10.0,2.0) );\n    float d2b= sdBox(p, vec3(10.5,10.0,3.0) );  \n    d1a= Intersect(d1a, d1b);    \n    d1b= Intersect(d2a, d2b);\n    d1a= Difference(d1a, d1b);\n    res =opU2(res, vec2(d1a,101.0));\n    return res;\n}\n\n//Rhombus - exact   (https://www.shadertoy.com/view/XdXcRB)\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{   p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nvec2 caraCaja(vec3 p)\n{   vec2 res= vec2(9999.0, -1.0);        \n    vec3 p0=p;\n    p.y=p.y-8.0;\n    vec2 e1= escalerav2(p-vec3(4.0,0.0,0.0));\n    vec2 e2= escalerav2(vec3(-p.x,p.y,p.z)-vec3(4.0,0.0,0.0));\n    p.y+=0.25;\n    float de3= sdBox(p, vec3(4.5,0.25,2.0) ); //escalon inferior\n    res =opU2(res, e1);\n    res =opU2(res, e2);\n    res =opU2(res, vec2(de3,101.));\n    \n    p=p0;\n    p.y-=20.0;\n    float  d1a= sdRhombus(p.xy,vec2(6.0,9.0) );\n    float  d1b= sdRhombus(p.xy,vec2(5.0,8.0) );\n    p.z-=1.0;\n    float d2a= sdBox(p, vec3(10.0,10.0,2.0) );\n    float d2b= sdBox(p, vec3(10.0,10.0,2.5) );\n    d1a= Intersect(d1a, d2a);\n    d1b= Intersect(d1b, d2b);\n    float dif1= Difference(d1a, d1b);\n    res =opU2(res, vec2(dif1,101.0));\n    \n    p=p0;\n    p.y-=20.0;p.z-=8.5;\n    float d4a= sdBox(p, vec3(20.0,20.0,5.0) );\n    float d4b= sdRhombus(p.xy,vec2(6.0,9.0) );\n    d4a= Difference(d4a, d4b);\n    res =opU2(res, vec2(d4a,100.0));\n    return res;    \n}\n\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);\n     p.y=p.y+10.0;\n    p.xyz=vec3(p.x,p.y,-p.z);\n    vec3 p0=p;\n    vec2 cc2a= caraCaja(p.zyx-vec3(-8.0,0.0,18.0));p=p0;\n    vec2 cc2b= caraCaja(vec3(p.z,p.y, -p.x)-vec3( -8.0,0.0,18.0));\n    vec2 cc1b= caraCaja(vec3( p.x, p.y, -p.z-20.0));\n    res =opU2(res, cc2a);\n    res =opU2(res, cc2b);\n    res =opU2(res, cc1b);\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS/2; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < EPSILON || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 5; i++) {    \n      float hr = EPSILON + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, L);// shadows\n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;   \n    return colOut;\n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tvec3 col;\n    if (i==100 ) { col=tex3D(iChannel0, p/32., nor); return col*2.0; }\n\tif (i==101 ) { return tex3D(iChannel0, p/32., nor)*vec3(0.7,0.5,1.0)*3.5; }\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n     if (id_color>=100 ){ return  getColorTextura( p, nor,id_color); }\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t;\n    t=mod(iTime*5.0,360.0);\n \tlight_pos1= vec3(0.0, 120.0, 0.0);light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(0.0, 20.0, 0.0 );light_color2 =vec3( 1.0,1.0,1.0 ); \n   vec3 ro=vec3(0.0,10.0,-10.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   float ang=mod(t, 100.0)+310.0;\n   rd.xz=rotatev2(rd.xz, radians(ang));\n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-------common\n#define PI 3.14159265\n\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n","name":"Common","description":"","type":"common"}]}