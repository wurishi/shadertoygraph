{"ver":"0.1","info":{"id":"fttXWj","date":"1639795871","viewed":277,"name":"A Piece of String","username":"oneshade","description":".","likes":36,"published":3,"flags":32,"usePreview":0,"tags":["string","path","following"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n#define drawSDF(dist, color) fragColor.rgb = mix(fragColor.rgb, color, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    fragColor = vec4(1.0);\n\n    vec2 total = vec2(0.0);\n    vec2[JOINTS] joints;\n    for (int n=0; n < JOINTS; n++) {\n        vec2 joint = load(ivec2(n, 0)).xy;\n        joints[n] = joint;\n        total += joint;\n    }\n\n    uv += total / float(JOINTS);\n    vec2 prev = joints[0];\n    //drawSDF(length(uv - prev) - 0.01, vec3(0.0));\n    for (int n=1; n < JOINTS; n++) {\n        vec2 cur = joints[n];\n        //drawSDF(length(uv - joints[n]) - 0.01, vec3(0.0));\n        drawSDF(sdLine(uv, prev, cur) - 0.001, vec3(0.0));\n        prev = cur;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 state, in vec2 addr) {\n    state = vec4(0.0);\n    ivec2 iAddr = ivec2(addr);\n    if (iFrame == 0) {\n        if (iAddr.x < JOINTS && iAddr.y == 0) {\n            state.x = -addr.x / 50.0;\n            if (iAddr.x == 0) state.z = 0.01;\n        }\n    }\n\n    if (iFrame > 0) {\n        if (iAddr.x < JOINTS && iAddr.y == 0) {\n            state = load(iAddr);\n            if (iAddr.x == 0) {\n                state.xy += state.zw;\n                float rot = 0.5 * fbm(iTime, 1.0, 10) - 0.25;\n                float co = cos(rot), si = sin(rot);\n                state.zw *= mat2(co, -si, si, co);\n            }\n\n            else {\n                vec4 next = load(ivec2(iAddr.x - 1, 0));\n                state.xy = next.xy - normalize(next.xy - state.xy) * SPACING;\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define load(frag) texelFetch(iChannel0, frag, 0)\n\n#define JOINTS 50\n#define SPACING 0.025\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nfloat snoise(in float x) {\n    return mix(Hash11(floor(x)), Hash11(ceil(x)), smoothstep(0.0, 1.0, fract(x)));\n}\n\nfloat fbm(in float x, in float scale, in int octaves) {\n    x *= scale;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (int o=0; o < octaves; o++) {\n        value += snoise(x) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        x *= 2.0;\n    }\n\n    return value / tscale;\n}","name":"Common","description":"","type":"common"}]}