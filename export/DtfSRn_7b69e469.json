{"ver":"0.1","info":{"id":"DtfSRn","date":"1674154889","viewed":64,"name":"Iterative Mandelbrot - balt","username":"balt","description":"Made this in like 2 hours.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 lerp(vec3 a, vec3 b, float t) {\n    return (1.0 - t) * a + t * b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3[] palette = vec3[](\n        vec3(0.259, 0.118, 0.059),\n        vec3(0.098, 0.027, 0.102),\n        vec3(0.035, 0.004, 0.184),\n        vec3(0.016, 0.016, 0.286),\n        vec3(0.000, 0.027, 0.392),\n        vec3(0.047, 0.173, 0.541),\n        vec3(0.094, 0.322, 0.694),\n        vec3(0.224, 0.490, 0.820),\n        vec3(0.525, 0.710, 0.898),\n        vec3(0.827, 0.925, 0.973),\n        vec3(0.945, 0.914, 0.749),\n        vec3(0.973, 0.788, 0.373),\n        vec3(1.000, 0.667, 0.000),\n        vec3(0.800, 0.502, 0.000),\n        vec3(0.600, 0.341, 0.000),\n        vec3(0.416, 0.204, 0.012)\n    );\n    vec4 attrbs = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec3 color1 = palette[int(mod(trunc(attrbs.p), float(palette.length())))];\n    vec3 color2 = palette[int(mod(trunc(attrbs.p) + 1.0, float(palette.length())))];\n    vec3 outsideColor = lerp(color1, color2, fract(attrbs.p)) * attrbs.a;\n    fragColor = vec4(outsideColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float logTwo = 0.693147181;\nconst float ZOOM = 3.0;\nconst vec2 OFFSET = vec2(-0.75, 0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame != 0) {\n        vec4 oldColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        vec2 C = ((fragCoord / iResolution.xy) * ZOOM) - (ZOOM / 2.0) + OFFSET;\n        vec2 Z = oldColor.rg;\n        float ITERS = oldColor.b;\n        float HAS_SMOOTHED = oldColor.a;\n        if (Z.x * Z.x + Z.y * Z.y < 16.0) {\n            Z = vec2(Z.x * Z.x - Z.y * Z.y + C.x, 2.0 * Z.x * Z.y + C.y);\n            ITERS++;\n        } else if (HAS_SMOOTHED == 0.0) {\n            float logZn = log(Z.x * Z.x + Z.y * Z.y) / 2.0;\n            float nu = log(logZn / logTwo) / logTwo;\n            ITERS = ITERS + 2.0 - nu;\n            HAS_SMOOTHED = 1.0;\n        }\n        fragColor = vec4(Z, ITERS, HAS_SMOOTHED);\n    } else {\n        fragColor = vec4(0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}