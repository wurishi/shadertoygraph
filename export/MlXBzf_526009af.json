{"ver":"0.1","info":{"id":"MlXBzf","date":"1512668688","viewed":483,"name":"Yin vs Yang","username":"aiekick","description":"Yin vs Yang","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["vs","yang","yin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// link : https://www.shadertoy.com/view/MlXBzf\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y * 0.75;\n\t\n\tfloat r = 0.5;\n\t\n\tfloat d = dot(p,p) - r * r;\n\t\n\tr *= 0.99;\n\t\n\tfloat ratio = sin(iTime) * 0.5 + 0.5; //uSlider\n\t\n    // offset / radius\n\tfloat slid = ratio * r;\n\tfloat islid = (1. - ratio) * r;\n\t\n    // for using dot instead of length\n    float slid2 = slid * slid;\n    float islid2 = islid * islid;\n    \n    float x = p.x;  \n\t//float y = p.y + slid - islid; // limit y\n\n    // black\n    vec2 p0 = p + vec2(0, slid);\n\tfloat d0 = dot(p0,p0) - islid2;\n\tfloat c0 = step(d0, 0.);\n\t\n    // white\n    vec2 p1 = p - vec2(0, islid);\n\tfloat d1 = dot(p1,p1) - slid2;\n\tfloat c1 = step(d1, 0.);\n\t\n    // black button\n    float d2 = d0 + islid2 * 0.9;\n    float c2 = step(d2, 0.);\n\t\n    // white button\n    float d3 = d1 + slid2 * 0.9;\n    float c3 = step(d3, 0.);\n\n    // x inv without buttons\n    d *= sign(x - c2 + c3);\n    float c = smoothstep(0.,.01,d);\n    \n    // compos\n    fragColor = vec4(c + c1 - c0 + c2 - c3);\n}","name":"Image","description":"","type":"image"}]}