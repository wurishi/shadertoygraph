{"ver":"0.1","info":{"id":"7llfDX","date":"1651603285","viewed":105,"name":"Digit Numbers","username":"Nosliac","description":"procedurally drawing digit numbers","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","numbers","digits"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float val)\n{\n    return clamp(val, 0.0, 1.0);\n}\n\nfloat RndRec(vec2 UV, vec2 pos, vec2 size, float radius)\n{\n    radius = max(min(min(abs(radius*2.0), abs(size.x)), abs(size.y)), 0.0);\n    vec2 recCoords = max(abs(UV-pos)-size+radius,0.0);\n    return 1.0-length(recCoords)/radius;\n}\n\nfloat Line(vec2 UV, vec2 pos1, vec2 pos2, float size)\n{\n    //Clamp(dot(uv-p1,p2-p1)/dot(p2-p1,p2-p1),0.,1.);\n    float l = clamp(dot(UV-pos1, pos2-pos1)/dot(pos2-pos1,pos2-pos1),0.0,1.0);\n    return 1.0-length(mix(UV-pos1, UV-pos2, l))/size;\n    \n}\n\nfloat Grad(vec2 UV, vec2 pos, vec2 dir)\n{\n    //Clamp(dot(uv-p1,p2-p1)/dot(p2-p1,p2-p1),0.,1.);\n    dir = normalize(dir);\n    float l = saturate(dot(UV-pos, dir));\n    return l;\n    \n}\n\nfloat Point(vec2 UV, vec2 pos, float size)\n{\n    return 1.0-length(UV-pos)/size;\n}\n\nfloat Digit(vec2 UV, vec2 pos, int number)\n{\n    bool ul;\n    bool dl;\n    bool ur;\n    bool dr;\n    bool t;\n    bool b;\n    bool m;\n\n    if(number == 0)\n    {\n        ul = true;\n        dl = true;\n        ur = true;\n        dr = true;\n        t = true;\n        b = true;\n        m = false;\n    }\n    else if(number == 1)\n    {\n        ul = false;\n        dl = false;\n        ur = true;\n        dr = true;\n        t = false;\n        b = false;\n        m = false;\n    }\n    else if(number == 2)\n    {\n        ul = false;\n        dl = true;\n        ur = true;\n        dr = false;\n        t = true;\n        b = true;\n        m = true;\n    }\n    else if(number == 3)\n    {\n        ul = false;\n        dl = false;\n        ur = true;\n        dr = true;\n        t = true;\n        b = true;\n        m = true;\n    }\n    else if(number == 4)\n    {\n        ul = true;\n        dl = false;\n        ur = true;\n        dr = true;\n        t = false;\n        b = false;\n        m = true;\n    }\n    else if(number == 5)\n    {\n        ul = true;\n        dl = false;\n        ur = false;\n        dr = true;\n        t = true;\n        b = true;\n        m = true;\n    }\n    else if(number == 6)\n    {\n        ul = true;\n        dl = true;\n        ur = false;\n        dr = true;\n        t = true;\n        b = true;\n        m = true;\n    }\n    else if(number == 7)\n    {\n        ul = false;\n        dl = false;\n        ur = true;\n        dr = true;\n        t = true;\n        b = false;\n        m = false;\n    }\n    else if(number == 9)\n    {\n        ul = true;\n        dl = false;\n        ur = true;\n        dr = true;\n        t = true;\n        b = true;\n        m = true;\n    }\n    else\n    {\n        ul = true;\n        dl = true;\n        ur = true;\n        dr = true;\n        t = true;\n        b = true;\n        m = true;\n    }\n\n    float ulGrd = Grad(UV, pos+vec2(-50,80), vec2(-1));\n    float dlGrd = Grad(UV, pos+vec2(-50,-80), vec2(-1,1));\n    float urGrd = Grad(UV, pos+vec2(50,80), vec2(1,-1));\n    float drGrd = Grad(UV, pos+vec2(50,-80), vec2(1));\n    float midGrd = Grad(UV, pos+vec2(0,0), vec2(0,1));\n\n    bool upLeft = ulGrd >0.0 && midGrd >0.0 && ul;\n    bool downLeft = dlGrd >0.0 && midGrd <1.0 && dl;\n    bool upRight = urGrd >0.0 && midGrd >0.0 && ur;\n    bool downRight = drGrd >0.0 && midGrd <1.0 && dr;\n    bool top = ulGrd <1.0 && urGrd <1.0 && t;\n    bool bottom = dlGrd <1.0 && drGrd <1.0 && b;\n    \n\n    float recOut = saturate(RndRec(UV, pos, vec2(50,80), 10.0)*4.0);\n    float recIn = saturate(RndRec(UV, pos, vec2(38,68), 5.0));\n    float ulCut = saturate(Line(UV, pos+vec2(-50,80), pos+vec2(-20,50),  2.25)*2.0);\n    float urCut = saturate(Line(UV, pos+vec2(50,80),  pos+vec2(20,50),   2.25)*2.0);\n    float dlCut = saturate(Line(UV, pos+vec2(-50,-80),pos+vec2(-20,-50), 2.25)*2.0);\n    float drCut = saturate(Line(UV, pos+vec2(50,-80), pos+vec2(20,-50),  2.25)*2.0);\n    float hCut = saturate(Line(UV, pos-vec2(60,0), pos+vec2(60,0), 13.0)*1.1);\n    float hCut2 = saturate(Line(UV, pos-vec2(38,0), pos+vec2(38,0), 11.0));\n    hCut2 -= saturate(1.0-recIn);\n    \n    float middleLine = m ? smoothstep(0.0,0.1,hCut2) : 0.0;\n    float frame = (recOut - recIn - hCut);\n    frame = smoothstep(0.0, 0.2, frame)*1.0-(ulCut+urCut+dlCut+drCut);\n    frame = upLeft || downLeft || upRight || downRight || top || bottom ? frame : 0.0;\n    return frame + middleLine;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n    \n    vec2 po1 = vec2(200, 100);\n    vec2 po2 = vec2(700, 350);\n\n    // Time varying pixel color\n    vec3 col = vec3(Digit(uv, vec2(200), int(fract(iTime*.1)*10.0)));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}