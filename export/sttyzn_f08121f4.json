{"ver":"0.1","info":{"id":"sttyzn","date":"1659152715","viewed":148,"name":"2D Raymarching example","username":"Decycle","description":"Drag mouse to move the ray.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarchinglearning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(v) smoothstep(1.5 / iResolution.y, 0., v)\n\nfloat circleSDF(vec2 p, vec2 c, float r)\n{\n    return distance(p, c) - r;\n}\n\nfloat drawCircle(vec2 p, vec2 c, float r, float thickness)\n{\n    return S(abs(distance(p, c) - r));\n}\n\nfloat fillCircle(vec2 p, vec2 c, float r)\n{\n    return S(distance(p, c) - r);\n}\n\n\nfloat drawLine(vec2 p, vec2 c, vec2 d, float thickness)\n{\n    d = normalize(d);\n    return S(abs(dot(p - c, vec2(-d.y, d.x))));\n}\n\n//https://gist.github.com/ForeverZer0/f4f3ce84fe8a58d3ab8d16feb73b3509\nvec3 hueShift(vec3 col, float hue) {\n    const vec3 k = vec3(0.57735, 0.57735, 0.57735);\n    float cosAngle = cos(hue);\n    return col * cosAngle + cross(k, col) * sin(hue) + k * dot(k, col) * (1.0 - cosAngle);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n    \n    vec2 ro = vec2(-0.3);\n    \n    vec2 rayEndPoint = (iMouse.xy - iResolution.xy / 2.) / iResolution.y;\n    \n    vec2 rd = normalize(rayEndPoint - ro);\n    \n    vec2 co = vec2(0, 0.3);\n    float cr = 0.1;\n    \n    float thickness = 0.005;\n    \n    vec2 rayPosition = ro;\n    \n        \n    vec3 color = vec3(0.);\n    vec3 white = vec3(1.);\n    vec3 cyan = vec3(96., 186., 224.) / 255.;\n    \n    color += drawCircle(p, co, cr, thickness) * white;\n    color += fillCircle(p, ro, 0.02) * white;\n    color += drawLine(p, ro, rd, thickness) * white;\n    \n    \n    //ray marching\n    int ITER = 100;\n    float MAX_DIST = 10.;\n    float MIN_DIST = 0.001;\n    \n    for(int i = 0; i < ITER; i++)\n    {\n        float sdf = circleSDF(rayPosition, co, cr);\n        if(sdf > MAX_DIST || sdf < MIN_DIST)\n        {\n            break;\n        }\n        \n        color += drawCircle(p, rayPosition, sdf, thickness) * hueShift(cyan, float(i) / 5.);\n        rayPosition += sdf * rd;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}