{"ver":"0.1","info":{"id":"msBSzc","date":"1670622115","viewed":177,"name":"Falling cubes","username":"Alpaga","description":"Drag mouse.\n\nUpdate: the cubes make pauses when falling (comment #define PAUSES to go back to the original version)","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","transparency","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Comment to remove pauses\n#define PAUSES\n\n// Hash function by Dave_Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nmat3 viewMatrix(vec3 forward, vec3 up) {\n    vec3 w = -normalize(forward);\n    vec3 u = cross(up, w);\n    vec3 v = cross(w, u);\n    return mat3(u,v,w);\n}\n\n// Position of the bottom cube at time t\n// (a=falling duration, b=pause duration, s=falling speed)\nfloat pos(float t, float a, float b, float s) {\n    float y = mod(t,a+b)-b;\n    return floor(s*(-a*t-max(b*y,-a*y))/(a+b));\n    //return floor(-s*(a*(t-y)/(a+b)+max(y,0.)*max(y,0.)/a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float t = iTime;\n    \n    vec3 p = vec3(0,0,10.*t);\n    float a = sin(.5*iTime);\n    float b = .5*sin(.8*iTime);\n    if(iMouse.z>0.) {\n        a = -3.14159*((2.*iMouse.x/iResolution.x)-1.);\n        b = (2.*iMouse.y/iResolution.y)-1.;\n    }\n    vec3 forward = vec3(sin(a)*cos(b),sin(b),cos(a)*cos(b));\n    \n    vec3 up = vec3(0,1,0);\n    \n    vec2 uv = .5*(2.*fragCoord - iResolution.xy)/iResolution.y;\n    mat3 m = viewMatrix(forward, up);\n    vec3 dir = m * normalize(vec3(uv,-1));\n    \n    \n    vec3 box = round(p);\n    \n    float dist;\n    \n    float accTransp = 1.;\n    vec3 col;\n    \n    // Grid traversal\n    for(int i=0; i<80; i++) {\n        vec3 t = (box + .5*sign(dir) - p)/dir;\n        float m = min(t.x,min(t.y,t.z));\n        \n        dist += m;\n        p += m*dir;\n        \n        float h = hash12(box.xz);\n        \n        \n        #ifdef PAUSES\n        const float a = .5, b =.5, s = 30.;\n        float tshift = (a+b)*10.*h;\n        float sshift = floor(s*a*100.*mod(h,.01));\n        // Position of bottom cube\n        float bot = pos(iTime+tshift,a,b,s);\n        // Position of top cube\n        float top = pos(iTime+a+tshift,a,b,s)+s*a;\n        float hh = mod(box.y + sshift - bot,s*a);\n        float density = h < .1 ? .7*pow(max(1.-hh/(top-bot+1.),0.),2.) : 0.;\n        #else\n        float speed = 1.+8.*hash12(box.xz+123.8);\n        float density = h<.1 ? pow(1.-mod(.1*(box.y+speed*iTime)+10.*h,1.),5.) : 0.;\n        #endif\n        \n        // m is the amount of ray traversing the cube\n        float cubeTransp = pow(1.-density, m);\n\n        vec3 color = .5+.5*cos(vec3(.1,2,3)+.8*cos(box.xzx));\n        vec3 back = mix(vec3(.02,0,0),vec3(0,0,.02),.5+.5*p.y/(50.+abs(p.y)));\n        col += accTransp*(1.-cubeTransp)*mix(back,color,exp(-.002*dist*dist));\n\n        accTransp *= cubeTransp;\n        if(accTransp < .001) break;\n        \n        vec3 dbox =\n            t.x < t.y ?\n                t.x < t.z ?\n                    vec3(1,0,0) :\n                    vec3(0,0,1) :\n                t.y < t.z ?\n                    vec3(0,1,0) :\n                    vec3(0,0,1);\n        \n        box += sign(dir)*dbox;\n    }\n    vec3 back = mix(vec3(.02,0,0),vec3(0,0,.02),.5+.5*p.y/(50.+abs(p.y)));\n    col += accTransp*back;\n\n    col = pow(col, vec3(1./2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}