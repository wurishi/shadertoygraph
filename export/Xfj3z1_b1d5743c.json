{"ver":"0.1","info":{"id":"Xfj3z1","date":"1703876319","viewed":124,"name":"Visual fractions (spiral & poly)","username":"ChunderFPV","description":"Numerator on the left, denominator on the right.  Mouse X changes the value, or toggle T key to animate.","likes":10,"published":1,"flags":16,"usePreview":0,"tags":["math","spiral","polygon","fraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I was updating an old shader of mine: https://www.shadertoy.com/view/csdGzr\n// and ended up just redoing the whole thing.  This version runs better even\n// with the added polygons.\n\n// denominator spiral (coords, value, root, rotation, point size, loop size)\nfloat ds(vec2 u, float t, float n, float a, float w, float l)\n{\n    float r = pow(length(u), 1./n), // root radius\n          i = 0., c = i, h, j;\n    for (; i++<l;) // cell overlap loop\n        h = max(0., round((r-i)/l))*l+i, // rounded radius\n        j = pow(h, n), // apply exponent\n        c = max(c, w/length(u-cos(6.2832*t*h-a-vec2(0, 1.5708))*j)*j);\n    return min(c, 1.)*min(1., 15./r);\n}\n\n// polygon (coords, arc, line size, loop size)\nfloat poly(vec2 u, float a, float w, float l)\n{\n    l /= 2. - 1.; // lim\n    float c = 0., i = c,\n          r = cos(a/2.), // inradius\n          s = sign(a),   // arc polarity\n          x = atan(u.y, u.x), // x to angular\n          y = length(u);      // y to radial\n    if (a == 0.) c = w/abs(1.-y); // draw circle at arc 0\n    else for (; i++<l;)\n        c = max(c, min(1./i, w/abs(r/cos((fract(x/a)-.5)*a)-y)) ),\n        x += 6.2832*s;\n    return min(1., c);\n}\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    float s = 2.4, // scale\n          t = .75, // visual denominator\n          n = -.5, // root radius\n          w = .02, // point size\n          l = 15., // detail loop\n          x, r, d, a;\n    \n    if (texelFetch(iChannel1, ivec2(84, 2), 0).x > 0.) // T key\n        t = -1./tan(iTime/60.*3.1416); // t from time\n    \n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-R/2.)/R.y*s,\n         u = (U-R/2.)/R.y*s;\n    \n    vec3 c = vec3(0, .3, .5); // color\n    \n    if (iMouse.z > 0.) t = tan(m.x*1.5708/2.); // click\n    a = atan(t)/1.5708*2.; // value to range +/-2\n    d = digit(iChannel0, u-vec2(a, -1.), t, .07*s, 7., 3.).x;\n    \n    // condensed number line grid\n    x = abs(tan(u.x*1.5708/2.));\n    x = max(x, 1./x);\n    if (u.y < -1.)\n        c *= 0.,\n        c += min(1., fwidth(x)/abs(x-round(x))) / max(1., abs(x));\n    c += .01/length(u-vec2(a, -1.)); // indicator\n    \n    // flip t & color\n    if (u.x < 0.)\n        t = 1./t,\n        c = c.brg;\n    \n    u.x -= sign(u.x); // split screen\n    r = length(u);\n    c *= sqrt(1.-min(r, 1./r))+.1;\n    c += .01/r; // center glow\n    c += ds(u.yx, t, n, 0., w, l); // point spiral\n    c -= poly(u.yx, (mod(t+.5, 1.)-.5)*6.2832, w, l) * .3; // polygon\n    c += d*.7; // digits\n    \n    C = vec4(c + c*c, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// font code from https://www.shadertoy.com/view/7tV3zK\nvec4 char(sampler2D ic, vec2 p, int c)\n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(ic, p/16. + fract( vec2(c, 15-c/16)/16.), dFdx, dFdy );\n}\nvec4 pInt(sampler2D ic, vec2 p, float n, float d)\n{\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(ic, p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = d; i>0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(ic, p - .5*vec2(i-1.,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// texture, screen coords, value, size, num left digits, num right digits\nvec3 digit(sampler2D ic, vec2 u, float v, float s, float l, float r)\n{\n    float numleft = min(log2(abs(v))/log2(10.), l-1.);\n    l = max(floor(numleft), 0.)+1.;\n    u /= s; // size\n    if (isinf(abs(v))) return vec3(char(ic, u*.7+vec2(.5, .3), 153).x); // infinity symbol\n    u += vec2((l+1.)/2., .28); // center on decimal\n    vec3 d = vec3(0);\n    d += pInt(ic, u, v, l).x; // left of decimal\n    u.x -= l/2.;\n    d += char(ic, u, 46).x; // decimal point\n    u.x -= .5;\n    d += pInt(ic, u, floor(abs(v)*pow(10., r)), r).x; // right of decimal\n    return d;\n}","name":"Common","description":"","type":"common"}]}