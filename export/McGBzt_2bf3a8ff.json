{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define MAX_SAMPLES 64  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )  \n{  \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);  \n    vec3 outputColor = vec3(0.0);  \n    \n    // 渲染历史采样记录  \n    for(int i = 0; i < MAX_SAMPLES; i++) {  \n        vec4 sampleData = texelFetch(iChannel0, ivec2(i, 0), 0);  \n        if(sampleData.w == 0.0) continue; // 跳过未初始化的数据  \n        \n        vec2 pos = sampleData.xy;  \n        float length = sampleData.z;  \n        \n        // 计算线段方向  \n        vec2 normal = normalize(pos);  \n        \n        // 计算线段端点  \n        vec2 start = pos + normal * (length * 0.5);  \n        vec2 end = pos - normal * (length * 0.5);  \n        \n        // 绘制线段  \n        vec2 pa = uv - start;  \n        vec2 ba = end - start;  \n        float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);  \n        vec2 f = pa - ba * h;  \n        float dist = sqrt(f.x * f.x + f.y * f.y);  \n        \n        float thickness = 0.005;  \n        float line = smoothstep(thickness, 0.0, dist);  \n        float alpha = 0.5; // 固定透明度，让所有历史记录同样明显  \n        vec3 lineColor = vec3(1.0, 0.5, 0.2) * alpha;  \n        outputColor += lineColor * line;  \n    }  \n    \n    // 渲染当前实时扫描的线段  \n    float bpm = 10.0;  \n    float rotationSpeed = bpm / 60.0;  \n    float radius = 0.5;  \n    float currentAngle = iTime * rotationSpeed * 6.28318;  \n    vec2 currentPos = vec2(cos(currentAngle), sin(currentAngle)) * radius;  \n    vec2 currentNormal = normalize(currentPos);  \n    \n    // 获取实时音频数据  \n    float currentAudio = texture(iChannel1, vec2(0.1, 0.0)).x;  \n    float currentLength = 0.1 * (1.0 + smoothstep(0.0, 1.0, currentAudio) * 8.0);  \n    \n    // 绘制当前扫描线段  \n    vec2 currentStart = currentPos + currentNormal * (currentLength * 0.5);  \n    vec2 currentEnd = currentPos - currentNormal * (currentLength * 0.5);  \n    \n    vec2 pa = uv - currentStart;  \n    vec2 ba = currentEnd - currentStart;  \n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);  \n    vec2 f = pa - ba * h;  \n    float dist = sqrt(f.x * f.x + f.y * f.y);  \n    \n    float thickness = 0.005;  \n    float currentLine = smoothstep(thickness, 0.0, dist);  \n    outputColor += vec3(1.0, 0.5, 0.2) * currentLine;  \n    \n    fragColor = vec4(outputColor, 1.0);  \n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define MAX_SAMPLES 32  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )  \n{  \n    ivec2 pixelCoord = ivec2(fragCoord);  \n    \n    // 设置采样间隔  \n    float sampleInterval = 0.05;  \n    float currentSampleTime = floor(iTime / sampleInterval) * sampleInterval;  \n    \n    // 计算当前应该写入的索引位置  \n    int currentIndex = int(mod(currentSampleTime / sampleInterval, float(MAX_SAMPLES)));  \n    \n    // 如果是当前需要写入的位置，存储新的采样数据  \n    if(pixelCoord.x == currentIndex && abs(iTime - currentSampleTime) < 0.016) {  \n        // 计算当前扫描线段的状态  \n        float bpm = 10.0;  \n        float rotationSpeed = bpm / 60.0;  \n        float radius = 0.5;  \n        float angle = iTime * rotationSpeed * 6.28318;  \n        \n        // 计算位置  \n        vec2 pos = vec2(cos(angle), sin(angle)) * radius;  \n        \n        // 获取音频数据确定长度  \n        float audioSignal = texture(iChannel1, vec2(0.1, 0.0)).x;  \n        float length = 0.1 * (1.0 + smoothstep(0.0, 1.0, audioSignal) * 12.0);  \n        \n        // 存储采样数据: xy = 位置, z = 长度, w = 时间戳  \n        fragColor = vec4(pos, length, currentSampleTime);  \n    }  \n    // 对于其他位置，保持原有数据  \n    else {  \n        fragColor = texelFetch(iChannel0, pixelCoord, 0);  \n    }  \n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"McGBzt","date":"1734344094","viewed":35,"name":"SoundRing","username":"Foeye","description":"sound sfx","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""}}