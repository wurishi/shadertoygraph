{"ver":"0.1","info":{"id":"3dc3zr","date":"1567602700","viewed":481,"name":"Texture warp","username":"Dombass","description":"modded version of iq's domain warp shader using a texture + function for random noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["texture","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Warping using a texture for the colour and a function for the noise\n// Based on shader by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// See https://iquilezles.org/articles/warp for details\n#define SPEED .9\n#define ZOOM 5.0\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = random(p);\n\tfloat b = random(p+vec2(1.0,.0));\n\tfloat c = random(p+vec2(.0,1.));\n\tfloat d = random(p+vec2(1.0,1.));\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}\n\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*(-1.0+2.0*noise( p )); p = mtx*p*2.02;\n    f += 0.2500*(-1.0+2.0*noise( p )); p = mtx*p*2.03;\n    f += 0.1250*(-1.0+2.0*noise( p )); p = mtx*p*2.01;\n    f += 0.0625*(-1.0+2.0*noise( p ));\n\n    return f/0.9375;\n}\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2( fbm4(p+vec2(1.0)), fbm4(p+vec2(6.2)) );\n}\n\nvec2 sample_at( vec2 q)\n{\n    float jacked_time = SPEED*iTime;\n    const vec2 scale = vec2(0.11,0.13);\n    q += 0.5*sin(scale*jacked_time + length( q )*0.5);\n    vec2 o = fbm4_2( q );\n    o += 0.01*sin(scale*jacked_time*length( o ));\n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 p = fragCoord / iResolution.xy;\n\tvec2 q = (-iResolution.xy + ZOOM*(fragCoord)) /iResolution.y;\n\t\n    vec4 col = texture(iChannel0,sample_at(q)); \n   \tcol = col*col;\n    \n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}