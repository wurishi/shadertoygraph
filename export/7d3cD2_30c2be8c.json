{"ver":"0.1","info":{"id":"7d3cD2","date":"1654068021","viewed":90,"name":"cg2 random-noise","username":"cgcostume","description":"didactic example for the introduction of pseudo randomness (not optimized, from live coding during lecture)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["random","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float; \n\nfloat rand(vec2 uv) {\n    return fract(sin(\n         dot(uv, vec2(12.9898, 78.2333))) * 43758.5453123);\n}\n\nconst float parts = 2.0;\nconst float scale = 16.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    // move the noise a little around \n\n    vec2 uv_scaled = (uv * vec2(aspect, 1.0));\n    uv_scaled -= 0.5;\n    uv_scaled *= 1.0 + sin(iTime * sqrt(2.0)) * 0.1;\n    uv_scaled += 0.5;\n    uv_scaled = uv_scaled * scale + scale / 16.0 * vec2(sin(iTime), cos(iTime));\n\n    vec3 noise;\n\n    if (uv.x < 1.0 / parts) { // grayscale noise \n        noise = vec3(rand(uv_scaled)); \n    } else { // colored noise\n        noise = vec3(\n            rand(uv_scaled + vec2(1.01, 1.02)),\n            rand(uv_scaled + vec2(0.98, 1.00)),\n            rand(uv_scaled + vec2(1.00, 0.98)));\n    }\n\n    fragColor = vec4(noise, 1.0);\n    \n\n    // add split lines for the different variants\n\n    float aa = dFdx(uv.x * parts * 2.0);\n    float ll = abs(mod(uv.x * parts * 2.0, 2.0) - 1.0);\n    ll = smoothstep(1.0 - aa, 1.0, ll);\n    \n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), ll);\n}\n","name":"Image","description":"","type":"image"}]}