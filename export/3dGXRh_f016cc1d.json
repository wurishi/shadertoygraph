{"ver":"0.1","info":{"id":"3dGXRh","date":"1573310064","viewed":219,"name":"Folding stars and flowers","username":"Roninkoi","description":"Just a simple shader with some lighting and depth effects. N changes the number of folds when NCONST == 1","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["folding","stars","rotation","flowers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.145926\n\n#define N 6\n\n#define NCONST 0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2. * uv - 1.;\n    uv.y *= iResolution.y/iResolution.x; // [-1, 1] -> circ\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    float a = iTime + 0.8;\n    \n    x = cos(a) * uv.x - sin(a) * uv.y; // rotation\n    y = sin(a) * uv.x + cos(a) * uv.y;\n   \n    float axy = atan(x, y); // folding\n    float rxy = sqrt(x * x  + y * y) + sin(a*0.23); // bulging\n        \n    float n = sin(0.05*a) * 3. + 4.;\n    \n    if (NCONST == 1) n = float(N);\n    \n    float f = PI / (n * 0.5);\n    \n    float q = floor(axy / f) * f + 3.;\n    \n    axy = mod(axy, f) - f * 0.5;\n    \n    x = rxy * cos(axy);\n    y = rxy * sin(axy);\n    \n    float z = x + (cos(a*2.) * 0.5 + 0.5);\n    \n    vec3 pos = vec3(uv.x, uv.y, z);\n    vec3 norm = normalize(vec3(-cos(a+q), -sin(a+q), -z));\n    \n    vec3 lightPos = vec3(10.*cos(0.1*a), 10.*sin(0.1*a), -1.);\n    vec3 lightDir = normalize(lightPos - pos);\n\n    vec3 col = vec3(1.);\n    \n    col *= 0.6 + 2.0*max(dot(norm, lightDir), 0.);\n    \n    col *= round(0.5 + 0.5*sin(20.*x)) * (sin(a)*0.5) + 1.0; // stripes\n    \n    q += 0.4;\n    vec3 cm = vec3(\n        sin(q), sin(q + PI / 3.0), sin(q + 2. * (PI / 3.0)) // colors\n    );\n    cm = normalize(cm);\n    cm = cm * 0.5 + vec3(0.5);\n    col *= cm;\n    col /= exp(z*z);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}