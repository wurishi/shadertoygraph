{"ver":"0.1","info":{"id":"XsXBzB","date":"1496653142","viewed":188,"name":"Juulia","username":"noby","description":"2nd 2d fractal ever, some tricks from iq","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SMOOTH\n#define COLORIZE\n#define AA\n\nvec3 julia(vec2 uv, vec2 anim)\n{\n    vec2 c = anim-mix(vec2(1.2,0.3), vec2(0.7451,0.1102), anim);\n    vec2 Z = vec2(uv);//*iMouse.y/iResolution.y);\n    \n    float B = 16.0;\n    \n    int i = 0;\n    const int iter = 84;\n    for(i; i < iter; i++)\n    {\n        Z = vec2(Z.x*Z.x - Z.y*Z.y, 2.0*Z.x*Z.y ) + c;\n        if(length(Z) > (B*B)) break;\n    }\n    \n    float si = float(i);\n#ifdef SMOOTH\n    // iq smoothness trick\n    si = si - log(log(length( 1.0+abs(Z) ))/log(B))/log(2.0);\n#endif\n   \n#ifdef COLORIZE\n    return 0.5+0.5*cos(3.33 + si*0.1 + normalize(vec3(0.03,0.15,0.3)) );\n#else\n    return vec3(si/float(iter));\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 anim = vec2(0.5+0.5*sin(iTime*0.43), 0.5+0.5*cos(iTime*0.57));\n    fragColor = vec4(vec3(julia(uv, anim)), 1.0);\n#ifdef AA\n    vec2 aa = 1.0/iResolution.xy;\n    fragColor += vec4(vec3(julia(uv + vec2(aa.x,0), anim)), 1.0);\n    fragColor += vec4(vec3(julia(uv+ vec2(0.0,aa.y), anim)), 1.0);\n    fragColor += vec4(vec3(julia(uv+ aa, anim)), 1.0);\n    fragColor /= 4.0;\n#endif\n    fragColor = smoothstep(-0.15, 1.15, fragColor);\n}","name":"Image","description":"","type":"image"}]}