{"ver":"0.1","info":{"id":"3tlyR4","date":"1591552979","viewed":65,"name":"ВТ","username":"ta_nya","description":"BT","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(float a, vec2 v) \n{\n\tfloat c_a = cos(a);\n\tfloat s_a = sin(a);\n\tfloat x1 = v.x * c_a + v.y * s_a;\n\tfloat y1 = v.x * -s_a + v.y * c_a;\n\tv.x = x1;\n\tv.y = y1;\n    return v;\n}\nvec2 scale(float s1, float s2, vec2 v) \n{\n\tv.x /= s1;\n\tv.y /= s2;\n    return v;\n}\n\nvec2 translate(vec2 dv, vec2 v) \n{\n\tv.x -= dv.x;\n\tv.y -= dv.y;\n    return v;\n}\n\nfloat axes(float x, float y)\n{\n    float axis_y;\n    float axis_x;\n    if(abs(x)< 0.1) axis_y=1.0;\n    if(abs(y)< 0.1) axis_x=1.0;\n    return   axis_y+axis_x;           \n}\n\nfloat grid(float x, float y)\n{\n    float g_y;\n    float g_x;\n    if(abs(mod(x,1.0)) < 0.15) g_x=1.0;\n    if(abs(mod(y,1.0)) < 0.15) g_y=1.0;\n    return (g_y+g_x)/3.0;\n}\n\nfloat quadrangle(float x,float y) {\n\treturn 1.0 - max(abs(x),abs(y));\n}\n\nfloat triangle(float x,float y) {\n\treturn min(0.0 - (x + y),min( 1.0 + x, 1.0 + y));\n}\n\nfloat letterG(float x, float y)\n{\n    //нога\n    vec2 g1 = vec2(x, y);\n\tg1 = translate(vec2(4, 8), g1);\n\tg1 = scale(1.0, 6.0, g1);\n\tfloat g1r = quadrangle(g1[0], g1[1]);\n\n    //шапка\n\tvec2 g2 = vec2(x, y);\n\tg2 = translate(vec2(6, 13), g2);\n\tg2 = rotate(3.14 / 2.0, g2);\n\tg2 = scale(1.0, 3.0, g2);\n\tfloat g2r = quadrangle(g2[0], g2[1]);\n\n\treturn max(g1r, g2r);\n}\n\nfloat letterT(float x, float y)\n{\n    //нога\n    vec2 t1 = vec2(x, y);\n\tt1 = translate(vec2(-8, 8), t1);\n\tt1 = scale(1.0, 6.0, t1);\n\tfloat t1r = quadrangle(t1[0], t1[1]);\n\n    //шапка\n\tvec2 t2 = vec2(x, y);\n\tt2 = translate(vec2(-8, 13), t2);\n\tt2 = rotate(3.14 / 2.0, t2);\n\tt2 = scale(1.0, 5.0, t2); \n\tfloat t2r = quadrangle(t2[0], t2[1]);\n\n\treturn max(t1r, t2r);\n}\n\nfloat letterB(float x, float y)\n{\n    //нога\n    vec2 b1 = vec2(x, y);\n\tb1 = translate(vec2(-12, -7.6), b1);\n\tb1 = scale(1.0, 5.2, b1);\n\tfloat b1r = quadrangle(b1[0], b1[1]);\n\n    //полукруг1\n\tvec2 middle = vec2(x, y);\n\tmiddle = translate(vec2(-9, -7.5), middle);\n\tmiddle = rotate(3.14 / 2.0, middle);\n\tmiddle = scale(0.8, 4.0, middle); \n\tfloat middler = quadrangle(middle[0], middle[1]);\n    \n    vec2 b2up = vec2(x, y);\n\tb2up = translate(vec2(-9, -2.8), b2up);\n\tb2up = rotate(3.14 / 2.0, b2up);\n\tb2up = scale(0.8, 4.0, b2up); \n\tfloat b2upr = quadrangle(b2up[0], b2up[1]);\n    \n    vec2 b2uptr = vec2(x, y);\n\tb2uptr = translate(vec2(-4.2, -2.8), b2uptr);\n\tb2uptr = scale(0.8, 0.8, b2uptr);\n\tfloat b2uptrr = triangle(b2uptr[0], b2uptr[1]);\n    \n    vec2 b2upm1tr = vec2(x, y);\n\tb2upm1tr = translate(vec2(-4.2, -6.8), b2upm1tr);\n\tb2upm1tr = rotate((3.0 * 3.14) / 2.0, b2upm1tr);\n\tb2upm1tr = scale(0.8, 0.8, b2upm1tr);\n\tfloat b2upm1trr = triangle(b2upm1tr[0], b2upm1tr[1]);\n    \n    vec2 b2midup = vec2(x, y);\n\tb2midup = translate(vec2(-4.2, -4.8), b2midup);\n\tb2midup = scale(0.8, 1.2, b2midup);\n\tfloat b2midupr = quadrangle(b2midup[0], b2midup[1]);\n    \n    //полукруг2\n    vec2 b2downtr = vec2(x, y);\n\tb2downtr = translate(vec2(-4.2, -8.2), b2downtr);\n\tb2downtr = scale(0.8, 0.8, b2downtr);\n\tfloat b2downtrr = triangle(b2downtr[0], b2downtr[1]);\n    \n    vec2 b2middown = vec2(x, y);\n\tb2middown = translate(vec2(-4.2, -10.2), b2middown);\n\tb2middown = scale(0.8, 1.2, b2middown);\n\tfloat b2middownr = quadrangle(b2middown[0], b2middown[1]);\n    \n    vec2 b2mid2down = vec2(x, y);\n\tb2mid2down = translate(vec2(-4.2, -12.2), b2mid2down);\n\tb2mid2down = rotate((3.0 * 3.14) / 2.0, b2mid2down);\n\tb2mid2down = scale(0.8, 0.8, b2mid2down);\n\tfloat b2mid2downr = triangle(b2mid2down[0], b2mid2down[1]);\n    \n    vec2 b2down = vec2(x, y);\n\tb2down = translate(vec2(-9, -12.2), b2down);\n\tb2down = rotate(3.14 / 2.0, b2down);\n\tb2down = scale(0.8, 4.0, b2down); \n\tfloat b2downr = quadrangle(b2down[0], b2down[1]);\n\n\treturn max(b1r, max(middler, max(b2upr, max(b2uptrr, max(b2upm1trr, \n           max(b2midupr, max(b2downtrr, max(b2middownr, max(b2mid2downr, b2downr)))))))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float wmax=max(iResolution.x,iResolution.y);\n    float aspect =iResolution.y/iResolution.x;\n    vec2  vnorm = vec2(wmax,wmax);   \n    vec2 uv = fragCoord/vnorm ; //iResolution.xy;\n    float x=uv.x;\n    float y=uv.y;\n    \n    x*=60.0;\n    y*=60.0;\n    x-=30.0;\n    y-=30.0*aspect;\n    \n    \n    float grid =  max(axes(x,y),grid(x,y))/2.0;\n     \n    //float f=f3(x,y); // min(f1(x,y),f2(x/2.0,y));//1.0- (x*x+y*y);\n    \n    float f=letterG(x, y);\n    f=max(f, letterT(x, y));\n    f=max(f, letterB(x, y));\n    f = 0.05/f; \n\n    // Time varying pixel color\n    \n    vec3 col = vec3(0.0, grid, 0.0);\n        \n    if(f >= 0.0)col.x =  f;//+cos(iTime);// + 0.5*cos(iTime*iTime/1000.0+uv.xyx+vec3(10,2,4));\n    else col.z = -f;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}