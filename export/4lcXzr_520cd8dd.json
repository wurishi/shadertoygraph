{"ver":"0.1","info":{"id":"4lcXzr","date":"1477626025","viewed":312,"name":"midpoint displacement terrain","username":"twitchingace","description":"An attempt at implementing the 2d midpoint displacement algorithm. Edited to add smooth scrolling and nicer looking colourization.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","terrain","displacement","heightmap","learning","midpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float terrain[33]; // Five iterations of midpoint disp\nconst int numberOfElements = 32;\n#define PI 3.14159\n\nfloat cosineInterpolate(in float y1,in float y2, in float mu)\n{\n   float mu2;\n   mu2 = (1.-cos(mu*PI))/2.;\n   return(y1*(1.-mu2)+y2*mu2);\n}\n\n// Sets up the heightmap by performing the midpoint displacement algorithm\nvoid setupHeightmap(){\n    // Initialize values\n    for (int i = 0; i <= numberOfElements; i++){\n        terrain[i] = 0.;\n    }\n    float perturbation = 4.;\n    terrain[0] = (-0.5 + texture(iChannel0, vec2(0,0)).x) * 1.2;\n    terrain[numberOfElements] = terrain[0];\n    \n    // This is a really awkward way to do it, but the algorithm is explained here:\n    // http://www.somethinghitme.com/2013/11/11/simple-2d-terrain-with-midpoint-displacement/\n    int stepSize;\n    for (int i = 1; i <= 5; i++){\n        stepSize = int((float(numberOfElements)) / pow(2., float(i)));\n        perturbation /= 2.;\n        \n        for (int j = 1; j < numberOfElements; j++){\n            if (mod(float(j), float(stepSize)) != 0. || terrain[j] != 0.){\n                continue;\n            }\n            terrain[j] = mix(terrain[j - int((float(numberOfElements)) / pow(2., float(i)))],\n                             terrain[j + int((float(numberOfElements)) / pow(2., float(i)))],\n                             0.5);\n            terrain[j] += (-0.5 +\n                           texture(iChannel0,\n                                     vec2(float(stepSize)/float(numberOfElements),0)).x)\n               \t\t\t* perturbation;\n        }\n    \t\n    }\n}\n\n// Maps our uv x position to our heightmap by interpolating\n// between the two nearest heightmap values\nfloat getHeight(in float xPos){\n    for (int i = 0; i <= numberOfElements; i++){\n        if (i != int(xPos)){\n            continue;\n        }\n        if (i == 15){\n            return cosineInterpolate(terrain[i], terrain[0], xPos - floor(xPos));\n        }\n\t\t//return terrain[i];\n        //return mix(terrain[i], terrain[i + 1], xPos - floor(xPos));\n        return cosineInterpolate(terrain[i], terrain[i + 1], xPos - floor(xPos));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    setupHeightmap();\n    // Check if it's part of the terrain\n    float scrollSpeed = 1.5;\n    float checkX = uv.x * float(numberOfElements) / 4. + iTime * scrollSpeed;\n    checkX = fract(checkX / 16.) * 16.;\n    float tHeight = getHeight(checkX);\n    if (uv.y <= tHeight){\n\t\tfragColor = vec4((tHeight - uv.y) / tHeight * .7,\n                         .99 - (tHeight - uv.y)* .8 / tHeight,\n                         (tHeight - uv.y) / tHeight * .01,\n                         1.);\n        //fragColor = texture(iChannel1, uv);\n    }\n    // or just the sky\n    else{\n        fragColor = vec4(.53, .80, .92, 1.);\n    }\n}","name":"Image","description":"","type":"image"}]}