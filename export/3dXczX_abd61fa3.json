{"ver":"0.1","info":{"id":"3dXczX","date":"1585814842","viewed":133,"name":"TP4 Graphique S4","username":"LucieFournier","description":"TP4","likes":0,"published":1,"flags":0,"usePreview":1,"tags":["tp4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Lucie Fournier\n// p1811511\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.1; // Marching epsilon\nconst int Steps = 400;      // Number of steps\n\n// Lipschitz constant\nconst float K=3.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n    \n// Terrain -----------------------------------------------------------------------------------------------\n\n// Smooth compactly supported polynomial ; Définit là où on va travailler !\n// x : Real\n// r : Radius\nfloat Smooth( in float x, in float r)\n{\n    x/=r;\n    x=clamp(x,0.0,1.0);\n    float y=(1.0-x*x);\n    return y*y*y;\n}\n\n// Smooth entre deux rayons\n// x : distance\n// r1 : rayon 1\n// r2 : rayon 2\nfloat Smooth(float x, float r1, float r2) {\n \tif(x < r1) return 1.0;\n    x = (x-r1)/(r2-r1);\n    return Smooth(x, 1.0);\n}\n    \n// Flatten\n// p : Point, z will be used for height of flat part\n// c : Center \n// r : Radius\nfloat Flatten( in vec2 p, in float h, in vec3 c, in float r)\n{\n    float d = length(p-c.xy);\t\t// Zone = disque\n    float u = Smooth(d,r);\n    return mix(h,c.z,u);\n}\n\n// Applatit\n// p : point\n// h : hauteur du terrain\n// c : centre de l'applanissement (et sa hauteur)\n// r1 : rayon de l'applanissement\n// r2 : rayon total\nfloat Applatit(vec2 p, float h, vec3 c, float r1, float r2) {\n \tfloat d = length(p-c.xy);\n    float u = 1.0;\n    if(d < r1) u = 1.0;\n    else u = Smooth(d-r1, r2);\n    return mix(h, c.z, u);\n}\n\n// Cratere entre deux hauteurs\n// p : point\n// h : hauteur du terrain\n// c : centre du cratere\n// z1 : hauteur du cratere\n// z2 : fond du cratere (< z1)\n// r : rayon d'affectation\nfloat Cratere(vec2 p, float h, vec2 c, float z1, float z2, float r) {\n    float d = length(p-c);\n    if(h < z1 || d > r) return h;\n    else return z1 + (h-z1)*(h-z1)/(z2-z1);\n}\n\n// Gain\n// z : hauteur\n// z1 : hauteur min\n// z2 : hauteur max (< z1)\nfloat gain(float z, float z1, float z2) {\n \tif (z < z1) return z;\n    if (z > z2) return z;\n    float t = (z-z1)/(z2-z1);\n    return z1+t*t*t*(z2-z1);\n}\n\n// Fait un plateau enter deux hauteurs\n// p : point\n// h : hauteur du terrain\n// c : centre d'effet\n// z1 : hauteur min\n// z2 : hautur max\n// r : rayon de l'effet\nfloat Plateau(vec2 p, float h, vec2 c, float z1, float z2, float r) {\t// Applatit entre deux hauteurs\n    float d = length(p-c);\n    float u = Smooth(d, r, 2.0*r);\n    float h1 = h;\n    float h2 = gain(h, z1, z2);\n    return mix(h1, h2, u);\n}\n\n// Terrain heightfield\n// p : Position in the plane\nfloat Terrain( in vec2 p )\n{\n\t// Rotation matrix\n\tconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\n    const float l0=530.0;\n    const float a0=195.0;\n    \n\t// Scale\n    p = p/l0;\n    \n    float a = 0.0;\n    float b = 1.0;\n    for( int i=0; i<7; i++ )\n    {\n        float n = Noise(p);\n        a += b*n;\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\treturn -195.0+a0*a;\n}\n\n// Route\n// p : point de l'espace\n// h : hauteur de base du terrain\n// a : point de départ\n// b : point d'arrivée\n// z1 : hauteur de départ\n// z2 : hauteur d'arrivée\n// l : largeur de la route\n// L : largeur du monticule autour de la route\nfloat Route(vec2 p, float h, vec2 a, vec2 b, float z1, float z2, float l, float L) {\n    vec2 n = normalize(b-a);\n    float q = dot(p-a, n);\t// Projeté orthogonal de p sur la droite (ab)\n    float d = sqrt(length(p-a)*length(p-a) - q*q);\t// distance\n    if(q < 0.0) d = 0.0;\n    if(q > length(a-b)) d = 0.0;\n    float u = Smooth(d, l, L);\t// champ d'action\n    float h1 = mix(h, z1 + z2*(q/length(b-a)), u);\n    if(q < 0.0 || q > length(b-a)) h1 = h;\n    return h1;\n}\n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitTerrain(in vec3 p,int index)\n{\n    float z = Terrain( p.xy );\n    z = Flatten(p.xy, z, vec3(100.0,200.0,200.0), 200.0);\t// Fait la bosse\n    z = Applatit(p.xy, z, vec3(-100.0,-100.0,50.0), 50.0,70.0);\t// Applanissement du phare\n    z = Cratere(p.xy, z, vec2(200.0, 200.0), 150.0, 120.0, 200.0);\t// Volcan\n    z = Route(p.xy, z, vec2(0.0, -500.0), vec2(-100.0,-100.0), 0.0, 50.0, 10.0, 100.0);\t// Route vers le phare\n    z = Plateau(p.xy, z, vec2(350.0,0.0), 10.0, 50.0, 200.0);\t// Cree une berge (plateau)\n    float h = p.z - z; \n    return V(h,index);\n}\n\n// Water ------------------------------------------------------------------------------------------------\n\n// Fait une vague qui bouge en fonction du temps\n// position : position sur la map\n// direction : selon cos et sin de la position\n// speed : vitesse des vagues\n// frequency : frequence\n// timeshift : temps selon lequel elle bouge\nvec2 wavedx(vec2 position, vec2 direction, float speed, float frequency, float timeshift) {\n    float x = dot(direction, position) * frequency + timeshift * speed;\n    float wave = exp(sin(x) - 1.0);\n    float dx = wave * cos(x);\n    return vec2(wave, -dx);\n}\n\n// Fait l'ensemble des vagues\n// position : position sur la map\n// interations : nombre d'octaves\nfloat getwaves(vec2 position, int iterations){\n\tfloat iter = 0.0;\n    float phase = 6.0;\n    float speed = 2.0;\n    float weight = 1.0;\n    float w = 0.0;\n    float ws = 0.0;\n    for(int i=0;i<iterations;i++){\n        vec2 p = vec2(sin(iter), cos(iter));\n        vec2 res = wavedx(position, p, speed, phase, iTime);\n        position += normalize(p) * res.y * weight * 0.048;\n        w += res.x * weight;\n        iter += 12.0;\n        ws += weight;\n        weight = mix(weight, 0.0, 0.2);\n        phase *= 1.18;\n        speed *= 1.07;\n    }\n    return w / ws;\n}\n\n// Water heightfield\n// x : Position in the plane\nfloat Water( in vec2 x )\n{\n\treturn 10.0*getwaves(x/200.0, 13);\t// On peut changer le 10 pour faire des vagues plus ou moins prononcées\n    //return 0.0;\t// A decommenter si on veut de l'eau plate\n} \n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitWater(in vec3 p, int index)\n{\n\tfloat h = p.z - Water( p.xy );\n    return V(h,index);\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Union, preserve the color of the first object\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v < b.v) return a;\n    else {\n        if (a.v < 0.0) return V(b.v, a.i);\n        else return b;\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v > b.v) return a;\n    else return V(b.v, a.i);\n}\n\n// Difference\n// a : field function of major sub-tree\n// b : fied function of delete sub-tree\nV Difference(V a, V b)\n{\n    if(a.v > -b.v) return a;\n    else return V(-b.v, a.i);\n}\n\n// Rotation indirecte\n// p : point de l'espace\n// c : centre de rotation\n// r : vecteur des trois rotations (x, y, z) en radians d'angles directs (radiants)\nvec3 Rotation(vec3 p, vec3 c, vec3 r)\n{\n    float cx = cos(-r.x);\n    float sx = sin(-r.x);\n    float cy = cos(-r.y);\n    float sy = sin(-r.y);\n    float cz = cos(-r.z);\n    float sz = sin(-r.z);\n    p -=c;\n    mat3 Rx = mat3(1.0, 0.0, 0.0,    0.0, cx, -sx,    0.0, sx,cx);\n    mat3 Ry = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Rz = mat3(cz, -sz, 0.0,    sz, cz, 0.0,    0.0,0.0,1.0);\n    return (Rx*Ry*Rz*p)+c;\n}\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\n// index : Texture index\nV Sphere(vec3 p, vec3 c, float r, int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\n// index : Texture index\nV Plane(vec3 p, vec3 n, vec3 o, int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Cone\n// p : point de l'espace\n// a : point d'origine (base) du cone\n// ra : rayon d'origine du cone\n// index : texture\nV Cone(vec3 p, vec3 a, vec3 b, float ra, int index) {\n    float ab = length(b-a);\n    vec3 u = (b-a)/ab;\n    \n    // Radial coordinates (l,e) l axial, e radial\n    vec3 ap=p-a;\n    float lap=length(ap);\n\tfloat l = dot(ap, u);\n    \n    float e = sqrt(lap*lap - l*l);\n        \n    vec2 n = vec2(ra, ab);\n    n=normalize(n);\n    float d = dot(vec2(l-ab,e),n);\n    // Section basse du cone\n    V v = Difference(V(d, index), Plane(p, u, a, index));\n    return v;\n}\n\n// Cylindre infini\n// p : point\n// a : point du centre du cylindre\n// u : vecteur unitaire directeur\n// r : rayon\n// index : texture\nV Cylindre(vec3 p, vec3 a, vec3 u, float r, int index)\n{\n \tfloat l = dot((p-a),u);\n    float d = sqrt(length(p-a)*length(p-a) - l*l);\n    return V(d - r, index);\n}\n\n// Cylindre fini\n// p : point\n// a : base du cylindre\n// b : haut du cylindre\n// r : rayon\n// index : texture\nV CylindreFini(vec3 p, vec3 a, vec3 b, float r, int index)\n{\n    vec3 u = (b-a)/length(b-a);\n    V fc = Cylindre(p, a, u, r, index);\n    V pa = Plane(p, u, a, index);\n    V pb = Plane(p, -u, b, index);\n    return Difference(fc, Union(pa, pb));\n}\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV Object(vec3 p)\n{\n  V u = Union(\n      ImplicitTerrain(p,0),\n      ImplicitWater(p,1));\t// Terrain et eau\n    \n    u = Intersection(u,Sphere(p,vec3(0.0,0.0,0.0),450.0,2));\t// Fait la boule de terrain\n    // Phare\n    u = Union(u, Difference(Cone(p, vec3(-100.0,-100.0,50.0), vec3(-100.0,-100.0,700.0), 30.0, 3), Plane(p, vec3(0.0,0.0,-1.0), vec3(-100.0,-100.0,250.0), 1)));\n    // Chapeau du phare\n    u = Union(u, CylindreFini(p, vec3(-100.0,-100.0,250.0), vec3(-100.0,-100.0,265.0), 30.0, 3));\n    u = Union(u, CylindreFini(p, vec3(-100.0,-100.0,265.0), vec3(-100.0,-100.0,290.0), 15.0, 3));\n    u = Union(u, Cone(p, vec3(-100.0,-100.0,290.0), vec3(-100.0,-100.0,300.0), 27.0, 3));\n    // Cone de lumiere qui bouge en fonction du temps\n    u = Union(u, Cone(Rotation(p, vec3(-100.0,-100.0,277.0), vec3(0.0,0.0,iTime)), vec3(-600.0, -100.0, 277.0), vec3(-100.0, -100.0, 277.0), 100.0, 4));\n  \n    return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p).v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Trace ray using ray marching pour le cone (il ne prend pas en compte le cone de lumiere)\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTraceLumiere(vec3 o, vec3 u, float e, out bool h, out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    V v = Object(p);\n    // Hit object\n      if (v.v < 0.0 && v.i != 4 && v.i != 1)\t// On intersecte ni la lumiere ni l'eau\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += 10.0;\t\t// C'est très approximatif mais le but c'est pas de faire un truc tres precis\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n// Texture de base du terrain\n// p : point de l'espace\nvec3 TextureRock(in vec3 p)\n{\n  \treturn mix(vec3(1.0,0.8,0.5),vec3(0.7,0.5,0.2),Fbm(p/50.0)); \t// Mix de marrons  \n}\n\n// Texture de base de l'eau\n// p : point de l'espace\nvec3 TextureWater(in vec3 p)\n{\n  \treturn vec3(0.4,0.4,1.0);  // Bleu\n}\n\n// Autre texture (non-utilisee ici)\n// p : point de l'espace\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);   \n}\n\n// Texture du phare : blanc et rouge\n// p : point de l'esapce\nvec3 TexturePhare(vec3 p) {\n \tfloat q = mod(p.z, 100.0);\t// Modulo selon la heuteur du point\n    if(q > 49.0) return vec3(1.0,0.0,0.0);\t// Rouge\n    else return vec3(1.0,1.0,1.0);\t// Blanc\n}\n\n// Texture de base du cone de lumiere\n// p : point de l'espace\nvec3 TextureLumiere(vec3 p) {\n    return vec3(1.0,1.0,0.0);\t// Jaune\n}\n\n// Texture Herbe\n// p : point de l'espace\nvec3 Herbe(vec3 p) {\n    vec3 q = p + 1.0*N3(p) + 0.5*N3(p/0.5);\t// On deforme le point\n    q.z=(q.x);\n \tvec3 Vert = vec3(0.1,0.5,0.1);\n    vec3 Vert2 = vec3(0.0,0.1,0.0);\n    vec3 col = mix(Vert,Vert2,Fbm(q/2.0));\t// On fait un mix de plusieurs verts\n    return col;\n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    V vp= Object(p);\n    if (vp.i==0)\n    {      \n        return TextureRock(p);\n    }\n    else if (vp.i==1)\n    {\n        return TextureWater(p);\n    }\n    else if (vp.i==2)\n    {\n        return TextureBorder(p);\n    }\n    else if (vp.i == 3) return TexturePhare(p);\n    else if (vp.i == 4) return TextureLumiere(p);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t=SphereTrace(p+1.51*n,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.5; \n}\n\n// Texture du terrain avec ses effets de lumiere\n// p : point de l'espace\n// n : normale au point\n// rd : direction du regard\n// light1 : lumiere du ciel\n// l : vecteur entre la lumiere et le point\nvec3 ColorRock(vec3 p, vec3 n, vec3 rd, vec3 light1, vec3 l) {\n    \n    vec3 col = TextureRock(p);\t// Texture de base\n    vec3 ref = reflect( rd, n );\t// Rayon reflechi\n    //float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\t\t// Non utilises ici\n    //vec3 hal = normalize(light1-rd);\n\n    // Shadow computation\n    float s = Shadow(p,n,l);\n    \n    // Texture d'herbe au-dessus d'une certaine hauteur\n    float herbe = 0.0;\n    herbe = smoothstep(10.0, 50.0, p.z + 5.0*Noise(p/2.0));\t// L'herbe n'arrive pas d'un coup\n    col = mix(col, Herbe(p/10.0), herbe);\n\n    // Pseudo diffuse lighting\n    vec3 dif = (clamp(dot(n, l), 0.0, 1.0))*vec3(1.0,0.9,0.5);\n\n    return 0.45*col+s*0.5*dif;\n}\n\n// Texture du phare avec ses effets de lumiere\n// p : point de l'espace\n// n : normale au point\n// rd : direction du regard\n// light1 : lumiere du ciel\n// l : vecteur entre la lumiere et le point\nvec3 ColorPhare(vec3 p, vec3 n, vec3 rd, vec3 light1, vec3 l) {\n    vec3 col = TexturePhare(p);\n    \n    vec3 ref = reflect( rd, n );\n            \n    // Terme speculaire\n    vec3 specular = 0.55 * pow(clamp(dot(ref,l),0.0,1.0),2.0) * vec3(1.0,0.6,0.0);\n\n    // Pseudo diffuse lighting\n    float dif = 0.5*(1.0+dot( l, n ));\n    dif*=dif;\n\n    return 0.45*col + 0.55*dif*vec3(0.35) + specular; \n}\n\n// Renvoie la couleur avec ses effets de lumiere pour le terrain et le phare\n// Necessaire pour les reflets et la transparence !\n// p : point de l'espace\n// n : normale au point\n// rd : direction du regard\n// light1 : lumiere du ciel\n// l : vecteur entre la lumiere et le point\nvec3 CompleteColor(vec3 p, vec3 n, vec3 rd, vec3 light1, vec3 l) {\n \tV vp= Object(p);\n    if (vp.i==0)\n    {      \n        return ColorRock(p, n, rd, light1, l);\n    }\n    else if (vp.i==1)\n    {\n        return TextureWater(p);\n    }\n    else if (vp.i==2)\n    {\n        return TextureBorder(p);\n    }\n    else if (vp.i == 3) return ColorPhare(p, n, rd, light1, l);\n    else if (vp.i == 4) return TextureLumiere(p); \n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = vec3(-200.0,800.0,300.0);\t\t// Lumiere du ciel\n    \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\t\t\t\t\t\t\t// On recupere le point\n    // Light direction to point light\n    vec3 l = normalize(light1 - p);\n    V vp= Object(p);\n    vec3 n = ObjectNormal( p );\t\t\t\t// On recupere sa normale\n\n\t// On recupere la couleur de l'objet (avec ses effets de lumiere pour le terrain et le phare)\n    col = CompleteColor(p,n, rd, light1, l);\n    // Sky\n    if( b==false )\n    {\n        col = mix(vec3(1.0,0.7,0.4), vec3(0.2,0.0,0.3),rd.z*rd.z*10.0);\t// Degrade orange-violet\n    }\n\telse \n\t{\n        \n        // Water ; on la fait ici car elle a utilise des reflets\n        if (vp.i==1)\n        {\n            vec3 ref = reflect( rd, n );\t// Rayon reflechi\n\n            // Reflets sur l'eau\n            vec3 col2 = col;\n            bool br;\n            int itr;\n            // On intersecte ni la lumiere ni l'eau elle-meme\n            float tr = SphereTraceLumiere(p, ref, View, br, itr);\t// Rayon reflechi depuis le point de l'eau\n            if (br) {\n                vec3 q = p + tr*ref;\t// On recupere le nouveau point\n                vec3 nq = ObjectNormal(q);\n                col2 = CompleteColor(q, nq, rd, light1, l);\t// On recupere la couleur de l'objet\n            }\n\n            // Terme speculaire\n            vec3 specular = 0.75 * pow(clamp(dot(ref,l),0.0,1.0),13.0) * vec3(1.0,0.6,0.0);\n\n            // Pseudo diffuse lighting\n            float dif = 0.5*(1.0+dot( l, n ));\n            dif*=dif;\n\n            col = 0.45*(0.4*col + 0.6*col2) + 0.55*dif*vec3(0.35) + specular;\n        }\n        // Cone Lumiere Phare ; on la fait ici car elle a de la transparence\n        if (vp.i == 4) {\n            vec3 ref = reflect( rd, n );\n\t\t\t\n            // Recuperer la couleur derriere la lumiere\n            bool br;\n            int itr;\n            float tr = SphereTraceLumiere(ro, rd, View, br, itr);\t// Meme rayon qu'avant\n            vec3 col2;\n            if(br) {\t// On touche quelque chose\n                vec3 q = ro + tr*rd;\t\t// On recupere le nouveau point\n                vec3 nq = ObjectNormal(q);\n             \tcol2 = CompleteColor(q, nq, rd, light1, l);\t\t// On recupere la couleur de l'objet\n            }\n            else {\t// On \"touche\" le ciel\n                col2 = mix(vec3(1.0,0.7,0.4), vec3(0.2,0.0,0.3),rd.z*rd.z*10.0);\t// Couleur du ciel\n            }\n            \n            col = 0.4*col + 0.6*col2; \n        }\n\t}\n    \n                \n    // Lumiere du phare\n    // On commence par faire une boule de lumiere\n    vec3 lumiere = vec3(-100.0,-100.0,277.0);\t\t// Position de la lumiere\n    vec3 point = ro - lumiere - dot(ro - lumiere, rd)*rd;\n    float d = length(point);\n    float rayon = 600.0;\t\t// Etendue de la lumiere\n    vec3 lumierePhare;\n    if(d > rayon) {\n        lumierePhare = vec3(0.0);\t// Pas de couleur si trop loin\n    }\n    else {\n        float brillance = (rayon - d)/rayon;\t// Couleur blanche decroissante selon la distance au centre\n        lumierePhare = pow(brillance, 8.0)*vec3(1.0);\t// On la retrecie et on lui donne la couleur blanche\n    }\n    // Calcul de la direction de la lumiere : on calcule le point du \"bout\" du cone, qui tourne en fonction du temps\n    vec3 boutPhare = vec3(-cos(iTime)*500.0-100.0, sin(iTime)*500.0-100.0, 277.0);\n    vec3 direction = normalize(boutPhare - lumiere);\n    // On ne voit la lumiere que quand elle est tournee vers nous\n    lumierePhare *= pow((clamp(dot(direction,-rd),0.0,1.0)), 10.0);\n    col += lumierePhare;\n    \n    // J'ai enleve la petite image\n    // Shading for iterations\n    /*if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {*/\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    //}\n}\n\n// J'ai enleve la petite image\n/*vec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n    pip = false;\n   return p;\n}*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    //bool pip=true;\n    bool pip=false;\n    \n    // Pixel coordinates\n    //vec2 p = RayDirection(fragCoord, pip);\n   vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvec3 N3(vec3 p) {\n    return vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,50.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}