{"ver":"0.1","info":{"id":"fdSyRW","date":"1643132301","viewed":144,"name":"shrub","username":"jt","description":"In some (older) games shrubs are modeled with three intersecting alpha-textured planes.\nHere we use 3 planes with tree 2d tree sdfs and use sweep to give them some volume.\nUses TLC123's tree sdf [url]https://www.shadertoy.com/view/sl2SRt[/url]\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","sdf","tree","distance","planes","project","sweep","bound","extrude","2dto3d","insulate","embed","wireify","stringify","3dify","shrub"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/fdSyRW shrub 2022-1-25 by Jakob Thomsen\n// Based on https://www.shadertoy.com/view/sdscDs insulate by jt\n// and https://www.shadertoy.com/view/7dByRz\n// Apply the \"insulate\" operator / sweep operator to a 2d tree sdf to expand it into a 3d sdf.\n// Thanks to TLC123 for the original 2d tree SDF.\n// Thanks to FabriceNeyret2 for fixing the interior of the 3dified sdf\n// Thanks to Shane for 3dify suggestions (see comments).\n// Thanks to Dain for the 2.5x speedup optimization.\n// As usual thanks to iq for the ambient occlusion algorithm & tetrahedron normals.\n\n// Basic idea:\n// In some (older) games shrubs are modeled with three intersecting alpha-textured planes.\n// Here we use 3 planes with tree 2d tree sdfs and use sweep to give them some volume.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n// https://www.shadertoy.com/view/sl2SRt 2d tree branching SDF by TLC123\nfloat PI = acos(-1.0);\nfloat TAU = acos(-1.0) * 2.0;\n\nfloat smin(float a, float b,float k )\n{\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0) ;\n    return mix(b, a, h ) - k * h * (1.0 - h);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return -smin(-a,-b, k);\n}\n\nfloat TLC123_tree2d(vec2 uv, int branches)\n{\n    // to polar\n    vec2 p = vec2((atan(uv.x, uv.y) / TAU) * float(branches), length(uv));\n\n    float Y, y, X;\n    Y = exp2(floor(p.y));\n    y = 0.5 + (pow(fract(p.y), 0.85)) * 0.5 + 0.5;\n    X = abs(p.x * Y);\n    p.x = abs(fract(X - y * .5) - 0.5) * 2.0;\n    p.x = max(p.x, abs(fract(X + y * 0.5) - 0.5) * 2.0);\n \n    float branchwidth = 0.1 / (0.25 + p.y);\n    float outerlimit = p.y - 4.6;\n    float scaleAdjusted = 1.5 * (((1.0 - p.x) / Y) * p.y);\n    return smax(outerlimit, scaleAdjusted - branchwidth, 0.2) * 0.5;\n}\n\nfloat sweeptree(vec3 p, float t)\n{\n    float dp = p.z; // distance to plane\n    float df = TLC123_tree2d(p.xy, 3); // distance to \"surface\"/outline given by 2d distance function\n    // My original formula (circular cross-section)\n    //return sqrt(dp*dp+df*df)-t; // expand/3dify 2d SDF\n    return min(max(abs(dp),df+t), sqrt(dp*dp+df*df))-t; // FILLED (takes interior into accound) by FabriceNeyret2\n    //return df-.2*(1.-abs(dp)); // nice paper-like shape\n    //return df+.2*abs(dp); // even nicer, more subtle paper-like style\n    //return max(df,dp) - t; // rectangle\n    //return max(df,abs(dp)) - t; // flat rectangle\n    \n    // Variants suggested by Shane\n    //return max(abs(df), abs(dp) - .15) - t; // \"Hacky rectangle cross section\"\n    //return max((abs(df) + abs(dp))*.7071, max(abs(df), abs(dp))) - t; // \"Hacky octagon cross section\"\n    //return length(vec2(df, dp)) - t; // Circle\n}\n\nfloat absmin(float a, float b)\n{\n    return abs(a) < abs(b) ? a : b;\n}\n\n// NOTE: Minor artifacts, some internal bits of the structure are missing, but that's worth the 2.5x speedup.\nfloat sweeptree3axis(vec3 p, float t) // Dain's optimization: https://www.shadertoy.com/view/NdBcRD\n{\n    float z= absmin(p.x, absmin(p.y,p.z));\n    vec2 xy = p.xy;\n    if(z == p.x)\n    {\n        xy = p.zy;\n    }\n    else if(z == p.y)\n    {\n        xy = p.xz;\n    }\n    \n    float x = min(xy.x,xy.y);\n    float y = max(xy.x, xy.y);\n   \n    xy = vec2(y,x);\n    return sweeptree(vec3(xy,z), t);\n}\n\nmat3 R = mat3(.7,.7,0,-.5,.5,.7,.5,-.5,.7); // replace .7 by sqrt(.5) if you need exact values\nfloat map(vec3 p)\n{\n    float s = 0.5;\n    float d = mix(0.01, 0.05, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n#if 0\n            min\n            (\n                sweep_tree(p.xyz / s, d)*s,\n                min\n                (\n                    sweep_tree(p.zyx / s, d)*s,\n                    sweep_tree(p.xzy / s, d)*s\n                )\n            ),\n#else\n            // rotate shrub\n            //sweeptree3axis(R*p.xyz/s,d)*s, // Dain's optimization: https://www.shadertoy.com/view/NdBcRD\n            sweeptree3axis(p.xyz/s,d)*s, // Dain's optimization: https://www.shadertoy.com/view/NdBcRD\n#endif\n            halfspace(p, -1.2)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ndc = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    ndc.x *= iResolution.x / iResolution.y;\n    vec2 m = length(iMouse.xy) <= 10. // click in lower left corner...\n           ? pi * vec2(2.0 * fract(iTime * 0.1), 3.0 / 4.0) // ...for demo mode\n           : pi * vec2(2.0 * iMouse.x / iResolution.x, 0.5 + 0.5 * iMouse.y / iResolution.y); // mouse look\n\n    mat2 R = mat2(cos(m.x), sin(m.x), -sin(m.x), cos(m.x));\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    mat2 S = mat2(cos(m.y), sin(m.y), -sin(m.y), cos(m.y));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX);\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = (dist < DIST_MAX) ? vec4(color, 1.0) : vec4(0.0);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}