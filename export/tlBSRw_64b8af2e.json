{"ver":"0.1","info":{"id":"tlBSRw","date":"1565350416","viewed":89,"name":"My first circle.","username":"sarah_sr","description":"My first test shader. Drawing a circle and keeping notes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","blackandwhite","circle","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //centre of the screen\n    vec2 centre = uv - 0.5; //can make 0.5 a variable to move circle around\n    \n    //get the right aspect ratio after getting the centre\n    centre.x *= iResolution.x/iResolution.y;\n    \n    //d = distance of the current pixel from the given value. which is the centre here\n    float dis = length(centre);\n    \n    //radius for the circle\n    float radius = 0.3;\n\n    // you have the variables that you need to make any circle\n    // shader goes through every single pixel. So check every pixel if it is inside your circle\n    // or outside. We'll do that with a smoothstep for now. And assign the result to the colour.\n    \n    // if dis > radius - 0.2 then white. interpoated between radius and radius - 0.2\n    // can do this with step() etc. yes and no conditions help you draw within parameters of a shape. \n    vec3 col = vec3(smoothstep(radius, radius-0.02, dis));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}