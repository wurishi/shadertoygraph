{"ver":"0.1","info":{"id":"MsyXzt","date":"1466008728","viewed":867,"name":"Canny filter (3pass)","username":"stduhpf","description":"A little programmi had to make for school\nA Canny filter is a complex edge detector based on sobel filter.\nyou can change the values of seuil_haut and seui_bas in buf B if the detection does not work properly (for exmple deacrease if you go fullscreen) ","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["filter","image","outline","3pass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TX(x,y) texture(iChannel0,(fc+vec2(x,y))/iResolution.xy)\n\nfloat getn(vec2 fc)\n{\n    float i = float(TX(-1,-1).r==1.);\n     i+=  float(TX(-1,1).r==1.);\n     i+=  float(TX(1,1).r==1.);\n     i+=  float(TX(1,-1).r==1.);\n     i+=  float(TX(0,-1).r==1.);\n     i+=  float(TX(0,1).r==1.);\n     i+=  float(TX(0,-1).r==1.);\n     i+=  float(TX(0,1).r==1.);\n    return float(i!=0.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 img =texture(iChannel0,uv);\n    if (img.r<1. && img.r>0.)\n        img = vec4(getn(fragCoord));\n\tfragColor = img;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TX(x,y) texture(tex,(fc+vec2(x,y))/iResolution.xy)\n\n//noise reduction\nvec4 blurtex2D(sampler2D tex,vec2 fc)\n{\n    vec4 col = .25*TX(0,0);\n    col+= .052*TX(-1,-1);\n     col+= .052*TX(-1,1);\n     col+= .052*TX(1,1);\n     col+= .052*TX(1,-1);\n     col+= .114*TX(0,-1);\n     col+= .114*TX(0,1);\n     col+= .114*TX(0,-1);\n     col+= .114*TX(0,1);    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 img = blurtex2D(iChannel0,fragCoord);\n    float norm = length(fwidth(img));\n\tfragColor = vec4(norm,length(dFdx(img)),length(dFdy(img)),0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float seuil_bas = 0.04;\nconst float seuil_haut = 0.06;\n\n\nfloat ismax(vec2 fc,vec2 grad,float shape)\n{\n    float comp = texture(iChannel0,(fc+grad)/iResolution.xy).r;\n    if (comp>shape)\n        shape=0.;\n    return shape;\n}\nfloat seuils(float shape)\n{\n    if(shape>seuil_haut)\n        shape = 1.;\n    if(shape<seuil_bas)\n        shape = 0.;\n    return shape;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 grad = texture(iChannel0,uv).gb;\n    float norm = texture(iChannel0,uv).r;\n    float shape =ismax(fragCoord,normalize(grad),norm);\n    shape = seuils(shape);\n\tfragColor = vec4(shape);\n}","name":"Buf B","description":"","type":"buffer"}]}