{"ver":"0.1","info":{"id":"NsVyRc","date":"1655317508","viewed":198,"name":"silky colors","username":"pb","description":"yet another swirly color generator, based on Visions of Chaos \"Sample Noise 2D 4.glsl\"","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define oct 5    //number of fbm octaves\n#define pi  3.14159265\n\nfloat random(vec2 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec2(12., 90.)))* 1e5 );\n}\n\n//this is taken from Visions of Chaos shader \"Sample Noise 2D 4.glsl\"\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float a = random(i + vec2(0.,0.));\n    float b = random(i + vec2(1.,0.));\n    float c = random(i + vec2(0.,1.));\n    float d = random(i + vec2(1.,1.));\n    vec2 u = f*f*(3.-2.*f); //smoothstep here, it also looks good with u=f\n    \n    //this equation is genius and i cannot figure out why it works so well\n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n\n}\n\nfloat fbm(vec2 p) {\n    float v = 0.;\n    float a = .5;\n    vec2 shift = vec2(100.);  //play with this\n    \n    float angle = pi/4.;      //play with this\n    float cc=cos(angle), ss=sin(angle);\n    mat2 rot = mat2( cc, ss, -ss, cc );\n    for (int i=0; i<oct; i++) {\n        v += a * noise(p);\n        p = rot * p * 2. + shift;\n        a *= .6;  //changed from the usual .5\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float tt = iTime / 8.;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += 3.*vec2(cos(tt/5.),sin(tt/3.));  //move around in ellipse\n    //uv *= 5.;  //check out the zoomed out view\n\n    vec2 q = vec2(0.), r = vec2(0.);\n\n    q.x = fbm(uv);\n    q.y = fbm(uv + vec2(2.+tt/3.));\n    r.x = fbm(uv + q + vec2(3., 8.) + tt);\n    r.y = fbm(uv + q + vec2(8., 3.) + tt/2.);   \n \n    float f = fbm(uv + r);\n    \n    vec3 cc = 3.*vec3(q.x,q.y,r.x);\n    cc = f*f*pow(cc, vec3(2.5));    //play with this\n\n    fragColor = vec4(cc/4.,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}