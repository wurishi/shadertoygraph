{"ver":"0.1","info":{"id":"tldfD8","date":"1612682594","viewed":702,"name":"Brushed metal sketch","username":"ttg","description":"Quick test.  Textures need to be replaced with hash-based low frequency synthesis.\nMultisampling: quick way to overcome linear texture discontinuities, not suitable for production.","likes":14,"published":3,"flags":0,"usePreview":1,"tags":["metal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n\n  float g = 0., l=0.;\n  const float N = 16.;\n  for (float i=0.; i<N; i++) {\n    g+=sqrt(1./N)*(-.5+texture(iChannel0, uv*vec2(.06,4.18)+i*vec2((7.+1./N)/256.)).x);\n    l+=sqrt(1./N)*(-.5+texture(iChannel0, vec2(0.,.5)+uv*vec2(.04,0.004)+i*vec2((10.+1./N)/256.)).x);\n  }\n  l = exp(4.*l-1.5);\n  g = exp(1.2*g-1.5);\n  float v = .1*g+.2*l+2.*g*l;\n  \n  vec3 col = vec3(v);\n\n  fragColor = vec4(pow(col,vec3(1./2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}