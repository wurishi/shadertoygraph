{"ver":"0.1","info":{"id":"lXSyWG","date":"1727640614","viewed":20,"name":"Sugar High","username":"whereisgavin","description":"fun","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DIST_FREQ 100.0\n//#define DIST_AMP 0.01\n//#define RIP_FREQ 200.0\n//#define RIP_AMP 0.145\n\n#define DIST_FREQ 100.0\n#define DIST_AMP 0.01\n#define RIP_FREQ 200.0\n#define RIP_AMP 0.145\n\n#define PI 3.14159265359\nvec3 pallete(in float t)\n{\n    const vec3 A = vec3(0.70768, 0.248, 0.508);\n    const vec3 B = vec3(0.779, 0.560, 0.360);\n    const vec3 C = vec3(-1.060, -0.471, 2.030);\n    const vec3 D = vec3(-2.013, -2.528, -2.195);\n    return A + B*cos( 6.28318*(C*t+D) );\n}\n\nfloat atan2(in float y, in float x)\n{\n    bool s = (abs(x) > abs(y));\n    return mix(PI/2.0 - atan(x,y), atan(y,x), s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float amount = 100.0;\n    float time = iTime * 2.0;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uvK = vec2(uv.x + DIST_AMP * sin(uv.x + DIST_FREQ * (10.0 + 1.1 * uv.y) + time), uv.y);\n    vec2 uv3 = fract(3.0 * uvK);\n    uv3 = 1.25 * (uv3 - 0.5);\n    uv3 = uv3 * vec2(aspect, 1.0);\n    float d1 = uv3.x * uv3.x + uv3.y * uv3.y;\n    d1 = d1 + 0.8 * time;\n    \n    uv = 1.0 * (uv - 0.5);\n    uv = uv * vec2(aspect, 1.0);\n    float mag = uv.x * uv.x + uv.y * uv.y;\n    float phase = atan2(uv.y, uv.x);\n    phase += 0.06 * time;\n    uv = mag * vec2(cos(phase), sin(phase));\n    \n    uv = vec2(uv.x, uv.y + RIP_AMP * sin(uv.y + RIP_FREQ * (10.0 + 2.1 * uv.x) + time));\n    \n    float d2 = uv.x * uv.x + uv.y * uv.y;\n    d2 = d2 + 0.15 * time;\n    d2 = 0.005 * d2 * d2;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.5 + uv.xy, 0.0);\n    col = col * (1.0 - d1);\n    col = tanh(pallete(d1 - d2) + 0.4 * pallete(2.010696 * d2));\n\n    //col = 1.25 * tanh(col);\n    //col = vec3(1.0 - col.r, 0.0 * col.g, 1.0 - col.b);\n    // Output to screen\n    //col = floor(2.0 * col) / 2.0;\n    //col = tanh(2.0 * col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}