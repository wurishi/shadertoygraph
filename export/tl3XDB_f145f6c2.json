{"ver":"0.1","info":{"id":"tl3XDB","date":"1581613571","viewed":262,"name":"RandomSamplingTest","username":"ThomasSchander","description":"Testing sampling patterns for a sphere","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["sampling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = textureLod(iChannel0, uv, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 hammersley(uint Index, uint NumSamples)\n{\n\tfloat E1 = fract(float(Index) / float(NumSamples));\n\tuint revertSample;\n\t// Revert bits by swapping blockwise. Lower bits are moved up and higher bits down.\n\trevertSample = (Index << 16u) | (Index >> 16u);\n\trevertSample = ((revertSample & 0x00ff00ffu) << 8u) | ((revertSample & 0xff00ff00u) >> 8u);\n\trevertSample = ((revertSample & 0x0f0f0f0fu) << 4u) | ((revertSample & 0xf0f0f0f0u) >> 4u);\n\trevertSample = ((revertSample & 0x33333333u) << 2u) | ((revertSample & 0xccccccccu) >> 2u);\n\trevertSample = ((revertSample & 0x55555555u) << 1u) | ((revertSample & 0xaaaaaaaau) >> 1u);\n\n\treturn vec2(E1, float(revertSample) * 2.3283064365386963e-10);\n}\n\nuint HashWang(uint a)\n{\n\ta = (a ^ 61u) ^ (a >> 16u);\n\ta = a + (a << 3u);\n\ta = a ^ (a >> 4u);\n\ta = a * 0x27d4eb2du;\n\ta = a ^ (a >> 15u);\n\treturn a;\n}\n\nfloat Halton(int b, int i)\n{\n    float r = 0.0;\n    float f = 1.0;\n    while (i > 0) {\n        f = f / float(b);\n        r = r + f * float(i % b);\n        i = int(floor(float(i) / float(b)));\n    }\n    return r;\n}\n\nfloat Halton2(int i)\n{\n#if __VERSION__ >= 400\n\treturn float(bitfieldReverse(uint(i)))/4294967296.0;\n#else\n\treturn Halton(2, i);\n#endif\n}\n\nvec2 Halton23(int i)\n{\n    return vec2(Halton2(i), Halton(3, i));\n}\n\n\nfloat M_PI = 3.1315926;\n\n// These hash/floatRand functions return a number in the range of [0..1]\nfloat floatRand(inout uint seed, float offset)\n{\n\tseed += 13u;\n\tuint urand = HashWang(seed);\n\tconst uint mantissaMask = (0xffffffffu) >> (32u - 23u);\n\treturn fract(float(urand & mantissaMask) / float(mantissaMask) + offset);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uint numTotalSamples = 3u;\n    float lenc = length(uv-vec2(0.5));\n    fragColor = lenc > 0.5 && lenc < 0.51 ? vec4(0.1) : vec4(0.0);\n    uint seed = uint(iFrame);\n    vec2 randomOffset = vec2(floatRand(seed, 0.0), floatRand(seed, 0.0));\n    //randomOffset = Halton23(iFrame);\n    \n    for(uint i = 0u; i<numTotalSamples && iFrame < 100; i++)\n    {\n        vec2 gridSample = fract(hammersley(i, uint(numTotalSamples)) + randomOffset);\n        float angle = 2.0 * M_PI * gridSample.y;\n        vec2 delta = vec2(0.5*vec2(sin(angle), cos(angle)) * sqrt(gridSample.x));\n        if(length(uv-vec2(0.5) - delta) < 0.005)\n            fragColor.x = 0.6;\n    }\n       \n    \n    vec4 lastfetch = textureLod(iChannel0, uv, 0.0);\n    fragColor += lastfetch;\n}","name":"Buf A","description":"","type":"buffer"}]}