{"ver":"0.1","info":{"id":"4XfGD8","date":"1708525314","viewed":57,"name":"TP1 LIFGRAPHIQUE Rendu","username":"mattbread","description":"TP1 for LifGraphique\nMatteo Miali p2205226","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["modeling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Rotation matrix around x axis\n// a : Angle\nmat3 Rx(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(1.,0.,0.,0.,ca,-sa,0.,sa,ca);\n}\n\n// Rotation matrix around y axis\n// a : Angle\nmat3 Ry(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);\n}\n\n\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(50.,-50.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : normal vector of plane\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c, n);\n}\n\n// Circle\n// p : point\n// c : center of skeleton\n// n : normal vector of plane\nfloat Circle(vec3 p,vec3 c,vec3 n, float r)\n{\n  float h = dot(p-c, n);\n  float m = sqrt(pow(length(p-c),2.) - pow(h,2.));\n  float l = m - r;\n  return sqrt(pow(h,2.) + pow(l,2.));\n}\n\n// Disc\n// p : point\n// c : center of skeleton\n// n : normal vector of plane\nfloat Disc(vec3 p,vec3 c,vec3 n, float r)\n{\n  float h = dot(p-c, n);\n  float m = sqrt(pow(length(p-c),2.) - pow(h,2.));\n  if(m < r){\n      return abs(h);\n  }\n  else \n  {\n      float l = m - r;\n      return sqrt(pow(h,2.) + pow(l,2.));\n  }\n}\n\n// Torus\n// p : point\n// c : center\n// major : major radius\n// minor : minor radius\n// used help from https://youtu.be/Ff0jJyyiVyw\n\nfloat Torus(vec3 p, vec3 c, float minor, float major )\n{\n  vec2 d = vec2(length(p.xz - c.xz) - minor,p.y);\n  return length(d) - major;\n}\n\n// TorusWithNormal\n// p : point\n// c : center\n// n : normal\n// major : major radius\n// minor : minor radius\n\nfloat TorusWithNormal(vec3 p, vec3 c, vec3 n, float minor, float major )\n{\n  return Circle(p, c, n, minor) - major; \n}\n\n// Capsule\n// p : point\n// a : point a of segment\n// b : point b of segment\n// r : radius of capsule\n\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n  float d;\n  vec3 u = normalize(b - a);\n  if (dot(p - a, u) < 0.){\n      d = length(p - a);\n  }\n  else if (dot(p - b, u) > 0.){\n      d = length(p - b);\n  }\n  else{\n      float l = dot(p - a, u);\n      d = sqrt(pow(length(p - a), 2.) - pow(l, 2.));\n  }\n  return d - r;\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Inter(float a,float b)\n{\n  return max(a,b);\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Diff(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Blend Offset\n// a,b : field function of left and right sub-trees\n// r : blend radius\nfloat offset(float a, float b, float r)\n{\n  float h = max(r - abs(a-b),0.) / r;\n  return (1./6.) * r * pow(h, 3.);\n}\n\n// Blend\n// a,b : field function of left and right sub-trees\n// r : blend radius\n\nfloat Blend(float a, float b, float r)\n{\n    return Union(a,b) - offset(a,b,r);\n}\n\n// Transformations\n\n// Translation\n// p : point\n// t : translation vector\n\nvec3 Translation(vec3 p, vec3 t) {\n    return p - t;\n}\n\n// Rotation X\n// p : point\n// theta: rotation radian in degree\n\nvec3 RotationX(vec3 p, float theta) {\n    return p * Rx(radians(theta));\n}\n\n// Rotation Y\n// p : point\n// theta: rotation radian in degree\n\nvec3 RotationY(vec3 p, float theta) {\n    return p * Ry(radians(theta));\n}\n\n// Rotation Z\n// p : point\n// theta: rotation radian in degree\n\nvec3 RotationZ(vec3 p, float theta) {\n    return p * Rz(radians(theta));\n}\n\n// Scale\n// p : point\n// sf : scale factor\n\nvec3 Scale(vec3 p, float sf) {\n    return p * 1./sf;\n}\n\n// Cylinder\n// p : point\n// a : point a, extremity of cylinder\n// b : point b, extremity of cylinder\n// r : radius\n\nfloat Cylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    float p1 = Plane(p, a, normalize(a - b));\n    float p2 = Plane(p, b, normalize(b - a));\n    return Inter(Inter(Capsule(p, a, b, r), p2), p1);\n}\n\n// Cube\n// p : point\n// c : center of cube\n// l : lenght of square's side\n\nfloat Cube(vec3 p,vec3 c,float l)\n{\n  l /= 2.;\n  float v = Plane(p, vec3(c.x,c.y,c.z - l), vec3(0,0,-1));\n  v = Inter(v, Plane(p, vec3(c.x,c.y,c.z), vec3(0,0,1)));\n  v = Inter(v, Plane(p, vec3(c.x,c.y - l,c.z), vec3(0,-1,0)));\n  v = Inter(v, Plane(p, vec3(c.x,c.y,c.z), vec3(0,1,0)));\n  v = Inter(v, Plane(p, vec3(c.x - l,c.y,c.z), vec3(-1,0,0)));\n  v = Inter(v, Plane(p, vec3(c.x,c.y,c.z), vec3(1,0,0)));\n  return v;\n}\n\n// SphereLine\n// p : point\n// ic : initial center of the first sphere\n// nb : number of sphere on the line\n// r : radius of the sphere\n\nfloat SphereLine(vec3 p, vec3 ic, int nb, float r){\n    float v = 10000.0;\n    v = Sphere(p, ic, r);\n    for (int i=1; i < nb; i++){\n        ic.x += r + 1.;\n        v = Blend(v, Sphere(p, ic, r), 1.);\n    }\n    return v;\n}\n\n// IceCream\n// p : point\n\nfloat IceCream(vec3 p){\n    float v = Cylinder(p, vec3(-5,-5,-5), vec3(-5,-5,-4.75), 4.);\n    v = Blend(v, Capsule(p, vec3(-5,-5,-4), vec3(-5,-5,1), 0.3), 4.5);\n    v = Union(v, Sphere(p, vec3(-5,-5,5), 4.));\n    v = Diff(v, Sphere(p, vec3(-5,-5,5), 3.75));\n    v = Diff(v, Plane(p, vec3(-5,-5,5), vec3(0,0,-1)));\n    v = Union(v, Sphere(p, vec3(-5,-3.5,5), 2.));\n    v = Union(v, Sphere(p, vec3(-4,-5.5,5.5), 2.));\n    v = Union(v, Sphere(p, vec3(-6.5,-5,5), 2.));\n    v = Union(v, Cylinder(p, vec3(-5,-5,5), vec3(-5,-3,12), 0.15));\n    return v;\n}\n\n\n// Atom\n// p : point\n\nfloat Atom(vec3 p){\n    float v = 10000.;\n    v = Union(v, Torus(RotationX(p, 90.), vec3(0,0,0), 15., 0.2));\n    v = Union(v, Torus(RotationX(p, -40.), vec3(0,0,0), 14., 0.2));\n    v = Union(v, Torus(RotationX(p, 40.), vec3(0,0,0), 13., 0.2));\n    v = Union(v, Sphere(p, vec3(0,-1,0), 2.));\n    v = Blend(v, Sphere(p, vec3(0,1,0), 2.), 0.3);\n    v = Blend(v, Sphere(p, vec3(1,0,1), 2.), 0.3);\n    v = Blend(v, Sphere(p, vec3(1,0,-1), 2.), 0.3);\n    v = Blend(v, Sphere(p, vec3(-1,0,-1), 2.), 0.3);\n    v = Blend(v, Sphere(p, vec3(-1,0,1), 2.), 0.3);\n    v = Blend(v, Sphere(p, vec3(-8,12.5,0), 1.), 0.3);\n    v = Blend(v, Sphere(p, vec3(8,-12.5,0), 1.), 0.3);\n    v = Blend(v, Sphere(p, vec3(1,9,-10.5), 1.), 0.3);\n    return v; \n}\n\n\n\n\n// MengerSponge\n// p : point\n\nfloat MengerSponge(vec3 p){\n  float v = 10000.;\n  float l = 20.;\n  v = Union(v, Cube(p, vec3(0,0,0), l * 2.));\n  float it=0.; //number of iter\n  float nbc = 1.;\n  while(it < 2.){\n      l/= 3.;\n      for (float i=0.; i<nbc; i++){\n          for (float j=0.; j<nbc;j++){\n              for (float k=0.; k<nbc; k++){\n                  float offset = - l*nbc;\n                  v = Diff(v, Cube(p, vec3(0, offset*i - l, - l + offset*k), l*2.));//front\n                  v = Diff(v, Cube(p, vec3(-l + offset*j, offset*i - l,-l + offset*k), l*2.));//center\n                  v = Diff(v, Cube(p, vec3(-l*2. + offset*j, offset*i - l, -l + offset*k), l*2.));//back\n                  v = Diff(v, Cube(p, vec3(-l + offset*j, offset*i - l, 0), l*2.));//top\n                  v = Diff(v, Cube(p, vec3(-l + offset*j, -l*2. + offset*i, -l + offset*k), l*2.));//left\n                  v = Diff(v, Cube(p, vec3(-l + offset*j, offset*i - l, -l*2. + offset*k), l*2.));//bottom\n                  v = Diff(v, Cube(p, vec3(-l + offset*j, 0. + offset*i, -l + offset*k), l*2.));//right\n              }\n          }\n      }\n      nbc *= 3.;\n      it++;\n  }\n  return v;\n}\n\n// Potential field of the object\n// p : point\n\nfloat object(vec3 p)\n{\n  /*\n  float v = IceCream(Translation(p, vec3(10,10,0)));\n  v = Union(v, 1./2. * IceCream(Scale(p, 2.)));\n  */\n  //float v = Atom(p);\n  float v = MengerSponge(p);\n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,150.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}