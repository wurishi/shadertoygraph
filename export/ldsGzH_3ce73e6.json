{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float mod289(float x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 perm(vec4 x)\n{\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat noise3d(vec3 p)\n{\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n\t\n    vec3 water[4];\n    vec3 fire[4];\n\n    mat3 r = mat3(0.36, 0.48, -0.8, -0.8, 0.60, 0.0, 0.48, 0.64, 0.60);\n    vec3 p_pos = r * vec3(uv * vec2(16.0, 9.0), 0.0);\n    vec3 p_time = r * vec3(0.0, 0.0, iTime * 2.0);\n\n    /* Noise sampling points for water */\n    water[0] = p_pos / 2.0 + p_time;\n    water[1] = p_pos / 4.0 + p_time;\n    water[2] = p_pos / 8.0 + p_time;\n    water[3] = p_pos / 16.0 + p_time;\n\n    /* Noise sampling points for fire */\n    p_pos = 16.0 * p_pos - r * vec3(0.0, mod289(iTime) * 128.0, 0.0);\n    fire[0] = p_pos / 2.0 + p_time * 2.0;\n    fire[1] = p_pos / 4.0 + p_time * 1.5;\n    fire[2] = p_pos / 8.0 + p_time;\n    fire[3] = p_pos / 16.0 + p_time;\n\n    mat2 rot = mat2(cos(iTime), sin(iTime), -sin(iTime), cos(iTime));\n\n\tvec2 poszw = rot * uv;\n\n\t/* Dither the transition between water and fire */\n    float test = poszw.x * poszw.y + 1.5 * sin(iTime);\n    vec2 d = vec2(16.0, 9.0) * uv;\n    test += 0.5 * (length(fract(d) - 0.5) - length(fract(d + 0.5) - 0.5));\n\n    /* Compute 4 octaves of noise */\n    vec3 points[4];\n\tpoints[0] = (test > 0.0) ? fire[0] : water[0];\n\tpoints[1] = (test > 0.0) ? fire[1] : water[1];\n\tpoints[2] = (test > 0.0) ? fire[2] : water[2];\n\tpoints[3] = (test > 0.0) ? fire[3] : water[3];\n\t\n    vec4 n = vec4(noise3d(points[0]),\n                  noise3d(points[1]),\n                  noise3d(points[2]),\n                  noise3d(points[3]));\n\n    vec4 color;\n\n    if (test > 0.0)\n    {\n        /* Use noise results for fire */\n        float p = dot(n, vec4(0.125, 0.125, 0.25, 0.5));\n\n        /* Fade to black on top of screen */\n        p -= uv.y * 0.8 + 0.25;\n        p = max(p, 0.0);\n        p = min(p, 1.0);\n\n        float q = p * p * (3.0 - 2.0 * p);\n        float r = q * q * (3.0 - 2.0 * q);\n        color = vec4(min(q * 2.0, 1.0),\n                     max(r * 1.5 - 0.5, 0.0),\n                     max(q * 8.0 - 7.3, 0.0),\n                     1.0);\n    }\n    else\n    {\n        /* Use noise results for water */\n        float p = dot(abs(2.0 * n - 1.0),\n                      vec4(0.5, 0.25, 0.125, 0.125));\n        float q = sqrt(p);\n\n        color = vec4(1.0 - q,\n                     1.0 - 0.5 * q,\n                     1.0,\n                     1.0);\n    }\n\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldsGzH","date":"1363020394","viewed":1263,"name":"LOL CRAP","username":"sam","description":"Quick and dirty value noise effect.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise"],"hasliked":0,"parentid":"","parentname":""}}