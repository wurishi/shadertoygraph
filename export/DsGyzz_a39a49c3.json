{"ver":"0.1","info":{"id":"DsGyzz","date":"1695696854","viewed":27,"name":"圆盘旋转","username":"xuyaomin","description":"圆盘旋转","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float PI = 3.14159265359;\n\nfloat slope(float angleRadian) {\n    return tan(angleRadian);\n}\n\nfloat getAngleDegree(vec2 p1, vec2 p2) {\n    float dx = p1.x - p2.x;\n    float dy = p1.y - p2.y;\n    float angleRadians = atan(dy, dx);\n    float angleDegrees = degrees(angleRadians);\n    if (angleDegrees < 0.0) angleDegrees += 360.0;\n    return angleDegrees;\n}\n\nfloat getAngleRadian(vec2 p1, vec2 p2) {\n    float dx = p1.x - p2.x;\n    float dy = p1.y - p2.y;\n    float angleRadians = atan(dy, dx);\n    return angleRadians;\n}\n\n/*\nvec4 getPoints(vec2 p, float r, float angleRadian) {\n    float x1 = p.x + r * cos(angleRadian);\n    float y1 = p.y + r * sin(angleRadian);\n    float x2 = p.x + r * cos(angleRadian + PI);\n    float y2 = p.y + r * sin(angleRadian + PI);\n    return vec4(x1, y1, x2, y2);\n}\n*/\n\nvec4 getPoints(vec2 p, vec2 m, float r) {\n\n    vec2 pm         = m - p;\n    vec2 pmNorm     = normalize(pm);\n    vec2 pmNormLeft = vec2(-pmNorm.y, pmNorm.x);\n    vec2 p1         = p + pmNormLeft * r;\n    vec2 p2         = p - pmNormLeft * r;\n    return vec4(p1, p2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0, 1.0, 0.0);\n\n    float d = smoothstep(0.2, 0.18, length(uv));\n    col *= d;\n\n    vec2 p = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float angleRadian = getAngleRadian(p, vec2(0., 0.)) + radians(90.0);\n    //vec4 points = getPoints(vec2(.0, .0), .2, angleRadian);\n    vec4 points = getPoints(vec2(.0, .0), p, 0.2);\n\n    float d1 = smoothstep(0.02, 0.01, length(uv - vec2(points.xy)));\n    float d2 = smoothstep(0.02, 0.01, length(uv - vec2(points.zw)));\n    col += vec3(1., .5, .0) * d1 + vec3(1., .5, .0) * d2;\n\n    /*\n    float a = slope(angleRadian);\n    float y = a * uv.x;\n    if (angleRadian > 0.5 * PI && angleRadian < 1.5 * PI) {\n        if (uv.y > y) {\n            col = vec3(.0);\n        } \n    } else {\n        if (uv.y < y) {\n            col = vec3(.0);\n        }\n    }\n    */\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}