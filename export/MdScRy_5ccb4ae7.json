{"ver":"0.1","info":{"id":"MdScRy","date":"1492541192","viewed":701,"name":"No more bass needed","username":"Eybor","description":"The shader I wrote for the shader showdown semifinals at Revision 2017\n\nSorry for the crappy and oversaturated colors","likes":4,"published":3,"flags":64,"usePreview":0,"tags":["3d","raymarching","ribbons","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lsS3Wd","filepath":"https://soundcloud.com/edmtunestv/thefatrat-unity","previewfilepath":"https://soundcloud.com/edmtunestv/thefatrat-unity","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotation(vec2 p, float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * p;\n}\n\nfloat r1(vec3 p)\n{\n    p.xy += vec2(sin(p.z+ iTime), cos(p.z + iTime)); \n    return length(p.xy - vec2(-6., 3.)) - .5;\n}\n\nfloat r2(vec3 p)\n{\n    p.xy += vec2(sin(p.z+ iTime), cos(p.z + iTime));\n    return length(p.xy - vec2(6., 3.)) - .5;\n}\n\nfloat r3(vec3 p)\n{\n    p.xy += vec2(sin(p.z+ iTime), cos(p.z + iTime));\n    return length(p.xy - vec2(0., 10.)) - .5;\n}\n\nfloat map(vec3 p, float bass)\n{\n    float d = length(p-vec3(0., 5., 0.)) - 5.;\n    vec3 p2 = p;\n    p2.xz = rotation(p2.xz, +1.+2.*bass+iTime+p2.y*.1-5.);\n    p2 = mod(p2, vec3(1.))-vec3(.5);\n    d = max(d, -(length(p2) - .45*bass));\n    return min(r3(p),min(r2(p),min(r1(p), min(p.y, d))));\n}\n\nvec3 rm(vec3 o, vec3 rd, float bass)\n{\n    vec3 p = o;\n    \n    for(int i = 0; i < 128; ++i)\n    {\n        float d = map(p, bass);\n        p += d*rd;\n    }\n    \n    return p;\n}\n\nvec3 gn(vec3 p, float bass)\n{\n    vec2 e = vec2(0., .001);\n    return normalize(vec3(map(p-e.yxx, bass) - map(p+e.yxx, bass),\n                          map(p-e.xyx, bass) - map(p+e.xyx, bass),\n                          map(p-e.xxy, bass) - map(p+e.xxy, bass)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 rd = normalize(vec3((-1.+2.*fragCoord.xy/iResolution.xy)*vec2(iResolution.x/iResolution.y, 1.), -1.));\n\t\n    float bass = 0.;\n    \n    for(float f = 0.; f <=.25; f += 1./100.)\n    {\n        bass += texture(iChannel0, vec2(f, .25)).x;\n    }\n    \n    bass *= .1;\n    \n    vec3 o = vec3(0., 5., 8.);\n    \n    vec3 p = rm(o, rd, bass);\n    \n    vec3 co = (1.-distance(p, o)*.004)*vec3(dot(gn(p, bass), normalize(vec3(1., -2., -6.))));\n    \n    co += vec3(.1, .1, 1.)/pow(.1+r1(p), 2.)*bass*5.;\n    co += vec3(1., 1., .1)/pow(.1+r2(p), 2.)*bass*5.;\n    co += vec3(1., .1, 1.)/pow(.1+r3(p), 2.)*bass*5.;\n        \n    fragColor = vec4(co, 1.0);\n}","name":"Image","description":"","type":"image"}]}