{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Gravitation lensing simulation using DF-tracing\n// by Tomkh '20.01.2015\n// http:/moonedit.com/tom\n\n#define ptcnt 12\nvec3 pt[ptcnt];\nfloat ptrad = 0.1;\nfloat tim;\n\nvoid setup_scene()\n{\n    float t0 = tim*.5;\n    for(int i=0; i<ptcnt; ++i) \n    {\n        float t = t0 + float(i)*1.7;\n        \n        // Simple animation of spheres:\n        pt[i].x = cos(t)*.5;\n        pt[i].y = sin(t*1.1)*.5;\n        \n        // Put 6 sphere in front (lens) and 6 in the back:\n        pt[i].z = ((i*2<ptcnt)?4.0:16.0) + cos(t*2.1);\n    }\n}\n\nvec4 df(vec3 p)\n{\n    float dmin = 1e32;\n    vec3 n = vec3(0,0,0);\n    for(int i=0; i<ptcnt; ++i) \n    {\n        vec3 dp = pt[i] - p;\n        float d = dot(dp,dp);\n        \n        // Here is the key to lensing effect, approx. gravity field:\n        n += dp/d;\n        \n        dmin = min(d, dmin);\n    }\n    return vec4(n,sqrt(dmin));\n}\n\nvec4 tex(vec3 p)\n{\n    float dmin = 1e32;\n    vec3 dpmin;\n    for(int i=0; i<ptcnt; ++i) \n    {\n        vec3 dp = pt[i] - p;\n        float d = dot(dp,dp);\n        if (d < dmin) \n        {\n            dmin = d;\n            dpmin = dp;\n        }\n    }\n    float d = sqrt(dmin);\n    return vec4(dpmin/d,d);\n}\n\nvec4 trace(vec3 p, vec3 n)\n{\n    float falloff = 1.0 - (1.0 - n.z)*16.0;\n    \n    // Lensing animation:\n    float sc = sin(tim*.1);\n    sc *= sc;\n    sc *= .008;\n    \n    // DF tracing with lens-effect here:\n    vec4 dn;\n    float lit = 0.0;\n    for(int k=0; k<64; ++k)\n    {\n        dn = df(p);\n        float d = dn.w;\n        float surf_dist = d - ptrad;\n        lit += 0.003/(d + 0.1);\n        \n        // Move half the distance only:\n        float f = surf_dist*.5;\n        p += n*f;\n        \n        // Modify ray direction by gravity field:\n        n = normalize(n + dn.xyz*f*sc);\n    }\n    \n    // Shading:\n    vec4 norm = tex(p);\n    float shade = max(0.0, 1.0 - (norm.w - ptrad)*256.0);\n    vec4 col = texture(iChannel1, norm.xy*0.1);\n    vec4 bkg = texture(iChannel1, n.xy*2.0)*falloff;\n    return vec4(vec3(lit,lit,lit*0.6) - vec3(0.0,col.x*col.x*0.5,col.x)*shade,1.0)\n         + vec4(bkg.xy,bkg.z*2.0,0.0)*0.2*(1.0-shade);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Hold mouse button to stop motion / review time:\n    tim = (iMouse.z > .5) ? iMouse.x * 20.0 / iResolution.x : iTime;\n    \n    setup_scene();\n\tvec2 uv = (fragCoord.xy - iResolution.xy*0.5) / iResolution.x;\n    fragColor = trace(vec3(0,0,0), normalize(vec3(uv,1)));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tsGDH","date":"1421719948","viewed":638,"name":"Solar distortion","username":"tomkh","description":"I was bored enough to try a simple hack to distance-field tracing to emulate sort of gravitational lensing effect (i.e. like here http://hubblesite.org/gallery/album/galaxy/cluster/pr2009025ap/). A quick and dirty implementation.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","gravitylensing"],"hasliked":0,"parentid":"","parentname":""}}