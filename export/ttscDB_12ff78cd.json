{"ver":"0.1","info":{"id":"ttscDB","date":"1593008776","viewed":360,"name":"NaN poisoning","username":"noby","description":"A simple demonstration of cascading NaN (not-a-number) values \"corrupting\" a buffer. This is especially problematic with any kind of feedback effects.\n\nhttps://en.wikipedia.org/wiki/NaN","likes":3,"published":1,"flags":32,"usePreview":1,"tags":["glitch","bug","corruption","nan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Relevant part of the implementation is in Buffer A.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = sqrt(texelFetch(iChannel0, ivec2(fragCoord), 0));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = -1.0+2.0*fragCoord/iResolution.xy;\n    fragColor = pow(texture(iChannel0, 0.5+0.5*uv + vec2(sin(iTime*0.51), cos(iTime*0.43))), vec4(2));\n    \n    // Every ~1 second \"corrupt\" bright parts of the buffer with NaNs.\n    if(iFrame % 60 == 30){\n        float NaN = intBitsToFloat(0x7FFFFFFF);\n        if(length(fragColor.rgb) >= 1.0)\n        \tfragColor.rgb = vec3(NaN);\n    }\n    \n    // Feedback \"spreads\" the NaNs.\n    fragColor = mix(fragColor, texture(iChannel1, 0.5+0.5*(uv*0.99) ), 0.9);\n}","name":"Buffer A","description":"","type":"buffer"}]}