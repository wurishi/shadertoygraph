{"ver":"0.1","info":{"id":"ctfXzr","date":"1674166385","viewed":284,"name":"Toki ingame Ice Palace music","username":"swiety","description":" Use wavetable and sample technique for playing sound based on original amiga player routine.\n Long compilation time because a lot of sample data , patterns, song ","likes":11,"published":1,"flags":8,"usePreview":1,"tags":["sound","sample","tracker","chiptune","wavetable","toki","pumatracker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 InsideTrian(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float xp, float yp) {\n\n float tmp;\n float curz;\n \n \n if (y1>y3) {\n  tmp=y3;\n  y3=y1;\n  y1=tmp;\n   \n  tmp=x3;\n  x3=x1;\n  x1=tmp;\n  \n  tmp=z3;\n  z3=z1;\n  z1=tmp; \n   \n  }\n  \n  if (y1>y2) {\n  tmp=y2;\n  y2=y1;\n  y1=tmp;\n   \n  tmp=x2;\n  x2=x1;\n  x1=tmp;\n  \n  tmp=z2;\n  z2=z1;\n  z1=tmp; \n  \n  } \n    \n  if (y2>y3) {\n  tmp=y2;\n  y2=y3;\n  y3=tmp;\n  \n  tmp=x2;\n  x2=x3;\n  x3=tmp;\n  \n  tmp=z2;\n  z2=z3;\n  z3=tmp; \n  }\n  \n  if ((yp<y1)||(yp>y3)) return vec2(0.0,0.0);\n\n// yp is beetween y1 a y3\n\n float       xw1 = x1+((x3-x1)/(y3-y1))*(yp-y1);\n float       dz1 = z1+((z3-z1)/(y3-y1))*(yp-y1);\n \n float xw2,dz2;\n\n if (yp>y2)  { xw2 = x2+((x3-x2)/(y3-y2))*(yp-y2);\n               dz2 = z2+((z3-z2)/(y3-y2))*(yp-y2);\n             }\n \n else        { xw2 = x1+((x2-x1)/(y2-y1))*(yp-y1);\n               dz2 = z1+((z2-z1)/(y2-y1))*(yp-y1);\n             }\n \n curz = dz1 + (dz2-dz1)/(xw2-xw1)*(xp-xw1);\n  \n return vec2(float(((xw1<=xw2) && (xw1<=xp)&&(xw2>=xp))||((xw1>xw2) && (xw2<=xp)&&(xw1>=xp))),curz); \n }\n\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n\nfloat noiseg( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nvec3 tiles(float x, float y)\n\n{\n vec2 timer;\n\n timer.x = x*273.f;\n timer.y = y*334.f;\n \n y=mod((y-0.02),0.1f);\n \n if (mod (y ,0.05)<0.01) return vec3(0.2f,0.2f,0.2f);\n \n if (y>=0.05) x=x+0.05;\n \n x=mod(x,0.1);\n \n if (x<0.01) return vec3(0.2f,0.2f,0.2f);\n \n\n \n float grays = noiseg(timer)*0.3f+0.64f;\n \n return vec3(grays,grays,grays);\n \n \n}\n\n\nvec3 kamienie(float x, float y)\n{\n vec2 timer;\n\n timer.x = x*73.f;\n timer.y = y*134.f;\n\n float grays = noiseg(timer)*0.6f+2.2f;\n\n return vec3((x+0.05f)*grays,0.0f,0.0f);\n}\n\n\nint Tokilogo(in vec2 uv)\n\n\n{\n// T \n\n  vec2 trn;\n  \n\n\n  vec2 vT1 = uv-vec2(0.485,0.6725+0.046f);\n  vec2 vH1 = vec2(0.1,0.125);\n  \n  \n  \n  if ((abs(vT1.x)<0.167) && (abs(vT1.y))<0.05f) return 1;\n  \n  \n  if ((abs(vT1.x)<0.05f) && (abs(uv.y-0.575f))<0.195f) return 1;\n  \n// O \n  \n  vec2 leto = vT1+vec2(-0.26f,0.20f);\n  \n  if ((length(leto)>0.055f && (length(leto))<0.142f)) return 1;\n  \n\n// K\n\n\n  if ((abs(uv.x-1.01f)<0.05f) && (abs(uv.y-0.575f))<0.195f) return 1;\n\n  trn = (InsideTrian(1.18f,0.77f,0.f,1.28f,0.77f,0.0f,0.96,0.55f,0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) return 1;\n\n\n  trn = (InsideTrian(1.28f,0.77f,0.f,1.06f,0.64f,0.0f,1.06f,0.55f,0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) return 1;\n\n\n  trn = (InsideTrian(1.18f,0.38f,0.f,1.28f,0.38f,0.0f,0.96f,0.65f,0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) return 1;\n  \n  trn = (InsideTrian(1.28f,0.38f,0.f,1.06f,0.65f,0.0f,1.06,0.55f,0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) return 1;\n  \n\n// i\n\n\n  if ((abs(uv.x-1.365f)<0.05f) && (abs(uv.y-0.575f))<0.195f) return 1;\n  return 0;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// Normalized pixel coordinates (from 0 to 1)\n \n  vec2 uv = fragCoord/iResolution.xy;\n\n  float Ar = iResolution.x/iResolution.y;\n\n  uv.x= uv.x*Ar;\n  \n vec2 timer1;\n\n timer1.x = uv.x*273.f;\n timer1.y = uv.y*334.f;\n  \n  float rnd = 0.95f+noiseg(timer1)*0.2;\n   \n  vec3 col = vec3(0.1f,0.1f,0.86f);\n  \n  if (uv.y<0.44 && uv.y>0.17f) col = vec3((uv.y/1.7f*rnd),(uv.y/1.7f*rnd),0.8f*(uv.y+0.58)*rnd);\n  if (uv.y<=0.17) col =vec3(0.f,0.4f,0.0f);\n  \n// palma - from sunset \n// Created by inigo quilez - iq/2014\n\n//    vec3 col;\n \tvec2 p = fragCoord / iResolution.xy;\n\tvec2 q = p - vec2(0.94,0.93);\n\t\n    float r = 0.1 + 0.076*cos( atan(q.y,q.x)*10.0 + 20.0*q.x + 1.0);\n    \n    \n    if (abs(q.x+0.14*sin(2.0*q.y))<0.01) col = vec3(0.4f,0.3f,0.0f);\n    \n    \n    \n\t\n\t\n\t\n\tif (smoothstep( r, r+0.01, length( q ))<0.01) col = vec3(0.f,0.7f*rnd*(1.0f-r),0.0f);\n  \n  \n  \n    q = p - vec2(0.88,0.80);\n\t\t\n\tr = 0.06 + 0.036*cos( atan(q.y,q.x)*10.0 + 20.0*q.x + 1.0);\n    if (abs(q.x+0.14*sin(2.4*q.y))<0.01 && uv.y<0.83f ) col = vec3(0.4f,0.3f,0.0f);\n    \n\tif (smoothstep( r, r+0.01, length( q ))<0.01 ) col = vec3(0.f,0.7f*rnd*(1.0f-r),0.0f);\n  \n  \n  \n  \n  vec2 trn;\n \n// draw background\n\n\n\n timer1.x = uv.x*273.f;\n timer1.y = uv.y*334.f;\n \n rnd = noiseg(timer1)*0.008;\n\n\n\n\n  trn = (InsideTrian(0.40f,0.44f,0.f,1.465f,0.44f,0.0f,1.0f,(0.86f+rnd),0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) col = vec3(0.8f,0.0f,0.65f);\n\n  trn = (InsideTrian(1.00f,0.86f,0.f,0.9f,0.86f,0.0f,0.5f,(0.44+rnd*2.0f),0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) col = vec3(0.8f,0.0f,0.65f);\n  \n\n  trn = (InsideTrian(0.04f,0.44f,0.f,0.52f,0.44f,0.0f,0.31,(0.52f+rnd),0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) col = vec3(0.8f,0.0f,0.7f);\n\n  trn = (InsideTrian(0.40f,0.44f,0.f,0.88f,0.44f,0.0f,0.675,(0.72f+rnd),0.0f, uv.x , uv.y)); \n  if (trn.x==1.f) col = vec3(0.7f,0.0f,0.6f);\n\n\n\n  \n  \n  \n// draw logo\n\n\n if (int(Tokilogo(uv+vec2(-0.06f,0.1f)))==1) col = vec3(0.17f,0.17f,0.17f);\n \n \n if (int(Tokilogo(uv+vec2(0.00f,0.1f)))==1) col = tiles(uv.x,uv.y);\n \n \n \n \n\n\n// ramka\n\n\n  if ((0.065f/(uv.x))>(1.059-(uv.y*0.96f))) col = kamienie(uv.x,uv.y);\n  if (uv.y<0.07) col = kamienie(uv.x,uv.y);\n  \n  \n  \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// toki7 - Amiga Toki game ,Ice Palace music\n// Amiga pumatracker based song, rewrtited pattern , song\n\n// Use wavetable and sample routine for playing sound based on original amiga player routine.\n// It uses a technique similar to raycasting to find a previously played note in a pattern and song\n// Then it analyzes all changes, especially the frequency of the instruments in order to determine the currently played sample, \n// it has the task of tracking the frequency changes in order to ensure the continuity of the wave of the instrument being played\n// Instrument's envelopes, arpergio and wave chanage are modelled mathematically from the original instrument descriptions.\n// By Krzysztof Święcicki - Swiety/Zelax (swiety93@wp.pl)\n\n\n\n//PLR_period - amiga paula frequency table for notes \n\nint plrperiod[74] = int[74] (    \n  0x0000,0x1AC0,0x1940,0x17D0,0x1680,0x1530,0x1400,0x12E0,0x11D0,0x10D0,0x0FE0,0x0F00,0x0E28,0x0D60,0x0CA0,0x0BE8,0x0B40,0x0A98,0x0A00,\n  0x0970,0x08E8,0x0868,0x07F0,0x0780,0x0714,0x06B0,0x0650,0x05F4,0x05A0,0x054C,0x0500,0x04B8,0x0474,0x0434,0x03F8,0x03C0,0x038A,0x0358,\n  0x0328,0x02FA,0x02D0,0x02A6,0x0280,0x025C,0x023A,0x021A,0x01FC,0x01E0,0x01C5,0x01AC,0x0194,0x017D,0x0168,0x0153,0x0140,0x012E,0x011D,\n  0x010D,0x00FE,0x00F0,0x00E2,0x00D6,0x00CA,0x00BE,0x00B4,0x00AA,0x00A0,0x0097,0x008F,0x0087,0x007F,0x0078,0x0071,0x0000);\n\n// bass drum \n \nint Sample1[310] = int[310] (\n\n  0x00000706,0x06060606,0x06060707,0x07070705,0x0E060320,0x00FF2806,0x080C3328,0xE3150C53,0x402B30DC,0xDF2B2D45,0x38434049,0x57583C51,\n  0x58253F44,0x2C290325,0x0D04F8F3,0xEADEDED0,0xCFC4BDB8,0xADACA69E,0x9C919695,0x85848180,0x81808080,0x80808080,0x80808083,0x8D91979D,\n  0xA2A7ACB1,0xB6BEC6CA,0xCFD2D6D9,0xDFF2060B,0x17242D38,0x3D454D55,0x5B62666B,0x75787B7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n  0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7C7771,0x6B666055,0x524D4844,0x403B3430,0x2C292623,0x201C180E,0x00F5E7E5,0xD9D0C9C2,0xB8B4B4AD,\n  0xABA09E9E,0x96949590,0x94908E8D,0x8B8D8C8B,0x8D8B8E8C,0x908C8E8D,0x908F9190,0x94909496,0x97999A9C,0x9B9D9F9E,0xA19FA5AA,0xA9ADB1B2,\n  0xB0B6BBC0,0xBFC1C2C3,0xCCC6CDCC,0xD7D7D7E2,0xE4DBE9EA,0xF5F6F9FB,0xF802040C,0x1012151C,0x1D23322F,0x30313749,0x4045514D,0x5A585D60,\n  0x616A6A72,0x73787B7B,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7A7B,0x797B776E,0x6E6E6963,\n  0x645E5D58,0x57544B51,0x484C4644,0x3641303B,0x332A2627,0x251D191E,0x16131009,0x0805FEFA,0xFBF4EDEC,0xEBE9E8E5,0xD9D5D6CC,0xCDCCC6CC,\n  0xBCC0BDB4,0xB6B0B2AB,0xADA7A6A5,0xA49F9EA0,0x999B979B,0x95999398,0x92959591,0x97929395,0x94949895,0x98969C98,0x9D9F9D9F,0xA1A1A7A4,\n  0xABAAACB0,0xB3B5B8B8,0xBEBCC1C8,0xC3CCCDC9,0xD4D3D5D7,0xDCDEE1DE,0xE3E5E9EB,0xF0ECF3F7,0xF4F7F9FD,0x00030206,0x040A0A0A,0x0F0F1414,\n  0x15191919,0x1F1C1E22,0x22232528,0x262B2F2B,0x2F2E332F,0x312F3532,0x35343239,0x32383737,0x3B353B39,0x3D3A3D3B,0x3B3D3D3E,0x44414242,\n  0x44404143,0x43454348,0x44434747,0x444A4447,0x46474744,0x45464745,0x48444444,0x48424644,0x44444345,0x41454140,0x423B423B,0x3C3B3B37,\n  0x39383438,0x30343131,0x302E2A29,0x282A2522,0x251F221F,0x1B1E1618,0x16131210,0x110D0C08,0x09050701,0x03FE02FE,0xFBFEF7FC,0xF5F9F7F4,\n  0xF4F3F2F1,0xF2F0EEEE,0xF1ECECEC,0xE9E9E9E9,0xE8E5E9E6,0xE9E3E8E4,0xE6E3E4E3,0xE4E4E0E2,0xE3E2E1E4,0xE0E4E0E1,0xE3E1E3E0,0xE2E3E2E2,\n  0xE3DFE3E0,0xE1E3E2E2,0xE2E0E3E0,0xE3E1E0E3,0xE0E1E0E3,0xE1E2E1E4,0xE1E3E2E3,0xE5E1E5E2,0xE4E4E5E3,0xE6E3E6E5,0xE6E6E5E7,0xE7E7E9E7,\n  0xE9EAE9EB,0xECECECEE,0xEEEEF0EF,0xF0F2F1F4,0xF5F5F5F8,0xF6FAF8FB,0xFCFBFDFF,0xFF010200,0x06000707,0x08090A07,0x0F0D0E0F,0x0F111111,\n  0x15121615,0x17171916,0x1A19191D,0x1B1B1C1F,0x1D1D1C1F,0x201F1F1E,0x201F2021,0x211F2120,0x20211F21,0x21212020,0x21201F1F,0x1F1F1E1E,\n  0x1D1F1D1F,0x1E1E1E1E,0x1E1F201F,0x201E2020,0x1E201F1F,0x201F1F1E,0x1F1E1E1E,0x1E1D1D1C,0x1D1B1C1A,0x1A1A191A,0x18191818,0x17181516,\n  0x16151514,0x14141213,0x13111211,0x10110F10,0x0E0E0E0E,0x0D0D0D0C,0x0D0C0C0B,0x0C0B0B0A,0x0B0A0B0B,0x090B0A0A,0x0B0A0B0A,0x0B0B0B0B,\n  0x0B0B0B09,0x0B0A0C0B,0x0A0A0B0A,0x0A0A0A0A,0x09090809,0x08090909,0x09070907,0x08070809,0x07080707,0x06070606,0x05050403,0x02020101,\n  0x01FF0001,0xFEFF00FE,0xFFFEFDFD,0xFCFBFDFA,0xFAF9FBF9,0xF9F8F8F8,0xF8F7F7F6,0xF6F5F5F5,0xF5F5F4F4,0xF4F3F3F3,0xF2F2F3F1,0xF2F1F1F1,\n  0xF1F1F0F1,0xF1F1F0F1,0xF1F1F1F0,0xF1F1F1F2,0xF1F1F2F2,0xF3F2F3F3,0xF3F3F4F4,0xF5F5F5F6,0xF7F6F7F8,0xF8F9FAF9,0xFBFBFCFC,0xFDFFFF00,\n  0x00010102,0x03030405,0x05060607,0x0807090A,0x090B0B0B,0x0C0C0B0E,0x0D0D0E0E,0x0F0F100F,0x10111112,0x12131213,0x12141314,0x13141414,\n  0x16151516,0x16161616,0x16171616,0x16171717,0x17171818,0x18171919,0x19191A19,0x1A1A1A1A,0x1B1A1B1A,0x1A1B1A1A,0x1B1A1A1A,0x1A1A1A1A,\n  0x1A1A1919,0x19191918,0x18181717,0x17161615,0x16151514,0x14141313,0x12121211,0x10110F0F,0x0F0E0E0D,0x0C0C0A0A,0x0B090A08,0x08090806,\n  0x06060505,0x05050303,0x03030101,0x01020001,0x000000FF,0x00FFFFFE,0xFEFDFDFD,0xFCFCFCFC,0xFCFBFBFA,0x00000000);\n\n// hihat\n\nint Sample2[283] = int[283] (\n\n  0x000000FF,0x1005050A,0x05050013,0x01FD1608,0xF9041505,0x0205020B,0x0A000806,0x0700090E,0xF715FE0E,0xFF040A08,0xFE0B0407,0x05010B0C,\n  0xF50A1200,0x0F040BFB,0x0710FF00,0xFF14FA11,0xF60D10FD,0x050425DF,0x120F000B,0x10E926F9,0x0A0A09FC,0x010EF828,0xE01F0AF5,0x1C110EFB,\n  0x05E0202B,0xFB0057D2,0xEF3EF7E5,0x1710F6E5,0x1D201EDF,0xE837EF10,0x0FF7F4F1,0x002B2B1F,0xEB081FEC,0x2025EA00,0xE44FF8F4,0xFF00180D,\n  0x001037BF,0x321748D7,0x46D7C06F,0x1FE3EDC7,0x1028061F,0xD8FC0C02,0xFF07E8FF,0xFFEAEF18,0x3AE43FFB,0x3ABF0A28,0xFF0B0010,0x08D03F23,\n  0xE0272BED,0x26F1F3F3,0x609F1F02,0x11C71008,0xE7140E2B,0x07000FFA,0xEF20DB54,0xDD070B03,0x102203FD,0x48AC3057,0xD637D730,0xE0FF28CF,\n  0xE631E200,0x0B30EFE4,0x1634C23F,0xF912E637,0x20FF17FC,0x002F07E5,0x200A083B,0xEC23DFC0,0x4F00EF0E,0xFBFF2CF7,0x1FEFD220,0xF037CE03,\n  0x0C10DF4C,0xD70DE05B,0xC04F0633,0xC4341EFF,0x23C40F29,0xEF2CF0FF,0x1000F31C,0x17ACF848,0xEDC06700,0xEFDC60C9,0x4BB04F10,0xDF1E1DF2,\n  0xE73CE128,0xDF0A000A,0x1F13ED1B,0xEA18D04C,0xCC26E01D,0xF818FF08,0xFFE714F2,0xEF46E5F0,0x0F041720,0xCF2BED30,0x0FD957E8,0xF4FF280B,\n  0xC560BF14,0x0DF41BF8,0x071AE01F,0xFF200FC8,0x0B32ECEB,0xF433E8F7,0x28F03FB7,0x4BD4E73B,0x38C11FE0,0x49D2F930,0xFB08DB20,0xEF1A00E6,\n  0x1EFD101B,0xCF2027E7,0xE148D73A,0x00DF38F5,0xF810F222,0x1200F827,0xF42B14CF,0x0932EAFF,0x1E20E7D4,0x1F23D027,0x10D91B00,0x3AF3E54F,\n  0xE8FF160F,0xFB14FFE0,0x38CB131B,0x00C72220,0xE904FA2D,0xE8E42F00,0x010DEF30,0xFFE02F00,0xA77F901F,0x20FBF125,0x00FF003F,0xC8DF600F,\n  0x825F14BF,0x65B0FF50,0xCF1F00DF,0x60A34FE0,0xFFF03AE0,0xFF102FB7,0x1B002704,0xE10230DF,0x42E2FF18,0x3A902728,0x04F700EB,0x52E0F720,\n  0xCB3FF401,0x2FA455F8,0xFF08DF50,0xDF10001F,0xFB00EF2C,0xECFF20D0,0x2D16F01D,0xF920BF40,0xFBDF25FA,0x1509ED20,0xF82FE0FF,0x0835E5E7,\n  0x36EB10ED,0x2CFFC160,0x029B7F06,0xC027609D,0xFF5FD0FF,0x00F334CB,0x360FD837,0x00FB1CFF,0xE041E01B,0xE20A2FD8,0x0F20BF4C,0xDF22000F,\n  0x08DB3BF8,0xEF20FFFB,0x180FE01F,0xF817EC00,0xFF26F80F,0xE8240FF9,0xF91528CB,0x27ED1F08,0xCB2B1209,0xE71116F9,0x0C08FF1C,0xF8FF200A,\n  0xD70F30DB,0x24FBE54A,0xD8EF50D4,0x0EF540D7,0x1FF00E0F,0x18CF28FF,0x10EB013B,0xDAFF1100,0x070813F0,0xFF18EF2B,0xF00F06DF,0x50DB1CEB,\n  0x42DA0D20,0x03E60F0A,0x17E2FF20,0x02FDFC17,0x20F6EE3B,0x0000D73E,0x0BF4F710,0x0F15EB20,0xE7100B16,0xE925E922,0xE82FE41B,0x00070017,\n  0x1412E0FF,0x270809E7,0x102FE817,0x04FF11F6,0x17F80FFB,0x0D0614F0,0x0518FF08,0x12F9070A,0xFF07071C,0xEEFA1F05,0x08F613F0,0x1F09F42A,\n  0xE3040C27,0xE00D14F4,0x0718E045,0xE8FB20FF,0x10F90FF0,0x2CF0FF00,0x11EF1007,0x1CE717FA,0x080F1CDC,0x1A0E0DEA,0x12FA22E8,0x0B10F919,\n  0x05F80913,0x000708FF,0x16F61B00,0xF722F803,0x12FC0720,0xF807010C,0x05040B04,0xFA0B1BF8,0xEF30E707,0x20EE18F5,0x020D14F5,0x03110010,\n  0xEF24D54A,0xDA05031F,0xF0030FF0,0xFF30D313,0x2AFDD73A,0xF318F115,0xF32600EA,0x1B15F8EF,0x2807E217,0x1CF20A00,0x030B0518,0xEB0C050B,\n  0x10EA2100,0xF716FC0B,0x1DEA0517,0x0804F713,0x0FF8090B,0x031204FA,0x090DFF12,0xF710FF0A,0x09050208,0x09040FF8,0x1102030E,0x011100FF,\n  0x0A0C0BFA,0x0E05010E,0x07070107,0x0E010310,0x0204070C,0x0A00FF14,0xF0140807,0x04030703,0x10040203,0x0D10F515,0x0305090A,0x020A06FF,\n  0x15FC0D01,0x08030B0A,0x04040A02,0x0713FC07,0x0A030C03,0x0607060C,0x00000000);\n\n// snare drum\n\nint Sample3[406] = int[406] (\n\n  0x00000000,0x86878686,0x86868686,0x86868585,0x85858584,0xE07F407F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7FA0BF7F,0x7F7F8584,0x0086852F,\n  0x848485EF,0x85847F40,0xBF7F7F7F,0x7F6B7F7F,0x7F7F7F60,0x7F6F5A38,0x10858485,0x85878787,0x87868686,0x86868686,0x86858685,0x85858585,\n  0x858584A8,0x84858484,0x84848484,0x84EF009F,0x3F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F6F7F7F,0x7F6C6428,\n  0x1F2F0088,0x9F848485,0x86858585,0x85858686,0x85858585,0x86868686,0x85868686,0x86858585,0x85858585,0x85858587,0x90BFE810,0x3F647F7F,\n  0x407F7F7F,0x7F087F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F537F,0x607F7F5F,0x7F70DF3B,0x757F4368,0x3F7F7E3F,0x7F5F7F7F,0x6F7F7F54,\n  0x4B201200,0xFFB3C084,0x85858685,0x85868787,0x86868786,0x87868686,0x85868686,0x86858585,0x85858585,0x85858485,0x8484B0AD,0xDF209ADF,\n  0x50174806,0x7F7F6F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F4B7F7F,0x7F67687F,0x7F6C0020,0x1BE08485,0x84858485,0x86858485,\n  0x86858585,0x86868586,0x85858585,0x85858585,0x84858584,0x84858485,0x84FF8484,0x8584C484,0x858584BC,0x84D789A0,0x8484D710,0xF7403F6F,\n  0x10FF7F7F,0x6F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F73,0x7F547B7F,0x7F7F3F70,0x7F60EA30,0x1C2FE0C0,0xFF858484,0x84848585,\n  0x85858585,0x84858585,0x85858585,0x85848585,0x85858585,0x85858585,0x85858585,0x85858585,0x848584BC,0x088F8FF0,0xFF603700,0x7F7F7F7F,\n  0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F40,0x202FA028,0xF8C0C0FF,0x848484B0,0x84A084B0,0x85858485,0x85858586,\n  0x85858585,0x84858585,0x85858585,0x85858585,0x85858584,0x84858584,0x8484FF98,0xBFECD4FF,0x407F1037,0x7F237F7F,0x7F7F6F7F,0x00387F37,\n  0x30174070,0x7F677F60,0xF52F687F,0x7F50777F,0x004F7F78,0x4067607F,0x542F5710,0x583B6F50,0xFF30FFC8,0x0F4CA084,0x37088884,0xB0848585,\n  0x84848485,0x85848585,0x85858585,0x85858585,0x85858585,0x86858585,0x85858484,0x8485C084,0x8FD08FC8,0xDF7F20DF,0xF05840DF,0x4F7F5D7F,\n  0x7F7F787F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F3040,0x0F5F00EF,0x3FD0FFA0,0xBF208484,0xB8858484,0x84858484,0x85858484,\n  0x85858584,0x84858585,0x85858485,0x84848584,0x85858585,0x84A88585,0x8484849C,0x8484BCB0,0xDB90DF37,0xB03F20FF,0x60E42518,0x3011777F,\n  0x783F6753,0x7F7F7F7F,0x7F7F6A7F,0x7F7F7F52,0x4F65587F,0x7F7F7F54,0x6F546174,0x54D82719,0xD093BCDF,0x20849FE0,0x84C7A8B4,0xD4858485,\n  0xBF848487,0x85848485,0x85858484,0x84858484,0x85858485,0x8585848C,0x85848584,0x8484849F,0xBBB484F0,0xD8BFFFFF,0x7E081718,0x6F50685F,\n  0x18777F7F,0x7F7F547F,0x7F7F7F7F,0x7F777F7F,0x7F7F7F7F,0x5F7F7F7F,0x4F325F7F,0x0C0700BA,0xDFF0BFD2,0xBF088484,0x84E8BF84,0xC0A28484,\n  0x84848484,0x84858484,0x85858484,0x85858484,0x84848784,0xA090CF84,0x8485C084,0x84C4C6C7,0xCF9A98FF,0xBBE8F788,0xDF4DFF28,0xFB27466F,\n  0x577F347F,0x7F7F7F7F,0x7F7F7F7F,0x727F5753,0x7F7F5730,0x27643853,0x6C181B40,0x2208DB14,0x3410EBE8,0x88F8E8F8,0xFF20FFA0,0xE7E890B7,\n  0x10E88484,0xDBB08484,0x84A88485,0x84848584,0x84858484,0x84848484,0x84848884,0xD0848484,0x84868484,0xC4A1BF00,0xD7DF00F0,0x13F80F7F,\n  0x4F7F7F68,0x5F7F7F7F,0x7F7F6C7F,0x7F777F70,0x7F707F4F,0x7F465370,0x372B5350,0x0E2708FF,0x20CBF710,0xE7E0DC2F,0xC0D02ED2,0x2B20EFD0,\n  0xAFD2B0D4,0xAC9FA4AC,0x84BF8484,0x9F848485,0x84A88485,0x84D48484,0x84A0848F,0xDF8C9FE0,0x9CBF84BD,0x0884DDD0,0xC323E4C8,0x0F20FF00,\n  0x2F76303F,0x3F24F13F,0x7F103F7F,0x28547A2F,0x707F6F69,0x7F5F7F63,0x7F54786E,0x5F704770,0x54365F78,0x40001F1C,0x2800BF20,0x08FFA8FD,\n  0xB0BFEFCB,0xA0C4849F,0xCB84A088,0x848F8484,0xD49C8484,0xA88F8484,0x848484A9,0xA08487BB,0x888497F4,0x17E8A110,0xDFD0F4D3,0xEB1F1037,\n  0x2B602C18,0x3F402F64,0x477C385C,0x58287F48,0x0A3F6F40,0x205E1B7C,0x00FF5418,0x4F202B30,0x4F403F40,0x342C6A5A,0x100D5F54,0x441013FF,\n  0xF430E5A4,0xE2D4BFA7,0xB08FDAA8,0xC0CBE884,0xD7D8BFF0,0xC2D3DFE8,0xA0AFC7DB,0xD0A4C0BF,0x86B7C49B,0xE6A09F90,0xC0D0F6C7,0xC0EC0FE7,\n  0xE100F7FF,0x12200F25,0x30100E24,0xFF380730,0x3E0F38F0,0x3760081C,0x575C3750,0x3F607E7F,0x67605F7A,0x68774E60,0x57701833,0x225E2000,\n  0x0224FFF1,0xD0F8DFC8,0xD4B4E5E4,0xCBF7B0A7,0x9084D084,0xBFC08585,0xA0A7B7B0,0xDFD0BAE8,0xD09FC0A3,0xDFE8A0BF,0xD0B5D8C8,0xBCBCD5C7,\n  0xB0BEFFDB,0x192940F1,0x33224F40,0x2F504D3E,0x205F283F,0x203F401B,0x28143737,0x183320DF,0x5348004D,0x2748265B,0x5C48081F,0x396F2028,\n  0x301F1DE8,0xE7E0E3B4,0x0800B0B4,0xD4B69FE4,0xB8BEDFE0,0xB0EFC8FF,0x00091FF1,0x132F1808,0x101F20F3,0x1F00E8D7,0xD8D0D7E0,0xB8CEB8A8,\n  0xCFC0AC9C,0xB7C0A5C9,0xC8C9F9D4,0xDFF300FF,0x13031218,0x1855223F,0x40203B22,0x1C22183E,0x17301D3B,0x241330F9,0x47201742,0x0C582F3A,\n  0x481B403F,0x5E2B7024,0x4F28201F,0x2818F8E3,0xE9E00DE9,0xE0B8DFBC,0xEAA0B89F,0xAFC6E7C0,0xAFCAD8C8,0x00000000);\n\n// wavetable data\n\nint testwav32[336] = int[336] (\n\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0x3F372F27,0x1F170F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0372F27,0x1F170F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B82F27,0x1F170F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B027,0x1F170F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0x1F170F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0170F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0980F07,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989007,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0xFF070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80070F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80880F17,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80889017,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80889098,0x1F272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80889098,0xA0272F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80889098,0xA0A82F37,\n 0xC0C0D0D8,0xE0E8F0F8,0x00F8F0E8,0xE0D8D0C8,0xC0B8B0A8,0xA0989088,0x80889098,0xA0A8B037,\n \n 0x81818181,0x81818181,0x81818181,0x81818181,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x817F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81817F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x8181817F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x817F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81817F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x8181817F,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x7F7F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x817F7F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81817F7F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x8181817F,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x7F7F7F7F,\n 0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x81818181,0x817F7F7F,\n 0x80808080,0x80808080,0x80808080,0x80808080,0x80808080,0x80808080,0x80808080,0x80807F7F,\n 0x80808080,0x80808080,0x80808080,0x80808080,0x80808080,0x80808080,0x80808080,0x8080807F,\n \n 0x80808080,0x80808080,0x7F7F7F7F,0x7F7F7F7F,0x80808080,0x8080807F,0x7F7F7F7F,0x7F7F7F7F,\n 0x80808080,0x80807F7F,0x7F7F7F7F,0x7F7F7F7F,0x80808080,0x807F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x80808080,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x8080807F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x80807F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x80807F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,\n 0x80809098,0xA0A8B0B8,0xC0C8D0D8,0xE0E8F0F8,0x00081018,0x20283038,0x40485058,0x6068707F,\n 0x8080A0B0,0xC0D0E0F0,0x00102030,0x40506070,0x4545797D,0x7A777066,0x6158534D,0x2C201812,\n 0x04DBD3CD,0xc6BCB5AE,0xA8A39D99,0x938E8B8A,0x4545797D,0x7A777066,0x5B4B4337,0x2C201812,\n 0x04F8E8DB,0xCFC6BEB0,0xA8A49E9A,0x95948D83,0x00004060,0x7F604020,0x00E0C0A0,0x80A0C0E0,\n 0x00004060,0x7F604020,0x00E0C0A0,0x80A0C0E0,0x80809098,0xA0A8B0B8,0xC0C8D0D8,0xE0E8F0F8,\n 0x00081018,0x20283038,0x40485058,0x6068707F,0x8080A0B0,0xC0D0E0F0,0x00102030,0x40506070);\n\nint bytepos[4] = int [4] (0x18,0x10,0x08,0x00);\n\n\nint songdata[80] = int[80] (\n\n    0x010000, 0x030000, 0x000000, 0x000000, \n    0x020000, 0x040000, 0x000000, 0x130000, \n    0x010000, 0x030000, 0x070000, 0x100000, \n    0x020000, 0x03000A, 0x080000, 0x110000, \n    0x010000, 0x050000, 0x060000, 0x100000, \n    0x020000, 0x090000, 0x0A0000, 0x110000, \n\t0x010000, 0x050000, 0x030000, 0x120000, \n    0x020000, 0x090000, 0x0B0000, 0x140000, \n    0x0C0000, 0x070000, 0x010000, 0x120000, \n    0x0F0000, 0x080000, 0x020000, 0x140000, \n    0x1B0000, 0x190000, 0x060000, 0x120000, \n    0x1C0000, 0x1A0000, 0x0A0000, 0x150000, \n\t0x1F0000, 0x1E0000, 0x1D0000, 0x160000, \n    0x200000, 0x210000, 0x220000, 0x170000, \n    0x1F0000, 0x240000, 0x230000, 0x160000, \n    0x200000, 0x250000, 0x220000, 0x170000, \n    0x1F0000, 0x260000, 0x270000, 0x160000, \n    0x200000, 0x290000, 0x280000, 0x170000, \n\t0x1F0000, 0x260000, 0x270000, 0x160000, \n    0x2C0000, 0x2B0000, 0x2A0000, 0x170000 \n);   \n\n  \n//int testpattern0[32] = int[32] (\n//    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 \n//);\n  \n  \n// int pattern1[32] = int[32] (\n//  0x4e0700,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x4a0700,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//);   \n  \n// int pattern2[32] = int[32] (\n//  0x400700,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x360700,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//);   \n  \n  \nint pattern3[32] = int[32] (\n  0x6c0300,00,0x00,0x00,0x660300,0x00,0x5c0300,0x00,0x6c0300,0x00,0x6a0300,0x00,0x00,0x0,0x00,0x660300,\n  0x6a0300,0x00,0x00,0x00,0x00,0x0,0x00,0x0,0x0,0x0,0x0,0x00,0x660300,0x0,0x620300,0x00\n);   \n \nint pattern4[32] = int[32] (\n  0x620300,0x660300,0x00,0x00,0x660300,0x00,0x620300,0x00,0x660300,0x00,0x00,0x00,0x00,0x0,0x00,0x662320,\n  0x5c0300,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5c0600,0x0,0x620600,0x00\n);  \n\nint pattern5[32] = int[32] (\n  0x660600,0x00,0x00,0x700600,0x740600,0x00,0x7a0600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n  0x7e0600,0x7a0600,0x740600,0x700600,0x740600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0,0x00,0x00\n);  \n\n//int pattern6[32] = int[32] (\n//  0x840800,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x820800,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//);  \n\n//int pattern7[32] = int[32] (\n//  0x6c0600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x700600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//);   \n\nint pattern8[32] = int[32] (\n  0x760600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e0600,0x00,0x7a0600,0x00,0x00,0x00,0x00,0x00,\n  0x740600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x840700,0x00,0x00,0x00,0x820700,0x00,0x7e0700,0x00\n);  \n\nint pattern9[32] = int[32] (\n  0x7e0600,0x00,0x00,0x00,0x00,0x00,0x840600,0x00,0x00,0x00,0x820600,0x00,0x00,0x00,0x7e0600,0x00,\n  0x740600,0x720600,0x740600,0x7c0600,0x7e0600,0x7c0600,0x760600,0x740600,0x740600,0x720600,0x740600,0x7c0600,0x7e0600,0x7c0600,0x760600,0x740600\n); \n\n//int patternA[32] = int[32] (\n//  0x880800,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x8c0800,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//); \n\n\n//int patternB[32] = int[32] (\n//  0x620300,0x660300,0x00,0x00,0x660300,0x00,0x620300,0x00,0x660300,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x7e0800,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//); \n\n\n//int patternC[32] = int[32] (\n//    0x820a00,0x00,0x00,0x00,0x00,0x00,0x820a00,0x00,0x00,0x00,0x820a00,0x00,0x00,0x00,0x820a00,0x00,\n//    0x880b00,0x00,0x00,0x00,0x00,0x00,0x880b00,0x00,0x00,0x00,0x880b00,0x00,0x00,0x00,0x880b00,0x00 \n//);\n  \n\n\n//int patternF[32] = int[32] (\n//    0x8c0a00,0x00,0x00,0x00,0x00,0x00,0x8c0a00,0x00,0x00,0x00,0x8c0a00,0x00,0x00,0x00,0x8c0a00,0x00,\n//    0x8c0900,0x00,0x00,0x00,0x00,0x00,0x8c0900,0x00,0x00,0x00,0x8c0900,0x00,0x00,0x00,0x8c0900,0x00 \n//);\n\n\n \nint pattern10[32] = int[32] (\n  0x7e0d00,0x00,0x00,0x00,0x00,0x00,0x7e0d00,0x00,0x7e0e00,0x00,0x00,0x00,0x820500,0x00,0x00,0x00,\n  0x7e0d00,0x00,0x00,0x00,0x7e0d00,0x00,0x7e0d00,0x00,0x7e0e00,0x00,0x00,0x00,0x820500,0x00,0x00,0x00\n);\n\n\nint pattern11[32] = int[32] (\n  0x7e0d00,0x00,0x00,0x00,0x7e0d00,0x00,0x7e0d00,0x00,0x7e0e00,0x00,0x00,0x00,0x00,0x00,0x7e0e00,0x00,\n  0x7a0d00,0x00,0x00,0x00,0x7e0e00,0x00,0x7a0d00,0x00,0x7e0e00,0x00,0x00,0x00,0x7e0e00,0x7e2e30,0x7e2e2e,0x7e2e20\n);\n\n\nint pattern12[32] = int[32] (\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x00,0x00,0x00,0x00,0x7e0e00,0x00,0x00,0x00,0x7a0d00,0x00,\n  0x7a0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x00,0x00,0x00,0x00,0x7e0e00,0x00,0x00,0x00,0x7a0d00,0x00\n);\n\n//int pattern13[32] = int[32] (\n//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e0d00,0x00,0x7e0e00,0x00,0x00,0x00\n//);\n\nint pattern14[32] = int[32] (\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x00,0x00,0x00,0x00,0x7e0e00,0x00,0x00,0x00,0x7e0d00,0x00,\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x00,0x00,0x00,0x00,0x7e0e00,0x00,0x7e0e00,0x00,0x7e0d00,0x00\n);\n\nint pattern15[32] = int[32] (\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x00,0x00,0x00,0x00,0x7e0e00,0x00,0x00,0x00,0x7e0d00,0x00,\n  0x820e00,0x820e00,0x7e0d00,0x7e0e00,0x7e0e00,0x7e0d00,0x7c0e00,0x7c0e00,0x7e0d00,0x7a0e00,0x7a0e00,0x00,0x7a0e00,0x00,0x7a0e00,0x00\n);\n\n\nint pattern16[32] = int[32] (\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x00,0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x00,\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x00,0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x00\n);\n\n\nint pattern17[32] = int[32] (\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x00,0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x002020,\n  0x7e0d00,0x00,0x7e0500,0x00,0x7e0e00,0x00,0x7e0d00,0x00,0x7e0d00,0x7e0e00,0x00,0x00,0x7e0e00,0x00,0x7e0e00,0x7e2e28\n);\n\n\n\n\n\n//int pattern19[32] = int[32] (\n//    0x6c0600,0x00,0x00,0x00,0x660600,0x00,0x5c0600,0x00,0x6c0600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//    0x6a0600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 \n//);\n\nint pattern1A[32] = int[32] (\n\n  0x620600, 0x660600, 0x00, 0x00, 0x660600, 0x00, 0x620600, 0x00, 0x660600, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x7E0600, 0x740600, 0x6C0600, 0x740600, 0x6C0600, 0x660600, 0x6C0600, 0x660600, 0x5C0600, 0x660600, 0x5C0600, 0x540600, 0x5C0600, 0x540600, 0x4E0600, 0x00\n);\n\n//int pattern1B[32] = int[32] (\n//    0x820a00,0x00,0x00,0x00,0x00,0x00,0x820a00,0x00,0x00,0x00,0x820a00,0x00,0x00,0x00,0x820a00,0x00,\n//    0x820c00,0x00,0x00,0x00,0x00,0x00,0x820c00,0x00,0x00,0x00,0x820c00,0x00,0x00,0x00,0x820c00,0x00 \n//);\n\n//int pattern1C[32] = int[32] (\n//    0x7e0900,0x00,0x00,0x00,0x00,0x00,0x7e0900,0x00,0x00,0x00,0x7e0900,0x00,0x00,0x00,0x7e0900,0x00,\n//    0x880800,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 \n//);\n\n//int pattern1D[32] = int[32] (\n//  0x660600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x620600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//);  \n\nint pattern1E[32] = int[32] (\n    0x00,0x00,0x00,0x7e0100,0x840100,0x00,0x7e0100,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n    0x00,0x00,0x00,0x7e0100,0x840100,0x820100,0x7e0100,0x840100,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 \n);\n\nint pattern1F[32] = int[32] (\n\n\t0x360200, 0x360200, 0x4E0200, 0x360200, 0x2C0200, 0x440200, 0x320200, 0x4A0200,\n    0x360200, 0x360200, 0x4E0200, 0x360200, 0x2C0200, 0x440200, 0x360200, 0x4E0200,\n    0x320200, 0x320200, 0x4A0200, 0x320200, 0x280200, 0x400200, 0x2E0200, 0x460200,\n\t0x320200, 0x320200, 0x4A0200, 0x320200, 0x280200, 0x400200, 0x320200, 0x4A0200\n);\n\nint pattern20[32] = int[32] (\n\t0x400200, 0x400200, 0x580200, 0x400200, 0x360200, 0x4E0200, 0x3C0200, 0x540200,\n    0x400200, 0x400200, 0x580200, 0x400200, 0x360200, 0x4E0200, 0x3C0200, 0x580200,\n    0x360200, 0x360200, 0x4E0200, 0x360200, 0x2C0200, 0x440200, 0x320200, 0x4A0200,\n\t0x360200, 0x360200, 0x4E0200, 0x360200, 0x2C0200, 0x440200, 0x320200, 0x4A0200\n);\n\n\nint pattern21[32] = int[32] (\n    0x00,0x00,0x7e0100,0x840100,0x00,0x00,0x880100,0x00,0x8a0100,0x880100,0x840100,0x880100,0x840100,0x7e0100,0x7a0100,0x7c0100,\n    0x7e0100,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 \n);\n\n\nint pattern22[32] = int[32] (\n  0x700600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n  0x7E0600, 0x7A0600, 0x740600, 0x700600, 0x740600, 0x700600, 0x6C0600, 0x660600, \n  0x6C0600, 0x660600, 0x620600, 0x5C0600, 0x660600, 0x620600, 0x5C0600, 0x580600\n); \n\n\n//int pattern23[32] = int[32] (\n//  0x660600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8c0600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n//  0x6a0600,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n//);  \n\n\nint pattern24[32] = int[32] (\n  0x00,0x00,0x00,0x7e0100,0x840100,0x00,0x7e0100,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n  0x00,0x00,0x00,0x7e0100,0x840100,0x00,0x880100,0x00,0x8a0100,0x880100,0x00,0x00,0x840100,0x00,0x00,0x00\n); \n\n\nint pattern25[32] = int[32] (\n\n  0x700100, 0x00, 0x6C0100, 0x700100, 0x00, 0x6C0100, 0x700100, 0x7C0100,\n  0x7E0100, 0x7C0100, 0x760100, 0x740100, 0x7E0100, 0x7C0100,\n  0x760100, 0x740100, 0x7E0100, 0x00,0x00, 0x820100, 0x00, 0x00 , 0x840100, 0x00,0x00, 0x880100,\n  0x8A0100, 0x00, 0x8C0100, 0x00, 0x7C0100, 0x00\n); \n\n\nint pattern26[32] = int[32] (\n\n\t0x660600, 0x00,0x00,0x00 , 0x006008, 0x006008,\n\t0x006008, 0x006008, 0x006000,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n\t0x820600, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n\n); \n\n\nint pattern27[32] = int[32] (\n\t0x8C0100,  0x8A0100,  0x840100,\t0x7E0100,  0x8C0100,  0x8A0100,\n\t0x840100,  0x7E0100,  0x8C0100,\t0x8A0100,  0x840100,  0x7E0100,\n\t0x8C0100,  0x8A0100,  0x840100,\t0x7E0100,  0x880100,  0x840100,\n\t0x7E0100,  0x7A0100,  0x880100,\t0x840100,  0x7E0100,  0x7A0100,\n\t0x880100,  0x840100,  0x7E0100,\t0x7A0100,  0x880100,  0x840100,\n\t0x7E0100,  0x7A0100\n); \n\nint pattern28[32] = int[32] (\n\t0x700100, 0x6C0100, 0x700100, 0x7C0100, 0x7E0100, 0x7C0100,\n\t0x760100, 0x740100, 0x700100, 0x6C0100, 0x700100, 0x7C0100,\n\t0x7E0100, 0x7C0100, 0x760100, 0x700100, 0x7E0100, 0x7C0100,\n\t0x760100, 0x740100, 0x7E0100, 0x7C0100, 0x760100, 0x740100,\n\t0x7E0100, 0x7C0100, 0x760100, 0x740100, 0x7E0100, 0x820100,\n\t0x840100, 0x8A0100\n);\n\nint pattern29[32] = int[32] (\n\t0x840600, 0x006003, 0x840600, 0x006003, 0x840600, 0x006003, 0x840600, 0x006003, 0x840600,\n\t0x006001, 0x006002, 0x006000, 0x00, 0x00, 0x00, 0x00, 0x740600, 0x00,0x00,0x00 , 0x7C0600, 0x00,0x00,0x00, 0x7E0600, 0x00,0x00,0x00,\n\t0x820600, 0x00,0x00,0x00\n);\n\nint pattern2A[32] = int[32] (\n\t0x660100, 0x6A0100, 0x660100, 0x6A0100, 0x6C0100, 0x700100,\n\t0x6C0100, 0x700100, 0x740100, 0x760100, 0x740100, 0x760100,\n\t0x7A0100, 0x7C0100, 0x7A0100, 0x7C0100, 0x7E0100, 0x002020,\n\t0x002040, 0x00, 0x5C0100, 0x002020, 0x002040, 0x00, 0x540100, 0x002020,\n\t0x002040, 0x00, 0x4E0100, 0x002020, 0x002040, 0x00\n);\n\nint pattern2B[32] = int[32] (\n\t0x7E0600, 0x004002, 0x004002, 0x006002, 0x006002, 0x004002,\n\t0x004002, 0x006002, 0x006002, 0x004002, 0x004002, 0x006002,\n\t0x006002, 0x004002, 0x004002, 0x006004, 0x7E6600, 0x002020,\n\t0x002040, 0x00, 0x740600, 0x002020, 0x002040, 0x00, 0x6C0600, 0x002020,\n\t0x002040, 0x00, 0x660600, 0x002020, 0x002040, 0x00\n);\n\nint pattern2C[32] = int[32] (\n\t0x400200, 0x400200, 0x580200, 0x400200, 0x360200, 0x4E0200,\n\t0x3C0200, 0x540200, 0x400200, 0x400200, 0x580200, 0x400200,\n\t0x360200, 0x4E0200, 0x3C0200, 0x580200, 0x360200, 0x00,0x00,0x00, 0x2C0200, 0x00,0x00,0x00,\n\t0x240200, 0x00,0x00,0x00, 0x1E0200, 0x00,0x00,0x00\n);\n\n\n\nint instrtowave[0x0f] = int[0x0f] (\n\n 0x00,0x1a,0x1a,0x1a,0x0a,0x01,0x0a,0x1a,0x1a,0x1a,0x1a,0x1a,0x1a,0x00,0x02\n\n);\n\n\nint getcurpattpos(int mpos,int track)\n{\n int ppos = mpos & 31;\n \n switch (int(songdata[((mpos >>5)%20)*4+track]>>16)) {\n  \n case 0x0: return 0; \n case 0x1:\n \n if (ppos==00) return 0x4e0700;\n if (ppos==16) return 0x4a0700;\n return 0;\n \n// return pattern1[ppos]; \n case 0x2:\n \n if (ppos==00) return 0x400700;\n if (ppos==16) return 0x360700;\n return 0;\n \n \n \n// return pattern2[ppos];  \n case 0x3: return pattern3[ppos]; \n case 0x4: return pattern4[ppos];  \n case 0x5: return pattern5[ppos];  \n case 0x6:\n \n if (ppos==00) return 0x840800;\n if (ppos==16) return 0x820800;\n return 0; \n \n \n// return pattern6[ppos];\n case 0x7: \n \n if (ppos==00) return 0x6c0600;\n if (ppos==16) return 0x700600;\n return 0;\n\n// return pattern7[ppos];\n\n case 0x8: return pattern8[ppos]; \n case 0x9: return pattern9[ppos];\n case 0xA:\n \n if (ppos==00) return 0x880800;\n if (ppos==16) return 0x8c0800;\n return 0;\n \n\n// return patternA[ppos];\n \n case 0xB:\n \n if (ppos==0x00 || ppos==0x06)               return 0x620300;\n if (ppos==0x01 || ppos==0x04 || ppos==0x08) return 0x660300;\n if (ppos==0x10)                             return 0x7e0800;\n return 0;\n \n// return patternB[ppos];\n \n case 0xC:\n \n if (ppos==0x00 || ppos==0x06 || ppos==0x0a || ppos==0x0e) return 0x820a00;\n if (ppos==0x10 || ppos==0x16 || ppos==0x1a || ppos==0x1e) return 0x880b00;\n return 0;\n \n// return patternC[ppos]; \n \n \n case 0xF: \n \n if (ppos==0x00 || ppos==0x06 || ppos==0x0a || ppos==0x0e) return 0x8c0a00;\n if (ppos==0x10 || ppos==0x16 || ppos==0x1a || ppos==0x1e) return 0x8c0900;\n return 0;\n \n// return patternF[ppos];  \n \n case 0x10: return pattern10[ppos];\n case 0x11: return pattern11[ppos]; \n case 0x12: return pattern12[ppos];  \n case 0x13: \n \n if (ppos==0x1A) return 0x7e0d00;\n if (ppos==0x1C) return 0x7e0e00;\n return 0;\n \n// return pattern13[ppos];\n \n\n \n case 0x14: return pattern14[ppos];\n case 0x15: return pattern15[ppos];\n case 0x16: return pattern16[ppos];\n case 0x17: return pattern17[ppos];\n \n \n case 0x19: \n \n if (ppos==0x00 || ppos==0x08) return 0x6c0600;\n if (ppos==0x04) return 0x660600;\n if (ppos==0x06) return 0x5c0600;\n if (ppos==0x10) return 0x6a0600;\n return 0;\n\n \n// return pattern19[ppos];  \n\n case 0x1A: return pattern1A[ppos]; \n case 0x1B:\n \n if (ppos==0x00 || ppos==0x06 || ppos==0x0a || ppos==0x0e) return 0x820a00;\n if (ppos==0x10 || ppos==0x16 || ppos==0x1a || ppos==0x1e) return 0x820c00;\n return 0;\n\n \n// return pattern1B[ppos];\n\n case 0x1C: \n \n if (ppos==0x00 || ppos==0x06 || ppos==0x0a || ppos==0x0e) return 0x7e0900;\n if (ppos==16) return  0x880800;\n return 0;\n \n \n// return pattern1C[ppos];\n \n case 0x1D:\n \n if (ppos==00) return 0x660600;\n if (ppos==16) return 0x620600;\n return 0;\n \n // return pattern1D[ppos];\n \n \n case 0x1E: return pattern1E[ppos];\n case 0x1F: return pattern1F[ppos];\n case 0x20: return pattern20[ppos];\n case 0x21: return pattern21[ppos];\n case 0x22: return pattern22[ppos];\n case 0x23: \n \n if (ppos==0x00) return 0x660600;\n if (ppos==0x08) return 0x8c0600; \n if (ppos==0x10) return 0x6a0600;\n return 0;\n\n// return pattern23[ppos];\n \n\n case 0x24: return pattern24[ppos];\n case 0x25: return pattern25[ppos]; \n case 0x26: return pattern26[ppos]; \n case 0x27: return pattern27[ppos];\n case 0x28: return pattern28[ppos]; \n case 0x29: return pattern29[ppos];  \n case 0x2A: return pattern2A[ppos];   \n case 0x2B: return pattern2B[ppos];  \n case 0x2C: return pattern2C[ppos];  \n }\n \n \n return 0;\n\n}\n\n\n// ******************************************\n// get wave data from wavetable array \n// ******************************************\n\n\nfloat wavetable32(int spos, int num)\n{\n \n spos = (spos & 31)+num*32;\n \n return 1.0f-float((testwav32[spos>>2]>>(bytepos[spos&0x03])^0x80) &0xff)/128.f;\n}\n\n\n// ******************************************\n// get data from sample or wavetable  \n// ******************************************\n\n\n  float fromsample(int samplepos , int wavenum) {\n \n  if (wavenum == 0x00)  return 1.0f-float((Sample1[samplepos>>2]>>(bytepos[samplepos&0x03])^0x80) &0xff)/128.f;\n  if (wavenum == 0x01)  return 1.0f-float((Sample2[samplepos>>2]>>(bytepos[samplepos&0x03])^0x80) &0xff)/128.f;\n  if (wavenum == 0x02)  return 1.0f-float((Sample3[samplepos>>2]>>(bytepos[samplepos&0x03])^0x80) &0xff)/128.f;\n  if (wavenum >= 0x0a)  return wavetable32(samplepos,(wavenum-0x0a));\n   \n  return 0.f;\n}\n\n\n// ******************************************\n// arpegiator routines \n// ******************************************\n\n\nint arpegio3(int tframes)\n\n {\n return int(tframes==0)*0x02;\n }\n\n\nint arpegio4(int tframes)\n\n {\n// if (tframes%6<3) return 0x02;\n// return 0x00;\n \n return int(tframes%6<3)*0x02;\n }\n\n\nint arpegio2s(int tframes,int transpose1)\n\n {\n if (tframes%12>=6) return transpose1;\n return 0x00;\n } \n\n\nint arpegio3n(int tframes,int speed, int transpose1, int transpose2 , int transpose3)\n{\n\ntframes=(tframes/speed)%3;\n\n if (tframes==0) return transpose1;\n if (tframes==1) return transpose2;\n return transpose3;\n}\n\n\n// ******************************************\n// envelopes routines\n// ******************************************\n\nint envelope1(int tframes)\n{\n\n if (tframes<2) return 0x28-tframes*8;\n\n tframes=tframes-2;\n \n if (tframes<0x40) return 0x18-(0x18*tframes)/0x3f;\n return 0;\n}\n\nint envelope2(int tframes)\n{\n\n if (tframes==0) return 0x30;\n if (tframes==1) return 0x24;\n if (tframes==2) return 0x18;\n \n tframes=tframes-3;\n \n if (tframes<0x28) return 0x10-(0x10*tframes)/0x27;\n return 0;\n}\n\nint envelope3(int tframes)\n{\n\n if (tframes<4) return 0x28-(0x08*tframes)/0x03;\n\n tframes=tframes-4;\n\n if (tframes<4) return 0x18-(0x04*tframes)/0x03;\n \n tframes=tframes-4;\n \n if (tframes<0x20) return 0x10-(0x10*tframes)/0x1f;\n return 0;  \n}\n\n\nint envelope4(int tframes)\n{\n\n if (tframes<4)    return 0x08+(0x20*tframes)/0x03;\n \n tframes=tframes-4;\n \n if (tframes<0x10) return 0x20-(0x20*tframes)/0x0f;\n return 0;  \n\n}\n\nint envelope5(int tframes)\n{\n\nif (tframes<=1) return 0x30;\nif (tframes>=2 && tframes<10) return 0x10;\nreturn 0x00;\n}\n\n\nint envelope6(int tframes)\n{\n\nif (tframes<8)    return 0x20+tframes;\ntframes=tframes-8;\n\nif (tframes<0x50) return 0x28-(0x8*tframes)/0x4f;\ntframes=tframes-0x50;\n\nif (tframes<0x40) return 0x20-(0x20*tframes)/0x3f;\n\nreturn 0;\n\n}\n\n\nint envelope7(int tframes)\n{\n\n if (tframes == 0 )  return 0x20;\n \n int pmod = (tframes-1)%16;\n \n if (pmod<8) return  (0x18-pmod);\n return  (0x10 + (pmod-8)*2);\n\n}\n\nint envelope8(int tframes)\n{\n\n int pmod = tframes%16;\n \n if (pmod<8) return (0x18-pmod);\n return  (0x10 + (pmod-8)*2);\n\n}\n\nint envelope9ABC(int tframes)\n{\n\n if (tframes<6) return 0x18+(0x08*tframes)/0x05;\n \n tframes=tframes-6;\n\n if (tframes<0x20) return 0x1a-(0x1a*tframes)/0x1f;\n return 0;  \n}\n\nint envelopeE(int tframes)\n{\n\n if (tframes<4) return 0x40;\n if (tframes<8) return 0x18;\n return 0x10;\n\n}\n\n\n// przelaczniki fal\n\nint switch1(int tframes)\n{\n int pmod = tframes%0x1e;\n \n if (pmod<0x0f) return 0x1a+pmod;\n \n return 0x1a+(0x1e-pmod);\n \n// return 0x1a+(tframes%0x0f);\n}\n\nint switch2(int tframes)\n{\n  return 0x1a+(tframes%0x07);\n}  \n  \n int switch3(int tframes)\n{\n\n  int pmod = tframes%0x1e;\n  \n  if (pmod<0x0f) return 0x0a+pmod;\n  return 0x0a+(0x1e-pmod);\n  \n//  return 0x0a+(tframes%0x0f);\n}   \n  \n// obsluga arpergiatora \n\nint doarpergio(int tframes,int inum)\n{\n\n switch(inum) {\n \n case 0x03: return arpegio3(tframes);\n case 0x04: return arpegio4(tframes);\n \n case 0x07: return arpegio2s(tframes,0x18);\n case 0x08: return arpegio2s(tframes,0xe8);\n\n case 0x09: return arpegio3n(tframes,2,0xf2,0xf8,0x00);\n case 0x0A: return arpegio3n(tframes,2,0xf2,0xfc,0x02);\n case 0x0B: return arpegio3n(tframes,2,0xf2,0xfa,0x00); \n case 0x0C: return arpegio3n(tframes,2,0xee,0xf8,0x00); \n }\n \n return 0x00;\n} \n \n \n// obsluga portamento\n \nint doportamento(int tframes,int inum)\n{ \n\n// dla instrumentu numer 3\n\n if (inum==3 && tframes > 0 )\n {\n\n int pmod = (tframes-1)&7;\n if (pmod<4)  return pmod*2; \n return 0x08-(pmod&3)*2;\n } \n \n return 0x00;\n}\n \n\n  \n// main player\n\nvec2 playtrack( float time , int trk,  float vol)\n\n{\n  if (time<0.f) return vec2(0.f,0.f);\n  \n  int tempo  = 6;\n \n  int frames = int(50.f*time);\n  \n  int lastevent=frames/tempo; \n \n  int notenum =getcurpattpos(lastevent,trk);  // tu bedzie czytany int (24 bity - nr nuty, instrumentu,komenda)\n  \n  // szukanie ostatnio zagranej nuty albo poczatku songu jesli taka nie zostala zagrana\n  \n  while (((notenum>>16)&0xff)==0 && lastevent>=0)  notenum =getcurpattpos(--lastevent,trk); \n  \n  if (lastevent<0) return vec2(0.f,0.f);  // jesli nie bylo oegranego zadnego dzwieku od poczatku songu wyslij 0 \n \n  \n  int instrnum = (notenum>>8)&0x1f; \n  \n  int curevent = lastevent*tempo;\n  \n  int framesfromnote = frames - curevent;\n \n  int sngpos = ((lastevent >>5)%20)*4+trk; \n \n  int note = (((notenum>>16)&0xff) + (songdata[sngpos]&0xff))&0xff;\n \n \n // analiza od czasu zagrania nuty do obecnego czasu w ramkach\n // dla kazdej ramki osobno - zwlaszcza czestotliwosc\n // ma to zapewnic ciaglosc fali\n \n\n  int curpos,cmd,cmdval,eventnote,eventportamento; \n  int portamento = 0;\n  int cmdvol=0x40;\n \n  int curframe = 0;\n\n  int cursamples = 0;\n  float cursamplesfrac =0.f;\n \n\n while (curevent<=frames)\n  {\n\n // analiza komend w tracku\n\n curpos =getcurpattpos((curevent/tempo),trk);\n cmd =(curpos>>8)&0xE0;\n cmdval = curpos&0xff;\n \n //if (cmd==0x00) portamento=0;\n if (cmd==0x60) portamento=portamento-cmdval; \n if (cmd==0x40) portamento=portamento+cmdval; \n \n if (cmd==0x40 && cmdval==0 ) portamento=0;\n if (cmd==0x60 && cmdval==0 ) portamento=0;\n \n if (cmd==0x20) cmdvol = cmdval;\n \n if (((curpos>>8)&0x1f)>0 && curevent/tempo>lastevent)\n {\n instrnum = (curpos>>8)&0x1f;\n framesfromnote = frames -  curevent/tempo;\n \n }\n \n // restart instrumentow \n // restart sampla dla 0x05 oraz 0x0e !\n  \n if (instrnum==0x0E && curframe==4) cursamples=0;\n if (instrnum==0x0E && curframe==8) cursamples=0;\n if (instrnum==0x05 && curframe==2) cursamples=0;\n  \n // analiza zmian w instrumencie\n // docelowo obliczanie pozycji w samplu na podstawie czestotliwosci kazdego z eventow\n \n eventnote = (note + doarpergio(curframe,instrnum))&0xff;\n eventportamento = portamento+doportamento(curframe,instrnum);\n \n if (curevent<frames)\n { \n cursamples = cursamples+int(3546895/((plrperiod[eventnote>>1]+eventportamento/2)))/5;\n }\n  \n curevent++;\n curframe++;\n }\n \n cursamples = cursamples+int(10.f*mod(time,0.02f)*float(3546895/(plrperiod[eventnote>>1]+eventportamento/2))); \n cursamples = cursamples/10;\n \n int samplenr =  instrtowave[instrnum];\n \n int amigavol;\n \n \n// obsluga testowa EFX przelacznika fal\n\n if (instrnum==1 &&  framesfromnote>=2) samplenr = switch1(framesfromnote-2);\n if (instrnum==2) samplenr = switch2(framesfromnote);  \n if (instrnum==6) samplenr = switch3(framesfromnote); \n if (instrnum==7 || instrnum==8) samplenr = switch1(framesfromnote);\n \n// envelopes  \n \n if (instrnum==0x01) amigavol = envelope1(framesfromnote);\n if (instrnum==0x02) amigavol = envelope2(framesfromnote); \n if (instrnum==0x03) amigavol = envelope3(framesfromnote); \n if (instrnum==0x04) amigavol = envelope4(framesfromnote);  \n if (instrnum==0x05) amigavol = envelope5(framesfromnote); \n if (instrnum==0x06) amigavol = envelope6(framesfromnote); \n if (instrnum==0x07) amigavol = envelope7(framesfromnote);\n if (instrnum==0x08) amigavol = envelope8(framesfromnote);\n if (instrnum==0x09 || instrnum==0x0A || instrnum==0x0B ||instrnum==0x0C) amigavol = envelope9ABC(framesfromnote);\n if (instrnum==0x0D) amigavol = 0x40;\n if (instrnum==0x0E) amigavol = envelopeE(framesfromnote);\n \n \n amigavol = (amigavol*cmdvol)/0x40;\n \n float getsample = fromsample(cursamples,samplenr)*float(amigavol)/64.f; \n   \n return vec2(getsample*vol,getsample*vol);\n}\n\n\n// play 4 channel sounds from 4 track\n\nvec2 mainSound( int samp, float time )\n{\n\n  vec2 smix = vec2(0.f,0.f);\n  \n  smix = smix + playtrack(time,0,0.5f); // track1\n \n // smix = smix + playtrack(time-0.25,1,0.1f); \n // smix = smix + playtrack(time-0.50,1,0.06f);\n \n  smix = smix + playtrack(time,1,0.5f); // track2\n  smix = smix + playtrack(time,2,0.5f); // track3\n  smix = smix + playtrack(time,3,0.5f); // track4\n  \n    \n  smix = smix/4.f;\n\n    \n  return smix;\n}","name":"Sound","description":"","type":"sound"}]}