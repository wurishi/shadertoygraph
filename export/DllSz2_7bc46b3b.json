{"ver":"0.1","info":{"id":"DllSz2","date":"1675097465","viewed":181,"name":"Distribution Ray Marcher/Tracer","username":"gcgac","description":"This is a distributed raytracer! It uses raymarching as the intersection method.\nFeatures:\nDepth of field\nAntialiasing\nSoft shadows","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raytracer","ray","raymarcher","montecarlo","tracer","marcher","distribution","monte","carlo","stochastic","distributed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float gamma = 2.2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 tex = texture(iChannel0,fragCoord/iResolution.xy);\n    fragColor = vec4(pow(tex.xyz/tex.w,vec3(1.0/gamma)),1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Thanks to Inigo Quilez for the PRNG\n\n\nint seed = 3;\nfloat aperture_size = 5.0;\nvec3 rgb;\nint frand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat rand(void) { return float(frand())/32767.0; }\nvec3 point;\nvec3 lightpos = vec3(10,50,40.0);\nfloat hash1( uint n ) {\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nfloat sde;\nvec3 pos;\nfloat maxl = 10000.0;\n\n\nfloat plane_sde(vec3 ray, vec3 nor, float planey, vec3 col){\n    if (dot(ray,nor)+planey < sde){\n        sde = dot(ray,nor)+planey;\n        rgb = col;\n    }\n    return dot(ray,nor)+planey;\n}\n\n\nfloat sphere_sde(vec3 ray, vec3 position, float radius, vec3 col){\n    if (length(position-ray)-radius < sde){\n        sde = length(position-ray)-radius;\n        rgb = col;\n    }\n    return length(position-ray)-radius;\n}\n\n \nfloat calc_sdf(vec3 ray){\n    sde = maxl;\n    sphere_sde(ray,vec3 (-10.0,5.0,80.0),15.0, vec3(1,0,0));\n    sphere_sde(ray,vec3 (10.0,2.0,80.0),10.0, vec3(0,1,1));\n    //sphere_sde(ray,vec3 (0.0,-612.0,80.0),600.0, vec3(1));\n    sphere_sde(ray,vec3 (20.0,0.0,60.0),8.0, vec3(0,1,0));\n    plane_sde(ray,vec3(0,1,0),10.0,vec3(1));\n    return sde;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(calc_sdf(p+h.xyy) - calc_sdf(p-h.xyy),\n                           calc_sdf(p+h.yxy) - calc_sdf(p-h.yxy),\n                           calc_sdf(p+h.yyx) - calc_sdf(p-h.yyx) ) );\n}\n\n\n\nvec4 raycol(vec3 orig, vec3 dir, float ml){\n    float len = 0.0;\n    sde = ml;\n    float steps = 0.0;\n    pos = orig;\n\n    while (len < ml && sde > 0.1){\n        sde = calc_sdf(pos);\n        pos += dir*sde;\n        len += sde;\n        steps += 1.0;\n    }\n    return vec4(pos,steps);\n}\n\n\nvec3 sphrand(){\n    point = vec3(2.0);\n    while(length(point)>=1.0){\n        point = vec3(rand()*2.0-1.0,rand()*2.0-1.0,rand()*2.0-1.0);\n    }\n    return point;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 newfrag = vec2(fragCoord.x+iResolution.x/2.0,fragCoord.y+iResolution.y/2.0); \n    uvec2 p = uvec2((newfrag-.5*iResolution.xy)/iResolution.y*1000.0);\n    seed = int(round(hash1( p.x + 1920U*p.y + (1920U*1080U))*100.0*(float(iFrame)+1.0)));\n    vec2 th = fragCoord/iResolution.xy;\n    vec3 colour = vec3(0);\n    for (int i = 0; i<10; i++){\n        vec2 ap = sphrand().xy;\n        vec3 pos = vec3(ap.x*aperture_size,ap.y*aperture_size+10.0,-5.0);\n        vec3 opos = vec3(0,10.0,-5.0);\n        vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y+sphrand().xy/iResolution.xy;\n        vec3 odir = normalize(vec3(uv.x,uv.y,1.0))*85.0+opos;\n        vec3 direction = normalize(odir-pos);\n        vec4 o;\n        float steps;\n        o = raycol(pos,direction,1000.0);\n        if (sde <= 0.1){\n            steps =o.w;\n            vec3 inter = o.xyz;\n            vec3 pre = rgb;\n            //colour = rgb;\n            vec3 offset = sphrand();\n            offset *= 5.0;\n            vec3 r = vec3(rand());\n            vec3 hit = raycol(inter+calcNormal(inter)/8.0,normalize(lightpos+offset-inter),length(inter-(lightpos+offset))).xyz;\n            if (sde>0.1){\n                colour += pre*mix(0.05,1.0,max(dot(normalize(lightpos+offset-inter),calcNormal(inter)),0.0));\n            } else{\n                colour += pre*0.05;\n            }\n        } else{\n            colour += vec3(0.5);\n        }\n    }\n    colour /= 10.0;\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy)+vec4(colour,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}