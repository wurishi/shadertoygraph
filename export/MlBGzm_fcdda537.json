{"ver":"0.1","info":{"id":"MlBGzm","date":"1427649704","viewed":382,"name":"WalkInMars","username":"kuvkar","description":"A pleasant day in Mars. Mouse to look around.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Utility stuff\n#define PI 3.14159\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\n\nconst int STEPS = 170;\nconst float FAR = 1500.0;\n\n\n//scene\nfloat map(vec3 pos)\n{\n    float offset = 0.002;\n    float px = pos.x * offset;\n    float pz = pos.z * offset;\n    vec2 v = vec2(px, pz);\n    \n    float fbm = texture(iChannel0, v, -100.0).r;\n    fbm = smoothstep(0.1, 0.4, fbm * 0.25);\n    fbm *= 3.25;\n    \n    float rocks = texture(iChannel1, vec2(pos.x, pos.z) * 0.1, -100.0).r;\n    fbm += smoothstep(0.1, 1.0, rocks) * 0.15;\n    return pos.y - fbm;\n    \n}\n\nvec3 light = vec3(-2.0, 1.0, 1.0);\nvec4 lightcol = vec4(0.8, 0.3, 0.3, 0.0);\nvec3 origin;\n\n\n\nvec4 getcolor(in vec3 rp, in vec3 dir)\n{\n    vec4 color = mix(lightcol, vec4(0.8, 0.5, 0.5, 0.0) * 0.7, smoothstep(0.0, 1.0, rp.y));\n    vec3 offset = vec3(0.07, 0.0, 0.0);\n    vec3 grad = vec3( map(rp + offset.xyy) - map(rp - offset.xyy),\n                     offset.x * 2.0,\n                     map(rp + offset.yyx) - map(rp - offset.yyx));\n\n    grad = normalize(grad);\n    float d = dot(grad, light);\n    d = clamp(d, 0.0, 1.0);\n    color *= d;\n    \n    dir = normalize(rp - origin);\n    float r = 1.0 - clamp(dot(-dir, grad), 0.0, 1.0);\n    r = pow(r, 4.0);\n    color += r * vec4(0.7, 0.2, 0.0, 0.0) * 0.8;\n    \n    return color;\n    \n}\n\nbool trace(in vec3 origin, in vec3 dir, out vec4 color, out vec3 hitp)\n{\n    vec3 rp = origin;\n    float h = 0.0;\n    for (int i = 0; i < STEPS; ++i)\n    {\n        rp += h * 0.5 * dir + dir * 0.01;\n        h = map(rp);\n\t    vec3 _rp = rp - origin;\n        if (dot(_rp, _rp) > FAR)\n        {\n            break;\n        }\n        \n        if(h <= 0.0)\n        {\n            color = getcolor(rp, dir);\n            hitp = rp;\n            return true;\n        }\n    }\n    \n    vec3 _rp = rp - origin;\n    hitp = rp;\n    \n    if(dot(_rp,_rp) < FAR)\n    {\n        rp.y = 0.1;\n        \n        color = getcolor(rp, dir);\n        return true;\n    }\n    color = vec4(0.0);\n    return false;\n}\n    \n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0.0);\n    vec2 uv = fragCoord.xy / iResolution.y;\n\tlight = normalize(light);\n    \n    vec2 m = iMouse.xy;\n    \n    if(iMouse.x == 0.0 && iMouse.y == 0.0)\n    {\n       m = iResolution.xy * 0.4;\n    }\n    \n    vec2 mouse = ((m.xy / iResolution.y) - vec2(0.4)) * 4.0;\n    origin = vec3(iTime * 0.8, 0.45, iTime * 0.9);\n    origin.y = -map(origin) + 0.8;\n    \n    vec3 dir = vec3(uv - vec2(0.5), 1.0);\n    dir *= rotx(mouse.y);\n    dir *= roty(mouse.x);\n    \n    vec3 hitp = vec3(0.0);\n    \n    if(!trace(origin, dir, color, hitp))\n    {\n        \n        //some stars\n        vec4 stars = texture(iChannel2, (uv + vec2(mouse.x, -mouse.y)) * 0.25);\n        stars.r *= 1.4;\n        stars.g *= 1.1;\n        stars.b += pow(sin(uv.x + mouse.x ) * 0.5 + 0.5, 15.0);\n            \n        float flter = 1.0;\n        stars -= flter;\n        stars = clamp(stars, 0.0, 1.0);\n        stars += smoothstep(0.0, 0.3, pow(stars.r, 2.0) * 2.0);\n        \n        // blinking\n        stars *= texture(iChannel0, vec2(iTime * 0.003) + uv * 0.01);\n        \n        color += stars;\n        \n    }\n    \n    // fog\n    float fz = abs(hitp.z - origin.z) / FAR;\n    fz = pow(fz, 1.35) * 7.0;\n    fz *= clamp( 2.0 - hitp.y, 0.0, 1.0) * 1.25;\n    color += vec4(1.0, 0.4, 0.2, 0.0) * fz * 11.0;\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}