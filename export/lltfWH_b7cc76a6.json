{"ver":"0.1","info":{"id":"lltfWH","date":"1542812151","viewed":135,"name":"Glitch art","username":"jbsiraudin","description":"Glitch artifacts & pseudofractals.\nPlay with the zoom value to change the aspect on the x-axis, fisheye value on the y-axis.\nFisheye from https://www.shadertoy.com/view/4s2GRR \nBased on Jes Wolfe talk at !!Con2018.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Pi 3.141592\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )//Drag mouse over rendering area\n{\n\tvec2 initPos = fragCoord/iResolution.xy;\n\tfloat aspectRatio = iResolution.x / iResolution.y;\n\tvec2 origin = vec2(0.5, 0.5);//center coords\n\tvec2 updatedPos = initPos - origin;//vector from center to current fragment\n\tfloat r = sqrt(dot(updatedPos, updatedPos)); // distance of pixel from center\n\n\tfloat power = 0.1*floor(50.*(iMouse.y / iResolution.y - 0.5));//amount of effect\n\n\tfloat bind;//radius of 1:1 effect\n\tif (power > 0.0) bind = sqrt(dot(origin, origin));//stick to corners\n\telse {if (aspectRatio < 1.0) bind = origin.x; else bind = origin.y;}//stick to borders\n\n\t//Weird formulas\n\tvec2 uv;\n\tif (power > 0.0)//fisheye\n\t\tuv = origin + normalize(updatedPos) * tan(r * power) * bind / tan( bind * power);\n\telse if (power < 0.0)//antifisheye\n\t\tuv = origin + normalize(updatedPos) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);\n\telse uv = initPos;//no effect for power = 0.0\n\n    vec4 texColor = texture(iChannel0, vec2(uv.x, uv.y));\n    fragColor = texColor;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Goal here is to mess up with the Nyquist limit\n    float zoom = 25.*floor(20.*(0.2+iMouse.x/iResolution.x));\n    vec2 uv_glitch = fragCoord/iResolution.xy * zoom;\n    float value = sin(iTime + uv_glitch.x * uv_glitch.x + uv_glitch.y * uv_glitch.y);\n    vec3 color_glitch = vec3(value, value*value, 1.0-value);\n    \n    fragColor = vec4(color_glitch,1.0);  \n}","name":"Buffer A","description":"","type":"buffer"}]}