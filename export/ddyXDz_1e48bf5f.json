{"ver":"0.1","info":{"id":"ddyXDz","date":"1680947914","viewed":45,"name":"TP 3 Animation","username":"ByWizKi","description":"animation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n//v = vitesse\n//r = rayon de la balle\nfloat rebond( in vec2 p, float v )\n{\n    return (abs((10.*cos(p.x/1.+(v*iTime))))+0.);  \n}\n\n\nfloat arc(in vec2 p, float v)\n{\n    return (p.x);\n}\n\n\nvec3 Rotation(vec3 p, vec3 c, vec3 r)\n{\n   \n    float cx = sin(-r.x);\n    float sx = cos(-r.x);\n    float cy = sin(-r.y);\n    float sy = cos(-r.y);\n    float cz = sin(-r.z);\n    float sz = cos(-r.z);\n    p -=c;\n   \n    mat3 Rx = mat3(1.0, 0.0, 0.0,   0.0, cx, -sx,   0.0, sx,cx);\n    mat3 Rz = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Ry = mat3(cz, sz, 0.0,    -sz, cz, 0.0,    0, 0,1.0);\n   \n    return (Rx*Ry*Rz*p)+c;\n}\n\n// Primitives\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Surface( in vec2 p )\n{\n    return 1.5*cos(p.x/1.5+iTime)-1.0;\n}\n\n// Sphere\n// p : Point\n// c : Center\n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n    return length(p-c)-r;\n}\n\n\n\n// Union\n// a, b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n\n// Plan\n// n : normale\n// q : point du plan\nfloat Plan(vec3 p, vec3 q, vec3 n)\n{\n    return dot((p-q), normalize (n));\n}\n\n// intersection entre 2 objet\n// float a : objet 1\n// float b : objet 2\nfloat Intersection(float a, float b)\n{\n    return max(a,b);\n}\n\n//boite moudulable sur toutes les faces\nfloat boite_ter(vec3 p, vec3 c, float d, float e, float f)\n{\n    float r1 = Plan(p,c+vec3(0.,0.,d),vec3(0.,0.,1.));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,-1.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,e,0.),vec3(0.,1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(0.,-e,0.),vec3(0.,-1.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(f,0.,0.),vec3(1.,0.,0.)));\n    r1 = Intersection(r1, Plan(p,c+vec3(-f,0.,0.),vec3(-1.,0.,0.)));\n    return r1;\n\n}\n\n\n//cylindre infinie orienté en z\nfloat cylindre_inf (vec3 p, vec3 c, float r)\n{\n    float n=length(p.xy-c.xy)-r;\n    return n;\n}\n\n\n//difference entre 2 float\nfloat difference(float a, float b)\n{\n    return max(a,-b);\n}\n\n\n//cylindre orienté en z\nfloat cylindre_z(vec3 p, vec3 c, float r, float d)\n{\n    float n=length(p.xy-c.xy)-r;\n    n=difference(n,Plan(p,c+vec3(0.,0.,-d),vec3(0.,0.,1.)));\n    n=difference(n,Plan(p,c+vec3(0.,0.,d),vec3(0.,0.,-1.)));\n    return n;\n}\n\n\n//cylindre orienté en y\nfloat cylindre_y(vec3 p, vec3 c, float r, float d)\n{\n    float n=length(p.xz-c.xz)-r;\n    n=difference(n,Plan(p,c+vec3(0.,-d,0.),vec3(0.,1.,0.)));\n    n=difference(n,Plan(p,c+vec3(0.,d,0.),vec3(0.,-1.,0.)));\n    return n;\n}\n\n\n//cylindre orienté en x\nfloat cylindre_x(vec3 p, vec3 c, float r, float d)\n{\n    float n=length(p.yz-c.yz)-r;\n    n=difference(n,Plan(p,c+vec3(-d,0.,0.),vec3(1.,0.,0.)));\n    n=difference(n,Plan(p,c+vec3(d,0.,0.),vec3(-1.,0.,0.)));\n    return n;\n}\n\n\n\n// Segment\n// p : point\n// a,b\nfloat Segment(vec3 p, vec3 a, vec3 b)\n{\n    vec3 ba = b - a;\n    vec3 pa = p - a;\n    float t = dot(pa, ba) / dot(ba, ba);\n    vec3 c = ba * clamp(t, 0.0, 1.0);\n    return length(pa - c);\n}\n\n\n//deplacement de droite à gauche\nfloat droiteGauche (in vec2 p, float v)\n{\n\n    return 2.*cos(p.x/1.5+v*(iTime))-1.0;\n\n}\n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Surface( p.xy );\n    float h = ((p.z-z)/2.0); // Lipschitz is defined as a constant 2.0\n    return h;\n}\n\n//ondulation du drapeau\nfloat ImplicitTerrainV(in vec3 p)\n{\n\n    float z = droiteGauche( p.xz, 2. );\n    float h = (p.y - z)/2.0;\n    return h;\n\n}\n\n//ondulation de la deuxieme face du drapeau\nfloat ImplicitTerrainU(in vec3 p)\n{\n    p.y = p.y + 0.1;\n    float z = droiteGauche( p.xz, 2. );\n    float h = (p.y - z)/2.0;\n    return h;\n\n}\n\n\n//Objet drapeau\n//float longueurDrap : longueur du drapeau\n//float hauteurDrap : hauteur du drapeau\n//float hauteurManche : hauteur du manche\n//float diamManche : diametre du manche\n//la fonction renvoie un drapeau \n//ex  float v = drapeau(p, 3., 3., 5., 0.6); renvoie un drapeau de grande taille avec un manche moyen\nfloat drapeau(vec3 p, float longueurDrap , float hauteurDrap, float hauteurManche, float diamManche)\n{\n\n    //crétion de la base de l'ondulation\n    float u = difference(ImplicitTerrainV(p), ImplicitTerrainU(p));\n    //déplacement du manche du drapeau\n    float c = droiteGauche(p.xz, 2.);\n    //découpage du drapeau à la bonne taille\n    u = Intersection(u,boite_ter(p,vec3(-longueurDrap, 0., -hauteurDrap+hauteurManche), 5.+hauteurDrap, 10., 10.+longueurDrap));\n    //assemblage du drapeau + manche\n    u = Union(u, cylindre_z(p,vec3(10,c,-5),diamManche, 10.+hauteurManche));\n    return u;\n\n}\n\n//bouleArc\n//vec3 p : point\n//ex : bouleArc(p) renvoie l'animation d'une boule qui fait un arc de cercle sur une demi sphere.\nfloat bouleArc(vec3 p)\n{\n    //animation arc de cercle\n    vec3 c = vec3(Rotation(p,vec3(0.,0.,4.),vec3(0.,0.,0.5*4.*sin(iTime*4.))));\n    float objet;\n    float boule = Sphere(c,vec3(0.,0.,-4.),1.);\n    float demiSphere = Intersection(Sphere(p,vec3(0.,0.,0.),10.) , Plan(p, vec3(0.,0.,0.), vec3(0.,0.,1.)));\n    objet = Union(boule, demiSphere);\n    return objet;\n}\n\n\n//fil : cylindre qui ondule\n//vec3 p : point\n//float longueurFil : longueur du fil\n//float diamFil : diametre du fil\n//ex : fil(p, ,10., 1.) renvoie un fil qui ondule long et moyennment gros\nfloat fil(vec3 p, float longueurFil, float diamFil){\n    \n    //Animation ondulation droite gauche\n    float c = droiteGauche(p.xz, 2.);\n    // creation du cylindre avec l'animation\n    float u = cylindre_x(p,vec3(10.,c,-5),2.+diamFil,5.+longueurFil);\n    return u;\n\n}\n\n//serpent : objet serpent qui ondule\n//vec3 p : point\n//float longueurSerp : longueur du serpent\n//float diamSerp : diametre du serpent\n//ex : serpent(p, 10., 1.) renvoie un serpent de taille moyenne\nfloat serpent(vec3 p, float longueurSerp, float diamSerp)\n{\n\n    float u;\n    float c = droiteGauche(p.xz, 2.);\n    u = fil(p, longueurSerp, diamSerp);\n    u = Union(u,Sphere(p, vec3(1.,1.,c),5.));\n    return u;\n}\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p){\n\n\n    vec2 a=vec2(1.0,1.0);\n    float h=rebond(a, 3.);\n \n \n    //vec3 c=vec3(a,h+0.5);\n    //float t = Sphere(p,c,0.5);\n    float t_2 = Intersection(Sphere(p,vec3(0.,0.,0.),10.) , Plan(p, vec3(0.,0.,0.), vec3(0.,0.,1.)));\n    //t = Union(t,t_2);\n    //vec3 c=vec3(a.x,a.y, h+1.5);\n    //vec3 c1=vec3(a.x,a.y,h+1.5);\n    //vec3 c=vec3(Rotation(p, vec3(0, 1, 6), vec3(0,0,2.0*iTime)));\n    //float u=capsule_z(p,c+vec3(0,0,5),3.,0.5);\n    //u=Union(u,Sphere(p,c,2.));\n    //u=Union(u,Sphere(p,c1,2.));\n   \n    //n = nombre de tours effectué par la sphere\n \n    //sphere qui fait un arc de cercle\n    float u = bouleArc(p);\n \n    //drapeau\n    float v = drapeau(p, 3., 3., 2., 0.6);\n \n    //fil\n    float w = fil(p, 7., 2.);\n \n    //vec2 a=vec2(1.0,1.0);\n    //float h=Surface(a);\n    //vec3 c=vec3(a,h+0.5);\n    //u=Union(u,Sphere(p,c,0.5));\n \n\n    return u;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=400;// Number of steps\nconst float Epsilon=.0025;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n \n  // Start at the origin\n  float t=0.;\n \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n \n  // Trace ray\n \n  // Hit and number of steps\n  bool hit;\n  int s;\n \n  float t=SphereTrace(ro,rd,100.,hit,s);\n \n  // Shade background\n  vec3 rgb=background(rd);\n \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n   \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n   \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n \n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}