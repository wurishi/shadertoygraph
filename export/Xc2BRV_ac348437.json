{"ver":"0.1","info":{"id":"Xc2BRV","date":"1725238833","viewed":34,"name":"Video Sludge","username":"4LT","description":"Experiments with comparing current frame pixels with previous frame","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["datamoshing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = linear2srgb(texelFetch(iChannel0, ivec2(fragCoord), 0).xyz);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float SPEED = 80.;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fragNorm = fragCoord.xy/iResolution.xy;    \n    float d = texelFetch(iChannel2, ivec2(fragCoord)/RECT, 0).w;\n    float dx = texelFetch(iChannel2, ivec2(fragCoord)/RECT+ivec2(-1, 0), 0).w\n        - texelFetch(iChannel2, ivec2(fragCoord)/RECT+ivec2(1, 0), 0).w;\n    float dy = texelFetch(iChannel2, ivec2(fragCoord)/RECT+ivec2(0, -1), 0).w\n        - texelFetch(iChannel2, ivec2(fragCoord)/RECT+ivec2(0, 1), 0).w;\n        \n    vec2 vel = vec2(dx, dy) * SPEED;\n    vec2 velNorm = vel/iResolution.xy;\n    \n    vec3 vidCol = srgb2linear(textureLod(iChannel1, fragNorm+velNorm, 0.).xyz);\n    vec3 lastCol = texelFetch(iChannel0, ivec2(fragCoord-vel), 0).xyz;\n    \n    vec3 col;\n    if (d < THRESHOLD) {\n        col = lastCol;\n    } else {\n        col = vidCol;\n    }    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float GAMMA = 0.4545;\nconst ivec2 RECT = ivec2(16, 16);\nconst float RECT_AREA = float(RECT.x * RECT.y);\nconst float THRESHOLD = 0.01;\nconst vec3 WEIGHTS = vec3(0.7, 1.0, 0.4);\n\nvec3 linear2srgb(vec3 inCol) {\n    return pow(inCol, vec3(1./GAMMA));\n}\n\nvec3 srgb2linear(vec3 inCol) {\n    return pow(inCol, vec3(GAMMA));\n}\n\nfloat colorDiff(vec3 c1, vec3 c2) {\n    vec3 delta = (c1-c2) * WEIGHTS;\n    return length(delta)/length(WEIGHTS);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 accum = vec3(0.);\n    for (int i = 0; i < RECT.x; i++)\n    for (int j = 0; j < RECT.y; j++) {\n        ivec2 px = ivec2(fragCoord)*RECT + ivec2(i, j);\n        vec2 pxNorm = vec2(px)/iResolution.xy;\n        accum+= srgb2linear(textureLod(iChannel0, pxNorm, 0.).xyz);\n    }\n    \n    vec3 vidCol = accum/RECT_AREA;\n    vec3 lastCol = texelFetch(iChannel1, ivec2(fragCoord), 0).xyz;\n    float d = colorDiff(vidCol, lastCol);\n    \n    vec3 col;\n    if (d < THRESHOLD) {\n        col = lastCol;\n    } else {\n        col = vidCol;\n    }\n    \n    fragColor = vec4(col, d);\n}","name":"Buffer B","description":"","type":"buffer"}]}