{"ver":"0.1","info":{"id":"flSyzw","date":"1649325948","viewed":55,"name":"tp 5&6 n","username":"arissad","description":"tp 5&6","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 400;      // Number of steps\n\n// Lipschitz constant\nconst float K=2.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// ma : couleur ambiante\n// md : couleur diffus\n// ms : couleur spéculaire\n// a : coefficient de pondération ambiant\n// d : coefficient de pondération diffus\n// s : coefficient de pondération spéculaire\n// sigma \nstruct T\n{\n    vec3 ma;\n    vec3 md;\n    vec3 ms;\n    float a;\n    float d;\n    float s;\n    float sigma;\n    };\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Les primitives smooth et flatten permettent de tracer les montagnes.   \n\nfloat Smooth( in float x, in float r)\n{\n    x/=r;\n    x=clamp(x,0.0,1.0); // clamp entre 0 et 1 permet de tracer une ligne continue entre les coordonnées 0 et 1\n    float y=(1.0-x*x);\n    return y*y*y;\n}\n\nfloat Flatten( in vec2 p, in float h, in vec3 c, in float r)\t\n{\t\n    //p permet de définir l'axe sur lequel tracer la montagne\n    //h prend en paramètre le terrain\n    //c est un vec3 avec pour paramètres la position de la montagne\n    //r permet de modifier l'épaisseur d'une montagne\n    float d = length(p-c.xy);\t\n    float u = Smooth(d,r);\t\n    float h1=h;\t\n    float h2=c.z;\t\n    return mix(h1,h2,u); \n}\n\n// Terrain heightfield\n// x : Position in the plane\n// permet de modéliser le terrain de base, avec un Noise pour donner un aspect rocailleux\nfloat Terrain( in vec2 p)\n{\n    p = p/530.0;\n    float a = 0.0;\n    float b = 1.0;\n    for( int i=0; i<9; i++ )\n    {\n        float n = Noise(p);\n        a += b*n;\n\t\tb *= 0.5;\n        p *= (mat2(0.8,-0.6,0.6,0.8)*2.0);\t\n    }\t\n\treturn 200.0*a - 210.0;\n\n} \n\n// Implicit surface defining the terrain\n// p : Point\nV ImplicitTerrain(in vec3 p, int index)\n{\n    float z = Terrain( p.xy );\t\n\tz = Flatten(p.xy, z, vec3(200.0,200.0,300.0), 200.0); //montagne du milieu\n    z = Flatten(p.xy, z, vec3(250.0,0.0,230.0), 120.0); //montagne de droite\n    z = Flatten(p.xy, z, vec3(200.0,0.0,100.0), 120.0); //allongment de la montagne de droite\n    z = Flatten(p.xy, z, vec3(0.0,270.0,170.0), 120.0); //montagne de gauche\n    float h = p.z - z; \t\n    return V(h/4.0,index);\n    \n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n//Différence ( max(a,-b) )\nV difference(V a,V b)\n{\n\treturn V(max(a.v,-b.v),a.i);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Water heightfield\n// x : Position in the plane\n// les fonctions water et implicit water modélisent l'eau et l'animent avec itime\nfloat Water( in vec2 x )\n{\n    return 25.0*Noise(x/50.0+iTime)- 25.0;\n} \n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitWater(in vec3 p, int index)\n{\n\tfloat h = p.z - Water( p.xy );\n    return V(h,index);\n}\n\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV Object(vec3 p)\n{\n  V u = Intersection(Union(difference(ImplicitTerrain(p,0),\n      Sphere(p,vec3(100.0,110.0,0.0),90.0,2)),\n      ImplicitWater(p,1)),\n      Sphere(p,vec3(0.0,0.0,0.0),400.0,2));\n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = Object(p);\n    float v = vp.v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\n// changer couleur arrière plan\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nvec3 TextureRock(in vec3 p)\n{\n  // couleur de la pierre\n  return mix(vec3(0.20,0.20,0.30),vec3(0.60,0.60,0.80),Fbm(p/30.0));   \n}\n\nvec3 TextureWater(in vec3 p)\n{\n  // couleur de l'eau\n  return mix(vec3(0.01,0.1,0.3),vec3(0.01,0.1,0.3),Fbm(p/30.0));   \n}\n\nvec3 TextureSable(in vec3 p)\n{\n   // couleur du sable\n   return mix(vec3(0.80,0.40,0.10),vec3(0.80,0.50,0.20),Fbm(p/50.0));\n   \n}\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n     V vp= Object(p);\n    if (vp.i==0)\n    {      \n        return TextureRock(p);\n    }\n    else if (vp.i==1)\n    {\n        return TextureWater(p);\n    }\n\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    V vp= Object(p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        if (vp.i==0)\n        {\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n        \n        //Sable à partir d'une certaine altitude, avec un effet dégradé\n        float sable = smoothstep(20.0, -10.0, p.z ); \n        col = mix(col,TextureSable(p), sable);\n          \n         // Neige\n         float neige = 0.0;\n            // Neige selon altitude\n            neige = smoothstep(150.0, 250.0, p.z + 150.0*Noise(p/250.0));\n            // Neige selon pente\n            if(dot(n, vec3(0.0,0.0,1.0)) < 0.45) neige = 0.0;\n            if(neige < 0.0) neige = 0.0;\n         col = mix(col, vec3(0.9, 0.9, 1.0), neige);\n         }else{\n         \n         vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n         \n         }\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\n\n\n// Bruit 3D\n// p : point\n\nvec3 N3D(vec3 p) {\n    return vec3(Noise(p+vec3(14,51,10)),Noise(p+vec3(14,51,10)),Noise(p+vec3(14,51,10)));\n}\n\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\nfloat turbulence(vec2 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses \n// o permet de modifier le nombre d'octaves\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*Noise(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n    \n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,50.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}