{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define N 4\n\n\nfloat signedPow(float x, int n){\n    \n    float o = 1.;\n    \n    for(int i = 1; i < n; i++){\n        \n        o *= x;\n        \n    }\n    \n    return o;\n}\n\n\n//https://www.desmos.com/calculator/n4dcps2xaf\nvec2 v(float t, vec2[4] p){\n    vec2 vOut = vec2(0.);\n    \n    \n    for(int n = 0; n < N; n++){\n        \n        float numerator = 1.;\n        \n        for(int k = 0; k < N; k++){\n            if(k != n){\n                numerator *= ((float(k) / float(N - 1)) - t);\n            }\n        }\n        \n        \n        \n        float denominator = 1.;\n        \n        for(int k = 0; k < N; k++){\n            if(k != n){\n                denominator *= ((float(k) / float(N - 1)) - (float(n) / float(N - 1)));\n            }\n        }\n        \n        vOut += p[n] * (numerator / denominator);\n    }\n    \n    \n    \n    return vOut;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    vec4 col = vec4(0.);\n    \n    float d = 0.;\n    \n    vec2 p[N] = vec2[N](vec2(.12, .85), vec2(.24, .42), vec2(.24, .17), vec2(.71, .64));\n    \n    for(int i = 0; i < N; i++){\n        p[i] *= iResolution.xy;\n    }\n    \n    p[1] = (min(iResolution.x, iResolution.y) / 2.25) * vec2(cos(iTime), sin(iTime));\n    p[1] += iResolution.xy / 2.;\n    \n    \n    if(iMouse.z > 0.){\n        p[2] = iMouse.xy;\n    }\n    \n    \n    for(float i = 0.; i < 1.; i+= .005){\n        \n        d = distance(fragCoord, v(i, p));\n        d *= d * d * d;\n        d += .0001;\n        \n        col += 1. / d;\n    }\n    \n    for(int i = 0; i < N; i++){\n        \n        d = distance(fragCoord, p[i]);\n        d *= d;\n        d += .0001;\n        \n        col += 10. * vec4(1., 1., 0., 1.) / d;\n        \n    }\n    \n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfVfRc","date":"1734311605","viewed":71,"name":"Multipoint Interpolation","username":"Rugged","description":"Interpolation for multiple points.\n\nThe formula seen in the desmos and seen here works for blending *anything* just as the mix() function does. Unfortunately it is n^2 complexity.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["mix","lerp","interpolation"],"hasliked":0,"parentid":"","parentname":""}}