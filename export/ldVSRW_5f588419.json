{"ver":"0.1","info":{"id":"ldVSRW","date":"1464226692","viewed":459,"name":"Platformer","username":"hypothete","description":"Another 2D signed distance function experiment based off code by daseyb / mercury.sexy. With this one I was trying to emulate platformer terrain, like from Mario or Sonic games.\nUse your cursor to subtract out regions - any input on bevel shading?","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","sdf","platform","videogame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //postprocess the surfaces\n    vec4 bufferA1 = texture(iChannel0, uv);\n    vec4 bufferA2 = texture(iChannel0, vec2(uv.x,uv.y-1./iResolution.y));\n    fragColor = bufferA2;\n    bool inside = false;\n    if(bufferA2.r > 0. || bufferA2.g > 0.){\n    \tinside = true;\n    }\n    \n    if(bufferA1.g > bufferA2.g){\n        //top\n        fragColor.g *= 1.;\n    }\n    else if(bufferA1.g < bufferA2.g){\n        //bottom\n        fragColor.g *= 0.25;\n    }\n    else{\n        //sides\n        fragColor.g *= 0.5;\n    }\n    if(inside){\n        float checkersize = 32.;\n        bool checkerboard = mod(floor(uv.x*checkersize)+floor(uv.y*checkersize),2.0) == 0.;\n        fragColor.rgb = checkerboard ? fragColor.rgb : fragColor.rgb*vec3(0.8,0.8,1.);\n        fragColor.b = max(fragColor.b, fragColor.r);\n        fragColor.r = 0.;\n    }\n    else{\n        fragColor.rgb = texture(iChannel1, uv).rgb;\n    }\n    //fragColor = bufferA2;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"////////////////////////\n// Settings\n////////////////////////\n#define FALL_OFF 0.05\n#define TWIDTH 20.\n#define REALTWIDTH floor(iResolution.xx / TWIDTH)\n\n////////////////////////\n// Utility Methods\n////////////////////////\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);   \n}\n\nvec2 tile(vec2 position){\n    return floor(iResolution.xx / TWIDTH) * position; \n}\n\n////////////////////////\n// Operations\n////////////////////////\nfloat opUnion(float d1, float d2) {\n    return min(d1, d2);\n}\n\nfloat opIntersection(float d1, float d2) {\n    return max(d1, -d2);\n}\n\nfloat opUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.0);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\nfloat opUnionChamfer(float a, float b, float r) {\n\treturn min(min(a, b), (a - r + b)*sqrt(0.5));\n}\n\nfloat opUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\nfloat opSubtract(float a, float b){\n\treturn max(a, -b);\n}\n\nfloat displacement(vec2 p, float scale, float period, float speed){\n     return scale*sin(period*p.x+iTime*0.7*speed)*sin(0.6*period*p.y+iTime*0.8*speed);\n}\n\n////////////////////////\n// Primitives\n////////////////////////\nfloat sdBox(vec2 p, vec2 pos, vec2 e) {\n\tvec2 d = abs(p-pos)-e;\n    return length(max(d, vec2(0))) + vmax(min(d, vec2(0)));\n}\n\nfloat sdCircle (vec2 p, vec2 pos, float r) {\n\treturn length(p - pos) - r;\n}\n\n////////////////////////\n// Scene\n////////////////////////\nfloat scene(vec2 p) {\n    \n    float staticD = sdBox(p, tile(vec2(2.)),tile(vec2(2.)));\n    \n    staticD = opUnion(staticD, sdBox(p, tile(vec2(17., 3.)),tile(vec2(3.,1.))));\n    staticD = opUnion(staticD, sdBox(p, tile(vec2(19., 1.)),tile(vec2(2.,3.))));\n    \n    //island\n    staticD = opUnionRound(staticD, sdBox(p, mix(tile(vec2(5., 1.)),tile(vec2(16., 1.)),sin(iTime)/2.+0.5),tile(vec2(2.,1.))),float(REALTWIDTH));\n    \n    //globs\n    staticD = opUnionRound(staticD, sdCircle(p, mix(tile(vec2(16., 3.)),tile(vec2(16., 7.)),sin(iTime)/2.+0.5), float(REALTWIDTH)), TWIDTH);\n    staticD = opUnionRound(staticD, sdCircle(p, mix(tile(vec2(19., 2.)),tile(vec2(19., 7.)),cos(iTime)/2.+0.5), float(REALTWIDTH)), TWIDTH);\n    \n    staticD = opSubtract(staticD, sdCircle(p, iMouse.xy, TWIDTH*2.));\n    \n    return staticD;\n}\n\n////////////////////////\n// Visualization\n////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    float dist = scene(uv);\n    \n    vec3 colorInside = mix(vec3(1.,1.,0), vec3(1.,0.,0.), -dist * FALL_OFF);\n    vec3 colorOutside = vec3(0);\n    \n    vec3 finalColor = dist < 0.0 ? colorInside : colorOutside;\n    \n\tfragColor = vec4(finalColor,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x -= 0.5;\n    uv.x *= 1.5 * uv.y;\n    float uvy = uv.y;\n    uv.y += iTime/40.;\n    \n    fragColor = vec4(texture(iChannel0,uv*8.).rgb,1.0);\n    fragColor.rgb -= uvy;\n}","name":"Buf B","description":"","type":"buffer"}]}