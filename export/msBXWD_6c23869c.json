{"ver":"0.1","info":{"id":"msBXWD","date":"1673831400","viewed":159,"name":"Morning Jimin Lilies","username":"Emery","description":"A CS 4450 Project studying and applying shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["flowers","bts"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( vec2 p, float r)\n{\n    return length(p) - r;\n}\n\n// From: https://iquilezles.org/articles/distfunctions2d/\nfloat sdPentagon(vec2 p, float r)\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\n// From: https://iquilezles.org/articles/distfunctions2d/\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\nfloat sig(float x)\n{\n    return 1.0/(1.0 + exp(-100.0*x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= (iResolution.y/iResolution.x);\n    \n    // Added for pentagon\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // Time for morph\n    float t = 0.5 + 0.5*cos(iTime);\n    \n    //CHANGE IN SHAPE\n    float dist1 = sdPentagon(p, 0.5);\n    float dist2 = sdHexagram(p, 0.35);\n    \n    //Mix linear int of position\n    float linearInt = mix(dist1, dist2, t);\n\n    //CHANGE IN COLOR\n    //Instead of interpolating between vec3(1.0,0.0,0.0) \n    //and the background color, we use a color that \n    //depends on the pixel location\n    float tCol = t * (iResolution.x);\n    \n    //mix (color, color, distance)\n    \n    float c0 = (uv.y - 0.5) * t;\n    \n    //Controls innershape color\n    vec3 col1 = vec3(1.0, 0.2, 0.5);\n    vec3 col = 3.0*cos(uv.y + uv.xyx+vec3(0,2,4));\n    \n    //Mixes the colors together\n    vec3 mixCol = mix(col1, col, linearInt + iTimeDelta);\n    \n    //Transform between the 2 shapes\n    vec3 morph = mix(mixCol, vec3(0.0,0.0,0.0), step(0.0,linearInt));\n\n    // Output to screen\n    fragColor = vec4(morph,1.0);\n}","name":"Image","description":"","type":"image"}]}