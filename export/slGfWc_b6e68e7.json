{"ver":"0.1","info":{"id":"slGfWc","date":"1665358570","viewed":116,"name":"space frame 2","username":"jt","description":"Implementation of a kind of [url=https://en.wikipedia.org/wiki/Space_frame]space frame[/url] with octahedral-tetrahedral structure (polyhedra NOT regular). Intended to be used for architecture and buildings shaders. Efficient, due to lots of symmetries.\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["grid","space","repetition","honeycomb","mesh","architecture","construction","frame","building","limited","truss","spaceframe","hexakis","octet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/slGfWc space frame 2 by jt\n// based on https://www.shadertoy.com/view/7tGBD3 space frame\n// Implementation of a kind of https://en.wikipedia.org/wiki/Space_frame\n// with octahedral-tetrahedral structure (polyhedra NOT regular).\n// Intended to be used for architecture and buildings shaders.\n// Efficient, due to lots of symmetries.\n\n// tags: grid, space, repetition, honeycomb, mesh, architecture, construction, frame, building, limited, truss, spaceframe, hexakis, octet\n// (additional tags: 3d, cubic, Pyramidille, Goursat tetrahedron)\n\n// See also https://en.wikipedia.org/wiki/Tetragonal_disphenoid_honeycomb#Hexakis_cubic_honeycomb\n\n// MIT license, from https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p) - s;\n}\n\n// based on https://iquilezles.org/articles/distfunctions/\nfloat line( vec3 p, vec3 a, vec3 b )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// based on https://www.shadertoy.com/view/3syGzz Limited Repetition SDF by iq\n// https://iquilezles.org/articles/distfunctions\nvec3 opRepLim( in vec3 p, in vec3 lima, in vec3 limb )\n{\n    p += 0.5;\n    return p - clamp(floor(p),lima,limb);\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\nfloat element(vec3 p) // space-grid fundamental cube by jt (efficient, thanks to lots of symmetries: nodes form body centric cubic)\n{\n    p = abs(p - 0.5) + 0.5; // mirror symmetry\n    p.yz = p.y < p.z ? p.yz : p.zy; // reflect\n    p.xy = p.x < p.y ? p.xy : p.yx; // reflect\n    return min(line(p, vec3(1), vec3(0,1,1)), line(p, vec3(1), vec3(0.5)));\n}\n\nfloat spacegrid(vec3 p, vec3 lima, vec3 limb)\n{\n    return element(opRepLim(p, lima, limb));\n}\n\nfloat map(vec3 p)\n{\n    float d = DIST_MAX;\n    d = min(d, halfspace(p));\n    //d = min(d, sdSphere(p, 0.1)); // mark origin\n    d = min(d, spacegrid(p-vec3(0,0,0.5),vec3(-2,-2,0),vec3(2,2,2)) - 0.02);\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.0 * (fragCoord.xy) / iResolution.xy - 1.0;\n    p.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 1.0, -7.5 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * p.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX );\n    //brightness *= softshadow(ro+rd*dist,lightdir, 0.01, DIST_MAX, 50. );\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.25), vec3(1), step(0.01, dst.z)); // quick hack to color ground differently\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n    //color = mix(color, vec3(0.0), step(DIST_MAX, dist));\n    color = mix(color, vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    \n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}