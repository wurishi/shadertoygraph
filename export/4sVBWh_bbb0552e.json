{"ver":"0.1","info":{"id":"4sVBWh","date":"1528627904","viewed":73,"name":"Mandlebrot Fractal","username":"sujay","description":"mandlebrot shaders ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n\t//uv.x= uv.x+0.7+abs(cos(iTime/20.0));\n    //uv = uv*abs(sin(iTime));\n    \n    //uv =(uv*3.0)/abs(sin(iTime/3.0)) - abs(sin(iTime/3.0));\n    //uv =(uv*2.0) - 2.0;\n\t\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec2 z = vec2(0.0, .0);;\n    vec2 c = uv*sin(iTime/3.0);\n    int iter=20;\n    float flag =1.0;\n    int j= 0;\n    \n    for(int i =0; i<iter;i++)\n    {\n        z = vec2(z.x*z.x -z.y*z.y, 2.0*z.x*z.y) + c;\n        j = i;//iter -i;\n\t\tif((z.x*z.x +z.y*z.y) > 4.0)\n        {\n            flag = 0.0;\n            break;\n        }\n    }\n    \n    float sn = float(j) - log2(log2(dot(z,z)));// + 40.0;\n    if(flag == 1.0)\n    {\n        fragColor = vec4(vec3(sn), 1.0);\n    }\n    else\n    \tfragColor=vec4(vec3(float (j)/float(iter),float (j)/float(iter) ,0.0)*col,1.0);\n   \n}","name":"Image","description":"","type":"image"}]}