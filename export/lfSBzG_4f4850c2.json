{"ver":"0.1","info":{"id":"lfSBzG","date":"1731025389","viewed":46,"name":"Glass of Tea","username":"tomcatfish","description":"Just a cold glass of sine(tea). Mostly meant to be run with 3-5 LAYERS to look like a cheap keychain trick. Running with higher layer counts looks nifty though.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","demo","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The number of layers of tea to draw\n// We divide the effect of each layer so that the sum does what we want\nconst int LAYERS = 30;\n\nconst vec3 DRINK_COLOR = vec3(.25, .50, .28);\nconst vec3 BACKGROUND_COLOR = vec3(0.2,0.4,0.7) / 2.;//vec3(1.);\n\nconst float HEIGHT_TOP = 0.8;\nconst float HEIGHT_BOTTOM = 0.2;\nconst float CUP_SLANT = 8.0;\n\nconst float TWOPI=6.28;\n\nfloat rand_f(float data) {\n    //return ( sin(sin(data*100.)) + 1.0) * 0.5;\n    return ( sin(4. * data * (1. - data)) + 1.0) * 0.5;\n}\n\nfloat rand_between(float low, float high, float layer) {\n    return low + (high-low) * 0.5 * rand_f(layer + high-low);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n    vec2 uv_offset = uv - vec2(0.5, 0.5);\n    \n    vec3 color;\n    \n    int hits = 0;\n\n    // Make multiple layers\n    for (float layer = 1.; layer <= float(LAYERS); layer++) {\n        // Some configuration variables for this layer\n        // The difference between them in different layers is\n        // what makes the effect work!\n        float height = rand_between(0.5, 0.9, layer + sin(2.*layer+iTime/200.));\n        float amplitude = rand_between(0.1, 0.15, layer);\n        // The jitter on this variable causes *most* of the movement here\n        float waves_per_glass = rand_between(1., 8.0, layer + sin(layer+iTime/500.));\n\n\n        // The time averaged power is proportional to amp^2 * angularv^2\n        // I also add some jitter to make it feel more chaotic\n        amplitude = 0.1 / waves_per_glass + rand_between(0.0,0.01, layer);\n        \n        float wave = amplitude * sin(TWOPI*waves_per_glass*uv.x + iTime/1000.) + height;\n        \n        hits += uv.y < wave ? 1 : 0;\n    }\n\n    vec3 calculated_color = float(LAYERS - hits + 1)/float(LAYERS) * DRINK_COLOR;\n    \n    bool in_glass = (uv.y > HEIGHT_BOTTOM) && (uv.y < HEIGHT_TOP) &&\n        (uv.y > (uv_offset.x - .08) * CUP_SLANT) && (uv.y > (uv_offset.x + .08) * -CUP_SLANT);\n\n    /*\n    float dist_glass = min(\n        min( abs(uv.y - HEIGHT_BOTTOM), abs(uv.y - HEIGHT_TOP) ),\n        min( abs(uv.y - (uv_offset.x - .04) * CUP_SLANT), abs(uv.y - (uv_offset.x + .04) * -CUP_SLANT) )\n    );\n    */\n    \n    color = (hits > 0) && in_glass ? calculated_color : BACKGROUND_COLOR;\n    //color = abs(dist_glass) < 0.01 ? vec3(0.5) : color;\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n\n// TODO: Add bubbles\n// OPT1: Simple bubbles remove 1 layer of hits\n// OPT2: 3d bubbles remove based on radius size. If LAYERS is high enough, this will look neat","name":"Image","description":"","type":"image"}]}