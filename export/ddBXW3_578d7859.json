{"ver":"0.1","info":{"id":"ddBXW3","date":"1670981104","viewed":178,"name":"blackhole sun","username":"Carandiru","description":"made a really simple effect for a black hole.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sun","star","hole","black"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates of the current pixel\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0f - 1.0f;\n    \n    vec3 uvw = vec3(uv.xy, pow(sqrt(uv.y*uv.y + uv.x*uv.x) * iTime, -sqrt(iTime)));\n    \n    // The center of the projection, known as the \"pole\"\n    vec3 pole = vec3(0.15 * -iTime, 0.15 * -iTime, 0.15 * -iTime);\n\n    // The distance from the current pixel to the pole\n    float r = distance(uvw, pole);\n\n    // The angle of the current pixel relative to the pole\n    float theta = atan(uv.y - pole.y, uv.x - pole.x);\n\n    // The stereographic projection of the current pixel\n    vec2 p = vec2(2.0 * r * cos(theta), 2.0 * r * sin(theta));\n\n    // Map the stereographically projected point back to the image plane\n    //uv = (p + 1.0) / 2.0;\n    uv = p * 0.5f + 0.5f;\n    // Sample the equirectangular projection image at the projected point\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}