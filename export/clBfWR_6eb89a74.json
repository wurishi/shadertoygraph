{"ver":"0.1","info":{"id":"clBfWR","date":"1693916858","viewed":29,"name":"myshader23423423423424234","username":"snadaked","description":"code","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["code"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 RectangleBottomLeft = vec2(0.5, 0.05);\nvec2 RectangleTopRight = vec2(0.65, 0.65);\n\nbool IsInRectangle(vec2 uv, in float iTime) {\n    RectangleBottomLeft.x += 0.05 * 9.0*sin(iTime);\n    RectangleTopRight.x += 0.05 * 8.6*sin(iTime);\n    return(uv.x>=RectangleBottomLeft.x && uv.x<=RectangleTopRight.x && uv.y>RectangleBottomLeft.y \n    && uv.y<=RectangleTopRight.y); \n    \n}\n\nvec3 computeTriangleGradient(vec2 uv, vec3 v0, vec3 v1, vec3 v2, vec3 colStart, vec3 colEnd, float offset)\n{\n    float alpha = (uv.x - v0.x) / (v2.x - v0.x); \n    vec3 gradientColor = mix(colStart, colEnd, alpha + offset); \n    return gradientColor;\n}\n\nbool isInsideTriangle(vec3 v0, vec3 v1, vec3 v2, vec2 p)\n{\n    float area = 0.5 * (-v1.y * v2.x + v0.y * (-v1.x + v2.x) + v0.x * (v1.y - v2.y) + v1.x * v2.y);\n    float s = 1.0 / (2.0 * area) * (v0.y * v2.x - v0.x * v2.y + (v2.y - v0.y) * p.x + (v0.x - v2.x) * p.y);\n    float t = 1.0 / (2.0 * area) * (v0.x * v1.y - v0.y * v1.x + (v0.y - v1.y) * p.x + (v1.x - v0.x) * p.y);\n    float w = 1.0 - s - t;\n    return (s >= 0.0 && t >= 0.0 && w >= 0.0);\n}\n\n\nbool IsInCircle(vec2 uv, vec2 CircleCentre, float CircleRadius) { \n  float d = length(vec2(CircleCentre.x, CircleCentre.y)) - CircleRadius;\n  if(d>0.) return false; else return true;\n}\n\nfloat Z_triangle(vec2 uv, vec3 v0, vec3 v1, vec3 v2){\n    float Z = v0.z + (v1.z - v0.z) * uv.x + (v2.z - v0.z) * uv.y+0.3;\n    return Z;\n}\n\nfloat Z_circle(vec2 CircleCentre, float r, float z_offset){\nfloat Z =z_offset+sqrt((r*r-(CircleCentre.x)*(CircleCentre.x)-(CircleCentre.y)*(CircleCentre.y)));\nreturn Z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = fragCoord/iResolution.xy * vec2(iResolution.x/iResolution.y, 1.0);\n    \n    float offset1 = 0.05 * sin(iTime); \n    vec2 offset2 = vec2(sin(iTime*2.)*0.2, cos(iTime*2.)*0.2);\n        \n    float r1 = 0.3*(0.5 + 0.5 * sin(2.0 * iTime));\n    vec2 CircleCentre1=vec2(0.4, 0.3);\n    CircleCentre1.x= uv.x - 0.05 * tan(iTime)-0.4;\n    CircleCentre1.y= uv.y - 0.05 * sin(iTime)-0.3;\n    \n    float r2 = 0.1;\n    vec2 CircleCentre2=vec2(0.9, 0.9);\n    CircleCentre2.x= uv.x+offset2.x-1.2;\n    CircleCentre2.y= uv.y+offset2.y-0.7;\n    \n    vec3 v0 = vec3(0.5+offset2.x, 0.4+offset2.y, 1.0);\n    vec3 v1 = vec3(1.1+offset2.x, 0.7+offset2.y, 1.0);\n    vec3 v2 = vec3(0.9+offset2.x, 0.8+offset2.y, 1.0);\n    \n    vec3 v3 = vec3(0.8, 1.0-offset1, 3.);\n    vec3 v4 = vec3(1.9, 0.6-offset1, 0.);\n    vec3 v5 = vec3(1.2, 0.2-offset1, 5.);\n    \n    bool arr[5];\n    arr[0]=IsInRectangle(uv, iTime);\n    arr[1]=IsInCircle(uv, CircleCentre1, r1);\n    arr[2]=isInsideTriangle(v0, v1, v2, uv);\n    arr[3]=IsInCircle(uv, CircleCentre2, r2);\n    arr[4]=isInsideTriangle(v3, v4, v5, uv);\n    \n    vec3 triangleGradientStart = vec3(0.3, 0.8, 0.7);\n    vec3 triangleGradientEnd = vec3(0.3, 0.4, 0.4);\n    vec3 lightGreen = vec3(0.5, 0.7, 0.5);\n    vec3 purple = vec3(0.7, 0.5, 0.8);\n    vec3 stripes = mix(purple, lightGreen, mod(floor((uv.x + offset2.x )* 30.0), 2.0));\n    vec3 col1 = vec3(0.5, 0.5, 0.0);\n    vec3 col2 = vec3(0.0, 0.5, 0.5);\n    vec3 triangleGradientColor = computeTriangleGradient(uv, v3, v4, v5, triangleGradientStart, triangleGradientEnd, offset1);\n    \n    vec4 col[5];\n    col[0]=vec4(0.8, 0.6, 0.7, 1.0);\n    col[1]=vec4(0.6, 0.7, 0.8, 1.0);\n    col[2]=vec4(0.0, 0.5, 0.3, 1.0);\n    col[3]=vec4(stripes, 1.0);\n    col[4] = vec4(triangleGradientColor, 1.0);\n    \n    float z[5];\n    z[0] = 1.3;\n    z[1]= Z_circle(CircleCentre1,r1, 1.15);\n    z[2] = Z_triangle(uv, v0, v1, v2);\n    z[4] = Z_triangle(uv, v3, v4, v5);\n    z[3]= Z_circle(CircleCentre2,r2, 0.8);\n\n    vec4 fin=vec4(0.5*abs(sin(iTime)), 0.5*abs(cos(iTime)), 0.5*abs(sin(0.5+iTime)), 1.0);\n    float max=-1000.0;\n    \n    for(int i=0; i<5; i++){\n        if(arr[i]){if(z[i]>max){fin=col[i]; max=z[i];}}\n    }\n    \n    fragColor = vec4(fin);\n    return;\n}","name":"Image","description":"","type":"image"}]}