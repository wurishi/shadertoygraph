{"ver":"0.1","info":{"id":"ll2cDz","date":"1508294424","viewed":152,"name":"De Rham Curves","username":"rory618","description":"The de rham family of curves, occupying a 3 dimensional space and encompassing a wide range of well known fractals.\nhttps://linas.org/math/de_Rham.pdf\nPress M to toggle mouse control.\nSliders from: https://www.shadertoy.com/view/MscXzn","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["2d","fractal","derham"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 processSliders(in vec2 fragCoord)\n{\n    vec4 sliderVal = texture(iChannel1,vec2(0,0));\n\t//d       = sliderVal[0]*4.0;\n\t//e        = 0.005+sliderVal[1]*0.1;\n\t//l       = sliderVal[2];\n\t//n  = 1.0+sliderVal[3];\n    \n    if(length(fragCoord.xy-vec2(0,0))>1.)\n    {\n    \treturn texture(iChannel1,fragCoord.xy/iResolution.xy);\n    }\n    return vec4(0);\n}\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = -sin(vec4(3,4,5,6)*.4*log(abs(texelFetch(iChannel0, ivec2(i), 0))));  \n    \n    vec4 cSlider = processSliders(i);\n    o.xyz = mix(o.xyz,cSlider.rgb,cSlider.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Buffer A : slider management (this is not required)\n\n#define saturate(x) clamp(x,0.0,1.0)\nvec4 sliderVal = vec4(0.3,0.64,.5,0.5); //Default slider values [0-1]\n\nvoid SLIDER_setValue(float idx, float val)\n{\n    if(idx<0.) return;\n    else if(idx<0.25) sliderVal[0] = saturate(val);\n\telse if(idx<0.50) sliderVal[1] = saturate(val);\n\telse if(idx<0.75) sliderVal[2] = saturate(val);\n\telse if(idx<1.00) sliderVal[3] = saturate(val);\n}\n\nfloat SLIDER_getValue(float idx)\n{\n    if     (idx<0.25) return sliderVal[0];\n    else if(idx<0.50) return sliderVal[1];\n    else if(idx<0.75) return sliderVal[2];\n    else if(idx<1.00) return sliderVal[3];\n\telse return 0.;\n}\n\nvoid SLIDER_init(vec2 mousePos, vec2 cMin, vec2 cMax )\n{\n    vec4 cPingPong = textureLod(iChannel0,vec2(0),0.0);\n    if(length(cPingPong)>0.001)\n        sliderVal = cPingPong;\n        \n    float width = cMax.x-cMin.x;\n    float height = cMax.y-cMin.y;\n    if(mousePos.x>cMin.x && mousePos.x<cMax.x &&\n       mousePos.y>cMin.y && mousePos.y<cMax.y )\n    {\n        float t = (mousePos.y-cMin.y)/height;\n        t = clamp(t/0.75-0.125,0.,1.); //25% top/bottom margins\n\t\tSLIDER_setValue((mousePos.x-cMin.x)/width, t);\n    }\n}\n\n//Returns the distance from point \"p\" to a given line segment defined by 2 points [a,b]\nfloat UTIL_distanceToLineSeg(vec2 p, vec2 a, vec2 b)\n{\n    //       p\n    //      /\n    //     /\n    //    a--e-------b\n    vec2 ap = p-a;\n    vec2 ab = b-a;\n    //Scalar projection of ap in the ab direction = dot(ap,ab)/|ab| : Amount of ap aligned towards ab\n    //Divided by |ab| again, it becomes normalized along ab length : dot(ap,ab)/(|ab||ab|) = dot(ap,ab)/dot(ab,ab)\n    //The clamp provides the line seg limits. e is therefore the \"capped orthogogal projection\", and length(p-e) is dist.\n    vec2 e = a+clamp(dot(ap,ab)/dot(ab,ab),0.0,1.0)*ab;\n    return length(p-e);\n}\n\n//uv = slider pixel in local space [0-1], t = slider value [0-1], ar = aspect ratio (w/h)\nvec4 SLIDER_drawSingle(vec2 uv, float t, vec2 ar, bool bHighlighted)\n{\n    const vec3  ITEM_COLOR = vec3(1);\n    const vec3  HIGHLIGHT_COLOR = vec3(0.2,0.7,0.8);\n    const float RAD = 0.05;  //Cursor radius, in local space\n    const float LW  = 0.030; //Line width\n    float aa  = 14./iResolution.x; //antialiasing width (smooth transition)\n    vec3 selectionColor = bHighlighted?HIGHLIGHT_COLOR:ITEM_COLOR;\n    vec3 cheapGloss   = 0.8*selectionColor+0.2*smoothstep(-aa,aa,uv.y-t-0.01+0.01*sin(uv.x*12.));\n    vec2 bottomCenter = vec2(0.5,0.0);\n\tvec2 topCenter    = vec2(0.5,1.0);\n    vec2 cursorPos    = vec2(0.5,t);\n    float distBar = UTIL_distanceToLineSeg(uv*ar, bottomCenter*ar, topCenter*ar);\n    float distCur = length((uv-cursorPos)*ar)-RAD;\n    float alphaBar = 1.0-smoothstep(2.0*LW-aa,2.0*LW+aa, distBar);\n    float alphaCur = 1.0-smoothstep(2.0*LW-aa,2.0*LW+aa, distCur);\n    vec4  colorBar = vec4(mix(   vec3(1),vec3(0),smoothstep(LW-aa,LW+aa, distBar)),alphaBar);\n    vec4  colorCur = vec4(mix(cheapGloss,vec3(0),smoothstep(LW-aa,LW+aa, distCur)),alphaCur);\n    return mix(colorBar,colorCur,colorCur.a);\n}\n\n#define withinUnitRect(a) (a.x>=0. && a.x<=1. && a.y>=0. && a.y<=1.0)\nvec4 SLIDER_drawAll(vec2 uv, vec2 cMin, vec2 cMax, vec2 muv)\n{\n    float width = cMax.x-cMin.x;\n    float height = cMax.y-cMin.y;\n    vec2 ar = vec2(0.30,1.0);\n    uv  = (uv -cMin)/vec2(width,height); //pixel Normalization\n    muv = (muv-cMin)/vec2(width,height); //mouse Normalization\n    if( withinUnitRect(uv) )\n    {\n        float t = SLIDER_getValue(uv.x);\n\t\tbool bHighlight = withinUnitRect(muv) && abs(floor(uv.x*4.0)-floor(muv.x*4.0))<0.01;\n\t\tuv.x = fract(uv.x*4.0); //repeat 4x\n\t\tuv.y = uv.y/0.75-0.125; //25% margins\n        return SLIDER_drawSingle(uv,t,ar,bHighlight);\n    }\n    return vec4(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cMinSliders = vec2(0.9,0.80);\n    vec2 cMaxSliders = vec2(1.0,1.00);\n    vec2 uvSliders = fragCoord.xy / iResolution.xy;\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    SLIDER_init(mousePos, cMinSliders, cMaxSliders);\n    vec4 cSlider = SLIDER_drawAll(uvSliders,cMinSliders, cMaxSliders, mousePos);\n\n    if(length(fragCoord.xy-vec2(0,0))<1.) \n        fragColor = sliderVal;\n\telse fragColor = cSlider;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define scale 3.\n#define shift vec2(1,1)\n\n#define d0 mat3(1,0,0,0,a,d,0,b,e)\n#define d1 mat3(1,0,0,a,1.-a,l,b,-b,n)\n\n#define R (iResolution.xy)\n\nfloat d,e,l,n;\n\nvec4 processSliders(in vec2 fragCoord)\n{\n    vec4 sliderVal = texture(iChannel1,vec2(0,0));\n\n\td  = (sliderVal[2]+sliderVal[0])*2.0-2.;\n\te  = (sliderVal[1]-sliderVal[3])*2.0;\n\tl  = (sliderVal[2]-sliderVal[0])*2.0;\n\tn  = (sliderVal[1]+sliderVal[3])*2.0-2.;\n    \n    if(length(fragCoord.xy-vec2(0,0))>1.)\n    {\n    \treturn texture(iChannel1,fragCoord.xy/iResolution.xy);\n    }\n    return vec4(0);\n}\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    processSliders(i);\n    vec2 uv = vec2(i)/R*scale-shift;;\n    vec2 t = iMouse.x==0.?vec2(.5,.5):iMouse.xy/R*scale-shift;\n    float a=texelFetch(iChannel2,ivec2(77,2),0).x==0.?.5:t.x;\n    float b=texelFetch(iChannel2,ivec2(77,2),0).x==0.?1.:t.y;\n    float time = iTime/20.;\n    \n \n    \n    //d += .363*sin(14.*(texture(iChannel1, vec2(.4,.25))).x);\n    //e += .363*sin(14.*(texture(iChannel1, vec2(.7,.25))).x);\n    //l += .363*sin(14.*(texture(iChannel1, vec2(.6,.25))).x);\n    //n += .363*sin(14.*(texture(iChannel1, vec2(.3,.25))).x);\n    \n    mat3 id0 = inverse(d0);\n    mat3 id1 = inverse(d1);\n    \n    o = vec4(1);\n    \n    vec2 p1 = ((vec3(1,uv)*id0).yz+shift)/scale;\n    vec2 p2 = ((vec3(1,uv)*id1).yz+shift)/scale;\n    \n    float l1 = length(vec2(abs(p1.x-.5),abs(p1.y-.5)));\n    float l2 = length(vec2(abs(p2.x-.5),abs(p2.y-.5)));\n    \n    if(l1<.5){\n        o = min(o,(1.+.4* l1)*vec4(texture(iChannel0,p1)));\n    }\n    if(l2<.5){\n        o = min(o,(1.+.4* l2)*vec4(texture(iChannel0,p2)));\n    }\n    \n    o = iFrame==0?vec4(.1):o/1.2+.01;\n}","name":"Buf B","description":"","type":"buffer"}]}