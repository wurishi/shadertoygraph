{"ver":"0.1","info":{"id":"MtVfRz","date":"1541683474","viewed":724,"name":"Video Motion Interpolation","username":"Drudgerist","description":"Derives intermediate frames between two input frames based on motion vectors.\nPut whatever images you want in iChannel0 and iChannel1 of BufA and Image tabs.\nBased on work from https://github.com/bodhid/Vplus","likes":6,"published":1,"flags":32,"usePreview":1,"tags":["motion","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define OUTPUT_MOTION_VECTOR\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float MOTION_SCALE_FACTOR = 500.0;\n    vec2 uv = fragCoord/iResolution.xy;\n\n#ifdef OUTPUT_MOTION_VECTOR\n    vec4 col = texture(iChannel3, uv);\n    fragColor = (col * 0.5) + 0.5;\n\treturn;\n#endif\n    \n    float testShift = iMouse.x / iResolution.x;\n    vec2 FinalUvShift = texture(iChannel2, uv).rg / MOTION_SCALE_FACTOR;\n    vec4 previousFrame = texture(iChannel0, uv - (FinalUvShift * testShift));\n    vec4 nextFrame = texture(iChannel1, uv - (FinalUvShift * (1.0 - testShift)));\n\n    fragColor = mix(previousFrame, nextFrame, testShift);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float PixV(sampler2D Target, vec2 Shift, vec2 iuv, vec2 texelSize)\n{\n    vec4 c = texture(Target,iuv);\n    c += texture(Target, iuv + Shift+ (vec2(1, 0) * texelSize));\n    c += texture(Target, iuv + Shift + (vec2(0, 1) * texelSize));\n    c += texture(Target, iuv + Shift + (vec2(-1, 0) * texelSize));\n    c += texture(Target, iuv + Shift + (vec2(0, -1) * texelSize));\n    return c.r + c.g + c.b;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const float magic = 6.28;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    float CheckValue, FirstValue, PrevValue, LastMatch;\n\tvec2 FinalUvShift,CheckUvShift;\n\n    PrevValue = PixV(iChannel0, vec2(0,0), uv, texelSize);\n    LastMatch = abs(PrevValue - PixV(iChannel1, vec2(0,0), uv, texelSize));\n\n    for(int Circle = 1; Circle < 4; ++Circle)\n    {\n        for(int j = 0; j < 4 * Circle; ++j)\n        {\n            float circleF = float(Circle);\n            float jF = float(j);\n\n            FirstValue = magic / (4.0 * circleF);\n\t\t\tCheckUvShift = vec2(sin(FirstValue * jF), cos(FirstValue * jF));\n            float currentValue = PixV(iChannel1, CheckUvShift * texelSize * circleF, uv, texelSize);\n            if ((CheckValue = abs(PrevValue - currentValue)) < LastMatch)\n            {\n                LastMatch = CheckValue;\n                FinalUvShift = CheckUvShift;\n            }\n        }\n    }\n    fragColor = vec4(FinalUvShift.xy, 0, 1);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 blur(vec2 uv, vec2 TexelSize, vec2 Direction)\n{\n    vec4 c = vec4(0.0);\n    \n    c += texture(iChannel0, uv + (TexelSize*Direction*.5))*0.49;\n    c += texture(iChannel0, uv + (TexelSize*Direction*1.5))*0.33;\n    c += texture(iChannel0, uv + (TexelSize*Direction*2.5))*0.14;\n    c += texture(iChannel0, uv + (TexelSize*Direction*3.5))*9.0;\n    c += texture(iChannel0, uv + (TexelSize*Direction*4.5))*0.01;\n    c += texture(iChannel0, uv - (TexelSize*Direction*.5))*0.49;\n    c += texture(iChannel0, uv - (TexelSize*Direction*1.5))*0.33;\n    c += texture(iChannel0, uv - (TexelSize*Direction*2.5))*0.14;\n    c += texture(iChannel0, uv - (TexelSize*Direction*3.5))*0.04;\n    c += texture(iChannel0, uv - (TexelSize*Direction*4.5))*0.01;\n    \n    return c/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 TexelSize = 1.0 / iResolution.xy;\n    vec2 DirectionH = vec2(1.0, 0.0);\n    vec4 cH = blur(uv, TexelSize, DirectionH);\n    fragColor = cH;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 blur(vec2 uv, vec2 TexelSize, vec2 Direction)\n{\n    vec4 c = vec4(0.0);\n    \n    c += texture(iChannel0, uv + (TexelSize*Direction*.5))*0.49;\n    c += texture(iChannel0, uv + (TexelSize*Direction*1.5))*0.33;\n    c += texture(iChannel0, uv + (TexelSize*Direction*2.5))*0.14;\n    c += texture(iChannel0, uv + (TexelSize*Direction*3.5))*9.0;\n    c += texture(iChannel0, uv + (TexelSize*Direction*4.5))*0.01;\n    c += texture(iChannel0, uv - (TexelSize*Direction*.5))*0.49;\n    c += texture(iChannel0, uv - (TexelSize*Direction*1.5))*0.33;\n    c += texture(iChannel0, uv - (TexelSize*Direction*2.5))*0.14;\n    c += texture(iChannel0, uv - (TexelSize*Direction*3.5))*0.04;\n    c += texture(iChannel0, uv - (TexelSize*Direction*4.5))*0.01;\n    \n    return c/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 TexelSize = 1.0 / iResolution.xy;\n    vec2 DirectionV = vec2(0.0, 1.0);\n    vec4 cV = blur(uv, TexelSize, DirectionV);\n    fragColor = cV;\n}","name":"Buffer C","description":"","type":"buffer"}]}