{"ver":"0.1","info":{"id":"slGSWV","date":"1641431229","viewed":89,"name":"afro-347","username":"afrodex","description":"Simle demo of useless machine and 3-4-7 pattern recently displayed in numberphile video below.\nhttps://www.youtube.com/watch?v=oEN0o9ZGmOM\n\nInteractions:\nToggle between useless machine and 3-4-7, as well as turning lines on and off in #define at top","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["math","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//toggle between useless machine and 3-4-7\n#define ShowUseless false\n//for useless only\n#define ShowLines false\n//for both\n#define ShowBigCircle false\n#define ShowSmallCircle false\n//for 3-4-7 only\n#define ShowTris false\n#define ShowSquares false\n\n#define S smoothstep\n#define PI 3.14159\n#define Feather .005\n\n//hardcoded vectors for points in useless machine\nvec2[] offs = vec2[] (vec2(1., 0.),\n                          .5*vec2(sqrt(3.), 1.),\n                          .5*vec2(1.,sqrt(3.)),\n                          vec2(0., 1.),\n                          .5*vec2(-1.,sqrt(3.)),\n                          -.5*vec2(sqrt(3.), -1.));\n\nfloat circle(vec2 p, float radius, vec2 uv){\n    return S(radius, radius - Feather, distance(p, uv));\n}\n\nfloat line(vec2 midp, vec2 dir, float width, float radius, vec2 uv){\n    float col = 0.;\n            if (dot(abs(uv-midp),abs(dir)) / dot(dir, dir) < radius){\n                vec2 d = vec2(1., -1.)*dir.yx;\n                col += S(width/2., width/2.-Feather, abs(dot(uv-midp, d) / dot(d, d)));\n            }\n    return col;\n}\n\nfloat useless(vec2 uv){\n\n    float col = 0.;\n\n    float rad = .5;\n\n    if (ShowBigCircle){\n        col += circle(vec2(0.), rad + .005, uv) - circle(vec2(0.), rad - .005, uv);\n    }\n    \n    if (ShowSmallCircle){\n        col += circle(.5*rad*vec2(sin(2.*iTime), cos(2.*iTime)), .5*rad+.01, uv) - circle(.25*vec2(sin(2.*iTime), cos(2.*iTime)), .5*rad, uv);\n    }\n    \n    \n    \n    for (int i = 0; i< 6; i++){\n    vec2 dir = vec2(cos(float(i)*PI/6.), sin(float(i)*PI/6.));\n        if (ShowLines){\n            col+=line(vec2(0.), dir, .012, .5, uv);\n        }\n        col+= circle (.5*dir*sin(2.*iTime+float(i)*PI/6.),.02, uv);\n    }\n    return col;\n\n}\n\nvec2 getPoint(int i, int j, float speed, float pathrad, float dist){\n    float pathphase = speed + float(j)*.5*PI;\n    float phase = speed + float(i)*2.*PI/3.;\n    \n    return pathrad*vec2(cos(pathphase), sin(pathphase))+dist*vec2(cos(-1.*phase), sin(-1.*phase));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    float stuff = 0.;\n    \n    float speed = iTime;\n    float bigrad = 1.;\n    float ratio = .45;\n    float pointratio = .8;\n    float smallrad = bigrad * ratio;\n    float pathrad = bigrad - smallrad;\n    float dist = smallrad * pointratio;\n    if (ShowBigCircle)\n        stuff += circle(vec2(0.), bigrad+.007, uv) - circle(vec2(0.), bigrad-.007, uv);\n    if (ShowSmallCircle){\n        for (int i = 0; i< 4; i++){\n                float phase = speed + float(i)*.5*PI;\n                stuff +=.3*circle(pathrad*vec2(cos(phase), sin(phase)), smallrad, uv);\n            }\n    }\n    \n    \n    for (int j = 0; j< 4; j++){\n        for (int i = 0; i < 3; i++){\n            vec2 point = getPoint(i, j, speed, pathrad, dist);\n            stuff+=circle(point,.05, uv); \n            \n            if (ShowTris){\n                vec2 point2 = getPoint(i+1, j, speed, pathrad, dist);\n                float side = distance(point, point2);\n                stuff+= line(.5*(point + point2),point-point2, .05, .5*side, uv);\n            }\n            \n            if (ShowSquares){\n                vec2 point3 = getPoint(i, j+1, speed, pathrad, dist);\n                float side = distance(point, point3);\n                stuff+= line(.5*(point+point3), point-point3, .05, .5*side, uv);\n            }\n        }\n    }\n    \n    if (ShowUseless)\n        stuff=useless(uv);\n    else\n        col+= vec3(stuff);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}