{"ver":"0.1","info":{"id":"7tcBD8","date":"1663008634","viewed":242,"name":"FBM morphing noise","username":"fishy","description":"Perlin noise","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["noise","morph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 r(float t)\n{\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nfloat erp(float x, float k)\n{\n    return x < 0.5 ? pow(2.0*x, k)*0.5  : 1. - pow(2.0*(1.0-x), k) / 2.;\n}\n\n\nvec2 hash(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return (fract((p3.xx+p3.yz)*p3.zy) - 0.5) * 2.0;\n}\n\nfloat perlinNoise(vec2 p, float s)\n{\n    mat2 r = r(iTime*2.0);\n    vec2 tlVal = r*hash(vec2(floor(p.x),  ceil(p.y)));\n    vec2 blVal = r*hash(vec2(floor(p.x), floor(p.y)));\n    vec2 trVal = r*hash(vec2( ceil(p.x),  ceil(p.y)));\n    vec2 brVal = r*hash(vec2( ceil(p.x), floor(p.y)));\n    \n    vec2 tlOffset = p - vec2(floor(p.x),  ceil(p.y));\n    vec2 blOffset = p - vec2(floor(p.x), floor(p.y));\n    vec2 trOffset = p - vec2( ceil(p.x),  ceil(p.y));\n    vec2 brOffset = p - vec2( ceil(p.x), floor(p.y));\n    \n    float tl = dot(tlOffset, tlVal);\n    float bl = dot(blOffset, blVal);\n    float tr = dot(trOffset, trVal);\n    float br = dot(brOffset, brVal);\n    \n    float a = mix(bl, tl, erp(fract(p.y), s));\n    float b = mix(br, tr, erp(fract(p.y), s));\n    \n    return mix(a, b, erp(fract(p.x), s)) / 2.0 + 0.5;\n}\n\n\n\nfloat fbm(in vec2 x, float s, in float H)\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        t += a*perlinNoise(f*x, s);\n        f *= 2.0;\n        a *= G;\n    }\n    return t * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    uv += iTime*0.05;\n    \n    float h = fbm(uv*10.0, 2.0, 1.0);\n    //float h = perlinNoise(uv * 10.0, 2.0);\n    \n    fragColor = vec4(vec3(h),1.0);\n}","name":"Image","description":"","type":"image"}]}