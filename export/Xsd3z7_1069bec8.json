{"ver":"0.1","info":{"id":"Xsd3z7","date":"1448687314","viewed":2596,"name":"Cave Pillars","username":"Xor","description":"Here is a big cave seen I made.\n12-1-15 Added bump mapping thanks to Shane.\n12-2-15 Updated fog and camera\n12-28-16 Updated to smooth bump mapping. Thanks for Featuring!","likes":58,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","noise","reflection","lighting","xor","cave","rock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float MAX = 120.0;\nfloat PRE = 0.01;\nvec3 L = normalize(vec3(0.1,-0.3,-0.8));\n\n//Camera Variables\nvec3 P, A, D, X, Y, Z;\n\n//Tri-planar Texturing Function\nvec3 tritex(sampler2D tex, vec3 p)\n{\n \treturn  (texture(tex,p.xy).rgb\n            +texture(tex,p.zy).rgb\n            +texture(tex,p.xz).rgb)/3.0;\n}\n//Smooth Tri-planar Texturing Function (https://www.shadertoy.com/view/Xd3XDS)\nvec3 tritex(sampler2D tex, vec3 p, vec3 n)\n{\n \treturn  (texture(tex,p.xy).rgb*n.z*n.z\n            +texture(tex,p.zy).rgb*n.x*n.x\n            +texture(tex,p.xz).rgb*n.y*n.y);\n}\n//Main Distance Field Function\nfloat model(vec3 p)\n{\n    vec3 n = p * vec3(1,1,0.5);\n    float V = (tritex(iChannel0,n/64.0).r-0.4)*4.0;\n          V += (tritex(iChannel0,n/23.0).r-0.5)/2.0;\n    return V;\n}\n// Grey scale by Shane\nfloat grey(vec3 p)\n{ \n    return dot(p, vec3(.299, .587, .114)); \n}\n// Texture bump mapping by Shane also.\nvec3 bump( sampler2D tex, vec3 p, vec3 n, float bumpfactor)\n{\n \tconst vec2 pre = vec2(0,1)*0.001; // Change to suit needs.\n\tvec3 nor = vec3(grey(tritex(tex, p-pre.yxx,n)),\n \t\t\t\t\t grey(tritex(tex,p-pre.xyx,n)),\n \t\t\t\t\t grey(tritex(tex,p-pre.xxy,n)))/pre.y;\n\n \tnor -= grey(tritex(tex,p,n))/pre.y; \n \tnor -= n*dot(n,nor); \n\n \treturn normalize(n+nor*bumpfactor);\n}\n\n//Normal Function\nvec3 normal(vec3 p)\n{\n \tvec3 N = vec3(-8,8,0) * PRE;\n \tN = normalize(model(p+N.xyy)*N.xyy+model(p+N.yxy)*N.yxy+model(p+N.yyx)*N.yyx+model(p+N.xxx)*N.xxx);\n \treturn bump(iChannel2,p/4.0,N,0.01);\n}\n//Color/Material Function\nvec3 color(vec3 p, vec3 d)\n{\n    vec3 N = normal(p);\n    vec3 C = (tritex(iChannel1,p/4.0,N)\n        \t  +tritex(iChannel1,p,N))/2.0;\n \tfloat TL = (dot(N,L)*0.5+0.5);\n    TL *= clamp(1.0-model(p-L*4.0),0.1,1.0);\n    return C*TL+pow(abs((dot(reflect(N,L),-d)*0.5+0.5)),16.0);\n}\n//Simple Raymarcher\nvec4 raymarch(vec3 p, vec3 d)\n{\n    float S = 0.0;\n    float T = S;\n    vec3 D = normalize(d);\n    vec3 P = p+D*S;\n    for(int i = 0;i<240;i++)\n    {\n        S = model(P);\n        T += S;\n        P += D*S;\n        if ((T>MAX) || (S<PRE*(1.0+T*.02))) {break;}\n    }\n    return vec4(P,min(T/MAX,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    P = vec3(iTime*2.0, 0.0, 0.0);\n    A = vec3(iMouse.x/iResolution.x - 0.5,iMouse.y/iResolution.y - 0.5,0.0);\n\tD = mix(vec3(1.0,0.0,0.0),vec3(cos(A.x)*cos(A.y),sin(A.x)*cos(A.y),sin(A.y)),\n             float(iMouse.x>1.0 || iMouse.y>1.0));\n\n\tX = normalize(D);\n\tY = cross(X,vec3(0,0,1));\n\tZ = cross(X,Y);\n    \n    \n\tvec2 UV = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n    \n    D = normalize(mat3(X,Y,Z) * vec3(1.0,UV));\n    \n    vec4 M = raymarch(P,D);\n    float fog = clamp(max(M.w,M.z/9.0),0.0,1.0);\n\tfragColor = vec4(mix(color(M.xyz,D)*max(1.0-M.w*2.0,0.0),vec3(0.5,0.56,0.6),fog),1.0);\n}","name":"Image","description":"","type":"image"}]}