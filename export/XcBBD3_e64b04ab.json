{"ver":"0.1","info":{"id":"XcBBD3","date":"1725554993","viewed":22,"name":"Color Plane","username":"ade177","description":"A simplified approximation of the 'Colour Plane' transition in Apple Keynote","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.1415926535897932384626433832795;\n\nbool inBounds (vec2 p) \n{\n      return all(lessThan(vec2(0), p)) && all(lessThan(p, vec2(1)));\n}\n\n\nvec3 calculateUVs(float angle, float zoom, vec2 xy, float offset) {\n    xy -= 0.5;\n    xy *= zoom;\n    offset *= -sin(angle);\n    float z = 0.4;\n    vec3 p = inverse(mat3(cos(angle),0,-sin(angle), 0,1,0, 0,0,z)) * vec3(xy + vec2(offset, 0), z);\n    p.xy = p.xy / p.z + .5;\n    \n    return p;\n}\n\nfloat totalDuration = 12.0;\nfloat zoom = 1.0;\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{  \n    float time = mod(iTime, totalDuration);\n            \n    float phase = 0.0;\n    phase += smoothstep(0.0, totalDuration / 3.0, time);          // flip A\n    phase += 1.0 - smoothstep(totalDuration / 2.0, totalDuration * (5.0 / 6.0), time);    // flip back\n       \n    // Calculate the phase to calculate which image side to show\n    phase = abs(mod(phase, 2.0)-1.0);\n\n    float side = step(0.5, phase);\n\n    vec2 xy = (fragCoord / iResolution.xy);\n    float angle = -phase * PI;\n    \n    \n    \n    for (int i=0;i<3;i++) {\n    \n        float offset = float(i - 1) * -0.4;\n        vec3 p = calculateUVs(angle, zoom , xy, offset);\n        vec2 uv = p.xy;\n\n        float depth = -1.0;\n        float alpha = (inBounds(uv) && p.z>depth) ? 1.0 : 0.0;\n\n        vec2 uv1 = vec2(1.0 - uv.x, uv.y);        \n        vec4 c1 = texture(iChannel0, uv);\n        vec4 c2 = texture(iChannel1, uv1);\n        fragColor[i] += mix(c1[i], c2[i], side) * alpha;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}