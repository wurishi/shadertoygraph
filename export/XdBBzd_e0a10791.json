{"ver":"0.1","info":{"id":"XdBBzd","date":"1501611722","viewed":202,"name":"V - Overlapping Triangle Shutter","username":"isak","description":"Overlapping triangle shutter. Animated repeated opening and closing of blades ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["triangle","shutter","overlapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n\nvec2 orto(vec2 pv)\n{\n    return normalize(vec2(-pv.y, pv.x));\n}\n\nvec2 rot(vec2 p, float a)\n{\n    float ca = cos(a);\n    float sa = sin(a);\n    return vec2(ca*p.x - sa*p.y, ca*p.y + sa*p.x);\n}\n\nfloat sCircle(vec2 p, float r)\n{\n    float ds = 0.01*r;\n    return smoothstep(-ds, ds , r*r - dot(p,p));\n}\n\n\nfloat sTriangle(vec2 p, vec2 p1, vec2 p2, vec2 p3)\n{\n    float ds = 0.005;\n    vec3 dsv = vec3(ds, ds, ds);\n    vec3 pev = vec3(dot( orto(p2 - p1), p - 0.5*(p1 + p2)), \n                   \tdot( orto(p3 - p2), p - 0.5*(p2 + p3)),\n        \t\t\tdot( orto(p1 - p3), p - 0.5*(p3 + p1)));\n    vec3 S = smoothstep(dsv, -dsv, pev);\n    return S.x*S.y*S.z;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.2;\n  \n    // Colors\n\tvec3 blue  = vec3(65.0, 105.0, 225.0)/255.0;\n    vec3 white = vec3(1.0, 1.0, 1.0); \n    vec3 gray = 0.8*vec3(0.1, 0.1, 0.1);\n    vec3 black = vec3(0.0, 0.0, 0.0);\n    vec3 brown = 0.1*vec3(255.0, 128.0, 0.0)/255.0 + 0.05*white;\n    \n    // Parameters\n\tint N = 27;  \t\t// Change this to for example 100 ;)    \n    float L = 1.0;\n    float sft = 0.1;\n    \n    // Derived Parameters\n    float alpha = PI/float(N);\n    float dw = L*tan(alpha);\n    float R = L - sft;\n    vec2 shift = vec2(0.0, sft);\n    \n    // Blade reference vertices (triangle)\n    vec2 p1 = vec2(0.0, L) - shift;\n    vec2 p2 = vec2( dw, 0.0) - shift;\n    vec2 p3 = vec2(-dw, 0.0) - shift;\n  \n    // Parameterization for the animation\n    float A = 0.9;\n    float B = 1.5;\n    float st = 0.5*(A + B) + 0.5*(B-A)*tanh(4.0*sin(1.5*iTime));\n\n\n    // Shading\n    float blades = 0.0; \n    float nails = 0.0;\n    \n   \tfor (int i = 0; i < N; i++)\n    {\n        float a = 2.0*PI*float(i)/float(N);\n       \t\n        vec2 p = R*vec2(cos(a), sin(a));\n        \n        blades += sTriangle(uv, \n                            rot(p1, a + st) + p, \n                            rot(p2, a + st) + p, \n                            rot(p3, a + st) + p);\n        \n    \tnails += sCircle(uv - p, 0.025);   \n    }\n    \n    float dR = 0.1;\n    float sRing = sCircle(uv, R + dR) - sCircle(uv, R - dR);\n    //sRing = 0.0;  //uncomment to remove ring\n    \n    vec3 c = gray;\n    c += (blue - gray)*(blades - sRing*blades) + (brown)*(sRing-nails) + blue*nails  ;\n    c += 0.2*blue*(1.0 - smoothstep(+2.0, -2.0, 2.0 - dot(uv,uv)));\n    c += 0.2*blue*(1.0 - smoothstep(+0.5, -0.5, 0.5 - dot(uv,uv)));\n\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}