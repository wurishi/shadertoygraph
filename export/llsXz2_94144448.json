{"ver":"0.1","info":{"id":"llsXz2","date":"1709988360","viewed":351,"name":"Blocktris Splash Shader","username":"rubixcom","description":"Shader used as a background in my old game:\nhttps://blocktris.web.app/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// I reserve the copyright of the code. You are welcome to use it in your\n// own shader on shadertoy.com. I have learned everything about the amazing stuff \n// you can do with 3D graphics from amazing work of talented individuals on this site \n// and me sharing my work is a way for me to give back to the community. If you can \n// attribute my code back to this shader, it would be nice. If you want to use code \n// in any other way please contact me and I would be happy to chat and am likely to \n// allow it.\n//\n// I do not permit the copying or use of this code to train AI models, publishing it \n// without my permission, including it in archives (including archive.org) or publishing\n// screenshots of the output. Please respect my wishes.\n\nfloat map(in vec2 uv)\n{\n    return 0.05/(4.*(-uv.y + \n        (.1*sin(uv.x * 30. * texture(iChannel0,vec2(0.2,0.)).x + 10.*texture(iChannel0,vec2(0.6,0.0)).x + iTime))\n        + (.2*sin(uv.x * 20. * texture(iChannel0,vec2(0.3,0.)).x + 5.*texture(iChannel0,vec2(0.6,0.0)).x + iTime))\n        + (.3*sin(uv.x * 10. * texture(iChannel0,vec2(0.4,0.)).x + 1.*texture(iChannel0,vec2(0.6,0.0)).x + iTime))\n        ));\n }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord-.5*R)/ R.y;\n\n\tvec2 pixelsize = 1.0 / iResolution.xy;\n    \n    vec3 o = vec3(uv.x,map(uv),uv.y);\n    \n    vec3 nx = o;\n    nx.x += pixelsize.x;\n    nx.y = map(nx.xz);\n    nx.x = o.x + 1.0;\n    nx = normalize(nx - o);\n\n    vec3 nz = o;\n    nz.z += pixelsize.y;\n    nz.y = map(nz.xz);\n    nz.z = o.z + 1.0;\n    nz = normalize(nz - o);\n\n    vec3 normal = cross(nz,nx);\n\n    vec3 lightLoc = vec3(\n        .25*sin(iTime),\n        .45,\n        .25*cos(iTime));\n    \n    vec3 lightVec = normalize(lightLoc - o);\n\n    vec3 fc = \n        vec3(o.y > 0. ? 0.2 : 0., o.y < 0. ? 0.4 : 0.8 , o.y < 0. ? 0.7 : 0.) * \n        dot(normal,lightVec) / length(lightLoc - o);\n    fragColor = vec4(fc, 1.-o.y);\n}\n","name":"Image","description":"","type":"image"}]}