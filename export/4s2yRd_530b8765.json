{"ver":"0.1","info":{"id":"4s2yRd","date":"1493400675","viewed":291,"name":"Attractor of tanh formula","username":"guil","description":"Using 2D Discrete Attractor Plotter : https://www.shadertoy.com/view/Msy3Dm\n\nIt shows the attractor of the tanh formula used in my previous shader","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","attractor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Change INTEGRATOR in Buf A and reset to see different attractors.\n\n//Coloring gradient\n#define GRADIENT Grad1\n\n//Preview of gradient\n#define VIEW_GRADIENT\n\n//Background color\n#define BACKGROUND vec3(1.00, 1.00, 1.00);\n\nvec3 Grad1(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(1.00, 0.35, 0.00), pow(x, 0.35));\n    col = mix(col, vec3(0.50, 0.00, 0.50), smoothstep(0.05,0.8,x));\n    \n    return col;\n}\n\nvec3 Grad2(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(0.20, 0.60, 0.20), pow(x, 0.5)); \n    col = mix(col, vec3(0.40, 0.40, 0.90), smoothstep(0.2,1.5,x));\n    \n    return col;\n}\n\nvec3 Grad3(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(0.00, 0.00, 0.00), pow(x, 0.5)); \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = .5*fragCoord / iResolution.y;\n    \n    float inten = texture(iChannel0, fragCoord / iResolution.xy).r;\n    \n    //Scale the gradient intensity with time for a faster fade in.\n    inten = inten / (iTime * 0.01);\n    \n\tfragColor = vec4(GRADIENT(inten), 0);\n    \n    #ifdef VIEW_GRADIENT\n    if(uv.x / res.x < 0.03)\n    {\n        fragColor = vec4(GRADIENT(uv.y), 0);\n    }\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Iterations per frame\n#define ITERATIONS 512\n\n//Integrator function\n#define INTEGRATOR rnn3\n//#define INTEGRATOR Clifford\n//Point size (pixels)\n#define BLUR 1.3\n\n//Point intensity\n#define INTENSITY 0.00001\n\nfloat hash(float x){return sin(4567.5314*x+327.1497);}\n\n\n//Initial conditions\n#define START vec2(-.7, .389543)\n\n//Scale of the attractor (set by individual functions)\nfloat scale = 1.0;\n\nfloat sigmoid(float x)\n{\n\treturn 1./(1.+exp(-x));\n}\n\n     \n\n//http://paulbourke.net/fractals/clifford/\nvec2 Clifford(vec2 last)\n{\n    scale = 0.2;\n        \n    float a = -1.;\n    float b = 1.2;\n    float c =- 1.1;\n    float d = 0.7;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = sin(a * last.y) + c * cos(a * last.x);\n    next.y = sin(b * last.x) + d * cos(b * last.y);\n    \n    return next;\n}\n               \n              \nvec2 rnn1(vec2 last)\n{\n    scale = 0.3;\n        \n    float a = -2.0;\n    float b = 3.4;\n    float c = -2.6;\n    float d = 2.8;\n    float e = -0.3;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = tanh(a * last.x + b * last.y)+tanh(last.y*last.y+e);\n    next.y = tanh(c * last.x + d * last.y)+tanh(last.x*last.x+e);\n    \n    return next;\n}      \n\nvec2 rnn2(vec2 last) \n{\n    scale = 0.5;\n        \n    float a = -1.4;\n    float b = -1.6;\n    float c = 1.0;\n    float d = 0.7;\n    float e = -0.37;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = tanh(a * last.x+ b * last.y-.0)+tanh(last.y*last.y+e);\n    next.y = tanh(c * last.x + d * last.y-.0)+tanh(last.x*last.x+e);\n    \n    return next;\n} \n\nvec2 rnn3(vec2 last) \n{\n    scale = 0.4;\n        \n    float a = -1.4;\n    float b = -1.6;\n    float c = 1.0;\n    float d = .71;\n    float e = -0.17;\n    float f = -0.27;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = tanh(a * last.x + b * last.y) + tanh(last.x*last.x+e);\n    next.y = tanh(c * last.x + d * last.y) + tanh(last.y*last.y+f);\n    \n    return next;\n}   \n\n\nvec2 rnn4(vec2 last) \n{\n    scale = 0.4;\n        \n    float a = -3.4;\n    float b = -2.6;\n    float c = 2.0;\n    float d = 5.7;\n    float e = 1.5;\n    float f = -1.57;\n    float g = 2.57;\n    float h = 0.57;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = tanh(tanh(a * last.x + b * last.y-.02) + .88*tanh(e * last.x + f * last.y));\n    next.y = tanh(tanh(c * last.x + d * last.y) + tanh(g * last.x + h * last.y));\n    \n    return next;\n}  \n\nvec2 rnn5(vec2 last) \n{\n    scale = 0.6;\n        \n    float a =-1.4;\n    float b = -2.6;\n    float c = 2.;\n    float d = 1.9;\n    float e = .05;\n    float f = -.1;\n    float g = 2.6;\n    float h = 4.6;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = tanh(a * last.x + b * last.y+e)*sigmoid(g*last.y+2.5);\n    next.y = tanh(c * last.x + d * last.y+f)*sigmoid(h*last.x+2.);\n    \n    return next;\n}   \n\n//http://paulbourke.net/fractals/peterdejong/\nvec2 PeterdeJong(vec2 last)\n{\n    scale = 0.2;\n    \n    float a =-2.0;\n    float b =-2.0;\n    float c =-1.2;\n    float d = 2.0;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = sin(a * last.y) - cos(b * last.x);\n    next.y = sin(c * last.x) - cos(d * last.y);\n    \n    return next;\n}\n\n//https://en.wikipedia.org/wiki/Gingerbreadman_map\n//Different starting positions can produce unique patterns.\nvec2 GingerBreadMan(vec2 last)\n{\n    scale = 0.05;\n    \n    vec2 next = vec2(0);\n    \n    next.x = 1.0 - last.y + abs(last.x);\n    next.y = last.x;\n    \n    return next;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    float ps = 1.0 / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 last = texture(iChannel0, vec2(0)).xy;\n    vec2 next = vec2(0);\n    \n    float psum = 0.0;\n    \n    for(int i = 0;i < ITERATIONS; i++)\n    {\n        next = INTEGRATOR(last);\n        \n        psum += smoothstep(BLUR * ps, 0.0, distance(uv - res/2.0, next * scale));\n        \n        last = next;\n    }\n    \n    psum /= BLUR;\n    psum /= ps;\n    psum *= INTENSITY;\n    \n    float lastFrame = texture(iChannel0, uv/res).x;\n    \n    fragColor = vec4(psum + lastFrame, 0, 0, 0);\n    \n    if(floor(fragCoord) == vec2(0,0))\n    {\n        if(iFrame < 4)\n        {\n            fragColor = vec4(START, 0, 0);\n        }\n        else\n        {\n        \tfragColor = vec4(next, 0, 0);\n    \t}\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}