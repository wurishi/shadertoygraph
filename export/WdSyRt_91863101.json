{"ver":"0.1","info":{"id":"WdSyRt","date":"1588783235","viewed":92,"name":"EchoFiber","username":"cbarnoui","description":"Fiber in ultrasound WIP","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["echo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://www.shadertoy.com/view/XdXGW8 Inigo Quilez Gradient Noise\n\n\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    \n\t\n\tfloat f0 = 0.0;\n    float n =20.; //Number of point for blur (less = less blur)\n    float f = 0.0;\n    float sizeNoise = 64.0; // Size of noise cluster (more = small cluster)\n    \n    p-=0.5;\n    p.x*=iResolution.x/iResolution.y;\n    \n    \n    float d = length(p);\n\t\n    if(abs(p.y)<0.1){\n        \n        for(float i=-n; i<(n+1.);i++){\n            \n            //Get pixel at i distance on x axis.\n            vec2 pi = fragCoord.xy+vec2(i,0.);\n            \n            //Get pixel at i distance in the direction given by the texture in channel0\n            \n            //Convert it\n            pi/=iResolution.xy;\n            vec2 uvi = pi*vec2(iResolution.x/iResolution.y,1.0);\n            //Split screen in 2, and calculate blur in right side\n            f= p.x>0.?noise( sizeNoise*(uvi)):noise(sizeNoise*uv);\n        \tf = 0.5 + 0.5*f;\n            f0+=f;\n        }\n        \n    }\n    f0/=(2.*n+1.);\n\t\n\tfragColor = vec4( f0, f0, f0, 1.0 );\n    //fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"}]}