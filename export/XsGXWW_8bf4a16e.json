{"ver":"0.1","info":{"id":"XsGXWW","date":"1464235277","viewed":587,"name":"Make a Face","username":"nuts4nuts4nuts","description":"Comment and uncomment the defines at the top of the \"Buf B\" tab to tweak options!\n","likes":5,"published":1,"flags":34,"usePreview":0,"tags":["genetic","webcam","face","existentialism"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Finally, flip the u so that the image is more like a mirror\n    uv = vec2(1.0 - uv.x, uv.y);\n    \n\tfragColor = texture( iChannel0, uv );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tfragColor = texture( iChannel0, uv );\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//#define SOURCE_COLORS\n#define EVERY_PIXEL_SAME_COLOR\n#define TRIANGLES\n\n//Randomness code from Martin, here: https://www.shadertoy.com/view/XlfGDS\nfloat Random_Final(vec2 uv, float seed)\n{\n    float fixedSeed = abs(seed) + 1.0;\n\tfloat x = dot(uv, vec2(12.9898,78.233) * fixedSeed);\n\treturn fract(sin(x) * 43758.5453);\n}\n\n//Test if a point is in a triangle\nbool pointInTriangle(vec2 triPoint1, vec2 triPoint2, vec2 triPoint3, vec2 testPoint)\n{\n\tfloat denominator = ((triPoint2.y - triPoint3.y)*(triPoint1.x - triPoint3.x) + (triPoint3.x - triPoint2.x)*(triPoint1.y - triPoint3.y));\n\tfloat a = ((triPoint2.y - triPoint3.y)*(testPoint.x - triPoint3.x) + (triPoint3.x - triPoint2.x)*(testPoint.y - triPoint3.y)) / denominator;\n\tfloat b = ((triPoint3.y - triPoint1.y)*(testPoint.x - triPoint3.x) + (triPoint1.x - triPoint3.x)*(testPoint.y - triPoint3.y)) / denominator;\n\tfloat c = 1.0 - a - b;\n \n\treturn 0.0 <= a && a <= 1.0 && 0.0 <= b && b <= 1.0 && 0.0 <= c && c <= 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 imageUV  = fragCoord.xy / iResolution.xy;\n    vec2 testUV = imageUV;\n\n#ifdef EVERY_PIXEL_SAME_COLOR\n    testUV = vec2(1.0, 1.0);   \n#endif\n\n    vec2 triPoint1 = vec2(Random_Final(testUV, iTime), Random_Final(testUV, iTime * 2.0));\n    vec2 triPoint2 = vec2(Random_Final(testUV, iTime * 3.0), Random_Final(testUV, iTime * 4.0));\n    vec2 triPoint3 = vec2(Random_Final(testUV, iTime * 5.0), Random_Final(testUV, iTime * 6.0));\n\n    vec4 testColor = vec4(Random_Final(testUV, iTime * 10.0),\n                          Random_Final(testUV, iTime * 11.0),\n                          Random_Final(testUV, iTime * 12.0),\n                          1.0);\n\n#ifdef SOURCE_COLORS\n    vec2 colorUV = vec2(Random_Final(testUV, iTime * 10.0),\n                        Random_Final(testUV, iTime * 11.0));\n\n    testColor = texture( iChannel1, colorUV );\n#endif\n    \n    vec4 trueColor = texture( iChannel1, imageUV );\n    vec4 prevColor = texture( iChannel0, imageUV );\n\n    fragColor = prevColor;\n\n    bool isInTriangle = true;\n\n#ifdef TRIANGLES\n    isInTriangle = pointInTriangle(triPoint1, triPoint2, triPoint3, imageUV); \n#endif\n\n    if(isInTriangle && abs(length(trueColor - testColor)) < abs(length(trueColor - prevColor)))\n    {\n        fragColor = testColor;\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}