{"ver":"0.1","info":{"id":"DlsXRr","date":"1674209254","viewed":222,"name":"waffle sphere maze 2c","username":"FabriceNeyret2","description":"mouse controls camera","likes":21,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/DllSRr\n// variant of https://shadertoy.com/view/DlsXRn\n// variant of https://shadertoy.com/view/dlj3Dd\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                   // rotation \n#define H(p)    fract(1e4*sin(dot(p,R.xy-17.)))\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,m, h,h2,h3, r=8.; \n    vec3  R = iResolution, \n          D = normalize(vec3(U+U, -12.*R.y) - R),              // ray direction\n          p = vec3(0,0,20), q,a,b,                             // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n              :  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)); \n    p.y += 7.; \n    for ( O=vec4(1); O.x > 0. && t > .001; O-=.003 )           // march scene\n        q = p, // t = 9.,\n        q.yz *= rot(-M.y),                                     // rotations\n        q.xz *= rot(-M.x-1.57), \n        t = length(q) - r,\n        a = abs(q), \n        m = max(a.x, max(a.y,a.z)), \n        q = m==a.x ? q.yzx : m==a.y ? q.xzy : q,               // cube-sphere mapping\n        U = vec2(atan(q.x,q.z),atan(q.y,q.z))*q.z*4./3.1416,\n        U *= 2.*r/m, h = H(ceil(U)),\n        q.xy = ( fract(U) - .5 ) / 2./r *.7,                   // distance to walls\n        a = 128.* vec3(q.x-sign(h-.5)*q.y, (t+.2)*.2, 0),      // wall parameterization\n        a = ( a + vec3(-a.y,a.x,0) ) * .7,\n        h2 = H(ceil(a.xy)+ceil(U)), a = ( fract(a) -.5 ) /128.,// for maze on walls\n        b = 128.*vec3(q.xy,0)/.7,                              // floor parameterization\n        h3 = H(ceil(b.xy)+ceil(U)), b = ( fract(b) -.5 ) /128.,// for maze on floor\n        t = min ( max(t+.4,.003 - abs(b.x+sign(h3-.5)*b.y)),   // floor\n                  max( t ,                                     // trimmed by out sphere\n                  min( max(abs(q.x+sign(h-.5)*q.y),            // wall = random tile diagonal\n                           .003-abs(a.x+sign(h2-.5)*a.y)       // wall decoration: maze holes\n                          ),\n                       length(abs(.5-abs(fract(U)-.5)))/2./r*.7) ) ), // columns at wall ends\n        p += .5*t*D;                                           // step forward = dist to obj    \n      \n\n// O *= O*O*1.5;                                               // color scheme\n// O *= .5+.5*vec4(m==a.x, m==a.y, m==a.z, 0)* (.4+.6*mod(ceil(U.x)+ceil(U.y),2.));  // debug\n}\n\n","name":"Image","description":"","type":"image"}]}