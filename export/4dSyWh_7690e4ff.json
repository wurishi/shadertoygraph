{"ver":"0.1","info":{"id":"4dSyWh","date":"1491769929","viewed":479,"name":"icosahedron","username":"donniet","description":"spherical projection of an icosohedron","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["sphereplatonic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 sphereToCart(vec3 sphere) {\n    float cp = cos(sphere.x);\n    float sp = sin(sphere.x);\n    float ct = cos(sphere.y);\n    float st = sin(sphere.y);\n    float r = sphere.z;\n    return vec3(r * cp * ct, r * st, r * sp * ct);\n}\n\nvec3 cartToSphere(vec3 cart) {\n    float r = length(cart);\n    vec3 n = cart / r;\n    return vec3(atan(n.x, n.z), asin(n.y), r);\n}\n\n\nconst float SQRT_2 = 1.414213562373095;\nconst float ISQRT_2 = 0.70710678118655;\nconst float PI = 3.141592653589793;\n\nconst vec3 coords[12] = vec3[12](\n    vec3(0,  -0.525731,  0.850651),\n\tvec3(0.850651,  0,  0.525731),\n\tvec3(0.850651,  0,  -0.525731),\n\tvec3(-0.850651,  0,  -0.525731),\n\tvec3(-0.850651,  0,  0.525731),\n\tvec3(-0.525731,  0.850651,  0),\n\tvec3(0.525731,  0.850651,  0),\n\tvec3(0.525731,  -0.850651,  0),\n\tvec3(-0.525731,  -0.850651,  0),\n\tvec3(0,  -0.525731,  -0.850651),\n\tvec3(0,  0.525731,  -0.850651),\n\tvec3(0,  0.525731,  0.850651)\n);\n\nconst int faces[60] = int[60](\n2, 3, 7,\n2, 8, 3,\n4, 5, 6,\n5, 4, 9,\n7, 6, 12,\n6, 7, 11,\n10, 11, 3,\n11, 10, 4,\n8, 9, 10,\n9, 8, 1,\n12, 1, 2,\n1, 12, 5,\n7, 3, 11,\n2, 7, 12,\n4, 6, 11,\n6, 5, 12,\n3, 8, 10,\n8, 2, 1,\n4, 10, 9,\n5, 9, 1\n);\n\nconst vec3 normals[20] = vec3[20](\n    vec3(0.894427201762, 0.34164103304000004, 0),\n\tvec3(0.894427201762, -0.34164103304000004, 0),\n\tvec3(-0.894427201762, 0.34164103304000004, 0),\n\tvec3(-0.894427201762, -0.34164103304000004, 0),\n\tvec3(0, 0.894427201762, 0.34164103304000004),\n\tvec3(0, 0.894427201762, -0.34164103304000004),\n\tvec3(0.34164103304000004, 0, -0.894427201762),\n\tvec3(-0.34164103304000004, 0, -0.894427201762),\n\tvec3(0, -0.894427201762, -0.34164103304000004),\n\tvec3(0, -0.894427201762, 0.34164103304000004),\n\tvec3(0.34164103304000004, 0, 0.894427201762),\n\tvec3(-0.34164103304000004, 0, 0.894427201762),\n\tvec3(0.5527866072810002, 0.552786607281, -0.552786607281),\n\tvec3(0.552786607281, 0.552786607281, 0.5527866072810002),\n\tvec3(-0.552786607281, 0.552786607281, -0.5527866072810002),\n\tvec3(-0.5527866072810002, 0.552786607281, 0.552786607281),\n\tvec3(0.552786607281, -0.552786607281, -0.5527866072810002),\n\tvec3(0.5527866072810002, -0.552786607281, 0.552786607281),\n\tvec3(-0.552786607281, -0.552786607281, -0.5527866072810002),\n\tvec3(-0.552786607281, -0.552786607281, 0.5527866072810002)\n);\n\nconst int dual_faces[12] = int[12](\n    4, 5, 6,\n    4, 6, 7,\n    4, 7, 5,\n    5, 6, 7\n);\n\nbool intersects(\n    in vec3 orig, in vec3 dir, in vec3 vertices[3], in vec3 normal,\n    out vec3 I, out vec2 st)\n{\n    vec3 u, v, n;\n    vec3 w0, w;\n    float r, a, b;\n    \n    u = vertices[1] - vertices[0];\n    v = vertices[2] - vertices[0];\n    n = cross(u,v);\n    \n    b = dot(n, dir);\n    if (abs(b) < 1e-5) return false;\n    w0 = orig - vertices[0];\n    a = -dot(n, w0);\n    \n    r = a / b;\n    if (r < 1e-5) return false;\n    \n    I = orig + r * dir;\n    float uu, uv, vv, wu, wv, D;\n    uu = dot(u, u);\n    uv = dot(u, v);\n    vv = dot(v, v);\n    w = I - vertices[0];\n    wu = dot(w, u);\n    wv = dot(w, v);\n    D = uv * uv - uu * vv;\n    \n    float s, t;\n    s = (uv * wv - vv * wu) / D;\n    if (s < 0. || s > 1.) return false;\n    t = (uv * wu - uu * wv) / D;\n    if (t < 0. || t > 1.) return false;\n    \n    st = vec2(s, t);\n    if (r > 1e-5) return true;\n    \n    return false;\n}\n\n\nbool intersectsShape(\n    in vec3 orig, in vec3 dir, in mat3 rot, \n    out int face, out vec3 I, out vec2 st) \n{\n    bool found = false;\n    vec3 found_I;\n    vec2 found_st;\n    for(int i = 0; i < 20; i++) {\n        if (intersects(orig, dir, vec3[3](\n            \trot * coords[faces[3 * i]-1],\n            \trot * coords[faces[3 * i + 1]-1],\n            \trot * coords[faces[3 * i + 2]-1]\n        \t), normals[i], found_I, found_st)) {\n            \n            if (!found || length(st) > length(found_st)) {\n                found = true;\n                st = found_st;\n                I = found_I;\n                face = i;\n            }\n        }\n    }\n    \n    return found;\n}\n\n\n\nbool intersectsDual(\n    in vec3 orig, in vec3 dir, in mat3 rot, \n    out int face, out vec3 I, out vec2 st) \n{\n    bool found = false;\n    vec3 found_I;\n    vec2 found_st;\n    for(int i = 0; i < 4; i++) {\n        if (intersects(orig, dir, vec3[3](\n            \trot * coords[dual_faces[3 * i]-1],\n            \trot * coords[dual_faces[3 * i + 1]-1],\n            \trot * coords[dual_faces[3 * i + 2]-1]\n        \t), normals[i], found_I, found_st)) {\n            \n            if (!found || length(st) > length(found_st)) {\n                found = true;\n                st = found_st;\n                I = found_I;\n                face = i;\n            }\n        }\n    }\n    \n    return found;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat3 rot = mat3(\n        sin(iTime), cos(iTime), 0.,\n       \tcos(iTime), -sin(iTime), 0.,\n        0., 0., 1.\n    );\n    //mat3 rot = mat3(1., 0., 0., 0., 1., 0., 0., 0., 1.);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 cart = sphereToCart(vec3(2. * PI * uv.s, PI * (uv.t - 0.5), 1.));\n    //vec3 cart = vec3(uv, 0.5);\n    \n    int face = 0;\n    vec3 p = vec3(0.);\n    vec2 st = vec2(0.);\n    \n    if (intersectsShape(vec3(0., 0., 0.), cart, rot, face, p, st)) {\n        float x = 1. - min(st.s + st.t, min(1. - st.s, 1. - st.t));\n        \n        vec3 v = vec3(st.s+st.t, 1. - st.s, 1. - st.t);\n        x = 1. - x * x * x * x * x * x;\n        \n        fragColor = vec4(x * (0.5 * normalize(normals[face]) + 0.5), 1.);\n        //fragColor = vec4(x, x, x, 1.);\n    } else {\n        fragColor = vec4(0., 0., 0., 1.);\n    }\n    \n    // if (intersectsDual(vec3(0., 0., 0.), cart, rot, face, p, st)) {\n    //    float x = 1. - min(st.s + st.t, min(1. - st.s, 1. - st.t));\n    //    \n    //    vec3 v = vec3(st.s+st.t, 1. - st.s, 1. - st.t);\n    //    x = 1. - x * x * x * x;\n    //    \n    //   fragColor = x * fragColor;\n    //  //fragColor = vec4(x, x, x, 1.);\n    // }\n}","name":"Image","description":"","type":"image"}]}