{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat da, db, dm, r, left, middle, right, width, len;\n\tfloat leftv, middlev, rightv;\n\tfloat mf1, mf2, mf3, mf4;\n\tfloat xInMiddle;\n\tfloat onlen, onofflen, aawidth;\n\tvec2 a,p,b;\n\t\n\t// Constants from input\n\tonofflen = 60.0;\n\tonlen = 30.0;\n\taawidth = 3.0;\n\t\n\t// Uncomment these to have some fun\n\t// onlen = sin(iTime)* sin(iTime) * onofflen;\n\t// aawidth = sin(iTime)* sin(iTime)* 25.0; // change to zero to see non-antialiased jagged lines\n\t\n\twidth = iResolution.x;\n\t\n\t\n\tp.x = fragCoord.x;\n\tp.y = fragCoord.y;\n\tr = iResolution.y/2.0;\n\t\n\t// distance between the two semi-cirlces. Also the line length\n\tlen = width - r*2.0;\n\t\n\t// Center of left semi-circle\n\ta.x = r;\n\ta.y = iResolution.y/2.0;\n\t\n\t// Center of right semi-circle\n\tb.x = iResolution.x - r;\n\tb.y = iResolution.y/2.0;\n\t\n\t// Distance of this point from center of the semi circles\n\tda = distance(a,p);\n\tdb = distance(b,p);\n\t\n\t// Vertical distance from center axis\n\tdm = abs(fragCoord.y - r);\n\t\n\t// regions: left middle right\n\tleft = 1.0 - step(r,fragCoord.x);\n\tmiddle = 1.0 - step(r+len,fragCoord.x) - left;\n\tright = 1.0 - step(width, fragCoord.x) - left - middle;\n\t\t\n\t/// left semi circle\n\tleftv = (r - da)/aawidth;\n\tclamp(leftv, 0.0, 1.0);\n\t\n\t/// right semi circle\n\trightv = (r - db)/aawidth;\n\tclamp(rightv, 0.0, 1.0);\n\t\n\t/// middle part\n\t\n\t// antialias top & bottom\n\tmf1 = (r - dm)/aawidth;\n\tmf1 = clamp(mf1, 0.0, 1.0);\n\n\t// Stippling\n\txInMiddle = fragCoord.x - r;\n\tmf2 = 1.0 - step(onlen, mod(xInMiddle,onofflen));\n\t\n\t// anti-alias left edge of stipple\n\tmf3 = mod(xInMiddle,onofflen)/aawidth;\n\t// eliminate left anti-alias for first stipple\n\tmf3 = mf3 + 1.0 - step(aawidth, xInMiddle);\n\t\n\t// anti-alias right edge of stipple\n\tmf4 = (onlen - mod(xInMiddle,onofflen))/aawidth;\n\t\n\t\n\t// Clamp all values\n\tmf2 = clamp(mf2,0.0,1.0);\n\tmf3 = clamp(mf3,0.0,1.0);\n\tmf4 = clamp(mf4,0.0,1.0);\n\t\n\t// Combine values for middle part\n\tmiddlev = mf1 * mf2 * mf3 * mf4; // middle part\n\t\n\tfragColor = vec4(\n\t\t// Combine values for entire line\n\t\tleft * leftv + middle * middlev + right * rightv,\n\t\t0.0, 0.0, 1.0); \n\t// in real life use the computed value for alpha instead of Red channel\n\n\n\t// Uncomment the following to see the regioning logic\n\t/*\n\tfragColor = vec4(\n\t\tleft * leftv,\n\t\tmiddle * middlev,\n\t\tright * rightv,\n\t\t1.0);\n\t*/\n\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lssGDN","date":"1371239705","viewed":433,"name":"Antialiased stipple rounded line","username":"maverick","description":"Anti aliased lines with simple on-off stipple and rounded edges\nBy no means is this the fastest way to do this, but shows how some basic knowledge can get you usable results","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["antialiasstippleroundedline"],"hasliked":0,"parentid":"","parentname":""}}