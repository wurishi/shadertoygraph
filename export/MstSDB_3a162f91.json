{"ver":"0.1","info":{"id":"MstSDB","date":"1461438541","viewed":292,"name":"Sceneradio@wappuradio- Live 2016","username":"Exca","description":"Template for live coding done during Sceneradio show at wappuradio, a student made radio station operating in Finland during last weeks of may. For more info visit wappuradio.fi.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*** Sceneradio@Wappuradio live coding ***\n\nIf any of the viewers wish to know more about coding raymarchers there's great tutorial at\nhttps://www.shadertoy.com/view/XllGW4 Basic functions are copied from that tutorial.\n\nFor more additional info visit https://iquilezles.org/www/index.htm\n\nThis is 2 hour live shader coding during radio show.\nFor the template used visit: https://www.shadertoy.com/view/MdtSDB\n\nActual code starts from line 385\n*/\n// __ Matrix functions __ _____________________________________\n\n    // Return 2x2 rotation matrix\n    // With vector swizzle/mask can use as a 3x3 xform\n    // For y, you need to invert \n    // angle in radians\n    // ========================================\n    mat2 Rot2(float a ) {\n        float c = cos( a );\n        float s = sin( a );\n        return mat2( c, -s, s, c );\n    }\n\n    // http://www.songho.ca/opengl/gl_anglestoaxes.html\n\n    // Return 4x4 rotation X matrix\n    // angle in radians\n    // ========================================\n    mat4 Rot4X(float a ) {\n        float c = cos( a );\n        float s = sin( a );\n        return mat4( 1, 0, 0, 0,\n                     0, c,-s, 0,\n                     0, s, c, 0,\n                     0, 0, 0, 1 );\n    }\n\n    // Return 4x4 rotation Y matrix\n    // angle in radians\n    // ========================================\n    mat4 Rot4Y(float a ) {\n        float c = cos( a );\n        float s = sin( a );\n        return mat4( c, 0, s, 0,\n                     0, 1, 0, 0,\n                    -s, 0, c, 0,\n                     0, 0, 0, 1 );\n    }\n\n    // Return 4x4 rotation Z matrix\n    // angle in radians\n    // ========================================\n    mat4 Rot4Z(float a ) {\n        float c = cos( a );\n        float s = sin( a );\n        return mat4(\n            c,-s, 0, 0,\n            s, c, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n         );\n    }\n\n    // Translate is simply: p - d\n    // opTx will do transpose(m)\n    // p' = m*p\n    //    = [m0 m1 m2 m3 ][ p.x ]\n    //      [m4 m5 m6 m7 ][ p.y ]\n    //      [m8 m9 mA mB ][ p.z ]\n    //      [mC mD mE mF ][ 1.0 ]\n    // ========================================\n    mat4 Loc4( vec3 p ) {\n        p *= -1.;\n        return mat4(\n            1,  0,  0,  p.x,\n            0,  1,  0,  p.y,\n            0,  0,  1,  p.z,\n            0,  0,  0,  1\n        );\n    }\n\n    // if no support for GLSL 1.2+\n    //     #version 120\n    // ========================================\n    \n// __ Smoothing functions _____________________________________\n\n    // Smooth Min\n    // https://iquilezles.org/articles/smin\n\n    // Min Polynomial\n    // ========================================\n    float sMinP( float a, float b, float k ) {\n        float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n        return mix( b, a, h ) - k*h*(1.0-h);\n    }\n\n    // Min Exponential\n    // ========================================\n    float sMinE( float a, float b, float k) {\n        float res = exp( -k*a ) + exp( -k*b );\n        return -log( res )/k;\n    }\n\n    // Min Power\n    // ========================================\n    float sMin( float a, float b, float k ) {\n        a = pow( a, k );\n        b = pow( b, k );\n        return pow( (a*b) / (a+b), 1.0/k );\n    }\n\n// __ Surface Primitives ____________________________\n\n    // Return max component x, y, or z\n    // ========================================\n    float maxcomp(in vec3 p ) {\n        return max(p.x,max(p.y,p.z));\n    }\n\n// Signed\n\n    // b.x = Width\n    // b.y = Height\n    // b.z = Depth\n    // Leave r=0 if radius not needed\n    // ========================================\n    float sdBox(vec3 p, vec3 b, float r) {\n        vec3 d = abs(p) - b;\n        return min(maxcomp(d),0.0) - r + length(max(d,0.0));\n        // Inlined maxcomp\n        //return min(max(d.x,max(d.y,d.z)),0.0) - r + length(max(d,0.0));\n    }\n\n    // ========================================\n    float sdCappedCylinder( vec3 p, vec2 h ) {\n        vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n        return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n    }\n\n    // ========================================\n    float sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {\n        vec3 pa = p - a, ba = b - a;\n        float h = clamp( dot(pa,ba) / dot(ba,ba), 0.0, 1.0 );\n        return length( pa - ba*h ) - r;\n    }\n\n    // c.x Width\n    // c.y Base Radius\n    // c.z Depth\n    // Note: c must be normalized\n    // ========================================\n    float sdCone( vec3 p, vec3 c) // TODO: do we need to use 'in' for all primitives?\n    {\n        // c.x = length\n        // c.y = base radius\n        //float q = length( p.xy );\n        //return dot( c, vec2( q, p.z ) ); // BUG in iq's docs -- laying on side\n\n        float q = length( p.xz );\n        return dot( c.xy, vec2( q, p.y ) );\n\n        // Alt. cone formula given in: ???\n        //vec2 q = vec2( length( p.xz ), p.y );\n        //float d1 = -p.y - c.z;\n        //float d2 = max( dot(q,c.xy), p.y );\n        //return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.0);\n    }\n\n    // ========================================\n    float sdCylinder( vec3 p, vec3 c ) {\n        return length(p.xz - c.xy) - c.z;\n    }\n\n    // n.xyz = point on plane\n    // n.w   = distance to plane\n    // Note: N must be normalized!\n    // ========================================\n    float sdPlane( vec3 p, vec4 n ) {\n        return dot( p, n.xyz ) + n.w;\n    }\n\n    // 4 sided pyramid\n    // h.x = base X\n    // h.y = height\n    // h.z = base Z (usually same as h.x)\n    // ========================================\n    float sdPyramid4( vec3 p, vec3 h ) {\n        p.xz = abs(p.xz);                   // Symmetrical about XY and ZY\n        vec3 n = normalize(h);\n        return sdPlane(p, vec4( n, 0.0 ) ); // cut off bottom\n    }\n\n    // ========================================\n    float sdSphere( vec3 p, float r ) {\n        return length(p) - r;\n    }\n\n    // ========================================\n    float sdSphere2( vec3 p, float r ) {\n        return abs(length(p) - r);\n    }\n\n    // ========================================\n    float sdTorus( vec3 p, vec2 t ) {\n        vec2 q = vec2(length(p.xy) - t.x, p.z);\n        return length(q) - t.y;\n    }\n\n    // TODO: document/derive magic number 0.866025\n    // ========================================\n    float sdTriPrism( vec3 p, vec2 h ) {\n        vec3 q = abs(p);\n        return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n    }\n// __ Distance Operations _____________________________________\n\n// Basic\n    // Op Union\n    // ========================================\n    float opU( float d1, float d2 ) {\n        return min( d1, d2 );\n    }\n\n    // Op Subtraction\n    // ========================================\n    float opS( float a, float b ) {\n        return max( -b, a ); // BUG in iq's docs: -a, b\n    }\n\n    // Op Intersection\n    // ========================================\n    float opI( float a, float b ) {\n        return max( a, b );\n    }\n\n// Advanced\n    // ========================================\n    float opBlend( float a, float b, float k ) {\n        return sMin( a, b, k );\n    }\n\n    // a angle\n    // ========================================\n    float displacement( vec3 p, float a ) {\n        return sin(a*p.x)*sin(a*p.y)*sin(a*p.z); // NOTE: Replace with your own!\n    }\n\n    // ========================================\n    float opDisplace( vec3 p, float d1, float d2 ) {\n        return d1 + d2;\n    }\n\n    // Op Union Translated\n    // ========================================\n    vec4 opUt( vec4 a, vec4 b, float fts ){\n        vec4 vScaled = vec4(b.x * (fts * 2.0 - 1.0), b.yzw);\n        return mix(a, vScaled, step(vScaled.x, a.x) * step(0.0, fts));\n    }\n\n\n// __ Domain Operations _______________________________________\n\n// NOTE: iq originally inlined the primitive inside the Domain operations. :-(\n// This implied that you would have needed to provide \n// a primitive with one of the sd*() functions above\n// since we can't have a generic pointer to a function!\n// However we have moved them back out to the caller\n// for clarity and flexibility without general loss of precision.\n\n// Basic\n\n    // Op Repetition\n    // ========================================\n    vec3 opRep( vec3 p, vec3 spacing ) {\n        return mod(p,spacing) - 0.5*spacing;\n    }\n\n// Deformations\n\n    // Op Twist X\n    // ========================================\n    vec3 opTwistX( vec3 p, float angle ) {\n        mat2 m = Rot2( angle * p.x );\n        return   vec3( m*p.yz, p.x );\n    }\n\n    // Op Twist Y\n    // ========================================\n    vec3 opTwistY( vec3 p, float angle ) {\n#if 0 // original\n        float c = cos( angle * p.y );\n        float s = sin( angle * p.y );\n        mat2  m = mat2( c, -s, s, c );\n        vec3  q = vec3( m*p.xz, p.y );\n        // return primitive(q); // BUG in iq's docs, should be: return q\n        return q;\n#else // cleaned up\n        mat2 m = Rot2( angle * p.y );\n        return   vec3( m*p.xz, p.y );\n#endif\n    }\n\n    // Op Twist Z\n    // ========================================\n    vec3 opTwistZ( vec3 p, float angle ) {\n        mat2 m = Rot2( angle * p.z );\n        return   vec3( m*p.xy, p.z );\n    }\n\n    // iq's bend X\n    // ========================================\n    vec3 opCheapBend( vec3 p, float angle ) {\n#if 0 // original // broken :-(\n        float c = cos( angle * p.y );\n        float s = sin( angle * p.y );\n        mat2  m = mat2( c, -s, s, c );\n        vec3  q = vec3( m*p.xy, p.z ); // BUG in iq's docs, should be: p.yx\n#else\n        mat2  m = Rot2( angle * p.y );\n        vec3  q = vec3( m*p.yx, p.z );\n#endif\n        return q;\n    }\n\n    // Op Cheap Bend X\n    // ========================================\n    vec3 opBendX( vec3 p, float angle ) {\n        mat2 m = Rot2( angle * p.y );\n        return   vec3( m*p.yx, p.z );\n    }\n\n    // Op Cheap Bend Y\n    // ========================================\n    vec3 opBendY( vec3 p, float angle ) {\n        mat2 m = Rot2( angle * p.z );\n        return   vec3( m*p.zy, p.x );\n    }\n\n    // Op Cheap Bend Z\n    // ========================================\n    vec3 opBendZ( vec3 p, float angle ) {\n        mat2 m = Rot2( angle * p.x );\n        return   vec3( m*p.xz, p.y );\n    }\n\n    // d = distance to move\n    // ========================================\n    vec3 opTrans( vec3 p, vec3 d ) {\n        return p - d;\n    }\n\n    // Note: m must already be inverted!\n    // TODO: invert(m) transpose(m)\n    // Op Rotation / Translation\n    // ========================================\n    vec3 opTx( vec3 p, mat4 m ) {   // BUG in iq's docs, should be q\n        return (transpose(m)*vec4(p,1.0)).xyz;\n    }\n\n    // Op Scale\n    // ========================================\n    float opScale( vec3 p, float s ) {\n        return sdBox( p/s, vec3(1.2,0.2,1.0), 0.01 ) * s; // TODO: FIXME: NOTE: replace with primative sd*()\n    }\n\n\n/******************************\n Start here\n******************************/\n\nconst float EPSILON=0.001;\nconst int STEPS=100;\nconst float MAX_DIST=30.;\n\n//PientÃ¤ sÃ¤Ã¤tÃ¶Ã¤ studiossa :D\n\nfloat distFunc(vec3 p, out float material, float t)\n{\n    vec3 op = p;\n    p+=vec3(sin(iTime)*2., 0.,3.);\n    float radius = 0.9;\n//    vec3 rep = opRep(p, vec3(3.1, 3.1, 3.1));\n//    p = mix(rep, p, abs(cos(iTime*0.3)*0.2));\n    p = opTwistZ(p , sin(iTime*0.4)*0.4+0.0);\n    //p = opTwistY(p, cos(iTime*3.)*1.);\n    float height = -2.5;\n    float mp=0.9+sin(iTime)*0.4;\n    float tt = iTime*3.;\n    float ball = sdSphere(p + vec3(sin(tt)*4., cos(tt)*mp+height, .5), radius+sin(tt)*0.4);\n    ball = sMin( ball, sdSphere(p +vec3(sin(tt+0.2)*4., cos(tt+.1)*mp+height, 1.), radius+sin(tt+.4)*0.4),1.5);\n   \tball = sMin( ball, sdSphere(p +vec3(sin(tt+0.4)*4., cos(tt+.2)*mp+height, 1.5),radius+sin(tt+.8)*0.4),2.1);\n   \tball = sMin( ball, sdSphere(p +vec3(sin(tt+0.6)*4., cos(tt+.3)*mp+height, 2.), radius+sin(tt+1.2)*0.4),2.1);\n   \tball = sMin( ball, sdSphere(p +vec3(sin(tt+0.8)*4., cos(tt+.4)*mp+height, 2.5),radius+sin(tt+1.6)*0.4),2.1);\n  \tball = sMin( ball, sdSphere(p +vec3(sin(tt+1.0)*4., cos(tt+.5)*mp+height, 3.), radius+sin(tt+2.)*0.4),2.1);\n    \n    \n    \n   \tfloat ground = sdPlane(op, vec4(0, 1., 0.,2.));\n    \n    vec3 pyrp = op;\n    pyrp -= vec3(0., 0., iTime*5.);\n    pyrp = opRep(pyrp, vec3(4.,0., 4.));\n    float pyramids = sdPyramid4(pyrp+vec3(0.,0.,0), vec3(0.1));\n\t\n//    ball = 0.;\n    \n    \n    material = ball <ground?0.:1.;\n    material = pyramids < material ? 2. : material;\n    float dist = opU(ball, ground);\n    dist = opU(pyramids, dist);\n    \n    if(t < 0.4)\n        dist = 0.4;\n    return dist;\n}\n\nvec3 calcLight(vec3 p, float material, vec3 rd, float t)\n{\n    vec2 eps = vec2(0.0, EPSILON);\n    float m = 0.;\n    float d1 = distFunc(p + eps.yxx,m,t);\n    float d2 = distFunc(p - eps.yxx,m,t);\n\tvec3 normal = normalize(vec3(\n    d1 - d2,\n    distFunc(p + eps.xyx,m,t) - distFunc(p - eps.xyx,m,t),\n    distFunc(p + eps.xxy,m,t) - distFunc(p - eps.xxy,m,t)));\n    vec3 diffuse = vec3(max(0.0, dot(-rd, normal)));\n    \n    if(material < 0.5)\n    {\n     //balls   \n        diffuse*= vec3(1.7, 1.5,1.8);//*abs(sin(t*24.));\n    }\n    else if(material < 1.5)\n    {\n      //ground\n        diffuse *= abs(sin(t*40.+iTime*3.));\n    }\n    else if(material < 2.5)\n    {\n     \t//pyramids\n        diffuse*=vec3(0., 0., 1.);\n    }\n    \n    vec3 specular = pow(diffuse, vec3(32.0));\n    \n\treturn vec3(diffuse + specular);\n}\n\nvec3 setCamera( in vec3 eye, in vec3 target, in vec2 uv )\n{\n    float fov = 1.0;\n\tvec3 forward = normalize( target - eye );\n    vec3 up = normalize( cross(forward,vec3(0.0,1.0,0.0) ) );\n    vec3 right = normalize( cross(up,forward));\n\tvec3 raydir = normalize( uv.x*up + uv.y*right + fov*forward );\n\treturn raydir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //Map uv to -1..1 & fix aspect\n    uv*=2.;\n    uv-=1.;\n    uv.x*=iResolution.x/iResolution.y;\n    float time = iTime;\n    \n    vec3 eye = vec3(sin(time)*.1,cos(time*1.)+.5,3.);\n//    eye = vec3(0., 1., 1.);\n    vec3 lookAt =  vec3(cos(time)*3.,cos(time*3.2)*0.3-1.6,sin(time));    \n    lookAt = -eye;\n    lookAt = vec3(0.);\n    vec3 rayDir = setCamera(eye, lookAt, uv);\n    \n    vec3 color = vec3(0.);\n    \n    //Distance counter\n    float t = 0.;\n    vec3 bg = vec3(sin(time)*0.2+1.2, sin(time+0.4)*0.2+1.2, 1.2);\n    bg = vec3(1.1,0.8,0.4);\n    bg*=sin((uv.y+sin(time+uv.x))*20.)*0.3+1.;\n    //March\n    for(int i =0; i<STEPS;i++){\n        vec3 p = rayDir*t+eye;\n        float material = 0.;\n        float dist = distFunc(p,material,t);\n        \n        if(dist < EPSILON )\n        {\n         \tcolor = calcLight(p,material,rayDir, t);   \n            color =mix(color, bg,max(0.,(t-20.)/(MAX_DIST-20.)));\n            break;\n        }\n        if(t > MAX_DIST)\n        {\n         \tcolor = bg;\n         //   color = vec3(1.);\n//            color *= mod(uv.x*uv.y+time*0.2, 0.06)+0.9; \n  //          color *= mod(uv.y+time*0.2, 0.06)+0.9; \n            break;\n        }\n            \n        t += dist;\n    }\n\tfragColor = vec4(color,1.0);\n}\n\n//KOODI EI ILMEISESTI NÃ„Y? TEEEN REFRESHIN. HETKI","name":"Image","description":"","type":"image"}]}