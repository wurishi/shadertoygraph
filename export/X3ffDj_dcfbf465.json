{"ver":"0.1","info":{"id":"X3ffDj","date":"1728914295","viewed":107,"name":"Metal Grid Ball","username":"Delincoter","description":"My friend said she has trypophobia, so I did this to see if it could alleviate her symptoms ;)","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["3d","fractal","raymarch","sphere","ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//ray marching funtion abstract from https://www.shadertoy.com/view/WtGXDD\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    \n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat sdSphere(vec3 p, float r) {\n\n\n\treturn length(p)-r;\n}\n\nfloat sdHole(vec3 p, float r) \n{\n    p *= sin(length(p) +iTime*.1) * 1.25;\n      \n    float n = .5;\n    for(int i = 0; i < 3; i++)\n    {\n        p = abs(p);\n        \n        p -= n;\n        n *= 0.5;\n    }\n    \n\n    float sd = length(p)-r;\n\n\treturn sd;\n}\n\n\nfloat GetDist(vec3 p) \n{\n    float d = sdSphere(p, 1.);  \n    \n    d = opSmoothSubtraction(sdHole(p, 0.15), d, 0.001);\n     \n    return d*0.5;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) \n{\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) \n{\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(3, 0, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(.0), 2.);\n    vec3 col = vec3(.5);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n  \n        float spec = clamp(pow(max(dot(normalize(vec3(.5)), r), 0.0), 3.), 0., 1.);  \n        float diff = dot(n, vec3(.5));\n        col = mix(vec3(0.5,0.0,.5), vec3(.0,1.,1.)+spec*.5, diff);\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}