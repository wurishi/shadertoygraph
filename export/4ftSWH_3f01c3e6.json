{"ver":"0.1","info":{"id":"4ftSWH","date":"1713874620","viewed":34,"name":"Revision 2024","username":"Marex","description":"This shader is geometry scaled with the time","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["shaderjam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\n\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n vec2 rotatedUV=uv*rotate2d(iTime);\n   \n    float pattern = ceil(sin(iTime+rotatedUV.y*100.)/2.);\n  \n    vec3 finalPattern =vec3(pattern,pattern,pattern);\n \n    vec3 finalColour=vec3(1,1,1)*ceil(-sdHexagram(rotatedUV,sin(iTime*10.)/2.+.5));\n\n    vec3 Final =mix(finalColour,finalPattern,finalColour);\n  \n\tfragColor = vec4(Final,0);\n}","name":"Image","description":"","type":"image"}]}