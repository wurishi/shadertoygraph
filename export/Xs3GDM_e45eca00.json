{"ver":"0.1","info":{"id":"Xs3GDM","date":"1449862102","viewed":839,"name":"Small Path Tracer","username":"Yoshimaster96","description":"A small path tracing shader that can easily be modified.\nUPDATE 1: Initialized fragColor to prevent errors.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["pathtracer","easy","tracer","tiny","path","small"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float sphere(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n vec3 rc = ray-center;\n float c = dot(rc, rc) - (radius*radius);\n float b = dot(dir, rc);\n float d = b*b - c;\n if(d<0.0) return -1.0;\n float t = -b - sqrt(d);\n if(t>0.0) return t;\n t = -b + sqrt(d);\n if(t>0.0) return t;\n return -1.0;\n}\n\nfloat seed = 0.0;\nfloat rand() { return fract(sin(seed++)*43758.5453123); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n fragColor = vec4(0.0);\n vec2 coord = fragCoord.xy / iResolution.xy;\n vec2 uv = (-1.0 + 2.0*coord.xy) *\n  vec2(iResolution.x/iResolution.y, 1.0);\n coord += vec2(1.0);\n seed = dot(coord,coord);\n for(float j=0.0; j<64.0; j+=1.0)\n {\n vec3 ro = vec3(0.0, 0.0, -3.0);\n vec3 rd = normalize(vec3(uv, 3.0));\n vec3 p0 = vec3(-1.0, 0.25, 0.0);\n vec3 p1 = vec3(0.0, -100000.25, 0.0);\n vec3 p2 = vec3(1.0, 0.25, 0.0);\n vec3 col = vec3(0.0);\n float samps = 0.0;\n float newt0 = 0.0;\n float newt1 = 0.0;\n float newt2 = 0.0;\n for(int i=0; i<4; i++)\n {\n  newt0 = sphere(ro, rd, p0, 0.5);\n  newt1 = sphere(ro, rd, p1, 100000.0);\n  newt2 = sphere(ro, rd, p2, 0.5);\n  if(newt0<0.0 && newt1<0.0 && newt2<0.0)\n  {\n   col = vec3(0.0);\n   break;\n  }\n  else if(newt0>0.0 && (newt0<newt1 || newt1<0.0) && (newt0<newt2 || newt2<0.0))\n  {\n   col += vec3(16.0);\n   break;\n  }\n  else if(newt2>0.0 && (newt2<newt1 || newt1<0.0))\n  {\n   float rnd1 = 6.283185*rand();\n   float rnd2 = rand();\n   vec3 inter = ro+(rd*newt2);\n   vec3 nrm = normalize(inter-p2);\n   vec3 u = normalize(cross(nrm.yzx,nrm));\n   vec3 v = normalize(cross(nrm,u));\n   ro = inter;\n   rd = (u*cos(rnd1) + v*sin(rnd1))*rnd2 + nrm*sqrt(1.0-(rnd2*rnd2));\n  }\n  else if(newt1>0.0)\n  {\n   float rnd1 = 6.283185*rand();\n   float rnd2 = rand();\n   vec3 inter = ro+(rd*newt1);\n   vec3 nrm = normalize(inter-p1);\n   vec3 u = normalize(cross(nrm.yzx,nrm));\n   vec3 v = normalize(cross(nrm,u));\n   ro = inter;\n   rd = (u*cos(rnd1) + v*sin(rnd1))*rnd2 + nrm*sqrt(1.0-(rnd2*rnd2));\n  }\n  samps += 1.0;\n }\n fragColor += vec4( col/(64.0*samps), 1.0 );\n }\n}","name":"","description":"","type":"image"}]}