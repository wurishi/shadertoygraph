{"ver":"0.1","info":{"id":"ltXfzB","date":"1512304645","viewed":169,"name":"Coupled Gray-Scott","username":"FlexMonkey","description":"Coupled Gray-Scott ","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["grayscott"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tint radius = 5; \n    vec2 pixelSize = vec2(1.0 / iResolution.xy); \n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 zero = texture(iChannel0, coord).xyz;\n  \tfloat count = 0.0;\n    vec2 ab = vec2(0);\n    \n    for (int x = -radius; x <= radius; x++) {\n        for (int y = -radius; y <= radius; y++) {\n            if (length(vec2(x, y)) < float(radius)) {\n            \tab += texture(iChannel0, coord + pixelSize * vec2(x, y)).xy;\n                count++;\n            }\n        }\n    }\n    \n    ab /= count;\n    \n    vec3 cd = texture(iChannel1, coord).xxy;\n    \n    vec3 diff = sqrt(abs(ab.xxy - cd));\n    \n    diff = smoothstep(vec3(0), vec3(1), diff); \n    \n\tfragColor = vec4(diff, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\nfloat f = 0.037;\nfloat k = 0.052;\nfloat dU = 0.2097;\nfloat dV = 0.080;\n\nfloat timestep = 1.1;\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 4.0; \n\n    vec3 p = texture(iChannel0, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float u = p.x;\n    float v = p.y;\n    \n    float w = texture(iChannel2, coord).y;\n    float x = texture(iChannel2, coord).x;\n\n    float reactionRate = u * v * v * step(0.2, w) ;  \n    \n    float delta_u = dU * laplacian.x - reactionRate + f * (1.0 - sqrt(u * x));\n    float delta_v = dV * laplacian.y + reactionRate - (f + k) * v;\n\n   \tvec2 result = clamp(vec2(u + delta_u * timestep, v + delta_v * timestep), 0.0, 1.0);\n\n    if(p.xyz == vec3(0) || reset()) {\n        fragColor = texture(iChannel1, coord) * vec4(1, 0.5, 1, 1);\n        float aspect = iResolution.x / iResolution.y;\n        if (abs(coord.x - 0.5) > 0.02 || abs(coord.y - 0.5) > 0.02 * aspect) {\n            fragColor = vec4(1,0,0,1);\n        }\n        \n    } else {\n        \n        float uSum = p.z + result.y; \n        \n        if (uSum > 20.0) {\n            result = vec2(result.x * result.x, sqrt(x*w)); \n            uSum = 0.0;\n        }\n        \n        fragColor = vec4(result.xy, uSum, 1.0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tSimon Gladman | http://flexmonkey.blogspot.co.uk/ | November 2017\n*/\n\nfloat f = 0.029;\nfloat k = 0.0625;\nfloat dU = 0.215;\nfloat dV = 0.105;\n\nfloat timestep = 1.1;\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 pixelSize = vec3(1.0 / iResolution.xy, 0.0) * 1.0; \n\n    vec3 p = texture(iChannel0, coord).xyz;\n\n    vec3 laplacian = vec3(texture(iChannel0, coord - pixelSize.zy) +\n                          texture(iChannel0, coord - pixelSize.xz) -\n                          4.0 * texture(iChannel0, coord) +\n                          texture(iChannel0, coord + pixelSize.xz) +\n                          texture(iChannel0, coord + pixelSize.zy));\n\n    float u = p.x;\n    float v = p.y;\n    \n    float w = texture(iChannel2, coord).y;\n    float x = texture(iChannel2, coord).x;\n\n    float reactionRate = u * v * v * step(0.15, x);  \n    \n    float delta_u = dU * laplacian.x - reactionRate + f * (1.0 - u + (w * w));\n    float delta_v = dV * laplacian.y + reactionRate - (f + k) * v;\n\n   \tvec2 result = clamp(vec2(u + delta_u * timestep, v + delta_v * timestep), 0.0, 1.0);\n\n    if(p.xyz == vec3(0) || reset()) {\n        fragColor = texture(iChannel1, coord).zxyw * vec4(1, 0.5, 1, 1);\n        float aspect = iResolution.x / iResolution.y;\n        if (abs(coord.x - 0.5) > 0.025 || abs(coord.y - 0.5) > 0.025 * aspect) {\n            fragColor = vec4(1,0,0,1);\n        }\n        \n    } else {\n               \n        fragColor = vec4(result.xy, 0.0, 1.0);\n    }\n    \n}","name":"Buf B","description":"","type":"buffer"}]}