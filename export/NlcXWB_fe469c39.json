{"ver":"0.1","info":{"id":"NlcXWB","date":"1639664989","viewed":201,"name":"microworld ii red pill","username":"Carandiru","description":"experimental CA","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"fl3XDS","parentname":"microworld ii"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 col = textureLod(iChannel0, uv, 0.5).rr;\n    vec2 blur = textureLod(iChannel0, uv, 1.5).gb;\n    \n    float opacity = col.x;\n    float d = 1.0f / (1.0f + fract(col.y*col.y));\n    \n    float o = opacity * d;\n    \n    opacity = blur.x;\n    d = 1.0f / (1.0f + fract(blur.y*blur.y));\n    \n    o = mix(o, opacity * d, d);\n    \n    o += o * o;\n    \n    vec3 color = (1.0f - o) * vec3(1.,0.005,.3);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GOLDEN_RATIO (1.61803398874989484820)\n#define dilation (GOLDEN_RATIO * 9999.0)\n#define size 1024\n#define scale (iTime * 2.0f * float(size))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0f * fragCoord / iResolution.xy - 1.0f;\n        \n    vec2 offset = vec2(0);\n    offset.x = float(iFrame & (size-1));\n    offset.y = float((iFrame - size) & (size-1));\n    \n    vec3 bn = textureLod(iChannel0, (fragCoord + offset)/float(scale), 0.0f).rgb;\n    bn.xy = 2.0f * bn.xy - 1.0f;\n    bn.z *= dilation * bn.x * bn.y;\n        \n    offset.x = float((iFrame - 1) & (size-1));\n    offset.y = float((iFrame - size - 1) & (size-1));\n    \n    vec3 bn_last = textureLod(iChannel0, (fragCoord + offset)/float(scale), 0.0f).rgb;\n    bn_last.xy = 2.0f * bn_last.xy - 1.0f;\n    bn_last.z *= dilation * bn_last.x * bn_last.y;\n    \n    offset.x = float((iFrame + 1) & (size-1));\n    offset.y = float((iFrame - size + 1) & (size-1));\n    \n    vec3 bn_next = textureLod(iChannel0, (fragCoord + offset)/float(scale), 0.0f).rgb;\n    bn_next.xy = 2.0f * bn_next.xy - 1.0f;\n    bn_next.z *= dilation * bn_next.x * bn_next.y;\n    \n    vec3 last = textureLod(iChannel1, fragCoord/iResolution.xy, 0.0f).gba;\n    last.xy = 2.0f * last.xy - 1.0f;\n    last.z *= dilation * last.x * last.y;\n    \n    float last_last = textureLod(iChannel1, (fragCoord - vec2(1))/iResolution.xy, 0.0f).a;\n    float last_next = textureLod(iChannel1, (fragCoord + vec2(1))/iResolution.xy, 0.0f).a;\n    \n    float depth = bn.z * last_next / last_last;\n\n    vec3 p = vec3(uv, depth);\n    float d = distance(p, bn), dd = 0.0f;\n    \n    vec3 best = bn;\n    \n    dd = distance(p, bn_last);\n    best = mix(best, bn_last, bvec3(dd < d));\n    d = min(d, dd);\n        \n    dd = distance(p, last);\n    best = mix(best, last, bvec3(dd < d));\n    d = min(d, dd);\n    \n    dd = distance(p, bn_next);\n    best = mix(best, bn_next, bvec3(dd < d));\n    d = min(d, dd);\n    \n    \n    best.xy = best.xy * 0.5f + 0.5f;\n    best.z /= dilation * best.x * best.y;\n    \n    \n    fragColor = vec4(d,best);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 random(in vec2 seed) {\n    return textureLod(iChannel0, (seed * iResolution.xy) / 1024.0f, 0.0f);\n}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 seed = random(uv);\n    \n    if (iFrame < 20) {\n        fragColor = seed;\n        return;\n    }\n    \n    vec3 color = vec3(0);\n    \n    color = textureLod(iChannel1, uv, 0.0f).rgb;\n    \n    vec3 hsv = rgb2hsv(color);\n    \n    hsv.x += iTimeDelta * 0.5f;\n    hsv.x = mix(hsv.x, 1.0f - fract(hsv.x), max(0.0f, hsv.x - 1.0f));\n    \n    color = hsv2rgb(hsv);\n    \n    fragColor = vec4(color.rgb, seed.w);\n}","name":"Buffer B","description":"","type":"buffer"}]}