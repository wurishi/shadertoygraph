{"ver":"0.1","info":{"id":"Nt33RS","date":"1636215107","viewed":232,"name":"percolation in random network 3","username":"FabriceNeyret2","description":"each pixel is connect randomly to another pixel within a given radius. ( see buffA).\nid circulates through connections. min id is kept so as to visualize cycles.\n\nin this variant: 1 single connection, within a given radius, but for 3% of nodes with long d","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["graph","network","percolation","epidemic","epidemiology"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//variant of https://shadertoy.com/view/sld3D7\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U/1.);\n    O = hue(O.x);\n // O = vec4(O.z/10.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define hash(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\nfloat radius = .04;\n                                     // --- random link within radius r.\n#define link(r) T (mod( U + (r)*R*(hash(U)*2.-1.) , R ) ).x\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U -= .5;\n    if (iFrame==0) {                 // --- initialization\n        O.x = U.x + U.y*R.x;         // node label: start with its id\n        return;\n    }\n                                     // --- propagation along the random network\n    O = T(U);                        // previous step\n    O.y = O.x;                       // keep previous value\n  \n            // propagate from random link. label = min(id)\n            // mostly local, sometime global\n    O.x = min( O.x, link( hash(U+.2).x < .03 ? .5 : radius ) );\n        \n    O.z = O.x==O.y ? O.z+1. : 0.;    // convergence detector\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(U) texelFetch( iChannel0, ivec2(U), 0 )","name":"Common","description":"","type":"common"}]}