{"ver":"0.1","info":{"id":"cdjyRc","date":"1688069207","viewed":88,"name":"blending hexagons","username":"IlyaBelyy","description":"Interpolate colours among adjacent hex cells","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XlXcW4\nvec3 hash( uvec3 x )\n{\n    const uint k = 1103515245U;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvec3 id2colour(ivec2 id)\n{\n//    return 1. - vec3(abs(vec2(id)) * 0.25, 0.);\n    return hash(uvec3(id.xy + 123, id.x + id.y + 200));\n}\n\nvec2 hex2pix(vec2 h)\n{\n    return vec2(\n        sqrt(3.) * h.x + sqrt(3.) * 0.5 * h.y,\n        1.5 * h.y\n    );\n}\n\n// https://www.redblobgames.com/grids/hexagons/more-pixel-to-hex.html#kenneth-shaw\nivec2 pix2id(vec2 p)\n{\n    float x = p.x / sqrt(3.);\n    float y = p.y + 1.;\n    float t2 = floor(x + y);\n    int r = int(floor((floor(y - x) + t2) / 3.));\n    int q = int(floor((floor(2. * x + 1.) + t2) / 3.)) - r;\n    return ivec2(q, r);\n}\n\n// perhaps, the barycentric coords could instead be somehow done by overlaying\n// the triangle grid from https://www.shadertoy.com/view/4dKXR3 ?\n\n// https://www.shadertoy.com/view/wdjfz1\nvec3 barycentric(vec2 v1, vec2 v2, vec2 v3, vec2 pos)\n{\n    vec2 posv1 = pos - vec2(v1);\n    \n    vec2 v21 = v2 - v1;\n    vec2 v31 = v3 - v1;\n    \n    float scale = v21.x * v31.y - v21.y * v31.x;\n    float rscale = 1.0 / scale;\n    float baryi = ( posv1.x * v31.y - posv1.y * v31.x ) * rscale;   \n    float baryj = ( posv1.x * v21.y - posv1.y * v21.x ) * -rscale;\n    \n    return vec3 ( baryi, baryj, 1. - baryi - baryj );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - vec2(iResolution)*0.5) / iResolution.y;\n    uv *= 5. * sqrt(3.);\n    float t = iTime * 0.125;\n    uv += 15. * cos(1. * vec2(t, t + 3.1415*.5));\n\n    // find the hex the point belongs to\n    ivec2 id = pix2id(uv);\n    vec2 centre = hex2pix(vec2(id));\n\n    // now we need to find the nearest two neightbours to perform interpolation\n    ivec2 hexd = ivec2(step(centre, uv));\n    \n    // one of these is always on an adjacent row\n    // X coorinate depends on Y because the coordinate system is not orthogonal\n    // and while top right neighbour is +1,+1 bottom right is 0,-1\n    ivec2 id2 = id + ivec2(hexd.x - hexd.y, hexd.y * 2 - 1);\n    vec2 centre2 = hex2pix(vec2(id2));\n    \n    // to find the other neighbour we need to check the nearest one between 2 candidates\n    // the first of these is on the same row as id2 but on the other side horizontally \n    ivec2 id3v = id + ivec2(1 - hexd.x - hexd.y, hexd.y * 2 - 1);\n    vec2 centre3v = hex2pix(vec2(id3v));\n    // the second is the one to the left/right on the same row\n    ivec2 id3h = id + ivec2(hexd.x * 2 - 1, 0);\n    vec2 centre3h = hex2pix(vec2(id3h));\n    ivec2 id3;\n    vec2 centre3;\n    if (dot(uv - centre3v, uv - centre3v) < dot(uv - centre3h, uv - centre3h)) {\n        id3 = id3v;\n        centre3 = centre3v;\n    } else {\n        id3 = id3h;\n        centre3 = centre3h;\n    }\n\n    // interpolation\n    vec3 bc = barycentric(centre3, centre, centre2, uv);\n    vec3 interpolated_colour = id2colour(id ) * bc.r +\n                               id2colour(id2) * bc.g +\n                               id2colour(id3) * bc.b;\n                               \n    vec3 cell_colour = id2colour(id);\n\n    fragColor.rgb = mix(cell_colour, interpolated_colour, clamp(0.7 + 0.4 * sin(iTime),0.,1.));\n    fragColor.rgb = pow(fragColor.rgb, vec3(1./2.2));\n\n    fragColor.a = 1.0;\n\n//fragColor.rgb = id2colour(pix2id(uv));\n//fragColor.rgb = vec3(hexd, 0);\n//fragColor.rgb *= fract(dot(uv - centre3, uv - centre3));\n//fragColor.rgb *= 0.75 + 0.25 * fract(sin(25. * length(uv - centre3)));\n//if(bc.x>0.&&bc.y>0.&&bc.x+bc.y<1.)\n//fragColor.rgb = bc;\n}","name":"Image","description":"","type":"image"}]}