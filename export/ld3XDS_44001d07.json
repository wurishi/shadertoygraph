{"ver":"0.1","info":{"id":"ld3XDS","date":"1461175934","viewed":161,"name":"Valentiness","username":"aetelani","description":"Cute","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Distributed under CC-BY-NC-SA license (c) 2016 by Anssi EtelÃ¤niemi, aetelani(a)live.com \nvec2 uv, z, z1;\n#define PI 3.14159\n//precision lowp float;\nfloat t;\nmat4 R3(vec3 ax, float angle);\n\n// z_n1 = z_n0^2 + constant\nvec2 cMul(vec2 a, vec2 b) {            \n    return vec2(mod(length(b), 0.4));\n    /*return sin(vec2(a.x * b.x - a.y * b.y,\n                    a.x * b.y + a.y * b.x\n               ));*/\n}\n\nmat2 R(float a) { // z\n    // xyz\n    mat4 r3 = R3(vec3(.0, 0., 1.), a);\n    // col-major.stpq\n    return mat2(r3[0].st, r3[1].st);\n//\t\treturn mat2(vec2(cos(a), sin(a)), vec2(-sin(a), cos(a)));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nmat2 Ry(float a) { // y\n    mat4 r3 = R3(vec3(0., 1., .0), a);\n    return mat2(r3[0].st, r3[1].st);\n}\n\nmat2 Rx(float a) { // x\n    mat4 r3 = R3(vec3(1., 0., .0), a);\n    return mat2(r3[0].st, r3[1].st);\n}\n\nmat4 R3(vec3 ax, float angle) {\n    vec3 axis = normalize(ax);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n/*\n [Mxx, Mxy, Mxz, Cx],\n [Myx, Myy, Myz, Cy],\n [Mzx, Mzy, Mzz, Cz],\n [Lx,  Ly,  Lz,   W]\n*/\n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime;\n\tuv = fragCoord.xy / iResolution.xy;    \n    const int depth = 10;\n    vec2 a = vec2(uv.x - .5, uv.y - .5);\n    vec2 c = vec2(0.6);\n\n    for(int i=0; i < depth; ++i) {\n        z =  cMul(z, z) + c * a * R(float(depth)+float(depth) + t);\n        c += sin(t) * 0.6;\n\t}\n\n    float dist = distance(a, z);\n    vec4 col = vec4(0.);\n\n    col.r = length(z);\n    col.g = dot(z, z) * .4;\n    if (col.g > 0.5) {\n        col.b  = length(cross(z.xyx, a.xyx));\n    } else if (length(a) > .7) {\n        col.r = vec4(1.0).r;\n\t}\n        \n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}