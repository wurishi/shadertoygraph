{"ver":"0.1","info":{"id":"Xsy3Ry","date":"1462303651","viewed":170,"name":"Raymarching Study - Final","username":"nuts4nuts4nuts","description":"Study of basic raymarching technique","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPECULAR\n#define NORMAL_COLORS\n#define ADDITIONS\n#define MOVEMENT\n#define TEXTURES\n#define SHADOWS\n\nconst int MAX_ITER = 100;\nconst float MAX_DIST = 30.0;\nconst float EPSILON = 0.001;\nconst vec3 LIGHT_DIR = vec3(0.0, 1.0, 0.0);\n\n//Distance functions for shapes - taken from\n//https://iquilezles.org/articles/distfunctions\nfloat sdSphere(vec3 position, float radius)\n{\n    return length(position) - radius;\n}\n\nfloat sd5Sphere(vec3 position)\n{\n    return sdSphere(position, 5.0);\n}\n\nfloat sdTorus( vec3 position, vec2 t )\n{\n  \tvec2 q = vec2(length(position.xz)-t.x,position.y);\n  \treturn length(q)-t.y;\n}\n\nfloat udRoundBox( vec3 pos, vec3 bounds, float roundness )\n{\n  return length(max(abs(pos) - bounds, 0.0)) - roundness;\n}\n\nvec3 opRepeat( vec3 pos, vec3 spacing )\n{\n    vec3 q = mod(pos,spacing) - 0.5*spacing;\n    return q;\n}\n\n//vec3 opScale( vec3 pos, float scale )\n//{\n//\treturn primitive(pos/scale)*scale;\n//}\n\nvec3 getRayDirection(vec3 rayOrigin, vec3 cameraTarget, vec2 fragCoord)\n{\n    vec3 upDirection = vec3(0.0, 1.0, 0.0);\n    \n    vec3 cameraDirection = normalize(cameraTarget - rayOrigin);\n    vec3 cameraRight = normalize(cross(upDirection, cameraDirection));\n    vec3 cameraUp = cross(cameraDirection, cameraRight);\n    \n    vec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    //Correct for aspect ratio\n    screenPos.x *= iResolution.x / iResolution.y;\n    \n    return normalize(cameraRight * screenPos.x +\n                     cameraUp * screenPos.y +\n                     cameraDirection);\n}\n\nfloat distanceFields(vec3 pos)\n{\n#ifdef ADDITIONS        \n        float scalingFactor = (sin(iTime) + 2.0) * 0.5;\n        float scalingTorusDist = sdTorus(pos / scalingFactor, vec2(5.0, 1.5)) * scalingFactor;\n        float scaling5SphereDist = sd5Sphere(pos / scalingFactor) * scalingFactor;\n\n        return min(min(scalingTorusDist, scaling5SphereDist), udRoundBox(opRepeat(pos, vec3(10.0, 10.0, 10.0)),\n                                                                         vec3(2.0, 0.5, 1.0),\n                                                                         0.5));\n#else\n        return sdSphere(pos, 5.0);\n#endif\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDirection, out vec3 pos)\n{\n    float totalDistance = 0.0;\n    pos = rayOrigin;\n    float dist = EPSILON;\n    \n    for(int i = 0; i < MAX_ITER; ++i)\n    {\n        if(dist < EPSILON || totalDistance > MAX_DIST)\n        {\n            break;\n        }\n        \n        dist = distanceFields(pos);\n\n        totalDistance += dist;\n        pos += dist * rayDirection;\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n#ifdef MOVEMENT\n    vec3 rayOrigin = vec3(cos(iTime * 0.2) * 20.0, 3.0, sin(iTime * 0.2) * 20.0);\n#else\n    vec3 rayOrigin = vec3(0.0, 3.0, 20.0);\n#endif\n    vec3 rayDirection = getRayDirection(rayOrigin,\n                                        vec3(0.0, 0.0, 0.0),\n                                        fragCoord);\n    \n    vec3 pos;\n    float dist = rayMarch(rayOrigin,rayDirection, pos);\n    \n    if(dist < EPSILON)\n    {\n        //LET'S DO SOME LIGHTING\n        vec2 ev = vec2(0.0, EPSILON);\n        vec3 normal = normalize(vec3(distanceFields(pos + ev.yxx) - distanceFields(pos - ev.yxx),\n                                     distanceFields(pos + ev.xyx) - distanceFields(pos - ev.xyx),\n                                     distanceFields(pos + ev.xxy) - distanceFields(pos - ev.xxy)));\n        \n        float diffuse = max(0.0, min(1.0, 0.5 * dot(LIGHT_DIR, normal)));\n                \n#ifdef TEXTURES\n        //Let's texture our objects\n        vec3 ambientColor = texture(iChannel0, fragCoord*.008).rgb;\n#elif defined(NORMAL_COLORS)\n        vec3 ambientColor = normal * 0.5;//muted normal colors\n#else\n        vec3 ambientColor = vec3(0.0, 0.0, 0.0);\n#endif\n      \n#ifdef SPECULAR\n        vec3 halfAngle = normalize(LIGHT_DIR + -rayDirection);  \n        float specIntensity = max(0.0, min(1.0, dot(halfAngle, normal)));\n        float specular = pow(specIntensity, 128.0);\n#else\n        float specular = 0.0;\n#endif\n        vec3 outColor = vec3(diffuse + specular + ambientColor);\n        \n#ifdef SHADOWS\n        //Let's try some shadows\n        vec3 shadowPos;\n        float shadowDist = rayMarch(pos + LIGHT_DIR, LIGHT_DIR, shadowPos);\n        \n        if(shadowDist < EPSILON)\n        {\n            float distanceToOcclusion = length(shadowPos - pos);\n            float shadowValue = max(0.1, min(distanceToOcclusion - 2.0, 1.0));\n            \n            outColor *= shadowValue;\n        }\n#endif\n        \n        fragColor = vec4(outColor, 1.0);\n        //END OF LIGHTING\n    }\n    else\n    {\n        // Gradient\n        vec2 screenPos = fragCoord.xy / iResolution.xy;\n        fragColor = vec4(1.0 - screenPos.y, screenPos.y, screenPos.y, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}