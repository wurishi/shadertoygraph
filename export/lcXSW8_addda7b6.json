{"ver":"0.1","info":{"id":"lcXSW8","date":"1705190575","viewed":99,"name":"Iteration Fire Bars [iMouse.y]","username":"nextrix","description":"added iterations for a unity shader\n- unity fire shader utilizes cosine NOT log; this was added in bc looks cooler but doesnt work well in screenspace so if you wanna convert to HLSL dont use log use cos on line 64. (2/24/2024)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Toon Fire\" by floatvoid. https://shadertoy.com/view/MtVGWV\n\n\nfloat hash2D(vec2 x) {\n\treturn fract(sin(dot(x, vec2(13.454, 7.405)))*12.3043);\n}\n\n//voronoi borrowed from someone. Probably iq? Sorry I forgot :(\n\nfloat voronoi2D(vec2 uv) {\n    vec2 fl = floor(uv);\n    vec2 fr = fract(uv);\n    float res = 1.0;\n    for( int j=-1; j<=1; j++ ) {\n        for( int i=-1; i<=1; i++ ) {\n            vec2 p = vec2(i, j);\n            float h = hash2D(fl+p);\n            vec2 vp = p-fr+h;\n            float d = dot(vp, vp);\n            \n            res +=1.0/pow(d, 8.0);\n        }\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    if(uv.y > 0.5){\n    \tuv.y = 0.5 - (uv.y - 0.5);\n    }\n    \n    \n    \n\n    //two scrolling voronoi maps. Could be a texture also\n    float up0 = voronoi2D(uv * vec2(6.0, 4.0) + vec2(0,-iTime * 2.0)  );\n\tfloat up1 = 0.5 + voronoi2D(uv * vec2(6.0, 4.0) + vec2(42,-iTime * 2.0) + 30.0 );\n\tfloat finalMask = up0 * up1 + (1.0-uv.y);\n   \n    \n    //vertical gradient. In a game use vertex color or something.\n    finalMask += (uv.x)* 0.0;\n    \n    //horizontal gradient.\n    if (iMouse.z < 1.) {\n        finalMask *= abs(uv.y - 0.5) + 1.; // when using log (vibrant)\n        //finalMask *= abs(uv.y - 0.5) + 0.35; // when using cos (cleaner / controlable)\n    } else {\n        finalMask *= abs(uv.y - 0.5) + (iMouse.y / iResolution.y);\n    }\n\n    vec3 fire;\n    \n    float iter = 10.0; // iterations\n    \n    vec3 color = vec3(0.502,0.624,1.000) * 0.04; // color\n    \n    for (float i = 0.0; i<floor(iter); i++) {\n        vec3 color = vec3(clamp(i*color.r , 0., 1.), clamp(i*color.g, 0., 1.), clamp(i*color.b, 0., 1.));\n        //fire += vec3(iter * 0.2) * color * step(cos(i * .15),finalMask); // cleaner / controlable (linear -> exponential)\n        fire += vec3(iter * 0.2) * color * step(log(i * 1.15),finalMask); // vibrant (exponential)\n    }\n    \n\tfragColor.xyz = fire * 1.;\n}","name":"Image","description":"","type":"image"}]}