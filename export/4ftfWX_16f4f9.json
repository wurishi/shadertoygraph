{"ver":"0.1","info":{"id":"4ftfWX","date":"1733568858","viewed":152,"name":"Inercia 2024 jam","username":"kostik1337","description":"Inercia 2024 livecoding jam","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["livecoding","jam","inercia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define time iTime\n#define BPM 137.\n#define beat (time*BPM/60.)\n#define PI 3.1415926535\n#define INF (1./0.)\n#define rep(p,s) (mod(p,2.*(s))-(s))\n#define rep2(p,s) (abs(rep(p,2.*(s)))-(s))\n\nfloat hash(float t) {return fract(sin(t)*45654.13414);}\nfloat hash(vec2 t) {return hash(dot(t, vec2(12.12414,32.134532)));}\nfloat hash(vec3 t) {return hash(dot(t, vec3(12.12414,32.134532, 23.132123)));}\n\nfloat ffts(float t) {return 0.;}\nfloat ffti(float t) {return 0.;}\n\nvec4 prev(vec2 t) {return texture(iChannel0,t);}\n\nmat2 mr(float t) {float c=cos(t),s=sin(t);return mat2(c,s,-s,c);}\n\nvec3 pal(float t) {\n  return pow(vec3(t), vec3(1.4, 1.2, 1.));\n}\n\nvec3 glow = vec3(0.);\n\nfloat map(vec3 p) {\n  float h=hash(p+time);\n  float t=time+.05*h;\n  float sc=1.;\n  vec3 op = p;\n  p.z += t+.05*ffti(.01);\n  \n  for(float i=0.; i<5.; ++i) {\n    float s = 1.9;\n    p.xy *= mr(.03*t);\n    p = rep2(p, 2.);\n    p *= s;\n    vec3 off=vec3(\n      hash(floor(beat)),\n      hash(floor(beat)+.3),\n      hash(floor(beat)+.145)\n    );\n    p = abs(p)-5.*off;\n    p.yz *= mr(2.34-.08*t+.05*ffti(i/10.));\n    p.xz *= mr(1.32-.07*t+.05*ffti(i/11.));\n    sc *= s;\n  }\n  float soff = pow(sin(length(op.xy+4.*t))*.5+.5, 4.);\n  float m=length(p)+.3*length(op.xy) - soff;\n  glow += (exp(-5.2*length(op.xy)))*.003 / abs(m);\n  m=m/sc;\n  return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1.);\n\n  vec3 col = vec3(0.);\n  vec3 O=vec3(0.,0.,-3.), D=normalize(vec3(uv,1.));\n  mat2 m1=mr(.1*sin(.2*time));\n  O.xz *= m1;\n  D.xz *= m1;\n  mat2 m2=mr(.1*sin(.17*time));\n  O.yz *= m2;\n  D.yz *= m2;\n  float d=0.,i;\n  bool hit=false;\n  for(i=0.;i<64.;++i) {\n    vec3 p=O+D*d;\n    float m=map(p);\n    d += m;\n    if (m<0.01*d) {\n      hit=true;\n      break;\n    }\n  }\n  col += pal(.9*max(0., 1.-i/64.));\n  col += glow;\n  col *= smoothstep(1., 0.3, length(uv));\n  \n  uv = fragCoord/iResolution.xy;\n  vec2 e=vec2(.001, .0);\n  vec3 p = vec3(\n    prev(uv+e).r,\n    prev(uv-e).g,\n    prev(uv-e).b\n  );\n  col = min(vec3(1.), col+p*.7);\n  \n  fragColor = vec4(col, 1.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}