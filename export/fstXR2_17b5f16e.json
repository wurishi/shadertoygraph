{"ver":"0.1","info":{"id":"fstXR2","date":"1633537243","viewed":93,"name":"InnerSpace","username":"raindropper","description":"Click zooms in (Y), pans (X). On mobile, tap.\n\nBased on these formulas:\nq = A * x + C\nx = y - Sgn(x) * Sqrt(q)\ny = B - x\n\n...this shader generates strange, trippy images.\n\n\n\nBack in 1998, I created the first version as a Java Applet. Remember those?  ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["myfirstlittleshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n\nInnerSpace by Tomi Itkonen, 2021.\n\nUse this in any way you like.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xOrigo = iResolution.x / 2.0;\n    float yOrigo = iResolution.y / 2.0;\n    vec2 xy = fragCoord.xy;\n    float x = xy.x - xOrigo;\n    float y = xy.y - yOrigo;\n    \n    float z = 2.0;\n    \n    /*\n    \n    You can play around with different values of A,B and C.\n    \n    Add iTime to create animations.\n    \n    */\n    \n    float A = -1.0 + sin(iTime/20.0);\n    float B = 15.0 - 5.0 * sin(iTime/20.0);\n    float C = 13.0 * sin(iTime/20.0);\n    \n    /*\n    \n    Some examples below.\n    \n    float A = -100.0 + 500.0 * sin(iTime/90.0);\n    float B = 1.5 - 5.0 * sin(iTime/20.0);\n    float C = -300.0 + 2000.0 * sin(iTime/20.0);\n    \n      \n    float A = -1.0 + 50.0 * sin(iTime/20.0);\n    float B = 1.5 - 5.0 * sin(iTime/20.0);\n    float C = -300.0 + 2000.0 * sin(iTime/20.0);\n   \n    float A = -100.0 + 50.0 * sin(iTime/20.0);\n    float B = 15.0 - 5.0 * sin(iTime/20.0);\n    float C = 3000.0 + 2000.0 * sin(iTime/20.0);\n     \n    float A = 7.06 + sin(iTime) + (iTime / 10.0);\n    float B = 3.0 + (2.5 * sin(iTime/ 20.0));\n    float C = 20.6;\n   \n    float A = 7.0 + sin(iTime/20.0);\n    float B = sin(iTime/20.0);\n    float C = 290.0 + 290.0 * sin(iTime/20.0);\n    \n    \n    float A = 700.0 + 100.0 * sin(iTime/20.0);\n    float B = -sin(iTime/20.0);\n    float C = 0.02 + 2.0 * sin(iTime/20.0);\n    \n    */\n    \n    \n    float zoom = iMouse.y;\n    float pan = xOrigo - iMouse.x;\n    if (zoom == 0.0) zoom = 1.0;\n    float x2, y2, f1, f2, f3;\n    \n\tx = (x + pan) / zoom;\n    y = y / zoom;\n    \n    // 200 iterations for each pixel\n    for(int i = 0; i < 200; i++) {\n        x2 = x;\n        y2 = y; \n        f1 = A * x2 + C;\n                            \n        if (f1 < 0.0) {\n            f2 = 0.0;\n        } else {\n            f2 = sqrt(f1);\n        }\n                                               \n        x = y2 - (sign(x2) * f2);\n        y = B - x2;\n    }\n               \t\t\n    f3 = 16.0 * distance(x, y);\n    \n    // Calculating color values for r,g and b\n    float r = cos(0.059 * (f3/z)); \n    if ((r < 0.0) || (r > 1.0))  r = 0.0; \n    float g = cos(0.05 * (f3/z));\n    if ((g < 0.0) || (g > 1.0)) g = 0.0;\n    float b = cos(0.149 * f3/z);\n    if ((b < 0.0) || (b > 1.0)) b = 0.0; \n      \n    fragColor = vec4(r, g, b , 1.0);\n}","name":"Image","description":"","type":"image"}]}