{"ver":"0.1","info":{"id":"ltVGWm","date":"1475016647","viewed":680,"name":"Galaxy V4","username":"A2K","description":"Procedurally generated galaxy.\n\nClick and drag to control camera.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["procedural","galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision highp float;\n#endif\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n    return length(texture(iChannel0, v.xy));\n}\n\n#define STARDISTANCE 1000.\n#define STARBRIGHTNESS 0.85\n#define STARDENCITY 0.01\n\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat stars(vec3 ray, float density, float distance)\n{\n    vec3 p = ray * distance / iResolution.x * 1024.0;\n    float brigtness = smoothstep(1.0 - density, 1.0, hash13(floor(p)));\n    return clamp(smoothstep(STARBRIGHTNESS, 0., length(fract(p) - 0.5)) * brigtness, 0.0, 1.0);\n}\n\n\n\n#define NUM_OCTAVES 5\n\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec3 x) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100);\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(x);\n        x = x * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvec3 fg_Position;\nfloat stars() {\n    float iSize = max(iResolution.x, iResolution.y);\n    return stars(normalize(fg_Position.xyz / iSize), STARDENCITY, STARDISTANCE);\n}\n\nfloat BackgroundBrightness = 1.0;\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    o = vec4(0.);\n    vec2 m = iMouse.xy / iResolution.xy;\n    if (length(iMouse.xy) == 0.0) {\n        m = vec2(0.5, 0.6);\n    }\n    f = (f*2.0 - 1.0 ) / iResolution.xy;\n    f.y -= (m.y - 0.5)* 8.0;\n    f.x -= (m.x - 0.5)* 8.0;\n    fg_Position = vec3(f, abs(1.0 - f.y * f.y - f.x * f.x));\n\tvec3 pos = normalize(fg_Position.xyz);\n\n\n    float y = 1.0 - abs(pos.y + snoise(pos * 10.0) * 0.005);\n    y = y*y;\n\n    float core = pow(abs(pos.x), 8.0) * pow(y, 4.0);\n    if (pos.x < 0.0) core *= 0.15;\n    else core *= 0.5;\n\n    float galaxy = core + y;\n\n    float glow = max((galaxy - pow(galaxy, 6.0)) * galaxy, 0.0);\n\n    float cloud = clamp(fbm(pos * 5.0) * fbm(pos * 20.0) * galaxy * pow(y, 4.0) * 2.0 * (1.0 - core * 0.85), -1.0, 1.0);\n\n    vec3 s = vec3(stars() * (1.0 - cloud)) * mix(vec3(1.0,1.0,1.0), vec3(1.0,0.39,0.0), pow(snoise(pos * 100.0), 0.5))\n    * abs(snoise(pos * 100.0));\n    s += vec3(stars() * (1.0 - cloud)) * vec3(1.0,1.0,1.0)\n    * abs(snoise(pos * 100.0 + 5.0) * 2.0);\n\n    // large clouds\n    o.rgb += vec3(0.6,0.47,0.84) * fbm(pos * 10.0) * pow(galaxy * 1.0, 2.0);\n    o.rgb += vec3(0.73,0.59,0.87) * fbm(pos * 10.0) * pow(y * galaxy * 1.0, 4.0) * (1.0 / pow(BackgroundBrightness, 0.25) * 1.2) * 2.0;\n\n    // bright clouds\n    o.rgb += max(max(vec3(1.0,0.95,0.05) * fbm(pos * 10.0) * y * pow(galaxy, 8.0),\n    vec3(1.0,0.9,0.4) * fbm(pos * 10.0) * y * y * pow(galaxy, 8.0)),\n    vec3(1.0,0.9,0.4) * fbm(pos * 15.0) * y * y * pow(galaxy, 8.0));\n\n    \n    float galaxyStarBrightness = 2.0;\n\n    // galaxy stars\n    s += vec3(stars(pos * 2.0, min(STARDENCITY * 2.0, pow(galaxy * 1.0, 16.0) * 0.5), 500.0)) * (1.0 - cloud) * galaxyStarBrightness;\n    s += vec3(stars(pos * 2.1, min(STARDENCITY * 4.0, pow(galaxy * 1.0, 32.0) * 0.5), 500.0)) * (1.0 - cloud) * galaxyStarBrightness;\n    s += vec3(stars(pos * 2.2, min(STARDENCITY * 5.0, pow(galaxy * 1.0, 64.0) * 0.5), 500.0)) * (1.0 - cloud) * galaxyStarBrightness;\n\n    \n    o.rgb += vec3(0.15,0.19,0.27) * (core * 0.75  + 0.25 * core * fbm(o.rgb * 0.0001));\n\n    o.rgb += max(0.0, log(y * 1.5))* vec3(0.9,0.85,0.36);\n    o.rgb += pow(y * (1.0 - core), 8.0) * 0.65;\n\n\n    o.rgb += max(min(1.0 - pow(1.0 - core, 4.0), 1.0 - core), 0.0) * pow((1.0 - core), 4.0);\n\n    // core glow\n    o.rgb = mix(o.rgb, vec3(0.0,0.0,0.0), -pow(core * pow(y, 0.5), 1.0));\n\n    \n    // dust clouds\n    o.rgb = mix(o.rgb, vec3(0.24,0.16,0.15), cloud);\n\n\n    o.rgb = o.rgb * pow(BackgroundBrightness, 2.0);\n    o.rgb = clamp(o.rgb, 0.0, 1.0) * pow(BackgroundBrightness, 0.25);\n    o.rgb = s * pow(BackgroundBrightness, 0.5) + o.rgb;\n\n    \n    o.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}