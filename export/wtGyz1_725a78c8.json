{"ver":"0.1","info":{"id":"wtGyz1","date":"1610455922","viewed":293,"name":"[TWITCH] The descent","username":"Flopine","description":"Shader heavily inspired by Mirror's Edge and made during a Twitch stream, you can watch all of them here: https://www.twitch.tv/flopine","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","modeling","glow","ao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n// I know it's TAU but I found that typo funny :3\n#define TAY 6.283185\n#define ITER 64.\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define mo(uv,d)uv=abs(uv)-d;if(uv.y>uv.x)uv=uv.yx;\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n\n#define cyl(p,r,h) max(length(p.xy)-(r),abs(p.z)-h)\n\n#define time iTime\n#define dt(speed) fract(time*speed)\n#define hash21(x) fract(sin(dot(x,vec2(12.4,33.8)))*1247.4)\n\n\n\nstruct obj\n{\n  float d;\n  vec3 color;\n};\n\nobj minobj (obj a, obj b)\n{\n  if (a.d<b.d) return a;\n  else return b;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n  float per = TAY/rep;\n  float a = mod(atan(p.y,p.x),per)-per*0.5;\n  p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat box (vec3 p, vec3 c)\n{\n  vec3 q = abs(p)-c;\n  return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat heightmap (vec2 uv)\n{\n  uv = fract(uv)-.5;\n  uv = abs(uv);\n  return smoothstep(0.2,0.27,max(uv.x,uv.y*0.7));\n}\n\nobj tunnel (vec3 p)\n{\n  vec3 pp = p;\n  vec2 tuv = vec2(atan(p.x,p.z)*5.,p.y*0.4);\n  float r;\n  if (tuv.x > -5. && tuv.x < 20.) r = 10.5-heightmap(tuv)*0.15;\n  else r = 10.5;\n  float td = -cyl(p.xzy,r,1e10);\n\n  float per = 10.;\n  float id = floor(p.y/per);\n  p.xz *= rot((TAY/6.)*(id+.5));\n  p.y = mod(p.y,per)-per*0.5;\n  float holes = -cyl(p,1.5,25.);   \n  td = max(holes ,td);\n  p.z = abs(p.z)-10.25;\n  td = min(td,max(holes,cyl(p,1.8,0.3)));\n\n  return obj(td,vec3(1.));\n}\n\nfloat pipe (vec3 p)\n{\n  float pd = cyl(p.xzy,0.2,1e10);\n  float per = 2.;\n  p.y = mod(p.y,per)-per*0.5;\n  pd = min(pd,cyl(p.xzy,0.25,0.1));\n\n  return pd;\n}\n\nobj pipes (vec3 p)\n{\n  moda(p.xz, 6.);\n  p.x -= 9.;\n  crep(p.z,0.7,2.);\n  float psd = pipe(p);\n  return obj(psd,vec3(.7,0.,0.));\n}\n\nfloat g1=0.;\nfloat platform (vec3 p)\n{\n  p.xz *= rot(TAY/6.);\n  float s = length(p)-.5;\n  g1 += 0.1/(0.1+s*s);\n\n  mo(p.xz,vec2(.5));\n  float d = box(p,vec3(10.,0.2,1.5));\n  crep(p.xz,0.4,vec2(30.,4.));\n  d = max(-box(p,vec3(0.2,0.5,0.1)),d);\n  d = min(d,s);\n  return d;\n}\n\nobj platforms (vec3 p)\n{\n  float per = 40.;\n  p.y = mod(p.y-per*0.5,per)-per*0.5;\n  float pld = platform(p);\n  return obj(pld,vec3(0.9,0.1,0.1));\n}\n\nfloat roundpipe (vec3 p)\n{\n  float rpd = torus(p,vec2(10.3,0.2));\n  moda(p.xz,18.);\n  p.x -= 10.3;\n  rpd = min(rpd, cyl(p,0.25,0.1));\n  return rpd;\n}\n\nobj roundpipes (vec3 p)\n{\n  float per = 20.;\n  p.y = mod(p.y,per)-per*0.5;\n  return obj(roundpipe(p),vec3(0.9,0.4,0.));\n}\n\nobj SDF (vec3 p)\n{\n  p.y -= dt(1./5.)*120.;\n  obj so = minobj(tunnel(p),pipes(p)); \n  so = minobj(so,platforms(p));\n  so = minobj(so,roundpipes(p));\n  return so;\n}\n\nvec3 getcam (vec3 ro, vec3 ta, vec2 uv)\n{\n  vec3 f = normalize(ta-ro);\n  vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n  vec3 u = normalize(cross(f,l));\n  return f + l*uv.x + u*uv.y;\n}\n\nvec3 getnorm (vec3 p)\n{\n  vec2 eps = vec2(0.01,0.);\n  return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat AO (float eps,vec3 n, vec3 p)\n{return SDF(p+eps*n).d/eps;}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n  float dither = hash21(uv);\n  vec3 ro = vec3(0.3,0.01,-6.), rd=getcam(ro,vec3(.5,-7.,0.),uv),p=ro, col=vec3(0.);\n  float shad; bool hit=false; obj O;\n\n  for(float i =0.; i<ITER; i++)\n  {\n    O = SDF(p);\n    if (O.d<0.0001)\n    {\n      hit=true; shad=i/ITER; break;\n    }\n    O.d *= 0.5+dither*0.05;\n    p += rd*O.d;\n  }\n\n  float t = length(ro-p);\n  if(hit)\n  {\n    vec3 n = getnorm(p);\n    float ao = AO(0.1,n,p) + AO(0.4,n,p) + AO(0.5,n,p);\n    col = O.color;\n    col *= (1.-shad);\n    col *= ao/3.;\n  }\n  col = mix(col,vec3(0.,0.05,0.1),1.-exp(-0.001*t*t));\n  col += g1*vec3(0.1,0.8,0.2)*0.8;\n  \n  fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}