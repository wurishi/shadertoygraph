{"ver":"0.1","info":{"id":"lsKcWz","date":"1521665653","viewed":152,"name":"Basic Sphere Test","username":"ianclanning","description":"Just a basic sphere with some lights applied.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["light","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define PIOVER2 1.5707963\n\nstruct Light\n{\n    vec3 Position;\n    //Bake intensity into color\n    vec3 Color;\n};\n\nconst int lightCount = 2;\nLight lights[4];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sphereSize = 100.0;\n\n    vec2 centerPoint = iResolution.xy / 2.0;\n    vec2 relativePos = fragCoord - centerPoint;\n    float distFromCenter = length(relativePos);\n\n    if(distFromCenter > sphereSize)\n    {\n        fragColor.rgb = vec3(0.5, 0.5, 1.0);\n        return;\n    }\n    \n    vec3 ambient = vec3(0.2, 0.2, 0.2);    \n    lights[0] = Light(vec3(sin(iTime) * 10., 10.0, cos(iTime) * 10.), vec3(1.0, 1.0, 1.0));\n    vec2 worldMousePos = ((iMouse.xy - centerPoint) / iResolution.x) * (iResolution.x / sphereSize);\n    lights[1] = Light(vec3(worldMousePos, 1.1), vec3(0.2, 0.7, 0.2));\n    \n    vec3 eyeVec = vec3(0.0, 0.0, 5.0); \n    \n    \n    float specular = 0.5;\n    float gloss = 20.;\n    vec4 startColor = vec4(1.0, 1.0, 1.0, 1.0);   \n    \n    vec3 tangentNormal = vec3((relativePos.x / sphereSize)/2. + 0.5,\n                              (relativePos.y / sphereSize)/2. + 0.5,\n                              cos(distFromCenter / sphereSize));\n\n    vec3 surfaceNormal = normalize(tangentNormal * 2.0 - 1.0);\n\n    vec3 surfaceColor = tangentNormal.xyz;\n    //vec3 surfaceColor = vec3(1.0, 1.0, 1.0);\n\n    startColor.rgb = (ambient * surfaceColor);\n    //startColor.rgb = vec3(0.,0.,0.);\n    //startColor.rgb = rawNormal;\n    \n    \n    vec3 viewDir = normalize(eyeVec - surfaceNormal);\n    for(int i = 0; i < lightCount; i++)\n    {\n        vec3 lightDir = normalize(lights[i].Position - surfaceNormal);\n        vec3 halfwayDir = normalize(lightDir + viewDir);\n        vec3 lambert = max(dot(surfaceNormal, lightDir), 0.0) * lights[i].Color * surfaceColor;            \n        vec3 blinnPhong = lights[i].Color * specular * pow(max(dot(surfaceNormal, halfwayDir), 0.0), gloss);\n        startColor.rgb += lambert + blinnPhong;\n    }\n\n    fragColor = startColor;\n}","name":"Image","description":"","type":"image"}]}