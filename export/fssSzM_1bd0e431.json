{"ver":"0.1","info":{"id":"fssSzM","date":"1618407980","viewed":105,"name":"Feedback Mixing RGB","username":"tarnith","description":"Basic test of feedback buffer mixing","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = gl_FragCoord.xy/iResolution.xy; \n\tvec4 color;\n    color = texture(iChannel0,uv); \n\tfragColor = color; \n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy) /iResolution.y;\n\t\t\n\tvec3 col = vec3(0.);\n\t\n\tvec2 fractionalUV = fract( uv*sin(iTime*.1)*10.)-.5;\n\n\tfloat calcOutput = 0.;             \n\tfloat delayedOutput = 0.;           \n\n    float t = iTime*1.9;                 \n\tfloat tDel = (iTime-5.)*5.;        \n\t\n    for (float y=-1.; y<=1.; y++){      \n        for (float x=-1.; x<=1.; x++){\n\n            vec2 offset = vec2(x, y);  \n\n\t\t\tfloat d = length(fractionalUV+offset);  \n\t\t\tfloat r = mix(.3, .5, sin((t*.5+.5)+length(uv*10.)*3.));\n         \tcalcOutput += smoothstep(r, r*.9, d);\n\n\t\t\tfloat rDel = mix(.3, .5, sin((tDel*.5+.5)+length(uv*20.)*3.));\n\t\t\tdelayedOutput += smoothstep(rDel, rDel*.9,d);\n\n         \n            col = vec3(calcOutput);\n            col += -delayedOutput;\n\n        }\t\n\t}\n\n\n\tvec4 color = vec4(col, 1.0);\n    vec2 altuv = fragCoord.xy / iChannelResolution[0].xy;\n    altuv += vec2(-.5);\n    altuv *= scale(vec2(1.2,1.2));\n    altuv += vec2(+.5);\n    vec4 feedback = texture(iChannel0,altuv);\n \n \n\tfeedback.r *= sin(iTime);\n    feedback.g *= sin(iTime*.9);\n    feedback.b *= sin(iTime*.98);\n    color.r *= sin(iTime*.998);\n    color.g *= sin(iTime*.9);\n    color.b *= sin(iTime*.987);\n    fragColor = color+(feedback*(.998*(sin(iTime)*.3+.4)));\n    \n \n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}