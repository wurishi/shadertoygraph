{"ver":"0.1","info":{"id":"sttXzs","date":"1639703863","viewed":259,"name":"Three Way Spring","username":"oneshade","description":"Another spring contraption with differential equations.","likes":17,"published":3,"flags":32,"usePreview":0,"tags":["physics","system","springs","threeway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Space operators\nvec2 axisAlign(in vec2 p, in vec2 up) {\n    return mat2(up.x, -up.y, up.yx) * p;\n}\n\n// SDFs\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// https://www.shadertoy.com/view/tlcBW2\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}\n\n// ax'' + bx' + cx = 0\nvec2 ode21(in float t, in float t0, in vec2 x0, in vec2 v0,\n           in float a, in float b, in float c) {\n\n    t -= t0;\n    float alpha = -b / (2.0 * a);\n    float discr = alpha * alpha - c / a;\n    float beta = sqrt(abs(discr));\n\n    if (discr < 0.0) { // Underdamped\n        float w = beta * t;\n        return (x0 * cos(w) - (alpha * x0 - v0) / beta * sin(w)) * exp(alpha * t);\n    }\n\n    if (abs(discr) < 1e-3) { // Critically damped\n        return (x0 - (alpha * x0 - v0) * t) * exp(alpha * t);\n    }\n\n    // Overdamped\n    return (((beta - alpha) * x0 + v0) * exp((alpha + beta) * t) +\n            ((beta + alpha) * x0 - v0) * exp((alpha - beta) * t)) / (2.0 * beta);\n}\n\n#define drawSDF(dist, col) color = mix(color, col.rgb, smoothstep(unit, 0.0, dist) * col.a)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 origin = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - origin) / iResolution.y * 8.0;\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - origin.xyxy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec4(1.0, -2.0, 2.0, -1.0);\n\n    // Constants: mass (m), friction (Âµ), anchors (p1, p2, p3), springiness (k1, k2, k3)\n    float m = 1.0;\n    float u = 0.8;\n\n    vec2 p1 = 3.0 * vec2(1.0, 0.0);\n    vec2 p2 = 3.0 * vec2(-0.75, 1.0);\n    vec2 p3 = 3.0 * vec2(-1.6, -0.8);\n\n    float k1 = 30.0;\n    float k2 = 30.0;\n    float k3 = 30.0;\n\n    // Precomputation\n    float springTotal = k1 + k2 + k3;\n    vec2 center = (k1 * p1 + k2 * p2 + k3 * p3) / springTotal;\n\n    // Initial position (x0), initial velocity (v0), and start time (t0)\n    vec2 x0 = mouse.zw;\n    vec2 v0 = (mouse.xy - mouse.zw) * 10.0;\n    float t0 = texelFetch(iChannel0, ivec2(0), 0).x;\n\n    // Current position\n    vec2 pos = ode21(iTime, t0, x0, v0, m, u, springTotal) + center;\n\n    // Plot of the path\n    vec2 prev = ode21(max(0.0, iTime - 1.0), 0.0, x0, v0, m, u, springTotal) + center;\n    for (float t=-0.99; t < 0.01; t += 0.01) {\n        vec2 cur = ode21(max(0.0, iTime + t), t0, x0, v0, m, u, springTotal) + center;\n        drawSDF(sdLine(uv, prev, cur), vec4(0.0, 0.0, 0.0, t + 1.0));\n        prev = cur;\n    }\n\n    // Springs\n    vec2 uv1 = axisAlign(uv - p1, normalize(pos - p1));\n    if (uv1.x > 0.0 && uv1.x < length(pos - p1)) drawSDF(udTriangleWave(uv1, 8.0 / length(pos - p1), 0.75), vec4(0.0, 0.0, 0.0, 1.0));\n\n    vec2 uv2 = axisAlign(uv - p2, normalize(pos - p2));\n    if (uv2.x > 0.0 && uv2.x < length(pos - p2)) drawSDF(udTriangleWave(uv2, 8.0 / length(pos - p2), 0.75), vec4(0.0, 0.0, 0.0, 1.0));\n\n    vec2 uv3 = axisAlign(uv - p3, normalize(pos - p3));\n    if (uv3.x > 0.0 && uv3.x < length(pos - p3)) drawSDF(udTriangleWave(uv3, 8.0 / length(pos - p3), 0.75), vec4(0.0, 0.0, 0.0, 1.0));\n\n    drawSDF(sdDisk(uv, p1, 0.25), vec4(1.0, 0.5, 0.25, 1.0));\n    drawSDF(sdDisk(uv, p2, 0.25), vec4(0.25, 1.0, 0.5, 1.0));\n    drawSDF(sdDisk(uv, p3, 0.25), vec4(0.5, 0.25, 1.0, 1.0));\n\n    // Mass\n    drawSDF(sdDisk(uv, pos, 0.5), vec4(0.0, 0.0, 1.0, 1.0));\n\n    // Vignette\n    color *= 1.0 - 2.0 * pow(length(fragCoord / iResolution.xy - 0.5), 4.0);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    if (iFrame > 0) fragColor = texelFetch(iChannel0, ivec2(0), 0);\n    if (iMouse.z > 0.0) fragColor.x = iTime;\n}","name":"Buffer A","description":"","type":"buffer"}]}