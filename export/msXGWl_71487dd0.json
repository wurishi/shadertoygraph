{"ver":"0.1","info":{"id":"msXGWl","date":"1666967166","viewed":149,"name":"Artober - Truchet feeding","username":"Flopine","description":"Day 24 of artober challenge! I took time for this one, taking advantage of the everyday practie to learn new stuff I wanted to dig in for a long time! :D","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["2d","truchet","diffusion","pattern","reaction","grayscott"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec4 buffer = texture(iChannel0,uv); \n    // visualizing chemcial A\n    fragColor = vec4(buffer.x);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// References:\n\n// Karl Sims article : https://www.karlsims.com/rd.html\n// Wumpf shader : https://www.shadertoy.com/view/XslyD2\n\n// Explanations:\n\n// Each pixel contains the amount of \n// chemical A (X component) and chemical B (Y component)\n// that react together through the Gray-Scott formula\n\n// Formulas:\n\n// new_a = current_a + ( da * laplacian(current_a) - current_a * current_b² + f * (1. - current_a) ) * dt \n// new_b = current_b + ( db * laplacian(current_b) + current_a * current_b² - (k + f) * current_b) * dt\n\n#define da  1.\n#define db  .35\n#define f(uv) length(uv)*.055\n#define k .062\n#define dt 0.5\n\n#define noise(u) textureLod(iChannel1, u, 0.).x\n\nvec2 laplacian (vec2 p, vec2 current)\n{\n    vec2 pixel_position = p,\n    res = iResolution.xy,\n    \n    adj_up = pixel_position + vec2(0., 1.)/res,\n    adj_down = pixel_position + vec2(0., -1.)/res,\n    adj_right = pixel_position + vec2(1., 0.)/res,\n    adj_left = pixel_position + vec2(-1., 0.)/res,\n    \n    diag_upleft = pixel_position + vec2(-1., 1.)/res,\n    diag_upright = pixel_position + vec2(1., 1.)/res,\n    diag_lowright = pixel_position + vec2(1., -1.)/res,\n    diag_lowleft = pixel_position + vec2(-1., -1.)/res;\n    \n    vec2 sum_agent = vec2(0.);\n    \n    sum_agent += current * -1.;\n    // adjacent neighbours\n    sum_agent += texture(iChannel0, adj_up).xy  * .2;\n    sum_agent += texture(iChannel0, adj_down).xy * .2;\n    sum_agent += texture(iChannel0, adj_right).xy * .2;\n    sum_agent += texture(iChannel0, adj_left).xy * .2;\n    // diagonal neighbours\n    sum_agent += texture(iChannel0, diag_upleft).xy * .05;\n    sum_agent += texture(iChannel0, diag_upright).xy * .05;\n    sum_agent += texture(iChannel0, diag_lowright).xy * .05;\n    sum_agent += texture(iChannel0, diag_lowleft).xy * .05;          \n\n    return sum_agent;\n}\n\nfloat truchet (vec2 uv)\n{\n    vec2 id = floor(uv);\n    \n    if(noise(id*.23) < .5) uv.x *= -1.;\n    uv = fract(uv)-.5;\n    float s = (uv.x >-uv.y) ? 1. : -1.;\n    uv -= .5*s;\n    \n    return step(0.1, abs(length(uv)-.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    // Chemicals initialization\n    if (iTime < .5) \n    {    \n        fragColor = vec4(1., truchet(centered_uv*3.), 0., 1.);\n        return;\n    } \n\n    vec2 current = clamp(texture(iChannel0, uv).xy, 0., 1.), new_agent;   \n    vec2 diffusion = laplacian(uv, current);\n    new_agent = vec2 (\n        (da * diffusion.x - current.x*current.y*current.y + f(centered_uv)*(1.-current.x)) * dt,\n        (db * diffusion.y + current.x*current.y*current.y - (k+f(centered_uv))*current.y ) * dt\n                    );\n    \n    fragColor = vec4(current+new_agent, 0.,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}