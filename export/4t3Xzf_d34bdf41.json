{"ver":"0.1","info":{"id":"4t3Xzf","date":"1480762867","viewed":127,"name":"Points","username":"chadiik","description":"Points :)","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d","points"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELL_SIZE 1.0\n#define NUM_POINTS 200\n#define ratio vec2(iResolution.x / iResolution.y, 1.0)\n\nvec2 cellCenter(int index)\n{\n    float i = float(index);\n    float h = floor(iChannelResolution[0].x / CELL_SIZE);\n    float x = mod(i, h);\n    float y = floor(i / h);\n    vec2 uv = (vec2(x, y) * CELL_SIZE + CELL_SIZE * 0.5) / iChannelResolution[0].xy;\n    return uv;\n}\n\nvec4 cellValue(int index)\n{\n    vec2 uv = cellCenter(index);\n    return texture(iChannel0, uv);\n}\n\nint coordCell(vec2 coord)\n{\n    coord = floor(coord / CELL_SIZE);\n    float h = floor(iResolution.x / CELL_SIZE);\n    \n    return int(coord.x + coord.y * h);\n}\n\nfloat fillCircle(vec2 uv, vec2 pos, float radius, float blur)\n{\n    float d = distance(uv * ratio, pos * ratio);\n    float dr = d - radius;\n    return 1.0 - smoothstep(0.0, blur, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    \n    \n    for(int i = 0; i < NUM_POINTS; i++)\n    {\n        vec4 cell = cellValue(i);\n        vec2 pos = cell.xy;\n        float pointValue = fillCircle(uv, pos, 0.04, 0.12);\n        color.xyz += vec3(pointValue);\n        color.xyz += (cell.zww * 20.0);\n        \n        pointValue = fillCircle(uv, pos, 0.04, 0.012);\n        color.xyz *= vec3(1.0 - pointValue);\n        \n        pointValue = fillCircle(uv, pos, 0.04, 0.022);\n        color.xyz -= vec3(pointValue);\n    }\n    \n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define CELL_SIZE 1.0\n#define NUM_POINTS 200\n#define RANGE vec2(1.0, 1.0)\n\nint coordCell(vec2 coord)\n{\n    coord = floor(coord / CELL_SIZE);\n    float h = floor(iChannelResolution[0].x / CELL_SIZE);\n    \n    return int(coord.x + coord.y * h);\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 rand2(vec2 co)\n{\n    return vec2(rand(co), rand(co.yx));\n}\n\nvec2 wrap(vec2 vec, vec2 range)\n{\n    return mod(vec, range);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int index = coordCell(fragCoord);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 color = vec4(1.0);\n    if(index < NUM_POINTS)\n    {\n        if(iFrame == 0)\n        {\n            color.xy = rand2(uv);\n            color.zw = rand2(color.xy) * 0.0002;\n        }\n        else\n        {\n            color = texture(iChannel0, uv);\n            vec2 offset = rand2(color.xy * sin(iTime));\n            offset = offset + vec2(-.5, -.5);\n            offset *= 0.0002;\n            vec2 velocity = color.zw * .999 + offset;\n            color.xy = wrap(color.xy + velocity, RANGE);\n            color.zw = velocity;\n        }\n    }\n    \n    fragColor = color;\n}","name":"Buf A","description":"","type":"buffer"}]}