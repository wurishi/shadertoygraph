{"ver":"0.1","info":{"id":"tsBXDG","date":"1554826894","viewed":94,"name":"D&D 002 - Basic SDF","username":"Ryp","description":"First attempt at SDFs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\nfloat sphereSDF(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nconst int MAX_MARCHING_STEPS = 200;\nconst float EPSILON = 0.001f;\n\nfloat sceneSDF(vec3 p)\n{\n    vec3 hole1 = vec3(-0.5 - 0.7 * sin(iTime * 0.47));\n    vec3 hole2 = vec3(0.51 + 0.5 * sin(iTime));\n    \n    float hole1Size = 0.5;\n    float hole2Size = 0.9;\n    \n    return opSmoothUnion(\n        sphereSDF(p + sin(iTime * -0.99)),\n        sphereSDF(p + sin(iTime))\n        , 0.5\n    );\n    \n    return intersectSDF(\n        \t\tintersectSDF(\n                    sphereSDF(p),\n                  \t-sphereSDF((p + hole1) / hole1Size) * hole1Size\n                ),\n        \t\t-sphereSDF((p + hole2) / hole2Size) * hole2Size\n    \t\t);\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nconst float pi = 3.14159265358;\n\nfloat deg2rad(float angleDeg)\n{\n \treturn (angleDeg * pi) / 180.f;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 positionUV = fragCoord / iResolution.xy;\n    vec2 positionNDC = 2.0 * positionUV - 1.0;\n    \n    // Camera setup\n    float cameraHFovAngle = deg2rad(55.f);\n    float cameraNear = 0.1f;\n    float cameraFar = 10.0f;\n    vec3 eyePositionWS = vec3(0.0f, 0.0f, -5.0f);\n    //vec3 eyeOrientationWS = vec3(1.0f, 0.0f, 0.0f);\n\n    // Viewport calculations\n    float aspectRatioInv = iResolution.y / iResolution.x;\n    \n    float horizontalFov = cameraNear * tan(cameraHFovAngle * 0.5f);\n \tfloat verticalFov = horizontalFov * aspectRatioInv;\n    vec2 cameraViewportExtent = vec2(horizontalFov, verticalFov);\n    \n    vec3 viewRayDirectionWS = vec3(positionNDC * cameraViewportExtent, cameraNear);\n    viewRayDirectionWS = normalize(viewRayDirectionWS);\n    \n    float rayDepth = shortestDistanceToSurface(eyePositionWS, viewRayDirectionWS, cameraNear, cameraFar);\n\n    vec3 p = eyePositionWS + rayDepth * viewRayDirectionWS;\n    \n    vec3 lightPosWS = vec3(1.0, 1.0, -2.0);\n    vec3 normalWS = estimateNormal(p);\n    vec3 L = normalize(lightPosWS - p);\n    vec3 V = normalize(eyePositionWS - p);\n    vec3 R = normalize(reflect(-L, normalWS));\n    \n    float dotLN = saturate(dot(L, normalWS));\n    float dotRV = saturate(dot(R, V));\n        \n    // Output some color\n    vec3 color = vec3(0.0);\n\t\n    if (rayDepth > cameraFar - EPSILON)\n    {\n        // Didn't hit anything\n        color = vec3(0.0);\n    }\n    else\n    \tcolor = vec3(1.0) * dotLN;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}