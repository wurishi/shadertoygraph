{"ver":"0.1","info":{"id":"DtyfzW","date":"1701908791","viewed":29,"name":"Autism Nebula","username":"FrederikJA","description":"Nebula based on flownoise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","animation","nebula","flownoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TIMESCALE 0.5\n\n// https://www.shadertoy.com/view/Xt23Ry\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n\n// https://www.shadertoy.com/view/MtcGRl\nvec2 GetGradient(vec2 intPos, float t) {\n    float rand = fract(sin(dot(intPos, vec2(12.9898, 78.233))) * 43758.5453);;\n    \n    float angle = 6.283185 * rand + 4.0 * t * rand;\n    return vec2(cos(angle), sin(angle));\n}\n\n\n// https://www.shadertoy.com/view/MtcGRl\nfloat Pseudo3dNoise(vec3 pos) {\n    vec2 i = floor(pos.xy);\n    vec2 f = pos.xy - i;\n    vec2 blend = f * f * (3.0 - 2.0 * f);\n    float noiseVal = \n        mix(\n            mix(\n                dot(GetGradient(i + vec2(0, 0), pos.z), f - vec2(0, 0)),\n                dot(GetGradient(i + vec2(1, 0), pos.z), f - vec2(1, 0)),\n                blend.x),\n            mix(\n                dot(GetGradient(i + vec2(0, 1), pos.z), f - vec2(0, 1)),\n                dot(GetGradient(i + vec2(1, 1), pos.z), f - vec2(1, 1)),\n                blend.x),\n        blend.y\n    );\n    return noiseVal / 0.7; // normalize to about [-1..1]\n}\n\n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// https://mathworld.wolfram.com/EightCurve.html\nfloat figureEight(vec2 coord, float a) {\n    return pow(coord.x,4.0)-pow(a,2.0)*(pow(coord.x,2.0)-pow(coord.y,2.0));\n}\n\nfloat genNoise(vec2 uv, float seed, int iterations) {\n    float sum = 0.0;\n    float multiplier = 1.0;\n    float val = 0.0;\n    for (int i = 0; i < iterations; i++) {\n        uv = 2.0 * uv * seed;\n        val += multiplier * Pseudo3dNoise(vec3(uv, iTime * TIMESCALE));\n        sum += multiplier;\n        multiplier *= 0.6;\n    }\n    return val / sum;\n}\n\n\nfloat star(vec2 uv, float seed, float intensity, float size) {\n    vec2 starPos = vec2(rand(seed * 3.234) * iResolution.x / iResolution.y, rand(seed * 5.435));\n    float dist = pow(length(uv - starPos), intensity);\n    return size / dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    col += 0.6 * sin(3.0 * genNoise(uv, 1.0, 10) + hsv2rgb(vec3(uv.x, 0.8, 1.0)));\n    \n    for (int i = 0; i < 75; i++) {\n        float seed = float(i);\n        float intensity = pow(Pseudo3dNoise(vec3(seed * 10.0, iTime, 0.0)), 4.0) * 0.2 + 1.4;\n        col += star(fragCoord/iResolution.y, float(i), intensity, 0.001);\n    }\n\n    float shape = step(figureEight(uv - vec2(0.5), 0.45), 0.01) *\n        step(0.000, figureEight(uv - vec2(0.5), 0.4));\n    col *= shape;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}