{"ver":"0.1","info":{"id":"ddcBWM","date":"1697217719","viewed":155,"name":"3D Sierpinksi [322 Chars]","username":"SnoopethDuckDuck","description":"Forked from iq, its not super pretty :|:|:|:|:|:|:|:","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","distancefield","distance","sierpinski","golf"],"hasliked":0,"parentid":"4dl3Wl","parentname":"Sierpinski - 3D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define F(n) for(int i; i < n; i++)\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    float t, // Distance travelled\n          m, // Min distance to scene\n          d, // Temp distance\n          f = .5;\n    \n\tvec3 p, // Position\n         q, // Temp position\n         R = iResolution;\n         \n    // Marching loop\n\tF(99)\n    {\n        // Move in ray direction, and rotate\n        //p = .8-t + t * (u+u-R.xy).xyx/R.y * vec3(f, .7, -f);  \n        p = f-t + t * (vec3(u+u, 0)-R)/R.y;\n        p.xz *= mat2(cos(.3*iTime+ vec4(0,11,33,0)));\n        \n        // Fun\n        // p.z -= .05*cos(p.y*9.-iTime*4.);        \n        \n        // Four tetrahedron points\n        mat4x3 M = -mat4x3(0, -f,  0,\n                           0,  1,  -1,\n                          -1,  1,  f,\n                           1,  1,  f);      \n         \n        // SDF fractal loop\n        F(9) \n        {\n            // Ensure d<m for i=0 in loop below\n            m += d;\n            \n            // Find closest distance d and tetrahedron point q\n            F(4)\n                d = length(p-M[i]), d<m ? m=d, q=M[i] : q;\n                \n            // Rescale and centre toward closest tetrahedron point\n            p += p - q;\n        }        \n        \n        if (m < 1. || t > 5.) \n            break;\n            \n        t += m / 1e3;\n    }\n\n    //o.rgb = t < 5. ? cos(p) : p/p;\n    o = 0.*o + t; \n}","name":"Image","description":"","type":"image"}]}