{"ver":"0.1","info":{"id":"tlfXzX","date":"1563711961","viewed":256,"name":"Text Mode Renderer (OCR)","username":"0xAA55","description":"A renderer uses fonts to render the scene.\n\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["font","renderer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Main Image:\n// Compare the result of buffer C, then choose a nearest character to render\n\nvec4 LimitColor(vec4 Color, int Depth)\n{\n    return clamp(vec4(ivec4(Color * (vec4(Depth) + 0.5))) / vec4(Depth), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Data stored in buffer B is an 2D-array of 80x25 blocks\n    // Each block stores every nearest characters and scores which were computed in limited set of candidate characters\n    ivec2 BlockDim = ivec2(iResolution.xy) / TextMode;\n    ivec2 BlockId2 = ivec2(fragCoord) / TextMode;\n    int BlockId = BlockId2.x + BlockId2.y * BlockDim.x;\n    int BlockCount = min(BlockDim.x * BlockDim.y, CHAR_COUNT);\n    \n    // Loop for every block and pick up the nearest character\n    int CharCode = 0;\n    bool IsInv = false;\n    vec4 BlockData = texelFetch(iChannel2, ivec2(fragCoord * vec2(TextMode) / iResolution.xy), 0);\n    CharCode = int(BlockData.x);\n    IsInv = (int(BlockData.w) != 0);\n    \n    vec2 CharTexCoord = vec2(fract(fragCoord * vec2(TextMode) / iResolution.xy));\n    vec4 CharColor = texture(iChannel0, floor(fragCoord * vec2(TextMode) / iResolution.xy) / vec2(TextMode));\n    vec4 CharSample = SampleChar(iChannel3, CharCode, CharTexCoord);\n    if(IsInv) CharSample = 1.0 - CharSample;\n    fragColor = CharSample * LimitColor(CharColor, 4);\n    // fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color =  texture(iChannel0, uv);\n    float gray = length(color.rgb) / sqrt_3;\n    fragColor = vec4(gray);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define COMMON_DEFS 1\n#define TEXT_COLS 80\n#define TEXT_ROWS 25\n#define CHAR_COLS 16\n#define CHAR_ROWS 16\n#define CHAR_COUNT (CHAR_COLS * CHAR_ROWS)\n#define MIN_CHAR 0\n#define MAX_CHAR (224)\n\nconst ivec2 TextMode = ivec2(TEXT_COLS, TEXT_ROWS);\nconst ivec2 CharMatSize = ivec2(CHAR_COLS, CHAR_ROWS);\n\n// Referenced Resolution, used for determine the blur radius for better dFdx, dFdy result\nconst vec2 ReferenceRes = vec2(800, 450);\n\nconst float sqrt_3 = 1.7320508075688772935274463415059;\n\nvec4 SampleChar(sampler2D Channel, int Char, vec2 TexCrd)\n{\n    vec2 CharOrigin = vec2(int(mod(float(Char), float(CHAR_COLS))), Char / CHAR_COLS);\n    vec2 TexCrdAdj = (TexCrd - vec2(0.5, 0.0)) * vec2(0.5, 1.0) + vec2(0.5, 0.0);\n    return texture(Channel, ((CharOrigin + TexCrdAdj) / vec2(CharMatSize))).rrrr;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buffer C: Char convolution\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Split pixels into lots of 80x25 matrices\n    // Every pixels in the matrix represents the nearest charactor and the score of the convolution results.\n    // Every matrix computes all of the characters in the 80x25 screen, find some characters from the candidates.\n    ivec2 BlockDim = ivec2(iResolution.xy) / TextMode; // Matrix count in row and column\n    ivec2 BlockId2 = ivec2(fragCoord) / TextMode; // Matrix ID in 2-dimension\n    int BlockId = BlockId2.x + BlockId2.y * BlockDim.x; // Matrix ID\n    int BlockCount = BlockDim.x * BlockDim.y; // Matrix count\n    int CharCount = CHAR_COUNT / BlockCount; // Loop count. Reduce loop length by let other matrix help computation\n    ivec2 ScreenPos = ivec2(fragCoord) % TextMode; // Text mode screen pos\n    ivec2 CharSize = ivec2(min(ReferenceRes, iResolution.xy)) / TextMode;\n    float CharArea = float(CharSize.x * CharSize.y);\n    \n    float BestScore = 999999999.0;\n    int BestScoreChar = 0;\n    bool IsInversed = false;\n    if(CharCount == 0)\n    {\n        if(BlockId + MIN_CHAR <= MAX_CHAR)\n        {\n        \tCharCount ++;\n        }\n    }\n    for(int i = 0; i < CharCount; i++)\n    {\n        int CharCode = i * BlockCount + BlockId + MIN_CHAR;\n        if(CharCode >= MAX_CHAR) break;\n        vec2 CharOrigin = vec2(CharCode % CHAR_COLS, CharCode / CHAR_COLS);\n        float Score = 0.0;\n        for(int y = 0; y < CharSize.y; y ++)\n        {\n        \tfor(int x = 0; x < CharSize.x; x ++)\n            {\n                vec2 xy = vec2(x, y);\n                vec2 TexCrdAdj = (xy / vec2(CharSize) - vec2(0.5, 0.0)) * vec2(0.5, 1.0) + vec2(0.5, 0.0);\n                vec2 CharTexCoord = (CharOrigin + TexCrdAdj) / vec2(CharMatSize);\n                vec2 SceneTexCoord = (vec2(ScreenPos) + xy / vec2(CharSize)) / vec2(TextMode);\n                float SceneSample = texture(iChannel0, SceneTexCoord).r + 0.2;\n                float CharSample = texture(iChannel1, CharTexCoord).r;\n                float Diff = CharSample - SceneSample;\n                Score += Diff * Diff;\n            }\n        }\n        \n        Score = sqrt(Score);\n        if (Score <= BestScore)\n        {\n            BestScore = Score;\n            BestScoreChar = CharCode;\n        }\n    }\n    \n    fragColor = vec4(BestScoreChar, BestScore, 0.0, IsInversed ? 1.0 : 0.0);\n}\n\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 CharPos = ivec2(fragCoord);\n    if(CharPos.x >= TextMode.x || CharPos.y >= TextMode.y) discard;\n    \n    ivec2 BlockDim = ivec2(iResolution.xy) / TextMode; // Matrix count in row and column\n    int BlockCount = min(BlockDim.x * BlockDim.y, MAX_CHAR); // Matrix count\n    \n    float CharScore = 999999999.0;\n    fragColor = vec4(0.0, CharScore, 0.0, 0.0);\n    for(int i = 0; i < BlockCount; i++)\n    {\n        ivec2 BlockPos = ivec2(i % BlockDim.x, i / BlockDim.x);\n        vec4 BlockData = texture(iChannel0, vec2(BlockPos * TextMode + CharPos) / iResolution.xy);\n        if(BlockData.y <= CharScore)\n        {\n            CharScore = BlockData.y;\n            fragColor = BlockData;\n        }\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}