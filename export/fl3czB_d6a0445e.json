{"ver":"0.1","info":{"id":"fl3czB","date":"1660007837","viewed":91,"name":"autogen 62","username":"asynth","description":"Generated by a program written in Rust.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["generative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 bi(vec3 x) { return 2. * x - 1.; }\nvec3 uni(vec3 x) { return 0.5 + 0.5 * x; }\n\nfloat tri(float x) { // triangle wave\n    float p = fract(x * .25 + .25) * 2. - 1.;\n    return 1. - 2.0 * abs(p);\n}\nvec3 tri(vec3 x) { // triangle wave\n    vec3 p = fract(x * .25 + .25) * vec3(2.) - vec3(1.);\n    return vec3(1.) - vec3(2.0) * abs(p);\n}\n\nvec3 well(vec3 x) { // a function that dips in the middle\n    return 1. - 2. / pow(1. + x*x, vec3(8.));\n}\n\nfloat quant(float a, float b) {\n    return b == 0.0 ? a : floor(a/b) * b;\n}\nvec2 quant(vec2 a, vec2 b) {\n    return vec2(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y\n    );\n}\n\nvec3 quant(vec3 a, vec3 b) {\n    return vec3(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y,\n        b.z == 0.0 ? a.z : floor(a.z/b.z) * b.z\n    );\n}\n\n\nvec3 sq(vec3 a) {\n    return a*a;\n}\n\nfloat sq(float a) {\n    return a*a;\n}\n\nvec3 sigmoid(vec3 a) {\n    return a / sqrt(1.0 + sq(a));\n}\n\nvec2 circ_inv(vec2 uv, vec2 center, float radius) {\n    float d = distance(uv, center);\n    if (d < radius) {\n        return uv;\n    } else {\n        float scale = sq(radius / d);\n        return (uv - center) * scale + center;\n    }\n}\n\n\nvec3 pthresh(float thresh, vec3 a, vec3 b, vec3 c) {\n    return vec3(\n        a.x < thresh ? b.x : c.x,\n        a.y < thresh ? b.y : c.y,\n        a.z < thresh ? b.z : c.z\n    );\n}\n\nvec2 xywarp(vec2 uv, vec2 a, vec2 b) {\n    return vec2(\n        uv.x + a.x * b.x,\n        uv.y + a.y * b.y\n    );\n}\n\nvec3 mix2(vec2 uv, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return mix(mix(a, b, uv.xxx), mix(c, d, uv.xxx), uv.yyy);\n}\n\nvec2 mix2(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return mix(mix(a, b, uv.xx), mix(c, d, uv.xx), uv.yy);\n}\n\nfloat mix2(vec2 uv, float a, float b, float c, float d) {\n    return mix(mix(a, b, uv.x), mix(c, d, uv.x), uv.y);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 noise(vec2 uv, vec2 period, float seed) {\n    vec2 quv = floor(uv / period) + seed;\n    vec2 fuv = mod(uv, period) / period;\n    float a = hash12(quv);\n    float b = hash12(quv + vec2(1.,0.));\n    float c = hash12(quv + vec2(0., 1.));\n    float d = hash12(quv + vec2(1.,1.));\n    \n    return vec3(mix2(smoothstep(0.,1.,fuv), a, b, c, d));\n} \n\nvec2 reflect_0(vec2 uv) { return vec2(uv.x, abs(uv.y)); }\nvec2 reflect_1(vec2 uv) { return vec2(abs(uv.x), uv.y); }\nvec2 reflect_2(vec2 uv) { return vec2(abs(uv.x), abs(uv.y)); }\nvec2 reflect_3(vec2 uv) { return uv.x > -uv.y ? uv : vec2(uv.y, uv.x); }\nvec2 reflect_4(vec2 uv) { return uv.x > uv.y ? uv : vec2(uv.y, uv.x); }\n\nvec2 repeat_0(vec2 uv, float q) { return vec2(quant(uv.x, q), uv.y); }\nvec2 repeat_1(vec2 uv, float q) { return vec2(uv.x, quant(uv.y, q)); }\nvec2 repeat_2(vec2 uv, float q) { return vec2(quant(uv.x, q), quant(uv.y, q)); }\nvec2 repeat_3(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, uv.y); }\nvec2 repeat_4(vec2 uv, float q) { return vec2(uv.x, tri(uv.y / q) * q); }\nvec2 repeat_5(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, tri(uv.y / q) * q); }\n\nvec2 rect_to_polar(vec2 uv) { return vec2(length(uv), atan(uv.y, uv.x)/1.570796); }\nvec2 polar_to_rect(vec2 uv) { float angle = uv.y*1.570796; return vec2(uv.x * cos(angle), uv.x * sin(angle)); }\n\nvec3 node_1(vec2 uv) {\n\tuv = repeat_2(uv, 0.6059);\n\tvec3 a1 = mix2(uv, vec3(0.6765, 0.8636, 0.8733), vec3(0.7682, 0.1068, 0.5161), vec3(0.2365, 0.0707, 0.5423), vec3(0.2859, 0.4311, 0.9491));\n\treturn a1;\n}\n\nvec3 node_2(vec2 uv) {\n\tvec3 a1 = noise(uv, vec2(2.0902123, 1.6271765), 0.121374);\n\tvec3 a2 = sin(a1*1.9003 + 0.1994 + iTime*0.0533);\n\tuv = xywarp(uv, vec2(0.5637, 0.5489), a2.xy);\n\tvec3 b1 = noise(uv, vec2(3.7943788, 0.25641415), 0.643230);\n\treturn (node_1(uv) * bi((-b1)));\n}\n\nvec3 node_3(vec2 uv) {\n\tuv = reflect_3(uv);\n\treturn max(node_2(uv), vec3(atan(uv.y, uv.x)));\n}\n\nvec3 node_4(vec2 uv) {\n\tuv = repeat_3(uv, 0.7852);\n\tvec3 a1 = mix2(uv, vec3(0.2565, 0.5900, 0.0593), vec3(0.3941, 0.5151, 0.7165), vec3(0.1912, 0.4116, 0.3594), vec3(0.1408, 0.2855, 0.3969));\n\tvec3 a2 = tri(a1*4.0171 + 0.6719 + iTime*0.0976);\n\treturn a2;\n}\n\nvec3 node_5(vec2 uv) {\n\tuv = reflect_3(uv);\n\treturn vec3(length(uv));\n}\n\nvec3 node_6(vec2 uv) {\n\tuv = repeat_1(uv, 0.1405);\n\tvec3 a1 = vec3(0.7632, 0.6113, 0.3529);\n\tvec3 a2 = mix2(uv, vec3(0.1576, 0.4876, 0.1710), vec3(0.4693, 0.2880, 0.6685), vec3(0.4713, 0.0918, 0.0902), vec3(0.6653, 0.1073, 0.8794));\n\treturn (mod(mod(node_5(uv), a1), vec3(atan(uv.y, uv.x))) * (a2 - vec3(uv.y)));\n}\n\nvec3 node_7(vec2 uv) {\n\tuv = xywarp(uv, vec2(0.3529, -0.1117), node_6(uv).xy);\n\tvec3 b1 = vec3(0.3891, 0.6932, 0.5100);\n\tvec3 b2 = mix2(uv, vec3(0.6264, 0.9702, 0.8498), vec3(0.3968, 0.7785, 0.1423), vec3(0.1347, 0.8974, 0.4664), vec3(0.2546, 0.4946, 0.3435));\n\tvec3 b3 = tri(b2*4.1603 + 0.6479 + iTime*0.2832);\n\treturn mod(bi(b1), b3);\n}\n\nvec3 node_8(vec2 uv) {\n\tuv = reflect_3(uv);\n\treturn abs(vec3(uv.x));\n}\n\nvec3 node_9(vec2 uv) {\n\tuv = (mat2(-1.0247,-1.1108,0.9296,1.2406)*(uv-vec2(-0.1944,-0.0197)+vec2(-0.1944,-0.0197)));\n\tvec3 a1 = sin((-node_8(uv))*2.5401 + 0.3030 + iTime*0.1051);\n\treturn abs(min(uni(a1), vec3(atan(uv.y, uv.x))));\n}\n\nvec3 node_10(vec2 uv) {\n\tuv = xywarp(uv, vec2(-0.6649, 0.3355), node_7(uv).xy);\n\treturn uni(node_9(uv));\n}\n\nvec3 node_11(vec2 uv) {\n\tuv = reflect_4(uv);\n\tvec3 a1 = tri(vec3(uv.x)*4.1516 + 0.5240 + iTime*0.3047);\n\treturn (sigmoid(uni(mod(vec3(uv.x), vec3(uv.y)))) - a1);\n}\n\nvec3 node_12(vec2 uv) {\n\tuv = xywarp(uv, vec2(0.1128, 0.8762), vec3(atan(uv.y, uv.x)).xy);\n\treturn vec3(atan(uv.y, uv.x));\n}\n\nvec3 node_13(vec2 uv) {\n\tuv = repeat_1(uv, 0.3284);\n\tvec3 a1 = sin(min(node_12(uv), vec3(length(uv)))*4.9535 + 0.8099 + iTime*0.2403);\n\treturn sigmoid(a1);\n}\n\nvec3 node_14(vec2 uv) {\n\tuv = repeat_5(uv, 0.4283);\n\tvec3 a1 = sin(vec3(atan(uv.y, uv.x))*1.1767 + 0.5253 + iTime*0.2536);\n\treturn mod((-a1), quant(sigmoid(node_13(uv)), vec3(length(uv))));\n}\n\nvec3 node_15(vec2 uv) {\n\tuv = reflect_1(uv);\n\tvec3 a1 = noise(uv, vec2(0.2852062, 0.13953725), 0.736992);\n\tvec3 a2 = tri((vec3(length(uv)) * quant(vec3(uv.x), mix(vec3(uv.x), vec3(uv.x), a1)))*4.5676 + 0.9280 + iTime*0.2881);\n\tvec3 a3 = sin(node_11(uv)*3.7229 + 0.7066 + iTime*0.1559);\n\tvec3 a4 = sin(a3*2.4867 + 0.5088 + iTime*0.1895);\n\tvec3 a5 = tri(a4*1.0396 + 0.2594 + iTime*0.2142);\n\treturn mod(sigmoid(uni((a2 * a5))), node_14(uv));\n}\n\nvec3 top(vec2 uv) {\n\tvec3 a1 = tri(node_4(uv)*2.7679 + 0.5737 + iTime*0.0873);\n\tvec3 a2 = noise(uv, vec2(3.2968464, 0.14725126), 0.558247);\n\tvec3 a3 = noise(uv, vec2(0.659763, 0.62732923), 0.138691);\n\tvec3 a4 = vec3(0.1848, 0.3743, 0.6887);\n\tvec3 a5 = noise(uv, vec2(2.6572633, 1.757387), 0.570982);\n\tvec3 a6 = vec3(0.2347, 0.2160, 0.3228);\n\tvec3 a7 = noise(uv, vec2(1.2195917, 0.17169496), 0.581721);\n\tvec3 a8 = mix2(uv, vec3(0.7080, 0.6693, 0.1770), vec3(0.3893, 0.7809, 0.6148), vec3(0.3176, 0.8617, 0.2490), vec3(0.6251, 0.5901, 0.4887));\n\tvec3 a9 = tri(uni(abs(max(a7, (a8 - abs(vec3(uv.y))))))*4.3876 + 0.1190 + iTime*0.3332);\n\tvec3 a10 = tri(a9*5.8644 + 0.3218 + iTime*0.1066);\n\tvec3 a11 = tri(max(mix(mod(a3, a4), mix(vec3(uv.x), a5, a6), vec3(uv.x)), a10)*4.3214 + 0.2877 + iTime*0.1345);\n\tvec3 a12 = tri(max(mix(uni(quant((-abs(a2)), vec3(length(uv)))), node_10(uv), a11), (-node_15(uv)))*4.1846 + 0.3053 + iTime*0.2640);\n\tvec3 a13 = sin(a12*3.7572 + 0.5519 + iTime*0.3489);\n\treturn (-quant(min(node_3(uv), (-sigmoid(a1))), (-uni(a13))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = abs(sin(top(uv)));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}