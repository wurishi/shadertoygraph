{"ver":"0.1","info":{"id":"dlcXWN","date":"1685400502","viewed":66,"name":"Escape time mutation","username":"Microfractal","description":"My first shader. You can see a Mandelbrot, which rotates (coordinate based). The C of this mandelbrot is not taken directly from the image, but distorted and changed several times (based on time). :D","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","transformation","burningship","escapetime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//some math, for beautiful fractals!\nvec2 sqr(vec2 a) {\n    return vec2(a.x * a.x - a.y * a.y, 2.0 * a.x * a.y);\n}\n\nvec2 abssqr(vec2 a) {\n    return vec2(a.x * a.x - a.y * a.y, 2.0 * -abs(a.x * a.y));\n}\n\nfloat norm(vec2 a) {\n    return a.x * a.x + a.y * a.y;\n}\n\nvec2 lerp(vec2 a, vec2 b, float c) {\n    return a + c * (b - a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    //speed division\n    float speed = 2.0;\n    \n    vec2 c = (fragCoord - iResolution.xy /2.0) / vec2(iResolution.y) * 2.5 + vec2(-0.3,0.5);\n    vec2 seed = vec2(sin(iTime/speed)*0.6,cos(iTime/speed)*0.6);\n    \n    \n    //transformations\n    \n    int transform_iterations = 1;\n    \n    int low_iter = int(iTime/speed);\n    float inter_iter = mod(iTime/speed,1.0);\n    \n    for (int abs_count = 0; abs_count < transform_iterations; abs_count++) {\n        vec2 c1 = vec2(0);\n        for (int iter = 0; iter < low_iter; iter++) {\n        //the final fractal formula \n            c1 = abssqr(c1) + c;\n        }\n        c = lerp(c1, abssqr(c1) + c, inter_iter);\n    }\n    \n    vec2 z = vec2(0.0,0.0);\n    //max iterations\n    int N = 512;\n    \n    int n = 0;\n    while (n < N) {\n        //rotating formula\n        z = sqr(z) + c + seed;\n        //bailout check\n        if (norm(z) > 1e30) {\n            break;\n        }\n        n++;\n    }\n    \n    float fn = float(n);\n      \n    vec3 rgb = vec3(0,0,0);\n    \n    if (n < N) {\n        rgb = rgb = sin(vec3((fn/3.0),(fn/4.0),(fn/5.0)));\n    }\n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}