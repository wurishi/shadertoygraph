{"ver":"0.1","info":{"id":"flG3z1","date":"1637127437","viewed":80,"name":"Fork Mandelbrot akohdr 333","username":"akohdr","description":"Using iFrame loop trick from forked Mandelbrot iteration progression for a round of golf.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","golf"],"hasliked":0,"parentid":"fdsSRf","parentname":"Mandelbrot iteration progression"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define R iResolution\n\n// 128 char - lower half slow iteration progression\n/*\nvoid mainImage( out vec4 z, in vec2 c )\n{\n    z-=z;c=(c-R.xy)/R.y;\n    while(++z.w<iTime)\n        z.xy=mat2(z.xy,-z.y,z)*z.xy+c;\n}\n*/\n\n// 139 char - SLOW we can just catch edge from 12-30+s\n/*\nvoid mainImage( out vec4 z, in vec2 c )\n{\n    z-=z;\n    c = (c-R.xy)/R.y/1e3-vec2(0,1);\n    while(++z.w<iTime)\n        z.xy=mat2(z.xy,-z.y,z)*z.xy+c;\n}\n*/\n\n// 150 char - SLOW if we use iTime, drop *1e2 image doesn't come in till 70s+\n/*\nvoid mainImage( out vec4 z, in vec2 c )\n{\n    z-=z;\n    c = (c-.5*R.xy)/R.y/1e3+vec2(-.74,.14);\n    for (;++z.w<iTime;)\n        z.xy=mat2(z.xy,-z.y,z)*z.xy+c;\n}\n*/\n\n// 155 char - different site\n/*\nvoid mainImage( out vec4 z, in vec2 c )\n{\n    z-=z;\n    c = (c-.5*R.xy)/R.y/1e3-vec2(.74,.14);\n    for (int x=0;++x<iFrame;)\n        z.xy=mat2(z.xy,-z.y,z)*z.xy+c;\n}\n*/\n\n// 156 char - if we use iTime we can drop *1e2 if you can be patient\n/*\nvoid mainImage( out vec4 z, in vec2 c )\n{\n    z-=z;\n    c = (c-.5*R.xy)/R.y/1e3+vec2(-.736,.143);\n    for (;++z.w<iTime*1e2;)\n        z.xy=mat2(z.xy,-z.y,z)*z.xy+c;\n}\n*/\n\n// 158 char\nvoid mainImage( out vec4 z, in vec2 c )\n{\n    z-=z;  // boo no fun need to init z\n    c = (c-.5*R.xy)/R.y/1e3+vec2(-.736,.143);\n    for (int x=0;++x<iFrame;)\n        z.xy=mat2(z.xy,-z.y,z)*z.xy+c;\n}\n\n// Some of these look alot like Lichtenberg wood burning fractals\n//   https://youtu.be/1jhqZg8UBJU?t=163\n/*\nvoid mainImage( out vec4 z, in vec2 c )\n{\n//    c = (c-0.5*R.xy)/R.y/1e3+vec2(-.736,.143);     // original \n//    c = (c-0.5*R.xy)/R.y/1e3-vec2(.74,.14);        // alternative site \n    \n    // replay shader after selecting site\n//    c = (c-.5*R.xy)/R.y/1e1-iMouse.xy/R;  // easier mouse selection less zoom\n    c = (c-.5*R.xy)/R.y/1e4-iMouse.xy/R;  // super sensitive mouse selection\n\n    for (int x=0;++x<iFrame;)\n    \n    // Choose golfed solution\n    \n    // tweak mat4 constants to change colour\n//        if(dot(z=mat4(z.xyxy,-z.y,z.x,1,0,0,0,0,0,0,0,0,0)*z+c.xyxy,z)>4.) break;\n        if(dot(z=mat4(z,-z.y,z.x,-1,0,0,0,0,0,0,0,0,0)*z+c.xyxy,z)>4.) break;\n        \n//        z.xy=mat2(z.xy,-z.y,z.x)*z.xy+c;             //shortest\n//        z=mat4(mat2(z.xy,-z.y,z.x))*z+c.xyxy;\n}\n\n*/","name":"Image","description":"","type":"image"}]}