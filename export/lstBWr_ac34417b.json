{"ver":"0.1","info":{"id":"lstBWr","date":"1525339677","viewed":426,"name":"Red vs. Blue","username":"fjavifabre","description":"Negative and positive values propagation.\n\nUse SPACE to reset.\nClick to add RED.\nClick + Q to add BLUE.\nSet #define RANDOM 0 to deactivate random clicks\n#define USE_COLOR changes between gray scale and heat map","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["advection","heatmap","propagation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From \"Heat map color palettes\"\n// https://www.shadertoy.com/view/ltlSRj\nvec3 heat5( float interpolant );\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat v = texture(iChannel0, uv).x;\n    \n#if USE_COLOR    \n\tfragColor = vec4(heat5(v+.5),1.);\n#else\n    fragColor = vec4(vec3(v+0.5),1.);\n#endif\n    \n}\n\n\nvec3 fromRedToGreen( float interpolant )\n{\n \tif( interpolant < 0.5 )\n    {\n       return vec3(1.0, 2.0 * interpolant, 0.0); \n    }\n    else\n    {\n        return vec3(2.0 - 2.0 * interpolant, 1.0, 0.0 );\n    }\n}\nvec3 fromGreenToBlue( float interpolant )\n{\n   \tif( interpolant < 0.5 )\n    {\n       return vec3(0.0, 1.0, 2.0 * interpolant); \n    }\n    else\n    {\n        return vec3(0.0, 2.0 - 2.0 * interpolant, 1.0 );\n    }  \n}\nvec3 heat5( float interpolant )\n{\n    float invertedInterpolant = interpolant;\n \tif( invertedInterpolant < 0.5 )\n    {\n        float remappedFirstHalf = 1.0 - 2.0 * invertedInterpolant;\n        return fromGreenToBlue( remappedFirstHalf );\n    }\n    else\n    {\n     \tfloat remappedSecondHalf = 2.0 - 2.0 * invertedInterpolant; \n        return fromRedToGreen( remappedSecondHalf );\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DIFF 8.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvStep = vec2(2.) / iResolution.xy;\n    \n  \tfloat myValue = texture(iChannel0, uv).x;\n    float exitValue = myValue;\n   \n    \n\texitValue *= 0.000001;\n    \n    //Near values\n    exitValue += texture(iChannel0, uv + uvStep*vec2(-1,1)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(0,1)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(1,1)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(1,0)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(1,-1)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(0,-1)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(-1,-1)).x / DIFF;\n    exitValue += texture(iChannel0, uv + uvStep*vec2(-1,0)).x / DIFF;\n    \n\t\n    \n    fragColor = vec4(vec3(exitValue), 1.);\n    \n\n\n    if(any(greaterThan(iMouse.zw,vec2(0.))) \n       && length(iMouse.xy - fragCoord.xy) < 15.)\n    {\n       \tif(texelFetch(iChannel1, ivec2(81, 0), 0).x > 0.)\n       \t\tfragColor = vec4(myValue-.25);\n        else\n       \t\tfragColor = vec4(.25+myValue);\n    }\n\n#if RANDOM\n    vec2 rnd = hash( uvec3(iFrame*200, iTime*200., 1) ).xy;\n    if(iFrame % 5 == 0 && length(rnd - uv) < 0.01) \n    {\n     \tif(rand(rnd) < .5) fragColor = vec4(10.51+myValue); \n        else fragColor = vec4(myValue-10.51); \n    }\n#endif \n\t//CLEAN\n    if(texelFetch(iChannel1, ivec2(32, 0), 0).x > 0.)\n       fragColor = vec4(0.);\n    \n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define USE_COLOR 1\n#define RANDOM 1\n\nconst uint k = 1103515245U;  // GLIB C\n\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n","name":"Common","description":"","type":"common"}]}