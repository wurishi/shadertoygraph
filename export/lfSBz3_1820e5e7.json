{"ver":"0.1","info":{"id":"lfSBz3","date":"1725340736","viewed":16,"name":"Spiral-Grid","username":"SirShart","description":"Random","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gridtrippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// Function to create a geometric tiling pattern\nfloat tilePattern(vec2 uv, float scale) {\n    uv *= scale;\n    vec2 id = floor(uv);  // Tile ID\n    vec2 coord = fract(uv) - 0.5;  // Center each tile around (0,0)\n\n    // Create a radial pattern inside each tile\n    float dist = length(coord);\n    float angle = atan(coord.y, coord.x);\n\n    // Combine radial distance and angle to create a wave pattern\n    float pattern = sin(dist * 10.0 + angle * 4.0 + iTime * 2.0);\n    \n    // Adjust based on tile ID to create variety across the grid\n    pattern *= sin(id.x + id.y + iTime) * 0.5 + 0.5;\n\n    return pattern;\n}\n\n// Function to create the pulsating grid effect\nvec3 gridEffect(vec2 uv, float scale) {\n    float pattern = tilePattern(uv, scale);\n\n    // Synthwave-inspired color scheme\n    float hue = mod(pattern * 0.15 + iTime * 0.05, 1.0);\n    float saturation = 0.85;\n    float value = 0.7 + 0.3 * pattern;\n    \n    return vec3(hue, saturation, value);  // Return HSV color\n}\n\n// Function to convert HSV to RGB\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize and center coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Apply a dynamic scaling effect to the grid\n    float scale = 6.0 + sin(iTime * 0.5) * 3.0;\n    \n    // Create the pulsating grid effect\n    vec3 hsvColor = gridEffect(uv, scale);\n    \n    // Convert HSV to RGB\n    vec3 rgbColor = hsv2rgb(hsvColor);\n    \n    // Output final color\n    fragColor = vec4(rgbColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}