{"ver":"0.1","info":{"id":"tt2fRw","date":"1598570269","viewed":317,"name":"4D Julia Fractal Animation","username":"xacer","description":"Animated Julia fractal raymarcher, with hsb colors.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","fractal","julia","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 cameraPosition;\nmat3 cameraMatrix;\nvec4 offset;\nvoid qFold (inout vec4 a) {\n    a = vec4(a.x*a.x-a.y*a.y-a.z*a.z-a.w*a.w,2.0*a.x*a.y,2.0*a.x*a.z,2.0*a.x*a.w);\n}\nfloat map (vec3 pos) {\n    vec4 z = vec4(pos.xyz, 0.0);\n    float md2 = 1.0;\n    float radius2 = dot(z, z);\n    for (int i = 0; i < 25; i ++) {\n        qFold(z);\n        z += offset;\n        md2 *= 4.0 * radius2;\n        radius2 = dot(z, z);\n        if (radius2 > 4.0) break;\n    }\n    return 0.25 * sqrt(radius2 / md2) * log(radius2) - 0.001;\n}\nvec3 xDir = vec3(0.000001, 0, 0);\nvec3 yDir = vec3(0, 0.000001, 0);\nvec3 zDir = vec3(0, 0, 0.000001);\nvec3 surfaceNormal (vec3 pos) {\n    vec3 normal = vec3(\n        map(pos + xDir) - map(pos - xDir),\n        map(pos + yDir) - map(pos - yDir),\n        map(pos + zDir) - map(pos - zDir)\n    );\n    return normalize(normal);\n}\nvec3 lightDirection;\nfloat hue;\nvec3 tint;\nvec3 trace (vec3 origin, vec3 direction) {\n    float totalDistance = 0.0;\n    for (float steps = 0.0; steps < 100.0; steps ++) {\n        vec3 pos = origin + direction * totalDistance;\n        float distance = map(pos);\n        totalDistance += distance;\n        if (dot(pos, pos) > 25.0) break;\n        if (distance < 0.002) {\n            vec3 normal = surfaceNormal(pos);\n            float diffuse = max(-dot(normal, lightDirection), 0.0);\n            float specular = -dot(reflect(direction, normal), lightDirection);\n            specular = max(pow(specular, 5.0), 0.0);\n            float shade = diffuse * 0.7 + specular * 0.3;\n            return shade * tint;\n        }\n    }\n    return vec3(0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    cameraPosition = 1.8 * vec3(cos(iTime), 0, sin(iTime));\n\tcameraMatrix = mat3(cos(iTime+3.14/2.0), 0, -sin(iTime+3.14/2.0), 0, 1, 0, sin(iTime+3.14/2.0), 0, cos(iTime+3.14/2.0));\n\toffset = vec4(cos(iTime), sin(iTime), cos(iTime * 2.0 + 3.14), sin(iTime * 1.61 + 3.14)) * 0.6;\n    lightDirection = vec3(cos(iTime + 3.14), 0.0, sin(iTime + 3.14));\n    tint = vec3(cos(iTime / 20.0 * 3.1415 * 2.0) + 1.0, cos(iTime / 20.0 * 3.1415 * 2.0 + 2.0 * 3.1415 / 3.0) + 1.0, cos(iTime / 20.0 * 3.1415 * 2.0 + 4.0 * 3.1415 / 3.0) + 1.0) / 2.0;\n    hue = iTime / 20.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 1.0 - 2.0 * fragCoord/iResolution.xy;\n    vec3 ray = normalize(vec3(uv, 1.0)) * cameraMatrix;\n\n    // Time varying pixel color\n    vec3 col = trace(cameraPosition, ray);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}