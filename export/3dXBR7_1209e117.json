{"ver":"0.1","info":{"id":"3dXBR7","date":"1587856904","viewed":712,"name":"rotate uv keep aspect","username":"brunoimbrizi","description":"UV rotation with adjusted aspect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distortion","uv","rotate","matrix","aspect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate2D(vec2 p, float theta)\n{\n    return p * mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float inputAspect = iChannelResolution[0].x / iChannelResolution[0].y;\n    float outputAspect = iResolution.x / iResolution.y;\n    float aspect = inputAspect / outputAspect;\n    \n    // float angle = iTime * -0.3;\n    float angle = (iMouse.x / iResolution.x - 0.5) * 3.1415 * 2.0;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n\n    // adjust aspect\n    uv.y *= aspect;\n    uv.y -= aspect * 0.5 - 0.5;\n    \n    // rotate\n    uv -= vec2(0.5);\n\tuv.x *= inputAspect;\n\tuv = rotate2D(uv, angle);\n\tuv.x *= 1.0 / inputAspect;\n\tuv += vec2(0.5);\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}