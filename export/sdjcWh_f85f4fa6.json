{"ver":"0.1","info":{"id":"sdjcWh","date":"1643462928","viewed":213,"name":"Hex Grid Pixelation","username":"AntonioNoack","description":"This shader approximates uv coordinates using a hex grid. This can be used for nice shader effects.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["hex","hexagons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #define mod3(n) (n<0) ? 2-((2-n)%3) : n%3\n    #define MAGIC_AGAINST_NUMERICAL_ISSUES 500.0\n\n    vec2 pixelating = iResolution.yx / iResolution.y * mix(0.03, 0.005, pow(cos(iTime), 2.0));\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv-0.5)/pixelating + MAGIC_AGAINST_NUMERICAL_ISSUES;\n\n    vec2 di = mat2(0.866, 0.0, -0.5, 1.0) * uv;// convert uvs into hex-grid space\n    vec2 df = fract(di);\n    \n    // within a 3x3 grid, find our local coordinates\n    ivec2 intCoords = ivec2(di);\n    ivec2 localCoords = ivec2(mod3(intCoords.x), mod3(intCoords.y));\n    \n    // extend the fractional coordinates by the local coordinates (within 3x3 grid)\n    df += vec2(localCoords);\n    \n    // define all half-spaces for the 5 hexagons, that lay within this cell\n    bool l1 = df.x > 1.0;\n    bool l2 = df.y < 2.0;\n    bool l3 = df.y > 1.0;\n    bool l4 = df.x < 2.0;\n    bool l6 = df.y > 3.0 - df.x;\n    bool l7 = df.y > 2.0 - df.x;\n    bool l8 = df.y < 4.0 - df.x;\n    \n    // find the correct offset (depends on which cell we are inside of)\n    vec2 offset = vec2(-.5,.5);\n    \n    if(l2){\n        // everything below L2\n        if(l1){\n            // everything right of L1\n            if(l6){\n                if(!l4){\n                    // S2\n                    offset = vec2(1.5,-0.5);\n                } // else S4\n            } else {\n                if(!l3){\n                    // S1\n                    offset = vec2(0.5,-1.5);\n                } // else S4\n            }\n        } else if(!l7){\n            // S0\n            offset = vec2(-1.5,-.5);\n        }// else S4\n    } else if(!l8) {\n        // S3\n        offset = vec2(.5,1.5);\n    }// else S4\n\n    // transform coordinates back into uv space\n    df = df-di-offset-1.0;\n    df = mat2(1.155, 0.0, 0.577, 1.0) * df;\n    df = 1.0-df-MAGIC_AGAINST_NUMERICAL_ISSUES;// not completely sure, why I need that one ðŸ˜…\n\n    // show usual coordinates left-top, hexagonified coordinates on the right\n    fragColor = texture(iChannel0, df*pixelating+0.5);\n}","name":"Image","description":"","type":"image"}]}