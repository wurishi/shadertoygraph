{"ver":"0.1","info":{"id":"Xs2BRc","date":"1501475910","viewed":1880,"name":"Warp Drive / Falling Stars","username":"Retrotation","description":"fork of https://www.shadertoy.com/view/XsXBzM","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Cell(vec2 c) {\n    vec2 uv = fract(c);\n    c -= uv;\n    return (3.0 - length(uv)) * step(fract( sin(c.x + c.y*100.0) *1000.0), 0.04); // 3.0 :: star width and fade strength, 0.04 :: star count\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 projection = fragCoord.xy / vec2(1024.0,1024.0); // TEXCOORD divided by image resolution\n    float projX = fract(projection.x) / 1.; // XY direction divided by scale of stars along X\n    float projY = pow(projection.y, 0.014); // 0.014 :: speed1 of stars \n    float time = -iTime; //reverse or forward speed\n    vec3 color;\n    \n    for(int rgb=0; rgb<3; rgb++)\n    {\n        time -= 0.02; // color shift distance\n        vec2 coord = vec2(projY, projX)*256.0; // *512 :: star count, adjust star-count and scale for scaling along Y axis \n        vec2 delta = vec2(time*7.0, 0.0); // time*7.0 :: speed2 of stars, adjust both^^ speeds for length of stars\n        float c = Cell(coord -= delta);\n        c += Cell(coord -= delta);\n        color[rgb]= c * projection.y * 16.0; // fade distance at bottom of screen\n    }\n    \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}