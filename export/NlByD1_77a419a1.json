{"ver":"0.1","info":{"id":"NlByD1","date":"1649582715","viewed":66,"name":"diffusion  test14","username":"beherca","description":"diffusion  test ","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"NtByD1","parentname":"diffusion  test13"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a,b,t) smoothstep(a,b,t)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(texture(iChannel0, uv));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float calc(float colorSum, int range, float preColor){\n    float d = float (range*range - 1);\n    float diff = colorSum/d - preColor;\n    float result;\n    if(diff > 0.){\n        result = preColor - diff*0.1;\n    }else{\n        result = preColor + 0.1;\n    }\n    return result;\n}\n\nvec3 kernel(ivec2 fragCoord){\n    vec3 colorSum = vec3(0.);\n    vec3 preColor = texelFetch(iChannel1, fragCoord, 0).rgb;\n    int range = 10;\n    for(int i = -range; i < range+1 ; i++ ){\n        for(int j = -range; j < range+1 ; j++ ){\n            if(i != 0 || j != 0){\n                colorSum += texelFetch(iChannel1, fragCoord + ivec2(i,j), 0).rgb;\n            }  \n        }\n    }\n    \n    \n    vec3 c = vec3(calc(colorSum.r, range, preColor.r),\n    calc(colorSum.g, range, preColor.g),\n    calc(colorSum.b, range, preColor.b));\n    \n    return c;\n}\n\nvec3 getColor(ivec2 fragCoord){\n    vec3 num = kernel(fragCoord);\n    return num;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n  \n    vec3 col = vec3(texture(iChannel0, uv));\n    \n    /**/\n    if(iFrame < 10){\n        col = vec3(texture(iChannel0, uv));\n    }else{\n        col = 0.8 * getColor(ivec2(fragCoord)) +  0.2* vec3(texture(iChannel0, uv));\n    }\n    /**/\n    fragColor = vec4(col,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}