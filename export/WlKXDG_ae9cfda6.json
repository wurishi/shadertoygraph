{"ver":"0.1","info":{"id":"WlKXDG","date":"1583500570","viewed":259,"name":"circle spiral 1","username":"HaleyHalcyon","description":"done as a proof of concept","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISTSCALE 32.0\n#define ANGLESCALE 96.0\n\nfloat circle(float x, float y, float thres)\n{\n    float r_sq = x * x + y * y;\n    return 0.5 - clamp((r_sq - thres) * 8.0, -0.5, 0.5);\n}\n\nfloat zigzag(float x)\n{\n    return abs(1. - mod(x, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float PI = 3.14159265;\n    const float rotSpeed = -5.;\n    const float zoomSpeed = -3.;\n    const float spiralSpeed = 3.;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / scale;\n\tuv -= vec2(iResolution.x / scale, iResolution.y / scale) / 2.;\n    uv *= 2.0;\n    \n    float distance = log(uv.x*uv.x+uv.y*uv.y) / 2.;\n    float angle = atan(uv.y, uv.x) / PI;\n    \n    float spiral = 0.7 * smoothstep(0.1, 0.9, zigzag(distance * 2.0 + angle * 4.0 + iTime * spiralSpeed)) + 0.15;\n    \n    float distZag = zigzag(DISTSCALE * distance + iTime * zoomSpeed);\n    float angleZag = zigzag(ANGLESCALE * angle + iTime * rotSpeed);\n    \n    float circle = circle(distZag, angleZag, spiral);\n    \n    // Output to screen\n    fragColor = vec4(circle, circle, circle, 1);\n}","name":"Image","description":"","type":"image"}]}