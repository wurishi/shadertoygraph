{"ver":"0.1","info":{"id":"MXfyR8","date":"1725813843","viewed":32,"name":"FFT ChaCha20 Blue Noise","username":"sampajama","description":"A high quality random hash that takes in the resolution, mouse position, previous pixel value, pixel position, and time / frame data using floatBitsToUint and produces 4 random floats from [0.0, 1.0]","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["noise","math","random","hash","whitenoise","rng","chacha"],"hasliked":0,"parentid":"lfS3zd","parentname":"ChaCha20 High Quality Noise"},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offset = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n     \n    fragColor = texture(iChannel1, (fragCoord + 256.0 * offset) / iResolution.xy);\n    //fragColor = 0.5 + 1000.0 * offset.xxxx;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GAUSSIAN (true)\n\n#define ROUNDS 20\n#define ROTL(a,b) (((a) << (b)) | ((a) >> (32 - (b))))\n#define QUARTER_ROUND(a, b, c, d) \\\n    a += b; d ^= a; d = ROTL(d,16); \\\n    c += d; b ^= c; b = ROTL(b,12); \\\n    a += b; d ^= a; d = ROTL(d, 8); \\\n    c += d; b ^= c; b = ROTL(b, 7);\n\n#define uintBitsToUnorm(b) (float(uint(b)) / 4294967296.0)\n#define uintBitsToSnorm(b)  (float(int(b)) / 2147483648.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uint m11 = 0x65787061u; // \"expa\"\n    uint m12 = 0x6E642033u; // \"nd 3\"\n    uint m13 = 0x322D6279u; // \"2-by\"\n    uint m14 = 0x7465206Bu; // \"te k\n\n    uint m21 = floatBitsToUint(iResolution.x);\n    uint m22 = floatBitsToUint(iResolution.y);\n    uint m23 = floatBitsToUint(iMouse.x);\n    uint m24 = floatBitsToUint(iMouse.y);\n    \n    vec4 pre = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    uint m31 = floatBitsToUint(pre.x);\n    uint m32 = floatBitsToUint(pre.y);\n    uint m33 = floatBitsToUint(pre.z);\n    uint m34 = floatBitsToUint(pre.w);\n    \n    uint m41 = floatBitsToUint(fragCoord.x);\n    uint m42 = floatBitsToUint(iTime);\n    uint m43 = floatBitsToUint(fragCoord.y);\n    uint m44 = uint(iFrame);\n\n    for (int r = 0; r < ROUNDS; r += 2) \n    {\n        // EVEN ROUND\n        QUARTER_ROUND(m11, m12, m13, m14);\n        QUARTER_ROUND(m21, m22, m23, m24);\n        QUARTER_ROUND(m31, m32, m33, m34);\n        QUARTER_ROUND(m41, m42, m43, m44);\n        \n        // ODD ROUND\n        QUARTER_ROUND(m11, m22, m33, m44);\n        QUARTER_ROUND(m21, m32, m43, m14);\n        QUARTER_ROUND(m31, m42, m13, m24);\n        QUARTER_ROUND(m41, m12, m23, m34);\n    }\n\n    if (GAUSSIAN) {\n        fragColor = vec4(\n            (\n                uintBitsToSnorm(m11) + \n                uintBitsToSnorm(m21) + \n                uintBitsToSnorm(m31) + \n                uintBitsToSnorm(m41) \n            ) / sqrt(4.0 / 3.0),\n            (\n                uintBitsToSnorm(m12) + \n                uintBitsToSnorm(m22) + \n                uintBitsToSnorm(m32) + \n                uintBitsToSnorm(m42)\n            ) / sqrt(4.0 / 3.0),\n            (\n                uintBitsToSnorm(m13) + \n                uintBitsToSnorm(m23) + \n                uintBitsToSnorm(m33) + \n                uintBitsToSnorm(m43)\n            ) / sqrt(4.0 / 3.0),\n            (\n                uintBitsToSnorm(m14) + \n                uintBitsToSnorm(m24) + \n                uintBitsToSnorm(m34) +\n                uintBitsToSnorm(m44)\n            ) / sqrt(4.0 / 3.0)\n        );\n    } else {\n        fragColor = vec4(\n            uintBitsToUnorm(m11 ^ m21 ^ m31 ^ m41),\n            uintBitsToUnorm(m12 ^ m22 ^ m32 ^ m42),\n            uintBitsToUnorm(m13 ^ m23 ^ m33 ^ m43),\n            uintBitsToUnorm(m14 ^ m24 ^ m34 ^ m44)\n        );\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nfloat tau = atan(1.0)*8.0;\nfloat pi = atan(1.0)*4.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragCoord /= iResolution.xy;\n    fragCoord -= 0.5;\n    fragCoord *= 2.0;\n    \n    float d = distance(vec2(0.0), fragCoord);\n    if (d > 0.25) fragColor *= 0.0; \n    float w = sin(4.0 * pi * d);\n    w *= w;\n    w *= w;\n    w *= w;\n    w *= w;\n    w *= w;\n    w *= w;\n    w *= w;\n    w *= w;\n    fragColor *= w;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    \n    int size = int(iResolution.x);\n    float w = tau * float(uv.x + size / 2);\n    \n    vec2 xw = vec2(0.0);\n    \n    for(int n = 0; n < size; n++)\n    {\n        vec2 xn = texelFetch(\n            iChannel0,\n            ivec2((n + size / 2) % size, uv.y),\n            0\n        ).xy;\n\n        xw += cmul(xn, polar(1.0, w * float(n) / float(size)));\n    }\n    \n    fragColor = vec4(xw, 0.0, 0.0) / sqrt(float(size));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    \n    int size = int(iResolution.y);\n    float w = tau * float(uv.y + size / 2);\n    \n    vec2 xw = vec2(0.0);\n    \n    for(int n = 0; n < size; n++)\n    {\n        vec2 xn = texelFetch(\n            iChannel0,\n            ivec2(uv.x, (n + size / 2) % size),\n            0\n        ).xy;\n        \n        xw += cmul(xn, polar(1.0, w * float(n) / float(size)));\n    }\n    \n    fragColor = vec4(xw, 0.0, 0.0) / sqrt(float(size));\n}","name":"Buffer D","description":"","type":"buffer"}]}