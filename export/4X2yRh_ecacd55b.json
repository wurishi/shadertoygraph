{"ver":"0.1","info":{"id":"4X2yRh","date":"1726941290","viewed":28,"name":"Voronoi Cloud, Modified","username":"Salamanticormorant","description":"Each pixel's red, green, and blue value is proportional to that pixel's distance from corresponding points that traverse, at different speeds, what I think would be the largest ellipse that fits in the display, but I got rid of the square-root part.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const float PI = 3.14159265358979;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.xy;\n    float r = pow(cos(iTime * 1.1)/2.0+0.5-p.x,2.0)+pow(sin(iTime * 1.1)/2.0+0.5-p.y,2.0);\n    float g = pow(cos(iTime * 1.2)/2.0+0.5-p.x,2.0)+pow(sin(iTime * 1.2)/2.0+0.5-p.y,2.0);\n    float b = pow(cos(iTime * 1.3)/2.0+0.5-p.x,2.0)+pow(sin(iTime * 1.3)-p.y,2.0)/2.0+0.5;\n    vec3 col = vec3(r,g,b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}