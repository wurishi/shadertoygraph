{"ver":"0.1","info":{"id":"ddSGRG","date":"1667856994","viewed":146,"name":"particle flow distortion","username":"NueSB","description":"particle-based image dragging! (or the world's worst paint-flinging simulation)\n\nupdate: added some define params, added deltatime, fixed a few particle velocity bugs and cleaned up the overall code. also based paint flinging on squares instead of dist.\n","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// field visualizer from nmz:\n// https://www.shadertoy.com/view/XlfSRj\n\n\n//#define VISUALIZE_PARTICLES\n\nfloat segm(in vec2 p, in vec2 a, in vec2 b) //from iq\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n\treturn length(pa - ba*h)*30.;\n}\n\nconst float arrow_density = 1.5;\nconst float arrow_length = .45;\n\nfloat fieldviz(in vec3 p)\n{\n    vec2 ip = floor(p.xy*arrow_density)/arrow_density + .5/arrow_density;   \n    vec2 t = field(vec3(ip, p.z));\n    float m = pow(length(t),0.5)*(arrow_length/arrow_density);\n    vec2 b = normalize(t)*m;\n    float rz = segm(p.xy, ip, ip+b);\n    vec2 prp = (vec2(-b.y,b.x));\n    rz = min(rz,segm(p.xy, ip+b, ip+b*0.65+prp*0.3));\n    return clamp(min(rz,segm(p.xy, ip+b, ip+b*0.65-prp*0.3)),0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    #ifdef VISUALIZE_PARTICLES\n        float d = 0.0;\n        for(int i = 0; i < NUM_PARTICLES; i++)\n        {\n            vec4 particle = texelFetch(iChannel0, ivec2(i,0), 0);\n\n            d += step( sdBox( uv - (particle.xy / iResolution.xy), vec2(PARTICLE_SCALE / 2.0) ), 0.0 );\n        }\n    #endif\n    \n    vec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n    p *= 10.;\n\t\n    //vec2 fld = field(p);\n    //col += vec3(fld.x,-fld.x,fld.y)*0.7;\n    //float fviz = fieldviz(vec3(p, iTime));\n    //col = max(col, 1.-fviz*vec3(1.));\n    \n    \n    fragColor = texture(iChannel2, fragCoord / iResolution.xy) * 1.0;\n    \n    #ifdef VISUALIZE_PARTICLES\n        fragColor = max(fragColor - 0.01, vec4(0.0));\n        fragColor += d;\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// particle effector\n\nfloat rand(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) \n    {\n        fragColor = vec4(\n                         fragCoord.x * 10.0, \n                         iChannelResolution[0].y / 2.0 - sin(fragCoord.x) * 10.0, \n                         0.0,//rand(vec2(fragCoord.x+fragCoord.y+20.0, fragCoord.y)), \n                         0.0//rand(fragCoord.xy+fragCoord.xy+20.0)\n                        );\n        return;\n    }\n    vec4 prevdata = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    \n    vec2 pos = prevdata.xy;\n    vec2 velocity = prevdata.zw;\n    \n    vec2 p = pos.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n    p *= 10.;\n    \n    vec2 totalForce = vec2(0);\n        \n    float acceleration = 10.0;\n    \n    totalForce += field(vec3(p, iTime * 0.2)) * 50.0;\n\n    for(int i = 0; i < NUM_PARTICLES; i++)\n    {\n        ivec2 index = ivec2(i, i / int(iResolution.x));\n        \n        if (index == ivec2(fragCoord))\n            continue;\n        \n        vec4 particle = texelFetch(iChannel0, index, 0);\n        vec2 force = vec2(0);\n        \n        float d = distance(pos.xy, particle.xy);\n        \n        force = (particle.xy - pos.xy) * (1.0 - clamp( 0.0, 1.0, d / 50.0) );\n\n        totalForce += -force;\n    }\n    \n    velocity += totalForce * acceleration * iTimeDelta;\n    \n    \n    const float maxSpeed = 500.0;\n    float n = length(velocity);\n    float f = min(n, (maxSpeed)) / n;\n    velocity = f * velocity;\n    \n    \n    pos += velocity.xy * iTimeDelta;\n    \n    pos = mod(pos, iChannelResolution[0].xy);\n    \n    fragColor = vec4(pos, velocity);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// modulated image based on particles\n\nfloat rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0)\n    {\n        vec4 basecol = texture(iChannel0, (fragCoord / iResolution.xy) * 2.0 - 0.5);\n        fragColor = mix(texture(iChannel1, fragCoord / iResolution.xy), \n                        basecol.rgba,\n                        step(0.5, basecol.a));\n        return;\n    }\n    \n    \n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n    \n    float v = 1.0;\n    vec2 fracCoord = round(fragCoord * (1.0/v)) * v;\n    vec2 totalForce = vec2(0);\n    \n    for(int i = 0; i < NUM_PARTICLES; i++)\n    {\n        vec4 particle = texelFetch(iChannel2, ivec2(i, i / int(iResolution.x)), 0);\n        \n        {\n            vec2 force = particle.zw;\n            \n            force *= step( sdBox( fragCoord / iResolution.xy - (particle.xy / iResolution.xy), vec2(PARTICLE_SCALE) ), 0.0);\n            \n            //force *= 1.0 - clamp( \n            //                    0.0, 1.0,\n            //                    distance(fragCoord.xy, particle.xy) / 50.0\n            //                );\n            \n            totalForce += force / 250.0;\n        }\n    }\n    \n    fragColor = texture(iChannel1, (fragCoord - totalForce) / iResolution.xy);\n    \n    \n    \n    \n    {\n       vec4 basecol = texture(iChannel0, (fragCoord / iResolution.xy) * 2.0 - 0.5);\n        fragColor = mix(fragColor, \n                        basecol.rgba,\n                        step(0.5, basecol.a));\n    }\n    \n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_PARTICLES 250\n#define PARTICLE_SCALE 0.05\n\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// increase particles here for more flowy output. recommended: 500-1000\n\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\n// from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\nvec2 field(in vec3 p)\n{\n    p.xy *= 0.05;\n    return vec2(\n        cnoise(p),\n        cnoise(p+50.0)\n    );\n}\n","name":"Common","description":"","type":"common"}]}