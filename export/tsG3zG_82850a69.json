{"ver":"0.1","info":{"id":"tsG3zG","date":"1570440849","viewed":535,"name":"local twist/fork/zip on stripes","username":"FabriceNeyret2","description":"phase-twist (ie. early/late phase).   A shows twist.\nF,T,S,O: NODE= twist / fork / spindle / oriented fork.\nmouse: move nodes.   Bottom-left: back to demo-mode.\nT,S: SPACE freeze influence radius, otherwise sin(t).  <- ->  arrows: fine tune.","likes":7,"published":3,"flags":48,"usePreview":0,"tags":["complex","stripes","gabor","short","phasor","fingerprint","editing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/wsKGWD\n// variant of https://shadertoy.com/view/3dK3WW\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = u / R.y, \n       //Z = CS( 1e2*U.x ), \n         Z = CS( 1e2*length(U) ), \n        Z0,V; \n  //Z = vec2(1,0);                          // to display phasor only\n    \n    float a = 0., \n          t =  2. + sin(T(0,1).x), r= .2/t,\n       NODE = T(0,1).z;\n    for(int i=0; i<N; i++) {\n        V  = U - T(i,0).xy;\n          a += NODE == 0.                   // adds pseudolocal fork\n               ? logZ(V).y * T(i,0).z\n          :    NODE == 1.                   // adds local phase twist\n               ? T(i,0).z* PI*exp(-.5*dot(V,V)/pow(.1,t))\n          :    NODE == 2.                   // adds pseudolocal spindle\n               ? mix(0., TAU, abs(V).y<r ? smoothstep(-1.,1.,(V).x/r/smoothstep(1.,0.,abs(V).y/r)) :0.)\n          : // NODE == 3.                   // adds pseudolocal semi-fork\n               smoothstep(0., TAU, 2.*mod( logZ(V).y+PI-T(i,0).w, TAU) )*TAU  * T(i,0).z; // adding oriented fork \n \n              \n        // Z0 = CS( logZ(V).y * T(i).z );   // complex-form of contributions\n        // Z  = mulZ( Z, Z0);\n    }\n    Z  = mulZ( Z, CS(a));\n    if keyToggle(65) {               // without strip modulation\n       Z = CS(a);  \n       O = vec4( .5+.5 * Z, 0, 1);           // complex to colors\n     //O = sqrt(O.xxxx);  \n    } \n    else {                           // with strip modulation\n       O = vec4( .5+.5 * Z, 0, 1);           // complex to colors\n       O = sqrt(O.xxxx);                     // BW images in sRGB\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// manage nodes location: init, anim, mouse interaction\n\n#define hash4(x)        fract( 1e4* sin( 1e4* (x) * vec4(1,.111,.234,.731) ))\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy,\n         M = iMouse.xy/R.y;\n    U -= .5;\n    \n    if (U==vec2(0,1)) { \n        if (iFrame==0) { O = vec4(0,-1,1,0); return; } // init timer and node grabber\n        O = T(0,1); \n        if(!keyToggle(32)) O.x += iTimeDelta; // SPACE: radius oscillation time flow or not\n        if( keyClick (37)) O.x -= .05;        // left/right arrows: fine tune time\n        if( keyClick (39)) O.x += .05;\n        if( keyClick (64+ 6)) O.z = 0.;       // 'F': node mode = forks\n        if( keyClick (64+20)) O.z = 1.;       // 'T': node mode = twister\n        if( keyClick (64+19)) O.z = 2.;       // 'S': node mode = spindle\n        if( keyClick (64+15)) O.z = 3.;       // 'O': node mode = oriented fork\n        if (iMouse.z > 0. && O.y < 0.) {      // if new click, get the closest node\n            float d = 1e5, d0;\n            for(int i=0; i<N; i++) {\n                d0 = length(M-T(i,0).xy); if (d0<d) d=d0, O.y = float(i);\n            }\n        }\n        if (iMouse.z <= 0.) O.y = -1.;        // if mouse release, forget closest\n        return; \n    }\n    if (U.y > 0.) return;\n        \n    if (iFrame==0) {\n        O     = hash4(U.x);                                     // random node pos + rot sign + angle\n        O.xy *= R/R.y; O.z = sign(O.z-.5); O.w *= TAU; \n        return;\n    }\n    \n    O = T(U.x,0);\n    \n    if (U.x == T(0,1).y ) O.xy = M;                             // mouse moves node\n  //if (iMouse.z > 0. && length(M-O.xy) < .03 ) O.xy = M;       // mouse moves closest node\n    \n    if (length(M)<20./R.y) O.xy += CS( iTime + hash4(U.x+.1).z*TAU ) / R.y; // autodemo animation\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N 30       // number of nodes\n//#define NODE 1   // 0: forks  1: phase twister  2: spindles (now keyboard)\n\n#define T(x,y)      texelFetch(iChannel0, ivec2(x,y), 0 )\n\n#define CS(a)       vec2( cos(a), sin(a) )\n#define expZ(z)   ( length(z) * CS(z) )\n#define logZ(z)     vec2( length(z), atan((z).y,(z).x) )\n#define mulZ(a,b) ( mat2(a, -(a).y,(a).x) * (b) )\n\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n#define PI          3.14159\n#define TAU         (2.*PI)","name":"Common","description":"","type":"common"}]}