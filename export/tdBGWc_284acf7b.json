{"ver":"0.1","info":{"id":"tdBGWc","date":"1550111305","viewed":67,"name":"RAYTRACING","username":"rosserMartinez","description":"Raytraced Sphere","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 camPos = vec3(0,0,-4);\nvec3 spherePos = vec3(0,0,12.0);\nfloat clippingPlane = 1.0;\nvec3 lightPos = vec3(8,0,1.0);\nfloat radius = 2.0;\n\nfloat sphereIntersect(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n vec3 rc = ray-center;\n float c = dot(rc, rc) - (radius*radius);\n float b = dot(dir, rc);\n float d = b*b - c;\n float t = -b - sqrt(abs(d));\n float st = step(0.0, min(t,d));\n return mix(-1.0, t, st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//pixel pos\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //move for screen space\n    uv = (uv*2.0) - 1.0; \n    \n    //aspect ratio\n    uv.x *= iResolution.x/iResolution.y; \n    \n    //pixel pos\n    vec3 imagePlanePixel = vec3(uv.x,uv.y, clippingPlane); \n\n    // create ray from cam position to pixel\n    vec3 rayDirection = normalize(imagePlanePixel - camPos); \n    \n    //distance from sphere\n    float hitDist = sphereIntersect(camPos, rayDirection, spherePos, radius); \n    \n    vec3 diffuseColor = vec3(0.4, 0.1, 0.7);\n    \n    //point of intersection along the ray\n    vec3 hitPoint = camPos + (rayDirection * hitDist); \n        \n    //normal\n    vec3 n = hitPoint - spherePos;\n    //light vec\n    vec3 l = lightPos - hitPoint; \n    \n    //normalize vectors\n    normalize(n);\n    normalize(l);\n    \n    //diffuse intensity\n    float diffuseIntensity = dot(n,l) * 0.01;\n           \n    //final color\n    fragColor = vec4(vec3(diffuseColor * diffuseIntensity * hitDist),1);\n        \n    \n}","name":"Image","description":"","type":"image"}]}