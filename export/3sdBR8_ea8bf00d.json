{"ver":"0.1","info":{"id":"3sdBR8","date":"1604348201","viewed":94,"name":"Glowballs'2","username":"MasterQ32","description":"Some glowing balls","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","spheres","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdSphere(vec3 p, float r)\n{\n \treturn length(p) - r;   \n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// exponential smooth min (k = 32);\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nmat2 rot(float r)\n{\n \treturn mat2(\n        cos(r), -sin(r),\n        sin(r), cos(r)\n    );\n}\n\nstruct Dist {\n    float d;\n    vec3 color;\n};\n    \n    Dist dmin(Dist a, Dist b) {\n\t\tif(a.d < b.d)\n            return a;\n        else\n            return b;\n    }\n\nDist sdf(vec3 p)\n{\n    Dist d = Dist(10000.0, vec3(0));\n    vec3[] c = vec3[](\n        vec3(1,0,0),\n        vec3(0,1,0),\n        vec3(0,0,1)\n    );\n    for(int i = 0; i < 3; i++) {\n        d = dmin(d, Dist(\n            sdSphere(p - vec3(vec2(0.8,0) * rot(2.0 * float(i) + iTime),0).xzy, 0.5),\n            c[i])\n\t\t);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 xy = 2.0 * uv - 1.0;\n    xy.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = 0.2 * vec3(0.3,0.8,1.0);\n    \n   \tvec3 pos = vec3(\n        0.,//2.0 * iMouse.x / iResolution.x - 1.0,\n        2.,//2.0 * iMouse.y / iResolution.y - 1.0,\n        -1.8\n\t);\n    vec3 dir = normalize(vec3(0.5*xy, 1.0));\n    \n    dir.yz *= rot(0.9);\n    \n    vec3 light = normalize(vec3(1.9, 2.9, -0.8));\n    \n    vec3 glow = vec3(0);\n    \n    vec2 eps = vec2(0.0001, 0.0);\n\tfor(int i = 0; i < 32; i++) {\n        Dist d = sdf(pos);\n        if(d.d <= eps.x) {\n            vec3 n = normalize(vec3(\n                sdf(pos + eps.xyy).d - sdf(pos - eps.xyy).d,\n                sdf(pos + eps.yxy).d - sdf(pos - eps.yxy).d,\n                sdf(pos + eps.yyx).d - sdf(pos - eps.yyx).d\n            ));\n            \n            float l = clamp(dot(light, n), 0., 1.);\n            \n            l = pow(floor(16. * l) / 16., 2.0);\n            \n            col = vec3(0.2 + 0.8 * l) * d.color;\n         \tbreak;\n        }\n        else if(d.d < 0.3) {\n         \tglow += 5.0 * pow(2.5 * d.d,4.0) * d.color * float(i) / 31.0;\n        }\n        pos += d.d * dir;\n    }\n    \n    col += glow;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}