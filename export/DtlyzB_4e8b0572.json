{"ver":"0.1","info":{"id":"DtlyzB","date":"1690898225","viewed":45,"name":"CSellipse","username":"2243798719","description":"ellipse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 Black = vec4(0.,0.,0.,1.);\nconst vec4 White = vec4(1.,1.,1.,1.);\nconst vec4 Red = vec4(1.,0.,0.,1.);\nconst vec4 Green = vec4(0.,1.,0.,1.);\nconst vec4 Blue = vec4(0.,0.,1.,1.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Draw Grid\n    float row1 = iResolution.y/3.;\n    float row2 = iResolution.y/3.*2.;\n    float col1 = iResolution.x/3.;\n    float col2 = iResolution.x/3.*2.;\n    float thickness = 1.;\n    if(abs(fragCoord.x - col1) <= thickness) {fragColor = Black;}\n    if(abs(fragCoord.x - col2) <= thickness) {fragColor = Black;}\n    if(abs(fragCoord.y - row1) <= thickness) {fragColor = Black;}\n    if(abs(fragCoord.y - row2) <= thickness) {fragColor = Black;}\n    \n    //Draw Point\n    float factorX = 3.33;\n    float factorY = 5.77;\n    \n    const int PointCount = 20;\n    float PointSize = 3.;\n    vec4 PointColor = Green;\n    vec2 point[PointCount];\n    vec2 point_LSymmtry[PointCount];\n    vec2 point_RSymmtry[PointCount];\n    vec2 point_TSymmtry[PointCount];\n    vec2 point_BSymmtry[PointCount];\n    vec2 point_TLSymmtry[PointCount];\n    vec2 point_TRSymmtry[PointCount];\n    vec2 point_BLSymmtry[PointCount];\n    vec2 point_BRSymmtry[PointCount];\n    \n    for(int i = 0;i<PointCount;i++) {\n        point[i].x = hash_standardization(iResolution.x/3.,iResolution.x/3.*2.,float(i)+factorX);\n        point[i].y = hash_standardization(iResolution.y/3.,iResolution.y/3.*2.,float(i)+factorY);\n        point_LSymmtry[i].x = 2.*col1 - point[i].x;//L\n        point_LSymmtry[i].y = point[i].y;\n        point_RSymmtry[i].x = 2.*col2 - point[i].x;//R\n        point_RSymmtry[i].y = point[i].y;\n        point_TSymmtry[i].x = point[i].x;//T\n        point_TSymmtry[i].y = 2.*row2 - point[i].y;\n        point_BSymmtry[i].x = point[i].x;//B\n        point_BSymmtry[i].y = 2.*row1 - point[i].y;\n        point_TLSymmtry[i].x = 2.*col1 - point[i].x;//TL\n        point_TLSymmtry[i].y = 2.*row1 - point[i].y;\n        point_TRSymmtry[i].x = 2.*col2 - point[i].x;//TR\n        point_TRSymmtry[i].y = 2.*row2 - point[i].y;\n        point_BLSymmtry[i].x = 2.*col1 - point[i].x;//BL\n        point_BLSymmtry[i].y = 2.*row2 - point[i].y;\n        point_BRSymmtry[i].x = 2.*col2 - point[i].x;//BR\n        point_BRSymmtry[i].y = 2.*row1 - point[i].y;\n        \n        if(length(fragCoord - point[i]) < PointSize) {\n            fragColor = PointColor;\n        }\n        if(length(fragCoord - point_LSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_RSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_TSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_BSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_TLSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_TRSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_BLSymmtry[i]) < PointSize) {fragColor = Blue;}\n        if(length(fragCoord - point_BRSymmtry[i]) < PointSize) {fragColor = Blue;}\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return p;\n}\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nfloat hash_standardization(float min,float max,float factor) {\n    float t = abs(hash11(factor)) +1.;\n    while(t < min) {\n        t*=2.;\n    }\n    while(t > max) {\n        t/=2.;\n    }\n    while(t < min) {\n        t+=abs(fract(t));\n    }\n    while(t > max) {\n        t-=abs(fract(t));\n    }\n    return t;\n}\n","name":"Common","description":"","type":"common"}]}