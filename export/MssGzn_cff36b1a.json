{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Copyright (c) 2013 Andrew Baldwin (baldand)\r\n// License = Attribution-NonCommercial-ShareAlike (http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US)\r\n\r\n// \"Quadric #1\"\r\n// Ray traced evolving quadric surface modulated by the audio FFT\r\n\r\nconst mat4 quadric = mat4(-1.,0.,0.,0.,\r\n\t\t\t\t\t\t  0.,1.,0.,0.,\r\n\t\t\t\t\t\t  0.,0.,1.,0.,\r\n\t\t\t\t\t\t  0.,0.,0.,-.1);\r\n\r\nconst vec3 up = vec3(0.,1.,0.);\r\nconst vec3 boxPos = vec3(0.,0.,0.);\r\n\r\nvoid intersectbox(vec3 ro, vec3 rd, vec3 A, vec3 B, out float t0, out float t1)\r\n{\r\n    vec3 ir = 1.0/rd;\r\n    vec3 tb = ir * (A-ro);\r\n    vec3 tt = ir * (B-ro);\r\n    vec3 tn = min(tt, tb);\r\n    vec3 tx = max(tt, tb);\r\n    vec2 t = max(tn.xx, tn.yz);\r\n    t0 = max(t.x, t.y);\r\n    t = min(tx.xx, tx.yz);\r\n    t1 = min(t.x, t.y);\r\n}\r\n\r\nfloat intersect(vec3 ro, vec3 rd, out vec3 i, float scale)\r\n{\r\n\tfloat tb0,tb1;\r\n\tintersectbox(ro,rd,vec3(-scale),vec3(scale),tb0,tb1);\r\n\tfloat inbox = tb1-tb0;\r\n\tif (inbox<0.0) return inbox;\r\n\ti = ro + tb0*rd;\r\n\ttb1 -= tb0;\r\n\tmat4 sq = quadric;\r\n\tsq[0][0] = mix(-1.,1.,sin(iTime*.15));\r\n\tsq[1][1] = mix(-1.,1.,sin(iTime*.43));\r\n\tsq[2][2] = mix(-1.,1.,sin(iTime*.71));\r\n\tsq[3][3] = mix(.0,-1.,sin(iTime*.93));\r\n\tfloat fftx = 0.0;\r\n\tfloat fftxstep = 1./16.;\r\n\tfor (int x=0;x<4;x++) {\r\n\t\tfor (int y=0;y<4;y++) {\r\n\t\t\tsq[x][y] += 1.*texture(iChannel0,vec2(fftx,0.25)).x-.5;\r\n\t\t\tfftx += fftxstep;\r\n\t\t}\r\n\t}\r\n\tvec4 C = vec4(i,1.);\r\n\tvec4 AC = sq * C;\r\n\tvec4 D = vec4(rd,0.);\r\n\tvec4 AD = sq * D;\r\n    float a = dot(D,AD); \r\n    float b = dot(C,AD) + dot(D,AC);\r\n\tfloat c = dot(C,AC);\r\n    float d = b*b - 4.0*a*c;\r\n\tif (d>=0.0) {\r\n\t    float ds = sqrt(d);\r\n    \tfloat t0 = ((-b + ds)/(2.0*a));\r\n    \tfloat t1 = ((-b - ds)/(2.0*a));\r\n    \tfloat tx = max(t1,t0);\r\n    \tfloat tn = min(t1,t0);\r\n\t\tif (tn<0.) tn=tx;\r\n\t\tif (tn<0.) { d=-0.01; tn=tb1;}\r\n\t\tif (tn>tb1) { d=-0.01; tn=tb1;}\r\n\t\ti = (C + tn * D).xyz;\r\n\t}\r\n\treturn d;\r\n}\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n\tfloat radius = sin(iTime*.1)*2.+4.;\r\n\tvec3 eye = vec3(radius*sin(iTime),1.*sin(.1*iTime),radius*cos(iTime));\r\n\tvec3 screen = vec3((radius-1.)*sin(iTime),.5*sin(.1*iTime),(radius-1.)*cos(iTime));\r\n    vec2 screenSize = vec2(iResolution.x/iResolution.y,1.0);\r\n\tvec2 uv = fragCoord.xy / iResolution.xy;\r\n\tvec2 offset = screenSize * (uv - 0.5);\r\n\tvec3 right = cross(up,normalize(screen - eye));\r\n\tvec3 ro = screen + offset.y*up + offset.x*right;\r\n\tvec3 rd = normalize(ro - eye);\r\n\tvec3 i = vec3(0.);\r\n\tfloat d = intersect(ro-boxPos,rd,i,radius*.5);\r\n\tfloat w = texture(iChannel0,vec2(fract(.1*(i.z+i.x+i.y)),0.25)).x;\r\n\tfragColor = vec4(step(0.,d)*vec3(w)*vec3(abs(i)),1.0);\r\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MssGzn","date":"1361877095","viewed":540,"name":"Quadric #1","username":"baldand","description":"Ray traced evolving quadric surface in a box. Modulated and coloured by the audio FFT","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","quadrics"],"hasliked":0,"parentid":"","parentname":""}}