{"ver":"0.1","info":{"id":"wsfXDl","date":"1552501702","viewed":437,"name":"Very simple Saturn rings","username":"Nomad1","description":"Very simple shader for Saturn-style rings from 2D texture. Only several first columns are taken from the texture. Central gap is made with formulae, but I'd recommend to have it in texture.\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["space","saturn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /**** This part is specific for ShaderToy, not needed in GLSL shader ****/\n     \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.y;\n\n    /**** Universal GLSL shader part ****/\n    // normalize and center uv\n    uv -= 0.5;\n    uv *= 2.0;\n   \n    // calculate polar r coord and saturate it\n    float r = length(uv);\n    \n    // constant to determine the size of central gap and inner circle radius\n    const float center = 0.4;\n   \n    // here we're calculating an angle to simulate a rotation\n    float angle = atan(uv.y, uv.x)+ iTime;\n    \n    float vlength = (r - center)/(1.0 - center);\n    \n    // Output to screen from 2D texture. U coord is animated and \n    \n    fragColor = texture( iChannel0, vec2((sin(angle) + 1.0) / (iChannelResolution[0].x * 0.1), vlength))\n        * step(0.01, vlength) * step(vlength, 0.99);\n}","name":"Image","description":"","type":"image"}]}