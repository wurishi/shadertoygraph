{"ver":"0.1","info":{"id":"dsyXRm","date":"1681207842","viewed":90,"name":"WS 5 : Balls Structure","username":"LoganOracio","description":"A structure of balls going up and down","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["ballsraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0,uv).xyz;\n    \n    col *= vec3(0.95,1.05,1.05)+vec3(0.0,0.0,0.02);\n    fragColor = vec4(col,1.0);\n}\n/*\n\nWEEKLY SHADER 5\n\nSorry for the poor perf on low end PC I think it's the bloom xD, tried rendering strings that should be holding the balls but it made the perfs even worse and wasn't adding very much.\nIf you can make a pretty structure I'd be curious to see\n\n\n*/","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BLUR 20.0\nconst float inv_sqrt_2pi = 0.3989422804014327;\nfloat gaussianf(float sigma, float dist)\n{\n    float a = dist / sigma;\n    return (inv_sqrt_2pi / sigma ) * exp( -0.5 * a * a );\n}\nvec4 fast_gaussian_blur(sampler2D image, vec2 uv,vec2 resolution, vec2 direction, float blur)\n{\n    vec4 color = vec4(0.0);\n    float coef = gaussianf(blur,0.0);\n    color += texture(image, uv) * coef;\n    float kernel_s = blur * 4.0;\n    //removed precomputing weights by onehade\n    float prev = gaussianf(blur, 0.0);\n    for (float i = 0.0; i < kernel_s; i++) {\n        float w1 = prev; \n        float w2 = gaussianf(blur, i + 1.0);\n        prev = w2; //storing redudant weight for next loop\n        float c = w1 + w2;\n        vec2 off1 = vec2((i * w1 + (i + 1.0) * w2) / c) * direction / resolution;\n        color += texture(image, uv + off1 ) * c;\n        color += texture(image, uv - off1 ) * c;\n        coef += c + c;\n    }\n\n    return color/coef;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_RAY_LENGTH  20.0\n#define MAX_RAY_MARCHES 100\n#define TOLERANCE       0.001\n#define NORM_OFF        0.005\n\n#define SPHERE_SIZE 0.2\n\nint g_hit     = 0;\nint g_period  = 0;\n\nconst float raymarchFactor = 0.8;\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat df(vec3 p) {\n  float len = 1000.0;\n  for(int i = -6; i < 7; i++)\n  {\n      for(int j = -3; j < 3; j++)\n      {\n          vec3 z = p+vec3(float(i),2.0*(cos(iTime+float(i)/3.0+float(j)/4.2)),float(j));\n          len = min(len,(length(z)-SPHERE_SIZE)); \n      }\n  }\n  return len;\n}\n\nvec3 thin_film_interference(float fresnel)\n{\n    fresnel = mod(fresnel,1.0);\n    if(fresnel<0.333)\n    {\n        return mix(vec3(0.0,1.0,1.0),vec3(1.0,0.0,1.0),fresnel*3.0);\n    }\n    else if(fresnel<0.666)\n    {\n        return mix(vec3(1.0,0.0,1.0),vec3(1.0,1.0,0.0),(fresnel-0.333)*3.0);\n    }\n    else\n    {\n        return mix(vec3(1.0,1.0,0.0),vec3(0.0,1.0,1.0),(fresnel-0.666)*3.0);\n    }\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float ti) {\n  float t = ti;\n  int i = 0;\n  vec2 dti = vec2(1e10,0.0);\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    if (d<dti.x) { dti=vec2(d,t); }\n    t += raymarchFactor*d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; }\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 render(vec2 p) {\n  \n  vec3 ro = vec3(cos(iTime*.4+iMouse.x/iResolution.x*7.0)*11.0, 0.0, sin(iTime*.4+iMouse.x/iResolution.x*7.0)*8.0);\n  vec3 la = vec3(0.0, 0.0, 0.0);\n  vec3 ww = normalize(la-ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  const float fov = 1.8;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww );\n  \n  g_hit = -1;\n  float t = rayMarch(ro, rd, 1.0);\n  int hit = g_hit;\n  \n  vec3 col = texture(iChannel0,rd).xyz;\n  if (t < MAX_RAY_LENGTH) {\n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    vec3 ld= normalize(vec3(-5.0,10.0,-10.0)-p);\n    \n    vec3 fresnel = mix(vec3(0.65,0.65,0.7),vec3(1.0),pow(1.0-abs(dot(n,rd)),0.5));\n    float dif = max(dot(ld, n), 0.0);\n    col = fresnel*mix(thin_film_interference(2.3*pow(1.0-abs(dot(n,rd)),0.1)),vec3(1.2),0.8)*texture(iChannel1,r).xyz+dif*0.2;\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    vec3 col = render(uv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0,uv).xyz;\n    col = max(col.r,col.g)>.9?col:vec3(0.0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//BLUR X\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(1.0,0.0),BLUR).xyz;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec2 aberation(vec2 uv,float f)\n{\n    uv -= .5;\n    uv = vec2(length(uv),atan(uv.y,uv.x));\n    uv.x -= f*pow(uv.x,2.0);\n    uv.x *= 1.125;\n    uv = uv.x*vec2(cos(uv.y),sin(uv.y));\n    uv += .5;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord/iResolution.xy;\n    vec2 uv = aberation(UV,0.2);\n    vec3 col;\n    if(iFrame%10000==0) // Some black dots seem to appear after some time, probably a division by zero that pushes a NaN value on the buffer, I quickfixed it by clearing the buffer every 10000 frame\n    {\n        col.x = texture(iChannel0,uv).x;\n        uv = aberation(UV,0.215);\n        col.g = texture(iChannel0,uv).y;\n        uv = aberation(UV,0.23);\n        col.b = texture(iChannel0,uv).z;\n    }\n    else\n    {\n        col = mix(texture(iChannel0,uv).xyz,texture(iChannel2,fragCoord/iResolution.xy).xyz,0.2);\n        uv = aberation(UV,0.215);\n        col.g = mix(texture(iChannel0,uv).xyz,texture(iChannel2,fragCoord/iResolution.xy).xyz,0.2).g;\n        uv = aberation(UV,0.23);\n        col.b = mix(texture(iChannel0,uv).xyz,texture(iChannel2,fragCoord/iResolution.xy).xyz,0.2).b;\n    }\n    \n    col += 1.5*fast_gaussian_blur(iChannel1,uv,iResolution.xy,vec2(0.0,1.0),BLUR).xyz;\n    fragColor = vec4(col,1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}