{"ver":"0.1","info":{"id":"dtsfRr","date":"1692555080","viewed":182,"name":"Easy Interactive Ripples","username":"emymin","description":"Simple implementation of 2D interactive ripples","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["2d","water","ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 checkerboard(vec2 uv){\n    uv.x*=iResolution.x/iResolution.y;\n    vec2 id = floor(uv*10.);\n    return mix(vec3(0.156,0.156,0.156),vec3(0.921,0.858,0.698),mod(id.x+id.y,2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 wave = texture(iChannel0,uv).xy; //ripple simulation is in Buffer A\n    \n    vec2 d = vec2(dFdx(wave.x),dFdy(wave.y));\n    float highlight = smoothstep(0.,.2,5.*dot(d,vec2(1.,-1.))); //tiny bit of lighting\n\n    fragColor = vec4(vec3(checkerboard(uv+wave)+highlight),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//simple GLSL implementation of interactive 2D water ripple effect from\n//https://web.archive.org/web/20160607052007/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\n#define STRENGTH 1.0\n#define DAMPENING 0.99\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 offset = vec2(dFdx(uv.x),dFdy(uv.y)); //size of pixels in UV space\n\n    float new = 0.;\n    float prev = texture(iChannel0, uv).r; //previous step, stored in r\n    float prev_prev = texture(iChannel0,uv).g; //previous previous step, stored in g\n    \n    //set mouse for interactivity\n    vec4 m = iMouse;\n    m.xy = m.xy/iResolution.xy;\n    if(m.z>0.0){\n        new = smoothstep(.01, 0., length(m.xy-uv)) * STRENGTH;\n    }\n        \n    //spread\n    new += texture(iChannel0,vec2(uv.x-offset.x,uv.y)).r + \\\n           texture(iChannel0,vec2(uv.x+offset.x,uv.y)).r + \\\n           texture(iChannel0,vec2(uv.x,uv.y-offset.y)).r + \\\n           texture(iChannel0,vec2(uv.x,uv.y+offset.y)).r - 2.;\n    //velocity\n    new = new - (prev_prev-.5)*2.;\n    //dampening;\n    new*=DAMPENING;\n    //clean at startup\n    new*=smoothstep(0.,1.,float(iFrame>=60));\n    //normalize\n    new = new * 0.5 + 0.5;\n    \n    fragColor = vec4(new,prev,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}