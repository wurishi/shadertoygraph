{"ver":"0.1","info":{"id":"wtjBRD","date":"1598586655","viewed":240,"name":"Simple game of life","username":"Aurocosh","description":"Implementation of Conway's game of life. Draw with your mouse to create new cells. You can randomize entire field by pressing space bar.","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 coord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = coord/iResolution.xy;\n    vec4 value = getValue(coord);\n    \n    // Output to screen\n    fragColor = value.yzzz;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool isKeyPressed(int key) {\n    return texelFetch( iChannel1, ivec2(key, 1),0).x == 1.0;\n}\n\n//noise function from https://www.shadertoy.com/view/ltB3zD\nconst float PHI = 1.61803398874989484820459; // Î¦ = Golden Ratio \nfloat gold_noise(in vec2 xy, in float seed)\n{\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 coord)\n{\n    vec4 value = getValue(coord);\n    \n    // Count living neighbours\n    vec4 pX = getValue(coord + vec2(1,0));\n    vec4 pXpY = getValue(coord + vec2(1,1));\n    \n    vec4 pY = getValue(coord + vec2(0,1));\n    vec4 nXpY = getValue(coord + vec2(-1,1));\n    \n    vec4 nX = getValue(coord + vec2(-1,0));\n    vec4 nXnY = getValue(coord + vec2(-1,-1));\n    \n    vec4 nY = getValue(coord + vec2(0,-1));\n    vec4 pXnY = getValue(coord + vec2(1,-1));\n    \n    float sum = pX.x + pXpY.x + pY.x + nXpY.x + nX.x + nXnY.x + nY.x + pXnY.x;\n    \n    // Kill or create new cell depending on neighbour count\n    float res = value.x;\n    float fade = value.z;\n    if(sum > 3.0 || sum < 2.0)\n    {\n        res = 0.0;\n    }\n    else if(sum > 2.0 && res != 1.0)\n    {\n        res = 1.0;\n        fade = 1.0;\n    }\n    \n    // Draw new cells with mouse\n    if(iMouse.z > 0. && length(coord - iMouse.xy) < 8.0)\n        res = 1.0;\n    \n    // Randomize whole field if space bar is pressed\n    if(isKeyPressed(32))\n        res = round(gold_noise(coord, fract(iTime)));\n    \n    // Static cell color calculation. Static cells fade in color over time.\n    fade = max(0.4, fade - 0.0015);\n    fade = min(fade,res);\n    \n    // Color of fading trail left behind by dead cells\n    float trail = value.y;\n    trail -= 0.005;\n    trail = max(trail, fade);\n     \n    fragColor = vec4(res, trail, fade,0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define getValue(Coord) texture(iChannel0,(Coord)/iResolution.xy)","name":"Common","description":"","type":"common"}]}