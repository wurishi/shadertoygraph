{"ver":"0.1","info":{"id":"flVfDK","date":"1665265183","viewed":120,"name":"Artober - Pool","username":"Flopine","description":"Day 8 of artober, an everyday challenge I make with shaders :D Trying new patterns ! Those octagons tiles are pure fake though XD ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","truchet","pattern","everyday","octagons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define noise(u) textureLod(iChannel0, u , 0.).x\n// found in Shane's shader : https://www.shadertoy.com/view/wdBSRm\n#define oct(u,s) (max((abs(uv.y) + abs(uv.x))/sqrt(2.), max(abs(uv.x), abs(uv.y)))-s)\n#define circle(u,s) (length(u)-s)\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.02,fwidth(val-thre)))\n\n\nvec3 truchet (vec2 uv) \n{\n    float w = sin(length(uv*.8)-iTime)*.05+.03;    \n    vec2 id = floor(uv);\n    \n    if (noise(id*.17)<.5) uv.x *= -1.;\n    uv = fract(uv)-.5;\n    vec2 uu = uv;\n    \n    float o = AAstep(0.01, oct(uv, 0.5)), \n    s = (uv.x > -uv.y) ? 1.:-1.;\n    uv -= vec2(0.48,0.2)*s;\n    float d = max( o, AAstep(w, abs(circle(uv, 0.2))) );\n    \n    uv = uu;\n    s = (-uv.y > -uv.x) ? 1.: -1.;\n    uv -= vec2(0.2,-0.48)*s;\n    d *= max( o, AAstep(w, abs(circle(uv, 0.2))) );\n    \n    uv = uu;\n    uv = abs(uv);\n    uv -= vec2(0.5, 0.215);\n    d *= max(1.-o, AAstep(w, abs(circle(uv, 0.2))) );\n    \n    return vec3(d);\n}\n\nvec3 ground (vec2 uv)\n{\n    uv = fract(uv)-.5;\n    float d = AAstep( 0.015, abs(oct(uv, 0.5)) );\n    return mix(vec3(0.,1.,1.),vec3(0., 0.4, 0.8),d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float dit = texture(iChannel1, fragCoord.xy/4.).r;\n    float detail = 4.;\n    uv *= 3.;\n    uv += dit/detail;\n    \n    vec3 col = truchet(uv)*ground(uv);    \n    col = floor(col*detail)/detail;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}