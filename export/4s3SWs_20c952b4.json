{"ver":"0.1","info":{"id":"4s3SWs","date":"1461985789","viewed":858,"name":"TheBadOmen","username":"richm","description":"theme is good versus evil","likes":19,"published":3,"flags":64,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lsf3zs","filepath":"https://soundcloud.com/gurkanizmirligil/your-bedtime-story-is-scaring","previewfilepath":"https://soundcloud.com/gurkanizmirligil/your-bedtime-story-is-scaring","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* richm may 2016 */\n\nmat2 rot(float t)\n{\n\treturn mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat pentagram(vec3 p)\n{\n    float d = 0.0;\n    float fp = 1.0;\n    mat2 rm = rot(6.283185 / 5.0 * 3.0);\n    vec2 pa = vec2(1.0, 0.0);\n    vec2 pb = pa * rm * rm;\n    for (int i = 0; i < 5; ++i) {\n        vec2 del = normalize(pa - pb);\n        mat2 xfm = mat2(del.x, del.y, -del.y, del.x);\n        vec2 q = p.xz * xfm;\n        float r = max(abs(q.x - 0.75) - 0.0125, abs(q.y) - 2.0);\n        d = min(d, r);\n        d = mix(d, r, fp);\n        pa *= rm;\n        pb *= rm;\n        fp = 0.0;\n    }\n    float c = length(p.xz);\n    c = max(c - 2.25, 2.2 - c);\n    d = min(d, c);\n    return d;\n}\n\nfloat mapmat = 0.0;\nfloat mapdel = 0.0;\nvec2 maptex = vec2(0.0);\n\nfloat map(vec3 p)\n{\n    mapmat = 0.0;\n    mapdel = 0.0;\n    \n\tfloat d = 2.0 + p.y;\n    float pen = pentagram(p);\n    mapdel = abs(d - pen);\n    if (pen < d) {\n        d = max(pen, d);\n        mapmat = 1.0;\n    }\n    \n    float room = -sdBox(p, vec3(6.0, 8.0, 6.0));\n    if (room < d) {\n        d = min(d, room);\n        mapmat = 2.0;\n    }\n    \n    vec3 q = p;\n    q.xz = abs(q.xz);\n    q.xz = q.xz - vec2(3.0, 4.0);\n    q.xz *= rot(3.14159 * 0.25);\n    float mbox = sdBox(q, vec3(0.1, 3.0, 2.0));\n    if (mbox < d) {\n        d = mbox;\n        mapmat = 3.0;\n        maptex = 1.0 - q.zy * 2.0;\n    }\n    \n    vec3 wp = p - vec3(-5.0, 2.0, 0.0);\n    float wbox = sdBox(wp, vec3(5.25, 1.5, 0.2));\n    if (-wbox > d) {\n        d = max(d, -wbox);\n        mapmat = -1.0;\n    }\n    \n    wp = p - vec3(-5.0, 2.6, 0.0);\n    wbox = sdBox(wp, vec3(5.25, 0.2, 1.0));\n    if (-wbox > d) {\n        d = max(d, -wbox);\n        mapmat = -1.0;\n    }\n    \n    wp = p - vec3(4.0, -2.0, 0.0);\n    wbox = sdBox(wp, vec3(0.05, 1.0, 0.05));\n    if (wbox < d) {\n        d = min(d, wbox);\n        mapmat = -2.0;\n    }\n    \n    wp = p - vec3(4.0, -1.3, 0.0);\n    wbox = sdBox(wp, vec3(0.05, 0.05, 0.25));\n    if (wbox < d) {\n        d = min(d, wbox);\n        mapmat = -2.0;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 o = vec3(0.00001, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d;\n    }\n    return t;\n}\n\nvec3 blood(vec3 p, vec3 r, float mat, float del)\n{\n    vec3 tex = texture(iChannel0, p.xz * 0.25).xyz;\n    float spt = tex.x;\n    spt = spt * 2.0 - 1.0;\n    spt = sin(spt * 3.14159 * 5.0);\n    tex *= tex;\n    \n    vec3 from = vec3(0.8, 0.2, 0.1);\n    vec3 to = vec3(1.0, 1.0, 1.0);\n\n    float mdp = 1.0 - pow(1.0 - min(del,0.5), 8.0);\n    mdp = mix(mdp, 0.0, mat);\n    float prod = max(-r.y, 0.0);\n    float bld = 1.0 - 1.0 / (1.1 + mdp + spt);\n    bld = mix(1.0, bld, 1.0-mdp);\n    tex = vec3(pow(1.0 - tex.x, 1.0));\n    return tex * mix(from, vec3(1.0), bld);\n}\n\nvec3 texture_(vec3 p)\n{\n\tvec3 ta = texture(iChannel0, p.yz).yyy;\n\tvec3 tb = texture(iChannel0, p.xz).yyy;\n\tvec3 tc = texture(iChannel0, p.xy).yyy;\n    return (ta*ta + tb*tb + tc*tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.33));\n    r.yz *= rot(-1.57 * 0.05);\n    r.xz *= rot(iTime * 0.5);\n    vec3 o = vec3(0.0, 0.0, -3.0);\n    o.xz *= rot(iTime * 0.5);\n    \n    vec3 fc = vec3(1.0);\n    float ft = 0.0;\n    \n    vec3 lpos = vec3(-2.0, 1.5, 0.0);\n    \n    for (int i = 0; i < 8; ++i) {\n    \n        float t = trace(o, r);\n        ft += t;\n        vec3 w = o + r * t;\n        vec3 sn = normal(w);\n        float fog = 1.0 / (1.0 + ft * ft * 0.05);\n        \n        vec3 ldel = w + sn * 0.01 - lpos;\n        float ldist = length(ldel);\n        ldel /= ldist;\n        vec3 lit = vec3(1.0) / (1.0 + ldist * ldist * 0.01);\n        \n        if (mapmat < 3.0) {\n            float premat = mapmat;\n            float predel = mapdel;\n            float lt = trace(lpos, ldel);\n            float lm = max(sign(lt - ldist), 0.0);\n            lit *= lm * max(dot(sn, -ldel), 0.0);\n            lit *= fog;\n            if (premat < 2.0) {\n                if (premat == -1.0) {\n                    fc *= vec3(1.0);\n                } else if (premat == -2.0) {\n                    fc *= texture_(w * 0.125) * lit * 4.0;\n                } else {\n                \tfc *= blood(w, r, premat, predel) * lit;\n                }\n            } else {\n                fc *= texture_(w * 0.125) * lit;\n            }\n            break;\n        }\n\n        vec3 dirt = texture(iChannel0, maptex * 0.125).xyz;\n        float fres = abs(dot(r, -sn));\n        float fade = 1.0 - float(i) / 7.0;\n        fc = mix(fc, vec3(dirt), fres) * lit * fade;\n        \n        o = w + sn * 0.01;\n        r = reflect(r, sn);\n    }\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}