{"ver":"0.1","info":{"id":"ftlyR8","date":"1647854466","viewed":255,"name":"Blendmodes","username":"Moloko","description":"Allows to blend one layer to another like in Ps. Also you can set opacity like in Ps","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["screen","softlight","blendmode","multiply"],"hasliked":0,"parentid":"slfczn","parentname":"Screen blendmode"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n//Multiply\nvec3 multiply (vec3 base, vec3 bl_layer){\n    return base*bl_layer;\n}\n\n//Screen\nvec3 screen(vec3 base, vec3 bl_layer){\n    return base + bl_layer - base * bl_layer;\n}\n\n//SoftLight Uses a combination of the Screen blend mode on the lighter pixels, and the Multiply blend mode on the darker pixels (a half-strength application of both modes). Similar to the Overlay blend mode, but results in a more organic effect that is softer—results in somewhat transparent highlights and shadows.\nvec3 softLight(vec3 base, vec3 bl_layer){\n    vec3 temp_result;\n        if (bl_layer.r < 0.5)\n            temp_result.r = 2.0*base.r*bl_layer.r + base.r*base.r*(1.0 - 2.0*bl_layer.r);\n        else\n            temp_result.r = 2.0*base.r*(1.0-bl_layer.r) + sqrt(base.r)*(2.0*bl_layer.r - 1.0);\n        if (bl_layer.g < 0.5)\n            temp_result.g = 2.0*base.g*bl_layer.g + base.g*base.g*(1.0 - 2.0*bl_layer.g);\n        else\n            temp_result.g = 2.0*base.g*(1.0-bl_layer.g) + sqrt(base.g)*(2.0*bl_layer.g - 1.0);\n        if (bl_layer.b < 0.5)\n            temp_result.b = 2.0*base.b*bl_layer.b + base.b*base.b*(1.0 - 2.0*bl_layer.b);\n        else\n            temp_result.b = 2.0*base.b*(1.0-bl_layer.b) + sqrt(base.b)*(2.0*bl_layer.b - 1.0);\n        \n    return temp_result;\n    \n}\n\n//HardLight \nvec3 hardLight(vec3 base, vec3 bl_layer){\n    vec3 temp_result;\n        if (bl_layer.r < 0.5)\n            temp_result.r = 2.0 * base.r * bl_layer.r;\n        else\n            temp_result.r = 1.0 - 2.0 * (1.0 - base.r) * (1.0 - bl_layer.r);\n        if (bl_layer.g < 0.5)\n            temp_result.g = 2.0 * base.g * bl_layer.g;\n        else\n            temp_result.g = 1.0 - 2.0 * (1.0 - base.g) * (1.0 - bl_layer.g);\n        if (bl_layer.b < 0.5)\n            temp_result.b = 2.0 * base.b * bl_layer.b;\n        else\n            temp_result.b = 1.0 - 2.0 * (1.0 - base.b) * (1.0 - bl_layer.b);\n    return temp_result;\n}\n\n\n//Linear Dodge\nvec3 linearDodge(vec3 base, vec3 bl_layer){\n    return base + bl_layer;\n\n}\n\n// Linear Burn Darker than Multiply, but less saturated than Color Burn. This is one of the “Special 8” that I mentioned earlier, where Fill and Opacity behave differently. Math: A+B−1 (Active Layer plus Background Layer, then white is subtracted from the sum (an inversion).\n\n//Overlay\nvec3 overlay(vec3 base, vec3 bl_layer){\n    vec3 temp_result;\n        if (base.r < 0.5)\n            temp_result.r = 2.0 * base.r * bl_layer.r;\n        else\n            temp_result.r = 1.0 - 2.0 * (1.0 - base.r) * (1.0 - bl_layer.r);\n        if (base.g < 0.5)\n            temp_result.g = 2.0 * base.g * bl_layer.g;\n        else\n            temp_result.g = 1.0 - 2.0 * (1.0 - base.g) * (1.0 - bl_layer.g);\n        if (base.b < 0.5)\n            temp_result.b = 2.0 * base.b * bl_layer.b;\n        else\n            temp_result.b = 1.0 - 2.0 * (1.0 - base.b) * (1.0 - bl_layer.b);\n    return temp_result;\n}\n\n\n\n\n//Opacity function    \nvec4 opacity(float alpha, vec4 texColor, vec4 blendResult){\n    return ((1.0 - alpha) * texColor + alpha * blendResult);\n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // input from camera\n    vec4 texColor = texture(iChannel0, uv);\n    vec4 layer = texture(iChannel1, uv);\n    //vec4 layer = vec4 (0.5,0.5,0.5,1.0);//solidGrey for tests\n    //vec4 layer = vec4 (0.0,0.0,0.0,1.0);//solidBlack for tests\n    //vec4 layer = vec4 (1.0,1.0,1.0,1.0);//solidWhite fro tests\n    \n    \n    //Change Blendmode here<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n    vec4 blendResult = vec4 (screen(texColor.rgb, layer.rgb), 1.0);\n    \n    // Change to 0.0 - 1.0 to set opacity of a blending layer<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n    float alpha = 1.0;\n\n\n    fragColor = opacity (alpha, texColor, blendResult);\n\n\n}\n","name":"Image","description":"","type":"image"}]}