{"ver":"0.1","info":{"id":"wtKGDK","date":"1580966019","viewed":443,"name":"Koi Fish","username":"Hec","description":"Made this for a lil art jam","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","fish"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359f\n#define PI2 6.28318530718f\n\nconst int FISH_COUNT = 12;\nconst float INV_FISH_COUNT = 1.0f / float(FISH_COUNT);\nconst vec3 BASE_COLOR = vec3(1.0f, 1.0f, 1.0f);\nconst vec4 BACKGROUND_COLOR = vec4(0.0f, 0.5f, 0.7f, 0.0f);\n\n\nstruct FishData\n{\n\tvec4  color;\n    float sdf;\n};\n\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat nsin(float a)\n{\n\treturn sin(a) * 0.5f + 0.5f;\n}\n\nfloat osin(float a)\n{\n\treturn (max(-0.3f, sin(a)) + 0.4f) / 1.4f;\n}\n\nfloat st(float sdf, float scale)\n{\n\tfloat w = (1.0f / iResolution.y) * scale;\n\treturn smoothstep(w, 0.0f, sdf);\n}\n\nfloat st(float sdf)\n{\n\tfloat w = (1.0f / iResolution.y) * 1.6f;\n\treturn smoothstep(w, 0.0f, sdf);\n}\n\nfloat circle(vec2 uv, float radius)\n{\n\treturn length(uv) - radius; \n}\n\nfloat edge(vec2 uv, vec2 a, vec2 b, vec2 center)\n{    \n    vec2 ab = normalize(b - a);\n    vec2 normal = vec2(ab.y, -ab.x);\n    vec2 middle =  a + ab * distance(a, b) * 0.5f;\n    vec2 cm = normalize(middle - center);\n    \n    float flip = dot(normal, normalize(cm));\n    float angle = atan(ab.y, ab.x);\n    \n    float x = cos(angle);\n    float y = sin(angle);\n    \n    uv = (uv - middle) * mat2(x, y, y, -x);\n    \n    return uv.y * -flip;\n}\n\n\nfloat triangle(vec2 uv, vec2 a, vec2 b, vec2 c, float roundness)\n{    \n    vec2 center = (a + b + c) * 0.3333333f;\n    \n\tfloat edge1 = edge(uv, a, b, center);\n    float edge2 = edge(uv, b, c, center);\n    float edge3 = edge(uv, c, a, center);\n    \n    return smin(edge1, smin(edge2, edge3, roundness), roundness) * -1.0f;\n}\n\nfloat circlePattern(vec2 uv, vec2 a, vec2 b, int count, float rOffset)\n{\n    float invCount = 1.0f / float(count);\n    \n    float maxSize = 0.03f;\n    float minSize = 0.01f;\n    \n    float maxOffset =  0.04f;\n    float minOffset = -0.04f;\n    \n    float maxRound = 0.03f;\n    float minRound = 0.0f;\n    \n    float dist = distance(a, b);\n    \n    vec2 ab = normalize(b - a);\n    \n    vec2 right = vec2(ab.y, -ab.x);\n    \n    float sdf = 1.0f;\n    \n    for(int i = 0; i < count; ++i)\n    {\n        float alpha = float(i) * invCount;\n    \tfloat rand = texture(iChannel0, vec2(alpha + rOffset)).r;\n        \n\t\tfloat size   = mix(minSize,   maxSize,   rand);\n        float offset = mix(minOffset, maxOffset, rand);\n        float roundness = mix(minRound, maxRound, rand);\n\n        \n        vec2 p = a + ab * dist * alpha + right * offset;\n        \n        sdf = smin(sdf, circle(uv - p, size), roundness);\n        \n    }\n    \n    return (sdf);\n}\n\nFishData fish(vec2 uv, float size, float depth, float rand)\n{    \n    \n    float x = uv.x * 6.0f;\n    uv.y += sin(x - iTime) * 0.015f;\n    \n    float roundness = size * 0.2f;\n    \n    // Tail ----------------\n    \n    float tailW = size * 3.f;\n    \n    float tailMinHeight = size * 0.1f;\n    float tailMaxHeight = size * 0.7f;\n    \n    float tailH1 =  mix(tailMinHeight, tailMaxHeight, osin(x - iTime));\n    float tailH2 = -mix(tailMinHeight, tailMaxHeight, osin(x - iTime + PI));\n      \n    float tail = triangle(uv, vec2(0.0f), vec2(tailW, tailH1), vec2(tailW, tailH2), roundness);\n    \t\n    \n    // Fins ----------------\n    \n    float finSize = size * 1.5f;\n    \n    float finMoveR = mix(0.0f, size * 0.3f, nsin(x - iTime));\n    float finMoveL = mix(0.0f, size * 0.3f, nsin(x - iTime + PI * 0.8f));\n    \n    float fins = triangle(uv, vec2(-finSize, 0.0f), vec2(finMoveR, finSize), vec2(finMoveL, -finSize), roundness);\n    \n    // Eyes ----------------\n    \n    float eyeRadius = size * 0.1f;\n    float eyeX = size * 1.6f;\n    float eyeY = size * 0.7f;\n    \n    float eyeR = circle(uv + vec2(eyeX,  eyeY), eyeRadius);\n    float eyeL = circle(uv + vec2(eyeX, -eyeY), eyeRadius);\n    \n    float eyes =  st(-min(eyeR, eyeL), 0.5);\n    \n    // Body ----------------\n    \n    uv.y = uv.y * (uv.x + 0.6f) * 2.0f;\n    uv.x *= 0.5f;\n        \n\tfloat body = circle(uv, size);\n    \n    \n    float sdf = smin(body, tail, roundness);\n\tsdf = min(sdf, eyes);\t\n    float bte = sdf;\n        \n    sdf =  smin(sdf, fins, roundness);\n    \n    float mask = st(sdf);\n    float finsMask = (mask - st(bte));\n    float bodyMask = st(body);\n    \n    float patternMask = circlePattern(vec2(uv.x * 1.6f, uv.y), vec2(0.05f, rand * 0.1f), vec2(-0.2f, -rand * 0.1f), 5, rand);\n    \n    patternMask = smin(patternMask, circlePattern( vec2(uv.x * 1.6f, uv.y), vec2(rand * 0.1f, -0.1f), vec2(-rand * 0.2f, 0.1f), 10, rand), 0.03f);\n\tpatternMask = st(patternMask, 1.0f);\n\n    vec3 eyeColor  = vec3(0.0f);\n    vec3 bodyColor = mask * BASE_COLOR;\n    vec3 patternColor = vec3(1.0f,  rand * 0.5f, 0.0f);\n    vec3 finColor  = patternColor * 0.2f + 0.7f;\n\n    \n    bodyColor = mix(bodyColor, patternColor, min(patternMask, bodyMask ));\n\n    \n    \n   \tvec3 color = mix(bodyColor, finColor, finsMask);\n    color = mix(eyeColor, color, eyes);\n\n    \n    color.rgb = mix(BACKGROUND_COLOR.rgb, color.rgb, depth);\n\n    return FishData(vec4(color, mask), sdf); \n}\n\nFishData movingFish(vec2 uv, float speed, float rotation, float scale, float depth, float rand)\n{\n       \n    float time = iTime * speed;\n    \n    float x = cos(rotation);\n    float y = sin(rotation);\n    \n    uv *= mat2(x, y, y, -x); \n    uv = (fract(uv + vec2(time * 0.025f, sin(time) * 0.001f + 0.5f)) - 0.5) * scale;\n    \n    \n    return fish(uv, 0.1f, depth, rand);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.y /= iResolution.x / iResolution.y;    \n    \n    float mask = 1.0f; \n    \n    float maxSize = 2.0f;\n    float minSize = 3.5f;\n    \n    float maxSpeed = 2.5f;\n    float minSpeed = 0.5f;\n    \n    float maxOffset = 0.3f;\n    float minOffset = -0.3f;\n    \n    float minDepth = 0.5f;\n    float maxDepth = 0.9f;\n    \n    vec4 color = BACKGROUND_COLOR;\n    \n    float flip = -1.0f;\n    \n    for(int i = 0; i < FISH_COUNT; ++i)\n    {\n        flip *= -1.0f;\n        \n    \tfloat alpha = float(i) * INV_FISH_COUNT;\n        float rand = texture(iChannel0, vec2(alpha)).r;\n        \n        float speed  = mix(minSpeed, maxSpeed, alpha);\n        float size   = mix(minSize, maxSize, alpha);\n        float rot    = mix(PI2, 0.0f, alpha) * flip;\n        float offset = mix(minOffset, maxOffset, rand) * flip;\n        float depth  = mix(minDepth, maxDepth, alpha);\n        \n        FishData fish = movingFish(uv + offset, speed, rot, size, depth, rand);\n        \n                \n        float fishShadow = smoothstep(0.013f, 0.0f, fish.sdf);\n        \n        color.rgb = mix(color.rgb, vec3(0.0f), fishShadow * color.a * 0.2f);\n        color.rgb = mix(color.rgb, fish.color.rgb, fish.color.a);\n        \n        color.a = max(fish.color.a, color.a);\n    }\n   \n\n    fragColor = vec4(color.rgb, 1.0f);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}