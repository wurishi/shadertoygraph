{"ver":"0.1","info":{"id":"MtdfRM","date":"1539109698","viewed":797,"name":" glxy epilogue ","username":"vadevaman","description":"A fork of Reactive Mesh, by glk7\nhttps://www.shadertoy.com/view/4lXyzj","likes":13,"published":1,"flags":64,"usePreview":0,"tags":["triangle","reactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4tfGRr","filepath":"https://soundcloud.com/glxy/epilogue","previewfilepath":"https://soundcloud.com/glxy/epilogue","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\nconst vec3 wireColor1 = vec3(0.7,0.8,0.6);\nconst vec3 wireColor2 = vec3(0.1,0.2,0.7);\nconst float contrast = 0.5;\nconst float PI = 3.1415926;\n\n\n//David Hoskins' hash from https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) *  443.8975);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat vnoise(vec2 p) \n{\n    vec2 i = floor(p);\n\tvec2 f = fract(p);\n    \n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0));\n    \n    float c1 = b - a;\n    float c2 = c - a;\n    float c3 = d - c - b + a;\n\t\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n   \treturn a + u.x*c1 + u.y*c2 + u.x*u.y*c3;\n}\n\n\nfloat fbm(vec2 p) \n{\n    vec4 s = vec4(texture(iChannel1, vec2(0.0, 0.0)).r,\n    \t\t\t  texture(iChannel1, vec2(0.25, 0.0)).r,\n    \t\t\t  texture(iChannel1, vec2(0.50, 0.0)).r,\n    \t\t\t  texture(iChannel1, vec2(0.75, 0.0)).r);\n    p += vec2(s.x - s.w, s.z - s.y);\n    \n\tfloat h = vnoise(p) * s.x;\n    h += vnoise(p * 2.0) * s.y * 0.5;\n    h += vnoise(p * 4.0) * s.z * 0.3;\n    h += vnoise(p * 8.0) * s.w * 0.2 ;\n    \n    return h;\n}\n\n//From https://iquilezles.org/articles/palettes\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 color(vec2 p) \n{\n    return pal(0.3+hash(p)*0.3, \n               wireColor1, vec3(contrast), vec3(1.0), \n               wireColor2);\n}\n\nfloat map( vec2 p ) \n{\n\treturn clamp(fbm((p+100.+iTime)*0.2)*8.0 - 4.0 + hash(p + 10.0)*1.0, -5.0, 5.0);  \n}\n\nvec3 traverse_mesh( vec3 ro, vec3 re, vec3 rd) \n{\n    \n    float maxd = length(re.xz - ro.xz);\n    float td = maxd;\n    \n    float rs = rd.y / length(rd.xz); \n    vec2 d = normalize(rd.xz);\n    vec2 id = 1.0/d;\n    vec2 o = ro.xz;\n    \n    float d1 = 0.0, d2 = 0.0;\n    vec3 n1 = vec3(0.0), n2 = vec3(0.0);\n    vec3 p1 = vec3(0.0), p2 = vec3(0.0);\n    vec2 i = vec2(0.0);\n    \n    float r1 = 0.0, r2 = 0.0;\n    vec3 a = vec3(0.0);\n    for( int s = 0; s < 20; ++s ){\n        i = floor(o);\n        \n\t\tvec2 m = (i - o) * id;\n    \tvec2 t = max(m, m + id);\n        float dist = min(t.x, t.y); \n    \to += d*(dist + 0.001);\n       \n        vec3 t1 = vec3(i, map(i)).xzy;\n        vec3 t2 = vec3(i + vec2(1.0, 0.0), map(i + vec2(1.0, 0.0))).xzy;\n        vec3 t3 = vec3(i + vec2(0.0, 1.0), map(i + vec2(0.0, 1.0))).xzy;\n        vec3 t4 = vec3(i + vec2(1.0), map(i + vec2(1.0))).xzy;\n        \n        vec3 v21 = normalize(t2 - t1);\n        vec3 v41 = normalize(t4 - t1);\n        vec3 v31 = normalize(t3 - t1);\n        vec3 v43 = normalize(t4 - t3);\n        vec3 v42 = normalize(t4 - t2);\n        \n     \tn1 = normalize(cross(v21, v41));\n        n2 = normalize(cross(v41, v31));\n        \n        r1 = dot(t1 - ro, n1) / (dot(rd, n1));\n        r2 = dot(t1 - ro, n2) / (dot(rd, n2));\n        \n        p1 = ro + rd*r1;\n        p2 = ro + rd*r2;\n        \n        float a1 = dot(p1 - t1, cross(v41, n1));\n        float b1 = dot(p1 - t1, cross(n1, v21));\n    \tfloat c1 = dot(p1 - t2, cross(n1, v42));\n        \n        float a2 = dot(p2 - t1, cross(n2, v41));\n        float b2 = dot(p2 - t1, cross(v31, n2));\n    \tfloat c2 = dot(p2 - t3, cross(v43, n2));\n        \n        d1 = min(min(a1, b1), c1);\n        d2 = min(min(a2, b2), c2);\n        \n        vec3 col1 = color(i) + 0.1;\n        vec3 col2 = color(i + 1.0) + 0.1;\n        float con = ro.y + (maxd-td)*rs; \n        \n        a += exp(-abs((t3.y + t2.y)*0.5 - con)) * 0.08 * (col1 + col2)*0.85;\n        \n        a += pow(max(0.5, (1.0 - d1)*step(0.0, d1)), 16.0) * col1;\n        a += pow(max(0.5, (1.0 - d2)*step(0.0, d2)), 16.0) * col2;\n        \n        //if (d1 > 0.0 || d2 > 0.0) break;\n        if ((td -= dist) < 0.01) break;\n    }\n    \n    \n    return vec3(clamp(a*1.5 + 0.09, 0.0, 1.0));\n    \n    /*\n    if( maxd < 0.01) return vec3(0.1);\n   \n    float m = 1.0;\n    if (d1 > 0.0 && d2 > 0.0) m = step(r2, r1);\n    else if (d1 > 0.0) m = 0.0;\n \t*/\n}\n\nvoid camera(in vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t) \n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n \n    ro = vec3(0.0, 0.0, -15.);\n    \n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n    \n    vec2 sm = sin(m), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n    \n    t = rotY * rotX;\n    \n    ro = t * ro;\n    rd = t * rd;\n    \n    rd = normalize(rd);\n}\n\nbool iRayAABox(in vec3 ro, in vec3 rd, in vec3 invrd, in vec3 b, \n               out vec3 p0, out vec3 p1, out vec3 n) {\n    vec3 t0 = (-b - ro) * invrd;\n    vec3 t1 = (b - ro) * invrd;\n\n    vec3 tmin = min(t0, t1);\n    vec3 tmax = max(t0, t1);\n    \n    float fmin = max(max(tmin.x, tmin.y), tmin.z);\n    float fmax = min(min(tmax.x, tmax.y), tmax.z);\n    \n    p0 = ro + rd*fmin;\n    p1 = ro + rd*fmax;\n    n = -sign(rd)*step(tmin.yzx, tmin.xyz)*step(tmin.zxy, tmin.xyz);\n    \n    return fmax >= fmin;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec3 ro = vec3(0.0), rd = vec3( 0.0 );\n    mat3 t = mat3(1.0);\n    camera(fragCoord, ro, rd, t);\n    \n    vec3 p0 = vec3(0.0), p1 = vec3(0.0), n = vec3(0.0);\n    vec3 c = vec3(0.1);\n    if( iRayAABox(ro, rd, 1.0/rd, vec3(5.0), p0, p1, n) ) {\n    \tc = traverse_mesh(p0 + rd*0.01, p1 - rd*0.01, rd);\n    }\n    \n    fragColor = vec4(pow(c, vec3(0.94545)),1.0);\n}","name":"Image","description":"","type":"image"}]}