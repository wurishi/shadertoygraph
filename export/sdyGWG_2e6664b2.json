{"ver":"0.1","info":{"id":"sdyGWG","date":"1632060001","viewed":104,"name":"Bitmap ABC grid","username":"nkaretnikov","description":"A simple bitmap font demo (with scaling).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","grid","tutorial","bitmap","font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Public domain.\n\n#define SHIFT .5\n\nvec3 rect(vec3 color, vec2 uv, vec2 bl, vec2 tr)\n{\n    float res = 1.;\n    \n    // Bottom left.\n    bl = step(bl, uv);  // if arg2 > arg1 then 1 else 0\n    res = bl.x * bl.y;  // similar to logic AND\n    \n    // Top right.\n    tr = step(SHIFT - tr, SHIFT - uv);\n    res *= tr.x * tr.y;\n    \n    return res * color;\n}\n\nvec3 square(vec3 color, vec2 uv, vec2 c, float sz)\n{\n    return rect(color, uv, c - sz, c + sz);\n}\n\nvec3 drawA(vec3 res, vec3 color, vec2 uv, vec2 pos, float sz)\n{\n    // A: top.\n    res += square(color, uv, pos + sz * vec2( 0.,  4.), sz);\n    \n    // A: left side.\n    res += square(color, uv, pos + sz * vec2(-2.,  2.), sz);\n    res += square(color, uv, pos + sz * vec2(-2.,  0.), sz);\n    res += square(color, uv, pos + sz * vec2(-2., -2.), sz);\n    res += square(color, uv, pos + sz * vec2(-2., -4.), sz);\n    \n    // A: right side.\n    res += square(color, uv, pos + sz * vec2(2.,  2.), sz);\n    res += square(color, uv, pos + sz * vec2(2.,  0.), sz);\n    res += square(color, uv, pos + sz * vec2(2., -2.), sz);\n    res += square(color, uv, pos + sz * vec2(2., -4.), sz);\n    \n    // A: center.\n    res += square(color, uv, pos + sz * vec2( 0.,  0.), sz);\n    \n    return res;\n}\n\nvec3 drawB(vec3 res, vec3 color, vec2 uv, vec2 pos, float sz)\n{\n    // B: top.\n    res += square(color, uv, pos + sz * vec2( 0.,  4.), sz);\n    res += square(color, uv, pos + sz * vec2(-2.,  4.), sz);\n    \n    // B: left side.\n    res += square(color, uv, pos + sz * vec2(-2.,  2.), sz);\n    res += square(color, uv, pos + sz * vec2(-2.,  0.), sz);\n    res += square(color, uv, pos + sz * vec2(-2., -2.), sz);\n    res += square(color, uv, pos + sz * vec2(-2., -4.), sz);\n    \n    // B: right side.\n    res += square(color, uv, pos + sz * vec2( 2.,  2.), sz);\n    res += square(color, uv, pos + sz * vec2( 2., -2.), sz);\n    \n    // B: center.\n    res += square(color, uv, pos + sz * vec2( 0.,  0.), sz);\n    \n    // B: bottom.\n    res += square(color, uv, pos + sz * vec2( 0., -4.), sz);\n    \n    return res;\n}\n\nvec3 drawC(vec3 res, vec3 color, vec2 uv, vec2 pos, float sz)\n{\n    // C: top.\n    res += square(color, uv, pos + sz * vec2( 0.,  4.), sz);\n    \n    // C: left side.\n    res += square(color, uv, pos + sz * vec2(-2.,  2.), sz);\n    res += square(color, uv, pos + sz * vec2(-2.,  0.), sz);\n    res += square(color, uv, pos + sz * vec2(-2., -2.), sz);\n    \n    // C: right side.\n    res += square(color, uv, pos + sz * vec2( 2.,  2.), sz);\n    res += square(color, uv, pos + sz * vec2( 2., -2.), sz);\n    \n    // C: bottom.\n    res += square(color, uv, pos + sz * vec2( 0., -4.), sz);\n    \n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1).\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Remap coordinates to make 0.0 be at the center.\n    uv -= SHIFT;\n    \n    // Account for the aspect ratio.\n    uv.x *= iResolution.x / iResolution.y;\n    \t\n    // Paint colors.\n    vec3 red    = vec3(.667, .133, .141);\n    vec3 blue   = vec3(0.,   .369, .608);\n    vec3 yellow = vec3(1.,   .812, .337);\n    vec3 black  = vec3(0.);        \n\n\tvec3 color = black;\n    \n    // Blinking.\n    float speed = 2.;\n    float t = iTime * speed;\n    float f = sin(t);\n    \t\n\t// Draw the grid.\n\tconst float tickWidth = 0.06;\n    float sz = .005;\n\n    // XXX: Slow.\n    for (float i = -1.; i < 1.; i += tickWidth) {\n        for (float j = -1.; j < 1.; j += tickWidth) {        \n            vec2 pos = vec2(0. + i, 0. + j);\n        \n            if (f >= .0 && f < .4 || f <= .0 && f > -.4) {\n                // B.\n                color = drawB(color, blue, uv, pos, sz);\n                \n            } else if (f > 0.) {\n                // A.\n                color = drawA(color, red, uv, pos, sz);\n\n            } else if (f < 0.) {\n                // C.\n                color = drawC(color, yellow, uv, pos, sz);\n            }\n\n        }\n    }\n\t\n\tfragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}