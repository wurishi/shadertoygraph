{"ver":"0.1","info":{"id":"wdBGRz","date":"1547932768","viewed":73,"name":"Polynomstr√§nge-Iterationen","username":"yokuldreki","description":"none","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["none"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float repeat = 16.0; // 20.0 Oder 10.0\n     \n    float Time = iTime - repeat * float((int(iTime)/int(repeat)));\n\n    \n    \n    float Scale = 7.5 ;\n    int Iterations = int(Time*5.0);//int(exp(Time/2.0));///28;  int(exp(iTime));\n    \n    \n    \n     //Oder\n\n    /*\n    \n \tfloat Scale = exp(-Time);\n\tint Iterations = 32;\n\n\t*/\n\n\t\n    \n    \n    float margin = 0.0000000001;\n    float bound = 8.0;\n    \n    vec2 MAX = vec2(Scale/2.0, Scale /1.0 * iResolution.y/iResolution.x);\n    \n    vec2 coord = Scale*(fragCoord.xy/iResolution.xy)- vec2(Scale/2.0);\n\tcoord.y = coord.y*iResolution.y/iResolution.x;///(iResolution.y/iResolution.x);\n    vec3 color = vec3(1.0); // White background\n\n    coord += vec2(0.0, 0.0);\n    \n    for(int i = 0; i < Iterations; i++){\n    \n        if(abs(coord.x) < margin && abs(coord.y) < margin){\n         \n            color = vec3(1.0, 0.0, 1.0);\n            break;\n            \n        }\n        /*\n        else if(abs(coord.x) < margin){\n            \n        \tcolor = vec3(0.0, 0.0, float(i) / float(Iterations));      \n            \n            //if(i < Iterations)\n                color = vec3(0.0, 1.0, 1.0);\n            \n            break;\n            \n        }\n        \n        else if(abs(coord.y) < margin){\n              \n            color = vec3(0.0, float(i) / float(Iterations), 0.0);    \n           \n            break;\n            \n        }*/\n        \n        else if (abs(coord.x) < margin || abs(coord.y) < margin){\n            \n            color = vec3(0.0, float(i) / float(Iterations), 0.0);    \n            \n            break;\n            \n        }\n            \n              \n        else if(length(coord) > bound){\n            \n         \tcolor = vec3( float(i) / float(Iterations), 0.0, 0.0);\n            break;           \n            \n        }       \n        else{\n\n        \tcoord = vec2(-coord.x - coord.y, coord.x*coord.y);\n            \n        }\n        \n    }\n    \n    \n    \n\tfloat phi = atan(coord.y, coord.x);// * 0.5 / PI + 0.5; //acos( dot(normalize(coord), vec2(0, -1)) );\n\tfloat R = length(coord);\n    \n    //color = R / length(MAX) * vec3(sin(phi), sin(phi + 2.0/3.0 * PI), sin(phi + 4.0/3.0*PI));\n\n    \n    // Output to screen\n        \n    fragColor = vec4(color, 1.0);\n        \n\n}\n\n\n","name":"Image","description":"","type":"image"}]}