{"ver":"0.1","info":{"id":"Mdcfzn","date":"1524774736","viewed":1456,"name":"audio responsive rainbow","username":"SilentBenjiNinja","description":"An audio visualizer with the trippiest song I could find on SoundCloud.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["sound","music","colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MdSXzy","filepath":"https://soundcloud.com/brownandgammon/outrun-8-bit-spliff","previewfilepath":"https://soundcloud.com/brownandgammon/outrun-8-bit-spliff","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thanks to https://thebookofshaders.com/06/\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nvec3 lightPillars( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates & normalize\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.y/iResolution.x;\n    //uv.y *= ratio;\n\n\t// the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n    //adjust sound spike smoothness (0 for no smoothness)\n    float texelSmoothness = 0.3;\n    \n    //adjust sound spike variety (1 for no variety)\n    float texelPow = 10.0;\n    \n    //Value of final color\n    float texelAlpha = fft;\n    \n    //generate alpha for mix function\n    float alpha = smoothstep(pow(fft, texelPow)-texelSmoothness,fft, uv.y);\n    \n    //use alpha on colors\n    vec3 col = mix(hsv2rgb(vec3(uv.x*0.8, 1.0, 1.0)), vec3(0.0,0.0,0.0), alpha) * texelAlpha;\n    \n    return col;\n}\n\n\nvec3 laserTimeline( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates & normalize\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.y/iResolution.x;\n    //uv.y *= ratio;\n\n\t// the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x;\n    \n    //vec2 fft \n\n    //adjust sound spike smoothness (0 for no smoothness)\n    float texelSmoothness = 0.3;\n    \n    //generate alpha for mix function\n    float alpha = 1.0-fft + uv.y;\n    \n    //use alpha on colors\n    vec3 col = mix(hsv2rgb(vec3(uv.x*0.8, 1.0, 1.0)), vec3(0.0,0.0,0.0), alpha);\n    \n    return col;\n}\n\n\n//thanks to https://www.shadertoy.com/view/MsdGzn\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = laserTimeline(fragColor, fragCoord);\n    \n    //vec3 col = lightPillars(fragColor, fragCoord);\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}