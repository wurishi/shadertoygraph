{"ver":"0.1","info":{"id":"l3B3zW","date":"1708314820","viewed":47,"name":" kishimisu Tutorial Iteration","username":"Ennacirruh","description":"I made this following a tutorial by \nkishimisu and iterating on it. This was just me playing around and trying to learn some basics on shaders.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["idk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.498, 0.248, 0.718);\n    vec3 b = vec3(0.311, 0.311, 0.265);\n    vec3 c = vec3(1.600, 0.755, 2.762);\n    vec3 d = vec3(0.067, 0.332, 0.777);\n    \n    return a + b * cos(6.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord ) * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 3.0; i++){\n        uv = fract(uv * 2.0 * (sin(iTime + i) * 0.1 + 0.9)) - 0.5;\n        uv = uv * vec2(sin(iTime*0.1),sin(iTime*0.1)) * (sin(iTime * 0.75) * 3.0 + 1.25);\n        float d = (sin(length(uv) + iTime)+ 1.0) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i * 0.4 + iTime);\n\n        d = sin(d * 8.0 + cos(iTime * 1.5) + iTime)/8.0;\n        d = abs(d);\n\n        // Time varying pixel color\n        d = (0.01 + (cos(iTime*0.5)*0.01) * 0.1) / d;\n        d = pow(d, 2.);\n        \n        finalColor += col * d;\n    }\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}