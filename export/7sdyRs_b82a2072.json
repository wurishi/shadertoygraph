{"ver":"0.1","info":{"id":"7sdyRs","date":"1654071707","viewed":113,"name":"MyMelody and Kuromi","username":"HaleyHalcyon","description":"a","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"Wl3cDf","parentname":"experimental triple spiral thang"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979\nconst mat4x3 colors = mat4x3(\n    1.0, 0.85, 0.95,\n    1.0, 0.65, 0.8,\n    0.12, 0.1, 0.14,\n    0.6, 0.5, 0.9\n);\n\n// Antialias the edges? (Set to 0 for GIF export)\n#define AA 1\n\n// xor-ish behavior for floats\nfloat flXor(float x, float y) {\n    return x + y - 2. * (x * y);\n}\n\n// folds 0>1>2>3>4... to 0>1<0>1<0...\nfloat fold(float x) {\n    return abs(1. - 2. * fract(x));\n}\n\nfloat aa(float x) {\n#if AA == 1\n    float aa = min(0.5, fwidth(x) * 0.75);\n    return smoothstep(\n        -aa,\n        aa,\n        x - 0.5\n    );\n#else\n    return step(0.5, x);\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    float lenSq = log(length(uv));\n    float lenAdd = -0.2;\n    // logx/dx = 1/x\n    float angle = atan(uv.y, uv.x) / (2. * PI);\n    \n    float timeScale = fract(iTime * 0.25);\n    \n    float spiral1 = fold(\n         (lenSq + lenAdd) * 0.4\n       + angle * 2.\n       - timeScale\n    );\n    spiral1 = aa(spiral1);\n       \n    float spiral2 = fold(\n         (lenSq + lenAdd) * 0.5\n       - angle * 3.\n       - timeScale\n    );\n    spiral2 = aa(spiral2);\n    vec3 colA = mix(colors[0], colors[1], vec3(flXor(spiral1, spiral2)));\n\n    \n    float spiral3 = fold(\n         (lenSq + lenAdd) * 0.3\n       - angle * 5.\n       - timeScale\n    );\n    spiral3 = aa(spiral3 + 0.3);\n       \n    float spiral4 = fold(\n         (lenSq + lenAdd) * 0.6\n       + angle * 1.\n       - timeScale\n    );\n    spiral4 = aa(spiral4 + 0.3);\n    vec3 colB = mix(colors[2], colors[3], vec3(spiral3 * spiral4));\n    \n    float which = fold(\n        0.5 * lenSq * (1.0 + 0.2 * sin(timeScale * 2. * PI))\n      - angle\n      + timeScale\n    );\n    which = aa(which);\n    \n    vec3 col = mix(colA, colB, which);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}