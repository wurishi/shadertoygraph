{"ver":"0.1","info":{"id":"Xf3yR7","date":"1730374977","viewed":33,"name":"Undulating Balls","username":"Eliq","description":"Class project","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["educational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    st*=3.5;\n    \n    vec2 uv = fract(st) - 0.5;\n\n    vec2 ipos = floor(st);\n\n    float r = 0.05;\n    float k = 0.1;\n\n\n    // Unique random offset for each circle\n    float noiseOffsetX = random(ipos) * 2.0 - 1.0;\n    float noiseOffsetY = random(ipos + 1.0) * 2.0 - 1.0;\n\n    float noiseOffsetX3 = random(ipos+2.0) * 2.0 - 1.0;\n    float noiseOffsetY3 = random(ipos + 3.0) * 2.0 - 1.0;\n\n    float sizeOffset = random(ipos) * 0.05 + (sin(iTime*random(ipos)))*0.08 ;\n    float sizeOffset2 = random(ipos + 1.0) * 0.1;\n    float sizeOffset3 = random(ipos + 2.0) * 0.1 + (sin(iTime*random(ipos + 1.0)))*0.08;\n\n\n\n    // Adjust the center of each circle with a unique noise offset\n    vec2 center = vec2(sin(iTime  * noiseOffsetX ) * 0.2, cos(iTime * 1.0 * noiseOffsetY) * 0.2);\n    vec2 center2 = vec2(sin((iTime+1.0) * noiseOffsetX ) * 0.2, cos((iTime+1.0) * 1. * noiseOffsetY) * 0.2);\n    vec2 center3 = vec2(sin(iTime * 1.5 * noiseOffsetX ) * 0.2, cos(iTime * 1.2 * noiseOffsetY) * 0.2);\n\n\n    // Add a sin-based undulation to each radius\n    float undulation1 = sin((sin(iTime)+2.0) * 20.0 * uv.x * uv.y) * 0.02;\n    float undulation2 = sin((sin(iTime)+2.0) * 20.0 * uv.x * uv.y + 1.0) * 0.02;\n    float undulation3 = sin((sin(iTime)+2.0) * 20.0 * uv.x * uv.y + 2.0) * 0.02;\n\n\n    float circle = smoothstep(r+k+sizeOffset + undulation1, r+sizeOffset +undulation1,\n     length(uv - center));\n\n    //second set of circles\n    circle += smoothstep(r+k+sizeOffset2 + undulation2, r+sizeOffset2+undulation2,\n     length(uv - center2));\n\n     //third set of circles\n    circle += smoothstep(r+k+sizeOffset3+undulation3, r+sizeOffset3+undulation3,\n     length(uv - center3));\n\n    \n    circle = smoothstep(0.2, 0.21, circle);\n\n\n    // Generate random colors based on ipos\n    vec3 color;\n    color.r = random(ipos);            // Random red component\n    color.g = random(ipos + 1.0);      // Random green component\n    color.b = random(ipos + 2.0);      // Random blue component\n    \n    \n    \n\n    fragColor = vec4(color * vec3(circle), 1.0);\n}","name":"Image","description":"","type":"image"}]}