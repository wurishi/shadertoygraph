{"ver":"0.1","info":{"id":"XllfDH","date":"1529618056","viewed":129,"name":"Noise #1 Value/Perlin ","username":"CodingDuff","description":"Implementation of value and perlin noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","learning","value"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash (float c)\n{\n    /**** Result between [0,1] ****/\n\treturn fract(sin(c) * 45863.52);\n}\n\nfloat hash2 (vec2 p)\n{\n    return -1.+2.*fract(sin(dot(p,vec2(12.89, 48.89))) * 4653.15);\n}\n\nvec2 hash2v(vec2 i)\n{\n    vec2 c = vec2(dot(i, vec2(56.0937, 34.902)), dot(i, vec2(12.98, 43.039)));\n    \n    /**** Convert result [0,1] to [-1,1] ***/\n    return -1.+2.*vec2(hash(c.x), hash(c.y));\n}\n\nfloat valueNoise(vec2 uv)\n{\n    /**** Grid ****/\n    vec2 f = fract(uv);\n    vec2 i = floor(uv);\n    \n    /**** Get random value in corners ****/\n    vec2 h = vec2(hash2(i), hash2(i + vec2(1, 0)));    \n    vec2 v = vec2(hash2(i + vec2(0, 1)), hash2(i + vec2(1, 1)));\n    \n    /**** Interpolation function, see perlin improved ****/\n    vec2 s = f * f * f * (f * (f * 6. - 15.) + 10.);\n    \n    /*** Interpolation ****/\n    //return mix(h.x, h.y, s.x) + (v.x - h.x)* s.y *(1.0 - s.x) + (v.y - h.y) * s.x * s.y;\n    return mix( mix(h.x, h.y, s.x), mix(v.x, v.y, s.x), s.y);\n}\n\nfloat perlinNoise(vec2 uv)\n{\n    /**** Grid ****/\n    vec2 f = fract(uv);\n    vec2 i = floor(uv);\n    \n    /**** Generate gradients in corners ****/\n    vec2 g1 = hash2v(i);\n    vec2 g2 = hash2v(i + vec2(1., 0.));\n    vec2 g3 = hash2v(i + vec2(0., 1.));    \n    vec2 g4 = hash2v(i + vec2(1., 1.));\n       \n    /**** Dot product (gradient with current pixel/corner vector) ****/\n    float d1 = dot(g1, f);   \n    float d2 = dot(g2, f - vec2(1., 0.));\n    float d3 = dot(g3, f - vec2(0., 1.));   \n    float d4 = dot(g4, f - vec2(1., 1.));\n    \n    /**** Interpolation function, see perlin improved ****/\n    vec2 s = f * f * f * (f * (f * 6. - 15.) + 10.);\n    \n    /****  Interpolation ****/\n    return mix( mix(d1, d2, s.x), mix(d3, d4, s.x), s.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x /= iResolution.y / iResolution.x;\n    uv*=15.0;\n       \n    float t = sin(iTime*.5);    \n    float c = mix(valueNoise(uv), perlinNoise(uv), (t+1.)*0.5);\n    \n    /**** Center value on .5 ***/\n    c = .5 + .5 * c;\n    \n    fragColor.rgb = vec3(c);\n}","name":"Image","description":"","type":"image"}]}