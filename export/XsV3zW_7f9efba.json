{"ver":"0.1","info":{"id":"XsV3zW","date":"1453492873","viewed":792,"name":"Falling Sand","username":"polkm","description":"A simple falling sand thing","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["falling","sand","multipass","fallingsand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / vec2(iResolution));\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 co)\n{\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dist = distance(fragCoord, iMouse.xy);\n    \n    if (iMouse.z <= 0.0) {\n        float cx = (rand(vec2(iTime / iResolution.x / 1000.0, 0)) - 0.5) * iResolution.x;\n        float w = iResolution.x * 0.4 * (0.8 + rand(vec2(iTime, 0)) * 0.2);\n        float x = cx;\n        float y = sin(iTime * 10.0) * 0.0;\n    \tdist = distance(fragCoord, vec2(x, y) + vec2(iResolution.x / 2.0, iResolution.y * 0.9));\n    }\n    \n    if (dist < 0.0 + rand(vec2(floor(iTime / 0.0324234) * 0.0324234) / 100.0) * 20.0) {\n        fragColor = vec4(hsv2rgb(vec3(iDate.w * 0.1, 0.8, 0.9)), 1);\n    } else {\n        fragColor = texture(iChannel0, fragCoord / vec2(iResolution));\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float gravity = 1.0;\nconst float roll_rate = 0.0000003;\n\nvec4 sample(vec2 point) {\n  float pix = (1.0 / iResolution.y);\n  float offset = 0.0;\n  if (mod(float(iFrame), 5.0) == 0.0) {\n      offset = pix;\n  }\n  return texture(iChannel0, point / vec2(iResolution) + vec2(0, offset));\n}\n\nvec4 type_color(int type) {\n  if (type == 1) {\n    return vec4(1.0, 1.0, 0.5, 1.0);\n  }\n  return vec4(0, 0, 0, 0);\n}\n\nint pixel_type(vec2 pos) {\n  vec4 d = sample(pos);\n  if (d.a > 0.0) {\n    return 1;\n  }\n  return 0;\n}\n\nvec2 bounds_clamp(vec2 pos) {\n  return min(max(pos, 0.0), vec2(iResolution));\n}\n\nvec2 fall_pos(vec2 pos) {\n  int pixtype = pixel_type(pos);\n  \n  /*float gap_size = 50000.0;\n  float gap_time = iTime * 0.0;\n  float gap_rate = 10.0;\n  bool gapping = mod(floor(iTime), gap_rate) == 0.0;\n  bool gap = mod(floor(pos.x / gap_size + gap_time) * gap_size, 120.0) == 0.0;\n  if (pos.y <= 1.0 && gapping && gap) {\n     return pos + vec2(0, -gravity);\n  }*/\n    \n  if (pos.y > 1.0 && pos.y < iResolution.y) {\n    if (pixtype == 1) {\n      if (pixel_type(pos + vec2(0, -gravity)) == 0) {\n        return bounds_clamp(pos + vec2(0, -gravity));\n      } else {\n        if (pixel_type(pos + vec2(1, -gravity)) == 0 && pixel_type(pos + vec2(1, 0)) != 1) {\n          return bounds_clamp(pos + vec2(1, -gravity));\n        } else {\n\n          if (pixel_type(pos + vec2(-1, -gravity)) == 0 && pixel_type(pos + vec2(-1, 0)) != 1) {\n            return bounds_clamp(pos + vec2(-1, -gravity));\n          }\n\n\n        }\n\n      }\n    }\n  }\n  return pos;\n}\n\nvec4 fall_check(vec2 pos, vec2 check_pos) {\n  if (fall_pos(check_pos) == pos) {\n    return sample(check_pos);\n  }\n  return vec4(0, 0, 0, 0);\n}\n\nvec4 fall_remove(vec2 pos, vec4 cur) {\n  if (fall_pos(pos) != pos) {\n    return vec4(0, 0, 0, 0);\n  }\n  return cur;\n}\n\nvec4 fall_add(vec2 pos, vec4 cur) {\n  vec4 fall_type = fall_check(pos, pos + vec2(0, gravity));\n  if (fall_type.a > 0.0) {\n    return fall_type;\n  }\n  fall_type = fall_check(pos, pos + vec2(-1, gravity));\n  if (fall_type.a > 0.0) {\n    return fall_type;\n  }\n  fall_type = fall_check(pos, pos + vec2(1, gravity));\n  if (fall_type.a > 0.0) {\n    return fall_type;\n  }\n  return cur;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pos = fragCoord;\n\n  float pix = (1.0 / iResolution.y);\n  float offset = 0.0;\n  if (mod(float(iFrame), 100.0) == 0.0) {\n      offset = pix;\n  }\n  vec4 cur = sample(fragCoord);\n\n  cur = fall_remove(pos, cur);\n  cur = fall_add(pos, cur);\n\n  fragColor = cur;\n}","name":"Buf B","description":"","type":"buffer"}]}