{"ver":"0.1","info":{"id":"XsjcDR","date":"1491623622","viewed":241,"name":"preview","username":"nabr","description":"A personal experiment how low i can go, before things start to break.\nA Raytraced Sphere with Text\nI loose some characteristics of the image during the minification here is the work in progress shader\n[url]https://www.shadertoy.com/view/4dByWz[/url]\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracer","sphere","glitch","font","yeah","feigenbaum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//nabr\n\n//text: https://www.shadertoy.com/view/ltcXzs\nvec4 char(vec2 p, int C) {\n    \n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n    \n    return textureGrad(iChannel0,p/16.+fract(vec2(C,15-C/16)/16.),dFdx(p/16.),dFdy(p/16.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\t//Center the FragCoord also Scale everything down\n    vec2 uv=(fragCoord.xy-.5 * iResolution.xy)/ min (iResolution.y,iResolution.x) * 4.0;\n    \n    //Setup Scene\n    vec3 R_o,//=vec3 (.0,(-0.1+(.1 * cos(iTime))),7),\n    \t R_d=normalize((vec3(uv,-1.))-R_o);\n    \n    vec3 lightDir=normalize(vec3(cos(iTime),-(sin(iTime)),-2.0));\n    \n    //Sphere\n    vec3 Sph=vec3(0.,0.,1.95);\n    \n    //text\n    vec3 O;  vec2 U=uv;\n  \tU *= .75; U.x +=2.60;U.y +=1.12; \n  \tint str[7]=int[](80,82,69,86,73,69,87);\n    for(int i=0;i<7;++i)O += char(U,str[i]).x,U.x-=.695;\n    \n    //Feigenbaum to Circle then Flipped with Rotation\n    //https://www.shadertoy.com/view/4dSXWt\n    float fline,fline2,y,t;\n    for (float x=-4.69;x <=4.69;x+=0.95){\n        \n        float feigenb=uv.y * t * (1.0001 - t);\n        \n        t=sqrt((feigenb * feigenb) + (x * x)) - 2.71828;\n        \n        fline2=fline2 + .0035 / length(abs(uv.x) + cos(t + iTime) - abs(uv.y) - y);\n        fline=fline + .002 / length(abs(uv.x) * .6877663 - sin((t + iTime)* .5) + .5) * -cos(6.799+iTime);\n    };\n    \n    //Glitchy Screen Effect\n    float scanline=0.0035 / length(.6 + cos(t + iTime));\n    \n\t//Solve Quadratic\n    vec3  l = - R_o-Sph;\n    \n    float b = (dot(l,R_d)*dot(l,R_d)),d = (b-( dot(l,l) - 2.));\n    \t\n\t//Anti Aliasing Sphere smoothstep over the edge of the sphere resolution depentend\n\t// in the std shadertoy window it should work, i kind of lazy to do a screenresolution test\n    float smoothst=clamp (-(d- -.025) / 0.6, 0.0, 1.0);\n    float aa =  smoothst * smoothst * (3.0-(2.0 * smoothst));\n    \n    //Shading Lambertian\n\tvec3 ambCol = vec3(0.1, 0.050, .0610),\n         difCol = vec3(0.5, 0.02, 0.0),\n    \t finCol=vec3(.62,.2,0);\n    \n\t//Ray Sphere Intersect Test (seems right)\n    vec3 hit =-(abs(-sqrt(b)+d)*R_d);\n   \n    if(d>.0)\n    finCol=mix(ambCol+difCol*max(dot(lightDir,normalize(hit - Sph)),0.0),finCol, aa);\n                \n\t//background Gradient(distance) + the X feigenbaum logo \n    fragColor.rgb= mix(vec3(fline,-fline2,fline2)*1.6,O+(finCol+scanline),cos(iTime*2.15)*.5+.5)\n        \t\t  +mix(vec3(0.6, 0.715, 0.85), vec3(0.1, 0.15, 0.65), distance(uv, -lightDir.xy));\n    fragColor.a = (1.0);\n}","name":"Image","description":"","type":"image"}]}