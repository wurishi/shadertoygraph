{"ver":"0.1","info":{"id":"ltsBDn","date":"1511673958","viewed":226,"name":"[WST1] Ray Marching Doodles","username":"Orzeszek121","description":"This picture is my \"firstborn\" Ray Marching child, made with pure caffeine in the middle of the night couple of hours before the deadline. I had plans for something completely different and I don't really fit in the topic, but hey! It was fun!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","doodles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S 0.2\n\n\nfloat plane(vec3 r)\n{\n\treturn r.y;\n}\nfloat smin(float d1, float d2, float k)\n{\n    float res = exp( -k*d1 ) + exp( -k*d2 );\n    return -log( res )/k;\n}\n\nfloat sphere(vec3 r, float R)\n{ return length(r) - R; }\n\nfloat cuboid(vec3 c, vec3 s)\n{\n\tvec3 d = abs(c)-s;\n\treturn max(d.x,max(d.y,d.z));\n}\n\nfloat cylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat tree(vec3 c, float s)\n{\n\tfloat logg = cylinder(c,vec2(0.07,0.5));\n    float crown = min\n        (\n            sphere(c + vec3(0.2,-1.5,0.1),0.2),min(\n            sphere(c + vec3(0.0,-1.4,-0.1),0.25),min(\n            sphere(c + vec3(0.1,-1.3,0.2),0.15),min(\n            sphere(c + vec3(-0.2,-1.2,-0.1),0.15),min(\n            sphere(c + vec3(-0.2,-1.1,0.4),0.3),min(\n            sphere(c + vec3(-0.3,-1.2,-0.4),0.15),min(\n            sphere(c + vec3(-0.3,-1.3,-0.2),0.15),min(\n            sphere(c + vec3(0.3,-1.1,0.4),0.25),min(\n            sphere(c + vec3(0.2,-1.4,-0.2),0.15),min(\n            sphere(c + vec3(0.1,-0.9,-0.2),0.15),min(\n            sphere(c + vec3(-0.1,-0.8,-0.1),0.25),min(\n            sphere(c + vec3(0.2,-0.7,0.2),0.3),\n            sphere(c + vec3(-0.1,-0.6,-0.1),0.25)\n                )))))))))))\n            \n        );\n   // float leaves = 0.2-sin(30.0*c.x)*sin(30.0*c.y)*sin(30.0*c.z);\n    return min(logg, crown);\n}\n\n\nvec3 rotx(vec3 r, float fi) {\n    mat3 R = mat3(\t1,0,0, 0,cos(fi),-sin(fi), 0,sin(fi),cos(fi) );\n\treturn R*r;\n}\nvec3 roty(vec3 r, float fi) {\n\tmat3 R = mat3(\tcos(fi),0,sin(fi), 0,1,0, -sin(fi),0,cos(fi) );\n\treturn R*r;\n}\nvec3 rotz(vec3 r, float fi) {\n\tmat3 R = mat3(\tcos(fi),-sin(fi),0, sin(fi),cos(fi),0, 0,0,1 );\n\treturn R*r;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 map( in vec3 r )\n{\n    vec2 res = opU( vec2(cuboid( r + vec3(0.6,-0.9,4.9),  vec3(0.4,3.0,10.0)),40.0),\n\t                vec2(cuboid( r + vec3(-2.5,-0.9,3.0), vec3(0.4,0.2,0.2)),46.9));\n    res = opU( res, vec2( tree(roty(r +vec3(-2.0,-0.9,3.6),3.14)/1.2,3.0)*1.2,50.0 ));\n    res = opU( res, vec2( tree(roty(r +vec3(-3.5,-0.9,3.2),1.5)/0.9,3.0)*0.9,100.1 ));\n\tres = opU( res, vec2( tree((r +vec3(-2.6,-0.9,2.5))/0.7,3.0)*0.7,200.0 ));\n    res = opU( res, vec2( plane(r)-0.7,20.0));\n    return res;\n}\n                   \nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}                   \n                   \n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );     \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.3 + 0.1*f*vec3(1.0);\n        }  \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}                   \n                   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    \n    vec3 tot = vec3(0.0);\n\n    for( int m=0; m<1; m++ )\n    for( int n=0; n<1; n++ )\n    {\n  \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        vec3 ro = vec3(4.0,1.5,-5.0);\n        vec3 ta = vec3( -1.75, 1.0, 0.5 );\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n        vec3 col = render( ro, rd );\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n\n    }\n\n    \n    fragColor = vec4( tot, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}