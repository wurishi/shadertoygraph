{"ver":"0.1","info":{"id":"4f3fDr","date":"1732910534","viewed":41,"name":"Twisted cube raymarcher with fog","username":"torrings","description":"A very basic raymarcher; a cube that distorts, with diffuse lighting and fog","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","cube","fog","twist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float boxSDF(vec3 p, vec3 size) {\n    vec3 q = abs(p) - size;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sceneSDF(vec3 p) {\n    // Moving twist effect\n    vec3 pos = p;\n    float twist = pos.y * sin(iTime) * 3.5;\n    float c = cos(twist) * 0.9;\n    float s = sin(twist) * 0.9;\n    pos.xz = mat2(c, -s, s, c) * pos.xz;\n    \n    // Box and ground\n    float box = boxSDF(pos, vec3(0.3));\n    float ground = p.y + 1.5;\n    \n    return min(box, ground);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    return normalize(vec3(\n        sceneSDF(p + e.xyy) - sceneSDF(p - e.xyy),\n        sceneSDF(p + e.yxy) - sceneSDF(p - e.yxy),\n        sceneSDF(p + e.yyx) - sceneSDF(p - e.yyx)\n    ));\n}\n\n// Fog calculation function\nvec3 applyFog(vec3 color, float distance, vec3 rayDir, vec3 sunDir) {\n    vec3 fogColor = vec3(0.5, 0.6, 0.7); // Bluish fog color\n    float fogDensity = 0.15; // Adjust for more/less fog\n    \n    // Height fog\n    float heightFog = exp((-rayDir.y-0.3) * 1.2);\n    \n    // Basic fog based on distance\n    float fogAmount = 1.0 - exp((-distance-10.0) * fogDensity * 1.5);\n    \n    // Sun scattering through fog\n    float sunScatter = max(dot(rayDir, sunDir), 0.0);\n    vec3 sunScatterColor = vec3(1.0, 0.9, 0.7) * pow(sunScatter, 8.0);\n    \n    // Combine fog effects\n    fogColor += sunScatterColor * 0.3;\n    return mix(color, fogColor, fogAmount * heightFog);\n}\n\nfloat raymarch(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    \n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * d;\n        float dist = sceneSDF(p);\n        \n        if(dist < 0.001) return d;\n        if(d > 100.0) break;\n        \n        d += dist;\n    }\n    \n    return -1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    // Camera setup\n    vec3 ro = vec3(0.0, 0.0, -1.2); // Ray origin (camera position)\n    vec3 rd = normalize(vec3(uv, 1.0)); // Ray directgion\n    \n    // Sun direction (used for fog scattering)\n    vec3 sunDir = normalize(vec3(1.0, 0.4, -0.5));\n    \n    float d = raymarch(ro, rd);\n    vec3 color = vec3(0.1); // Background color\n    \n    if(d > 0.0) {\n        // Point of intersection\n        vec3 p = ro + rd * d;\n        \n        // Normal at intersection\n        vec3 normal = getNormal(p);\n        \n        // Light direction\n        vec3 lightDir = normalize(vec3(1.0, 1.0, -1.0));\n        \n        // Basic diffuse lighting\n        float diff = max(dot(normal, lightDir), 0.0);\n        color = vec3(1.0, 0.8, 0.3) * diff; // Yellow-orange color\n        \n        // Add ambient light\n        color += vec3(0.1);\n    }\n    \n    // Apply fog effect\n    color = applyFog(color, d > 0.0 ? d : 100.0, rd, sunDir);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}