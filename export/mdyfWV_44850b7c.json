{"ver":"0.1","info":{"id":"mdyfWV","date":"1698667442","viewed":36,"name":"Pixel RotSquare ScreenTransition","username":"KelloVerra","description":"a screen transition that contains a rotating square innit, yay","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["screentransition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define resolution 48.\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = (abs(p*iResolution.x)-b);\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    float time = fract(iTime*0.35);\n    float colFactor = 0.0;\n    \n    if(time > .5) {\n        time -= .5;\n        colFactor = 1.;\n    }\n\n    // Transform UV\n    \n    // Rotate UV \n    vec2 squareCoord = floor(uv*resolution)/resolution*rotate2d((abs(sin(time*2.))+48.)*12.);\n    \n    // Output to screen\n    float col=step(0.5,sdBox(squareCoord.xy, vec2(time*(iResolution.x*4.75))));\n\n    fragColor = vec4(vec3(abs(colFactor-col)),1.0);\n}","name":"Image","description":"","type":"image"}]}