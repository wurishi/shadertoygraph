{"ver":"0.1","info":{"id":"NlXBWl","date":"1651611023","viewed":241,"name":"Puzzled","username":"Flopine","description":"An almost accurate picture of my thoughts this past few days ಠ﹏ಠ","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grid","repetition","animation","isometric","tore"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define dt(sp,off) fract((iTime-off)*sp)\n#define bouncy(sp,off) sqrt(sin(dt(sp,off)*PI))\n\n#define hr vec2(1.,sqrt(3.))\n#define hex(p) max(abs(p.x),dot(abs(p),normalize(hr)))\n\n\nstruct obj {\n    float d;\n    int mat_id;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nfloat tore (vec3 p, vec2 h)\n{\n    vec2 q = vec2(length(p.xy)-h.y, p.z);\n    q*=rot(atan(q.y,q.x)*3.);\n    return hex(q)-h.x;\n}\n\nfloat per = 2.;\nobj grid (vec3 p)\n{\n    p.xz = mod(p.xz,per)-per*.5;\n    return obj(tore(p.xzy,vec2(0.3,1.)),1);\n}\n\nobj balls (vec3 p)\n{\n    p.xz -= per*.5;\n    vec2 id = floor(p.xz/(per*2.));\n    \n    float angle = atan(id.y*0.1,id.x*0.1)/(PI*.5);\n    float anim = sin(angle+length(id));\n    \n    p.y -= bouncy(.6,anim)*3.5-1.5;\n    p.xz = mod(p.xz, per*2.)-per;\n    p.xz *= rot(dt(0.5,id.x)*TAU);\n    p.yz *= rot(dt(0.5,id.y)*TAU);\n    return obj(dot(p,normalize(sign(p)))-0.3,2);\n}\n\nobj cyls (vec3 p)\n{\n    p.xz += 1.; p.y += .4;\n    vec2 id = floor(p.xz/(per*2.));\n    p.xz = mod(p.xz, per*2.)-per;\n    \n    float r = 0.6, thicc = 0.035, c=1e10,\n    angle = atan(id.y*0.1,id.x*0.1)/(PI*.5),\n    anim = sin(angle+length(id));\n    \n    for (int i=0; i<3; i++)\n    {\n        float ratio = float(i)/3.;\n        p.y -= bouncy(0.6,ratio*anim)*0.7; \n        c = min(c,max(abs(p.y)-0.2,abs(max(length(p.xz)-r, abs(p.y)-1.))-thicc));\n    \n        r -= 0.15;\n        thicc -= 0.008;\n    }\n    \n    return obj(c,3);\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    obj scene = grid(p);\n    scene = minobj(scene, balls(p));\n    scene = minobj(scene, cyls(p));\n    \n    return scene;\n}\n\nvec3 getnorm (vec3 p, float eps)\n{\n    vec2 e = vec2(eps,0.);\n    return normalize (SDF(p).d-vec3(SDF(p-e.xyy).d,SDF(p-e.yxy).d,SDF(p-e.yyx).d) );\n}\n\nfloat AO (float e, vec3 p, vec3 n)\n{return SDF(p+e*n).d/e;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n     \n    \n    vec3 ro=vec3(uv*5.,-30.), \n    rd=normalize(vec3(0.,0.,1.)),\n    p=ro,\n    l=vec3(2.,3.,-2.),\n    col=vec3(0.,0.02,0.03);\n    \n    bool hit = false;float shad;obj O;\n    \n    for (float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            hit = true; shad = i/64.; break;\n        }\n        p += O.d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n;\n        if (O.mat_id == 1) \n        {\n            n = getnorm(p,0.1);\n            col = vec3(1.);\n        }\n        \n        else if (O.mat_id == 2)\n        {\n            n = getnorm(p,0.001);\n            col = vec3(0.9,0.8,0.);\n        }\n        \n        else if (O.mat_id == 3)\n        {\n            n = getnorm(p,0.001);\n            col = vec3(0.8,0.,0.3);\n        }\n        \n        float lit = dot(n,normalize(l))*.5+.5;\n        vec3 h = normalize(l-rd);\n        float spec = pow(max(dot(n,h),0.),20.);\n        float ao = AO(0.05,p,n)+AO(0.15,p,n)+AO(0.2,p,n);\n        col *= lit;\n        col *= ao/3.;\n        col += spec;\n    }\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}