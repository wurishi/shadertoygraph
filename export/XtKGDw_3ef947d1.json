{"ver":"0.1","info":{"id":"XtKGDw","date":"1474969521","viewed":472,"name":"Rorschach shape","username":"zguerrero","description":"trying to reproduce the Rorschach test using noise and polar coordinates.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","polar","coordinates","rorschach"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265359;\n\nfloat seed = 0.0;\nfloat timeStep = 0.2;\nfloat speed = 0.5;\nfloat center1 = 0.05;\nfloat noiseInfluence1 = 0.5;\nfloat smooth1 = 0.02;\nfloat center2 = 0.25;\nfloat noiseInfluence2 = 0.05;\nfloat smooth2 = 0.25;\nvec4 noiseTiles = vec4(0.2, 0.4, 0.5, 0.75);\nvec4 noiseEvolution = vec4(0.25, -0.25, 0.1, -0.1);\nvec4 noiseWeights = vec4(1.0, 0.5, 0.25, 0.1);\nvec4 noiseRadiusTiles = vec4(0.1, 0.2, 0.5, 0.1);\nvec4 noiseRadiusEvolution = vec4(0.25, -0.25, 0.1, -0.1);\nfloat noiseRadiusWeight = 0.5;\nfloat finalMix = 0.25;\nfloat textureTile = 3.0;\nfloat textureInfluence = 0.0025;\nfloat textureAdd = 0.2;\n\n\nfloat noise(float x)\n{  \n    return texture(iChannel1, vec2(x,x)).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = speed * iTime + seed;\n    float stepTime = mix(floor(t), floor(t+1.0), smoothstep(0.0, 0.5, fract(t)))*timeStep;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv*textureTile);\n    \n    vec2 x = vec2(abs(uv.x - 0.5)*1.5, uv.y - 0.5);\n \tfloat radius = length(x);\n    float angle = atan(x.y, x.x);\n    \n    //Old version of the code, simplified by FabriceNeyret2\n    /*\n    vec4 speedRadius = noiseRadiusEvolution * stepTime;\n    vec4 noiseRadius = vec4(noiseRadiusWeight);\n    noiseRadius.x *= noise(radius*noiseRadiusTiles.x + speedRadius.x + tex.x*textureInfluence)*2.0-1.0;\n    noiseRadius.y *= noise(radius*noiseRadiusTiles.y + speedRadius.y + tex.y*textureInfluence)*2.0-1.0;\n    noiseRadius.z *= noise(radius*noiseRadiusTiles.z + speedRadius.z + tex.z*textureInfluence)*2.0-1.0;\n    noiseRadius.w *= noise(radius*noiseRadiusTiles.w + speedRadius.w + tex.x*textureInfluence)*2.0-1.0;\n    \n    vec4 speed = noiseEvolution * stepTime;\n    float n1 = noise(angle*noiseTiles.x + speed.x + noiseRadius.x + tex.x*textureInfluence)*noiseWeights.x;\n    float n2 = noise(angle*noiseTiles.y + speed.y + noiseRadius.y + tex.y*textureInfluence)*noiseWeights.y;\n    float n3 = noise(angle*noiseTiles.z + speed.z + noiseRadius.z + tex.z*textureInfluence)*noiseWeights.z;\n    float n4 = noise(angle*noiseTiles.w + speed.w + noiseRadius.w + tex.x*textureInfluence)*noiseWeights.w;\n    \n    float n = (n1+n2+n3+n4)/(noiseWeights.x+noiseWeights.y+noiseWeights.z+noiseWeights.w);\n    \n    vec4 c1 = mix(vec4(0.0), vec4(1.0), smoothstep(center1 + n*noiseInfluence1, center1 + n*noiseInfluence1 + smooth1, radius));\n    vec4 c2 = mix(vec4(0.0), vec4(1.0), smoothstep(center2 + n*noiseInfluence2, center2 + n*noiseInfluence2 + smooth2, radius));\n    \n    vec4 c = mix(c1, c2, finalMix) * smoothstep(0.0, 0.75, (1.0 - radius)) + tex*textureAdd;\n    \n\tfragColor = c;\n\t*/\n    \n    vec4 speedRadius = noiseRadiusEvolution * stepTime;\n    vec4 noiseRadius = vec4(noiseRadiusWeight);\n    tex.w=tex.x;\n    vec4 a = radius*noiseRadiusTiles + speedRadius + tex*textureInfluence;\n    noiseRadius *= vec4( noise(a.x), noise(a.y), noise(a.z), noise(a.w) );\n    \n    vec4 speed2 = noiseEvolution * stepTime;\n    a = angle*noiseTiles + speed2 + noiseRadius*2.-1. + tex*textureInfluence;\n    vec4 N = vec4( noise(a.x), noise(a.y), noise(a.z), noise(a.w) );\n    \n    float n = dot(N,noiseWeights)/dot(N/N,noiseWeights);\n    \n    float c1 = smoothstep(0., smooth1, radius -center1 -n*noiseInfluence1);\n    float c2 = smoothstep(0., smooth2, radius -center2 -n*noiseInfluence2);\n    \n    fragColor = mix(c1, c2, finalMix) * smoothstep(0., .75, 1.-radius) + tex*textureAdd;\n}","name":"Image","description":"","type":"image"}]}