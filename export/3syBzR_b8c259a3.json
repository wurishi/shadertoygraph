{"ver":"0.1","info":{"id":"3syBzR","date":"1606352783","viewed":421,"name":"Dithery Palette Cam","username":"Farbs","description":"Translates webcam input (or any other source) into c64 pixel art, with stipple dithering.","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["retro","filter","c64","commodore"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// c64\n//vec3 palette[16] = vec3[16](vec3(0.0,0.0,0.0), vec3(0.38431372549,0.38431372549,0.38431372549), vec3(0.537254901961,0.537254901961,0.537254901961), vec3(0.678431372549,0.678431372549,0.678431372549), vec3(1.0,1.0,1.0), vec3(0.623529411765,0.305882352941,0.266666666667), vec3(0.796078431373,0.494117647059,0.458823529412), vec3(0.427450980392,0.329411764706,0.0705882352941), vec3(0.63137254902,0.407843137255,0.235294117647), vec3(0.788235294118,0.83137254902,0.529411764706), vec3(0.603921568627,0.886274509804,0.607843137255), vec3(0.360784313725,0.670588235294,0.36862745098), vec3(0.41568627451,0.749019607843,0.776470588235), vec3(0.533333333333,0.494117647059,0.796078431373), vec3(0.313725490196,0.270588235294,0.607843137255), vec3(0.627450980392,0.341176470588,0.639215686275));\n//float closeDist = 1.5;\n\n// CMYKish\n//vec3 palette[8] = vec3[8](vec3( 0, 0, 0 ), vec3( 0.769, 0.267, 0.282 ), vec3( 0.188, 0.518, 0.361 ), vec3( 0.941, 0.940, 0.282 ), vec3( 0.204, 0.188, 0.455 ), vec3( 0.737, 0.188, 0.424 ), vec3( 0157, 0.455, 0.769 ), vec3( 1, 1, 1 ) );\n//float closeDist = 1.2;\n\n// ARNE16\nvec3 palette[16] = vec3[16]( vec3( 0, 0, 0 ), vec3( 0.282, 0.231, 0.173 ), vec3( 0.725, 0.114, 0.212 ), vec3( 0.863, 0.427, 0.545 ), vec3( 0.616, 0.616, 0.616 ), vec3( 0.631, 0.384, 0.173 ), vec3( 0.906, 0.525, 0.247 ), vec3( 0.965, 0.878, 0.471 ), vec3( 1, 1, 1 ), vec3( 0.110, 0.149, 0.192 ), vec3( 0.192, 0.282, 0.302 ), vec3( 0.290, 0.533, 0.165 ), vec3( 0.647, 0.804, 0.259 ), vec3( 0.067, 0.349, 0.510 ), vec3( 0.251, 0.627, 0.933 ), vec3( 0.710, 0.867, 0.933 ) );\nfloat closeDist = 1.5;\n\nvec3 pal( vec3 col, vec2 fragCoord )\n{\n    // clamp it\n    col = clamp(col, 0.0, 1.0);\n    \n    // find nearest two\n    float distA=1000.0;\n    float distB=1000.0;\n    vec3 a;\n    vec3 b;\n    int indexA = 0;\n    int indexB = 0;\n    for(int i=0;i<palette.length();i++)\n    {\n        float testDist = dot(abs(palette[i]-col),vec3(1.0,1.0,1.0));\n        if( testDist < distA )\n        {\n            distB = distA;\n            b = a;\n            indexB = indexA;\n            distA = testDist;\n            a = palette[i];\n            indexA = i;\n        }\n        else if( testDist < distB )\n        {\n            distB = testDist;\n            b = palette[i];\n            indexB = i;\n        }\n\t}\n    \n    // solid colour if target is fair bit further from B than from A\n    b = distA * closeDist < distB ? a : b;\n\n    // stipple, ordered by index\n    return (mod(fragCoord.x,2.0) == mod(fragCoord.y,2.0)) == ( indexA < indexB ) ? a : b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = floor(iResolution.x/256.0);\n    fragCoord=floor(fragCoord/scale);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // sample, make a bit more colourful\n    vec3 col = texture(iChannel0,uv*scale).rgb;\n    col *= col+0.5;\n    col *= col+0.5;\n    col *= col+0.5;\n\n    // Palettize\n    col = pal(col, fragCoord);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}