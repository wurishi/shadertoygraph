{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Simple raytracer in C64 graphics style\n// \n// Version 1.0 (2013-04-01)\n// Simon Stelling-de San Antonio\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float camtime = 1.23*iTime;\n\n  vec2 p = fragCoord.xy / iResolution.xy;\n  p.y = 1.0 - p.y;\n  p *= 200.0;\n  p.x *= (iResolution.x / iResolution.y);\n  p.x /= 2.0;\n  p = floor(p);\n  p.x *= 2.0;\n\n  vec2 an = vec2( sin(iTime), cos(iTime) )*2700.0;\n\n  // OK, starting here the code looks kind of funny\n  // because it's a very straight port from a C128 BASIC 7.0 program. :)\n  float c = 2500.0;\n  float k = c/2.0;\n  float e = 0.0;\n  float f = -3000.0;\n  float g = 0.0;\n  float h = p.x-160.0;\n  float j = 112.0-p.y;\n  float s = sqrt(h*h+67600.0+j*j);\n  h /= s;\n  float i = 260.0/s;\n  j /= s;\n  float pp = i*3000.0+j*150.0;\n  float d = pp*pp-8120000.0;\n  if (d >= 0.0) {\n    float l = pp-sqrt(d);\n    if (l > 0.0) {\n      e = l*h;\n      f = f+l*i;\n      g = l*j;\n      float n = g-150.0;\n      s = e*e+f*f+n*n;\n      s = 2.0*(e*h+f*i+n*j)/s;\n      h -= s*e;\n      i -= s*f;\n      j -= s*n;\n    }\n  }\n  float b = 2.0;\n  float q = 107.0-190.0*j;\n  if (d >= 0.0) {\n    q -= 40.0;\n  }\n  if (j < 0.0) {\n    b = 1.0;\n    float l = (g+2000.0)/j;\n    float t = e-l*h+c/4.0+an.x;\n    float u = f-l*i+an.y;\n    t = floor((t-c*floor(t/c))/k);\n    u = floor((u-c*floor(u/c))/k);\n    q = 40.0 + 40.0*j;\n    if (t == u) {\n      q += 180.0*j - 88.0;\n    }\n  }\n  float r = 88.0 - 19.0*(mod(p.y,4.0)+mod(p.x,4.0));\n  float z = 3.0;\n  if (q > -r) {\n    if (q > r) {\n      z -= 3.0;\n    } else {\n      z -= b;\n    }\n  }\n  if ((j < 0.0) && (z == 3.0)) {\n    z = 4.0;\n  }\n\n  float cc;\n  if        (z ==  0.0) { cc =  3.0;\n  } else if (z ==  1.0) { cc = 14.0;\n  } else if (z ==  2.0) { cc = 10.0;\n  } else if (z ==  3.0) { cc =  6.0;\n  } else                { cc =  9.0;\n  }\n  vec3 col;\n  if        (cc ==  0.0) { col = vec3(0.0);\n  } else if (cc ==  1.0) { col = vec3(1.0);\n  } else if (cc ==  2.0) { col = vec3(137.0,  64.0,  54.0)/256.0;\n  } else if (cc ==  3.0) { col = vec3(122.0, 191.0, 199.0)/256.0;\n  } else if (cc ==  4.0) { col = vec3(138.0,  70.0, 174.0)/256.0;\n  } else if (cc ==  5.0) { col = vec3(104.0, 169.0,  65.0)/256.0;\n  } else if (cc ==  6.0) { col = vec3( 62.0,  49.0, 162.0)/256.0;\n  } else if (cc ==  7.0) { col = vec3(208.0, 220.0, 113.0)/256.0;\n  } else if (cc ==  8.0) { col = vec3(144.0,  95.0,  37.0)/256.0;\n  } else if (cc ==  9.0) { col = vec3( 92.0,  71.0,   0.0)/256.0;\n  } else if (cc == 10.0) { col = vec3(187.0, 119.0, 109.0)/256.0;\n  } else if (cc == 11.0) { col = vec3( 85.0,  85.0,  85.0)/256.0;\n  } else if (cc == 12.0) { col = vec3(128.0, 128.0, 128.0)/256.0;\n  } else if (cc == 13.0) { col = vec3(172.0, 234.0, 136.0)/256.0;\n  } else if (cc == 14.0) { col = vec3(124.0, 112.0, 218.0)/256.0;\n  } else                 { col = vec3(171.0, 171.0, 171.0)/256.0;\n  }\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mdl3zN","date":"1364771363","viewed":1026,"name":"C64 raytracer","username":"ssdsa","description":"Simple raytracer in C64 graphics stype","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","c64"],"hasliked":0,"parentid":"","parentname":""}}