{"ver":"0.1","info":{"id":"7ddXR8","date":"1632658265","viewed":202,"name":"quick ray casting","username":"kinonik","description":"ray casting algorithm example for 3d voxel engine","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raycasting","noob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 u;\nvec3 c = vec3(1.0); // out color\n\nvoid circ(vec2 g, vec4 col) { // draw a circle\n\tif (length(g - u) < 0.06)\n\t\tc = mix(c, col.rgb, col.a);\n}\n\nvoid rect(vec2 g) { // draw a rectangle\n\tif (ivec2(g) - ivec2(u) == ivec2(0))\n    c = mix(c, vec3(0.0, 0.8, 0.0), 0.3);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tu = fragCoord.xy / iResolution.y * 10.;\n\tfloat time = iTime * 0.1 + 3.5;// time\n\tvec2 fu = fract(u);\n\tc *= 1. - min(.5, pow((abs(fu.x + fu.y - 1.0) + abs(fu.x - fu.y)), 50.)); //drawing a grid\n\n\tvec2 rd = -normalize(vec2(sin(time), cos(time))); // vector of ray\n\tvec2 ro = vec2(iMouse / iResolution.y) * 10.; // begin of ray\n\n\tvec2 pd = 1. / abs(rd); // period of collisions\n\tvec2 flip = -sign(rd); \n\n\tvec2 dv1 = ro;\n\tif (length(ro - u) < 0.07) {\n\t\tc = vec3(0.7, 0.0, 0.5);\n\t}\n\tif (length(ro + rd - u) < 0.03) {\n\t\tc = vec3(0.0, 0.3, 0.3);\n\t}\n    \n    float t = 0.;\n\tfor (int i = 0; i < 20; i++) {\n\t\tvec2 op = ((dv1 - floor(dv1)) * flip - min(vec2(0.), flip)) * pd;\n\t\tfloat minop = min(op.x, op.y);\n\t\tif (true) { //or  i == 0\n\t\t\tcirc(ro + rd * (t + op.x), vec4(1.0, 0.0, 0.0, 0.3));\n\t\t\tcirc(ro + rd * (t + op.y), vec4(0.0, 0.0, 1.0, 0.3));\n\t\t}\n\t\tif (true) { //or  i == 1\n\t\t\trect(dv1);\n\t\t}\n\t\tt += minop + 0.002;\n\t\tdv1 = ro + rd * t;\n\t}\n    iMouse;\n\tfragColor = vec4(vec3(c), 1.0);\n}","name":"Image","description":"","type":"image"}]}