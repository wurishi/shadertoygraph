{"ver":"0.1","info":{"id":"3tVfRy","date":"1614604084","viewed":188,"name":"MTU Hat","username":"xot","description":"Micro Technology Unlimited 3D plot featured in computer magazine advertisements of the early 80s","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["80s","retro","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Micro Technology Unlimited 3D plot featured in \n// computer magazine advertisements of the early 80s.\n//\n//    https://archive.org/details/creativecomputing-1982-03-a/page/n112/mode/1up\n//\n// SDF and line shading implemented by John Leffingwell (xot)\n//\n// Defaults to fixed camera angle but can be unlocked for mouse control.\n//\n// Underlying ray marcher based on: \n//\n//    https://www.shadertoy.com/view/wdGGz3\n//\n//    \"ShaderToy Tutorial - Ray Marching Operators 2\" \n//    by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n//    License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n//    This is the starting point for a YouTube tutorial:\n//    https://youtu.be/Vmb7VGBVZJA\n\n// FIXED locks camera and enables skew transformation to mimic original advertisement.\n#define FIXED 1 \n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p) {\n\n    // MTU hat function displaces xz-plane\n    float XT = length(p.xz);\n    float XF = 1.6;    \n    float d = p.y - XF*(1.0+(sin(XT)+0.4*sin(3.0*XT)));\n    \n    // intersection with cylinder to crop outer region\n    d = max(d, XT-4.7);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += 0.4*dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // Camera can be controlled by mouse if FIXED is set to zero.\n\tvec2 m = mix( iMouse.xy / iResolution.xy, vec2(0,195) / vec2(640,360), float(FIXED) );\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 40, -18);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 6.0);\n    \n    // Skew rays to mimic oblique projection of\n    // original advertisement but it doesn't really\n    // work right when the camera moves around.\n    // 0.4 is a pretty good value here (and in general).\n    // Disabled when FIXED is set to zero.\n    float skew = mix( 0.0, 0.4, float(FIXED) );\n    ro.x += skew * ro.z;\n    rd.x += skew * rd.z;\n    \n    // march!\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n        // point of intersection\n    \tvec3 p = ro + rd * d;\n        \n        // incident angle\n        float angle = dot(-rd, GetNormal(p));\n        \n        // filtering ¯\\_(ツ)_/¯ \n        float scale = 15.0;\n        float f = scale * fwidth(d);\n        \n        // lines get thicker the greater the incident angle to\n        // mimic the bunched up pixels seen in original plot.\n        float edge = smoothstep(1.0, 0.0, angle);\n        col = vec3(smoothstep(0.85-edge-f,1.0-edge,0.5+0.5*sin(90.*p.z)));\n        \n        // hide rim\n        col *= smoothstep(4.7, 4.65, length(p.xz));\n        \n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}