{"ver":"0.1","info":{"id":"DdlcWN","date":"1706648666","viewed":185,"name":"Bouncy Laser","username":"Spi3lot","description":"Bouncy Laser","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["light","bouncy","laser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / R.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sd(vec2 p) {\n    return sd(p, R.xy);\n}\n\nvec2 normal(vec2 p) {\n    vec2 e = vec2(EPSILON, 0);\n\n    return normalize(sd(p) - vec2(sd(p - e.xy),\n                                  sd(p - e.yx)));\n}\n\nfloat raymarch(vec2 ro, vec2 rd) {\n    float dO = 0.0;\n    float dS;\n    vec2 p;\n\n    for (int i = 0; i < 50; i++) {\n        p = ro + rd * dO;\n        dS = sd(p);\n        if (dS <= EPSILON) break;\n        dO += dS;\n    }\n\n    return dO;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord == vec2(1.5, 0.5)) {\n        fragColor = texelFetch(iChannel0, ivec2(0, 0), 0);\n    }\n\n    if (iFrame < 10) {\n        fragColor = vec4(R.xy * 0.5, vec2(cos(2.0), sin(2.0)));\n        return;\n    }\n\n    if (fragCoord != vec2(0.5, 0.5)) {\n        return;\n    }\n\n    vec4 data = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec2 pos = data.xy;\n    vec2 vel = data.zw;\n    float d = raymarch(pos, vel);\n    pos += SPEED * d * vel;\n\n    if (sd(pos) <= EPSILON) {\n        vec2 n = normal(pos);\n        vel = reflect(vel, n);\n        pos += n * (EPSILON + EPSILON);\n    }\n\n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float sd(vec2 p) {\n    return sd(p, R.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (sd(fragCoord) <= 0.0) {\n        fragColor = vec4(1);\n        return;\n    }\n\n    vec2 uv = fragCoord / R.xy;\n    vec2 pos = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 prev = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    bool intersect = (udLine(fragCoord, prev, pos) <= THICKNESS);\n    fragColor = (intersect) ? vec4(0, intersect, 0, 1) : texture(iChannel1, uv) * GLOW;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define EPSILON 0.001\n#define SPEED 1.0\n#define GLOW 0.95\n#define THICKNESS 1.0\n\nfloat udLine(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec2 p, vec2 size)\n{\n    vec2 d = abs(p) - size;  \n\treturn length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sd(vec2 p, vec2 bounds) {\n    float box = -sdBox(p - bounds * 0.5, bounds * 0.5);\n    float circle = sdCircle(p - bounds * 0.3, length(bounds) * 0.1);\n    return min(box, circle);\n}","name":"Common","description":"","type":"common"}]}