{"ver":"0.1","info":{"id":"msdyRX","date":"1729533326","viewed":24,"name":"CircularPulse","username":"Lounarisnia","description":"2nd Try","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (int i = 0; i < 2; i++) {\n        uv = fract(uv * 1.5) -.5;\n        vec2 b = vec2(6.1, 0.1);\n        vec2 d = fract(abs(uv) - b);\n        float box = length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n        vec3 col = palette(length(uv0) * iTime*1.,\n            vec3(0.006,0.501,0.424),\n            vec3(0.828,0.426,0.687),\n            vec3(0.219,1.271,0.610),\n            vec3(1.977,5.198,3.359)\n        );\n\n        box = sin(box*8. * iTime) / 8.;\n        box = abs(box * 2.0);\n        box = box * exp(-length(uv0));\n        box = pow(0.1 / box, 9.0);\n        box = exp(box * -0.1);\n\n        col += box;\n        col = -1.0 / col;\n        finalColor += step(0.1, col);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}