{"ver":"0.1","info":{"id":"MlsSRj","date":"1438168893","viewed":541,"name":"SandyWind","username":"boubek","description":"Image-based animated noise. \nControl: the sole interface is the blue point appearing when clicking on the image. Its X coordinate controls speed damping and its Y coordinate controls depth.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["noise","animation","2dshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"/*\n * \"SandyWind\" by Tamy Boubekeur a.k.a. boubek - 2015\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * This shader uses an image-based animated noise. \n * The noise is generated using two images: one giving the color mood \n * and the other one giving the motion structure.\n */\n\nconst int MAX_DEPTH = 50;\nconst float SPEED_FACTOR = 10.0;\n\n// Image-based noise\nvec3 IBN (vec2 uv, float speedDamping, int depth) {\n    vec3 color = vec3 (0.0);\n    float sumW = 0.0;\n    int numIter = min (depth, MAX_DEPTH);\n    for (int i = 1; i <= numIter; ++i) {\n        float time = 0.7*iTime/(float (i));\n        float w = 1.0-float (i)/float (depth);\n        vec2 duv = texture (iChannel0, uv+vec2 (time)).rg/speedDamping;\n    \tvec3 rgb = texture (iChannel1, uv+duv).rgb;\n        color += w * rgb;\n        sumW += w;\n    }\n    return color/sumW;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (distance (fragCoord.xy, iMouse.xy) < 5.0) // Control cursor\n        fragColor = vec4(0.0, 0.45, 1.0, 1.0);\n    else {\n    \tfloat md = float (MAX_DEPTH);\n    \tint depth = int (md-clamp (md*iMouse.y/iResolution.y, 0.0, md-2.0));\n    \tfloat speedDamping = clamp (SPEED_FACTOR*iMouse.x/iResolution.x, 1.0, SPEED_FACTOR);\n    \tfragColor = vec4 (IBN (uv, speedDamping, depth), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}