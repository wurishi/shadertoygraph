{"ver":"0.1","info":{"id":"tsByzK","date":"1586948647","viewed":145,"name":"vines","username":"nexor","description":"Space resets, draw by clicking.","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["convolution","reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec3 col = vec3(.0);\n    \n    {\n        col += dot(vec3(0.2126,.7152,.0722),texture(iChannel0,fragCoord/iResolution.xy).rgb);\n        col *= vec3(.2,.9,.0);\n        col*=.3;\n    }\n    col = pow(col,vec3(1./2.2));\n \tfragColor = vec4(col,1.);   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define time iTime\n#define resolution iResolution.xy\n\n#define replim(x,n,a,b) ((p)-(n)*clamp(round(p/n),(a),(b)))\n#define fetch(pass,uv) texelFetch(pass,ivec2(mod(vec2(uv),(res))),0)\n\n#define pi 3.14159\n\nmat2 rot(float a)\n{\n \tfloat c=cos(a),s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat box(vec2 p, vec2 s)\n{\n    p=abs(p)-s;\n    return length(max(p,0.))+min(0.,max(p.x,p.y));\n}\n\nfloat circle(vec2 p,float r)\n{\n    return length(p)-r;\n}\n\nfloat sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, float rb )\n{\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nvec4 convolution(out vec4 prev, sampler2D pass, mat3 w, vec2 res)\n{\n    vec4 lap=vec4(0.);\n    ivec2 fc = ivec2(gl_FragCoord.xy);\n    ivec3 off = ivec3(-1.,0.,1.);\n    \n    lap += fetch(pass,fc+off.xx)*w[0].x;\n    lap += fetch(pass,fc+off.xy)*w[1].x;\n    lap += fetch(pass,fc+off.xz)*w[2].x;\n    lap += fetch(pass,fc+off.yx)*w[0].y;\n    prev = fetch(pass,fc+off.yy);\n    lap += fetch(pass,fc+off.yz)*w[2].y;\n    lap += fetch(pass,fc+off.zx)*w[0].z;\n    lap += fetch(pass,fc+off.zy)*w[1].z;\n    lap += fetch(pass,fc+off.zz)*w[2].z;\n    lap += prev*w[1].y;\n    \n    return lap;\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 get_params(vec2 p, out float dt)\n{\n    \n\tfloat A = .8;\n\tfloat B = .3;\n    \n\tfloat F = .0725;\n\tfloat K = .0635;\n    \n    dt = 1.25;\n    \n    return clamp(vec4(A,B,F,K),0.,1.);   \n}\n\nfloat letterS(vec2 p)\n{\n \tfloat d=1e3;\n    float ta=pi*.25;\n    float tb=pi*.75;\n    p.y*=1.75;\n    vec2 a=vec2(sin(ta),cos(ta));\n    vec2 b=vec2(sin(tb),cos(tb));\n    p.y-=.05;\n    d=sdArc(p,a,b,.05,.002);\n    ta+=pi;\n    a=vec2(sin(ta),cos(ta));\n    p.y-=-.1;\n    return min(d,sdArc(p,a,b,.05,.002));\n}\n\nfloat letterE(vec2 p)\n{\n \tfloat d=1e3;\n    float ta=pi*1./8.;\n    float tb=pi*.825;\n    vec2 a=vec2(sin(ta),cos(ta));\n    vec2 b=vec2(sin(tb),cos(tb));\n    d=sdArc(p,a,b,.05,.002);\n    d=min(d,box(p,vec2(.05,.002)));\n    return d;\n}\n\nfloat letterN(vec2 p)\n{\n \tfloat d=1e3;\n    float e=1e3;\n    \n    float t=pi*.5;\n    vec2 a=vec2(sin(t),cos(t));\n    vec2 q=p;\n    d=sdArc(p,a,a,.05,.002);\n    e=box(q-vec2(-.05,.0),vec2(.001,.05));\n    e=min(e,box(q-vec2(.05,-.025),vec2(.001,.025)));\n    return min(d,e);\n}\n\nfloat letterI(vec2 p)\n{\n \treturn min(box(p,vec2(.002,.05)),circle(p-vec2(.0,.1),.001));\n}\n\nfloat letterV(vec2 p)\n{\n \tfloat d=1e3;\n    p.x=abs(p.x)-.025;\n    p*=rot(-pi*.35);\n    \n    d=box(p,vec2(.055,.002));\n    return d;\n}\n\nfloat seed(vec2 p)\n{\n    float d = 1e3;\n    \n    d=min(d,letterV(p-vec2(-.2,.0)));\n    d=min(d,letterI(p-vec2(-.1,.0)));\n    d=min(d,letterN(p-vec2( .0,.0)));\n    d=min(d,letterE(p-vec2( .135,.0)));\n    d=min(d,letterS(p-vec2( .27,.0)));\n    \n    return smoothstep(.015,.0,d);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/resolution;\n    vec2 p = (fragCoord.xy-.5*resolution)/resolution.y;\n    \n    vec3 col = vec3(0.);\n    float space = texelFetch(iChannel2,ivec2(32,1),0).x;\n    \n    if(iFrame < 10 || space > .0)\n    {\n        col.rg = vec2(1.,seed(p));\n        col.b = texture(iChannel1,uv*15.).x*1.5;\n    }\n    else\n    {\n        vec2 mouse = (iMouse.xy-.5*resolution)/resolution.y;\n        vec2 click = (iMouse.zw-.5*resolution)/resolution.y;\n        \n        \n        \n        vec2 curr = vec2(0.);\n        vec4 prev = vec4(0.);\n        mat3 w = mat3(\n            -.025,-.015,-.025,\n            -.02 ,   1., -.02,\n            -.01, .025,-.01\n        );\n        vec4 lap = convolution(prev,iChannel0,w,resolution);\n        float dt = 0.;\n        vec4 pms = get_params(p, dt);\n        float da=pms.x,db=pms.y;\n        float f=pms.z, k=pms.w;\n        \n        if(iMouse.z >.0)\n        {\n            col += smoothstep(.01,.0,circle(p-(mouse-click),smoothstep(.0,1.,length(p-mouse))*.1));\n        }\n        \n        \n        if(prev.z > .1)\n        {\n        \tfloat pr = prev.x*prev.y*prev.y;\n        \n        \tcurr.x = da * lap.x - pr + f * (1.-prev.x);\n        \tcurr.y = db * lap.y + pr - (k + f) * prev.y;\n   \n        \n        \tcurr = prev.xy + curr*dt;\n        }\n        else\n        {\n            curr = prev.xy;\n        }\n        \n        col += vec3(curr.xy,prev.z*.999-.001);\n        col = clamp(col,.0,1.);\n        //col *= smoothstep(.7,.5,length(p));\n    }\n    \n    \n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}