{"ver":"0.1","info":{"id":"cdKfW3","date":"1698715683","viewed":69,"name":"Boxes and Rings","username":"ElSolem","description":"ring light: https://www.shadertoy.com/view/mtyGWy\nboxes: https://www.shadertoy.com/view/cdKBDy\nxy = p.x / p.y :: secret sauce","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert pixel coordinates to a normalized range (-1 to 1)\n    vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n\n    // Calculate the value of xy using your equation\n    float xy = p.x / p.y;\n\n    // Define a threshold for plotting the point\n    float threshold = 2.; // Adjust this value as needed // air: 1.0, water: 1.33, glass: 1.5, diamond: 2.4\n\n    // Check if xy is within the threshold to plot the point\n    if (abs(xy) < abs(threshold))\n    {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n    }\n    else\n    {\n    //Voxel index for coloring\n    int i;\n    //Resolution, rounded/centered screen coords, xy pos, z (vec2 for convenience), closest plane\n    for(vec2 c=iResolution.xy, u=(roundEven(fragCoord)-c*.5)/c.y, p, z=p+2e1;\n            //Loop to a max distance of 100 or when you hit something (xor + double mod technique)\n            z.x<1e2 && (i=int(p)^int(p.y)^int(z))%93%43<32; //Try playing with these numbers!\n            //Compute next xy pos with time offset\n            p=u*z+iTime*vec2(2,9))\n\n        //Compute the distance to the nearest x and y planes\n        c=fract(-p*sign(u))/abs(u),\n        //March to next nearest x, y and z plane\n        z+=min(min(c,c.yx), fract(-z))+2e-5,\n        //Colorize with depth and voxel index\n        fragColor.rgb=(1e2-z.x)*(2.-cos(vec3(i/=3,i+5,i+4)));\n    \n    //Dampen and shade\n    fragColor/=2e2+fwidth(fragColor.g)*5e2;\n    }\n}\n\n// https://www.shadertoy.com/view/dsVBRd - Set as default cause if you aren't careful it can turn into flash\n\n// Needed to test this further so used the shader from this link\n// and this one\n// https://www.shadertoy.com/view/Mdt3Df\n\n// You can put any? into the if-else blocks. If you change the origin from 0 to any number the view because bigger/wider\n\n// https://www.shadertoy.com/view/dsyBDy - double mod by Xor","name":"Image","description":"","type":"image"}]}