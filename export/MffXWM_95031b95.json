{"ver":"0.1","info":{"id":"MffXWM","date":"1705327651","viewed":49,"name":"Transition - tiling","username":"MV10","description":"A group of several interesting transitions and crossfades I'm revising for parameterization in my external audio visualizer program. \nRestart to see it run again, after iTime exceeds fadeDuration only the new buffer is shown. Change EFFECT on line 16.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["transition","crossfade"],"hasliked":0,"parentid":"mtdcWn","parentname":"231104_tilewipes"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Note some of these have been altered from anonymousAntelope's\n// originals to produce a full transition over fadeLevel 0.0 to 1.0.\n\n#define oldBuffer iChannel1\n#define newBuffer iChannel0\nfloat fadeDuration = 3.0;\nfloat fadeLevel;\n\n// 1 - Circular reveal\n// 2 - Horizontal wipe\n// 3 - Vertical wipe\n// 4 - Center-out grid\n// 5 - Top-right to bottom-left\n// 6 - Edges-in grid\n#define EFFECT 6\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // This is a uniform in my real program\n    fadeLevel = clamp(iTime / fadeDuration, 0.0, 1.0);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uvOriginal = uv;\n    vec2 uvCenter = (uv - 0.5) * 2.0;\n    uv.x *= aspectRatio;\n\n    uv = fract(uv * 10.0); // tiling factor\n    uv -= 0.5; // shifts the 0.0 point to the middle of each tile\n    uv *= 2.0; // changes the scale of each tile to -1 to 1\n    \n    float timing;\n    float value;\n\n    if(EFFECT == 1) {\n        // Circular reveal\n        timing = fadeLevel * 1.42; // sin(iTime) * 1.42;\n        value = step(timing, length(uv));\n    }\n\n    if(EFFECT == 2) {\n        // Horizontal wipe\n        timing = fadeLevel * 2.0 - 1.0; // sin(iTime);\n        value = step(timing, uv.x);\n    }\n\n    if(EFFECT == 3) {\n        // Vertical wipe\n        timing = fadeLevel * 2.0 - 1.0; // sin(iTime);\n        value = step(timing, uv.y);\n    }\n\n    if(EFFECT == 4) {\n        // Center-out grid\n        timing = fadeLevel; //sin(iTime);\n        value = step(timing, abs(uv.x)) + step(timing, abs(uv.y));\n    }\n\n    if(EFFECT == 5) {\n        // Top-right to bottom-left\n        timing = fadeLevel * 2.0 - 1.0; //sin(iTime);\n        value = step(timing + uvOriginal.x, abs(uv.x)) + step(timing + uvOriginal.y , abs(uv.y));\n    }\n\n    if(EFFECT == 6) {\n        // Edges-in grid\n        timing = (fadeLevel * 2.0 - 1.0) + min(length(uvCenter), 1.0); // sin(iTime) + min(length(uvCenter), 1.0);\n        value = step(timing, abs(uv.x)) + step(timing, abs(uv.y));\n    }\n    \n    vec4 to = texture(oldBuffer, uvOriginal);\n    vec4 tn = texture(newBuffer, uvOriginal);\n    fragColor = vec4(mix(tn, to, min(value, 1.0)));\n}","name":"Image","description":"","type":"image"}]}