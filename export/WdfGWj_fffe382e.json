{"ver":"0.1","info":{"id":"WdfGWj","date":"1547459059","viewed":167,"name":"Deck card","username":"TaoJinJin","description":"this is an experiment of drawing 2d shape using the method in pixelspiritdeck.com","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifndef QTR_PI\n#define QTR_PI 0.78539816339\n#endif\n#ifndef HALF_PI\n#define HALF_PI 1.5707963267948966192313216916398\n#endif\n#ifndef PI\n#define PI 3.1415926535897932384626433832795\n#endif\n#ifndef TWO_PI\n#define TWO_PI 6.2831853071795864769252867665590\n#endif\n#ifndef TAU\n#define TAU 6.2831853071795864769252867665590\n#endif\n#ifndef PHI\n#define PHI 1.618033988749894848204586834\n#endif\n#ifndef EPSILON\n#define EPSILON 0.0000001\n#endif\n\nvec2 scale(vec2 st, vec2 n) {\n\treturn st * n;\n}\n\nvec2 rotate(vec2 st, float a) {\n    st = mat2(cos(a),-sin(a),\n              sin(a),cos(a))*(st-.5);\n    return st;\n}\n\nfloat fill(float x, float size) {\n    return 1. - step(size, x);\n}\n\nfloat rectSDF(vec2 st, vec2 s) {\n\treturn max(abs(st.x/s.x), abs(st.y/s.y));\n}\n\nfloat circleSDF(vec2 st) {\n\treturn length(st - .5) * 2.;\n}\n\n\nfloat circleSDF2(vec2 st, float r) {\n    float v = (length(st) - r);\n\treturn v * 2.;\n}\n\nfloat starSDF2(vec2 uv, int V, float s) {\n\t// st = st * 4. - 2.;\n    vec2 st = uv;\n    float a = atan(st.y, st.x) / TAU;\n    float seg = a * float(V);\n    a = ((floor(seg) + 0.5)/float(V) + mix(s, -s, step(.5, fract(seg)))) * TAU;\n\treturn abs(dot(vec2(cos(a), sin(a)), st));\n}\n\nfloat stroke(float x, float size, float w) {\n\tfloat d = step(size, x + w * .5) - step(size, x - w * .5);\n\treturn clamp(d, 0., 1.);\n}\n\nfloat fakeAtan(float v) {\n    float abs_v = abs(v);\n    return log(abs_v + 1.)*sign(v);\n}\n\nfloat triSDF(vec2 uv) {\n    vec2 st = (uv * 2. - 1.) * 2.;\n    return max(abs(st.x) * 0.866025 + st.y * 0.5, -st.y * 0.5);\n}\n\nfloat hexSDF(vec2 uv) {\n\tvec2 st = abs(uv * 2. - 1.);\n    return max(abs(st.y), st.x * 0.866025 + st.y * 0.5);\n}\n\nfloat crossSDF(vec2 uv, float s) {\n\tvec2 size = vec2(.25, s);\n    return min(rectSDF(uv.xy, size.xy), rectSDF(uv.xy, size.yx));\n}\n\nfloat polySDF(vec2 uv, int V) {\n\tfloat a = atan(uv.x, uv.y) + PI;\n    float r = length(uv);\n    float v = TAU/float(V);\n    return cos(round(a / v) * v - a) * r;\n}\n\nfloat heartSDF(vec2 uv) {\n\tvec2 st = uv;\n    float r = length(st) * 5.0;\n    st = normalize(st);\n    return r -\n        \t((st.y*pow(abs(st.x), 0.67))/\n        \t(st.y + 1.5) - (2.) * st.y + 1.26);\n}\n\nfloat flowerSDF(vec2 uv, int N) {\n\tvec2 st = uv;\n    float r = length(st) * 2.;\n    float a = atan(st.y, st.x);\n    float v = float(N) * .5;\n    return 1. - (abs(cos(a * v)) * .5 + .5) / r;\n}\n\nfloat rhombSDF(vec2 uv) {\n\treturn max(triSDF(uv), triSDF(vec2(uv.x, 1. - uv.y)));\n}\n\nfloat vesicaSDF(vec2 st, float r, float w) {\n\tvec2 offset = vec2(w * .5, 0.);\n    return max(circleSDF2(st - offset, r), circleSDF2(st + offset, r));\n}\n\n\nfloat spiralSDF(vec2 uv, float t) {\n    vec2 st = uv - .5;\n    float r = dot(st,st);\n    float a = atan(st.y,st.x);\n    return abs(sin(fract(log(r)*t+a*0.159)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st =  ( fragCoord - .5* iResolution.xy ) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 color = 0.5 + 0.5*cos(iTime+st.xyx+vec3(0,2,4));\n    \n    // vec3 color = vec3(0);\n    color -= stroke(circleSDF2(st, 0.08), .4, .035);\n    color -= stroke(starSDF2(st, 4 + 2 * int(sin(iTime) * 2.0), 0.296), 0.12, 0.02);\n  \tcolor -= fill(starSDF2(st, 8 * int((sin(iTime) + 2.) * 2.), 0.296), 0.033);\n    color -= stroke(heartSDF(scale(st, vec2(3.2, 3.5)) - vec2(0., 0.3)), 0.27, 0.18);\n    \n    vec2 c = vec2(-2., 0);\n    color -= fill(flowerSDF(rotate(st + vec2(1.0, 0.5), iTime + 1.) * 5., 3), 0.02);\n    color -= fill(flowerSDF(rotate(st + vec2(0.0, 0.5), iTime) * 5., 3), 0.02);\n    \n    color -= stroke(vesicaSDF(rotate(st, HALF_PI) + vec2(0.5, -1.), 0.1, 0.25 * (sin(iTime * 1.5)*0.2 + 1.)), .4, .03);\n    color -= stroke(vesicaSDF(rotate(st, HALF_PI) + vec2(0.5, 0.), 0.1, 0.25 * (cos(iTime * 1.5)*0.2 + 1.)), .4, .03);\n    \n    color -= stroke(crossSDF(st + vec2(0., -0.4), 0.8), .12, .05);\n    color -= stroke(rhombSDF(st + vec2(0.5, 0.1)), .12, .03);\n    vec3 col = vec3(0.);\n    // col += polySDF(st, 4);\n    color += stroke(polySDF(st, 3 + int(round((cos(iTime)+1.) * 7.)) ), .28, .035);\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}