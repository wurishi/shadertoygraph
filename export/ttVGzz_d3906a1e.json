{"ver":"0.1","info":{"id":"ttVGzz","date":"1578220431","viewed":470,"name":"schrodinger fluid","username":"unnick","description":"more info in the comments of the code\nclick to make the sim faster: [url]JAVASCRIPT:H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<4;i++)E.P.apply(this,A);};if(!H)close();[/url]","likes":10,"published":3,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* more info:\n *\n * apparently you can simulate fluids using the schrodinger equations!\n *\n *   i learned about this from this guy:   https://www.shadertoy.com/view/WtyGzz\n * who learned about this from this guy:   https://www.shadertoy.com/view/tsyGWG\n * who learned about this from this paper: http://page.math.tu-berlin.de/~chern/projects/PhDThesis/thesis_reduced.pdf\n * archived link: https://web.archive.org/web/20200105155955/http://page.math.tu-berlin.de/~chern/projects/PhDThesis/thesis_reduced.pdf\n */\n\nvoid mainImage(out vec4 col, in vec2 pos) {\n    vec4 state = fetch(pos);\n    //col = normalize(state.xy).xyxy * .5 + .5; return;\n    float tmp = dot(state.xy, state.xy)*.5;\n    col = mix(vec4(1), vec4(0,.5,1,1), min(tmp, 1.));\n    col *= min(2.-tmp, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 state, in vec2 pos) {\n    state = fetch(pos);\n    vec4 r1 = fetch(pos+vec2(1,0)),\n         r2 = fetch(pos+vec2(2,0)),\n         u1 = fetch(pos+vec2(0,1)),\n         u2 = fetch(pos+vec2(0,2)),\n         l1 = fetch(pos-vec2(1,0)),\n         l2 = fetch(pos-vec2(2,0)),\n         d1 = fetch(pos-vec2(0,1)),\n         d2 = fetch(pos-vec2(0,2)),\n         L = ((r1+u1+l1+d1)*8. + (r2+u2+l2+d2)*1. - state*36.) * scale;\n    \n    state.xy += dt*L.xy*smoothing;\n    \n    float p  = pressure(dot(state.xy, state.xy));\n          p  = min(p, max_p);\n          p += pos.y/iResolution.y*grav;\n    \n    state.zw += dt*(L.xy - state.xy*p);\n    state.xy += dt*state.zw;\n    \n    state = mix(state, vec4(1,0,0,1), smoothstep(30., 25., length(iMouse.xy - pos)) * step(.5,iMouse.z)); //mouse stuff idk\n    if(iFrame < 1) state = vec4(2,0,0,2) * smoothstep(.8, .7, length(res.xy - pos*2.) / iResolution.y);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define fetch(p) texture(iChannel0, (p)/iResolution.xy)\n\n#define dt .2\n#define grav 2.\n#define max_p 3.\n#define smoothing 2.3e-3\n#define scale (6. / 24.)\n\nfloat pressure(float x) { //x = density\n    return pow(abs(x-1.), 3.) + 1./(1.+10.*sqrt(x));\n}\n\n#define res (iResolution.xy)\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 state, in vec2 pos) {\n    state = fetch(pos);\n    vec4 r1 = fetch(pos+vec2(1,0)),\n         r2 = fetch(pos+vec2(2,0)),\n         u1 = fetch(pos+vec2(0,1)),\n         u2 = fetch(pos+vec2(0,2)),\n         l1 = fetch(pos-vec2(1,0)),\n         l2 = fetch(pos-vec2(2,0)),\n         d1 = fetch(pos-vec2(0,1)),\n         d2 = fetch(pos-vec2(0,2)),\n         L = ((r1+u1+l1+d1)*8. + (r2+u2+l2+d2)*1. - state*36.) * scale;\n    \n    state.xy += dt*L.xy*smoothing;\n    \n    float p  = pressure(dot(state.xy, state.xy));\n          p  = min(p, max_p);\n          p += pos.y/iResolution.y*grav;\n    \n    state.zw += dt*(L.xy - state.xy*p);\n    state.xy += dt*state.zw;\n    \n    state = mix(state, vec4(1,0,0,1), smoothstep(30., 25., length(iMouse.xy - pos)) * step(.5,iMouse.z)); //mouse stuff idk\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage(out vec4 state, in vec2 pos) {\n    state = fetch(pos);\n    vec4 r1 = fetch(pos+vec2(1,0)),\n         r2 = fetch(pos+vec2(2,0)),\n         u1 = fetch(pos+vec2(0,1)),\n         u2 = fetch(pos+vec2(0,2)),\n         l1 = fetch(pos-vec2(1,0)),\n         l2 = fetch(pos-vec2(2,0)),\n         d1 = fetch(pos-vec2(0,1)),\n         d2 = fetch(pos-vec2(0,2)),\n         L = ((r1+u1+l1+d1)*8. + (r2+u2+l2+d2)*1. - state*36.) * scale;\n    \n    state.xy += dt*L.xy*smoothing;\n    \n    float p  = pressure(dot(state.xy, state.xy));\n          p  = min(p, max_p);\n          p += pos.y/iResolution.y*grav;\n    \n    state.zw += dt*(L.xy - state.xy*p);\n    state.xy += dt*state.zw;\n    \n    state = mix(state, vec4(1,0,0,1), smoothstep(30., 25., length(iMouse.xy - pos)) * step(.5,iMouse.z)); //mouse stuff idk\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage(out vec4 state, in vec2 pos) {\n    state = fetch(pos);\n    vec4 r1 = fetch(pos+vec2(1,0)),\n         r2 = fetch(pos+vec2(2,0)),\n         u1 = fetch(pos+vec2(0,1)),\n         u2 = fetch(pos+vec2(0,2)),\n         l1 = fetch(pos-vec2(1,0)),\n         l2 = fetch(pos-vec2(2,0)),\n         d1 = fetch(pos-vec2(0,1)),\n         d2 = fetch(pos-vec2(0,2)),\n         L = ((r1+u1+l1+d1)*8. + (r2+u2+l2+d2)*1. - state*36.) * scale;\n    \n    state.xy += dt*L.xy*smoothing;\n    \n    float p  = pressure(dot(state.xy, state.xy));\n          p  = min(p, max_p);\n          p += pos.y/iResolution.y*grav;\n    \n    state.zw += dt*(L.xy - state.xy*p);\n    state.xy += dt*state.zw;\n    \n    state = mix(state, vec4(1,0,0,1), smoothstep(30., 25., length(iMouse.xy - pos)) * step(.5,iMouse.z)); //mouse stuff idk\n}\n","name":"Buffer D","description":"","type":"buffer"}]}