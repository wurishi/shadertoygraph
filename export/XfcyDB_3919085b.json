{"ver":"0.1","info":{"id":"XfcyDB","date":"1731338545","viewed":111,"name":"Glowing Words","username":"JoostAB","description":"Heavily insired by https://www.shadertoy.com/view/csl3DS by picoplanetdev\n\nNeon characters. Still a lot of work to do... Like position calculation depending on viewport size, use of colors","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["text","glow","charcters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = (fragCoord.xy / iResolution.y - aspect/2.0); // (*)\n    float xOffset = (1.0 - scale) * -1.0;\n    float yOffset = (aspect.x * scale) + 0.05;\n    vec2 pos = vec2(xOffset, yOffset); // (*)\n    float dist = 1e6; // (*)\n    // (*) = Do not rename! Is used in the macro's\n\n    \n#if DIGITS\n    for (int i = 0 ; i < 10; i++) {\n        char(dist,i);\n    }\n    pos.x = xOffset;\n    pos.y -= 0.3;\n#endif\n\n#if CHARACTERS\n#if CHAR_LCASE\n    for (int i = 101 ; i < 126; i++) {\n        char(dist,i);\n    }\n    pos.x = xOffset;\n    pos.y -= 0.3;\n#endif \n#if CHAR_UCASE\n    for (int i = 201 ; i < 226; i++) {\n        char(dist,i);\n    }\n    pos.x = xOffset;\n    pos.y -= 0.3;\n#endif \n#endif\n\n    \n    scale = 1.0 / 32.0;\n    pos = vec2(xOffset, -0.45);\n    \n    _C _r _e _a _t _e _d _space _b _y _colon _space _J _o _o _s _t _A _B\n    \n    vec3 color = vec3(0);\n    float shade = SHADE / (dist);\n    color += charColor * shade;\n \n    fragColor = vec4( color , 1.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Here you can disable some character groups to make the compiled code smaller\n#define DIGITS     1     // Compile and render decimal digits\n#define CHARACTERS 1     // Compile and render chracters\n#define SYMBOLS    1     // Compile and render symbols\n#define CHAR_LCASE 1     // Compile and render lowercase chracters\n#define CHAR_UCASE 1     // Compile and render uppercase chracters\n#define SHADE      .008\n\n\nfloat scale = 1.0 / 8.0;\nconst float charSpacing = 0.2;\nconst float qpi = atan(1.0);\nconst float hpi = qpi*2.0;\nconst float pi = qpi*4.0;\nconst float tau = pi*2.0;\nvec3 charColor = vec3(1,0.2,1);\n\n//Distance to a line segment, with start and end point\nfloat dfLine(vec2 start, vec2 end, vec2 uv) {\n    end += start;\n\tstart *= scale;\n\tend *= scale;\n\n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) / dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv);\n}\n\n//Distance to a line segment, with start point and relative end\nfloat dfLine(vec2 start, vec3 dir, vec2 uv) {\n    float x = dir.z / sqrt(dir.x*dir.x + dir.y*dir.y);\n    vec2 end = (dir.xy * x) + start;\n\tstart *= scale;\n\tend *= scale;\n\n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) / dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv);\n}\n\n//Distance to the edge of a circle.\nfloat dfCircle(vec2 origin, float radius, vec2 uv) {\n\torigin *= scale;\n\tradius *= scale;\n\n\treturn abs(length(uv - origin) - radius);\n}\n\n//Distance to an arc.\nfloat dfArc(vec2 origin, float start, float sweep, float radius, vec2 uv) {\n\torigin *= scale;\n\tradius *= scale;\n\n\tuv -= origin;\n\tuv = uv*mat2(cos(start), sin(start),-sin(start), cos(start));\n\t\n\tfloat offs = (sweep / 2.0 - pi);\n\tfloat ang = mod(atan(uv.y, uv.x) - offs, tau) + offs;\n\tang = clamp(ang, min(0.0, sweep), max(0.0, sweep));\n\t\n\treturn distance(radius * vec2(cos(ang), sin(ang)), uv);\n}\n\nfloat dfChar(inout vec2 start, int char, vec2 uv) {\n    uv -= start;\n    float dist = 1e6;\n    float width = 0.0;\n    \n    if (char < 100) {\n   \n        switch (char) {\n\n#if DIGITS\n            case 0:\n                dist = min(dist, dfLine(vec2(1.000,1.000), vec2(0.000,-0.500), uv));\n                dist = min(dist, dfLine(vec2(0.000,1.000), vec2(0.000,-0.500), uv));\n                dist = min(dist, dfArc(vec2(0.500,1.000),0.000, 3.142, 0.500, uv));\n                dist = min(dist, dfArc(vec2(0.500,0.500),3.142, 3.142, 0.500, uv));\n                width = 1.0;\n                break;\n            case 1:\n                dist = min(dist, dfLine(vec2(0.100,0.000), vec2(0.000,1.500), uv));\n                width = 0.2;\n                break;\n            case 2:\n                dist = min(dist, dfLine(vec2(0.000,0.000), vec2(1.000,0.000), uv));\n                dist = min(dist, dfLine(vec2(0.388,0.561), vec2(0.418,0.158), uv));\n                dist = min(dist, dfArc(vec2(0.500,1.000),0.000, 3.142, 0.500, uv));\n                dist = min(dist, dfArc(vec2(0.700,1.000),5.074, 1.209, 0.300, uv));\n                dist = min(dist, dfArc(vec2(0.600,0.000),1.932, 1.209, 0.600, uv));\n                width = 1.0;\n                break;\n            case 3:\n                dist = min(dist, dfLine(vec2(0.000,1.500), vec2(1.000,0.000), uv));\n                dist = min(dist, dfLine(vec2(1.000,1.500), vec2(-0.500,-0.500), uv));\n                dist = min(dist, dfArc(vec2(0.500,0.500),3.142, 4.712, 0.500, uv));\n                width = 1.0;\n                break;\n            case 4:\n                dist = min(dist, dfLine(vec2(0.000,0.500), vec2(0.700,1.000), uv));\n                dist = min(dist, dfLine(vec2(0.000,0.500), vec2(1.000,0.000), uv));\n                dist = min(dist, dfLine(vec2(0.700,0.000), vec2(0.000,1.500), uv));\n                width = 1.0;\n                break;\n            case 5:\n                dist = min(dist, dfLine(vec2(0.300,1.500), vec2(0.700,0.000), uv));\n                dist = min(dist, dfLine(vec2(0.200,0.900), vec2(0.100, 0.600), uv));\n                dist = min(dist, dfArc(vec2(0.500,0.500),3.142, 5.356, 0.500, uv));\n                width = 1.0;\n                break;\n            case 6:\n                dist = min(dist, dfLine(vec2(0.067,0.750), vec2(0.433,0.750), uv));\n                dist = min(dist, dfCircle(vec2(0.500,0.500), 0.500, uv));\n                width = 1.0;\n                break;\n            case 7:\n                dist = min(dist, dfLine(vec2(0.000,1.500), vec2(1.000,0.000), uv));\n                dist = min(dist, dfLine(vec2(1.000,1.500), vec2(-0.500,-1.500), uv));\n                width = 1.0;\n                break;\n            case 8:\n                dist = min(dist, dfCircle(vec2(0.500,0.400), 0.400, uv));\n                dist = min(dist, dfCircle(vec2(0.500,1.150), 0.350, uv));\n                width = 1.0;\n                break;\n            case 9:\n                dist = min(dist, dfLine(vec2(0.500,0.000), vec2(0.433, 0.750), uv));\n                dist = min(dist, dfCircle(vec2(0.500,1.000), 0.500, uv));\n                width = 1.0;\n                break;\n        \n#endif\n#if SYMBOLS\n            case  20: // <> space\n                width = 0.6;\n                break;\n            case 21: // colon\n                dist = min(dist, dfCircle(vec2(0.05, 1.1),0.05,uv));\n                dist = min(dist, dfCircle(vec2(0.05, 0.2),0.05,uv));\n                width = 0.1;\n                break;\n            case 22: // semi colon\n                dist = min(dist, dfCircle(vec2(0.05, 1.1),0.05,uv));\n                dist = min(dist, dfArc(vec2(0.05, 0.2),-qpi,pi*1.5,0.05,uv));\n                dist = min(dist, dfLine(vec2(0.08,0.16), vec2(-0.07, -0.1), uv));\n                dist = min(dist, dfLine(vec2(0.02,0.16), vec2(-0.02, -0.1), uv));\n                width = 0.1;\n                break;\n            case 30: // plus\n                dist = min(dist, dfLine(vec2(0.0,0.5), vec2(1.0, 0.0), uv));\n                dist = min(dist, dfLine(vec2(0.5,1.0), vec2(0.0, -1.0), uv));\n                width = 1.0;\n                break;\n            case 31: // minus\n                dist = min(dist, dfLine(vec2(0.0,0.5), vec2(1.0, 0.0), uv));\n                width = 1.0;\n                break;\n            case 32: // multiply\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(1.0, 1.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(1.0, -1.0), uv));\n                width = 1.0;\n                break;\n            case 33: // divide\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(1.0, 1.0), uv));\n                width = 1.0;\n                break;\n            case 34: // sqrt\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.3, -0.7), uv));\n                dist = min(dist, dfLine(vec2(0.3,0.3), vec2(0.3, 0.7), uv));\n                dist = min(dist, dfLine(vec2(0.6,1.0), vec2(0.4, 0.0), uv));\n                width = 1.0;\n                break;\n            case 39: // equals\n                dist = min(dist, dfLine(vec2(0.0,0.8), vec2(1.0, 0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.2), vec2(1.0, 0.0), uv));\n                width = 1.0;\n                break;\n            \n#endif\n            default:\n                \n                break;\n        }\n    }\n\n#if CHARACTERS\n#if CHAR_LCASE\n    if (char >= 100 && char < 200) {\n        char -= 100;\n        switch(char) {\n            \n                \n            case  1: // 'a'\n                dist = min(dist, dfLine(vec2(0.2,0.9), vec2(0.5,0.0), uv));\n                dist = min(dist, dfArc( vec2(0.7,0.7), tau, hpi, 0.2, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.7), vec2(0.0,-0.7), uv));\n                dist = min(dist, dfArc( vec2(0.7,0.3), hpi, -pi/6., 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.3,0.6), vec2(0.4,0.0), uv));\n                dist = min(dist, dfArc( vec2(0.3,0.3), hpi, pi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.3,0.0), vec2(0.4,0.0), uv));\n                dist = min(dist, dfArc( vec2(0.7,0.3), pi*1.5, pi/6., 0.3, uv));\n                width = 1.0;\n                break;\n\n            case  2: // 'b'\n                dist = min(dist, dfLine(vec2(0.00,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfArc (vec2(0.38,0.5),-(hpi+qpi), tau-hpi, 0.5, uv));\n                width = 0.88;\n                break;\n\n            case  3: // 'c'\n                dist = min(dist, dfArc(vec2(0.5,0.5),pi*.3, pi+pi*.4, 0.5, uv));\n                width = 0.9;\n                break;\n\n            case  4: // 'd'\n                dist = min(dist, dfLine(vec2(0.8,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfArc (vec2(0.42,0.5),(hpi-qpi), tau-hpi, 0.5, uv));\n                width = 0.9;\n                break;\n\n            case  5: // 'e'\n                dist = min(dist, dfLine(vec2(0.0,0.5), vec2(1.0,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.5,0.5),0.0, pi+hpi, 0.5, uv));\n                dist = min(dist, dfLine(vec2(0.5,0.0), vec2(0.30,0.0), uv));\n                width = 1.0;\n                break;\n\n            case  6: // 'f'\n                dist = min(dist, dfLine(vec2(0.15,0.0), vec2(0.0,1.25), uv));\n                dist = min(dist, dfArc(vec2(0.4,1.25),hpi, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.4,1.5), vec2(0.15,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.75), vec2(0.5,0.0), uv));\n                width = 0.5;\n                break;\n\n            case  7: // 'g'\n                dist = min(dist, dfArc(vec2(0.5,0.5),qpi, pi+hpi, 0.5, uv));\n                dist = min(dist, dfLine(vec2(0.9,1.0), vec2(0.0,-1.25), uv));\n                dist = min(dist, dfArc(vec2(0.65,-0.25),-hpi, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.35,-.5), vec2(0.3,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.35,-0.25),pi, hpi, 0.25, uv));\n                width = 0.9;\n                break;\n\n            case  8: // 'h'\n                dist = min(dist, dfLine(vec2(0.00,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfArc (vec2(0.4,0.5),0.0, pi, 0.4, uv));\n                dist = min(dist, dfLine(vec2(0.8,0.5), vec2(0.0,-0.5), uv));\n                width = 0.8;\n                break;\n\n            case  9: // 'i'\n                dist = min(dist, dfLine(vec2(0.05,0.0), vec2(0.0,0.8), uv));\n                dist = min(dist, dfCircle(vec2(0.05, 1.0),0.05,uv));\n                width = 0.1;\n                break;\n\n            case 10: // 'j'\n                dist = min(dist, dfLine(vec2(0.2,0.8), vec2(0.5,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.7,0.8), vec2(0.0,-0.9), uv));\n                dist = min(dist, dfArc (vec2(0.4,-0.1), pi, pi, 0.3, uv));\n                dist = min(dist, dfCircle(vec2(0.7, 1.0),0.05,uv));\n                width = 0.75;\n                break;\n\n            case 11: // 'k'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.5), vec2(0.6,0.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.5), vec2(0.6,-0.5), uv));\n                width = 0.6;\n                break;\n\n            case 12: // 'l'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                width = 0.001;\n                break;\n\n            case 13: // 'm'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.0), uv));\n                dist = min(dist, dfArc (vec2(0.3,0.7), 0.0, pi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.6,0.0), vec2(0.0,0.7), uv));\n                dist = min(dist, dfArc (vec2(0.9,0.7), 0.0, pi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(1.2,0.0), vec2(0.0,0.7), uv));\n                width = 1.2;\n                break;\n\n            case 14: // 'n'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.0), uv));\n                dist = min(dist, dfArc (vec2(0.4,0.6), 0.0, pi, 0.4, uv));\n                dist = min(dist, dfLine(vec2(0.8,0.0), vec2(0.0,0.6), uv));\n                width = 0.8;\n                break;\n\n            case 15: // 'o'\n                dist = min(dist, dfCircle(vec2(0.5, 0.5),0.5,uv));\n                width = 1.0;\n                break;\n\n            case 16: // 'p'\n                dist = min(dist, dfLine(vec2(0.00,1.0), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfArc (vec2(0.38,0.5),-(hpi+qpi), tau-hpi, 0.5, uv));\n                width = 0.9;\n                break;\n\n            case 17: // 'q'\n                dist = min(dist, dfLine(vec2(0.8,1.0), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfArc (vec2(0.42,0.5),(hpi-qpi), tau-hpi, 0.5, uv));\n                width = 0.9;\n                break;\n\n            case 18: // 'r'\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.0,-1.0), uv));\n                dist = min(dist, dfArc(vec2(0.25,0.75),hpi, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.25,1.0), vec2(0.25,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.5,0.75),0.0, hpi, 0.25, uv));\n                width = 0.75;\n                break;\n\n            case 19: // 's'\n                dist = min(dist, dfArc(vec2(0.5,0.75),0.0, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.25,1.0), vec2(0.25,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.25,0.75),hpi, hpi, 0.25, uv));\n                dist = min(dist, dfArc(vec2(0.25,0.75),pi, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.25,0.5), vec2(0.25,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.5,0.25),0.0, hpi, 0.25, uv));\n                dist = min(dist, dfArc(vec2(0.5,0.25),-hpi, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.25,0.0), vec2(0.25,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.25,0.25),pi, hpi, 0.25, uv));\n                width = 0.75;\n                break;\n            case 20: // 't'\n                dist = min(dist, dfLine(vec2(0.15,0.25), vec2(0.0,1.25), uv));\n                dist = min(dist, dfArc(vec2(0.4,0.25),-pi, hpi, 0.25, uv));\n                dist = min(dist, dfLine(vec2(0.4,0.0), vec2(0.15,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.5,0.0), uv));\n                width = 0.5;\n                break;\n\n            case 21: // 'u'\n                dist = min(dist, dfLine(vec2(0.0,0.4), vec2(0.0,0.6), uv));\n                dist = min(dist, dfArc (vec2(0.4,0.4), pi, pi, 0.4, uv));\n                dist = min(dist, dfLine(vec2(0.8,0.0), vec2(0.0,1.0), uv));\n                width = 0.8;\n                break;\n\n            case 22: // 'v'\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.4,-1.0), uv));\n                dist = min(dist, dfLine(vec2(0.4,0.0), vec2(0.4,1.0), uv));\n                width = 0.8;\n                break;\n\n            case 23: // 'w'\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.3,-1.0), uv));\n                dist = min(dist, dfLine(vec2(0.3,0.0), vec2(0.2,0.6), uv));\n                dist = min(dist, dfLine(vec2(0.5,0.6), vec2(0.2,-0.6), uv));\n                dist = min(dist, dfLine(vec2(0.7,0.0), vec2(0.3,1.0), uv));\n                width = 1.0;\n                break;\n\n            case 24: // 'x'\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.7,-1.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.7,1.0), uv));\n                width = 0.7;\n                break;\n\n            case 25: // 'y'\n\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.4,-0.9), uv));\n                dist = min(dist, dfLine(vec2(0.7,1.0), vec2(-0.4,-1.25), uv));\n                dist = min(dist, dfArc (vec2(0.05,-0.1), 4.9, qpi, 0.3, uv));\n                width = 0.7;\n                break;\n\n            case 26: // 'z'\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.7,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.7,1.0), vec2(-0.7,-1.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.7,0.0), uv));\n                width = 0.7;\n                break;\n        }\n    }\n#endif\n\n#if CHAR_UCASE\n    if (char > 200) {\n        char -= 200;\n        \n        switch(char) {\n            case  1: // 'A'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.45,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.45,1.5), vec2(0.45,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.18,0.6), vec2(0.54,0.0), uv));\n                width = 0.9;\n                break;\n\n            case  2: // 'B'\n                dist = min(dist, dfLine(vec2(0.00,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.525,0.0), uv));\n                dist = min(dist, dfArc (vec2(0.525,1.125),-(hpi), pi, 0.375, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.75), vec2(0.525,0.0), uv));\n                dist = min(dist, dfArc (vec2(0.525,0.375),-(hpi), pi, 0.375, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.525,0.0), uv));\n                width = 0.9;\n                break;\n\n            case  3: // 'C'\n                dist = min(dist, dfArc(vec2(0.5,1.0),pi, -tau / 2.5, 0.5, uv));\n                dist = min(dist, dfLine(vec2(0.0,1.0), vec2(0.0,-0.5), uv));\n                dist = min(dist, dfArc(vec2(0.5,0.5),pi, tau / 2.5, 0.5, uv));\n                width = 0.95;\n                break;\n\n            case  4: // 'D'\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.525,0.0), uv));\n                dist = min(dist, dfArc (vec2(0.525,1.125), 0.0, hpi, 0.375, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.375), vec2(0.0,0.75), uv));\n                dist = min(dist, dfArc (vec2(0.525,0.375), -hpi, hpi, 0.375, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.525,0.0), uv));\n                width = 0.9;\n                break;\n\n            case  5: // 'E'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.8), vec2(0.7,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.8,0.0), uv));\n                width = 0.8;\n                break;\n\n            case  6: // 'F'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.8), vec2(0.7,0.0), uv));\n                width = 0.8;\n                break;\n\n            case  7: // 'G'\n                dist = min(dist, dfArc (vec2(0.45,1.05), 0.0, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.45), vec2(0.0,0.6), uv));\n                dist = min(dist, dfArc (vec2(0.45,0.45), pi, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.45), vec2(0.0,0.15), uv));\n                dist = min(dist, dfLine(vec2(0.9,0.6), vec2(-0.5,0.0), uv));\n                width = 0.9;\n                break;\n\n            case  8: // 'H'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.8), vec2(0.8,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.8,0.0), vec2(0.0,1.5), uv));\n                width = 0.8;\n                break;\n\n            case  9: // 'I'\n                dist = min(dist, dfLine(vec2(0.05,0.0), vec2(0.0,1.5), uv));\n                width = 0.1;\n                break;\n\n            case 10: // 'J'\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.8,1.5), vec2(0.0,-1.1), uv));\n                dist = min(dist, dfArc (vec2(0.4,0.4), pi, pi, 0.4, uv));\n                width = 0.8;\n                break;\n\n            case 11: // 'K'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.65), vec2(0.8,0.85), uv));\n                dist = min(dist, dfLine(vec2(0.2,0.83), vec2(0.6,-0.83), uv));\n                width = 0.8;\n                break;\n\n            case 12: // 'L'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.8,0.0), uv));\n                width = 0.8;\n                break;\n\n            case 13: // 'M'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.6,-0.5), uv));\n                dist = min(dist, dfLine(vec2(0.6,1.0), vec2(0.6,0.5), uv));\n                dist = min(dist, dfLine(vec2(1.2,0.0), vec2(0.0,1.5), uv));\n                width = 1.2;\n                break;\n\n            case 14: // 'N'\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.8,0.0), vec2(0.0,1.5), uv));\n                width = 0.8;\n                break;\n\n            case 15: // 'O'\n                dist = min(dist, dfArc (vec2(0.45,1.05), 0.0, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.45), vec2(0.0,0.6), uv));\n                dist = min(dist, dfArc (vec2(0.45,0.45), pi, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.45), vec2(0.0,0.6), uv));\n                width = 0.9;\n                break;\n\n            case 16: // 'P'\n                dist = min(dist, dfLine(vec2(0.00,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.525,0.0), uv));\n                dist = min(dist, dfArc (vec2(0.525,1.125),-(hpi), pi, 0.375, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.75), vec2(0.525,0.0), uv));\n                width = 0.9;\n                break;\n\n            case 17: // 'Q'\n                dist = min(dist, dfArc (vec2(0.45,1.05), 0.0, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.45), vec2(0.0,0.6), uv));\n                dist = min(dist, dfArc (vec2(0.45,0.45), pi, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.45), vec2(0.0,0.6), uv));\n                dist = min(dist, dfLine(vec2(0.6,0.3), vec2(0.3,-0.3), uv));\n                width = 0.9;\n                break;\n\n            case 18: // 'R'\n                dist = min(dist, dfLine(vec2(0.00,1.5), vec2(0.0,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.525,0.0), uv));\n                dist = min(dist, dfArc (vec2(0.525,1.125),-(hpi), pi, 0.375, uv));\n                dist = min(dist, dfLine(vec2(0.0,0.75), vec2(0.525,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.525,0.75), vec2(0.375,-0.75), uv));\n                width = 0.9;\n                break;\n\n            case 19: // 'S'\n                dist = min(dist, dfArc(vec2(0.6,1.2),0.0, hpi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.3,1.5), vec2(0.3,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.3,1.2),hpi, hpi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.0,1.05), vec2(0.0,0.15), uv));\n                dist = min(dist, dfArc(vec2(0.3,1.05),pi, hpi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.3,0.75), vec2(0.3,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.6,0.45),0.0, hpi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.3), vec2(0.0,0.15), uv));\n                dist = min(dist, dfArc(vec2(0.6,0.3),-hpi, hpi, 0.3, uv));\n                dist = min(dist, dfLine(vec2(0.3,0.0), vec2(0.3,0.0), uv));\n                dist = min(dist, dfArc(vec2(0.3,0.3),pi, hpi, 0.3, uv));\n                width = 0.9;\n                break;\n                \n            case 20: // 'T'\n                dist = min(dist, dfLine(vec2(0.4,0.0), vec2(0.0,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,0.0), uv));\n                width = 0.8;\n                break;\n\n            case 21: // 'U'\n                dist = min(dist, dfLine(vec2(0.0,0.45), vec2(0.0,1.05), uv));\n                dist = min(dist, dfArc (vec2(0.45,0.45), pi, pi, 0.45, uv));\n                dist = min(dist, dfLine(vec2(0.9,0.0), vec2(0.0,1.5), uv));\n                width = 0.9;\n                break;\n\n            case 22: // 'V'\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.45,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.45,0.0), vec2(0.5,1.5), uv));\n                width = 0.9;\n                break;\n\n            case 23: // 'W'\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.35,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.35,0.0), vec2(0.25,0.8), uv));\n                dist = min(dist, dfLine(vec2(0.6,0.8), vec2(0.25,-0.8), uv));\n                dist = min(dist, dfLine(vec2(0.85,0.0), vec2(0.35,1.5), uv));\n                width = 1.2;\n                break;\n\n            case 24: // 'X'\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,-1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.8,1.5), uv));\n                width = 0.8;\n                break;\n\n            case 25: // 'Y'\n\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.4,-0.9), uv));\n                dist = min(dist, dfLine(vec2(0.4,0.6), vec2(0.4,0.9), uv));\n                dist = min(dist, dfLine(vec2(0.4,0.6), vec2(0.0,-0.6), uv));\n                width = 0.8;\n                break;\n\n            case 26: // 'Z'\n                dist = min(dist, dfLine(vec2(0.0,1.5), vec2(0.8,0.0), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.8,1.5), uv));\n                dist = min(dist, dfLine(vec2(0.0,0.0), vec2(0.8,0.0), uv));\n                width = 0.8;\n                break;\n        }\n    }\n#endif\n#endif    \n    start.x += (width == 0.0) ? 0.0 : (width + charSpacing) * scale;\n    \n    return dist;\n}\n\n\nvec3 coloredChar(inout vec2 start, vec3 colnow, vec3 color , int digit, vec2 uv) {\n    float dist = dfChar(start, digit, uv);\n    vec3 col = vec3(0.0);\n    float shade = SHADE / (dist);\n    col += color * shade;\n    return col;\n}\n\n\n#define char(d,c) d = min(d,dfChar(pos, c, uv));\n\n// Following is just a test how to get rid of the switch/case\n// So for now... just ignore\n#if 0\n    float df_0(float dist, inout vec2 start, vec2 uv) {\n        uv -= start;\n        dist = min(dist, dfLine(vec2(1.000,1.000), vec2(0.000,-0.500), uv));\n        dist = min(dist, dfLine(vec2(0.000,1.000), vec2(0.000,-0.500), uv));\n        dist = min(dist, dfArc(vec2(0.500,1.000),0.000, 3.142, 0.500, uv));\n        dist = min(dist, dfArc(vec2(0.500,0.500),3.142, 3.142, 0.500, uv));\n        start.x += (1.0 + charSpacing) * scale;\n        return dist;\n    }\n\n    #define _0 dist=df_0(dist,pos,uv);\n#else\n    #define _0 char(dist,0);\n#endif\n// End test\n\n#define _1 char(dist,1);\n#define _2 char(dist,2);\n#define _3 char(dist,3);\n#define _4 char(dist,4);\n#define _5 char(dist,5);\n#define _6 char(dist,6);\n#define _7 char(dist,7);\n#define _8 char(dist,8);\n#define _9 char(dist,9);\n\n#define _a char(dist,101);\n#define _b char(dist,102);\n#define _c char(dist,103);\n#define _d char(dist,104);\n#define _e char(dist,105);\n#define _f char(dist,106);\n#define _g char(dist,107);\n#define _h char(dist,108);\n#define _i char(dist,109);\n#define _j char(dist,110);\n#define _k char(dist,111);\n#define _l char(dist,112);\n#define _m char(dist,113);\n#define _n char(dist,114);\n#define _o char(dist,115);\n#define _p char(dist,116);\n#define _q char(dist,117);\n#define _r char(dist,118);\n#define _s char(dist,119);\n#define _t char(dist,120);\n#define _u char(dist,121);\n#define _v char(dist,122);\n#define _w char(dist,123);\n#define _x char(dist,124);\n#define _y char(dist,125);\n#define _z char(dist,126);\n\n#define _A char(dist,201);\n#define _B char(dist,202);\n#define _C char(dist,203);\n#define _D char(dist,204);\n#define _E char(dist,205);\n#define _F char(dist,206);\n#define _G char(dist,207);\n#define _H char(dist,208);\n#define _I char(dist,209);\n#define _J char(dist,210);\n#define _K char(dist,211);\n#define _L char(dist,212);\n#define _M char(dist,213);\n#define _N char(dist,214);\n#define _O char(dist,215);\n#define _P char(dist,216);\n#define _Q char(dist,217);\n#define _R char(dist,218);\n#define _S char(dist,219);\n#define _T char(dist,220);\n#define _U char(dist,221);\n#define _V char(dist,222);\n#define _W char(dist,223);\n#define _X char(dist,224);\n#define _Y char(dist,225);\n#define _Z char(dist,226);\n\n#define _space char(dist,20);\n#define _colon char(dist,21);\n#define _semicolon char(dist,22);\n\n#define _plus char(dist,30);\n#define _minus char(dist,31);","name":"Common","description":"","type":"common"}]}