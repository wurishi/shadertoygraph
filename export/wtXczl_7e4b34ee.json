{"ver":"0.1","info":{"id":"wtXczl","date":"1592765772","viewed":109,"name":"colored moire (original version)","username":"wj","description":"Attempt to colorize my earlier experiment here: https://www.shadertoy.com/view/wtXczf\n(thanks to CPU for having helped me recover the source code that I had accidentally overwritten)","likes":2,"published":1,"flags":96,"usePreview":0,"tags":["moir"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XtsSzX","filepath":"https://soundcloud.com/bman-8/bman-thaw","previewfilepath":"https://soundcloud.com/bman-8/bman-thaw","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// colored Moiré\n// by wj\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// based on my earlier experiment: \n// https://www.shadertoy.com/view/wtXczf\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // always rendering to some fixed low resolution\n    // to avoid the excess grey that comes with higher\n    // resolution renderings (it is quite annoying that shadertoy\n    // does not seem to provide an API that would allow to\n    // specify the size of the Buf B texture .. or does it?)\n    \n    // interesting effect: the used \"resolution\" that I hardcoded \n    // in Buf B corresponds to the actual screen-surface that the\n    // \"editor rendering\" used on my machine.. In the \n    // original impl (without using a separate texture to render \n    // into) this preview result actually looked like the \n    // output that I am now getting in fullscreen mode.    \n    // and instead of the \"4-element\" blocks of the earlier\n    // renderings, whatever \"resampling\" might be used for the \n    // smaller \"editor rendering\" now turns these into \"9-element\"\n    // blocks (by \"amplifiying\" a feature that is less noticable \n    // in the \"original\" rendering)\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel2, uv);\n    fragColor = vec4(col.rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float s(float t, float c) {\n    return ((.5*(sin(t*c)+1.)) + 1.)*2.3;\n}\n\nvec3 c(float i) {\n\treturn vec3(.5*cos(11.283*(i+vec3(0.,-.133333,.233333)))+.5);\n//test2 return vec3(.5*cos(10.283*(i+vec3(0.,-.133333,.233333)))+.5);\n}\n\n#define WIDTH 632.\n#define HEIGHT 356.\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    // sim fixed size low resolution screen\n    // hi-res will just result in duller grey result\n    // (problem with this approach is that the smaller\n    // views that shadertoy uses in the editor mode now \n    // look totally different - probably due to some \n    // resampling..)\n    \n    fragCoord.x= floor(fragCoord.x*WIDTH/iResolution.x)+.5;\n    fragCoord.y= floor(fragCoord.y*HEIGHT/iResolution.y)+.5;\n    \n    \n    vec2 R = vec2(WIDTH, HEIGHT), //iResolution.xy,\n         U = fragCoord - R.xy/2.;\n        \n    float m= .6+.6*(sin(iTime*.052)+1.); // zoom range/speed\n            \n    float c1= fract(U.x*U.y/R.y * s(iTime,      .05)*m),\n          c2= fract(U.x*U.y/R.y * s(iTime+0.05, .05)*m),\n          c3= fract(U.x*U.y/R.y * s(iTime-0.05, .05)*m);\n\n    // background to avoid grey sections\n    // (adds some extra Moiré)\n//test2\tfragColor= vec4(c(c1)*.35, 1.)+.2;\n    fragColor= vec4(c(c1)*.5, 1.);\n    \n    fragColor+= vec4(c1*.5 ,c2*.5, c3*.5,0.);\n\n//test2\n//  fragColor+= 0.1;\n//  fragColor*= fragColor;\n\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}