{"ver":"0.1","info":{"id":"MtKcWd","date":"1538249746","viewed":696,"name":"KalexWebcam","username":"Kalexex","description":"webcam","likes":2,"published":3,"flags":34,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 rgb = texture(RockPaperScissors, uv).rgb;\n    vec3 webcam = texture(WebcamDiff, uv).rgb;\n\n    // Output to screen\n    // fragColor = vec4(colormap(length(rgb)), 1.0);\n    fragColor = vec4(rgb, 1.0);\n    // fragColor = vec4(webcam, 1.0);\n    \n    bvec3 nans = isnan(rgb);\n    if (nans.r || nans.g || nans.b) {\n        fragColor = vec4(1., 0., 0., 1.);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// we must manually set this up in all the buffers\n#define RockPaperScissors iChannel0\n#define Webcam iChannel1\n#define WebcamMovingAverage iChannel2\n#define WebcamDiff iChannel3\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nconst vec3 colors[2] = vec3[](\nvec3(42., 157., 143.) / 255.,\nvec3(255., 157., 143.) / 255.\n);\n\nvec3 colormap(float v) {\n    int i = int(v * 2.);\n    int i1 = i + 1;\n    float lerp = v * 2. - float(i);\n    vec3 colorStart = colors[i];\n    vec3 colorEnd = colors[i1];\n    return mix(colorStart, colorEnd, lerp);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\n\nRockPaperScissors, should be iChannel0\n\n\n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;   \n    vec3 rgb = texture(RockPaperScissors, uv).xyz;\n    vec3 webcam = texture(WebcamDiff, uv).rgb;\n    \n    \n    // each step there's a growth component:\n    // each component value x grows by x*(1-x)\n    \n    // vec3 growth = rgb * (1. - rgb);\n    vec3 growth = rgb;\n    // growth *= 1. + webcam * 4.;\n    \n    // each step there's a death component:\n    // red beats green\n    // green beats blue\n    // blue beats red\n    \n    // red loses blue%\n    // green loses x% of itself, where x is red (e.g. red = 0.5, green loses 50%)\n    // blue loses green%\n    \n    vec3 death = vec3(\n        - rgb.r * rgb.b,\n        - rgb.g * rgb.r,\n        - rgb.b * rgb.g\n    );\n    \n    // diffusion component:\n    \n    vec3 rgbAvg = vec3(0., 0., 0.);\n    for (float i = -1.; i <= 1.; i += 1.) {\n        for (float j = -1.; j <= 1.; j += 1.) {\n            float manhattanDist = abs(i) + abs(j);\n            float weight = pow(2., 2. - manhattanDist) * (1. / 16.);\n            rgbAvg += texture(iChannel0, (fragCoord + vec2(i, j)) / iResolution.xy).rgb * weight;\n        }\n    }\n    vec3 diffuse = rgbAvg - rgb;\n    \n    // species-specific traits:\n    // r increases by g\n    // green gets a secondary growth: 0.01\n    // blue gets sqrt(blue) growth\n    vec3 traitsGrow = rgb * vec3(\n        rgb.g,\n        0.1,\n        sqrt(rgb.b)\n    );\n    \n    // vec3 dRgb = growth * 1.2 + death * 6.0 + diffuse * 1.3 + traitsGrow * 0.1;\n    \n    // vec3 dRgb = traits * 0.5;\n    \n    // float growthFactor = mix(0.4, 0.4, uv.x);\n    float growthFactor = length(webcam) * length(webcam) * 5. + 0.03;\n    float deathFactor = 6.; // mix(0., 25., uv.y);\n    // float deathFactor = length(webcam) * length(webcam) * 5. + 0.5;\n    // float diffuseFactor = mix(0., 2.5, uv.y) * sin(iTime);\n    float diffuseFactor = length(webcam) * length(webcam) * 10.;\n    // float diffuseFactor = 0.5;\n    \n    \n    vec3 dRgb = growth * growthFactor + death * deathFactor + diffuse * diffuseFactor + traitsGrow * 0.5;\n    \n    float dt = 0.1;\n    rgb = rgb + dRgb * dt;\n    rgb = max(min(rgb, vec3(1.)), vec3(0.));\n    \n    if (iFrame <= 0) {\n\t\trgb = vec3(\n            rand(uv),\n            rand(uv*2. + vec2(321., 459.)),\n            rand(uv*3. + vec2(-4.13, 594.13))\n        );\n        /*rgb = vec3(0.1);\n        if (length(fragCoord - iResolution.xy / 2.) < 50.) {\n            rgb.r = 1.;\n        }*/\n    }\n    fragColor = vec4(rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\n\nWebcamMovingAverage, should be iChannel2\n\n\n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 oldColor =\n        texture(WebcamMovingAverage, uv);\n    /*\n        texture(iChannel2, uv) * 0.5 +\n        (\n        texture(iChannel2, uv + vec2(1., 0.) / iResolution.xy) +\n        texture(iChannel2, uv + vec2(-1., 0.) / iResolution.xy) +\n        texture(iChannel2, uv + vec2(0., 1.) / iResolution.xy) +\n        texture(iChannel2, uv + vec2(0., -1.) / iResolution.xy)\n            ) / 8.;\n        ;\n\t*/\n    vec4 newColor = texture(Webcam, uv);\n    float lerp = 0.3;\n    fragColor = vec4((oldColor * (1. - lerp) + newColor * lerp).xyz, 1.);\n    // fragColor = newColor;\n    // fragColor = (newColor - oldColor);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\n\nWebcamDiff, should be iChannel3\n\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = abs(texture(Webcam, uv).xyz - texture(WebcamMovingAverage, uv).xyz);\n    col *= 10.; // amplify difference\n    col = clamp(col, vec3(0.), vec3(1.));\n    fragColor = vec4(col,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}