{"ver":"0.1","info":{"id":"fdSXWG","date":"1620864140","viewed":196,"name":"saturation noise toy","username":"sanderoneil","description":"try clicking and sliding mouse on shader screen, if there is no activity in iChannel0 then your mic and the site aren't working together","likes":2,"published":1,"flags":6,"usePreview":0,"tags":["saturation"],"hasliked":0,"parentid":"WdKfD1","parentname":"saturation picker"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec3 col = cos(iTime+uv.x+vec3(0,2.+uv.y*3.,4))*.5+.5;\n    uv.x=1.-uv.x;\n    \n    //col = satpick(col,iMouse.x/iResolution.x*2.);//second argument is saturation\n\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    float v = -.5;\n    float s = m.x*5.;\n    float vol = m.y*5.;\n    \n    //for (int x = 0; x<512; x++)\n    //{\n    //    v+=texture(iChannel0, vec2(x,0.)).x/100.*vol;\n        \n    //    }\n    v=12.;\n    //fragColor = vec4(hsvtoc(ctohsv(vec3(m.x,m.y,0))),1.0);\n    \n    \n    \n    float barheight = texture(iChannel0, vec2(uv.x,1)).x;\n    \n    if (abs(iResolution.y/2.-fragCoord.y) < (barheight-0.25)*300.*vol){\n    fragColor = vec4(hsvtoc(vec3(v*s,v*s,0)/3.+ctohsv(texture(iChannel1, uv).xyz)),1.0);}\n    else{\n    fragColor = vec4(hsvtoc(-vec3(v,v*s,0)/3.+ctohsv(texture(iChannel1, uv).xyz)),1.0);}\n    //fragColor = vec4(hsvtoc(vec3(1.,m.y*2.,m.x)),1.0);\n    //fragColor = vec4(hsvtoc(vec3(1,0,1.8)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 hsvtoc( vec3 hsv )\n{\n    float h = hsv.x * 2. * 3.1415;\n    float s = hsv.y;\n    float v = hsv.z;\n    //vec3 hscircle = vec3(cos(h),sin(h),0)*s+vec3(0,0,1);//possibly divide s by .612 or sqr(6)/4\n    vec3 hsc = vec3(cos(h),sin(h),0);\n    vec3 c = hsc*s + vec3(0,0,tan(radians(90.-35.)));\n    \n    float a = radians(55.);\n    c = vec3(c.x,c.y*cos(a) - c.z*sin(a),c.z*cos(a) + c.y*sin(a));\n    \n    a = radians(135.);\n    c = vec3(c.x*cos(a) - c.y*sin(a),c.y*cos(a) + c.x*sin(a),c.z);\n    \n    vec3 hscircle = c ;\n    vec3 cone = (hscircle)*(1.212)*v;\n    return(cone);\n}\nvec3 ctohsv( vec3 c )\n{\n    float a = radians(55.);\n    a = radians(-135.);\n    c = vec3(c.x*cos(a) - c.y*sin(a),c.y*cos(a) + c.x*sin(a),c.z);\n    \n    a = radians(-55.);\n    c = vec3(c.x,c.y*cos(a) - c.z*sin(a),c.z*cos(a) + c.y*sin(a));\n\n    vec3 ot =  vec3(c.x,c.y,0);\n    float h = atan(c.x,c.y)*1.+1.4+2.*2.*3.1415/3.;\n    float s = length(ot);\n    float v = c.z;\n    vec3 hsv = vec3(h/(2. * 3.1415),s,v);\n    return(hsv);\n}\nvec3 satpick( vec3 col, float sar )\n{\n    //float s = col.x+col.y+col.z;\n\t//vec3 p = vec3(s/3.);\n    //vec3 fromgray = col - p;\n    //float sat = acos(dot(col,vec3(1)));\n    \n    \n    //return( p + fromgray * sar);\n    \n    //return(hsvtoc(ctohsv(col)*vec3(1,sar,1)));\n    return(hsvtoc(ctohsv(col)));\n}","name":"Common","description":"","type":"common"}]}