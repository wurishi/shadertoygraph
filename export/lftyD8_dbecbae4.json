{"ver":"0.1","info":{"id":"lftyD8","date":"1732344368","viewed":58,"name":"d12 snowstorm","username":"pb","description":"kind of looks like snow","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"XXd3Rf","parentname":"d12glitter"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//hard coding the vertices for a dodecahedron\nconst float gmh=(sqrt(5.)+1.)/2.;\nconst float gmi=1./gmh;\n\nvec3[] d12 = vec3[]  (\nvec3(1.,1.,1.),\nvec3(1.,1.,-1.),\nvec3(1.,-1,1.),\nvec3(1.,-1,-1.),\nvec3(-1,1.,1.),\nvec3(-1.,1.,-1),\nvec3(-1.,-1.,1.),\nvec3(-1.,-1.,-1.),\nvec3(0.,gmh,gmi),\nvec3(0.,gmh,-gmi),\nvec3(0.,-gmh,gmi),\nvec3(0.,-gmh,-gmi),\nvec3(gmi,0.,gmh),\nvec3(gmi,0.,-gmh),\nvec3(-gmi,0.,gmh),\nvec3(-gmi,0.,-gmh),\nvec3(gmh,gmi,0.),\nvec3(gmh,-gmi,0.),\nvec3(-gmh,gmi,0.),\nvec3(-gmh,-gmi,0.)\n);\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 ifs_color, ro;\nfloat maxDist;\n\nmat2 rot(float a) {return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nfloat de(vec3 z) {\n\n    float ifs_scale = 1.8 + .2*abs(sin(iTime/5.));\n    float dd = 1.5;\n    z -= dd*round(z/dd);     \n    vec3 min_vtx;\n    float min_dist,dist_to_vtx,n=6.;\n    ifs_color = vec3(0.);\n    for (float i=0.; i<n; i++) {   \n        min_vtx = d12[0];\n        min_dist=length(z-d12[0]);\n        for (int j=1; j<20; j++) {\n            dist_to_vtx=length(z-d12[j]); \n            if (dist_to_vtx<min_dist) {min_vtx=d12[j]; min_dist=dist_to_vtx;}  \n        }  \n        z = min_vtx + ifs_scale*(z-min_vtx);\n    }\n    float dz = pow(ifs_scale,n );\n    return length(z) / dz;  \n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float t = 0.0;  \n    float eps = 1e-6, distfac=100.;\n    float hitThreshold = eps;\n    for(int i = 0; i < 20; i++) {\n        float d = de(ro + rd*t);\n        if ( d < hitThreshold || t>2. ) break;\n        t += d;\n        hitThreshold = eps*(1.+distfac);\n    }\n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float t = march(ro, rd);\n    maxDist = t;\n    return  vec3(1);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 p  = (2.*U-iResolution.xy)/iResolution.y*2.;\n    \n    vec2 uv = U / iResolution.xy;\n    \n    float t = iTime/9.;\n    ro = vec3(t,t*3.+.3*abs(sin(t*3.)),t/2.);\n    vec3 rd = normalize( vec3(p,2.) );  \n    vec3 col = render(ro, rd);\n    col = 1. - exp(-col);\n    O = vec4(1)*exp(-maxDist*maxDist*2.*(2.+sin(t)));\n    O *= O; \n}\n","name":"Buffer A","description":"","type":"buffer"}]}