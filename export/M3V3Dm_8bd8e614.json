{"ver":"0.1","info":{"id":"M3V3Dm","date":"1717764888","viewed":67,"name":"Underwater jaws","username":"faceless33","description":"Just iterating over someone else's shader","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Helper function for 3D rotation (provided for your convenience)\nmat3 rotate3D(float angle, vec3 axis) {\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0 - c;\n    vec3 ax = normalize(axis);\n    return mat3(\n        t*ax.x*ax.x+c,   t*ax.x*ax.y-s*ax.z, t*ax.x*ax.z+s*ax.y,\n        t*ax.x*ax.y+s*ax.z, t*ax.y*ax.y+c,   t*ax.y*ax.z-s*ax.x,\n        t*ax.x*ax.z-s*ax.y, t*ax.y*ax.z+s*ax.x, t*ax.z*ax.z+c\n    );\n}\nvoid mainImage( out vec4 o, in vec2 FC )\n{\n    // Initialize variables (modify these for different effects)\n    float i, d = 1., m;\n    vec3 p, q, u = vec3(0., 0., 0.); // Changed u initialization\n    u += 1.;\n    vec2 r = iResolution.xy;\n\n    // Raymarching loop\n    for(; i++ < 55.  && d > 5e-7; ) {\n        // Distance estimation (modifying this changes the shape)\n        d = ((length(fract(p.xz) - .5) - .096*sin(iTime)) + (  .12105 - 0.4*abs(p.y))); \n\n        m = 2.;\n\n        // Inner loop for detail (modify for different surface effects)\n        for(int j; j++ < 19; m += m) {\n            q = p * m * 12. * rotate3D(iTime * .015, vec3(1));\n            d -= (dot(sin(q), u)) / m * .02; \n        }\n\n        // Ray advancement \n        p += normalize(vec3(FC.xy - r * .915, r.y * .935)) * d * .6; \n    }\n\n    // Output color (experiment with this)\n    o += 11. / i * vec4(.5, vec3(1.5));\n\n    // Optional: Gamma correction for more pleasing colors\n    o = vec4(o.rgb * .5 + .5 * vec3(o.r * 1. + 0.5 * sin(iTime), o.g * 0.2, o.b * 1.), 1); \n}\n","name":"Image","description":"","type":"image"}]}