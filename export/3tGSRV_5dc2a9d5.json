{"ver":"0.1","info":{"id":"3tGSRV","date":"1583104380","viewed":155,"name":"uv grid distortion texture test","username":"shrekshao","description":"uv distortion mimicking that from Florence","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["uvdistortionprocedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Noise function\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n//----------\n\nvec2 flowUV(vec2 uv)\n{\n    // distort uv basic test\n    //uv.x += 0.1 * cos(9. * uv.y);\n    \n    vec2 offset = vec2( snoise(4. * cos(1.3 * uv + 0.01 * iTime)), snoise(3. * sin(1.5 * uv.yx + 0.01 * iTime) ) );\n    offset = offset * 2.0 - 1.0;\n    uv += 0.05 * offset;\n    \n    \n    return uv;\n}\n\n#define LINE_WIDTH 0.03\n\nfloat plot(float v, float pct){\n  return  smoothstep( pct-LINE_WIDTH, pct, v) -\n          smoothstep( pct, pct+LINE_WIDTH, v);\n}\n\n#define UV_GRID_STEPS 10.0\nvec3 uvGrid(vec2 uv)\n{\n    float size = 1.0 / UV_GRID_STEPS;\n    vec2 r = uv - floor(uv / size) * size;\n    r *= UV_GRID_STEPS;\t\t// vale in each grid is 0 - 1\n    \n    // 0 - 1 color gradient\n    //vec3 col = vec3(r, 0.0);\n    \n    // grid line\n    //vec3 col = vec3( smoothstep(r, vec2(0.48), vec2(0.52) ), 0.0);\n    //vec3 col = vec3( plot(r.x, 0.5), plot(r.y, 0.5), 0.0);\n    vec3 col = vec3( max(plot(r.x, 0.5), plot(r.y, 0.5)) );\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    //vec3 col = vec3( snoise(uv * 5. + iTime), 0., 0.);\n    \n        \n    uv = flowUV(uv);\n    \n    // uv grid pattern\n    // or replace with texture image sampling\n    \n    //vec3 col = uvGrid(uv);\n    vec3 col = texture(iChannel0, uv).rgb;\n    col += uvGrid(uv);\n    \n    \n    // // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}