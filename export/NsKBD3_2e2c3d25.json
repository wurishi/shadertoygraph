{"ver":"0.1","info":{"id":"NsKBD3","date":"1658927537","viewed":153,"name":"Miniature Forest","username":"tk87","description":"Vivid forest\n\nSHAKE==1: shake trees.","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//SHAKE==1: shake trees.\n#define SHAKE 0\n\nconst float PI = 3.14159;\n\nfloat hash(float n){return fract(sin(n) * 43758.5453123);}\nfloat hash(vec2 p) {\n    float f = p.x * 31. + p.y * 37.;\n    return fract(sin(f)*33.4);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    // return -1.0+2.0*mix(mix(hash(i + vec2(0.0,0.0)), hash(i + vec2(1.0,0.0)), u.x),\n    //             mix( hash(i + vec2(0.0,1.0)), hash(i + vec2(1.0,1.0)), u.x), u.y);\n    return mix(mix(hash(i + vec2(0.0,0.0)), hash(i + vec2(1.0,0.0)), u.x),\n                mix(hash(i + vec2(0.0,1.0)), hash(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d){\n    return a + b*cos(c*t+d);//PI*2.*(c*t+d)\n}\nmat2 rotate2D(float r){\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, s, -s, c);\n}\nvec2 TF(vec2 p, float t, float i) {\n    p.x = abs(p.x) - sin(t * i * 3.) * 0.03;\n    p = p - 0.2;\n    p.x -= 0.2;\n    p *= rotate2D(-PI / (5.0 + sin(t * i * 2.) * 3.));\n    return p;\n}\n\nvec3 tree(vec2 p, float t, vec2 id){\n    \n    vec3 col = vec3(0);\n\n    for(float k=-1.;k<=1.;k+=1.){\n        for(float j=-1.;j<=1.;j+=1.){\n            float scale = 1.;\n            vec2 offset = vec2(k, j);\n            float r = hash(id + offset);\n            vec2 uv = p - offset - vec2(r, fract(r*11.4)) + .5;\n\n            //grass\n            vec2 st = uv;\n            st = fract(st*vec2(5,3))-.5;\n            st.y +=.5;\n            st *= rotate2D(st.y+sin(t*2.)*.3);//rotate2D(PI/4.);\n            st.y -=.5;\n            float g = smoothstep(0.07, .0, length(st - vec2(0, clamp(st.y, -.5, .3*r))));\n            col += vec3(g*.05, g*.2, g*.1);\n            st.y +=.5;\n            st *= rotate2D(-st.y*2.+sin(t*2.)*.3);//rotate2D(-PI/2.);\n            st.y -=.5;\n            g = smoothstep(0.07, .0, length(st - vec2(0., clamp(st.y, -.5, .3*r))));\n            col += vec3(g*.05, g*.2, g*.1);\n\n\n            float red = 0.2 + fract(r*45.6) * .8;\n            float green = 0.2 + fract(r*34.5) * .8;\n\n            vec4 tcol = vec4(0);\n            uv *= 1.5+fract(r*51.)*2.;\n            float fade = 1.5 - fract(r*51.);\n\n            float d = smoothstep(0.1 / scale, .0, length(uv - vec2(0., clamp(uv.y, -0.8, -0.3 / scale))));\n            tcol += vec4(d*.5, d*.3, d*.1, d) * fade;\n            for(float i=0.;i<7.;++i){\n            \n                #if SHAKE == 1\n                uv+=.3*scale;\n                uv*=rotate2D(sin(i+t*5.+r*11.2+uv.y*2.)*(fract(i*r*8.12)-.5)*.4);\n                uv-=.3*scale;\n                #endif\n                \n                uv *= 1.3;\n                uv = TF(uv, t + fract(r*33.4), i);\n                scale *= 1.3;\n                d = smoothstep(0.1 / scale, .0, length(uv - vec2(0., clamp(uv.y, -1.5, 0.05 / scale))));\n                tcol += vec4(d*.5, d*.3, d*.1, d) * .5 * fade;\n\n                d = smoothstep(.3, 0., length(uv - vec2(0., 0.1 / scale)));\n                tcol += vec4(d*red, d*green, d*.1, d) * fade;\n            }\n            d = smoothstep(.5, 0., length(uv - vec2(0., 0.1 / scale)));\n            tcol += vec4(d*red, d*green, d*.2, d) * fade;\n\n            col = mix(col, tcol.rgb, tcol.a);\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    vec3 col = vec3(0);\n    \n    float t = iTime * .5;\n    uv.y += t * .2;\n    \n    \n    vec2 bx = fract(uv * 3.5) - 0.5;\n    vec2 id = floor(uv * 3.5);\n\n    col = tree(bx, t, id);\n    if(all(equal(col,vec3(0)))){\n        col = vec3(noise(uv*5.)*.3,noise(uv*5.+3.)*.3+.1,.0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}