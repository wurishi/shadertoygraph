{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\n// BEGIN CODE PASTED FROM: https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n// -------------\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// -------------\n// END CODE PASTED FROM: https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n\n\n// Natural Variation Test - 2013\n// Daniel \"Asteropaeus\" Dresser\n\n\n// 1D noise using ashima's simplex noise\n// Calculates derivatives using brute force forward differencing\n// Return value is ( noise, first derivative, second derivative )\nvec3 snoise_1D_with_deriv(float t)\n{\n\tfloat delta = 0.01;\n\tfloat samplev = snoise( vec2( t, 0.2 ) );\n\tfloat sampleStep = snoise( vec2( t + delta, 0.2 ) );\n\tfloat sampleStep2 = snoise( vec2( t + delta * 2.0, 0.2 ) );\n\treturn vec3( samplev, (sampleStep - samplev) / delta, -(sampleStep * 2.0 - (samplev + sampleStep2)) / ( delta * delta) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// A pile of parameters, all of these could also be randomly driven to add changes\n\t// in overall texture\n\tfloat noiseFreq1 = 1.0;\n\tfloat noiseFreq2 = 2.5234;\n\tfloat noiseFreq3 = 5.37;\n\tfloat noiseFreq4 = 9.38;\n\t\n\tfloat noiseMult1 = 1.0;\n\tfloat noiseMult2 = 0.2;\n\tfloat noiseMult3 = 0.05;\n\tfloat noiseMult4 = 0.05;\n\tfloat noiseClamp4 = 1.5;\n\t\n\t// Uncomment to try driving various things with the mouse\n\t/*\n\tnoiseMult1 = 0.0 + 0.002 * iMouse.x;\n\t//noiseMult2 = 0.0 + 0.001 * iMouse.x;\n\t//noiseMult3 = 0.0 + 0.0001 * iMouse.x;\n\t//noiseMult4 = 0.0 + 0.0001 * iMouse.x;\n\t//noiseClamp4 = 0.0 + 0.01 * iMouse.x;\n\t*/\n\t\n\t\n\t\n\t\n\tvec2 uv = fragCoord.yx / iResolution.yx;\n\t\n\t\n\tfloat time = iTime * 0.5 + uv.y * 5.0;\n\n\t\n\t\n\tvec3 noise1 = snoise_1D_with_deriv(time * noiseFreq1);\n\tnoise1.y *= noiseFreq1;\n\t\n\t\n\tvec3 noise2 = snoise_1D_with_deriv(time * noiseFreq2);\n\tnoise2.y *= noiseFreq2;\n\t\n\t\n\tvec3 noise3 = snoise_1D_with_deriv(time * noiseFreq3);\n\tnoise3.y *= noiseFreq3;\n\t\n\t\n\tvec3 noise4 = snoise_1D_with_deriv(time * noiseFreq4);\n\tnoise4.y *= noiseFreq4;\n\t\n\t// Set the weight on the second octave to the derivative of the first octave\n\tvec2 weight2 = noise1.yz * noiseMult2;\n\t//weight2.y = 0.0;\n\t\n\t// Calculate the combination of the first and second octaves, including their derivatives,\n\tvec2 combined2 = noiseMult1 * noise1.xy + vec2( weight2.x * noise2.x, weight2.x * noise2.y + weight2.y * noise2.x );\n\t\n\t// Set the weight on the third octave to the derivative of the first and second octaves combined\n\t// Note that the second component, representing the first derivative, is left 0 here\n\t// To compute it, we would need the third derivative of the noise - might increase quality if we did\n\tvec2 weight3 = vec2( combined2.y * noiseMult3, 0.0);\n\t\n\tvec2 combined3 = combined2 + vec2( noise3.x * weight3.x, noise3.y * weight3.x);\n\t\n\t// Set the weight on the fourth octave to the derivative of the previous octaves\n\tvec2 weight4 = vec2( max( 0.0, abs(combined3.y) - noiseClamp4) * noiseMult4, 0.0);\n\t\n\tvec2 combined4 = combined3 + vec2( noise4.x * weight4.x, noise4.y * weight4.x);\n    \n    float final = max( combined4.x * 0.5 + 0.2, 0.0 );\n\t\n\tfloat x0 = 0.5 + combined4.x * 0.2;\n\t\n\tfragColor = vec4(\n\t\tvec3(1.0 - (abs(uv.x - x0) / (0.003 + abs(dFdx( x0 ) ) * 1.0))),\n\t\t1.0);\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdfGzB","date":"1373173299","viewed":345,"name":"NaturalVariationTest","username":"asteropaeus","description":"Experiment with producing variation to similar to some oceanographic data sets used by Andres Wanner.\n\nBasic Noise From: https://github.com/ashima/webgl-noise/\n\nEach octave adds only in areas of high slope, adding chances of cliffs and plateaus.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["1d"],"hasliked":0,"parentid":"","parentname":""}}