{"ver":"0.1","info":{"id":"lf2SRG","date":"1706504190","viewed":108,"name":"Water sin wave normal 2D","username":"Chango","description":"Water sin wave normal 2D.Notice the normal is not correct sin wave normal.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","wave","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float y = f(uv,iTime);\n    \n    //!!!now this is not correct normal of the f function.\n    //but I found it more interesting\n    \n    float delta = 0.01f;\n\t\t\tvec2 n = normalize(vec2(\n\t\t\t\tf1(uv + vec2(delta, 0.),iTime) - f1(uv - vec2(delta, 0.),iTime),\n\t\t\t\tf2(uv + vec2( 0., delta),iTime) - f2(uv - vec2(0., delta),iTime)\n\t\t\t\t));\n                \n    // Time varying pixel color\n    vec3 col1 = texture(iChannel0,uv+DISTORTION*n).xyz;\n    vec3 col2 = texture(iChannel0,uv).xyz;\n    vec3 col = mix(col2,col1,length(n));\n\n    // Output to screen\n    if(uv.x<0.5)\n    {\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        fragColor = vec4((n+1.)*0.5,0.,1.0);\n        if(uv.y<0.5)\n        {\n            fragColor = vec4(y,y,y,1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define WAVEFreq 14.\n#define WAVEMoveSpeed 2.0\n#define DISTORTION 0.1\nfloat f( vec2 p ,float t)\n{\n    float sx = length(p-0.5);\n    \n    return sin(WAVEFreq*sx-WAVEMoveSpeed*t);\n}\n\n//!!!remove sx term seems not affect very much\n\nfloat f1( vec2 p ,float t)\n{\n    float sx = length(p-0.5);\n    return sx*(p.x-0.5) *cos(WAVEFreq*sx-WAVEMoveSpeed*t);\n}\n\nfloat f2( vec2 p ,float t)\n{\n    float sx = length(p-0.5);\n    return sx*(p.y-0.5) * cos(WAVEFreq*sx-WAVEMoveSpeed*t);\n}","name":"Common","description":"","type":"common"}]}