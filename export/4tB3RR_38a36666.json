{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S.Guillitte\n//Based on Voronoise by iq :https://www.shadertoy.com/view/Xd23Dh\n//and Gabor 4: normalized  by FabriceNeyret2 : https://www.shadertoy.com/view/XlsGDs\n\n#define PI 3.14159265358979\n\nint windows = 0;//0=noise,1=abs(noise),2=fbm,3=fbmabs\n\n\nfloat hash( in vec3 p ) \n{\n    return fract(sin(p.x*15.32758341+p.y*39.786792357+p.z*59.4583127+7.5312) * 43758.236237153)-.5;\n}\n\nvec3 hash3( in vec3 p )\n{\n    return vec3(hash(p),hash(p+1.5),hash(p+2.5));\n}\n\n//mat2 m2= mat2(.8,.6,-.6,.8);\n\n// Gabor/Voronoi mix 3x3 kernel (some artifacts for v=1.)\nfloat gavoronoi3(in vec3 p)\n{    \n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n    float f = 4.*PI;//frequency\n    float v = .8;//cell variability <1.\n    float dv = .9;//direction variability <1.\n    vec3 dir = vec3(.1);\n    float va = 0.0;\n   \tfloat wt = 0.0;\n    for (int i=-1; i<=1; i++) \n\tfor (int j=-1; j<=1; j++) \n    for (int k=-1; k<=1; k++)    \n\t{\t\t\n        vec3 o = vec3(i, j, k)-.5;\n        vec3 h = hash3((ip - o));\n        vec3 pp = fp +o  -h;\n        float d = dot(pp, pp);\n        float w = exp(-d*4.);\n        wt +=w;\n        h = dv*h+dir;//h=normalize(h+dir);\n        va += cos(dot(pp,h)*f/v)*w;\n\t}    \n    return va/wt;\n}\n\n\n// Gabor/Voronoi mix 4x4 kernel (clean but slower)\nfloat gavoronoi4(in vec3 p)\n{    \n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n    vec3 dir = vec3(1.);\n    float f = 2.*PI;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;//frequency\n    float v = .8;//cell variability <1.\n    float dv = .7;//direction variability <1.\n    float va = 0.0;\n   \tfloat wt = 0.0;\n    for (int i=-2; i<=1; i++) \n\tfor (int j=-2; j<=1; j++)\n    for (int k=-2; k<=1; k++)     \n\t{\t\t\n        vec3 o = vec3(i, j, k);\n        vec3 h = hash3(ip - o);\n        vec3 pp = fp +o  -v*h;\n        float d = dot(pp, pp);\n        float w = exp(-d*4.);\n        wt +=w;\n      \th= dv*h+dir;//h=normalize(h+dir);\n        va +=cos(dot(pp,h)*f)*w;\n\t}    \n    return va/wt;\n}\n\n// Gabor/Voronoi mix 5x5 kernel (even slower but suitable for large wavelets)\nfloat gavoronoi5(in vec3 p) \n{    \n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n    float f = 2.*PI;//frequency\n    float v = 1.;//cell variability <1.\n    float dv = .8;//direction variability <1.\n    vec3 dir = vec3(.7);\n    float va = 0.0;\n   \tfloat wt = 0.0;\n    for (int i=-2; i<=2; i++) \n\tfor (int j=-2; j<=2; j++)\n    for (int k=-2; k<=2; k++)     \n\t{\t\t\n        vec3 o = vec3(i, j, k)-.5;\n        vec3 h = hash3(ip - o);\n        vec3 pp = fp +o  -h;\n        float d = dot(pp, pp);\n        float w = exp(-d*1.);\n        wt +=w;\n        h = dv*h+dir;//h=normalize(h+dir);\n        va += cos(dot(pp,h)*f/v)*w;\n\t}    \n    return va/wt;\n}\n\n  \n\n//concentric waves variant\nfloat gavoronoi3b(in vec3 p)\n{    \n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n    float f = 4.*PI;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t;//frequency\n    float v = .8;//cell variability <1.\n    float va = 0.0;\n    float wt = 0.0;\n    for (int i=-1; i<=1; i++) \n\tfor (int j=-1; j<=1; j++)\n    for (int k=-1; k<=1; k++)     \n\t{\t\t\n        vec3 o = vec3(i, j, k)-.5;       \t\t\n        vec3 pp = fp +o  - v*hash3(ip - o);\n        float d = dot(pp, pp);\n        float w = exp(-d*4.);\n        wt +=w;\n        va +=sin(sqrt(d)*f)*w;\n\t}    \n    return va/wt;\n}\n\n\nfloat noise( vec3 p)\n{   \n    if(fract(iTime*.1)<.33)return gavoronoi3(p);\n    if(fract(iTime*.1)<.66)return gavoronoi4(p);\n    return gavoronoi3b(p);\n}\n\nfloat fbmabs( vec3 p ) {\n\t\n\tfloat f=1.;\n   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<4;i++){\t\n\t\tr += abs(noise( p*f ))/f;       \n\t    f *=2.2;\n\t}\n\treturn r;\n}\n\nfloat fbm( vec3 p ) {\n\t\n\tfloat f=1.;\n   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<4;i++){\t\n\t\tr += noise( p*f )/f;       \n\t    f *=2.;\n\t}\n\treturn r;\n}\n\nfloat map(vec3 p){\n\n    if(windows==0)return noise(p*4.);\n    if(windows==1)return 2.*abs( noise(p*10.));\n\tif(windows==2)return fbm(p);\n    return 1.2*fbmabs(p);\n}\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.) );\n\n\tfloat c;\n    \n   \tif (tmm.x<0.)c =  map(rd)/2.;\n    else c= map(ro+rd*tmm.x)/2.;\n    vec3 col = vec3( c,c*c,c*c*c);\n   \n\t\n\t// shade\n    \n    col =  1.5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n}\n\t\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tB3RR","date":"1426434691","viewed":453,"name":"Gavoronoise 3d","username":"guil","description":"A 3d version of my previous shader : https://www.shadertoy.com/view/llsGWl","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","voronoi","noise","gabor"],"hasliked":0,"parentid":"","parentname":""}}