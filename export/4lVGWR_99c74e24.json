{"ver":"0.1","info":{"id":"4lVGWR","date":"1474217106","viewed":955,"name":"Rabinovich–Fabrikant Equations","username":"Flyguy","description":" A parameter sweep of the Rabinovich–Fabrikant equations. The plotting mode can be changed to sweep either initial conditions (default) or system parameters. Unstable regions show up a flat unchanging dark purple color.","likes":11,"published":3,"flags":48,"usePreview":0,"tags":["math","visualization","attractor","chaos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://en.wikipedia.org/wiki/Rabinovich-Fabrikant_equations\n\n#define XYZ 0 // abs(XYZ) -> RGB\n#define GRADIENT 1 // 1-log(speed) where white is ~0 and dark purple is very large or NaN (unstable)\n\n#define DISP_MODE GRADIENT\n\nvec3 Grad(float x)\n{\n    //Set x to 1 if it's NaN\n    if(x != x){x = 1.0;}\n    \n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = vec3(1);\n    \n    col = mix(col, vec3(1.00, 0.50, 0.00), pow(x, 0.3));\n    col = mix(col, vec3(0.20, 0.00, 0.15), smoothstep(0.05,0.8,x));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    vec4 p = texture(iChannel0, uv/res);\n    \n    vec3 col = vec3(0);\n    \n    #if(DISP_MODE == XYZ)\n    col = abs(p.xyz * 0.5);\n    #elif(DISP_MODE == GRADIENT)\n    col = Grad(log(1.0 + p.w)/log(1.2));\n    #endif\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//Press space to reset\n#define KEY_SPACE 0x20\n\n//Plotting space\n#define INITIAL 0 //Inital conditions on PLANE vary with UVs (Shows stable initial conditions for the current system parameters)\n#define PARAMETER 1 //System parameters vary with UVs (Shows stable system parameters for the current initial conditions)\n\n//Settings\n#define STEPS 96.0 //Iterations per frame\n#define SPEED 0.25 //Time multiplier\n\n//Reset after changing\n#define PLOT_MODE INITIAL\n#define PLANE xy\n\n//System Parameters (+/- viewRange in PARAMETER mode)\nfloat A = 1.1;\nfloat Y = 0.87;\n\n//Initial conditions (initialCond +/- viewRange)\nvec3 initialCond = vec3(1.0,0.0,0.5);\nvec2 viewRange = vec2(4.0);\n\n//Calculate the next position \nvec3 Integrate(vec3 cur, float dt)\n{\n\tvec3 next = vec3(0);\n    \n    float x = cur.x;\n    float y = cur.y;\n    float z = cur.z;\n    \n    next.x = y*(z - 1.0 + x*x) + Y*x;\n    next.y = x*(3.0*z + 1.0 - x*x) + Y*y;\n    next.z = -2.0*z*(A + x*y);\n    \n    return cur + next * dt;\n}\n\nbool KeyPressed(int key)\n{\n    return texture(iChannel1, vec2(key, 0) / 256.0).r != 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    #if(PLOT_MODE == PARAMETER)\n        vec2 uvp = (uv - res/2.0) * 2.0;\n        A += uvp.x * viewRange.x;\n        Y += uvp.y * viewRange.y;\n    #endif\n    \n    vec3 last = texture(iChannel0, uv/res).xyz;\n    vec3 next = vec3(0);\n    vec3 vel = vec3(0);\n    \n    for(float i = 0.0;i < STEPS;i++)\n    {\n    \tnext = Integrate(last, (iTimeDelta * SPEED) / float(STEPS));\n        vel = next - last;\n        last = next;\n    } \n    \n    vel /= iTimeDelta*SPEED;\n\n    //Setup initial conditions.\n    if(iFrame == 5 || KeyPressed(KEY_SPACE))\n    {\n        #if(PLOT_MODE == INITIAL)\n            uv = (uv - res/2.0) * 2.0;\n\n            initialCond.PLANE += uv.xy * viewRange;\n        #endif\n        \n        fragColor = vec4(initialCond, 0);\n    }\n    else //Save current position.\n    {       \n        fragColor = vec4(next, length(vel));\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}