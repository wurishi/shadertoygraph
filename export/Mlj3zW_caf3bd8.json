{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"musicstream","id":"XsfSDl","filepath":"https://soundcloud.com/xlr8r/download-francesco-novara-ignition","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":3,"type":"keyboard","id":"4dXGRr","filepath":"/presets/tex00.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\n//---------------------------------------------------------\n// MarbleFantasies.glsl  by Antony Holzer\n// version:   v1.0  3/2015  initial release\n//            v1.1  9/2017  cross eye stereo projection added\n//            v1.2  7/2018  key handling added\n//            v1.3  1/2019  stereo view correction\n//            v1.4 11/2019  toggle background \n// original:  https://www.shadertoy.com/view/MtX3Ws\n// info:      3d marble with transparent satiny inner structure\n// changes:   added sphere antialiasing, extracted constants\n//            texture will be generated\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// tags:      3d, raytrace, sphere, antialiasing, transparency, satiny\n// keys:   a  sphere pattern animation\n//         b  toggle background \n//         f  sphere reflections \n//         r  rotate scene\n//         s  cross eye stereo view\n// mouse: rotate marble\n//---------------------------------------------------------\n\n//uniform float time;\n//uniform vec2 mouse;\n//uniform vec2 resolution;\n\n// shadertoy defines\n#define time iTime\n#define mouse iMouse\n#define resolution iResolution\n\n//---------------------------------------------------------\n// get javascript keycode: http://keycode.info/\n//----------------------------------------------------------\nconst int KEY_A = 65;\nconst int KEY_B = 66;\nconst int KEY_C = 67;\nconst int KEY_D = 68;\nconst int KEY_E = 69;\nconst int KEY_F = 70;\nconst int KEY_G = 71;\nconst int KEY_H = 72;\nconst int KEY_I = 73;\nconst int KEY_J = 74;\nconst int KEY_K = 75;\nconst int KEY_L = 76;\nconst int KEY_M = 77;\nconst int KEY_N = 78;\nconst int KEY_O = 79;\nconst int KEY_P = 80;\nconst int KEY_Q = 81;\nconst int KEY_R = 82;\nconst int KEY_S = 83;\nconst int KEY_T = 84;\nconst int KEY_U = 85;\nconst int KEY_V = 86;\nconst int KEY_W = 87;\nconst int KEY_X = 88;\nconst int KEY_Y = 89;\nconst int KEY_Z = 90;\n//----------------------------------------------------------\nbool ReadKey(int key, bool toggle)\n{\n  return 0.5 < texture(iChannel3\n    ,vec2((float(key)+0.5) / 256.0, toggle ? 0.75 : 0.25)).x;\n}\n\n//---------------------------------------------------------\n// global settings\n//---------------------------------------------------------\nbool animate_pattern = false;    // a\nbool show_background = true;     // b\nbool show_reflections = false;   // f\nbool rotation_scene = true;      // r\nbool cross_eye_view = true;      // s\n//---------------------------------------------------------\nvoid keyInput()\n{\n  if (iFrame > 9)\n  {\n    animate_pattern   = !ReadKey(KEY_A, true);\n    show_background   = !ReadKey(KEY_B, true);\n    show_reflections  = !ReadKey(KEY_F, true);\n    rotation_scene    = !ReadKey(KEY_R, true);\n    cross_eye_view    = !ReadKey(KEY_S, true);\n  }\n}\n//---------------------------------------------------------\n// here some values to play for you ...\n\n#define MAP_OCTAVE 7\n#define BACK_COLOR vec3(0.4, 0.05, 0.05)\n#define INNER_COLOR vec3(0.2, 0.2, 0.6)\n#define GLAS_COLOR vec3(0.5, 0.5, 0.9)\n\n//---------------------------------------------------------\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y ); }\n\nmat2 rot(float a)    { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\n//---------------------------------------------------------\nfloat map(in vec3 p)\n{\n    float res = 0.;\n    vec3 c = p;\n    for (int i = 0; i < MAP_OCTAVE; ++i)\n    {\n        p =.7*abs(p)/dot(p,p) -.7;\n        p.yz += csqr(p.yz);\n        p=p.zxy;\n        res += exp(-25.0 * abs(dot(p,c)));\n    }\n    return res;\n}\n//---------------------------------------------------------\n// intersect sphere:         from iq\n//   ro = rayOrigin, rd = rayDirection,\n//   sph.xyz = sphereCenter, sph.w = sphereRadius\n// return intersection point distance\n//---------------------------------------------------------\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot (rd, oc);\n\tfloat c = dot (oc, oc);\n\tfloat h = b*b - c + sph.w*sph.w;\n\tif (h < 0.0) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n//---------------------------------------------------------\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    float dt = 0.02;\n    if (animate_pattern)\n      dt = 0.02 + 0.01*cos(time*0.5);\n\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<64; i++ )\n    {\n        t+=dt*exp(-2.*c);\n        if(t>tminmax.y)break;\n        vec3 pos = ro+t*rd;\n        c = 0.45 * map(ro+t*rd);\n        col = 0.98*col + 0.08*vec3(c*c, c, c*c*c);  // green\n        col = 0.99*col + 0.08*vec3(c*c*c, c*c, c);  // blue\n        col = 0.99*col + 0.08*vec3(c, c*c*c, c*c);  // red\n    }\n    return col;\n}\n//---------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    keyInput();\n\n    vec2 uv = 2.0*(fragCoord.xy / resolution.xy) - 1.0;\n    uv.x *= resolution.x / resolution.y;\n    vec2 m = vec2(-0.5);\n//  if( mouse.z > 0.0 )      // mouse pressed?\n\tm = mouse.xy / resolution.xy * 3.14;\n//  m += mouse.xy * 3.14;    // use on glslsandbox.com\n\n    float eye = 0.1;\n    float radius = 1.4;\n\n    if (cross_eye_view)     // stereo view ?\n    {\n      radius = 1.0;\n      if (uv.x > 0.)\n      {\n        uv.x -= 0.8;\n        eye = -0.1;\n      } else {\n        uv.x += 0.8;\n        eye = 0.1;\n      }\n    }\n\n    // camera\n    vec3 ro = vec3(-6.8,0,0);   // origin\n    ro.z += eye;\n    ro.yz *= rot(m.y);\n    ro.xz *= rot(m.x);\n    if (rotation_scene)\n      ro.xz *= rot(0.07*time);\n\n    vec3 ta = vec3( 0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( uv.x*uu + uv.y*vv + 4.0*ww );\n\n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,radius) );\n\n    // raymarch\n    vec3 col = raymarch(ro,rd,tmm);  // get sphere Color\n\n    const float taa = 6.3;     // antialiasing limit\n    float aa = (2.2*(tmm.x - taa));\n    if ((tmm.x < 0.0) || (tmm.x > taa))\n    {\n        vec3 bgCol = vec3(0);\n        if (show_background)\n          bgCol = BACK_COLOR * map(rd);      // background color\n        if (tmm.x > taa)\n    \t{\n\t        //bgCol = vec3(9.0, 5.0, 0.0);   // for testing antialiasing\n            col = mix( col, bgCol, aa);      // do antialasing\n        }\n        else col = bgCol;        // set pure background color\n    }\n\n    if (tmm.x > 0.0)             // add sphere reflection ?\n    {\n        vec3 nor = reflect(rd, (ro+tmm.x*rd) * 0.5);  // sphere normal\n        float fre = pow(0.3+ clamp(dot(nor,rd), 0.0, 1.0), 3. )*1.3;\n        // add reflecting color\n        col += GLAS_COLOR * fre * 0.1 *(1.0-aa);   // add some solid glas\n        if (show_reflections)\n            col += BACK_COLOR * map(nor) * fre * 0.3 *(1.0-aa);\n    }\n\n    // shade\n    col = 0.5 *(log(1.0 + col));\n    col = clamp(col, 0., 1.0);\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":true,"mFlagMultipass":false,"mFlagMusicStream":true},"info":{"id":"Mlj3zW","date":"1427370707","viewed":1891,"name":"Marble Fantasies (Cross Eye)","username":"tholzer","description":"A 3d marble with transparent satiny inner structure of the antialiased sphere and a generated background. \nIf you want to see this sphere in it's full beauty please switch to fullscreen mode.\nUse mouse to rotate marble.\ntoggle keys: a,b,f,r,s  see header!","likes":64,"published":1,"flags":80,"usePreview":0,"tags":["3d","transparency","sphere","antialiasing","raytrace","satiny"],"hasliked":0,"parentid":"","parentname":""}}