{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/////////////////////////////////////////////////////////////////////////////\n// XBE\n// Retro style terrain rendering\n//\n\nconst float PI = 3.141592654;\n\n// Noise from IQ\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404;\n\tconst float K2 = 0.211324865;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm4( in vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f;\n}\n\nfloat fbm6( in vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p ); p = m*p*2.04;\n    f += 0.031250*noise( p ); p = m*p*2.01;\n    f += 0.015625*noise( p );\n    return f;\n}\n\nmat4 CreatePerspectiveMatrix(in float fov, in float aspect, in float near, in float far)\n{\n    mat4 m = mat4(0.0);\n    float angle = (fov / 180.0) * PI;\n    float f = 1. / tan( angle * 0.5 );\n    m[0][0] = f / aspect;\n    m[1][1] = f;\n    m[2][2] = (far + near) / (near - far);\n    m[2][3] = -1.;\n    m[3][2] = (2. * far*near) / (near - far);\n    return m;\n}\n\nmat4 CamControl( vec3 eye, float pitch)\n{\n    float cosPitch = cos(pitch);\n    float sinPitch = sin(pitch);\n    vec3 xaxis = vec3( 1, 0, 0. );\n    vec3 yaxis = vec3( 0., cosPitch, sinPitch );\n    vec3 zaxis = vec3( 0., -sinPitch, cosPitch );\n    // Create a 4x4 view matrix from the right, up, forward and eye position vectors\n    mat4 viewMatrix = mat4(\n        vec4(       xaxis.x,            yaxis.x,            zaxis.x,      0 ),\n        vec4(       xaxis.y,            yaxis.y,            zaxis.y,      0 ),\n        vec4(       xaxis.z,            yaxis.z,            zaxis.z,      0 ),\n        vec4( -dot( xaxis, eye ), -dot( yaxis, eye ), -dot( zaxis, eye ), 1 )\n    );\n    return viewMatrix;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = 2.*uv-1.;\n\tp.x *= iResolution.x/iResolution.y;\n\t\t \n\tvec3 eye = vec3(0., 0.25+0.25*cos(0.5*iTime), -1.);\n    mat4 projmat = CreatePerspectiveMatrix(50., iResolution.x/iResolution.y, 0.1, 10.);\n    mat4 viewmat = CamControl(eye, -5.*PI/180.);\n    mat4 vpmat = viewmat*projmat;\n    \n\tvec3 col = vec3(0.);\n\tvec3 acc = vec3(0.);\n\tfloat d;\n\t\n    vec4 pos = vec4(0.);\n\tfloat lh = -iResolution.y;\n\tfloat off = 0.1*iTime;\n\tfloat h = 0.;\n\tfloat z = 0.1;\n\tfloat zi = 0.05;\n\tfor (int i=0; i<24; ++i)\n\t{\n        pos = vec4(p.x, 0.5*fbm4(0.5*vec2(eye.x+p.x, z+off)), eye.z+z, 1.);\n        h = (vpmat*pos).y - p.y;\n\t\tif (h>lh)\n\t\t{\n\t\t\td = abs(h);\n\t\t\tcol = vec3( d<0.005?smoothstep(1.,0.,d*192.):0. );\n\t\t\tcol *= exp(-0.1*float(i));\n            acc += col;\n\t\t\tlh = h;\n\t\t}\n\t\tz += zi;\n\t}\n\tcol = sqrt(clamp(acc, 0., 1.));\n    // Background\n\tvec3 bkg = vec3(0.32,0.36,0.4) + p.y*0.1;\n\tcol += bkg;\n\t// Vignetting\n\tvec2 r = -1.0 + 2.0*(uv);\n\tfloat vb = max(abs(r.x), abs(r.y));\n\tcol *= (0.15 + 0.85*(1.0-exp(-(1.0-vb)*30.0)));\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dfSDj","date":"1406849231","viewed":3282,"name":"Linescape (Retro rendering)","username":"xbe","description":"Trying to simulate the retro look of first 3d terrain rendering in old games...","likes":115,"published":1,"flags":0,"usePreview":0,"tags":["2d","terrain","retro"],"hasliked":0,"parentid":"","parentname":""}}