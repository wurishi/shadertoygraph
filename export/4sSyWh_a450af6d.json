{"ver":"0.1","info":{"id":"4sSyWh","date":"1513792203","viewed":190,"name":"Snowfall","username":"Baloo","description":"Merry Christmas everyone :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\n\tReferences:\n\thttps://www.shadertoy.com/view/MsSyRz\n\thttps://iquilezles.org/articles/distfunctions\n\n\n\tSorry for the ugly code :)\n*/\n\nfloat rand(vec2 co)\n{\n    vec2 seed = co * 0.00002467874;\n    vec4 c = texture(iChannel0, seed);\n    return c.r;\n}\n\nvec4 rand4(vec2 co)\n{\n    vec2 seed = co / max(iResolution.y, iResolution.x);\n    vec4 c = texture(iChannel0, seed);\n    return c;\n}\n\nvec2 randFlakePos(float iSeed)\n{\n    float x = iSeed;\n    float y = rand4(vec2(iSeed*13.0, iSeed)).r * iResolution.y * 15.0;\n    vec2 p = vec2(x, y);\n    return p;\n}\n\nint oneFlake(vec2 iFragCoord, vec2 iFlakeStart, float iFlakeSize, float iIndex, out vec3 oColor)\n{\n    float distScale = 0.5 + 1.5*iFlakeSize;\n    \n    float phase = rand4(iFlakeStart).r * 0.8;\n    \n    float velX = 0.5 + 2.0*rand4(vec2(iIndex*13.32, 12.0)).x;\n    float dx = sin(phase + iTime*velX) * distScale;\n    float absDx = abs(dx);\n    \n    float velYScale = 70.0 + 70.0*rand(vec2(iIndex*135667.0, 896782.0));\n    float velY = (iTime*velYScale - absDx*absDx*absDx*0.3) * distScale;\n    \n    vec2 flake = iFlakeStart - vec2(0.0, velY);\n    float maxY = iResolution.y*(0.75 + iFlakeSize*0.25);\n    flake.y = mod(flake.y, maxY) + (iResolution.y-maxY);\n    flake.x = iFlakeStart.x + dx*13.0;\n    \n    float size = 3.0 + 8.0*iFlakeSize;\n    float fade = 0.3 + 0.7*iFlakeSize;\n    float alpha = clamp((flake.y-iResolution.y+maxY)*0.0015, 0.0, 1.0);\n    \n    float distFromEdge = size - length(iFragCoord-flake);\n    if (distFromEdge < 0.0)\n        return 0;\n    \n    if (distFromEdge <= 1.0)\n    {\n\t    oColor = vec3(1.0-alpha);\n        return 1;\n    }\n    \n    oColor = vec3(0.90 + 0.1*fade);\n    return 2;\n}\n\nvec3 bgColor(vec2 iFragCoord, vec3 iSkyColor)\n{\n    float y = 0.2 + 0.1*sin(-0.5 + 3.0 * iFragCoord.x);\n    \n    float diff = iFragCoord.y - y;\n    \n    if (diff > 0.0)\n\t    return iSkyColor;\n    else if (diff > -2.0 / iResolution.y)\n        return vec3(0.0);\n    else\n        return vec3(1.0);\n}\n\nfloat sdfCircle(vec2 iP, vec2 iCenter, float iRadius)\n{\n\tfloat aspect = iResolution.x / iResolution.y;\n\n    vec2 d = iP-iCenter;\n    d.x *= aspect;\n    \n    return length(d) - iRadius;\n}\n\nfloat sdfBox(vec2 iP, vec2 iCenter, vec2 iSize)\n{\n    vec2 p = iP - iCenter;\n    vec2 d = abs(p) - iSize;\n  \treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n// TODO positions should be relative to the snowman itself\nfloat snowMan_Black(vec2 iFragCoord, vec3 iBgColor)\n{\n    float bigButton = max(0.006, 4.0 / iResolution.y);\n    float mouthButtonSize = max(0.004, 3.5 / iResolution.y);\n    float eyeSize = max(0.005, 3.0 / iResolution.y);\n    \n    float d = 100000.0;\n    \n    // bottom\n    float d1 = sdfCircle(iFragCoord, vec2(0.5, 0.35), bigButton);\n\tfloat d2 = sdfCircle(iFragCoord, vec2(0.501, 0.325), bigButton);\n\tfloat d3 = sdfCircle(iFragCoord, vec2(0.501, 0.30), bigButton);\n    d = min(d, min(d1, min(d2, d3)));\n    \n    // mid\n    float d4 = sdfCircle(iFragCoord, vec2(0.5, 0.39), bigButton);\n    float d5 = sdfCircle(iFragCoord, vec2(0.5, 0.41), bigButton);\n    d = min(d, min(d4, d5));\n    \n    // head: mouth\n    float d6 = sdfCircle(iFragCoord, vec2(0.5, 0.44), mouthButtonSize);\n    float d7 = sdfCircle(iFragCoord, vec2(0.496, 0.4415), mouthButtonSize);\n    float d8 = sdfCircle(iFragCoord, vec2(0.504, 0.4415), mouthButtonSize);\n    float d9 = sdfCircle(iFragCoord, vec2(0.493, 0.445), mouthButtonSize);\n    float d10 = sdfCircle(iFragCoord, vec2(0.507, 0.445), mouthButtonSize);\n\td = min(d, min(d6, min(d7, d8)));\n    d = min(d, min(d9, d10));\n    \n    // head: eyes\n    float d11 = sdfCircle(iFragCoord, vec2(0.494, 0.4625), eyeSize);\n    float d12 = sdfCircle(iFragCoord, vec2(0.506, 0.4625), eyeSize);\n\td = min(d, min(d11, d12));\n\n    return d;\n}\n\nfloat snowMan_Orange(vec2 iFragCoord, vec3 iBgColor)\n{\n    float noseSize = max(0.006, 3.0 / iResolution.y);\n\n    float dNose = sdfCircle(iFragCoord, vec2(0.5, 0.455), noseSize);\n    return dNose;\n}\n\nfloat snowMan_Red(vec2 iFragCoord, vec3 iBgColor)\n{\n    float dHat = sdfBox(iFragCoord, vec2(0.5, 0.49), vec2(0.015, 0.013));\n    return dHat;\n}\n\nvec3 snowMan(vec2 iFragCoord, vec3 iBgColor)\n{\n    float eps = 2.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n    float d = 1E8f;\n\n    {\n        float d2 = snowMan_Red(iFragCoord, vec3(1.0));\n        d = min(d, d2);\n        if (d2 < -eps)\n            color = vec3(1.0, 0.0, 0.0);\n\n        if (d < 0.0 && d >= -eps)\n    \t    return vec3(0.0);\n\t    else if (d < -eps)\n    \t    return color;\n\t}\n\n    {\n        float d1 = sdfCircle(iFragCoord, vec2(0.5, 0.33), 0.06);\n        float d2 = sdfCircle(iFragCoord, vec2(0.501, 0.40), 0.045);\n        float d3 = sdfCircle(iFragCoord, vec2(0.500, 0.45), 0.037);\n    \td = min(d, d1);\n    \td = min(d, d2);\n    \td = min(d, d3);\n    }\n    \n    {\n        float d2 = snowMan_Black(iFragCoord, vec3(1.0));\n        d = min(d, d2);\n        if (d2 < -eps)\n            color = vec3(0.0);\n    }\n    {\n        float d2 = snowMan_Orange(iFragCoord, vec3(1.0));\n        d = min(d, d2);\n        if (d2 < -eps)\n            color = vec3(1.0, 0.5, 0.25);\n    }\n\n    if (d > 0.0)\n        return iBgColor;\n    else if (d < 0.0 && d >= -eps)\n        return vec3(0.0);\n    else\n        return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 skyColor = vec3(0.25, 0.75, 0.9);    \n\tfragColor.rgb = bgColor(uv, skyColor);\n    fragColor.rgb = snowMan(uv, fragColor.rgb);\n    bool isBackGround = length(skyColor-fragColor.rgb) > 0.001;\n    \n    float dx = 40.0;\n    float maxFlakeSize = 0.0;\n    for (float i=fragCoord.x - dx; i < fragCoord.x + dx; i=i+1.0)\n    {\n    \tvec2 flakeStart = randFlakePos(i);\n        //vec2 flakeStart = vec2(rand(vec2(iTime, i)), i*20.0);\n        \n        float flakeSize = rand(vec2(13.0*i, 56.0)) * (iResolution.x / 1920.0);\n\n        //;\n        \n        vec3 c;\n        int res = oneFlake(fragCoord, flakeStart, flakeSize, i, c);\n        \n        if (res>=1)\n        {\n            if (isBackGround)\n            {\n                if (flakeSize < 0.5 * (iResolution.x / 1920.0))\n                \tflakeSize = 0.0;\n            }\n            \n            if (flakeSize > maxFlakeSize)\n            {\n    \t\t\tfragColor.rgb = c;\n                maxFlakeSize = flakeSize;\n            }\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}