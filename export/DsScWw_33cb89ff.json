{"ver":"0.1","info":{"id":"DsScWw","date":"1687768293","viewed":48,"name":"Clover1","username":"andydevs","description":"Shader with lighting effects\n\nInspired by kishimisu","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lightingcolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fractal layers\nint layers = 4;\nfloat layerFrac = 1.3;\nfloat spatialDamp = 0.9;\n\n// Color parameters\nfloat cWaveLength = 0.1;\nfloat cPeriod = -1.0;\nvec3 cFreqs = vec3(0.75, 1.15, -0.75);\nvec3 cPhases = vec3(0, 1.2, 4.0);\n\n// Luminosity parameters\nfloat lWaveLength = 0.10;\nfloat lPeriod = 2.0;\nfloat lFreq = 1.75;\nfloat lPhase = 4.0;\nfloat lumWidth = 0.01;\n\nvec3 cWave(float arg) {\n    return 0.5*(1.0 + cos(arg*cFreqs + cPhases));\n}\n\nfloat lWave(float arg) {\n    float wave = 0.5*(1.0 + cos(arg*lFreq + lPhase));\n    return lumWidth/wave;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv0 = 2.0*(fragCoord - 0.5*iResolution.xy)/min(iResolution.x, iResolution.y);\n    float cArg = iTime/cPeriod;\n    float lArg = iTime/lPeriod;\n    \n    // Compute distances\n    vec2 uv = uv0;\n    vec3 finalColor = vec3(0.0);\n    float s = 1.0;\n    for (float i = 0.0; i < float(layers); ++i) {\n        // Compute distance\n        float dist = length(uv) * exp(-spatialDamp*dot(uv0, uv0));\n        \n        // Compute c and l args\n        float cArg = s * (iTime/cPeriod + dist/cWaveLength);\n        float lArg = s * (iTime/lPeriod + dist/lWaveLength);\n        \n        // Update color and UV\n        finalColor += cWave(cArg)*lWave(lArg);\n        uv = layerFrac*(fract(uv) - 0.5);\n        s *= -1.0;\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}