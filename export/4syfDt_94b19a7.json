{"ver":"0.1","info":{"id":"4syfDt","date":"1530952126","viewed":213,"name":"1995 tribute","username":"Flopine","description":"One of my fav demo of all time. I can listen its music everyday and anytime <3\nhttps://www.youtube.com/watch?v=weGYilwd1YI ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","1995","demo","mfx","kewlers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, lsdlive, XT95, lamogui and Coyhot for teaching me :) <3\n// Cookie Collective rulz... also Kewlers and mfx <3\n\n#define ITER 100.\n#define PI 3.141592\n\nfloat smin(float a, float b, float k) {\n\tfloat h = clamp(.5 + .5*(b - a) / k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\n\nmat2 rot (float a)\n{float c= cos(a); float s = sin(a); return mat2(c,-s,s,c);}\n\nvec2 moda (vec2 p)\n{\n    float per = (2.*PI)/6.;\n float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a-per/2.,per)-per/2.;\n    return vec2 (cos(a),sin(a))*l;\n}\n\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat cyl(vec3 p, float r, float h)\n{return max(length(p.xz)-r, abs(p.y)-h);}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nfloat branch (vec3 p)\n{\n    p.yz = moda(p.yz);\n    p.y -= 6.;\n    return smin(cyl(p,(p.y+12.)*0.05,5.), sphe(vec3(p.x,p.y-5.,p.z),0.9),0.05);\n}\n\nfloat branches (vec3 p)\n{\n    vec3 q = p;\n    float b = branch(p);\n    p.xz *= rot (PI/2.);\n    float b1 = branch(p);\n    p = q;\n    p.xy *= rot(PI/2.);\n    float b2 = branch(p);\n    return smin(b2,smin(b,b1,0.5),0.5);\n}\n\nfloat prim1 (vec3 p, float detail)\n{\n    p = floor(p*detail)/detail;\n    p.xy -= vec2(5.,-1.);\n    p.xz *= rot(iTime);\n    p.xy *= rot(iTime+2.);\n\treturn smin(sphe(p,2.),branches(p),0.9);\n}\n\nfloat prim2 (vec3 p)\n{\n    p *= 2.;\n    p.xy += vec2(18.,10.);\n    p.xz *= rot(iTime);\n    float b1 = box(p, vec3(3.5,.5,.5));\n    \n    p.xy *= rot(PI/2.);\n    float b2 = box(p+vec3(2.,1.,0.), vec3(2.5,.5,.5));\n    float b3 = box(p+vec3(1.5,3.,0.), vec3(1.5,.5,.5));\n    float b4 = box(p+vec3(1.5,-3.,0.), vec3(1.5,.5,.5));\n    float b5 = box(p+vec3(1.5,-1.,0.), vec3(1.5,.5,.5));\n    return min(b5,min(b4,min(b3,min(b1,b2))));\n}\n\nfloat g = 0.;\nfloat SDF(vec3 p)\n{\n\tfloat d = min(prim1(p,4.),prim2(p));\n    g += 0.01/(0.01+d*d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.001,0.001,-8.); vec3 p = ro;\n    vec3 dir = normalize(vec3(uv,1));\n    \n    float shad = 0.;\n        for (float i=0.; i<ITER; i++)\n        {\n            float d = SDF(p);\n            if (d<0.001)\n            {\n                shad = i/ITER;\n                break;\n            }\n            p += d*dir*0.5;\n        }\n    \n    float t = length(ro-p);\n\n    vec3 col = vec3(1.-shad)\n        *vec3(0.,0.1,0.5)\n        +g*0.3;\n    col = mix(col, vec3(0.3,0.,0.4)*(1.-length(uv*0.2)),1.-exp(-0.007*t*t));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}