{"ver":"0.1","info":{"id":"flsfzr","date":"1651874864","viewed":151,"name":"molten cheese <3","username":"curvedcubes","description":"*wobblemelts*","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["gradient","rainbow","cheese","holes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nvec3 rot(vec3 p, vec3 ax, float a){ // rotation by blackle\n    ax = normalize(ax);\n    return mix(dot(ax,p)*ax, p, cos(a)) + cross(ax,p)*sin(a);\n}\n\nfloat smin(float a, float b, float k ){\n\tfloat h = clamp(.5 + .5*(b-a)/k, 0., 1.);\n\treturn mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(q,0.)) + min(0., max(q.x, max(q.y, q.z)));\n}\n\nfloat sdf(vec3 p){\n    p.xz += .06*sin(10.*cos(p.y+iTime)); // wobble :>\n    p = rot(p, vec3(1), iTime);\n    float d = box(p, vec3(1))-.2;\n    \n    float s = 1.;\n    vec3 q = rot(p, vec3(.3,.9,.55), .37);\n    q = mod(q+0.5*s, s)-0.5*s;\n    d = smin(d, -length(q)+0.33*s, -0.07); // 1st set of holes\n    \n    q = rot(p, vec3(-.73,.14,.58), .87);\n    q = mod(q+0.5*s, s)-0.5*s;\n    d = smin(d, -length(q)+0.2*s, -0.07); // 2nd set of holes\n    \n    return d;\n}\n\nvec3 nor(vec3 p){\n    vec2 e = vec2(.001,0);\n    return normalize(sdf(p)-vec3(sdf(p-e.xyy),sdf(p-e.yxy),sdf(p-e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec2 puv = vec2(atan(uv.y,uv.x), length(uv)); // polar for background\n    uv.x += .01*sin(20.*sin(uv.x+iTime)); // wobbling uv.x\n\n    \n    // background color\n    float k = 3.*(puv.x + puv.y + sin(3.*puv.x) + iTime);\n    vec3 bg = abs(sin(vec3(k, k+(PI/3.), k+(2.*PI/3.)))); // color gradient\n\n    // isometric perspective\n    vec3 ro = vec3(5.*uv,-4), rd = vec3(0,0,1), p=ro;\n    bool hit = false, outline = false;\n    \n    for(int i=0; i<80 && !hit; i++){\n        float d = sdf(p);\n        hit = d<0.001;\n        outline = !outline && d<0.15 ? true : outline;\n        p += rd*d;\n        if(distance(p,ro)>7.)break;\n    }\n    \n    vec3 col = outline ? vec3(.4,.1,.3) : bg;\n    if(hit){\n        vec3 n = nor(p), l = normalize(vec3(1,2,1));\n        col = mix(vec3(.8,.45,.1), vec3(.9,.9,.7), pow(.5*dot(n,l)+.5,1.5));\n        col += 10.*vec3(1,.8,.1)*pow(max(dot(n,l),0.),20.);\n        col += 0.75*vec3(1,0,0)*max(sdf(p-.1*l),0.); // bad subsurface scattering :(\n    }\n    \n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}