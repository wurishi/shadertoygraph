{"ver":"0.1","info":{"id":"ldKXzy","date":"1465212814","viewed":133,"name":"Test_3_rgb_hsv","username":"qufangliu","description":"//Try to convert RGB to HSV\n//Try to convert HSV to RGB","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rgb","hsv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//RGB:Red Green Blue -> çº¢ç»¿è“\n//HSV:Hue Saturation Value -> è‰²ç›¸ é¥±å’Œåº¦ è‰²è°ƒ\n\n//Try to convert RGB to HSV\nvec3 RGBToHSV(vec3 rgb)\n{\n\tvec3 HSV = vec3(0.0, 0.0, 0.0);\n    float RGB_Max = max(rgb.x, max(rgb.y, rgb.z));\n    float RGB_Min = min(rgb.x, min(rgb.y, rgb.z));\n    \n    if (rgb.x == RGB_Max)\n    {\n        HSV.x = (rgb.y - rgb.z)/(RGB_Max - RGB_Min);\n    }\n    if (rgb.y == RGB_Max)\n    {\n        HSV.x = 2.0 + (rgb.z - rgb.x)/(RGB_Max - RGB_Min);\n    }\n    if (rgb.z == RGB_Max)\n    {\n        HSV.x = 4.0 + (rgb.x - rgb.y)/(RGB_Max - RGB_Min);\n    }\n    HSV.x = HSV.x * 60.0;\n    if (HSV.x < 0.0)\n    {\n        HSV.x = HSV.x + 360.0;\n    }\n    HSV.z = RGB_Max;\n    HSV.y = (RGB_Max - RGB_Min) / RGB_Max;\n    \n    return HSV;\n}\n\n//Try to convert HSV to RGB\nvec3 HSVToRGB(vec3 hsv)\n{\n    vec3 RGB = vec3(0.0, 0.0, 0.0);\n    if (hsv.y == 0.0)\n    {\n        RGB.x = hsv.z;\n        RGB.y = hsv.z;\n        RGB.z = hsv.z;\n    }\n    else {\n        hsv.x = hsv.x / 60.0;\n        int i = int(hsv.x);\n        float f = hsv.x - float(i);\n        float a = hsv.z * (1.0 - hsv.y);\n        float b = hsv.z * (1.0 - hsv.y * f);\n        float c = hsv.z * (1.0 - hsv.y * (1.0 - f));\n        \n        if (i == 0)\n        {\n            RGB.x = hsv.z;\n            RGB.y = c;\n            RGB.z = a;\n        }\n        else if (i == 1)\n        {\n            RGB.x = b;\n            RGB.y = hsv.z;\n            RGB.z = a;\n        }\n        else if (i == 2)\n        {\n            RGB.x = a;\n            RGB.y = hsv.z;\n            RGB.z = c;\n        }\n        else if (i == 3)\n        {\n            RGB.x = a;\n            RGB.y = b;\n            RGB.z = hsv.z;\n        }\n        else if (i == 4)\n        {\n            RGB.x = c;\n            RGB.y = a;\n            RGB.z = hsv.z;\n        }\n        else\n        {\n            RGB.x = hsv.z;\n            RGB.y = a;\n            RGB.z = b;\n        }\n    }\n    return RGB;\n}\n\n//Test convert\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    if (fragCoord.x > 260.0)\n    {\n        vec3 rgb1 = vec3(fragColor.x, fragColor.y, fragColor.z);\n    \tvec3 hsv = RGBToHSV(rgb1);\n    \thsv.z *= 1.1;\n    \tvec3 rgb2 = HSVToRGB(hsv);\n    \tfragColor = vec4(rgb2, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}