{"ver":"0.1","info":{"id":"Mdy3D3","date":"1456699387","viewed":8350,"name":"Separable Axis JFA Testing","username":"demofox","description":"Experimenting with running JFA on each axis independently, to see if it's separable.  if so, that could mean fewer texture reads to get the same (or similar) output.","likes":18,"published":3,"flags":48,"usePreview":0,"tags":["2d","sdf","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*============================================================\n\nThis shader is the presentation shader\n\n============================================================*/\n\n/*============================================================\nShared Code Begin\n============================================================*/\n\nconst int c_numPoints = 100;\n\n//============================================================\nvec4 EncodeData (in vec2 coord, in vec3 color)\n{\n    vec4 ret = vec4(0.0);\n    ret.xy = coord;\n    ret.z = floor(color.x * 255.0) * 256.0 + floor(color.y * 255.0);\n    ret.w = floor(color.z * 255.0);\n    return ret;\n}\n\n//============================================================\nvoid DecodeData (in vec4 data, out vec2 coord, out vec3 color)\n{\n    coord = data.xy;\n    color.x = floor(data.z / 256.0) / 255.0;\n    color.y = mod(data.z, 256.0) / 255.0;\n    color.z = mod(data.w, 256.0) / 255.0;\n}\n\n//============================================================\n// Hash without sine from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//============================================================\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n//============================================================\nvec2 GetPointLocation (int index)\n{\n    return hash22(vec2(index, iDate.w)) * iResolution.xy;\n}\n\n//============================================================\nvec3 GetPointColor (int index)\n{\n    return hash32(vec2(index, iDate.w));\n}\n\n/*============================================================\nShared Code End\n============================================================*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get state\n    vec4 state = texture(iChannel0, vec2(0.0) / iResolution.xy);\n    \n    // handle zoom\n    vec2 adjustedFragCoord = fragCoord;\n    float zoom = 1.0;\n    if(iMouse.z>0.0 && length(iMouse.xy - fragCoord) < 100.0) {\n        zoom = 20.0;\n        adjustedFragCoord = (((fragCoord.xy - iMouse.xy) / zoom) + iMouse.xy);\n        if (length(iMouse.xy - fragCoord) > 95.0)\n        {\n            fragColor = vec4(1.0, 1.0, 0.0, 1.0);\n            return;\n        }\n    }\n    vec2 uv = adjustedFragCoord / iResolution.xy;  \n    \n    // get and decode the data\n    vec2 coord;\n    vec3 color;\n    if (state.x == 0.0)\n    \tDecodeData(texture(iChannel0, uv), coord, color);\n    else if (state.x == 1.0)\n    \tDecodeData(texture(iChannel1, uv), coord, color);   \n    else if (state.x == 2.0)\n    \tDecodeData(texture(iChannel2, uv), coord, color);  \n    else if (state.x == 3.0)\n    \tDecodeData(texture(iChannel3, uv), coord, color);     \n    \n\t// highlight differences if there are any\n    if (state.y == 1.0)\n    {\n        vec2 realCoord;\n        vec3 realColor;\n        DecodeData(texture(iChannel0, uv), realCoord, realColor);\n        if (realCoord != coord)\n        {\n            float amplitude = sin(iTime*10.0) * 0.5 + 0.5;\n            color = vec3(1.0, amplitude, 0.0);\n\t\t}\n    }\n        \n    // highlight the seeds a bit\n    if (length(adjustedFragCoord-coord) > 5.0)\n        color *= 0.75;    \n    \n    // gamma correct\n\tcolor = pow(color, vec3(1.0/2.2));        \n\tfragColor = vec4(color,1.0);\n}\n\n/*\n\nTODO:\n\n* make a button to view differences from ground truth in strobing red or something\n\nControls:\n* 1 = ground truth\n* 2 = JFA\n* 3 = JFA interleaved axis\n* 4 = JFA separate axis\n* space = toggle diff viewing mode (flashes diffs in red / yellow)\n* Click to zoom\n\n*/","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*============================================================\n\nThis shader is the ground truth of the vornoi information\n\n============================================================*/\n\nconst float KEY_1 = 49.5/256.0;\nconst float KEY_2 = 50.5/256.0;\nconst float KEY_3 = 51.5/256.0;\nconst float KEY_4 = 52.5/256.0;\nconst float KEY_SPACE = 32.5/256.0;\n\n/*============================================================\nShared Code Begin\n============================================================*/\n\nconst int c_numPoints = 100;\n\n//============================================================\nvec4 EncodeData (in vec2 coord, in vec3 color)\n{\n    vec4 ret = vec4(0.0);\n    ret.xy = coord;\n    ret.z = floor(color.x * 255.0) * 256.0 + floor(color.y * 255.0);\n    ret.w = floor(color.z * 255.0);\n    return ret;\n}\n\n//============================================================\nvoid DecodeData (in vec4 data, out vec2 coord, out vec3 color)\n{\n    coord = data.xy;\n    color.x = floor(data.z / 256.0) / 255.0;\n    color.y = mod(data.z, 256.0) / 255.0;\n    color.z = mod(data.w, 256.0) / 255.0;\n}\n\n//============================================================\n// Hash without sine from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//============================================================\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n//============================================================\nvec2 GetPointLocation (int index)\n{\n    return (hash22(vec2(index, iDate.w)) * iResolution.xy);\n}\n\n//============================================================\nvec3 GetPointColor (int index)\n{\n    return hash32(vec2(index, iDate.w));\n}\n\n/*============================================================\nShared Code End\n============================================================*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // data stored in pixel (0,0) since we cant read keyboard in Image\n    // since we have the max 4 images to sample.\n    if (floor(fragCoord) == vec2(0.0))\n    {\n        vec4 state = texture(iChannel0, fragCoord / iResolution.xy);\n        if (iFrame == 0)\n            state = vec4(0.0, 1.0, 0.0, 0.0);\n    \tif (texture(iChannel3, vec2(KEY_1,0.25)).x > 0.1)\n            state.x = 0.0;\n    \telse if (texture(iChannel3, vec2(KEY_2,0.25)).x > 0.1)\n            state.x = 1.0;        \n    \telse if (texture(iChannel3, vec2(KEY_3,0.25)).x > 0.1)\n            state.x = 2.0;     \n    \telse if (texture(iChannel3, vec2(KEY_4,0.25)).x > 0.1)\n            state.x = 3.0;           \n            \n        // space toggles the \"diff\" mode viewing\n        if (texture(iChannel3, vec2(KEY_SPACE, 0.25)).x > 0.1)\n        {\n            if (state.z == 0.0)\n            {\n            \tstate.y = 1.0 - state.y;\n            \tstate.z = 1.0;\n            }\n        }\n        else\n        {\n            state.z = 0.0;\n        }\n            \n        fragColor = state;\n        return;\n    }\n    \n    // on a frame that isn't 0, just pass through whatever color is already there\n    if (iFrame != 0)\n    {\n        fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n        return;\n    }\n    \n    // on frame 0, calculate the ground truth information\n    vec2 coord = GetPointLocation(0);\n    vec3 color = GetPointColor(0);\n    float bestDist = length(fragCoord - coord);\n    \n    for (int i = 1; i < c_numPoints; ++i)\n    {\n        vec2 newCoord = GetPointLocation(i);\n        vec3 newColor = GetPointColor(i);\n        float dist = length(fragCoord - newCoord);\n        if (dist < bestDist)\n        {\n            coord = newCoord;\n            color = newColor;\n            bestDist = dist;\n        }\n    }\n    \n    fragColor = EncodeData(coord, color);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*============================================================\n\nThis shader is the traditional JFA algorithm\n\n============================================================*/\n\n/*============================================================\nShared Code Begin\n============================================================*/\n\nconst int c_numPoints = 100;\n\n//============================================================\nvec4 EncodeData (in vec2 coord, in vec3 color)\n{\n    vec4 ret = vec4(0.0);\n    ret.xy = coord;\n    ret.z = floor(color.x * 255.0) * 256.0 + floor(color.y * 255.0);\n    ret.w = floor(color.z * 255.0);\n    return ret;\n}\n\n//============================================================\nvoid DecodeData (in vec4 data, out vec2 coord, out vec3 color)\n{\n    coord = data.xy;\n    color.x = floor(data.z / 256.0) / 255.0;\n    color.y = mod(data.z, 256.0) / 255.0;\n    color.z = mod(data.w, 256.0) / 255.0;\n}\n\n//============================================================\n// Hash without sine from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//============================================================\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n//============================================================\nvec2 GetPointLocation (int index)\n{\n    return (hash22(vec2(index, iDate.w)) * iResolution.xy);\n}\n\n//============================================================\nvec3 GetPointColor (int index)\n{\n    return hash32(vec2(index, iDate.w));\n}\n\n/*============================================================\nShared Code End\n============================================================*/\n\n// how many JFA steps to do.  2^c_maxSteps is max image size on x and y\nconst float c_maxSteps = 10.0;\n\n//============================================================\nvec4 StepJFA (in vec2 fragCoord, in float level)\n{\n    level = clamp(level-1.0, 0.0, c_maxSteps);\n    float stepwidth = floor(exp2(c_maxSteps - level)+0.5);\n    \n    float bestDistance = 9999.0;\n    vec2 bestCoord = vec2(0.0);\n    vec3 bestColor = vec3(0.0);\n    \n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 sampleCoord = fragCoord + vec2(x,y) * stepwidth;\n            \n            vec4 data = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            vec2 seedCoord;\n            vec3 seedColor;\n            DecodeData(data, seedCoord, seedColor);\n            float dist = length(seedCoord - fragCoord);\n            if ((seedCoord.x != 0.0 || seedCoord.y != 0.0) && dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = seedCoord;\n                bestColor = seedColor;\n            }\n        }\n    }\n    \n    return EncodeData(bestCoord, bestColor);\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialize random seed locations and colors\n    if (iFrame == 0)\n    {\n    \tfor (int i = 0; i < c_numPoints; ++i)\n    \t{\n        \tvec2 coord = GetPointLocation(i);\n        \tvec3 color = GetPointColor(i);\n            \n            if (floor(fragCoord) == floor(coord))\n            {\n                fragColor = EncodeData(coord, color);\n                return;\n            }\n        }\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    fragColor = StepJFA(fragCoord, float(iFrame));\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*============================================================\n\nThis shader does a JFA step on each axis independantly\ninterleaved over time.\n\n============================================================*/\n\n/*============================================================\nShared Code Begin\n============================================================*/\n\nconst int c_numPoints = 100;\n\n//============================================================\nvec4 EncodeData (in vec2 coord, in vec3 color)\n{\n    vec4 ret = vec4(0.0);\n    ret.xy = coord;\n    ret.z = floor(color.x * 255.0) * 256.0 + floor(color.y * 255.0);\n    ret.w = floor(color.z * 255.0);\n    return ret;\n}\n\n//============================================================\nvoid DecodeData (in vec4 data, out vec2 coord, out vec3 color)\n{\n    coord = data.xy;\n    color.x = floor(data.z / 256.0) / 255.0;\n    color.y = mod(data.z, 256.0) / 255.0;\n    color.z = mod(data.w, 256.0) / 255.0;\n}\n\n//============================================================\n// Hash without sine from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//============================================================\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n//============================================================\nvec2 GetPointLocation (int index)\n{\n    return (hash22(vec2(index, iDate.w)) * iResolution.xy);\n}\n\n//============================================================\nvec3 GetPointColor (int index)\n{\n    return hash32(vec2(index, iDate.w));\n}\n\n/*============================================================\nShared Code End\n============================================================*/\n\n// how many JFA steps to do.  2^c_maxSteps is max image size on x and y\nconst float c_maxSteps = 10.0;\n\n//============================================================\nvec4 StepJFA (in vec2 fragCoord, in int step, bool xAxis)\n{\n    float level = clamp(float(step), 0.0, c_maxSteps);\n    float stepwidth = floor(exp2(c_maxSteps - level)+0.5);\n    \n    float bestDistance = 9999.0;\n    vec2 bestCoord = vec2(0.0);\n    vec3 bestColor = vec3(0.0);\n    \n    if (xAxis)\n    {\n        // jfa step x axis\n        for (int x = -1; x <= 1; ++x) {\n            vec2 sampleCoord = fragCoord + vec2(x,0) * stepwidth;\n\n            vec4 data = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            vec2 seedCoord;\n            vec3 seedColor;\n            DecodeData(data, seedCoord, seedColor);\n            float dist = length(seedCoord - fragCoord);\n            if ((seedCoord.x != 0.0 || seedCoord.y != 0.0) && dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = seedCoord;\n                bestColor = seedColor;\n            }\n        }\n    }\n    else\n    {\n        // jfa step y axis\n        for (int y = -1; y <= 1; ++y) {\n            vec2 sampleCoord = fragCoord + vec2(0,y) * stepwidth;\n\n            vec4 data = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            vec2 seedCoord;\n            vec3 seedColor;\n            DecodeData(data, seedCoord, seedColor);\n            float dist = length(seedCoord - fragCoord);\n            if ((seedCoord.x != 0.0 || seedCoord.y != 0.0) && dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = seedCoord;\n                bestColor = seedColor;\n            }\n        }        \n    }\n    \n    return EncodeData(bestCoord, bestColor);\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialize random seed locations and colors\n    if (iFrame == 0)\n    {\n    \tfor (int i = 0; i < c_numPoints; ++i)\n    \t{\n        \tvec2 coord = GetPointLocation(i);\n        \tvec3 color = GetPointColor(i);\n            \n            if (floor(fragCoord) == floor(coord))\n            {\n                fragColor = EncodeData(coord, color);\n                return;\n            }\n        }\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n\tint frame = iFrame - 1;\n    int step = frame / 2;\n    bool xAxis = mod(float(frame), 2.0) == 1.0;\n    fragColor = StepJFA(fragCoord, step, xAxis);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*============================================================\n\nThis shader does a full JFA on x axis, then another on y\n\n============================================================*/\n\n/*============================================================\nShared Code Begin\n============================================================*/\n\nconst int c_numPoints = 100;\n\n//============================================================\nvec4 EncodeData (in vec2 coord, in vec3 color)\n{\n    vec4 ret = vec4(0.0);\n    ret.xy = coord;\n    ret.z = floor(color.x * 255.0) * 256.0 + floor(color.y * 255.0);\n    ret.w = floor(color.z * 255.0);\n    return ret;\n}\n\n//============================================================\nvoid DecodeData (in vec4 data, out vec2 coord, out vec3 color)\n{\n    coord = data.xy;\n    color.x = floor(data.z / 256.0) / 255.0;\n    color.y = mod(data.z, 256.0) / 255.0;\n    color.z = mod(data.w, 256.0) / 255.0;\n}\n\n//============================================================\n// Hash without sine from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//============================================================\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n//============================================================\nvec2 GetPointLocation (int index)\n{\n    return (hash22(vec2(index, iDate.w)) * iResolution.xy);\n}\n\n//============================================================\nvec3 GetPointColor (int index)\n{\n    return hash32(vec2(index, iDate.w));\n}\n\n/*============================================================\nShared Code End\n============================================================*/\n\n// how many JFA steps to do.  2^c_maxSteps is max image size on x and y\nconst float c_maxSteps = 10.0;\n\n//============================================================\nvec4 StepJFA (in vec2 fragCoord, in int step, bool xAxis)\n{\n    float level = clamp(float(step), 0.0, c_maxSteps);\n    float stepwidth = floor(exp2(c_maxSteps - level)+0.5);\n    \n    float bestDistance = 9999.0;\n    vec2 bestCoord = vec2(0.0);\n    vec3 bestColor = vec3(0.0);\n    \n    if (xAxis)\n    {\n        // jfa step x axis\n        for (int x = -1; x <= 1; ++x) {\n            vec2 sampleCoord = fragCoord + vec2(x,0) * stepwidth;\n\n            vec4 data = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            vec2 seedCoord;\n            vec3 seedColor;\n            DecodeData(data, seedCoord, seedColor);\n            float dist = length(seedCoord - fragCoord);\n            if ((seedCoord.x != 0.0 || seedCoord.y != 0.0) && dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = seedCoord;\n                bestColor = seedColor;\n            }\n        }\n    }\n    else\n    {\n        // jfa step y axis\n        for (int y = -1; y <= 1; ++y) {\n            vec2 sampleCoord = fragCoord + vec2(0,y) * stepwidth;\n\n            vec4 data = texture( iChannel0, sampleCoord / iChannelResolution[0].xy);\n            vec2 seedCoord;\n            vec3 seedColor;\n            DecodeData(data, seedCoord, seedColor);\n            float dist = length(seedCoord - fragCoord);\n            if ((seedCoord.x != 0.0 || seedCoord.y != 0.0) && dist < bestDistance)\n            {\n                bestDistance = dist;\n                bestCoord = seedCoord;\n                bestColor = seedColor;\n            }\n        }        \n    }\n    \n    return EncodeData(bestCoord, bestColor);\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialize random seed locations and colors\n    if (iFrame == 0)\n    {\n    \tfor (int i = 0; i < c_numPoints; ++i)\n    \t{\n        \tvec2 coord = GetPointLocation(i);\n        \tvec3 color = GetPointColor(i);\n            \n            if (floor(fragCoord) == floor(coord))\n            {\n                fragColor = EncodeData(coord, color);\n                return;\n            }\n        }\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n\tint frame = iFrame - 1;\n    \n    if (frame < int(c_maxSteps))\n    {\n        fragColor = StepJFA(fragCoord, frame, true);\n    }\n    else\n    {\n        frame -= int(c_maxSteps);\n        fragColor = StepJFA(fragCoord, frame, false);      \n    }\n}","name":"Buf D","description":"","type":"buffer"}]}