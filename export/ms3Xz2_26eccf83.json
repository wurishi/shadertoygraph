{"ver":"0.1","info":{"id":"ms3Xz2","date":"1680097150","viewed":48,"name":"Test-ATI ","username":"V_aris","description":"Test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat map(vec3 pos)\n{\n    float v = 0.0;\n    \n    // SDF Sphere\n    v = sdTorus(pos, vec2(2.0, .2));\n    \n    return v;\n}\n\nfloat CastRay(vec3 ro, vec3 rd)\n{\n    float c = 0.0;\n    \n    for(int i=0; i<64; i++)\n    {\n        float ray = map(ro + rd * c);\n        \n        if(ray < (0.0001*c))\n        {\n            return float(i)/32.;\n            //return c;\n        }\n        \n        c += ray;\n    }\n    \n    return -1.0;\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    float contact = CastRay(ro, rd); // on la changera plus tard\n    \n    vec3 col = vec3(0.0);\n    \n    if(contact == -1.0)\n    {\n        col = vec3(0.0);\n    }\n    else\n    {\n        col = vec3(1.0-contact);\n    }\n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // centrer et orthographique\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    float distance = length(uv - mouse);\n    vec3 color1 = vec3(0.0, -distance, distance-1.0);\n    \n    // Camera\n    vec3 cameraPos = vec3(0.0, sin(iTime)*3.0, 5.0);\n    vec3 cameraTar = vec3(0.0);\n    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + forward);\n    \n    \n    vec3 color = render(cameraPos, viewDir);\n    \n    fragColor = vec4(color+color1,1.0);\n}","name":"Image","description":"","type":"image"}]}