{"ver":"0.1","info":{"id":"4ljSW3","date":"1446912174","viewed":709,"name":"BlobNoise","username":"jt","description":"Using voronoi-cells in a grid to create blobs / particles, e.g. for rain-drops or snow\n(for an application as snow see [url]https://www.shadertoy.com/view/4l2SW3[/url]).","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["blobs","voroni"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BlobNoise (superposition of blobs in displaced-grid voronoi-cells) by Jakob Thomsen\n// Thanks to FabriceNeyret2 for simplifying the program.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define pi 3.1415926\n\nfloat T;\n\n// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nfloat simplegridnoise(vec2 v)\n{\n    float s = 1. / 256.;\n    vec2 fl = floor(v), fr = fract(v);\n    float mindist = 1e9;\n    for(int y = -1; y <= 1; y++)\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(x, y);\n            vec2 pos = .5 + .5 * cos(2. * pi * (T*.1 + hash(fl+offset)) + vec2(0,1.6));\n            mindist = min(mindist, length(pos+offset -fr));\n        }\n    \n    return mindist;\n}\n\nfloat blobnoise(vec2 v, float s)\n{\n    return pow(.5 + .5 * cos(pi * clamp(simplegridnoise(v)*2., 0., 1.)), s);\n}\n\nvec3 blobnoisenrm(vec2 v, float s)\n{\n    vec2 e = vec2(.01,0);\n    return normalize(\n           vec3(blobnoise(v + e.xy, s) - blobnoise(v -e.xy, s),\n                blobnoise(v + e.yx, s) - blobnoise(v -e.yx, s),\n                //e.x));\n                1.0));\n}\n\nfloat fractalblobnoise(vec2 v, float s)\n{\n    float val = 0.;\n    const float n = 4.;\n    for(float i = 0.; i < n; i++)\n    \tval += pow(0.5, i+1.) * blobnoise(exp2(i) * v + vec2(0, T), s);\n    return val;\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n//void mainImage( inout vec4 o, vec2 U ) // ERROR: overloaded functions must have the same parameter qualifiers\n\n{\n    float T = iTime;\n\n    //o += blobnoise( U/iResolution.x * 10., 5.); // doesn't work on Mac\n    o = vec4(blobnoise( U/iResolution.x * 10., 5.));\n    //o += fractalblobnoise( U/iResolution.x * 10., 5.);\n    //o += vec4(.5 + .5 * blobnoisenrm(U/iResolution.x * 10., 5.), 1.);\n}\n","name":"Image","description":"","type":"image"}]}