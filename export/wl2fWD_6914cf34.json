{"ver":"0.1","info":{"id":"wl2fWD","date":"1598998694","viewed":416,"name":"lightspeed starfield","username":"surffer3d","description":"Starfield crossed at normal and light speed.\nSome radial distortion, and chromatic aberration to add color.","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["chromaticaberration","starfield","uvdistort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float _PI = 3.14159265359;\nconst float _2PI = _PI * 2.0;\nconst float _PI2 = _PI * 0.5;\n\nfloat g_speed;\n    \nfloat noise(vec2 uv) {\n    return fract(sin(dot(uv,vec2(32.23,365.07))) * 17.0125);\n}\n\nvec3 drawStar(float t, vec2 uv, float angle, float dist, float speed) {\n    float c = cos(angle);\n    float s = sin(angle);\n    float speed2 = 2.0*t*0.5*(speed*0.075+0.025)*0.5;\n    float d = pow(fract(dist+speed2+g_speed*0.5), 4.0);\n    vec2 star = mat2(c,s,-s,c) * vec2(d,0.0);\n    float l = length(uv-star);\n    \n    float dim = 0.3 + speed*0.7*dist;\n    float blink_factor = fract(angle*6.142)*0.6;\n    float blink = mix(1.0, abs(sin(t*(15.0+dist+angle)+fract(angle*3.5)+dist)), blink_factor);\n    float power = 2.0*mix(1.0, 2.0, g_speed);\n    float att = smoothstep(0.00, pow(1.0-speed,0.75)*0.75, length(uv));\n    float sz = smoothstep(0.0005+(1.0+g_speed*5.0)*d/300., 0.0, l);\n    return power * sz * vec3(0.8, 0.9, 1.0) * att * dim * blink;\n}\n\n\nvec3 drawStars(vec2 uv, float t) {\n    vec3 col = vec3(0.0);\n        \n    float ang = 360.0 * (atan(uv.y, uv.x)+_2PI) / _2PI;\n    \n    for (int j=0; j<5; j++) {\n    \tfor (int i=0; i<30; i++) {\n            float x = float(i);\n            float y = mod(floor(ang)+float(j)-2.+360.0, 360.0);\n        \tvec4 s = texture(iChannel0, vec2(x+0.5, y+0.5)/iResolution.xy);\n            float a = _2PI * (y + s.r) / 360.0;\n            float dist = s.g;\n            float speed = s.b;\n            vec2 ca_offset = vec2(0.001, 0.0) * (1.0 + g_speed*2.0);\n        \tcol.r += drawStar(t, uv-ca_offset, a, dist, speed).r;\n            col.g += drawStar(t, uv, a, dist, speed).g;\n            col.b += drawStar(t, uv+ca_offset, a, dist, speed).b;\n    \t}\n    }\n    \n    return col;\n}\n\nvec2 distortUV(vec2 uv) {\n    float r = length (uv);\n    uv = normalize(uv) * pow(r, mix(1.0,0.025, g_speed));\n    \n    r = length (uv);\n    float rr = r*r;\n    float k1 = mix(-0.2, 0.0, g_speed);\n    float k2 = mix(-0.1, 0.0, g_speed);\n    \n    return uv * (1.0 + k1*rr + k2*rr*rr);\n}\n\n\nvec2 animUV(vec2 uv, float t) {\n    //uv += vec2(sin(t*0.25), cos(t*0.37)) * vec2(0.05,0.03);\n    \n    float angle = sin(t*0.15) * 0.5;\n    float c = cos(angle);\n    float s = sin(angle);\n    uv = mat2(c,-s,s,c) * uv;\n    \n    return uv;\n}\n\nfloat globalSpeed(float t) {\n    float s = sin(t*0.25);\n    float speed = 0.5 + 0.5*pow(abs(s), 0.5)*sign(s);\n    speed = smoothstep(0.2, 0.3, abs(fract(t/30.0)-0.5));\n    return speed;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv = animUV(uv, iTime);\n    \n    g_speed = globalSpeed(iTime);\n    uv = distortUV(uv);\n    \n    \n    vec3 col = drawStars(uv, iTime);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float noise(vec2 uv) {\n    return fract(sin(uv.x*32.23 + uv.y*365.07) * 17.0125);\n}\n\nvec4 start(vec2 uv, vec2 fragCoord) {\n    vec4 col = vec4(0.0);\n    \n    int count = int(mod(noise(uv) * 100.0, 10.0));\n    \n    float angle = noise(uv);\n    float dist = noise(uv*vec2(2.17,3.52));\n    float speed = pow(noise(uv*vec2(5.146,7.84)), 10.0);\n    \n    return vec4(angle, dist, speed, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = start(uv, fragCoord);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}