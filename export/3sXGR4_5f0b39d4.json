{"ver":"0.1","info":{"id":"3sXGR4","date":"1640882042","viewed":101,"name":"RegularPolygonHandling","username":"gPlatl","description":"Animate regular convex polygons with texture and polygon frame...\nThe antialiased drawing of the polygons are resolution independent!\nonMousePressed:  X = polygon count, Y = zoom.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","convex","antialiased","polygon","regular","sides"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---------------------------------------------------------\n// RegularPolygonHandling.glsl   2018-12-17, 2021-12-30\n//\n// Animate regular convex polygons with texture and polygon frame.\n// The antialiased drawing of the polygons are resolution independent!\n// onMousePressed:  X = polygon count, Y = zoom.\n//\n// tags: 2d, polygon, sides, regular, convex, antialiased\n//---------------------------------------------------------\n\n#define R iResolution.xy\n\n#define TAU 6.28318530718\n\nconst vec3 backColor    = vec3(0.3, 0.1, 0.3);\nconst vec3 polygonColor = vec3(0.8, 0.6, 0.4);\n\n//---------------------------------------------------------\n#define TILES_COUNT_Y 3.0\n#define TEX_COLOR(p) texture (iChannel0, 0.5*TILES_COUNT_Y * p.xy).xyz\n//---------------------------------------------------------\n// return distance of regular convex polygon\n//---------------------------------------------------------\nfloat dfPolygon (in vec2 pos, in float radius, in int sides)\n{   \n  float a = atan(pos.x, -pos.y);\n  float b = TAU / float(sides);\n  return cos(floor(.5+a/b)*b-a)*length(pos)/radius;\n}\n//---------------------------------------------------------\nfloat filledPolygon (in vec2 pos, in float radius, in int sides)\n{   \n  float b = dfPolygon (pos, radius, sides);\n  return smoothstep(0.0, 4./R.y, 0.5-b);\n}\n//---------------------------------------------------------\nfloat framedPolygon (in vec2 pos, in float radius, in float frameSize, in int sides)\n{\n  float b = (dfPolygon(pos, radius, sides));\n  float t=4./R.y;\n  return smoothstep(0.0, 4./R.y, 0.5 -b +frameSize*0.5)\n        -smoothstep(t+0.04, t+0.05, 0.54 -b -frameSize*0.5);  \n}\n//---------------------------------------------------------\nvoid mainImage (out vec4 fragColor, in vec2 U)\n{\n  vec2 uv = 1.3*(2.*U - R) / R.y;\n  vec2 mpos = iMouse.xy / R;\n  uv *= 0.5+mpos.y;\n  int sides = 3 + int(mod(iTime*0.6, 8.)); //s=3..10\n  if (iMouse.z > 0.0)              // mousePressed ?\n    sides = 3 + int(17.*mpos.x);   // s=3..20\n  vec2 M = vec2(0.0, -0.1);        // center\n  float ci = filledPolygon(uv-M, 1.0, sides);\n  float c2 = framedPolygon(uv-M, 1.0, 0.02+0.02*sin(iTime), sides);\n  vec3 textureColor = TEX_COLOR(uv);\n  vec3 col = mix (backColor, textureColor, ci);\n//col = backColor;   // for frame testing\n  col = mix (col, polygonColor, c2);\n  fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}