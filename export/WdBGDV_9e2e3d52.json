{"ver":"0.1","info":{"id":"WdBGDV","date":"1549980486","viewed":373,"name":"sdBox with empty inner region","username":"yashgugale","description":"Drawing sdBox with inner region as empty\n","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sdbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(in vec2 p, in vec2 b)\n{\n\tvec2 d = abs(p) - b;\n    // We are using vec2(0) because the point that lies on the object, has a distance of 0.0 from the object.\n    // Also, we are using max in the first part, because the points that lie inside the box, will have the \n    // abs(p)-b value as negative. Hence, by taking max(d, vec2(0)), we are clamping the value to 0.0, so that the point inside \n    // the object will get the distance from the box result as 0.0, and hence be drawn in red as distance is 0.0\n    return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // b.x value will change the shape of the box along the x-direction\n    // b.y value will change the shape of the box along the y-direction\n    vec2 b = vec2(0.1, 0.1);\n    vec2 boxPos = uv;\n    \n    // Thus, on subtracting by 0.5, the uv values no more range from 0.0, 0.0 to 1.0, 1.0.\n    // Instead, they range from -0.5, -0.5 to 0.5, 0.5, and as 0.0, 0.0 is the center for the box.\n    // 0.0, 0.0 is now at the center of the screen. Hence, the box moves to the center:\n    boxPos.x -= 0.5;\n    boxPos.y -= 0.5;\n    \n    float dist = sdBox(boxPos, b);\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    // Here, we are checking if the distance value is greater than -0.005 also, why? Because we want to draw only those points in\n    // red that have their inner regions above a particular threshold. If we do not impose the 2nd condition, the object will be drawn\n    // as filled because, max(d.x, d.y) will return a negative value for all points inside the box. Thus, doing a min(value, 0.0), will\n    // always return a negative value. So, if we simply check dist < 0.005, it will always return true for all the points inside the box.\n    // Thus, they will always be red and the box will be rendered as filled.\n    if(dist < 0.005 && dist > -0.005)\n        col = vec3(1.0, 0.0, 0.0);\n    else\n        col = vec3(1.0, 1.0, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}