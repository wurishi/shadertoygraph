{"ver":"0.1","info":{"id":"7dcBz8","date":"1655999685","viewed":126,"name":"SDF 2D Shapes","username":"csblo","description":"Just found some SDF for display 2D shapes","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Some SDF 2D primitives */\n\nvec2 screenUV(vec2 uv)\n{\n    float ratio = iResolution.x / iResolution.y;\n    vec2 scaleUV = uv / iResolution.y;\n    return vec2(scaleUV.x - .5 * ratio, scaleUV.y - .5);\n}\n\nfloat sdf_circle(vec2 uv, float r) \n{\n    // sqrt(x² + y²) = r\n    return length(uv) - r;\n}\n\nfloat sdf_diamond(vec2 uv, float s)\n{\n    return abs(uv.x) + abs(uv.y) - s;\n}\n\nfloat sdf_square(vec2 uv, float s)\n{\n    return max(abs(uv.x), abs(uv.y)) - s;\n}\n\nfloat sdf_rect(vec2 uv, float w, float h) \n{\n    return max(abs(uv.x) - w, abs(uv.y) - h);\n}\n\nfloat sdf_ellipse(vec2 uv, float rx, float ry) \n{\n    // x² / a² + y² / b² = 1\n    return (pow(uv.x, 2.) / pow(rx, 2.) + pow(uv.y, 2.) / pow(ry, 2.)) - 1.;\n}\n\nfloat sdf_triangle(vec2 uv, float s) \n{\n    return abs(uv.x) + uv.y * .5 - .5 + s;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = screenUV(fragCoord);\n\n    \n    float sdf1 = sdf_circle(uv, 0.4f);\n    float sdf2 = sdf_diamond(uv, 0.4f);\n    float sdf = mix(sdf1, sdf2, 1. - sin(iTime));\n    //sdf = sdf_ellipse(uv, 0.4f, 0.2f);\n    //sdf = sdf_square(uv, 0.35);\n    //sdf = sdf_rect(uv, 0.4, 0.15);\n    //sdf = sdf_triangle(uv, 0.5);\n    \n    vec3 col = vec3(0);\n    \n    if (sdf < 0.)  \n        col = vec3(1.);\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}