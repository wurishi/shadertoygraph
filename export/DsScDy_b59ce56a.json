{"ver":"0.1","info":{"id":"DsScDy","date":"1688447967","viewed":106,"name":"music visualizer mod 5","username":"KingHashish","description":"composition of functions","likes":7,"published":1,"flags":64,"usePreview":0,"tags":["portrait","phase"],"hasliked":0,"parentid":"dsXyWr","parentname":"complex plot 3"},"renderpass":[{"inputs":[{"id":"Ms3GDn","filepath":"https://soundcloud.com/beethovenquartet/string-quartet-no-4-op-18-no-3?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/beethovenquartet/string-quartet-no-4-op-18-no-3?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323\n#define I vec2(0., 1.)\n#define E vec2(exp(1.), 0.)\n\n#define ZOOM (0.15*iResolution.y)\n\nvec2 cmul(vec2 z1, vec2 z2)\n{\n    return mat2(z1, -z1.y, z1.x)*z2;\n}\nvec2 cdiv(vec2 z1, vec2 z2)\n{\n    return z1*mat2(z2, -z2.y, z2.x)/dot(z2, z2);\n}\n\nvec2 clog(vec2 z)\n{\n    return vec2(0.5*log(dot(z,z)), atan(z.y, z.x));\n}\n\nvec2 csin(vec2 z)\n{\n    return vec2(sin(z.x)*cosh(z.y), cos(z.x)*sinh(z.y));\n}\n\nvec2 ccos(vec2 z)\n{\n    return vec2(cos(z.x)*cosh(z.y), -sin(z.x)*sinh(z.y));\n}\n\nvec2 cexp(vec2 z, vec2 c)\n{\n    float argz, m, a;\n    float lnz = dot(z,z);\n    \n    //if (lnz == 0.) return vec2(0., 0.);\n    //else {\n        lnz = 0.5*log(lnz);\n        argz = atan(z.y, z.x);\n        \n        m = exp(c.x*lnz - c.y*argz);\n        a = c.x*argz + c.y*lnz;\n        \n        return m*vec2(cos(a), sin(a));\n    //}\n}\n\n\nvec3 hrgb(vec2 w)\n{\n    float a;\n    float aa = atan(w.y, w.x);\n    \n    vec2 v = w;\n    \n    if (true) { //polar\n        w.x = atan(v.y, v.x)/(PI/4.);\n        w.y = length(v);\n        w.y = log(1. + 100.*w.y);\n    }\n\n    vec3 c;\n    \n    a = (PI + aa)/(2.*PI);\n    \n    if (false) { //full colour\n        //c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n        //c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0 )) * float(a < 0.66);\n        //c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n\n        c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n        c.g = (0.5 + 0.5*sin(2.0*PI*a*2.0 - PI)); //* float(a < 0.66);\n        c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n\n        c -= 0.15*fract(w.y) + 1.5*fract(mod(a, 1.0/16.0));\n        c -= 0.35*pow( abs(sin(1.*PI*v.x))*abs(sin(1.*PI*v.y)), 0.2);\n\n    } else { //bw contouring \n        float c1;\n        c1 = 1. - 1.0*pow(abs(sin(2.*PI*w.x))*abs(sin(2.*PI*w.y)), 0.15);\n        c = vec3(c1, c1, c1);    \n    }\n    \n    \n    \n    if (false) { //checkerboard\n        a = aa;\n    \n        int b = (abs(int(2.*fract(w.x)))) \n              ^ (abs(int(2.*fract(w.y))));\n\n        if (b == 0)\n            if (abs(a) > PI/2.) \n                if (a > 0.) c = vec3(1.,0.,0.); else c = vec3(0.,1.,0.);\n            else \n                if (a > 0.) c = vec3(1.,1.,1.); else c = vec3(0.,0.,1.);\n\n        else {\n            c = vec3(0.,0.,0.);\n        }\n    }\n    \n    return c;\n}\n\n\nvec2 g(vec2 z)\n{\n    vec2 w;\n    \n    w = vec2(1., 0.);\n    \n    int n = 7;\n    \n    for (int i=0; i<n; i++) {\n        \n        \n        \n        float fft  = texelFetch( iChannel0, ivec2(i + 10, 0), 0 ).x;\n        float fft2 = texelFetch( iChannel0, ivec2(i + 0, 0), 0 ).x;\n        \n        float a0 = PI/2. ;//+ 0.1*log(1.+fft2) ;\n        \n        float a = float(i)*2.*PI/float(n);        \n        vec2 z0 = z - 1.5*vec2(cos(a + a0), sin(a + a0));\n        \n        z0 *= log(1.+fft);\n        \n        //if (i%2==0)\n            w = cdiv(w, z - z0);\n        //else\n        //    w = cmul(w, z - z0);\n        \n        \n        \n\n    }\n    \n    w = cexp(E, w);\n    \n    return w;\n}\n\nvec2 f(vec2 z)\n{\n    return g(g(g(g(z))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z, w, w1, w2, w3, w4;\n    \n    z = fragCoord - iResolution.xy/2.;\n\n    //if (iMouse.xy != vec2(0., 0.)) //to center at origin\n    //   z -= iMouse.xy - iResolution.xy/2.;\n    \n    \n    vec2 z0 = vec2(0., 0.);\n    w  = f( z/ZOOM - z0);\n    \n    /*\n    w1 = f( (z + vec2(-.25,-.25))/ZOOM  - z0);\n    w2 = f( (z + vec2(-.25, .25))/ZOOM  - z0);\n    w3 = f( (z + vec2( .25,-.25))/ZOOM  - z0);\n    w4 = f( (z + vec2( .25, .25))/ZOOM  - z0);\n    \n    fragColor = vec4(0.2*(hrgb(w) +\n                          hrgb(w1) + hrgb(w2) + \n                          hrgb(w3) + hrgb(w4)), 1.0);\n    */                      \n    fragColor = vec4(hrgb(w), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}