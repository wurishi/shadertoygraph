{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#ifdef GL_ES\nprecision highp float;\n#endif\n\nmat2 mm2(in float a){float c = abs( cos(a) ), s = sin(a);return mat2(c,-s,s,c);}\n\nconst float pi = 3.14159265;\nconst float halfpi = pi * 0.5;\nconst float oneoverpi = 1.0 / pi;\n\nfloat saturate( float a )\n{\n\treturn clamp( a, 0.0, 1.0 );\n}\n\n//\n// Fractional Brownian Motion code by IQ.\n\nfloat noise( float x, float y )\n{\n\treturn sin(1.5*x)*sin(1.5*y);\n}\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm4( float x, float y )\n{\n    vec2 p = vec2( x, y );\n    float f = 0.0;\n    f += 0.5000*noise( p.x, p.y ); p = m*p*2.02;\n    f += 0.2500*noise( p.x, p.y ); p = m*p*2.03;\n    f += 0.1250*noise( p.x, p.y ); p = m*p*2.01;\n    f += 0.0625*noise( p.x, p.y );\n    return f/0.9375;\n}\n\n//\n\n//\n// Fluctuation code based on http://glsl.heroku.com/e#9824.11\n\n#define MAX_ITER 7\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tfloat aspect = iResolution.x/iResolution.y;\n    float scale = 3.0;\n    \n    vec2 mainuv = ( fragCoord.xy / iResolution.xy );\n\tvec2 uv = mainuv * scale - scale * 0.5;\n    uv.x = abs( uv.x );\n\tuv.x *= aspect;\n\tvec2 i = uv;\n\tfloat finalval = 0.0;\n\tfloat inten = 1.0;\n    \n    //float facet = atan( uv.x, uv.y );\n    \n    float lengthUV = length( uv );\n    \n    float scaledLength = lengthUV * 20.0;\n    float core = iTime + fract( scaledLength ) * fract( -scaledLength );\n\n    //uv = uv * mm2( scaledLength );\n    \n\tfor (int n = 0; n < MAX_ITER; n++) \n    {\n        float s = 1.0 - saturate( float( n ) / float( MAX_ITER ) );\n\t\tfloat t = ( 1.0 - s );\n\t\ti = ( uv + vec2(\n\t\t\tatan( t - i.y, t + iTime ) + cos( t + i.y - core ), \n\t\t\tsin( t - i.x + core ) + atan( t + i.x, t + iTime )\n\t\t)) - ( i - ( 1.0 / vec2( n + 1 ) ) );\n        float val = dot( uv, i );\n        finalval = max( finalval, ( lengthUV * 0.0001 / ( s * s ) ) / ( val * val * s ) );\n\t}\n    \n    finalval = saturate( finalval );\n    \n    float vignette = 1.0 - saturate( lengthUV * lengthUV * 0.11 );\n    finalval *= vignette;\n    \n    finalval = max( finalval, 0.0 ) + 0.0025;\n    finalval = min( finalval, 1.0 );\n\n    vec3 finalColor = vec3(finalval);// * mix( vec3( 0.95, 0.97, 2.2 )\n                           //         , vec3( 0.95, 0.97, 1.2 ), saturate( length( i ) ) );\n    finalColor = pow( finalColor, vec3( 1.0 / 2.2 ) );\n\tfragColor = vec4( finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ls2XRh","date":"1409110026","viewed":333,"name":"Yajnev's Parasol","username":"Orihaus","description":"  ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}