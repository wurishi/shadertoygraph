{"ver":"0.1","info":{"id":"DtBBzV","date":"1694218122","viewed":73,"name":"three directions city grid tiles","username":"jt","description":"A city grid formed by combination of rectangular grids randomly rotated in three directions.\nThe tiles are colored by texture (sampled according to grid direction).\nClick to show underlying triangular grid.\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","rectangles","grid","grid","triangle","triangles","patterns","random","rectangle","barycentric","city","pattern","hex","grids"],"hasliked":0,"parentid":"DljBDm","parentname":"three directions city grid patch"},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtBBzV three directions city grid tiles, written 2023 by jt\n// based on https://www.shadertoy.com/view/DljBDm three directions city grid patch\n// https://www.shadertoy.com/view/dtBBRw three dir grid patches essence\n// 2d essence of https://www.shadertoy.com/view/DtsBWl three directional grid patches\n\n// A city grid formed by combination of rectangular grids randomly rotated in three directions.\n// The tiles are colored by texture (sampled according to grid direction).\n\n// tags: procedural, 2d, rectangles, grid, grid, triangle, triangles, patterns, random, rectangle, barycentric, city, pattern, hex, grids\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U; \n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;  \n    return uint(((x>>8U)^x.yzx)*k);\n}\n\nvec3 barycentric_even(vec2 p)\n{\n/*\n    // essential 2x3 matrix, omitting last row, requires adding (1/3,1/3,1/3)\n    // because T*vec3(0,0,-1/sqrt(3.0)) == vec3(1.0/3.0) captures the information of the omitted row.\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(-1,+1, 0)),\n            normalize(vec3(-1,-1,+2))\n        );\n    return T*(p*3.-vec2(0,1))/sqrt(6.0) + 1./3.0; // origin offset on y axis\n*/\n    float s = sqrt(3.0);\n    p *= s;\n    return vec3((vec2(-1,+1) * p.x - p.y/s + 1.0)/2.0, p.y / s);\n}\n\nvec3 barycentric_odd(vec2 p) // via 2x3 matrix plus offset\n{\n    // essential 2x3 matrix, omitting last row, requires adding (1/3,1/3,1/3)\n    // because T*vec3(0,0,-1/sqrt(3.0)) == vec3(1.0/3.0) captures the information of the omitted row.\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(-1,+1, 0)),\n            normalize(vec3(-1,-1,+2))\n        );\n    //return T*(p*3.-vec2(0,1))/sqrt(6.0) + 1./3.0; // origin offset on y axis\n    return T*p*sqrt(3.0)/sqrt(2.0); // center at (0,0,0) instead\n}\n\n#define scale (10.0)\n#define e (sqrt(3.0)*3./R.y*scale) /* smooth but blurry */\n//#define e (1./R.y*scale) /* less blurry */\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    float s = 0.01;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    vec3 t0 = barycentric_even(I*scale);\n    //vec3 t0 = barycentric_odd(I*scale);\n    \n    o = vec4(0);\n\n    ivec3 tile = ivec3(floor(t0));\n    //bool even = tile.x + tile.y + tile.z == 0;\n    bool even = ((tile.x ^ tile.y ^ tile.z) & 1) == 0;\n    //bool tri = any(lessThan(t, vec3(0))); // fundamental triangle\n    vec3 t = fract(t0);\n    //t -= vec3(m);\n    if(!even) t = 1.0 - t;\n\n    uint choice = uhash(tile + int(iTime)) % 3u;\n    t = choice == 2u ? t.zxy : choice == 1u ? t.yzx : t.xyz;\n\n    if(choice == 0u) o += texture(iChannel0, floor(vec2(t0.y-t0.x,t0.z*2.0))/20.0);\n    if(choice == 1u) o += texture(iChannel0, floor(vec2(t0.z-t0.y,t0.x*2.0))/20.0);\n    if(choice == 2u) o += texture(iChannel0, floor(vec2(t0.x-t0.z,t0.y*2.0))/20.0);\n    //if(choice == 0u) o.rgb += vec3(checker(ivec2(floor(vec2(t0.y-t0.x,t0.z*2.0)))));\n    //if(choice == 1u) o.rgb += vec3(checker(ivec2(floor(vec2(t0.z-t0.y,t0.x*2.0)))));\n    //if(choice == 2u) o.rgb += vec3(checker(ivec2(floor(vec2(t0.x-t0.z,t0.y*2.0)))));\n\n    float x = (t.y-t.x);\n    float c = 1.-min(min(smoothstep(s-e,s+e,abs(x)),smoothstep(s-e,s+e,abs(2.0*t.z-0.0))), smoothstep(s-e,s+e,abs(2.0*t.z-1.0)));\n\n    if(iMouse.z > 0.0)\n    {\n        o = mix(o, vec4(0.2*(choice == 2u ? vec3(0,0,1) : choice == 1u ? vec3(0,1,0) : vec3(1,0,0)), 1.0), 0.5);\n        o += 0.5 - 0.5 * min(smoothstep(0.0,0.0+e,t.x), min(smoothstep(0.0,0.0+e,t.y), smoothstep(0.0,0.0+e,t.z)));\n    }\n\n    //o = vec4(t, 1.0);\n    //o += vec4(c);\n    o *= vec4(1.0-c);\n\n    //if(tri) o.xyz = vec3(0,0,1); // fundamental triangle\n    //if(flip) o.xyz = vec3(1,0,0);\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}