{"ver":"0.1","info":{"id":"Xfl3DM","date":"1706698400","viewed":53,"name":"sdf for 3d","username":"TerryInGansu","description":"距离函数","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 100.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n#define PI 3.14159265\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdBox( vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdfSphere(in vec3 p) {\n    return length(p + vec3(sin(iTime) * 4., 0., 0.)) - 1.;\n    // return sdBoxFrame(p, vec3(1.5,1.3,1.5), 0.05 );\n}\n\nfloat sdfPlane(in vec3 p) {\n    float d = sdfSphere(p - vec3(3.));\n    return min(d, p.y);\n}\n\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        float d = sdfPlane(p);\n        if(d < PRECISION)\n            break;\n        t += d;\n    }\n    return t;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * sdfPlane(p + k.xyy * h) +\n        k.yyx * sdfPlane(p + k.yyx * h) +\n        k.yxy * sdfPlane(p + k.yxy * h) +\n        k.xxx * sdfPlane(p + k.xxx * h));\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);// 0 1 0\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.);\n    // vec3 ro = 4. * vec3(2. * cos(iTime), 1., 2. * sin(iTime));\n    vec3 ro = 3. * vec3(4.);\n    // if (iMouse.z > 0.01) {\n    //     float theta = iMouse.x / iResolution.x * 2. * PI;\n    //     ro = vec3(2. * cos(theta), 1., 2. * sin(theta));\n    // }\n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    vec3 rd = normalize(cam * vec3(uv, 1.));\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(5., 8., 0.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        float st = rayMarch(p, normalize(light - p));\n        if (st < TMAX) {\n            dif *= 0.1;\n        }\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n        color = amb * vec3(0.13) + dif * vec3(1.);\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}