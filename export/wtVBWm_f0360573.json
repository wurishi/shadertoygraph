{"ver":"0.1","info":{"id":"wtVBWm","date":"1614510307","viewed":149,"name":"geometry and slices","username":"sukupaper","description":"Mainly inspired by an old Charlinu's work: https://www.instagram.com/p/BpG5c1WgAkN/\nI know, my code isn't that much efficient (':","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","abstract","shapes","geometry","slices","charlinu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: geometry and slices\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat t;\nfloat aa;\n#define P 6.283185307\n\nvec4 mod289(vec4 g){return g-floor(g*(1./289.))*289.;}vec4 permute(vec4 g){return mod289((g*34.+1.)*g);}vec4 taylorInvSqrt(vec4 g){return 1.79284-.853735*g;}vec2 fade(vec2 g){return g*g*g*(g*(g*6.-15.)+10.);}float cnoise(vec2 g){vec4 v=floor(g.rgrg)+vec4(0.,0.,1.,1.),d=fract(g.rgrg)-vec4(0.,0.,1.,1.);v=mod289(v);vec4 r=v.rbrb,a=v.ggaa,p=d.rbrb,e=d.ggaa,c=permute(permute(r)+a),f=fract(c*(1./41.))*2.-1.,t=abs(f)-.5,b=floor(f+.5);f=f-b;vec2 m=vec2(f.r,t.r),o=vec2(f.g,t.g),l=vec2(f.b,t.b),u=vec2(f.a,t.a);vec4 n=taylorInvSqrt(vec4(dot(m,m),dot(l,l),dot(o,o),dot(u,u)));m*=n.r;l*=n.g;o*=n.b;u*=n.a;float i=dot(m,vec2(p.r,e.r)),x=dot(o,vec2(p.g,e.g)),s=dot(l,vec2(p.b,e.b)),S=dot(u,vec2(p.a,e.a));vec2 I=fade(d.rg),y=mix(vec2(i,s),vec2(x,S),I.r);float q=mix(y.r,y.g,I.g);return 2.3*q;}\nfloat rand(in vec2 st){ return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.585); }\nmat2 rot(in float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nfloat sph(in vec3 p, in float r) { return length(p) - r; }\nfloat box(in vec3 p, in vec3 s) { p = abs(p) - s; return max(max(p.x, p.y), p.z); }\nfloat los(in vec3 p, in float s) { p = abs(p); return (p.x+p.y+p.z-s)*0.57735027; }\nfloat slices(in vec3 p, in float nb, in float f) {\n    float i = 1./nb;\n    return abs(mod(p.y, i) - i*.5) - i*f;\n}\n\nvec3 pgen;\nfloat df(in vec3 p) {\n    vec3 pp[4];\n    p.xz *= rot(t*2.);\n    p.xy *= rot(t*.5);\n    mat2 rotV1 = rot(-t);\n    \n    pp[0] = p + vec3(-0.672,0.562,-0.081);\n    pp[0].xz *= rotV1;\n    pp[0].xy *= rotV1;\n    float d0 = max(box(pp[0].yxz, vec3(.1,.1,.75)),slices(pp[0].yzx + t, 5., .25));\n    \n    pp[1] = p + vec3(0.928,-0.698,-0.081);\n    pp[1].xz *= -rotV1;\n    pp[1].xy *= rotV1;\n    float d1 = max(max(los(pp[1], .5),slices(pp[1], 10., .125)),pp[1].y);\n    \n    pp[2] = p + vec3(0.328,0.622,-0.081);\n    pp[2].xz *= rotV1;\n    pp[2].xy *= -rotV1;\n    float d2 = max(sph(pp[2], .3),slices(pp[2] - t, 5., .25));\n    \n    pp[3] = p + vec3(-0.104,-0.359,0.306);\n    float k = slices(pp[3].zxy, 10., .2);\n    pp[3].xz *= -rotV1;\n    pp[3].xy *= -rotV1;\n    float d3 = max(box(pp[3], vec3(.35)),k);\n    \n    float d = min(d0,min(d1,min(d2,d3)));\n    pgen = d == d0 ? pp[0]\n        : d == d1 ? pp[1]\n        : d == d2 ? pp[2]\n        : d == d3 ? pp[3] : vec3(0.);\n    return d;\n}\n\n#define LIM .001\nvec3 normal(in vec3 p) { float d = df(p); vec2 u = vec2(0.,LIM); return normalize(vec3(df(p + u.yxx),df(p + u.xyx),df(p + u.xxy)) - d); }\n\n#define MAX_D 10.\n#define MAX_IT 30\nstruct rmRes { vec3 pos; int it; bool hit; };\nrmRes rm(in vec3 c, in vec3 r) {\n    rmRes res;\n    res.pos = c;\n    res.hit = false;\n    for(int i = 0; i < MAX_IT; i++) {\n        float d = df(res.pos);\n        if(d < LIM) { res.hit = true; break; }\n        if(distance(c,res.pos) > MAX_D) break;\n        res.pos += d*r;\n        res.it = i;\n    }\n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord.xy - .5*iResolution.xy)/iResolution.y;\n    t = iTime*.1;\n    \n    vec3 c = vec3(0.,0.,-2.);\n    vec3 r = normalize(vec3(st,.5));\n\n    rmRes res = rm(c,r);\n    \n    vec3 colors[3];\n    colors[0] = mix(vec3(1.000,0.151,0.638),vec3(0.965,0.754,0.044),length(st)*2.5);\n    colors[1] = vec3(0.092,0.089,0.095) - rand(st+fract(t))*.1;\n    colors[2] = vec3(0.062,0.161,0.455) / length(st);\n    \n    float d1 = cnoise(st*5.+t)+cnoise(st*10.)-2.+length(st)*5.864;\n    float d2 = cnoise(st*5.+t+.1245)+cnoise(st*10.+8.5456)-2.+length(st)*5.864;\n    vec3 color = mix(colors[0],colors[1],vec3(step(0.,abs(d1)-.1)));\n    color = mix(color,colors[2],vec3(step(0.,d2)));\n    color = mix(colors[1],color,vec3(step(0.,abs(d2) - .1)));\n    \n    if(res.hit && step(0.,d2) != 1.) {\n        vec3 n = normal(res.pos);\n        vec3 l = normalize(vec3(-1.));\n        \n        float div = .075;\n        vec2 pp = vec2(mod(pgen.x, div) - div*(1. - dot(n,l)),pgen.y);\n        float d = dot(pp,vec2(1.,0.));\n        d = step(0.,d);\n        color = mix(colors[0],colors[1],d);\n    } else  {\n        color += pow(float(res.it)*.02,2.)*colors[2];\n    }\n\n    fragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}