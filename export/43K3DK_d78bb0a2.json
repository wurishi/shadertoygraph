{"ver":"0.1","info":{"id":"43K3DK","date":"1718248693","viewed":112,"name":"llevame","username":"jorge2017a2","description":"//https://www.youtube.com/watch?v=xcBpGXEvA70\n//a-ha - Take On Me - EASY Piano Tutorial by PlutaX\n\n","likes":12,"published":1,"flags":8,"usePreview":0,"tags":["2d","sound","llevame","ahatakeonme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//llevame ---sound\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///......try chords\n//30-jun-2024-\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(0.25/antialiasing(0.5),0. , d - (b) )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n\n\n\n//https://www.shadertoy.com/view/MslGD8\n//IQ\n#define pi 3.1415926\n\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)));\n    return fract(sin(p)*18.5453);\n}\n\n// return distance, and cell id\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      vec2  r = g- f + o;\n\t  //vec2  r = g - f + (0.5+0.5*sin(iTime+6.2831*o));\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n\nvec2 project(vec3 v)\n{   return vec2(v) / v.z; }\n\n//https://www.shadertoy.com/view/csjyDw\n\n\nvec3 pisovornoi(vec2 p, vec3 col)\n{\n    vec2 p0=p;\n     //mat3 m = yaw_pitch_roll(26.8 *0.1 * pi, cos(26.8 * 0.1 * pi) * 0.5 * pi, 0.0);\n     mat3 m = yaw_pitch_roll(26.8 *0.1 * pi, cos(26.8 * 0.1 * pi) * 0.76 * pi, 0.0); //msm01, \n     \n     p= project(m * vec3(p*0.5,1));\n     vec2 c = voronoi(2.5*p + vec2(-0.1*iTime) );  //msm01\n    // computer voronoi patterm\n    //vec2 c = voronoi(14.0*p );\n    // colorize\n    col=mix(vec3(0.0,0.0,0.0),col-p0.y*0.00625, abs(c.x)-0.1);\n    //col=mix(vec3(0.0,0.0,0.0),col, abs(c.x)-0.1);\n    return col;\n}\n\n\nvec3 montes(vec2 p, vec3 colout)\n{\n//Mountains\n    ///https://www.shadertoy.com/view/MfyGW1\n    float y = abs(fract(p.x*5.0)-0.5)*0.1;\n    y+=abs(fract(p.x*12.0)-0.5)*0.05+0.75;\n    y+=sin(p.x*8.0)*0.05;\n    y+=sin(p.x*15.0)*0.02;\n    y+=0.01;\n    float m1 = smoothstep(y-0.003,y+0.003,p.y);\n    colout = mix(vec3(0.4,0.2,0.1),colout,m1);\n    vec3 colm=vec3(0.4,0.2,0.1);\n    float d1=p.y-0.4;\n    vec3 col= pisovornoi( p, colout);\n    colout= DFB(col*7.0, colout,d1);\n    return colout;\n}\n\n\nvec3 sol(vec2 p, vec3 colout)\n{\n    float d1= sdCircle(p-vec2(0.0,0.87), 0.35 );\n    colout= DFB(vec3(1.0,1.0,0.0), colout,d1);\n    return colout;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv.y+=0.2;\n    vec3 col2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n     vec3 col=vec3(0.0,0.0,1.0)-uv.y+0.75; \n    col=sol(uv, col2);\n    col= montes(uv, col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido \n//IQ,AeroShark333, Gaz ,etc. muchos :)\n\n//https://www.youtube.com/watch?v=xcBpGXEvA70\n//a-ha - Take On Me - EASY Piano Tutorial by PlutaX\n\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\nconst float ttotal=32.0; \nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nfloat ms;\nfloat mresp;\nfloat mtime;\nfloat mtempo;\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{ return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 ))); }\n\nfloat squareWave500( float f, float x)\n{ return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 )); }\n\nfloat squareWave250( float f, float x)\n{ return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nvec2 squareWave250( vec2 f, float x)\n{ return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nfloat triangleWave500( float q, float x)\n{ float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));  return (f); }\n\nfloat triangleWave250( float q, float x)\n{ float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0))); return (f); }\n\nfloat convertBassFreq (float f)\n{ return (f/2.0); }\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float f2;\n    float sampleX=0.0;\n    float f=w;\n    float v1,v2;\n    v1=squareWave250(f,t);\n    v2=triangleWave250(f,t);\n    sampleX =v1*v2*exp(-2.5*t);\n    f2=(sampleX+sawf(t,f));\n    float fx=f2*1.5;\n    return fx;\n}\n\n\nfloat D3(float ton, float tid, float toff)\n{   vec3 n3;\n    float resp;\n    n3=vec3(ton,tid, toff);\n    \n    \n    if(ms>=ton && ms<=toff)\n    {      // lower one octave\n      n3.y -=12.; //12 notas\n      //n3.y +=12.; //12 notas\n\n      // compute note frequency and time  \n      float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n      float t = mtime - float(n3.x)/mtempo;\n      if( n3.x==0.0 ) return 0.0;\n\n      // prepare wave parameters\n      float w = tau*f;\n      \n      float dwdt = w/iSampleRate; // derivative\n\n      // mix between bandlimited and raw saw waves  \n      vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n      // build instrument\n\n      float f1,y;\n      f1=wave1(w*t,1.00*dwdt,v,t,w);\n      float wf  = 0.4*f1;\n      y=f1*wf;\n      float offset=n3.x;\n       y*=exp(-1.0/n3.z * (t -offset) );\n        \n       mresp+=y;\n    }\n    \n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.5;\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n //variables globales\n ms=s;\n mresp=0.0;\n mtime=time;\n mtempo=tempo;\n\n\n D3(0.000,42.0,0.125); D3(0.125,42.0,0.250); D3(0.250,38.0,0.375); D3(0.375,35.0,0.500); D3(0.625,35.0,0.750); D3(0.875,40.0,1.000);\n D3(1.125,40.0,1.250); D3(1.375,40.0,1.500); D3(1.500,44.0,1.625); D3(1.625,44.0,1.750); D3(1.750,45.0,1.875); D3(1.875,47.0,2.000);\n D3(2.000,45.0,2.125); D3(2.125,45.0,2.250); D3(2.250,45.0,2.375); D3(2.375,40.0,2.500); D3(2.625,38.0,2.750); D3(2.875,42.0,3.000);\n D3(3.125,42.0,3.250); D3(3.375,42.0,3.500); D3(3.500,40.0,3.625); D3(3.625,40.0,3.750); D3(3.750,42.0,3.875); D3(3.875,40.0,4.000);\n D3(4.000,42.0,4.125); D3(4.125,42.0,4.250); D3(4.250,38.0,4.375); D3(4.375,35.0,4.500); D3(4.625,35.0,4.750); D3(4.875,40.0,5.000);\n D3(5.125,40.0,5.250); D3(5.375,40.0,5.500); D3(5.500,44.0,5.625); D3(5.625,44.0,5.750); D3(5.750,45.0,5.875); D3(5.875,47.0,6.000);\n D3(6.000,45.0,6.125); D3(6.125,45.0,6.250); D3(6.250,45.0,6.375); D3(6.375,40.0,6.500); D3(6.625,38.0,6.750); D3(6.875,42.0,7.000);\n D3(7.125,42.0,7.250); D3(7.375,42.0,7.500); D3(7.500,40.0,7.625); D3(7.625,40.0,7.750); D3(7.750,42.0,7.875); D3(7.875,40.0,8.000);\n D3(8.000,42.0,8.125); D3(8.000,23.0,8.938); D3(8.125,42.0,8.250); D3(8.250,38.0,8.375); D3(8.375,35.0,8.500); D3(8.625,35.0,8.750);\n D3(8.875,40.0,9.000); D3(9.000,28.0,9.875); D3(9.125,40.0,9.250); D3(9.375,40.0,9.500); D3(9.500,44.0,9.625); D3(9.625,44.0,9.750);\n D3(9.750,45.0,9.875); D3(9.875,47.0,10.000); D3(10.000,21.0,11.000); D3(10.000,45.0,10.125); D3(10.125,45.0,10.250); D3(10.250,45.0,10.375);\n D3(10.375,40.0,10.500); D3(10.625,38.0,10.750); D3(10.938,42.0,11.063); D3(11.063,26.0,12.063); D3(11.188,42.0,11.313); D3(11.438,42.0,11.563);\n D3(11.563,40.0,12.063); D3(12.063,16.0,13.063); D3(12.063,50.0,12.563); D3(12.563,50.0,12.813); D3(12.813,49.0,12.938); D3(12.938,47.0,13.938);\n D3(13.188,28.0,13.938); D3(14.000,21.0,15.000); D3(14.000,49.0,14.125); D3(14.125,49.0,14.375); D3(14.438,49.0,14.688); D3(14.750,45.0,15.125);\n D3(15.125,26.0,16.125); D3(15.188,49.0,15.313); D3(15.313,49.0,15.563); D3(15.625,49.0,15.875); D3(15.938,45.0,16.188);\n\n  return mresp;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n  float y= SoundIq(t1)*0.5;\n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"}]}