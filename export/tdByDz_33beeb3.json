{"ver":"0.1","info":{"id":"tdByDz","date":"1586431851","viewed":102,"name":"injury","username":"ligaobo","description":"由于摩擦作用产生的3d划痕","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3dnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XdfGRn\n//=======================================================================\n\nvec2 map( vec3 p )\n{\n    // table\n    vec2 d2 = vec2( p.y+0.55, 2.0 );\n\n    // apple\n    p.y -= 0.75*pow(dot(p.xz,p.xz),0.2);\n    vec2 d1 = vec2( length(p) - 1.0, 1.0 );\n\n    // union    \n    return (d2.x<d1.x) ? d2 : d1; \n}\n\nvec3 appleColor( in vec3 pos)\n{\n    // red\n    vec3 col = vec3(0.0);\n    \n    float coe = 0.5;\n    pos *= 1.5;\n    float r = abs_fbm(pos, 0.8, 0.4);\n    float f = fbm(pos, 0.7, 0.6);\n    float c = fbm(pos * 2., 0.4, 0.6);\n    float c1 = abs_fbm(pos * 3., 0.4, 0.6);\n    \n    {\n       f *= r + f;\n       c += c1;\n        \n        const float clouddark = 0.55;\n        const float cloudlight = 0.3;\n        const float cloudcover = 0.4;\n        const float cloudalpha = 4.0;\n        \n        float skytint = 0.8;\n\t\tvec3 skycolour1 = vec3(0.87, 0.36, 0.37);\n\t\tvec3 skycolour2 = vec3(0.89, 0.49, 0.53); \n    \tvec3 skycolour = mix(skycolour2, skycolour1, 1.0 - c);\n    \tvec3 cloudcolour = vec3(0.73, 0.66, 0.65) * clamp((clouddark + cloudlight*c), 0.0, 1.0);\n   \n    \tf = cloudcover + cloudalpha*f*r;\n    \n    \tcol = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n    }\n    return mix(col, vec3(fbm(pos * 10.5, 0.4, 0.8) * 2.5), sin(iTime * 0.8) * 0.5 + 0.5);\n}\n\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n    float t=0.0;\n    float dt = 0.06;\n    float nh = 0.0;\n    float lh = 0.0;\n    float lm = -1.0;\n    for(int i=0;i<128;i++)\n    {\n        vec2 ma = map(ro+rd*t);\n        nh = ma.x;\n        if(nh>0.0) { lh=nh; t+=dt;  } lm=ma.y;\n    }\n\n    if( nh>0.0 ) return vec2(-1.0);\n    t = t - dt*nh/(nh-lh);\n\n    return vec2(t,lm);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float dt = 0.1;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        h = max(h,0.0);\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n        t += dt;\n\t\tif( h<0.001 ) break;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 eps = vec2(.001,0.0);\n    return normalize( vec3(map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n                           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n                           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n\n    // camera\n    vec3 ro = 2.5*normalize(vec3(cos(0.2*iTime),0.9+0.3*cos(iTime*.11),\n\t\t\t\t\t\t\t\t  sin(0.2*iTime)));\n    vec3 ww = normalize(vec3(0.0,0.5,0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // raymarch\n    vec3 col = vec3(0.96,0.98,1.0);\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.y>0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd,nor);\n        vec3 lig = normalize(vec3(1.0,0.8,-0.6));\n     \n        float con = 1.0;\n        float amb = 0.5 + 0.5*nor.y;\n        float dif = max(dot(nor,lig),0.0);\n        float bac = max(0.2 + 0.8*dot(nor,vec3(-lig.x,lig.y,-lig.z)),0.0);\n        float rim = pow(1.0+dot(nor,rd),3.0);\n        float spe = pow(clamp(dot(lig,ref),0.0,1.0),16.0);\n\n        // shadow\n        float sh = softshadow( pos, lig, 0.06, 4.0, 6.0 );\n\n        // lights\n        col  = 0.10*con*vec3(0.80,0.90,1.00);\n        col += 0.70*dif*vec3(1.00,0.97,0.85)*vec3(sh, (sh+sh*sh)*0.5, sh*sh );\n        col += 0.15*bac*vec3(1.00,0.97,0.85);\n        col += 0.50*amb*vec3(0.10,0.15,0.20);\n\n        // color\n        vec2 pro;\n        col *= appleColor(pos);\n\t\tcol = pow(col, vec3(1.0));\n    }\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat fbm( vec3 p, float amplitude, float attenuation )\n{\n    float f = 0.0;\n\n    for(int i = 0; i < 4; i++)\n    {\n        f += amplitude*noise( p ); \n        p = m*p*2.0;\n        amplitude *= attenuation;\n    }\n\n    return f;\n}\n\nfloat abs_fbm( vec3 p, float amplitude, float attenuation )\n{\n    float f = 0.0;\n\n    for(int i = 0; i < 4; i++)\n    {\n        f += abs(noise( p ) * amplitude); \n        p = m*p*2.0;\n        amplitude *= attenuation;\n    }\n\n    return f;\n}\n\n\n","name":"Common","description":"","type":"common"}]}