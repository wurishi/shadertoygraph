{"ver":"0.1","info":{"id":"3lsXDH","date":"1573575548","viewed":117,"name":"mindfulpogrammer_sinewave","username":"mindfulpogrammer","description":"sinewave. \n\nMy first shader ever, inspired by the oscilloscope.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sinewave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Unused\nfloat scintillate(float ftime, float phase) {\n ftime = ftime + phase;\n if (ftime < -0.5) {\n   ftime = -1.0 - ftime;\n }\n else if (ftime > 0.5) {\n   ftime = 1.0 - ftime;\n }\n return ftime;\n}\n\nfloat band(float converge, float band, float ratio) {\n if (ratio < converge - band) {\n return 0.0;\n } else if (ratio < converge) {\n return (ratio - (converge - band)) / band;\n } else if (ratio > converge && ratio < converge + band) {\n return 1.0 - ((ratio - converge) / band);\n } else return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n\n    vec2 uv = fragCoord.xy;\n    vec2 ratio = fragCoord.xy / iResolution.xy;\n\n    //red\n    //float red = band(0.6 - scintillate(ftime, 0.0) * 0.2,\n    //0.5, ratio.y);\n\n    //green\n    //float green1 = band(0.5 + scintillate(ftime, 0.5) * 0.4,\n    //0.5, ratio.x) * 0.5;\n\n    //float green2 = band(0.5 + scintillate(ftime, -0.5) * 0.4,\n    //0.5, ratio.x) * 0.5;\n\n    //blue\n    //float blue = band(0.4 + scintillate(ftime, 0.0) * 0.2,\n    //0.5, ratio.y);\n\n    float sinewave = sin(3.14 * ratio.x * 2.0 + iTime);\n    float sinewave_y = sin(3.14 * ratio.y * 2.0 + iTime);\n\n    float blue = band(0.5 + sinewave_y * 0.1, 0.5, ratio.x);\n    float red = band(0.5 + sinewave * 0.1, 0.5, ratio.y);\n\n    fragColor = vec4(red, 0.0, blue, 0.0);\n}","name":"Image","description":"","type":"image"}]}