{"ver":"0.1","info":{"id":"7lV3RW","date":"1637296222","viewed":78,"name":"Polar Mandelbrot","username":"akohdr","description":"Because De Moivre  (and Fab....)\nNot sure what polar form buys you since you're forced to hop back / forth to compute '+c' part.\nUnless I missed a way to add complex numbers in polar form without changing coords or invoking trig??","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define iR iResolution\n\n#define PI2     1.570796326794896619231321691639751442098584699687552910487472296\n#define PI      3.141592653589793238462643383279502884197169399375105820974944592\n\n// returns cartesian form of nth power of complex number pz supplied in polar form\nvec2 deMoivre(vec2 pz, float n)\n{\n//    return pow(pz.x,n)*vec2(cos(n*pz.y),sin(n*pz.y));\n    return pow(pz.x,n)*sin(n*pz.y+vec2(PI2,0));  // call sin() with vec2\n}\n\nvoid mainImage( out vec4 k, in vec2 c )\n{\n    // change of coordinates to cartesian complex plane\n    c -= iR.xy/2.; c /= iR.y/2.; c.x -= .5;\n    \n    vec2 // polar form vec2(r,ø) == r(cos ø + i sin ø)\n         cp = vec2(length(c), atan(c.y,c.x)),\n         \n         // cartesian form vec2(x,y) == x + iy\n         cc = cp.x * vec2(cos(cp.y),sin(cp.y)),\n\n         // we track cartesian and polar form of z\n          z = cc, zp = cp;\n    \n    float i, max_its = min(32.,iTime*7.);\n    \n    for(i=0.; i<max_its && zp.x<2.; i++)\n    {\n        // use DeMoivre for z^2 bit \n        z = deMoivre(zp,2.) + cc;\n        \n        // find new polar form of z\n        zp = vec2(length(z), atan(z.y,z.x));\n    }\n\n    // colour result\n    k = .4*vec4(1,2,3,0) - vec4(1,2,3,0)*length(z)/i;\n}\n\n","name":"Image","description":"","type":"image"}]}