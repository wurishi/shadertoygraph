{"ver":"0.1","info":{"id":"NlGXWh","date":"1640632158","viewed":54,"name":"ripples_sdf_","username":"errendir","description":"ripples_sdf_","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 a = vec2(0.5, 0.5);\nvec2 b = vec2(0.5, 0.6);\nvec2 c = vec2(0.6, 0.5);\n\n// Compute the projection of a point onto a line as a float, such that 0 corresponds\n// to the projection onto segmentStart and 1 to the projection onto segmentEnd\nfloat progressOnSegment(vec2 segmentStart, vec2 segmentEnd, vec2 point) {\n  if (distance(segmentStart, segmentEnd) < 0.00001) {\n    return 0.5;\n  }\n  float distance = length(segmentEnd-segmentStart);\n  vec2 direction = normalize(segmentEnd - segmentStart);\n  return dot(direction, point - segmentStart) / distance;\n}\n\nvec2 vectorToSegment(vec2 segmentStart, vec2 segmentEnd, vec2 point) {\n  float progress = clamp(progressOnSegment(segmentStart, segmentEnd, point), 0.0, 1.0);\n  vec2 closestPoint = (segmentEnd - segmentStart) * progress + segmentStart;\n  return closestPoint - point;\n}\n\nfloat distanceFromSegment(vec2 segmentStart, vec2 segmentEnd, vec2 point) {\n  vec2 vectorTo = vectorToSegment(segmentStart, segmentEnd, point);\n  return length(vectorTo);\n}\n\nvec2 rotate90Counterclockwise(vec2 vector) {\n  return vec2(-vector.y, vector.x);\n}\n\nfloat distanceFromClockwiseTriangle(vec2 point) {\n  float distanceAB = distanceFromSegment(a, b, point) * sign(dot(normalize(rotate90Counterclockwise(b - a)), point - a));\n  float distanceBC = distanceFromSegment(b, c, point) * sign(dot(normalize(rotate90Counterclockwise(c - b)), point - b));\n  float distanceCA = distanceFromSegment(c, a, point) * sign(dot(normalize(rotate90Counterclockwise(a - c)), point - c));\n\n  return max(max(distanceAB, distanceBC), distanceCA);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (mod(distanceFromClockwiseTriangle(uv) - mod(iTime / 6.0, 0.5), 0.1) < 0.05) {\n            fragColor = vec4(1.0);\n    } else {\n        fragColor = vec4(0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}