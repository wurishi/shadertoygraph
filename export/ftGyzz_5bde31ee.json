{"ver":"0.1","info":{"id":"ftGyzz","date":"1660828168","viewed":111,"name":"Stateless Fourier Approximation","username":"Envy24","description":"Fourier approximation on interval [-L; L].","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["approximation","fourier","integration","numeric"],"hasliked":0,"parentid":"sdVfRt","parentname":"Fourier approximation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  8.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define PI                          3.1415926535897932\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_func(vec2 NDC, float f, float dfdx)\n{\n    float df   = NDC.y - f;\n    return SMAA(abs(df) / sqrt(1.0 + dfdx * dfdx));\n}\n\n// Function that you want to approximate in interval [-L; L].\n/* odd, N = 64, num_of_knots = 32 *\n#define func(x)  ( (x) )\n#define deriv(x) ( 1. )\n/* even, N = 64, num_of_knots = 32 *\n#define func(x)  ( (x)*(x) )\n#define deriv(x) ( 2.*(x) )\n/* odd, N = 64, num_of_knots = 32 *\n#define func(x)  ( (x)*(x)*(x) ) \n#define deriv(x) ( 3.*(x)*(x) )\n/* even, N = 64, num_of_knots = 32 *\n#define func(x)  ( abs(x) ) \n#define deriv(x) ( x/abs(x) )\n/**/\nfloat pulseOsc(\n    float amplitude,   // in range [0.0; 1.0]\n    float frequency,   // > 0.0\n    float time,        \n    float phase_shift,\n    float pulse_width)\n{\n    float TAU = 2.*PI;\n    float phase = phase_shift + time * TAU * frequency;\n    \n    float sign_ = fract(phase / TAU) >= pulse_width ? 1.0 : -1.0;\n\n    return sign_ * amplitude;\n}\n#define func(x) ( pulseOsc(1., 1., x, 0., 0.5) )\n#define deriv(x) ( 0. )\n/**/\n\nconst int min_treshold = 2;\nconst int num_of_knots = max(58,  min_treshold); // pick number of knots.\nconst int N = 2*num_of_knots;                    \nconst int num_of_coefs = num_of_knots * 2 + 1;\n\nfloat Fourier_approximation(\n    in float L, // defines interval [-L, L].\n    in float num_of_samples,\n    in float x)\n{                                 \n    float invN = 1. / num_of_samples,\n          num_of_knots_ = float(num_of_knots),\n          dx = (2.*L) * invN,\n          invMAP = PI / L,\n          f = 0.0;\n          x = x*invMAP;\n\n    for (float j = 0.; j < num_of_samples; j += 1.)\n    {     \n        // Calculate A0.\n        f += func(-L + j * dx);                                   \n    }\n    f *= invN;\n\n    for (float i = 1.; i <= num_of_knots_; i += 1.)\n    { \n        float A = 0., B = 0.;\n    \n        for (float j = 0.; j < num_of_samples; j += 1.)\n        {\n            float x_ = (-L + j * dx), fx = func(x_);\n            \n            // Calculate Fourier coefficients A1, B1, A2, B2, ... A(n-1), B(n-1).\n            A += fx * cos(i * (x_ * invMAP));\n            B += fx * sin(i * (x_ * invMAP));\n        }\n        \n        // Evaluate Fourier Polynomial at x and (x + DX).\n        f += (A * cos(i * x) + B * sin(i * x)) * 2. * invN;\n    }\n    \n    return f;\n}\n\n/*\n    return (f(x), dfdx(x)).\n*/\nvec2 Fourier_approximation_with_dfdx(\n    in float L, // defines interval [-L, L].\n    in float num_of_samples,\n    in float x)\n{                                 \n    float invN = 1. / num_of_samples,\n          num_of_knots_ = float(num_of_knots),\n          dx = (2.*L) * invN,\n          invMAP = PI / L,\n          f = 0.0,\n          dfdx = 0.0;\n          x = x*invMAP;\n\n    for (float j = 0.; j < num_of_samples; j += 1.)\n    {     \n        // Calculate A0.\n        f += func(-L + j * dx);                                   \n    }\n    f *= invN;\n\n    for (float i = 1.; i <= num_of_knots_; i += 1.)\n    { \n        float A = 0., B = 0.;\n    \n        for (float j = 0.; j < num_of_samples; j += 1.)\n        {\n            float x_ = (-L + j * dx), fx = func(x_);\n            \n            // Calculate Fourier coefficients A1, B1, A2, B2, ... A(n-1), B(n-1).\n            A += fx * cos(i * (x_ * invMAP));\n            B += fx * sin(i * (x_ * invMAP));\n        }\n        \n        // Evaluate Fourier Polynomial and first derivative at x.\n        f += (A * cos(i * x) + B * sin(i * x)) * 2. * invN;\n        dfdx += (B * cos(i * x) - A * sin(i * x)) * 2. * invN * i;\n    }\n    \n    return vec2(f, 2.*dfdx); // change scalar for derivative if function appears discontinuous.\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#define GSCALE 3.0\n#define YSCALE 1.0\n#define OFFSET vec2(0., 0.)\n\n    vec2 NDC = \n        LMB_IS_HOLD ?\n            GSCALE*(TO_CENTERED_NDC(SC-(iMouse.xy-R.xy*0.5))+OFFSET) :\n            GSCALE*(TO_CENTERED_NDC(SC)+OFFSET);\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         color.rb -= draw_func(NDC, YSCALE*func(NDC.x), YSCALE*deriv(NDC.x));\n\n    float n = float(N), L = 1.;\n    \n         color.gb -= vertical_line(NDC, -L); color.gb -= vertical_line(NDC, L);\n    \n    /* All values of approximated function and its first derivative (numeric) *\n    float dx = 0.01,\n          f  = YSCALE*Fourier_approximation(L, n, NDC.x),\n          fn = YSCALE*Fourier_approximation(L, n, NDC.x+dx);\n    color.rg -= draw_func(NDC, f, (fn-f)/dx);\n    /* All values of approximated function and its first derivative (analytic) */\n    vec2 v  = YSCALE*Fourier_approximation_with_dfdx(L, n, NDC.x);\n    color.rg -= draw_func(NDC, v.x, v.y);\n    /* One value of approximated function */\n    float x = sinOSC(-L, L, iTime*.5),\n          f_ = YSCALE*Fourier_approximation(L, n, x);\n    color = mix(color, vec3(1, 0, 1), SMAA(diskSDF_L2(NDC, vec2(x, f_), UNIT*2.2)));\n    /* */\n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0));\n}","name":"Common","description":"","type":"common"}]}