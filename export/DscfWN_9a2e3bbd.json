{"ver":"0.1","info":{"id":"DscfWN","date":"1697147863","viewed":68,"name":"Bat Country 2.0","username":"studiobloom","description":"light remake of bat country from hyperspektiv","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["psychedelic","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Impactful Parameters\nfloat waveIntensity = .05;      // Amplitude of the wavy distortions\nfloat saturationMultiplier = 1.5; // Multiplier for saturation to adjust color vividness\nfloat hueRotationSpeed = 0.1;    // Speed of the continuous hue rotation\n\n// convert RGB to HSV\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// convert HSV to RGB\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // UV transformations\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y -= sin(iTime + uv.y * 20.0 * cos(iTime / 100.0)) * waveIntensity;\n    uv.x += cos(iTime + uv.x * -20.0 * sin(iTime / 100.0)) * waveIntensity;\n\n    // sample texture with transformed UVs\n    vec4 tex = texture(iChannel0, uv);\n    vec3 hsv = rgb2hsv(tex.rgb);\n\n    // adjust saturation\n    hsv.y = clamp(hsv.y * saturationMultiplier, 0.0, 1.0);\n\n    // hue rotation\n    hsv.x += iTime * hueRotationSpeed;\n    hsv.x = fract(hsv.x);\n\n    // convert adjusted HSV back to RGB\n    vec3 adjustedRGB = hsv2rgb(hsv);\n\n    // output adjusted RGB values with the same alpha from the texture\n    fragColor = vec4(adjustedRGB, tex.a);\n}\n","name":"Image","description":"","type":"image"}]}