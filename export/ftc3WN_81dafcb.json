{"ver":"0.1","info":{"id":"ftc3WN","date":"1646580676","viewed":189,"name":"Mary Poppins Fourier ","username":"GCScholar","description":"Mary poppins drawed by Fourier ","likes":19,"published":1,"flags":32,"usePreview":0,"tags":["fourierseriesepicyclesmarypoppins"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Drawing with Fourier Series, as explained in this fantastic video:\n//  https://www.youtube.com/watch?v=r6sGWTCMz2k\n//\n// COMMON TAB: The PYTHON script to GENERATE COEFFICIENTS from SVG image, and the generated coefficients \n// BUFFER A: drawing image\n// BUFFER B: drawing epicicles\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 movingCoord = vec2(0);\n    movingCoord = fragCoord * (1.+sin(iTime)/10.);// + sin(iTime)*30.;\n    movingCoord = (RotateZ(0.1*sin(iTime)) * vec4(movingCoord,0.,0.)).xy;\n    vec4 c = texture(iChannel0, movingCoord/iResolution.xy);\n    \n    c += texture(iChannel1, movingCoord/iResolution.xy)*0.3;\n    fragColor = 1.-c;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n/*\n\nPYTHON SCRIPT TO GENERATE COEFFICIENTS\n# requires svg.path\n\nimport math,cmath\nfrom array import array\nfrom xml.dom import minidom\nfrom svg.path import parse_path\nfrom svg.path.path import Line, CubicBezier\n\n# Print the list of points on the complex plane as a vec2 array for visualization in ShaderToy\ndef PrintPointsAsVec2(Points):\n    print(\"vec2[\" + str(len(Points)) + \"] C = vec2[](\")\n    for p in Points:\n        print(\"vec2(\" + str(p.real) + \",\" + str(p.imag) + \"),\") # Remove the last comma, I'm too lazy ^_^\n    print(\");\")\n    \n    \n# Read the SVG file\ndoc = minidom.parse('mary.svg')\npath_strings = [path.getAttribute('d') for path\n                in doc.getElementsByTagName('path')]\ndoc.unlink()\n\nSAMPLE_RATE = 10\nminX = minY = 100000\nmaxX = maxY = -100000\ntotalSamples = 0\n\n# Find the path bounding box and the final number of samples\nfor path_string in path_strings:\n    path = parse_path(path_string)\n    for e in path:\n        if isinstance(e, CubicBezier):\n            n_samples = int(e.length() * SAMPLE_RATE)\n            if(n_samples > 0):\n                totalSamples += n_samples+1\n                for i in range(n_samples+1):\n                    t = i/(n_samples)\n                    x = e.point(t).real\n                    y = e.point(t).imag\n                    if(x < minX): minX = x;\n                    if(y < minY): minY = y;\n                    if(x > maxX): maxX = x;\n                    if(y > maxY): maxY = y; \n               \nif (maxX - minX) > (maxY - minY): \n    norm_factor = maxX - minX \nelse: \n    norm_factor = maxY - minY \n\n\nPoints =  []\nfor path_string in path_strings:\n    path = parse_path(path_string)\n    for e in path:\n        if isinstance(e, CubicBezier):\n            n_samples = int(e.length() * SAMPLE_RATE)\n            if(n_samples > 0):\n                for i in range(n_samples+1):\n                    t = i/(n_samples)\n                    # Traslate to origin and normaliza coordinates\n                    x = (e.point(t).real - (maxX-minX)/2) / norm_factor\n                    # SVG has the 0,0 on the top left, while shadertoy in bottom left, so transform coordinate to Shadertoy reference\n                    y = -(e.point(t).imag - (maxY-minY)/2) / norm_factor \n                    Points.append(complex(x,y))\n\n# Print the list of points                 \n#PrintPointsAsVec2(Points)\n\n# Compute the coefficients of the Discrete Fourier Transform of the values \nCOEFFICIENTS_NUMBER = 300\nC = []\nfor n in range(-int(COEFFICIENTS_NUMBER/2),int(COEFFICIENTS_NUMBER/2)+1):\n    Cn = 0\n    # Compute the c_i coefficient throught numerical integration\n    for i in range(totalSamples):\n        t = i/totalSamples\n        ft = Points[i]\n        Cn += ft*cmath.exp(-n*2*math.pi*1j*t) * (1/totalSamples)\n    C.append(Cn)\n\n# Print the list of coefficients    \nPrintPointsAsVec2(C)\n\n*/\n\n#define PI acos(-1.)\n\n// Rotate the image in the XY-plane\nmat4 RotateZ(float angle) \n{ \n    float c = cos(angle); \n    float s = sin(angle); \n    \n    return mat4(c,  s, 0., 0, \n                -s, c,  0., 0, \n                0., 0., 1., 0, \n                0., 0., 0., 1 ); \n}\n\n// Complex multiplication\nvec2 ComplexMul(vec2 a, vec2 b) \n{\n    // (a+ib) * (c+id) = (ac âˆ’ bd) + (ad + bc)i\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\n//// Fourier series coefficients\n#define COEFFICIENTS_NUMBER 501\n\nvec2[501] C = vec2[](\nvec2(1.6921828926458215e-05,3.14840262279281e-05),\nvec2(-3.732828824740447e-05,-4.954304007563488e-05),\nvec2(2.3225475976111046e-05,7.335321929144204e-06),\nvec2(-6.622176269197299e-05,5.036506028566215e-05),\nvec2(3.3342437075204344e-06,-8.592465093142046e-05),\nvec2(2.0841109442555874e-05,1.879331781227158e-05),\nvec2(-6.821012416974893e-05,1.0429347816048998e-06),\nvec2(5.1330874571403767e-05,-1.555513382446853e-05),\nvec2(-2.79234990677079e-05,2.788227705081321e-05),\nvec2(-3.6705930895571336e-05,-2.9083877966738698e-05),\nvec2(5.630570276417529e-05,5.965826010944325e-05),\nvec2(-5.195762082073599e-05,3.250054398581129e-05),\nvec2(4.529758595972016e-06,-2.7335473957996027e-05),\nvec2(-9.533130291567898e-06,7.630732088103203e-05),\nvec2(2.8943521972042602e-05,2.6445618478650843e-06),\nvec2(4.676696580613943e-05,-1.1321254221341432e-05),\nvec2(-6.034321122320728e-05,2.822528875463758e-05),\nvec2(5.611602867248938e-05,-6.393701687301107e-05),\nvec2(4.134908156309658e-05,2.409009686446146e-05),\nvec2(-1.4842155884946608e-05,-8.240785728987427e-05),\nvec2(3.842311110180375e-05,2.6226445770271616e-05),\nvec2(4.0589058612668274e-06,-2.180219674834292e-05),\nvec2(6.073657823287268e-06,-5.894389414188768e-05),\nvec2(-2.1922769578130342e-05,8.552675970647633e-06),\nvec2(-2.6650178450409974e-05,1.2811338819888466e-05),\nvec2(2.52306064379626e-05,-3.412962046094812e-05),\nvec2(-4.4326964605713856e-05,9.87258611534652e-06),\nvec2(1.950846040280372e-05,3.4526404990655704e-05),\nvec2(1.2606296556416055e-05,4.083199719355736e-05),\nvec2(-4.1079779588737116e-05,-5.32060503524095e-05),\nvec2(2.579528714999893e-05,2.5522158410958325e-06),\nvec2(-1.3039391675150255e-06,1.2184532049658627e-06),\nvec2(2.9837807630508927e-05,-2.421993315920697e-05),\nvec2(-1.55882346678312e-05,2.31889051614858e-05),\nvec2(-5.712564001301496e-05,-2.260344200292415e-05),\nvec2(8.952574710159539e-05,-1.5617498349537817e-05),\nvec2(-6.865183590809077e-05,1.6741683329281266e-05),\nvec2(-1.708178442767953e-05,-2.018241961700603e-05),\nvec2(1.2658755112453275e-05,4.820888545671661e-05),\nvec2(-4.838410204131951e-05,-5.930896601777114e-05),\nvec2(3.5670226877470365e-05,9.649174365448467e-06),\nvec2(-5.899168130387017e-05,8.014470429610067e-05),\nvec2(-1.6795208898100347e-05,-8.030240951719986e-05),\nvec2(2.2502758263675504e-05,4.683265927666667e-05),\nvec2(-5.8999227988074466e-05,-3.8273911262254814e-05),\nvec2(6.732825211282399e-05,1.5064366646585187e-06),\nvec2(-2.8404467207693175e-05,5.229431596053594e-05),\nvec2(-6.586951764900824e-05,-5.0370646964231666e-05),\nvec2(8.91205255149611e-05,4.4118357257633775e-05),\nvec2(-3.2972605634653426e-05,2.3378095753846813e-06),\nvec2(-1.6012070304891315e-05,-6.91543445616208e-05),\nvec2(8.859481175119525e-06,8.532632125239611e-05),\nvec2(-7.970770455759128e-05,-8.725927107380878e-05),\nvec2(7.242238113068932e-05,-6.704702058861152e-06),\nvec2(-0.00011645644730556933,4.176313562474886e-05),\nvec2(-1.2060829006052133e-05,-7.169281618060691e-05),\nvec2(3.0315848352137065e-05,1.57181072971935e-05),\nvec2(-0.00010511565530489214,-3.831633683637699e-05),\nvec2(4.113396406419249e-05,4.491184484891246e-06),\nvec2(-2.0393044112649652e-05,7.511210975697088e-05),\nvec2(-1.8843990819975073e-05,-0.00010510622644947331),\nvec2(-3.596441777124431e-05,8.053897403567827e-05),\nvec2(4.530284440760722e-06,5.0747458655400085e-05),\nvec2(3.0478696541556213e-05,-4.7501237777698076e-05),\nvec2(-2.470055809729037e-05,6.042446028153209e-05),\nvec2(-3.0009578280372843e-05,-2.562999435010448e-05),\nvec2(6.379256725934533e-05,0.00010211469755711642),\nvec2(-4.479819487305041e-05,-8.300119023990315e-06),\nvec2(-1.4240152211880465e-05,-2.4524493342240748e-05),\nvec2(4.7569890136652895e-05,7.593593203415615e-06),\nvec2(3.690146876530602e-05,-6.963698986747429e-05),\nvec2(8.007030586985528e-05,-2.21304219108599e-06),\nvec2(-1.5715451957223648e-05,1.923751698200241e-05),\nvec2(8.008462617043011e-05,-4.5157303317221046e-05),\nvec2(3.0016604650676064e-05,-3.5057261787400514e-05),\nvec2(2.3461750251820845e-05,1.4247376963445191e-05),\nvec2(4.753547157180027e-05,6.591376143942925e-05),\nvec2(-4.900570301050999e-05,-4.76671264947303e-05),\nvec2(3.874886282306983e-05,8.151777950289444e-06),\nvec2(-5.242616691657849e-05,9.151390124177648e-05),\nvec2(4.571281372353587e-05,1.8846352115816985e-05),\nvec2(1.3967701915081604e-06,5.752840439513334e-06),\nvec2(-6.211868889770143e-05,4.153867412029037e-05),\nvec2(6.295024184943312e-05,-6.776601242948328e-05),\nvec2(3.326631366945869e-05,4.698511460468711e-05),\nvec2(-5.439780023334136e-05,-7.575017386852903e-05),\nvec2(0.00010270829488848911,3.0869300726268844e-05),\nvec2(-1.2119048895938297e-05,-7.979769252090203e-05),\nvec2(-8.09087150798651e-06,-8.741293600240079e-05),\nvec2(-2.6145035595046385e-05,4.491586333724268e-05),\nvec2(-6.977545821294845e-05,-0.00010698778403264722),\nvec2(4.070533480865938e-05,-1.0760899134438807e-05),\nvec2(-0.0001989078653939395,9.76069176352862e-05),\nvec2(1.4001320517945583e-06,-8.323466284183395e-05),\nvec2(-7.343362824589658e-05,9.155584235186685e-05),\nvec2(-0.00015812712151946193,-0.00011057542739829963),\nvec2(3.798119095444662e-05,-3.346278544029672e-05),\nvec2(-7.50847761393867e-05,0.00011579613125019837),\nvec2(-7.411784971226826e-05,-0.00017321941870817028),\nvec2(-2.3723938968135344e-05,0.0001144976281753956),\nvec2(-2.2040498413349586e-06,-1.5967867974691793e-05),\nvec2(6.0198662577646424e-05,-6.0393540029533755e-05),\nvec2(-1.4606631410965622e-05,-6.024268399054933e-06),\nvec2(4.526148229919714e-05,-8.2932304075052e-05),\nvec2(0.00011800137090167253,-1.2739356040042888e-05),\nvec2(-4.3709872727846694e-05,-3.0214115141751825e-05),\nvec2(6.229500639762772e-05,-5.803371010170471e-05),\nvec2(2.1432202490226295e-08,7.950976286631898e-05),\nvec2(-9.316129707201054e-05,-0.00015474733054126783),\nvec2(0.00011773912840203939,-0.00010073954719434562),\nvec2(-0.0001330750478534979,0.00012187057299656606),\nvec2(7.829704286143769e-05,-0.00010988574757351036),\nvec2(-2.099329842389439e-05,0.00011173889505361498),\nvec2(-0.00011168072039634883,0.00010982997703747078),\nvec2(3.996603245623372e-05,-2.2740893973044374e-05),\nvec2(-6.4042453388087e-05,0.0001147309929369108),\nvec2(7.574601209237292e-05,-8.676088841289291e-05),\nvec2(7.823001013375209e-05,0.00017874588574867648),\nvec2(4.259510124270419e-06,4.0343365873110735e-05),\nvec2(7.913083454123071e-05,0.0001607431627603822),\nvec2(-0.00015194680953316942,8.748459863315402e-05),\nvec2(0.00010371106178768113,-1.814652821489151e-06),\nvec2(0.00011534174657448721,7.685053978737568e-05),\nvec2(-0.00015810195290990442,-6.343104660905185e-05),\nvec2(0.00017493633597354626,0.0001208181215710889),\nvec2(2.654873025188001e-05,-3.098462852863889e-05),\nvec2(-3.0232319552915228e-05,-1.988925836777242e-05),\nvec2(-8.166716969556595e-05,-2.9604690352674135e-05),\nvec2(-1.5111391515179002e-05,5.535517231668715e-05),\nvec2(-3.991119980274636e-05,-0.00013552270584796955),\nvec2(-0.00013852258849064142,3.102796905446451e-05),\nvec2(1.623819754919121e-05,-5.19485834838615e-05),\nvec2(4.147440061074096e-05,6.460174552889196e-05),\nvec2(-0.00022329354637281557,-0.00010195978196060295),\nvec2(7.917812176565933e-05,1.2209307051948637e-05),\nvec2(9.492993243027139e-06,-3.509876674789888e-06),\nvec2(9.828026937088483e-06,-0.0003314859090514325),\nvec2(7.283637135264779e-05,4.4645007355742226e-05),\nvec2(-3.054371589598779e-05,-4.6338006082909935e-05),\nvec2(2.5883213368055167e-05,-0.00022850145426689172),\nvec2(5.95971229996306e-05,8.774043122350915e-05),\nvec2(-0.0001786577323165365,-0.0002269741925907355),\nvec2(7.268670962678796e-05,1.658120497809994e-05),\nvec2(-0.0001698249160123085,-0.00033764491560154554),\nvec2(0.0001721496219477232,0.00012679915414170838),\nvec2(-0.00020115008971890107,7.312198194729406e-05),\nvec2(-0.00012670017683215763,-0.00010689293052660293),\nvec2(-2.230621283425567e-05,-0.00016372057592134987),\nvec2(-0.00011112490112883915,6.867304614412209e-05),\nvec2(0.00010388842744183897,-0.00017769936963329453),\nvec2(-2.5969301087390864e-05,0.00015712053406330778),\nvec2(-0.00017634722865362697,9.573186838580775e-06),\nvec2(0.00019174201136166883,-0.0001158495789359027),\nvec2(-8.52462958318077e-05,0.000180324012127039),\nvec2(-9.892914074426764e-05,-4.861437527916493e-05),\nvec2(0.0002895386436994614,0.00015749251599739213),\nvec2(-5.2151669979543465e-05,7.2281194873307515e-06),\nvec2(7.999493706056828e-05,-9.306203009966438e-06),\nvec2(-0.00022790186893560316,9.70581010406212e-05),\nvec2(0.00014884426734836345,-0.0003189037696680506),\nvec2(0.00020546388808894952,-3.840847583924382e-05),\nvec2(-0.00035778865404380593,-0.00017931233725162926),\nvec2(8.016683765181602e-05,-3.278080439909369e-05),\nvec2(-0.00018954983902286118,0.00015850100264558145),\nvec2(-0.00012961746499416828,-0.00031400500351897907),\nvec2(-2.804314970067577e-05,0.0003461921531812403),\nvec2(7.343476893053519e-05,0.0001450333709159434),\nvec2(4.1953029573406505e-05,-7.626400779548176e-05),\nvec2(-1.4306597801714582e-05,-0.00026189438564440794),\nvec2(-9.95461123827098e-05,3.322199942399818e-05),\nvec2(0.00016941845773039353,9.200460169879227e-05),\nvec2(-2.9515197122994385e-05,0.0001466311735600522),\nvec2(-0.00024080851934946975,-5.191602353779211e-05),\nvec2(0.000307766435442505,0.000180868353071873),\nvec2(4.180012730608722e-05,-0.0004175137163794031),\nvec2(0.00047208084296965897,0.00018353434120177767),\nvec2(-2.7600416876475428e-05,9.718871127903984e-05),\nvec2(0.0002916654269817927,-0.0003272873586085784),\nvec2(-2.3491167944182757e-05,4.415346518256364e-06),\nvec2(-0.00018594919474034064,-0.0002614947735102195),\nvec2(0.00019486177395442816,-3.868111772065135e-05),\nvec2(-0.00020198852743144168,0.0001494042376409518),\nvec2(0.00027567556088605924,-6.808226326202683e-05),\nvec2(-0.0002566769515951311,0.00026247636764346535),\nvec2(0.0002669186163606306,-0.0001873224765696623),\nvec2(7.006293889611254e-05,0.0005030584939668846),\nvec2(-0.00017981536948327207,-0.00018385602551431146),\nvec2(0.0003779884814596968,-0.00019746077640151854),\nvec2(0.0003045191128181737,-7.107630562826239e-05),\nvec2(0.00024828997675729913,-0.000159523049726591),\nvec2(0.0006669944014092269,-0.0005800746865366995),\nvec2(0.0001401888611562316,-0.00021829862404866657),\nvec2(-0.00011681111135063813,-0.0007002294301886438),\nvec2(-0.00028282912482889,-0.000184805603278175),\nvec2(-0.00044454129861093346,-0.0006018767255559027),\nvec2(0.00017339887819263144,-0.000560111781103793),\nvec2(-0.0003718021599649549,0.0004130519810678775),\nvec2(-0.00023905031417462114,0.00013335917918465384),\nvec2(0.00011053559877351776,0.00016647308481687034),\nvec2(-0.0005801240441609921,-1.5694299459060047e-05),\nvec2(0.0003737585732860263,-7.774596007999437e-05),\nvec2(-0.00028709159211307174,0.0001413388530261262),\nvec2(-0.0003518639231758989,-0.0008855788657965367),\nvec2(0.00041601900134592056,0.00022723822842330842),\nvec2(0.0002919672952697758,-0.0006919372542158401),\nvec2(-0.0005132530764358616,-0.0008778432350568361),\nvec2(-6.102883134197429e-05,-1.3206639621788245e-05),\nvec2(-4.972857937477561e-05,0.0002172888527668034),\nvec2(0.0006224206527052899,7.971000668743712e-05),\nvec2(-0.0003196279331228836,-0.0001477634977058065),\nvec2(-8.222871770312517e-05,-0.00030019771491054264),\nvec2(-0.00022488408528464207,-0.0001876305595987801),\nvec2(-0.00116259971191843,-2.331362393403573e-05),\nvec2(-0.0007831427998796329,-0.00013176275486496782),\nvec2(-0.0003643288247876255,-5.565892153295476e-05),\nvec2(-0.0005806904906412828,0.0005612398147812476),\nvec2(0.0005086586743139231,6.385335102206588e-05),\nvec2(0.0004561249498891305,0.0005188945645238842),\nvec2(0.00048732474336149933,-0.0007932082239188098),\nvec2(0.0001260132899326633,-0.0007034458207702853),\nvec2(0.00041126386892441526,-0.0011859841701029662),\nvec2(-0.00046876489861248454,-0.0006052097009103437),\nvec2(0.000411430228739045,-0.00029029595618123406),\nvec2(0.0003724182808920143,0.00040396771738191334),\nvec2(-0.0005046114861394223,5.9127284333425184e-05),\nvec2(0.00020958153522735256,-0.00010093036203390814),\nvec2(-0.0033085321781033358,0.0007067701432327427),\nvec2(0.0011602669142532372,0.00018788727730514865),\nvec2(0.0006428441162328216,-0.0004245938997922789),\nvec2(0.0014302420107019488,-0.0007634932650676488),\nvec2(-0.00022893769081211532,-0.0028132458886339666),\nvec2(0.00034514298578960955,-0.0009354617215821156),\nvec2(0.0004118655160461698,-0.007361274661084849),\nvec2(4.914658616530361e-05,-0.00041782791194994173),\nvec2(-0.006066672433579513,-0.0036926186277893443),\nvec2(1.7597614068506176e-05,0.0009970652846629155),\nvec2(0.0043489629365042635,-0.001625696562065819),\nvec2(-0.006885690035478115,-0.00012689118731380898),\nvec2(0.00015470250649838005,0.0002540770700445561),\nvec2(0.001698943900822626,-0.00028209201422466535),\nvec2(0.0038510487037857334,-0.007550891266096642),\nvec2(-0.0055174833547558194,0.015269658315338254),\nvec2(-0.004000114063991412,0.002722870874781736),\nvec2(-0.007655358887498162,-0.008811014987904583),\nvec2(-0.004839064989159672,0.026922843268725356),\nvec2(-0.006356459916362135,0.01283249172181454),\nvec2(0.021636525206516145,-0.054406827577952274),\nvec2(-0.03129099365691687,-0.0022635343002297124),\nvec2(-0.06952847187291859,-0.0053241879906707505),\nvec2(-0.04643938388819512,-0.2642016035272306),\nvec2(-0.0071417824940523044,-0.022667107852162378),\nvec2(-0.11455438470724026,0.06161386940047414),\nvec2(-0.031382436830482474,-0.09539103020430909),\nvec2(-0.014809282506368081,-0.006876047176348093),\nvec2(0.006870968586664108,0.02730338100987531),\nvec2(0.03195742960374319,0.0030426128746334487),\nvec2(-0.01934652555367104,0.0023362828650189903),\nvec2(0.0030557116060445292,-0.01023922368673985),\nvec2(-0.009378498685089092,0.009223006076011273),\nvec2(-0.00017996959977886686,0.004153289963867126),\nvec2(-6.270642326036112e-05,-0.006027691829494013),\nvec2(-0.002807761963562474,-0.00896921774973786),\nvec2(-0.0030594471212848995,-0.0069134118200654925),\nvec2(-0.002413251142202374,0.0014750963939683449),\nvec2(-0.007258931741416011,0.0015470217227317017),\nvec2(0.0011807577302174583,-0.0051494724534602845),\nvec2(-0.0022346416373049205,0.0010018152504282553),\nvec2(-0.0012070277636805787,-0.0029209042230031517),\nvec2(0.0010487115422224966,0.0030083665480475316),\nvec2(-0.0005854239140332905,-0.0016483379153866095),\nvec2(0.0008809321884381737,0.001096431591896353),\nvec2(0.0011139310578365377,-0.0003056882812734551),\nvec2(0.00026178666373090023,8.747705633446653e-05),\nvec2(-0.0008717332727093432,-0.00012902905267038695),\nvec2(6.865454960193744e-05,-0.00013177936552893224),\nvec2(0.0014203629540494222,-0.001565823301217293),\nvec2(-0.0012227127544594107,-0.0005307690144422796),\nvec2(-0.002000600592644114,0.00042026705676550825),\nvec2(0.00011095446005675721,2.7145189148703846e-06),\nvec2(0.0011068894701767602,0.0005671295907537679),\nvec2(0.001849783226614733,-0.0014030415845723437),\nvec2(0.001215069408659999,0.00020978709227771316),\nvec2(0.00014245143665677214,-0.001518686614639185),\nvec2(0.0009385725141885343,-0.0006029545145991987),\nvec2(0.0006050019513405285,-0.0005296040848589284),\nvec2(-0.000682041371157429,-0.001420705049043985),\nvec2(-0.0012904135173419182,0.00023781290682419853),\nvec2(-8.154172317823627e-05,-0.0018295274368621542),\nvec2(5.111791422505925e-05,0.00035537166220761193),\nvec2(-0.001709000794990484,6.173489149517731e-05),\nvec2(-0.000333812276174342,-0.0008142659106453949),\nvec2(9.040223757003551e-05,-0.00023444066164230495),\nvec2(-0.0006285177998015893,-0.0006794293339295855),\nvec2(0.00037587937493578156,0.0005970677833398047),\nvec2(-0.00037222471252752336,-0.0001354593583535285),\nvec2(-0.00045872359776239494,-0.0001305141862518991),\nvec2(0.00026939345472495386,6.118866123942016e-05),\nvec2(-0.0005545761522343497,0.0008995816428159235),\nvec2(0.0009658667664555648,-8.383019606204666e-05),\nvec2(2.5570004174544683e-06,0.00021224565877494696),\nvec2(0.00034388987939014653,-4.533149627947434e-05),\nvec2(0.0001576066638597,0.00044292235708321684),\nvec2(-0.00021125601832583033,0.00024857333034970504),\nvec2(-0.0001517563796306764,-0.0005825206634645485),\nvec2(-0.00031925619487980014,0.00030940742762359554),\nvec2(-0.0004214388945181936,-0.0003413049752488215),\nvec2(0.0009735160130526201,-0.00020377277652195873),\nvec2(-9.162613088309086e-05,0.00015346642715143293),\nvec2(-0.00010237841229299808,-0.0003308900697027166),\nvec2(0.00012757376396031747,0.0004656796518422887),\nvec2(0.0005695951236809055,-0.0002776362225767857),\nvec2(-0.00026198636484178636,0.0003396820678208782),\nvec2(0.00041114416168980874,0.00024643652967642674),\nvec2(-0.00012902795826927424,-0.00016593259366552872),\nvec2(0.0003744913789641114,-0.00029253387393030994),\nvec2(-0.0003025806905434569,0.00021982687250233647),\nvec2(0.00013853172391898688,-0.00018731450819251726),\nvec2(-0.0005208842496333302,-0.00024546040136144806),\nvec2(-6.540541359755113e-05,-7.582119997122574e-05),\nvec2(-1.723082123153784e-06,3.960796746641928e-05),\nvec2(0.00015098926551100888,-0.00019616777873871717),\nvec2(-0.0001450243899074162,-0.00026298521969331),\nvec2(0.00047343114228671097,0.00010144461672564367),\nvec2(2.959376712761361e-06,-9.970719034423576e-05),\nvec2(-8.227476778309236e-05,-0.0002720726623796496),\nvec2(-1.9437567044578973e-05,-7.187321706759238e-05),\nvec2(9.783534829266836e-05,-0.00013753827208305857),\nvec2(-0.00010379237921627504,-0.00010624156109452772),\nvec2(6.952673456981592e-05,0.00016097894250912518),\nvec2(-0.00015108013496723858,0.00012942425324277197),\nvec2(-0.00034014260681238727,-0.00032893436111728117),\nvec2(0.0004544604896189448,-2.3725471305619973e-05),\nvec2(-9.77245163532406e-06,3.12739701849303e-05),\nvec2(0.0003310220419955514,-9.43055155824606e-06),\nvec2(0.0002540433979954847,-9.815342366989674e-05),\nvec2(0.00013267304217413453,-0.00019667586827514687),\nvec2(0.00025478927765906556,-0.0001314806437406579),\nvec2(-3.978131945084939e-05,1.8018619597956603e-05),\nvec2(-0.00012094712828029328,-0.0002930881957086895),\nvec2(-2.5094017935033833e-05,8.6133017526504e-05),\nvec2(-0.0001271331225428264,-2.2438571446419797e-05),\nvec2(-9.486641168408551e-06,-0.00011902371601254514),\nvec2(-0.00023421320227120032,1.9317118356007817e-05),\nvec2(-0.00019334275959864884,-0.0002571551251645902),\nvec2(9.359399534059156e-05,9.35030139369209e-05),\nvec2(-0.0002488884121446101,3.657924469172025e-05),\nvec2(-0.00011296679519250241,-0.00025097586550714476),\nvec2(0.0003148274557011339,0.0001560133215634867),\nvec2(-0.00034972993831730467,-6.850630470664922e-05),\nvec2(0.00011020169097541909,4.0224483948431134e-05),\nvec2(-0.00027531309215941043,0.0002537129323909097),\nvec2(6.805133879116329e-05,-0.0001389569582991486),\nvec2(5.4184186263873e-05,-6.538674813396644e-05),\nvec2(-0.0002328730301085454,0.0001258582305948856),\nvec2(1.5443873360390007e-05,-3.981414645172736e-05),\nvec2(-0.00024161778495250728,6.705220184810123e-05),\nvec2(-0.0002644898855194516,-0.00038889265920944566),\nvec2(-1.4790994443786566e-05,0.00014919167985844286),\nvec2(-7.040766877079188e-05,-1.3873425004467082e-05),\nvec2(-0.00015565197604051464,-5.3432388439765135e-05),\nvec2(-4.0922049922876785e-05,7.720650794015122e-05),\nvec2(-3.2532194845680205e-05,-6.128789916765159e-05),\nvec2(0.00022257485992031322,-2.2660112100029038e-05),\nvec2(-6.603111119830139e-05,0.00019045873224534537),\nvec2(-4.01056914340388e-05,7.754059010822476e-05),\nvec2(0.00016360111454270552,-2.0759624552073892e-05),\nvec2(1.2546341443728714e-05,0.00014934838726438917),\nvec2(0.0001118263755908135,-0.00010411264153676044),\nvec2(-6.195106583615203e-05,3.3175381338480114e-05),\nvec2(1.0686741517209732e-05,-0.00010490973580588043),\nvec2(-2.2552295587642718e-06,8.846571583318975e-05),\nvec2(1.4578105589405917e-05,-7.563181126952867e-05),\nvec2(9.640032580301696e-06,-9.257429972139568e-05),\nvec2(-3.9984725405899224e-05,-1.0712176063733263e-05),\nvec2(9.88642535775406e-05,-6.827092750730603e-05),\nvec2(5.303457681600267e-05,0.0001259321982757046),\nvec2(-3.505656234157245e-05,-9.346423348893752e-05),\nvec2(6.048417372219093e-05,0.00011737864953608198),\nvec2(0.00011089192971198701,-5.704063717541246e-05),\nvec2(0.00015085238732434993,7.732714045243289e-05),\nvec2(-6.124715610478782e-05,0.0001073980167783095),\nvec2(-2.8304216037381552e-05,-3.0329745714167737e-05),\nvec2(0.00010685992155089904,1.4981332334737208e-05),\nvec2(5.1460757205830405e-05,-3.0459816022452112e-05),\nvec2(-1.4393093256677458e-05,5.575497962620523e-05),\nvec2(4.4483550159969055e-05,4.286915369604528e-05),\nvec2(-9.347475680461723e-05,-0.0001596425304729017),\nvec2(0.00011802469691094149,-0.00015199662879718633),\nvec2(3.346509594637036e-05,0.00011341487340706838),\nvec2(-2.572480712264043e-05,-0.00014296468866331453),\nvec2(2.744712333050274e-05,6.843250344559475e-05),\nvec2(-6.835846430094615e-05,6.601729971911325e-05),\nvec2(0.00011910530945187674,2.8172235223923477e-05),\nvec2(-3.7291914725011278e-06,0.00011115640041116117),\nvec2(-6.516602062305001e-05,-0.0001786285055197761),\nvec2(0.00019183889679394997,4.831782017580565e-05),\nvec2(-6.0670865186443864e-05,8.393150109425083e-05),\nvec2(6.60351733358451e-05,-9.341766283536845e-05),\nvec2(-2.4386448510676756e-05,9.949452678031322e-05),\nvec2(-2.7143941553641502e-05,-0.00011494688698924528),\nvec2(9.421924226564801e-05,-4.84878874967389e-05),\nvec2(-2.0973343800030776e-05,3.50417639265569e-05),\nvec2(1.2214800992497809e-05,-7.752428801453042e-05),\nvec2(0.00010460273018219357,1.0769226912506036e-05),\nvec2(-0.00010039951544307516,-5.4966253889476996e-05),\nvec2(1.4747934924843879e-05,-5.074088483269392e-05),\nvec2(6.50116579017404e-06,0.00010456294571251212),\nvec2(-6.632479084613067e-05,-0.00011207731051710704),\nvec2(8.99193482570458e-06,2.290989781099495e-07),\nvec2(-4.2908526866100765e-05,-2.2313839519407098e-05),\nvec2(5.204043252701641e-05,-5.991927558735751e-05),\nvec2(-1.2998251658597685e-05,6.458741616445295e-05),\nvec2(-5.4220491889430174e-05,-5.4039781215479624e-05),\nvec2(7.552096143504232e-05,-7.459035972750793e-05),\nvec2(-3.607501973608563e-05,1.4215323609199074e-05),\nvec2(-1.2017847096067706e-05,-1.7300111403639257e-06),\nvec2(8.94104842001886e-06,3.26752191749032e-05),\nvec2(3.4935760250604756e-05,-3.020482895553484e-05),\nvec2(-2.5653984602931196e-05,5.608632200666684e-05),\nvec2(-2.6314460579402307e-05,8.927014665476891e-05),\nvec2(2.9050492779603948e-05,-4.405740689678201e-05),\nvec2(-3.6627038350926e-05,-4.288096327018326e-06),\nvec2(1.8601082394738046e-05,5.754478396208518e-06),\nvec2(2.1757728929249922e-05,5.909369498048884e-05),\nvec2(-1.994955884802851e-05,-6.048317142320641e-05),\nvec2(8.991775479011903e-06,-3.8916662762410015e-05),\nvec2(5.412542820839363e-05,2.14241447835108e-05),\nvec2(3.7172771152037344e-05,-1.9373692488949476e-05),\nvec2(5.341043222851922e-06,-1.1745425234725487e-05),\nvec2(-7.875559382236909e-05,1.3969262958337181e-05),\nvec2(9.497993194053093e-05,-1.6718143129940847e-05),\nvec2(-1.830701773695511e-05,3.4930917729735175e-05),\nvec2(-7.275020832402519e-05,-5.062544613260678e-06),\nvec2(2.9470658432407396e-05,5.151054248713384e-05),\nvec2(-8.46606157057423e-05,3.646673235451083e-06),\nvec2(1.6909293862928752e-05,-4.416210579467766e-05),\nvec2(-1.3268732973974476e-05,0.00013436627557805833),\nvec2(-9.236604435130071e-05,-2.47326750833088e-05),\nvec2(9.570175954352e-05,-6.37368891831285e-05),\nvec2(-5.009405588461514e-05,3.19990720854244e-05),\nvec2(5.5201715435418376e-05,-5.945826950885177e-05),\nvec2(4.3872866336835816e-05,3.7838376846062106e-05),\nvec2(-3.777744402792626e-05,-7.980952927244162e-05),\nvec2(9.626081436944078e-05,5.11595242017284e-06),\nvec2(3.0817698050891938e-06,6.561387751371987e-05),\nvec2(-2.6865477997396528e-05,-5.6047001650407486e-05),\nvec2(2.3991075048029888e-05,3.478341759542041e-05),\nvec2(-4.0317877894133935e-05,5.941057351096185e-06),\nvec2(3.7368633180568604e-05,-1.698537500779132e-05),\nvec2(2.6490499884138795e-05,7.316087313565106e-05),\nvec2(-6.212383158644506e-05,-1.0691162251145492e-05),\nvec2(0.00012643321883179146,-1.6053584663509383e-05),\nvec2(-1.0628431067486052e-05,1.741929019246483e-06),\nvec2(1.8945169421513645e-05,-6.306342519524837e-05),\nvec2(9.078783496841647e-05,5.2187024926996055e-05),\nvec2(-2.360495438619996e-05,-7.794227258662818e-05),\nvec2(7.401181829159535e-05,-3.0356808396782822e-05),\nvec2(-2.1772655272932728e-05,6.371330930212478e-05),\nvec2(2.6106383951391226e-05,-3.201150912641638e-05),\nvec2(5.956766010189861e-06,1.0817367197270923e-05),\nvec2(-5.264909643718958e-05,-9.906476361714942e-06),\nvec2(5.616714668698635e-05,-7.072619769747306e-06),\nvec2(-4.6409709651696215e-05,6.406149462315702e-05),\nvec2(-4.9975024350126504e-05,-5.526500952083665e-05),\nvec2(4.677504918899259e-06,2.9062306324874606e-05),\nvec2(1.5042659958496725e-05,-3.58865972999632e-05),\nvec2(-3.872937749883477e-05,-8.15366645433722e-06),\nvec2(-3.224487520335999e-05,1.410521749066464e-05),\nvec2(5.1531778672538875e-06,-2.5274591109961633e-05),\nvec2(2.905154670614503e-05,-1.238009520415413e-05),\nvec2(-2.4624279249073562e-05,2.4046859623822055e-05),\nvec2(-2.299458202647718e-05,1.7498335930535702e-05),\nvec2(-3.091246042775342e-05,-1.650318531463577e-05),\nvec2(-1.7761209981360402e-05,-3.9297159115710455e-05),\nvec2(2.7532140268077762e-05,3.016248317409546e-05),\nvec2(-2.2053660386012832e-05,9.214769889828562e-06),\nvec2(-1.793053560243511e-05,-4.359387110291599e-05),\nvec2(-6.51329840219478e-05,2.102144232144099e-05),\nvec2(2.1973577716535144e-05,4.88303469276859e-06),\nvec2(5.109405060896451e-05,2.072041983661181e-05),\nvec2(-3.228435658440205e-05,-9.518840780829642e-06),\nvec2(5.2615164292102557e-05,2.1833173500607828e-05),\nvec2(4.170600380240584e-05,4.5793020411951616e-05),\nvec2(4.220859768428851e-05,-3.812255706209467e-05),\nvec2(3.6396351566491924e-05,4.444241154932252e-05),\nvec2(-2.7251026382002005e-05,-2.4496382519953318e-05),\nvec2(8.449803060346524e-05,-6.970349209171057e-05),\nvec2(5.873221909360885e-06,4.501015867667099e-05),\nvec2(-4.118081775908406e-05,-1.7934548910385083e-05),\nvec2(4.5505528551300586e-05,9.277992317258758e-06),\nvec2(-4.207308873341343e-05,-3.588482023699345e-05),\nvec2(2.2281310569935233e-05,-2.2864350226793845e-05),\nvec2(1.8142444320103225e-05,7.968443080444598e-05),\nvec2(-4.143422244725633e-05,-2.420471610947492e-05),\nvec2(4.04495730609305e-05,-1.4874062629590973e-05),\nvec2(-1.3779963640836074e-05,6.431274502136406e-05),\nvec2(3.504051396578743e-05,-2.7471999522453237e-05),\nvec2(4.172303978080551e-06,7.884342774134762e-05),\nvec2(-5.64825750498468e-05,7.257497421084643e-06),\nvec2(6.506155205950299e-05,-8.60297869061066e-06),\nvec2(1.3762070894031701e-06,7.359210246536499e-05)\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//// SAVING / LOAD state between frames\nint fragCoordToLinear(vec2 fragCoord) { return int((fragCoord.y-0.5) * iResolution.x + (fragCoord.x+0.5)); }\nvec2 linearToFragCoord(int i) { return vec2(mod(float(i), iResolution.x) - 0.5, floor(float(i) / iResolution.x) - 0.5); }\nvec4 loadTexelChannel0(int linearIndex) { return texture(iChannel0, linearToFragCoord(linearIndex)/iResolution.xy); }\nvoid saveVec4(vec4 value, vec2 uv, inout int pos, inout vec4 fragValue) { if(pos == fragCoordToLinear(uv)) fragValue = value; pos += 1;}\nvoid saveVec3(vec3 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value, 0.0), uv, pos, fragValue); }\nvoid saveVec2(vec2 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value, 0.0, 0.0), uv, pos, fragValue); }\nvoid saveFloat(float value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value, 0.0, 0.0, 0.0), uv, pos, fragValue); }\nvoid saveMat4(mat4 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value[0]), uv, pos, fragValue); saveVec4(vec4(value[1]), uv, pos, fragValue); saveVec4(vec4(value[2]), uv, pos, fragValue); saveVec4(vec4(value[3]), uv, pos, fragValue); }\nvoid saveMat3(mat3 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveMat4(mat4(value), uv, pos, fragValue); }\nvec4 loadVec4(inout int pos) { vec4 v = loadTexelChannel0(pos); pos += 1; return v; } \nvec3 loadVec3(inout int pos) { return loadVec4(pos).xyz; }\nvec2 loadVec2(inout int pos) { return loadVec4(pos).xy; }\nfloat loadFloat(inout int pos) { return loadVec4(pos).x; }\nmat4 loadMat4(inout int pos) { return mat4(loadVec4(pos), loadVec4(pos), loadVec4(pos), loadVec4(pos)); }\nmat3 loadMat3(inout int pos) { return mat3(mat4( loadVec4(pos), loadVec4(pos), loadVec4(pos), loadVec4(pos))); }\n\nvoid saveState(vec2 fragCoord, inout vec4 fragValue, vec2 oldPos, vec2 currentPos) \n{\n    int pos = 1;\n    saveVec2(oldPos, fragCoord, pos, fragValue);\t\n    saveVec2(currentPos, fragCoord, pos, fragValue);\t\n}\n\nvoid loadState(inout vec2 oldPos, inout vec2 currentPos) \n{\n    int pos = 1;\n    oldPos = loadVec2(pos);\n    currentPos = loadVec2(pos);\n}\n//// END SAVING / LOADING STATE\n\n//// DRAWING FUNCTIONS\nfloat DrawPoint(vec2 fragCoord, vec2 P, float r) \n{\n    return step(length(fragCoord - P), r);\n}\n\nfloat DrawCircle(vec2 p, vec2 c, float r, float width) \n{ \t\n    float a = -abs(length(p-c)-r)+width;\n    float blur = (width*1000./iResolution.y);\n    \n    float b = smoothstep(0.-blur,0.+blur,a);\n    return b;\n}\n\n\nfloat DrawSegment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0., d);\n}\n//// END DRAWING FUNCTIONS\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 oldPos;\n    vec2 ft = vec2(0);\n    \n    // Normalize coordinates\n    vec2 U = (fragCoord*2.-iResolution.xy) / iResolution.x;\n    U *= 0.8;\n    // Repeate every 30 secons\n    float t = mod(iTime,30.)/30.;\n    \n    if(fragCoord == vec2(0.5,0.5))\n    {\n        // Get and save old ft value\n        fragColor = texture(iChannel0, vec2(1.5,0.5)/iResolution.xy);\n    }\n    else if(fragCoord == vec2(1.5,0.5))\n    {\n        // Compute current ft value\n        \n        // Draw using the fourier series\n        for(int n=-COEFFICIENTS_NUMBER/2; n<=COEFFICIENTS_NUMBER/2; n++)\n        {\n            // Euler formula: e^(i*alpha) = cos(alpha) + i*sin(alpha)\n            float alpha = float(n)*2.*PI*t;\n            vec2 e = vec2(cos(alpha),sin(alpha));\n            vec2 d = ComplexMul(C[n+COEFFICIENTS_NUMBER/2], e);\n            ft += d;\n        }\n        fragColor = vec4(ft,0.,1.);\n    }\n    \n    else\n    {\n        vec4 oldColor = texture(iChannel0, fragCoord/iResolution.xy);\n        \n        // Use the computed ft value and the previous one\n        vec2 old_ft = texture(iChannel0, vec2(0.5,0.5)/iResolution.xy).xy ;\n        vec2 current_ft = texture(iChannel0, vec2(1.5,0.5)/iResolution.xy).xy ;\n        \n        vec4 currentColor = vec4(DrawSegment(U, old_ft, current_ft, 0.005));\n        \n        if(iFrame > 2) fragColor = clamp(vec4(0.), vec4(1.0), vec4(oldColor+currentColor));\n        else fragColor = vec4(0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PI acos(-1.)\n\n//// SAVING / LOAD state between frames\nint fragCoordToLinear(vec2 fragCoord) { return int((fragCoord.y-0.5) * iResolution.x + (fragCoord.x+0.5)); }\nvec2 linearToFragCoord(int i) { return vec2(mod(float(i), iResolution.x) - 0.5, floor(float(i) / iResolution.x) - 0.5); }\nvec4 loadTexelChannel0(int linearIndex) { return texture(iChannel0, linearToFragCoord(linearIndex)/iResolution.xy); }\nvoid saveVec4(vec4 value, vec2 uv, inout int pos, inout vec4 fragValue) { if(pos == fragCoordToLinear(uv)) fragValue = value; pos += 1;}\nvoid saveVec3(vec3 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value, 0.0), uv, pos, fragValue); }\nvoid saveVec2(vec2 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value, 0.0, 0.0), uv, pos, fragValue); }\nvoid saveFloat(float value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value, 0.0, 0.0, 0.0), uv, pos, fragValue); }\nvoid saveMat4(mat4 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveVec4(vec4(value[0]), uv, pos, fragValue); saveVec4(vec4(value[1]), uv, pos, fragValue); saveVec4(vec4(value[2]), uv, pos, fragValue); saveVec4(vec4(value[3]), uv, pos, fragValue); }\nvoid saveMat3(mat3 value, vec2 uv, inout int pos, inout vec4 fragValue) { saveMat4(mat4(value), uv, pos, fragValue); }\nvec4 loadVec4(inout int pos) { vec4 v = loadTexelChannel0(pos); pos += 1; return v; } \nvec3 loadVec3(inout int pos) { return loadVec4(pos).xyz; }\nvec2 loadVec2(inout int pos) { return loadVec4(pos).xy; }\nfloat loadFloat(inout int pos) { return loadVec4(pos).x; }\nmat4 loadMat4(inout int pos) { return mat4(loadVec4(pos), loadVec4(pos), loadVec4(pos), loadVec4(pos)); }\nmat3 loadMat3(inout int pos) { return mat3(mat4( loadVec4(pos), loadVec4(pos), loadVec4(pos), loadVec4(pos))); }\n\nvoid saveState(vec2 fragCoord, inout vec4 fragValue, vec2 oldPos, vec2 currentPos) \n{\n    int pos = 1;\n    saveVec2(oldPos, fragCoord, pos, fragValue);\t\n    saveVec2(currentPos, fragCoord, pos, fragValue);\t\n}\n\nvoid loadState(inout vec2 oldPos, inout vec2 currentPos) \n{\n    int pos = 1;\n    oldPos = loadVec2(pos);\n    currentPos = loadVec2(pos);\n}\n//// END SAVING / LOADING STATE\n\n//// DRAWING FUNCTIONS\nfloat DrawPoint(vec2 fragCoord, vec2 P, float r) \n{\n    return step(length(fragCoord - P), r);\n}\n\nfloat DrawCircle(vec2 p, vec2 c, float r, float width) \n{ \t\n    float a = -abs(length(p-c)-r)+width;\n    float blur = (width*1000./iResolution.y);\n    \n    float b = smoothstep(0.-blur,0.+blur,a);\n    return b;\n}\n\n\nfloat DrawSegment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\n//// END DRAWING FUNCTIONS\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates\n    vec2 U = (fragCoord*2.-iResolution.xy) / iResolution.x;\n    U *= 0.8;\n    \n    float c;\n    \n    // Repeat every 30 seconds\n    float t = mod(iTime,30.)/30.;\n    vec2 ft = vec2(0);\n    \n    // Draw using the fourier series\n    for(int n=0; n<=COEFFICIENTS_NUMBER/2; n++)\n    {\n        // Euler formula: e^(i*alpha) = cos(alpha) + i*sin(alpha)\n        float alpha = float(n)*2.*PI*t;\n        vec2 e = vec2(cos(alpha),sin(alpha));\n        vec2 d = ComplexMul(C[n+COEFFICIENTS_NUMBER/2], e);\n        \n        //if(mod(float(n),3.)==0.) \n        c += DrawCircle(U, ft, length(d), 0.0015);\n        c += DrawSegment(U, ft, ft+d, 0.0015);\n        ft += d;\n        \n        if(n==0) continue;\n        \n        // Euler formula: e^(i*alpha) = cos(alpha) + i*sin(alpha)\n        alpha = float(-n)*2.*PI*t;\n        e = vec2(cos(alpha),sin(alpha));\n        d = ComplexMul(C[-n+COEFFICIENTS_NUMBER/2], e);\n        \n        c += DrawCircle(U, ft, length(d), 0.0015);\n        c += DrawSegment(U, ft, ft+d, 0.0015);\n\n        ft += d;\n    }\n    \n    //vec4 oldC = texture(iChannel0, fragCoord/iResolution.xy);\n    //oldC += vec4(0.2,0.2,0.2+c,1.);\n    \n    fragColor = vec4(c);\n}","name":"Buffer B","description":"","type":"buffer"}]}