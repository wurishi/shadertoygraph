{"ver":"0.1","info":{"id":"tl3yRn","date":"1608318420","viewed":88,"name":"NDP 2020 - Most Epic Fireplace","username":"transfear","description":"NDP 2020","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ndp2020beenox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 blackbody(float temp)\n{\n    float red   = 1.5 * temp;\n    float green = 1.2 * pow(temp, 2.0);\n    float blue  = pow(temp, 5.0);\n    \n    return vec3(red, green, blue);\n}\n\n#define NUM_WAVES_FLAMES 6\nvec3 flames(in vec2 offset, in vec2 uv)\n{\n    float vWavesPeriod[NUM_WAVES_FLAMES] = float[NUM_WAVES_FLAMES] ( 7.0, 10.0, 15.0, 20.0, 25.0, 33.0 );\n    float vWavesScroll[NUM_WAVES_FLAMES] = float[NUM_WAVES_FLAMES] ( 2.3, -1.3, 4.5, -5.9, 1.1, -9.7 );\n    float vWavesWeight[NUM_WAVES_FLAMES] = float[NUM_WAVES_FLAMES] ( 2.2, 1.8, 1.4, 1.4, 1.2, 1.0 );\n\n    float sum = 0.0;\n    float totalWeight = 0.0;\n    for (int i = 0; i < NUM_WAVES_FLAMES; ++i)\n    {\n        sum += (0.5 + 0.5 * sin(offset.x + uv.x * vWavesPeriod[i] + iTime * vWavesScroll[i])) * vWavesWeight[i];\n        totalWeight += vWavesWeight[i];\n    }\n    \n    sum /= totalWeight;\n    \n    float flameIntensity;\n    if (uv.y <= offset.y)\n    {\n        flameIntensity = sum;\n    }\n    else\n    {\n        flameIntensity = sum - uv.y + offset.y;\n    }\n    \n    flameIntensity = pow(clamp(flameIntensity, 0.0, 1.0), 1.0);\n    return blackbody(flameIntensity);\n}\n\n#define NUM_FLAME_LAYERS 3\nvec3 flameLayers(in vec2 uv)\n{\n    vec2  flameOffsets[NUM_FLAME_LAYERS] = vec2[NUM_FLAME_LAYERS] (vec2(-2.0, 0.0), vec2(0.0, 0.2), vec2(4.0, 0.4));\n    float flameWeights[NUM_FLAME_LAYERS] = float[NUM_FLAME_LAYERS] (0.7, 0.33, 0.33);\n\n    vec3 totalFlames = vec3(0.0);\n    for (int i = 0; i < NUM_FLAME_LAYERS; ++i)\n    {\n        vec3  fSrc  = flames(flameOffsets[i], uv);\n        float fSrcA = flameWeights[i];\n        vec3  fDst  = totalFlames;\n        totalFlames = fSrc * fSrcA + fDst;\n    }\n\n    return totalFlames;\n}\n\nfloat backgroundIntensity(in vec2 uv)\n{\n    float baseY = 1.0 - uv.y;\n    baseY = pow(baseY, 0.1);\n    \n    float disturbance = 0.5 + 0.5 * sin(uv.x * 3.1415);\n    baseY *= pow(disturbance, 3.2);\n    return baseY;\n}\n\n\n#define BRICKS_DIST_TO_CENTER 0.45\n#define NUM_BRICKS_W 10.0\n#define NUM_BRICKS_H 10.0\n#define GROOT_W 0.025\n#define GROOT_H 0.05\n#define BRICK_COLOR vec3(166.0/255.0,  83.0/255.0,  38.0/255.0)\n#define GROOT_COLOR vec3(150.0/255.0, 129.0/255.0, 117.0/255.0)\nvec4 bricks( in vec2 uv )\n{\n    vec4 bricks = vec4(0.0);\n    \n    vec2 distToCenter = vec2(0.5) - uv;\n    if (length(distToCenter) < BRICKS_DIST_TO_CENTER)\n        return bricks;\n    \n    if (uv.y <= 0.5 && abs(distToCenter.x) < BRICKS_DIST_TO_CENTER)\n        return bricks;\n\n    bricks.w = 1.0;\n    \n    float brickYRow;\n    float brickY = modf(uv.y * NUM_BRICKS_H, brickYRow);\n    float evenOffset = ((int(brickYRow) & 1) == 0) ? 0.5 : 0.0;\n    \n    float brickX = fract(uv.x * NUM_BRICKS_W + evenOffset);\n    if ( (brickX < GROOT_W || 1.0 - brickX < GROOT_W) ||\n         (brickY < GROOT_H || 1.0 - brickY < GROOT_H))\n    {\n        bricks.xyz = GROOT_COLOR;\n    }\n    else\n    {\n        bricks.xyz = BRICK_COLOR;\n    }\n    \n    return bricks;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Flames\n    float bgIntensity     = backgroundIntensity(uv);\n    vec3  flamesIntensity = flameLayers(uv);\n    vec3  col             = bgIntensity * flamesIntensity;\n    \n    // Bricks\n    vec4 bricks = bricks(uv);\n    col = bricks.w * bricks.xyz + (1.0 - bricks.w) * col;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}