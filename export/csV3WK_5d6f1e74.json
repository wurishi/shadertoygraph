{"ver":"0.1","info":{"id":"csV3WK","date":"1679058747","viewed":52,"name":"henrys dads idea","username":"sanderoneil","description":"asdasdasdasd","likes":0,"published":1,"flags":4,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uv = (fragCoord / iResolution.xy) * 2.0 - vec2(1.0);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 +texture( iChannel0,uv).xyz;\n    \n    vec3 col = m(uv,iChannel0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 complexMultiply(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec3 m(vec2 uv, sampler2D audioData) {\n    vec2 c = uv;\n    vec2 z = vec2(0.0);\n\n    int iterations = 0;\n    const int maxIterations = 100;\n\n    float audioIndex = mod(float(iterations) / 511.0, 1.0); // Loop audio data if more than 512 iterations\n\n    for (int i = 0; i < maxIterations; ++i) {\n        vec2 inp = texture(audioData, vec2(audioIndex, 0.0)).xy * 2.0 - 1.0; // Access audio data at i\n        z = complexMultiply(z + inp * 0.1, z + inp * 0.1) + c; // Modify z with audio data\n\n        if (dot(z, z) > 4.0) {\n            break;\n        }\n\n        iterations++;\n        audioIndex = mod(float(iterations) / 511.0, 1.0); // Update audio index\n    }\n\n    float t = float(iterations) / float(maxIterations);\n    vec3 color = mix(vec3(t, cos(abs(z.x)) * 0.5 + 0.5, cos(abs(z.y)) * 0.5 + 0.5), texture(audioData, vec2(t, 0.0)).rgb, 0.5); // Mix the color with audio data\n\n    // Use the average of the audio data to adjust the brightness of the final color\n    float brightness = texture(audioData, vec2(0.5, 0.0)).r;\n    color *= (brightness * 0.5 + 0.5);\n\n    return color;\n}\n","name":"Common","description":"","type":"common"}]}