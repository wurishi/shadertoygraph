{"ver":"0.1","info":{"id":"4fB3Wh","date":"1704124694","viewed":33,"name":"Oscillator","username":"wassilyevich","description":"An experimentation on the introductory shader tutorial by Kishimisu.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["iterations","oscillator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\n\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.8, 0.5, 0.4);\n    vec3 b = vec3(0.2, 0.4, 0.2);\n    vec3 c = vec3(2.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.25, 0.25);\n    // vec3 a = vec3(0.138, -0.162, 0.208);\n    // vec3 b = vec3(1.128, 1.098, 0.538);\n    // vec3 c = vec3(-0.432, 0.528, 0.678);\n    // vec3 d = vec3(-0.782,-2.363, -2.477);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.);\n    float amp = 1.0001;\n    float rep = amp-amp*cos(iTime*3.14/8.);\n    for(float i=0.;i<4.;i++){\n\n            uv = fract(uv*rep)-0.5;\n            float r = 0.5;\n            float t = 10.;\n            \n            float d = length(uv) * exp(-length(uv0));\n            vec3 col = palette(length(uv0) +i+ iTime*0.25 + i);\n            d = sin(d*t + iTime)/t ;\n            d = abs(d);\n            // d = step(0.01,d);\n            d = pow(0.01/d,1.2);\n\n            \n            finalColor = col*d;\n\n    }\n    \n\n    fragColor = vec4(finalColor,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}