{"ver":"0.1","info":{"id":"3sSGRw","date":"1548381195","viewed":302,"name":"domain coloring shader ","username":"theinventor13","description":"complex function output","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["fun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.141592653589;\nfloat twopi = 3.141592653589 * 2.0;\n\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )  // by deMoivre formula\n#define cinv(Z)   ( vec2( (Z).x, -(Z).y ) / dot(Z,Z) ) \n#define cdiv(A,B)   cmul( A, cinv(B) )\n\nvec2 cmpxcjg(in vec2 c) {\n\treturn vec2(c.x, -c.y);\n}\n\nvec2 cmpxmul(vec2 a, vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cmpxdiv(in vec2 a, in vec2 b) {\n    return cmpxmul(a, cmpxcjg(b));\n}\n\nvec2 morphcoords(vec2 cpx){\n    vec2 t1;\n    vec2 t2;\n    t1 = cmpxmul(cpx , cpx) - vec2(1.0, 0.0);\n    t2 = cpx - vec2(2.0, 1.0);\n    t2 = cmpxmul(t2 , t2);\n    t1 = cmpxmul(t1 , t2);\n    t2 = cmpxmul(cpx , cpx) + vec2(2.0, 2.0);\n    t1 = cmpxdiv(t1, t2);\n    /*this changes the output\n\tt1 = cmul(cpx , cpx) - vec2(1.0, 0.0);\n    t2 = cpx - vec2(2.0, 1.0);\n    t2 = cmul(t2 , t2);\n    t1 = cmul(t1 , t2);\n    t2 = cmul(cpx , cpx) + vec2(2.0, 2.0);\n    t1 = cdiv(t1, t2);\n\t*/\n    return t1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    bool webcam = false;\n    //webcam = true; //UNCOMMENT THIS LINE FOR WEBCAM\n    vec2 uv = fragCoord.xy/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse = vec2(mouse.x * .1, mouse.y * .5);\n\tuv = uv - vec2((iResolution.x / iResolution.y) / 2.0, 0.5);\n    \n    if(mouse.xy == vec2(0.0))\n        mouse.xy = vec2(1.0, .3);\n    \n    uv *= mouse.y * 14.0;\n    uv = morphcoords(uv);\n    \n    float ang = atan(uv.y, uv.x);\n    float mag;\n    \n    if(webcam)\n        mag = mod((.5 * mouse.x * length(uv)), 2.0);\n    else\n    \tmag = .5 + mod((.5 * mouse.x * length(uv)), 1.0);\n    \n    if(ang < 0.0)\n    \tang = ang + twopi;\n    \n    \n\tvec3 col = vec3(mag * ((sin(ang) + 1.0) / 2.0), mag * ((sin(ang + (twopi/3.0)) + 1.0) / 2.0), mag * ((sin(ang + (2.0*twopi/3.0)) + 1.0) / 2.0));\n    \n\tif(webcam)\n        fragColor = texture(iChannel0, vec2(ang / twopi, mag));\n    else\n    \tfragColor = vec4(col,1.0);\n    \n}\n\n","name":"Image","description":"","type":"image"}]}