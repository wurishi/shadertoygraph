{"ver":"0.1","info":{"id":"dslBDS","date":"1689145455","viewed":175,"name":"Octaweb kernel","username":"sndels","description":"Functions for generating samples centered around (0, 0) with a ring based octaweb layout. Outer ring is placed at kernelRadius distance from the origin.\n\nIdea and name from 'A Life of a Bokeh' by Guillaume Abadie, but similar kernels have earlier sources.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["sampling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC0\n\n#define PI 3.1415926535\n\n// The center sample counts as a ring, so ringCount should be at least 2\nint ringCount = 5;\nint ringSampleFactor = 8;\nfloat kernelRadius = 3.5;\n\nint octawebRingSampleCount(int ring)\n{\n    return ring == 0 ? 1 : ringSampleFactor * ring;\n}\n\nvec2 octawebSample(int ring, int s, int ringSampleCount, int ringCount, float kernelRadius)\n{\n    // Need to place n-1 rings along the radius since center is ring 0\n    float ringSpacing = kernelRadius / float(ringCount - 1);\n    float r = float(ring) * ringSpacing;\n    \n    float rimSpacing = 2.0 * PI / float(ringSampleCount);\n    float phi = float(s) * rimSpacing;\n    // Rings are 'interleaved', probably to make the pattern less obviously repeating\n    if (ring % 2 == 0)\n        phi += rimSpacing * 0.5;\n\n    float x = r * cos(phi);\n    float y = r * sin(phi);\n    \n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Setup a coordinate system over the frame\n    vec2 clip = uv * 2.0 - 1.0;\n    // Fix aspect ratio\n    clip.x *= iResolution.x / iResolution.y;\n    vec2 coord = clip * 6.0;\n    \n    vec3 col = vec3(0);\n    \n    // Draw gridlines\n    if (fract(coord.x) < 0.05 || fract(1.0 - coord.x) < 0.05)\n        col = vec3(0.1);\n    if (fract(coord.y) < 0.05 || fract(1.0 - coord.y) < 0.05)\n        col = vec3(0.1);\n        \n    // Draw samples\n    for (int ring = 0; ring < ringCount; ++ring)\n    {\n        int ringSampleCount = octawebRingSampleCount(ring);\n        for (int si = 0; si < ringSampleCount; ++si)\n        {\n            vec2 s = octawebSample(ring, si, ringSampleCount, ringCount, kernelRadius);\n            \n            if (distance(coord, s) < 0.1)\n            {\n                col = vec3(0.8);\n                break;\n            }\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}