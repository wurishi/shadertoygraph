{"ver":"0.1","info":{"id":"wsdyWj","date":"1601787424","viewed":94,"name":"Circle inversion on a square","username":"dub","description":"Demonstration of the circle inversion on a square\nBlue square: square in real plane\nBlue circle: unitary circle that makes the plane inversion\nRed square: square in the inverted plane","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","square","inversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Demonstration of the circle inversion on a square\n// Blue square: square in real plane\n// Blue circle: unitary circle that makes the plane inversion\n// Red square: square in the inverted plane\n\n#define TH 0.01\n#define COS_PI4 0.70710678118\n\nconst mat2 rot45 = mat2(COS_PI4, COS_PI4, -COS_PI4, COS_PI4);\n\nfloat square(vec2 uv, float s)\n{\n    uv *= rot45;\n    uv.y = abs(uv.y);\n    uv *= rot45;\n    uv.y = abs(uv.y);\n    uv *= rot45;\n    uv.y = abs(uv.y);\n    uv *= rot45;\n    uv = uv.yx;\n    \n    uv.y = abs(uv.y);\n    uv.y -= s;\n    return smoothstep(TH, TH*2., abs(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = (fragCoord*2. - iResolution.xy)/iResolution.y;\n\n    float v1, v2, c;\n    \n    {   // real plane\n        vec2 uv = UV;\n\n        uv*=2.;\n        \n        v1 = smoothstep(TH, TH*2., abs(length(uv)-1.));\n\n        uv.x +=(sin(iTime)*1.+1.);\n        v1 *= square(uv, 0.6);\n    }\n    \n    {   // inverted plane\n        vec2 uv = UV;\n\n        uv*=2.;\n        uv /= dot(uv, uv);\n\n        uv.x +=(sin(iTime)*1.+1.);\n        v2 = square(uv, 0.6);\n    }\n    \n    vec3 col = mix(vec3(v1, v1, 1.), vec3(1., v2, v2), .5);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}