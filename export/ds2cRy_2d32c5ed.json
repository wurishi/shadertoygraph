{"ver":"0.1","info":{"id":"ds2cRy","date":"1687869897","viewed":184,"name":"Colors Wheel","username":"AmenShadertoy","description":"play around with the #define values to change the result","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["colorwheelcolorswheelspheregradientblurgreenredyellowcirclerotatable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SphereSize 0.5;\n#define Saturation 0.8;\n#define BlurEdge 0.05;\n#define TurnColors false;\n#define RotationSpeed 0.;\n\nconst float PI = 3.14;\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv /= SphereSize;\n    \n    float rotationSpeed = RotationSpeed;\n    \n    uv *= rotationMatrix(rotationSpeed * iTime);\n\n    float saturation = Saturation;\n    \n    float blurEdge = BlurEdge;\n   \n    float l = length(uv);\n   \n    float colorStep = smoothstep(0.8 + blurEdge, (0.8 + blurEdge) - blurEdge, l);\n   \n    bool turnColors = TurnColors;\n      \n    float i = (turnColors ? 1. : -1.);\n    \n    float step1atCenter = colorStep * smoothstep(1., 0., l) * saturation;\n   \n    float red = ((uv.x * i) + (uv.y * i)) * step1atCenter;\n    float green = ((uv.x * -i) + (uv.y * -i)) * step1atCenter;\n   \n   \n\n    // Time varying pixel colors\n    vec3 col = vec3((colorStep * red) + step1atCenter, (colorStep * green) + step1atCenter, colorStep * 0.);\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}