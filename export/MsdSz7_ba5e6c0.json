{"ver":"0.1","info":{"id":"MsdSz7","date":"1458547755","viewed":154,"name":"Lissajoux2","username":"pairlapinpin","description":"with a circle pen, gradiented, and tight queue","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["parametric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    float ry = 0.125; float rx = ry/ratio;\n    float deltay = 0.01; float deltax = deltay/ratio;\n    float centx = cos(iTime*2.)*rx;\n    float centy = sin(iTime*2.)*ry;\n    uv.xy += vec2 (centx, centy);\n    uv.xy -= vec2(0.5,0.5);\n    float xr = uv.x*cos(iTime/2.) - uv.y*sin(iTime/2.)/ratio;\n    float yr = uv.x*sin(iTime/2.) + uv.y*cos(iTime/2.)/ratio;\n    uv.x = xr; uv.y = yr;\n    uv.xy += vec2(0.5,0.5);\n\n\tfragColor = texture(iChannel0, uv);\n    fragColor.x *= 0.5+sin(iTime)/2.0;\n    fragColor.y *= 0.5+cos(iTime)/2.0;\n    fragColor.z *= 0.5+(cos(iTime+1.5)*sin(iTime-1.5))/2.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    float ry = 0.25; float rx = ry/ratio;\n    float deltay = 0.01; float deltax = deltay/ratio;\n    float lisx = sin(5.0*iTime/5.0);\n    float centx = 0.5;\n    float targx = centx + lisx * rx;\n    float colx = (uv.x > targx-deltax && uv.x < targx+deltax) ? 1.0 : 0.0;\n    float lisy = cos(3.0*iTime/5.0);\n    float centy = 0.5;\n    float targy = centy + lisy * ry;\n    float coly = (uv.y > targy-deltay && uv.y < targy+deltay) ? 1.0 : 0.0;\n    float col = colx*coly;\n    // If we do nothing, pen is a square\n    // If we do something, it can be... a circle ... a gradient circle\n    float dist = (uv.x - targx) * (uv.x - targx)  + (uv.y - targy) * (uv.y - targy);\n    vec4 oldColor = texture(iChannel0, uv);\n    float dist2 = deltay*deltay*4. - dist;\n    if (dist2 > 0.)\n    {\n        fragColor = vec4(max (1.0 * dist2 / (deltay*deltay*2.), oldColor.x));\n    }\n    else\n    {\n        fragColor = oldColor*0.996;\n        // Floor effect, if needed (value > 0.0). Snake queue effect.\n        if (fragColor.x < 0.15)\n            fragColor = vec4(0.0);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}