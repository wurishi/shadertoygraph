{"ver":"0.1","info":{"id":"wlcfDH","date":"1612631326","viewed":273,"name":"Spider web","username":"OursBleu","description":"A spider web.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["spiderweb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nvec2 getRadialUV(in vec2 uv)\n{\n    vec2 ruv;\n    \n    // convert cartesian to polar\n\truv.x = atan(uv.y, uv.x);\n    \n    // normalize angle\n    ruv.x += PI;\n    ruv.x /= (2.*PI);\n    \n    ruv.y = distance(vec2(0.), uv);\n    \n    return ruv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    // center uv\n    uv.x -= .5 * (iResolution.x/iResolution.y);\n\tuv.y -= .5;\n    \n    vec2 ruv = getRadialUV(uv);\n    \n    float indent = 0.1;\n    float freq = PI * 12.;\n    float steps = 5.0;\n    float maskSize = 0.5;\n    \n    float col1 = sin(ruv.y) + abs(sin(ruv.x * freq) * indent);\n    col1 += atan(ruv.y * PI);\n    \n    float mask = col1;\n    mask = step(mask, PI * maskSize);\n    \n    col1 = fract(col1 * steps);\n    col1 = step(col1, 0.1);\n    \n    float col2 = cos(ruv.x * freq * 2.);\n    col2 = step(0.99,col2);\n    \n    float col = (col1 + col2) * mask;\n    \n    // Output to screen\n    fragColor = vec4(col, col, col, 1.0);\n}","name":"Image","description":"","type":"image"}]}