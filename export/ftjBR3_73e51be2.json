{"ver":"0.1","info":{"id":"ftjBR3","date":"1652508352","viewed":68,"name":"Kochanek-Bartels Cubic Spline","username":"Envy24","description":"BufferA - drawing spline\nBufferB - drawing knots\nBufferC - drawind dashed convex hull\nImage - mixing and coloroing\n\nFour passes used for better readability of code.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["spline","cubic","interpolation","kochanek","bartels"],"hasliked":0,"parentid":"ft2Bzy","parentname":"Uniform Cubic B-Spline"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 spline      = TEXF0(SC);\n    vec4 knot        = TEXF1(SC);\n    vec4 convex_hull = TEXF2(SC);\n    \n    float min = MIN3(spline.r, knot.r, convex_hull.r);\n    \n    O = \n        min == 1.0 ?\n            vec4(1) :                            // Background color\n            min == spline.r ?\n                vec4(0, spline.r, spline.r, 1) : // Spline color\n                min == knot.r ?\n                    vec4(0, knot.r, 0, 1) :      // Knot color\n                    vec4(convex_hull);           // Convex hull  color\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define TEXF2(SC)                 ( texelFetch(iChannel2, ivec2(SC), 0) )\n#define MIN3(a, b, c)             ( min(min((a), (b)), (c)) )\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n#define RANDOM\n\nconst int num_of_knots = 8; /* 4 knots for first segment, then +1 knot per segment. */\nvec2 knots[num_of_knots] = vec2[num_of_knots](\n    vec2( -1.5, -0.9),\n    vec2( -1.5, -0.9),\n    vec2( -1.0, -0.9),\n    vec2(-0.33,  0.9), \n\n    vec2( 0.33, -0.9),\n    vec2(  1.0,  0.9),\n    vec2(  1.5,  0.9),\n    vec2(  1.5,  0.9)\n);\n\nfloat circleSQSDF(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance of areas (squared distancies).\n    float sds = _x * _x + _y *_y - r * r;\n    \n    float ss = smoothness * smoothness;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n\n//\nvoid randomize_knots(float time)\n{\n    uint T = uint(time);\n    for (int k = 0; k < num_of_knots; ++k)\n    {\n        knots[k] = vector2HashUI32(T + uint(k), 2u * T + uint(k * 2));\n    }\n}\n\nvoid randomize_knots2(float time)\n{\n    time *= 0.5;\n    float t = fract(time);\n    uint T = uint(time);\n\n    for (int k = 0; k < num_of_knots; ++k)\n    {\n        uint x = T + uint(k);\n        uint y = 2u * T + uint(k * 2);\n        vec2 c = vector2HashUI32(x, y);\n        vec2 n = vector2HashUI32(x + 1u, y + 2u);\n    \n        knots[k] = c * (1. - t) + n * t;\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 KochanekBartelsCubicSpline(\n    in vec2[4] knots,\n    float tension,\n    float bias,\n    float continuity,\n    float t)\n{\n    float w0 = ((1.0 - tension) * (1.0 + bias) * (1.0 + continuity)) * 0.5;\n    float w1 = ((1.0 - tension) * (1.0 - bias) * (1.0 - continuity)) * 0.5;\n    float w2 = ((1.0 - tension) * (1.0 + bias) * (1.0 - continuity)) * 0.5;\n    float w3 = ((1.0 - tension) * (1.0 - bias) * (1.0 + continuity)) * 0.5;\n\n    vec2 tangentDir0 = w0 * (knots[1] - knots[0]) + w1 * (knots[2] - knots[1]);\n    vec2 tangentDir1 = w2 * (knots[2] - knots[1]) + w3 * (knots[3] - knots[2]);\n\n    float tt = t * t;\n    float ttt = t * t * t;\n\n    return\n        (2.0 * ttt - 3.0 * tt + 1.0) * knots[1] +\n        (ttt - 2.0 * tt + t) * tangentDir0 +\n        (-2.0 * ttt + 3.0 * tt) * knots[2] +\n        (ttt - tt) * tangentDir1;\n}\n\nvec2 find_closest_spline_point_to_pixel(\n    in vec2[num_of_knots] knots,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    float dt = 0.02;\n    \n    int num_of_segments = num_of_knots - 3; // 4 knots per segment\n    \n    float tension = \n        LMB_IS_HOLD == true ?\n            NZMX :\n            0.0;\n    float bias = \n        LMB_IS_HOLD == true ?\n            NZMY :\n            0.0;\n    float continuity = (tension + bias) * 0.5;\n    \n    for (int s = 0; s < num_of_segments; ++s)\n    {\n        // Copy segment points\n        vec2 _knots[4] = vec2[4](\n            knots[s],\n            knots[s + 1],\n            knots[s + 2],\n            knots[s + 3]\n        );\n    \n        for (float t = 0.; t <= 1.; t += dt)\n        {\n            vec2 P = KochanekBartelsCubicSpline(_knots, tension, bias, continuity, t);\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_knots(iTime);\n    randomize_knots2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_spline_point_to_pixel(knots, NDC),\n        NDC,\n        0.01,\n        0.011));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 find_closest_knot_to_pixel(\n    in vec2[num_of_knots] knots,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    for (int k = 0; k < num_of_knots; ++k)\n    {\n        vec2 diff = knots[k] - NDC;\n        float sqDist = dot(diff, diff);\n       \n        minSqDist = min(minSqDist, sqDist);\n        \n        closestP = \n            minSqDist == sqDist ? \n                knots[k] :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_knots(iTime);\n    randomize_knots2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_knot_to_pixel(knots, NDC),\n        NDC,\n        0.02,\n        0.018));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 find_closest_convex_hull_point_to_pixel(\n    in vec2[num_of_knots] knots,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    int num_of_lines = num_of_knots - 1; // 2 knots per line\n     \n    for (int l = 0; l < num_of_lines; ++l)\n    {\n        for (float t = 0.; t <= 1.; t += 0.1)\n        {\n            vec2 P = knots[l] * (1. - t) + knots[l + 1] * t;\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_knots(iTime);\n    randomize_knots2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_convex_hull_point_to_pixel(knots, NDC),\n        NDC,\n        0.008,\n        0.0088));\n}","name":"Buffer C","description":"","type":"buffer"}]}