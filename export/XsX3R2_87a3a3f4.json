{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Attempt at raymarching grass using distance fields\n\nconst float PI = 3.14159265359;\n\nvec3 ldir = normalize(vec3(0.1,0.5,-1.5));\n\nvec3 rotateX(vec3 p, float theta)\n{\n\treturn vec3(p.x, cos(theta)*p.y-sin(theta)*p.z,cos(theta)*p.z+sin(theta)*p.y);\n}\n\nvec3 rotateY(vec3 p, float theta)\n{\n\treturn vec3(cos(theta)*p.x-sin(theta)*p.z,p.y,cos(theta)*p.z+sin(theta)*p.x);\n}\n\nfloat grass(vec3 p)\n{\n\tvec3 d = abs(p) - vec3(0.025,1.0,0.025);\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,vec3(0.0)));\n}\n\nvec3 skycolour(vec3 dir)\n{\n\tfloat sun = clamp(dot(ldir,dir), 0.0, 1.0);\n\tvec3 sky = vec3(0.6,0.71,1.75) - dir.y*0.2*vec3(1.0,0.5,1.0) + 0.075;\n\tsky += 0.2*vec3(1.0,0.6,0.1)*pow(sun, 8.0);\n\tsky *= 0.95;\n\tsky += 0.1*vec3(1.0,0.4,0.2)*pow(sun, 3.0);\n\treturn sky;\n}\n\nfloat dist(vec3 p)\n{\t\n\tvec3 d = textureLod(iChannel0,(p.xz / 32.0), 0.0).rgb;\n\tp.y += sin(p.x*2.0)*cos(p.z*2.0)*0.85*d.x;\n\tvec3 p0 = p + d*vec3(0.5,0.4,0.5);\n\tvec3 p1 = p - d*vec3(0.5,0.4,0.5);\n\tp0.xz = mod(p0.xz,vec2(0.5)) - vec2(0.25);\n\tp1.xz = mod(p1.xz,vec2(0.4)) - vec2(0.20);\n\n\tvec2 w = vec2(cos(iTime+d.x*1.0),sin(iTime+d.y*1.0)) * (p.y+2.0) * 0.05;\n\tp0.xz += w;\n\tp1.xz -= w;\n\t\n\tp0 = rotateX(p0,w.x*PI*0.450*p.y*cos(iTime));\n\tp1 = rotateX(p1,w.y*PI*0.250*p.y*cos(iTime));\n\tfloat ground = dot(p,vec3(0.0,1.0,0.0)) + 2.0;\n\treturn min(grass(p0),min(ground,grass(p1)));\n}\n\nvec3 calc_normal(vec3 p)\n{\n\tvec3 n;\n\tn.x = dist(p + vec3(0.01,0.0,0.0)) - dist(p - vec3(0.01,0.0,0.0));\n\tn.y = dist(p + vec3(0.0,0.01,0.0)) - dist(p - vec3(0.0,0.01,0.0));\n\tn.z = dist(p + vec3(0.0,0.0,0.01)) - dist(p - vec3(0.0,0.0,0.01));\n\treturn normalize(n);\n}\n\nfloat calc_ao(vec3 p, vec3 n)\n{\n\n\tfloat r = 0.0;\n\tfloat w = 1.0;\n\tfor (float i=1.0; i<=5.0; i++)\n\t{\n\t\tfloat d0 = (i / 5.0) * 1.25;\n\t\tr += w * (d0 - dist(p + n * d0));\n\t\tw *= 0.5;\n\t}\n\tfloat ao = 1.0 - clamp(r,0.0,1.0);\n\treturn ao;\n}\n\nvec4 march(vec3 ro, vec3 rd)\n{\n\tfloat t = 0.0;\n\tfor (int i=0; i<256; i++)\n\t{\n\t\tvec3 p = ro + rd * t;\n\t\tfloat d = dist(p);\n\t\tif (abs(d) < 0.01)\n\t\t\treturn vec4(p,1.0);\n\t\tt += d;\n\t\tif (t >= 100.0)\n\t\t\tbreak;\n\t}\n\treturn vec4(ro + rd * t, 0.0);\n}\n\nvec3 schlick(vec3 f0, vec3 h, vec3 v)\n{\n\treturn f0 + (1.0 - f0) * pow(1.0-max(dot(v,h),0.0),5.0);\n}\n\nvec3 shade(vec3 pos, vec3 v)\n{\n\tconst float spec_power = 4.0;\n\tconst float normalization = (spec_power + 2.0) / 8.0;\n\tconst vec3 f0 = vec3(0.057,0.057,0.037);\n\t\n\tvec3 n = calc_normal(pos);\n\t\n\tfloat g = clamp(1.0 - exp(-pos.y*1.0), 0.0, 1.0);\n\tvec3 albedo = mix(vec3(0.2,0.4,0.03),vec3(0.65,1.0,0.15),g);\n\t\n\tfloat ao = calc_ao(pos,n);\n\t\n\tvec3 h = normalize(v+ldir);\n\tvec3 fresnel = schlick(f0,h,v);\n\t\n\tfloat ndl = dot(n,ldir) * 0.5 + 0.5;\n\tfloat ndh = max(dot(n,h),0.0);\n\tfloat ndv = max(dot(n,v),0.0);\n\t\n\tfloat alpha = 1.0 / sqrt((PI/4.0) * spec_power + (PI/2.0));\n\tfloat vis = (ndl * (1.0 - alpha) + alpha) * (ndv * (1.0 - alpha) + alpha); \n\tvis = 1.0 / vis;\n\t\n\tvec3 spec = vec3(pow(ndh, spec_power)) * normalization * vis * ndl;\n\treturn albedo * (spec * fresnel + ndl * (1.0 - fresnel) + \n\t\t\t\t\t ao * skycolour(reflect(-v,n)) * 1.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 rd = vec3(-1.0 + 2.0 * uv.xy, 1.0);\n\trd.x *= iResolution.x / iResolution.y;\n\trd = normalize(rd);\n\t\n\tvec2 p = 128.0*vec2(cos(0.75+0.0047*iTime), sin(1.5+0.0021*iTime));\n\t\n\tvec3 ro = vec3(p.x,7.0,p.y);\n\trd = rotateX(rd, (sin(iTime/7.0) * (PI / 8.0)) + (PI / 10.0));\n\trd = rotateY(rd, cos(iTime/14.0) * PI / 4.0);\n\t\n\tfragColor.w = 1.0;\n\tvec4 res = march(ro,rd);\n\tif (res.w == 1.0)\n\t{\n\t\tfragColor.rgb = shade(res.xyz,-rd);\n\t}\n\telse\n\t{\n\t\tvec3 sky = skycolour(rd);\n\t\tfragColor.rgb = sky;\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsX3R2","date":"1374106162","viewed":624,"name":"Grass","username":"synulation","description":"Playing around some more with raymarching distance fields.  Ended up with a field of grass.  Still a WIP...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields","grass"],"hasliked":0,"parentid":"","parentname":""}}