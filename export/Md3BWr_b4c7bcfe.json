{"ver":"0.1","info":{"id":"Md3BWr","date":"1524681659","viewed":177,"name":"Music visualizer Circle","username":"fjavifabre","description":"Playing with audio input","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["music","audio","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dBSRV","filepath":"https://soundcloud.com/themmachine/the-m-machine-blind-citylights-remix","previewfilepath":"https://soundcloud.com/themmachine/the-m-machine-blind-citylights-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CONSTANTS\n#define PI 3.1415927\n#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define BLUE vec3(0,0,1)\n\n#define BARS 1\t//Use bars or wave\n#define ROTATE 0 // Rotate \n#define BAR_SCALE 140. // To calculate the size of the bars (continuous if not def)\n\n\n// From \"Heat map color palettes\"\n// https://www.shadertoy.com/view/ltlSRj\nvec3 heat5( float interpolant );\n\n// Main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float actualAngle = mod(iTime /34., 1.) * 2. * PI;\n    \n#if ROTATE\n    vec2 actualVector = vec2(cos(actualAngle), sin(actualAngle));\n#else\n    vec2 actualVector = vec2(0.,1.);\n#endif\n    \n    vec2 lVector = uv - vec2(.5);\n    float lBar = length(lVector);\n    float angle = acos(dot(normalize(lVector), actualVector));\n    angle /= PI; \n\n#ifdef BAR_SCALE\n#if BARS\n\n    angle = floor(angle*BAR_SCALE)/BAR_SCALE;\n#endif\n#endif\n    \n    float myF = 0.5*texture(iChannel0, vec2(angle, 0)).x;\n    vec3 barColor = heat5(myF*2.)*.7;\n    \n#if BARS   \n    fragColor = (myF > lBar) ? vec4(barColor,1.) : vec4(0);\n#else\n     fragColor = (abs(myF - lBar) < 0.01) ? vec4(barColor,1.) : vec4(0);\n#endif\n\n\n}\n\nvec3 fromRedToGreen( float interpolant )\n{\n \tif( interpolant < 0.5 )\n    {\n       return vec3(1.0, 2.0 * interpolant, 0.0); \n    }\n    else\n    {\n        return vec3(2.0 - 2.0 * interpolant, 1.0, 0.0 );\n    }\n}\nvec3 fromGreenToBlue( float interpolant )\n{\n   \tif( interpolant < 0.5 )\n    {\n       return vec3(0.0, 1.0, 2.0 * interpolant); \n    }\n    else\n    {\n        return vec3(0.0, 2.0 - 2.0 * interpolant, 1.0 );\n    }  \n}\nvec3 heat5( float interpolant )\n{\n    float invertedInterpolant = interpolant;\n \tif( invertedInterpolant < 0.5 )\n    {\n        float remappedFirstHalf = 1.0 - 2.0 * invertedInterpolant;\n        return fromGreenToBlue( remappedFirstHalf );\n    }\n    else\n    {\n     \tfloat remappedSecondHalf = 2.0 - 2.0 * invertedInterpolant; \n        return fromRedToGreen( remappedSecondHalf );\n    }\n}\n\n\n","name":"Image","description":"","type":"image"}]}