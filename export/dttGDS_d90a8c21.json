{"ver":"0.1","info":{"id":"dttGDS","date":"1683197806","viewed":37,"name":"Dithering second part","username":"PandaManda","description":"Dithering on the gpu","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n//      clamp(v,0.,1.)\n#endif\nvec3 hue2rgb(float hue){\n\thue=fract(hue);\n\treturn saturate(vec3(\n\t\tabs(hue*6.-3.)-1.,\n\t\t2.-abs(hue*6.-2.),\n\t\t2.-abs(hue*6.-4.)\n\t));\n}\n\nvec3 rgbToHsl(vec3 c){\n\tfloat cMin=min(min(c.r,c.g),c.b),\n\t      cMax=max(max(c.r,c.g),c.b),\n\t      delta=cMax-cMin;\n\tvec3 hsl=vec3(0.,0.,(cMax+cMin)/2.);\n\tif(delta!=0.0){ //If it has chroma and isn't gray.\n\t\tif(hsl.z<.5){\n\t\t\thsl.y=delta/(cMax+cMin); //Saturation.\n\t\t}else{\n\t\t\thsl.y=delta/(2.-cMax-cMin); //Saturation.\n\t\t}\n\t\tfloat deltaR=(((cMax-c.r)/6.)+(delta/2.))/delta,\n\t\t      deltaG=(((cMax-c.g)/6.)+(delta/2.))/delta,\n\t\t      deltaB=(((cMax-c.b)/6.)+(delta/2.))/delta;\n\t\t//Hue.\n\t\tif(c.r==cMax){\n\t\t\thsl.x=deltaB-deltaG;\n\t\t}else if(c.g==cMax){\n\t\t\thsl.x=(1./3.)+deltaR-deltaB;\n\t\t}else{ //if(c.b==cMax){\n\t\t\thsl.x=(2./3.)+deltaG-deltaR;\n\t\t}\n\t\thsl.x=fract(hsl.x);\n\t}\n\treturn hsl;\n}\n\n\nvec3 hslToRgb(vec3 hsl){\n\tif(hsl.y==0.){\n\t\treturn vec3(hsl.z); //Luminance.\n\t}else{\n\t\tfloat b;\n\t\tif(hsl.z<.5){\n\t\t\tb=hsl.z*(1.+hsl.y);\n\t\t}else{\n\t\t\tb=hsl.z+hsl.y-hsl.y*hsl.z;\n\t\t}\n\t\tfloat a=2.*hsl.z-b;\n\t\treturn a+hue2rgb(hsl.x)*(b-a);\n\t\t/*vec3(\n\t\t\thueRamp(a,b,hsl.x+(1./3.)),\n\t\t\thueRamp(a,b,hsl.x),\n\t\t\thueRamp(a,b,hsl.x-(1./3.))\n\t\t);*/\n\t}\n}\n\n\nvec2 frag_Coord;\n\n//in HSL\nvec3 palette[8];\n\nint paletteSize = 8;\n\n\n\n\nconst int indexMatrix8x8[64] = int[](0,  32, 8,  40, 2,  34, 10, 42,\n                                     48, 16, 56, 24, 50, 18, 58, 26,\n                                     12, 44, 4,  36, 14, 46, 6,  38,\n                                     60, 28, 52, 20, 62, 30, 54, 22,\n                                     3,  35, 11, 43, 1,  33, 9,  41,\n                                     51, 19, 59, 27, 49, 17, 57, 25,\n                                     15, 47, 7,  39, 13, 45, 5,  37,\n                                     63, 31, 55, 23, 61, 29, 53, 21);\n\nfloat indexValue() {\n    int x = int(mod(frag_Coord.x, 8.0));\n    int y = int(mod(frag_Coord.y, 8.0));\n    return float(indexMatrix8x8[(x + y * 8)]) / 64.0;\n}\n                                   \n\n\n\nfloat hueDistance(float h1, float h2) {\n    float diff = abs((h1 - h2));\n    float minm = min((abs((1.0 - diff))), diff);\n    return minm;\n\n}\n\nvec3[2] closestColors(float hue) {\n    vec3 ret[2];\n    vec3 closest = vec3(-2, 0, 0);\n    vec3 secondClosest = vec3(-2, 0, 0);\n    vec3 temp;\n    for (int i = 0; i < paletteSize; ++i) {\n        temp = palette[i];\n        float tempDistance = hueDistance(temp.x, hue);\n        if (tempDistance < hueDistance(closest.x, hue)) {\n            secondClosest = closest;\n            closest = temp;\n        } else {\n            if (tempDistance < hueDistance(secondClosest.x, hue)) {\n                secondClosest = temp;\n            }\n        }\n    }\n    ret[0] = closest;\n    ret[1] = secondClosest;\n    return ret;\n}\n\nvec3 dither(vec3 color) {\n    vec3 hsl = rgbToHsl(color);\n    vec3 colors[2] = closestColors(hsl.x);\n    vec3 closestColor = colors[0];\n    vec3 secondClosestColor = colors[1];\n    float d = indexValue();\n    float hueDiff = hueDistance(hsl.x, closestColor.x) /\n                    hueDistance(secondClosestColor.x, closestColor.x);\n    return hslToRgb(hueDiff < d ? closestColor : secondClosestColor);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    palette[0] = rgbToHsl(vec3(0.0, 0.0, 0.0));\n    palette[1] = rgbToHsl(vec3(1.0, 1.0, 1.0)); // white\n    palette[2] = rgbToHsl(vec3(1.0, 0.0, 0.0)); // red\n    palette[3] = rgbToHsl(vec3(0.0, 1.0, 0.0)); // green\n    palette[4] = rgbToHsl(vec3(0.0, 0.0, 1.0)); // blue\n    palette[5] = rgbToHsl(vec3(1.0, 1.0, 0.0)); // yellow\n    palette[6] = rgbToHsl(vec3(1.0, 0.0, 1.0)); // magenta\n    palette[7] = rgbToHsl(vec3(0.0, 1.0, 1.0)); // cyan\n\n    \n    frag_Coord = fragCoord;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 fg = texture(iChannel0,uv);\n\n    \n\n    fragColor = vec4(vec3(dither(fg.rgb)),1.0);\n}","name":"Image","description":"","type":"image"}]}