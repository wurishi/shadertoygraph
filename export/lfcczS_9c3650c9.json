{"ver":"0.1","info":{"id":"lfcczS","date":"1730799738","viewed":134,"name":" Water line","username":"Delincoter","description":"I saw related videos, but I donâ€™t want to read related articles. I did it according to my own ideas. There should be some things that are not standard. I hope someone can correct me.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["3d","postprocessing","water","refract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rot(float a) \n{\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 gv = uv;\n    gv.y += sin(gv.x*3. + iTime)*0.1;\n        \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\n    float s = clamp(gv.y*2., 0., 1.);\n    s = clamp(pow(s, 10.), 0., 1.); //The amount of water surface tension\n    \n    \n    vec3 ro = vec3(0., 0., -1.);\n    vec3 rd = normalize(vec3(uv, 0.) - ro);\n    \n    \n    rd = refract(rd, vec3(0., 0., -1.), 1./1.333); //refraction of light entering water\n    rd = refract(rd, vec3(0., 1.-s, -s), 1.333);//refraction of light exiting water\n    \n    rd.xz *= Rot(iMouse.x*10./iResolution.x);\n    \n    \n    vec3 col = textureLod(iChannel0, rd, 0.).rgb; \n    \n    col = mix(vec3(0.3,0.5,0.6), col, clamp(s, 0., 1.)); // Don't ues cubemap color\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}