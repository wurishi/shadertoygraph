{"ver":"0.1","info":{"id":"tlSfDV","date":"1599858439","viewed":179,"name":"Shader Royale test run - yx","username":"yx","description":"Coded live for the InÃ©rcia Demoparty Shader Royale test stream","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// tweaks added post-stream\n#define IMPROVED 1\n#define INSTAGRAM_COLORS 0\n\n\n#define iTime (iTime*.3)\n\n//#define pi uintBitsToFloat(0x40490FDB)\n#define pi acos(-1.)\n\nmat2 rotate(float a)\n{\n\tfloat c=cos(a),s=sin(a);\n\treturn mat2(c,s,-s,c);\n}\n\nfloat tick(float t)\n{\n\tt = fract(t);\n\tt = smoothstep(0.,1.,t);\n\tt = smoothstep(0.,1.,t);\n\treturn t;\n}\n\nfloat square(vec2 p, float r)\n{\n\tp=abs(p)-r;\n\treturn max(p.x,p.y);\n}\n\nfloat squircle(vec2 p, float r)\n{\n\tfloat c = length(p)-r;\n\tfloat b = square(p,r);\n\treturn mix(c,b,tick(sin(iTime)*.5+.5));\n}\n\nfloat sdf(vec2 p, float i)\n{\n\tfloat l = length(p);\n\t\n\tp=-abs(p);\n\tp -= tick(iTime+l*.1);\n\t\n\t//p = sin(p*pi+iTime*10.)*.5;\n\t\n\tp = fract(p+.5)-.5;\n\t\n\tfloat T = iTime*6.+i*pi/3.+l*2.;\n\t\n\tfloat r = tick(sin(T)*.5+.5)*.2+.1;\n\tfloat d = 1e9;\n\td = min(d,length(p.x)+sin(T)*.05);\n\td = min(d,length(p.y)+sin(T)*.05);\n\tp *= rotate(T*.5);\n\td = min(d,abs(squircle(p,r))-.02);\n\treturn d;\n\t//return abs(length(p)-1.)-.1;\n}\n\nvoid mainImage(out vec4 out_color, in vec2 fragCoord)\n{\n\tconst float speed = 2.;\n\t\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n\tuv *= 2.;\n\n\tuv *= rotate(atan(uv.x,uv.y)*0.25);\n\tuv += uv;\n\tuv = abs(uv);\n\tuv = vec2(max(uv.x,uv.y),min(uv.x,uv.y));\n\t//uv *= rotate(atan(uv.x,uv.y)*2);\n\t\n\tvec3 cam = vec3(0,0,-10);\n\tvec3 dir = normalize(vec3(uv,5));\n\t\n\tcam.yz *= rotate(sin(iTime*.3));\n\tdir.yz *= rotate(sin(iTime*.3));\n\tcam.xz *= rotate(iTime*.1);\n\tdir.xz *= rotate(iTime*.1);\n\t\n\tfloat t1 = (cam.y/-dir.y);\n\tfloat t2 = (cam.z/-dir.z);\n\tfloat t3 = (cam.x/-dir.x);\n\tt1=t1>0.?t1:10000.;\n\tt2=t2>0.?t2:10000.;\n\tt3=t3>0.?t3:10000.;\n\t\n\tvec2 uv1 = cam.xz+dir.xz*t1;\n\tvec2 uv2 = cam.xy+dir.xy*t2;\n\tvec2 uv3 = cam.yz+dir.yz*t3;\n\t\n\t//uv1 = fract(uv1+.5)-.5;\n\t//uv2 = fract(uv2+.5)-.5;\n\t//uv3 = fract(uv3+.5)-.5;\n\t\n\tfloat d1 = sdf(uv1,0.);\n\tfloat d2 = sdf(uv2,1.);\n\tfloat d3 = sdf(uv3,2.);\n\t\n\tfloat f1 = pow(.9,t1);\n\tfloat f2 = pow(.9,t2);\n\tfloat f3 = pow(.9,t3);\n\t\n\tvec3 color = vec3(0);\n\tcolor += vec3(smoothstep(0.,abs(length(fwidth(uv1))*5.),-d1)) * f1 * vec3(1,0,0);\n\tcolor += vec3(smoothstep(0.,abs(length(fwidth(uv2))*5.),-d2)) * f2 * vec3(0,1,0);\n\tcolor += vec3(smoothstep(0.,abs(length(fwidth(uv3))*5.),-d3)) * f3 * vec3(0,0,1);\n\n#if IMPROVED\n    // tweak added post-stream\n\tcolor += vec3(3,1,1)*.005/(abs(d1)+.004) * f1;\n\tcolor += vec3(1,3,1)*.005/(abs(d2)+.004) * f2;\n\tcolor += vec3(1,1,3)*.005/(abs(d3)+.004) * f3;\n#else\n\tcolor += vec3(3,1,1)*.005/abs(d1) * f1;\n\tcolor += vec3(1,3,1)*.005/abs(d2) * f2;\n\tcolor += vec3(1,1,3)*.005/abs(d3) * f3;\n#endif\n    \n\tcolor.r += (sin(max(uv1.x,uv1.y))*.2+.2) * f1;\n\tcolor.g += (sin(max(uv2.x,uv2.y))*.2+.2) * f2;\n\tcolor.b += (sin(max(uv3.x,uv3.y))*.2+.2) * f3;\n\n\tcolor = pow(color,vec3(2.));\n\t\n\t//color.xy = (color.xy-.5)*rotate(iTime)+.5;\n\t\n\tcolor /= 1.-dot(uv,uv)*.06;\n\t//color = clamp(color,0,1);\n\t//color *= 1.-dot(uv,uv)*.05;\n\t\n\tout_color = vec4(1.-color, 1);\n    \n    // instagram colors\n#if INSTAGRAM_COLORS\n    out_color.rgb = mix(vec3(0,.2,.4),vec3(1,.8,.6),out_color.rgb);\n#endif\n}","name":"Image","description":"","type":"image"}]}