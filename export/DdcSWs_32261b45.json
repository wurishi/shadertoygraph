{"ver":"0.1","info":{"id":"DdcSWs","date":"1681009104","viewed":93,"name":"Dithered default shader","username":"kjfung","description":"Takes the default shader and dithers it. I thought doing this temporally would look decent but it's actually very harsh on the eyes.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GIVE_ME_A_SEIZURE 0\n\nfloat quantizeF(float f, float r) {\n    // Quantization size (ie how many discrete states to quantize into)\n    const int Q_COUNT = 3;\n    const int Q_MINUS_ONE = Q_COUNT - 1;\n    float lower = floor(f * float(Q_MINUS_ONE)) / float(Q_MINUS_ONE);\n    float upper = lower + (1.0 / float(Q_MINUS_ONE));\n\n    float ratio = (f - lower) * float(Q_MINUS_ONE);\n    \n    if (ratio <= r) {\n        return lower;\n    } else {\n        return upper;\n    }\n}\n\nvec3 quantize(vec3 col, vec2 uv) {\n#if GIVE_ME_A_SEIZURE\n    // Temporal dithering- pretty sure this can give someone a seizure...\n    vec3 sequence = vec3(1.61803398875, 1.41421356237, 2.2360679775) * float(iFrame);\n    vec3 random = fract(texture(iChannel0, uv).rgb + sequence);\n#else\n    vec3 random = fract(texture(iChannel0, uv).rgb);\n#endif\n\n    float r = quantizeF(col.r, random.r);\n    float g = quantizeF(col.g, random.g);\n    float b = quantizeF(col.b, random.b);\n    \n    return vec3(r, g, b);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    col = quantize(col, uv);\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}