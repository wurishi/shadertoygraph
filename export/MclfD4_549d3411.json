{"ver":"0.1","info":{"id":"MclfD4","date":"1723882520","viewed":17,"name":"Forming lines and curves","username":"dsd","description":"Experiments with forming lines and curves with lerp","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles","lines","curves","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float asr = 16./9.;\n\nvec2 xy;\nvec3 col;\n\nvec2 pts[100];\nint p_count = 0;\n\nvec2 nx(vec2 v) {\n    return vec2(v.x*asr, v.y);\n}\n\nvoid draw(float edge, float x, vec3 x_col) {\n    float d = fwidth(edge);\n    float a = smoothstep(edge - d, edge + d, x);\n    col = mix(col, x_col, a);\n}\n\nvoid draw_circ(vec2 c, float r, vec3 c_col) {\n    draw(length(xy - c), r, c_col);\n}\n\nvoid add_p(vec2 c) {\n    pts[p_count++] = nx(c);\n}\n\nvoid draw_pts(float r, vec3 p_col) {\n    for (int i = 0; i < p_count; i++)\n        draw_circ(pts[i], r, p_col);\n}\n\nvec2 center(vec2 v1, vec2 v2) {\n    return (v1 + v2)/2.;\n}\n\nvec2 rotate(vec2 p, vec2 c, float f) {\n    mat2 r_mat = mat2(cos(f), -sin(f), sin(f), cos(f));\n    return c + (p - c)*r_mat;\n}\n\nvec2 lerp(vec2 v1, vec2 v2, float t) {\n    return (1.-t)*v1 + t*v2;\n}\n\nvec2 lerp2(vec2 v1, vec2 v2, vec2 v3, float t) {\n    return lerp(lerp(v1, v2, t), lerp(v2, v3, t), t);\n}\n\nvoid set_p_ln(vec2 v1, vec2 v2, int num_st) { //this function\n    vec2 st = (v2 - v1)/float(num_st - 1);    //is not in usage\n    for (int i = 0; i < num_st; i++)          //in this shader\n        add_p(v1 + st*float(i));\n}\n\nvoid set_p_ln_lerp(vec2 v1, vec2 v2, int num_st) {\n    float st = 1./float(num_st - 1);\n    for (int i = 0; i < num_st; i++)\n        add_p(lerp(v1, v2, st*float(i)));\n}\n\nvoid set_p_cur(vec2 v1, vec2 v2, vec2 v3, int num_st) {\n    float st = 1./float(num_st - 1);\n    for (int i = 0; i < num_st; i++)\n        add_p(lerp2(v1, v2, v3, st*float(i)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    xy = nx(uv);\n    col = vec3(uv.x);\n    \n    float rad = .03;\n    vec3 p_col = vec3(1., 0., 1.);\n    \n    float ln_y = .4;\n    vec2 start_p = vec2(.2, ln_y);\n    vec2 end_p = vec2(.8, ln_y);      \n    vec2 contr_cur_p = vec2(.5, 1.3);\n    \n    float rf = iTime/2.;\n    vec2 ln_cent = center(start_p, end_p);\n    start_p = rotate(start_p, ln_cent, rf);\n    end_p = rotate(end_p, ln_cent, rf);\n    \n    set_p_ln_lerp(start_p, end_p, 11);\n    set_p_cur(start_p, contr_cur_p, end_p, 15);\n    \n    draw_pts(rad, p_col);\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}