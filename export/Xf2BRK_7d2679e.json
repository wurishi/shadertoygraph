{"ver":"0.1","info":{"id":"Xf2BRK","date":"1725205060","viewed":40,"name":"Spiral Truchet","username":"Peregrine","description":"2024-06-19, made with Bleuje at the Fabrique Ã  Cookie shader jam.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","spiral","checkerboard","truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t   iTime\n#define PI  3.1415926535897932384626\n#define TAU (2. * PI)\n#define PHI 1.6180339887498948482045\n#define EPSILON 0.01\n\n#define pos(x) ((x) * .5 + .5)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define sat(x) clamp(x, 0., 1.)\n\nvec3 cos_palette(vec3 a, vec3 b, vec3 c, vec3 d, float x) {\n  return a + b * cos(TAU * (c * x + d));\n}\n\nvec3 rainbow(float x) {\n  return cos_palette(vec3(.5), vec3(.5), vec3(1.), vec3(0., .33, .66), x);\n}\n\nfloat hash11(float seed) {\n  return fract(sin(seed * 123.456) * 123.456);\n}\n\nfloat _seed;\nfloat rand(void) {\n  return hash11(_seed++);\n}\n\nfloat one_periodic(float x) {\n  return sin(TAU * x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n  _seed = t + texture(iChannel0, uv).x;\n  vec3 c = vec3(0.);\n  \n  vec2 uv0 = uv;\n  \n  uv *= 12.;\n  vec2 r = vec2(1.),\n       id = floor((uv + .5 * r)/r);\n  uv = mod(uv + .5 * r, r) - .5 * r;\n  \n  float celltype = mod(id.x + id.y + 5000., 2.);\n\n  float div = 8. + 4. * sin(.3 * t);\n  float off = length(id)/div + 2. * atan(id.x, id.y)/TAU;\n  float wave = sin(off - 1. * t) - .2;\n  float wave2o = t - off;\n  float wave2 = floor(wave2o);\n  float wave2f = fract(wave2o);\n  float intensity = sin(PI * wave2f);\n  \n  //if (celltype == 0.)\n  uv *= rot((PI/2.) * floor(hash11(length(id)) * 7.));\n  uv *= rot((PI/2.) * wave2 + celltype * PI/2.);\n  \n  vec2 offset = vec2(.5);\n  float radius = .5;\n  float ring1 = length(uv + offset) - radius;\n  ring1 = abs(ring1) - intensity * .1;\n  float ring2 = length(uv - offset) - radius;\n  ring2 = abs(ring2) - intensity * .1;\n  ring1 = min(ring1, ring2);\n  vec3 hue = vec3(.3);\n  float wavetype = mod(wave2, 2.);\n  if (wavetype == 0.) \n    hue = rainbow(.4 * t - atan(id.x, id.y)/TAU);\n  else\n    hue = vec3(1., 0., 0.);\n  //hue.rg *= rot(wave2);\n  //hue.gb *= rot(wave2);\n  //hue.rb *= rot(wave2);\n  hue = abs(hue);\n  c = hue * smoothstep(0., .01, -ring1);\n  c += hue * (1. - sat(ring1 * 25.));\n  c += (celltype == 0.) ? vec3(0.) : vec3(.3);\n  fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}