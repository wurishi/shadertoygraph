{"ver":"0.1","info":{"id":"llfSR7","date":"1435243677","viewed":212,"name":"Four Triangles","username":"andmar1x","description":"I made this shader for application that displaying pseudo holographic models like in attached image:\nhttp://www.hashslush.com/wp-content/uploads/2013/09/HOLO_3FacesPyramid.jpg","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle","triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// http://stackoverflow.com/a/2049712\nbool isInTriangle(vec2 p0, vec2 p1, vec2 p2, vec2 p) {\n    float a = 1. / 2. * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n    float s = 1. / (2. * a) * (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y);\n    float t = 1. / (2. * a) * (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y);\n    return (s > 0.) && (t > 0.) && (1. - s - t > 0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float center = .5;\n    float diff = center * iResolution.y / iResolution.x;\n    \n    if (isInTriangle(vec2(center - diff, 0.), vec2(center + diff, 0.), vec2(center), uv)) {\n        fragColor = texture(iChannel0, uv);\n    } else if (isInTriangle(vec2(center - diff, 1.), vec2(center - diff, 0.), vec2(center), uv)) {\n        fragColor = texture(iChannel1, uv);\n    } else if (isInTriangle(vec2(center - diff, 1.), vec2(center), vec2(center + diff, 1.), uv)) {\n        fragColor = texture(iChannel2, uv);\n    } else if (isInTriangle(vec2(center + diff, 1.), vec2(center), vec2(center + diff, 0.), uv)) {\n        fragColor = texture(iChannel3, uv);\n    } else {\n        fragColor = vec4(0.);\n    }\n}","name":"","description":"","type":"image"}]}