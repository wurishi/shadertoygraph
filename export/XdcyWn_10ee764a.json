{"ver":"0.1","info":{"id":"XdcyWn","date":"1518340544","viewed":176,"name":"in/outside the Bezier curve","username":"zhufei","description":"test if the point is inside or out side the Bezier curve","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on https://www.shadertoy.com/view/4tj3Dy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec3 color = vec3(1.0,1.0,1.0);\n    \n  \n    vec2 uv = (fragCoord.xy / iResolution.xy) -vec2(.5) ; \n   \n\n    vec2 A = vec2(-0.3,0.0);   // start point \n    vec2 B = vec2(0.0,0.2);    //control point \n    vec2 C = vec2(.3,0.0);     //end point \n \n    // Compute vectors        \n    vec2 v0 = C - A;\n    vec2 v1 = B - A;\n    vec2 v2 = uv - A;\n\n    // Compute dot products\n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n\n\t// Compute barycentric coordinates\n\tfloat invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);\n\tfloat u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\tfloat v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n  /*     \n    if((u >= 0.0) && (v >= 0.0) && (u + v <= 1.0)) {\n    \tfragColor = vec4(vec3(1.), 1.0);\n    } else {\n        fragColor = vec4(vec3(0.), 1.0);\n    }\n    return;\n    */\n   \n    // use the blinn and loop method\n    float w = (1.0 - u - v);\n    vec2 textureCoord = u * vec2(0.0,0.0) + v * vec2(0.5,0.0) + w * vec2(1.0,1.0);\n        \n\t// use the sign of the result to decide between grey or black\n    float insideOutside = sign(textureCoord.x * textureCoord.x - textureCoord.y);\n  \n    fragColor = vec4(vec3(insideOutside),1.0);\n    \n    return;\n}\n\n","name":"Image","description":"","type":"image"}]}