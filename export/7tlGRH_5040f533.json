{"ver":"0.1","info":{"id":"7tlGRH","date":"1621562256","viewed":105,"name":"Polygon xxx","username":"xxxbbbooo","description":"polygon function from the book of shaders\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\n\ntry to change the value of POLY","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141593\n#define TWO_PI 6.283185\n\n#define POLY 5\n\nvec3 drawPolygon(int n, vec2 st)\n{\n    // Angle and radius from the current pixel\n    float a = atan(st.x,st.y)+PI;\n    float r = TWO_PI/float(n);\n\n    // Shaping function that modulate the distance\n    float d = cos(floor(.5+a/r)*r-a)*length(st);\n\n    return vec3(1.0-smoothstep(.4,.41,d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;   \n#if 0   \n    vec3 col = drawPolygon(POLY, uv);\n#else\n    vec3 col = drawPolygon(int(mod(iTime, 5.)) + 3, uv);\n#endif\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}