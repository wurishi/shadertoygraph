{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\n// chrome gate\n// by leon denise\n// 2024/12/21\n\n// rotation\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\n// smooth minimum\nfloat smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n// gyroid\nfloat gyroid (vec3 p) { return dot(sin(p),cos(p.yzx)); }\n\n// noise\nfloat fbm (vec3 p)\n{\n    float r = .0;\n    float a = 1.;\n    for (float i = .0; i < 3.; ++i)\n    {\n        p += r * .5;\n        r += abs(gyroid(p/a)*a);\n        a /= 1.8;\n    }\n    return r;\n}\n\n// distance field\nfloat dist(vec2 p)\n{\n    float d = 100.;\n    vec2 q = p;\n    \n    // kaleidoscopic circles\n    float a = 1.;\n    float t = 196.+iTime/20.;\n    for (float i = 0.; i < 3.; ++i) {\n        p.x = abs(p.x)-a;\n        p *= rot(t/a);\n        d = smin(abs(length(p)-a), d, 1.5*a);\n        a /= 2.;\n    }\n    \n    // outline\n    //d = min(d, abs(d-.04)-.05);\n    \n    // frame\n    q = abs(q)-vec2(iResolution.x/iResolution.y, 1.);\n    float box = abs(max(q.x, q.y));\n    d = smin(d, box-.1, .2);\n    \n    // noise\n    float z = length(p)+iTime/5.+d*20.;\n    d += (fbm(vec3(p*10.,z))-.5)*.001/max(-d, .01);\n    \n    return d-.1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // distance\n    float shape = dist(p);\n    \n    // normal\n    vec2 e = vec2(8./iResolution.y,0);\n    #define P(u) vec3(p+u,dist(p+u))\n    #define N(v) normalize(v)\n    vec3 n = -cross(N(P(e.xy)-P(-e.xy)), N(P(e.yx)-P(-e.yx)));\n\n    // lighting\n    vec3 color = vec3(.0);\n    color += pow(dot(n, N(vec3(0,1,-1)))*.5+.5, 40.);\n    color += pow(dot(n, N(vec3(0,0,1)))*.5+.5, .9);\n    color += pow(dot(n, N(vec3(0,-1,-1)))*.5+.5, 20.);\n    color *= .333+.66*smoothstep(.05,.0,shape+.05);\n    \n    // background\n    vec3 back = vec3((1.-uv.y)*.8+.2);\n    back *= smoothstep(0.,.07,shape)*.33+.66;\n    color = mix(back, color, smoothstep(.01,.0,shape));\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4X3cz4","date":"1734773485","viewed":227,"name":"chrome gate","username":"leon","description":"goth shader","likes":38,"published":3,"flags":0,"usePreview":0,"tags":["chrome","ornements"],"hasliked":0,"parentid":"","parentname":""}}