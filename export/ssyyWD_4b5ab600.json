{"ver":"0.1","info":{"id":"ssyyWD","date":"1655013600","viewed":160,"name":"interlaced mirage","username":"HaleyHalcyon","description":"earthbound inspired","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise","snes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TURN 6.283185307\n#define HEX(x) vec3((ivec3(x)>>ivec3(16,8,0))&255)/255.\n\n// Random integers used for Perlin noise.\nuint rand[] = uint[] (\n244u,\n 69u,\n224u,\n 39u,\n208u,\n151u,\n201u,\n255u,\n189u,\n202u,\n157u,\n 92u,\n206u,\n154u,\n199u,\n194u,\n232u,\n101u,\n216u,\n134u,\n 62u,\n242u,\n163u,\n248u,\n140u,\n183u,\n120u,\n 90u,\n215u,\n 30u,\n211u,\n186u,\n150u,\n100u,\n 57u,\n106u,\n118u,\n142u,\n 61u,\n246u,\n 11u,\n230u,\n141u,\n 55u,\n147u,\n180u,\n 27u,\n226u,\n 99u,\n125u,\n122u,\n 13u,\n  2u,\n112u,\n192u,\n 60u,\n137u,\n 80u,\n198u,\n252u,\n 94u,\n245u,\n162u,\n113u,\n 24u,\n146u,\n 49u,\n110u,\n253u,\n 81u,\n 10u,\n165u,\n109u,\n115u,\n218u,\n  0u,\n254u,\n129u,\n 71u,\n 88u,\n187u,\n114u,\n176u,\n243u,\n  7u,\n 87u,\n 45u,\n209u,\n 23u,\n168u,\n103u,\n121u,\n 93u,\n153u,\n 22u,\n133u,\n 34u,\n 78u,\n241u,\n182u,\n221u,\n 38u,\n136u,\n104u,\n 18u,\n105u,\n164u,\n 65u,\n 91u,\n 25u,\n132u,\n119u,\n174u,\n173u,\n 15u,\n170u,\n 29u,\n 37u,\n212u,\n210u,\n 44u,\n169u,\n181u,\n251u,\n  4u,\n  8u,\n229u,\n 79u,\n 32u,\n 21u,\n203u,\n214u,\n 75u,\n 12u,\n225u,\n 97u,\n 40u,\n 35u,\n 28u,\n 64u,\n231u,\n 19u,\n185u,\n123u,\n236u,\n 77u,\n238u,\n  5u,\n128u,\n179u,\n127u,\n 48u,\n 72u,\n156u,\n190u,\n 54u,\n124u,\n250u,\n205u,\n161u,\n228u,\n 56u,\n158u,\n207u,\n148u,\n 17u,\n 95u,\n 52u,\n111u,\n126u,\n 36u,\n 74u,\n197u,\n152u,\n160u,\n 20u,\n219u,\n130u,\n 66u,\n239u,\n240u,\n  6u,\n108u,\n 47u,\n116u,\n213u,\n237u,\n138u,\n 70u,\n 33u,\n 26u,\n 46u,\n 96u,\n 53u,\n 41u,\n200u,\n 59u,\n 58u,\n135u,\n 83u,\n235u,\n 31u,\n131u,\n 63u,\n 42u,\n  1u,\n149u,\n139u,\n247u,\n  9u,\n159u,\n 73u,\n 98u,\n222u,\n 68u,\n 51u,\n 67u,\n144u,\n 82u,\n233u,\n177u,\n155u,\n178u,\n 50u,\n143u,\n 84u,\n184u,\n 85u,\n217u,\n166u,\n193u,\n145u,\n 89u,\n107u,\n172u,\n 76u,\n117u,\n196u,\n 86u,\n220u,\n  3u,\n171u,\n223u,\n 16u,\n167u,\n195u,\n191u,\n102u,\n 14u,\n188u,\n227u,\n234u,\n204u,\n249u,\n 43u,\n175u\n);\nvec3 color(float x) {\n#define COLOR_SMOOTHING 0.01\n    float factor = fract(x) * 4.;\n    float f0 = smoothstep(0., COLOR_SMOOTHING, factor);\n    float f1 = smoothstep(0., COLOR_SMOOTHING, factor - 1.);\n    float f2 = smoothstep(0., COLOR_SMOOTHING, factor - 2.);\n    float f3 = smoothstep(0., COLOR_SMOOTHING, factor - 3.);\n    return (\n        HEX(0x009BE8) * (f0 - f1) +\n        HEX(0xEB0072) * (f1 - f2) +\n        HEX(0xfff100) * (f2 - f3) +\n        HEX(0x010a31) * (f3 - f0 + 1.)\n    );\n}\n\n// fade function defined by ken perlin\nvec2 fade(vec2 t) {\n  return t * t * t * (t * (t * 6. - 15.) + 10.);\n}\n// corner vector\nvec2 cvec(vec2 uv, float time) {\n  uint x = uint(mod(uv.x, 256.));\n  uint y = uint(mod(uv.y, 256.));\n  float n = (float(rand[(x + rand[y]) & 255u]) / 255. + time) * TURN;\n  return vec2(\n      sin(n), cos(n)\n  );\n}\n// perlin generator\nfloat perlin(vec2 uv, float offset) {\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n\n  vec2 u = fade(f);\n  offset = fract(offset);\n\n  return\n  mix(\n    mix(\n      dot( cvec(i + vec2(0.0,0.0), offset ), f - vec2(0.0,0.0) ),\n      dot( cvec(i + vec2(1.0,0.0), offset ), f - vec2(1.0,0.0) ),\n    u.x),\n    mix(\n      dot( cvec(i + vec2(0.0,1.0), offset ), f - vec2(0.0,1.0) ),\n      dot( cvec(i + vec2(1.0,1.0), offset ), f - vec2(1.0,1.0) ),\n    u.x),\n  u.y);\n}\n\n// The time multiplier.\n// 1.0 = loop once every second, 0.5 = loop once every 2 seconds, etc.\n#define SPEED 2./15.\n\n#define COLORS 16.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime * SPEED);\n\n    vec2 uv = floor(fragCoord / iResolution.xy * vec2(256, 240));\n    uv += floor(sin((t + vec2(0.0, 0.25)) * TURN) * vec2(32, 48));\n    vec2 uv2 = uv / 64.;\n    uv2.y += -2.0 * sin((0.85 + 0.25 * (uv.y / 128.) + 0. * t + 0.25 * sin(t * TURN)) * TURN);\n    uv2.x += 0.25 * sin((0.75 * (uv.y / 128.) + 2. * t + 0.25 * sin(0.3 + t * TURN)) * TURN) * (1. - 2. * step(0.5, fract(uv.y * 0.5)));\n    \n    uv2 *= vec2(0.2, 0.1);\n    float z = 1.9 * (\n       perlin(uv2 + vec2(2.3, 1.8), 0.) + 0.7 * (\n           perlin(uv2 * 2.6, 0.25) + 0.7 * (\n               perlin(uv2 * 2.6 * 2.6, 0.5)\n           )\n       )\n   );\n    // color cycling\n    //z += floor((\n    z += ((\n        0.4 * sin(t * TURN)\n        + 4. * t\n    ) * COLORS) / COLORS;\n    \n    \n    vec3 col = color(floor(z * COLORS) / COLORS);\n    // test color palette\n//    col = color(floor(uv.x * 0.5) / 8.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}