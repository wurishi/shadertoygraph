{"ver":"0.1","info":{"id":"lst3zl","date":"1451861179","viewed":126,"name":"2D Mandelbrot Set With Mouse","username":"MonkeyIsBack","description":"Pretty simple implementation of fractal : mandelbrot set.\n\nControls : arrows, mouse, Z\n\nYou can change ZOOM_SPEED in Buf A\nYou can change DEPTH in Image for performance vs quality tweak\n\nFloat precision limit is reached too soon, sadly.","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["fractal","mouse","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define DEPTH 1000.0\n\n#define load(a,b) texture(b,(fract(a.x)==0.1?vec2(fragCoord.x,a.y+0.5):(a+0.5))/iResolution.xy)\n\nprecision highp float;\n\nconst vec2 bufA_memory_bounds = vec2(0.0,0);\n\nvec4 drawPoint(float d) {\n\tvec4 point;\n    int border = 50;\n    float curDepth = d / DEPTH;\n    float ratio = float(border) / DEPTH;\n\n    point = vec4(1.0 - (1.0/sqrt(float(d)/5.5 + 1.5)));\n    \n    return (point);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 bounds = load(bufA_memory_bounds, iChannel0);\n    \n    float x_min;\n    float x_max;\n    float y_min;\n    float y_max;\n    \n\n    x_min = bounds.x;\n    x_max = bounds.y;\n    y_min = bounds.w; // inversed y min / max\n    y_max = bounds.z;\n\n    float RC = x_min + ((x_max - x_min)/iResolution.x) * fragCoord.x;\n    float IC = y_min + ((y_max - y_min)/iResolution.y) * fragCoord.y;\n    \n    float RZ = 0.0;\n    float IZ = 0.0;\n    \n    for (float a = 0.0; a < DEPTH; a++) {\n        float R = RZ;\n        float I = IZ;\n        \n        RZ = R*R - I*I + RC;\n        IZ = 2.0*R*I + IC;\n        \n        if (RZ*RZ + IZ*IZ >= 4.0) {\n            fragColor = drawPoint(a);\n            return;\n        }\n    }\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ZOOM_SPEED 0.985\n\n#define inside(a) (fragCoord.y-a.y == 0.5 && (fract(a.x) == 0.1 || fragCoord.x-a.x == 0.5))\n#define load(a,b) texture(b,(a+0.5)/iResolution.xy)\n\n#define KEY_LEFT\t37.5/256.0\n#define KEY_UP\t\t38.5/256.0\n#define KEY_RIGHT\t39.5/256.0\n#define KEY_DOWN\t40.5/256.0\n#define KEY_Z\t\t90.5/256.0\n\n#define OFFSET_X_MIN -2.02\n#define OFFSET_X_MAX +2.02\n#define OFFSET_Y_MIN -2.8\n#define OFFSET_Y_MAX +1.8\n\nprecision highp float;\n\nconst vec2 bufA_memory_bounds = vec2(0.0,0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // global buffer loading\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n    \n    // if currentposition is in the player data position\n    if (inside(bufA_memory_bounds))\n    {\n        // read keyboard\n        float kUp = texture( iChannel1, vec2(KEY_UP,0.0) ).x;\n        float kRight = texture( iChannel1, vec2(KEY_RIGHT,0.0) ).x;\n        float kDown = texture( iChannel1, vec2(KEY_DOWN,0.0) ).x;\n        float kLeft = texture( iChannel1, vec2(KEY_LEFT,0.0) ).x;\n        float kZ = texture( iChannel1, vec2(KEY_Z,0.0) ).x;\n        \n        float x_min;\n        float x_max;\n        float y_min;\n        float y_max;\n\n        if (fragColor.x == 0.0 && fragColor.y == 0.0) {\n            x_min = OFFSET_X_MIN;\n            x_max = OFFSET_X_MAX;\n            y_min = OFFSET_Y_MIN;\n            y_max = OFFSET_Y_MAX;\n        } else {\n            x_min = fragColor.x;\n            x_max = fragColor.y;\n            y_min = fragColor.z;\n            y_max = fragColor.w;\n        }\n        \n        float width = x_max - x_min;\n       \tfloat height = y_max - y_min;\n\n        // move left\n        if (kLeft > 0.5) {\n            x_min -= width * iTimeDelta * 0.5;\n            x_max -= width * iTimeDelta * 0.5;\n        }\n        // move right\n        if (kRight > 0.5) {\n            x_min += width * iTimeDelta * 0.5;\n            x_max += width * iTimeDelta * 0.5;\n        }\n\n        // move up\n        if (kUp > 0.5) {\n            y_min -= height * iTimeDelta * 0.5;\n            y_max -= height * iTimeDelta * 0.5;\n        }\n        // move down\n        if (kDown > 0.5) {\n            y_min += height * iTimeDelta * 0.5;\n            y_max += height * iTimeDelta * 0.5;\n        }      \n       \n        // zoom in\n        if (iMouse.z > 0.5) {\n\t\t\tfloat click_ratio_screen_x = iMouse.x / iResolution.x;\n\t\t\tfloat click_ratio_screen_y = 1.0 - (iMouse.y / iResolution.y);\n            \n\t\t\tfloat click_x_borncenter = x_min + width * click_ratio_screen_x;\n\t\t\tfloat click_y_borncenter = y_min + height * click_ratio_screen_y;\n\n            x_min = ZOOM_SPEED * x_min + (1.0 - ZOOM_SPEED) * (click_x_borncenter - (width * ZOOM_SPEED)/2.0);\n            x_max = ZOOM_SPEED * x_max + (1.0 - ZOOM_SPEED) * (click_x_borncenter + (width * ZOOM_SPEED)/2.0);\n            y_min = ZOOM_SPEED * y_min + (1.0 - ZOOM_SPEED) * (click_y_borncenter - (height * ZOOM_SPEED)/2.0);\n            y_max = ZOOM_SPEED * y_max + (1.0 - ZOOM_SPEED) * (click_y_borncenter + (height * ZOOM_SPEED)/2.0);\n            \n            float new_center_x = x_min + width/2.0;\n            float new_center_y = y_min + height/2.0;\n            \n            width *= ZOOM_SPEED;\n            height *= ZOOM_SPEED;\n                \n            x_min = new_center_x - width/2.0;\n            x_max = new_center_x + width/2.0;\n            y_min = new_center_y - height/2.0;\n            y_max = new_center_y + height/2.0;\n        }\n        \n        if (kZ > 0.5) {\n            x_min = OFFSET_X_MIN;\n            x_max = OFFSET_X_MAX;\n            y_min = OFFSET_Y_MIN;\n            y_max = OFFSET_Y_MAX;\n        }\n\n\t\tfragColor = vec4(x_min, x_max, y_min, y_max);\n    }\n    else\n    {\n     \tdiscard;   \n    }\n}","name":"Buf A","description":"","type":"buffer"}]}