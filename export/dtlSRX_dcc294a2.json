{"ver":"0.1","info":{"id":"dtlSRX","date":"1675134996","viewed":93,"name":"Wacky Voxel Thing","username":"Rugged","description":"Working on new version of voxel ray tracer and this cool little bug came out.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["voxels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat waveFunction(vec3 p){\n    p.xy += mod(iTime, 12.56);\n    return (.2 * (sin(p.x) * sin(p.y))) + (.05 * sin(2. * p.x) * sin(4. * p.y) + (1. * sin(.5 * p.x))) + cos(.5 * p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvc = 2. * (uv - .5);\n    \n    \n    vec4 col = vec4(0.);\n\n    \n    \n    \n    \n    \n    \n    \n    //get the mouse location for look direction unless mouse is not down\n    vec2 muv = iMouse.z > 0.0 ? iMouse.xy / iResolution.xy : vec2(0.5, 0.5);\n    \n        \n    \n    float screenRatio = iResolution.y / iResolution.x;\n    \n    //Setting up the ray directions and other information about the point and camera\n    //##############################################################################\n    \n    \n    //camera direction angles phi (xy plane) and theta (xz plane)\n    //float phi = radians(180.);\n    //float theta = radians(105.);\n    float phi = radians(360. * (muv.x - 1.));\n    float theta = radians(180. * (1. - muv.y));\n\n    //get the camera direction as the basis for the rotation (each ray direction is a rotation of the camera direciton vector)\n    //it is in quarternion form here so its a vec4 instead of a vec3\n    vec4 camD = vec4(0., cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n    \n    \n    \n    \n    \n    \n    vec3 p = vec3(-10., 0., 1.);\n\n    \n    \n    //rayD efficient\n    vec3 up = vec3(0., 0., 1.);\n    \n    vec3 U = normalize(cross(up, camD.yzw));\n    vec3 V = normalize(cross(camD.yzw, U));\n    \n    vec3 rayD = normalize(camD.yzw + uvc.x*U + uvc.y*V);\n    \n    \n    //###############################\n    \n    \n    \n  \n    \n    \n    col = texture(iChannel0, uv);\n    \n    \n    vec2 blockSize = floor(iResolution.xy / 6.);\n    \n    for(int i = 0; i < 100; i++){\n        vec3 p1 = p + (float(i) * rayD * 1.);\n        \n        \n        vec2 add = vec2(floor(mod(p1.z, 6.)) * blockSize.x, mod((floor(p1.z) * blockSize.x), iResolution.x) * blockSize.y);\n        \n        vec4 holdCol = texture(iChannel0, (p1.xy + (blockSize * p1.z)) / iResolution.xy);\n        \n        col += holdCol;\n        \n        if(length(holdCol) > .1){\n            col = holdCol;\n            break;\n        }\n        if(distance(floor(p1.xy + (blockSize * p1.z)), floor(fragCoord)) < 2.){\n            col = vec4(1., 0., 0., 1.);\n        }\n    }\n    \n    if(floor(mod(fragCoord.x, blockSize.x)) == 0. || floor(mod(fragCoord.y, blockSize.y)) == 0. ){\n        col += vec4(1.);\n    }\n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define cullLength 1.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0.);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if(iFrame == 0){\n        col = vec4(hash3(uv), hash3(uv.yx), hash3(vec2(hash3(uv), hash3(uv.yx))), hash3(vec2(hash3(uv.yx), hash3(uv))));\n        \n        //anything that has a magnitude less than cull length gets culled\n        col *= (((length(col) - cullLength) / abs(length(col) - cullLength)) + 1.) / 2.;\n    }\n    else{\n        col = texture(iChannel0, uv);\n    }\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float hash3(vec2 xy){\n    xy = mod(xy, .19);\n    float h = dot(xy.yyx, vec3(.013, 27.15, 2027.3));\n    h *= h;\n    h *= fract(h);\n    \n    return fract(h);\n}\n","name":"Common","description":"","type":"common"}]}