{"ver":"0.1","info":{"id":"ls3BWN","date":"1525263340","viewed":146,"name":"SoftNoise test","username":"paulbaron","description":"test noise 3d","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define X_NOISE_GEN 1619\n#define Y_NOISE_GEN 31337\n#define Z_NOISE_GEN 6971\n#define SEED_NOISE_GEN 6971\n\nint \tIntValueNoise3D(ivec3 position, int seed)\n{\n    // All constants are primes and must remain prime in order for this noise\n    // function to work correctly.\n    int n = (\n        X_NOISE_GEN    * position.x\n      + Y_NOISE_GEN    * position.y\n      + Z_NOISE_GEN    * position.z\n      + SEED_NOISE_GEN * seed)\n      & 0x7fffffff;\n\n    n = (n >> 13) ^ n;\n    int noise = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n    return noise;\n}\n\nfloat valueNoise3D(vec3 position, int seed)\n{\n    ivec3 \tiPosition = ivec3(floor(position));\n\n    float \tcurCellNoise = float(IntValueNoise3D(iPosition, seed)) / 1073741824.0 * 0.5f;\n\n    ivec3 \tiClosest = ivec3(position + normalize(fract(position) - vec3(0.5f)));\n    \n    float \tclosestNoise = float(IntValueNoise3D(iClosest, seed)) / 1073741824.0 * 0.5f;\n    \n    vec3 \tcurCellCenter = vec3(iPosition) + vec3(0.5f);\n    vec3 \tclosestCellCenter = vec3(iClosest) + vec3(0.5f);\n    \n    float \tdistToCur = distance(curCellCenter, position);\n    float \tdistToClosest = distance(closestCellCenter, position);\n    \n\n    float \tclosestInfluence;\n    float \tcurInfluence;\n\t\n    if (distToCur < distToClosest)\n    {\n\t    closestInfluence = distToCur / distToClosest;\n    \tcurInfluence = 1.0f - closestInfluence;\n    }\n    else\n    {\n\t    curInfluence = distToClosest / distToCur;\n    \tclosestInfluence = 1.0f - curInfluence;\n    }\n    \n\tfloat noise = curInfluence * curCellNoise + closestInfluence * closestNoise;\n\n    return noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(valueNoise3D(vec3(uv * 20.0f + 5.0f, iTime * 1.0f), 156846), 0, 0,1.0);\n}","name":"Image","description":"","type":"image"}]}