{"ver":"0.1","info":{"id":"wtsGR7","date":"1556170000","viewed":114,"name":"Convection-Diffusion Demo","username":"Turtle1331","description":"Interactive demonstration of advection and diffusion.  Click and drag the mouse to add color.  Press number key 1 to reset and 2 through 7 to toggle different vector fields.  The lowest selected number takes priority.  ","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["diffusion","advection","reaction","convection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawkey(int key, vec2 uv) {\n    return texture(iChannel2, (vec2(float(key), 12.) + clamp(uv, vec2(0.), vec2(1.))) / 16.).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    int key = getkey(iChannel1);\n    if (key > -1) {\n    \tfragColor += vec4(drawkey(key, (fragCoord / iResolution.x - vec2(15. / 16., 0.)) * 16.));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int getkey(sampler2D channel) {\n    for (int i = 2; i <= 7; i++) {\n        if (texture(channel, vec2((48.5 + float(i)) / 256., 2.5 / 3.)).r > 0.) return i;\n    }\n    return -1;\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define V(x,y) (getvel(co + o * vec2(x, y)) * mix(40., 20., step(1000., iResolution.r)))\n#define D(x,y) getden(uv + e * vec2(x, y))\n\nvec2 getvel(vec2 co) {\n    int key = getkey(iChannel1);\n    if (key == 2) return cos(iTime * .25 + vec2(0., asin(1.)));  // Linear\n    if (key == 3) return vec2(co.y, -co.x) * 1.25;  // Circle\n    if (key == 4) return normalize(vec2(co.y, -co.x) - co * 0.25) * .75;  // Spiral\n    if (key == 5) return vec2(1., sin(co.x * 15.)) * .75;  // Wave\n    if (key == 6) return normalize(vec2(cos(co.x * 40.) + 2., sin(co.y * 40.) + 2.)) * .75;  // Well plate moving\n    if (key == 7) return vec2(sin(co.x * 15.) + sin(co.y * 15.), cos(co.x * 15.) - sin(co.y * 15.)) * .25 * sign(sin(iTime) * 1.5);  // Well plate oscillating\n\treturn vec2(0.);\n}\n\nvec3 getden(vec2 uv) {\n    return mix(texture(iChannel2, fract(uv)).rgb, texture(iChannel0, fract(uv)).rgb, step(1000., iResolution.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 co = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 e = 1. / iResolution.xy;\n    vec2 o = vec2(1. / iResolution.y);\n    vec3 i = vec3(1., 0., -1.);\n    \n    \n    vec3 s = getden(uv);\n    \n    s -= 0.5 * iTimeDelta * (D(1, 0) * V(1, 0).x + D(0, 1) * V(0, 1).y - D(-1, 0) * V(-1, 0).x - D(0, -1) * V(0, -1).y);\n    \n    fragColor.rgb = vec3(s);\n    \n    if (iMouse.z > 0. && distance(iMouse.xy, fragCoord) < iResolution.x * 0.02) {\n        fragColor.rgb = .5 + .5 * cos(iTime * mix(1., .25, step(1000., iResolution.r)) + vec3(0., 8., 4.) * asin(1.) / 3.);\n    }\n    \n    if (iFrame < 1 || texture(iChannel1, vec2(49.5 / 256., 0.5 / 3.)).r > 0.) fragColor.rgb = vec3(.5 * smoothstep(0.2, 0.199, length(co)));\n    fragColor = clamp(fragColor, vec4(0.), vec4(1.));\n    fragColor.a = 1.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 e = 1. / iResolution.xy;\n    \n    vec4 col = vec4(0.);\n    col += texture(iChannel0, uv + e * vec2(0., 0.)) * 4.;\n    col += texture(iChannel0, uv + e * vec2(1., 0.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(0., 1.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(-1., 0.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(0., -1.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(1., 1.));\n    col += texture(iChannel0, uv + e * vec2(1., -1.));\n    col += texture(iChannel0, uv + e * vec2(-1., 1.));\n    col += texture(iChannel0, uv + e * vec2(-1., -1.));\n    col /= 16.;\n   \t\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define V(x,y) (getvel(co + o * vec2(x, y)) * mix(40., 20., step(1000., iResolution.r)))\n#define D(x,y) getden(uv + e * vec2(x, y))\n\nvec2 getvel(vec2 co) {\n    int key = getkey(iChannel1);\n    if (key == 2) return cos(iTime * .25 + vec2(0., asin(1.)));  // Linear\n    if (key == 3) return vec2(co.y, -co.x) * 1.25;  // Circle\n    if (key == 4) return normalize(vec2(co.y, -co.x) - co * 0.25) * .75;  // Spiral\n    if (key == 5) return vec2(1., sin(co.x * 15.)) * .75;  // Wave\n    if (key == 6) return normalize(vec2(cos(co.x * 40.) + 2., sin(co.y * 40.) + 2.)) * .75;  // Well plate moving\n    if (key == 7) return vec2(sin(co.x * 15.) + sin(co.y * 15.), cos(co.x * 15.) - sin(co.y * 15.)) * .25 * sign(sin(iTime) * 1.5);  // Well plate oscillating\n\treturn vec2(0.);\n}\n\nvec3 getden(vec2 uv) {\n    return texture(iChannel0, fract(uv)).rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 co = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 e = 1. / iResolution.xy;\n    vec2 o = vec2(1. / iResolution.y);\n    vec3 i = vec3(1., 0., -1.);\n    \n    \n    vec3 s = getden(uv);\n    \n    s -= 0.5 * iTimeDelta * (D(1, 0) * V(1, 0).x + D(0, 1) * V(0, 1).y - D(-1, 0) * V(-1, 0).x - D(0, -1) * V(0, -1).y);\n    \n    fragColor.rgb = vec3(s);\n    \n    if (iMouse.z > 0. && distance(iMouse.xy, fragCoord) < iResolution.x * 0.02) {\n        fragColor.rgb = .5 + .5 * cos(iTime * mix(1., .25, step(1000., iResolution.r)) + vec3(0., 8., 4.) * asin(1.) / 3.);\n    }\n    \n    if (iFrame < 1 || texture(iChannel1, vec2(49.5 / 256., 0.5 / 3.)).r > 0.) fragColor.rgb = vec3(.5 * smoothstep(0.2, 0.199, length(co)));\n    fragColor = clamp(fragColor, vec4(0.), vec4(1.));\n    fragColor.a = 1.;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 e = 1. / iResolution.xy;\n    \n    vec4 col = vec4(0.);\n    col += texture(iChannel0, uv + e * vec2(0., 0.)) * 4.;\n    col += texture(iChannel0, uv + e * vec2(1., 0.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(0., 1.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(-1., 0.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(0., -1.)) * 2.;\n    col += texture(iChannel0, uv + e * vec2(1., 1.));\n    col += texture(iChannel0, uv + e * vec2(1., -1.));\n    col += texture(iChannel0, uv + e * vec2(-1., 1.));\n    col += texture(iChannel0, uv + e * vec2(-1., -1.));\n    col /= 16.;\n   \t\n    fragColor = col;\n}","name":"Buffer D","description":"","type":"buffer"}]}