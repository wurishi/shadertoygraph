{"ver":"0.1","info":{"id":"7lKyDG","date":"1663100847","viewed":68,"name":"Mandelbrot Set - 3D","username":"sdevkota007","description":"mandelbrot set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mandelBrot(vec2 C) \n{\n  vec2 Z = vec2(0.0f,0.0f);\n  for (int i=0; i<256; i++) {\n      Z = vec2( (Z.x * Z.x) - (Z.y * Z.y) + C.x , 2.0f* Z.x * Z.y + C.y );\n      float magnitude = (Z.x * Z.x) + (Z.y * Z.y);\n      if (magnitude > 4.0f) {\n          // pick a color\n          return float(i)/255.0f;\n      }\n  }\n  return 1.0f;\n}\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n  vec3 a = vec3(0.5, 0.5, 0.5);   \n  vec3 b = vec3(0.5, 0.5, 0.5);\n  vec3 c = vec3(1.0, 1.0, 1.0);\n  vec3 d = vec3(0.50, 0.20, 0.25);\n  return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord+vec2(0.5))/iResolution.y;\n    // map pixel coordinates to [-1, 1]\n    vec2 c = (uv - vec2(0.5)) * 2.0- vec2(1.0, 0.0);\n\n    float n = mandelBrot(c);\n    \n    vec3 color = palette(n);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}