{"ver":"0.1","info":{"id":"clKyDt","date":"1700803267","viewed":130,"name":"colorful spiral","username":"nayk","description":"space rotate spiral galaxy star","likes":9,"published":1,"flags":1,"usePreview":0,"tags":["spiral","rotate","star","space","galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn  https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/DlVcW3 */\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define PI 3.14159\n\nvec2 polar(vec2 uv){ return vec2(length(uv), atan(uv.y,uv.x)); }\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));/// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\nvec2 rotate2D(vec2 p, float tf){\n    float s = sin(tf);\n    float sk = cos(tf / iTime);\n    return mat2(sk, -s, s, sk) * p;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\nvec2 p = (fragCoord.xy * 2.0 - iResolution.xy);\n    p /= min(iResolution.x, iResolution.y);\n      \n    float fft = (iTime*0.11)+cos(iTime);\n     fft+= cos(iTime);\n    float wave = (iTime*0.1)+cos(iTime);\n    wave*=cos(iTime);\n    vec3 rColor = vec3(0.7*fft, 0.1*fft, 0.8*fft);\n    vec3 gColor = vec3(0.0, 1.8*wave, 1.3*fft);\n    vec3 bColor = vec3(0.0, 1.3*fft, 1.8/fft);\n    vec3 yColor = vec3(0.7*fft, 1.8*wave, 0.3);\n    float a;\n    float b;\n    float c;\n    float d;\n    float e;\n    float f;\n    float g;\n    float h;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    p.xy*=ma;\n    \ndir.xy*=ma;\n\n    p = rotate2D(p, iTime);\n  \n    for(float i = 0.0; i < 32.0; i++){\n        float factor = (sin(iTime) * 0.33 + 0.33) + 1.33;\n        i += factor;\n        float tf = i / 3.0;\n        a = sin(p.y * 3.33 - iTime * 6.66) / tf;\n        e = 0.01 / abs(p.x + a);\n        b = sin(p.y * 3.33 - iTime * 3.33) / tf;\n        f = 0.01 / abs(p.x + b);\n        c = sin(p.y * 6.66 - iTime * 8.88) / tf;\n        g = 0.01 / abs(p.x + c);\n        d = sin(p.y * 1.11 - iTime * 8.22) / tf;\n        h = 0.01 / abs(p.x + d);\n        yColor += 0.33 - smoothstep(0.33, 0.10, abs(wave - p.y / tf) );\n    }\n    vec3 destColor = rColor * e + gColor * f + bColor * g + yColor * h;\n\t//mouse rotation\n\tfloat a1=.5+iMouse.x/iResolution.x*2.;\n\tfloat a2=.8+iMouse.y/iResolution.y*2.;\n\tmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tmat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\tfrom.xz*=rot1;\n\tfrom.xy*=rot2;\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n        fragColor*= vec4(destColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}