{"ver":"0.1","info":{"id":"sltBz8","date":"1662663783","viewed":132,"name":"UVBSP","username":"smarchevsky","description":"I created a SFML-baseed BSP generator. Feel free to test it.\nhttps://github.com/smarchevsky/UVBSP","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["binary","tree","bsp","split","uvbsp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////// START_UVBSP_GENERATED_SHADER ////////\n\n#define IVEC4 ivec4\n#define VEC2 vec2\n#define REINTERPRET_TO_FLOAT(x) intBitsToFloat(x)\n#define REINTERPRET_TO_UINT(x) floatBitsToInt(x)\n\n// pos bits, dir bits, left, right indices: \n// node(less than 0) or color(greater equal 0)\nIVEC4 nodes[79] = IVEC4[](\nIVEC4(1057131744, 1092098225, -1, -2),\nIVEC4(1059735043, -1046574193, -4, -6),\nIVEC4(1051973638, 1122085395, -3, -7),\nIVEC4(-1105626904, -1081028899, -58, -9),\nIVEC4(1070595476, 1058828743, -53, -5),\nIVEC4(-1056933270, -1113336067, -52, -11),\nIVEC4(1061692020, -1054056308, -14, -65),\nIVEC4(1050351897, 1108759917, -8, -64),\nIVEC4(1055120947, 1075617327, 16, -67),\nIVEC4(1072215282, 1041626444, -10, -16),\nIVEC4(1058280405, 1066502765, -19, 21),\nIVEC4(-1088185246, -1104276358, -12, -13),\nIVEC4(1050241174, -1086565778, -20, 25),\nIVEC4(-1092871850, -1109945285, -18, -66),\nIVEC4(1057735830, -1082810600, -15, 28),\nIVEC4(1059806230, -1073142638, 30, 31),\nIVEC4(1061078788, 1054796135, -17, 32),\nIVEC4(1057804885, 1066089777, 34, 35),\nIVEC4(1074312280, 1032358024, 37, 36),\nIVEC4(-1052657990, -1123619480, -25, -23),\nIVEC4(1085472582, 1034357799, -27, -21),\nIVEC4(1068790312, 1054968031, -22, -40),\nIVEC4(-1086438588, -1097520551, -42, -73),\nIVEC4(-1097641781, -1089750622, -24, -41),\nIVEC4(1067038141, 1056197033, -44, -77),\nIVEC4(1070448789, 1052375970, -29, -26),\nIVEC4(-1092170047, -1090269869, 52, -48),\nIVEC4(-1074775628, -1103681648, -31, -28),\nIVEC4(1069641366, 1055797492, 57, -46),\nIVEC4(1058377650, 1079905633, -30, -39),\nIVEC4(-1091425885, -1089086818, -34, 60),\nIVEC4(1050118250, -1072343728, -32, -50),\nIVEC4(1072101386, 1054003971, -35, -33),\nIVEC4(1258825065, 864026624, 66, 67),\nIVEC4(-1103940422, -1084227618, -36, 69),\nIVEC4(1076732620, 1049050845, 71, -37),\nIVEC4(-1105865936, -1082130432, 72, -38),\nIVEC4(-1058670336, -1113798410, 75, 74),\nIVEC4(-1083144864, -1093258242, 76, 77),\nIVEC4(1041540795, -1071445998, -51, 79),\nIVEC4(1067853324, 1055745213, -72, -74),\nIVEC4(-1096579038, -1090852359, -71, 82),\nIVEC4(-1089327986, -1095533627, -43, 85),\nIVEC4(1069531878, 1054221560, 87, 86),\nIVEC4(-1093772028, -1090989456, -45, 89),\nIVEC4(1068508019, 1053908036, 90, 91),\nIVEC4(1067092524, 1059713811, -78, -47),\nIVEC4(-1075302544, -1103697492, 95, 94),\nIVEC4(1074328142, 1048166795, 96, -49),\nIVEC4(-1086681334, -1094713337, 98, 99),\nIVEC4(1065517487, 1070325658, 100, -57),\nIVEC4(1040716528, -1071441706, 102, 103),\nIVEC4(-1081951654, -1091778978, 105, 104),\nIVEC4(1072954486, 1057814806, -60, -54),\nIVEC4(1051156680, -1063694981, 108, -55),\nIVEC4(1125579499, 999797771, -59, -56),\nIVEC4(1070188985, 1060277758, 113, 112),\nIVEC4(1062235636, 1079764383, 115, 114),\nIVEC4(1069690616, 1061180646, 117, -70),\nIVEC4(1048029014, -1069460139, 118, 119),\nIVEC4(1070868410, 1060478480, -62, -61),\nIVEC4(1041384136, -1072836572, 123, 122),\nIVEC4(1047791270, -1069547508, -63, 125),\nIVEC4(1071706916, 1059745108, 126, 127),\nIVEC4(1069343028, 1061280132, 128, -68),\nIVEC4(1046166344, -1080439448, 131, 130),\nIVEC4(-1080595199, -1118591565, 132, 133),\nIVEC4(1056502040, 1070341015, 135, 134),\nIVEC4(1049937920, 1104045667, -69, 137),\nIVEC4(1054582606, 1075559347, 138, 139),\nIVEC4(-1100874056, -1081705692, 140, 141),\nIVEC4(-1046025073, -1131411183, 142, 143),\nIVEC4(-1055891676, -1122268323, 144, -75),\nIVEC4(-1093174458, -1094958691, 147, 146),\nIVEC4(-1088422283, -1103288948, 149, 148),\nIVEC4(1059771501, -1032845263, -76, 151),\nIVEC4(-1078925466, -1103404625, 153, 152),\nIVEC4(1069255705, 1051931442, 154, 155),\nIVEC4(1069303706, 1056303148, 157, 156)\n);\n\nint traverseTree(VEC2 uv){\n  int currentIndex = 0;\n  for(int iteration = 0; iteration < 12; ++iteration) {\n    VEC2 pos = VEC2(REINTERPRET_TO_FLOAT(nodes[currentIndex].x), 0.0);\n    VEC2 tangent = VEC2(REINTERPRET_TO_FLOAT(nodes[currentIndex].y), 1.0);\n    bool isLeftPixel = dot(pos - uv, tangent) < 0.0;\n    int indexOfProperSide = isLeftPixel ? nodes[currentIndex].z : nodes[currentIndex].w;\n\n    if(indexOfProperSide < 0) {\n      currentIndex = -indexOfProperSide;\n    } else {\n      return indexOfProperSide;\n    }\n  }\n  return 0;\n}\n#undef IVEC4\n#undef VEC2\n#undef REINTERPRET_TO_FLOAT\n#undef REINTERPRET_TO_UINT\n/////// END_UVBSP_GENERATED_SHADER ////////\n\n\n\nvec4 fastSin4(vec4 x) { \n    x = (fract(x) - 0.5) * 2.; \n    return (4. * x) * (1. - abs(x)); \n}\n\n\nvec3 rainbow(float val){\n    vec4 result = -fastSin4(vec4(val, val, val, val * 3.) + vec4(0., 0.33333, 0.66666, 0)) * 0.5 + 0.5;\n    return result.rgb * (result.a * .1 + 1.);\n}\n\nvec2 AApattern[] = vec2[](vec2(0.,0.), vec2(0.,1.), vec2(1.,1.), vec2(1.,0.));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    fragColor = vec4(0.);\n    vec2 uv = fragCoord / iResolution.xy;\n    float param = uv.x;\n    //param = iMouse.x / iResolution.x;\n\n    uv.y = 1.0 - uv.y;   \n    float AR = sqrt(iResolution.x / iResolution.y);\n    \n    uv = uv * 2.0 - 1.0;\n    uv *= max(iResolution.x, iResolution.y) / min(iResolution.x, iResolution.y);\n    uv *= vec2(AR, 1. / AR) * 0.7;\n    uv = uv * 0.5 + 0.5;\n\n    //fragColor.rgb = rainbow(param) ; return;\n\n    vec3 col = rainbow(13. / 41.0 * float(traverseTree(uv)) + 0.6);\n    fragColor += vec4(col, 1.0);\n    \n\n}","name":"Image","description":"","type":"image"}]}