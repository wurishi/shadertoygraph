{"ver":"0.1","info":{"id":"tttcWn","date":"1608903595","viewed":52,"name":"agrapher","username":"nir","description":"A simple grapher. Set equation in the equation() function.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math","graph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n    A simple shader to plot equations.\n*/\n\n//\n// Set plot scale and offset from origin:\n//\nfloat scale = 4.;\nvec2 offset = vec2(.0);\n\n\n//\n// Set equation to plot:\n//\nfloat equation(float x, float y) {\n\n    return pow(y - .0, 2.) + pow(x - .0, 2.) - 1.;\n}\n\n\n#define pi 3.1415926\n\n#define empty vec4(0.)\n\n#define white vec4(1.)\n#define gray vec4(vec3(.5), 1.)\n#define black vec4(vec3(.0), 1.)\n\n#define green vec4(0., 1., 0., 1.)\n#define blue vec4(0., 0., 1., 1.)\n#define red vec4(1., 0., 0., 1.)\n\n\nvec4 mixa(vec4 c0, vec4 c1) {\n\n    return mix(c0, c1, c1.a);\n}\n\n\nfloat s(float v0, float d, float x) {\n\n    return smoothstep(v0-d/2., v0+d/2., x);\n}\n\n\nfloat line(float v0, float d, float x) {\n\n    return s(v0-d, d, x) * s(v0+d, -d, x);\n}\n\n\nfloat sat(float v0) {\n    \n    return clamp(v0, 0., 1.);\n}\n\n\nvec2 c2p(vec2 uv) {\n\n    return vec2(atan(uv.x, uv.y), length(uv));\n}\n\n\n\nvec4 grid(vec2 uv) {\n    \n    float width = 0.001 * scale;\n    \n    float c0 = line(0., width * 2., uv.x);\n    float c1 = line(0., width * 2., uv.y);\n    \n    vec4 cc = mix(empty, gray, sat(c0 + c1) / 5.);\n  \n    uv = uv + 0.5;\n    uv = fract(uv);\n    \n    c0 = line(0.5, width, uv.x);\n    c1 = line(0.5, width, uv.y);\n    \n    cc = mix(cc, gray, sat(c0 + c1) / 5.);\n \n    return cc;\n}\n\n\nvec4 plot(vec2 uv, vec4 color, float width) {   \n    \n    width *= scale;\n    \n    float d0 = width / 2.;\n    float d1 = d0 / 1.4;\n    \n    float blur = 0.05;\n\n    float s0 = smoothstep(-blur, +blur, equation(uv.x + d0, uv.y + 0.) * scale);\n    float s1 = smoothstep(-blur, +blur, equation(uv.x - d0, uv.y - 0.) * scale);\n    float c0 = abs(s0 - s1);\n    \n    float s2 = smoothstep(-blur, +blur, equation(uv.x + 0., uv.y + d0) * scale);\n    float s3 = smoothstep(-blur, +blur, equation(uv.x - 0., uv.y - d0) * scale);\n    float c1 = abs(s2 - s3);\n    \n    float s4 = smoothstep(-blur, +blur, equation(uv.x + d1, uv.y + d1) * scale);\n    float s5 = smoothstep(-blur, +blur, equation(uv.x - d1, uv.y - d1) * scale);\n    float c2 = abs(s4 - s5);\n    \n    float s6 = smoothstep(-blur, +blur, equation(uv.x - d1, uv.y + d1) * scale);\n    float s7 = smoothstep(-blur, +blur, equation(uv.x + d1, uv.y - d1) * scale);\n    float c3 = abs(s6 - s7);\n    \n    float cc = max(max(c0, c1), max(c2, c3));\n    \n    color.a *= cc;\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv = uv * scale + offset;\n    \n    vec4 cc = white;\n    \n    cc = mixa(cc, plot(uv, red, 0.01));\n    cc = mixa(cc, grid(uv));\n    \n    \n    fragColor = cc;\n}\n","name":"Image","description":"","type":"image"}]}