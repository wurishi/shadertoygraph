{"ver":"0.1","info":{"id":"XtcSDf","date":"1481754642","viewed":4485,"name":"303","username":"mhorga","description":"testing depth","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nstruct Ray { \n\tvec3 origin;\n\tvec3 dir;\n};\n    \nstruct Sphere { \n\tvec3 center;\n\tfloat radius;\n};\n    \nfloat distToSphere(in Ray r, in Sphere s) {\n\tfloat d = distance(r.origin, s.center);\n    return d - s.radius;\n}\n\nfloat distToScene(in Ray r) {\n    Ray repeatRay = r;\n    repeatRay.origin = mod(r.origin, 2.0);\n    Sphere s1 = Sphere(vec3(1.), 0.5);\n    return distToSphere(repeatRay, s1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    vec3 camPos = vec3(sin(iTime) + 1.0, cos(iTime) + 1.0, iTime);\n\tRay ray = Ray(camPos, normalize(vec3(uv, 1.)));\n\tvec3 col = vec3(0.);\n    for (int i=0; i<100; i++) {\n        float dist = distToScene(ray); \n    \tif (dist < 0.001) {\n            col = vec3(1.);\n            break;\n        }\n        ray.origin += ray.dir * dist;\n    }\n    vec3 posRelativeToCamera = ray.origin - camPos;\n\tfragColor.rgb = col * abs(posRelativeToCamera) / 10.0;\n}\n","name":"Image","description":"","type":"image"}]}