{"ver":"0.1","info":{"id":"mlffzn","date":"1692712886","viewed":56,"name":"Hyperspace transfer","username":"Tribal_Talker","description":"Experimental smoothed noise \"warp drive\" effect.\nFirst public ShaderToy code.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["experimental"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAll code by Tribal_Talker except where noted.\nAugust 2023\n*/\n\n#define TAU 6.28318530718 // 2 * PI\n\n// ---------------------------------------------------- //\n// Dave Hoskins: https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n// ---------------------------------------------------- //\n\n\n// ---------------------------------------------------- //\n// Approximate HSV to RGB using clamped cosine waves.\n// Normalised inputs: hue 0..1, sat 0..1, val 0..1\n// Returns normalised RGB ready for display.\nvec3 hsv2rgb(float hue, float sat, float val)\n{\n    vec3 rgb = clamp(vec3(0.5) + cos(vec3(hue*TAU, (hue+0.66667)*TAU, (hue+0.33333)*TAU)), 0.0, 1.0);\n    return val * mix(vec3(1.0), rgb, sat);\n}\n\n// Polar transformation of coords for general coords.\n// Angle zero is at 3 o'clock, angles go counter-clockwise.\nvec2 toPolarV2(vec2 uv)\n{\n    return vec2( (0.5 + atan(-uv.y, -uv.x) / TAU), length(uv) );\n}\n\n// Grabs one value per user specified block of coordinates.\n// Generates a blocky noise texture.\n// Wraps around so that there are only a \"tile_count\" number\n// of values possible to generate in the x-direction, so that\n// textures generated wrap seamlessly in x.\nfloat chunky_noise(vec2 p, vec2 ofs, float tile_count)\n{\n    // coordinate wrapping inside a [tile_count * tile_count] square\n    p.x = fract(p.x + ofs.x/tile_count);\n    p.y = fract(p.y + ofs.y/tile_count);\n\n    vec2 block = (p * tile_count);\n    return hash12(block - fract(block));\n}\n\n// Generates a 2x2 set of chunky noise values and smooths them out.\n// Basic LERPed value noise.\nfloat smoothed_chunks(vec2 p, float tile_count)\n{\n    vec2 fine = fract(p * tile_count);\n    vec3 offset = vec3(1.0, 1.0, 0.0);\n\n    float t1 = chunky_noise(p, offset.zz, tile_count);\n    float t2 = chunky_noise(p, offset.xz, tile_count);\n    float g1 = mix(t1, t2, fine.x);\n    \n    float b1 = chunky_noise(p, offset.zy, tile_count);\n    float b2 = chunky_noise(p, offset.xy, tile_count);\n    float g2 = mix(b1, b2, fine.x);\n\n    return mix(g1, g2, fine.y);\n}\n\n// Generates 3 layers of \"fractally scaled\" noise for a better look.\nfloat layered_noise(vec2 p, float tile_count)\n{\n    float layer1 = smoothed_chunks(p, tile_count);\n\n    p += vec2(0.5/tile_count);\n    tile_count *= 2.0;\n    float layer2 = smoothed_chunks(p, tile_count);\n\n    p += vec2(0.5/tile_count);\n    tile_count *= 2.0;\n    float layer3 = smoothed_chunks(p, tile_count);\n    \n    return 0.57*layer1 + 0.29*layer2 + 0.14*layer3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vec2 uv = fragCoord.xy/min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / max(iResolution.x, iResolution.y);\n    float t = iTime/10.0;\n    \n    // polar coords\n    // vec2 p1 = uv;\n    vec2 p1 = toPolarV2(uv);\n    vec2 p2 = p1;\n\n    // radial coord has 3D-like perspective\n    p1.y = 0.0025 / p1.y;\n    p2.y = 0.01 / p2.y;\n    p2.y += t;\n\n    // overkill WIP for background colour\n    // float h = smoothstep(0.125, 0.9, layered_noise(p2, 25.0));\n    float h = 0.5*sin(TAU*fract(t*0.5)) + 0.5*smoothstep(0.125, 0.9, layered_noise(p2, 25.0));\n    float s = 0.5*smoothstep(0.05, 0.5, layered_noise(p2, 25.0));\n    float v = 0.5 + 0.25 * smoothstep(0.24, 0.25, layered_noise(p2, 36.0));\n    vec3 col = 0.1 + 0.75 * hsv2rgb(h, s, v);\n\n    // \"cloud lines\" - mixes in peak values of a monochrome noise field\n    float lines = layered_noise(vec2(p1.x, p1.y+t), 31.0);\n    col = max(col, mix(vec3(lines), col, p1.y));\n\n    fragColor = vec4(col, 1.0);;\n}\n","name":"Image","description":"","type":"image"}]}