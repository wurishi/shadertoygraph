{"ver":"0.1","info":{"id":"3djGWd","date":"1550323654","viewed":441,"name":"Tileable fBm with Noise Mipmap","username":"gam0022","description":"I generated a tilable fBm texture by superimposing textures of noise with different MipMap levels.\n\nJust as it is sampling the texture, it took advantage of the property of the bilinear filtering and tiled in Value Noise in the graphics API side.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 st, float lod) {\n   return textureLod(iChannel0, st, lod).r;\n}\n\n#define OCTAVES 5\nfloat fbm (vec2 st) {\n    float value = 0.0;\n    float amplitude = .5;\n    \n\tfor (int i = 0; i < OCTAVES; i++) {\n    \tvalue += amplitude * random(st, float(OCTAVES - i -1));\n       \tamplitude *= .5;\n   }\n   return value;\n}\n\n#define TILES 2.0 // Use 1.0 for normal tiling across whole texture.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n \tvec2 uv = fragCoord / iResolution.xy;\n   \tuv *= TILES;\n\n   \tvec3 col = vec3(fbm(uv));\n    \n    // Show Tiling by https://www.shadertoy.com/view/4dlGW2\n    if (mod(iTime - 2.0, 4.0) < 2.0)\n\t{\n       \tvec2 pixel = TILES / iResolution.xy;\n\t\tvec2 first = step(pixel, uv);\n\t\tuv  = step(fract(uv), pixel);\t// Only add one line of pixels per tile.\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y);\n\t}\n\n   \tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}