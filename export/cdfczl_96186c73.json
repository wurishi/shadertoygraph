{"ver":"0.1","info":{"id":"cdfczl","date":"1687091395","viewed":123,"name":"Tile Pattern","username":"propagant","description":"Simple deterministic tile pattern. Inspired by https://www.shadertoy.com/view/mdBSRt\n\nPlayaround with constants. Comment 'SWAY' definition for stable pattern!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["pattern","tiles","tilefractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TILING = 7.;\nconst float TILE_FRACT = 2.0;\nconst float TILE_VAR = 12.;\nconst float ROTATION_SPEED = .1;\nconst vec3 COLOR = vec3(0.4,0.2,0.7);\n\nconst float ZOOM_FACTOR = 1.0;\nconst float SWAY_SPEED = 0.25;\n#define SWAY\n\n#define Rot(a) mat2(sin(a),-cos(a),cos(a),sin(a))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\n\tvec2 uv = ( fragCoord.xy - 0.5 * iResolution.xy )/iResolution.y;\n\t\n\tuv*=Rot(iTime*ROTATION_SPEED);\n\t\n\tfloat a = 0.;\n\t#ifdef SWAY\n\t\ta = cos(uv.x+(iTime+10.)*SWAY_SPEED)*ZOOM_FACTOR;\n\t\tuv = mix(uv,ceil(uv)*1.e-5, a);\n\t#endif\n\t\n\tvec2 ouv = uv;\n\t\n\tuv = fract(uv*TILE_FRACT)/2.;\n\tfloat v = sin(iTime-length(floor(ouv*TILING))*TILE_VAR);\n\tfloat tile = step(uv.x,v)*step(uv.y,0.5);\n\t\n\tfragColor = vec4(vec3(tile*(1.-length(uv-.5)*2.))*COLOR*(1.-clamp(a,0.,1.)), 1.0 );\n\n}","name":"Image","description":"","type":"image"}]}