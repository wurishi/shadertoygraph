{"ver":"0.1","info":{"id":"NdycRW","date":"1654468925","viewed":188,"name":"Arc from three points","username":"mrboggieman","description":"Render an arc from three points. Drag the mouse to control the middle point","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["arc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pointRadius = 4.0;\n\nvec2 project(in vec2 a, in vec2 b) {\n    return b * (dot(a, b) / dot(b, b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0 / max(iResolution.x, iResolution.y);\n    vec2 fragPos = fragCoord * scale;\n\n    //arc from three points\n    vec2 a = vec2(0.1);\n    vec2 b = (length(iMouse.xy) > 0.0 ? iMouse.xy * scale : vec2(0.2, 0.3));\n    vec2 c = (vec2(0.7, 0.2) + vec2(sin(iTime), cos(iTime)) * 0.1);\n    \n    //based on https://mathopenref.com/arcradius.html\n    vec2 dir = c - a;\n    vec2 mid = mix(a, c, 0.5);\n    float width = length(dir);\n    \n    vec2 normal = normalize(b - (project(b - a, dir) + a));\n    \n    //could force the arc to be one way by basing the normal on the direction of the points\n    //vec2 normal = normalize(vec2(-dir.y, dir.x));\n    \n    float height = length(mid - b);\n    \n    float radius = max(width/2.0, height/2.0 + (width*width) / (8.0*height));\n    vec2 position = mid - (normal * (radius - height));\n   \n    //re-align b to match the arc top\n    b = mid + normal * height;\n    \n    //draw points\n    float distToPoint = min(min(length(fragPos - a), length(fragPos - b)), length(fragPos - c));\n    float pointSize = pointRadius * scale;\n    \n    if (distToPoint < pointSize) {\n        fragColor = vec4(vec3(0.0, 1.0, 1.0) * smoothstep(pointSize, pointSize - scale, distToPoint), 1.0);\n        return;\n    }\n    \n    //draw arc\n    \n    // - test point is on the correct side of the line\n    if (determinant(mat2(fragPos - a, vec2(-normal.y, normal.x))) < 0.0) {\n        fragColor = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    // - test the signed distance to the arc circle\n    float dist = length(fragPos - position);\n    fragColor = vec4(vec3(0.0, 0.0, 1.0) * smoothstep(radius, radius - scale, dist), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}