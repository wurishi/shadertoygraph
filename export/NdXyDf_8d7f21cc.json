{"ver":"0.1","info":{"id":"NdXyDf","date":"1642789139","viewed":300,"name":"Parasitic Barnacle","username":"panna_pudi","description":"Based on this article https://gorillasun.de/blog/Making-of-Parasite","likes":21,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","repetition","2022"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Parasitic Barnacle by Pudi\n// Email: k.a.komissar@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Thanks to Flopine, provod, YX, NuSan, slerpy, wwrighter, Shane, z0rg\n// BigWings, FabriceNeyret, iq, and Blackle for sharing their knowledge\n\nvec3 frame(vec2 uv) {\n    float shadow = texture(iChannel0, uv + vec2(-0.008, 0.014)).w;\n    vec4 frame = texture(iChannel0, uv);\n\n    vec3 col = vec3(241, 213, 201) / 255.;\n    col = mix(col, vec3(68, 44, 60) / 255., AAstep(0.9, shadow));\n    col = mix(col, frame.rgb, AAstep(0., frame.w));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 col = frame(uv);\n    \n    col = pow(col, vec3(1.4545));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = acos(-1.);\nconst float TAU = 2. * PI;\nconst float T_MAX = 35.;\n\n#define AAstep(x0, x) clamp((x - x0) / (2. * 2. / iResolution.y), 0., 1.)\n\nfloat rand(float n){\n    return fract(sin(n) * 43758.5453123);\n}\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(float p){\n\tfloat fl = floor(p);\n    float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n);\n    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b),        rand(b + d.yx), f.x),\n               mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 _min(vec2 a, vec2 b) {\n    if (a.x < b.x) {\n        return a;\n    }\n    return b;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\n// gaz gaz gaz gaz\nvec2 polarMod(vec2 p, float n) {\n    float a = mod(atan(p.y, p.x), TAU / n) - PI / n;\n    return vec2(sin(a), cos(a)) * length(p);\n}\n\nfloat sd_sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sd_disk(vec3 p, float r, float h) {\n    vec2 q = vec2(length(p.xz), p.y);\n    q = abs(q) - vec2(r, h);\n    return length(max(q, 0.)) + min(0., max(q.x, q.y));\n}\n\nfloat sd_segment(vec3 p, vec3 a, vec3 b) {\n    vec3 pa = p - a, ba = b - a;\n    float k = dot(pa, ba) / dot(ba, ba);\n    return distance(p, mix(a, b, clamp(k, 0., 1.)));\n}\n\nvec2 chord(vec3 p, float c, float r, float f) {\n    vec3 q = p;\n    q.xz = polarMod(q.xz, 3.);\n    vec2 d = vec2(sd_sphere(q - vec3(0., 0., r * f), c / 10. * f), 1.);\n\n    q = p;\n    q.xz *= rot(PI / 3.);\n    q.xz = polarMod(q.xz, 3.);\n    q.yz -= vec2(0.0, r / 2. * f);\n    d = _min(d, vec2(length(q.yz) - 0.05 * (f + 0.15), 1));\n\n    return d;\n}\n\nvec2 primitive(vec3 p, float c, float f, float t) {\n    p.xz *= rot(PI + t);\n    vec2 d = vec2(sd_sphere(p, c / 3. * f), 0.);\n    d = _min(d, chord(p, c, 1.5, f));\n    p.xz *= rot(PI / 3.);\n    vec2 outter = chord(p, c, 2.4, f);\n    outter.y += 1.;\n    d = _min(d, outter);\n    return d;\n}\n\nfloat mat_id = -1.;\nfloat map(vec3 p) {\n    vec2 d = vec2(1e9, -1.);\n    float t = iTime * 1.2;\n\n    p.xy *= rot(PI / 3.);\n\n    float c = 2., n = 10.;\n    float center = floor((p.y + c / 2.) / c) * c;\n    float l = n * c;\n    center = clamp(center, -l, l);\n\n    vec3 q = p;\n    float factor = smoothstep(l * 1.0, 0., abs(p.y)) * 0.9 + 0.1;\n\n    float neighbour = center + ((q.x < center) ? 1.0 : -1.0) * c;\n\n    float radius = 6. * (factor - 0.05);\n    float bounding_radius = 2.6 + radius;\n    vec2 nbor = vec2(sd_disk(q - vec3(0., neighbour, 0.),\n                     bounding_radius, c / 2.2), -1.);\n\n    float phi = t + center * 4.5;// + noise(t * 0.5 - center);\n    q.xz += radius * vec2(cos(phi), sin(phi));\n    vec2 me = primitive(q - vec3(0., center, 0.), c, factor,\n                        3.* noise(t + center));\n    d = _min(me, nbor);\n\n    d.x = max(d.x, sd_disk(p, bounding_radius * 1.1, l));\n\n    mat_id = d.y;\n    return d.x;\n}\n\nvec3 get_norm(vec3 p) {\n    mat3 k = mat3(p, p, p) - mat3(0.001);\n    return normalize(vec3(map(p)) - vec3(map(k[0]), map(k[1]), map(k[2])));\n}\n\nmat3 get_cam(vec3 eye, vec3 target) {\n    vec3 zaxis = normalize(target - eye);\n    vec3 xaxis = normalize(cross(zaxis, vec3(0., 1., 0.)));\n    vec3 yaxis = cross(xaxis, zaxis);\n    return mat3(xaxis, yaxis, zaxis);\n}\n\nvec2 trace(vec3 ro, vec3 rd) {\n    float hit = -1.;\n    float t = 5.;\n    for (int i = 0; i < 45; i++) {\n        float d = map(ro + rd * t);\n        if (abs(d) < 0.025) {\n            hit = 1.;\n            break;\n        };\n        t += d * 0.75;\n        if (t > T_MAX) break;\n    }\n    return vec2(t, hit);\n}\n\nfloat sd_square(vec2 p, vec2 h) {\n    p = abs(p) - h;\n    return length(max(p, 0.)) - min(max(p.x, p.y), 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord / iResolution.xy * 2. - 1.)\n              * vec2(aspect, 1.);\n    float time = iTime;\n\n    vec3 ro = vec3(-8., -0., -13.);\n    vec3 target = vec3(-4., -1.5, 0.);\n    mat3 cam = get_cam(ro, target);\n    vec3 rd = cam * normalize(vec3(uv, 1.));\n\n    vec2 t = trace(ro, rd);\n\n    vec3 col = vec3(241, 213, 201) / 255.;\n    if (t.y > 0.) {\n        vec3 pos = ro + rd * t.x;\n        vec3 nor = get_norm(pos);\n\n        vec3 albo;\n        if (0. == mat_id) {\n            albo = vec3(255, 101, 79) / 255.;\n        }\n        if (1. == mat_id) {\n            albo = vec3(86, 68, 76) / 255.;\n        }\n        if (2. == mat_id) {\n            albo = vec3(74, 89, 146) / 255.;\n        }\n\n        col = albo;\n    }\n\n    float d = sd_square(uv, vec2(0.95) * vec2(aspect * 1.02, 1.));\n    d = 0.01 - abs(d);\n    d = AAstep(0., d + 0.0025);\n    col = mix(col, vec3(0.), d);\n    \n    col = mix(col, texture(iChannel0, fragCoord / iResolution.xy).rgb, 0.3);\n    \n    fragColor = vec4(col, max(t.y, d));\n}","name":"Buffer A","description":"","type":"buffer"}]}