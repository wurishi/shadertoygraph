{"ver":"0.1","info":{"id":"MfdczB","date":"1730845598","viewed":53,"name":"Dynamic Gradient Map","username":"Blossomical","description":"applies a gradient map to your image, has extra settings like strength, originaldarkness, reverse and ease functions","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["colors","filter","gradient","gradientmap","gradiationmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_COLOR 3\n// change max_color based on the length of your gradient map array\n\nvec3 gradientMap[MAX_COLOR] = vec3[MAX_COLOR](\n    vec3(0.2, 0.0, 0.2),\n    vec3(0.4, 0.3, 0.4),\n    vec3(1.0, 1.0, 0.0)\n); // from darkest to lightest\n\nfloat strength = 1.0; // how strong the gradient map affects your texture\nbool useOriginalDarkness = false; // apply darkness & lightness to the gradient map\nbool reverse = false; // make it go from lightest to darkest\n\n// check Common for custom gradient ease functions\n\n// blend function\n\nvec3 blendColors(vec3 rgb[MAX_COLOR], int size, float gray) {\n    float segment = 1.0 / float(size - 1);\n    if (reverse) gray = 1.0 - gray;\n    float scaledGray = gray / segment;\n    \n    int i = int(floor(scaledGray));\n    i = clamp(i, 0, size - 2);\n    \n    float t = (gray - float(i) * segment) / segment;\n\n    return ease(rgb[i], rgb[i + 1], t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 originalColor = texture(iChannel0, fragCoord/iResolution.xy);\n    float gray = dot(originalColor.rgb, vec3(0.2126, 0.7152, 0.0722));\n    vec3 gradBlend = blendColors(gradientMap, MAX_COLOR, gray);\n    fragColor = vec4(mix(originalColor.rgb, gradBlend, strength) * (useOriginalDarkness ? gray : 1.0), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n\nint easeKind = 0;\nint easeType = 1;\n\nvec3 quadMix(vec3 a, vec3 b, float x, int type) {\n    if (type == 2) return mix(a, b, smoothstep(0.0, 1.0, x * (2.0 - x)));\n    return mix(a, b, smoothstep(0.0, 1.0, x * x));\n}\n        vec3 bounceMix(vec3 a, vec3 b, float x, int type) {\n            float n1 = 7.5625;\n            float d1 = 2.75;\n            float result;\n            if (x < 1.0 / d1) {\n                result = n1 * x * x;\n            } else if (x < 2.0 / d1) {\n                x -= 1.5 / d1;\n                result = n1 * x * x + 0.75;\n            } else if (x < 2.5 / d1) {\n                x -= 2.25 / d1;\n                result = n1 * x * x + 0.9375;\n            } else {\n                x -= 2.625 / d1;\n                result = n1 * x * x + 0.984375;\n            }\n            return mix(a, b, type == 2 ? 1.0 - result : result);\n        }\n\n\nvec3 cubicMix(vec3 a, vec3 b, float x, int type) {\n\t\t    if (type == 2) {\n\t\t        float f = x - 1.0;\n\t\t        return mix(a, b, smoothstep(0.0, 1.0, f * f * f + 1.0));\n\t\t    }\n\t\t    return mix(a, b, smoothstep(0.0, 1.0, x * x * x));\n\t\t}\n\t\tvec3 expoMix(vec3 a, vec3 b, float x, int type) {\n            if (type == 2) return mix(a, b, smoothstep(0.0, 1.0, (x == 1.0) ? 1.0 : 1.0 - pow(2.0, -10.0 * x)));\n            return mix(a, b, smoothstep(0.0, 1.0, (x == 0.0) ? 0.0 : pow(2.0, 10.0 * (x - 1.0))));\n        }\n\n        vec3 smoothMix(vec3 a, vec3 b, float x) {\n            return mix(a, b, smoothstep(0.0, 1.0, x));\n        }\n\n        vec3 quintMix(vec3 a, vec3 b, float x, int type) {\n            if (type == 2) return mix(a, b, 1.0 - pow(1.0 - x, 5.0));\n            return mix(a, b, pow(x, 5.0));\n        }\n\n        vec3 sineMix(vec3 a, vec3 b, float x, int type) {\n            if (type == 2) return mix(a, b, sin((x * PI) / 2.0));\n            return mix(a, b, 1.0 - cos((x * PI) / 2.0));\n        }\n\n        vec3 elasticMix(vec3 a, vec3 b, float x, int type) {\n            float s = 0.0;\n            float p = 0.45;\n            float q = 0.785;\n\n            if (type == 2) x = 1.0 - x;\n\n            if (x == 0.0 || x == 1.0) return type == 2 ? b : a;\n\n            if (type == 2) s = p / (2.0 * 3.14159) * asin(1.0);\n            else s = p / (2.0 * 3.14159) * asin(1.0) - q;\n\n            return a + (b - a) * pow(2.0, -10.0 * x) * sin((x - s) * (2.0 * 3.14159) / p);\n        }\n\n        vec3 backMix(vec3 a, vec3 b, float x, int type) {\n            float s = 1.70158;\n            float q = 0.0;\n\n            if (type == 2) x = 1.0 - x;\n\n            if (type == 2) q = 1.525;\n            else q = 1.0;\n\n            return a + (b - a) * (x == 0.0 ? 0.0 : x == 1.0 ? 1.0 : x * x * ((s + 1.0) * x - s));\n        }\n\n\t\tvec3 circMix(vec3 a, vec3 b, float x, int type) {\n            if (type == 2) return mix(a, b, sqrt(1.0 - pow(x - 1.0, 2.0)));\n            return mix(a, b, 1.0 - sqrt(1.0 - pow(x, 2.0)));\n\t\t}\n\n        vec3 ease(vec3 a, vec3 b, float x) {\n            vec3 color;\n            switch(easeKind) {\n                default:\n                    color = mix(a, b, x);\n                    break;\n                case 1:\n                    color = smoothMix(a, b, x);\n                    break;\n                case 2:\n                    color = quadMix(a, b, x, easeType);\n                    break;\n                case 3: \n                    color = cubicMix(a, b, x, easeType);\n                    break;\n                case 4:\n                    color = expoMix(a, b, x, easeType);\n                    break;\n                case 5:\n                    color = quintMix(a, b, x, easeType);\n                    break;\n                case 6:\n                    color = sineMix(a, b, x, easeType);\n                    break;\n                case 7:\n                    color = circMix(a, b, x, easeType);\n                    break;\n                case 8:\n                    color = elasticMix(a, b, x, easeType);\n                    break;\n                case 9:\n                    color = backMix(a, b, x, easeType);\n                    break;\n                case 10:\n                    color = bounceMix(a, b, x, easeType);\n                    break;\n            }\n            return color;\n        }\n\n","name":"Common","description":"","type":"common"}]}