{"ver":"0.1","info":{"id":"tsS3DD","date":"1548874133","viewed":84,"name":"NoiseSimple2D","username":"voemilyh","description":"noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash2D(vec2 x)\n{\n\tfloat i = dot(x, vec2(123.4031, 46.5244876));\n\treturn fract(sin(i * 7.13) * 268573.103291);\n}\n\nfloat noise(vec2 p) {\n    vec2 p0 = floor(p);\n    vec2 dist = p - p0;\n    float v00 = hash2D(p0);\n    float v01 = hash2D(p0 + vec2(0.0f, 1.0f));\n    float v10 = hash2D(p0 + vec2(1.0f, 0.0f));\n    float v11 = hash2D(p0 + vec2(1.0f));\n    float v0 = mix(v00, v01, dist.y);\n    float v1 = mix(v10, v11, dist.y);\n    return mix(v0, v1, dist.x);\n}\n\nfloat fbm(vec2 p) {\n    float total = 0.0f;\n   \tfloat scale = 2.0f;\n    float persistence = 1.0f / scale;\n    float frequency = 1.0f;\n    float ampl = 1.0f;\n    for (int i = 0; i < 8; i++) {\n        frequency *= scale;\n        ampl *= persistence;\n        total += noise(p * frequency) * ampl;\n    }\n    return total;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(fbm(uv * 16.0f));\n}","name":"Image","description":"","type":"image"}]}