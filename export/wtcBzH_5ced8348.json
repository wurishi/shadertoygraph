{"ver":"0.1","info":{"id":"wtcBzH","date":"1612218399","viewed":74,"name":"Neural Mask covid 19","username":"iuryBorgesRodrigues","description":"Neural Mask covid 19","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["mask","covid19"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 1\n#define PI 3.14159\n\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\n\n\n\n\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\nfloat mask(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.95;\n    }\n    \n    //neural networks can be really compact... when they want to be\n   vec4 f0_0=sin(p.y*vec4(-3.272,-3.931,-.959,3.498)+p.z*vec4(-1.892,-1.531,-.575,-.421)+p.x*vec4(.292,.507,2.889,-.509)+vec4(-8.022,-3.107,8.632,1.810));\nvec4 f0_1=sin(p.y*vec4(-.214,1.342,-1.098,-3.222)+p.z*vec4(.500,3.467,.654,1.168)+p.x*vec4(-2.672,3.520,-3.506,2.903)+vec4(8.193,-7.354,7.353,-.714));\nvec4 f0_2=sin(p.y*vec4(-3.010,1.531,-1.010,3.827)+p.z*vec4(3.181,-1.604,-1.705,1.597)+p.x*vec4(-2.193,2.119,1.832,-1.503)+vec4(1.548,.879,6.517,-1.409));\nvec4 f0_3=sin(p.y*vec4(3.242,1.201,1.477,-.804)+p.z*vec4(-.756,1.351,-2.642,.981)+p.x*vec4(-2.373,-1.679,-1.717,-1.784)+vec4(2.351,4.285,3.905,4.393));\nvec4 f1_0=sin(mat4(-.327,-.685,.214,.063,.727,.139,-.885,.803,-.150,.055,.001,.490,-.128,.352,-.148,.179)*f0_0+\n    mat4(-.645,1.247,-.429,-.103,-.685,-.020,-.245,.121,-.043,-.923,-.269,.301,.710,-.100,.590,-.245)*f0_1+\n    mat4(-.568,.232,-.025,.322,.098,.783,-.107,-.042,-.378,.128,.331,-.086,-.089,-.304,-.229,-.018)*f0_2+\n    mat4(.032,.266,.381,-1.247,-.130,-.231,-.338,.186,.226,.233,-.110,-.501,-.445,-.723,-1.160,-.308)*f0_3+\n    vec4(-3.591,-1.473,-1.588,1.219))/1.0+f0_0;\nvec4 f1_1=sin(mat4(-.520,-.337,-.149,.313,.006,-1.096,.087,-.268,.613,-.397,.178,-.072,.145,.030,.172,.155)*f0_0+\n    mat4(-.335,.715,.592,.009,-.721,.292,.085,.056,.936,-.557,-.523,.027,.001,-.198,-.537,.358)*f0_1+\n    mat4(-.189,-.013,-.087,.195,.286,.045,.307,-.393,.289,-.248,-.184,-.330,.018,.135,-.908,.248)*f0_2+\n    mat4(.014,1.036,.408,.059,.540,.512,-.022,-.071,-.446,.329,.248,.303,.249,.341,-.009,-.295)*f0_3+\n    vec4(1.481,-1.383,-1.658,-2.459))/1.0+f0_1;\nvec4 f1_2=sin(mat4(1.211,.277,-.281,-.480,.001,-.335,-.215,.677,-.045,-.484,-.509,-.355,-.157,-.090,-.199,-.450)*f0_0+\n    mat4(.270,.003,.582,-1.200,.778,-.149,-.469,-.535,-.702,.182,-.485,-.497,-.135,.493,.190,.711)*f0_1+\n    mat4(.716,.279,.080,.036,.427,-.657,.294,.599,-.452,.596,-.225,.665,-.526,.341,-.283,.258)*f0_2+\n    mat4(-.169,.297,.872,.098,-.109,-.483,-.363,1.053,-.649,.344,.322,-.368,.091,-.202,.481,.622)*f0_3+\n    vec4(1.058,-1.541,.394,1.418))/1.0+f0_2;\nvec4 f1_3=sin(mat4(-.449,.034,-1.131,.455,-.692,-.081,-.604,-.134,.718,-.847,-.077,-.060,-.098,-.022,-.512,.230)*f0_0+\n    mat4(1.110,.213,.164,.654,.249,-.364,-.522,.457,-.421,.441,.748,-.371,-.165,.108,-.265,-.195)*f0_1+\n    mat4(-.450,.105,-.394,.476,.727,-.040,.081,-.086,-.123,-.232,.424,.353,.219,.725,.038,-.356)*f0_2+\n    mat4(.196,-.288,-.169,.324,-.173,-.520,-.491,-.258,-.218,.870,.710,.298,-.506,.916,-.534,-.664)*f0_3+\n    vec4(-1.109,-2.004,-1.429,4.015))/1.0+f0_3;\nvec4 f2_0=sin(mat4(.111,.496,.058,.050,.241,.598,.541,.511,.040,-.102,.385,.321,.302,-1.448,.296,.734)*f1_0+\n    mat4(-.361,.176,-.640,-.345,-.093,-.294,.261,.964,-.473,-.255,.317,.738,.517,.491,.637,1.225)*f1_1+\n    mat4(-.041,.229,-.367,-.371,.075,.143,-.244,.158,.576,.096,-.054,1.039,-.154,-.251,-.327,.568)*f1_2+\n    mat4(-.518,-.216,.562,-.293,1.144,.023,-.794,-.455,-.280,.314,.031,-.483,-.199,-.029,-.926,-.449)*f1_3+\n    vec4(-.978,-3.264,.168,-2.379))/1.4+f1_0;\nvec4 f2_1=sin(mat4(-.356,.013,.334,-.042,.229,-.410,.157,-.230,-.250,.183,.515,-.781,-.393,1.147,.148,-.068)*f1_0+\n    mat4(-.742,.538,.163,.074,.458,-.489,-.140,-.602,.357,-.729,-.061,.156,.213,.948,-.467,-.362)*f1_1+\n    mat4(-.152,.082,.087,.234,1.061,.804,.105,-.326,-.146,.073,-.460,-.074,.157,-.040,-.007,-.269)*f1_2+\n    mat4(-.389,.432,.239,.042,.591,1.125,-.312,-.100,.681,-.038,-.620,.260,.062,.557,-.914,.107)*f1_3+\n    vec4(-2.284,-1.358,1.607,-1.796))/1.4+f1_1;\nvec4 f2_2=sin(mat4(.156,.275,1.086,.068,.224,-.005,.167,.366,-.863,-.248,-.445,-.315,-.672,.024,.072,.424)*f1_0+\n    mat4(.513,.594,-.566,.742,-.524,.283,.033,.379,-.628,-.029,.462,-.521,-.230,.967,1.119,.824)*f1_1+\n    mat4(.163,-.306,-.214,.238,-1.273,.338,.122,.087,-.245,-.606,-.089,.115,.125,.310,-.103,-.406)*f1_2+\n    mat4(-.448,.386,.316,-.757,.542,.079,-.601,-.186,-.091,.191,-.507,-.309,.472,-.990,.145,-.138)*f1_3+\n    vec4(-.720,1.230,-1.995,-2.539))/1.4+f1_2;\nvec4 f2_3=sin(mat4(.307,-.500,.278,-.012,.229,.047,-.640,.525,-1.563,.359,-.534,.469,-.182,.365,.383,-.429)*f1_0+\n    mat4(1.294,-.010,-.141,-.774,.567,.257,-.122,-.045,-.357,.323,-.020,.058,.157,-.732,.210,-.669)*f1_1+\n    mat4(.331,.044,-.263,-.362,.333,.539,-.804,.126,.021,.062,.242,.374,-.759,-.348,.039,-.901)*f1_2+\n    mat4(.636,.669,-.332,-.627,-1.358,-.911,.272,.311,.669,.359,.426,-.524,-1.037,-.967,-.082,-.022)*f1_3+\n    vec4(-2.223,1.234,.091,.331))/1.4+f1_3;\nreturn dot(f2_0,vec4(-.091,.041,-.086,.066))+\n    dot(f2_1,vec4(.059,-.036,-.095,-.109))+\n    dot(f2_2,vec4(.074,-.111,-.093,-.056))+\n    dot(f2_3,vec4(.028,-.093,.091,-.070))+\n    -0.067;\n\n\n\n}\n\nvec2 map( in vec3 p, float atime )\n{\n\t\n    \n   \n    vec2 res = vec2( mask(((p*rotate_y(3.5))*rotate_x(-1.2))*rotate_z(1.5))-0.02, 1.0 );\n  \n   \n    res = opU(res,vec2(p.y+0.5,3.5));\n\n    \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float time )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    for( int i=0; i<512 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t, time );\n        if( h.x<0.001 )\n        { \n            res = vec2(t,h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, float time )\n{\n/*\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy, time ).x - map( pos - e.xyy, time ).x,\n\t\tmap( pos + e.yxy, time ).x - map( pos - e.yxy, time ).x,\n\t\tmap( pos + e.yyx, time ).x - map( pos - e.yyx, time ).x ) );\n*/\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e,time).x;\n    }\n    return normalize(n);    \n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos, time ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{ \n    // sky dome\n    vec3 col = vec3(0.5, 0.8, 0.9) - max(rd.y,0.0)*0.5;\n    \n    vec2 res = castRay(ro,rd, time);\n    if( res.y>-0.5 )\n    {\n        float t = res.x;\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, time );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = vec3(0.2);\n        float ks = 1.0;\n\n        if( res.y==3.5 ) // eyeball\n        { \n            col = vec3(0.4,0.5,0.6);\n        } \n        else if( res.y==2.5 ) // iris\n        { \n            col = vec3(0.0);\n        } \n        else if( res.y==2.0 ) // body\n        { \n            col = vec3(1.0);\n        }\n\t\telse // terrain\n        {\n            col = vec3(0.0,1.0,1.0);\n        }\n        \n        // lighting\n        vec3  sun_lig = normalize( vec3(0.6, 0.35, 0.5) );\n        float sun_dif = clamp(dot( nor, sun_lig ), 0.0, 1.0 );\n        vec3  sun_hal = normalize( sun_lig-rd );\n        float sun_sha = step(castRay( pos+0.001*nor, sun_lig,time ).y,0.0);\n\t\tfloat sun_spe = ks*pow(clamp(dot(nor,sun_hal),0.0,1.0),8.0)*sun_dif*(0.04+0.96*pow(clamp(1.0+dot(sun_hal,rd),0.0,1.0),5.0));\n\t\tfloat sky_dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float bou_dif = sqrt(clamp( 0.1-0.9*nor.y, 0.0, 1.0 ))*clamp(1.0-0.1*pos.y,0.0,1.0);\n\n\t\tvec3 lin = vec3(0.0);\n        lin += sun_dif*vec3(8.10,6.00,4.20)*sun_sha;\n        lin += sky_dif*vec3(0.50,0.70,1.00);\n        lin += bou_dif*vec3(0.40,1.00,0.40);\n\t\tcol = col*lin;\n\t\tcol += sun_spe*vec3(8.10,6.00,4.20)*sun_sha;\n        \n        col = mix( col, vec3(0.5,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 tot = vec3(0.0);\n    mat3 rotation;\n\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\n    vec2 p = (-iResolution.xy + 2.0*fragCoord+o)/iResolution.y;\n    \n    vec2 m2 = iMouse.xy / iResolution.xy;\n    m2.y *= -1.0;\n    m2 -= vec2(0.5);\n    \n    // initial mouse position\n    if(iMouse.xy == vec2(0.0))\n    {\n        m2= vec2(0.5, 8.0);\n    }\n\n    rotation = mat3(1.0);\n    rotation = rotx(m2.y * 10.0);\n    rotation *= rotx(PI * 0.5);\n    rotation *= roty(m2.x * 10.0);\n   \n    \n    \n    \n    \n    float time = iTime;\n\n    time *= 0.9;\n\n    // camera\t\n    float an = 10.57*iMouse.x/iResolution.x;\n    vec3  ta = vec3( 0.0, 0.0, 0.4);\n    vec3  ro = ta + vec3( 1.3, -0.250, 1.3 );\n\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 rd = ca * normalize( vec3(p,1.8) );\n    \n    ro*=rotation;\n    rd*=rotation;\n\n    vec3 col = render( ro, rd, time );\n\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n    }\n     tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}