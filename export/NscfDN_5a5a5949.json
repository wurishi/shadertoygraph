{"ver":"0.1","info":{"id":"NscfDN","date":"1656450647","viewed":50,"name":"my_Buratino","username":"Alexsandr_Skurikhin","description":"практика","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["buratino"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n    // функция для рисования кругов\n    bool circle(vec2 p, vec2 c, float r)\n    {\n        float scaleY = iResolution.y / iResolution.x;\n         return (p.x - c.x) * (p.x - c.x) + (p.y   - c.y) * (p.y - c.y) * (scaleY * scaleY)  < r*r; \n    }\n    \n    // функция для рисования квадратов\n    bool square(vec2 p, vec2 c, float r)\n    {\n        float x = p.x - c.x;\n        float y = p.y - c.y;\n        float d = max(abs(x), abs(y));\n         return d < r;\n    }\n\n    \n    // функция для рисования эллипса\n    /*bool elipse2(vec2 p, vec2 c, float r, float a, float b)\n    {\n        float scaleY = iResolution.y / iResolution.x;\n        float dx_2 = (p.x - c.x) * (p.x - c.x);\n        float dy_2 = (p.y - c.y) * (p.y - c.y);\n         return dx_2 / (a*a) + (dy_2 / (b*b)) * (scaleY * scaleY) < r*r;\n\n    }*/\n    \n    \n    // функция для рисования эллипса\n    bool elipse(vec2 p, vec2 c, float a, float b)\n    {\n        float scaleY = iResolution.y / iResolution.x;\n        float dx_2 = (p.x - c.x) * (p.x - c.x);\n        float dy_2 = (p.y - c.y) * (p.y - c.y);\n         return dx_2 / (a*a) + (dy_2 / (b*b)) * (scaleY * scaleY) < 1.0;\n\n    }\n\n    \n    \n    // Несколько вспомагательных функций для отображения треугольников:\n    \n    // Уравнение прямой\n    float calc_line_eq(vec2 a, vec2 b, vec2 p)\n    {\n        return (p.x - a.x) * (b.y - a.y) - (p.y-a.y) * (b.x - a.x);\n    }\n\n\n        // Проверяет лежат ли точки на одной стороне прямой:\n        bool isOnOneSide(vec2 a, vec2 b, vec2 c, vec2 p) \n        {\n            return calc_line_eq(a, b, c) * calc_line_eq(a, b, p) >= 0.0;\n        }\n\n            // перебор возможных случаев\n            bool triangle(vec2 a, vec2 b, vec2 c, vec2 p)\n            {\n                return  isOnOneSide(a, b, c, p) && isOnOneSide(b, c, a, p) && isOnOneSide(c, a, b, p);\n            }\n\n\n\n    vec2 rotate(vec2 p, float angle)\n    {\n        return mat2(cos(angle), sin(angle), -sin(angle), cos(angle)) * p;\n    }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Нормализированные координаты в пикселях (от 0 до 1)\n    vec2 crd = fragCoord/iResolution.xy;\n   \n    float x = crd.x;\n    float y = crd.y;\n    \n    vec2 point = vec2(x, y);\n    \n    fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      \n      \n      // голова\n      if (circle(point, vec2(0.4, 0.5), 0.12))\n          fragColor = vec4(1.0, 0.8, 0.5, 1.0);\n          \n      // глаз    \n      if (circle(point, vec2(0.42, 0.55), 0.03))\n          fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n          \n      if (circle(point, vec2(0.41, 0.57), 0.03))\n          fragColor = vec4(1.0, 0.8, 0.5, 1.0);\n          \n      // рот    \n      if (circle(point, vec2(0.48, 0.4), 0.02))\n          fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n          \n      if (circle(point, vec2(0.48, 0.45), 0.035))\n          fragColor = vec4(1.0, 0.8, 0.5, 1.0);\n          \n      // румянец    \n      if (circle(point, vec2(0.41, 0.42), 0.035))\n          fragColor = vec4(1.0, 0.5, 0.0, 1.0);\n          \n      \n      // нос\n      if(triangle(vec2(0.5, 0.53), vec2(0.82, 0.5), vec2(0.5, 0.47), point))\n         fragColor = vec4(1.0, 0.8, 0.5, 1.0);\n         \n      \n      \n     \n      // шляпа\n      \n      vec2 point1 = rotate(point, sin(iTime)*(PI/350.0));\n      \n      if (elipse(point1, vec2(0.4, 0.7), 0.1, 0.006))\n          fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n          \n      //if (elipse2(point1, vec2(0.4, 0.7), 0.3, 0.4, 0.02))\n        //  fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n          \n      \n      if (triangle(vec2(0.35, 0.71), vec2(0.4, 0.98), vec2(0.45, 0.71), point1))\n          fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n          \n \n      if (circle(point1, vec2(0.4, 0.98), 0.01))\n          fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      \n          \n          \n      // шея    \n      if (square(point, vec2(0.4, 0.3), 0.05))\n          fragColor = vec4(1.0, 0.8, 0.5, 1.0);\n          \n      // туловище    \n      if (circle(point, vec2(0.52, 0.15), 0.03))\n          fragColor = vec4(0.0, 0.5, 1.0, 1.0);\n      \n      \n      // пуговицы\n      if (circle(point, vec2(0.55, 0.03), 0.03))\n          fragColor = vec4(0.8, 0.3, 0.5, 1.0);\n          \n      if (circle(point, vec2(0.4, 0.01), 0.15))\n          fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n          \n          \n      \n}","name":"Image","description":"","type":"image"}]}