{"ver":"0.1","info":{"id":"MtyXDV","date":"1491901925","viewed":1100,"name":"View Shader Data 2","username":"gPlatl","description":"Display shader data ... date, time, frameCount, runtime, fps, resolution & mouse positions.\nClick and Drag mouse button to display last & current mouse position. Press keys to display key values.\nUse Ctrl-mousewheel to change resolution!","likes":40,"published":1,"flags":16,"usePreview":1,"tags":["mouse","time","shader","distance","coordinates","fps","date","frame","data","view","fonttexture","resolution","runtime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//=================================================================\n// ViewShaderData2.glsl    \n//   v1.0  2017-04-11  initial release\n//                     !!! BUGS: integer and float conversion displays \n//                               wrong values in some cases !!! \n//   v1.1  2017-04-12  char() corrections\n//                     convertion routines corrected by Timo Kinnunen!  \n//   v1.2  2018-01-07  display WebGL version\n//   v1.3  2019-05-25  key input added\n//   v1.4  2019-05-25  corrections from FabriceNeyret2\n//   v1.5  2020-12-28  correction because of iMouse data changes!\n//         2020-12-28  working on...\n//\n// Display shader data:  \n//   date, time, frameCount, runtime, fps, resolution & mouse positions.\n// Click and Drag mouse button to display last & current mouse position.\n// Press keys to show current pressed key values.\n// Use Ctrl-mousewheel to change resolution.\n// Press Alt-CursorDown to reset time & Alt-CursorUp to toggle pause.\n//\n// This release 2 uses the font texture to display integer and float values.\n// useful shader infos:\n//         font:  https://www.shadertoy.com/view/MtVXRd\n//      numbers:  https://www.shadertoy.com/view/llySRh\n//    version 1:  https://www.shadertoy.com/view/llcXDn\n//    KeyTester:  https://www.shadertoy.com/view/llVSRm\n// KeyTester v2:  https://www.shadertoy.com/view/XsycWw\n// shaderValues:  https://www.shadertoy.com/view/llySRh\n//   nice watch:  https://www.shadertoy.com/view/lsXGz8\n// https://shadertoyunofficial.wordpress.com/2016/07/20/special-shadertoy-features/\n//=================================================================\n\n//== key handling ===\n\n#define keyToggle(ascii) (texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)   (texelFetch(iChannel3,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)  (texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n\n//== font handling ==\n\n#define FONT_BUFFER iChannel2\n#define FONT_SPACE 0.5\n\nvec2 uv = vec2(0.0);  // -1 .. 1\n\nvec2 tp = vec2(0.0);  // text position\n\n//--- access font image of ascii code characters ---\n\n#define BLANK tp.x-=FONT_SPACE;\n#define _     tp.x-=FONT_SPACE;\n\n#define S(a) c+=char(a);  tp.x-=FONT_SPACE;\n\n#define _note  S(10);   //\n#define _star  S(28);   // *\n#define _smily S(29);   // :-)        \n#define _exc   S(33);   // !\n#define _add   S(43);   // +\n#define _comma S(44);   // ,\n#define _sub   S(45);   // -\n#define _dot   S(46);   // .\n#define _slash S(47);   // /\n\n#define _0 S(48);\n#define _1 S(49);\n#define _2 S(50);\n#define _3 S(51);\n#define _4 S(52);\n#define _5 S(53);\n#define _6 S(54);\n#define _7 S(55);\n#define _8 S(56);\n#define _9 S(57);\n#define _ddot S(58);   // :\n#define _sc   S(59);   // ;\n#define _less S(60);   // <\n#define _eq   S(61);   // =\n#define _gr   S(62);   // >\n#define _qm   S(63);   // ?\n#define _at   S(64);   // at sign\n\n#define _A S(65);\n#define _B S(66);\n#define _C S(67);\n#define _D S(68);\n#define _E S(69);\n#define _F S(70);\n#define _G S(71);\n#define _H S(72);\n#define _I S(73);\n#define _J S(74);\n#define _K S(75);\n#define _L S(76);\n#define _M S(77);\n#define _N S(78);\n#define _O S(79);\n#define _P S(80);\n#define _Q S(81);\n#define _R S(82);\n#define _S S(83);\n#define _T S(84);\n#define _U S(85);\n#define _V S(86);\n#define _W S(87);\n#define _X S(88);\n#define _Y S(89);\n#define _Z S(90);\n\n#define _a S(97);\n#define _b S(98);\n#define _c S(99);\n#define _d S(100);\n#define _e S(101);\n#define _f S(102);\n#define _g S(103);\n#define _h S(104);\n#define _i S(105);\n#define _j S(106);\n#define _k S(107);\n#define _l S(108);\n#define _m S(109);\n#define _n S(110);\n#define _o S(111);\n#define _p S(112);\n#define _q S(113);\n#define _r S(114);\n#define _s S(115);\n#define _t S(116);\n#define _u S(117);\n#define _v S(118);\n#define _w S(119);\n#define _x S(120);\n#define _y S(121);\n#define _z S(122);\n\n//---------------------------------------------------------\n// return font image intensity of character ch at text position tp\n//---------------------------------------------------------\n\nfloat char(int ch)    // old versions\n{ vec4 f = texture(FONT_BUFFER,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));\n  return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d\n}\n//  vec4 f = texture(FONT_BUFFER,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,16.-(1e-6)-floor(ch)/16.))/16.));  \n\n/*\nfloat char(int ch)    // new version\n{\n  vec4 f = any(lessThan(vec4(tp,1,1), vec4(0,0,tp))) \n               ? vec4(0) \n               : texture(FONT_BUFFER,0.0625*(tp + vec2(ch - ch/16*16,15 - ch/16)));  \n//  if (iMouse.z > 0.0) return f.x; else   // 2d\n  return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d\n}\n*/\n\n//----------------------------------------------------------------\n// set text starting position to x=line, y=column (left/top = 1,1) \n//----------------------------------------------------------------\nvoid SetTextPosition(float x, float y)  //\n{\n  tp = 10.0*uv;\n  tp.x = tp.x +17. - x;\n  tp.y = tp.y -9.4 + y;\n}\n\n//== value drawings =======================================\n\n//--- display number fraction with leading zeros --- \nfloat drawFract(float value, int digits)\n{ \n  float c = 0.0;\n  value = fract(value) * 10.0;\n  for (int ni = 1; ni < 60; ni++) \n  {\n    c += char(48 + int(value)); // add 0..9\n    tp.x -= FONT_SPACE;\n    digits -= 1;\n    value = fract(value) * 10.0;\n    if (digits <= 0 || value == 0.0) break;\n  } \n  tp.x -= FONT_SPACE*float(digits);\n  return c;\n}\n                                                                                                             \n//--- display integer value --- \nint maxInt(int a, int b) { return a>b?a:b;}  // to run on iPad\n\n//--- display integer value --- \nfloat drawInt(int value, int minDigits)\n{\n  float c = 0.;\n  if (value < 0) \n  { value = -value;\n    if (minDigits < 1) minDigits = 1;\n    else minDigits--;\n    _sub                   // add minus char\n  } \n  int fn = value, digits = 1; // get number of digits \n  for (int ni=0; ni<10; ni++)\n  {\n    fn /= 10;\n    if (fn == 0) break;\n    digits++;\n  } \n  digits = maxInt(minDigits, digits);   // WebGL\n//digits = max(minDigits, digits);      // WebGL2\n  tp.x -= FONT_SPACE * float(digits);\n  for (int ni=1; ni < 11; ni++) \n  { \n    tp.x += FONT_SPACE; // space\n    c += char(48 + value%10);\n    value /= 10; // add 0..9 \n    if (ni >= digits) break;\n  } \n  tp.x -= FONT_SPACE * float(digits);\n  return c;\n}\n\n//--- display float value ---\nfloat drawFloat(float value, int prec, int maxDigits)\n{ \n  float tpx = tp.x-FONT_SPACE*float(maxDigits);\n  float c = 0.;\n  if (value < 0.0) \n  { \n    c = char(45); // write minus sign\n    value = -value;\n  }\n  tp.x -= FONT_SPACE;\n  c += drawInt(int(value),1);\n  c += char(46); BLANK; // add dot \n  c += drawFract(fract(value), prec);\n  tp.x = min(tp.x, tpx);\n  return c;\n}\n\nfloat drawFloat(float value)           {return drawFloat(value,2,5);} \n\nfloat drawFloat(float value, int prec) {return drawFloat(value,prec,2);} \n\nfloat drawInt(int value)               {return drawInt(value,1);}\n\n//== geometric drawings ===========================================\n\n//--- draw line segment from A to B ---\nfloat drawLineSegment(vec2 A, vec2 B, float r)\n{\n    vec2 g = B - A;\n    vec2 h = uv - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\n//--- draw circle at pos with given radius ---\nfloat circle(in vec2 pos, in float radius, in float halo)\n{\n  return clamp (halo * (radius - length(uv-pos)), 0.0, 1.0);\n}\n\n//=================================================================\n\nconst vec3 headColor = vec3(0.90, 0.60, 0.20);\nconst vec3 backColor = vec3(0.15, 0.10, 0.10);\nconst vec3 mpColor   = vec3(0.99, 0.99, 0.00);\nconst vec3 mxColor   = vec3(1.00, 0.00, 0.00);\nconst vec3 myColor   = vec3(0.00, 1.00, 0.00);\n      vec3 dotColor  = vec3(0.50, 0.50, 0.00);\n      vec3 drawColor = vec3(1.0, 1.0, 0.0);\n      vec3 vColor    = backColor;  // value color\n\nfloat aspect = 1.0;\nvec2 pixelPos   = vec2(0.0);  // pixel position:  0 .. resolution-1\nvec2 mousePos   = vec2(200);  // mouse pixel position  \nvec2 lp         = vec2(0.5);  // last mouse position \nvec2 mp         = vec2(0.5);  // current mouse position \nvec2 resolution = vec2(0.0);  // window resolution\n\n//----------------------------------------------------------------\nvoid SetColor(float red, float green, float blue)\n{\n  drawColor = vec3(red,green,blue);\n}\n//----------------------------------------------------------------\nvoid WriteFloat(const in float fValue \n               ,const in int maxDigits \n               ,const in int decimalPlaces)\n{\n  vColor = mix(vColor, drawColor, drawFloat (fValue, decimalPlaces));\n  BLANK;\n}\n//----------------------------------------------------------------\nvoid WriteInteger(const in int iValue)\n{\n  vColor = mix(vColor, drawColor, drawInt (iValue));\n  BLANK;\n}\n//----------------------------------------------------------------\nvoid WriteDate()\n{\n  float c = 0.0;\n  c += drawInt(int(iDate.x));       _sub;\n  c += drawInt(int(iDate.y +1.0));  _sub;\n  c += drawInt(int(iDate.z)); _\n  vColor = mix(vColor, drawColor, c);\n}\n//----------------------------------------------------------------\nvoid WriteTime()\n{\n  float c = 0.0;\n  c += drawInt(int(mod(iDate.w / 3600.0, 24.0)));    _ddot;\n  c += drawInt(int(mod(iDate.w / 60.0 ,  60.0)),2);  _ddot;\n  c += drawInt(int(mod(iDate.w,          60.0)),2);  _\n  vColor = mix(vColor, drawColor, c);\n}\n//----------------------------------------------------------------\nvoid WriteFPS()\n{\n  // print Frames Per Second - FPS  see https://www.shadertoy.com/view/lsKGWV\n  //float fps = (1.0 / iTimeDelta + 0.5);\n  float fps = iFrameRate;\n  SetColor (0.8, 0.6, 0.3);\n  WriteFloat(fps, 6, 1);\n  float c = 0.0;\n  _f _p _s\n  // _ WriteFloat(iTimeDelta*1000., 8, 1); _m _s\n  vColor = mix(vColor, drawColor, c);\n}\n//----------------------------------------------------------------\nvoid WriteMousePos(float ytext, vec2 mPos)\n{\n  int digits = 3;\n  float radius = resolution.x / 200.;\n\n  // print dot at mPos.xy\n  if (iMouse.z > 0.0) dotColor = mpColor;\n  float r = length(abs(mPos.xy) - pixelPos) - radius;\n  vColor += mix(vec3(0), dotColor, (1.0 - clamp(r, 0.0, 1.0)));\n\n  // print first mouse value\n  SetTextPosition(1., ytext);\n\n  // print mouse position\n  if (ytext == 7.)\n  {\n    drawColor = mxColor;\n    WriteFloat(mPos.x,6,3);\n    BLANK;\n    drawColor = myColor;\n    WriteFloat(mPos.y,6,3);\n  }\n  else\n  {\n    drawColor = mxColor;\n    WriteInteger(int(mPos.x));\n    BLANK;\n    drawColor = myColor;\n    WriteInteger(int(mPos.y));\n  }\n}    \n//----------------------------------------------------------------\nvoid WriteText1()\n{\n  SetTextPosition(1.,1.);\n  float c = 0.0;\n  _star _ _V _i _e _w _ _S _h _a _d _e _r \n  \n  _ _D _a _t _a _ _2 _ _ _v _1 _dot _5 _ _star \n      \n  vColor += c * headColor;\n}\n//----------------------------------------------------------------\nvoid WriteWebGL()     // browser test: http://webglreport.com/?v=2\n{\n  SetTextPosition(1.,3.);\n  float c = 0.0;\n  _W _e _b _G _L\n  \n  #if __VERSION__ >= 300\n    _2\n  #else                               // webGL1\n    _1\n    #ifdef GL_EXT_shader_texture_lod  // textureLOD\n      _ _t _e _x _t _L _ O _ D \n    #endif\n\n    #ifdef GL_EXT_draw_buffers        // multiple buffers\n      _ _m _u _l _t _B _u _f\n    #endif\n  #endif\n      \n  vColor += c * headColor;\n}\n//----------------------------------------------------------------\nvoid WriteTestValues()\n{\n  float c = 0.0;\n  SetTextPosition(1.,12.);\n    c += drawInt(123, 8);\n  _ c += drawInt(-1234567890);    // right now !!!\n  _ c += drawInt(0);\n  _ c += drawInt(-1);\n  _ c += drawFloat(-123.456, 3);     // right now !!!\n\n  SetTextPosition(1.,13.);\n    c += drawInt(-123, 8);\n  _ c += drawInt(1234567890,11);\n    c += drawFloat(0.0,0,0);\n  _ c += drawFloat(1.0,0,0);\n  _ c += drawFloat(654.321, 3);      // nearly right\n  _ c += drawFloat(999.9, 1);\n  _ c += drawFloat(pow(10., 3.),1);\n    c += drawFloat(pow(10., 6.),1);\n  \n  SetTextPosition(1.,14.);\n  c += drawFloat(exp2(-126.0),60);\n  vColor += c * headColor;\n}\n//---------------------------------------------------------\n// draw ring at given position\n//---------------------------------------------------------\nfloat ring(vec2 pos, float radius, float thick)\n{\n  return mix(1.0, 0.0, smoothstep(thick, thick + 0.01, abs(length(uv-pos) - radius)));\n}\n//----------------------------------------------------------------\n// define center coodinates\n//#define CC(c) ((2.0 * c / resolution.xy - 1.0) * ratio)\n#define CC(c) ((2.0*c.xy-iResolution.xy) / iResolution.y)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  resolution = iResolution.xy;\n  aspect = resolution.x / resolution.y;    // aspect ratio\n  vec2 ratio = vec2(aspect, 1.0);\n  pixelPos = fragCoord.xy;  //  0 .. resolution\n  mousePos = iMouse.xy;     //  0 .. resolution\n  uv = CC(fragCoord.xy);    // -1 .. 1 pixel position\n  mp = CC(abs(iMouse.xy));  // -1 .. 1 current mouse position\n  lp = CC(abs(iMouse.zw));  // -1 .. 1 last mouse position\n  \n  // draw screen axis\n  vColor = mix(vColor, vec3(0.2), drawLineSegment(vec2(-99.,0.), vec2(99.,0.), 0.01));\n  vColor = mix(vColor, vec3(0.2), drawLineSegment(vec2(0.,-99.), vec2(0.,99.), 0.01));\n\n  // version & test values   \n  WriteText1();\n  WriteWebGL();  \n  WriteTestValues();\n\n  // mouse position & coordinates\n  WriteMousePos(5., iMouse.zw);  // last position\n  WriteMousePos(6., iMouse.xy);  // current position\n\n  // write r = circle Radius\n  float radius = length(mp - lp);\n  SetColor (0.9, 0.9, 0.2);\n  float c = 0.0;\n  _  _r _eq\n  vColor += c * drawColor;\n  WriteFloat (radius,6,2);\n\n  // draw circle\n  if (iMouse.z > 0.0)\n  {\n    float intensity = ring(lp, radius, 0.01);\n    drawColor = vec3(1.5, 0.4, 0.5);\n    vColor = mix(vColor, drawColor, intensity*0.2);\n  }\n\n  // Resolution\n  SetTextPosition(27.0, 1.0);\n  SetColor (0.8, 0.8, 0.8);\n  WriteInteger(int(iResolution.x));  _star _  vColor += c * drawColor;\n  WriteInteger(int(iResolution.y));\n\n  // KeyPressed\n  SetTextPosition(1.0, 16.);\n  SetColor (0.9, 0.7, 0.8);\n  for (int ci=0; ci<256; ci++)\n  if (keyClick(ci)) WriteInteger(ci);\n    \n  // Date\n  SetTextPosition(1.0, 19.);\n  SetColor (0.9, 0.9, 0.4);\n  WriteDate();\n  BLANK\n\n  // Time\n  SetColor (1.0, 0.0, 1.0);\n  WriteTime();\n  BLANK\n\n  // Frame Counter\n  SetColor (0.4, 0.7, 0.4);\n  WriteInteger(iFrame);\n  BLANK\n\n  // Shader Time\n  SetColor (0.0, 1.0, 1.0);\n  WriteFloat(iTime, 6, 2);\n  BLANK\n\n  // Frames Per Second\n  WriteFPS();\n\n  fragColor = vec4(vColor,1.0);\n}\n","name":"Image","description":"","type":"image"}]}