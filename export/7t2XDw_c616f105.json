{"ver":"0.1","info":{"id":"7t2XDw","date":"1628615052","viewed":81,"name":"Strange Moon V1","username":"Vinicius_Jesus","description":"Playing with ray march.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["moon","blend"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS      100\n#define MAX_DIST       100.\n#define SURF_DIST      .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec4 Tex3D(in vec3 p, in vec3 n, sampler2D s) {\n    return texture(s, p.yz, 0.0) * abs(n.x) + \n           texture(s, p.xz, 0.0) * abs(n.y) + \n           texture(s, p.xy, 0.0) * abs(n.z);\n}\n\nfloat dispSphere(vec3 samplePos, float r) {\n    return length(samplePos) - r;\n}\n\nfloat distTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat distBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat distCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat smin(in float a, in float b, float k){\n    float h = max(k - abs(a-b), 0.);\n    return min(a,b) - h*h/(k*4.);\n}\n\nfloat smax(in float a, in float b, float k){\n    float h = max(k - abs(a-b), 0.);\n    return max(a,b) + h*h/(k*4.);\n}\n\n\nfloat GetDist(vec3 p) {\n    \n    float t = iTime;\n    \n    //head\n    float d = dispSphere(p-vec3(0,0,0), 1.55);\n    float d2 = dispSphere(p-vec3(0,-.45,-.1), 1.45);\n    \n    d = smin(d, d2, .15);\n    \n    float mR = dispSphere(p-vec3(.5,.12,-.8), .75);\n    float mL = dispSphere(p-vec3(-.5,.12,-.8), .75);\n    \n    d = smin(d, mR, 0.05);\n    d = smin(d, mL, 0.05);\n    \n    //eyebrow\n    float eyebrowR = distCapsule(p-vec3(.2,.5,-1.75), vec3(.6,.3,.7), vec3(.3,.0,.3), .04);\n    float eyebrowL = distCapsule(p-vec3(-.2,.5,-1.75), vec3(-.3,.0,.3), vec3(-.6,.3,.7), .04);\n    \n    d = smin(d, eyebrowR, .35);\n    d = smin(d, eyebrowL, .35);\n    \n    // nouse\n    float nouse = distCapsule(p-vec3(0,-.2,-1.9), vec3(0,.4,.4), vec3(0,0,0), .05);\n    float nouseC = distCapsule(p-vec3(0,-.2,-2.), vec3(0,.4,.4), vec3(0,0,0), .1);\n    float nouseR = distCapsule(p-vec3(.1,-.25,-1.78), vec3(.2,.05,.1), vec3(0,0,0), .05);\n    float nouseL = distCapsule(p-vec3(-.1,-.25,-1.78), vec3(0,0,0), vec3(-.2,.05,.1), .05);\n    \n    nouse = smin(nouse, nouseR, .4);\n    nouse = smin(nouse, nouseL, .4);\n    nouse = smin(nouse, nouseC, .1);\n    d = smin(d, nouse, .38);\n    \n    \n    // eye hole\n    float eyeHoleR = length(p-vec3(1.,.2,-1.5))-.3;\n    float eyeHoleL = length(p-vec3(-1.,.2,-1.5))-.3;\n    \n    float eyeHole = smin(eyeHoleR, eyeHoleL, 2.7);\n    \n    d = smax(d, -eyeHole, .03);\n    \n    //mouth\n    float mouth = distCapsule(p-vec3(-.5,-.85,-1.4), vec3(1.,0,.2), vec3(0,0,.2), .35);\n    d = smax(d, -mouth, .03);\n    \n    float bump = 0.0;\n    \n    float factor = .02;\n    float scale = .55;\n\tif(d < d + factor) {\n\t\tbump = Tex3D(p * scale, normalize(p), iChannel0).r * factor;\n\t}\n    \n    d += bump;\n    \n    //eye\n    float eyeR = length(p-vec3(.7,.1,-1.1))-.2;\n    float eyeL = length(p-vec3(-.7,.1,-1.1))-.2;\n    \n    d = smin(d, eyeR, .01);\n    d = smin(d, eyeL, .01);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat res = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 pos = ro + rd * res;\n        float d = GetDist(pos);\n        res += d;\n        if(res>MAX_DIST || d<SURF_DIST) break;\n    }\n    \n    return res;\n}\n\nvec3 GetNormal(vec3 pos) {\n\tvec2 e = vec2(0.0001, 0.);\n    return normalize(vec3(GetDist(pos+e.xyy)-GetDist(pos-e.xyy),\n                          GetDist(pos+e.yxy)-GetDist(pos-e.yxy),\n                          GetDist(pos+e.yyx)-GetDist(pos-e.yyx)));\n\n}\n\nfloat GetLight(vec3 pos, vec3 lightPos) {\n    vec3 l = normalize(lightPos-pos);\n    vec3 n = GetNormal(pos);\n    return clamp(dot(n, l)*.5+.5, 0., 1.);\n}\n\nvec3 Ray(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n         r = normalize(cross(vec3(0,1,0), f)),\n         u = cross(f,r),\n         c = p+f*z,\n         i = c + uv.x*r + uv.y*u,\n         d = normalize(i-p);\n         \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0, -7.);\n    ro.yz *= Rot(m.y*6.2831);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = Ray(uv, ro, vec3(0,0,0), 1.5);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tfloat dif = GetLight(p, vec3(0, 8, 0));\n    \tcol = vec3(dif);\n        \n        //col *= vec3(1,0,0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}