{"ver":"0.1","info":{"id":"XftyD8","date":"1730576508","viewed":69,"name":"beam shooting","username":"phrygian","description":"shoot a beam to the mouse position","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["beam","glow","shooting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    // vec2 uv = fragCoord;\n    \n    // Get mouse position in normalized coordinates\n    vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    // vec2 mouse = iMouse.xy;\n    \n    // Center point (origin of the beam)\n    vec2 center = vec2(0.0);\n    \n    // Animation parameters\n    float growDuration = 0.5;    // Time to reach target\n    float lingerDuration = 0.3;  // Time to stay at full intensity\n    float fadeDuration = 0.8;    // Time to fade out\n    float totalDuration = growDuration + lingerDuration + fadeDuration;\n    \n    // Beam thickness and glow parameters\n    float coreThickness = 0.003;    // White core\n    float beamThickness = 0.004;    // Main beam\n    float glowThickness = 0.02;     // Outer glow\n    \n    // Calculate beam direction and target length\n    vec2 beamDir = normalize(mouse - center);\n    float targetLength = length(mouse - center);\n    \n    // Local time for the beam animation\n    float localTime = mod(iTime, totalDuration);\n    \n    // Calculate current beam length and fade\n    float currentLength;\n    float fade = 1.0;\n    float rootIntensity = 1.0;\n    float impactIntensity = 0.0;\n    \n    if (localTime < growDuration) {\n        // Growing phase\n        currentLength = targetLength * (localTime / growDuration);\n        fade = 1.0;\n        rootIntensity = 1.0;\n        impactIntensity = 0.0;\n    } \n    else if (localTime < growDuration + lingerDuration) {\n        // Lingering phase\n        currentLength = targetLength;\n        fade = 1.0;\n        rootIntensity = 1.0;\n        // Pulse the impact effect during linger\n        float lingerTime = (localTime - growDuration) / lingerDuration;\n        impactIntensity = 1.0 + 0.2 * sin(lingerTime * 30.0);\n    }\n    else {\n        // Fading phase\n        currentLength = targetLength;\n        float fadeTime = localTime - (growDuration + lingerDuration);\n        fade = 1.0 - (fadeTime / fadeDuration);\n        rootIntensity = fade;\n        impactIntensity = fade * 0.5;\n    }\n    \n    // Distance from current pixel to the line segment (beam)\n    vec2 p = uv - center;\n    float h = clamp(dot(p, beamDir) / currentLength, 0.0, 1.0);\n    vec2 projection = center + beamDir * h * currentLength;\n    float dist = length(uv - projection);\n    \n    // Create the beam layers\n    float core = smoothstep(coreThickness, 0.0, dist);\n    float beam = smoothstep(beamThickness + glowThickness, beamThickness, dist);\n    \n    // Root circle parameters\n    float rootRadius = 0.03;        // Size of the root circle\n    float rootGlow = 0.04;          // Size of the root circle's glow\n    float distFromRoot = length(uv - center);\n    float rootCircle = smoothstep(rootRadius + rootGlow, rootRadius, distFromRoot);\n    float rootCore = smoothstep(rootRadius * 0.5, 0.0, distFromRoot);\n    \n    // Impact effect at target\n    vec2 targetPos = center + beamDir * currentLength;\n    float distFromTarget = length(uv - targetPos);\n    float impactRadius = 0.01;\n    float impactGlow = 0.05;\n    \n    // Create expanding ring effect\n    float ringSize = impactRadius * (1.0 + 0.3 * sin(localTime * 10.0));\n    float ringThickness = 0.005;\n    float ring = smoothstep(ringSize + ringThickness, ringSize, distFromTarget) \n                 - smoothstep(ringSize, ringSize - ringThickness, distFromTarget);\n    \n    // Create central impact glow\n    float impactCore = smoothstep(impactRadius + impactGlow, impactRadius, distFromTarget);\n    float impact = impactCore + ring * 0.5;\n    \n    // Root fade effect\n    float rootFade = 1.0;\n    if (localTime >= growDuration + lingerDuration) {\n        float fadeTime = localTime - (growDuration + lingerDuration);\n        float fadeProgress = fadeTime / fadeDuration;\n        rootFade = smoothstep(fadeProgress, fadeProgress + 0.2, h);\n    }\n    \n    // Color gradient for the main beam\n    vec3 beamColor = mix(\n        vec3(0.2, 0.6, 1.0), // Blue core\n        vec3(0.1, 0.3, 1.0), // Darker blue edge\n        dist / (beamThickness + glowThickness)\n    );\n    \n    // Combine core and beam\n    vec3 col = mix(beamColor, vec3(1.0), core) * beam * fade * rootFade;\n    \n    // Add bloom/glow effect\n    float bloom = smoothstep(beamThickness + glowThickness, beamThickness, dist * 0.5);\n    col += beamColor * bloom * 0.5 * fade * rootFade;\n    \n    // Add root circle with glow\n    vec3 rootCol = mix(beamColor, vec3(1.0), rootCore);\n    col += rootCol * rootCircle * rootIntensity;\n    \n    // Add impact effect\n    vec3 impactCol = mix(beamColor * 1.5, vec3(1.0), 0.5);\n    col += impactCol * impact * impactIntensity;\n    \n    // Output final color\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}