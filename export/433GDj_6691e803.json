{"ver":"0.1","info":{"id":"433GDj","date":"1716992468","viewed":50,"name":"2D SDF Studies - 00","username":"zschzen","description":"a simple studie","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","studies"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 0 = Distance Field Display\n// 1 = Raymarched Edges\n// 2 = Resulting Solid\n#define DISPLAY 0\n\n#define DEBUG\n\n#define LERP_TIME 1.0\n#define STAY_TIME 2.0\n\nconst vec3 POSITIVE_BG = vec3( 0.3843, 0.4471, 0.6431 );\nconst vec3 NEGATIVE_BG = vec3( 1.0   , 0.3333, 0.3333 );\nconst vec3 DISTANCE    = vec3( 0.9451, 0.9804, 0.5490 );\nconst vec3 BORDER      = vec3( 0.9725, 0.9725, 0.9490 );\n\n// Combined signed distance function for the shape\nfloat\nmap( in vec2 p, in float r, in vec2 b )\n{\n    float dCircle   = 0.0;\n    float dTriangle = 0.0;\n    float dBox      = 0.0;\n    float dPent     = 0.0;\n\n    p *= rot2D( cos(iTime * 0.9) * PI * .5 );\n\n    // Circle\n    {\n        // xy position. z radius\n        vec3 c  = vec3( 0, 0, 0.5 );\n        dCircle = sdCircle( p - c.xy, c.z );\n    }\n\n    // Triangle\n    {\n        // xy position. z radius\n        vec3 t    = vec3( 0, 0, 0.5 );\n        dTriangle = sdEquilateralTriangle( p - t.xy, t.z );\n    }\n\n    // Box\n    {\n        // xy position. zw size\n        vec4 b = vec4( 0, 0, 0.25, 0.25 );\n        dBox   = sdBox( p - b.yx, b.zw );\n    }\n    \n    // Pent\n    {\n        // xy position. z radius\n        vec3 pt    = vec3( 0, 0, 0.5 );\n        dPent = sdPentagon( p - pt.xy, pt.z );\n    }\n\n    float progress = fract(iTime * 0.125);\n\n    // Transition speed per unit of time (normalized)\n    float tSpeed = 0.125;\n    float tStatic = (1.0 - tSpeed * 4.0) / 4.0;\n    float shapeDuration = tStatic + tSpeed;\n\n    float d = mix(dCircle, dTriangle, smoothstep(0.0, tSpeed, progress));\n    d = mix(d, dBox, smoothstep(shapeDuration, shapeDuration + tSpeed, progress));\n    d = mix(d, dPent, smoothstep(shapeDuration * 2.0, shapeDuration * 2.0 + tSpeed, progress));\n    d = mix(d, dCircle, smoothstep(shapeDuration * 3.0, shapeDuration * 3.0 + tSpeed, progress));\n\n    return d;\n}\n\nvoid\nmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = ( fragCoord * 2. - iResolution.xy ) / iResolution.y;\n    vec2 m = ( iMouse.xy * 2. - iResolution.xy ) / iResolution.y;\n\n    float d = map( p, 0.5, vec2( 0.5 ) );\n    \n    vec3 col = vec3(0.0);\n\n    // Coloring\n#if DISPLAY == 0\n    col = ( d > 0.0 ) ? POSITIVE_BG : NEGATIVE_BG;\n    col *= 1.0 - exp( -6.0 * abs( d ) );\n    col *= 0.8 + 0.2 * cos( 150.0 * d + ( iTime * 15.0 * d / abs( d ) ) );\n    col = mix( col, BORDER, 1.0 - smoothstep( 0.0, 0.01, abs( d ) ) );\n#endif\n#if DISPLAY == 1\n    col = mix( POSITIVE_BG, BORDER, 1.0 - smoothstep( 0.0, 0.01, abs( d ) ) );\n#endif\n#if DISPLAY == 2\n    col = ( d > 0.0 ) ? POSITIVE_BG : NEGATIVE_BG;\n    col = mix( col, BORDER, 1.0 - smoothstep( 0.0, 0.01, abs( d ) ) );\n#endif\n\n#ifdef DEBUG\n    if ( iMouse.z > 0.0 )\n        {\n            d = map( m.xy, 0.5, vec2( 0.5 ) );\n            col = mix( col, DISTANCE, 1.0 - smoothstep( 0.0, 0.005, abs( length( p - m ) - abs( d )) - 0.0025 ) );\n            col = mix( col, DISTANCE, 1.0 - smoothstep( 0.0, 0.005, length( p - m ) - 0.015 ) );\n        }\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI  3.1415925359\n#define TAU 6.2831850718\n\n// --------------------------------------------------------\n\nmat2 rot2D( float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    \n    return mat2( c, -s, s, c );\n}\n\n// --------------------------------------------------------\n// https://iquilezles.org/articles/distfunctions2d/\n// --------------------------------------------------------\n\nfloat sdCircle(in vec2 p, in float r)\n{\n    return length(p) - r;\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdBox(in vec2 p, in vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}","name":"Common","description":"","type":"common"}]}