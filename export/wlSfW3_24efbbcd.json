{"ver":"0.1","info":{"id":"wlSfW3","date":"1599979243","viewed":361,"name":"Rounded corner antialiasing","username":"vegardno","description":"Click and drag horizontally to change the corner radius.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","line","pixel","antialiasing","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst int nr_levels = 4;\n\n// https://www.shadertoy.com/view/tlSGzG\nfloat sdArc2 (in vec2 p, in float a0, in float a1, in float r )\n{\n    float a = mod(atan(p.y, p.x), radians(360.));\n\n    float ap = a - a0;\n    if (ap < 0.)\n        ap += radians(360.);\n    float a1p = a1 - a0;\n    if (a1p < 0.)\n        a1p += radians(360.);\n\n    // is a outside [a0, a1]?\n    // https://math.stackexchange.com/questions/1044905/simple-angle-between-two-angles-of-circle\n    if (ap >= a1p) {\n        // snap to the closest of the two endpoints\n        vec2 q0 = vec2(r * cos(a0), r * sin(a0));\n        vec2 q1 = vec2(r * cos(a1), r * sin(a1));\n        return min(length(p - q0), length(p - q1));\n    }\n\n    return abs(length(p) - r);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    fragCoord = 2. * fragCoord - iResolution.xy;\n\n    const float scale = .05;\n\n    float pixel_radius = .5 / iResolution.y;\n    bool quantize;\n    if (fragCoord.x < 0.) {\n        fragCoord.x += .5 * iResolution.x;\n        fragCoord *= scale;\n        fragCoord = round(fragCoord);\n        pixel_radius *= 1. / sqrt(2.);\n        quantize = true;\n    } else {\n        fragCoord.x -= .5 * iResolution.x;\n        fragCoord *= scale;\n        pixel_radius *= 3. * scale;\n        quantize = false;\n    }\n\n    fragCoord += vec2(8., -8.);\n    \n    vec2 uv = fragCoord / iResolution.y;\n\n    float r = mix(0. - 5., 16. + 5., iMouse.x / iResolution.x);\n    r = clamp(r, 0., 16.);\n    r /= iResolution.y;\n    \n    float d = sdArc2(uv - vec2(r, -r), radians(90.), radians(180.), r);\n\td = min(d, sdSegment(uv, vec2(0., -16.) / iResolution.y, vec2(0., -r)));\n    d = min(d, sdSegment(uv, vec2(16., 0.) / iResolution.y, vec2(r, 0.)));\n    d = d - .5 / iResolution.y;\n\n    // antialias\n    float v = smoothstep(-pixel_radius, pixel_radius, d);\n\n    // quantize\n    if (quantize) {\n    \tconst float nr_levels_f = float(nr_levels - 1);\n    \tv = round(nr_levels_f * v) / nr_levels_f;\n    }\n\n    // gamma correction\n    vec3 col = vec3(1.) * pow(v, 1. / 2.2);\n    \n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}