{"ver":"0.1","info":{"id":"MdcSDs","date":"1707350083","viewed":47,"name":"Frequency Convolution Test","username":"Cellulose","description":"Visualizing the fourier domain of two signals which are being multiplied together, which convolves the frequencies.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["modulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nvec2 genRealFreq(float freq, float param)\n{\n    return .5 * vec2(\n        snoise(vec2(freq, param     )) + snoise(vec2(-freq, param)),\n        snoise(vec2(freq, param+17.0)) - snoise(vec2(-freq, param+17.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 imgPos = fragCoord.xy / iResolution.xy;\n    \n    vec2 param = vec2(1.1*imgPos.x-.1, 1.1*imgPos.y-.1),\n        param2 = vec2(iMouse.x, iMouse.y),\n        paramfold = vec2(17.0*(param.x-.5), 13.0*(param.y-.5));\n    \n    vec2\n        av = genRealFreq(paramfold.x, param2.x),\n        bv = genRealFreq(paramfold.y, param2.x);\n    \n    vec2 modv = vec2(av.x*bv.x-av.y*bv.y, av.x*bv.y+av.y*bv.x);\n    \n    vec2 showv = vec2(0.0, 0.0);\n    \n    if (param.x < 0.0) showv = bv;\n    if (param.y < 0.0) showv = av;\n    if (param.x >= 0.0 && param.y >= 0.0) showv = modv;\n    \n    float mag = .125 + .375 * fract(length(showv)),\n        phase = atan(showv.y, showv.x);\n    \n\tfragColor.r = mag+mag*cos(phase);\n    fragColor.g = mag+mag*cos(phase + 2.0943951024);\n    fragColor.b = mag+mag*cos(phase - 2.0943951024);\n}","name":"Image","description":"","type":"image"}]}