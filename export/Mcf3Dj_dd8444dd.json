{"ver":"0.1","info":{"id":"Mcf3Dj","date":"1703544197","viewed":56,"name":"FBM Voronoi","username":"beans_please","description":"i like voronoi","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","noise","random","worley","cellular","prng","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 screen_to_uv(vec2 coord)\n{\n    return 2. * (coord - .5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\n// Random offset for a corner point\nvec2 cell_corner_offs(ivec2 icell, float cell_size)\n{\n    // We don't want to move away a corner point so far that it passes\n    // another corner point, so we limit their offset to a circle of\n    // radius .5 * cell_size.\n    prng_init(uvec2(icell));\n    return .5 * cell_size * random_in_circle();\n}\n\nfloat voronoi(vec2 coord)\n{\n    const float cell_size = 1.;\n\n    // Cell indices\n    ivec2 icell = ivec2(floor(coord / cell_size));\n    \n    // Corner positions (bottom left, top left, etc.)\n    vec2 cell_bl = vec2(icell) * cell_size;\n    vec2 cell_tl = cell_bl + vec2(0, cell_size);\n    vec2 cell_tr = cell_bl + vec2(cell_size);\n    vec2 cell_br = cell_bl + vec2(cell_size, 0);\n    \n    // Randomly offset the corner points\n    cell_bl += cell_corner_offs(icell, cell_size);\n    cell_tl += cell_corner_offs(icell + ivec2(0, 1), cell_size);\n    cell_tr += cell_corner_offs(icell + ivec2(1, 1), cell_size);\n    cell_br += cell_corner_offs(icell + ivec2(1, 0), cell_size);\n    \n    // Smallest distance between coord and any of the 4 corners\n    float dist = min(\n        distance(coord, cell_bl),\n        distance(coord, cell_tl)\n    );\n    dist = min(dist, distance(coord, cell_tr));\n    dist = min(dist, distance(coord, cell_br));\n    \n    // Divide by the largest value to normalize the output between 0\n    // and 1. The largest distance between coord and a corner can be\n    // found if we assume that the corner moved away from coord all the\n    // way to the limit which is a circle of radius .5 * cell_size.\n    // (See function random_cell_corner_offs()).\n    // Unoptimized:\n    // const float max_dist = cell_size * length(vec2(\n    //     .5 + .5 * sqrt(.5)\n    // ));\n    const float max_dist = cell_size * 1.2071068;\n    const float fac = 1. / max_dist;\n    \n    return dist * fac;\n}\n\nfloat voronoi_fractal(\n    vec2 coord,\n    int depth,\n    float roughness,\n    float lacunarity\n)\n{\n    float v = 0.;\n    float sum_fac = 0.;\n    \n    for (int i = 0; i < depth; i++)\n    {\n        // Factor (impact of the current layer)\n        float fac = 0.;\n        roughness = clamp(roughness, -1., 1.);\n        if (roughness < 0.)\n        {\n            // Roughness [-1, 0) will go from fully smooth to normal\n            fac = pow(\n                lacunarity / max(roughness + 1., .0001),\n                float(-i)\n            );\n        }\n        else\n        {\n            // Roughness [0, 1] will go from normal to fully rough\n            fac = pow(\n                mix(lacunarity, 1., roughness),\n                float(-i)\n            );\n        }\n        sum_fac += fac;\n        \n        // Scale of the current layer\n        float scale = pow(lacunarity, float(i));\n        \n        // Add sample\n        v += fac * voronoi(coord * scale);\n        \n        // Move and rotate the next layer\n        coord += 100.;\n        coord *= rotate_2d(1.09956);\n    }\n    \n    return v / sum_fac;\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec2 uv = screen_to_uv(frag_coord) + .2 * iTime;\n    \n    vec2 coord = 3. * uv;\n    int depth = 6;\n    float roughness = sin(TAU * .1 *  iTime);\n    float lacunarity = 2.;\n    \n    vec3 col = vec3(voronoi_fractal(\n        coord,\n        depth,\n        roughness,\n        lacunarity\n    ));\n    \n    // Output\n    col = pow(col, vec3(1. / 2.2));\n    frag_col = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*_________________ Math Utils ________________*/\n\n#define PI 3.1415926535897932384626433832\n#define TAU 6.283185307179586476925286766\n#define PI_OVER_2 1.57079632679489661923132169163\n\n#define FUNC_LERP(T) \\\nT lerp(T a, T b, float t) \\\n{ \\\n    return a + t*(b-a); \\\n}\n\n#define FUNC_WRAP(T) \\\nT wrap(T inp, float start, float end) \\\n{ \\\n    return start + mod(inp - start, end - start); \\\n}\n\n#define FUNC_REMAP(T) \\\nT remap(T inp, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    return out_start + ((out_end - out_start) / (inp_end - inp_start)) * (inp - inp_start); \\\n}\n\n#define FUNC_REMAP_CLAMP(T) \\\nT remap_clamp(T inp, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    T t = clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0); \\\n    return out_start + t * (out_end - out_start); \\\n}\n\n#define FUNC_REMAP01(T) \\\nT remap01(T inp, float inp_start, float inp_end) \\\n{ \\\n    return clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0); \\\n}\n\nFUNC_LERP(float)\nFUNC_LERP(vec2)\nFUNC_LERP(vec3)\nFUNC_LERP(vec4)\n\nFUNC_WRAP(float)\nFUNC_WRAP(vec2)\nFUNC_WRAP(vec3)\nFUNC_WRAP(vec4)\n\nFUNC_REMAP(float)\nFUNC_REMAP(vec2)\nFUNC_REMAP(vec3)\nFUNC_REMAP(vec4)\n\nFUNC_REMAP_CLAMP(float)\nFUNC_REMAP_CLAMP(vec2)\nFUNC_REMAP_CLAMP(vec3)\nFUNC_REMAP_CLAMP(vec4)\n\nFUNC_REMAP01(float)\nFUNC_REMAP01(vec2)\nFUNC_REMAP01(vec3)\nFUNC_REMAP01(vec4)\n\nmat2 rotate_2d(float angle)\n{\n    return mat2(cos(angle), sin(angle), cos(angle + PI_OVER_2), sin(angle + PI_OVER_2));\n}\n\n/*____________________ End ____________________*/\n\n\n\n/*_______ Pseudo-Random Number Generator ______*/\n// Source: https://www.shadertoy.com/view/WdSSRt\n\n/* Usage Example:\n    void mainImage(out vec4 frag_col, in vec2 frag_coord)\n    {\n        // Initialize PRNG\n        prng_init(vec3(frag_coord / iResolution.y, iTime));\n    \n        // Using the function\n        float a = random();\n        vec3 b = vec3(random(), random(), random());\n        \n        ...\n    }\n*/\n\nuint prng_state[2];\n\nuint prng_rot(uint x, int k)\n{\n    return (x << k) | (x >> (32 - k));\n}\n\n// Random uint from 0 to 2^32-1\nuint randomui()\n{\n    uint s0 = prng_state[0];\n    uint s1 = prng_state[1];\n    uint result = prng_rot(s0 * 0x9e3779bbu, 5) * 5u;\n    s1 ^= s0;\n    prng_state[0] = prng_rot(s0, 26) ^ s1 ^ (s1 << 9);\n    prng_state[1] = prng_rot(s1, 13);\n    return result;\n}\n\n// Random int from 0 to 2^31-1\nint randomi()\n{\n    return int(randomui() % 0x7FFFFFFFu);\n}\n\n// Random float from 0 to 1\nfloat random()\n{\n    return float(randomui()) / float(0xffffffffu);\n}\n\n// Generate two normally distributed random numbers using the\n// Box-Muller Transform.\n// https://www.baeldung.com/cs/uniform-to-normal-distribution\nvec2 random_gauss()\n{\n    float u1 = random();\n    float u2 = random() * TAU;\n    float temp = sqrt(-2. * log(u1));\n    return temp * vec2(cos(u2), sin(u2));\n    \n    // Unoptimized version\n    //float u1 = random();\n    //float u2 = random();\n    //return vec2(cos(TAU * u2), sin(TAU * u2)) * sqrt(-2. * log(u1));\n}\n\nvec2 random_unit_vec2()\n{\n    vec2 v = vec2(1);\n    float lensqr;\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec2(2. * random() - 1., 2. * random() - 1.);\n        lensqr = dot(v, v);\n        if (lensqr == 0.)\n            i--;\n        else if (lensqr <= 1.)\n            break;\n    }\n    return v / sqrt(lensqr);\n}\n\nvec3 random_unit_vec3()\n{\n    vec3 v = vec3(1);\n    float lensqr;\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec3(2. * random() - 1., 2. * random() - 1., 2. * random() - 1.);\n        lensqr = dot(v, v);\n        if (lensqr == 0.)\n            i--;\n        else if (lensqr <= 1.)\n            break;\n    }\n    return v / sqrt(lensqr);\n}\n\nvec2 random_in_circle()\n{\n    vec2 v = vec2(1);\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec2(2. * random() - 1., 2. * random() - 1.);\n        if (dot(v, v) <= 1.)\n            return v;\n    }\n    return v;\n}\n\nvec3 random_in_sphere()\n{\n    vec3 v = vec3(1);\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec3(2. * random() - 1., 2. * random() - 1., 2. * random() - 1.);\n        if (dot(v, v) <= 1.)\n            return v;\n    }\n    return v;\n}\n\n// Initialize with uvec2\nvoid prng_init(uvec2 seed)\n{\n    seed += uvec2(1317, 944573125);\n    seed *= 464973573u;\n    prng_state[0] = seed.x;\n    prng_state[1] = seed.y;\n    randomi();\n}\n\n// Initialize with uint\nvoid prng_init(uint seed)\n{\n    prng_init(uvec2(seed, 1));\n}\n\n// Initialize with vec3\nvoid prng_init(vec3 seed)\n{\n    seed += 3.49276101561702;\n    seed.xy *= (seed.z + 10.258);\n    prng_state[0] = floatBitsToUint(seed.x);\n    prng_state[1] = floatBitsToUint(seed.y);\n    randomui();\n}\n\n// Initialize with vec2\nvoid prng_init(vec2 seed)\n{\n    prng_init(vec3(seed, 1));\n}\n\n// Initialize with float\nvoid prng_init(float seed)\n{\n    prng_init(vec3(seed, 1, 1));\n}\n\n/*____________________ End ____________________*/\n","name":"Common","description":"","type":"common"}]}