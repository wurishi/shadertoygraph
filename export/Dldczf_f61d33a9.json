{"ver":"0.1","info":{"id":"Dldczf","date":"1699498752","viewed":31,"name":"Shimmering Dots","username":"twilson023","description":"Shimmering dots inspired by @JohnPhamous","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DOT_SIZE 0.01\n#define GRID_SCALE 60.0\n#define NOISE_SCALE 2.0\n#define SPEED 0.5\n\n// 2D Simplex noise from https://github.com/stegu/webgl-noise\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x * 34.0) + 10.0) * x);\n}\n\nfloat noise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\n    0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n    -0.577350269189626, // -1.0 + 2.0 * C.x\n    0.024390243902439); // 1.0 / 41.0\n  // First corner\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n\n  // Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  // Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) +\n    i.x + vec3(0.0, i1.x, 1.0));\n\n  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n  m = m * m;\n  m = m * m;\n\n  // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  // Normalise gradients implicitly by scaling m\n  // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n\n  // Compute final noise value at P\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// End noise functions\n\nfloat rand(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat dots(in vec2 uv) {\n  uv *= GRID_SCALE;\n\n  vec2 gridUv = fract(uv) - 0.5;\n  vec2 cell = floor(uv);\n\n  float m = clamp(DOT_SIZE / pow(length(gridUv), 2.0), 0.0, 1.5);\n  float time = iTime * SPEED;\n\n  float noiseMask = map(noise(cell / NOISE_SCALE + vec2(time, 0.0)), -1., 1., 0.0, 0.3);\n\n  return noiseMask * m * rand(cell);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n  fragColor = vec4(vec3(dots(uv)), 1.0);\n}","name":"Image","description":"","type":"image"}]}