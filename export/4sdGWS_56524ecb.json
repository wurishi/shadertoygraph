{"ver":"0.1","info":{"id":"4sdGWS","date":"1451985083","viewed":207,"name":"Untitled 02","username":"floz","description":"Untitled 02 - \nWeek1 - Shader everyday (style)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere","mod"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.141592654\n\n//------------------------------------------------------------------ VISUAL QUALITY\n#define RAYMARCHING_STEP 30\n#define RAYMARCHING_JUMP 1.\n\n//------------------------------------------------------------------ DEBUG\n//define RENDER_DEPTH\n//define RENDER_NORMAL\n//#define RENDER_AO\n\nfloat hash( float n ){//->0:1\n\treturn fract(sin(n)*3538.5453);\n}\n\n//------------------- CAMERA STUFF\n\nvec3 orbit(float phi, float theta, float radius)\n{\n\treturn vec3(\n\t\tradius * sin( phi ) * cos( theta ),\n\t\tradius * cos( phi ),\n\t\tradius * sin( phi ) * sin( theta )\n\t);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\treturn mat3( cu, cv, cw );\n}\n\n//------------------- PRIMITIVES\n\nvec2 rotate2D(vec2 p, float a) {\n return p * mat2(cos(a), -sin(a), sin(a),  cos(a));\n}\n\nfloat sphere( vec3 p, float r ) {\n\treturn length( p ) - r;\n}\n\nfloat displacement( vec3 p, float v ) {\n  float f = iTime * -0.5 + sin( iTime * 2. ) * 1.4;\n  return sin( 20. * sin( cos( f ) ) *p.x)*sin( 10. *sin( cos( f ) ) *p.y)*sin( 30. * sin( cos( f ) ) *p.z);\n}\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y+0.0000001, p.x+0.0000001) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r + 0.0000001;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n//------------------- MAP\n\nfloat map( in vec3 p ) {\n    vec3 np = vec3( p.x, p.y, p.z + 2. );\n    vec3 t = vec3( 2., 0., 2. );\n    //vec3 q = mod( np + vec3( 1., 0., -4. ), t ) - t * .5;\n    vec3 q = np;\n    q.xy = rotate2D( q.xy, iTime * -0.5 + sin( iTime * 2. ) * 0.4 );\n    pModPolar( q.xy, 4. + 4. * sin( cos( iTime*2. ) ) ); \n    q -= vec3( 1. + sin( iTime * 2.), 0., 0. );\n    \n    float p1 = sphere( q, .5 );\n    float p2 = displacement( q, 10. );\n    return p1 + p2 * ( 0.025 + 0.0025 * hash( sin( cos( iTime * -0.5 + sin( iTime * 2. ) * 0.4 ) ) ) );// * ( .025 * sin( iTime*2. ) + .025 * sin( sin( iTime * 4. ) ) );\n}\n\n//------------------- RAYMARCHING\n\n#ifdef RENDER_DEPTH\nfloat castRay( in vec3 ro, in vec3 rd, inout float depth ) {\n#else\nfloat castRay( in vec3 ro, in vec3 rd ) {\n#endif\n    float t = 0.;\n    float res;\n    for( int i = 0; i < RAYMARCHING_STEP; i++ ) {\n        vec3 pos = ro + rd * t;\n        res = map( pos );\n        if( res < .01 || t > 100. ) break;\n        t += res * RAYMARCHING_JUMP;\n        #ifdef RENDER_DEPTH\n\t\tdepth += 1./float(RAYMARCHING_STEP);\n\t\t#endif\n    }\n    return t;\n}\n\nvec3 calcNormal(vec3 pos) {\n    float eps = 0.001;\n\tconst vec3 v1 = vec3( 1.0,-1.0,-1.0);\n\tconst vec3 v2 = vec3(-1.0,-1.0, 1.0);\n\tconst vec3 v3 = vec3(-1.0, 1.0,-1.0);\n\tconst vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\treturn normalize( v1 * map( pos + v1*eps ) +\n    \t              v2 * map( pos + v2*eps ) +\n        \t          v3 * map( pos + v3*eps ) +\n            \t      v4 * map( pos + v4*eps ) );\n}\n\nfloat calcAO( in vec3 p, in vec3 n, float maxDist, float falloff ){\n\tfloat ao = 0.0;\n\tconst int nbIte = 6;\n\tfor( int i=0; i<nbIte; i++ )\n\t{\n\t\tfloat l = hash(float(i))*maxDist;\n\t\tvec3 rd = n*l;\n\t\tao += (l - map( p + rd )) / pow(1.+l, falloff);\n\t}\n\treturn clamp( 1.-ao/float(nbIte), 0., 1.);\n}\n    \nvec3 sundir = normalize( vec3(-1.0,0.,-1.0) );\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 uv ) {\n\tvec3 col = vec3( 1., .0, 1. );\n    \n    float sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n    vec3 colBg = vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5;\n\tcolBg += 0.2*vec3(1.0,.6,0.1)*pow( sun, 8.0 );\n    \n    #ifdef RENDER_DEPTH\n\tfloat depth = 0.;\n    float t = castRay( ro, rd, depth );\n    #else\n    float t = castRay( ro, rd );\n    #endif\n    \n    #ifdef RENDER_DEPTH\n    return vec3( depth / 5., depth, depth );\n    #endif\n    \n    vec3 pos = ro + t * rd;\n    vec3 nor = calcNormal( pos );\n    \n    #ifdef RENDER_NORMAL\n    return nor;\n    #endif\n    \n    float ao = calcAO( pos, nor, 10., 1.2 );\n    #ifdef RENDER_AO\n    return vec3( ao );\n    #endif\n    \n    //vec3 light = vec3( 1.5, 1., 1. );\n    \n    vec3 r = reflect( pos, nor );\n    float m = abs( 2. * sqrt( pow( r.x, 2. ) + pow( r.y, 2. ) + pow( r.z + 1., 2. ) ) );\n    col = colBg + colBg * max( dot( r, sundir ), 0. );\n    //col = col + col * vec3( reflect( pos, nor ) );\n    col += 0.2 * vec3( 1., 0.4, 0.2 ) * abs( pow( sun, 3. ) );\n    col *= ao;\n    \n    vec3 fog = vec3( 0. );\n    col = mix( col, colBg, 1. - exp( -.0125 * t * t ) );   \n    \n    col = col;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1. + 2. * uv;\n    p.x *= iResolution.x / iResolution.y;\n    \n    //vec2 m = iMouse.xy/iResolution.xy;\n    \n    // Camera\n    //vec3 ro = 4.0*normalize(vec3(sin(3.0*m.x), 0.4*m.y, cos(3.0*m.x)));\n    vec3 ro = vec3( 0.0000001, 0.0000001, 2. );\n    vec3 ta = vec3( 0.0000001, 0.0000001, 0.0000001 );\n    \n    // Camera to world transformation\n    mat3 ca = setCamera( ro, ta, 0. );\n    \n    // Ray direction\n    vec3 rd = ca * normalize( vec3( p.xy, 2. ) );\n    \n    // Raymarching\n    vec3 color = render( ro, rd, uv );\n    fragColor = vec4( color, 1. );\n}","name":"","description":"","type":"image"}]}