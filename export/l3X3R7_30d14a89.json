{"ver":"0.1","info":{"id":"l3X3R7","date":"1707263672","viewed":71,"name":"Lab3_JesseMcCormack","username":"jessesound","description":"Please god ignore the n and uv, they just gave me different results","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","interpolation","gradients"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 n = fragCoord / iResolution.xy;\n    \n    // 0 towards centre, 1 towards edges\n    float d = length(uv );\n    \n    // remap from [0, 1] to [-0.5, 0.5] (makes black centre larger)\n    d -= 0.8 - sin(iTime) *0.5;\n    \n    // [-0.5, 0.5] -> [0.0, 0.5]\n    d = abs(d);\n    \n    // Cut-off everything with a distance less than 0.1 (makes a solid ring)\n  d = step(0.1, d);\n    \n    // Same as above, but a smooth blend instead of a cutoff\n //  d = smoothstep(1.0 - n.x, 1.0 - n.y, d);\n    //gradient outside\n    vec3 hor = vec3(n.y,n.x, 0.0);\n    vec3 vert = vec3(n.y,n.x, 1.0);\n    vec3 colorMix = mix(hor, vert, 1.0);\n    \n    //gradient circle\n    \n\n\nvec3 cyan = vec3(0.0, 1.0, 1.0);\nvec3 purple = vec3(1.0, 0.0, 1.0);\nvec3 secondColorMix = mix(cyan, purple, (uv.x-0.6) - (uv.y-0.03) + 1.0);\n\n    vec3 color = mix(secondColorMix, colorMix, d) ;\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}