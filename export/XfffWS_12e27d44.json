{"ver":"0.1","info":{"id":"XfffWS","date":"1724247679","viewed":21,"name":"study 2024/08/21, l","username":"shoegz","description":"lighting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * 우현님의 강의 복습 (2024/08/21)\n * Lighting map 초간단 예제 만들어보기\n */\nconst float radius = 0.3; // 종횡비 짧은 쪽 1기준, 0.3정도의 반지름\nconst float epsilon = 0.25; // light의 radius, 반경\nconst vec3 lightColor = vec3(0.62, 0.34, 0.7);\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // 800 x 450 -> [0, 0] ~ [1, 1] 로 정규화(normalization)\n    // uv :  좌하단이 [0, 0], 우상단이 [1, 1] (glsl 기준)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // x값을 y  맞게 보정\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio; // 종횡비 보정\n    \n    // 터치 좌표를 normalization\n    vec2 touchPosition = iMouse.xy / iResolution.xy;\n    touchPosition.x *= aspectRatio; // 종횡비 보정\n    \n    // length는 거리값이므로, 0~1로 바꾸려면 루트2를 나눔? \n    float light = (length(uv - touchPosition) - radius) / sqrt(2.0);\n    \n    // smoothstep으로 부드럽게 보정 (SinInOut의 3차원 곡선 느낌, bezier curve의 수치 비슷?)\n    light = smoothstep(0.0, 0.33, light);\n\n    if (abs(light) < epsilon) {\n        fragColor = vec4(light, light, light, 1);\n    } else {\n        fragColor = vec4(0.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}