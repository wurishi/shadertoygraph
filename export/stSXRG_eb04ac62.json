{"ver":"0.1","info":{"id":"stSXRG","date":"1627910738","viewed":48,"name":"Simple Scale","username":"crucifer","description":"just scale the image ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tile","scale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale =1.5;\nconst bool tile = true; //used in case scaling down (scale<1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.*fragCoord/iResolution.xy-vec2(1);\n    float f = 1./scale;\n    float r = length(uv) * f;\n    float phi = atan(uv.y,uv.x);\n    uv = vec2(r*cos(phi)+1., r*sin(phi)+1.)*.5;\n    // Output to screen\n    if (!tile && (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.))\n        fragColor = vec4(0,0,0,1); //if scale down without tiling, just return black\n    else\n        fragColor = texture(iChannel0, uv);  \n}","name":"Image","description":"","type":"image"}]}