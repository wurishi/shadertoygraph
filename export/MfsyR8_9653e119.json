{"ver":"0.1","info":{"id":"MfsyR8","date":"1720793749","viewed":76,"name":"Fire and water fbm","username":"Thatman","description":"Not too good. Just testing FBM.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fire","water","fractalbrownianmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple 2D noise function\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);\n}\n\nfloat circle(vec2 st, vec2 center, float radius) {\n    return smoothstep(radius, radius - 0.005, length(st - center));\n}\n\n// Function to create a + sign flare with fading effect\nfloat flare(vec2 st, vec2 center, float size) {\n    vec2 toCenter = abs(st - center);\n    float dist = length(toCenter);\n    float fade = 1. - smoothstep(0.0, size, dist); // Fading effect based on distance\n    float line1 = smoothstep(size * 0.1, size * 0.1 - 0.005, toCenter.x) * fade; // Vertical line \n    float line2 = smoothstep(size * 0.1, size * 0.1 - 0.005, toCenter.y) * fade; // Horizontal line\n    return max(line1, line2);\n}\n\n\nvec3 sky(vec2 st,float minval, float maxval){\n    // Render stars\n    float seed = noise(st);\n    float brightness = smoothstep(minval,maxval, seed);\n    return vec3(brightness);\n}\n\nvec3 bigStars(vec2 st, float num, float r){\n    r/=1000.;\n    vec3 col=vec3(0.0);\n    float numCircles = num + sin(iTime) * 10.0;\n\n    for (float i = 0.0; i < numCircles; i++) {\n        vec2 circlePos = vec2(-1.+2.*noise(vec2(i, i + 2.0)) * 2.0, -1.+2.*noise(vec2(i + 1.0, i)));\n        float circleRadius = noise(vec2(i * 2.0, i * 2.0 + 1.0)) * r; // Random radius between 0 and r/1000\n        col += circle(st, circlePos, circleRadius);\n        col += flare(st, circlePos, circleRadius * 5.0*(.5+.5*abs(sin(iTime))));\n    }\n    \n    return col;\n}\n\n\n// Interpolated noise function\nfloat smoothNoise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(mix(noise(i + vec2(0.0, 0.0)), noise(i + vec2(1.0, 0.0)), u.x),\n               mix(noise(i + vec2(0.0, 1.0)), noise(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// Fractal Brownian Motion (fBM) function\nfloat fbm(vec2 p) {\n    float v = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < 8; i++) { //change the i<8 for more/less detailed flames\n        v += a * smoothNoise(p);\n        p *= 2.0;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv=.5*((fragCoord*2.-iResolution.xy)/iResolution.y);//bg\n    vec2 uv2=uv;\n\n    uv.y*=2.;\n    uv.y+=.4;\n    vec2 uv1=uv;\n    uv.y=abs(uv.y);\n    vec2 p = uv * vec2(iResolution.x / iResolution.y, 1.0);\n    \n    float y = p.y * 2.5 - 1.4; //Flame height\n    \n    //Add water\n    if(uv1.y<.0){\n        p.x-=.025*sin(p.y*5.+iTime*1.211);\n        p.x-=.034*sin(p.y*13.+iTime*.98);\n        p.x-=.023*sin(p.y*43.+iTime*.78);\n        p.x+=.011*sin(p.y*143.+iTime*1.8);\n        p.x+=.011*sin(p.y*1143.+iTime*1.9);\n        \n        p.y-=.055*sin(p.y*5.+iTime*1.211);\n        p.y-=.084*sin(p.x*13.+iTime*.98);\n        p.y-=.023*sin(p.y*47.+iTime*.78);\n        p.y+=.0211*sin(p.y*123.+iTime*1.8);\n        p.y+=.0111*sin(p.y*1123.+iTime*1.8);\n    }\n    \n    else { //sky\n        p.x-=.0025*sin(p.y*5.+iTime*1.211);\n        p.x-=.0034*sin(p.y*13.+iTime*.98);\n        p.x-=.0023*sin(p.y*43.+iTime*.78);\n        p.x+=.0011*sin(p.y*143.+iTime*1.8);\n        \n        p.y-=.0055*sin(p.y*5.-iTime*1.211);\n        p.y-=.0034*sin(p.x*13.-iTime*.98);\n        p.y-=.0023*sin(p.y*47.+iTime*.78);\n        p.y+=.00111*sin(p.y*123.+iTime*1.8);\n    }\n    \n    p.x-=iTime*.11+sin(iTime*.1); // Wind\n    p.y-=iTime*.4+sin(iTime+p.x)*.07;\n    \n    // Flame shape based on noise\n    float noiseValue = fbm(vec2(p.x * 6.0, p.y * 5.0));\n    float flame = smoothstep(0.4, 0.8, noiseValue - y * 0.46);\n    flame += smoothstep(0.7, .8, noiseValue - y * 0.26)-smoothstep(0.9, 1., noiseValue - y * 0.06);\n    float flame2 = smoothstep(0.25, 0.8, noiseValue - y * 0.34);\n    \n    // Flame color gradient\n    vec3 color = mix(vec3(1.5, 0.1, 0.1), vec3(1.2, 0.3, 0.3), flame); // Blend from red to orange\n    color = mix(color, vec3(1., 0.4, 0.1), flame ); // Blend from orange to yellow\n    color = mix(color, vec3(0.5, 0.0, 0.0), 1.0 - flame*flame); // Blend to dark\n    \n    color *= color;\n    color += vec3(flame2 * 0.5); // Add \"smoke\"\n    \n    //throw poop on the wall until some of it sticks and forget what you did and why\n    color+=-vec3(smoothstep(-.0,.35,uv1.y))-vec3(smoothstep(-.2,.85,-uv1.y));\n    color+=.4*vec3(smoothstep(.25,.0,uv1.y))*vec3(smoothstep(-.55,0.,uv1.y));\n    color=clamp(color,0.,1.);\n    \n    //fancy sky\n    color+=clamp(smoothstep(.0,uv1.y*.5,sky(uv1,.9,1.15)+bigStars(uv2, 500.,5.))-smoothstep(1.,0.0,uv1.y), 0., 1.);\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}