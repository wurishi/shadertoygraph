{"ver":"0.1","info":{"id":"7tyGRG","date":"1637859070","viewed":155,"name":"Infinitely Many Touching Circles","username":"__mk_km__","description":"Visualization, inspired by a numberphile video \"Infinitely Many Touching Circles\"(https://youtu.be/hSsRcpIsunk)\nAnimated and draggable","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["math","visualization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 invertPoint(vec2 p) {\n    vec2 p2 = vec2(p.y, -p.x);\n    p2 /= dot(p, p);\n    return p2;\n}\n\nfloat sdfCircles(vec2 p) {\n    // Start with the infinite line\n    float d = abs(p.y - 1.0);\n    // How about another infinite line, and we only draw circles inbetween?\n    d = min(d, abs(p.y - 6.0));\n    \n    if((p.y > 1.0) && (p.y < 6.0)) {\n        // Then draw all of the grid circles\n        p = fract(p);\n        d = min(d, abs(0.5 - length(p - 0.5)));\n    }\n    return d;\n}\n\nconst float PI = 3.141592653589793;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    \n    if(iMouse.xy == vec2(0.0))\n        mouse = vec2(0.0);\n    \n    float anim = 0.5-0.5*cos(PI * iTime / 12.0);\n    float zoom = 0.1 * exp(4.0*anim);\n    vec2 offset = mix(vec2(0.0, 2.0), vec2(-0.001, 0.0), pow(anim, 0.3));\n    \n    offset -= mouse / zoom;\n    \n    vec2 p = uv / zoom + offset;\n    vec2 p2 = invertPoint(p);\n    \n    vec2 tmp = 2.0*abs(fract(p) - 0.5);\n    float grid = 1.0 - max(tmp.x, tmp.y);\n    grid *= 8.0 * zoom;\n    \n    float d1 = sdfCircles(p);\n    float d2 = sdfCircles(p2);\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    col += smoothstep(0.05, 0.03, grid) * vec3(0.3);\n    col += smoothstep(0.03, 0.01, d1) * vec3(0.9, 0.2, 0.1);\n    col += smoothstep(0.03, 0.01, d2) * vec3(abs(p2.xy), 0.9);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}