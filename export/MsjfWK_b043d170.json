{"ver":"0.1","info":{"id":"MsjfWK","date":"1502301020","viewed":196,"name":"Squaring the Circle","username":"rwvens","description":"Little test shader I used to find the formula I need in order to \"push\" radial samples into a box shape. Formula is used in calculating sample positions for plan/profile curvature estimation in my terrain engine.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pixel","circle","square","shapes","raster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw a square using polar coordinates\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Fit UV to view height and translate to center\n\tvec2 uv = fragCoord.xy / iResolution.y - vec2(.5,.5);\n    \n    // Convert UV into polar coordinates\n    float phi = atan(uv.y,uv.x);\n    \n    // Find distance scaling factor for angle - I call it the squarify formula\n    float sq = 1.0/cos(mod(phi + 0.785398,1.5708)-0.785398);\n    \n    // Scale UV, pushing corners out to form a square\n    // Animated using Fabrice Neyret's excellent suggestion\n    uv /= mix( 1., sq, .5+.5*sin(iTime));\n    \n    // Give us a nice anti-aliased fill\n    float val = smoothstep(0.30,0.305,length(uv));\n    \n\tfragColor = vec4(val,val,val,1.0);\n}","name":"Image","description":"","type":"image"}]}