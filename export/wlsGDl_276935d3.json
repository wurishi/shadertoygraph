{"ver":"0.1","info":{"id":"wlsGDl","date":"1558122776","viewed":4269,"name":"Testing Selection","username":"iq","description":"Hopefully this shader debunks some of the misconceptions and myths about conditional operations in GLSL, which wrongly preach that ternary operations (?:) and branching (if) should be avoided and arithmetic replacements (step, *) should be used instead.","likes":29,"published":3,"flags":0,"usePreview":0,"tags":["2d","test","performance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Hopefully this shader debunks the now decade old misconception and myth\n// about how to perform conditional operations in GLSL, which wrongly \n// preaches that ternary operations (?:) and branching (if) should be \n// avoided at all cost in favor of mix and step arithmetic operations.\n// \n// While the topic of conditional branching is complex and has much to\n// do with the work done in the body of the conditional and the coherency\n// of computations across neighbor pixels, and how ancient the hardware is,\n// and some other factos, generaly simple conditional operations benefit\n// from using simple and straighforward ternary operations rather than\n// mix and step functions, which only add unnecesary math load to the GPU.\n//\n// This shader shader shows how, in particular, painting a single pixel\n// in white is actually twice as fast when done with a ternary operation\n// instead of arithmetics. Here are results for my PC and phone (old by\n// today's standards):\n\n\n// change this to see different results\n#define METOD 0\n\n//                                   LAPTOP   PHONE\n//                                   ------   --------\n// METHOD 0 : ternary operation:     83 fps   10.6 fps\n// METHOD 1 : step arithmetic:       57 fps    9.9 fps\n// METHOD 2 : float to bool:         71 fps    8.9 fps\n// METHOD 3 : conditional braching:  83 fps   10.5 fps\n\n\n// Number of tests per frame. If you need to reduce this numbwe too much in order\n// to get some sensible performance, you might fall into the \"10 years or older \n// hardware\" group, and none of the above might apply to you.\nconst int num = 15000;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = floor(fragCoord);\n    \n    vec3 tmp = 0.5 + 0.5*sin(iTime+vec3(0.0,2.0,4.0));\n\t\n    vec3 col = vec3(0.0);\n    float h = 127.0 + 0.0001*iTime;\n    \n\t#define ZERO min(iFrame,0)\n    for( int i=ZERO; i<num; i++ )\n    {\n        // conditional move\n        #if METOD==0\n        col = (p.x<h && p.y<h+h) ? col+tmp : col;\n        #endif\n        \n        // \"smart\" way\n        #if METOD==1\n        col += tmp*step(p.x,h)*step(p.y,h+h);\n        #endif\n        \n        // even \"smarter\" way\n        #if METOD==2\n        col += tmp*float(p.x<h && p.y<h+h);\n        #endif\n\n        // conditional branching\n        #if METOD==3\n        if( p.x<h && p.y<h+h ) col += tmp;\n        #endif\n\n    \th += 0.000013;\n    }\n    col /= float(num);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}