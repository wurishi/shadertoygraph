{"ver":"0.1","info":{"id":"MdcfDj","date":"1526729143","viewed":2339,"name":"Simplest Fastest 2D Hash","username":"James_Harnett","description":"Simple and Fast 2D Hash!","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["noise","hash","rand","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// LICENSE: http://unlicense.org/\n#define M1 1597334677U     //1719413*929\n#define M2 3812015801U     //140473*2467*11\n\n\nfloat hash( uvec2 q )\n{\n    q *= uvec2(M1, M2); \n    \n    uint n = (q.x ^ q.y) * M1;\n    \n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n//https://www.shadertoy.com/view/4dVBzz\n//much improved version, still comparable in speed to fract(sin()),\n//but with much better bit quality for making vec3 and vec4's\nfloat hash_Tong(uvec2 q)\n{\n\tq *= uvec2(M1, M2);\n    uint n = q.x ^ q.y;\n    n = n * (n ^ (n >> 15));\n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n///////////////////Below are some other hash functions I found to compare with///////////////////\n\nfloat hash_FractSin(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);   \n}\n\n//https://www.shadertoy.com/view/MsV3z3\nfloat hash_2DWeyl(ivec2 c)\n{\n  int x = 0x3504f333*c.x*c.x + c.y;\n  int y = 0xf1bbcdcb*c.y*c.y + c.x;\n    \n  return float(x*y)*(2.0/8589934592.0)+0.5;\n}\n\n//https://www.shadertoy.com/view/4tXyWN\nfloat hash_IQ3( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n//https://www.shadertoy.com/view/4djSRW\nfloat hash_WithoutSine(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fp = vec2(fragCoord)+float(iFrame);\n    uvec2 up = uvec2(fragCoord)+uint(iFrame);\n    ivec2 ip = ivec2(fragCoord)+int(iFrame);\n    float c = hash(up);\n    \n    \n    //each loop below runs at 15 frames per second on my machine (760GTX)\n    \n    //for(uint  i=0U; i<500000U; i++)c = hash(up+i);\n    \n    //for(float i=0.0;i<350000.0;i++)c = hash_FractSin(fp+i);\n\n    //for(uint  i=0U; i<250000U; i++)c = hash_Tong(up+i);\n    \n    //for(int   i=0;  i<150000;  i++)c = hash_2DWeyl(ip+i);\n\n    //for(uint  i=0U; i<125000U; i++)c = hash_IQ3(up+i);\n\n    //for(float i=0.0;i<100000.0;i++)c = hash_WithoutSine(fp+i);\n    \n    \n    \n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}