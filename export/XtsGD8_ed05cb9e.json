{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float offset = 0.03;\n\nfloat man_dist_to_nearest_wall(vec2 uv)\n{\n    float aspect = (iResolution.y/iResolution.x);\n    float x_distance = uv.x < 1.0 - uv.x ? uv.x : 1.0 - uv.x;\n    float y_distance = uv.y * aspect < (1.0 - uv.y) * aspect ? uv.y * aspect: (1.0 - uv.y) * aspect;\n    return min(x_distance, y_distance);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 texCoords = fragCoord.xy / iResolution.xy;//should be set from vertex shader in production\n    vec4 texColor = texture(iChannel0, texCoords);\n  \n    float dist = man_dist_to_nearest_wall (texCoords);\n    float dist_s = smoothstep( offset*.05, offset*.95, dist);\n \n    texColor *= dist_s;// should be texColor.a *= dist_s; for production\n    \n    \n\tfragColor = texColor;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtsGD8","date":"1421670343","viewed":296,"name":"edge blending for images","username":"ermish","description":"blend edges of your textures in order to avoid \"floating\" effect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["texture","blend"],"hasliked":0,"parentid":"","parentname":""}}