{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// The perlin stuff (except for the multiple octaves) was taken from Ian McEwan.  I've posted\n// his copyright stuff below.\n\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n// My stuff follows...\n\nconst int OCTAVE_COUNT = 5;\nconst float WATER_LEVEL = 0.3;\n\nfloat noise(vec3 pos, int octaves) {\n\tfloat fResult = 0.0;\n\tfloat fPersMax = 0.0;\n\tfor (int g = 0; g < OCTAVE_COUNT; g++) {\n\t\tif (g == octaves) break;\n\t  \tfloat fFreq = pow(2.0, float(g));\n\t  \tfloat fPers = pow(0.5, float(g));\n      \tfPersMax += fPers;\n      \tfResult += fPers * snoise(fFreq*pos);\n\t}\n\treturn fResult / fPersMax + 0.5;\n}\n\nfloat noise(vec3 pos) {\n\treturn noise(pos, OCTAVE_COUNT);\n}\n\n#define M_PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat order = 1000.0;\n\n\tfloat zoom = 1.0; //  + 0.05 * sin(0.5 * iTime * M_PI);\n\tfloat cloudZoom = 3.0 + 0.05 * sin(0.5 * iTime * M_PI);\n\tfloat land_feature = 2.0;\n\tfloat water_feature = 80.0;\n\tfloat feature_ratio = water_feature / land_feature;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy * land_feature / zoom;\n\tvec2 water_uv = fragCoord.xy / iResolution.xy * water_feature / zoom;\n\tvec2 cloud_uv = fragCoord.xy / iResolution.xy / zoom;\n\n\tuv = floor(uv * order) / order;\n\twater_uv = floor(water_uv * order) / order;\n\n\tvec2 mouseDeflection = vec2(iMouse.x / iResolution.x - 0.5, iMouse.y / iResolution.y - 0.5);\n\n\t// Super simple sun calculation.\n\t// sample a patch to the right of us.  If it's higher, make us darker.  If it's lower, make us lighter.\n\tvec3 samplePointA = vec3(uv.x + mouseDeflection.x * iTime,\n\t\t\t\t\t\t uv.y + mouseDeflection.y * iTime,\n\t\t\t\t\t\t 0.00 * iTime);\n\tvec3 samplePointB = samplePointA + vec3((fragCoord.x + 1.0) / iResolution.x * land_feature / zoom + mouseDeflection.x * iTime, 0.0, 0.0);\n\tfloat noiseA = noise(samplePointA);\n\tfloat noiseB = noise(samplePointB);\n\tfloat diff = noiseB - noiseA;\n\n\tfloat water = noise(vec3(water_uv.x + mouseDeflection.x * iTime * feature_ratio,\n\t\t\t\t\t\t water_uv.y + mouseDeflection.y * iTime * feature_ratio,\n\t\t\t\t\t\t 0.2 * iTime), 2) + 0.7;\n\tfloat cloud = noise(vec3(cloud_uv.x + mouseDeflection.x * 1.1 * iTime,\n\t\t\t\t\t\t cloud_uv.y + mouseDeflection.y * iTime,\n\t\t\t\t\t\t 0.05 * iTime));\n\n\t// vec3 landColor = clamp(vec3(0.93, 0.82, 0.65) * (1.0 + 0.2 * diff), vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));\n\tvec3 landColor = vec3(0.73, 0.62, 0.45) * (noiseA * (1.0 + diff));\n\t// vec3 forestColor = vec3(0.93, 0.82, 0.65);\n\t// vec3 mountainColor = vec3(0.93, 0.93, 0.93);\n\tvec3 waterColor = vec3(0.65, 0.94, 0.94);\n\tvec4 cloudColor = vec4(1, 1, 1, pow(cloud, 6.0));\n\n\t// fix for water level\n\n\tfragColor = mix(\n\t\tnoiseA < WATER_LEVEL ?\n\t\t\tvec4(mix(landColor.xyz, water * waterColor.xyz, 0.3), 1.0) :\n\t\t\tvec4(landColor.xyz, 1.0),\n\t\tcloudColor,  pow(cloud, 3.0));\n\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsXSDN","date":"1401174884","viewed":342,"name":"Platypus Perlin Terrain 1","username":"dancingplatypus","description":"Experimenting with perlin terrain.  Height determines color.  Modified a perlin function to support multiple octaves.  Threw clouds and water in for presentation.  Next step is to do some lighting.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","perlin","landscape"],"hasliked":0,"parentid":"","parentname":""}}