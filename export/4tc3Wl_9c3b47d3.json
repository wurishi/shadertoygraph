{"ver":"0.1","info":{"id":"4tc3Wl","date":"1472231147","viewed":670,"name":"koalastothemax, part 2","username":"realazthat","description":"http://www.koalastothemax.com/ Gonna try to remake this in shadertoy. Click the cirlces!","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["quadtree","koalastothemax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define BLUR_RADIUS 3\nhighp float PI = 3.14159265358979323846;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0);\n    \n    // set this to .8 or higher to get an obvious blur effect\n    float sigma = 0.1;\n    float sigma_square = sigma*sigma;\n    float wsum = 0.0;\n    for (int ry = -BLUR_RADIUS; ry <=+BLUR_RADIUS; ++ry)\n    for (int rx = -BLUR_RADIUS; rx <=+BLUR_RADIUS; ++rx)\n    {\n        vec2 rxy = vec2(rx,ry);\n        vec2 nuv = uv + rxy/iResolution.xy;\n        \n        //float w = 1.0;\n        highp float w = (1.0 / (2.0*PI*sigma_square))* exp(-(float(rx*rx) + float(ry*ry)) / (2.0*sigma_square));\n        wsum += w;\n        color += texture(iChannel0,nuv).rgb * w;\n    }\n    color /= wsum;\n    \n\tfragColor = vec4(color.rgb,1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define MIN_CELL_RADIUS 3.0\n\nbool contains(ivec2 lower, ivec2 upper, ivec2 p){\n    return p.x >= lower.x && p.x < upper.x && p.y >= lower.y && p.y < upper.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord.xy);\n    ivec2 mxy = ivec2(iMouse.zw);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    int height = int(floor(log2(min(iResolution.x,iResolution.y))));\n    \n    int side = int(pow(2.0,float(height)));\n    \n    ivec2 draw_area = ivec2(side,side);\n    \n    if (int(fragCoord.x) > side || int(fragCoord.y) > side)\n    {\n        fragColor = vec4(0,0,0,1);\n     \treturn;\n    }\n    \n    if (iFrame == 0)\n    {\n        fragColor = vec4(0,0,0,1);\n     \treturn;\n    }\n    \n    bool mouse_down = iMouse.w >= 0.0;\n    \n    vec4 color = texture(iChannel0,uv);\n    vec4 new_color = vec4(0,0,0,1);\n    \n    int depth = int(color.r*255.0);\n    \n    int cell_side = side / int(ceil(pow(2.0,float(depth))));\n    float cell_radius = float(cell_side) / 2.0;\n    ivec2 cell_lower = ivec2(floor(vec2(xy) / vec2(cell_side))) * cell_side;\n    ivec2 cell_upper = cell_lower + ivec2(cell_side);\n    \n    \n    \n    bool mouse_in_cell = contains(cell_lower, cell_upper, mxy);\n    if (mouse_down && mouse_in_cell && cell_radius > MIN_CELL_RADIUS && depth < height) {\n        depth += 1;\n    }\n    \n    \n    new_color.r = float(depth)/255.0;\n    new_color.g = mouse_in_cell ? 1.0 : 0.0;\n    new_color.b = float(depth)/10.0;\n\tfragColor = new_color;\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 color = texture(iChannel0,uv);\n    \n\tfragColor = color;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord.xy);\n    ivec2 mxy = ivec2(iMouse.zw);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    int height = int(floor(log2(min(iResolution.x,iResolution.y))));\n    \n    int side = int(pow(2.0,float(height)));\n    \n    ivec2 draw_area = ivec2(side,side);\n    \n    if (int(fragCoord.x) > side || int(fragCoord.y) > side)\n    {\n        fragColor = vec4(0,0,0,1);\n     \treturn;\n    }\n    \n    vec4 qt_color = texture(iChannel0,uv);\n    \n    int depth = int(qt_color.r*255.0);\n    \n    int cell_side = side / int(ceil(pow(2.0,float(depth))));\n    ivec2 cell_lower = ivec2(floor(vec2(xy) / vec2(cell_side))) * cell_side;\n    ivec2 cell_upper = cell_lower + ivec2(cell_side);\n    float cell_radius = float(cell_side) / 2.0;\n    vec2 cell_center = vec2(cell_lower) + vec2(cell_side)/2.0;\n    \n    //fragColor = vec4(vec2(cell_lower)/iResolution.xy,0,1);\n\t//fragColor = texture(iChannel0,uv);\n    //return;\n    \n    if (distance(cell_center, vec2(xy)+vec2(.0,.0)) > cell_radius)\n    {\n        fragColor = vec4(1,1,1,1);\n        return;\n    }\n    \n    vec2 texture_uv = cell_center / float(side);\n   \n\tfragColor = textureLod(iChannel1,texture_uv,float(height-depth));\n\t//fragColor = textureLod(iChannel1,uv,float(height-depth));\n    //fragColor = vec4(texture_uv, 0, 1);\n\t//fragColor = texture(iChannel0,uv);\n    \n}","name":"Buf C","description":"","type":"buffer"}]}