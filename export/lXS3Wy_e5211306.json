{"ver":"0.1","info":{"id":"lXS3Wy","date":"1708805082","viewed":92,"name":"Kuramoto model","username":"zenzicubic","description":"The Kuramoto model of coupled oscillators, inspired by https://www.complexity-explorables.org/explorables/spin-wheels/","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["kuramoto","coupling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 col, vec2 pos) {\n    pos = floor(pos * .25);\n    float t = texelFetch(iChannel0, ivec2(pos), 0).x;\n    col = vec4(.5 + .5 * cos(t + vec3(0., .628, 1.257)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TAU 6.28318530718\n#define COUPLING .05\n#define SPEED .5\n#define DT 1e-1\n\nfloat hash12(vec2 p) {\n    // Dave_Hoskins hash function\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat getVal(vec2 pos) {\n    // Get value at given pixel\n    return texelFetch(iChannel0, ivec2(pos), 0).x;\n}\n\nvoid mainImage(out vec4 st, vec2 pos) {\n    st = vec4(1.);\n    if (iFrame == 0) {\n        // Set random initial angle\n        st.x = TAU * hash12(pos);\n        return;\n    }\n    \n    float th = getVal(pos);\n    float delta = sin(getVal(pos + vec2(1., 0.)) - th);\n    delta += sin(getVal(pos + vec2(-1., 0.)) - th);\n    delta += sin(getVal(pos + vec2(0., 1.)) - th);\n    delta += sin(getVal(pos + vec2(0., -1.)) - th);\n    delta += sin(getVal(pos + vec2(.5)) - th);\n    delta += sin(getVal(pos + vec2(-.5, .5)) - th);\n    delta += sin(getVal(pos + vec2(.5, -.5)) - th);\n    delta += sin(getVal(pos + vec2(-.5)) - th);\n    delta = delta * COUPLING + SPEED;\n    st.x = mod(th + DT * delta, TAU);\n}","name":"Buffer A","description":"","type":"buffer"}]}