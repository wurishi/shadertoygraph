{"ver":"0.1","info":{"id":"4l33zl","date":"1470764260","viewed":897,"name":"pick in hexamaze to flood","username":"FabriceNeyret2","description":"mouse-pick somewhere in the maze to flood it.\nNB: at restart you have 3 seconds to go fullscreen if you wish.\n\nUncomment to choose coloring schemes in main","likes":21,"published":3,"flags":32,"usePreview":0,"tags":["flood","maze","hexagonal","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T(U) texture(iChannel0, (U)/iResolution.xy)\n\nvoid mainImage( out vec4 O,  vec2 U ) {  // choose your coloring scheme :   \n//  O = fract(.95 * T(U) );\n//  O = fract(1.01 * T(U)) ;\n//  O = fract(vec4(1.01,1.005,1.0025,1) * T(U).r );\n    O = fract(vec4(.95,.99,.999,0) * T(U).r );\n//  O += .3*T(U).a + T(U).r/T(U-U+.5).a -O;\n//  O += .3*T(U).a + T(U).r/T(U-U+.5).a * fract(.9*T(U).r) -O;\n//  float x = T(U).r/T(U-U+.5).a;  O = T(U).a + ( x>.1? .5+.5*cos(6.3*x + vec4(0,-2.1,2.1,0)) : O-O);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// maze from https://www.shadertoy.com/view/4ldGDM\n// variant of https://www.shadertoy.com/view/Xl33zl\n\n#define T(u,v) texture( iChannel0, (U+vec2(u,v))/R )\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy, V;\n    \n    if ( iFrame<150 || iMouse.z>0. ) {\n        V = U * mat2(1,-1./1.73, 0,2./1.73) /8.;                      // conversion to hexagonal\n        float r = sin(1e5*length (ceil(V)));\n        O += min(1.,.1 / fract( r >.5  ? V.x : r< -.5 ? V.y : V.x+V.y )) -O;  // maze\n        //O += min(1.,.1 / fract( r >.5  ? V.x : r< -.5 ? V.y : 1.-V.x-V.y )) -O;  // maze\n        //length(fract(1.-V)) < 1./8. ? O++ : O;                      // close holes at nodes\n        //U==vec2(.5) ? O-=O : O;                                   // counter ( optional )\n        return;\n}\n    O = T(0,0);\n    \n    vec4 M = T(-1,0)+T(1,0)+T(0,-1)+T(0,1);                         // neighborhood\n    iMouse.xy==U-U && U==vec2(77.5)  ||                             // auto-demo\n    iMouse.xy==U-.5 ||  O.g<.5  &&  M.x-M.a > .5 ? O.x++ : 0.;      // pick or reached by flood\n    U==vec2(.5) ? O.a++ : O.a;                                      // counter ( optional )\n}\n","name":"Buf A","description":"","type":"buffer"}]}