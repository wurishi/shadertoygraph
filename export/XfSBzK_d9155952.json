{"ver":"0.1","info":{"id":"XfSBzK","date":"1725161392","viewed":63,"name":"Flame Outline","username":"Godlander","description":"Chroma Key: https://www.shadertoy.com/view/4tjBDh\nGaussian Blur: https://www.shadertoy.com/view/ltBcDm\nPerlin Fire: https://www.shadertoy.com/view/3tcBzH","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["flame","fire","blur","outline"],"hasliked":0,"parentid":"3td3W8","parentname":"Dual Kawase Blur"},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//chroma key\n#define s(x) smoothstep(0.15, 0.3, x * 1.1 - 0.1)\nvec4 chromaKey(vec4 x, vec4 y){\n\tvec2 c = s(vec2(x.g - x.r * x.y, x.g));\n    return mix(x, y, c.x * c.y);\n}\nvec4 t(vec2 uv) {\n    vec4 c = texture(iChannel0, uv);\n    return chromaKey(c, vec4(0));\n}\n\n//flames\n#define speed 0.5\n#define frequency 10.\n#define turbulence 10.\n\nfloat rand(vec2 co) {return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}\nfloat hermite(float t) {return t * t * (3.0 - 2.0 * t);}\nfloat noise(vec2 co, float freq) {\n  vec2 v = vec2(co.x * freq, co.y * freq);\n  float ix1 = floor(v.x);\n  float iy1 = floor(v.y);\n  float ix2 = floor(v.x + 1.0);\n  float iy2 = floor(v.y + 1.0);\n  float fx = hermite(fract(v.x));\n  float fy = hermite(fract(v.y));\n  float fade1 = mix(rand(vec2(ix1, iy1)), rand(vec2(ix2, iy1)), fx);\n  float fade2 = mix(rand(vec2(ix1, iy2)), rand(vec2(ix2, iy2)), fx);\n  return mix(fade1, fade2, fy);\n}\nfloat pnoise(vec2 co, float freq, int steps, float persistence) {\n  float value = 0.0;\n  float ampl = 1.0;\n  float sum = 0.0;\n  for(int i=0 ; i<steps ; i++) {\n    sum += ampl;\n    value += noise(co, freq) * ampl;\n    freq *= 2.0;\n    ampl *= persistence;\n  }\n  return value / sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy));\n    vec4 bg = texture(iChannel1, uv);\n    \n    vec2 pos = uv;\n    float gradient = (bg.r*5. - 1.5);\n    \n    pos -= vec2(0.0, speed)*iTime;\n    \n    vec4 c1 = vec4(1.2, 0.8, 0.1, 1.0);\n    vec4 c4 = vec4(1.0, 0.0, 0.15, 1.0);\n    vec4 c2 = mix(c1, c4, 0.33);\n    vec4 c3 = mix(c1, c4, 0.66);\n\n    float noiseTexel = pnoise(pos, frequency, 5, 0.5) * turbulence;\n    \n    float t1 = round(smoothstep(-3.5, noiseTexel, gradient));\n    float t2 = round(smoothstep(-2.5, noiseTexel, gradient));\n    float t3 = round(smoothstep(-1.5, noiseTexel, gradient));\n    float t4 = round(smoothstep(-0.5, noiseTexel, gradient));\n    \n    vec4 color = mix(vec4(0.), c4, t1);\n    color = mix(color, c3, t2);\n    color = mix(color, c2, t3);\n    color = mix(color, c1, t4);\n    \n    vec4 fg = t(uv + vec2(0,0.01));\n    \n    fragColor = mix(color, fg, fg.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//chroma key\n#define s(x) smoothstep(0.15, 0.3, x * 1.1 - 0.1)\nvec4 t(vec2 uv) {\n    vec4 c = texture(iChannel0, uv);\n\tvec2 a = s(vec2(c.g - c.r * c.y, c.g));\n    return mix(vec4(1), vec4(0), a.x * a.y);\n}\n\n// Horizontal blur\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy));\n    fragColor = t(uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec2 BlurScale = vec2(4.0);\nconst int BlurSamples = 21;\nconst float BlurSigma = sqrt(float(BlurSamples));\n\nconst bool UseSimplifiedGaussian = true;\n\nconst float Pi = atan(1.0) * 4.0;\n\nfloat Gaussian1D(float x, float sigma)\n{\n    if (UseSimplifiedGaussian)\n    {\n        return exp(-(x * x) / (2.0 * sigma * sigma));\n    }\n    \n    float o = sigma * sigma;\n    float a = 1.0 / sqrt(2.0 * Pi * o);\n    float b = (x * x) / (2.0 * o);\n\n    return a * exp(-b);\n}\n\nvec4 GaussianBlur1D(\n\tsampler2D sp,\n\tvec2 uv,\n\tvec2 dir,\n\tfloat sigma,\n\tint samples)\n{\n\tfloat halfSamples = float(samples) * 0.5;\n\n\tvec4 color = vec4(0.0);\n\tfloat accum = 0.0;\n\n\tuv -= halfSamples * dir;\n\n\tfor (int i = 0; i < samples; ++i)\n\t{\n\t\tfloat weight = Gaussian1D(float(i) - halfSamples, sigma);\n\n\t\tcolor += texture(sp, uv) * weight;\n\t\taccum += weight;\n\n\t\tuv += dir;\n\t}\n\n\treturn color / accum;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Horizontal blur\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 ps = vec3(vec2(1.0) / iResolution.xy, 0.0);\n    vec2 uv = coord * ps.xy;\n    \n    color = GaussianBlur1D(\n        iChannel0,\n        uv,\n        ps.xz * BlurScale,\n        BlurSigma,\n        BlurSamples);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Vertical blur\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 ps = vec3(vec2(1.0) / iResolution.xy, 0.0);\n    vec2 uv = coord * ps.xy;\n    \n    color = GaussianBlur1D(\n        iChannel0,\n        uv,\n        ps.zy * BlurScale,\n        BlurSigma,\n        BlurSamples);\n}","name":"Buffer C","description":"","type":"buffer"}]}