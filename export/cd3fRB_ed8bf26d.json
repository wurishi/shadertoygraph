{"ver":"0.1","info":{"id":"cd3fRB","date":"1697289853","viewed":49,"name":"Neon2dFractalKishimishuRemix","username":"froxzen993","description":"2d fractal based on the kishimisu video https://youtu.be/f4s1h2YETNY\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","kishimisu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pallete( in float t )\n{\n    vec3 a = vec3(0.500,0.500,0.500);\n    vec3 b = vec3(0.500,0.500,0.500);\n    vec3 c = vec3(1.000,1.000,1.000);\n    vec3 d = vec3(0.000,0.333,0.667);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) /iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0,0,0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n    \n        uv *= (i + 4.) / 4.;\n        uv = fract(uv);\n        uv -= .5;\n\n        float direction = mod(i, 2.0) * - 2.0 + 1.0;\n        \n        float d  = length(uv) * exp(-length(uv0));\n        vec3 col = pallete(length(uv0) * i  * direction - iTime/3.0);\n       \n        if (direction > 0.0) {\n            d = cos( -iTime/2.0 +  d *8.0)/8.0;\n        } else {\n            d = sin( -iTime/2.0 +  d *8.0)/8.0;\n        }\n        \n        d = abs(d);\n        d = .02 / d;\n        d = pow(d, 2.0);\n        col *= d;\n        finalColor += (col * 1.0/(i + 1.0));\n    }\n    \n    \n    \n    \n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}