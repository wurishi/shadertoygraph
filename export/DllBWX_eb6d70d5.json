{"ver":"0.1","info":{"id":"DllBWX","date":"1693740582","viewed":82,"name":"Modified plasma beam with pulse","username":"pkclsoft","description":"A modified version as I needed a nice plasma channel and your shader proved to be an excellent starting point.\n\nThis is the next step where I needed to control a pulse along the length of the channel.\n\nI still don't understand the shape of the beam.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["plasma","beam","lightning","arclightning"],"hasliked":0,"parentid":"dtlBWj","parentname":"Fork Basic arclightning"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(float u)\n{\n    return fract(sin(u)*999999.9999);\n}\n\nfloat noise(float u, float size)\n{\n    float zoom = u * size;\n    float index = floor(zoom);\n    float progress = fract(zoom);\n    progress = smoothstep(0.0,1.0, progress);\n    float value = mix(random(index), random(index + 1.0), progress);\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float join = 0.19;\n    float rightJoin = 1.0-join;\n    \n    float radius = 0.09;\n    \n    // Apply noise to V coordinate\n    float yOffset = (noise(2.471, 1.0) * 1.8 - 0.9) * 0.01;\n    float betweenJoin = (noise(iTime*0.928, 1.0) * 1.8 - 0.9) * 0.025;\n\n    if (uv.x < join) {\n        yOffset += uv.x / join * betweenJoin;\n    } else if (uv.x > rightJoin) {\n        yOffset += (1.0-uv.x) / join * betweenJoin;\n        \n    } else {\n        yOffset += betweenJoin;\n    }\n    \n    uv.y+=yOffset;\n\n    vec2 center = vec2(sin(iTime), uv.y);\n\n    // Mirror brigtness along Y axis and normalize\n    float value= -abs(-uv.y+0.5)+1.0;\n    \n    // Colorize\n    vec3 col = vec3(pow(value, 12.0)) + vec3(pow(value, 7.5));\n\n    float t = length(uv - center);\n\n    if (uv.x < join) {\n        col *= (uv.x/join);\n    } else if (uv.x > rightJoin) {\n        col *= 1.0 - ((uv.x - rightJoin) / join);\n    }\n    \n    if (t <= radius) {\n        col = mix(col, col * 0.001, (t - radius) * 4.0);\n    }\n    \n    // this adds the colour; I don't understand why the beam becomes thinner at the centre.\n    //\n    col *= vec3(0.0, uv.x, (1.0-uv.x));\n\n    // I found that there would be edge effects that ruined the in game visualisation, so given that \n    // the edges are supposed to be empty anyways, this ensures the edge effects are removed.\n    //\n    if ((uv.y > 0.9) || (uv.y < 0.1)) {\n        col = vec3(0.0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}