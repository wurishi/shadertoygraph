{"ver":"0.1","info":{"id":"cdtSD4","date":"1679830145","viewed":206,"name":"Glass Cup","username":"Hamish","description":"Imperfectly raymarched glass cup","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["reflection","raymarched","refraction","glass","cup"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/sllGDN\n// https://en.wikipedia.org/wiki/Schlick%27s_approximation\n\n#define MAX_STEPS 100\n#define MAX_DIST 10.\n#define SURF_DIST .001\n#define TAU 6.28318530718\n\nmat2 Rot(float a) {float s=sin(a), c=cos(a);return mat2(c, -s, s, c);}\n\nfloat sdCappedCylinder(vec3 p,float h,float r) {vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);return min(max(d.x,d.y),0.0) + length(max(d,0.0));}\n\nfloat opSmoothSubtraction(float d1,float d2,float k) { float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 ); return mix( d2, -d1, h ) + k*h*(1.0-h);}\n\nfloat getDist(vec3 p) {return opSmoothSubtraction(sdCappedCylinder(vec3(p.x,p.y-0.1,p.z), 1., 0.9+0.2*(p.y+0.5)), sdCappedCylinder(p, 1.0, 1.0+0.15*(p.y+0.5)), 0.02)-0.02;}\n\nfloat rayMarch(vec3 ro, vec3 rd, float side) {float dO=0.;for(int i=0; i<MAX_STEPS; i++) {vec3 p = ro + rd*dO;float dS = getDist(p)*side;dO += dS;if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;}return dO;}\n\nvec3 getNormal(vec3 p) {float d = getDist(p);vec2 e = vec2(.01, 0);vec3 n = d - vec3(getDist(p-e.xyy),getDist(p-e.yxy),getDist(p-e.yyx));return normalize(n);}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {vec3 f = normalize(l-p),r = normalize(cross(vec3(0,1,0), f)),u = cross(f,r),c = f*z,i = c + uv.x*r + uv.y*u,d = normalize(i);return d;}\n\nvec3 refractColour(vec3 ro,vec3 rd,float d) {\n    float IOR = 1.45; // index of refraction\n    \n    vec3 p = ro + rd * d; // 3d hit position\n    vec3 n = getNormal(p); // normal of surface... orientation\n    vec3 r = reflect(rd, n);\n    vec3 refOutside = texture(iChannel0, r).rgb;\n    \n    vec3 rdIn = refract(rd, n, 1./IOR); // ray dir when entering\n     \n    vec3 pEnter = p - n*SURF_DIST*3.;\n    float dIn = rayMarch(pEnter, rdIn, -1.); // inside the object\n       \n    vec3 pExit = pEnter + rdIn * dIn; // 3d position of exit\n    vec3 nExit = -getNormal(pExit);\n    \n    // raymarching through the empty space in the middle of the cup\n    d = rayMarch(pExit-nExit*SURF_DIST*3., refract(rdIn, nExit, IOR/1.), 1.);\n    if(d < MAX_DIST / 3.0) {\n        //act on the raymarch\n        rd = refract(rdIn, nExit, IOR/1.);\n        p = p + rd*d;\n        n = getNormal(p);\n       \n        rdIn = refract(rd, n, 1./IOR);\n        \n        pEnter = p - n*SURF_DIST*3.;\n        // raymarching through the other side of the cup\n        dIn = rayMarch(pEnter, rdIn, -1.);\n    \n        // exit point\n        pExit = pEnter + rdIn * dIn;\n        nExit = getNormal(p);\n    }\n        \n    vec3 reflTex = vec3(0);\n      \n    vec3 rdOut = vec3(0);\n    vec3 rdRefl = reflect(rd, n);    \n    float abb = .01;\n    \n    // https://en.wikipedia.org/wiki/Schlick%27s_approximation\n    float Rnought = 0.03373594; // hard-coded for glass-air\n    float contributionR = Rnought + (1.0 - Rnought) * pow(cos(dot(rd, n)), 5.);\n    float contributionRAdjusted = pow(contributionR, 2.);\n        \n        \n    // red\n    rdOut = refract(rdIn, nExit, IOR-abb);\n    if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n    reflTex.r = texture(iChannel0, rdOut).r;\n    reflTex.r = mix(reflTex.r, texture(iChannel0, rdRefl).r, contributionRAdjusted);\n        \n    // green\n    rdOut = refract(rdIn, nExit, IOR);\n    if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n    reflTex.g = texture(iChannel0, rdOut).g;\n    reflTex.g = mix(reflTex.g, texture(iChannel0, rdRefl).g, contributionRAdjusted);\n        \n    // blue\n    rdOut = refract(rdIn, nExit, IOR+abb);\n    if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n    reflTex.b = texture(iChannel0, rdOut).b;\n    reflTex.b = mix(reflTex.b, texture(iChannel0, rdRefl).b, contributionRAdjusted);\n        \n    float fresnel = clamp(pow(1.+dot(rd, n), 5.), 0.0, 1.0);\n        \n    vec3 col = mix(reflTex, refOutside, fresnel);\n    //col = n*.5+.5; // viewing shape\n    return col;\n}\n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    vec2 uv = (I-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 2.5, -2.5);\n    if( iMouse.z>0.001 ) {\n        ro.yz *= Rot(clamp(-m.y, -.99, .99)*TAU/2.+TAU/8.);\n        ro.xz *= Rot(-m.x*TAU);\n    } else {\n        ro.yz *= Rot(sin(.33*iTime)*TAU/8.-TAU/8.);\n        ro.xz *= Rot(.1*iTime);\n    }\n    \n    vec3 rd = getRayDir(uv, ro, vec3(0), 1.);\n    \n    vec3 col = texture(iChannel0, rd).rgb;\n   \n    float d = rayMarch(ro, rd, 1.);\n    \n    if(d<MAX_DIST) {\n        col = refractColour(ro, rd, d);\n    }\n    \n    col = pow(col, vec3(.4545));\n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}