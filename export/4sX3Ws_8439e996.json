{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define STEPS 64\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nmat3 my(float beta)\n{\n\treturn mat3(cos(beta), 0, sin(beta),\n\t\t\t\t0, 1, 0,\n\t\t\t\t-sin(beta), 0, cos(beta));\n}\n\nmat3 mz(float beta)\n{\n\treturn mat3(cos(beta), -sin(beta), 0,\n\t\t\t\tsin(beta), cos(beta), 0,\n\t\t\t\t0, 0, 1);\n}\n\nmat3 mx(float beta)\n{\n\treturn mat3(1, 0, 0,\n\t\t\t\t0, cos(beta), sin(beta),\n\t\t\t\t0, -sin(beta), cos(beta));\n}\n\nfloat sphere(vec3 p)\n{\t\n\treturn length(p) - 1.0;\n}\n\nfloat grid(float d, vec3 ray, float s, out float col)\n{\n\tvec3 n = normalize(ray);\t\n\tvec3 r = mod(d * n, s);\t\n\t\n\tif (max(r.x, max(r.y, r.z)) >= s * 0.94)\n\t\tcol = 1.0;\n\telse\n\t\tcol = 0.0;\n\t\n\treturn d;\n}\n\nfloat map(vec3 ro, vec3 rd, out float col)\n{\n\tfloat res;\n\tfloat val = -1.0;\n\tvec3 ray = ro + rd;\n\tfor (int j = 0; j < STEPS; j++)\n\t{\n\t\tfloat t = float(j)/float(STEPS);\n\t\t\n\t\tfloat s = sphere(ray);\t\t\n\t\tres = min(s,\n\t\t\t\t  min(\n\t\t\t\t\t  plane(ray, normalize(vec4(0.0, 0.5, 0.0, 1.0))),\n\t\t\t\t\t  plane(ray, normalize(vec4(0.0, -0.5, 0.0, 1.0)))));\t\t\n\t\tif (res < .001)\n\t\t{\n\t\t\tfloat d = length(ray);\n\t\t\tfloat r;\n\t\t\tval = grid(d, ray, 0.3, r);\n\t\t\tcol = r;\n\t\t\tbreak;\n\t\t}\n\t\t\t\t\n\t\tif (length(ray) > 9.0) return -1.0;\n\t\tray += res * rd;\n\t}\n\treturn val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat aspect = iResolution.x/iResolution.y;\n\tvec3 ro = vec3(0.0, 0.0, 3.0);\n\tvec3 rd = normalize(vec3( (-1.0+2.0*uv) * vec2(aspect, 1.0), -1.0));\n\t\n\t#if 1\n\tfloat angle, b;\n\tif (iMouse.z > 0.)\n\t{\n\t\tangle = acos(iMouse.x / iResolution.x);\n\t}\n\telse\n\t{\n\t\tangle = mod(iTime/5.0, 3.1415);\n\t}\n\t\n\tro *= my(angle);\n\trd *= my(angle);\n\n\t#endif\n\n\tfloat c;\n\tfloat id = map(ro, rd, c);\n\t\n\tvec3 col;\n\tif (id > 0.0)\n\t{\n\t\tif (c == 0.0)\n\t\t\tcol = vec3(c); //gaps\n\t\telse\n\t\t\tcol = vec3(0.0, 0.5*(5.5 - id), 0.0);\t\t\n\t}\n\telse\n\t\tcol = vec3(0.0); //background\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sX3Ws","date":"1381345973","viewed":476,"name":"hello, world","username":"ak","description":"I didn't know what shader or (god forbid) ray marching is 4 days ago. But thanks to helpful articles of iq I finally starting getting it. Actually I wanted to develop voxel effect, but got grid instead...","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grid"],"hasliked":0,"parentid":"","parentname":""}}