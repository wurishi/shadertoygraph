{"ver":"0.1","info":{"id":"4lyXDt","date":"1486338374","viewed":261,"name":"Ray Marching Shading Example2","username":"yumcyawiz","description":"this is the example code for my blog's articles.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//primitives\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n//distance field\nfloat df(vec3 p) {\n    float d = sdSphere(p, 1.5);\n    d = min(d, sdSphere(p + vec3(3.0*cos(iTime),  0, 3.0*sin(iTime)), 1.0));\n    d = min(d, sdBox(p + vec3(0, 2.0, 0), vec3(5.0, 0.1, 5.0)));\n    return d;\n}\n\n//calculate normal\nvec3 calcNormal(vec3 p) {\n\tfloat eps = 0.001;\n\treturn normalize(vec3(\n\t\tdf(p + vec3(eps, 0, 0)) - df(p + vec3(-eps, 0, 0)),\n\t\tdf(p + vec3(0, eps, 0)) - df(p + vec3(0, -eps, 0)),\n\t\tdf(p + vec3(0, 0, eps)) - df(p + vec3(0, 0, -eps))\n\t\t));\n}\n\n\nstruct Ray {\n    vec3 position;\n    vec3 rayDir;\n    int steps;\n    float t;\n};\n\n//it finds the intersection point and returns various data\nconst int maxSteps = 100;\nRay trace(vec3 from, vec3 rayDir) {\n    vec3 p = vec3(0);\n    int steps = 0;\n    float t = 0.0;\n    for(int i = 0; i < maxSteps; i++) {\n        p = from + t*rayDir;\n        float d = df(p);\n        if(d < 0.001) {\n            steps = i;\n            break;\n        }\n        t += d/2.0;\n    }\n    return Ray(p, rayDir, steps, t);\n}\n\n\n//is point p visible from the light?\nbool isVisible(vec3 p, vec3 lightPos) {\n    Ray tr = trace(lightPos, normalize(p - lightPos));\n    if(distance(tr.position, p) < 0.01) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n//shading\nfloat kd = 0.7;\nvec3 cd = vec3(1.0);\n\nfloat ks = 0.3;\nvec3 cs = vec3(1.0);\nfloat alpha = 12.0;\n\nfloat ka = 1.0;\nvec3 ca = vec3(0.1, 0.2, 0.15);\nvec3 shading(Ray  tr, vec3 lightPos) {\n    vec3 p = tr.position;\n    vec3 normal = calcNormal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = -tr.rayDir;\n    vec3 r = reflect(-l, normal);\n    \n    //diffuse\n    vec3 Id = kd * max(dot(normal, l), 0.0) * cd;\n    \n    //specular\n    vec3 Is = ks * pow(max(dot(v, r), 0.0), alpha) * cs;\n    \n    //ambient\n    vec3 Ia = ka * ca;\n    \n    //visibility\n    if(isVisible(p, lightPos)) {\n        return Id + Is + Ia;\n    }\n    else {\n        return Ia;\n    }\n}\n\n\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //(-1, -1) ~ (1, 1)\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    //camera settings\n    vec3 camPos = vec3(10.0*cos(iTime), 2, -10.0*sin(iTime));\n    vec3 camFront = normalize(-camPos);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camRight = cross(camUp, camFront);\n    float focus = 1.0;\n    \n    //ray direction\n    vec3 rayDir = uv.x*camRight + uv.y*camUp + focus*camFront;\n    \n    //trace\n    Ray tr = trace(camPos, rayDir);\n    \n    //light position\n\tvec3 lightPos = vec3(5, 5, 5);\n    \n    //coloring\n    vec3 color = shading(tr, lightPos);\n    \n    //clipping with fog effect\n    if(tr.t > 20.0) {\n        color = color/(tr.t - 20.0);\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}