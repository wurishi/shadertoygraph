{"ver":"0.1","info":{"id":"wdlfWH","date":"1588192906","viewed":105,"name":"fork--mandelbox-otro","username":"jorge2017a1","description":"fork--mandelbox-otro","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["forkmandelboxotro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\nfloat pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\n///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n   \n};\n\n\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\n\n//-----------------------------------------\n#define MAXREFLECTIONS 2\n#define MAXITER 64\n//-----------------------------------------\nvec3 ambientColor = vec3(0.05, 0.15, 0.2);\nvec3 diffuseColor = vec3(0.2, 0.6, 0.8);\nvec3 specularColor = vec3(1.0, 1.0, 1.0);\nvec3 lightDir = normalize(vec3(0.0, 4.0, 5.0));\nvec3 spherePos = vec3(0.0, 0.5, 0.0);\n//-----------------------------------\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n// signed\nfloat box(vec3 p, vec3 b)\n{\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat cyl(vec3 p, float r, float h) {\n\treturn max(length(p.xz) - r, abs(p.y) - h);\n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n//---------------------------------------------\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, -sa, +.0,\n\t\t+sa, +ca, +.0,\n\t\t+.0, +.0, +1.0);\n}\n\n\n\n\n\n//----------------------------------------------\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\n///-----------------------------------------\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\nvec3 LightShading(vec3 N,vec3 L,vec3 V,vec3 color)\n{\n    vec3 diffuse = max(0.,dot(N,-L))*color;\n    vec3 specular = pow(max(0.,dot(N,normalize(-L-V))),100.)*vec3(1.,1.,1.); \n    return diffuse + specular;\n}\n\n    \n\n//0000000000000000000000000000000000000000000000000000000\n\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 noise2(vec2 x)\n{\n    vec2 add = vec2(1.0, 0.0);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    \n}\n\nmat2 rotate(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\n\n///-----------------------------------------\nfloat de2(vec3 p) {\n    vec3 op = p;\n    \n    p = abs(1.0 - mod(p, 2.));\n    float r = 0.,  power = 2., dr = 1.;\n    vec3 z = p;\n    \n    for (int i = 0; i < 7; i++) {\n        op = -1.0 + 2.0 * fract(0.5 * op + 0.5);\n        float r2 = dot(op, op);\n        r = length(z);\n\n\n        if (r > 1.616) break;\n        float theta = acos(z.z / r);\n        float phi = atan(z.y, z.x);\n\n        dr = pow(r, power - 1.) * power * dr + 1.;\n        float zr = pow(r, power);\n        theta = theta * power;\n        phi = phi * power;\n        z = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n        z += p;\n    }\n    return (.5 * log(r) * r / dr);\n}\n\nfloat de1(vec3 p) {\n    float s = 1.;\n    float d = 0.;\n    vec3 r,q;\n        r = p;\n      q = r;\n    \n    for (int j = 0; j < 6; j++) {\n\t   \n        r = abs(mod(q * s + 1.5, 2.) - 1.);\t\n        r = max(r, r.yzx);\n        //r = max(r = abs(mod(q * s + 1., 2.) - 1.), r.yzx);\n\t    \n        d = max(d, (.3 - length(r *0.985) * .3) / s);\n\t    \n\ts *= 2.1;\n    }\n    return d;\n}\n\n\nfloat map(vec3 p) \n{\n  \n    return min(de1(p), 1.0);\n  \n    \n}\n///------------------------------------\n\nfloat GetDist(vec3 p  ) \n{\t\n\n      float d;\n    float dif1;\n    float dif2;\n    \n    d=999.9;\n \n    \n   vec3 pp, p2;\n    pp=p;\n    vec2 res;\n    res = vec2(9999, 0);\n    \n    \n    float  sdm1= map(p); \n    \n    res =opU(res, vec2(sdm1,6));\n    //res =opU(res, vec2(1.0,6));\n  \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n///----------------------------------------------------------\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat dO=0.2;\n    //Determines size of shadow\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        \n        float dS = GetDist(p);\n        \n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) \n        {\n            //mObj.dist=dO; \t\n            mObj.p=p; \t\n            gres2 = vec2(dO,dS); \n            break;\n    \t}    \n        \n    }\n    \n    return dO;\n}\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n    \n\n#define offset1 4.7\n#define offset2 4.6\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) \n{\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n//----------------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tif(i==0 )\n    {\n    \n        \n      return vec3(0.0,0.0,0.0);\n    }\n    \n    if(i== 1 )\n    {\n        \n        //return vec3(1, 0.5, 0);\n        \treturn vec3(1.0,0.0,0.0);\n        } \n    if(i== 2 )\n    {\n        //return vec3(1.0, 1.0, 1.0);\n        \treturn vec3(0.0,1.0,0.0);\n        } \n    if(i== 3 )\n    {\n        //return vec3(247./255., 168./255.,  184./255.); \n        \treturn vec3(0.0,0.0,1.0);\n       } \n    if(i== 4 )\n    {\n        \n        //return vec3(0, 1, 1);\n        \treturn vec3(0.0,1.0,1.0);\n        } \n    if(i== 5 )\n    {\n        //return vec3(85./255., 205./255., 252./255.);\n        return vec3(1.0,0.0,1.0);\n        \n        } \n    if(i== 6 )\n    {\n        \n        ///return  vec3(0.5, 0.8, 0.9);\n        return vec3(1.0,0.5,1.0);\n        } \n        \n    if(i== 7 )\n    {\n        return vec3(1.0, 1.0, 1.0);\n       } \n    if(i== 8 )\n    {\n       \n        \n        return vec3(0.425, 0.56, 0.9); \n       } \n    if(i== 9 )\n    {\n        \n        return vec3(0.5, 0.6, 0.6); \n     } \n    if(i== 10 )\n    {\n        return vec3(0.0, 1.0, 0.0);\n    } \n    \n    if(i== 11 )\n    {\n        return vec3(0.25, 0.25, 0.25);\n    } \n    \n     if(i== 15 )\n    {\n    \t\treturn vec3(1.0,0.0,1.);\n       } \n     if(i== 16 )\n    {\n    \t\treturn vec3(1.0,1.0,0.0);\n     } \n    \n    \n    \n    \n    \n}\n\n///--------------------------------------------\n\n// phong shading\nvec3 p_shadingv2( vec3 v, vec3 n, vec3 eye, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t// ...add lights here...\n\t\n\tfloat shininess = 16.0;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t// light\n\t{\n\t\n\t\tvec3 vl = normalize( plight_pos1 - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += plight_color1 * ( diffuse + specular ); \n\t}\n\t\n\t\n\n    return (final);\n}\n\n\n\n\nvec3 camera(vec3 ro, vec2 uv, vec3 ta) {\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 left = cross(vec3(0, 1, 0), fwd);\n\tvec3 up = cross(fwd, left);\n\treturn normalize(fwd + uv.x*left + up*uv.y);\n}\n\n\n///---------------------\nvec3 camPath(float time) {\n    vec2 p = 600.0 * vec2(cos(1.4 + 0.37 * time),cos(3.2 + 0.31 * time));\n    return vec3(p.x, 0.0, p.y);\n}\n\n\n\nvec3 postprocess(vec3 rgb, vec2 xy)\n{\n\trgb = pow(rgb, vec3(0.67));\n    \n\t//#define CONTRAST 1.4\n    #define CONTRAST 1.6\n    \n\t#define SATURATION 1.4\n\t#define BRIGHTNESS 1.2\n    \n    \n\trgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb*BRIGHTNESS)), rgb*BRIGHTNESS, SATURATION), CONTRAST);\n\t//rgb = clamp(rgb+hash(xy*time)*.1, 0.0, 1.0);\n\treturn rgb;\n}\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   //vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    \n\n\tlight_pos1   = vec3( -20.0, -20.0, -iTime*2.0);\n \tlight_color1 = vec3( 0.3, 0.2, 1.0 );\n\n \tlight_pos2   = vec3( 20.0,20.0, 20.0 +iTime*2.0 );\n \tlight_color2 = vec3( 1.0, 0.7, 0.7);\n    \n\n    \n     vec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n    float t = iTime * 0.5;\n    vec2 s = uv * vec2(1.75, 1.0);\n\n\n    vec3 campos = camPath(t * 0.001);\n    vec3 camtar = camPath(t + 2.0);\n\n\t\n    float roll = 0.4 * cos(0.4 * t);\n    vec3 cw = normalize(camtar - campos);\n    vec3 cp = vec3(sin(roll), cos(roll), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    vec3 rd = normalize(s.x * cu + s.y * cv + .6 * cw);\n\n    vec3 ro= campos;\n    \n    \n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n    \n    float dif=4.5;\n    \n    vec3 colp2 = GetLightPar(p,light_pos2)*light_color2;\n    \n    \n    mObj.dist =d;\n    vec3 colobj;\n    \n    vec3 nor= GetNormal( p);\n    mObj.normal=nor;\n    colobj=getSphereColor(int( Obj.tipo));\n    \n    \n    vec3 col2=vec3(0.0);\n   \n    col=colp2*dif*colobj;\n    \n    \n    \n     vec3 backg = vec3(.4,0.5,0.8)/2.0;\n    col *= vec3(1., .75, .8) * 1.2;    \n    col = mix(col, backg, 0.75 - exp(-1.0 * pow(d, 0.91)));\n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}