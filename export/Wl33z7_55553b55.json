{"ver":"0.1","info":{"id":"Wl33z7","date":"1575889601","viewed":471,"name":"Distance from line: AB","username":"kubamaruszczyk1604","description":"Drawing a distance from straight line. Line is defined by two points (and distance from the line).\nUse mouse L-button to change the position of point B.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["line","intersection","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float thickness = 0.014;\nconst vec2 A = vec2(0.3, 0.3);\n      vec2 B = vec2(-0.2, -0.1);\n\n\nvoid DrawPoint(inout vec3 col, vec2 p, vec2 uv)\n{\n    col += clamp(10.0 - length(p-uv)*260.0,0.0,1.0);\n    //col += float(length(p-uv)<0.04);\n}\n    \n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 0. Make the center be the orgin\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0*uv -1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 muv = iMouse.xy/iResolution.xy;\n    muv = 2.0*muv -1.0;\n    muv.x *= iResolution.x/iResolution.y;\n    \n    // Mouse\n    if(muv.y>-1.0)  B = muv;\n    \n    // 1. Find line equation (AB)\n    float a = (B.y - A.y)/(B.x -A.x);\n    float c = A.y - A.x * (B.y - A.y) / (B.x - A.x);\n    \n    // 2. Find perpendicular line\n    float a_perp = -(1.0/a);\n    float c_perp = uv.y - a_perp*uv.x;\n    \n    // 3. Find an intersection point\n    float interX = (c - c_perp)/(a_perp-a);\n    float interY = a*interX + c;\n    \n    // 4. Find distance between current point (uv) and intersection point;\n    float dist = length(uv - vec2(interX, interY));\n    \n    // Draw distance from the line\n    vec3 col = vec3(0.4, 0, 1.0 - dist);\n    \n    // Draw line\n    if(dist < thickness) col = vec3(1.0,0.0,0.3);\n    \n    // Draw points A,B\n    DrawPoint(col,A,uv);\n    DrawPoint(col,B,uv);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}