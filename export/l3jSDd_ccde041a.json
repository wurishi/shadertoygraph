{"ver":"0.1","info":{"id":"l3jSDd","date":"1711292088","viewed":65,"name":"Grin Lens","username":"Fuergu","description":"Refractive index varying along the radial direction. Only when slice is big enough, you can see the lenticular effect clearly.\nAnisotropic effect is also very obvious.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetDist(vec3 p) {\n\n    float r = 5.;\n    float IOR = 0.;\n    float thickness = 5.;\n    \n    //More significant over 80\n    float slice = 30.;\n    \n   // This is more sensitive than I thought.\n   // A little IOR difference makes noticeable differences.\n    float IOR_most_inside  = 1.;\n    float IOR_most_outside = 1.5;\n    \n    float d = sdCappedCylinder(p, vec3(thickness/2., 0., 0.), vec3(-thickness/2., 0., 0.), r/slice);\n    for(float j = 0.;j<slice;++j)\n    {\n    float d1  = sdHollowCylinder(p, thickness,  r/slice*j,  r/slice*(j+1.)) ;\n    d = min(d,d1);\n    IOR = map(j,0.,slice,IOR_most_inside,IOR_most_outside);\n    }\n    return vec2(d,IOR);    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd,float side) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p).x*side;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p).x - \n        vec3(GetDist(p-e.xyy).x, GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy+vec2(.5);\n    m.y*=-1.;\n    //m.x = 200./800.*iResolution.x;\n    //m.y = 33./450.*iResolution.y;\n    //m.x*=cos(T/10.);m.y=.7;\n    vec3 ro = vec3(0., zoom, -5.);\n    ro.yz *= Rot(-m.y*PI);\n    ro.xz *= Rot(-m.x*TAU);\n\n    //m = iMouse.xy/iResolution.xy;\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), FOV);\n    vec3 col = texture(iChannel0,rd).rgb;\n   \n    float d = RayMarch(ro, rd,1.);//raymarch outside the object\n    \n\n   \n    \n    float IOR = 1.5;\n    \n    if(d<MAX_DIST) \n    {\n        vec3 p = ro + rd * d;// 3d hit position\n        vec3 n = GetNormal(p);// normal of surface... orientation\n        vec3 r = reflect(rd, n);\n        vec3 refOutside = texture(iChannel0,r).rgb;\n        IOR = GetDist(p).y;\n        vec3 rdIn = refract(rd,n,1./IOR);//ray direction when entering\n        \n        //vec3 refrDir = refract(rd,n,1./IOR);//IOR determines how much light is blended\n\n///////////////////////////////////////////////////////////////////\n   \n        //fresnel\n        vec3 fresnelColor =1.02*vec3(dot(normalize(ro),n));\n        vec3 fresnel = vec3(pow(vec3(dot(rd,n))+1.,FresnelReflection));\n\n        vec3 reflTex = vec3(0.);\n        vec3 reflTexCurrent = vec3(0.);\n        vec3 pEnter = vec3(0.);\n        vec3 pExit = vec3(0.);\n        vec3 glassColor = vec3(1.);\n        float opticalDistence = 0.;\n        float opticalDistance = 0.;\n\n        //multiple times reflection inside\n        for (int i=1;i<=ReflectTimes;i++)\n        {\n            //添加内部反射\n            pEnter = p-n*SURF_DIST*3.;\n            float dInside_current = RayMarch(pEnter, rdIn,-1.);//raymarch inside the object, start from p, direction is refrDir\n            pExit = pEnter + rdIn * dInside_current;//3d position of exit \n            vec3 nExit = -GetNormal(pExit);//normal inside is fliped\n\n            //red\n            vec3 rdOut = refract(rdIn,nExit,IOR-1.5*Dispersion);\n            if(dot(rdOut,rdOut)==0.) rdOut = reflect(rdIn,nExit);//全反射\n            reflTexCurrent.r = texture(iChannel0,rdOut).r*glassColor.r;\n            //green\n            rdOut = refract(rdIn,nExit,IOR);\n            if(dot(rdOut,rdOut)==0.) rdOut = reflect(rdIn,nExit);//全反射\n            reflTexCurrent.g = texture(iChannel0,rdOut).g*glassColor.g;\n            //blue\n            rdOut = refract(rdIn,nExit,IOR+Dispersion);\n            if(dot(rdOut,rdOut)==0.) rdOut = reflect(rdIn,nExit);//全反射\n            reflTexCurrent.b = texture(iChannel0,rdOut).b*glassColor.b;\n\n            //attenuation\n\n            opticalDistance += dInside_current;\n            float attenuation = exp(-opticalDistance*Attenuation);\n            reflTex += reflTexCurrent*attenuation*pow(.2,float(i-1));\n\n\n\n            //output\n            //col = rdOut*.5+.5;\n            col = reflTex;\n            //col = mix(reflTex,refOutside,fresnel);\n\n            //update\n            rdIn = rdOut;  pEnter = pExit;\n       } \n    }\n    \n    col = pow(col, vec3(1.));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n//ReflectTimes is no need to be greater,as we are not interested in refraction\n// interested in the phenomenon of transmitted light\n#define ReflectTimes 2\n\n#define Attenuation 0.0\n#define Dispersion 0.\n#define FresnelReflection vec3(1.000,1.000,1.000)\nconst float FOV = 1.;\nconst float zoom = 20.;\n#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .00001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p = mat3(1, 0, 0, 0, 0, -1, 0, 1, 0) * p;\n  p.xy*=Rot(15.);\n  p.y = abs(p.y);\n  p.y+=h/2.;\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n    return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}\n\nvec3 smoothstep3(vec3 a, vec3 b, float x)\n{\n    vec3 result;\n    result.x = smoothstep(a.x, b.x, x);\n    result.y = smoothstep(a.y, b.y, x);\n    result.z = smoothstep(a.z, b.z, x);\n    return result;\n}\n//https://iquilezles.org/articles/distfunctions/\nfloat sdCappedCylinder( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\nfloat sdHollowCylinder(vec3 p, float thickness, float r_inner, float r_outer) {\n    float d1 = sdCappedCylinder(p, vec3(thickness/2., 0., 0.), vec3(-thickness/2., 0., 0.), r_outer);\n    float d2 = sdCappedCylinder(p, vec3(thickness/2. + r_outer - r_inner, 0., 0.), vec3(-thickness/2. - r_outer + r_inner, 0., 0.), r_inner);\n    return max(d1, -d2);\n}\n","name":"Common","description":"","type":"common"}]}