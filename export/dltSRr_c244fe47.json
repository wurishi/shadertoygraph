{"ver":"0.1","info":{"id":"dltSRr","date":"1684979357","viewed":65,"name":"wwdwadadawdd","username":"youarebamboozled","description":"ww","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["ww"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nfloat hash(vec2 p)\n{\n    vec2 k = vec2(0.3183099, 0.3678794);\n    p = p*k + k.yx;\n    return fract(16.0 * k.x*k.y * (dot(p,p)));\n}\n\n// 2D Perlin Noise\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(mix(hash(i + vec2(0.0,0.0)), \n                   hash(i + vec2(1.0,0.0)), u.x),\n               mix(hash(i + vec2(0.0,1.0)),\n                   hash(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\n// Generate and animate the corona effect using the noise function\nfloat corona(vec2 uv, float time) {\n    float n = 0.0;\n    uv *= 5.0;\n    for (int i = 0; i < 7; i++) {\n        float t = float(i) * time * 0.5;\n        n += noise(uv + t);\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Create a radial gradient\n    float dist = length(uv);\n\n    // Draw the sun\n    float sun = smoothstep(0.1, 0.0, dist);\n\n    // Create the corona effect\n    float cor = corona(uv * dist, iTime);\n    cor *= pow(1.0 - dist, 2.5);\n\n    vec3 col = vec3(sun);\n    col += cor * vec3(0.0, 0.95, 0.5);\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash(vec2 p)\n{\n    vec2 k = vec2(0.3183099, 0.3678794);\n    p = p*k + k.yx;\n    return fract(16.0 * k.x*k.y * (dot(p,p)));\n}\n\n// 2D Perlin Noise\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(mix(hash(i + vec2(0.0,0.0)), \n                   hash(i + vec2(1.0,0.0)), u.x),\n               mix(hash(i + vec2(0.0,1.0)),\n                   hash(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nvec2 mainSound(int samp, float time)\n{\n    float noiseValue = noise(vec2(time * 10.0, 0.0));\n    return vec2(cos((2.562 * 50.0) * time * 2.0) + (noiseValue * 0.2));\n}\n","name":"Sound","description":"","type":"sound"}]}