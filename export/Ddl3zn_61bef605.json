{"ver":"0.1","info":{"id":"Ddl3zn","date":"1665562593","viewed":277,"name":"catadioptre 2b / rhombic dodecah","username":"FabriceNeyret2","description":"  rhombic dodecahedron by inverting the center-face-pyramids of a cube.\nref ( thanks jt ):  [url] https://en.wikipedia.org/wiki/Rhombic_dodecahedron#/media/File:R1-cube.gif [/url]\n","likes":18,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","sdf","short","golf","3tweets","rhombicdodecahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/ld3fDr\n\n//#define R(x,y) t = max(t, max(abs(q.x+q.y),abs(q.x-q.y)) /1.41 )  // this-r : diamond x z-axis\n//#define R(x,y) t = max(t, (abs(q.x)+abs(q.y)) /1.41 )  // works to, and allows treating the 3 axes at once https://www.shadertoy.com/view/Wd2Gzt\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t = iTime;\n    mat2  R = mat2( sin(t+vec4(0,33,11,0)) ); // 2D rotation matrix\n    vec3  q = iResolution,\n          D = vec3(.3*(U+U-q.xy)/q.y, -1),    // ray direction\n          p = 40./q;                          // marching point along ray \n    O*=0.;\n    for ( O++; O.x > 0. && t > .01 ; O-=.004 )\n        q = p,\n        q.xz *= R, q.yz *= R,                 // rotations\n     // t-=t,\n     // R(x,y), R(y,z), R(x,z) -7.,           // octaedron\n        q = abs(q), q += q.yzx, t = max(q.x,max(q.y,q.z))/1.41 - 7., // https://www.shadertoy.com/view/Wd2Gzt\n        p += .2*t*D;                          // step forward = dist to obj\n    O *= O*O*1.6;\n}\n","name":"Image","description":"","type":"image"}]}