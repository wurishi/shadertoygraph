{"ver":"0.1","info":{"id":"3dlcDf","date":"1585751429","viewed":115,"name":"SDF Vis","username":"philippkurth","description":"Visualisierung f√ºr Gamut Mapping Test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 samplePosition, float rotation)\n{\n    const float PI = 3.14159;\n    float angle = rotation * PI * 2.0 * -1.0;\n    float sine = sin(angle), cosine = cos(angle);\n    return vec2(cosine * samplePosition.x + sine * samplePosition.y, cosine * samplePosition.y - sine * samplePosition.x);\n}\n\nvec2 translate(vec2 samplePosition, vec2 offset)\n{\n    //move samplepoint in the opposite direction that we want to move shapes in\n    return samplePosition - offset;\n}\n\nvec2 scale(vec2 samplePosition, vec2 scale)\n{\n    return samplePosition / scale;\n}\n\nfloat rectangle(vec2 samplePosition, vec2 halfSize)\n{\n    vec2 componentWiseEdgeDistance = abs(samplePosition) - halfSize;\n    float outsideDistance = length(max(componentWiseEdgeDistance, 0.0));\n    float insideDistance = min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 0.0);\n    return outsideDistance + insideDistance;\n}\n\nfloat gamut0(vec2 uv)\n{\n    vec2 squarePosition = uv;\n    squarePosition = rotate(squarePosition, .02);\n    squarePosition = scale(squarePosition, vec2(1.0, 2.0));\n    squarePosition = translate(squarePosition, vec2(0.8, 0.3));\n    squarePosition = rotate(squarePosition, .125);\n    float squareShape = rectangle(squarePosition, vec2(0.1));\n    return squareShape;\n}\n\nfloat gamut1(vec2 uv)\n{\n    vec2 squarePosition = uv;\n    squarePosition = rotate(squarePosition, -.02);\n    squarePosition = scale(squarePosition, vec2(1.0, 2.0));\n    squarePosition = translate(squarePosition, vec2(0.8, 0.18));\n    squarePosition = rotate(squarePosition, 0.125);\n    float squareShape = rectangle(squarePosition, vec2(0.1));\n    return squareShape;\n}\n\nfloat scene(vec2 uv)\n{\n    //float t = sin(iTime) * 0.5 + 0.5;\n    float t = 0.1;\n    \n    return mix(gamut0(uv), gamut1(uv), t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    uv.x *= aspect;\n    \n    vec3 insideColor = vec3(0.5,0,0.5);\n    vec3 outsideColor = vec3(0,0.5,0);\n    \n    float lineDistance = 0.4;\n    float lineThickness = 0.001;\n    float subLines = 3.0;\n    float subLineThickness = 0.002;\n    \n    \n    float dist = scene(uv);\n    vec3 col = mix(insideColor, outsideColor, step(0.0, dist));\n\n    float distanceChange = fwidth(dist) * 0.5;\n    float majorLineDistance = abs(fract(dist / lineDistance + 0.5) - 0.5) * lineDistance;\n    float majorLines = smoothstep(lineThickness - distanceChange, lineThickness + distanceChange, majorLineDistance);\n\n    float distanceBetweenSubLines = lineDistance / subLines;\n    float subLineDistance = abs(fract(dist / distanceBetweenSubLines + 0.5) - 0.5) * distanceBetweenSubLines;\n    subLines = smoothstep(subLineThickness - distanceChange, subLineThickness + distanceChange, subLineDistance);\n\n    col = col * majorLines * subLines;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}