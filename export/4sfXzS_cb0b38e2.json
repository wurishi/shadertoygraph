{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float epsilon = 1e-6;\nconst float PI = 3.14159265358979323846;\nconst float pov = PI/10.0;\nconst float maxdistance = 5.0;\nconst vec3 light = vec3(0.0, 0.0, 1.0);\nconst float celShades = 5.0;\nconst vec3 lightColor = vec3(1.0, 0.0, 0.0);\nconst vec3 eye = vec3(0.0, 0.0, 4.0);\n\n// for calculating normal\nconst float delta = 0.0001;\nconst vec3 dx = vec3(delta, 0.0, 0.0);\nconst vec3 dy = vec3(0.0, delta, 0.0);\nconst vec3 dz = vec3(0.0, 0.0, delta);\n\n// for edge detection\nconst float delta2 = 0.01;\nconst vec3 dx2 = vec3(delta2, 0.0, 0.0);\nconst vec3 dy2 = vec3(0.0, delta2, 0.0);\nconst vec3 dz2 = vec3(0.0, 0.0, delta2);\n\nfloat c;\nfloat s;\n\nfloat smin( float a, float b)\n{\n\tfloat k = 0.2;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat scene(vec3 p)\n{\n    mat3 m1 = mat3(c, 0, -s,\n                  0, 1, 0,\n                  s, 0, c);\n    mat3 m2 = mat3(c, -s, 0,\n                  s, c, 0,\n                  0, 0, 1);\n    p = p*m1*m2;\n    float size = (abs(c) + abs(s))*0.5;\n    //return sdTorus(p, vec2(size, size/2.0));\n    //return sdBox(p, vec3(size));\n    return smin(sdTorus(p, vec2(size, size/2.0)),\n                sdBox(p, vec3(0.6)));\n}\n\nvec3 march(vec3 ray)\n{\n    vec3 color = vec3(0.3);\n    float t = 0.0;\n    float mindistance = maxdistance;\n    for (int i  = 0; i < 256; ++i)\n    {\n        vec3 p = eye + ray * t;\n        float d = scene(p);\n        if (d < mindistance)\n            mindistance = d;\n        if(abs(d) < epsilon)\n        {\n            vec3 n1 = normalize(vec3(scene(p+dx2)-d, scene(p+dy2)-d, scene(p+dz2)-d));\n            vec3 n2 = normalize(vec3(d-scene(p-dx2), d-scene(p-dy2), d-scene(p-dz2)));\n\n            if (abs(dot(n1,n2)) > 0.99)\n            {\n                vec3 normal = normalize(vec3(\n                    scene(p+dx)-scene(p-dx),\n                    scene(p+dy)-scene(p-dy),\n                    scene(p+dz)-scene(p-dz)));\n                float intensity = dot(normal, light);\n                intensity = ceil(intensity * celShades) / celShades;\n                color = lightColor * intensity;\n            }\n            else\n                color = vec3(0.0);\n            break;\n        }\n        t += d;\n        if (t > maxdistance)\n        {\n            if (mindistance < 0.02)\n                color = vec3(0.0);\n            break;\n        }\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tc = cos(iTime);\n\ts = sin(iTime);\n    float ar = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord.xy) / iResolution.yy - vec2(0.5 * ar, 0.5);\n    vec3 ray = normalize(vec3(uv, eye.z - 0.5/atan(pov)) - eye);\n    fragColor = vec4(march(ray), 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfXzS","date":"1402965045","viewed":1424,"name":"Play with cel shading","username":"finalpatch","description":"Play with cel shading","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["celshading"],"hasliked":0,"parentid":"","parentname":""}}