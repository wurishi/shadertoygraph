{"ver":"0.1","info":{"id":"sddSzH","date":"1632832006","viewed":488,"name":"Fractal renderer","username":"playersteve19","description":"Experimenting to create my own mandelbrot-type fractal renderer. \nColoring equation modified from https://www.desmos.com/calculator/aekvabhy0a\nThe Collatz Fractal from https://yozh.org/2012/01/12/the_collatz_fractal/\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*for F. G.*/\n\n#define steps 2. /*around 6 is good*/\n#define speed 5.5 /*seizure warning for higher numbers, especially with lower step values!*/\n#define scale 0.\n#define iterations pow(steps+1.,3.)\n#define _length 4.\n#define pi 3.141592653589793\nvec2 fractalize(in vec2 cv, in vec2 uv){\n/*uncomment only one curve. Otherwise things get verrry wacky.*//*or don't. it's fun*/\n    //cv=vec2(cv.x*cv.x-cv.y*cv.y,2.*cv.x*cv.y)+uv;/*Mandelbrot Set*/\n    cv=vec2(cv.x*cv.x-cv.y*cv.y,-abs(2.*cv.x*cv.y))+uv;/*Burning Ship Fractal*/\n    //cv=vec2(cv.y,-uv.y*cv.x+uv.x*cv.y-pow(cv.y,3.));/*Duffing Fractal*/\n    //cv=.25*vec2(2.+7.*cv.x-2.*cos(pi*cv.x)*cosh(pi*cv.y)-5.*cv.x*cos(pi*cv.x)*cosh(pi*cv.y)-5.*cv.y*sin(pi*cv.x)*sinh(pi*cv.y),7.*cv.y+2.*sin(pi*cv.x)*sinh(pi*cv.y)+5.*cv.x*sin(pi*cv.x)*sinh(pi*cv.y)-5.*cv.y*cos(pi*cv.x)*cosh(pi*cv.y))+uv;\n    /*the Collatz fractal*/\n    /*Now, technically, the \"true\" Collatz fractal is the julia set at (0,0), but I've done it like the others for completeness*/\n    //cv=vec2(cv.x*cos(pi*cv.y),cv.x*sin(pi*cv.y))+uv;\n    //cv=vec2(mod(cv.x,cv.y),mod(cv.y,cv.x))+uv;\n    cv=vec2(cv.x*cos(cv.y),cv.x)+uv;\n    return cv;\n}\nfloat value(in vec2 uv, in vec2 cv){\n    //cv = uv;\n    float f;\n    //f=-1.\n    for(float i;i<min(speed*iTime,iterations+1.);i++){\n    cv=fractalize(cv,uv);\n        if(dot(cv,cv)<=2.*_length){\n            f=i;\n        }\n    }\n    return f;\n    \n}\nvec3 colorize(in float f){\n    float r = floor(mod(f,steps+1.));\n    float g = floor(mod(f,pow(steps+1.,2.))/(steps+1.));\n    float b = floor(mod(f,pow(steps+1.,3.))/pow(steps+1.,2.));\n    vec3 col=vec3(r,g,b)/(steps);\n    return col.rgb;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mous = iMouse.xy/iResolution.xy;\n    if(mous.xy==vec2(0.)){mous=vec2(.5);}/*special thanks to FabriceNeyret2 for suggesting this fix*/\n    mous*=2.;mous-=1.;\n    uv*=2.;uv-=1.;\n    uv/=exp2(scale-1.);mous/=exp2(scale-1.);\n    uv-=mous;/*uncomment to move the fractal around with the mouse. Not recommended in julia mode*/\n    uv.x*=iResolution.x/iResolution.y;/*fixes aspect ratio stretching*/\n    vec3 col;\n    col = colorize(value(uv,uv));/*value(uv,uv)=normal operation; value(mous,uv)=julia mode*/\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}