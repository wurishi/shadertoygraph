{"ver":"0.1","info":{"id":"flscDs","date":"1649275125","viewed":127,"name":"Void Stare","username":"VoxelDoesArt","description":"First shader ever, and first alpha shader of a character I designed. Half human, half void. \nI plan on adding a lot more to this later on!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","character"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//VOID STARE, created by VoxelDoesArt.\n/* CHANGE LOG:\n   4/2/22 > v0.0 - Initial start date\n   4/6/22 > v0.1 - Official Alpha release\n   4/6/22 > v0.2 - iMouse fix, compiled Eyes and Mouth into Face\n\n*/\n\nfloat srend (vec2 uv, vec2 p, float s, float d, float w){\n    vec2 p1 = pointsin(p, d, s);\n    vec2 p2 = pointsin(p, d+600., s);\n    \n    return seg(uv, p1, p2) + w;\n}\n\nvec4 Face (vec2 uv, vec2 mou){\n    vec4 col = vec4(FA, 1.);\n    float w = .3;\n    float time = 0.3*(0.5+0.5*cos(iTime*1.1+1.0));\n    \n    \n    col.a = circ(uv, vec2(mou.x+w, mou.y), .25, .01);\n    col.a -= circ(uv, vec2(mou.x+w, mou.y), .19, .01);\n    \n    float s1 = -cla(srend(uv, vec2(mou.x+w, mou.y), .3, .5-mou.x+(mou.y*1.5), .975))+1.;\n    s1*=circ(uv, vec2(mou.x+w, mou.y), .2, .1);\n    col.a += sign(s1);\n    \n    \n    float c2 = circ(uv, vec2(mou.x-w, mou.y), .25, .01);\n    c2 -= circ(uv, vec2(mou.x-w, mou.y), .19, .01);\n    \n    float s2 = -cla(srend(uv, vec2(mou.x-w, mou.y), .3, -.5-mou.x-(mou.y*1.5), .975))+1.;\n    s2*=circ(uv, vec2(mou.x-w, mou.y), .2, .1);\n    c2 += sign(s2);\n    \n    col.a += c2; \n    \n    float m = -cla(srend(uv, vec2(mou.x, mou.y-.4), .2, 1.6+mou.x, .975))+1.;\n    col.a += sign(m);\n    \n\nreturn (col);\n}\n\nvec4 Head (vec2 uv, float s, vec2 mou){\n    vec4 col = vec4(VO, 1.);\n    vec2 pos = vec2(0.);\n    col.a = circ(uv, pos, 1.*s, .01);\n    \n    float inside = circ(uv, pos, .75*s, .01);\n    col.rgb = mix(col.rgb, VI, inside);\n    \n    float shine = circ(uv, vec2(mou.x,mou.y)*2., .6*s, .01);\n    vec3 cs = overlay(vec3(1.), col.rgb);\n    col.rgb = mix(col.rgb, cs, shine);\n    \n    \nreturn col;\n}\n\n\nfloat spos (vec2 uv, float s, float d, float w, float h){\n    vec2 p1 = pointsin( vec2(0.), d-w, s*.9);\n    vec2 p2 = pointsin( vec2(0.), d+w, s*.9);\n    vec2 p3 = pointsin( vec2(0.), d, s*1.+h);\n    \n    return cla(tri(uv, p1, p2, p3));;\n}\nvec4 Spikes (vec2 uv, float s, vec2 mou){\n    vec4 col = vec4(VO, 1.);\n    float m = mou.x+mou.y;\n    \n    float d = spos(uv, s, .5+m, .3, .25);\n          d += spos(uv, s, 1.+m, .27, .4);\n          d += spos(uv, s, 2.3+m, .35, .2);\n          d += spos(uv, s, 4.2+m, .32, .4);\n          d += spos(uv, s, 5.5+m, .25, .25);\n    \n    col.a = sign(d);\nreturn col;\n}\n\n\nvec4 Vay (vec2 uv, vec2 m){\n    vec4 col = vec4(0.);\n    float sz = cla(.7);\n    \n    vec4 hd = Head(uv, sz, m);\n    vec4 sp = Spikes(uv, sz, m);\n    vec4 fa = Face(uv, m);\n    col = mix(col, sp, sp.a);\n    col = mix(col, hd, hd.a);\n    col = mix(col, fa, fa.a);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mou = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    mou*=0.07;\n    \n    vec4 col = vec4(0.);\n    \n    vec4 bg = vec4(texture( iChannel0, uv ).xyz, 1.);\n    bg = bg/5.;\n    bg.g = bg.g/1.5;\n    \n    vec4 vay = Vay(uv, mou);\n    col = mix(bg, vay, vay.a);\n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* ORIGINAL SPIKE COORDS\n    vec2 p1 = vec2(-.5, -.6)*s;\n    vec2 p2 = vec2(.5, -.6)*s;\n    vec2 p3 = vec2(0., .8)*s;\n*/\n#define cla(x) clamp(x, 0., 1.)\n\n#define VI vec3(0.203, 0.207, 0.4)\n#define VO vec3(0.125, 0.125, 0.258)\n#define FA vec3(1.)\n\n// UV = Pixel, O = Offset, S = Size, BL = blur\nfloat circ (vec2 uv, vec2 o, float s, float bl) {\n    float p = length(uv-o);\n    return smoothstep(s, s-bl, p);\n}\n\n// signed distance to a 2D triangle equation by iq! https://www.shadertoy.com/view/XsXSz4\nfloat tri( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn sqrt(d.x)*sign(d.y);\n}\n\n// Segment equation by iq! https://www.shadertoy.com/view/3tdSDj\nfloat seg( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =cla(dot(pa,ba)/dot(ba,ba));\n    return abs(length(pa-h*ba));\n}\n\nfloat pointdir (vec2 a, vec2 b){\n    return abs(atan((a.y - b.y)/(a.x - b.x)));\n}\n\nvec2 pointsin (vec2 p, float d, float r){\n    return vec2( (sin(d)*r)+p.x, (cos(d)*r)+p.y );\n}\n\n//Photoshop Blend Modes, ported by poljere! https://www.shadertoy.com/view/Md3GzX\nvec3 overlay(in vec3 src, in vec3 dst)\n{\n    return mix(2.0 * src * dst, 1.0 - 2.0 * (1.0 - src) * (1.0-dst), step(0.5, dst));\n}\n\n","name":"Common","description":"","type":"common"}]}