{"ver":"0.1","info":{"id":"md3GWH","date":"1677190076","viewed":130,"name":"Free textures!","username":"ianertson","description":"Here's some textures free for anyone to use, these textures are the ones I created for this scene here:\nhttps://www.shadertoy.com/view/dd3GD8\n\nTop left: Brick texture\nTop right: Rock-Grass texture\nBottom left: Wooden planks\nBottom right: Cracked cobble","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["noise","textures","art","graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*  Some textures I made, use them however you want :)\n\n    -----------------------------------------------------\n    License: https://www.gnu.org/licenses/gpl-3.0.txt\n*/\n\n#define R (iResolution.xy)\n#define T (iTime)\n#define M_PI (3.1416)\n#define TAU (M_PI * 2.0)\n#define rgb(a,b,c) (vec3(a, b, c) / 255.0)\n\n// The textures depend on these noise functions\n// You'll find the actual textures further down in this piece of code\n\nvec3 noise(in vec2 p, in float seed) {\n    return textureLod(iChannel3, (p + (seed * 256.0))/256.0, 0.0).xyz;\n}\n\nvec3 noise(in vec2 p, in float seed, in float freq) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    #define ADV n += amp * noise(p*freq, seed); div += amp; amp /= 2.0; freq *= 2.0;\n    ADV; ADV; ADV; ADV;\n    #undef ADV \n    return n / div;\n}\n\nvec3 noise6(in vec2 p, in float seed, in float freq) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    #define ADV n += amp * noise(p*freq, seed); div += amp; amp /= 2.0; freq *= 2.0;\n    ADV; ADV; ADV; ADV; ADV; ADV;\n    #undef ADV \n    return n / div;\n}\n\n// Below is all the textures\n// ------------------------------\n\nvec3 plankTexture(vec2 uv) {\n    vec3 col = vec3(0.0);\n    vec3 c1 = rgb(151, 134, 110);\n    vec3 c2 = rgb(129, 97, 74);\n    vec3 c3 = rgb(114, 87, 60);\n    vec3 c4 = rgb(35, 25, 16);\n    \n    vec3 hf = noise6(uv, 1.298112, 40.0);\n    vec3 lf = noise6(uv, 0.349185, 5.0);\n    vec3 r = abs(reflect(hf, lf));\n    \n    col += c1 * hf.x;\n    col += c2 * hf.y;\n    col += c3 * hf.z;\n    col /= 3.0;\n    \n    float tile = 4.0;\n    vec2 id = floor(uv*tile);\n    vec2 lv = fract(uv*tile);\n    \n    float t = 0.05 + (hf.x*0.03+hf.y*0.03);\n    float g1 = max(0.0, 1.0 - ceil((lv.y)-t));\n    float g2 = max(0.0, 1.0 - ceil((1.0-lv.y)-t));\n    \n    float gg = max(0.0, 1.0 - ceil((lv.y)-0.04));\n    \n    float g = max(g1, g2);\n    g *= (hf.x+lf.z)/1.2;\n    \n    col = mix(col, (c4*(0.1+c4))+(pow(hf.x, 2.0)/8.), g);\n    col = mix(col, c4*c4, clamp(gg*hf.y*1.6, 0.0, 1.0));\n    \n    float stripes = (sin((TAU-cos(2.*uv.y*(TAU-sin(uv.x*(TAU-tan((uv.x-uv.y)*0.5))))))*TAU*((uv.x+uv.y)*2.)) * 0.5) + 0.5;\n    stripes *= max(0.0, 1.0 - (gg+g*2.));\n    col = mix(col, c4, stripes*clamp((r.y+r.z+r.x)/2.2, hf.x, 1.0));\n\n    return clamp(col, 0.0, 1.0);\n}\n\nvec3 brickTexture(vec2 uv) {\n    vec3 col = vec3(0.0);\n    \n    float tile = 4.0;\n    vec2 id = floor(uv*tile);\n    vec2 lv = fract(uv*tile);\n    \n    vec3 hf = noise6(uv, 3.281139, 32.0);\n    vec3 lf = noise6(uv, 2.000123, 5.0);\n    vec3 tf = noise6(id, 0.029181, 16.);\n    \n    vec3 c1 = rgb(142, 91, 67);\n    vec3 c2 = rgb(71, 41, 42);\n    vec3 c3 = rgb(107, 59, 48);\n    \n    vec3 c4 = rgb(156, 146, 125);\n   \n    float t = max(hf.x*0.3*hf.y, 0.04 + (0.5 - (lf.x+lf.y)/2.));\n    float g = max(0.0, 1.0 - ceil(min(lv.x + hf.y*0.04, lv.y+hf.x*0.04)-t));\n    float g2 = max(0.0, 1.0 - round(min(lv.x + hf.y*0.04, lv.y+hf.x*0.04)+t*6.));\n    \n   \n    g *= clamp(2.0*((pow(lf.y, 4.0)+pow(hf.x, 4.0))), 0.0, 1.0);\n    g = max(0.0, g - hf.z*0.2);\n    \n    g2 *= clamp(2.0*((pow(lf.z, 4.0)+pow(hf.y, 4.0))), 0.0, 1.0);\n    g2 = max(0.0, g2 - hf.x*0.2);\n    \n    col += c4*(g2*(tf.x+lf.x))/2.;\n    \n    col += (c1*c1) * tf.x;\n    col += (c2*c2) * tf.y;\n    col += (c3*c3) * tf.z;\n    \n    col += c4 * g;\n    \n    col += c1 * hf.x*hf.y*hf.z;\n    col += (c2*c2) * lf.y;\n    col += (c3*c3) * lf.z;\n    \n    col *= (hf.x+hf.y+hf.z+lf.y)/3.5;\n    \n    vec3 grit = textureLod(iChannel3, uv*5., 0.0).rgb;\n    \n    float gritf = pow(grit.x, 4.0);\n    col += (c1 * gritf) * max(0.0, 1.0 -(lf.z*0.6));\n    \n    return col;\n}\n\nvec3 cobbleTexture(vec2 uv) {\n    vec3 col = vec3(0.0);\n    \n    float tile = 4.0;\n    vec2 id = floor(uv*tile);\n    vec2 lv = fract(uv*tile);\n    \n    vec3 hf = noise6(uv, 1.92815, 32.0);\n    vec3 lf = noise6(uv, 0.11122, 5.0);\n    \n    vec3 c1 = rgb(145, 142, 132);\n    vec3 c2 = rgb(171, 167, 162);\n    vec3 c3 = rgb(91, 91, 91);\n    vec3 c4 = rgb(28, 28, 30);\n    \n    col += c1 * hf.x;\n    col += c2 * hf.y;\n    col = mix(col, c3, hf.z);\n    \n    float cracks1 = abs(lf.y - lf.z);\n    cracks1 = smoothstep(0.05, 0.002, cracks1);\n    \n    float t = 0.04*0.9+(0.2*((cracks1-hf.y*0.3)+hf.z*0.6));\n    float g = max(0.0, 1.0 - ceil(min(lv.x+0.01, lv.y)-t));\n    g *= (pow(hf.z, 3.0) * (0.5 + (pow(lf.z, 3.)*0.5)));\n\n    \n    float cracks2 = abs(lf.x - lf.y);\n    cracks2 = smoothstep(0.05, 0.002, cracks2);\n    \n    \n    col = mix(col, c4, cracks2);\n    col = mix(col, c4, clamp(g*6., 0.0, 1.0));\n    \n    lv = lv * 2.0 - 1.0;\n    \n    col += max(0.0, 1.0-length(lv-(g+cracks2*2.)))*((hf.y+lf.y)/2.);\n    \n    col += pow(abs(cracks1 - cracks2), 8.0) * hf.z;\n    \n    return col;\n}\n\nvec3 grassTexture(vec2 uv) {\n    vec3 col = vec3(0.0);\n\n    vec3 vary = noise6(uv, 2.2928152, 0.5);\n\n\n    vec3 regions = noise6(uv, 0.39881, 8.0);\n    vec3 alt = noise6(uv, 1.0092813, 32.0);\n    vec3 alt2 = noise(uv, 0.9827156, 32.0);\n    vec3 alt3 = abs(cross(alt, alt2));\n    \n    float grassReg = regions.x;\n    float rockReg = regions.y;\n    \n    grassReg = pow(grassReg, 2.0);\n    rockReg = pow(rockReg, 2.0);\n    \n    rockReg *= max(0.0, 1.0 - (grassReg*0.7));\n    \n    rockReg = mix(rockReg, vary.y, 0.49);\n    \n    float isect = abs(grassReg - rockReg);\n    \n    isect = max(0.0, 0.3-smoothstep(0.09, 0.3, isect));\n    \n    \n    vec3 grass1 = rgb(100, 89, 36);\n    vec3 grass2 = rgb(95, 91, 31);\n    vec3 grass3 = rgb(105, 104, 47);\n    \n    vec3 grassCol = (grass1 * alt2.x) + (grass2 * alt2.y) + (grass3 * alt2.x);\n    \n    vec3 rock1 = rgb(140, 125, 103);\n    vec3 rock2 = rgb(176, 170, 176);\n    vec3 rock3 = rgb(113, 105, 100);\n    \n    vec3 rockCol = (rock1 * alt3.x) + (rock2 * alt.y) + (rock3 * alt3.z);\n    \n    col = mix(col, grassCol, grassReg);\n    col = mix(col, rockCol, rockReg);\n    \n    vec3 muddy = rgb(85, 67, 26);\n    \n    col = mix(col, muddy*muddy, 0.5*clamp((isect*3.)*((alt.x+alt2.y)/2.), 0.0, 1.0));\n    \n    \n    return clamp(col, 0.0, 1.0);\n}\n\n/////// Just for visualization\n\nvec3 renderTextures(in vec2 fc, in vec2 uv) {\n    vec3 col = vec3(0.0);\n    float tile = 2.0;\n    vec2 id = floor(uv*tile);\n    vec2 lv = fract(uv*tile);\n    \n    ;\n    vec3 cobble = cobbleTexture(uv);\n    vec3 brick = brickTexture(uv);\n    vec3 grass = grassTexture(uv);\n    \n    if (fc.y < R.y / 2.) {\n        if (fc.x < R.x/2.) {\n            col = plankTexture(uv*2.);\n        } else if (fc.x > R.x/2.) {\n            col = cobbleTexture(uv*2.);\n        }\n    } else {\n        if (fc.x < R.x/2.) {\n            col = brickTexture(uv*2.);\n        } else if (fc.x > R.x/2.) {\n            col = grassTexture(uv*2.);\n        }\n    }\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc/R.y;\n    \n    col = renderTextures(fc, uv);\n    \n    O = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}