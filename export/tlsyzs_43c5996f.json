{"ver":"0.1","info":{"id":"tlsyzs","date":"1592862527","viewed":369,"name":"bluenoise autocorrelation","username":"FabriceNeyret2","description":"autcorrelation in the horizontal (cyclical) lines of bluenoise texture.\nresult looks similar in R,G,B,A so I average. result also look similar columnwise.\nred: abs(autocorrel)","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["bluenoise","histogram","probability"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O, in vec2 U) {\n    float t = texelFetch(iChannel0,ivec2(270),0).w;   // number or computed lines\n    U /= max(1.,floor(iResolution.y/256.));           // pixel-friendly zoom\n\n    O-=O;\n    for (int y=0; y<256; y++)\n        O += texelFetch(iChannel0,ivec2(int(U.x)/8+90,y),0); \n    \n    O = .4 + O/256. / 2.;\n    t = (O.r+O.g+O.b+O.a)/4.;                        // average 4 channels\n\n    O-=O;\n    O.gb += step(U.y-80.,t);\n    O.r = step(U.y-80.,abs(t));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define T(x,y) (2.*texelFetch(iChannel1, dir ? ivec2(x,y)%1024 : ivec2(y,x)%1024 ,0) -1.)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( textureSize(iChannel1,1).x <2 ) {          // wait for texture load\n        if (U.y > 280.) O = vec4(int(U.x)<iFrame);  // waiting scroll \n        return;                           \n    }\n    ivec2 I = ivec2(U);\n    O = texelFetch(iChannel0,I,0);                  // previous state\n    if ( I==ivec2(270) ) O.w++;                     // frame counter\n    if (max(U.x,U.y) > 256.) return;                // only use 256x256 grid\n    float t = texelFetch(iChannel0,ivec2(270),0).w; // current treated line\n    if (t>=MAX) return;                             // scan finished.\n\n    bool dir = t<1024.;                             // if stats on lines then columns\n    for (int x=0; x<1024; x++)\n        O += T(x+128,I.y) * T(x+I.x,I.y);           //  correlation(t)   for each line\n     // O += abs(T(x+128,I.y) - T(x+I.x,I.y));      //  sum of abs(diff)\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"  #define MAX 1.   // stats only on lines\n//#define MAX 2.   // stats on lines + columns\n","name":"Common","description":"","type":"common"}]}