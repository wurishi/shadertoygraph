{"ver":"0.1","info":{"id":"X3jSD3","date":"1711142783","viewed":33,"name":"Windows 10 spining dots","username":"kurono","description":"Inspired by the microsoft windows 10 boot loader","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["pseudo3d","inspired","imitation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sample the texture from BufferA (iChannel0)\n    vec4 texColor = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    // output the sampled color\n    fragColor = texColor;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// iChannel0/BufferA\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // calculate normalized UV coordinates\n    vec2 res = iResolution.xy;\n    float aspect = res.x/res.y;\n    vec2 uv = fragCoord.xy / res;\n    vec2 mou = iMouse.xy / res;\n    float time = iTime;\n\n    const float vmin = 0.0;\n    const float vmax = 1.0;\n    const float vthreshold = 0.5;\n    const float pi = 3.14;\n    const vec3 baseColor = vec3(0.0, 0.47, 0.84); // 'windows blue'\n    const float rotSpeed = 0.1;\n    \n    vec3 color = vec3(0.0); \n    \n    const int steps = 10; // number of dots\n    const float dx = 0.01; // dot size\n    float dy = dx * aspect;\n    const float rx = 0.05; // circle radius\n    float ry = rx * aspect * sin(time);\n    float s = pi * (1.5 + 0.5 * abs(sin(0.02*time))); // 2*pi\n    \n    // loop over dots\n    for (int i = 0; i < steps; i++) {\n        float t = float(i+1) / float(steps);\n\n        // plot the gaussian\n        float x = uv.x;\n        float y = uv.y;\n        float x0 = rx * sin((t + rotSpeed * time * t) * s);\n        float y0 = ry * cos((t + rotSpeed * time * t) * s);\n        float ax = (x - mou.x - x0);\n        float ay = (y - mou.y - y0);\n        float val = 1.0/exp((ax*ax/(dx*dx) + ay*ay/(dy*dy)));\n        \n        // filter the gaussian value\n        val = mix(vmin, vmax, step(vthreshold, val));\n        \n        // accumulate the value into color\n        color += baseColor * val;\n    }\n    \n    // output color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}