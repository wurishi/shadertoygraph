{"ver":"0.1","info":{"id":"3d2GDW","date":"1548887991","viewed":1495,"name":"4D Simplex Noise Gradients","username":"Markyparky56","description":"Representing 4D gradients through colour is tricky, since the fourth component is stuck in the alpha channel. Hence, red is X, green in Y, blue is Z, and W may or may not be black.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex","analytical","gradients"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Check other page for Noise function\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/min(iResolution.x, iResolution.y);\n\tuv *= 10.0;\n    \n    vec4 grad;\n    \n//    vec3 col = (vec3(snoise(vec4(uv.x*iTime*0.75, uv.y*iTime*0.75, uv.x*iTime*0.75, uv.y*iTime*0.75), grad)) * 0.5) + 0.5;\n//    vec3 col = (vec3(snoise(vec4((uv.xyxy*10.0)*iTime*0.75), grad)) * 0.5) + 0.5;\n//    vec3 col = (vec3(snoise(vec4((uv.xyxy*0.05)*iTime*0.75), grad)) * 0.5) + 0.5;\n//    vec3 col = (vec3(snoise(vec4((uv.xyxy * vec4(iTime*0.001)))*iTime, grad)) * 0.5) + 0.5;\n    //float col = (snoise(vec4(iTime*0.5, uv.x + iTime*0.01, iTime*0.5, uv.y - iTime*0.05), grad) * 0.5) + 0.5;\n    //float col = (snoise(vec4(uv.x + iTime*0.01, iTime*0.5, uv.y - iTime*0.05, iTime*0.5), grad) * 0.5) + 0.5;\n    //float col = (snoise(vec4(vec2(uv), vec2(iTime*0.5, sin(iTime*0.2))), grad) * 0.5) + 0.5;\n    float col = (snoise(vec4(uv, vec2(0.0,iTime*.2)), grad) * 0.5) + 0.5;\n\n   \n\t// correct for negative gradients for diplay output, don't do this in real life\n\tgrad = (grad * vec4(0.5)) + vec4(0.5);\n    \n    // Output to screen\n    //fragColor = vec4(grad.xy*vec2(col), grad.z, 1.0);\n    //fragColor = vec4(vec3(col), 1.0);\n    //fragColor = vec4(grad.xyz, 1.0);\n    fragColor = grad;\n    \n    //fragColor = vec4(vec3(grad.x), 1.0);\n    //fragColor = vec4(vec3(grad.y), 1.0);\n    //fragColor = vec4(vec3(grad.z), 1.0);\n    //fragColor = vec4(vec3(grad.w), 1.0);\n    \n    //if(col > 1.0 || col < -1.0) fragColor = vec4(1.0, 0.0, 1.0, 1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n// Gradient Calculation extended from noise3Dgrad.glsl by Mark A. Ropper (@Markyparky56)\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\t\t\t\t\t\t\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v, out vec4 gradient)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x; \n  p1 *= norm.y; \n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.5 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  vec3  m02 = m0 * m0;\n  vec2 m12 = m1 * m1; \n  vec3 m04 = m02 * m02;\n  vec2 m14 = m12 * m12; \n  vec3 pdotx0 = vec3(dot(p0,x0), dot(p1,x1), dot(p2,x2));\n  vec2 pdotx1 = vec2(dot(p3,x3), dot(p4,x4));\n\n  // Determine noise gradient;\n  vec3 temp0 = m02 * m0 * pdotx0;\n  vec2 temp1 = m12 * m1 * pdotx1;\n  gradient = -8.0 * (temp0.x * x0 + temp0.y * x1 + temp0.z * x2 + temp1.x * x3 + temp1.y * x4);\n  gradient += m04.x * p0 + m04  .y * p1 + m04.z * p2 + m14.x * p3 + m14.y * p4;\n  gradient *= 109.319;\n \n  return 109.319 * (  dot(m02*m02, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                + dot(m12*m12, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n \n  }\n","name":"Common","description":"","type":"common"}]}