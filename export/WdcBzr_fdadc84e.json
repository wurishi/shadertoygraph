{"ver":"0.1","info":{"id":"WdcBzr","date":"1604150297","viewed":273,"name":"Another bad floating point hash","username":"public_int_i","description":"Attempt at making a hash using only floating points which keeps quality at different scales. Quality begins to break down when sampled in steps smaller then 6e-6 or larger then 2e7.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["hash","scale","point","floating","large"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*returns psuedo random value from 0 to 1\nbased on seed value x\nx must be positive*/\nfloat hash(float x) {\n    float r = max(fract(x*1e-6),fract(x*1e3));\n    for (float i = r; i < 2.; i += .217) {//change i step size for quality/performance ratio\n     \tr += fract((x+i)*fract(r+i));\n    }\n    return fract(r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat scale = 1.;\n    fragColor = vec4(hash((fragCoord.x+fragCoord.y*iResolution.x)*scale));\n}","name":"Image","description":"","type":"image"}]}