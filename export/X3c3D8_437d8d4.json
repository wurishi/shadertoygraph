{"ver":"0.1","info":{"id":"X3c3D8","date":"1716389502","viewed":96,"name":"1D golden ratio blue noise","username":"Razakhel","description":"Inspired from Alan Wolfe's SEED presentation: https://www.youtube.com/watch?v=tethAU66xaA","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["sampling","bluenoise","goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Blue noise sampling from https://www.youtube.com/watch?v=tethAU66xaA\n// See buffer B for the actual algorithm\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv   = fragCoord / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This buffer only serves as state storage\n// A single pixel is used to store the current seed\n// State storage example taken from https://www.shadertoy.com/view/MddGzf\n\nconst float GoldenRatio = 1.6180339887498948482;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Ignoring everything outside the very first fragment\n    if (fragCoord.x > 1.0 || fragCoord.y > 1.0)\n        discard;\n        \n    if (iFrame == 0) {\n        fragColor = vec4(vec3(0.0), 1.0);\n        return;\n    }\n        \n    float seed = texelFetch(iChannel0, ivec2(0, 0), 0).r;\n    seed       = fract(seed + GoldenRatio);\n    // In 2D, adding vec2(GoldenRatio * 5.123, GoldenRatio * 10.456) seems to give\n    //  relatively coherent results, although really not that good\n\n    fragColor = vec4(seed, 0.0, 0.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float seed       = texelFetch(iChannel0, ivec2(0, 0), 0).r;\n    float scaledSeed = seed * iResolution.x;\n\n    if (floor(scaledSeed) == floor(fragCoord.x))\n        fragColor = vec4(vec3(1.0), 1.0);\n    else\n        fragColor = vec4(texelFetch(iChannel1, ivec2(fragCoord), 0).rgb, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}