{"ver":"0.1","info":{"id":"lcdyz4","date":"1730351362","viewed":65,"name":"barrier condition","username":"vivavolt","description":"fork of https://www.shadertoy.com/view/McXcDs","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["pulse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of https://www.shadertoy.com/view/McXcDs\n\n#define TIME (iTime / 3.0)\n#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n#define H(h) (cos(h/2.+vec3(1,2,3))*.8 + vec3(0,0,-.1)+.1)\n#define R iResolution\n\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n    \n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n    \n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n}\n\n\nfloat fbm(vec2 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    \n    for(int i = 0; i < 6; i++) { \n        sum += amp * noise(p * freq);\n        amp *= 0.5;\n        freq *= 2.0;\n        p = vec2(p.y - p.x, p.x + p.y) * .7;\n    }\n    return sum;\n}\n\nfloat pulse(float time, float frequency, float sharpness) {\n    float phase = time * frequency * 6.28318530718; // 2*PI\n    float wave = sin(phase);\n    return pow(0.5 * (wave + 1.0), sharpness);\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    vec2 uv = U/R.xy;\n    \n    float t = TIME * 0.5;\n    vec2 distort = vec2(\n        fbm(uv * 1.0 * pulse(t, .2, 100.0) + t * 0.2),\n        fbm(uv * 1.0 * pulse(t, .3, 100.0) - t * 0.3)\n    ) * 0.2;\n   \n    vec2 distortedUV = uv + distort - vec2(1.5, 2.);\n    \n    vec3 bgColor = vec3(0.15, 0.17, 0.25);\n    vec3 midColor = vec3(0.35, 0.32, 0.45);\n    vec3 highlightColor = vec3(0.55, 0.5, 0.6);\n    vec3 accentColor = vec3(0.6, 0.4, 0.5);\n    \n    vec3 c = vec3(0);\n    vec4 rd = normalize(vec4((U + distort * R.xy)-.5*R.xy, R.y, 0.));\n    \n    float totdist = 0.;\n    float tt = TIME;\n    \n    for (float i=0.; i<32.; i++) { \n        vec4 p = vec4(rd*totdist);\n        \n        p.z -= 4. + sin(tt * 0.2) * 0.5; // Simplified motion\n        p.xz *= rot(1.6*(1.+.3*sin(tt * 0.3)));\n        p.xy *= rot(-.15 * (1.+.3*cos(tt * 0.25)));\n        p.yz *= rot(tt/4.);\n        \n        vec4 w = vec4(0), dz, z;\n        \n        for (float j=0.; j<6.; j++) { \n            z = vec4(\n                exp(w.x)*(cos(w.y)*cos(w.z)*cos(w.w) - sin(w.y)*sin(w.z)*sin(w.w)),\n                exp(w.x)*(sin(w.y)*cos(w.z)*cos(w.w) + cos(w.y)*sin(w.z)*sin(w.w)),\n                exp(w.x)*(cos(w.y)*sin(w.z)*cos(w.w) - sin(w.y)*cos(w.z)*sin(w.w)),\n                exp(w.x)*(sin(w.y)*sin(w.z)*cos(w.w) + cos(w.y)*cos(w.z)*sin(w.w))\n            );\n            \n            dz = vec4(z.x*dz.x-z.y*dz.y-z.z*dz.z-z.w*dz.w,\n                     z.x*dz.y+z.y*dz.x+z.z*dz.w-z.w*dz.z,\n                     z.x*dz.z-z.y*dz.w+z.z*dz.x+z.w*dz.y,\n                     z.x*dz.w+z.y*dz.z-z.z*dz.y+z.w*dz.x);\n            \n            dz.y += abs(5.*pulse(t, 5., 3.0));\n            //dz.x += abs(5.*pulse(t, 5.1, 3.0));\n            //dz.z += abs(5.*pulse(t, 5.3, 3.0));\n            w = exp(-z*z)*(1.0 + 0.1*sin(tt * 0.3)) + p; // Simplified noise\n        }\n        \n        float ddz = clamp(dot(dz,dz), 1e-3, 1e6);\n        float ddw = clamp(dot(w,w), 0.01, 1e4);\n        \n        float dist = sqrt(sqrt(ddw/ddz));\n        float stepsize = dist/2.;\n        totdist += stepsize;\n        \n        vec3 baseColor = H(log(ddz));\n        float fade = exp(-i*i*dist*dist);\n        vec3 mixedColor = mix(mix(bgColor, midColor, baseColor.x),\n                            mix(highlightColor, accentColor, baseColor.y),\n                            baseColor.z);\n        c += 0.4 * mixedColor * fade;\n    }\n    \n    float scanline = sin(distortedUV.y * R.y * 0.5) * 0.015;\n    c += scanline * mix(bgColor, highlightColor, length(c));\n    \n    float interference = sin(distortedUV.y * 100.0 + t * 5.0) * 0.015;\n    c += interference * (rand(vec2(t)) * 0.5 + 0.5) * (1.0 - length(c));\n    \n    float vignette = length(uv - 0.5);\n    c *= 1.0 - vignette * 0.5;\n    float depthDarkness = smoothstep(0.2, 0.8, uv.y);\n    c *= mix(0.8, 1.0, depthDarkness);\n    \n    c = pow(c, vec3(0.95));\n    c = 1. - exp(-c*c);\n    \n    \n    O = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}