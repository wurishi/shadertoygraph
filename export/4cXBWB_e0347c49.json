{"ver":"0.1","info":{"id":"4cXBWB","date":"1724262829","viewed":16,"name":"distorion booff","username":"tomato","description":"doistortion\nhttps://www.youtube.com/watch?v=ZcRptHYY3zM&t=587s\nnot a fan of my implementation of chromatic aberration","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPEED 0.2\n#define CENTER vec2(0.4);\n#define MAX_RADIUS 1.\n#define DISTORTION_RADIUS 0.2\n#define INTRO_END 0.1\n#define OUTRO_START 0.5\n#define EASE 1.5\n#define CHROMATIC_ABERRATION 0\n#define CHROMATIC_ABERRATION_DIFF 0.2\n\nvec2 normalize_coord(vec2 pos) { return (pos/iResolution.xy*2.-1.)*vec2(iResolution.x/iResolution.y,1.)*.5+.5; }\n\nvec2 get_offset(float t, vec2 pos, vec2 uv) {\n    //float r = MAX_RADIUS*t-DISTORTION_RADIUS;\n    float r = MAX_RADIUS * t;\n    float d = length(pos-uv)-r; // d is the magnitude of distortion\n    vec2 dir = normalize(pos-uv);\n    float distortion_mask = 1.-smoothstep(0., DISTORTION_RADIUS, abs(d));\n    float smooth_intro_mask = smoothstep(0., INTRO_END, t);\n    float smooth_outro_mask = 1.-smoothstep(OUTRO_START, 1., t);\n    return dir*d*distortion_mask*smooth_intro_mask*smooth_outro_mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = normalize_coord(fragCoord);\n    vec2 pos = CENTER;\n    if (iMouse.x != 0. || iMouse.y != 0.) pos = normalize_coord(iMouse.xy);    \n    \n    float t = pow(fract(iTime*SPEED), 1./EASE); // t is the progress through the animation\n\n#if CHROMATIC_ABERRATION == 0\n    vec2 offset = get_offset(t, pos, uv);\n    vec3 col = texture(iChannel0, uv+offset).rgb;\n#else\n    vec3 col = vec3(texture(iChannel0, uv + get_offset(t-CHROMATIC_ABERRATION_DIFF, pos, uv)).r,\n                    texture(iChannel0, uv + get_offset(t, pos, uv)).g,\n                    texture(iChannel0, uv + get_offset(t+CHROMATIC_ABERRATION_DIFF, pos, uv)).b);\n#endif\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}