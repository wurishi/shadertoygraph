{"ver":"0.1","info":{"id":"NdlBR4","date":"1644585408","viewed":92,"name":"Color mixed bubble","username":"memeplex","description":"A basic test for color mixing between 2d sdfs","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat sdCircle( vec2 p, float r )\n{\n    float  l= length(p);\n    return l - r;\n}\n\n// polynomial smooth min\nfloat sminCubic( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nvec2 wobble(in float phase, in float amplitude, in float speed)\n{\n    float t = (iTime+phase)*speed;\n    return vec2(sin(t), cos(t))*amplitude;\n}\n\nfloat colorWeight(in float merged, in float d, in float k)\n{\n    return exp(k*(merged-d));\n}\n\n//used to calc the main sdf for the bubble\n//reused with a phaseOffset for the outline\nfloat bubble(in vec2 p, in float phaseOffset, out float d1, out float d2, out float d3)\n{\n\tvec2 offset1 = vec2(0.4, 0.1)+wobble(0.0+phaseOffset, 0.1, 5.0);\n    vec2 offset2 = vec2(-0.1, 0.1)+wobble(0.1+phaseOffset, 0.4, 2.0);\n    vec2 offset3 = vec2(-0.1, -0.1)+wobble(0.3+phaseOffset, 0.2, 2.5);\n    \n    d1 = sdCircle(p+offset1, 0.4);\n    d2 = sdCircle(p+offset2, 0.35);\n    d3 = sdCircle(p+offset3 ,0.5);\n    \n    float k = 0.7;\n    float d = sminCubic(d1, sminCubic(d2, d3, k), k);\n    return d;\n}\n\nvec2 calcBubbleNormal( in vec2 p )\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    float d1, d2, d3;\n    return normalize( vec2(bubble(p+h.xy, 0.0, d1, d2, d3)-bubble(p-h.xy, 0.0, d1, d2, d3),\n                           bubble(p+h.yx, 0.0, d1, d2, d3)-bubble(p-h.yx, 0.0, d1, d2, d3)));\n}\n\n//bilinear intepolation between 4 colors based on 2d normal vec\nvec3 biLerp(vec3 c00, vec3 c01, vec3 c10, vec3 c11, vec2 normal)\n{\n    float x = 0.5+0.5*normal.x;\n    return mix(mix(c00, c10, x), mix(c01, c11, x), 0.5+0.5*normal.y);\n}\n\nfloat outline(in vec2 p)\n{\n    float d1, d2, d3;\n    float outlineOffset = 0.15;\n    //stumbled on this by accident, adding this offset to the width based on this sine wave makes it look like\n    //a scanline artifact\n    float outlineWidth = 0.05+sin((p.x*0.2+p.y)*120.0)*0.0075;\n    return abs(bubble(p, -0.1, d1, d2, d3)-outlineOffset) - outlineWidth;\n}\n\nvec2 calcOutlineNormal( in vec2 p )\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec2(outline(p+h.xy)-outline(p-h.xy),\n                           outline(p+h.yx)-outline(p-h.yx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float colorFactor=1.0;\n    vec3 col1 = vec3(1.0, 0.0, 0.0)*colorFactor;\n    vec3 col2 = vec3(0.0, 1.0, 0.0)*colorFactor;\n    vec3 col3 = vec3(0.0, 0.0, 1.0)*colorFactor;\n    \n    float d1, d2, d3;\n    float d = bubble(p, 0.0, d1, d2, d3);\n   \n    float kc = -1.0;\n    float w1 = colorWeight(d, d1, kc);\n    float w2 = colorWeight(d, d2, kc);\n    float w3 = colorWeight(d, d3, kc);\n    vec3 innerCol = (col1*w1 + col2*w2 + col3*w3)/(w1 + w2 + w3);\n    \n    vec2 smoothNormal = calcBubbleNormal(p);\n    \n    vec3 nCol00 = vec3(0.0, 0.6, 1.0);\n    vec3 nCol01 = vec3(1.0, 0.5, 1.0);\n    vec3 nCol10 = vec3(0.0, 1.0, 0.5);\n    vec3 nCol11 = vec3(1.0, 1.0, 0.0);\n    vec3 normalCol = biLerp(nCol00, nCol01, nCol10, nCol11, -smoothNormal);\n    //vec3 normalCol = vec3(smoothNormal.xy, 0.0);\n    \n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.0, 0.0, 0.0) : mix(innerCol, normalCol, exp(14.0*d));\n    col *= 1.0 - exp(120.0*d);\n\t//col *= 0.8 + 0.2*cos(150.0*d);\n    \n    //outline\n\t//col = mix( col, vec3(0.6, 1.0, 0.0), 1.0-smoothstep(0.0,0.1,abs(bubble(p, -0.29,d1,d2,d3)-0.5)) );\n    d = outline(p);\n    vec2 outlineNormal = calcOutlineNormal(p);\n    vec3 outlineColor = mix(vec3(1.0), biLerp(nCol00, nCol01, nCol10, nCol11, outlineNormal), exp(40.0*d));\n    col += (d > 0.0) ? vec3 (0.0) : outlineColor*(1.0 - exp(120.0*d));\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}