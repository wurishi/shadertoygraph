{"ver":"0.1","info":{"id":"cltfW2","date":"1701623819","viewed":119,"name":"orthogonal circles flower","username":"jt","description":"An abstract flower-like shape consisting of circular arcs perpendiculat to the unit-circle and originating at (-1,0).\nPossibly related to [url=https://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model]conformal disk model[/url]?\n\n","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["flower","circle","conformal","disk","orthogonal","equidistant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cltfW2 orthogonal circles flower, 2023 jt\n\n// An abstract flower-like shape consisting of circular arcs\n// perpendiculat to the unit-circle and originating at (-1,0).\n// The distribution of leaf endpoints on the circle is equidistant.\n\n// Possibly related to https://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model conformal disk model?\n\n// \"Shows a set of parallel lines in the hyperbolic plane.\" (mla)\n\n// tags: flower, circle, conformal, disk, orthogonal, equidistant\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\n//#define draw(q) O *= smoothstep(0.0, 0.01, abs(q))\n#define draw(q) O *= smoothstep(0.0, max(0.01, 3./iResolution.y), abs(q)) // antialiasing thanks to Fabrice (as usual) :-)\n\n// The leafs of the flower-shape are\n// circle-arcs inside the unit-circle\n// originating at (0,-1).\n// Each circle-arc is tangential to the y axis.\n// wxmaxima:\n// circle:(x-x_0)^2+(y-y_0)^2=r^2; /* the leafs of the flower are circles */\n// origin:(0-x_0)^2+(-1-y_0)^2=r^2; /* the origin is at (0,-1) */\n// tangent:x_0=r; /* circles are tangent to y axis (orthogonal to unit circle) */\n// solve([circle, origin, tangent],[x_0,y_0,r]);\n// [[x_0=(y^2+2*y+x^2+1)/(2*x),y_0=-1,r=(y^2+2*y+x^2+1)/(2*x)]]\nvec3 orthogonal_circles_flower_leaf(float phi) // https://www.shadertoy.com/view/cltfW2 orthogonal circles flower (jt)\n{\n    float x =  sin(phi);\n    float y = -cos(phi);\n    float r = (y*y+2.0*y+x*x+1.0)/(2.0*x);\n    return vec3(r,-1,r); // center and radius\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    vec2 m = (2.*iMouse.xy-R)/R.y;\n\n    //O = vec4(1);\n\n    //if(length(I) < 1.0) // constrain to unit disc\n    {\n        int n = int(mix(3.0, 11.0, 0.5+0.5*cos(2.0*pi*iTime/10.0))); // animate number of leafs\n        \n        if(true) // loopless implementation\n        {\n            if(true) // EXACT solution thanks to https://www.shadertoy.com/view/clcfDl orthogonal circles flower golfed by athibaul\n            {\n                vec2 J = I + vec2(0,1);\n                float a = float(2*n+1)*atan(0.5*dot(J,J)/I.x) / pi;\n                a = 2.*ceil(abs(a))/float(2*n+2);\n                O = vec4(a);\n            }\n            else // my original APPROXIMATE attempt\n            {\n                vec2 p = vec2(-abs(I.x),I.y);\n                float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x);\n                vec3 c = vec3(r,-1,r);\n                float l = length(p-c.xy)-c.z;\n                l = atan(l/2.0)/atan(float(n)*1.5); // found by trial and error - inexact!\n                //l = floor(abs(l)*float(n))/float(n);\n                l = ceil(abs(l)*float(n))/float(n+1); // start with dark grey instead of black\n                O = vec4(l);\n            }\n        }\n\n        if(true) // loopy implementation (might be useful when ray-tracing instead of ray-marching)\n        {\n            for(int i = 1; i <= n; i++) // apparently starting with i = 1 solves black screen (reported by Fabrice)\n            {\n                float phi = 2.0*pi*float(i)/float(2*n+1); // fill half circle with equidistant angles\n                vec3 circ = orthogonal_circles_flower_leaf(phi); // center & redius\n                I.x = abs(I.x); // horizontal symmetry\n                draw(length(I-circ.xy)-circ.z); // draw circle\n            }\n        }\n    }\n    \n    O.xyz *= 1.0-smoothstep(0.0, max(0.01, 3./iResolution.y), length(I)-1.0); // black background\n}\n","name":"Image","description":"","type":"image"}]}