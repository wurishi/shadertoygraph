{"ver":"0.1","info":{"id":"mtlyR8","date":"1690416199","viewed":69,"name":"#006","username":"jvincent","description":"A field of rotating squares whose color changes with time and is offset by distance from the center of each square and from the origin","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rainbow","rotating","squares","breathing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n\n#define color(offset) (sin(offset + vec3(2.0, 4.0, 6.0)*pi/6.0))\n\n#define rotate(speed, offset) mat2(cos(speed*iTime-offset), sin(speed*iTime-offset), -sin(speed*iTime-offset), cos(speed*iTime-offset))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    mat2 r45 = mat2(cos(pi/4.0), sin(pi/4.0), -sin(pi/4.0), cos(pi/4.0));\n    vec2 gv = vec2(abs(fract(abs(uv * 5.0 * rotate(0.1, 0.0)))-0.5));\n    \n    float colorOffset = max(gv.x, gv.y)*2.0*pi-3.0*iTime + length(10.0*uv);\n    \n    col += color(colorOffset);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}