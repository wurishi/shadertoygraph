{"ver":"0.1","info":{"id":"wls3Ws","date":"1558363324","viewed":160,"name":"Patience","username":"Yusef28","description":"Music: Queen of the Damned - The perfect violin solo\n","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["2d","checkerboard","pattern","checkers","checkers","chess","chessboard","chessboard","chessboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"llsGzS","filepath":"https://soundcloud.com/eshwar-1/queen-of-the-damned-the-perfect-violin-solo-eshwar-ravishankar","previewfilepath":"https://soundcloud.com/eshwar-1/queen-of-the-damned-the-perfect-violin-solo-eshwar-ravishankar","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\n//basic rotation matrix\nmat2 rot (float a)\n{\n \n    mat2 m = mat2(cos(a), -sin(a), sin(a), cos(a) );\n    return m;\n}\n\n//creaes the golden frame, well just it's shape \nfloat stripes(vec2 p, float s, float e)\n{\n    p = fract(p*s);   \n    return min(smoothstep(0.95, 0.97, p.x)+smoothstep(0.95, 0.97, p.y),1.0);\n\t//return smoothstep(0.92, 0.95, p.x)-step(0.95,p.x)/5.;\n}\n\nfloat chess (vec2 p, float s)\n{\n    vec2 c = floor(p*s);\n    return mod(c.x +c.y, 2.0);    \n}\n\n\n// need to try putting a vignett on tiles so they have depth\n\n//Things to try another time\n/*\nTransition from one time on the left to another tile or just a plain texture on the right\nfleur de lis\nPatterns within patterns, like a chess board but every black square is instead a smaller 3x3 chessboard\nMultiple patterns in one scene like a border pattern + an inner pattern and an outer pattern\n\n*/\n\nvec3 muster(vec2 uv){\n vec2 st = uv; ;//for vig later\n        \n    uv = uv*2.0-1.0;//important mainly for rotations!\n    uv.x*=iResolution.x/iResolution.y;\n    uv+=iTime/4.;\n\n    vec2 sv =rot(PI*floor(uv.x))*uv;\n    \n    //adding teh bumpy pebble texture for the red squares\n    vec3 col = vec3(pow(texture(iChannel2, sv*0.25).x, 6.))*1.2;\n\t\t\t\t\t\t\t\t\t\t\t //-sin(iTime/1.)/50. //add this to uv/2. of ichannel0 for movement\n    \n    //adding the moldy wood? texture for the black squares\n    col = mix(col, vec3(1.0, 0.0, .0)*texture(iChannel0,sv/2.).x, vec3(chess(uv, 2.0))  );\n    \n    //adding the frame, this one required a lot of hacking\n    \n    col = mix(col, vec3(texture(iChannel1, uv*0.01+0.75)/1.2+0.1)\n              //the sin portion is for the light movement\n              +(sin(uv.x*3.+iTime*3.)/4.+0.25),  \n              //this calles the stripes function\n              vec3(stripes(uv, 2., 1.)) )\n        //this last part creates the bent metal look. Otherwise it's just flat\n        //this had to be added after the strip function because if I tried\n        //to do it in that function it affected the tranparency, I only wanted\n        //to change the brightness so I added this to the color at the end.\n        //because I was working in fract space for the stripes function I had\n        //to recreate that coordinate system again here that's where there is fract(2.*uv..)\n        //probabl easier ways to do this and I'll probably realize it later.\n        \n        //Oh, and hi future self, your welcome!\n        -step(0.98, fract(2.*uv.x))/3.-step(0.98, fract(2.*uv.y))/3.;\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    \n    \n    //This is for vignetting\n     //vec2st *=  1.0 - st.yx;\n    //float vig = st.x*st.y*15.;\n   // vig = pow(vig, 0.09);\n    \n    \n    fragColor = vec4(muster(uv),1.0);\n}","name":"Image","description":"","type":"image"}]}