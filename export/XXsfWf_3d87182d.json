{"ver":"0.1","info":{"id":"XXsfWf","date":"1729007444","viewed":86,"name":"Cirrucumulus Clouds","username":"Ponjee","description":"cirrocumulus Clouds from inverted fractal cellular noise.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","cloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481;\n\nfloat smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat oper( float d1, float d2, float k )\n{\n    return min(d1,d2);\n}\n\nfloat get_cellular_2d(vec2 p, float s) {\n    vec4 curr_col = texelFetch(iChannel0, ivec2(round(p)), 0);\n    \n    // a4 b4 c4 d4 e4     . . . . .\n    // a3 b3 c3 d3 e3     . . . . .\n    // a2 b2 c2 d2 e2     . . p . .\n    // a1 b1 c1 d1 e1     . . . . .\n    // a0 b0 c0 d0 e0     . . . . .\n    \n    vec2 a4 = p + vec2(-2.0, 2.0); vec2 b4 = p + vec2(-1.0, 2.0); vec2 c4 = p + vec2( 0.0, 2.0); vec2 d4 = p + vec2( 1.0, 2.0); vec2 e4 = p + vec2( 2.0, 2.0);\n    vec2 a3 = p + vec2(-2.0, 1.0); vec2 b3 = p + vec2(-1.0, 1.0); vec2 c3 = p + vec2( 0.0, 1.0); vec2 d3 = p + vec2( 1.0, 1.0); vec2 e3 = p + vec2( 2.0, 1.0);\n    vec2 a2 = p + vec2(-2.0, 0.0); vec2 b2 = p + vec2(-1.0, 0.0); vec2 c2 = p + vec2( 0.0, 0.0); vec2 d2 = p + vec2( 1.0, 0.0); vec2 e2 = p + vec2( 2.0, 0.0);\n    vec2 a1 = p + vec2(-2.0,-1.0); vec2 b1 = p + vec2(-1.0,-1.0); vec2 c1 = p + vec2( 0.0,-1.0); vec2 d1 = p + vec2( 1.0,-1.0); vec2 e1 = p + vec2( 2.0,-1.0);\n    vec2 a0 = p + vec2(-2.0,-2.0); vec2 b0 = p + vec2(-1.0,-2.0); vec2 c0 = p + vec2( 0.0,-2.0); vec2 d0 = p + vec2( 1.0,-2.0); vec2 e0 = p + vec2( 2.0,-2.0);\n    \n    vec4 cc_a4 = texelFetch(iChannel0, ivec2(a4), 0); vec4 cc_b4 = texelFetch(iChannel0, ivec2(b4), 0); vec4 cc_c4 = texelFetch(iChannel0, ivec2(c4), 0); vec4 cc_d4 = texelFetch(iChannel0, ivec2(d4), 0); vec4 cc_e4 = texelFetch(iChannel0, ivec2(e4), 0);\n    vec4 cc_a3 = texelFetch(iChannel0, ivec2(a3), 0); vec4 cc_b3 = texelFetch(iChannel0, ivec2(b3), 0); vec4 cc_c3 = texelFetch(iChannel0, ivec2(c3), 0); vec4 cc_d3 = texelFetch(iChannel0, ivec2(d3), 0); vec4 cc_e3 = texelFetch(iChannel0, ivec2(e3), 0);\n    vec4 cc_a2 = texelFetch(iChannel0, ivec2(a2), 0); vec4 cc_b2 = texelFetch(iChannel0, ivec2(b2), 0); vec4 cc_c2 = texelFetch(iChannel0, ivec2(c2), 0); vec4 cc_d2 = texelFetch(iChannel0, ivec2(d2), 0); vec4 cc_e2 = texelFetch(iChannel0, ivec2(e2), 0);\n    vec4 cc_a1 = texelFetch(iChannel0, ivec2(a1), 0); vec4 cc_b1 = texelFetch(iChannel0, ivec2(b1), 0); vec4 cc_c1 = texelFetch(iChannel0, ivec2(c1), 0); vec4 cc_d1 = texelFetch(iChannel0, ivec2(d1), 0); vec4 cc_e1 = texelFetch(iChannel0, ivec2(e1), 0);\n    vec4 cc_a0 = texelFetch(iChannel0, ivec2(a0), 0); vec4 cc_b0 = texelFetch(iChannel0, ivec2(b0), 0); vec4 cc_c0 = texelFetch(iChannel0, ivec2(c0), 0); vec4 cc_d0 = texelFetch(iChannel0, ivec2(d0), 0); vec4 cc_e0 = texelFetch(iChannel0, ivec2(e0), 0);\n    \n    vec2 p_a4 = floor(a4) + cc_a4.rg; vec2 p_b4 = floor(b4) + cc_b4.rg; vec2 p_c4 = floor(c4) + cc_c4.rg;  vec2 p_d4 = floor(d4) + cc_d4.rg;  vec2 p_e4 = floor(e4) + cc_e4.rg; \n    vec2 p_a3 = floor(a3) + cc_a3.rg; vec2 p_b3 = floor(b3) + cc_b3.rg; vec2 p_c3 = floor(c3) + cc_c3.rg;  vec2 p_d3 = floor(d3) + cc_d3.rg;  vec2 p_e3 = floor(e3) + cc_e3.rg; \n    vec2 p_a2 = floor(a2) + cc_a2.rg; vec2 p_b2 = floor(b2) + cc_b2.rg; vec2 p_c2 = floor(c2) + cc_c2.rg;  vec2 p_d2 = floor(d2) + cc_d2.rg;  vec2 p_e2 = floor(e2) + cc_e2.rg; \n    vec2 p_a1 = floor(a1) + cc_a1.rg; vec2 p_b1 = floor(b1) + cc_b1.rg; vec2 p_c1 = floor(c1) + cc_c1.rg;  vec2 p_d1 = floor(d1) + cc_d1.rg;  vec2 p_e1 = floor(e1) + cc_e1.rg; \n    vec2 p_a0 = floor(a0) + cc_a0.rg; vec2 p_b0 = floor(b0) + cc_b0.rg; vec2 p_c0 = floor(c0) + cc_c0.rg;  vec2 p_d0 = floor(d0) + cc_d0.rg;  vec2 p_e0 = floor(e0) + cc_e0.rg; \n    \n    float d_a4 = length(p - p_a4); float d_b4 = length(p - p_b4); float d_c4 = length(p - p_c4); float d_d4 = length(p - p_d4); float d_e4 = length(p - p_e4);\n    float d_a3 = length(p - p_a3); float d_b3 = length(p - p_b3); float d_c3 = length(p - p_c3); float d_d3 = length(p - p_d3); float d_e3 = length(p - p_e3);\n    float d_a2 = length(p - p_a2); float d_b2 = length(p - p_b2); float d_c2 = length(p - p_c2); float d_d2 = length(p - p_d2); float d_e2 = length(p - p_e2);\n    float d_a1 = length(p - p_a1); float d_b1 = length(p - p_b1); float d_c1 = length(p - p_c1); float d_d1 = length(p - p_d1); float d_e1 = length(p - p_e1);\n    float d_a0 = length(p - p_a0); float d_b0 = length(p - p_b0); float d_c0 = length(p - p_c0); float d_d0 = length(p - p_d0); float d_e0 = length(p - p_e0);\n    \n    float d = \n    oper(\n        oper(d_a0,oper(d_a1,oper(d_a2,oper(d_a3,d_a4,s),s),s),s),\n        oper(\n            oper(d_b0,oper(d_b1,oper(d_b2,oper(d_b3,d_b4,s),s),s),s),\n            oper(\n                oper(d_c0,oper(d_c1,oper(d_c2,oper(d_c3,d_c4,s),s),s),s),\n                oper(\n                    oper(d_d0,oper(d_d1,oper(d_d2,oper(d_d3,d_d4,s),s),s),s),\n                    oper(d_e0,oper(d_e1,oper(d_e2,oper(d_e3,d_e4,s),s),s),s),\n                    s\n                ),\n                s\n            ),\n            s\n        ),\n        s\n    );\n    \n    return d;//cos(d*PI)*0.5+0.5;//1.0 + cos(60.0*d-iTime*3.0);\n}\n\nfloat fbm( in vec2 x, in float H, in int numOctaves)\n{    \n    float t = 0.0;\n    float A = 0.0;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        A += a;\n        t += a*get_cellular_2d(f*x, 0.0);\n    }\n    return t/A;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    \n    vec2 p = (fragCoord/iResolution.xy)*2.0-1.0;\n    p /= pow(p.y + 1.75,2.0);\n    p /= 0.02;\n    p += 100.0;\n    \n    float a = 0.1;\n    \n    float d = fbm(p, 1.0, 5);\n    d = 1.0-pow(d,2.0);\n    \n    vec4 darkskyblue = vec4(3.0/255.0, 49.0/255.0, 134.0/255.0, 1.0);\n    vec4 middskyblue = vec4(86.0/255.0, 160.0/255.0, 221.0/255.0, 1.0);\n    vec4 lightskyblue= vec4(151.0/255.0, 192.0/255.0, 218.0/255.0, 1.0);\n    vec4 cloudwhite  = vec4(1.0);\n    \n    fragColor = vec4(mix(mix(lightskyblue,mix(middskyblue,darkskyblue,clamp(uv.y*2.0-1.0,0.0,1.0)),clamp(uv.y*2.0,0.0,1.0)), cloudwhite, d));\n}","name":"Image","description":"","type":"image"}]}