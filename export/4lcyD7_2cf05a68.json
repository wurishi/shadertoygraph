{"ver":"0.1","info":{"id":"4lcyD7","date":"1533229593","viewed":265,"name":"Small Solar System","username":"TylerWalters","description":"Continued learning at home!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["solarsystemorbitearthsunplanetplanets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Tyler Walters - Technical Artist - 2018\n\n\n\nconst vec3 bg_color = vec3(0.1);\nconst vec3 sun_color = vec3(1.0,0.825,0.6);\nconst vec3 earth_color = vec3(0.1,0.3,0.4);\nconst vec3 moon_color = vec3(0.3,0.3,0.3);\n    \n\n\n\t\n//Circle function with smooth stepped aa\nfloat circle (in vec2 pos, in vec2 rad, in float smth_min, in float smth_max)\n    {\n        float dis = distance(pos, rad);\n        float circ = smoothstep(smth_min,smth_max,dis);\n        \n        return circ;    \n    }\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    \n    // UV coordinate offsets for earth and moon\n    vec2 uv_rota = (uv * 3.0) + vec2(1.3 * sin(iTime / 3.0), cos(iTime / 3.0));\n    vec2 uv_rotb = (uv_rota * 4.0) + vec2(sin(iTime * 2.0), cos(iTime * 2.0));\n    \n    // Sun\n    float sun = circle(uv * 2.0 , vec2(0.0), float(0.25), float(0.255));\n    float sun_ripple = abs(sin(circle(uv * 2.0 , vec2(0.0), float(0.0), float(1.0)) * 25.0 - (iTime * 0.5)));\n    float sun_glow = circle(uv * 2.0 , vec2(0.0), float(0.2), float(0.4)); \n    sun = (((max(sun_glow, sun_ripple) / 2.0 + 0.5) * sun_glow) * sun);\n\n    // Earth    \n    float earth = circle(uv_rota, vec2(0.0), float(0.1), float(0.11));\n    float earth_grad = mix(dot(uv_rota, vec2(sin(iTime / 3.0), cos(iTime / 3.0))) + 0.2, 0.0, earth);\n\n    // Moon\n    float moon = circle(uv_rotb, vec2(0.0), float(0.1), float(0.12));\n\tfloat moon_grad = mix(dot(uv_rota, vec2(sin(iTime / 3.0), cos(iTime / 3.0))) + 0.15, 0.0, moon) / 2.0;\n    \n    // Black and white mask of all elements\n    float bg_mask = sun * earth * moon;\n    \n   \n    // Color & shading of each individual element\n    vec3 sun_lit = mix(sun_color, vec3(0.0), sun);\n    vec3 earth_lit = mix(earth_color + ((earth_grad * sun_color) * 2.0), vec3(0.0), earth);\n    vec3 moon_lit = mix(moon_color + ((moon_grad * sun_color) * 2.0), vec3(0.0), moon);\n    \n   \n    // Cheap combination of all shaded elements\n\tvec3 col = sun_lit + earth_lit + moon_lit;\n\n\n    // Output to screen\n    fragColor = vec4(vec3(mix(col, bg_color, bg_mask)) * 1.15,0.0);\n}","name":"Image","description":"","type":"image"}]}