{"ver":"0.1","info":{"id":"dlcXWM","date":"1685545955","viewed":173,"name":"Some cool circles","username":"Strasko","description":"Some pretty cool circles","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["animationcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pallette(float t){\n    vec3 a = vec3(0.238, 0.028, 0.828);\n    vec3 b = vec3(-1.385, 0.720, 0.720);\n    vec3 c = vec3(-2.372, 1.110, 1.110);\n    vec3 d = vec3(1.758, -0.422, 1.388);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec3 colorVariation(float timeScale, vec2 uv){\n    float r = clamp(sin(iTime * timeScale) * 6.28318, 0.0, 0.1);\n    float b = clamp(cos(iTime * timeScale) * 6.28318, 0.0, 0.1);\n    \n    return vec3(sin(r * uv * timeScale), sin(b * uv.y * uv.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float strength = 8.;\n    float timeScale = 0.3;\n    float iterations = 2.0;\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < iterations; i++){\n        uv = fract(uv * 2.0) - 0.5;\n    \n    float d = length(uv - vec2(0.0, tan(iTime * timeScale))) * exp(-length(uv0));\n    vec3 col = clamp(pallette(length(uv0) - iTime * timeScale) * abs(tan(iTime * timeScale)), 0.0, 1.0);\n    \n    d = sin(d * strength + iTime) / strength;\n    d = abs(d);\n    \n    d = 0.01 / d;\n\n    finalColor += col * d + colorVariation(timeScale, uv0);\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}