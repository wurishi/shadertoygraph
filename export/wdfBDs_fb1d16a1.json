{"ver":"0.1","info":{"id":"wdfBDs","date":"1589268464","viewed":183,"name":"Mandelbrot2_","username":"mdb","description":"Mandelbrot set zoom","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define AA 3\nconst float dim2 = 1.5;\nconst int maxIter = 600;\nconst vec2 center = vec2(-.743643135, .131825963);\nconst float PI = 3.14159265359;\n\nfloat iter( vec2 c )\n{\n    vec2 z = vec2(0.0);\n    for (int i=0;i < maxIter; i++) {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        if (dot(z,z) > 14.) return float(i) - log2(log2(dot(z,z))) + 4.0;\n    }\n    return float(maxIter);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float zoom = pow((cos(iTime/10.*PI)+1.)/2.,4.)*dim2+0.000005;\n    vec3 col = vec3(0.0);\n    for(int m = 0; m < AA; m++){\n    for(int n = 0; n < AA; n++){\n        vec2 off = vec2(float(m), float(m))/float(AA);\n        vec2 uv2 = uv + off/iResolution.xy;\n        uv2=uv2*2.*zoom-zoom;\n        float rapport = iResolution.x/iResolution.y;\n        uv2.x=uv2.x*rapport;\n        uv2 = uv2 + center;\n\n        float it = iter(uv2);\n        if (it != float(maxIter)){\n            col += (sin(vec3(it)/10.+vec3(0.,1./3.,2./3.)*PI)+vec3(1.))/2.;\n        }\n        \n    }}\n    col /= float(AA*AA);\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}