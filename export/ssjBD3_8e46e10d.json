{"ver":"0.1","info":{"id":"ssjBD3","date":"1647293207","viewed":160,"name":"EarthPlanetSpace","username":"MelisaHot","description":"Earth and stars in space.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["earth","space","planet","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.0001;\n#define NUM_LAYER 6.\n\n\nmat2 Rot(float angle){\n    float s=sin(angle), c=cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat sdSphere(vec3 p, float r ){\n    vec3 offset = vec3(0, 0, -2);\n    return length(p - offset) - r;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end){\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 p = ro + depth * rd;\n        float d = sdSphere(p, 1.);\n        depth += d;\n        if (d < PRECISION || depth > end) break;\n    }\n\n    return depth;\n}\n\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    float r = 1.; // radius of sphere\n    return normalize(\n      e.xyy * sdSphere(p + e.xyy, r) +\n      e.yyx * sdSphere(p + e.yyx, r) +\n      e.yxy * sdSphere(p + e.yxy, r) +\n      e.xxx * sdSphere(p + e.xxx, r));\n}\n\n\nfloat hash(vec2 p) {\n    return fract(sin(dot(p.xy, vec2(5.34, 7.13)))*5865.273458);   \n}\n\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 456.21));\n    p +=dot(p, p+45.32);\n    return  fract(p.x*p.y);\n}\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);//center of screen is origin of uv -- length give us distance from every pixel to te center\n    float m = .05/d;\n    float rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m +=rays*flare;\n    uv *=Rot(3.1415/4.);\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m +=rays*.2*flare;\n    m *=smoothstep(1., .1, d);\n    \n    return m;\n}\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 gv= fract(uv)-.5; //gv is grid view\n    vec2 id= floor(uv);\n\n    for(int y=-1; y<=1; y++){\n        for(int x=-1; x<=1; x++){\n\n            vec2 offset= vec2(x, y);\n            float n = Hash21(id+offset);\n            float size = fract(n*345.32);\n            float star= Star(gv-offset-(vec2(n, fract(n*34.))-.5), smoothstep(.8, 1., size)*.6);\n            vec3 color = sin(vec3(.2, .3, .4)*fract(n*2345.2)*123.2)*.5+.5;\n            color = color*vec3(.7, .2, .5+size);\n\n            star *=sin(iTime*3.+n*6.2831)*.5+.5;\n            col +=star*size*color; \n\n        }\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 backgroundColor = vec3(0.);\n\n    for(float i =0.; i<1.; i += 1./NUM_LAYER){\n        float depth = fract(i+iTime*.02);\n        float scale= mix(10.,.5, depth);\n        float fade = depth*smoothstep(1., .8, depth);\n        backgroundColor += StarLayer(uv*scale+i*453.32)*fade;\n    \n    }\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n    vec3 rd = normalize(vec3(uv, -1)); // ray direction\n    float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // distance to sphere\n\n    if (d+1. > MAX_DIST){\n        col = backgroundColor; // ray didn't hit anything\n    } \n    else{\n        vec3 p = ro + rd * d; // point on sphere we discovered from ray marching\n        vec3 normal = calcNormal(p);\n        vec3 lightPosition = vec3(sin(iTime*0.5)*2.0, 0.0, cos(iTime*0.5)*2.0) ;\n        vec3 lightDirection = normalize(lightPosition - p)*2.;\n\n        // Calculate diffuse reflection by taking the dot product of \n        // the normal and the light direction.\n        float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n        vec2 rg = textureLod( iChannel0, uv, .5 ).yx;\n        col= dif*vec3(rg, .6);\n\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}