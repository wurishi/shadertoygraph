{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by Vinicius Graciano Santos - vgs/2014\n// This shader is just a simple test on the radial twist operator by xTr1m.\n// See https://www.shadertoy.com/view/ldl3zr\n\n#define EPS 0.01\n#define TAU 6.28318530718\n\nfloat norm(vec2 p, float k) {\n    return pow(dot(vec2(1.0), pow(abs(p), vec2(k))), 1.0/k);\n}\n\nfloat norm(vec3 p, float k) {\n    return pow(dot(vec3(1.0), pow(abs(p), vec3(k))), 1.0/k);\n}\n\nfloat mobius(vec3 p, float turns) {\n    p.y += cos(iTime+turns);\n    float a = turns*atan(p.y, p.z);            // angle in the YZ plane.\n    vec2 q = vec2(norm(p.zy, 8.0) - 3.0, p.x); // distance to outer radius and 2D projection.\n    q = q*cos(a) + vec2(-q.y, q.x)*sin(a);     // rotate the 2D plane as a function of the YZ angle.\n    return norm(q, 8.0) - 1.0;                 // distance to inner radius.\n}\n\nfloat map(vec3 p) {\n    float k = 10.0;\n    float a = atan(p.z, p.x), l = length(p.zx);\n    float repa = mod(a, TAU/k) - .5*TAU/k;     // circular domain repetition .\n    p.xz = l*vec2(cos(repa), sin(repa)); p.x -= 16.0;\n    return mobius(p, floor(k*a/TAU));\n}\n\nvec3 normal(vec3 p) {\n    vec2 q = vec2(0.0, EPS);\n    return normalize(vec3(map(p + q.yxx) - map(p - q.yxx),\n                          map(p + q.xyx) - map(p - q.xyx),\n                          map(p + q.xxy) - map(p - q.xxy)));\n}\n\nvec3 shade(vec3 ro, vec3 rd, float t) {\n    vec3 p = ro + t*rd;\n    vec3 n = normal(p);\n    \n    float fresnel = 0.2;\n    fresnel = fresnel + (1.0-fresnel)*pow(max(0.0, dot(-rd, n)), 5.0);\n    \n    vec3 mat = vec3(185., 148., 69.)/255.;\n    \n    return 0.1*mat*texture(iChannel0, n).rgb \n         + 0.4*mat*texture(iChannel0, reflect(rd, n)).rgb*fresnel\n         + 0.5*mat*pow(clamp(1.0+dot(n, rd), 0.0, 1.0), 3.0)*texture(iChannel0, rd).rgb;\n}\n\nmat3 lookat(vec3 ro, vec3 target) {\n    vec3 f = normalize(ro - target);\n    vec3 r = cross(vec3(0.0, 1.0, 0.0), f);\n    return mat3(r, cross(f, r), f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy+2.0*fragCoord.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.00001); // if I set ro to zero, it does not render in linux. Why? =/\n    vec3 ta = vec3(cos(0.25*iTime), 0.0, sin(0.25*iTime));\n    vec3 rd = normalize(lookat(ro, ta)*vec3(uv, -2.5));\n       \n    float t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n    \tfloat d = map(ro + t*rd);\n    \tif (d < EPS || t > 20.0) break; t += 0.8*d;\n    }\n    vec3 col = map(ro + t*rd) < EPS ? shade(ro, rd, t) : texture(iChannel0, rd).rgb;\n    \n    col = smoothstep(0.0, 0.2, col);\n\tfragColor = vec4(pow(col, vec3(1.0/2.2)),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdjXzG","date":"1415219758","viewed":596,"name":"Twisted Jewelry","username":"vgs","description":"Just testing the radial twist operator used in the shader Mobius Balls by xTr1m. \nSource: https://www.shadertoy.com/view/ldl3zr","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","radial","ibl","twist"],"hasliked":0,"parentid":"","parentname":""}}