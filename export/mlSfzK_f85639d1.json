{"ver":"0.1","info":{"id":"mlSfzK","date":"1694227453","viewed":21,"name":"Cone Indeed","username":"8mcgraw","description":"1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//from: https://iquilezles.org/articles/distfunctions/\n\n//Cone - exact\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = sin(iTime);\n    float c = cos(iTime);\n    mat3 rotX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, c,   s,\n        0.0, -s,  c\n    );\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //create ray\n    vec3 rayPt = vec3(uv.xy, 0);\n    vec3 rayPtdx = vec3(uv.x+0.0000001, uv.y, 0);\n    vec3 rayPtdy = vec3(uv.x, uv.y+0.0000001, 0);\n    vec3 rayDir = vec3(0,0,1);\n    \n    float t = 0.0, tdx = 0.0, tdy = 0.0; //ray marching\n    \n    //define sphere properties\n    float coneHeight = 0.4;\n    vec2 coneAngle = vec2(0.1,0.2);\n    vec3 conePos = vec3(0.5,0.5,5.0);\n    \n    //calculate a points along the ray\n    for (int i = 0; i < 100; i++){\n        vec3 pos = rayPt + rayDir * t;\n        vec3 posdx = rayPtdx + rayDir * tdx;\n        vec3 posdy = rayPtdy + rayDir * tdy;\n        \n        float dist = sdCone( rotX * (pos - conePos), coneAngle, coneHeight);\n        float distdx = sdCone( rotX * (posdx - conePos), coneAngle, coneHeight);\n        float distdy = sdCone( rotX * (posdy - conePos), coneAngle, coneHeight);\n        \n        \n        if(dist < 0.01 && distdx < 0.01 && distdy < 0.01){\n            vec3 lightDir = rayDir;\n            vec3 color = vec3(1,0,1);\n            col = color*dot(-lightDir, normalize(cross(posdy - pos, posdx - pos)));\n            //col=normalize(pos-conePos);\n            //col = normalize(cross(posdy - pos, posdx - pos));\n            //col.z = -col.z;\n            break;\n        } \n        t = t + dist;\n        tdx = tdx + distdx;\n        tdy = tdy + distdy;\n    }\n    \n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}