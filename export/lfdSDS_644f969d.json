{"ver":"0.1","info":{"id":"lfdSDS","date":"1714413944","viewed":55,"name":"Fork Shroomyfix sleeplessm 875","username":"sleeplessmonk","description":"so many functions","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["waves","psychedelic","kaleidoscope","netgrind"],"hasliked":0,"parentid":"wlGBDD","parentname":"Shroomyfix"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec4 hue(vec4 color, float shift) {\n\n    const vec4  kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\n    const vec4  kRGBToI     = vec4 (0.596, -0.275, -0.321, 0.0);\n    const vec4  kRGBToQ     = vec4 (0.212, -0.523, 0.311, 0.0);\n    \n    const vec4  kYIQToR   = vec4 (1.0, 0.956, 0.621, 0.0);\n    const vec4  kYIQToG   = vec4 (1.0, -1.272, -0.647, 0.0);\n    const vec4  kYIQToB   = vec4 (1.0, -1.107, 1.704, 0.0);\n\n    // Convert to YIQ\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n\n    // Calculate the hue and chroma\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    // Make the user's adjustments\n    hue += shift;\n\n    // Convert back to YIQ\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    // Convert back to RGB\n    vec4    yIQ   = vec4 (YPrime, I, Q, 0.0);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n\n    return color;\n}\n\nvec2 kale(vec2 uv, float angle, float base, float spin) {\n\tfloat a = atan(uv.y,uv.x)+spin;\n\tfloat d = length(uv);\n\ta = mod(a,angle*2.0);\n\ta = abs(a-angle);\n\tuv.x = sin(a+base)*d;\n\tuv.y = cos(a+base)*d;\n    return uv;\n}\n\nvec2 rotate(float px, float py, float angle){\n\tvec2 r = vec2(0);\n\tr.x = cos(angle)*px - sin(angle)*py;\n\tr.y = sin(angle)*px + cos(angle)*py;\n\treturn r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Fetch audio data for low and high frequencies\n    float bass = texture(iChannel0, vec2(0.05, 0.5)).r;  // Low frequencies\n    float treble = texture(iChannel0, vec2(0.15, 0.5)).r; // High frequencies\n\n    // Time and UV calculation\n    float time = iTime + bass * 0.5;\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 1.0 + treble * 0.5;  // Dynamic UV scaling based on treble\n\n    // Kaleidoscope transformation influenced by audio\n    float angle = 3.14159265359 / 5.0 + bass * 0.2; // Modify angle with bass\n    float base = iTime * 1.618033988749895;\n    float spin = base + treble * 23.40; // Increase spin based on treble\n    uv = kale(uv, angle, base, spin);\n\n    // Dynamic color calculation using audio-reactive hue function\n    vec4 c = vec4(1.618033988749895);\n    mat2 m = mat2(sin(uv.y * cos(uv.x + time) + time * 1.618033988749895) * 1.618033988749895, -255.5, sin(uv.x + time * 5.0) * 1.618033988749895, -cos(uv.y - time) * 6.0);\n    uv = rotate(uv.x, uv.y, length(uv) + time * 1.618033988749895);\n    c.rg = cos(sin(uv.xx + uv.yy) * m - time);\n    c.b = sin(rotate(uv.x, uv.x, length(uv.xx) * 1.618033988749895 + time).x - uv.y + time);\n\n    // Apply a hue shift dynamically based on low frequency (bass)\n    fragColor = vec4(0.001 - hue(c, bass * 6.28318).rgb, 0.8); // Multiply bass by 2Ï€ for a full hue rotation range\n}\n","name":"Image","description":"","type":"image"}]}