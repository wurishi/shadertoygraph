{"ver":"0.1","info":{"id":"43SfzR","date":"1729093799","viewed":14,"name":"koch for study","username":"ARTS_syz","description":"The koch snowflakes in the image is what I created, the code came from the internet, and this Shadertoy is only for me to learn from. Plus，what i do is just to add something to the col，this make the generative logic more clear.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["codeforstudy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T .01\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y; \n    vec3 col = vec3(0.);\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float a = (4. / 6.) * 3.1415926;\n    vec2 n = vec2(sin(a), cos(a));\n    float s = 1.;\n    int t = int(sin(iTime) * 2. + 3.);\n    uv.x += .5;\n    uv.y += .25;\n    for (int i = 0; i < t; i++ )\n    {\n        s *= 3.;\n        uv *= 3.;\n        uv.x -= 1.5;\n\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n\n        uv -= n * min(0., dot(uv, n)) * 2.;\n    }\n\n    float d = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n    col += smoothstep(T, .0, d/s)+0.5+0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //col += smoothstep(T, .0, d/s);\n    fragColor = vec4(col, 1.);\n}\n\n\n","name":"Image","description":"","type":"image"}]}