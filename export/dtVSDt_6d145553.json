{"ver":"0.1","info":{"id":"dtVSDt","date":"1686663404","viewed":51,"name":"Edge of Chaos BZ Reaction","username":"johnhearn","description":"Zoom into area showing phase transition","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["diffusion","reaction","belousov","infection","oscillations","zhabotinsk"],"hasliked":0,"parentid":"MlXyWX","parentname":"BZ Reaction"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color(in float t) {\n    const int pal[] = int[](0x000000, 0x400100, 0x4c0200, 0x540300, 0x5a0400, 0x5f0500, 0x640600, 0x680700, 0x6b0800, 0x6e0900, 0x710a00,\n     0x740b00, 0x770c00, 0x790d00, 0x7b0e00, 0x7d0f00, 0x801000, 0x811100, 0x831200, 0x851300, 0x871400, 0x881500,\n     0x8a1600, 0x8c1700, 0x8d1800, 0x8f1900, 0x901a00, 0x911b00, 0x931c00, 0x941d00, 0x951e00, 0x961f00, 0x982000,\n     0x992100, 0x9a2200, 0x9b2300, 0x9c2400, 0x9d2500, 0x9e2600, 0x9f2700, 0xa02800, 0xa12900, 0xa22a00, 0xa32b00,\n     0xa42c00, 0xa52d00, 0xa62e00, 0xa72f00, 0xa83000, 0xa93100, 0xaa3200, 0xaa3300, 0xab3400, 0xac3500, 0xad3601,\n     0xae3701, 0xae3801, 0xaf3901, 0xb03a01, 0xb13b01, 0xb13c01, 0xb23d01, 0xb33e01, 0xb43f01, 0xb44001, 0xb54101,\n     0xb64201, 0xb64301, 0xb74401, 0xb84501, 0xb84601, 0xb94702, 0xba4802, 0xba4902, 0xbb4a02, 0xbc4b02, 0xbc4c02,\n     0xbd4d02, 0xbd4e02, 0xbe4f02, 0xbf5002, 0xbf5103, 0xc05203, 0xc05303, 0xc15403, 0xc25503, 0xc25603, 0xc35703,\n     0xc35804, 0xc45904, 0xc45a04, 0xc55b04, 0xc55c04, 0xc65d04, 0xc75e05, 0xc75f05, 0xc86005, 0xc86105, 0xc96205,\n     0xc96306, 0xca6406, 0xca6506, 0xcb6606, 0xcb6707, 0xcc6807, 0xcc6907, 0xcd6a07, 0xcd6b08, 0xce6c08, 0xce6d08,\n     0xce6e09, 0xcf6f09, 0xcf7009, 0xd0710a, 0xd0720a, 0xd1730a, 0xd1740b, 0xd2750b, 0xd2760c, 0xd3770c, 0xd3780c,\n     0xd3790d, 0xd47a0d, 0xd47b0e, 0xd57c0e, 0xd57d0e, 0xd67e0f, 0xd67f0f, 0xd68010, 0xd78010, 0xd78111, 0xd88211,\n     0xd88312, 0xd88413, 0xd98513, 0xd98614, 0xda8714, 0xda8815, 0xda8916, 0xdb8a16, 0xdb8b17, 0xdc8c17, 0xdc8d18,\n     0xdc8e19, 0xdd8f1a, 0xdd901a, 0xde911b, 0xde921c, 0xde931c, 0xdf941d, 0xdf951e, 0xdf961f, 0xe09720, 0xe09821,\n     0xe19921, 0xe19a22, 0xe19b23, 0xe29c24, 0xe29d25, 0xe29e26, 0xe39f27, 0xe3a028, 0xe3a129, 0xe4a22a, 0xe4a32b,\n     0xe4a42c, 0xe5a52d, 0xe5a62e, 0xe6a72f, 0xe6a830, 0xe6a932, 0xe7aa33, 0xe7ab34, 0xe7ac35, 0xe8ad36, 0xe8ae38,\n     0xe8af39, 0xe9b03a, 0xe9b13c, 0xe9b23d, 0xeab33e, 0xeab440, 0xeab541, 0xeab643, 0xebb744, 0xebb846, 0xebb947,\n     0xecba49, 0xecbb4a, 0xecbc4c, 0xedbd4d, 0xedbe4f, 0xedbf51, 0xeec052, 0xeec154, 0xeec256, 0xefc358, 0xefc459,\n     0xefc55b, 0xefc65d, 0xf0c75f, 0xf0c861, 0xf0c963, 0xf1ca65, 0xf1cb67, 0xf1cc69, 0xf2cd6b, 0xf2ce6d, 0xf2cf6f,\n     0xf2d071, 0xf3d173, 0xf3d276, 0xf3d378, 0xf4d47a, 0xf4d57d, 0xf4d67f, 0xf4d781, 0xf5d884, 0xf5d986, 0xf5da89,\n     0xf6db8b, 0xf6dc8e, 0xf6dd90, 0xf6de93, 0xf7df95, 0xf7e098, 0xf7e19b, 0xf7e29e, 0xf8e3a0, 0xf8e4a3, 0xf8e5a6,\n     0xf9e6a9, 0xf9e7ac, 0xf9e8af, 0xf9e9b2, 0xfaeab5, 0xfaebb8, 0xfaecbb, 0xfaedbe, 0xfbeec2, 0xfbefc5, 0xfbf0c8,\n     0xfbf1cc, 0xfcf2cf, 0xfcf3d2, 0xfcf4d6, 0xfcf5d9, 0xfdf6dd, 0xfdf7e1, 0xfdf8e4, 0xfdf9e8, 0xfefaec, 0xfefbef,\n     0xfefcf3, 0xfffdf7, 0xfffefb);\n     \n    int u_color = pal[int(t*233.)];\n    int rIntValue = (u_color >> 8 >> 8) % 256;\n    int gIntValue = (u_color >> 8     ) % 256;\n    int bIntValue = (u_color          ) % 256;\n    vec3 fragColor = vec3(float(rIntValue) / 255., float(gIntValue) / 255., float(bIntValue) / 255.);\n\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float val = texture(iChannel0, uv).x;\n    fragColor = vec4(color(val) , 1);   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Cubes: k1=1, k2=6, g=100, max_state=500\n// Spirals: k1=3, k2=3, g=90, max_state=500\n// Spirals with dirt: k1=6, k2=1, g=100, max_state=500\n// Noise: k1=3, k2=4, g=100, max_state=500\n// Oscilatinig patterns: k1=3, k2=3, g=56, max_state=500\n\n//const float k1 = 3.; \n//const float k2 = 3.;\n//const float g = 56.;\nconst float max_state = 500.;\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 xy = fragCoord.xy / iResolution.xy;\n\tvec2 texel = 1. / iResolution.xy;\n    \n    float delta_x = texel.x;\n    float delta_y = texel.y;\n    \n    vec2 n = vec2(0.0, delta_y);\n    vec2 ne = vec2(delta_x, delta_y);\n    vec2 e = vec2(delta_x, 0.0);\n    vec2 se = vec2(delta_x, -delta_y);\n    vec2 s = vec2(0.0, -delta_y);\n    vec2 sw = vec2(-delta_x, -delta_y);\n    vec2 w = vec2(-delta_x, 0.0);\n    vec2 nw = vec2(-delta_x, delta_y);\n    \n    vec3 uv =    texture(iChannel0, xy).xyz;\n    vec3 uv_n =  texture(iChannel0, xy+n).xyz;\n    vec3 uv_e =  texture(iChannel0, xy+e).xyz;\n    vec3 uv_s =  texture(iChannel0, xy+s).xyz;\n    vec3 uv_w =  texture(iChannel0, xy+w).xyz;\n    vec3 uv_nw = texture(iChannel0, xy+nw).xyz;\n    vec3 uv_sw = texture(iChannel0, xy+sw).xyz;\n    vec3 uv_ne = texture(iChannel0, xy+ne).xyz;\n    vec3 uv_se = texture(iChannel0, xy+se).xyz;\n\n    // (b) If the cell is ill (i.e., in highest ionfection state) then it miraculously\n    // becomes healthy (i.e. its state becomes 0).\n    if (uv.x > 0.99)\n        uv.x = 0.;\n    \n    else{\n        int infected = 0;\n        int sick = 0;\n        \n        if (uv_n.x > 0.99) sick ++;\n        else if (uv_n.x > 0.) infected ++;\n        if (uv_e.x > 0.99) sick ++;\n        else if (uv_e.x > 0.) infected ++;\n        if (uv_s.x > 0.99) sick ++;\n        else if (uv_s.x > 0.) infected ++;\n        if (uv_w.x > 0.99) sick ++;\n        else if (uv_w.x > 0.) infected ++;\n        if (uv_nw.x > 0.99) sick ++;\n        else if (uv_nw.x > 0.) infected ++;\n        if (uv_ne.x > 0.99) sick ++;\n        else if (uv_ne.x > 0.) infected ++;\n        if (uv_sw.x > 0.99) sick ++;\n        else if (uv_sw.x > 0.) infected ++;\n        if (uv_se.x > 0.99) sick ++;\n        else if (uv_se.x > 0.) infected ++;\n    \t\n        // 4 phases\n        //    float k1 = (xy.x)*2.5 + 0.1;\n        //    float k2 = (xy.y)*7. + 0.2;\n        \n        \n        float k1 = xy.x/2. + 0.75;\n        float k2 = 6.;//xy.y*2. + 5.0;\n        \n            float g = 80.;//(xy.x + 0.1) * 200.;\n\n        // (a) If the cell is healthy (i.e., in state 0) then its new state is [a/k1] + [b/k2],\n        // where a is the number of infected cells among its eight neighbors, b is the number of\n        // ill cells among its neighbors, and k1 and k2 are constants. Here “[]” means the\n        // integer part of the number enclosed, so that, for example, [7/3] = [2+1/3] = 2.\n        if (uv.x == 0.){\n            uv.x = floor(float(infected) / k1) + floor(float(sick) / k2);\n        }\n        // (c) If the cell is infected (i.e., in a state other than 0 and n) then its new state\n        // is [s/(a+b+1)] + g, where a and b are as above, s is the sum of the states of the cell\n        // and of its neighbors and g is a constant.\n        else {\n            float sum = (uv_n.x + uv_s.x + uv_e.x + uv_w.x + uv_nw.x + uv_ne.x + uv_sw.x + uv_se.x) * max_state;\n            uv.x = sum / (float(infected + sick) + 1.) + g;\n        }\n        \n        if (uv.x > max_state)\n            uv.x = max_state;\n    }\n    \n\n    if (iFrame==0 || reset()) {\n        fragColor = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    } else {\n        fragColor = vec4(uv.x / max_state);\n    }\n        \n}\n","name":"Buffer A","description":"","type":"buffer"}]}