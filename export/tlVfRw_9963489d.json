{"ver":"0.1","info":{"id":"tlVfRw","date":"1624027546","viewed":78,"name":"day night","username":"cody_shader","description":"from wikipedia:\nDay and Night is a cellular automaton rule in the same family as Game of Life. It is defined by rule notation B3678/S34678","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cellularautomaton"],"hasliked":0,"parentid":"WlVBzw","parentname":"LIFE"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x -= 0.5;\n    uv.x = abs(uv.x);\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 col;\n\nfloat noise2 (float a, float b) {\n    float buff1 = fract((10000.f + abs(b + a)) * fract(a * fract((100.f + b) * fract(a * 0.0171 + b))));\n    return(buff1 * 1.0038 - 0.00185);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    if (iFrame==0) col = vec3(noise2(fragCoord.x, fragCoord.y));\n    else {\n        \n        vec2 neighborhood [8];\n        \n        neighborhood [0] = vec2(-1.,-1.);\n        neighborhood [1] = vec2(-1.,1.);\n        neighborhood [2] = vec2(-1.,0.);\n        neighborhood [3] = vec2(0.,-1.);\n        neighborhood [4] = vec2(0.,1.);\n        neighborhood [5] = vec2(1.,-1.);\n        neighborhood [6] = vec2(1.,1.);\n        neighborhood [7] = vec2(1.,0.);\n        \n        int counter = 0;\n        float result = 1.;\n        \n        for (int i; i<8; i++) {\n            if (texture(iChannel0, fract((fragCoord+neighborhood [i])/iResolution.xy)).x < 0.5) counter++;\n          \n        }\n        \n        float this_color = texture(iChannel0, fragCoord/iResolution.xy).x;\n        if (this_color < 0.5) {\n            if (counter==3 || counter==4 || counter==6 || counter==7 || counter==8) result = 0.;\n        }\n        else {\n            if (counter==3 || counter==6 || counter==7 || counter==8) result = 0.;\n        }\n        \n        col = vec3(result); \n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}