{"ver":"0.1","info":{"id":"3sBfRW","date":"1589545433","viewed":81,"name":"2d landmass","username":"user3000","description":"2d landmass generation with gradientnoise.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","gradientnoise","landmass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int octaves = 5;\nconst float persistance = 0.66;\nconst float lacunarity = 2.;\n\nfloat mountains = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = abs(sin(iTime/7.5))*15.+2.0;\n    \n    float maxRes = max(iResolution.x, iResolution.y);\n    \n    vec2 pos = scale*(fragCoord-iResolution.xy/2.)/maxRes;    \n    \n    float amplitude = 1.;\n    float frequency = 1.;\n    float noiseHeight = 0.;\n    \n    \n    for (int i = 0; i < octaves; i++){\n    \tfloat n = noise((pos+scale*(iMouse.xy-iResolution.xy/2.)/maxRes)*frequency)*mountains;\n\t\tnoiseHeight += n * amplitude;\n\t\tamplitude *= persistance;\n\t\tfrequency *= lacunarity;\n    }\n    \n\n    fragColor = vec4(vec4(colormap(noiseHeight*5.), 1.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Functions\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec3 colormap(float h){\n    if (h > 1.) return vec3(181., 181., 105.)/255.; \n    if (h > .75) return vec3(219., 205., 54.)/255.;\n    if (h > .5) return vec3(150., 236., 77.)/255.;\n    if (h > .25) return vec3(122., 219., 61.)/255.;\n    if (h > 0.1) return vec3(52., 154., 19.)/255.;\n    if (h > 0.05) return vec3(144., 171., 28.)/255.;\n    if (h > -0.2) return vec3(0., 197., 215.)/255.;\n    return vec3(0., 153., 180.)/255.;\n}","name":"Common","description":"","type":"common"}]}