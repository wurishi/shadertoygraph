{"ver":"0.1","info":{"id":"flGyWt","date":"1662394065","viewed":126,"name":"Raytracing in 32 Lines","username":"FifthStateOfMatter","description":"Basic sphere raytracing in 32 lines.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct sphere{\n    vec3 center;\n    float radius;\n};\n\nbool raytraceSphere(vec3 orig, vec3 dir, out float t, sphere sphr){\n    vec3 oc = orig - sphr.center;\n    float a = dot(dir, dir);\n    float b = 2.0*dot(oc, dir);\n    float c = dot(oc, oc) - sphr.radius*sphr.radius;\n    float d = b*b - 4.0*a*c;\n    t = (-b - sqrt(d))/(2.0*a);\n    bool h;\n    d >= 0.0 ? h = true : h = false;\n    return h;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    sphere s1 = sphere(vec3(0, 0, 5), 1.0);\n    vec3 orig = vec3(0);\n    vec3 dir = vec3(uv.xy, 1);\n    float t;\n    bool r = raytraceSphere(orig, normalize(dir), t, s1);\n    vec3 rh = orig + normalize(dir)*t;\n    vec3 normal = rh - s1.center;\n    vec3 lp = vec3(10, 10, -10);\n    vec3 lr = lp - rh;\n    vec3 col;\n    r ? col = vec3(max(dot(normalize(normal), normalize(lr)), 0.2)) : col = vec3(0);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}