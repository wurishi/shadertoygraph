{"ver":"0.1","info":{"id":"MXc3Wj","date":"1731527071","viewed":38,"name":"curv","username":"RoFL","description":"шейдер заменяющий на изображении один градиент цветов на другой в соответствии с ломаной линией заданной квадратами (их можно перетаскивать левой кнопкой) и цветами градиентов: in_col1, in_col2 (нижний входной градиент), и  ou_col (градиент слева)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//отрисовка\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 uv_n = fragCoord/iResolution.xy;\n    vec2 px = 1./iResolution.yy;\n    vec2 px_n = 1./iResolution.xy;\n    \n    //фон\n    fragColor = vec4(.0,.0,.0,1.);\n    \n    //загрузка\n    for(i=0;i<DAT_SIZ;i++)\n    dat[i] = texture(iChannel0, vec2(0., 1.-float(i)*px.y-px.y*0.5)).xyz;\n    \n    for(i=0;i<DAT_SIZ;i++)\n    {\n        //размер\n        if (eq(dat[i].xy,uv.xy,0.01*SIZ))\n        //и цвет (+= для прозрачности) \n        fragColor += vec4(.5,.5,.5,1.);\n    }\n\n    //линии\n    for(i=0;i<DAT_SIZ-1;i++)\n    if(eq(uv.y,dat[i].y + (uv.x-dat[i].x)*(dat[i+1].y-dat[i].y)/(dat[i+1].x-dat[i].x),px.y) || \n       eq(uv.x,dat[i].x + (uv.y-dat[i].y)*(dat[i+1].x-dat[i].x)/(dat[i+1].y-dat[i].y),px.y))\n       if( max(dat[i].x,dat[i+1].x) > uv.x && min(dat[i].x,dat[i+1].x) < uv.x && \n           max(dat[i].y,dat[i+1].y) > uv.y && min(dat[i].y,dat[i+1].y) < uv.y) \n        fragColor = vec4(1,1,1,1);\n        \n    //fragColor += texture(iChannel0,uv);\n    \n    vec3 in_col = texture(iChannel1,uv_n).xyz;\n    \n    vec3 in_col1 = vec3(-0.001,-0.001,-0.001);\n    vec3 in_col2 = vec3(1.,-0.001,-0.001);\n    \n    float in_poz1 = 0.3;\n    float in_poz2 = 0.4;\n    \n    vec3 ou_col = vec3(-1.,-1.,-1.);\n    \n    vec3 ou_col1 = vec3(-0.001,-0.001,-0.001);\n    vec3 ou_col2 = vec3(1.,-0.001,-0.001);\n    \n    float ou_poz1 = 0.3;\n    float ou_poz2 = 0.4;\n    \n    if(in_col.x<0.) ;\n    \n    int j;\n    for (i=0;i<3;i++)\n    {\n        if(in_col[i] >= min(in_col1[i],in_col2[i]) && in_col[i] <= max(in_col1[i],in_col2[i]))\n        {\n            float in_x = in_poz1+(in_col[i]-in_col1[i])/(in_col2[i]-in_col1[i])*(in_poz2-in_poz1);\n            if(in_x<dat[1].x) \n            j=0;else j=1;\n            {\n                float ou_y = dat[j].y + (in_x-dat[j].x)*(dat[j+1].y-dat[j].y)/(dat[j+1].x-dat[j].x);\n                if(ou_y>in_poz1)\n                {\n                    ou_col[i] = (ou_y-ou_poz1)/(ou_poz2-ou_poz1)*(ou_col2[i]-ou_col1[i])+ou_col1[i];\n                }\n            }\n        }\n    \n    }\n    vec3 mouse_in_col = texture(iChannel1,iMouse.xy/iResolution.xy).xyz;\n    vec3 mouse_ou_col = vec3(-1.,-1.,-1.);\n    ////////////////////////\n        for (i=0;i<3;i++)\n    {\n        if(mouse_in_col[i] >= min(in_col1[i],in_col2[i]) && in_col[i] <= max(in_col1[i],in_col2[i]))\n        {\n            float in_x = in_poz1+(mouse_in_col[i]-in_col1[i])/(in_col2[i]-in_col1[i])*(in_poz2-in_poz1);\n            if(in_x<dat[1].x) \n            j=0;else j=1;\n            {\n                float ou_y = dat[j].y + (in_x-dat[j].x)*(dat[j+1].y-dat[j].y)/(dat[j+1].x-dat[j].x);\n                if(ou_y>in_poz1)\n                {\n                    mouse_ou_col[i] = (ou_y-ou_poz1)/(ou_poz2-ou_poz1)*(ou_col2[i]-ou_col1[i])+ou_col1[i];\n                }\n            }\n        }\n    \n    }\n    ////////////////////////\n    \n    vec4 old = texture(iChannel1,uv_n);\n    fragColor += vec4(ou_col.x < -0.5? old.x : ou_col.x,\n                      ou_col.y < -0.5? old.y : ou_col.y,\n                      ou_col.z < -0.5? old.z : ou_col.z,\n                      1.);//texture(iChannel1,uv_n);\n\n    vec2 position1 = vec2(iResolution.x - font.x*(2.5+3.), iResolution.y - font.x*2.0);\n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font, dat[1].x, 1.0, 2.0); \n    \n    position1 = position1 - vec2(0.,0.) * font;\n    \n    vec4 m_col = texture(iChannel1,iMouse.xy/iResolution.xy);\n    \n    \n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font + vec2( 0.,2.), m_col.r, 1.0, 2.0);\n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font + vec2( 5.,2.), m_col.g, 1.0, 2.0);\n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font + vec2(10.,2.), m_col.b, 1.0, 2.0);\n\n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font + vec2( 0.,4.), mouse_ou_col.r, 1.0, 2.0);\n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font + vec2( 5.,4.), mouse_ou_col.g, 1.0, 2.0);\n    fragColor.xyz += PrintValue( (fragCoord.xy - position1) / font + vec2(10.,4.), mouse_ou_col.b, 1.0, 2.0);\n    \n    \n    \n    //if(in_poz1 < uv.x && uv.x < in_poz2 && ou_poz1 < uv.y && uv.y < ou_poz2)\n    if( eq(in_poz1, uv.x, px.x) || eq(in_poz2, uv.x, px.x) || eq(ou_poz1, uv.y, px.x) || eq(ou_poz2, uv.y, px.x))\n    fragColor += 1.;\n    \n    //fragColor = old;\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//для циклов\nint i;\n\n//количество векторов и размер прямоугольников\n#define DAT_SIZ 3\n#define SIZ 2.\n//насколько хитбокс больше прямоугольника\n#define HITBOX_SCALE 1.8\n\n//объеявим пременную с данными\nvec3 dat[DAT_SIZ];\n\n//проверка что float значения отличаются не больше чем на z\nbool eq (float x, float y,float z)\n{\n    return (abs(x-y)<z);\n}\n\nbool eq (vec2 x, vec2 y,float z)\n{\n    return (abs(x.x-y.x)<z && abs(x.y-y.y)<z );\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/*vec3 hsv2rgb(vec3 da)\n{\n    return vec3(da.x*da.x,da.x*da.x,da.x*da.x);\n}*/\n\n    vec2 font = vec2(24.0/2., 30.0/2.);\n\n\n// PrintValue by P.Malin\nfloat PrintValue( vec2 vCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{\n    if ((vCoords.y < 0.0) || (vCoords.y >= 1.0)) return 0.0;  \n    bool bNeg = ( fValue < 0.0 );\n    fValue = abs(fValue);  \n    float fBiggestIndex = max(floor(log2(abs(fValue)) / log2(10.0)), 0.0);\n    float fDigitIndex = fMaxDigits - floor(vCoords.x);\n    float fCharBin = 0.0;\n    if(fDigitIndex > (-fDecimalPlaces - 1.01))\n    {\n        if(fDigitIndex > fBiggestIndex)\n        {\n            if((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n        }\n        else\n        {\n            if(fDigitIndex == -1.0)\n            {\n                if(fDecimalPlaces > 0.0) fCharBin = 2.0;\n            }\n            else\n            {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n                float fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                int x = int(floor(fDigitValue - 10.0 * floor(fDigitValue/10.0)));  \n                fCharBin = x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n            }\n        }\n    }\n    float result = (fCharBin / pow(2.0, floor(fract(vCoords.x) * 4.0) + (floor(vCoords.y * 5.0) * 4.0)));\n    return floor(result - 2.0 * floor(result/2.0)); \n}\n\nvec3 mini(vec2 uv,float scl)\n{ \n    return vec3(uv.x*scl-float(int(uv.x*scl)),\n                uv.y*scl-float(int(uv.y*scl)),\n                ( float(int(uv.x*scl)) + float(int(uv.y*scl))*scl ) / (scl*scl-1.)  );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//перетаскивание\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 px = 1./iResolution.yy;\n    \n    //фон\n    fragColor = vec4(.0,.0,.0,1.);\n    \n    //загрузка\n    for(i=0;i<DAT_SIZ;i++)\n    {\n        dat[i] = texture(iChannel0, vec2(0., 1.-float(i)*px.y-px.y*0.5)).xyz;   \n    if(iFrame < 1)\n        dat[i].xy = vec2(float(i)/float(DAT_SIZ-1),float(i)/float(DAT_SIZ-1));\n    }\n    for(i=0;i<DAT_SIZ;i++)\n    {\n        //только ближайший к мышке перетаскивается\n        bool fl = true;\n        float min_l = length(px*iMouse.xy-dat[i].xy);\n        for(int j=0;j<DAT_SIZ;j++)\n        {\n            if (length(px*iMouse.xy-dat[j].xy)<min_l) fl = false;\n        \n        }\n        \n        //перетаскивание если схватил за хитбокс и ближайший\n        if (eq(dat[i].xy,px*iMouse.xy,0.01*SIZ*1.8) && fl) \n        {\n            dat[i].xy = px*iMouse.xy;\n        }\n    }\n    \n    //сохраняем //сохранить данные можно только в буфер // соответственно и управление элементами возможно только в них\n    if (fragCoord.x<5.)\n    {\n        for(i=0;i<DAT_SIZ;i++)\n        {\n            if (eq(fragCoord.y,iResolution.y-0.5-float(i),0.1))\n            {\n            fragColor = vec4(dat[i].x,dat[i].y,dat[i].z,1.);\n            if(iFrame < 8) //стартовые значения\n            fragColor = vec4(float(i)*0.05+0.3,float(i)*0.05+0.3,float(i)*0.1,1.);\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float scl = 10.;\n    \n    vec3 rgb = mini(vec2(uv.x*2.,uv.y),scl);\n    vec3 hsv = hsv2rgb(mini(vec2(uv.x*2.,uv.y),scl).zxy);\n    \n    fragColor = uv.x<0.5 ?  vec4(rgb,1.0): vec4(hsv,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}