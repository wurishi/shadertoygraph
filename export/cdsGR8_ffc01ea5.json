{"ver":"0.1","info":{"id":"cdsGR8","date":"1665660674","viewed":119,"name":"Slice experiment","username":"legoushque","description":"my second raymarching scene","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"7lGBWc","parentname":"legoushque RM template"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nvec3 rand3d(float n){\n    float x = rand(n)-0.5;\n    float y = rand(n*2.)-0.5;\n    float z = rand(n*3.)-0.5;\n    \n    return normalize(vec3(x, y, z));\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nfloat sdTorus(vec3 p){\n    return length(vec2(length(p.xz) - 1.3, p.y)) - 0.5;\n}\n\nfloat GetDist(vec3 p, inout int mat) {\n    float box = sdBox(p, vec3(1));\n    \n    float width = 0.15;\n    float cut = MAX_DIST;\n    int n = 5;\n    float c = cos(iTime);\n    float s = sin(iTime);\n    for(int i = 1; i < n*10; i+=10){\n        \n        vec3 v1 = rand3d(float(i));\n        vec3 v2 = rand3d(float(i+3));\n        vec3 pl = c*v1 + s*v2;\n        vec3 p1 = rand3d(float(i+5));\n        vec3 p2 = rand3d(float(i+7));\n        cut = min(abs(dot(pl, p-(p1*c+p2*s)*0.3))-width, cut);\n    }\n    \n    float d = max(box, -cut);\n    \n    if(d == -cut) mat = 0;\n    else if (d == box) mat = 1;\n    \n    return d-0.07;\n}\n\nfloat GetDist(vec3 p){\n    int pseudomat = -1;\n    return GetDist(p, pseudomat);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, inout int i, inout float mindist, inout int mat) {\n\tfloat dO=0.;\n    \n    mindist = GetDist(ro, mat);\n    for(i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p, mat);\n        if(dS < mindist) mindist = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) -\n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = vec2(fract(iTime*0.1), 0.5 + 0.25*sin(T));\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(1.);\n   \n    int i = 0;\n    int mat;\n    float mindist;\n    float d = RayMarch(ro, rd, i, mindist, mat);\n    float glow = pow(mindist, 0.02);\n    col -= glow;\n    //col = texture(iChannel0, rd).rgb;;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 color;\n        vec3 lightPos = normalize(vec3(1,2,3));\n        \n        float occlusion = 1.-float(i)/float(MAX_STEPS);\n        \n        \n\n        float dif = dot(n, lightPos)*.5+.5;\n        float shadow;\n        \n        if(mat == 0){\n            color = vec3(1.0, 1.0, 1.0);\n            shadow = 1.;\n        } else if(mat == 1) {\n            color = vec3(0.01, 0.01, 0.01);\n            shadow = 1.;\n        }\n        col = color*dif*occlusion;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}