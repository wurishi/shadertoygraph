{"ver":"0.1","info":{"id":"tdlGWr","date":"1545875130","viewed":371,"name":"Ylem","username":"nabr","description":"p r a c t i c e\ntwo raytraced overlapping planes one texture\n- - -\nmouse click enable full frame\nmouse click & drag horizontal for scale","likes":21,"published":1,"flags":64,"usePreview":0,"tags":["raytracing","raymarching","texture","generative","kaleidoskop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4ll3zN","filepath":"https://soundcloud.com/yawningmanofficial/digitalsmokesignal","previewfilepath":"https://soundcloud.com/yawningmanofficial/digitalsmokesignal","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/tdlGWr\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n// antialiasing change this to 1 if your pc slows down\n#define AA 2\n\n\n#define RR iResolution\n#define R(p, a) p = (cos(a) * (p) + sin(a) * vec2(p.y, -p.x))\n\n\nvec3 tex( in vec2 st) {\n    \n    float tm = iTime * 2.;\n    \n    // scale\n    float tmp = .45;\n    if(iMouse.z>= 0.001) tmp = -1.25/(RR.y/iMouse.y);\n    \n    // texure coords\n    st = (vec2(mod(0.001 - st * tmp, vec2(2.513, 2.513)))) - 1.256;\n   \n    vec3 rd = vec3(abs(st), -2.081), pt = vec3(0.0);\n    \n    // colors\n    lowp vec3 tmpc = vec3(0.0), finc = vec3(0.0), O = vec3(0.0);\n    \n    // surface\n    vec3 s = vec3(sin(tm + rd.y), 10. * cos(tm + rd.y) * .5 - .5, 200.);\n    \n    R(s.yz, tm * .0251);\n    R(s.zx, tm * .0521);\n  \n    \n    // -------- RAYMARCH \n    float t = 0.001, d = 0.0;\n  \n    for (float i = 0.; i <= 1.0; i += 0.08333) \n    {\n        \n        if (t > 8.0 && d > 0.1) break;\n        \n        // surface\n        if (sin(t) > 0.7)\n            rd = reflect(-rd, 0.5 * normalize(s * vec3(6.283186 * tan(pt.x * 3.141) * (125. - sin(tm)),0.6 * max(2.0, (cos(tm) - 55.) * sin((pt.y - tm * 0.1)) * RR.y),120.0 * max(-24.0, cos(tm) - 0.1001 * RR.y * tan(pt.y * 3.141)) - .1)));\n        \n        // formula\n        d = min(cos(pt.y), abs(pt.x) - 4.0);\n        d = ((sqrt((pt.y - d) * (pt.y - d) * 0.094) - 0.92) + min(abs(1.5 + 0.1 * sin(tm * 0.1 - pt.z * 0.2) - (cos(pt.y * 0.06) * 1.091 - cos(pt.x * 0.05))), length(pt) - 2.2));\n        \n        pt = vec3(pt.xy, pt.z * 1.66) + (rd * d);\n        \n        t = t + d;\n        \n    };\n    \n    // -------- shade    \n    O = vec3(0.31, 0.29, 0.28) + (d - 1.25) * 0.5 + t * 0.03 + t * vec3(0.2, 0.14, 0.12) * 0.255 * -(rd.x);\n    \n    tmpc = (O * vec3(1.185, 1.225, 1.251));\n    \n    if ((t < 8.25)) {\n        finc = clamp(((1.0 - O) / 0.5), 0.0, 1.0);\n        O = (O * (finc * (finc * (3.0 - (2.0 * finc)))));\n        tmpc = (tmpc + ((0.5 * fract((sin(dot(vec2((st.x * RR.y), 0.001), vec2(13., 79.))) * 43758.))) * O));\n        tmpc = (tmpc + ((0.4 * fract((sin(dot(vec2(st.y * RR.y), vec2(13., 79.))) * 43758.))) * O));\n    };\n        \n    O = clamp((tmpc / (2.5 - O)), 0.0, 1.0);\n    \n    \n    return pow(clamp((O * (O * (3.0 - (2.0 * O)))), 0.0, 1.0), vec3(0.245));\n\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    \n    vec3 col = vec3(0.);\n    \n    // planes\n    vec3 pl = vec3(0, 0, 3), \n         pn = normalize(vec3(0, 0, 1));\n    vec3 pl1 = vec3(0, 0, 2.901), \n         pn1 = normalize(vec3(0, 0, .1));\n\n    // antialiasing - https://www.shadertoy.com/view/tslGz7\n    // thx to IQ!\n    for (int jj = 0; jj < AA; jj++)\n        for (int ii = 0; ii < AA; ii++) {\n\n            vec2 q = fragCoord.xy + vec2(float(ii), float(jj)) / float(AA);\n            vec2 st = (2. * q - RR.xy) / min(RR.x, RR.y);\n\t\t\t\n            // frame\n             if(iMouse.z <= 0.0)\n            // if ((abs(st.x)) > 1.677 || abs(st.y) > .729) \n            \n            if ((abs(st.x)) > 1. || abs(st.y) > .749)     \n            {\n                fragColor = vec4(vec3(1.45 - max(abs(-st.y * .75), 0.)), 1.);\n                return;\n            };\n            \n            vec3 ray = normalize(vec3(st, 1.) - vec3(0., 0., -.1));\n            \n            // raytracing planes\n            float a = dot(-pl, pn), b = dot(pn, -ray), t = a / b;\n            float a1 = dot(-pl1, pn1), b1 = dot(pn1, -ray), t1 = a1 / b1;\n\t\t\t\n            // shade\n            (t1 > 0. || t > 0.) ?\n            col += pow(.5 * ((tex(ray.xy * t) + tex(ray.yx * 1.025 * t1))), vec3(1.35))\n                : col;\n        };\n            \n    col = col / float(AA * AA);\n    \n    fragColor.rgb = col;\n    fragColor.w = 1.0;\n}","name":"Image","description":"","type":"image"}]}