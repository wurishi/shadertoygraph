{"ver":"0.1","info":{"id":"7djyWc","date":"1644259274","viewed":439,"name":"Quadicube in 456 chars","username":"Xor","description":" Golf of [url=https://shadertoy.com/view/NsByWV]\"Quadicube\"[/url] by [url=https://www.shadertoy.com/user/panna_pudi]panna_pudi[/url]\n","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["quadtree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Golf of \"Quadicube\" by panna_pudi\n// https://shadertoy.com/view/NsByWV\n\n//<512 Chars playlist: shadertoy.com/playlist/N3SyzR\n\n//This version is 608 characters (57%) shorter!\n//FabriceNeyret2 saved 12 chars\n//coyote saved 7 chars\n\n//Square SDF\n#define S length(max(s, 0.)) + min(0., max(s.x, s.y))\n\nvoid mainImage( out vec4 O, vec2 I)\n{\n    vec2 m = iResolution.xy, //Shortened resolution\n         p = (I+I - m) / m.y, //Signed uv coordinates (-1 to +1)\n         u,q,s;\n    \n    float i = 1.,z = .2,b = i; //Zoom and border\n    \n    //Iterate through quadtree\n    for (m = (2. * iMouse.xy - m) / m.y; i++ < 15. && clamp(q,m-1./z,m) == q || abs(S)*z < 1.4; s = abs(u)-.35)\n    \n        z += z, //zoom\n        u = floor(p * z) / z, //cell coordinates\n        q = abs( (p - u) * z - .5 ), // distance to center\n        b = min( b, abs( max(q.x, q.y) - .5) / z ), //border\n        q = u, //Back to cell coordinates for mouse\n        u.x += .1, //Offset\n        O = cos(iTime * 1.26 + vec4(0,33,11,0)), //Rotating matrix\n        u += .16*O.wz, //Revolve\n        u *= mat2(O); //Rotate\n        \n    s = abs(p) - vec2(1.252, .944); //Border square\n    O = min(b/fwidth(p).xxxx*.7+.1,1.) + ceil(b=S); //Aprroximate AA and white background\n    O *= ceil(b*b-1e-4); //Black border\n}","name":"Image","description":"","type":"image"}]}