{"ver":"0.1","info":{"id":"MXK3WD","date":"1717684548","viewed":40,"name":"Raymarching Scene with shapes","username":"saxha","description":"Scene with shapes\nUse mouse to control directional light","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflection","light","shadows","shapes","scene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Parameters\n#define REFLECTIONS 1\n#define REFLECTION_ITERATIONS 2\n#define POINT_LIGHT\n#define MOVE_CAMERA\n\n// Define the structures\nstruct Camera {\n    vec3 position;\n    vec3 forward;\n    vec3 right;\n    vec3 up;\n    float fov;\n};\n\nstruct DirectionalLight {\n    vec3 direction;\n    vec3 color;\n};\n\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n};\n\nstruct Material {\n    vec3 color;\n};\n\nstruct Sphere {\n    vec3 position;\n    float radius;\n    Material material;\n};\n\nstruct Cube {\n    vec3 position;\n    vec3 size;\n    vec3 rotation;\n    Material material;\n};\n\nstruct Cylinder {\n    vec3 position;\n    float radius;\n    float height;\n    vec3 rotation;\n    Material material;\n};\n\n// Mouse\nvec2 mouse() {\n    vec2 m = iMouse.xy / iResolution.xy;\n    m -= 0.5;\n    m *= 5.;\n    return m;\n}\n\n// Rotation matrix around the Y axis\nmat3 rotateY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        c, 0.0, -s,\n        0.0, 1.0, 0.0,\n        s, 0.0, c\n    );\n}\n\n// Rotation matrix around the X axis\nmat3 rotateX(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c, s,\n        0.0, -s, c\n    );\n}\n\n// Rotation matrix around the Z axis\nmat3 rotateZ(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat3(\n        c, s, 0.0,\n        -s, c, 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\n// Combined rotation matrix\nmat3 rotateXYZ(vec3 rotation) {\n    return rotateX(rotation.x) * rotateY(rotation.y) * rotateZ(rotation.z);\n}\n\n// Distance functions for the shapes\nfloat sphereDist(Sphere s, vec3 p) {\n    return length(p - s.position) - s.radius;\n}\n\nfloat cubeDist(Cube c, vec3 p) {\n    vec3 localP = rotateXYZ(c.rotation) * (p - c.position);\n    vec3 d = abs(localP) - c.size;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat cylinderDist(Cylinder cyl, vec3 p) {\n    vec3 localP = rotateXYZ(cyl.rotation) * (p - cyl.position);\n    vec2 d = abs(vec2(length(localP.xz), localP.y)) - vec2(cyl.radius, cyl.height);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nstruct SceneHit {\n    Material material;\n    float dist;\n};\n\n// The main scene\n// Scene SDF function\nSceneHit sceneSDF(vec3 p) {\n    Sphere s = Sphere(vec3(0.0, sin(iTime) * 2.0, 0.0), 1.0, Material(vec3(1.0, 0.0, 0.0)));\n    Cube c = Cube(vec3(3.0, 0.7, 0.0), vec3(1.0), vec3(sin(iTime / 2.0) * 3.0, cos(iTime / 2.0) * 3.0, 0.0), Material(vec3(0.0, 1.0, 0.0)));\n    Cylinder cyl = Cylinder(vec3(0.0, -0.5, 2.0), 5.0, 0.1, vec3(-sin(iTime)/10., -cos(iTime), 0.0), Material(vec3(0.0, 0.0, 1.0)));\n    Cube c2 = Cube(vec3(-2.0, -0.0, -1.0), vec3(0.1, 2.,2.), vec3(0., 1., 0.), Material(vec3(0.5)));\n    \n    float dSphere = sphereDist(s, p);\n    float dCube = cubeDist(c, p);\n    float dCylinder = cylinderDist(cyl, p);\n    float dCube2 = cubeDist(c2, p);\n\n    float dist;\n    dist = min(dSphere, dCube);\n    dist = min(dist, dCylinder);\n    dist = min(dist, dCube2);\n\n    if (dist == dSphere) {\n        return SceneHit(s.material, dist);\n    } else if (dist == dCube) {\n        return SceneHit(c.material, dist);\n    } else if (dist == dCube2) {\n        return SceneHit(c2.material, dist);\n    } else {\n        return SceneHit(cyl.material, dist);\n    };\n}\n\n// Raymarching function\nvec3 rayDirection(float fov, vec2 size, vec2 fragCoord, mat3 camRotation) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fov) / 2.0);\n    vec3 direction = normalize(vec3(xy, -z));\n    return normalize(camRotation * direction);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float depth = 0.0;\n    for (int i = 0; i < 60; i++) {\n        vec3 p = ro + rd * depth;\n        float dist = sceneSDF(p).dist;\n        if (dist < 0.001) {\n            return depth;\n        }\n        depth += dist;\n    }\n    return -1.0; // Didn't hit anything\n}\n\n// Shading function\nvec3 getNormal(vec3 p) {\n    float d = sceneSDF(p).dist;\n    vec2 e = vec2(0.001, 0.0);\n    vec3 n = d - vec3(\n        sceneSDF(p - e.xyy).dist,\n        sceneSDF(p - e.yxy).dist,\n        sceneSDF(p - e.yyx).dist\n    );\n    return normalize(n);\n}\n\nfloat shadow(vec3 ro, vec3 rd, float tmin, float tmax) {\n    float res = 1.0;\n    float t = tmin;\n    for (int i = 0; i < 50; i++) {\n        float h = sceneSDF(ro + rd * t).dist;\n        if (h < 0.001) return 0.0;\n        res = min(res, 10.0 * h / t);\n        t += h;\n        if (t > tmax) break;\n    }\n    return res;\n}\n\nvec3 getDirectionalLight(DirectionalLight light, vec3 p, vec3 normal) {\n    vec3 lightDir = normalize(-light.direction);\n    float diff = max(dot(normal, lightDir), 0.0);\n    float sh = shadow(p + normal * 0.001, lightDir, 0.01, 10.0);\n    return light.color * diff * sh;\n}\n\nvec3 getPointLight(PointLight light, vec3 p, vec3 normal) {\n    vec3 lightDir = normalize(light.position - p);\n    float diff = max(dot(normal, lightDir), 0.0);\n    float distance = length(light.position - p);\n    float attenuation = light.intensity / (distance * distance);\n    float sh = shadow(p + normal * 0.01, lightDir, 0.1, distance);\n    return light.color * diff * sh * attenuation;\n}\n\nvec3 applyMaterial(Material material, vec3 lightColor) {\n    return material.color * lightColor;\n}\n\n// Iterative reflection function\nvec3 rayMarchReflect(vec3 ro, vec3 rd) {\n    vec3 color = vec3(0.0);\n    vec3 attenuation = vec3(1.0);\n\n    for (int i = 0; i < (REFLECTIONS == 1 ? REFLECTION_ITERATIONS : 1); i++) {\n        float t = rayMarch(ro, rd);\n        if (t > 0.0) {\n            vec3 p = ro + rd * t;\n            SceneHit hit = sceneSDF(p);\n            vec3 normal = getNormal(p);\n            vec2 mousePos = mouse();\n            vec3 light1 = getDirectionalLight(DirectionalLight(vec3(mousePos.x, -0.5, mousePos.y), vec3(1.0)), p, normal);\n            vec3 pointLight = getPointLight(PointLight(vec3(.0, .0, 2.0), vec3(.5), 40.0), p, normal);\n            #ifdef POINT_LIGHT\n                vec3 materialColor = applyMaterial(hit.material, light1 + pointLight);\n            #else \n                vec3 materialColor = applyMaterial(hit.material, light1);\n            #endif\n            color += attenuation * materialColor;\n            ro = p + normal * 0.001;\n            rd = reflect(rd, normal);\n            attenuation *= 0.5; // Diminish the reflection contribution\n        } else {\n            // Calculate sky gradient\n            float t_sky = 0.5 * (rd.y + 1.0); // Normalize y to range [0, 1]\n            vec3 skyColor = mix(vec3(0.0, 1.5, 1.0), vec3(.0, 1.0, 1.0), t_sky); // Blue to magenta gradient\n            color += attenuation * skyColor;\n            break;\n        }\n    }\n    return color;\n}\n\n// Main render function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Camera setup\n    float t = iTime;\n    t = sin(iTime) * 0.5 + 0.5;\n    \n    Camera cam;\n    #ifdef MOVE_CAMERA\n        cam.position = vec3(0.0, mix(10., 4.0, t), 6.0);\n        cam.forward = vec3(0.0, 0.0, -1.0);\n        cam.right = vec3(1.0, 0.0, 0.0);\n        cam.up = vec3(0.0, 1.0, 0.0);\n        cam.fov = 90.0;\n\n        mat3 camRotation = rotateY(cos(iTime)*.1) * rotateX(mix(-1.2, -0.4, t));\n    #else \n        cam.position = vec3(0.0, 3.6,13.0);\n        cam.forward = vec3(0.0, 0.0, -1.0);\n        cam.right = vec3(1.0, 0.0, 0.0);\n        cam.up = vec3(0.0, 1.0, 0.0);\n        cam.fov = 90.0;\n\n        mat3 camRotation = rotateY(0.) * rotateX(-0.3);\n    #endif\n\n    // Apply camera rotation to forward and right vectors\n    cam.forward = normalize(camRotation * cam.forward);\n    cam.right = normalize(camRotation * cam.right);\n    \n    vec3 ro = cam.position;\n    vec3 rd = rayDirection(cam.fov, iResolution.xy, fragCoord.xy, camRotation);\n\n    vec3 color = rayMarchReflect(ro, rd);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}