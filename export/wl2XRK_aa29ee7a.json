{"ver":"0.1","info":{"id":"wl2XRK","date":"1566470703","viewed":216,"name":"KIFS experiments","username":"rodgzilla","description":"Experiment with kaleidoscopic iterated function system.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\nfloat PI = acos(-1.);\n\nvec3 palette(float x) {\n  float wave = sin(3. * time) * 0.5 + 0.5;\n  vec3 p = vec3(1, 1, 1);\n  vec3 q = vec3(.3, .6, 1);\n  vec3 r = vec3(.3, .6, .3);\n  vec3 s = vec3(.9, .5, .3);\n  \n  return p + q * sin(2. * PI * (x * r + s));\n}\n\nmat2 rot2d(float a) {\n  float c = cos(a), s = sin(a);\n\n  return mat2(c, s, -s, c);\n}\n\nvec3 kifs(vec3 p, float s, float tf) {\n  float t = tf * time;\n\n  for (float i = 0.; i < 6.; i++) {\n    p.xy *= rot2d(t + i);\n    p.xz *= rot2d(t * 0.6 - i);\n    p = abs(p);\n    p -= s;\n    s *= 0.8 + .1 * sin(2.8 * time);\n  }\n\n  return p;\n}\n\nfloat map(vec3 p) {\n  float d = 10000.;\n\n\t\n  p.xy *= rot2d(sin(.3 * time) * p.z / 40.);\n  vec3 rep = vec3(20);\n  p = mod(p, rep) - 0.5 * rep;\n\n  vec3 pc = kifs(p, 1., .3);\n  vec3 pe = kifs(p, 1.05, .1);\n\n  d = min(d, length(pc) - 1.);\n  d = max(d, -(length(pe) - .8));\n\n  return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(0, 0, -20);\n    vec3 rd = normalize(vec3(uv, 1));\n\n    float d = 0.;\n    int i;\n    for (i = 0; i < 100; i++) {\n      vec3 p = ro + d * rd;\n      float ds = map(p);\n\n      if (ds < 0.01 || ds > 100.) {\n        break;\n      }\n\n      d += ds / 2.;\n    }\n    vec3 p = ro + d * rd;\n    vec2 e = vec2(0.01, 0);\n    vec3 n = normalize(map(p) - vec3(map(p - e.xyy), map(p - e.yxy), map(p - e.yyx)));\n    vec3 l = vec3(0, 0, -50);\n    float dif = dot(n, normalize(l - p));\n\n    vec3 col = vec3(dif * palette(p.z / 50.));\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}