{"ver":"0.1","info":{"id":"3t3XDB","date":"1584611625","viewed":110,"name":"Lifgraphique_1","username":"Michaela","description":"TP1","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["infographie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat sphere (vec3 c, float r, vec3 p)\n{\n \treturn length (p-c)-r;   \n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nfloat Union2 (float a, float b, float c)\n{\n \treturn min(Union(a,b),c);   \n}\n\n// Diff\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Diff(float a,float b)\n{\n    return max(a,-b);\n}\n\n// Intersec\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Intersec(float a,float b)\n{\n    return max(a,b);\n}\n\n// Intersec2\n// a : field function of left sub-tree\n// b : field function of right sub-tree\n// c : field function of left sub-tree\n// d : field function of right sub-tree\n// e : field function of left sub-tree\n// f : field function of right sub-tree\nfloat Intersec2 (float a, float b, float c, float d, float e, float f)\n{\n \treturn max (max (max (max (max (a,b),c),d),e),f);    \n}\n\n// CylindreAlpha\nfloat CylindreAlpha (vec3 a, vec3 u,float r, vec3 p)\n{\n    float l=dot((p-a),u);\n    return sqrt(dot((p-a),(p-a))-l*l)-r;\n}\n\n// Cylindre\nfloat Cylindre (vec3 a, vec3 b, float r, vec3 p)\n{\n    float fc = CylindreAlpha (a,(b-a)/length(b-a), r,p);\n    \n    float fa = Plane (p, (b-a)/length(b-a), a);\n    \n    float fb = Plane (p, -(b-a) /length (b-a), b);\n    \n    return Diff (fc, Union (fa, fb)); \n}\n\n// Boite\nfloat Boite ( vec3 p, vec3 a, vec3 b ) {\n      vec3 x = vec3(1.0, 0.0, 0.0);\n      vec3 y = vec3(0.0, 1.0, 0.0);\n      vec3 z = vec3(0.0, 0.0, 1.0);\n    \n    return Intersec2(\n        \n        Plane(p, -x, a),\n        Plane(p, -y, a),\n        Plane(p, -z, a),\n        Plane(p, x, b),\n        Plane(p, y, b),\n        Plane(p, z, b)\n    );\n}\n\n//Deplacement de l'objet\nvec3 Translate ( vec3 t, vec3 p ) {\n    return (p - t);\n}\n\n// rotation par rapport à l'axe x, selon un angle t\nvec3 Rotatex ( float t, vec3 p ) {\n    mat3 R = mat3(\n        1, 0, 0,\n        0, cos(t), -sin(t),\n        0, sin(t), cos(t)\n\n    );\n    return (p * R);\n}\n\n// rotation par rapport à l'axe y, selon un angle t\nvec3 Rotatey ( float t, vec3 p ) {\n    mat3 R = mat3(\n        cos(t), 0, -sin(t),\n        0, 1, 0,\n        sin(t), 0, cos(t)\n    );\n    return (p * R);\n}\n\n// rotation par rapport à l'axe z, selon un angle t\nvec3 Rotatez ( float t, vec3 p ) {\n    mat3 R = mat3(\n        cos(t), -sin(t), 0,\n        sin(t), cos(t), 0,\n        0, 0, 1\n    );\n    return (p * R);\n}\n\n// modifie la taille selon un vecteur t\nvec3 Scale ( vec3 t, vec3 p ) {\n    mat3 T = mat3(\n        1.0/t.x, 0, 0,\n        0, 1.0/t.y, 0,\n        0, 0, 1.0/t.z\n    );\n    return (p * T);\n}\n\n//Cone visible au sommet de la Coupole\nfloat sdCone(vec3 p, vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// Partie supérieure du Coupole ainsi que les cylindres croisés sur le coté\nfloat obj (vec3 p)\n{\n \tfloat a =Union (Union (Union( Union (Union (Diff (Diff (Diff (sphere (vec3 (-0.1,0.0,15.0),10.0,p),\n                    Boite (p, vec3 (-10.0,-10,0.0), vec3 (10.0,10.0,14.0))\n                    ),\n                    sphere (vec3 (-0.1,0.0,15.0),9.0,p)\n                    ),\n                    Boite (p, vec3 (-15.0,-15.0,18.0), vec3 (15.0,15.0,17.5))\n                    ),\n                    sdCone(Translate (vec3 (0.0,30.0,0.5),Rotatex (-1.55,p)), vec3 (1.0,1.0,3.5))\n                     ),\n                    Cylindre (vec3(0.0,0.0,20.0), vec3 (0.0,0.0,27.0), 1.0, p)\n                     ),\n                   Union2 (Cylindre (vec3(8.0,-5.0,1.0), vec3 (8.0,5.0,12.3), 1.0, p) ,\n                   \t\t   Cylindre (vec3(8.0,0.0,1.0), vec3 (8.0,0.0,12.3), 1.0, p), \n                           Cylindre (vec3(8.0,6.0,1.0), vec3 (8.0,-5.0,12.3), 1.0, p)\n                           )\n                   ),\n                   Union2 (Cylindre (vec3(-8.0,-5.0,1.0), vec3 (-8.0,5.0,12.3), 1.0, p) ,\n                   \t\t   Cylindre (vec3(-8.0,0.0,1.0), vec3 (-8.0,0.0,12.3), 1.0, p), \n                           Cylindre (vec3(-8.0,6.0,1.0), vec3 (-8.0,-5.0,12.3), 1.0, p)\n                           )\n                    ),\n                    Union2 (Cylindre (vec3(6.0,8.0,1.0), vec3 (-5.0,8.0,12.3), 1.0, p) ,\n                   \t\t   Cylindre (vec3(-5.0,8.0,1.0), vec3 (6.0,8.0,12.3), 1.0, p), \n                           Cylindre (vec3(0.0,8.0,1.0), vec3 (0.0,8.0,12.3), 1.0, p)\n                           )\n                    );\n    \n    return a;\n}\n\n//Escalier à l'entrée de la Coupole\nfloat esc (vec3 p)\n{\n\tfloat a = Diff (Union2 ( Boite (p, vec3 (-5.0,-15,0.0), vec3 (5.0,15.0,0.9)),\n                     Boite (p, vec3 (-7.0,-17,0.0), vec3 (7.0,17.0,0.6)),\n                       Boite (p, vec3 (-9.0,-19,0.0), vec3 (9.0,19.0,0.3))\n                      ),\n                    Boite (Translate (vec3 (0.0,25.0,1.0),p), vec3 (-16.0,-16.0,-1.0), vec3 (16.0,16.0,0.0))\n                     );       \n    return a;\n}\n\n//La partie inférieure de la Coupole contenant la boite au trésor avec un cercle dedans\nfloat construction (vec3 p)\n{\n    float v = Union (Union (obj (p),\n        (Union (Diff (Diff (Diff (Union (Union (Union (Union (Boite (p, vec3 (-10.0,-10.0,1.0), vec3 (10.0,10.0,2.0)),\n                     Boite (p, vec3 (-5.0,-5.0,3.5), vec3 (5.0,5.0,4.0))\n                     ),\n                     Boite (p, vec3 (-10.0,-10.0,12.0), vec3 (10.0,10.0,13.0))\n                     ),\n                     Union ( Union (Cylindre (vec3(-8.0,-8.0,0.0), vec3 (-8.0,-8.0,14.0), 1.0, p) ,\n                   \t\t\t  \t\tCylindre (vec3(8.0,-8.0,0.0), vec3 (8.0,-8.0,14.0), 1.0, p) ) \n                                   \n             \t\t,Union (Cylindre (vec3(-8.0,8.0,0.0), vec3 (-8.0,8.0,14.0), 1.0, p) ,\n                   \t\t\tCylindre (vec3(8.0,8.0,0.0), vec3 (8.0,8.0,14.0), 1.0, p) )\n                      )\n                     ),\n                      Boite (p, vec3 (-5.0,-5.0,4.5), vec3 (5.0,5.0,10.0))\n                     ),\n                      Boite (p, vec3 (-4.5,-4.5,5.0), vec3 (4.5,-4.5,9.5))\n                     ),\n                     Boite (p, vec3 (-5.0,-3.0,5.5), vec3 (5.0,3.0,8.5))\n                    ),\n                     Boite (p, vec3 (-3.0,-5.0,5.5), vec3 (3.0,5.0,8.5))\n                    ),\n                    sphere (vec3 (-0.1,-0.2,7.0),1.1,p)\n                )\n         )\n                    ),\n                     esc(p)\n                     );\n    \n               \n    \n    return v;\n}\n\n//Fonction qui forme la Coupole au Trésor en entier\n//Les valeurs saisies dans scale et ainsi que dans le vec3 ro de la fonction Ray du fichier Common sont modifiables pour bien\n//observer les contenus de la Coupole au Trésor et la cone au dessus de la Coupole\nfloat object(vec3 p)\n{\n   \n    float v = construction(Scale (vec3 (1.0,1.0,1.0),p));\n    \n    v = Union(v,Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,0.0)));\n    \n    return v;\n                \n}\n\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {ao+=1.0;}\n        else if (t>5.0)\n            {\n             ao+=1.0;   \n            }\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.452,0.551,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff = pow(0.5*(1.0+dot(n, l)),2.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n    vec3 c = 0.25+0.25*background(n);\n    c+=0.15*AmbientOcclusion(p+0.1*n,n,50)*vec3(1.0,1.0,1.0);\n    c+=0.35*Light(p,n)*vec3(1.0,1.0,1.0);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( in float seed, in vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(90.0,0.0,10.0); //(40.0,0.0,9.0) à l'initial\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n","name":"Common","description":"","type":"common"}]}