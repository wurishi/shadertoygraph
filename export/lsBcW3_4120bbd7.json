{"ver":"0.1","info":{"id":"lsBcW3","date":"1494029914","viewed":194,"name":"Generalized Trefoil","username":"JCDjcd","description":"Draw a generalized trefoil (p,q) where p and q are co-prime integers. The standard trefoil is (2,3).\nThe parameters (p,q) are changing every 3 seconds.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["trefoil"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//--------------------------------------------------------------------------\n#define TWOPI \t\t\t(2.0*3.1415926535)\n#define ROTATION(alpha) mat2(cos(alpha),-sin(alpha),sin(alpha),cos(alpha))\n#define COLORIZATION(h)\tclamp(abs(fract(h+vec4(3.0,2.0,1.0,0.0)/3.0)*6.0-3.0)-1.0,0.0,1.0)\n\n//--------------------------------------------------------------------------\nvec3 trefoil_point(float p,float q,float phi)\n{\n    float cp = cos(p*phi);\n    float sp = sin(p*phi);\n    float cq = cos(q*phi);\n    float sq = sin(q*phi);\n    return vec3((2.0+cq)*cp,(2.0+cq)*sp,-sq);\n} // trefoil_point()\n\n//--------------------------------------------------------------------------\n// treefoil (p,q)\n// ray is defined by point P and direction d\nvec4 compute(in float p,in float q,in vec3 P, in vec3 d)\n{\n    d = d/dot(d,d);\n    int \ti;\n    int \tnb \t\t= 1000;\n    float \tt_min \t= 1000.0;\n    float   phi_min;\n    float \tr2 \t\t= 0.2; // radius of the torus\n    for(i=0;i<nb;i++)\n    {\n        float phi \t= TWOPI*float(i)/float(nb);\n        vec3  A \t= trefoil_point(p,q,phi);\n        float t \t= -dot(P-A,d);\n        vec3  M \t= P+t*d;\n        vec3  diff \t= M-A;\n        if(t > 0.0 && t < t_min && dot(diff,diff) < r2)\n        {\n            t_min \t= t;\n            phi_min = phi;\n        }\n    } // for()\n    \n    if(t_min < 1000.0)\n    {\n     \treturn COLORIZATION(phi_min/TWOPI);\n    }\n    else\n    {\n\t\treturn vec4(0.0,0.0,0.0,1.0);\n    }\n} // compute()\n\n//--------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor,vec2 fragCoord)\n{\n    float m \t\t= min(iResolution.x,iResolution.y);\n    if(fragCoord.x >= m || fragCoord.y >= m)\n    {\n        // in order to speed up the computation,\n        // directly put in black the pixels outside\n        // the square m x m\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n\tvec2 uv \t\t= (fragCoord.xy / m - vec2(0.5,0.5))*10.0;\n    vec3 P \t\t\t= vec3(uv,-5.0);\n    vec3 d      \t= vec3(0.0,0.0,1.0);\n    float alpha1\t= iTime*TWOPI/13.0;\n    float alpha2\t= iTime*TWOPI/5.0;\n    P.zx\t\t   *= ROTATION(alpha1);\n    P.xy\t\t   *= ROTATION(alpha2);\n    d.zx \t\t   *= ROTATION(alpha1);\n    d.xy\t\t   *= ROTATION(alpha2);\n    \n    float i = mod(iTime/3.0 /* change every 3 seconds */,16.0);\n    float p,q;\n    if(i <= 1.0) \t\t{p=2.0;q=3.0;}\n    else if(i <= 2.0)\t{p=2.0;q=5.0;}\n    else if(i <= 3.0)\t{p=2.0;q=7.0;}\n    else if(i <= 4.0)\t{p=3.0;q=2.0;}\n    else if(i <= 5.0)\t{p=3.0;q=4.0;}\n    else if(i <= 6.0)\t{p=3.0;q=5.0;}\n    else if(i <= 7.0)\t{p=3.0;q=7.0;}\n    else if(i <= 8.0)\t{p=4.0;q=3.0;}\n    else if(i <= 9.0)\t{p=4.0;q=5.0;}\n    else if(i <= 10.0)\t{p=4.0;q=7.0;}\n    else if(i <= 11.0)\t{p=5.0;q=2.0;}\n    else if(i <= 12.0)\t{p=5.0;q=3.0;}\n    else if(i <= 13.0)\t{p=5.0;q=4.0;}\n    else if(i <= 14.0)\t{p=5.0;q=6.0;}\n    else if(i <= 15.0)\t{p=5.0;q=7.0;}\n\telse\t\t\t\t{p=6.0;q=5.0;}\n        \n    fragColor = compute(p,q,P,d);\n} // mainImage()\n\n","name":"Image","description":"","type":"image"}]}