{"ver":"0.1","info":{"id":"4tjXWt","date":"1631303626","viewed":139,"name":"Simple Concrete Material","username":"jt","description":"A procedural material that is supposed to look like concrete (based on perlin resp. simplex noise), using iq's ray-marcher &  candycats' noise lab.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","simplex","material","concrete"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/4tjXWt\n// Simple Concrete Material, 2021 by jt\n// (using iq's raymarching & candycat' noises)\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n#define MOD3 vec3(.1031,.11369,.13787)\n//#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n    p3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n\n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n\n    return  mix(\n                mix(\n                    mix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))),\n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))),\n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                        w.x),\n                    w.z),\n                mix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))),\n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))),\n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                        w.x),\n                    w.z),\n                w.y);\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.2;\n}\n\nfloat sphere(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nfloat box(vec3 p)\n{\n    vec3 d = abs(p) - 1.0;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box2(vec3 p)\n{\n    //return min(box(p),(abs(p.x+p.y+p.z)-1.0)/3.0);\n    //return max(box(p),(abs(p.x+p.y+p.z)-1.0)/3.0); // clip top & floor\n    return max(box(p),((p.x+p.y+p.z)-1.0)/3.0); // clip only one side\n}\n\nfloat cylinder( vec3 p )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(1,1);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat map(vec3 p)\n{\n    return min(min(box(p+vec3(+1.0,0.0,0.0)), cylinder(p+vec3(-1.0,0.0,0.0))), halfspace(p));\n    //return min(min(box(p+vec3(+1.0,0.0,0.0)), sphere(p+vec3(-1.0,0.0,0.0))), halfspace(p));\n    //return box(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 material(vec3 p)\n{\n    vec3 color = vec3(0.0);\n    vec3 color0 = mix(vec3(0.45), vec3(0.55), simplex_noise(p*vec3(20.0, 20.0, 1.0)));\n    //vec3 color0 = mix(vec3(0.4), vec3(0.6), perlin_noise(p*vec3(20.0, 20.0, 1.0)));\n    vec3 color1 = mix(vec3(0.4), vec3(0.6), simplex_noise(p*vec3(50.0, 50.0, 50.0)));\n    //vec3 color1 = mix(vec3(0.4), vec3(0.6), perlin_noise(p*vec3(50.0, 50.0, 50.0)));\n    color = mix(color0, color1, 0.75);\n    return color;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 6.28 * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 6.28 * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi / 2.0;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n    \n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX ); // XXX artifacts on cylinder XXX\n    //brightness *= softshadow(ro+rd*dist,lightdir, 0.01, DIST_MAX, 2. ); // artifacts on cylinder almost invisible with low \n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.1), vec3(material(dst)), step(-1.0, dst.z));\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}