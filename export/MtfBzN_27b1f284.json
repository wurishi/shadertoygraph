{"ver":"0.1","info":{"id":"MtfBzN","date":"1511172172","viewed":162,"name":"2D noise comparison","username":"FlorentTournade","description":"most if not all noises here are from iq --- iMouse.y controls frequency - Note that the more octaves, the less quality difference between methods\n\n\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noisecomparison"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//Most of this code is from IQ\n//Some code also from https://www.shadertoy.com/view/MllSzX\n\n//Use this define to profile each noise performance separately\n#define SOLO_NOISE -1\n//0 texture based value noise (bilinear interp.)\n//1 texture based value noise (bicubic interp.)\n//2 gradient perlin noise\n//3 simplex noise\n//4 voronoise\n\n//set a high value here to test performance\n#define OCTAVES 1\n\nvec2 hash2( vec2 p ) \n{  \t\t\t\t\t\t\n\tp = vec2(dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)));\n    \n\treturn -1.0 + 2.0 * fract(sin(p + 20.0) * 53758.5453123);\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\t\t\t\t   \n\treturn fract(sin(q)*43758.5453);\n}\n\n\n\nfloat PerlinGradientNoise(in vec2 p)\n{\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n    \n    //grid points\n    vec2 p0 = vec2(0.0, 0.0);\n    vec2 p1 = vec2(1.0, 0.0);\n    vec2 p2 = vec2(0.0, 1.0);\n    vec2 p3 = vec2(1.0, 1.0);\n    \n    //distance vectors to each grid point\n    vec2 s0 = f - p0;\n    vec2 s1 = f - p1;\n    vec2 s2 = f - p2;\n    vec2 s3 = f - p3;\n    \n    //random gradient vectors on each grid point\n    vec2 g0 = hash2(i + p0);\n    vec2 g1 = hash2(i + p1);\n    vec2 g2 = hash2(i + p2);\n    vec2 g3 = hash2(i + p3);\n    \n    //gradient values\n    float q0 = dot(s0, g0);\n    float q1 = dot(s1, g1);\n    float q2 = dot(s2, g2);\n    float q3 = dot(s3, g3);\n    \n    //interpolant weights\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    //bilinear interpolation\n    float l0 = mix(q0, q1, u.x);\n    float l1 = mix(q2, q3, u.x);\n    float l2 = mix(l0, l1, u.y);\n    \n    return l2;\n}\n\nfloat SimplexNoise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash2(i+0.0)), dot(b,hash2(i+o)), dot(c,hash2(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\n\nfloat Voronoise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\n\nfloat Remap( float _f, float _min, float _max )\n{\n    return (_f - _min)/ (_max - _min);\n}\n\n// w0, w1, w2, and w3 are the four cubic B-spline basis functions\nfloat w0(float a)\n{\n    return (1.0/6.0)*(a*(a*(-a + 3.0) - 3.0) + 1.0);\n}\n\nfloat w1(float a)\n{\n    return (1.0/6.0)*(a*a*(3.0*a - 6.0) + 4.0);\n}\n\nfloat w2(float a)\n{\n    return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0);\n}\n\nfloat w3(float a)\n{\n    return (1.0/6.0)*(a*a*a);\n}\n\n// g0 and g1 are the two amplitude functions\nfloat g0(float a)\n{\n    return w0(a) + w1(a);\n}\n\nfloat g1(float a)\n{\n    return w2(a) + w3(a);\n}\n\n// h0 and h1 are the two offset functions\nfloat h0(float a)\n{\n    return -1.0 + w1(a) / (w0(a) + w1(a));\n}\n\nfloat h1(float a)\n{\n    return 1.0 + w3(a) / (w2(a) + w3(a));\n}\n\nvec4 texture_bicubic(sampler2D tex, vec2 uv, vec4 texelSize)\n{\n\tuv = uv*texelSize.zw + 0.5;\n\tvec2 iuv = floor( uv );\n\tvec2 fuv = fract( uv );\n\n    float g0x = g0(fuv.x);\n    float g1x = g1(fuv.x);\n    float h0x = h0(fuv.x);\n    float h1x = h1(fuv.x);\n    float h0y = h0(fuv.y);\n    float h1y = h1(fuv.y);\n\n\tvec2 p0 = (vec2(iuv.x + h0x, iuv.y + h0y) - 0.5) * texelSize.xy;\n\tvec2 p1 = (vec2(iuv.x + h1x, iuv.y + h0y) - 0.5) * texelSize.xy;\n\tvec2 p2 = (vec2(iuv.x + h0x, iuv.y + h1y) - 0.5) * texelSize.xy;\n\tvec2 p3 = (vec2(iuv.x + h1x, iuv.y + h1y) - 0.5) * texelSize.xy;\n\t\n    return g0(fuv.y) * (g0x * texture(tex, p0)  +\n                        g1x * texture(tex, p1)) +\n           g1(fuv.y) * (g0x * texture(tex, p2)  +\n                        g1x * texture(tex, p3));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xx;\n\n   // vec2 p = 0.5 - 0.5*sin( iTime*vec2(1.01,1.71) );\n\n    float freq = iMouse.y * 0.4;\n    \n    float s;\n\tfloat f = 0.0;\n\n    #if OCTAVES == 1\n    \tfloat amplitude = 1.0;\n\t#else\n    \tfloat amplitude = 0.5;\n    #endif\n    \n   \n    for( int i=0 ; i < OCTAVES ; ++i )\n    {\n    #if SOLO_NOISE < 0\n        if( uv.x < 0.2 )\n        {\n            s = texture( iChannel0, uv * freq * 0.025 ).x;\n        }\n        else if( uv.x < 0.4 )\n        {\n            vec4 texelSize = vec4( 1.0 / iChannelResolution[0].xy,  iChannelResolution[0].xy); \n\n            s = texture_bicubic( iChannel0, uv * freq * 0.03, texelSize ).x;\n            s = Remap( s, 0.1, 0.9 );\n        }    \n        else if( uv.x < 0.6 )\n        {\n            s = PerlinGradientNoise( uv * freq );\n            s = Remap( s, -0.6, 0.6 );\n        }\n        else if (uv.x < 0.8 )\n        {\n            s = SimplexNoise( uv * freq * 0.6 );\n            s = Remap( s, -0.9, 0.9 );\n        }\n        else\n        {\n            s = Voronoise( uv * freq * 2.0, 1.0, 1.0 );\n        }\n\n    #else\n        #if SOLO_NOISE == 0\n            s = texture( iChannel0, uv * freq * 0.025 ).x;\n        #elif SOLO_NOISE == 1\n            vec4 texelSize = vec4( 1.0 / iChannelResolution[0].xy,  iChannelResolution[0].xy); \n\n            s = texture_bicubic( iChannel0, uv * freq * 0.03, texelSize ).x;\n            s = Remap( s, 0.1, 0.9 );\n        #elif SOLO_NOISE == 2\n            s = PerlinGradientNoise( uv * freq );\n            s = Remap( s, -0.6, 0.6 );\n        #elif SOLO_NOISE == 3\n            s = SimplexNoise( uv * freq * 0.6 );\n            s = Remap( s, -0.9, 0.9 );\n        #elif SOLO_NOISE == 4\n            s = Voronoise( uv * freq * 2.0, 1.0, 1.0 );\n        #endif\n   \t#endif\n\n        f += s * amplitude;\n        \n        freq *= 2.0;\n        amplitude *= 0.5;\n    }\n    \n\tfragColor = vec4( f, f, f, 1.0 );\n}","name":"Image","description":"","type":"image"}]}