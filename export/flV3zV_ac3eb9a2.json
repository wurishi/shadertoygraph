{"ver":"0.1","info":{"id":"flV3zV","date":"1638021361","viewed":249,"name":"Sine hash, large arguments","username":"mla","description":"A typical sine-based hash function, on left doing a 2pi wrap before calling sin, on the right, leaving it up to the sin function. Both Nvidia and Intel show substantially worse hashing in the unwrapped case for inputs > 1000 or so.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"ltyBWm","parentname":"sine hash"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(in vec2 uv, bool domod)\n{\n    float PI = 3.14159265;\n    float modval = 2.0*PI;\n    modval = 1.23456789;\n    float seed = dot(uv, vec2(12.9898, 78.233));\n    if (domod) seed = mod(seed,modval);\n    return fract(43758.5453*sin(seed));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(hash(pow(10.0,mod(iTime,20.0))*uv,uv.x < 0.5));    \n}","name":"Image","description":"","type":"image"}]}