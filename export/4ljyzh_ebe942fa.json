{"ver":"0.1","info":{"id":"4ljyzh","date":"1507422835","viewed":128,"name":"2 Layer Reveal","username":"anonguy","description":"It reveals what is under one blurred layer with a sharpened layer. Possible to change image processing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["assignment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Originally by Nikos Papadopoulos, 4rknova / 2015\n//Heavily modified by Dr. Sajid Farooq, 2016\n//Partially modified by Austin Laimos and Quincy Buchanan, 2017\n//Heavily modified again by Austin Laimos, 2017\n\nconst float radius = .1;\n\nmat3 blur = mat3(\n \t0.111, 0.111, 0.111,\n \t0.111, 0.111, 0.111,\n \t0.111, 0.111, 0.111\n);\n\nmat3 sharpen = mat3(\n \t0., -1, 0.,\n \t-1, 5, -1,\n \t0., -1, 0.\n);\n\nmat3 emboss = mat3(\n    2., 1., 0.,\n    1., 0., -1.,\n    0., -1., -2.\n);\n\nmat3 edgeDetection = mat3(\n    0., 1., 0.,\n    1., -4, 1.,\n    0., 1., 0.\n);\n\nmat3 gaussianBlur = (1./16.) * mat3(\n    1., 2., 1.,\n    2., 4., 2.,\n    1., 2., 1.\n);\n\n//Was fooling around with image processing and made this. Called it side processing because it doesnt process the sides.\nmat3 sideProcessing = mat3(\n    5, -10, 5,\n\t0, 1, 0,\n    5, -10, 5\n);\n\n//I've created a num variable to pass in different layers\nvec3 aSample(const int x, const int y, in vec2 fragCoord, int num){\n \tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n \tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n \tif(num == 1) return texture(iChannel0, uv).xyz;\n    if(num == 2) return texture(iChannel1, uv).xyz;\n}\n\n//Num variable exists here as well\nvec3 aFilter(in vec2 fragCoord, mat3 kernel, int num){\n    vec3 sum;\n    for(int i = 0; i < 3; i++){\n        for(int c = 0; c< 3; c++){\n            sum += aSample(i-1, c-1, fragCoord, num) * kernel[i][c];\n        }\n    }\n\treturn sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x; //Adjust uv\n    \n    vec2 normalMouse = iMouse.xy / iResolution.xy; //Normalize mouse\n    normalMouse.y *= iResolution.y / iResolution.x; //Adjust mouse to match uv\n    \n    vec2 fc = fragCoord.xy;\n    \n    vec3 cf = aFilter(fc, blur, 1);\n    //vec3 cf = aFilter(fc, emboss, 1);\n    //vec3 cf = aFilter(fc, edgeDetection, 1);\n    //vec3 cf = aFilter(fc, gaussianBlur, 1);\n    //vec3 cf = aFilter(fc, sideProcessing, 1);\n    \n    vec3 cf2 = aFilter(fc, sharpen, 2);\n    //vec3 cf2 = aFilter(fc, emboss, 2);\n    //vec3 cf2 = aFilter(fc, edgeDetection, 2);\n    //vec3 cf2 = aFilter(fc, gaussianBlur, 2);\n    //vec3 cf2 = aFilter(fc, sideProcessing, 2);\n\n    vec4 lowerLayer = vec4(cf2,step(length(normalMouse - uv), radius));\n    vec4 composite = mix(vec4(cf, 1), lowerLayer, lowerLayer.a);\n    fragColor = composite;\n}","name":"Image","description":"","type":"image"}]}