{"ver":"0.1","info":{"id":"M3SfRR","date":"1729100989","viewed":81,"name":"See u soon","username":"veeluminati","description":"portals","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    // Radius declared earlier to avoid redefinition\n    // Removed duplicate radius declaration\n    uv.x *= iResolution.x / iResolution.y;\n\n    float time = iTime * 0.2;\n\n    // 3D Tunnel effect\n        // Add wobble effect to outer bands\n    uv.x += 0.05 * sin(uv.y * 5.0 + time * 2.0) * smoothstep(0.5, 1.0, length(uv));\n    uv.y += 0.05 * cos(uv.x * 5.0 + time * 2.0) * smoothstep(0.5, 1.0, length(uv));\n    uv.y += 0.05 * cos(uv.x * 5.0 + time * 2.0) * smoothstep(0.5, 1.0, length(uv));\n\n    // 3D Tunnel effect\n        // Calculate radius once here\n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x);\n    float depth = 1.0 / (radius + 0.5);\n\n    // Tunnel animation with dynamic wave\n    float wave = sin(radius * 15.0 - time * 7.0) * 0.5 + 0.5;\n    float tunnel = sin(radius * 10.0 - time * 5.0 + wave * 3.0) * 0.5 + 0.5;\n\n    // Color palette with enhanced dynamic range and varied rays\n    vec3 color = vec3(0.5 + 0.5 * sin(angle + time * 2.0), 0.5 + 0.5 * cos(radius * 4.0 - time * 1.5), 0.7 + 0.3 * sin(time));\n    color += vec3(0.3 * cos(angle * 2.0 - time * 1.0), 0.3 * sin(radius * 3.0 + time * 2.0), 0.2 * cos(angle + radius * 2.0));\n    color *= tunnel;\n\n    // Add variation to the tunnel rays using sin and cos functions\n    float rayVariation = 0.3 + 0.2 * sin(radius * 8.0 + time * 3.0) * cos(angle * 4.0 - time * 2.0);\n    color += rayVariation * vec3(0.8, 0.6, 1.0);\n\n    // Apply depth effect with exponential falloff\n    color *= pow(depth, 1.5);\n\n    // Add glowing rings to enhance the tunnel\n    float ring = smoothstep(0.02, 0.03, sin(radius * 25.0 - time * 12.0));\n    color += vec3(1.0, 0.8, 0.3) * ring;\n\n    // Add subtle noise for texture\n    float noise = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n    color += noise * 0.05;\n\n    // Add a subtle pulsating effect for the entire tunnel\n    float pulse = 0.9 + 0.1 * sin(time * 3.0);\n    color *= pulse;\n\n    // Darken the edges to give a sense of being inside\n    color *= smoothstep(1.5, 1.0, radius);\n\n    // Add hexagonal network in the dark areas with fractal coloring\n    vec3 background = vec3(0.1, 0.1, 0.1);\n    vec2 hexUV = uv;\n    hexUV.x += hexUV.y * 0.57735; // Offset for hexagonal tiling\n    hexUV *= 100.0; // Increase grid density for smaller hexagons\n    vec2 hex = abs(fract(hexUV) - 0.5);\n    float hexPattern = step(0.3, 0.35 - dot(hex, vec2(1.0, 0.57735)));\n    background += vec3(0.1, 0.1, 0.2) * hexPattern * (1.0 - smoothstep(0.8, 1.5, radius));\n\n    // Add more intricate fractal effect in the background\n    float fractal = sin(uv.x * 20.0 + sin(time * 2.0)) * cos(uv.y * 20.0 + cos(time * 1.5));\n    background += vec3(0.2, 0.2, 0.3) * fractal * 0.1;\n\n    // Add connecting lines to form a cohesive network with smaller grid\n    vec2 gridUV = uv * 100.0;\n    float gridLineX = smoothstep(0.002, 0.005, abs(sin(gridUV.x + time * 0.8)));\n    float gridLineY = smoothstep(0.002, 0.005, abs(sin(gridUV.y + time * 0.8)));\n    background += vec3(0.15, 0.15, 0.25) * (gridLineX + gridLineY) * (1.0 - smoothstep(0.8, 1.5, radius));\n\n    // Combine tunnel and background\n    color = mix(background, color, smoothstep(0.0, 0.8, tunnel));\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}