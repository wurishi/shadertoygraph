{"ver":"0.1","info":{"id":"tdBfWW","date":"1615545807","viewed":119,"name":"gpu renderer","username":"zhengxiangkui","description":"barycentric rasterizer and gpu renderer","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["barycentric","renderer","gpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct VerInfo{\n    vec3 v1;\n    vec3 v2;\n    vec3 v3;\n    vec2 p;\n    vec2 uv1;\n    vec2 uv2;\n    vec2 uv3;\n};\n\nvec3 frag_color = vec3(0.,0.,0.);\n\nconst vec3 vertices[6] = vec3[6](vec3(-0.4, 0.,0.),\n    \t\t\t\t\t\t\tvec3(0.4,0.,0.),\n                              \tvec3(-0.3, 0.45, 0.),\n                                vec3(0.42,0.,0.),\n                              \tvec3(-0.3, 0.46, 0.),\n                              \tvec3(0.5, 0.5, 0.)\n                             );\n\nconst vec2 uvs[6] = vec2[6](vec2(0.,0.),\n                            vec2(1.,0.),\n                            vec2(0.,1.),\n                            vec2(0.,1.),\n                            vec2(1.,0.),\n                            vec2(1.,1.)\n\t\t\t\t\t\t\t);\n\nconst int indices[6] = int[6](0,1,2,\n                              4,3,5\n                                 );\n\n\nvec2 getBary(vec3 v1, vec3 v2, vec3 v3, vec3 p) {\n\tvec3 v12 = v2 - v1;\n    vec3 v13 = v3 - v1;\n    vec3 pv1 = v1 - p;\n    \n    vec3 c1 = vec3(v12.x, v13.x, pv1.x);\n    vec3 c2 = vec3(v12.y, v13.y, pv1.y);\n    \n    vec3 u = cross(c1, c2);\n    return vec2(u.x/u.z, u.y/u.z);\n}\n\nvoid triangle(VerInfo verInfo) {\n\tvec3 v1 = verInfo.v1;\n    vec3 v2 = verInfo.v2;\n\tvec3 v3 = verInfo.v3;\n    vec3 p = vec3(verInfo.p.x, verInfo.p.y, 0.);\n    vec2 bary = getBary(v1,v2,v3,p);\n    if(bary.x >= 0. && bary.y >= 0. && (bary.x + bary.y)<=1.) {\n        vec2 uv = (1.-(bary.x+bary.y))*verInfo.uv1 + bary.x*verInfo.uv2 + bary.y*verInfo.uv3;\n    \tfrag_color += texture(iChannel1, uv).xyz;\n    }\n}\n\nvoid drawModel(vec2 p) {\n    for(int i = 0; i < 6; i+=3) {\n    \tvec3 v1 = vertices[indices[i]];\n        vec3 v2 = vertices[indices[i+1]];\n        vec3 v3 = vertices[indices[i+2]];\n        \n        vec2 uv1 = uvs[indices[i]];\n        vec2 uv2 = uvs[indices[i+1]];\n        vec2 uv3 = uvs[indices[i+2]];\n        VerInfo verInfo = VerInfo(v1,v2,v3,p,uv1,uv2,uv3);\n        triangle(verInfo);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv *=2.;\n    uv.x *= iResolution.x/iResolution.y;\n    drawModel(uv);\n    \n    // Output to screen\n    fragColor = vec4(frag_color, 1.);\n}","name":"Image","description":"","type":"image"}]}