{"ver":"0.1","info":{"id":"4fcBRH","date":"1732681257","viewed":63,"name":"mandelexp 2","username":"pb","description":"color and iteration cycling","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot","exponentialfunction"],"hasliked":0,"parentid":"4XjBzK","parentname":"spirals^n"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// philip.bertani@gmail.com\n\nvoid mainImage0( out vec4 O, vec2 u )\n{\n    vec2  R =  iResolution.xy, z,\n          U = ( u+u - R )/ R.y / 200.;\n    float i = 0., inf=1e12;\n\n    U  += vec2(-2.59,.6);  \n    vec4 cc = vec4(0);\n    for ( O *= 0. ; i++ < 50.+(mod(iTime*200.,400.)) && dot(z,z) < inf ; ) {\n    \n        z = mix( \n            min(exp(z.x),1e12) * vec2( cos(z.y), sin(z.y) ), // exp(z)\n            mat2(z,-z.y,z.x) * z,                           // zÂ²\n            .35 )\n            + U;\n          \n        //thanks FabriceNeyret2 for reducing a nasty\n        //if block to this one line\n        cc[ int(z.x<0.)*2 + int(z.y<0.) ]++;          \n    }\n    \n\n    float tt = floor(mod(iTime/2.,1000.));\n    if (dot(z,z) > inf) {\n        O = sin( \n                vec4(cc.x+cc.y,cc.z+cc.w,cc.w+cc.y,0)*\n                //cc.wzyx*\n                12.*vec4(2,3,5,0)*\n                vec4(sin(tt/7.),\n                     sin(tt/11.+1.),\n                     sin(tt/13.+2.),\n                     0)/i  );\n\n    }\n    \n    O *= O;\n\n}\n\n//FabriceNeyret2 antialiasing trick\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n        //O.b++;                        // uncomment to see where the oversampling occurs\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}