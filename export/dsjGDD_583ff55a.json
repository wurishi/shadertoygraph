{"ver":"0.1","info":{"id":"dsjGDD","date":"1667641870","viewed":198,"name":"20221105_Octree Grid Traversal","username":"0b5vr","description":"explaining the octree grid traversal I use way too often","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","octree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (c) 2022 0b5vr, MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * hash function\n */\nuvec3 pcg3d( uvec3 s ) {\n  s = s * 1145141919u + 1919810u;\n  s.x += s.y * s.z;\n  s.y += s.z * s.x;\n  s.z += s.x * s.y;\n  s ^= s >> 16;\n  s.x += s.y * s.z;\n  s.y += s.z * s.x;\n  s.z += s.x * s.y;\n  return s;\n}\n\n/**\n * pcg3d but float\n */\nvec3 pcg3df( vec3 s ) {\n  uvec3 r = pcg3d( floatBitsToUint( s ) );\n  return vec3( r ) / float( 0xffffffffu );\n}\n\n/**\n * A function to generate a vec2 on a unit circle\n * Can be used for many purposes\n */\nvec2 cis( float t ) {\n  return vec2( cos( t ), sin( t ) );\n}\n\nstruct SubdivResult {\n  vec3 size;\n  vec3 cell;\n  vec3 hash;\n};\n\n/**\n * Return the grid cell information the given point belongs to.\n */\nSubdivResult subdivision( vec3 p ) {\n  SubdivResult result;\n  \n  // the initial size of a cell, it randomly halves\n  result.size = vec3( 0.5 );\n  \n  for ( int i = 0; i < 5; i ++ ) {\n    // where is the center of the cell?\n    result.cell = ( floor( p / result.size ) + 0.5 ) * result.size;\n    \n    // calculate a random hash for each cell\n    result.hash = pcg3df( result.cell );\n    \n    // should we subdiv more? (the condition uses the random hash)\n    if ( i == 4 || result.hash.x < 0.5 ) {\n      break; // no\n    } else {\n      result.size *= 0.5; // yeah, halve the size and do this again\n    }\n  }\n  \n  return result;\n}\n\nstruct GridResult {\n  SubdivResult subdiv;\n  float d;\n};\n\n/**\n * Return the grid cell information the ray currently belongs to\n * and a distance to the boundary of the cell.\n */\nGridResult gridTraversal( vec3 ro, vec3 rd ) {\n  GridResult result;\n\n  // get the info of the current grid cell\n  // slightly pushing the ray position forward to see the next cell\n  result.subdiv = subdivision( ro + rd * 1E-3 );\n\n  // calculate the distance to the boundary\n  // It's basically a backface only cube intersection\n  // See the iq shader: https://www.shadertoy.com/view/ld23DV\n  vec3 src = -( ro - result.subdiv.cell ) / rd;\n  vec3 dst = abs( 0.5 * result.subdiv.size / rd );\n  vec3 bv = src + dst;\n  result.d = min( min( bv.x, bv.y ), bv.z );\n  \n  return result;\n}\n\n/**\n * Draw a ray\n */\nvoid drawRay( vec2 p, vec2 rd, vec3 color, inout vec3 target ) {\n  float h = max( 0.0, dot( p, rd ) / dot( rd, rd ) );\n  float shapeLine = smoothstep( 0.01, 0.0, length( p - rd * h ) );\n\n  float shapeCircle = smoothstep( 0.01, 0.0, abs( length( p ) - 0.03 ) );\n\n  target = mix( target, color, max( shapeLine, shapeCircle ) );\n}\n\n/**\n * Draw a dot\n */\nvoid drawDot( vec2 p, vec3 color, inout vec3 target ) {\n  float shape = smoothstep( 0.01, 0.0, length( p ) - 0.01 );\n\n  target = mix( target, color, shape );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n  vec2 p = uv * 2.0 - 1.0;\n  p.x *= iResolution.x / iResolution.y;\n  \n  float z = 0.3;\n  \n  vec3 col = vec3( 0.0 );\n  \n  // fill the cell at the pixel\n  {\n    SubdivResult subdiv = subdivision( vec3( p, z ) );\n    col = subdiv.hash;\n  }\n  \n  // prepare a ray\n  vec3 ro = vec3( 0.9 * cis( 0.1 * iTime ), z );\n  vec3 rd = vec3( -cis( 0.1 * iTime + sin( 0.3 * iTime ) ), 0.0 );\n  \n  // draw a ray\n  {\n    drawRay( p - ro.xy, rd.xy, vec3( 1.0, 0.0, 0.0 ), col );\n  }\n  \n  // traverse\n  vec3 rp = ro;\n  GridResult grid;\n  \n  for ( int i = 0; i < 100; i ++ ) {\n    grid = gridTraversal( rp, rd );\n    rp += rd * grid.d;\n    \n    drawDot( p - rp.xy, vec3( 1.0, 1.0, 0.0 ), col );\n  }\n\n  fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}