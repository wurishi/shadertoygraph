{"ver":"0.1","info":{"id":"tstBDl","date":"1606320900","viewed":378,"name":"Fisheye Equidistant","username":"crucifer","description":"Fisheye Equidistant","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fisheye","equidistant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Fisheye Equidistant\n//r_u = f*tan(r_d/f)\n\nconst float f =1.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.*fragCoord/iResolution.xy-vec2(1);\n    float scale = f*atan(1./f);\n    float r_d = length(uv) * scale;\n    float r_u = f*tan(r_d/f);\n    float phi = atan(uv.y,uv.x);\n    uv = vec2(r_u*cos(phi)+1., r_u*sin(phi)+1.)/2.;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);  \n}","name":"Image","description":"","type":"image"}]}