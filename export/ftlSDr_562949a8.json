{"ver":"0.1","info":{"id":"ftlSDr","date":"1625481727","viewed":155,"name":"Flag of Macedonia","username":"jjovanovski","description":"Macedonian flag.\n\nInspired by The Art Of Code's video: https://www.youtube.com/watch?v=t4XnK50ocMk","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["flag","macedonian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nvec3 RED = vec3(210.0/255.0, 0.0, 0.0);\nvec3 YELLOW = vec3(255.0/255.0, 231.0/255.0, 0.0);\n\nvec3 drawCircle (vec2 uv, vec2 pos, float radius, vec3 color)\n{\n    float d = length(uv - pos);\n    float white = smoothstep(radius, radius - 0.002, d);\n    vec3 result = color * vec3(white);\n    \n    return result;\n}\n\nvec3 drawTriangle (vec2 uv, vec2 pos, vec2 scale, vec3 color)\n{\n    int N = 3;\n    \n    vec2 sUv = pos + uv / scale;\n    \n    float a = atan(sUv.x, sUv.y) + PI;\n    float r = TWO_PI / float(N);\n    float d = cos(floor(0.5 + a / r) * r - a) * length(sUv);\n    \n    return vec3(smoothstep(0.21, 0.190, d)) * color;\n}\n\nvec3 drawRay (vec2 uv, vec2 pos, vec2 scale, float angle, vec3 color)\n{\n    uv *= mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n\n    vec2 tUv = uv + pos;\n    tUv /= scale;\n    \n    vec3 circle = drawCircle(tUv, vec2(0, 0), 0.04, color);\n    vec3 triangle = drawTriangle(tUv, vec2(0.0, -0.2), vec2(0.115, 0.8), color);\n    vec3 area = vec3(1) * smoothstep(0.0, length(color) - 0.005, length(circle + triangle));\n    vec3 col = area * color; \n    \n    return col;\n}\n\nvec3 drawSun (vec2 uv)\n{\n    vec3 col = vec3(0);\n\n    // draw sun circle\n    col += drawCircle(uv, vec2(0.0, 0.0), 0.055, YELLOW);\n    \n    // draw major rays\n    for (float angle = 0.0; angle < 2.0; angle += 0.25)\n    {\n        col += drawRay(uv, vec2(0.0, -0.1), vec2(0.6), PI * angle, YELLOW);\n    }\n    \n    // draw minor rays\n    for (float angle = 0.0; angle < 2.0; angle += 0.25)\n    {\n        col += drawRay(uv, vec2(0.0, -0.15), vec2(0.4, 0.5), PI * (angle + 0.125), YELLOW);\n    }\n    \n    return col;\n}\n\nvec3 rect(vec2 uv, vec2 pos, float width, float height, vec3 color) {\n\tfloat t = 0.0;\n\tif ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\tt = 1.0;\n\t}\n\treturn color * t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // center the uv coordinates\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float t = uv.x * 7.0 - iTime * 2.0 + uv.y * 4.0;\n    uv.y += sin(t) * 0.025;\n\n    vec3 col = rect(uv, vec2(0), 1.0 * iResolution.x / iResolution.y, 1.0, RED);\n    col += drawSun(uv);\n    \n    float shadow = 0.15;\n    col *= (1.15 - shadow) + cos(t) * shadow;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}