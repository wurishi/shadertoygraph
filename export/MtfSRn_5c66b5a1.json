{"ver":"0.1","info":{"id":"MtfSRn","date":"1433967910","viewed":1308,"name":"Broken Pixelsort 2","username":"vladstorm","description":"Didnt work again but at least I managed to make moustache for Britney ","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["distort","glitch","broken","pixelsort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//by Vladimir Storm\n//https://twitter.com/vladstorm_\n\n#define SFT -1.\n\nfloat hash(float x) {\n\treturn fract(sin(dot(vec2(x,x) ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat hash2(vec2 p){\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nfloat gray(vec3 c){\n    return (c.r+c.g+c.b)/3.;\n}\n\nvec3 gray3(vec3 c){\n    return vec3(gray(c));\n}\n\nfloat bm_diff(float color_top, float color_bottom){\n    return abs( color_top - color_bottom );\n}\n\n//max... ?\nvec3 bm_max(vec3 c1, vec3 c2){\n    return ( gray(c1) > gray(c2) ) ? c1 : c2 ;\n}\n\n\n\nvec3 dry(vec2 p) {\n\n    return texture(iChannel0, \n                     vec2((p.x+.5)/iResolution.x, \n                          (p.y+.5)/iResolution.y)\n                    ).rgb;\n}\n\nbool odd(float x){ return (mod(x, 2.0) < 1.0); }\n\nvec3 prev(vec2 p) {\n    \n    if( p.x>=iResolution.x || p.y>=iResolution.y) \treturn vec3(1.);\n    if( p.x<0. || p.y<0.) \t\t\t\t\t\t\treturn vec3(0.);    \n    return texture(iChannel0, (p+.5)/iResolution.xy).rgb;    \n    \n}\n//    return texture(iChannel0,vec2((p.x+.5)/iResolution.x, (p.y+.5)/iResolution.y)).rgb;\n\n//color value\nfloat cv(vec3 c){ return c.r+c.g+c.b; }\n\n//condition i - iteration\nbool cnd(vec2 p, float i){\n    \n    return odd(p.x) || odd(i+1.) ;    \n\n}\n\n\nvec3 compare(vec3 c1, vec3 c2, vec2 p, float i){\n    if(odd(p.x) ^^ odd(i) ) \n       // return (cv(c1) > cv(c2)) ? c2:  bm_max(c1, vec3(hash(c1.x)));\n\t   // return (cv(c1) > cv(c2)) ? c2:   vec3( bm_diff(hash(c1.x), c1.x) );\n\t    return (cv(c1) > cv(c2)) ? c2:   vec3( hash(c1.x) );\n\telse \n        return (cv(c1) > cv(c2)) ? c1: c2;\n}\nvec3 sort0(vec2 p){\n  vec3 c1 = prev(p), c2 = prev(p +vec2( SFT, 0.) );\n  return compare(c1, c2, p, 0.);      \n}\nvec3 sort1(vec2 p){\n  vec3 c1 = sort0(p), c2 = sort0(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 1.);      \n}\nvec3 sort2(vec2 p){\n  vec3 c1 = sort1(p), c2 = sort1(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 2.);      \n}\nvec3 sort3(vec2 p){\n  vec3 c1 = sort2(p), c2 = sort2(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 3.);      \n}\nvec3 sort4(vec2 p){\n  vec3 c1 = sort3(p), c2 = sort3(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 4.);      \n}\nvec3 sort5(vec2 p){\n  vec3 c1 = sort4(p), c2 = sort4(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 5.);      \n}\nvec3 sort6(vec2 p){\n  vec3 c1 = sort5(p), c2 = sort5(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 6.);      \n}\nvec3 sort7(vec2 p){\n  vec3 c1 = sort6(p), c2 = sort6(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 7.);      \n}\nvec3 sort8(vec2 p){\n  vec3 c1 = sort7(p), c2 = sort7(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 8.);      \n}\nvec3 sort9(vec2 p){\n  vec3 c1 = sort8(p), c2 = sort8(p+vec2( SFT, 0.) );\n  return compare(c1, c2, p, 9.);      \n}\n\nvec3 compare_h(vec3 c1, vec3 c2, vec2 p, float i){\n    if(odd(p.y) ^^ odd(i) ) \n       // return (cv(c1) > cv(c2)) ? c2:  bm_max(c1, vec3(hash(c1.x)));\n\t   // return (cv(c1) > cv(c2)) ? c2:   vec3( bm_diff(hash(c1.x), c1.x) );\n\t    return (cv(c1) > cv(c2)) ? c2:   vec3( hash(cv(c1)) ); //hash(cv(c1)) gray(c1)\n\telse \n        return (cv(c1) > cv(c2)) ? c1: c2;\n}\nvec3 sort0h(vec2 p){\n    \n  return vec3(\n    compare_h(prev(p),  prev(p +vec2( 0., SFT*1.)) , p, 0.).x,      \n    compare_h(prev(p),  prev(p +vec2( 0., SFT*2.)) , p, 0.).y,      \n    compare_h(prev(p),  prev(p +vec2( 0., SFT*3.)) , p, 0.).z      \n  );\n}\nvec3 sort1h(vec2 p){\n  \n  return vec3(\n    compare_h(sort0h(p), sort0h(p+vec2( 0., SFT*1.) ), p, 1.).x,      \n    compare_h(sort0h(p), sort0h(p+vec2( 0., SFT*2.) ), p, 1.).y,      \n    compare_h(sort0h(p), sort0h(p+vec2( 0., SFT*3.) ), p, 1.).z      \n  );\n}\nvec3 sort2h(vec2 p){\n  \n  return vec3(\n    compare_h(sort1h(p), sort1h(p+vec2( 0., SFT*1.) ), p, 2.).x,      \n    compare_h(sort1h(p), sort1h(p+vec2( 0., SFT*2.) ), p, 2.).y,      \n    compare_h(sort1h(p), sort1h(p+vec2( 0., SFT*3.) ), p, 2.).z      \n  );\n}\nvec3 sort3h(vec2 p){\n  \n  return vec3(\n    compare_h(sort2h(p), sort2h(p+vec2( 0., SFT*1.) ), p, 3.).x,      \n    compare_h(sort2h(p), sort2h(p+vec2( 0., SFT*2.) ), p, 3.).y,      \n    compare_h(sort2h(p), sort2h(p+vec2( 0., SFT*3.) ), p, 3.).z      \n  );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\n    vec2 p = vec2(floor(fragCoord.x),floor(fragCoord.y));\n     //vec2 p = fragCoord.xy;\n    \n    \n    vec3 c = sort1h(p);//prev3\n    fragColor = vec4(c, 1.0);\n}","name":"","description":"","type":"image"}]}