{"ver":"0.1","info":{"id":"llK3Wm","date":"1475055124","viewed":19098,"name":"Font: Bitmap vs SDF","username":"MichaelPohoreski","description":"Bitmap vs Signed Distance Field\nHeader 1:1 res, Bottom 1:20\nLeft-to-Right: Bitmap Nearest Neighbor, Bitmap Linear, SDF \"as-is\", SDF smoothstep(0.5,0.5), 1/fwidth()\nInstructions: Click & Drag X to change smoothstep() of middle SDF glyph, Y to change gamma","likes":84,"published":1,"flags":32,"usePreview":0,"tags":["sdf","bitmap","font","signeddistancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n   Signed Distance Field (SDF) Font Rendering Comparison\n   By: Michaelangel007\n   Created: Sept. 28, 2016\n   Last updated: Jan. 11, 2022, v2.5\n   (Updated implementation for Alternative Rendering)\n\nReferences:\n\nWhitepapers\n* https://github.com/Michaelangel007/game_dev_pdfs/blob/master/graphics/signed_distance_field/SIGGRAPH2007_AlphaTestedMagnification.pdf\n* https://dspace.cvut.cz/bitstream/handle/10467/62770/F8-DP-2015-Chlumsky-Viktor-thesis.pdf\n\nIntroduction\n* https://forum.libcinder.org/topic/signed-distance-field-font-rendering\n\nAdvanced (Sharp Corners)\n* http://computergraphics.stackexchange.com/questions/306/sharp-corners-with-signed-distance-fields-fonts\n* https://github.com/Chlumsky/msdfgen\n\nLibs\n* https://github.com/libgdx/libgdx/wiki/Distance-field-fonts\n* https://github.com/behdad/glyphy\n* https://groups.google.com/forum/#!forum/glyphy\n\nAlternative Rendering\n\n* https://medium.com/@evanwallace/easy-scalable-text-rendering-on-the-gpu-c3f4d782c5ac#.z5mtsrx99\n\"Easy Scalable Text Rendering on the GPU\"\nImplementation: XOR Triangles -> \"Invert\" Stencil Buffer -> Additive Blending 1/255.\n\n* http://jcgt.org/published/0002/01/04/paper.pdf\n\"Higher Quality 2D Text Rendering\"\nImplementation: Texture Atlas\n\nContour Textures (Stefan Gustavson)\n* http://contourtextures.wikidot.com/\n\nfwidth()\n* https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives\n* https://github.com/KhronosGroup/WebGL/blob/master/sdk/tests/conformance/ogles/GL2ExtensionTests/fwidth/fwidth_frag.frag\n* http://computergraphics.stackexchange.com/questions/61/what-is-fwidth-and-how-does-it-work\n\nPartial Derivaites\n* http://www.essentialmath.com/blog/?p=151&cpage=1\n\nSDF Textures\n\n* Otavio Good \n  * https://www.shadertoy.com/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png\n\n* msdfgen\n  32x32 SDF monochrome / achromatic\n  * https://cloud.githubusercontent.com/assets/18639794/14770361/251a4406-0a70-11e6-95a7-e30e235ac729.png\n\n  16x16 SDF monochrome\n  * https://cloud.githubusercontent.com/assets/18639794/14770360/20c51156-0a70-11e6-8f03-ed7632d07997.png\n\n  16x16 SDF polychrome / chromatic \n  * https://cloud.githubusercontent.com/assets/18639794/14770355/14cda9f8-0a70-11e6-8346-2bd14b5b832f.png\n\n\nHistory:\n   2.4 Added SDF Texture Links\n   2.3 Added Viktor Chlumsky's link \"Shape Decomposition for Multi-channel Distance Fields\"\n   2.2 Added paulhoux's SDF func() as SMOOTH_2, changed optimized to SMOOTH_3\n   2.1 Changed default smoothstep() from 1/3,2/3 to 1/2,1/2\n   2.0 Added reference links\n   1.9 Change default gamma to 1.0 for extra contrast.\n   1.8 Center 1:1 images in their respective sides\n   1.7 Darken SDF background\n   1.6 Added note about smoothstep() sharp / blurry params\n   1.5 Changed foreground color to be sky blue to emphasize correct blending. (Thanks FabriceNeyret2)\n   1.4 Cleanup instructions and unused vars\n   1.3 Change default gamma to 2.0\n   1.2 Cleanup blending background / foreground\n   1.1 Add hold mouse button and Y = gamma between 1.0 and 2.5\n   1.0 Initial\n*/\n\n//#define SMOOTH_1 // version 1 of sharpening\n\n// paulhoux's version: float w = fwidth( d ); a = smoothstep( 0.5 - w, 0.5 + w, d );\n//#define SMOOTH_2 \n\n// optimized (1) aa:   float v = s / fwidth( s ); a = clamp( v + 0.5, 0.0, 1.0 );\n#define SMOOTH_3 \n\n// Glyph Width\n#define GLYPH_W 7.0\n#define GLYPH_H GLYPH_W\n\nvec4 glyph( vec2 p, int iChannel )\n{\n    vec4 back  = vec4( .1, .2, .5, 1.0 ); // Royal Blue background color\n\n    float scale = (2.25 * 16.0) / iResolution.x;\n\n    if (iChannel >= 2 )\n    {\n        scale *= 2.0; // 16x16 same area as 8x8\n        back *= 0.5; // darken SDF background so it is more obvious\n    }\n    \n    p *= scale;\n    p /= iResolution.xy;\n    \n    float d;\n    float a;\n    \n    if (iChannel == 0)\n        a = texture( iChannel0, p ).a;\n    if (iChannel == 1)\n        a = texture( iChannel1, p ).a;\n    if (iChannel == 2)\n        a = texture( iChannel2, p ).a;\n    if (iChannel == 3)\n    {\n        d = texture( iChannel2, p ).a;\n        \n        // w = 0.0 Sharp\n        // w = 0.5 Blury\n        //float w = 0.5 - 1.0/3.0; // 0.5 - (0.5-1/3) = 0.333, 0.5+(0.5-1/3) = 0.666\n        float w = 0.0; // 0.5, 0.5\n        if (iMouse.z > 0.0)\n            w = (iMouse.x / iResolution.x)*0.5; // [0,1] -> [0.0,0.5]\n\n        a = smoothstep( 0.5 - w, 0.5 + w, d ); // smoothstep() is slightly blurry\n    }\n    if (iChannel == 4) // sharper\n    {\n               d = texture( iChannel2, p ).a;\n        float  s = d - 0.5;\n        float _2 = 0.70710678118; // SQRT2_DIV_2\n\n#ifdef SMOOTH_1\n        float  dx = dFdx( s );\n        float  dy = dFdy( s );\n        float  g  = _2 * length( vec2( dx, dy ) );     \n        a  = smoothstep( -g, g, s );\n#endif\n        \n#ifdef SMOOTH_2\n        // paulhoux's version: float w = fwidth( d ); a = smoothstep( 0.5 - w, 0.5 + w, d );\n        float w = fwidth( d );\n        a = smoothstep( 0.5 - w, 0.5 + w, d );\n#endif\n        \n#ifdef SMOOTH_3\n        // optimized (1) aa:   float v = s / fwidth( s ); a = clamp( v + 0.5, 0.0, 1.0 );\n        // Does anyone know where this comes from?\n        // Detheroc mentioned it in http://computergraphics.stackexchange.com/questions/306/sharp-corners-with-signed-distance-fields-fonts\n        float v = s / fwidth( s );\n        a = clamp( v + 0.5, 0.0, 1.0 );\n#endif\n    }\n    \n    vec4 fore  = vec4( 0., .5, 1., 1.0 ); // Sky Blue\n    vec4 color = mix( back, fore, a );\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord;\n    p.y = iResolution.y - p.y; // Move texture origin from bottom left to top right\n    vec2 uv    = p / iResolution.xy;\n\n    float scale = iResolution.x / (2.25 * 16.0);\n    float edge  = scale * GLYPH_W;\n    float r1    = 1.0 * edge;\n    float r2    = 2.0 * edge;\n    float r3    = 3.0 * edge;\n    float r4    = 4.0 * edge;\n    float r5    = 5.0 * edge;\n    \n    float headerH = max( GLYPH_H, 16.0 ); // SDF is 16x16\n\n    if (p.y <= headerH)\n    {\n        vec4 c;\n\n        if (p.x > r2) // iResolution.x*0.5) // SDF \"A\" 1:1\n        {\n            // Center in right side\n            p.x -= r2;\n            p.x -= (r5 - r2)*0.5;\n            p /= iResolution.xy;\n            c = texture( iChannel2, p );\n        }\n        else\n        if (p.x > 0.0) // Bitmap \"A\" 1:1\n        {\n            // Center in left side\n            p.x -= (r2 * 0.5);\n            p /= iResolution.xy;\n            c = texture( iChannel0, p );\n        }\n        fragColor = c;  \n    }\n    else\n    {\n        p.y -= headerH; // top header row has 1:1 glyph\n\n        if (p.x < r1)\n        {\n            fragColor = glyph( p, 0 ); // Nearest  \n        }\n        else\n        if (p.x < r2)\n        {\n            p.x -= r1;\n            fragColor = glyph( p, 1 ); // Bilinear\n        }\n        else\n        if (p.x < r3)\n        {\n            p.x -= r2;\n            fragColor = glyph( p, 2 ); // SDF Bilinear\n        }\n        else\n        if (p.x < r4)\n        {\n            p.x -= r3;\n            fragColor = glyph( p, 3 ); // SDF smoothstep\n        }\n        else\n        if (p.x < r5)\n        {\n            p.x -= r4;\n            fragColor = glyph( p, 4 );  // SDF partial derivative via fwidth()\n        }\n    }\n\n    float gamma = 1.0;\n    if (iMouse.z > 1.0 )\n        gamma = 1.0 + 1.5*((iMouse.y / iResolution.y )); // [0,1] = [1.0,2.5]\n\n    fragColor.rgb = pow( fragColor.rgb, vec3( 1.0/gamma ) );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Bitmap A - Nearest Neighbor\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n/* Apple ][ 5x7 but shifted 1 px right since texture clamping\n\n    \"A\"\n     84210000\n     00008421\n    +--------+\n    |...1....| 20 -> 10\n    |..1.1...| 50 -> 28\n    |.1...1..| 88 -> 44\n    |.1...1..| 88 -> 44\n    |.11111..| F8 -> 7C\n    |.1...1..| 88 -> 44\n    |.1...1..| 88 -> 44\n    |........| 00 -> 00\n    +--------+\n*/   \n    float p; \n    int   x, y;\n    int   u, v;\n    \n    u = int( fragCoord.x );\n    v = int( fragCoord.y );\n\n    #define _ 1.0\n    \n    float c = 0.0; // Black or no background\n\n    if (v == 0)\n    {\n        if (u == 3)\n            c = _;\n    }\n    else\n    if (v == 1)\n    {\n        if (u == 2 || u == 4)\n            c = _;\n    }\n    else\n    if (v == 2 || v == 3)\n    {\n        if (u == 1 || u == 5)\n            c = _;\n    }\n    else\n    if (v == 4)\n    {\n        if (u >= 1 && u <= 5)\n            c = _;\n    }\n    else\n    if (v >= 5 && v <= 6)\n    {\n        if (u == 1 || u == 5)\n            c = _;\n    }\n        \n    fragColor = vec4( c );\n }\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Bitmap A - Bilinear Filter\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n/* Apple ][ 5x7 but shifted 1 px right since texture clamping\n\n    \"A\"\n     84210000\n     00008421\n    +--------+\n    |...1....| 20 -> 10\n    |..1.1...| 50 -> 28\n    |.1...1..| 88 -> 44\n    |.1...1..| 88 -> 44\n    |.11111..| F8 -> 7C\n    |.1...1..| 88 -> 44\n    |.1...1..| 88 -> 44\n    |........| 00 -> 00\n    +--------+\n*/   \n    float p; \n    int   x, y;\n    int   u, v;\n    \n    u = int( fragCoord.x );\n    v = int( fragCoord.y );\n\n    #define _ 1.0\n    \n    float c = 0.0; // Black or no background\n\n    if (v == 0)\n    {\n        if (u == 3)\n            c = _;\n    }\n    else\n    if (v == 1)\n    {\n        if (u == 2 || u == 4)\n            c = _;\n    }\n    else\n    if (v == 2 || v == 3)\n    {\n        if (u == 1 || u == 5)\n            c = _;\n    }\n    else\n    if (v == 4)\n    {\n        if (u >= 1 && u <= 5)\n            c = _;\n    }\n    else\n    if (v >= 5 && v <= 6)\n    {\n        if (u == 1 || u == 5)\n            c = _;\n    }\n        \n    fragColor = vec4( c );\n }\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// SDF \"A\"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float p; \n    int   x, y;\n    int   u, v;\n    \n    u = int( fragCoord.x );\n    v = int( fragCoord.y );\n\n    #define _ 1.0\n    \n    float g = 0.0;\n    float c = 0.0; // Black or no background\n\n#if 0\n// 8x8\n    if (v == 0)\n    {\n        if (u == 3) g =  84.0;\n        if (u == 4) g =  74.0;\n    }\n    if (v == 1)\n    {\n        if (u == 2) g =  79.0;\n        if (u == 3) g = 255.0;\n        if (u == 4) g = 183.0;\n    }\n    if (v == 2)\n    {\n        if (u == 2) g = 173.0;\n        if (u == 3) g = 166.0;\n        if (u == 4) g = 255.0;\n    }\n    if (v == 3)\n    {\n        if (u == 2) g = 250.0;\n        if (u == 3) g =  77.0;\n        if (u == 4) g = 211.0;\n        if (u == 5) g = 140.0;\n    }\n    if (v == 4)\n    {\n        if (u == 1) g = 122.0;\n        if (u == 2) g = 239.0;\n        if (u == 3) g = 177.0;\n        if (u == 4) g = 177.0;\n        if (u == 5) g = 224.0;\n    }\n    if (v == 5)\n    {\n        if (u == 1) g = 207.0;\n        if (u == 2) g = 144.0;\n        if (u == 3) g = 121.0;\n        if (u == 4) g = 122.0;\n        if (u == 5) g = 255.0;\n        if (u == 6) g =  91.0;\n    }\n    if (v == 6)\n    {\n        if (u == 0) g =  65.0;\n        if (u == 1) g = 207.0;\n        if (u == 5) g = 182.0;\n        if (u == 6) g = 185.0;\n    }\n#else\n    \n// 16x16\n    // SDF \"A\" from\n    // https://github.com/Chlumsky/msdfgen\n    // https://cloud.githubusercontent.com/assets/18639794/14770360/20c51156-0a70-11e6-8f03-ed7632d07997.png\n    if (v == 1)\n    {\n        if (u == 6) g = 81.0;\n        if (u == 7) g = 84.0;\n        if (u == 8) g = 85.0;\n        if (u == 9) g = 75.0;\n    }   \n    if (v == 2)\n    {\n        if (u == 6) g = 154.0;\n        if (u == 7) g = 207.0;\n        if (u == 8) g = 207.0;\n        if (u == 9) g = 140.0;\n    }   \n    if (v == 3)\n    {\n        if (u == 5) g =  79.0;\n        if (u == 6) g = 196.0;\n        if (u == 7) g = 255.0;\n        if (u == 8) g = 255.0;\n        if (u == 9) g = 183.0;\n        if (u ==10) g =  64.0;\n    }\n    if (v == 4)\n    {\n        if (u == 5) g = 129.0;\n        if (u == 6) g = 234.0;\n        if (u == 7) g = 206.0;\n        if (u == 8) g = 223.0;\n        if (u == 9) g = 224.0;\n        if (u ==10) g = 117.0;\n    }\n    if (v == 5)\n    {\n        if (u == 4) g =  47.0;\n        if (u == 5) g = 173.0;\n        if (u == 6) g = 255.0;\n        if (u == 7) g = 166.0;\n        if (u == 8) g = 185.0; // SDF lack of precision, should be 48x48\n        if (u == 9) g = 255.0;\n        if (u ==10) g = 162.0;\n        if (u ==11) g =  32.0;\n    }\n    if (v == 6)\n    {\n        if (u == 4) g = 102.0;\n        if (u == 5) g = 212.0;\n        if (u == 6) g = 230.0;\n        if (u == 7) g = 124.0;\n        if (u == 8) g = 144.0;\n        if (u == 9) g = 248.0;\n        if (u ==10) g = 204.0;\n        if (u ==11) g =  91.0;\n    }\n    if (v == 7)\n    {\n        if (u == 4) g = 148.0;\n        if (u == 5) g = 250.0;\n        if (u == 6) g = 194.0;\n        if (u == 7) g =  77.0;\n        if (u == 8) g =  99.0;\n        if (u == 9) g = 211.0;\n        if (u ==10) g = 243.0;\n        if (u ==11) g = 140.0;\n    }\n    if (v == 8)\n    {\n        if (u == 3) g =  72.0;\n        if (u == 4) g = 190.0;\n        if (u == 5) g = 250.0;\n        if (u == 6) g = 155.0;\n        if (u == 7) g =  42.0;\n        if (u == 8) g =  45.0;\n        if (u == 9) g = 173.0;\n        if (u ==10) g = 255.0;\n        if (u ==11) g = 184.0;\n        if (u ==12) g =  64.0;\n    }\n    if (v == 9)\n    {\n        if (u == 3) g = 122.0;\n        if (u == 4) g = 228.0;\n        if (u == 5) g = 239.0;\n        if (u == 6) g = 177.0;\n        if (u == 7) g = 177.0;\n        if (u == 8) g = 177.0;\n        if (u == 9) g = 177.0;\n        if (u ==10) g = 254.0;\n        if (u ==11) g = 224.0;\n        if (u ==12) g = 116.0;\n    }\n    if (v == 10)\n    {\n        if (u == 3) g = 37.0;\n        if (u == 3) g = 166.0;\n        if (u == 4) g = 255.0;\n        if (u == 5) g = 234.0;\n        if (u == 6) g = 235.0;\n        if (u == 7) g = 235.0;\n        if (u == 8) g = 235.0;\n        if (u == 9) g = 235.0;\n        if (u ==10) g = 235.0;\n        if (u ==11) g = 255.0;\n        if (u ==12) g = 163.0;\n        if (u ==13) g =  32.0;\n    }\n    if (v == 11)\n    {\n        if (u == 2) g =  95.0;\n        if (u == 3) g = 207.0;\n        if (u == 4) g = 246.0;\n        if (u == 5) g = 144.0;\n        if (u == 6) g = 122.0;\n        if (u == 7) g = 121.0;\n        if (u == 8) g = 121.0;\n        if (u == 9) g = 122.0;\n        if (u ==10) g = 158.0;\n        if (u ==11) g = 255.0;\n        if (u ==12) g = 204.0;\n        if (u ==13) g =  91.0;\n    }\n    if (v == 12)\n    {\n        if (u == 2) g = 143.0;\n        if (u == 3) g = 245.0;\n        if (u == 4) g = 212.0;\n        if (u == 5) g = 100.0;\n\n        if (u ==10) g = 113.0;\n        if (u ==11) g = 221.0;\n        if (u ==12) g = 243.0;\n        if (u ==13) g = 141.0;\n    }\n    if (v == 13)\n    {\n        if (u == 1) g =  65.0;\n        if (u == 2) g = 185.0;\n        if (u == 3) g = 207.0;\n        if (u == 4) g = 174.0;\n        if (u == 5) g =  47.0;\n\n        if (u ==10) g =  60.0;\n        if (u ==11) g = 182.0;\n        if (u ==12) g = 207.0;\n        if (u ==13) g = 184.0;\n        if (u ==14) g =  64.0;\n    }\n    if (v == 14)\n    {\n        if (u == 1) g =  55.0;\n        if (u == 2) g =  84.0;\n        if (u == 3) g =  85.0;\n        if (u == 4) g =  84.0;\n\n        if (u ==11) g =  85.0;\n        if (u ==12) g =  84.0;\n        if (u ==13) g =  85.0;\n        if (u ==14) g =  44.0;\n    }\n#endif\n    \n    c = g / 255.0;\n    fragColor = vec4( c );\n}","name":"Buffer C","description":"","type":"buffer"}]}