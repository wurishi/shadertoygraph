{"ver":"0.1","info":{"id":"X3dSRS","date":"1719217181","viewed":44,"name":"Rotated Geometry","username":"valvw","description":"Rotated Geometry","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","geometry","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// create rotation matrix\nmat2 rotate(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\n// create box signed distance field\nfloat boxSDF(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\n//  create sphere signed distance field\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// create a repeating pattern\nvec3 repeat(vec3 p, float c) {\n    return mod(p, c) - 0.5 * c;\n}\n\n//  combine signed distance fields\nfloat unionSDF(float d1, float d2) {\n    return min(d1, d2);\n}\n\n// Main distance\nfloat map(vec3 p) {\n    // Repeat the space to create a grid pattern\n    vec3 rp = repeat(p, 3.0);\n    \n    // Rotate the pattern over time\n    rp.xy *= rotate(iTime);\n    rp.xz *= rotate(iTime * 0.5);\n    \n    //  shapes\n    float d = boxSDF(rp, vec3(0.5, 0.5, 0.5));\n    d = unionSDF(d, sphereSDF(rp - vec3(1.0, 0.0, 0.0), 0.5));\n    d = unionSDF(d, sphereSDF(rp - vec3(-1.0, 0.0, 0.0), 0.5));\n    \n    return d;\n}\n\n// compute normal at point p\nvec3 getNormal(vec3 p) {\n    float eps = 0.001;\n    vec3 n = vec3(\n        map(p + vec3(eps, 0.0, 0.0)) - map(p - vec3(eps, 0.0, 0.0)),\n        map(p + vec3(0.0, eps, 0.0)) - map(p - vec3(0.0, eps, 0.0)),\n        map(p + vec3(0.0, 0.0, eps)) - map(p - vec3(0.0, 0.0, eps))\n    );\n    return normalize(n);\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    for (int i = 0; i < 40; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        if (d < 0.001) break;\n        t += d;\n    }\n    return t;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    \n    float t = rayMarch(ro, rd);\n    vec3 p = ro + rd * t;\n    \n    vec3 col = vec3(0.0);\n    if (t < 20.0) {\n        vec3 n = getNormal(p);\n        vec3 lightDir = normalize(vec3(0.5, 0.5, -1.0));\n        float diff = max(dot(n, lightDir), 0.0);\n        col = vec3(0.3, 0.6, 0.9) * diff;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}