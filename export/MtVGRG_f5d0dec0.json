{"ver":"0.1","info":{"id":"MtVGRG","date":"1483391263","viewed":178,"name":"testing sphere coords","username":"public_int_i","description":"testing sphere coords","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["testing","sphere","coords"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2016\n//testing sphere coordinates\n\n\n//2d rotation\nvec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n\n\n\n//returns distance to sphere or -1 if no hit\nfloat raySphere(in vec3 rp, in vec3 rd, in vec3 spherePos, in float radius) {\n    \n    vec3 rc = rp-spherePos;\n    float c = dot(rc, rc) - radius*radius;\n    float b = dot(rd, rc);\n\n    float d = b*b - c;\n    float t = -b - sqrt(abs(d));\n\n    if (d < 0.0 || t < 0.0) return -1.;\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n\tvec2 uv = (fragCoord.xy - R*.5)/R.x;\n    \n    vec3 cameraLocation = vec3(0.,0.,-1.);\n    vec2 cameraRotation = vec2(iTime, 3.14/-2.+iTime*0.2);\n    \n    vec3 rp = cameraLocation;\n    vec3 rd = normalize(vec3(uv*vec2(1.,-1.),1.));\n\n    rd.yz = rot(rd.yz,cameraRotation.y);\n    rd.xz = rot(rd.xz,cameraRotation.x);\n    rp.yz = rot(rp.yz,cameraRotation.y);\n    rp.xz = rot(rp.xz,cameraRotation.x);\n    rp *= 4.0;\n    \n    float sr = raySphere(rp,rd,vec3(0.),1.);\n    if (sr > -1.) {\n        vec3 hp = rp+rd*sr,\n             sp = normalize(hp);\n        \n        /*vec3 cp = abs(1./sp);\n        cp = sp*min(cp.x,min(cp.y,cp.z));\n        vec3 ap = abs(cp);\n        \n        vec2 suv;\n        if (ap.x > ap.y) {\n            if (ap.x > ap.z) {\n                suv = vec2(cp.y,\n                            cp.z);                \n            } else {\n                suv = vec2(cp.x,\n                           cp.y);\n            }\n        } else {\n            if (ap.y > ap.z) {\n                suv = vec2(cp.x,\n                       cp.z);\n            } else {\n            \tsuv = vec2(cp.x,\n                       cp.y);\n            }\n        }*/\n        vec2 suv = vec2(atan(sp.x,sp.z)/6.28+0.5,sp.y*0.5+0.5);\n\n        fragColor = textureLod(iChannel0,suv*vec2(1.,.666),mod(iTime,10.));\n    } else {\n        fragColor = vec4(0.);\n    }\n}","name":"Image","description":"","type":"image"}]}