{"ver":"0.1","info":{"id":"fdyczy","date":"1655043084","viewed":126,"name":"Rotated Cube with SDF","username":"batuhandev","description":"Rotated Cube","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","cube","rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec3 sdfSquare(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  vec2 rotated = rotate(vec2(x,y), iTime);\n  float d = max(abs(rotated.x), abs(rotated.y)) - size;\n  \n  return d > 0. ? vec3(1.) : vec3(1., 0., 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // <-0.5,0.5>\n  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n  vec2 offset = vec2(0.0, 0.0);\n\n  vec3 col = sdfSquare(uv, 0.2, offset);\n\n  // Output to screen\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}