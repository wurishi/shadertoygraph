{"ver":"0.1","info":{"id":"MtyGRW","date":"1473433279","viewed":634,"name":"Simple Grain","username":"rbnpontes","description":"Simple Grain Effect","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","grain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float permTexUnit = 1.0/256.0;\nconst float permTexUnitHalf = 0.5/256.0;\n\nconst float GrainPower = 0.03;\nconst int GrainColored =0;\nconst float GrainColorAmount = 1.00;\nconst float GrainSize = 1.5;\nconst float GrainLuma =0.9;\n\nvec4 rnm(in vec2 tc){\nfloat noise = sin(dot(vec3(tc.x, tc.y, iTime), vec3(12.9898, 78.233, 0.0025216))) * 43758.5453;\nfloat noiseR = fract(noise)*2.0-1.0;\nfloat noiseG = fract(noise*1.2154)*2.0-1.0; \nfloat noiseB = fract(noise*1.3453)*2.0-1.0;\nfloat noiseA = fract(noise*1.3647)*2.0-1.0;\n    return vec4(noiseR,noiseG,noiseB,noiseA);\n}\nfloat fade(in float t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\nfloat pnoise3D(in vec3 p){\nvec3 pi = permTexUnit*floor(p)+permTexUnitHalf;\nvec3 pf = fract(p);\n    \n    // Noise contributions from (x=0, y=0), z=0 and z=1\n    float perm00 = rnm(pi.xy).a ;\n    vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;\n    float n000 = dot(grad000, pf);\n    vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n    float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));\n    \n    // Noise contributions from (x=0, y=1), z=0 and z=1\n    float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;\n    vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;\n    float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));\n    vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n    float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));\n\n    // Noise contributions from (x=1, y=0), z=0 and z=1\n    float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;\n    vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;\n    float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));\n    vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n    float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));\n\n    // Noise contributions from (x=1, y=1), z=0 and z=1\n    float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;\n    vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;\n    float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));\n    vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n    float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));\n\n    // Blend contributions along x\n    vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));\n\n    // Blend contributions along y\n    vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));\n\n    // Blend contributions along z\n    float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));\n\n    // We're done, return the final noise value.\n    return n_xyz;\n}\n\n//2d coordinate orientation thing\nvec2 coordRot(in vec2 tc, in float angle)\n{\n    float WIDTH = iResolution.x;\nfloat HEIGHT = iResolution.y;\n    float aspectr = WIDTH/HEIGHT;\n    float rotX = ((tc.x*2.0-1.0)*aspectr*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));\n    float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspectr*sin(angle));\n    rotX = ((rotX/aspectr)*0.5+0.5);\n    rotY = rotY*0.5+0.5;\n    return vec2(rotX,rotY);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float timer = iTime;\n    vec2 texcoord = fragCoord/iResolution.xy;\n    float WIDTH = iResolution.x;\n    float HEIGHT = iResolution.y;\n    float grainamount = GrainPower;\n\tint colored = GrainColored;\n\tfloat coloramount = GrainColorAmount;\n\tfloat grainsize = GrainSize;\n\tfloat lumamount = GrainLuma;\n\n    vec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values  \n    vec2 rotCoordsR = coordRot(texcoord, timer + rotOffset.x);\n    vec2 rot = rotCoordsR*vec2(WIDTH/grainsize,HEIGHT/grainsize);\n    float pNoise = pnoise3D(vec3(rot.x,rot.y,0.0));\n    vec3 noise = vec3(pNoise, pNoise, pNoise);\n  \n    if (colored == 1)\n    {\n        vec2 rotCoordsG = coordRot(texcoord, timer + rotOffset.y);\n        vec2 rotCoordsB = coordRot(texcoord, timer + rotOffset.z);\n        noise.g = mix(noise.r,pnoise3D(vec3(rotCoordsG*vec2(WIDTH/grainsize,HEIGHT/grainsize),1.0)),coloramount);\n        noise.b = mix(noise.r,pnoise3D(vec3(rotCoordsB*vec2(WIDTH/grainsize,HEIGHT/grainsize),2.0)),coloramount);\n    }\n    \n    vec3 col = texture(iChannel0, texcoord).rgb;\n\n    //noisiness response curve based on scene luminance\n    vec3 lumcoeff = vec3(0.299,0.587,0.114);\n    float luminance = mix(0.0,dot(col, lumcoeff),lumamount);\n    float lum = smoothstep(0.2,0.0,luminance);\n    lum += luminance;\n    \n    vec2 thepow = vec2(pow(lum, 4.0));\n    \n    noise = mix(noise,vec3(0.0, 0.0, 0.0),pow(lum,4.0));\n    col += noise*grainamount;\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}