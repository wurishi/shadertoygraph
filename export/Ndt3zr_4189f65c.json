{"ver":"0.1","info":{"id":"Ndt3zr","date":"1629088670","viewed":43,"name":"Basic RayMarch  by mendi","username":"mendi80","description":"based on the art of code youtube channel.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .02\n\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0,1,6,1); //sphere\n    float sphereDist = length(p-s.xyz)-s.w; // point minus position minus radius\n    float planeDist = p.y;\n    float d = min(sphereDist, planeDist);\n    //float d = sphereDist;\n    //float d = planeDist;\n    return d;\n    \n}\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO=0., fi=0.;\n    for(int i=0; i<MAX_STEPS; i++,fi++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO+=dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n    //return fi*.3;\n    \n}\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e=vec2(.01,0);\n    vec3 n=vec3(d-GetDist(p-e.xyy),d-GetDist(p-e.yxy),d-GetDist(p-e.yyx));\n    return normalize(n);\n}\nfloat GetLight(vec3 p){ //point that we want to shade\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz+=vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l=normalize(lightPos-p); //lightVec\n    vec3 n = GetNormal(p);\n    //float dif=0.5+dot(n,l)/2.;\n    float dif=clamp(dot(n,l),0.,1.);\n    \n    //shadow\n    float d=RayMarch(p+n*.05,l);\n    if(d<length(lightPos-p)) dif*=.3;\n    \n    return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col=vec3(0);\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0,1.0+0.*sin(iTime),0); //camera, ray origin\n    vec3 rd = normalize(vec3(uv.x,uv.y,1)); //ray direction\n    \n    \n    float d = RayMarch(ro,rd);\n    \n    vec3 p = ro+rd*d;\n    float dif=GetLight(p); //diffuse light\n    switch ( int(iTime)%3 )\n    {\n        case 0: col=vec3(d*.16); break;\n        case 1: col=GetNormal(p);break;\n        case 2: col=vec3(dif); break;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}