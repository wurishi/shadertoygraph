{"ver":"0.1","info":{"id":"Wd2fRm","date":"1589748077","viewed":126,"name":"Stateful particles","username":"akohdr","description":"Uses 'Buffer D' to maintain particle state, 'Buffer A' is viewer.  Try tweaking parameters in 'Common' YMMV.\nRunning full screen really kills my tired old laptop.\n","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["particles","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage(out vec4 k,in vec2 p) {\n    k = texture(iChannel0, p/iR);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by Andrew Wild - akohdr/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Global parameters\n#define MAX_ACC 2.73\n#define SYMMETRIES\n#define BOXED\n\n#define D 7.\n#define FADE .97\n#define ZOOM .001\n\n// forXY() loop controls buffer coverage per frame\n//   making dXY too small or mXY too large results in LOTS calcs\n//   using mod for sXY provides for complete coverage over multiple frames\n//#define sXY mod(vec2(iFrame),dXY)\n#define sXY vec2(0)\n#define dXY (iR/vec2(8,16))\n#define mXY (iR)\n#define forXY for(float x=sXY.x; x<mXY.x; x+=dXY.x) \\\n                for(float y=sXY.y; y<mXY.y; y+=dXY.y)\n\n#define iT iTime\n#define iR iResolution.xy\n\n#define BLK vec4(0,0,0,0)\n#define RED vec4(1,0,0,0)\n#define GRN vec4(0,1,0,0)\n#define YEL vec4(1,1,0,0)\n#define CYN vec4(0,1,1,0)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Particle viewer \n//\t\tBuffer A - framebuffer provides persistence trace\n//\t\tBuffer D - particles state, each point is vec4(pos,acc)\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n    vec2 c = (p-iR/2.)/iR.y/ZOOM;\n    k = FADE*texture(iChannel0, p/iR);\n    \n    forXY {\n            vec4 v = texture(iChannel2, vec2(x,y)/iR);\n\t\t\tk += length(v.xy-c)<D ? GRN-k : \n                #ifdef SYMMETRIES\n\t\t\t\t length(v.xy+c)<D ? RED-k : \n\t\t\t\t length(v.yx-c)<D ? YEL-k : \n\t\t\t\t length(v.yx+c)<D ? CYN-k : \n                #endif\n            BLK;\n        }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Particle state buffer, each point is vec4(pos,acc)\n// broken physics and numerical instability provide behaviour :)\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n    vec2 uv = p/iR,\n    \t  c = (p-iR/2.)/iR.y,\n        sum = vec2(0), pos, acc, dv;\n\n    // init image appears to take couple frames to load\n    k = iFrame<10 ? (texture(iChannel1, uv)-.5) * vec4(iR,1,1):\n        \t\t     texture(iChannel2, uv);\n\n\n    forXY {\n        vec4 v = texture(iChannel2, vec2(x,y)/iR);\n           pos = v.xy,\n           acc = v.wz,\n            dv = uv-pos;\n       float l = length(dv);\n\n    \t  sum += dv/(l*l);\t// sum influence of all particles\n    }\n\n    // acceleration\n\tk.wz += sum;\n        \n    // clamping acc. is key to behaviour \n\tk.wz = clamp(k.wz,-MAX_ACC,MAX_ACC);\n    \n    // position\n\tk.xy += k.wz;\n        \n    // clamping position keeps things in a box\n    vec2 mb = iR;\n#ifdef BOXED\n\tk.xy = clamp(k.xy,-mb,mb);\n#endif\n}\n\n","name":"Buffer D","description":"","type":"buffer"}]}