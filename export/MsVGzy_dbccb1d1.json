{"ver":"0.1","info":{"id":"MsVGzy","date":"1455230125","viewed":225,"name":"First by BalintYYY","username":"BalintYYY","description":"My first shader, variation of a tutorial.<br/>","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sphere","instance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//My first shader, variation of a tutorial.\n\n/*OLD CODE-------------------------------------------------------------------------------------------\n\n//Function of shape **************************************************************************\nfloat map (vec3 p) \n{\n    vec3 q = fract(p) * 2.0 - 1.0;   //instancing\n\treturn length(q) - 0.25;    //gÃ¶mb\n}\n\n//Function of ray********************************************************************************\nfloat trace (vec3 o, vec3 r)   //raytrace , hely, sugarirany\n{\n\tfloat t = 0.0;\n    for (int i = 0; i < 32; i++) //ray\n    {\n    \tvec3 p = o + r*t;\n        float d = map(p);    //trace az alakzatban\n        t += (d *  0.5 * sin(iTime * 0.5))- 0.1; //mindig a felevel lep\n       \n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //******************************************\n{\n\n//Setup of pixels ***********************************************   \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0-1.0;\n    uv.x*= iResolution.x / iResolution.y;\n    \n//Set up of rays (camera movement)******************************************************\n    \n    vec3 r = normalize(vec3(uv, 1.0));   //ray-t levetiti az image planere    a szaam az a field of view   \n    vec3 o = vec3(0.0, 0.0, iTime);  //itt vagyunk a tÃ©rben\n    float forgo = iTime * 0.5;\n    r.xz *= mat2(cos(forgo), -sin(forgo), sin(forgo), cos(forgo));   //mat2 : y tengely mentÃ©n forgato matrix\n    r.xy *= mat2(cos(forgo), -sin(forgo), sin(forgo), cos(forgo));\n    r.yz *= mat2(cos(forgo), -sin(forgo), sin(forgo), cos(forgo));  \n    float t = trace(o, r);\n    \n//Pixelcolor*****************************************************************************************\n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    vec3 fc = vec3(fog);\n    \n    \n\tfragColor = vec4(fc,1.0);\n} \n*/\n\n\n//NEW CODE\n\n//Function of shape **************************************************************************\nfloat map (vec3 p) \n{\n    vec3 q = fract(p) * 2.0 - 1.0;   //instancing\n\treturn length(q) - 0.25;    //gÃ¶mb\n}\n\n//Function of ray********************************************************************************\nfloat trace (vec3 o, vec3 r)   //raytrace , hely, sugarirany\n{\n\tfloat t = 0.0;\n    for (int i = 0; i < 32; i++) //ray\n    {\n    \tvec3 p = o + r*t;\n        float d = map(p);    //trace az alakzatban\n        t += (d *  0.5 * sin(iTime * 0.5))- 0.1; //mindig a felevel lep\n       \n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //******************************************\n{\n\n//Setup of pixels ***********************************************   \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0-1.0;\n    uv.x*= iResolution.x / iResolution.y;\n    \n//Set up of rays (camera movement)******************************************************\n    \n    vec3 r = normalize(vec3(uv, 1.0));   //ray-t levetiti az image planere    a szaam az a field of view   \n    vec3 o = vec3(0.0, 0.0, iTime);  //itt vagyunk a tÃ©rben\n    mat2 rot = mat2(cos(iTime * 0.5), -sin(iTime * 0.5), sin(iTime * 0.5), cos(iTime * 0.5));\n    r.xz *= rot;  \n    r.xy *= rot;\n    r.yz *= rot;  \n    float t = trace(o, r);\n\tfragColor = vec4(vec3(1.0 / (1.0 + t * t  * 0.1)),1.0);\n} ","name":"Image","description":"","type":"image"}]}