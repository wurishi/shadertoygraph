{"ver":"0.1","info":{"id":"7tdfRH","date":"1662679624","viewed":84,"name":"The Letter E","username":"SonicKurt","description":"I decided to create the letter E from the alphabet. It has a gradient pattern of neon red and blue in the foreground and a linear red noise pattern along with blue rays in the background. I used the primitive function, which was created by Inigo Quilez.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**********************************\n* The Letter E\n* \n* Author: Kurt Campbell\n* Date: 9 September 2022\n*\n* Copyright 2022 Kurt Campbell. \n* All rights reserved.\n**********************************/\n\n// Round Box\n// Author: Inigo Quilez\n// URL: https://iquilezles.org/articles/distfunctions/\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n// Smooth Union\n// Author: Inigo Quilez\n// URL: https://iquilezles.org/articles/distfunctions/\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n// Creates the Letter E.\nbool testScene(vec3 dir) {\n    // Positions collection for each primitive.\n    vec3 eyes[4] = vec3[4](vec3(6.0, 0.0, -100.0), \n                           vec3(1.0, -6.0, -100.0), \n                           vec3(1.0, 6.0, -100.0), \n                           vec3(1.3, 0.0, -100.0));\n    // Sizes collection                       \n    vec3 sizes[3]= vec3[3](vec3(1.0, 7.0, 10.0),\n                           vec3(5.0, 1.0, 10.0), \n                           vec3(3.0, 1.0, 10.0));\n\n    // Keep track to see whether two primitives need to be the same size.\n    int sizeCount = 0;\n    float t = 0.0;\n    for (int i = 0; i < 20; i++) {\n        // Calculates the position to place the boxes.\n        vec3 posOne = eyes[0] + dir * t;\n        vec3 posTwo = eyes[1] + dir * t;\n        vec3 posThree = eyes[2] + dir * t;\n        vec3 posFour = eyes[3] + dir * t;\n        \n        // Unites the primitives together to form the letter E.\n        float dist = opSmoothUnion(\n                     sdRoundBox(posOne, sizes[0], 0.5),\n                         opSmoothUnion(\n                         sdRoundBox(posTwo, sizes[1], 0.5),\n                             opSmoothUnion(\n                             sdRoundBox(posThree, sizes[1], 0.5),\n                             sdRoundBox(posFour, sizes[2], 0.5),\n                             0.5),\n                         0.5),\n                      0.1);\n\n        if (dist < 0.3) {\n            return true;\n        }\n\n        t += dist;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - vec2(iResolution / 2.0)) / iResolution.xx;\n    \n    // Linear Noised Background Pattern.\n    vec3 col = vec3(pow(cos(uv.y / 0.5 + iTime / 2.0), 3.0) - 1.5, 0.0, cos(uv.y / 2.0 + iTime / 2.0) - 1.2);\n    col += vec3(sin(uv.x * 100.0 + iTime) - 0.2, 0.0, pow(sin(uv.x / 20.0 + iTime / 2.0), 2.0) - 0.4);\n    col += vec3(sin(uv.y * 10.0 + (iTime / 5.0)), 0.0, sin(uv.x * 20.0 + iTime));\n    \n    // Position the camera by the amount of distance to either close in or out of the letter E.\n    vec3 dir = normalize(vec3(uv.x, uv.y, 2.0));\n    \n    if (testScene(dir)) {\n        // Letter E Gradient Pattern.\n        col = vec3(pow(sin(uv.y / 3.0 + iTime / 5.0), 2.0), 0.1, 0.3);\n        col += vec3(sin(uv.x * 6.0), 0.0, 0.0);\n        col += vec3(sin((uv.y * 5.0)), -0.2, 0.0);\n        col += texture(iChannel1, uv).rgb;\n    }\n\n    // Output to screen\n    fragColor = vec4(col + texture(iChannel0, uv).rgr - 0.3, 1.0);\n}","name":"Image","description":"","type":"image"}]}