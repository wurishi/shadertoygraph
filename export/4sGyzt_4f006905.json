{"ver":"0.1","info":{"id":"4sGyzt","date":"1522959365","viewed":387,"name":"Scorched world","username":"Pr0fed","description":"Some practice on raymarching, and noise of course.\nTried to add lights, but it comes out very blurred and 90th style-like. \nThis looks better to me. ","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Time simplification and easier overall speed control.\n#define time iTime * 0.5\n\nconst vec3 FogColor = vec3(1.6, 0.80, 0.00);\n\n// Rotation matrix, to add more variety to FBM.\nconst mat2 m = mat2( 1.4,  1.0, -1.0,  1.4 );\n\n// Check without any rotation.\n//const mat2 m = mat2( 1.0,  1.0, -1.0,  1.0 );\n\nvec2 hash( vec2 p ) \n{ \n    p = vec2( dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5,183.3))); \n    return fract(cos(p) * 12.5453); \n}\n\n\nfloat voronoi2D(in vec2 n)\n{\n    float dis = 2.0;\n    for (int y= -1; y <= 1; y++) \n    {\n        for (int x= -1; x <= 1; x++) \n        {\n            // Neighbor place in the grid\n            vec2 p = floor(n) + vec2(x,y);\n\n            float d = length(hash(p) + vec2(x, y) - fract(n));\n            \n            if (dis > d)\n            {\n             \tdis = d;\n            }\n        }\n    }\n    \n    return dis * dis;\n}\n\n// Four octave voronoi FBM.\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000 * voronoi2D( p ); p = p * 2. * m;\n    f += 0.2500 * voronoi2D( p ); p = p * 2. * m;\n    f += 0.1250 * voronoi2D( p ); p = p * 2. * m;\n    f += 0.0625 * voronoi2D( p );\n    return f;\n}\n\nfloat map(vec3 p) \n{\n    float pattern = voronoi2D(p.xz) * fbm4(p.xz) + p.y;\n     \n    // Return the height hit point.\n    return pattern;\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0., d;\n\n    for (int i = 0; i < 96; i++)\n    { \n        d = map(ro + rd * t);\n        if (abs(d) < .001 * (t * .125 + 2.) || t > 20.) break;\n\n        t += d *.5;\n    }\n\t\n    // We either hit something, or exceeded the drawdist.\n    return min(t, 20.);\n}\n\n// Main color mixing function.\nvec3 GetColor(vec3 p, float t)\n{\n    float f = voronoi2D(p.xz) + fbm4(p.xz) + p.y * 0.5;\n    \n    f = mix( f, f * f * f * 3.5, f * abs(p.y));\n    \n    vec3 col = vec3(0.0);\n    \n    col = mix( vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 2.0), f * f);\n    \n    // Ridges color animation.\n    col = mix( col, vec3( 1.74, 0.95, 0.0), 2.5 * smoothstep(0.2, 1.8, 2.5 * fbm4(p.xz) + 0.3 * sin(time) * sin(time)));\n    \n\t// Gamma correction.\n    return col * col * 0.4545;\n}\n\n// Using the hit point, unit direction ray, etc, to color the scene. Diffuse, specular, shadows etc.\n// Personally i'm not yet very familiar with all the lighting techniques, so making the basics only.\nvec3 doColor(in vec3 ro, in vec3 rd, in vec3 lp, float t)\n{\n    // Initiate the scene (for this pass) to zero.\n    vec3 sceneCol = vec3(0.18, 0., 0.35) - rd.y;\n\n    if (t < 20.)\n    {\n        // Advancing the ray origin, \"ro,\" to the new hit point.\n        vec3 sp = ro + rd * t;    \n        sceneCol = GetColor(sp, t);\n    }\n\n    // Return the color. Done once for each pass.\n    return sceneCol;\n}\n\nvec3 applyFog(in vec3  rgb,    // original color of the pixel\n\t\t\t\tin float dist, // camera to point distance\n\t\t\t\tin vec3  ro,   // camera position\n\t\t\t\tin vec3  rd)   // camera to point vector\n{\n\tfloat fogAmount = 0.025 * exp(sin(ro.y) * 0.5) * (1.0 - exp(-dist * rd.y * 0.5)) / rd.y;\n    \n    // We leave some minumum, to always have some horizon 'fire'.\n\treturn mix(rgb, 0.75 * FogColor + FogColor * sin(time) * sin(time), fogAmount);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Aspect ratio - UV normalization.\n   \tvec2 uv = (2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    // Camera setup and movement.\n\tvec3 ro = vec3(-5.9, 0.75, 1. + iTime * 0.5); \n\tvec3 lk = ro + vec3(0., -1.0, 2.);\n    \n    // FOV - Field of view.\n    float FOV = 3.14159 / 3.; \n    vec3 forward = normalize(lk - ro);\n    vec3 right = normalize(vec3(forward.z, 0., -forward.x )); \n    vec3 up = cross(forward, right);\n\n    // rd - Ray direction.\n    vec3 rd = normalize(forward + FOV * uv.x * right + FOV * uv.y * up);\n    \n    // Main tracing func.\n    float t = trace(ro, rd);\n    \n    // Adding color.\n    vec3 sceneColor = doColor(ro, rd, lk, t);\n    \n    // Adding background fog.\n    sceneColor = applyFog(sceneColor, t - ro.y, ro, rd);\n\n    // Output to screen.\n    fragColor = vec4(sceneColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}