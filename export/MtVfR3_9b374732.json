{"ver":"0.1","info":{"id":"MtVfR3","date":"1543484207","viewed":165,"name":"dots and lights","username":"CynicRus","description":"Just experiments with this-))","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["lighting","dots","lights","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 hash2(vec2 uv) {\n\tfloat  k = hash(uv);\n\treturn vec2(k, hash(uv + k));\n}\n\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return b + a*tan( iTime * 0.02*(c*t+d) );\n}\n//\n\nmat2 rotate(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvec3 layer(vec2 uv, float time) {\n\tvec3 col = vec3(0.);\n\tfor (int i = 0; i < 15; i++) {\n\t\tvec2 p = 2. * hash2(float(i) + vec2(2.)) - 1.;\n\t\tp -= vec2(sin(.1 * hash(float(i) + vec2(20., 50.)) * time + hash(float(i) + vec2(10.))), \n\t\t\t  cos(.1 * hash(float(i) + vec2(20., 40.)) * time + hash(float(i) + vec2(10.))));\n\t\tfloat k = (.5 * hash(float(i) + vec2(25., 75.)) + .01);\n\t\tcol += palette(k * 3., vec3(.5), vec3(.5), vec3(1.), vec3(.0, .33, .67)) / length(uv - p);\n\t}\n\tcol /= 120.;\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec2 st = fragCoord.xy / iResolution.xy;\n\tvec3 col = vec3(0.);\n\tfor (float i = 0.; i < 1.; i += .1) {\n\t\tuv *= rotate(iTime * 0.2 + i);\n\t\tfloat t = fract(iTime * .1 + i);\n\t\tfloat s = smoothstep(2., 0., t);\n\t\tfloat f = smoothstep(.8, 0., t)\n\t\t * smoothstep(.0, .2, t);\n\t\tcol += layer(uv * s, iTime) * f;\n\t}\n\tvec3 bb = texture(iChannel0, st - 0.5).rgb;\n\tfragColor = vec4(col * .2 + bb * .9, 1.);\n}","name":"Image","description":"","type":"image"}]}