{"ver":"0.1","info":{"id":"lcGSzw","date":"1714938835","viewed":89,"name":"very simple texture","username":"walter023","description":"From the book of shaders 10-11 random and noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 black = vec3(0.12, 0.057, 0.143);\nconst vec3 lava = vec3(.9, 0.333, 0.224);\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(0.89376, 1956.238))) * 172389.0 + iTime * .12);\n}\n\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    // u = smoothstep(0.,1.,f);\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n        (c - a) * u.y * (1.0 - u.x) +\n        (d - b) * u.x * u.y;\n}\n\nvec3 frame(in vec2 uv) {\n    vec2 bl = smoothstep(vec2(0.08), vec2(0.15), uv);\n    vec2 tr = smoothstep(vec2(0.08), vec2(0.15), 1.0 - uv);\n    return vec3(bl.x * bl.y * tr.x * tr.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = vec2(uv * 8.0);\n    pos *= rot2D(iTime * .01);\n    float n = 0.13 / noise(pos);\n    vec3 finalColor = frame(uv);\n    finalColor *= vec3(mix(black, lava, n));\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}