{"ver":"0.1","info":{"id":"XXcXR7","date":"1719505276","viewed":139,"name":"Coffee Planet","username":"gllama","description":"Deeply inspired by [url=https://www.shadertoy.com/view/tltXWM]@kchnkrml's[url] shader and noise-colorization. \n\nWanted to create an equirectangular planet style shader for use as material on a sphere or round object. License CC0-1.0","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","planet","4d","smooth","smoothnoise","gas","4dnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ☕️ Coffee Planet\n// License CC0-1.0\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Deeply inspired by @kchnkrml's shader https://www.shadertoy.com/view/tltXWM. \n// Uses his 3-color noise-colorization + mix technique with some modifications \n// to fbm and offset generation that reduce total-noise calls and provide varied\n// output.\n// \n// Also shoutout to @kotfind for his 4D smooth noise algorithm used to create\n// The base equirectangular noise. https://www.shadertoy.com/view/WsBBDK\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// Planet Colors\nvec3 colorA = vec3(0.2, 0.0, 0.1);\nvec3 colorB = vec3(0.7, 0.3, 0.4);\nvec3 colorC = vec3(1.0, 0.2, 0.4);\n\n// Overwrites above colors and ties them to sin/cos iTime.\nbool discomode=false;\n\n\n\n\n// 4D Smoothnoise by @Kotfind (License Unkown) https://www.shadertoy.com/view/WsBBDK\nfloat rand(in vec4 p) {\n\treturn fract(sin(p.x*1234. + p.y*2345. + p.z*3456. + p.w*4567.) * 5678.);\n}\nfloat smoothnoise(in vec4 p) {\n    const vec2 e = vec2(0.0, 1.0);\n    vec4 i = floor(p);    // integer\n    vec4 f = fract(p);    // fract\n    \n    f = f*f*(3. - 2.*f);\n    \n    return mix(mix(mix(mix(rand(i + e.xxxx),\n                           rand(i + e.yxxx), f.x),\n                       mix(rand(i + e.xyxx),\n                           rand(i + e.yyxx), f.x), f.y),\n                   mix(mix(rand(i + e.xxyx),\n                           rand(i + e.yxyx), f.x),\n                       mix(rand(i + e.xyyx),\n                           rand(i + e.yyyx), f.x), f.y), f.z),\n               mix(mix(mix(rand(i + e.xxxy),\n                           rand(i + e.yxxy), f.x),\n                       mix(rand(i + e.xyxy),\n                           rand(i + e.yyxy), f.x), f.y),\n                   mix(mix(rand(i + e.xxyy),\n                           rand(i + e.yxyy), f.x),\n                       mix(rand(i + e.xyyy),\n                           rand(i + e.yyyy), f.x), f.y), f.z), f.w);\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(1);\n\tfor (int i = 0; i < 10; ++i) {\n        // High iTimes create crappy noise, not sure why but we loop -200 - 200 w to be safe\n\t\tv += a * smoothnoise(vec4(x,cos(iTime*.002)*200.));\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\n// This function let's us jump from 2D-UV to spherical 3D-XYZ position\n// The jist is that XY of UV can represent 2-Sphere angles to get a point on the sphere.\n// The 2-Sphere point than gives you an XYZ normalized [-1,1].\nvec3 uvTo3D(vec2 uv) {\n    float theta = uv.x * 2.0 * 3.14159265359; // Longitude\n    float phi = uv.y * 3.14159265359; // Latitude\n    float x = sin(phi) * cos(theta);\n    float y = sin(phi) * sin(theta);\n    float z = cos(phi);\n    // { Dev Note }\n    // If you're porting this shader to a material, I strongly recommend you skip this function \n    // and just use the XYZ of your `varying vNormal` in place of the result you would get here.\n    // Should be suitable for all spheres and most round geometries\n    return vec3(x, y, z);\n}\n\n// returns max of a single vec3\nfloat max3 (vec3 v) {\n  return max (max (v.x, v.y), v.z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 color;\n        \n    // We overwrite static colors -- Feel like I could get a cooler disco-mode but so far no luck\n    if(discomode){\n        colorA=vec3(sin(iTime),sin(iTime+7.),cos(iTime));\n        colorB=vec3(cos(iTime),cos(iTime+7.),sin(iTime));\n        colorC=vec3(sin(iTime),cos(iTime),sin(iTime+.5));\n    }\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 pos = uvTo3D(uv); // UV => 3D for equirectangular/spherical mapping\n    \n    // Flow XYZ over time to create movement in our noise lookup.\n    pos.y+=sin(iTime/5.);\n    pos.x+=cos(iTime/5.);\n    pos.z+=sin(iTime/5.);\n    \n    \n    // Fractional Brownian Motion derived vec3s & float used to mix final color\n    float fbmm=fbm(pos);\n    vec3 q = vec3(fbmm,sin(fbmm),cos(fbmm));//vec3(fbm(pos + 0.025*iTime), fbm(pos), fbm(pos));\n    vec3 r = vec3(fbmm,sin(fbmm),cos(fbmm));//vec3(fbm(pos + 1.0*q + 0.01*iTime), fbm(pos + q), fbm(pos + q));\n    float v =fbm(pos + 5.0*r + iTime*0.005);\n    \n\n    // Color mix strategy from @kchnkrml (License Unkown) https://www.shadertoy.com/view/tltXWM\n    // convert noise value into color\n    // three colors: top - mid - bottom \n    // mid being constructed by three colors -- (ColorA - ColorB - ColorC) \n    vec3 col_top = vec3(1.0);\n    vec3 col_bot = vec3(0.);\n    // mix mid color based on intermediate results\n    color = mix(colorA, colorB, clamp(r, 0.0, 1.0));\n    color = mix(color, colorC, clamp(q, 0.0, 1.0));\n    // calculate pos (scaling betwen top and bot color) from v\n    float poss = v * 2.0 - 1.0;\n    color = mix(color, col_top, clamp(poss, 0.0, 1.0));\n    color = mix(color, col_bot, clamp(-poss, 0.0, 1.0));\n    // clamp color to scale the highest r/g/b to 1.0\n    color = color / max3(color);\n      \n    // create output color, increase light > 0.5 (and add a bit to dark areas)\n    color = (clamp((0.4 * pow(v,3.) + pow(v,2.) + 0.5*v), 0.0, 1.0) * 0.9 + 0.1) * color;\n    \n    // Add in diffuse lighting \n    //float diffuse = max(0.0, dot(pos, vec3(1.0, sqrt(0.5), 1.0)));\n    //float ambient = 0.1;\n    //color *= clamp((diffuse + ambient), 0.0, 1.0);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}