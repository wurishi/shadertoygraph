{"ver":"0.1","info":{"id":"NdsSzr","date":"1618743890","viewed":133,"name":"327_Ozerova_v3v8","username":"Tanya1515","description":"Octahedron with fractals inside.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["compgraph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv)/ float (iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec3 LIGHT1_POS = vec3 (-2, 1, 1.5);\nconst float LIGHT1_RAD = 0.25;\nconst vec3 LIGHT1_COLOR = vec3 (0.9,0.85,0.7);\n\nconst vec3 LIGHT2_POS = vec3 (3, 0.7, 0.9);\nconst float LIGHT2_RAD = 0.25;\nconst vec3 LIGHT2_COLOR = vec3 (0.85,0.8,0.8);\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nvec3 randDir;\n\nvec3 rotate(vec3 p, vec3 r)\n{\n    p = vec3(p.x*cos(r.y)+p.z*sin(r.y), p.y, -p.x*sin(r.y)+p.z*cos(r.y));\n    return p;\n}\n\nfloat tracePlane (vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.5 - pos.y)/dir.y;\n    if (t <= 0.0)\n        return INF;\n    vec3 worldPos = t* dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0){\n        return INF;\n    }\n\n    normal = vec3 (0,1,0);\n    return t;\n}\n\nfloat\ntriangle_intersection( vec3 orig,\n                       vec3 dir,\n                       vec3 v0,\n                       vec3 v1,\n                       vec3 v2) \n{\n    vec3 e1 = v1 - v0;\n    vec3 e2 = v2 - v0;\n    vec3 pvec = cross(dir, e2);\n    vec3 normal = normalize(cross(e1, e2));\n    float det = dot(e1, pvec);\n    \n    if (det < 1e-8 && det > -1e-8) {\n        return INF;\n    }\n\n    float inv_det = 1. / det;\n    vec3 tvec = orig - v0;\n    float u = dot(tvec, pvec) * inv_det;\n    if (u < 0. || u > 1.) {\n        return INF;\n    }\n\n    vec3 qvec = cross(tvec, e1);\n    float v = dot(dir, qvec) * inv_det;\n    if (v < 0. || u + v > 1.) {\n        return INF;\n    }\n    \n    float D = dot(normal, v0);\n    float t = (D - dot(normal, orig)) / dot(normal, dir);\n    if (t < 0.0) {\n        return INF;\n    }\n    return t; \n}\n\n\n\nfloat ray_intersect(vec3 orig, vec3 dir, out int num, out vec3 normal) \n    {\n        float t = INF;\n        float curT;\n        vec3 norm;\n        \n        curT = triangle_intersection(orig, dir, vec3(0,1,0), vec3(-1,0,0), vec3(0, 0,-1));\n        if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(-1, 1, -1));\n            }\n      \n        \n        curT = triangle_intersection(orig, dir, vec3(1,0,0), vec3(0,1,0), vec3(0,0,-1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(1, 1, -1));\n            }\n        \n        curT = triangle_intersection(orig, dir, vec3(1,0,0), vec3(0,1,0), vec3(0,0,1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(1, 1, 1));\n            }\n        \n        curT = triangle_intersection(orig, dir, vec3(-1,0,0), vec3(0,1,0), vec3(0,0,1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(-1, 1, 1));\n            }\n        \n        curT = triangle_intersection(orig, dir, vec3(0,-1,0), vec3(-1,0,0), vec3(0,0,-1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(-1, -1, -1));\n            }\n        \n        \n        curT = triangle_intersection(orig, dir, vec3(1,0,0), vec3(0,-1,0), vec3(0,0,-1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(1, -1, -1));\n            }\n        \n        curT = triangle_intersection(orig, dir, vec3(-1,0,0), vec3(0,-1,0), vec3(0,0,1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(-1, -1, 1));\n            }\n        \n        curT = triangle_intersection(orig, dir, vec3(1,0,0), vec3(0,-1,0), vec3(0,0,1));\n         if (t>curT)\n            {\n                t = curT;\n                normal = normalize(vec3(1, -1, 1));\n            }\n        \n        \n        return t;\n\n    }\n    \n \n    float ray_intersect_p(vec3 orig, vec3 dir, out vec3 normal, vec3 k) \n    {\n        float t = INF;\n        float curT;\n        vec3 norm;\n        float p =0.2;\n        vec3 col1;\n        curT = triangle_intersection(orig, dir, (vec3(0,0,0)+k)*p, (vec3(0,0.25,-0.25)+k)*p, (vec3(0,0.25,0.25)+k)*p);\n                 if (t>curT)\n                    {\n                        t = curT;\n                        normal = (vec3(0, 0, 0));\n                    }\n         curT = triangle_intersection(orig, dir, (vec3(-0.6,0,0)+k)*p, (vec3(-0.6,0.25,-0.25)+k)*p, (vec3(0,0.25,0.25)+k)*p);\n                 if (t>curT)\n                 {\n                    t = curT;\n                    normal = (vec3(0, 0, 0));\n                }\n         \n         curT = triangle_intersection(orig, dir, (vec3(-0.6,0,-0.5)+k)*p, (vec3(-0.6,0.25,-0.25)+k)*p, (vec3(0,0.25,-0.25)+k)*p);\n         if (t>curT)\n            {\n                t = curT;\n                normal = (vec3(0, 0, 0));\n            }\n        curT = triangle_intersection(orig, dir, (vec3(0,0,0.5)+k)*p, (vec3(0,0,-0.5)+k)*p, (vec3(0, 0.5,0)+k)*p);\n        if (t>curT)\n            { \n                t = curT;\n                normal = (vec3(1, 0, 0));\n            }\n      \n        \n         curT = triangle_intersection(orig, dir, (vec3(0,0,0.5)+k)*p, (vec3(-1.2,0,-0.5)+k)*p, (vec3(0,0.5,0)+k)*p);\n         if (t>curT)\n            {\n                t = curT;\n                normal = (vec3(0.2, 0.2, 0));\n            }\n        \n        curT = triangle_intersection(orig, dir, (vec3(-1.2,0,-0.5)+k)*p, (vec3(0,0,-0.5)+k)*p, (vec3(0,0.5,0)+k)*p);\n         if (t>curT)\n            {\n                t = curT;\n                 normal = (vec3(0.2, 0.2, 0.2));\n            }\n         \n        \n        return t;\n\n    }\n    \n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    //dot(pos + t*dir, pos + t*dir) == r*r\n    //dot(pos, pos) + 2*t*dot(pos, dir) + t*t*dot(dir,dir) == r * r\n\n    float b = dot (pos, dir);\n    float D = b*b - dot(pos, pos) + r*r;\n    \n    if (D < 0.0)\n    {\n        return INF;\n    }\n    float t = (-b -sqrt(D));\n    if (t > 0.0)\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = (-b + sqrt(D));\n    if (t < 0.0)\n    {\n        return INF;\n    }\n\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.0 - pos.y)/dir.y;\n    if (t <= 0.0)\n        return INF;\n    vec3 worldPos = t* dir + CAMERA_POS;\n    if (dot (worldPos.xz, worldPos.xz) < 0.3)\n    {\n        normal = vec3 (0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.3;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 Octnorm;\n    int num;\n    float Oct = ray_intersect(pos, dir, num, Octnorm);\n    if (Oct < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 toLight1 = LIGHT1_POS - pos; \n    float distSqr1 = dot(toLight1,toLight1);\n    float att1 = isOccluded (pos, LIGHT1_POS + randDir * LIGHT1_RAD) ? 0.0:20.0/distSqr1;\n\n    vec3 toLight2 = LIGHT2_POS - pos; \n    float distSqr2 = dot(toLight2,toLight2);\n    float att2 =isOccluded (pos, LIGHT2_POS + randDir * LIGHT2_RAD) ? 0.0: 10.0/distSqr2  ; \n\n    return color * (LIGHT1_COLOR * max(0.0, dot(normal, normalize(toLight1))) * att1 \n\n    + LIGHT2_COLOR * max(0.0, dot(normal, normalize(toLight2))) * att2\n\n    + texture(iChannel1, normal).rgb * 0.1\n\n);\n}\n\nvec3 refraction (vec3 v, vec3 normal, float n1, float n2)\n{\n   if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB >1.0)\n    {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\nfloat pow2(float x){\n    return (x * x);\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot (vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 1.9;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 0.4;\n    float absorption = 10.0;\n    float totalAbs = 0.05;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel2, curPos * 0.2).x\n            + texture(iChannel2, curPos * 0.4).x\n            + texture(iChannel2, curPos * 0.8).x\n            + texture(iChannel2, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(2, 2, 2) * totalAbs, 1.0 - opacity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5))/iResolution.x; \n\n    vec3 front = normalize(- CAMERA_POS);\n    vec3 up = vec3 (0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right*uv.x + up*uv.y);\n    vec3 LIGHT1_POS = vec3 (-2, 1, 1.5) + randVals*0.05;\n    \n    randDir = normalize(randVals - 0.5);\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    \n    float rotation_val = 1.25;\n    curPos = rotate(curPos, vec3(rotation_val));\n    curDir = rotate(viewVec, vec3(rotation_val));\n    \n    //коэффициент преломления\n    float GLASS_N = 1.03;\n    float AIR_N = 1.0;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N)/pow2(AIR_N + GLASS_N);\n    vec3 normal;\n    vec3 planeNorm;\n\n    for (int i = 0; i < 10; ++i)\n    {\n        float t = INF; \n        int materialType = EMISSION;\n        vec3 color;\n        \n        \n        int num = -1;\n        float mult = 1.5;\n        \n        float planeT = tracePlane (curPos, curDir, planeNorm);\n\n        if ( planeT < t)\n        {\n            t = planeT; //расстояние от камеры до поверхности \n            vec3 worldPos = t * curDir + curPos;\n            materialType = DIFFUSE;\n            \n            color = texture(iChannel0,worldPos.xz * 0.4).rgb ;\n            \n            normal = planeNorm;\n        }\n\n        vec3 l1norm;\n        float light1 = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RAD, l1norm);\n\n        if ( light1 < t)\n        {\n            t = light1; \n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1norm;\n        }\n\n        vec3 l2norm;\n        float light2 = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RAD, l2norm);\n\n        if ( light2 < t)\n        {\n            t = light2;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2norm;\n        }\n        \n        vec3 Cylnormal;\n        float Cyl = traceCylinder(curPos, curDir, Cylnormal);\n        if ( Cyl < t)\n        {\n            t = Cyl;\n            materialType = DIFFUSE;\n            color = vec3 (0.9, 0.9, 0.9);\n            normal = Cylnormal;\n        }\n        \n        \n        vec3 Octnorm;\n        float Oct = ray_intersect(curPos, curDir, num, Octnorm);\n        if (Oct < t)\n        {\n            t = Oct;\n            normal = Octnorm;\n            if (randVals.x * 0.001 < GLASS_R)\n            {\n                 materialType = REFLECTION;\n                 \n            }else{\n            \n                materialType = REFRACTION;\n            }\n            //color = Octnorm;\n          \n        }\n        \n        vec3 PyrNorm;\n        vec3 k = vec3(2.5,0.5,0.2);\n        \n        float Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        \n        k = vec3(1.3,0.5,0.2);\n         \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(2.5,0.5,1.2);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(2.5,1,0.7);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(3.05,-1.05,0.2);\n        \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        \n        k = vec3(1.85,-1.05,0.2);\n         \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(3.05,-1.05,1.2);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(3.05,-0.55,0.7);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(6.2,-1.15,2.55);\n        \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        \n        k = vec3(4.9,-1.15,2.48);\n         \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(3.5,-0.64,2.48);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n        \n        k = vec3(5.9,-.65,2.9);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; \n          \n        }\n        \n        \n        k = vec3(3,-.5,-.55);\n        \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; \n          \n        }\n        \n        \n        k = vec3(1.8,-.5,-.55);\n         \n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; \n          \n        }\n        \n        k = vec3(3,-.5,0.45);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; \n          \n        }\n        \n        k = vec3(2.8,-0,-.12);\n        Pyr = ray_intersect_p(curPos, curDir, PyrNorm, k);\n        if (Pyr < t)\n        {\n            t = Pyr;\n            materialType = EMISSION;\n            color += PyrNorm; // color for inside triangle\n          \n        }\n            \n\n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n\n            if (materialType == EMISSION)\n            {\n                fragColor.rgb = color;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb = mult * computeLight(worldPos, color, normal);\n                break;\n            }\n            else if (materialType == REFLECTION)\n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n            }\n            else if (materialType == REFRACTION)\n            {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                \n                vec4 fog = sampleFog(curPos, curDir);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                \n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        }\n        else{\n\n            fragColor.rgb = texture(iChannel1,curDir).rgb* 0.5;\n        }\n   }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}