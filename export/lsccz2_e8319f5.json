{"ver":"0.1","info":{"id":"lsccz2","date":"1519558920","viewed":155,"name":"Parabolas ","username":"cailuming","description":"parabolas graph,but it seems that there are still some problems which I can not deal with in 3d , what I want is smooth axis and formula graph...","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AXIS_WIDTH 1.\n#define BIAS 1e-15\nstruct Ray {\n   vec3 o;\n   vec3 d;\n};\n    \nmat2 rot2D(float theta){\n    float s =sin(theta);\n    float c =cos(theta);\n    \n    return mat2(\n      c,-s,\n      s ,c\n    );\n}\n// the general parabolas formula    \nvoid parabolas(vec3 p,vec3 ct,inout vec3 col){\n    \n    p-=ct;\n   \n    float a =1.0;\n    float b =6.0;\n    float c =2.0;\n    // used to drive the dot\n    float d = 6.*sin(iTime*0.5);\n    \n    float fx = a*p.x*p.x+b*p.x+c;\n    float fx1 = a*d*d+b*d+c;\n    \n    vec3 formula = vec3(p.x,fx,0);\n    vec3 formula1 = vec3(d,fx1,0);\n    \n    float v = length(p-formula);\n    \n    v=0.6/(v);\n    \n    v = pow(v,6.0);\n    \n    col+=vec3(v,v,v*0.1)*1./64.;\n    \n    // draw the trace dot\n    \n    float v1 = length(p-formula1);\n    \n    v1=1./(v1);\n    \n    v1 = pow(v1,4.0);\n    \n    col+= vec3(v1,v1*0.1,v1)*1./64.;\n}\n \n\nvoid Axis (inout vec3 col,vec3 uv){\n    \n    vec3 ax = vec3(uv.x,0,0);\n    vec3 ay = vec3(0,uv.y,0);\n    vec3 az = vec3(0,0,uv.z);\n    \n    float vx = AXIS_WIDTH/length(uv-ax);\n    float vy = AXIS_WIDTH/length(uv-ay);\n    float vz = AXIS_WIDTH/length(uv-az);\n    \n    \n    vx=pow(vx,2.6);\n    vy=pow(vy,2.6);\n    vz=pow(vz,2.6);\n    \n    col+= vec3(vx*0.2,vx*0.2,vx)*1./64.0;   \n    col+= vec3(vy,vy*0.3,vy*0.2)*1./64.0;\n    col+= vec3(vz*0.3,vz,vz*0.2)*1./64.0;\n}\n\n\nvoid drawGraph(inout vec3 col,Ray r){\n    vec3 p =vec3(0);\n    for(float i=0.0;i<32.;i+=0.4){\n        p=r.o+r.d*i;\n       \n        Axis (col,p);\n        parabolas(p,vec3(0,0,0),col);\n    }\n    \n}\n    \nvoid setCamera(inout Ray r,vec3 eye,vec3 dir,vec2 uv){\n    vec3 look = normalize(dir-eye);\n    vec3 right = normalize(cross(vec3(0,1,0),look));\n    vec3 up = normalize(cross(look,right));\n    \n    r.o = eye;\n    r.d =normalize(uv.x*right+uv.y*up+look);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    vec2 ms = iMouse.xy/iResolution.xy - vec2(0.5);\n    float as = iResolution.x/iResolution.y;\n \n    uv.x*=as;\n    ms.x*=as;\n    if(length(iMouse.zw)>0.){\n       uv-= ms;\n    }\n    \n    Ray ray;\n    vec3 eye = vec3(16.0*cos(iTime),2,16.0*sin(iTime));\n    vec3 dir = vec3(0,0,0);\n    vec3 lp = vec3(10.0*cos(iTime),10,10.0*sin(iTime));\n    vec3 col =vec3(0.0,0.0,0.0);\n    \n   \n    setCamera(ray,eye,dir,uv);\n   \n    drawGraph(col,ray);\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}