{"ver":"0.1","info":{"id":"XdKfDw","date":"1529086805","viewed":195,"name":"Book of Shaders - transformation","username":"barakchamo","description":"Practicing the book of shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colors","rotation","transformation","bookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_mouse;\nuniform float u_time;\n\nint gridSize = 50;\nfloat lineWidth = 0.01;\n\n/*\n  circle()\n    st - current pixel coordinates\n    xy - normalized circle center position\n    r  - circle radius (0.0 to 1.0)\n    fade - edge fade (0.0 to 1.0, as a percent of radius)\n*/\nfloat circle(in vec2 st, in vec2 xy, in float r, in float fade) {\n    vec2 dist = st - xy;\n\n    return 1.0 - smoothstep(\n      r - r * fade,\n      r + r * fade,\n      dot(dist, dist * 4.0)\n    );\n}\n\n/*\n  polygon()\n*/\nvec3 polygon(in vec2 st, in vec2 xy, in int n, in float angle, in float size, in float fade, in float pull) {//, in vec2 xy, in float r, in float fade) {\n   float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  vec2 mappedSt = (st + xy) *2.-1.;\n\n  // Angle and radius from the current pixel\n  float a = atan(mappedSt.x,mappedSt.y) + PI * (angle * 2.0 + 1.0);\n  float _r = TWO_PI / float(n);\n\n  // Shaping function that modulate the distance\n  d = cos(floor((0.5 + pull) + a / _r) * _r - a) * length(mappedSt);\n\n  return vec3(1.0 - smoothstep(size,size + fade + 0.01,d));\n}\n\n/*\n  polyRipple()\n*/\nvec3 polyRipple(in vec2 st, in vec2 xy, in int n, in float angle, in float size, in float fade, in float pull) {//, in vec2 xy, in float r, in float fade) {\n   float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  vec2 mappedSt = (st + xy) *2.-1.;\n\n  // Angle and radius from the current pixel\n  float a = atan(mappedSt.x,mappedSt.y) + PI * (angle * 2.0 + 1.0);\n  float _r = TWO_PI / float(n);\n\n  // Shaping function that modulate the distance\n  d = cos(floor((0.5 + pull) + a / _r) * _r - a) * length(mappedSt);\n\n  // return vec3(1.0 - smoothstep(size,size + fade + 0.01, d));\n  return vec3(clamp(fract(d * 10.0) + fade, 0.0, 1.0));\n}\n\n/*\n  ripple()\n\n*/\n\nvec3 ripple(in vec2 st, in vec2 offset, in float freq, in float pos, in float grade) {\n  // Remap the space to -1. to 1.440\n  vec2 xy = st *2.-1.;\n\n  // Make the distance field\n  float d = length( xy - offset );\n\n  // Visualize the distance field\n  return vec3(clamp(fract(d*freq + pos) + grade, 0.0, 1.0));\n}\n\n/*\n  grid()\n    st - current pixel coordinates\n    lineWidth - width of line stroke\n    gridCount - number of grid lines in X and Y axes\n    flatten - flatten XY grid colors\n    dots - draw dots instead of line strokes\n*/\nvec2 grid(in vec2 st, in float lineWidth, in float gridCount, in bool flatten, in bool dots) {\n  vec2 xy = fract(st * gridCount);\n\n  vec2 color = step(lineWidth, vec2((xy.x) , (xy.y)));\n  color *= step(lineWidth, 1.0 - vec2((xy.x) , (xy.y)));\n\n  vec2 _out;\n\n  if(!flatten) {\n    return color;\n  }\n\n  if(dots != true) {\n    _out = vec2(min(color.x, color.y));\n  } else {\n    _out = vec2(max(color.x, color.y));\n  }\n\n  return _out;\n}\n\n/*\n  posSin()\n  transforms sine function from -1 - 1 range to 0 - 1\n*/\nfloat posSin(in float n) {\n  return (sin(n) + 1.0) / 2.0;\n}\n\n/*\n  posSin()\n  transforms cosine function from -1 - 1 range to 0 - 1\n*/\nfloat posCos(in float n) {\n  return 0.5 + cos(n) / 2.0;\n}\n\nmat2 rotate2d(float _angle) {\n    return mat2(\n      cos(_angle), -sin(_angle),\n      sin(_angle), cos(_angle)\n    );\n}\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(1.000,0.833,0.224);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float u_time = iTime;\n  vec2 st = fragCoord/iResolution.xy;\n  // st.x *= st.x/st.y;\n  vec3 color = vec3(1.0);\n  float d = 0.0;\n\n  vec3 pct = vec3(st.x);\n\n  st.x = st.x + sin((fract(u_time / 5.0) + st.y) * 20.0) / 100.0;\n\n  // offset grid position by time\n  vec2 xy = st + fract(u_time / 20.0);\n\n  pct.r += polyRipple(st, vec2(0.0), 3, fract(-u_time / 10.0) , 0.33, 0.0, 0.0).r / -4.0;\n  pct.g += polyRipple(st, vec2(0.0), 4, fract(u_time / 10.0) , 0.33, 0.0, 0.0).r / -4.0;\n  pct.b += polyRipple(st, vec2(0.0), 5, fract(u_time / 10.0 + 0.5) , 0.33, 0.0, 0.0).r / -4.0;\n\n  st.x = st.x + sin((fract(u_time / 2.0) + st.y) * 50.0) / 50.0;\n\n  // move space from the center to the vec2(0.0)\n  st -= vec2(0.5);\n  // rotate the space\n  st = rotate2d( sin(u_time / 2.0 * PI) ) * st;\n  // move it back to the original place\n  st += vec2(0.5);\n\n  pct.r -= circle(st, vec2(0.1, 0.9), 0.333, posSin(u_time * 2.0)) ;\n  pct.r -= circle(st, vec2(0.9, 0.1), 0.333, posSin(u_time * 2.0)) ;\n  pct.g -= circle(st, vec2(0.1, 0.1), 0.333, posSin(u_time * 2.0)) ;\n  pct.g -= circle(st, vec2(0.9, 0.9), 0.333, posSin(u_time * 2.0)) ;\n\n  color = mix(colorA, colorB, pct);\n  fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}