{"ver":"0.1","info":{"id":"dlfSW8","date":"1674671313","viewed":156,"name":"Flashlight dark scene","username":"Famousghost","description":"Simple flash light scene:\nwasd - movement\nmouse - flashlight rotation","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["raycast","spotlight","sobelfilter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rayCastRect(Ray ray, vec2 fragDirection, Boundary boundary)\n{\n    vec2 ro = ray.origin;\n    vec2 rd = normalize(fragDirection);\n    vec2 mins = boundary.minValue;\n    vec2 maxs = boundary.maxValue;\n    float t1 = (mins.x - ro.x) / rd.x;\n    float t2 = (maxs.x - ro.x) / rd.x;\n    float t3 = (mins.y - ro.y) / rd.y;\n    float t4 = (maxs.y - ro.y) / rd.y;\n    \n    float maxMin = max(min(t1, t2), min(t3, t4));\n    float minMax = min(max(t1, t2), max(t3, t4));\n    \n    if(minMax < 0.0f)\n    {\n        return 0.0f;\n    }\n    \n    if(maxMin > minMax)\n    {\n        return 0.0f;\n    }\n    \n    if(maxMin < 0.0f)\n    {\n        return minMax;\n    }\n    \n    return maxMin;\n}\n\nvec3 Render(Ray ray, Rect rect[MAX_RECT_AMOUNT], vec2 fragDirection, vec2 uv)\n{\n    vec3 col = vec3(0.0f);\n    float flashLightArea = max(dot(ray.direction, normalize(fragDirection)), 0.0f) - max(FLASHLIGHT_ANGLE_SIZE, 0.0f);\n\n    vec3 normal = texture(iChannel2, uv).rgb;\n    col = mix(texture(iChannel1, uv + normal.xy).rgb, vec3(0.0f), length(fragDirection));\n    col = mix(col, vec3(0.0f), 1.0f - clamp(flashLightArea * FLASHLIGHT_STRENGTH, 0.0f, 1.0f));    \n   \n    for(int i = 0 ; i < MAX_RECT_AMOUNT; ++i)\n    {\n        float dist = rayCastRect(ray, fragDirection, rect[i].boundary);\n\n        if(dist > 0.0f)\n        {\n            vec2 p = ray.origin + normalize(fragDirection) * dist;\n\n            float hitFactor = length(p - ray.origin) - length(fragDirection);\n\n            col = mix(vec3(0.0f), col, step(0.0f, hitFactor));\n\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - 0.5f * iResolution.xy)/iResolution.y;\n\n    vec2 mousePos = (iMouse.xy - 0.5f * iResolution.xy)/iResolution.y;\n\n    vec2 movement = texelFetch(iChannel0, ivec2(0, 0), 0).rg;\n    \n    Ray ray;\n    ray.origin = movement;\n    ray.direction = normalize(mousePos - ray.origin);\n    vec2 fragDirection = uv - ray.origin;\n    \n    Rect rect[MAX_RECT_AMOUNT];\n    rect[0] = createRect(vec2(0.5f, 0.0f), vec2(0.1f, 0.2f));\n    rect[1] = createRect(vec2(-0.5f, 0.2f), vec2(0.1f, 0.2f));\n    rect[2] = createRect(vec2(0.2f, -0.3f), vec2(0.1f));\n    rect[3] = createRect(vec2(-0.2f, 0.5f), vec2(0.1f));\n    rect[4] = createRect(vec2(-0.2f, -0.3f), vec2(0.15f));\n   \n    // Output to screen\n    fragColor = vec4(Render(ray, rect, fragDirection, uv),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//----------------COMMON VARIABLES----------------//\n\n#define MAX_RECT_AMOUNT 5\nconst float FLASHLIGHT_ANGLE_SIZE = cos(radians(38.0f));\n\nconst float FLASHLIGHT_STRENGTH = 10.0f;\n\n\nconst int KEY_W = 87;\nconst int KEY_S = 83;\nconst int KEY_A = 65;\nconst int KEY_D = 68;\n\nconst float VELOCITY = 0.5f;\n\n//----------------COMMON VARIABLES----------------//\n\n//----------------COMMON TYPES----------------//\n\nstruct Ray\n{\n    vec2 origin;\n    vec2 direction;\n};\n\nstruct Boundary\n{\n    vec2 minValue;\n    vec2 maxValue;\n};\n\nstruct Rect\n{\n    vec2 position;\n    vec2 size;\n    Boundary boundary;\n};\n\n//----------------COMMON TYPES----------------//\n\n//----------------COMMON FUNCTIONS----------------//\n\nBoundary createBoundary(vec2 pos, vec2 size)\n{\n    Boundary boundary;\n    boundary.minValue = pos - size;\n    boundary.maxValue = pos + size;\n    \n    return boundary;\n}\n\nRect createRect(vec2 pos, vec2 size)\n{\n    Rect rect;\n    rect.position = pos;\n    rect.size = size;\n    rect.boundary = createBoundary(pos, size);\n    return rect;\n}\n\n//----------------COMMON FUNCTIONS----------------//\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 updateMovement()\n{\n    float wKey = texelFetch(iChannel0, ivec2(KEY_W, 0), 0).r;\n    float sKey = -texelFetch(iChannel0, ivec2(KEY_S, 0), 0).r;\n    float aKey = -texelFetch(iChannel0, ivec2(KEY_A, 0), 0).r;\n    float dKey = texelFetch(iChannel0, ivec2(KEY_D, 0), 0).r;\n    \n    return vec4(wKey, sKey, aKey, dKey);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x < 1.0f)\n    {\n        vec2 mousePos = (iMouse.xy - 0.5f * iResolution.xy)/iResolution.y;\n        vec4 movement = updateMovement();\n        vec2 result = texelFetch(iChannel1, ivec2(fragCoord), 0).rg  + vec2(movement.b + movement.a, (movement.r + movement.g) * mousePos) * VELOCITY * iTimeDelta;\n        vec2 scale =  texelFetch(iChannel1, ivec2(1, 0), 0).rg;\n        float scaleValue = (scale.x + scale.y);\n        vec2 clampValue = vec2(0.8f, 0.8f) * vec2(1.0f, iResolution.y / iResolution.x);\n        fragColor = vec4(clamp(result, -clampValue, clampValue), 0.0f, 0.0f);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 calculateNormalMapSobel(vec2 fragCoord)\n{\n\n    vec2 dir = vec2(1.0f, 1.0f);\n    \n    vec2 uvLeft =    (fragCoord + vec2(-dir.x, 0.0f)) / iResolution.xy;\n    vec2 uvLeftTop = (fragCoord + vec2(-dir.x, dir.y)) / iResolution.xy;\n    vec2 uvTop =     (fragCoord + vec2(0.0f, dir.y)) / iResolution.xy;\n    vec2 uvRightTop =(fragCoord + vec2(dir.x, dir.y)) / iResolution.xy;\n    vec2 uvRight =   (fragCoord + vec2(dir.x, 0.0f)) / iResolution.xy;\n    vec2 uvRightBot =(fragCoord + vec2(dir.x,-dir.y)) / iResolution.xy;\n    vec2 uvBot =     (fragCoord + vec2(0.0f, -dir.y)) / iResolution.xy;\n    vec2 uvLeftBot = (fragCoord + vec2(-dir.x, -dir.y)) / iResolution.xy;\n\n    \n    \n    \n    float leftTop = texture(iChannel0, uvLeftTop).r;\n    float left = texture(iChannel0, uvLeft).r;\n    float leftBot = texture(iChannel0, uvLeftBot).r;\n    \n    float rightTop = texture(iChannel0, uvRightTop).r;\n    float right = texture(iChannel0, uvRight).r;\n    float rightBot = texture(iChannel0, uvRightBot).r;\n   \n        \n    float top = texture(iChannel0, uvTop).r;\n    float bot = texture(iChannel0, uvBot).r;\n    \n    \n    return vec2(leftTop * -1.0f + left * -2.0f + leftBot * -1.0f + rightTop + right * 2.0f + rightBot, \n                leftTop * -1.0f + top * -2.0f + rightTop * -1.0f + leftBot + bot * 2.0f + rightBot);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sobel = calculateNormalMapSobel(fragCoord);\n    float len = length(sobel);\n    float angle = atan(sobel.y, sobel.x);\n    fragColor = vec4(normalize(vec3(sobel, 1.0f)),len);\n}","name":"Buffer B","description":"","type":"buffer"}]}