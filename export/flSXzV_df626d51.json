{"ver":"0.1","info":{"id":"flSXzV","date":"1628029246","viewed":164,"name":"Mod clip outside","username":"v1rgul","description":"test","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define PIXELR 0.5/iResolution.x\n#define FAR 50.0\n\n#define PI 3.14159265\n#define PHI (sqrt(5)*0.5 + 0.5)\n\n#define HASHSCALE1 0.1031\n\nconst vec3 FOG_COLOR = vec3(0.5, 0.55, 0.65);\n\n//Distance functions and helpper functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax3(abs(p) - b);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a){\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n\nfloat sdf(vec3 p){\n    // neighbour trick\n    /*float cellIndex = pMod1(p.x, 4.0);\n    vec3 p_ = p;\n    pR(p_.yx, (cellIndex+0.0)*.2+iTime*.5);\n    float box = fBox(p_, vec3(1.0));\n    vec3 p1 = p+vec3(2.0,0.0,0.0);\n    pR(p1.yx, (cellIndex-0.5)*.2+iTime*.5);\n    float box1 = fBox(p1, vec3(1.0));\n    vec3 p2 = p-vec3(2.0,0.0,0.0);\n    pR(p2.yx, (cellIndex+0.5)*.2+iTime*.5);\n    float box2 = fBox(p2, vec3(1.0));\n    \n    return min(box,min(box1,box2));*/\n    \n    // 1D full repetition of pMod\n    /*vec3 p1 = p;    \n    float cellIndex_ = pMod1(p1.x, 4.0);\n    pR(p1.yx, cellIndex_*.5+iTime*.5);\n    float box1 = fBox(p1, vec3(1.0));\n    \n    vec3 p2 = p+vec3(2.0,0.0,0.0);    \n    float cellIndex2 = pMod1(p2.x, 4.0);\n    cellIndex2 -= 0.5;\n    pR(p2.yx, cellIndex2*.5+iTime*.5);\n    float box2 = fBox(p2, vec3(1.0));    \n    \n    return min(box1,box2);*/\n    \n    \n    // 2D full repetition of pMod\n    vec2 gridSize = vec2(4.0);\n    vec2 cellIndexRatio = vec2(0.333);\n    float timeRatio = 1.0;\n    \n    vec3 p1 = p;    \n    vec2 cellIndex1 = pMod2(p1.xz, gridSize);\n    pR(p1.yx, length(cellIndex1*cellIndexRatio)+iTime*timeRatio);\n    float box1 = fBox(p1, vec3(1.0));\n    \n    vec3 p2 = p+vec3(2.0,0.0,0.0);    \n    vec2 cellIndex2 = pMod2(p2.xz, gridSize);\n    cellIndex2 -= vec2(0.5, 0.0);\n    pR(p2.yx, length(cellIndex2*cellIndexRatio)+iTime*timeRatio);\n    float box2 = fBox(p2, vec3(1.0));\n    \n    vec3 p3 = p+vec3(0.0,0.0,2.0);    \n    vec2 cellIndex3 = pMod2(p3.xz, gridSize);\n    cellIndex3 -= vec2(0.0, 0.5);\n    pR(p3.yx, length(cellIndex3*cellIndexRatio)+iTime*timeRatio);\n    float box3 = fBox(p3, vec3(1.0));\n    \n    vec3 p4 = p+vec3(2.0,0.0,2.0);    \n    vec2 cellIndex4 = pMod2(p4.xz, gridSize);\n    cellIndex4 -= vec2(0.5, 0.5);\n    pR(p4.yx, length(cellIndex4*cellIndexRatio)+iTime*timeRatio);\n    float box4 = fBox(p4, vec3(1.0));\n    \n    \n    return min(box1,min(box2,min(box3,box4)));\n}\n\n//calculate normals for objects\nvec3 normals(vec3 p){\n\tvec3 eps = vec3(PIXELR, 0.0, 0.0 );\n    return normalize(vec3(\n        sdf(p+eps.xyy) - sdf(p-eps.xyy),\n        sdf(p+eps.yxy) - sdf(p-eps.yxy),\n        sdf(p+eps.yyx) - sdf(p-eps.yyx)\n    ));\n}\n\n//Ambient occlusion method from https://www.shadertoy.com/view/4sdGWN\n//Random number [0:1] without sine\nfloat hash(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff ){\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(sdf( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\nvec3 colorify(vec3 ld, vec3 p, vec3 lc){\n\n\tvec3 cc = vec3(0.8) * (ambientOcclusion(p, normals(p), 4.0, 2.0) + \n                           ambientOcclusion(p, normals(p), 6.0, 1.5));\n    cc += lc;\n    cc *=0.5;\n\treturn cc;\n}\n\n\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld, vec3 lc){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.03);\n\tvec3  fogColor = mix(FOG_COLOR, lc, pow(sunAmount, 4.0));\n    return mix(col, fogColor, fogAmount);\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.0001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.05;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(sdf(ro));\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*sdf(p);\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < PIXELR || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*sdf(p));\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= PIXELR){\n\t\tt = candidate_t;\n\t}\n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(10.0*cos(iTime*0.1), 3.5+sin(iTime*0.05), 12.0*sin(iTime*0.1));\n    vec3 rt = vec3(0.0, 2.5, 0.0);\n    \n    //vec3 ro = vec3(0.0, 2.0, iTime*0.5);\n    //vec3 rt = vec3(0.0, 1.0, ro.z+8.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \n    vec3 ld = (ro-rt)/distance(ro, rt);\n    vec3 ld2 = (rt-vec3(0.0, -2.0, -8.0))/distance(vec3(0.0, -2.0, -8.0), rt);\n    \n    vec3 lcol = vec3(0.6, 0.6, 0.55);\n    vec3 lcol2 = vec3(0.7, 0.7, 0.6);  \n    vec3 col = FOG_COLOR;\n    \n    float t = march(ro, rd);\n\tvec3 p = rd*t+ro;\n    \n    if(t <= FAR){\n\t\tcol = colorify(ld, p, lcol); +\n\t\t\tcolorify(ld2, p, lcol2);\n\t}\n    \n    vec3 fg = fog(col, p, ro, rd, ld, lcol) +\n\t\tfog(col, p, ro, rd, ld2, lcol2);\n\tcol = fg*0.5;\n    \n    col = pow(col, 1.0/vec3(2.2));\n    \n\tfragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}