{"ver":"0.1","info":{"id":"NlBcRw","date":"1649324946","viewed":84,"name":"TP6","username":"salah","description":"TP6","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\nconst float View = 2800.0;  \nconst int Steps = 400;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v;\n    int i;\n};\nfloat turbulence(vec3 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses\n// o permet dInitialiser le nombre d'octave\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*Noise(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n   \n}\nvec3 N3D (vec3 p) //noise appliquer au 3 vecteurs\n{\n    return vec3(Noise(p+vec3(44,09.0,-12)),Noise(p+vec3(4,87,2)),Noise(p+vec3(-44,0,33)));\n}\nvec3 lerp(vec3 colorone, vec3 colortwo, float value)\n{\n\treturn (colorone + value*(colortwo-colorone));\n}\n    mat2 Rotation(float a){ //fonction de rotation sur deux axe\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);  //matrice de rotation (cos, -sin, sin, cos)\n}\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T //model de phong\n{\n    vec3 ma;//couleur ambiante\n    vec3 md;//couleur diffuse\n    vec3 ms;//couleur speculaire\n    float a;//coeficient ambiante\n    float d;//coeficient diffuse\n    float s;//coeficient speculaire\n    float sigma;//coeficient du shadow\n    };\n//fonction\nvec3 rotateX(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Matrice de rotation selon l'axe Y\nvec3 rotateY(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Matrice de rotation selon l'axe Z\nvec3 rotateZ(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n//homotethie\n\nvec3 homo(vec3 p,float k)\n{\n    return p*k;\n}\n//translation\nvec3 translation(vec3 p,vec3 t)\n{\n    return p-t;\n}\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n//difference\nfloat diff(float a,float b)\n{\n    return max(a,-b);\n}\n\n\nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( 1.0-Hash(i+vec2(0,0)), \n                        1.0-Hash(i+vec2(1,0)),f.x),\n                   mix( 1.0-Hash(i+vec2(0,1)), \n                        1.0-Hash(i+vec2(1,1)),f.x),f.y);\n}\nvec2 N2D (vec2 p) //noise appliquer au 3 vecteurs\n{\n    return vec2(Noise(p+vec2(300,0)),Noise(p+vec2(105,0)));\n}\nfloat turbulence(vec2 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses\n// o permet dInitialiser le nombre d'octave\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*Noise(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n   \n}\n\nfloat ridgeN(in vec2 a)\n{\n return 1.0-(2.0*(abs(Noise(a))));\n}\n\nfloat ridgeturbulence(vec2 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses\n// o permet dInitialiser le nombre d'octave\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*ridgeN(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n   \n}\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n\treturn ridgeturbulence(p.xy,350.0,200.0,9);//terrain avec du bruit accentué (ridge) \n} \n//\nfloat mer(in vec3 p)\n{\n    float z = turbulence(p.xy,2.0,1.0,1); //un terrain avec un tout petit peu de turbulences\n    float h = (p.z - z)/2.0; \n    return h;\n}\n// Implicit surface defining the terrain\n// p : Point\nV ImplicitTerrain(in vec3 p,int index)\n{\n    float z = Terrain( p.xy );\n    float h = (p.z - z)/5.0; \n    return V(h,index);\n}\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere\n// p : point\n// c : center\n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\nV Sphere1(vec3 p, vec3 c,float r,int index)//la fonction sphère avec des turbulences pour modélisé la lune\n{\n    float h = length(p-c)-r+turbulence(p,4.0,1.0,5);\n    h = h/3.0;\n  return V(h,index);\n}\n// Cube\n// p : point\n// c : center\n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane\n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(turbulence(p,1.0,0.15,4)+dot((p-o),n),index);\n}\n//box\nV Box( vec3 p, vec3 b,int index )\n{\n  vec3 q = abs(p) - b;\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else\n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else\n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Dice\n// p : point\n// c : center\n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n//\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nV ss(vec3 p, float la, float lb, float h, float ra,int index)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return V(min(max(q.x,q.y),0.0) + length(max(q,0.0)),index);\n}\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n    \n    \n    \n    \n    V m;\n    vec3 t = p + iTime*vec3(100,100,0);//mouvement de leau \n     m.v=mer(t);\n     m.i=3;\n     vec3 L = p;\n      L.zy  *= Rotation(iTime);//mouvement de la lune autour de la sphere \n  \n  \n  \n  V u  = \n      Union(Sphere1 (L,vec3(100,300,300),50.0,4),\n      Intersection( Union( m , ImplicitTerrain(p,1)), Sphere(p,vec3(0.0,0.0,0.0),350.0,2)));\n \n \n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n   vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0;\n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\nvec3 montagne(in vec3 p)\n{\n    \nfloat d = length(p.z);//d est la longeur en tout point de p et d'un autre point\n\n    d -= 40.0;\n   float v = 0.5*(cos(d/90.0))+(0.5);//j'ai repris la fonction bois que jai adapter avec deux couleur \n  \n  p = lerp(vec3(0.9,0.9,0.9),vec3(0.24,0.13,0.015),v);//lerp nous fait l’addfait l’addition linéaire de deux vec3\n  return p;\n}\n\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.80,0.40,0.10),vec3(0.80,0.50,0.20),vec3(0.80,0.60,0.30),0.5,0.9,0.9,44.0);  \n}   //texture avec aspect sableux et couleur du desert\n\nT Texture1(in vec3 p)\n{\n  return T(montagne(p),montagne(p),montagne(p),0.8,0.8,0.8,1.0);  \n    }\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(0.7,0.7,0.7),vec3(0.7,0.7,0.7),vec3(0.7,0.7,0.7),0.3,0.3,0.3,0.25);  \n}\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(0.0117,0.1328,0.2968),vec3(0.0117,0.1328,0.2968),vec3(1,1,1),0.1,0.3,0.1,0.6);    \n}\nT Texture4(in vec3 p)\n{\n    vec3 h = mix(vec3(0.92,0.91,0.90),vec3(0.74,0.72,0.72),Fbm(p/50.0));//couleur de la lune\n  return T( vec3(0.92,0.91,0.90),vec3(0.74,0.72,0.72),h,0.2,0.5,1.0,1.0);    \n}\n// Compute texture\n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n       \n        return Texture0(p);\n    }\n    else if (vp.i==1)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture3(p);\n    }\n     else if (vp.i==4)\n    {\n        return Texture4(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n       // Point light\n      \n     vec3 lp = vec3(100.0, 400.0, 550.0);\n     lp.zy *= Rotation(iTime); // rotation de la lumière pour faire un effet de succession des jours/nuits\n   \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = tex.a*tex.ma;\n       \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = tex.d * clamp(dot(n, l),0.0,1.0) * tex.md;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.ms * pow(clamp(dot(r,l),0.0,tex.s),tex.sigma) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n   \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n   \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, View,hit, s);\n \n    // Position\n    vec3 pt = ro + t * rd;\n   \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s);\n  }\n\n\n  color=vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    //\n    ro=vec3(500.0,600.0,200.0);\n    \n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}