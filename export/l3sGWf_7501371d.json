{"ver":"0.1","info":{"id":"l3sGWf","date":"1708009487","viewed":95,"name":"double slit wave simulation","username":"woksan","description":"simulating wave equation with shader and double slit stuff","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 frag_color, in vec2 frag_coord)\n{\n  vec2 uv = frag_coord / iResolution.xy;\n  \n  if (texture(iChannel1, uv).r > 0.0) {\n      frag_color = vec4(1.0, 1.0, 1.0, 1.0);\n      return;\n  }\n  \n  float h = texture(iChannel0, uv).r;\n  \n  float x = 0.0;\n  float y = 0.0;\n  \n  if (h < 0.0) {\n    x = -h;\n  } else {\n    y = h;\n  }\n  \n  frag_color = vec4(x, mix(x, y, 0.5), y, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 frag_color, in vec2 frag_coord)\n{\n  if (texture(iChannel1, frag_coord / iResolution.xy).r > 0.0) {\n      frag_color = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n  }\n  \n  ivec2 uv = ivec2(frag_coord);\n  \n  vec2 p = texelFetch(iChannel0, uv, 0).xy;\n  \n  float u = p.r;\n  float u_t = p.g;\n  \n  float du_dx_1 = u - texelFetch(iChannel0, ivec2(uv.x - 1, uv.y), 0).x;\n  float du_dy_1 = u - texelFetch(iChannel0, ivec2(uv.x, uv.y - 1), 0).x;\n  \n  float du_dx_2 = texelFetch(iChannel0, ivec2(uv.x + 1, uv.y), 0).x - u;\n  float du_dy_2 = texelFetch(iChannel0, ivec2(uv.x, uv.y + 1), 0).x - u;\n  \n  float d2u_dx2 = du_dx_2 - du_dx_1;\n  float d2u_dy2 = du_dy_2 - du_dy_1;\n  \n  float d2u_dt2 = d2u_dx2 + d2u_dy2;\n  \n  float c = 0.4;\n  \n  float u_0 = u * 2.0 - u_t + c * d2u_dt2;\n  \n  frag_color = vec4(u_0, u, 0.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 frag_color, in vec2 frag_coord)\n{\n  if (texture(iChannel1, frag_coord / iResolution.xy).r > 0.0) {\n      frag_color = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n  }\n  \n  ivec2 uv = ivec2(frag_coord);\n  \n  vec2 p = texelFetch(iChannel0, uv, 0).xy;\n  \n  float u = p.r;\n  float u_t = p.g;\n  \n  float du_dx_1 = u - texelFetch(iChannel0, ivec2(uv.x - 1, uv.y), 0).x;\n  float du_dy_1 = u - texelFetch(iChannel0, ivec2(uv.x, uv.y - 1), 0).x;\n  \n  float du_dx_2 = texelFetch(iChannel0, ivec2(uv.x + 1, uv.y), 0).x - u;\n  float du_dy_2 = texelFetch(iChannel0, ivec2(uv.x, uv.y + 1), 0).x - u;\n  \n  float d2u_dx2 = du_dx_2 - du_dx_1;\n  float d2u_dy2 = du_dy_2 - du_dy_1;\n  \n  float d2u_dt2 = d2u_dx2 + d2u_dy2;\n  \n  float c = 0.4;\n  \n  float u_0 = u * 2.0 - u_t + c * d2u_dt2;\n  \n  float l = length(frag_coord - iMouse.xy);\n  u_0 += (iMouse.z > 0.0 ? 1.0 : 0.0) * 0.4 / (l * l) * cos(iTime * 16.0);\n  \n  frag_color = vec4(u_0, u, 0.0, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float slit_size = 0.05;\n    float slit_gap = 0.02;\n    \n    if (\n        (uv.x > 0.0 && uv.x < 0.5 - slit_size && uv.y > 0.5 && uv.y < 0.52) ||\n        (uv.x > 0.5 - slit_size + slit_gap && uv.x < 0.5 + slit_size - slit_gap && uv.y > 0.5 && uv.y < 0.52) ||\n        (uv.x > 0.5 + slit_size && uv.x < 1.0 && uv.y > 0.5 && uv.y < 0.52)\n    ) {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    } else {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}