{"ver":"0.1","info":{"id":"dsXXRS","date":"1669128998","viewed":103,"name":"PID Signal Controller","username":"Ultraviolet","description":"Click to take control of the target value.\nYou can set K_{p,i,d} in Buffer A.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["control","signal","pid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BG_COLOR vec3(.9)\n#define FG_COLOR vec3(.8)\n#define ST_COLOR vec3(.1)\n#define FG_COLOR_2 vec3(.7,.7,.8)\n#define ST_COLOR_2 vec3(.1,.1,.2)\n#define BAR_COLOR vec3(.9,.1,.1)\n\nfloat PointSegDistance(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat target() {\n    return texture(iChannel0, vec2(1.,0.)).x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 next_uv = (fragCoord+vec2(1.,0.))/iResolution.xy;\n    vec2 prev_uv = (fragCoord-vec2(1.,0.))/iResolution.xy;\n    \n    int x = int(fragCoord.x);\n    float dx = 1./iResolution.x;\n    \n    \n    vec4 val = texture(iChannel0, uv);\n    vec4 next_val = texture(iChannel0, next_uv);\n    vec4 prev_val = texture(iChannel0, prev_uv);\n    \n    if(x == 0)\n        prev_val = val;\n    if(x == int(iResolution.x)-1)\n        next_val = val;\n        \n    \n    vec3 c = BG_COLOR;\n    \n    \n    \n    float v = val.x;\n    vec2 p  = vec2(uv.x   , val.x);\n    vec2 pp = vec2(uv.x+dx, next_val.x);\n    vec2 pm = vec2(uv.x-dx, prev_val.x);\n    \n    float dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    c = mix(c, FG_COLOR, bg_alpha);\n    c = mix(c, ST_COLOR, stroke_alpha);\n    \n    \n    \n    \n    v = val.y;\n    p  = vec2(uv.x   , val.y);\n    pp = vec2(uv.x+dx, next_val.y);\n    pm = vec2(uv.x-dx, prev_val.y);\n    \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    //stroke_alpha *= 0.5;\n    bg_alpha *= 0.5;\n    \n    c = mix(c, FG_COLOR_2, bg_alpha);\n    c = mix(c, ST_COLOR_2, stroke_alpha);\n    \n    \n    \n    float bar_alpha = clamp(1.-abs((uv.y-target())*iResolution.y), 0., 1.);\n    c = mix(c, BAR_COLOR, bar_alpha);\n    \n    \n    \n    \n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Kp .4\n#define Ki .1\n#define Kd .1\n\n#define TWO_PI 6.283\n\n#define TIME (float(iFrame)/60. * 2.)\n\n\nfloat saw_signal(float t) {\n    return (fract(t/TWO_PI)-0.5)*2.;\n}\n\nfloat square_signal(float t) {\n    return floor(saw_signal(t))*2.+1.;\n}\n\nfloat tri_signal(float t) {\n    return (min(fract(t/TWO_PI), fract(2.-t/TWO_PI))-0.25)*4.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dx = vec2(1.,0.)/iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 next_val = texture(iChannel0, uv+dx);\n    \n    if(fragCoord.x>iResolution.x-1.) {\n    \n        if(iMouse.z>0.5)\n            next_val = vec4(iMouse.y)/iResolution.y;\n        else {\n            //next_val = vec4(0.5 + 0.25*sin(TIME));\n            next_val = vec4(0.5 + 0.25*saw_signal(TIME));\n            //next_val = vec4(0.5 + 0.25*tri_signal(TIME));\n            //next_val = vec4(0.5 + 0.25*square_signal(TIME));\n        }\n        \n        \n        vec4 val_0 = texture(iChannel0, uv);\n        vec4 val_1 = texture(iChannel0, uv-dx);\n        vec4 val_2 = texture(iChannel0, uv-2.*dx);\n        \n        float e_t0 = next_val.x - val_0.y;\n        float e_t1 = val_0.x - val_1.y;\n        float e_t2 = val_1.x - val_2.y;\n        \n        float u_t = val_0.y + (Kp+Ki+Kd)*e_t0 - (Kp+2.*Kd)*e_t1 + Kd*e_t2;\n\n        next_val.y = u_t;\n\n    }\n    \n    \n    \n    fragColor = next_val;\n    \n    \n    \n\n}","name":"Buffer A","description":"","type":"buffer"}]}