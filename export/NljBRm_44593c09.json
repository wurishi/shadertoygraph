{"ver":"0.1","info":{"id":"NljBRm","date":"1651939127","viewed":185,"name":"ICE VFX","username":"rge15","description":"It's an ice FX playing with polar coordinates, and some value noise pattern with FBM.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["noise","fbm","vfx","ice","polarcoords"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\nfloat N21( in vec2 p)\n{\n    p = 50.*fract( p * PI);\n    p = 50.*fract((p+vec2(0.24342,709.23))/PI);\n\n    return -1. + 2.*fract((p.x*p.y) );\n}\n\nfloat valueNoise( in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    vec2 func = f*f*(3.-2.*f);\n    \n    float a = N21(i + vec2( 0., 0.));\n    float b = N21(i + vec2( 1., 0.));\n    float c = N21(i + vec2( 0., 1.));\n    float d = N21(i + vec2( 1., 1.));\n\n    return a + ( b - a ) * func.x + ( c - a ) * func.y + ( a -b -c +d ) * func.x * func.y; \n\n}\n\nfloat valueFBM( in vec2 p, in float H )\n{\n    float d = 0.;\n    int numOctaves = 2;\n    for(int i = 0; i < numOctaves; i++)\n    {\n        float f = pow(2., float(i));\n        float a = pow(f,-H);\n        d += a*valueNoise(f*p);\n    }\n\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy)/iResolution.y;\n\n    vec2 p_uv = vec2(atan(uv.x,uv.y), length(uv));\n\n    vec2 ndc = vec2( p_uv.x / 6.283 + 0.5, p_uv.y );\n\n#if 1\n    float x = ndc.x * 8. - iTime*.4;\n    float y = ndc.y;\n    //float y = ndc.y * abs( 1.5 - sin(iTime));\n#else\n    float x = uv.x * 8. - iTime*0.3;\n    float y = uv.y;\n#endif\n\n    //FIRST PART : 1\n    float func12 = min( fract(x*2.+ fract(iTime*0.2)), fract(1.-x*2.5));       \n    \n    float v12 = smoothstep(0.0 ,0.1, func12 - 2. * y + .2 );\n\n    \n    //SECOND PART : 2\n    float func2 = ( pow(cos( PI * x), 3.5 )) * 0.2;\n\n    float v2 = smoothstep(0.0 ,0.1, func2 - 2. * y + .2 );\n\n    //ADDING COLOR\n    vec3 col = exp(v12) * 3.5 * vec3( v12*0.2, v12*0.45, v12*0.65  ) * (length(y));\n    col += (valueFBM(3.*p_uv-iTime,.5)) * exp(v12) * 3.5 * vec3( v12*0.2, v12*0.45, v12*0.65  ) * (length(y));\n    v2 = (valueFBM(6.*p_uv,.5) + 0.5)*v2;\n    col += (v2 * 40.5 * vec3( v12*0.2, v12*0.45, v12*0.65  ) * (length(y)));\n    \n    col += vec3(0.25);\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n    //fragColor = vec4(vec3((valueFBM(6.*p_uv,.5) + 0.5)*v2),1.);\n}","name":"Image","description":"","type":"image"}]}