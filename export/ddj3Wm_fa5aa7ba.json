{"ver":"0.1","info":{"id":"ddj3Wm","date":"1667741966","viewed":96,"name":"XO-Rave","username":"Dem0g","description":"Trying out some basics, also trying to incorporate the microphone and learn how to use buffers.\nCreating a loud noise changes the way the X and O symbols move.\nCreated while reading the Book Of Shaders, Chapter: Patterns.","likes":0,"published":1,"flags":36,"usePreview":0,"tags":["simple","fft","learning","buffer","bos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 tile(vec2 uv, float num, vec2 offset, bool zigzag){\n    uv *= num;\n    vec2 id = vec2(floor(uv.x), floor(uv.y));\n    if(zigzag){\n        id.x = floor(mod(id.x,2.0)) == 0. ? -1. : 1.;\n        id.y = floor(mod(id.y,2.0)) == 0. ? -1. : 1.;\n    }\n    id *= 2.0;\n    vec2 uv_o = vec2(offset.x*id.y,offset.y*id.x);\n    uv.x += uv_o.x;\n    uv.y += uv_o.y;\n    \n    vec2 new = fract(uv);\n    id = vec2(floor(uv.x),floor(uv.y));\n   \n    return vec4(new.x, new.y, id.x, id.y);\n}\n\n    float circle( vec2 uv, float size, float thickness){\n    return step( length(uv-vec2(0.5,0.5)),size) - step( length(uv-vec2(0.5,0.5)),size-thickness);\n}\n\nfloat plus( vec2 uv, float size, float thickness){\n    uv = uv-vec2(0.5,0.5);\n    float plus = step(abs(uv.x),thickness)+step(abs(uv.y),thickness);\n    return sign(plus*(step(abs(uv.x),size)*step(abs(uv.y),size)));\n}\n\nmat2 rotate(float rad){\n    return mat2(cos(rad), sin(rad),-sin(rad),cos(rad));\n}\n\nvec2 offset(float t){\n    float x = floor(mod(t, 2.0)) == 0.0 ? fract(t) : 0.;\n    float y = floor(mod(t, 2.0)) == 0.0 ? 0. : fract(t);\n    return vec2(x,y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    bool beat = texelFetch(iChannel1, ivec2(0,0), 0).x == 0.0;\n    float slow = iTime*0.01;\n    uv -= vec2(0.5) - 0.5*vec2(sin(slow*100.),cos(slow*100.));\n    uv = uv*rotate(iTime);\n    vec4 tile = tile(uv, 6., offset(iTime), beat);//vec2(iTime*0.5,0.0));\n    uv = tile.xy;\n    uv = vec2(0.5)-rotate(iTime*1.)*(uv-vec2(0.5));\n\n    float fft  = textureLod( iChannel0, vec2(uv.x,0.25), 0.0 ).x; \n    \n\n    float pct = mod(tile.z+tile.w,2.)  == 0. ?  plus(uv, 0.3, 0.1) : circle(uv, 0.3, 0.1);\n\n    // Time varying pixel color\n    vec3 col = pct*hsv2rgb(\n        vec3( (100.+iTime)*((tile.z+1.) + 3.*(tile.w+1.))*0.001,\n                1.,\n                0.99\n        )\n    );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float fakeEnergy(){\n    float N = 100.;\n    float stepsize = 1./N;\n    float sum = 0.0;\n    for(float i = 0.; i< 1.; i+=stepsize){\n        float s = textureLod( iChannel1, vec2(i,0.25), 0.0 ).x;\n        sum += s*s; \n    }\n    return sum/N;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 state = texelFetch( iChannel0, ivec2(0,0), 0);\n    if(iFrame == 0) {\n        state = vec4(0.0,0.0,0.0,0.0);\n    }\n    float eng = fakeEnergy();\n    if(eng - state.z >= 0.038){\n        if(state.x == 0.){\n            state = vec4(1.0,1.0,1.0,1.0);\n        } else {\n            state = vec4(0.0,0.0,0.0,0.0);\n        }\n    }\n    state.z = eng;\n    fragColor = state;\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}