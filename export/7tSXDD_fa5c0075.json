{"ver":"0.1","info":{"id":"7tSXDD","date":"1627677334","viewed":504,"name":"Procedural Terrain Generation","username":"sttcvd","description":"Procedural terrain generation using perlin noise","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["noise","terrain","perlin","proceduralgeneration","terraingeneration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float baseHeight = 4.0;\n    int freq = 5;\n    float timeMod = 5.;\n    \n    vec2 sunAngle = vec2(sin(iTime / timeMod), cos(iTime / timeMod));\n    \n    float lastHeight = pNoise(\n        vec2(\n            fragCoord.x + sunAngle.x + iTime * timeMod,\n            fragCoord.y + sunAngle.y + iTime * timeMod\n        ),\n        freq\n    ) * baseHeight;\n    float height = pNoise(\n        vec2(\n            fragCoord.x + iTime * timeMod,\n            fragCoord.y + iTime * timeMod\n        ),\n        freq\n    ) * baseHeight;\n    \n    float modifier = (height - lastHeight) * 4.;\n\n    vec3 col = vec3(height, height, height);\n    \n    col = vec3(0.9 + modifier, 0.9 + modifier, 0.9 + modifier);\n    if (height < 0.8) col = vec3(0.3 + modifier, 0.3 + modifier, 0.3 + modifier);\n    if (height < 0.6) col = vec3(0.2 + modifier, 0.7 + modifier, 0.2 + modifier);\n    if (height < 0.2) col = vec3(0.76 + modifier, 0.7 + modifier, 0.5 + modifier);\n    if (height < 0.1) col = vec3(0.2 + modifier, 0.2 + modifier, 0.7 + modifier);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// noise functions taken from here: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 800./freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(3.1415*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 4.;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}","name":"Common","description":"","type":"common"}]}