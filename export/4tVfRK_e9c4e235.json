{"ver":"0.1","info":{"id":"4tVfRK","date":"1543248980","viewed":278,"name":"Classical mechanics 1","username":"saidwho12","description":"Just a simple gravity shader as test. Collisions are broken lol.\nClick on the screen to reset","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["2d","collision","mechanics","newton","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 map( in vec2 pos, in float dt )\n{\n    vec3 col = vec3(0);\n    for(int i = 0; i < N; ++i)\n    {\n        vec4 A = texelFetch(iChannel0, ivec2(i,0), 0);\n        \n        vec2 p = A.xy;\n        vec2 v = A.zw;\n            \n        p += v * dt;\n        \n        float d = length(pos-p.xy)-R;\n        \n        float m = clamp(length(v)*1.5,0.,1.);\n        \n        col = mix(col, vec3(m, mix(.5, .9, 1.-m), 1.-m), smoothstep(3./iResolution.y, 0., d));\n\t}\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 pos = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0);\n    for(int x = 0; x < blurFrames; ++x)\n    {\n        float dt = float(x) / float(blurFramerate * blurFrames);\n        \n        col += map(pos, dt);\n    }\n    \n    col /= float(blurFrames);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    int i = int(fragCoord.x);\n    if(int(fragCoord.y) != 0 && i > N) discard;\n\n\n    vec4 A = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    vec2 p1 = A.xy;\n    vec2 v1 = A.zw;\n\n\n    float dt = iTimeDelta;\n\n    vec2 F = vec2(0);\n\n    for(int j = 0; j < N; ++j)\n    {\n        if(i != j)\n        {\n            vec4 B = texelFetch(iChannel0, ivec2(j, 0), 0);\n\n            vec2 p2 = B.xy;\n            vec2 v2 = B.zw;\n\n            vec2 u = normalize(p2 - p1);\n            float r = distance(p2, p1);\n            //r = max(r, R + R);\n\n            if(r <= RR && enabledCollisions)\n            {   \n                float d = 0.5 * max(RR - r,0.0);\n\n                p1 -= u * d;\n                p2 += u * d;\n                u = normalize(p2 - p1);\n\n                // Impulse based reaction\n                vec2 vr = v1 - v2;\n\n                float e = -0.5;\n\n                vec2 r1 = R * u;\n                vec2 r2 = -R * u;\n                float jr = (-(1.0 + e) * dot(vr, u)) / (pow(M,-1.) * 2.);\n\n                v1 = v1 + u * jr/M;\n                continue;\n            }\n\n            F += G * (M*M)/(r*r) * u;\n        }\n    }\n\n    vec2 a = F / M;\n    v1 += a * dt;\n    p1 += v1 * dt;\n\n\n\n    fragColor = vec4(p1,v1);\n\n\n    if(iMouse.z > 0.0 || iFrame == 0) {\n        vec2 pos = .85*(hash21(fragCoord.x + iTime)*2.-1.);\n        \n        fragColor = vec4(pos,0.0*vec2(pos.y, -pos.x));\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define M_PI 3.14159\n\nconst float G = 6.67408*1e-11;\nconst float R = 0.05;\nconst float RR = R+R;\nconst float M = M_PI * R * R * 1e9;\n\nconst int N = 32;\n\nint blurFrames = 4;\nint blurFramerate = 24;\n\nbool enabledCollisions = true;\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n","name":"Common","description":"","type":"common"}]}