{"ver":"0.1","info":{"id":"ss2XRz","date":"1619619069","viewed":215,"name":"mosaic_loading_spinner","username":"skaplun","description":"Simple mosaic decay loading animation","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA (20./iResolution.y)\nconst float PI = acos(-1.);\n\nfloat smin( float a, float b, float k ){\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\n\nvec2 hash2( vec2 p )\n{\n\treturn textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n}\n\n#define ANIMATE\nvec3 voronoi( in vec2 x, float outerShape, float ang)\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = smin( md, dot(0.5*(mr+r), normalize(r-mr)), .2);\n        md = smin(md, outerShape, .2 + 6. * pow(ang, 32.));\n    }\n\n    return vec3( md, n + mg );\n}\n\nconst float SCALE = 2.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy)/iResolution.y;\n    uv *= 4.7;\n    uv.y -= .5;\n    float ang = atan(uv.x, uv.y)/PI;\n    float mang = (ang + 1.) * .5;\n    \n    float shape = distance(3.2, length(uv)) - mang * SCALE;\n    shape = SCALE * .1 - shape;\n    \n    vec3 vor = voronoi(uv, shape, mang);\n    vec3 vor2 = voronoi(vec2(mang, length(uv)) * vec2(48., 4.), shape, mang);\n    //vor -= vor2 - vor;\n    vor += min(vor, vor2);\n    //vor += max(vor, vor2);\n    fragColor = .1 + vec4(hsv2rgb(vec3(atan(vor.y, vor.z), 1., 1.)), 1.)\n              * smoothstep(.02 + AA, .02, distance(1. - fract(pow(mang, .25) - iTime * .75), vor.x));\n}","name":"Image","description":"","type":"image"}]}