{"ver":"0.1","info":{"id":"dlKXWd","date":"1686494365","viewed":90,"name":"Heighmapper","username":"joo","description":"grab it while you can","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://www.shadertoy.com/view/Xt3yDS\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec3 hash33(vec3 p) { \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n)*2. - 1.;\n}\n\nfloat tetraNoise(in vec3 p){\n    vec3 i = floor(p + dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    vec3 i1 = step(p.yzx, p), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n    vec4 v = max(0.5 - vec4(dot(p,p), dot(p1,p1), dot(p2,p2), dot(p3,p3)), 0.0);\n    vec4 d = vec4(dot(p, hash33(i)), dot(p1, hash33(i + i1)), dot(p2, hash33(i + i2)), dot(p3, hash33(i + 1.)));\n    return clamp(dot(d, v*v*v*8.)*1.732 + .5, 0., 1.); // Not sure if clamping is necessary. Might be overkill.\n}\n\n#define PI 3.14159265359\n\nvec2 smoothRepeatStart(float x, float size) {\n  return vec2(\n      mod(x - size / 2., size),\n      mod(x, size)\n  );\n}\n\nfloat smoothRepeatEnd(float a, float b, float x, float size) {\n  return mix(a, b,\n      smoothstep(\n          0., 1.,\n          sin((x / size) * PI * 2. - PI * .5) * .5 + .5\n      )\n  );\n}\n\nfloat sTri(vec2 p, float radius, vec2 dist1, vec2 dist2,vec2 dist3) {\n    radius /= 4.;\n    vec2 a = normalize(dist2);\n    return max(\n        dot(vec2(p.x,p.y), dist3) - radius,\n        max(\n        \tdot(vec2(p.x,p.y) , a) - radius,\n        \tdot(vec2(p.x,p.y), a * dist1) - radius\n        )\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (-iResolution.xy + 2. * fragCoord.xy) / iResolution.y;\n       \n       // play with this\n    float repeatSize = 1.;\n    float x = uv.x - mod(iTime * .1, repeatSize);\n    float y = uv.y;\n\n    vec2 ab; \n\n    float noise;\n    float noiseA, noiseB;\n    \n    ab = smoothRepeatStart(x, repeatSize);\n    noiseA = tetraNoise(16.+vec3(vec2(ab.x, uv.y) * 1.5, 0)) * .5;\n    noiseB = tetraNoise(16.+vec3(vec2(ab.y, uv.y) * 1.2, 0)) * .5;\n    noise = smoothRepeatEnd(noiseA, noiseB, x, repeatSize);\n\n    ab = smoothRepeatStart(y, repeatSize / 2.);\n    noiseA = tetraNoise(vec3(vec2(uv.x, ab.x) * .5, 0)) * 2.;\n    noiseB = tetraNoise(vec3(vec2(uv.x, ab.y) * .5, 0)) * 2.;\n    noise *= smoothRepeatEnd(noiseA, noiseB, y, repeatSize / 2.);\n\n    ab = smoothRepeatStart(x, repeatSize);\n    noiseA = tetraNoise(9.+vec3(vec2(ab.x, uv.y) * .05, 0)) * 5.;\n    noiseB = tetraNoise(9.+vec3(vec2(ab.y, uv.y) * .05, 0)) * 5.;\n    noise *= smoothRepeatEnd(noiseA, noiseB, x, repeatSize);\n\n    noise = mix(noise, dot(uv, vec2(-.66,.4)*0.5), 0.55);\n    \n    float spacing = .03;\n    float lines = mod(noise, spacing) / spacing;\n\n\n    lines = min(lines * 2., 1.) - max(lines * 2. - 1., 0.);\n    \n    lines /= fwidth(noise / spacing);\n\t\n    // Double to occupy two pixels and appear smoother\n    lines /= 2.;\n    \n    \n\tfragColor = vec4(vec2(lines),1.0,1.0);\n}\n","name":"Image","description":"","type":"image"}]}