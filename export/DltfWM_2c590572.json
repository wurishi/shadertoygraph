{"ver":"0.1","info":{"id":"DltfWM","date":"1701303327","viewed":56,"name":"five sloppily stacked boxes","username":"jt","description":"Four randomly rotated but never overlapping boxes with a fifth randomly rotated box in a stable configuration on top (currently cheating: top size slightly larger or rotation fixed - exact solution?).\nCould be used as props to be placed in a room.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["random","stack","box","crates","five","rotated","props"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DltfWM five sloppily stacked boxes, 2023 by jt\n\n// Four randomly rotated but never overlapping boxes\n// with a fifth randomly rotated box in a stable configuration on top\n// (currently cheating: top size slightly larger or rotation fixed - exact solution?)\n\n// Could be used as props to be placed in a room.\n\n// Inspired by trying to solve the 3d problem of apollonius.\n\n// TODO: acceleration structure\n\n// Possible modifications: three box base / control size of enclosing circle.\n\n// tags: random, stack, box, crates, five, rotated, props\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash11(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec4 hash41(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// primitives mostly adapted from https://iquilezles.org/articles/distfunctions/\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - s;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec2 rotate(float phi, vec2 p)\n{\n    vec2 cs = vec2(cos(phi), sin(phi));\n    return mat2(cs.x,cs.y,-cs.y,cs.x) * p;\n}\n\nvec3 rotate_z(float phi, vec3 p)\n{\n    return vec3(rotate(phi, p.xy), p.z);\n}\n\nvec4 stack(vec3 p, float e, float seed)\n{\n    p.z -= e;\n    vec4 h = hash41(seed);\n    vec3 o = vec3(-1,+1,0);\n    float r = sqrt(0.5);\n    // same size but box can be unstable in extreme configuration\n    //vec4 result = vec4(1,1,1,box(rotate_z(hash11(seed), p-o.zzy*e*2.0),vec3(r,r,e)));\n    // cheat: make top box just slightly bigger so it touches other boxes even in extreme configuration\n    vec4 result = vec4(vec3(1),box(rotate_z(hash11(seed), p-o.zzy*e*2.0),vec3(0.75,0.75,e)));\n    // cheat: rotate towards centers of boxes\n    //vec4 result = vec4(1,1,1,box(rotate_z(0.0, p-o.zzy*e*2.0),vec3(r,r,e)));\n    result = combine(result, vec4(1,0,0,box(rotate_z(h.x, p-o.xxz),vec3(r,r,e))));\n    result = combine(result, vec4(0,1,0,box(rotate_z(h.y, p-o.yyz),vec3(r,r,e))));\n    result = combine(result, vec4(0,0,1,box(rotate_z(h.z, p-o.xyz),vec3(r,r,e))));\n    result = combine(result, vec4(1,1,0,box(rotate_z(h.w, p-o.yxz),vec3(r,r,e))));\n    return result;\n}\n\nvec4 map(vec3 p)\n{\n    vec4 result = vec4(vec3(0.5), halfspace(p));\n    result = combine(result, stack(p, 0.5, floor(iTime)));\n    return result;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ).w +\n                      k.yyx*map( p + k.yyx*h ).w +\n                      k.yxy*map( p + k.yxy*h ).w +\n                      k.xxx*map( p + k.xxx*h ).w );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 t = vec4(0);\n    for(t.w = t0, i = 0u; t.w < t1 && i < ITER_MAX; i++)\n    {\n        vec4 h = map(ro + rd * t.w);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t.w);\n        t = vec4(h.xyz, t.w+h.w);\n    }\n\n    return t; // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// adapted from https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// adapted from https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // TODO\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0, 0,-5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    vec3 color = vec3(1);\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    if(result.w < DIST_MAX)\n    {\n        float d = result.w;\n        vec3 dst = ro + rd * d;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color = result.xyz;\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(3,2,1));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            //brightness *= shadow(ro + rd * d + n * 0.01, lightdir, 0.0, DIST_MAX);\n            brightness *= softshadow(ro + rd * d + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(d/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}