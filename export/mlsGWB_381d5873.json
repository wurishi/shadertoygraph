{"ver":"0.1","info":{"id":"mlsGWB","date":"1687408423","viewed":48,"name":"ohkaieldo","username":"zxdasfsa","description":"htjfggyvjyhk,bkul.kjnbkjhlilubui;ujkli;l;iojhjikljkhljhkl","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"Xll3Wj","parentname":"Simple Kaleidoscope 2"},"renderpass":[{"inputs":[],"outputs":[],"code":"const float tau = 6.2831853;\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv = (fragCoord.xy-.5*iResolution.xy) * 7.2 / iResolution.y;\n\n    float r = 1.9;\n    float a = iTime;\n    float c = cos(a)*r;\n    float s = sin(a)*r;\n    for ( int i=0; i<2; i++ )\n    {\n    \tuv = abs(uv);\n        \n        float t = atan(uv.x,uv.y);\n        const float q = 5. / tau;\n\t\tt *= q;\n        t = abs(fract(t*.7+.7)*2.0-1.0);\n        t /= q;\n        uv = length(uv)*vec2(sin(t),cos(t));\n        \n        \n       uv -= .9;\n       uv = uv*c + s*uv.yx*vec2(1,-1);\n    }\n    \n    vec3 color = vec3(.0);\n\n    // Tile the space\n    vec2 i_st = floor(uv);\n    vec2 f_st = fract(uv);\n    float m_dist = 10.;  // minimum distance\n    vec2 m_point;        // minimum point\n\n    for (int j=-1; j<=1; j++ ) {\n        for (int i=-1; i<=1; i++ ) {\n            vec2 neighbor = vec2(float(i),float(j));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5*cos(12.5831*point)-0.5;\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n\n            if( dist < m_dist ) {\n                m_dist = dist;\n                m_point = point;\n            }\n        }\n    }\n\n    // Assign a color using the closest point position\n    color += dot(m_point,vec2(.6,.6));\n\n    fragColor = vec4(vec3(color), .2);\n}\n","name":"Image","description":"","type":"image"}]}