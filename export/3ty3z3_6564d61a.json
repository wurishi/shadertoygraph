{"ver":"0.1","info":{"id":"3ty3z3","date":"1579447757","viewed":61,"name":"metaball + twister","username":"alarch","description":"hey.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["metaball","twister"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nfloat metaCalc(vec2 uv, vec3 pos)\n{\n    return 1.0/((pos.x*pos.x)+(pos.y*pos.y)+(pos.z*pos.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // init stuff\n    vec3 pos = vec3(0.2+0.1*cos(iTime),0.3*cos(iTime),0.5);\n    vec3 pos2 = vec3(0.2+-0.1,0.2+-0.3,0.0)*sin(iTime);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5; // set center/origo to vec2(0.0,0.0);    \n    uv.x *= iResolution.x/iResolution.y; // how do you really do aspect ratio?  \n    \n    vec3 varCol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // metaball\n    float amplitude1 = metaCalc(uv, vec3(uv.x - pos.x,uv.y - pos.y,pos.z));\n    float amplitude2 = metaCalc(uv, vec3(uv.x - pos2.x,uv.y - pos2.y, pos.z));\n    \n    float amplitude = amplitude1+amplitude2;\n    \n    if(amplitude > 6.0)\n    {\n       float amplitudeColor = amplitude/10.0;\n       float depthColor = amplitudeColor*(pos.z*amplitude1+pos2.z*amplitude2);\n       fragColor = vec4(vec3(depthColor), 0.0);  \n    }\n    else\n    {  \n    \t\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n    \n    // twister\n    #define thick 0.002\n    \n    vec4 white = vec4(1.0,1.0,1.0,1.0);\n    vec4 red = vec4(1.0,0.0,0.0,1.0);\n \n    vec4 green = vec4(0.0,1.0,0.0,1.0);\n    vec4 blue = vec4(0.0,0.0,1.0,1.0);\n    \n    float theta = sin(iTime)*uv.y*10.0;\n/*\n    float x0 = -0.6+0.1*sin(theta);\n    float x1 = -0.6+0.1*sin(theta+90.0); // sin a+90\n    float x2 = -0.6+0.1*sin(theta+180.0); // sin a+180\n    float x3 = -0.6+0.1*sin(theta+270.0); // sin a+180\n  */  \n    \n    float x0 = -0.6+0.1*sin(theta);\n    float x1 = -0.6+0.1*sin(theta+PI*0.5); // sin a+90\n    float x2 = -0.6+0.1*sin(theta+PI*1.0); // sin a+180\n    float x3 = -0.6+0.1*sin(theta+PI*1.5); // sin a+270\n    \n    // from https://www.shadertoy.com/view/lsX3WM \n    if (x0 < x1) {\n\t\tif ((abs(uv.x - x0) < thick) || (abs(uv.x - x1) < thick)) {\n\t\t\tfragColor = white;\n\t\t} else {\n\t\t\tif ((uv.x > x0) && (uv.x < x1)) {\n\t\t\t\tfragColor = red-varCol.r;\n\t\t\t}\n\t\t}\n\t}\n\tif (x1 < x2) {\n\t\tif ((abs(uv.x - x1) < thick) || (abs(uv.x - x2) < thick)) {\n\t\t\tfragColor = white;\n\t\t} else {\n\t\t\tif ((uv.x > x1) && (uv.x < x2)) {\n\t\t\t\tfragColor = green-varCol.g;\n\t\t\t}\n\t\t}\n\t}\n\tif (x2 < x3) {\n\t\tif ((abs(uv.x - x2) < thick) || (abs(uv.x - x3) < thick)) {\n\t\t\tfragColor = white;\n\t\t} else {\n\t\t\tif ((uv.x > x2) && (uv.x < x3)) {\n\t\t\t\tfragColor = blue-varCol.b;\n\t\t\t}\n\t\t}\n\t}\n\tif (x3 < x0) {\n\t\tif ((abs(uv.x - x3) < thick) || (abs(uv.x - x0) < thick)) {\n\t\t\tfragColor = white;\n\t\t} else {\n\t\t\tif ((uv.x > x3) && (uv.x < x0)) {\n\t\t\t\tfragColor = vec4(uv,0.2+0.5*sin(iTime+135.0),1.0);\n\t\t\t}\n\t\t}\n\t}\n    \n}","name":"Image","description":"","type":"image"}]}