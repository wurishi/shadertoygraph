{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 uvmap(vec2 pixels)\n{\n\tvec2 uv = pixels / iResolution.xy;\n\tuv = uv * 2.0 - vec2(1.0);\n\tuv.x *= iResolution.x / iResolution.y;\n\treturn uv;\n}\n\nfloat f(vec2 pixels)\n{\n\tvec2 uv = uvmap(pixels);\n\tfloat len = length(uv);\n\tif (len < 0.8 && mod(len, 0.1) < 0.0075) return 1.0;\n\telse return 0.0;\n}\n\nvec4 sampleAliased(vec2 pixels)\n{\n\tif (f(pixels) != 0.0) return vec4(0, 0, 0, 1);\n\telse return vec4(1, 1, 1, 1);\n}\n\nvec4 sampleAntialiased(vec2 pixels)\n{\n\tconst int size = 4; \n\tfloat disp = 1.0 / (float(size) + 2.0);\n\tfloat contrb = 0.0;\n\tfloat maxContrb = 0.0;\n\t\n\tfor (int j = -size; j <= size; j++)\n\t{\n\t\tfor (int i = -size; i <= size; i++)\n\t\t{\n\t\t\tcontrb += f(pixels + vec2(float(i) * disp, float(j) * disp));\n\t\t\tmaxContrb += 1.0;\n\t\t}\n\t}\n\t\n\tfloat c = 1.0 - (contrb / maxContrb);\n\treturn vec4(c, c, c, 1);\n}\n\nfloat sampleSubpixel(vec2 pixels)\n{\n\tconst int size = 8; \n\tfloat disp = 1.0 / (float(size) + 2.0);\n\tfloat contrb = 0.0;\n\tfloat maxContrb = 0.0;\n\t\n\tfor (int j = -size; j <= size; j++)\n\t{\n\t\tfor (int i = -size; i <= size; i++)\n\t\t{\n\t\t\tcontrb += f(pixels + vec2(float(i) * (disp / 3.0), float(j) * disp));\n\t\t\tmaxContrb += 1.0;\n\t\t}\n\t}\n\t\n\treturn 1.0 - (contrb / maxContrb);\n}\n\nvec4 sampleAntialiasedSubpixel(vec2 pixels)\n{\n\treturn vec4(sampleSubpixel(pixels - vec2(1.0 / 3.0, 0)),\n\t\t\t\tsampleSubpixel(pixels),\n\t\t\t\tsampleSubpixel(pixels + vec2(1.0 / 3.0, 0)),\n\t\t\t\t1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat timer = mod(iTime + 1.5, 6.0);\n\tfloat kind = 0.0;\n\tif (timer < 2.0) kind = 0.0;\n\telse if (timer < 4.0) kind = 1.0;\n\telse kind = 2.0;\n\t\t\n\tvec2 p = fragCoord.xy + vec2(cos(iTime + fragCoord.y * 0.1) * 5.0, 0.0);\n\t\n\tif (length(vec2(-0.7 + 0.7 * kind, 0.9) - uvmap(fragCoord.xy)) < 0.05)\n\t\tfragColor = vec4(1, 0, 0, 1);\n\telse if (kind == 0.0)\n\t\tfragColor = pow(sampleAliased(p), vec4(1.0/2.2));\n\telse if (kind == 1.0)\n\t\tfragColor = pow(sampleAntialiased(p), vec4(1.0/2.2));\n\telse\n\t\tfragColor = pow(sampleAntialiasedSubpixel(p), vec4(1.0/2.2));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dsSzs","date":"1405907036","viewed":3496,"name":"Subpixel Rendering","username":"HLorenzi","description":"Shows three modes of rasterization smoothing of vector graphics: none (aliased), grayscale antialiasing, and subpixel antialiasing (aka ClearType; sharper vertical lines). Added gamma correction after 7 years!","likes":60,"published":1,"flags":0,"usePreview":0,"tags":["2d","antialiasing","font","rasterization","subpixel"],"hasliked":0,"parentid":"","parentname":""}}