{"ver":"0.1","info":{"id":"Xl2BDK","date":"1517860883","viewed":331,"name":"Thing_6","username":"balkhan","description":"thing","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["thing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\n#define I_MAX\t\t150\n#define E\t\t\t0.001\n\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec2\trot_t;\nvec3\th;\nvec3\tbase;\nvec3\tlight_pos;\nfloat \tt;\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    vec3\tcol = vec3(0., 0., 0.);\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(-.0, .0, 149.);\n    t = iTime;\n    vec4\tinter = (march(pos, dir));\n\n    col.xyz += -3.+h*.353061251;\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    p = p*p;\n    ret = (p.x+p.y);\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\n/*\n**\tLeon's mod polar from : https://www.shadertoy.com/view/XsByWd\n*/\n\n#define\tPI\t\t\t3.14159\n#define TAU\t\t\tPI*2.\n\nvec2 modA (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a, an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n/*\n**\tend mod polar\n*/\n\nfloat\tscene(vec3 p)\n{\n    float\tmind = 1e5;\n    vec3\top = p;\n    vec3\tap = p;\n    p.xy = (fract(p.xy/60.)-.5)*40.;\n    p.z = (fract(p.z/60.)-.5)*120.;\n    \n    rotate(op.zx, iTime*.35);\n    rotate(op.yx, iTime*.75);\n    rotate(op.xz, iTime*.5);\n    ap = op;\n    ap.xz = modA(ap.xz, 10.);\n    ap.x -= 25.+15.*sin(iTime*.75);\n    ap.zy = modA(ap.zy, 10.);\n    ap.z -= 25.+5.*sin(iTime*1.+1.04);\n    ap.yx = modA(ap.yx, 10.);\n    ap.y -= 25.+5.*sin(-iTime*2.+2.08);\n    ap.x = fract(ap.x*.51)-.5;\n    //ap.xyz = (fract(ap.xyz/10.)-.5)*10.;\n    mind = min(mind,\n              length( vec2(mylength(ap.yz)-8.*sin(iTime*.5)-25., ap.x))-.10012501\n              );\n    mind = (.11+(mind));\n\n    h += .076125-vec3(.05, .10, .05)*1./(mind*mind +2.05102);\n    return(mind)*1.;\n}\n\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec4\ts = vec4(0.0, 0.0, 0.0, 0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n    \trotate(p.zx, 1.+iTime*.5);\n        rotate(p.yz, 1.+iTime*.5);\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E )\n        {\n            s.y = 1.;\n            break;\n        }\n\n        s.x++;\n    }\n    s.w = dist.y;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}