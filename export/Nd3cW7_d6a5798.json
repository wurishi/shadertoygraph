{"ver":"0.1","info":{"id":"Nd3cW7","date":"1653509185","viewed":85,"name":"Rotating gradients 2","username":"020406","description":"Simple example of rotating linear gradients. Click and drag to change behavior.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["linear","rotation","gradients"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* ****\nMIT License\n\nCopyright (c) 2022 Brian Fearn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n* ****/\n\nfloat PI = 3.14159;\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 rot2(vec2 v, vec2 origin, float theta) \n{\n    vec2 v2 = v - origin;\n    return vec2(v2.x * cos(theta) - v2.y * sin(theta), v2.y * cos(theta) + v2.x * sin(theta)) + origin;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fract(fragCoord/iResolution.yy * 3.);\n    \n    \n    float t = 0.5 * (1. + sin(iTime));\n    float t2 = 0.5 * (1. + sin(iTime * 0.7));\n    float t3 = 0.5 * (1. + sin(iTime * 1.1));\n    \n    float d = length(uv - vec2(0.5));\n    float at = atan(uv.y - 0.5, uv.x - 0.5);\n    float th = abs(at < 0. ? 2. * PI + at : at);\n    float r = 0.4;// - 0.1 * 0.5 * (1. + sin(th * 5. + iTime));\n    float glow = 0.1;\n    float w = 0.05 + t2 * 0.4;\n    float h = 0.45 - t3 * 0.4;\n    float b = sdBox(uv - vec2(0.5), vec2(w, h));\n    bool inside = abs(uv.x - 0.5) < w && abs(uv.y - 0.5) < h;\n    float initHue = 360.0 * iMouse.x / iResolution.x;\n    float hueRange = 360. * (1. - iMouse.y / iResolution.y);\n    float hue = initHue + mod(hueRange * pow(abs(rot2(uv, vec2(0.5, 0.5), iTime * 1.5).x - 1.0), 1.), 360.);\n    vec3 cBase = hsv2rgb(vec3(hue / 360., 1., 1.));\n    vec3 col = b < 0. ? cBase : (abs(b) < glow ? pow(1. - abs(b) / glow, 4.) * vec3(1. - cBase.x, cBase.y, 1. - cBase.z) : vec3(0.));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}