{"ver":"0.1","info":{"id":"wsSGWd","date":"1550286121","viewed":1054,"name":"per pixel particles with gravity","username":"public_int_i","description":"per pixel particles with gravity(blue), if you want the simulation to last longer try decreasing FRICTION or changing GRAVITY in Common","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["pixel","particles","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2019\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n\tfragColor = vec4(step(1e-4,length(texelFetch(iChannel0,ivec2(u),0).zw)))+\n       vec4(0,0,1,1)/(1.+dot(texelFetch(iChannel1,ivec2(u),0),vec4(1))*.1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nEthan Alexander Shulman 2019\n\nBufA - Stores a particle in each pixel and processes movement steps,\nxy = particle position in screen coordinates,\nzw = particle velocity(limited to -1-1 or it breaks collisions),\nparticle exists if length(velocity) >= 1e-4.\n*/\n\nvec4 hash(vec4 a) {\n\treturn fract(abs(sin(a.ywxz*766.345)+cos(normalize(a)*4972.92855))*2048.97435+abs(a.wxyz)*.2735);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 u)\n{\n\tfragColor = vec4(0);\n\tif (iFrame < 30 || iMouse.w > 0.) {\n        if (max(mod(u.x,16.),mod(u.y,16.)) < 1.) fragColor = vec4(u,(hash(u.xxyy+iDate.w*vec4(.11,.21,.31,.41)).xy*2.-1.)*INITIAL_VELOCITY);\n\t\treturn;\n\t}\n    \n\tvec4 p,it;\n\tvec2 s, q = floor(u);\n    ivec2 ub;\n    #define sg(b) dot(texelFetch(iChannel2,ivec2(u+b),0),pmsk)\n\t#define f(b) ub = ivec2(pmod(u+b,iResolution.xy));\\\n    p = texelFetch(iChannel0,ub,0);\\\n\tif (length(p.zw) >= 1e-4) {\\\n        it = texelFetch(iChannel1,ub,0);\\\n\t\tif (it.x > 0.5) {\\\n\t\t\tif (dot(b,b) < 1e-2) {\\\n            \tvec2 n1 = normalize(p.zw), n2 = normalize(it.zw);\\\n                fragColor = vec4(p.xy,clamp(reflect(n1,n2)*(length(it.zw)*((1.-FRICTION)-FRICTION*dot(n1,n2))),-MAX_VELOCITY,MAX_VELOCITY));\\\n                return;\\\n\t\t\t}\\\n\t\t} else {\\\n\t\t\tp.xy = pmod(p.xy+p.zw,iResolution.xy);\\\n\t\t\ts = floor(p.xy)-q;\\\n\t\t\tif (dot(s,s) < 1e-2) {\\\n                vec4 pmsk = vec4(1);\\\n                pmsk[distslot(p.zw)] = 0.;\\\n                vec2 gd = vec2(sg(vec2(1,0))-sg(vec2(-1,0)),\\\n                               sg(vec2(0,1))-sg(vec2(0,-1)));\\\n                float gl = length(gd);\\\n                if (gl > 0.) {gd /= gl;}\\\n                vec4 gv = texelFetch(iChannel2,ivec2(u),0)*pmsk;\\\n                gv.x = max(gv.x,max(gv.y,max(gv.z,gv.w)));\\\n                p.zw = clamp(p.zw+gd*GRAVITY(gv.x),-MAX_VELOCITY,MAX_VELOCITY);\\\n\t\t\t\tfragColor = p;\\\n\t\t\t\treturn;\\\n\t\t\t}\\\n\t\t}\\\n\t}\n\t\n\tf(vec2(0));\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nEthan Alexander Shulman 2019\n\nBufB - Calculates particle collisions,\nx = 1 if the particle at the pixel has a collision during its movement step otherwise 0\nzw = velocity of particle it collided with\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 u) {\n\tfragColor = vec4(0);\n\tvec4 p = texelFetch(iChannel0,ivec2(u),0),s;\n\tp.xy = floor(pmod(p.xy+p.zw,iResolution.xy));\n\tif (length(p.zw) < 1e-4) return;\n\n\tvec2 q,ub,fu = floor(u);\n\t#define f(b) ub = pmod(p.xy+b,iResolution.xy);\\\n\tif (length(ub-floor(u)) > 1e-2) {\\\n\t\ts = texelFetch(iChannel0,ivec2(ub),0);\\\n\t\tq = floor(s.xy)-p.xy;\\\n\t\ts.xy = floor(pmod(s.xy+s.zw,iResolution.xy))-p.xy;\\\n\t\tif (min(dot(s.xy,s.xy),dot(q,q)) < 1e-2) {\\\n\t\t\tfragColor = vec4(1,0,s.zw);\\\n\t\t\treturn;\\\n\t\t}\\\n\t}\n\t\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\nEthan Alexander Shulman 2019\n\nBufC - Gravity/distance field, propagates distance to up to 4 particles\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 u) {\n    if (iFrame < 10) {\n        fragColor = vec4(1e7);\n        return;\n    }\n    \n\tvec4 p = texelFetch(iChannel0,ivec2(u),0), o = vec4(1e7);\n    if (length(p.zw) >= 1e-4) o[distslot(p.zw)] = length(p.xy-u);\n    \n\t#define f(b) o = min(o,texelFetch(iChannel1,ivec2(pmod(u+b,iResolution.xy)),0)+length(b));\n\t\n\tf(vec2(-1));\n\tf(vec2(0,-1));\n\tf(vec2(1,-1));\n\tf(vec2(-1,0));\n\tf(vec2(1,0));\n\tf(vec2(-1,1));\n\tf(vec2(0,1));\n\tf(vec2(1));\n    \n   \tfragColor = o;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define INITIAL_VELOCITY 1.\n#define MAX_VELOCITY 1.\n#define FRICTION .05\n#define GRAVITY(v) (-0.1/(1.+v*.05))\n//#define GRAVITY(v) (-1.0/(v-6.))\n//#define GRAVITY(v) (cos(v)*.5-.5)\n//#define GRAVITY(v) (-.1/log(1.+v))\n\n#define PI 3.141592653\n#define distslot(v) int(atan(v.y,v.x)*(3.999/(PI*2.))+2.)\n//#define distslot(v) int(mod(atan(v.y,v.x)*186.327643,3.99))\n\nfloat pmod(float v, float m) {\n \tif (v < 0.) return m-mod(abs(v),m);\n    return mod(v,m);\n}\nvec2 pmod(vec2 v, vec2 m) {\n \treturn vec2(pmod(v.x,m.x),pmod(v.y,m.y));   \n}","name":"Common","description":"","type":"common"}]}