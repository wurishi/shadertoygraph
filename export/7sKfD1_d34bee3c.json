{"ver":"0.1","info":{"id":"7sKfD1","date":"1658142066","viewed":293,"name":"Get, set, and toggle state","username":"u004fu0077u004f","description":"Click the bottom left button to switch to state 1 (red, green, and yellow).\nClick the bottom right button to switch to state 2 (blue, magenta, cyan, and white).\nClick the top right button to toggle.\nSpecial thanks to sixstring982, FabriceNeyret2, and iq.","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["beginner","state"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CHARACTERS_WIDE 16\n#define CHARACTERS_WIDE_F float(CHARACTERS_WIDE)\n#define CHARACTER_WIDTH 1./CHARACTERS_WIDE_F\n#define CHARACTERS_TALL 16\n#define CHARACTERS_TALL_F float(CHARACTERS_TALL)\n#define CHARACTER_HEIGHT 1./CHARACTERS_TALL_F\n#define CHARACTER_SAMPLER iChannel1\nvoid draw_character(inout vec4 color, vec2 uv, vec2 pos, uint index) {\n    uv -= pos;\n    if (uv.x < 0. || uv.y < 0. || uv.x >= CHARACTER_WIDTH || uv.y >= CHARACTER_HEIGHT) return;\n    uv.x += mod(float(index), CHARACTERS_WIDE_F)*CHARACTER_WIDTH;\n    uv.y += (CHARACTERS_TALL_F-floor(float(index)/CHARACTERS_TALL_F)-1.)*CHARACTER_HEIGHT;\n    vec4 text_color = texture(CHARACTER_SAMPLER, uv);\n    color.rgb = mix(color.rgb, vec3(1.), text_color.rrr);\n}\n#define C(index) {\\\n    draw_character(color, uv+vec2(CHARACTER_WIDTH*.25, 0.), pos, index);\\\n    pos.x += CHARACTER_WIDTH*.5;\\\n}\n\n#define MEM_SAMPLER iChannel0\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord/iResolution.xy;\n    //color = texture(MEM_SAMPLER, uv); return; // Debug\n    color.a = 1.;\n    vec4 state = mem_read_cell(MEM_SAMPLER, MEM_STATE_CELL);\n    vec2 pos = vec2(0., 1.-CHARACTER_HEIGHT);\n    if (state == MEM_STATE_1) {\n        color.rgb = vec3(uv.x, uv.y, 0.)*.5;\n        C(0x53u);C(0x74u);C(0x61u);C(0x74u);C(0x65u);C(0x20u);C(0x31u); // \"State 1\"\n    } else if (state == MEM_STATE_2) {\n        color.rgb = vec3(uv.x, uv.y, 1.)*.5;\n        C(0x53u);C(0x74u);C(0x61u);C(0x74u);C(0x65u);C(0x20u);C(0x32u); // \"State 2\"\n    } else {\n        color.rgb = vec3(1., 0., 1.);\n        C(0x57u);C(0x54u);C(0x46u);C(0x21u);C(0x3fu); // \"WTF!?\"\n    }\n    if (\n        is_in_button(uv, BUTTON_STATE_1_MINS, BUTTON_STATE_1_MAXS)\n        || is_in_button(uv, BUTTON_STATE_2_MINS, BUTTON_STATE_2_MAXS)\n        || is_in_button(uv, BUTTON_STATE_TOGGLE_MINS, BUTTON_STATE_TOGGLE_MAXS)\n    ) {\n        color.rgb = mix(color.rgb, vec3(0.), .75);\n        pos = BUTTON_STATE_1_MINS;\n        C(0x53u);C(0x65u);C(0x74u);C(0x20u);C(0x31u); // \"Set 1\"\n        pos = BUTTON_STATE_2_MINS;\n        C(0x53u);C(0x65u);C(0x74u);C(0x20u);C(0x32u); // \"Set 1\"\n        pos = BUTTON_STATE_TOGGLE_MINS;\n        C(0x54u);C(0x6fu);C(0x67u);C(0x67u);C(0x6cu);C(0x65u); // \"Toggle\"\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MEM_SAMPLER iChannel0\nvoid mainImage(out vec4 color, vec2 coord) {\n    uint cell = uint(coord.y)*MEM_W+uint(coord.x);\n    switch (cell) {\n        case MEM_STATE_CELL:\n            // I was scratching my head for ages trying to figure out why the following line wasn't working properly.\n            // It took me too long to realize recompiling the shader doesn't reset the time.\n            color = iFrame == 0 ? MEM_STATE_1 : mem_read_cell(MEM_SAMPLER, cell);\n            if (iMouse.w > 0.) {\n                vec2 uv = iMouse.xy/iResolution.xy;\n                if (is_in_button(uv, BUTTON_STATE_1_MINS, BUTTON_STATE_1_MAXS)) {\n                    color = MEM_STATE_1;\n                } else if (is_in_button(uv, BUTTON_STATE_2_MINS, BUTTON_STATE_2_MAXS)) {\n                    color = MEM_STATE_2;\n                } else if (is_in_button(uv, BUTTON_STATE_TOGGLE_MINS, BUTTON_STATE_TOGGLE_MAXS)) {\n                    color = color == MEM_STATE_1 ? MEM_STATE_2 : MEM_STATE_1;\n                }\n            }\n            break;\n        default:\n            color = vec4(0.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MEM_W 64u\n#define MEM_H 64u\nvec4 mem_read_cell(sampler2D sampler, uint cell) {\n    return texelFetch(sampler, ivec2(int(cell%MEM_W), int(cell/MEM_W)), 0);\n}\n#define MEM_STATE_CELL 0u\n#define MEM_STATE_1 vec4(0., 0., 0., 1.)\n#define MEM_STATE_2 vec4(1., 0., 0., 1.)\n#define is_in_button(uv, mins, maxs) uv.x >= mins.x && uv.y >= mins.y && uv.x < maxs.x && uv.y < maxs.y\n#define BUTTON_STATE_1_MINS vec2(.1, .1)\n#define BUTTON_STATE_1_MAXS vec2(.45, .45)\n#define BUTTON_STATE_2_MINS vec2(.55, .1)\n#define BUTTON_STATE_2_MAXS vec2(.9, .45)\n#define BUTTON_STATE_TOGGLE_MINS vec2(.55, .55)\n#define BUTTON_STATE_TOGGLE_MAXS vec2(.9, .9)","name":"Common","description":"","type":"common"}]}