{"ver":"0.1","info":{"id":"dsByz3","date":"1687967689","viewed":58,"name":"shifting squares s","username":"CreatorsLight","description":".","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mouse","time"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //use mouse to control = true, otherwise use time\n    bool mouseOrTime = false;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy);\n    uv = fract(uv)-0.5;\n\n    // adjust for lines when the original position is shifted\n    // so everything lines up\n    //float adjust = 0.0025;\n    //uv += adjust * sign(uv);\n\n    // line colours\n    vec3 col = vec3(1., 1., 1.);\n    // lines\n    vec2 mouse = (0.0 - iMouse.xy)/100.;\n    if (mouseOrTime){\n        col *= smoothstep(0.1, 0.108, length(0.1 * sin(0.2 * uv - vec2(0.5, 0.5) + mouse - 100.0 / uv * 0.040 + 0.5)));\n    } \n    else {\n        col *= smoothstep(0.1, 0.108, length(0.1 * sin(0.2 * uv - vec2(0.5, 0.5) + iTime - 100.0 / uv * 0.040 + 0.5)));\n    }\n    //col += smoothstep(0.2,0.8, length(vec3(0.2,0.0,0.2) * uv.xxx))*1.2;\n    // The color components\n    col = fract(col * 1.5) - 0.5;\n    col *= 3.0;\n    col *= (vec3(0.6, 0.2, 0.1) * uv.xxx) *5.0;\n    col *= (vec3(0.8, 0.2, 0.1) * uv.xxy);\n    col *=100.0;\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}