{"ver":"0.1","info":{"id":"wstGDN","date":"1568602975","viewed":911,"name":"Curl Noise X","username":"magician0809","description":"Curl Noise","likes":26,"published":1,"flags":32,"usePreview":0,"tags":["noise","curl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 puv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    col += texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    col.rg += curl_noise(puv).xy * 0.5;\n    //col.rg += texture(iChannel1, uv).rg * 0.5 + 0.5;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 puv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    if (iFrame == 0)\n    {\n        fragColor = puv.xyxy;\n    }\n    else\n    {\n        vec2 p0 = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n\n        vec2 v0 = curl_noise(p0).xy;\n        \n        if (iMouse.z > 0.0)\n        {\n            vec2 ms = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n            vec2 mv = (ms - p0) * 0.5;\n            mv /= dot(mv, mv) + 0.04;\n            mv = vec2(mv.y, -mv.x);\n            v0 += mv * 0.2;\n        }\n        \n        vec2 p1 = p0 + v0 * iTimeDelta;\n        \n        vec4 c = texelFetch(iChannel1, ivec2(fragCoord), 0);\n        \n        if (c.y <= 0.0)\n        {\n            fragColor = puv.xyxy;\n        }\n        else\n        {\n            fragColor = vec4(p1, p0);\n        }\n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define COL (36)\n#define ROW (20)\n#define DW (1.0 / float(COL))\n#define DH (1.0 / float(ROW))\n\n#define LINE_WIDTH 0.012\n#define TRAIL_FADE 0.97\n\n#define MAXLIFE 400.\n#define MINLIFE 100.\n\nvec2 sdSegment(vec2 p, vec2 d)\n{\n    float lp = dot(p, d) / dot(d, d);\n    return p - d * clamp(lp, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 puv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec4 col = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    col.x *= TRAIL_FADE;\n    \n    for (int ix = 0; ix < COL; ix++)\n    {\n        for (int iy = 0; iy < ROW; iy++)\n        {\n            vec2 gid;\n            gid.x = DW * (float(ix) + 0.5);\n            gid.y = DH * (float(iy) + 0.5);\n            vec4 ppos = texture(iChannel0, gid);\n            vec2 dn = sdSegment(puv - ppos.xy, ppos.zw - ppos.xy);\n            float a = smoothstep(LINE_WIDTH, 0.0, length(dn));\n            col.x = max(col.x, a);\n        }\n    }\n    \n    col.x = clamp(col.x, 0.0, 1.0);\n    \n    if (col.y > -1.0)\n    {\n        col.y--;\n    }\n    else\n    {\n        col.y = hash21(uv);\n    \tcol.y = mix(MINLIFE, MAXLIFE, col.y);\n    }\n    \n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float hash21(vec2 p)\n{\n    p = fract(p * vec2(234.34, 435.345));\n    p += dot(p, p + 34.23);\n\treturn fract(p.x * p.y);\n}\n\n// noise function from https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat simplex_noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n#define NSIZE 1.25\n#define NSPEED 0.12\nvec3 curl_noise(vec2 p)\n{\n    const float dt = 1e-4;\n    vec2 ds = vec2(dt, 0.0);\n    \n    p /= NSIZE;\n    float n0 = simplex_noise(p);\n    float n1 = simplex_noise(p + ds.xy);\n    float n2 = simplex_noise(p + ds.yx);\n    \n    vec2 grad = vec2(n1 - n0, n2 - n0) / ds.x;\n    vec2 curl = vec2(grad.y, -grad.x);\n    return vec3(curl, n0) * NSIZE * NSPEED;\n}\n","name":"Common","description":"","type":"common"}]}