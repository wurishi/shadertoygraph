{"ver":"0.1","info":{"id":"XdKSWz","date":"1463819146","viewed":228,"name":"Totalistic Cellular Automata 2","username":"DiogoCosta","description":"Variation on: https://www.shadertoy.com/view/4sVXDR\n\nThis time with Moore's neighbourhood.\n\nThis runs to fast, if anything could tell how to control speed would be great! ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","automata","cellular","totalistic","moore","parallel","wolfram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 t = texture(iChannel0,fragCoord / iResolution.xy);\n    if (t.x == 1.0) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    } else {\n\t\tfragColor = vec4(0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=texture(iChannel0, fragCoord/iResolution.xy);\n    /*================================================\n\t*\n\t*\t\t\t\tControl variables\n\t* default num = 118 or 94 (2 cool examples)\n\t* after running for a bit, try 224 to run GameOfLife\n\t* default seed_x = 1.0\n\t* default seed_y = 0.5\n\t*\n\t=================================================*/\n    //odd numbers provoke epilepsy\n    float num =118.0;\n    float seed_x = 9.0;\n    float seed_y = 0.5;\n    //=================================================\n    \n    bool rule[18];\n    for(float i=17.0; i>=0.0; i--){\n        if(num >= pow(2.0, i)){ rule[int(i)]=true; num-=pow(2.0, i); }\n        else rule[int(i)]=false;\n    }\n    \n    if((iTime<1.0))\n    {\n        \n        if(abs(fragCoord.x-iResolution.x/2.0)<=seed_x && abs(fragCoord.y-iResolution.y/2.0)<=seed_y) fragColor.x=1.0;\n    \telse fragColor.x=0.0;\n        \n    }\n    else\n    {\n        \n        \t//Checking neighbourhood\n            vec4 u=vec4(0.0);\n            u+=texture(iChannel0,(fragCoord+vec2( 0.0,-1.0))/iResolution.xy); //bottom\n            u+=texture(iChannel0,(fragCoord+vec2(-1.0, 0.0))/iResolution.xy); //left\n            u+=texture(iChannel0,(fragCoord+vec2( 1.0, 0.0))/iResolution.xy); //right\n            u+=texture(iChannel0,(fragCoord+vec2( 0.0, 1.0))/iResolution.xy); //top\n            u+=texture(iChannel0,(fragCoord+vec2( 1.0, 1.0))/iResolution.xy); //top right\n            u+=texture(iChannel0,(fragCoord+vec2( 1.0, -1.0))/iResolution.xy); //top left\n            u+=texture(iChannel0,(fragCoord+vec2( -1.0, 1.0))/iResolution.xy); //bottom right\n            u+=texture(iChannel0,(fragCoord+vec2( -1.0, -1.0))/iResolution.xy); //bottom left\n        \n        \t//highp int index = int(u.x)*2 +int(fragColor.x);\n        \t//fragColor.x = rule[index];\n        \t//There might be a more elegant way of doing this, but I'm not used shaders' gymnastics\n        \tif((\n                (u.x==8.0 && rule[16]) ||\n                (u.x==7.0 && rule[14]) ||\n                (u.x==6.0 && rule[12]) ||\n                (u.x==5.0 && rule[10]) ||\n                (u.x==4.0 && rule[8])  || \n                (u.x==3.0 && rule[6])  || \n                (u.x ==2.0 && rule[4]) || \n                (u.x ==1.0 && rule[2]) || \n                (u.x== 0.0 && rule[0])) && fragColor.x==0.0)\n                fragColor.x=1.0;\n            else if ((\n                (u.x==8.0 && rule[17]) ||\n                (u.x==7.0 && rule[15]) ||\n                (u.x==6.0 && rule[13]) ||\n                (u.x==5.0 && rule[11]) ||\n                (u.x==4.0 && rule[9])  || \n                (u.x==3.0 && rule[7])  || \n                (u.x==2.0 && rule[5])  || \n                (u.x==1.0 && rule[3])  || \n                (u.x== 0.0 && rule[1])) && fragColor.x==1.0)\n                fragColor.x=1.0;\n            else fragColor.x=0.0;\n\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}