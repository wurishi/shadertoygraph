{"ver":"0.1","info":{"id":"ftSczt","date":"1671303386","viewed":169,"name":"Instanssil√∂ylyt","username":"iveks","description":"Instanssi 25min shader kompo","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["instanssi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\n// https://www.laurivan.com/rgb-to-hsv-to-rgb-for-shaders/\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Slow it down, geez.\n    float slow = iTime * 0.1;\n    \n    vec4 shader = texture(iChannel0, uv);\n    \n    vec4 shader2 = texture(iChannel1, uv).brga;\n    \n    vec4 col = vec4(0);\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv = floor(uv * (cos(slow*0.1) + 16.0 + cos(slow) * 16.0));\n    uv.x += sin(iTime);\n    \n    float t = atan(uv.y, uv.x);\n    \n    vec3 hsv = vec3(\n        (shader * mod(sin(t * pi) + slow, pi)).r,\n        (shader2 * mod(sin(t * pi) + 1.3478164 + 3.0*slow, pi)).r,\n        1.0\n    );\n    \n    vec3 rgb = hsv2rgb(hsv);\n    \n    // Output to screen\n    fragColor = vec4(rgb.r,rgb.g,rgb.b,0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rotate(vec2 uv, float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Slow it down, geez.\n    float slow = iTime * 0.1;\n    \n    vec4 buffer = texture(iChannel0, uv);\n\n    // Time varying pixel color\n    vec4 col = 0.5 + 0.5*cos(slow*10.0+uv.xyxy+vec4(0,2,4,6));\n    vec4 col2 = 0.5 + 0.5*cos(5.0 + slow*10.0+uv.xyxy+vec4(0,2,4,6));\n    \n    vec4 shader = vec4(0, 0, 1.0, 1.0).rgba * col;\n    \n    shader += vec4(0, 0, 1.0, 1.0).brga * col2;\n    \n    vec4 tex = texture(iChannel1, 2.0*uv*(sin(iTime)+1.0) + vec2(slow + sin(iTime), iTime + cos(iTime)));\n    \n    shader = max(shader, 0.2);\n    \n    shader = shader * tex * 0.8 + buffer * 0.8;\n    \n    shader += shader * vec4(0, 0, 1.0, 1.0);\n\n    // Output to screen\n    fragColor = shader;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Slow it down, geez.\n    float slow = iTime * 0.1;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv = rotate(uv, slow);\n    \n    vec4 buffer = texture(iChannel0, uv);\n\n    // Time varying pixel color\n    vec4 col = 0.5 + 0.5*cos(iTime*10.0+uv.xyxy+vec4(0,2,4,6));\n    vec4 col2 = 0.5 + 0.5*cos(5.0 + iTime*10.0+uv.xyxy+vec4(0,2,4,6));\n    \n    vec4 shader = vec4(0, 0, 1.0, 1.0).rgba * col;\n    \n    shader += vec4(0, 0, 1.0, 1.0).brga * col2;\n    \n    vec4 tex = texture(iChannel1, 2.0*uv*(sin(iTime)+1.0) + vec2(iTime + sin(iTime), iTime + cos(iTime)));\n    \n    shader = max(shader, 0.2);\n    \n    shader = shader * tex * 0.8 + buffer * 0.8;\n    \n    shader += shader * vec4(0, 0, 1.0, 1.0);\n\n    // Output to screen\n    fragColor = mod(shader + iTime, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}