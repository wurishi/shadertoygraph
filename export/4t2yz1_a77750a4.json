{"ver":"0.1","info":{"id":"4t2yz1","date":"1507493056","viewed":90,"name":"Reveal MZ","username":"michaelzheng","description":"Two textures, reveals one texture based on mouse input. Textures have different imaging","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","textures","kernel","reveal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//modifiable variables\nfloat radius = .1;\nint texSwitch1 = 0;\nint texSwitch0 = 1;\n\n//kernels\nmat3 blur = mat3(  \t\t//switch 0\n 0.111, 0.111, 0.111,\n 0.111, 0.111, 0.111, \n 0.111, 0.111, 0.111 \n);\nmat3 sharpen= mat3(\t\t//switch 1\n -1,-1,-1,\n -1,9,-1,\n -1,-1,-1\n);\nmat3 jitter = mat3(\t\t//switch 2\t\n -2, 2, 0, \n 2, 1, -2, \n 0,-2, 2 \n);\n\nmat3 emboss = mat3(\t\t//switch 3\n 2, 2, 0, \n 2, 1, -2,\n 0,-2, -2 \n);\n\nmat3 darknight = mat3(\t//switch 4\t\n 0, 2, 0, \n 2, -8, 2, \n 0, 2, 0 \n);\n\n//functions\nvec3 aSample( int x,  int y, in vec2 fragCoord, int channel, sampler2D channelType)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[channel].xy;\n uv = (uv + vec2(x, y)) / iChannelResolution[channel].xy ;\n return texture(channelType, uv).xyz;\n}\n\nvec3 aFilter(in vec2 fragCoord, mat3 kernel, int channel, sampler2D channelType)\n{\n vec3 sum = vec3 (0.0,0.0,0.0);;\n    \n for (int first = 0; first < 3; first++)\n {\n     for(int second = 0; second < 3; second++)\n     {\n      sum += aSample(first-1,second-1, fragCoord, channel, channelType) * kernel[first][second];\n     }\n }      \n return sum;\n}\n\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 fc = fragCoord.xy; \n    vec2 pos = iMouse.xy/iResolution.xy; // finding normalized mouse position\n  \n    uv.y *= iResolution.y/iResolution.x; //modifying cirlce with aspect ratio\n    pos.y *= iResolution.y/iResolution.x;\n    \n    vec3 tex1;\n     switch(texSwitch1)\t// picks a kernel based on modifiable input above\n    {\tcase 0:\n     \t\ttex1 = aFilter(fc, blur, 1, iChannel1);\n        \tbreak;\n    \tcase 1:\n    \t\ttex1 = aFilter(fc, sharpen, 1, iChannel1);\n        \tbreak;\n        case 2:\n    \t   \ttex1 = aFilter(fc, jitter, 1, iChannel1);\n        \tbreak;\n        case 3:\n   \t\t    tex1 = aFilter(fc, emboss, 1, iChannel1);\n        \tbreak;\n        case 4:\n \t        tex1 = aFilter(fc, darknight, 1, iChannel1);\n        \tbreak;\n    };\n    \n    vec3 tex0;\n    switch(texSwitch0) // picks a kernel based on modifiable input above\n    {\tcase 0:\n     \t\ttex0 = aFilter(fc, blur, 0, iChannel0);\n        \tbreak;\n    \tcase 1:\n    \t    tex0 = aFilter(fc, sharpen, 0, iChannel0);\n        \tbreak;\n        case 2:\n    \t   \ttex0 =  aFilter(fc, jitter, 0, iChannel0);\t\n        \tbreak;\n        case 3:\n   \t\t    tex0 =  aFilter(fc, emboss, 0, iChannel0);\n        \tbreak;\n        case 4:\n \t        tex0 = aFilter(fc, darknight, 0, iChannel0);\n        \tbreak;\n    };\n   \t\n \tvec4 layer1 = vec4(tex1,(1.0 - step(length(pos-uv),radius)));\n    vec4 layer0 = vec4(tex0,1.0);\n                       \n\tfragColor = mix(layer0, layer1, layer1.a);\n}","name":"Image","description":"","type":"image"}]}