{"ver":"0.1","info":{"id":"fttBDs","date":"1663843846","viewed":68,"name":"Fork Cheap 5D W Matvey 840","username":"Matvey","description":"Very cheap, very high quality, very like life appearance,  can be easily modded into lower and higher dimensions. Best use is water height (can be seen in my other shaders).","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","wave","5d"],"hasliked":0,"parentid":"lscyD7","parentname":"Cheap 5D Wave Noise"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color0 = vec3(0, 0, 0);\nvec3 color1 = vec3(0, 255, 0);\nvec3 color2 = vec3(0, 255, 0);\nvec3 color3 = vec3(0, 255, 0);\n//More Spirograph by eiffie\n//Trying (and failing) to make a better DE for parameterized curves.\n\n\nfloat mapColorToValue(vec3 color) {\n    return (color.x + color.y + color.z) / 3.0;\n}\n\nvec3 interpolator(float t0, vec3 color0, float t1, vec3 color1, float t) {\n  return vec3(color1.x * t - color0.x * t + color0.x * t1 - color1.x * t0, color1.y * t - color0.y * t + color0.y * t1 - color1.y * t0, color1.z * t - color0.z * t + color0.z * t1 - color1.z * t0) / (t1 - t0) / 255.0;\n}\n\nvec3 mapValueToColor(float value) {\n    if(value >= 0.8) {\n        return interpolator(0.8, color2, 1.0, color3, value);\n    }\n    if(value >= 0.5) {\n        return interpolator(0.5, color1, 0.8, color2, value);\n    }\n    return interpolator(0.0, color0, 0.5, color1, value);\n}\n\nvec3 repaintColor(vec3 color) {\n    float value = mapColorToValue(color);\n    return mapValueToColor(value);\n}\n\n/*\n5D wave noise\nafl_ext 2018-2022\npublic domain\n*/\n\nfloat hash(float p){\n    return fract(4768.1232345456 * sin(p));\n}\n\nfloat wave(vec4 uv, vec4 emitter, float speed, float phase, float timeshift){\n    float dst = distance(uv, emitter);\n    return exp(sin(dst * phase - timeshift * speed) - 1.0);\n}\nvec4 wavedrag(vec4 uv, vec4 emitter){\n    return normalize(uv - emitter);\n}\nfloat seedWaves = 0.0;\nvec4 randWaves(){\n    float x = hash(seedWaves);\n    seedWaves += 1.0;\n    float y = hash(seedWaves);\n    seedWaves += 1.0;\n    float z = hash(seedWaves);\n    seedWaves += 1.0;\n    float w = hash(seedWaves);\n    seedWaves += 1.0;\n    return vec4(x,y,z,w) * 2.0 - 1.0;\n}\n\nfloat getwaves5d(vec4 position, float dragmult, float timeshift){\n    float iter = 0.0;\n    float phase = 6.0;\n    float speed = 2.0;\n    float weight = 1.0;\n    float w = 0.0;\n    float ws = 0.0;\n    for(int i=0;i<20;i++){\n        vec4 p = randWaves() * 30.0;\n        float res = wave(position, p, speed, phase, 0.0 + timeshift);\n        float res2 = wave(position, p, speed, phase, 0.006 + timeshift);\n        position -= wavedrag(position, p) * (res - res2) * weight * dragmult;\n        w += res * weight;\n        iter += 12.0;\n        ws += weight;\n        weight = mix(weight, 0.0, 0.2);\n        phase *= 1.2;\n        speed *= 1.02;\n    }\n    return w / ws;\n}\n\n// helper function\n\nvec3 polarToXyz(vec2 xy){\n    xy *= vec2(2.0 *3.1415,  3.1415);\n    float z = cos(xy.y);\n    float x = cos(xy.x)*sin(xy.y);\n    float y= sin(xy.x)*sin(xy.y);\n    return normalize(vec3(x,y,z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n    vec3 col = repaintColor(vec3(1.0) * getwaves5d(vec4(polarToXyz(uv), (mouse.x * 2.0 - 1.0) * 10.0), 10.0 + mouse.y * 10.0, iTime));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}