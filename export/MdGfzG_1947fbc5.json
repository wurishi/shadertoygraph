{"ver":"0.1","info":{"id":"MdGfzG","date":"1529262674","viewed":120,"name":"Spheres, spheres, everywheres!","username":"Veggiebob","description":"multiple spheres, yay! Occasionally blend textures","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["texture","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere (vec3 r, vec3 o, float radius){\n    return length(o-r)-radius;\n}\nvec4 trace (vec3 o, vec3 r, vec3 pos, float radius){\n    float t = 0.0;\n    vec3 p;\n    for(int i = 0; i<32; ++i){\n        p = o+r*t;\n        float d = sphere(p, pos, radius);\n        t += d*0.5;\n    }\n    return vec4(p, t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    if(mouse==vec2(0.)){\n        mouse = vec2(0.5);\n    }\n    mouse-=0.5;\n    vec3 camera = vec3(0., 0., -2.)-vec3(mouse, 0.)*3.;\n    vec3 ray = vec3(uv.x, uv.y, 0.)-camera;\n    \n    float dist = 10000.;\n    int tex = -1;\n    vec2 finalXY = vec2(0.);\n    \n    float radius = -1.;\n    vec3 spherePos = vec3(-1.);\n    vec4 d = vec4(-1.);\n    float l = -1.;\n    \n    vec2 rotPos = vec2(sin(iTime), cos(iTime)+1.);//a standard rotation point \n    \n    //for each sphere BEGIN\n    radius = 0.8;\n    spherePos = vec3(rotPos.x, 0., rotPos.y+radius*1.5);\n    d = trace(camera, ray, spherePos, radius);\n    l = length(d.xyz-spherePos);\n    if (abs(l-radius)<0.05){\n        dist = d.w;\n        float anglex = atan(d.z-spherePos.z, d.x-spherePos.x)-iTime;\n        float angley = (d.y-spherePos.y)/radius;//not really an angle\n        finalXY = vec2(anglex, angley);\n        tex = 0;\n    }\n    //END\n    \n    //some more spheres VVVVV\n    float pr = radius;//the previous sphere's radius\n    radius = 0.5;\n    spherePos = vec3(rotPos.x-sin(iTime*1.3)*pr, 0., rotPos.y+pr*1.5-cos(iTime*1.3));\n    d = trace(camera, ray, spherePos, radius);\n    l = length(d.xyz-spherePos);\n    if (abs(l-radius)<0.05&&d.w<dist){\n        dist = d.w;\n        float anglex = atan(d.z-spherePos.z, d.x-spherePos.x)-iTime;\n        float angley = (d.y-spherePos.y)/radius;//not really an angle\n        finalXY = vec2(anglex, angley);\n        tex = 1;\n    }\n    \n    radius = pr*0.5;\n    spherePos = vec3(rotPos.x-sin(iTime*1.3)*pr, 0., rotPos.y+pr*1.5-cos(iTime*1.3));\n    d = trace(camera, ray, spherePos, radius);\n    l = length(d.xyz-spherePos);\n    if (abs(l-radius)<0.05&&d.w<dist){\n        dist = d.w;\n        float anglex = atan(d.z-spherePos.z, d.x-spherePos.x)-iTime;\n        float angley = (d.y-spherePos.y)/radius;//not really an angle\n        finalXY = vec2(anglex, angley);\n        tex = 1;\n    }\n    //end of more spheres\n    \n    float fog = 1.0 / (1.0 + dist*dist*0.6);\n    vec2 xy = finalXY;\n    vec4 pixColor = vec4(1.);\n    if(tex==0){\n    \tpixColor = texture(iChannel0, xy);\n    } else if (tex==1){\n        pixColor = vec4(texture(iChannel1, xy).rrr, 1.);//.rr cause it only has one channel, ya na?\n    } else if (tex==2){\n        pixColor = texture(iChannel2, xy);\n    } else if (tex==3){\n        pixColor = texture(iChannel3, xy);\n    }\n    if(pixColor.r+pixColor.g+pixColor.b<sin(iTime*0.4)*0.5+0.5){\n        pixColor = texture(iChannel2, xy);\n    }\n    pixColor *= fog;\n\tvec3 col = pixColor.rgb;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}