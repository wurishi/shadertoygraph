{"ver":"0.1","info":{"id":"XddXzr","date":"1457397859","viewed":860,"name":"Dancing floor","username":"zackpudil","description":"A sphere traced quivering floor.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// created by zack pudil: https://github.com/zackpudil\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nfloat dBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0)) - 0.2;\n}\n\nvec2 rep(inout vec2 p, vec2 o) {\n\tvec2 c = floor((p + o)/(o*2.0));\n\tp = mod(p + o, o*2.00) - o;\n\treturn c;\n}\n\nvec2 map(vec3 p) {\n\tp.y += 1.0;\n\tvec2 c = rep(p.xz, vec2(.7));\n\treturn vec2(dBox(p, vec3(.5, 1.0 + 0.27*cos(c.x*iTime + 1.0*c.x + 3.0*c.y), .5)), abs(c.x + c.y));\n}\n\nvec2 intersect(vec3 ro, vec3 rd) {\n\tfloat td = 0.0;\n\tfor(int i = 0; i < 128; i++) {\n\t\tvec2 s = map(ro + rd*td);\n\t\tif(abs(s.x) < 0.001) return vec2(td, s.y);\n\t\ttd += s.x*.5;\n\t}\n\t\n\treturn vec2(10.0, -1.0);\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.01, 0.0);\n\tvec3 n = vec3(\n\t\tmap(p + h.xyy).x - map(p - h.xyy).x,\n\t\tmap(p + h.yxy).x - map(p - h.yxy).x,\n\t\tmap(p + h.yyx).x - map(p - h.yyx).x\n\t);\n\t\n\treturn normalize(n);\n}\n\nvec3 lighting(vec3 p, vec3 l, vec3 rd) {\n\tvec3 lig = normalize(l);\n\tvec3 n = normal(p);\n\tvec3 ref = reflect(lig, n);\n\t\n\tfloat amb = 1.0 * clamp((p.y + 0.25)*1.2, 0.0, 1.0);\n\tfloat dif = clamp(dot(n, lig), 0.0, 1.0);\n\tfloat spe = pow(clamp(dot(ref, rd), 0.0, 1.0), 52.0);\n\t\n\tvec3 lin = vec3(0);\n\t\n\tlin += amb;\n\tlin += dif*vec3(.3, .27, .25);\n\tlin += 2.0*spe*vec3(1, .97, .1)*dif;\n\t\n\treturn lin;\n}\n\nmat3 camera(vec3 e, vec3 la) {\n\tvec3 roll = vec3(0, 1, 0);\n\tvec3 f = normalize(la - e);\n\tvec3 r = normalize(cross(roll, f));\n\tvec3 u = normalize(cross(f, r));\n\t\n\treturn mat3(r, u, f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0*(fragCoord/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 ro = 5.0*vec3(cos(iTime*0.3), 1.0, -sin(iTime*0.3));\n\tvec3 rd = camera(ro, vec3(0))*normalize(vec3(uv, 2.0));\n\t\n\tvec3 l = vec3(-3.0, 4.0, 0.0);\n\t\n\tvec3 col = vec3(0);\n\tvec2 i = intersect(ro, rd);\n\t\n\tif(i.y > -1.0) {\n\t\tvec3 p = ro + rd*i.x;\n\t\tcol = mix(vec3(.0, .75, .75), vec3(.74, 0, .75), abs(cos(i.y)));\n\t\tcol *= lighting(p, l, rd);\n\t\t\n\t}\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}