{"ver":"0.1","info":{"id":"sl23RW","date":"1623462086","viewed":64,"name":"uv warping with noise","username":"chillsynthian_dave","description":"pretty epic uv warping.\n\nChange the pixel \"\"\"downsampling\"\"\" by adjusting the iMouse.y variable (just click on higher or lower parts of the display)\n\n\nthanks to https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83 for noise algorithms","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["noise","warping","uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Previous frame\" by Guilouf. 2021-06-11 02:50:22\\n\\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 draw = texture(iChannel0,uv);\n    fragColor = vec4(draw.rgb,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 n) {\n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p) {\n  vec2 ip = floor(p);\n  vec2 u = fract(p);\n  u = u * u * (3.0 - 2.0 * u);\n  float res = mix(mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x), mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x), u.y);\n  return res * res;\n}\nvec3 downsample(vec3 col, float a) {\n  col *= a;\n  col.x = float(int(col.x));\n  col.y = float(int(col.y));\n  col.z = float(int(col.z));\n  col /= a;\n  return col;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  uv = vec2(noise(uv * 4.), noise(uv * dot(1. - uv, uv)));\n  vec4 draw2 = texture(iChannel0, uv);\n  uv.x = noise(uv * sin(iTime * 0.2) * 8.) + iTime * 0.001;\n  uv.y = noise(uv.yx * cos(iTime * 0.1) * 9. + iTime * 0.2);\n  vec4 draw = texture(iChannel0, uv.xy);\n  vec3 outColor;\n  outColor.x = noise(uv * tan(iTime * 0.2 - uv.yx * 1.) * 2.);\n  outColor.y = noise(uv * sin(iTime * 0.4 - uv * 1.) * 2.);\n  outColor.z = noise(uv * cos(iTime * 0.683 - uv * 1.) * 5.);\n  vec2 normMouse = iMouse.xy / iResolution.xy;\n  vec3 downsampled = downsample(vec3(\n  outColor.x * 1.,\n  outColor.y * 1.4,\n  outColor.z), (normMouse.y * 10. + 3.));\n  downsampled *= 3.1;\n  \n  if ((int(iTime) * 500) % 1000 == 0) {\n      downsampled *= draw.rgb * 15.;\n  }\n  \n  fragColor = vec4(downsampled, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}