{"ver":"0.1","info":{"id":"stcfRf","date":"1663425059","viewed":91,"name":"Fill Polygone","username":"Hatokuro","description":"étape 1: connaitre de quel coté d'une ligne se trouve un point (fonction simeside)\nétape 2: connaitre si un point ce trouve à l'intérieur ou l'extérieure d'un triangle (fonction inTriangle)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polygonetrianglesameside"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool sameside(vec2 uv, vec3 A, vec3 B, vec3 C) //permet d'indiquer de quel coté d'une ligne on se trouve (0 ou 1)\n{\n    vec3 u = vec3(uv.x,uv.y,0.0);\n    vec3 valuexy = cross(B-A,C-A);\n    vec3 valuexz = cross(B-A,u-A);\n    \n    if(dot(valuexy,valuexz)>=0.){return true;}\n    else{return false;}   \n}\n\nbool inTriangle(vec2 uv,vec3 v[3]) // permet d'indiquer si on se trouve bien a l'intérieur d'un triangle (3 ligne)\n{\n    if(sameside(uv,v[0],v[1],v[2]) && sameside(uv,v[1],v[2],v[0]) && sameside(uv,v[2],v[0],v[1])){return true;}\n    else{return false;}\n   \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalisation des pixel (from 0 to 1)\n    vec2 uv = (2.* fragCoord - iResolution.xy)/iResolution.y;\n    float px_size = 2. / iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec3 v[3];\n    v[0] = vec3(0.0,.5,0.0);\n    v[1] = vec3(-.5,-.5,0.0);\n    v[2] = vec3(.5,-.5,0.0);\n\n\n    // Output to screen\n    fragColor = inTriangle(uv,v) ? vec4(vec3(1.0),0.0) : vec4(col,0.0);\n}","name":"Image","description":"","type":"image"}]}