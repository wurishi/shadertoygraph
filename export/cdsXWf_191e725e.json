{"ver":"0.1","info":{"id":"cdsXWf","date":"1669656997","viewed":23,"name":"Threetragon","username":"Vaksim","description":"3D in 2D","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shtudieren"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float w = 16.0;\nconst float h = 9.0;\n//triangle vertex coordinates\nvec3 A1 = vec3(0.0, 2.0, 20.0), B1 = vec3(4.0, 4.0, 22.0), C1 = vec3(6.0, 7.0, 24.0);\nvec2 a1 = vec2(0.0, 2.0), b1 = vec2(4.0, 4.0), c1 = vec2(6.0, 7.0);//without z\n\nfloat notNeg(float x){\n    if (x< 0.0) x = 0.0;\n    return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0,0,0);\n    \n    float k = iResolution.x / iResolution.y;\n    vec3 Xp = vec3((uv.x-0.5)*w, (uv.y-0.5)*h, 10);\n    vec3 x1 = A1-B1;\n    vec3 x2 = C1-B1;\n    vec3 cr = cross(x1, x2);\n    float A = cr[0];\n    float B = cr[1];\n    float C = cr[2];\n    float D = -A*A1[0] - B*A1[1] - C*A1[2];\n    \n    float t = -D/(A*Xp[0]+B*Xp[1] + C*Xp[2]);\n    \n    vec2 X = vec2(t*Xp[0], t*Xp[1]);\n    \n    vec2 v1 = b1-a1;\n    vec2 v2 = c1-b1;\n    vec2 v3 = a1-c1;\n    \n    vec2 X1 = X-a1;\n    vec2 X2 = X-b1;\n    vec2 X3 = X-c1;\n    \n    float M1 = determinant(mat2(v1[0], v1[1], X1[0], X1[1]));\n    float M2 = determinant(mat2(v2[0], v2[1], X2[0], X2[1]));\n    float M3 = determinant(mat2(v3[0], v3[1], X3[0], X3[1]));\n    \n    vec3 pointOnC = t*Xp;\n    vec3 lightPos = vec3(0.0,5.0*sin(iTime),15.0);\n    vec3 n = normalize(cr);\n    vec3 lToLight = normalize(lightPos - pointOnC);\n    vec3 lToEye = normalize(-pointOnC);\n    vec3 lRef = 2.0*dot(lToLight,n)*n-lToLight;\n    vec3 TexCol = vec3 (1.0,0.0,0.0);\n    vec3 lightCol = vec3 (1,1,0);\n    vec3 bCol = vec3 (1,1,1);\n    \n    vec3 Ambient = 0.2 * TexCol ;\n    vec3 Diffuse = 0.4 * lightCol * notNeg(dot(n,lToLight));\n    vec3 Specular = 0.4 * bCol*pow (notNeg(dot(lRef,lToEye)), 7.0);\n\n    if((M1 >= 0.0) && (M2 >= 0.0) && (M3 >= 0.0)) col = Ambient+Diffuse+Specular;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}