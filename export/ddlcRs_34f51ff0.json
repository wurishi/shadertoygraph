{"ver":"0.1","info":{"id":"ddlcRs","date":"1687121097","viewed":167,"name":"Test: Magnifying glass (Mitsync)","username":"Mitsync","description":"Testing rendering a buffer and using that buffer in a distortion/chromatic aberration shader. This is not physically accurate but it looks nice. You can replace iChannel0 with whatever buffer, image, or video you want and it should work.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["test","distortion","lens","uv","glass","aberration","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Mitsync 2023\n\n// This does distortions to the source iChannel0 (can be buffer, image, video) and outputs result\n\n// Distortion matrix, every column contains X and Y distortion strength, one column per color channel\nmat3x2 distortion = mat3x2(vec2(0.50), vec2(0.45), vec2(0.40));\nfloat glass_radius = 0.25;\nfloat magnification = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Glass follows mouse\n    vec2 glass_center = iMouse.xy / iResolution.xy;\n    \n    // Normalized pixel coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 dist_uv = uv - glass_center;\n    \n    // Warp UV\n    vec2 uv_r = magnification*dist_uv / (1. - (distortion[0]*length(dist_uv)));\n    vec2 uv_g = magnification*dist_uv / (1. - (distortion[1]*length(dist_uv)));\n    vec2 uv_b = magnification*dist_uv / (1. - (distortion[2]*length(dist_uv)));\n    \n    // If we're looking through the glass\n    float d_to_glass = length((uv-glass_center)*vec2(iResolution.x/iResolution.y, 1.0));\n    if (d_to_glass < glass_radius)\n    {\n        // If we're looking through the glass\n        // Lookup colors from input seperately because of the distortion\n        fragColor.r = texture(iChannel0, uv_r+glass_center).r;\n        fragColor.g = texture(iChannel0, uv_g+glass_center).g;\n        fragColor.b = texture(iChannel0, uv_b+glass_center).b;\n        fragColor.a = 1.0;\n        //fragColor = vec4(0.0);\n    } else if (d_to_glass < glass_radius + 0.02) {\n        // If we're on the edge of the glass\n        // return black\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n        // If we're NOT looking through the glass\n        // return base image (iChannel0)\n        fragColor = vec4(texture(iChannel0, uv));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Render an interesting image like shaders normally do but to buffer A instead of out\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates ((0,0) is center, y goes from -1 to 1, aspect ratio preserved)\n    vec2 uv = ((2.0 * fragCoord)-iResolution.xy) / iResolution.y;\n\n    // Reticle\n    //vec3 col = 1.0 < length(uv) ? vec3(0.0) : (0.975 < length(uv) || sign(uv.x) == sign(uv.y)) ? vec3(1.0) : vec3(0.25);\n    \n    // Checkerboard\n    vec3 col = vec3(mod(floor(4.1*uv.x)+floor(4.1*uv.y), 2.0));\n    \n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}