{"ver":"0.1","info":{"id":"4dVGWD","date":"1454540640","viewed":168,"name":"Hello-1 Cross Shader HDD","username":"Hanley","description":"Shader code compatible with GLSLViewer and with ShaderToy.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hello"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\n// mostly happens when the code is compiled on mobile devices and browsers\nprecision mediump float;\n// Float types are vital in shaders, so the level of precision is crucial. Lower precision means faster rendering, but at the cost of quality. You can be picky and specify the precision of each variable that uses floating point. In the first line (precision mediump float;) we are setting all floats to medium precision. But we can choose to set them to low (precision lowp float;) or high (precision highp float;).\n#endif\n\n\n// Shaders are also a set of instructions, but the instructions are excecuted all at once for every single pixel on the screen.\n\n// Each thread is not just BLIND but also MEMORYLESS. Besides the abstraction required to code a general function that changes the result pixel by pixel depending on its position, the blind and memoryless constraints make shaders not very popular among beginning programmers.\n\n// Shadertoy Specific Variables\nvec4 fragColor;\n\nvec3 customColor() {\n\treturn vec3(0.8,0.5,0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) // ShaderToy Specific\n// void main (void) \n{\n\tfragColor = vec4(customColor(), 1.0);\n\n\t// ShaderToy Specific Settings\n\t//fragColor = gl_FragColor;\n}\n\n","name":"Image","description":"","type":"image"}]}