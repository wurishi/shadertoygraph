{"ver":"0.1","info":{"id":"7tyBzR","date":"1664060233","viewed":59,"name":"DepthÂ ","username":"invivel","description":"Depth","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*(fragCoord))/iResolution.y;\n    vec2 m = 2.0 * iMouse.xy / iResolution.xy - 1.0;\n\n    p *= 0.7;\n\n    vec3 canPos = vec3(sin(iTime * 2.0), -3.5, 0.0);\n\n    vec2 canRot = vec2(-m.x, m.y);\n\n    vec4 canDir = vec4(\n        sin(canRot.x),\n        cos(canRot.x),\n        sin(canRot.y),\n        cos(canRot.y)\n    );\n\n    vec3 ray = vec3(canPos);\n\n    for(int i = 0; i < 255; i++) {\n        vec3 bp = vec3(\n            ray.x * sin(iTime) + ray.y * cos(iTime),\n            ray.y * sin(iTime) + ray.x *-cos(iTime),\n            ray.z + sin(iTime)\n        );\n\n        float box = max(max(abs(bp.x), abs(bp.y)), abs(bp.z)) - 1.0;\n\n        float sphere = length(ray + vec3(1.0, 2.0, 0.0)) - 0.5;\n\n        float scene = min(box, sphere);\n\n        vec3 rayDir = vec3(\n            sin(p.x),\n            cos(p.x) * cos(p.y),\n            sin(p.y)\n        );\n\n        float d = rayDir.y * canDir.w + rayDir.z * canDir.z;\n\n        ray += vec3(\n            rayDir.x * canDir.y + d        * canDir.x,\n            d        * canDir.y - rayDir.x * canDir.x,\n            rayDir.z * canDir.w - rayDir.y * canDir.z\n        ) * scene;\n\n        float depth = length(ray - canPos);\n\n        vec3 color = vec3(1.0 - depth / 6.0);\n\n        if(scene < 0.001) {\n            fragColor = vec4(color, 1.0);\n            break;\n        } else if(depth > 4.0) {\n            fragColor = vec4(0.0, 0.6, 1.0, 1.0);\n            break;\n        }\n    };\n}","name":"Image","description":"","type":"image"}]}