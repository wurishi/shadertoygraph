{"ver":"0.1","info":{"id":"WtySzh","date":"1582133720","viewed":104,"name":"Julia Set Eigenvectors","username":"MathExplorer","description":"Graphically determining Julia Set Eigenvectors","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["juliasets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SIZE 2.\n#define LINE .005\n#define LINE_COLOUR vec3(1., 0., 0.)\n#define CONSTANT vec2(0, 0)\n#define NUMBER 250\n#define THRESHOLD .01\n\nvec2 performJulia(vec2 pos) {\n    vec2 c = (2. * iMouse.xy / iResolution.xy - 1.) * SIZE;\n    c.x *= iResolution.x / iResolution.y;\n    \n    float power = 2.;\n    float r = length(pos);\n    float a = atan(pos.y/pos.x);\n    a *= power;\n    r = pow(r, power);\n    vec2 npos = vec2(r * cos(a) + c.x, r * sin(a) + c.y);\n    return npos;\n}\n\nvec3 getAxis(vec2 pos) {\n\tfloat x = smoothstep(pos.x, 0., LINE);\n    float y = smoothstep(pos.y, 0., LINE);\n    return (1. - x * y) * LINE_COLOUR;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec2 pos = (2. * uv - 1.) * SIZE;\n    pos.x *= iResolution.x / iResolution.y;\n    \n    vec2 a = vec2(pos);\n    for(int i=0; i<NUMBER; i++) {\n        a = performJulia(a);\n    }\n    \n    float shade = length(a - pos) / (SIZE);\n    float t = shade;\n    \n    if(shade < THRESHOLD) {\n        t = 1.;\n    }\n    \n    \n    vec3 col = clamp(vec3(t, shade, shade), 0., 1.) + getAxis(pos);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}