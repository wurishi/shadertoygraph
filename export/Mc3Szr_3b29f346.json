{"ver":"0.1","info":{"id":"Mc3Szr","date":"1713487502","viewed":37,"name":"Endless fractal","username":"Max_Fire","description":"Endless zoom in fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","paint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 flagToColor(int c)\n{\n    if (c==0)\n    {\n        return vec3(1, 0, 0);\n    } else if (c==1)\n    {\n        return vec3(1, 0.25, 0);\n    } else if (c==2)\n    {\n        return vec3(1, 0.75, 0);\n    } else if (c==3)\n    {\n        return vec3(0.25, 0.75, 0);\n    }\n}\n\nint picture(float xl, float yd, float xr, float yu, float x, float y, int order)\n{\n    if (x >= xl && x <= xr && y >= yd && y <= yu) {\n        if (order == 0) {\n            if (y > yd + (yu - yd)/2.0 + xr - x) \n            {\n                return 3;\n            } else if (y > yd + (yu-yd)/2.0)\n            {\n                return 2;\n            } else if (y > yd + xr - x)\n            {\n                return 1;\n            }\n        } else if (order == 1) {\n            if (x > xl + (xr - xl)/2.0 + (y - yd)/2.0) \n            {\n                return 3;\n            } else if (x > xl + (xr-xl)/2.0)\n            {\n                return 2;\n            } else if (x > xl + (y - yd)/2.0)\n            {\n                return 1;\n            }\n        } else if (order == 2) {\n            if (y < yd + (yu - yd)/2.0 + x - xr) \n            {\n                return 3;\n            } else if (y < yd + (yu-yd)/2.0)\n            {\n                return 2;\n            } else if (y < yd + (yu-yd)/2.0 + x - xl)\n            {\n                return 1;\n            }\n        } else if (order == 3) {\n            if (x < xl + (xr - xl)/2.0 + (y - yu)/2.0) \n            {\n                return 3;\n            } else if (x < xl + (xr-xl)/2.0)\n            {\n                return 2;\n            } else if (x < (xr - xl)/2.0 + xl + (y - yd)/2.0)\n            {\n                return 1;\n            }\n        }\n    } else {\n        return 0;\n    }\n}\n\nint pictures(float xl, float yd, float xr, float yu, float x, float y)\n{\n    return picture(xl, yd, xl + (xr-xl)/2.0, yu, x, y, 0) + \n        picture(xl + (xr-xl)/2.0, yd + (yu-yd)/2.0, xr, yu, x, y, 1) +\n        picture(xl + (xr-xl)/2.0 + (xr-xl)/4.0, yd, xr, yd + (yu-yd)/2.0, x, y, 2) + \n        picture(xl + (xr-xl)/2.0, yd, xl + (xr-xl)/2.0 + (xr-xl)/4.0, yd + (yu-yd)/4.0, x, y, 3);\n}\n\nint pictures(float xl, float yd, float xr, float yu, float x, float y, int layer)\n{\n    float changer = 1.0;\n    float nxl = xl;\n    float nxr = xr;\n    float nyd = yd;\n    float nyu = yu;\n    for (int i = 0; i < layer; i++) {\n        changer = changer / 2.0;\n        nxl = nxl + changer * (xr-xl);\n        nyu = nyu - changer * (yu-yd);\n        changer = changer / 2.0;\n        nxr = nxr - changer  * (xr-xl);\n        nyd = nyd + changer * (yu-yd);\n    }\n    return pictures(nxl, nyd, nxr, nyu, x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int flag = 0;\n    for (int i = 0; i < 7; i++) {\n        flag = flag + pictures(0.0 - mod(iTime, 1.0)/0.5, 0.0 - mod(iTime, 1.0)/1.0, 1.0 + mod(iTime, 1.0)/1.0, 1.0 + mod(iTime, 1.0)/0.5, uv.x, uv.y, i);\n    }\n    \n    fragColor = vec4(flagToColor(flag % 4),1.0);\n}","name":"Image","description":"","type":"image"}]}