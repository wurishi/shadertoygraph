{"ver":"0.1","info":{"id":"lcXXW2","date":"1705799506","viewed":35,"name":"First raymarching test","username":"Jevk","description":"I tried","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I Have no clue how these functions work, I googled them up\n\nfloat smin( float d1, float d2, float k) {\n    float h = clamp( .5 + .5 * (d2-d1)/k, 0., 1.);\n    return mix(d2, d1, h) - k*h*(1.-h);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\nfloat map(vec3 p) {\n    // Moving spheres\n    vec3 spherePos = vec3(sin(iTime)*2., cos(iTime)*2., cos(iTime)*2.);\n    vec3 spherePos2 = -spherePos;\n    float sphere = sdSphere(p - spherePos, 1.);\n    float sphere2 = sdSphere(p - spherePos2, 1.);\n    \n    // Box transformation\n    p *= rot3D(p, vec3(1,1,0), iTime);\n    float box = sdBox(p, vec3(.75));\n    \n    float mousePos = iMouse.x / iResolution.x;\n    \n    return smin(sphere2, smin(sphere, box, mousePos * 4.), mousePos * 4.); // union function\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -3);              // ray origin\n    vec3 rd = normalize(vec3(uv * 1.5, 1));      // ray direction\n    vec3 col = vec3(0);\n    \n    float t = 0.; // total distance travelled\n    \n    // Raymarching\n    \n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t; //position along the ray\n    \n        float d = map(p); // Test the ray with the objects\n    \n        t += d;\n        \n        col = vec3(i) / 80.;\n        \n        if (d < .0001 || t > 100.) break; // Break loop if ray hits or goes too far\n    }\n    \n    // coloring\n    col = vec3(t * .1);\n    \n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}