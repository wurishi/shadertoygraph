{"ver":"0.1","info":{"id":"ssBfR3","date":"1646755692","viewed":78,"name":"Volumetric Sphere test 2","username":"MatheoMoinet","description":"Basic volumetric rendering test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"NdSfzc","parentname":"Volumetric Sphere test 1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 500\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define LIGHT_MARCH_STEPS 25.\n#define VOLUME_MARCH_STEPS 50.\n#define SMALEST_STEP_SIZE 0.001\n#define MIN_LIGHT_THRESHOLD 0.01\n\n\n#define ALPHA 2.\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(4.5,4.5,4.5));\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    float lastdS = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += abs(dS);\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nfloat RayMarchInside(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float last_dS = 0.;\n    float lastdS = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += abs(dS);\n \n        if (dO>MAX_DIST || abs(dS)<SURF_DIST*10.0 && last_dS<dS){\n            break;\n        }\n        last_dS = dS;\n    }\n    \n    return dO;\n}\n\n\nvec2 RayMarchVolume2(vec3 ro, vec3 rd) {\n    \n    if (GetDist(ro) < 0.){\n        return vec2(0.,RayMarchInside(ro,rd) );\n    }\n\n\n\tfloat dO=0.;\n    \n    bool is_inside = false;\n    float in_dist = 0.;\n    float out_dist = 0.;\n    float last_dS = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += abs(dS);\n \n        if (dO>MAX_DIST){\n            break;\n        }\n        if (abs(dS)<SURF_DIST){\n            if (is_inside == false){\n                in_dist = dO;\n                is_inside = true;\n            } else if (last_dS<dS){\n                out_dist = dO;\n                return vec2(in_dist,out_dist);\n            }\n            dO+= SURF_DIST;//SURF_DIST*2.-dS;\n        }\n        last_dS = dS;\n    }\n    \n    return vec2(dO);\n}\n\n\nfloat GetDensity(vec3 p){\n    float opacity1 = max(2.-length(p+vec3(0.5,-0.5,0.)),0.);\n    float opacity2 = max(2.-length(p+vec3(-0.5,0.,0.)),0.);\n    float opacity3 = max(1.-length(p+vec3(cos(iTime)*2.,3.,0.)),0.);\n    return min(1.,max(opacity3,max(opacity1,opacity2)));\n}\n\n\nfloat GetTransmitanceTowardLight(vec3 p_start, vec3 lightDir){\n    \n    float dist_out_toward_light = RayMarchInside(p_start, lightDir);\n    float step_size = max((dist_out_toward_light)/(LIGHT_MARCH_STEPS), SMALEST_STEP_SIZE);\n    \n    float lightTowardPoint = 1.;//*dist_out_toward_light*GetOpacity(p);\n    float totalDensity=0.;\n    vec3 p = p_start + lightDir*dist_out_toward_light;\n    \n    for (float dist=0.; dist<dist_out_toward_light; dist+=step_size){\n        totalDensity += GetDensity(p);\n        p -= lightDir * step_size;\n    }\n    \n    float transmittance = exp(-step_size*totalDensity*ALPHA);\n    lightTowardPoint = lightTowardPoint * transmittance;\n    \n    \n    return lightTowardPoint;\n}\n\n\nfloat GetHowMuchLightOutOfSegment(vec3 ro, vec3 rd, float dist_start, float dist_end,vec3 lightDir){\n    if (dist_end-dist_start == 0.){\n        return 0.;\n    }\n\n    float total_dist = dist_end-dist_start;\n    float step_size = max((total_dist)/VOLUME_MARCH_STEPS, SMALEST_STEP_SIZE);\n\n    float lightOut = 0., lightFromLightSource, density, transmittance, lightFromIn,lightAtPoint;\n    vec3 p;\n    \n    for (float dist=0.; dist<VOLUME_MARCH_STEPS*step_size; dist+=step_size){\n        p = ro + rd*(dist_end-dist);\n        density = GetDensity(p);\n        \n        if (density>0.){\n            transmittance = exp(-step_size*density*ALPHA);\n            lightFromIn = lightOut * transmittance;\n            lightAtPoint = GetTransmitanceTowardLight(p, lightDir);\n            lightFromLightSource = (1.-transmittance)*lightAtPoint;\n            lightOut = lightFromIn + lightFromLightSource ;\n        }\n    }\n    \n    return lightOut;\n}\n\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord.xy-(0.5*iResolution.xy))/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0.);\n   \n    vec2 distances = RayMarchVolume2(ro, rd);\n    float d = distances.x;\n    \n    //vec3 lightPos = vec3(3.,1.,5.);\n    vec3 lightPos = vec3(sin(iTime),1.,cos(iTime));\n\n    //vec3 lightPos = vec3(2.,1.,0.);\n    vec3 matColor = vec3(0,1.,0.);\n    vec3 ambiantColor = vec3(0.);\n    //ambiantColor = vec3(0.1,0.1,0.1);\n\n    if(d<MAX_DIST) {\n        vec3 lightDir = normalize(lightPos);\n        float opacity = GetHowMuchLightOutOfSegment(ro,rd,distances.x,distances.y, lightDir);\n        vec3 diffuseColor = matColor*opacity;\n        \n        col = ambiantColor + diffuseColor;\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}