{"ver":"0.1","info":{"id":"4scGW2","date":"1452113708","viewed":154,"name":"frequency balls","username":"nshelton","description":"20 spheres with some random jitter and fft-based size","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["fft","spheres","audio","raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lsXGR4","filepath":"https://soundcloud.com/sodaisland/ramzoid-virtual-fish-market","previewfilepath":"https://soundcloud.com/sodaisland/ramzoid-virtual-fish-market","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float sphere(vec3 c, float r, vec3 p) {\n\treturn length(p-c) - r;   \n}\n\nfloat DE(vec3 p) {\n    vec4 n1 = texture(iChannel0, vec2(0.2));\n    vec4 n2 = texture(iChannel0, vec2(0.3));\n\n    float min_d = 100.;\n    \n    for ( int i = 0 ; i < 20; i ++ ) {\n        float t = float(i)/20. ;\n        float freq = pow(texture(iChannel1, vec2(t, 0.)).r, 3.0) * 2.;\n        \n\t\tfloat t_tex =  t + iTime/100.;\n        vec4 n0 = texture(iChannel0, vec2(cos(t_tex), sin(t_tex)));\n\t\tn0= n0 * 3. - 1.5;\n        n0.y *=2.;\n        vec3 c = vec3(t * 10. - 5. , 0., 0.) + n0.xyz;\n\t\tmin_d = min ( min_d, sphere(c, freq, p));\n\n    }\n        return min_d;\n}\n\nvec3 grad(vec3 p) {\n vec2 eps = vec2(0.01, 0.0);\n \n    return normalize(vec3(\n        DE(p + eps.xyy) -  DE(p - eps.xyy),\n        DE(p + eps.yxy) -  DE(p - eps.yxy),\n        DE(p + eps.yyx) -  DE(p - eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy ;\n\tuv = uv *2. - 1.; uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ray = normalize(vec3(uv, 1.));\n    vec3 camera = vec3(0.0, 0.0, -4.);\n    \n    float iter = 0.;\n    float t = 0.;\n   \tvec3 point;\n \tbool hit = false;\n    for ( int i = 0; i < 10; i ++) {\n    \tpoint = camera + ray * t;\n        \n        float d = DE(point);\n        \n        if (DE(point) < 0.1){\n         \thit = true;\n            break;\n        }\n        \n        iter += 0.1;\n        t += d;\n    }\n    vec3 color = vec3(0., 1., 1.);\n    if ( hit) {\n    \tcolor = vec3(dot(ray, -grad(point))) * vec3(1., 0., 1.) ;\n    \tcolor *= 1. - iter;\n    } \n    \n    fragColor = vec4(color, 1.0);\n    \n}","name":"","description":"","type":"image"}]}