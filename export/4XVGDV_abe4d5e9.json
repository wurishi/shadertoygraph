{"ver":"0.1","info":{"id":"4XVGDV","date":"1718287281","viewed":87,"name":"Yura Yura","username":"uk0141","description":"I learned from gam0022-san's posts about lighting!\nhttps://www.shadertoy.com/view/sl3XWM","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.001\n#define TMAX 250.\n#define TMIN 0.001\n#define ID_NONE -1.\n#define ID_SPHERE 1.\n#define ID_BOX 1.1\n#define PI acos(-1.)\n\nfloat random(vec3 st){\n    return fract(sin(dot(st, vec3(12.9898,78.233, 155.)))*43758.5453123);\n}\n\nfloat noise(vec3 st){\n    vec3 i = floor(st);\n    vec3 fr = fract(st);\n    \n    float a = random(i);\n    float b = random(i+vec3(1., 0., 0.));\n    float c = random(i+vec3(0., 1., 0.));\n    float d = random(i+vec3(1., 1., 0.));\n    float e = random(i+vec3(0., 0., 1.));\n    float f = random(i+vec3(1., 0., 1.));\n    float g = random(i+vec3(0., 1., 1.));\n    float h = random(i+vec3(1., 1., 1.));\n    \n    vec3 u = fr*fr*(3.-2.*fr);\n    \n    return mix(\n    mix(mix(a, b, u.x), mix(c, d, u.x), u.y), \n    mix(mix(e, f, u.x), mix(g, h, u.x), u.y),\n    u.z\n    );\n}\nmat2 rotate(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(in vec3 p, in vec3 box) {\n   vec3 d = abs(p) - box;\n   return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdSphere(vec3 p, float r){\n    return length(p) - r;\n}\n\nvec2 intersect(vec3 p){\n    vec2 res = vec2(ID_NONE, 20.);\n    vec2 obj;\n    \n    vec3 ps = p;\n    ps.xy = rotate(noise(ps/80.+iTime*1.2)+iTime*.5)*ps.xy; \n    vec3 pb = ps;\n    ps = mod(ps, 30.) - 15.;\n    obj = vec2(ID_SPHERE, sdSphere(ps, 8.));\n    if(obj.y < res.y)res = obj;\n\n    pb = mod(pb-vec3(0., 0., 15.), 30.) - 15.;\n    obj = vec2(ID_BOX, sdBox(pb, vec3(2., 2., 15.)));\n    if(obj.y < res.y)res = obj;\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = (fragCoord*2.-iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec3 ro = vec3(0., 0., 20. - iTime*30.);\n    vec3 rd = vec3(p, -1.5);\n    rd.zy = rotate(.1*(noise(ro/20.)-1.))*rd.zy;\n    rd.xz = rotate(.1*(noise(ro/25.)-1.))*rd.xz;\n    rd = normalize(rd);\n    vec3 col = vec3(0.);\n    \n    vec3 ray;\n    vec2 obj;\n    float t = TMIN;\n    for(int i = 0;i < 256;i++){\n        ray = ro + rd*t;\n        obj = intersect(ray);\n        float offset = abs(sin(iTime*2.-PI*mod(ray.z, 400.)/400.));\n        if(obj.x == ID_SPHERE){\n            if(obj.y < EPS){\n                col += .3*vec3(.005, .01, .03)*(1.+.8*offset)*float(i);\n                break;\n            }\n            t += .7*obj.y;\n        }else if(obj.x == ID_BOX){\n            if(obj.y < EPS*4500.*(.01+offset)){\n                col += .5*(.01+offset)*vec3(.005, .01, .02)*float(i);      \n            }\n            t += .9*obj.y;\n        }\n        if(t  > TMAX){\n            break;\n        }\n    }\n    if(col == vec3(0.)){\n        col = vec3(.1, .2, .8)*(1.+.3*abs(sin(iTime*2.-PI*mod(ro.z+270., 400.)/400.)))*mix(1., .5, smoothstep(0., 1., length(p)));\n    }\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}