{"ver":"0.1","info":{"id":"tslXWS","date":"1552180108","viewed":100,"name":"Task1_cmc_msu","username":"Zen_nik","description":"313_Zenkin_Nikita","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarshing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 novec=vec3(-1,-1,-1);//no vector\nconst float eps=0.001;\nconst vec3 light1=vec3(-2,2,2.5);//light 1\nconst vec3 light2=vec3(2,-1,1);//light 2\nvec3 color=vec3(0.6,0.6,0.4);//backgroung color\nvec3 ud;\nconst vec3 cam=vec3(0.0,0,-1);//camera\n\nfloat sqr(float s)\n{\n    return s*s;\n}\n\nfloat sdSp(vec3 p) //fig1\n{\n  vec3 centr=vec3(-2.0,-1.0,2.0);\n  float rad=(cos(2.0*iTime)*0.6/2.0)+0.7;\n  return length(centr-p)-rad;\n}\n\nfloat sdBox(vec3 p)//fig2\n{\n    vec3 centr=vec3(1.0,-3.0*cos(iTime),2.5);\n    vec3 b=vec3(0.75,1.0,0.5);\n    return length(max(abs(centr-p)-b,0.0));\n}\n\nfloat sdCil(vec3 p)//fig3\n{\n    vec2 axis=vec2(sin(iTime/1.5)*6.0,4.5+cos(iTime));\n    float rad=0.5;\n    vec3 q=vec3(axis.x,p.y,axis.y);\n    return length(p-q)-rad;\n}\n\nfloat sdGlass(vec3 p)//fig4\n{\n    vec3 centr=vec3(sin(iTime),0.0,cos(iTime)*0.5+0.65);\n    vec3 b=vec3(0.7,0.7,0.1);\n    return length(max(abs(centr-p)-b,0.0));\n}\n\nfloat sdTorus(vec3 p)//fig5\n{\n    vec3 centr=vec3(1.0,sin(iTime)*1.0,2.5);\n\tfloat rad1=1.0;\n    float rad2=0.1;\n    vec3 q=centr-p;\n    vec3 n=rad1*normalize(vec3(q.x,0.0,q.z));\n  \treturn length(q-n)-rad2;\n}\n\n\n\nfloat min_dist(vec3 vec)//ditanse to figures\n{\n    return min(min(min(sdTorus(vec),sdBox(vec)),min(sdGlass(vec),sdCil(vec))),sdSp(vec));\n}\n\nvec3 cros(vec3 cam, vec3 ud)//coordinats of cross\n{\n    vec3 curp=cam;\n    float curl;\n    int i=0;\n    while (i<200)\n    {\n        curl=min_dist(curp);\n        if (curl<eps)\n        \treturn curp;\n        \telse curp=curp+normalize(ud-cam)*curl;\n        i++;\n    }\n    return novec;\n}\n\nint num_of_fig(vec3 veccros)//number of figure\n{\n    float dist=min_dist(veccros);\n    if (dist==sdSp(veccros)) //sphere\n        \treturn 1;\n    else if (dist==sdBox(veccros)) //box\n        \treturn 2;\n    else if (dist==sdCil(veccros)) //cilindr\n        \treturn 3;    \n    else if (dist==sdGlass(veccros)) //glass\n        \treturn 4;\n    else if (dist==sdTorus(veccros)) //torus\n        \treturn 5;    \n    return 0;\n}\n\nvec3 color_f(int num)//color of figure\n{\n\tswitch(num)\n\t{\n    \tcase 1:\n        \treturn vec3(0.2,0.0,0.0); //color of sphere\n    \tcase 2:\n        \treturn vec3(0.0,0.2,0.0); //color of box\n        case 3:\n        \treturn vec3(0.2,0.2,0.2); //color of cilindr\n        case 4:\n        \treturn vec3(0.1,0.1,0.15); //color of glass\n        case 5:\n            return vec3(0.2,0.2,0.0); //color of torus\n    }\n}\n\nvoid checklight(vec3 veccros)//add light from lights\n{\n    int num=num_of_fig(veccros);\n    color=color_f(num);\n    if (length(cros(light1,veccros)-veccros)<eps*4.0)\n       \tcolor+=color*20.0/(sqr(length(veccros-light1)+1.0));\n    if (length(cros(light2,veccros)-veccros)<eps*4.0)\n        color+=color*10.0/(sqr(length(veccros-light2)+1.0));\n}\n\nvoid mirrow(vec3 cv)//reflection for figure 3\n{\n    vec3 veccros=cv;\n    vec2 pc=vec2(cv.x,cv.z);\n    vec2 pb=vec2(sin(iTime/1.5)*6.0,4.5+cos(iTime));\n    vec2 p=vec2(ud.x-pc.x,ud.z-pc.y);\n    vec2 c=pc-pb;\n    float len=2.0*length(p)*(p.x*c.x+p.y*c.y)/length(c);\n    vec2 nv2=c*len-p;\n    vec3 nv=normalize(vec3(nv2.x,pc.y,nv2.y));\n    vec3 e=veccros+nv;;\n    vec3 b=veccros+nv/100.0;\n    veccros=cros(b,e);\n    if (veccros!=novec)\n    \tchecklight(veccros);\n}\n\nvoid glas(vec3 cv)//refraction for figure 4\n{\n    int num;\n    vec3 veccros=cv;\n    vec3 d=normalize(veccros-ud);\n    vec3 e=veccros+d;\n    vec3 b=e-normalize(veccros-ud)/2.0;\n    veccros=cros(b+vec3(0.5,-0.2,0.0),e+vec3(0.5,-0.2,0.0));\n    if (veccros!=novec){\n     \tchecklight(veccros);\n        num=num_of_fig(veccros);\n        if (num==3)\n   \t\t\tmirrow(veccros);\n    }\n    else color=vec3(0.7,0.7,0.7);\n    if (length(cros(light1,cv)-cv)<eps*4.0)\n    \tcolor+=color*20.0/(sqr(length(cv-light1)+1.0));\n    if (length(cros(light2,cv)-cv)<eps*4.0)\n        color+=color*10.0/(sqr(length(cv-light1)+1.0));\n    color=color-vec3(0.9,0.9,0.4)/4.0;\n} \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 veccros;\n    int num;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv=uv*2.0-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n    ud=vec3(uv,0.0);\n    veccros=cros(cam,ud);\n    num=num_of_fig(veccros);\n    if (veccros!=novec)\n    {\n    \tchecklight(veccros);\n    \tif (num==3)\n    \t\tmirrow(veccros);\n        if (num==4)\n        \tglas(veccros);\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}