{"ver":"0.1","info":{"id":"stXXzS","date":"1625933749","viewed":197,"name":"AntiPod - Heliolite","username":"Flopine","description":"A shader made as a loop for a track from ThronoCrigger, check out his album!!! \nhttps://thronocrigger.bandcamp.com/album/simulacra","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","animation","pastel","mograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define TAU 6.283185\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define BPM (95./60.)\n#define dt(sp,off) fract((iTime+off)*sp)\n#define animCirc(speed,off) easeInOutCirc(time(speed,off))\n\n// UE Documentation for blend references\n// https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/Functions/Reference/Blends/index.html\n#define bright_calc(color) (0.2126*color.x + 0.7152*color.g + 0.0722*color.b)\n\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nfloat background (vec2 uv)\n{\n    float rep = 256.;\n    uv.x += dt(1./(rep*1.5),0.)*rep;\n    return min(\n        \t\tlength(uv-0.5)-(.5-texNoise(uv*vec2(0.1,.5)).x),\n        \t\t\tmin(\n        \t\t \t\tlength(uv+vec2(0.9,0.5))-(.8-texNoise(uv*vec2(0.1,.5)).y),\n                        length(uv+vec2(-0.1,0.2))-(.4-texNoise(uv*vec2(0.1,.3)).x)\n                        )\n                     );\n}\n\nfloat foreground (vec2 uv)\n{\n    float rep = 256.;\n    uv.x -= dt(1./(rep*1.5),0.)*rep;\n    return min(\n        \t\tlength(uv-0.5)-(.5-texNoise(uv*vec2(0.1,.5)).x),\n        \t\t\tmin(\n        \t\t \t\tlength(uv+vec2(0.9,0.5))-(.8-texNoise(uv*vec2(0.1,.5)).y),\n                        length(uv+vec2(-0.1,0.2))-(.4-texNoise(uv*vec2(0.1,.3)).x)\n                        )\n                     );\n}\n\nvec3 palette (float t,vec3 d)\n{return vec3(0.7)+vec3(0.4)*cos(TAU*(vec3(1.)*t+d));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec2 backuv = vec2(uv.x * texNoise(uv*0.2).x*0.6, uv.y);\n    vec2 foreuv = backuv*rot(PI/4.);\n       \n    vec3 col1 = clamp(palette(background(backuv),vec3(0.9,0.7,0.5)),0.,1.);\n    vec3 col2 = clamp(palette(foreground(foreuv),vec3(0.7,0.8,0.4)),0.,1.);\n    \n    // to get brightness of a color\n    float b1 = bright_calc(col1);\n    float b2 = bright_calc(col2);\n    \n    // blend lighten\n    vec3 col = (b1<b2)? col2:col1;\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}