{"ver":"0.1","info":{"id":"3dB3zw","date":"1548382304","viewed":77,"name":"Ez JuM jUm","username":"winstonrenatan","description":"zooommmmmmm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circletriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n//COLORS\n#define red vec4(1.0, 0.0, 0.0, 0.0)\n#define green vec4(0.0, 1.0, 0.0, 0.0)\n#define blue vec4(0.0, 0.0, 1.0, 0.0)\n#define white vec4(1.0, 1.0, 1.0, 1.0)\n#define grey vec4(0.5, 0.5, 0.5, 0.25)\n\n//ZOOM IN OUR OUT\nmat2 zoomInOut(vec2 scale){\n    return mat2(scale.x, 0.0, 0.0, scale.y);\n}\n\n//SPINS OBJECT\nmat2 spinInPlace(float angle){\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n//MOVE IN X AND/OR Y COORDINATE\nvec2 XY(float cosin, float sinus, float speed) {\n\treturn vec2(cos(cosin), sin(sinus))*speed;\n}\n\n//SQUARE FUNCTION\nfloat Square(vec2 uv, vec2 pos, float width, float height){\n    uv = uv+pos;\n    vec2 bl = step(abs(uv*2.0-1.0), vec2(width));  //Width\n    vec2 b2 = step(abs(uv*2.0-1.0), vec2(height)); //Height\n    float shape = bl.x * b2.y;\n    \n\treturn shape;\n}\n\n//CIRCLE FUNCTION\nfloat Circle(vec2 uv, vec2 pos, float radius, float blur){\n    float dist = length(uv-pos);\n    float circ = smoothstep(radius, radius-blur, dist);\n    \n    return circ;\n}\n\n//POLYGON FUNCTION\nfloat polygon(vec2 uv, vec2 pos, float size, float blur, int sides){\n    uv = uv-pos;\n    //Angle and radius of polygon\n    float angle = atan(uv.x,uv.y)+PI;\n    float rad = TWO_PI/float(sides);\n    float dist = cos(floor(0.5+angle/rad)*rad-angle)*length(uv);\n    float poly = smoothstep(size, size-blur, dist);\n    \n    return poly;\n}\n\n//INSERT SPIN TRIANGLE color beloman\nvec4 spinTriangle(vec4 fragColor, vec4 color, vec2 uv){\n    uv=spinInPlace(sin(iTime)*PI)*uv;\n    float triangle = polygon(uv, vec2(0.0, 0.0), 0.05, 0.005, 3);//Make the Triangle\n    vec4 coloredItem=color*triangle;//Give color to item\n    fragColor=coloredItem;\n    \n    return fragColor;\n}\n\n//ZOOM IN AND OUT 6 SIDED POLYGON\nvec4 zoomPolygon(vec4 fragColor, vec4 color, vec2 uv){\n\tuv = zoomInOut(vec2(sin(iTime)+1.0))*uv;\n    float poly = polygon(uv, vec2(0.0, 0.0), 0.1, 0.005, 6);//Make the Polygon\n    vec4 coloredItem=color*poly;//Give color to item\n\tfragColor=coloredItem;\n    \n    return fragColor;\n}\n\n//SQUARE SPINS IN A CIRCLE\nvec4 spinSquare(vec4 fragColor, vec4 color, vec2 uv){\n\tuv += XY(iTime, iTime, 0.2);\n    float square = Square(uv, vec2(0.5, 0.5), 0.1, 0.1);//Make the Square\n    vec4 coloredItem=color*square;//Give color to item\n\tfragColor=coloredItem;\n    \n    return fragColor;\n}\n\n//CIRCLE GOES IN X-COORDINATE\nvec4 coordinateXCircle(vec4 fragColor, vec4 color, vec2 uv){\n\tuv += XY(iTime, 0.0, 0.2);\n    float circle = Circle(uv, vec2(0.0, -0.35), 0.05, 0.01);//Make the Circle\n    vec4 coloredItem=color*circle;//Give color to item\n\tfragColor=coloredItem;\n    \n    return fragColor;\n}\n\n//CIRCLE GOES IN Y-COORDINATE\nvec4 coordinateYCircle(vec4 fragColor, vec4 color, vec2 uv){\n\tuv += XY(0.0, iTime, 0.2);\n    float circle = Circle(uv, vec2(-0.35, 0.0), 0.05, 0.01);//Make the Circle\n    vec4 coloredItem=color*circle;//Give color to item\n\tfragColor=coloredItem;\n    \n    return fragColor;\n}\n\n//MAIN CANVAS\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //Add item then output to screen\n    fragColor += spinTriangle(fragColor, red, uv);\n    fragColor += zoomPolygon(fragColor, blue, uv);\n    fragColor += spinSquare(fragColor, white, uv);\n    fragColor += coordinateXCircle(fragColor, green, uv);\n    fragColor += coordinateYCircle(fragColor, grey, uv);\n}","name":"Image","description":"","type":"image"}]}