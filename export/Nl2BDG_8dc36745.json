{"ver":"0.1","info":{"id":"Nl2BDG","date":"1652705361","viewed":85,"name":"Grotto","username":"axelduch","description":"n/a","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 20\n#define MAX_DIST 50.0f\n#define SURFACE_DIST 1.5f\n\nvec4 sphere = vec4(0, 0, 0, 2.5);\n    \nfloat dist_field(vec3 p) {\n    vec3 pSphere = vec3(p - sphere.xyz);\n    \n    pSphere = vec3(pSphere.x, pSphere.y, pSphere.z + iTime * 10. * normalize(iMouse.x/iResolution.x));\n    \n    float dS = length(mod(pSphere, 1.) - .5)-sphere.w;\n    float hole = length(mod(pSphere*.6, 5.) - 2.5)-sphere.w;\n    return min(mix(dS, hole, 1.6), MAX_DIST);\n}\n\n\nvec3 get_normal(vec3 p) {\n    vec2 e = vec2(.01, 0);\n    float d = dist_field(p);\n    vec3 n = vec3(\n        d-dist_field(p-e.xyy),\n        d-dist_field(p-e.yxy),\n        d-dist_field(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\n\nfloat ray_march(vec3 ro, vec3 rd) {\n    float dist = 0.0f;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + dist * rd;\n        \n        float _dist = dist_field(p);\n        \n        dist += _dist;\n        \n        if (_dist < SURFACE_DIST || dist > MAX_DIST) break;\n    }\n    \n    return dist;\n}\n\n\nfloat get_light(vec3 light_pos, vec3 p) {\n    vec3 l = normalize(light_pos - p);\n    vec3 n = get_normal(p);\n    \n    float diffuse = clamp(dot(n, l), .0, 1.);\n    float d = ray_march(p+n*SURFACE_DIST*2.0, l);\n    float specular = pow(max(dot(normalize(l), reflect(-l, n)), 0.0), 128.);\n    if (d<length(light_pos-p)) {\n        diffuse *= .1;\n        specular = 0.;\n    }\n    \n    return diffuse + specular;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(.5);\n    vec3 ro = vec3(0, 1, -5);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = ray_march(ro, rd);\n    \n    \n    vec3 p = ro + rd * d;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n   \n    if (d <= MAX_DIST) {\n        float light =  get_light(vec3(0,4,2), p);\n        \n        col = texture(iChannel0, vec2(uv*d*light)).xyz;\n        //col.y = col.z = col.x;\n        col *= vec3(light);\n    } else {\n        col = vec3(texture(iChannel0, normalize(uv)+0.5*(mod(iTime, 2.)))*.5);\n    }\n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col , 1.0);\n}","name":"Image","description":"","type":"image"}]}