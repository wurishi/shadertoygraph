{"ver":"0.1","info":{"id":"cl23W3","date":"1674016722","viewed":228,"name":"Blue Dots That Don't Disappear","username":"cnlohr","description":"Stare at the yellow dot intently.  The blue dots do not disappear.\n\nI watched https://www.youtube.com/watch?v=EI-bIfC4rVM and wanted to make my own version.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Optical illusion based on the following youtube video:\n// https://www.youtube.com/watch?v=EI-bIfC4rVM\n// Hex Grid code From: https://andrewhungblog.wordpress.com/2018/07/28/shader-art-tutorial-hexagonal-grids/\n// Rest of code public domain.\n\nconst float gridDensity = 15.0;\nconst float edgeDotDist = 0.3;\nconst float rotSpeedMultiplier = .6;\nconst float dotSize = 0.6;\nfloat sharpFactor;\n\n\nfloat calcHexDistance(vec2 p)\n{\n     const float hexHalfWidth= .5;\n     // 1.7320508 is sqrt(3)\n     const vec2 s = vec2(1, 1.7320508);\n     p = abs(p);\n     return max(dot(p, s * .5), p.x) - hexHalfWidth;\n}\n\nvec4 calcHexInfo(vec2 uv)\n{\n     const float hexHalfWidth= .5;\n     // 1.7320508 is sqrt(3)\n     const vec2 s = vec2(1, 1.7320508);\n     // remember, s is vec2(1, sqrt(3))\n     vec4 hexCenter = round(vec4(uv, uv - vec2(.5, 1.)) / s.xyxy);\n     vec4 offset = vec4(uv - hexCenter.xy * s, uv - (hexCenter.zw + .5) * s);\n     return dot(offset.xy, offset.xy) < dot(offset.zw, offset.zw) ? \n          vec4(offset.xy, hexCenter.xy-0.5) : vec4(offset.zw, hexCenter.zw);\n}\n\nvec4 Blend( vec4 Old, vec4 New )\n{\n    return mix( Old, New, New.a );\n}\n\nvec4 BlendFillCircle( vec4 Old, vec2 uv, vec3 Col )\n{\n    float alp = ((0.03-length(uv/dotSize))*gridDensity)*sharpFactor;\n    alp = clamp( alp, 0.0, 1.0 );\n    return Blend( Old, vec4( Col, alp ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float omega = iTime*rotSpeedMultiplier;\n    sharpFactor = length( iResolution.x )*0.5/gridDensity;\n    \n    vec4 color = vec4( 0.0 );\n\n    //Uncomment to disable \n    //omega = 0.0;\n    \n    vec2 origUV = (fragCoord-iResolution.xy/2.0)/iResolution.xx*2.0;\n    vec2 rot = vec2( cos( omega ), sin( omega ) );\n    vec2 uv = vec2( dot( rot, origUV ), dot( rot.yx * vec2( 1., -1.), origUV ) );\n    vec2 rep = uv * gridDensity;\n    \n    vec4 hexInfo = calcHexInfo(rep);\n    vec4 hexInfoAlt1 = calcHexInfo(rep + vec2(0.5,0.0));\n    vec4 hexInfoAlt2 = calcHexInfo(rep + vec2(0.25,1.73*0.25));\n    vec4 hexInfoAlt3 = calcHexInfo(rep + vec2(0.25,1.73*0.75));\n\n    float centerdist = calcHexDistance( hexInfo.xy );\n    vec3 centerdistAlt = vec3( calcHexDistance( hexInfoAlt1.xy ), calcHexDistance( hexInfoAlt2.xy ), calcHexDistance( hexInfoAlt3.xy ) );\n    centerdistAlt *= -vec3( 1.0, 1.0, 1.0 );\n    float cmax = 1.0-max( max( centerdistAlt.x, centerdistAlt.y ), centerdistAlt.z )*2.0;\n    \n    vec2 normCell = hexInfo.zw + vec2( 0.5, 0.5 );\n    \n    float alp = clamp( ( centerdist + 0.06 ) * sharpFactor, 0.0, 1.0 );\n    alp *= clamp( ( cmax + centerdist - 0.13 ) * sharpFactor, 0.0, 1.0 );\n    \n    alp *= clamp( (10.0-length( normCell * vec2( 1.0, 1.73 ) ))*0.2, 0.0, 1.0 );\n    \n    \n    color = BlendFillCircle( color, origUV*2.0, vec3( 1.0, 1.0, 0.0 ) );\n    color = BlendFillCircle( color, origUV + edgeDotDist*vec2( 0.0, -1.0 ), vec3( 0.0, 0.5, 1.0 ) );\n    color = BlendFillCircle( color, origUV + edgeDotDist*vec2( -0.866, 0.5 ), vec3( 0.0, 0.5, 1.0 ) );\n    color = BlendFillCircle( color, origUV + edgeDotDist*vec2( 0.866, 0.5 ), vec3( 0.0, 0.5, 1.0 ) );\n\n    color = Blend( color, vec4( 1.0, 1.0, 1.0, alp ) );\n    \n\n\n/*    if( centerdist < -0.1 )\n    {\n        fragColor = vec4( 0., 0., 0., 1. );\n        return;\n    }\n    */\n    // for debugging the cells.\n    //fragColor = vec4( mod( hexInfo.zw/2.0, 1.0 ), 0.0, 1.0 );\n    \n    //fragColor = vec4( centerdistAlt, 1.0 );\n    fragColor = vec4( color.rgb, 1.0 );\n}","name":"Image","description":"","type":"image"}]}