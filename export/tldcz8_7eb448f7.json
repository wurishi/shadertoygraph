{"ver":"0.1","info":{"id":"tldcz8","date":"1608524611","viewed":130,"name":"galaxy1986","username":"shortwavedave","description":"//Adapted from Galaxy by Fabrice NEYRET:\n//https://www.shadertoy.com/view/Xsl3zX","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Adapted from Galaxy by Fabrice NEYRET:\n//https://www.shadertoy.com/view/Xsl3zX\n\nconst float RETICULATION = 2.;  // strenght of dust texture\nconst float NB_ARMS = 3.;       // number of arms\n//const float ARM = 3.;         // contrast in/out arms\nconst float COMPR = .21;         // compression in arms\nconst float SPEED = .1;\nconst float GALAXY_R = 1./2.;\nconst float BULB_R = 1./4.;\nconst vec3 GALAXY_COL = vec3(.9,.9,1.); //(1.,.8,.5);\nconst vec3 BULB_COL   = vec3(1.,.8,.8);\n//const vec3 SKY_COL    = .5*vec3(.1,.3,.5);\nconst vec3 SKY_COL    = .5*vec3(0.,0.,0.);\n\t\t\n#define t iTime\n\n// --- base noise\nfloat tex(vec2 uv) \n{\n\tfloat n = texture(iChannel0,uv, 0.).r;\n\t\n#define MODE 3  // kind of noise texture\n#if MODE==0         // unsigned\n\t#define A 2.\n\treturn n;\n#elif MODE==1       // signed\n\t#define A 3.\n\treturn 2.*n-1.;\n#elif MODE==2       // bulbs\n\t#define A 3.\n\treturn abs(2.*n-1.);\n#elif MODE==3       // wires\n\t#define A 1.5\n\treturn 1.-abs(2.*n-1.);\n#endif\n}\n\n\n// --- perlin turbulent noise + rotation\nfloat noise(vec2 uv)\n{\n\tfloat v=0.;\n\tfloat a=-SPEED*t,\tco=cos(a),si=sin(a); \n\tmat2 M = mat2(co,-si,si,co);\n\tconst int L = 5;\n\tfloat s=1.;\n\tfor (int i=0; i<L; i++)\n\t{\n\t\tuv = M*uv;\n\t\tfloat b = tex(uv*s);\n\t\tv += 1./s* pow(b,RETICULATION); \n\t\ts *= 2.;\n\t}\n\t\n    return v/2.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoomTime = pow(iTime,6.);\n    if (zoomTime >= 19.23) {\n        zoomTime = 19.23;\n    }\n    vec2 uv2 = ((fragCoord/iResolution.xy)-0.5)*vec2(iResolution.x/iResolution.y,1.);\n\tvec2 uv = mod((10.-.5*zoomTime)*fragCoord.xy/iResolution.y,1.);\n    //uv -= vec2(.35+.1*sin(iTime*.001*uv.x),.1+.1*cos(iTime*.001*uv.x));\n    uv -= vec2(.35,.2);\n\n    uv *= vec2(-.7 + exp(.03*iTime), -.6 + exp(.02*iTime));\n\tvec3 col;\n\t\n\t// spiral stretching with distance\n\tfloat rho = length(uv)*5.; // polar coords\n\tfloat ang = atan(uv.y,uv.x);\n\tfloat shear = 4.*log(rho); // logarythmic spiral\n\tfloat c = cos(shear), s=sin(shear);\n\tmat2 R = mat2(c,-s,s,c);\n\n\t// galaxy profile\n\tfloat r; // disk\n\tr = rho/GALAXY_R; float dens = exp(-r*r);\n\tr = rho/BULB_R;\t  float bulb = exp(-r*r);\n\tfloat phase = NB_ARMS*(ang-shear);\n\t// arms = spirals compression\n\tang = ang-COMPR*cos(phase)+SPEED*t;\n\tuv = rho*vec2(cos(ang),sin(ang));\n\t// stretched texture must be darken by d(new_ang)/d(ang)\n\tfloat spires = 1.+NB_ARMS*COMPR*sin(phase);\n\t// pires = mix(1.,sin(phase),ARM);\n\tdens *= spires + .5*spires*cos(iTime);\t\n\t\n\t// gaz texture\n\tfloat gaz = noise(.09*1.2*R*uv);\n\tfloat gaz_trsp = pow((1.-gaz*dens),2.);\n\n\t// stars\n\t//float a=SPEED*t, co=cos(a),si=sin(a); \n\t//mat2 M = mat2(co,-si,si,co);\n\t// adapt stars size to display resolution\n\tfloat ratio = .8*iResolution.y/iChannelResolution[0].y;\n\tfloat stars1 = texture(iChannel1,ratio*uv+.5, 0.).r, // M*uv\n\t      stars2 = texture(iChannel0,ratio*uv+.5, 0.).r,\n\t\t  stars = pow(1.-(1.-stars1)*(1.-stars2),5.);\n\t\n\tstars = pow(stars,1.+.5*pow(cos(iTime),2.));\n\t\n\t// mix all\t\n\tcol = mix(SKY_COL,\n\t\t\t  gaz_trsp*(1.7*GALAXY_COL) + 1.2*stars, \n\t\t\t  dens);\n\tcol = mix(col, 1.2*BULB_COL, bulb);\n\t\t\n    vec3 viewDir = normalize(vec3(uv2+vec2(0.0,-.4),.5));\n    \n    vec2 planarUV = viewDir.xz/abs(viewDir.y);\n    \n    float depth = planarUV.y;\n    \n    planarUV += vec2(iTime*0., iTime*.5);\n    \n    vec3 albedo = vec3(0.,0.,.2*texture( iChannel2, planarUV*.1 ).r);\n    \n    float light = (.5+0.1*iTime)/(depth*depth)*viewDir.z;\n    \n    //fragColor = vec4(light*albedo,1.);\n    //fragColor = vec4(albedo,1.0);\n    \n\tfragColor = vec4(col+light*albedo,1.);\n}","name":"Image","description":"","type":"image"}]}