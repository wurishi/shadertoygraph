{"ver":"0.1","info":{"id":"ct3fDs","date":"1701717032","viewed":143,"name":"Sparkly Britney","username":"spalmer","description":"Diffraction spikes as a post-process using several lateral filter passes.\nIf nothing shows, try picking a video for iChannel0","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["filter","bloom","spikes","diffraction"],"hasliked":0,"parentid":"tdBfDD","parentname":"Blur Bilateral Gauss"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// someone probably did something like this before here\n#define Source iChannel0\n#define SRes iChannelResolution[0]\n\nconst float blursize = .6;\n\nconst float useGamma = 2.;\n\nvec4 T(vec2 uv)\n{\n    const vec4 bgCol = vec4(vec3(.02), 1);\n    if (!all(greaterThanEqual(uv, vec2(0))) || !all(lessThan(uv, vec2(1)))) return bgCol;\n    vec4 c = texture(Source, uv);\n    c = vec4(pow(c.rgb, vec3(useGamma)), c.a);\n    c = mix(c, bgCol, clamp(4. * dot(c.rgb, vec3(-2,2.3,-2)), 0., 1.)); // green screen filter\n    return c;\n}\n\n// lateral filter blur of image\n// ch is which texture channel to use\n// uv is texcoord of query\n// v should be the axis the filter applies along (usually vec2(1,0) or vec2(0,1))\n// w is blur width\nvec4 lateral(vec2 uv, vec2 v, float w)\n{\n    // n is half number of taps (not counting center tap)\n    int n = int(.5 * blursize * iResolution.y);\n    vec4 t = T(uv);\n    for (int i = n; i > 0; --i) {\n        float f = float(i)/float(n);\n        float s = exp2(-24. * f * f);\n        vec2 m = f * w * v;\n     \tt = max(t, T(uv + m) * s);\n        t = max(t, T(uv - m) * s);\n    }\n\n    t.rgb = pow(clamp(1. * (t.rgb - vec3(.45,.33,.04)), 0., 1.), vec3(2.)); // threshold\n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 ra = iResolution.xy        \n    , rs = SRes.xy;\n    // carefully unstretch video to preserve aspect ratio\n    vec2 fc = (fragCoord - .5*ra) * vec2(rs.y / rs.x,1.) * 1.2 / ra.y + .5;\n    vec3 col = T(fc).rgb;\n    vec3 bloom; // sum 3 spikes\n    bloom = lateral(fc\n        , vec2(1,0)\n        , blursize\n        ).rgb;\n    bloom += lateral(fc\n        , vec2(.5, .866)\n        , blursize * .8\n        ).rgb;\n    bloom += lateral(fc\n        , vec2(.5, -.866)\n        , blursize * .8\n        ).rgb;\n    col += bloom;\n    vec2 ls = fc - vec2(-.5,1.2);\n    col += exp2(-7. * dot(ls, ls));\n    // gamma correct back to approximately sRGB gamut for output\n    col = pow(col, vec3(1./useGamma));\n    //col += .5/256. * sin(dot(fragCoord, vec2(1./23., 1./23./17.)) * 23456.); // dither noise\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}