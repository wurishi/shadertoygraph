{"ver":"0.1","info":{"id":"ttSSWm","date":"1566058619","viewed":157,"name":"LiveCodingPractice004(1h)","username":"Hirai_worthless","description":"test","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.14159265;\nmat2 genRot(float v){\n\treturn mat2(cos(v),-sin(v),sin(v),cos(v));\n}\nvec2 pmod(vec2 p,float c){\n    p *= genRot(PI/c);\n\tfloat at = atan(p.y/p.x);\n    at = mod(at,PI * 2./c);\n    float r = length(p);\n    p = vec2(r * cos(at),r * sin(at));\n    p *= genRot(-PI/c);\n    return p;\n    \n}\nfloat map(vec3 p){\n    vec3 q = (fract(p/4. + 0.5)-0.5) * 4.;\n    vec3 s = p;\n    s.z = (fract(s.z/4. + 0.5)-0.5) * 4.;\n    p.x = p.x * sign(p.y);\n    p.y = -abs(-p.y);\n    float h =  - 2.5;\n    float a = 1.;\n    float T = 1.0;\n    for(int i = 0; i < 8; i++){\n    \th += a * sin((p.x - iTime/4.)/T) * sin((p.z + iTime/4.)/T);\n        a *= 0.5;\n        T *= 2.0;\n    }\n    h = floor(h * 10.)/10.;\n\tfloat terrain = p.y - h;\n    q.y += iTime * sign(p.x - 2.);\n    float r = floor((0.4 + 0.2 * cos(q.y * PI))* 15.0) / 15.0;\n    s.x -= iTime * sign(s.y);\n    s.y = abs(s.y);\n    float r2 = floor((0.4 + 0.2 * cos(s.x * PI)) * 15.) / 15.;\n    float tower = length(s.yz - vec2(1.25 , 2.)) - r2;\n    tower = min(tower,length(q.xz) - r);\n    \n    return min(terrain,tower);\n}\nvec3 getNormal(vec3 p){\n\tvec3 x = dFdx(p);\n    vec3 y = dFdy(p);\n    return normalize(cross(x,y));\n}\n\nvec4 trace(vec3 o,vec3 r){\n\tvec4 d;\n    float t = 0.;\n    for(int i = 0; i < 96; i++){\n    \tvec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    vec3 p = o + r * t;\n    vec3 n = getNormal(p);\n    return vec4(n,t);\n}\nvec3 cam (){\n vec3 c = vec3(2.,0.,-2.5 + iTime * 3.);\n    return c;\n}\nvec3 ray (vec2 uv,float z){\n\tvec3 r = normalize(vec3(uv,z));\n    r.xz *= genRot(PI/8.);\n    r.yz *= genRot(PI/16.);\n    r.xy *= genRot(iTime/4.);\n    return r;\n}\nvec3 getCol (vec3 o,vec3 r,vec4 d){\n\tfloat t = d.w;\n    vec3 p = o + r * t;\n    vec3 n = d.xyz;\n    vec3 ccol;\n    float at = atan(r.y/r.x) * 2.;\n    ccol.x = sin(at + iTime);\n    ccol.y = sin(at + iTime + PI * 2./3.);\n    ccol.z = sin(at + iTime + PI * 4. /3.);\n    ccol =  ccol / 2. + 0.5;\n    vec3 bc = vec3(pow(1. - dot(r,n),2.));\n    bc = min(fract(p.x + iTime * sign(p.x - 2.)),fract(p.z + iTime)) < 0.1 ? vec3(1.) : bc ;\n    bc *= ccol;\n    float fog = 1./(1. + t * t * 0.01);\n    bc = mix(bc,vec3(1.),1. - fog);\n    return bc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy)/iResolution.y;\n    vec3 o = cam();\n    vec3 r = ray(uv,1. + 0.75 * sin(iTime *1.5));\n    vec4 data = trace(o,r);\n    vec3 c = getCol(o,r,data);\n    fragColor = vec4(c,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}