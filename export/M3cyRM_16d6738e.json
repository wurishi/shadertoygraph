{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"mic","id":"XdXGRr","filepath":"/presets/mic.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Shader #1: Neon Edges + Simple Cell Shading\n// ------------------------------------------------\n// Inspired by your original code, but focusing on\n// strong \"neon\" outlines and basic cell shading.\n//\n// Uniform \"iChannel0\" used for audio input (amplitude, etc.).\n\n#define SPEED 1.0\n#define FOV 1.0\n\n#define MAX_STEPS 1000\n#define EPS 0.001\n#define RENDER_DIST 10.0\n\n#define PI 3.14159265359\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// A fun multi-sphere union with some rotation\nfloat mapScene(in vec3 p) {\n    float audioAmp = texture(iChannel0, vec2(0.0,0.0)).r; // Sample audio amplitude\n    float t = iTime * SPEED;\n\n    // Move/rotate\n    p.yz = mat2(cos(t),-sin(t),sin(t),cos(t)) * p.yz;\n    float d = sdSphere(p - vec3(0.0, 0.0, -1.0), 0.5 + audioAmp * 0.3);\n\n    // Another sphere\n    vec3 p2 = p - vec3(0.5 , 0.3 , 0.);\n    p2.xz = mat2(cos(t*0.7), -sin(t*0.7), sin(t*0.7), cos(t*0.7)) * p2.xz;\n    float d2 = sdSphere(p2, 0.35 + audioAmp * 0.8);\n\n    return min(d, d2);\n}\n\n// Ray marching\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float dist = 0.0;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd * dist;\n        float d = mapScene(p);\n        if(abs(d) < EPS) break;\n        dist += d;\n        if(dist > RENDER_DIST) break;\n    }\n    return dist;\n}\n\n// Approximate normal\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPS, 0.0);\n    return normalize(vec3(\n        mapScene(p + e.xyy) - mapScene(p - e.xyy),\n        mapScene(p + e.yxy) - mapScene(p - e.yxy),\n        mapScene(p + e.yyx) - mapScene(p - e.yyx)\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Setup\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera\n    vec3 ro = vec3(0.0,0.0,-3.0);\n    vec3 rd = normalize(vec3(uv, FOV));\n    \n    // Ray march\n    float travel = rayMarch(ro, rd);\n    if(travel > RENDER_DIST) {\n        // Miss: background\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    // Position + normal\n    vec3 p = ro + rd * travel;\n    vec3 n = getNormal(p);\n    \n    // Lighting\n    vec3 lightDir = normalize(vec3(-1.0, 1.0, -0.5));\n    float diff = dot(n, lightDir);\n    \n    // Simple cell shading: quantize the diffuse in steps\n    float levels = 9.0;\n    diff = floor(diff * levels) / levels;\n    diff = saturate(diff);\n    \n    // Neon edge effect: strong brightness on edges that face away\n    // from the normal or near silhouette\n    float edgeFactor = pow(1.0 - abs(dot(n, -rd)), 3.0) * 2.0;\n    \n    // Final color\n    vec3 baseColor = vec3(0.0, 1.0, 0.8) * diff;           // a teal color\n    vec3 neonEdge  = vec3(1.0, 0.1, 0.7) * edgeFactor;     // neon pink edge\n    vec3 finalCol  = baseColor + neonEdge;\n    \n    // Output\n    fragColor = vec4(finalCol, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":true,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"M3cyRM","date":"1734857278","viewed":56,"name":"PerspectiveCellBalls_audio","username":"profmitchell","description":"ichannel0 is mic ","likes":2,"published":1,"flags":4,"usePreview":0,"tags":["audio","cellshade"],"hasliked":0,"parentid":"","parentname":""}}