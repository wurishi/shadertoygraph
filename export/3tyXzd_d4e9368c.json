{"ver":"0.1","info":{"id":"3tyXzd","date":"1583358185","viewed":88,"name":"3/2020","username":"rimina","description":"Continuum of yesterday's daily shader (https://www.shadertoy.com/view/WtKXz3). Yesterday I was tired and ran out of time and energy to do more than a sphere. So today I continued from that. And well didn't do much. I continue tomorrow. :D","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 100\n#define E 0.001\n\nconst vec3 AMBIENT = vec3(0.6, 0.4, 0.64);\nconst vec3 LC1 = vec3(0.4, 0.8, 0.8);\nconst vec3 LC2 = vec3(0.8, 0.5, 0.3);\n\nfloat scene(in vec3 p){\n    \n    float pl = dot(p, normalize(vec3(0.0, 1.0, 0.0)))+1.0;\n    \n    vec3 pp = p;\n    vec2 n = vec2(6.0, 8.0);\n    vec2 dif = n*0.5;\n    pp.xz = mod(pp.xz+dif, n)-dif;\n    \n    float sp = length(pp)-2.0;\n    return min(sp, pl);\n}\n\nfloat march(in vec3 o, in vec3 d, in float far, out vec3 p, out bool hit){\n    float t = 0.0;\n    for(int i = 0; i < STEPS; ++i){\n        p = o + d*t;\n        float dist = scene(p);\n        t += dist;\n        if(dist <= E || t >= far){\n            if(dist <= E ){\n            \thit = true;\n            }\n            break;\n        }\n    }\n    \n    return t;\n}\n\nvec3 normal(in vec3 p){\n    vec3 eps = vec3(E, 0.0, 0.0);\n    return normalize(vec3(\n        scene(p+eps.xyy) - scene(p-eps.xyy),\n        scene(p+eps.yxy) - scene(p-eps.yxy),\n        scene(p+eps.yyx) - scene(p-eps.yyx)\n    ));\n}\n\nvec3 shade(in vec3 p, in vec3 d, in vec3 ld, in vec3 lp){\n    \n    vec3 n = normal(p);\n    float lamb = max(dot(n,ld), 0.0);\n    vec3 angle = reflect(n, ld);\n    float spec = pow(max(dot(d, angle), 0.0), 20.0);\n    \n    float l = distance(p, lp);\n    bool hit = false;\n    vec3 sp = vec3(0.0);\n    float st = march(p+E*n*2.0, ld, l, p, hit);\n    float s = 1.0;\n    if(hit){\n        s = 0.0;\n    }\n    \n    return lamb*vec3(0.5, 0.0, 0.5)*0.5 + spec*vec3(1.0, 0.5, 1.0)*0.8*s;\n}\n\nvec3 fog(in vec3 col, in vec3 p, in vec3 ro, in vec3 rd, in vec3 ld, in vec3 lc){\n    float d = length(p-ro);\n    float sa = max(dot(rd, -ld), 0.0);\n    float fa = 1.0-exp(-d*0.05);\n    vec3 fc = mix(vec3(0.64, 0.62, 0.6), lc, pow(sa, 4.0));\n    return mix(col, fc, fa);\n}\n\nmat3 camera(in vec3 o, in vec3 t, in vec3 up){\n    \n    vec3 z = normalize(t-o);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    \n    return mat3(x, y, z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0-1.0;//scaling from -1 to 1\n    uv.x *= (iResolution.x/iResolution.y);\n    \n    vec3 ro = vec3(0.0, 4.0, 0.0);\n    vec3 rt = vec3(0.0, -4., 10.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    mat3 cam = camera(ro, rt, up);\n    vec3 rd = normalize(cam*vec3(uv, radians(60.0)));\n    \n    vec3 p = vec3(0.0);\n    bool hit = false;\n    float t = march(ro, rd, 40.0, p, hit);\n    vec3 col = AMBIENT * 0.6;\n    \n    vec3 lp = vec3(0.5, -4.0, 1.0);\n    vec3 lt = vec3(0.0, 0.0, -1.0);\n    vec3 ld = normalize(lt-lp);\n    vec3 ld2 = normalize(ro-rt);\n    \n    if(hit){\n        vec3 c = shade(p, rd, ld, lp);\n        c += shade(p, rd, ld2, ro);\n        c *= 0.5;\n        col += c;\n    }\n    \n    col = fog(col, p, ro, rd, ld, LC1);\n    col += fog(col, p, ro, rd, ld2, LC2);\n    col *= 0.5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}