{"ver":"0.1","info":{"id":"dtj3zt","date":"1673786735","viewed":69,"name":"Pete Mondian picture","username":"whiteand","description":"An exercise from book of shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rectangles","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform vec2 u_resolution;\n\nfloat rect(float x1, float y1, float w, float h, vec2 uv) {\n  float res = 1.;\n  float x2 = x1 + w;\n  float y2 = y1 + h;\n  res *= step(x1, uv.x);\n  res *= step(y1, uv.y);\n  res *= 1. - step(x2, uv.x);\n  res *= 1. - step(y2, uv.y);\n  return res;\n}\n\nfloat outline_rect(float x1, float y1, float x2, float y2, float line_width, vec2 uv) {\n  return rect(x1, y1, x2, y2, uv) * (1. - rect(x1 + line_width, y1 + line_width, x2 - line_width, y2 - line_width, uv));\n}\n\nvec3 rgb(int r, int g, int b) {\n  return vec3(float(r) / 255., float(g) / 255., float(b) / 255.);\n}\n\nconst float x1 = 0.060 ;\nconst float x2 = 0.240;\nconst float x3 = 0.702;\nconst float x4 = 0.932;\nconst float y1 = 0.244;\nconst float y2 = 0.436;\nconst float y3 = 0.880;\nconst float dw = 0.034;\nconst float dh = dw;\n\nfloat get_red_ratio(vec2 uv) {\n  float red_ratio = 1.;\n  red_ratio *= rect(0., 1. - y1, x1, 1., uv);\n  red_ratio = max(red_ratio, rect(x1 + dw, 1. - y1, x2 - x1 - dw, 1., uv));\n  red_ratio = max(red_ratio, rect(0., 1. - y2, x1, y2 - y1 - dh, uv));\n  red_ratio = max(red_ratio, rect(x1 + dw, 1. - y2, x2 - x1 - dw, y2 - y1 - dh, uv));\n  return red_ratio;\n}\n\nfloat get_white_ratio(vec2 uv) {\n  float res = rect(x2 + dw, 1. - y1, x3 - x2 - dw, y1, uv);\n  res = max(res, rect(x2 + dw, 1. - y2, x3 - x2 - dw, y2 - y1 - dh, uv));\n  res = max(res, rect(x3 + dw, 1. - y1, x4 - x3 - dw, y1, uv));\n  res = max(res, rect(x3 + dw, 1. - y2, x4 - x3 - dw, y2 - y1 - dh, uv));\n  res = max(res, rect(0., 0., x2, 1. - y2 - dh, uv));\n  res = max(res, rect(x2 + dw, 1. - y3, x3 - x2 - dw, y3 - y2 - dh, uv));\n  res = max(res, rect(x3 + dw, 1. - y3, x4 - x3 - dw, y3 - y2 - dh, uv));\n  res = max(res, rect(x4 + dw, 1. - y3, 1. - x4, y3 - y2 - dh, uv));\n  res = max(res, rect(x2 + dw, 0., x3 - x2 - dw, 1. - y3 - dh, uv));\n  return res;\n}\n\nfloat get_yellow_ratio(vec2 uv) {\n  float res = rect(x4 + dw, 1. - y1, 1. - x4 - dw, y1, uv);\n  res = max(res, rect(x4 + dw, 1. - y2, 1. - x4 - dw, y2 - y1 - dh, uv));\n  return res;\n}\n\nfloat get_blue_ratio(vec2 uv) {\n  float res = rect(x3 + dw, 0., x4 - x3 - dw, 1. - y3 - dh, uv);\n  res = max(res, rect(x4 + dw, 0., 1. - x4 - dw, 1. - y3 - dh, uv));\n  return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 st = gl_FragCoord.xy / iResolution.xy;\n\n  vec3 res = vec3(0.);\n\n  res += rgb(162, 31, 33) * get_red_ratio(st);\n\n  res += rgb(245, 239, 221) * get_white_ratio(st);\n  res += rgb(254, 203, 62) * get_yellow_ratio(st);\n  res += rgb(1, 94, 154) * get_blue_ratio(st);\n\n  fragColor = vec4(res, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}