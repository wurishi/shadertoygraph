{"ver":"0.1","info":{"id":"tdXSWn","date":"1551014755","viewed":414,"name":"Repeated circles","username":"yashgugale","description":"Repeating circles using fract function on uv","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["repetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle(in vec2 p, in float r)\n{\n    return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates:\n    // y goes from 0 to 1. x goes from 0 to aspect ratio (eg, 600/400 = 3/2 or 1.5).\n    // But, all values beyond 1.0 are clamped to 1.0\n    vec2 uv = vec2(fragCoord.x/iResolution.y, fragCoord.y/iResolution.y);\n\n    \n    uv *= 4.0;\n    uv = fract(uv);\n    // Assign the uv values to the new variable that stores the center of the circle.\n    // Since the 2D distance functions are for the center of the circle, we subtract with 0.5 on the\n    // y-axis and by the aspect ratio to bring the circle to the center of the screen.\n\n    float aspectRatio = iResolution.x/iResolution.y;\t// This is 1.5 (eg. 600/400 = 3/2 = 1.5)\n    vec2 circlePos = uv - vec2(0.3 * aspectRatio, 0.5);\t// Move it 0.75 times 0.5 towards the center\n    \n    float d = sdCircle(circlePos, 0.2);\n    vec3 color = vec3(1.0, 0.0, 0.0) * -sign(d);\n    \n    // Make inside black and outside white:\n    //vec3 color = vec3(step(0.0, d));\n    \n    //black outline:\n    //vec3 color = vec3(step(0.0, abs(d)-0.005));\n    \n    //Smooth black outline (anti-aliased):\n    //vec3 color = vec3(smoothstep(0.0, 0.005, abs(d)-0.02));\n    \n    // Repeated outlines:\n    //vec3 color = vec3(step(0.0, cos(50.0*d)));\n    \n    fragColor = vec4(color, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}