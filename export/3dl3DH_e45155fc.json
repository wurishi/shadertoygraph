{"ver":"0.1","info":{"id":"3dl3DH","date":"1546057770","viewed":133,"name":"Beginner Blur","username":"AuroraAnalyst","description":"There's probably a better way of doing this, but I figured it out on my own and that's what matters.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","newbie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Blur a color\nvec4 blurColor(vec2 uv, float radius) {\n    vec4 res = vec4(0.0);\n    float acc = 0.0;\n    for (float x = 0.0; x < radius * 100.0; x++) {\n        for (float y = 0.0; y < radius * 100.0; y++) {\n            vec2 texv = vec2(uv.x + (x * 0.001), uv.y + (y * 0.001));\n            res = res + texture(iChannel0, texv);\n            acc++;\n        }\n    }\n    res.x = res.x / acc;\n    res.y = res.y / acc;\n    res.z = res.z / acc;\n    return res;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = blurColor(uv, 0.3);\n    \n    // Output the color\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}