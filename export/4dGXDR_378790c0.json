{"ver":"0.1","info":{"id":"4dGXDR","date":"1463679979","viewed":209,"name":"Orthogonal Quanta","username":"akohdr","description":"Red/Purple, Green/Yellow, Blue/Cyan quanta traveling in 3D automata reflecting off Orange boundary blocks.  Varying path lengths give rise to wave and phase shifting phenomena.\nMouse rotates, iMouse.y controls culling, upper iMouse.y shows state space.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["voxel","automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// The Viewer - displays a voxel volume described by 2D tiled z-slices\n//\n#define EYE 90\n#define T2D texture\n#define RES iResolution\n#define FRES_xy vec2(49)\n#define FRES vec3(FRES_xy,49)\n#define HALF (FRES/2.)\n#define FDIM vec3(floor(RES.xy/FRES.xy),FRES.z)\n\nbool isVoxel(out vec4 k, const in vec3 P)\n{\n    if(any(greaterThan(abs(P),HALF))) return false; // bounds check, kills repetition \n    vec3 p = P + HALF;\t\t  \t\t\t\t\t\t// recenter volume in viewport\n\tfloat z = p.z, w = FDIM.x;\t\t\t\t\t\t// inlined prj4Dto2D()\n    k = T2D(iChannel0, (FRES_xy * floor(vec2(mod(z,w),z/w)) + mod(p.xy,FRES_xy))/RES.xy);\n    return k.x + k.y + k.z>3.*iMouse.y/RES.y;\t\t// mouse controled culling\n//    return k.w>0.;\t\t\t\t\t\t\t\t\t// anything but black\n}\n\nvoid mainImage(out vec4 k, vec2 P)\n{\n    float T, Rx = RES.x, Ry = RES.y;\n    vec2 uv = P/RES.xy,\n         u = (P - vec2(0,.5)*Ry)/Rx - vec2(.5,0);\n    \n    if(iMouse.z>0.){\n        if (iMouse.y>250.){ \n            k = T2D(iChannel0, uv); return; }\t\t// show state space\n        T = 5.*iMouse.x/Rx;  \t\t\t\t\t\t// mouse rotate\n    } else\n        T = float(iFrame)/256.; \t\t\t\t\t// slow rotate\n    \n    vec3 v = vec3(cos(T), 1, sin(T)),\n         r = mat3(u.x,    0,   .8,\n                    0,  u.y,    0,\n                  -.8,    0,  u.x) * v,\n         o = vec3(EYE,0,-EYE)*v.zyx,\n         f = floor(o),\n         q = sign(r),\n         d = abs(length(r)/r),\n         s = d * ( q*(f-o + .5) +.5), m;\n\n    for(int i=0; i<350; i++) {\n        float a=s.x, b=s.y, c=s.z;\n        s += d*(m = vec3(a<b&&a<=c, b<c&&b<=a, c<a&&c<=b));\n        f += m*q;\n        \n        if(isVoxel(k, f)) { k += vec4(m.x>.0 ? 0. : m.y>.0 ? .6 : .3); return;} //early exit\n    }\n    k = vec4(P.y/iResolution.y);  //fade cheaper than texture more interesting than black\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// The Automata - 3D state space maintained in looped buffer of 2D tiled z-slices\n//\n#define RES iResolution.xy\n#define FRES_xy vec2(49)\n#define FRES vec3(FRES_xy,49)\n#define HALF (FRES/2.)\n#define FDIM vec3(floor(RES/FRES_xy),FRES.z)\n\n#define BLK vec4(0)\n#define WHT vec4(1)\n#define RED vec4(1,0,0,1)\n#define PRP vec4(.5,.0,.5,1)\n#define GRN vec4(0,1,0,1)\n#define YEL vec4(1,.8,.0,1)\n#define BLU vec4(0,0,1,1)\n#define CYN vec4(0.,1,1,1)\n#define ORG vec4(.4,.1,.0,1)\n#define ANY vec4(-1)\n\n#define VX(v,K) if(distance((v).xyz,q.xyz+.25)<.5)k=K;\n\nvec2 prj4Dto2D(const in vec4 p)\n{\n    float z = p.z, w = FDIM.x;\n    return FRES_xy * floor(vec2(mod(z,w), z/w)) + mod(p.xy, FRES_xy);\n}\n\nvec4 prj2Dto4D(const in vec2 p)\n{\n    vec2 f = floor(p/FRES_xy);\n    return vec4(mod(vec3(p, FDIM.x*f.y + f.x),FRES), 0);//iTime);\n}\n\n// mini-DSL for rule definitions / processing ==============================================\n#define APPLY(f) f(r);applyRule(q,r,k);if(k.w>0.)return;\n#define APPLY4(a,b,c,d) APPLY(a);APPLY(b);APPLY(c);APPLY(d);\n#define CK(x,y,z) if(noMatch(q+vec4(x,y,z,1),RV(vec3(x,y,z))))return false;\n#define zz(x,y,z) \n#define RULE(n) void n(out vec4 r[28]){clrRule(r,ANY);\n#define RV(v) r[(int(dot(v+1.,vec3(3,9,1)))+1)]\n#define RQ(x,y,z) RV(vec3(x,y,z))\n#define WHEN RV(vec3(0))=\n#define OUT  r[0]=\n\n// quanta/bounce rule pair definitions\n#define TRV(n,v,K) RULE(n)WHEN BLK;RV(v)=K;OUT K;}\n#define TRV2(n,m,K,v,L) TRV(n,v,K)TRV(m,-v,L)\n#define BNC(n,K,v,L) RULE(n)WHEN K;RV(v)=ORG;OUT L;}\n#define BNC2(n,m,K,v,L) BNC(n,K,-v,L)BNC(m,L,v,K)\n\n// rule processing =========================================================================\n\nbool noMatch(const in vec4 dp, const in vec4 K)\n{\n    return K != ANY && \n       K.rgb != texture(iChannel0, prj4Dto2D(dp)/RES).rgb;\n}\n\nbool matchRule(const in vec4 q, const in vec4 r[28])\n{\n    // zz is NOP for checks we don't need\n    CK( 0, 0, 0)\n        \n    zz(-1,-1,-1)    zz(-1,-1, 0)    zz(-1,-1, 1)\n    zz( 0,-1,-1)    CK( 0,-1, 0)    zz( 0,-1, 1)\n    zz( 1,-1,-1)    zz( 1,-1, 0)    zz( 1,-1, 1)\n        \n    zz(-1, 0,-1)    CK(-1, 0, 0)    zz(-1, 0, 1)\n    CK( 0, 0,-1)    zz( 0, 0, 0)    CK( 0, 0, 1)\n    zz( 1, 0,-1)    CK( 1, 0, 0)    zz( 1, 0, 1)\n        \n    zz(-1, 1,-1)    zz(-1, 1, 0)    zz(-1, 1, 1)\n    zz( 0, 1,-1)    CK( 0, 1, 0)    zz( 0, 1, 1)\n    zz( 1, 1,-1)    zz( 1, 1, 0)    zz( 1, 1, 1)        \n\n    return true;\n}\n\nvoid applyRule(const in vec4 q, const in vec4 r[28], inout vec4 k){\n    if(matchRule(q,r)) k=r[0];\n}\n\nvoid clrRule(out vec4 k[28], const in vec4 K)\n{\n    k[ 0]=k[ 1]=k[ 2]=k[ 3]=k[ 4]=k[ 5]=k[ 6]=k[ 7]=k[ 8]=k[ 9]=\n    k[10]=k[11]=k[12]=k[13]=k[14]=k[15]=k[16]=k[17]=k[18]=k[19]=\n    k[20]=k[21]=k[22]=k[23]=k[24]=k[25]=k[26]=k[27]=K;\n}\n\n// local rules =============================================================================\n\nTRV2(rRED,rPRP,RED,vec3(1,0,0),PRP)\tBNC2(rREDORG,rPRPORG,RED,vec3(1,0,0),PRP)\nTRV2(rGRN,rYEL,GRN,vec3(0,1,0),YEL)\tBNC2(rGRNORG,rYELORG,GRN,vec3(0,1,0),YEL)\nTRV2(rBLU,rCYN,BLU,vec3(0,0,1),CYN)\tBNC2(rBLUORG,rCYNORG,BLU,vec3(0,0,1),CYN)\n\nRULE(rDIM)\t\tWHEN WHT; OUT ORG;}\nRULE(rHIT) \t\tWHEN ORG; RQ( 1,0,0)=RQ(0, 1,0)=RQ(0,0, 1)=\n                \t      RQ(-1,0,0)=RQ(0,-1,0)=RQ(0,0,-1)=BLK; OUT ORG;}\n    \nvoid applyLocalRules(out vec4 k, const in vec2 p, const in vec4 q)\n{\n    vec4 r[28];\t\t   \t\t\t\t\t// rule buffer\n    k = texture(iChannel0, p/RES);\t// retrieve prior state\n    if(k!=ORG && k!=WHT) k=BLK;  \t\t// clear everything except...\n    \n    // flash block on hit (i.e if we're ORG but !matchRule all BLK neighbors)\n    if(k==ORG) {rHIT(r);if(!matchRule(q,r)) {k=WHT;return;}}\n    APPLY(rDIM);\n    \n\tAPPLY4(rRED, rPRP, rREDORG, rPRPORG);\n    APPLY4(rGRN, rYEL, rGRNORG, rYELORG);\n    APPLY4(rBLU, rCYN, rBLUORG, rCYNORG);\n}\n\nvoid init(out vec4 k, vec2 p, vec4 q)\n{\n    k = BLK;\t\t\t\t\t\t// automata initial condition seeding\n    int i=0;\n//    for(float o=-12.; o<12.; o+=3.) {\n    for(float o=-24.; o<24.; o+=3.) {\n        i++;\t\t\t\t\t\t// phase shift\n        \n\t    VX(o+HALF,    RED)\n    \tVX(o+HALF-1., GRN)\n    \tVX(o+HALF+1., BLU)\n\n    \tVX(vec3(i, o+HALF.yz), ORG)\n    \tVX(vec3(FRES.x-1., o+HALF.yz), ORG)\n        \n    \tVX(vec3(o+HALF.x-1.,i, o+HALF.z-1.), ORG)\n    \tVX(vec3(o+HALF.x-1.,FRES.y-1.,o+HALF.yz-1.), ORG)\n        \n    \tVX(vec3(o+HALF.xy+1., i), ORG)\n    \tVX(vec3(o+HALF.xy+1., FRES.z-1.), ORG)\n    }\n}\n\nvoid mainImage(out vec4 k, in vec2 p )\n{\n    vec4 q = prj2Dto4D(p);\t\t\t\t\t\t\t\t\t// 4D state position\n    if(any(greaterThan(abs(q.xyz-HALF),HALF-1.))) {\n    \tk=BLK; return; }\t\t\t\t\t\t\t\t\t// prevent cycling\n    \n    if(mod(iTime,600.)<3.)\t\t\t\t\t\t\t// periodic reset\n        init(k,p,q);\n    else\n\t    applyLocalRules(k,p,q);\n}\n\n\n","name":"Buf A","description":"","type":"buffer"}]}