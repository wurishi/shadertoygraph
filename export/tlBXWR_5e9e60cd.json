{"ver":"0.1","info":{"id":"tlBXWR","date":"1567580187","viewed":473,"name":"Glitch#07","username":"104","description":"Error","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["2d","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define BLUR\nconst vec2 z = vec2(1,8);\nconst ivec2 samples = ivec2(3,3);\nconst float complexity =8.;\nconst float density = .6; // 0-1\nconst float sceneswitchspeed = .3;\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n#define q(x,p) (floor((x)/(p))*(p))\n\nvec4 tex(vec2 C) {\n    vec2 R = iResolution.xy;\n        vec4 o2 = vec4(1);\n        vec2 uv = C/R.xy;\n        float t = iTime;\n        t+=1e2;\n        vec4 h = hash42(floor(uv) + floor(t*sceneswitchspeed));\n        uv.y += uv.x*(h.x-.5);\n        uv.x *= R.x/R.y;\n        uv *= z;\n        uv += floor(t*sceneswitchspeed)*z*h.y; // adding *h.y so vertical seams are not always in the same place\n        float s = 1.;\n\n        for (float i = 1.;i <= complexity; ++ i) {\n            vec2 c = floor(uv+i);\n            vec4 h = hash42(c);\n            vec2 p = fract(uv+i+q(t,h.z+1.)*h.y);\n            uv+= p*h.z*h.xy*vec2(s,2.);\n            s = -s*(1.1+h.y);\n            if (h.w > density) {\n                o2 *= h;\n            }\n        }\n    o2 = step(.5,o2);\n    return o2;\n}\n\nvoid mainImage( out vec4 o, vec2 C)\n{\n    vec2 R = iResolution.xy;\n        vec4 o2 = vec4(1);\n        vec2 uv = C/R.xy;\n        vec2 N = uv-.5;\n#ifdef BLUR\n    o = vec4(0.0);\n    float accum = 0.;\n\n    for (int x = -samples.x; x < samples.x; ++x) {\n        vec2 offset = vec2(x,0);\n        float weight = abs(float(samples.x) - float(x));\n        o += tex(C + offset) * weight;\n        accum += weight;\n    }\n    for (int y = -samples.y; y < samples.y; ++y) {\n        vec2 offset = vec2(0, y);\n        float weight = abs(float(samples.y) - float(y));\n        o += tex(C + offset) * weight;\n        accum += weight;\n    }\n    o /= accum;\n#else\n    o = tex(C);\n#endif\n    \n    o=smoothstep(.2,.8,o) * mod(C.x,3.)/2.5;\n    o=clamp(o,0.,1.);\n  \to = pow(o,o-o+.5);\n}\n\n","name":"Image","description":"","type":"image"}]}