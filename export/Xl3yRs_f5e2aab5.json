{"ver":"0.1","info":{"id":"Xl3yRs","date":"1533755978","viewed":343,"name":"[SH18]Humanz ","username":"dcoombes","description":"My entry for Shadertoy Competition 2018. Heavily based of IQ's samples. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//dcoombes 2018\n//Based on IQ's code found here. That shader includes a link back to the distance field documentation\n//https://www.shadertoy.com/view/Xds3zN\n\n\n#define SCREENFX\n//#define MOUSE_ON\n\n#define \tM_PI   3.14159265358979323846\n#define \tDEG2RAD(x)   ((x) * 0.01745329251994329575)\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat rand(float x)  //returns a float between 0 and 1.0\n{\n    return fract(sin(x) * 43758.5453);\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdCylinder2( vec3 p, vec2 h )\n{\n//  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n \n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nmat4 rotZMat(float a)\n{ \nmat4 m;\nm[0] = vec4( cos(a), sin(a), 0.0, 0.0); //Sets the first column    \nm[1] = vec4(-sin(a), cos(a), 0.0, 0.0);    \nm[2] = vec4(    0.0,    0.0, 1.0, 0.0);    \nm[3] = vec4(    0.0,    0.0, 0.0, 1.0);     \n    \nreturn m;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nmat4 rotYMat(float a)\n{ \nmat4 m;\nm[0] = vec4( cos(a),    0.0, sin(a), 0.0); //Sets the first column    \nm[1] = vec4(    0.0,    1.0,    0.0, 0.0);    \nm[2] = vec4(-sin(a),    0.0, cos(a), 0.0);    \nm[3] = vec4(    0.0,    0.0,    0.0, 1.0);     \n    \nreturn m;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nmat4 rotXMat(float a)\n{ \nmat4 m;\nm[0] = vec4(1.0, 0.0, 0.0, 1.0); //Sets the first column    \nm[1] = vec4(0.0, cos(a), sin(a), 0.0);    \nm[2] = vec4(0.0, -sin(a), cos(a), 0.0);    \nm[3] = vec4(0.0, 0.0, 0.0, 1.0);     \n    \nreturn m;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec3 opTx( vec3 p, mat4 m )\n{\n    vec4 q = m*vec4(p,1.0);\n    return q.xyz;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//Subtract Operation\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat opS( float d1, float d2 ) \n{\n    return max(-d2,d1);\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//Repeat Operation\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n// polynomial smooth min (k = 0.1);\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n#define SCALEF 1.0  //making it bigger did not fix artifacts.\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec2 babyMap( in vec3 pos )\n{\n\n    vec2 res;\n    mat4 m;\n\n    m = rotYMat(DEG2RAD(iTime*50.0));\n    #define BUDDYDIST 2.8\n    \n       \n    vec3 rep = opRep(vec3(pos),vec3(BUDDYDIST,BUDDYDIST,BUDDYDIST));\n\trep = opTx(rep,m); \n    \n    //graph paper time!\n    \n    float head   = sdCapsule(rep,vec3(  0.12,  0.18,  0.00), vec3(  0.20,  0.34, 0.00), 0.29  );\n\tfloat utorso = sdCapsule(rep,vec3(  0.05,  0.20,  0.00), vec3( -0.10, -0.03, 0.00), 0.20   );\n    float ltorso = sdCapsule(rep,vec3( -0.10,  0.02,  0.00), vec3(  0.00,  -0.30, 0.00), 0.25   );\n    float should = sdCapsule(rep,vec3( -0.00,  0.10, -0.26), vec3(  0.00,   0.10, 0.26), 0.15   );\n    float hips   = sdCapsule(rep,vec3( -0.03, -0.32, -0.26), vec3( -0.03, -0.32, 0.26), 0.14   );\n\n    float leye    = sdSphere(rep-vec3( 0.33,0.22, 0.15), 0.15 );\n    float reye    = sdSphere(rep-vec3( 0.33,0.22, -0.15), 0.15 );\n    float nose    = sdCapsule(rep,vec3(  0.35,  0.23, -0.0), vec3( 0.47, 0.04, 0.0), 0.1   );\n\n    float luleg  = sdCapsule(rep,vec3( -0.03, -0.32, -0.26), vec3(  0.20, -0.28, -0.26), 0.10  );\n    float llleg  = sdCapsule(rep,vec3(  0.20, -0.28, -0.26), vec3(  0.30, -0.46, -0.26), 0.10   );\n    float lfoot  = sdCapsule(rep,vec3(  0.30, -0.46, -0.26), vec3(  0.40, -0.40, -0.26),  0.10   );\n    \n    float ruleg  = sdCapsule(rep,vec3( -0.03, -0.32,  0.26), vec3(  0.20, -0.28,  0.26), 0.10  );\n    float rlleg  = sdCapsule(rep,vec3(  0.20, -0.28,  0.26), vec3(  0.30, -0.46,  0.26), 0.10   );\n    float rfoot  = sdCapsule(rep,vec3(  0.30, -0.46,  0.26), vec3(  0.40, -0.40,  0.26),  0.10   );\n\n\n    float luarm  = sdCapsule(rep,vec3( -0.00,  0.10, -0.26), vec3(  0.10, -0.08, -0.26), 0.10  );\n    float llarm  = sdCapsule(rep,vec3(  0.10, -0.08, -0.26), vec3(  0.25, -0.08, -0.26),0.08  );\n    float lhand  = sdCapsule(rep,vec3(  0.25, -0.08, -0.26), vec3(  0.30, -0.08, -0.26),  0.10   );\n\n\n    float ruarm  = sdCapsule(rep,vec3( -0.00,  0.10, 0.26), vec3(  0.10, -0.08, 0.26), 0.10  );\n    float rlarm  = sdCapsule(rep,vec3(  0.10, -0.08, 0.26), vec3(  0.25, -0.08, 0.26),0.08  );\n    float rhand  = sdCapsule(rep,vec3(  0.25, -0.08, 0.26), vec3(  0.30, -0.08, 0.26),  0.10   );\n\n   \n    res = vec2(head,1.0);\n    res = vec2(smin(head,utorso,0.01),1.0);\n\n    \n    res = vec2(smin(res.x,ltorso,0.03),1.0);\n    res = vec2(smin(res.x,should,0.03),1.0);\n    res = vec2(smin(res.x,hips,0.03),1.0);\n\n\n    res = vec2(smin(res.x,luleg,0.03),1.0);\n    res = vec2(smin(res.x,llleg,0.03),1.0);\n    res = vec2(smin(res.x,lfoot,0.03),1.0);\n    \n    res = vec2(smin(res.x,ruleg,0.03),1.0);\n    res = vec2(smin(res.x,rlleg,0.03),1.0);\n    res = vec2(smin(res.x,rfoot,0.03),1.0);\n\n    res = vec2(smin(res.x,luarm,0.03),1.0);\n    res = vec2(smin(res.x,llarm,0.03),1.0);\n    res = vec2(smin(res.x,lhand,0.03),1.0);\n\n    res = vec2(smin(res.x,ruarm,0.03),1.0);\n    res = vec2(smin(res.x,rlarm,0.03),1.0);\n    res = vec2(smin(res.x,rhand,0.03),1.0);\n    \n\n    res = vec2(smin(res.x,nose,0.08),1.0);\n\n\n    res = opU( res,vec2(leye,2.0));\n    res = opU( res,vec2(reye,2.0));\n    \n   \n    return res;\n\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 25.0; \n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\t\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0004*t;\n        vec2 res = babyMap( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        //t += res.x; \n        t += res.x/1.2; //Dave changed the stepsize to get rid of a artfacts... \n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec3 calcNormal( in vec3 pos )\n{\n\t    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*babyMap( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*babyMap( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*babyMap( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*babyMap( pos + e.xxx ).x );\n   \n\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n\nvec3 col = vec3(0.0, 0.0, 0.0);\nvec2 res = castRay(ro,rd);    \n    \nvec3 skinCol = vec3(059.0/255.0,055.0/255.0,120.0/255.0);\nvec3 eyeCol  = vec3(0.99,0.01,0.10);\n    \n    \nfloat t = res.x;\nfloat m = res.y;\n\nif( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n       \n        vec3  lig = normalize( vec3(-0.0, 0.3, -0.9) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.2, 1.0 ); //set the dark here.\n        \n              \n      //  amb = amb/4.0;\n        amb = 0.0;\n        \n        \n                \n\t\tif (m==1.0)\n        {\n            col = skinCol;\n        }\n        else\n        {\n           col = eyeCol;\n        }\n        \n        \n        \n       col = clamp((col*dif)+amb,0.0,1.0);\n        \n    }\n    \n    \n    \n    \n    \nreturn vec3( clamp(col,0.0,1.0) );\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n#define CHARWIDTH 0.03\nfloat human(vec2 tx,vec2 pos)\n{\n\tfloat r;\n\n    pos+=tx;\n   \n    if(pos.y>0.08 && pos.y <=0.12)\n\t{\n\t\t//H\n        float vstroke;\n        vstroke = 0.0;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+0.1,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //A\n        vstroke = 0.45;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+0.1,pos.x));\n\t    if(r!=0.0) return 1.0;\n    }\n\n    if(pos.y>0.18 && pos.y <=0.2)\n\t{\n\t\t//M\n        float vstroke;\n        vstroke = 0.30;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+0.1,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //A\n        vstroke = 0.45;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+0.1,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //N\n        vstroke = 0.60;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+0.1,pos.x));\n\t    if(r!=0.0) return 1.0;\n    }\n\n    \n    if(pos.y>0.0 && pos.y <=0.02)\n\t{\n\t\t//U\n        float vstroke;\n        vstroke = 0.15;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+0.1,pos.x));\n\t    if(r!=0.0) return 1.0;\n    }\n\n\n    \n    \n    \n    \n    if(pos.y <=0.2 && pos.y>0.0)\n\t{\n\t\t//H\n        float vstroke;\n        vstroke = 0.0;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        vstroke = 0.1;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //U\n        vstroke = 0.15;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        vstroke = 0.25;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //M\n        vstroke = 0.3;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        vstroke = 0.35;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        vstroke = 0.40;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //A\n        vstroke = 0.45;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        vstroke = 0.55;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        //N\n        vstroke = 0.6;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n\n        vstroke = 0.7;\n        r=  step(vstroke,pos.x)  * (1.0-step (vstroke+CHARWIDTH,pos.x));\n\t    if(r!=0.0) return 1.0;\n        \n        \n        \n        \n\n        \n    }\n   return 0.0; \n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n\n\n\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    \n\tvec2 logoP =p; //keep a copy of the pixel coord without wibble/wobble for the logo\n\tvec2 logoPos;      \n    \n#ifdef SCREENFX\n    float temp;\n    float wibble = sin(modf(iTime*0.1,temp));\n    \n    \n    //float wobble =(p.y*1.1)+(5.2*sin(p.y*200.0)/200.0);\n    float wobble =(0.6*sin((p.y+wibble)*200.0)/200.0);\n\tp.x+= wobble;       \n#endif\n    \n   \n\n    \n    float time = 15.0 + iTime;\n \n#ifdef MOUSE_ON\n    vec2 mo = iMouse.xy/iResolution.xy;\n#else\n    vec2 mo = vec2(0.0,0.0);\n#endif\n    \n\n    vec3 ro = vec3( -0.5+3.5*cos(0.1 + 3.0*mo.x), 0.0 + 2.0*mo.y, 0.5 + 4.0*sin(0.1 + 6.0*mo.x) );\n    vec3 ta = vec3( -0.0, -0.0, 0.0 );\n\n    float tseq; \n    float delta = modf(iTime*0.2,tseq);  //delta is fraction eg anim time 0..1,  \n    float interp = smoothstep(0.1,0.8,delta);  \n    int currAnim = int(tseq)%4; //rolls through 4 animations\n    \n   \n    if(currAnim == 0)\n    {\n\t    vec3 t1 = vec3(0.0, 0.0, 0.0);\n\t    vec3 t2 = vec3(0.0, 0.0, 0.0 );\n\t\tta= mix(t1,t2,interp);\n        logoPos =  vec2(-0.9,0.85);\n    }    \n\n    if(currAnim == 1)\n    {\n\t    vec3 t1 = vec3(0.0, 6.0, 0.0);\n\t    vec3 t2 = vec3( -0.0, -6.0, 0.0 );\n\t\tta = mix(t1,t2,interp);     \n        logoPos =  vec2(1.65,0.85);\n\n    }    \n\n    if(currAnim == 2)\n    {\n    \tvec3 t1 = vec3( -4.0, -3.0, 0.0 );\n    \tvec3 t2 = vec3(  4.0, -3.0, 0.0 );\n\t\tta= mix(t1,t2,interp);     \n\n        logoPos =  vec2(1.65,-0.65);\n\n    }    \n\n    if(currAnim == 3)\n    {\n    \tvec3 t1 = vec3( 3.0, -3.0, 0.0);\n    \tvec3 t2 = vec3(0.0, 2.0, 0.0 );\n\t\tta= mix(t1,t2,interp);     \n        logoPos =  vec2(-0.9,-0.65);\n\n    }    \n   \n   \n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.5) );\n\n    \n    \n    // render\t\n    vec3 col;\n    col = render( ro, rd );\n    \n#ifdef SCREENFX\n    col.x+= 0.1*rand(p.x+p.y+wibble);\n    col.y+= 0.1*rand(p.y+p.y+wibble);\n    col.z+= 0.1*rand(p.y+p.y+wibble);\n#endif\n    \n    \n        \n    //Vignette effect\n \tfloat distFromOrig = (logoP.x*logoP.x)+(logoP.y*logoP.y); // cant be much bigger than 1... :-0\n    float fader = smoothstep(1.0,2.6,distFromOrig);\n    col = col*(1.0-fader);\n      \n\t//Render the \"Human\" logo\n    vec2 tx = vec2(-0.9,0.85);\n    if(human(logoPos,logoP)!=0.0) col = vec3(1.0,0.0,0.0);\n    \n    \n    fragColor=vec4( col, 1.0 );\n    \n\n}\n//---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\n","name":"Image","description":"","type":"image"}]}