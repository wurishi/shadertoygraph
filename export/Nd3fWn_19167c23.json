{"ver":"0.1","info":{"id":"Nd3fWn","date":"1656299805","viewed":69,"name":"Some Voronoi Tests","username":"MisterSirCode","description":"Just fiddling with voronoi.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","test","texture","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float point(vec2 pos, float radius) { return length(pos) - radius; }\n\nvec4 heightToNorm(sampler2D sampler, vec2 uv, vec2 resolution, float scale) {\n  vec2 step = 1. / resolution;\n  float height = texture(sampler, uv).r;\n  vec2 dxy = height - vec2(\n      texture(sampler, uv + vec2(step.x, 0.)).r, \n      texture(sampler, uv + vec2(0., step.y)).r\n  );\n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x * 2.0;\n    \n    vec2 skuv = vec2(uv.x - (uv.y / 4.0), uv.y);\n    \n    uv.y += iTime / 2.0;\n    \n    vnoi vrn = voronoi(uv);\n    \n    fragColor = vec4(0);\n    \n    float fac = 2.0 / 6.0;\n    \n    if (skuv.x > fac * 4.0) fragColor = vec4(vrn.pos, 0.0, 1.0);\n    if (skuv.x < fac * 4.0) fragColor = vec4(vec3(vrn.edgeDist), 1.0);\n    if (skuv.x < fac * 2.0) fragColor = vec4(vrn.edgeDistNorm, 1.0);\n    if (skuv.x < 0.0) fragColor = vec4(vec3(vrn.coreDist), 1.0);\n    if (skuv.x < -fac * 2.0) fragColor = vec4(vrn.coreDistNorm, 1.0);\n    if (skuv.x < -fac * 4.0) fragColor = vec4(vec3(vrn.seed), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash1(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash2(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec3 hash3(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nfloat noise1(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash1(i + vec2(0.0,0.0)), \n                   hash1(i + vec2(1.0,0.0)), u.x),\n               mix(hash1(i + vec2(0.0,1.0)), \n                   hash1(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nvec3 noise3(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash3(i + vec2(0.0,0.0)), \n                   hash3(i + vec2(1.0,0.0)), u.x),\n               mix(hash3(i + vec2(0.0,1.0)), \n                   hash3(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nvec3 fractal(vec2 p, int oct) {\n    float tier = 0.5;\n    mat2 m = mat2(1.6, 1.2, 1.2, -1.6);\n    p *= 4.0;\n    vec3 n = vec3(0);\n    for (int i = 0; i < oct; i++) {\n        n += noise3(p) * tier; \n        p = m * p;\n        tier *= tier;\n    }\n    return sqrt(n);\n}\n\nvec3 fbm(vec2 p, int oct, int iter) {\n    for (int i = 0; i < iter; i++) {\n        p = (fractal(p, oct) + noise3(p * 50.0) / 25.0).xy - p;\n    }\n    return fractal(p, oct);\n}\n\nstruct vnoi {\n    vec2 pos;\n    vec2 loc;\n    float edgeDist;\n    vec3 edgeDistNorm;\n    float coreDist;\n    vec3 coreDistNorm;\n    float seed;\n};\n\nvnoi voronoi(vec2 x) {\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\tvec2 mg, mr;\n    float md = 8.0;\n    for(int j = -1; j <= 1; j++)\n    for(int i = -1; i <= 1; i++) {\n        vec2 g = vec2(float(i), float(j));\n\t\tvec2 o = hash2(n + g);\n        vec2 r = g + o - f;\n        float d = dot(r, r);\n        if(d < md) {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n    float sd = length(-mr);\n    vec2 lc = round(x + mr);\n    float id = noise1(lc);\n    md = 8.0;\n    for(int j = -2; j <= 2; j++)\n    for(int i = -2; i <= 2; i++) {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\t\n        vec2 r = g + o - f;\n        if(dot(mr - r, mr - r) > 0.00001)\n            md = min(md, dot(0.5 * (mr + r), normalize(r - mr)));\n    }\n    vec3 mdn = vec3(-vec2(dFdx(md), dFdy(md)) * 100.0 + 0.5, 1.0);\n    vec3 sdn = vec3(-vec2(dFdx(sd), dFdy(sd)) * 100.0 + 0.5, 1.0);\n    return vnoi(-mr, lc, md, mdn, sd, sdn, id);\n}","name":"Common","description":"","type":"common"}]}