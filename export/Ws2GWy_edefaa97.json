{"ver":"0.1","info":{"id":"Ws2GWy","date":"1549939309","viewed":93,"name":"Bad looking Shader","username":"cbrpnk","description":"It's pretty ugly but I had to put something out to not break my streak.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["asd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat caps(vec3 p, float r, float l)\n{\n    return length(p-vec3(0., clamp(p.y, -l, l), 0.)) - r;\n}\n\nfloat map(vec3 p)\n{\n    p.xz *= rot(iTime);\n    //p.yz *= rot(iTime);\n    p.x += iTime;\n    float a = 2.5;\n    p = mod(p+vec3(5.), 10.)-vec3(5.);\n    \n    p = abs(p);\n    float d = 1000.;\n    for(int i=0; i<2; ++i) {\n        p.xz *= rot(a);\n    \tp.yz *= rot(a);\n        p.xy *= rot(.4*a);\n        p.x += float(i)*.1;\n        p.y += float(i)*float(i)*.1;\n        for(int j=0; j<6; ++j) {\n            p.x *= float(j);\n            //p.xy *= rot(a);\n            p.y += sin(p.x)*.05;\n            p.x *= sin(a);\n\t\t\td = min(d, max(max((caps(p, .5, .5) + .2), p.y), -caps(p, .2, .4)));\n        }\n    }\n    \n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for(int i=0; i<128; ++i) {\n    \tfloat d = map(ro+rd*t);\n        if(d < .001) break;\n        if(t > 100.) break;\n        t += d;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(vec3(\n    \tmap(p+eps.xyy) - map(p-eps.xyy),\n        map(p+eps.yxy) - map(p-eps.yxy),\n        map(p+eps.yyx) - map(p-eps.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 eye = vec3(0., 0., 5.);\n    vec3 dir = normalize(vec3(uv.x, uv.y, -1.));\n    float d = march(eye, dir);\n    vec3 p = eye+dir*d;\n    vec3 normal = getNormal(p);\n    vec3 col = normal;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}