{"ver":"0.1","info":{"id":"ttByzG","date":"1594662474","viewed":107,"name":"It's a donut!","username":"TheGreatMurloc","description":"Eyy... a donut!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["donut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n#define BLUR 0.005\n\n//Converting rgb from 0-255 to 0-1 (Easier color picking)\nvec3 rgb(float r, float g, float b)\n{\n    vec3 col = vec3(r,g,b);\n    col /= 255.;\n    return col;\n}\n\nfloat donutMask(vec2 uv, float size, float thickness, float blur)\n{\n    //Main circle\n    float donut = smoothstep(size,size+blur,1.-length(uv));\n    \n    //The middle hole\n    donut -= smoothstep(size+thickness,size+thickness+blur,1.-length(uv));\n    \n    return donut;\n}\n\nfloat rect(vec2 uv, float width, float height, float blur)\n{\n    float mask = 1.;\n    mask *= smoothstep(abs(uv.x),abs(uv.x)+blur,width);\n    mask *= smoothstep(abs(uv.y),abs(uv.y)+blur,height);\n    return mask;\n}\n\n//Found this uv rotation somewhere on Stack overflow ^^\nvec2 rotateUV(vec2 uv, float rotation, float mid)\n{\n    return vec2(\n      cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n      cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\nfloat rnd(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rndLum(vec2 tile, float time, float id)\n{\n    return .5*(sin(time*rnd(tile+id))+1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\t//\tvec2(0,0) = center of the screen\n    uv.x *= iResolution.x / iResolution.y;\t//\t16/9 aspect\n    \n    vec3 col = vec3(0.);\n    \n    //Baked bottom--------------------------------------------------------------------\n    float bottomMask = donutMask(uv,.53,.35,BLUR);\n    vec3 bottCol = rgb(232.,195.,117.);\n    col = bottCol * bottomMask;\n    \n    \n    //Icing--------------------------------------------------------------------\n    //Icing distortion\n    vec2 uvDistort = uv;\n    uvDistort.x += (sin(uv.y * 35. + 26.35/* + iTime*/) + sin(uv.y * 15. + 51.15 /*+ iTime*/)) * .005;\n    uvDistort.y += (sin(uv.x * 45. + 65.05/* + iTime*/) + sin(uv.x * 30. + 41.35 /*+ iTime*/)) * .005;\n    \n    //Icing mask\n    float icing = donutMask(uvDistort,.56,.3,BLUR);\n    \n    //Adding icing to image\n    vec3 donutCol = rgb(247.,111.,246.); //TÄ›sto\n    col = mix(col,donutCol,icing);       //Poleva\n    \n    \n    //Sprinkles--------------------------------------------------------------------\n    //Tiling\n    float tileScale = 20.;\n    vec2 tiledUV = fract(uv*tileScale);\n    vec2 tile = floor(uv*tileScale);\n    \n    //Random placing\n    tiledUV = rotateUV(tiledUV,rndLum(tile,523.321,tile.x)*PI,.5);\t//Rotation\n    tiledUV += vec2((rndLum(tile,1236.321,tile.x)-.5)*.9)*.5;\n    \n    \n    //Sprinkle mask\n    float sprinkles = rect(tiledUV-.5,.1,rnd(tile)*.1+.2,BLUR+.05);\n    sprinkles *= donutMask(uvDistort,.56,.3,.002);\n    sprinkles *= round(rnd(tile));\n    \n    //Random sprikle color\n    float colChangeSpd = iTime * 2.;\n    vec3 sprinkleCol = vec3(rndLum(tile,colChangeSpd,0.),rndLum(tile,colChangeSpd,1.),rndLum(tile,colChangeSpd,2.));\n    float lum = dot(sprinkleCol,vec3(.333333));\n    \n    //Adding them in\n    sprinkleCol += (1.-lum)*.6;\n    col = mix(col,sprinkleCol,sprinkles);\n    \n    //Wierd jiggly lines\n    /*//col = vec3(1.);\n    vec2 tiledUV = fract(uv*10.);\n    float noise;\n    ivec2 textureCoord;\n    textureCoord.x = int(abs(sin((iTime+uv.x)*.2)*512.));\n    textureCoord.y = int(abs(sin((iTime+uv.y)*.2)*512.));\n    \n    noise = texelFetch(iChannel0,textureCoord,0).r;\n    //noise = sin((iTime+uv.x+uv.y)*.5)*2.*PI;\n    tiledUV = rotateUV(tiledUV,noise*2.*PI,.5);\n    float sprinkles = rect(tiledUV-.5,.1,.3,.05);\n    col *= sprinkles;*/\n    \n\n    // Output to screen\n    //fragColor = texelFetch(iChannel0,ivec2(uv*512.*2.),0);\n    float alpha = dot(col,vec3(.5)) > .01 ? 0. : 1.;\n    fragColor = vec4(col,0.);\n}","name":"Image","description":"","type":"image"}]}