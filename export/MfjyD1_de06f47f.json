{"ver":"0.1","info":{"id":"MfjyD1","date":"1722381459","viewed":53,"name":"bad polynomial fitting","username":"janpitokiala","description":"fits a 2d polynomial to the texture in iChannel1 of buffer a, using a bespoke/bogus method","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["approximation","polynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"DEFINE_EVALUATE\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*2./iResolution.y+vec2(-iResolution.x/iResolution.y,-1.);\n    #ifndef SHOW_SCARY_OUT_OF_BOUNDS\n    if(uv.x>1.||uv.x<-1.) {\n      fragColor = vec4(.1);\n      return;\n    }\n    #endif\n    vec3 col = evaluate(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"DEFINE_EVALUATE\n//from https://www.shadertoy.com/view/WttXWX\nfloat random(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return (2.*float(x)/float(0xffffffffU))-1.;\n}\nvec3 randomvec3(uint x) {\n    return vec3(random(x*3u),random(x*3u+1u),random(x*3u+2u));\n}\nvec2 randomvec2(uint x) {\n    return vec2(random(x*2u),random(x*2u+1u));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x<float(TERMS)&&fragCoord.y<float(TERMS)) {\n      if(iFrame<10) {\n        fragColor = vec4(randomvec3(uint(fragCoord.x*iResolution.y+fragCoord.y)+uint(SEED)),1.);\n      } else {\n        vec3 col = S(fragCoord.x,fragCoord.y).rgb;\n        vec2 uv = randomvec2(uint(iFrame));\n        vec3 error = texture(iChannel1,(uv*.5)+.5).rgb-evaluate(uv);\n        col += .01*error*power(uv.x,int(floor(fragCoord.x)))*power(uv.y,int(floor(fragCoord.y)));\n        fragColor = vec4(col,1.);\n      }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define TERMS 5 //higher terms affect the center less. also this is ~O(n^3) (i think), watch out! do NOT set to absurd value, 100 made my pretty good gpu crawl\n//#define SHOW_SCARY_OUT_OF_BOUNDS //thanks blackle!: https://www.shadertoy.com/view/wl3yWX\n#define SEED 1\n#define S(x,y) texelFetch(iChannel0, ivec2(x,y), 0)\nfloat power(float x, int power) {\n    float result = 1.;\n    for(int i=0; i<power; i++) {\n      result *= x;\n    }\n    return result;\n}\n#define DEFINE_EVALUATE \\\nvec3 evaluate(vec2 uv) {\\\n    vec3 col = vec3(.5);\\\n    for(int x=0; x<TERMS; x++) {\\\n      for(int y=0; y<TERMS; y++) {\\\n        col += S(x,y).rgb*power(uv.x,x)*power(uv.y,y);\\\n      }\\\n    }\\\n    return col;\\\n}","name":"Common","description":"","type":"common"}]}