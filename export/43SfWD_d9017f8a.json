{"ver":"0.1","info":{"id":"43SfWD","date":"1729443556","viewed":23,"name":"VERSION ","username":"Aylimas","description":"sdsdsdq","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.09.15\n// Eric Galin\n\nstruct Ray{\n    vec3 o;// Origin\n    vec3 d;// Direction\n};\n\nstruct Val {\n  float v; // Signed distance\n  int c; // Cost\n  int mat;\n};\n\n// Compute point on ray\n// ray : The ray\n//   t : Distance\nvec3 Point(Ray ray,float t)\n{\n    return ray.o+t*ray.d;\n}\n\n// Random direction in a hemisphere\n// seed : Integer seed, from 0 to N\n//    n : Direction of the hemisphere\nvec3 Hemisphere(int seed,vec3 n)\n{\n    float a=fract(sin(176.19*float(seed)));// Uniform randoms\n    float b=fract(sin(164.19*float(seed)));\n    \n    float u=2.*3.1415*a;// Random angle\n    float v=acos(2.*b-1.);// Arccosine distribution to compensate at poles\n    \n    vec3 d=vec3(cos(u)*cos(v),sin(u)*cos(v),sin(v));// Direction\n    if(dot(d,n)<0.){d=-d;}// Hemisphere\n    \n    return d;\n}\n\n// Camera -------------------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(37,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives -------------------------------------------------------------------------------\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nVal Sphere(vec3 p,vec3 c,float r,int Tmat)\n{\n  return Val(length(p-c)-r,1,Tmat);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nVal Plane(vec3 p, vec3 n, vec3 o,int Tmat)\n{\n    return Val(dot((p-o),n),1,Tmat);\n}\n\n\n// rotation de l'angle avec le produit scalaire de P.N et meilleur version (hedy)\nVal DplaneI(vec3 p, vec3 n, float h,int Tmat){\n    float rotation = dot(p,n);\n    return Val(rotation - h , 1,Tmat);\n}\n\n\n// Torus (hedy)\n// p : le centre de la camera\n// r : le rayon pour le trou du torus\n// t : l' epaisseur \n\n\n\nVal Torus(vec3 p, vec3 o ,float r, float t,int Tmat){\n\n    \n    float dx = length(p.xz - o.xz) - r; \n    float d = length(vec2(dx, p.y + o.y)) - t; \n    return Val(d, 1,Tmat); \n}\n\n\n// ellipsoide\nVal Ellispoid(vec3 p, vec3 o, vec3 r,int Tmat){\n\n    \n    vec3 k = vec3 (p - o) / r;\n    return Val(length(k)- 2.,1,Tmat);\n}\n\n\nVal Box(vec3 p, vec3 c, vec3 r,int Tmat)\n{\n    vec3 d = abs(p - c) - r;\n    return Val(length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0),1,Tmat);\n}\n\nVal Cylinder(vec3 p, vec3 c, float r, float h,int Tmat)\n{\n    vec2 d = vec2(length(p.xz - c.xz) - r, abs(p.y-c.y) - h);\n    return Val(length(max(d,0.0)) + min(max(d.x, d.y),0.0 ) , 1,Tmat);\n}\n\nVal LineSegment(vec3 p, vec3 c , float l , float r,int Tmat)\n{\n    p.y -= min(l,max(0.0,p.y)) - c.y;\n    return Val(length(p-c) - r,1,Tmat);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\n// renvoie le sdf le plus proche par rapport a la camera\nVal Union(Val a,Val b)\n{\n  int mat = (a.v < b.v) ? a.mat : b.mat;\n  return Val(min(a.v,b.v),a.c+b.c+1,mat );\n}\n\nVal Intersection(Val a,Val b){\n    return Val(max(a.v,b.v),a.c+b.c+1,max(a.mat,b.mat));\n}\n\nVal Difference(Val a,Val b){\n    return Val(max (a.v, - b.v),a.c+b.c+1,max(a.mat,b.mat));\n}\n\n\n// Translation\nvec3 Translate(vec3 p){\n\n    \n    vec3 points[4];\n    points[0] = vec3(5.0, 5.0,0.0);\n    points[1] = vec3(5.0, -5.0,0.);\n    points[2] = vec3(-5.0, -5.0,-0.);\n    points[3] = vec3(-5.0, 5.0,0.);\n    \n     \n    float cycleTime = 4.; \n    float t = mod(iTime, cycleTime) ;\n    int currentIndex = int(t);\n    float interpFactor = fract(t);\n    \n    vec3 currentPoint = mix(points[currentIndex], points[(currentIndex + 1) % 4], interpFactor);\n    \n    vec3 translatedP = p + vec3(currentPoint);\n    return translatedP;\n\n}\n\n\nvec3 Rotate(vec3 p , vec3 center ){\n\n    vec3 ajustement = p - center;\n    \n    float rotation = iTime / 1.;\n    \n   \n    mat3 Matrice = mat3(\n        cos(rotation), 0, sin(rotation),\n        0, 1, 0,\n        -sin(rotation), 0, cos(rotation)\n    );\n\n    vec3 rotated = Matrice * ajustement;\n  \n    \n    \n    return rotated;\n}\n\n\nfloat homo(float r){\n    float timeGrow= 2.;\n    float t = mod(iTime, 2.0 * timeGrow); \n    \n   \n    float factor = abs(1.0 - (t / timeGrow));\n    \n    return r + factor * 1.2;\n}\n//Modélisation avancée\n\nfloat rand(vec3 p) {\n    return fract(sin(dot(p ,vec3(13.,78.,0.))) * 35.0);\n}\n\n\nVal bruit(vec3 p, Val sdf) {\n    return Val(sdf.v + rand(p) * 0.01, sdf.c,sdf.mat);\n}\n\n\nVal bruitSum(vec3 p, Val sdf,int count) {\n    Val v = sdf;\n    for (int i=0; i<count; i++) {\n        v=bruit(p,v);\n    }\n    return v;\n    \n}\n\n\nVal turbulence(vec3 p, Val sdf, int count) {\n    float t = 0.0;\n    float scale = 1.;\n    for (int i = 0; i < count ; i++) {\n        t += abs(rand(p * scale)) / scale;\n        scale = 2.0;\n    }\n    return Val(sdf.v + t , sdf.c,1);\n}\n\nfloat perlin_noise(vec3 p) {\n   \n    return fract(sin(dot(p, vec3(12.9898, 78.233, 45.164))) * 43758.5453);\n}\n\nVal perturb_with_perlin(vec3 p, Val sdf) {\n    \n    float noise = perlin_noise(p) * 0.2 - 0.1;  \n    return Val(sdf.v + noise, sdf.c,sdf.mat); \n}\n\nvec2 worley_noise(vec3 p) {\n    vec3 i = floor(p); \n    vec3 f = fract(p); \n\n    float closestDist1 = 1.0;\n    float closestDist2 = 1.0;\n\n    \n    for(int x = -1; x <= 1; x++) {\n        for(int y = -1; y <= 1; y++) {\n            for(int z = -1; z <= 1; z++) {\n            \n                vec3 offset = vec3(float(x), float(y), float(z));\n                vec3 neighbor = i + offset;\n                vec3 randomPoint = vec3(rand(neighbor));\n                vec3 diff = offset + randomPoint - f;\n\n                float dist = length(diff);\n\n                if(dist < closestDist1) {\n                    closestDist2 = closestDist1;\n                    closestDist1 = dist;\n                } else if(dist < closestDist2) {\n                    closestDist2 = dist;\n                }\n            }\n        }\n    }\n\n    return vec2(closestDist1, closestDist2); // Les deux plus proches voisins\n}\n\nVal apply_worley(vec3 p, Val sdf) {\n    vec2 worleyValues = worley_noise(p);\n    float noise = worleyValues.x - worleyValues.y; \n    return Val(sdf.v + noise * 0.15, sdf.c,sdf.mat);\n}\n\n\n// Potential field of the object\n// p : point\nVal object(vec3 p)\n{\n\n  vec3 Center = vec3(0., -1., 3.); // Centre du torus\n  vec3 rotatedP = Rotate(p,Center); // Rotation autour du centre du torus\n   \n  Val v=Union(\n    Sphere(Translate(p),vec3(0.,2.,9.5),2.,0),\n    bruit(p,Sphere(rotatedP,vec3(0.,1.,3.),homo(1.),0)));\n     \n  v=Union(v,DplaneI(p,normalize(vec3(0,0.,1.)),-4.,1));\n  \n  v=Union(v, Torus(rotatedP, Center, homo(2.), 0.5,0));\n  \n  v=Union(v,Box(p, vec3(11.0,3.0,3.0), vec3(2.0,2.0,2.0),0));\n  \n  v=Union(v,\n      apply_worley(p,Box(p, vec3(11.0,10.0,3.0), vec3(2.0,2.0,2.0),0)));\n      \n  v=Union(v,\n      perturb_with_perlin(p,Box(p, vec3(11.0,-8.0,3.0), vec3(2.0,2.0,2.0),0)));\n  \n  v=Union(v,Cylinder(p, vec3(-10.,2.,3.), 2., 6.,0));\n  \n  v=Union(v,LineSegment(p, vec3(-10.,0.,6.), 6.,1.,0));\n  \n  \n  // OBJET COMPLEXE\n  Val objetComplexe=Intersection(\n    Sphere(p,vec3(5.,5.,5.),2.8,0),\n    Box(p, vec3(5.0,5.0,5.0), vec3(2),0));\n  \n  objetComplexe=Difference(objetComplexe,Cylinder(p, vec3(5.,5.,5.), 1.8, 2.,0));\n  \n  v=Union(v,objetComplexe);\n  \n  v=Union(v,Ellispoid(p,vec3(17.,2.,4),vec3(1.5,1.5,0.5),0));\n  \n  return v;\n}\n\n// Analysis of the scalar field -----------------------------------------------------------------\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  Val val=object(p);\n  float v=val.v;\n  n.x=object(vec3(p.x+eps,p.y,p.z)).v-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : The ray\n//   e : Maximum distance\n//   h : hit\n//   s : Number of steps\n//   c : cost\nbool SphereTrace(Ray ray,float e,out float t,out int s,out int c)\n{\n  bool h=false;\n  \n  // Start at the origin\n  t=0.0;\n  c=0;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    Val val=object(p);\n    float v=val.v;\n    c+=val.c;\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n\nbool BoxTrace2(Ray ray,float e,out float t,out int s,out int c,out Val val)\n{\n  bool h=false;\n  \n  \n  t=0.0;\n  c=0;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    \n    bool withinBound = false;\n    float v;\n    \n    Val bound=Box(p,vec3(0.),vec3(23.),0);\n    c+=bound.c;\n    \n    if(bound.v<0.){\n      val=object(p);\n      c+=val.c;\n      v = val.v;\n      withinBound = true;\n      if (v<0.){\n          h=true;\n          break;\n      }\n    }\n  \n    if (withinBound) {\n        t+=max(Epsilon,v);\n    }\n    else {\n        t+=max(Epsilon,bound.v);\n    }\n    \n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n// Lighting -------------------------------------------------------------------------------\n\n// Background color\n// ray : Ray \nvec3 background(Ray ray)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),ray.d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  float t;\n  int s;\n  int c;\n  Val val;\n  bool hit=BoxTrace2(Ray(p+Epsilon*n,l),100.,t,s,c,val);\n  if(!hit)\n  {\n    return 1.;\n  }\n  return 0.4;\n}\n\n\n//Occlusion\n\nfloat AmbientOcc(vec3 p, vec3 n,vec3 l, int nb) {\n    float occ = 0.0;\n    float result = 1.0 / float(nb);\n    \n    for (int i = 0; i < nb; i++) {\n     \n        vec3 sampleDir = Hemisphere(i, n);\n        \n       \n        vec3 samplePoint = p + Epsilon * n + l;\n        Ray sampleRay = Ray(samplePoint, sampleDir);\n        \n        float t; \n        int s, c;\n        Val val;\n        \n        if (!BoxTrace2(sampleRay, 100.0, t, s, c,val)) {\n            occ += 1.0;\n        }\n    }\n    \n   \n    return (occ * result);\n}\n\n\n// Shading and lighting\n//   p : Point\n//   n : Normal at point\n// eye : Eye direction\nvec3 Shade(vec3 p, vec3 n, Ray eye, int mat)\n{\n    const vec3 lp = vec3(5., 10., 25.); \n    vec3 l = normalize(lp - p); \n    \n \n    vec3 ambient = .25 + .25 * background(Ray(p, n));\n    \n    float shadow = Shadow(p, n, l);\n    \n    float ao = AmbientOcc(p, n, l, 1);\n    \n    vec3 diffuse = max(dot(n, l), 0.0) * vec3(1., 1., 1.) * .35 * clamp(dot(n, l), 0., 1.);\n    \n    vec3 r = reflect(-l, n);\n    vec3 d = normalize(eye.o - p);\n    vec3 specular = pow(clamp(dot(r, d), 0., 1.), 45.) * vec3(1., 1., 0.);\n    \n    vec3 color = ambient + shadow * ao * (diffuse + specular);\n\n    if (mat == 1) { \n        vec3 reflectDir = reflect(eye.d, n);\n        Ray reflectRay = Ray(p + Epsilon * n + l, reflectDir); \n        float reflectT;\n        int reflectSteps, reflectCost;\n        Val val;\n        bool reflectHit = BoxTrace2(reflectRay, 100., reflectT, reflectSteps, reflectCost,val);\n        vec3 reflectColor = vec3(0.0);\n\n        if (reflectHit) {\n            vec3 reflectPoint = Point(reflectRay, reflectT);\n            vec3 reflectNormal = ObjectNormal(reflectPoint);\n            reflectColor = background(reflectRay) * 0.3 + vec3(0.7);  \n        }\n        \n        color = mix(color, reflectColor, 0.5); //interpolation\n    }\n\n    return color;\n}\n\n\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n,int m)\n{\n  float t=float(n)/(float(m));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{  \n  // Convert pixel coordinates\n    vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y * 1.5;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m ,pixel);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  float t=0.0;\n  int s=0;\n  int c;\n  Val val;\n  \n  float t2=0.0;\n  int s2=0;\n  int c2;\n  \n  bool hit=BoxTrace2(ray,100.,t,s,c,val);\n  bool hit2=SphereTrace(ray,100.,t2,s2,c2);\n  \n  // Shade background\n  vec3 rgb=background(ray);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n\n        rgb=Shade(p,n,ray,val.mat);\n    \n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n    //rgb=ShadeSteps(s,Steps);\n  \n   // Uncomment this line to shade cost\n  //rgb=ShadeSteps(c,500);\n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}