{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float EPSILON = 0.01;\nfloat ASPECT_RATIO;\n\n/**\n * Returns true if var is within EPSILON of value.\n */\nbool\nabout_equal(\n\tfloat var,\n\tfloat value)\n{\n    return (\n\t\tvar - EPSILON < value \n\t\t&& var +  EPSILON > value);\n}\n\nbool\nabout_equal(\n\tfloat var,\n\tfloat value,\n\tfloat epsilon\n)\n{\n    return (var - epsilon < value && var +  epsilon > value);\n}\n\nvec4\ncolor_from_polar_coordinates(vec2 origin, vec2 uv)\n{\n    vec2 uv_recentered = origin - uv;\n\n    float r = sqrt(\n\t\tuv_recentered.x * uv_recentered.x \n\t\t/ (ASPECT_RATIO * ASPECT_RATIO) \n            + uv_recentered.y* uv_recentered.y);\n\t\n    float theta = atan(uv_recentered.y / uv_recentered.x);\n\n    vec4 return_color;\n\n    if (about_equal(r, 0.2))\n    {\n        return_color = vec4(0,0,1,1);\n    }\n    else\n    {\n        return_color = vec4(r, theta, 0, 1.0);\n    }\n\n    if (about_equal(theta, -0.5))\n    {\n        return_color = vec4(1.0,1.0,1.0,1.0);\n    }\n\n    return return_color;\n}\n\nvoid \nmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ASPECT_RATIO = iResolution.y / iResolution.x;\n \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 normalized_device_coordinates = iMouse.xy / iResolution.xy;\n\n    fragColor = color_from_polar_coordinates(normalized_device_coordinates, uv);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MssXWr","date":"1399598235","viewed":212,"name":"polar coordinates","username":"just_some_dude","description":"Isn't pretty.  Just working out some  polar coordinates stuff.  Click to move the origin.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math","polarcoordinates"],"hasliked":0,"parentid":"","parentname":""}}