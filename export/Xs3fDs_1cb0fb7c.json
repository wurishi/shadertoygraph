{"ver":"0.1","info":{"id":"Xs3fDs","date":"1527154863","viewed":409,"name":"mysterious cave","username":"TheSandvichMaker","description":"yikes, what's in those rocks...\n\nuse the mouse to move the light","likes":11,"published":1,"flags":40,"usePreview":0,"tags":["music","lighting","dof","bokeh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DOF\n#define ANIMATE_DOF\n#define JITTER_DOF\n#define MAX_BLUR 10.0\n#define QUALITY 15.0\n#define GOLDEN_ANGLE 2.39996323\n\n// This has to match Buf A\n#define ZOOM_LEVEL 1.35\n\n#define BRIGHTNESS 1.1\n\n// please feel free to set this to 0.0 to avoid getting motion sick\n// it actually made me feel horrible when I stared at this for a while\n#define DISTORTION_AMOUNT -2.0\n\n// this has to be commented out in Buf A too\n#define MOVE\n\nvec2 remap(vec2 v, vec2 a, vec2 b) { return (v - a) / (b - a); }\n\nvec2 brownConradyDistortion(vec2 uv, float amt)\n{\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    float barrelDistortion1 = 0.1 * amt;\n    float barrelDistortion2 = -0.025 * amt;\n\n    float r2 = dot(uv, uv);\n    uv *= 1.0 + barrelDistortion1 * r2 + barrelDistortion2 * r2 * r2;\n\tuv.y /= iResolution.y / iResolution.x;\n    return uv * 0.5 + 0.5;\n}\n\nfloat rand21(vec2 uv)\n{\n    vec2 noise = vec2(fract(sin(dot(uv, vec2(12.9898, 78.233) * 2.0)) * 43758.5453));\n    return abs(noise.x + noise.y) * 0.5;\n}\n\nvec3 sampleImage(vec2 uv)\n{\n    return texture(iChannel0, uv).rgb;\n}\n\nfloat sampleDepth(vec2 uv)\n{\n#ifdef ANIMATE_DOF\n    return pow(1.0 - texture(iChannel1, uv).r, (iMouse.z < 0.5 ? max((0.95 + sin(iTime * 0.25)), 0.0) : 1.0) * 5.0);\n#else\n    return pow(1.0 - texture(iChannel1, uv).r, 5.0);\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 wideRes = vec2(1.0) / iResolution.xy;\n    vec2 squareRes = vec2(1.0) / iResolution.xx;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_animated = fragCoord * squareRes;\n    \n#ifdef MOVE\n    uv_animated.x += sin(iTime * 0.125) * 0.5;\n    uv_animated.y += cos(iTime * 0.5) * 0.1;\n#endif\n    \n    uv_animated *= ZOOM_LEVEL;\n    \n    float vignette = max(1.0 - pow(length(vec2(uv.x - 0.5, (uv.y - 0.5) * iResolution.y / iResolution.x)), 4.0) * 5.0, 0.0);\n    \n    // distortion\n    vec2 resize = brownConradyDistortion(vec2(1.0), max(DISTORTION_AMOUNT, 0.0));\n    uv = remap(uv, 1.0 - resize, resize);\n    uv = brownConradyDistortion(uv, DISTORTION_AMOUNT);\n    \n    vec3 col = sampleImage(uv).xyz;\n    \n    float rand = rand21(uv + fract(iTime) * 0.7);\n    \n    // dof \n#ifdef DOF\n    float depth = sampleDepth(uv_animated);\n    float maxBlur = MAX_BLUR * mix(1.0, depth, vignette);\n    float sstep = maxBlur / QUALITY;\n    \n    float radius = sstep;\n    float total = 1.0;\n    for (float ang = 0.0; radius < maxBlur; ang += GOLDEN_ANGLE)\n    {   \n        float curstep = sstep / radius;\n        #ifdef JITTER_DOF\n        float jitter = 1.0 + mix(-curstep, curstep, rand) * 0.5;\n        #else \n        float jitter = 1.0;\n        #endif\n        vec2 sampleOffset = vec2(sin(ang), cos(ang)) * radius * jitter / iResolution.xy;\n\t\tvec2 sampleUV = uv + sampleOffset;\n        \n        float sDepth = MAX_BLUR * sampleDepth(uv_animated + sampleOffset);\n        vec3 sCol = sampleImage(sampleUV).xyz;\n        \n        float m = smoothstep(radius - 0.5, radius + 0.5, sDepth);\n        col += mix(col / total, sCol, m);\n\n        radius += curstep;\n        total += 1.0;\n    }\n    col /= total;\n#endif\n    \n    // brightness\n    col *= BRIGHTNESS;\n    \n    // vignette\n    col *= vignette;\n    \n    // tonemap\n    float colPeak = max(max(col.r, col.g), col.b);\n    vec3 colRatio = col / max(colPeak, 0.001);\n    colPeak /= 1.0 + colPeak;\n    col = colPeak * colRatio;\n    col = mix(col, vec3(1.0), colPeak); \n    \n    // gamma + dither\n    col = pow(col, vec3(2.3333)) + (rand - rand21(uv + fract(iTime) * 0.11)) / 255.0;\n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define AMBIENT_STRENGTH 6.0\n#define LIGHT_STRENGTH 65.0\n\n#define MOVE\n\n#define ZOOM_LEVEL 1.35\n\nfloat pulsar(float pulse, float decay, float time)\n{\n    return exp(-decay * fract(time * pulse));\n}\n\nvec2 remap(vec2 v, vec2 a, vec2 b) { return (v - a) / (b - a); }\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 gradient(vec2 uv)\n{\n    vec2 pix = 1.0 / iResolution.xy;\n\tvec2 g;\n    g.x  = texture(iChannel0, vec2(uv.x - pix.x, uv.y)).r;\n    g.x -= texture(iChannel0, vec2(uv.x + pix.x, uv.y)).r;\n    g.y  = texture(iChannel0, vec2(uv.x, uv.y - pix.y)).r;\n    g.y -= texture(iChannel0, vec2(uv.x, uv.y + pix.y)).r;   \n    return g;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 wideRes = vec2(1.0) / iResolution.xy;\n    vec2 squareRes = vec2(1.0) / iResolution.xx;\n    vec2 squareRatio = iResolution.xy / iResolution.xx;\n    vec3 lightColor = hsv2rgb(vec3(fract(iTime * 0.01 + 0.5), 0.85, 0.5));\n    vec3 ambientColor = hsv2rgb(vec3(fract(iTime * 0.01), 1.0, 0.5));//vec3(0.05, 0.05, 0.5);\n    \n    vec2 uv = fragCoord * squareRes;\n    vec2 uvSquare = fragCoord * squareRes;\n    \n#ifdef MOVE\n    uv.x += sin(iTime * 0.125) * 0.5;\n    uv.y += cos(iTime * 0.5) * 0.1;\n#endif\n    \n    uv *= ZOOM_LEVEL;\n    \n    vec3 col = sqrt(texture(iChannel0, uv).rrr);\n    float depth = col.r;\n    \n    // organic stuff\n    float ambientPulse = pulsar(0.5, 3.0, iTime);\n    col = mix(col, col + sqrt(texture(iChannel1, uv).rgb), smoothstep(0.65 + sin(iTime * 0.06) * 0.01 * sin(iTime * 2000.0) * ambientPulse, 1.0, depth));\n    \n    // lighting\n    vec2 light = iMouse.z > 0.5 ? (iMouse.xy * squareRes) : vec2(-0.1);\n    float dist = 1.0 - sqrt(length(uv - light));\n    float diffuse = 1.0 - clamp(dot(normalize(uvSquare - light), gradient(uv)), -1.0, 1.0);\n    float specular = pow(diffuse, 64.0) * LIGHT_STRENGTH;\n    vec3 finalLight = lightColor * (diffuse + specular) * dist * dist + ambientColor * (AMBIENT_STRENGTH + ambientPulse);\n    col = col * finalLight * 0.15;\n    \n    // water pools\n    col = mix(vec3(0.02, 0.25, 0.5), col, smoothstep(0.15, 0.55 + sin(iTime * 0.12) * 0.1, depth));\n\n    fragColor = vec4(col,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define VOLUME 0.25\n\nfloat m2f(int note)\n{\n    return (exp2((float(note) - 69.0) / 12.0)) * 440.0;\n}\n\nfloat sine(float freq, float time)\n{\n    return sin(6.2831 * freq * fract(time));\n}\n\nfloat noise(float time)\n{\n   return sin(6.2831 * fract(time * 12.983) * 33395.0);\n}\n\nfloat pulsar(float pulse, float decay, float time)\n{\n    return exp(-decay * fract(time * pulse));\n}\n\nint rhythm(float pulse, float time, float len)\n{\n    return int(mod(floor(time * pulse), len));\n}\n\nvec2 pan(float sound, float balance)\n{\n    return vec2(  \n        sound * (1.0 - max(balance, 0.0)),\n    \tsound * (1.0 + min(balance, 0.0)));\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    vec2 sound = vec2(0.0);\n    \n    const int melodySequence[8] = int[](72, 60, 64, 60, 67, 60, 71, 60);\n    int melodyBeat = rhythm(2.0, time, 8.0);\n    const int bassSequence[8] = int[](36, 41, 48, 41, 35, 40, 47, 40);\n    int bassBeat = rhythm(2.0, time, 8.0);\n    \n    float melody = sine(m2f(melodySequence[melodyBeat]), time) * pulsar(2.0, 3.0, time);\n    float bassMod = sine(m2f(bassSequence[bassBeat]) * 2.0, time) * pulsar(128.0, 6.0, time);\n    float bass = sine(m2f(bassSequence[bassBeat]) * mix(1.0, bassMod, 0.02), time) * pulsar(2.0, 6.0, time) * (1.0 + pulsar(6.0, 3.0, time));\n    float arp = sine(m2f(37 + int(fract(time) * 4.0) * 3), time) * 0.5;\n    float beat = noise(time) * pulsar(4.5, 10.0, time) * pulsar(12.0, 25.0, time) * pulsar(2.0, 3.0, time);\n    \n    //sound += pan(melody, -0.5);\n    sound += pan(bass,    0.0);\n    sound += pan(beat,    sin(time)) * 1.45;\n\n    \n    float heartbeat  = sine(mix(40.0, 80.0, pulsar(0.5, 3.0, time)), time) * pulsar(0.5, 3.0, time);\n          heartbeat += sine(mix(40.0, 80.0, pulsar(0.5, 3.0, time + 0.5)), time) * pulsar(0.5, 3.0, time + 0.5);\n    float scrrk = noise(time);\n    sound += pan(heartbeat, 0.0);\n    sound += pan(heartbeat * scrrk, 0.0) * 0.2;\n    sound += pan(beat * scrrk * 2.0, -0.7);\n    sound += pan(arp * heartbeat,     0.5);\n    \n    return sound * VOLUME;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/XssGz8\n\n#define CA_AMOUNT 0.1\n\nfloat pulsar(float pulse, float decay, float time)\n{\n    return exp(-decay * fract(time * pulse));\n}\n\nvec2 radialDistortion(vec2 uv, float amt)\n{\n    amt *= 0.01;\n    vec2 cc = uv - 0.5;\n    return uv + 2.0 * cc * amt;\n}\n\nvec3 spectrumOffsetRGB(float t)\n{\n    float t0 = 3.0 * t - 1.5;\n    vec3 ret = clamp(vec3(-t0, 1.0 - abs(t0), t0), 0.0, 1.0);\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float amt = CA_AMOUNT + pulsar(0.5, 3.0, iTime) * 0.5;\n    vec2 uvdmin = radialDistortion(uv, -amt);\n    vec2 uvdmax = radialDistortion(uv,  amt);\n    \n    vec3 col = vec3(0.0);\n\tvec3 weight = vec3(0.0);\n    float stepsize = 1.0 / 5.0;\n    float t = 0.0;\n    for (int i = 0; i < 5; i++)\n    {\n\t\tvec2 uvd = mix(uvdmin, uvdmax, t);\n        vec3 spectrum = spectrumOffsetRGB(t);\n        \n        col += texture(iChannel0, uvd).rgb * spectrum;\n        weight += spectrum;\n        \n        t += stepsize;\n    }\n    col /= weight;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}