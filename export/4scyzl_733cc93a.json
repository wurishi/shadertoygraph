{"ver":"0.1","info":{"id":"4scyzl","date":"1519754998","viewed":175,"name":"Mandelbrot variations","username":"BenWheatley","description":"Mandelbrot variations where the iterative function is replaced with zᵢ₊₁=zᵢⁿ+c for 1.0<c<5.0. Also animated to be a 1960s screensaver.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","mandelbar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * \"Mandelbrot variations\" by Ben Wheatley - 2018\n * License MIT License\n * Contact: github.com/BenWheatley\n */\n\nconst int LOOP_MAX = 64;\nconst float PI = 3.14159265359;\n\nfloat complexAbs2(vec2 z) {\n    return (z.x*z.x)+(z.y*z.y);\n}\n\nfloat arg(vec2 z) {\n\tfloat x = z.x;\n\tfloat y = z.y;\n    if (x>0.0) {\n\t\treturn atan(y/x);\n    } else if (y>0.0) {\n\t\treturn atan(y/x)+PI;\n    }\n\treturn atan(y/x)-PI;\n}\n\nvec2 complexExponent(vec2 z, float power) {\n    float r = sqrt(complexAbs2(z));\n    float arg = arg(z);\n    \n    float log_z_real = log(r);\n    float log_z_imag = arg;\n    \n    float x_log_real = power * log_z_real;\n    float x_log_imag = power * log_z_imag;\n    \n    float result_r = exp(x_log_real);\n    \n    return result_r*vec2(cos(x_log_imag), sin(x_log_imag));\n}\n\nvec3 rgbFromHue(float hue){\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(hue + K.xyz) * 6.0 - K.www);\n    return 0.75 * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), 0.75);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\t\n    float theta = sin(iTime/2.2);\n    vec2 uv_rotated = vec2(uv.x*cos(theta)-uv.y*sin(theta), uv.x*sin(theta)+uv.y*cos(theta));\n    uv = uv_rotated;\n    \n    vec2 offset1 = vec2(0.9, 0.5);\n    vec2 offset2 = vec2(0.3*sin(PI/2.0+iTime/7.0), 0.5*sin(-iTime/5.0));\n    float scale = 1.0+0.75*sin(iTime/2.0);\n    \n    vec2 c = (uv - offset1 - offset2)*scale;\n    vec2 z = c;\n    \n    vec3 rgb = vec3(0.0, 0.0, 0.0);\n    float basic = 0.0;\n    \n    for (int i=0; i<LOOP_MAX; i++) {\n        z = complexExponent(z, 3.0+(2.0*sin(iTime/2.0))) + c;\n        if (complexAbs2(z)>4.0) {\n            basic = float(i)/float(LOOP_MAX);\n\t\t\trgb = rgbFromHue(basic+iTime/2.0);\n            i = LOOP_MAX;\n            \n        } else if (i==(LOOP_MAX-1)) {\n            rgb = vec3(sin(z.x+iTime),\n            -sin(z.y+iTime),\n            cos(z.x*z.y + iTime));\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}