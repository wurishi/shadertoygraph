{"ver":"0.1","info":{"id":"ftyfzh","date":"1663985253","viewed":221,"name":"2D Rotation Demo","username":"Xor","description":"A simple 2D rotation demo for [url=https://www.getrevue.co/profile/xordev]mini tutorial series[/url]","likes":10,"published":1,"flags":0,"usePreview":1,"tags":["2d","demo","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"2D Rotation Demo\" by @XorDev\"\n    \n    A simple 2D rotation demo for mini tutorial series: getrevue.co/profile/xordev\n\n    This code is only for illustrating, so it's not my cleanest or most clear code.\n*/\n\n//Simple 2D rotation matric\nmat2 rotate2D(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n//Line distance function\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    return length(p-a + (a-b) * clamp(dot(p-a,a-b) / dot(b-a,a-b),0.,1.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Resolution for scaling\n    vec2 res = iResolution.xy;\n    //Centered\n    vec2 coord = (fragCoord - 0.5*res)/res.y;\n    //Rotation angle\n    float angle = iTime + iMouse.x/res.x*6.2831;\n    \n    //Center point (red)\n    vec2 A = vec2(0,0);\n    //Horizontal rotated point\n    vec2 B = A+vec2(cos(angle),-sin(angle))*.4;\n    //Vertical rotated point\n    vec2 C = A+vec2(sin(angle),cos(angle))*.4;\n    //Rotated coordinate space\n    vec2 D = mod(coord * rotate2D(angle),.2)-.1;\n    \n    //Time for animation loop\n    float t = mod(iTime,20.);\n    //Fade-in guide lines\n    float f_g = smoothstep(2.0, 4.0, t);\n    //Fade-in \"C\" point\n    float f_c = smoothstep(6.0, 8.0, t);\n    //Fade-in \"D\" points\n    float f_d = smoothstep(12.0, 16.0, t);\n    //Fade-out\n    f_c *= 1.0-f_d;\n    f_g *= 1.0-f_d;\n    f_d *= smoothstep(20.0, 18.0, t);\n    \n    //A-B line\n    float l = line(coord, A, B)-.02;\n    //A-C line (with fade-in)\n    l = min(l, line(coord, A, C)-.04*f_c+.02);\n    //Rotation ring\n    float g = abs(length(coord - A)-.4)-.01;\n    //A-B axis lines\n    g = min(g, line(coord, A, vec2(B.x,A.y))-.02*f_g+.01);\n    g = min(g, line(coord, vec2(B.x,A.y), B)-.02*f_g+.01);\n    //A-C axis lines\n    g = min(g, line(coord, A, vec2(A.x,C.y))-.02*f_c+.01);\n    g = min(g, line(coord, vec2(A.x,C.y), C)-.02*f_c+.01);    \n    \n    //Lines alpha\n    float a_l = clamp(2.-l*res.y, 0., 2.)*.5;\n    //Guides alpha\n    float a_g = clamp(2.-g*res.y, 0., 2.)*.5;\n    //\"A\" alpha\n    float a_a = clamp(2.-(length(coord - A)-.03)*res.y, 0., 2.)*.5;\n    //\"B\" alpha\n    float a_b = clamp(2.-(length(coord - B)-.03)*res.y, 0., 2.)*.5;\n    //\"C\" alpha\n    float a_c = clamp(2.-(length(coord - C)-.03)*res.y, 0., 2.)*.5 * f_c;\n    //\"D\" alpha\n    float a_d = clamp(2.-(length(D)-.03)*res.y, 0., 2.)*.5 * f_d;\n    \n    //Background color\n    vec4 col = vec4(0.1,0.1,0.3,1);\n    //Guides color\n    col = mix(col, vec4(.2,.2,.4,1), a_g);\n    //Lines color\n    col = mix(col, vec4(.8,.8,.8,1), a_l);\n    //\"A\" color\n    col = mix(col, vec4(.9,.1,.1,1), a_a);\n    //\"B\" color\n    col = mix(col, vec4(0,.5,1,1), a_b);\n    //\"C\" color\n    col = mix(col, vec4(.4,.8,0,1), a_c);\n    //\"D\" color\n    col = mix(col, vec4(1,1,0,1), a_d);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}