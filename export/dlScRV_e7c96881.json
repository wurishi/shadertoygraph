{"ver":"0.1","info":{"id":"dlScRV","date":"1692005311","viewed":123,"name":"put 2d texture on 3d sphere","username":"Efim","description":"this example show how put texture on sphere. it use Orthographic Camera. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat3 rotateX(float f)\n{\n    return mat3(\n    vec3(1.0,    0.0,      0.0),\n    vec3(0.0,\t cos(f),  -sin(f)), \t\n\tvec3(.0, sin(f), cos(f))\n    );\n}\n\n\nmat3 rotateY(float f)\n{\n    return mat3(\n    vec3(cos(f), 0.0,  sin(f)),\n    vec3(0.0,\t 1.0,  0.0), \t\n\tvec3(-sin(f), 0.0, cos(f))\n    );\n}\n\nmat3 rotateZ(float f)\n{\n    return mat3(\n    vec3(cos(f),    -sin(f),  0.0),\n    vec3(sin(f),\t cos(f),  0.0), \t\n\tvec3(0.0, 0.0, 1.0)\n    );\n    \n}\n\n#define TAU 6.28318530718\nfloat aafi(vec2 p) {\n    float fi = atan(p.y, p.x);\n    fi += step(p.y, 0.0)*TAU;\n    return fi;\n}\n\n//converts a vector on a sphere to longitude and latitude\nvec2 lonlat(vec3 p) {\n    float lon = aafi(p.xy) / TAU;\n    float lat = aafi(vec2(p.z, length(p.xy))) / PI;\n    return vec2(1.0 - lon, lat);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = 0.7;\n    vec3 col = vec3(0.7, 0.7, 0.9);\n    vec3 light = vec3(-10.0, 0.0, 10.0);\n    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float l = length(p);\n    if (l > r ) \n    {\n         fragColor = vec4(col, 1.0);\n         return;\n    }\n    //get vector on sphere in Orthographic Camera\n    float z = r*sin(acos(l/r));\n    vec3 sp = vec3(p, z);\n\n\n    vec3 sp_rot = rotateZ(-iTime)*rotateX(PI/2.0 + PI/6.0)*sp; //rotate sphere\n    vec2 pt = lonlat(sp_rot); //get longitude and latitude\n    col = texture(iChannel0, pt).rgb;  //get color from texture\n    \n    //fix problem white line\n    vec3 col2 = texture(iChannel0, vec2(0.0, pt.y)).rgb;\n    float pst = smoothstep( 0.01, 0.0, pt.x); \n    col = mix(col, col2, pst);      \n    pst = smoothstep( 0.99, 1.0, pt.x);\n    col = mix(col, col2, pst);      \n    //fix problem  white line\n    \n    \n    //Lambertian\n    float diffuse = dot(normalize(sp), normalize(light));\n    diffuse = clamp(diffuse, 0.3, 1.0);\n    col *= diffuse;\n    \n    // gamma\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4(col, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}