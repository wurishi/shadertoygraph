{"ver":"0.1","info":{"id":"ltdXRl","date":"1481723770","viewed":330,"name":"First Experiment","username":"Teurkidosh","description":"lorem","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["experiments","maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 color, in vec2 pixCoords )\n{\n    const float PI = 3.1415;\n    /*\n\t//France flag\n    if(pixCoords.x < iResolution.x/3.0){\n        color = vec4(0.0,0.0,1.0,0.1);\n    }\n    if(pixCoords.x > iResolution.x/3.0){\n        color = vec4(1.0,1.0,1.0,0.1);\n    }\n    if(pixCoords.x > 2.0*iResolution.x/3.0){\n        color = vec4(1.0,0.0,0.0,0.1);\n    }\n\t*/\n    \n    /*\n    //Japan flag\n    float CentreX = iResolution.x/2.0;\n    float CentreY = iResolution.y/2.0;\n    float x = pixCoords.x - CentreX;\n    float y = pixCoords.y - CentreY;\n    \n    float radius = iResolution.y/4.0;\n    \n    x*=2.0;\n    y*=2.0;\n    \n    x+=cos(iTime*iTime)*radius;\n    y+=sin(iTime*iTime)*radius;\n    \n    \n    \n    color = vec4(1.0,1.0,1.0,0.1);\n    if(sqrt(pow(x,2.0)+pow(y,2.0))<radius){\n        color = vec4(1.0,0.0,0.0,0.1);\n    }\n    */\n\t\n\n    /*\n    //growing circle\n    color = vec4(1.0,1.0,1.0,0.1);\n    if(sqrt(pow(pixCoords.x - iResolution.x/2.0,2.0)+pow(pixCoords.y - iResolution.y/2.0,2.0)) < iTime*10.0){\n        color = vec4(1.0,0.0,0.0,0.1);\n    }\n    */\n    \n    //Nouveau repÃ¨re\n    float angleRotationCamera = PI/30.0 * sin(iTime);\n    \n    vec2 centreRot = vec2(iResolution.x/2.0, 0.0);\n    \n    vec2 i = vec2(cos(angleRotationCamera),sin(angleRotationCamera));\n    vec2 j = vec2(cos(angleRotationCamera + PI/2.0),sin(angleRotationCamera + PI/2.0));\n    \n    vec2 centreCam = -1.0*centreRot;\n    float x = pixCoords.x - centreRot.x;\n    float y = pixCoords.y - centreRot.y;\n    \n    //dot product : rotation\n    float newX = x*i.x+y*i.y;\n    float newY = x*j.x+y*j.y;\n    x=newX;\n    y=newY;\n    \n    x = x - centreCam.x;\n    y = y - centreCam.y;\n    \n    float decalageY = iResolution.y/7.0;\n    \n    //Sun over blue sea and blue sky\n    float SoleilRadius = iResolution.y/6.0;\n    \n    float centreRotationSoleilX = iResolution.x/2.0;\n    float centreRotationSoleilY = 0.0;\n    float radiusRotationSoleil = iResolution.y - 100.0;\n    float angleRotationSoleil = iTime/7.0;\n    \n    //RotationSoleil\n    float SoleilX = cos(angleRotationSoleil) * radiusRotationSoleil + centreRotationSoleilX;\n    float SoleilY = sin(angleRotationSoleil) * radiusRotationSoleil + centreRotationSoleilY;\n    \n    float coefFiltre = clamp(SoleilY,decalageY,radiusRotationSoleil - centreRotationSoleilY) / (radiusRotationSoleil - centreRotationSoleilY);\n    \n    //Filtre couleur\n    vec4 filtre = vec4(1.0,1.0,1.0,1.0) * coefFiltre;\n    \n    //dessine le ciel\n    color = vec4(0.0,0.5,1.0,0.1) * filtre;\n    \n    //dessine soleil\n    if(sqrt(pow(x - SoleilX,2.0)+pow(y - SoleilY,2.0))<SoleilRadius + 4.0*cos(iTime*1.5)){\n        color = vec4(0.8,0.9,0.0,0.1);\n    }\n    \n    \n    \n    float amplitudeVague = iResolution.y/20.0;\n    float periodeVague = 25.0;\n    \n    //Vagues\n    if(y < cos(x/periodeVague + iTime)*amplitudeVague+decalageY){\n        color = vec4(0.15,0.7,0.6,0.1) * filtre;\n    }\n    if(y < cos(x/periodeVague + iTime*2.0+1.0)*amplitudeVague/1.5+decalageY){\n        color = vec4(0.15,0.65,0.6,0.1) * filtre;\n    }\n    if(y < cos(x/periodeVague + iTime*3.0+2.0)*amplitudeVague/2.0+decalageY){\n        color = vec4(0.15,0.6,0.6,0.1) * filtre;\n    }\n    if(y < cos(x/periodeVague + iTime*4.0+3.0)*amplitudeVague/2.5+decalageY){\n        color = vec4(0.15,0.55,0.6,0.1) * filtre;\n    }\n    \n    //Cloud\n    float centerCloudX = mod(iTime*12.0,iResolution.x+200.0) -50.0;\n    float centerCloudY = iResolution.y * 4.0 / 5.0;\n    float bottomMarginCloud = 25.0;\n    \n    if(sqrt(pow(x - centerCloudX,2.0)+pow(y - centerCloudY,2.0))<35.0 && y > (centerCloudY - bottomMarginCloud)){\n        color = vec4(1.0,1.0,1.0,0.1) * filtre;\n    }\n    if(sqrt(pow(x - (centerCloudX+40.0),2.0)+pow(y - (centerCloudY-10.0),2.0))<20.0 && y > (centerCloudY - bottomMarginCloud)){\n        color = vec4(1.0,1.0,1.0,0.1) * filtre;\n    }\n    if(sqrt(pow(x - (centerCloudX-50.0),2.0)+pow(y - centerCloudY-10.0,2.0))<20.0 && y > (centerCloudY - bottomMarginCloud)){\n        color = vec4(1.0,1.0,1.0,0.1) * filtre;\n    }\n    if(sqrt(pow(x - (centerCloudX-40.0),2.0)+pow(y - (centerCloudY-20.0),2.0))<30.0 && y > (centerCloudY - bottomMarginCloud)){\n        color = vec4(1.0,1.0,1.0,0.1) * filtre;\n    }\n   \t//End Sun over blue sea and blue sky\n\n\n    \n    \n    /*\n    //Creneau\n    float decalage = 100.0;\n    float amplitude = 20.0;\n    \n    float periode = 15.0;\n        \n    float frequence = 1.0/periode;\n    color = vec4(1.0,1.0,1.0,0.1);\n    if(pixCoords.y < (cos(pixCoords.x*frequence)/abs(cos(pixCoords.x*frequence)))*amplitude + decalage){\n        color = vec4(1.0,0.0,0.0,0.1);\n    }\n    */\n}","name":"Image","description":"","type":"image"}]}