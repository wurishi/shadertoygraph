{"ver":"0.1","info":{"id":"43yXWD","date":"1719930154","viewed":53,"name":"Convolution Example","username":"shanebenlolo","description":"Simple image convolution\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["loadanimage"],"hasliked":0,"parentid":"tsccWr","parentname":"Load an Image"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    const int kernelSize = 5; // This should match the dimensions of your kernel\n    const float kernel[kernelSize*kernelSize] = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    vec4 sum = vec4(0.0);\n    int halfKernel = kernelSize / 2;\n\n    for(int i = -halfKernel; i <= halfKernel; i++) {\n        for(int j = -halfKernel; j <= halfKernel; j++) {\n            vec2 offset = vec2(float(i), float(j)) / iResolution.xy;\n            sum += texture(iChannel0, uv + offset) * kernel[(i + halfKernel) * kernelSize + (j + halfKernel)];\n        }\n    }\n\n    fragColor = sum; // Here, sum contains the convolved pixel color.\n}\n","name":"Image","description":"","type":"image"}]}