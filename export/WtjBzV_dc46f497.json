{"ver":"0.1","info":{"id":"WtjBzV","date":"1599376885","viewed":468,"name":"easy adaptive sampling : isoval","username":"FabriceNeyret2","description":"Application of [url]https://shadertoy.com/view/3ljfRG[/url]\noversample only near the isovalue contour. Left: none, for reference.\nMouse.x : ref separator   Mouse.y : threshold\nSPACE: show where oversampling is done ( B&W area - colors where LOD#0 )","likes":11,"published":3,"flags":48,"usePreview":0,"tags":["antialiasing","sampling","optimization","adaptive","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// adapted from https://shadertoy.com/view/3ljfRG\n\n#define N 5      // pixel oversampling NxN ( only where necessary )\n#define eps 1e-2 // similarity threshold, is case of continuous mask\n\n//#define T(U,l)          texelFetch(iChannel0, ivec2(U)>>l, l)\n  #define T(U,l)          textureLod(iChannel0, (U)/R, float(l-1) )\n  #define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\n\nvoid mainImage(out vec4 O, vec2 U) {\n    O -= O;\n    float n = float(N),\n          m = T( U, 2 ).w,             // check neighborhood. Here: LOD #2 of mask\n          s = iMouse.z>0. ? iMouse.x : R.x/2.;\n\n    if ( U.x > s\n         && m !=0. && m!= 1.) {        // neighborhood does not agree\n      // && abs(m-T(U,0).w) > eps ) {  // why ? otherwise, inside don't work in fullscreen\n // if ( true ) {                      // for bench: always oversample\n        for (int k=0; k<N*N; k++) {    // --- oversampling\n            vec2 D = ( vec2(k%N,k/N) - float(N-1)/2. ) / n; // subpixel\n            O += f( U +  D ).w;\n        }\n        O /= n*n;\n    }\n    else                               // LOD#0 is ok\n        O = keyToggle(32)              // SPACE: show red/blue where not oversampled\n        ? T( U, 0 ).w == 1. ? vec4(1,0,0,1) : vec4(0,0,1,1)\n        : T( U, 0 ).wwww;\n      \n    if ( abs(U.x-s) < 1. ) O = vec4(1,0,0,1); // red separator\n    O = pow( O, vec4(1./2.2) );        // to sRGB\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// --- custom function or image or render\n\n#define R  iResolution.xy\n\n// f() should be a function, but fucking Common does not work like #include as anybody would like it to.\n// Here, it's the use of iTime and iResolution that uselessly screw things up for no good reason. \nfloat v,t;\n\n// --- isovalue\n#define f(U) (                                               \\\n    t = mod(.1*(iTime-3.5),2.),                              \\\n    v = texture(iChannel1, (U)/R ).r,                        \\\n /* v = length( texture(iChannel1, (U)/R ).rgb )*.58, */     \\\n    v -= iMouse.z > 0. ? iMouse.y/R.y : min(t,2.-t),         \\\n    vec4( step( .05, abs(v) ) )                              \\\n)\n\n/** /\n// --- extrema\n#define I(U,x,y) length( texture(iChannel1, ( U+ vec2(x,y) ) / R ).rgb )\n#define f(U) (                                               \\\n    v = 4.*I(U,0,0) - I(U,1,0)-I(U,-1,0)-I(U,0,1)-I(U,0,-1), \\\n    vec4( step( v*R.y/50. , -.3 ) )                          \\\n)\n/**/\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- target image\n\nvoid mainImage(out vec4 O, vec2 U) {\n    O = texture(iChannel0, U/R);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// --- evaluate the function everywhere at pixel resolution\n\nvoid mainImage(out vec4 O, vec2 U) {\n    O = f(U);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}