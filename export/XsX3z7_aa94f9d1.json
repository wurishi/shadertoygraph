{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Kaleidoscopic Journey\n//\n// Mikael Hvidtfeldt Christensen\n// @SyntopiaDK\n//\n// License:\n// Creative Commons Attribution\n// http://creativecommons.org/licenses/by/3.0/\n\n// Decrease this for better performance\n#define Iterations 12\n#define MaxSteps 30\n#define MinimumDistance 0.001\n#define normalDistance     0.0002\n#define ColorIterations 9\n#define PI 3.141592\n#define Scale 2.0\n#define FieldOfView 1.0\n#define Jitter 0.05\n#define FudgeFactor 1.0\n\n#define Ambient 0.28452\n#define Diffuse 0.57378\n#define Specular 0.07272\n#define LightDir vec3(1.0,1.0,-0.65048)\n#define LightColor vec3(1.0,0.666667,0.0)\n#define LightDir2 vec3(1.0,-0.62886,1.0)\n#define LightColor2 vec3(0.596078,0.635294,1.0)\n\n\nvec2 rotate(vec2 v, float a) {\n\treturn vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n\n// Two light source + env light\nvec3 getLight(in vec3 color, in vec3 normal, in vec3 dir) {\n\tvec3 lightDir = normalize(LightDir);\n\tfloat specular = pow(max(0.0,dot(lightDir,-reflect(lightDir, normal))),20.0); // Phong\n\tfloat diffuse = max(0.0,dot(-normal, lightDir)); // Lambertian\n\t\n\tvec3 lightDir2 = normalize(LightDir2);\n\tfloat specular2 = pow(max(0.0,dot(lightDir2,-reflect(lightDir2, normal))),20.0); // Phong\n\tfloat diffuse2 = max(0.0,dot(-normal, lightDir2)); // Lambertian\n\t\n\treturn\n\t\t texture(iChannel0, reflect(dir, normal)).xyz*Specular+\n\t\t(Specular*specular)*LightColor+(diffuse*Diffuse)*(LightColor*color) +\n\t\t(Specular*specular2)*LightColor2+(diffuse2*Diffuse)*(LightColor2*color);\n}\n\nfloat time;\n\n// Geometric orbit trap. Creates the 'cube' look.\nfloat trap(vec3 p){\n\treturn  length(p.x-0.5-0.5*sin(time/10.0)); // <- cube forms \n\t//return  length(p.x-1.0); \n\t//return length(p.xz-vec2(1.0,1.0))-0.05; // <- tube forms\n\t//return length(p); // <- no trap\n}\n\nvec3 offset;\n\n// DE: Infinitely tiled Kaleidoscopic IFS. \n//\n// For more info on KIFS, see: \n// http://www.fractalforums.com/3d-fractal-generation/kaleidoscopic-%28escape-time-ifs%29/\nfloat DE(in vec3 z)\n{\t\n\t// Folding 'tiling' of 3D space;\n\tz  = abs(1.0-mod(z,2.0));\n\t\n\tfloat d = 1000.0;\n\tfloat r;\n\tfor (int n = 0; n < Iterations; n++) {\n\t\tz.xz = rotate(z.xz, time/18.0);\n\t\t\n\t\t// This is octahedral symmetry,\n\t\t// with some 'abs' functions thrown in for good measure.\n\t\tif (z.x+z.y<0.0) z.xy = -z.yx;\n\t\tz = abs(z);\n\t\tif (z.x+z.z<0.0) z.xz = -z.zx;\n\t\tz = abs(z);\n\t\tif (z.x-z.y<0.0) z.xy = z.yx;\n\t\tz = abs(z);\n\t\tif (z.x-z.z<0.0) z.xz = z.zx;\n\t\tz = z*Scale - offset*(Scale-1.0);\n\t\tz.yz = rotate(z.yz, -time/18.0);\n\t\t\n\t\td = min(d, trap(z) * pow(Scale, -float(n+1)));\n\t}\n\treturn d;\n}\n\n// Finite difference normal\nvec3 getNormal(in vec3 pos) {\n\tvec3 e = vec3(0.0,normalDistance,0.0);\n\n\treturn normalize(vec3(\n\t\t\tDE(pos+e.yxx)-DE(pos-e.yxx),\n\t\t\tDE(pos+e.xyx)-DE(pos-e.xyx),\n\t\t\tDE(pos+e.xxy)-DE(pos-e.xxy)));\n}\n\n// Solid color with a little bit of normal :-)\nvec3 getColor(vec3 normal, vec3 pos) {\n\treturn mix(vec3(1.0),abs(normal),0.3); \n}\n\n// Filmic tone mapping:\n// http://filmicgames.com/archives/75\nvec3 toneMap(in vec3 c) {\n\tc=pow(c,vec3(2.0));\n\tvec3 x = max(vec3(0.),c-vec3(0.004));\n\tc = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);\n\treturn c;\n}\n\n// Pseudo-random number\n// From: lumina.sourceforge.net/Tutorials/Noise.html\nfloat rand(vec2 co){\n\treturn fract(cos(dot(co,vec2(4.898,7.23))) * 23421.631);\n}\n\nvec4 rayMarch(in vec3 from, in vec3 dir, in vec2 pix) {\n\t// Add some noise to prevent banding\n\tfloat totalDistance = Jitter*rand(pix+vec2(time));\n\t\n\tfloat distance;\n\tint steps = 0;\n\tvec3 pos;\n\tfor (int i=0; i < MaxSteps; i++) {\n\t\tpos = from + totalDistance * dir;\n\t\tdistance = DE(pos)*FudgeFactor;\n\t\ttotalDistance += distance;\n\t\tif (distance < MinimumDistance) break;\n\t\tsteps = i;\n\t}\n\t\n\t// 'AO' is based on number of steps.\n\t// Try to smooth the count, to combat banding.\n\tfloat smoothStep = float(steps) + distance/MinimumDistance;\n\tfloat ao = 1.0-smoothStep/float(MaxSteps);\n\n\t// Since our distance field is not signed,\n    // backstep when calc'ing normal\n\tvec3 normal = getNormal(pos-dir*normalDistance*3.0);\t\n\n\tvec3 color = getColor(normal, pos);\t\n\tvec3 light = getLight(color, normal, dir);\n\treturn vec4(toneMap((color*Ambient+light)*ao),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = iTime + 38.0;\n    offset = vec3(1.0+0.2*(cos(time/5.7)),0.3+0.1*(cos(time/1.7)),1.).xzy;;\n        \n\tfloat angle = time/5.0;\n\t\n\t// Camera position (eye), and camera target\n\tvec3 camPos = 0.5*time*vec3(1.0,0.0,0.0);\n\tvec3 target = camPos + vec3(1.0,0.5*cos(time),0.5*sin(0.4*time));\n\tvec3 camUp  = vec3(0.0,cos(angle),sin(angle));\n\t\n\t// Calculate orthonormal camera reference system\n\tvec3 camDir   = normalize(target-camPos); // direction for center ray\n\tcamUp = normalize(camUp-dot(camDir,camUp)*camDir); // orthogonalize\n\tvec3 camRight = normalize(cross(camDir,camUp));\n\t\n\tvec2 coord =-1.0+2.0*fragCoord.xy/iResolution.xy;\n\tcoord.x *= iResolution.x/iResolution.y;\n\t\n\t// Get direction for this pixel\n\tvec3 rayDir = normalize(camDir + (coord.x*camRight + coord.y*camUp)*FieldOfView);\n\t\n\tfragColor = rayMarch(camPos, rayDir, fragCoord );\n}\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsX3z7","date":"1365363525","viewed":2398,"name":"Kaleidoscopic Journey","username":"Syntopia","description":"Journey through a Kaleidoscopic IFS fractal.\n\nOnly tested on Nvidia/Win/No Angle. ","likes":58,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractals"],"hasliked":0,"parentid":"","parentname":""}}