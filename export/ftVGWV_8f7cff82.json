{"ver":"0.1","info":{"id":"ftVGWV","date":"1638377243","viewed":188,"name":"Snowflake Generation","username":"soudfv","description":"Snowflake Generation. Use mouse to make new seeds.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["snowflake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Attenuation 0.997\n\n#define T(uv) texture(iChannel0, fract(uv)).x\n\n#define PI 3.141592653589793238462643383\nconst float an = 60.;\nconst vec2 dir0 = vec2(cos(an * PI/180.), sin(an * PI/180.));\n\n\n// Hash without sine by Dave_Hoskins\n/*float hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}*/\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec2 ratio = vec2(1.,iResolution.y/iResolution.x);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 uv = (uv0 - vec2(.5)) * ratio;\n    vec3 col;\n\n    vec2 step0 = 0.5/iResolution.xy;\n    vec2 mc = abs(uv0-mouse)*ratio;\n\n    if (iFrame == 0 && length(uv) < length(step0)) {\n        col = vec3(1.0);\n    }\n    else if (iMouse.z > 0. && dot(mc, dir0) < 0.1 && dot(mc, vec2(1.0,0.)) < 0.1)\n    {\n        col = vec3(step(length(mc),length(step0)));\n    }\n    else {\n        col = vec3(0.0);\n        vec2 step1 = 1.2/iResolution.xy;\n        vec2 dir = dir0 * step1;\n        float ul = T(uv0 - dir);\n        float ur = T(uv0 + vec2(dir.x, -dir.y));\n        float  r = T(uv0 + vec2(step1.x, 0.));\n        float dr = T(uv0 + dir);\n        float dl = T(uv0 + vec2(-dir.x, dir.y));\n        float  l = T(uv0 + vec2(-step1.x, 0.));\n        /*float ul = T(uv0 - dir);\n        float ur = T(uv0 + vec2(dir.x, -dir.y);\n        float  r = T(uv0 + vec2(0., step1.y);\n        float dr = T(uv0 + dir);\n        float dl = T(uv0 + vec2(-dir.x, dir.y));\n        float  l = T(uv0 + vec2(0., -step1.y));*/\n        float p = hash11(iTime);\n        vec3 c0 = texture(iChannel0, uv0).rgb;\n        float c = c0.r;\n        //float sum = ul + ur + r + dr + dl + l;\n        bool ulb = ul > c;\n        bool urb = ur > c;\n        bool  lb =  l > c;\n        bool dlb = dl > c;\n        bool drb = dr > c;\n        bool  rb =  r > c;\n        int b = int(ulb) + int(urb) + int(lb) + int(dlb) + int(drb) + int(rb);\n        if (b == 1) {\n            col = clamp(c0 + vec3(p*0.1,0.2,0.3), 0.,1.);\n        }\n        else if (b == 3 && p > 0.5) {\n            col = clamp(c0 + vec3(p*0.05,0.3,0.2), 0.,1.);\n        }\n        else {\n            col = c0 * Attenuation;\n        }\n    }\n    fragColor = vec4(col,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}