{"ver":"0.1","info":{"id":"dscSDj","date":"1688312566","viewed":62,"name":"marching square","username":"shicz86","description":"marching square","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["marchingsquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define USE_LINEAR_INTERPOLATION 1\n\nconst float THRESHOLD = 0.3;\nconst float CELL_SIZE = 20.0;\nconst float LINE_WIDTH = 1.;\nconst float LINE_FEATHER = 0.5;\n\n// Simple hash function for generating 2D noise\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);\n}\n\n// Smooth interpolation function\nfloat mix_smooth(float a, float b, float t)\n{\n    float smooth_t = t * t * (3.0 - 2.0 * t);\n    return mix(a, b, smooth_t);\n}\n\n// 2D noise function\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix_smooth(mix_smooth(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\n                      mix_smooth(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x),\n                      u.y);\n}\n\n// Function to draw a smooth line between points A and B\nfloat smoothLine(vec2 uv, vec2 a, vec2 b) {\n    vec2 ab = b - a;\n    vec2 ap = uv - a;\n    vec2 bp = uv - b;\n    float d = length(ap - (dot(ap, ab) / dot(ab, ab)) * ab);\n\n    if (dot(ap, ab) >= 0.0 && dot(bp, -ab) >= 0.0) {\n        return smoothstep(LINE_WIDTH + LINE_FEATHER,LINE_WIDTH - LINE_FEATHER,d);\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord;\n\n    // Set the background color to black\n    vec3 color = vec3(0.0);\n\n    // Calculate cell index\n    vec2 cellIndex = floor(uv / CELL_SIZE);\n\n    // Calculate cell corner positions\n    vec2 bottomLeft = cellIndex * CELL_SIZE;\n    vec2 bottomRight = bottomLeft + vec2(CELL_SIZE, 0.0);\n    vec2 topLeft = bottomLeft + vec2(0.0, CELL_SIZE);\n    vec2 topRight = bottomLeft + vec2(CELL_SIZE, CELL_SIZE);\n\n    // Sample the scalar field at each corner\n    float bottomLeftSample = noise(bottomLeft);\n    float bottomRightSample = noise(bottomRight);\n    float topLeftSample = noise(topLeft);\n    float topRightSample = noise(topRight);\n\n    vec2 a = bottomLeft + vec2(CELL_SIZE * 0.5, 0.0);\n    vec2 b = bottomLeft + vec2(CELL_SIZE, CELL_SIZE * 0.5);\n    vec2 c = bottomLeft + vec2(CELL_SIZE * 0.5, CELL_SIZE);\n    vec2 d = bottomLeft + vec2(0.0, CELL_SIZE * 0.5);\n\n#if USE_LINEAR_INTERPOLATION\n    float t = (THRESHOLD-bottomLeftSample)/(bottomRightSample-bottomLeftSample);\n    a = bottomLeft + vec2(CELL_SIZE * t, 0.0);\n    t = (THRESHOLD-bottomRightSample)/(topRightSample-bottomRightSample);\n    b = bottomLeft + vec2(CELL_SIZE, CELL_SIZE * t);\n    t =(THRESHOLD-topLeftSample)/(topRightSample-topLeftSample);\n    c = bottomLeft + vec2(CELL_SIZE * t, CELL_SIZE);\n    t = (THRESHOLD-bottomLeftSample)/(topLeftSample-bottomLeftSample);\n    d = bottomLeft + vec2(0.0, CELL_SIZE * t);\n#endif\n\n    vec3 lineColor = vec3(0.0, 1.0, 0.0);\n    // Calculate the case index\n    // counterclockwise order\n    int caseIndex = int(bottomLeftSample > THRESHOLD) + int(bottomRightSample > THRESHOLD) * 2 + int(topRightSample > THRESHOLD) * 4 + int(topLeftSample > THRESHOLD) * 8;\n\n    // Draw the marching squares lines\n    if (caseIndex == 1 || caseIndex == 14)\n    {\n        if (smoothLine(uv, a, d) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 2 || caseIndex == 13)\n    {\n        if (smoothLine(uv, a, b) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 3 || caseIndex == 12)\n    {   \n        if (smoothLine(uv, b, d) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 4 || caseIndex == 11)\n    {\n        if (smoothLine(uv, b, c) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 5)\n    {\n        if (smoothLine(uv, a, b) > 0.0)\n        {\n            color = lineColor;\n        }\n        if (smoothLine(uv, c, d) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 6 || caseIndex == 9)\n    {\n        if (smoothLine(uv, a, c) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 7 || caseIndex == 8)\n    {\n        if (smoothLine(uv, c, d) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    else if (caseIndex == 10)\n    {\n        if (smoothLine(uv, b, c) > 0.0)\n        {\n            color = lineColor;\n        }\n        if (smoothLine(uv, d, a) > 0.0)\n        {\n            color = lineColor;\n        }\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}