{"ver":"0.1","info":{"id":"MsKGDR","date":"1454278299","viewed":1116,"name":"Ret_","username":"calx","description":"Procedural Reticle - revised here: https://www.shadertoy.com/view/MsfcD7","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["radial","distance","reticle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat n_angleBetween(vec2 v1,vec2 v2)\n{\n    float angle = atan(v1.y-v2.y,v1.x-v2.x);\n    if (angle < 0.0) angle = angle+(PI*2.0); \n    \n    return (angle / (PI*2.0));\n}\n\nvoid section(inout vec4 pixel, vec4 col1, vec4 bgCol, vec2 uv, vec2 position, float numSections, float gap, float rotationOffset, float speed, float start, float finish, float inner, float outer, float taper, float inwards, float outwards, float braceWidthStart, float braceWidthEnd, float startBrace, float endBrace) \n{\n \tspeed *= 0.02;       \n    float rotation = rotationOffset + ((speed) * iTime); \n    vec2 q = vec2(cos(rotation)*uv.x + sin(rotation)*uv.y, -sin(rotation)*uv.x + cos(rotation)*uv.y);\n    float angle = n_angleBetween(q, position); \n\n    float adjOuter = outer + (smoothstep(start, start+taper, angle) *(1.0 -smoothstep(finish, finish+taper, angle)))*outwards;\n    float adjInner = inner + (smoothstep(start, start+taper, angle) * 1.0 -smoothstep(finish, finish+taper, angle)) *inwards;\n    \n    if(angle > start  && angle < start+braceWidthStart) adjInner /= startBrace;\n    if(angle < finish && angle > finish-braceWidthEnd)  adjInner /= endBrace;\n\n    float split = floor(angle * numSections) / numSections;\n    \n    if(angle > split && angle < split+gap) adjOuter = outer-(outer-inner); \n    \n    float smoothv = 0.0025;\n    \n    float distToPos = length(uv-position);  \n    float outerEdge = smoothstep(adjOuter-smoothv, adjOuter+smoothv, distToPos);\n    float innerEdge = smoothstep(adjInner-smoothv, adjInner+smoothv, distToPos);\n    float baseRing = 1.0-(innerEdge) * 1.0+(outerEdge);\n    \n    pixel = mix(bgCol, mix(col1, bgCol, baseRing), col1.a);\n}\n\nfloat grid(vec2 r) \n{\n    float g = 0.0;\n    const float unit = 0.05;\n    \n    for(float i=-2.0; i<2.0; i+=unit)\n    {\n        g += 1.-smoothstep(0.001, 0.0011, abs(r.x-i));\n        g += 1.-smoothstep(0.001, 0.0011, abs(r.y-i));\n    }\n  \n    return g;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  2.0 * vec2(fragCoord.xy - 0.5* iResolution.xy) / iResolution.y;\n    vec2 pos =   vec2(0.0);\n    vec4 col1 =  vec4(1.0); \n    vec2 q = 0.6 * uv;\n    float val = 0.3+0.1*q.y;\n    vec4 bgCol = vec4(val, val, val, 0.5);      \n    bgCol *= 1.0-0.8*length(q);\n    vec4 pixel = bgCol * (grid(q)*0.25);\n    \n    section(pixel, vec4(1.0, 1.0, 1.0, 1.00), pixel, uv, pos, 03.0000, 00.1000, PI *0.5,  50.0000, 00.2000, 00.8000, 00.0300, 00.0350, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.60), pixel, uv, pos, 08.0000, 00.0100, PI *0.5, -50.0000, 00.2000, 00.8000, 00.0500, 00.0570, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.60), pixel, uv, pos, 02.0000, 00.0050, PI *0.5,  30.0000, 00.2000, 00.8000, 00.1050, 00.1070, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.70), pixel, uv, pos, 00.0000, 00.0050, PI *0.5,  30.0000, 00.2000, 00.8000, 00.3100, 00.3120, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.80), pixel, uv, pos, 32.0000, 00.0275, PI *0.5,  20.0000, 00.2000, 00.8000, 00.3100, 00.3300, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.90), pixel, uv, pos, 01.0000, 00.0270, PI *0.5,  20.0000, 00.2000, 00.8000, 00.3280, 00.3350, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.70), pixel, uv, pos, 00.0000, 00.0000, PI *0.5,  30.0000, 00.2000, 00.8000, 00.3580, 00.3750, 00.0100, 00.0100, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.60), pixel, uv, pos, 01.0000, 00.0020, PI *0.5, -90.0000, 00.2000, 00.8000, 00.3950, 00.4300, 00.0050, 00.0250, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.90), pixel, uv, pos, 03.0000, 00.0015, PI *0.0, -40.0000, 00.1000, 00.9000, 00.5000, 00.5200, 00.0350, 00.0000, 00.0220, 00.0000, 00.0000, 00.0000, 00.0000);  \n    section(pixel, vec4(1.0, 1.0, 1.0, 0.55), pixel, uv, pos, 21.0000, 00.0450, PI *0.0, -15.0000, 00.0000, 00.0000, 00.5620, 00.5720, 00.0000, 00.0000, 00.0200, 00.0000, 00.0000, 00.0000, 00.0000); \n    section(pixel, vec4(1.0, 1.0, 1.0, 0.60), pixel, uv, pos, 00.0000, 00.0050, PI *1.0,  40.0000, 00.1000, 00.9000, 00.6900, 00.7100, 00.0000, 00.0200, 00.0000, 00.0010, 00.0010, 01.2000, 01.2000); \n    section(pixel, vec4(1.0, 1.0, 1.0, 0.80), pixel, uv, pos, 00.0000, 00.0000, PI *0.0,  40.0000, 00.1000, 00.9000, 00.6900, 00.7100, 00.0000, 00.0200, 00.0000, 00.0010, 00.0010, 01.2000, 01.2000);  \n    section(pixel, vec4(1.0, 1.0, 1.0, 0.70), pixel, uv, pos, 00.0000, 00.0050, PI *0.5,  30.0000, 00.0000, 00.0000, 00.7100, 00.7220, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000);\n    section(pixel, vec4(1.0, 1.0, 1.0, 0.80), pixel, uv, pos, 02.0000, 00.0010, PI *0.5,  40.0000, 00.0000, 00.0000, 00.7050, 00.7000, 00.0050, 00.0100, 00.0050, 00.0000, 00.0000, 00.0000, 00.0000); \n    section(pixel, vec4(1.0, 1.0, 1.0, 0.90), pixel, uv, pos, 01.0000, 00.0010, PI *0.5,  11.0000, 00.1000, 00.9000, 00.7500, 00.8350, 00.0100, 00.0700, 00.0000, 00.0000, 00.0000, 00.0000, 00.0000); \n    \n    fragColor = vec4(pixel);\n}","name":"Image","description":"","type":"image"}]}