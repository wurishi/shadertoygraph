{"ver":"0.1","info":{"id":"4cVXRm","date":"1714989799","viewed":26,"name":"Hello, World too! - Mavene","username":"mavene","description":"Following \"An Introduction to Raymarching\" by kishimisu","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat dist_map(vec3 pos) {\n    vec3 spherePos = vec3(sin(iTime)*3., 0, 0);\n    float sphere = sdSphere(pos - spherePos, 1.);\n    \n    float box = sdBox(pos, vec3(.95));\n    \n    float ground = pos.y + .75;\n    \n    return max(box, sphere); // TODO Change this\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    // Initialize\n    vec3 rayOrigin = vec3(0, 0, -3); // 3 units behind origin on z\n    vec3 rayDirection = normalize(vec3(uv * 0.75, 1)); // since x and y axis is aligned to uv\n    vec3 col = vec3(0);\n    \n    float t = 0.; // track current distance point travelled from camera\n    \n    // Ray marching\n    for (int i = 0; i < 80; i++) {\n        vec3 pos = rayOrigin + rayDirection * t; // position along ray\n    \n        float d = dist_map(pos); // distance from scene\n    \n        t += d; // march ray\n        \n        if (d < .001 || t > 100.) break;\n    }\n    \n    col = vec3(t * .2);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}