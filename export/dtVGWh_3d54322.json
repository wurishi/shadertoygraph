{"ver":"0.1","info":{"id":"dtVGWh","date":"1683920422","viewed":43,"name":"shader 144414141","username":"jackpm77","description":"stars","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Starfield Tutorial by Martijn Steinrucken aka BigWings - 2020\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the end result of a tutorial on my YouTube channel The Art of Code\n// \n\n#define NUM_LAYERS 4.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare) {\n    float d = length(uv);\n    float m = .05/d;\n    \n    float rays = max(1., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*flare;\n    uv *= Rot(3.1415/4.);\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*.3*flare;\n    \n    m *= smoothstep(1., .2, d);\n    return m;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(423.34, 443.21));\n    p += dot(p, p+1.2);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv, float time) {\n    vec3 col = vec3(0);\n    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    for(int y=-1;y<=1;y++) {\n        for(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n            float n = Hash21(id+offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            \n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.9, 1., size)*.6);\n            \n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2)*.5+.5;\n            color = color*vec3(1,.24,1.+size)+vec3(.3, .2, .1)*2.;\n            \n            star *= sin(time*2.+n*6.2831)*.5+1.;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    float t = iTime*.1;\n    \n    uv *= Rot(t);\n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n        float depth = fract(i+t);\n        \n        float scale = mix(320., 1., depth);\n        float fade = depth*smoothstep(10., .1, depth);\n        col += StarLayer(uv*scale+i*45333.2, iTime)*fade;\n    }\n    \n    col = pow(col, vec3(45));    // gamma correction\n    \n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}