{"ver":"0.1","info":{"id":"MlByzW","date":"1507614179","viewed":272,"name":"Liquid Marble","username":"colonel_hilbert","description":"Now that I better understand Kali's formula, I am trying different variations on it. Here is one such, which supports smooth variation over time:\np =.7*pow(abs(p),  vec3(sin(iTime/10.)*0.75 + 1.))/dot(p,p) -.7;\n\nSee lines 30, 34.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raymarch","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015 - https://www.shadertoy.com/view/MtX3Ws\n// Modified by C. Hinrichs 2017\n// Parent: https://www.shadertoy.com/view/XtscDs, morivated by star field: \n\nfloat zoom=0.65;\n\n//vec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-2.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p) {\n\tfloat res = 0.;\n\t\n    vec3 pw = vec3(sin((iTime + 5.)/10.)*0.95 + 1.);\n    \n    vec3 c = p;\n\tfor (int i = 0; i < 10; ++i) {\n        p =.7*pow(abs(p), pw)/dot(p,p) -.7;\n        //p.yz= csqr(p.yz);\n        //p=p.zxy;\n        res += exp(-19. * sqrt(abs(dot(p,c))));\n        \n\t}\n\treturn (res/2.); //log(res/2.)\n}\n\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    float dt = .02;\n    //float dt = .2 - .195*cos(iTime*.05);//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<68; i++ )\n\t{\n        t+=dt*exp(-7.8*c);\n        vec3 pos = ro+t*rd;\n        \n        c = map(pos);               \n        if(t>tminmax.y && tminmax.x != tminmax.y) break; // c /= 1.25;\n        \n        //col += .12*vec3(c*c, c, c*c*c);\n        col +=  .14*vec3(c*c*c, c*c, c);//blue\n    }\n    \n    col *= log(1.25 + 2.*abs(rd.yxz));\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,.9,1.) );\n\n\t// raymarch\n    vec3 col = raymarch(ro,rd,tmm);\n    if (tmm.x<0.)col = col/3.5;// texture(iChannel0, rd).rgb;\n    //else {\n    //    vec3 nor=(ro+tmm.x*rd)/2.;\n    //    nor = reflect(rd, nor);        \n    //    float fre = pow(.5+ clamp(dot(nor,rd),0.0,1.0), 3. )*1.3;\n    //    col += texture(iChannel0, nor).rgb * fre;\n    //}\n\t\n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}