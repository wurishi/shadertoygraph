{"ver":"0.1","info":{"id":"MdlfDl","date":"1498916704","viewed":725,"name":"Simple Boids","username":"Saduras","description":"Boid simulation where the crowed gather around a red leader.","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["simulation","boids","crowed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 50. \n\nfloat edgeSign(vec2 p1, vec2 p2, vec2 p3)\n{\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool isPointInTriangle (vec2 pt, vec2 v1, vec2 v2, vec2 v3)\n{\n    bool b1, b2, b3;\n\n    b1 = edgeSign(pt, v1, v2) < 0.0f;\n    b2 = edgeSign(pt, v2, v3) < 0.0f;\n    b3 = edgeSign(pt, v3, v1) < 0.0f;\n\n    return ((b1 == b2) && (b2 == b3));\n}\n\n\nbool drawBoid(vec2 uv, vec4 boid)\n{\n   \tvec2 forward = boid.zw / length(boid.zw);\n    vec2 p1 = boid.xy + forward * 2.0;\n    vec2 p2 = boid.xy + vec2(forward.y, - forward.x) - forward;\n    vec2 p3 = boid.xy + vec2(-forward.y, forward.x) - forward;\n    \n    return isPointInTriangle(uv, p1, p2, p3); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tuv *= 64.0;\n\t\n\t// Draw the background.\n\tfragColor = vec4(1,1,1,1);\n    \n    const float size = 2.0;\n    \n    vec2 p = 1./iResolution.xy;\n    \n    for(float i=0.0; i<N;i++)\n    {\n        vec4 boid = texture(iChannel0,vec2(i+.5,.5)*p);\n        vec4 color = vec4(0,0,0,1);\n        if(i==0.0) color = vec4(1,0,0,1);\n        \n        if(drawBoid(uv, boid)) fragColor = color;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define N 50.\n#define MIN_DIST 20.\n#define MAX_V 35.\n#define MIN_V 2.\n\n// inspired by https://www.shadertoy.com/view/ldd3DB\n\nvec2 hash(float n) { return fract(sin(vec2(n,n*7.))*43758.5); }\n\nvec2 getLeader(float offset)\n{\n    const float duration = 500.0;\n    const float radius = 50.0;\n    \n    float t = mod(iTime + offset, duration) / duration * 360.0;\n   \treturn vec2(radius * cos(t), radius * sin(t));\n}\n\nvec4 getBoid(float i) { return texture(iChannel0, vec2(i+.5,.5)/iResolution.xy);}\n\nvec2 getVtoCenter(float id)\n{\n\tvec2 pc = vec2(0,0);\n    for(float i=0.0; i<N; i++)\n    {\n        if(i != id)\n        {\n            pc = pc + getBoid(i).xy;\n        }\n    }\n    pc = pc / (N-1.0);\n    return (pc - getBoid(id).xy);\n}\n\nvec2 getRepellForce(float id)\n{\n    vec2 force = vec2(0,0);\n    \n    for(float i=0.0; i<N; i++)\n    {\n        if(i != id)\n        {\n        \tvec2 otherPos = getBoid(i).xy;\n       \t\tif(length(getBoid(id).xy - otherPos) < MIN_DIST)\n            {\n                vec2 d = (getBoid(id).xy - otherPos);\n            \tforce = force + d/length(d) * (MIN_DIST - length(d));\n            }\n        }\n    }\n    \n    return force;\n}\n\nvec2 getPercievedVelocity(float id)\n{\n\tvec2 v = vec2(0,0);\n    for(float i=0.0; i<N; i++)\n    {\n        if(i != id)\n        {\n            v = v + getBoid(i).zw;\n        }\n    }\n    v = v / (N-1.0);\n    \n    return v - getBoid(id).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y > 0.5 || fragCoord.x > N) discard;\n    \n    float id = floor(fragCoord.x);\n    \n    if(iFrame < 5)\n    {\n        vec2 res = iResolution.xy / iResolution.y;\n        fragColor = vec4(hash(id)*res * 128.0 - 64.0,1,0);\n    }\n    else\n    {\n    \tif(id < 1.0)\n       \t\tfragColor = vec4(getLeader(0.0),getLeader(.5) - getLeader(0.0));\n        else\n        {    \n            vec4 boid = getBoid(id);\n\n            vec2 targetPos = getLeader(0.0);\n\n    \t\tvec2 v = boid.zw;\n            v = v + (targetPos - boid.xy);\n            \n            v = v + getVtoCenter(id) / 10.0;\n            v = v + getRepellForce(id);\n            v = v + getPercievedVelocity(id) / 20.0; \n            \n          \tif(length(v) > MAX_V) v = v / length(v) * MAX_V;      \n            if(length(v) < MIN_V) v = v / length(v) * MIN_V;\n\n            fragColor = vec4(boid.xy + v * iTimeDelta,v);\n        }\n    } \n}","name":"Buffer A","description":"","type":"buffer"}]}