{"ver":"0.1","info":{"id":"DlBBRz","date":"1693658837","viewed":97,"name":"Test Shader v2 Gardener","username":"peaceful_gardener","description":"Test","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 7.0; i++){\n        uv = fract(uv * 1.2) - 0.5;\n        uv *= 1.0;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = vec3(0.200,0.839,1.000);\n\n\n        d = 1.0 - sin(-d * 55.0 + iTime * 1.0);\n\n        d = 0.02 / d;\n        \n\n\n\n        vec3 paletteOut = palette(length(uv0), vec3(0.590, 0.811, 0.120), vec3(0.410, 0.392, 0.590), vec3(0.940, 0.548, 0.278), vec3(-4.242, -6.611, -4.045));\n        \n        vec3 colorOut = d * paletteOut;\n        \n        finalColor += colorOut;\n    }\n    \n    fragColor = vec4(normalize(finalColor) * finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}