{"ver":"0.1","info":{"id":"Nst3R7","date":"1629407634","viewed":155,"name":"simple phi noise","username":"delu","description":"blue noise approximation based on https://www.shadertoy.com/view/wltSDn adapted for webgl1","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","blue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: MIT\n\nvec2 hash22(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n  p3 += dot(p3, p3.yzx+33.33);\n  return fract((p3.xx+p3.yz)*p3.zy);\n}\nfloat phinoise(vec2 xy) {\n  const float P2 = 1.324717957244746;\n  const vec2 Q2 = 1. - vec2(1. / P2, 1. / P2 / P2);\n  vec2 tile = floor(xy/4.);\n  float flip = mod(tile.x + tile.y, 2.);\n  xy = mix(xy, xy.yx, flip);\n  float o = fract(dot(Q2, xy) + hash22(tile).x);\n  return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(vec3(pow(phinoise(fragCoord),1./2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}