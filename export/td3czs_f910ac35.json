{"ver":"0.1","info":{"id":"td3czs","date":"1601505596","viewed":53,"name":"Ray Marching for Dummies - Yonng","username":"yonng","description":"\nRefer to the great tutorial: https://www.youtube.com/watch?reload=9&v=PGtv-dBi2wE","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float GetDist(vec3 p)  // simple way calculate the distance using ray marching\n{\n     vec4 s = vec4(0,1,6,1);   //the last 1 is for radius, the first three are the coordinates of the circle\n     float sphereDist = length(p - s.xyz) - s.w;\n     float planeDist = p.y;\n     \n     float d = min(sphereDist, planeDist);\n     return d;\n    \n}\n\n#define MAX_STEPS 100    \n#define MAX_DIST 100.   \n#define SURF_DIST .01\n\n//float and int\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n \tfloat d0=0.;\n    for(int i=0;i<MAX_STEPS;i++)\n    {\n       vec3 p = ro + rd*d0;\n       float ds = GetDist(p);   \n       d0+=ds;\n       // to long or to small -> break\n       if(d0>MAX_DIST||ds<SURF_DIST) break;\n        \n    }\n    \n    return d0;\n}\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);  //delta e\n    vec3 n= d - vec3(GetDist(p-e.xyy),\n                   GetDist(p-e.yxy),\n                   GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime));  //light moves around\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    \n    //utilize the idea of shadowmap to generate the light\n    //if the distance can't reach the light then in shadow\n    float d = RayMarch(p+n*SURF_DIST*2.,l); //from the plane a little bit\n    if(d<length(lightPos - p)) dif*=.1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,1,0);\n    vec3 rd= normalize(vec3(uv.x,uv.y,1));  //rd equals every point on the screen\n    \n    float d = RayMarch(ro, rd);\n    //d /=6.;\n    vec3 p = ro+rd*d;\n    float dif = GetLight(p);\n    col = vec3(dif);\n\n    //col = GetNormal(p);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}