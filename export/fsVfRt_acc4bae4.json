{"ver":"0.1","info":{"id":"fsVfRt","date":"1659402207","viewed":141,"name":"Strange Goop","username":"tsuhre","description":"A hacky attempt at ray tracing ocean waves from my seeded octave noise. \nBuffer A : noise gen\nBuffer B : octave mixing\nBuffer C : dXdY and camera rotation","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["3d","noise","lighting","camera","ocean","heightmap"],"hasliked":0,"parentid":"NsKfR3","parentname":"Seeded Feedback Octave Noise"},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define eyeDist     1500.0\n#define near         500.0\n#define oceanHeight  200.0\n#define oceanSize     20.0\n#define iterations   300.0\n#define stepSize       3.0\n\nmat3x3 rotX(float a){return mat3x3(1.0, 0.0, 0.0, 0.0, cos(a), -sin(a), 0.0, sin(a), cos(a));}\nmat3x3 rotY(float a){return mat3x3(cos(a), 0.0, sin(a), 0.0, 1.0, 0.0, -sin(a), 0.0, cos(a));}\nmat3x3 rotZ(float a){return mat3x3(cos(a), -sin(a), 0.0, sin(a), cos(a), 0.0, 0.0, 0.0, 1.0);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4  noise = texture(iChannel0, fragCoord/iResolution.xy);\n    float n     = noise.x;\n    \n    vec4 col = vec4(0);\n    \n    //-- rotation -----------------------\n    vec4 mouseInfo = vec4(texelFetch(iChannel1, mouseTexel1, 0).zw, texelFetch(iChannel1, mouseTexel1, 0).zw);\n    vec4 rotInfo   = vec4(texelFetch(iChannel1, rotTexel1  , 0).zw, texelFetch(iChannel1, rotTexel2  , 0).zw);\n    \n    mat3x3 rot = rotX(rotInfo.y+pi/3.0)*rotZ(rotInfo.x);\n    \n    //--ray trace------------------------\n    vec3 eye = vec3(0, 100, eyeDist);\n    vec3 p   = vec3(fragCoord-iResolution.xy/2.0, eyeDist-near);\n    vec3 RD  = normalize(p-eye)*rot;\n    vec3 RO  = eye*rot;\n    \n    float d = (RO.z-oceanHeight)/RD.z;\n    vec3  o = RO;\n    if (RO.z > oceanHeight) o += RD*-d;\n    \n    for (float i = 0.0; i < iterations; i++){\n        o += RD*stepSize;\n        \n        vec2 pos = (o.xy+vec2(iTime*50.0));\n        float h = texture(iChannel0, pos/iResolution.xy/oceanSize).x*oceanHeight;\n        float d = o.z-h;\n        if (abs(d) < stepSize){\n            vec2 xy = texture(iChannel1, pos/iResolution.xy/oceanSize).xy*oceanHeight/oceanSize;\n            vec3 vx = normalize(vec3(2, 0, xy.x));\n            vec3 vy = normalize(vec3(0, 2, xy.y));\n            \n            vec3 norm = normalize(cross(vx, vy));\n            vec3 refl = reflect(RD, norm);\n            \n            float l = dot(norm, normalize(vec3(1, 1, 2)));\n            col = vec4(refl/2.0 + 0.5, 1.0);\n            col = texture(iChannel2, refl);\n            col = mix(col, vec4(0, 0.1, 0.5, 1.0), .5);\n            if (l < 0.0) col = mix(col, vec4(0.0), pow(abs(l), 20.0));\n            if (l > 0.0) col = mix(col, vec4(1.0, 0.95, 0.8, 1.0), pow(abs(l), 20.0));\n            break;\n        }\n    }\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define timeMult 0.2\n#define lerpAmt  0.1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if 1\n    float seed = hash(uvec2(fragCoord));\n    #else\n    float seed = texture(iChannel1, fragCoord/iResolution.xy).x;\n    #endif\n    \n    float h = abs(1.0-fract(seed*(iTime*timeMult+100.0))*2.0);\n    float x = mix(kernel(0, iChannel0), h                   , lerpAmt);\n    float y = mix(kernel(1, iChannel0), kernel(0, iChannel0), lerpAmt);\n    float z = mix(kernel(2, iChannel0), kernel(1, iChannel0), lerpAmt);\n    float w = mix(kernel(3, iChannel0), kernel(2, iChannel0), lerpAmt);\n   \n    fragColor = vec4(x, y, z, w);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define textureOffset(tex, offset) texture(tex, (fragCoord+offset)/iResolution.xy)\n#define textureL(tex) textureOffset(tex, vec2( 1, 0))\n#define textureR(tex) textureOffset(tex, vec2(-1, 0))\n#define textureU(tex) textureOffset(tex, vec2( 0, 1))\n#define textureD(tex) textureOffset(tex, vec2( 0,-1))\n#define avgLRUD(channel, tex) (textureL(tex)[channel] + textureR(tex)[channel] + textureU(tex)[channel] + textureD(tex)[channel])/4.0\n#define kernel avgLRUD\n#define level(n, mx, mult) clamp((n-0.5)*mx+0.5, 0.0, 1.0)*mult\n\n#define rotTexel1   ivec2(0)\n#define rotTexel2   ivec2(1, 0)\n#define mouseTexel1 ivec2(2, 0)\n#define mouseTexel2 ivec2(3, 0)\n\n#define pi  3.14159\n#define tau 6.28319\n\n//see https://www.shadertoy.com/view/4tXyWN\nfloat hash( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 noise = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    //level and mix octaves\n    //replace magic leveling numbers with statistical sigma based on the expected value distribution, post kernel\n    float n = (level(noise.x, 2.0, 4.0)+\n               level(noise.y, 3.6, 4.0)+\n               level(noise.z, 4.5, 4.0)+\n               level(noise.w, 6.0, 4.0))/16.0;\n    \n    fragColor = vec4(n);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //-- rotation -----------------------\n    vec4 mouseInfo = vec4(texelFetch(iChannel1, mouseTexel1, 0).zw, texelFetch(iChannel1, mouseTexel2, 0).zw);\n    vec4 rotInfo   = vec4(texelFetch(iChannel1, rotTexel1  , 0).zw, texelFetch(iChannel1, rotTexel2  , 0).zw);\n    \n    vec2 mouseDiff = (mouseInfo.xy-iMouse.xy)*((iMouse.z > 0.0 && mouseInfo.z > 0.0) ? 1.0 : 0.0);\n    mouseInfo = iMouse;\n    \n    rotInfo.xy += rotInfo.zw;\n    rotInfo.y = clamp(rotInfo.y, -pi/3.0, pi/2.0-pi/3.0);\n    rotInfo.zw *= .9;\n    rotInfo.zw += mouseDiff/max(iResolution.x, iResolution.y)*vec2(1, -1);\n    \n    vec4 col = vec4(textureR(iChannel0).x-textureL(iChannel0).x, textureD(iChannel0).x-textureU(iChannel0).x, 0, 1);\n\n    if (ivec2(fragCoord) == rotTexel1  ) col.zw = rotInfo.xy;\n    if (ivec2(fragCoord) == rotTexel2  ) col.zw = rotInfo.zw;\n    if (ivec2(fragCoord) == mouseTexel1) col.zw = mouseInfo.xy;\n    if (ivec2(fragCoord) == mouseTexel2) col.zw = mouseInfo.zw;\n\n    fragColor = col;\n}","name":"Buffer C","description":"","type":"buffer"}]}