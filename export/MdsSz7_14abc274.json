{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// I wrote this in 25 minutes at the revision 2014 live coding competition. \n// Because I had to adapt the code to shadertoy I had to make some minimal modifications. \n// src=ftp://ftp.scene.org/pub/parties/2014/revision14/livecoding/02_semifinals/\n\n#define out_color fragColor\n#define iFFTTexture iChannel0\n#define iFFT(A) texture(iFFTTexture,vec2(.0+float(A)/8.0,.0)).x\n\nfloat df(vec3 p)\n\n{\n\n\tp = mod(p+4.0,8.0)-4.0;\n\n\tp += sin(p*(4.0+iFFT(5)*1.0)) + sin(p*16.0*4.0)*.0;\n\n\treturn (length(p)-5.0 + iFFT(0) + sin(iFFT(1))*.5)*.2 ;\n\n}\n\n\n\nvec3 nf(vec3 p)\n\n{\n\n\tvec2 e= vec2(.001,.0);\n\n\tvec3 n = normalize(vec3(df(p)-df(p+e.xyy),df(p)-df(p+e.yxy),df(p)-df(p+e.yyx)));\n\n\treturn normalize(n+sin(p*100.0)*.2);\n\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tfloat amp = iFFT(0);\n\tvec2 uv = vec2( fragCoord.xy ) / iResolution.xy * vec2(1.0,-1.0);\n\tfloat f = texture( iFFTTexture, vec2(pow(uv.x*.8*(amp+.2)+.2,4.0),.0)  ).r * 0.25;\n\n\tf -= uv.y+.5;\n\n\tf = 0.05/(.05+abs(f));\n\t//vec4 t = texture( iTex7, uv.xy*(1.0+amp)  )*amp*.5;\n\n\n\n\n\n\tvec3 bgcol = vec3(iFFT(0),iFFT(2),iFFT(6));\n\n\tbgcol = normalize(bgcol);\n\n\n\n\tfloat t = iTime;\n\n\tmat3 rot = mat3( sin(t), .0, cos(t),\n\n\t.0,1.,.0,-cos(t),.0,sin(t));\n\n\n\n\tvec3 pos = vec3(2.0 +sin(iTime),2.0 +sin(iTime*4.0),-4.0);\n\n\tvec2 uv2 = uv -vec2 (.5,-.5);\n\n\tvec3 dir = vec3(uv2,1.0 - length(uv2*vec2(.6,.9))*2.0);\n\n\tdir.x*=1.5;\n\n\tdir = normalize(dir);\n\n\n\n\tpos *= rot;\n\n\tdir *= rot;\n\n\n\n\tpos.z+=iTime*2.0+iFFT(0)*4.0;\n\n\n\n\tfloat td = .0;\n\n\n\n\tfor (int i=0 ;i<100; i++)\n\n\t{\n\n\t\tfloat dd = df(pos);\n\n\t\tpos += dir*dd;\n\n\t\ttd += dd;\n\n\n\n\t}\n\n\t\n\n\t\n\n\t\n\n\tvec3 color = f*bgcol*.3 + dot(nf(pos),normalize(vec3(sin(iTime),sin(iTime*3.2),.2)))*.2*bgcol.zyx+.2 + pow(1.0-dot(dir,nf(pos)),4.0)*.5;\n\n\tcolor = min(vec3(1.0),color);\n\n\tcolor = mix(f*bgcol,color,1.0/(1.0+td*.001));\n\n\t\n\n\tcolor += vec3(length(color));\n\n\tcolor -= length(uv)*.56;\n\tout_color = vec4(color,1.);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdsSz7","date":"1398689292","viewed":471,"name":"revision 2014 semifinals musk","username":"mu6k","description":"I wrote this in 25 minutes at the revision 2014 live coding competition. Because I had to adapt the code to shadertoy I had to make some minimal modifications. ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","audio","livecoding","revision","live"],"hasliked":0,"parentid":"","parentname":""}}