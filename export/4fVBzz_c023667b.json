{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\nfloat easeInOutQuad(float t) {\n    return t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n}\n\n// Cubic Easing\nfloat easeInCubic(float t) {\n    return t * t * t;\n}\n\nfloat easeOutCubic(float t) {\n    float f = t - 1.0;\n    return f * f * f + 1.0;\n}\n\nfloat easeInOutCubic(float t) {\n    return t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n}\n\n// Quartic Easing\nfloat easeInQuart(float t) {\n    return t * t * t * t;\n}\n\nfloat easeOutQuart(float t) {\n    float f = t - 1.0;\n    return 1.0 - f * f * f * f;\n}\n\nfloat easeInOutQuart(float t) {\n    return t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * (t - 1.0) * (t - 1.0) * (t - 1.0) * (t - 1.0);\n}\n\n// Sine Easing\nfloat easeInSine(float t) {\n    return 1.0 - cos((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeOutSine(float t) {\n    return sin((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeInOutSine(float t) {\n    return -0.5 * (cos(3.141592653589793 * t) - 1.0);\n}\n\n// Exponential Easing\nfloat easeInExpo(float t) {\n    return t == 0.0 ? 0.0 : pow(2.0, 10.0 * (t - 1.0));\n}\n\nfloat easeOutExpo(float t) {\n    return t == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat easeInOutExpo(float t) {\n    if (t == 0.0) return 0.0;\n    if (t == 1.0) return 1.0;\n    return t < 0.5 ? 0.5 * pow(2.0, 20.0 * t - 10.0) : 1.0 - 0.5 * pow(2.0, -20.0 * t + 10.0);\n}\n\n// Back Easing\nfloat easeInBack(float t) {\n    const float c1 = 1.70158;\n    return (c1 + 1.0) * t * t * t - c1 * t * t;\n}\n\nfloat easeOutBack(float t) {\n    const float c1 = 1.70158;\n    float f = t - 1.0;\n    return 1.0 + (c1 + 1.0) * f * f * f + c1 * f * f;\n}\n\nfloat easeInOutBack(float t) {\n    const float c1 = 1.70158;\n    const float c2 = c1 * 1.525;\n    return t < 0.5\n        ? (pow(2.0 * t, 2.0) * ((c2 + 1.0) * 2.0 * t - c2)) / 2.0\n        : (pow(2.0 * t - 2.0, 2.0) * ((c2 + 1.0) * (t * 2.0 - 2.0) + c2) + 2.0) / 2.0;\n}\n\nvec4 blur(vec2 uv, float radius, float samples) {\n  vec4 color = vec4(0.0);\n\n  const float tau        = 6.28318530718;\n  const float directions = 15.0;\n\n  for (float d = 0.0; d < tau; d += tau / directions) {\n    for (float s = 0.0; s < 1.0; s += 1.0 / samples) {\n      vec2 offset = vec2(cos(d), sin(d)) * radius * (1.0 - s) / iResolution.xy;\n      //color += getInputColor(uv + offset);\n      color += texture(iChannel0, uv + offset);\n    }\n  }\n\n  return color / samples / directions;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float T_MAX = 3.0;\n    float time = mod(iTime, T_MAX);\n    float t = time/ T_MAX;\n    //t = 1.0 - t;\n    \n    float progress = t;\n    progress = easeInOutSine(progress);\n    \n    vec4 color = vec4(0.5,1.0,1.0,1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    float p = mix(2.5,1000.0,easeInExpo(progress));\n    \n    //this will be used later to make a mask\n    float m = mix(\n        0.0,\n        1.0,\n        clamp(\n            pow(abs(uv.x-0.5)*2.0,p) + pow(abs(uv.y-0.5)*2.0,p),0.0,1.0\n        )\n        );\n\n    float pbm = mix(-1.0,1.0,progress);\n    float blurMask = abs(m - pbm);\n    blurMask *= ( m - pbm < 0.0) ? 0.0 : 1.0;\n    blurMask = clamp(blurMask,0.0,1.0);\n    blurMask = easeOutSine(blurMask);\n    \n    float mm = mix(0.0,2.0,progress);\n    float mask = ( m - mm > 0.0) ? 0.0 : 1.0;\n    \n    //float mask = abs(m - mm);\n    //mask *= ( m - mm > 0.0) ? 0.0 : 1.0;\n    \n    //float mask = abs(m - mm);\n    //mask *= ( m - mm < 0.0) ? 0.0 : 1.0;\n    //mask = easeOutSine(mask); \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    //fragColor = blur(uv, 50.0, 7.0) * color;\n    \n    \n    \n    fragColor = texture(iChannel0, uv);\n    fragColor =  vec4(uv.xy,0.0,1.0);\n    fragColor =  vec4(blurMask);\n    //fragColor =  vec4(mask);\n    //fragColor = blur(uv, blurMask * 10.0, 7.0) * mask;\n    \n    fragColor = mask * blur(uv, blurMask * 10.0, 7.0) + (color * blurMask * mask);\n    //fragColor = blur(uv, blurMask * 10.0, 7.0) + (color * blurMask );\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fVBzz","date":"1733711748","viewed":82,"name":"winter is coming?","username":"jgarza9788","description":"ice, winter,frozen","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ice","winter","frozen"],"hasliked":0,"parentid":"","parentname":""}}