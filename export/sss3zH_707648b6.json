{"ver":"0.1","info":{"id":"sss3zH","date":"1616514170","viewed":111,"name":"Three body","username":"romeosoft","description":"Three body gravitational field.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["threebody"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*********************************************************************\n                            Three body\n                            \n*********************************************************************/\n#define ROT(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\nconst float pi = 3.1415926;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pp = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    float eyer = 2.0;\n    float eyea = -((iMouse.x) / iResolution.x) * pi * 2.0;\n    float eyef = ((iMouse.y / iResolution.y)-0.24) * pi * 2.0;\n    \n\tvec3 cam = vec3(\n        eyer * cos(eyea) * sin(eyef),\n        eyer * cos(eyef),\n        eyer * sin(eyea) * sin(eyef));\n    \n    ROT(cam.xz, (0.25) * (iTime + 15.0));\n    \n\tvec3 front = normalize(- cam);\n\tvec3 left = normalize(cross(normalize(vec3(0.0,1,-0.01)), front));\n\tvec3 up = normalize(cross(front, left));\n\tvec3 v = normalize(front*1.5 + left*pp.x + up*pp.y);\n    \n    vec3 p = cam;\n    \n    float dt = 0.01;\n    vec3 cor = vec3(0.0);\n    vec3 o1 = vec3(1.0,0.0, -0.0);\n    vec3 o2 = vec3(0.0,-1.0,0.0);\n    vec3 o3 = vec3(-0.0,0.0,1.0);\n    \n    for(int i = 0; i < 400; i ++)\n    {\n        p += v * dt;\n     \n        float r1 = length(p-o1);\n        float r2 = length(p-o2);\n        float r3 = length(p-o3);\n        \n        vec3 f = \n        normalize(o1-p)*(1. / (r1*r1)) + \n        normalize(o2-p)*(.25 / (r2*r2)) +\n        normalize(o3-p)*(.125 /(r3*r3));\n       \n        cor += (f) * 0.01;\n    }\n    fragColor = vec4(sin(cor*10.0),1.0);\n}","name":"Image","description":"","type":"image"}]}