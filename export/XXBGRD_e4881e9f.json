{"ver":"0.1","info":{"id":"XXBGRD","date":"1708234151","viewed":55,"name":"homework 3","username":"reganly1809","description":"for conner","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rotateY(vec3 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    mat3 rotationMatrix = mat3(\n        c, 0, s,\n        0, 1, 0,\n        -s, 0, c\n    );\n    return rotationMatrix * v;\n}\n\nfloat map(vec3 p) {\n\n  float angle = iTime * 0.8; \n  vec3 rotation = rotateY(p,angle *- 1.0);\n  \nfloat movement = sin(iTime) * 0.8;\nfloat sphereRadius = 0.8;\n\n    float distanceToSphere1 = length(rotation + vec3(0.6, -1.4, 0.0 + movement)) - sphereRadius;\n    \n    //change rotation\n    rotation = rotateY(p,angle * -1.6);\n    \n    float distanceToSphere = length(rotation + vec3(-1.0, 1.3, 0.0 + movement)) - sphereRadius;\n \n     // change rotation again\n    rotation = rotateY(p,angle);\n     vec3 q = abs(rotation + vec3(0.6,0.2,0.0 + movement)) - vec3(1.0); \n    float Cube = length(max(q, 0.1)) + min(max(q.x + 0.5, max(q.y + 0.5, q.z + 0.5)), 0.0);\n    \n    return min(min(distanceToSphere1, distanceToSphere), Cube);\n}\n\nvec3 estimateNormal(vec3 p) {\n    float steps = 0.001;\n    vec3 normal = vec3(\n        map(p + vec3(steps , 0, 0)) - map(p - vec3(steps , 0, 0)),\n        map(p + vec3(0, steps , 0)) - map(p - vec3(0, steps , 0)),\n        map(p + vec3(0, 0, steps )) - map(p - vec3(0, 0,steps ))\n    );\n    return normalize(normal);\n}\nvec3 getColour(vec3 p, vec3 rayOrign, vec2 uv) {\n    float t = length(p - rayOrign); \n    \n    float colourFactor = smoothstep(2.0, 9.0, t); \n    \n    //Colours\n    vec3 PlanetColour = vec3(0.9, 0.5, 1.0);\n    vec3 SpaceGradient = vec3(uv.y, uv.x - 0.4, .9); \n    vec3 SpaceColour = vec3(0.00,0.0,0.1);\n    \n    \n    vec3 SpaceBlend = mix( SpaceColour,SpaceGradient, 0.3);\n    \n    return mix(PlanetColour, SpaceBlend, colourFactor * sin(iTime) + 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 smoothUv = fragCoord/iResolution.xy;\n\n//initialization\n    vec3 rayOrigin = vec3(0.0,0.0,-5.);\n    vec3 rayDirection = vec3(uv, 1.0);\n    vec3 col = vec3(0);\n    \n    float t = 1.0;\n    \n    //raymarching\n    for (int i = 0; i < 150; i++) {\n        vec3 p = rayOrigin + rayDirection * t;\n        \n    \n        float d = map(p);\n    \n        t+=d;\n        \n        col = vec3(i) / 30.;\n        \n          if (d < 0.001 || t > 110.0) {\n            vec3 normal = estimateNormal(p);\n            float diffuse = max(dot(normal, normalize(vec3(0.3, 0.3, -0.1))), 0.1);\n            \n            col = getColour(p, rayOrigin, smoothUv) + diffuse*0.4;\n            fragColor = vec4(col, 1.0);\n            return;\n            }\n\n\n    }\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}