{"ver":"0.1","info":{"id":"XfjSWc","date":"1706896777","viewed":62,"name":" Quadratic Bezier - nearest 2D","username":"doles","description":"Demonstrates computing the nearest point on a quadratic bezier. Based on https://www.shadertoy.com/view/MlKcDD","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","bezier","cubic","quadratic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a quadratic bezier segment, which can be solved analyically with a cubic.\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\nfloat dot2(in vec2 v) { return dot(v, v); }\nfloat cro(in vec2 a, in vec2 b) { return a.x * b.y - a.y * b.x; }\n\n// compute nearest point on quadratic bezier\nvec2 nearestBezier(in vec2 pos, in vec2 A, in vec2 B, in vec2 C)\n{\n  vec2 a = B - A;\n  vec2 b = A - 2.0 * B + C;\n  vec2 c = a * 2.0;\n  vec2 d = A - pos;\n\n  float kk = 1.0 / dot(b, b);\n  float kx = kk * dot(a, b);\n  float ky = kk * (2.0 * dot(a, a) + dot(d, b)) / 3.0;\n  float kz = kk * dot(d, a);\n\n  float p = ky - kx * kx;\n  float q = kx * (2.0 * kx * kx - 3.0 * ky) + kz;\n  float p3 = p * p * p;\n  float q2 = q * q;\n  float h = q2 + 4.0 * p3;\n\n  if (h >= 0.0)\n  {\n    // 1 root\n    h = sqrt(h);\n    vec2 x = (vec2(h, -h) - q) / 2.0;\n\n    vec2 uv = sign(x) * pow(abs(x), vec2(1.0 / 3.0));\n    float t = clamp(uv.x + uv.y - kx, 0.0, 1.0);\n    vec2 q = d + (c + b * t) * t;\n    return pos + q;\n  }\n  else\n  {\n    // 3 roots\n    float z = sqrt(-p);\n    float v = acos(q / (p * z * 2.0)) / 3.0;\n    float m = cos(v);\n    float n = sin(v) * 1.732050808;\n    vec3 t = clamp(vec3(m + m, -n - m, n - m) * z - kx, 0.0, 1.0);\n    vec2 qx = d + (c + b * t.x) * t.x;\n    float dx = dot2(qx);\n    vec2 qy = d + (c + b * t.y) * t.y;\n    float dy = dot2(qy);\n    if (dx < dy)\n    {\n      return pos + qx;\n    }\n    else\n    {\n      return pos + qy;\n    }\n  }\n}\n\n// signed distance to a quadratic bezier\nfloat sdBezier(in vec2 pos, in vec2 A, in vec2 B, in vec2 C)\n{\n  vec2 a = B - A;\n  vec2 b = A - 2.0 * B + C;\n  vec2 c = a * 2.0;\n  vec2 d = A - pos;\n\n  float kk = 1.0 / dot(b, b);\n  float kx = kk * dot(a, b);\n  float ky = kk * (2.0 * dot(a, a) + dot(d, b)) / 3.0;\n  float kz = kk * dot(d, a);\n\n  float res = 0.0;\n  float sgn = 0.0;\n\n  float p = ky - kx * kx;\n  float q = kx * (2.0 * kx * kx - 3.0 * ky) + kz;\n  float p3 = p * p * p;\n  float q2 = q * q;\n  float h = q2 + 4.0 * p3;\n\n  if (h >= 0.0)\n  { // 1 root\n    h = sqrt(h);\n    vec2 x = (vec2(h, -h) - q) / 2.0;\n\n    vec2 uv = sign(x) * pow(abs(x), vec2(1.0 / 3.0));\n    float t = clamp(uv.x + uv.y - kx, 0.0, 1.0);\n    vec2 q = d + (c + b * t) * t;\n    res = dot2(q);\n    sgn = cro(c + 2.0 * b * t, q);\n  }\n  else\n  { // 3 roots\n    float z = sqrt(-p);\n    float v = acos(q / (p * z * 2.0)) / 3.0;\n    float m = cos(v);\n    float n = sin(v) * 1.732050808;\n    vec3 t = clamp(vec3(m + m, -n - m, n - m) * z - kx, 0.0, 1.0);\n    vec2 qx = d + (c + b * t.x) * t.x;\n    float dx = dot2(qx), sx = cro(c + 2.0 * b * t.x, qx);\n    vec2 qy = d + (c + b * t.y) * t.y;\n    float dy = dot2(qy), sy = cro(c + 2.0 * b * t.y, qy);\n    if (dx < dy)\n    {\n      res = dx;\n      sgn = sx;\n    }\n    else\n    {\n      res = dy;\n      sgn = sy;\n    }\n  }\n\n  return sqrt(res) * sign(sgn);\n}\n\nfloat udSegment(in vec2 p, in vec2 a, in vec2 b)\n{\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  return length(pa - ba * h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n  vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n  vec2 v0 = vec2(1.3, 0.9) * cos(iTime * 0.5 + vec2(0.0, 5.0));\n  vec2 v1 = vec2(1.3, 0.9) * cos(iTime * 0.6 + vec2(3.0, 4.0));\n  vec2 v2 = vec2(1.3, 0.9) * cos(iTime * 0.7 + vec2(2.0, 0.0));\n\n  float d = sdBezier(p, v0, v1, v2);\n\n  float f = smoothstep(-0.2, 0.2, cos(2.0 * iTime));\n  vec3 col = vec3(1.0) - vec3(0.1, 0.4, 0.7) * mix(sign(d), 1.0, f);\n  col *= 1.0 - exp(-4.0 * abs(d));\n  col *= 0.8 + 0.2 * cos(140.0 * d);\n  col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n  // compute and draw reference point...\n  if (iMouse.z < 0.001)\n  {\n    m = vec2(sin(iTime) * 0.5, cos(iTime) * 0.5);\n  }\n  d = sdBezier(m, v0, v1, v2);\n  col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n  col = mix(\n      col,\n      vec3(1.0, 1.0, 0.0),\n      1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n\n  // compute and draw nearest point...\n  vec2 n = nearestBezier(m, v0, v1, v2);\n  col = mix(col, vec3(0.0, 0.6, 1.0), 1.0 - smoothstep(0.0, 0.005, length(p - n) - 0.015));\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}