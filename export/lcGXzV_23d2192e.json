{"ver":"0.1","info":{"id":"lcGXzV","date":"1715449373","viewed":66,"name":"I'm spinning...","username":"gest","description":"Let's see what happens","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","spin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHADERTOY\n\n#ifdef SHADERTOY\n    #define main() mainImage( out vec4 fragColor, in vec2 fragCoord )\n    #define u_canvas iResolution\n    #define u_mouse iMouse\n    #define u_time iTime\n    #define gl_FragCoord fragCoord\n    #define gl_FragColor fragColor\n\t#define texture2D texture\n\t#define textureCube texture\n\t#define u_texture0 iChannel0\n\t#define u_texture1 iChannel1\n\t#define u_textureCube0 iChannel0\n\t#define u_textureCube1 iChannel1\n#endif\n\n//#define SUPER_GRAPHIC_CARD\n\n#ifdef SUPER_GRAPHIC_CARD\n\t#define SOFT_SHADOW\n#endif\n\nfloat time;\n#define FAR 50.\n#define ID_NONE -1.\n#define ID_GROUND 0.\n#define ID_COLUMN 1.\n#define ID_SPIN_1 2.\n#define ID_SPIN_2 3.\n\n\nstruct FigureParam {\n\tfloat t1;\n\tfloat t2;\n\tbool repPolar1;\n\tbool repPolar2;\n\tfloat repCount1;\n\tfloat repCount2;\n\tint type;\n};\n\nObject Figure(vec3 p, FigureParam param) {\n\tvec3 q;\n\tfloat d;\n\n\tObject object = Object(FAR, ID_NONE, p);\n\n\t//Столб\n\tObject OBJ1 = Object(FAR, ID_COLUMN, p);\n\t{\n\t\tq = p;\n\t\td = AND(TF_BALL(q.xz, 0.5), TF_BETWEEN(q.y, 7.));\n\t\tOBJ1.distance = d;\n\t\tOBJ1.position = q;\n\t}\n\tobject = OR(object, OBJ1);\n\n\tTF_REPLICA_SPIN_LIMIT(p.y, p.xz, 0.3, -4., 3.);\n\tif (param.repPolar1) {\n\t\tTF_REPLICA_ANGLE_POLAR(p.xz, param.repCount1, param.t1);\n\t} else {\n\t\tTF_REPLICA_ANGLE(p.xz, param.repCount1, param.t1);\n\t}\n\tp.z -= 2.;\n\t\n\t//Винт1\n\tObject OBJ2 = Object(FAR, ID_SPIN_1, p);\n\t{\n\t\tq = p;\n\t\td = TF_BALL(q.yz, 0.1);\n\t\tOBJ2.distance = d;\n\t\tOBJ2.position = q;\n\t}\n\tobject = OR(object, OBJ2);\n\n\t//Винт2\n\tObject OBJ3 = Object(FAR, ID_SPIN_2, p);\n\t{\n\t\tq = p;\n\t\t\n\t\tif (param.type!=1) {\n\t\t\tTF_REPLICA_SPIN(q.x, q.yz, 0.05);\n\t\t\tif (param.repPolar2) {\n\t\t\t\tTF_REPLICA_ANGLE_POLAR(q.yz, param.repCount2, param.t2);\n\t\t\t} else {\n\t\t\t\tTF_REPLICA_ANGLE(q.yz, param.repCount2, param.t2);\n\t\t\t}\n\t\t\tq.z -= 0.4;\n\t\t}\n\t\t\n\t\tif (param.type==0) {\n\t\t\t//Квадратная пружина\n\t\t\td = TF_BALL(q.xz, 0.05);\n\t\t} else if (param.type==1) {\n\t\t\t//Ступеньки\n\t\t\tTF_ROTATE(q.xy, radians(-10.));\n\t\t\td = AND(TF_BOX(q.xy, vec2(0.15, 0.05)), TF_BETWEEN(q.z, 0.5));\n\t\t} else if (param.type==2) {\n\t\t\t//Цилиндры\n\t\t\td = AND(TF_BALL(q.xy, 0.03), TF_BETWEEN2(q.z, -0.4, 0.2));\n\t\t} else if (param.type==3) {\n\t\t\t//Лопатки\n\t\t\tTF_ROTATE(q.xy, radians(10.));\n\t\t\td = AND(TF_BOX(q.xy, vec2(0.01, 0.08)), TF_BETWEEN(q.z, 0.2));\n\t\t} else if (param.type==4) {\n\t\t\t//Круглая пружина\n\t\t\td = TF_BALL(q.xz, 0.05);\n\t\t}\n\t\tOBJ3.distance = d;\n\t\tOBJ3.position = q;\n\t}\n\tobject = OR(object, OBJ3);\n\n\tif (object.id!=ID_NONE) object.distance *= 0.5;\n\t\n    return object;\n}\n\nObject Figures(vec3 p) {\n\tvec3 q;\n\tfloat d;\n\t\n\tq = p;\n\t\n\tfloat idCell = TF_REPLICA_ANGLE(q.xz, 5., 0.);\n\tq.z -= 6.;\n\t\n\tFigureParam param;\n\t\n\t//idCell = 2.;\n\t\n\tif (idCell==0.) {\n\t\t//Треугольная пружина\n\t\tparam.t1 = 0.5*time;\n\t\tparam.t2 = time;\n\t\tparam.repPolar1 = false;\n\t\tparam.repPolar2 = false;\n\t\tparam.repCount1 = 36.;\n\t\tparam.repCount2 = 3.;\n\t\tparam.type = 0;\n\t} else if (idCell==1.) {\n\t\t//Ступеньки\n\t\tparam.t1 = 0.6*time;\n\t\tparam.t2 = 0.9*time;\n\t\tparam.repPolar1 = true;\n\t\tparam.repPolar2 = false;\n\t\tparam.repCount1 = 36.;\n\t\tparam.repCount2 = 0.;\n\t\tparam.type = 1;\n\t} else if (idCell==2.) {\n\t\t//Цилиндры\n\t\tparam.t1 = 0.7*time;\n\t\tparam.t2 = 0.8*time;\n\t\tparam.repPolar1 = false;\n\t\tparam.repPolar2 = false;\n\t\tparam.repCount1 = 36.;\n\t\tparam.repCount2 = 10.;\n\t\tparam.type = 2;\n\t} else if (idCell==3.) {\n\t\t//Лопатки\n\t\tparam.t1 = 0.8*time;\n\t\tparam.t2 = 0.7*time;\n\t\tparam.repPolar1 = false;\n\t\tparam.repPolar2 = true;\n\t\tparam.repCount1 = 36.;\n\t\tparam.repCount2 = 36.;\n\t\tparam.type = 3;\n\t} else if (idCell==4.) {\n\t\t//Круглая пружина\n\t\tparam.t1 = 0.9*time;\n\t\tparam.t2 = 0.;\n\t\tparam.repPolar1 = false;\n\t\tparam.repPolar2 = false;\n\t\tparam.repCount1 = 36.;\n\t\tparam.repCount2 = 36.;\n\t\tparam.type = 4;\n\t}\n\t\n\treturn Figure(q, param);\n}\n\nObject Ground(vec3 p) {\n\tvec3 q;\n\tfloat d;\n\t\n\tObject object = Object(FAR, ID_GROUND, p);\n\t{\n\t\td = TF_BEFORE(p.y, -2.);\n\t\tq = p;\n\t\tTF_REPLICA_ANGLE(q.xz, 5., 0.);\n\t\tq.z -= 6.;\n\t\tfloat d_cut = TF_BALL(q.xz, 3.0);\n\t\td = AND(d, -d_cut, 0.5);\n\t\tobject.distance = d;\n\t}\n\treturn object;\n}\n\nfloat map(in vec3 p, inout Object object) {\n\tvec3 q;\n\tfloat d;\n\n\tobject = Object(FAR, ID_NONE, p);\n\n\tobject = OR(object, Ground(p));\n\tobject = OR(object, Figures(p));\n\t\n    return object.distance;\n}\n\nfloat map (vec3 p) {\n\tObject object;\n\treturn map (p, object);\n}\n\nvec3 mapNormal( in vec3 p, float eps ) {\n    vec2 e = vec2(1.0, -1.0) * eps;\n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\nfloat rayMarch(inout Ray ray) {\n\tray.distance = ray.near;\n\tfloat steps;\n\tfor (float i = 0.; i < 200.; ++i) {\n\t\tray.position = ray.origin + ray.direction * ray.distance;\n\t\tray.object.distance = map(ray.position, ray.object);\n\t\tray.hit = abs(ray.object.distance) < ray.epsilon;\n\t\tif (ray.hit) break;\n\t\tray.distance += ray.object.distance*ray.swing;\n\t\tif (ray.distance>ray.far) break;\n\t\tsteps = i + 1.;\n\t\tif (steps>ray.steps) break;\n\t}\n\treturn steps;\n}\n\nfloat softShadow( Ray ray, float k ) {\n    float shade = 1.0;\n    ray.distance = ray.near;    \n\tfloat steps = 1.;\n    for ( int i = 0; i < 50; i++ ) {\n\t\tray.position = ray.origin + ray.direction * ray.distance;\n        ray.object.distance = map(ray.position);\n        shade = min( shade, smoothstep( 0.0, 1.0, k * ray.object.distance / ray.distance)); \n\t\tray.hit = ray.object.distance < ray.epsilon;\n\t\tif (ray.hit) break;\n        ray.distance += min( ray.object.distance, ray.far / ray.steps * 2. ); \n        if (ray.distance > ray.far ) break; \n\t\tsteps++;\n\t\tif (steps>ray.steps) break;\n    }\n    return min( max( shade, 0.0 ) + 0.5, 1.0 ); \n}\n\nvec3 SkyCol(vec3 rd) {\n\treturn mix(vec3 (0.5, 0.75, 1.), vec3(1), rd.y+0.2);\n}\n\nvec3 lighting(Ray ray, vec3 lightDir, vec3 mColor) {\n\tfloat sh = 1.;\n\t#ifdef SOFT_SHADOW\n\t\tRay ray1 = ray;\n\t\t{\n\t\t\tray1.origin = ray.position;\n\t\t\tray1.direction = lightDir;\n\t\t}\n\t\tsh = softShadow(ray1, 20.);\n\t#endif\n\tfloat diff = max(dot(lightDir, ray.normal), 0.);\n\tfloat spec = pow(max(dot(vec3(0, 0, 1), reflect(-lightDir, ray.normal)), 0.0), 30.0);\n\treturn mColor * (0.2 + diff*sh) + spec*sh;\n}\n\nvec3 getMaterial(Ray ray) {\n\tvec3 p = ray.position;\n\tvec3 q = ray.object.position;\n\tvec3 n = ray.normal;\n\t\n\tvec3 mColor = vec3(1);\n\tif (ray.object.id==ID_GROUND) {\n\t\tmColor = vec3(0,1,0);\n\t\tvec2 id = TF_REPLICA(p.xz, 2.);\n\t\tid = mod(id, 2.);\n\t\tmColor = (id.x - id.y)==0. ? vec3(1) : vec3(0,1,0);\n\t} else if (ray.object.id==ID_COLUMN) {\n\t\tmColor = vec3(0,0.6,0);\n\t} else if (ray.object.id==ID_SPIN_1) {\n\t\tmColor = vec3(0,0.4,0);\n\t} else if (ray.object.id==ID_SPIN_2) {\n\t\tmColor = 0.5*mix(vec3(0.2, 0.8, 0.1), vec3(0.8, 0.2, 0.1), q.z*10.);\n\t}\n\treturn mColor;\n}\n\nvec3 Render(Ray ray) {\n\tvec3 color;\n\t\n\trayMarch(ray);\n\t\n\tif(ray.distance < ray.far) {\n\t\tray.normal = mapNormal(ray.position, 0.002);\n\t\t//vec3 lightDir = normalize(vec3(1, 2., -3.0));\n\t\tvec3 lightDir =  -(ray.direction);\n\t\tvec3 mColor = getMaterial(ray);\n\t\tcolor = lighting(ray, lightDir, mColor);\n\t\t\n\t\t//Туман\n\t\tconst float fogStart = 10.;\n\t\tvec3 fogColor = SkyCol(ray.direction);\n\t\tcolor = mix(color, fogColor, clamp((ray.distance-fogStart)/(ray.far-fogStart), 0., 1.));\n\t} else {\n\t\tcolor = SkyCol(ray.direction);\n\t}\n\t\n\t\n\treturn color;\n}\n\nvoid main() {\n\ttime = u_time;\n\n\tfloat aspect = u_canvas.x / u_canvas.y;\n\tvec2 uv = gl_FragCoord.xy / u_canvas.xy;\n    uv = uv - 0.5;\n\n\tvec2 mouse = u_mouse.xy / u_canvas.xy - 0.5;\n\tif (u_mouse.xy==vec2(0)) mouse = vec2(0);\n\n    vec2 ori = vec2(\n        u_mouse.z==0. ? sin(time*0.5)*PI/2. : mouse.y*PI*2.,\n        u_mouse.z==0. ? sin(time*0.1)*PI : mouse.x*PI*2.\n    );\n\n\t#if 0\n\t\tori.x = clamp(ori.x, -PI/2., PI/2.);\n\t#else\n\t\tori.x = clamp(ori.x, -0., PI/2.);\n\t#endif\n\n\tCamera cam;\n\t{\n\t\tcam.fov     = 60.;\n\t\tcam.aspect  = aspect;\n\t\tcam.origin  = vec3(0.0, 0.0, 15. + 3.*sin(u_time * 0.3));\n\t\tcam.target  = vec3(0.0, 0.0, 0.);\n\t\tcam.up \t\t= vec3(0,1,0);\n\t\tcam.vMat \t= mat3(1);//TF_ROTATE_Y(ori.y) * TF_ROTATE_X(ori.x);\n\t\tcam.mMat\t= TF_ROTATE_Y(ori.y) * TF_ROTATE_X(ori.x);\n\t}\n\t\n\tRay ray = lookAt(uv, cam);\n\t{\n\t\tray.near \t= 0.01;\n\t\tray.far  \t= FAR;\n\t\tray.epsilon = 0.001;\n\t\tray.swing\t= 1.;\n\t\tray.steps \t= 150.;\n\t}\n\n\tvec3 color = Render(ray);\n\t     \n    color = pow(color, vec3(0.8));   \n    gl_FragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = radians(180.);\n//Камера\nstruct Camera {\n\t//Задаваемые параметры\n\tfloat fov, aspect;\n\tvec3  origin, target, up;\n\tmat3 vMat, mMat;\n\t//Расчетные параметры\n\tfloat factor;\n\tvec3  forward, right, position, coord;\n\tmat3 pMat, uMat;\n};\n\n//Параметры объекта\nstruct Object {\n\tfloat   distance;\t//Последнее приближение к объекту сцены\n\tfloat \tid;\t\t\t//id найденого объека сцены\n\tvec3 \tposition;\t//Координатв поверхности объекта\n};\n\n//Луч\nstruct Ray {\n\t//Задаваемые параметры\n\tvec3  origin;\t\t//Начало луча\n\tvec3  direction;\t//Направление луча\n\tfloat near;\t\t\t//Минимальное расстояние от камеры (начало сцены)\n\tfloat far;\t\t\t//Максивальное расстояние от камеры (конец сцены)\n\tfloat epsilon;\t\t//Точность обнаружения поверхности\n\tfloat steps;\t\t//Максимальное число итераций\n\tfloat swing;\t\t//\"+\" -колебание в найденной точке, \"-\"\n\t//Вычисляемые параметры\n\tfloat distance; \t//Расстояние до объекта сцены от ray.origin в направлении ray.direction\n\tvec3  position; \t//Точка поверхности\n\tvec3  normal;\t\t//Нормаль в точке поверхности\n\tbool  hit;\t\t\t//Флаг нахождения точки поверхности с заданной точностью\n\tObject object;\t\t//Параметры объекта (можно формировать непосредственно в карте расстояний)\n};\n//Формирование луча камеры\nRay lookAt (in vec2 uv, inout Camera cam) {\n\t//Расчетные характеристики камеры\n\tcam.factor\t\t= 1.0/tan(radians(cam.fov/2.));\n\tcam.forward \t= normalize(cam.target-cam.origin); \n\tcam.right \t\t= normalize(cross(cam.up, cam.forward));\n\tcam.up \t\t\t= cross(cam.forward, cam.right);\n\tcam.position \t= cam.origin + cam.factor * cam.forward;\n\tcam.coord \t\t= cam.position + uv.x * cam.right*cam.aspect + uv.y * cam.up;\n\tcam.pMat \t\t= mat3(cam.right, cam.up, cam.forward);\n\n\t//Формирование луча\n\tRay ray;\n\t{\n\t\tray.origin \t\t= cam.mMat * cam.origin;\n\t\tray.direction \t= cam.mMat * cam.vMat * cam.pMat * normalize(vec3(uv.x*cam.aspect, uv.y, cam.factor));\n\t\t//Умолчания\n\t\tray.near\t\t= 0.01;\n\t\tray.far\t\t\t= 100.;\n\t\tray.epsilon\t\t= 0.001;\n\t\tray.swing\t\t= 1.0;\n\t\tray.steps\t\t= 200.;\n\t}\n\treturn ray;\n}\n//-------------------функции трансформации и позиционирования объектов сцены\n//Допустимая ошибка (для удаления артефактов) 1./min(u_canvas.x, u_canvas.y)\nfloat EPS = 0.01;\n//Функция расстояния до фигуры со скругленными ребрами (объединение и сглаживание с увеличением на R)\n//float d - сглаживание фигуры\n//vec2 d - объединение и сглаживание двух фигур\n//vec3 d - объединение и сглаживание трех фигур\n//vec4 d - объединение и сглаживание четырех фигур\n#define TF_ROUND(d, R) (length(max(d, 0.)) - (R))\n//Функция расстояния до бокса (p vec3) или прямоугольника (p vec2) со скругленными ребрами\n//Функция расстояния до капсулы, если два размера 0\n#define TF_BOX_ROUND(p, S, R) TF_ROUND(abs(p)-(S), R)\n#define TF_BOX_ROUND1(p, S, R) TF_ROUND(abs(p)-(S) + R, R)\n//Функция расстояния до бокса (p vec3) или прямоугольника (p vec2)\n#define TF_BOX(p, S) TF_BOX_ROUND(p, S, 0.)\n//#define TF_BOX(p, S) TF_ROUND(abs(p) - (S) - EPS, EPS)\n#define TF_BOX1(p, S) TF_BOX_ROUND(p, S, EPS)\n#define TF_BOX3D(p, S) max(abs((p).x)-(S).x, max(abs((p).y)-(S).y, abs((p).z)-(S).z))\n#define TF_BOX2D(p, S) max(abs((p).x)-(S).x, abs((p).y)-(S).y)\n//Функция расстояния до шара (p vec3) или круга (p vec2)\n#define TF_BALL(p, R) TF_ROUND(abs(p), R)\n//Эллипс\n#define TF_ELLIPSE3D(p, r) min ((r).x, min((r).y, (r).z)) * TF_BALL(p/(r), 1.)\n#define TF_ELLIPSE2D(p, r) min ((r).x, (r).y) * TF_BALL(p/(r), 1.)\n//Отрезок от a до b радиусом r\n#define TF_SEGMENT(p, a, b, r) TF_BALL((p)-(a) - ((b)-(a)) * clamp( dot((p)-(a),(b)-(a))/dot((b)-(a),(b)-(a)), 0.0, 1.0 ), r)\n//Функция расстояния до пространства ДО p1\n#define TF_BEFORE(p, p1) (p - (p1))\n#define TF_BEFORE1(p, p1) TF_ROUND(p - (p1) + EPS, EPS)\n//Функция расстояния до пространства ДО normal с отступом p1\n#define TF_BEFORE_PLANE(p, normal, p1) dot(p, normal) - p1\n//Функция расстояния до пространства ПОСЛЕ p1\n#define TF_AFTER(p, p1) (-p + (p1))\n#define TF_AFTER1(p, p1) TF_ROUND(-p + (p1) + EPS, EPS)\n//Функция расстояния до пространства ПОСЛЕ normal с отступом p1\n#define TF_AFTER_PLANE(p, normal, p1) dot(p, normal) + p1\n//Функция расстояния до симметричного пространства МЕЖДУ -p1 и +p1\n//#define TF_BETWEEN(p, p1) TF_ROUND(abs(p) - (p1) + EPS, EPS)\n#define TF_BETWEEN(p, p1) (abs(p) - (p1))\n//Функция расстояния до несимметричного пространства МЕЖДУ p1 и p2\n//#define TF_BETWEEN2(p, p1, p2) TF_ROUND( abs(p - 0.5*(p1+p2)) - 0.5*(p2-p1) + EPS, EPS)\n#define TF_BETWEEN2(p, p1, p2) (abs(p - 0.5*((p1)+(p2))) - 0.5*((p2)-(p1)))\n//Перемещение пространства p (float p...vec4 p)\n#define TF_TRANSLATE(p, d) p -= d;\n//Масштаб\n#define TF_SCALE(p, s) p /= s\n\n//Вращение пространства p (vec2 p)\n#if 0\n\t#define TF_ROTATE(p, a) p = mat2(cos(a), sin(a), -sin(a), cos(a)) * p\n#else\n\t#define TF_ROTATE(p, a) p = p.xy * cos (a) * vec2 (1., 1.) + p.yx * sin (a) * vec2 (-1., 1.)\n#endif\n#define TF_ROTATE_MAT2(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define TF_ROTATE_X(a) mat3(1.0,    0.0, 0.0,       0.0, cos(a), -sin(a),   0.0, sin(a), cos(a))\n#define TF_ROTATE_Y(a) mat3(cos(a), 0.0, -sin(a),   0.0, 1.0, 0.0,   \t    sin(a), 0.0, cos(a))\n#define TF_ROTATE_Z(a) mat3(cos(a), -sin(a), 0.0,   sin(a), cos(a), 0.0,   \t0.0, 0.0, 1.0)\n//Отражение пространства p (float p...vec4 p)\n#define TF_MIRROR(p, d) p = abs(p) - (d)\n//Разбиение пространства на повторяющиеся. Возвращает id центра ячейки\n//float p - пространство 1D\n//vec2 p - пространство 2D\n//vec3 p - пространство 3D\n#define TF_REPLICA(p, d) \\\n\tfloor((p)/(d) + 0.5);\\\n\tp = mod((p) + 0.5*(d), d) - 0.5*(d)\n#define TF_REPLICA1(p, d) \\\n\tfloor((p)/(d) + 0.5);\\\n\tp = p - (d) * floor((p)/(d) + 0.5)\n//Разбиение пространства на повторяющиеся в диапазоне id от ida до idb включительно. Возвращает id центра ячейки\n#define TF_REPLICA_LIMIT(p, d, ida, idb) \\\n\tfloor((p)/(d) + 0.5);\\\n\tp = p-(d)*clamp(floor((p)/(d) + 0.5), ida, idb)\n#define TF_REPLICA_LIMIT_MIRROR(p, d, id) \\\n\tfloor((p=p-0.5*(d))/(d) + 0.5);\\\n\tp = p-(d)*clamp(floor((p)/(d) + 0.5), -id, id-1.)\n\n//Разбиение пространства на повторяющиеся сектора в плоскости vec2 p в полярной системе координат\n//Возвращает id сектора\t\n#define TF_REPLICA_ANGLE_POLAR(p, n, off)\\\n\tfloor(mod(atan(p.x, p.y) + off, 2.*PI)/(2.*PI/(n)) + 0.5);\\\n\tp = vec2(atan(p.x,p.y) + off, length(p.xy));\\\n\tp.x = mod(p.x + 0.5*(2.*PI/(n)), (2.*PI/(n))) - 0.5*(2.*PI/(n));\n//Разбиение пространства на повторяющиеся сектора в плоскости vec2 p в декартовой системе координат\n//Возвращает id сектора\t\n#define TF_REPLICA_ANGLE(p, n, off) \\\n\tfloor(mod(atan(p.x, p.y) + PI /(n) + off, 2.*PI)/(2.* PI /(n)));\\\n\tTF_ROTATE(p.xy, -off);\\\n\tTF_ROTATE(p.xy, (2.* PI /(n)) * floor(atan(p.x,p.y)/(2.* PI /(n)) + 0.5))\n//По p2.xy формирует координату винта вдоль p1 с шагом s \n#define TF_REPLICA_SPIN(p1, p2, s) \\\n\tp1 += atan(p2.x,p2.y) * (s);\\\n\tTF_REPLICA(p1, 2. * PI / 1. * (s))\n\n#define TF_REPLICA_SPIN_LIMIT(p1, p2, s, ida, idb) \\\n\tp1 += atan(p2.x,p2.y) * (s);\\\n\tTF_REPLICA_LIMIT(p1, 2. * PI / 1. * (s), ida, idb)\n\n//------------------------------------------------------------------------------------------------------\n//Возвращает 0 или 1 в зависимоти от знячения p относительно a или b\n//Операция ИЛИ(OR) \t: step1 + step2 (сложение)\n//Операция И(AND) \t: step1 * step2 (умножение)\n//Операция NOT \t\t: 1. - step\n//------------------------------------------------------------------------------------------------------\n//Возвращает 1 если p > a\n//    1-----\n//    |\n//    |\n//----0\n//    a\n#define TF_STEP_AFTER(p, a) step(a, p)\n\n//Возвращает 1 если p < a\n//----1\n//    |\n//    |\n//    0-----\n//    a\n#define TF_STEP_BEFORE(p, a) step(p, a)\n\n//Возвращает 1 если -a < p < a\n//    1------1\n//    |      |\n//    |      |\n//----0      0--------\n//   -a      +a\n#define TF_STEP_BETWEEN(p, a) TF_STEP_BEFORE(abs(p), a)\n//Возвращает 1 если a < p < b\n//    1------1\n//    |      |\n//    |      |\n//----0      0--------\n//    a      b\n#define TF_STEP_BETWEEN2(p, a, b) TF_STEP_AFTER(p, a)*TF_STEP_BEFORE(p, b)\n\n//------------------------------------------------------------------------------------------------------\n//Возвращает 0 или 1 в зависимоти от знячения p относительно a или b со сглаживанием [-0.5*eps, 0.5*eps]\n//Операция ИЛИ(OR) \t: smoothstep1 + smoothstep2 (сложение)\n//Операция И(AND) \t: smoothstep1 * smoothstep2 (умножение)\n//Операция NOT \t\t: 1. - smoothstep\n//------------------------------------------------------------------------------------------------------\n//Возвращает \n//\t0 если p < a-eps/2; \n//\t1 если p > a+eps/2;\n//  сглаживание от 0 до 1  между a-0.5*eps и a+0.5*eps\n//        1-----\n//       /      \n//      /       \n//     /        \n//----0         \n//    |eps|\n//      a \n#define TF_SMOOTHSTEP_AFTER(p, a, eps) smoothstep(a-0.5*eps, a+0.5*eps, p)\n\n//Возвращает \n//\t1 если p < a-eps/2; \n//\t0 если p > a+eps/2;\n//  сглаживание от 1 до 0  между a-eps/2 и a+eps/2\n//-----1\n//      \\\n//       \\\n//        \\\n//         0------\n//     |eps|\n//       a \n#define TF_SMOOTHSTEP_BEFORE(p, a, eps) (1.-smoothstep(a-0.5*eps, a+0.5*eps, p))\n\n//Возвращает \n//\t1 если p > -a+eps/2  и  p < a-eps/2; \n//\t0 если p < -a-eps/2 или p > a+eps/2; \n//  сглаживание от 0 до 1  между -a-eps/2 и -a+eps/2\n//  сглаживание от 1 до 0  между  a-eps/2 и  a+eps/2\n//        1-----1\n//       /       \\\n//      /         \\\n//     /           \\\n//----0             0------\n//    |eps|     |eps|\n//     -a         +a\n#define TF_SMOOTHSTEP_BETWEEN(p, a, eps) TF_SMOOTHSTEP_BEFORE(abs(p), a, eps)\n\n//Возвращает \n//\t1 если p > a+eps/2  и  p < b-eps/2; \n//\t0 если p < a-eps/2 или p > b+eps/2; \n//  сглаживание от 0 до 1  между a-eps/2 и a+eps/2\n//  сглаживание от 1 до 0  между b-eps/2 и b+eps/2\n//        1-----1\n//       /       \\\n//      /         \\\n//     /           \\\n//----0             0------\n//    |eps|     |eps|\n//      a         b\n#define TF_SMOOTHSTEP_BETWEEN2(p, a, b, eps) TF_SMOOTHSTEP_AFTER(p, a, eps)*TF_SMOOTHSTEP_BEFORE(p, b, eps)\n\n//Возвращает для момента u_time номер отрезка времени 0,1,2...\n//                -------\n//               |\n//        -------\n//       |\n//-------\n//   0       1       2\n#define TF_TIMER(u_time, intervalCount, intervalDuration) mod(floor(u_time/(intervalDuration)), (intervalCount))\n\n//-------------------Функции сочетания расстояний до объектов сцены\n//Сложение / Объединение / ИЛИ\nfloat OR(float distA, float distB) {\n\treturn min(distA, distB);\n\t//if (distB<distA) return distB; return distA;\n\t//return mix(distA, distB, step(distB, distA)); \n}\n//Умножение / Пересечение / И\nfloat AND(float distA, float distB) {\n\treturn max(distA, distB);\n\t//if (distB>distA) return distB; return distA;\n\t//return mix(distA, distB, step(distA, distB)); \n}\n// Минимальная функция сглаживания. Есть бесчисленное множество статей, но IQ объясняет это лучше всего здесь:\n// http://iquilezles.org/www/articles/smin/smin.htm\n//Гладкое сложение / Объединение / ИЛИ (k==0 без)\nfloat OR( float distA, float distB, float k ) {\n\tfloat h = clamp( 0.5 + 0.5*(distB-distA)/k, 0., 1. );\n\treturn mix( distB, distA, h ) - k*h*(1.-h);\n}\n//Гладкое умножение / Пересечение / И (k==0 без)\n#if 0\n\tfloat AND( float distA, float distB, float k ) {\n\t\tfloat h = clamp( 0.5 - 0.5*(distB-distA)/k, 0., 1. );\n\t\treturn mix( distB, distA, h ) + k*h*(1.-h);\n\t}\n#else\n\tfloat AND( float distA, float distB, float k ) {\n\t\treturn - OR (- distA, - distB, k);\n\t}\n#endif\n//Исключение / НЕ\nfloat NOT(float dist) {\n\treturn -dist;\n}\n//-------------------Функции сочетания объектов сцены\n\n//Сложение / Объединение / ИЛИ\n//object = OR(objectA, objectB)\nObject OR(Object objectA, Object objectB) {\n\tif (objectB.distance<objectA.distance) return objectB;\n\treturn objectA;\n}\n//Мягкое Сложение / Объединение / ИЛИ  \n//object = OR(objectA, objectB, k)\nObject OR(Object objectA, Object objectB, float k) {\n\tObject object = objectA;\n\tif (objectB.distance<objectA.distance) object = objectB;\n\tif (k!=0.) object.distance = OR(objectA.distance, objectB.distance, k);\n\treturn object;\n}\n//Умножение / Пересечение / И\n//object = AND(objectA, objectB)\nObject AND(Object objectA, Object objectB) {\n\tif (objectB.distance>objectA.distance) return objectB;\n\treturn objectA;\n}\n//Мягкое Умножение / Пересечение / И\n//object = AND(objectA, objectB, k)\nObject AND(Object objectA, Object objectB, float k) {\n\tObject object = objectA;\n\tif (objectB.distance>objectA.distance) object = objectB;\n\tif (k!=0.) object.distance = AND(objectA.distance, objectB.distance, k);\n\treturn object;\n}\n//Исключение / НЕ\n//object = NOT(objectA)\nObject NOT(Object object) {\n\tobject.distance = -object.distance;\n\treturn object;\n}\n","name":"Common","description":"","type":"common"}]}