{"ver":"0.1","info":{"id":"XsdBzH","date":"1524147681","viewed":303,"name":"Jean Claude Van Sprite","username":"crundle","description":"Building Spritesheets from VidFrames\nResizing requires restart of timer and video, because the buffer gets resized, but not the contents...\nAlso, likes to glitch out because the video is not in perfect sync. - so if it does, reset the time until it works","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["video","sprite","vandamme","spritesheet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DEBUG_BUFA\n\n// by FabriceNeyret2 - https://www.shadertoy.com/view/MtyXRW\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel1, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n\nfloat message(vec2 U, float b) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    if(b==0.) { C(87);C(97);C(105);C(116);C(105);C(110);C(103);C(32);C(102);C(111);C(114);C(32); }\n    else if(b==1.)  { C(86);C(97);C(110);C(32);C(68);C(97);C(109);C(109);C(101);C(46);C(46);C(46); }\n    else { C(68);C(65);C(78);C(67);C(69);C(33);C(32);  }\n    //C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? 0. : T.x; // or: endMsg;\n}\n\n\n/////////////\n\nvec3 getVanDamme(vec3 bg, vec2 uv, vec2 p, vec2 s) {\n    if(any(lessThanEqual(uv,p))||any(greaterThan(uv,p+s))) return bg; //clamp to box\n    \n    //get normalized uv coords\n    vec2 vuv = (uv-p)/s;\n    //our current frame\n    float frame = clamp(trunc((FPS)*trunc( (triWave(iTime*2.)*FPS+FPS) )/(FPS*2.) ),0.,FPS-1.);  \n    //our uv in the sprite cell for the current frame\n    vec2 fuv = vec2((1./NUM_FRAMES)*mod(frame,NUM_FRAMES),(1./NUM_FRAMES)*trunc(frame/NUM_FRAMES) )+vuv/NUM_FRAMES;\n    //fetch texture\n    vec3 fg = texture(iChannel0,fuv).rgb;\n    \n    //chroma key by iq - https://www.shadertoy.com/view/XsfGzn\n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );\n    float dg = fg.g; \n    fg.g = min( fg.g, maxrb*0.8 ); \n    fg += dg - fg.g;\n    return mix(fg, bg, k);\n\n}\n\nfloat box(vec2 uv, vec2 p, vec2 s) {\n    return min(step(abs(uv.x-p.x),s.x),step(abs(uv.y-p.y),s.y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n    \n    #ifndef DEBUG_BUFA\n    \n    vec3 col =vec3(uv,0);\n    if(iTime<START_SECONDS+2.) { //loading screen!\n        col = mix( col, vec3(0.5), box(uv,vec2(0.5,0.465),vec2(.4,0.26)) );\n        \n        col = mix( col, vec3(0.25), box(uv,vec2(0.5,0.25),vec2(.35,0.025)) );\n        float bar = clamp(iTime/START_SECONDS,0.,1.);\n        col = mix( col, vec3(1), box(uv,vec2(0.5,0.25),vec2(.34*bar,0.02)) );\n        float waitframe = box(uv,vec2(0.3,0.5),vec2(.15,0.2));\n        col = mix( col, vec3(0.25), waitframe );\n        col = mix(col, getVanDamme(col,uv,vec2(0.15,.3),vec2(.41)), waitframe);\n        float c=message((uv-vec2(0.45,.5))*16.-vec2(-.5,.0),0.);\n        c+=message((uv-vec2(0.45,.4))*16.-vec2(-.5,.0),1.);\n        col=mix(col,vec3(1.),c);\n    } else { // DANCE!\n        col=mix(col,vec3(1.)*(1.-uv.y),box(uv,vec2(.5,.2),vec2(.5,.2)));\n        float vandammes = 10.;\n        for(float i = 0.; i<vandammes; i++) {\n            float j = i-(vandammes/4.);\n            col =getVanDamme(col, uv,vec2(0.35+sin(j*2.*PI*(1./vandammes))*.2,0.3+cos(j*PI*2.*(1./vandammes))*.05),vec2(.4));\n        }\n        col=getVanDamme(col,uv,vec2(.35,.15),vec2(.4));\n        float c=message((uv-vec2(0.3,.7))*8.-vec2(-.5,.0),2.);\n        col=mix(col,vec3(1.),c);\n    }\n    \n    fragColor=vec4(col,1.0);\n    //shader ends here\n    \n    #else\n    //for debugging, obviously\n\tvec3 col = texture(iChannel0,uv).rgb;\n    fragColor = vec4(col,1.0);   \n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//building the VanDamme Buffer\n//render frames as a spritesheet, at appropriate times - see Common\n\n//somehow works best without Video-Sound? weird but true...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\t \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float fdelta = 1./FPS; //one frame\n    \n    bool inTime = (iChannelTime[1]>=START_SECONDS&&iChannelTime[1]<=START_SECONDS+1.); //are we at the right Timecode? Warning: magic number, 1 second sequence duration\n    bool intro = iTime <= 4. || (iTime>=30. && iTime<=31.);// to get some sprites for the loading screen\n    \n    // fill spritesheet once, then wait until we hit the right sequence, wait again\n    if( intro || inTime ) {\n\t\t\n        float fTime = iChannelTime[1]-START_SECONDS; //our sequence should start at zero\n    \tvec2 fuv= uv*NUM_FRAMES; //scale uv\n        \n        //which sprite are we drawing? - TODO: clean this up!\n    \tfloat fx=mod(trunc(fTime*FPS),NUM_FRAMES) ;\n    \tfloat fy=mod(trunc(trunc(fTime*FPS)/NUM_FRAMES),NUM_FRAMES);\n        \n        //clamp away overdraw\n    \tfloat cfx = 1.-max( step(fx,fuv.x-1.) ,1.- step(fx,fuv.x) );\n    \tfloat cfy = 1.-max( step(fy,fuv.y-1.) ,1.- step(fy,fuv.y) );\n    \tfloat cf = min(cfx,cfy)*(1.-step((iTimeDelta*4.)*FPS, mod(iTime*FPS,1.)));\n        \n        //fetch bufferpixel, clear on first frame\n    \tvec4 col = iFrame==0?vec4(0):texture(iChannel0,uv);\n        //fetch video\n    \tvec4 vid = texture(iChannel1, mod(fuv,1.));\n        //draw video in sprite cell\n    \tfragColor = col*(1.-cf)+vid*cf;\n    } else {\n        //just copy it all, clear on first frame\n        vec4 col = iFrame==0?vec4(0):texelFetch(iChannel0,ivec2(fragCoord),0);\n        fragColor = col;\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Frames per Second for the Spritesheet - use sensible values, FPS should be NUM_FRAMES^2\n#define FPS 16. \n\n//Number of Rows/Columns in Spritesheet - use sensible values\n#define NUM_FRAMES 4.\n\n//Time to start drawing a 2sec Sprite Sequence - using the Video-Timecode \n#define START_SECONDS 67.\n\n#define PI 3.14159265359\n\nfloat triWave(float a) {\n    return abs( 2. - mod(a,4.) )-1.;\n}\n\n\n","name":"Common","description":"","type":"common"}]}