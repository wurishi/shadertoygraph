{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define t  iTime\nvec4 ot; \nfloat ss=.6;\nfloat g=1.3;\nvec3 CSize = vec3(1.0);\nvec3 C1 = vec3(1.0);\n\n\nvec3 tsqr(vec3 p) \n{\nif(p.x==0. && p.y==0.)return vec3(-p.z*p.z,0.,0.);\nfloat a=1.-p.z*p.z/dot(p.xy,p.xy);\nreturn vec3((p.x*p.x-p.y*p.y)*a ,2.*p.x*p.y*a,2.*p.z*length(p.xy));\n}\nvec3 talt(vec3 z){return vec3(z.xy,-z.z);}\n\nfloat map( vec3 p )\n{\n\tfloat scale = 1.0;\n\n\tot = vec4(1000.0); \n\n\tvec3 p0=p;\n\t\n\tfor( int i=0; i<8;i++ )\n\t{\n\n\t//BoxFold\n\t\t\n        p = clamp(p,-CSize,  CSize) * 2.0 - p;\n       \tp.xyz = C1-abs(abs(p.zyx+CSize)-C1)-CSize;\n\t\t\n\t//Trap\t\n\t\tfloat r2 = dot(p,p);\n        ot = min( ot, vec4(abs(p),r2) );\n\t\t\n\t//SphereFold and scaling\t\n\t\t\n\t\tfloat k = max(ss/r2,.1)*g;\n\n\t\tp     *= k;\n\t\tscale *= k;\n\n\t//Triplex squaring and translation \n          \n            \n\t\tp = tsqr(p)-vec3(.9,0.8,.4);//talt(tsqr(p))-.6;//\n        scale *= 2.*(length(p));//??? was intended to be before previous line   \n\n\n\t}\nreturn .85*length(p)/scale;\n\n}\n\nfloat trace( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 100.0;\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float t = 0.0;\n    for( int i=0; i<200; i++ )\n    {\n\n        if( abs(h)<precis*(1.+.8*t) ) continue;//break;//\n        //MaxIter=8;\n        t += h;\n\th = map( ro+rd*t );\n    }\n\n   \tif( t>maxd ) t=-1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3  eps = vec3(.0001,0.0,0.0);\n\tvec3 nor;\n\tnor.x = map(pos+eps.xyy) - map(pos-eps.xyy);\n\tnor.y = map(pos+eps.yxy) - map(pos-eps.yxy);\n\tnor.z = map(pos+eps.yyx) - map(pos-eps.yyx);\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n\tfloat time = iTime*0.25 + 0.01*iMouse.x;\n   \n\n\tvec2 m = (iMouse.xy/iResolution.xy-.5)*6.28;\n\tm+=vec2(cos(0.15*iTime),cos(0.09*iTime));      \n\t\n    // camera\n\n\n\tvec3 ta = vec3( 3.*cos(1.2+.41*time), 0.6 + 0.10*cos(0.27*time), 3.*cos(2.0+0.38*time) );\n\tvec3 ro = ta+ 2.*vec3( cos(m.x)*cos(m.y), sin(m.y), sin(m.x)*cos(m.y)); \n\t\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0., 1.,0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n\n    // trace\t\n\tvec3 col = vec3(0.0);\n\tfloat t = trace( ro, rd );\n\tif( t>0.0 )\n\t{\n\t\tvec4 tra = ot;\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\t\n\t\t// lighting\n        vec3  light1 = vec3(  0.577, 0.577, -0.577 );\n        vec3  light2 = vec3( -0.707, 0.000,  0.707 );\n\t\tfloat key = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( light2, nor ), 0.0, 1.0 );\n\t\tfloat amb = (0.7+0.3*nor.y);\n\t\tfloat ao = pow( clamp(ot.w*2.0,0.0,1.0), 1.2 );\t\t\n                vec3 brdf = vec3(ao)*(.4*amb+key+.4*bac);\n\n        // material\t\t\n\t\tvec3 rgb = vec3(1.0);\t\t\n\t\t//rgb =(0.4*abs(sin(4.5+(vec3(ot.w,ot.y*ot.y,2.-ot.w))))+0.6*sin(vec3(-0.5,-0.2,0.8)+1.3+ot.x*12.5))*.75 + .15;\n\t\trgb =(0.4*abs(sin(2.5+(vec3(ot.w,ot.y*ot.y,2.-ot.w))))+0.6*sin(vec3(-0.5,-0.6,0.8)+1.7+ot.x*12.5))*.75 + .15;\n\t\tcol = rgb*brdf*exp(-(0.1+0.1*sin(.1*iTime))*t);\n\t}\n\n\tcol = sqrt(col);\n\t\n\t\n\t\n\tfragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsS3zc","date":"1391869638","viewed":311,"name":"Floral hybrid","username":"guil","description":"A kind of JuliaBulb/JuliaBox hybrid\nRaymarching and rendering based on IQ's code.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal"],"hasliked":0,"parentid":"","parentname":""}}