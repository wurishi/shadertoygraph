{"ver":"0.1","info":{"id":"NllGDn","date":"1621902350","viewed":143,"name":"warrior lissajous","username":"wj","description":"another audio visulaization experiment..","likes":4,"published":1,"flags":96,"usePreview":0,"tags":["audioreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// warrior lissajous\n// by wj\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// note: the DECAY factor in the Common tab has to be manually adjusted for\n// the actually used canvas size..\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // render cached buffer B to screen\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel2, uv);\n    fragColor = vec4(col.rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// use previous output as input for current run\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel3, uv);\n        \n    fragColor = vec4(col.rgb, 1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltfSRf","filepath":"https://soundcloud.com/theglitchmob/the-glitch-mob-warrior","previewfilepath":"https://soundcloud.com/theglitchmob/the-glitch-mob-warrior","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// store output in iChannel3 so it can be used as input for next run\n\n\nfloat inCircle(vec2 uv, vec2 pos, float rad) {\n    float l = length(pos - uv);\n//    return l <= rad ? 1. : 0.;\n    return l <= rad ? (rad*1.5 - l)/rad : 0.;\n//    return l <= rad ? l/rad : 0.;\n}\n\nvec3 hsb2rgb( in vec3 c ){\n    //  Function from IÃ±igo Quiles\n    //  https://www.shadertoy.com/view/MsS3Wc\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid rotate(inout vec2 q , in float rotation) {\n    q -= .5;\n    q *= mat2(cos(rotation), sin(rotation), -sin(rotation), cos(rotation));\n    q += .5;\n    q = q* iResolution.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // fade previous output \n    vec4 col = texture(iChannel2, fragCoord.xy / iResolution.xy);\n    \n    col *= DECAY;\n\n    // and then draw new stuff on top\n \tvec2 uv = fragCoord.xy;\n\tfloat radius = .008 * iResolution.y;\n    float weight = .25;\n    float t = iTime;\n\n    float maxFreq = 16.;\n    for (float f = 0.; f<maxFreq; f++) {\n       float fx = f/maxFreq;             \n       float m = 20.; // max number of \"particles\"\n       float dt = 4.; // time offset between \"particles\"\n\n       for (float i = 0.; i<m; i++, t+=dt) {\n            float a = texture( iChannel1, vec2(.1 + .8*fx, .25) ).x;\n            vec2 q = vec2(sin(t*.8) * .5*a + .5, .5 + a*.2);\n\n            rotate(q, t*.0084);\n\n            vec4 c= (vec4( hsb2rgb( vec3(fx, 1., 1.) ), 1.) +  texture( iChannel0, vec2(.1, i/m))) *.5;\n            col += inCircle(uv, q, radius)*weight * c ;\n       } \n    }       \n   fragColor = clamp(col, vec4(0., 0., 0., 1.), vec4(1., 1., 1., 1.));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// unfortunately the braindead shadertoy API gives no access \n// to the actually used canvas size so this tweaking has to be \n// done manually for the actually used size..\n\nconst float DECAY = 0.96; // about right for a 704px width canvas\n//const float DECAY = 0.86; // about right for a 2560px width canvas","name":"Common","description":"","type":"common"}]}