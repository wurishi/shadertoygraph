{"ver":"0.1","info":{"id":"cdlBRX","date":"1689101427","viewed":362,"name":"Interactive water","username":"ncuxonaT","description":"Interactive water simulation with barriers","likes":28,"published":1,"flags":32,"usePreview":0,"tags":["ripples","simulation","interactive","water","liquid"],"hasliked":0,"parentid":"ctlSzs","parentname":"water_old"},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DEBUG\n\nvec3 getNormal(vec2 uv)\n{\n    vec3 e = vec3(1.0 / iChannelResolution[1].xy, 0.0);\n    vec4 S;\n    S[0] = texture(iChannel1, uv + e.xz).r;\n    S[1] = texture(iChannel1, uv - e.xz).r;\n    S[2] = texture(iChannel1, uv + e.zy).r;\n    S[3] = texture(iChannel1, uv - e.zy).r;\n    S *= HEIGHT_SCALE * 0.5;\n    S /= iChannelResolution[1].xxyy;\n\n    return normalize(cross(vec3(e.x, 0.0, S[0]-S[1]), vec3(0.0, e.y, S[2]-S[3])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uv_tex = fragCoord.xy / iChannelResolution[1].xy * TEX_SCALE;\n    \n    vec3 col = vec3(0.0);\n    \n    #ifdef DEBUG    \n        vec3 n;\n        n.xy = texture(iChannel0, uv).ba;\n        n.xy = n.xy * 2.0 - vec2(1.0);\n        n.z = sqrt(1.0 - dot(n.xy, n.xy));\n        \n        col = n * 0.5 + vec3(0.5);\n        col = texture(iChannel0, uv).rrr;\n \n    #else\n        vec4 asample = texture(iChannel0, uv).rgba;\n        float water_height = asample.r * 2.0 - 1.0;\n    \n        vec3 n;\n        n.xy = asample.ba;\n        n.xy = n.xy * 2.0 - vec2(1.0);\n        n.z = sqrt(1.0 - dot(n.xy, n.xy));\n        vec3 v = vec3(0.0, 0.0, 1.0);\n        \n        vec2 offset = refract(-v , n , 0.75).xy;\n        \n        float local_height = texture(iChannel1, uv_tex).r;\n        local_height = local_height * HEIGHT_SCALE - HEIGHT_SCALE * 0.5;\n        \n        offset *= clamp((water_height - local_height) * 2.0, 0.0, 1.0);//smooth transition\n        //fragColor.rgb = vec3(offset * 0.5 + vec2(0.5), 0.0) ; return;\n        \n        float offset_height = texture(iChannel1, uv_tex + offset).r;     \n        offset_height = offset_height * HEIGHT_SCALE - HEIGHT_SCALE * 0.5;\n        \n        float depth = max(0.0, max(local_height , water_height) - offset_height);\n        float water_border_factor = float(depth > 0.0);\n        offset = mix(vec2(0.0), offset ,  water_border_factor);\n        \n        depth = length(vec3(offset, depth)); \n\n        float wetness = clamp(((local_height - water_height) - 0.4) * 1.5, 0.0, 1.0);\n        //fragColor.rgb = vec3(wetness) ; return;\n        \n\n               \n        \n        col = texture(iChannel3, (uv_tex + offset) * 4.0 ).rgb;\n        col = pow(col, vec3(2.2));\n        col *= wetness * 0.8 + 0.2;\n        \n        vec3 stone_normal = getNormal(uv_tex + offset);\n        //fragColor.xyz = stone_normal * 0.5 + vec3(0.5);return;\n        \n        vec3 env_light = textureLod(iChannel2, stone_normal, 3.0).rgb;   \n        env_light = pow(env_light, vec3(2.2));\n        col *= env_light;\n\n        \n        col *= mix(WATER_COLOR , vec3(1.0), exp(-depth));\n        col *= exp(-depth);\n        \n        n = mix(stone_normal, n, water_border_factor);\n        float roughness = wetness;\n        //fragColor.xyz = n * 0.5 + vec3(0.5);return;\n\n        vec3 ref = reflect(-v, n);\n        float fresnel = 0.01 + 0.99 * clamp( pow(1.0 - dot(v,n), 5.0), 0.0, 1.0);\n        fresnel *= float(ref.z > 0.0);\n        vec3 reflection = textureLod(iChannel2, ref, roughness * 4.0).rgb;\n        reflection = pow(reflection, vec3(2.2));\n        col = mix(col, reflection, fresnel);\n        //col = vec3(fresnel);\n        //col = reflection * fresnel;\n        \n        \n        \n        col = vec3(1.0)  - exp(-EXPOSURE * col);\n        col = pow(col, vec3(1.0 / 2.2));\n        \n    #endif\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; \n    vec2 uv_tex = fragCoord.xy / iChannelResolution[1].xy * TEX_SCALE;\n    vec2 c = texture(iChannel0, uv).xy;\n   \tvec3 e = vec3(STEP / iResolution.xy, 0.0);\n    vec4 s;\n    s[0] = texture(iChannel0, uv - e.xz).x;\n    s[1] = texture(iChannel0, uv + e.xz).x;\n    s[2] = texture(iChannel0, uv - e.zy).x;\n    s[3] = texture(iChannel0, uv + e.zy).x;\n\n   \tfloat d = - 2.0 * c.y + s[0] + s[1] + s[2] + s[3] - 1.0;\n    \n    float mouse_substract = clamp(length(iMouse.xy - gl_FragCoord.xy) * 0.02, 0.0 ,1.0);\n    mouse_substract = -1.0 + mouse_substract * mouse_substract;\n    d = (iMouse.z < 0.0) ? d : mix(d, mouse_substract, float(mouse_substract < 0.0));\n    \n   \td *= WATER_DECAY;    \n    d *= float(iFrame >= 5);\n    \n    float height_sample = texture(iChannel1, uv_tex).x * HEIGHT_SCALE - HEIGHT_SCALE * 0.5;\n    \n    //d = mix(d, 0.0, float(d <= height_sample));\n    d = mix(d , 0.0, clamp((height_sample - d), 0.0 ,1.0));\n    \n    \n    \n    vec2 grad = vec2(s[1] - s[0], s[3] - s[2]);\n    grad *= 0.5;\n    grad /= iChannelResolution[0].xy;\n    grad *= WATER_NORMAL_SCALE;\n\tvec3 p1 = vec3( e.x , 0.0 , grad.x);\n\tvec3 p2 = vec3( 0.0 , e.y , grad.y);\n\tvec3 N = cross(p1, p2);\n\tN = normalize(N);\n\tgrad = N.xy;\n    \n    grad = mix(grad, vec2(0.0), float(d <= height_sample));\n    grad = grad * 0.5 + vec2(0.5);\n    \n    d = d * 0.5 + 0.5;\n \tfragColor = vec4(d, c.x, grad);\n}\n   ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define WATER_DECAY\t\t\t0.99\n#define STEP\t\t\t\t1.0\n#define HEIGHT_SCALE\t\t8.0\n#define WATER_NORMAL_SCALE\t8.0\n\n#define WATER_COLOR\t\t\tvec3(0.2, 0.8, 1.0)\n#define EXPOSURE\t\t\t8.0\n\n#define TEX_SCALE\t\t\t1.0","name":"Common","description":"","type":"common"}]}