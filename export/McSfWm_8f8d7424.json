{"ver":"0.1","info":{"id":"McSfWm","date":"1725015565","viewed":73,"name":"Aurora lights","username":"goLLuMz","description":"lights","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 100.0\n#define PI 3.1415926535\n\n#define u_time iTime\n#define u_resolution iResolution\n\nfloat random(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x)+tri(p.y),tri(p.y+tri(p.x)));}\n\nfloat fbmAurora(vec2 p, float spd) {\n    float z = 1.8;\n    float z2 = 2.5;\n    float rz = 0.;\n    p *= mm2(p.x * 0.06);\n    vec2 bp = p;\n    for (float i = 0.; i < 5.; i++ ) {\n        vec2 dg = tri2(bp*1.85)*.75;\n        dg *= mm2(u_time*spd);\n        p -= dg/z2;\n\n        bp *= 1.3;\n        z2 *= .45;\n        z *= .42;\n        p *= 1.21 + (rz-1.0)*.02;\n\n        rz += tri(p.x+tri(p.y))*z;\n        p *= mm2(u_time * 0.01); // Smoother rotation\n    }\n    return clamp(1. / pow(rz * 20., 1.3), 0.,1.);\n}\n\nvec4 aurora(vec3 rd) {\n    vec4 col = vec4(0);\n    vec4 avgCol = vec4(0);    \n\n    for (float i=0.; i < 60.; i++) { // Increased sample count for smoother result\n        float of = 0.006*random(gl_FragCoord.xy)*smoothstep(0.,15., i);\n        float pt = ((.8+pow(i,1.4)*.002)) / (rd.y * 2. + 0.4);\n        pt -= of;\n        vec3 bpos = 5.5 + pt * rd;\n        vec2 p = bpos.zx;\n        float rzt = fbmAurora(p, 0.02); // Reduced speed for smoother movement\n        vec4 col2 = vec4(0,0,0, rzt);\n        col2.rgb = (sin(1.-vec3(2.15,-.5, 1.2) +i * 0.043) * 0.5 + 0.5)*rzt;\n        avgCol = mix(avgCol, col2, .5);\n        col += avgCol * exp2(-i*0.065 - 2.5) * smoothstep(0., 5., i);\n    }\n    col *= (clamp(rd.y*15.+.4,0.,1.));\n\n    return smoothstep(0.,1.1,pow(col,vec4(1.))*1.5);\n}\n\nvoid setSkyColor(vec2 uv, out vec3 color, vec3 dir) {\n   color = mix(vec3(0.006,0.026,0.095), vec3(0.007,0.011,0.035), uv.y);\n   color += aurora(dir).rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = fragCoord.xy / u_resolution.xy;\n  vec2 p = (-u_resolution.xy + 2.0 * gl_FragCoord.xy) / u_resolution.y;\n\n  vec3 ro = vec3(0.0, 1.2, 0.0);\n  vec3 rd = normalize(vec3(p.xy, 1.064));\n\n  vec3 color = vec3(0.0);\n  setSkyColor(uv, color, rd);\n\n  color = pow(color, vec3(1. / 2.2)); // gamma correction\n  color = smoothstep(0., 1., color);\n\n  fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}