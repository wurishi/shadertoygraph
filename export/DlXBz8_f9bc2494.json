{"ver":"0.1","info":{"id":"DlXBz8","date":"1692563983","viewed":42,"name":"Bloom Process","username":"VEShaderStuff","description":"Just a bloom shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Sample the original scene color\n    vec4 originalColor = texture(iChannel0, fragCoord / iResolution.xy);\n\n    // Threshold to isolate bright parts\n    float threshold = 0.8;\n    vec3 brightParts = step(threshold, originalColor.rgb);\n\n    // Blur the bright parts\n    vec3 blurredBrightParts = vec3(0.0);\n    float blurSize = 1.0;\n    for(float i = -4.0; i <= 4.0; i += 0.5) {\n        for(float j = -4.0; j <= 4.0; j += 0.5) {\n            vec2 offset = vec2(i, j) * blurSize;\n            blurredBrightParts += texture(iChannel0, (fragCoord + offset) / iResolution.xy).rgb;\n        }\n    }\n    blurredBrightParts /= 200.0;\n\n    // Combine the original and blurred bright parts\n    vec3 finalColor = originalColor.rgb + blurredBrightParts;\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}