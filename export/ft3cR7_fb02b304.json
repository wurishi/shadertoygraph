{"ver":"0.1","info":{"id":"ft3cR7","date":"1659433130","viewed":77,"name":"happy birthday seb","username":"hendos43","description":"A simple text renderer using the character map texture. Characters are represented by codes between 0x00 and 0xFF (0 and 255). Characters in the map start in the bottom left corner and end in the top right corner.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["text","rendering"],"hasliked":0,"parentid":"3sdcRH","parentname":"Text Renderer"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////////////////////////////////////////////\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n/////////////////////////////////////////////////////////////////////\n\n\n//thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n//and thanks to otaviogood for font texture\n#define C(c) U.x-=.5; O+= char(U,64+c)\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\n\nvec4 addText( out vec4 O, vec2 uv )\n{\n\n    initRandomGenerator(uv);\n    vec3 col = vec3(random());\n\n\n    O = vec4(0.0);\n    uv /= iResolution.y;\n    vec2 position = vec2(-sin(iTime)/2.+.25, -cos(iTime)/2.+.25);\n    float FontSize = 8.;\n    vec2 U = ( uv - position)*64.0/FontSize;\n    \n    U.y += (col.y / 6.);\n    C(8);C(1);C(16);C(16);C(25);C(-32);C(2);C(9);C(18);C(20);C(8);C(4);C(1);C(25);C(-32);C(19);C(5);C(2);C(-31);\n    O = O.xxxx;\n    return O;\n}\n\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n\n    vec4 J = addText(O, uv);\n\n    \n        // Normalized pixel coordinates (from 0 to 1)\n    uv = uv/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));    \n\n    // Draw backdrop\n    O = vec4(col,1.0);\n\n    for (float i=0.; i<30.; i++)\n    {\n    \n    \n        // Use 2-color chroma key to find alpha\n        vec2 t_uv = vec2(2.4,1.)*uv + vec2((-.1*i*cos(iTime)/2.)-.5,sin(iTime)/2.);\n        if (t_uv.x < 0. || t_uv.x > 1.) continue;\n        vec4 ipix = texture(iChannel1, t_uv);\n        vec4 key = texture(iChannel1, vec2(0.,1.));\n        vec4 key2 = texture(iChannel1, vec2(1.,1.));\n        float alpha = 1.*distance(ipix, key)+1.*distance(ipix, key2);\n        alpha = clamp(alpha,0.,1.);\n        \n        \n        \n        // Output to screen\n        \n        \n        O = ipix*alpha + O*(1.-alpha);\n        \n        \n    }\n    \n    //make some delicious OJ\n    O = O + (O - J);\n    \n}\n\n\n//line 12 -> x,y coordinates of text, counted from left down corner\n//line 13 -> higher value = greater font size\n//line 15 -> Every argument is another char\n\n\n\n","name":"Image","description":"","type":"image"}]}