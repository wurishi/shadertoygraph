{"ver":"0.1","info":{"id":"NlKBzh","date":"1664048038","viewed":181,"name":"Twin Fraction Spirals","username":"ChunderFPV","description":"Visual decimal to fraction conversion.  Two lines segmented into spirals.  One for the numerator, one for the denominator.  Mouse y to zoom.  600 sec to traverse number line.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["math","spiral","logarithmic","fraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 2.5\n#define PI radians(180.0)\n#define TAU (PI*2.0)\n#define CS(a) vec2(cos(a), sin(a))\n#define PT(u,r) smoothstep(0.0, r, r-length(u))\n#define CL(x,a,b) smoothstep(0.0,1.0,(2.0/3.0)*(x-a)/(b-a)+(1.0/6.0))*(b-a)+a // https://www.shadertoy.com/view/Ws3Xzr\n\n// denominator spiral, use 1/n for numerator\n// ( screen xy, spiral exponent, decimal value, line width, hardness, rotation )\nfloat ds(vec2 u, float e, float n, float w, float h, float ro)\n{\n    float ur = length(u); // unit radius\n    float sr = exp(log(ur)/e); // spiral radius\n    float a = round(sr)*n*TAU; // segment arc\n    vec2 xy = CS(a+ro)*ur; // xy coords\n    float l = PT(u-xy, w); // line\n    float s = mod(sr+0.5, 1.0); // radial smooth\n    return l*h*min(s, 1.0-s); // blend\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec4 m = iMouse; m.xy = m.xy*2.0/R-1.0; // ±1x, ±1y\n    float z = (m.z > 0.0) ? pow(1.0-abs(m.y), 2.0*sign(m.y)): 1.0; // zoom from mouse y\n    float sec = 600.0; // time to cycle through number line\n    float range = ((mod(iTime, sec)/sec)-0.5)*4.0; // -2 to +2\n    float n = (abs(range) > 1.0) ? 1.0/(2.0*sign(range)-range): range; // n from time\n    float az = pow(50.0, n);\n    az = clamp(az, CL(az, 1e-16, 1e-15), CL(az, 1e+17, 1e+18)); // clamp at precision lost\n    \n    vec2 uv = (U-0.5*R)/R.y; // screen coords with cartesian and aspect ratio fix applied\n    vec2 u = uv*SCALE*z*az; // new screen coords with zoom applied\n    float px = length(fwidth(u)*0.7); // pixel size (line radius)\n    vec3 c = vec3(0); // background color\n    \n    float l = length(u); // hypot of xy\n    float r = pow(l, 1.0/n); // spiral radius\n    float sa = round(r)*TAU; // segmented spiral arc\n    float g = min(abs(n), abs(1.0/n)); // smooth gradient of n\n    c += max(1.0-mod(atan(u.x, -u.y)-sa/n, TAU)/PI, 0.0)*vec3(1.0, g, 1.0-g)*0.1; // num trail\n    c += max(1.0-mod(atan(-u.x, -u.y)+sa*n, TAU)/PI, 0.0)*vec3(1.0-g, g, 1.0)*0.1; // den trail\n    c *= texture(iChannel0, CS(PI/2.0+(1.0/n))*length(uv)*g*z).xyz*3.0; // multiply with texture\n    c *= max(cos(r/n), 0.4)*2.0; // brightness variation\n    float d = mod(r+0.5, 1.0); // gradient to smooth edges\n    c *= min(d, 1.0-d)*3.0; // radial smooth\n    \n    float ro = -(PI/2.0); // rotation\n    c += ds(u, n, 1.0/n, px*3.0, 2.0, ro); // numerator\n    c += ds(u, n, n, px*3.0, 2.0, ro); // denominator\n    c += ds(u, n, 1.0/n, px*30.0, 0.6, ro)*vec3(0.9, 0.6, 0.0); // num glow\n    c += ds(u, n, n, px*30.0, 0.6, ro)*vec3(0.1, 0.4, 1.0); // den glow\n    \n    c = min(c, pow(l/az, -0.25/n)); // dark gradient\n    if (n > 0.0 && r < 1.0) c *= min(20.0/(floor(1.0/n)-l), 1.0); // fade transition at 0\n    \n    u *= exp(log(l)/n*0.5); // warp coords\n    vec3 gl = vec3(0.5, 0.3, 0.5)*length(u)*0.005; // form glow\n    if (n < 0.0 && r > 1.0) c = max(c, min(gl, 10.0*abs(n))); // add glow\n    \n    c += digitIn(vec3(0), U/R.y*3.0, 44.0, n); // display decimal\n    \n    O = vec4(c*sqrt(c)*2.0, 1.0); // draw\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// debugging font by valalalalala: https://www.shadertoy.com/view/WtGyWD\nconst int CHARACTERS[14] = int[14](31599,9362,31183,31207,23524,29671,29679,30994,31727,31719,1488,448,2,3640);\nfloat digitIsOn( int digit, vec2 id ) {   \n    if ( id.x < .0 || id.y < .0 || id.x > 2. || id.y > 4. ) return .0;\n    return floor( mod( float( CHARACTERS[ int( digit ) ] ) / pow( 2., id.x + id.y * 3. ), 2. ) );\n}\nfloat digitSign( float v, vec2 id ) {\n    return digitIsOn( 10 - int( ( sign( v ) - 1. ) * .5 ), id );\n}\nint digitCount( float v ) {\n    return int( floor( log( max( v, 1. ) ) / log( 10. ) ) );\n}\nfloat digitFirst( vec2 uv, float scale, float v, int decimalPlaces ) {\n    vec2 id = floor( uv * scale );\n\n    if ( .0 < digitSign( v, id ) ) return 1.;\n    v = abs( v );\n    \n    int digits = digitCount( v );\n    float power = pow( 10., float( digits ) );\n    \n    float offset = floor( .1 * scale );\n    id.x -= offset;\n    \n    float n;\n    for ( int i = 0 ; i < 33 ; i++, id.x -= offset, v -= power * n, power /= 10. ) {\n        n = floor( v / power );\n        if ( .0 < digitIsOn( int( n ), id ) ) return 1.;   \n        if ( i == digits ) {\n            id.x -= offset;\n            if ( .0 < digitIsOn( int( 12 ), id ) ) return 1.;\n        }  \n        if ( i >= digits + decimalPlaces ) return .0;    \n    }  \n    return .0;\n}\nfloat digitFirst( vec2 uv, float scale, float v ) {\n    return digitFirst( uv, scale, v, 3 );\n}\nvec3 digitIn( vec3 color, vec3 fontColor, vec2 uv, float scale, float v ) {\n    float f = digitFirst( uv, scale, v );\n    return mix( color, fontColor, f );\n}\nvec3 digitIn( vec3 color, vec2 uv, float scale, float v ) {\n    return digitIn( color, vec3(1.), uv, scale, v );\n}","name":"Common","description":"","type":"common"}]}