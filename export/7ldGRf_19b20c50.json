{"ver":"0.1","info":{"id":"7ldGRf","date":"1636494120","viewed":240,"name":"Audio Analyzer Demo","username":"DanielXMoore","description":"Demonstration of how to get time domain and frequency domain data out of audio channel data.\n\nThe frequency spectrum values are at y=0.0 and the time domain values are at y=1.0.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","audio","demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float dy = 0.5 / iResolution.y;\n    float tv = texture(iChannel0, vec2(uv.x, 1.)).x;\n    float fv = texture(iChannel0, vec2(uv.x, 0.)).x;\n    vec3 col = vec3(0.);\n\n    // Time domain data\n    if (!(uv.y + dy < tv) && (uv.y - dy < tv)) {\n        // Color the pixel that crosses the time domain sample value\n        col += 1.;\n    }\n    \n    // Frequency domain data\n    if (uv.y < fv) {\n        col.gb += fv + 0.2;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}