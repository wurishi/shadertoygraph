{"ver":"0.1","info":{"id":"Ml3cRf","date":"1533415913","viewed":133,"name":"Dancing Grid","username":"TanayStyle","description":"Grid stuff","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sin01(float x) {\n\treturn (sin(x)+1.)/2.;\n}\nfloat cos01(float x) {\n\treturn (cos(x)+1.)/2.;\n}\n\n/*\nvec2 randVec01(vec2 p) {\n    vec3 a = fract(vec3(sin(p.x), cos(p.y), cos(p.x)));\n    a += dot(a, a+34.45);\n    return smoothstep(0., 1., fract(vec2(a.x * a.y, a.y * a.z)));\n} */\n\nvec2 randVec01(vec2 p) {\n    vec3 a = fract(vec3(sin(p.x), cos(p.y), cos(p.x)));\n    a += dot(a, a+ (sin01(iTime) - 1.5));\n    return smoothstep(0., 1., fract(vec2(a.x * a.y, a.y * a.z)));\n}\n\nfloat manDist(vec2 from, vec2 to) {\n    return abs(from.x - to.x) + abs(from.y - to.y);\n}\n\nfloat euclDist(vec2 from, vec2 to) {\n\treturn length(from - to);\n}\n\nfloat circ(vec2 uv, vec2 pos, float radius) {\n    float t = (iTime + uv.x);\n    float f01 = cos01(t * 5.);\n    \n    float dist = f01 * euclDist(uv, pos);\n    dist += (1. - f01) * manDist(uv, pos);\n    return smoothstep(radius, 0., dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Adjust coordinates so 0,0 is in center\n    //vec2 uv = fragCoord/iResolution.xy; \n    vec2 uv =(fragCoord - iResolution.xy/2.)/iResolution.xy; \n    float aspectRatio = iResolution.x / iResolution.y;\n\tuv.x *= aspectRatio;\n    \n    vec3 col = vec3(0.);\n    \n    \n    // Create grid\n    float gridSize = 4.;\n    vec2 gridCoord = floor(uv * gridSize) / gridSize;\n    \n    // Get parts within grid cell\n    float cellRadius = .5 / gridSize;\n    vec2 cellCenter = gridCoord + cellRadius;\n    float inGrid = circ(uv, cellCenter, cellRadius);\n    col.rb = vec2(inGrid); //* (sin01(uv.x + iTime * 2.) + .4);\n    \n    // Get random position in grid\n    vec2 pos = randVec01(vec2(inGrid));\n    //col = vec3(pos,1.);//vec3(circ(uv, pos, 0.05));\n    col.rb -= pos;\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}