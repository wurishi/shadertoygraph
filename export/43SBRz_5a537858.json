{"ver":"0.1","info":{"id":"43SBRz","date":"1729098769","viewed":18,"name":"VCR Damaged - Annie","username":"annieqiu","description":"Simulating a damaged VCR playing a video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    //screen wiggle\n    float verticalOffset = 0.03 * sin(iTime * 0.3);\n    float horizontalOffset = 0.0008 * sin(iTime * 20.0);\n    vec2 warpedUv = uv + vec2(horizontalOffset, verticalOffset);\n    \n    // change the uv.x in that height range (uv.y)\n    float range = fract(iTime * 0.1);\n    \n    if(uv.y > range && uv.y < range + 0.1 )\n    {\n        warpedUv.x = uv.x - 0.1 * tan(300.0 * uv.y) * sin(iTime * 0.1);\n    }  \n    \n    vec2 offset1 = vec2(tan(0.01));\n    vec2 offset2 = vec2(tan(0.0));\n    vec2 offset3 = vec2(tan(-0.01));\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}