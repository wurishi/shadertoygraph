{"ver":"0.1","info":{"id":"ls2fz3","date":"1501526133","viewed":94,"name":"Mandelbrot quick and dirty","username":"VincentJ","description":"Mandelbrot set zoom in coded a bit too fast in between compiles.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Complex\n{\n    float Real;\n    float Imaginary;\n};\n\nComplex complexAdd(Complex a, Complex b)\n{\n    Complex res;\n    res.Real = a.Real + b.Real;\n    res.Imaginary = a.Imaginary + b.Imaginary;\n    return res;\n}\n\nComplex complexMul(Complex a, Complex b)\n{\n    Complex res;\n    res.Real = a.Real * b.Real - a.Imaginary * b.Imaginary;\n    res.Imaginary = a.Real * b.Imaginary + a.Imaginary * b.Real;\n    return res;\n}\n\nfloat complexModule(Complex c)\n{\n    return sqrt(c.Real * c.Real + c.Imaginary * c.Imaginary);\n}\n\nvec2 scale = vec2(1.25f, 0.00005f);\nvec2 offset = vec2(0.0f, 0.0f);\nvec2 offset2 = vec2(-1.162f, 0.2613f);\nfloat Threshold = 5.0f;\nuint Iterations = uint(50);\n\n#define PI 3.1415926535897932384626433832795\n#define PI2 1.5707963267948966192313216916398\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv - 0.5f) * 2.0f;\n    float AspectRatio = iResolution.x / iResolution.y;\n    \n    float sinTime = (sin(iTime*1.0f - PI2) + 1.0f) * 0.5f;\n    sinTime = 1.0f - pow(sin(PI2*(sinTime-1.0f)), 4.0f);\n    float scaleT = scale.x * (1.0f - sinTime) + scale.y * sinTime;\n    vec2 offsetT = offset * (1.0f - sinTime) + offset2 * sinTime;\n    \n    Complex base;\n    base.Real = uv.x * scaleT * AspectRatio + offsetT.x;\n    base.Imaginary = uv.y * scaleT + offsetT.y;\n    \n    uint i = uint(0);\n    float absoluteValue = 0.0f;\n    Complex c; c.Real = 0.0f; c.Imaginary = 0.0f;\n    while(i < Iterations && absoluteValue < Threshold)\n    {\n        c = complexAdd(complexMul(c, c), base); // Z(n+1) = Z(n)^2 + C;\n        absoluteValue = complexModule(c);\n        ++i;\n    }\n    absoluteValue /= Threshold;\n\tfragColor = vec4(absoluteValue, absoluteValue, absoluteValue, 1.0f);\n}","name":"Image","description":"","type":"image"}]}