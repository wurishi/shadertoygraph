{"ver":"0.1","info":{"id":"ddtfWM","date":"1715304999","viewed":114,"name":"Fork TileSquare","username":"chenxiang","description":"Inspired by [url]http://glslsandbox.com/e#25778.0[/url]","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["square","tile"],"hasliked":0,"parentid":"MllSzl","parentname":"TileSquare"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Inspired by http://glslsandbox.com/e#25778.0\n\n#define CORNER 20.0\n\n#define PI 3.1415926535897932384626433832795\n\n#ifdef UNIFORM_PARAM\n\nuniform sampler2D iChannel0; //[texture26]\n\nuniform int tiles; //[10,20,50]\n\nuniform bool circle; //[false]\n\nuniform float lightX; //[-1.0,0.4,1.0]\nuniform float lightY; //[-1.0,0.4,1.0]\nuniform float lightZ; //[1.0,2.0,5.0]\n\n#else\n\nconst int tiles = 20;\n\nconst bool circle = true;\n\nconst float lightX = 0.4;\nconst float lightY = 0.4;\nconst float lightZ = 2.0;\n\n#endif\n\nvec3 tile(vec2 u, float size, vec3 light)\n{\n    vec2 R = iResolution.xy;\n    vec2 pos = mod((u - 0.5) * R, size) - size / 2.0;\n    vec2 uv = u - pos / R;\n\n    vec3 tc = texture(iChannel0, uv).rgb;\n\n    float r = size / 2.0;\n\n    vec3 normal = circle ? normalize(vec3(pos.x / r, pos.y / r, smoothstep(0.0, r, r - length(pos)) * CORNER)) :\n                           normalize(vec3(tan((pos.x / size) * PI), tan((pos.y / size) * PI), CORNER));\n    float bright = pow(dot(normal, normalize(light)), 1.0);\n\n    vec3 heif = normalize(light + vec3(0.0, 0.0, 0.1));\n    float spec = pow(dot(heif, normal), 200.0);\n\n    return tc * bright + spec;\n}\n\n// Sample a procedural texture (anti-aliasing)\n// Stolen from IQ: https://www.shadertoy.com/view/MdjGR1\nvec3 tile_aa(vec2 u, float size, vec3 light)\n{\n    #define SAMPLING_STRENGTH 1000000000.0\n    #define NB_SAMPLES 3 //0: no anti-aliasing\n\n    // calc texture sampling footprint\n    vec2 ddx = dFdx(u);\n    vec2 ddy = dFdy(u);\n\n    int sx = 1 + int(clamp(SAMPLING_STRENGTH * length(ddx), 0.0, float(NB_SAMPLES - 1)));\n    int sy = 1 + int(clamp(SAMPLING_STRENGTH * length(ddy), 0.0, float(NB_SAMPLES - 1)));\n\n    vec3 no = vec3(0.0);\n\n    for (int j = 0; j < NB_SAMPLES; j++) {\n        for (int i = 0; i < NB_SAMPLES; i++) {\n            if (j < sy && i < sx) {\n                vec2 st = vec2(float(i), float(j)) / vec2(float(sx), float(sy));\n                no += tile(u + st.x * ddx + st.y * ddy, size, light);\n            }\n        }\n    }\n    return no / float(sx * sy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 u = fragCoord / R;\n    vec2 m = iMouse.xy / R;\n\n    // cell count, cell size and cell light\n    float num = float(tiles) * (1.0 + ((iMouse.z > 0.0) ? m.x : 0.25 * sin(0.5 * iTime)));\n    float size = min(R.x, R.y) / num;\n    vec3 light = vec3(lightX, lightY, lightZ);\n\n    vec3 col = tile(u, size, light);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}