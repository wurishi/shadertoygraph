{"ver":"0.1","info":{"id":"ttGcRt","date":"1611539307","viewed":87,"name":"Generalized Smoothstep","username":"UtaUtaUtau","description":"First public shader I suppose?\nI just wanted to see generalized smoothstep in GLSL.\n\nThe function starts to break when N is greater that 5. Most probably precision errors.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530717958\n#define PI TAU / 2.\n\n/*\nHeavily referenced these functions from the Wikipedia article.\nI don't really know the proof for the generalization...\nhttps://en.wikipedia.org/wiki/Smoothstep\n*/\n\nfloat nCr(float n, float r) {\n    float res = 1.;\n    for (float i = 0.; i < r; ++i) {\n        res *= (n - i) / (i + 1.);\n    }\n    return res;\n}\n\nfloat generalSmoothstep(int N, float x) {\n    x = clamp(x, 0., 1.);\n    float NN = float(N);\n    float res = 0.;\n    for (float n = 0.; n <= NN; ++n) {\n        res += nCr(-NN - 1., n) * nCr(2. * NN + 1., NN - n) * pow(x, NN + n + 1.);\n    }\n    return res;\n}\n\nfloat generalSmoothstep(float N, float x) {\n    float fracN = fract(N);\n    int pN = int(floor(N));\n    return mix(generalSmoothstep(pN, x), generalSmoothstep(pN + 1, x), fracN);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float dx = 1.0/iResolution.y;\n    vec2 uv = 2. * (fragCoord/iResolution.xy) - 1.;\n    // Multiply x by aspect ratio, only makes sense if screen is landscape though\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 col;\n    if (uv.x > -1. && uv.x < 1.) {\n        //background\n        col = (sin(PI * uv.x * 5.) * sin(PI * uv.y * 5.) > 0.) ? vec3(0.2) : vec3(0.25);\n        \n        //point\n        vec2 p = 0.5 * (uv + 1.);\n        \n        //function\n        float N = sin(iTime);\n        N = N * N * 5.;\n        float y = generalSmoothstep(N, p.x);\n        float dy = generalSmoothstep(N, p.x + dx) - y;\n        float di = abs(p.y - y) / sqrt(dx*dx+dy*dy);\n        col = mix(col, vec3(.93, .23, .55), smoothstep(2., 0., di));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}