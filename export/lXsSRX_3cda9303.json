{"ver":"0.1","info":{"id":"lXsSRX","date":"1712027034","viewed":45,"name":"static wormhole","username":"ShadedSky","description":"radial transformation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["radialtransformation"],"hasliked":0,"parentid":"MXlSRX","parentname":"wormhole effect"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265389\n\n// Function to rotate a 2D vector `p` by angle `a` (in radians)\nvec2 rotateVector(vec2 p, float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = 50.0*sin(angle*0.5*sin(iTime*0.05));\n    return p * mat2(cosAngle, -sinAngle, sinAngle, cosAngle);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 uv) {\n    // Normalize UV coordinates and shift the origin to the center of the screen\n    uv = (uv - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Apply a symmetrical wormhole effect\n    float time = iTime * 0.5; // Slow down the time scale for a smoother animation\n    float angle = length(uv) * 15.50; // Increase the angle based on the distance from the center to create a radial effect\n    uv = rotateVector(uv, angle + sin(iTime)); // Rotate UV coordinates to create the wormhole effect\n\n    // After the wormhole transformation, apply the color effect as before\n    vec3 color = vec3(0.0);\n    color.r = 0.5 + 0.5 * cos(time + uv.x * 2.0);\n    color.g = 0.5 + 0.5 * cos(time + uv.y * 2.0);\n    color.b = 0.5 + 0.5 * cos(time + (uv.x + uv.y) * 2.0);\n\n    // Additional effects for enhanced visuals (optional adjustments)\n    color *= 0.9 + 0.5 * cos(length(uv) * 10.0 - time * 2.0);\n    color = color * 0.9 + 0.1 * sin(time * 10.0 + length(uv) * 40.0) * vec3(1.0, 1.0, 1.0);\n\n    // Output the final color with full opacity\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}