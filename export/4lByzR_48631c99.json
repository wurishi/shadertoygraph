{"ver":"0.1","info":{"id":"4lByzR","date":"1507068340","viewed":205,"name":"Ellipse intersection test","username":"jon_valdes","description":"Quick test for fast sphere-grid intersection based on the projected sphere's ellipse major and minor axes","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Analytic projection of a sphere to screen pixels. \n\n// Spheres in world space become ellipses when projected to the camera view plane. In fact, these\n// ellipses can be analytically determined from the camera parameters and the sphere geometry,\n// such that their exact position, orientation and surface area can be compunted. This means that,\n// given a sphere and a camera and buffer resolution, there is an analytical formula that \n// provides the amount of pixels covered by a sphere in the image. This can be very useful for\n// implementing LOD for objects based on their size in screen (think of trees, vegetation, characters\n// or any other such complex object).\n\n// This shaders implements this formula, and provides too the center and axes of the ellipse\n\n// More info, here: https://iquilezles.org/articles/sphereproj\n\n// ---------------------------------------------------------------------------------------------\n\nstruct ProjectionResult\n{\n    vec2  center;\n    float axisMinor;\n    float axisMajor;\t\n\tfloat a, b, c, d, e, f;\n};\n\nProjectionResult projectSphere( /* sphere        */ in vec4 sph, \n\t\t\t\t                /* camera matrix */ in mat4 cam,\n\t\t\t\t\t\t\t    /* projection    */ in float fle )\n{\n    // transform to camera space\t\n\tvec3  o = (cam*vec4(sph.xyz,1.0)).xyz;\n\t\n    float r2 = sph.w*sph.w;\n\tfloat z2 = o.z*o.z;\t\n\tfloat l2 = dot(o,o);\n\t\t\n\t\n    float l = length(o.xy);\n\t\n\t// axis\n\tfloat axa = fle*sqrt(-r2*(r2-l2)/((l2-z2)*(r2-z2)*(r2-z2)))*l;\n\tfloat axb = fle*sqrt(-r2*(r2-l2)/((l2-z2)*(r2-z2)*(r2-l2)))*l;\n\n\t\n\t// center\n\tvec2  cen = fle*o.z*o.xy/(z2-r2);\n\n\treturn ProjectionResult(\n\t\t\t\t\t\t\t cen, min(axa, axb), max(axa, axb), \n                     /* implicit ellipse f(x,y) = aÂ·xÂ² + bÂ·yÂ² + cÂ·xÂ·y + dÂ·x + eÂ·y + f = 0 */\n                     /* a */ r2 - o.y*o.y - z2,\n                     /* b */ r2 - o.x*o.x - z2,\n                     /* c */ 2.0*o.x*o.y,\n                     /* d */ 2.0*o.x*o.z*fle,\n                     /* e */ 2.0*o.y*o.z*fle,\n                     /* f */ (r2-l2+z2)*fle*fle );\n}\n\n\nvec2 toNormalizedCoords(vec2 pos){\n\treturn vec2(-iResolution.xy + 2.0*pos) / iResolution.y;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = toNormalizedCoords(fragCoord);\n\t\n\tfloat fov = 1.0;\n\t\n\tfloat an = 12.0 + 0.5*iTime + 10.0*iMouse.x/iResolution.x;\n\tvec3 ro = vec3( 3.0*cos(an), 0.0, 3.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n\tvec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + fov*ww );\n\tmat4 cam = mat4( uu.x, uu.y, uu.z, 0.0,\n\t\t\t\t\t vv.x, vv.y, vv.z, 0.0,\n\t\t\t\t\t ww.x, ww.y, ww.z, 0.0,\n\t\t\t\t\t -dot(uu,ro), -dot(vv,ro), -dot(ww,ro), 1.0 );\n\t\n\tvec4 sph1 = vec4(-2.0, 1.0,0.0,1.1);\n\tvec4 sph2 = vec4( 3.0, 1.5,1.0,1.2);\n\tvec4 sph3 = vec4( 1.0,-1.0,1.0,1.3);\n\n\t\n\tvec3 col = vec3(0.0);\n\n    //-------------------------------------------------------\n\t\n\tProjectionResult res = projectSphere( sph3, cam, fov );\n\n\t//-------------------------------------------------------\n    \n    float cellX = floor(fragCoord.x / 32.) * 32.;\n    float cellY = floor(fragCoord.y / 32.) * 32.;\n    \n    vec2 cellCenter = toNormalizedCoords( vec2(cellX,cellY) + vec2(16));\n    float cellBoundingRadius = sqrt(8. / iResolution.y);\n    float cellToSphereCenterDist = length(res.center - cellCenter);\n    \n    \n\t// Draw conservative inside region\n    \n    if(cellToSphereCenterDist < cellBoundingRadius+res.axisMajor){\n        col += vec3(0.7,0,0);   \n    }\n    \n\t// Draw trivial accept region\n    if(cellToSphereCenterDist < 8./iResolution.x + res.axisMinor){\n        col = mix(col, vec3(0.7,1.7,1.0), 0.5);   \n    }\n\n    // Draw inner circle\n    if(abs(length(p - res.center) - res.axisMinor) < 0.005){\n     \tcol = vec3(1.3,1.0,1.3);   \n    }\n    \n    // Draw outer circle\n    if(abs(length(p - res.center) - res.axisMajor) < 0.005){\n     \tcol = vec3(1.,0.3,0.3);   \n    }\n\n    float v = res.a * p.x * p.x + res.b * p.y * p.y + res.c * p.x * p.y + res.d * p.x + res.e * p.y + res.f;\n\tif(v>0.){\n\t\tcol = mix(col, vec3(0.6,0.6,1.7), 0.5);\n\t}\n    \n    // Draw grid\n    if( (abs(fragCoord.x - cellX) < 1.) ||\n        (abs(fragCoord.y - cellY) < 1.)){\n        col = mix(col, vec3(0.6), 0.5);\n        \n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}