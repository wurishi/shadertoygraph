{"ver":"0.1","info":{"id":"3tXXRX","date":"1564504952","viewed":141,"name":"Devil Egg","username":"104","description":"Why are eggs in the dairy isle anyway?","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sd","poultry","dairy","puns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float bigsize = .8;\nconst float smallsize = .09;\nconst float span = .1;\n\nconst float PI = 3.14159;\nconst float PI2 = PI*2.;\n\nmat2 rot2D(float r){\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\nfloat nsin(float x) {\n    return cos(x)*.5+.5;\n}\nvec3 hash32(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat sdShape(vec2 p, float r) {\n    return length(p+r*.5)-r;\n}\nvoid egg(inout vec2 sd, vec2 uv, float t, float r, float a) {\n    if (r <= 0.) return;\n    float yolk = sdShape((11./sqrt(2.))*uv*rot2D(a), r);\n    float white = sdShape((5.2/sqrt(2.))*uv*rot2D(a), r);\n    sd = vec2(opUnion(sd.x, white),\n              opUnion(sd.y, yolk));\n}\n\n// invisible dots creating some kind of underlying disturbance\nfloat under(vec2 N, float t) {\n    const float sz = .001;\n    const float range = 1.8;\n    vec2 p1 = vec2(sin(-t*1.6666), cos(t)) * range;\n    vec2 p2 = vec2(sin(t), sin(t*1.3333)) * range;\n    float b = min(length(p1-N)-sz, length(p2-N)-sz);\n    return b;\n}\n\nvoid smallEggField(inout vec2 sd, vec2 uv, vec2 uvbig, float t) {\n    vec2 uvsmall = mod(uv+vec2(t*.3,0),span)-span*.5;// uv within small scroll period\n    vec2 uvsmall_q = (uv-uvsmall);// uv of scrolling small egg field\n    vec2 sdquant = vec2(1e6);\n    // find the dist to the big egg, quantizing big egg's coords to small egg coords\n    egg(sdquant, uvsmall_q, t, bigsize, under(uvsmall_q, t));\n    egg(sd,uvsmall, t, smallsize * smoothstep(0.,.8,sdquant.x - .5), under(uvbig*10., t));\n}\n\nvec3 color(vec2 sd, float fact) {\n    vec3 o;\n    o.rgb = 1.-smoothstep(vec3(0),fact*vec3(.06,.03,.02), vec3(sd.x));\n    o.rgb *= vec3(.9,.7,.7)*.8;\n    o.g += .05;\n    if (sd.x < 0.) o -= sd.x*.6;\n    o = clamp(o,o-o,o-o+1.);\n    \n    vec3 ayolk = 1.-smoothstep(vec3(0),fact*vec3(.2,.1,.2),sd.yyy);\n    o.rgb = mix(o.rgb, vec3(.5,.5,0), ayolk);\n    if (sd.y < 0.) o -= sd.y*.1;\n    o = clamp(o,o-o,o-o+1.);\n    return o;\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    vec2 N = uv;\n    uv.x *= iResolution.x / iResolution.y;\n    float t = iTime;\n    uv.y -= .1;\n    vec2 sd = vec2(1e6);\n\n    vec2 uvbig = uv;// uv of the big egg and disturbance layer both\n\n    // big egg\n    egg(sd, uv, t, bigsize, under(uvbig, t));\n\n    // small eggs\n    vec2 sdsmall = vec2(1e6);\n    smallEggField(sdsmall, uv, uvbig, t);\n    uv -= span * .5;\n    smallEggField(sdsmall, uv, uvbig, t);\n\n    o.rgb = mix(color(sd, 2.), color(sdsmall, .2), vec3(step(.1,sd.x)));\n\n    o = pow(o, o-o+.5);\n    o.rgb += (hash32(fragCoord+iTime)-.5)*.1;\n    o = clamp(o,o-o,o-o+1.);\n    o *= 1.-length(13.*pow(abs(N), vec2(4.)));// vingette\n    o.a = 1.;\n}\n\n\n","name":"Image","description":"","type":"image"}]}