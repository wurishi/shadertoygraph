{"ver":"0.1","info":{"id":"stlSzf","date":"1626483827","viewed":440,"name":"fxaa 3.11","username":"jiangdunchun","description":"thanks for the FXAA tutorial from http://blog.simonrodriguez.fr/articles/30-07-2016_implementing_fxaa.html","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BufferA referenced from https://www.shadertoy.com/view/Xll3DM by Flyguy\n// BufferB modified from https://www.shadertoy.com/view/4sBfRd by PrzemyslawZaworski\n\n/* pixel index in 3*3 kernel\n    +---+---+---+\n    | 0 | 1 | 2 |\n    +---+---+---+\n    | 3 | 4 | 5 |\n    +---+---+---+\n    | 6 | 7 | 8 |\n    +---+---+---+\n*/\n#define UP_LEFT      0\n#define UP           1\n#define UP_RIGHT     2\n#define LEFT         3\n#define CENTER       4\n#define RIGHT        5\n#define DOWN_LEFT    6\n#define DOWN         7\n#define DOWN_RIGHT   8\nvec2 KERNEL_STEP_MAT[] = vec2[9](\n    vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0),\n    vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),\n    vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0)\n);\n\n\n\n/* in order to accelerate exploring along tangent bidirectional, step by an increasing amount of pixels QUALITY(i) \n   the max step count is 12\n    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+\n    |step index       | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |\n    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+\n    |step pixels count|1.0|1.0|1.0|1.0|1.0|1.5|2.0|2.0|2.0|2.0|4.0|8.0|\n    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+\n*/\n#define STEP_COUNT_MAX   12\nfloat QUALITY(int i) {\n    if (i < 5) return 1.0;\n    if (i == 5) return 1.5;\n    if (i < 10) return 2.0;\n    if (i == 10) return 4.0;\n    if (i == 11) return 8.0;\n}\n\n\n// L = 0.299 * R + 0.587 * G + 0.114 * B\nfloat RGB2LUMA(vec3 color) {\n    return dot(vec3(0.299, 0.578, 0.114), color);\n}\n\n\n#define EDGE_THRESHOLD_MIN  0.0312\n#define EDGE_THRESHOLD_MAX  0.125\n#define SUBPIXEL_QUALITY    0.75\n#define GRADIENT_SCALE      0.25\n\nvec4 fxaa_3_11(sampler2D color_buffer, vec2 uv, vec2 uv_step) {\n    // get luma of kernel\n    float luma_mat[9];\n    for (int i = 0; i < 9; i++) {\n        luma_mat[i] = RGB2LUMA(texture(color_buffer, uv + uv_step * KERNEL_STEP_MAT[i]).xyz);\n    }\n    \n    // detecting where to apply FXAA, return the pixel color if not\n    float luma_min = min(luma_mat[CENTER], min(min(luma_mat[UP], luma_mat[DOWN]), min(luma_mat[LEFT], luma_mat[RIGHT])));\n    float luma_max = max(luma_mat[CENTER], max(max(luma_mat[UP], luma_mat[DOWN]), max(luma_mat[LEFT], luma_mat[RIGHT])));\n    float luma_range = luma_max - luma_min;\n    if(luma_range < max(EDGE_THRESHOLD_MIN, luma_max * EDGE_THRESHOLD_MAX)) return texture(color_buffer, uv);\n    \n    // choosing edge tangent\n    // horizontal: |(upleft-left)-(left-downleft)|+2*|(up-center)-(center-down)|+|(upright-right)-(right-downright)|\n    // vertical: |(upright-up)-(up-upleft)|+2*|(right-center)-(center-left)|+|(downright-down)-(down-downleft)|\n    float luma_horizontal = \n        abs(luma_mat[UP_LEFT] + luma_mat[DOWN_LEFT] - 2.0 * luma_mat[LEFT])\n        + 2.0 * abs(luma_mat[UP] + luma_mat[DOWN] - 2.0 * luma_mat[CENTER])\n        + abs(luma_mat[UP_RIGHT] + luma_mat[DOWN_RIGHT] - 2.0 * luma_mat[RIGHT]);\n    float luma_vertical = \n        abs(luma_mat[UP_LEFT] + luma_mat[UP_RIGHT] - 2.0 * luma_mat[UP])\n        + 2.0 * abs(luma_mat[LEFT] + luma_mat[RIGHT] - 2.0 * luma_mat[CENTER])\n        + abs(luma_mat[DOWN_LEFT] + luma_mat[DOWN_RIGHT] - 2.0 * luma_mat[DOWN]);\n    bool is_horizontal = luma_horizontal > luma_vertical;\n    \n    // choosing edge normal \n    float gradient_down_left = (is_horizontal ? luma_mat[DOWN] : luma_mat[LEFT]) - luma_mat[CENTER];\n    float gradient_up_right = (is_horizontal ? luma_mat[UP] : luma_mat[RIGHT]) - luma_mat[CENTER];\n    bool is_down_left = abs(gradient_down_left) > abs(gradient_up_right);\n    \n    // get the tangent uv step vector and the normal uv step vector\n    vec2 step_tangent = (is_horizontal ? vec2(1.0, 0.0) : vec2(0.0, 1.0)) * uv_step;\n    vec2 step_normal =  (is_down_left ? -1.0 : 1.0) * (is_horizontal ? vec2(0.0, 1.0) : vec2(1.0, 0.0)) * uv_step;\n    \n    // get the change rate of gradient in normal per pixel\n    float gradient = is_down_left ? gradient_down_left : gradient_up_right;\n    \n    // start at middle point of tangent edge\n    vec2 uv_start = uv + 0.5 * step_normal;\n    float luma_average_start = luma_mat[CENTER] + 0.5 * gradient;    \n    //return vec4(luma_average_start, luma_average_start,luma_average_start, 1.0);\n    \n    // explore along tangent bidirectional until reach the edge both\n    vec2 uv_pos = uv_start + step_tangent;\n    vec2 uv_neg = uv_start - step_tangent;\n    \n    //return texture(iChannel0, uv_neg);\n    \n    float delta_luma_pos = RGB2LUMA(texture(color_buffer, uv_pos).rgb) - luma_average_start;\n    float delta_luma_neg = RGB2LUMA(texture(color_buffer, uv_neg).rgb) - luma_average_start;\n    \n    bool reached_pos = abs(delta_luma_pos) > GRADIENT_SCALE * abs(gradient);\n    bool reached_neg = abs(delta_luma_neg) > GRADIENT_SCALE * abs(gradient);\n    bool reached_both = reached_pos && reached_neg;\n    \n    if (!reached_pos) uv_pos += step_tangent;\n    if (!reached_neg) uv_neg -= step_tangent;\n    \n    if (!reached_both) {\n        for(int i = 2; i < STEP_COUNT_MAX; i++){\n            if(!reached_pos) delta_luma_pos = RGB2LUMA(texture(color_buffer, uv_pos).rgb) - luma_average_start;\n            if(!reached_neg) delta_luma_neg = RGB2LUMA(texture(color_buffer, uv_neg).rgb) - luma_average_start;\n            \n            bool reached_pos = abs(delta_luma_pos) > GRADIENT_SCALE * abs(gradient);\n            bool reached_neg = abs(delta_luma_neg) > GRADIENT_SCALE * abs(gradient);\n            bool reached_both = reached_pos && reached_neg;\n            \n            if (!reached_pos) uv_pos += (QUALITY(i) * step_tangent);\n            if (!reached_neg) uv_neg -= (QUALITY(i) * step_tangent);\n            \n            if (reached_both) break;\n        }\n    }\n    \n    //return texture(iChannel0, uv_neg);\n    \n    // estimating offset\n    float length_pos = max(abs(uv_pos - uv_start).x, abs(uv_pos - uv_start).y);\n    float length_neg = max(abs(uv_neg - uv_start).x, abs(uv_neg - uv_start).y);\n    bool is_pos_near = length_pos < length_neg;\n    \n    float pixel_offset = -1.0 * (is_pos_near ? length_pos : length_neg) / (length_pos + length_neg) + 0.5;\n    \n    // no offset if the bidirectional point is too far\n    if(((is_pos_near ? delta_luma_pos : delta_luma_neg) < 0.0) == (luma_mat[CENTER] < luma_average_start)) pixel_offset = 0.0;\n    \n    // subpixel antialiasing\n    float luma_average_center = 0.0;\n    float average_weight_mat[] = float[9](\n        1.0, 2.0, 1.0,\n        2.0, 0.0, 2.0,\n        1.0, 2.0, 1.0\n    );\n    for (int i = 0; i < 9; i++) luma_average_center += average_weight_mat[i] * luma_mat[i];\n    luma_average_center /= 12.0;\n    \n    float subpixel_luma_range = clamp(abs(luma_average_center - luma_mat[CENTER]) / luma_range, 0.0, 1.0);\n    float subpixel_offset = (-2.0 * subpixel_luma_range + 3.0) * subpixel_luma_range * subpixel_luma_range;\n    subpixel_offset = subpixel_offset * subpixel_offset * SUBPIXEL_QUALITY;\n    \n    // use the max offset between subpixel offset with before\n    pixel_offset = max(pixel_offset, subpixel_offset);\n    \n    \n    return texture(color_buffer, uv + pixel_offset * step_normal);\n}\n\n\n#define LINE_WIDTH_HALF 1\nint split_line_x = 0;\n\nvoid update_split_line_x() {\n    split_line_x = int(iResolution.x / 2.0 + sin(iTime * 0.5) * iResolution.x / 4.0);\n}\n\nbool is_in_line(vec2 fragCoord) {\n    if(abs(int(fragCoord.x) - split_line_x) < LINE_WIDTH_HALF) return true;\n    else return false;\n}\n\nbool is_in_text(vec2 uv) {\n    return texture(iChannel1, uv).r > 0.0;\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    update_split_line_x();\n    if (is_in_line(fragCoord)) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    vec2 uv_step = 1.0/iResolution.xy;\n    vec2 uv = fragCoord * uv_step;\n    \n    if (is_in_text(uv)) fragColor = texture(iChannel1, uv);\n    else {\n        if (int(fragCoord.x) > split_line_x) {\n            fragColor = texture(iChannel0, uv);\n        }\n        else {\n            fragColor = fxaa_3_11(iChannel0, uv, uv_step);\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_STEPS 96\n#define MIN_DIST 0.001\n#define NORMAL_SMOOTHNESS 0.02\n#define PI 3.14159265359\n\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\nfloat Union(float a, float b)\n{\n    return min(a, b);\n}\n\nfloat Sphere(float radius, vec3 position)\n{\n    return length(position) - radius;\n}\n\nfloat Box(float radius, vec3 position)\n{\n    return max(max(abs(position.x), abs(position.y)), abs(position.z)) - radius;\n}\n\nfloat Scene(vec3 position)\n{\n    float map = -Sphere(24.0, position);\n    \n    float animTime = mod(iTime, 10.0);\n    \n    float xScale = smoothstep(1.0, 1.5, animTime) - smoothstep(6.0, 6.5, animTime);  \n    float zScale = smoothstep(2.0, 2.5, animTime) - smoothstep(7.0, 7.5, animTime);\n    float yScale = smoothstep(3.0, 3.5, animTime) - smoothstep(8.0, 8.5, animTime);\n    \n    for(int i = -1; i <= 1;i++)\n    {\n        for(int j = -1; j <= 1;j++)\n        {\n            for(int k = -1; k <= 1;k++)\n            {\n                vec3 offset = vec3(i,j,k) * 2.0;\n                \n                offset.x *= 1.0 + xScale;\n                offset.y *= 1.0 + yScale;\n                offset.z *= 1.0 + zScale;\n                \n    \t\t\tmap = Union(map, Box(1.0, position + offset));\n        \t}\n        }\n    }\n    \n    return map;\n}\n\nvec3 Normal(vec3 position)\n{\n\tvec3 offset = vec3(NORMAL_SMOOTHNESS, 0, 0);\n    \n    vec3 normal = vec3\n    (\n        Scene(position - offset.xyz) - Scene(position + offset.xyz),\n        Scene(position - offset.zxy) - Scene(position + offset.zxy),\n        Scene(position - offset.yzx) - Scene(position + offset.yzx)\n    );\n    \n    return normalize(normal);\n}\n\nvec3 RayMarch(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return origin + direction * hitDist;\n}\n\nvec3 Shade(vec3 position, vec3 normal, vec3 rayOrigin,vec3 rayDirection)\n{\n    vec3 color = vec3(0, 0, 0);\n    \n    //Face Colors\n    vec3 leftColor =  vec3(  3, 130,  75) / 255.0;\n    vec3 frontColor = vec3(233, 207,  12) / 255.0;\n    vec3 topColor =   vec3(215,  75,   4) / 255.0;\n    \n    color = mix(color, leftColor,  abs( dot(normal, vec3(1,0,0) ) ) );\n    color = mix(color, frontColor, abs( dot(normal, vec3(0,0,1) ) ) );\n    color = mix(color, topColor,   abs( dot(normal, vec3(0,1,0) ) ) );\n    \n    //Background\n    color = mix(color, vec3(0.1), step(22.0, length(position)));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    vec2 mouseAngle = vec2(0);\n    \n    mouseAngle.x = PI * mouse.y + PI/2.0;\n    mouseAngle.x += PI/3.0;\n    \n    mouseAngle.y = 2.0 * PI * -mouse.x;\n    mouseAngle.y += PI/4.0;\n    \n    vec3 rayOrigin = vec3(0 , 0, -20.0);\n    vec3 rayDirection = normalize(vec3(uv - aspect / 2.0, 1.0));\n    \n    mat2 rotateX = Rotate(mouseAngle.x);\n    mat2 rotateY = Rotate(mouseAngle.y);\n    \n    rayOrigin.yz *= rotateX;\n    rayOrigin.xz *= rotateY;\n    rayDirection.yz *= rotateX;\n    rayDirection.xz *= rotateY;\n    \n    vec3 scenePosition = RayMarch(rayOrigin, rayDirection);\n    \n    vec3 outColor = Shade(scenePosition,Normal(scenePosition),rayOrigin,rayDirection);\n    \n\tfragColor = vec4(outColor, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n//and thanks to otaviogood for font texture\n#define C(c) U.x-=.5; O+= char(U,64+c)\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O = vec4(0.0);\n    \n    // FXAA ON\n    uv /= iResolution.y;\n    vec2 position = vec2(0.0, 0.0);\n    float FontSize = 4.;\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(6);C(24);C(1);C(1);C(-32);C(15);C(14);\n    \n    // FXAA OFF\n    position = vec2(1.4, 0.0);\n    U = ( uv - position)*64.0/FontSize;\n    C(6);C(24);C(1);C(1);C(-32);C(15);C(6);C(6);\n    O = vec4(O.xxx, 1.0);\n}\n\n\n//line 12 -> x,y coordinates of text, counted from left down corner\n//line 13 -> higher value = greater font size\n//line 15 -> Every argument is another char","name":"Buffer B","description":"","type":"buffer"}]}