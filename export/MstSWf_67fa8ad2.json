{"ver":"0.1","info":{"id":"MstSWf","date":"1461906932","viewed":536,"name":"Better Mobius Transform?","username":"vox","description":"Even if not just for learning purposes, mine's better ^(0.O)^\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n... I think.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["bettermobiustransform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define time ((saw(float(__LINE__))+1.0)*iTime/PI)\n#define saw(x) (acos(cos(x))/PI)\n#define cosaw(x) (asin(sin(x+PI/2.0))/PI+.5)\n#define stair floor\n#define jag fract\n\nvec2 SinCos( const in float x )\n{\nreturn vec2(sin(x), cos(x));\n}\nvec2 rotatez( const in vec2 vPos, const in vec2 vSinCos )\n{\n\treturn vPos.xy * mat2(vSinCos.yx, -vSinCos.x, vSinCos.y);\n}\n\nvec2 rotatez( const in vec2 vPos, const in float fAngle )\n{\n\treturn rotatez( vPos, SinCos(fAngle) );\n}\nvec2 tree(vec2 uv)\n{\n    float turns = mod(floor(time/2.0), 6.0)+3.0;\n    uv = rotatez(uv.xy, PI/(1.0*turns)).xy;\n    float theta = atan(uv.y, uv.x);\n    \n    float rot = float(int((theta/PI*.5+.5)*turns))/turns;\n    \n    vec2 xy = rotatez(uv.xy, \n                      PI*2.0*(rot)+PI/turns).xy;\n    \n    xy = sign(xy)*log(abs(xy));\n    \n    return vec2(saw(theta*turns), cosaw(xy.x*PI*2.0));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy*2.0;\n    float scale = exp(-saw(time/PI)*2.0);\n    uv = uv*scale-scale/2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    float r = length(uv);\n    uv = normalize(uv)/log(r+1.0)/log(sqrt(2.0));\n    uv += sin(vec2(time, time/PI*E*GR))/scale*2.0*PI;\n    scale = exp(-saw(time/PI)*2.0);\n    uv = tree(uv)*scale-scale/2.0; \n    \n    r = length(uv);\n    uv = normalize(uv)/log(r+1.0)/log(sqrt(2.0));\n    uv = tree(uv); \n\n    fragColor = vec4(uv, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}