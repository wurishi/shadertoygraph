{"ver":"0.1","info":{"id":"fdjGDD","date":"1617631189","viewed":89,"name":"CG_2021_2_Zelentsov320","username":"azelentsov","description":"Pyramid with minecraft inside","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["cg","task2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.3*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e9;\nconst float SPHERE_R = 1.0;\nvec3 CAMERA_POS = vec3(6, 1.2, -6);\nconst vec3 LIGHT_POS = vec3(0, 1.5, -2);\nconst float LIGHT_RADIUS = 0.25;\nconst vec4 LIGHT_COLOR = vec4(1, 1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-2, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec4 LIGHT2_COLOR = vec4(0.1, 0.7, 0.1, 1);\n\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal) {\n    // abs(pos + t * dir) = r\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t = r * r\n    // D = 4 * dot(pos, dir) ^ 2 - 4 * (dot(pos, pos) - r * r)\n    float b = dot(pos, dir);\n    float D = b * b - (dot(pos, pos) - R * R);\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t < 0.0)\n        t = (-b + sqrt(D));\n    if (t < 0.0)\n        return INF;\n    vec3 wPos = pos + t * dir;\n    normal = normalize(wPos);\n    return t;\n}\n\nvec3 planeThrough3Points(vec3 p1, vec3 p2, vec3 p3, out float move) {\n    vec3 p1p2 = p1 - p2;\n    vec3 p1p3 = p1 - p3;\n    \n    vec3 normal = cross(p1p2, p1p3);\n    move = dot(normal, p1);\n    return normal;\n}\n\nfloat traceSquare(vec3 dot1, vec3 dot2, vec3 dot3, vec3 dot4, vec3 uv_scheme, vec3 pos, vec3 dir,\nout vec3 normal, out vec2 dot_uv) {\n    float move;\n    \n    vec3 norm = planeThrough3Points(dot1, dot2, dot3, move);\n    \n    // dot(pos + t * dir, norm) == move\n    // t = (move - dot(pos, norm)) / dot(dir, norm)\n    \n    float divider = dot(dir, norm);\n    float div = move - dot(pos, norm);\n    \n    float t = div / divider;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    \n    vec3 v1 = normalize(dot1 - worldPos);\n    vec3 v2 = normalize(dot2 - worldPos);\n    vec3 v3 = normalize(dot3 - worldPos);\n    vec3 v4 = normalize(dot4 - worldPos);\n    \n    float angle12 = acos(dot(v1, v2));\n    float angle23 = acos(dot(v2, v3));\n    float angle34 = acos(dot(v3, v4));\n    float angle14 = acos(dot(v1, v4));\n    \n    if (abs(angle12 + angle23 + angle34 + angle14 - radians(360.0)) < 1e-3) {\n        normal = vec3(0.0, 0.0, -1.0);\n        float angle = acos(dot(normalize(dir), normal));\n        if (uv_scheme == vec3(1.0, 1.0, 0.0)) {\n            dot_uv = vec2((worldPos - dot1).x, (worldPos - dot1).y) * 1.0;\n        } else if (uv_scheme == vec3(1.0, 0.0, 1.0)) {\n            dot_uv = vec2((worldPos - dot1).x, (worldPos - dot1).z) * 1.0;\n        } else if (uv_scheme == vec3(0.0, 1.0, 1.0)) {\n            dot_uv = vec2((worldPos - dot1).z, (worldPos - dot1).y) * 1.0;\n        }\n        if (angle < radians(90.0)) {\n            normal = -normal;\n        }\n        return t;\n    } else {\n        return INF;\n    }\n}\n\nfloat traceCube(vec3 dot1, vec3 dot8, vec3 pos, vec3 dir, out vec3 normal, out vec2 dot_uv) {\n    vec3 dot2 = vec3(dot1.x, dot1.y, dot8.z);\n    vec3 dot3 = vec3(dot1.x, dot8.y, dot1.z);\n    vec3 dot4 = vec3(dot1.x, dot8.y, dot8.z);\n    vec3 dot5 = vec3(dot8.x, dot1.y, dot1.z);\n    vec3 dot6 = vec3(dot8.x, dot1.y, dot8.z);\n    vec3 dot7 = vec3(dot8.x, dot8.y, dot1.z);\n    \n    \n    float t = INF;\n    \n    vec3 norm = vec3(0.0, 1.0, 0.0);\n    vec2 dot_uv_local = vec2(0.0, 0.0);\n    \n    vec3 tmp_norm = norm;\n    vec2 tmp_dot_uv = dot_uv_local;\n    float t1 = traceSquare(dot1, dot2, dot4, dot3, vec3(0.0, 1.0, 1.0), pos, dir, tmp_norm, tmp_dot_uv);\n    if (t1 < t) {\n        t = t1;\n        norm = tmp_norm;\n        dot_uv_local = tmp_dot_uv;\n    }\n    \n    tmp_norm = norm;\n    tmp_dot_uv = dot_uv_local;\n    t1 = traceSquare(dot1, dot2, dot6, dot5, vec3(1.0, 0.0, 1.0), pos, dir, tmp_norm, tmp_dot_uv);\n    if (t1 < t) {\n        t = t1;\n        norm = tmp_norm;\n        dot_uv_local = tmp_dot_uv;\n    }\n    \n    tmp_norm = norm;\n    tmp_dot_uv = dot_uv_local;\n    t1 = traceSquare(dot1, dot3, dot7, dot5, vec3(1.0, 1.0, 0.0), pos, dir, tmp_norm, tmp_dot_uv);\n    if (t1 < t) {\n        t = t1;\n        norm = tmp_norm;\n        dot_uv_local = tmp_dot_uv;\n    }\n    \n    tmp_norm = norm;\n    tmp_dot_uv = dot_uv_local;\n    t1 = traceSquare(dot2, dot4, dot8, dot6, vec3(1.0, 1.0, 0.0), pos, dir, tmp_norm, tmp_dot_uv);\n    if (t1 < t) {\n        t = t1;\n        norm = tmp_norm;\n        dot_uv_local = tmp_dot_uv;\n    }\n    \n    tmp_norm = norm;\n    tmp_dot_uv = dot_uv_local;\n    t1 = traceSquare(dot3, dot4, dot8, dot7, vec3(1.0, 0.0, 1.0), pos, dir, tmp_norm, tmp_dot_uv);\n    if (t1 < t) {\n        t = t1;\n        norm = tmp_norm;\n        dot_uv_local = tmp_dot_uv;\n    }\n    \n    tmp_norm = norm;\n    tmp_dot_uv = dot_uv_local;\n    t1 = traceSquare(dot5, dot6, dot8, dot7, vec3(0.0, 1.0, 1.0), pos, dir, tmp_norm, tmp_dot_uv);\n    if (t1 < t) {\n        t = t1;\n        norm = tmp_norm;\n        dot_uv_local = tmp_dot_uv;\n    }\n    \n    \n    if (t < INF) {\n        normal = normalize(norm);\n        dot_uv = dot_uv_local;\n    }\n    return t;\n    \n    \n}\n\nfloat traceTriangle(vec3 dot1, vec3 dot2, vec3 dot3,vec3 pos, vec3 dir, out vec3 normal) {\n    \n    float move;\n    \n    vec3 norm = planeThrough3Points(dot1, dot2, dot3, move);\n    \n    // dot(pos + t * dir, norm) == move\n    // t = (move - dot(pos, norm)) / dot(dir, norm)\n    \n    float divider = dot(dir, norm);\n    float div = move - dot(pos, norm);\n    \n    /*if (divider < 1e-12) {\n        return INF;\n    }*/\n    \n    float t = div / divider;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    \n   \n    vec3 v1 = normalize(dot1 - worldPos);\n    vec3 v2 = normalize(dot2 - worldPos);\n    vec3 v3 = normalize(dot3 - worldPos);\n    \n    float angle12 = acos(dot(v1, v2));\n    float angle13 = acos(dot(v1, v3));\n    float angle23 = acos(dot(v2, v3));\n    \n    if (abs(angle12 + angle13 + angle23 - radians(360.0)) < 1e-3) {\n        normal = normalize(norm);\n        float angle = acos(dot(normalize(dir), normal));\n        if (angle < radians(90.0)) {\n            normal = -normalize(norm);\n        }\n        return t;\n    } else {\n        return INF;\n    }\n    \n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal) {\n\n    vec3 dot1 = vec3(0.0, -0.99, 1.0);\n    vec3 dot2 = vec3(-sqrt(3.0) / 2.0, -0.99, -1.0/2.0);\n    vec3 dot3 = vec3(sqrt(3.0) / 2.0, -0.99, -1.0/2.0);\n    vec3 dot4 = vec3(0.0, sqrt(2.0) - 0.99, 0.0);\n    \n    float t = INF;\n    \n    vec3 norm = vec3(0.0, 1.0, 0.0);\n    \n    /*vec3 t1norm = norm;\n    float t1 = traceTriangle(dot1, dot2, dot3, pos, dir, t1norm);\n    if (t1 < t) {\n        t = t1;\n        norm = t1norm;\n    }*/\n    \n    vec3 t2norm = norm;\n    float t2 = traceTriangle(dot1, dot3, dot4, pos, dir, t2norm);\n    if (t2 < t) {\n        t = t2;\n        norm = t2norm;\n    }\n    \n    vec3 t3norm = norm;\n    float t3 = traceTriangle(dot2, dot1, dot4, pos, dir, t3norm);\n    if (t3 < t) {\n        t = t3;\n        norm = t3norm;\n    }\n    \n    vec3 t4norm = norm;\n    float t4 = traceTriangle(dot3, dot4, dot2, pos, dir, t4norm);\n    if (t4 < t) {\n        t = t4;\n        norm = t4norm;\n    }\n    if (t < INF) {\n        normal = normalize(norm);\n    }\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    const float R = 1.0f;\n    const float H = 0.1f;\n    float floorT = (-1.0 - pos.y) / dir.y;\n    if (floorT < 0.0)\n        return INF;\n    vec3 finalPos = pos + dir * floorT;\n    if (dot(finalPos.xz, finalPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    \n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 wPos = pos + t * dir;\n        normal = normalize(vec3(wPos.x, 0, wPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat isOccluded(vec3 pos, vec3 target) {\n    vec3 rvec = target - pos;\n    float dist = length(rvec);\n    vec3 dir = rvec / dist;\n    \n    vec3 normal = vec3(0, 0, 0);\n    \n    float t = -1.0;\n    \n    t = tracePyramid(pos, dir, normal);\n    if (dist >= t) {\n        return 0.1;\n    }\n    vec3 cylNormal = normal;\n    t = traceCylinder(pos, dir, cylNormal);\n    if (t > 0.0 && dist >= t) {\n        return 0.0;\n    }\n    \n    return 1.0;\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\n/*vec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}*/\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLighting(vec3 worldPos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec3 lightPos = LIGHT_POS + randDir * LIGHT_RADIUS;\n    vec3 toLight = lightPos - worldPos;\n    float occl = isOccluded(worldPos + normalize(toLight) * 1e-3, lightPos);\n    float lightAtten = 20.0f / dot(toLight, toLight) * occl;\n\n    vec3 light2Pos = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = light2Pos - worldPos;\n    float occl2 = isOccluded(worldPos + normalize(toLight2) * 1e-3, light2Pos);\n    float light2Atten = 10.0f / dot(toLight2, toLight2) * occl2;\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight))) * lightAtten * LIGHT_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Atten * LIGHT2_COLOR\n        + textureLod(iChannel0, viewVec, 10.0) * 0.3\n    ).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //CAMERA_POS = vec3(0.0, 1.2, -6.0);\n    float val = 15.5;\n    //val = iTime;\n    CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    vec2 screenUV = fragCoord/iResolution.xy;\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    //randVals = vec3(0.0, 0.0, 0.0);\n    randDir = normalize(randVals * 2.0 - 1.0);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    \n    \n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n\n    vec3 colorMult = vec3(1, 1, 1);\n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    int iterationType;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n\n    // Output to screen\n    for (int i = 0; i < 10; ++i) {\n        vec3 normal = vec3(0, 0, 0);\n        float nEnter = AIR_N;\n        vec3 color;\n        \n        float t = INF;\n\n        t = traceSphere(curPos - LIGHT_POS, curDir, LIGHT_RADIUS, normal);\n        if (t != INF) {\n            color = LIGHT_COLOR.rgb;\n            //color = normal;\n            iterationType = EMISSION;\n        }\n        \n        float l2_t = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, normal);\n        if (t > l2_t) {\n            t = l2_t;\n            color = LIGHT2_COLOR.rgb;\n            //color = normal;\n            iterationType = EMISSION;\n        }\n\n        /*float sphere_t = traceSphere(currentPos, viewVec, SPHERE_R, normal);\n        if (sphere_t < t) {\n            if (GLASS_R > randVals.y) {\n                iterationType = REFLECTION;\n            } else {\n                iterationType = REFRACTION;\n            }\n            t = sphere_t;\n        }*/\n        vec3 pyrNormal = normal;\n        float pyramid_t = tracePyramid(curPos, curDir, pyrNormal);\n        if (pyramid_t < t) {\n            \n            if (randVals.x < GLASS_R * 12.0) {\n                iterationType = REFLECTION;\n            } else {\n                iterationType = REFRACTION;\n            }\n            normal = pyrNormal;\n            t = pyramid_t;\n            color = reflect(curDir, normal);\n        }\n        \n        \n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(curPos, curDir, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            vec3 pos = curPos + t * curDir;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cylNormal;\n            iterationType = DIFFUSE;\n        }\n        /*vec3 rectNormal = normal;\n        vec2 rectDot;\nfloat rectT = traceSquare(vec3(-0.33, -0.99, 0.0), vec3(-0.33, -0.4, 0.0),\nvec3(0.33, -0.4, 0.0),vec3(0.33, -0.99, 0.0),curPos, curDir, rectNormal, rectDot);\n        if (rectT < t) {\n            t = rectT;\n            //color = LIGHT2_COLOR.rgb;\n            \n            iterationType = EMISSION;\n            normal = rectNormal;\n            color = normal;\n            color = vec3(0.0, rectDot);\n            color = texture(iChannel3, rectDot).rgb;\n            \n             if (randVals.x < 0.5) {\n                t = INF;\n                \n            }\n        }*/\n        float size = 0.1;\n        for (float ii = -0.3; ii < 0.3; ii += size) {\n            for (float ij = 0.0; ij < 0.4; ij += size) {\n            \n                for (float ik = -0.3; ik < 0.3; ik += size) {\n                    if (ii + ij + ik > -0.1) {\n                        continue;\n                    }\n                    vec3 rectNormal = normal;\n                    vec2 rectDot;\n                    float rectT = traceCube(vec3(ii, ij-0.99, ik), vec3(ii + size, ij+size - 0.99, ik + size), curPos, curDir, rectNormal, rectDot);\n                    if (randVals.x < 0.5) {\n                        rectT = INF;\n                    }\n                    if (rectT < t) {\n                        t = rectT;\n\n                        iterationType = EMISSION;\n                        normal = rectNormal;\n                        color = texture(iChannel3, rectDot* 10.0).rgb;\n\n                    }\n                }\n            }\n        }\n        \n        \n        // (c + t * v).y = -1.2\n        // t = (-1.2 -c.y) / v.y\n        float floorT = (-1.2 - curPos.y) / curDir.y;\n        if (floorT > 0.0 && floorT < t && length(curPos + floorT * curDir) < 10.0f) {\n            t = floorT;\n            vec3 pos = curPos + t * curDir;\n            color = texture(iChannel2, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            iterationType = DIFFUSE;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            if (iterationType == EMISSION) {\n                fragColor.rgb = colorMult* color;\n                break;\n            } else if (iterationType == DIFFUSE) {\n                fragColor.rgb += colorMult * computeLighting(curPos + t * curDir, color, normal, curDir);\n                break;\n            } else if (iterationType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                // fragColor.rgb = curDir;\n            } else if (iterationType == REFRACTION) {\n                curDir = refract(curDir, normal, nEnter / n1);\n                curPos = worldPos + curDir * 3e-2;\n                curDir = refract(curDir, normal, n1 / nEnter);\n                //fragColor.rgb = curDir;\n                // n1 = nEnter;\n                \n            }\n        } else {\n            fragColor.rgb = colorMult * texture(iChannel0, curDir).rgb;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*void mainImage( out vec4 z, in vec2 w ) {\n    vec3 d = vec3(w,1)/iResolution-.5, p, c, f, g=d, o, y=vec3(1,2,0);\n \to.y = 3.*cos((o.x=.3));\n\n    for( float i=.0; i<9.; i+=.01 ) {\n        f = fract(c = o += d*i*.01), p = floor( c )*.3;\n        if( cos(p.z) + sin(p.x) > ++p.y ) {\n\t    \tg = (f.y-.04*cos((c.x+c.z)*40.)>.8?y:f.y*y.yxz) / i;\n            break;\n        }\n    }\n    z.xyz = g;\n}*/\n\n\nvec2 translate(vec2 uv) {\n\tuv -= floor(vec2(0.0, 0.0));\n    return uv;\n}\n\nfloat random (vec2 uv) {\n    return fract(sin(dot(uv, vec2(135., 263.))) * 103.214532);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n\tuv *= 9. * vec2(aspect, 1.);\n    \n\n    uv = translate(uv);\n\n    vec3 color = vec3(random(floor(uv))) + vec3(random(floor(uv + vec2(.2))), .3, .1);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}