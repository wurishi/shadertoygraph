{"ver":"0.1","info":{"id":"McfyDB","date":"1721564660","viewed":98,"name":"Flower Polar Sine","username":"josedasArt","description":"PolarCoordinates","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["polarcoords"],"hasliked":0,"parentid":"MXVXDK","parentname":"Polar Coordinates as flower"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat chainSawPattern(in vec2 uv, float frec, float scal, float h, float neon)\n{\n    float x = uv.x * frec;\n    float m = min(fract(x), fract(1.0 - x)); \n    \n    float d = m * scal + h - uv.y;\n    \n    float c = 0.0;\n    if(neon > 0.0){\n       c = 0.03 / d;\n    }\n    else{\n       c = step(0.1, d);\n    }\n    return c;\n}\n\nvec2 poolarCoord(in vec2 uv)\n{\n    vec2 st = vec2(atan(uv.y ,uv.x), length(uv)); \n    //from [-Pi ,Pi] to [0, 1]\n    return vec2(st.x/(2.0*PI) + 0.5, st.y);\n}\n\nvec4 flower(vec2 uv)\n{\n    vec4 fragColor = vec4(0.0);\n    //Outter neon bounds\n    fragColor += vec4(vec3(chainSawPattern(uv, 1.0 + 0.9*iTime, 0.7, 0.0, 1.0)), 1.0);\n    fragColor -= vec4(vec3(chainSawPattern(uv, 1.0 + 0.9*iTime, 0.7, 0.05, 1.0)), 1.0);\n    //Remove negatives values\n    fragColor = max(fragColor, 0.0);\n    //Fill inside\n    fragColor += vec4(vec3(chainSawPattern(uv, 1.0 + 0.9*iTime, 0.7, 0.15, 0.0)), 1.0);\n    fragColor -= vec4(vec3(chainSawPattern(uv, 1.0 + 0.9*iTime, 0.7, 0.1, 0.0)), 1.0);\n    \n    return fragColor;\n}\n\nvec4 bandSine(vec2 uv)\n{\n    vec4 fragColor = vec4(0.0);\n    \n    // Crear una franja ondulada con la función seno\n    float frequency = 50.0 + 0.0*iTime;                    // Frecuencia de las ondulaciones\n    float amplitude = 0.02;                                // Amplitud de las ondulaciones\n    float center = sin(length(uv) * iTime * 1.9) * 0.5;    // Centro vertical de la franja\n    center = (center + 0.5)/2.0;\n    \n    // Función seno para las ondulaciones\n    float sineWave = sin(uv.x * frequency + 1.7) * amplitude + center;\n    \n    //Max dist glow\n    float maxDist = 0.10;\n    \n    float thickness = 0.01;\n    float distToWave1 = (uv.y - sineWave)/maxDist;\n    float distToWave2 = (uv.y - sineWave - thickness)/maxDist;\n   \n    //Outter neon bounds\n    fragColor += max(0.10/-distToWave1, 0.0);\n    fragColor -= min(0.10/-distToWave2, 0.0);\n    \n    //Fill\n    fragColor += step(sineWave, uv.y) - step(sineWave + thickness, uv.y);\n    \n    \n    return fragColor;\n}\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.588, 0.498, -0.312);\t\t\n    vec3 b = vec3(0.608 ,-0.292, 1.098);\t\n    vec3 c = vec3(-2.202, 1.000, 1.708);\t\n    vec3 d = vec3(2.557, 2.827, 2.218);\n\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - (0.0*iResolution.xy)) / iResolution.y;\n    uv -= vec2(iResolution.xy/(iResolution.y*2.0));\n    \n    //uv = fract(uv * 1.5) - vec2(0.5, 0.5); \n    \n    vec2 st = poolarCoord(uv);\n    \n    uv = st;\n    \n            \n    float d = length(uv);\n    vec4 color = vec4(palette(d + iTime*0.5), 1.0) * 1.8;\n    //Preview angle \n    //fragColor = vec4(st.x);\n    \n    fragColor = vec4(0.0);\n    \n    //Sine band\n    fragColor += bandSine(uv);\n    //Flower\n    fragColor += flower(uv);\n    \n    //Limit values\n    fragColor = min(fragColor, 1.0);\n    fragColor = max(fragColor, 0.0);\n    \n    //float d = dot(fragColor, vec4(1.0 / 4.0));\n    \n    fragColor *= color;\n}","name":"Image","description":"","type":"image"}]}