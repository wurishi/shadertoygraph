{"ver":"0.1","info":{"id":"MX2Szw","date":"1710711359","viewed":55,"name":"TP2 - sow1236 743","username":"sow1236","description":"TP 3\nTexturing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["texturing"],"hasliked":0,"parentid":"tlyXWW","parentname":"L2 - TP2 -Texturing"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(35.0,-10.,15.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\n    vec3 c;\n    float s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-4.0),0);\n  \n  u=Union(u,Dice(p,vec3( 0.0, 0.0, 2.0),4.0,1));\n  u=Union(u,Dice(p,vec3( -10.0, 0.0, 2.0),4.0,2));\n  u=Union(u,Dice(p,vec3( 10.0, 0.0, 2.0),4.0,3));\n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\n// Turbulence pour créer des motifs de bruit fractal \nfloat turbulence(vec3 p) {\n    float total = 0.0;\n    float frequence = 1.0;\n    float amplitude = 1.0;\n    for (int i = 0; i < 5; i++) { // 5 octaves\n        total += abs(Noise(p * frequence)) * amplitude;\n        frequence *= 2.0;\n        amplitude *= 0.5;\n    }\n    return total;\n}\n// p : point\n// l : wave lenght\nvec3 Axial (in vec3 p, float l)\n{\n    float r = sqrt ( pow(p.x,2.) + pow(p.y,2.) ) ;\n    r = 0.5 + 0.5 * cos (3.141592 * r * l) ;\n  return  mix( vec3(0,0,0), vec3(1,1,1), r );\n}\n// Concentric\n// p : point\n// l : wave length\n// n : noise quantity\nfloat Concentric(vec3 p, float l, float n)\n{\n    return (sin (((2. * 4.4) / l) * length(p.xy)) + 0.5) * 0.5;\n}\n// Fonction pour générer une texture uniforme (couleur unie)\nT textureUniforme(in vec3 p) {\n    vec3 couleur = vec3(0.5, 1.0, 0.5); // Couleur uniforme (blanche)\n    return T(couleur, 0.0); // Retourne la couleur uniforme sans indice\n}\n\n// Fonction pour générer une texture damier\nT textureDamier(in vec3 point) {\n    vec3 couleur1 = vec3(0.2, 0.2, 0.2); // Couleur 1 du damier (noir)\n    vec3 couleur2 = vec3(0.8, 0.8, 0.8); // Couleur 2 du damier (blanc)\n    float tailleCellule = 1.0; // Taille d'une cellule du damier\n    int x = int(floor(point.x / tailleCellule)); // Coordonnée x de la cellule\n    int y = int(floor(point.y / tailleCellule)); // Coordonnée y de la cellule\n    int z = int(floor(point.z / tailleCellule)); // Coordonnée z de la cellule\n\n    if ((x + y + z) % 2 == 0) {\n        return T(couleur1, 0.0); // Retourne la couleur 1 pour les cellules paires\n    } else {\n        return T(couleur2, 1.0); // Retourne la couleur 2 pour les cellules impaires\n    }\n}\n\n// Fonction pour générer une texture de bois\nT textureBois(in vec3 p) {\n    vec3 couleurBase = vec3(0.4, 0.2, 0.0); // Couleur de base du bois (brun foncé)\n    vec3 couleurClair = vec3(0.6, 0.4, 0.2); // Couleur claire du bois (brun clair)\n    float frequence = 2.0; // Fréquence du bruit fractal\n    float amplitude = 0.5; // Amplitude du bruit fractal\n\n    // Génération du bruit en plusieurs couches\n    float bruitBois = 0.0;\n    for (int i = 0; i < 5; i++) {\n        bruitBois += Noise(p * frequence) * amplitude;\n        frequence *= 2.0;\n        amplitude *= 0.5;\n    }\n\n    // Mélange avec une couleur plus claire\n    vec3 couleurBois = mix(couleurBase, couleurClair, bruitBois);\n\n    return T(couleurBois, 0.0); // Retourne la couleur de bois sans indice\n}\n\n// Fonction pour générer une texture de bois avec motifs axiaux\nT textureBoisAxial(in vec3 p) {\n    // Couleur de base du bois (brun foncé)\n    vec3 couleurBase = vec3(0.4, 0.2, 0.0); \n\n    // Couleur claire du bois (brun clair)\n    vec3 couleurClair = vec3(0.6, 0.4, 0.2); \n\n    // Fréquence du bruit fractal\n    float frequence = 2.0; \n\n    // Amplitude du bruit fractal\n    float amplitude = 0.5; \n\n    // Génération du bruit en plusieurs couches\n    float bruitBois = 0.0;\n    for (int i = 0; i < 5; i++) {\n        bruitBois += Noise(p * frequence) * amplitude;\n        frequence *= 2.0;\n        amplitude *= 0.5;\n    }\n\n    // Utilisation de la fonction Axial pour ajouter des motifs axiaux\n    vec3 motifAxial = Axial(p, 2.0);\n\n    // Mélange du bruit de bois avec la couleur de base et les motifs axiaux\n    vec3 couleurBois = mix(couleurBase, couleurClair, bruitBois);\n    couleurBois = mix(couleurBois, vec3(motifAxial), 0.5); // 0.5 est un facteur de mélange arbitraire\n\n    return T(couleurBois, 0.0); // Retourne la couleur de bois avec motifs axiaux sans indice\n}\n\n\n\n// Fonction pour générer une texture de marbre sans veines\nT textureMarbreSansVeines(in vec3 p) {\n    vec3 couleurClaire = vec3(1.0, 1.0, 1.0); // Couleur claire du marbre\n    vec3 couleurSombre = vec3(0.2, 0.2, 0.2); // Couleur sombre du marbre\n\n    // Calculer une texture de marbre uniforme sans tenir compte des veines\n    float bruitFractal = turbulence(p * 3.0); // Augmenter la fréquence pour obtenir un motif plus uniforme\n\n    // Mélanger les couleurs en fonction du bruit fractal\n    vec3 couleurMarbre = mix(couleurClaire, couleurSombre, bruitFractal);\n\n    return T(couleurMarbre, 0.0); // Retourner la couleur de marbre sans veines\n}\n\n// Fonction pour générer une texture de marbre avec veines en utilisant Concentric\nT textureMarbreAvecVeines(in vec3 p) {\n    // Couleur claire du marbre\n    vec3 couleurClaire = vec3(0.8, 0.8, 0.8); \n\n    // Couleur sombre du marbre\n    vec3 couleurSombre = vec3(0.2, 0.2, 0.2); \n\n    // Fréquence du bruit fractal pour le marbre\n    float frequenceMarbre = 3.0; \n\n    // Amplitude du bruit fractal pour le marbre\n    float amplitudeMarbre = 0.5; \n\n    // Calcul du bruit fractal pour le marbre\n    float bruitFractalMarbre = 0.0;\n    for (int i = 0; i < 5; i++) {\n        bruitFractalMarbre += Noise(p * frequenceMarbre) * amplitudeMarbre;\n        frequenceMarbre *= 2.0;\n        amplitudeMarbre *= 0.5;\n    }\n\n    // Utilisation de la fonction Concentric pour ajouter des veines\n    float veinesConcentriques = Concentric(p, 4.4, 1.0);\n\n    // Mélange des couleurs en fonction du bruit fractal et des veines concentriques\n    vec3 couleurMarbre = mix(couleurClaire, couleurSombre, bruitFractalMarbre);\n    couleurMarbre = mix(couleurMarbre, vec3(veinesConcentriques), 0.5); // 0.5 est un facteur de mélange arbitraire\n\n    return T(couleurMarbre, 3.0); // Retourne la couleur de marbre avec veines concentriques\n}\n\n\n\n\n\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.80,0.80,0.0),0.0);   \n}\n\nT Texture1(in vec3 p)\n{\n  return T(vec3(0.82,0.81,0.90),0.25);   \n}\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.80),0.0);   \n}\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.90),0.0);   \n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0)\n    {\n       return textureUniforme(p); \n    }\n    else if (vp.i==1)\n    {\n\n      return textureBoisAxial(p);\n    }\n    else if (vp.i==2)\n    {\n\n        return textureDamier(p);\n    }\n    else if (vp.i==3)\n    {\n\n        return textureMarbreAvecVeines(p);\n    }\n   \n\n  }\n\n// Structure pour les propriétés du matériau\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n};\n\n// Shade function calculates the shading with material properties\nvec3 Shade(vec3 p, vec3 n, vec3 e, Material material)\n{\n    // Point light position\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Direction of light to the point light\n    vec3 l = normalize(lp - p);\n\n    // Calculate material texture\n    T tex = Color(p, n);\n\n    // Components of ambient, diffuse, and specular light\n    vec3 ambient = material.ambient * tex.c;\n    vec3 diffuse = material.diffuse * clamp(dot(n, l), 0.0, 1.0) * tex.c;\n    vec3 specular = material.specular * pow(clamp(dot(reflect(e, n), l), 0.0, 1.0), material.shininess) * vec3(1.0, 1.0, 1.0);\n    \n    // Final color by combining components\n    vec3 color = ambient + diffuse + specular;\n\n    return color;\n}\n\n// Shadow function calculates shadow with material properties\nfloat Shadow(vec3 p, vec3 n, vec3 l, Material material)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p, l, 100.0, h, s);\n    if (!h)\n    {\n        return 1.0;\n    }\n    return 0.0; \n}\n\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage(out vec4 color, in vec2 pxy)\n{\n    // Picture in picture on\n    bool pip = true;\n    \n    // Pixel\n    vec2 pixel = Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    vec3 ro, rd;\n    Ray(m, pixel, ro, rd);\n\n    // Trace ray\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    float t = SphereTrace(ro, rd, 100.0, hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n    // Shade background\n    vec3 rgb = background(rd);\n\n    if (hit)\n    {\n        // Compute normal\n        vec3 n = ObjectNormal(pt);\n\n        // Material properties\n        Material material;\n        material.ambient = vec3(0.1, 0.1, 0.1);   // Ambient properties\n        material.diffuse = vec3(0.7, 0.7, 0.7);  // Diffuse properties\n        material.specular = vec3(1.0, 1.0, 1.0); // Specular properties\n        material.shininess = 32.0;               // Specular power\n\n        // Shade object with light\n        rgb = Shade(pt, n, rd, material);\n    }\n\n    // Uncomment this line to shade image with false colors representing the number of steps\n    if (pip == true)\n    {\n        rgb = ShadeSteps(s); \n    }\n\n    rgb = pow(rgb, vec3(1.0 / 2.4));\n    color = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}