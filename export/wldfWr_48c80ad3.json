{"ver":"0.1","info":{"id":"wldfWr","date":"1612561773","viewed":313,"name":"Square / Sine Wave FM","username":"Dutracgi","description":"Made this utility to help in another projet :) Feel Free to use it in your own, please reffer the original link :) !","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["waves","oscilloscope","wave","square","graph","plot","physics","amplitude","radio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Line Thickness\n#define tk 0.02\nfloat sqr_plot(float t, float low, float high, vec2 uv){\n    float l = 0.;\n    if(t<0.5){\n        float t2=low;\n        if(t2>uv.y && t2 < uv.y+tk){\n            l = 1.;\n        }\n        if(t>0.45-tk && t2<uv.y && uv.y<high) l = 1.0;\n    }\n    if(t>0.5){float t2=high; if(t2>uv.y && t2 < uv.y+tk) l = 1.;}\n    return l;\n}\n\nfloat sin_plot(float t, float low, float high, vec2 uv){\n  float l = 0.;\n  t*= high-low;\n  t+=low;\n  if(t>uv.y && t < uv.y+tk) l = 1.;\n  return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.*fragCoord/iResolution.xy-1.;\n    uv.x*=iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    //frequency base (move mouse aroung screen to change it!)\n    float f = 8.+8.*(iMouse.y/iResolution.y);\n    //wave generator (sine)\n    float t = 0.5*sin(uv.x*f+iTime)+0.5;\n    \n    //Plotter sqr_plot(wave, lowest point, highest point, screen uv)\n    float l = sqr_plot(t,-0.9,0.9,uv);\n    \n    //Plotter sin_plot(wave, lowest point, highest point, screen uv)\n    //l = sin_plot(t,-0.9,0.9,uv); //<- Uncomment Here to see the original wave!\n\n    col = vec3(l);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}