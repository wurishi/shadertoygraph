{"ver":"0.1","info":{"id":"XctcRM","date":"1730400829","viewed":54,"name":"ShaderBalling","username":"guilhermerameh","description":"Project for CG Class","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["starter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Funções de Noise (Perlin)\nfloat noise(vec2 p) {\n    return fract(sin(dot(p ,vec2(127.1, 311.7))) * 43758.5453123);\n}\n\nfloat smoothNoise(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = f*f*(3.0 - 2.0*f);\n    \n    float a = noise(i);\n    float b = noise(i + vec2(1.0, 0.0));\n    float c = noise(i + vec2(0.0, 1.0));\n    float d = noise(i + vec2(1.0, 1.0));\n    \n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n}\n\n\n// Função pra aumentar a saturação das cores (impedir que fiquem proximas do preto)\nvec3 saturate(vec3 color, float intensity) {\n    float avg = (color.r + color.g + color.b) / 3.0;\n    return mix(vec3(avg), color, intensity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Preparação tela e variáveis iniciais\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n\n    vec3 color = vec3(0.0);\n\n    float numBlobs = 100.0;\n    float time = iTime * 0.05;\n\n    float blobField = 0.0;\n    vec3 accumulatedColor = vec3(0.0);\n\n    float colorVariation = (sin(iTime * 0.001) * 0.5) + 0.5;\n    float vibranceVariation = (sin(iTime * 0.005) * 0.5) + 0.5;\n\n    // Loop pra usar uma variavei (i) pra adicionar randomificações em cima do perlin noise\n    for (float i = 0.0; i < numBlobs; i++)\n    {\n        vec2 randPos = vec2(fract(sin(i * 10.0) * 1000.0), fract(cos(i * 10.0) * 1000.0));\n        \n        vec2 noisePos = vec2(smoothNoise(randPos + time), smoothNoise(randPos + vec2(10.0, 10.0) + time));\n        vec2 pos = randPos + (noisePos - 0.5) * 0.4;\n\n        pos = fract(pos * 3.0);\n\n        float randomSize = 0.07 + fract(sin(i * 15.0) * 0.5) * 0.01;\n        float d = length(uv - pos) - randomSize;\n\n        vec3 blobColor = vec3(fract(sin(i*0.05 + colorVariation * 5.0) * 0.5 + 0.5), \n                              fract(cos(i*0.1 + colorVariation * 5.0) * 0.5 + 0.5), \n                              fract(sin(i*0.15 + colorVariation * 5.0) * 0.5 + 0.5));\n        \n        float blobIntensity = smoothstep(0.02, 0.05, -d);\n\n        float saturationBoost = smoothstep(0.04, 0.06, -d);\n        vec3 saturatedBlobColor = saturate(blobColor, 1.0 + saturationBoost * 1.5 * vibranceVariation);\n\n        accumulatedColor += saturatedBlobColor * blobIntensity;\n        blobField += blobIntensity;\n    }\n\n    color = accumulatedColor / blobField;\n    color *= smoothstep(0.7, 0.8, blobField);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}