{"ver":"0.1","info":{"id":"ftcyWN","date":"1659786295","viewed":262,"name":"Celtic knot 4e editable","username":"FabriceNeyret2","description":"variant of https://shadertoy.com/view/fl3yD4\ninteractively pick and displace any torii ( not too far away ) despite procedural draw.\nIf you don't want shaking, just stop shader and keep picking ;-)","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["2d","pattern","2tweets","short","celtic","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/fl3yD4\n\nvoid mainImage( out vec4 O, vec2 u ) { \n    O  = T(u);         \n    O *=  .8 + .2 * cos( O.w*2.   + vec4(0,23,21,0)  ) ; // coloring\n    if (O == O-O ) O += .4;                              // grey background\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === draw nested torii. read individual offsets in buffB\n\n#define S(r) smoothstep( 12./R.y, 0., abs(length(V)-.85) -r )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,  \n         U = 2.*( u+u - R ) / R.y, V,D,I;\n    O-=O;\n    float a, z = 9., i;\n    for( int k=0; k<9; k++ )                // check neighborhood for overlaps\n        D = vec2(k%3,k/3),                  // offset to neighbor\n        I = floor(U-D)+5., i = I.y+5.*I.x,  //  cell Id\n        V = fract(U) + D -1.5               // local coordinate \n          - T(vec2(i,0)).xy                 // edited offset for this torus\n          + .01*cos( iTime*30. +vec2(0,11)+ 6.3* fract(1e4*sin(dot(I,17.-R))) ), // shake\n        a = sin ( 4.* atan(V.y,V.x) ),      // depth oscillation at each torus angle\n        a < z && S(.07) > .5 ?              // top z + opaque mask:\n            O *= 1.-S(.07), O += vec4(vec3(S(.05)), i) , z=a  : z; // draw, .w = id, update z\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// === maintain offset for each object\n\nvoid mainImage( out vec4 O, vec2 u )\n{    \n    vec2  R = iResolution.xy,  \n          M = iMouse.xy, P = iMouse.zw *vec2(1,-1);  // current mouse pos + drag init\n    float i = texture(iChannel1,M/R).w;              // on which id does the mouse click.\n\n    O = T(u);\n    if ( u == vec2(1.5) && P.y < 0. ) O.z = i;       // pick: memorize id\n    if ( P.x > 0. && P.y > 0. && u-.5 == vec2(T(1).z,0) ) // save the edited pos\n        O.xy = 4.* ( M - P ) / R.y;\n    \n // if ( P.x > 0. && P.y > 0. && u-.5 == vec2(i,0) ) // save the edited pos ( less robust )\n //    O.xy = 4.* ( M - P ) / R.y;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n","name":"Common","description":"","type":"common"}]}