{"ver":"0.1","info":{"id":"Mfyczm","date":"1731628463","viewed":157,"name":"Abstract Dreams","username":"leon","description":"noise as usual","likes":22,"published":1,"flags":32,"usePreview":0,"tags":["weird"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// abstract dreams\n// leon denise 2024-11-15\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = fragCoord/iResolution.xy;\n  fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// abstract dreams\n// leon denise 2024-11-15\n\nvec3 rng;\n\nmat3 look (vec3 from, vec3 to)\n{\n  vec3 z = normalize(to-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return mat3(x,y,z);\n}\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nvec3 hash33(vec3 p3)\n{\n  p3 = fract(p3 * vec3(.1031, .1030, .0973));\n  p3 += dot(p3, p3.yxz+33.33);\n  return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat gyroid (vec3 p) { return dot(sin(p),cos(p.yzx)); }\n\nfloat fbm (vec3 p)\n{\n  float r = .0;\n  float a = 1.;\n  for (float i = .0; i < 3.; ++i) {\n    p += r * .5;\n    r += gyroid(p/a)*a;\n    a /= 1.8;\n  }\n  return r;\n}\n\nfloat map (vec3 p)\n{\n  vec3 q = p;\n  float d = 100.;\n  float a = 1.;\n  float r = .9;\n  float t = iTime/3.;\n  t = t * 1.5 +  p.z * .2 + rng.x * .2;\n  for (float i = 0.; i < 10.; i++) {\n    t += i * 2.;\n    r += .5 * sin(i*5.-t);\n    float s = mod(i,2.) < .5 ? -1. : 1.;\n    p.x = abs(p.x)-r*a;\n    p.yz *= rot(t/a*s);\n    p.xz *= rot(t/a*s);\n    d = min(d, length(p)-.1*a*rng.y);\n    a /= 1.1;\n  }\n  d -= fbm(q*3.)*.1*rng.z;\n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = fragCoord/iResolution.xy;\n  vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 pos = vec3(4);\n  rng = hash33(vec3(fragCoord,floor(iTime*60.)));\n  pos.xz *= rot(iTime/30.);\n  vec3 ray = normalize(look(pos, vec3(0)) * vec3(p,4.));\n  pos += ray * rng.z*.1;\n  float total = 0.;\n  for (float i = 1.; i > 0.; i -= 1./30.)\n  {\n    float dist = map(pos);\n    if (dist < .001 * total || total > 50.) break;\n    pos += ray * dist;\n    total += dist;\n  }\n  vec3 color = vec3(0);\n  if (total < 50.)\n  {\n    vec2 e = vec2(.5*rng.y+.1,0);\n    #define M(u) map(pos-u)\n    vec3 n = normalize(M(0.)-vec3(M(e.xyy),M(e.yxy),M(e.yyx)));\n    vec3 l = normalize(pos);\n    float li = (dot(n, l));\n    color = vec3(1);\n    color = 1.-.5*abs(n);\n    color *= (li*.5+.5);\n  }\n\n  vec3 temporal = texture(iChannel0, uv).rgb;\n  vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n  for(int x = -1; x <= 1; ++x){\n      for(int y = -1; y <= 1; ++y){\n          vec3 c = texture(iChannel0, uv + vec2(float(x), float(y)) / iResolution.xy).rgb;\n          minColor = min(minColor, c);\n          maxColor = max(maxColor, c);\n      }\n  }\n  temporal = clamp(temporal, minColor, maxColor);\n  color = mix(color, temporal, 0.9);\n  \n  fragColor = vec4(color, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}