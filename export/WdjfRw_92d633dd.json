{"ver":"0.1","info":{"id":"WdjfRw","date":"1589730854","viewed":94,"name":"interference effect","username":"foxiepaws","description":"old school demo effect","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["oldschool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141579\n\nmat2 rot(float deg) {\n    deg /= 180./3.141579; // convert to radians;\n    float s=sin(deg), c=cos(deg);\n    return mat2(c, -s, s, c);\n}\n\nvec3 colormap(vec2 v) {\n    \n    \n   return vec3(v.y,0.0,v.x);\n}\n\n\nvec2 calc (vec2 cv, vec2 uv, float t) {\n \tfloat sv = 0.0;\n    float dv = 0.0;\n    float x = uv.x;\n\tfloat y = uv.y;\n    float cx = cv.x;\n\tfloat cy = cv.y;\n    // create concentric circles from the centre of the screen\n    sv = sin(sqrt(100.0 * ((x * x) + (y * y))) + 1.0 + t);\n    // use dynamic vector to create interference pattern by moving centre\n    dv = sin(sqrt(100.0 * ((cx * cx) + (cy * cy))) + 1.0 + t);\n    return vec2(sv, dv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv *= 10.; // zoom out\n    vec2 ov = uv; // create copy of vector\n    uv.x += 5.*sin((iTime/1.)/5.0);                    // dynamic x movement\n    uv.y += 7. * cos((iTime/1.)/3.0);                    // dynamic y movement\n\tuv *= .5 * (2.+(1.*sin(2.*pi*.04*iTime)/10.));  // dynamic zoom\n    uv *= rot(22.5+(180.*sin(2.*pi*.01*iTime)));    // dynamic rotation\n    float t = iTime;\n    vec2 v = calc(uv,ov,t);\n\tvec3 hole = colormap(v);\n   \n    fragColor = vec4(hole,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}