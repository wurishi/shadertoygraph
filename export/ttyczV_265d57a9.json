{"ver":"0.1","info":{"id":"ttyczV","date":"1611335858","viewed":105,"name":"Simple 2D shapes","username":"capslpop","description":"Its easier to make 2D shapes if you normalize the uv vector for -1 to 1. This way you don't have to do any offsetting of the shapes to get them to the center of the screen.  ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2dshapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy)*2.0 - 1.0;\n    \n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    float uvl = length(uv * tan(uv));\n    \n    float time = (sin(iTime) + 1.0) / 2.0;\n    \n    if (uvl + time < 0.9 && uvl/uv.y + time > 0.495)\n    {\n        col += vec3(1.0, 0.0, 0.0);\n    }\n    \n    if (uv.x * uvl + time < 0.5)\n    {\n        col += vec3(0.0, 0.0, 1.0);\n    }\n    \n    if (uv.x * uvl + time > 0.5)\n    {\n        col += vec3(0.0, 0.0, 0.5);\n    }\n    \n    if (uv.y / uvl + time > 0.8)\n    {\n        col += vec3(0.0, 1.0, 0.0);\n    }\n    \n    if (uv.x > 0.5)\n    {\n        col += vec3(0.0, 0.5, 0.0);\n    }\n    \n    if (uv.y < -0.5)\n    {\n        col += vec3(0.5, 0.0, 0.0);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}