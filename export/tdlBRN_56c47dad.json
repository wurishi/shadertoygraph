{"ver":"0.1","info":{"id":"tdlBRN","date":"1587926972","viewed":103,"name":"lightRays","username":"BlancC","description":"rays models -- > build on top of this : \nhttps://www.youtube.com/watch?v=dhuigO4A7RY","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265358979323846264338\n\nvec3 Rainbow(vec2 uv, float zoomAmnt, float speed, vec2 startFinishSteps){\n    \n    float ratioRnbow = abs(uv.x) * 20.;\n    float angleRnbow = uv.y * 6.;\n    vec3 rgbRnbow = sin(ratioRnbow + angleRnbow + vec3(0., 1., 2.))+cos(speed + ratioRnbow + angleRnbow + vec3(0., 2., 4.));\n    \n    float ratioStartStep = startFinishSteps.x;\n    float ratioFinishStep = startFinishSteps.y;\n    \n    vec2 sStep = smoothstep(0., ratioStartStep * zoomAmnt, abs(uv));\n\tvec2 fStep = smoothstep(ratioFinishStep * zoomAmnt, ratioStartStep * zoomAmnt, abs(uv)); \n    \n    float stepper = sStep.x * fStep.x + sStep.y * fStep.y;\n    \n    return stepper * rgbRnbow; \n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nmat2 Rot(float a){\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nvec3 Star(vec2 uv, float flare, float zoomAmnt, float rotSpeed){\n    float d = length(uv);\n    vec3 m = vec3(.04/d);\n    \n    \n    vec3 rnb = Rainbow(uv, zoomAmnt, iTime + uv.x * uv.y, vec2(0.3, 0.7));\n    float ray = max(0., 1. - abs(uv.x * uv.y * 400.));\n    m += ray * (1. + rnb) * (abs(flare) + .4);\n    \n    uv *= Rot(M_PI / 4. + iTime * rotSpeed);\n    ray = max(0., 1. - abs(uv.x * uv.y * 800.));\n    m += ray * (.6 + .5 * rnb) * (abs(flare) + .4);\n    \n    m *= smoothstep(1., .2, d);\n    \n    return m;\n}\nvec3 lightRay(vec2 uv, float zoomAmnt, float rotSpeed, float centerIntensity, vec2 diag){\n    \n    float d = length(uv);\n    vec3 m = vec3(0.);\n    \n    vec3 rnb = Rainbow(uv, zoomAmnt, iTime * 2. + uv.x * uv.y, vec2(0.4, .8));\n    vec3 colors = vec3(0.01 / d);\n\n    float rayVal = 0.;\n    if(abs(uv.x) < centerIntensity && diag.x == 0.)rayVal += 1. - abs(uv.y);\n    if(abs(uv.y) < centerIntensity && diag.y == 0.)rayVal += 1. - abs(uv.x);\n    \n    colors += vec3(rayVal);\n    \n    if(diag.x + diag.y > 0.){\n        rayVal = 0.;\n    \tvec2 newUv = uv * Rot( M_PI / 6. + rotSpeed);\n    \tif(abs(newUv.y) < centerIntensity)rayVal += 1.0 - abs(newUv.x);\n    \tnewUv = uv * Rot(-M_PI / 6. - rotSpeed);\n    \tif(abs(newUv.y) < centerIntensity)rayVal += 1.0 - abs(newUv.x);\n    \tcolors += vec3(rayVal * smoothstep(2.2, .1, d));\n        colors += rnb * vec3(rayVal);\n    }\n    \n    \n    //colors *= vec3(1., .1, .02);\n    if(diag.y == 0.)colors += (rnb * .3 + .3) * abs(sin(uv.x * 4. + iTime) * (.01 / abs(uv.y)));\n    if(diag.x == 0.)colors += (rnb * .3 + .3) * abs(sin(uv.y * 4. + iTime) * (.01 / abs(uv.x)));\n    \n    colors *= smoothstep(1., .4, d );\n        \n    \n    \n    return colors;\n}\n\nvec3 starLayer(vec2 uv, float zoomAmnt, float index){\n    \n    vec3 col = vec3(0);\n    vec2 gv = fract(uv) -.5;\n    vec2 id = floor(uv);\n    \n    int y,x;\n    \n    for(y = -1; y <=1; y++){\n        for(x = -1; x <=1; x++){\n            vec2 offs = vec2(x,y);\n            float r = Hash21(id + offs + index);\n            float size = 1. - .5 * fract(r * 345.223);\n            \n            float r2 = fract(r* 34.);\n            float r3 = fract(r* 79.);\n\n            vec3 star = lightRay(gv - offs - vec2(r, r2) + .5, zoomAmnt,  iTime * fract(r * 61.), .005, vec2(round(r2), round(r3)));\n            \n            \n    \t\tstar *= (sin(iTime * (.6 + r)) * .5 + .5 ) * sin(iTime * size) * 2.; \n            col += star * size * (sin(iTime + index * 32.1) * .5 + .5);\n        }\n    }\n    \n    return col ;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float zoomAmnt = 3.;\n    uv *= zoomAmnt;\n    uv *= Rot(M_PI / 4.);\n\n    vec3 col = vec3(0.);\n\t\n    int k = 0;\n    int AmnLayers = 2;\n    for( k = 0; k < AmnLayers; k++){\n        \n        \n        vec2 newUv = uv;\n        //uv * Rot(fract(Hash21(vec2(float(k))) * 326.3));\n        newUv *= zoomAmnt * float(k+1);\n    \tcol += starLayer(newUv, zoomAmnt, float(k) / float(AmnLayers));\n    }\n    \n    //col += lightRay(uv, zoomAmnt, 0., .006, vec2(1., 0.));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}