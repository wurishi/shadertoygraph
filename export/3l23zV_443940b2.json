{"ver":"0.1","info":{"id":"3l23zV","date":"1560304391","viewed":491,"name":"Radial hexagon space","username":"edo_m18","description":"Radial hexagon space","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["radial","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPlane(vec3 p, vec4 n)\n{\n    return dot(p, n.xyz) + n.w;\n}\n\nfloat map(vec3 p)\n{\n    p = -abs(p);\n    p.y += 1.5;\n    return sdPlane(p, vec4(0, 1, 0, 1));\n}\n\nmat3 camera(vec3 ro, vec3 ta, vec3 up)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat hexDist(vec2 p)\n{\n    p = abs(p);\n    \n    float c = dot(p, normalize(vec2(1., 1.73)));\n    \n    return max(c, p.x);\n}\n\nvec4 hexCoords(vec2 uv)\n{\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - r * 0.5, r) - h;\n    vec2 gv = length(a) < length(b) ? a : b;\n    \n    vec2 id = gv - uv;\n    \n    float x = atan(gv.x, gv.y);\n    float y = 0.5 - hexDist(gv);\n    \n    return vec4(x, y, id);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = (U - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    float time = iTime * 0.3;\n    float dist = 20.0;\n    vec3 ro = vec3(cos(time) * dist, 0, sin(time) * dist);\n    vec3 ta = vec3(0, 0, 0);\n    \n    vec3 up = normalize(vec3(0, 1, 0));\n    vec3 ray = camera(ro, ta, up) * normalize(vec3(uv, 1.5));\n    \n    const int max_march = 128;\n    \n    vec3 p = ro;\n    \n    float d = 0.0, t = 0.0;\n    for (int i = 0; i < max_march; i++)\n    {\n        d = map(p);\n        \n        if (d < 0.01) break;\n        \n        p += ray * d;\n        t += d;\n    }\n    \n    if (d < 0.01)\n    {\n        vec2 st = p.xz;\n        vec4 hc = hexCoords(st);\n        \n        float time = iTime * 5.0;\n        \n        float l = pow(sin((length(hc.zw) - time) * 0.3), 4.0);\n        \n        vec3 c = vec3(S(0.01, 0.03, hc.y));\n        \n        float f = exp(-t * 0.08);\n        \n        col.rgb = c * l * f;\n    }\n\n    vec3 fog = vec3(0.5, 0.7, 1.5) * t * 0.015;\n    \n    O = vec4(col + fog,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define S(a, b, t) smoothstep(a, b, t)","name":"Common","description":"","type":"common"}]}