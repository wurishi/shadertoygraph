{"ver":"0.1","info":{"id":"4dccD7","date":"1519114052","viewed":362,"name":"electron orbital","username":"laserdog","description":"cool gif thing","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","practice","gif"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi  3.14159\n#define tau 6.28318\n#define numRings 15.\n#define scaledTime iTime*3.\n\nmat2 rotate(float rads)\n{\n\treturn mat2(vec2(cos(rads), -sin(rads)), vec2(sin(rads), cos(rads)));\n}\n\nvec3 circle(vec2 p, vec2 scale, vec2 offset)\n{\n    p -= offset;\n    p *= vec2(1. / scale.x, 1. / scale.y);\n\treturn mix(vec3(1.), vec3(0.), smoothstep(.0, .25, length(p) - 1.));\n}\n\nfloat bias(float time, float bias)\n{\n\treturn (time / ((((1.0/bias) - 2.0)*(1.0 - time))+1.0));\n}\n\nfloat gain(float time, float gainAmount)\n{\n    time = clamp(time, 0., 1.);\n\tif (time < 0.5)\n\t\treturn bias(time * 2.0, gainAmount) / 2.0;\n\telse\n\t\treturn bias(time * 2.0 - 1.0, 1.0 - gainAmount) / 2.0 + 0.5;\n}\n\nfloat ease(float time, float gainAmount, bool flip)\n{\n    float t = smoothstep(0., 1., time);\n    return flip ? mix(gain(time * 2., gainAmount) * .5, .5 - .5 * gain(time * 2. - 1., gainAmount), t)\n        : mix(gain(time * 2., gainAmount) * .5, gain(time * 2. - 1., gainAmount) * .5 + .5, t);\n}\n\nvec3 ring(vec2 p, vec2 scale, float rads)\n{\n    p = rotate(rads) * p;\n    p *= vec2(1. / scale.x, 1. / scale.y);\n    \n    float easeGrow = ease(mod(scaledTime, tau * 2.) / (tau * 2.), .16, false) * 2. * tau;\n    float easeBounce = ease(mod(scaledTime, tau * 2.) / (tau * 2.), .08, true) * 2.;\n    \n    float angle = mod(atan(p.y, p.x) + tau, tau);\n    vec2 ellipsePoint = vec2(cos(angle), sin(angle));\n        \n    vec3 whiteDot = circle(p, vec2(.05) / mix(scale * 2. / scale.x, vec2(1.15), easeBounce), vec2(cos(-easeGrow), sin(-easeGrow)));\n    float clip = step(angle, tau * 2. - easeGrow) * step(tau * 2. - easeGrow, angle + tau);\n    return clip * mix(vec3(1., 0., 0.), vec3(0.), smoothstep(.02, .03, distance(p, ellipsePoint)))\n        + whiteDot;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float easeAmount = ease(mod(scaledTime, tau * 2.) / (tau * 2.), .16, true) * 2.;\n    vec2 initialScale = vec2(.9 + easeAmount * .3, 1. - easeAmount * .7);\n    fragColor.rgb = vec3(.164, .114, .27);\n    \n    for (float i = 0.; i < numRings; i++) \n    {\n        float rads = easeAmount * (-3. * pi / 4. + i * pi / 4.) + pi / 2.;\n        vec2 scale = initialScale * pow(.9, i);\n        fragColor.rgb += ring(uv, scale, rads);\n    }\n}","name":"Image","description":"","type":"image"}]}