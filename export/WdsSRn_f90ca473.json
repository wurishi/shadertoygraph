{"ver":"0.1","info":{"id":"WdsSRn","date":"1550483586","viewed":224,"name":"Circle inversion example","username":"darkeclipz","description":"Circle inversion in 2D. \n - with sphere inversion.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","folding","sphereinversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define AA 4.\nmat2 r2(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat checker(vec2 p, float scale) {\n    p = trunc(fract(p)*scale);\n    if(mod(p.x + p.y, 2.) == 0.) return 1.;\n    return 0.;\n}\n\nvec2 circleFold(vec2 z, float fixedRadius2, float minRadius2) {\n    float r2 = dot(z,z);\n    if(r2 < minRadius2)        return z * (fixedRadius2 / minRadius2);\n    else if(r2 < fixedRadius2) return z * (fixedRadius2 / r2);\n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    for(float aax = 0.; aax < AA; aax++)\n    for(float aay = 0.; aay < AA; aay++) {\n        vec2 uv = (2.*(fragCoord+vec2(aax / AA, aay / AA)-vec2(.5))-R)/R.y;\n        uv = circleFold(uv, .85, .2); \n        col += vec3(checker(uv, 4.));\n    }\n    fragColor = vec4(col / (AA*AA),1.0);\n}\n\n/* 3D version */\n// http://www.fractalforums.com/fragmentarium/fragmentarium-an-ide-for-exploring-3d-fractals-and-other-systems-on-the-gpu/15/\nvoid sphereFold(inout vec3 z, inout float dz) {\n    \n    float fixedRadius2 = .6;\n    float minRadius2 = 0.3;\n\tfloat r2 = dot(z,z);\n\tif (r2< minRadius2) {\n\t\tfloat temp = (fixedRadius2/minRadius2);\n\t\tz*= temp;\n\t\tdz*=temp;\n\t} \n    else if (r2<fixedRadius2) {\n\t\tfloat temp =(fixedRadius2/r2);\n\t\tz*=temp;\n\t\tdz*=temp;\n\t}\n}","name":"Image","description":"","type":"image"}]}