{"ver":"0.1","info":{"id":"3tfBD2","date":"1597708212","viewed":95,"name":"Julia experiment","username":"dub","description":"Julia fractal experiment","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// reference:\n// https://en.wikipedia.org/wiki/Mandelbrot_set\n\n#define PI 3.1415926538\n#define PI2 PI/2.0\n\n// from: https://developer.download.nvidia.com/cg/saturate.html\nvec3 saturate(vec3 x)\n{\n  return max(min(x, 1.0), 0.0);\n}\n\n// from: http://www.chilliant.com/rgb2hsv.html\nvec3 HUEtoRGB(in float H)\n{\n    float R = abs(H * 6.0 - 3.0) - 1.0;\n    float G = 2.0 - abs(H * 6.0 - 2.0);\n    float B = 2.0 - abs(H * 6.0 - 4.0);\n    return saturate(vec3(R,G,B));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = vec2(fragCoord.x / iResolution.y, fragCoord.y / iResolution.y);\n    uv *= 2.0; // transform to [-1, 1] y domain\n    uv -= vec2(aspect, 1.0); // center on screen\n    //uv /= pow(2.0, iTime);\n    uv *= 1.5;\n    //uv /= pow(2.0, sin(iTime*PI2/18.0-PI2)*9.0+9.0);\n    \n    vec2 xy = vec2(0.0, 0.0);\n    int i = 0;\n    \n    // |z| <= 2\n    for (;dot(uv, uv) < 65536.0 && i < 1000; i++)\n    {\n        vec2 c = vec2(abs(tan(iTime*PI2/20.2-PI2))*0.5, abs(tan(iTime*PI2/30.1-PI2))*0.5);\n        // z^2 + c = x^2 + 2ixy -y^2 + cx + icy\n        uv = vec2(uv.x*uv.x - uv.y*uv.y, 2.0*uv.x*uv.y) + c;\n    }\n\n    fragColor = vec4(HUEtoRGB(mod(0.5/log(float(i)), 1.0)), 1.0);\n    //fragColor = (i < 1000) ? vec4(HUEtoRGB(float(i)/1000.0), 1.0) : vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}