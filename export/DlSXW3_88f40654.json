{"ver":"0.1","info":{"id":"DlSXW3","date":"1676734228","viewed":327,"name":"Hex Moire Mandala","username":"ChunderFPV","description":"Based on Hextile: https://www.shadertoy.com/view/dtSXWV\nThe pattern resets at midnight.\nMouse Y to zoom.","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["moire","hexagon","hex","tile","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec2 u = U; // screen coords\n    float r = length(u); // dist from 0\n    u *= S/(1.-Z); // apply scale & zoom\n    \n    vec3 c = texture(iChannel0, XY/R).rgb; // load buffer A\n    c = c*c*c*.02; // contrast & brightness\n    \n    // bright points\n    c += pow(hexgrid(u), 8.) * hexcolor(u, T, .0, true) * .7; // set 1\n    c += pow(hexgrid(u-V), 8.) * hexcolor(u, T, .5, true) * .7; // set 2\n    \n    //float b = 1e4+mod(iDate.w/6.3, 1.);   // concentric multiplier\n    //c *= cos(hex(u*.866/b)*b*6.3)*.5+.7; // concentric\n    \n    c *= 2.3-r; // darken edges & brighten center\n    \n    RGBA = vec4(c, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec2 u = U*S/(1.-Z); // screen coords\n    vec3 c = texture(iChannel0, mix(XY/R, vec2(.5), B)).rgb*.96; // frame blur\n    \n    c += pow(hexgrid(u), 2.) * hexcolor(u, T, .0, false); // set 1\n    c += pow(hexgrid(u-V), 2.) * hexcolor(u, T, .5, false); // set 2\n    \n    vec2 v = abs(fract(XY/R+.5)-.5)/fwidth(XY/R)/5.; // vignette\n    c = min(c, min(v.x, v.y)*.75);\n    \n    RGBA = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define HUE(a) (cos(radians(vec3(100, 140, 190))-((a)*6.2832))*.5+.5) // hue pallete\n#define BRI(x) ((sin((x)*6.3)*.5+.5)+.2) // brightness\n#define R iResolution.xy\n#define T (iDate.w/3600.)        // time\n#define Z (iMouse.y/R.y)         // zoom\n#define B (-.004/pow(Z+1., 2.))  // blur strength\n#define S (sqrt(R.y)/1.2)        // scale\n#define V vec2(.5, .866)\n#define U ((2.*XY-R)/R.y)\n\n// single hexagon\nfloat hex(vec2 u)\n{\n    u = abs(u);\n    vec2 h = vec2(u.x/.866, u.y+u.x*.577);\n    return max(0., 1.-max(h.x, h.y));\n}\n\n// grid of hexagons\nfloat hexgrid(vec2 u)\n{\n    vec2 v = vec2(1, 1.732);\n    return hex((u-round(u/v)*v)*v.y);\n}\n\n// (coords, time, offset: 0 or .5, grayscale: true/false)\nvec3 hexcolor(vec2 u, float t, float o, bool g)\n{\n    vec2 v = vec2(1, 1.732);\n    u = round(u/v+o)-o;\n    float x = u.x,\n          y = u.y*v.y,\n          m = x*x+y*y;\n    return (g) ? vec3(BRI(m*t)): HUE(m*t) * BRI(m*t);\n}\n","name":"Common","description":"","type":"common"}]}