{"ver":"0.1","info":{"id":"MtGyWR","date":"1548726466","viewed":421,"name":"RayPicking","username":"felipunkerito","description":"Trying to get a mouse SDF intersection. Help!!! \nEDIT** just figured it out thanks to a comment from [url=https://www.shadertoy.com/view/4ldSWB]@lara[/url].","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["3d","intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture( iChannel0, uv );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define EPS  1e-3\n#define STEPS 512\n#define FAR  100.\n\nfloat map( vec3 p )\n{\n\n    float spe = length( p ) - 1.0;\n    float pla = p.y + 1.0;\n    \n    if( pla < spe ) spe = pla;\n    \n    return spe;\n\n}\n\nvec3 nor( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0 );\n    \n    return normalize( vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                            map( p + e.yxy ) - map( p - e.yxy ),\n                            map( p + e.yyx ) - map( p - e.yyx )\n                          )\n                    );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0; d = 0.0;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        vec3 p = ro + rd * t;\n        d = map( p );\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd, vec2 uv )\n{\n\n    float t = 0.0, d = 0.0;\n    t = ray( ro, rd, d );\n    \n    vec3 p = ro + rd * t;\n    vec3 n = nor( p );\n    vec3 lig = vec3( 0, 0, 2 );\n    vec2 uvl = ( -iResolution.xy + 2.0 * iMouse.xy ) / iResolution.y;\n    vec3 lir = normalize( vec3( uvl, -1 ) );\n    float dO = 0.0, tO = ray( lig, lir, dO );\n    lig += lir * tO;\n    lig = normalize( lig );\n    \n    vec3 ref = reflect( rd, n );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( n, lig ) );\n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    \n    vec3 col = vec3( 0 );\n    \n    col += 0.1 * amb;\n    col += 0.2 * dif;\n    col += spe;\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n    \n    vec3 ro = vec3( 0, 0, 2 );\n    vec3 rd = normalize( vec3( uv, -1 ) );\n    \n    float t = 0.0, d = 0.0;\n    t = ray( ro, rd, d );\n    \n    vec3 col = d < EPS ? shad( ro, rd, uv ) : vec3( 0 );\n    \n    fragColor = vec4( col, 1 );\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}