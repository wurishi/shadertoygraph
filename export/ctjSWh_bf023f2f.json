{"ver":"0.1","info":{"id":"ctjSWh","date":"1675998363","viewed":82,"name":"Rainbow worms","username":"ianertson","description":"rainbow worms :)\nLook around with the mouse","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["patterns","rainbow","worms"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define T (iTime)\n#define M_PI (3.1416)\n#define TAU (M_PI * 2.0)\n\n\nfloat getDist(vec3 uv) {\n\n    vec2 uu = uv.xy;\n    vec3 c = texture(iChannel0, uu).rgb;\n    \n    return pow(luma(c), 4.);\n}\n\nvec3 getNormal(vec3 uv) {\n    vec2 e = vec2(4.0/R.x, 4.0/R.y);\n    return normalize(getDist(uv) - vec3(\n        getDist(uv - e.xyy),\n        getDist(uv - e.yxy),\n        getDist(uv - e.yyx)\n    ));\n}\n\nvec3 shade(vec2 uv) {\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    vec2 uc = uv;//(fc-0.5*R.xy)/R.y;\n    vec3 ro = vec3(0, 0, -1);\n    vec3 rd = (vec3(uc.xy, 1.0));\n    \n    vec3 normal = getNormal(rd);\n    \n    vec3 pos = ro+rd*3.;\n    \n    vec3 lpos = ro+rd+(vec3(1.+cos(T), 2.+sin(T), 3.+sin(T+3.2981)));\n    vec3 L = normalize(lpos - pos);\n    float NdotL = max(0.0, dot(normal, L));\n    \n    float att = NdotL * (4.0 / max(0.0001, pow(distance(pos, lpos), 2.)));\n\n    att = max(pow(luma(col), 3.0)*2.0, att);\n\n    col *= att;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc/R.xy;\n    \n\n    \n    col = texture(iChannel0, uv).rgb;\n    \n    col = mix(col, shade(uv), 0.6);\n    \n    col /= vec3(1.0) + col;\n    col = pow(col, vec3(1.0 / 1.6));\n    \n    O = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define ZOOM 16.0\n\n\n#define R iResolution.xy\n#define T (iTime)\n#define M_PI (3.1416)\n#define TAU (M_PI * 2.0)\n\n\n#define MOUSE (texelFetch(iChannel0, ivec2(0), 0).xyz)\n\n\nmat2 rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc/R.xy;\n    \n    \n    vec3 old = texelFetch(iChannel0, ivec2(0), 0).xyz;\n    \n    col = vec3(iMouse.xy, iMouse.z);\n    \n    \n    if (iFrame > 1) {\n        col = mix(old, col, 0.3);\n    } else {\n        col = vec3(0.);\n    }\n    \n\n    \n    \n    O = vec4(col, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nfloat hash1(float x) {\n    uint y = floatBitsToUint(x+10.23812);\n    y ^= (y << 17);\n    y ^= (y >> 5);\n    y ^= (y << 3);\n    uint hx = uint((x+10.982124)*10.29123);\n    uint hy = uint(fract((x+9.3891824)*10.9588)*10.29312);\n    uint n = ((y * 0xF21856u) << hx ^ hy);\n    return float(n) / float(0xFFFFFFFFU);\n}\n\nfloat hash2(vec2 x) {\n    uvec2 y = 2u+uvec2(floatBitsToUint(hash1((x.x+10.23812)*0.1)), floatBitsToUint(hash1((x.y+9.281283)*0.1)));\n    uvec2 w = 3u+uvec2(floatBitsToUint(hash1(fract((x.x+10.23899853)*10.2391)*10.98315)), \n        floatBitsToUint(hash1(fract((x.y+10.239124)*10.29185)*10.238195))) << y.x ^ (y.y<<0xF8928U);\n    uint n = ((((y.x ^ w.x >> y.y >> 3U ^ 0xFF35F212u) ^ (y.y ^ w.y >> y.x)) >> 3U ^ 0xFF342U) * 0xF218F53u);\n    return clamp(((float(n) / float(0xFFFFFFFFU))), 0.0, 1.0);\n}\n\nvec3 hash23(vec2 p) {\n    p += vec2(9.2812, 2.2921);\n    float x = hash2(vec2(p.xy));\n    float y = hash2(vec2(p.yx));\n    float z = hash2(vec2(p.xx+p.yy+x+y) * vec2(x, y));\n    \n    return vec3(x, y, z) * 2.0 - 1.0;\n}\n\nvec3 hash23Un(vec2 p) {\n    p += vec2(9.2812, 2.2921);\n    float x = hash2(vec2(p.xy));\n    float y = hash2(vec2(p.yx));\n    float z = hash2(vec2(p.xx+p.yy+x+y) * vec2(x, y));\n    \n    return vec3(x, y, z);\n}\n\n\nfloat noise2(vec2 p) {\n    vec2 id = floor(p);\n    vec2 lv = smoothstep(0.0, 1.0, fract(p));\n    \n    return mix(mix(hash2(id), hash2(id+vec2(1, 0)), lv.x),\n        mix(hash2(id+vec2(0, 1)), hash2(id+vec2(1, 1)), lv.x), lv.y);\n}\n\nvec3 noise3(vec2 p) {\n    vec2 id = floor(p);\n    vec2 lv = smoothstep(0.0, 1.0, fract(p));\n    \n    return mix(mix(hash23Un(id), hash23Un(id+vec2(1, 0)), lv.x),\n        mix(hash23Un(id+vec2(0, 1)), hash23Un(id+vec2(1, 1)), lv.x), lv.y);\n}\n\nvec3 noise3Layered(vec2 p, float freq) {\n    vec3 n = vec3(0.0);\n    \n    #define ADVANCE() n += noise3(p*freq); freq *= (2.0 * (0.4+freq));\n \n    ADVANCE()\n    ADVANCE()\n    ADVANCE()\n    ADVANCE()\n \n    #undef ADVANCE\n\n    return n / 4.0;\n}\nfloat noise2Layered(vec2 p, float freq) {\n    float n = float(0.0);\n    \n    #define ADVANCE() n += noise2(p*freq); freq *= (2.0 * (0.4+freq));\n \n    ADVANCE()\n    ADVANCE()\n    ADVANCE()\n    ADVANCE()\n \n    #undef ADVANCE\n\n    return n / 4.0;\n}\n\n\nfloat diff(vec3 a, vec3 b) {\n    vec3 c = (cross(a, b));\n    float x = abs(dot(a, b));\n    float y = length(c);\n    vec3 d = (refract(a, b, atan(x,y)));\n    vec3 e = (reflect(c, d));\n    e.yz *= rot(cos((((T*0.05)*(0.5+(a.z*0.0001)))+(a.z*2.)))*b.z);\n    e.xy *= rot(sin(((T*0.09)+(x*TAU))*(0.5+((b.z*0.001)+(a.z*0.0001)))))*b.z;\n    return fract(sin(fract((x*2.0+y))*1.6)*cos(((((distance(a, d) + distance(b, d)) / 2.0)-\n        ( (distance(b, e) + distance(a, e)) / 2.0))+dot(a, b))*2.));\n}\n\n\nfloat mut(float a) {\n    return fract(a+fract(a*10.239123)*10.9928124);\n}\n\n\n\nvec3 patternLayer(vec2 uv) {\n    float region = noise2Layered(((uv+vec2(29.292191, 18778.198212))*0.5)+(0.004*vec2(sin(T*0.002), cos(T*0.002))), 0.26);\n    \n    float preg = pow(region, 4.0);\n    vec2 pulse = uv * (0.5+(0.5+(0.5*cos((T+smoothstep(0.0, 4.0, preg*4.0))*10.0))));\n\n    uv = mix(uv, pulse, preg);\n\n    vec3 rgb = noise3Layered((uv*0.9) + vec2(cos(T+(region*TAU)), sin(T+(region*TAU))), 0.2);\n\n\n    uv.xy += vec2(cos(T*(0.7+(0.001*region))), sin(T*(0.7+(0.001*region))))*(1.2+(region*2.));    \n    vec3 uv3 = vec3(uv.xy, atan(uv.x, uv.y)) * 2.0 - 1.0;\n    vec2 id = floor(uv);\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    float s = 1.0 - ceil(min(lv.x, lv.y)-0.02);\n    \n    vec3 a = hash23(id);\n    vec3 b = hash23(id+vec2(1., 0.));\n    vec3 c = hash23(id+vec2(0., 1.));\n    vec3 d = hash23(id+vec2(1., 1.));\n\n    uv3.z = mix(mix(mut(a.z), mut(b.z), lv.x), mix(mut(c.z), mut(d.z), lv.x), lv.y) * 2.0 - 1.0;\n    uv3 += cos(region*TAU)*region*TAU;\n    float da = (diff(uv3, a));\n    float db = (diff(uv3, b));\n    float dc = (diff(uv3, c));\n    float dd = (diff(uv3, d));\n    \n    \n    float j = clamp(mix(mix(da, db, lv.x), mix(dc, dd, lv.x), lv.y), 0.0, 1.0);\n   \n\n    vec3 col = (vec3(j)*rgb);\n    \n    float invreg = max(0.1, pow(1.0 / max(0.001, 1.0 / max(0.001, preg)), 0.6))*3.;\n\n\n    col *= invreg;\n    //vec3 grid = vec3(s);\n  \n    return col;//+grid;\n}\n\n\n\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n \n    vec2 uv = (fc-0.5*R.xy)/R.y;\n    vec2 m = (MOUSE.xy-0.5*R.xy)/R.y;\n    \n    vec3 ro = vec3(0, 1.5, -5.0);\n    vec3 rd = normalize(vec3(uv.xy, 1.0));\n    \n    if (iMouse.x > 0.09) {\n        rd.yz *= rot(clamp(m.y*TAU, -1.0, 1.0));\n        rd.xz *= rot(clamp(m.x*TAU, -1.0, 1.0));\n    }\n\n  \n\n    rd *= ZOOM;\n    \n\n\n    vec3 col = patternLayer(rd.xy);\n\n   \n    \n    float radius = 1.0;\n    float feather = 0.2;\n    col = mix(col, vec3(0.0), clamp((smoothstep(0.0+feather, radius+feather, length(uv))), 0.0, 1.0));\n    \n    O = vec4(col, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}