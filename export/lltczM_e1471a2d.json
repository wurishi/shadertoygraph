{"ver":"0.1","info":{"id":"lltczM","date":"1532084716","viewed":98,"name":"Orbit trap (Point)","username":"darkeclipz","description":"Orbit trapping to a point.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","orbittrap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct palette {\n    vec3 c0, c1, c2, c3, c4;\n};\n\npalette palette1() {\n    palette p; \n    p.c0 = vec3(84,208,186)/255.;\n    p.c1 = vec3(68,168,197)/255.;\n    p.c2 = vec3(16,90,146)/255.;\n    p.c3 = vec3(32,47,62)/255.;\n    p.c4 = vec3\t(1,6,15)/255.;\n    return p;    \n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 cmap( float t, palette p ) {\n    vec3 col = vec3(0);\n    col = mix( p.c0,  p.c1, smoothstep(0. , .2, t));\n    col = mix( col, p.c2, smoothstep(.2, .4 , t));\n    col = mix( col, p.c3, smoothstep(.4 , .6, t));\n    col = mix( col, p.c4, smoothstep(.6,  .8, t));\n    col = mix( col, p.c0, smoothstep(.8, 1.,  t));\n    return col;\n}\n\n//vec3 cmap(float x) {\n//\tvec3 col\n    //\treturn vec3( hsv2rgb( vec3(x, 1, 1) ) );\n//}\n\nbool point(vec2 uv) {\n\treturn length(uv -vec2(cos(iTime), sin(iTime)) ) < 0.01 \n        || length(uv -0.3*vec2(-cos(iTime), -sin(iTime)) ) < 0.01;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    palette p = palette1();\n    //fragColor = vec4( cmap( fragCoord.x/iResolution.x, p ), 0. );\n    //return;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    float t = iTime/4.;\n    \n    vec2 z = vec2(0);\n    float i=0.0;\n    float maxIter = 100.;\n    float d = 10., d1 = d, d2 = d; \n    for( ; ++i < maxIter ; ) {\n\t\tz = mat2(z, -z.y, z.x) * z + uv;\n        d1 = min(d1, length(z-vec2(cos(iTime), sin(iTime))));\n        d2 = min(d2, length(z-0.3*vec2(-cos(iTime), -sin(iTime))));\n        d = min(d1,d2);\n        if(dot(z,z) > 4.) break;\n    }\n\n    // Time varying pixel color\n    vec3 col = cmap( fract((2.*d/1.-t+0.2)), p );\n    \n    if(point(uv)) col = vec3(1);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}