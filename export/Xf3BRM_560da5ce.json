{"ver":"0.1","info":{"id":"Xf3BRM","date":"1732837442","viewed":149,"name":"SDF Guard-Band Bounding Shape","username":"chronos","description":"Idk if this already has another name or is demonstrated elsewhere, but I wanted to explore it myself :)\n'Naive' approach to bounding geometry on the left, and improved version on the right.\nClick and drag to test sphere tracing distance field.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","shape","bounding","guardband"],"hasliked":0,"parentid":"3tyBzV","parentname":"Heart - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    SDF Guard-Band Bounding Shape by chronos\n    -------------------------------------------------------\n    \n    Idk if this already has another name or is demonstrated elsewhere, but I wanted to explore it myself :)\n    'Naive' approach to bounding geometry on the left, and improved version on the right.\n    Click and drag to test sphere tracing distance field.\n    \n    The concept is simple: Use an extra bounding shape to work as a guard band that\n    toggles between the proxy geometry SDF on the outside (called \"bounding shape\" in this shader, perhaps misnomer)\n    and the actual geometry SDF, on the inside.\n    \n    This is to ensure that you atually step well into the actual SDF when you march, and don't just end up approaching\n    the bounding/proxy geometry.\n    \n    This is basically like using an imposter or LoD level that toggles at a certain distance, but for accelerating ray marching.\n    \n    \n    Example is modified from @iq's \"Heart - distance 2D\" shader: https://www.shadertoy.com/view/3tyBzV\n    \n    \n    -------------------------------------------------------\n\n    Self link: https://www.shadertoy.com/view/Xf3BRM\n    \n    -------------------------------------------------------\n\n*/\n\n// Forked shader description:\n//--------------------------------------------------------------------------------------------------------\n// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to 45 degree heart shape, with only two square roots\n// (or 1, if the GPU supports actual branching)\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n//--------------------------------------------------------------------------------------------------------\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nfloat sdBoundingShape( in vec2 p )\n{\n    return length(p-vec2(0., 0.625)) - .65;\n}\n\nfloat sdGuardBandShape( in vec2 p )\n{\n    return length(p-vec2(0., 0.625)) - 1.;\n    \n    // Can simply do:\n    // float guard_radius = 0.35;\n    // return sdBoundingShape( p ) - guard_radius;\n    // Where guard_radius is an adjustable parameter\n    // This will dilate the bounding shape to work as a suitable guard band.\n}\n\nfloat sdHybridShape(in vec2 p)\n{\n    \n    if(sdGuardBandShape( p ) > 0.) // if outside guard band, return distance to bounding shape\n        return sdBoundingShape(p);\n    else\n        return sdHeart( p );\n}\n\nfloat sdNaiveShape(in vec2 p)\n{\n    \n    if(sdBoundingShape( p ) > 0.) // if bounding shape, return distance to bounding shape\n        return sdBoundingShape(p);\n    else\n        return sdHeart( p );\n}\n\nfloat dSeg(vec2 a, vec2 b, vec2 p)\n{\n    b-=a; p-=a;\n    return length(clamp(dot(p, b)/dot(b,b), 0., 1.) * b - p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 2.;\n    vec2 p = zoom * (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = zoom * (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec2 m2 = zoom * (2.*abs(iMouse.zw)-iResolution.xy)/iResolution.y;\n    \n    float side_p = sign(p.x);\n    float side_m = sign(m.x);//sign(iMouse.x - iResolution.x*.5);\n    \n    if(length(iMouse.xy) < 10.)\n    {\n        const float anim_speed = 0.2;\n        m2 = vec2(0., -1);\n        m  = vec2(cos(iTime*anim_speed), abs(sin(iTime*anim_speed))-1.);\n        side_m = sign(m.x);\n    }\n    \n    p.y += 0.5;\n    m.y += 0.5;\n    m2.y += 0.5;\n    \n    {\n        p.x -= side_p * 1.5;\n        m.x -= side_m * 1.5;\n        m2.x -= side_m * 1.5;\n    }\n    \n    \n    \n    \n        \n\n    #if 0\n    float d = sdHeart(p);\n    #else\n    float d = side_p > 0. ? sdHybridShape(p) : sdNaiveShape(p);\n    #endif\n    \n    // coloring\n    vec3 col = (d>0.0) ? \n        (side_p>0. && sdGuardBandShape( p ) > 0. ? vec3(0.9,0.6,0.3)*.90+.10 : vec3(0.9,0.6,0.3) )\n        :\n        vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    vec2 ro = m2;\n    vec2 rd = normalize(m-m2);\n    \n    vec2 pos = ro;\n    float t = 0.;\n\n    col = mix(col, vec3(1.0), smoothstep(0.005, 0.0, abs(sdBoundingShape(p))-0.0025));\n\n    if( side_m == side_p)\n    {\n        const int max_steps = 15;\n        col = mix(col, vec3(1.0,1.0,0.0), 0.25*smoothstep(0.005, 0.0, dSeg(pos, pos + 100. * rd, p)-0.0075));\n        for(int i = 0; i < max_steps; i++)\n        {\n            d = side_m > 0. ? sdHybridShape(pos) : sdNaiveShape(pos);\n            col = mix(col, vec3(1.0,1.0,0.0), 0.5*smoothstep(0.005, 0.0, abs(length(p-pos)-abs(d))-0.0025));\n            col = mix(col, vec3(1.0,1.0,0.0), 0.5*smoothstep(0.005, 0.0, length(p-pos)-0.015));\n            \n            t += d;\n            pos =  rd * t + ro;\n        }\n    }\n    \n    if(side_p < 0.)\n    {\n        vec2 offset = vec2(.25);\n        col = mix(col, vec3(1.0,.0,0.0), smoothstep(0.005, 0.0, dSeg(vec2(-1., 1)+offset, vec2(-2,2.)+offset, p)-0.075));\n        col = mix(col, vec3(1.0,.0,0.0), smoothstep(0.005, 0.0, dSeg(vec2(-1., 2)+offset, vec2(-2,1.)+offset, p)-0.075));\n    }\n    else\n    {\n        vec2 offset = vec2(0.1);\n        col = mix(col, vec3(.0,1.0,0.0), smoothstep(0.005, 0.0, dSeg(vec2(1., 1.25)+offset, vec2(.6,1.75)+offset, p)-0.075));\n        col = mix(col, vec3(.0,1.0,0.0), smoothstep(0.005, 0.0, dSeg(vec2(1., 1.25)+offset, vec2(1.5,2.2)+offset, p)-0.075));\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}