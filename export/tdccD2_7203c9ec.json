{"ver":"0.1","info":{"id":"tdccD2","date":"1601746038","viewed":249,"name":"Raining Transition","username":"RodzLabs","description":"This shader was generated using Material Maker, and is a port of @NaturallyCG Substance Designer Beginner Quick Tip 66 (Stylized Raining Transition).\n\nTransition every ~6 seconds...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["transition","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---\n\nfloat rand(vec2 x) {\n    return fract(cos(dot(x, vec2(13.9898, 8.141))) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(vec3(dot(x, vec2(13.9898, 8.141)),\n                          dot(x, vec2(3.4562, 17.398)),\n                          dot(x, vec2(13.254, 5.867)))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat fbm_value(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat p00 = rand(mod(o, size));\n\tfloat p01 = rand(mod(o + vec2(0.0, 1.0), size));\n\tfloat p10 = rand(mod(o + vec2(1.0, 0.0), size));\n\tfloat p11 = rand(mod(o + vec2(1.0, 1.0), size));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlin(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat a00 = rand(mod(o, size)) * 6.28318530718;\n\tfloat a01 = rand(mod(o + vec2(0.0, 1.0), size)) * 6.28318530718;\n\tfloat a10 = rand(mod(o + vec2(1.0, 0.0), size)) * 6.28318530718;\n\tfloat a11 = rand(mod(o + vec2(1.0, 1.0), size)) * 6.28318530718;\n\tvec2 v00 = vec2(cos(a00), sin(a00));\n\tvec2 v01 = vec2(cos(a01), sin(a01));\n\tvec2 v10 = vec2(cos(a10), sin(a10));\n\tvec2 v11 = vec2(cos(a11), sin(a11));\n\tfloat p00 = dot(v00, f);\n\tfloat p01 = dot(v01, f - vec2(0.0, 1.0));\n\tfloat p10 = dot(v10, f - vec2(1.0, 0.0));\n\tfloat p11 = dot(v11, f - vec2(1.0, 1.0));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlinabs(vec2 coord, vec2 size, float seed) {\n\treturn abs(2.0*fbm_perlin(coord, size, seed)-1.0);\n}\n\nfloat fbm_cellular(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular2(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular3(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular4(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular5(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular6(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\nfloat shape_circle(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float distance = length(uv);\n    return clamp((1.0-distance/size)/edge, 0.0, 1.0);\n}\n\nfloat shape_polygon(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float angle = atan(uv.x, uv.y)+3.14159265359;\n    float slice = 6.28318530718/sides;\n    return clamp((size-cos(floor(0.5+angle/slice)*slice-angle)*length(uv))/(edge*size), 0.0, 1.0);\n}\n\nfloat shape_star(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float angle = atan(uv.x, uv.y);\n    float slice = 6.28318530718/sides;\n    return clamp((size-cos(floor(1.5+angle/slice-2.0*step(0.5*slice, mod(angle, slice)))*slice-angle)*length(uv))/(edge*size), 0.0, 1.0);\n}\n\nfloat shape_curved_star(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float angle = 2.0*(atan(uv.x, uv.y)+3.14159265359);\n    float slice = 6.28318530718/sides;\n    return clamp((size-cos(floor(0.5+0.5*angle/slice)*2.0*slice-angle)*length(uv))/(edge*size), 0.0, 1.0);\n}\n\nfloat shape_rays(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = 0.5*max(edge, 1.0e-8)*size;\n\tfloat slice = 6.28318530718/sides;\n    float angle = mod(atan(uv.x, uv.y)+3.14159265359, slice)/slice;\n    return clamp(min((size-angle)/edge, angle/edge), 0.0, 1.0);\n}\n\nvec2 uvmirror_h(vec2 uv, float offset) {\n\treturn vec2(max(0.0, abs(uv.x-0.5)-0.5*offset)+0.5, uv.y);\n}\nvec2 uvmirror_v(vec2 uv, float offset) {\n\treturn vec2(uv.x, max(0.0, abs(uv.y-0.5)-0.5*offset)+0.5);\n}vec3 blend_normal(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blend_dissolve(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\tif (rand(uv) < opacity) {\n\t\treturn c1;\n\t} else {\n\t\treturn c2;\n\t}\n}\n\nvec3 blend_multiply(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blend_screen(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blend_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blend_overlay(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend_hard_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blend_overlay(uv, c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blend_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blend_soft_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_soft_light_f(c1.x, c2.x), blend_soft_light_f(c1.y, c2.y), blend_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blend_burn(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_burn_f(c1.x, c2.x), blend_burn_f(c1.y, c2.y), blend_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blend_dodge(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_dodge_f(c1.x, c2.x), blend_dodge_f(c1.y, c2.y), blend_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend_lighten(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend_darken(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend_difference(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\nvec2 transform2_clamp(vec2 uv) {\n\treturn clamp(uv, vec2(0.0), vec2(1.0));\n}\n\nvec2 transform2(vec2 uv, vec2 translate, float rotate, vec2 scale) {\n \tvec2 rv;\n\tuv -= translate;\n\tuv -= vec2(0.5);\n\trv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;\n\trv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;\n\trv /= scale;\n\trv += vec2(0.5);\n\treturn rv;\t\n}const float p_o251995_width = 0.020000000;\nconst float p_o314366_translate_x = 0.050000001;\nconst float p_o314366_translate_y = 0.000000000;\nconst float p_o314366_rotate = 0.000000000;\nconst float p_o314366_scale_x = 1.000000000;\nconst float p_o314366_scale_y = 1.000000000;\nconst int seed_o311374 = 43551;\nconst float p_o311374_scale_x = 8.000000000;\nconst float p_o311374_scale_y = 8.000000000;\nconst float p_o311374_iterations = 5.000000000;\nconst float p_o311374_persistence = 0.899999976;\nfloat o311374_fbm(vec2 coord, vec2 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += fbm_perlin(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nconst float p_o239701_amount = 0.500000000;\nconst int seed_o208215 = 59392;\nconst float p_o208215_tx = 32.000000000;\nconst float p_o208215_ty = 9.000000000;\nconst float p_o208215_overlap = 2.000000000;\nconst float p_o208215_scale_x = 1.000000000;\nconst float p_o208215_scale_y = 1.000000000;\nconst float p_o208215_fixed_offset = 0.000000000;\nconst float p_o208215_offset = 1.000000000;\nconst float p_o208215_rotate = 0.000000000;\nconst float p_o208215_scale = 0.000000000;\nconst float p_o208215_value = 0.000000000;\nconst float p_o187368_amount = 1.000000000;\nconst float p_o183257_offset = 0.234999999;\nconst float p_o179975_sides = 4.000000000;\nconst float p_o179975_radius = 0.050000001;\nconst float p_o179975_edge = 1.000000000;\nconst float p_o174356_repeat = 1.000000000;\nconst float p_o174356_rotate = 90.000000000;\nconst float p_o174356_gradient_0_pos = 0.409090909;\nconst float p_o174356_gradient_0_r = 1.000000000;\nconst float p_o174356_gradient_0_g = 1.000000000;\nconst float p_o174356_gradient_0_b = 1.000000000;\nconst float p_o174356_gradient_0_a = 1.000000000;\nconst float p_o174356_gradient_1_pos = 0.627272727;\nconst float p_o174356_gradient_1_r = 0.000000000;\nconst float p_o174356_gradient_1_g = 0.000000000;\nconst float p_o174356_gradient_1_b = 0.000000000;\nconst float p_o174356_gradient_1_a = 1.000000000;\nvec4 o174356_gradient_gradient_fct(float x) {\n  if (x < p_o174356_gradient_0_pos) {\n    return vec4(p_o174356_gradient_0_r,p_o174356_gradient_0_g,p_o174356_gradient_0_b,p_o174356_gradient_0_a);\n  } else if (x < p_o174356_gradient_1_pos) {\n    return mix(vec4(p_o174356_gradient_0_r,p_o174356_gradient_0_g,p_o174356_gradient_0_b,p_o174356_gradient_0_a), vec4(p_o174356_gradient_1_r,p_o174356_gradient_1_g,p_o174356_gradient_1_b,p_o174356_gradient_1_a), ((x-p_o174356_gradient_0_pos)/(p_o174356_gradient_1_pos-p_o174356_gradient_0_pos)));\n  }\n  return vec4(p_o174356_gradient_1_r,p_o174356_gradient_1_g,p_o174356_gradient_1_b,p_o174356_gradient_1_a);\n}\nfloat o208215_input_in(vec2 uv) {\nfloat o179975_0_1_f = shape_circle((uvmirror_v((uv), p_o183257_offset)), p_o179975_sides, p_o179975_radius*1.0, p_o179975_edge*1.0);\nvec4 o183257_0_1_rgba = vec4(vec3(o179975_0_1_f), 1.0);\nfloat o174356_0_r = 0.5+(cos(p_o174356_rotate*0.01745329251)*((uv).x-0.5)+sin(p_o174356_rotate*0.01745329251)*((uv).y-0.5))/(cos(abs(mod(p_o174356_rotate, 90.0)-45.0)*0.01745329251)*1.41421356237);vec4 o174356_0_1_rgba = o174356_gradient_gradient_fct(fract(o174356_0_r*p_o174356_repeat));\nvec4 o187368_0_s1 = o183257_0_1_rgba;\nvec4 o187368_0_s2 = o174356_0_1_rgba;\nfloat o187368_0_a = p_o187368_amount*1.0;\nvec4 o187368_0_2_rgba = vec4(blend_multiply((uv), o187368_0_s1.rgb, o187368_0_s2.rgb, o187368_0_a*o187368_0_s1.a), min(1.0, o187368_0_s2.a+o187368_0_a*o187368_0_s1.a));\n\nreturn (dot((o187368_0_2_rgba).rgb, vec3(1.0))/3.0);\n}\nfloat o208215_input_mask(vec2 uv) {\n\nreturn 1.0;\n}\nvec4 tiler_o208215(vec2 uv, vec2 tile, int overlap, vec2 _seed) {\n\tfloat c = 0.0;\n\tvec3 rc = vec3(0.0);\n\tvec3 rc1;\n\tfor (int dx = -overlap; dx <= overlap; ++dx) {\n\t\tfor (int dy = -overlap; dy <= overlap; ++dy) {\n\t\t\tvec2 pos = fract((floor(uv*tile)+vec2(float(dx), float(dy))+vec2(0.5))/tile-vec2(0.5));\n\t\t\tvec2 seed = rand2(pos+_seed);\n\t\t\trc1 = rand3(seed);\n\t\t\tpos = fract(pos+vec2(p_o208215_fixed_offset/tile.x, 0.0)*floor(mod(pos.y*tile.y, 2.0))+p_o208215_offset*seed/tile);\n\t\t\tfloat mask = o208215_input_mask(fract(pos+vec2(0.5)));\n\t\t\tif (mask > 0.01) {\n\t\t\t\tvec2 pv = fract(uv - pos)-vec2(0.5);\n\t\t\t\tseed = rand2(seed);\n\t\t\t\tfloat angle = (seed.x * 2.0 - 1.0) * p_o208215_rotate * 0.01745329251;\n\t\t\t\tfloat ca = cos(angle);\n\t\t\t\tfloat sa = sin(angle);\n\t\t\t\tpv = vec2(ca*pv.x+sa*pv.y, -sa*pv.x+ca*pv.y);\n\t\t\t\tpv *= (seed.y-0.5)*2.0*p_o208215_scale+1.0;\n\t\t\t\tpv /= vec2(p_o208215_scale_x, p_o208215_scale_y);\n\t\t\t\tpv += vec2(0.5);\n\t\t\t\t \n\t\t\t\tseed = rand2(seed);\n\t\t\t\tfloat c1 = o208215_input_in(pv)*mask*(1.0-p_o208215_value*seed.x);\n\t\t\t\tc = max(c, c1);\n\t\t\t\trc = mix(rc, rc1, step(c, c1));\n\t\t\t}\n\t\t}\n\t}\n\treturn vec4(rc, c);\n}const float p_o242660_repeat = 1.000000000;\nconst float p_o242660_rotate = 90.000000000;\nconst float p_o242660_gradient_0_pos = 0.000000000;\nconst float p_o242660_gradient_0_r = 1.000000000;\nconst float p_o242660_gradient_0_g = 1.000000000;\nconst float p_o242660_gradient_0_b = 1.000000000;\nconst float p_o242660_gradient_0_a = 1.000000000;\nconst float p_o242660_gradient_1_pos = 1.000000000;\nconst float p_o242660_gradient_1_r = 0.000000000;\nconst float p_o242660_gradient_1_g = 0.000000000;\nconst float p_o242660_gradient_1_b = 0.000000000;\nconst float p_o242660_gradient_1_a = 1.000000000;\nvec4 o242660_gradient_gradient_fct(float x) {\n  if (x < p_o242660_gradient_0_pos) {\n    return vec4(p_o242660_gradient_0_r,p_o242660_gradient_0_g,p_o242660_gradient_0_b,p_o242660_gradient_0_a);\n  } else if (x < p_o242660_gradient_1_pos) {\n    return mix(vec4(p_o242660_gradient_0_r,p_o242660_gradient_0_g,p_o242660_gradient_0_b,p_o242660_gradient_0_a), vec4(p_o242660_gradient_1_r,p_o242660_gradient_1_g,p_o242660_gradient_1_b,p_o242660_gradient_1_a), ((x-p_o242660_gradient_0_pos)/(p_o242660_gradient_1_pos-p_o242660_gradient_0_pos)));\n  }\n  return vec4(p_o242660_gradient_1_r,p_o242660_gradient_1_g,p_o242660_gradient_1_b,p_o242660_gradient_1_a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nvec2 UV = fragCoord/iResolution.xy;\nfloat o311374_0_1_f = o311374_fbm((UV), vec2(p_o311374_scale_x, p_o311374_scale_y), int(p_o311374_iterations), p_o311374_persistence, float(seed_o311374));\nvec4 o208215_0_rch = tiler_o208215((transform2_clamp(transform2((UV), vec2(p_o314366_translate_x*(2.0*o311374_0_1_f-1.0), p_o314366_translate_y*(2.0*1.0-1.0)), p_o314366_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o314366_scale_x*(2.0*1.0-1.0), p_o314366_scale_y*(2.0*1.0-1.0))))), vec2(p_o208215_tx, p_o208215_ty), int(p_o208215_overlap), vec2(float(seed_o208215)));float o208215_0_1_f = o208215_0_rch.a;\nfloat o242660_0_r = 0.5+(cos(p_o242660_rotate*0.01745329251)*((transform2_clamp(transform2((UV), vec2(p_o314366_translate_x*(2.0*o311374_0_1_f-1.0), p_o314366_translate_y*(2.0*1.0-1.0)), p_o314366_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o314366_scale_x*(2.0*1.0-1.0), p_o314366_scale_y*(2.0*1.0-1.0))))).x-0.5)+sin(p_o242660_rotate*0.01745329251)*((transform2_clamp(transform2((UV), vec2(p_o314366_translate_x*(2.0*o311374_0_1_f-1.0), p_o314366_translate_y*(2.0*1.0-1.0)), p_o314366_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o314366_scale_x*(2.0*1.0-1.0), p_o314366_scale_y*(2.0*1.0-1.0))))).y-0.5))/(cos(abs(mod(p_o242660_rotate, 90.0)-45.0)*0.01745329251)*1.41421356237);vec4 o242660_0_1_rgba = o242660_gradient_gradient_fct(fract(o242660_0_r*p_o242660_repeat));\nvec4 o239701_0_s1 = vec4(vec3(o208215_0_1_f), 1.0);\nvec4 o239701_0_s2 = o242660_0_1_rgba;\nfloat o239701_0_a = p_o239701_amount*1.0;\nvec4 o239701_0_2_rgba = vec4(blend_multiply((transform2_clamp(transform2((UV), vec2(p_o314366_translate_x*(2.0*o311374_0_1_f-1.0), p_o314366_translate_y*(2.0*1.0-1.0)), p_o314366_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o314366_scale_x*(2.0*1.0-1.0), p_o314366_scale_y*(2.0*1.0-1.0))))), o239701_0_s1.rgb, o239701_0_s2.rgb, o239701_0_a*o239701_0_s1.a), min(1.0, o239701_0_s2.a+o239701_0_a*o239701_0_s1.a));\nvec4 o314366_0_1_rgba = o239701_0_2_rgba;\nvec3 o251995_0_false = clamp((o314366_0_1_rgba.rgb-vec3((0.5+2.0*sin(0.5*iTime))))/max(0.0001, p_o251995_width)+vec3(0.5), vec3(0.0), vec3(1.0));\nvec3 o251995_0_true = vec3(1.0)-o251995_0_false;vec4 o251995_0_1_rgba = vec4(o251995_0_false, o314366_0_1_rgba.a);\nfragColor = mix(texture(iChannel0, UV), texture(iChannel1, UV), o251995_0_1_rgba.x);\n}\n","name":"Image","description":"","type":"image"}]}