{"ver":"0.1","info":{"id":"DtVfzD","date":"1701890806","viewed":103,"name":"Fraction study 3","username":"ChunderFPV","description":"Visual fractions via x & y.  Use the mouse.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["math","graph","visual","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N(o,v,h) c = max(c, digit(iChannel0, u-o, v, .1*s, 7., 2.).x * h)  // digits\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float t = 1. + iTime/60., // 60 sec between ints, starting at 1\n          pi = 3.1416,\n          pi2 = pi*2.,\n          pi_2 = pi/2.,\n          s = 8.,  // scale\n          ss = .2, // snap strength\n          x, y, r;\n    \n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R.y*s,\n         rm = round(m/ss)*ss, // rounded mouse\n         u = U/R.y*s,\n         g;\n    \n    vec3 c = vec3(0, .5, 1)*.1; // background color\n    \n    bool xs = (rm.x == round(m.x)), // x snap\n         ys = (rm.y == round(m.y)); // y snap\n    \n    if (xs) m.x = rm.x; // snap to x\n    if (ys) m.y = rm.y; // snap to y\n    if (iMouse.z > 0.) t = m.x/m.y; // quotient from mouse\n    \n    x = u.x;\n    y = u.y;\n    r = length(u);\n    \n    g = min(fwidth(u)/abs(fract(u+.5)-.5), 1.); // form grid\n    c += max(g.x, g.y) * .1; // draw grid\n    c.g += min(1., fwidth(x/y)/abs(t-x/y)) * .2; // quotient slope\n    c.r += .01/abs(y-1.) * step(x, t); // quotient x\n    c += F(x, 1./t) * vec3(.8, .6, .1) * .3; // numerator & multiples (lines)\n    c += F(y,    t) * vec3(.6, .4, .9) * .3; // denominator & multiples (lines)\n    c += P(u,    2., 1./t, 2.) * .5; // numerator points\n    c += P(u.yx, 2.,    t, 2.) * .5; // denominator points\n    c += H(r) / max(1., sqrt(r)) * c; // color\n    \n    // digits\n    N(vec2(t, 1.1), t, .8); // quotient of x/y\n    if (iMouse.z > 0. && xs && ys)\n        N(vec2(m.x, m.y+.1), m.x, .8), // numerator (x)\n        N(vec2(m.x, m.y-.5), m.y, .8); // numerator (y)\n    \n    C = vec4(c/2. + c*c, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// fraction grid (denominator = t, numerator = 1/t)\nfloat F(float x, float t)\n{\n    float p = 10., // precision\n          a = max(1.-abs(sin(3.1416*round(x)*t))*p, 0.), // visual denominator\n          c = (1.-abs(sin(x*3.1416))); // smooth edges\n    return a*c;\n}\n\n// points: 2d coords, overlap loop, value, size\nfloat P(vec2 u, float l, float t, float r)\n{\n    float i = 0., f = i, c = i;\n    vec2 w = fwidth(u), p;\n    for (; i++<l;)\n    {\n        p.x = round((u.x-i)/l)*l+i; // skip i rows\n        f = mod(trunc(p.x)*t, 1.);  // multiply ints with value\n        p.y = round(u.y-f)+f;       // set as y\n        c = max(c, r/length((u-p)/w));\n    }\n    c = clamp(c, 0., 4.); // limit brightness\n    c /= max(1., abs(u.x)); // darken\n    return c;\n}\n\n// font code from https://www.shadertoy.com/view/7tV3zK\nvec4 char(sampler2D ic, vec2 p, int c)\n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(ic, p/16. + fract( vec2(c, 15-c/16)/16.), dFdx, dFdy );\n}\nvec4 pInt(sampler2D ic, vec2 p, float n, float d)\n{\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(ic, p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = d; i>0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(ic, p - .5*vec2(i-1.,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// texture, screen coords, value, size, num left digits, num right digits\nvec3 digit(sampler2D ic, vec2 uv, float v, float s, float l, float r)\n{\n    float numleft = min(log2(abs(v))/log2(10.), l-1.);\n    l = max(floor(numleft), 0.)+1.;\n    uv /= s; // size\n    if (isinf(abs(v))) return vec3(char(ic, uv*.7+vec2(.5, .3), 153).x); // infinity symbol\n    uv += vec2((l+1.)/2., .28); // center on decimal\n    vec3 d = vec3(0);\n    d += pInt(ic, uv, v, l).x; // left of decimal\n    uv.x -= l/2.;\n    d += char(ic, uv, 46).x; // decimal point\n    uv.x -= .5;\n    d += pInt(ic, uv, floor(abs(v)*pow(10., r)), r).x; // right of decimal\n    return d;\n}","name":"Common","description":"","type":"common"}]}