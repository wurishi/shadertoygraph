{"ver":"0.1","info":{"id":"3dffR8","date":"1587646343","viewed":200,"name":"Gotta go fast","username":"rohtie","description":"Sanic, gotta go fast","likes":12,"published":1,"flags":8,"usePreview":0,"tags":["sanicgofast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) {\n    return fract(sin(5234. * p.x * p.y) + p.x + tan(p.x * 10. * p.y * 15.) - sin(p.x * 300.));\n}\n\nfloat hash(vec3 p) {\n    return fract(sin(5234. * p.x * p.y * p.z) + p.x + p.z + tan(p.x * 10. * p.y * 15. * p.z) - sin(p.x * 300.) + sin(p.z * 200.));\n}\n\nmat2 rotate(float a) {\n    return mat2(-sin(a), cos(a),\n                cos(a), sin(a));\n}\n\nfloat white(vec3 p) {\n    float result = 1000.;\n    \n    // eyes\n    {\n        vec3 p = p;\n\n        p.y += sin(iTime * 5.) * .06;\n        p.z += cos(iTime * 5.) * .06;                \n        \n        p.y -= 4.7;\n        p.z -= 1.8;\n        p.x -= 0.7;\n        \n        p.y *= 4.;\n        p.x *= 1.4;\n        p.z *= 1.7;\n        \n        p.x = abs(p.x);\n        p.x -= 1.7;\n        p.x += sin(p.y * 1. + 1.5);\n\n        float part = length(p) - 1.05;\n    \tresult = min(result, part);\n    }    \n    \n    // left hand\n    {\n        vec3 p = p;\n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 3.) * .1 - 3.);        \n        \n        p.x -= 5.6;\n        p.y -= 1.8;\n        p.z -= 1.2;\n\n        p.yx += sin(p.x * 2. + 1.2) * .2;\n        \n        float part = length(p) - .6;\n    \tresult = min(result, part);\n    }        \n\n    // right hand\n    {\n        vec3 p = p;\n\n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 3.) * .5 - 3.);\n        \n        p.zy *= rotate(acos(-1.));\n        p.zy *= rotate(sin(iTime * 3.) * .9 - 3.5);        \n        \n        p.x += 6.4;\n        p.y -= 1.4;\n        p.z -= 1.2;\n        \n        p.y *= 1.5;\n\n        p.yx += sin(p.x * 2. + 1.2) * .2;\n        \n        float part = length(p) - .76;\n    \tresult = min(result, part);\n    }        \n    \n    \n    return result;    \n}\n\n\nfloat black(vec3 p) {\n    float result = 1000.;\n    \n    // eyes\n    {\n        vec3 p = p;\n        \n        p.y += sin(iTime * 5.) * .06;\n        p.z += cos(iTime * 5.) * .06;                \n        \n        p.x += sin(iTime) * .2;\n        \n        p.y -= 4.6;\n        p.z -= 2.3;\n        p.x -= 0.7;\n        \n        p.x = abs(p.x);\n        p.x -= 0.7;\n\n        float part = length(p) - 0.12;\n    \tresult = min(result, part);\n    }    \n    \n    // nose\n    {\n        vec3 p = p;\n        \n        \n        p.y += sin(iTime * 5.) * .06;\n        p.z += cos(iTime * 5.) * .06;                \n        \n        p.y -= 4.2;\n        p.z -= 2.;\n        p.x -= 1.1;\n        \n        p.xz *= rotate(acos(-1.) * .6);        \n        p.z *= 0.4;\n        \n\n        float part = length(p) - 0.2;\n    \tresult = min(result, part);\n    }        \n    \n    // smile :)\n    {\n        vec3 p = p;\n        \n        p.y += sin(iTime * 5.) * .06;\n        p.z += cos(iTime * 5.) * .06;                \n        \n        p.y -= 3.8;\n        p.z -= 2.1;\n        p.x -= 0.5;\n        \n        p *= 2.2;\n        \n        p.y += sin(p.x + 1.2) * .35;\n        \n        \n        p.x *= 0.1;\n\n        float part = length(p) - 0.15;\n    \tresult = min(result, part * .6);\n    }      \n    \n    return result;    \n}\n\n\nfloat skin(vec3 p) {\n    float result = 1000.;\n    \n    \n    // mouth\n    {\n        vec3 p = p;\n        \n        \n        p.y += sin(iTime * 5.) * .06;\n        p.z += cos(iTime * 5.) * .06;                \n        \n        p.y -= 3.8;\n        p.z -= 1.65;\n        p.x -= 0.5;\n        \n        p.zy *= rotate(acos(-1.) * 2.2);\n        \n        p.x *= 0.55;\n        p.z *= 1.5;\n\n        float part = length(p) - 0.5;\n    \tresult = min(result, part * .8);\n    }        \n    \n    \n    // belly\n    {\n        vec3 p = p;\n        \n        p.y -= 0.1;\n        p.z -= 2.2;\n        p.x -= 0.3;        \n\n        p.x += sin(p.y * 2. + 0.6) * .2;\n        p.z *= 1.6;\n\n        float part = length(p) - 1.2;\n    \tresult = min(result, part * .6);\n    }     \n    \n    return result;    \n}\n\n\n\nfloat red(vec3 p) {\n    float result = 1000.;\n    \n    // left foot\n    {\n        vec3 p = p;\n        \n        p.zy *= rotate(acos(-1.));\n        p.zy *= rotate(sin(iTime * 3.) * .5 - 3.);\n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 5.) * .5 - 3.);        \n        \n        p.x -= 6.4;\n        p.y += 4.5;\n        p.z -= 0.5;\n        p.y *= 2.5;\n        p.x *= 0.7;\n        p.y += sin(p.x * 2. - 1.) * .4;\n        \n        float part = length(p) - 1.45;        \n    \tresult = min(result, part * .7);\n    }  \n    \n    // right foot\n    {\n        vec3 p = p;\n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 5.02) * .5 - 3.);        \n        \n        p.x += 7.35;\n        p.y += 3.5;\n        p.z -= 0.5;\n        p.y *= 1.8;\n        p.x *= 0.6;\n        p.y += sin(p.x * 2. - 1.) * .4;\n        \n        float part = length(p) - 1.05;        \n    \tresult = min(result, part * .7);\n    }      \n    \n    return result;    \n}\n\nfloat blue(vec3 p) {\n    float result = 1000.;\n   \n   \n    // head\n    {\n        vec3 p = p;\n        \n        p.y += sin(iTime * 5.) * .06;\n        p.z += cos(iTime * 5.) * .06;        \n        \n        p.x -= 0.6;\n        p.y -= 4.5;\n        p.z -= 0.5;\n        p.y *= 1.4;\n        p.x += sin(p.y * 4. - 0.5) * .06;\n        \n        float part = length(p) - 1.8;        \n    \tresult = min(result, part);\n    }     \n    \n    // head spike top\n    {\n        vec3 p = p;        \n        \n        p.y += sin(iTime * 5.02) * .2;\n        p.z += cos(iTime * 5.02) * 0.2;         \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(.6);\n        \n        p.y -= 5.1;\n        \n        float container = length(p - vec3(-3., 1., 0.)) - 3.;\n                \n       \tp.x *= .8;\n        p.y *= 1.5;\n        p.x -= 3.5;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 3. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.4 - x * .15;\n        \n    \tresult = min(result, max(part * .8, container));\n    }        \n    \n \n    // head spike bottom\n    {\n        vec3 p = p;     \n        \n        p.y += sin(iTime * 4.02 + 2.5) * .12;\n        p.z += cos(iTime * 5.22 - .5) * 0.05;         \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(.9);\n        \n        p.y -= 3.7;\n        \n        float container = length(p - vec3(-3., 1., 0.)) - 3.;\n                \n       \tp.x *= .8;\n        p.y *= 1.5;\n        p.x -= 3.5;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 3. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.2 - x * .15;\n        \n    \tresult = min(result, max(part * .8, container));\n    }                 \n    \n    // neck\n    {\n        vec3 p = p;\n        \n        p.y -= 2.5;\n        p.z -= 0.5;\n        p.y *= 0.83;\n        p.x += sin(p.y * 3.) * .06;\n        float part = length(p) - 0.9;\n    \tresult = min(result, part);\n    }    \n    \n\n    // neck spike\n    {\n        vec3 p = p;        \n        \n        p.y += sin(iTime * 8.02 + 2.5) * .02;\n        p.z += cos(iTime * 4.22 - .2) * 0.02;                 \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(.6 + sin(iTime * 5.) * .09);\n        \n        p.y -= 2.6;\n        \n        float container = length(p - vec3(-3., 1., 0.)) - 3.;\n                \n       \tp.x *= .8;\n        p.y *= 1.5;\n        p.x -= 3.5;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 1. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.3 - x * .1;\n        \n    \tresult = min(result, max(part * .8, container));\n    }         \n    \n    // body\n    {\n        vec3 p = p;\n        p.y *= 0.83;\n        p.x += sin(p.y * 3.) * .06;\n        float part = length(p) - 2.5;\n    \tresult = min(result, part);\n    }\n    \n    // body spike 0\n    {\n        vec3 p = p;        \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(.6 + sin(iTime * 2.) * .2);\n        \n        p.y -= 0.6;\n        \n        float container = length(p - vec3(-5., 1., 0.)) - 5.;\n                \n       \tp.x *= .4;\n        p.y *= 1.5;\n        p.x -= 3.6;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 1. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.3 - x * .1;\n        \n    \tresult = min(result, max(part * .8, container));\n    }      \n    \n    // body spike 1\n    {\n        vec3 p = p;        \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(.9 + sin(iTime * 2.) * .2);\n        \n        p.y += 0.6;\n        p.z += 1.8;\n        \n        float container = length(p - vec3(-5., 1., 0.)) - 5.;\n                \n       \tp.x *= .45;\n        p.y *= 1.5;\n        p.x -= 3.6;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 2. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - .9 - x * .5;\n        \n    \tresult = min(result, max(part * .8, container));\n    }      \n    \n    \n    // body spike 2\n    {\n        vec3 p = p;        \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(1.5 + sin(iTime * 2.) * .05 - 0.2);\n        \n        p.y += 0.4;\n        p.z += 0.9;\n        \n        float container = length(p - vec3(-5., 1., 0.)) - 5.;\n                \n       \tp.x *= .5;\n        p.y *= 1.5;\n        p.x -= 3.6;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 1. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.3 - x * .1;\n        \n    \tresult = min(result, max(part * .8, container));\n    }      \n    \n    \n    // body spike 3\n    {\n        vec3 p = p;        \n        \n        //p.xy *= rotate(acos(-1.));\n        p.xz *= rotate(1.5);\n        \n        p.y += 1.8;\n        p.z += 0.9;\n        \n        float container = length(p - vec3(-5., 1., 0.)) - 5.;\n                \n       \tp.x *= .8;\n        p.y *= 1.5;\n        p.x -= 3.6;\n        p.y -= 1.2;\n        p.z -= 2.;\n        p.y += sin(p.x * 0.9 + 4.) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float x = 1. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.3 - x * .1;\n        \n    \tresult = min(result, max(part * .8, container));\n    }          \n    \n    // right arm\n    {\n        vec3 p = p;        \n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 3.) * .5 - 3.);\n        \n        p.zy *= rotate(acos(-1.));\n        p.zy *= rotate(sin(iTime * 3.) * .9 - 3.5);        \n        \n        p.y -= 1.;\n        \n        float container = length(p - vec3(-4., 1., 0.)) - 3.;\n                \n       \tp.x *= 1.3;\n        p.x -= 3.5;\n        p.y -= 1.2;\n        p.z -= 1.4;\n        p.y += sin(p.x * 0.9) * .8;\n        \n        p *= sin(p.x * .09);\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.4;\n        \n    \tresult = min(result, max(part * .8, container));\n    }    \n    \n    // left arm\n    {\n        vec3 p = p;        \n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 3.) * .1 - 3.);\n        \n        p.y -= 1.;\n        \n        float container = length(p - vec3(3.3, 1., 0.)) - 2.5;\n                \n       \tp.x *= 1.3;\n        p.x -= 3.3;\n        p.y -= 1.2;\n        p.z -= 1.4;\n        p *= 1.4;\n        p.y += sin(p.x * 0.9 + 2.5) * .8;        \n        \n        float x = 3. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.4 - x * .1;\n        \n    \tresult = min(result, max(part * .8, container));\n    }   \n    \n    // left leg\n    {\n        vec3 p = p;        \n        \n        p.zy *= rotate(acos(-1.));\n        p.zy *= rotate(sin(iTime * 3.) * .5 - 3.);\n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 5.) * .5 - 3.);        \n        \n        p.y += 3.5;\n        \n        float container = length(p - vec3(3.3, 1., 0.)) - 2.5;\n                \n        p.y *= 0.5;\n       \tp.x *= .6;\n        p.x -= 2.1;\n        p.y -= 0.2;\n        p.z -= 0.4;\n        p *= 1.4;\n        p.y += sin(p.x * 0.9 + 6.1) * .8;        \n        \n        float x = 3. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.4 - x * .0;\n        \n    \tresult = min(result, max(part * .8, container));\n    }    \n    \n    // right leg\n    {\n        vec3 p = p;        \n        \n        p.xy *= rotate(acos(-1.));\n        p.xy *= rotate(sin(iTime * 5.02) * .5 - 3.);\n                \n        \n        p.y += 3.5;\n        \n        float container = length(p - vec3(-3., 1., 0.)) - 3.;\n                \n        p.y *= 0.5;\n       \tp.x *= .6;\n        p.x -= 0.9;\n        p.y -= 0.2;\n        p.z -= 0.4;\n        p *= 1.4;\n        p.y += sin(p.x * 0.9 + 6.1) * .8;        \n        \n        float x = 3. - p.x;\n        \n        float rep = 0.001;\n        p.x = mod(p.x, rep);\n        p.x -= 0.5 * rep;\n        float part = length(p) - 0.4 - x * .0;\n        \n    \tresult = min(result, max(part * .8, container));\n    }        \n        \n    \n    return result;// - hash(p * 20.) * .001;\n}\n\n\nfloat road(vec3 p) {\n    float result = 1000.;\n    \n    p.z += iTime * 45.;\n    \n    // ground\n    {\n        vec3 p = p;        \n        \n        p.y += sin(p.z * 0.1);\n        p.y += sin(p.x * 5. + 0.5) * .03;\n\n        float part = p.y + 7.7;\n        \n\n        float rep = 15.;\n        float pz = floor(p.z / rep);\n        p.z = mod(p.z, rep);\n        rep -= rep * .5;\n        \n        \n        p.x = abs(p.x);\n        p.x -= 19.;\n        p.x -= cos(pz * 5.) * 5.;\n        \n        p.y += 4.;\n        \n        part = min(part, (length(max(abs(p) - vec3(0., sin(pz) * 20., cos(pz) * 2.), 0.))) - 2. - p.y * .2) * .7;\n        \n        \n    \tresult = min(result, part);\n    }        \n        \n    return result;    \n}\n\n\nfloat map(vec3 p) {\n    return min(min(skin(p), min(road(p), blue(p))), min(min(red(p), black(p)), white(p)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord/iResolution.xy;\n    p -= 0.5;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 cam = vec3(0., .2, 26.);\n    vec3 ray = vec3(p, -1.);\n    \n    float a = acos(-1.) * .37 + iMouse.x * 0.2;\n    cam.xz *= rotate(a);\n   \tray.xz *= rotate(a);\n    \n    float dist = 0.;\n    for (int i=0; i<150; i++) {\n        vec3 p = cam + ray * dist;\n        \n        float tmp = map(p);\n        if (tmp < 0.0001) {\n            vec3 light = normalize(vec3(1.5, 1.5, 1.6) * 15.);\n            \n            float shade = map(p + light);\n            shade *= 4.9;\n            \n            if (blue(p) < 0.001) {\n                fragColor = vec4(0.09, 0.05, 0.5, 0.) * shade;\n                return;\n            }\n            \n            if (white(p) < 0.001) {\n                fragColor = vec4(1., 1., 1., 0.) * shade;\n                return;            \t\n            }\n            \n            if (black(p) < 0.001) {\n                fragColor = vec4(0.04, 0.03, 0.03, 0.) * shade;\n                return;            \t\n            }         \n            \n            if (skin(p) < 0.001) {\n                fragColor = vec4(0.74, 0.46, 0.45, 0.) * shade;\n                return;            \t\n            }      \n            \n            if (red(p) < 0.001) {\n                fragColor = vec4(1., 0.1, 0.05, 0.) * shade;\n                return;            \t\n            }          \n            \n            if (road(p) < 0.001) {\n                fragColor = vec4(0., 0.1, 0.05, 0.) * shade;\n                return;            \t\n            }                   \n            \n            fragColor = vec4(1., 0., 0., 0.);\n            return;\n        }\n        \n        dist += tmp;\n        if (dist > 120.) {\n            break;\n        }\n    }\n        \n\n    p.x += sin(p.y * 5. + iTime) * .1;\n    \n    fragColor = vec4(abs(p.x) * 1.4 + 14., abs(p.y) + length(p) * .7, length(p), 0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 play(float time, float hz, float timestamp) {\n    return vec2(abs(tan(time * 270.)) + sin(6.2831*hz*time)*exp(-3.0*(time - timestamp)));\n}\n\nvec2 mainSound( in int samp, float time ) {\n    \n    if (time < 0.5) {    \n    \treturn play(time, 440., 0.);\n    }\n    else if (time < 1.0) {    \n    \treturn play(time, 400., 0.5);\n    }    \n    else if (time < 1.5) {    \n    \treturn play(time, 440., 1.0);\n    }        \n    else if (time < 2.0) {    \n    \treturn play(time, 400., 1.5);\n    }            \n    else if (time < 2.5) {    \n    \treturn play(time, 440., 2.0);\n    }                \n    else if (time < 3.0) {    \n    \treturn play(time, 390., 2.5);\n    }                    \n    else if (time < 3.25) {    \n    \treturn play(time, 280., 3.0);\n    }                        \n    else if (time < 3.75) {  \n        \n    }                            \n    else if (time < 4.25) {    \n    \treturn play(time, 400., 3.75);\n    }            \n    else if (time < 4.75) {    \n    \treturn play(time, 550., 4.25);\n    }                \n    else if (time < 5.25) {    \n    \treturn play(time, 440., 4.75);\n    }          \n    else if (time < 5.75) {    \n    \treturn play(time, 390., 5.25);\n    }                    \n    else if (time < 6.25) {    \n    \treturn play(time, 440., 5.75);\n    }                    \n    else if (time < 6.75) {    \n    \treturn play(time, 400., 6.25);\n    }               \n    else if (time < 7.25) {    \n    \treturn play(time, 280., 6.75);\n    }           \n    \n    \n    \n    return vec2(0.);\n}","name":"Sound","description":"","type":"sound"}]}