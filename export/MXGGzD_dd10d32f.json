{"ver":"0.1","info":{"id":"MXGGzD","date":"1717363346","viewed":70,"name":"PC - Quadratic Hexahedron","username":"natevm","description":"Sample code for a point-in-quadratic-hexahedron test, returning the per-vertex support function weights.\nThis implementation uses a Newton-Raphson iteration to handle the bilinear faces. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","finite","element","containment","query"],"hasliked":0,"parentid":"M3yGzW","parentname":"PC - Quadratic Wedge"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n// lots of error, but plays well on mobile\n#define NEWTON_ITERATIONS 5\n#define NUM_STEPS 8\n#else\n#define NEWTON_ITERATIONS 5\n#define NUM_STEPS 32    \n#endif\n\n#define CONVERGED_ERROR 1e-3\n#define DIVERGED_ERROR 1e6\n\n#define EXPOSURE 2.5\n\n// Node positions, with \"z\" up and data values stored in \"w\"\nstruct QuadraticHexahedron {\n    // Bottom quad vertices (counter-clockwise)\n    vec4 v00, v01, v02, v03;\n    // Top quad vertices (counter-clockwise)\n    vec4 v04, v05, v06, v07;\n    // Mid-edge vertices on bottom quad edges (counter-clockwise)\n    vec4 v08, v09, v10, v11;\n    // Mid-edge vertices on top quad edges (counter-clockwise)\n    vec4 v12, v13, v14, v15;\n    // Mid-edge vertices connecting top and bottom quads (counter-clockwise)\n    vec4 v16, v17, v18, v19;\n};\n\nbool interpolate(vec3 P, in QuadraticHexahedron e, out float value) {\n    // Todo... simplify / optimize\n\n    // Initialize our canonical coordinates to be in the center of the element\n    // We'll iteratively refine these with Newton's method to match the given \"P\"\n    vec3 rst_curr = vec3(0.5, 0.5, 0.5);\n    vec3 rst = vec3(0.5, 0.5, 0.5);\n\n    // The final support function values\n    float w00, w01, w02, w03, w04, w05, w06, w07, w08, w09, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19;\n\n    // Iteration for Newton's method\n    bool converged = false;\n    for (int iteration = 0; iteration < NEWTON_ITERATIONS; iteration++) {\n        // Compute support function values for the current position in \"rst\" space\n        w00 = 0.125 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) * (-(2.0 * (rst.x - 0.5)) - (2.0 * (rst.y - 0.5)) - (2.0 * (rst.z - 0.5)) - 2.0);\n        w01 = 0.125 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) * ((2.0 * (rst.x - 0.5)) - (2.0 * (rst.y - 0.5)) - (2.0 * (rst.z - 0.5)) - 2.0);\n        w02 = 0.125 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) * ((2.0 * (rst.x - 0.5)) + (2.0 * (rst.y - 0.5)) - (2.0 * (rst.z - 0.5)) - 2.0);\n        w03 = 0.125 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) * (-(2.0 * (rst.x - 0.5)) + (2.0 * (rst.y - 0.5)) - (2.0 * (rst.z - 0.5)) - 2.0);\n        w04 = 0.125 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) * (-(2.0 * (rst.x - 0.5)) - (2.0 * (rst.y - 0.5)) + (2.0 * (rst.z - 0.5)) - 2.0);\n        w05 = 0.125 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) * ((2.0 * (rst.x - 0.5)) - (2.0 * (rst.y - 0.5)) + (2.0 * (rst.z - 0.5)) - 2.0);\n        w06 = 0.125 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) * ((2.0 * (rst.x - 0.5)) + (2.0 * (rst.y - 0.5)) + (2.0 * (rst.z - 0.5)) - 2.0);\n        w07 = 0.125 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) * (-(2.0 * (rst.x - 0.5)) + (2.0 * (rst.y - 0.5)) + (2.0 * (rst.z - 0.5)) - 2.0);\n        w08 = 0.25 * (1.0 - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)));\n        w09 = 0.25 * (1.0 - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)));\n        w10 = 0.25 * (1.0 - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)));\n        w11 = 0.25 * (1.0 - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)));\n        w12 = 0.25 * (1.0 - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)));\n        w13 = 0.25 * (1.0 - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)));\n        w14 = 0.25 * (1.0 - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)));\n        w15 = 0.25 * (1.0 - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)));\n        w16 = 0.25 * (1.0 - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5))) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)));\n        w17 = 0.25 * (1.0 - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5))) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)));\n        w18 = 0.25 * (1.0 - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5))) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)));\n        w19 = 0.25 * (1.0 - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5))) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)));\n\n        // If the \"rst\" location matches the query point, we can now use our support function values\n        if (converged) break;\n\n        // Determine if the current cannonical coordinates accurately reflect the given query point\n        vec3 fcol = e.v00.xyz * w00 + e.v01.xyz * w01 + e.v02.xyz * w02 + e.v03.xyz * w03 + e.v04.xyz * w04 \n                  + e.v05.xyz * w05 + e.v06.xyz * w06 + e.v07.xyz * w07 + e.v08.xyz * w08 + e.v09.xyz * w09 \n                  + e.v10.xyz * w10 + e.v11.xyz * w11 + e.v12.xyz * w12 + e.v13.xyz * w13 + e.v14.xyz * w14\n                  + e.v15.xyz * w15 + e.v16.xyz * w16 + e.v17.xyz * w17 + e.v18.xyz * w18 + e.v19.xyz * w19;\n        fcol -= P; // World space position relative to the given query point. We want this to be zero.\n        \n        // rst-derivatives\n        vec3 dw00 = vec3(-0.25 * ((1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw01 = vec3(+0.25 * ((1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw02 = vec3(+0.25 * ((1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw03 = vec3(-0.25 * ((1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw04 = vec3(-0.25 * ((1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) + 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw05 = vec3(+0.25 * ((1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), -0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) + 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw06 = vec3(+0.25 * ((1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw07 = vec3(-0.25 * ((1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + 2.0 * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) + (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))), +0.25 * ((1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + 2.0 * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) + (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5))) - 2.0 * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw08 = vec3(-1.00 * (((2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))),                          -0.50 * ((1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.z - 0.5)))),    -0.50 * ((1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw09 = vec3(+0.50 * ((1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.z - 0.5)))),    -1.00 * ((2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))),                            -0.50 * ((1.0 + (2.0 * (rst.x - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5)))));\n        vec3 dw10 = vec3(-1.00 * ((2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))),                             0.50 * ((1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.z - 0.5)))),    -0.50 * ((1.0 + (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw11 = vec3(-0.50 * ((1.0 - (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.z - 0.5)))),    -1.00 * ((2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.z - 0.5)))),                            -0.50 * ((1.0 - (2.0 * (rst.x - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5)))));\n        vec3 dw12 = vec3(-1.00 * ((2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))),                            -0.50 * ((1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.z - 0.5)))),    +0.50 * ((1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw13 = vec3(+0.50 * ((1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.z - 0.5)))),    -1.00 * ((2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))),                            +0.50 * ((1.0 + (2.0 * (rst.x - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5)))));\n        vec3 dw14 = vec3(-1.00 * ((2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))),                             0.50 * ((1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.z - 0.5)))),    +0.50 * ((1.0 + (2.0 * (rst.y - 0.5))) - (2.0 * (rst.x - 0.5)) * (2.0 * (rst.x - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw15 = vec3(-0.50 * ((1.0 + (2.0 * (rst.z - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 + (2.0 * (rst.z - 0.5)))),    -1.00 * ((2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.z - 0.5)))),                            +0.50 * ((1.0 - (2.0 * (rst.x - 0.5))) - (2.0 * (rst.y - 0.5)) * (2.0 * (rst.y - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5)))));\n        vec3 dw16 = vec3(-0.50 * ((1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5)))),    -0.50 * ((1.0 - (2.0 * (rst.x - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5)))),    -1.00 * ((2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw17 = vec3(+0.50 * ((1.0 - (2.0 * (rst.y - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.y - 0.5)))),    -0.50 * ((1.0 + (2.0 * (rst.x - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5)))),    -1.00 * ((2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 - (2.0 * (rst.y - 0.5)))));\n        vec3 dw18 = vec3(+0.50 * ((1.0 + (2.0 * (rst.y - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5)))),    +0.50 * ((1.0 + (2.0 * (rst.x - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5)))),    -1.00 * ((2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)))));\n        vec3 dw19 = vec3(-0.50 * ((1.0 + (2.0 * (rst.y - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 + (2.0 * (rst.y - 0.5)))),    +0.50 * ((1.0 - (2.0 * (rst.x - 0.5))) - (2.0 * (rst.z - 0.5)) * (2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5)))),    -1.00 * ((2.0 * (rst.z - 0.5)) * (1.0 - (2.0 * (rst.x - 0.5))) * (1.0 + (2.0 * (rst.y - 0.5)))));\n\n\n        // Now get derivatives in world space\n        vec3 rcol = e.v00.xyz * dw00.x + e.v01.xyz * dw01.x + e.v02.xyz * dw02.x + e.v03.xyz * dw03.x + e.v04.xyz * dw04.x  + e.v05.xyz * dw05.x + e.v06.xyz * dw06.x + e.v07.xyz * dw07.x + e.v08.xyz * dw08.x + e.v09.xyz * dw09.x + e.v10.xyz * dw10.x + e.v11.xyz * dw11.x + e.v12.xyz * dw12.x + e.v13.xyz * dw13.x + e.v14.xyz * dw14.x + e.v15.xyz * dw15.x + e.v16.xyz * dw16.x + e.v17.xyz * dw17.x + e.v18.xyz * dw18.x + e.v19.xyz * dw19.x;\n        vec3 scol = e.v00.xyz * dw00.y + e.v01.xyz * dw01.y + e.v02.xyz * dw02.y + e.v03.xyz * dw03.y + e.v04.xyz * dw04.y  + e.v05.xyz * dw05.y + e.v06.xyz * dw06.y + e.v07.xyz * dw07.y + e.v08.xyz * dw08.y + e.v09.xyz * dw09.y + e.v10.xyz * dw10.y + e.v11.xyz * dw11.y + e.v12.xyz * dw12.y + e.v13.xyz * dw13.y + e.v14.xyz * dw14.y + e.v15.xyz * dw15.y + e.v16.xyz * dw16.y + e.v17.xyz * dw17.y + e.v18.xyz * dw18.y + e.v19.xyz * dw19.y;\n        vec3 tcol = e.v00.xyz * dw00.z + e.v01.xyz * dw01.z + e.v02.xyz * dw02.z + e.v03.xyz * dw03.z + e.v04.xyz * dw04.z  + e.v05.xyz * dw05.z + e.v06.xyz * dw06.z + e.v07.xyz * dw07.z + e.v08.xyz * dw08.z + e.v09.xyz * dw09.z + e.v10.xyz * dw10.z + e.v11.xyz * dw11.z + e.v12.xyz * dw12.z + e.v13.xyz * dw13.z + e.v14.xyz * dw14.z + e.v15.xyz * dw15.z + e.v16.xyz * dw16.z + e.v17.xyz * dw17.z + e.v18.xyz * dw18.z + e.v19.xyz * dw19.z;\n\n        // Compute determinants and generate improvements\n        float d = determinant(mat3(rcol, scol, tcol));\n        if (abs(d) < 1e-20) {\n            return false; // Determinant too small, likely singular\n        }\n        // Newton Raphson update formula, x_new = x_old - f(x) / f'(x), but generalized to \n        // multiple dimensions. fcol has principle values, while other two contain gradients, \n        // so the ratio effectively calculates changes needed using Cramer's rule.\n        rst.x = rst_curr.x - determinant(mat3(fcol, scol, tcol)) / d;\n        rst.y = rst_curr.y - determinant(mat3(rcol, fcol, tcol)) / d;\n        rst.z = rst_curr.z - determinant(mat3(rcol, scol, fcol)) / d;\n        \n        // Check for convergence\n        if (all(lessThan(abs(rst - rst_curr), vec3(CONVERGED_ERROR))))\n            converged = true;\n\n        rst_curr = rst; // Commit the updated canonical coordinates\n    }\n    \n    if (!converged) return false;\n    \n    // Check for containment of the final cannonical point location\n    if (any(greaterThan(rst_curr, vec3(1.0)))) return false;\n    if (any(lessThan(rst_curr, vec3(0.0)))) return false;    \n    \n    // Interpolate the values stored on the element nodes\n    value = e.v00.w * w00 + e.v01.w * w01 + e.v02.w * w02 + e.v03.w * w03 \n          + e.v04.w * w04 + e.v05.w * w05 + e.v06.w * w06 + e.v07.w * w07\n          + e.v08.w * w08 + e.v09.w * w09 + e.v10.w * w10 + e.v11.w * w11\n          + e.v12.w * w12 + e.v13.w * w13 + e.v14.w * w14 + e.v15.w * w15\n          + e.v16.w * w16 + e.v17.w * w17 + e.v18.w * w18 + e.v19.w * w19;\n    return true;\n}\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n\n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n\n}\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\nQuadraticHexahedron CreateQuadraticHexahedron() {\n    QuadraticHexahedron hex;\n\n    float time = iTime*3.f;\n\n    // Corner vertices\n    hex.v00 = vec4(-1., .75*cos((1.0 / 4.0) * M_2PI), .75*sin((1.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.1)));\n    hex.v01 = vec4(-1., .75*cos((2.0 / 4.0) * M_2PI), .75*sin((2.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.2)));\n    hex.v02 = vec4(-1., .75*cos((3.0 / 4.0) * M_2PI), .75*sin((3.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.3)));\n    hex.v03 = vec4(-1., .75*cos((4.0 / 4.0) * M_2PI), .75*sin((4.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.4)));\n    hex.v04 = vec4(+1., .75*cos((1.0 / 4.0) * M_2PI), .75*sin((1.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.5)));\n    hex.v05 = vec4(+1., .75*cos((2.0 / 4.0) * M_2PI), .75*sin((2.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.6)));\n    hex.v06 = vec4(+1., .75*cos((3.0 / 4.0) * M_2PI), .75*sin((3.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.7)));\n    hex.v07 = vec4(+1., .75*cos((4.0 / 4.0) * M_2PI), .75*sin((4.0 / 4.0) * M_2PI), (.5 + .5 * cos(time*0.8)));\n\n    vec3 cen = (hex.v00 + hex.v01 + hex.v02 + hex.v03 \n              + hex.v04 + hex.v05 + hex.v06 + hex.v07).xyz / 8.0;\n\n    // Edge vertices\n    hex.v08 = vec4((hex.v00 + hex.v01).xyz * .5f, (.5 + .5 * cos(time*0.9))); // -> midpoint between 0 and 1\n    hex.v09 = vec4((hex.v01 + hex.v02).xyz * .5f, (.5 + .5 * cos(time*1.0))); // -> midpoint between 1 and 2\n    hex.v10 = vec4((hex.v02 + hex.v03).xyz * .5f, (.5 + .5 * cos(time*1.1))); // -> midpoint between 2 and 3\n    hex.v11 = vec4((hex.v03 + hex.v00).xyz * .5f, (.5 + .5 * cos(time*1.2))); // -> midpoint between 3 and 0\n\n    hex.v12 = vec4((hex.v04 + hex.v05).xyz * .5f, (.5 + .5 * cos(time*1.3))); // -> midpoint between 4 and 5\n    hex.v13 = vec4((hex.v05 + hex.v06).xyz * .5f, (.5 + .5 * cos(time*1.4))); // -> midpoint between 5 and 6\n    hex.v14 = vec4((hex.v06 + hex.v07).xyz * .5f, (.5 + .5 * cos(time*1.5))); // -> midpoint between 6 and 7\n    hex.v15 = vec4((hex.v07 + hex.v04).xyz * .5f, (.5 + .5 * cos(time*1.6))); // -> midpoint between 7 and 4\n\n    hex.v16 = vec4((hex.v00 + hex.v04).xyz * .5f, (.5 + .5 * cos(time*1.7))); // -> midpoint between 0 and 4\n    hex.v17 = vec4((hex.v01 + hex.v05).xyz * .5f, (.5 + .5 * cos(time*1.8))); // -> midpoint between 1 and 5\n    hex.v18 = vec4((hex.v02 + hex.v06).xyz * .5f, (.5 + .5 * cos(time*1.9))); // -> midpoint between 2 and 6\n    hex.v19 = vec4((hex.v03 + hex.v07).xyz * .5f, (.5 + .5 * cos(time*2.0))); // -> midpoint between 3 and 7\n    \n    // Make the edge vertices wiggle\n    hex.v07.xyz = hex.v07.xyz + .1 * normalize(hex.v07.xyz - cen) * cos(time * .10);\n    hex.v08.xyz = hex.v08.xyz + .1 * normalize(hex.v08.xyz - cen) * cos(time * .15);\n    hex.v09.xyz = hex.v09.xyz + .1 * normalize(hex.v09.xyz - cen) * cos(time * .20);\n    hex.v10.xyz = hex.v10.xyz + .1 * normalize(hex.v10.xyz - cen) * cos(time * .25);\n    hex.v11.xyz = hex.v11.xyz + .1 * normalize(hex.v11.xyz - cen) * cos(time * .30);\n    hex.v12.xyz = hex.v12.xyz + .1 * normalize(hex.v12.xyz - cen) * cos(time * .35);\n    hex.v13.xyz = hex.v13.xyz + .1 * normalize(hex.v13.xyz - cen) * cos(time * .40);\n    hex.v14.xyz = hex.v14.xyz + .1 * normalize(hex.v14.xyz - cen) * cos(time * .45);\n    hex.v15.xyz = hex.v15.xyz + .1 * normalize(hex.v15.xyz - cen) * cos(time * .50);\n    hex.v16.xyz = hex.v16.xyz + .1 * normalize(hex.v16.xyz - cen) * cos(time * .55);\n    hex.v17.xyz = hex.v17.xyz + .1 * normalize(hex.v17.xyz - cen) * cos(time * .60);\n    hex.v18.xyz = hex.v18.xyz + .1 * normalize(hex.v18.xyz - cen) * cos(time * .65);\n    hex.v19.xyz = hex.v19.xyz + .1 * normalize(hex.v19.xyz - cen) * cos(time * .70);\n\n    return hex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = 0.25*iTime + 6.283185*iMouse.x/iResolution.x;\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n\n    // create element\n    QuadraticHexahedron hex = CreateQuadraticHexahedron();\n        \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        float value; \n        if (interpolate(p, hex, value)) {\n            // Colormapped value and a hardcoded optical density\n            vec3 rgb = viridis(value) * EXPOSURE;\n            float density = 2.0;\n            float rho = 1.0 - exp(-density * step);\n            color = over(color, vec4(rgb, rho));\n            if (color.a > .95) break;\n        }\n\t\tp += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n\n}\n","name":"Image","description":"","type":"image"}]}