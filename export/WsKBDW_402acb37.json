{"ver":"0.1","info":{"id":"WsKBDW","date":"1607152217","viewed":82,"name":"Power Of Two Tiles","username":"sdfgeoff","description":"Draws a bunch of tiles all at power-of-two pixel size. Note that the final buffer will never be half the canvas resolution because the canvas size is non-power-of-two.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["poweroftwo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/// Returns how big in pixels a tile will be\nfloat get_tile_size(float tile_id_f) {\n    return pow(2.0, tile_id_f);\n}\n\n/// Returns the tile ID given a pixel coordinate\nfloat get_tile_id(vec2 pixel_coord) {\n    return floor(log2(pixel_coord.x));\n}\n\n\nvec4 get_tile_data(vec2 pixel_coord, vec2 buffer_resolution) {\n\t// Returns data about the tile: \n    // rg = UV coords (0-1)\n    // b = tile size in pixels\n    // a = tile_id\n    float tile_id_f = get_tile_id(pixel_coord);\n    float size = get_tile_size(tile_id_f);\n    \n    vec2 uv = pixel_coord / size - vec2(1.0, 0.0);\n    \n    return vec4(uv, size, tile_id_f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\\\n    \n    vec2 buffer_resolution = iResolution.xy;\n    float max_tiles = floor(log2(buffer_resolution.x)) - 1.0;\n\n    vec4 tile_data = get_tile_data(fragCoord, buffer_resolution);\n    \n    \n    /// Throw away things outside of a tile\n    if (tile_data.y > 1.0 || tile_data.a > max_tiles) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    /// Maybe also useful to only use the part of a tile that matches the aspect\n    /// ratio of the output.\n    tile_data.y *= buffer_resolution.x / buffer_resolution.y;\n    if (tile_data.y > 1.0) {\n        fragColor = vec4(0.5);\n        return;\n    }\n    \n    \n    \n    fragColor = vec4(tile_data.rg, tile_data.a / max_tiles, 1.0);\n}","name":"Image","description":"","type":"image"}]}