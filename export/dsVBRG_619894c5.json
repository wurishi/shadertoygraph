{"ver":"0.1","info":{"id":"dsVBRG","date":"1698400583","viewed":21,"name":"Gradient Triangle Renderer","username":"crossity","description":"Shader that can draw triangles with point gradient","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","triangle","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool eq(float a, float b) {\n    return abs(a - b) <= 0.1;\n}\n\nbool InTriangle(vec2 a, vec2 p1, vec2 p2, vec2 p3) {\n  // get the area of the triangle\n  float areaOrig = abs( (p2.x-p1.x)*(p3.y-p1.y) - (p3.x-p1.x)*(p2.y-p1.y) );\n\n  // get the area of 3 triangles made between the point\n  // and the corners of the triangle\n  float area1 =    abs( (p1.x-a.x)*(p2.y-a.y) - (p2.x-a.x)*(p1.y-a.y) );\n  float area2 =    abs( (p2.x-a.x)*(p3.y-a.y) - (p3.x-a.x)*(p2.y-a.y) );\n  float area3 =    abs( (p3.x-a.x)*(p1.y-a.y) - (p1.x-a.x)*(p3.y-a.y) );\n\n  // if the sum of the three areas equals the original,\n  // we're inside the triangle!\n  if (eq(area1 + area2 + area3, areaOrig)) {\n    return true;\n  }\n  return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 p1 = vec2(iResolution.x / 3.f,       iResolution.y / 3.f      );\n    vec2 p2 = vec2(iResolution.x / 2.f,       iResolution.y / 3.f * 2.f);\n    vec2 p3 = vec2(iResolution.x / 3.f * 2.f, iResolution.y / 3.f      );\n    float z1 = 1.f;\n    float z2 = 0.f;\n    float z3 = 0.5f;\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0, 0, 0);\n    if (InTriangle(fragCoord, p1, p2, p3)) {\n        float zy, zx;\n        if (z1 != z2) {\n            float ky = (p1.y - p2.y) / (z1 - z2);\n            float by = p1.y - z1 * ky;\n            zy = ky * fragCoord.y + by;\n        }\n        else {\n            zy = p1.z;\n        }\n        if (p1.z != p3.z) {\n            float kx = (p1_2D.x - p3_2D.x) / (p1.z - p3.z);\n            float bx = p1_2D.x - p1.z * kx;\n            zx = kx * x + bx;\n        }\n        else {\n            zx = p1.z;\n        }\n\n        float z = (zy + zx) * 0.5;\n        col = vec3(z, 1.f, 1.f - z) * z;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}