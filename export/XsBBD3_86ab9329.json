{"ver":"0.1","info":{"id":"XsBBD3","date":"1502377975","viewed":563,"name":"diagonal mirrors","username":"ollj","description":"mouse.xy sets points.\n\ndiagonal mirrors.\n\nsimple and useful for rounded glyphs\n\ni keep forgetting its details, therefore posting.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["diagona","lmirror"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nsimpler variant of \"glide reflection\"=\"transflect\":\nhttps://www.shadertoy.com/view/XsfBDH\n\nthis is usefull to define the glyphs \"j,t,r\", utilizing symmetry.\n*/\n\n\n//return __signed distance of [u] to line trough (0,0) and [m], m must be normalized.\n//float line(vec2 u,vec2 m){u.x=-u.x;float k=dot(m,u.yx);return k;}\n//float lineN(vec2 u,vec2 m){return line(u,normalize(m));}\n\nvec2 mirror(vec2 u){u=.5*u*mat2(sqrt(2.)*vec4(-1,1,1,1));//eight rotation;\n u.y=abs(u.y);return u;}\n\n//mirrorNegated()=180deg rotation is simpler than mirror()\n//the tricky thing is setting the mirror axis.\nvec2 mirrorNegated(vec2 u){\n return u*sign(u.x+u.y);//the sign() part sets the mirror axis\n}\n\n#define frame(u) (u-.5*iResolution.xy)*9./iResolution.y\nvoid mainImage(out vec4 O, in vec2 U){\n\tvec2 u=frame(U);\n    vec2 m=frame(iMouse.xy);\n    vec3 c=vec3(0,u);\n    c.r=length(mirrorNegated(u)-mirrorNegated(m));//red negated mirror, 180Â° rotation\n    c.g=length(mirror(u)       -mirror(m));       //green is mirror image\n    c=fract(c);\n\tO = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}