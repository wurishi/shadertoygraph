{"ver":"0.1","info":{"id":"Ds2fDV","date":"1690177992","viewed":134,"name":"Gyroid Practice 0724","username":"marianax","description":"Gyroid Practice 0724","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n    p *= scale;\n    vec2 offset = vec2(1.,1.);\n    return abs(dot(\n    sin(p*offset.x), cos(p.zxy*offset.y)) - bias) \n    / (scale * max(offset.x, offset.y)) - thickness; \n}\n\nvec3 Transform(vec3 p){\n    p.xy *= Rot(p.z*.15);\n    p.z -= iTime*.1;\n    p.y -= .3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    p = Transform(p);\n\n    float d = sdBox(p, vec3(1));\n    float g1 = sdGyroid(p, 5., .03, 1.4);\n    float g2 = sdGyroid(p, 8.3, .03, .3);\n    float g3 = sdGyroid(p, 17.3, .03, .3);\n    float g4 = sdGyroid(p, 37.7, .03, .3);\n    float g5 = sdGyroid(p, 71.4, .03, .3);\n    \n    // float gyroid = min(g1, g2);\n    float g = g1 \n        - g2 * .4 \n        - g3 * .2 \n        + g4 * .2 \n        + g5 * .3;\n    // float g = g1 - g2*.2;\n    \n    return (  g * .7);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.03, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 Background(vec3 rd) { \n    vec3 col = vec3(0.);\n    float t = iTime;\n    float y = rd.y * .5 + .5;\n    \n    col += (1.-y)*vec3(1,.4,.1)*2.;\n    \n    float a = atan(rd.x, rd.z);\n    float flames = sin(a * 10. + t) * sin(a * 13. - t) * sin(a * 6.);\n    flames *= S(.8, .5, y);\n    col += flames;\n    col = max(col, 0.);\n    col += S(.3, .0, y);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime;\n    \n    uv+= sin(uv * 60. + t) *.07;\n\n    vec3 ro = vec3(0, 0, -.03);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 lookat = vec3(0);\n    vec3 rd = GetRayDir(uv, ro, lookat, 0.8);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        \n        p = Transform(p);\n        \n        vec3 r = reflect(rd, n);\n\n        float dif = n.y*.5+.5;\n        col += dif * dif * vec3(0,.1*S(0.,1.,n.y),.35);\n        \n        float g2 = sdGyroid(p, 10.3, .03, .3);\n        col *= S(-.1,.1,g2);\n        \n        float crackWidth = -.02 + S(0., -.5, n.y) * .02;\n        float cracks = S(crackWidth,-.03,g2);\n        float g3 = sdGyroid(p+t * .1, 6.3, .03, .3);\n        float g4 = sdGyroid(p-t * .03, 3.37, .03, .3);\n        cracks *= g3*g4*20. + .2 * S(2., .0, n.y);\n        \n        col += cracks*vec3(1,.4,.1) * 3.;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    col = mix(col, Background(rd),S(0.,7.,d));\n    // col = Background(rd);\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}