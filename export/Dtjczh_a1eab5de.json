{"ver":"0.1","info":{"id":"Dtjczh","date":"1691475612","viewed":110,"name":"comic book shader","username":"lalaoopybee","description":"math and randomness gives interesting result\nsimilar to my other [url=https://www.shadertoy.com/view/dsySWW]crosshatch shader[/url]","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["lines","crosshatch","sketch","npr"],"hasliked":0,"parentid":"DdSBRW","parentname":"voronoi crosshatch"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//gaussian blur\n#define HatchK 5\n#define SIGMA .77\n\n#define MlvK 5//[3, 7]\n\nfloat gaussian(vec2 pos){\n    float left=1./(2.*PI*SIGMA*SIGMA);\n    float right=exp(-dot(pos, pos)/(2.*SIGMA*SIGMA));\n    return left*right;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    \n    //optimizations?\n    float num=float(MlvK*MlvK);\n    float nWeight=1./num;\n    float n1Weight=1./(num-1.);\n    \n    //every possible kernel\n    float minVar=0.;\n    for(int oi=0;oi<MlvK;oi++){\n        for(int oj=0;oj<MlvK;oj++){\n            int ox=oi-MlvK+1, oy=oj-MlvK+1;\n            \n            //naive variance formula\n            vec4 sum=vec4(0.), sumSq=sum;\n            for(int ii=0;ii<MlvK;ii++){\n                for(int ij=0;ij<MlvK;ij++){\n                    vec2 offset=vec2(ox+ii, oy+ij)/iResolution.xy;\n                    vec3 col=texture(iChannel0, uv+offset).rgb;\n                    vec4 value=vec4(col, LUM(col));\n                    sum+=value;\n                    sumSq+=value*value;\n                }\n            }\n            float var=(sumSq.a-sum.a*sum.a*nWeight)*n1Weight;\n            //\"sort\" while sampling\n            if((oi==0&&oj==0)||var<minVar){\n                minVar=var;\n                fragColor=vec4(sum.rgb*nWeight, 1.);\n            }\n        }\n    }\n    \n    vec4 cSum=vec4(0);\n    float wSum=0.;\n    for(int i=-HatchK;i<=HatchK;i++){\n        for(int j=-HatchK;j<=HatchK;j++){\n            vec2 offset=vec2(i, j);\n            float weight=gaussian(offset);\n            wSum+=weight;\n            \n            vec2 offsetUV=offset/iResolution.xy;\n            vec4 col=texture(iChannel1, uv+offsetUV);\n            cSum+=col*weight;\n        }\n    }\n    vec4 avg=cSum/wSum;\n    fragColor*=avg;\n    fragColor*=1.-avg.a;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define N 3//[1, 5]\n#define LN_SZ 5.\n#define VN_SCL 14.\n#define ANIM_SPEED 5.//fps\n\nmat3 sobelX=mat3(\n    -1, 0, 1,\n    -2, 0, 2,\n    -1, 0, 1\n);\n\nmat3 sobelY=mat3(\n    1, 2, 1,\n    0, 0, 0,\n    -1, -2, -1\n);\n\n//voronoi from inigo quilez\n//https://www.shadertoy.com/view/MslGD8\nvec2 voronoi(vec2 x){\n    vec2 n=floor(x);\n    vec2 f=x-n;\n\tvec3 m=vec3(8);\n    float time=round(iTime*ANIM_SPEED)/ANIM_SPEED;\n    for(int j=-1;j<=1;j++){\n        for(int i=-1;i<=1;i++){\n            vec2 g=vec2(i, j);\n            vec2 o=hash22(n+g);\n\t        vec2 r=g-f+(.5+.5*sin(20.*time+2.*PI*o));\n\t\t    float d=dot(r, r);\n            if(d<m.x) m=vec3(d, o);\n        }\n    }\n\n    return vec2(sqrt(m.x), m.y+m.z);\n}\n\n//distance from point to line\nfloat d2l(float t, vec2 p){\n    return abs(cos(t)*p.y-sin(t)*p.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    //min and max angle change between crosshatch level\n    float minChg=1./float(N+1);\n    float maxChg=1./float(N);\n    \n    //randomly offset coord\n    vec2 coord=fragCoord+hash22(fragCoord)-.5;\n    vec2 uv=coord/iResolution.xy;\n    \n    //input tex luminance\n    vec4 col=texture(iChannel0, uv);\n    float lum=LUM(col.rgb);\n    lum=pow(lum, .53);\n    \n    //voronoi cell info(rand seed)\n    vec2 p=fragCoord/max(iResolution.x,iResolution.y);\n    vec2 c=voronoi(VN_SCL*p);\n    \n    //generalized crosshatch procedure\n    float theta, hatch=1.;\n    for(int i=0;i<N;i++){\n        float bound=1.-float(i+1)/float(N+1);\n        if(lum<bound){\n            if(i==0) theta=2.*PI*hash11(c.y);\n            else theta+=PI*mix(minChg, maxChg, hash11(c.y+float(i)));\n            \n            float dist=d2l(theta, coord);\n            float repeat=1.-abs(LN_SZ-2.*mod(dist, LN_SZ))/LN_SZ;\n            float line=smoothstep(.5, 1., repeat);\n            hatch-=line;\n        }\n    }\n    col/=max(col.r, max(col.g, col.b));\n    fragColor=clamp(col*hatch, .0, 1.);\n    \n    vec2 sum=vec2(0);\n    for(int i=0;i<3;i++){\n        for(int j=0;j<3;j++){\n            vec2 offsetUV=vec2(i-1, j-1)/iResolution.xy;\n            vec3 col=texture(iChannel0, uv+offsetUV).rgb;\n            float lum=LUM(col.rgb);\n            sum+=lum*vec2(sobelX[i][j], sobelY[i][j]);\n        }\n    }\n    fragColor.a=smoothstep(.2, 1., length(sum));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415927\n\n#define LUM(a) dot(a, vec3(.299, .587, .114))\n\n//hash from dave hoskins\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p){\n    p=fract(p*.1031);\n    p*=p+33.33;\n    return fract(2.*p*p);\n}\nvec2 hash22(vec2 p){\n\tvec3 p3=fract(p.xyx*vec3(.1031, .1030, .0973));\n    p3+=dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}","name":"Common","description":"","type":"common"}]}