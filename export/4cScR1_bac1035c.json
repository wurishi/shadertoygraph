{"ver":"0.1","info":{"id":"4cScR1","date":"1721887537","viewed":24,"name":"MAGIC EYE postprocessing","username":"prosumer","description":"postprocessing","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["postprocessinghw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 prosumer\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//ref: https://www.shadertoy.com/view/XdB3zV\n//ref https://www.shadertoy.com/view/lsfGRr\n\n#define GAMMA 0.65\n#define REGIONS 5.\n#define LINES 0.5\n#define BASE 2.5\n#define GREEN_BIAS 0.9\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nvec3 OutlineWhyCantIPassASampler(vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y = 1.-uv.y;\n  \tvec4 lines= vec4(0.30, 0.59, 0.11, 1.0);\n\n\tlines.rgb = lines.rgb * LINES*1.5;\n \n  \tfloat s11 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, -1.0 / iResolution.y)), lines);   // LEFT\n  \tfloat s12 = dot(texture(iChannel1, uv + vec2(0, -1.0 / iResolution.y)), lines);             // MIDDLE\n  \tfloat s13 = dot(texture(iChannel1, uv + vec2(1.0 / iResolution.x, -1.0 / iResolution.y)), lines);    // RIGHT\n \n\n  \tfloat s21 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // LEFT\n  \t// Omit center\n  \tfloat s23 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // RIGHT\n \n  \tfloat s31 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 1.0 / iResolution.y)), lines);    // LEFT\n  \tfloat s32 = dot(texture(iChannel1, uv + vec2(0, 1.0 / iResolution.y)), lines);              // MIDDLE\n  \tfloat s33 = dot(texture(iChannel1, uv + vec2(1.0 / iResolution.x, 1.0 / iResolution.y)), lines); // RIGHT\n \n  \tfloat t1 = s13 + s33 + (2.0 * s23) - s11 - (2.0 * s21) - s31;\n  \tfloat t2 = s31 + (2.0 * s32) + s33 - s11 - (2.0 * s12) - s13;\n \n  \tvec3 col;\n \n\tif (((t1 * t1) + (t2* t2)) > 0.04) \n\t{\n  \t\tcol = vec3(-1.,-1.,-1.);\n  \t}\n\telse\n\t{\n    \t\tcol = vec3(0.,0.,0.);\n  \t}\n \n  \treturn col;\n}\n\n\nvec3 RecolorForeground(vec3 color)\n{\n\tif(color.g > (color.r + color.b)*GREEN_BIAS)\n\t{\n\t\tcolor.rgb = vec3(0.,0.,0.);\n\t}\n\n\t\n\tcolor.rgb = 0.2126*color.rrr + 0.7152*color.ggg + 0.0722*color.bbb;\n\t\n    if(color .r > 0.75)\n\t{\n\t\tcolor.r *= 0.9;\n\t}\n\telse if(color.r > 0.5)\n\t{\n\t\tcolor.r *= 0.7;\n\t\tcolor.g *=0.9;\n\t}\n\telse if (color.r > 0.25)\n\t{\n\t\tcolor.r *=0.5;\n\t\tcolor.g *=0.75;\n\t}\n\telse\n\t{\n\t\tcolor.r *= 0.25;\n\t\tcolor.g *= 0.5;\n\t}\n\t\n\t\n\treturn color;\n}\n\n\nvec3 Posterize(vec3 color)\n{\n\tcolor = pow(color, vec3(GAMMA, GAMMA, GAMMA));\n\tcolor = floor(color * REGIONS)/REGIONS;\n\tcolor = pow(color, vec3(1.0/GAMMA));\n\treturn color.rgb;\n}\n\nvec3 ReplaceBackground(vec3 color,vec2 uv,vec2 fragCoord)\n{\n\n    color.r = texture(iChannel1,vec2(uv.x,1.-uv.y)).r+0.6;\n\t//color.r = (0.5-0.5*uv.x+uv.y)*0.75 +color.r;\n\tcolor = Posterize(color.rrr);\n\tcolor.b = -texture(iChannel1,vec2(uv.x,1.-uv.y)).r+0.7;\n\tcolor.g = 0.;\n\tcolor += OutlineWhyCantIPassASampler(fragCoord)/40.;\n\treturn color;\n}\n\nvec3 Outline(vec2 uv)\n{\n  \tvec4 lines= vec4(0.30, 0.59, 0.11, 1.0);\n\n\tlines.rgb = lines.rgb * LINES;\n\tif(iResolution.x < 300.)\n\t{\n\t\tlines /= 4.0;\t// improves thumbnail look\n\t}\n\telse if(iResolution.x > 1000.)\n\t{\n\t\tlines *= 1.5;\n\t}\n\t\n \n  \tfloat s11 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, -1.0 / iResolution.y)), lines);   // LEFT\n  \tfloat s12 = dot(texture(iChannel0, uv + vec2(0, -1.0 / iResolution.y)), lines);             // MIDDLE\n  \tfloat s13 = dot(texture(iChannel0, uv + vec2(1.0 / iResolution.x, -1.0 / iResolution.y)), lines);    // RIGHT\n \n\n  \tfloat s21 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // LEFT\n  \t// Omit center\n  \tfloat s23 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // RIGHT\n \n  \tfloat s31 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 1.0 / iResolution.y)), lines);    // LEFT\n  \tfloat s32 = dot(texture(iChannel0, uv + vec2(0, 1.0 / iResolution.y)), lines);              // MIDDLE\n  \tfloat s33 = dot(texture(iChannel0, uv + vec2(1.0 / iResolution.x, 1.0 / iResolution.y)), lines); // RIGHT\n \n  \tfloat t1 = s13 + s33 + (2.0 * s23) - s11 - (2.0 * s21) - s31;\n  \tfloat t2 = s31 + (2.0 * s32) + s33 - s11 - (2.0 * s12) - s13;\n \n  \tvec3 col;\n \n\tif (((t1 * t1) + (t2* t2)) > 0.04) \n\t{\n  \t\tcol = vec3(-1.,-1.,-1.);\n  \t}\n\telse\n\t{\n    \tcol = vec3(0.,0.,0.);\n  \t}\n \n  \treturn col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color = normalize(texture(iChannel0,uv)+ texture(iChannel2,uv)/1.2).rgb*BASE;\t\n\tcolor = Posterize(color);\n\tvec3 background = ReplaceBackground(color,uv,fragCoord);\n\tcolor.rgb += Outline(uv);\n\tcolor = RecolorForeground(color)+ background;\n\t//color = texture(iChannel0,vec2(uv.x, uv.y)).rgb;\n\tfragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by beautypi in 2012\n\n// Tutorial: https://www.youtube.com/watch?v=emjuqqyq_qc\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = i.x + i.y*57.0;\n\n    return mix(mix( hash(n+ 0.0), hash(n+ 1.0),f.x),\n               mix( hash(n+57.0), hash(n+58.0),f.x),f.y);\n}\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.50000*noise( p ); p = m*p*2.02;\n    f += 0.25000*noise( p ); p = m*p*2.03;\n    f += 0.12500*noise( p ); p = m*p*2.01;\n    f += 0.06250*noise( p ); p = m*p*2.04;\n    f += 0.03125*noise( p );\n    return f/0.984375;\n}\n\nfloat length2( vec2 p )\n{\n    vec2 q = p*p*p*p;\n    return pow( q.x + q.y, 1.0/4.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // polar coordinates\n    float r = length( p );\n    float a = atan( p.y, p.x );\n\n    // animate\n    r *= 1.0 + 0.2*clamp(1.0-r,0.0,1.0)*sin(4.0*iTime);\n\n    // iris (blue-green)\n    vec3 col = vec3( 0.0, 0.3, 0.4 );\n    float f = fbm( 5.0*p );\n    col = mix( col, vec3(0.2,0.5,0.4), f );\n    \n    // yellow towards center\n    col = mix( col, vec3(0.9,0.6,0.2), 1.0-smoothstep(0.2,0.6,r) );\n\n    // darkening\n    f = smoothstep( 0.4, 0.9, fbm( vec2(15.0*a,10.0*r) ) );\n    col *= 1.0-0.5*f;\n\n    // distort\n    a += 0.05*fbm( 20.0*p );\n\n    // cornea\n    f = smoothstep( 0.3, 1.0, fbm( vec2(20.0*a,6.0*r) ) );\n    col = mix( col, vec3(1.0,1.0,1.0), f );\n\n    // edges\n    col *= 1.0-0.25*smoothstep( 0.6,0.8,r );\n\n    // highlight\n    f = 1.0-smoothstep( 0.0, 0.6, length2( mat2(0.6,0.8,-0.8,0.6)*(p-vec2(0.3,0.5) )*vec2(1.0,2.0)) );\n    col += vec3(1.0,0.9,0.9)*f*0.985;\n    \n    // shadow\n    col *= vec3(0.8+0.2*cos(r*a));\n\n    // pupil\n    f = 1.0-smoothstep( 0.2, 0.25, r );\n    col = mix( col, vec3(0.0), f );\n\n    // crop\n    f = smoothstep( 0.79, 0.82, r );\n    col = mix( col, vec3(1.0), f );\n\n    // vignetting\n    vec2 q = fragCoord/iResolution.xy;\n    col *= 0.5 + 0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.1);\n \n\tfragColor = vec4( col, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define REFLECTION_NUMBER 40\n\nmat3 rotation(float angle)\n{\n\tfloat c = cos(angle);\n    float s = sin(angle);\n    return mat3( c, -s, 0.,  s, c, 0.,  0., 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 mo = length(iMouse.xy - vec2(0.0)) < 1.0 ? vec2(0.0) : (iMouse.xy - iResolution.xy*.5)/iResolution.y*3.;\n    \n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y*3. - mo;\n    vec3 huv = vec3(uv, 0.);\n    huv *= rotation(iTime*.2);\n    \n    vec3 axisOrigin = vec3(0., 0., 1.);\n    vec3 axisDirection = vec3(normalize(vec2(1., 1.)), 0.);\n    \n    for(int i = 0; i < REFLECTION_NUMBER; i++)\n    {\n        float offset = (3.1415 * 2. / float(REFLECTION_NUMBER) ) * float(i);\n        float axisRotation = offset;\n    \tvec3 tuv = (huv - axisOrigin) * rotation(-axisRotation);\n    \tif(tuv.y < 0.)\n    \t{\n    \t\tvec3 invuv = tuv;\n        \tinvuv.y = -invuv.y;\n        \tinvuv = (invuv * rotation(axisRotation)) + axisOrigin;\n        \thuv = invuv;\n    \t}\n    }\n    \n    vec3 col = vec3(texture(iChannel0, huv.xy - vec2(iTime *.2, 0.) ));\n    \n    vec3 sky = vec3(texture(iChannel1, huv.xy)).xyz;\n    \n    col = mix(sky, col, abs(sin(iTime/2.0)));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}