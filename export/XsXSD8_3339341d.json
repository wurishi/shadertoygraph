{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// dotCount controls the number of dots that appear in the pattern\n// cyclePeriod controls the number of seconds per period\n#define dotCount 50.0\n#define speedCo 0.05\nfloat distFromPoint(vec2 point);\nvec2 cyclePoint(float r, float speed);\nvoid circleAtPoint(float r, float width, vec2 point);\nvoid dotAtPoint(float r, vec2 point);\n\nvec2 center = vec2(iResolution.x/2.0, iResolution.y/2.0);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Set to black all fragments that I don't later go back and set to a specific color\n\tfragColor = vec4(0.0);\n\tfor (float r=1.0; r<dotCount; r++) {\n\t\tdotAtPoint(4.0, cyclePoint((dotCount-r+1.0)*5.0, r));\n\t}\n}\n\n\n// Draws a circle at a given point with width w and radius r\nvoid circleAtPoint(float r, float width, vec2 point)\n{\n\tfloat pointDist = distFromPoint(point);\n\tif (pointDist < (r+width/2.0) && pointDist > (r-width/2.0)) {\n\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\t}\n}\n\n// Draws a dot at a given point with radius r\nvoid dotAtPoint(float r, vec2 point)\n{\n\tfloat pointDist = distFromPoint(point);\n\tif (pointDist < r) {\n\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\t}\n}\n\n// Determines the current fragment's distance form a given point.\nfloat distFromPoint(vec2 point)\n{\n\t// d = sqrt((x2-x1)^2 + (y2-y1)^2)\n\tfloat xDiff = point.x - fragCoord.x;\n\tfloat yDiff = point.y - fragCoord.y;\n\t\n\tfloat dist = sqrt(pow(xDiff,2.0) + pow(yDiff,2.0));\n\treturn dist;\n}\n\n// Calculates the current center of a dot circle the center at radius r and a given speed\n// based on the current running time. Speed should be number of times it will make a full\n// circle in 2 minutes. Will require more calculation.\nvec2 cyclePoint(float r, float cycles)\n{\n\tvec2 point;\n\tfloat pointX, pointY;\n\t//float modTime = mod(iTime, cyclePeriod);\n\tfloat modTime = iTime;\n\tfloat angle = cycles*modTime*speedCo;\n\t\n\tpointX = center.x + r*cos(angle);\n\tpointY = center.y - r*sin(angle);\n\t\n\tpoint = vec2(pointX, pointY);\n\treturn point;\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsXSD8","date":"1399685699","viewed":212,"name":"Spinning Circles","username":"hwfwalton","description":"WIP. Reproduction of http://whitneymusicbox.org/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["colors","cycles"],"hasliked":0,"parentid":"","parentname":""}}