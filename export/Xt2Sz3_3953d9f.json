{"ver":"0.1","info":{"id":"Xt2Sz3","date":"1445448046","viewed":244,"name":"(old) Acid demo","username":"AstronautStr","description":"My first fragment shader. Now using it as a screensaver )\nLooking better in FullHD.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\n#define NORMSIN(x)              ((sin(x) + 1.0) / 2.0)\n#define NORMSIN_T(x)            (NORMSIN(x * iTime))\n#define NORMSIN_HZ(x)           (NORMSIN(2.0 * M_PI * x))\n#define NORMSIN_HZ_T(x)         (NORMSIN(2.0 * M_PI * x * iTime))\n\nvec2 hpolar(vec2 dPoint)\n{\n    return vec2((dPoint.x * dPoint.x + dPoint.y * dPoint.y), atan(dPoint.y, dPoint.x));\n}\n\nvec2 polar(vec2 dPoint)\n{\n    return vec2(sqrt(dPoint.x * dPoint.x + dPoint.y * dPoint.y), atan(dPoint.y, dPoint.x));\n}\n\nvec2 decart(vec2 pPoint)\n{\n    return vec2(pPoint.x * cos(pPoint.y), pPoint.x * sin(pPoint.y));\n}\n\nfloat softSquare(float phase, float width, float aaEdge)\n{\n    float result = NORMSIN(phase);\n    float alias = aaEdge * width;\n    \n    if (result > (width + alias))\n        return 1.0;\n    else if (result < (width - alias))\n        return 0.0;\n    else\n        return NORMSIN(M_PI + M_PI * (width - result) / (2.0 * alias));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 viewPort = vec2(1920.0, 1080.0);\n    float halfWidth = 0.5 * viewPort.x;\n    float halfHeight = 0.5 * viewPort.y;\n    vec2 fragmentPoint = fragCoord.xy / iResolution.xy * viewPort;\n    \n    float phase = 2.0 * M_PI * iTime * 1.0;\n    float radius = halfHeight;\n    \n    vec4 sphere;\n    {\n        vec2 center = vec2(halfWidth, halfHeight);\n        \n        vec2 dPoint = vec2(fragmentPoint.x - center.x, fragmentPoint.y - center.y);\n        vec2 pPoint = polar(dPoint);\n        \n        float maxRadius = sqrt(halfWidth * halfWidth + halfHeight * halfHeight);\n        float dist = pPoint.x / maxRadius;\n        \n        pPoint = hpolar(dPoint);\n        pPoint.x *= dist * dist * dist * dist;\n        \n        float speed = 8.0;\n        float width = 0.5;\n        float delay = 0.5 * NORMSIN(phase);\n        \n        float valueRed = NORMSIN(pPoint.x / 10.0 + iTime * speed);\n        float valueBlue = NORMSIN(pPoint.x / 10.0 + (iTime - delay) * speed);\n        float farFading = clamp(pPoint.x / maxRadius, 0.0, 1.0);\n        \n        sphere = vec4(farFading * valueRed, 0.0, farFading * valueBlue, 0.0);\n    }\n    \n    vec2 center = vec2(halfWidth, halfHeight);\n    vec2 camera = vec2(halfWidth + cos(phase) * radius, halfHeight + sin(phase) * radius);\n    vec2 dPoint = vec2(fragmentPoint.x - center.x, fragmentPoint.y - center.y);\n    vec2 pPoint = polar(dPoint);\n    \n    float maxRadius = sqrt(halfWidth * halfWidth + halfHeight * halfHeight);\n    float dist = pPoint.x / maxRadius;\n    \n    float magic = 0.0625;\n    center = center + dist * vec2(center.x - camera.x, center.y - camera.y) * magic;\n    \n    dPoint = vec2(fragmentPoint.x - center.x, fragmentPoint.y - center.y);\n    pPoint = polar(dPoint);\n    pPoint.x *= 1.0 - dist;\n    \n    float speed = 2.0;\n    float width = 0.5;\n    float delay = 0.5 * NORMSIN_HZ_T(0.25);\n    \n    float valueRed = softSquare(pPoint.x / 10.0 + iTime * speed, width, 0.1);\n    float valueBlue = softSquare(pPoint.x / 10.0 + (iTime - delay) * speed, width, 0.1);\n    \n    vec4 color = vec4(valueRed, valueBlue, valueBlue, 1.0);\n    \n    float merge = sqrt( dPoint.x * dPoint.x + dPoint.y * dPoint.y ) / maxRadius;\n    merge = 0.75 + 0.25 * merge * NORMSIN(phase + M_PI);\n    \n    fragColor = merge * color + (1.0 - merge) * sphere;\n}","name":"Image","description":"","type":"image"}]}