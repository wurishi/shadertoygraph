{"ver":"0.1","info":{"id":"Ds3cD7","date":"1695117228","viewed":80,"name":"Hue unbound palette generator","username":"theGiallo","description":"Generates a color palette in the HSV space, varying only hue, without knowing beforehand the cardinality of the palette (in that case you can simply split the span in even parts).","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["palette","hsv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    col = texture( iChannel0, uv ).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// NOTE(theGiallo): compute the next highest power of 2 of 32-bit v\nuint round_up_to_power_2( uint v )\n{\n    v--;\n    v |= v >> 1;\n    v |= v >> 2;\n    v |= v >> 4;\n    v |= v >> 8;\n    v |= v >> 16;\n    v++;\n\n    return v;\n}\n\n// NOTE(theGiallo): this generates numbers as follows:\n// 0 1/2\n// 1/4 3/4\n// 1/8 3/8 5/8 7/8\n// 1/16 ...\n// It's been devised to generate a color palette in the HSV space, valuing\n// hue, without knowing beforehand the cardinality of the palette (in that\n// case you can simply split the span in even parts).\n// Each new value is at the most possible distance from any other point\n// already in the sequence.\nfloat most_distant_point_in_circle01( int index )\n{\n    float ret = 0.0;\n    if ( index == 0 )\n    {\n        return ret;\n    }\n\n    int denominator = int( round_up_to_power_2( uint(index + 1 ) ) );\n\n    int numerator = 1 + 2 * ( index - denominator / 2 );\n\n    ret = float( numerator ) / float( denominator );\n\n    return ret;\n}\n\n#define Tau 6.2831855\n\n\n\n// from: https://www.shadertoy.com/view/MsS3Wc\n// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// Converting from HSV to RGB leads to C1 discontinuities, for the RGB components\n// are driven by picewise linear segments. Using a cubic smoother (smoothstep) makes \n// the color transitions in RGB C1 continuous when linearly interpolating the hue H.\n\n// C2 continuity can be achieved as well by replacing smoothstep with a quintic\n// polynomial. Of course all these cubic, quintic and trigonometric variations break \n// the standard (http://en.wikipedia.org/wiki/HSL_and_HSV), but they look better.\n\n\n// Official HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SPEED 2.0\n#define DELAY_SECS 0.0 // used to be able to fullscreen in time\n#define CONSTANT_VALUE 1\n#define CONSTANT_SATURATION 1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 old = texture(iChannel0, uv);\n    \n    if ( iTime < DELAY_SECS )\n    {\n        fragColor *= 0.0;\n        return;\n    }\n    \n    vec2 xy = ( fragCoord - iResolution.xy / 2.0 ) / min(iResolution.x, iResolution.y) * 2.0 * 1.1;\n\n    vec2 px_size = vec2(1.0, 1.0) / min(iResolution.x, iResolution.y) * 2.0 * 1.1;\n    \n    float is_circle = 1.0 - smoothstep( 0.0, 0.005, abs( length( xy ) - 1.0 ) );\n    \n    is_circle = 0.0;\n    \n    float point_radius = 0.02, point_aa = 2.0 * min( px_size.x, px_size.y );\n    \n    int secs = int((iTime - DELAY_SECS)*SPEED);\n    int denominator = int( round_up_to_power_2( uint(secs + 1 ) ) );\n\n    float circle_radius = 1.0 - 2.0 * point_radius * log2(float(denominator));\n    point_radius = min( point_radius, circle_radius * Tau / float(denominator) );\n    point_radius = max( point_radius, min( px_size.x, px_size.y ) );\n\n    float c = most_distant_point_in_circle01( secs );\n    float rads = c * Tau;\n    vec2 point = vec2( cos(rads), sin(rads) ) * circle_radius;\n    \n\n    float is_point = 1.0 - smoothstep( point_radius - point_aa, point_radius, length( xy - point ) );\n    \n    #if CONSTANT_VALUE\n    float value = 1.0;\n    #else\n    float value = sqrt( circle_radius );\n    #endif\n    \n    #if CONSTANT_SATURATION\n    float saturation = 0.8;\n    #else\n    float saturation = circle_radius;\n    #endif\n    vec3 color = hsv2rgb( vec3( c, saturation, value ) );\n\n    float is_not_point = 1.0 - is_point;\n    \n    fragColor = old * is_not_point + is_point * vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}