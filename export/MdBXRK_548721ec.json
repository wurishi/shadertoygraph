{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//This holds the lights\nstruct LightSource{\n\n    float InnerRad;  //Ligh has full force until it reaches this point\n    float OuterRad;  //Light goes diffuminating from end of inner to end of outer\n    float Intensity; //How \"strong\" this light is\n    vec4  Color;     //Color of the light duh!\n    vec4  Pos;//Position of this light\n};\n\n    struct ConeLight{\n\tvec4 Position;\n\tvec4 WhereToLook;\n\tfloat Angle;\n\tfloat Luminosity;\n\tvec4 LightTint;\n\tfloat Reach; //How far can this light go.\n};\n\nfloat lerp(float p0, float p1, float t)\n{\n  return (1.0 - t) * p0 + t * p1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    ConeLight Cone;\n\tCone.Position = vec4(iResolution.x / 2.0, iResolution.y/2.0,  0.0, 1.0);\n\tCone.WhereToLook = vec4(cos(iTime) * iResolution.x, sin(iTime) * iResolution.y, 0.0, 1.0);\n\tCone.Angle = 2.0;\n\tCone.LightTint = vec4(1.0, 1.0, 0.0, 1.0);\n\tCone.Reach = 300.0;\n\tCone.Luminosity = 2.0;\n    \n    LightSource lights[3];\n    \n    //Lights\n    lights[0].InnerRad = 50.0;\n    lights[0].OuterRad = 100.0;\n    lights[0].Intensity = 1.0;\n    lights[0].Color = vec4(1.0, 0.0, 0.0, 1.0);\n    lights[0].Pos = vec4((cos(iTime) * iResolution.x)/2.0 + 50.0, iResolution.y/2.0, 0.0, 1.0);\n    \n    lights[1].InnerRad = 50.0;\n    lights[1].OuterRad = 100.0;\n    lights[1].Intensity = 1.0;\n    lights[1].Color = vec4(0.0, 1.0, 0.0, 1.0);\n    lights[1].Pos = vec4(iResolution.x/2.0, (sin(iTime) * iResolution.y)/2.0, 0.0, 1.0);\n    \n    lights[2].InnerRad = 50.0;\n    lights[2].OuterRad = 100.0;\n    lights[2].Intensity = 1.0;\n    lights[2].Color = vec4(0.0, 0.0, 1.0, 1.0);\n    lights[2].Pos = vec4((sin(iTime) * -iResolution.x)/2.0 + iResolution.x - 50.0, iResolution.y/2.0, 0.0, 1.0);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Tint for this fragment\n    vec4 FragTint = vec4(-1.0, -1.0, -1.0, -1.0); \n    \n    for(int i = 0; i < 3; ++i)\n  \t{\n    \t//This is the distance to the center of the \n    \t//light source\n        float Distance = length(vec4(fragCoord,0.0,1.0) - lights[i].Pos);\n        Distance /= lights[i].InnerRad;\n        float OutRad = lights[i].OuterRad/ lights[i].InnerRad;\n        if(Distance < 1.0)\n          FragTint += (lights[i].Color * lights[i].Intensity);\n        else if(Distance < OutRad)\n          FragTint += lights[i].Color * lights[i].Intensity * lerp(1.0, 0.0, (Distance - 1.0) / (OutRad - 1.0));\n  \t}\n    \n      //Get the vector for the cone direction\n    vec4 DirectionToLook = Cone.WhereToLook - Cone.Position;\n    DirectionToLook = normalize(DirectionToLook);\n\t\n    //Get the vector to the fragment\n\tvec4 DirectionToFrag = vec4(fragCoord,0,1) - Cone.Position;\n\tDirectionToFrag = normalize(DirectionToFrag);\n  \n \t//Get the angle between  vectors\n\tfloat ResultantAngle = acos(dot(DirectionToLook, DirectionToFrag));\n\t\n    //Get the distance to that fragment from the center\n    float DistanceFromOrigin = length(vec4(fragCoord, 0, 1) - Cone.Position);\n    //Normalize distance\n    float Normalizeddistance = DistanceFromOrigin/Cone.Reach;\n    \n\t//Normalise the angles\n\tfloat AngleToCompare = ResultantAngle / (Cone.Angle/2.0);\n    \n    if(AngleToCompare <= 1.0 && Normalizeddistance <= 1.0)\n\t\tFragTint += Cone.LightTint * Cone.Luminosity * smoothstep(1.0, 0.0, AngleToCompare) * smoothstep(1.0, 0.0, Normalizeddistance);     \n    \n    \n    vec4 Color = texture(iChannel0, uv);\n    Color += FragTint;\n\tfragColor = Color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdBXRK","date":"1413678122","viewed":353,"name":"Moving Lights","username":"blastxu","description":"Three harcoded lights moving, they can blend together. Added a conical light.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}