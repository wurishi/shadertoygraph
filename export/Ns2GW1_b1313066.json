{"ver":"0.1","info":{"id":"Ns2GW1","date":"1617347291","viewed":37,"name":"Fork uv ","username":"aganztracy","description":"a test from bytedance","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["uv"],"hasliked":0,"parentid":"tlyfzV","parentname":"uv transform explanation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv -= .5;\n    uv.x*= iResolution.x/iResolution.y;//把x轴压缩至与y轴一致\n    \n    \n    uv.y*=3.0;\n    float t = floor(mod(uv.y,3.));\n    //float t = mod(uv.y,3.);//返回0.0～3.0\n    //float t = fract(uv.y);//返回0.0～1.0\n    vec3 col = vec3(0.);\n    //col = vec3(t);\n    \n    //if判断在shader中是expensive的\n    //if(t == 1.0) col = vec3(1.,0.,0.);\n    //else if(t==2.0) col = vec3(0.,1.,0.);\n    //else col = vec3(0.,0.,1.);\n    \n    //有什么替换方法呢？一通乱映射。。。把应为1的地方变成0，他们就有一致性了\n    col = vec3(step(-0.1,-1.*abs((t+1.)/1.-1.)),step(-0.1,-1.*abs((t+1.)/2.-1.)),step(-0.1,-1.*abs((t+1.)/3.-1.)));\n    \n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}