{"ver":"0.1","info":{"id":"XXSSRd","date":"1711350198","viewed":39,"name":"06任檄荣","username":"RXK666","description":"使用shadertoy绘制图形\n使用Length函数计算一个向量的长度","likes":0,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 drawCircle(vec2 ValueUV,float radius)\n{\n    vec3 col = vec3(0,0,0);\n\n    //计算pos点距离圆形的距离，所以可以直接length计算\n    //计算当前uv坐标\n    float dis = length(ValueUV) - radius;\n\n    //如果在圆范围内则给红色，否则给黑色\n    col = dis > 0.0 ? vec3(0.0,0.0,0.0) : vec3(1.0,0.0,0.0);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //纹理坐标范围限制到[0.0,1.1]\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //改变纹理坐标范围为[-0.5,0.5]\n    //也就是把uv中心点从左下角，偏移到正中间的位置\n    uv -= 0.5;\n\n    //矫正纹理坐标，使x与y轴长度一致，这样x也就突破了0~1的限制\n    uv.x *= iResolution.x/iResolution.y;\n\n    //计算uv坐标点是否是在圆范围内点，并上色\n    vec3 circle = drawCircle(uv,0.2);\n\n    fragColor = vec4(circle,1.0);\n}\n","name":"Image","description":"","type":"image"}]}