{"ver":"0.1","info":{"id":"dlcyRr","date":"1698824804","viewed":148,"name":"Where Sand of Gold Flows","username":"INCHMAN1900","description":"This is some cool effect I accidentally created when I was learning noise and fbm in The Book of Shaders.\n\nTry to change the variable(LOOP, amplitude, frequency...) in fbm function to see other interesting patterns.","likes":8,"published":3,"flags":0,"usePreview":1,"tags":["noise","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec3 st) {\n    return fract(sin(dot(st,vec3(397.523,591.5939,69.437)))*53426.79);\n}\n\nfloat noise(vec3 st) {\n    vec3 ip = floor(st);\n    vec3 fp = fract(st);\n    \n    float a = random(ip);\n    float b = random(ip + vec3(1., 0., 0.));\n    float c = random(ip + vec3(0., 1., 0.));\n    float d = random(ip + vec3(1., 1., 0.));\n    // add time factor for flow effect.\n    float e = random(ip + vec3(0., 0., 1.));\n    float f = random(ip + vec3(1., 0., 1.));\n    float g = random(ip + vec3(0., 1., 1.));\n    float h = random(ip + vec3(1., 1., 1.));\n    \n    vec3 u = fp * fp * (3.0 - 2.0 * fp);\n    float n = mix(\n        mix(mix(a, b, u.x), mix(c, d, u.x), u.y),\n        mix(mix(e, f, u.x), mix(g, h, u.x), u.y),\n        u.z\n    );\n    return n * 1.5 - .5;\n}\n\nfloat fbm(vec2 uv) {\n    int LOOP = 6;\n    float amplitude = 1.5;\n    float frequency = .5;\n    float ag = .5;\n    float fg = 2.;\n    float n = 0.;\n    for (int i = 0; i < LOOP; i++) {\n        n += noise(vec3(uv * .2 + n * frequency, iTime * .2 + length(uv) * .1) * frequency) * amplitude;\n        frequency *= fg;\n        amplitude *= ag;\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n    vec3 col = vec3(fbm(uv * 50.));\n    col *= texture(iChannel0, col.xy).rgb;\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}