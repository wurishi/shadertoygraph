{"ver":"0.1","info":{"id":"ws3XDn","date":"1571857019","viewed":924,"name":"Floating Sandbox Lightning","username":"GabrieleGiuseppini","description":"Experiments for lightnings in Floating Sandbox.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float GetNoise(float v) // -> (-1.0, 1.0)\n{\n    return (texture(iChannel0, vec2(.2, v)).r - .5) * 2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(.5); // (x=[-0.5, 0.5], y=[-0.5, 0.5])\n    vec2 spacePosition = 2. * uv; // (x=[-1.0, 1.0], y=[-1.0, 1.0 up])\n    \n    #define Speed 1.3\n    \n    float personalitySeed = iMouse.x / iResolution.x; // Randomizing with a constant\n    float progress = fract(iTime * Speed); // 0. -> 1.\n    float renderProgress = smoothstep(-.1, .3, progress); // 0. -> 1. at time=0.3\n    float bottomY = -1.0; // [-inf, +inf]\n    float paramTime = iTime;\n    float paramAmbientLightIntensity = 1.0; //1.0;\n       \n    //----------------------------------------------\n    \n    #define ZigZagRate 8.\n    #define ZigZagDensity1 .105   \n    #define ZigZagDensity2 .65\n    \n    float randomSeed = personalitySeed * 77.7;\n            \n    // Get noise (2 octaves) for this fragment's y and time\n    float variableNoiseOffset = floor(progress * ZigZagRate) / .567 + randomSeed;\n    float fragmentNoise1 = GetNoise(spacePosition.y * ZigZagDensity1 + variableNoiseOffset);\n    float fragmentNoise2 = GetNoise(spacePosition.y * ZigZagDensity2 + variableNoiseOffset);\n        \n    // Calculate deviation based on noise\n    float deviation = \n        fragmentNoise1 * .08\n        + fragmentNoise2 * .08 * .2;\n    \n    // Calculate the bottom Y of the lightning at this moment:\n    // - Low progress: close to the top, i.e. 1.\n    // - High progress: close the desired bottom Y\n    float variableBottomY = 1. + (bottomY - 1.) * renderProgress;\n    \n    // Taper deviation up and down    \n    deviation *= smoothstep(variableBottomY, variableBottomY + .2, spacePosition.y); // Bottom\n    deviation *= smoothstep(0., .05, 1. - spacePosition.y); // Up\n                \n    // Calculate thickness\n    #define MaxHalo -6.\n    #define MinHalo -100.\n    float k = MaxHalo + (MinHalo - MaxHalo) * (spacePosition.y - bottomY) / (1. - bottomY);\n    float thickness = exp(k * abs(spacePosition.x + deviation)); // Deviate laterally\n    \n    // Make pointy at bottom\n    thickness *= smoothstep(variableBottomY, variableBottomY + .2, spacePosition.y);\n        \n    \n    //\n    // Emit\n    //\n    \n    // Just for ShaderToy: turn off once every three shader-seconds\n    thickness *= (1.0 - step(0.1, mod(floor(paramTime * Speed), 3.0)));    \n\t           \n    vec3 lightningColor = vec3(0.6, 0.8, 1.0);\n    lightningColor = mix(vec3(1.), lightningColor, 1.0 - paramAmbientLightIntensity);\n    \n    vec3 skyColor = vec3(.529, .808, .980) * paramAmbientLightIntensity;\n    vec3 col1 = mix(skyColor, lightningColor, thickness);\n    fragColor = vec4(col1, thickness);\n}","name":"Image","description":"","type":"image"}]}