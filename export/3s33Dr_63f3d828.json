{"ver":"0.1","info":{"id":"3s33Dr","date":"1568165260","viewed":268,"name":"Lil' Planet","username":"AlexWalley","description":"Creating a planet with square to circle mapping and looped sin and cos funtions for offsets.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//For square-to-circle mapping, I used:\n//https://arxiv.org/ftp/arxiv/papers/1509/1509.06344.pdf\n\nfloat sgn(float n){ //Used with mapping space\n\treturn abs(n)/n;\n}\n\nvec2 SquareToCircle(vec2 i){\n    return max(abs(i.x), abs(i.y)) * i / length(i);\n}\n\nvec2 FGSqircular(vec2 i){\n\n    float x2 = i.x*i.x;\n    float y2 = i.y*i.y;\n    return i*(sqrt(x2+y2-x2*y2)/length(i));\n\n}\n\n//Pseudo Random Numbers\nvec2 N22(vec2 uv){\n\tvec3 p = fract(uv.xyx*vec3(3820.43, 2183.2, 132.34));\n    p += dot(p, p+32.34);\n    return fract(vec2(p.x*p.y, p.y*p.z));\n}\n\nfloat N21(vec2 uv){\n \treturn fract(sin(uv.x*3492.32+uv.y*824.45)*32487.32);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n   \tuv *= 2.0;\n    vec3 col = vec3(0);\n    float planetMask = smoothstep(0.75, 0.70, length(uv));\n    vec2 gv = fract(uv*9.)-0.5; //Graph UV\n    vec2 id = floor(uv*9.)-0.5; //Id for each box in Graph UV\n    float t = mod(iTime, 2000.);\n    \n    vec2 p = FGSqircular(uv*2.7)+0.5;\n    //p = SquareToCircle(uv*3.0);\n    //p = uv;\n    for(float i = 1.; i < 4.; i++){ //Creates wavy effects\n    \tp.x += cos(p.y*3.*i)*0.5+0.5;\n    \tp.y += cos(p.x*2.*i+t)*0.5+0.5;\n    }\n    p /= 4.;//Normalization\n    p = max(p, 0.);\n    \n    \n    \n    //Stars\n    vec2 pos = sin(N22(id)*40.32)*0.4;\n    pos -= gv;\n    float md = abs(pos.x) + abs(pos.y); //Manhattan distance for diamond shape\n    float ed = length(pos); // Euclidean Distance\n    float randomNum = N21(id)*0.07;\n    float starBrightness = sin(randomNum*100.+t+randomNum*2308.32)*0.4+0.6;\n    col += starBrightness*smoothstep(randomNum, randomNum-0.01, md)*(1.-planetMask);\n    \n    //Planet\n    col.rgb += (p.xxx*vec3(0.9, 0.4, 0.1)*1.8+0.1)*planetMask;\n    col += 0.9*smoothstep(0.95, 0.3, dot(uv,uv))*(1.0-planetMask)*vec3(0.9, 0.4, 0.1);\n    col -= 0.2*smoothstep(0.95, 0.3, length(uv));\n    col += 0.4*smoothstep(0.5, 0.6, dot(uv,uv))*planetMask*vec3(0.9, 0.3, 0.2);\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}