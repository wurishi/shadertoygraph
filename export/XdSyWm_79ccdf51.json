{"ver":"0.1","info":{"id":"XdSyWm","date":"1492599797","viewed":87,"name":"Graprog_Finals","username":"Dreeryan","description":"2d","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Pattern 1\n\n//--------------FUNCTIONS---------------------\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat stars(float probability, vec2 uv) {\n    return step(probability, random(uv));\n}\n\n\n//------COLORS---------------------------------\n\nvec3 red = vec3(1.0, 0.0, 0.0);\nvec3 yellow = vec3(1.0, 1.0, 0.0);\nvec3 skyBlue = vec3(0.52, 0.8, 0.98);\n\n//---------------------------------------------\n\n#if Pattern == 1\n\n//Lava\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float brightness = 0.9f;\n    vec3 stains = vec3(fbm((uv*3.+(iTime * 0.04f))*5.))* brightness * red;\n    stains += vec3(fbm((uv*3.+(iTime * 0.03f))*5.))*0.3 * (abs(sin(iTime)) + .5) * yellow;\n    \n\tfragColor = vec4(stains,1.0);\n}\n\n#elif Pattern == 2\n\n//Cloud\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 value = vec3(skyBlue);\n    value -= fbm(vec2(uv.x * 18. + iTime * 0.3, uv.y * 18.));\n    value -= fbm(uv*5.);\n    value += skyBlue;\n    \n\tfragColor = vec4(value,1.0);\n}\n\n#elif Pattern == 3\n\n//Lava Lamp\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float zoom = 5.;\n    vec3 value = -vec3(step(fbm(vec2(uv.x * zoom, uv.y * zoom - iTime))*.8, uv.y));\n    value += red;\n\tfragColor = vec4(value,1.0);\n}\n\n#elif Pattern == 4\n\n//Granite\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 value = -vec3(fbm(uv*100.));\n   value = mix(value, vec3(1,1,1), 0.6);\n\tfragColor = vec4(value,1.0);\n}\n\n#elif Pattern == 5\n\n//Marble\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 value = vec3(1,1,1);\n    vec3 stains = vec3(fbm((uv*7.)*2.))*.235;\n    //stains += vec3(fbm((uv*1.)*1.))*.40;\n    value = mix(value, vec3(0.860, .806, .574) * -.01,  (smoothstep(.08, .11, stains) - smoothstep(.11, .14, stains)) * .85);\n\tfragColor = vec4(value,1.0);\n}\n\n#elif Pattern == 6\n\n//stars\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //vec3 value = vec3(200, 210, 0);\n    vec3 value = vec3(stars(.999,uv));\n    //value -= vec3(fbm(uv*15.));\n   // value -= vec3(fbm(-uv*5.));\n    \n    vec3 value2 = vec3(stars(.999, uv+1.));\n   // value2 -= vec3(fbm(uv*40.));\n    //value2 -= vec3(fbm(-uv*65.));\n    float s = abs(sin(iTime));\n    value2 *= vec3(1. * s, 1. * s,0);\n    \n    vec3 value3 = vec3(fbm(uv*1000.));\n    value3 -= vec3(fbm(uv*20.));\n    \n    //value *= vec3(0,0,6);\n    //value = mix(value, value2, .5);\n\tfragColor = vec4(value + value2,1.0);\n}\n\n#elif Pattern == 7\n//concrete\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 value = vec3(1, 1, 1);\n    \n    float x = 18.;\n    float y =5.;\n    value -= fbm(vec2(uv.x*x, uv.y)*100.);\n    value -= fbm(vec2(uv.x*y,uv.y)*5.);\n    value = mix(value, vec3(1,1,1), 0.6);\n   /* value -= (noise(uv*vec2(500., 14.) / noise(uv*vec2(1000., 64.) )) * .2);\n   value -= vec3((snoise(uv*vec2(400., 3.)) - snoise(uv*vec2(14., 1.)))) * .04;\n    value -= vec3((snoise(uv*vec2(4000., 3.)) - snoise(uv*vec2(1400., 1.)))) * .01;*/\n    \n\tfragColor = vec4(value,1.0);\n}\n\n#elif Pattern == 8\n//sand\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 value = vec3(.4, .7 , 0); \n    value -= vec3(stars(.5, uv));\n   \n    vec3 value2 = vec3(stars(.9, uv+1.));\n    \n\tfragColor = vec4(value + value2,1.0);\n}\n#endif","name":"Image","description":"","type":"image"}]}