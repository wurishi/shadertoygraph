{"ver":"0.1","info":{"id":"ttB3Rt","date":"1560686113","viewed":3818,"name":"Waving particle surface","username":"jaszunio15","description":"Common: Blur and useful functions\nA:  Main particle system\nB,C,D and Image: Blur\n\nEnjoy :)\n\nShader License: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)","likes":113,"published":1,"flags":32,"usePreview":0,"tags":["waves","vfx","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//Bluring the D Buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = blur(iChannel0, fragCoord, iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//1/512\n#define FREQ_STEP (0.001953125 * 3.0)\n\n#define PI 3.1415927\n#define TWO_PI 6.283185\n\n//Postprocess setting\n#define BLUR_STRENGTH 1.0\n#define BLUR_RANGE 2.5\n\nfloat pow3(in float x)\n{\n \treturn x*x*x;   \n}\n\nfloat hash1_2(in vec2 x)\n{\n \treturn fract(sin(dot(x, vec2(52.127, 61.2871))) * 521.582);   \n}\n\nvec2 hash2_3(in vec3 x)\n{\n    return fract(sin(x * mat2x3(20.5283, 24.1994, 70.2913, \n                                89.9132, 57.1454, 45.1211)) * 492.194);\n}\n\n                 \n//Simple interpolated noise\nvec2 noise2_3(vec3 coord)\n{\n    //vec3 f = fract(coord);\n    vec3 f = smoothstep(0.0, 1.0, fract(coord));\n \t\n    vec3 uv000 = floor(coord);\n    vec3 uv001 = uv000 + vec3(0,0,1);\n    vec3 uv010 = uv000 + vec3(0,1,0);\n    vec3 uv011 = uv000 + vec3(0,1,1);\n    vec3 uv100 = uv000 + vec3(1,0,0);\n    vec3 uv101 = uv000 + vec3(1,0,1);\n    vec3 uv110 = uv000 + vec3(1,1,0);\n    vec3 uv111 = uv000 + vec3(1,1,1);\n    \n    vec2 v000 = hash2_3(uv000);\n    vec2 v001 = hash2_3(uv001);\n    vec2 v010 = hash2_3(uv010);\n    vec2 v011 = hash2_3(uv011);\n    vec2 v100 = hash2_3(uv100);\n    vec2 v101 = hash2_3(uv101);\n    vec2 v110 = hash2_3(uv110);\n    vec2 v111 = hash2_3(uv111);\n    \n    vec2 v00 = mix(v000, v001, f.z);\n    vec2 v01 = mix(v010, v011, f.z);\n    vec2 v10 = mix(v100, v101, f.z);\n    vec2 v11 = mix(v110, v111, f.z);\n    \n    vec2 v0 = mix(v00, v01, f.y);\n    vec2 v1 = mix(v10, v11, f.y);\n    vec2 v = mix(v0, v1, f.x);\n    \n    return v;\n}\n\n//Simple interpolated noise\nfloat noise1_2(in vec2 uv)\n{\n    vec2 f = fract(uv);\n    //vec2 f = smoothstep(0.0, 1.0, fract(uv));\n    \n \tvec2 uv00 = floor(uv);\n    vec2 uv01 = uv00 + vec2(0,1);\n    vec2 uv10 = uv00 + vec2(1,0);\n    vec2 uv11 = uv00 + 1.0;\n    \n    float v00 = hash1_2(uv00);\n    float v01 = hash1_2(uv01);\n    float v10 = hash1_2(uv10);\n    float v11 = hash1_2(uv11);\n    \n    float v0 = mix(v00, v01, f.y);\n    float v1 = mix(v10, v11, f.y);\n    float v = mix(v0, v1, f.x);\n    \n    return v;\n}\n\n//Blur function\nvec4 blur(in sampler2D sampler, in vec2 fragCoord, in vec2 resolution)\n{\n    vec2 uv = fragCoord / resolution;\n    float blurStrength = distance(uv, vec2(0.5));\n    blurStrength = pow(blurStrength, BLUR_RANGE) * (resolution.x / 100.0) * BLUR_STRENGTH;\n    vec4 sum = vec4(0.0);\n    vec2 pixelSize = vec2(1.0) / resolution;\n\tfor (float x = -1.0; x <= 1.0; x += 1.0)\n    {\n     \tfor (float y = -1.0; y <= 1.0; y += 1.0)\n        {\n            sum += texture(sampler, uv + vec2(x, y) * pixelSize * blurStrength);\n        }\n    }\n\n    return sum / 9.0;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n/*\n\tMain particle system.\n\tQuite hard to make it realtime efficient. \t\n*/\n\n//Comment to make all particles have the same size\n#define RANDOMIZED_SIZE\n\n//More iterations = bigger distortion. You can increase the number of iteratons if you have better PC.\n#define PARTICLE_ITERATIONS 6.0\n\n//Particle settings\n#define PARTICLE_RADIUS 0.15\n#define PARTICLE_RADIUS2 0.3\n#define PARTICLE_SIZE_VARIATION 0.2\n#define PARTICLE_COLOR vec3(0.3, 0.9, 0.9) * 1.0\n#define BRIGHTNESS 0.45\n\n//Calculates particle movement\nvec2 cellPointFromRootUV(vec2 rootUV, vec2 originalUV, out float len)\n{\n    vec2 displacement = (noise2_3(vec3(rootUV * 0.07 + iTime * 0.3, 0.5 * (iTime + 0.1) * 1.0 + noise1_2(originalUV * 0.04))) - 0.5);\n \tlen = dot(displacement, displacement);\n    return displacement * 3.0 * (PARTICLE_ITERATIONS) + 0.5 + rootUV;   \n}\n\n//Calculates particle size\nfloat particleFromUVAndPoint(in vec2 uv, in vec2 point, in vec2 rootUV, in float pixelSize)\n{\n\tfloat dist = distance(uv, point);\n#ifdef RANDOMIZED_SIZE\n    dist += (hash1_2(rootUV * 10.0) - 0.5) * PARTICLE_SIZE_VARIATION;\n#endif\n    float particle = 1.0 - smoothstep(PARTICLE_RADIUS - dist * 0.05, PARTICLE_RADIUS2 - dist * 0.05 + pixelSize, dist);\n    return particle * particle;\n}\n\n//Particle system\nvec3 surfaceParticles(in vec2 uv, in float pixelSize)\n{\n    vec3 particles = vec3(0.0);\n \tvec2 rootUV = floor(uv);\n    \n   \tvec2 tempRootUV;\n    vec2 pointUV;\n    float dist;\n    vec3 color;\n    for (float x = -PARTICLE_ITERATIONS; x <= PARTICLE_ITERATIONS; x += 1.0)\n    {\n        for (float y = -PARTICLE_ITERATIONS; y <= PARTICLE_ITERATIONS; y += 1.0)\n        {\n            tempRootUV = rootUV + vec2(x, y);\n            pointUV = cellPointFromRootUV(tempRootUV, uv, dist);\n          \tcolor = mix(vec3(0), PARTICLE_COLOR, pow(smoothstep(0.3, 0.0, dist), 4.0));\n            particles += particleFromUVAndPoint(uv, pointUV, tempRootUV, pixelSize) * color;\n        }\n    }\n    \n    return particles;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x;\n    \n    float vignette = 1.0 - smoothstep(0.5, 1.3, length(uv* vec2(1.0, iResolution.x / iResolution.y)));\n    \n    //for antialiasing\n    float pixelSize = 1.5 / iResolution.x;\t\n    \n    uv *= 70.0;\n    pixelSize *= 70.0;\n    \n    vec3 particles = surfaceParticles(uv, pixelSize) * BRIGHTNESS;\n    \n    //postprocess\n    particles = smoothstep(-0.2, 0.8, particles * vignette);\n    \n    fragColor = vec4(particles, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//Bluring the A Buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = blur(iChannel0, fragCoord, iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//Bluring the B Buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = blur(iChannel0, fragCoord, iResolution.xy);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//Bluring the C Buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = blur(iChannel0, fragCoord, iResolution.xy);\n}","name":"Buffer D","description":"","type":"buffer"}]}