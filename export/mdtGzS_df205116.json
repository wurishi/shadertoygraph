{"ver":"0.1","info":{"id":"mdtGzS","date":"1678627071","viewed":67,"name":"Glowing 3d ball rotating ","username":"zondor","description":"Learning about camera and 3d scenes.\n\nTutorial that helped me a lot to make this:\nhttps://www.youtube.com/watch?v=dKA5ZVALOhs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","camera","pink","glow","purple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Distance ray ro rd:\n// rop: rayorigin to point  \n// || rop x rd || / || rd ||\nfloat DistLine(vec3 ro, vec3 rd, vec3 p)\n{\n    return length(cross(p - ro, rd)) / length(rd);\n}\n\n//float DrawPoint(vec3 ro, vec3 rd, vec3\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Camera (ray)origin, Z is camera distance to canvas\n    vec3 ro = vec3(0., 0., -2);\n    // Ray camera to canvas direction\n    vec3 rd = vec3(uv.x, uv.y, 0.) - ro;\n\n    vec3 p = vec3(\n        0. + sin(iTime * 2.) * .6, \n        -.3 + cos(iTime * 2.) * .35, \n        -6. + cos(iTime * 2.) * 3.\n    );\n    float d = DistLine(ro, rd, p);\n    float dl = d;\n    d = smoothstep(.1, .09, d);\n    d *= .8 + cos(iTime) * .2;\n    d += dl * -2.5 + cos(iTime) * .2;\n    d +=  1. + sin(iTime) * 0.2;\n    \n    float bar1 = smoothstep(uv.x, 0.01, 1.) - smoothstep(uv.x, -.01, 1.);\n    d += bar1;    \n    float bar2 = smoothstep(uv.x, -.7, 1.) - smoothstep(uv.x, -.72, 1.);\n    d += bar2;    \n    float bar3 = smoothstep(uv.x, .72, 1.) - smoothstep(uv.x, .7, 1.);\n    d += bar3;\n    \n    fragColor = vec4(d + .5 * cos(iTime * 1.) * .5, d * .1 , d, 1.);\n}","name":"Image","description":"","type":"image"}]}