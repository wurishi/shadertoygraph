{"ver":"0.1","info":{"id":"3s3GDn","date":"1568150258","viewed":11635,"name":"GLOW TUTORIAL","username":"alro","description":"A simple glow effect and how to control it.\n\nSee [url]https://www.desmos.com/calculator/eecd6kmwy9[/url] for an illustration as mentioned in the code\n\nSee also P_Malin's comment below and [url]https://www.desmos.com/calculator/f14x5a9lsb[/url]","likes":93,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","bloom","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// How to achieve and control a simple distance glow effect based on several Shadertoy examples\n// For 3D see https://www.shadertoy.com/view/7stGWj\n// Things to try:\n//  * Make the radius and intensity pulse in time or to input\n//\t* Time varying colour\n//  * Animate several points and add the glow values for each to create metaballs\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    //***********    Basic setup    **********\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t// Position of fragment relative to centre of screen\n    vec2 pos = 0.5 - uv;\n    // Adjust y by aspect for uniform transforms\n    pos.y /= iResolution.x/iResolution.y;\n    \n    //**********         Glow        **********\n    \n    // Equation 1/x gives a hyperbola which is a nice shape to use for drawing glow as \n    // it is intense near 0 followed by a rapid fall off and an eventual slow fade\n    float dist = 1.0/length(pos);\n    \n    //**********        Radius       **********\n    \n    // Dampen the glow to control the radius\n    dist *= 0.1;\n    \n    //**********       Intensity     **********\n    \n    // Raising the result to a power allows us to change the glow fade behaviour\n    // See https://www.desmos.com/calculator/eecd6kmwy9 for an illustration\n    // (Move the slider of m to see different fade rates)\n    dist = pow(dist, 0.8);\n    \n    // Knowing the distance from a fragment to the source of the glow, the above can be \n    // written compactly as: \n    //\tfloat getGlow(float dist, float radius, float intensity){\n    //\t\treturn pow(radius/dist, intensity);\n\t//\t}\n    // The returned value can then be multiplied with a colour to get the final result\n       \n    // Add colour\n    vec3 col = dist * vec3(1.0, 0.5, 0.25);\n\t\n    // Tonemapping. See comment by P_Malin\n    col = 1.0 - exp( -col );\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    Copyright (c) 2019 al-ro\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/","name":"Common","description":"","type":"common"}]}