{"ver":"0.1","info":{"id":"433Sz2","date":"1719256032","viewed":71,"name":"Multibrot Fractal V2","username":"spenceryonce","description":"Round 2 using my multibrot function to this time draw the mandelbrot set, but utilizing iq's math for smooth iteration gradients.  (Z -> Z^d +c). \n\nComments and improvements are welcome!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal","complex","rotation","multibrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Multibrot Fractal V1\" by spenceryonce. https://shadertoy.com/view/MX3XW8\n// 2024-06-24 18:27:42\n\n#define MAX_ITER 512.0\n#define B MAX_ITER/2.0\n\n// Z -> Z^d + C\nvoid multibrot(vec2 c, vec2 z, out vec3 color, float d) {\n    float iter = 0.0;\n    for(; iter < MAX_ITER; iter++) {\n        float r = length(z);\n        float theta = atan(z.y, z.x);\n        z = pow(r, d) * vec2(cos(d * theta), sin(d * theta)) + c;\n        if (dot(z,z) > (B*B)) {\n            break;\n        }\n    }\n    if(iter > MAX_ITER-1.0) {color = vec3(0.0);}\n    float s = iter - log(log(length(z))/log(B))/log(2.0);\n    color = 0.5 + 0.5*cos( 3.0 + s*0.16 + vec3(0.000,1.000,0.882));\n    \n}\n\nvoid mainImage(out vec4 O, vec2 fc) {\n    vec2 uv = (2.0*fc.xy-iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    vec2 z = vec2(0.0001,0.0001);\n    vec2 zoomP = vec2(0.392003,-0.267125);\n    float zoom = 0.62 + 0.38*cos(.07*iTime);\n    float d = 2.0;\n    zoom = pow(zoom, 8.0);\n    multibrot(zoomP+uv*zoom, z, col, d);\n    col = pow(col,vec3(0.4545));\n    O = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}