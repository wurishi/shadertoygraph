{"ver":"0.1","info":{"id":"sdXfR7","date":"1644602575","viewed":163,"name":"02 - Wavy wavy","username":"hayny","description":"second shader ever, I tried making something similar to a sound wave.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//noise functions for animation\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n//sins function (curve)\nfloat weirdSin(float x, float amplitude, float halfWidth) {\n\t//WAVE FUNCTION\n\t//MODIFY BASE SIN (f1) AND NOISE SIN (WAVNOISE) FOR SUM FUNKY SHIT\n\t//modify halfWidth to shift along x axis FOR SUM FUNKY SHIT\n\t\n\t//time looping\n\tfloat timeVar;\n\tif(fract(iTime)<0.5)\n\t{\n\t\ttimeVar = iTime;\n\t}\n\telse\n\t{\n\t\ttimeVar = 1.0-iTime;\n\t}\n\t//base sin\n\tfloat f1 = sin(x*220.0);\n\t//''noise'' sin (and its speed mulitplier)\n\t//change wavNoise value for width\n\tfloat spdMult = 2.0;\n\tfloat wavNoise = 200.0+(spdMult*fract(timeVar));\n\t\n    float f2 = sin(x*wavNoise);\n    \n    //parabole amplitude\n    float amp = amplitude;\n\t//where halfWidth lives\n    float g1 = pow((x-halfWidth),2.0);\n    float g2 = (-(g1)*(amp*4.0))+amp;\n    \n    float h = (((f1*f2)/2.0)*g2)+0.5;\n\treturn h;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //funkyanimationshit\n    float baseAmp = .12;\n    float funkyFactor = .15;\n    float funkyTime = (snoise(vec2(iTime, uv.x))*funkyFactor)-baseAmp;\n    \n    //wave1\n    vec3 rgbWav;\n    if (uv.y > weirdSin(uv.x, funkyTime,0.55))\n    {\n    \tif (uv.y < 0.5)\n    \t{\n    \t\trgbWav = vec3(1.0);\n    \t}\n    \telse\n    \t{\n    \t\trgbWav = vec3(0.0);\n    \t}\n     }\n     else \n    {\n    \tif (uv.y < 0.5)\n    \t{\n    \t\trgbWav = vec3(0.0);\n    \t}\n    \telse\n    \t{\n    \t\trgbWav = vec3(1.0);\n    \t}\n    }\n    \n    //wave2\n    vec3 rgbWav2;\n    if (uv.y > weirdSin(uv.x, funkyTime, 0.45))\n    {\n    \tif (uv.y < 0.5)\n    \t{\n    \t\trgbWav2 = vec3(1.0);\n    \t}\n    \telse\n    \t{\n    \t\trgbWav2 = vec3(0.0);\n    \t}\n     }\n     else \n    {\n    \tif (uv.y < 0.5)\n    \t{\n    \t\trgbWav2 = vec3(0.0);\n    \t}\n    \telse\n    \t{\n    \t\trgbWav2 = vec3(1.0);\n    \t}\n    }\n    \n    //wave3\n    vec3 rgbWav3;\n    if (uv.y > weirdSin(uv.x, funkyTime, 0.5))\n    {\n    \tif (uv.y < 0.5)\n    \t{\n    \t\trgbWav3 = vec3(1.0);\n    \t}\n    \telse\n    \t{\n    \t\trgbWav3 = vec3(0.0);\n    \t}\n     }\n     else \n    {\n    \tif (uv.y < 0.5)\n    \t{\n    \t\trgbWav3 = vec3(0.0);\n    \t}\n    \telse\n    \t{\n    \t\trgbWav3 = vec3(1.0);\n    \t}\n    }\n    \n    \n    //cutting into lines\n\tvec3 lines = vec3(sin(uv.x*iResolution.x*1.2));\n\tvec3 wavLines = rgbWav * lines;\n    vec3 wavLines2 = rgbWav2 * lines;\n\tvec3 wavLines3 = rgbWav2 * lines;\n    \n    \n    // Output to screen\n    fragColor = vec4(wavLines.x-0.3, wavLines2.x-0.5, wavLines3.x, 0.0);\n}","name":"Image","description":"","type":"image"}]}