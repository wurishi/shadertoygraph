{"ver":"0.1","info":{"id":"mdjyDD","date":"1687739566","viewed":30,"name":"Raycasting_in_ShaderToy","username":"mzxd","description":"rotating light around box and sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Definitionen\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\n\n// User Definitionen\nconst float SIZE_OBJECT_3D = 1.;\nconst float LIGHT_RADIUS = 5.;\nconst float LIGHT_HEIGHT = 0.; //0. für Bodennähe\nconst int CAM_DISTANCE = 8;\n\n// Signed Distance Funktion für eine Kugel\nfloat sdSphere(vec3 p, float r, vec3 offset) \n{\n  return length(p - offset) - r;\n}\n\n// Signed Distance Funktion für eine Box\nfloat sdBox(vec3 p, vec3 b, vec3 offset)\n{\n    vec3 d = abs(p - offset) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Signed Distance Funktion für den Boden\nfloat sdFloor(vec3 p) \n{\n  return p.y + 1.;\n}\n\n// Szene, die die minimale Entfernung zu den Objekten berechnet\nfloat scene(vec3 p) \n{\n  float co = min(min(sdSphere(p, SIZE_OBJECT_3D, vec3(-2, 0, 0)), sdBox(p, vec3(SIZE_OBJECT_3D, SIZE_OBJECT_3D, SIZE_OBJECT_3D), vec3(2., 0, 0))), sdFloor(p));\n  return co;\n}\n\n// Ray-Marching-Funktion, die die Entfernung zum nächsten Objekt in der Szene berechnet\nfloat rayMarch(vec3 ro, vec3 rd) \n{\n  float depth = MIN_DIST;\n  float d; // zurückgelegte Strecke\n\n  // Wiederholt die Szene, um die Entfernung zum nächsten Objekt zu berechnen\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) \n  {\n    vec3 p = ro + depth * rd;\n    d = scene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  d = depth;\n  \n  return d;\n}\n\n// Funktion zur Berechnung der Normalen eines Punktes\nvec3 calcNormal(in vec3 p) \n{\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy) +\n      e.yyx * scene(p + e.yyx) +\n      e.yxy * scene(p + e.yxy) +\n      e.xxx * scene(p + e.xxx));\n}\n\n// Hauptbildfunktion, die die Farbe jedes Pixels berechnet\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; //UV-Mapping\n  vec3 background_col = vec3(0);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, CAM_DISTANCE); // Ursprung des Strahls, repräsentiert Kameraposition\n  vec3 rd = normalize(vec3(uv, -1)); // Strahlrichtung\n\n  float sd = rayMarch(ro, rd); // Signed Distance zum nächsten Objekt\n\n  // Überprüft, ob der Strahl ein Objekt getroffen hat\n  if (sd > MAX_DIST) \n  {\n    col = background_col; // Strahl hat nichts getroffen\n  } \n  else \n  {\n    vec3 p = ro + rd * sd; // Punkt, gefunden durch Raymarching\n    vec3 normal = calcNormal(p); // Oberflächennormale\n\n    float lightRadius = LIGHT_RADIUS; // Radius des Lichtkreises\n    vec3 lightPosition = lightRadius * vec3(cos(iTime), LIGHT_HEIGHT, sin(iTime)); // Berechnung der Lichtposition\n    vec3 lightDirection = normalize(lightPosition - p); // Richtung des Lichts vom Punkt aus gesehen\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.); // diffuse Reflexion, begrenzt zwischen Null und Eins\n    \n    // Überprüft, ob der Punkt im Schatten liegt\n    vec3 newRayOrigin = p + normal * PRECISION * 2.;\n    float shadowRayLength = rayMarch(newRayOrigin, lightDirection);\n    if (shadowRayLength < length(lightPosition - newRayOrigin)) dif *= 0.; // Setzt die diffuse Reflexion auf 0, wenn der Punkt im Schatten liegt\n\n    col = vec3(dif); // Setzt die Farbe des Pixels auf die berechnete diffuse Reflexion\n  }\n\n  fragColor = vec4(col, 1.0); // Gibt die berechnete Farbe zurück\n}\n","name":"Image","description":"","type":"image"}]}