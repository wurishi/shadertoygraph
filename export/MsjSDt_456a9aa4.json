{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// ÑÐ´ÐµÐ»Ð°Ð½Ð¾ Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ðµ https://www.shadertoy.com/view/4sfGzj\n//------------------------------------------\n#define time iTime\nconst int MAX_ITER = 50;\nconst float PI=3.14159265;\nint colorIndex = 0 ;\nvec3 getNormal(in vec3 p);\n//------------------------------------------\n//-------------------------------------------------Phong lighting model\nvec3 getlightingPhong(in vec3 pos, in vec3 camPos, in vec3 normal, in vec3 lightDir, in vec3 color)\n{\n    float  specPower = 12.0;\n    vec3   specColor = vec3(0.9621, 0.9832, 1.0);\n    \n    vec3   l = normalize (lightDir-pos);   \n    vec3   v = normalize(camPos-pos);\n\n    vec3   n = normalize (normal);        \n    vec3   r = reflect ( -l, n ); \n    vec3 diff = color * max ( dot ( n, l ), 0.0 );\n    vec3 spec = specColor.rgb * pow ( max ( dot ( l, r ), 0.0 ), specPower );\n    \n    return diff + spec;\n}\n//------------------------------------------\n//primitives\n//----------------------------------------------------\nfloat distsphere(vec3 p, float r)\n{\n   return length(p) - r;\n}\n//----------------------------------------------------\nfloat disttorus(vec3 p, vec2 t)\n{\n   vec2 q = vec2(length(p.xz) - t.x, p.y);\n   return length(q) - t.y;\n}\n//------------------------------------------\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n//------------------------------------------\n//---------------------------------------------\nvec3 rotationCoord(vec3 n, float paramRotate)\n{\n vec3 result;\n\n   float t = time;\n   vec2 sc = vec2(sin(t), cos(t));\n   mat3 rotate;\n   if(paramRotate <= 0.1)\n   {\n\n      rotate = mat3(  1.0,  0.0,  0.0,\n                      0.0,  1.0,  0.0,\n                      0.0,  0.0,  1.0);   \n   }\n   else if(paramRotate <= 1.0)\n   {\n      rotate = mat3(  1.0,  0.0,  0.0,\n                      0.0, sc.y,-sc.x,\n                      0.0, sc.x, sc.y);\n   }\n   else if(paramRotate <= 2.0)\n   {\n       rotate = mat3(  1.0,  0.0,  0.0,\n                       0.0, sc.y,sc.x,\n                       0.0, -sc.x, sc.y);  \n   }\n   else if (paramRotate <= 3.0)\n   {\n      rotate = mat3( sc.y,  0.0, -sc.x,\n                     0.0,   1.0,  0.0,\n                     sc.x,  0.0, sc.y);   \n   }\n   else if (paramRotate <= 4.0)\n   {\n      rotate = mat3( sc.y,  0.0, sc.x,\n                     0.0,   1.0,  0.0,\n                    -sc.x,  0.0, sc.y);   \n   }   \n   else if (paramRotate <= 5.0)\n   {\n       rotate = mat3( sc.y,sc.x,  0.0,\n                     -sc.x, sc.y, 0.0,\n                      0.0,  0.0,  1.0);  \n   }   \n   else if (paramRotate <= 6.0)\n   {\n       rotate = mat3( sc.y,-sc.x, 0.0,\n                      sc.x, sc.y, 0.0,\n                      0.0,  0.0,  1.0);  \n   }     \n   else\n   {\n   mat3 rotate_x = mat3(  1.0,  0.0,  0.0,\n                          0.0, sc.y,-sc.x,\n                          0.0, sc.x, sc.y);\n   mat3 rotate_y = mat3( sc.y,  0.0, -sc.x,\n                         0.0,   1.0,  0.0,\n                         sc.x,  0.0,  sc.y);\n   mat3 rotate_z = mat3( sc.y, sc.x,  0.0,\n                        -sc.x, sc.y,  0.0,\n                         0.0,  0.0,   1.0);\n   rotate = rotate_z * rotate_y * rotate_z;                \n   }\n  result = n * rotate;\n  return result;\n}\n\n//-------------------------------------------------- \nvec3 getmaterial( in vec3 p,  in float mat)\n{\n vec3 pos = p; \n  p = rotationCoord(p, 3.);\n  vec3 normal = getNormal(p);   \n  vec3 colorObject = vec3(1.0, 0.24,0.28);\n  vec3 colorObjectDetails = vec3(0.95, 0.24,1.0);\n \n    vec3 tex = texture( iChannel0, vec2(atan(normal.x,normal.z)/3.1416,acos(normal.y)/3.1416)).xyz;//vec2(atan(p.x,p.z)/6.2831,acos(p.y)/3.1416)\n   \n   if (mat == 0.)\n      return vec3(0.4662, 0.4565, 0.4488);\n   else if (mat == 1.)\n      return vec3(0, 0, 0);   \n   else if (mat == 2.)\n      return vec3(floor(length(floor(mod(pos, 2.0)+0.5))-0.5));\n   else if (mat == 3.)\n   {\n\n     float r = pow(colorObject.r, cos(iTime * 0.3)); \n     float g = pow(colorObject.g, cos(iTime * 0.5));\n     float b = pow(colorObject.b, cos(iTime * 0.7));  \n     colorObject = vec3(r, g, b); \n      \n      return colorObject ; \n   }\n   else if (mat == 4.)\n      return colorObjectDetails;   \n   else if (mat == 5.)\n      return tex;   \n       \n   return vec3(0.3, 0.9,0.5);\n}\n//------------------------------------------\n//------------------------------------------\nvec2 rot(vec2 p,float r){\n  vec2 ret;\n  ret.x=p.x*cos(r)-p.y*sin(r);\n  ret.y=p.x*sin(r)+p.y*cos(r);\n  return ret;\n}\n//------------------------------------------\nvec2 rotsim(vec2 p,float s){\n  vec2 ret=p;\n  ret=rot(p,-PI/(s*2.0));\n  ret=rot(p,floor(atan(ret.x,ret.y)/PI*s)*(PI/s));\n  return ret;\n}\n//----------------------------------------------------\nvec2 ballsAndTorus(in vec3 p)\n{\n   float result;\n   float material = 5.;\n   float ball = 1. , tor = 1.;\n   vec3 pos = p;\n\n   pos = rotationCoord(pos, 0.); \n   float plan = udRoundBox(pos+vec3(0.0,-4.0,2.2), vec3(15.0,0.01,15.0),0.0);\n   pos.y += 1.0;\n   pos = rotationCoord(pos, 3.);   \n   ball = distsphere(pos , 2.);\n\n   pos.xz=rotsim(pos.xz,8.0);\n   pos.yz=rotsim(pos.yz,8.0); \n \n   pos.z-= 3.76; \n   ball = min(ball, distsphere(pos , 0.31681));\n  \n   pos = rotationCoord(pos, 7.);    \n   tor = min(ball,disttorus(pos, vec2(0.6, 0.16)));\n\n   if (ball > tor) {material = 3.0; colorIndex = 3;} \n   if (ball > plan) {material = 2.0; colorIndex = 6;}     \n   result = tor;\n   result = min(ball, tor);\n   result = min(result, plan);\n return vec2(result, material);  \n\n}\n//-------------------------------------------------\n// Ð²Ñ‹Ð²Ð¾Ð´ Ð¾Ð±ÑŠÐµÐºÑ‚Ð°\nvec2 renderFunction(in vec3 pos)\n{\n  vec2 result;\n  vec3 pos1 = pos;\n//  pos1 = rotationCoord(pos1, 3.); \n\n  result = ballsAndTorus(pos1); \n\n  return result;\n}\n\n//--------------------------------------------------\nvec3 getNormal(in vec3 p)\n{\n  const float e = 0.0001;\n  return\n    normalize\n    (\n      vec3\n      (\n        renderFunction(p+vec3(e,0.0,0.0)).x - renderFunction(p+vec3(-e,0.0,0.0)).x,\n        renderFunction(p+vec3(0.0,e,0.0)).x - renderFunction(p+vec3(0.0,-e,0.0)).x,\n        renderFunction(p+vec3(0.0,0.0,e)).x - renderFunction(p+vec3(0.0,0.0,-e)).x\n      )\n    );\n}\n\n//-------------------------------------------------\nvec3 render(in vec3 posOnRay, in vec3 camPos, in vec3 rayDir, out vec2 object)\n{ \n  vec3 color;\n  float t = 0.0;\n  for(int i=0; i<MAX_ITER; ++i)\n  {\n    object = renderFunction(posOnRay); // ÐžÐ±ÑŠÐµÐºÑ‚ Ð¸ ÐµÐ³Ð¾ Ñ†Ð²ÐµÑ‚\n    t += object.x;\n    posOnRay = camPos + t*rayDir;    \n  \n  }\n  if(abs(object.x) < 0.01)\n  { \n    vec3 normal = getNormal(posOnRay);                         \n    vec3 materialColor = getmaterial(posOnRay.xyz, object.y); \n\n    vec3 lightDir = camPos;\n    color = getlightingPhong(posOnRay, camPos,  normal, lightDir, materialColor); // ÐŸÐ¾ Ð¤Ð¾Ð½Ð³Ñƒ\n  }\n    return color;\n}\n//-------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pos =   ( 2.0 * fragCoord.xy - iResolution.xy ) / iResolution.y;\n  pos.y = 1.0 - pos.y - 1.0;\n  \n  vec3 camPos =  vec3(0.0, 0.0, 9.0);\n  vec3 camDir = vec3(0.0, 0.0, -1.0);\n  vec3 camUp = vec3(0.0, 1.0, 0.0);  \n  vec3 camSide = cross(camDir, camUp);\n\n  vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir);\n \n  float t = 0.0, s = 0.1;\n  vec2 object = vec2(1., 1.);\n//------------------------------\n\n  vec3 posOnRay = camPos;\n//------------------------------ \n  vec3 color= render(posOnRay, camPos, rayDir, object);\n  if(abs(object.x) < 0.01)\n  {\n     fragColor = vec4(color, 1.0);\n  }\n  else\n  {\n   fragColor = vec4(0.0);\n  }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsjSDt","date":"1417411320","viewed":314,"name":"Balls and torus","username":"Lio","description":"Balls and torus :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tagsprocedural"],"hasliked":0,"parentid":"","parentname":""}}