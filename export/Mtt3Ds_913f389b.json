{"ver":"0.1","info":{"id":"Mtt3Ds","date":"1472640894","viewed":108,"name":"1st Raymarch Shader","username":"teessider","description":"My 1st attempt at Raymarching some spheres.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarch","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Originally ased on tutorial by dila:\n// https://www.youtube.com/watch?v=yxNnRSefK94\n\nconst int MAX_STEPS = 32;\nconst float STEP_SIZE = 0.75;\n\n// Distance Functions are based on the primitives from iq\n// https://iquilezles.org/articles/distfunctions\n\n// Signed Sphere Distance Function\nfloat sphere(vec3 pos, float radius)\n{\n    //return length(pos) - radius;\n    return sqrt(dot(pos, pos)) - radius;\n}\n\n// Evaluate distance function(s) in here.\n// Setting up for a full scene later.\nfloat scene(vec3 pos)\n{\n    float s1 = sphere(pos + vec3(0.0, 0.0, -2.0), sin(iTime));\n    float s2 = sphere(pos + vec3(sin(1.0 - iTime), sin(iTime), -1.5), 0.5);\n    \n    float s1s2 = min(s1, s2);\n    float s3 = sphere(pos + vec3(-sin(1.0 - iTime), -sin(iTime), -1.5), 0.5);\n    return min(s1s2, s3);\n}\n\n/*\n* Raymarching loop\n* origin \t= Ray origin (rayOrigin)\n* ray \t\t= Normalized Ray (rayDirection)\n*/\nfloat raymarch(vec3 origin, vec3 ray)\n{\n    // t = intersection plane/clipping plane/total distance\n    float t = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        float dist = scene(origin + ray * t);\n        t += dist * STEP_SIZE;\n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Remap UVs from (0 to 1) to (-1 to 1)\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    \n    // Aspect Ratio correction\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rayOrigin = vec3(0.0, 0.0, 0.0);\n    vec3 rayDirection = normalize(vec3(uv, 1.0));\n    // The rayDirection.z value controls the Field Of View (FOV). 1.0 = 90 degrees FOV.\n    \n    float r = raymarch(rayOrigin, rayDirection);\n    // From geoff - Simple Diffuse lighting (with light pointing from right)\n    vec3 point = rayOrigin + rayDirection * r;\n    vec3 normal = normalize(point - vec3(100.0, 0.0, 0.0));\n    vec3 light = normalize(rayOrigin - point);\n    float NdotL = max(dot(normal, light), 0.0);\n    \n    vec3 color = vec3(1.0, 1.0, 0.0) * NdotL;\n    vec3 bgColor = mix(vec3(0.5, 0.0, 0.125), vec3(0.125, 0.375, 0.125), (fragCoord.xy / iResolution.xy).y);\n\n    vec3 finalColor = mix(bgColor, color, 1.0 / r);\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}