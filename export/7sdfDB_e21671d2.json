{"ver":"0.1","info":{"id":"7sdfDB","date":"1657155417","viewed":34,"name":"Astroid Tiles","username":"Sent","description":"Like a bug to the light","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sinRand (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 vec2ar(float ar, float x, float y) {return vec2(ar*x, y);}\n\nvec2 rot2(vec2 st, float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    mat2 M = mat2(c, -s, s, c);\n    return M*st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float PI = 3.14159265;\n    vec2 st = fragCoord.xy/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n\n    st.x *= aspect;\n   \n    float rot = 1./sqrt(2.);\n    st.x -= .18/7./rot;\n    st *= mat2(rot, -rot, rot, rot);\n\n    st *= 7.*rot; // Scale the coordinate system by 10\n    vec2 ipos = floor(st);  // get the integer coords\n    vec2 fpos = fract(st);  // get the fractional coords\n    ;\n\n    // rand for cell\n    vec3 color = vec3(1.);\n\n    // deterministic in each cell    \n    // Asteroid\n    fpos.x += +.4;\n    vec2 toCenter = vec2ar(aspect, .5, .5)-fpos;\n    float theta = PI*cos(.112348*iTime);\n    toCenter = rot2(toCenter, theta);\n    vec2 ast2 = pow(abs(toCenter), vec2(2.));\n    float a = .4+.7*abs(cos(.71823*iTime));\n    float a2 = pow(a, 2.);\n    float f = pow(ast2.x + ast2.y - a2, 3.) + 27.*a2*ast2.x*ast2.y;\n    \n    a = .35+.7*abs(cos(.71823*iTime));\n    color *= smoothstep(.3-f, f-.3, .3);\n    f += pow(ast2.x + ast2.y - a2, 3.) + 27.*a2*ast2.x*ast2.y;\n    color += smoothstep(0., 1., f);\n    color /= 1.9;\n    \n    // color\n    color *= vec3(188, 255, 248)/255.;\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}