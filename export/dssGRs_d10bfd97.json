{"ver":"0.1","info":{"id":"dssGRs","date":"1666687482","viewed":197,"name":"Cloudy Night / CAFePARTY 2022","username":"jin_x","description":"Semifinal of Shader Showdown on CAFePARTY 2022 (22.10.2022)\n[with little modifications]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","landscape","shadershowdown","cafe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define FASTDRAW  // uncomment this line if playback is not smoothly ;)\n\n#define EPS .0001\n\n#ifdef FASTDRAW\n  #define draw_coef .5\n#else\n  #define draw_coef 1.\n#endif\n\nfloat time, glow = 1.;\nint idx;\n\nmat2 rot(float a)\n{\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sdf(vec3 p)\n{\n    float s[3];\n    s[0] = p.y + texture(iChannel0, p.xz*.05*draw_coef).x * 2.;\n    s[1] = 10. - p.y + texture(iChannel0, p.xz*.005).x * 2.;\n    s[2] = length(p - vec3(25.,5.,time+50.));\n    idx = 0;\n    for (int i = 1; i < 3; ++i)\n      if (s[i] < s[idx]) idx = i;\n    if (idx == 2) glow += .5/(.1+s[2]*s[2]);\n    return s[idx];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv *= vec2(iResolution.x / iResolution.y, 1);\n\n    time = iTime;\n\n    // Ray marching\n    vec3 rp = vec3(sin(time/3.3)*3., sin(time)/2.+.5, time), rd = normalize(vec3(uv, 1));\n    rd.xz *= rot(sin(time*.33)/3.);\n    rd.xy *= rot(sin(time*.2)/4.);\n    float td = 0., i = 0.;\n    while (++i < 1000.*draw_coef) {\n        float d = sdf(rp)*.1/draw_coef;\n        if (d < EPS) break;\n        td += d;\n        if (td > 100.) { idx = 2; break; }\n        rp += d*rd;\n    }\n\n    // Pixel color\n    float br = clamp(pow(50.*draw_coef/i, 1.5), 0., 1.);\n    float l = 5.;\n    if (texture(iChannel1, vec2(time*.7, 0)).x < .1) l = 50.;\n    float sky = texture(iChannel1, rp.xz*.005).x*l * .8;\n    vec3 c[] = vec3[](vec3(1,.4,0)*sqrt(l)*.5, vec3(.3,.6,1)*sky, vec3(glow*.5));\n    vec3 col = br * glow * c[idx];\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}