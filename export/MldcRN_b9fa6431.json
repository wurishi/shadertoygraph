{"ver":"0.1","info":{"id":"MldcRN","date":"1531883531","viewed":219,"name":"Tissue Fractal","username":"stb","description":"Wait for it...\n\nUpdate: everything important has been parameterized.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fractal","reactive","reactive","psychedelic","chaos","feedback","trip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 FO, in vec2 FC )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = FC / res;\n    \n    FO = vec4(texture(iChannel0, uv).rgb, 1.);\n    FO.rgb += pow(texture(iChannel0, uv).a, 4.);\n    //FO = vec4(texture(iChannel0, uv).aaa, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Time\t\tiTime + 347.\n#define Zoom\t\t.65\n#define ImageMix\t.77\t\t// 0.0 - 1.0 (affects reactivity)\n#define Tension\t\t.1\t\t// 0.0 - 1.0\n#define ReactAmount\t.7\n#define Volatility\t.02\n#define ReactScale\t30.\t\t// scale of reaction\n\nfloat s, c;\n#define rotate(p, a) mat2(c=cos(a), s=-sin(a), -s, c) * p\n\n#define tx(o) texture(iChannel0, uv-o/res)\n#define tx_(o) texture(iChannel0, (uv-o)/ReactScale)\n\nvoid mainImage( out vec4 FO, in vec2 FC )\n{\n    vec2 res = iResolution.xy;\n    vec2 p = (FC-res/2.) / res.y;\n    vec2 uv = FC / res;\n    \n    vec3 o = vec3(-1., 0., 1.);\n    \n    vec3 col = vec3(0.);\n    \n    float T =  + Time;\n    \n    // various coord ops\n    p /= Zoom;\n    \n    // for offsetting coord p by texture channel (reaction)\n    float po = (tx_(-ReactScale/2.).a-.5);\n    \n    // orbit\n    p += 1.5 * vec2(sin(.003*T), cos(.003*T));\n    \n    // scale\n    //p *= 2.5;\n    \n    // rotate\n    p = rotate(p, -.006912*T);\n    \n    // mirror repeat\n    p = abs(mod(p, 2.)-1.);\n    \n    // reaction\n    p -= ReactAmount * po;\n    \n    // building the color\n    \n    col += texture(iChannel0, p).rgb-.5;\n    \n    col.r += 2.*min(abs(p.x), abs(p.x+p.y)/2.);\n    col.g += 2.*min(abs(p.y), abs(p.y-p.x)*2.);\n    col.b += 1.5 * length(p-.5);\n    \n    vec4 col_ = tx(0.), blur;\n    \n    // mix new col into old (also softens)\n    col = mix(col, col_.rgb, ImageMix);\n\t\n    blur = .25*col_ + .125*(tx(o.xy)+tx(o.zy)+tx(o.yx)+tx(o.yz)) + .0625*(tx(o.xx)+tx(o.zx)+tx(o.xz)+tx(o.zz));\n    \n    col = clamp(col, vec3(0.), vec3(1.));\n    \n    // soften primary RGB\n    col = mix(col, blur.rgb, .1);\n    \n    //  tracers (another level of feedback)\n    col.rgb -= .075 + .05 * (blur.a-col.r);\n    \n    // mix blur into blur channel\n    blur.a = mix(blur.a, (blur.r+blur.g+blur.b)/3., Tension);\n    \n    // volatilize!\n    blur.a -= Volatility * (blur.a-tx(0.).r);\n    \n    blur.a = clamp( blur.a , 0., 1.);\n    \n    FO =\n        vec4(\n            col,\n            blur.a\n        );\n    \n    \n    \n    if(iMouse.z>0.)\n        FO.r += .5*max(0., 1.-smoothstep(0., 1., min(1., 8.*length(FC/res.y-iMouse.xy/res.y))));\n    \n}","name":"Buf A","description":"","type":"buffer"}]}