{"ver":"0.1","info":{"id":"4fyyWG","date":"1732287776","viewed":91,"name":"itterative mandelbrot","username":"robobo1221","description":"A temporal implementation of the mandelbrot set","likes":1,"published":3,"flags":48,"usePreview":0,"tags":["mandelbrot","buffer","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colorPalette(float x) {\n    if (x != x) {\n        return vec3(0.0);\n    }\n\n    const vec3 offset = vec3(0.0, 1.0, 2.0);\n    \n    return cos(x + offset) * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 c = texture(iChannel0, uv);\n    vec2 z = c.xy;\n    float n = c.a;\n\n    // Time varying pixel color\n    float logZ = log(length(z));\n    \n    vec3 col = colorPalette(n + 1.0 - log2(logZ));\n    \n    if (logZ <= 1.0) {\n        col = vec3(0.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 mandelBrot(vec2 c, vec2 z, inout float n) {\n    float h = 0.0;\n    \n    if (length(z) > 16.0) {\n        return z;\n    }\n    \n    z = cx_mul(z, z) + c;\n    n += 1.0;\n    \n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float hash = texelFetch(iChannel2, (ivec2(fragCoord) + (iFrame * 128) % 1024) % 1024, 0).x;\n    \n    float timer = texelFetch(iChannel0, ivec2(fragCoord), 0).a;\n    vec3 center = texture(iChannel0, uv).rgb;\n    \n    vec2 z = center.xy;\n\n    vec2 c = fragCoord / iResolution.y * 2.0 - vec2(2.5, 1.0);\n    c *= 1.25;\n    \n    vec2 zoom = vec2(0.743643887037151, 0.131825904205330);\n    //c += zoom;\n    //c *= 0.2;\n    //c -= zoom;\n    \n    z = mandelBrot(c, z, timer);\n    \n    if (length(uv - iMouse.xy / iResolution.xy) < 0.1 && iMouse.z > 0.0) {\n        z = vec2(0.0);\n        timer = 0.0;\n    }\n    \n    //color = mix(center.rgb, color, 1.0 / timer);\n    \n    \n    fragColor = vec4(z, 0.0, timer);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 mean = vec3(0.0);\n    float totalWeight = 0.0;\n    \n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            ivec2 offset = ivec2(i, j);\n            \n            vec3 sampled = texelFetch(iChannel0, ivec2(fragCoord) + offset, 0).rgb;\n            totalWeight += 1.0;\n            mean += sampled;\n        }\n    }\n    \n    mean /= totalWeight;\n    \n    fragColor = vec4(mean,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)","name":"Common","description":"","type":"common"}]}