{"ver":"0.1","info":{"id":"WdscDM","date":"1585047885","viewed":64,"name":"roatiting square","username":"fille","description":"just a squares rotating","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Integral(x,p,notp) ((floor(x)*(p))+ max(fract(x)-(notp),0.0));\n\nvec2 rotate(vec2 coords,float radius,vec2 pivot){\n    \n    float cosine = cos(radius);\n    float sine = sin(radius);\n    vec2 outuv;\n    coords.x -= pivot.x;\n    coords.y -= pivot.y;\n    outuv.x = coords.x * cosine - coords.y * sine;\n\toutuv.y = coords.x * sine + coords.y * cosine;\n    coords.x += pivot.x;\n    coords.y += pivot.y;\n\treturn outuv;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 10.0;\n    float time = mod(iTime,speed);\n\tfloat freq = 2.0;\n    float radius =time;//1.77;// time;\n   \n    vec2 uv = (fragCoord) / iResolution.y;\n    uv = fract(uv*freq);\n    vec3 color = vec3(0);\n    vec2 halfuv = uv*0.5;\n    //uv = uv +time;\n  //  uv.x -=.25;\n   //uv.y -=.25;\n    vec2 normaluv = uv;\n   \tuv = rotate(uv,radius,vec2(0.50,0.5));\n    vec2 square = rotate(vec2(0.35,0.65),radius,vec2(0.5,0.5));\n    \n    \n    \n    uv+=0.175;\n    if(uv.x > 0.0 && uv.x < 0.35 && uv.y > 0.0 && uv.y < 0.35)\n        color = vec3(1.0,0.0,0.0);\n    \n    \n         \n \n    fragColor =vec4(color.xyz,1.0);\n}","name":"Image","description":"","type":"image"}]}