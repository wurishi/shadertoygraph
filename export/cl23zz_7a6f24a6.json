{"ver":"0.1","info":{"id":"cl23zz","date":"1672774915","viewed":98,"name":"Morphing the Trifold Ship","username":"Mandelbrot837","description":"Forked from https://www.shadertoy.com/view/7dKcDV\n\nYou can change the number of folds at line 89; here are some examples:\n1-fold: Perpendicular Burning Ship\n2-fold: Burning Ship\n4-fold: Buffalo","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","burningship"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Palette\n\nstruct palette {\n    vec3 c0, c1, c2, c3, c4;\n};\n\npalette palette_green() {\n    palette p;\n    p.c0 = vec3(0,0,0)/255.;\n    p.c1 = vec3(32,140,0)/255.;\n    p.c2 = vec3(116,255,14)/255.;\n    p.c3 = vec3(255,255,128)/255.;\n    p.c4 = vec3(0,0,0)/255.;\n    return p;\n}\n\n// Random\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat randSeed = 0.;\nvec2 nextRand2() {\n    vec2 v = vec2( randSeed++, randSeed++ );\n\treturn vec2( random( v+0.34 ), random( v+0.75 ) );    \n}\n\n// Mapping\n\nvec3 cmap( float t, palette p ) {\n    vec3 col = vec3(0);\n    col = mix( p.c0,  p.c1, smoothstep(0. , .2, t));\n    col = mix( col, p.c2, smoothstep(.2, .4 , t));\n    col = mix( col, p.c3, smoothstep(.4 , .6, t));\n    col = mix( col, p.c4, smoothstep(.6,  .8, t));\n    col = mix( col, p.c0, smoothstep(.8, 1.,  t));\n    col = sqrt(sqrt(col));\n    return col;\n}\n\n#define MAX_ITER 384.\n#define THRESHOLD 1024.\n\n#define MORPH_SPEED 0.25\n#define FOLDS 3.\n\nfloat bship(vec2 uv, float time) {\n    float angle = time * MORPH_SPEED;\n    vec2 zmul = vec2(cos(angle),sin(angle));\n    \n    // z = ( |Re(z)| + i|Im(z)| )^2\n    \n\tvec2 c = 4.1*(uv - vec2(.2,0)) - vec2(-0.9,0.75);\n    \n    if(FOLDS == 1. || FOLDS > 7.)\n    {\n        c -= vec2(0.0,-0.5);\n        c = vec2(c.x * 1.5,c.y * 1.5);\n    }\n    \n    vec2 z = vec2(0); \n    float i = 0.;\n    float c0 = 0.;\n    float theta;\n    float r = dot(z,z);\n    bool ShowInside = false;\n    \n    for(; ++i <= MAX_ITER ;) {\n        if (r > THRESHOLD) {\n            break;\n        }\n        //Convert to polar form to minimize the usage of cos(), sin(),...\n        //Multiply and divide by the number of folds to get Burning Ship folds.\n        theta = atan(z.y, z.x) * FOLDS; \n        //Calculate arg = atan(tan(arg)) to get arg in range (-pi, pi].\n        //Trick: atan(tan(x)) = mod(x-pi/2,pi)-pi/2 when x not equal to pi/2+pi*n\n        //Taking the abs of the argument is the same as taking the abs of imaginary component.\n        theta = abs(mod(theta - 3.14159265, 6.2831853) - 3.14159265) / FOLDS;\n        theta += theta;\n        z = r * vec2(cos(theta), sin(theta)) + c;\n        r = dot(z, z);\n        \n        z = vec2((z.x * zmul.x) - (z.y * zmul.y),\n                 (z.x * zmul.y) + (z.y * zmul.x));\n        c0 += 0.015625 / dot(z,z);\n\t}\n  \n    float l2 = log(2.);\n    \n    if(ShowInside == true)\n    {\n        return c0 - log(dot(z,z))/l2;\t\n    }\n    \n    return i - log(log(dot(z,z))/l2)/l2;\t\t    \n}\n\n// Main\n\n#define SAMPLES 9.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 R = iResolution.xy;\n        \n    palette pal = palette_green();\n    \n    vec3 col = vec3(0);\n\n    for(float i=0.; i < SAMPLES; i++) {\n        vec2 p = 0.3125*(2.*fragCoord-R+nextRand2())/R.y ;\n        p.y = -p.y;\n        float orbit = bship(p, iTime) / MAX_ITER;\n    \tcol += cmap( orbit   , pal ); \n    }\n    \n    col /= SAMPLES;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}