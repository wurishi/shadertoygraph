{"ver":"0.1","info":{"id":"tdBfRK","date":"1590358652","viewed":74,"name":"Hypnotic Flower v 2.","username":"julianlumia","description":":)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Hypnotic Flower\" by None. https://shadertoy.com/view/-1\n// 2020-05-24 22:14:52\n\n// Fork of \"Hypnotic Flower\" by julianlumia. https://shadertoy.com/view/tsjfzG\n// 2020-05-24 22:10:44\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n      vec4 val =A(fragCoord);    \n       vec3 c = vec3(10., 210., 14.);\n    vec3 col = .6 + .6*cos( 6.28318*atan(val.x,val.y)/2.28318+c );\n\n\tfragColor = vec4(col, 0.);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \n vec2 uv = fragCoord.xy/iResolution.xy;\n\n fragColor = A(fragCoord);\n\n vec2 M = vec2(-.0,1.);\n\n vec2 lap = (A(fragCoord + M.yx).xy\n             + A(fragCoord + M.xy).xy\n             + A(fragCoord - M.yx).xy\n             + A(fragCoord - M.xy).xy \n             - 5.3 *fragColor.xy);\n\n    \n  fragColor.xy += 5.+.5*.8 * vec2(.5,.5) * lap;\n\n vec2 m =vec2(320.+sin(iTime)*50.,180.+cos(iTime)*50.);\n\n fragColor.xy += 0.15 * exp(-dot(fragCoord - m,fragCoord - m)/100.) * (m);;\n\n\n fragColor.xyz -= texture(iChannel2, uv).xyz*1.;        \n    \n fragColor = vec4(clamp(fragColor.xy, vec2(-5,-5), vec2(5,5)),0,1.);\n\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define A(U) texture(iChannel0,(U)/iResolution.xy)\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n vec2 uv = fragCoord.xy/iResolution.xy;\n vec3 col = vec3(0.);\n vec2  uv2 = uv;\n vec2 pos;\n pos.x = 0.5;\n pos.y = 0.5;\n float scale =1.0;\n float theta = .5;\n mat2 rot = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n uv = (((uv-pos)/scale)*rot)+pos;\n vec3 col2;\n col = texture(iChannel0, uv).xyz*1.;           \n fragColor = vec4(col, 1.0);\n \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\n#define slideUp 3.\n#define slideDown 2.5\n#define amount 1.\n\n\nvec2 slup, sldn, up, down;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = fragCoord.xy/iResolution.xy;\n      \n vec2 buffer = texture(iChannel0, uv).xy;\n vec2 inputTex = texture(iChannel1, uv).xy;\n\n float dwn = max(1.0, abs(slideDown));\n sldn = vec2(1.0 / dwn);\n down = buffer + ((inputTex - buffer) * sldn);\n  \n float upp = max(1.0, abs(slideUp));\n slup = vec2(1.0 / upp);\n up = buffer + ((inputTex - buffer) * slup);\n\n    \n fragColor = vec4(mix(down, up, amount),0,1);   \n}","name":"Buffer C","description":"","type":"buffer"}]}