{"ver":"0.1","info":{"id":"7sVSWy","date":"1635254534","viewed":242,"name":"Asteroid w. Atmosphere","username":"Ludicrous","description":"A semi realistic atmospheric scattering shader, now with an asteroid.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["physics","rayleigh","atmospheric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float len(vec2 v)\n{\n    return sqrt(v.x * v.x + v.y * v.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float density = exp(-uv.y * 3.0) * (1.0 - uv.y) * 0.2;\n    vec3 transmittance = vec3(1,1,1);\n    vec3 col = vec3(0,0,0);\n    \n    float dotProduct = -cos(iTime * 0.1 - uv.x * 2.0) * (1.0 - uv.y) * 0.35 + 0.35;\n    vec3 scatter = vec3(0.25, 0.45, .75) * (1.0 - dotProduct) + vec3(0.3, 0.3, 0.3) * dotProduct; // Net in-scatter.\n    \n    float asterDist = 130.0 - iTime * 3.0;\n    vec2 asterScreenPos = vec2(iResolution.x * 0.65, iResolution.y * 0.3) - vec2(0.25 * iResolution.x, 0.25 * iResolution.y) / asterDist;\n    float dst = (len(fragCoord - asterScreenPos) - iResolution.x / asterDist * .5) / iResolution.x * asterDist * 2.0;\n\n    for (int i = 0; i < 60; i++)\n    {\n        if (dst < 0.0 && i > int(asterDist * 1.9))\n        {\n            i = 150;\n            continue;\n        }\n        col += scatter * density * transmittance; \n        transmittance -= transmittance * density * vec3(0.3, 0.55, 1); // Through-scatter: Light scattered into the camera but re-scattered out.\n    }\n    \n    if (dst < 0.0)\n        col += vec3(0.9, 0.94, 0.97) * sqrt(.2-dst) * transmittance; // Asteroid\n        \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}