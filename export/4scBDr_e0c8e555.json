{"ver":"0.1","info":{"id":"4scBDr","date":"1524646483","viewed":192,"name":"Finally some 3d (self pass)","username":"Sunpy","description":"Attempt on making some sort of 3d feel.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","loop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat map(vec3 p){\n    vec3 q = fract(p) * 2. - 1.;\n    \n    return length(q) - 1.25;\n}\n\nfloat trace(vec3 o, vec3 r){\n    float t = 0.;\n    for (int i = 0; i < 32; ++i){\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * .5;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 r = normalize(vec3(uv, 1.));\n    float rot = iTime * .5;\n    r.xz *= mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    r.xy *= mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    \n    vec3 o = vec3(.5 + cos(iTime * PI * .5), .5 + sin(iTime * PI * .5), -iTime);\n    float t = trace(o, r);\n    float fog = 1. / (1. + t * t * 2.);\n    \n    col += fog;\n    \n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}