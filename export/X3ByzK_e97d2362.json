{"ver":"0.1","info":{"id":"X3ByzK","date":"1727424429","viewed":30,"name":"Geometry常见几何体","username":"tjx_lc","description":"常用的几何体","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotateAroundPoint(vec2 uv, float angle, vec2 center) {\n    // 将 uv 转换到以 center 为原点的局部坐标系\n    vec2 offset = uv - center;\n\n    // 构建旋转矩阵\n    float s = sin(angle);\n    float c = cos(angle);\n    mat2 rotation = mat2(c, -s, s, c);\n\n    // 应用旋转矩阵\n    offset = rotation * offset;\n\n    // 转回原本的坐标系\n    return offset + center;\n}\n\n// 绘制圆形函数：输入片段坐标 `st`，圆心位置 `center`，圆半径 `radius`\nfloat circle(vec2 st, vec2 center, float radius) {\n    // 计算当前像素与圆心的距离\n    float dist = distance(st, center);\n\n    // 如果距离小于半径，则返回1.0（表示在圆内部），否则返回0.0\n    return step(dist, radius); // 使用smoothstep 可以提升抗锯齿效果 这里不用对比 ring\n}\n\n// 绘制圆环函数：输入片段坐标 `st`，圆心位置 `center`，外圆半径 `radius`，环的宽度 `len`\nfloat ring(vec2 st, vec2 center, float radius, float len) {\n    // 计算当前像素到圆心的距离\n    float dist = distance(st, center);\n\n    // 判断该像素是否在环的范围内，使用smoothstep进行平滑过渡\n    float outerEdge = radius + len;    // 外环半径\n    float innerEdge = radius - len;    // 内环半径\n    return smoothstep(innerEdge, innerEdge + 0.01, dist) - smoothstep(outerEdge, outerEdge + 0.01, dist);\n}\n\n// 绘制正方形函数：输入片段坐标 `st`，正方形中心位置 `center`，边长半径 `halfSize`\nfloat square(vec2 st, vec2 center,float halfSize){\n    float x = st.x - center.x;\n    float y = st.y - center.y;\n    float dist = max(abs(x), abs(y)) - halfSize;\n    //类似圆 距离判断收缩在 边长之内\n    return step(dist, halfSize); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (iResolution.xy - fragCoord.xy*2.0) / min(iResolution.x, iResolution.y);\n    vec2 m  = (iResolution.xy - iMouse.xy * 2.0) / min(iResolution.x, iResolution.y);\n    // 圆\n    float circleShape = circle(uv, vec2(0.0), 0.1);\n    float ringRadius = clamp(0.3,0.7,fract(iTime*0.5));\n    // 圆环\n    float ringShape = ring(uv, vec2(0.0), ringRadius, 0.05);\n    \n    vec3 bgColor = vec3(1.0);\n    vec3 circleColor = vec3(0.2, 0.4, 1.0);  // 蓝色\n    vec3 ringColor = vec3(1.0, 0.4, 0.2);  // 橙色\n    \n    vec3 color =mix(bgColor, circleColor, circleShape);\n    color = mix(color, ringColor, ringShape);\n    \n    \n    // 正方形\n    float squareShape = square(rotateAroundPoint(uv,iTime,vec2(1.0,0.0)), vec2(1.0,0.0), 0.05);\n    vec3 squareColor = vec3(1.0, 0.0, 0.0);\n    color = mix(color, squareColor, squareShape);\n    \n    // 正方形绕点旋转\n    float squareRotateShape = square(rotateAroundPoint(uv,iTime,vec2(0.0,0.0)), vec2(-1.0,0.0), 0.05);\n    vec3 squareRotateColor = vec3(0.0, 1.0, 0.0);\n    color = mix(color, squareRotateColor, squareRotateShape);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}