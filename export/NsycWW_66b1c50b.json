{"ver":"0.1","info":{"id":"NsycWW","date":"1654819335","viewed":60,"name":"random num gen xorshf96 test","username":"hillac","description":"attempt at a xorshf96 random number generator. it really needs a uint32 buffer. Just seeding with time and another hash function would be probably better than a buffer, and you could get multiple rands per frame.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["random","number","generator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //vec3 col = vec3(texture(iChannel1,uv).x/4294967296.*35., 0, 0);\n    vec3 col = vec3(texture(iChannel0,uv).x/4294967296., 0, 0);\n    \n    /*\n    vec2 vPixelCoord1 = vec2(100., 100.0);\n\tfloat fIsDigit1 = PrintValue( (fragCoord - vPixelCoord1) / 10., col.x, 20., 1.);\n\tcol = mix( col, vec3(0.0, 1.0, 1.0), fIsDigit1);\n    */\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// xorshf98\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    \n    uint t;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 draw = texture(iChannel0,uv);\n    \n    \n    uint x = uint(draw.x);\n    uint y = uint(draw.y);\n    uint z = uint(draw.z);\n    \n    // initialise. Need to find a good choice that doesnt create correlations\n    if (iFrame < 1) {\n     // corelation is evident in the diagonal stripe pattern.\n     //x = uint(123456789+int(fragCoord.x)^int(fragCoord.y));\n     //y = uint(362436069-int(fragCoord.y));\n     //z = uint(521288629+int(fragCoord.x*fragCoord.y));\n     \n     // better\n     x = uint(123456789+int(fragCoord.x)^(int(fragCoord.y)<<5));\n     y = uint(362436069-int(fragCoord.y));\n     z = uint(521288629+int(fragCoord.x*fragCoord.y));\n     \n     // idk how to choose this properly\n     x = uint(1000.*fragCoord.x + fragCoord.y);\n    }\n    \n    x ^= x << 16;\n    x ^= x >> 5;\n    x ^= x << 1;\n\n   t = x;\n   x = y;\n   y = z;\n   z = t ^ x ^ y;\n   \n   \n   \n   fragColor = vec4(float(x),float(y),float(z),float(t));\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// another rand test using fastrand\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 draw = texture(iChannel1,uv);\n\n\n    int x = int(draw.x);\n    int y = int(draw.y);\n    int z = int(draw.z);\n\n    // initialise. Need to find a good choice that doesnt create correlations\n    if (iFrame < 1) {\n     // corelation is evident in the diagonal stripe pattern.\n     //x = uint(123456789+int(fragCoord.x)^int(fragCoord.y));\n     //y = uint(362436069-int(fragCoord.y));\n     //z = uint(521288629+int(fragCoord.x*fragCoord.y));\n\n     // too correlated here\n     x = int(123456789+int(fragCoord.x)^(int(fragCoord.y)<<5));\n     y = int(362436069-int(fragCoord.y));\n     z = int(521288629+int(fragCoord.x*fragCoord.y));\n     \n     //x = int(rand(fragCoord)*float(1<<20));\n     // blows my mind this is better\n     x = int(1000.*fragCoord.x + fragCoord.y);\n    }\n    \n    x = (214013*x+2531011); \n    int t = (x>>16)&0x7FFF;\n    \n\n\n\n   \n   fragColor = vec4(float(x),float(y),float(z),float(t));\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat DigitBin( const int x )\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue( vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = ( fValue < 0.0 );\n\tfValue = abs(fValue);\n    \n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n","name":"Common","description":"","type":"common"}]}