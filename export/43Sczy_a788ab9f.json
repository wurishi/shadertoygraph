{"ver":"0.1","info":{"id":"43Sczy","date":"1727362480","viewed":31,"name":"1st_shader","username":"denzel","description":"1st shader made by me for an academic course in HSE","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dataart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// задаем базовую функцию шейдера и ее 2 главных параметра \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // нормализуем координаты фрагмента (x, y) к диапазону от -1 до 1\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    \n    // устаналиваем пропорцию экрана\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // задаем время для анимации\n    float time = iTime;\n    \n    // вычисляем радиус от центра экрана\n    float radius = length(uv);\n    \n    // добавляем к радиусу синусоидальное искажение, зависящее от времени\n    radius += 0.1 * sin(10.0 * radius - time * 2.0);\n    // синус добавляет эффект \"пульсации\" формы\n    \n    // пороговое значение для создания круга \n    float edge = 0.3 + 0.1 * sin(time); // меняем размер через sin\n    \n    // плавный переход от границы фигуры к фону\n    float shape = smoothstep(edge, edge + 0.01, radius);\n    \n    // вычисляем цвет, изменяющийся со временем через sin\n    vec3 color = 0.5 + 0.5 * cos(6.28318 * vec3(0.5, 0.3, 0.2) + time);\n    \n    // меняем цвет внутри и снаружи формы\n    color = mix(color, vec3(0.0), shape);\n    \n    // устанавливаем итоговый цвет фрагмента\n    fragColor = vec4(color, 4.0);\n}","name":"Image","description":"","type":"image"}]}