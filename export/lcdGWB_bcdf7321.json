{"ver":"0.1","info":{"id":"lcdGWB","date":"1714148176","viewed":1238,"name":"Interstellar video - Wormhole","username":"aroussel","description":"Interstellar ScienceClic video - Wormhole","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["wormhole","interstellar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\n////////////////////////////////////////////////////////////////\n// This shader is based on the article from the\n// visual effects team of the movie Interstellar\n// that can be found here: https://arxiv.org/abs/1502.03809\n////////////////////////////////////////////////////////////////\n\n// wormhole settings\nfloat a = 2.;         // wormhole throat length\nfloat M = .1;         // wormhole smoothness\nfloat dt = .1;        // integration step\nint maxSteps = 1000;  // maximum steps\n\n// camera settings\nfloat camL = 5.;      // camera distance\nfloat zoom = 1.5;     // camera zoom\n\n// wormhole function r(l)\nfloat LtoR(float l){\n    float x = max(0.,2.*(abs(l)-a)/PI/M);\n    return 1.+M*(x*atan(x)-.5*log(1.+x*x));\n}\n\n// wormhole derivative\nfloat LtoDR(float l){\n    float x = max(0.,2.*(abs(l)-a)/(PI*M));\n    return 2.*atan(x)*sign(l)/PI;\n}\n\n// generate image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    camL = cos(iTime*.5)*5.;\n\n    // ray projection\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.x;\n    vec3 vel = normalize(vec3(-zoom,uv));\n    vec2 beta = normalize(vel.yz);\n    \n    // ray tracing\n    float l = camL;\n    float r = LtoR(camL);\n    float dl = vel.x;\n    float H = r*length(vel.yz);\n    float phi = 0.;\n    float dr;\n    \n    int steps = 0;\n    while(abs(l) < max(abs(camL)*2.,a+2.) && steps<maxSteps){\n        dr = LtoDR(l);\n        r = LtoR(l);\n        l += dl*dt;\n        phi += H/r/r*dt;\n        dl += H*H*dr/r/r/r*dt;\n        steps++;\n    }\n    \n    // sky direction\n    float dx = dl*dr*cos(phi)-H/r*sin(phi);\n\tfloat dy = dl*dr*sin(phi)+H/r*cos(phi);\n    vec3 vec = normalize(vec3(dx,dy*beta));\n    vec3 cubeVec = vec3(-vec.x,vec.z,-vec.y);\n\n    // set pixel color\n    if(l > 0.){\n        fragColor = texture(iChannel0,cubeVec);\n    }else{\n        fragColor = texture(iChannel1,cubeVec);\n    }\n}","name":"Image","description":"","type":"image"}]}