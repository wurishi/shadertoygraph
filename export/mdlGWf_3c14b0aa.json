{"ver":"0.1","info":{"id":"mdlGWf","date":"1666922178","viewed":116,"name":"rib vault","username":"jt","description":"A gothic [url=https://en.wikipedia.org/wiki/Rib_vault]rib vault[/url].","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["architecture","construction","vault","arch","building","gothic","rib"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mdlGWf rib vault by jt\n// based on https://www.shadertoy.com/view/ddl3DX gothic arch 2d by jt\n\n// tags: architecture, construction, arch, building, gothic, rib, vault\n\n// https://en.wikipedia.org/wiki/Rib_vault\n// https://en.wikipedia.org/wiki/Pointed_arch_(architecture)\n// Trying to recreate https://en.wikipedia.org/wiki/File:Ossature.voute.arc.ogive.png\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat line(vec2 p, float a, float b)\n{\n    p.x -= clamp(p.x, a, b);\n    return length(p);\n}\n\nfloat arch_shape(vec2 p, float r)\n{\n    vec2 a = r * vec2(0.0, sqrt(3.0)/2.0);\n    p.x = abs(p.x);\n    p.y = max(p.y, 0.0);\n    float d = length(p+vec2(r/2.0,0)) - r;\n    //return p.y-p.x*tan(pi/3.0) <= a.y ? d : distance(p,a);\n    return p.y >= 0.0 ? p.y-p.x*sqrt(3.0) <= a.y ? d : distance(p,a) : line(p, 0.1, 0.3);\n}\n\n// https://en.wikipedia.org/wiki/Pointed_arch_(architecture)\nfloat pointed_arch(vec2 p, float r, float h)\n{\n    p.x = abs(p.x);\n    float l = line(p+vec2(r/2.0,0), r-h/2.0, r+h/2.0);\n    if(p.y < 0.0) return l;\n    float o = arch_shape(p, r + h);\n    if(o >= 0.0) return o;\n    float i = arch_shape(p, r - h);\n    if(i <= 0.0) return -i;\n    return max(max(o, -i),-l);\n}\n\nfloat extruded_pointed_arch(vec3 p)\n{\n    float h = 0.025;\n    float d = pointed_arch(p.xz, 1.5, h*2.0);\n    vec2 w = vec2(d, abs(p.y) - h);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\nfloat box(vec2 p, vec2 b) // https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat hollow_cylinder(vec3 p, float R, float r, float h)\n{\n    return box(vec2(length(p.xy) - R, p.z), vec2(r, h)); // revolve moved box\n}\n\n// https://en.wikipedia.org/wiki/Rib_vault\n// Trying to recreate https://en.wikipedia.org/wiki/File:Ossature.voute.arc.ogive.png\n\nfloat rib_vault(vec3 p)\n{\n    float phi = radians(52.5);\n    mat3 R = mat3(cos(phi), sin(phi),0.0,-sin(phi),cos(phi),0.0,0.0,0.0,1.0);\n\n    p.xy = abs(p.xy);\n    return\n        min\n        (   \n            min\n            (\n                min\n                (\n                    extruded_pointed_arch(p),\n                    extruded_pointed_arch(p-vec3(0,1.05,0))\n                ),\n                extruded_pointed_arch((p.yxz-vec3(0.5,0.8,0))*1.5)/1.5\n            ),\n            hollow_cylinder((p*R).xzy, 1.32, 0.02, 0.02)\n        );\n}\n\nfloat map(vec3 p)\n{\n    return\n        min\n        (\n            rib_vault(p),\n            halfspace(p)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi/2.0 + pi/2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.025);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.5,-2.5);\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    vec3 color = vec3(0);\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n        //color = n*0.5+0.5;\n\n        vec3 lightdir = normalize(vec3(1,1,1));\n        vec3 ambient = vec3(0.01);\n        float brightness = max(dot(lightdir, n), 0.0);\n        \n        brightness *= shadow(dst,lightdir, 0.01, DIST_MAX);\n        //brightness *= softshadow(dst,lightdir, 0.01, lightdist, 50. );\n        color = vec3(1);\n        color = (ambient * calcAO(dst, n) + brightness) * color;\n        //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n        //color *= brightness;\n    }\n\n    //color = mix(vec3(color), vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    color = sqrt(color); // approximate gamma\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}