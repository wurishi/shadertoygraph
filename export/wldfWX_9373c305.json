{"ver":"0.1","info":{"id":"wldfWX","date":"1613614615","viewed":57,"name":"Chains and zoom in/out","username":"intergula","description":"messing around with sin/cos","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQ(x) ((x)*(x))\n\n// HSV HSL copied from iq's code\n// https://www.shadertoy.com/view/lsS3Wc\nconst float eps = 0.0000001;\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n\n\nfloat circle(vec2 p, vec2 c, float r)\n{\n    return SQ(p.x - c.x) + SQ(p.y - c.y) - SQ(r);\n}\n\nvec3 color(float sdf)\n{\n    vec3 s = rgb2hsv(vec3(1.0, 0.0, 0.0));\n    vec3 e = rgb2hsv(vec3(0.0, 1.0, 0.0));\n    float c = smoothstep(-1.6, 1.6, -sdf);\n    vec3 hsv = vec3(c*s.x+(1.0-c)*e.x, 1.0, c);\n    return hsv2rgb(hsv);\n \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (uv-0.5) / vec2(iResolution.y/iResolution.x, 1.0);\n    \n    p = vec2(sin(0.5*p.x*p.y)+cos(p.x*10.0*sin(0.1*iTime)), 0.1*cos(p.y));\n    p = vec2(sin(p.y*sin(p.x-1.0*iTime)), sin(0.1*iTime/(p.x)));\n               \n    // Time varying pixel color\n    float sdf = circle(p, vec2(0.1*sin(iTime), 0.4+.2*sin(iTime)), 0.7);\n    //float sdf = circle(p, vec2(0.0, 0.0), 0.7);\n    vec3 col = color(sdf);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}