{"ver":"0.1","info":{"id":"sdsBRB","date":"1645192477","viewed":106,"name":"Smoothable polygons with border","username":"KrankerApfel","description":"Made after \"Book Of Shader\" chapter about polar polygons.\n https://thebookofshaders.com/07/?lan=fr","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Author : Tom \"KrankerApfel\" .R\n   \n   Hello, I'm a beginner so don't hesitate to critisize my code or give me some advice !\n*/\n\n#define PI 3.1415926538\n#define TWO_PI  6.28318530718\n#define s  abs(cos(iTime*.5)*0.3)\n#define border_width 0.1\n#define vertex_nb 3.0\n#define ROTATION abs(cos(iTime*0.1)*360.)*(PI/180.)\n#define CENTER vec2(0.5,0.5)\n#define SIZE vec2(.5,.5)\n\n\n\n\n            \nvec2 smooth_shape(vec2 position,float angle, float radius, float slice, float width){\n\n    float d =  cos(floor(0.5 + angle / slice) * slice - angle) * length(position);\n    \n    return vec2(smoothstep(radius,radius+s,d),smoothstep(radius+width,radius+width+s,d));\n}\n\nvec4 blend_over(vec4 dst, vec4 src)\n{\n     return dst + (1.0-dst.a)*src.a*src;\n}\n\nvec4 blend_over2(vec4 dst, vec4 src)\n{\n     float final_alpha = src.a + dst.a * (1.0 - src.a);\n     return vec4(\n        (src.rgb * src.a + dst.rgb * dst.a * (1.0 - src.a)) / final_alpha,\n        final_alpha\n    );\n}\n\nvec4 shape(vec2 uv, float radius, float sides, float width)\n{\n    mat2 rot = mat2( cos(ROTATION),-sin(ROTATION),\n                 sin(ROTATION),cos(ROTATION)\n\t\t\t);\n            \n    uv =  ( ( uv - 0.5) + CENTER) / SIZE * rot + 0.5 ;\n    vec2 position = uv * 2.0 - 1.0;\n\tfloat angle = atan(position.x, position.y);\n\tfloat slice = TWO_PI / sides;\n\n    vec2 p = smooth_shape(position,angle, radius, slice,width);\n        \n    vec4 fill = vec4(1.0,0.0,0.0,0.5);\n    vec4 outline = vec4(0.5,0.0,1.0,1.0);\n    \n    return  (p.x-p.y)*(outline) + (1.0-p.x) * fill  ;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = 0.5-(fragCoord/iResolution.xy);\n    uv.x *= iResolution.x/iResolution.y;\n\tvec4 col1 = shape(uv,0.4,vertex_nb,border_width) ;\n    vec4 col2 = shape(uv+0.2,0.4,vertex_nb,border_width);\n    vec4 col3 = shape(uv-0.1,0.4,vertex_nb,border_width);\n\n    vec4 col = vec4(0.0);\n    col = blend_over(col, col1);\n    col = blend_over(col, col2);\n    col = blend_over(col, col3);\n    fragColor = col;\n}\n\n ","name":"Image","description":"","type":"image"}]}