{"ver":"0.1","info":{"id":"tllBzj","date":"1597266146","viewed":232,"name":"Bouncy_Spherez_in_Wavez","username":"TRASHTRASH","description":"TRASHTRASH aka Josh deLorimier\nmy first ray marching design \n\n\"as you have seen, winds have a mind of their own.\" - a dead sailor\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","waves","beginner","smin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TRASHTRASH\n//still WIP \n//so much to figure out lol\n//if anyone has ideas on why the specular is off on the mod copies I'd appreciate it cheers!\n\n//Learning RayMarching from CharStiles, BigWIngs, evvvvil, Patricio Gonzalez Vivo, iq \n\n//added camera rot\n//added fog from pjkarlik\n//thanks to you all this is mostly hacked from examples\n//I am getting the concepts though\n\n#define MAX_STEPS 128\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n\n#define MAX_HEIGHT 2.3\n#define SPH_RAD 1.25\n#define BLOB_SIZE 3.\n\n\n//simplex noise from Patricio Gonzalez Vivo\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0);} \n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n//i think this is from a book about shaders or something like that\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//iq im pretty sure\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//geo                      \nfloat map(vec3 p) {\n   \tfloat pl = 10.0;\n    float gr = p.y + sin((iTime*2.0) + p.x * pl)/pl*0.5 + snoise(vec2((iTime*5.)+p.x,100.)/pl) + cos((-iTime*4.0)+p.z*pl)/pl+1.;\n    float n1 = abs(snoise(vec2(iTime*0.8,666.0)));\n\tfloat znoise = snoise(vec2(iTime*0.25,558.0))*3.0;\n\tfloat d = 0.0;\n\tvec2 size = vec2(10.);\n    vec2 c = floor((p.xz + size * 0.5)/size);\n    p.xz  = mod(p.xz + size * 0.5, size)-size*0.5;\n    vec2 r1 = vec2(random(c));\n    n1 = abs(snoise(vec2(iTime * r1.x * 0.15, 556.)));\n    vec4 sphere = vec4(cos((iTime+r1.x*0.0012)), abs(sin(-iTime*4.+(r1.x+0.03)))*MAX_HEIGHT*n1, znoise, 1.0)*SPH_RAD/2.0;\n    float distSphere = length(p-r1.x - sphere.xyz)-(sphere.w);\n \tfloat s1 = smin(gr, distSphere, BLOB_SIZE);\n    return s1;\n}\n//marcher\nfloat RM(vec3 ro, vec3 rd) {\n \tfloat or = 0.;\n    for(int i=0;i<MAX_STEPS;++i){\n     \tvec3 p = ro + rd * or;\n        float sc = map(p);\n        or += sc;\n        if(or>MAX_DIST || abs(sc)<SURF_DIST) break;\n    }\n    return or;\n}\n//BigWIngs\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 norm(vec3 p) {\n \tfloat d = map(p);\n    vec2 e = vec2(.001, 0.);\n    vec3 n = d - vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx));\n    return normalize(n);\n}\n\nfloat shade(vec3 p, vec3 rd) {\n \tvec3 lp = vec3(-5.,6.,-2.);\n    vec3 l = normalize(lp-p);\n    vec3 n = norm(p);\n    float col = 0.;\n    float dif = clamp(dot(n,l)*.5+.5,0.,1.);\n   \tfloat fr = pow(1.0+dot(n, rd),4.0);\n    float sp = pow(max(dot(reflect(-l, n),-rd),0.0),80.);\n   \tfloat ao = (1.0 - fr);\n   \tfloat fd = 1.0 - dif;\n    col = sp + max(fr, 0.5) + dif * ao;\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n   \tvec3 col = vec3(0.0);\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(0.,1., 6.);\n     ro.yz *= Rot(-m.y*.2);\n    ro.xz *= Rot(iTime*.2-m.x*.2);\n    vec3 rd = R(uv, ro, vec3(0,0,0),1.);\n    float d = RM(ro, rd);\n    float n1 = snoise(((iTime/2.)+uv)*4.);\n    vec3 c1 = vec3(118./255.,220./255.,220./255.);\n    vec3 fog = mix(vec3(.001),c1+0.2,(uv.y+.9));\n    if(d<MAX_DIST) {\n       vec3 p = ro + rd * d;\n       float dif = shade(p, rd);\n       c1*=c1*c1;\n       vec3 c = vec3(c1.x + sin(p.y), c1.y, c1.y + cos(p.y));\n       col = vec3(dif)*c;\n       col *= col;\n    } else {\n    col += fog;\n   \n    }\n    col = mix(col, fog, 1.-exp(-0.000025*d*d*d));\n    col = pow(col, vec3(.4545));\n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}