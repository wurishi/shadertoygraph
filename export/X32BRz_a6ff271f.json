{"ver":"0.1","info":{"id":"X32BRz","date":"1729127013","viewed":217,"name":"AI 3D SDF Shapes","username":"darrinm","description":"Ported from https://darrin.hatch.one/3d-sdf-shapes (remixable).\nWritten by Claude Sonnet 3.5 with prompting by me.\nTry the other shapes: cross: 0, sphere: 1, torus: 2, octahedron: 3, capsule: 4, mandelbulb: 5\nClick to drag.","likes":9,"published":3,"flags":0,"usePreview":1,"tags":["3d","raymarch","sdf","glass","hatch","ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// title: glassy shapes\n\n/* description:\nBy Darrin Massena (https://darrin.hatch.one/3d-sdf-shapes)\nLicense: MIT\n*/\n\n/* Uniforms for Hatch\nuniform int shapeType; // default: 0, title: \"shape\", type: Option, options: { cross: 0, sphere: 1, torus: 2, octahedron: 3, capsule: 4, mandelbulb: 5 }\nuniform int materialType; // default: 2, title: \"material\", type: Option, options: { metallic: 0, plastic: 1, glass: 2 }\nuniform float shapeSize; // default: 1.0, min: 0.1, max: 2.0, step: 0.001, title: \"shape size\"\nuniform vec4 shapeColor; // default: #3320ff, type: Color, title: \"shape color\"\nuniform bool followMouse; // default: true, title: \"follow mouse\"\nuniform float armLength; // default: 0.5, min: 0.1, max: 1.0, step: 0.01, title: \"arm length\"\nuniform float armWidth; // default: 0.1, min: 0.01, max: 0.5, step: 0.01, title: \"arm width\"\nuniform float rotationSpeedX; // default: 0.5, min: -5.0, max: 5.0, step: 0.1, title: \"x rotation speed\"\nuniform float rotationSpeedY; // default: 1.0, min: -5.0, max: 5.0, step: 0.1, title: \"y rotation speed\"\nuniform float rotationSpeedZ; // default: 0.0, min: -5.0, max: 5.0, step: 0.1, title: \"z rotation speed\"\nuniform float bevelSize; // default: 0.02, min: 0.0, max: 0.1, step: 0.001, title: \"bevel size\"\nuniform int iImageFit; // title: \"fit\", default: 1, type: Option, options: { fill: 0, cover: 1, contain: 2, \"scale down\": 3, none: 4 }\n*/\n\nint shapeType = 0; // cross: 0, sphere: 1, torus: 2, octahedron: 3, capsule: 4, mandelbulb: 5\nint materialType = 2; // metallic: 0, plastic: 1, glass: 2\nfloat shapeSize = 1.4;\nvec4 shapeColor = vec4(.2, .12, 1., 1.);\nbool followMouse = true;\nfloat armLength = 0.5;\nfloat armWidth = 0.15;\nfloat rotationSpeedX = 0.5;\nfloat rotationSpeedY = 1.0;\nfloat rotationSpeedZ = 0.0;\nfloat bevelSize = 0.06;\n\n// Rotation matrices for X, Y, and Z axes\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Function to create a beveled box\nfloat sdBeveledBox(vec3 p, vec3 b, float bevel) {\n    vec3 q = abs(p) - b + bevel;\n    return min(max(q.x, max(q.y, q.z)), 0.0) + length(max(q, 0.0)) - bevel;\n}\n\n// SDF for cross\nfloat sdCross(vec3 p) {\n    float bx = sdBeveledBox(p.xyz, vec3(armLength, armWidth, armWidth), bevelSize);\n    float by = sdBeveledBox(p.yzx, vec3(armWidth, armLength, armWidth), bevelSize);\n    float bz = sdBeveledBox(p.zxy, vec3(armWidth, armWidth, armLength), bevelSize);\n    return min(bx, min(by, bz));\n}\n\n// SDF for sphere\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// SDF for torus\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\n// SDF for octahedron\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\n// SDF for capsule\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\n// SDF for Mandelbulb fractal\nfloat sdMandelbulb(vec3 p) {\n    vec3 w = p;\n    float m = dot(w, w);\n    vec4 trap = vec4(abs(w), m);\n    float dz = 1.0;\n    for(int i = 0; i < 4; i++) {\n        float m2 = m * m;\n        float m4 = m2 * m2;\n        dz = 8.0 * sqrt(m4 * m2 * m) * dz + 1.0;\n        float x = w.x; float x2 = x * x; float x4 = x2 * x2;\n        float y = w.y; float y2 = y * y; float y4 = y2 * y2;\n        float z = w.z; float z2 = z * z; float z4 = z2 * z2;\n        float k3 = x2 + z2;\n        float k2 = inversesqrt(k3 * k3 * k3 * k3 * k3 * k3 * k3);\n        float k1 = x4 + y4 + z4 - 6.0 * y2 * z2 - 6.0 * x2 * y2 + 2.0 * z2 * x2;\n        float k4 = x2 - y2 + z2;\n        w.x = p.x + 64.0 * x * y * z * (x2 - z2) * k4 * (x4 - 6.0 * x2 * z2 + z4) * k1 * k2;\n        w.y = p.y + -16.0 * y2 * k3 * k4 * k4 + k1 * k1;\n        w.z = p.z + -8.0 * y * k4 * (x4 * x4 - 28.0 * x4 * x2 * z2 + 70.0 * x4 * z4 - 28.0 * x2 * z2 * z4 + z4 * z4) * k1 * k2;\n        trap = min(trap, vec4(abs(w), m));\n        m = dot(w, w);\n        if(m > 256.0) break;\n    }\n    return 0.25 * log(m) * sqrt(m) / dz;\n}\n\n// Combined SDF for all shapes\nfloat sdShape(vec3 p) {\n    p /= shapeSize;\n    float d = 1e10;\n    if (shapeType == 0) d = sdCross(p);\n    else if (shapeType == 1) d = sdSphere(p, 0.5);\n    else if (shapeType == 2) d = sdTorus(p, vec2(0.4, 0.1));\n    else if (shapeType == 3) d = sdOctahedron(p, 0.5);\n    else if (shapeType == 4) d = sdCapsule(p, vec3(0.0, -0.3, 0.0), vec3(0.0, 0.3, 0.0), 0.1);\n    else if (shapeType == 5) d = sdMandelbulb(p);\n    return d * shapeSize;\n}\n\n// Ray marching function\nfloat rayMarch(vec3 ro, vec3 rd, mat3 rotation) {\n    float tot = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + tot * rd;\n        float d = sdShape(rotation * p);\n        tot += d;\n        if (d < 0.001 || tot > 20.0) break;\n    }\n    return tot;\n}\n\n// Function to calculate Fresnel effect\nfloat fresnel(vec3 normal, vec3 viewDir, float power) {\n    return pow(1.0 - abs(dot(normal, viewDir)), power);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Calculate target position based on mouse\n    vec2 targetPos = vec2(0.0);\n    if (followMouse) {\n        targetPos = (iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n        targetPos.x *= iResolution.x / iResolution.y;\n    }\n    \n    // Lazy lerping of position\n    vec2 currentPos = vec2(0.0);\n    if (followMouse && iMouse.x != 0. && iMouse.y != 0.) {\n      currentPos += (targetPos - currentPos) * 1.;\n    }\n    \n    // Setup the camera\n    vec3 ro = vec3(currentPos, 2.0); // Ray origin (camera position)\n    vec3 rd = normalize(vec3(p - currentPos, -1.0)); // Ray direction    \n    \n    // Apply rotation\n    mat3 rotX = rotateX(iTime * rotationSpeedX);\n    mat3 rotY = rotateY(iTime * rotationSpeedY);\n    mat3 rotZ = rotateZ(iTime * rotationSpeedZ);\n    mat3 rotation = rotZ * rotY * rotX; // Combine rotations\n    \n    // Perform ray marching\n    float d = rayMarch(ro, rd, rotation);\n    \n    // Sample background image\n    vec3 bgColor = texture(iChannel0, uv).rgb;\n    \n    // Coloring\n    vec3 col = bgColor;\n    if (d < 20.0) {\n        vec3 p = ro + d * rd;\n        vec3 normal = normalize(vec3(\n            sdShape(rotation * (p + vec3(0.001, 0.0, 0.0))) - sdShape(rotation * (p - vec3(0.001, 0.0, 0.0))),\n            sdShape(rotation * (p + vec3(0.0, 0.001, 0.0))) - sdShape(rotation * (p - vec3(0.0, 0.001, 0.0))),\n            sdShape(rotation * (p + vec3(0.0, 0.0, 0.001))) - sdShape(rotation * (p - vec3(0.0, 0.0, 0.001)))\n        ));\n        normal = rotation * normal;\n        vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n        float diff = max(dot(normal, lightDir), 0.0);\n        \n        vec3 objectColor;\n        if (materialType == 0) { // Metallic\n            float spec = pow(max(dot(reflect(-lightDir, normal), -rd), 0.0), 32.0);\n            float fresnelFactor = fresnel(normal, -rd, 5.0);\n            objectColor = shapeColor.rgb * (diff * 0.5 + 0.5) + vec3(1.0) * spec + fresnelFactor * 0.5;\n        } else if (materialType == 1) { // Plastic\n            float spec = pow(max(dot(reflect(-lightDir, normal), -rd), 0.0), 16.0);\n            objectColor = shapeColor.rgb * diff * 0.8 + vec3(0.2) + vec3(1.0) * spec * 0.5;\n        } else if (materialType == 2) { // Glass\n            float fresnelFactor = fresnel(normal, -rd, 3.0);\n            vec3 refractDir = refract(rd, normal, 1.0 / 1.5); // Assuming refractive index of 1.5\n            vec3 reflectDir = reflect(rd, normal);\n            vec3 refractCol = texture(iChannel0, (p.xy + refractDir.xy) * 0.5 + 0.5).rgb;\n            vec3 reflectCol = texture(iChannel0, (p.xy + reflectDir.xy) * 0.5 + 0.5).rgb;\n            objectColor = mix(refractCol, reflectCol, fresnelFactor) + shapeColor.rgb * 0.2;\n        }\n        \n        // Blend object color with background\n        col = mix(bgColor, objectColor, 0.8);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}