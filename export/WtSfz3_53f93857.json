{"ver":"0.1","info":{"id":"WtSfz3","date":"1599429168","viewed":78,"name":"Simple 3D Rasterisation","username":"shv_luffy_98","description":"3D view of revolution using rasterisation concept","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distFromScreenP(vec3 ro, vec3 rd, vec3 p)\n{\n    return length(cross(p - ro, rd)) / length(rd);\n}\n\nfloat rangeConvert(float a1, float a2, float x1, float x2, float x)\n{\n    return (x2 - x) / (x2 - x1) * (a2 - a1) / (x2 - x1) + a1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5; \n    uv.x *= iResolution.x / iResolution.y;\n    \n \n    float t = iTime / 1.5;\n    vec3 p = vec3(.0 + sin(t) * .75, .0 + sin(t) * .25, 0. + cos(t));\n    vec3 ro = vec3(.0, .0, -3.);\n    vec3 rd = vec3(uv.x, uv.y, .0) - ro;\n    \n    float d = distFromScreenP(ro, rd, p);\n    d = smoothstep(.2, .19, d) * rangeConvert(.4, 1.4, -1., 1., cos(t));\n    \n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}