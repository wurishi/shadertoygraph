{"ver":"0.1","info":{"id":"wdyBD1","date":"1607010333","viewed":449,"name":"array of asserts","username":"FabriceNeyret2","description":"when you want to check many variable at the same time ( red blocks )\n\n( also shows an example of  expr(uv) check in green in the result ).","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["debug","utils"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === the magic function.  list = ( bool1, ... , boolN ) ==============\n#define assert(list) {                                         \\\n    bool L[] =  bool[] list;                                   \\\n    st_assert( U.y>.1 || fract(U.x*float(L.length()))>.1, 2 ); \\\n    st_assert( U.y>.1 || L[ int(U.x*float(L.length())) ] );    \\\n}\n\nfloat calc( vec2 U, vec2 M ) { // ========== some deep compute function\n    \n    vec4 S = sin(vec4(20,17,21,0)*M.xyxy + 3.*iTime); // some expressions \n    \n    // Here is the assert array:  note the double () \n    // for debug, suppose we need to check these 6 expressions are valid.\n    //         assert1    assert2   assert3 assert4  assert5   assert6\n    assert(  ( S.x<.0 , M.x*M.y>.5 , S.y>.0, S.z<0., S.w>0., S.z*S.w<.5 ) );\n\n    S *= U.xyxy;                                      // some result\n    float v = sin( S.x + 10.*sin(S.y  +10.*sin(S.z + 10.*sin(S.w))) );\n    st_assert( v < .99999, 1 );  // example of expr(uv) check\n    return .5+.5*v; \n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )  // ===============\n{\n    vec2 R = iResolution.xy,\n         U = fragCoord/R,\n         M = iMouse.xy/R - .5;\n    \n    fragColor = vec4( .3*calc(U,M) );\n}","name":"Image","description":"","type":"image"}]}