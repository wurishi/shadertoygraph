{"ver":"0.1","info":{"id":"DlSGRh","date":"1672793697","viewed":68,"name":"simple raytracing sphere","username":"kacperks","description":"simple raytracing alghorithm implementation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 col = vec3(0.0);\n    vec3 ro = vec3(0.0, 0.0, 2.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float t = 0.0;\n    for (int i = 0; i < 64; i++)\n    {\n        vec3 pos = ro + rd * t;\n        float d = length(pos) - 1.0;\n        t += d;\n        if (d < 0.001)\n        {\n            vec3 n = normalize(pos);\n            vec3 l = normalize(vec3(0.0, 1.0, 0.0));\n            float diff = clamp(dot(n, l), 0.0, 1.0);\n            col = vec3(diff);\n            break;\n        }\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}