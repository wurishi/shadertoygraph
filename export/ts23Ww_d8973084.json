{"ver":"0.1","info":{"id":"ts23Ww","date":"1549052053","viewed":388,"name":"fluid?","username":"piotrekli","description":"A failed attempt to make a fluid simulation\npress space to see velocities","likes":0,"published":3,"flags":48,"usePreview":0,"tags":["2d","fluid","fail","liquid","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = atan(0.0, -1.0);\n\nvec3 hsv2rgb(vec3 hsv)\n{\n    vec3 rgb;\n    hsv.x = fract(hsv.x)*6.0;\n    float h = fract(hsv.x);\n    switch (int(hsv.x))\n    {\n        case 0: rgb = vec3(1.,   h,    0.);   break;\n        case 1: rgb = vec3(1.-h, 1.,   0.);   break;\n        case 2: rgb = vec3(0.,   1.,   h);    break;\n        case 3: rgb = vec3(0.,   1.-h, 1.);   break;\n        case 4: rgb = vec3(h,    0.,   1.);   break;\n        case 5: rgb = vec3(1.,   0.,   1.-h); break;\n    }\n    rgb = (1.0-(1.0-rgb)*hsv.y)*hsv.z;\n    return rgb;\n}\n/*\nvec2 gradient(vec2 fragCoord)\n{\n    vec2 grad = vec2(0.0);\n    grad.x -= texelFetch(iChannel0, ivec2(fragCoord)+ivec2(-1, 0), 0).z;\n    grad.x += texelFetch(iChannel0, ivec2(fragCoord)+ivec2(+1, 0), 0).z;\n    grad.y -= texelFetch(iChannel0, ivec2(fragCoord)+ivec2(0, -1), 0).z;\n    grad.y += texelFetch(iChannel0, ivec2(fragCoord)+ivec2(0, +1), 0).z;\n    return grad;\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (!(texture(iChannel3, vec2(32.0/256.0, 0.0)).x < 0.5))\n    {\n        vec4 t = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        vec2 grad = t.xy/t.z*7.0; //gradient(fragCoord);\n        float angle = atan(grad.y, grad.x)/(2.*PI);\n        float r = 1.0-exp(-length(grad)*0.25);\n        float s = exp(-length(grad)*0.03);\n        fragColor = vec4(hsv2rgb(vec3(angle, s, r)), 1.0);\n    }\n    else\n    {\n        vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        fragColor = 1.0 - vec4(1.0, 0.95, 0.8, 0.0)*(col.w/col.z*0.2);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    vec4 col = T(pos);\n    col = mix(col, advect(pos), vec4(0.8));\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    vec4 col = T(pos);\n    col = apply_pressure(pos, col);\n    col.xy *= 0.999;\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// x = x momentum, y = y momentum, z = density, w = dye\n\n\nvec4 T(ivec2 xy)\n{\n    xy = (xy+ivec2(iResolution.xy))%ivec2(iResolution.xy);\n    vec4 col = texelFetch(iChannel0, xy, 0);\n    if (iMouse.z > 0.0 && length(iMouse.xy-vec2(xy)) < 4.0)\n        col += vec4((iMouse.zw-iMouse.xy)*0.1, 0.0, 1.0);\n    if (iFrame < 2)\n    { \n        col = texture(iChannel1, vec2(xy)/iResolution.xy);\n        col = col*vec4(2.0, 2.0, 0.0, 3.0)+vec4(-1.0, -1.0, 0.5, 0.0);\n        if (iResolution.x > 300.0)\n            col *= vec4(0.0, 0.0, 1.0, 0.3);\n    }\n    return col;\n}\n\nvec4 T(int x, int y)\n{\n    return T(ivec2(x, y));\n}\n\nvec4 T(ivec2 p, int x, int y)\n{\n    return T(p+ivec2(x, y));\n}\n\nconst int R = 10;\n\nvec4 sample_advect(ivec2 pos, vec2 dir)\n{\n    vec4 c = T(pos);\n    vec2 dd = dir - c.xy/c.z*3.0;\n    float w = max(0.0, 1.-abs(dd.x))*max(0.0, 1.-abs(dd.y));\n    return c * w;\n}\n\nvec4 advect(ivec2 pos)\n{\n    vec4 col = vec4(0.0);\n    for (int yy=-R; yy<=R; ++yy)\n        for (int xx=-R; xx<=R; ++xx)\n        {\n            ivec2 off = ivec2(xx, yy);\n            col += sample_advect(pos+off, vec2(-off));\n        }\n    return col;\n}\n\nvec4 apply_pressure(ivec2 pos, vec4 col)\n{\n    vec2 f = vec2(0.0);\n    //f.x += T(pos, 1, 0).z - T(pos, -1, 0).z;\n    //f.y += T(pos, 0, 1).z - T(pos, 0, -1).z;\n    for (int yy=-R; yy<=R; ++yy)\n        for (int xx=-R; xx<=R; ++xx)\n        {\n            ivec2 off = ivec2(xx, yy);\n            if (off == ivec2(0, 0)) continue;\n            f += vec2(off)*T(pos+off).z / dot(vec2(off), vec2(off));\n        }\n    col.xy -= f*0.01;\n    return col;\n}\n\nvec4 diffuse(ivec2 pos)\n{\n    vec4 c = vec4(0.0);\n    float tw = 0.0;\n    for (int yy=-R; yy<=R; ++yy)\n        for (int xx=-R; xx<=R; ++xx)\n        {\n            ivec2 off = ivec2(xx, yy);\n            if (off == ivec2(0, 0)) continue;\n            vec2 r = vec2(off)*4.0;\n            float w = 1.0 / dot(r, r);\n            tw += w;\n            c += T(pos+off) * w;\n        }\n    return c / tw;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n    vec4 col = mix(T(pos), diffuse(pos), 0.03);\n    fragColor = col;\n}","name":"Buffer C","description":"","type":"buffer"}]}