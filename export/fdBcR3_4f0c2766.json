{"ver":"0.1","info":{"id":"fdBcR3","date":"1643827852","viewed":312,"name":"Sierpinski Triangle SDF 2d","username":"jt","description":"Loopless, equilateral 2d Sierpinski Triangle signed distance function - exact.\n3d variant here [url=https://www.shadertoy.com/view/fsByz3]Sierpinski Triangle SDF 3d[/url].\nInterior distances sign-flipped for nicer visualization (see comments).","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","sdf","triangle","distance","sierpinski","loopless","exact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/fdBcR3 (loopless) Sierpinski Triangle SDF 2d written 2022-2-2 by Jakob Thomsen\n// based on my https://www.shadertoy.com/view/sdByzy (loopless, branchless) Textured Sierpinski Triangle\n//\n// CC0 License\n//\n// To the extent possible under law, the author has dedicated\n// all copyright and related and neighboring rights to this software\n// to the public domain worldwide.\n// This software is distributed without any warranty.\n//\n// For a copy of the CC0 Public Domain Dedication see <http://creativecommons.org/publicdomain/zero/1.0/>.\n\n// tags: 2d, sdf, triangle, distance, sierpinski, loopless, exact, fractal\n\nfloat sdEquilateralTriangle( in vec2 p ) // https://www.shadertoy.com/view/Xl2yDW  Regular Triangle - distance 2D by iq\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n// NOTE: For nicer visualization internal distances have been negated.\n//       See comments below to get correct sdf.\nfloat SDF_SierpinskiTriangle(vec2 p, uint n) // by jt\n{\n    // For equilateral triangle: h = sqrt(3)/2 so 0.5^2 + h^2 = 0.25 + 0.75 = 1\n    // Vertices 3d (1,0,0),(0,1,0),(0,0,1) projected to 2d (-0.5,sqrt(3)/6),(+0.5,sqrt(3)/6),(0,sqrt(3)/3)\n    // (Note: sqrt(3)/3+sqrt(3)/6 = sqrt(3)*2/6+sqrt(3)*1/6 = sqrt(3)*3/6 = sqrt(3)/2)\n    // Projection:\n    //\n    //    a = -x*0.5+y*0.5\n    //    b = -x*sqrt(3)/6-y*sqrt(3)/6+z*sqrt(3)/3\n    //\n    // Inverse projection using wxMaxima:\n    //\n    //    linsolve([a=y/2-x/2, b=sqrt(3)*(z/3-(x+y)/6),x+y+z=1], [x,y,z]);\n    //\n    // Result:\n    //\n    //    [x=(-sqrt(3)*b-3*a+1)/3,y=(-sqrt(3)*b+3*a+1)/3,z=(2*sqrt(3)*b+1)/3]\n    vec3 q =\n        vec3 // global coordinates (barycentric)\n        (\n            (-sqrt(3.0)*p.y-3.0*p.x+1.0)/3.0,\n            (-sqrt(3.0)*p.y+3.0*p.x+1.0)/3.0,\n            (2.0*sqrt(3.0)*p.y+1.0)/3.0\n        );\n\n    if(any(lessThan(q, vec3(0.0))))\n        return sdEquilateralTriangle(p * 2.0) / 2.0;\n\n    float N = exp2(float(n));\n    q = 1.0 - q;\n    ivec3 i = ivec3(q * N);\n    int f = i.x & i.y & i.z; // inspired by FabriceNeyret2's shortest Sierpinski https://www.shadertoy.com/view/ldlfRM\n    if(f == 0) // \"leaves\" - this would be the base-case if this was a recursive implementation\n    {\n        q = 1.0 - q;\n        q = mod(q, 1.0 / N);\n        //return -min(min(q.x, q.y), q.z); // correct: base-case is interior\n        return min(min(q.x, q.y), q.z); // ...but this looks nicer in the visualization\n    }\n    float s = exp2(floor(log2(float(f)))) * 2.0 / N;\n    \n    q = mod(q * 2.0, s) / 2.0 * sqrt(3.0) / 2.0; // local coordinates (barycentric)\n\n    //return min(min(q.x, q.y), q.z); // correct: triangle has only outside...\n    return -min(min(q.x, q.y), q.z); // ...but this looks nicer in the visualization\n}\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    p /= iResolution.xy;\n    p = 2.0 * p - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n\n    p /= 2.0;\n    //p /= exp2(5.0*(0.5 - 0.5 * cos(iTime*0.1))); // zoom\n    p.y += sqrt(3.0)/12.0;\n    float d = SDF_SierpinskiTriangle(p, 6u) * 4.0; // show sdf\n    //float d = SDF_SierpinskiTriangle(p, 10u) * exp2(5.0*(0.5 - 0.5 * cos(iTime*0.1))+0.5); // scale sdf to improve visibility of interior\n\n    // iq's SDF visualization colors\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    \n    o = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}