{"ver":"0.1","info":{"id":"DdsSDN","date":"1669298999","viewed":206,"name":"lbm_d2q7_water_and_oil","username":"zengliyuan","description":"lbm 2d fluid d2q7\n\nmouse: water\nctrl + mouse: oil\nv: velocity field\n","likes":14,"published":1,"flags":48,"usePreview":0,"tags":["2d","water","fluid","oil","lbm","latticeboltzmann","multicomponent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//sdSegment from https://iquilezles.org/articles/distfunctions2d/\nfloat sd_seg(in vec2 p,in vec2 a,in vec2 b)\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sd_v2field(in vec2 p,in float size,in vec2 v)\n{\n    const float w = 1.;\n    const float an = .8;\n    float hs = .5*size;\n    vec2 o = floor(p/size)*size+hs;\n    //v = clamp(v,-hs,hs);\n    v = length(v)>hs?normalize(v)*hs:v;\n    vec2 a = o+v;\n    vec2 b = o-v;\n    float arr = dot(-v,p-a)*.2;\n    arr*=step(arr,.05*length(v)*size)*an;\n    return sd_seg(p,a,b)-w-arr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = I2(fragCoord*scale);\n    size = I2(iResolution*scale);\n    vec4 data = GetData(ch0, idx);\n    Cell cell = get_cell(data);\n    float rho0 = cell.rho;\n    vec2 u = cell.u*rho0;\n    data = GetData(ch1, idx);\n    cell = get_cell(data);\n    float rho1 = cell.rho;\n    u+=cell.u*rho1;\n    \n    \n    if((idx.y&1)==1)\n    {\n        data=GetData(ch0,idx+ivec2(1,0));\n        cell = get_cell(data);\n        rho0 += cell.rho;\n        u+=cell.u*rho0;\n        rho0*=.5;\n        data=GetData(ch1,idx+ivec2(1,0));\n        cell = get_cell(data);\n        rho1 += cell.rho;\n        u+=cell.u*rho1;\n        rho1*=.5;\n        u*=.5;\n    }\n    \n    \n    vec3 color = vec3(.2,.3,1.)*rho0+vec3(.9,.8,.1)*rho1*2.;\n    vec3 arr = vec3(1,1,1)*step(sd_v2field(fragCoord,1./scale,u.xy*vec2(1,-1)*20.),0.)*step(.1,rho0+rho1)*texelFetch(ch2, ivec2(86,2),0).r;\n    \n    //color = mix(color,arr,.4);\n    color += arr*.4;\n    color -= step(1.1,dot(color,vec3(.2126, .7152, .0722)))*arr*2.;\n    \n    fragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = I2(fragCoord);\n    size = I2(iResolution*scale);\n    if(idx.x>size.x-1||idx.y>size.y-1){discard;}\n    const float rho0=1.;\n        \n    Cell cell = get_cell(GetData(ch0,idx));\n    if(cell.rho!=0.)\n    {\n    //streaming(ch0,idx,cell,rho0);\n    vec2 force = force_calculation(ch0,idx,cell,.5,.08);\n    force -= force_calculation(ch2,idx,cell,.25,.0);\n    collision(ch0,idx,force,cell,.2,rho0);\n    }\n    if(iMouse.z>0.5&&(GetData(ch1,ivec2(17,0)).r<.1)&&IsInCircle(iMouse.xy*scale,3.,idx))\n    {\n        cell.f[0] = .3;\n        cell.f[3] = .1;\n        cell.f[5] = .1;\n    }\n    if(iFrame<1&&IsInCircle(iResolution.xy*scale*.5,10.,idx))\n    {    \n        cell.f[0] = .3;\n    }\n\n    fragColor = save_cell(cell);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define GetData(ch, idx) texelFetch(ch,idx,0)\n#define I2(v) ivec2(v)\n#define F2(v) vec2(v)\n#define IsInCircle(o,r,idx) (length(o-vec2(idx))<r)\n\nconst float scale = .1; //1/10\nconst vec2 g = vec2(0,.006);\nconst float s3d2 = sqrt(3.)*.5;\nconst float s3m2 = sqrt(3.)*2.;\nivec2 size;\n\nstruct Cell\n{\n    float f[7];\n    float psi;\n    vec2 u;\n    float rho;\n};\n\nuint pack(in vec2 x)\n{\n    return packSnorm2x16(x);\n    //return packHalf2x16(x);\n}\n\nvec2 unpack(in uint a)\n{\n    return unpackSnorm2x16(a);\n    //return unpackHalf2x16(a);\n}\n\n\nvec2 decode(in float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X); \n}\n\nfloat encode(in vec2 x)\n{\n    uint X = pack(x);\n    return uintBitsToFloat(X); \n}\n\nfloat get_rho(in Cell c)\n{\n    return c.f[0]+c.f[1]+c.f[2]+c.f[3]+c.f[4]+c.f[5]+c.f[6];\n}\n\nvec2 get_u(in Cell c)\n{\n    return (1./(c.rho+1e-20))*(vec2(1.,0.)*c.f[1]+vec2(-1.,0.)*c.f[2]+vec2(.5,s3d2)*c.f[3]+vec2(-.5,-s3d2)*c.f[4]+vec2(-.5,s3d2)*c.f[5]+vec2(.5,-s3d2)*c.f[6]);\n}\n\nfloat get_psi(in float rho,in float rho0)\n{\n    float r = rho/rho0;\n    return 0.35*(atan(1.53346 * r) * 0.63662);\n}\n\nfloat get_psi(in sampler2D ch,in ivec2 idx)\n{\n    return decode(GetData(ch,idx).w).y;\n}\n\nCell get_cell(in vec4 data)\n{\n    Cell c;\n    vec2 tmp;\n    \n    tmp = decode(data.x);\n    c.f[0] = tmp.x;\n    c.f[1] = tmp.y;\n    tmp = decode(data.y);\n    c.f[2] = tmp.x;\n    c.f[3] = tmp.y;\n    tmp = decode(data.z);\n    c.f[4] = tmp.x;\n    c.f[5] = tmp.y;\n    tmp = decode(data.w);\n    c.f[6] = tmp.x;\n    c.psi = tmp.y;\n    c.rho = get_rho(c);\n    c.u = get_u(c);\n    return c;\n}\n\nvec4 save_cell(in Cell c)\n{\n    vec4 tmp;\n    tmp.x = encode(vec2(c.f[0],c.f[1]));\n    tmp.y = encode(vec2(c.f[2],c.f[3]));\n    tmp.z = encode(vec2(c.f[4],c.f[5]));\n    tmp.w = encode(vec2(c.f[6],c.psi));\n    return tmp;\n}\n\n\nbool is_boundary(in ivec2 idx)\n{\n    return ((size.x < idx.x + 1) || (size.y < idx.y + 1) || (idx.x < idx.y%2) || (idx.y < 0));\n}\n\nvoid streaming(in sampler2D ch,in ivec2 idx,inout Cell c,in float rho0)\n{\n    ivec2 idx2;\n    Cell c0 = get_cell(GetData(ch,idx));\n    float tmp;\n    c.f[0] = c0.f[0];\n    \n    idx2 = idx + ivec2(-1,0);\n    tmp = decode(GetData(ch,idx2).x).y;\n    c.f[1] = is_boundary(idx2) ? (c0.f[2]):(tmp);\n    \n    idx2 = idx + ivec2(1,0);\n    tmp = decode(GetData(ch,idx2).y).x;\n    c.f[2] = is_boundary(idx2) ? (c0.f[1]):(tmp);\n\n    idx2 = idx + ivec2(-(idx.y&1),1);\n    tmp = decode(GetData(ch,idx2).y).y;\n    c.f[3] = is_boundary(idx2) ? (c0.f[4]):(tmp);\n    \n    idx2 = idx + ivec2(1-(idx.y&1),-1);\n    tmp = decode(GetData(ch,idx2).z).x;\n    c.f[4] = is_boundary(idx2) ? (c0.f[3]):(tmp);\n    \n    idx2 = idx + ivec2(1-(idx.y&1),1);\n    tmp = decode(GetData(ch,idx2).z).y;\n    c.f[5] = is_boundary(idx2) ? (c0.f[6]):(tmp);\n    \n    idx2 = idx + ivec2(-(idx.y&1),-1);\n    tmp = decode(GetData(ch,idx2).w).x;\n    c.f[6] = is_boundary(idx2) ? (c0.f[5]):(tmp);\n    \n    c.rho = is_boundary(idx)? 0.:get_rho(c);\n    c.u = get_u(c);\n    c.psi = get_psi(c.rho, rho0);\n}\n\nvec2 force_calculation(in sampler2D ch,in ivec2 idx,in Cell c,in float G,in float b)\n{\n    vec2 f = vec2(0,0);\n    ivec2 idx2;\n    float psi;\n    idx2 = idx + ivec2(1,0);\n    psi = get_psi(ch,idx2)+ (is_boundary(idx2)?b:0.);\n    f += G * psi * vec2(1,0);\n    \n    idx2 = idx + ivec2(-1,0);\n    psi = get_psi(ch,idx2)+ (is_boundary(idx2)?b:0.);\n    f += G * psi * vec2(-1,0);\n\n    idx2 = idx + ivec2(1-idx.y&1,1);\n    psi = get_psi(ch,idx2) + (is_boundary(idx2)?b:0.);\n    f += G * psi * vec2(.5,-s3d2);\n\n    idx2 = idx + ivec2(1-idx.y&1,-1);\n    psi = get_psi(ch,idx2)+ (is_boundary(idx2)?b:0.);\n    f += G * psi * vec2(.5,s3d2);\n    \n    idx2 = idx + ivec2(-(idx.y&1),-1);\n    psi = get_psi(ch,idx2)+ (is_boundary(idx2)?b:0.);\n    f += G * psi * vec2(-.5,s3d2);\n    \n    idx2 = idx + ivec2(-(idx.y&1),1);\n    psi = get_psi(ch,idx2)+ (is_boundary(idx2)?b:0.);\n    f += G * psi * vec2(-.5,-s3d2);\n\n    return f*max(c.psi,.95);\n}\n\nvoid collision(in sampler2D ch,in ivec2 idx,in vec2 force,inout Cell c,in float k,in float rho0)\n{\n    float d = max(c.rho/rho0-1.,0.);\n    vec2 u2 = c.u*.999 + force * min(1./(c.rho+1e-20),25.) + (1.-d)*g;\n    \n    const float max_speed = .5;\n    if(length(c.u)>max_speed)\n    {\n        c.u=normalize(c.u)*max_speed;\n    }\n    \n    if(length(u2)>max_speed)\n    {\n        u2=normalize(u2)*max_speed;\n    }\n    \n    float eq[7];\n    float uu = dot(c.u,c.u);\n    float tmp;\n    //eq[0] = .5*c.rho*(1.-2.*uu);\n    eq[1] = (1./12.)*c.rho*(1.+4.*c.u.x+8.*c.u.x*c.u.x-2.*uu);\n    eq[2] = (1./12.)*c.rho*(1.-4.*c.u.x+8.*c.u.x*c.u.x-2.*uu);\n    tmp = dot(c.u,vec2(.5,s3d2));\n    eq[3] = (1./12.)*c.rho*(1.+4.*tmp+8.*tmp*tmp-2.*uu);\n    eq[4] = (1./12.)*c.rho*(1.-4.*tmp+8.*tmp*tmp-2.*uu);\n    tmp = dot(c.u,vec2(-.5,s3d2));\n    eq[5] = (1./12.)*c.rho*(1.+4.*tmp+8.*tmp*tmp-2.*uu);\n    eq[6] = (1./12.)*c.rho*(1.-4.*tmp+8.*tmp*tmp-2.*uu);\n    uu = dot(u2,u2);\n    //c.f[0] = -k*c.f[0]+k*eq[0]+.5*c.rho*(1.-2.*uu);\n    c.f[1] = -k*c.f[1]+k*eq[1]+(1./12.)*c.rho*(1.+4.*u2.x+8.*u2.x*u2.x-2.*uu);\n    c.f[2] = -k*c.f[2]+k*eq[2]+(1./12.)*c.rho*(1.-4.*u2.x+8.*u2.x*u2.x-2.*uu);\n    tmp = dot(u2,vec2(.5,s3d2));\n    c.f[3] = -k*c.f[3]+k*eq[3]+(1./12.)*c.rho*(1.+4.*tmp+8.*tmp*tmp-2.*uu);\n    c.f[4] = -k*c.f[4]+k*eq[4]+(1./12.)*c.rho*(1.-4.*tmp+8.*tmp*tmp-2.*uu);\n    tmp = dot(u2,vec2(-.5,s3d2));\n    c.f[5] = -k*c.f[5]+k*eq[5]+(1./12.)*c.rho*(1.+4.*tmp+8.*tmp*tmp-2.*uu);\n    c.f[6] = -k*c.f[6]+k*eq[6]+(1./12.)*c.rho*(1.-4.*tmp+8.*tmp*tmp-2.*uu);\n   \n    if(c.rho<5e-3)\n    {\n        c.f[0]=c.f[1]=c.f[2]=c.f[3]=c.f[4]=c.f[5]=c.f[6]=0.;\n        vec2 F=normalize(force+g*0.01);\n        float a = atan(F.y,F.x);\n        const float b = 3.141593/6.;\n        if(a>-b&&a<=b) c.f[1]=c.rho;\n        else if(a>b&&a<=3.*b) c.f[3]=c.rho;\n        else if(a>3.*b&&a<=5.*b) c.f[5]=c.rho;\n        else if(a>5.*b||a<=-5.*b) c.f[2]=c.rho;\n        else if(a>-5.*b&&a<=-3.*b) c.f[4]=c.rho;\n        else if(a>-3.*b&&a<=-1.*b) c.f[6]=c.rho;\n        //else c.f[0]= c.rho;\n    }\n    c.f[0] = c.rho-c.f[1]-c.f[2]-c.f[3]-c.f[4]-c.f[5]-c.f[6];\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = I2(fragCoord);\n    size = I2(iResolution*scale);\n    if(idx.x>size.x-1||idx.y>size.y-1){discard;}\n    const float rho0=1.;\n    \n    Cell cell;\n    streaming(ch0,idx,cell,rho0);\n    fragColor = save_cell(cell);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = I2(fragCoord);\n    size = I2(iResolution*scale);\n    if(idx.x>size.x-1||idx.y>size.y-1){discard;}\n    const float rho0=.5;\n    \n    Cell cell = get_cell(GetData(ch0,idx));\n    //streaming(ch0,idx,cell,rho0);\n    if(cell.rho!=0.)\n    {\n    vec2 force = force_calculation(ch0,idx,cell,.25,.2);\n    Cell cell2 = get_cell(GetData(ch2,idx));\n    force += cell2.psi*-g;\n    force -= force_calculation(ch2,idx,cell,.25,0.);\n    collision(ch0,idx,force,cell,.1,rho0);\n    }\n    if(iMouse.z>.0&&(GetData(ch1,ivec2(17,0)).r>.0)&&IsInCircle(iMouse.xy*scale,3.,idx))\n    {\n        cell.f[0] = .15;\n        cell.f[3] = .05;\n        cell.f[5] = .05;\n    }\n    if((iFrame<1&&IsInCircle(iResolution.xy*scale*vec2(.5,.9),8.,idx)))\n    {\n        cell.f[0] = .25;\n    }\n\n    fragColor = save_cell(cell);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = I2(fragCoord);\n    size = I2(iResolution*scale);\n    if(idx.x>size.x-1||idx.y>size.y-1){discard;}\n    const float rho0=.5;\n    \n    Cell cell;\n    streaming(ch0,idx,cell,rho0);\n    fragColor = save_cell(cell);\n}","name":"Buffer D","description":"","type":"buffer"}]}