{"ver":"0.1","info":{"id":"DlScRG","date":"1691937528","viewed":118,"name":"dft͏ (Warning: Flashing lights)","username":"01000001","description":"Learning how to do discrete fourier transform, compared with builtin. Mine is on the bottom.\n\nShadertoy's scaliing of the FFT and colour space is weird but I tried to match it with a weird transformation... it works.","likes":7,"published":3,"flags":96,"usePreview":0,"tags":["fourier","discrete","transform","dft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 green(float x){\n    return vec4(0.1 * (x-1.), 0.3*x*x, x*.05, 0);\n}\n\nvec4 blue(float x){\n    return vec4(0, x*x*.2, x, 0);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n    O = green(pow(texture(iChannel0, uv).x, 1.));\n    //Display FTs\n    \n    //Wave\n    float wave = texture(iChannel0, vec2(uv.x, .5/r.y)).x;\n    O += blue(abs(0.03/((wave - (uv.y-.5)*3.))));\n    \n    O = pow(O, vec4(1./2.2));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MddGW4","filepath":"https://soundcloud.com/anicator/the-march-of-the-mountains","previewfilepath":"https://soundcloud.com/anicator/the-march-of-the-mountains","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 3.14159256;\nconst float temporalBlend = 0.75;\n\n// A few things you can try.\n\n// https://soundcloud.com/ehrling/ehrling-sthlm-sunset\n// https://soundcloud.com/3kliksphilip/under-the-pizza\n// https://soundcloud.com/nyanara/for-a-moment-i-was-there-1?in=spacelady87/sets/various-ambient-chill-lt-dub\n// https://soundcloud.com/symphonicsamples/cornfield-chase-hans-zimmer-midi-mockup\n// https://soundcloud.com/dainumo/prokofiev-space-transmission-download-in-description \n// ^ This one is pretty cool at the start\n// Default shadertoy tracks\n\n\n// Note: You may need to adjust the coefficient at line 55\n//       to make different tracks line up.\n\n\nfloat dft(float x)\n{\n    float c=0.,s=c;\n    vec2 r = iResolution.xy;\n\n    for(float i = 0.; i < 1.; i += 1./r.x){\n    \n        s += (sin(i * x * 2. * pi)\n            * ((texture(iChannel0, vec2(i, 1)).x)*2.-1.)) / sqrt(r.x);\n        c += (cos(i * x * 2. * pi) \n            * ((texture(iChannel0, vec2(i, 1)).x)*2.-1.)) / sqrt(r.x);\n    }\n    //return smoothstep(r.x / 30., r.x / 5., x)*20.;\n    return max(0., length(vec2(s, c))\n    *mix(log(x), sqrt(x)*pi/2., smoothstep(r.x / 30., r.x / 5., x))\n    // This multiplication is SO weird, but it works to create a similar result to the builtin\n    // And no, I cannot explain why it works.\n    -0.025);//This subtraction is a nasty hack but it clears up the visualizer a ton\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n    if (U.y > 3.) return;\n    \n    float wave = texture(iChannel0, vec2(uv.x, 1)).x * 2. - 1.;\n    float fft = texture(iChannel0, vec2(uv.x, 0)).x;\n    \n    if (U.y == 0.5){\n        O.x = wave;\n        // Waveform output bottom pixel row\n    } else if (U.y == 1.5) {\n        O.x = texture(iChannel0, vec2(uv.x, 0)).x;\n        // Shadertoy FFT output\n    } else if (U.y == 2.5) {\n        O.x = mix(dft(U.x*.16), texture(iChannel1, uv).x, temporalBlend);\n        // My DFT output\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n    float wave = texture(iChannel0, vec2(uv.x, 0)).x;\n    float fft = texture(iChannel0, vec2(uv.x, 1.5/r.y)).x;\n    float dft = texture(iChannel0, vec2(uv.x, 2.5/r.y)).x;\n\n    O.x = mix(fft, \n        dft,\n        //pow(abs((pow(dft, 0.25)-.25)-.1), 0.8), // this is if not using *x on return in dft function\n        smoothstep(.55,.45, uv.y - wave/3.)\n    );\n\n    if (U.y == 0.5) O = vec4(wave);\n}","name":"Buffer B","description":"","type":"buffer"}]}