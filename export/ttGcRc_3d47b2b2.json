{"ver":"0.1","info":{"id":"ttGcRc","date":"1611434461","viewed":84,"name":"Empty bowl...","username":"kw","description":"Experimenting with shapes and colors.\nMinimalistic 3D","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//empty bowl...\n\n//distance functions:\n//https://iquilezles.org/articles/distfunctions\n//https://www.shadertoy.com/view/Xds3zN\n\n//note:\n//look for a way to smooth edges\n\nstruct MATERIAL{vec3 color;};\nstruct OBJECT{bool hit;float depth;vec3 pos;MATERIAL mat;};\n\nOBJECT oSphere(in vec3 pos,in float size,in vec3 color)\n{\n    OBJECT obj;\n    obj.depth = length(pos) - size;\n    obj.mat.color = color;\n    return obj;\n}\n\nOBJECT oBox(in vec3 pos,in vec3 size,in float m,in vec3 color)\n{\n    OBJECT obj;\n    vec3 q = abs(pos) - size;\n    obj.depth = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - m;\n    obj.mat.color = color;\n    return obj;\n}\n\nOBJECT oPlane(in vec3 pos,in vec3 color)\n{\n    OBJECT obj;\n    obj.depth = pos.y;\n    obj.mat.color = color;\n    return obj;\n}\n\nOBJECT oConeRound(in vec3 pos,in vec3 a,in vec3 b,in float r1,in float r2,in vec3 color)\n{\n    OBJECT obj;\n    obj.mat.color = color;\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr * rr;\n    float il2 = 1.0 / l2;\n    vec3 pa = pos - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    vec3 m = pa * l2 - ba * y;\n    float x2 = dot(m,m);\n    float y2 = y * y * l2;\n    float z2 = z * z * l2;\n    float k = sign(rr) * rr * rr * x2;\n    if(sign(z) * a2 * z2 > k){obj.depth = sqrt(x2 + z2) * il2 - r2;return obj;}\n    if(sign(y) * a2 * y2 < k){obj.depth = sqrt(x2 + y2) * il2 - r1;return obj;}\n    obj.depth = (sqrt(x2 * a2 * il2) + y * rr) * il2 - r1;\n    return obj;\n}\n\nOBJECT oAdd(in OBJECT a,in OBJECT b)\n{\n    if (a.depth < b.depth){return a;}else {return b;}\n}\n\nOBJECT oSub(in OBJECT a,in OBJECT b)\n{\n    if (-a.depth < b.depth){a.depth = a.depth;return a;} else{b.depth = -b.depth;return b;}\n}\n\nOBJECT oSub(in OBJECT a, in OBJECT b,in float k)\n{\n    OBJECT obj = oSub(a,b);\n    float h = clamp(0.5 - 0.5 * (b.depth + a.depth) / k,0.0,1.0);\n    obj.depth = mix(a.depth,-b.depth,h) + k * h * (1.0 - h);\n    return obj;\n}\n\nOBJECT oDif(in OBJECT a, in OBJECT b)\n{\n    if(a.depth > b.depth){return a;}else {return b;}\n}\n\nOBJECT oDif(in OBJECT a, in OBJECT b, in float k)\n{\n    OBJECT obj = oDif(a,b);\n    float h = clamp(0.5 - 0.5 * (b.depth - a.depth) / k,0.0,1.0);\n    obj.depth = mix(b.depth,a.depth,h) + k * h * (1.0 - h);\n    return obj;\n}\n \nOBJECT rScene(in vec3 pos)\n{\n    OBJECT obj;\n    vec3 c1 = vec3(pos.x * pos.x * pos.y,0.3,0.2);\n    vec3 c2 = vec3(0.4,pos.y / 40.0,0.2);\n    obj = oBox(pos - vec3(0.0,1.0,0.0),vec3(1.1,1.1,1.1),0.0,c1);\n    obj = oSub(obj,oSphere(pos - vec3(0.0,1.5,0.0),0.9,c1),0.2);\n    obj = oDif(obj,oSphere(pos - vec3(0.0,1.5,0.0),1.0,c1),0.2);\n    obj = oAdd(obj,oPlane(pos - vec3(0.0,0.2,0.0),vec3(0.1,0.2,0.3)));\n    obj = oAdd(obj,oBox(pos - vec3(-0.0,0.4,0.0),vec3(1.4,0.2,1.4),0.0,c2));\n    obj = oAdd(obj,oConeRound(pos - vec3(0.0,2.0,0.0),vec3(-0.7,0.0,-1.2),vec3(0.2,0.0,1.2),0.01,0.04,vec3(0.6)));\n    obj = oAdd(obj,oConeRound(pos - vec3(0.0,2.0,0.0),vec3(-0.8,0.0,-1.2),vec3(0.0,0.0,1.2),0.01,0.04,vec3(0.6)));\n    return obj;\n}\n\nOBJECT rRaymarch(in vec3 pos,in vec3 direction,in int steps,in float smin,in float smax)\n{\n    OBJECT obj;\n    float sd = 0.0;\n    vec3 ray;\n    for (int i;i < steps;i ++) \n    {\n        ray = pos + direction * sd;\n        obj = rScene(ray);\n        sd += obj.depth;\n        if(sd > smax || obj.depth < smin){break;}\n    }\n    obj.hit = bool(sd <= smax);\n    if (obj.hit)\n    {obj.depth = sd;obj.pos = ray;}\n    return obj;\n}\n\nvec3 rColor(in OBJECT obj,in vec3 light,in int steps,in float smin,in float smax, float gamma)\n{\n    light = normalize(light);\n    vec2 e = vec2(1.0,-1.0) * 0.5773 * 0.02;\n    vec3 normal = normalize(e.xyy * \n    rScene(obj.pos + e.xyy).depth + \n    e.yyx * rScene(obj.pos + e.yyx).depth + \n    e.yxy * rScene(obj.pos + e.yxy).depth + \n    e.xxx * rScene(obj.pos + e.xxx).depth);\n    vec3 ray;\n    float res = 1.0;\n    float dst = 0.02;\n    OBJECT hit;\n    for (int i;i < steps;i ++) \n    {\n        hit = rScene(obj.pos + light * dst);\n        res = min(res,200.0 * hit.depth / dst);\n        dst += clamp(hit.depth,0.0,1.0);\n        if (res < smin || hit.depth > smax){break;}\n    }\n    dst = clamp(res,0.0,1.0);\n    float ambient = smoothstep(0.0,1.0,pow(0.5 + 0.5 * normal.y,4.0));\n    float diffuse = clamp(dot(normal,light),0.0,1.0);\n    vec3 color = mix(obj.mat.color,vec3(ambient),diffuse);\n    color = mix(color,obj.mat.color + normal * sqrt(obj.mat.color * dst),ambient);\n    return pow(color,vec3(gamma));\n}\n\nvec3 rFog(in vec3 color,in vec3 fog,in float density,in float factor)\n{\n    return mix(color,fog,1.0 - exp(-density * factor));\n}\n\nvec3 rVignette(in vec3 color,in vec2 pixel,in float factor)\n{\n    return color * smoothstep(factor,0.0,length(pixel));\n}\n\nvec3 rCamera(in vec2 uv,in vec3 pos,in vec3 target,in float factor)\n{\n    vec3 cz = normalize(target - pos);\n    vec3 cx = normalize(cross(vec3(0.0,1.0,0.0),cz));\n    vec3 cy = cross(cz,cx); \n    return normalize((cx * uv.x) + (cy * uv.y) + (cz * factor));\n}\n\nvec2 rPixel(in vec2 pos,in vec3 resolution)\n{\n    return vec2((pos - (0.5 * resolution.xy)) / resolution.y);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 pixel = rPixel(fragCoord,iResolution);\n    vec3 color = vec3(0.0);\n    vec3 cam = vec3(4.0,8.0,-4.0);\n    vec3 target = vec3(0.0,1.0,0.0);\n    vec3 ray = rCamera(pixel,cam,target,1.0);\n    OBJECT obj = rRaymarch(cam,ray,100,0.01,50.0);    \n    if (obj.hit){color = rColor(obj,vec3(0.0,100.0,0.0),100,0.01,50.0,0.4);}\n    color = rFog(color,vec3(0.1,0.2,0.1),obj.depth - 8.2,0.5);\n    color = rVignette(color,pixel,5.0);\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}