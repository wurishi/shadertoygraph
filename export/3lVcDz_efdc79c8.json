{"ver":"0.1","info":{"id":"3lVcDz","date":"1610829455","viewed":457,"name":"Signed distance to convex quad","username":"antovsky","description":"Signed distance to a non-intersecting convex quad.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf","convex","quad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Anton Mikhailov\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/* 2d determinant (aka cross2d) */\nfloat det( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n/* Modified from iq's: https://www.shadertoy.com/view/3tdSDj\n   Returns signed distance to segment and also the side (left/right = neg/pos) */\nvec2 sdSegmentWithSign( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2(length( pa - ba*h ), det(pa, ba));\n}\n\n/* Signed distance to non-intersecting, convex quad. */\nfloat sdQuad(in vec2 pos, in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3)\n{\n    vec2 sd0 = sdSegmentWithSign(pos, p0, p1);\n    vec2 sd1 = sdSegmentWithSign(pos, p1, p2);\n    vec2 sd2 = sdSegmentWithSign(pos, p2, p3);\n    vec2 sd3 = sdSegmentWithSign(pos, p3, p0);\n    float sd = min(sd0.x, min(sd1.x, min(sd2.x, sd3.x)));\n    \n    /* Point tests to the left of all segments. */\n    /* Can probably do something more clever here :) */\n    if (sd0.y < 0.0f && sd1.y < 0.0f && sd2.y < 0.0f && sd3.y < 0.0f)\n      sd = -sd;\n    \n    return sd;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdQuad(p, vec2(-0.4, -0.25), vec2(0.5,-0.5), vec2(0.4,0.3), vec2(0.0,0.2));\n    \n\t// coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}