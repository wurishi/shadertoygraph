{"ver":"0.1","info":{"id":"tstyD4","date":"1601579966","viewed":109,"name":"Michael Bowen GPRO 200 Lab 4","username":"mbowen","description":"Michael Bowen GPRO 200 Lab 3","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["gpro200","specularreflectance","diffusereflectance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//global variables\nfloat globalIntensity = .1;\nvec4 globalColor = vec4(1.0);\nconst int MAX_LIGHTS = 5;\n\n//Utilitiy functions\nfloat lenSq(in vec2 x){\n    return dot(x,x);\n}\n\nfloat lenSq(in vec3 v){\n\treturn dot(v,v);\n}\n\nfloat squareValue(in float x){\n\treturn x*x;\n}\n\nfloat powerOfTwo (in float base, in int power){\n    for(int i = power - 1; i >= 0; --i){\n    \tbase *= base;\n    }\n\treturn base;\n}\n\n\n\n// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN\n// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)\n//    point: input 3D vector\nvec4 asPoint(in vec3 point)\n{\n    return vec4(point, 1.0);\n}\n\n// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)\n//    point: input 3D vector\nvec4 asOffset(in vec3 offset)\n{\n    return vec4(offset, 0.0);\n}\n\n//Structs and their init functions\n\nstruct sSphere\n{\n\tfloat radius;\n    vec4 center;\n};\n\nvoid initSphere (out sSphere sphere, in vec3 center, in float radius) \n{\n\tsphere.center = asPoint(center);\n    sphere.radius = radius;\n\n}\n\nstruct pLight\n{\n\tvec4 center;\n    vec4 color;\n    float intensity;\n};\n\nvoid initPointLight(out pLight light, in vec3 center, in vec4 color, in float intensity)\n{\n  \tlight.center = asPoint(center);\n    light.color = color;\n    light.intensity = intensity;\n    \n}\n    \n\n//Agorithmic functions\n\n// calcViewport: calculate the viewing plane (viewport) coordinate\n//    viewport:       output viewing plane coordinate\n//    ndc:            output normalized device coordinate\n//    uv:             output screen-space coordinate\n//    aspect:         output aspect ratio of screen\n//    resolutionInv:  output reciprocal of resolution\n//    viewportHeight: input height of viewing plane\n//    fragCoord:      input coordinate of current fragment (in pixels)\n//    resolution:     input resolution of screen (in pixels)\nvoid calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,\n                  out float aspect, out vec2 resolutionInv,\n                  in float viewportHeight, in float focalLength,\n                  in vec2 fragCoord, in vec2 resolution)\n{\n    // inverse (reciprocal) resolution = 1 / resolution\n    resolutionInv = 1.0 / resolution;\n    \n    // aspect ratio = screen width / screen height\n    aspect = resolution.x * resolutionInv.y;\n\n    // uv = screen-space coordinate = [0, 1) = coord / resolution\n    uv = fragCoord * resolutionInv;\n\n    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1\n    ndc = uv * 2.0 - 1.0;\n\n    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f\n    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);\n}\n\n// calcRay: calculate the ray direction and origin for the current pixel\n//    rayDirection: output direction of ray from origin\n//    rayOrigin:    output origin point of ray\n//    viewport:     input viewing plane coordinate (use above function to calculate)\n//    focalLength:  input distance to viewing plane\nvoid calcRay(out vec4 rayDirection, out vec4 rayOrigin,\n             in vec3 eyePosition, in vec3 viewport)\n{\n    // ray origin relative to viewer is the origin\n    // w = 1 because it represents a point; can ignore when using\n    rayOrigin = asPoint(eyePosition);\n\n    // ray direction relative to origin is based on viewing plane coordinate\n    // w = 0 because it represents a direction; can ignore when using\n    rayDirection = asOffset(viewport - eyePosition);\n}\n\n\n    \n\n// calcColor: calculate the color of a pixel given a ray\n//    rayDirection: input ray direction\n//    rayOrigin:    input ray origin\nvec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)\n{\n    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS\n    //  -> what does the ray look like as color?\n    //return rayDirection;\n\t\n    //Scene\n    sSphere sphere;\n    //initSphere(sphere, vec3(sin(iTime), 0.0, -4.0), .5);\n    initSphere(sphere, vec3(0.0, 0.0, -4.0), .5);\n\n   \tpLight lights[MAX_LIGHTS];\n    \n    //initPointLight(pointLight, vec3(0.0,  0.0, -3.5), vec4(1.0), 10.0); //\n    initPointLight(lights[0], vec3(2.0,  2.0, 0.0), vec4(1.0), 10.0);\n    initPointLight(lights[1], vec3(sin(iTime),  0.0, -3.0 + cos(iTime)), vec4(1.0), 10.0);\n    //lights[0] = initPointLight(pointLight, vec3(2.0,  2.0, 0.0), vec4(1.0), 10.0);\n    \n    \n    vec3 dp;\n    dp.xy = rayDirection.xy - sphere.center.xy; //ray from pixel toward the center of the circle\n    float lSq = lenSq(dp.xy), //the length function calulates the square length so it is more efficent just square it\n          rSq = squareValue(sphere.radius); \n\n    \n    if(lSq <= rSq){ //if the length of that ray DP^2 is smaller than the radius^2 then it draws the circle. Squared for efficency\n    \t//inside the circle XY\n        //return vec4(1.0);\n        \n        //Render sphere\n        dp.z = rSq - ((dp.x*dp.x)+(dp.y*dp.y));\n        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));\n        vec3 normal = (position - sphere.center.xyz) / sphere.radius;\n       \n        \n        //point lighting\n        vec4 diffuseColor = vec4(normal * 0.5 + 0.5, 1.0);\n        vec4 specularColor = vec4(1.0);\n        //vec4 reflectionColor = vec4(1.0);\n        \n        vec4 finalColor;\n        for(int i = MAX_LIGHTS-1; i >= 0; --i)\n        {\n            //Diffuse Intensity\n            vec3 lightVector = lights[i].center.xyz - position;\n            //float lightVectorLength = length(lightVector); //the light vector is needed else where so i define it here\n            //vec3 normalizedLightVector = lightVector/lightVectorLength; //rather than using normalize I use the length previously definde  \n            //optimization\n            float lightVectorLengthSq = lenSq(lightVector); //saves a square root function\n            vec3 normalizedLightVector = lightVector * inversesqrt(lightVectorLengthSq); // multiply by the inverse is more efficent\n                \n            \n            //float diffusionCoefficent = max(0.0, (dot(normal, normalizedLightVector)));\n            //float attenuation = 1.0/ (1.0 + lightVectorLength/lights[i].intensity + squareValue(lightVectorLength)/squareValue(lights[i].intensity));\n            //float diffuseIntensity = max(0.0, (dot(normal, normalizedLightVector))) * 1.0 / (1.0 + lightVectorLength/lights[i].intensity + squareValue(lightVectorLength/lights[i].intensity)); //Simplified so that only one square value function is called\n\t\t\t\n            //optimization\n            float diffuseIntensity = max(0.0, dot(normal, normalizedLightVector)) * //diffusion coefficent\n                \t\t\t\t\t(1.0 - lightVectorLengthSq/squareValue(lights[i].intensity)); //attenuation\n            \n            //Speculator Intensity(Phong Reflectance)\n            /*vec3 viewVector = normalize(rayOrigin.xyz - position);\n            vec3 reflectedLightVector = reflect(-normalizedLightVector, normal);\n            float specCoefficent = max(0.0, dot(viewVector, reflectedLightVector));\n            float highlightExp = 256.0;\n            float specularIntensity = pow(specCoefficent, highlightExp); //Can improve eff*/\n\n            //Blinn-Phong Reflectance\n            //vec3 normalViewVector = normalize(rayOrigin.xyz - position);\n            //vec3 normalHalfWayVector = normalize(normalizedLightVector + normalViewVector);\n            \n            //optimization\n            vec3 viewVector = rayOrigin.xyz - position; //Created because viewVector is used twice\n            vec3 normalViewVector = viewVector * inversesqrt(lenSq(viewVector)); //Multiplied by the inverse and uses the dquared length function\n\t\t\tvec3 halfWayVector = normalizedLightVector + normalViewVector; //Used twice \n            vec3 normalHalfWayVector = halfWayVector * inversesqrt(lenSq(halfWayVector));\n            float specCoefficent = max(0.0, dot(normal, normalHalfWayVector)); //Multiplied by the inverse and uses the dquared length function\n            float specularIntensity = powerOfTwo(specCoefficent, 7); //improved eff by removing pow function and adding a power of two function\n\n            finalColor += (diffuseIntensity * diffuseColor + specularIntensity * specularColor) * lights[i].color;\n    \t}\n        //Final Color calculation\n        vec4 sumOfColors = globalIntensity * globalColor + finalColor;\n        return sumOfColors;\n    }\n    \n\t// BACKGROUND\n    return vec4(.5);\n\tconst vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);\n\treturn vec4(mix(warm, cool, rayDirection.y), 1.0);\n}\n\n\n\n\n\n// mainImage: process the current pixel (exactly one call per pixel)\n//    fragColor: output final color for current pixel\n//    fragCoord: input location of current pixel in image (in pixels)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // viewing plane (viewport) info\n    vec3 viewport;\n    vec2 ndc, uv, resolutionInv;\n    float aspect;\n    const float viewportHeight = 2.0, focalLength = 1.0;\n\n    // ray\n    vec4 rayDirection, rayOrigin;\n\n    // setup\n    fragColor = vec4(0.0);\n    \n    calcViewport(viewport, ndc, uv, aspect, resolutionInv,\n    \t             viewportHeight, focalLength,\n    \t             fragCoord, iResolution.xy);\n    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);\n    \n    fragColor += calcColor(rayDirection, rayOrigin);\n}\n","name":"Image","description":"","type":"image"}]}