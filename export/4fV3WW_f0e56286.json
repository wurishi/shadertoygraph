{"ver":"0.1","info":{"id":"4fV3WW","date":"1712776272","viewed":85,"name":"1. Drawing line between two pts","username":"nitish","description":"Logic credit: https://www.shadertoy.com/view/4ljfRD\n\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 p,vec2 a,vec2 b){  \n    /**\n    Calculate distance between two end point (Dab)\n    Calculate distance between point and start point (Dap),\n    \n    let distance = Dap/Dab;\n    \n    if Point p is on the line, then\n    1. when distance = 0, we will be at point a\n    2. when dispance = 1, we will be at point b\n    \n    We can write above two statement as\n    Eq =  mix(a, b, distance);\n    \n    3. Distance can exceed 1 if point P is beyond B, therefore we have to clamp it\n    \n    Point Q = mix(a, b, clamp(distance, 0, 1));\n    \n    4. Above equation will hold try for any point in space with distance `distance` from A\n    \n    5. To check, if point P  lie on A-B, we will, find distance between P and Q\n    \n    6. When distance (PQ) = 0, then Point Q lie on the line\n    7. As we want to hightlight this point, we can add 1 and to make line thick remove some value\n    \n    8. Now our gradient ranges from 1-thickness to Infinity, we first convert them into discret value\n    using floor\n    \n    9. After than we can ignore any value over 1,\n    \n    10, Now invert the selection (because we remove thickness, desired value floor will be 0)\n    \n    */\n    \n    float Dab=distance(a,b);\n    float Dap=distance(a,p);\n    \n    vec2 coords=mix(a,b,clamp(Dap/Dab,0.,1.));\n    \n    float d=distance(coords,p);\n    \n    d=1.+d;\n    d=d-.01;\n    d=floor(d);\n    d=clamp(d,0.,1.);\n    d=1.-d;\n    \n    return d;\n    \n}\n\nvec4 drawPlan(vec2 uv) {\n    /**\n    1. For xAxis\n        For values < -0.01, output will be 0 [step(-0.01, uv.y)]\n        for values > 0.01, output will be 0 [step(uv.y, .01)]\n        \n        Combining both condition with AND (*)\n        \n        Same for yAxis\n    */\n    float xAxis = step(-0.01, uv.y) * step(uv.y, .01);\n    float yAxis = step(-0.01, uv.x) * step(uv.x, 0.01);\n    \n    return vec4(0.0, 0.0, xAxis + yAxis, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 pointA = vec2(-1. , -.2);\n    vec2 pointB = vec2(1., 0.2);\n\n\n    // Output to screen\n    fragColor = drawPlan(uv) + vec4(1.0) *line(uv,pointA,pointB);\n}","name":"Image","description":"","type":"image"}]}