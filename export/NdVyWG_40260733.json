{"ver":"0.1","info":{"id":"NdVyWG","date":"1655497960","viewed":99,"name":"Interactive game of life (Kugge)","username":"kugge","description":"Simple game of life implementation (Education purposes)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["automata","gameoflife","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    float col = texture(iChannel0, uv).r;\n    if (col == 1.) fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.); // Pretty coloration\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MSIZE 15. // Mouse size\n\nfloat neighbours(vec2 uv) { // Neighbours len 1 no coefficient convolution\n   return texelFetch(iChannel0, ivec2(uv.x + 1., uv.y), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x + 1., uv.y + 1.), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x + 1., uv.y - 1.), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x - 1., uv.y), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x - 1., uv.y + 1.), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x - 1., uv.y - 1.), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x, uv.y - 1.), 0).r\n          + texelFetch(iChannel0, ivec2(uv.x, uv.y + 1.), 0).r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy;\n    float status = texelFetch(iChannel0, ivec2(uv), 0).r;\n    float c = neighbours(uv);           // Apply GoL rules\n    if (c == 3.) status = 1.;           // Born if 3\n    else if (c != 2.) status = 0.;      // Die if not 2/3\n    fragColor = vec4(status, 0, 0, 1.); // Else: Continue\n    if (iMouse.z > 0. && length(uv - iMouse.xy) < MSIZE) fragColor = vec4(1, 0, 0, 1.); // Mouse\n    if (iFrame == 0 && texelFetch(iChannel1, ivec2(uv), 0).r > .5) fragColor = vec4(1., 0., 0., 1.); // Plane initialisation\n}","name":"Buffer A","description":"","type":"buffer"}]}