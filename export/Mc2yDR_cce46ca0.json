{"ver":"0.1","info":{"id":"Mc2yDR","date":"1722202576","viewed":31,"name":"2D SDFs are neat","username":"EldritchEli","description":"squishy... first time i'm messing around with color mixing.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"   float circle(vec2 p, vec2 circlePos, float circleSize) { return length(p - circlePos) - circleSize; }\n   \n   \n   float box(vec2 p,vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0)-0.02;\n}\n\n// pcg3d: https://jcgt.org/published/0009/03/02/paper.pdf\nvec3 hash(vec2 p)\n{\nivec3 v = ivec3(ivec2(floor(100000.0*p)),0.0);\n\nv = v * ivec3(1664525u) +  ivec3(1013904223u);\nv.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;\nv ^= v >> 16u;\nv.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;\nreturn vec3(v);\n}\n\n\n\n    \n\n   \n\n    \n    // cubic polynomial\nvec4 smin( vec4 a, vec4 b, float k )\n{\n    float h = 1.0 - min( abs(a.w-b.w)/(6.0*k), 1.0 );\n    float w = h*h*h;\n    float m = w*0.5;\n    float s = w*k; \n    return (a.w<b.w) ? vec4(vec3(mix(a.xyz,b.xyz,m)),a.w-s) : vec4(vec3(mix(a.xyz,b.xyz,(1.0-m))),b.w-s);\n}\n\n\n\nfloat sphereGrid(vec2 uv, float scale){\n       vec2 v = vec2(0.0,1.0);\n       uv*=scale;\n       vec2 p = fract(uv);\n       vec2 base = vec2(floor(uv));\n       vec3 h00 = hash(base)*0.0000000001;\n       vec3 h01 = hash(base+v.xy)*0.0000000001;\n       vec3 h11 = hash(base + v.yy)*0.0000000001;\n       vec3 h10 = hash(base + v.yx)*0.0000000001;\n       \n   \n   \n       return min(min(circle(p,v.xx+h00.xy,sqrt(h00.z)),circle(p,v.xy+h01.xy,sqrt(h01.z))),\n              min(circle(p,v.yy+h11.xy,sqrt(h11.z)),circle(p,v.yx+h10.xy,sqrt(h10.z))));}\n\n    \n    \n    vec4 map(vec2 p){\n        vec2 circlePos = vec2(0.5,0.25) + 0.2*vec2(sin(iTime),cos(iTime/2.0));\n        vec4 dist = vec4(/*color*/vec3(0.5,0.0,0.5),circle(p,circlePos, abs(0.2*sin(iTime/4.0))));\n        \n        \n        vec4 ring = vec4(/*color*/vec3(0.0,.5,.5),abs(circle(p,vec2(0.0),0.3))-0.03);\n       \n        dist = smin(dist, ring,0.06);\n        vec4 box = vec4(vec3(0.5,0.2,0.2),box(p-vec2(.85+0.1*cos(iTime/8.0),0.4+0.3*sin(iTime/2.0)),vec2(0.1)));\n        \n       dist = smin(dist,box,0.06); \n       vec4 grid = vec4(vec3(0.2), sphereGrid(p+vec2(50.0), 10.0));\n       dist = smin(dist,grid,0.06);\n        \n        return dist;}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y /= ratio;\n\n    \n   \n   \n    vec3 col;\n    vec4 dist = map(uv); \n    \n    if (dist.w <= 0.0){\n        col = dist.xyz;// + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        col+=1.0*pow(-dist.w,0.3);\n        }\n    else {col = vec3(sin(1.0*dist.w));}\n    \n    \n  \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}