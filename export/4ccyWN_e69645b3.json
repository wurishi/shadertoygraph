{"ver":"0.1","info":{"id":"4ccyWN","date":"1730626695","viewed":20,"name":"Trinidad","username":"Secretstar","description":"An immersive 3D shader that fuses three fluid shapes into a unified, harmonious form. The dynamic transitions and smooth blending create a mesmerizing visual effect.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3danimation","fluidshapes","trinityfusion","dynamicblending","smoothtransitions","proceduralshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Funzioni di distanza per le forme 3D\nfloat sdSphere(vec3 p, vec3 center, float radius) {\n    return length(p - center) - radius;\n}\n\n// Funzione per il smooth blending\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n// Struttura per la sfera fluida\nstruct FluidSphere {\n    vec3 pos;\n    vec3 vel;\n    vec3 color;\n    float radius;\n};\n\n// Funzione per aggiornare la posizione della sfera nel tempo\nFluidSphere updateSphere(vec3 initPos, vec3 initVel, vec3 sphereColor, float radius, float time) {\n    FluidSphere sphere;\n    float amplitude = 2.0;\n    sphere.pos = initPos + vec3(amplitude * sin(time * initVel.x), amplitude * 0.5 * sin(time * 1.0 + initVel.y), amplitude * cos(time * initVel.z));\n    sphere.color = sphereColor;\n    sphere.radius = radius;\n    return sphere;\n}\n\n// Funzione principale di distanza\nfloat map(vec3 p) {\n    float time = iTime * 0.5;\n    \n    // Definizione delle sfere fluide\n    FluidSphere sphere1 = updateSphere(vec3(1.0, 0.0, 0.0), vec3(0.6, 1.0, 0.8), vec3(0.3, 0.7, 1.0), 0.8, time);\n    FluidSphere sphere2 = updateSphere(vec3(-1.5, 0.0, 0.5), vec3(0.7, 1.1, 0.6), vec3(1.0, 0.4, 0.3), 0.7, time + 2.0);\n    FluidSphere sphere3 = updateSphere(vec3(0.5, 0.0, -1.0), vec3(0.8, 1.2, 0.7), vec3(0.3, 1.0, 0.5), 0.6, time + 4.0);\n    \n    // Calcola le distanze\n    float d1 = sdSphere(p, sphere1.pos, sphere1.radius);\n    float d2 = sdSphere(p, sphere2.pos, sphere2.radius);\n    float d3 = sdSphere(p, sphere3.pos, sphere3.radius);\n    \n    // Applica smooth blending per il metaball effect\n    float k = 2.0;\n    float d = smin(d1, d2, k);\n    d = smin(d, d3, k);\n    \n    return d;\n}\n\n// Calcolo della normale alla superficie\nvec3 calcNormal(vec3 p) {\n    const float eps = 0.001;\n    vec2 h = vec2(eps, 0.0);\n    return normalize(vec3(\n        map(p + h.xyy) - map(p - h.xyy),\n        map(p + h.yxy) - map(p - h.yxy),\n        map(p + h.yyx) - map(p - h.yyx)\n    ));\n}\n\n// Funzione per combinare i colori basati sulle distanze\nvec3 blendColors(vec3 p) {\n    vec3 color1 = vec3(0.3, 0.7, 1.0); // Blu\n    vec3 color2 = vec3(1.0, 0.4, 0.3); // Rosso\n    vec3 color3 = vec3(0.3, 1.0, 0.5); // Verde\n\n    float d1 = length(p - vec3(1.0, 0.0, 0.0));\n    float d2 = length(p - vec3(-1.5, 0.0, 0.5));\n    float d3 = length(p - vec3(0.5, 0.0, -1.0));\n    \n    float k = 2.0;\n    float total = exp(-d1 * k) + exp(-d2 * k) + exp(-d3 * k);\n    vec3 finalColor = (color1 * exp(-d1 * k) + color2 * exp(-d2 * k) + color3 * exp(-d3 * k)) / total;\n\n    return finalColor;\n}\n\n// Funzione principale\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Posizione della camera e direzione del ray\n    vec3 ro = vec3(0.0, 0.0, -6.0);\n    vec3 rd = normalize(vec3(uv, 1.5));\n    \n    // Ray marching\n    float t = 0.0;\n    float d = 0.0;\n    vec3 p;\n    for(int i = 0; i < 100; i++) {\n        p = ro + rd * t;\n        d = map(p);\n        if(d < 0.001 || t > 20.0) break;\n        t += d * 0.5;\n    }\n    \n    // Colore di sfondo\n    vec3 color = vec3(0.95, 0.95, 0.95); // Quasi bianco per riflettere meglio\n    \n    if(d < 0.001) {\n        vec3 normal = calcNormal(p);\n        vec3 baseColor = blendColors(p);\n\n        // Effetti di illuminazione\n        vec3 lightPos = vec3(2.0 * sin(iTime), 5.0, 3.0 * cos(iTime));\n        vec3 lightDir = normalize(lightPos - p);\n        float diff = max(dot(normal, lightDir), 0.0);\n        \n        // Riflessione ambientale\n        float ambient = 0.2;\n        color = baseColor * (diff + ambient);\n\n        // SpecularitÃ \n        vec3 viewDir = normalize(ro - p);\n        vec3 reflectDir = reflect(-lightDir, normal);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n        color += spec * vec3(1.0);\n\n        // Ombre morbide\n        float shadow = 1.0;\n        for(float i = 0.02; i < 1.0; i += 0.02) {\n            vec3 shadowP = p + normal * i * 0.2;\n            if(map(shadowP) < 0.001) {\n                shadow *= 0.8;\n                break;\n            }\n        }\n        color *= shadow;\n\n        // Aggiunge una leggera rifrazione per un effetto traslucido\n        vec3 refraction = refract(-viewDir, normal, 0.9);\n        color = mix(color, refraction * baseColor * 0.8, 0.2);\n    }\n    \n    // Correzione gamma per migliore resa\n    color = pow(color, vec3(0.4545));\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}