{"ver":"0.1","info":{"id":"ldGBzy","date":"1529302677","viewed":181,"name":"Conway Game of Life","username":"archibate","description":"Conway's Game of Life.\nUse mouse to draw blocks.\n\nIn Buf D, it also allows you to load a RLE format pattern, which can be downloaded from [url]http://www.conwaylife.com/[/url].","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","gameoflife","ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cr = fragCoord / iResolution.xy;\n    fragColor = iTime == 0. ? texture(iChannel1, cr) : texture(iChannel0, cr);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define T(p) texture(iChannel0, p)\n#define IS(x) (x.r != 0.)\n#define IST(p) IS(T(p))\n#define ISTV(dx,dy) IST(coordr + vec2(dx,dy) * dispdr)\n#define ISAT(v) (sqrlength(fragCoord - v) < 0.6)\n\nfloat sqrlength(vec2 v)\n{\n    return dot(v, v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dispdr = vec2(1,1) / iResolution.xy;\n    vec2 coordr = fragCoord * dispdr;\n    \n    int cnt = 0;\n    if ISTV(-1,0) cnt++;\n    if ISTV(+1,0) cnt++;\n    if ISTV(0,-1) cnt++;\n    if ISTV(0,+1) cnt++;\n    if ISTV(-1,-1) cnt++;\n    if ISTV(-1,+1) cnt++;\n    if ISTV(+1,-1) cnt++;\n    if ISTV(+1,+1) cnt++;\n    \n    bool outt = false;\n    if IST(coordr) {\n        if (2 <= cnt && cnt <= 3)\n            outt = true;\n    } else {\n        if (cnt == 3)\n            outt = true;\n    }\n    \n    if (iTime <= 0.1) {\n        outt = IS(texture(iChannel1, coordr));\n    } else if ISAT(iMouse.xy) {\n        outt = !outt;\n    }\n    \n    fragColor = outt ? vec4(1.,1.,1.,1.) : vec4(0.,0.,0.,1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define RANMD .2\n#define ISRAN(x) (mod(x.r, RANMD) < RANMD*.12)\n\n#define CENTER ivec2(iResolution.xy*.5)\n\n#define IBEG (false\n#define I )||J(C,\n#define IEND )\n\nbool J(ivec2 coor, int xtimes, int x, int y)\n{\n    ivec2 dsp = CENTER - coor;\n    if (dsp.y == y) {\n        x = dsp.x - x;\n        if (0 <= x && x < xtimes) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /*if (iTime != 0.)\n        return;*/\n    \n    ivec2 C = ivec2(fragCoord);\n    \n    /* 3 ways to initialize the pattern: */\n    bool outt;\n    \n    /* 1. converted RLE pattern HERE!!!!!!\n     * Compile rle2shadertoy.c. And use the command line: rle2shadertoy.exe YOURFILE.rle\n     * It will convert YOURFILE.rle into an output file named rle2shadertoy.txt.\n     * Then, copy the context in rle2shadertoy.txt to the following region.\n     */\n\toutt = (IBEG\n        \tI 1,1,0 I 1,1,1 I 1,1,2 I 1,5,3 I 3,1,4 I 1,6,4 I 1,0,5 I 1,5,5 I 1,0,6 I 1,4,6\n            I 3,1,7 I 2,15,8 I 2,13,9 I 1,17,9 I 1,0,10 I 1,2,10 I 2,13,10 I 1,18,10\n            I 1,0,11 I 1,2,11 I 2,13,11 I 1,0,12 I 1,2,12 I 1,0,13 I 1,2,13 I 1,20,13\n            I 2,1,14 I 1,17,14 I 1,22,17 I 1,25,17 I 1,26,18 I 1,22,19 I 2,33,19 I 1,26,20\n            I 2,33,20 I 4,22,21 I 1,21,22 I 2,22,23 I 1,23,24 I 2,41,27 I 2,41,28 I 2,13,31\n            I 2,13,32 I 2,36,37 I 3,36,38 I 2,48,38 I 1,37,39 I 1,48,39 I 1,50,39 I 1,49,40\n            I 1,33,41 I 1,27,42 I 1,33,42 I 1,26,43 I 1,28,43 I 3,40,43 I 1,26,44 I 1,29,44\n            I 1,39,44 I 2,41,44 I 2,16,45 I 2,27,45 I 2,39,45 I 1,15,46 I 1,18,46 I 2,15,47\n            I 2,18,47 I 1,18,48 I 1,20,48 I 2,20,49 I 1,17,50 I 1,21,50 I 1,17,51 I 1,20,51\n            I 2,65,51 I 3,18,52 I 2,65,52 I 1,54,55 I 1,53,56 I 1,55,56 I 1,40,57 I 2,53,57\n            I 1,39,58 I 1,41,58 I 2,39,59 // glider-producing-switchengine.rle\n    \tIEND);\n    \n    /* 2. random pattern */\n    //outt = ISRAN(texture(iChannel0, fragCoord / iResolution.xy));\n    \n    /* 3. clean screen, draw by mouse */\n    //outt = false;\n    \n\t/* Then, Enjoy it! */\n\t\n    fragColor = outt ? vec4(1.,1.,1.,1.) : vec4(0.,0.,0.,1.);\n}\n\n/* This is rle2shadertoy.c, converting RLE format to Shadertoy!!!!!!\n#include <stdio.h>\n#include <string.h>\n\nstatic char fntab[26];\n\nint loadsub_RLE(FILE *fp, FILE *of)\n{\n\tint w=0, h=0, i=0, j=0, cnt=0, ch;\n\twhile ((ch = fgetc(fp)) == '#') {\n\t\tch = fgetc(fp);\n\t\twhile (fgetc(fp) != '\\n');\n\t}\n\tif (ch != 'x')\n\t\treturn 0;\n\tfscanf(fp, \" = %d, y = %d\", &w, &h);\n\twhile (fgetc(fp) != '\\n');\n\twhile(!feof(fp)) {\n\t\tch = fgetc(fp);\n\t\tif ('0' <= ch && ch <= '9') {\n\t\t\tcnt *= 10;\n\t\t\tcnt += ch - '0';\n\t\t} else {\n\t\t\tif (cnt == 0)\n\t\t\t\tcnt = 1;\n\t\t\tif (ch >= 'a' && ch <= 'z') {\n \t\t\t\tch -= 'a';\n\t\t\t \t\tchar fn = fntab[ch];\n\t\t\t \t\tif (fn)\n\t\t\t\t \t\tfprintf(of, \"%c %d,%d,%d \", fn, cnt, i, j);\n\t\t\t\t\ti += cnt;\n\t\t\t}\n\t\t\telse if (ch == '$')\n\t\t\t\ti=0, j+=cnt;\n\t\t\telse if (ch == '!')\n\t\t\t\tbreak;\n\t\t\tcnt = 0;\n\t\t}\n\t}\n\treturn 1;\n}\n\nvoid init_fntab(void)\n{\n\tmemset(fntab, 0, sizeof(fntab));\n\tfntab['o' - 'a'] = 'I';\n}\n\nint main(int argc, char **argv)\n{\n\tFILE *fp = fopen(argv[1], \"r+\");\n\tFILE *of = fopen(\"rle2shadertoy.txt\", \"w+\");\n\tinit_fntab();\n\tloadsub_RLE(fp, of);\n}\n*/","name":"Buf D","description":"","type":"buffer"}]}