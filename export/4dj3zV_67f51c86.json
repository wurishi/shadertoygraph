{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define PI \t\t\t\t\t3.14159265359\n#define METABALLS \t\t\t7\n#define METABALLS_TRESHOLD \t1.0\n\nvec2 V;\n#define rot(a) mat2( V= sin(vec2(1.57, 0) + a), -V.y, V.x)\n\n#define HASHSCALE1 .1031\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec4 balls[METABALLS];\n\nfloat blerp(float x, float y0, float y1, float y2, float y3) {\n\tfloat a = y3 - y2 - y0 + y1;\n\tfloat b = y0 - y1 - a;\n\tfloat c = y2 - y0;\n\tfloat d = y1;\n\treturn a * x * x * x + b * x * x + c * x + d;\n}\n\nfloat perlin(float x, float h) {\n\tfloat a = floor(x);\n\treturn blerp(mod(x, 1.0),\n\t\thash12(vec2(a-1.0, h)), hash12(vec2(a-0.0, h)),\n\t\thash12(vec2(a+1.0, h)), hash12(vec2(a+2.0, h)));\n}\n\nfloat metaballs(vec3 p) {\n\tfloat value = 0.0;\n\tfor (int i = 0 ; i < METABALLS ; i++) {\n\t\tvec3 temp = p - (balls[i].xyz);\n\t\tvalue += (balls[i].w) / dot(temp, temp);\n\t}\n\treturn METABALLS_TRESHOLD - value;\n}\n\nvec3 gradient(vec3 p) {\n\t//analytical gradient (metaballs only)\n\tvec3 value = vec3(0.0);\n\tfor (int i = 0 ; i < METABALLS ; i++) {\n\t\tvec3 a = p - (balls[i].xyz);\n\t\tfloat b = dot(a, a);\n\t\tvalue += 2.0*(balls[i].w)*(a/(b*b));\n\t}\n\treturn value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n\t// update balls\n\tfor (int i = 0 ; i < METABALLS ; i++) {\n\t\tfloat h = float(i)*float(METABALLS);\n\t\tfloat size = float(i*i)*0.3 + 1.0;\n\t\tfloat x    = perlin(iTime*1.412/size, h+1.0)*15.0-7.5;\n\t\tfloat y    = perlin(iTime*1.641/size, h+2.0)*15.0-7.5;\n\t\tfloat z    = perlin(iTime*1.293/size, h+3.0)*12.0-6.0;\n\t\tballs[i] = vec4(x, y, z, size);\n\t}\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.y *= iResolution.y / iResolution.x;\n\t\n\tvec3 from = vec3(-20, 0, 0);\n\tvec3 dir = normalize(vec3(uv * 1.1, 1.0));\n\tdir.xz *= rot(PI*.5);\n    \n    vec2 rotv = vec2(0);\n    if (iMouse.z > 0.0) {\n        rotv = vec2((iMouse.xy - iResolution.xy*0.5)*0.01);\n    } else {\n        rotv = vec2(iTime*0.1, sin(iTime*0.3)*0.2);\n    }\n    \n    mat2 rot1 = rot(rotv.x);\n    mat2 rot2 = rot(-rotv.y);\n    dir.xy *= rot2;\n    from.xy *= rot2;\n    dir.xz *= rot1;\n    from.xz *= rot1;\n    \n\tbool set = false;\n\tfloat totdist = 0.0;\n    totdist += metaballs(from)*hash12(fragCoord.xy);\n\tfor (int i = 0 ; i < 50 ; i++) {\n\t\tif (set) continue;\n        vec3 p = from + totdist * dir;\n        float dist = metaballs(p)*2.0;\n        totdist += max(0.05, dist);\n        if (dist < 0.01) {\n            set = true;\n        }\n\t}\n    \n    vec3 color = vec3(0);\n    \n    if (set) {\n        vec3 p = from + totdist * dir;\n        vec3 norm = normalize(gradient(p));\n        color = texture(iChannel1, reflect(dir, norm)).rgb;\n        dir = reflect(dir, norm);\n    } else {\n        color = texture(iChannel0, dir).rgb;\n    }\n    \n    \n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dj3zV","date":"1391056446","viewed":3251,"name":"Chrome Metaballs","username":"Klems","description":"Raymarched chromed metaballs... Drag the mouse to rotate the camera.","likes":55,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","metaballs","cubemap","chrome"],"hasliked":0,"parentid":"","parentname":""}}