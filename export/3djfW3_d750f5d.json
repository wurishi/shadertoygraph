{"ver":"0.1","info":{"id":"3djfW3","date":"1591043344","viewed":93,"name":"Laughing Emoji","username":"francesco","description":"learning shaping in shadertoy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","smile","emoji","laugh","tears"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I have been following The Art Of Code tutorial and trying to create my own emoji\n// in shadertoy <3\n// Link to tutorial: https://www.youtube.com/watch?v=ZlNnrpM0TRg\n// ref img: https://s3.amazonaws.com/media.mediapost.com/dam/cropped/2017/11/24/laughingemoji-560.JPEG\n\n#define S(a,b,t) smoothstep(a,b,t)\n#define sat(x) clamp(x, 0., 1.)\n\nfloat remap01(float a, float b, float t) {\n\treturn sat((t-a)/(b-a));\n}\nfloat remap(float a, float b, float c, float d, float t) {\n    return sat(((t-a)/(b-a)) * (d-c)+c);\n}\n\nvec2 within(vec2 uv, vec4 rect) {\n\treturn (uv-rect.xy) / (rect.zw-rect.xy);\n}\n\nfloat Band (float t, float start, float end, float blur){\n\tfloat step1 = S(start-blur, start+blur, t);\n    float step2 = S(end+blur, end-blur, t);\n    return step1*step2;\n}\n\nfloat Rect (vec2 uv, float left, float right, float bottom, float top, float blur){\n\tfloat r1 = Band(uv.x, left, right, blur);\n    float r2 = Band(uv.y, bottom, top, blur);\n    return r1*r2;\n}\n\nvec4 Head (vec2 uv) {\n    \n    // Main head circle\n    float d = length(uv);\n    vec4 col = vec4(1.,.75,.1, 1.);\n    col.a = S(.5, .49, d);\n    \n    // Edge shade\n    float edgeShadow = remap01(.4, .5, d);\n    edgeShadow *= edgeShadow;\n    col.rgb -= edgeShadow*.5;\n    \n    // Edge border\n    col.rgb = mix(col.rgb, vec3(.6, .3, .2), S(.47, .48, d));\n    \n    // Highlight\n    float highlight = S(.43, .42, d);\n    highlight *= remap(.4, -.1, .7, .1, uv.y);\n    \n    \n    col.rgb=mix(col.rgb, vec3(1.), highlight);\n    \n    return col;\n}\n\nvec4 Eyes (vec2 uv) {\n    uv -= .5;\n    uv.y += pow(uv.x, 2.)*3.;\n    uv.y += 1.5;\n    //uv.y += uv.x*mix(.5, .8, sin(.5)*.5+.5)-mix(.1, .3, sin(.5)*.5+.5); for brows\n    \n    float d = length(uv);\n    vec4 col = vec4(.4, .2, .2, 1.);\n    \n    float eyeShade = S(.1, .7, d)*.5;\n    eyeShade*=remap(.4,-.1,.1,.7,uv.y);\n    col.rgb = mix(col.rgb, vec3(.9, .7, .7), eyeShade);\n    \n    float eyeOutline = S(.35, .5, d);\n    eyeOutline *= remap(.3, -.1, .5, .1, -uv.y);\n    col.rgb = mix(col.rgb,vec3(.8,.7,0.), eyeOutline);\n    \n \t\n    col.a=S(.5, .46, d);\n    \n    return col;\n}\n\nvec4 Mouth (vec2 uv) {\n    uv -= .5;\n\tuv.y -= pow(uv.x, 1.8);\n    float d = length(uv);\n    \n    vec4 col = vec4(.3, .2, .2, 1.);\n    col.a = S(0.5, 0.49, d); // mouth\n    \n    float highlight = S(0.5, .42, d);\n    highlight *= remap(.2, -.1, .6, .3, -uv.y);\n    col.rgb = mix(col.rgb, vec3(.8, .3, .3), highlight); // adding shade inside mouth\n    \n\tuv.y += pow(uv.x, 2.)*0.5;\n    float teeth = Rect(uv, -.2, .5, .2, .5, 0.01);\n    col.rgb=mix(col.rgb, vec3(1.), teeth); // adding teeth\n    \n    float mouthShadow = remap01(.3, .6, d); // mouth shadow\n    mouthShadow *= mouthShadow;\n    col.rgb -= mouthShadow*.5;\n    \n    return col;\n}\n\nvec4 Tears (vec2 uv) {\n    \n    // Rotate tear\n    float angle = radians(45.0);  \n    mat2 zRotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    \n    uv-=.5;\n    uv = zRotation * uv;\n    if(uv.y > 0.) uv.y /= -abs(uv.x)+1.7; else uv.y; // make circle shaped as a tear\n    \n    float d = length(uv);\n\tvec4 col = vec4(0., .6, .9, 1.);\n    col.a = S(0.5, 0.49, d); // tear\n    \n    // tears border\n    col.rgb = mix(col.rgb, vec3(0., .5, .8), S(.4, .46, d));\n    \n    //highlight\n    float highlight = S(.43, .42, d);\n    highlight *= remap(.3, -.1, .7, .1, uv.y);\n    highlight = pow(highlight, 2.5);\n    \n    col.rgb = mix(col.rgb, vec3(1.), highlight);\n    \n    return col;\n}\n\nvec4 Brows (vec2 uv) {uv -= .5;\n    uv.y += pow(uv.x, 2.)*3.;\n    uv.y += 1.;\n                  \n    uv.y += uv.x*mix(.7, .9, sin(.4)*10.+1.)-mix(.1, .3, sin(.4)*10.+1.);\n    \n    float d = length(uv);\n    vec4 col = vec4(.4, .2, .2, 1.);\n    \n    float eyeShade = S(.1, .7, d)*.5;\n    eyeShade*=remap(.4,-.1,.1,.7,uv.y);\n    col.rgb = mix(col.rgb, vec3(.9, .7, .7), eyeShade);\n    \n    float eyeOutline = S(.35, .5, d);\n    eyeOutline *= remap(.3, -.1, .5, .1, -uv.y);\n    col.rgb = mix(col.rgb,vec3(.8,.7,0.), eyeOutline);\n    \n \t\n    col.a=S(.5, .46, d);\n    \n    return col;\n}\n\nvec4 Emoji (vec2 uv) {\n\tvec4 col = vec4(1.);\n    uv.x = abs(uv.x); // Mirror stuff\n    vec4 head = Head(uv);\n    vec4 eyes = Eyes(within(uv, vec4(.05, .13, .3, .2)));\n    vec4 brows = Brows(within(uv, vec4(.16, .13, .4, .2)));\n    vec4 mouth = Mouth(within(uv, vec4(-.3, -.4, .3, -.1)));\n    vec4 tears = Tears(within(uv, vec4(.21, -.25, .4, -.05)));\n    col = mix(col, head, head.a);\n    col = mix(col, eyes, eyes.a);\n    col = mix(col, brows, brows.a);\n    col = mix(col, mouth, mouth.a);\n    col = mix(col, tears, tears.a);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    \n    vec4 emoji = Emoji(uv);\n\n    fragColor = emoji;\n}","name":"Image","description":"","type":"image"}]}