{"ver":"0.1","info":{"id":"DtscRB","date":"1690894280","viewed":271,"name":"Cosmic knot","username":"ChunderFPV","description":"It's simpler then it looks.  Points flow along XYZ grid lines.  The xy coords are transformed into log spirals.  The curves that light up are the denominator & multiples of t.  See Fraction study 2: same general thing happening here but fancier.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["spiral","warp","point","transform","log","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define QP(v) P(u.v, l, t, R.y/8e2) * .7  // quick points\n\n// points: xy, overlap, value, size\nfloat P(vec2 u, float l, float t, float r)\n{\n    float i = 0., f = i, c = i;\n    vec2 w = fwidth(u), p;\n    for (; i++<l;)\n    {\n        p.x = round((u.x-i)/l)*l+i; // skip i rows\n        f = mod(trunc(p.x)*t, 1.);  // multiply ints with value\n        p.y = round(u.y-f)+f;       // set as y\n        c = max(c, r/length((u-p)/w));\n    }\n    c /= sqrt(max(1., min(abs(u.x), abs(u.y)))); // darken\n    return c;\n}\n\n// grid: xy, value, scale\nfloat G(vec2 u, float t, float s)\n{\n    vec2 l, g, v;\n    l = max(vec2(0), 1.-abs(fract(u+.5)-.5)/fwidth(u)/1.5); // lines\n    g = 1.-abs(sin(3.1416*u)); // glow\n    v = (l + g*.5) * max(vec2(0), 1.-abs(sin(3.1416*round(u)*t))*s); // blend\n    return v.x+v.y;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float t = .1+iTime/120.,\n          pi_2 = 1.5708,\n          pi = 3.1416,\n          pi2 = 6.2832,\n          s = 2.+cos(t*pi2), // scale\n          l = 10.; // overlap loop (detail)\n    vec2 h = vec2(2., -3.), // spiral arms\n         R = iResolution.xy,\n         m = (iMouse.xy-.5*R)/R.y*4.;\n    vec3 u = normalize(vec3((U-.5*R)/R.y, 1))*s,\n         c = vec3(.1);\n    if (iMouse.z < 1.) m = 4.*cos(t*pi-vec2(0, pi_2)); // circle movement\n    u.xy *= mat2(cos(cos(t*pi2)*pi_2-vec4(0, -pi_2, pi_2, 0))); // rotate\n    u.xy = tan(log(length(u.xy)) - atan(u.y, u.x)*h/2.) + m*10.; // log transform\n    u.z = max(u.x/u.y, u.y/u.x); // quotient transform\n    c += QP(xy) + QP(yx) + QP(yz) + QP(zy) + QP(zx) + QP(xz); // points\n    c += G(u.xy, t, s) * .2; // grid\n    c += (cos(radians(vec3(-30, 60, 120))+(u.z+t)*pi2)*.5+.5) * c;  // color\n    c *= pow(c, vec3(cos(t*pi2*2.)*.2+.3)); // oscillate contrast\n    C = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}