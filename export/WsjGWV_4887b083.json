{"ver":"0.1","info":{"id":"WsjGWV","date":"1550019363","viewed":130,"name":"Tommy Oiseau","username":"cbrpnk","description":"Everyday.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI    3.1415926535\n#define TWOPI 2.*PI\n#define HPI   PI/2.\n#define QPI   PI/4.\n\nmat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat merge(float a, float b, float c)\n{\n\tfloat k = min(1., max(0., (b-a)/c + .5));\n    return ((k*a) + (1.-k)*b) - ((1.-k) * k * .3);\n}\n\nfloat caps(vec3 p, float r, float l)\n{\n    return length(p-vec3(0., clamp(p.y, -l, l), 0.)) - r;\n}\n\nfloat torus(vec3 p, float r, float w)\n{\n    return sqrt(pow(length(p.xz)-r, 2.) + pow(p.y, 2.)) - w;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat map(vec3 p)\n{\n    float speed = 6.;\n    \n    float body = caps(vec3(p.x, p.y+sin(iTime*speed)*.2, p.z), 1., .5);\n    float legs = caps(vec3(abs(p.x)-.4, p.y+1.5+clamp(cos(iTime*speed+PI), -1., 0.)*.15, p.z), .2, .2);\n    float belly = sphere(vec3(p.x, p.y+.6+cos(iTime*speed+PI)*.1, p.z), 1.);\n    \n    // Arm\n    vec3 ap = p;\n    ap.x = abs(ap.x);\n    ap.xy *= rot(.6+sin(iTime*speed+QPI)*.07);\n    float arms = caps(ap-vec3(.7, -.9, 0.), .1, .2);\n    \n    // Mouth\n    float oMouth = torus(p.xzy-vec3(.0, 1., -sin(iTime*speed)*.2), .2, .1);\n    float cMouth = caps(p.yxz-vec3(-sin(iTime*speed)*.2, 0., 1.), .1, .15);\n    cMouth = min(cMouth, caps(p.yxz-vec3(-sin(iTime*speed)*.2+.1, 0., 1.), .1, .15));\n    float mouth = mix(cMouth, oMouth, smoothstep(.9, 1., sin(iTime*speed)));\n    \n    // Eyes\n    float eyes = sphere(vec3(abs(p.x)-.6, p.y-.25+sin(iTime*speed)*.2, p.z-.75), .12-smoothstep(.99, 1., sin(iTime*2.))*.1);\n    return min(min(merge(merge(merge(body, legs, .5), belly, .6), arms, .5), mouth), eyes);\n\t//return flo;\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for(int i=0; i<128; ++i) {\n    \tfloat d = map(ro+rd*t);\n        if(d < .001) break;\n        if(t > 1000.) return -1.;\n        t += d;\n    }\n    return t;\n}\n\nfloat sss(vec3 ro, vec3 rd)\n{\n    float t = .0;\n    for(int i=0; i<10; ++i)\n    {\n        vec3 p = ro+rd*.12*float(i);\n        float d = map(p);\n        t += d;\n    }\n    return max(0., t);\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(vec3(\n    \tmap(p+eps.xyy) - map(p-eps.xyy),\n        map(p+eps.yxy) - map(p-eps.yxy),\n        map(p+eps.yyx) - map(p-eps.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 eye = vec3(0., 0., 5.);\n    vec3 dir = normalize(vec3(uv.x, uv.y, -1.));\n    float d = march(eye, dir);\n    vec3 p = eye+dir*d;\n    vec3 col;\n    \n    if(d < 0.) {\n        col = vec3(.02);\n    } else {\n    \tvec3 normal = getNormal(p);\n        float s = sss(p, dir);\n        col = .5*vec3(1., 1., 0.);\n    \tcol += .4 * vec3(.8, .8, 1.) * max(0., dot(normal, vec3(1., 1., 1.)));\n        col += .3 * vec3(1., .6, .9) * max(0., dot(normal, vec3(-1., 1., 1.)));\n        col *= .4*col + 1.-max(0., dot(normal, vec3(0., 0., 1.)));\n        col += .1*pow(col + max(0., dot(normal, vec3(1., 0., 1.))), vec3(2.));\n        col = pow(col, vec3(3.));\n        col += .04*vec3(1., .2, 0.)*vec3(s);\n    }\n\n    // Output to screen\n    col *= 1.-length(uv);\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}