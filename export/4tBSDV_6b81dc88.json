{"ver":"0.1","info":{"id":"4tBSDV","date":"1446518332","viewed":650,"name":"Depth Of Field Experiment","username":"jackdavenport","description":"A test of a depth of field raytracer.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rays","dof","camera","focus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"struct Ray {\nvec3 ori;\nvec3 dir;\n};\nstruct RaycastHit {\nvec3 p;\nvec3 n;\nint id;\n};\n\nRaycastHit intersectSphere(vec3 position, float radius, const Ray ray) {\n    \n\tfloat a = dot(ray.dir, ray.dir);\n    float b = 2. * dot(ray.dir, ray.ori - position);\n    float c = dot(ray.ori - position, ray.ori - position) -(radius * radius);\n    float det = (b * b) - 4. * a * c;\n\n\tfloat lambda = (-b -sqrt(det)) / (2. * a);\n\tvec3 p = ray.ori + lambda * ray.dir;\n\tvec3 n = p - position;\n    \n    return RaycastHit(p,normalize(n),(det >= 0. && lambda >= 0.) ? 0 : -1);\n        \n}\n\nRaycastHit intersectScene(Ray ray) {\n \n    RaycastHit hit = RaycastHit(vec3(1./0.),vec3(0.),-1);\n    \n    for(int i = 0; i < 4; i++) {\n     \n        vec3 p = vec3(-.9 + float(i)*1.05,0.,float(i)/1.5);\n        RaycastHit sph = intersectSphere(p, .6, ray);\n        \n        if(distance(sph.p, ray.ori) < distance(hit.p, ray.ori)) {\n         \n            hit = sph;\n            \n        }\n        \n    }\n    \n    return hit;\n    \n}\n\nvec3 shade(Ray ray) {\n \n    RaycastHit scene = intersectScene(ray);\n    \n    if(scene.id == 0) {\n     \n        vec2 uv = scene.n.xy;\n        uv = asin(uv) / 3.14159 * .5;\n        \n        vec3 sun = normalize(vec3(45.,50.,-46.));\n        float diff = .2 + max(dot(sun,scene.n), 0.);\n        \n        vec3 rd = normalize(reflect(ray.dir, scene.n));\n        float spec = pow(max(dot(rd,sun), 0.), 15.);\n        \n        return texture(iChannel0, uv).xyz * diff + spec;\n        \n    }\n    \n    return mix(vec3(.2,.2,.8),vec3(.6,.6,.8),pow(ray.dir.y + .5,.7));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy / 2.) / iResolution.y;\n    \n    vec3 ori = vec3(0.,0.,-2.);\n    vec3 dir = vec3(uv, 1.);\n    \n    const int iter = 16;\n    vec3 result = vec3(0.);\n    \n    for(int i = 0; i < iter; i++) {\n     \n        // Thnx mu6k!\n        float fi = float(i)/float(iter)*2.*355.0/113.0;\n        vec2 nn = vec2(cos(float(fi)), sin(float(fi)));\n        vec3 offs = vec3(nn.x,nn.y, .0)*.03;\n        result += shade(Ray(ori-offs*2.2,dir+offs));\n        \n    }\n    \n    fragColor = vec4(result / float(iter),1.);\n}","name":"","description":"","type":"image"}]}