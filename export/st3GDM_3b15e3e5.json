{"ver":"0.1","info":{"id":"st3GDM","date":"1636612370","viewed":491,"name":"TestWFC","username":"qubailiang00","description":"TestWFC hang in the air!!   (Actually, I didn't finish it)\nPlease go here to watch the full version.\nhttps://www.shadertoy.com/view/sdjcDy","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["wfc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define _sizeX 20.0\n#define _sizeY 3.0\n#define _sizeZ 20.0\n\nstruct MData\n{\n\tfloat d;\n    vec3 albedo;\n    float metalness;\n    float roughness;\n};\n\nfloat opUn(float d1, float d2) {  return min(d1, d2); }\n\nfloat opSub(float d1, float d2) { return max(d1, -d2); }\n\nfloat opInter(float d1, float d2) { return max(d1, d2); }\n\nmat2 rot(float a) {\n    \n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sBx(vec3 p0, vec3 b) {\n\n    vec3 d = abs(p0) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sCCyl(vec3 p, float r, float h) {\n\n    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nvec2 boxIntersection(in vec3 ro, in vec3 rd, in vec3 rad) {\n\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n\t\n    if(tN > tF || tF < 0.0) return vec2(-1.0); \n    \n    //oN = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    return vec2(tN, tF);\n}\n\nMData setMatPr(float d, vec3 albedo, float metalness, float roughness) {\n\n    MData mData;\n    mData.d = d;\n    mData.albedo = albedo;\n    mData.metalness = metalness;\n    mData.roughness = roughness;\n    return mData;\n}\n\nfloat obtainIConfiguration(vec3 p){\n\n    p.y += 0.5;\n    float f = sBx(p, vec3(0.3, 0.05, 0.5));\n    f = opUn(f, sBx(p - vec3(0.25, 0.18, 0.0), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(-0.25, 0.18, 0.0), vec3(0.025, 0.15, 0.025)));\n\n    for(float i = 1.0; i < 2.5; i += 1.0){\n\n        f = opUn(f, sBx(p - vec3(0.25, 0.18, -0.2 * i), vec3(0.025, 0.15, 0.025)));\n        f = opUn(f, sBx(p - vec3(-0.25, 0.18, -0.2 * i), vec3(0.025, 0.15, 0.025)));\n        f = opUn(f, sBx(p - vec3(-0.25, 0.18, 0.2 * i), vec3(0.025, 0.15, 0.025)));\n        f = opUn(f, sBx(p - vec3(0.25, 0.18, 0.2 * i), vec3(0.025, 0.15, 0.025)));\n    }\n    return f;\n}\n\nfloat gate(vec3 p){\n\n    vec3 p0 = p;\n    float f = sBx(p - vec3(0.0, 0.25, 0.0), vec3(0.3, 0.25, 0.3));\n    p0.yz = rot(3.1416 / 2.0) * p.yz;\n    f = opSub(f, sCCyl(p0 - vec3(0.0, 0.0, 0.25), 0.2, 0.4));\n    p0.xy = rot(3.1416 / 2.0) * p.xz;\n    f = opSub(f, sCCyl(p0 - vec3(0.0, 0.0, 0.25), 0.2, 0.4));\n    return f;\n}\n\nfloat obtainIGateConfiguration(vec3 p){\n\n    p.y += 0.5;\n    vec3 p0 = p;\n    float f = sBx(p, vec3(0.3, 0.05, 0.5));\n    f = opUn(f, gate(p));\n\n    // f = opUn(f, sBx(p - vec3(0.0, 0.25, 0.0), vec3(0.3, 0.25, 0.3)));\n    // p0.yz = rot(3.1416 / 2.0) * p.yz;\n    // f = opSub(f, sCCyl(p0 - vec3(0.0, 0.0, 0.25), 0.2, 0.4));\n    // p0.xy = rot(3.1416 / 2.0) * p.xz;\n    // f = opSub(f, sCCyl(p0 - vec3(0.0, 0.0, 0.25), 0.2, 0.4));\n    return f;\n}\n\nfloat obtainLConfiguration(vec3 p){\n\n    p.xz = rot(3.1416 * 1.5) * p.xz;\n    p.y += 0.5;\n    vec3 p0 = p;\n    p0.z += 0.1;\n    float f = sBx(p0, vec3(0.3, 0.05, 0.4));\n    p0.xz = rot(3.1416 / 2.0) * p.xz;\n    f = opUn(f, sBx(p0 - vec3(0.0, 0.0, -0.1), vec3(0.3, 0.05, 0.4)));\n    f = opUn(f, sBx(p - vec3(0.25, 0.18, 0.25), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(0.05, 0.18, 0.25), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(-0.15, 0.18, 0.25), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(-0.35, 0.18, 0.25), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(0.25, 0.18, 0.05), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(0.25, 0.18, -0.15), vec3(0.025, 0.15, 0.025)));\n    f = opUn(f, sBx(p - vec3(0.25, 0.18, -0.35), vec3(0.025, 0.15, 0.025)));\n    return f;\n}\n\nfloat obtainLGateConfiguration(vec3 p){\n\n    p.xz = rot(3.1416 * 1.5) * p.xz;\n    p.y += 0.5;\n    vec3 p0 = p;\n    p0.z += 0.1;\n    float f = sBx(p0, vec3(0.3, 0.05, 0.4));\n    p0.xz = rot(3.1416 / 2.0) * p.xz;\n    f = opUn(f, sBx(p0 - vec3(0.0, 0.0, -0.1), vec3(0.3, 0.05, 0.4)));\n    f = opUn(f, gate(p));\n    return f;\n}\n\nfloat obtainTConfiguration(vec3 p){\n\n    vec3 p0 = p;\n    p0.y += 0.5;\n\n    p0.z += 0.1;\n    float f = sBx(p0, vec3(0.3, 0.05, 0.4));\n    p0.xz = rot(3.1416 / 2.0) * p.xz;\n    f = opUn(f, sBx(p0, vec3(0.3, 0.05, 0.5)));\n    return f;\n}\n\nfloat obtainStairsConfiguration(vec3 p){\n\n    p.z = -p.z;\n    p.y -= 0.5;\n    float f = sBx(p - vec3(0.0, 0.0, -0.45), vec3(0.3, 0.05, 0.05));\n    for(float i = 1.0; i < 9.5; i += 1.0)\n    f = opUn(f, sBx(p - vec3(0.0, 0.1 * i, -0.45 + i * 0.1), vec3(0.3, 0.05, 0.05)));\n    return f;\n}\n\nfloat obtainStairsConfiguration2(vec3 p){\n\n    p.z = -p.z;\n    p.y -= 0.5;\n    float f = sBx(p - vec3(0.0, 0.0, -0.45), vec3(0.3, 0.05, 0.05));\n    for(float i = 1.0; i < 9.5; i += 1.0)\n    f = opUn(f, sBx(p - vec3(0.15, 0.1 * i, -0.45 + i * 0.1), vec3(0.15, 0.05, 0.05)));\n    f = opUn(f, sBx(p - vec3(-0.15, -0.95, 0.0), vec3(0.15, 0.05, 0.5)));\n    return f;\n}\n\n// float Do(vec3 ro, vec3 rd, vec3 p, float d, int x, int y, int z, float t){\n\n//     vec2 v = boxIntersection(ro - vec3(x, y, z), rd, vec3(0.52, 0.52, 0.52));\n//     //if(v.y > t) return opUn(d, obtainTConfiguration(p - vec3(x, y, z)));\n//     return 10000.0;\n// }\n\nint imod(int x, int y) {\n\n    int i = x / y;\n    return x - i * y;\n}\n\nfloat sw(float i, float f, vec3 tp, vec3 et){\n\n    if(i > 5.5) f = opUn(f, obtainTConfiguration(tp - et)); //obtainTConfiguration(tp.xyz);//opUn(mData0.d, obtainTConfiguration(tp.xyz)); \n    else if(i > 4.5) f = opUn(f, obtainStairsConfiguration2(tp - et));\n    else if(i > 3.5) f = opUn(f, obtainStairsConfiguration(tp - et));\n    else if(i > 2.5) f = opUn(f, obtainLGateConfiguration(tp - et)); \n    else if(i > 1.5) f = opUn(f, obtainLConfiguration(tp - et)); \n    else if(i > 0.5) f = opUn(f, obtainIGateConfiguration(tp - et)); \n    else f = opUn(f, obtainIConfiguration(tp - et)); \n    return f;\n}\n\nfloat drw(vec3 ro, vec3 rd, float t, float time, vec3 p0) {\n\n    ivec4 m1[324] = ivec4[](ivec4(3, 0, 18, 19), ivec4(3, 1, 18, 23), ivec4(3, 2, 18, 31), ivec4(4, 1, 18, 25), ivec4(4, 0, 18, 9), ivec4(4, 1, 19, 27), ivec4(4, 0, 17, 0), ivec4(4, 1, 17, 0), ivec4(2, 1, 18, 1), ivec4(2, 2, 18, 1), ivec4(4, 1, 16, 15), ivec4(4, 0, 16, 15), ivec4(5, 1, 16, 10), ivec4(5, 0, 16, 14), ivec4(5, 1, 17, 8), ivec4(5, 0, 17, 8), ivec4(6, 0, 17, 5), ivec4(6, 1, 17, 17), ivec4(6, 2, 17, 29), ivec4(1, 1, 18, 1), ivec4(1, 2, 18, 1), ivec4(5, 1, 19, 25), ivec4(5, 1, 18, 11), ivec4(6, 1, 18, 3), ivec4(0, 1, 18, 27), ivec4(0, 2, 18, 11), ivec4(7, 1, 18, 7), ivec4(7, 2, 17, 7), ivec4(0, 1, 17, 11), ivec4(1, 1, 17, 13), ivec4(8, 1, 18, 3), ivec4(7, 0, 17, 17), ivec4(0, 1, 19, 2), ivec4(0, 2, 19, 2), ivec4(1, 1, 16, 6), ivec4(1, 1, 15, 10), ivec4(0, 1, 15, 24), ivec4(9, 1, 18, 31), ivec4(9, 0, 18, 19), ivec4(8, 2, 17, 9), ivec4(0, 1, 14, 14), ivec4(8, 2, 16, 2), ivec4(8, 2, 15, 14), ivec4(10, 0, 18, 26), ivec4(10, 0, 19, 24), ivec4(9, 0, 19, 11), ivec4(7, 2, 15, 7), ivec4(11, 0, 19, 1), ivec4(11, 0, 18, 17), ivec4(11, 1, 18, 29), ivec4(12, 0, 19, 7), ivec4(12, 1, 18, 1), ivec4(6, 2, 15, 24), ivec4(5, 2, 15, 24), ivec4(6, 2, 14, 0), ivec4(5, 2, 14, 10), ivec4(6, 2, 13, 14), ivec4(5, 2, 13, 8), ivec4(5, 2, 12, 15), ivec4(6, 2, 12, 24), ivec4(7, 2, 12, 25), ivec4(7, 2, 13, 30), ivec4(7, 1, 13, 18), ivec4(4, 2, 14, 15), ivec4(4, 2, 15, 27), ivec4(4, 2, 16, 27), ivec4(5, 2, 16, 26), ivec4(5, 2, 17, 0), ivec4(5, 2, 18, 27), ivec4(6, 2, 18, 7), ivec4(7, 2, 18, 3), ivec4(8, 2, 18, 7), ivec4(9, 2, 18, 3), ivec4(4, 2, 17, 4), ivec4(5, 2, 19, 25), ivec4(4, 2, 19, 11), ivec4(6, 2, 16, 7), ivec4(7, 2, 16, 31), ivec4(7, 1, 16, 23), ivec4(7, 0, 16, 19), ivec4(8, 1, 16, 14), ivec4(8, 1, 17, 13), ivec4(8, 0, 16, 26), ivec4(13, 0, 19, 25), ivec4(7, 1, 14, 25), ivec4(6, 1, 14, 12), ivec4(6, 1, 13, 6), ivec4(6, 1, 12, 4), ivec4(13, 1, 18, 13), ivec4(13, 0, 18, 25), ivec4(13, 0, 17, 6), ivec4(13, 1, 17, 14), ivec4(12, 1, 17, 12), ivec4(10, 2, 18, 26), ivec4(11, 2, 18, 9), ivec4(7, 2, 11, 28), ivec4(7, 1, 11, 20), ivec4(7, 0, 11, 16), ivec4(6, 2, 11, 2), ivec4(6, 1, 11, 10), ivec4(7, 1, 10, 28), ivec4(9, 0, 16, 9), ivec4(12, 1, 16, 2), ivec4(9, 0, 15, 15), ivec4(5, 1, 11, 12), ivec4(13, 0, 16, 0), ivec4(12, 1, 15, 20), ivec4(12, 0, 15, 16), ivec4(12, 2, 15, 28), ivec4(12, 2, 16, 6), ivec4(12, 2, 17, 24), ivec4(13, 2, 17, 14), ivec4(13, 2, 18, 25), ivec4(11, 2, 17, 11), ivec4(13, 0, 15, 18), ivec4(13, 1, 15, 30), ivec4(12, 0, 14, 4), ivec4(12, 1, 14, 4), ivec4(13, 1, 14, 4), ivec4(6, 2, 10, 15), ivec4(7, 2, 10, 24), ivec4(10, 2, 19, 2), ivec4(12, 1, 13, 14), ivec4(12, 0, 13, 26), ivec4(13, 1, 13, 4), ivec4(13, 0, 13, 24), ivec4(13, 0, 12, 4), ivec4(13, 1, 12, 0), ivec4(14, 0, 13, 14), ivec4(7, 2, 9, 6), ivec4(5, 1, 10, 14), ivec4(13, 2, 19, 12), ivec4(8, 2, 10, 1), ivec4(9, 2, 10, 25), ivec4(14, 0, 14, 13), ivec4(9, 2, 11, 27), ivec4(9, 2, 12, 6), ivec4(10, 2, 11, 24), ivec4(10, 2, 10, 6), ivec4(7, 2, 8, 27), ivec4(11, 0, 13, 1), ivec4(11, 1, 13, 5), ivec4(9, 2, 9, 0), ivec4(10, 2, 9, 0), ivec4(7, 2, 7, 15), ivec4(10, 1, 13, 11), ivec4(10, 0, 13, 27), ivec4(9, 2, 8, 14), ivec4(8, 2, 8, 5), ivec4(8, 2, 7, 1), ivec4(9, 2, 7, 1), ivec4(10, 2, 8, 2), ivec4(10, 2, 7, 26), ivec4(13, 1, 11, 2), ivec4(13, 0, 11, 14), ivec4(10, 0, 12, 15), ivec4(11, 0, 12, 24), ivec4(12, 0, 12, 17), ivec4(12, 0, 11, 3), ivec4(11, 0, 11, 27), ivec4(10, 0, 14, 2), ivec4(10, 1, 14, 2), ivec4(10, 0, 15, 24), ivec4(10, 1, 15, 8), ivec4(11, 0, 15, 25), ivec4(11, 0, 14, 18), ivec4(11, 1, 15, 13), ivec4(4, 1, 10, 8), ivec4(13, 1, 10, 26), ivec4(12, 1, 10, 15), ivec4(11, 0, 16, 6), ivec4(11, 0, 17, 13), ivec4(10, 0, 17, 5), ivec4(9, 0, 17, 1), ivec4(11, 2, 7, 1), ivec4(14, 1, 10, 13), ivec4(4, 1, 9, 6), ivec4(14, 1, 9, 25), ivec4(13, 1, 9, 5), ivec4(12, 1, 9, 5), ivec4(12, 2, 7, 25), ivec4(4, 1, 8, 15), ivec4(12, 2, 8, 0), ivec4(12, 2, 9, 9), ivec4(11, 2, 9, 8), ivec4(11, 2, 8, 28), ivec4(11, 1, 8, 16), ivec4(11, 1, 7, 25), ivec4(10, 1, 7, 26), ivec4(10, 1, 8, 2), ivec4(9, 1, 7, 29), ivec4(9, 0, 7, 17), ivec4(10, 1, 9, 8), ivec4(12, 2, 6, 28), ivec4(12, 1, 6, 20), ivec4(12, 0, 6, 16), ivec4(11, 1, 6, 28), ivec4(11, 0, 6, 16), ivec4(12, 1, 5, 28), ivec4(9, 2, 13, 6), ivec4(11, 0, 10, 0), ivec4(14, 1, 8, 15), ivec4(9, 2, 14, 0), ivec4(9, 2, 15, 27), ivec4(10, 2, 15, 24), ivec4(10, 2, 14, 2), ivec4(10, 2, 13, 27), ivec4(10, 2, 12, 28), ivec4(11, 2, 15, 9), ivec4(11, 2, 13, 9), ivec4(11, 2, 14, 11), ivec4(12, 2, 14, 24), ivec4(13, 2, 14, 24), ivec4(13, 2, 13, 0), ivec4(13, 2, 12, 0), ivec4(12, 2, 13, 6), ivec4(13, 2, 11, 6), ivec4(13, 2, 10, 10), ivec4(12, 2, 10, 11), ivec4(11, 2, 12, 11), ivec4(12, 2, 12, 25), ivec4(12, 2, 11, 0), ivec4(11, 2, 11, 9), ivec4(11, 2, 10, 28), ivec4(11, 1, 10, 16), ivec4(9, 2, 16, 8), ivec4(10, 2, 16, 5), ivec4(11, 2, 16, 31), ivec4(15, 1, 8, 17), ivec4(15, 2, 8, 29), ivec4(11, 0, 9, 25), ivec4(11, 0, 8, 0), ivec4(10, 0, 9, 8), ivec4(10, 0, 8, 14), ivec4(9, 0, 8, 7), ivec4(14, 2, 14, 10), ivec4(8, 0, 8, 26), ivec4(8, 0, 7, 3), ivec4(14, 2, 19, 24), ivec4(14, 2, 18, 27), ivec4(14, 2, 17, 4), ivec4(16, 2, 8, 3), ivec4(17, 2, 8, 31), ivec4(17, 1, 8, 19), ivec4(8, 0, 9, 9), ivec4(7, 0, 8, 27), ivec4(7, 0, 9, 27), ivec4(7, 0, 7, 27), ivec4(14, 2, 16, 14), ivec4(13, 2, 16, 29), ivec4(14, 2, 15, 30), ivec4(14, 1, 15, 22), ivec4(14, 0, 15, 18), ivec4(14, 1, 16, 30), ivec4(18, 1, 8, 1), ivec4(15, 2, 18, 24), ivec4(15, 2, 19, 1), ivec4(15, 2, 17, 11), ivec4(16, 2, 18, 9), ivec4(16, 2, 17, 10), ivec4(16, 2, 19, 5), ivec4(7, 0, 6, 0), ivec4(7, 0, 5, 18), ivec4(7, 1, 5, 30), ivec4(7, 1, 4, 22), ivec4(7, 2, 4, 30), ivec4(17, 2, 19, 5), ivec4(5, 1, 8, 3), ivec4(18, 2, 19, 24), ivec4(7, 2, 3, 4), ivec4(7, 1, 3, 0), ivec4(18, 2, 18, 6), ivec4(11, 0, 5, 15), ivec4(19, 2, 19, 13), ivec4(19, 2, 18, 11), ivec4(7, 1, 2, 6), ivec4(7, 2, 2, 14), ivec4(6, 2, 2, 11), ivec4(6, 2, 3, 2), ivec4(6, 2, 4, 2), ivec4(19, 1, 8, 14), ivec4(19, 1, 9, 4), ivec4(6, 2, 5, 13), ivec4(7, 1, 1, 18), ivec4(7, 2, 1, 30), ivec4(6, 1, 8, 14), ivec4(6, 1, 9, 6), ivec4(18, 2, 17, 14), ivec4(17, 2, 17, 11), ivec4(17, 2, 18, 30), ivec4(17, 1, 18, 22), ivec4(17, 0, 18, 18), ivec4(17, 1, 19, 13), ivec4(17, 1, 17, 11), ivec4(16, 1, 19, 29), ivec4(18, 1, 17, 10), ivec4(18, 1, 18, 6), ivec4(17, 0, 19, 9), ivec4(18, 1, 19, 4), ivec4(5, 2, 5, 27), ivec4(5, 2, 4, 10), ivec4(5, 2, 6, 25), ivec4(4, 2, 6, 15), ivec4(7, 2, 0, 0), ivec4(4, 2, 4, 24), ivec4(3, 2, 4, 3), ivec4(19, 1, 10, 4), ivec4(5, 2, 7, 0), ivec4(5, 2, 8, 27), ivec4(6, 2, 8, 10), ivec4(4, 2, 7, 2), ivec4(4, 2, 3, 14), ivec4(3, 2, 3, 5), ivec4(5, 2, 9, 12), ivec4(2, 2, 4, 1), ivec4(2, 2, 3, 1), ivec4(19, 1, 11, 12), ivec4(1, 2, 4, 8), ivec4(1, 2, 3, 27), ivec4(1, 2, 2, 0), ivec4(1, 2, 1, 25), ivec4(1, 2, 0, 14), ivec4(0, 2, 0, 29), ivec4(0, 2, 1, 7));\n    float f = 1000.0;\n    for(int i = 0; i < 324; i++) {\n\n        if(time < float(i) / 324.0 * 10.0 + 0.5) break;\n        ivec4 m = m1[i];\n\n        int index = m.w / 4;\n        int pose = imod(m.w, 4);\n        float pose0 = float(pose);\n\n        mat3 my = mat3(cos(3.1416 / 2.0 * pose0), 0.0, -sin(3.1416 / 2.0 * pose0),\n                  0.0, 1.0, 0.0, \n                  sin(3.1416 / 2.0 * pose0), 0.0, cos(3.1416 / 2.0 * pose0));\n        vec3 tp = p0 * my;\n\n        float x = float(m.x);\n        float y = float(m.y);\n        float z = float(m.z);\n\n        vec3 et = vec3(x, y, z) * my;\n\n        //int xt = int(x / _sizeX * 2.0);\n        //int zt = int(z / _sizeZ * 2.0);\n        //vec2 v0 = boxIntersection(ro - vec3(float(xt) * 10.0 + 4.5, y, float(zt) * 10.0 + 4.5), rd, vec3(_sizeX / 4.0, 0.52, _sizeZ / 4.0));\n        //if(v0.y < t) continue;\n\n        vec2 v = boxIntersection(ro - vec3(x, y, z), rd, vec3(0.52, 0.52, 0.52));\n        if(v.y > t)\n        if(float(index) > 6.5) continue;\n        else f = sw(float(index), f, tp, et);\n    }\n    return f;\n}   \n\nMData mp(in vec3 ro, in vec3 rd, in float t, float time) {\n    \n    vec3 p = ro + t * rd;   \n   \n    vec3 p0 = p;//my * vec4(p, 1.0);\n    MData mData0 = setMatPr(10000.0, vec3(1.0), 1.0, 1.0);\n    mData0.d = drw(ro, rd, t, time, p0);\n\n    \n\treturn mData0;\n}\n\nMData itrs(in vec3 ro, in vec3 rd, in float time) {\n\n    \n    MData h = setMatPr(-1.0, vec3(0.2), 1.0, 1.0);\n    vec2 tmix = boxIntersection(ro - vec3(9.5, 1.0, 9.5), rd, vec3(10.0, 1.52, 10.0));\n\tif(tmix.y > 0.0) {\n\n        float t = max(tmix.x, 0.001);\n    \t\n        for(int i = 0; i < 128 && t < tmix.y; i++) {\n            \n            h = mp(ro, rd, t, time);\n            if(h.d < 0.001) { h.d = t; return h; }\n            t += h.d;\n        }\n        //h = setMatPr(1.0, vec3(0.5, 0.2, 1.0), 1.0, 1.0);\n    }\n    h = setMatPr(-1.0, vec3(0.5), 1.0, 1.0);\n    return h;\n}\n\nfloat cao(in vec3 ro, in vec3 rd, in float t, in vec3 nor, in float time) {\n    \n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for(int i = 0; i < 4; i++) {\n\n        float h = 0.01 + 0.12 * float(i) / 4.0;\n        float d = mp(ro + h * nor, rd, t, time).d;\n        occ += (h - d) * sca;\n        sca *= 0.95;\n    }\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\nvec3 cN(in vec3 ro, in vec3 rd, in float t, in float time) {\n    \n    vec2 e = vec2(1.0, -1.0) * 0.5773;\n    const float eps = 0.00025;\n    return normalize(e.xyy * mp(ro + e.xyy * eps, rd, t, time).d + \n\t\t\t\t\t e.yyx * mp(ro + e.yyx * eps, rd, t, time).d + \n\t\t\t\t\t e.yxy * mp(ro + e.yxy * eps, rd, t, time).d + \n\t\t\t\t\t e.xxx * mp(ro + e.xxx * eps, rd, t, time).d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p0 = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0.0, 0.0, 20.0);\n    vec3 lkt = normalize(vec3(p0, -2.0));\n\n    float x = mo.x * 6.2831853;\n    float y = -(mo.y * 2.0 - 1.0) * 1.5707963268;\n    mat4 my = mat4(cos(x), 0.0, sin(x), 0.0,\n                  0.0, 1.0, 0.0, 0.0,\n                  -sin(x), 0.0, cos(x), 0.0,\n                  0.0, 0.0, 0.0, 1.0);\n\n    mat4 mx = mat4(1.0, 0.0, 0.0, 0.0,\n                  0.0, cos(y), -sin(y), 0.0,\n                  0.0, sin(y), cos(y), 0.0,\n                  0.0, 0.0, 0.0, 1.0);\n\n    ro = (my * mx * vec4(ro, 1.0)).xyz;\n\n    ro -= vec3(-10.0, 0.0, -10.0);\n    lkt = (my * mx * vec4(lkt, 0.0)).xyz;\n\n    float time = iTime;\n\n    MData m_data = itrs(ro, lkt, time);\n\n    if(m_data.d < 0.0) { fragColor = vec4(0.2); return; }\n\n    vec3 nor = cN(ro, lkt, m_data.d, time);\n    \n    \n    float ao = cao(ro, lkt, m_data.d, nor, time);\n    vec3 lig = normalize(vec3(0.8, 10.2, 1.6));\n    //vec3 dif = m_data.albedo /*vec3(1.0)*/ * (dot(nor, lig) + 1.0) / 2.0;\n    \n    vec3 spec = m_data.albedo * pow(dot(nor, normalize(-lkt + lig)), 10.0);\n\n\n\n    fragColor = vec4(spec * ao /* (ro + lkt * m_data.d + 1.0) / 2.0*/, 1.0);\n}","name":"Image","description":"","type":"image"}]}