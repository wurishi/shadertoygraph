{"ver":"0.1","info":{"id":"XcyyRV","date":"1732063901","viewed":28,"name":"voronoi 2xloop v2","username":"kukovisuals","description":"Playing with voronoi and textures","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","voronoitexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash function to jitter cell centers\nvec2 vhash(vec2 p, vec2 offset) {\n    mat2 m = mat2(\n        127.1, 311.7,\n        269.5, 183.3\n    );\n    p = fract(sin(p * m) * 46839.32);\n    return vec2(\n        sin(p.x * offset.x) * 0.5 + 0.5,\n        cos(p.y * offset.y) * 0.5 + 0.5\n    );\n}\n\n// Main fragment shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates to [0,1]\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float gridSize = 3.0;\n    vec2 cellDensity = vec2(gridSize); // Grid size\n    vec2 g = floor(uv * cellDensity);   // Grid position\n    vec2 f = fract(uv * cellDensity);   // Position within the cell\n\n    float res = 8.0;\n    float md = 8.0;\n    vec2 mr = vec2(0.0);\n    vec2 mro = vec2(0.0);\n\n    // First pass to find the closest point\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 lattice = vec2(x, y);\n            vec2 offset = vhash(lattice + g, vec2(iTime * 0.5));\n            vec2 r = lattice + offset - f;\n            float d = dot(r, r);\n            if (d < res) {\n                res = d;\n                mr = r;\n                mro = offset;\n            }\n        }\n    }\n\n    res = 8.0;\n\n    // Second pass to find the second closest point\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 lattice = vec2(x, y);\n            vec2 offset = vhash(lattice + g, vec2(iTime * 0.5));\n            vec2 r = lattice + offset - f;\n            float d = dot(r, r);\n            if (d > 0.0001 && d < res) {\n                res = d;\n            }\n            if (dot(mr - r, mr - r) > 0.00001) {\n                md = min(md, dot(0.5 * (mr + r), normalize(r - mr)));\n            }\n        }\n    }\n    \n    // Compute edge factor\n    float edgeWidth = 0.4; // Adjust for thinner or thicker lines\n    float edgeFactor = smoothstep(0.0, edgeWidth, md);\n\n    // Compute texture coordinates that move with the Voronoi pattern\n    vec2 texUV = f + md;\n    texUV = fract(texUV);\n\n    // Sample texture\n    vec3 textureColor = texture(iChannel0, texUV).rgb;\n\n    // Mix between black (cell centers) and texture (edges)\n    vec3 color = mix(textureColor, vec3(0.0), edgeFactor);\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}