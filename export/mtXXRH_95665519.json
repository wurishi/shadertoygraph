{"ver":"0.1","info":{"id":"mtXXRH","date":"1674310312","viewed":123,"name":"checkerboard sea","username":"DeltaT","description":"crap","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 150.\n#define EPSILON .005\n\nconst int black = 0;\nconst int white = 1;\nconst int grey = 2;\nconst int cyan = 3;\n\n// Operations\nfloat opSubtract(float sd1, float sd2) {\n    return min(sd1, -sd2);\n}\n\nfloat opSmoothUnion(float sd1, float sd2, float k) { // no clue how this works lol\n    float h = clamp (0.5 + 0.5*(sd2 - sd1)/k, 0.0, 1.0);\n    return mix(sd2, sd1, h) - k*h*(1.0-h);\n}\n\n// Objects\nfloat sdSphere(vec3 p, vec3 pos, float r) {\n    return length(p - pos) - r;\n}\n\nfloat sdPlane(vec3 p) {\n    return p.y;\n}\n\n// Distance to scene + colour\nfloat map(vec3 p, bool getCol) {\n    float plane = sdPlane(p) + (sin(p.x-iTime) * cos(p.z-iTime))/2.;\n    float sphere = sdSphere(vec3(mod(p.x, 4.), mod(p.y+iTime, 8.), mod(p.z, 4.)), vec3(2, 4, 2), .5);\n    float d = opSmoothUnion(plane, sphere, 2.);\n    \n    if(!getCol) return d; // dumb but probably better than having 2 almost identical functions\n    \n    if(d > EPSILON) return float(black);\n    if(d == opSmoothUnion(plane, sphere, 2.)) return float((mod(p.x, 2.) < 1. && mod(p.z, 2.) < 1.) || (mod(p.x, 2.) > 1. && mod(p.z, 2.) > 1.) ? white:grey);\n}\n\n// Ray\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dOrigin = 0.;\n    int id = 0;\n    while(dOrigin <= MAX_DIST) {\n        vec3 p = ro + rd * dOrigin;\n        float dScene = map(p, false);\n        dOrigin += dScene;\n        if(dScene < EPSILON) break; // hit\n    }\n    return dOrigin;\n}\n\n// Normals and basic lighting\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.005, 0);\n    float d = map(p, false);\n    vec3 n = d - vec3(map(p+e.xyy, false), map(p+e.yxy, false), map(p+e.yyx, false));\n    return normalize(n);\n}\n\nfloat getLight(vec3 p, vec3 lightpos) {\n    if(map(p, false) > EPSILON) return 1.;\n    vec3 l = normalize(p - lightpos);\n    vec3 n = getNormal(p);\n    \n    float dif = dot(n, l);\n    return dif;\n}\n\n// Get colour value from int\nvec3 getCol(int col) {\n    switch(col) {\n        case black: return vec3(0);\n        case white: return vec3(1);\n        case grey: return vec3(.5);\n        case cyan: return vec3(0, 1, 1);\n    }\n}\n\n// Render\nvec3 render(vec3 cam, vec3 rd) {\n    float d = rayMarch(cam, rd);\n    vec3 p = cam + rd * d;\n    vec3 lightpos = vec3(0, 5, iTime+5.);\n    float dif = getLight(p, lightpos);\n    vec3 col = getCol(int(map(p, true)));\n    col = pow(col, vec3(.4545));\n    return col * dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cam = vec3(0, 1, iTime);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    vec3 col = render(cam, rd);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}