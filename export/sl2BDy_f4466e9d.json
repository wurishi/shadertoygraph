{"ver":"0.1","info":{"id":"sl2BDy","date":"1652726458","viewed":118,"name":"CMYK printer paper","username":"jamp","description":"A shader that takes an RGB image and converts it to a printed-on-paper look, complete with CMYK offset errors","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cmyk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float downscaleFactor = 6.0;\n\nfloat calcDist(vec2 uv, vec2 dotResolution) {\n    vec2 dotUV = fract(uv * dotResolution);\n    float dx = dotUV.x - 0.5;\n    float dy = dotUV.y - 0.5;\n    return sqrt(dx * dx + dy * dy) * 1.2;\n}\n\nfloat convertDist(float value, vec2 uv, vec2 dotResolution, float darkness) {\n    float ret = 1.0 - value;\n\n    float dist = 1.0 - calcDist(uv, dotResolution);\n    ret = dist * ret;\n    ret = smoothstep(0.0, 1.0, ret);\n    return pow(1.0 - ret, darkness);\n}\n\nfloat rgb_to_cmyk_single(float color, float black) {\n    return (1.0 - color - black) / (1.0 - black);\n}\n\nvec4 rgb_to_cmyk(vec4 color) {\n    float black = 1.0 - max(color.r, max(color.g, color.b));\n    return vec4(\n        rgb_to_cmyk_single(color.r, black),\n        rgb_to_cmyk_single(color.g, black),\n        rgb_to_cmyk_single(color.b, black),\n        black\n    );\n}\n\nfloat cmyk_sample_with_offset(vec2 uv, vec2 dotResolution, vec2 offset, vec4 mask) {\n    vec2 sampleUV = uv;\n    sampleUV.x -= offset.x * (1.0 / dotResolution.x) / 2.0;\n    sampleUV.y -= offset.y * (1.0 / dotResolution.y) / 2.0;\n    vec2 samplerUV = floor(sampleUV * dotResolution) / dotResolution;\n    vec4 sampleColor = texture(iChannel0, samplerUV);\n    vec4 sampleCMYK = rgb_to_cmyk(sampleColor);\n    vec4 maskedVec = sampleCMYK * mask;\n    float masked = maskedVec.r + maskedVec.g + maskedVec.b + maskedVec.a;\n    float withDist = 1.0 - convertDist(pow(1.0 - masked, 3.0), sampleUV, dotResolution, 1.0);\n    return withDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dotResolution = iResolution.xy / downscaleFactor;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 origUV = uv;\n    if (uv.x < 0.5) {\n        uv.x += 0.5;\n    }\n\n    // Sample in big pixely blocks\n    vec2 samplerUV = floor(uv * dotResolution) / dotResolution;\n    vec4 color = texture(iChannel0, samplerUV);    \n    vec4 cmyk = rgb_to_cmyk(color);\n\n    if (origUV.x > 0.5) {\n        fragColor = color;\n    } else {\n        float black = 1.0 - cmyk.a;\n        black = convertDist(black, uv, dotResolution, 4.0);\n\n        float cyan = cmyk_sample_with_offset(uv, dotResolution, vec2(1.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0));\n        float magenta = cmyk_sample_with_offset(uv, dotResolution, vec2(0.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0));\n        float yellow = cmyk_sample_with_offset(uv, dotResolution, vec2(1.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0));\n        \n        fragColor = vec4(black - cyan, black - magenta, black - yellow, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}