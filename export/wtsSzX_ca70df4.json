{"ver":"0.1","info":{"id":"wtsSzX","date":"1563805559","viewed":113,"name":"LonelySnowman","username":"Wendy","description":"acacac","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["hahaha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID:\n//\n// GROUP NUMBER:\n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// COMMENTS TO GRADER: \n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at http://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 8;\nconst int NUM_PLANES = 2;\nconst int NUM_SPHERES = 85;\nconst float PI = 3.14159265359;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nvec3 locat=vec3(0.0,0.0,0.0);\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    locat=texture(iChannel3,vec2(0.0,0.0)).xyz;\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 3.5 * 5.0;\n    Plane[1].materialID = 7;\n\n    float size = 1.0;\n    if(iTime > 7.0 && iTime < 11.0){\n        size = 1.2;\n    }else if (iTime > 11.0 && iTime < 13.0){\n        size = 1.4;\n    }else if (iTime > 13.0){\n        size = 1.6;\n    }\n    \n    // body\n    Sphere[0].radius = 1.4 * size;\n    Sphere[0].center = vec3( locat.x, Sphere[0].radius, locat.y);\n    Sphere[0].materialID = 6;\n    \n    // head\n    Sphere[1].radius = 0.9 * size;\n    Sphere[1].center = vec3( locat.x, Sphere[1].radius + 2.0 * Sphere[0].radius * 0.9, locat.y );\n    Sphere[1].materialID = 6;\n\n    //eye 1\n\n    Sphere[2].radius = 0.15 * size;\n    Sphere[2].center = vec3( locat.x+Sphere[1].radius * -0.5 * 0.95, Sphere[1].center.y, Sphere[1].radius * 0.5 * 1.73205 * 0.95+locat.y );\n    Sphere[2].materialID = 4;\n\n    //eye 2\n\n    Sphere[3].radius = 0.15 * size;\n    Sphere[3].center = vec3(locat.x+ Sphere[1].radius * 0.5 * 0.95, Sphere[1].center.y, Sphere[1].radius * 0.5 * 1.73205 * 0.95+locat.y );\n    Sphere[3].materialID = 4;\n\n    // fastener - top\n    float inc = PI/4.0;\n    for(int k = 4; k<7; k++){\n        Sphere[k].radius = 0.10 * size;\n        Sphere[k].center = vec3( locat.x, Sphere[0].center.y + Sphere[0].radius * cos(inc), Sphere[0].radius * sin(inc)+locat.y);\n        Sphere[k].materialID = 4;\n        inc += PI/7.0;\n    }\n      \n    \n    inc = PI/4.0;\n\n    // nose\n    Sphere[8].radius = 0.16 * size;\n    Sphere[8].center = vec3( locat.x, Sphere[1].center.y - Sphere[1].radius *sin(PI/10.0) , Sphere[1].radius*cos(PI/10.0) +locat.y);\n    Sphere[8].materialID = 5;\n    \n  \n    float temp;\n    if(iTime<1.0){\n        float temp = 10.0 - 10.0 * iTime * iTime;\n        float t1_y = Sphere[1].center.y;        \n        float t0_y = Sphere[0].center.y;\n        Sphere[0].center = vec3( locat.x, Sphere[0].radius + temp, locat.y );\n        Sphere[1].center = vec3( locat.x, Sphere[1].radius + 2.0 * Sphere[0].radius * 0.9 + temp, locat.y );\n        Sphere[2].center = vec3(locat.x+ Sphere[1].radius * -0.5 * 0.95, t1_y+ temp, Sphere[1].radius * 0.5 * 1.73205 * 0.95 +locat.y);\n        Sphere[3].center = vec3( locat.x+Sphere[1].radius * 0.5 * 0.95, t1_y+ temp, Sphere[1].radius * 0.5 * 1.73205 * 0.95 +locat.y);\n        for(int k = 4; k<7; k++){\n            Sphere[k].radius = 0.10 * size;\n            Sphere[k].center = vec3( locat.x, t0_y + Sphere[0].radius * cos(inc) + temp, Sphere[0].radius * sin(inc)+locat.y);\n            Sphere[k].materialID = 0;\n            inc += PI/7.0;\n        }\n        Sphere[8].center = vec3( 0, t1_y - Sphere[1].radius *sin(PI/10.0)+temp , Sphere[1].radius*cos(PI/10.0) );\n   \n        \n    }else{\n        float temp =  1.35 * abs(sin( PI / 2.0 * (iTime - 1.0))*5.0);\n        float t1_y = Sphere[1].center.y;        \n        float t0_y = Sphere[0].center.y;\n        Sphere[0].center = vec3( locat.x, Sphere[0].radius + temp, locat.y );\n        Sphere[1].center = vec3( locat.x, Sphere[1].radius + 2.0 * Sphere[0].radius * 0.9 + temp, locat.y );\n        Sphere[2].center = vec3( locat.x+Sphere[1].radius * -0.5 * 0.95, t1_y+ temp, Sphere[1].radius * 0.5 * 1.73205 * 0.95 +locat.y);\n        Sphere[3].center = vec3( locat.x+ Sphere[1].radius * 0.5 * 0.95, t1_y+ temp, Sphere[1].radius * 0.5 * 1.73205 * 0.95 +locat.y);\n        for(int k = 4; k<7; k++){\n            Sphere[k].radius = 0.10 * size;\n            Sphere[k].center = vec3( locat.x, t0_y + Sphere[0].radius * cos(inc) + temp, Sphere[0].radius * sin(inc)+locat.y);\n            Sphere[k].materialID = 0;\n            inc += PI/7.0;\n        }\n        Sphere[8].center = vec3( locat.x, t1_y - Sphere[1].radius *sin(PI/10.0)+temp , Sphere[1].radius*cos(PI/10.0) +locat.y);\n   \n    }\n\n    if(iTime<13.0){\n    \n    float phase = 0.0;\n    \n    // radius r1 (biggest).\n    //Sphere[1].center = vec3( 1.5 * cos(iTime), 0.5, 1.5 * sin(iTime) );\n    for(int i = 9; i<17; i++){\n        Sphere[i].radius = 0.8;\n        Sphere[i].materialID = 6;\n        phase += 45.0 / 180.0 * PI;\n        if(iTime<1.0){\n            Sphere[i].center = vec3( locat.x+4.5 * sin(phase), Sphere[i].radius, 4.5 * cos(phase)+locat.y);\n\n        }else if(iTime< 5.0){\n            Sphere[i].center = vec3( locat.x+4.5 * sin(phase + 3.0 * (iTime-1.0)), Sphere[i].radius + abs(sin(PI / 2.0  * (iTime-1.0))) * 2.0 , 4.5 * cos(phase + 3.0 * (iTime-1.0))+locat.y);\n\n        }else if (iTime < 7.0){\n            Sphere[i].center = vec3( locat.x+(4.5 - (iTime-5.0)*(iTime-5.0)*(iTime-5.0)* 4.5 / 8.0) * sin(phase + 3.0 * (iTime-1.0)), Sphere[i].radius + abs(sin(PI / 2.0  * (iTime-1.0))) * 2.0 ,(4.5 - (iTime-5.0)*(iTime-5.0)*(iTime-5.0)* 4.5 / 8.0)  * cos(phase + 3.0 * (iTime-1.0))+locat.y);\n        }else{\n            Sphere[i].center = Sphere[0].center;    \n        }\n    }\n    \n\n    // radius r2.\n    //Sphere[1].center = vec3( 2.5 * cos(iTime), 0.5, 2.5 * sin(iTime) );\n    phase = 0.0;\n     for(int i = 18; i<26; i++){\n        Sphere[i].radius = 0.6;\n        Sphere[i].center = vec3( locat.x+7.0 * sin(phase), Sphere[i].radius, 7.0 * cos(phase)+locat.y);\n        Sphere[i].materialID = 6;\n        phase += 45.0 / 180.0 * PI;\n         \n         if(iTime > 7.0 && iTime < 11.0){\n            Sphere[i].center = vec3(locat.x+ (7.0 - (iTime-7.0)*(iTime-7.0)*(iTime-7.0)* 7.0 / 64.0)* sin(phase + PI/2.0 *(iTime-7.0)), Sphere[i].radius + 3.0 * abs(sin(PI*(iTime-7.0))) , (7.0 - (iTime-7.0)*(iTime-7.0)*(iTime-7.0)* 7.0 / 64.0)* cos(phase + PI/2.0 *(iTime-7.0))+locat.y);             \n         } else if (iTime > 11.0){\n            Sphere[i].center = Sphere[0].center;\n         }\n    }\n\n    // radius r3.\n    phase = 0.0;\n     for(int i = 27; i<35; i++){\n        Sphere[i].radius = 0.5;\n        Sphere[i].center = vec3( locat.x+8.9 * sin(phase), Sphere[i].radius, 8.9 * cos(phase)+locat.y);\n        Sphere[i].materialID = 6;\n        phase += 45.0 / 180.0 * PI;\n         if(iTime > 11.0 && iTime < 11.5){\n              Sphere[i].center = vec3(locat.x+ (8.9+0.5 * 5.6 * (iTime - 11.0)*(iTime-11.0)) * sin(phase), Sphere[i].radius, (8.9+0.5 * 5.6 * (iTime-11.0)*(iTime-11.0))* cos(phase)+locat.y);\n         }else if (iTime > 11.5 && iTime < 13.0){\n            Sphere[i].center = vec3(locat.x+ (10.1-2.8 * (iTime-11.5)- 0.5 * 5.2444444444 * (iTime - 11.5)*(iTime-11.5)) * sin(phase), Sphere[i].radius, (10.1-2.8 * (iTime-11.5)- 0.5 * 5.2444444444 * (iTime - 11.5)*(iTime-11.5))* cos(phase)+locat.y);\n         }else if (iTime > 13.0){\n            Sphere[i].center = Sphere[0].center;\n         }\n\n    }\n\n    // radius r4.\n    phase = 0.0;\n     for(int i = 36; i<44; i++){\n        Sphere[i].radius = 0.4;\n        Sphere[i].center = vec3( locat.x+10.5 * sin(phase), Sphere[i].radius, 10.5 * cos(phase)+locat.y);\n        Sphere[i].materialID = 6;\n        phase += 45.0 / 180.0 * PI;\n         if(iTime > 11.5){\n             Sphere[i].center = vec3( locat.x+(10.5+3.0*(iTime-11.5)+0.5*3.0*(iTime-11.5)*(iTime-11.5)) * sin(phase), Sphere[i].radius, (10.5+3.0*(iTime-11.5)+0.5*3.0*(iTime-11.5)*(iTime-11.5)) * cos(phase)+locat.y);\n         }\n\n    }\n        \n    }\n  \n    float bias=-5.0;\n    int t=9;\n    vec2 tempLoc=vec2(-3.0,-3.0);\n    size=1.6;\n    if(locat.z>0.5)\n    {\n    \tfor(int i=0;i<6;i++)\n        {\n            bias+=5.0;\n            t+=9;\n        \ttempLoc.x=-12.0+bias;\n            \n            tempLoc.y=-3.0;\n                // body\n    Sphere[0+t].radius = 1.4 * size;\n    Sphere[0+t].center = vec3( tempLoc.x, Sphere[0+t].radius, tempLoc.y);\n    Sphere[0+t].materialID = 6;\n    \n    // head\n    Sphere[1+t].radius = 0.9 * size;\n    Sphere[1+t].center = vec3( tempLoc.x, Sphere[1+t].radius + 2.0 * Sphere[0+t].radius * 0.9, tempLoc.y );\n    Sphere[1+t].materialID = 6;\n\n    //eye 1\n\n    Sphere[2+t].radius = 0.15 * size;\n    Sphere[2+t].center = vec3( tempLoc.x+Sphere[1+t].radius * -0.5 * 0.95, Sphere[1+t].center.y, Sphere[1+t].radius * 0.5 * 1.73205 * 0.95+tempLoc.y );\n    Sphere[2+t].materialID = 4;\n\n    //eye 2\n\n    Sphere[3+t].radius = 0.15 * size;\n    Sphere[3+t].center = vec3(tempLoc.x+ Sphere[1+t].radius * 0.5 * 0.95, Sphere[1+t].center.y, Sphere[1+t].radius * 0.5 * 1.73205 * 0.95+tempLoc.y );\n    Sphere[3+t].materialID = 4;\n\n    // fastener - top\n    float inc = PI/4.0;\n    for(int k = 4; k<7; k++){\n        Sphere[k+t].radius = 0.10 * size;\n        Sphere[k+t].center = vec3( tempLoc.x, Sphere[0+t].center.y + Sphere[0+t].radius * cos(inc), Sphere[0+t].radius * sin(inc)+tempLoc.y);\n        Sphere[k+t].materialID = 4;\n        inc += PI/7.0;\n    }\n\t\n    inc = PI/4.0;\n\n    // nose\n    Sphere[8+t].radius = 0.16 * size;\n    Sphere[8+t].center = vec3( tempLoc.x, Sphere[1+t].center.y - Sphere[1+t].radius *sin(PI/10.0) , Sphere[1+t].radius*cos(PI/10.0) +tempLoc.y);\n    Sphere[8+t].materialID = 5;\n        \n        }\n    \n    }\n\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.4 * Material[0].k_d;\n    Material[0].k_r = 0.0 * Material[0].k_d;\n    Material[0].k_rg = 0.3 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // wall material.\n    Material[7].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[7].k_a = 0.4 * Material[7].k_d;\n    Material[7].k_r = 0.8 * Material[7].k_d;\n    Material[7].k_rg = 0.3 * Material[7].k_r;\n    Material[7].n = 64.0;\n\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // light blue material.\n    Material[3].k_d = vec3( 0.69, 0.76, 0.87 );\n    Material[3].k_a = 2.0 * Material[1].k_d;\n    Material[3].k_r = 1.5 * Material[1].k_d;\n    Material[3].k_rg = 0.5 * Material[1].k_r;\n    Material[3].n = 64.0;\n\n    // black material\n    Material[4].k_d = vec3( 0.02, 0.02, 0.02 );\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = 2.0 * Material[4].k_d;\n    Material[1].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 64.0;\n\n    // orange material\n    Material[5].k_d = vec3( 1.0, 0.6, 0.0);\n    Material[5].k_a = 0.2 * Material[5].k_d;\n    Material[5].k_r = 1.0 * Material[5].k_d;\n    Material[5].k_rg = 0.2 * Material[5].k_r;\n    Material[5].n = 64.0;\n\n    // white material\n    Material[6].k_d = vec3(1.0);\n    Material[6].k_a = 0.2 * vec3(15.0);\n    Material[6].k_r = 1.0 * vec3(0.01);\n    Material[6].k_rg = 0.01 * Material[6].k_r;\n    Material[6].n = 64.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.10,0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\tmat4 TT=mat4(\n\t\t1.0,0,0,-sph.center.x,\n\t\t0,1,0,-sph.center.y,\n\t\t0,0,1,-sph.center.z,\n\t\t0,0,0,1);\n\tmat4 T=transpose(TT);\n\t//ray.d=normalize(vec3(transpose(inverse(T))*vec4(ray.d,1.0)));\n\tray.o=vec3(T*vec4(ray.o,1.0));\n\t\n\n\tfloat dRo = dot(ray.d, ray.o);// 1/2b\n    float dRd = dot(ray.d, ray.d);//a\n    float oRo = dot(ray.o, ray.o);//\n    float t0  = (-2.0 * dRo + 2.0 * sqrt(dRo * dRo - dRd * (oRo - sph.radius * sph.radius))) / (2.0 * dRd);\n    float t1 = (-2.0 * dRo - 2.0 * sqrt(dRo * dRo - dRd * (oRo - sph.radius * sph.radius))) / (2.0 * dRd);\n    if ( (t0 < tmin || t0 > tmax )&& (t1<tmin||t1>tmax)) return false;\n\n    t = min(t0,t1);\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize( hitPos );\t\n\thitPos=vec3(inverse(T)*vec4(hitPos,1.0));\n\t//hitNormal=normalize(vec3(transpose(inverse(inverse(T)))*vec4(hitNormal,1.0)));\n    return true;    \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n\tmat4 TT=mat4(\n\t\t1.0,0,0,-sph.center.x,\n\t\t0,1,0,-sph.center.y,\n\t\t0,0,1,-sph.center.z,\n\t\t0,0,0,1);\n\tmat4 T=transpose(TT);\n\t//ray.d=normalize(vec3(transpose(inverse(T))*vec4(ray.d,1.0)));\n\tray.o=vec3(T*vec4(ray.o,1.0));\n\t\n\n\tfloat dRo = dot(ray.d, ray.o);// 1/2b\n    float dRd = dot(ray.d, ray.d);//a\n    float oRo = dot(ray.o, ray.o);//\n    float a=dRo * dRo - dRd * (oRo - sph.radius * sph.radius);\n    float t0  = (-dRo + sqrt(dRo * dRo - dRd * (oRo - sph.radius * sph.radius))) ;\n    float t1 = (-dRo -  sqrt(dRo * dRo - dRd * (oRo - sph.radius * sph.radius))) ;\n\treturn ((t1 >= tmin && t1<= tmax) || (t0 >= tmin && t0 <= tmax));   \n\n\t//hitNormal=normalize(vec3(transpose(inverse(inverse(T)))*vec4(hitNormal,1.0)))\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\nMaterial_t TextureColor(  int hittype,vec3 hitPos) {\n    vec3 color;\n    if(hittype==0){\n        \t\t\thitPos.x=abs(hitPos.x)/1.0;\n\n             color = texture(iChannel0, hitPos.xz /10.).xyz;\n    \t\tfloat temp=color.x+color.y+color.z;\n    \t\ttemp/=3.0;\n    \t\tcolor=vec3(temp,temp,temp);\n    }\n    else {\n        \n        hitPos/=10.0;\n        if(0.9-0.8<=hitPos.x&&hitPos.x<=1.5-0.8  && hitPos.y<1.0)\n        {color = texture(iChannel1, hitPos.xy /10.).xyz * 4.0;\n        color=vec3(1.0,1.0,1.0);\n        }\n        else color=vec3(0.0,0.0,0.0);\n    \n    }\n\n            return Material_t(0.0*color, 1.0*color, 1.0*color, 0.0*color, 64.0);\n}\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit=false;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\\\n\n\nbool hitfloor=false;\nbool hitwall=false;\nfor(int i=0;i<NUM_PLANES;i++)\n    {\n        temp_hasHit=false;\n        temp_hasHit=IntersectPlane(Plane[i],ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if((temp_t<nearest_t) && temp_hasHit)\n        {\n            if(i==0)hitfloor = true;\n            else hitfloor=false;\n            if(i==1)hitwall=true;\n            else hitwall=false;\n\n            hasHitSomething = true;\n            nearest_t=temp_t;\n            nearest_hitNormal=temp_hitNormal;\n            nearest_hitPos=temp_hitPos;\n            nearest_hitMatID=Plane[i].materialID;\n        }\n    }\n    for(int i=0;i<NUM_SPHERES;i++)\n    {\n        temp_hasHit=false;\n\n        temp_hasHit=IntersectSphere(Sphere[i],ray, DEFAULT_TMIN , DEFAULT_TMAX , temp_t , temp_hitPos , temp_hitNormal);\n        if((temp_t<nearest_t) && temp_hasHit)\n        {\n            hasHitSomething = true;\n            hitfloor=false;\n       \t\thitwall=false;\n            nearest_t=temp_t;\n            nearest_hitNormal=temp_hitNormal;\n            nearest_hitPos=temp_hitPos;\n            nearest_hitMatID=Sphere[i].materialID;\n        }\n\n    }\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3(0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\tbool k_shadow=false;\n    Ray_t shadowray;\n\t//vec3 I_local=vec3(0.0);\n    \n\tfor(int j=0;j<NUM_LIGHTS;j++)\n\t{\n        shadowray.o=nearest_hitPos;\n\t\tshadowray.d=normalize((Light[j].position-nearest_hitPos));\n\t\tk_shadow=false;\n        \n        for(int i=0;i<NUM_SPHERES;i++)\n\t\t{\n            if(k_shadow)break;\n\n\t\t\tk_shadow=IntersectSphere(Sphere[i],shadowray, DEFAULT_TMIN , distance(nearest_hitPos, Light[j].position));\n\t\t}\n        if(!k_shadow)\n\t\tfor(int i=0;i<NUM_PLANES;i++)\n\t\t{\n             if(k_shadow)break;\n\n\t\t\tk_shadow=IntersectPlane(Plane[i],shadowray, DEFAULT_TMIN , distance(nearest_hitPos, Light[j].position));\n\t\t}\n\n        vec3 L=shadowray.d;\n\t\tvec3 N=normalize(nearest_hitNormal);\n\t\tvec3 V=nearest_hitPos;\n        Material_t mat;\n        if(hitfloor||hitwall)\n        {\n            if(hitfloor)\n            mat= TextureColor(0,nearest_hitPos);\n            else \n\t\t\t\tmat= TextureColor(1,nearest_hitPos);\n\n            I_local+=0.5*PhongLighting(  L,  N  ,  -normalize(ray.d), k_shadow, \n                mat,Light[j] );\n        }\n\t\telse\n            I_local+=PhongLighting(  L,  N\t,  -normalize(ray.d), k_shadow, \n        \t\tMaterial[nearest_hitMatID],Light[j] );\n\n\t\n\t}\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\t\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3(21.3 * sin(sin(iTime/4.0)*PI/12.0+PI/6.0), 8.0, 21.3 * cos(sin(iTime/4.0)*PI/12.0+PI/6.0));\n    vec3 cam_lookat = vec3( 0.0, 4.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis));\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n    \n    //color = texture(iChannel1, pixel_pos /10.).xyz * 4.0;\n\tpixel_pos.y+=1.0;\n    pixel_pos.x+=2.0;\n    pixel_pos.x/=2.0;\n    vec3 c=texture(iChannel1, pixel_pos/=2.0 ).xyz ;\n    float temp=c.x+c.y+c.z;\n\n    if(temp>0.5)\n        c=vec3(1.0,1.0,1.0);\n    temp=c.x+c.y+c.z;\n    if(temp>=3.0)\n    \tfragColor = vec4(c * 4.0, 1.0 );\n    else\n        fragColor=vec4(I_result,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Copyright (c) 2013 Andrew Baldwin (twitter: baldand, www: http://thndl.com)\n// License = Attribution-NonCommercial-ShareAlike (http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US)\n\n// \"Just snow\"\n// Simple (but not cheap) snow made from multiple parallax layers with randomly positioned \n// flakes and directions. Also includes a DoF effect. Pan around with mouse.\n\n#define LIGHT_SNOW // Comment this out for a blizzard\n\n#ifdef LIGHT_SNOW\n\t#define LAYERS 50\n\t#define DEPTH .5\n\t#define WIDTH .3\n\t#define SPEED .6\n#else // BLIZZARD\n\t#define LAYERS 200\n\t#define DEPTH .1\n\t#define WIDTH .8\n\t#define SPEED 1.5\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst mat3 p = mat3(13.323122,23.5112,21.71123,21.1212,28.7312,11.9312,21.8112,14.7212,61.3934);\n\tvec2 uv = iMouse.xy/iResolution.xy + vec2(1.,iResolution.y/iResolution.x)*fragCoord.xy / iResolution.xy;\n\tvec3 acc = vec3(0.0);\n\tfloat dof = 5.*sin(iTime*.1);\n\tfor (int i=0;i<LAYERS;i++) {\n\t\tfloat fi = float(i);\n\t\tvec2 q = uv*(1.+fi*DEPTH);\n\t\tq += vec2(q.y*(WIDTH*mod(fi*7.238917,1.)-WIDTH*.5),SPEED*iTime/(1.+fi*DEPTH*.03));\n\t\tvec3 n = vec3(floor(q),31.189+fi);\n\t\tvec3 m = floor(n)*.00001 + fract(n);\n\t\tvec3 mp = (31415.9+m)/fract(p*m);\n\t\tvec3 r = fract(mp);\n\t\tvec2 s = abs(mod(q,1.)-.5+.9*r.xy-.45);\n\t\ts += .01*abs(2.*fract(10.*q.yx)-1.); \n\t\tfloat d = .6*max(s.x-s.y,s.x+s.y)+max(s.x,s.y)-.01;\n\t\tfloat edge = .005+.05*min(.5*abs(fi-5.-dof),1.);\n\t\tacc += vec3(smoothstep(edge,-edge,d)*(r.x/(1.+.02*fi*DEPTH)));\n\t}\n\tfragColor = vec4(vec3(acc),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p=vec2(0.0,0.0);\n    vec4 last=texture(iChannel3,p);\n    float check=texelFetch( iChannel2, ivec2(KEY_LEFT,0), 0 ).x;\n    float left=texelFetch( iChannel2, ivec2(KEY_RIGHT,0), 0 ).x;\n    float up=texelFetch(iChannel2,ivec2(KEY_UP,0),0).x;\n    \n    float down=texelFetch(iChannel2,ivec2(KEY_DOWN,0),0).x;\n\n    if(check>=0.5)\n    {\n        last.x+=0.5;\n    }\n    if(left>0.5)\n        last.x-=0.5;\n    if(up>0.5)\n        last.y+=0.5;\n    if(down>0.5)\n    {\n        last.y-=0.5;\n        if(last.y<=-20.0&&last.x>=2.0&&last.x<=6.0)\n            last.z=1.0;\n            else {\n            \tif(last.y<=-20.0)\n                    last.y+=0.5;\n            }\n        \n    }\n    \n        fragColor=last;\n}","name":"Buffer B","description":"","type":"buffer"}]}