{"ver":"0.1","info":{"id":"4lBXWt","date":"1447120750","viewed":784,"name":"Spectacles","username":"cabbibo","description":"\nAnother prototype for the vr raytrace gallery being created by http://tree.is","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raytrace","rainbow","spectacles","pyshcedelic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 3.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 100;\nconst float PI = 3.14159;\n\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\n\nfloat smax(float a, float b, float k)\n{\n    return log(exp(k*a)+exp(k*b))/k;\n}\n\nfloat smin(float a, float b, float k)\n{\n    return -(log(exp(k*-a)+exp(k*-b))/k);\n}\n\n// q is point\n// n is normal\n// p is point on plane\nvec3 projOnPlane( vec3 q, vec3 p , vec3 n){\n    \n    vec3 v = q - dot(q - p, n) * n;\n    return v;\n}\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n                                 \n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat triNoise3D(in vec3 p, in float spd)\n{\n    float z=1.4;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.);\n        p += (dg+iTime*.1*spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        //p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\nfloat posToFloat( vec3 p ){\n \n    float f = triNoise3D( p * .2, .1 );\n    return f;\n    \n}\n\n\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    float an = 0.3 + 10.0*mouse.x;\n\tcamPos = vec3(1.5*sin(an),0.,1.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nmat3 fullRotate( vec3 r ){\n \n   return xrotate( r.x ) * yrotate( r.y ) * zrotate( r.z );\n    \n}\n\nfloat rotatedBox( vec3 p , vec3 rot , vec3 size , float rad ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return udRoundBox( q , size , rad );\n    \n    \n}\n\n\n\nvec2 smoothU( vec2 d1, vec2 d2, float k)\n{\n    float a = d1.x;\n    float b = d2.x;\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return vec2( mix(b, a, h) - k*h*(1.0-h), mix(d2.y, d1.y, pow(h, 2.0)));\n}\n\n\nvec2 smoothSub( vec2 d1, vec2 d2, float k)\n{\n    return  vec2( smax( -d1.x , d2.x , k ) , d2.y );\n}\n\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n/*float opRepCube( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return primitve( q );\n}\n*/\n\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n\nvec2 opS( vec2 d1, vec2 d2 )\n{\n   return (-d1.x>d2.x) ? vec2( -d1.x , d1.y ) : d2;\n}\n\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat doRing( vec3 p ){\n  \n    vec3 pos = p;\n    \n     \n    float lor = sign( pos.x );\n    \n    \n    pos.x = abs( pos.x );\n    \n    //pos.x = mod( pos.x , 1.5 );\n    float degree = atan( pos.y , pos.z );\n    \n    float ogD = degree;\n    \n    degree += iTime;// * (1. + lor * .2);\n    float l = length( pos.yz );\n    \n\n    \n    degree = mod( degree - 3.14159  / 8. , 3.14159  / 4. );\n \n    \n    pos.y = l * sin( degree );\n    pos.z = l * cos( degree );\n\n    \n    return sdSphere( pos - vec3( 2.4 ,  1. , 2.39 )  * .2  , .04 *( 1. + abs(ogD) ));\n    \n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    \n    \n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\nvec3 twist( vec3 p ){\n float c = cos(20.0*p.z);\n  float s = sin(20.0*p.z);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);   \n    \n    return q;\n}\n\n\nfloat bentCappedCylinder( vec3 p, vec2 h )\n{\n    \n \n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nvec2 glasses( vec3 p ){\n    \n    \n   vec3 og = p;\n    \n   mat3 r = xrotate( -.18 * PI / 2. );\n    \n    p = r * p;\n \n    \n   p.x = abs( p.x );\n    \n   vec3 eyePos = vec3( 0.25 , 0. , 0. );\n    \n   r = xrotate( PI / 2. );\n    \n   vec2 res;\n    \n   // Rims\n   res = vec2( sdTorus( r * (p -eyePos) , vec2( .16 , .02 ) ) , 2. );\n    \n    \n   //spectacles\n   res = smoothU( res ,vec2( sdCappedCylinder( r * (p -eyePos) , vec2( .15 , .01 ) ), 10. ), .01);\n    \n    \n   eyePos = vec3( 0.41 , 0.1 , -0.25 );\n    \n   //earHolders\n   res = smoothU( res ,vec2( bentCappedCylinder( r * (p -eyePos) , vec2( .01 , .25 ) ), 2. ), .03);\n    \n   r = xrotate(.6* PI / 2. );\n   eyePos = vec3( 0.41 , 0.06 , -0.55 );\n   res = smoothU( res ,vec2( bentCappedCylinder( r * (p -eyePos) , vec2( .008 , .08 ) ), 3. ), .02);\n     \n    \n   // cross bar\n    eyePos = vec3( 0. , .13 , 0. );\n    \n   r = zrotate( PI / 2. );\n    \n   res = smoothU( res , vec2( sdCappedCylinder( r * ( og - eyePos) , vec2( .01 , .13 )) , 2. ), .03);\n   return res;\n    \n}\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n   \n    \n    vec2 ring;\n\n\n    vec2 res = glasses( pos );\n    vec2 plane = vec2( sdPlane( pos , vec4( 0., 1. , 0. , .17 ) ), 20. );\n    \n    res = opU( res , plane );\n    \n\n    \n    \t\n   \treturn res;\n    \n}\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 20.*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 bodyColor( vec3 p , vec3 n ){\n    return vec3( 1. );\n    \n}\n\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\n\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n} \n\n\n/*vec3 cPal( float t ){\n return pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25));   \n    \n}*/\n\nvec3 cPal( float t ){\n return vec3( 1. - t );    \n}\nvec3 lensColor( vec3 p , vec3 n , vec3 rd ){\n    \n   vec3 pos; vec3 col; float v;\n    \n   float offset = sin(iTime * .1 + sin( iTime * .3 + sin( iTime * .1)));\n    \n   for( int i = 0; i < 10; i++ ){\n       \n    pos = p + rd * .03 * float(i);\n    v = noise( pos * 10. + rd * offset  );\n    \n    col = hsv( abs(v) * .1 + offset + float( i ) / 10. , 1. , 1. ) *(1.+ float( i ) / 10.);\n       \n    if( v > .5 ){ break;}\n        \n   }\n    \n   return col; \n    \n}\n\nvec3 turtleColor( vec3 p , vec3 n ){\n    \n   return vec3( 1. );\n}\n\nvec3 planeColor( vec3 p , vec3 n  , float ao ){\n    \n   \n   return cPal( length( p ) * .1 ) *ao;\n   \n}\n\nvec3 bgColor(){\n    \n   return vec3( .8 );\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n\n\n    vec3 col = vec3( 0. );\n    \n    mat3 basis = mat3(\n     \n        1. , 0. , 0. ,\n        0. , 1. , 0. ,\n        0. , 0. , 1.\n       \n    );\n        \n    \n    col = bgColor();\n   \n    \n    if( res.y > -.5 ){\n        \n        vec3 pos = ro + rd * res.x;\n        vec3 norm = calcNormal( pos );\n        float ao = calcAO( pos , norm );\n        \n      \n        \n        vec3 refr = refract( rd , norm , 1. / 1.2 );\n        \n        //col = texture( iChannel0 , normalize(refr) ).xyz;\n \n\t\t\n        // Lens\n        if( res.y >= 4. && res.y < 10.1 ){\n        \tcol = lensColor( pos , norm , rd );// vec3( pow((1. - dot( norm , normalize( pos ) )) , .3) );\n        \n        // Plane\n        }else if( res.y == 20. ){\n         \tcol = planeColor( pos , norm , ao ); \n            \n        //Turtle\n        }else if( res.y== 3. ){\n         \tcol = vec3( 2.  ) * ao;   \n            \n        // body\n        }else{\n        \tcol =  vec3( .5 ) * ao;\n    \t}\n        \n        \n    }\n\n    fragColor = vec4( col , 1. );\n\n\n\n}","name":"","description":"","type":"image"}]}