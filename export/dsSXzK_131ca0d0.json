{"ver":"0.1","info":{"id":"dsSXzK","date":"1670520635","viewed":74,"name":"FFT noise thing","username":"ianertson","description":"Playing around with FFT","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","fft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n#define tau (pi*2.0)\n\n\nconst int fftSize = 128;\n\n\nfloat colorDiff(vec3 a, vec3 b) {\n    return (abs(distance(a, b)) + max(0.0, dot(a, b))) / 2.0;\n}\n\nvec3 avg_color(vec3 col, sampler2D tex, vec2 coord) {\n\n    vec3 left = texture(tex, (coord + vec2(-1, 0)) / iResolution.xy).rgb;\n    vec3 right = texture(tex, (coord + vec2(1, 0))  / iResolution.xy).rgb;\n    vec3 up = texture(tex, (coord + vec2(0, 1))  / iResolution.xy).rgb;\n    vec3 down = texture(tex, (coord + vec2(0, -1))  / iResolution.xy).rgb;\n    \n    return (col + left + right + up + down) / 5.0;\n}\n\nfloat differenceFromNeighbors(sampler2D tex, vec2 texCoord) {\n    vec4 left = texture(tex, texCoord + vec2(-1, 0));\n    vec4 right = texture(tex, texCoord + vec2(1, 0));\n    vec4 up = texture(tex, texCoord + vec2(0, 1));\n    vec4 down = texture(tex, texCoord + vec2(0, -1));\n\n    vec4 average = (left + right + up + down + texture(tex, texCoord)) / 5.0;\n\n    vec4 difference = abs(texture(tex, texCoord) - average);\n\n    return max(max(difference.r, difference.g), difference.b);\n}\n\nfloat variad(vec3 col, sampler2D tex, vec2 coord) {\n\n    vec3 left = texture(tex, (coord + vec2(-1, 0)) / iResolution.xy).rgb;\n    vec3 right = texture(tex, (coord + vec2(1, 0))  / iResolution.xy).rgb;\n    vec3 up = texture(tex, (coord + vec2(0, 1))  / iResolution.xy).rgb;\n    vec3 down = texture(tex, (coord + vec2(0, -1))  / iResolution.xy).rgb;\n    \n    \n    float d = 0.0;\n    \n    \n    d += colorDiff(col, left);\n    d += colorDiff(col, right);\n    d += colorDiff(col, up);\n    d += colorDiff(col, down);\n\n   \n    d += colorDiff(left, right);\n    d += colorDiff(left, up);\n    d += colorDiff(left, down);\n    \n    d += colorDiff(up, down);\n    d += colorDiff(right, up);\n    d += colorDiff(right, down);\n    \n    \n    \n    float d2 = differenceFromNeighbors(tex, coord / iResolution.xy);\n\n    \n    \n    return ((d / 9.0) + d2) / 2.0;\n    \n\n}\n\nvoid fft(inout vec3 signal[fftSize])\n{\n    for (int i = 0; i < fftSize; ++i)\n    {\n        int j = i;\n        for (int k = fftSize >> 1; (j ^= k) < k; k >>= 1);\n\n        if (i < j)\n        {\n            vec3 tmp = signal[i];\n            signal[i] = signal[j];\n            signal[j] = tmp;\n        }\n    }\n\n    for (int i = 1; i < fftSize; i <<= 1)\n    {\n        vec3 w = vec3(cos(2.0 * pi / float(i << 1)), sin(2.0 * pi / float(i << 1)), 0.0);\n\n        for (int j = 0; j < fftSize; j += (i << 1))\n        {\n            vec3 w_k = vec3(1.0, 1.0, 1.0);\n\n            for (int k = 0; k < i; ++k, w_k *= w)\n            {\n                vec3 x = signal[j + k];\n                vec3 y = signal[j + k + i] * w_k;\n\n                signal[j + k] = x + y;\n                signal[j + k + i] = x - y;\n            }\n        }\n    }\n}\n\n\nvec3 get_fft(vec2 uv, vec2 abscoord) {\n      \n    vec2 st = uv;\n    st = st * 2.0 - 1.0;\n    st.x *= iResolution.x / iResolution.y;\n    \n    vec3 nn = texture(iChannel0, uv).rgb;\n\n    vec3 signal[fftSize];\n    float channels[3];\n    channels[0] = nn.r;\n    channels[1] = nn.g;\n    channels[2] = nn.b;\n    for (int i = 0; i < fftSize; ++i)\n    {\n        signal[i] = cos(vec3(variad(nn, iChannel0, abscoord)) * tau * float(i));//max(vec3(0.0), vec3(cos(nn.x*tau), tan(nn.y*tau), sin(nn.z*tau)));\n    }\n\n    fft(signal);\n\n    vec3 color = vec3(0.0);\n    float L = 0.0;\n    for (int i = 0; i < fftSize; ++i)\n    {\n        L += max(0.0, (dot(signal[i], nn)));\n        color += vec3(L);\n    }\n    \n    L /= float(fftSize);\n    vec3 avg = avg_color(nn, iChannel0, abscoord);\n\n\nreturn avg * L;//(color/float(fftSize));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    float dist = abs(distance(iMouse.xy, fragCoord));\n    \n    float ratioFactor = 0.7;\n    \n    float radi = ((iResolution.x*0.5) * ratio * max(0.2, (0.5 + (0.5 * cos(iTime))))) * ratioFactor;\n    \n    if (dist <= radi) {\n        color = get_fft(uv, fragCoord);\n    }\n    \n  \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}