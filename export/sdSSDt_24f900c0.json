{"ver":"0.1","info":{"id":"sdSSDt","date":"1621605069","viewed":82,"name":"trippy triangle mess","username":"vjbob0","description":"not much to say, i wanted moving trianlges i got moving triangles\nps: thats my first shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","glitch","broken"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  //source: https://iquilezles.org/articles/distfunctions\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat scene(vec3 p)\n{\n    float triangle = udTriangle(sin(p+iTime/2.), vec3(.1, 1. ,0. ), vec3(.1, 0. ,0. ),vec3(.5, 0.5 ,0. ));\n    float octa = sdOctahedron(p, .5);\n    return triangle;\n}\n\nvec3 getNormal(vec3 p){\n\t\t//Sampling around the point\n\t\tvec2 o = vec2(0.01, 0.0);\n\t\tfloat d = scene(p);\n\t\tvec3 n = d - vec3(\n\t\t\t\t\t\t\t\t\tscene(p-o.xyy),\n\t\t\t\t\t\t\t\t\tscene(p-o.yxy),\n\t\t\t\t\t\t\t\t\tscene(p-o.yyx));\n\t\treturn normalize(n);\n\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    \n    vec3 cam = vec3(0,0,-5);\n    vec3 dir = normalize(vec3(uv, 1));\n    \n    float t = 0.;\n    float k = 0.;\n    for(int i = 0; i<100; i++)\n    {\n        k = scene(cam + dir * t);\n        t += k;\n        if (k < 0.001) break;\n    }\n    \n    vec3 h = cam+dir*t;\n    vec3 n = getNormal(h);\n        \n    // Time varying pixel color\n    vec3 col = n.xxy * .5 + .5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}