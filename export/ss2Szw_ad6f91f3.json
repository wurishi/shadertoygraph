{"ver":"0.1","info":{"id":"ss2Szw","date":"1631365737","viewed":184,"name":"D.I.C. Dances","username":"shau","description":"D.I.C. dance moves from Lucy & D.I.C. (we made a thing studios). [url]https://www.youtube.com/watch?v=pKaLdPLpsnk[/url]","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["3d","mocap","wemadeathing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by SHAU - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n/**\n *  D.I.C. from Lucy and D.I.C. by 'We made a thing studios'\n *  motion capture data from http://mocap.cs.cmu.edu/\n *  tooling - https://github.com/shausoftware/MoCapParser\n */\n \n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\n#define ZERO (min(iFrame,0))\n#define EPS .005\n#define FAR 80.\n\n#define SCALE 0.4\n\n//Dave Hoskins - improved hash without sin\n//https://www.shadertoy.com/view/XdGfRR\nvec3 hash33(vec3 p) {\n\tuvec3 q = uvec3(ivec3(p)) * UI3;\n\tq = (q.x ^ q.y ^ q.z) * UI3;\n\treturn vec3(q) * UIF;\n}\n\nfloat noise(vec2 uv, float s1, float s2, float t1, float t2, float c1) {\n\treturn clamp(hash33(vec3(uv.xy * s1, t1)).x +\n\t\thash33(vec3(uv.xy * s2, t2)).y, c1, 1.);\n}\n\n//Shane IQ\nfloat n3D(vec3 p) {    \n\tconst vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); \n    p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p * p * (3. - 2. * p);\n    h = mix(fract(sin(h) * 43758.5453), fract(sin(h + s.x) * 43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\n//IQ cosine palattes\n//https://iquilezles.org/articles/palettes\nvec3 palette(float t) {return vec3(.5) + vec3(.5) * cos(6.28318 * (vec3(1.) * t + vec3(0., .33, .67)));}\n\n//distance functions from IQ\n//https://iquilezles.org/articles/distfunctions\n//https://iquilezles.org/articles/distfunctions2d\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.yz),p.x)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBox( vec2 p, vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdSegment( vec2 p, vec2 a, vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xy), p.z );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat smin(float a, float b, float k) {\n\tfloat h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n\tfloat h = clamp( 0.5 + 0.5 * (b - a) / k, 0.0, 1.0 );\n\treturn mix(a, b, h) + k * h * (1.0 - h);\n}\n\nstruct Dic\n{\n    float t;\n    float b;\n    float r;\n    float c;\n    float e;\n    float j;\n    float an;\n    float ar;\n    float m;\n};\n\nvec3 center(vec3 j1, vec3 j2)\n{\n    return j1 + normalize(j2-j1)*length(j2-j1)*0.5 \n              + vec3(-1.0,4.5,0.0);\n}\n\nvec3 align(vec3 p, vec3 j1, vec3 j2)\n{\n    //center body on shoulder joint and rotate\n    //TODO: head nod rotation\n    float s = sign(j1.z-j2.z);\n    vec3 c = center(j1,j2);\n    float a = atan((j1.x-j2.x)/(j1.z-j2.z));\n    float b = asin((j1.y-j2.y)*s/length(j1-j2)); //approx\n    vec3 q = p - c;\n    q.xz *= rot(-a);\n    q.zy *= rot(b);\n    q.x *= s;\n    return q;\n}\n\nvec2 dfHand(vec3 p, vec3 elbow, vec3 wrist, float r)\n{\n    float hr = sin(T*0.33*r)*1.6,\n          tm = max(0.0,sin(T*0.6));\n    vec3 d = normalize(elbow-wrist),\n         hp = vec3(sin(hr),cos(hr),0.0), \n         pe = cross(d,hp);\n         \n    vec3 knuck1 = wrist-d*1.5+pe*1.5,\n         knuck2 = wrist-d*1.5-pe*1.5,\n         tip1 = wrist-d*3.0+pe*(0.5+tm),\n         tip2 = wrist-d*3.0-pe*(0.5+tm);\n    \n    float t = min(sdCapsule(p,wrist,knuck1,0.2),\n              sdCapsule(p,knuck1,tip1,0.2));\n    t = min(t,sdCapsule(p,wrist,knuck2,0.2));\n    t = min(t,sdCapsule(p,knuck2,tip2,0.2));\n    float m = min(sdSphere(p-knuck1,0.4),\n                  sdSphere(p-knuck2,0.4));\n    return vec2(t,m);\n}\n\nDic map(vec3 p)\n{\n    vec3 j9  =  texture(iChannel0, J9/R).xyz  * SCALE;\n    vec3 j10 =  texture(iChannel0,J10/R).xyz  * SCALE;\n    vec3 j11 =  texture(iChannel0,J11/R).xyz  * SCALE;\n    vec3 j12 =  texture(iChannel0,J12/R).xyz  * SCALE;\n    vec3 j13 =  texture(iChannel0,J13/R).xyz  * SCALE;\n    vec3 j14 =  texture(iChannel0,J14/R).xyz  * SCALE;\n    vec3 j15 =  texture(iChannel0,J15/R).xyz  * SCALE;\n    vec3 j16 =  texture(iChannel0,J16/R).xyz  * SCALE;\n\n    float metal = min(length(j11-p)-0.8,length(j12-p)-0.8);\n    metal = min(metal,length(j13-p)-0.8);\n    metal = min(metal,length(j14-p)-0.8);\n    metal = min(metal,length(j15-p)-0.8);\n    metal = min(metal,length(j16-p)-0.8);\n    float arms = min(sdCapsule(p,j11,j12,0.5),\n                     sdCapsule(p,j12,j13,0.5));\n    arms = min(arms, sdCapsule(p,j14,j15,0.5));\n    arms = min(arms, sdCapsule(p,j15,j16,0.5));\n    //hands\n    vec2 hand = dfHand(p,j15,j16,1.0);\n    arms = min(arms,hand.x);   \n    metal = min(metal,hand.y);\n    hand = dfHand(p,j12,j13,-1.0);\n    arms = min(arms,hand.x);   \n    metal = min(metal,hand.y);\n        \n    vec3 q = align(p,j11,j14); \n    q.z = abs(q.z);\n\n    //body\n    float body = max(sdSphere(q-vec3(0,0,1.0),7.0),\n                    -sdBox(q,vec3(7.0,7.0,2.4)));\n    body = min(body,sdSphere(q,7.2));\n    body = max(body,-sdBox(q-vec3(0,0,9.0),vec3(7.0,7.0,2.0)));\n    //cut\n    body = max(body,-sdBox(q-vec3(1.6,-6,5),vec3(2.2,3,1.0)));\n    //rings               \n    float rings = sdTorus(q-vec3(0,0,2.4),vec2(6.8,0.5));\n    //caps\n    float caps = max(sdCappedCone(q-vec3(0,0,7.5),0.5,3.2,1.8),\n                     -sdSphere(q-vec3(0,0,8.0),0.6));\n    //eyes\n    float eyes = max(sdBox(q-vec3(8.0,0,0),vec3(1.8,1.6,3.2))-1.6,\n                     -sdBox(q-vec3(10.2,0,0),vec3(2.8,6.0,6.0)));\n    //jets\n    vec3 q2 = q;\n    q2.xz *= rot(-0.9);\n    q2.xy *= rot(0.5);\n    body = smin(body,sdCappedCylinder(q2-vec3(-7.0,0,0),1.4,1.4),1.0);\n    float jets = sdEllipsoid(q2-vec3(-8.0,0,0),vec3(2.6,0.8,0.8));\n    metal = min(metal,sdSphere(q2-vec3(-8.2,0,0),1.2));\n    //antennae\n    q2.xy *= rot(-1.5);\n    body = smin(body,sdCappedCylinder(q2-vec3(-7.0,0,0),0.9,1.4),1.0);\n    float antennae = sdRoundCone(q2,\n                                 vec3(-10.0,0,0),\n                                 vec3(-18.0,\n                                      sin(T*6.0)*max(0.0,sin(T*0.5)),\n                                      sin(T*1.7)*3.0*sin(T*0.5)),\n                                 0.5,\n                                 0.2);\n    metal = min(metal,sdSphere(q2-vec3(-8.8,0,0),0.9));\n\n    float t = min(body,rings);\n    t = min(t,caps);\n    t = min(t,eyes);\n    t = min(t,jets);\n    t = min(t,antennae);\n    t = min(t,arms);\n    t = min(t,metal);\n    \n    return Dic(t,\n               body,\n               rings,\n               caps,\n               eyes,\n               jets,\n               antennae,\n               arms,\n               metal);\n}\n\nvec3 normal(vec3 p) \n{  \n    vec4 n = vec4(0.);\n    for (int i=ZERO; i<4; i++) \n    {\n        vec4 s = vec4(p, 0.);\n        s[i] += EPS;\n        n[i] = map(s.xyz).t;\n    }\n    return normalize(n.xyz-n.w);\n}\n\n//IQ - https://iquilezles.org/articles/raymarchingdf\nfloat AO(vec3 p, vec3 n) \n{\n    float ra = 0., w = 1., d = 0.;\n    for (int i=ZERO; i<5; i++){\n        d = float(i) / 5.;\n        ra += w * (d - map(p + n*d).t);\n        if (ra>1.) break;\n        w *= .5;\n    }\n    return 1. - clamp(ra,0.,1.);\n}\n\n//IQ\n//https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow( vec3 ro, vec3 rd, float mint, float tmax)\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<60; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).t;\n\n        // improved technique\n        // use this if you are getting artifact on the first iteration, or unroll the\n        // first iteration out of the loop\n        //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, 10.0*d/max(0.0,t-y) );\n        ph = h;\n        \n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    res = clamp( res, 0.0, 1.0 );\n    return res*res*(3.0-2.0*res);\n}\n\nfloat dfCap(vec2 p)\n{\n    return min(max(length(p)-1.4,-(length(p-vec2(0.0,0.5))-1.4)),\n               length(p)-0.6); \n}\n\nfloat dfBody(vec2 p)\n{\n    return min(sdBox(p-vec2(0.0,7.0),vec2(0.6,2.0)),\n               sdBox(p-vec2(1.6,0.0),vec2(0.4,4.4)));\n}\n\nfloat dfScreen(vec2 p)\n{\n    return sdBox(p,vec2(3.5,1.9))-0.6;\n}\n\nvec3 capBump(vec3 p, vec3 n)\n{\n    vec4 d = vec4(0.);\n    for (int i=ZERO; i<4; i++) \n    {\n        vec4 s = vec4(p,0.);\n        s[i] += EPS;\n        d[i] = smoothstep(0.04,0.0,abs(dfCap(s.xy)));\n    }\n    return normalize(n-d.xyz*0.4);\n}\n\nvec3 bodyBump(vec3 p, vec3 n)\n{\n    vec4 d = vec4(0.);\n    for (int i=ZERO; i<4; i++) \n    {\n        vec4 s = vec4(p,0.);\n        s[i] += EPS;\n        float t = dfBody(s.zy);\n        t = min(t,sdSegment(s.zy,vec2(-2.4,4.4),vec2(2.4,4.4)));\n        t = min(t,sdSegment(s.zy,vec2(5.4,6.0),vec2(5.4,-6.0)));\n        t = min(t,sdSegment(s.zy,vec2(2.4,5.0),vec2(5.4,5.0)));\n        d[i] = smoothstep(0.2,0.0,abs(t));\n    }\n    return normalize(n-d.xyz*0.4);\n}\n\nvec3 screenBump(vec3 p, vec3 n) {\n    vec4 d = vec4(0.);\n    for (int i=ZERO; i<4; i++) \n    {\n        vec4 s = vec4(p,0.);\n        s[i] += EPS;\n        d[i] = smoothstep(0.1,0.0,abs(dfScreen(s.zy)));\n    }\n    return normalize(n-d.xyz);\n}\n\nmat3 camera(vec3 la, vec3 ro, float cr)\n{\n\tvec3 cw = normalize(la - ro),\n\t     cp = vec3(sin(cr),cos(cr),0.),\n\t     cu = normalize(cross(cw,cp)),\n\t     cv =          (cross(cu,cw));\n    return mat3(cu,cv,cw); \n}\n\nvoid mainImage(out vec4 C, vec2 U)\n{\n    vec3 col = vec3(0.0),\n         gc = vec3(0.0),\n         la = vec3(0,32,0),\n         lp = vec3(0,60,0),\n         ro = vec3(0,32.0+sin(T*0.2)*10.0,-35);\n    \n    //background\n    float cy = 1. - abs((U/R).y-.5)*2.;\n    col = 0.2*palette(T*.01)*pow(cy,3.)+vec3(1.)*pow(cy,18.);\n    col *= noise(U/R,64.,16.,float(iFrame),float(iFrame),.96);\n    col *= sin(((U/R).y+T*0.05)*1200.0)*0.1+0.9;\n    \n    ro.xz *= rot(T*0.4-1.7);\n    \n    vec2 uv = (2.0*(U) - R.xy)/R.y;\n    vec3 rd = camera(la, ro, 0.0) * normalize(vec3(uv, 1.4)); \n\n    //ray-marching\n    float t = 0.;\n    Dic ns;\n    for (int i=ZERO; i<160; i++)\n    {\n        ns = map(ro + rd*t);\n        if (abs(ns.t)<EPS) break;\n        \n        gc += vec3(0.3,0.3,1.0)*0.1/(1.0+ns.j*ns.j*4.0);\n        \n        t += ns.t;\n        if (t>FAR)\n        {\n            t = -1.;\n            break;\n        }\n    }\n    \n    if (t>0.)\n    {\n        vec3 p = ro + rd*t;\n        vec3 n = normal(p);\n        vec3 ld = normalize(lp-p);\n       \n        vec3 j11 = texture(iChannel0,J11/R).xyz*SCALE;\n        vec3 j14 = texture(iChannel0,J14/R).xyz*SCALE;\n        vec3 cen = center(j11,j14); \n        vec3 q = align(p,j11,j14);\n        float nz = n3D(q)*n3D(q*vec3(0.3,0.5,0.2));\n        \n        bool useDiff = true;\n        vec3 sc = vec3(0.0);\n        if (ns.t==ns.b) \n        {\n            //body\n            q = abs(q);\n            n = bodyBump(q,n);\n            sc = mix(vec3(1.0)*nz,vec3(1.0),0.5+nz*0.6);\n            if (dfBody(q.zy)<0.0)\n            {\n                sc = vec3(1.0,0.2,0);\n            }\n        } \n        else if (ns.t==ns.r)\n        {\n            //rings\n            q.z = abs(q.z);\n            if (abs(q.z-2.4)>0.15)\n            {\n                sc = texture(iChannel1,reflect(rd,n)).xyz;\n            }\n        }\n        else if (ns.t==ns.c)\n        {\n            //caps\n            n = capBump(q,n);\n            sc = mix(vec3(1,0.2,0)*nz,vec3(1,0.2,0),0.5+nz*0.6);\n            if (dfCap(q.xy)<0.0)\n            {\n                sc = texture(iChannel1,reflect(rd,n)).xyz;\n            }\n        }\n        else if (ns.t==ns.e)\n        {\n            //eyes\n            n = screenBump(q,n);\n            q.z = abs(q.z);\n            if (dfScreen(q.zy)>0.0) {\n                //metal surround\n                sc = texture(iChannel1,reflect(rd,n)).xyz;\n            }\n            else\n            {\n                //eye animation\n                useDiff = false;\n                float a = 0.0;\n                float at = sin(T*0.7) + sin(T*2.3)*sin(T*0.5);\n                if (abs(at)<0.1)\n                {\n                    a = sdBox(q.zy-vec2(1.8,0.0),vec2(0.8,0.2));\n                }\n                else if (at>0.2)\n                {\n                    a = max(sdBox(q.zy-vec2(1.8, 0.4),vec2(0.2,0.2))-0.8,\n                          -(sdBox(q.zy-vec2(1.8,-1.4),vec2(0.2,0.6))-0.8));\n                }\n                else if (at<0.2)\n                {\n                    a = max(sdBox(q.zy-vec2(1.8,-0.6),vec2(0.2,0.2))-0.8,\n                          -(sdBox(q.zy-vec2(1.8,-1.4),vec2(0.2,0.6))-0.8));\n                }\n                if (a<0.0)\n                {\n                    sc = vec3(0.5,0.5,1.0);\n                }\n                sc *= sin((q.y)*20.0)*sin((q.z)*20.0);\n            }\n        }\n        else if (ns.t==ns.j)\n        {\n            //jets\n            useDiff = false;\n            sc = vec3(0.5,0.5,1);\n        }\n        else if (ns.t==ns.an)\n        {\n            //antennae\n            sc = mix(vec3(1.0)*nz,vec3(1.0),0.5+nz*0.6);\n            float tc = length(p-cen);\n            if (tc>16.0)\n            {\n                sc = vec3(1.0,0.2,0);\n            }\n            if (tc>12.0 && tc<13.0)\n            {\n                sc = vec3(0);\n            }\n        }\n        else if (ns.t==ns.ar)\n        {\n            //arms\n            sc = vec3(1.0);\n        }\n        else if (ns.t==ns.m)\n        {\n            //metal\n            sc = texture(iChannel1,reflect(rd,n)).xyz;\n        }\n        \n        float ao = AO(p,n);\n        float diff = max(0.01,dot(ld,n));\n        float spec = pow(max(dot(reflect(-ld,n),-rd),0.0),16.0);\n        //float fres = 1.0-pow(clamp(dot(n,rd)+1.0,0.0,1.0),2.0);\n        \n        col = sc*ao;\n        if (useDiff)\n        {\n            col *= diff*calcSoftshadow(p,ld,EPS,FAR);\n        }\n        col += vec3(1.0)*spec;\n        col += vec3(0,0.2,0.6)*0.01*max(n.y*-1.0,0.0);\n    }\n    \n    col = pow(col, vec3(0.3545));\n    col += gc;\n    \n    C = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by SHAU - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n#define R iResolution.xy\n#define T iTime\n\n//Fabrice - compact rotation\nmat2 rot(float x) {return mat2(cos(x), sin(x), -sin(x), cos(x));}\n\n/* MOVE TO COMMON - START */\n#define J9 vec2(8.5, 0.5)\n#define J10 vec2(9.5, 0.5)\n#define J11 vec2(10.5, 0.5)\n#define J12 vec2(11.5, 0.5)\n#define J13 vec2(12.5, 0.5)\n#define J14 vec2(13.5, 0.5)\n#define J15 vec2(14.5, 0.5)\n#define J16 vec2(15.5, 0.5)\n/* MOVE TO COMMON - END */\n\n//fourier frames\n#define FFRAMES 14\n#define FFRAMES_LOW_RES 18","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by SHAU - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//-----------------------------------------------------\n\n//original number of frames sampled\n#define OFS 460.0\n#define xOffs 12494.0\n#define yOffs 1526.0\n#define zOffs 1451.0\n\n#define R iResolution.xy\n\nvec2 decode16bit(uint d) {\n    return vec2(d >> 16U, d & 0x0000FFFFU);\n}\n\nvec3 posD(uint[FFRAMES] eX, uint[FFRAMES] eY, uint[FFRAMES] eZ, float h, vec2 U) {\n    vec3 q = vec3(0.0);\n    for (int k=0; k<FFRAMES; k++) {\n        float w = (k==0) ? 1.0 : 2.0;\n        float an = -6.283185*float(k)*h;\n        vec2 ex = vec2(cos(an), sin(an));\n        q.x += w*dot(decode16bit(eX[k]) - xOffs,ex)/OFS;\n        q.y += w*dot(decode16bit(eY[k]) - yOffs,ex)/OFS;\n        q.z += w*dot(decode16bit(eZ[k]) - zOffs,ex)/OFS;\n    }\n    return q;\n}\n\nvoid mainImage(out vec4 C, vec2 U) {\n\n    float h = mod(floor(T*5.), 100.) / 100.;\n    uint eX[FFRAMES], eY[FFRAMES], eZ[FFRAMES];\n    if (U==J9) {\n        eX = uint[14] (0x77630ceU,0x376a2b0aU,0x2a93315cU,0x2cc43426U,0x2fd62f24U,0x30b92fa7U,0x316b30e2U,0x30e33167U,0x308a3144U,0x30923129U,0x30983143U,0x308f30deU,0x30b630bfU,0x30c830d4U);\n        eY = uint[14] (0x87e605f6U,0x5e005f1U,0x61f0575U,0x5de05b8U,0x644063aU,0x6130626U,0x61f0683U,0x5e8060dU,0x5e805f1U,0x5e205abU,0x5fb05faU,0x60905caU,0x5e705d4U,0x6070621U);\n        eZ = uint[14] (0xb7405abU,0x1f50dbaU,0xdca0bdcU,0xb75068bU,0x61609f9U,0x6600949U,0x567081fU,0x5e60761U,0x516064fU,0x57c06a9U,0x5b6062eU,0x5c60618U,0x5a7064cU,0x5eb0625U);\n    }\n    else if (U==J10) {\n        eX = uint[14] (0x83e30ceU,0x35cf2c1cU,0x2c7e3095U,0x2ce534e8U,0x302a3092U,0x30ba2febU,0x31533123U,0x30ba312aU,0x30793157U,0x30f530d5U,0x30ab3109U,0x30be3101U,0x30de30cdU,0x30d930e0U);\n        eY = uint[14] (0x940f05f6U,0x62405d2U,0x63a05daU,0x5f005afU,0x62d0627U,0x5ed0603U,0x61e067bU,0x5ee05e3U,0x5e005efU,0x5e905b4U,0x60405e5U,0x61805dcU,0x5e305ddU,0x6050615U);\n        eZ = uint[14] (0xfc405abU,0x12f0fa5U,0xe0a0a52U,0xafc0687U,0x66a0932U,0x62e08d0U,0x58c0780U,0x5bb06e6U,0x56e0608U,0x5a50633U,0x5b50624U,0x5f0060eU,0x5ad0628U,0x5ce0622U);\n    }\n    else if (U==J11) {\n        eX = uint[14] (0x2db30ceU,0x35042d4fU,0x2e7433baU,0x2fde33f1U,0x30053410U,0x31c73176U,0x30443225U,0x311d3257U,0x2fae314dU,0x3081317aU,0x30e23117U,0x30903101U,0x30e93136U,0x3109310eU);\n        eY = uint[14] (0x81ed05f6U,0x6220574U,0x62b05e9U,0x5bc0630U,0x6160616U,0x5ca05fdU,0x5ea0670U,0x5ea05e6U,0x5eb05edU,0x5f905b2U,0x60705d9U,0x62905d8U,0x5f105d4U,0x6090628U);\n        eZ = uint[14] (0x13f305abU,0x1f81208U,0xea307adU,0x86a071aU,0x7e60b84U,0x62307fdU,0x4bd079dU,0x61d05e0U,0x59c057aU,0x69e05abU,0x5f505acU,0x6320654U,0x5f90658U,0x5e2060fU);\n    }\n    else if (U==J12) {\n        eX = uint[14] (0x30ceU,0x362f2db2U,0x2f15350bU,0x312b338eU,0x2f7e36d7U,0x31ef3287U,0x2f293211U,0x30f8327fU,0x2f8e30c0U,0x3101310aU,0x308c3140U,0x30e130e4U,0x317f315dU,0x30f031b1U);\n        eY = uint[14] (0x6c7a05f6U,0x6040588U,0x6410650U,0x5cb0702U,0x62f063fU,0x57b0600U,0x61706a9U,0x59105cbU,0x5aa063dU,0x60c05daU,0x6020593U,0x5f505c9U,0x5c305c8U,0x61b0612U);\n        eZ = uint[14] (0x169305abU,0x14e12c3U,0xe1405eaU,0x68106ceU,0x8300d00U,0x6b005faU,0x43b0647U,0x6d60542U,0x6df054cU,0x7f70599U,0x62205fbU,0x63f066fU,0x5dd06ceU,0x60905fdU);\n    }\n    else if (U==J13) {\n        eX = uint[14] (0xb5e30ceU,0x381d3422U,0x3115304fU,0x2cf834c7U,0x318237afU,0x31493132U,0x2e1332d3U,0x310f30c3U,0x302d2e9aU,0x31452ee1U,0x2fcf30e4U,0x31463098U,0x313e30faU,0x30be3153U);\n        eY = uint[14] (0x63bf05f6U,0x934043cU,0x5420733U,0x5e007b8U,0x43d0648U,0x3930690U,0x5dc06f6U,0x62c063bU,0x5ef068fU,0x6ca0642U,0x5d905eaU,0x55a0503U,0x5c405baU,0x6080661U);\n        eZ = uint[14] (0x190805abU,0x59d0c6aU,0x9a403adU,0x12408d0U,0x7520718U,0x5b50216U,0x5ab052dU,0x6340460U,0x74c059dU,0x74a05faU,0x67005c4U,0x6590635U,0x58f0698U,0x6100504U);\n    }\n    else if (U==J14) {\n        eX = uint[14] (0x100d30ceU,0x39e72b3fU,0x27b92d4bU,0x28eb3478U,0x301f2bf1U,0x2fc12db1U,0x320a2effU,0x308d300fU,0x3187309eU,0x31362ffdU,0x3064312cU,0x30f930c4U,0x30d7304fU,0x306730dbU);\n        eY = uint[14] (0x84ea05f6U,0x52d07beU,0x51004ecU,0x658050bU,0x65f06ebU,0x654065bU,0x5fe068bU,0x5cd05fdU,0x60505a4U,0x5f8058aU,0x5f4062cU,0x5fa05caU,0x5bb05c4U,0x61a05fdU);\n        eZ = uint[14] (0x75405abU,0x38f092bU,0x9b70e79U,0xc8305aaU,0x44d063eU,0x5cd0924U,0x6340777U,0x6060820U,0x54106cdU,0x4ad078dU,0x52d06e9U,0x56c05bfU,0x56c0615U,0x5ea0651U);\n    }\n    else if (U==J15) {\n        eX = uint[14] (0x15e130ceU,0x392d2eabU,0x23eb2b72U,0x2941346bU,0x2fcf2a0dU,0x2f6f2f44U,0x318e2dd6U,0x2f372fc5U,0x32032f75U,0x32572f0fU,0x2fe03143U,0x31fc30f6U,0x30ae3047U,0x3004318bU);\n        eY = uint[14] (0x70fe05f6U,0x2ed0db9U,0x11c028bU,0x83e02e9U,0x721089dU,0x5dd071bU,0x5a3065bU,0x5ae05d1U,0x632050dU,0x6c205bfU,0x5c50677U,0x5c405dbU,0x53d0571U,0x6a805afU);\n        eZ = uint[14] (0x21805abU,0x54c080dU,0x8fd1360U,0xcf10504U,0x3eb0402U,0x54d08e4U,0x6b1066cU,0x72e08baU,0x6300759U,0x3c40946U,0x4a00872U,0x5020503U,0x5ec0693U,0x60b06d0U);\n    }\n    else if (U==J16) {\n        eX = uint[14] (0x1dbc30ceU,0x380833f7U,0x27bb273eU,0x274834b3U,0x32b52d51U,0x2fa02f75U,0x31182d90U,0x2eec2e7cU,0x31bd2ed2U,0x33f82d7bU,0x2fb230a8U,0x31ff3133U,0x31432f95U,0x30223196U);\n        eY = uint[14] (0x72f005f6U,0x2111d8U,0x430U,0xaad0327U,0x5ba0902U,0x51f06baU,0x3f80693U,0x5b704a8U,0x5d404a2U,0x6140641U,0x5cb05ffU,0x58405feU,0x5c304fcU,0x72205e8U);\n        eZ = uint[14] (0xa6e05abU,0x8d307b5U,0x3361072U,0xa360402U,0x208006fU,0x4d805dfU,0x75a046bU,0x55f06f5U,0x86b07b0U,0x3a30794U,0x3cb08a4U,0x6480579U,0x5cb0639U,0x4ce06e5U);\n    }\n    vec3 q = posD(eX,eY,eZ,h,U);\n    if (iFrame>0) {\n        q = mix(q,texelFetch(iChannel0, ivec2(U),0).xyz,0.7);\n    }\n    C = vec4(q.x,q.y,q.z,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}