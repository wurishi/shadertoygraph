{"ver":"0.1","info":{"id":"mtS3DR","date":"1673114036","viewed":254,"name":"Randomized H-Curves","username":"mla","description":"Place a tile at points with even coordinates. Then join up into H-shaped blocks, with randomized alignment ('a' for fixed alignment) - the tiled boundary is a space-filling curve.","likes":18,"published":3,"flags":16,"usePreview":0,"tags":["spacefilling","hcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////////////////////////////////////////////\n//\n// Randomized H-curves, mla 2023.\n//\n// Inspired by https://www.shadertoy.com/view/mlS3Rm by MartyMcFly\n// but a completely different tiling based method. See references\n// therein for more details.\n//\n// 'a': fixed alignment of H's\n// 'b': 'alternating' alignment\n// 'c': no fill colour\n// 'x': progressive scale\n// 'y': progressive fill\n// 'z': zoom in one level\n//\n//////////////////////////////////////////////////////////////////////\n\nint N = 63;       // Work with NxN array of tiles\nint maxdepth = 1024; // Maximum depth of joining\n\nint bbit(int n) {\n  // Result has a 1-bit at position of rightmost zero in n\n  // ..xxx0111.. -> ..XXX1000.. & ..xxx1000.. -> ..0001000..\n  return ~n & (n+1);\n}\n\nint check(ivec2 p) {\n  int x = p.x, y = p.y;\n  // Is the joiner block at (x,y) horizontal or vertical?\n  // Return 0 for horizontal, 1 for vertical\n  if (key(CHAR_B)) {\n    // Alternate at each level - experimental\n    int bb = bbit(x);\n    assert(bb == bbit(y));\n    int res = 1;\n    while (bb != 0) { res = 1-res; bb >>= 1; } // use popcnt!\n    return res;\n  }\n  if (key(CHAR_A)) return 0;\n  uint h = ihash(uint(x)^ihash(uint(y)^uint(iTime)));\n  return int(h&1u);\n}\n\nint ttype(ivec2 ix) {\n  // Get tile type at index ix, there are tiles at all even coordinates.\n  // (2a,2b), then tiles are joined together by \"joiner blocks\" at\n  // (2a,2b+1),(2a+1,2b+1),(2a+2,2b+1) (or same with x,y flipped).\n  // The central tile of a joiner block has the same number of trailing\n  // 1s in the x and y coordinate (ie. bbit(x) == bbit(y)).\n  // check(x,y) says if the joiner block centred on (x,y) is\n  // horizontal or vertical.\n  int x = ix.x, y = ix.y;\n  if (x < 0 || y < 0) return 0;\n  if (x >= N || y >= N) return 0;\n  int bbx = bbit(x), bby = bbit(y);\n  if (bbx == bby && (bbx == 1 || bbx < maxdepth)) return 1;\n  int blocktype = -1; ivec2 block;\n  if (bby > 1 && bby < maxdepth) {\n    int bbx0 = bbit(x-1), bbx1 = bbit(x+1);\n    if (bbx0 == bby) { blocktype = 0; block = ivec2(x-1,y); }\n    if (bbx1 == bby) { blocktype = 0; block = ivec2(x+1,y); }\n  }\n  if (bbx > 1 && bbx < maxdepth) {\n    int bby0 = bbit(y-1), bby1 = bbit(y+1);\n    if (bbx == bby0) { blocktype = 1; block = ivec2(x,y-1); }\n    if (bbx == bby1) { blocktype = 1; block = ivec2(x,y+1); }\n  }\n  if (blocktype < 0) return 0;\n  return int(check(block) == blocktype);\n}\n  \nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  if (key(CHAR_X)) N = (1<<(int(mod(iTime,8.0)+1.0)))-1;\n  if (key(CHAR_Y)) maxdepth = 1<<int(mod(iTime,8.0));\n  if (key(CHAR_Z)) N = 2*N+1;\n  float lwidth = 0.02;\n  vec2 p = 1.05*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n  p += 1.0;\n  p *= 0.5*float(N);\n  float px = fwidth(p.x);\n  vec3 col = vec3(0.8);\n  if (min(p.x,p.y) > -0.5 && max(p.x,p.y) < float(N)+0.5) {\n    ivec2 ix = ivec2(floor(p));\n    p = fract(p);\n    int tt = ttype(ix);\n    // Now find adjacent tile type\n    float dx0 = p.x, dx1 = 1.0-p.x;\n    float dy0 = p.y, dy1 = 1.0-p.y;\n    float d = min(min(dx0,dx1),min(dy0,dy1));\n    ivec2 delta;\n    if (d == dx0) delta = ivec2(-1,0);\n    if (d == dx1) delta = ivec2(1,0);\n    if (d == dy0) delta = ivec2(0,-1);\n    if (d == dy1) delta = ivec2(0,1);\n    int tt1 = ttype(ix+delta);\n    if (!key(CHAR_C) && tt != 0) col = vec3(1,1,0.1);\n    p = min(p,1.0-p);\n    if (tt != tt1) {\n      col *= smoothstep(0.0,px,min(p.x,p.y)-lwidth);\n    }\n    col *= smoothstep(0.0,px,length(p)-1.4*lwidth);\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}","name":"Common","description":"","type":"common"}]}