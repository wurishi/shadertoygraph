{"ver":"0.1","info":{"id":"Nl3fRX","date":"1663381766","viewed":145,"name":"Bit depth visualization","username":"absence","description":"Visualize how different bit depth color ranges will fit onto your display.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["visualize","bitdepth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BIT_DEPTH 5.\n// bit depth 5 is being used to simulate color banding\n// defaults for almost all consumer displays are bit-depth 8\n// however, some high end equipment sometimes also use 10-bit\nconst float precisionAmount = 1. / ( pow( 2., BIT_DEPTH ) - 1.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n       \n    bool showRed = true;\n    bool showGreen = true;\n    bool showBlue = true;\n    \n    float r = clamp( precisionAmount * round( uv.x / precisionAmount ), 0., 1. ) - float(!showRed);\n    float g = clamp( precisionAmount * round( uv.x / precisionAmount ), 0., 1. ) - float(!showGreen);\n    float b = clamp( precisionAmount * round( uv.x / precisionAmount ), 0., 1. ) - float(!showBlue);\n    vec3 col = vec3(r,g,b);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}