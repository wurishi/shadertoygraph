{"ver":"0.1","info":{"id":"ftt3RS","date":"1636274805","viewed":87,"name":"Light0.15315648","username":"chanchancl","description":"light","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n  const uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvec2 sdfCircle(vec2 p, vec2 o, float r, float emssive) {\n    return vec2(length(p - o) - r, emssive);\n}\n\nvec2 unionOp(vec2 sd1, vec2 sd2) {\n    //       ------\n    //       / \\  \n    // -----0---*---\n    //\n    if (sd1.x < sd2.x) {\n        return sd1;\n    }\n    return sd2;\n}\n\nvec2 scene(vec2 p) {\n    vec2 circle1 = sdfCircle(p, vec2(0.0, 0.4), 0.2, 0.0);\n    vec2 circle2 = sdfCircle(p, vec2(-0.6 + 0.3*cos(7.0*iTime), -0.6 + 0.3*sin(7.0*iTime)), 0.1, 1.0 + 1.0);\n    vec2 circle3 = sdfCircle(p, vec2(0.6 + 0.3*cos(3.0*iTime),  -0.6 - 0.3*cos(3.0*iTime)), 0.2, 2.0);\n\n    return unionOp(unionOp(circle1, circle2), circle3);\n}\n\n\nfloat trace(vec2 p, vec2 d, float r) {\n  float t = 0.0;\n  for(int i = 0; i < 64 && t < 3.0; i++ ){\n    // float sd = sdfCircle(p + t * d, r);\n    vec2 result = scene(p + t *d);\n    float sd = result.x;\n    if (sd <= 0.00001) {\n        return result.y /*- cos(150.0*t)*/ /*- sin(30.0*d.x*d.y+ 10.0*iTime)*/;\n    }\n    t += sd;\n  }\n  return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 a = hash(uvec3(fragCoord, iFrame));\n    float rand = a.x+a.y+a.z;\n    float R = 0.15 /*+ abs(0.1 * cos(2.0 * iTime))*/;\n    \n    float sum = 0.;\n    float N = 128.0;\n    for(float i=0.0; i < N; i++) {\n      //float a = 2.0 * 3.1415926 * i / N;\n      float a = 2.0 * 3.1415926 * (i + rand) / N;\n      sum += trace(uv, vec2(cos(a), sin(a)), R);\n    }\n    vec3 col = vec3(sum / N);\n    \n    // col = mix(col, vec3(1.0, 0., 0.), 1.0 - smoothstep(0.0, 0.01, abs(length(uv)-R)) );\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}