{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"const float kInvPi = 1.0 / 3.141592;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Define how blurry the circle should be. \n    // A value of 1.0 means 'sharp', larger values\n    // will increase the bluriness.\n    float bluriness = 1.0;\n    \n    // In the range (0, 1].\n    float radius = 0.75;\n    \n    // In the range (0, 1].\n    float thickness = 0.2;\n    \n    // In the range (0, 1].\n    float len = 0.65 + 0.4 * cos( iTime );\n    \n    // Optional offset.\n    float offset = 0.1 * iTime;\n    \n    // Calculate texture coordinates. Normally you would\n    // simply pass them from the vertex shader.\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Convert from range [0,1] to [-1,1]\n    uv = 2.0 * uv - 1.0;\n    \n    // Adjust for the aspect ratio. Not necessary if\n    // you supplied texture coordinates yourself.\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    // Calculate distance to (0,0).\n    float d = length( uv );\n    \n    // Calculate angle, so we can draw segments, too.\n\tfloat angle = atan( uv.x, uv. y ) * kInvPi * 0.5;\n\tangle = fract( angle - offset );\n    \n    // Create an anti-aliased circle.\n    float wd = bluriness * fwidth( d );\n    float circle = smoothstep( radius + wd, radius - wd, d );\n    \n    // Optionally, you could create a hole in it:\n    float inner = radius - thickness;\n    circle -= smoothstep( inner + wd, inner - wd, d );\n    \n    // Or only draw a portion (segment) of the circle.\n    float wa = bluriness * fwidth( angle );\n    float segment = smoothstep( len + wa, len - wa, angle );\n\tsegment *= smoothstep( 0.0, 2.0 * wa, angle );    \n    circle *= mix( segment, 1.0, step( 1.0, len ) );\n        \n    // Let's define the circle's color now.\n    vec3 rgb = vec3( 1.0, 0.4, 0.1 ) * circle;     \n    \n    // Output final color.\n    fragColor = vec4( rgb, 1);    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mll3D4","date":"1422211927","viewed":1453,"name":"Stroked Circle Segment","username":"droozle","description":"Shows how to draw an anti-aliased stroked circle segment in the fragment shader.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["example","circle"],"hasliked":0,"parentid":"","parentname":""}}