{"ver":"0.1","info":{"id":"4fj3Dw","date":"1704299454","viewed":73,"name":"plant in a bowl","username":"jt","description":"A [url=https://www.shadertoy.com/view/dtGBDz]grass plant[/url] with some [url=https://www.shadertoy.com/view/mtVfzy]pebbles and volcanic sand[/url] in a bowl.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["sdf","flower","circle","grass","grass","distance","conformal","disk","plant","sand","loopless","orthogonal","volcanic","pebbles","bowl"],"hasliked":0,"parentid":"dtGBDz","parentname":"orthogonal circles grassy plant"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4fj3Dw plant in a bowl, 2024 by jt\n// based on https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant\n// combined with https://www.shadertoy.com/view/mtVfzy pebbles on volcanic beach\n\n// A grass plant with some pebbles and volcanic sand in a bowl.\n\n// TODO: Consider pebbles of different sizes (via problem of apollonius).\n\n// related:\n// https://www.shadertoy.com/view/mtVfzy pebbles on volcanic beach\n// https://www.shadertoy.com/view/clKBRc pebbles plants on volcanic beach\n// https://www.shadertoy.com/view/DlKBz3 orthogonal circles iterate plant\n// https://www.shadertoy.com/view/mtyfDz orthogonal circles grassy plains\n// https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant\n\n// tags: sdf, flower, circle, grass, grass, distance, conformal, disk, plant, sand, loopless, orthogonal, volcanic, pebbles, bowl\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define EPSILON 0.0001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat ortho_circle_flower_sdf(int n, vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    n = 2*n+1; // n must be odd\n    float slice = pi/float(n);\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nfloat ortho_circle_flower_sdf(int m, int n, vec3 p) // https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant (jt)\n{\n    float phi = round(atan(p.y,p.x)/(2.0*pi/float(m)))*(2.0*pi/float(m)); // polar & quantize\n    p.xy = mat2(cos(phi),-sin(phi),sin(phi),cos(phi))*p.xy;\n    return length(vec2(ortho_circle_flower_sdf(n, vec2(p.xz)),p.y));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // https://www.shadertoy.com/view/tdS3DG generic ellipsoid - improved approximated distance by iq\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// For practice, this time I've implemented most SDFs from scratch.\n// Thanks to iq & others for teaching this technique!\n// (see https://iquilezles.org/articles/distfunctions/ )\n\nfloat plane(vec3 p)\n{\n    return abs(p.z);\n}\n\nfloat point(vec3 p)\n{\n    return length(p);\n}\n\nfloat line(vec3 p)\n{\n    return length(p.xy);\n}\n\nfloat wire(float d0, float d1) // 3dify? https://www.shadertoy.com/view/sdscDs insulate\n{\n    return length(vec2(d0, d1));\n}\n\nfloat ring(vec3 p, float r)\n{\n    return wire(line(p)-r, p.z);\n}\n\nfloat disc(vec3 p, float r)\n{\n    return line(p) < r ? plane(p) : ring(p,r);\n}\n\nfloat ball(vec3 p, float r)\n{\n    return point(p)-r;\n}\n\nfloat halfball(vec3 p, float r)\n{\n    return p.z < 0.0 ? ball(p,r) : disc(p,r);\n}\n\nfloat shell(float d)\n{\n    return abs(d);\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return shell(ball(p,r));\n}\n\nfloat bowl(vec3 p, float r)\n{\n    return p.z > 0.0 ? ring(p,r) : sphere(p,r);\n}\n\nstruct result\n{\n    vec3 col;\n    float dist;\n    float spec;\n};\n\nresult combine(result a, result b)\n{\n    if(a.dist < b.dist) return a;\n    return b;\n}\n\nresult plant_in_a_bowl(vec3 p)\n{\n    float r = 1.0;\n    float t = 0.025;\n    float s = 2.0*sqrt(3.0)-3.0;\n    return\n        combine\n        (\n            combine\n            (\n                result(vec3(1,0.1,0.04),bowl(p,r+t)-t,0.0),\n                result(vec3(mix(0.05,0.1,hash12(p.xy*100.0))),halfball(p,r),0.0)\n            ),\n            combine\n            (\n                result(vec3(0.1,1,0.01),ortho_circle_flower_sdf(5, 4, p-vec3(0,0,1))-0.01,1.0),\n                combine\n                (\n                    result(vec3(0.75),sdEllipsoid(p-vec3(0,1.0-s,0),vec3(s,s,s/2.0)),1.0),\n                    combine\n                    (\n                        result(vec3(0.5),sdEllipsoid(p-vec3(+s,-0.125/s,0),vec3(s,s,s/2.0)),1.0),\n                        result(vec3(0.25),sdEllipsoid(p-vec3(-s,-0.125/s,0),vec3(s,s,s/2.0)),1.0)\n                    )\n                )\n            )\n        );\n}\n\nresult map(vec3 p)\n{\n    return plant_in_a_bowl(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).dist\n            +\n            k.yyx * map(p + k.yyx*h).dist\n            +\n            k.yxy * map(p + k.yxy*h).dist\n            +\n            k.xxx * map(p + k.xxx*h).dist\n        );\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    result h = result(vec3(0), DIST_MAX, 0.0);\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        h = map(ro + rd * t);\n        if(h.dist < EPSILON)\n            return result(h.col,t,h.spec);\n        t += h.dist;\n    }\n\n    return result(h.col,t, h.spec); // stop on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : pi / 3.0 + 2.0 * pi * fract(iTime/100.0);\n    //pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n    pitch = !demo ? pitch : 3.5/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : 3.2/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : (0.5-0.5*cos(iTime/pi/10.0)+3.0)/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-3.5);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 0.5;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    //vec3 lightdir = normalize(vec3(-1.0,-2.0, 3.0));\n    vec3 lightdir = normalize(vec3(-2.0,-1.0, 3.0));\n\n    result res = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = res.col;\n    float dist = res.dist;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular * res.spec;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}