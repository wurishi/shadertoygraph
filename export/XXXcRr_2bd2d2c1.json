{"ver":"0.1","info":{"id":"XXXcRr","date":"1725706657","viewed":62,"name":"Simple Guiding Light Shader","username":"monkeyworks","description":"Simple Mouse-Triggered Guiding Light Shader with commented code for easy learning.\n","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","reactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 resolution = iResolution.xy;\n    float time = iTime * 0.5;\n    vec2 uv = (fragCoord.xy * 2.0 - resolution.xy) / resolution.y;\n    vec2 mouse = (iMouse.xy * 2.0 - resolution.xy) / resolution.y;\n\n    // Ensure mouse position is valid (avoid 0,0 when mouse hasn't moved)\n    if (mouse == vec2(0.0)) {\n        mouse = vec2(0.0, -1.0); // Default position off-screen\n    }\n\n    // Calculate distance from current pixel to mouse position\n    float dist = length(uv - mouse);\n\n    // Create a circular mask around the mouse\n    float mask = smoothstep(0.3, 0.0, dist);\n\n    // Create wave effect\n    float wave = sin(dist * 10.0 - time * 3.0) * 0.5 + 0.5;\n    wave *= exp(-dist * 3.0); // Fade out with distance\n\n    // Mix wave effect with mask\n    float finalWave = wave * mask;\n\n    // Generate color\n    vec3 col = palette(finalWave + time * 0.4);\n\n    // Apply wave effect to color\n    vec3 finalColor = col * finalWave;\n\n    // Add a subtle glow\n    finalColor += col * 0.2 * mask;\n\n    // Smooth transition to background\n    finalColor = mix(vec3(0.0), finalColor, mask);\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}