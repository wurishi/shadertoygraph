{"ver":"0.1","info":{"id":"XftSWS","date":"1714413139","viewed":52,"name":"Fork Psychedeli sleeplessm 667","username":"sleeplessmonk","description":"fullscreen recommended","likes":2,"published":1,"flags":4,"usePreview":0,"tags":["psychedelic","glow","neon"],"hasliked":0,"parentid":"dlGSR1","parentname":"Psychedelic emergence of forms"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t, float audio) {\n    vec3 a = vec3(1.338, 0.500, 0.538);\n    vec3 b = vec3(1.807, 0.319, 0.641) * audio;\n    vec3 c = vec3(0.192, 1.020, 1.020);\n    vec3 d = vec3(-1.422, -1.088, 0.587);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float audioBass = texture(iChannel0, vec2(0.01, 0.5)).r; // Low frequencies\n    float audioHigh = texture(iChannel0, vec2(0.15, 0.5)).r; // High frequencies\n    float time = iTime * (0.3 + 0.2 * audioBass);\n\n    vec3 sampledCol = vec3(0.0);\n    int samples = 4; // Reduced for performance considerations\n\n    for (int x = 0; x < samples; x++) {\n        for (int y = 0; y < samples; y++) {\n            vec2 offset = vec2(float(x), float(y)) / float(samples);\n            vec2 uv = 2.0 * (fragCoord + offset) / iResolution.xy - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            uv *= 0.5 * (1.0 + audioHigh);\n\n            vec3 finalColor = vec3(0.0);\n            vec2 uv0 = uv;\n\n            for (float i = 3.0; i < 6.0; i++) {\n                uv *= 1.4 + 0.1 * sin(time * 1.0) - 0.5 * cos(uv.x / uv.y * 8.);\n                uv = fract(uv);\n                uv -= 0.5;\n\n                float d = length(uv);\n                vec3 col = palette(time + d + length(uv0) * 1. + i / 8.0, audioBass);\n\n                d = sin(5.0 * d + time) / 5.;\n                d = abs(d);\n                d = .01 / d;\n\n                finalColor += col * d * pow(1.0, -i);\n            }\n            sampledCol += finalColor;\n        }\n    }\n\n    fragColor = vec4(sampledCol / float(samples * samples), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}