{"ver":"0.1","info":{"id":"7d2GDt","date":"1618151240","viewed":57,"name":"Tarquin","username":"SnoopethDuckDuck","description":"multi sample test thing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\nconst float pi2 = 1. * pi / 3.;\nconst float pi3 = 2. * pi / 3.;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec3 render(vec2 uv)\n{   \nfloat t= 0.5 * iTime;\nfloat b = 0.5 + 0.5 * cos(t);\nuv -= 0.5;\n // vec2 uv2 =  vec2(uv.x + 0.75 * cos(t), uv.y + 0.75 * sin(t));\n float taxi = abs(uv.x) + abs(uv.y );\nvec2 dir = uv * (1. +1.5 * tan(10.  * taxi) * (b + (1.-b) * length(uv)));\nfloat d =  (6. + 4. * b) * length(dir) ;\n\nfloat theta = atan( dir.y,dir.x);\n\nfloat p = cos(theta - t);\nfloat p2 = cos(theta -t + pi2);\nfloat p3 = cos(theta - t + pi3);\n\nfloat val = 1. - sqrt(p *p + p2 * p2);\nfloat val2 = 1. - sqrt(p2 * p2 + p3 * p3);\nfloat val3 = 1. - sqrt(p3 * p3 + p * p);\n\n    // Time varying pixel color\n    vec3 col = 1. - 0.9 *vec3(val,val2,val3);\n    vec3 col2 =   mix(vec3(0.2126* col.x + 0.7152 * col.y + 0.0722 * col.z),\n     vec3(step(col.x * val,0.5 + 0.5 * cos(-t - d * cos(d+ t))),\n     step(col.y * val,0.5 + 0.5 * cos(-t - pi2 -d *  cos(d + t + pi2))),\n     step(col.z * val3,0.5 + 0.5 * cos(-t - pi3 - d* cos(d+ t + pi3)))),4. * (1.-d) * d );\n     \n    col += sqrt(col * col + col2 * col2);\n  // Output to screen\n    return 16. * (1.-col) * (1.-col) * col * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n float b = 0.5 + 0.5 * cos(iTime);\n float t =0.4 *  iTime;\n    float AA = 2.0;\n   // float px = 0.25/iResolution.y;\n  \n   vec3 col = (0.001 + 0.0005 * cos(t))  *\n   max(\n   min(render(vec2(1. + 0.5 * cos(t) ,0.55) - uv),\n   render(vec2(0.5,1. - 0.5 * cos(t + pi / 2.)) - uv) ),  \n  min( render(vec2(1. - 0.5 * cos(t + pi),1.5) - uv),\n   render(vec2(1.5,1. + 0.5 * cos(t + 3. * pi / 2.)) - uv))    \n   );\n   \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}