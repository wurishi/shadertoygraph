{"ver":"0.1","info":{"id":"NljXzV","date":"1628115921","viewed":290,"name":"quantum field (somewhat)","username":"sukupaper","description":"Badly optimized, but I love the render of this thing I've made hehe âœ¨","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","abstract","field","quantum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: quantum field\n\nfloat t;\n#define P 6.283185307\n\nvec3 SpectrumPoly(in float x) {\n    // https://www.shadertoy.com/view/wlSBzD\n    return (vec3( 1.220023e0,-1.933277e0, 1.623776e0)+(vec3(-2.965000e1, 6.806567e1,-3.606269e1)+(vec3( 5.451365e2,-7.921759e2, 6.966892e2)+(vec3(-4.121053e3, 4.432167e3,-4.463157e3)+(vec3( 1.501655e4,-1.264621e4, 1.375260e4)+(vec3(-2.904744e4, 1.969591e4,-2.330431e4)+(vec3( 3.068214e4,-1.698411e4, 2.229810e4)+(vec3(-1.675434e4, 7.594470e3,-1.131826e4)+ vec3( 3.707437e3,-1.366175e3, 2.372779e3)*x)*x)*x)*x)*x)*x)*x)*x)*x;\n}\nmat2 rot(in float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nfloat box(in vec3 p, in float s) { p = abs(p) - s; return max(p.x,max(p.y,p.z)); }\nfloat cyl(in vec3 p, in float h) { return length(p.xz) - h; }\n\nfloat df(in vec3 p) {\n    vec3 pp = p;\n    \n    float d = 10e9;\n    \n    for(int i = 0; i < 15; i++) {\n        d = min(d, cyl(p, -.002));\n        p.xy *= rot(P/3. + t + length(p)*2.);\n        p.z = abs(p.z) - .5;\n        p.xz *= rot(P/3. - t + length(p)*5.1);\n        p.x = abs(p.x) - .5;\n    }\n    \n    return max(d, box(pp, .75));\n}\n\n#define LIM .001\n#define MAX_D 5.\n#define MAX_IT 50\nint rm(in vec3 c, in vec3 r) {\n    vec3 p = c;\n    int it = 0;\n    bool hit = false;\n    for(int i = 0; i < MAX_IT; i++) {\n        float d = df(p);\n        if(d < LIM || distance(c,p) > MAX_D) break;\n        p += d*r;\n        it = i;\n    }\n    return it;\n}\n\nvec3 plane2sphere(in vec2 p) {\n    float t = -4./(dot(p,p) + 4.);\n    return vec3(-p*t, 1. + 2.*t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    t = iTime*.25 + 3.;\n    \n    vec3 c = vec3(0.,0.,0.);\n    vec3 r = normalize(vec3(st,1.));\n    r = plane2sphere(st*12.);\n    \n    r.xy *= rot(t);\n    r.xz *= rot(t);\n    r.yz *= rot(t);\n\n    int it = rm(c,r);\n    \n    float s = pow(float(it)*.02,2.);\n    vec3 color = mix(vec3(0.), SpectrumPoly((max(1.-s,.55))), s*1.);\n    color = mix(color*1., vec3(1.), s);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}