{"ver":"0.1","info":{"id":"MdKyWG","date":"1523223508","viewed":745,"name":"Moonscape","username":"neurom","description":"A simple raymarched landscape. I made this because I got inspired by the shader showdown at revision 2018","likes":15,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","space","moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p) {\n    return p.y + texture(iChannel0, p.xz/20.).r*2. + texture(iChannel0, p.xz/200.).r*20.;\n}\n\nvec2 rot(vec2 v, float a) { return cos(a)*v - sin(a)*vec2(v.y, -v.x); }\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.x;\n    \n    vec3 ro = vec3(0., 0., iTime*8.), p,\n    \trd = normalize(vec3(rot(uv, sin(iTime/2.)/8.), 1.0));\n    \n    ro.y = 1. -(map(ro) + map(ro + vec3(0., 0., 1.0)))/8.;\n   \n    float far = 50., marched = 0.01, c, d;\n    \n    for (int i = 0; i  < 300; ++i) {\n        p = ro + rd*marched;\n        d = map(p);\n        marched += d*0.5;\n        \n        if (abs(d) < 0.001 || abs(d) > far) break;\n    }\n    \n    if (marched < far) {\n        vec2 ve = vec2(0., 0.01);\n        vec3 normal = normalize(vec3(\n        \tmap(p + ve.yxx),\n        \tmap(p + ve.xyx),\n        \tmap(p + ve.xxy)\n        ));\n        \n        vec3 ld = normalize(vec3(sin(iTime/2.)*4., 1.0, 1.0));\n        c = (clamp(dot(ld, normal), 0., 1.) + step(fract(p.y*2.), 0.1))*(1. - distance(p, ro)/far);\n    } else {\n        c = pow(texture(iChannel1, uv*5. + texture(iChannel1, uv*2.).xy + iTime/300.).r, 15.)*10.;\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}