{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define RHO 1.5707963268\n#define MAX_STEPS 250\n#define EPSILON 0.001\n#define MAX_DISTANCE 40.0\n\nfloat sdGoStone(in vec2 p) {\n    const float h = 0.65;\n    const float k = 0.017;\n    const float c = 2.68;\n    const float o = 0.12;\n\n    float sy = p.y / h;\n    float r2 = dot(p, p);\n    float a = sqrt(sy * sy + k);\n    float b = pow(r2, 0.5 * c);\n    float de = a + b + o - 1.0;\n\n    vec2 g = b / r2 * c * p;\n    g.y += sy / (h * a);\n\n    return de / length(g);\n}\n\nfloat map(in vec3 p, out int id) {\n    id = 0;\n    float d = p.y + 0.476;\n\n    float go = sdGoStone(vec2(length(p.xz), p.y));\n    if (go < d) {\n        d = go;\n        id = 1;\n    }\n\n    return d;\n}\n\nvec3 getNormal(in vec3 p) {\n    const vec2 eps = vec2(EPSILON, 0.0);\n    int id;\n    return normalize(vec3(map(p + eps.xyy, id), map(p + eps.yxy, id), map(p + eps.yyx, id)) - map(p, id));\n}\n\nbool raymarch(in vec3 ro, in vec3 rd, out float t, out vec3 p, out int id) {\n    t = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        p = ro + rd * t;\n        float d = map(p, id);\n        if (abs(d) < EPSILON) return true;\n        if (t > MAX_DISTANCE) break;\n        t += d;\n    }\n\n    return false;\n}\n\nfloat getShadow(in vec3 p, in vec3 l, in vec3 n, in float k) {\n    float shadow = 1.0;\n    p += n * EPSILON;\n    float d = 0.0;\n    int id;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 rp = p + l * d;\n        float sd = map(rp, id);\n        if (abs(sd) < EPSILON) return 0.0;\n        if (d > MAX_DISTANCE) break;\n        d += sd;\n        shadow = min(shadow, k * sd / d);\n    }\n\n    return shadow;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(vec3(0.0), 1.0);\n\n    vec3 ro = vec3(3.0 * cos(iTime), 0.5, 3.0 * sin(iTime));\n    vec3 lookTarget = vec3(0.0);\n\n    vec3 fd = normalize(lookTarget - ro);\n    vec3 rt = normalize(vec3(-fd.z, 0.0, fd.x));\n    vec3 up = cross(rt, fd);\n    vec3 rd = normalize(mat3(rt, up, fd) * vec3(uv, 1.0));\n\n    vec3 lightDir = normalize(vec3(1.0, 0.4, 0.8));\n    vec3 sunColor = vec3(1.0, 0.9, 0.2);\n    float skyGradient = 1.0 - pow(min(1.0, acos(rd.y) / RHO), 10.0);\n    vec3 skyColor = mix(vec3(0.302, 0.741, 1.0), vec3(0.0, 0.58, 0.996), skyGradient);\n\n    fragColor.rgb = skyColor;\n    fragColor.rgb = mix(fragColor.rgb, sunColor * 1.5, pow(max(0.0, dot(rd, lightDir)), 128.0));\n\n    float t;\n    vec3 p;\n    int id;\n    if (raymarch(ro, rd, t, p, id)) {\n        vec3 n = getNormal(p);\n        vec3 surfColor = id == 0 ? vec3(2.25) : 0.5 + 0.5 * n;\n        fragColor.rgb = max(0.05, dot(lightDir, n)) * surfColor;\n        if (id == 0) fragColor.rgb *= max(0.05, getShadow(p, lightDir, n, 10.0));\n        fragColor.rgb = mix(skyColor, fragColor.rgb, exp(-0.1 * t));\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fKBzR","date":"1733698123","viewed":67,"name":"Go Stone 3D","username":"oneshade","description":"Pleasing shape.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["3d","distance","modelling","stone","go","estimate"],"hasliked":0,"parentid":"","parentname":""}}