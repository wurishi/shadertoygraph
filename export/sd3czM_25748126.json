{"ver":"0.1","info":{"id":"sd3czM","date":"1653156885","viewed":2075,"name":"The Typist","username":"Xor","description":"A new piece of shader art. I like how this one turned out","likes":103,"published":1,"flags":0,"usePreview":0,"tags":["3d","bokeh","letters","lcd","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"The Typist\" by @XorDev\n    -20 Thanks to FabriceNeyret2\n*/\n\n#define T texture(iChannel0, p\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Resolution for scaling/texel math\n    vec2 r = iResolution.xy,\n    //Pixel coordinates for DOF sample\n    p,\n    //Bokeh radius in pixels\n    b = (I+I-r)*mat2(1,-5,0,0)/5e3,\n    //Chromatic aberration delta (and clear color)\n    d = vec2(2e-3,O-=O);\n \n    //\"i\" approximating the sqrt of the number of iterations\n    //So i < 16 means roughly 256 texture samples\n    for(float i=1.,t = iTime*.03; i<16.; i+=1./i)\n    \n        //Rotate sample point by golden angle (for even spacing)\n        b *= mat2(0,.061,1.413, 0) - .737,\n        //Bokeh sample coordinates\n        p = I + b*i,\n        //Apply perspective, rotation and scrolling\n        p = ( p*mat2(9,-1,1,9) - r.y/.1 )/9./(5.*r-p).y + t,\n        //Randomize symbols\n        p += ceil( texture(iChannel1,p/64.).rg*16. + t/.2 )/16.,\n        //Sample font with aberration\n        O += pow(( vec4( T-d).r , T).r, T+d.yx) ) + .001 ) *\n        //LCD color effect\n        max(  sin(p*=16e2).y * sin(p.x+vec4(0,2,4,6)), 0.),\n        //Cube for better gamma\n        3.+O-O);\n    \n    //Adjust gamma and brightness\n    O = pow(O,.15+O-O)*.6;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    Originally, this was two-pass effect, but I found a way to simplify it to one.\n    I'm keeping the original code here for posterity:\n*/\n\n/*\n#define T texture(iChannel0, I\n\n///BUFFER A\n//iChannel0: Font texture (Linear)\n//iChannel1: Bluenoise texture (Nearest)\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Time shortened \n    float t = iTime*.03,\n    //Resolution scale factor\n    r = .2/iResolution.y;\n    //Rotate coordinates with perspective and scrolling\n    I = (I*mat2(9,-1,1,9)*r-2.)/9./(1.-I.y*r)+t;\n    //Sample bluenoise texture (one-pixel per letter)\n    O = texture(iChannel1,I/64.);\n    //Pixel coordinates\n    vec2 p = I*16e2,\n    //Chromatic aberration delta\n    d = vec2(2e-3,0);\n    //Add random offset\n    I += ceil(O.rg*16.+t/.2)/16.;// - O.b*O.a*(I-t)/9.\n    //Sample letters with aberration\n    O = (vec4(T-d).r,T).r,T+d.yx))+.001) *\n    //Apply LCD color effect\n    max(sin(p.x+vec4(0,2,4,6))*sin(p.y),0.);\n    //Make sure the alpha is 1 for bokeh pass!\n    O.a = 1.; O*=O*O;\n}\n\n///IMAGE\n//iChannel0: Buffer A texture\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Resolution for texel calculation\n    vec2 r = iResolution.xy,\n    //Sample point starting at vec2(scale, 0)\n    p = vec2(dot(I+I-r,vec2(1,-5)/5e3), O-=O);\n    \n    //\"i\" approximating the sqrt of the number of iterations.\n    //So i < 16 means roughly 256 texture samples.\n    for(float i=1.; i<16.; i+=1./i)\n        //Rotate sample point by golden angle (for even spacing).\n        p *= mat2(0,.061,1.413, 0)-.737,\n        //Add samples exponentially (a bit like a \"smooth maximum\").\n        O += T/r+p*i/r);\n    //Convert back to linear color (making brighter pixel stand out)\n    //Average by total sample weight via alpha channel.\n    O = pow(O/O.a,.15-O+O)/.8;\n}\n*/","name":"Common","description":"","type":"common"}]}