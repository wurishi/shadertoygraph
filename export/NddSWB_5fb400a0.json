{"ver":"0.1","info":{"id":"NddSWB","date":"1634072874","viewed":85,"name":"Islands, mountain and sea","username":"Viko","description":"Islands, mountain and sea landscapes with SDF.\n/!\\ WORK IN PROGRESS /!\\","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","implicitsurface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Common\n#define PI 3.1415926538\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n  return fract(sin(seed)*43758.5453);\n}\n\n// Cosine direction\nvec3 Cosine(in float seed,in vec3 nor)\n{\n  float u=Hash(78.233+seed);\n  float v=Hash(10.873+seed);\n  \n  // method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n  float a=6.2831853*v;\n  u=2.*u-1.;\n  return normalize(nor+vec3(sqrt(1.-u*u)*vec2(cos(a),sin(a)),u));\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 rotate_z(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n// m : Mouse position\n// p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m,in vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.8;\n  \n  ro=vec3(20.,0.,5.);\n  ro*=rotate_z(3.*3.14*m.x);\n  \n  vec3 ta=vec3(0.,0.,1.);\n  vec3 ww=normalize(ta-ro);\n  vec3 uu=normalize(cross(ww,vec3(0.,0.,1.)));\n  vec3 vv=normalize(cross(uu,ww));\n  rd=normalize(p.x*uu+p.y*vv+le*ww);\n}\n\n// Main\n\nconst int Steps=1000;\nconst float Epsilon=.05;// Marching epsilon\nconst float T=.5;\n\nconst float rA=10.;// Maximum and minimum ray marching or sphere tracing distance from origin\nconst float rB=40.;\n\n// Transforms\nvec3 translateX(vec3 p, float t)\n{\n    return vec3(p.x + t, p.y,p.z);\n}\nvec3 translateY(vec3 p, float t)\n{\n    return vec3(p.x, p.y + t,p.z);\n}\nvec3 translateZ(vec3 p, float t)\n{\n    return vec3(p.x, p.y,p.z + t);\n}\n\nvec3 rotateX(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(p.x,ca*p.y-sa*p.z,sa*p.y+ca*p.z);\n}\n\nvec3 rotateY(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(ca*p.x+sa*p.z,p.y,-sa*p.x+ca*p.z);\n}\n\nvec3 rotateZ(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(ca*p.x+sa*p.y,-sa*p.x+ca*p.y,p.z);\n}\n\nvec3 scaleX(vec3 p, float s)\n{\n    return vec3(p.x*s,p.y,p.z);\n}\nvec3 scaleY(vec3 p, float s)\n{\n    return vec3(p.x,p.y*s,p.z);\n}\nvec3 scaleZ(vec3 p, float s)\n{\n    return vec3(p.x,p.y,p.z*s);\n}\nvec3 scaleUniform(vec3 p, float s)\n{\n    return vec3(p.x*s,p.y*s,p.z*s);\n}\n\n// Primitives\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : radius\nfloat point(vec3 p,vec3 c,float r)\n{\n  return length(p-c) - r;\n}\nvec4 pointColor(vec3 p, vec3 c, float r, vec3 color)\n{\n  float x = point(p, c, r);\n  return vec4(x, color);\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  return dot(p,n) + h;\n}\nvec4 colorPlane( vec3 p, vec3 n, float h, vec3 color)\n{\n    return vec4(sdPlane(p,n,h), color);\n}\n\n// Segment\nfloat segment(vec3 p, vec3 a, vec3 b, float e, float R)\n{\n  if (dot(b-a, p-a) < 0.0)\n  {\n    return dot(p-a, p-a);\n  }\n  else if (dot(b-a, p-b) > 0.0)\n  {\n    return dot(p-b, p-b);\n  }\n  else \n  {\n    vec3 u = (b-a)/length(b-a);\n    float sqLengthAP = dot(p-a, p-a);\n    return sqLengthAP - dot(dot((p-a), u), dot((p-a), u));\n  }\n}\n\nvec4 segmentColor(vec3 p, vec3 a, vec3 b, vec3 color, float e, float R)\n{\n  float x = segment(p, a, b, e, R);\n  return vec4(x, color);\n}\n\n// Circle\nfloat circle(vec3 p, vec3 c, float r, float e, float R)\n{\n  vec3 n = p -c;\n  vec3 u = vec3(1.0, 0.0, 0.0);\n  float h = dot(n, u);\n  float d = dot(n, n);\n  float y = d - h * h;\n  y = r - sqrt(y);\n\n  return (sqrt(y*y + h*h));\n}\nvec4 circleColor(vec3 p, vec3 c, float r, vec3 color, float e, float R)\n{\n  float x = circle(p, c, r, e, R);\n  return vec4(x, color);\n}\n\n// Disk\nfloat disk(vec3 p, vec3 c, float r)\n{\n  vec3 n = p -c;\n  vec3 u = vec3(1.0, 0.0, 0.0);\n  float h = dot(n, u);\n  float d = dot(n, n);\n  float y = d - h * h;\n\n  if (y < r*r)\n    return (abs(h));\n    \n  y = r - sqrt(y);\n  return (sqrt(y*y + h*h));\n}\nvec4 diskColor(vec3 p, vec3 c, float r, vec3 color)\n{\n  float x = disk(p,c,r);\n  return vec4(x, color);\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nvec4 colorTorus( vec3 p, vec2 t, vec3 color )\n{\n  return vec4(sdTorus(p,t), color);\n}\n\nvec4 sdRoundBox( vec3 p, vec3 b, float r, vec3 color)\n{\n  vec3 q = abs(p) - b;\n  return vec4(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r, color);\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nvec4 colorRoundedCylinder(vec3 p, float ra, float rb, float h, vec3 color)\n{\n    return vec4(sdRoundedCylinder(p,ra,rb,h),color);\n}\n\n// Operators\n\n// Blending\n// a,b : field function of the sub-trees\nfloat Blend(float a,float b)\n{\n  return a+b;\n}\n\nvec4 BlendColor(vec4 a, vec4 b, float k)\n{\n  float h = clamp( 0.5 + 0.5*(b.x-a.x)/k, 0.0, 1.0 );\n  float value = mix( b.x, a.x, h ) - k*h*(1.0-h);\n  vec3 color = (a.yzw * b.x + b.yzw * a.x) / (a.x + b.x);\n  return vec4(value, color);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\nvec4 UnionColor(vec4 a, vec4 b)\n{\n  if (a.x < b.x)\n    return a;\n  return b;\n}\n\nfloat Intersection(float a, float b)\n{\n  return max(a,b);\n}\n\nfloat Difference(float a, float b)\n{\n  return max(a,-b);\n}\n\nfloat BlendMinus(float a, float b)\n{\n  return a - b;\n}\nvec4 BlendMinusColor(vec4 a, vec4 b)\n{\n  return vec4(a.x - b.x, a.yzw);\n}\n\n/*float pillar (vec3 p)\n{\n  float v;\n  v = box(p, vec3(-1.,-1.,-3.), vec3(1., 1., 1.), 1.0, 1.0);\n  v = BlendMinus(v, segment(p, vec3(-1.,-1.,-1.5), vec3(-1.,-1.,2.), 0.7, .7));\n  v = BlendMinus(v, segment(p, vec3(1.,1.,-1.5), vec3(1.,1.,2.), 0.7, .7));\n  v = BlendMinus(v, segment(p, vec3(-1.,1.,-1.5), vec3(-1.,1.,2.), 0.7, .7));\n  v = BlendMinus(v, segment(p, vec3(1.,-1.,-1.5), vec3(1.,-1.,2.), 0.7, .7));\n  v = Blend(v, circle(rotateY(p, PI/2.), vec3(-3.,0.,0.), 1.7, 2.0, 1.0));\n\n  return v;\n}*/\nvec4 pillar2(vec3 p)\n{\n  vec4 v;\n\n  vec3 q = p;\n\n  //v = boxColor(p, vec3(-1.,-1.,-3.), vec3(1., 1., 3.), vec3(0.7,0.7,0.7), 1.0, 1.0);\n  //v = BlendColor(v, boxColor(p, vec3(-1.5,-1.5,2.), vec3(1.5, 1.5, 3.), vec3(0.5,0.5,0.5), 1.0, 1.0));\n  //v = BlendColor(v, circleColor(rotateY(p, PI/2.), vec3(-3.,0.,0.), 1.7, vec3(0.4,0.4,0.4), 2.0, 1.0));\n\n\n  return v;\n}\nvec4 bridge(vec3 p)\n{\n  vec4 v;\n  \n  //v = boxColor(p, vec3(-25.,-3.5,-4.), vec3(25., 3.5, -4.), vec3(0.8,0.8,0.8), 1.0, 2.0);\n  //v = BlendColor(v, segmentColor(p - vec3(0.0, 4, -5.0), vec3(-26., 0., 0.), vec3(26.0, 0.0, 0.0), vec3(0.5,0.0,1.), 1., 2.));\n  //v = BlendColor(v, segmentColor(p - vec3(0.0, -4, -5.0), vec3(-26., 0., 0.), vec3(26.0, 0.0, 0.0), vec3(0.5,0.0,1.), 1., 2.));\n\n  return v;\n}\n\n/*float car(vec3 p)\n{\n  float v;\n\n  // Wheels\n  v = disk(p, vec3(0., 0., 0.), 1., 1., 1.);\n  //v = Union(v, disk(p - vec3(3., 0., 0.), vec3(0., 0., 0.), 1., 1., 1.));\n  v = Union(v, disk(p - vec3(0., -6., 0.), vec3(0., 0., 0.), 1., 1., 1.));\n  //v = Union(v, disk(p - vec3(3., -6., 0.), vec3(0., 0., 0.), 1., 1., 1.));\n\n  // Body\n  v = Union(v, box(p - vec3(1.5, 0., -2.), vec3(-2., -10., 0.), vec3(2., 3., 1.), 1., 1.));\n\n  return v;\n}*/\n\n// Potential field of the object\n// p : point\n/*float Object(vec3 p)\n{\n  p.z=-p.z;\n  float v;\n  //float v=Blend(point(p,vec3(0.,1.,1.),1.,2.5),\n  //point(p,vec3(2.,0.,-3.),1.,4.5));\n  //float v = point(p, vec3(0.,0.,0.), 1., 2.5);\n  //v = Difference(v, point(p, vec3(0.5, .5, 3.), 1., 4.5));\n  //v=Intersection(v, point(p, vec3(0., 1., 1.), 1., 6.5));\n  \n  //v=Blend(v,point(p,vec3(-2.,2.,-3.),1.,4.5));\n  //v=Union(v,point(p,vec3(-1.,-1.,0.),1.,4.5));\n\n  //v = Blend(v,segment(p, vec3(0.,-0.,-0.), vec3(30.,0.,0.), 1., 5.));\n  //v = circle(p, vec3(0.,0.,0.), 3.0, 2.0, 1.0);\n  //v = disk(p, vec3(0., 0., 0.), 4.0, 3.0, 2.0);\n  vec3 scale = vec3(4.,4.,4.);\n  // Pillars\n  v = pillar2(p * scale);\n  //v = Union(v, pillar2((p - vec3(-5.0, 0.0, 0.0)) * scale));\n  //v = Union(v, pillar2((p - vec3(5.0, 0.0, 0.0)) * scale));\n  // Bridge\n  //v = Blend(v, bridge(p * scale));\n\n  // Car\n  //v = car(p * scale);\n\n  // Bridge\n  return v-T;\n}*/\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n// https://www.shadertoy.com/view/4sfGzS\nfloat hash(vec3 p)\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n    vec2 u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// Optional value t : time for animation\nfloat fbm (in vec2 st, float amplitude, int octaves, float t) {\n    // Initial values\n    float value = 0.0;\n    \n    // Loop of octaves\n    for (int i = 0; i < octaves; i++) {\n        value += amplitude * noise(st+t);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvec4 ObjectColored(vec3 p)\n{\n  p.z = -p.z;\n\n  vec3 scale = vec3(4.,4.,4.);\n\n  vec4 v;\n  // Pillars\n  vec4 pillars = pillar2(p * scale);\n  pillars = UnionColor(pillars, pillar2((p - vec3(-5.0, 0.0, 0.0)) * scale));\n  pillars = UnionColor(pillars, pillar2((p - vec3(5.0, 0.0, 0.0)) * scale));\n  // Bridge\n  //float a = iTime;\n  //vec4 bridge = BlendColor(pillars, bridge((p * scale)/* - vec3(a, 0., 0.))*/));\n\n  // Noise\n  float n = noise(vec2(p.x * sin(iTime * 0.1), p.y * cos(iTime * 0.1)));\n  float nx = noise(vec2(p.x, p.y * cos(iTime * 0.1)));\n  float n_rock = noise(vec2(p.y, p.x));\n\n  // Ground\n  //vec4 ground = boxColor(p, vec3(-15.,-15.,1.5), vec3(15., 15., 2.), vec3(0.,1.,0.3), 1.0, 1.0);\n  //vec4 ground = boxColor(p, vec3(-15.,-15.,1.5), vec3(15., 15., 2.), vec3(0.,1.,0.3), 1.0, 1.0);\n//   vec4 hills = pointColor(p, vec3(-7., -7., 3.), vec3(0.,1.,0.4), 1., 10.);\n//   hills = BlendColor(hills, pointColor(p, vec3(1., -7., 2.), vec3(0.,1.,0.4), 2., 7.));\n//   hills = BlendColor(hills, pointColor(p, vec3(1., -7., -1.), vec3(0.,1.,0.4), 2., 3.));\n//   ground = UnionColor(ground, hills);\n\n  // Sea\n  //vec4 sea = boxColor(p - n_sea_static, vec3(-15.,-15.,1.5), vec3(15., 15., 2.), vec3(0.,0.7,0.8), 1.0, 1.0);\n  // Rocks\n//   vec4 rocks = pointColor(p - n_rock, vec3(-7., 7., 3.), vec3(0.8,0.8,0.8), 1., 10.);\n//   rocks = BlendColor(rocks, pointColor(p - n_rock - n_rock, vec3(-2., 7., -1.), vec3(0.8,0.8,0.8), 1., 10.));\n\n  //sea = UnionColor(sea, rocks);\n\n  // Mountain\n  //vec4 mountain = pointColor(p - n_mountain, vec3(-7., 7., 3.), vec3(0.8,0.8,0.8), 1., 10.);\n  //vec4 mountain = boxColor(p - n_mountain, vec3(-3.,-4.,-2.), vec3(3., 4., 0.), vec3(0.8,0.8,0.8), 1.0, 1.0);\n  //mountain = BlendColor(mountain, boxColor((p - vec3(3.,0.,0.)) - n_mountain, vec3(-2.,-2.,-2.), vec3(2., 2., 0.), vec3(0.,0.8,0.8), 1.0, 1.0));\n  \n  // Tree\n  //vec4 trunk = segmentColor(p * vec3(2.,2.,2.) - vec3(0.,0.,10.), vec3(0.,0.,-10.), vec3(0.,0.,0.), vec3(0.5451, 0.2705, 0.0745), 1.0, 1.0);\n  //vec4 leafs = pointColor(p - vec3(0.,0.,-0.4) - Hash(p.x), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.);\n  //leafs = BlendColor(leafs, pointColor(p - vec3(0.,1.,1.) * Hash(p.x), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.));\n  //leafs = BlendColor(leafs, pointColor(p - vec3(0.,-1.,1.) * Hash(p.x), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 1.7));\n  //leafs = BlendColor(leafs, pointColor(p - vec3(1.,0.,1.2) * Hash(p.x), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.5));\n  //leafs = BlendColor(leafs, pointColor(p - vec3(-1.,0.,1.4) * Hash(p.x), vec3(0.,0.,0.), vec3(0.,1.,0.), 1.8, 2.));\n  //vec4 tree = UnionColor(trunk, leafs);\n  //ground = tree;\n\n  // House\n  //vec4 house = boxColor(p * scale, vec3(-3.5, -6., -10.), vec3(3.5, 6., 0.), vec3(1.,0.,0.), 1., .5);\n  //house = BlendColor(house, cylinderColor((p - vec3(0., 1.5, -3.2)) * vec3(.6, 0.5, 1.3), vec3(1.,0.,0.)));\n  //house = BlendColor(house, cylinderColor((p - vec3(0., -1.5, -3.2)) * vec3(.6, 0.5, 1.3), vec3(1.,0.,0.)));\n  // House : roof\n  vec3 transform1 = rotateX((p - vec3(0.,1.5,-4.3)),PI/2.) * vec3(1.1, 1.1, 1.1);\n  vec3 transform2 = rotateX((p - vec3(0.,-1.5,-4.3)),PI/2.) * vec3(1.1, 1.1, 1.1);\n  vec3 transform3 = rotateX((p - vec3(0.,0.,-4)),PI/2.) * vec3(1.5, 1.5, 1.1);\n  //vec4 cone1 = coneColor(transform1, vec2(sin(PI/5.), cos(PI/10.)), 2., vec3(0.,1.,0.), 1., 0.7);\n  //vec4 cone2 = coneColor(transform2, vec2(sin(PI/5.), cos(PI/10.)), 2., vec3(0.,1.,0.), 1., 0.7);\n  //vec4 cone3 = coneColor(transform3, vec2(sin(PI/5.), cos(PI/10.)), 2., vec3(0.,1.,0.), 1., 0.7);\n  //vec4 roof = BlendColor(cone1, cone2);\n  //roof = BlendColor(roof, cone3);\n  //house = UnionColor(house, roof);\n  // Windows\n  //vec4 window = diskColor(p, vec3(0.,0.,0.), 2., vec3(1.,0.,0.), 1., 1.);\n  //v = window;\n\n  // Door\n  vec3 translate = vec3(3., 0., 0.);\n  //vec4 door = boxColor(p * scale - translate, vec3(-1., -1., -3.), vec3(1., 1., 0.), vec3(1.,1.,0.), 1., .3);\n  vec3 trHandle1 = (p * scale * 1.5) - vec3(6.8,0.5,-2.);\n  vec3 trHandle2 = (p * scale * 1.5) - vec3(6.8,-0.5,-2.);\n//   vec4 handle1 = pointColor(trHandle1, vec3(0.,0.,0.), vec3(1.,0.,1.), 1., 1.);\n//   vec4 handle2 = pointColor(trHandle2, vec3(0.,0.,0.), vec3(1.,0.,1.), 1., 1.);\n//   handle1 = BlendColor(handle1, handle2);\n//   door = UnionColor(door, handle1);\n  \n  //house = BlendColor(house, door);\n  \n  //v = UnionColor(mountain, sea);\n  //v = UnionColor(v, ground);\n  //v = UnionColor(v, bridge);\n  //v = UnionColor(v, house);\n\n\n  // ==== Scene Objects ==== //\n\n  // Sea\n\n  // Beach\n  //vec4 beach = boxColor(p - vec3(12.,0.,0.), vec3(-10.,-15.,1.5), vec3(10., 15., 2.), vec3(1.,1.,0.7), 1.0, 1.0);\n  vec3 transform = (rotateY(p, PI/2.) - vec3(.9,0.,0.)) * vec3(2.,2.,2.);\n  //vec4 beach = diskColor(transform, vec3(0.,0.,0.), 12., vec3(1.,1.,0.7), 1., 0.7);\n  \n  // Grass\n  //vec4 grass = boxColor(p - vec3(25.,0.,-0.4), vec3(-15.,-15.,1.5), vec3(15., 15., 2.), vec3(0.,1.,0.3), 1.0, 1.0);\n  //vec4 grass = diskColor(transform - vec3(-0.5,0.,0.), vec3(0.,0.,0.), 10., vec3(0.,1.,0.3), 0.7, 0.7);\n\n  // Mountain\n  //vec4 mountain = boxColor((p - n_mountain) - vec3(2.,0.,0.),\n        //vec3(-1.,-2.,-2.), vec3(3., 2., 0.), vec3(0.8,0.8,0.8), 1.0, 1.0);\n\n  // Tree\n  vec4 trunk = segmentColor(p * vec3(8.,8.,1.) - vec3(0.,0.,0.), vec3(0.,0.,0.), vec3(0.,0.,1.), vec3(0.5451, 0.2705, 0.0745), 1.0, 1.0);\n//   vec4 leafs = pointColor(p * vec3(6.,6.,6.) - vec3(0.,0.,-4.), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.);\n//   leafs = BlendColor(leafs, pointColor(p * vec3(6.,6.,6.) - vec3(0.,1.,-3.), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.));\n//   leafs = BlendColor(leafs, pointColor(p * vec3(6.,6.,6.) - vec3(0.,-1.,-3.), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.));\n//   leafs = BlendColor(leafs, pointColor(p * vec3(6.,6.,6.) - vec3(1.,0.,-3.), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.));\n//   leafs = BlendColor(leafs, pointColor(p * vec3(6.,6.,6.) - vec3(-1.,0.,-3.), vec3(0.,0.,0.), vec3(0.,1.,0.), 2., 2.));\n//   vec4 tree = UnionColor(trunk, leafs);\n\n  // Big Island\n  //vec4 big_island = BlendColor(grass, beach);\n  //big_island = BlendColor(big_island, mountain);\n//   big_island = BlendColor(big_island, tree);\n\n  // Small Island\n  vec3 transform_s = (rotateY(p, PI/2.) - vec3(.9,-10.,0.)) * vec3(2.,2.,2.);\n  //vec4 beach_small_island = diskColor(transform_s, vec3(0.,0.,0.), 5., vec3(1.,1.,0.7), 1., 0.7);\n  //vec4 small_island_ = boxColor((p - vec3(-0.7,-10.,0.) - n_small_island),\n        //vec3(-0.5,-0.5,-0.5), vec3(0.5, 0.5, 0.), vec3(0.8,0.8,0.8), 1.0, 1.0);\n  //vec4 small_island = BlendColor(beach_small_island, small_island_);\n\n  // Islands\n  //vec4 islands = UnionColor(big_island, small_island);\n  //islands = UnionColor(islands, bridge);\n\n  //v = BlendColor(sea, islands);\n  \n  //v = cappedConeColor(p - vec3(0., 0., -5.), vec3(0., 0., 1.), vec3(0., 0., 5.), 0.1, 5., vec3(1.,0.,0.), 1., 1.);\n\n\n\n  \n//   vec4 b1 = pointColor(p * vec3(1.,1.2,1.), vec3(0.,0.,0.), vec3(0.,0.,1.), 2., 2.);\n//   b1 = BlendColor(b1, pointColor(p - vec3(0.,0.,-1.), vec3(0.,0.,0.), vec3(1.,0.,1.), 2., 1.));\n//   b1 = BlendColor(b1, pointColor(p - vec3(-0.7,0.,-0.8), vec3(0.,0.,0.), vec3(1.,0.,1.), 1., 1.));\n//   b1 = BlendColor(b1, pointColor(p - vec3(0.7,0.,-0.8), vec3(0.,0.,0.), vec3(1.,0.,1.), 1., 1.));\n\n  // Ears\n  vec3 tr = rotateX(p, PI/4.) * vec3(3.,3.,2.) - vec3(-3.,0.,0.);\n  //vec4 ears = diskColor(tr, vec3(0.,0.,0.), 1., vec3(.4,0.,0.7), 1., 0.7);\n  \n//   b1 = BlendColor(b1, ears);\n  \n  \n\n  v = pointColor(p, vec3(0.,0.,0.), 1., vec3(1.,0.,0.));\n  v = sdRoundBox(p, vec3(1.,2.,1.), 0.7, vec3(0.,1.,0.));\n  \n  p = scaleUniform(p, 3.);\n  \n  \n  float t = 0.01 * (-iTime * 130.0);\n  \n  // Sea\n  float noise_sea = fbm(vec2(p.x, p.y), 0.3, 2, t);\n  v = colorPlane(p - noise_sea, vec3(0.,0.,-1.), 2., vec3(0.,0.8,1.));\n  \n  // Island\n  v = BlendColor(v, colorRoundedCylinder(rotateX(translateZ(p,-3.5),PI/2.), 10.,1.,1.,vec3(0.5,0.5,0.5)), 1.);\n  v = BlendColor(v, colorRoundedCylinder(rotateX(translateZ(p,-3.2),PI/2.), 8.,1.,1.,vec3(0.1,1.,0.3)), 2.);\n  \n  // Mountain\n  float n_mountain = fbm(vec2(p.x, p.y), 1.5, 2, 0.);\n  v = BlendColor(v, colorRoundedCylinder(rotateX(translateZ(p - n_mountain,0.),PI/2.), 4.,3.,4.,vec3(0.7,0.7,0.7)), 5.);\n    \n\n  return vec4(v.x, v.y, v.z, v.w);\n}\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p)\n{\n  float eps=.0001;\n  vec3 n;\n  vec4 v=ObjectColored(p);\n  n.x=ObjectColored(vec3(p.x+eps,p.y,p.z)).x-v.x;\n  n.y=ObjectColored(vec3(p.x,p.y+eps,p.z)).x-v.x;\n  n.z=ObjectColored(vec3(p.x,p.y,p.z+eps)).x-v.x;\n  return normalize(n);\n}\n\nvec3 ObjectColor(in vec3 p)\n{\n  vec4 v = ObjectColored(p);\n  return vec3(v.y, v.z, v.w);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    //float v=Object(p);\n    vec4 v = ObjectColored(p);\n    // Hit object\n    if(v.x<0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=Epsilon;\n    // Escape marched far away\n    if(t>rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    //float v=Object(p);\n    vec4 v = ObjectColored(p);\n    // Hit object\n    if(v.x<0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,abs(v.x)/4.);\n    // Escape marched far away\n    if(t>rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n,int a)\n{\n  if(a==0){return 1.;}\n  \n  float ao=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    \n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){ao+=1.;}\n    else if(t>5.)\n    {\n      ao+=1.;\n    }\n  }\n  \n  ao/=float(a);\n  return ao;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(.652,.451,.995),vec3(.552,.897,.995),rd.z*.5+.5);\n}\n\nfloat Light(vec3 p,vec3 n)\n{\n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff=pow(.5*(1.+dot(n,l)),2.);\n  \n  bool h;\n  int s;\n  float t=SphereTrace(p+.1*n,l,100.,h,s);\n  if(!h)\n  {\n    return diff;\n  }\n  return 0.;\n}\n\nfloat SmoothLight(vec3 p,vec3 n,int a)\n{\n  if(a==0)\n  return 1.;\n  \n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  float lo=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    d=normalize(l+d*.15);\n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){lo+=1.;}\n    else if(t>100.)\n    {\n      lo+=1.;\n    }\n  }\n  \n  lo/=float(a);\n  return lo;\n  \n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p,vec3 n)\n{\n  vec3 c=.25+.25*background(n);\n  c+=.15*AmbientOcclusion(p+.1*n,n,0)*vec3(1.,1.,1.);\n  c+=.35*Light(p,n);\n  return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return .5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n\n  \n  float a=iTime*0.25;\n  //ro = rotateZ(ro, a);\n  //rd = rotateZ(rd, a);\n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  //float t = Trace(ro, rd, 100., hit, s);\n  \n  // Position\n  vec3 pt=ro+t*rd;\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Compute normal\n    vec3 n=ObjectNormal(pt);\n\n    vec3 col = ObjectColor(pt);\n    \n    // Shade object with light\n    rgb=Shade(pt,n) * col;\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}