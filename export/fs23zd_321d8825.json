{"ver":"0.1","info":{"id":"fs23zd","date":"1646857315","viewed":42,"name":"2d fractal","username":"MinimilisticBits","description":"sfsdfsg","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["sdfdsfs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Change fractal with mouse button\n\n//NOT MY CODE//////////////////////\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.,1.);\n}\n//////////////////////////////////\n\nvec3 blur(vec2 uv, float r){\nvec3 c = vec3(0.);\nuv *= iResolution.xy;\nfloat iter = 0.;\nfor(int i = 0; i < 10; i++){\n  for(int k = 0; k < 10; k++){\n     float x = float(k)-5.;\n     float y = float(i)-5.;\n     x*=r;\n     y*=r;\n     //float bok = texture(iChannel1, vec2(0.5)+((vec2(x,y)*6.)/iResolution.xy)).y;\n     vec4 c2 = texture(iChannel0, (uv+vec2(x,y))/iResolution.xy).xyzw;\n     vec3 col = c2.xyz / (c2.w+1.);\n     //if(length(col) > 0.6)col*=1.2;\n     c += col;\n     iter+=1.;\n  }\n}\nc/=iter;\nreturn c;\n} \n\nvec3 bloom(vec2 uv, float r){\nvec3 c = vec3(0.);\nuv *= iResolution.xy;\nfloat iter = 0.;\nfor(int i = 0; i < 25; i++){\n     vec2 coords = vec2(float(i%5)-2.0, float(i/5)-2.0)*3.;\n     //float bok = texture(iChannel1, vec2(0.5)+((vec2(x,y)*6.)/iResolution.xy)).y;\n     vec4 c2 = texture(iChannel0, (uv+coords)/iResolution.xy).xyzw;\n     vec3 col = c2.xyz / (c2.w+1.);\n     //if(length(col) > 0.6)col*=1.2;\n     c += pow(col, vec3(1.));\n     iter+=1.;\n}\nc/=iter;\nreturn c;\n} \n\n\n\nvec3 blur2(vec2 p,float dist){\np*=iResolution.xy;\n    vec3 s;\n    \n    vec3 div = vec3(0.);\n    //vec2 off = vec2(0.0, r);\n    float k = 0.61803398875;\n    for(int i = 0; i < 150; i++){\n    float m = float(i)*0.01;\n    float r = 2.*3.14159*k*float(i);\n    vec2 coords = vec2(m*cos(r), m*sin(r))*dist;\n    vec4 c2 = texture(iChannel0, (p+coords)/iResolution.xy).xyzw;\n    vec3 c = c2.xyz / (c2.w+1.);\n    //c = c*c *1.8;\n    vec3 bok = pow(c,vec3(4.));\n      s+=c*bok;\n      div += bok;\n    }\n        \n    s/=div;\n    \n    return s;\n    \n}\nvec2 rot(vec2 a, float c){\nc = c*3.14159/180.;\nfloat l = length(a);\na/=l;\n\nfloat ang = (a.y < 0.)?2.*3.14159-acos(a.x):acos(a.x);\nang += c;\n\nreturn l*vec2(cos(ang), sin(ang));\n}\n\nfloat torus(vec2 p, vec2 s){\n    vec2 mm = normalize(p);\n    return length(mm*s.x - p) - s.y;\n}\n\nfloat box(vec2 p, vec2 s){\nvec2 a = abs(p)-s;\nreturn max(a.x,a.y);\n}\n\nfloat hex(vec2 p, float s){\nfloat box1 = box(p, vec2(s));\nvec2 pos = rot(p, 45.);\nreturn min(box1, box(pos, vec2(s)));\n}\nvec3 pal(float t, vec3 a){\nreturn 0.5 + 0.5*cos(2.*3.14159*t + a);\n}\n\nvec3 lens(vec2 p, vec2 mouse){\np*=10.;\n\nvec3 col = vec3(0.);\n\ncol += sin(texture(iChannel1, normalize(mouse-p)*0.7).x)*exp(-(length(mouse-p)-1.2)*1.);\ncol += exp(-(length(-mouse*0.5-p)-0.5)*3.);\nfor(int i = 0; i < 5; i++){\ncol += exp(-hex(-mouse*(0.2-float(i)*0.1)-p, 0.5-float(i)*0.1)*2.);\n}\n\ncol += exp(-torus(mouse*0.2-p, vec2(2., 0.01))*2.);\n\nvec3 col2 = vec3(1.)*exp(-torus(-mouse - p, vec2(6., 0.3))*20.);\ncol2 *= sin(texture(iChannel1, normalize(-mouse-p)*0.7).x)*exp(-(length(-mouse-p)-2.2)*1.);\ncol2 *= vec3(0.9,0.5,0.2);\ncol2 *= length(mouse-p)*0.04;\n\nvec3 col3 = vec3(1.)*exp(-torus(-mouse*0.2 - p, vec2(10., 2.))*4.);\ncol3 *= sin(texture(iChannel1, normalize(-mouse-p)*0.7).x)*exp(-(length(-mouse-p)-2.2)*1.);\ncol3 *= vec3(0.9,0.5,0.2);\ncol3 *= length(mouse-p)*0.04;\n\ncol += col2;\ncol += col3;\ncol*=exp(-(length(mouse-p)-4.2)*0.2);\n//col += exp(-(length(p)-4.));\n\ncol *= pal(length(mouse-p)*0.1, vec3(0.0,0.6,0.9));\ncol += exp(-(length(mouse-p)-0.6)*0.3)*vec3(0.9,0.7,0.2);\n\n//vec2 pos2 = (mouse)-p;\n//pos2 = rot(pos2, mouse.x*8.);\n//col += exp(-length(pos2*vec2(1., 0.01)))*exp(-(length(mouse*0.2-p)-4.2)*0.6);\n\nreturn col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \n    // Time varying pixel color\n    vec4 c = texture(iChannel0, uv).xyzw;\n    //vec3 col = c.xyz/((c.w+1.));\n    vec2 uf = uv * 2.0 - 1.0;\n    //uf.x *= 1.3;\n    //uf.y /= 1.3;\n    vec3 col = blur2(uv, max(length(uf*14.)*1.-(9.0-length(uf*0.1)), 0.));\n    col = clamp(col,0.,1.);\n   \n    float off = texture(iChannel0, uv).w;\n     vec3 rad;\n    vec2 offset2 = (fragCoord - iResolution.xy/2.)*1.;\n    for(int i = 0; i < 20; i++){\n       vec2 offset = fragCoord + offset2*smoothstep(0.,15.-length(uv*2.0-1.)*1.5, float(i)/20.)*1.;\n       rad.x += texture(iChannel0, (offset+offset2*0.024)/iResolution.xy).x/float(off+1.);\n       rad.y += texture(iChannel0, (offset)/iResolution.xy).y/float(off+1.);\n       rad.z += texture(iChannel0, (offset-offset2*0.024)/iResolution.xy).z/float(off+1.);\n\n    }\n    rad /= 16.;\n col += bloom(uv, .2);\n    col += rad*0.3;\n    //col = ACESFilm(col);\n    col = clamp(col, 0., 1.);\n     col = vec3(1.)-exp(-.2*col);\n\n    //NOT MY CODE//////////////////\n    vec3 a = vec3(0.3,0.3,0.4)-0.4;\n    col = mix(col, smoothstep(0.,1.,col),a);\n    //////////////////////////////\n    // Output to screen\n    vec3 aa = vec3(1.0,1.1,1.1);\n    col = sqrt(col/aa);\n    col = (1.0/((1.0)+exp(-(10.)*(col-0.5))));\ncol = pow(col, vec3(1.3))*1.8;\n//col = pow(col, vec3(0.7,0.8,0.9));\ncol = ACESFilm(col);\n    col = pow(col, vec3(1./2.2));\n//uv = uv * 2.0 - 1.0;\n//uv.x *= 1.3;\n//uv.y /= 1.3;\n//col *= (1.0-length(uv*0.2));\n    // Output to screen\n    \n    col = vec3(1.)-exp(-1.8*col);\n    col = col*col*1.8;\n    col = ACESFilm(col);\n    col = pow(col, vec3(1./2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 prevm = texture(iChannel0, vec2(0.)).xyz;\n    float prevframe = prevm.z;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    if(mouse != prevm.xy){\n       prevframe = float(iFrame);\n    }\n    \n    vec3 col = vec3(mouse,prevframe);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float pis = 3.14159265358;\n\nvec2 rot(vec2 a, float c){\nfloat g = c*pis/180.0;\nfloat l = length(a);\na = normalize(a);\nfloat ang = atan(a.y,a.x)+g; \nreturn vec2(l*cos(ang),l*sin(ang));\n}\n\nvec2 mz(vec2 z){\nreturn vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y);\n}\n\n//re g1(x)=sin(x-tan(x)), g2(x)= tanh(x+tanh(x)).\n//g1(x) = sin(x)+cos(x) and g2(x) = sin((x)+tan(x)).\n//sinh(x+sin(x))and g2(x) = cos((x)+tan(x)).\nfloat g1(float x){\nreturn  sin(x);\n}\n\nfloat g2(float x){\nreturn tan(x)+tanh(x);\n}\n\n\nfloat f1(float x){\nreturn tan(x-cos(x));\n}\n\nfloat f2(float x){\nreturn sin(x+cos(x));\n}\n\nfloat f3(float x){\nreturn abs(sin(x-cos(x)));\n}\n\nfloat f4(float x){\nreturn cos(x+cos(x));\n}\n\nfloat f5(float x){\nreturn tan(x-tan(x));\n}\n\nfloat f6(float x){\nreturn sin(x+tan(x));\n}\n\nvec2 iterate(vec2 z, float timestep, vec2 p){\nvec2 mouse = iMouse.xy / iResolution.xy;\n\nfloat a = mouse.x*2.;\nfloat b = mouse.y*2.;\nfloat c = a+b;\n//z = mz(z)*0.1 + z;\n//float x = z.y + timestep*sin(a+z.y + sin(a+z.y));\n//float y = z.x + timestep*sin(b+z.x + sin(b+z.x));\n\n\n//float x= z.x - (timestep*g1(z.y+g2(a*z.y)));\n//float y= z.y - (timestep*g1(b*z.x+g2(b*z.x)));\n//z=cmplx(x,y);\n//x= x/length(z);\n//y= y/length(z);\n//float r=sqrt(z.x*z.x+z.y*z.y);\n//float s = r*r;\n//float t=atan(z.y/z.x);\n//float x =z.y- r*cos(a*t*z.x)*0.;\n//float y =z.x- r*sin(b*t*z.y)*0.1;\\\n//x=real(z),y=imag(z); px=x;\n\n\n\n//float px2 = x2;\n\n//x = x - cos(y + tan(2.*y*sin(a+b+c)))*0.1;\n//y = y - cos(px + tan(a+b))*0.1;\n\n//x /= dot(vec2(x,y), vec2(x,y));\n//y /= dot(vec2(px,y), vec2(px,y));\n\n\nfloat x= z.x-timestep*(g1(z.y+g2(a*z.y)));\nfloat y= z.y-timestep*(g1(z.x+g2(a*z.x)));\n\nx = x - timestep*f1(a*y + f2(y + f3(a*y)));\ny = y - timestep*f4(x + f5(b*x + f6(b*x)));\n\n\nx = x - timestep*(g1(y+g2(a*y))) - timestep*(g1(x + g2(a*x)));\ny = y - timestep*(g2(x+g1(a*x))) - timestep*(g2(y + g1(a*y)));\nfloat r= sqrt(x*x+y*y);\nfloat t= atan(y/(x));\n//x = r*cos(2.*t);\n//y = r*sin(2.*t);\nfloat px = x;\n\nx = x - cos(y + tan(2.*y*sin(a+b+c)))*0.8;\ny = y - cos(px + tan(a+b))*0.8;\n\nreturn vec2(x,y);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n \nfloat rndf(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    \n    uint rseed = uint(uint(fragCoord.x) * uint(1973) \n    + uint(fragCoord.y) * uint(9277) \n    + uint(iFrame) * uint(26699)) | uint(1);\n    \n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv += (rndf(rseed) * 2.0 - 1.0)*0.001;\n    uv.x *= 1.3;\n    uv.y /= 1.3;\n    uv *= 3.;\n    //uv+=1.3;\n    //uv.x += 0.5;\n    float s;\n    vec2 z = uv;\n    float s2;\n    float s3;\n    for(int i = 0; i < 100; i++){\n        z = iterate(z, 0.5, uv);\n        float d = dot(z,z);\n        s3 += atan(1.0/(0.1+d), z.x-uv.x);\n        s += exp(-0.2*d);\n        s2 += atan(z.y,z.x);\n    }\n    float frame = texture(iChannel1, vec2(0.2)).z;\n    s/=10.;\n    s2/=5.;\n    s3/=20.;\n    vec3 col = palette(s, vec3(0.1), vec3(0.5), vec3(1.),vec3(0.6,0.5,0.7));\n    //col+=s3*0.1;\n    //col *= s2*0.8;\n    col = mix(texture(iChannel0, fragCoord/iResolution.xy).xyz, clamp(col,0.,1.), 1.0/(float(iFrame+1)-frame) );\n//col *= 1.4;\ncol = clamp(col,0.,1.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}