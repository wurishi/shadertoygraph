{"ver":"0.1","info":{"id":"7dcGzH","date":"1629131181","viewed":71,"name":"Simple ChessBoard","username":"mengxin","description":"A Chess Board Pattern","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["chessboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float PI = 3.1415926535;\n\nfloat SampleChessBoard(vec2 uv)\n{\n    return step(0.0,sin(uv.x  * 12.0 * PI + PI) + sin(uv.y  * 6.75 * PI + PI));\n}\n\n\nfloat SuperSample(vec2 uv,vec2 Resolution)\n{\n    float SSAAX = 1.0/(Resolution.x * 2.0);\n    float SSAAY = 1.0/(Resolution.y * 2.0);\n    float sample0 = SampleChessBoard(uv + vec2(SSAAX,SSAAY));\n    float sample1 = SampleChessBoard(uv + vec2(SSAAX,-SSAAY));\n    float sample2 = SampleChessBoard(uv + vec2(-SSAAX,SSAAY));\n    float sample3 = SampleChessBoard(uv + vec2(-SSAAX,-SSAAY));\n    \n    return (sample0 + sample1 + sample2 + sample3)/4.0;\n}\n\n\nvec2 RotateUV(vec2 uv,float radian)\n{\n    return vec2(uv.x * cos(radian) - uv.y * sin(radian), uv.x * sin(radian) + uv.y * cos(radian));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = RotateUV(fragCoord,iTime*0.3)/iResolution.xy;\n    \n    uv += 0.5*cos(iTime);\n    \n    //uv = RotateUV(uv,iTime);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float ChessBoard = SuperSample(uv,iResolution.xy);\n    \n    \n    col = vec3(ChessBoard,ChessBoard,ChessBoard);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}