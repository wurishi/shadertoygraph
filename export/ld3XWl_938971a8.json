{"ver":"0.1","info":{"id":"ld3XWl","date":"1462103259","viewed":444,"name":"Dithering methods","username":"kuvkar","description":"Trying out couple of dithering methods to get rid of quantization artefacts. Reference: https://www.shadertoy.com/view/MslGR8# by hornet. Also http://www.loopit.dk/banding_in_games.pdf.  Dithered version is on the right side, undithered on the left.\n\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n* trying out couple of dithering methods to get rid of quantization artefacts.\n* http://www.loopit.dk/banding_in_games.pdf\n*/\n\n// method to get compressed color\nconst float COLOR_LEVELS = 20.0;\nvec4 getColorCompressed(vec4 color)\n{\n    return floor(color * COLOR_LEVELS) / COLOR_LEVELS;\n}\n\n// standard \"rand\" function \nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n///////////////////////// dithering functions from ////////////////\n// https://www.shadertoy.com/view/MslGR8# by hornet           /////\n///////////////////////////////////////////////////////////////////\n\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n\n// note: valve edition\n//       from http://alex.vlachos.com/graphics/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf\n// note: input in pixels (ie not normalized uv)\nvec3 ScreenSpaceDither( vec2 vScreenPos )\n{\n\t// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR\n    vec3 vDither = vec3( dot( vec2( 171.0, 231.0 ), vScreenPos.xy ) );\n    vDither.rgb = fract( vDither.rgb / vec3( 103.0, 71.0, 97.0 ) ) - vec3( 0.5, 0.5, 0.5 );\n\treturn (vDither.rgb / 255.0) * 0.375;\n}\n\n////////////\n////////////\n////////////\n\n// three different dithering methods.\n#define TRIANGLE_NOISE\n//#define SCREENSPACE_DITHER\n//#define UNIFORM_NOISE\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 col = texture(iChannel0, uv);\n\tvec2 seed = uv;\n    \n    vec4 ditherCol;\n    seed += fract(iTime);\n\tfloat ditherAmount = 0.045;\n    \n#ifdef TRIANGLE_NOISE\n    ditherCol.r = (hash12( seed ) + hash12(seed + 0.59374) - 0.5 );\n    seed += 0.1;\n    ditherCol.g = (hash12( seed ) + hash12(seed + 0.59374) - 0.5 );\n    seed += 0.04;\n    ditherCol.b = (hash12( seed ) + hash12(seed + 0.59374) - 0.5 );\n#endif\n\n#ifdef SCREENSPACE_DITHER\n    ditherCol = vec4(ScreenSpaceDither(fragCoord), 1.0);\n   \tditherAmount = 35.0;\n#endif\n    \n#ifdef UNIFORM_NOISE    \n\tditherCol.r = rand(seed);\n    seed += 0.1;\n    ditherCol.g = rand(seed);\n    seed += 0.04;\n    ditherCol.b = rand(seed);\n#endif\n\n    // dithered version on the right side.\n    if(uv.x > 0.5) col += ditherCol * ditherAmount;\n\n    // compress the result\n    col = getColorCompressed(col);\n    \n    // black line\n    if(abs(uv.x - 0.5) < 0.003) col = vec4(0.0);\n    \n\tfragColor = col;    \n}","name":"Image","description":"","type":"image"}]}