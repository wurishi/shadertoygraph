{"ver":"0.1","info":{"id":"MXsSzs","date":"1709873079","viewed":226,"name":"Show Super-SamplingAnti-Aliasing","username":"Zohar0324","description":"Show use SSAA .","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n//Grid\n#define COUNT 20.0 \n#define SPEED 2.0\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return max(xline, yline);\n}\n\nfloat drawPoint(vec2 coord)\n{\n    vec2 s = coord * COUNT * 0.5;\n    s = fract(s) * 2.0 - 1.0;\n    \n    return step(0.5, 1e-1 / length(s));\n}\n\n//trigangle Inside\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2)\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n    float d_f = -sqrt(d.x) * sign(d.y);\n    d_f = smoothstep(1e-8, 1e-4, d_f);\n    //d_f = step(1e-11, d_f);\n\treturn 1.0 - d_f;\n}\n\nfloat sdTriangleLine( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    s = 1.0;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n    float d_f = -sqrt(d.x) * sign(d.y);\n    d_f = smoothstep(0.0005, 0.006, d_f);\n    \n\treturn 1.0 - d_f;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float asp = iResolution.x / iResolution.y;\n    vec2 coord = uv * 2.0 - 1.0;\n    \n    vec2 aspCoord = vec2(coord.x * asp, coord.y);\n    vec3 col = vec3(0.0);\n    col += net(aspCoord) * 0.125;\n    col += drawCoord(aspCoord);\n    \n    // calculate and go to draw sub-sampler point\n    float p = drawPoint(aspCoord + vec2(0.25,0.25)/ COUNT * 2.0) * 0.2;\n    p += drawPoint(aspCoord + vec2(0.25,-0.25)/ COUNT * 2.0) * 0.2;\n    p += drawPoint(aspCoord + vec2(-0.25,-0.25)/ COUNT * 2.0) * 0.2;\n    p += drawPoint(aspCoord + vec2(-0.25,0.25)/ COUNT * 2.0) * 0.2;\n    \n    \n    vec2 p1 = vec2(0.4 * sin(iTime *SPEED + 2.0) - 0.8,0.1 * cos(iTime *SPEED + 2.0 )- 0.78);\n    vec2 p2 = vec2(1.2 , 0.4 * sin(iTime *SPEED + 2.0) + 0.5);\n    vec2 p3 = vec2(0.1, 0.7);\n    col += p;\n\n    col += vec3(sdTriangleLine(aspCoord, p1, p2, p3));\n\n    float x = aspCoord.x * COUNT * 0.5;\n    float y = aspCoord.y * COUNT * 0.5;\n    // calculate the coverage of sub-sampler point  \n    vec2 centerUV = (vec2(floor(x),floor(y)) + vec2(0.5,0.5)) / COUNT /0.5;\n    \n    vec2 leftBottomUV   = centerUV + vec2(-0.25,-0.25) / COUNT / 0.5;\n    vec2 leftTopUV      = centerUV + vec2(-0.25,0.25)  / COUNT / 0.5;\n    vec2 rightBottomUV  = centerUV + vec2(0.25,-0.25)  / COUNT / 0.5;\n    vec2 rightTopUV     = centerUV + vec2(0.25,0.25)   / COUNT / 0.5;\n\n    \n    float leftBottom   = sdTriangle(leftBottomUV, p1, p2, p3);\n    float leftTop      = sdTriangle(leftTopUV, p1, p2, p3);\n    float rightBottom  = sdTriangle(rightBottomUV, p1, p2, p3);\n    float rightTop     = sdTriangle(rightTopUV, p1, p2, p3);\n    \n    // Cover zero    point 0\n    // Cover one     point 0.2\n    // Cover Two     point 0.4\n    // ......\n    float intensity = (leftBottom + leftTop + rightBottom + rightTop) / 4.0;\n    intensity = mix(0.0,0.8,intensity);\n    col += intensity;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}