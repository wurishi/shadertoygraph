{"ver":"0.1","info":{"id":"cddXD2","date":"1683542224","viewed":336,"name":"Very simple Raytracer","username":"TheJinxedArtist","description":"a very simple ray tracer inspired by Sebastian Lague.\n\nAlso I used some other people's code for post processing (I cant remember who's and I don't spend a lot of time here so if you see your code, feel free to comment and I'll add it whenever I next look.","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    color = RRTAndODTFit(color);\n    color = color * ACESOutputMat;\n\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\nvec2 barrelDistortion(vec2 coord, float amt, float zoom)\n{ \n\tvec2 cc = coord-0.5;\n    vec2 p = cc*zoom;\n    coord = p+0.5;\n\tfloat dist = dot(cc, cc);\n\treturn coord +cc*dist*amt;\n}\n\nconst int sampleCount = 10;\nconst float blur = 0.25; \nconst float falloff = 3.0; \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor.rgb = vec3(0.0);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 vv = 2.0*(uv-0.5);\n    vv.x *= iResolution.x/iResolution.y;\n    \n    float cas = step(abs(vv.y)*2.39,iResolution.x/iResolution.y);\n    if (cas<0.1) return;\n    \n    uv = barrelDistortion(uv, 0.1, 0.96);\n    \n    vec2 direction = normalize(uv - 0.5); \n    vec2 velocity = direction * blur * pow(length(uv - 0.5), falloff);\n\tfloat inverseSampleCount = 1.0 / float(sampleCount); \n    \n    mat3x2 increments = mat3x2(velocity * 1.0 * inverseSampleCount,\n                               velocity * 2.0 * inverseSampleCount,\n                               velocity * 4.0 * inverseSampleCount);\n\n    vec3 accumulator = vec3(0);\n    mat3x2 offsets = mat3x2(0); \n    \n    for (int i = 0; i < sampleCount; i++) {\n        accumulator.r += texture(iChannel0, uv + offsets[0]).r; \n        accumulator.g += texture(iChannel0, uv + offsets[1]).g; \n        accumulator.b += texture(iChannel0, uv + offsets[2]).b; \n        \n        offsets -= increments;\n    }\n    \n    vec3 col = accumulator / float(sampleCount);\n    \n    vec3 hsv = rgb2hsv(col);\n    hsv.b = (hsv.b - 0.5) * 1.2 + 0.5;\n    col = hsv2rgb(hsv);\n    \n    col = ACESFitted(col * 2.0);\n    col = pow(col, vec3(1.5));\n    \n    vec2 v = 2.*(uv-.5);\n    v.y *= 2.39 * iResolution.y/iResolution.x;\n    v = clamp((v*.5)+.5, 0., 1.);\n    col *= 0.25 + 0.75*pow( 16.0*v.x*v.y*(1.0-v.x)*(1.0-v.y), 0.0625);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n\nfloat hash11(float n)\n{\n\treturn fract(sin(n) * 43758.5453123);\n}\nfloat hash12(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec3 hash33(vec3 p)\n{\n\tp = vec3(dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t     dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t     dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nfloat RandomValue(inout uint state)\n{\n    state = state * 747796405u + 2891336453u;\n    uint result = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    result = (result >> 22u) ^ result;\n    state *= result;\n    return float(result) / 4294967295.0;\n}\n\nfloat RandomValueNormalDistribution(inout uint n)\n{\n    float theta = 2.0 * PI * RandomValue(n);\n    float rho = sqrt(-2.0 * log(RandomValue(n)));\n    n += uint(rho * cos(theta));\n    return rho * cos(theta);\n}\n\nvec3 RandomDirection(inout uint n)\n{\n    float x = RandomValueNormalDistribution(n);\n    float y = RandomValueNormalDistribution(n);\n    float z = RandomValueNormalDistribution(n);\n    return normalize(vec3(x, y, z));\n}\n\nvec3 RandomHemisphereDirection(vec3 normal, inout uint n)\n{\n    vec3 dir = RandomDirection(n);\n    return dir * sign(dot(normal, dir));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 RGB(float r, float g, float b)\n{\n    return vec3(r,g,b) / 255.0;\n}\n\nvec2 RandomPointInCircle(inout uint n)\n{\n    float angle = RandomValue(n) * 2.0 * PI;\n    vec2 pointOnCircle = vec2(cos(angle), sin(angle));\n    return pointOnCircle * sqrt(RandomValue(n));\n}\n\nstruct Ray\n{\n\tvec3 origin;\n\tvec3 dir;\n};\n\nstruct Material\n{\n\tvec3 colour;\n\tvec3 emissionColour;\n\tfloat emissionStrength;\n    float smoothness;\n    bool transmittion;\n    float specularPercent;\n    float IOR;\n};\n\nstruct HitInfo\n{\n\tbool hit;\n\tfloat dist;\n\tvec3 point;\n\tvec3 normal;\n\tMaterial mat;\n};\n\nstruct Sphere\n{\n\tvec3 position;\n\tfloat radius;\n\tMaterial mat;\n};\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nconst int NumSpheres = 50;\nconst int BounceCount = 5;\nconst int SampleCount = 50;\nconst float DefocusStrength = 150.0;\nconst float FocusDistance = 10.0;\nconst Ray defaultRay = Ray(vec3(0), vec3(1));\nconst Material defaultMat = Material(vec3(1), vec3(0), 0.0, 0.0, false, 0.5, 1.5);\nconst HitInfo defaultHit = HitInfo(false, 100.0, vec3(0), vec3(1), defaultMat);\nconst Sphere defaultSphere = Sphere(vec3(0), 1.0, defaultMat);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"HitInfo RaySphere(Ray ray, vec3 origin, float radius)\n{\n    HitInfo hitInfo = defaultHit;\n    vec3 offsetRayOrigin = ray.origin - origin;\n\n    float a = dot(ray.dir, ray.dir);\n    float b = 2.0 * dot(offsetRayOrigin, ray.dir);\n    float c = dot(offsetRayOrigin, offsetRayOrigin) - radius * radius;\n\n    float discriminant = b * b - 4.0 * a * c;\n\n    if(discriminant >= 0.0)\n    {\n        float dist = (-b - sqrt(discriminant)) / (2.0 * a);\n\n        if(dist >= 0.0)\n        {\n            hitInfo.hit = true;\n            hitInfo.dist = dist;\n            hitInfo.point = ray.origin + ray.dir * dist;\n            hitInfo.normal = normalize(hitInfo.point - origin);\n        }\n    }\n    return hitInfo;\n}\n\nHitInfo RayPlane(Ray ray, vec3 origin, vec3 normal)\n{\n    HitInfo hitInfo = defaultHit;\n\n    float denom = dot(normal, ray.dir);\n    if (abs(denom) > 0.0001) {\n        vec3 p0l0 = origin - ray.origin;\n        float t = dot(p0l0, normal) / denom;\n        if (t >= 0.0) {\n            hitInfo.hit = true;\n            hitInfo.dist = t;\n            hitInfo.point = ray.origin + ray.dir * t;\n            hitInfo.normal = normalize(normal);\n            \n            hitInfo.point += hitInfo.normal * 0.0001;\n        }\n    }\n    return hitInfo;\n}\n\nvec3 PlaneTexture(vec3 point)\n{\n    vec3 color = vec3(0);\n    color = texture(iChannel2, fract(point.xz * 0.1)).rgb;\n    return color;\n}\n\nHitInfo RayCollision(Ray ray)\n{\n    HitInfo closestHit = defaultHit;\n\n    closestHit.dist = 500.0;\n\n    Sphere sphere = defaultSphere;\n    sphere.position = vec3(1.0, 1.0, 0.0);\n    sphere.mat = Material(vec3(1.0), vec3(0), 0.0, 0.0, false, 1.0, 1.5);\n    HitInfo iSphere = RaySphere(ray, sphere.position, sphere.radius);\n\n    if(iSphere.hit && iSphere.dist < closestHit.dist)\n    {\n        closestHit = iSphere;\n        closestHit.mat = sphere.mat;\n    }\n    \n    sphere = defaultSphere;\n    sphere.position = vec3(-1.0, 1.0, 0.0);\n    sphere.mat = Material(vec3(1.0), vec3(0), 0.0, 1.0, false, 1.0, 1.5);\n    iSphere = RaySphere(ray, sphere.position, sphere.radius);\n\n    if(iSphere.hit && iSphere.dist < closestHit.dist)\n    {\n        closestHit = iSphere;\n        closestHit.mat = sphere.mat;\n    }\n    \n    HitInfo plane = RayPlane(ray, vec3(0), vec3(0,1,0));\n    \n    if(plane.hit && plane.dist < closestHit.dist)\n    {\n        closestHit = plane;\n        closestHit.mat = defaultMat;\n        closestHit.mat.smoothness = 0.9;\n        closestHit.mat.specularPercent = 0.2;\n        closestHit.mat.colour = PlaneTexture(plane.point);\n    }\n\n    return closestHit;\n}\n\nvec3 GetEnvironmentLight(Ray ray)\n{\n    vec3 col = texture(iChannel1, ray.dir).rgb;\n    col = pow(col, vec3(2.2));\n    col = (col + col) / (1.0 - col);\n    col = min(col, vec3(10.0));\n    col = pow(col * 2.0, vec3(0.4545));\n    return col;\n}\n\nvec3 Trace(Ray ray, inout uint n)\n{\n    vec3 rayColour = vec3(1.0);\n    vec3 incomingLight = vec3(0.0);\n\n    HitInfo origInfo = RayCollision(ray);\n\n    for(int i = 0; i < BounceCount; i++)\n    {\n        HitInfo info = RayCollision(ray);\n        Material mat = info.mat;\n        \n        if(info.hit)\n        {\n            ray.origin = info.point;\n            vec3 diffuseDir = normalize(info.normal + RandomDirection(n));\n            vec3 specularDir = reflect(ray.dir, info.normal);\n            vec3 refractDir = refract(ray.dir, info.normal, 1.0 / mat.IOR);\n            \n            float R0 = pow((1.0 - mat.IOR) / (1.0 + mat.IOR), 2.0);\n            float fresnelTerm = R0 + (1.0 - R0) * pow(1.0 - dot(-ray.dir, info.normal), 5.0);\n            float specularChance = mix(fresnelTerm, 1.0, mat.specularPercent);\n            \n            specularChance = (specularChance < RandomValue(n)) ? 0.0 : 1.0;\n\n            if(mat.transmittion == true)\n            {\n                ray.dir = mix(refractDir, specularDir, vec3(mat.smoothness) * specularChance);\n            }\n            else\n            {\n                ray.dir = mix(diffuseDir, specularDir, vec3(mat.smoothness) * specularChance);\n            }\n            \n            Material mat = info.mat;\n            vec3 emittedLight = mat.emissionColour * mat.emissionStrength;\n            incomingLight += emittedLight * rayColour;\n            rayColour *= mat.colour.rgb;\n            \n        }\n        else\n        {\n            incomingLight += GetEnvironmentLight(ray) * rayColour;\n            break;\n        }\n    }\n    return incomingLight;\n}\n\nmat3 camera(vec3 position, vec3 target)\n{\n    vec3 dir = normalize(target - position);\n    vec3 right = normalize(cross(vec3(0, 1, 0), dir));\n    vec3 up = normalize(cross(dir, right));\n    \n    return mat3(-right, up, -dir);\n}\n\nbool isCameraMoving = false;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    isCameraMoving = iMouse.z > 0.0;\n\n    vec3 target = vec3(0,1,0);\n    vec3 camPos = vec3(0.0, -((iMouse.y / iResolution.y) - 1.0) * 10.0, 0.0);\n    \n    float distFromTarget = 10.0;\n    camPos.x = distFromTarget * cos((iMouse.x / iResolution.x) * 5.0) + target.x;\n    camPos.z = distFromTarget * sin((iMouse.x / iResolution.x) * 5.0) + target.z;\n    \n    vec3 viewDir = camera(camPos, target) * normalize(vec3(uv, -1.75));\n\n    vec3 col = vec3(0);\n    \n    ivec2 pixels = ivec2(iResolution.xy);\n    ivec2 pixelCoord = ivec2(uv2 * vec2(pixels));\n    uint pixelIndex = uint(pixelCoord.y * pixels.x + pixelCoord.x);\n    uint rnd = pixelIndex + uint(iFrame * 719393);\n\n    for(int i = 0; i < SampleCount; i++)\n    {\n        Ray ray = defaultRay;\n\n        vec2 defocusJitter = RandomPointInCircle(rnd) * DefocusStrength / iResolution.x;\n        ray.origin = camPos + vec3(1,0,0) * defocusJitter.x + vec3(0,1,0) * defocusJitter.y;\n        \n        vec3 focusPoint = camPos + viewDir * FocusDistance;\n        ray.dir = normalize(focusPoint - ray.origin);\n    \n    \tcol += Trace(ray, rnd);\n    }\n    col /= float(SampleCount);\n    \n    if(!isCameraMoving)\n    {\n        float weight = 0.01; //Modification by thepinkpanzer.\n        vec3 average = texture(iChannel0, uv2).rgb * (1.0 - weight) + col * weight;\n        col = average;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//FXAA by jiangdunchun\n\n#define UP_LEFT      0\n#define UP           1\n#define UP_RIGHT     2\n#define LEFT         3\n#define CENTER       4\n#define RIGHT        5\n#define DOWN_LEFT    6\n#define DOWN         7\n#define DOWN_RIGHT   8\nvec2 KERNEL_STEP_MAT[] = vec2[9](\n    vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0),\n    vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),\n    vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0)\n);\n\n#define STEP_COUNT_MAX   12\nfloat QUALITY(int i) {\n    if (i < 5) return 1.0;\n    if (i == 5) return 1.5;\n    if (i < 10) return 2.0;\n    if (i == 10) return 4.0;\n    if (i == 11) return 8.0;\n}\n\n\n// L = 0.299 * R + 0.587 * G + 0.114 * B\nfloat RGB2LUMA(vec3 color) {\n    return dot(vec3(0.299, 0.578, 0.114), color);\n}\n\n\n#define EDGE_THRESHOLD_MIN  0.0312\n#define EDGE_THRESHOLD_MAX  0.125\n#define SUBPIXEL_QUALITY    0.75\n#define GRADIENT_SCALE      0.25\n\nvec4 fxaa_3_11(sampler2D color_buffer, vec2 uv, vec2 uv_step) {\n    // get luma of kernel\n    float luma_mat[9];\n    for (int i = 0; i < 9; i++) {\n        luma_mat[i] = RGB2LUMA(texture(color_buffer, uv + uv_step * KERNEL_STEP_MAT[i]).xyz);\n    }\n    \n    // detecting where to apply FXAA, return the pixel color if not\n    float luma_min = min(luma_mat[CENTER], min(min(luma_mat[UP], luma_mat[DOWN]), min(luma_mat[LEFT], luma_mat[RIGHT])));\n    float luma_max = max(luma_mat[CENTER], max(max(luma_mat[UP], luma_mat[DOWN]), max(luma_mat[LEFT], luma_mat[RIGHT])));\n    float luma_range = luma_max - luma_min;\n    if(luma_range < max(EDGE_THRESHOLD_MIN, luma_max * EDGE_THRESHOLD_MAX)) return texture(color_buffer, uv);\n    \n    // choosing edge tangent\n    // horizontal: |(upleft-left)-(left-downleft)|+2*|(up-center)-(center-down)|+|(upright-right)-(right-downright)|\n    // vertical: |(upright-up)-(up-upleft)|+2*|(right-center)-(center-left)|+|(downright-down)-(down-downleft)|\n    float luma_horizontal = \n        abs(luma_mat[UP_LEFT] + luma_mat[DOWN_LEFT] - 2.0 * luma_mat[LEFT])\n        + 2.0 * abs(luma_mat[UP] + luma_mat[DOWN] - 2.0 * luma_mat[CENTER])\n        + abs(luma_mat[UP_RIGHT] + luma_mat[DOWN_RIGHT] - 2.0 * luma_mat[RIGHT]);\n    float luma_vertical = \n        abs(luma_mat[UP_LEFT] + luma_mat[UP_RIGHT] - 2.0 * luma_mat[UP])\n        + 2.0 * abs(luma_mat[LEFT] + luma_mat[RIGHT] - 2.0 * luma_mat[CENTER])\n        + abs(luma_mat[DOWN_LEFT] + luma_mat[DOWN_RIGHT] - 2.0 * luma_mat[DOWN]);\n    bool is_horizontal = luma_horizontal > luma_vertical;\n    \n    // choosing edge normal \n    float gradient_down_left = (is_horizontal ? luma_mat[DOWN] : luma_mat[LEFT]) - luma_mat[CENTER];\n    float gradient_up_right = (is_horizontal ? luma_mat[UP] : luma_mat[RIGHT]) - luma_mat[CENTER];\n    bool is_down_left = abs(gradient_down_left) > abs(gradient_up_right);\n    \n    // get the tangent uv step vector and the normal uv step vector\n    vec2 step_tangent = (is_horizontal ? vec2(1.0, 0.0) : vec2(0.0, 1.0)) * uv_step;\n    vec2 step_normal =  (is_down_left ? -1.0 : 1.0) * (is_horizontal ? vec2(0.0, 1.0) : vec2(1.0, 0.0)) * uv_step;\n    \n    // get the change rate of gradient in normal per pixel\n    float gradient = is_down_left ? gradient_down_left : gradient_up_right;\n    \n    // start at middle point of tangent edge\n    vec2 uv_start = uv + 0.5 * step_normal;\n    float luma_average_start = luma_mat[CENTER] + 0.5 * gradient;    \n    //return vec4(luma_average_start, luma_average_start,luma_average_start, 1.0);\n    \n    // explore along tangent bidirectional until reach the edge both\n    vec2 uv_pos = uv_start + step_tangent;\n    vec2 uv_neg = uv_start - step_tangent;\n    \n    //return texture(iChannel0, uv_neg);\n    \n    float delta_luma_pos = RGB2LUMA(texture(color_buffer, uv_pos).rgb) - luma_average_start;\n    float delta_luma_neg = RGB2LUMA(texture(color_buffer, uv_neg).rgb) - luma_average_start;\n    \n    bool reached_pos = abs(delta_luma_pos) > GRADIENT_SCALE * abs(gradient);\n    bool reached_neg = abs(delta_luma_neg) > GRADIENT_SCALE * abs(gradient);\n    bool reached_both = reached_pos && reached_neg;\n    \n    if (!reached_pos) uv_pos += step_tangent;\n    if (!reached_neg) uv_neg -= step_tangent;\n    \n    if (!reached_both) {\n        for(int i = 2; i < STEP_COUNT_MAX; i++){\n            if(!reached_pos) delta_luma_pos = RGB2LUMA(texture(color_buffer, uv_pos).rgb) - luma_average_start;\n            if(!reached_neg) delta_luma_neg = RGB2LUMA(texture(color_buffer, uv_neg).rgb) - luma_average_start;\n            \n            bool reached_pos = abs(delta_luma_pos) > GRADIENT_SCALE * abs(gradient);\n            bool reached_neg = abs(delta_luma_neg) > GRADIENT_SCALE * abs(gradient);\n            bool reached_both = reached_pos && reached_neg;\n            \n            if (!reached_pos) uv_pos += (QUALITY(i) * step_tangent);\n            if (!reached_neg) uv_neg -= (QUALITY(i) * step_tangent);\n            \n            if (reached_both) break;\n        }\n    }\n    \n    //return texture(iChannel0, uv_neg);\n    \n    // estimating offset\n    float length_pos = max(abs(uv_pos - uv_start).x, abs(uv_pos - uv_start).y);\n    float length_neg = max(abs(uv_neg - uv_start).x, abs(uv_neg - uv_start).y);\n    bool is_pos_near = length_pos < length_neg;\n    \n    float pixel_offset = -1.0 * (is_pos_near ? length_pos : length_neg) / (length_pos + length_neg) + 0.5;\n    \n    // no offset if the bidirectional point is too far\n    if(((is_pos_near ? delta_luma_pos : delta_luma_neg) < 0.0) == (luma_mat[CENTER] < luma_average_start)) pixel_offset = 0.0;\n    \n    // subpixel antialiasing\n    float luma_average_center = 0.0;\n    float average_weight_mat[] = float[9](\n        1.0, 2.0, 1.0,\n        2.0, 0.0, 2.0,\n        1.0, 2.0, 1.0\n    );\n    for (int i = 0; i < 9; i++) luma_average_center += average_weight_mat[i] * luma_mat[i];\n    luma_average_center /= 12.0;\n    \n    float subpixel_luma_range = clamp(abs(luma_average_center - luma_mat[CENTER]) / luma_range, 0.0, 1.0);\n    float subpixel_offset = (-2.0 * subpixel_luma_range + 3.0) * subpixel_luma_range * subpixel_luma_range;\n    subpixel_offset = subpixel_offset * subpixel_offset * SUBPIXEL_QUALITY;\n    \n    // use the max offset between subpixel offset with before\n    pixel_offset = max(pixel_offset, subpixel_offset);\n    \n    \n    return texture(color_buffer, uv + pixel_offset * step_normal);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 px = 1.0 / iResolution.xy;\n    \n    vec4 col = fxaa_3_11(iChannel0, uv, px);\n    \n    fragColor = col;\n}\n","name":"Buffer B","description":"","type":"buffer"}]}