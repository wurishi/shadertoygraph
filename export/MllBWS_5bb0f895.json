{"ver":"0.1","info":{"id":"MllBWS","date":"1514333223","viewed":344,"name":"Cuphead","username":"zackpudil","description":"Use mouse to look around. Fun game, should check it out.\n\nInspired by: [url=https://vignette.wikia.nocookie.net/p__/images/5/57/Cuphead_prst.jpg/revision/latest?cb=20171022174833&path-prefix=protagonist]This image[/url]","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","character"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sat(a) clamp(a, 0.0, 1.0)\n\nvec2 dmin(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nfloat smoothmin(float a, float b, float k) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 rot(vec2 p, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat2(c, s, -s, c)*p;\n}\n\nfloat cylinder(vec3 p, vec2 h) {\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat segment(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a; \n    vec3 ba = b - a;\n    \n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - ba*h) - r;\n}\n\nfloat straw(vec3 p) {\n    p.x += 0.6;\n    p.y -= 1.2;\n    \n    float s = cylinder(p, vec2(0.12 + 0.02*sin(100.0*p.y)*step(0.65, p.y), 0.8));\n    \n    p.y -= 0.97;\n    p.x += 0.3;\n\tp.xy = rot(p.xy, -1.0);\n    \n    p.xy = rot(p.xy + vec2(0, 0.2), 0.2*sin(14.0*iTime)) - vec2(0, 0.2);\n    float us = cylinder(p, vec2(0.12 + 0.02*sin(100.0*p.y)*step(0.15, -p.y), 0.4));\n    us = max(us, -cylinder(p, vec2(0.09, 0.5)));\n    s = min(s, us);\n    \n    return s;\n}\n\nfloat head(vec3 p) {\n    p.y -= 1.0;\n    \n    float c = length(p) - 1.0;\n    c = max(c, -(length(p) - 0.8));\n    c = max(c, p.y - 0.3);\n    \n    p.x += 1.0;\n    p.y += 0.3;\n    \n    float h = length(vec2(length(p.xy) - 0.5, p.z)) - 0.1;\n    h = max(h, p.x - 0.4);\n    \n    h = smoothmin(h, c, 0.1);\n    \n    p.yz = rot(p.yz, sign(p.z)*0.3);\n    float s = length((p - vec3(1.6, -0.37, 0))*vec3(1.6, 1.3, 0.7)) - 0.3;\n    h = max(h, -s);\n    \n    return h;\n}\n\nfloat eyes(vec3 p) {\n    vec3 op = p;\n    \n    p.y -= 1.07;\n    p.x -= 0.65;\n    \n    p.y *= 0.7;\n    p.z *= 0.7;\n    \n\tp.z = abs(p.z) - 0.14;\n    \n    float e = length(p) - 0.4;\n    e = max(e, p.y - 0.16);\n    \n    return max(e, -(length(op) - 0.8));\n}\n\nfloat innereyes(vec3 p) {    \n    p.y -= 1.07;\n    p.x -= 0.65;\n    \n    p.y *= 0.7;\n    p.z *= 0.7;\n    \n    p.xy = rot(p.xy, 0.3);\n\n    p.y *= 0.7;\n    p -= vec3(0.3, -0.0, -0.0);\n    \n    p.z += 0.07*cos(10.0*iTime)*smoothstep(-0.2, 1.0, sin(iTime));\n    p.z = abs(p.z) - 0.25;\n    \n    float e = length(p) - 0.15;\n    return e;\n}\n\nfloat nose(vec3 p) {\n    p.xy -= vec2(0.9, 0.6);\n    return length(p*vec3(0.8, 1.2, 0.8)) - 0.1;\n}\n\nfloat torso(vec3 p) {\n    vec3 q = p;\n    \n    p.xz *= 1.0 - 0.4*smoothstep(-1.1, 0.3, -p.y);\n    float s = cylinder(p, vec2(0.45, 0.7));\n    \n    q.y += 0.4;\n    s = min(s, max(length(q) - 0.83, q.y - 0.1));\n    return s;\n}\n\nfloat legs(vec3 p) {\n    p.z = -abs(p.z) + 0.4;\n    \n \n    float b = -0.1*cos(14.0*iTime);\n    float l = segment(p + vec3(0, b, 0), \n                      vec3(0), \n                      vec3(0.1, -0.5, -0.3), \n                      0.17);\n    \n    l = min(l, segment(p + vec3(0, b, 0), \n                       vec3(0.1, -0.5, -0.3), \n                       vec3(-0.2, -1.0 + 1.2*b, 0), 0.17));\n    \n    p.yz = rot(p.yz, -0.4);\n    return min(l, cylinder(p - vec3(0, 0.5 - b, 0), vec2(0.25, 0.5)));\n}\n\nfloat shoes(vec3 p) {\n    p.y += 0.7;\n\n    float b = -0.1*cos(14.0*iTime);\n    p.z = -abs(p.z) + 0.4;\n\n    vec3 heel = vec3(-0.2, 0.1-b, 0);\n    vec3 toes = vec3(0.3, 0, -0.4);\n    \n    \n    float sh = segment(p*vec3(0.8, 1.0, 0.8), heel, toes, \n                       0.25 + 0.14*smoothstep(0.0, 0.7, p.x));\n    \n    return sh;\n}\n\nfloat arms(vec3 p) {\n    p.y -= 0.2;\n    p.z = -abs(p.z) + 0.85;\n    \n    p.z -= 0.75;\n    p.yz = rot(p.yz, -0.6*smoothstep(-1.0, 0.5, p.y));\n    p.z += 0.75;\n    float a = segment(p, vec3(0), vec3(0, -0.7, -0.3), 0.08);\n    \n    return a;\n}\n\nfloat hands(vec3 p) {\n    p *= 0.9;\n    p.y -= 0.4;\n    p.z = -abs(p.z) + 1.07;\n    \n    float s = length((p - vec3(0, 0.1, 0))*vec3(1.2, 1.4, 1.2)) - 0.35;\n    s = min(s, length((p - vec3(0, 0.4, 0))*vec3(1, 1.6, 1)) - 0.2);\n    \n    s = smoothmin(s, segment(p - vec3(0.0, 0.16, 0.17), \n                             vec3(0), \n                             vec3(-0.1, -0.2, 0.2), 0.08), 0.1);\n    \n    s = smoothmin(s, segment(p - vec3(0.0, 0.16, 0.17),\n                             vec3(-0.1, -0.2, 0.2),\n                             vec3(-0.1, -0.3, 0.1), 0.08), 0.01);\n    \n    p.z = -abs(p.z) + 0.12;\n    p.z = -abs(p.z) + 0.05;\n    \n    p.x -= 0.1;\n    p.y += 0.05;\n    s = smoothmin(s, segment(p, vec3(0), vec3(0, -0.12, 0), 0.07), 0.1);\n    s = smoothmin(s, segment(p, vec3(0, -0.12, 0), vec3(-0.2, -0.1, 0), 0.07), 0.02);\n    return s;\n}\n\n#define SHOES 1.0\n#define LEGS 2.0\n#define HANDS 3.0\n#define TORSO 4.0\n#define HEAD  5.0\n#define STRAW 6.0\n#define EYES 7.0\n#define INNEREYES 8.0\n#define NOSE 9.0\n\nvec2 de(vec3 p) {\n    vec2 f = vec2(min(p.y + 1.0, p.x + 3.0), 0.0);\n    vec2 sh = vec2(shoes(p), SHOES);\n    \n    p.y -= 0.2*cos(14.0*iTime);\n\tp.y -= 0.6;\n    vec2 l = vec2(legs(p), LEGS);\n    vec2 ds = vec2(hands(p), HANDS);\n    p.y -= 1.35;\n    \n    vec2 t = vec2(smoothmin(torso(p), arms(p), 0.4), TORSO);\n    \n    p.y -= 0.6;\n    vec2 h = vec2(head(p), HEAD);\n    vec2 s = vec2(straw(p), STRAW);\n    vec2 e = vec2(eyes(p), EYES);\n    vec2 ie = vec2(innereyes(p), INNEREYES);\n    vec2 m = vec2(nose(p), NOSE);\n    \n    vec2 ret = dmin(f, sh);\n    ret = dmin(ret, dmin(l, t));\n    ret = dmin(ret, dmin(h, s));\n    ret = dmin(ret, e);\n    ret = dmin(ret, ie);\n    ret = dmin(ret, ds);\n    ret = dmin(ret, m);\n    \n    return ret;\n}\n\nvec2 trace(vec3 o, vec3 d, float x) {\n    float t = 0.0;\n    float m = -1.0;\n    \n    for(int i = 0; i < 100; i++) {\n        vec2 d = de(o + d*t);\n        if(d.x < 0.001 || t >= x) break;\n        t += d.x*0.85;\n        m = d.y;\n    }\n    \n    return vec2(t, t < x ? m : -1.0);\n}\n\nvec3 normal(vec3 p) {\n    vec2 h = vec2(0.001, 0.0);\n    vec3 n = vec3(\n        de(p + h.xyy).x - de(p - h.xyy).x,\n        de(p + h.yxy).x - de(p - h.yxy).x,\n        de(p + h.yyx).x - de(p - h.yyx).x\n    );\n    return normalize(n);\n}\n\n\nfloat ao(vec3 p, vec3 n) {\n    float o = 0.0, s = 0.005, w = 1.0;\n    for(int i = 0; i < 15; i++) {\n        float d = de(p + n*s).x;\n        o += (s - d)*w;\n        w *= 0.98;\n        s += s/float(i + 1);\n    }\n    return 1.0 - sat(o);\n}\n\nmat3 camera(vec3 e, vec3 l) {\n    vec3 w = normalize(l - e);\n    vec3 u = normalize(cross(vec3(0, 1, 0), w));\n    vec3 v = normalize(cross(w, u));\n    \n    return mat3(u, v, w);\n}\n\nvec3 materail(vec3 p, float m) {\n    p.y -= 0.2*cos(14.0*iTime);\n    \n    if(m == 0.0) {\n        return vec3(1.5);\n    } else if(m == STRAW) {\n        p.xy = rot(p.xy, -1.0*step(4.4, p.y));\n    \tvec3 m = vec3(1.5, 0, 0);\n        m += vec3(0.5, 2.0, 2.0)*smoothstep(0.3, 0.8, abs(cos(10.0*p.y)));\n        \n        return m;\n    } else if(m == TORSO) return vec3(0.1) + vec3(1, 0, 0)*step(-1.63, -p.y);\n    else if(m == HANDS) return vec3(2.0);\n    else if(m == EYES) return vec3(2.0);\n    else if(m == INNEREYES) return vec3(0.1);\n    else if(m == NOSE) return vec3(1.5, 0.1, 0.1);\n    else if(m == SHOES) return vec3(1.09, 0.54, 0.14);\n    else if(m == LEGS) {\n        p.z = -abs(p.z) + 0.4;\n        p.yz = rot(p.yz, -0.4);\n        \n        p.y -= 0.1*cos(14.0*iTime);;\n        \n        if(p.y > 0.52) return vec3(1.1, 0.1, 0.1);\n        else return vec3(1);\n\t} else return vec3(1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    vec2 mo = iMouse.z == 0.0\n        ? vec2(1.5, 1.0)\n        : (-iResolution.xy + 4.0*iMouse.xy)/iResolution.y;\n    \n    float at = 0.5*iTime;\n    \n    vec3 ro = vec3(7.0*sin(mo.x), 1.0 + 2.0*mo.y, 7.0*cos(mo.x));\n    vec3 rd = camera(ro, vec3(0, 2.5, 0))*normalize(vec3(p, 1.97));\n    \n    vec3 col = vec3(0);\n    vec3 lig = normalize(vec3(0.8, 0.7, -0.6));\n    \n    vec2 t = trace(ro, rd, 50.0);\n    if(t.x < 50.0) {\n        vec3 pos = ro + rd*t.x;\n        vec3 nor = normal(pos);\n        vec3 ref = reflect(rd, nor);\n        \n        float occ = ao(pos, nor);\n        float sha = step(15.0, trace(pos+nor*0.001, lig, 15.0).x);\n        \n        col += 0.5*occ;\n        col += sat(dot(lig, nor))*occ*sha;\n        col += pow(sat(1.0 + dot(rd, nor)), 2.0)*occ;\n        col += 2.0*pow(sat(dot(lig, ref)), 20.0)*occ;\n        \n        col *= materail(pos, t.y);\n    }\n    \n    col = mix(vec3(0), col, exp(-0.1*t.x));\n    \n    col = 1.0 - exp(-0.5*col);\n    col = pow(col, vec3(1.0/2.2));\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}