{"ver":"0.1","info":{"id":"XclBRl","date":"1724197443","viewed":60,"name":"ojo suelto","username":"jorge2017a2","description":"ojo suelto","likes":12,"published":1,"flags":8,"usePreview":0,"tags":["2d","raymarching","sound","eyes","ojosuelto"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------image\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.01\n#define EPSILON 0.01\n#define Ka 0.5\n#define Kd 0.4\n\n//referencia ///Dripping--Created by Squiggle in 2019-03-28\n//https://www.shadertoy.com/view/WdBXD1\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat Sdf_I(float distA, float distB) { return max(distA, distB);}\nfloat Sdf_U(float distA, float distB) { return min(distA, distB);}\nfloat Sdf_D(float distA, float distB) { return max(distA, -distB);}\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r); return (p - o) * mat2(c, -s, s, c) + o; }\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang); float s = sin(ang);  return vec2(p.x*c - p.y*s, p.x*s + p.y*c); }\n\n\nvec3 rotate_x(vec3 p, float phi)\n{ float c = cos(phi);\tfloat s = sin(phi); return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);}\nvec3 rotate_y(vec3 p, float phi){ float c = cos(phi);float s=sin(phi);\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x); }\nvec3 rotate_z(vec3 p, float phi){ float c = cos(phi);float s=sin(phi); return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z); }\n\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( vec3 p, float la, float lb, float h, float ra )\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);\n\n    p=rotate_y(p, radians(270.0));\n    \n     p.y=p.y+10.0;\n    vec3 p0=p;\n    //float planeDist1 = p.y+10.0;  //piso inf\n    //res =opU2(res, vec2(planeDist1,101.0));\n    \n    p.y=p.y-5.0;\n    \n    float d1=sdSphere(p-vec3(0.0,0.0,0.0) , 10.0 );\n    float d2=sdSphere(p-vec3(0.0,0.0,0.0) , 9.0 );\n    vec2 pn= Rotate(p.xy-vec2(9.0,3.0), vec2(0.0,0.0), radians(iTime));\n    \n    float d3= sdEquilateralTriangle(pn, 5.0 );\n    \n    float df= Sdf_D(d1, d3);\n    \n    res =opU2(res, vec2(df,100.0));\n    res =opU2(res, vec2(d2,24.0));\n    \n    float la,lb,h,ra ;\n    la=1.75; lb=0.5, h=0.5; ra=0.2;\n    \n    vec3 pn2=p.yxz-vec3(0.0,8.5,-5.0);\n    vec3 pn3=p.yxz-vec3(-1.0,10.0,-1.0);\n    vec3 pn4=p.yxz-vec3(-1.0,10.0, 2.0);\n    vec3 pn5=p.yxz-vec3(0.0,8.5, 5.0);\n    \n    float d1a= sdRhombus( pn2,la,lb, h,ra );\n    float d2a= sdRhombus( pn3,la,lb, h,ra );\n    float d3a= sdRhombus( pn4,la,lb, h,ra );\n    float d4a= sdRhombus( pn5,la,lb, h,ra );\n    \n    ///pesta√±a 2\n    p.y=p.y-6.;\n     pn2=p.yxz-vec3(-1.0,7.0,-5.0);\n     pn3=p.yxz-vec3(0.0,8.5,-1.0);\n     pn4=p.yxz-vec3(0.0,8.5, 2.0);\n     pn5=p.yxz-vec3(-1.0,7.0, 5.0);\n    \n    float d1b= sdRhombus( pn2,la,lb, h,ra );\n    float d2b= sdRhombus( pn3,la,lb, h,ra );\n    float d3b= sdRhombus( pn4,la,lb, h,ra );\n    float d4b= sdRhombus( pn5,la,lb, h,ra );\n    \n    \n    res =opU2(res, vec2(d1a,101.0));\n    res =opU2(res, vec2(d2a,101.0));\n    res =opU2(res, vec2(d3a,101.0));\n    res =opU2(res, vec2(d4a,101.0));\n    \n    res =opU2(res, vec2(d1b,101.0));\n    res =opU2(res, vec2(d2b,101.0));\n    res =opU2(res, vec2(d3b,101.0));\n    res =opU2(res, vec2(d4b,101.0));\n    \n    \n    ///ojo\n    p=p0;\n    float ps=3.0*sin(iTime);\n    float d1c= sdCylinderYZ( p-vec3(0.0,7.0,0.0+ps), vec2(2.0,10.0) );\n    float d2c= sdCylinderYZ( p-vec3(0.0,7.0,0.0+ps), vec2(1.0,10.0) );\n    d1c=Sdf_I(d2,d1c);\n    d2c=Sdf_I(d2,d2c);\n    \n    res =opU2(res, vec2(d1c,5.0));\n    res =opU2(res, vec2(d2c,0.0));\n    \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n     vec3 V = normalize(ro - p);\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n    float shadow = getSoftShadow(worldPos, L);// shadows\n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.5)*specular*specular;\n    return colOut;\n}\n\n\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tvec3 col;\n    if (i==100 )\n    { col=tex3D(iChannel0, p/32., nor); return col*2.0*getColor(24);  }\n\tif (i==101 ) \n    //{ return tex3D(iChannel1, p/32., nor); }\n    { col=tex3D(iChannel0, p/32., nor)*0.25; return col*2.0; }\n    \n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n    return vec3(0.0);\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n    //return sky*d;\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n     if (id_color<40) { colobj=getColor(int( id_color));  return colobj; }\n    \n   if (id_color>=100 )\n   { return  getColorTextura( p, nor,id_color); }\n      \n  return vec3(0.0);\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd, vec2 uv)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n        \n        result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n    else if(hit.x>MAX_DIST)\n    //col= render_sky_color(rd);\n    col= gotas(uv,iTime).xyz;\n   return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n     vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    \n    vec2 uv2 = fragCoord/iResolution.xy;\n    uv2.x *= iResolution.x / iResolution.y; //square\n    uv2.y = 1.0 - uv2.y; //flip\n    \n    \n    float t0=iTime;\n    float t=mod(t0*5.0,500.0);\n \tlight_pos1= vec3(-10.0, 20.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n    vec3 ro=vec3(0.0,-4.0,-25.0);\n    vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n    vec3 col= Render( ro,  rd,uv2);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-------common\n#define PI 3.14159265\n\nstruct Ray\n{   vec3 ro; // origin\n    vec3 rd; // direction\n};\n\n\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9), //32\nvec3(0.7333, 0.1412, 0.1412), //33\nvec3(0.1843, 0.3333, 0.1843), //34\n vec3(0.6549, 0.6549, 0.9922), //35\n vec3(0.8549, 0.8549, 0.8549)  //36\n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n\n\n\n\n\n///Dripping--Created by Squiggle in 2019-03-28\n//https://www.shadertoy.com/view/WdBXD1\n//const float PI = 3.14159265359;\n\nfloat seed = 0.25;\n\nfloat dripDistance = 0.1;\nfloat density = 0.75;\n\nfloat bCurve = 1.5;\nfloat bFreq = 3.5;\nfloat bRange = 0.35;\n\nfloat fallSpeed = 6.0;\n\nfloat sdfWidth = 0.18;\n\n\nfloat rand( float x, float y ){\n    //return texture( iChannel1, vec2(x,y) / (iResolution.x / iResolution.y) ).r;\n    return fract(sin(x*63.+y*59.+16.)*32672.93);\n\n}\n\nfloat dripSDF( vec2 uv , float time)\n{   \n    float s = sdfWidth * abs((1.0-uv.y)-0.75) + 0.05;\n    float o = 1.0;\n    float drip = 999.0;\n    \n    float x = uv.x - sdfWidth;\n    x += dripDistance - mod(x, dripDistance);\n    \n    x -= dripDistance; //ungh... this is dirty... I'll fix it later\n    for( int i=0; i<1000; i++ )\n    {\n        if( x > uv.x + sdfWidth ) break;\n        \n        x += dripDistance;\n        float isLine = round(rand(x, seed) + density-0.5);\n        if( isLine == 0.0 ) continue;\n        \n        float y = rand(seed,x) * 0.8 + 0.1;\n        //y *= abs(sin(x*3.0))*0.5 + 0.5;\n        float animTime = time+(y*10.0);\n        float bounce = 0.0 - (bCurve * mod(animTime, bFreq)) * exp(1.0-bCurve*mod(animTime, bFreq));\n        y += bounce * bRange;\n        y = min(y,uv.y);\n        \n        float f = y + mod(animTime, bFreq) * fallSpeed * bRange;\n        \n        //float d = min( distance(vec2(x,y),uv), distance(vec2(x,f),uv) );\n        float d = distance(vec2(x,y),uv);\n        \n        o *= clamp(d/s,0.0,1.0);\n        drip = min( drip, distance(vec2(x,f),uv) );\n    }\n    \n    o = min( o, clamp(drip/s,0.0,1.0) );\n    \n    s = sin(uv.x*20.0+ time * 0.2)*0.3 + 0.4;\n    return o * clamp(distance(0.0, uv.y)/s,0.0,1.0);\n}\n\n//https://www.shadertoy.com/view/WdBXD1\nvec4 gotas(vec2  uv,float time )\n{\n    vec4 fragColor;\n    vec3 col = vec3(0.0); \n    float c = 1.0/sdfWidth * 0.025;\n    float w = 0.03;\n    float d = dripSDF(uv,time);\n    col.b = 1.0 - smoothstep( c - w, c + w, d );\n    //col.r = d;\n    \n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(rand(uv.x, uv.y)*col.b);\n    return  fragColor;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"//referencia \n//https://dittytoy.net/ditty/fb067b7861\n#define SAMPLE_RATE 26900.0\n\nint asciiValues[427] = int[](\n    66, 42, 57, 49, 56, 47, 57, 49, 54, 45, 57, 49, 56, 47, 57, 49,\n    54, 45, 57, 49, 56, 47, 57, 49, 66, 42, 57, 49, 56, 47, 57, 49,\n    54, 45, 57, 49, 56, 47, 57, 49, 62, 42, 59, 50, 58, 49, 59, 50,\n    54, 47, 59, 50, 58, 49, 50, 62, 42, 59, 50, 58, 49, 59, 50, 54,\n    47, 59, 50, 58, 49, 50, 65, 42, 59, 50, 57, 49, 54, 47, 59, 50,\n    57, 49, 50, 65, 42, 59, 50, 57, 49, 54, 47, 59, 50, 57, 49, 50,\n    66, 42, 61, 45, 59, 45, 61, 45, 57, 49, 61, 45, 59, 45, 66, 42,\n    61, 45, 59, 45, 61, 45, 57, 49, 61, 45, 59, 45, 69, 42, 62, 62,\n    54, 61, 54, 52, 62, 54, 61, 54, 69, 42, 62, 54, 61, 54, 57, 50,\n    54, 61, 54, 69, 42, 62, 62, 54, 61, 54, 52, 62, 54, 61, 54, 57,\n    50, 54, 61, 54, 68, 42, 60, 51, 58, 49, 60, 51, 51, 56, 48, 60,\n    51, 58, 49, 60, 51, 51, 56, 48, 60, 51, 51, 68, 40, 61, 54, 51,\n    61, 54, 52, 68, 40, 61, 54, 51, 61, 54, 68, 40, 66, 40, 58, 49,\n    56, 47, 58, 49, 66, 40, 58, 49, 56, 47, 58, 49, 66, 38, 59, 50,\n    58, 49, 54, 47, 59, 50, 58, 49, 54, 50, 66, 38, 59, 50, 58, 49,\n    54, 47, 59, 50, 58, 49, 54, 50, 64, 38, 59, 49, 58, 47, 59, 49,\n    64, 38, 59, 49, 58, 47, 59, 49, 64, 37, 61, 45, 59, 45, 61, 45,\n    57, 49, 61, 45, 59, 45, 57, 49, 62, 42, 61, 45, 59, 45, 61, 45,\n    57, 49, 61, 45, 59, 45, 62, 45, 62, 42, 61, 45, 59, 45, 61, 45,\n    57, 49, 61, 45, 59, 45, 62, 45, 62, 44, 56, 47, 54, 56, 52, 56,\n    54, 56, 47, 44, 56, 47, 54, 56, 52, 56, 54, 56, 47, 61, 45, 52,\n    49, 50, 47, 49, 49, 52, 49, 50, 47, 61, 45, 52, 49, 50, 47, 49,\n    49, 52, 49, 50, 47, 49, 49, 49, 59, 45, 54, 51, 52, 49, 54, 51,\n    52, 49, 54, 51, 52, 49, 54, 51, 52, 49, 54, 51, 52, 49, 54, 51,\n    52, 49, 54, 51, 52, 49, 59, 44, 56, 47, 52, 56, 54, 56, 47, 61,\n    45, 52, 50, 49, 52, 49, 50, 45, 54, 51, 54, 63, 59, 45, 54, 51,\n    54, 63, 59, 44, 56, 47, 52, 56, 54, 56, 47\n);\n\n\n\nfloat cbrt(float x) {\n    return sign(x) * pow(abs(x), 1.0 / 3.0);\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Funci√≥n para generar sonido de bajo (bass)\nfloat bassSound(float t) {\n    return ((mod(1.48 * t, 256.0) + mod(1.47 * t, 256.0)) / 2.0) * (mod(-t / SAMPLE_RATE, 256.0)) / 512.0;\n}\n\n// Funci√≥n para generar sonido de piano\nfloat pianoSound(float t) {\n    return 32.0 * sin(10.0 * cbrt(mod(t, SAMPLE_RATE * 16.0)));\n}\n\n// Funci√≥n para generar un ruido adicional\nfloat noiseSound(float t) {\n    return ((12.0 * rand(vec2(t, t * 0.5)) * mod(-t / SAMPLE_RATE, 256.0)) / 64.0) * mod(t / SAMPLE_RATE, 256.0) / 16000.0;\n}\n\n// Funci√≥n principal que combina todos los sonidos\nfloat beatbyte(float t) {\n    //int index = int(t / 4096.0) % 640;\n    \n    int index = int(t / 4096.0) % 427;\n    \n    float p = t * pow(2.0, (float(asciiValues[index]) / 12.0 - 4.0));\n    \n    float bass = bassSound(p);\n    float piano = pianoSound(t);\n    float noise = noiseSound(t);\n\n    // Combina los sonidos de bajo, piano y ruido\n    float sound = bass + piano + noise + 32.0;\n    \n    return sound / 128.0;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float t = time * SAMPLE_RATE;\n    float audioSignal = beatbyte(t);\n    return  vec2( audioSignal);\n}","name":"Sound","description":"","type":"sound"}]}