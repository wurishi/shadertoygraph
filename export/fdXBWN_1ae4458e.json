{"ver":"0.1","info":{"id":"fdXBWN","date":"1645025131","viewed":345,"name":"2D lights & shadows with SDF","username":"webholics","description":"Only exterior has correct distance field.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","light","shadows"],"hasliked":0,"parentid":"NsXfRM","parentname":"Basic 2d sdf"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Soft shadows by https://iquilezles.org/articles/rmshadows\n#define M_PI 3.1415926535897932384626433832795\n\nmat2 tRotate(float angle){\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nvec2 opRep(vec2 p, vec2 c)\n{\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\n\nvec2 opTx(vec2 p, mat2 t)\n{\n    return inverse(t) * p;\n}\n\nfloat sdBox(vec2 p, vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\n// sc is the sin/cos of the aperture\nfloat sdArc(vec2 p, vec2 sc, float ra, float rb)\n{\n    p.x = abs(p.x);\n    return ((sc.y * p.x > sc.x * p.y) ? length(p - sc * ra) : abs(length(p) - ra)) - rb;\n}\n\nfloat map(vec2 p) \n{\n    float floor = min(\n        sdBox(p - vec2(-1.25, -1.0), vec2(1.0, 0.2)),\n        sdBox(p - vec2(1.25, -1.0), vec2(1.0, 0.2))\n    );\n    floor = min(floor, sdBox(opRep(p - vec2(1.0, -1.0), vec2(2.0, 10.0)), vec2(0.4, 0.35)));\n    \n    float ceiling = sdBox(p - vec2(0.0, 1.0), vec2(10.0, 0.4));\n    ceiling = min(ceiling, sdBox(opRep(p - vec2(0.5, 1.0), vec2(1.0, 10.0)), vec2(0.2, 1.0)));\n    ceiling = min(ceiling, sdBox(opRep(p - vec2(0.0, 1.0), vec2(1.0, 10.0)), vec2(0.1, 0.6)));\n    \n    float tb = M_PI * 0.1;\n    vec2  sc = vec2(sin(tb), cos(tb));\n    float time = 0.2 * iTime;\n    float lamp = sdArc(opTx(p - vec2(0.0, -0.5), tRotate(time)), sc, 0.2, 0.01);\n    lamp = min(lamp, sdArc(opTx(p - vec2(0.0, -0.5), tRotate(M_PI * 0.5 + time)), sc, 0.2, 0.01));\n    lamp = min(lamp, sdArc(opTx(p - vec2(0.0, -0.5), tRotate(M_PI * 1.0 + time)), sc, 0.2, 0.01));\n    lamp = min(lamp, sdArc(opTx(p - vec2(0.0, -0.5), tRotate(M_PI * 1.5 + time)), sc, 0.2, 0.01));\n    \n    return min(floor, min(ceiling, lamp));\n}\n\nfloat shadow(vec2 ro, vec2 rd, float mint, float maxt, float k)\n{\n    float res = 1.0;\n    float t = mint;\n    while(true) {\n        float h = map(ro + rd * t);\n        \n        if(h < 0.0001) {\n            return 0.0;\n        }\n        \n        res = min(res, k * h / t);\n        \n        if (t >= maxt) {\n            break;\n        }\n        \n        t = min(t + h, maxt);\n    }\n    \n    return res;\n}\n\nvec3 pointLight(vec2 p, vec2 lightPos, vec3 lightColor) \n{\n    vec2 d = lightPos - p;\n    float lightDist = length(d);\n    vec2 lightDir = normalize(d);\n    return lightColor / max(1.0, pow(lightDist, 2.0)) * shadow(p + 0.001 * lightDir, lightDir, 0.001, lightDist, 4.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n\tvec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n\tfloat d = map(p);\n\n    // Coloring\n    vec3 col = d > 0.0 ? vec3(0.24, 0.29, 0.48) : vec3(0.94);\n    col *= 1.0 - 0.5 * exp(-10.0 * abs(d));\n\tcol *= 1.0 - 0.2 * smoothstep(0.95, 1.0, cos(150.0 * d));\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.005, abs(d) - 0.0025));\n    \n    // Lights\n    float pulse = 0.15 * sin(iTime);\n    vec3 light = pointLight(p, m, vec3(2.0));\n    light += pointLight(p, vec2(0.0 + pulse, 0.25), 4.0 * vec3(0.25, 0.22, 0.1));\n    light += pointLight(p, vec2(-1.0 + pulse, 0.25), vec3(0.25, 0.2, 0.1));\n    light += pointLight(p, vec2(1.0 + pulse, 0.25), vec3(0.25, 0.22, 0.1));\n    \n    col *= light;\n    \n    // Gamma\n    col = pow(col, vec3(0.4545));\n    \n    // Mouse\n    if(iMouse.z > 0.001) {\n        d = map(m);\n        col = mix(col, vec3(0.95, 0.82, 0.04), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n        col = mix(col, vec3(0.95, 0.82, 0.04), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.01));\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}