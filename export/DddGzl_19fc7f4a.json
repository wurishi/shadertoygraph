{"ver":"0.1","info":{"id":"DddGzl","date":"1677694578","viewed":101,"name":"reflections off 4d sphere","username":"sanderoneil","description":"shperer","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    float constpix = iResolution.x/2./iResolution.y;\n    vec4 v = vec4(uv-vec2(constpix,.5),1,0);\n    v /= length (v);\n    vec4 v1 = vec4(0,0,1,0);\n    \n    //int N = 4;\n    vec4 ps[N];\n    \n    for (int w = 0; w<2; w++)\n    \n    for (int z = 0; z<2; z++)\n    \n    for (int x = 0; x<2; x++)\n    {\n    for (int y = 0; y<2; y++)\n    {\n        int c = (z*4 + w* 8+x*2+y);\n        ps[c].x = float(x)-.5;\n        ps[c].y = float(y)-.5;\n        ps[c].z = float(w)-.5;\n        ps[c].w = float(z)-.5;\n    }\n    }\n    \n    ps[N-1] = vec4(0,0,0,0);\n    \n    \n    for (int n= 0; n < N; n++)\n    {\n    ps[n] = rot(ps[n],iTime*0.1,iTime*0.2333,0.3*iTime,0.1*iTime,0.1*iTime);\n    }\n    vec3 col = vec3(0,0,0);\n    \n    vec4 p = -v1*4.;\n    \n    \n    vec4 newv;\n    vec4 newp;\n    for (int d = 0; d < 9; d++)\n    {\n    \n    \n    vec3 thiscol = vec3(0,0,0);\n    \n    \n    \n    \n        //vec3 col = vec3(p.x,p.y,0);\n    \n    float closest = 10000000000.;\n    \n    for (int n= 0; n < N; n++)\n    {\n    \n    vec4 c = ps[n] - p;\n    \n   \n    float A = sqrt( pow(dot(v,-c),2.) - (dot(c,c) - r * r));\n    \n    float colorangle = float(n)/float(N)*3.1415*2.;\n    \n    //.x=A;\n    \n    \n    if (A>0.)\n    {\n        float d = - dot(v,-c) - A;\n        if (d<closest && d > 0.)\n        {\n            \n            \n            closest = d;\n            thiscol = vec3(cos(colorangle*50.)/2.+.7,cos(colorangle*2.21+.9)/2.+.5,cos(colorangle*4.333)/2.+.5);\n        \n        \n            vec4 intersect = v*d;\n            vec4 norm = intersect - c;\n            norm /= length(norm);\n                \n            \n            \n            newv = v - 2.*dot(v,norm)*norm;\n            newp = p+intersect;\n           \n        }\n        \n    }\n    }\n    v = newv;\n    p = newp;\n    if (closest < 100000.0){\n    col = (col+thiscol)/1.9;\n    \n    }\n    }\n    \n    \n    \n    \n    \n    // Time varying pixel color\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int N = 17;\nconst float r = .5;\n\nvec4 rot(vec4 p,float a, float b,float c,float d,float e)\n{\n\n vec4 pt;\n float co = cos(a);\n float si = sin(a);\n \n pt = vec4(co*p.x - si*p.y,si*p.x + co*p.y,p.z,p.w);\n p = pt+0.;\n co = cos(b);\n si = sin(b);\n pt = vec4(co*p.x - si*p.z,p.y,si*p.x + co*p.z,p.w);\n p = pt+0.;\n \n co = cos(c);\n si = sin(c);\n pt = vec4(co*p.x - si*p.w,p.y,p.z,si*p.x + co*p.w);\n p = pt+0.;\n \n co = cos(d);\n si = sin(d);\n pt = vec4(p.x,co*p.y - si*p.w,p.z,si*p.y + co*p.w);\n p = pt+0.;\n \n co = cos(e);\n si = sin(e);\n pt = vec4(p.x,p.y,co*p.z - si*p.w,si*p.z + co*p.w);\n p = pt+0.;\n \n return p;\n \n}\n\nvec3 path2(vec4 v, vec4 p, vec4 ps[N])\n{\n    vec3 col = vec3(0,0,0);\n    \n    float closest = 10000000.;\n    \n    for (int n= 0; n < N; n++)\n    {\n    \n    vec4 c = ps[n] - p;\n\n    \n    float A = sqrt( pow(dot(v,-c),2.) - (dot(c,c) - r * r));\n    \n    float colorangle = float(n)/float(N)*3.1415*2.;\n    \n    if (A>0.)\n    {\n        float d = - dot(v,-c) - A;\n        if (d<closest && d > 0.)\n        {\n            col = vec3(cos(colorangle*50.)/2.+.7,cos(colorangle*2.21+.9)/2.+.5,cos(colorangle*4.333)/2.+.5);\n            closest = d;\n            \n            \n        \n        }\n        \n    }\n    }\n    return col;\n}\nvec3 path(vec4 v, vec4 p, vec4 ps[N])\n{\n    vec3 col = vec3(p.x,p.y,0);\n    \n    float closest = 10000000000.;\n    \n    for (int n= 0; n < N; n++)\n    {\n    \n    vec4 c = ps[n] - p;\n    \n   \n    float A = sqrt( pow(dot(v,-c),2.) - (dot(c,c) - r * r));\n    \n    float colorangle = float(n)/float(N)*3.1415*2.;\n    \n    //.x=A;\n    \n    \n    if (A>0.)\n    {\n        float d = - dot(v,-c) - A;\n        if (d<closest && d > 0.)\n        {\n            col = vec3(cos(colorangle*50.)/2.+.7,cos(colorangle*2.21+.9)/2.+.5,cos(colorangle*4.333)/2.+.5);\n            closest = d;\n            \n        \n        \n            vec4 intersect = v*d;\n            vec4 norm = intersect - c;\n            norm /= length(norm);\n                \n            vec3 pc = path2(v - 2.*dot(v,norm)*norm,p+intersect,ps);\n            \n            if (dot(pc,pc)>0.1){\n            col = pc;\n            }\n        \n        }\n        \n    }\n    }\n    return col;\n}\n","name":"Common","description":"","type":"common"}]}