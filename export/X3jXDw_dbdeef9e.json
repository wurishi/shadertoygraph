{"ver":"0.1","info":{"id":"X3jXDw","date":"1710697841","viewed":54,"name":"music visualization 12edo spiral","username":"cinix","description":"Music visualization","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["musicvisualization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy GLSL代码\nconst float PI = 3.14159265358979323846264338327950288;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 将屏幕坐标归一化到 [-1, 1] 范围，并调整纵横比\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // 极坐标半径和角度\n    float radius = length(uv) * 2.0; // 乘以2是为了保证半径最大为1\n    float angle = atan(uv.y, uv.x);\n    if (angle < 0.0) angle += 2.0 * PI; // 确保角度是正的\n\n    // 初始化颜色为黑色\n    vec3 col = vec3(0.0);\n\n    // 螺线的参数 a 和 b\n    float a = 0.015; // 这个值越小，螺线从中心开始的越紧密\n\n    // 归属到最近的螺线\n    float mini = 1.0;\n    float T = 0.0;\n    for (float t = 0.0; t <= 12.0; t++) {\n        // 螺线方程，考虑到角度的倍率\n        float spiralRadius = a * (angle + t * PI * 2.0);\n\n        // 如果当前半径接近某一周的螺旋半径，则设置像素颜色\n        if (abs(spiralRadius - radius) < mini) {\n            \n            mini = abs(spiralRadius - radius);\n            T = t;\n        }\n    }\n    \n    // 以下调整内外渐变\n    \n    \n    col = vec3(1.5 - mini/(0.6 * a * PI));    \n    \n    \n    float po = T + angle/(2.*PI);\n    \n        \n    float k = max(min(max(0.,min(1.,po)),11.-po),0.);\n    \n    \n    col *= (1.-(1.-k)*(1.-k))*k+(1.-k)*k*k;\n\n\n    // 以下根据音频着色\n    \n    float sampleIndex = pow(2.,T+angle/(2.*PI));\n    \n    float spectrumSample = 1.;\n    \n    spectrumSample = texture(iChannel0, vec2(sampleIndex / iChannelResolution[0].x, -1.)).r;\n    \n    col *= 10.*pow(spectrumSample,9.)-9.*pow(spectrumSample,10.);\n    \n    col *= pow(2.,(2.*PI*T+angle)/15.)-0.5;\n    \n    col *= 0.2+0.8*pow(sin(6.*(angle+PI/4.)),2.);\n    \n    col.r *= cos(PI+(2.*PI*T+angle)/15.)/2.+0.5;\n    \n    col.g *= cos(-PI/2.+(2.*PI*T+angle)/15.)/2.+0.5;\n    \n    col.b *= cos((2.*PI*T+angle)/15.)/2.+0.5;\n\n    \n    \n    // 输出颜色\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}