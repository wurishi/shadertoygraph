{"ver":"0.1","info":{"id":"4dlczB","date":"1488846463","viewed":474,"name":"bidouille","username":"balkhan","description":"Still having fun with the blackbody algorithm from aiekick.\n","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","blackbody"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define I_MAX\t150\n#define E\t\t0.001\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n//#define EXPERIMENTAL // too noisy on borders\n\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec2\trot(vec2 p, vec2 ang);\nfloat\tt;\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\n\nvoid mainImage(out vec4 o, in vec2 f )\n{t = iTime;\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3\tpos = vec3(.0, .0, 15.0);\n\n    vec2\tinter = (march(pos, dir));\n\n    col.xyz = blackbody((1.1-length(uv)*1.1)*inter.x*300./inter.y);\n   \to = col;\n}\n\nfloat\tscene(vec3 p)\n{\n    float\tmind = 1e5;\n    vec2\tr = vec2(cos(1.57+t), sin(1.57+t));\n    p.yx *= mat2(r.x, r.y, -r.y, r.x ); // rotations\n    p.xz *= mat2(r.x, r.y, -r.y, r.x );\n\n    mind = -sdTorus(p, vec2(3.5, 3.5) );\n\n    #ifndef EXPERIMENTAL\n    p.y = max(abs(sin(t*3.+abs(p.y)+abs(p.z) ) +abs(p.y) ), .5 );\n    #else\n    p.y = max(abs(sin(t*3.+abs(p.y)+abs(p.z) -abs(p.y+p.z)*abs(p.y-p.z) ) +abs(p.y) ), .5 );\n    #endif\n\tp.x = max(abs(p.x)+sin(t), 1.5 );\n\n    mind += sdTorus(p, vec2(3.8, 2.75) );\n\n    return(mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 20.)\n           break;\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n\n    return length(q)-t.y;\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}