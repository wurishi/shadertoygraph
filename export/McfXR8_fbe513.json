{"ver":"0.1","info":{"id":"McfXR8","date":"1704932699","viewed":86,"name":"[steve] wavy pattern","username":"import_shader_steve","description":"Using sin to wave the texture and use cos (its derivative) to apply some shader to it.\nFrom The Art of Code's American Flag tutorial: https://www.youtube.com/watch?v=t4XnK50ocMk&t=2457s&ab_channel=TheArtofCode. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["wavypattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat remap01(float x, float low, float high) {\n    return clamp((x-low)/(high-low), 0., 1.);\n}\nfloat remap(float x, float lowIn, float highIn, float lowOut, float highOut) {\n    return mix(lowOut, highOut, remap01(x, lowIn, highIn));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    // make a wavy flag / image texture\n    // use sin wave to animate it\n    // and use cos (derivative) wave to animate the shadow texture\n    // is this related to the normal shading as talked about in the texture & modeling 2nd edition?\n    // in that normal direction is the cross product of dx and dy of surface --> perpendicular to surface?\n    vec2 st = uv;\n    float t = uv.x * 5. + uv.y * 3. - iTime * 2.;\n    uv.y -= sin(t) * 0.05;\n    col += texture(iChannel0, uv).rgb;\n    float shadow = cos(t) * 0.3;\n    col *= 0.7 + shadow;\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) col = vec3(0.);\n\n    // 2. Implement a photoshop-like interface entirely in shadertoy -- practice different image mixing effects, and buttons\n    // 3. in three.js, implement a shader on a quad that smoothly interpolates between its world position, and its fullscreen looks, sort of like in toolbox opening up a tool\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}