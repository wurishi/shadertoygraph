{"ver":"0.1","info":{"id":"DltyzM","date":"1699022859","viewed":53,"name":"fading spheres","username":"siers","description":"My description: draw balls, then modulate their radius and brightness by time\nOriginal description: Learn from https://thebookofshaders.com/09/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"XtdcWM","parentname":"simple pattern"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 0..1 -> 0..1 cos\nfloat unitCos(float f) {\n  return ((cos(2.0*3.14159*f)+1.0)/2.0);\n}\n\nfloat circle(in vec2 _st, in int x, in int y, in float _radius) {\n    float time = iTime * 0.5;\n    float cosTimeBw = unitCos(fract((time * 8. + ((float(x) + float(y)) / 3.)) * 0.5)) / 2.;\n    float cosTimeFw = unitCos(fract((time * -1. + ((float(x) - float(y)) / 3.)) * 0.5)) / 2.;\n\n    vec2 l = _st-vec2(0.5);\n    float p = 0.3 + cosTimeBw;\n    float r = dot(l, l) * 4.0 + cosTimeBw;\n    float smoothed = smoothstep(_radius-(_radius*p), _radius+(_radius*p), r);\n    float color = smoothed;\n    return 1. - ((1. - color) * pow(cosTimeFw, 0.8)); // (1. - pow(cosTimeFw, 2.) / 2.);\n    //return color * pow(cosTimeFw, 0.8); // (1. - pow(cosTimeFw, 2.) / 2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // scale\n    int s = 15;\n\n    // Normalized pixel coordinates (from 0 to s - 1)\n    vec2 uv = fragCoord / iResolution.y * float(s);\n\n    // Now we have 3 spaces that goes from 0-1\n    float bright = circle(fract(uv), int(uv.x), int(uv.y), 0.5);\n    float dark = 1. - bright;\n\n    // Output to screen\n    vec3 blue = vec3(0.20, 0.56, 0.92);\n    vec3 orange = vec3(1.00, 0.38, 0.00);\n    //fragColor = vec4(orange * bright,1.0);\n    fragColor = vec4(1. - (1.-orange)*dark,1.0);\n}\n","name":"Image","description":"","type":"image"}]}