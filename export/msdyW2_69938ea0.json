{"ver":"0.1","info":{"id":"msdyW2","date":"1695522135","viewed":99,"name":"tri dir grid on triangle terrain","username":"jt","description":"Combines two shaders:\nGeometry: [url=https://www.shadertoy.com/view/ddcyRl]textured terrain by triangle DDA[/url]\nTexture: [url=https://www.shadertoy.com/view/DddyWr]triagonal oriented random blocks[/url]\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raytracing","grid","terrain","raycasting","triangle","voxel","random","rectangle","pattern","dda","kisrhombille","project","lift"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/msdyW2 tri dir grid on triangle terrain, 2023 by jt\n// combines two shaders:\n// geometry: https://www.shadertoy.com/view/ddcyRl textured terrain by triangle DDA\n// texture: https://www.shadertoy.com/view/DddyWr triagonal oriented random blocks\n\n// Geometry:\n// Implementation of a triangular heightmap\n// by stepping through a 2d triangle grid using a VOXEL DDA\n// along the plane orthogonal to the main diagonal (1,1,1).\n\n// Texture:\n// Loopless random blocks oriented in three directions.\n// For interesting placement of buildings in procedurally generated city maps than just rectangular grid,\n// while at the same time being reasonably easy addressable, for grid-based simulation and wayfinding.\n// The underlying triangular structure facilitates seamless inclusion of terrain (via heightmap & triangle mesh).\n\n// Algorithm:\n// For each triangle in tiling choose (1 of 3) directions randomly.\n// If orientation matches neighbor triangle color half-triangle with direction color.\n// Apply fourth color to unmatched half triangles.\n\n// Alternates between independent triangles and triangles grouped to hexagons.\n\n// tags: procedural, raytracing, grid, terrain, raycasting, triangle, voxel, random, rectangle, pattern, dda, kisrhombille, project, lift\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U;\n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;\n    return uint(((x>>8U)^x.yzx)*k);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 128\n\n#define USE_SHADOWS\n\nvec3 triangle_center(vec3 a, vec3 b, vec3 c)\n{\n    return (a+b+c)/3.0;\n}\n\nvec3 triangle_normal(vec3 a, vec3 b, vec3 c)\n{\n    return normalize(cross(a - b, c - b));\n}\n\nfloat plane_intersection(vec3 pp, vec3 pn, vec3 ro, vec3 rd)\n{\n    return dot(pp - ro,pn)/dot(rd,pn);\n}\n\n// Is there a better way to implement integer-division that always round DOWN ?!\nint div_floor(int a, int b)\n{\n    return (a > 0 && b < 0) ? ((a - 1) / b) - 1 : (a < 0 && b > 0) ? (a + 1) / b - 1 : a / b;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, int b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 mod_positive(ivec3 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    return div_floor(i.zxy-i.yzx,3); // NOTE: permutate 0,-1,+1 to align hexagons differently\n}\n\nuint orientation(ivec3 tile)\n{\n    if((int(iTime/2.0)&1)!=0) tile = hexagonal(tile); // alternate triangular-hexagonal structure\n    return uhash(tile + int(iTime)) % 3u;\n}\n\nvec3 permute(uint direction, vec3 local)\n{\n    return direction == 0u ? local : direction == 1u ? local.yzx : local.zxy; // this configuration would also work with directions 0,+1,-1\n}\n\nivec3 permute(uint direction, ivec3 local)\n{\n    return direction == 0u ? local : direction == 1u ? local.yzx : local.zxy; // this configuration would also work with directions 0,+1,-1\n}\n\nivec3 unpermute(uint direction, ivec3 local)\n{\n    return direction == 0u ? local : direction == 1u ? local.zxy : local.yzx; // this configuration would also work with directions 0,+1,-1\n}\n\nivec2 permute(bool flag, ivec2 v)\n{\n    return flag ? v.yx : v;\n}\n\nvec3 color(uint direction)\n{\n    return direction == 0u ? vec3(1,0,0) : direction == 1u ? vec3(0,1,0) : vec3(0,0,1) ; // this configuration would also work with directions 0,+1,-1\n}\n\nvec3 color(int direction)\n{\n    return direction == 0 ? vec3(1,0,0) : direction == 1 ? vec3(0,1,0) : vec3(0,0,1) ; // this configuration would also work with directions 0,+1,-1\n}\n\nbool ledge(ivec3 i)\n{\n//return 0.0;\n    //return !(i.x < 0 || i.x > 0);\n    return !(i.y-i.x < 0 || i.y-i.x > 0);\n    //ivec2 v = ivec2((i.y-i.x), i.z*2);\n    //return abs(v.x*v.x+v.y*v.y - 10*10) < 15;\n    //return i.x*i.x+i.y*i.y+i.z*i.z < 7*7;\n}\n\nfloat height(ivec3 i)\n{\n//return 0.0;\n    //if(i.x < 0) return -100.0;\n    //if(((i.x^i.y^i.z)&1) == 0) return -100.0;\n\n    vec3 p = vec3(i);\n    float s = 25.0;\n    float hills = 4.0*sin(2.0*pi*p.x/s) * sin(2.0*pi*p.y/s) * sin(2.0*pi*p.z/s);\n    float ledge = -5.0 * step(0.0, float(i.x));\n    float platform = 5.0 * step(length(vec3(i)), 10.0);\n    //return max(hills, platform) + ledge;\n    //return hills + ledge;\n    return hills;\n}\n\nstruct result\n{\n    vec3 normal;\n    float dist;\n    vec3 color;\n};\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nresult combine(result a, result b)\n{\n    //return (a.dist < b.dist ? a : b); // XXX ?! XXX\n    if(a.dist < b.dist) return a; return b;\n}\n\n// Toggles between only vectors orthogonal to main diagonal and full coordinate system.\n// NOTE: Using full coordinates requires an offset of sqrt(3) at some places to align with essential version.)\n#define ESSENTIAL_MATRIX\n\n#ifdef ESSENTIAL_MATRIX\n// not needed for essential matrix\n#else\nvec3 project(vec3 v)\n{\n    vec3 n = vec3(1,1,1);\n    return v - dot(v,n)*n/dot(n,n); // remove component along diagonal\n}\n#endif\n\nresult triangle_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (jt)\n{\n    // Use of the transform matrix T:\n    // T*v lifts vector v from triangular 2d to rectangular 3d (triangular = barycentric)\n    // v*T projects vector v from rectangular 3d back down to triangular 2d (NOTE: v*T = transpose(T)*v)\n    // Cutting a cube grid (lattice?) perpendicular to diagonal (1,1,1) results in a triangular grid.\n    // I think this is a simple case of the cut-and-project method https://tilings.math.uni-bielefeld.de/glossary/cut-and-project/\n    // This special case could be called \"lift-and-project\" (I suppose cut-and-project does some additional things).\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along plane orthogonal to diagonal (1,1,1) only orthogonal vectors\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2))\n        );\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * ray_pos_orig.xy;\n    vec3 ray_dir = T * ray_dir_orig.xy;\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1) full coordinate system\n    mat3 T =\n        mat3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2)),\n            normalize(vec3(-1,-1,-1))\n        );\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * vec3(ray_pos_orig.xy, 0);\n    vec3 ray_dir = T * vec3(ray_dir_orig.xy, 0);\n#endif\n\n    result content = result(-ray_dir_orig, DIST_MAX, mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(ray_dir_orig.z))); // sky-sphere\n\n    ivec3 tile = ivec3(floor(ray_pos)); // round down position to get tile position\n    // decompose ray direction into reciprocal absolute ray direction and sign (-1,+1)\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    // initial distances to nearest walls by dimension:\n    //     calculate ray position in relation to tile origin\n    //     (requires adding one half because tile origin is floor of ray position)\n    //     adjust sign according to ray direction\n    //     because tile has size 1 and we start in the middle wall is located at 0.5 (sign depends on ray direction)\n    //     divide by ray direction (to get distance with respect to ray)\n    vec3 side_dist = (sign(ray_dir) * (vec3(tile) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0);\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        uint direction = orientation(tile);\n        bool even = ((tile.x ^ tile.y ^ tile.z) & 1) == 0;\n        float flip = even ? -1.0 : +1.0;\n\n        float h = 3.5;\n        bool l = ledge(tile);\n        //bool l = ledge(hexagonal(tile));\n\n        ivec3 tile_x = even ? ivec3(1,0,0) : ivec3(0,1,1);\n        ivec3 tile_y = even ? ivec3(0,1,0) : ivec3(1,0,1);\n        ivec3 tile_z = even ? ivec3(0,0,1) : ivec3(1,1,0);\n#ifdef ESSENTIAL_MATRIX\n        vec3 a = vec3(vec3(tile - tile_x)*T,l?h:height(tile - tile_x));\n        vec3 b = vec3(vec3(tile - tile_y)*T,l?h:height(tile - tile_y));\n        vec3 c = vec3(vec3(tile - tile_z)*T,l?h:height(tile - tile_z));\n#else\n        vec3 a = vec3(tile - tile_x)*T + vec3(0,0,(l?h:height(tile - tile_x))-sqrt(3.0));\n        vec3 b = vec3(tile - tile_y)*T + vec3(0,0,(l?h:height(tile - tile_y))-sqrt(3.0));\n        vec3 c = vec3(tile - tile_z)*T + vec3(0,0,(l?h:height(tile - tile_z))-sqrt(3.0));\n#endif\n        vec3 n = triangle_normal(a,b,c);\n        vec3 m = triangle_center(a,b,c);\n\n        float tmin = length(vec3(nearest) * (side_dist - delta_dist)); // assume ray_dir normalized\n\n        {\n            vec3 dst = ray_pos_orig + ray_dir_orig * tmin;\n\n            if(dot(dst - m,n) < 0.0) // prism wall?\n            {\n                // Calculate normal-vector directly from the nearest mask\n#ifdef ESSENTIAL_MATRIX\n                content = combine(content,result(normalize(vec3((vec3(nearest)*vec3(-ray_step))*T,0.0)), tmin, vec3(1)));\n#else\n                content = combine(content,result(normalize(project((vec3(nearest)*vec3(-ray_step))))*T, tmin, vec3(1)));\n#endif\n            }\n        }\n\n        // core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        nearest = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        side_dist += vec3(nearest) * delta_dist; // update distances to nearest walls by dimension\n        ivec3 tile_next = tile + ivec3(vec3(nearest)) * ray_step; // step to next tile in direction of nearest wall\n        float tmax = length(vec3(nearest) * (side_dist - delta_dist)); // assume ray_dir normalized\n\n        {\n            float d = plane_intersection(m, n, ray_pos_orig, ray_dir_orig);\n\n            if(d >= max(0.0, tmin) && d <= tmax) // hit plane\n            {\n#ifdef ESSENTIAL_MATRIX\n                // NOTE: T*transpose(T) = mat3(+2,-1,-1,-1,+2,-1,-1,-1,+2)/3.0\n                vec3 local = T*(flip*((ray_pos_orig + ray_dir_orig * d).xy - vec3(tile)*T)) + 1.0/3.0;\n#else\n                mat3 Z = mat3(1,0,0,0,1,0,0,0,0);\n                vec3 local = T*Z*(flip*(ray_pos_orig + ray_dir_orig * d - vec3(tile)*T)) + 1.0/3.0;\n#endif\n                local = permute(direction, local);\n\n                bool side = (local.y-local.x) <= 0.0;\n\n                vec3 col = vec3(0);\n                // group triangle halfs with matching adjacent direction\n                if(orientation(tile + unpermute(direction, ivec3(permute(side, ivec2(even?+1:-1,0)),0))) == direction)\n                    //col = color(direction);\n                    col = mat3(vec3(0.0, 0.0, 0.5), vec3(0.1, 0.5, 0.0), vec3(1.0, 0.4, 0.0)) * color(direction); // apply color change matrix\n                else\n                    //col = 0.5 + 0.02 * vec3(side);\n                    col = vec3(0.5);\n\n                content = combine(content, result(n,d, col));\n            }\n        }\n\n        if(content.dist < tmax)\n            return content;\n\n        tile = tile_next;\n    }\n\n    return content;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -20.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    ray_dir = normalize(ray_dir);\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    vec3 skycolor = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(ray_dir.z));\n    vec3 color = vec3(0);\n    result r = triangle_trace(ray_pos, ray_dir);\n    color += r.color;\n    if(r.dist < DIST_MAX)\n    {\n        //r.normal *= dot(r.normal, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n\n        if(true)\n        {\n            vec3 dst = ray_pos + ray_dir * r.dist;\n            //color = (0.5 + 0.5 * r.normal); // visualize normals\n            //vec3 light_dir = normalize(vec3(1,2,3));\n            vec3 light_dir = normalize(vec3(cos(iTime/5.0),sin(iTime/5.0),.1));\n#ifdef USE_SHADOWS\n            bool shadow = triangle_trace(dst+r.normal*0.001, light_dir).dist < DIST_MAX;\n#else\n            bool shadow = false;\n#endif\n            vec3 light_color = vec3(1)*1.0;\n            vec3 diffuse = shadow ? vec3(0) : light_color * max(0.0, dot(r.normal, light_dir));\n            float ambient = 0.1;\n            //color *= (0.5 + 0.5 * r.normal); // visualize normals\n            color *= (diffuse + ambient); // apply light\n            //color = vec3(fract(result.w));\n        }\n        else\n        {\n            vec3 dst = ray_pos + ray_dir * r.dist;\n            //vec3 light_pos = vec3(0,0,2);\n            vec3 light_pos = vec3(10.0*vec2(cos(iTime/5.0),sin(iTime/5.0)),15);\n            vec3 light_diff = light_pos - dst;\n            float light_dist = length(light_diff);\n            vec3 light_dir = light_diff / light_dist;\n#ifdef USE_SHADOWS\n            bool shadow = triangle_trace(dst+r.normal*0.001, light_dir).dist < DIST_MAX;\n#else\n            bool shadow = false;\n#endif\n            vec3 light_color = vec3(1) * 100.0;\n            vec3 diffuse = shadow ? vec3(0) : light_color * max(0.0, dot(r.normal, light_dir)) / (light_dist * light_dist);\n            float ambient = 0.1;\n            //color *= (0.5 + 0.5 * r.normal); // visualize normals\n            color *= (diffuse + ambient); // apply light\n            //color = vec3(fract(result.w));\n        }\n        color = mix(skycolor, color, exp(-pow(r.dist/50.0, 2.0))); // distance fog\n    }\n\n    color = tanh(color); // soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}