{"ver":"0.1","info":{"id":"tsdyRM","date":"1601235880","viewed":45,"name":"Raymarching_aesch_2","username":"annaesch","description":"Raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Functions based on https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n// BOX\nfloat dBox(vec3 p, vec3 s) {\n\treturn length(max(abs(p)-s, 0.));\n}\n\n// TORUS\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\n// SPHERE\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n} \n\n// GET DISTANCE FROM VARIOUS GEOMETRY\nfloat GetDist(vec3 p) {\n\tvec4 s = vec4(0, 1, 6, 1);\n    \n    float sphereDist =  length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    \n    float td = sdTorus(p-vec3(0,sin(iTime/2.0)+1.0, 4.0), vec2(1.0, 0.2));\n    float bd = dBox(p-vec3(-3.0, 1.5, 6.0), vec3(0.5,.75, 0.75));\n    float sd = sdSphere(p-vec3(3.5, 1.2, 6.0), 1.0);\n    \n    float d = min(td, planeDist);\n    d = min(d, bd);\n    \n    d = min(d, sd);\n    \n    return d;\n}\n\n\nfloat RayMarch(vec3 rayPos, vec3 rayDir) {\n\tfloat distO=0.; \t\t\t\t\t\t// distance origin\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = rayPos + rayDir*distO; \t//marching step point p \n        float distS = GetDist(p); \t\t\t// distance to closest object\n        distO += distS; \t\t\t\t\t// move to next marching step\n        if(distO>MAX_DIST || distS<SURF_DIST) break;\n    }\n    \n    return distO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p); \t\t//get distance to surface\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3( \t\t\t// points around p\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 8, 4);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*3.; // moving lightPos\n    vec3 l = normalize(lightPos-p); \t// vec from p to light source\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.); \t\t// no negative results\n    float d = RayMarch(p+n*SURF_DIST*2., l); \t// distance to object\n    if(d<length(lightPos-p)) dif *= .1; \t\t//check if distance to object is closer than ditance to light \n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // shift origin to center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 rayPos = vec3(0, 1, 0); // ray origin\n    vec3 rayDir = normalize(vec3(uv.x, uv.y, 1)); // ray direction normalized\n\n    float d = RayMarch(rayPos, rayDir); // distance to objects\n    \n    vec3 p = rayPos + rayDir * d; // position for lighting\n    \n    float dif = GetLight(p); // diffuse light\n    col = vec3(dif);\n    \n   \tcol = pow(col, vec3(.7)); // gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}