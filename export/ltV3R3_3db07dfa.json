{"ver":"0.1","info":{"id":"ltV3R3","date":"1475963729","viewed":782,"name":"Manhattan voronoi","username":"vmednis","description":"Basic implementation of voronoi plane partitioning using \"Manhattan\" distance instead of classic euclidean distance.\nhttps://en.wikipedia.org/wiki/Taxicab_geometry","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","manhattan","taxicab","street"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nCopyright (c) 2016 Valters Mednis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n//Function that calculates manhatan/taxicab/etc. distance between two points\nfloat manhatanDistance(vec2 pointA, vec2 pointB)\n{\n    return abs(pointA.x - pointB.x) + abs(pointA.y - pointB.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Define points used for partitioning the plane\n    vec2 points[10];\n    points[0] = vec2(0.028, 0.259);\n\tpoints[1] = vec2(0.459, 0.233);\n\tpoints[2] = vec2(0.386, 0.556);\n\tpoints[3] = vec2(0.847, 0.868);\n\tpoints[4] = vec2(0.437, 0.718);\n\tpoints[5] = vec2(0.095, 0.558);\n\tpoints[6] = vec2(0.513, 0.680);\n\tpoints[7] = vec2(0.013, 0.865);\n\tpoints[8] = vec2(0.163, 0.653);\n\tpoints[9] = vec2(0.891, 0.721);\n    \n    \n    //Define the point colors\n    vec4 pointColors[10];\n    pointColors[0] = vec4(238.0 / 255.0, 64.0 / 255.0, 53.0 / 255.0, 1.0);\n\tpointColors[1] = vec4(243.0 / 255.0, 119.0 / 255.0, 54.0 / 255.0, 1.0);\n\tpointColors[2] = vec4(253.0 / 255.0, 244.0 / 255.0, 152.0 / 255.0, 1.0);\n\tpointColors[3] = vec4(123.0 / 255.0, 192.0 / 255.0, 67.0 / 255.0, 1.0);\n\tpointColors[4] = vec4(3.0 / 255.0, 146.0 / 255.0, 207.0 / 255.0, 1.0);   \n    pointColors[6] = vec4(238.0 / 255.0, 64.0 / 255.0, 53.0 / 255.0, 1.0);\n\tpointColors[5] = vec4(243.0 / 255.0, 119.0 / 255.0, 54.0 / 255.0, 1.0);\n\tpointColors[7] = vec4(253.0 / 255.0, 244.0 / 255.0, 152.0 / 255.0, 1.0);\n\tpointColors[8] = vec4(123.0 / 255.0, 192.0 / 255.0, 67.0 / 255.0, 1.0);\n\tpointColors[9] = vec4(3.0 / 255.0, 146.0 / 255.0, 207.0 / 255.0, 1.0);\n    \n    //Allow the image to be scaled\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Preserve aspect ratio\n    if(iResolution.x > iResolution.y)\n    {\n        uv.x = uv.x / iResolution.y * iResolution.x;\n        for(int i = 0; i < 10; i++)\n        {\n            points[i].x = points[i].x / iResolution.y * iResolution.x;\n        }\n    }\n    else\n    {\n        uv.y = uv.y / iResolution.x * iResolution.y;\n        for(int i = 0; i < 10; i++)\n        {\n            points[i].y = points[i].y / iResolution.x * iResolution.y;\n        }\n    }\n    \n    //Find the point closest to the pixel that is beeing colored now\n    float minDistance = manhatanDistance(uv, points[0]);\n    fragColor = pointColors[0];\n    for(int i = 1; i < 10; i++)\n    {\n        float currentDistance = manhatanDistance(uv, points[i]);\n        if(currentDistance < minDistance)\n        {\n            minDistance = currentDistance;\n            fragColor = pointColors[i];\n        }\n    }\n    \n    //Color the points\n    if(minDistance < 0.005)\n    {\n        fragColor = vec4(0.2, 0.2, 0.2, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}