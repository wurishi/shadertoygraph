{"ver":"0.1","info":{"id":"McVGD1","date":"1712724587","viewed":21,"name":"RT_test_myk","username":"myk45","description":"sample ray tracer","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void intersectSphere(in vec3 Rd, out vec4 col, vec3 O)\n{\n    vec3 C  = vec3(0, 0, 2);\n    \n    C = O-C;\n        \n    float a = dot(Rd, Rd);\n   \tfloat b = -2.0 * dot(Rd, C);\n\tfloat c = dot(C,C) - 1.0;   \n    float d = b*b - (4.0 * a * c); \n        \n    if (d  > 0.0) {\n    \tfloat t = -b + sqrt(d)/2.0;\n        vec3 c = vec3(0.5, 0.5, 0.5);\n            \n        vec3 light = vec3(sin(iTime)*1.0, cos(iTime)*1.0, 0.0);\n        //vec3 light = vec3(1.0, 0.0, 0.0);\n        col = vec4(1.0, 0.0, 0.0, 1.0) * dot(Rd, light) + vec4(0.2, 0.2, 0.2, 1.0);\n    }  \n}\n\nvoid intersectPlane(in vec3 Rd, out vec4 col)\n{\n    vec3 mNormal = vec3(0, 1, 0);\n    vec3 PointOnPlane = vec3(0, -1.0, 0);\n    vec3 Cam = vec3(0, 0, 0);\n\n    float t = (dot(PointOnPlane, mNormal) - dot(Cam, mNormal)) / dot(Rd, mNormal);    \n    if (t > 0.0) \n    {\n    \tcol = vec4(0.3, 0.6, 1.0,  1.0);\n        //col = vec4(sin(length(Rd*t)));\n        //col = vec4(0.2, 0.7, 0.5, 1.0)*vec4(sin(length(Rd*t)));\n        \n        // Add some shadow!\n        {\n            vec3 point = Rd*t;\n            vec3 light = vec3(sin(iTime)*1.0, cos(iTime)*1.0, 0.0);\n            vec3 tempRay = point - light;\n            tempRay = normalize(tempRay);\n            vec3 C  = vec3(0, 0, 2);\n    \t\tC = point-C;\n        \n    \t\tfloat a = dot(tempRay, tempRay);\n   \t\t\tfloat b = -2.0 * dot(tempRay, C);\n\t\t\tfloat c = dot(C,C) - 1.0;   \n   \t\t\tfloat d = b*b - (4.0 * a * c); \n        \n\t    \tif (d  > 0.0) {\n                col = vec4(0);\n\t\t\t}\n    \t}\n\t}\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * vec2(iResolution.x/iResolution.y, 1.0);\n    vec4 col = vec4(0.3);\n    \n    vec3 Rd = vec3(uv, 1.0);\n    Rd = normalize(Rd);\n    \n\tintersectPlane(Rd, col);    \n    intersectSphere(Rd, col, vec3(0));\n        \n        \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}