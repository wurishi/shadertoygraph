{"ver":"0.1","info":{"id":"DlVyzW","date":"1699995275","viewed":24,"name":"Hope kaleidoscope","username":"iuhf","description":"This started with an idea to make a rotating uv.  I got this after iterating things together.  ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rotatinguv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n\n\treturn vec3(0.392,0.389,0.387) + vec3(0.894,0.555,0.526) * cos((PI*2.)*(vec3(1.)*t + vec3(0.958,-0.272,1.213)));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(1.);\n    vec2 UV = vec2(1.);\n    \n    float r = 5.;\n    \n    for (float i = 0.; i < r; i++) {\n        float t = iTime + i*((2.*PI)/r) + cos(iTime + i);\n        vec2 a = vec2(cos(t), sin(t));\n        vec2 b = vec2(cos(t + PI/2.), sin(t+PI/2.));\n    \n        vec2 v = a*dot(a, uv);\n        v -= uv;\n    \n        vec2 u = b*dot(b, uv);\n        u -= uv;\n    \n        UV *= vec2(length(u),length(v));\n        \n        col *= palette(iTime + length(UV));\n    \n        //UV -= 0.5;\n        //UV *= 2.;\n    }\n        \n\n    \n    fragColor = vec4(abs(col * length(UV)), 1.);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926","name":"Common","description":"","type":"common"}]}