{"ver":"0.1","info":{"id":"NddGzr","date":"1629033437","viewed":188,"name":"shooting stars","username":"snflwrfld","description":"rows of stars w/ daynight cycle","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat PI = 3.14159;\nfloat TAU = 6.28318530718;\n\nvec3 color1 = vec3(0.960,0.843,0.911);\nvec3 color2 = vec3(0.816,0.576,0.505);\nvec3 color3 = vec3(0.773,0.522,0.702);\n\nmat2 rotate2d (float th) {\n    return mat2(cos(th),-sin(th),sin(th),cos(th));\n}\n\nfloat ring (vec2 st, float r, float e) {\n    return step(r,length(st))+(1.-step(r-e,length(st)));\n}\n\nfloat fract_usd (float x) {\n    return min(fract(x/2.),fract(-x/2.))*2.;\n}\n\nfloat fract2 (float x){\n    return abs((fract(x)-.5)*2.);\n}\n\nfloat star_mot (float x) {\n    return fract_usd(x*2.)*step(floor(mod(x,2.)),.9);\n}\n\nvec3 pattern (vec2 st, float t,float size) {\n    st = st*2. - 1.;\n    st *= size;\n    vec3 color = vec3(1.);\n    float r = length(st),th=atan(st.y,st.x);\n    \n    // circle\n    float c_size = fract_usd(t/2.);\n    \n    r = length(st),th=atan(st.y,st.x);\n    color *= ring(st,.9*smoothstep(0.,1.,c_size),.18);\n\n    // star\n    float s_size = smoothstep(.2,.85,star_mot(-.5+t/2.000));\n    float s_angle = smoothstep(.1,.9,fract(t/4.))*TAU;\n    \n    th += s_angle;\n    color *= step(.5,(r*(pow(abs(sin(th*2.5))+1.,1.216))*.85)/s_size);\n    return color;\n}\n\nfloat slider (float t,float cursor,float length) {\n    float tm = floor(mod(t,length));\n    if (tm<cursor){\n        return 1.;\n    }\n    else if (tm==cursor) {\n        return 1.-fract(t);\n    }\n    else  {\n        return 0.;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    float t = iTime*1.2;\n\t\n    // tilt+scale\n    float SCALE = 0.280;\n    float TILT_ANGLE = PI/11.112;\n    vec2 SLIDE_VEL = vec2(-.04,.02);\n    \n    st = st*2. -1.;\n    st = SCALE*(1.+.1*sin(t/10.))*rotate2d(TILT_ANGLE)*st + t*SLIDE_VEL ;\n    \n    \n    // pattern tiling\n    vec2 WAVE_VECTOR = vec2(0.770,0.740);\n    float WAVE_VEL = 1.;\n    \n    float n = 16.;\n    st *= n;\n\tvec2 ipos = floor(st), fpos = fract(st);\n    \n    vec3 color = pattern(fpos,t*WAVE_VEL+dot(ipos,WAVE_VECTOR),.9);\n    \n    // coloring\t-- CHANGE THE COLORS OUTSIDE OF MAIN()\n    st = ipos+fpos;\n    color += mix(color1,color2,smoothstep(0.,1.,fract_usd(st.x+st.y))/6.);\n    \n    // sliders animation\n    float CYCLE_LENGTH = 12.;\n    float FIRST_SLIDER_BEGIN = 0.;\n    float SECOND_SLIDER_EGIN = 3.;\n    float SLIDING_SPEED = .5;\n    \n    st = fragCoord.xy/iResolution.xy;\n    if (st.x > smoothstep(0.15,.85,slider(t*SLIDING_SPEED,FIRST_SLIDER_BEGIN,CYCLE_LENGTH)) && st.x < smoothstep(0.15,.85,slider(t*SLIDING_SPEED,SECOND_SLIDER_EGIN,CYCLE_LENGTH)) ){\n        color = 1. - color;\n        color = step(0.0,color)*0.882;\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}