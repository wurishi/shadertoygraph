{"ver":"0.1","info":{"id":"4lfXRX","date":"1438306093","viewed":171,"name":"SimpleShaderCube","username":"Cubed","description":"WIP, playing with graphics","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec3 opRep(vec3 p, vec3 c) {\n    return mod(p,c)-0.5*c;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opU( float d1, float d2 ) {\n    return min(d1,d2);\n}\n\nfloat map(vec3 p) {\n    vec3 size = vec3(1.0);\n    float res = sdBox(opRep(p, vec3(6.0)), size); \n\treturn res;\n}\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.0;\n    for (int i = 0; i < 128; i++) {\n    \tvec3 p = o + r * t;\n        float d = map(p);\n        if (d==0.0) break;\n        t += d;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 1.0 - vec2(1.0);\n\tfloat fft  = texture( iChannel0, vec2(uv.x, 0.25) ).x; \n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv, 1.0));\n    vec3 o = vec3(0.0, 0.0, fft * 2.0);\n    float t = trace(o, r);\n    float fog = 1.0 / (1.0 + t * t * 0.01);  \n    vec3 col = vec3(fog, 1.0 -fog, 1.0-fog);\n\tfragColor = vec4(vec3(col), 1.0);\n}","name":"","description":"","type":"image"}]}