{"ver":"0.1","info":{"id":"cdBXzw","date":"1670018092","viewed":197,"name":"gpt \"dope shader\"","username":"oflatt","description":"A shader that chatgpt generated","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["colorful","gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dope Shader\n\n// Set up some uniforms and constants\nuniform vec2 u_resolution;\nuniform float u_time;\nconst float SPEED = 0.5;\nconst vec3  COLORS[] = vec3[](vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1), vec3(1, 1, 0), vec3(0, 1, 1), vec3(1, 0, 1));\n\n// Set up the default render state\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Compute the screen position of the fragment\n    vec2 screenPos = fragCoord / iResolution.xy;\n\n    // Compute a color and a position for the fragment\n    vec3 color = vec3(0);\n    vec2 pos = vec2(0);\n    for (int i = 0; i < 6; i++)\n    {\n        // Compute the position and color of the ith layer\n        float t = iTime * (0.5 + 0.5 * float(i));\n        vec2 p = screenPos + SPEED * vec2(sin(t), cos(t));\n        vec3 c = COLORS[i];\n\n        // Mix the color and position of the ith layer with the previous layers\n        color = (1.0 - p.x) * (1.0 - p.y) * c + color;\n        pos = (1.0 - p.x) * (1.0 - p.y) * p + pos;\n    }\n\n    // Set the color of the fragment\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}