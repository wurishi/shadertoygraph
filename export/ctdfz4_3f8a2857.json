{"ver":"0.1","info":{"id":"ctdfz4","date":"1701025748","viewed":44,"name":"shelf","username":"Aman","description":"inspired by a painting in a museum that doesnt allow photography","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["shelf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 min2(vec2 a, vec2 b) { \n    if(a.x < b.x) { return a; }\n    else { return b; }\n}\n\n\nvec2 blob(vec3 p, float blobid, float t) {\n    float o = length(p) - 0.1;\n    return vec2(max(o, box(p, vec3(0.3, 0.1, 0.2))), blobid);\n}\n\nvec2 thing(vec3 p, vec3 b, float id) {\n    vec2 shelf = vec2(box(p, b), 1.0);\n    vec3 ps = vec3(p.x, p.y, p.z * 3.0);\n    float o = length(ps - vec3(0.0, b.y + 0.2, 0.3 + sin(iTime * 3.0) * 0.1)) - 0.2;\n    o /= 3.0;\n    o += sin(iTime * 3.0 + p.x * 30.0) * 0.05;\n    vec2 obj = vec2(max(o, box(p - vec3(0.0, 3.0, 0.0), \n                                vec3(b.x, 3.0, b.z))), id);\n    o = length(ps - vec3(0.0, b.y + 0.2, 0.1)) - 0.2;\n    o /= 3.0;\n    o += sin(iTime * 2.0 + p.x * 30.0 + p.y * 3.0) * 0.02;\n    ps *= 1.5;\n    obj = min2(obj, vec2(max(o, box(p - vec3(0.0, 3.0, 0.0), \n                                vec3(b.x, 3.0, b.z))), id + 1.0));\n    o = length(ps - vec3(0.0, b.y + 0.2, 0.05)) - 0.2;\n    o /= 3.0;\n    ps *= 1.5;\n    o += sin(iTime * 4.0 + p.x * 45.0 + p.z * 1.0) * 0.01;\n    obj = min2(obj, vec2(max(o, box(p - vec3(0.0, 3.0, 0.0), \n                                vec3(b.x, 3.0, b.z))), id + 1.0));\n    return min2(obj, shelf);\n}\n\n\nvec2 sdf(vec3 p) {\n    vec2 wall = vec2(-p.z, 0.0);\n    \n    vec2 shelf1 = thing(p - vec3(0.9, 0.8, 0.0), vec3(0.4, 0.02, 0.2),\n                      1.1);\n    vec2 shelf2 = thing(p - vec3(-0.3, 0.2, 0.0), vec3(0.4, 0.02, 0.3),\n                      1.2);\n    vec2 shelf3 = thing(p - vec3(-1.9, 0.4, 0.0), vec3(0.4, 0.02, 0.2),\n                      1.3);\n    vec2 shelf4 = thing(p - vec3(1.9, 0.1, 0.0), vec3(0.4, 0.02, 0.1),\n                      1.4);\n    \n    \n    vec2 shelf = min2(min2(shelf1, shelf2),\n                      min2(shelf3, shelf4));\n    return min2(wall, shelf);\n}\n\nbool march(vec3 ro, vec3 rd, out vec3 hitPos, out float minDist) {\n    for(int i = 0; i < 50; i++) {\n        float d = sdf(ro).x;\n        ro += rd * d;\n        minDist = min(d, minDist);\n        if(d < 0.001) { hitPos = ro; return true; }\n    }\n    return false;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float w )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<256 && t<maxt; i++ )\n    {\n        vec2 r = sdf(ro + t*rd);\n        if(r.y > 1.0) break;\n        float h = r.x;\n        res = min( res, h/(w*t) );\n        t += clamp(h, 0.005, 0.50);\n        if( res<-1.0 || t>maxt ) break;\n    }\n    res = max(res,-1.0);\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 lightPos = vec3(0.0, 10.0, -0.3);\n    \n    vec3 col = vec3(0.0);\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 hitPos;\n    float minDist = 100.0;\n    \n    if(march(ro, rd, hitPos, minDist)) {\n        \n        vec3 lightRayHit;\n        float lightMinDist = 100.0;\n        float hitMat = sdf(hitPos).y;\n        float shadow = softshadow(hitPos - rd * 0.03, \n                                  normalize(lightPos - hitPos),\n                                  0.01,\n                                  20.0,\n                                  0.9);\n        vec3 diffuse = vec3(hitPos) * 0.5 + 0.5;\n        \n        if(hitMat <= 0.0) diffuse = vec3(0.5);\n        else if(hitMat <= 1.0) diffuse = diffuse;\n        else if(hitMat <= 2.0) {\n       \n            vec3 a = vec3(0.5, 0.5, 0.5);\n            vec3 b = vec3(0.5, 0.5, 0.5);\n            vec3 c = vec3(2.0, 1.0, 0.0);\n            vec3 d = vec3(0.50, 0.20, 0.25);\n            diffuse = a + b * cos(2.0 * 3.14159 * (c * hitMat - 1.0 + d));\n        }\n        \n        col = diffuse * shadow;\n        col = pow(col, vec3(0.4545));\n        \n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}