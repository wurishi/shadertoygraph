{"ver":"0.1","info":{"id":"msXczs","date":"1687168680","viewed":39,"name":"raymarcher carlos","username":"holt1","description":"ray marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n//tweak the numbers slightly to see the effects\n#define SPHERE vec4(0, 2, 9, 1.6)\n#define LIGHT_POS  vec3(0, 5, 9)\n//field of view\n#define FOV -1.\n//debug normal calculation\n#define NORMALS false\n\n//sphere only\nfloat GetDist(vec3 p){\n    vec4 sphere = SPHERE;\n    float sphereDist = length(p-sphere.xyz) - sphere.w; \n    float planeDist = p.y; \n    float d = min(sphereDist, planeDist); \n    return d;\n}\n\n\nfloat GetSphereDist(vec3 p, vec4 s){\n    vec4 sphere = s; //copy\n    float sphereDist = length(p-sphere.xyz) - sphere.w; \n    float planeDist = p.y; \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    //distance marched from origin\n    float dO = 0.; \n    \n    for(int i=0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd * dO; \n        float dS = GetDist(p); \n        dO += dS; \n        //exit conditions\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetSphereDist(p, SPHERE); \n    vec2 e = vec2(0.01, 0); \n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n        \n   return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = LIGHT_POS;\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) *2.; //movement of the light source\n    \n    vec3 l = normalize(lightPos -p); \n    vec3 n = GetNormal(p);\n    float dif = dot(n, l);\n    \n    //shadow\n    float d = RayMarch(p+n*SURF_DIST*2., l); \n    if(d < length(lightPos - p)) dif *= .1;\n    \n    return clamp(dif, 0. , 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5 * iResolution.xy)/iResolution.y;\n\n    // Default pixel color\n    vec3 col = vec3(0);\n\n    //camera origin?\n    vec3 ro = vec3(0,1,FOV); \n\n    //ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1)); \n    \n    //raymarch to distance field;\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d; \n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n    \n    if (NORMALS) col = GetNormal(p);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}