{"ver":"0.1","info":{"id":"ctcfzr","date":"1700851820","viewed":41,"name":"BlackBody Emission Spectrum","username":"ShiniesAndShadows","description":"Helper doc:\n- https://www.fourmilab.ch/documents/specrend/\n- https://fr.wikipedia.org/wiki/CIE_XYZ\n- http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_RGB.html","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blackbody"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// chaque entrée représente la couleur perceptuelle \n// pour l'intervalle de longueur d onde \n// sur 5nm entre [380, 780nm]\n// ie. espace de couleur CIE 1931\n// X, Z = chroma, Y = luma\nconst vec3 cie_colour_match[81] = vec3[81]( vec3(0.0014,0.0000,0.0065), vec3(0.0022,0.0001,0.0105), vec3(0.0042,0.0001,0.0201),\n        vec3(0.0076,0.0002,0.0362), vec3(0.0143,0.0004,0.0679), vec3(0.0232,0.0006,0.1102),\n        vec3(0.0435,0.0012,0.2074), vec3(0.0776,0.0022,0.3713), vec3(0.1344,0.0040,0.6456),\n        vec3(0.2148,0.0073,1.0391), vec3(0.2839,0.0116,1.3856), vec3(0.3285,0.0168,1.6230),\n        vec3(0.3483,0.0230,1.7471), vec3(0.3481,0.0298,1.7826), vec3(0.3362,0.0380,1.7721),\n        vec3(0.3187,0.0480,1.7441), vec3(0.2908,0.0600,1.6692), vec3(0.2511,0.0739,1.5281),\n        vec3(0.1954,0.0910,1.2876), vec3(0.1421,0.1126,1.0419), vec3(0.0956,0.1390,0.8130),\n        vec3(0.0580,0.1693,0.6162), vec3(0.0320,0.2080,0.4652), vec3(0.0147,0.2586,0.3533),\n        vec3(0.0049,0.3230,0.2720), vec3(0.0024,0.4073,0.2123), vec3(0.0093,0.5030,0.1582),\n        vec3(0.0291,0.6082,0.1117), vec3(0.0633,0.7100,0.0782), vec3(0.1096,0.7932,0.0573),\n        vec3(0.1655,0.8620,0.0422), vec3(0.2257,0.9149,0.0298), vec3(0.2904,0.9540,0.0203),\n        vec3(0.3597,0.9803,0.0134), vec3(0.4334,0.9950,0.0087), vec3(0.5121,1.0000,0.0057),\n        vec3(0.5945,0.9950,0.0039), vec3(0.6784,0.9786,0.0027), vec3(0.7621,0.9520,0.0021),\n        vec3(0.8425,0.9154,0.0018), vec3(0.9163,0.8700,0.0017), vec3(0.9786,0.8163,0.0014),\n        vec3(1.0263,0.7570,0.0011), vec3(1.0567,0.6949,0.0010), vec3(1.0622,0.6310,0.0008),\n        vec3(1.0456,0.5668,0.0006), vec3(1.0026,0.5030,0.0003), vec3(0.9384,0.4412,0.0002),\n        vec3(0.8544,0.3810,0.0002), vec3(0.7514,0.3210,0.0001), vec3(0.6424,0.2650,0.0000),\n        vec3(0.5419,0.2170,0.0000), vec3(0.4479,0.1750,0.0000), vec3(0.3608,0.1382,0.0000),\n        vec3(0.2835,0.1070,0.0000), vec3(0.2187,0.0816,0.0000), vec3(0.1649,0.0610,0.0000),\n        vec3(0.1212,0.0446,0.0000), vec3(0.0874,0.0320,0.0000), vec3(0.0636,0.0232,0.0000),\n        vec3(0.0468,0.0170,0.0000), vec3(0.0329,0.0119,0.0000), vec3(0.0227,0.0082,0.0000),\n        vec3(0.0158,0.0057,0.0000), vec3(0.0114,0.0041,0.0000), vec3(0.0081,0.0029,0.0000),\n        vec3(0.0058,0.0021,0.0000), vec3(0.0041,0.0015,0.0000), vec3(0.0029,0.0010,0.0000),\n        vec3(0.0020,0.0007,0.0000), vec3(0.0014,0.0005,0.0000), vec3(0.0010,0.0004,0.0000),\n        vec3(0.0007,0.0002,0.0000), vec3(0.0005,0.0002,0.0000), vec3(0.0003,0.0001,0.0000),\n        vec3(0.0002,0.0001,0.0000), vec3(0.0002,0.0001,0.0000), vec3(0.0001,0.0000,0.0000),\n        vec3(0.0001,0.0000,0.0000), vec3(0.0001,0.0000,0.0000), vec3(0.0000,0.0000,0.0000)\n    );\n\nvec3 fromWavelengthToCie1931(float wavelength)\n{\n    float fIndex = floor((wavelength - 380.0f) / 5.0f);\n    return cie_colour_match[int(fIndex)];\n}\n\nvec3 fromWavelengthToChroma(float wavelength)\n{\n    vec3 cie1931 = fromWavelengthToCie1931(wavelength);\n    float sumCIE = cie1931.x + cie1931.y + cie1931.z;\n    return cie1931 / sumCIE;\n}\n\nfloat blackBodySpectralRadiance(float T, float lambda)\n{\n     return (3.74183e-16 * pow(lambda, -5.0)) /\n           (exp(1.4388e-2 / (lambda * T)) - 1.0);\n}\n\n\nvec3 cieXYZFromBlackBodyTemperature(float tempInKelvin)\n{\n    float deltaLambda = 5.0f * 1e-9;\n    vec3 cieXYZ = vec3(0.0f);\n    for(float lambda = 380.0f; lambda <= 780.0f; lambda += 5.0f)\n    {\n        float lambdaInMeter = lambda* 1e-9;\n        float radiance = blackBodySpectralRadiance(tempInKelvin, lambdaInMeter);\n        float areaP = (radiance * deltaLambda);\n        cieXYZ += areaP * fromWavelengthToCie1931(lambda);\n    }\n    return cieXYZ;\n}\n\n\n\nvec3 fromXYZtoRGB(vec3 cieXYZ)\n{\n    float sumXYZ = dot(cieXYZ, vec3(1.0f));\n    vec3 xyz = cieXYZ / sumXYZ;\n// http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_RGB.html\n    mat3 XYZtosRGB; //col major\n    XYZtosRGB[0] = vec3( 3.2404542, -0.9692660,  0.0556434);\n    XYZtosRGB[1] = vec3(-1.5371385,  1.8760108, -0.2040259);\n    XYZtosRGB[2] = vec3(-0.4985314,  0.0415560,  1.0572252);\n    \n    vec3 sRGB = XYZtosRGB * xyz;\n    return pow(sRGB, vec3(1.0f/2.2f));\n}\n\nvec3 sRGBFromBlackBodyTemperature(float T)\n{\n    return fromXYZtoRGB(cieXYZFromBlackBodyTemperature(T));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // u = 0.0f == 380, v=1.0f == 780 \n    float fromUToWavelength = 380.0f + uv.x * (780.0f-380.0f);\n    float fromUTTemperature = 1000.0f + uv.x * (12000.0f-1000.0f);\n    vec3 col;\n    if(uv.y >= 0.6f)\n        col = fromWavelengthToCie1931(fromUToWavelength);\n    else if(uv.y >= 0.3f)\n        col = fromWavelengthToChroma(fromUToWavelength);\n    else\n        col = sRGBFromBlackBodyTemperature(fromUTTemperature);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}