{"ver":"0.1","info":{"id":"stSyzG","date":"1649844527","viewed":220,"name":"polar coords","username":"greeffer","description":"polar coordinates tutorial based on Art of code tutorial\nhttps://youtu.be/r1UOB8NVE8I","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["2d","polarcoordinates"],"hasliked":0,"parentid":"Wtf3RH","parentname":"Polar coordinates tutorial"},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define PI_2 6.2831\n// LEARN \n// Computer graphics use radians instead of degrees for their internal angle calculations.  If you want a refresher on Radians follow the 2 tutorials below\n// https://youtu.be/cgPYLJ-s5II?list=PLbNp-C84uJJVdtYc3yeQhlhv6cCvBBqz8\n// https://youtu.be/yBw67Fb31Cs?list=PLbNp-C84uJJVdtYc3yeQhlhv6cCvBBqz8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //#define PI 3.14159265359\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =   fragCoord / iResolution.xy;\n    \n    // origin starts from bottom left corner.So we have to offset by -0.5 to bring it to the center\n    // e.g https://thebookofshaders.com/glossary/?search=sqrt\n    uv.x -=0.5 ;\n    uv.y -=0.5 ;\n    \n    // but we have an oval instead of a circle ! i.e stretched in x\n    // therefore we need to multiply our x values by the aspect of the image\n    \n    uv.x = uv.x * ( iResolution.x / iResolution.y);\n    \n    // This code would have done everything in one line\n    //vec2 uv =  ( fragCoord -0.5 * iResolution.xy )/ iResolution.y;\n      \n    \n    // Find the pixel distance and angle from the center\n    float pixel_angle = atan(uv.x,uv.y) ;\n    float pixel_distance =  length(uv)* 2.0 ;\n    \n    //alternate way to get pixel distance\n    //float pixel_distance = sqrt(dot(uv,uv) ) * 2.0;\n    vec2 st = vec2(pixel_angle , pixel_distance);//pack the pixel_angle & pixel_distance into a 2 vector for convenience\n    //vec2 st_anim = 1.0 + cos(iGlobalTime );\n\n    // Output to screen using st.y will give us a black -> white radial gradient\n    // which is the distance of each pixel from the center\n    //fragColor = vec4(st.y ); \n    \n    // Output to screen using st.x will give a sweep gradient which is the \n    // Angle of each pixel relative to the center \n    fragColor = vec4(st.x);\n    \n    // but the above does not give us a full Radial sweep.\n    // First we need to calculate angles in radians since our pixel values go from o-1\n    // Instead of 0 - 360 degrees.\n    // We need to remap the values in the 0 - 1 space using radians 6.2831 or 2*PI which is 360 degrees  \n    // Input will be a number from 0 - 360 / 360 i.e we normalize the input by dividing it by 360 \n    // therefore maing the value go from 0 - 1 \n    fragColor = vec4(st.x / PI_2 );\n    \n    //The above will only give you results from 0 to 0.5 (180 degrees) so we add another half 0.5 \n    // Watch this tutorial to understand the range of the atan function\n    // coding math episode 5: https://youtu.be/LHzgW9aQUV8?t=482\n    fragColor = vec4(st.x / PI_2 + 0.5 );// PI_2 is defined to be 6.2831\n    \n    // assing the polar cordinate system mapping to UV mapping \n    vec2 uv2 = st * 0.5;\n    // Introduce a texture using polar cordinate uv's\n    vec3 texColor = texture(iChannel0,uv2).xyz;\n     //Experiment here fragColor = vec4(st.x / PI_2 + 0.5);\n    \n    fragColor = vec4(texColor,1.0); // <- Final color switch // \n}","name":"Image","description":"","type":"image"}]}