{"ver":"0.1","info":{"id":"td3cW4","date":"1600946825","viewed":239,"name":"Neon Strands","username":"Agneseion","description":"I wanted to do something where Buffer A contained the properties of boids or strings and the main image iterated over them and drew them, but long story short, performance died.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["sampling","neon","bacteria","strands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RENDERING_THRESHOLD 3.0\n#define MAX_STRANDS 10.0\n#define STEPS_INTO_PAST 250.0\n#define LIFETIME_OF_STRANDS 10.0\n#define TWO_PI 6.2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // For each strand of hair:\n    vec3 shade = vec3(0.0);\n    float distanceFactor = 125.0 / (MAX_STRANDS * STEPS_INTO_PAST);\n    float propertyCount = 5.0;\n    float propertyStep = iChannelResolution[0].y / propertyCount;\n    for (float strandIndex = 0.0; strandIndex < iChannelResolution[0].x; strandIndex += iChannelResolution[0].x / min(iChannelResolution[0].x, MAX_STRANDS))\n    {\n     \t// Sample the properties of that strand of hair:\n        float speed = 5.0 * length(texelFetch(iChannel0, ivec2(strandIndex, 0.0 * propertyStep), 0).xyz);\n        float phase = TWO_PI * length(texelFetch(iChannel0, ivec2(strandIndex, 1.0 * propertyStep), 0).xyz);\n        float secondaryPhase = TWO_PI * length(texelFetch(iChannel0, ivec2(strandIndex, 2.0 * propertyStep), 0).xyz);\n        float hue = TWO_PI * length(texelFetch(iChannel0, ivec2(strandIndex, 3.0 * propertyStep), 0).xyz);\n        float waviness = pow(length(texelFetch(iChannel0, ivec2(strandIndex, 4.0 * propertyStep), 0).xyz), 2.0);\n        /*\n        float speed = 5.0 * length(texture(iChannel0, vec2(strandIndex, 0.0 * propertyStep) / iChannelResolution[0].xy).xyz);\n        float phase = TWO_PI * length(texture(iChannel0, vec2(strandIndex, 1.0 * propertyStep) / iChannelResolution[0].xy).xyz);\n        float secondaryPhase = TWO_PI * length(texture(iChannel0, vec2(strandIndex, 2.0 * propertyStep) / iChannelResolution[0].xy).xyz);\n        float hue = TWO_PI * length(texture(iChannel0, vec2(strandIndex, 3.0 * propertyStep) / iChannelResolution[0].xy).xyz);\n        float waviness = pow(length(texture(iChannel0, vec2(strandIndex, 4.0 * propertyStep) / iChannelResolution[0].xy).xyz), 2.0);\n\t\t*/\n        \n        for (float stepIntoPast = 0.0; stepIntoPast < STEPS_INTO_PAST; stepIntoPast += 1.0)\n        {\n            float contribution = 1.0 - stepIntoPast / STEPS_INTO_PAST;\n            float timeOfStep = iTime - LIFETIME_OF_STRANDS * (1.0 - contribution);\n            vec2 positionOfStrand = .5 * iResolution.xy + timeOfStep * speed * vec2(sin(phase), cos(phase)) + waviness * speed * vec2(sin(timeOfStep + secondaryPhase), cos(timeOfStep + secondaryPhase));;\n            positionOfStrand = mod(positionOfStrand, iResolution.xy);\n            float distanceFromCurrentPixel = length(positionOfStrand - fragCoord);\n\n            if (distanceFromCurrentPixel < 100.0)\n            {\n            \tcontribution = pow(contribution, 1.6);\n            \tfloat brightness = contribution / distanceFromCurrentPixel;\n            \tshade += distanceFactor * brightness * (.5 + .5 * sin(hue + vec3(0.0, 2.0, 4.0)));\n            }\n                \n            if (length(shade) >= 1.0)\n            {\n                break;   \n            }\n        }\n        if (length(shade) >= 1.0)\n        {\n            break;   \n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(shade, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = vec4(vec3(texture(iChannel0, fragCoord / iResolution.xy).x), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}