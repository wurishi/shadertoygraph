{"ver":"0.1","info":{"id":"4dKyz1","date":"1521052471","viewed":205,"name":"atan approximation","username":"BattleAngelAlita","description":"atan approximation","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["atan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// atan aproximation by Miles Macklin\n// http://blog.mmacklin.com/2010/06/10/faster-fog/\n\nfloat background(vec2 uv, float scale)\n{\n\tfloat bg = 0.0;\n\tif (abs(uv.x) < scale / iResolution.x || abs(uv.y) < scale / iResolution.y)\n\t{\n\t\tbg = 0.0;\n\t}\n\telse\n\t{\n\t\tvec2 grid = step(mod(uv, vec2(2.0, 2.0)), vec2(1.0, 1.0));\n\n\t\tif (grid.x == grid.y) bg = 0.3;\n\t\telse bg = 0.4;\n\t}\nreturn bg;\n}\n    \nfloat Curve(float x, float y)\n{\n    float curve = x - y;\n    return 1.0 - smoothstep(0.0, fwidth(curve), abs(curve));\n}\n\nconst float pi_on_2 = 1.5707963267948966192313216916398;\nfloat atan_coarse(float x)\n{\n    if(x < 1.0)\n   \t\tx = x * (1.037907119 - 0.2525089558 * x);\n    else\n    \tx = pi_on_2 - (1.0 / x) * (1.037907119 - 0.2525089558 * (1.0 / x));\nreturn x;\n}\nfloat atan_coarse2(float x)\n{\n    x = pi_on_2 * x / (1.0 + x);\nreturn x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 0.25; uv = uv * 3.0;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    float x_0 = atan(x);\n    x_0 = max(0.0, x_0);\n    \n    float x_a1 = atan_coarse(x);\n    x_a1 = max(0.0, x_a1);\n    \n    float x_a2 = atan_coarse2(x);\n    x_a2 = max(0.0, x_a2);\n    \n    float no_approx = Curve(x_0,  y);\n    float approx1   = Curve(x_a1, y);\n    float approx2   = Curve(x_a2, y);\n\n    float diff1 = Curve((x_a1 - x_0) * 10.0, y);\n    float diff2 = Curve((x_a2 - x_0) * 10.0, y);\n    \n    fragColor = vec4(background(uv, 4.0));\n    fragColor = fragColor * (1.0 - no_approx) + vec4(no_approx);\n    fragColor = fragColor * (1.0 - approx1) + vec4(approx1, 0.0, 0.0, 1.0);\n    fragColor = fragColor * (1.0 - approx2) + vec4(0.0, approx2, 0.0, 1.0);\n\tfragColor = fragColor * (1.0 - diff1)   + vec4(diff1, 0.0, 0.0, 1.0);\n   \tfragColor = fragColor * (1.0 - diff2)   + vec4(0.0, diff2, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}