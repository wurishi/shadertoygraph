{"ver":"0.1","info":{"id":"wd3fRH","date":"1604341569","viewed":99,"name":"lines dance 2","username":"gusvogel","description":"shaded color now. WIP - need to fix the warping on edges.","likes":1,"published":1,"flags":96,"usePreview":0,"tags":["music","lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// track - Garbage by Martin Chapman\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\n\tfragColor = texelFetch(iChannel1, ivec2(fragCoord.xy), 0);\n    float \n        n = texelFetch(iChannel1, ivec2(fragCoord.xy)+ivec2(0,1) , 0).a,\n     \ts = texelFetch(iChannel1, ivec2(fragCoord.xy)+ivec2(0,-1) , 0).a,\n        e = texelFetch(iChannel1, ivec2(fragCoord.xy)+ivec2(1,0) , 0).a,\n     \tw = texelFetch(iChannel1, ivec2(fragCoord.xy)+ivec2(-1,0) , 0).a;\n    \n    vec3 norm = normalize(vec3(e-w, n-s, .0));\n    vec3 normUps = normalize(vec3(e-w, n-s, .0) *.5 + .5);\n    vec3 gradient = 1. - normUps;\n    \n    //fragColor.rg *= norm; // show normal\n    fragColor.rgb *= gradient+ .5;\n    \n\n    \n    fragColor.rgb += vec3(1. * sin(iTime), -.2* cos(iTime), -.5) * vec3(clamp(0.,.1,dot(norm, vec3(fract(cos(2.*iTime)),sin(iTime),0.))));\n    \n    float distL1 = distance(vec2(sin(iTime), cos(iTime)), (uv - .5)*3.);\n    \n    \n    \n    float vig = length(uv);\n    fragColor.rgb *= (1.-pow(vig, 3.));\n    //fragColor.b = pow(fragColor.b, 1.6);\n    //fragColor.g = pow(fragColor.g, 1.1); // <- realizing I liked the colors better with Flux on my monitor\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"MtS3Dd","filepath":"https://soundcloud.com/martin-renan-chapman/garbage","previewfilepath":"https://soundcloud.com/martin-renan-chapman/garbage","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define gradientWidth .018\n#define lineWidth .004\n\n// hashes by dave hoshkins\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat ln (vec2 p, vec2 a, vec2 b) {\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nfloat bpm  = 157./ 60. / 2.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy; //\n    //float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n    float fft1  = texelFetch( iChannel0, ivec2(0,0), 0 ).x; \n    \n    float fft2 = texelFetch( iChannel0, ivec2(75,0), 0 ).x;\n    float fft3 = texelFetch( iChannel0, ivec2(125,0), 0 ).x;\n    float fft = fft2 + fft3; // Try different frequencies TODO\n    \n\tvec3 col = vec3(.9) ;\n    float d = 0.;\n    float h = 0.;\n    \n    fft *= 0.5;\n    float time = floor(iTime * bpm );// +floor(fft * 3.);\n    float ftime = fract(iTime * bpm);\n    vec2 prev = .5 - (hash23(vec3(time, time, time)) -.5) * fft;\n    \n    prev.x *= iResolution.x/iResolution.y;\n    vec2 orig = prev;\n    \n\n    \n    for(float i = 0.; i < 7.; ++i){\n    \n\n        vec2 curr = .5 - (hash23(vec3(time, i, i)) -.5)* fft;\n        \n        #ifdef RIGHTANGLES\n        if(mod(i, 2.) == 0.){ // force right angles\n            curr.y = prev.y;\n            curr.x *= iResolution.x/iResolution.y;\n        }\n        else curr.x = prev.x;\n        #else\n        \n        curr.x *= iResolution.x/iResolution.y;\n        #endif\n        \n        vec2 dir = hash23(vec3(i*100., time, time)) -.5;\n        curr += dir * ftime * cos(ftime);\n        \n        float ld = ln(uv, prev, curr);\n        d -= 1. - smoothstep(0., .004, ld);\n        h +=  clamp(0.,1.,pow(1.-ld,2.));\n        \n        prev = mix(curr, vec2(.5), 0.);\n        \n    }\n    \n    // reconnect to original pt\n    float ld = ln(uv, prev, orig);\n    d -= 1. - smoothstep(0., .004, ld);\n    h +=  clamp(0.,1.,pow(1.-ld,2.));\n    \n    // gradient\n    //col += (1.-h) * vec3(1.,0.,0.);\n    \n\tcol = mix(vec3(1.4, .5*abs(sin(iTime)), .76 * cos(iTime)), col,max(1.+d, 0.));\n    \n    \n    //col *= 1. - .05*hash12(uv*1000.); // add a grain to the background\n\tfragColor = vec4(col,h);\n}","name":"Buffer A","description":"","type":"buffer"}]}