{"ver":"0.1","info":{"id":"tdcGDr","date":"1568201554","viewed":209,"name":"Short Song For A Starfield","username":"cedricl","description":"This is a test","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["music","song","drums"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TIME_INTERVAL 0.25\n#define SYNTH_HARMONICS 20\n\nfloat GetNoteFreq(float off) { return 440.0 * pow(1.059463, off); }\nfloat Beat(float time, float loop, float offset) { return max(0., mod(time / TIME_INTERVAL, loop) - offset); }\nfloat Rnd(float x) { return mod(sin(x*15345.733*sin(x*2342.)), 1.0); }\n\nfloat Hh(float notetime, float time)\n{\n    float env = pow(max(0., 1. - 2.0 * notetime), 1.1);\n    return env * ((sin(88000.0*time) + sin(87000.0*time)) + 0.2 * Rnd(notetime));\n}\n\nfloat Bd(float notetime, float time)\n{\n    float env = pow(max(0., 1. - 0.6*notetime), 1.8);\n    return env * sin(60.0*notetime + env*10.0*notetime);\n}\n\nfloat Sn(float notetime, float time)\n{\n    float env = pow(max(0., 1. - 0.6*notetime), 2.8);\n    return 0.6 * env * sin(150.0*notetime + env*10.0*notetime) + (Rnd(notetime) * pow(max(0., 1. - 0.6*notetime), 3.2));\n}\n\nfloat Synth(float freq, float notetime, float time)\n{\n    float Out = 0.0;\n    for(int i = 0; i < SYNTH_HARMONICS; i++)\n        Out += smoothstep(0.4, 0.61, sin((freq + .237 * float(i)) * notetime) / pow(float(i+1), 0.8));\n\n    return Out / (pow(notetime + 1.0, 0.5) * float(SYNTH_HARMONICS));\n}\n\nfloat Synth2(float freq, float notetime, float time)\n{\n    float pwm = 0.5 * sin(time * .5);\n    return smoothstep(0.4+pwm, 0.61+pwm, sin(freq * time))\n        + 0.3*smoothstep(0.1+pwm, 0.41+pwm, sin(freq*1.0001 * time));\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 Out = vec2(0.2 * Hh(Beat(time, 0.5, 0.0), time));\n    Out += 0.2 * (Sn(Beat(time, 4., 2.0), time) + Sn(Beat(time, 32., 28.5), time));\n    Out += 1.2 * (Bd(Beat(time, 2.0, 0.0), time) + Bd(Beat(time, 16.0, 15.0), time));\n\n    float har[12] = float[12](-12.,-9.,-7.,-12.,-5.,-4.,-6.,-4.,-2.,-8.,-4.,-2.);\n    int haroff = 3 * int(mod(time / (TIME_INTERVAL * 16.0), 4.0));\n    for(int i = 0; i < 3; i++)\n    {\n        float HTime = max(0.0, time - float(i)*0.1);\n        Out +=  (1. / float(i+1)) * 0.85 * (Synth(GetNoteFreq(har[0+haroff]), Beat(HTime, 16.0, 0.0), HTime) \n                      + Synth(GetNoteFreq(har[1+haroff]), Beat(HTime, 16.0, 1.0), HTime)\n                      + Synth(GetNoteFreq(har[2+haroff]), Beat(HTime, 16.0, 3.0), HTime));\n    }\n\n    Out += 3.85 * (Synth(GetNoteFreq(har[haroff]-24.), Beat(time, 1.0, 0.0), time));\n    Out += .03 * vec2(sin(time), cos(time)) * (Synth2(GetNoteFreq(0.), Beat(time, 16.0, 0.0), time/TIME_INTERVAL));\n\n    return 0.4 * Out;\n}","name":"Sound","description":"","type":"sound"}]}