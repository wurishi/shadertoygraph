{"ver":"0.1","info":{"id":"sdVcDV","date":"1655667649","viewed":47,"name":"Line SDF With Linf Metric","username":"Envy24","description":"Line SDF With Linf Metric.\nhttps://www.desmos.com/calculator/wyjg9xaxjf","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","line","space","metric","linf"],"hasliked":0,"parentid":"fdGyWV","parentname":"Line SDF With L1 Metric"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\nfloat Linf(vec2 B, vec2 E)\n{\n    return max(abs(E.x - B.x), abs(E.y - B.y));\n}\n\nfloat lineSDF_Linf(\n    vec2 NDC,\n    float m,\n    float k)\n{\n    float x0 = (k-NDC.y+NDC.x)/(1.-m);\n    float x1 = (NDC.y+NDC.x-k)/(m+1.);\n\n    vec2 C0 = vec2(x0, m*x0+k);\n    vec2 C1 = vec2(x1, m*x1+k);\n\n    float R = sinOSC(0.0, 0.2, iTime); // thickness;\n    return min(Linf(C0, NDC), Linf(C1, NDC)) - R;\n}\n\n/* IQ coloring scheme */\nvec3 colorize_field(float dist, vec3 color)\n{\n    // Change color if dist is negative.\n    color = 1.0 - sign(dist) * color;\n    \n    // Attenuate color around edges.\n\tcolor *= 1.0 - exp(-4.0 * abs(dist));\n    \n    // Add interleaved \"lines\".\n\tcolor *= 0.7 + 0.2 * cos(60.0 * dist);\n    \n    // Add white edges.\n    return mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 6./R.y, abs(dist)));\n}\n\nvec3 add_metric_box(\n    vec2 NDC,\n    float m,\n    float k,\n    vec3 color)\n{\n    float unit = 5.0 / R.y;\n\n    vec2 M = \n        LMB_IS_HOLD ?\n            TO_CENTERED_NDC(iMouse.xy) :\n            rotateAroundZ(vec2(1, 0), iTime * 0.5) * 0.5;\n            //vec2(0); // This shows why line doesn't have constant width.\n    \n    // Add point\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(NDC - M) - 0.008));\n\n    float dist_form_point_to_box_edge = Linf(NDC, M) - abs(lineSDF_Linf(M, m, k));\n    float outline = abs(dist_form_point_to_box_edge);\n    \n    // Add metric box\n    return mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, outline));\n}\n/* IQ coloring scheme */\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    float m = sinOSC(-4.0, 4.0, iTime * 0.2);\n    float k = 0.0;\n    \n    vec2 NDC = TO_CENTERED_NDC(SC) * 1.0;\n    float minDist = lineSDF_Linf(NDC, m, k);\n    \n    // Blending.\n    vec3 color = colorize_field(minDist, vec3(0.1, 0.4, 0.7));\n    color = add_metric_box(NDC, m, k, color);\n\n    O = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n\n    return vec2(\n        p.x * c - p.y * s,\n        p.y * c + p.x * s);\n}","name":"Common","description":"","type":"common"}]}