{"ver":"0.1","info":{"id":"NdSfR3","date":"1646749163","viewed":122,"name":" Reactive Swirly Dots","username":"Buunuu","description":"looks a lot better the higher your monitors refresh rate. 60 fps doesnt look very nice. originally was just spinning dots but updated it to react to sound","likes":1,"published":1,"flags":96,"usePreview":0,"tags":["dots","spinning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);//render buffer B\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MtBXWt","filepath":"https://soundcloud.com/wazmusic/close-eyes?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/wazmusic/close-eyes?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//buffer A smoothes the music\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float r = 0.2;//responsiveness. 0-1, higher means more responsive\n    \n    float prevMusic = texture(iChannel1, uv).x*(1.0-r);//get previous frames color for trail\n    \n    float music = prevMusic + texture(iChannel0, uv).x*r;//blend \n\n    fragColor = vec4(music);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//buffer gets smoothed music and draws circles + trails that react to it\n\nfloat rand( vec2 n, float scale)//modified random function https://www.shadertoy.com/view/4ssXRX\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453)*scale;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 prevColor = texture(iChannel0, uv).xyz*0.99;//get previous frames color for trail\n    \n    float divisions = 15.0;//divisions\n    vec2 sL = vec2(3.0, 7.0);//speed limit: x = min, y = max\n    \n    uv = fragCoord/iResolution.x;\n    vec2 sUV = fract(uv*divisions);//square UVs\n    vec2 sP = floor(uv*divisions)/divisions;//square positions\n    \n    vec2 musicUV = vec2( floor((fragCoord.x/iResolution.x)*divisions)/divisions, 0.0 );//music UVs\n    float music = texture(iChannel1, musicUV).x;//get music from bufferA\n    music = pow(music, 2.0);//get a nicer distribution of values\n    \n    float speed = iTime*mix(sL.x, sL.y,rand(sP,1.0));//random rotation speed\n    speed += rand(sP,50.0);//random rotation offset\n    \n    float circleSize;\n    if (iMouse.z > 0.5)//mouse control of circle size\n        { circleSize = distance(iResolution.xy/2.0, iMouse.xy)/iResolution.y; }//on left click\n    else//not on left click\n        { \n          //circleSize = (0.5+sin((iTime+rand(sP, 2.0))*10.0)*0.5)*0.3;//alternate\n          circleSize = music;//music\n        }\n    \n    vec2 posOffset = vec2(sin(speed),cos(speed))*(1.0-circleSize);//circular position offset\n    \n    float circles = length(((sUV-0.5)*2.0)-posOffset);\n    circles = smoothstep(circleSize,circleSize-.2 ,circles);//draw circles\n    \n    vec3 color = normalize(vec3( rand(sP.xx+1.0, 1.0), rand(sP.xx+6.0, 1.0), rand(sP.xx+7.0, 1.0) ));//color\n\n    fragColor = vec4(max(circles*color, prevColor), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}