{"ver":"0.1","info":{"id":"clVSDV","date":"1686510229","viewed":27,"name":"fosfenos fundo olho v2","username":"davidmachadosf","description":"fosfenos\npor muito tempo tento reproduzir o que experiência: feche os olhos, pressione com as mãos..depois de algum tempo começam a aparecer padrões de imagens! me parecem geométricos, mas nunca consegui desenhá-los adequadamente... isto é +- o que vejo  ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fosfenos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI   =   3.141592;\n\nconst float pot  =  1.1;\nconst float freq =  1.1;\n\nvec3 paletteReal( float t ) {\n    \n    float w = 380. + 400.*(1.-t);\n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec3(R/255.,G/255.,B/255.);\n    //return vec3(r,0.,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float yRat = (iResolution.y/iResolution.x);\n    \n    vec2 uv = 2.*(fragCoord/iResolution.x - vec2(.5,yRat/2.));\n    \n    float x = uv.x;\n    float y = uv.y;\n\n    \n    float valxy = \n         1.- \n         (1.+sin(freq*(x/y)*pow(iTime,pot) ))/2.\n         * \n         (1.+cos(freq*(y/x)*pow(iTime,pot) ))/2.\n         ;\n    \n    \n    \n    //plot (1-(1-sin( 10*(x+y) * x)^100) * \n    //        (1-sin( 10*(x+y) * y)^100))    \n    \n    //float valxy = \n    //    //1. -\n    //     pow( (1.+sin((2.*PI)*freq*iTime*(x*y-y)))/2., pot) * \n    //     pow( (1.+cos((2.*PI)*freq*iTime*(y*x-x)))/2., pot);\n    \n    \n    //float valxy = \n    //      1. -\n    //     pow( (1.+sin((2.*PI)*freq*iTime*(x/y)))/2., pot) * \n    //     pow( (1.+cos((2.*PI)*freq*iTime*(y/x)))/2., pot);\n    \n    \n    //float valxy = \n    //     //1. -\n    //     (1.+cos(freq*x*iTime))/2. \n    //     * \n    //     (1.+cos(freq*y*iTime))/2. \n    //     ;\n    \n    //vec3 col = vec3(valxy);\n    vec3 col = paletteReal(valxy);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}