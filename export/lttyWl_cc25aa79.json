{"ver":"0.1","info":{"id":"lttyWl","date":"1534702684","viewed":1009,"name":"simple 3d noise function","username":"stoox","description":"simple 3d noise function with hash function","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n)\n{\n\treturn fract(sin(n) * 43728.1453);\n}\n\nfloat noise(vec3 x)\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\n\tf = f * f * (3.0 - 2.0 * f);\n\tfloat n = p.x + p.y * 55.0 + p.z * 101.0 ;\n\nreturn mix(\n\tmix(\n\t\tmix(hash(n), hash(n + 1.0), f.x),\n\t\tmix(hash(n+55.0), hash(n + 56.0), f.x),\n\t\tf.y),\n\tmix(\n\t\tmix(hash(n+101.0), hash(n + 102.0), f.x),\n\t\tmix(hash(n+156.0), hash(n + 157.0), f.x),\n\t\tf.y),\n\tf.z);\n}\n\n// for shadertoy:\n// (for a simple test I chose the third dimension to be the time)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord/iResolution.xy;\n\n\t// Time varying pixel color\n\tvec3 col = vec3(1.0,0.0,0.5)*noise(vec3(2.5*uv,0.5*iTime));\n\n\t// Output to screen\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}