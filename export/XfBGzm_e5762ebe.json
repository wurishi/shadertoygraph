{"ver":"0.1","info":{"id":"XfBGzm","date":"1703946360","viewed":64,"name":"Krivaja Steinera","username":"ArtemNikolaev","description":"Normalization function","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["steiner"],"hasliked":0,"parentid":"4cBGzm","parentname":"Normalization Function"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 normalizePixelCoord(vec2 fragCoord, vec3 resolution) {\n    float smallerSide;\n    if (resolution.x >= resolution.y) {\n        smallerSide = resolution.x;\n    } else { smallerSide = resolution.y; }\n    \n    return (fragCoord - 0.5 * resolution.xy) / resolution.y;\n}\n\nvec2 rotate2D(vec2 uv, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c) * uv;\n}\n\nvec2 hash12(float t) {\n    float x = fract(sin(t * 3453.329));\n    float y = fract(sin((t + x) * 8532.732));\n    return vec2(x,y);\n}\n\nvec3 cardioidaColor(vec2 uv) {\n    vec3 col = vec3(0.0);\n    \n    float r = 0.10;\n    \n    for (float i=0.0; i < 60.0; i++) {\n        float factor = (sin(iTime) * 0.5 + 0.5) + 0.3;\n        i += factor;\n    \n        float a = i / 3.0;\n        float dx = 2.0 * r * cos(a) - r * cos(2.0 * a);\n        float dy = 2.0 * r * sin(a) + r * sin(2.0 * a);\n        \n        col += 0.005 * factor / length(uv - vec2(dx + 0.1, dy) - 0.02 * hash12(i));\n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = normalizePixelCoord(fragCoord, iResolution);\n    uv = rotate2D(uv, iTime);\n    vec3 col = cardioidaColor(uv);\n    col *= sin(vec3(0.2, 0.8, 0.9) * iTime) * 0.15 + 0.25;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}