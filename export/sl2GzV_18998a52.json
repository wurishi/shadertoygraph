{"ver":"0.1","info":{"id":"sl2GzV","date":"1624312572","viewed":68,"name":"Orbitz","username":"Neuno","description":"First ever shadertoy or shader in general! I'm sure there are mistakes or sub-optimal approaches, please do point them out. For example maybe applying the motion through sin/cos instead of translating somewhere else isn't the best idea..?","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["circles","newbie","orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define nC 8\n#define nO 3\n\nvec3 DrawCircle(vec2 frag, vec2 center, float radius, float smoothing, vec3 tint) {\n    float res = distance(frag, center);\n    res = smoothstep(radius, radius + smoothing, res);\n    return  vec3(1.0 - res) * tint;\n}\nvec3 DrawCircles(vec2 frag, vec2 orbitCenter, float orbitRadius, float cSmoothing, float cRadius, \n                 vec2 timings, vec3 cTint) {\n    vec2 center; \n    vec3 circles = vec3(0.035,0.035,0.035);\n    float rads = 0.0;\n    for(int x = 0; x < nC; x++) {\n        // place circle's center on point around orbit's circumference\n        center = vec2(orbitCenter.x + orbitRadius * cos(rads + iTime * timings.x),\n                      orbitCenter.y + orbitRadius * sin(rads + iTime * timings.y));\n        // gen circle\n        circles += DrawCircle(frag, center, cRadius, cSmoothing, cTint);\n        // move next circle's gen point around orbit's circumference\n        rads += 2.0*PI / float(nC);\n    }\n    return circles;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 st = fragCoord.xy / iResolution.xy * ratio, \n    \torbitCenter = vec2(0.5,0.5) * ratio;\n    float orbitRadius = .1, smoothing = 0.001;\n\n    float circleRadius = 0.015;\n    vec2 timings = vec2(1.2 , .7);\n    vec3 circles = vec3(0.0), tint = vec3(1.0);\n    \n    for(int x = 0; x < nO; x++) {\n    \tcircles += DrawCircles(st, orbitCenter, orbitRadius, smoothing, circleRadius, timings, tint);\n        timings *= -.33;\n        circleRadius *= 1.33;\n        orbitRadius *= 2.0;\n    }\n\n    fragColor = vec4(circles, 1.0);\n}","name":"Image","description":"","type":"image"}]}