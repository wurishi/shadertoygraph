{"ver":"0.1","info":{"id":"Mf3cR4","date":"1730302547","viewed":85,"name":"metaballs and galaxy","username":"nayk","description":"source https://www.shadertoy.com/view/MdXSzS","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["galaxy","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 cl01 = vec4(1.0, 1.0, 1.0, 1);\nvec4 cl02 = vec4(0.6, 0.0, 0.8, 1);\nvec4 cl03 = vec4(0.5, 0.4, 0.9, 1);\nvec4 cl04 = vec4(0.3, 0.7, 0.5, 1);\nvec4 cl05 = vec4(0.6, 0.4, 0.8, 1);\nvec4 cl06 = vec4(0.9, 0.4, 0.9, 1);\nvec4 cl07 = vec4(1.0, 0.7, 1.0, 1);\nvec4 cl08 = vec4(0.4, 0.7, 0.9, 1);\nvec4 cl09 = vec4(0.5, 0.9, 0.6, 1);\nvec4 cl10 = vec4(0.5, 1.0, 0.7, 1);\nvec4 cl11 = vec4(0.9, 0.4, 0.4, 1);\nvec4 cl12 = vec4(0.8, 1.0, 0.2, 1);\nvec4 cl13 = vec4(0.9, 0.8, 0.0, 1);\nvec4 cl14 = vec4(0.8, 0.2, 1.0, 1);\nvec4 cl15 = vec4(1.0, 0.4, 0.0, 1);\n\n// Euclidean norm based distance function.\nfloat dist(vec2 x, vec2 y) {\nx.xy *= mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\ny.xy *= mat2(-cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\nx.xy *= mat2(cos(iTime),-sin(iTime),sin(iTime), cos(iTime));\n    return length(x - y);\n}\n\n// Shaping function for color blending.\nfloat smst(float x) {\n    return smoothstep(0.2, 0.1, x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n    vec4 y=fragColor;\n    vec2 z=fragCoord;\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n y = vec4(0.0); // Initialize color.\n   \n    // Normalize coordinates.\n    z = z - 0.5 * iResolution.xy;\n    z = 2.3 * z / iResolution.yy;\n      z.xy *= mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n      ;\n    // Enumerate the algebraic expression for each corner.\n    float x01 =  1.0;\n    float y01 =  0.0;\n    vec2  p01 =  vec2(x01, y01);\n     p01*=cos(iTime);\n    float x02 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y02 =  sqrt((7.0 + sqrt(5.0) - sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p02 =  vec2(x02, y02);\n   \n    float x03 =  sqrt(5.0) / 8.0 - 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y03 =  sqrt((7.0 - sqrt(5.0) + sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p03 =  vec2(x03, y03);\n   \n    float x04 =  sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y04 =  sqrt((10.0 + sqrt(20.0)) / 16.0);\n    vec2  p04 =  vec2(x04, y04);\n   \n    float x05 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y05 =  sqrt((7.0 + sqrt(5.0) + sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p05 =  vec2(x05, y05);\n   \n    float x06 = -4.0 / 8.0;\n    float y06 =  sqrt(12.0 / 16.0);\n    vec2  p06 =  vec2(x06, y06);\n   \n    float x07 = -sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y07 =  sqrt((10.0 - sqrt(20.0)) / 16.0);\n    vec2  p07 =  vec2(x07, y07);\n   \n    float x08 = -sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 + sqrt(5.0)) / 64.0);\n    float y08 =  sqrt((7.0 - sqrt(5.0) - sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p08 =  vec2(x08, y08);\n   \n    float x09 = -sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 + sqrt(5.0)) / 64.0);\n    float y09 = -sqrt((7.0 - sqrt(5.0) - sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p09 =  vec2(x09, y09);\n   \n    float x10 = -sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y10 = -sqrt((10.0 - sqrt(20.0)) / 16.0);\n    vec2  p10 =  vec2(x10, y10);\n   \n    float x11 = -4.0 / 8.0;\n    float y11 = -sqrt(12.0 / 16.0);\n    vec2  p11 =  vec2(x11, y11);\n   \n    float x12 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 - sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y12 = -sqrt((7.0 + sqrt(5.0) + sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p12 =  vec2(x12, y12);\n   \n    float x13 =  sqrt(20.0) / 8.0 - 2.0 / 8.0;\n    float y13 = -sqrt((10.0 + sqrt(20.0)) / 16.0);\n    vec2  p13 =  vec2(x13, y13);\n   \n    float x14 =  sqrt(5.0) / 8.0 - 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y14 = -sqrt((7.0 - sqrt(5.0) + sqrt(6.0 * (5.0 - sqrt(5.0)))) / 16.0);\n    vec2  p14 =  vec2(x14, y14);\n   \n    float x15 =  sqrt(5.0) / 8.0 + 1.0 / 8.0 + sqrt(6.0 * (5.0 - sqrt(5.0)) / 64.0);\n    float y15 = -sqrt((7.0 + sqrt(5.0) - sqrt(6.0 * (5.0 + sqrt(5.0)))) / 16.0);\n    vec2  p15 =  vec2(x15, y15);\n         p01*=2.*cos(iTime);\n              p02*=sin(iTime);\n                   p03*=cos(iTime);\n                        p04*=4.*sin(iTime);\n                              p05*=-tan(iTime);\n                                   p05*=sin(iTime);\n                                        p06*=4.*sin(iTime);\n                                             p06*=cos(iTime);\n                                                  p07*=7.*cos(iTime);\n                                                       p08*=tan(iTime);\n                                                            p09*=sin(iTime);\n                                                                 p10*=4.*cos(iTime);\n                                                                      p11*=sin(iTime);\n                                                                           p12*=cos(iTime);\n                                                                                p13*=sin(iTime);\n                                                                                    p14*=4.*cos(iTime);\n                                                                                     p15*=2.*sin(iTime);\n                                                                               \n                                                                               \n    // Calculate screen distance.\n    float d01 = dist(z, p01);\n    float d02 = dist(z, p02);\n    float d03 = dist(z, p03);\n    float d04 = dist(z, p04);\n    float d05 = dist(z, p05);\n    float d06 = dist(z, p06);\n    float d07 = dist(z, p07);\n    float d08 = dist(z, p08);\n    float d09 = dist(z, p09);\n    float d10 = dist(z, p10);\n    float d11 = dist(z, p11);\n    float d12 = dist(z, p12);\n    float d13 = dist(z, p13);\n    float d14 = dist(z, p14);\n    float d15 = dist(z, p15);\n   \n    // Color the canvas.\n    y = smst(d01) * cl01 + y;\n    y = smst(d02) * cl02 + y;\n    y = smst(d03) * cl03 + y;\n    y = smst(d04) * cl04 + y;\n    y = smst(d05) * cl05 + y;\n    y = smst(d06) * cl06 + y;\n    y = smst(d07) * cl07 + y;\n    y = smst(d08) * cl08 + y;\n    y = smst(d09) * cl09 + y;\n    y = smst(d10) * cl10 + y;\n    y = smst(d11) * cl11 + y;\n    y = smst(d12) * cl12 + y;\n    y = smst(d13) * cl13 + y;\n    y = smst(d14) * cl14 + y;\n    y = smst(d15) * cl15 + y;\nfloat v1, v2, v3;\nv1 = v2 = v3 = 0.0;\n\nfloat s = 0.0;\nfor (int i = 0; i < 90; i++)\n{\nvec3 p = s * vec3(uv, 0.0);\n\np += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)*y.xyz;\nfor (int i = 0; i < 8; i++) p = abs(p) / dot(p,p) - 0.659;\nv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\nv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\nv3 += length(p.xy*10.) * .0003;\ns  += .035;\n}\n\nfloat len = length(uv);\nv1 *= smoothstep(.7, .0, len);\nv2 *= smoothstep(.5, .0, len);\nv3 *= smoothstep(.9, .0, len);\n\nvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n(v1 + v3) * .3,\nv2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\nfragColor=vec4(min(pow(abs(col), vec3(1.2)), 1.0), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}