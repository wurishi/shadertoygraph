{"ver":"0.1","info":{"id":"wl2yzd","date":"1595347876","viewed":132,"name":"Square Gradient Droplets","username":"peterszerzo","description":"A square-based shader with simple two-point gradients.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["gradient","square","droplets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist2(vec2 v, vec2 a, vec2 b) {\n    return distance(v, a) * distance(v, b);\n}\n\nfloat getGradient(float remainder, vec2 uv) {\n    if (remainder == 0.0) {\n        return dist2(uv, vec2(0.2), vec2(0.2, 0.8));\n    } else if (remainder == 1.0) {\n        return dist2(uv, vec2(0.6, 0.9), vec2(0.2, 0.2));\n    } else if (remainder == 2.0) {\n        return dist2(vec2(1.0) - uv, vec2(0.5, 0.5), vec2(0.9, 0.2));\n    } else {\n        return dist2(vec2(uv.x, 1.0 - uv.y), vec2(0.9), vec2(0.8));\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.x;\n    \n    vec2 uvGrid = uv * (11.0 + 11.0) + 7.0;\n    \n    vec2 uvIndices = floor(uvGrid);\n    \n    vec2 uvLocal = fract(uvGrid);\n    \n    float remainder = mod(uvIndices.x * uvIndices.y, 4.0);\n    \n    float gradient = getGradient(remainder, uvLocal);\n    \n    fragColor = vec4(\n        mix(\n            vec3(235.0, 75.0, 152.0) / 255.0,\n            vec3(90.0, 100.0, 242.0) / 255.0,\n            0.5 + 0.5 * cos(0.1 * iTime)\n        ) *\n        (vec3(0.3) + 0.7 * vec3(\n            sin(3.0 * uvIndices.x * uvIndices.y +\n            7.0 * uvIndices.y * uvIndices.y +\n            iTime * 0.5) +\n            gradient * 0.3\n        )) * 0.8,\n        1.0\n    );\n}","name":"Image","description":"","type":"image"}]}