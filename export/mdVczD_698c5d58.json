{"ver":"0.1","info":{"id":"mdVczD","date":"1696817581","viewed":34,"name":"Ns - unda Woda (Gyroid)","username":"novastruck","description":"Gyroid.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c , -s , s , c);\n}\n\nfloat gyroid(vec3 p , float scale , float thickness , float bias){\n    p *= scale;\n    \n\n    return abs(dot(sin(p) , cos(p.zxy)) -bias)/scale * .2 - thickness;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat getDist(vec3 p){\n   // p.xy*=Rot(p.z * .05); \n\n    p.z += iTime * .1;\n    float g = gyroid(p , .9 , .0 , .0);\n    float g1 = gyroid(p , 10.15 , .0 ,1.4);\n    float g2 = gyroid(p , 24.42 , .0 ,.3);\n    float g3 = gyroid(p , 32.13 , .0 ,.0);\n     g -= g1 * .3;\n     g -= g2 * .2;\n     g += g3 * .1;\n    float b = sdBox(p , vec3(2.));\n    //return max( b , g);\n    return g;\n}\n\n\nfloat rayMarch(vec3 ro , vec3 rd){               //RayMarching Algo\n    float dO = 0.;\n    for(int i = 0; i < 200; i++){\n        vec3 p = ro + rd * dO;\n        float ds = getDist(p);\n        dO += ds;\n        if(dO > 100. || abs(ds) < 0.01)break;\n    }\n\n    return dO;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0.01 , 0);\n    vec3 n = getDist(p) - vec3(getDist(p - e.xyy), getDist(p -e.yxy) ,getDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat getLight(vec3 p){\n    vec3 lightPos = vec3(1 , 2 , 3);\n    vec3 l  = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    \n    //float dif = dot(n , l) *.5 + .5;\n    float dif = n.y *.5 + .5;\n\n    return dif;\n}\n\nvec3 getRayDir(vec2 uv , vec3 p , vec3 l , float z){\n    vec3 f = normalize(l - p);\n    vec3 r = normalize(cross(vec3 ( 0 , 1 , 0 ) , f));\n    vec3 u = cross( f , r);\n    vec3 c = f *z;\n    vec3 i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\nvec3 background(vec3 rd){\n    vec3 col =vec3( 0.);\n    float y = rd.x * .5 + .5;\n    col += y * vec3( .83 ,4.53 , 4.3);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/ iResolution.xy;\n    vec3 ro = vec3( 0 , 0 , -3);\n    ro.yz *= Rot(-m.y * 3.141592 + 1.);\n    ro.xz *= Rot( -m.x * 6.283185);\n    vec3 rd = getRayDir(uv, ro , vec3 ( 0 , 0 , 0 ) , 1.);\n    float d = rayMarch(ro , rd);\n    vec3 col =vec3(0.);\n\n    if( d < 100.){\n        vec3 p = ro + rd *d;                     \n        float dif = getLight(p);        \n        col = vec3(dif);\n        float g1 = gyroid(p , 10.15 , .0 ,1.4);\n        col *= smoothstep(- .1 , .05 , g1);\n       \n    }\n    col = mix(col , background(rd) , smoothstep(1. , 8. , d)); \n    //col = pow(col , vec3(.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}