{"ver":"0.1","info":{"id":"XsdGDS","date":"1451998482","viewed":344,"name":"King Kai's planet","username":"hanmaokun","description":"eiffie's [url=https://www.shadertoy.com/view/XtsGRH]car[/url] running on Xor's mountains, though believe it or not, I want to make a [url=http://dragonball.wikia.com/wiki/King_Kai%27s_planet]King Kai's planet[/url] originally.. :D ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","car"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define CHANGE_SPEED 0.1\t\t\t\t/* terrain changing speed */\n#define VIEW_SCOPE   0.13\t\t\t\t/* view scope. */\n#define TRACK_WIDTH  12.\n#define TRACK_HEIGHT 9.\n\n/*=======================global variables========================*/\nvec2 uv;\nvec3 cameraOrigin, rayDir;\nfloat dh_car = 0.0;\nfloat cur_car_dir_ang_xz = 0.0;\nvec3 terrain_normal = vec3(0.0);\nvec3 carPos = vec3(0.0, 0.0, 0.0);\n\n/*=======================proto function declarations=============*/\nfloat terrain_map(vec3 p);\nfloat map(vec3 p);\n\n/*=======================shading utils===========================*/\nfloat sfract(float n){ return smoothstep(0.0,1.0,fract(n)); }\nfloat rand(vec3 n){ return fract(sin(dot(n,vec3(5.3357,-5.8464,5.7645)))*256.75+0.325); }\nfloat noise(vec3 n)\n{\n    float h1 = mix(rand(vec3(floor(n.x),floor(n.y),floor(n.z))),rand(vec3(ceil(n.x),floor(n.y),floor(n.z))),sfract(n.x));\n    float h2 = mix(rand(vec3(floor(n.x),ceil(n.y),floor(n.z))),rand(vec3(ceil(n.x),ceil(n.y),floor(n.z))),sfract(n.x));\n    float s1 = mix(h1,h2,sfract(n.y));\n\n    h1 = mix(rand(vec3(floor(n.x),floor(n.y),ceil(n.z))),rand(vec3(ceil(n.x),floor(n.y),ceil(n.z))),sfract(n.x));\n    h2 = mix(rand(vec3(floor(n.x),ceil(n.y),ceil(n.z))),rand(vec3(ceil(n.x),ceil(n.y),ceil(n.z))),sfract(n.x));\n    float s2 = mix(h1,h2,sfract(n.y));\n    return mix(s1,s2,sfract(n.z));\n}\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    float tm = (noise(vec3(pos.xz/2.0,0.0)) + noise(vec3(pos.xz*4.0,0.0)))*0.25;\n    float th = (tm+noise(vec3(pos.xz,0.0))*0.25 + noise(vec3(pos.xz/2.0,0.0))*0.75);\n\n    float tn = noise(pos*64.0)*0.05 + noise(pos*32.0)*0.05 + noise(pos*16.0)*0.05 + 0.05;\n    return mix(vec3(0.035, tn, 0.025), vec3(tn), clamp(pow(th, 8.0)*0.2, 0.0, 1.0));\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.5;                 \t\t// selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<4; i++ )         \t// 40 is the max numnber of raymarching steps\n    {\n        h = map(ro + rd*t);\n        res = min( res, 64.0*h/t );   \t// 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   \t// limit the max and min stepping distances\n    }\n    return clamp(res, 0.8, 1.0);\n}\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    vec3  lig = normalize(vec3(1.0, 2.7, 0.09));\n    float dif = max(dot(nor, lig), 0.0);\n    float sha = 0.0; if( dif > 0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n\n    lin += dif * vec3(4.00, 4.00, 4.00) * sha;\n    lin += vec3(0.5);\n\n    vec3 col = mal * lin;\n\n\tcol = mix(vec3(0.9), col, 1.0 - clamp(dis * dis / 600.0, 0.0, 1.0));\n\n    return col;\n}\n\n/*=======================raymarching models======================*/\nfloat smin(float a,float b,float k){float h=clamp(0.5+0.5*(b-a)/k,0.0,1.0);return b+h*(a-b-k+k*h);}\nvec3 cp1;\nmat2 cm1;\nvec3 rc=vec3(0.7,0.26,1.5);\n\nmat2 trmx,mrmx;//the wheel spinners\nfloat minL,cc3,cc4;//car config\nvec4 trpc,cc;//color and stuff\nbool bColoring=false;\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat car_map(in vec3 p0){\n\tp0 -= carPos;\n\n\t/* rotation according to terrain surface normal. */\n    vec3 up_y = vec3(0., 1., 0.);\n\tvec3 axis = normalize(cross(up_y, terrain_normal));\n\tfloat rot_ang = acos(dot(terrain_normal, up_y) / (length(terrain_normal) * length(up_y)));\n\tp0 = rotationMatrix(axis, rot_ang) * p0;\n\n\t/* rotation in 'x-z' plane, to align car with the track direction. */\n\tp0 = rotationMatrix(vec3(0.0, 1.0, 0.0), -cur_car_dir_ang_xz + 3.14/2.) * p0;\n\n\t/* car model, from eiffie's https://www.shadertoy.com/view/XtsGRH */\n\tvec3 p=p0;\n\tp.y += 1.24;\n\tfloat d=length(max(vec3(abs(p.x)-0.35,length(p.yz)-1.92,-p.y+1.4),0.0))-0.05;\n\td=max(d,p.z-1.0);\n\tp=p0+vec3(0.0,-0.22,0.39);\n\tp.xz=abs(p.xz);\n\tfloat w1=0.24,w2=cc.z,dL=length(p+vec3(-0.3,0.0,-1.18-p0.z*0.17))-0.05;\n\tp.xz-=vec2(cc.w,1.0);\n\tif(p0.z<0.0){\n\t\tw1=cc.x;w2=cc.y;\n\t\tp.xy=mrmx*p.xy;\n\t}else p.xz=mrmx*p.xz;\n\tp.x=abs(p.x);\n\tfloat r=length(p.yz);\n\td=smin(d,length(vec2(max(max(p.x-w2,0.0),-p.y-0.08),r-w1))-0.02,0.25);\n\tfloat d1=length(vec2(max(p.x-w2-0.01,0.0),r-w1+0.05))-0.04;\n\tif(p0.z<0.0)p.yz=p.yz*trmx;\n\telse p.yz=trmx*p.yz;\n\tfloat d2=min(min(abs(p.z+p.y),abs(p.z-p.y)),min(abs(p.z),abs(p.y)));//8 blades\n\td2=max(r-w1+cc3,max(d2-0.003,p.x-w2+0.04));\n\td2=min(d2,dL);\n\tminL=min(minL,d2);//catch the minimum distance to the glowing things\n\tif(bColoring){\n\t\tif(d2<d && d2<d1){trpc+=vec4(1.0,0.6,0.5,256.0);}//spokes/turbines\n\t\telse if(d1<d){trpc+=vec4(vec3(clamp(1.0-(r-w1+0.09)*100.0,0.0,1.0)),256.0);}\n\t\telse {//the car's body\n\t\t\tif(p0.z<-1.04 || (abs(p0.y-0.58)>0.05-p0.z*0.09 || p0.z>0.25) && length(max(abs(p0.xz+vec2(0.0,-0.27))-vec2(0.18,0.39),0.0))>0.1)trpc+=vec4(1.0,0.9,0.4,16.0);\n\t\t\telse trpc += vec4(0.1, 0.2, 0.3, 2.0);//the windshield\n\t\t}\n\t}\n\treturn min(d,min(d1,d2));\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nfloat snoise(vec3 v)\n{\n  v.z = 0.;\t//comment out this line to see a shifting terrain.\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy;\n  vec3 x3 = x0 - D.yyy;\n\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  float n_ = 0.142857142857;\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat terrain_map( vec3 p ) {\n    vec3 drpz = vec3(p.xz * VIEW_SCOPE, iTime * CHANGE_SPEED);\n\treturn p.y - snoise(drpz);\n}\n\nfloat map( vec3 p)\n{\n\tfloat d_terrain = terrain_map(p);\n\tfloat d_car     = car_map(p);\n\tdh_car = d_car - d_terrain;\n\treturn min(d_car, d_terrain);\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n\tconst float maxd = 30.0;\n\tconst float precis = 0.001;\n    float h = precis * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for(int i = 0; i < 32; i++)\n    {\n        if(h < precis*t || t > maxd) break;\n\t    h = map(ro + rd * t);\n        t += h;\n    }\n    if(t < maxd) res = t;\n    return res;\n}\n\n/*==========================main entry===========================*/\nvoid setConfig(){\n\tfloat t=mod(iTime,10.0);\n\tt=t-5.0;\n\tif(t>4.0)t=5.0-t;\n\tt=clamp(t,0.0,1.0);\n\tcc3=mix(0.06,-0.03,t);\n\tcc4=mix(0.0,-0.5,t);\n\tcc=mix(vec4(0.24,0.07,0.1,0.55),vec4(0.33,0.04,0.22,0.72),t);\n\n\tfloat tim=iTime*5.0,a=cc4*3.0;\n\ttrmx=mat2(cos(tim),sin(tim),-sin(tim),cos(tim));\n\tmrmx=mat2(cos(a),sin(a),-sin(a),cos(a));\n\n\t// car position and rotation params calculation\n\tfloat ang = mod(iTime/2., 6.28) - 3.14;\n\tfloat car_pos_x = (TRACK_WIDTH * TRACK_HEIGHT)/sqrt((pow(TRACK_HEIGHT, 2.) + pow(TRACK_WIDTH, 2.)*tan(ang)*tan(ang)));\n\tif((ang > 3.14/2.) || (ang < -3.14/2.)) {\n\t\tcar_pos_x *= -1.0;\n\t}\n\tfloat car_pos_z = car_pos_x * tan(ang);\n    vec3 pos = vec3(vec2(car_pos_x, car_pos_z) * VIEW_SCOPE, iTime * CHANGE_SPEED);\n\tfloat car_pos_y = snoise(pos);\n\tcarPos = vec3(car_pos_x, car_pos_y, car_pos_z);\n\tcur_car_dir_ang_xz = atan(-pow(TRACK_HEIGHT, 2.) * car_pos_x, pow(TRACK_WIDTH, 2.) * car_pos_z);\n\tvec2 eps = vec2(0.0, 0.001);\n\tterrain_normal = normalize(\n\t\t\tvec3(\n\t\t\t\tterrain_map(vec3(carPos + eps.yxx)) - terrain_map(vec3(carPos - eps.yxx)),\n\t\t\t\tterrain_map(vec3(carPos + eps.xyx)) - terrain_map(vec3(carPos - eps.xyx)),\n\t\t\t\tterrain_map(vec3(carPos + eps.xxy)) - terrain_map(vec3(carPos - eps.xxy))\n\t\t\t)\n\t);\n}\n\nvoid initWorldCoords(in vec2 fragCoord) {\n    uv = fragCoord.xy / iResolution.xy;\n\tuv = 2. * uv - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    cameraOrigin = vec3(0.0, 4, -12);\n\tvec3 cameraTarget = vec3(0, 0.0, 0);\n\tvec3 upDirection = vec3(0.0, -1.0, 0.0);\n\tvec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n\tvec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n\tvec3 cameraUp = cross(cameraDir, cameraRight);\n    rayDir = normalize(cameraRight * uv.x + cameraUp * uv.y + cameraDir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tinitWorldCoords(fragCoord);\n\n\tsetConfig();\n\tfloat tim=iTime*5.0,a=cc4*3.0;\n\ttrmx=mat2(cos(tim),sin(tim),-sin(tim),cos(tim));//the turbine spinner\n\tmrmx=mat2(cos(a),sin(a),-sin(a),cos(a));\n\ttim=iTime*0.5;\n\n    float t = march(cameraOrigin, rayDir);\n\n\t/* ==================shading==================*/\n    vec3 col = vec3(0.9);\n\n    if(t > -0.001)\n    {\n        vec3 pos = cameraOrigin + t * rayDir;\n        float noise = mix(0.6, 1.0, pos.y);\n        col = vec3(noise);\n\n\t\tif(dh_car < 0.) {\n\t\t\t/* shade car. */\n\t    \tvec3 L=normalize(vec3(0.5,0.5,-0.5));\n\t\t\tvec3 p = pos;\n\t\t\tvec2 v=vec2(2.0/iResolution.y,0.0);\n\t\t\ttrpc=vec4(0.0); bColoring=true;\n\t\t\tvec3 N=normalize(vec3(-car_map(p-v.xyy)+car_map(p+v.xyy),-car_map(p-v.yxy)+car_map(p+v.yxy),-car_map(p-v.yyx)+car_map(p+v.yyx)));\n\t\t\tcol=trpc.rgb*0.1666*max(0.2,0.25+0.75*dot(N,L));\n\t\t\tcol*=mix(vec3(0.5,0.5,1.0),vec3(1.0,1.0,0.5),abs(dot(rayDir,N)));\n\t\t\tcol+=vec3(1.0,0.5,0.0)*pow(max(0.0,dot(reflect(rayDir,N),L)),trpc.a);\n\t\t}else {\n\t\t\t/* shade terrain. */\n\t\t\tvec2 eps = vec2(0.0, 0.01);\n\t\t\tvec3 normal = normalize(\n\t\t\t\t\tvec3(\n\t\t\t\t\t\tmap(vec3(pos + eps.yxx)) - map(vec3(pos - eps.yxx)),\n\t\t\t\t\t\tmap(vec3(pos + eps.xyx)) - map(vec3(pos - eps.xyx)),\n\t\t\t\t\t\tmap(vec3(pos + eps.xxy)) - map(vec3(pos - eps.xxy))\n\t\t\t\t\t)\n\t\t\t);\n\t\t\tvec3 mal = doMaterial( pos, normal );\n\t\t\tcol = doLighting( pos, normal, rayDir, t, mal );\n\n\t\t\t/* draw race track */\n\t\t\tfloat pwa = pow(TRACK_WIDTH, 2.), pwb = pow(TRACK_HEIGHT, 2.);\n\t\t\tfloat pwx = pos.x * pos.x, pwy = pos.z * pos.z;\n\t\t\tfloat x1 = sqrt(pwa*pwb*pwx / (pwb*pwx + pwa*pwy));\n\t\t\tfloat x2 = -x1;\n\t\t\tfloat x0 = pos.x * x1 > 0. ? x1:x2;\n\t\t\tfloat z0 = pos.z * x0 / pos.x;\n\t\t\tvec2 uv_c = vec2(x0, z0);\n\t\t\tif(distance(uv_c, vec2(pos.x, pos.z)) < 2.2) {\n\t\t\t\tfloat y0 = snoise(vec3(uv_c * VIEW_SCOPE, iTime * CHANGE_SPEED));\n\t\t\t\tfloat dist = distance(pos, vec3(x0, y0, z0));\n\t\t\t\tfloat d_abs = abs(dist);\n\t\t\t\tcol = mix(vec3(0.3 - d_abs/4.), col, pow(smoothstep(0.0, 1.5, d_abs), 5.));\n\t\t\t\tfloat a = atan(z0, x0);\n\t\t\t\ta = mod(a*39.1, 3.0);\n\t\t\t\tif(a > 1.8) {\n\t\t\t\t\tcol = mix(vec3(1.0), col, smoothstep(0., 0.02, d_abs));\n\t\t\t\t}\n\t\t\t\tif(d_abs > 1.1) {\n\t\t\t\t\tcol = mix(vec3(1.0), col, smoothstep(1.1, 1.13, d_abs));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"","description":"","type":"image"}]}