{"ver":"0.1","info":{"id":"MXXXWX","date":"1710195310","viewed":62,"name":"interactive 2D worley noise","username":"IlyaBelyy","description":"An interactive exploration how does choice of offsets affect worley noise.\n\nUse mouse to set gradients.\nSee keyboard commands in the comments","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["2d","noise","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nUse mouse to adjust offset vectros\n\nKeyboard:\n    r - reset all gradients to random\n    i - display value isolines\n    g - display grid\n    v - display offsets\n    c - colour\n    h - fake hexes by shifting every second row\n    1..9, 0 - scale offset by 10-100%\n\nHex grid version https://www.shadertoy.com/view/l3SSzR\n*/\n\nvec2 load_offset(ivec2 p, float scale)\n{\n//return vec2(0.5);\n    vec2 v = texelFetch(iChannel0, p, 0).xy;\n    return scale * (v - vec2(0.5)) + vec2(0.5);\n}\n\nvec3 worley(vec2 p, float scale, bool shifted)\n{\n    vec3 nearest = vec3(1e3);\n\n    ivec2 c = ivec2(floor(p));\n    ivec2 ofs;\n    for (ofs.y = -1; ofs.y <= 1; ofs.y++) {\n        for (ofs.x = -1; ofs.x <= 1; ofs.x++) {\n            vec2 o = load_offset(c + ofs, scale);\n            vec2 g = cell2pix(vec2(c + ofs), shifted);\n            float dist = length(g + o - p);\n            if (dist < nearest.x) nearest = vec3(dist, vec2(c + ofs));\n        }\n    }\n\n    nearest.x /= length(vec2(scale * 0.5 + 0.5));\n    //nearest.x *= 1.0 / sqrt(2.);\n    return nearest;\n}\n\nfloat line(vec2 from, vec2 to, vec2 p)\n{\n    vec2 dir = to - from;\n    if (dot(p - from, dir) < 0.0) return 0.0;\n\n    if (length(p - from) > length(dir)) return 0.0;\n\n    vec2 tangent = normalize(vec2(-dir.y, dir.x));\n    return smoothstep(2.0 * fwidth(p.x), 0.0, abs(dot(p - from, tangent)));\n}\n\n// https://www.shadertoy.com/view/XlXcW4\nvec3 hash( uvec3 x )\n{\n    const uint k = 1103515245U;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvec3 id2colour(ivec2 id)\n{\n    return hash(uvec3(id.xy + 123, id.x + id.y + 200));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = screen_to_pos(fragCoord, iResolution);\n    float scale = texelFetch(iChannel0, ivec2(0), 0).x;\n\n    bool shifted = texelFetch(iChannel1, ivec2(72,2), 0).x > 0.0;\n\n    vec3 n = worley(p, scale, shifted);\n\n    // colour\n    if (texelFetch(iChannel1, ivec2(67,2), 0).x == 0.0) {\n        fragColor.rgb = vec3(1.0 - n.x) * id2colour(ivec2(n.yz));\n    } else {\n        fragColor.rgb = vec3(1.0 - n.x);\n    }\n\n    // isolines\n    if (texelFetch(iChannel1, ivec2(73,2), 0).x != 0.0) {\n        fragColor.rgb += vec3(smoothstep(fwidth(n.x), 0.0, abs(n.x)));\n        fragColor.b += smoothstep(fwidth(n.x), 0.0, abs(n.x - 0.25));        \n        fragColor.g += smoothstep(fwidth(n.x), 0.0, abs(n.x - 0.5));\n        fragColor.r += smoothstep(fwidth(n.x), 0.0, abs(n.x - 0.75));\n    }\n\n    // grid\n    if (texelFetch(iChannel1, ivec2(71,2), 0).x != 0.0) {\n        vec2 g = cell2pix(vec2(cell(p, shifted)), shifted) + fract(p);\n        vec2 grid = abs(fract(g - 0.5) - 0.5) / fwidth(p);\n        fragColor.rgb += vec3(1.0 - min(min(grid.x, grid.y), 1.0));\n    }\n\n    // offset vector\n    if (texelFetch(iChannel1, ivec2(86,2), 0).x != 0.0) {\n        ivec2 g = cell(p, shifted);\n        vec2 c = cell2pix(vec2(g), shifted);\n        vec2 o = load_offset(g, scale);\n        fragColor.rgb *= 1.0 - line(c + vec2(0.5), c + o, p);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 screen_to_pos(vec2 p, vec3 resolution)\n{\n    return 5.4 * p / resolution.y + vec2(10.0);\n}\n\nivec2 cell(vec2 p, bool shifted)\n{\n    if (shifted) {\n        //if (fract(floor(p.x) * 0.5) == 0.5) return ivec2(p.x, p.y - 0.5);\n        if (fract(floor(p.y) * 0.5) == 0.5) return ivec2(p.x - 0.5, p.y);\n    }\n    return ivec2(p);\n}\n\nvec2 cell2pix(vec2 c, bool shifted)\n{\n    if (shifted) {\n        //if (fract(floor(c.x) * 0.5) == 0.5) return vec2(c.x, c.y + 0.5);\n        if (fract(floor(c.y) * 0.5) == 0.5) return vec2(c.x + 0.5, c.y);\n    }\n    return c;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/XlXcW4\nvec2 hash( vec2 v )\n{\n    uvec2 x = uvec2(v);\n    const uint k = 1103515245U;\n    x = ((x>>8U)^x.yx)*k;\n    x = ((x>>8U)^x.yx)*k;\n    x = ((x>>8U)^x.yx)*k;\n    \n    v = vec2(x)*(1.0/float(0xffffffffU));\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ofs = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n    \n    if (ivec2(fragCoord) == ivec2(0)) {\n        if (iFrame == 0 || texelFetch(iChannel1, ivec2(48,1), 0).x > 0.0) ofs.x = 1.0;\n        for (int i = 0; i < 10; i++) {\n            if (texelFetch(iChannel1, ivec2(49 + i,1), 0).x > 0.0) {\n                ofs.x = float(i + 1) / 10.0;\n                break;\n            }\n        }\n        fragColor = vec4(ofs.x);\n        return;\n    }\n\n    // set random offsets on start or if 'r' is pressed\n    if (iFrame == 0 || texelFetch(iChannel1, ivec2(82,1), 0).x > 0.) {\n        ofs = hash(fragCoord + vec2(iFrame) + vec2(30.0, 0.0));\n    } else {\n        if (iMouse.z > 0.0) {\n            // set the closest value\n            vec2 mouse = screen_to_pos(iMouse.xy, iResolution);\n            bool shifted = texelFetch(iChannel1, ivec2(72,2), 0).x > 0.0;\n            ivec2 g = cell(fragCoord, shifted);\n            if (cell(mouse, shifted) == g) {\n                ofs = mouse - cell2pix(vec2(g), shifted);\n            }\n        }\n    }\n\n    fragColor = vec4(ofs, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}