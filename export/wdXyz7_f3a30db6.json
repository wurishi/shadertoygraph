{"ver":"0.1","info":{"id":"wdXyz7","date":"1584393411","viewed":150,"name":"Deep Mandelbrot set snapshot","username":"rory618","description":"Trying to render a small portion of the mandelbrot set at an arbitrarily deep zoom level and iteration count.\nCurrently targeting the sentence \"six is six\" found by carykh at a depth of 1.9*10^81\nhttps://www.youtube.com/watch?v=Bv6Snj9czLs","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Python code to generate the coefficients\n\n/*\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nsc =  1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\nre = -1768010207885292485096455932501431452787808619665428630688176866932880890752608130523302708235225880005923084318330000000000\nim = -6549734413678931050066077600995564782557871706977125749218220354322280587594010179686199993596850414977125832770000000000\n\ndef mIter(r, i, c_re, c_im):\n    nr = ((r*r)-(i*i))//sc+c_re\n    ni = (2*r*i)//sc+c_im\n    return (nr, ni)\n\ndef mSample(os):\n    u = sc // 100000000000000000000000000000000000000000000000000000000000000000000000000000000000\n    reo = re + u * os[0]\n    imo = im + u * os[1]\n    r = 0\n    i = 0\n    N = 2900\n    #rk = np.zeros((2,N))\n    its = 0\n    for k in range(N):\n        r, i = mIter(r, i, reo, imo)\n\n        fr = r/sc\n        fi = i/sc\n        #rk[0,k] = fr\n        #rk[1,k] = fi\n        if ( (((r*r)+(i*i))//sc)/sc > 4. ):\n            return k\n    return (fr, fi)\n\n\noffsets = [[16*x-400,16*y-400] for x in range(50) for y in range(50)]\nx=np.array([mSample(os) for os in offsets])\ndata = x.reshape((50,50,2))[...,0] + x.reshape((50,50,2))[...,1]*1j\ndata_center = data[25,25]\ndata -= data_center\nydata = data[25,:]\nxaxis=(np.arange(50)-25)/25\ncoefs = np.polyfit(xaxis,ydata,16)\npolyfit = (np.power(xaxis.reshape((50,1)), np.arange(17).reshape((1,17)))*coefs[::-1]).sum(axis=-1)\nxaxis_cx = np.array([[[(x-25)-(y-25)*1j] for x in range(50)] for y in range(50)])/25\npolyfit_cx = (np.power(xaxis_cx.reshape((50,50,1)), np.arange(17).reshape((1,1,17)))*coefs[::-1]).sum(axis=-1)\nplt.plot(np.real(ydata))\nplt.plot(np.real(polyfit))\nplt.show()\nplt.imshow(np.log(np.abs(data)));plt.show()\nplt.imshow(np.log(np.abs(polyfit_cx)));plt.show()\n\n\nprint(data_center)\n[print(\"vec2(\"+str(np.real(c)) + \",\" + str(np.imag(c))+\"),\") for c in coefs]\n\n\n*/\n\n\nvec2 c = vec2(-1.7680102078852924, -0.006549734413678931);\nvec2 z_center_start = vec2(-1.745137460714392, 5.342842875921161e-06);\n\nvec2[] coefs = vec2[](\n\t   vec2(-4.283056027444665e-10,-7.148960471521885e-10),\nvec2(2.492899591470072e-13,-8.191077881903552e-14),\nvec2(-7.423929651835989e-10,-5.586147507015157e-11),\nvec2(-8.137467699773936e-13,2.673782887391839e-13),\nvec2(-1.8453154321635335e-10,2.3213797706158293e-10),\nvec2(1.054456457852924e-12,-3.4647048080723866e-13),\nvec2(1.959737745790168e-11,5.957586592943925e-11),\nvec2(-6.897713336051537e-13,2.2664367378176241e-13),\nvec2(4.810621610887565e-06,-5.92671585553072e-06),\nvec2(2.391899593907184e-13,-7.859273373949845e-14),\nvec2(-9.475787498902431e-07,-3.2774207967475432e-06),\nvec2(-4.206751535016167e-14,1.3822523701024451e-14),\nvec2(-5.416729239862756e-07,-1.8316405836739592e-07),\nvec2(3.2152639366090903e-15,-1.0564714321274122e-15),\nvec2(-3.423535374756122e-08,2.5340913185805886e-08),\nvec2(-6.983908156570175e-17,2.2947768063996074e-17)\n);\n\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = (I*2.-iResolution.xy)/iResolution.y*3.;\n\n    vec2 dz = vec2(0);\n    vec2 uvr = uv;\n    int i;\n    for(i = 15; i > 0; i--){\n        dz += mat2(uvr,-uvr.y,uvr.x) * (coefs[i]*vec2(1,-1));\n        uvr = mat2(uvr,-uvr.y,uvr.x) * uv;\n    }\n    O = vec4(sin(.1*abs(log(length(dz)))));\n    vec2 z = z_center_start;\n    for(i = 0; i < 150; i++){\n        vec2 zn = mat2(z,-z.y,z.x) * z + c;\n        vec2 dzn =  2.*mat2(z,-z.y,z.x)*dz + mat2(dz,-dz.y,dz.x)*dz;// + âˆ†0 //dont add delta z zero because it would be incredibly tiny\n        z = zn;\n        dz = dzn;\n        if(length(z+dz)>2.) break;\n    }\n    O = .5+.5*vec4(cos(.2*vec4(3,4,5,0)*log(float(i))));\n}","name":"Image","description":"","type":"image"}]}