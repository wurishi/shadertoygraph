{"ver":"0.1","info":{"id":"3lGyR3","date":"1611367735","viewed":243,"name":"3d-derivative-simplex-fbm","username":"phcs93","description":"derivative 3d simplex noise without cached permutation table","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","simplex","derivative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 fbm (vec3 v, int octaves) {\n\n    vec4 signal = vec4(0.0);\n    float factor = 0.0;    \n    float scale = 0.5;\n\n    for (int i = 0; i < octaves; i++){\n        vec4 s = noise(v) * 0.5 + 0.5; // map from -1...1 to 0...1\n        signal += s * scale;\n        factor += scale;\n        v *= 2.0;\n        scale *= 0.5;\n    }\n\n    return signal / factor;\n\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = uv.x;\n    float y = uv.y;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 7.5;\n    \n    // mobile? \n    bool m = iResolution.x < iResolution.y;\n    \n    vec4 n = vec4(0.0);\n\n    if ((m ? y : x) < 0.5) {\n        n = fbm(vec3(uv.x, uv.y, iTime), 1);\n    } else {\n        n = fbm(vec3(uv.x, uv.y, iTime), 8);\n    }\n    \n    if ((m ? x : y) > 0.5) {            \n        fragColor = vec4(vec3(n.w),1.0);      \n    } else {\n        fragColor = vec4(n.xyz,1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// original -> https://www.shadertoy.com/view/Ws23RD\n\nfloat sixth = 0.1666666666666667;\nfloat third = 0.3333333333333333;\n\nvec4 permute (vec4 v) { return mod((v * 34.0 + 1.0) * v, 289.0); }\nvec4 taylor (vec4 v) { return 1.79284291400159 - v * 0.85373472095314; }\n\nvec4 noise (vec3 v) {\n\n    vec3 i  = floor(v + dot(v, vec3(third)));\n    vec3 p1 = v - i + dot(i, vec3(sixth));\n\n    vec3 g = step(p1.yzx, p1.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 p2 = p1 - i1 + sixth;\n    vec3 p3 = p1 - i2 + third;\n    vec3 p4 = p1 - 0.5;\n    \n    vec4 ix = i.x + vec4(0.0, i1.x, i2.x, 1.0);\n    vec4 iy = i.y + vec4(0.0, i1.y, i2.y, 1.0);\n    vec4 iz = i.z + vec4(0.0, i1.z, i2.z, 1.0);\n\n    vec4 p = permute(permute(permute(iz)+iy)+ix);\n\n    vec4 r = mod(p, 49.0);\n\n    vec4 x_ = floor(r / 7.0);\n    vec4 y_ = floor(r - 7.0 * x_); \n\n    vec4 x = (x_ * 2.0 + 0.5) / 7.0 - 1.0;\n    vec4 y = (y_ * 2.0 + 0.5) / 7.0 - 1.0;\n\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 g1 = vec3(a0.xy, h.x);\n    vec3 g2 = vec3(a0.zw, h.y);\n    vec3 g3 = vec3(a1.xy, h.z);\n    vec3 g4 = vec3(a1.zw, h.w);\n\n    vec4 n = taylor(vec4(dot(g1,g1),dot(g2,g2),dot(g3,g3),dot(g4,g4)));    \n\n    vec3 n1 = g1 * n.x;\n    vec3 n2 = g2 * n.y;\n    vec3 n3 = g3 * n.z;\n    vec3 n4 = g4 * n.w;\n\n    vec4 m = vec4(dot(p1,p1),dot(p2,p2),dot(p3,p3),dot(p4,p4));\n    \n    vec4 m1 = max(0.6 - m, 0.0);\n    vec4 m2 = m1 * m1;\n    vec4 m3 = m2 * m1;\n    vec4 m4 = m2 * m2;\n    \n    vec3 q1 = -6.0 * m3.x * p1 * dot(p1, n1) + m4.x * n1;\n    vec3 q2 = -6.0 * m3.y * p2 * dot(p2, n2) + m4.y * n2;\n    vec3 q3 = -6.0 * m3.z * p3 * dot(p3, n3) + m4.z * n3;\n    vec3 q4 = -6.0 * m3.w * p4 * dot(p4, n4) + m4.w * n4;\n     \n    vec3 q = q1+q2+q3+q4;\n    \n    vec4 t = vec4(dot(p1,n1),dot(p2,n2),dot(p3,n3),dot(p4,n4));\n    \n    return (42.0 * vec4(q, dot(m4, t)));\n    \n}","name":"Common","description":"","type":"common"}]}