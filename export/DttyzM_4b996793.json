{"ver":"0.1","info":{"id":"DttyzM","date":"1699014307","viewed":75,"name":"Remix: Heliostasis + audio viz","username":"MV10","description":"Mixed in a PCM waveform in BufferA (because FFT gets all the love here). I use it with mic-in loopback audio. ","likes":7,"published":1,"flags":96,"usePreview":0,"tags":["sound","visualization","diffusion","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fork of \"[sound] Heliostasis\" by jeyko. https://shadertoy.com/view/wssyDX\n\n// Added PCM wave in BufferA iChannel1 based on mic-in.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = (sin(fragColor*5. + vec4(-3.4,0.1,-0.2,0.4) + sin(iTime)*0.1));\n    fragColor = smoothstep(0.,0.7,fragColor );\n    \n    fragColor *= 1. - dot(uv,uv)*0.7;\n    fragColor = max(fragColor, 0.);\n    fragColor = pow(fragColor, vec4(0.45454));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dtGz2","filepath":"https://soundcloud.com/ez-rollers/ez-rollers-the-lady-roller","previewfilepath":"https://soundcloud.com/ez-rollers/ez-rollers-the-lady-roller","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define THICKNESS 0.02\n\nvec2 noise(vec2 id){\n    float r = fract(sin(id.y*21422.125)*31455.31531);\n    float rb = fract(sin(id.x*21422.125)*31455.31531);\n    return vec2(r, rb);\n}\n\nvec3 get( vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0);\n\n    #define pal(a,b,c,d,e) ((a) + (b)*sin((c)*(d) + (e)))\n    \n    vec2 id = floor(uv*1000.);\n    vec2 n = noise(vec2(id.x + iTime*0.00001,id.y - iTime*0.000000));\n    col += pal(-0., 5., vec3(4.8,2.9,9.3), 4. + sin(id.x *20.) + sin(n.y*2000.),0.9 + id.y*20.4 + n.x*20. + iTime);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 cuv = fragCoord/iResolution.xy;   \n    \n    vec3 col = vec3(0);\n    \n    vec3 g = get(fragCoord);\n  \n    vec2 nc = fragCoord/iResolution.xy - 0.*(0. + length(uv)*2.)*normalize(uv)/iResolution.xy*iTimeDelta;\n\t    \n\tvec2 st = 30./iResolution.xy;\n    \n    vec2 lc = nc;\n    vec4 u = texture(iChannel1, lc + vec2(0,st.y) );\n    vec4 d = texture(iChannel1, lc + vec2(0,-st.y) );\n    vec4 l = texture(iChannel1, lc + vec2(-st.x,0) );\n    vec4 r = texture(iChannel1, lc + vec2(st.x,0) );\n    \n    vec2 grb = (vec2( r.b - l.b, u.b - d.b));\n    vec2 gr = normalize(vec2( r.r - l.r, u.r - d.r));\n\n    #define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n    \n    gr *= rot(3.14/4.);\n    grb *= rot(3.14/8./8.);\n    \n    nc += grb*st*2.9;\n    \n    if(iFrame > 0)\n    \tcol = mix(g, texture(iChannel1,nc).xyz, 0.999);\n\n    if(iFrame == 0)\n        col = vec3(0);\n    \n    fragColor = vec4(col,1.0);\n    \n    // Overlay PCM sound wave\n    float pcm = texture(iChannel0, vec2(cuv.x, 0.75)).x;\n    float strength = 0.55; // soundcloud looks better cut, but mic-in needs a big boost like 3.0\n    pcm = (pcm - 0.5) * strength;  // shift down so sine centerline is 0.0, boost the peaks/dips\n    float offset = sin(iTime * 0.3) * 0.5;\n    pcm = pcm + 0.5 + offset; // shift back to middle and cycle vertically by time sine\n    float py = smoothstep(cuv.y - THICKNESS, cuv.y, pcm) - smoothstep(cuv.y, cuv.y + THICKNESS, pcm);\n    if(py > 0.0) \n    {\n        vec3 pc = vec3(py);\n        fragColor = vec4(mix(col, pc, py), 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}