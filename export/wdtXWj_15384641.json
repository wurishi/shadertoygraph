{"ver":"0.1","info":{"id":"wdtXWj","date":"1572922954","viewed":535,"name":"rotation matrices","username":"Veggiebob","description":"Experimenting with rotations and matrices. essentially equivalent to using a rotate function for 2 variables, but it's all contained in a matrix.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["mouse","cubemap","matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    float aspect = iResolution.y / iResolution.x;\n    uv.x /= aspect;\n\tvec2 mouse = iMouse.xy/iResolution.xy - 0.5;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    float ztheta = -mouse.y * 3.14159;\n    float xtheta = mouse.x * 3.14159;\n    mat3 zrot = mat3(\n        vec3(cos(ztheta), sin(ztheta), 0.),\n        vec3(-sin(ztheta), cos(ztheta), 0.),\n        vec3(0., 0., 1.)\n    );\n    mat3 xrot = mat3(\n        vec3(cos(xtheta), 0., -sin(xtheta)),\n        vec3(0., 1., 0.),\n        vec3(sin(xtheta), 0., cos(xtheta))\n    );\n    \n    vec3 shift = vec3(\n        cos(uv.x),\n        sin(uv.y),\n        sin(uv.x)\n    );\n    \n    vec3 look = normalize(xrot * zrot * shift);\n    col = texture(iChannel0, look).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}