{"ver":"0.1","info":{"id":"fsByDG","date":"1644430734","viewed":193,"name":"2001 Stargate","username":"peremoya2000","description":"Inspired by the 2001: Space Odissey movie by Kubrick. It is not intended to be an exact recreation.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","space","odissey"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nfloat fovzoom = .4;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Create UVs (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float rot = smoothstep(-.006,.006,sin(.1*iTime+4.))*PI*.5;\n    uv=rotate(uv,rot);\n    \n    //Calculate render parameters\n    vec3 camPos = vec3(cos(7.*sin(iTime*.76)+39.*iTime)*.02*(sin(iTime*.7)*.4+.6),sin(7.*sin(iTime*.39)+iTime*.67)*.17,-1.),\n    f = normalize(-camPos),\n    u = vec3(0,1,0),\n    r = cross(f,u),\n    sCenter = camPos+f*fovzoom,\n    screenPoint = sCenter + uv.x * r + uv.y * u,\n    rayDir = normalize(screenPoint-camPos);\n    \n    //Raymarch\n    vec3 ray;\n    float rayL, rayStep;   \n    for (int i=0; i<250; ++i){\n        ray = camPos + rayDir * rayL;\n        rayStep = min(\n        abs(ray.x-1.),\n        abs(ray.x+1.));\n        if(rayStep<.001) break;\n        rayL += rayStep;\n    }\n    \n    //Calculate wall UVs\n    vec3 col = .6+.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 oUV = vec2(0);\n    vec3 mask;\n    if(rayStep<.001){\n        //Ray hit wall\n        oUV.x = ray.z;\n        oUV.y = ray.y+step(ray.x,0.)*33.1;\n        oUV.x+=iTime*8.;\n        vec3 wallCol=vec3(.5+.5*sin(oUV.y*9.+5.*cos(.2*iTime)*2.)*\n        .5+.5*sin(oUV.y*9.+19.*sin(.1*iTime)*2.)*\n        .4+.4*(sin(oUV.x*2.5+noise(oUV)*2.)));\n        wallCol*=wallCol;\n        wallCol=mix(vec3(noise(oUV*2.2)),wallCol, .5+.5*sin(.223*iTime));\n        wallCol*=col*min(6.*abs(uv.x),1.);\n        col=mix(col, wallCol,\n            min(7.*abs(uv.x),1.));\n    } \n      \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rotate(in vec2 uv, float r){\n    float s=sin(r);\n    float c=cos(r);\n    return uv*mat2(c,-s,s,c);\n}\n\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\nfloat noise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}","name":"Common","description":"","type":"common"}]}