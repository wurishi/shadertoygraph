{"ver":"0.1","info":{"id":"wld3zs","date":"1577604667","viewed":129,"name":"Training 08 (Copo)","username":"coposuke","description":"Training.\nreference http://glslsandbox.com/e#41999.0.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["training"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI    3.14159265357989\n#define PI_2  1.57079632678994\n\nfloat rope(float dist, float angle, float time, float twist, float thickness)\n{\n    //http://glslsandbox.com/e#41999.0\n    vec4 s = thickness * cos(vec4(0,1,2,3) * PI_2 + time + twist);\n    vec4 e = s.yzwx;\n    vec4 f = max(dist - s, e - dist);\n    return -dot(clamp(f * 500.0, 0.0, 1.0), (s - e) / thickness);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(0);\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.x);\n    vec2 uvBackup = uv;\n    \n    const int DEPTH = 8;\n    for(int i=1 ; i<=DEPTH ; ++i)\n    {\n        float SIZE = 0.43 - 0.065 * float(i);\n        float THICKNESS = 0.045 - 0.0055 * float(i);\n\t    float TWIST = 6.0 + 6.0 * float(i);\n\t    float angle, dist;\n        \n        uv += (i != 1 ? 0.5 / float(i) : 1.0);\n\n        // horizone\n        angle = uv.x;\n        dist = mod(uv.y, SIZE) - SIZE * 0.5;\n        float idH = abs(floor(uv.y / SIZE)) + 1.0;\n        float whichH = cos(idH * PI); // -1 or 1\n\n        vec4 ropeH = rope(dist, angle, iTime * whichH, angle * TWIST, THICKNESS) * vec4(0.5);\n\n        // vertical\n        angle = uv.y;\n        dist = mod(uv.x, SIZE) - SIZE * 0.5;\n        float idV = abs(floor(uv.x / SIZE)) + 1.0;\n        float whichV = cos(idV * PI); // -1 or 1\n\n        vec4 ropeV = rope(dist, angle, iTime * whichV, angle * TWIST, THICKNESS) * vec4(0.5);\n\n        // mix\n        float alpha = ropeH.a;\n        float priority = 0.0;\n        priority += clamp(whichH * whichV * step(0.01, ropeV.a), 0.0, 1.0);\n        priority += clamp(whichH * -whichV * step(ropeH.z, 0.01), 0.0, 1.0);\n        priority = clamp(priority, 0.0, 1.0);\n\n        vec4 sH = cos(vec4(0,1,2,3) * PI_2 + uv.y * 50.0 + iTime);\n        sH = sH * 0.05 + 1.7;\n        sH.a = 1.0;\n        \n        vec4 sV = cos(vec4(0,1,2,3) * PI_2 + uv.x * 50.0 + iTime);\n        sV = sV * 0.05 + 1.7;\n        sV.a = 1.0;\n        \n        vec4 color = vec4(0);\n        color = mix(ropeH * sH, ropeV * sV, priority);\n        color *= 1.0 - float(i) / float(DEPTH);\n\n\t\tfragColor = mix(color, fragColor, step(0.01, fragColor.a));\n    }\n\n    vec4 s = cos(vec4(0,1,2,3) * PI_2 + atan(uvBackup.y, uvBackup.x) + iTime);\n    vec4 f = max(length(uvBackup) - s, s.yzwx - length(uvBackup));\n    float bg = step(length(fragColor.rgb), 0.1);\n    fragColor += (1.0 - bg) * f * 0.05;\n    fragColor += bg * vec4(0);\n}\n","name":"Image","description":"","type":"image"}]}