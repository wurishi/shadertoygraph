{"ver":"0.1","info":{"id":"Xl3cR4","date":"1531660365","viewed":240,"name":"Julia improved","username":"darkeclipz","description":"Improved julia fractal with smooth iteration count. Move the mouse somewhere around the center to draw the different sets.\n\nSome zoomed in screenshots: https://imgur.com/a/wySOppU, sadly they are compressed too much.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Palette\n\nstruct palette {\n    vec3 c0, c1, c2, c3, c4;\n};\n\npalette palette_blue() {\n    palette p; \n    p.c0 = vec3(0,2,5)/255.;\n    p.c1 = vec3(8,45,58)/255.;\n    p.c2 = vec3(38,116,145)/255.;\n    p.c3 = vec3(167,184,181)/255.;\n    p.c4 = vec3(207,197,188)/255.;\n    return p;    \n}\n\n// Random\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 1.5;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nfloat randSeed = 0.;\nvec2 nextRand2() {\n    vec2 v = vec2( randSeed++, randSeed++ );\n\treturn vec2( random( v+0.34 ), random( v+0.75 ) );    \n}\n\n// Mapping\n\nvec3 cmap( float t, palette p ) {\n    vec3 col = vec3(0);\n    col = mix( p.c0,  p.c1, smoothstep(0. , .2, t));\n    col = mix( col, p.c2, smoothstep(.2, .4 , t));\n    col = mix( col, p.c3, smoothstep(.4 , .6, t));\n    col = mix( col, p.c4, smoothstep(.6,  .8, t));\n    col = mix( col, vec3(0), smoothstep(.8, 1.,  t));\n    return col;\n}\n\n#define MAX_ITER 128.\n#define THRESHOLD 16.\nfloat julia(vec2 uv) {\n    \n    vec2 R = iResolution.xy;\n    \n    vec2 c = iMouse.x + iMouse.y == 0. \n        ? vec2(0.355) \n        : (2.*iMouse.xy-R)/R.y;\n    \n    vec2 z = 2.5*uv; \n    float i = 0.;\n    \n    for(; ++i <= MAX_ITER ;) {\n        z = mat2(z, -z.y, z.x) * z + c;\n    \tif( dot(z,z) > THRESHOLD ) break;\n\t}\n  \n    return i - log(log(dot(z,z))/log(2.))/log(2.);\t\t    \n}\n\n// Main\n\n#define SAMPLES 8.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 R = iResolution.xy;\n    vec3 col = vec3(0);\n    palette pal = palette_blue();\n    \n    for(float i=0.; i < SAMPLES; i++) {\n        vec2 p = 0.5*(2.*fragCoord-R+nextRand2())/R.y ;\n        float orbit = julia(p) / MAX_ITER;\n    \tcol += cmap( fract(2.*orbit)-0.01 , pal ); \n    }\n    \n    col /= SAMPLES;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}