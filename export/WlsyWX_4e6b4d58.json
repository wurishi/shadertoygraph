{"ver":"0.1","info":{"id":"WlsyWX","date":"1593275804","viewed":139,"name":"Blackhole lol","username":"OfficeBatman","description":" ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RING_COLOR vec3(1.,0.3,0.01)\n#define BH_COLOR vec3(0)\n#define RING_R 4.\n#define RING_R2 .9\n#define G 0.2\n#define RES_SCALER 500\n//#define USE_TIME\n\nstruct hit {\n    bool hit;\n    float totalDis;\n    int totalIter;\n    float ringMin;\n    vec3 dir;\n    vec3 p;\n};\n    \nfloat angle(vec2 p) {\n\treturn sign(p.x)*acos(dot(normalize(p), vec2(0,1)));        \n}\n    \n//\tp between -10. 10.\nfloat noise (vec2 p){\n    //\tiChannel 1 is used of smooth noise\n\treturn texture(iChannel1, (p+10.)/20.).x;\n}\n    \nmat2 rotate(float a) {\n \tfloat s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat noise(vec3 p) {\n\treturn (noise(p.xy) + noise(p.yz) + noise(p.zx) + noise(p.yx) + noise(p.zy) + noise(p.xz))/6.;\n}\n\nfloat sdfBH(vec3 p) {\n\treturn length(p) - 1.;\n}\n\nfloat sdfRing(vec3 p) {\n    float yy = p.y*sign(p.y) - 0.02;\n    float dMinusR = max(sqrt(p.x*p.x + p.z*p.z) - RING_R, 0.);\n    float d1 = sqrt(dMinusR*dMinusR + yy*yy);\n    \n    vec3 p2 = p;\n    p2.xz *= rotate(iTime*.3 + angle(p2.xz));\n    p2.xz /= 1.;\n    float d2 = -(noise(p2)-.5);\n    \n    float d = max(d1, d2);\n    \n    float l = length(p.xz);\n    if (RING_R < l && l < RING_R + RING_R2) {\n        vec3 p3 = p;\n        p3.xz *= rotate(iTime*3.-abs(p.y));\n        float k = (l - RING_R) / RING_R2;\n        d = mix(d, min(d, noise(p3)*abs(p3.y)*2.), 1.-k);\n    }\n    \n    return d + 0.1*sdfBH(p);\n}\n\nhit raymarch(vec3 ro, vec3 rd, int maxIter, float surfDis, float maxDis, float spaceScaler) {\n    hit ret = hit(false, 0., 0, sdfRing(ro), rd, ro);\n    for (ret.totalIter = 0; ret.totalIter < maxIter; ret.totalIter++) {\n        float dRing = sdfRing(ret.p);\n        float dBH = sdfBH(ret.p);\n        float delta = min(dRing, dBH)*spaceScaler;\n        \n        ret.ringMin = max(min(ret.ringMin, dRing), 0.);\n        \n        if (dBH < surfDis) {\n         \tret.hit = true;\n            return ret;\n        }\n        if (ret.totalDis > maxDis) {\n         \tret.hit = false;\n            return ret;\n        }\n        \n        ret.dir = normalize(mix(ret.dir, -normalize(ret.p), G/(dBH + 1.)*delta));\n        ret.totalDis += delta;\n        ret.p += ret.dir * delta;\n    }\n    return ret;\n}\n    \nvec3 getRayDir(vec3 forward, vec2 uv) {\n    const float K = 1.;\n \tforward = normalize(forward);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward + right*uv.x*K + up*uv.y*K);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.xx;\n    vec2 m = 2.*iMouse.xy/iResolution.xy - 1.;\n    #ifdef USE_TIME\n    m = vec2(smoothstep(-1.,1.,cos(iTime*0.22))*0.7-0.2, (sin(iTime*0.56)*0.5+0.5)*0.7);\n    #endif\n\n    vec3 ro = vec3(0., 1.4, -14. + sign(m.x)*pow(abs(m.x), 1.2)*10.);\n    ro.yz *= rotate(m.y*3.14/3.);\n    vec3 rd = getRayDir(-ro, uv);\n    hit h = raymarch(ro, rd, 200, 0.1, 50., .1);\n    vec3 col = h.hit ? BH_COLOR : texture(iChannel0, h.dir).rgb*0.1;\n    col += RING_COLOR * exp(-3.*h.ringMin);\n    col /= h.ringMin;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}