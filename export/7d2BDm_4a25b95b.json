{"ver":"0.1","info":{"id":"7d2BDm","date":"1646549116","viewed":88,"name":"Fork Julia Frac Naitronbom 818","username":"Naitronbomb","description":"Julia fractal with mouse pos as value of C\nincludes mandelbrot","likes":0,"published":1,"flags":16,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"7d2BWW","parentname":"Julia Fractal - Naitronbomb"},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float iterations = 500.0;\nconst float color = 3.0;\n\nvec2 fractal(vec2 z1,vec2 c1) {\n    return cm(z1,z1)+c1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float toggle = texelFetch( iChannel0, ivec2(32,2), 0 ).x;\n    \n    // Normalized pixel coordinates (from -4 to 4)\n    vec2 pos = 4.0 * (iMouse.xy - iResolution.xy / 2.0)/min(iResolution.x,iResolution.y);\n    pos = vec2(pos.x,-pos.y);\n   \n    vec2 c = 4.0 * (fragCoord - iResolution.xy / 2.0)/min(iResolution.x,iResolution.y);\n    c = vec2(c.x,-c.y);\n\n    vec2 z = vec2(0.0,0.0);\n    \n    float iter = iterations;\n    float col1;\n    if (toggle > 0.0) {\n        for (float i = 0.0; i < iterations; i++) {\n            z = fractal(z,c);\n            if (sqrt(z.x*z.x + z.y*z.y) > 2.0) {\n                iter = i;\n                break;\n            }\n        }\n        col1 = pow(iter/iterations,1.0/color);\n    } else {\n        col1 = 0.0;\n    }\n    \n    z = c;\n   \n    iter = iterations;\n    for (float i = 0.0; i < iterations; i++) {\n        z = fractal(z,pos);\n        if (sqrt(z.x*z.x + z.y*z.y) > 2.0) {\n            iter = i;\n            break;\n        }\n    }\n    \n    float col2 = pow(iter/iterations,1.0/color);\n\n    // Output to screen\n    fragColor = vec4(col1,col1,col1,1.0);\n    \n    fragColor = vec4(col1 - col2/4.0,max(col2,col1),col1 - col2/4.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 cm(vec2 a, vec2 b) {\n    return vec2(a.x*b.x-a.y*b.y,a.y*b.x+a.x*b.y);\n}\n\nfloat mag(vec2 vector) {\n    return sqrt(vector.x*vector.x+vector.y*vector.y);\n}\n\nvec2 cpow2(vec2 z1, float n) {\n    float angle = atan(z1.y,z1.x);\n    return pow(mag(z1),n)*vec2(cos(n*angle),sin(n*angle));\n}","name":"Common","description":"","type":"common"}]}