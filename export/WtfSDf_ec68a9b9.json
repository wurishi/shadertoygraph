{"ver":"0.1","info":{"id":"WtfSDf","date":"1564436086","viewed":587,"name":"[twitch] Inside Broken Space","username":"NuSan","description":"Shader coded live on twitch (https://www.twitch.tv/nusan_fx)\nThe shader was made using Bonzomatic.\nYou can find the original shader here: http://lezanu.fr/LiveCode/InsideBrokenSpace.glsl","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","translucency","xray","mist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nShader coded live on twitch (https://www.twitch.tv/nusan_fx)\nThe shader was made using Bonzomatic.\nYou can find the original shader here: http://lezanu.fr/LiveCode/InsideBrokenSpace.glsl\n*/\n\nfloat time = 0.0;\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);  \n}\n\n#define rep(p,s) (fract(p/s+0.5)-0.5)*s\n\nfloat rnd(float t) {\n  return fract(sin(t*784.685)*827.542);\n}\n\nfloat curve(float t, float d, float p) {\n  float g=t/d;\n  return mix(rnd(floor(g)), rnd(floor(g)+1.0), pow(smoothstep(0.0,1.0,fract(g)), p));\n}\n\nvec3 kifs(vec3 p, float t, float t2) {\n  \n  float s=3.0;\n  for(float i=0.0; i<5.0; ++i) {\n    float t2 = t + i*3.0 + curve(t2, 0.8, 2.0) * 1.5;\n    p.xy *= rot(t2);\n    p.yz *= rot(t2*1.2);\n    p=abs(p);\n    p-=s;\n    s*=0.6;\n  }\n    \n  return p;\n}\n\nfloat smin(float a, float b, float h) {\n  float k=clamp((a-b)/h*0.5+0.5,0.0,1.0);\n  return mix(a,b,k) - k * (1.0-k ) * h;\n}\n\nfloat map(vec3 p) {\n  \n  p = rep(p, 80.0);\n  \n  float t=time*0.3 + 95.0;\n  \n  vec3 p1 = kifs(p, t * 0.1, t);\n  vec3 p2 = kifs(p+vec3(2,0,0), t * 0.13+37.241, t);\n  vec3 p3 = kifs(p+vec3(0,2,0), t * 0.17+27.74, t);\n  \n  float d1 = box(p1, vec3(5,3,7));\n  float d2 = min(box(p2, vec3(5,10,2)), length(p2.xy)-1.0);\n  float d3 = box(p3, vec3(5,2,3));\n  \n  \n  d1 = abs(d1-9.0)-12.0;\n  d1 = abs(d1)-1.5;\n  \n  d2 = abs(d2-8.0)-12.0;\n  d2 = abs(d2)-2.0;\n  \n  \n  //float d = length(vec2(d1,d2))-1.0;\n  float d4 = max(abs(d1)-0.2,abs(d2)-0.7);\n  float d5 = max(abs(d2)-0.2,abs(d3)-0.6);\n  \n  vec3 p4 = rep(p2, 1.0);\n  float d6 = box(p4, vec3(0.4));\n  \n  float h=sin(p.x*0.1)*0.5 + sin(p.y*0.3)*0.7 + sin(p.z*0.7);\n  \n  /*\n  d4 -= min(0,d6*h*0.7);\n  d5 += d6*h*0.6;\n  */\n  float d7 = max(d4, d5)-0.1;\n  d4 = smin(d4, d6*h*2.0, -0.5);\n  d5 = smin(d5, -d6*h*1.0-0.5, -1.5);\n  d5 = min(d5, d7);\n    \n  //d = min(d,d1+0.5);\n  //d = min(d,d2+0.5);\n  \n  float d = min(d4, d5);\n  //d *= 0.6;\n  return d;\n}\n\nvoid cam(inout vec3 p) {\n  float t=time*0.1 + curve(time, 3.7, 10.0)*5.0;\n  float t2=time*0.17 + curve(time, 2.7, 10.0)*3.0;\n  p.xz *= rot(t);\n  p.xy *= rot(t2);\n  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  time = mod(iTime * 0.6, 500.0) + 16.4;\n    \n  vec3 s=vec3((curve(time, 4.7, 10.0)-0.5)*20.0,(curve(time, 7.2, 10.0)-0.5)*10.0,-30.0);\n  vec3 r=normalize(vec3(-uv, 0.8 + 0.7 * curve(time, 1.2, 10.0)));\n  \n  cam(s);\n  cam(r);\n  \n  vec3 p=s;\n  float at = 0.0;\n  float dd = 0.0;\n  float alpha = 1.0;\n  for(int i=0; i<150; ++i) {\n    float sd=map(p);\n    float d = abs(sd);\n    if(sd<0.001) alpha *= 0.92;\n    \n    if(d<0.001) {\n      d = 0.01;\n      //break;\n    }\n    if(dd>150.0) break;\n    \n    p += r * d;\n    dd += d;\n    \n    at += (1.5/(1.8+d)) * 30.0 / (50.0+dd);\n   \n  }\n    \n  vec3 col=vec3(0);\n  //col += pow(max(0,1-i/150.0),5);\n  \n  vec3 atmo = mix(vec3(1, 0.7, 0.3), vec3(0.2, 1.0, 0.6), pow(abs(r.x),3.0));\n  atmo = mix(atmo, vec3(0.5, 0.7, 1.4)*3.0, pow(abs(r.y),7.0));\n  \n  col += pow(at * 0.03,1.3) * atmo;// * pow(alpha,0.2);\n  col += alpha * atmo * 0.2;\n  \n  col *= 1.2-length(uv);\n  \n  //col = 1-exp(-col*2);\n  //col = pow(col, vec3(1.3));\n  \n  #if 1\n  float t3 = time*0.3 - length(uv)*0.2;\n  col.xy *= rot(t3);\n  col.xz *= rot(t3*0.7);\n  col=abs(col);\n  \n  col+=max(vec3(0),col.yzx-1.0);\n  col+=max(vec3(0),col.zxy-1.0);\n  #endif\n  \n  \n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}