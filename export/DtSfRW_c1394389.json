{"ver":"0.1","info":{"id":"DtSfRW","date":"1693792410","viewed":17,"name":"D-algorithm","username":"DJX","description":"Test_algorithm","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["algorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 点到线距离算法  公式为 ((A*x0 + B*y0 + C) / √(A*A+B*B) )的绝对值\nfloat distance_p2c(float a, float b, float c, vec2 p0){\n    return abs(a*p0.x + b*p0.y +c)/sqrt(pow(a, 2.0) + pow(b, 2.0));\n}\nvec3 p2c(vec2 uv, vec2 center, float thickness)\n{\n    vec3 line_p2c;\n    float d = distance_p2c(1.0, 1.0, -1.0, uv);\n    \n    if(d <= thickness)\n    {\n        line_p2c = vec3(1.0);\n    }\n        else\n        {\n            line_p2c = vec3(0.0);\n        }\n        \n    return line_p2c;\n\n}\n\n//   线\nvec3 draw_line(vec2 uv, vec2 center, float thickness)\n{\n    vec3 line;\n    \n    if(abs(uv.y - 0.5) <= thickness)\n    {\n        line = vec3(1.0);\n    }\n        else\n        {\n            line = vec3(0.0);\n        }\n        \n    return line;    \n}\n\n\n\n//   正方形\nvec3 draw_square(vec2 uv, vec2 center, float size)\n{\n    vec3 square;\n    if(uv.x <= 0.7 && uv.x >= 0.3 && uv.y <= 0.7 && uv.y >= 0.3)\n    {\n        square = vec3(1.0);\n    }\n    else\n    {\n        square = vec3(0.0);\n    }    \n    \n    vec3 square_x = (size - abs(vec3(uv.x - center.x))) * 1.0/size;\n    vec3 square_y = (size - abs(vec3(uv.y - center.y))) * 1.0/size;\n    vec3 square_03 = min(square_x , square_y);\n    \n    return  square_03;\n}\n\n//三角形  y=k*x+j  \nvec3 draw_block(vec2 uv, float k, float j){\n    vec2 reference_point = vec2(0.5f, k*0.5+j);\n    vec2 uv2ref = uv - reference_point;\n    vec2 reference_direction = vec2(1.0, -1.0/k);\n    float diff = dot(uv2ref, reference_direction);\n    if (diff >= 0.0) return vec3(1.0);\n    else return vec3(0.0);\n\n}\n\n\n\n\n//  main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 blach = vec3(0, 0, 0);\n    vec3 white = vec3(1);\n    vec3 mid_grey = vec3(vec2(0.5, 0.5), 0.5);\n    vec3 some_coor;\n    some_coor = vec3(-1.0)+0.5;\n    some_coor = vec3(0.0)+0.5;\n    some_coor = vec3(1.0);\n    \n    vec3 red = vec3(1.0, 0.0, 1.0);\n    vec3 green = vec3(0.0, 1.0, 0.0);\n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    \n    vec3 yellow = red + green;\n    \n    vec3 gradiant = 20.0 * uv.xxx;\n     \n    vec3 wave = vec3(sin(20.0*uv.x))*0.5 + 0.5;\n    \n    //  disc\n    vec3 disc;\n    \n   /*\n    if(distance(uv, vec2(0.5))<=0.3)\n    {\n        disc = vec3(1.0);\n    }\n    else\n    {\n        disc = vec3(0.0);\n    }\n    */\n    \n    disc.b = max(3.33*(0.3 - distance(uv, vec2(0.5))), 0.0);\n    disc.b = pow(disc.b, 1.0);\n    disc.r = disc.g = disc.b;\n    \n\n// 正方形\n    vec3 square = draw_square(uv, vec2(0.6), 0.2);\n    \n//线        \n    vec3 line = draw_line(uv, vec2(0.5), 0.01);\n    \n//点到线    \n    vec3 line_p2c = p2c(uv, vec2(0.5), 0.01);\n\n//三角形\n    vec3 block_01 = draw_block(uv,2.0, 0.0);\n    vec3 block_02 = 1. - draw_block(uv,-2.0, 2.0);\n    vec3 block_03 = 1. - draw_block(uv,0.0, 0.1);\n    vec3 triangle = block_01 * block_02 * block_03;\n    \n    vec3 mixed_color = mix(red, green, uv.x);\n\n    // Output to screen\n    fragColor = vec4(triangle*mixed_color,1.0);\n}","name":"Image","description":"","type":"image"}]}