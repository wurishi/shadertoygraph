{"ver":"0.1","info":{"id":"7ljcRD","date":"1649318300","viewed":83,"name":"TP5&6 : Modélisation de scène","username":"p2001044","description":"Texture procédurale","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 900;      // Number of steps\n\n// Lipschitz constant\nconst float K=1.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v;\n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\n    vec3 c;\n    float s;\n};\n\n//-----------------------------------------------------------------------------------------------\n\n//Fbm\nfloat fbm (vec2 p, float l, float a, int o) {\n    float t = 0.0;\n    for (int i=0; i<o; i++) {\n        t += a*Noise(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n}\n//Ridge\nfloat Ridge (vec2 p) {\n    float n = Noise(p);\n    return 1.0-2.0*abs(n);\n}\n//Heterfbmridge\nfloat heterfbmridge (vec2 p, float l, float a, int o, float amin, float amax) {\n    float t = a * Ridge(p/l);\n    for (int i=1; i<o; i++) {\n        a *= 0.5;\n        l *= 0.5;\n        float att = smoothstep (amin,amax,t);\n        t += att * a * Ridge(p/l);\n    }\n    return t;\n}\n//Plateau\nfloat Plateau (float h, float e, float a) {\n    if ((h<e) || (h>e+a)) {\n        return h;\n    }\n    float u = h-e/(e+a)-e;\n    float c = u*u;\n    h = e+a*c;\n    return h;\n}\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n    return heterfbmridge(p,80.0,60.0,10,2.0,10.0);\n}\n\n// Implicit surface defining the terrain\n// p : Point\nV ImplicitTerrain(in vec3 p, int index)\n{\n    float z = Terrain( p.xy );\n    float h = (p.z - z)/8.;\n    return V (h, index);\n}\n\n// Water -------------------------------------------------------------------------------------------------\n\nfloat Water(in vec2 x)\n{\n    return 20.0*Noise(x/50.0+iTime)- 20.0;\n}\n\nV ImplicitWater(in vec3 p, int index)\n{\n    float h = p.z - Water( p.xy );\n    return V (h, index);\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere\n// p : Point\n// c : Center\n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Sphere avec struct V\nV Sphere(vec3 p, vec3 c, float r, int index)\n{\n  return V (length (p-c)-r, index);\n}\n\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Intersection struct V\nV Intersection(V a, V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v, a.i);\n    }\n    else\n    {\n        return V(b.v, a.i);\n    }\n}\n\n// Union\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n// Union struct V\nV Union(V a,V b)\n{\n    if (a.v < b.v)\n        return V(a.v, a.i);\n    else\n    {\n        return V(b.v, b.i);\n    }\n}\n\n\n// Plane\n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n//Cylindre\nfloat Cylindre (vec3 a, vec3 b, float r, vec3 p) {\n   float aq = dot (p-a, (b-a)/length(b-a));\n   float l = sqrt (dot (p-a,p-a)-aq*aq);\n   return Intersection(\n       Intersection((l-r), Plane (p, -((b-a)/length(b-a)), a)), Plane (p, (b-a)/length(b-a), b));\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\n// index : Texture index\nV Plane(vec3 p, vec3 n, vec3 o, int i){\n    return V( dot((p-o), n), i );\n}\n\n//Boite 2\nfloat box2 (vec3 p, vec3 o, float r, float h) {\n    return Intersection (\n        Plane (p,vec3(1.0,0.0,0.0),o+vec3(r,0.0,0.0)),\n        Intersection (\n            Plane (p,vec3(-1.0,0.0,0.0),o+vec3(-r,0.0,0.0)),\n            Intersection (\n                Plane (p,vec3(0.0,1.0,0.0),o+vec3(0.0,r,0.0)),\n                Intersection (\n                    Plane (p,vec3(0.0,-1.0,0.0),o+vec3(0.0,-r,0.0)),\n                    Intersection (\n                        Plane (p,vec3(0.0,0.0,1.0),o+vec3(0.0,0.0,h)),\n                        Plane (p,vec3(0.0,0.0,-1.0),o+vec3(0.0,0.0,-h)))))));\n}\n\n//Boite 3 struct V\nV box3 (vec3 p, vec3 o, float r, float h, int index) {\n    return V (Intersection (\n        Plane (p,vec3(1.0,0.0,0.0),o+vec3(r,0.0,0.0)),\n        Intersection (\n            Plane (p,vec3(-1.0,0.0,0.0),o+vec3(-r,0.0,0.0)),\n            Intersection (\n                Plane (p,vec3(0.0,1.0,0.0),o+vec3(0.0,r,0.0)),\n                Intersection (\n                    Plane (p,vec3(0.0,-1.0,0.0),o+vec3(0.0,-r,0.0)),\n                    Intersection (\n                        Plane (p,vec3(0.0,0.0,1.0),o+vec3(0.0,0.0,h)),\n                        Plane (p,vec3(0.0,0.0,-1.0),o+vec3(0.0,0.0,-h))))))), index);\n}\n\n// cree un cylindre selon un centre de base a, une normale u, et un rayon r\n// p : point\n// a : \nV CylinderInf( vec3 p, vec3 a, vec3 u, float r, int i ) {\n    float l= dot((p-a), u);\n    float d = distance(p, a); \n    return V( (sqrt(d*d - l*l) - r), i);\n}\n\n\n\nV Cylindre2 (vec3 a, vec3 b, float r, vec3 p, int i) {\n   float aq = dot (p-a, (b-a)/length(b-a));\n   float l = sqrt (dot (p-a,p-a)-aq*aq);\n   return V (Intersection(\n       Intersection((l-r), Plane (p, -((b-a)/length(b-a)), a)), Plane (p, (b-a)/length(b-a), b)), i);\n}\n\n\n//Union de 3 parametres\nfloat Union_3 (float a,float b, float c)\n{\n    return min(Union(a,b),c);\n}\n\n//Union de 4 parametres\nfloat Union_4 (float a,float b, float c,float d)\n{\n    return min(Union_3(a,b,c),d);\n}\n\n//Union de 5 parametres\nfloat Union_5 (float a,float b, float c,float d, float e)\n{\n    return min(Union_4(a,b,c,d),e);\n}\n\n\n//Escaliers\nV Stairs (vec3 p, int index)\n{\n    float S = Union_5(\n                     box2 (p, vec3(120.0,40.0,70.0), 150.0, 0.0),\n                     box2 (p, vec3(80.0,40.0,50.0), 150.0, 20.0),\n                     box2 (p, vec3(40.0,40.5,30.0), 150.0, 20.0),\n                     box2 (p, vec3(0.0,40.5,10.0), 150.0, 20.0),\n                     box2 (p, vec3(-40.0,40.5,-10.0), 150.0, 20.0)\n    \t\t\t    );\n    \n    return V(S, index);\n}\n\n\n// Scene --------------------------------------------------------------------------\n\n//Potential field of the object\n// p : point\nV Object (vec3 p) {\n    V u = Intersection (\n            Sphere(p, vec3(0.0,0.0,0.0), 500.0, 2),\n            Union (\n                ImplicitTerrain (p, 2),\n                ImplicitWater (p, 2)));\n                \n                \n            //Soleil\n               u = Union(\n                    u, \n                    Sphere(p,vec3(-400.0,-150.0,300.0),45.0,3));\n                \n                \n            //Temple\n                u = Union (u, Cylindre2 (vec3(200.0,160.0,30.0), vec3(200.0,160.0,300.0), 30.0, p, 5));\n                u = Union (u, Cylindre2 (vec3(-40.0,-80.0,30.0), vec3(-40.0,-80.0,300.0), 30.0, p, 5));\n                u = Union (u, Cylindre2 (vec3(200.0,-80.0,30.0), vec3(200,-80.0,300.0), 30.0, p, 5));\n                u = Union (u, Cylindre2 (vec3(-40.0,160.0,30.0), vec3(-40.5,160.0,300.0), 30.0, p, 5));\n                \n                u = Union (u, box3(p, vec3(80.0,40.0,300.0), 200.0, 20.0, 5));\n                \n                u = Union (u, Stairs (p, 5));\n                \n    \n    return u;\n}\n\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p).v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n//Turbulence\nfloat Turbulence (vec3 p, float l, float a, float o) {\n    float n = 0.0;\n    for (int i=0; i<int(o); i++) {\n        n += a*Noise(p/l);\n        l = 0.5;\n        a = 0.5;\n    }\n    return n;\n}\n\n//Fonction de conversion\nint convert (float x) {\n    if (x<0.0) {\n        x=x-1.0;\n    }\n    return int(x);\n}\n\n//Marbre\nvec3 Marbre (vec3 p) {\n    p.x = p.x+Turbulence(p,2.0,8.0,12.0);\n    float t = sin(p.x);\n    return mix(vec3(0.8,0.8,0.8),vec3(1.0,1.0,1.0),t);\n}\n\n//Damier\nvec3 Damier (vec3 p, vec3 a, vec3 b) {\n    int x = convert(p.x);\n    int y = convert(p.y);\n    int z = convert(p.z);\n    if ((x+y+z)%2==0) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nvec3 TextureRock(in vec3 p)\n{\n  return mix(vec3(0.1,0.3,0.0),vec3(0.4,0.0,0.0),0.5);\n}\n\nvec3 TextureWater(in vec3 p)\n{\n  return vec3(0.52,0.75,0.91);\n}\n\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);\n}\n\nvec3 TexturePlage(in vec3 p)\n{\n      return vec3(1.0,0.85,0.45);\n}\nvec3 TextureHerbe(in vec3 p)\n{\n    return mix(vec3(0.2,0.6,0.15),vec3(0.0,0.5,0.0),Fbm(p/5.0));\n}\n\nvec3 TextureSnow(in vec3 p)\n{\n    return vec3(1.0,1.0,1.0);\n}\n\nvec3 TextureSun (in vec3 p)\n{\n    return vec3(1.0,0.9,0.0);\n}\n\nvec3 TextureTemple(in vec3 p)\n{ \n  return Marbre(p);\n}\n\nvec3 TextureTemple2(in vec3 p)\n{\n    return Damier(p, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));\n}\n\n\n// Compute color\n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    V vp = Object (p);\n    if (p.z <= 0.0 && vp.i == 2) {\n        return TextureWater(p);\n    }\n    \n    vec3 c = TextureWater(p);\n    \n    if (p.z > 0.0 && p.z<= 15.0 && vp.i == 2) {\n        float beach = smoothstep(0.0, 10.0, p.z + 2.0*Noise(p/2.0));\n        c = mix(c, TexturePlage(p/10.0), beach);\n        return c;\n    }\n    vec3 c1 = TexturePlage(p);\n        \n    if (p.z > 15.0 && p.z <= 150.0 && vp.i ==2) {\n        float herbe = smoothstep(10.0, 40.0, p.z + 2.0*Noise(p/2.0));\n        c1 = mix(c1, TextureHerbe(p/10.0), herbe);\n        return c1;\n    }\n        \n    vec3 c2 = TextureHerbe(p);\n    \n       \n     if (p.z > 100.0 && p.z <= 350.0 && vp.i == 2) {\n        float snow = smoothstep(200.0, 145.0, p.z + 2.0*Noise(p/2.0));\n        c2 = mix(TextureSnow(p/10.0), c2, snow);\n        return c2;\n        }\n        \n        if(vp.i == 1)\n        {\n            return TexturePlage(p);\n        }\n        \n     vec3 c3 = TexturePlage(p);\n     \n     if (p.z >= 250.0 && vp.i == 3) {\n         return TextureSun(p);\n     }\n     \n     vec3 c4 = TextureSun(p);\n     \n     if (p.z >= 0.0 && p.z <= 225.0 && vp.i == 4) {\n         return TextureTemple(p);\n     }\n     \n}\n\n// Rendering\n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n    vec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n    vec3 p = ro + t*rd;\n    float vp= Object(p).v;\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n    else\n    {\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n        float dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n    }\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n        float s=float(it)/float(Steps);\n        return vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n        // Gamma with square root\n        return vec4( sqrt(col), t );\n    }\n}\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {\n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro;\n    mat3 cam = Camera( a, ro);\n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray\n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,50.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}