{"ver":"0.1","info":{"id":"XffcDB","date":"1721491009","viewed":41,"name":"Dragon Skin By Rik (Voronoi)","username":"rikr","description":"Trying to make a cool Voronoi texture in a concise manner, made in 386 characters by Rik Riesmeijer.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","grid","texture","random","distance","dragon","cc0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dragon Skin (Voronoi Test)\n// By Rik Riesmeijer, 2024 - No Rights Reserved.\n\n// License: CC0 1.0 Universal - Commercial Use Allowed.\n// Copyright Has Been Released To The Public Domain. \n// More information at: CreativeCommons.org/publicdomain.\n\nvoid mainImage(out vec4 c, in vec2 v) {\n    // Making it move.\n    v += 2e2 + iTime * 2e2;\n    \n    // Generate a random looking 2d grid origin.\n    #define r(e) (94587u * e ^ e.yx)\n    #define o vec2(r(r(r(uvec2(ip + g))))) / vec2(-1u)\n    \n    // Setting up variables to track the minimum distance in the grid.\n    vec2 d, g, r, ming, minr, mind = vec2(1e3);\n    \n    // Get the integer part and fractional part of the UV coordinate.\n    vec2 ip = floor(v /= 1e2), fp = fract(v);\n    \n    // Expression of the grid position.\n    #define g vec2(float(i % 3 - 1), float(i / 3 - 1))\n    \n    // Minimum distance for the 3x3 grid.\n    for(int i = 0; i < 9; i++)\n        mind.x = ((d.x = length(r = g + o - fp)) > mind.x)?\n            mind.x : length(minr = (ming = g) + o - fp);\n\n    // Display the colors.\n    c = vec4(smoothstep(0.0, 1.0, minr).yx, length(minr), 1);\n}","name":"Image","description":"","type":"image"}]}