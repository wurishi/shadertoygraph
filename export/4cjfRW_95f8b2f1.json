{"ver":"0.1","info":{"id":"4cjfRW","date":"1724766931","viewed":13,"name":"dance of lights culegamer","username":"CuleGamer","description":"orbit trap with -3 power julia set\nthe -3 exponent sort of inverts the 3 exponent julia set\nthe actual trap function is sort of doing random stuff until it looks cool(it kind of reminds me of those images for the hydrogen wave function)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","julia","orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const uint steps = 128u;\nconst float exponent = -3.;\nconst vec2 c = vec2(-0.59, -0.622);\nvec2 f(vec2 z)\n{\n    float absZ = length(z);\n    float argZ = atan(z.y, z.x);\n    return pow(absZ, exponent) * vec2(cos(exponent * argZ), sin(exponent * argZ));\n}\n\nfloat trap(vec2 z)\n{\n    vec2 a = 2. * abs(fract(0.75 * z) - 0.5) - 0.5;\n    vec2 b = 0.5 * vec2(cos(0.5 * iTime + 3.8), sin(0.5 * iTime + 3.8));\n    return max(distance(a, b), 2. * min(abs(z.x), abs(z.y)));\n}\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    vec2 z = vec2(0., 1.2) + 1.5 * (2. * I - iResolution.xy) / iResolution.y;\n    float d = 1.;\n    for(uint i; i < steps; i++)\n    {\n        z = f(z);\n        z += c;\n        d = min(d, trap(z));\n    }\n    vec3 col = vec3(0.05 / d);\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}