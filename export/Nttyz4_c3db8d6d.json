{"ver":"0.1","info":{"id":"Nttyz4","date":"1659367084","viewed":1149,"name":"oscilloscope analysis luminance","username":"FabriceNeyret2","description":"trace the luminance profile of a source image ( video or webcam ) along a series of horizontal and vertical lines.\nSPACE: show image\nTAB: fix webcam vignetting.\nMouse.y: change grid density.","likes":35,"published":3,"flags":18,"usePreview":1,"tags":["oscilloscope","calibration","webcam","vignetting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/7t3yzN\n\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n#define S(v)            smoothstep(1., 0., abs(v)/fwidth(v) )\n\n#define T(U)  texture(iChannel1,U) * ( keyToggle(9) ? 1. + vec4(.07,.03,0,0) + vec4(.6,.2,.2,0)*V.x + vec4(.18,.18,.18,0)*V.y : vec4(1) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = u/R,\n         G = R/ ( iMouse.xy==vec2(0) ? 8. : exp2(round(2.+4.*iMouse.y/R.y)) ),\n         I = round (U*G)/G,\n         V = 2.*U-1.; V *= V;\n  \n    G = G*(U-I)+.5;\n\n    O-=O;\n    if keyToggle(32) O = T(U);\n    \n  \n    vec4 P = T( vec2(U.x,I.y) );  // horizontal RGB profiles\n    O = mix( O, vec4(1), S( G.y - length(P.rgb)/sqrt(3.) ) );\n  \n    P = T( vec2(I.x,U.y) );       // vertical RGB profiles\n    O = mix( O, vec4(1), S( G.x - length(P.rgb)/sqrt(3.) ) );\n    \n    O = sqrt(O);                  // to sRGB\n}","name":"Image","description":"","type":"image"}]}