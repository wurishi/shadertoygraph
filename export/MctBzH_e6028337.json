{"ver":"0.1","info":{"id":"MctBzH","date":"1732730479","viewed":54,"name":"Minecraft Like Skybox Colors","username":"rainbain","description":"This was a quick demo to calculate the vertex colors of a skybox as to be used in my Minecraft-Like clone for the Nintendo Wii.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["skybox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SKY_COLOR_Y_SCALE 1.0\n#define DAYTIME_CYCLE_TIME 10.0\n\n#define PI 3.14159\n\n// Calculating skybox color for a day and night cycle\n// By rainbain fox\n//\n// Left side is facing north and the left south to give both sides of the effect.\n// This is a rather weird implementation, served to exist as a\n// unoptimized reference design for how I plan to implement it on the Nintendo Wii.\n// It is supposed to mimic the day/night cycle of Minecraft's Skybox\n\nfloat angleDistance(float a, float b) {\n    float diff = mod(b - a + 3.14159265359, 6.28318530718) - 3.14159265359;\n    return diff;\n}\n\nfloat atan2(in float y, in float x)\n{\n    bool s = (abs(x) > abs(y));\n    return mix(PI/2.0 - atan(x,y), atan(y,x), s);\n}\n\nconst vec4 daytime_color = vec4(132.0 / 255.0, 195.0 / 255.0, 250.0 / 255.0, 255.0 / 255.0);\nconst vec4 nightime_color = vec4(12.0 / 255.0, 22.0 / 255.0, 31.0 / 255.0, 255.0 / 255.0);\nconst vec4 sunset_color = vec4(217.0 / 255.0, 73.0 / 255.0, 37.0 / 255.0, 255.0 / 255.0);\n\n// Higher value means quicker transition\n// So that the sky is not dark most of the time\n#define DAY_NIGHT_SCALE 3.0f\n\n// Similar as before, but its 1-0. larger values mean quicker transition\n#define SUNSET_OFSSET 0.8f\n\nvec4 skybox_get_color(float y, float z, float time) {\n    // Make it so that colors under the horizin are constant\n    if(y < 0.0f)\n        y = 0.0f;\n\n    // Angle of the sun in the sky based on the time of day\n    float sun_angle = time / DAYTIME_CYCLE_TIME * PI * 2.0f;\n    \n    // Angle from the position in the skybox to the origin\n    float angle = atan2(y, z);\n    \n    // Altitude from sun from top and bottom of sky for the blue and black transition\n    float day_night_mix = (max(min(sin(sun_angle) * DAY_NIGHT_SCALE, 1.0f), -1.0f) + 1.0f) / 2.0f;\n    vec4 sky_color = mix(nightime_color, daytime_color, day_night_mix);\n    \n    // Angular distance from the point in the skybox to the sun.\n    float angle_distance;\n    float sun_angle_2 = mod(sun_angle, 3.14159 * 2.0f);\n    if(sun_angle_2 > 3.14159)\n        sun_angle_2 = 3.14159 * 2.0f - sun_angle_2;\n    angle_distance = angleDistance(sun_angle_2 - 3.14159f / 2.0f, angle);\n    \n    // Altiude of sun from horizon. Used to fade in and out more red oragnes when it approches the horrizon\n    float sunset_mix = max(abs(cos(sun_angle - 3.14159f / 2.0f)) - SUNSET_OFSSET, 0.0f) / (1.0f - SUNSET_OFSSET);\n    \n    // Effect how much red oranges by how close said point is to the sun. Points near the sun are more red\n    sunset_mix *= 1.0f - min(max(abs(angle_distance), 0.0f), 1.0f);\n    \n    // Mix it into sky color from before\n    sky_color = mix(sky_color, sunset_color, sunset_mix);\n\n    return sky_color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Simulate Y values we would expect to se\n    \n    // These take the physical Y, Z positions of the vertex.\n    // In this case rather large values since their physical\n    // Objects ment to render behind everything, near the Z clipping\n    if(uv.x < 0.5)\n        fragColor = skybox_get_color((uv.y-0.5f) * 2.0f * 80.0f, 95.0f, iTime);\n    else\n        fragColor = skybox_get_color((uv.y-0.5f) * 2.0f * 80.0f, 95.0f, iTime);\n}","name":"Image","description":"","type":"image"}]}