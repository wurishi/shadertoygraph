{"ver":"0.1","info":{"id":"MlK3RV","date":"1475678948","viewed":270,"name":"Voronoi tomfoolery","username":"twitchingace","description":"A first try in progress of drawing voronoi diagrams. Still need to extract out the points to a hash function of some sort, hopefully.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Generate points\n    #define pointnum 8\n    vec2 points[pointnum];\n    points[0] = vec2(abs(.115 + 0.5 * sin(iTime * -.2)), abs(0.1 + .2* cos(iTime)));\n    points[1] = vec2(0.72,0.32 + .25* sin(iTime));\n    points[2] = vec2(0.62+ .25* cos(iTime),0.26 - .1 * cos(iTime + 5.));\n    points[3] = vec2(0.43,0.25 + .1* cos(iTime));\n    points[4] = vec2(0.42 + .4* sin(iTime),0.32 - .1 * sin(iTime * .2));\n    points[5] = vec2(abs(0.12 + .3 * sin(iTime - 10.)),0.52 + .25* cos(iTime));\n    points[6] = vec2(0.2+ .25* cos(iTime),0.6 - .1 * cos(iTime + 5.));\n    points[7] = vec2(0.43 + .5 * sin(iTime*.4 + 5.),0.15 + .5* abs(cos(iTime*.4)));\n    \n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xx;\n    \n    // First pass to determine cells/min-distance and find the second closest point\n    float minDist = 2.;\n    float min2Dist = 2.;\n    float minPoint = -1.;\n    vec2 mPP = vec2(0);\n    float min2Point = -1.;\n    vec2 mPP2 = vec2(0);\n    \n    for (int i = 0; i < pointnum; i++){\n        float checkDist = distance(points[i], uv);\n        if (checkDist < minDist){\n            min2Dist = minDist;\n            min2Point = float(minPoint);\n            mPP2 = mPP;\n        \tminDist = checkDist;\n            minPoint = float(i);\n            mPP = points[i];\n        }\n        else if (checkDist < min2Dist){\n        \tmin2Dist = checkDist;\n            min2Point = float(i);\n            mPP2 = points[i];\n        }\n    }\n    \n    float dist = dot (uv - (mPP + mPP2)*.5, normalize(mPP2 - mPP));\n    \n    // Identify cell generators\n    if (minDist < 0.01 || abs(dist) <= .005){\n        minPoint = -1.;\n    }\n    \n    // Colourize points\n    float modulo = mod(minPoint, 7.);\n    float colour = 1.- 1.5 * minDist;\n    if (minPoint == -1.){\n        fragColor = vec4(0., 0., 0., 1.);\n    }\n    else if (modulo == 0.){\n        fragColor = vec4(colour, colour, colour,1.0);\n    }\n    else if (modulo == 1.){\n        fragColor = vec4(0., 0., colour, 1.0);\n    }\n    else if (modulo == 2.){\n        fragColor = vec4(0.0, colour, 0.0,1.0);\n    }\n    else if (modulo == 3.){\n        fragColor = vec4(colour, 0.0, 0.0,1.0);\n    }\n    else if (modulo == 4.){\n        fragColor = vec4(colour, 0.0, colour,1.0);\n    }\n    else if (modulo == 5.){\n        fragColor = vec4(0.0, colour, colour,1.0);\n    }\n    else if (modulo == 6.){\n        fragColor = vec4(colour, colour, 0.0,1.0);\n    }\n\t\n}","name":"Image","description":"","type":"image"}]}