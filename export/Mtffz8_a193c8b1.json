{"ver":"0.1","info":{"id":"Mtffz8","date":"1510930956","viewed":156,"name":"Hypnosis or something","username":"slerpy","description":"I don't even...","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raytracer","abstract","lights","cubesnakes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = vec3(.0);\n    \n    col += texture(iChannel0, uv).rgb;\n    col += texture(iChannel0, uv * vec2(-1., 1.)).rgb;\n    col += texture(iChannel0, uv * vec2(1., -1.)).rgb;\n    col += texture(iChannel0, uv * vec2(-1.)).rgb;\n    \n\tfragColor.rgb = col;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TAU 6.28318530718\n\n#define ITER 250\n#define NORK 0.01\n\nfloat map(vec3 p)\n{\n\tp.xy += vec2(cos(p.z),sin(p.z))/2.;\n\tvec2 d = p.xy - round(p.xy);\n\treturn length(d) - .1;\n}\n\nvec3 normal(vec3 p, float k)\n{\n\tvec2 e = vec2(.0,k);\n\treturn normalize(\n        map(p)-vec3(\n            map(p - e.yxx),\n            map(p - e.xyx),\n            map(p - e.xxy)\n        )\n    );\n}\n\nfloat tracer(vec3 ro, vec3 rd)\n{    \n    float t = .0;\n    for(int i=0; i<ITER; i++){\n        t += map(ro + rd*t);\n    } \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.x;\n\n\tfloat a = atan(uv.x,uv.y) + iTime/8.;\n\tuv = vec2(sin(a),cos(a))*length(uv);\n\t\n    vec3 ro = vec2(iTime/18., 0.).xxy;\n    vec3 rd = normalize(vec3(uv, 2.));\n    \n    float t = tracer(ro, rd);\n    vec3 sp = ro + rd * t;\n    vec3 sn = normal(sp, NORK);\n\n    vec3 col = vec3(.0);\n    if((dot(sn.xy, vec2(sin(iTime),cos(iTime)))+1.)/2. < .1){\n        col = 2. * exp(-t/4.) * normalize(sin(vec3(uv, iTime))+1.);\n    }\n    \n\tfragColor = vec4(col, 1.);\n}\n","name":"Buf A","description":"","type":"buffer"}]}