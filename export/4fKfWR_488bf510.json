{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"vec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize mouse coordinates\n    vec2 normalizedMouse = iMouse.xy / iResolution.xy;\n    \n    // Use normalized coordinates for texture sampling\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Map mouse coordinates to shader parameters\n    // f0: Key Luma (mouse x)\n    float f0 = normalizedMouse.x;\n    \n    // f1: Key Range (mouse y)\n    float f1 = normalizedMouse.y * 0.5;\n    \n    // f2: Edge Opacity (based on mouse position)\n    float f2 = 1.0 - abs(normalizedMouse.x * 2.0 - 1.0);\n    \n    // Sample textures\n    vec4 base  = texture(iChannel0, uv);\n    vec4 blend = texture(iChannel1, uv);\n    \n    // Convert base color to HSV\n    vec3 hsv = rgb2hsv(base.rgb);\n    \n    vec3 outc;\n    \n    // Color key blending logic\n    if( (hsv.z > (f0-f1)) && (hsv.z < (f0+f1)) ){\n        if(hsv.z-(f0-f1) < f2){\n            outc = mix(base.rgb, blend.rgb, (hsv.z-(f0-f1))/f2);\n        } else if((f0+f1)-hsv.z < f2){\n            outc = mix(base.rgb, blend.rgb, ((f0+f1)-hsv.z)/f2);\n        } else {\n            outc = blend.rgb;\n        }\n    } else {\n        outc = base.rgb;\n    }\n    \n    fragColor = vec4(outc, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fKfWR","date":"1733942073","viewed":32,"name":"mix_lumakey","username":"iliozac","description":"shader 2-input","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["recurboy"],"hasliked":0,"parentid":"","parentname":""}}