{"ver":"0.1","info":{"id":"Ds3cRB","date":"1695165631","viewed":35,"name":"Triangle Waves x","username":"Domenic3000","description":"Triangle Wave Effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wave","wave","triangle","fx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float triangleWave(vec2 p, float phase){\n// Generate triangle wave across x-axis\n    float triangleWave = abs(2. * fract(p.x * 4. + phase) - 1.);\n    \n    float O = 1.-abs(p.x);\n\n    // Calculate the distance from the current pixel to the triangle wave\n    triangleWave *= O;\n    triangleWave -= .5;\n    triangleWave *= O;\n    triangleWave += .5;\n     \n    float dist = 0.2-abs((p.y+.5) - triangleWave);\n    return dist;\n}\n\nvec3 getColor(float index) {\n    // Example: return different shades based on index\n    // You can customize this to get any color pattern you like\n    float r = fract(sin(index) * 43758.5453);\n    float g = fract(sin(index * 2.0) * 3152.23444);\n    float b = fract(sin(index * 3.0) * 43758.5453);\n    return vec3(r, g, b);\n}\n\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates from 0.0 to 1.0\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    \n    uv *=(sin(iTime*.2)+3.)*.3;\n    \n    //float blur = abs(uv.x);\n    //blur = smoothstep(.2, .4,blur);\n    float blur = random(uv);\n    \n    //uv.x = blur;\n    // Phase offset\n    float phaseOffset = iTime; // Change this value to adjust the phase\n      \n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<5.; i++){\n        float dist = triangleWave(uv, phaseOffset);\n        dist= dist*1.0 + blur *.01;\n        vec3 currentColor = getColor(i); // Get color based on the iteration\n        phaseOffset *= sin((iTime*.035)*random(vec2(1.267)));\n        //phaseOffset = phaseOffset;\n        vec3 glow = vec3(dist);\n        glow = clamp(glow*1., 0., 1.0)*currentColor;\n        \n        col += currentColor * step(.38,vec3(dist)*2.)+glow;\n        col= col*blur*.4+col;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}