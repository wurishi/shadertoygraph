{"ver":"0.1","info":{"id":"7ttBRl","date":"1663534043","viewed":77,"name":"fighting pixels","username":"jt","description":"fighting pixels\nInitialization: The screen is randomly filled with 8 colors.\nStep: Every pixel which is in the minority in it's neighborhood is persuaded to turn over to the majority color.\n","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["fightingpixels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/7ttBRl fighting pixels by jt\n\n// fighting pixels (c) 2022 by Jakob Thomsen is licensed under CC BY 4.0 \n\n// Initialization: The screen is randomly filled with 8 colors.\n// Step: Every pixel which is in the minority in it's neighborhood\n//       is persuaded to turn over to the majority color.\n// Interestingly the situation stabilizes after some time\n// (which doesn't happen if the neighborhood is chosen randomly,\n//  a variant not (yet) shown here).\n\nuint DOT(uvec3 a, uvec3 b)\n{\n    return a.x*b.x+a.y*b.y+a.z*b.z;\n}\n\nuint greatest(uint vs[8])\n{\n    bool unique = true;\n    uint maxval = vs[0];\n    uint maxidx = 0u; \n    for(uint i = 1u; i < 8u; i++)\n    {\n        if(vs[i] > maxval)\n        {\n            maxval = vs[i];\n            maxidx = i;\n            unique = true;\n        }\n        else if(vs[i] == maxval)\n        {\n            unique = false;\n        }\n    }\n    return unique ? maxidx : 8u;\n}\n\nvec3 hash32(vec2 p) // Hash without Sine by Dave_Hoskins\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame <= 0) // Start immediately.\n    //if(iTime <= 5.0) // Need time to enable fullscreen? Use this line instead.\n    {\n        fragColor = vec4(hash32(fragCoord), 1.0); // initialize\n    }\n    else\n    {\n        uint count[8]; // \"votes\" for each color\n        count[0] = 0u; count[1] = 0u; count[2] = 0u; count[3] = 0u; // XXX better way? XXX\n        count[4] = 0u; count[5] = 0u; count[6] = 0u; count[7] = 0u; // XXX better way? XXX\n        \n        int n = 5; // neighborhood size\n        for(int y = -n; y <= +n; y++)\n        {\n            for(int x = -n; x <= +n; x++)\n            {\n                // decode & collect \"votes\"\n                ivec2 c = ivec2((int(fragCoord.x) + x) % int(iResolution.x), (int(fragCoord.y) + y) % int(iResolution.y));\n                count[DOT(uvec3(1,2,4), uvec3(greaterThanEqual(texelFetch(iChannel0, c, 0).xyz, vec3(0.5))))] += 1u;\n            }\n        }\n\n        uint which = greatest(count); // who won, if any?\n        \n        // encode winner (or previous in case of stalemate)\n        vec3 color = which < 8u ? vec3((which & 1u) >> 0u, (which & 2u) >> 1u, (which & 4u) >> 2u) : texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n        \n        fragColor = vec4(color, 1.0);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}