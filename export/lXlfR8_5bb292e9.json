{"ver":"0.1","info":{"id":"lXlfR8","date":"1728046999","viewed":38,"name":"Metronome v0","username":"rr5","description":"Naive implementation.\n\nif there is no sound or out of sync with the graphic, press <Reset time>\n\nYou can change the beats and bpm in the common tab.","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n////////////////// MISC //////////////////\n\nconst float CIRCLE_RADIUS = 0.6;\nconst float PULSE_AMPLITUDE = 0.7;\nconst float OUTLINE_THICKNESS = 0.1;\nconst vec3 BACKGROUND_COLOR = vec3(0.2);\nconst vec3 CIRCLE_COLOR = vec3(1.0, 1.0, 1.0);\nconst vec3 FLASH_COLOR = vec3(0.0, 0.5, 1.0);\nconst vec3 NUMBER_COLOR = vec3(1.0);\nconst float NUMBER_SCALE = 0.3;\nconst vec2 NUMBER_OFFSET = vec2(0.00, 0.00);\nconst vec3 OFF_SEGMENT_COLOR = vec3(BACKGROUND_COLOR*1.3);\nconst float CIRCULAR_POINTER_RADIUS = 0.04;\nconst float FIXED_CIRCLE_RADIUS = 0.25;\n\n////////////////////////////////////////////////////////////////////////\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float time = iTime;\n    float beatDuration = 60.0 / BPM;\n    \n    int currentBeat = int(mod(time / beatDuration, float(BEATS)));\n    float beatProgress = fract(time / beatDuration); // 0. to 1.\n    float pulse = sin(beatProgress * PI) * PULSE_AMPLITUDE + (1.0 - PULSE_AMPLITUDE);\n    vec3 col = BACKGROUND_COLOR;\n    \n    //////// Draw the beating circle ////////\n    vec3 tgtCircleColor = CIRCLE_COLOR*(1.0-pulse) + FLASH_COLOR*pulse;\n    tgtCircleColor += (currentBeat == 0) ? 0.5 : 0.;\n    float d = sdCircle(uv, CIRCLE_RADIUS * pulse);\n    float temp = pow(pulse-0.5, 2.0)*4.0;\n    //float tgtCircleThicness = FIXED_CIRCULE_RADIUS*(1.-temp) + OUTLINE_THICKNESS*temp;\n    float tgtCircleThicness = FIXED_CIRCLE_RADIUS*temp + OUTLINE_THICKNESS*(1.-temp);\n    col = mix(col, tgtCircleColor, 1.0 - smoothstep(0.0, tgtCircleThicness, abs(d)));\n    \n    //////// Draw the count ////////\n    if (abs(d) < CIRCLE_RADIUS) {\n        vec2 numUV = (uv - NUMBER_OFFSET) * vec2(1.0, -1.0) / NUMBER_SCALE;\n        \n        for (int num=1; num<10; ++num){\n            float off_segment = drawNumber(numUV, num);\n            col = mix(col, OFF_SEGMENT_COLOR, 1.0 - smoothstep(0.0, 0.01, off_segment));\n        }\n        float numberDist = drawNumber(numUV, currentBeat + 1);\n        col = mix(col, tgtCircleColor, 1.0 - smoothstep(0.0, 0.01, numberDist));\n    }\n    \n    //////// Draw the middle circle around the number////////\n    d = sdCircle(uv, FIXED_CIRCLE_RADIUS);\n    col = mix(col, tgtCircleColor, 1.0 - smoothstep(0.0, OUTLINE_THICKNESS*0.3, abs(d)));\n    \n    //////// Fixed points ////////\n    for (int num=1; num<BEATS+1; ++num){\n        float BarProgress = float(num) * -PI / float(BEATS);\n        float sinBeat = sin(BarProgress * 2. + PI/2.);\n        float cosBeat = cos(BarProgress * 2. + PI/2.);\n        vec2 center = vec2(cosBeat, sinBeat) * FIXED_CIRCLE_RADIUS;\n\n        d = length(uv - center) - CIRCULAR_POINTER_RADIUS*0.7;\n        vec3 col_d = (d < 0.0) ? vec3(1.0) : vec3(0.0);    \n        float circleMask = smoothstep(0.0, 0.005, -d);\n        col = mix(col, tgtCircleColor, circleMask);\n    }\n    \n    //////// circular pointer ////////\n    float currentPos = float(currentBeat) + beatProgress;\n    float BarProgress = currentPos * -PI / float(BEATS);\n    float sinBeat = sin(BarProgress * 2. + PI/2.);\n    float cosBeat = cos(BarProgress * 2. + PI/2.);\n    vec2 center = vec2(cosBeat, sinBeat) * FIXED_CIRCLE_RADIUS;\n    \n    d = length(uv - center) - CIRCULAR_POINTER_RADIUS;\n    vec3 col_d = (d < 0.0) ? vec3(1.0) : vec3(0.0);\n    float circleMask = smoothstep(0.0, 0.005, -d);\n    \n    vec3 disc_col;\n    if (currentBeat == 0) {\n        disc_col = vec3(0.0, 1.0, 1.0);\n    }else{\n        if (currentBeat%2 == 0) disc_col = vec3(1.0, 0.0, 0.0);\n        if (currentBeat%2 == 1) disc_col = vec3(1.0, 1.0, 0.0);\n    }\n    col = mix(col, disc_col, circleMask);\n    \n    \n    ////// output //////\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n////////////////// MAIN CONFIG //////////////////\nint BEATS = 4;\nfloat BPM = 120.0;\n\n\n//////////////////////////////////////////////////////\n#define PI 3.14159265359\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat drawNumber(vec2 uv, int num) {\n    float d = 1e10;\n    float t = 0.08; // thickness of the number \n    float w = 0.3; // width of the number\n    float h = 0.5; // height of the number\n    \n    // upper bar //\n    if (num == 2 || num == 3 || num == 5 || num == 6 || num == 7 || num == 8 || num == 9)\n        d = min(d, sdBox(uv + vec2(0.0, h), vec2(w, t)));\n    // middle bar //\n    if (num == 2 || num == 3 || num == 4 || num == 5 || num == 6 || num == 8 || num == 9)\n        d = min(d, sdBox(uv, vec2(w, t)));\n    // buttom bar //\n    if (num == 2 || num == 3 || num == 5 || num == 6 || num == 8 || num == 9)\n        d = min(d, sdBox(uv - vec2(0.0, h), vec2(w, t)));\n    // Upper right //\n    if (num == 1 || num == 2 || num == 3 || num == 4 || num == 7 || num == 8 || num == 9)\n        d = min(d, sdBox(uv - vec2(w, -h/2.), vec2(t, h/2.)));\n    // Lower right //\n    if (num == 1 || num == 3 || num == 4 || num == 5 || num == 6 || num == 7 || num == 8 || num == 9)\n        d = min(d, sdBox(uv - vec2(w, h/2.), vec2(t, h/2.)));\n    // Upper left //\n    if (num == 4 || num == 5 || num == 6 || num == 7 || num == 8 || num == 9)\n        d = min(d, sdBox(uv + vec2(w, h/2.), vec2(t, h/2.)));\n    // Lower left //\n    if (num == 2 || num == 6 || num == 8)\n        d = min(d, sdBox(uv + vec2(w, -h/2.), vec2(t, h/2.)));\n    \n    return d;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"const float A5 = 880.;\nconst float sharpness = 16.;\n\nvec2 mainSound( int samp, float time )\n{\n    float beatDuration = 60.0 / BPM;\n    float currentBeat = time / beatDuration;\n    int rounded = int(currentBeat);\n    float temp = currentBeat - float(rounded);\n    float tgtHz = (int(currentBeat)%BEATS == 0) ? A5 : A5*0.75; \n    time = mod(time, 1.0 / tgtHz); // avoid distortion(?)\n    \n    return vec2( sin(PI*2.*tgtHz*time)*exp(-temp*sharpness));\n}","name":"Sound","description":"","type":"sound"}]}