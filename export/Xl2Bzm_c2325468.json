{"ver":"0.1","info":{"id":"Xl2Bzm","date":"1515103156","viewed":178,"name":"3/2018","username":"rimina","description":"\nTrying out things from here. Probably doing somethign wrong though. :D\nhttp://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/\n\nPart of my daily shader challenge. Shader number 3 of the year 2018.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractals","sierpinski","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 128.0\n#define EPSILON 0.001\n#define FAR 200.0\n#define ITERATIONS 32\n\nfloat dist(vec3 p){\n    vec3 pp = p;\n    float scale = 2.0;\n    float offset = 12.0;\n    \n    int n = 0;\n    for(int i= 0; i < ITERATIONS; ++i){\n        ++n;\n        if(pp.x+pp.y < 0.0){\n            pp.xy = -pp.yx;\n        }\n        if(pp.x+pp.z < 0.0){\n            pp.xz = -pp.zx;\n        }\n        if(pp.y+pp.z < 0.0){\n            pp.zy = -pp.yz;\n        }\n        pp = pp*scale-offset*(scale-1.0);\n        \n    }\n    return length(pp)*pow(scale, -float(n));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    \n    vec3 p = ro;\n    float t = 0.0;\n    float n = 0.0;\n    \n    for(float i = 0.0; i < STEPS; ++i){\n        ++n;\n        float d = dist(p);\n        t += d;\n        p += d*rd;\n        \n        if(d < EPSILON || t > FAR){\n            break;\n        }\n    }\n    return 1.0-n/STEPS;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    q = -1.0+2.0*q;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(2.0, 0.5, 2.0);\n    vec3 target = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    vec3 z = normalize(target-ro);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(60.0)));\n    \n    float d = march(ro, rd);\n    vec3 col = vec3(0.2, 0.0 ,0.3)+vec3(d);\n\n\tfragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}