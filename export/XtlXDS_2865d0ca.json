{"ver":"0.1","info":{"id":"XtlXDS","date":"1439403398","viewed":181,"name":"Siggraph Demo","username":"conorcodes","description":"adsf","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float cosNoise( in vec2 pos)\n{\n\treturn .5 * (sin(pos.x) + sin(pos.y));\n}\n\n//rotation matrix\nconst mat2 m2 = mat2(0.8, -0.6,\n                     0.6, 0.8);\n\nfloat map( in vec3 pos)\n{\n\t//this is your 3D object as a distance field?\n    vec2 q = pos.xz;\n    float h = 0.0;\n    float s = 0.4;\n        \n    for (int i=0; i<5; i++){\n        h += s*cosNoise(q);\n        s *= 0.05;\n        q *= m2 * q * 1.2;\n    }\n    h *= 2.0;\n    return pos.y - h;\n}\n\n\n//normals?\nvec3 calcNormal( in vec3 pos)\n{\n    vec3 nor;\n    \n    vec2 e = vec2(0.01, 0.0);\n    nor.x = map(pos + e.xyy) - map(pos - e.xyy);\n    nor.y = map(pos + e.yxy) - map(pos - e.yxy);\n    nor.z = map(pos + e.yyx) - map(pos - e.yyx);\n    return normalize(nor);\n}\n\nfloat calcShadow(in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.1;\n    \n    for(int i=0; i<64; i++){\n    vec3 pos = ro+t*rd;\n        float h = map(pos);\n        res = min(res, (h/0.0)/t);\n        if(res<0.0001) break;\n        \n        t+=h;\n       \n    }\n    return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    \n    //ray origin\n    vec3 ro = vec3(0.0, 1.65, -iTime);\n    \n    //convert uv space to screen space?\n    vec2 q = -1.0 + 2.0 * p;\n    q.x *= 1.777;\n    \n    \n    //ray direction   \n    vec3 rd = normalize(vec3(q, -1.0));\n    \n    vec3 col = vec3(0.2, 0.4, 0.8);\n        \n    \n    //raymarching for loop\n    float t = 0.0;\n    float tmax = 20.0;\n    for (int i=0; i<256; i++)\n    {\n    \tvec3 pos = ro + rd*t;\n    \n        //test if ray touches an object, (negative val means you're in, positive means you're out\n        float h = map( pos );\n        //clip plane\n        if (h<0.001 || t>tmax) break;\n        \n        \n        t+= 0.1;\n        \n     }\n    \n    vec3 light = normalize( vec3(1.0, 0.5, -0.5) );\n    \n    if ( t<tmax)\n    {\n        //col = vec3(1.0,1.0,1.0);\n        vec3 pos = ro + rd*t;\n        vec3 nor = calcNormal( pos );\n        \n        float dif= clamp(dot(nor, light),0.0, 1.0);\n        float sha = calcShadow ( pos, light);\n        vec3 lig = vec3(2.0,1.5,1.0) * dif * 1.5 * sha;\n        \tlig += (.1,.2,.3)*nor.y*2.0;\n        vec3 mat = vec3(.25,.25, .2);\n        mat =mix( mat,vec3(0.2, 0.15, 0.1),smoothstep(0.7,0.9,nor.y));\n            \n        col = lig* mat;\n        \n        float fog = exp( -.005 * t * t);\n        col *= fog;\n        col += (1.0-fog) * vec3(0.3,0.3,0.7);\n    }\n    \n    col = sqrt(col);\n    \n\tfragColor = vec4(col,0.0);\n}","name":"","description":"","type":"image"}]}