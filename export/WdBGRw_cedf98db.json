{"ver":"0.1","info":{"id":"WdBGRw","date":"1549467638","viewed":331,"name":"3d texture raymarcher","username":"snipstruis","description":"march","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 boxIntersection(vec3 ro, vec3 rd) {\n    vec3 m = 1.0/rd;   // could precompute if traversing a big set of algined boxes\n    vec3 n = m*ro;     // could precompute if traversing a big set of algined boxes\n    vec3 k = abs(m);\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n\t\n    if( tN > tF || tF < 0.0) return vec2(-1.0); // no intersection\n\n    return vec2( tN, tF );\n}\n\nvec3 interp3D(vec3 p){\n    p = p*vec3(32,32,32)+0.5;\n    vec3 i = floor(p);\n    vec3 f = p-i;\n    //f = f*f*f*(f*(f*6.0-15.0)+10.0);\n    f = smoothstep(vec3(0),vec3(1),f);\n    p = i + f;\n    p = (p-0.5)/vec3(32,32,32);\n    return p;\n}\n\nvec3 calc_normal(vec3 v){\n    const float eps = 1e-3;\n    vec3 p = vec3(\n        texture(iChannel0,interp3D(v+vec3(eps,  0,  0))).x,\n\t\ttexture(iChannel0,interp3D(v+vec3(0,  eps,  0))).x,\n        texture(iChannel0,interp3D(v+vec3(0,  0,  eps))).x);\n    vec3 n = vec3(\n        texture(iChannel0,interp3D(v-vec3(eps,  0,  0))).x,\n\t\ttexture(iChannel0,interp3D(v-vec3(0,  eps,  0))).x,\n        texture(iChannel0,interp3D(v-vec3(0,  0,  eps))).x);\n    return normalize(p-n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 half_res = 0.5*iResolution.xy;\n    vec2 uv = (fragCoord-half_res)/min(half_res.x,half_res.y);\n\n    vec3 direction = normalize(vec3(uv,2.0));\n    vec3 origin = vec3(0.5*sin(iTime*0.1),0.5*cos(iTime*0.1),-2);\n    \n    vec2 isct = boxIntersection(origin, direction);\n\n    vec3 near = origin+direction*isct.x;\n    vec3 far  = origin+direction*isct.y;\n    \n    if(isct.x>0.0){\n        int steps = int(distance(near,far)*128.0);\n        for(int i=0; i<steps; i++){\n            vec3 p = 0.5+0.5*mix(near,far,float(i)/float(steps));\n            float f = texture(iChannel0,interp3D(p)).x;\n            if(f>0.7){\n                //vec3 ret = vec3(0.4*distance(p,origin));\n                //vec3 ret = 0.5+0.5*calc_normal(p);\n                vec3 ret = vec3(max(0.0,dot(calc_normal(p),normalize(vec3(-1,-1,1)))));\n                fragColor = vec4(pow(ret,vec3(1.0/2.2)),1.0);\n            \treturn;\n            }\n        }\n    }\n    fragColor = vec4(texture(iChannel1,interp3D(direction)).xyz,1);\n}","name":"Image","description":"","type":"image"}]}