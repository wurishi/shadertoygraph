{"ver":"0.1","info":{"id":"wsXXzf","date":"1551769218","viewed":192,"name":"Drunk Mondrian","username":"japoneris","description":"Piet Mondrian - Tableau (1921)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["drunkmondrian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float expfilter(float x, float s) {\n \treturn exp(- x*x / (s*s));\n}\n\nfloat linefilter(float p, float pr, float w) {\n    \n    return step(pr, p) * step(1. - pr - w, 1.-p);\n}\n\nfloat rectangle(vec2 uv, float x0, float x1, float y0, float y1) {\n \t//return 0.;   \n\treturn step(uv.x, x1) * step(1.-uv.x, 1.-x0) * step(1. - uv.y, 1. - y0) * step(uv.y, y1);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    \n    float il0 = 0.35 + 0.05 * cos(0.5*iTime);\n    float il1 = 0.70 + 0.05 * cos(0.51*iTime);\n    float il3 = 0.15 + 0.1 * cos(iTime*1.1);\n    float il4 = 0.80 + 0.08 * cos(iTime*1.2);\n    float il5 = 0.95 + 0.03 * cos(iTime*1.3);\n    \n    float ih0 = 0.50 + 0.1 * cos(iTime*1.4);\n    float ih1 = 0.70 + 0.08 * cos(iTime*1.5);\n    float ih2 = 0.15 + 0.1 * cos(iTime*1.6);\n    \n    \n    \n    float lv0 = linefilter(uv.x, il0, 0.01);\n    float lv1 = linefilter(uv.x, il1, 0.01);\n    float lv2 = linefilter(uv.x, il4, 0.01);\n    float lv3 = linefilter(uv.x, il5, 0.01);\n    \n    \n    float lh0 = linefilter(uv.y, ih0, 0.01);\n    float lh1 = linefilter(uv.y, ih1, 0.01);\n    \n    float lhv0 = linefilter(uv.y, ih2, 0.01) * linefilter(uv.x, il0, 1.);\n    float lvh0 = linefilter(uv.x, il3, 0.01) * linefilter(uv.y, ih0, 1.);\n    \n    \n    \n    float lines = lv0 + lv1 +lv3 + lh0 + lh1 + lhv0 + lvh0;\n    \n    float rectr = rectangle(uv, 0., il0, ih0, 1.); \n    float rectb = rectangle(uv, il1, 1., 0., ih2);  \n    float rectj = rectangle(uv, il5, 1., ih0, 1.);  \n                            \n    \n    vec4 RectJ = vec4(rectj * vec3(0., 0., 0.9), 1.);\n    vec4 RectB = vec4(rectb * vec3(1., 1., 0.), 1.);\n    vec4 RectR = vec4(rectr * vec3(0.1, 1., 0.9), 1.);\n    \n    \n    // Output to screen R G B\n    fragColor = vec4(0.98 - lines, 1. - lines, 0.9 - lines, 1.0) - RectJ - RectB - RectR;\n}","name":"Image","description":"","type":"image"}]}