{"ver":"0.1","info":{"id":"4cVyz1","date":"1731495596","viewed":196,"name":"Simple Fresnel Shader","username":"mujtaba8086","description":"Made just for the cover photo of my [url=https://gameidea.org/short-posts/fresnel-effect-glsl/]fresnel effect in GLSL[/url] short post. It uses ray marching to draw and calculates fresnel effect to draw rim lights.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["glsl","rim","fresnel","rimlight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// distance function for a sphere centered at (0, 0, -2)\nfloat sphereSDF(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\n// raymarching function\nfloat raymarch(vec3 ro, vec3 rd) {\n    float dist = 0.0;\n    float maxDist = 20.0;\n    int maxSteps = 100;\n    float hitThreshold = 0.001;\n\n    for (int i = 0; i < maxSteps; i++) {\n        vec3 p = ro + dist * rd;\n        float d = sphereSDF(p, 1.0); // our sphere radius 1.0\n        if (d < hitThreshold) {\n            return dist;\n        }\n        dist += d;\n        if (dist > maxDist) break;\n    }\n    return -1.0;\n}\n\n// normal calculation using SDF\nvec3 calcNormal(vec3 p) {\n    float h = 0.001;\n    vec2 k = vec2(1.0, -1.0);\n    return normalize(\n        k.xyy * sphereSDF(p + k.xyy * h, 1.0) +\n        k.yyx * sphereSDF(p + k.yyx * h, 1.0) +\n        k.yxy * sphereSDF(p + k.yxy * h, 1.0) +\n        k.xxx * sphereSDF(p + k.xxx * h, 1.0)\n    );\n}\n\n// main shader function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // set up camera position and direction\n    vec3 ro = vec3(0.0, 0.0, 3.0); // camera position\n    vec3 rd = normalize(vec3(uv, -1.5)); // ray direction\n\n    // raymarching to find distance to the sphere\n    float dist = raymarch(ro, rd);\n    if (dist > 0.0) {\n        vec3 p = ro + dist * rd;\n        vec3 normal = calcNormal(p);\n\n        // rresnel Rim Effect\n        vec3 viewDir = normalize(ro - p);\n        float fresnel = pow(1.0 - dot(normal, viewDir), 2.0); // fresnel factor for rim light\n        vec3 rimColor = vec3(0.2, 0.6, 1.0); // rim color\n        float rimIntensity = 3.0; // rim glow intensity\n\n        // final color calculation with rim lighting\n        vec3 color = mix(vec3(0.1, 0.1, 0.1), rimColor * fresnel * rimIntensity, fresnel);\n        fragColor = vec4(color, 1.0);\n    } else {\n        // background color\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}