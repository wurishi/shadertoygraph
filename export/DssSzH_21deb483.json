{"ver":"0.1","info":{"id":"DssSzH","date":"1668509837","viewed":52,"name":"BitmapName","username":"Seize","description":"BitmapName","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["text"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//http://www.massmind.org/techref/datafile/charset/extractor/font8x12pic8.asm.txt\nvec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000);\nvec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000);\nvec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000);\nvec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000);\nvec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000);\nvec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000);\nvec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78);\nvec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000);\nvec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000);\nvec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78);\nvec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000);\nvec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000);\nvec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000);\nvec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000);\nvec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000);\nvec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0);\nvec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E);\nvec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000);\nvec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000);\nvec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000);\nvec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000);\nvec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000);\nvec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000);\nvec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000);\nvec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0);\nvec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000);\n\nvec2 print_pos;\n\nfloat get_bit(float n, float b)\n{\n    b = clamp(b,-1.0,24.0);\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\nfloat bitmap(vec4 spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));\n    \n    float px = 0.0;\n    px += get_bit(spr.x, bit - 72.0);\n    px += get_bit(spr.y, bit - 48.0);\n    px += get_bit(spr.z, bit - 24.0);\n    px += get_bit(spr.w, bit - 00.0);\n    \n    return bounds? px : 0.0;\n}\n\nfloat char(vec4 ch, vec2 uv)\n{\n    float px = bitmap(ch, vec2(8, 12), uv - print_pos);\n    print_pos.x += 8.0;\n    return px;\n}\n\nfloat text(vec2 uv)\n{\n    float col = 0.0;\n\n    print_pos = vec2(0);\n    col += char(ch_s,uv);\n    col += char(ch_u,uv);\n    col += char(ch_o,uv);\n    col += char(ch_z,uv);\n    col += char(ch_h,uv);\n    col += char(ch_e,uv);\n    col += char(ch_n,uv);\n    col += char(ch_g,uv);\n    col += char(ch_d,uv);\n    col += char(ch_u,uv);\n    col += char(ch_o,uv);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = floor(fragCoord.xy);\n    \n\tfloat pixel = text(uv);\n    vec3 col = mix(vec3(1),vec3(0),pixel);\n\n\tfragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}