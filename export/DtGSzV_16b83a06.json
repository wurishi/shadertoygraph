{"ver":"0.1","info":{"id":"DtGSzV","date":"1686202254","viewed":50,"name":"relative barycentric coordinate","username":"jozxyqk","description":"Demonstrates a function to give barycentric coordinates for a point in a triangle defined by 3 other barycentric coordinates. This is rather satisfyingly just inverse(mat3(v0, v1, v2)) * point","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["barycentric","barycentriccoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 relativeBaryCoord1(vec3 point, vec3 v0, vec3 v1, vec3 v2) {\n    float det = v0.x * (v1.y * v2.z - v2.y * v1.z) - v1.x * (v0.y * v2.z - v2.y * v0.z) + v2.x * (v0.y * v1.z - v1.y * v0.z);\n    \n    float invDet = 1.0 / det;\n    \n    float u = (point.x * (v1.y * v2.z - v2.y * v1.z) + point.y * (v2.x * v1.z - v1.x * v2.z) + point.z * (v1.x * v2.y - v2.x * v1.y)) * invDet;\n    float v = (point.x * (v2.y * v0.z - v0.y * v2.z) + point.y * (v0.x * v2.z - v2.x * v0.z) + point.z * (v2.x * v0.y - v0.x * v2.y)) * invDet;\n    float w = (point.x * (v0.y * v1.z - v1.y * v0.z) + point.y * (v1.x * v0.z - v0.x * v1.z) + point.z * (v0.x * v1.y - v1.x * v0.y)) * invDet;\n    \n    return vec3(u, v, w);\n}\n\nvec3 relativeBaryCoord(vec3 point, vec3 v0, vec3 v1, vec3 v2) {\n    return inverse(mat3(v0, v1, v2)) * point;\n}\n\nbool intersectTriangle(vec3 start, vec3 dir, vec3 a, vec3 b, vec3 c, out vec3 baryCoord)\n{\n  vec3 d = dir;\n  vec3 t = start - a;\n  vec3 e1 = b - a;\n  vec3 e2 = c - a;\n  vec3 p = cross(d, e2);\n  vec3 q = cross(t, e1);\n  float det = dot(p, e1);\n\n  // negative det = backface\n  if (det < 0.0)\n      return false;\n\n  // zero det = coplanar\n  if (abs(det) < 1e-6)\n      return false;\n\n  vec2 bary2 = vec2(dot(p, t), dot(q, d)) / det;\n  // hitTime = dot(q, e2) / det;\n  \n  baryCoord = vec3(1.0 - bary2.x - bary2.y, bary2);\n\n  return !any(lessThan(baryCoord, vec3(0.0))) && !any(greaterThan(baryCoord, vec3(1.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 start = vec3(0.0);\n    vec3 dirPoint = vec3(uv * 2.0 - 1.0, 1.0);\n    vec3 dir = dirPoint - start;\n    \n    vec3 a = vec3(-0.5, -0.5, 1.0);\n    vec3 b = vec3(-0.5, 0.5, 1.0);\n    vec3 c = vec3(0.5, -0.5, 1.0);\n\n    vec3 baryCoord;\n    if (!intersectTriangle(start, dir, a, b, c, baryCoord))\n        baryCoord = vec3(0.0);\n        \n    vec3 subBarys[3] = vec3[3](\n        vec3(0.4, 0.5, 0.1),\n        vec3(0.1, 0.4, 0.5),\n        vec3(0.2, 0.1, 0.7)\n    );\n    \n    int i = int(iTime * 1.0);\n    vec3 s0 = mat3(a, b, c) * subBarys[(i+0)%3];\n    vec3 s1 = mat3(a, b, c) * subBarys[(i+1)%3];\n    vec3 s2 = mat3(a, b, c) * subBarys[(i+2)%3];\n    \n    vec3 subBaryCoord;\n    if (intersectTriangle(start, dir, s0, s1, s2, subBaryCoord))\n    {\n        if (int(iTime * 8.0) % 2 == 0)\n            subBaryCoord = relativeBaryCoord(baryCoord, subBarys[(i+0)%3], subBarys[(i+1)%3], subBarys[(i+2)%3]);\n        baryCoord = subBaryCoord;\n    }\n\n    fragColor = vec4(baryCoord, 1.0);\n}","name":"Image","description":"","type":"image"}]}