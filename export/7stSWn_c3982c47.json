{"ver":"0.1","info":{"id":"7stSWn","date":"1632964574","viewed":66,"name":"21/49","username":"tono","description":"Asari clams were delicious, so I made some asari clams.\nFrozen peeled asari clams are very convenient!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["49"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat bo(vec3 p,vec3 s){p = abs(p) - s;return max(p.x,max(p.y,p.z));}\nfloat scaleSphere( vec3 p, vec3 scale, float s )\n{\n    return (length(p/scale)-s)*min(scale.x, min(scale.y, scale.z));\n}\nfloat pi = acos(-1.);\nvec3 pmod(vec2 p, float r){float a = atan(p.x,p.y)+pi/r;float n = (pi*2.)/r;return vec3(p*rot(-(floor(a/n)*n)),floor(a/n) );}\nfloat rand(vec3 p)\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise(vec3 p)\n{\n    vec3 fp = floor(p);\n\tvec3 fs = fract(p);\n    vec3 sf = vec3(1.,0.,0.);\n    \n    float a = rand(fp);\n    float b = rand(fp + sf);\n    float c = rand(fp + sf.yxz);\n    float d = rand(fp + sf.xxz);\n    float e = rand(fp + sf.yyx);\n    float f = rand(fp + sf.xyx);\n    float g = rand(fp + sf.yxx);\n    float h = rand(fp + sf.xxx);\n    \n    vec3 u = smoothstep(0.,1.,fs);\n  //  u = pow(fs,vec3(3.));\n    \n    return mix(mix(\n        \t\tmix(a,b,u.x),\n        \t\tmix(c,d,u.x),u.y),\n               mix(\n                mix(e,f,u.x),\n                mix(g,h,u.x),u.y),u.z\n            );\n}\n\nfloat fbm(vec3 p)\n{\n    float v = 0.;\n    float a = .5;\n    float f = 0.;\n    for(int i=0;i<3;i++)\n    {\n        v+=a*noise(p);\n        p*=2.;\n        a*=.5;\n    }\n    return v;\n}\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\nvec3 objectpos;\nvec2 toPolar(vec2 p)\n{\n    return vec2(length(p),atan(p.y,p.x));\n}\nfloat shell(vec3 p , float a)\n{\n    p.xz *= rot(pi);\n    vec3 scale = vec3(1.,1.,1.);\n    p.xz = clamp(p.xz,-pi/2.,pi/2.);\n    scale.x *= (sin(p.z + .96) + 1.4)/2.;\n    scale.y /= (sin(length(p.xz + vec2(0.,1.) * 2.) + 3.1) + 3.)/1. * 1.;\n    p.y = abs(p.y)+.06;\n    vec2 shift = vec2(0.,1.);\n    vec3 pp = p;\n    p.yz = (p.yz + shift) * rot( step(0.,p.y)*(sin(iTime/3. + a * 10.) - 1.)/2. ) - shift;\n    objectpos = p;\n    float o = scaleSphere(p,scale,1.);\n    o = max(o,-scaleSphere(p + vec3(0.,.4,-0.03),scale/.95,1.));\n    \n    if(o < 1.)\n    {\n        o -= sin(length(p.xz + vec2(0.,1.)) * 100.)/(3. + length(p.xz + vec2(0.,1.))*1700. );\n    }\n    \n    return o;\n}\n\nvec2 map(vec3 p)\n{\n    float o = 10.;\n    float id = 0.;\n    vec3 op = p;\n    float range = 4.3;\n    vec2 areaid = floor(p.xz/range);\n    float a = random(areaid);\n    //p.x += areaid.y/12.;\n    p.xz = mod(p.xz,range) - range/2.;\n    \n    p.x += random(areaid.yy * 12.) * 1.3;\n    p.xz *= rot(a * 10.);\n    p.yz *= rot(-a * 1.3);\n    p.y += sin(a*10.) * .3;\n    p.y -= .5;\n    if(random(areaid*10.) < .3)\n    {\n        o = shell(p,a);\n    }\n    \n    p.xz = mod(p.xz,3.) - 1.5;\n    \n    \n    float sand = -op.y + 0.2 + noise(op/3.);\n    if(sand < 1.)\n    {\n    \tsand -= fbm(op)/2.;\n        if(sand < 0.1)\n        {\n            sand -= noise(op*30.)/100.;\n        }\n    }\n    if(o > sand)\n    {\n\t\to = min(sand,o);\n        id = 1.;\n    }\n    o *= .9;\n    return vec2(o,id);\n}\n\nvec2 march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 128 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.001)\n        {\n            return vec2(depth,d.y);\n        }\n        if(depth > 60.)break;\n        depth += d.x;\n    }\n    return vec2(-depth , 0.);\n\n}\n\nvec2 shadowmarch(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 66 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.01)\n        {\n            return vec2(depth,d.y);\n        }\n        if(depth > 4.)break;\n        depth += d.x;\n    }\n    return vec2(-depth , 0.);\n\n}\n\nvec3 shellCol(vec3 pos)\n{\n    vec3 o = vec3(0.);\n    o = objectpos;\n    vec3 op = objectpos;\n    o = vec3(1.,.9,.9);\n    o -= fbm(pos*10.) * vec3(0.1,0.1,.5);\n    o -= vec3(1.) * fbm(op) * smoothstep(0.,1.,length(op.yz)*sign(op.z) ) * 1.;\n    o -= mix((sin(length(op.xz + vec2(0.,1.5)) * 60. + fbm(op * 2. + pos) * 20.) + 1. )/10. , 0. , .5);\n    vec2 pol = toPolar(op.xz + vec2(0.,1.));\n    o -= sin(pol.y * 40. + fbm(pos * 4.)*10. ) * fbm(pos) * .3;\n    return o;\n}\n\nvec3 skyCol(vec3 rd)\n{\n    vec3 o = vec3(1.);\n    float y = smoothstep(0.,1.,-rd.y);\n    o = mix(vec3(0.6,1.,1.),vec3(0.8,0.7,0.7),y);\n    o *= step(rd.y-.06 , 0.);\n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 f = vec3(0.);\n    \n    float t = floor(iTime*1.3) + pow(fract(iTime*1.3),1.1);\n    f.z += t*1.8;\n    p *= rot(sin(sin(iTime ))/62.);\n\tf.y += f.x + sin( iTime*1.3 * pi)/13.;\n\tvec3 cp = vec3(16.,-3.,-16.) ;\n    \n    cp += f;\n    //cp.yz *= rot(sin(iTime)/2. + 1.5);\n    f.x += (fbm(vec3( iTime * 1.))-.5) * 1.3;\n   // f.y += f.x +cos(iTime/2.) * 2. ;\n    vec3 target = vec3(0.) + f;\n    \n    vec3 col = vec3(1.,0.,1.);\n    \n    vec3 cd = normalize(vec3(target - cp));\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 1.2 - dot(p,p)/8.;\n    \n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    \n    vec2 d = march(cp,rd);\n    \n    vec3 sky = skyCol(rd);\n    col = sky;\n    if( d.x > 0.)\n    {\n        vec2 e = vec2(0.,0.01);\n        vec3 pos = cp + rd * d.x;\n        vec3 N = normalize(map(pos).x - vec3(map(pos - e.xyy).x , map(pos - e.yxy).x,map(pos - e.yyx).x));\n        col = N;\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        //sun.xz *= rot(iTime);\n        float diff = max(0.,dot(-sun,N));\n        diff = mix(diff , 1.,.1);\n        float sp = max(0.,dot(rd,reflect(N,sun)));\n        vec3 mat = vec3(1.);\n        if(d.y == 0.)\n        {\n            mat = shellCol(pos);\n            sp = pow(sp,10.)/6.;\n        }else {\n            sp = pow(sp,103.)/2.;\n        }\n        float up = max(0.,dot(N,vec3(0.,-1.,0.)) );\n        float down = max(0.,dot(N,vec3(0.,1.,0.)) );\n        \n        col = sp * vec3(1.) + diff * mat;\n        float shadow = step(shadowmarch(pos + N * 0.1,-sun).x,0.);\n        col.rgb *= shadow;\n        col.rgb +=  + up * vec3(.2,0.2,.5) + down * vec3(.3,.3,.4);\n        float t = 1. - exp(-.0000003 * d.x * d.x);\n        //col = mix(col,sky,t);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}