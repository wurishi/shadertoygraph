{"ver":"0.1","info":{"id":"MdVfzd","date":"1530109752","viewed":105,"name":"Simple circles and rects","username":"ma77os","description":"building block to create and move shapes","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles","shapes","rects"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2020 André Mattos\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat createCircle(vec2 uv, vec2 pos, float r){\n    float d = length(pos - uv);\n    \n    // smoothstep to correct aliasing\n    return smoothstep(r, r-d*0.05, d);\n}\n\nfloat createRect(vec2 uv, vec2 pos, float w, float h){\n    uv -= pos;\n    float left = -w*0.5;\n    float right = w*0.5;\n    float bottom = -h*0.5;\n    float top = h*0.5;\n    float blur = 0.01;\n    float leftEdge = smoothstep(left-blur, left, uv.x);\n    float rightEdge = smoothstep(right+blur, right, uv.x);\n    float bottomEdge = smoothstep(bottom-blur, bottom, uv.y);\n    float topEdge = smoothstep(top+blur, top, uv.y);\n    \n    return leftEdge * rightEdge * bottomEdge * topEdge;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \t\n    // remapping coordinates from (0 <> 1) to (-0.5 <> -0.5)\n    uv -= .5;\n    \n    // adjusting screen ratio to avoid distorted image\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    // circle 1\n    vec3 color1 = vec3(sin(iTime*0.1)*0.5+0.5, sin(iTime*0.8)*0.5+0.5, sin(iTime*1.6)*0.5+0.5);\n    vec2 pos1 = vec2(sin(iTime * 2.) * 0.3, sin(iTime) * 0.3);\n    float radius1 = 0.1;\n    vec3 circle1 = createCircle(uv, pos1, radius1) * color1;\n    \n    \n    // circle 2\n    vec3 color2 = vec3(sin(iTime*0.7)*0.5+0.5, sin(iTime*1.2)*0.5+0.5, sin(iTime*1.8)*0.5+0.5);\n    vec2 pos2 = vec2(sin(iTime * 0.8) * 0.3, sin(iTime*1.5) * 0.3);\n    float radius2 = 0.15;\n    vec3 circle2 = createCircle(uv, pos2, radius2) * color2;\n    \n    // rect 1\n    vec3 color3 = vec3(sin(iTime*0.2)*0.5+0.5, sin(iTime*1.9)*0.5+0.5, sin(iTime*0.8)*0.5+0.5);\n    vec2 pos3 = vec2(sin(iTime * 0.8) * 0.3, sin(iTime*0.4) * 0.25);\n    vec3 rect1 = createRect(uv, pos3, 0.15, 0.15) * color3;\n    \n    // rect 2\n    vec3 color4 = vec3(sin(-iTime*2.)*0.5+0.5, sin(iTime*-1.4)*0.5+0.5, sin(iTime*0.8)*0.5+0.5);\n    vec2 pos4 = vec2(sin(iTime * -0.6) * 0.3, sin(iTime*-0.9) * 0.25);\n    vec3 rect2 = createRect(uv, pos4, 0.1, 0.2) * color4;\n    \n    // combining shapes\n    vec3 c = circle1 + circle2 + rect1 + rect2;\n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}