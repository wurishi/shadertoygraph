{"ver":"0.1","info":{"id":"ldyBz3","date":"1529742340","viewed":126,"name":"dithering 001","username":"bananoid","description":"dithering","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nconst float numColors = 6.0;\nconst float numPixel = 64.0;\n\nconst float err_7_16 = .4375;\nconst float err_3_16 = .1875;\nconst float err_5_16 = .3125;\nconst float err_1_16 = .0625;\n    \nvec3 colorAt(vec2 uv){\n\t// Time varying pixel color\n\t//return 0.5 + 0.5*cos(iTime*1.0 + uv.xyx * 10.0);\n    vec3 col;\n    float w = distance(uv, vec2(0.5)); \n    col.r = cos(w * 10.012 + iTime * 0.1513) * 0.5 + 0.5;\n    col.g = cos(w * 7.0545 + iTime * 0.2431) * 0.5 + 0.5;\n    col.b = cos(w * 8.066 + iTime * 0.31345) * 0.5 + 0.5;\n    \n    //return vec3(col.r);\n    return col;\n}\n\nvec2 qPos(vec2 pos){\n\treturn round(pos * numPixel) / numPixel;\n}\n\nvec3 qColor(vec3 col){\n    return round(col * numColors) / numColors;\n}\n\nvec3 errorAt(vec2 qUV){\n\tvec3 col = colorAt(qUV);\n    vec3 newCol = qColor(col);  \n\tvec3 error = col - newCol;\n    //return qColor(error);\n    return error;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 qUV = qPos(uv);\n\t\n    vec3 col = colorAt(qUV);\n    vec3 orgCol = qColor(col); \n    \n    float r = random(qUV);\n    col = mix(col,vec3(r),0.4);\n    vec3 newCol = qColor(col);\n    \n\t//vec3 error = col - newCol;\n    \n    //oldpixel  := pixel[x][y]\n    //newpixel  := find_closest_palette_color(oldpixel)\n    //pixel[x][y]  := newpixel\n    //quant_error  := oldpixel - newpixel\n    //pixel[x + 1][y    ] := pixel[x + 1][y    ] + quant_error * 7 / 16\n    //pixel[x - 1][y + 1] := pixel[x - 1][y + 1] + quant_error * 3 / 16\n   \t//pixel[x    ][y + 1] := pixel[x    ][y + 1] + quant_error * 5 / 16\n    //pixel[x + 1][y + 1] := pixel[x + 1][y + 1] + quant_error * 1 / 16\n    //float qP = 1.0/numPixel ;\n          \n\n    \n    //newCol /=4.0;\n    //newCol = dither8x8(qPos(uv), col2);\n    \n    orgCol = mix(orgCol, newCol , floor(uv.x*2.0) );\n    fragColor = vec4(orgCol,1.0);\n    \n    //newCol = mix(vec3( 0.6, 0.0, 0.1), vec3( 0.95, 0.3, 0.0) , newCol.r);\n    \n    fragColor = vec4(newCol,1.0);;\n}","name":"Image","description":"","type":"image"}]}