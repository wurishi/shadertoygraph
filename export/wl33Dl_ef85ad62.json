{"ver":"0.1","info":{"id":"wl33Dl","date":"1578683218","viewed":135,"name":"Isosceles Triangle Approx. SDF","username":"aeva","description":"This code demonstrates a fast method for rendering a 2D isosceles triangle SDF.\n\nFor a 3D version, see https://www.shadertoy.com/view/ttc3Dl.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","triangle","isosceles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Written in 2019 by Aeva Palecek\n//\n// To the extent possible under law, the author has dedicated all copyright\n// and related and neighboring rights to this software to the public domain\n// worldwide.  This software is distributed without any warranty.\n//\n// See http://creativecommons.org/publicdomain/zero/1.0/ for more information.\n//\n\n\nconst float Height = 150.0;\nconst float Radius = 90.0;\nconst float Slope = -Height / Radius;\nconst float Ratio = sqrt(1.0/(Slope * Slope + 1.0));\nconst vec4 Pink = vec4(1.0, 0.0, 0.5, 1.0);\nconst vec4 Blue = vec4(0.0, 0.5, 1.0, 1.0);\nconst vec4 Green = vec4(0.0, 1.0, 0.5, 1.0);\nconst vec4 Gray = vec4(vec3(0.3), 1.0);\n\n\nvoid mainImage( out vec4 FragColor, in vec2 FragCoord )\n{\n    vec2 Origin = vec2(iResolution.x * 0.5, 75.0);\n      \n    vec2 Test = FragCoord.xy - Origin;\n    Test.x = abs(Test.x);\n    float Vertical = (Slope * Test.x + Height - Test.y);\n    float Perpendicular = Vertical * Ratio;\n    float SDF = -min(Perpendicular, Test.y);\n    \n    if (mod(abs(SDF), 20.0) < 1.0)\n    {\n        FragColor = Gray;\n    }\n    else if (SDF <= 0.0)\n    {\n        FragColor = Pink;\n    }\n    else\n    {\n        FragColor = Green;\n    }\n}","name":"Image","description":"","type":"image"}]}