{"ver":"0.1","info":{"id":"7d2fWh","date":"1646158398","viewed":156,"name":"Dydd GÅµyl Dewi Sant Hapus!","username":"Luther","description":"A quick daffodil for March 1st, St. David's day. St. David being Wales's patron saint and daffodils being the national flower.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["flowersdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Daffodil \n//Thanks to P.Malin and IQ!\n\nuniform sampler2D backbuffer;\n\n#define PI 3.141592654\n#define TWO_PI (2.0*PI)\n#define HALF_PI (0.5*PI)\n#define TQ_PI (1.5*PI)\n//#define ENABLE_MONTE_CARLO\n//#define ENABLE_REFLECTIONS\n#define ENABLE_FOG\n#define ENABLE_SPECULAR\n#define ENABLE_POINT_LIGHT\n#define ENABLE_POINT_LIGHT_FLARE\n//#define ENABLE_AMBIENT_OCCLUSION\n#define ENABLE_LIGHTING\n#define ENABLE_SHADOW\n#define ENABLE_VIGNETTE\n#define ENABLE_AMBIENT_LIGHT\n#define ENABLE_APPLY_COLOUR_CORRECTION\n//#define TEST_MATERIAL\n\n#define kRaymarchEpsilon 0.0001\n#define kRaymarchMatIter 64\n#define kRaymarchStartDistance 0.1\n#define kMaxDistance 400.0\n#define kIterations 64\n#define kFogDensity 0.015\n#define kGlareBrightness 0.025\n\n float GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance );\n \n \nstruct C_Ray\n{\n\tvec3 vOrigin;\n\tvec3 vDir;\n};\n\nstruct C_HitInfo\n{\n\tvec3 vPos;\n\tfloat fDistance;\n\tvec3 vObjectId;\n};\n\nstruct C_Material\n{\n\tvec3 cAlbedo;\n\tfloat fR0;\n\tfloat fSmoothness;\n\tvec2 vParam;\n};\n\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n\tfloat s = sin(fAngle);\n\tfloat c = cos(fAngle);\n\n\tvec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n\n\treturn vResult;\n}\n\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n\tfloat s = sin(fAngle);\n\tfloat c = cos(fAngle);\n\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n\n\treturn vResult;\n}\n      \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\tfloat s = sin(fAngle);\n\tfloat c = cos(fAngle);\n\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n\n\treturn vResult;\n}\n\nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\n{\n\t//if(v1.x < v2.x) return v1; else return v2;\n\treturn mix(v1, v2, step(v2.x, v1.x));\n}\n\nfloat DistCombineUnion( const in float v1, const in float v2 )\n{\n\t//if(v1.x < v2.x) return v1; else return v2;\n\treturn mix(v1, v2, step(v2, v1));\n}\n\nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\n{\n\treturn mix(v2, v1, step(v2.x,v1.x));\n}\n\nfloat DistCombineIntersect( const in float v1, const in float v2 )\n{\n\treturn mix(v2, v1, step(v2,v1));\n}\n\nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\n{\n\treturn DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\n}\n\nfloat DistCombineSubtract( const in float v1, const in float v2 )\n{\n\treturn DistCombineIntersect(v1, -v2);\n}\n\n\nfloat GetDistanceCylinderZ(const in vec3 vPos, const in float r)\n{\n\treturn length(vPos.xy) - r;\n}\n\nfloat SelectSegment(const in vec3 vPos, const in float segcount)\n{\n\t\n\tvec3 vNorm = normalize(vPos);\n\tfloat atn = (atan(vNorm.y, vNorm.x) + PI)/  TWO_PI;\n\tfloat segment = floor(atn * segcount);\n\tfloat half_segment = 0.5 / segcount;\n\tfloat seg_norm = mod((segment / segcount) + 0.25 + half_segment, 1.0);\n\t\n\n\treturn seg_norm * TWO_PI;//turn it back in to rotation\n}\n\nvec4 GetDistanceCylinderMaterialSelectorZ(const in vec3 vPos, const in float r, const in float segcount)\n{\n\t\n\t//+ PI\n\tvec3 vNorm = normalize(vPos);\n\tfloat atn = (atan(vNorm.y, vNorm.x) + PI)/  TWO_PI;\n\t//float segment = (segcount-1.0) - mod((floor(atn * (segcount - 0.5) ) + 2.0),segcount);\n\tfloat segment = floor(atn * segcount);\n\n\tfloat seg_norm = mod((segment / segcount) + 0.25, 1.0);\n\tfloat d = length(vPos.xy) - (r);// + segment * 0.1);\n\treturn vec4(d,seg_norm , vNorm.x, vNorm.y);\n}\n \n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdRoundedCylinderZ( vec3 p, float ra, float rb, float h, float offz )\n{\n  p.z += offz;\n  vec2 d = vec2( length(p.xy)-2.0*ra+rb, abs(p.z) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n\nfloat sdCappedCylinderZ( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat dDafPetal( vec3 p)\n{\n  p.z -= sin(p.y * 2.0) * 0.2 + sin(p.x *10.0) * 0.01;\n  p.x *= p.y > 0.5 ? sin(p.y + 0.5) * 1.2: 1.0;\n  return sdEllipsoid(p, vec3(0.9,1.5,0.1));\n}\n\nfloat dDafTrumpet( vec3 p, float ra, float h)\n{ \n  //oat dist = sdRoundedCylinderZ(p, r -cos(p.z) * 0.2, 0.1,  h, -0.5);  \n  p.z -= 0.3;  \n  float rb = 0.1;\n  ra -= p.z < 0.0 ? cos((p.z * 1.3) - 0.1) * 0.3 :  0.5-cos((p.z * 1.4) - 0.2) * 0.2;\n  float rearatten = clamp(p.z < 0.0 ? 1.0 : 1.0 - abs(p.z) ,0.0, 1.0);\n  float rp = atan(p.x,p.y);\n  float n = texture(iChannel0, vec2(rp * 0.001,0.0)).r * 2.0;\n  ra -= sin(rp * 12.0) * 0.022 * (0.2 + n * 0.8) * rearatten;\n  vec2 d = vec2( length(p.xy)-2.0*ra+rb, abs(p.z) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n  \n}\n\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nvec3 opCheapBend( in vec3 p, in vec3 offset, float k)\n{\n    p-= offset;\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q + offset;\n}\n\nvec3 opBendX( in vec3 p, in vec3 offset, float k)\n{    \n    return RotateX(p-offset, k * p.z) + offset;\n}\n\nvec4 GetDistanceDaf(const in vec3 vPos)\n{\n\t//initialize with material '4' and x/y UV plane\n\tvec4 vResult = vec4(10000.0, 4, vPos.x, vPos.y);\n\t//work out which cylinder segment vPos is in\t\n\tfloat r =  SelectSegment(vPos, 8.0);\n\t//and rotate the arrow domain accordingly\n\tvec3 dafdomain = RotateZ(vPos, r );    \n\t//shift outwards from centre\n    float dheight = 2.5;\n\tdafdomain.y -=dheight;\t\t\n\tfloat petalDist = dDafPetal(dafdomain);\t\t\t\t\t\n\tvResult.x = DistCombineUnion(vResult.x, petalDist);\t\n\t//remove inner cylinder\n    \n\t//float cyldist = GetDistanceCylinderZ(vPos, 1.4);\t\n\t//vResult.x = DistCombineSubtract(vResult.x, cyldist);\t\n    float trumpetDist = dDafTrumpet(vPos,0.8,2.0);\n    float trumpetInteriorDist = dDafTrumpet(vPos+vec3(0,0,0.13),0.75,2.0);\n    //vResult.x = DistCombineUnion(vResult.x, trumpetDist);\n    vResult.x = DistCombineUnion(vResult.x, trumpetDist);\n    \n    vResult.x = DistCombineSubtract(vResult.x, trumpetInteriorDist);\n    vResult.x = DistCombineUnion(vResult.x, sdRoundedCylinderZ(vPos, 0.1 - sin(vPos.z * 4.0) * 0.012, 0.1, 1.5, -0.54));\n    \n    float stamenr =  SelectSegment(vPos, 8.0);\n\t//and rotate the arrow domain accordingly\n\tvec3 stamendomain = RotateZ(vPos, stamenr);\n    float n = texture(iChannel0, vec2(stamenr * 0.002,0.0)).r * 2.0;\n    stamendomain.y -= 0.5 + n * 0.01 ;\n    vResult.x = DistCombineUnion(vResult.x, sdRoundedCylinderZ(RotateY(stamendomain,0.39 * (n - 0.5 * 2.0)) , 0.05 - sin(vPos.z * 1.0) * 0.0012, 0.1, 0.8, 0.14));\n    \n    //stemp(sdRoundedCyliner\n    vec3 voff = vec3(0.0, 1.0, -2.2);\n    vec3 stemvp = vPos.z > 2.5 ? RotateX(vPos + voff, clamp( (vPos.z - 2.5),0.0,1.5) * 1.)- voff: vPos;\n    float stem = sdRoundedCylinderZ(stemvp, 0.18, 0.2, 5.2, -5.1);\n    \n    float neckPos = 0.1;\n    //float stem2 = sdCappedCylinderZ(vPos.z > neckPos ? vPos: opBendX(vPos, vec3(0,8.0,-4.0),0.6), 0.18, 5.2);\n    float stem2 = sdRoundedCylinderZ(RotateX(vPos, PI * 0.5) + vec3(0.,-3.7,-6.0), 0.10, 0.2, 4.2,0.0);\n\n    \n    vResult.x = DistCombineUnion(vResult.x, stem);\n    vResult.x = opSmoothUnion(vResult.x, stem2, 0.8);\n\treturn vResult;\n}\n\nvec4 GetDistanceScene(const in vec3 vPos)\n{\n\tvec4 vResult = vec4(10000.0, 0.0, 0.0, 0.0);\n\tvec3 ct_domain = vPos;\n\tct_domain.y -= 4.0;\n\tvec4 vDistDaf = GetDistanceDaf(ct_domain);\n\tvResult = DistCombineUnion(vResult, vDistDaf);\n\t\n\tvec4 vDistFloor = vec4(vPos.y + 4.0, 0.01, vPos.xz);\n\tvResult = DistCombineUnion(vResult, vDistFloor);\n\t\n\t\n\treturn vResult;\n}\n \nC_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos )\n{\n\tC_Material mat;\n\t\n\t/*mat.fR0 = 0.15;\n\tmat.fSmoothness = 0.1;\n\tmat.cAlbedo = vec3(1.0,1.0,1.0);   */\n\t\n\t\n\tif(vObjId.x < 0.5)\n\t{\n\t\t// floor\n\t\tvec4 cTextureSample = texture(iChannel0, vPos.xz * 0.01);                    \n\t\tmat.fR0 = 0.02;\n\t\tmat.fSmoothness = length(cTextureSample.rgb);\n\t\tmat.cAlbedo = vec3(0.1,0.9,0.04);\n\t}\n\telse\n\t{\n\t\tmat.fR0 = 0.2;\n\t\tmat.fSmoothness = 0.0;\n        \n\t\tmat.cAlbedo = vec3(max(0.1, pow(1.0 - vPos.z * 0.6,2.1)), 1.0 - vPos.z *0.1, 0.01);                            \n\t}\n\treturn mat;\n}\n\n \nvec3 GetSkyGradient( const in vec3 vDir )\n{\n\tfloat fBlend = vDir.y * 0.5 + 0.5;\n\treturn mix(vec3(0.9,0.9, 0.9), vec3(0.5, 0.7, 1.3), fBlend);\n}\n \nvec3 GetLightPos()\n{\n\tvec3 vLightPos = vec3(0.0, 12.0, -5.0);\n\t#ifdef ENABLE_MONTE_CARLO         \n\tvLightPos += gRandomNormal * 0.2;\n\t#endif\n\treturn vLightPos;\n}\n \nvec3 GetLightCol()\n{\n\treturn vec3(582.0, 290.0, 300.0);\n}\n\nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n\treturn GetSkyGradient(vNormal);\n}\n \n\n \nvec3 GetSceneNormal( const in vec3 vPos )\n{\n\t// tetrahedron normal\n\tfloat fDelta = 0.025;\n\n\tvec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n\tvec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n\tvec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n\tvec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n\tfloat f1 = GetDistanceScene( vPos + vOffset1 ).x;\n\tfloat f2 = GetDistanceScene( vPos + vOffset2 ).x;\n\tfloat f3 = GetDistanceScene( vPos + vOffset3 ).x;\n\tfloat f4 = GetDistanceScene( vPos + vOffset4 ).x;\n\n\tvec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n\treturn normalize( vNormal );\n}\n \n\n \n// This is an excellent resource on ray marching -> https://iquilezles.org/articles/distfunctions\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\n{          \n\tresult.fDistance = kRaymarchStartDistance;\n\tresult.vObjectId.x = 0.0;\n\t\t\t\t    \n\tfor(int i=0;i<=kRaymarchMatIter;i++)                \n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tvec4 vSceneDist = GetDistanceScene( result.vPos );\n\t\tresult.vObjectId = vSceneDist.yzw;\n\t\t\n\t\t// abs allows backward stepping - should only be necessary for non uniform distance functions\n\t\tif((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\n\t\t{\n\t\t\tbreak;\n\t\t}                          \t\n\t\t\n\t\tresult.fDistance = result.fDistance + vSceneDist.x;      \n\t}\n\t\n\t\n\tif(result.fDistance >= fMaxDist)\n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tresult.vObjectId.x = 0.0;\n\t\tresult.fDistance = 1000.0;\n\t}\n}\n \nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\n{\n\tC_Ray shadowRay;\n\tshadowRay.vDir = vLightDir;\n\tshadowRay.vOrigin = vPos;\n\n\tC_HitInfo shadowIntersect;\n\tRaymarch(shadowRay, shadowIntersect, fLightDistance,25);\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \n\treturn step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );           \n}\n\n\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\n{\n\n\tvec3 vLightPos = GetLightPos();\n\tvec3 vToLight = vLightPos - intersection.vPos;\n\tvec3 vLightDir = normalize(vToLight);\n\t\n\t#ifdef ENABLE_FOG\n\t// fog\n\tfloat fFogAmount = exp(intersection.fDistance * -kFogDensity);\n\tvec3 cFog = GetSkyGradient(ray.vDir);\n\tcol = mix(cFog, col, fFogAmount) ;\n\t#endif\n\t\n\t// glare from light (a bit hacky - use length of closest approach from ray to light)\n\t#ifdef ENABLE_POINT_LIGHT_FLARE\n\n\tfloat fDot = dot(vToLight, ray.vDir);\n\tfDot = clamp(fDot, 0.0, intersection.fDistance);\n\t\n\tvec3 vClosestPoint = ray.vOrigin + ray.vDir * fDot;\n\tfloat fDist = length(vClosestPoint - GetLightPos());\n\tcol += GetLightCol() * kGlareBrightness/ (fDist * fDist);\n\t#endif      \n}\n \n// http://en.wikipedia.org/wiki/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n\tfloat fDot = dot(vNormal, -vView);\n\tfDot = min(max((1.0 - fDot), 0.0), 1.0);\n\tfloat fDot2 = fDot * fDot;\n\tfloat fDot5 = fDot2 * fDot2 * fDot;\n\treturn fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\n}\n \nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\n{\n\treturn max(0.0, dot(vLightDir, vNormal));\n}\n \nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\n{            \n\tvec3 vHalf = normalize(vLightDir - ray.vDir);\n\tfloat fNdotH = max(0.0, dot(vHalf, vNormal));\n\n\tfloat fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\n\tfloat fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n\n\treturn pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n \n// use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\n{\n\tvec3 vPos = intersection.vPos;\n\t\n\tfloat fAmbientOcclusion = 1.0;\n\t\n\tfloat fDist = 0.0;\n\tfor(int i=0; i<=5; i++)\n\t{\n\t\tfDist += 0.1;\n\t\n\t\tvec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n\t\n\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 / fDist );                                    \n\t}\n\t\n\treturn fAmbientOcclusion;\n}\n\nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\n{\n\tvec3 cScene ;\n\tvec3 vSpecularReflection = vec3(0.0);\n\tvec3 vDiffuseReflection = vec3(0.0);\n\t\n\t#ifdef ENABLE_AMBIENT_OCCLUSION\n\tfloat fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\t\n\t#else\n\tconst float fAmbientOcclusion = 1.0;\n\t#endif\n\t#ifdef ENABLE_AMBIENT_LIGHT\n\tvec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\n\tvDiffuseReflection += vAmbientLight;\n\t#endif\n\t\n\tvSpecularReflection += cReflection * fAmbientOcclusion * material.fSmoothness;\n\t\t\n\t#ifdef ENABLE_POINT_LIGHT\n\tvec3 vLightPos = GetLightPos();\n\tvec3 vToLight = vLightPos - intersection.vPos;\n\tvec3 vLightDir = normalize(vToLight);\n\tfloat fLightDistance = length(vToLight);\n\t\n\tfloat fAttenuation = 1.0 / (fLightDistance * fLightDistance);\n\t#endif\n\t\n\t#ifdef ENABLE_SHADOW\n\tfloat fShadowBias = 0.1;              \n\tfloat fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, fLightDistance - fShadowBias );\n\t#else\n\tfloat fShadowFactor = 1.0;\n\t#endif\n\t#ifdef ENABLE_LIGHTING\t\n\tvec3 vIncidentLight = GetLightCol() * fShadowFactor * fAttenuation;\n\t\n\tvDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                                  \n\tvSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\n\n\t\n\tvDiffuseReflection *= material.cAlbedo;\n\t#else\n\tvDiffuseReflection = material.cAlbedo;// * fShadowFactor;\n\t#endif\n\t\n\t#ifdef ENABLE_SPECULAR\n\tfloat fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\n\tcScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\n\t#else\n\tcScene = vDiffuseReflection;\n\t#endif\n\t\n\treturn cScene;\n}\n \nvec3 GetSceneColourSimple( const in C_Ray ray )\n{\n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 16.0, 32);\n\t\t\t     \n\tvec3 cScene;\n       \n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n      \n\t\t// use sky gradient instead of reflection\n\t\tvec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\n      \n\t\t// apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n       \n\tApplyAtmosphere(cScene, ray, intersection);\n       \n\treturn cScene;\n}\n \nvec3 GetSceneColour( const in C_Ray ray )\n{                                                           \n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, kMaxDistance, kIterations);\n\t\t     \n\tvec3 cScene;\n\t\n\tif(intersection.vObjectId.x < 0.0001)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\t\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n\t\n\t\tvec3 cReflection;\n\t\t#ifdef ENABLE_REFLECTIONS\t\n\t\t{\n\t\t\t// get colour from reflected ray\n\t\t\tfloat fSepration = 0.05;\n\t\t\tC_Ray reflectRay;\n\t\t\treflectRay.vDir = reflect(ray.vDir, vNormal);\n\t\t\treflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\n\t\t\t\t\t\t\t\t\t       \n\t\t\tcReflection = GetSceneColourSimple(reflectRay);                                                                          \n\t\t}\n\t\t#else\n\t\tcReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                               \n\t\t#endif\n\t\t// apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n\t\n\tApplyAtmosphere(cScene, ray, intersection);\n\t\n\treturn cScene;\n}\n \nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, in vec2 fragCoord, out C_Ray ray)\n{\n\tvec2 vPixelCoord = fragCoord.xy;\n\t#ifdef ENABLE_MONTE_CARLO\n\tvPixelCoord += gPixelRandom.zw;\n\t#endif\n\tvec2 vUV = ( vPixelCoord / iResolution.xy );\n\tvec2 vViewCoord = vUV * 2.0 - 1.0;\n\n\tvViewCoord *= 0.75;\n\t\n\tfloat fRatio = iResolution.x / iResolution.y;\n\n\tvViewCoord.y /= fRatio;                            \n\n\tray.vOrigin = vPos;\n\n\tvec3 vRight = normalize(cross(vForwards, vWorldUp));\n\tvec3 vUp = cross(vRight, vForwards);\n\t     \n\tray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);         \n}\n \nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, in vec2 fragCoord, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\n \nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n\treturn vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n \nvec3 Tonemap( const in vec3 cCol )\n{\n\t// simple Reinhard tonemapping operator      \n\treturn cCol / (1.5 + cCol);\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tC_Ray ray;\n\t\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse.x += iTime * 0.05 ;\n\t\n\tvec3 vCameraPos = OrbitPoint(-mouse.x * 14.0 + PI, \n\t\t\t\t\t\t\t\t  mouse.y * PI * 0.2 + PI * 0.025) * 17.0 - vec3(0.0, 0.9, 0.0);\n\t\n\tGetCameraRayLookat( vCameraPos, vec3(0.0, 5.0, 0.0), fragCoord, ray);\n\t//GetCameraRayLookat(vec3(0.0, 0.0, -5.0), vec3(0.0, 0.0, 0.0), ray);\n\t\n\tvec3 cScene = GetSceneColour( ray );\t\n\t#ifdef ENABLE_APPLY_COLOUR_CORRECTION\n\tfloat fExposure = 2.1;\n\tcScene = cScene * fExposure;\n\tvec3 cCurr = Tonemap(cScene );\n\t#else\n\tvec3 cCurr = cScene;\n\t#endif\n\n\tvec3 cFinal = cCurr;\n\n\t\n\tfloat fAlpha = 1.0;\n\t#ifdef ENABLE_VIGNETTE\n\tvec2 npos = (fragCoord.xy / iResolution.xy) - vec2(0.5, 0.5);\n\tfloat vignette = 1.2 - (length(npos) * 0.7);\n\tcFinal.rgb *= vignette * vignette;\n\t#endif\n\tfragColor = vec4( cFinal, fAlpha );\t\t\n}\n","name":"Image","description":"","type":"image"}]}