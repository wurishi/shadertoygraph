{"ver":"0.1","info":{"id":"Xdc3Rf","date":"1451224534","viewed":649,"name":"Simple graph plotter","username":"waterhead","description":"A very basic graph plotter, using a simple tangent calculation in order to draw the graph. In fact choosing a \"thickness\"-value being too big (try 20.0) will result in artifacts due to too much of the tangent being drawn.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["1d","graph","fx","function","plot","plotter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float fn(in float x) {\n    // function to be plotted...\n    return 0.3 * sin(x * 9.0 + iTime * 9.0) / (0.41 *(0.1 + abs(x))) * 1.0;\n}\n\n\nfloat grid(in float step, in float position, in float pixelWidth) {\n    #define ALTERNATIONS 10.0\n\n    float   m           = mod(position, step),\n            distance    = min(m, step - m),\n            intensity   = clamp(0.75 * pixelWidth / distance, 0.0, 1.0),\n            alternation = mod(floor((position + 0.5 * step) / step), ALTERNATIONS);\n    \n    return intensity * (1.0 - (min(alternation, ALTERNATIONS - alternation) / (0.6 * ALTERNATIONS)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n                        // little eye candy, let's move in graph for better throwing up\n    float   timeScale   = 0.1,\n            time        = iTime * timeScale,\n            viewSize    = (0.7 + 0.5 * sin(time)) * 5.0,\n            centerX     = sin(time*2.31) * 5.0;\n    \n                        // defines the viewport bounds of the displayed graph\n    float   left        = -viewSize + centerX,\n            right       =  viewSize + centerX,\n            top         =  viewSize,\n            bottom      = -viewSize;\n\n                        // convert fragment's pixel position to graph space location\n    float   locationX   = left   + (right - left) * fragCoord.x / iResolution.x,\n            locationY   = bottom + (top - bottom) * fragCoord.y / iResolution.y;\n\n                        // calculate width of a pixel in graph space\n    float   pixelWidth  = (right - left) / iResolution.x;\n\n                        // calculate two points left and right of current graph space location\n    float   x1          = locationX - 0.1 * pixelWidth, y1 = fn(x1),\n            x2          = locationX + 0.1 * pixelWidth, y2 = fn(x2);\n\n                        // get distance from point at (locationX, locationY)\n                        // to tangent given by (x1, y1) and (x2, y2)\n    float   distance    = abs((y2 - y1) * locationX - (x2 - x1) * locationY + x2*y1 - y2*x1 ) /\n                          sqrt((y2-y1)*(y2-y1) + (x2-x1)*(x2-x1));\n\n    float   thickness   = 1.75,\n            graphColor  = 0.8 * (1.0 - clamp(distance / (thickness * pixelWidth), 0.0, 1.0)),\n            gridColor   = 0.5 * grid(1.0, locationY, pixelWidth) +\n                          0.5 * grid(1.0, locationX, pixelWidth);\n    \n    fragColor = vec4(graphColor,\n                     graphColor + gridColor,\n                     graphColor,\n                     1.0);\n}","name":"","description":"","type":"image"}]}