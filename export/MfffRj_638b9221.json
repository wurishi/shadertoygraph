{"ver":"0.1","info":{"id":"MfffRj","date":"1731933199","viewed":69,"name":"Perlin fishes","username":"DinoDaredevil","description":"Perlin fishes","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fishes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash33(vec3 p3)\n{\n p3 = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3(p3.x+p3.y, p3.x+p3.z, p3.y+p3.z)*p3.zyx);\n}\n\nfloat perlinNoise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return  mix(\n                mix(\n                    mix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                        w.x),\n                    w.z),\n                mix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                        w.x),\n                    w.z),\n                w.y\n             );\n}\n\nconst vec3 white = vec3(1.0);\nconst vec3 orange = vec3(255.0/255.0, 91.0/255.0, 33.0/255.0);\nconst vec3 green = vec3(45.0/255.0, 255.0/255.0, 185.0/255.0);\nconst float noiseScale = 1.0;\nconst float noiseSpeed = 0.5;\n\nvec3 draw(vec2 uv, vec3 paintColor, float randomSweep) {\n    float radius = length(uv);\n    vec4 music = texture(iChannel0, vec2(0.0, 0.0));\n    float musicVolume = smoothstep(-2.0, 2.0, music.r + 0.2);\n   \n    float noise = perlinNoise(vec3(uv * noiseScale, (randomSweep + iTime) * noiseSpeed)) + 0.0;\n    \n    float mask = 0.0;\n    float maskInnerRadius = 0.2; //+ perlinNoise(vec3(uv * noiseScale, iTime * noiseSpeed));\n    float maskOutRadius = 1.5;\n    float maskMiddleRadius = (maskOutRadius + maskInnerRadius) / 2.;\n    mask = smoothstep(maskInnerRadius, maskMiddleRadius , radius);\n    mask = mask + smoothstep(maskOutRadius, maskMiddleRadius, radius) - 1.;\n    \n    float lightness = noise * mask * musicVolume * 4.;\n    \n    vec3 color = paintColor * lightness;\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 orangePart = draw(uv, orange, 0.0);\n    vec3 greenPart = draw(uv, green, 1231.0);\n    // Output to screen\n    fragColor = vec4(orangePart + greenPart, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}