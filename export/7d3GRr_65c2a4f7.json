{"ver":"0.1","info":{"id":"7d3GRr","date":"1629044599","viewed":124,"name":"Laser Projector Effect","username":"BrushC","description":"What was originally going to be a circular rune generator, then it evolved into this inefficient but still cool projector effect. I think for my next project I will aim higher.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["effect","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --------------------------------------------------------------------------------------\n// License CC0 - http://creativecommons.org/publicdomain/zero/1.0/\n// To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n// ----------------------------------------------------------------------------------------\n// Code by Andrew Combs (BrushC)\n\n// Constants\n#define RES   iResolution.xy\n#define ASP   iResolution.y/iResolution.x\n\n#define RAND  iChannel0\n#define RESR  iChannelResolution[0]\n\n// Shader settings (Change these)\n#define IMG   iChannel1\n#define GRID  7.\n#define OFST  0.2\n#define TSCL  1.\n\n\n\n// Begin Code\n\n// Main image aspect correction\nvec2 asp_correct(vec2 coord) {\n    return coord * vec2(1, ASP);\n}\n\n// Random float value from image\nfloat rand(vec2 seed) {\n    return texture(RAND, seed*RES.xy/RESR.xy).r-.5;\n}\n\nfloat invert(float x) {\n    return 1.-x;\n}\n\n// Circle generator\nfloat ellipse(vec2 coord, vec2 uv, vec2 scalar, float scale, float smoothing) {\n    scale /= 4.;\n    vec2 m_uv = uv*scalar;\n    float x = smoothstep(scale+smoothing, scale, length(m_uv-coord));\n    return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/RES;\n    \n    // Time offset\n    vec2 time = (iTime)*vec2(OFST*10., -OFST*.5);\n    \n    // Pixelation method from aiekick: https://www.shadertoy.com/view/4lXGzS\n    float dx = GRID/RES.x;\n    float dy = GRID/RES.y;\n    vec2 pv = vec2(dx*(floor(uv.x/dx) + 0.5),\n                   dy*(floor(uv.y/dy) + 0.5));\n                   \n    //vec3 tex = texture(IMG, uv).rgb;\n    vec3 tex = texture(IMG, pv).rgb;\n    tex *= texture(RAND, 1.-uv+time/2.).rgb*1.1;\n                   \n    // Grid UV (Whole)\n    vec2 guv = uv + time*TSCL;\n    vec2 gv = vec2(dx*(fract(guv.x/dx) + 0.5),\n                   dy*(fract(guv.y/dy) + 0.5));\n    gv *= (RES/(GRID*2.));\n    \n    // Grid UV (Horizontal Only)\n    vec2 gvv = vec2(uv.x*dx,\n                    dy*(fract(guv.y/dy) + 0.5));\n    gvv *= (RES/(GRID*2.));\n    gvv.x = (gvv.x-.25)/4. + .5;\n    gvv.y = (gvv.y-.36)*2. + .25;\n    \n    \n    float colg = float(ellipse(vec2(.5), gv, vec2(1), length(tex), 0.01));\n    float coll = float(ellipse(vec2(.5), gvv, vec2(1), length(tex)/1.5, 0.01));\n    \n    float col = colg + coll*.5;\n\n    // Output to screen\n    //fragColor = vec4(gvv, 0, 1.0);\n    fragColor = vec4(vec3(0.2, 1., 0.2)*col, 1.0);\n}","name":"Image","description":"","type":"image"}]}