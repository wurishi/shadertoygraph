{"ver":"0.1","info":{"id":"XsdXWH","date":"1459104355","viewed":116,"name":"flower child","username":"cameron_hall","description":"tunnel vision","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// tweaked copy of https://www.shadertoy.com/view/Xds3zN by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 hue(vec3 color, float shift) {\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);\n\n    // Convert to YIQ\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n\n    // Calculate the hue and chroma\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    // Make the user's adjustments\n    hue += shift;\n\n    // Convert back to YIQ\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    // Convert back to RGB\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n\n    return color;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h ) {\n  vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    //return max(-d1,d2);\n    return min(d1, d2);\n}\n\nfloat size = .25;\nfloat depth = .25;\n\nvec2 map( in vec3 pos )\n{\n    //pos.x += sin(pos.z+iTime)*0.012;\n    //pos.y += cos(pos.z+iTime)*0.012;\n    \n    pos.z = mod(pos.z,depth*3.)-depth*1.5;\n    pos.xy = mod(pos.xy,size*2.)-size;\n    float box = sdBox( pos, vec3(size-0.05, size-0.05, depth));\n    float cyl = sdCappedCylinder( pos, vec2(size, depth+0.01));\n     \n    vec2  res = vec2(opS(cyl, box) ,1.5); \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.0;\n    float tmax = 150.0;\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<150; i++ )\n    {\n\t\tvec2 res = map( ro+rd*t );\n        if(  t>tmax ) break;\n        t += res.x;\n\t\tm = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    \n    return vec2( t, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.01, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\tmap(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\tmap(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\tmap(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\t\n    return normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= .95;\n    }\n    \n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n    if( m > -0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        float occ = calcAO( pos, nor );\n\t\tcol = hue(vec3(.4, .8, .7),(1.-occ)*depth*5.15)*occ*2.85;\n        col = mix( col, vec3(1.0), 1.0-exp( -0.25*res.x*res.x ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n \n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n \n\t// camera\n\tvec3 ro = vec3(0., 0., iTime );\n\t\n    vec3 ta = ro+vec3( 0., 0.,1. );\n\t\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 3.14159*0.25 );\n\n    // ray direction\n\tvec3 rd = ca * normalize(vec3(p.xy,1.));\n\n    // render\n    vec3 col = render( ro, rd );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}