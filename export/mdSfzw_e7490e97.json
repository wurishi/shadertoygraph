{"ver":"0.1","info":{"id":"mdSfzw","date":"1689611173","viewed":114,"name":"Cosmic Clock 6","username":"ChunderFPV","description":"It's about time for another cosmic clock.\nMouse Y to warp.\nTry increasing scale & detail (lines 47 & 48).","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["clock","spiral","space","stars","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T iDate.w\n#define CS(a) cos(a-vec2(0, 1.5708))                           // vec2(cos(a), sin(a))\n#define H(a) (cos(vec3(0,1,2)+(a)*6.3)*.5+.5)                  // hue\n#define N(r) ((abs(r) > 1.) ? 1./(2.*sign(r)-r): r)            // range +/-2 to number line\n#define DS(n,a) min(1., pr/length(u-CS(a-n*p2*r)*p))           // denominator spiral\n#define FS(n,a) min(1., pr/length(u-CS(a-p2*sqrt(n*r*2.))*p))  // fraction spiral\n#define S(s,x) s = max(s, DS(t.x, t.x*cr+sr-t.x*p2))           // clock spiral\n#define CH(w,x) max(0., w/length(v*ws-CS(-t.x*p2+sr)))         // clock hand\n\n// digit display modified from https://www.shadertoy.com/view/stlSzM\n#define bcd(i) (i/10*6+i)\n#define digit(u,i) texture(iChannel0, (u)/16.+vec2(float(i)/16., .75)).x\n#define draw_digit(c,u,i) if(abs(u).x < .5 && abs(u).y < .5) c += (1.-c)*digit(u+.5, i)\n#define draw_bcd(c,u,i,b) if (b) draw_digit(c, u, (i&0xf0)>>4); draw_digit(c, u-vec2(.5,0),(i&0xf))\n\n// draw time: coords, offset, size\nfloat dt(vec2 u, vec2 o, float s)\n{\n    u -= o; // offset\n    u /= s; // size\n    float c = 0.,\n          t = T; // iDate.w\n    ivec2 d = ivec2(mod(t/3600., 12.), mod(t/60., 60.)); // hour, min\n    if (d.x == 0) d.x = 12; // change 0 to 12\n    u.x += .85;\n    draw_bcd(c, u, bcd(d.x), (d.x > 9)); // 1st & 3rd digits\n    u.x -= .85;\n    draw_digit(c, u, 10); // colon\n    u.x -= .35;\n    draw_bcd(c, u, bcd(d.y), true); // 2nd & 4th digits\n    return c;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         v = (U-.5*R)/R.y,      // coords\n         u = v,                 // coords to transform\n         m = iMouse.xy/R*4.-2.; // mouse coords\n    \n    vec3 t = mod(T/vec3(43200., 3600., 60.), 1.), // hour, min, sec\n         bgc = H(length(v)+.2)*.2+.1, // background color\n         hc = vec3(.9, .3, .2),       // hand color\n         c = bgc;\n    \n    float p2 = 6.2832, // pi*2\n          s = 150.,    // scale\n          l = 20.,     // overlap loop (increase for detail near 0)\n          ws = 2.8,    // warp scale (clock rim): 2 = edge of screen y\n          cl = 1.8,    // clamp strength (max 2)\n          e = N(clamp(m.y, -cl, cl)), // exponent from mouse\n          z = pow(s, e)*ws,           // zoom\n          t12 = mod(T/3600., 12.);    // 12 hour period\n    \n    if (t12 < 1.) t12 += 12.; // change 0 to 12\n    u *= z; // apply zoom\n    \n    float pr = max(length(fwidth(u))*.6, .0013*z), // point radius\n          h = length(u),                // hypotenuse of xy\n          sr = p2/4.,                   // starting rotation\n          cr = pow(z/ws, 1./e)*p2,      // counter rotation\n          fr = sqrt(abs(t12)*cr*2.*p2), // fs counter rotation\n          i, r, p, hs, ms, ss, fs, f;\n    \n    // form spirals\n    for (i=0.; i++<l;) // cell overlap loop\n        r = max(0., round((exp(log(h)/e)-i)/l))*l+i, // radius\n        p = pow(r, e), // transform with exponent\n        S(hs, x), // hour\n        S(ms, y), // min\n        S(ss, z), // sec\n        fs = max(fs, FS(t12, fr+sr)); // frac spiral\n    \n    // add spirals & color\n    c += hs*hc*.1+hs*.8 + \n         ms*hc.brg*.1+ms*.6 + \n         ss*hc.gbr*.1+ss*.4;\n    \n    c *= fs*3.+c*.3; // darken with fraction spiral\n    c *= min(1., abs(e)*.5); // fade near 0\n    \n    // hands\n    c += CH(.05, x) * hc;     // hour\n    c += CH(.02, y) * hc.brg; // min\n    c += CH(.03, z) * hc.gbr; // sec\n    \n    f = length(v)*ws;\n    c += pow(min(f, 1./f), 5.)*bgc; // clock frame (ring)\n    \n    c += dt(v, vec2(.0, .45), .1)*bgc*1.6; // digital clock\n    \n    C = vec4(c*c+c*.5, 1);\n}","name":"Image","description":"","type":"image"}]}