{"ver":"0.1","info":{"id":"4tGyRt","date":"1537240401","viewed":137,"name":"Homestuck Aspect Rage","username":"dahart","description":"Homestuck Aspect Rage. Use mouse to scrub time.\nInspired by https://www.reddit.com/r/homestuck/comments/7g68ts/rage_pixel_art/","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","pixelart","aspect","homestuck","rage","yokcos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// https://www.reddit.com/r/homestuck/comments/7g68ts/rage_pixel_art/ (found via https://www.reddit.com/user/yokcos700/posts?sort=top)\n// https://g.redditmedia.com/wsQ2RZgpaaI7gJ6iN1qSvxvE9PgloyPJ6sycUDtNhM0.gif?fm=mp4&mp4-fragmented=false&s=fe1f38884e7c869d01de06e032900290\n// https://www.reddit.com/r/PixelArt/comments/7j0h0t/homestuck_aspects_oc/\n// http://mspaintadventures.wikia.com/wiki/Aspect\n// http://mspaintadventures.wikia.com/wiki/Aspect?file=ZodiacAspects.png\n\n//#define PIXELATE\n\nconst vec3 white  = vec3(1., 1., 1.);\nconst vec3 black  = vec3(0., 0., 0.);\nconst vec3 darkpurple = vec3(1., 0., 1.) * .15;\nconst vec3 purple = vec3(1., 0., 1.) * .5;\n\n// cyclic repeating 1.0 width pulse with duty cycle and phase offset\nfloat pulseRep(float x, float dutyCycle, float phaseOffset) {\n    if (fract(x - phaseOffset) < dutyCycle) return 1.;\n    return 0.;\n}\n\nvec4 rageBg(vec2 uv, float time, float dx) {\n    // d is [0..1] from upper left to bottom right\n    float d = .5 + .5 * (dot(nop.zx, (uv - .5*nop.zz)));\n    // d2 is the other diagonal\n    float d2 = .5 + .5 * (dot(nop.zz, (uv - .5*nop.zz)));\n    \n    // split d into slices\n    const float nslices = 128.;\n    float dn = d * nslices;\n    int s = int(dn);\n    float df = floor(dn)/nslices;\n    \n    // target brightness\n    float b = 1. - 2.*abs(.5 - df) - .15;\n    \n    // dithered. iChannel0 should be rgbRand256\n    //vec2 dbuv = vec2(float(s)+.5, .5) / vec2(textureSize(iChannel0, 0)); // row 1 of random numbers\n    //vec3 rnd = texture(iChannel0, dbuv).rgb;\n    vec3 rnd = texelFetch(iChannel0, ivec2(s, 00), 0).rgb;\n        \n    float dutyCycle = b*2.;\n    vec3 hl = purple, bg = darkpurple;\n    if (b > .7) { bg = purple; hl = mix(purple, white, .4); dutyCycle = 2.*(b - .7); }\n    if (s % 2 == 0) dutyCycle = round(dutyCycle);\n    float phaseOffset = rnd.y;\n    float velocity = rnd.z * .5 + .5;\n    vec3 color = bg;\n    if (pulseRep(d2/velocity+time, dutyCycle, phaseOffset) > .5) color = hl;\n    \n    return vec4(color, 1.);\n}\n\n\n// bubble at (0,0) with radius 1 and strength s\nvec2 sdBubbleXCRS(vec2 x, vec2 c, float r, float s) {\n    vec2 xc = x - c;\n    float d = length(xc);\n    if (length(xc) > r) return x;\n    float b = sqr(1. - d/r); // square makes the outer edge smooth, but add non-linearity too\n    vec2 nxc = normalize(xc);\n    return x - nxc * d * b * s;\n}\n\n\nvec4 rageSymbol(vec2 uv, float time, float dx)  {\n    vec4 color = vec4(0.);\n    \n    // mirror right to left\n    vec2 ruv = uv;\n    if (ruv.x < .5) {\n        ruv.x = (1. - ruv.x);\n    } else {\n        ruv.x;\n    }\n\n    if (uv.y > .6 * ruv.x + .13) {\n\t    // eyes\n        const vec3[] pts = vec3[16](\n            vec3(.570, .520, .015),\n            vec3(.580, .500, .015),\n            vec3(.550, .480, .016),\n            vec3(.520, .520, .021),\n            vec3(.550, .600, .030),\n            vec3(.650, .680, .045),\n            vec3(.770, .710, .045),\n            v30,v30,v30,\n            v30,v30,v30,\n            v30,v30,v30\n        );\n        const int npts = 7;\n\n        Hit hit = calcCurveHit(ruv, npts, pts);\n        hit.dBound = sdSubtract(hit.dBound, sdEdgePoints(ruv, vec2(.76, .71), vec2(.755, .69)));\n        if (hit.dBound < dx) {\n            vec3 n = calcCurveRoundNormal(ruv, hit);\n            color = premult(mix(purple, white, .2+.6*dot(n, vec3(0.,0.,1.))), S(0., -dx, hit.dBound));\n        }\n        //color += vec4(.3); // show bound\n    } else {\n        // mouth\n        const vec3[] pts = vec3[16](\n            vec3(.740, .540, .008),\n            vec3(.760, .565, .008),\n            vec3(.800, .550, .010),\n            vec3(.790, .460, .035),\n            vec3(.700, .390, .045),\n            vec3(.650, .360, .055),\n            vec3(.550, .310, .065),//.090),\n            vec3(.400, .310, .075),\n            v30,v30,v30,\n            v30,v30,v30,\n            v30,v30\n        );\n        const int npts = 8;\n\n        vec2 buv = sdBubbleXCRS(ruv, vec2(.5, .31), .25, 1.5);\n        Hit hit = calcCurveHit(buv, npts, pts);\n        \n        float dMouth = sdSubtract(\n            sdCircle( ruv-vec2(.5, .22), .15 ),\n            sdCircle( ruv-vec2(.5, .04), .3 ));\n        hit.dBound = sdSubtract(hit.dBound, dMouth);\n\n        if (hit.dBound < dx) {\n            vec3 n = calcCurveRoundNormal(buv, hit);\n            color = premult(mix(purple, white, .2+.6*dot(n, vec3(0.,0.,1.))), S(0., -dx, hit.dBound));\n        }\n        //color += vec4(.3); // show bound\n    }\n\n    \n    return color;\n}\n\nvec4 rageHorns( vec2 huv, float time, float dx ) {\n    vec4 color = vec4(0.);\n    \n    const vec3[] pts = vec3[16](\n        vec3(.77, .70, .015),\n        vec3(.78, .73, .021),\n        vec3(.79, .79, .022),\n        vec3(.78, .87, .020),\n        vec3(.80, .92, .015),\n        vec3(.85, .98, .010),\n        v30,v30,v30,\n        v30,v30,v30,\n        v30,v30,v30,\n        v30\n    );\n    const int npts = 6;\n\n    Hit hit = calcCurveHit(huv, npts, pts);\n\n    if (hit.dBound < dx) {\n        vec3 n = calcCurveRoundNormal(huv, hit);\n        color = premult(mix(purple, white, .5 + .5 * dot(n, normalize(vec3(-1.,0.,.5)))), S(0., -dx, hit.dBound));\n    }\n    return color;\n}\n\nvec4 rageSlashes( vec2 uv, float time, float dx ) {\n    vec4 color = vec4(0.);\n    \n    // d is [0..1] from upper left to bottom right\n    float rd = dot(nop.zx, (uv - .5*nop.zz));\n    float d = .5 + .5 * rd;\n    // d2 is the other diagonal [0..1]\n    float rd2 = dot(nop.zz, (uv - .5*nop.zz));\n    float d2 = .5 + .5 * rd2;\n\n    // split d into slices\n    const float nslices = 17.;\n    float dn = d * nslices;\n    int s = int(dn);\n    if (s < 7 || s > 9) return color;\n    float df = (floor(dn) + .5)/nslices;\n    \n    vec2 sliceCenter = vec2(0.5) + (df*2. - 1.) * nop.zx / 2.;\n    float travDist = .32 * (1. - 2. * abs(df - .5));\n    \n    vec2 p1 = sliceCenter - nop.zz * remap(S(.29, .69, time-.07), 0., 1., -travDist, travDist);\n    vec2 p2 = sliceCenter - nop.zz * remap(S(.30, .70, time-.00), 0., 1., -travDist, travDist) + nop.xz * .0001;\n    vec2 p3 = sliceCenter - nop.zz * remap(S(.31, .71, time+.07), 0., 1., -travDist, travDist);\n    \n    Hit hit = calcBezierHit(uv, vec3(p1, .0), vec3(p2, .03), vec3(p3, .0) );\n    if (hit.dBound < dx) {\n        float aa = S(0., -dx, hit.dBound);\n        const float t1 = .2, t2 = .5;\n        float vis = S(t1, t2, time)*S(1.-t1, 1.-t2, time);\n        color = premult(white, aa * vis);\n    }\n    return color;  \n}\n\nvec4 Rage( vec2 uv, float time, float dx ) {\n    float r = length(uv);\n    \n    float phaseTime = fract(time);\n    float phaseTimeEaseOut = sqrt(1.-sqr(1.-phaseTime));\n    float phaseTimeEaseOutFast = sqrt(1.-sqr(1.-min(phaseTime/.5, 1.)));\n        \n    // background\n    vec4 color = nop.yyyy;\n    color = comp(color, rageBg(uv, phaseTime, dx));\n    \n    // symbol\n    if (uv.x > .17 && uv.x < .83 && uv.y > .18 && uv.y < .76) {\n\t    vec2 luv = uv;\n        if (fract(luv.y*32.) < .5) {\n            luv.x += .02 * sin(phaseTime*15.) * L(.0, .7, phaseTime);\n        } else {\n            luv.x -= .02 * cos(phaseTime*15.) * L(.0, .7, phaseTime);\n        }\n    \tcolor = comp(color, rageSymbol(luv, phaseTime, dx));\n    \t//color += .1; // show bound\n    }\n    \n    // horns\n    vec2 huv = uv;\n    float dir = 1.;\n    if (huv.x < .5) {\n        huv.x = 1. - huv.x;\n        dir = -1.;\n    }\n    if (huv.x > .7 && huv.x < .9 && huv.y > .67 && huv.y < 1.) {\n        float rhAlpha = 1.;\n        if (fract(huv.y*32.) < .5) {\n            huv.x -= dir * .02 * L(.0, .3, phaseTime);\n            rhAlpha = L(.1, .6, phaseTime);\n        } else {\n            huv.x += dir * .02 * L(.3, .7, phaseTime);\n            rhAlpha = L(.1, .65, phaseTime);\n        }\n        vec4 rhColor = rageHorns(huv, phaseTime, dx);\n    \tcolor = comp(color, premult(rhColor.rgb, rhColor.a*rhAlpha));\n    \t//color += .1; // show bound\n    }\n    \n    // slashes\n    if (true) {\n        vec4 slashesColor = rageSlashes(uv, phaseTime, dx);\n        color = comp(color, slashesColor);\n    }\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float margin = .5 * (iResolution.x - iResolution.y);\n\tvec2 uv = (fragCoord.xy - X*margin) / iResolution.yy;\n    float mouseU = (iMouse.x - margin) / (iResolution.x - 2.*margin);\n    float time = iTime + mouseU;\n    float dx = fwidth(length(uv)) * 1.5;\n    \n#ifdef PIXELATE\n    uv = floor(uv * 64.) / 64.;\n    time = floor(time * 16.) / 16.;\n#endif // PIXELATE\n\n    fragColor = vec4(0.);\n    if (uv.x >= 0.0 && uv.x <= 1.0) fragColor = Rage(uv, time, dx);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define S(a,b,t) smoothstep(a,b,t)\n#define H(a,b,t) (step(a,t)*(1.-step(b,t)))\n#define unlerp(a,b,t) ((t-a)/(b-a))\n#define v30 vec3(0.)\n\n// lump between a and b. \n// returns 0 when t is outside [a,b]\n// returns 1 at t=(a+b)/2.\n// smoothstep from center to either end (t==a, t==b)\nfloat L(float a, float b, float t) {\n    float u = unlerp(a, b, t);\n    return S(0., 1., 2.*u) * S(0., 1., 2. - u*2.);\n}\n\n// take [0, 1], return [0, .5] + [.5, 0]\nfloat mirror(float x) { return .5-abs(x-.5); }\n\nfloat N(float t) {\n\treturn fract(sin(t*10234.324)*123423.23512);\n}\n\n// remove r from n, i.e., project n onto plane with normal r\nvec3 remove(vec3 n, vec3 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\nvec2 remove(vec2 n, vec2 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\n\nvec2 rot90(vec2 v) {\n    return vec2(v.y, -v.x);\n}\n\nconst vec2 X = vec2(1., 0.);\nconst vec3 nop = vec3(-1., 0., 1.);\nconst float pi = 4. * atan(1.); //3.14159265358979323;\nconst float tau = 8. * atan(1.); //2. * pi;\nconst float maxFloat = intBitsToFloat(0x7f7fffff);\n\nvec4 premult(vec4 color) {\n    return vec4(color.rgb * color.a, color.a);\n}\n\nvec4 premult(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n}\n\nvec4 comp(vec4 bg, vec4 fg) {\n    return fg + bg * (1. - fg.a);\n}\n    \nvec4 comp(vec4 bg, vec3 fg, float a) {\n    return vec4(fg + bg.rgb * (1. - a), bg.a + a);\n}\n    \nvec3 comp(vec3 bg, vec3 fg, float a) {\n    return fg + bg * (1. - a);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3., p3 = p*p*p;\n    float q = a * (2.*a*a - 9.*b) / 27. + c;\n    float d = q*q + 4.*p3 / 27.;\n    float offset = -a / 3.;\n    if(d >= 0.) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1./3.));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27. / p3) * q / 2.) / 3.;\n    float m = cos(v), n = sin(v)*1.732050808;//sqrt(3.);\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.) + offset;\n}\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Find the signed distance from a point to a bezier curve\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdBezier(vec2 p, vec3 A, vec3 B, vec3 C)\n{    \n    //B = (4.0 * B - A - C) / 2.0;\n    // handle instability when B is midpoint between A and C\n    //B = vec3(mix(B.xy + vec2(1e-4), B.xy, abs(sign(B.xy * 2.0 - A.xy - C.xy))), B.z);\n    \n    vec3 a = B - A;\n    vec3 b = A - B * 2.0 + C;\n    vec3 c = a * 2.0;\n    vec2 d = A.xy - p;\n    \n    vec3 k = vec3(3.*dot(a.xy,b.xy),2.*dot(a.xy,a.xy)+dot(d.xy,b.xy),dot(d.xy,a.xy)) / dot(b.xy,b.xy);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0., 1.);\n    vec3 it = vec3(1.0) - t;\n\n    vec3 pos0 = A + (c + b*t.x)*t.x;\n    vec3 pos1 = A + (c + b*t.y)*t.y;\n    vec3 pos2 = A + (c + b*t.z)*t.z;\n\n    float dis0 = length(pos0.xy - p) - pos0.z;\n    float dis1 = length(pos1.xy - p) - pos1.z;\n    float dis2 = length(pos2.xy - p) - pos2.z;\n    \n\tfloat minT = t.x;\n    vec3 minP = pos0;\n\tfloat minDis = dis0;\n\tif (dis1 < minDis) { minDis = dis1; minT = t.y; minP = pos1; }\n\tif (dis2 < minDis) { minDis = dis2; minT = t.z; minP = pos2; }\n            \n    return vec4(minDis, minDis + minP.z, signBezier(A.xy, B.xy, C.xy, p), minT);\n}\n\nfloat sdBezierMin2(vec2 p, vec3 a, vec3 b, vec3 c, float dist) {\n    vec4 d = sdBezier(p, a, b, c);\n    if (d.x < dist) return d.x;\n    else return dist;\n}\n\nvec4 sdBezierMin2(vec4 d, vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, a, b, c);\n    if (d.x < e.x) e = d;\n    return e;\n}\n\nfloat sdBezier2(vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 d = sdBezier(p, a, b, c);\n    return d.x;\n}\n\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdCurve(vec2 p, int n, vec3[16] pts) {\n    int nn = n - 1;\n    vec4 d = vec4(maxFloat);    \n    vec3 pp1 = mix(pts[0], pts[1], -0.001), pp2;\n    float oofn = 1. / (float(n));\n    vec4 e;\n    for (int i = 0; i < nn; i++) {\n        pp2 = .5 * (pts[i] + pts[i+1]);\n        e = sdBezier(p, pp1, pts[i], pp2);\n        pp1 = pp2;\n        if (e.x < d.x) d = vec4(e.xyz, (e.w+float(i))*oofn);\n    }\n    pp2 = pts[nn];\n    e = sdBezier(p, pp1, pts[nn], pp2);\n    if (e.x < d.x) d = vec4(e.xyz, (e.w+float(nn))*oofn);\n\n    // signBezier fails on the first & last segments, here's a patch\n    if (d.w <= oofn) {\n        d.z = dot(p - pts[0].xy, rot90( pts[0].xy - pts[1].xy ) ) < 0. ? 1. : -1.;\n    }\n    else if (d.w >= 1.-oofn) {\n    \td.z = dot(p - pts[nn].xy, rot90( pts[nn-1].xy - pts[nn].xy ) ) < 0. ? 1. : -1.;\n    }\n\n    return d;\n}\n\nvec4 sdCurveSeg(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, a, b, c);\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i))/float(n+1));\n    }\n    else e = d;\n    return e;\n}\n\nvec4 sdCurveMid(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, mix(a,b,.5), b, mix(b,c,.5));\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i))/float(n));\n    }\n    else e = d;\n    return e;\n}\n\nvec4 sdCurveBgn(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, a, a, mix(a,b,.5));\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i))/float(n));\n        // signBezier fails on the first & last segments, here's a patch\n        e.z = dot(p - a.xy, rot90( a.xy - b.xy ) ) < 0. ? 1. : -1.;\n    }\n    else e = d;\n    \n    e = sdCurveMid(e, p, n, i+1, a, b, c);\n    \n    return e;\n}\n\nvec4 sdCurveEnd(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, mix(b,c,.5), c, c);\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i+1))/float(n));\n        // signBezier fails on the first & last segments, here's a patch\n        e.z = dot(p - c.xy, rot90( b.xy - c.xy ) ) < 0. ? 1. : -1.;\n    }\n    else e = d;\n    \n    e = sdCurveMid(e, p, n, i, a, b, c);\n    \n    return e;\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalBezier(float t, vec2 a, vec2 b, vec2 c, out vec2 curvePoint, out vec2 curveTangent) {\n    t = clamp(t, 0., 1.);\n    curvePoint = mix(mix(a, b, t), mix(b, c, t), t);\n    curveTangent = 2. * (( a + c - 2. * b ) * t + ( b - a ));\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalCurve(float t, int n, vec3[16] pts, out vec2 curvePoint, out vec2 curveTangent) {\n    float nt = clamp(t, 0.0001, .9999) * float(n);\n    int j = int(nt);\n    int i = max(0, j - 1);\n    int k = min(n-1, j + 1);\n    float tSegment = nt - float(j);\n    \n    vec2 a = pts[i].xy;\n    vec2 b = pts[j].xy;\n    vec2 c = pts[k].xy;\n    \n    a = mix(a, b, .5);\n    c = mix(b, c, .5);\n    \n    curvePoint = mix(mix(a, b, tSegment), mix(b, c, tSegment), tSegment);\n  \tvec2 ba = b-a;\n   \tcurveTangent = 2. * (( c - b - ba ) * tSegment + ( ba ));\n}\n\nstruct Hit {\n    float dBound;\n    float dCurve;\n    float sign;\n    vec2 pos;\n    vec2 tangent;\n    vec3 normal;\n    vec2 uv;\n};\n\n// vec4 d is the same format as return from sdBezier: vec4( dBound, dCurve, sign, param )\nvec2 calcBezierUv(float dBound, float dCurve, float sign, float param) {\n    return vec2(param, .5 + .5 * sign * dCurve / (abs(dBound) + dCurve));\n}\n\nHit calcBezierHit(vec2 uv, vec3 a, vec3 b, vec3 c) {\n    Hit hit;\n    vec4 d = sdBezier(uv, a, b, c);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalBezier(d.w, a.xy, b.xy, c.xy, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nHit calcCurveHit(vec2 uv, int n, vec3[16] pts) {\n    Hit hit;\n    vec4 d = sdCurve(uv, n, pts);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalCurve(d.w, n, pts, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nvec3 calcCurveRoundNormal(vec2 uv, Hit hit) {\n    float z = sin(hit.uv.y * pi);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\nvec3 calcCurveTentNormal(vec2 uv, Hit hit) {\n    float z = abs(hit.uv.y);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\n// bend should be [0,1], usually small like .1\n// bendWidth default should be .5. Increase for a smoother bend.\nfloat sdBentLine(vec2 p, vec3 a, vec3 b, float bend, float bendWidth /*, out float distToCurve, out vec2 uv*/) {\n    vec2 d = b.xy - a.xy;\n    \n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1., max(0., t));\n    vec2 cp = a.xy + t * d;\n    cp += bend*rot90(d)*L(.5-bendWidth, .5+bendWidth, t);\n    \n    vec2 n = p - cp;\n    float distToCurve = length(n); // optionally output this\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    vec2 uv = vec2(t, v); // optionally output this\n\n    float distToBoundary = distToCurve - cr;\n    return distToBoundary;\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\nfloat sdFatLine2All(vec2 p, vec3 a, vec3 b, out float distToCurve, out vec2 uv) {\n    vec2 d = b.xy - a.xy;\n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1.0, max(0.0, t));\n    vec2 cp = a.xy + t * d;\n    \n    vec2 n = p - cp;\n    distToCurve = length(n);\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    uv = vec2(t, v);\n\n    float distToBoundary = distToCurve - cr;\n    \n    return distToBoundary;\n}\n\nfloat sdFatLine2(vec2 p, vec3 a, vec3 b)\n{\n    float dummy_dc;\n    vec2 dummy_uv;\n    return sdFatLine2All(p, a, b, dummy_dc, dummy_uv);\n}\n\nmat2 rot(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat remap(float v, float min1, float max1, float min2, float max2) {\n    return min2 + (max2 - min2) * (v - min1) / (max1 - min1);\n}\n\nfloat bias(float x, float b) { return pow(x,log(b)/log(0.5)); }\n\nfloat gain(float x, float g) { return (x<0.5) ? bias(2.*x,1.-g)/2. : 1. - bias(2.-2.*x,1.-g)/2.; }\n\nfloat aaFloor(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? x - fx : remap(fx, idx, 1., x-fx, x);\n}\n\nfloat aaFract(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? fx : remap(fx, idx, 1., fx, 0.);\n}\n\nfloat stairs(float x, float steps) {\n    return floor(x * steps) / steps;\n}\n\nfloat stairs2(float x, float steps) {\n    return round(x * steps) / steps;\n}\n\nfloat escalator(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float ey = (aaFloor(ex) + time) * dx;\n    return clamp(ey, 0., 1.);\n}\n\nvec2 escalatorId(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float id = floor(ex);\n    float ey = (aaFloor(ex) + time) * dx;\n    return vec2(clamp(ey, 0., 1.), id);\n}\n\nfloat saw(float x) {\n    float mx = mod(x,1.);\n    return 2. * min(mx, 1.-mx);\n}\n\nfloat dline(vec2 p, vec2 lp, vec2 ld) {\n    return dot(p-lp, ld);\n}\n\nfloat sqr(float x) { return x*x; }\n\nfloat d2a (vec2 d) {\n    return atan(d.y, d.x);\n}\n\nvec2 a2d (float a) {\n    return vec2(cos(a), sin(a));\n}\n\nfloat sdEdgeNormal(vec2 x, vec2 p, vec2 normal) {\n    return dot(x-p, normal);\n}\n\nfloat sdEdgePoints(vec2 x, vec2 p1, vec2 p2) {\n    return dot(x-p1, normalize(rot90(p2 - p1)));\n}\n\n\n// lots of distance functions from IQ\n// https://iquilezles.org/articles/distfunctions\n\nfloat sdBox3( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox2( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nfloat udRoundBox( vec2 p, vec2 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat udBox( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCircle( vec2 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCapsule2All( vec2 p, vec2 a, vec2 b, float r, out float distToCenter, out vec2 uv, out vec2 pCenter )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    distToCenter = length( pa - ba*h );\n    float distToBoundary = distToCenter - r;\n    return distToBoundary;\n}\n\nfloat sdCapsule2( vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 dummy_pc, dummy_uv;\n    float dummy_dc;\n    return sdCapsule2All(p, a, b, r, dummy_dc, dummy_uv, dummy_pc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// d1 minus d2\nfloat sdSubtract( float d1, float d2 )\n{\n    return max(d1, -d2);\n}\n\n// d1 union d2\nfloat sdUnion( float d1, float d2 )\n{\n    return min(d1, d2);\n}\n","name":"Common","description":"","type":"common"}]}