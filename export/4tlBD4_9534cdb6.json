{"ver":"0.1","info":{"id":"4tlBD4","date":"1511890251","viewed":1431,"name":"Algebraic primitives - more fun","username":"tale3d","description":"Fork of example1 for analytic surfaces","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["implicit","algebraic","teachingmaterial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//defining a simple primitive - circle\nfloat circle(in vec2 position, in vec2 centre, in float radius)\n{\n    vec2 pc = position-centre;\n    return pc.x*pc.x + pc.y*pc.y - radius*radius;\n}\n\nfloat ellipse(in vec2 position, in vec2 centre, in float radius1, in float radius2)\n{\n    vec2 pc = position-centre;\n    return (pc.x*pc.x)/(radius1*radius1) + (pc.y*pc.y)/(radius2*radius2) - 1.0;\n}\n\nfloat tanglecube(in vec2 position, in float z)\n{\n    float x = position.x; \n    float y = position.y;\n    return x*x*x*x - 5.0*x*x + y*y*y*y - 5.0*y*y + z*z*z*z - 5.0*z*z + 11.8;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //taking fragment coordinates, range [0,1]\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    //map fragment coordinates to [-1,1]\n    vec2 c = 2.0 * uv - 1.0;\n\n    \n\t//time mapped to [0.5,1]- not used at the moment\n\tfloat time = 0.5+0.5*abs(sin(iTime));\n\n    //adjust coordinates given an aspect ratio\n    float aspect_ratio = iResolution.x/iResolution.y;\n    c.x *= aspect_ratio;\n    \n    //setup parameters of the shape\n    vec2 circle_centre = vec2(cos(iTime),sin(iTime)); //centre of the circle\n    float radius = time/2.0; //radius of the circle, note it is dynamic depending on time parameter\n\n    vec3 colour = vec3(1.0, 1.0, 1.0); //background colour\n\n    //find the function for circle\n    float function_value = circle(c, circle_centre, radius); \n    //the function for the implicit curve is 0 on the surface, here we are drawing points which are \"close\" to 0\n    float thickness = 0.01; //note that thickness is not in geometric sense, but in the function value\n    if (abs(function_value) < thickness) colour = vec3(0.0,0.0,0.0); //circle is drawn in black\n\n    //note polar coordinates for the centre here and everywhere\n    circle_centre = vec2(cos(iTime+1.57),sin(iTime+1.57));\n    function_value = circle(c, circle_centre, radius); \n    if (abs(function_value) < thickness) colour = vec3(0.0,0.0,0.0); //circle is drawn in black\n\n    circle_centre = vec2(cos(iTime+3.14),sin(iTime+3.14));\n    function_value = circle(c, circle_centre, radius); \n    if (abs(function_value) < thickness) colour = vec3(0.0,0.0,0.0); //circle is drawn in black\n\n    circle_centre = vec2(cos(iTime+4.71),sin(iTime+4.71));\n    function_value = circle(c, circle_centre, radius); \n    if (abs(function_value) < thickness) colour = vec3(0.0,0.0,0.0); //circle is drawn in black\n\n    \n    //repeat for ellipse\n    vec2 ellipse_centre = vec2(0,0); //centre of the circle\n    function_value = ellipse(c, ellipse_centre, (2.0-time)/2.0, time/2.0); \n    if (abs(function_value) < 0.1) colour = vec3(0.0,0.0,1.0); //ellipse is drawn in blue\n    \n    float z = 2.0*sin(iTime);\n    function_value = tanglecube(c*2.0, z);\n    if (abs(function_value) < 0.1) colour = vec3(0.0,1.0,1.0); //ellipse is drawn in blue\n    \n\tfragColor = vec4(colour,1.0); //set the colour of the fragment\n}\n\n","name":"Image","description":"","type":"image"}]}