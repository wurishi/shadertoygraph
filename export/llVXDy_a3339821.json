{"ver":"0.1","info":{"id":"llVXDy","date":"1485876683","viewed":115,"name":"The Set function","username":"BrandonE","description":"A representation of the function that describes valid sets in the card game Set.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","set"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\nThis function comes from the card game called Set. If you sort the cards from the game and assign\nan index to each, then you can pass any 3 indicies to setFn3 and it will return true if they make\na valid set. Or it can be written to take any 2 indicies and will return the missing one that would\nmake a valid set:\n\nc = (-a - b) mod 3 + ((-a/3 - b/3) mod 3) * 3 + ((-a/9 - b/9) mod 3) * 9 + ((-a/27 - b/27) mod 3) * 27\n\nNote that this requires integer division (or floor) and the real mod function so that negative numbers\nare handled properly (not the remainder operator used in many programming languages with '%')\n\nIt works by converting each index into base 3, where each base 3 digit represents the value of each of\nthe 4 attributes of the card. For each base 3 digit it applies the function (-i - j) mod 3 to get the\nbase 3 digits of the result. That function returns a different value if i and j are different and\nreturns the same value if they are the same (if i and j are between 0 and 2 of course), which are the\ncore rules of making a set. The result is then converted back to base 10.\n\nYou can generalize the function to take any set of integers. The functions setFn4 & setFn5 are examples\nof how it extends. The generalized function has some interesting properties and is concisely expressed\nin python like so:\n\ndef setFn(b, lst):\n   return sum( sum(-(d / (b**i)) for d in lst) % b * (b**i) for i in range(b+1))\n\nWhere b is an integer representing the base, and lst is a list (or set) of numbers.\n\nIf you take the return value and replace any number in lst then the new return value will be equal to\nthe number that was replaced. If instead you take the return value and add it to lst then the new\nreturn value will be 0 (which is what the functions below do. setFn3 = setFn(3, [a, b, c]) == 0).\n\nWhile discovering this function I had the idea to plot it and found that it produced somewhat interesing,\nfractal-like patterns, and because of it's simplicity could easily be shown off and played with in a shader.\n\n*/\n\nint m(int a, int b) {\n\treturn int(mod(float(a), float(b)));\n}\n\nbool setFn3(int a, int b, int c) {\n\treturn 0 == (\n\t\tm(-(a + b + c), 3) +\n\t\tm(-((a / 3) + (b / 3) + (c / 3)), 3) * 3 +\n\t\tm(-((a / 9) + (b / 9) + (c / 9)), 3) * 9 +\n\t\tm(-((a / 27) + (b / 27) + (c / 27)), 3) * 27\n\t);\n}\n\nbool setFn4(int a, int b, int c, int d) {\n\treturn 0 == (\n\t\tm(-(a + b + c + d), 4) +\n\t\tm(-((a / 4) + (b / 4) + (c / 4) + (d / 4)), 4) * 4 +\n\t\tm(-((a / 16) + (b / 16) + (c / 16) + (d / 16)), 4) * 16 +\n\t\tm(-((a / 64) + (b / 64) + (c / 64) + (d / 64)), 4) * 64 +\n\t\tm(-((a / 256) + (b / 256) + (c / 256) + (d / 256)), 4) * 256\n\t);\n}\n\nbool setFn5(int a, int b, int c, int d, int e) {\n\treturn 0 == (\n\t\tm(-(a + b + c + d + e), 5) +\n\t\tm(-((a / 5) + (b / 5) + (c / 5) + (d / 5) + (e / 5)), 5) * 5 +\n\t\tm(-((a / 25) + (b / 25) + (c / 25) + (d / 25) + (e / 25)), 5) * 25 +\n\t\tm(-((a / 125) + (b / 125) + (c / 125) + (d / 125) + (e / 125)), 5) * 125 +\n\t\tm(-((a / 625) + (b / 625) + (c / 625) + (d / 625) + (e / 625)), 5) * 625 +\n\t\tm(-((a / 3125) + (b / 3125) + (c / 3125) + (d / 3125) + (e / 3125)), 5) * 3125\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pos = fragCoord.xy;\n\tvec2 mousePos = iMouse.xy;\n\t\n\tint a = int(pos.x);\n\tint b = int(pos.y);\n\tint c = int(iTime*5.0);//int(mousePos.y);\n\tint d = int(mousePos.x);\n\tint e = int(iTime*2.0);\n\t\n\tfloat r = setFn3(a, b, c) ? 1.0 : 0.0;\n\tfloat g = setFn4(a, b, c, d) ? 1.0 : 0.0;\n\tfloat bl = setFn5(a, b, c, d, e) ? 1.0 : 0.0;\n\t\n\tfragColor = vec4( vec3( r, g, bl ), 1.0 );\n    \n}","name":"Image","description":"","type":"image"}]}