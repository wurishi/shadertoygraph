{"ver":"0.1","info":{"id":"WsVyz1","date":"1602238163","viewed":155,"name":"Wikipedia example","username":"PaterBytes","description":"Just testing how shaders works, modifying a the wikipedia Shadertoy tunnel example","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","tunnel","wikipedia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Just testing how shaders works\n// Extracted from: https://en.wikipedia.org/wiki/Shadertoy\n// Modified to see like someone walking inside a tunnel\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float walking = sin(iTime*3.3)/12.0;\n    float zoombie = atan(sin(iTime));\n    \n    // input: pixel coordinates\n    // you can swap: walking or zoombie :D\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y + walking; \n\n    // angle of each pixel to the center of the screen\n    float a = atan(p.y,p.x);\n    \n    // modified distance metric\n    float r = pow( pow(p.x*p.x,4.0) + pow(p.y*p.y,4.0), 1.0/8.0 );\n    \n    // index texture by (animated inverse) radius and angle\n    vec2 uv = vec2( 1.0/r + 0.2*iTime, a );\n\n    // pattern: cosines\n    float f = cos(12.0*uv.x)*cos(6.0*uv.y);\n\n    // color fetch: palette\n    vec3 col = 0.5 + 0.5*sin( 3.1416*f + vec3(0.0,0.5,1.0) );\n    \n    // lighting: darken at the center    \n    col = col*r;\n    \n    // output: pixel color\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}