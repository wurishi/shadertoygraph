{"ver":"0.1","info":{"id":"ms2SDz","date":"1670185060","viewed":188,"name":"TensorPatterns: flora","username":"Boogaloo","description":"Yet another TensorPatterns automaton","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["automata","cellular","tensor"],"hasliked":0,"parentid":"mdsSWB","parentname":"TensorPatterns: glow-worms"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    \n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat3 mats[9];\n\n//inverse Gaussian activation function\nfloat igr(float x) {\n  return -1./pow(2., (0.6*pow(x, 2.)))+1.;\n}\n\nfloat igg(float x){\n return -1./(0.89*pow(x, 2.)+1.)+1.;\n }\n \nfloat igb(float x){\nreturn -1./(0.9*pow(x, 2.)+1.)+1.;\n}\n\n\nfloat cutit(float inp){\nreturn clamp(inp, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//The configuration tensor (change these values for different patterns):\nmats[0] = mat3(.68, 0., .1, .1, .8, .0, 0., .1, -0.939);\nmats[1] = mat3(-.9, -.1, 0., 0., -.85, -.1, -.1, 0., .88);\nmats[2] = mat3(.68, 0., .1, .1, .8, .0, 0., .1, -0.939);\nmats[3] = mat3(-.9, -.1, 0., 0., -.85, -.1, -.1, 0., .88);\nmats[4] = mat3(-.66, .01, -.01, -.01, -.2, .01, .01, -.01, .4);\nmats[5] = mat3(-.9, -.1, 0., 0., -.85, -.1, -.1, 0., .88);\nmats[6] = mat3(.68, 0., .1, .1, .8, .0, 0., .1, -0.939);\nmats[7] = mat3(-.9, -.1, 0., 0., -.85, -.1, -.1, 0., .88);\nmats[8] = mat3(.68, 0., .1, .1, .8, .0, 0., .1, -0.939);\n      \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 rtot = vec3(0.,0.,0.);\n    int ind = 0;    \n    \n//the convolution kernel is just the Moore neighborhood of a given cell\n//take the RGB values as vectors and apply a matrix transform specified via the configuration tensor, then sum\n    for(float i = -1.0; i <= 1.0; i += 1.0)\n    {\n        for( float j = -1.0; j <= 1.0; j += 1.0)\n        {\n        \tvec2 offset = vec2(i, j) / iResolution.xy;\t\t \n        \trtot += mats[ind]*texture(iChannel0, uv + offset).rgb;\n            ind++;\n        }\n    }\n    \n    \n    vec3 rfin = vec3(cutit(igr(rtot.x)), cutit(igg(rtot.y)), cutit(igb(rtot.z)));    \n   \n//initialize random colors for each cell    \n    if(iFrame < 10) {\n    rfin = vec3(fract(sin(iDate[3]/100.*dot(uv, vec2(12.9898, 78.233))) * 43758.5453), fract(sin(iDate[3]/100.*dot(uv, vec2(12.9898, 78.233))) * 53768.5453), fract(sin(iDate[3]/100.*dot(uv, vec2(12.9898, 78.233))) * 41258.5453));\n    }\n\n//paint on pixels manually with the mouse\n    if(iMouse.z > 0.0 && abs(fragCoord.x-iMouse.x)<1.0 && abs(fragCoord.y-iMouse.y)<1.0){\n    rfin = vec3(1.0,1.0,1.0);\n    }\n      \n    \n    fragColor = vec4(rfin,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//anti-flicker buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    vec4 col1 = texture(iChannel0, uv);\n    vec4 col2 = texture(iChannel1, uv);\n    fragColor = (col1+col2)*.55;\n}","name":"Buffer B","description":"","type":"buffer"}]}