{"ver":"0.1","info":{"id":"lcSGDz","date":"1704060980","viewed":67,"name":"Visual Fourier Transform","username":"sampajama","description":"Visual Fourier Transform","likes":0,"published":1,"flags":36,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define EPS (5.79334e-21)\n#define PI (3.14159265358979323)\n#define PHI (1.61803398875)\n#define SQRT1 (1.00000000000)\n#define SQRT2 (1.41421356237)\n#define SQRT3 (1.73205080757)\n\n#define BUFFER (512.0)\n\nvec2 comp_cis(float t)\n{\n    return vec2(cos(2.0 * PI * t),sin(2.0 * PI * t));\n}\n\nvec2 comp_mul(vec2 a, vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec4 comp_to_color(vec2 c)\n{\n    return vec4(\n        -0.5 * c.x + 0.5 * SQRT3 * c.y,\n        c.x,\n        -0.5 * c.x - 0.5 * SQRT3 * c.y,\n        1.0\n    );\n}\n\nvec2 color_to_comp(vec4 c)\n{\n    return vec2(\n        -c.x + 2.0 * c.y - c.z,\n        SQRT3 * (c.x + c.z)\n    );\n}\n\n#define lp_sinc(x) (sin(PI * (x) + EPS) / (PI * (x) + EPS))\n\n\nfloat lp_window(float x) {\n    x = (1.0 + x) * 0.5;\n\n    return 0.35875\n         - 0.48829 * cos(2.0 * PI * x)\n         + 0.14128 * cos(4.0 * PI * x)\n         - 0.01168 * cos(6.0 * PI * x);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getX(vec2 fragCoord) {\n    return min(max(fragCoord.x / BUFFER, 0.0), 1.0);\n}\n\nfloat getY(vec2 fragCoord) {\n    return 0.5 * BUFFER * ((fragCoord.y - 0.5) / iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x < BUFFER) {\n        float x = getX(fragCoord);\n        float y = getY(fragCoord);\n\n        vec2 uv = vec2(x, 0.75);\n\n        vec2 signal = sqrt(BUFFER) * vec2(\n            (texture(iChannel0, uv).x - 0.5) * 2.0, \n            0.0\n        );\n\n        vec2 c = comp_cis(y * x) * lp_window(2.0 * (x - 0.5));\n        fragColor = comp_to_color(comp_mul(signal, c));\n    } \n    \n    else if (fragCoord.x < BUFFER + 1.0)\n    {\n        float y = fragCoord.y;\n        vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);\n        \n        for(float x = 0.5; x < BUFFER; x += 1.0)\n        {\n            vec2 uv = vec2(x, y) / iResolution.xy;\n            sum += texture(iChannel1, uv);\n        }\n        \n        fragColor = sum / sqrt(BUFFER);\n    } \n    \n    else {\n        vec2 uv = (fragCoord.xy - vec2(1.0, 0.0)) / iResolution.xy;\n        fragColor = texture(iChannel1, uv);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}