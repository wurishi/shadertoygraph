{"ver":"0.1","info":{"id":"mltBDf","date":"1701959484","viewed":18,"name":"Socon88 Tutorial Result","username":"socon88","description":"Result of the tutorial by Kishimisu ::\n\nhttps://www.youtube.com/watch?v=f4s1h2YETNY\nhttps://www.shadertoy.com/user/kishimisu\n\nedited pallet function to be different on different components  though I only use it once in this example. \n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","tutorial","light","psychedelic","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( vec3 aa, vec3 bb, vec3 cc, float t){\n    vec3 a = aa;\n    vec3 b = bb;\n    vec3 c = cc;\n    vec3 d = vec3(0.263,0.416,0.557);\n    return a+ b*cos ( 6.28318*(c*t+d) ); \n   }\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy) / iResolution.y;\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColor= vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n    \n        uv = fract(uv*1.25)-0.5;\n\n\n        float d = length(uv) * exp (-length(uv0));\n\n        vec3 col = palette(vec3(1.0,0.8,0.4),vec3(0.9,0.5,1.0),vec3(0.5,0.8,0.5),length(uv0) + i*0.4 +iTime*0.4);\n\n        d = sin(d *18.0+iTime)/8.0;\n\n        d = abs(d);\n\n        d = pow(0.025/d,2.0);\n\n        // Time varying pixel color\n\n        finalColor += col*d;\n    }\n   \n    \n    // Output to screen\n    //fract(col);\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}