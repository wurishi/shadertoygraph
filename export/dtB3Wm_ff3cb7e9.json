{"ver":"0.1","info":{"id":"dtB3Wm","date":"1673392620","viewed":113,"name":"ArrJeeBee Droplets ðŸ”Š","username":"blurryroots","description":"Reset play to sync audio! (headphones for best effect) You adjust the speed in the common buffer.\nFeatures fake binaural audio. The point of the drop indicates the current audio location if you imagine sitting in the center. Works best with headphones.","likes":4,"published":1,"flags":40,"usePreview":0,"tags":["woot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define R iResolution\n\nvoid mainImage (out vec4 C, in vec2 F) {\n    float t = SPEED * iTime;\n    vec2 uv = F / R.xy;\n    \n    vec3 c = texture (iChannel0, uv).rgb;\n    C = vec4 (c, 1.0);\n    #if WITH_SOUND_IN\n    C = max (C, texture (iChannel1, uv));\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define R iResolution\n\nvoid mainImage (out vec4 C, in vec2 F) {\n    float t = SPEED * iTime;\n    float r = R.x / R.y;\n    vec2 uv = F / R.xy;\n    vec2 uvn = (F - 0.5*R.xy) / max (R.x, R.y);\n\n    float b = mod (t, 2.);\n    vec2 p = 0.2 * rot (1.0 * (t + pi/2.));\n    float l = (0.003+(b)*0.007) / length (uvn - p);\n    l = pow (l, 2.2);\n    \n    float ls = l;\n    vec3 tint;\n    float ff = mod (t, 6.);\n    if (2. > ff) {\n        tint.r = 1.0;\n    }\n    else if (4. > ff){\n        tint.g = 1.0;\n    }\n    else if (6. > ff){\n        tint.b = 1.0;\n    }\n    \n    vec3 c;\n    if (r != texture (iChannel1, uv).r) {\n        c = vec3 (0.);\n    }\n    else {\n        vec3 last = texture (iChannel0, uv).rgb;\n        c = vec3 (ls) * tint\n            + clamp (last * 0.995, 0.00001, 1.)\n            ;\n    }\n    C = vec4 (c, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nconst float pi = 355./115.;\nconst float tau = 2.0 * pi;\nconst float phi = (1.0 + sqrt (5.0)) / 2.0;\nconst float phi0 = phi - 1.0;\nconst float phi0i = 1.0 - phi0;\n\n#define WITH_SOUND_IN 1\n#define SPEED 1.2\n\nvec2 rot (float a) {\n    return vec2 (sin (a), cos (a));\n}\n\nfloat psin (float t) {\n    return (1.0 + sin (pi * t - pi/2.)) / 2.0;\n}\nfloat csin (float t) {\n    return clamp (sin (t), 0., 1.);\n}\n\nfloat ccos (float t) {\n    return clamp (cos (t), 0., 1.);\n}\n\nfloat tune (float f, int i) {\n    float b = pow (2., (1./12.));\n    float s = pow (b, float (i));\n    return f * s;\n}\n\nfloat tr (float x) {\n    float p = 2.0;\n    float u = 4.0;\n    float a = 1.0;\n\n    float k = (u * a) / p;\n    float pu = p / u;\n\n    float d = mod (x - pu, p) - (2.0 * pu);\n    float s = k * abs (d) - a;\n\n    return s;\n}\n\nfloat sq (float x) {\n    float s = 0.5*sign (x);\n    return s;\n}\n\nfloat tone (float t, float f, int n, float d) {\n    return sin(tau * tune (f, n) * t) * exp(-t * d);\n}\nfloat ptone (float t, float f, int n, float d) {\n    return psin(tau * tune (f, n) * t) * exp(-t * d);\n}\nfloat sqtone (float t, float f, int n, float d) {\n    return sq(sin(tau * tune (f, n) * t)) * exp(-t * d);\n}\nfloat trtone (float t, float f, int n, float d) {\n    return tr(sin(tau * tune (f, n) * t)) * exp(-t * d);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nvec2\nmainSound (int samp, float time) {\n    float t = SPEED * time;\n    float f = 432.;\n    float v = 1.0;\n    \n    float s = 0.;    \n    s += tone (mod (t, 4.), f/SPEED, -30, mod (t, 4.0));\n    s += tone (mod (t, 2.), f/SPEED, -21, 5.0);\n\n    float em = mod (t, 1. * 1./3.);\n    float toff = pi;\n    float e = 4. < mod (t, 6.)\n        ? tone (em, (f*em)/SPEED, -12, 1. + 2.*cos (time - toff))\n        : 2. < mod (t, 6.)\n            ? trtone (em, (f*em)/SPEED, -7, 1. + 2.*cos (time - toff))\n            : sqtone (em, (f*em)/SPEED, -28, 1. + 2.*cos (time - toff))\n        ;\n    float te = 0.5 * t;\n    vec2 epos = vec2 (sin (te), cos (te));\n    e = (sin (e) - cos (e));\n    \n    // .\n    vec2 sout = mix (vec2 (s), e * epos, phi0i);\n    return v * sout;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define R iResolution\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n//\n\nvoid mainImage (out vec4 C, in vec2 F) {\n    if (R.y<2000.) {float c=message(F.xy/8.);if(c>=0.){C=vec4(c);return;}}\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float r = iResolution.x / iResolution.y;\n    fragColor = vec4 (r);\n}","name":"Buffer C","description":"","type":"buffer"}]}