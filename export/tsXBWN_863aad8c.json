{"ver":"0.1","info":{"id":"tsXBWN","date":"1588253345","viewed":102,"name":"RayMarchingCameraTest","username":"erkan612","description":"This is a camera test with ray marching techniq.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 shadowAndAmbientColor = vec3(1.0)-vec3(0.1, 0.2, 0.4);\n\nfloat sph(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat plane(vec3 p, vec3 n, float d) {\n\treturn dot(p, n) - d;\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat box(vec3 p, vec3 s) {\n\treturn vmax(abs(p)-s);\n}\n\nfloat sdf(vec3 p) {\n\tfloat s1 = sph(p, 1.0);\n    \n    float p1 = plane(p, vec3(0.0, 1.0, 0.0), -1.0);\n    \n    float b1 = box(vec3(2.0, 0.0, 0.0)-p, vec3(1.0));\n    \n    float m1 = min(s1, p1);\n    m1 = min(m1, b1);\n    \n    return m1;\n}\n\nvec3 getnormal(vec3 p) {\n\tfloat c = sdf(p);\n    vec2 off = vec2(-0.01, 0.0);\n    \n    return normalize(vec3(sdf(p - off.xyy) - c, sdf(p - off.yxy) - c, sdf(p - off.yyx) - c));\n}\n\nvec3 shadow(vec3 ro, vec3 rd) {\n    vec3 color = vec3(1.0);\n    \n    int steps = 50;\n    float s = 10.0/float(steps);\n    \n    float tq = 0.05;\n    float t = tq;\n    \n    vec3 sundir = vec3(1.0, 1.0, -1.0);\n    \n    for (int i = 0; i < steps; i++) {\n        vec3 pos = ro + rd*t;\n    \tfloat d = sdf(pos + getnormal(pos)*0.02);\n        \n        color = min(color, 10.0*d/t);\n        \n        if (d < 0.01) {\n            color = vec3(0.0);\n            break;\n        }\n        \n        t += d;\n    }\n    \n    return color * shadowAndAmbientColor;\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n    vec3 color = vec3(0.0);\n    \n    int steps = 50;\n    float s = 10.0/float(steps);\n    \n    float tq = 0.05;\n    float t = tq;\n    \n    vec3 sundir = vec3(1.0, 1.0, -1.0);\n    \n    for (int i = 0; i < steps; i++) {\n        vec3 pos = ro + rd*t;\n    \tfloat d = sdf(pos);\n        \n        if (d < 0.01) {\n            vec3 n = getnormal(pos);\n            vec3 shad = shadow(pos, normalize(sundir));\n            float lum = max(0.0, dot(n, normalize(sundir)));\n            float fog = 10.0/(t*t);\n        \tcolor = vec3(lum * max(min(fog, 1.0), 0.0)) * shad;\n            break;\n        }\n        \n        t += d;\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord-0.5*iResolution.xy)/min(iResolution.x,iResolution.y)) * 2.0;\n\n    float t = float(iTime);\n    float d = 4.0;\n    \n    vec3 ro = vec3(cos(t) * d, 0.5*d, sin(t)*d);\n    vec3 ta = vec3(0.0);\n    \n    vec3 cz = normalize(ta - ro);\n    vec3 cx = normalize(cross(vec3(0.0, 1.0, 0.0), cz));\n    vec3 cy = normalize(cross(cz, cx));\n    //vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 rd = normalize(cx * uv.x + cy * uv.y + cz * 1.0);\n    \n    vec3 color = march(ro, rd);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}