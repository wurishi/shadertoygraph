{"ver":"0.1","info":{"id":"WscyRM","date":"1600591773","viewed":1081,"name":"OS detector","username":"FabriceNeyret2","description":"auto - detect your system from different implementation bugs :-)\nPrecision : mantissa. full IEEE32 = 23 bits\n\nOf course I might be wrong, and I cannot test beside mine: tell me ! ( + your OS, browser, GPU )\nAny idea how to test Android ? Iphone ?","likes":27,"published":3,"flags":32,"usePreview":0,"tags":["glsl","bug","compatibility"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- draw messages              // https://www.shadertoy.com/view/llySRh\n\nvec4 char(vec2 p, int c) {\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n#if  __VERSION__ >= 300                    // webGL2\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n#else                                      // webGL1\n\treturn texture( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ) ); \n#endif\n}\nint CAPS=0;\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define C(c) spc O+= char(U,64+CAPS+c);\n\n\nvoid mainImage( out vec4 O, vec2 u )   // ---------------------------------\n{\n    vec2  R = iResolution.xy,\n         uv = u / min(R.x,1.77*R.y)*1.77, U;\n    float Z = min(0.,iTime),           // to prevent optimizations and compile-time expressions resolution\n          left = .05;\n    vec4  _O = O, M = O; M += 1.-M;    // for old macs\n    if (uv.y<.9) O-=O;                 // let some have fancy random top line ;-)\n    \n    U = ( uv - vec2(left,.8) ) * 8.;   // --- webGL version ( cf https://www.shadertoy.com/view/4djyRt )\n    caps C(23) low C(5)C(2) caps C(7)C(12)\n#if  __VERSION__ >= 300                // webGL2\n        C(-14)\n#else                                  // webGL1\n        C(-15)\n#endif\n                                       // --- testing extensions ( cf https://webglreport.com/?v=2 )\n/*                                     // test webGL1 extensions\n    spc spc low C(20)C(5)C(24)C(20) caps C(12)C(15)C(4)C(-6) low\n#ifdef GL_EXT_shader_texture_lod       // textureLOD\n    C(25)C(5)C(24)\n#else\n    C(14)C(15)\n#endif\n#ifdef GL_EXT_gpu_shader4              // texelFetch        \n    C(25)C(5)C(24)\n#else\n    C(14)C(15)\n#endif    \n*/\n/*                                     // test webGL2 extensions\n    spc spc low C(6)C(12)C(15)C(1)C(20) caps C(2) low C(21)C(6) caps C(-6) low\n#ifdef GL_EXT_color_buffer_float\n    C(25)C(5)C(24)\n#else\n    C(14)C(15)\n#endif\n*/\n    U = ( uv - vec2(left*12./8.,.7) ) * 12.;                             // --- state of init fragColor\n    low C(6)C(18)C(1)C(7) caps C(3) low C(15)C(12)C(15)C(18) caps C(-6)\n         if ( _O==vec4(0) )     { C(-16)C(-16)C(-16)C(-16) }\n    else if (_O==vec4(0,0,0,1)) { C(-16)C(-16)C(-16)C(-15) }\n    else                        { low C(18)C(1)C(14)C(4) } \n\n    spc spc spc caps C(2) low C(21)C(6)C(6)C(5)C(18)C(19) caps C(-6) low // --- test buffers\n    if (texelFetch(iChannel0,ivec2(0), 0).z == 123. ) { C(15)C(14) }\n    else {C(15)C(6)C(6)}\n       \n    spc spc spc C(4) caps C(6) low C(4)C(24) caps C(-6) C(-16+int(dFdx(u.x))) //  --- test dFdx\n    U = ( uv - vec2(left*12./8.,.6) ) * 12.; \n    //low C(4) caps C(6) low C(4)C(24) caps C(-24)low C(3)C(8)C(5)C(3)C(11)C(5)C(18) caps C(-23)C(-6)\n    //dFdx(mod(u.x+u.y,2.)\n    \n    U = ( uv - vec2(left,.5) ) * 8.;                                     // --- testing OS\n    caps C(25) low C(15)C(21)  spc C(1)C(18)C(5) spc C(15)C(14) spc caps\n    if ( sqrt(-1.+Z) == 1. ) {                                           // windows D3D - 1\n        // or first O = 0,0,0,1 , or so many others\n        C(23) low C(9)C(14)C(4)C(15)C(23)C(19) spc caps C(4)C(3-16)C(4) caps C(-1) C(-24)C(-15)C(-23)\n    }\n    else if ( _O == vec4(0,0,0,1) ) {                                    // windows D3D - 2\n        C(23) low C(9)C(14)C(4)C(15)C(23)C(19) spc caps C(4)C(3-16)C(4) spc caps C(-24)C(-14)C(-23)\n    }\n    else if (M != vec4(1) ) {                                            // old Mac\n        // or was it O -= O-1 that failed ?\n        low C(15)C(12)C(4) spc caps C(13) low C(1)C(3)  // C(7) low C(18)C(5)C(7)\n    }\n/*  else if (  smoothstep(1.,0.,.5+Z) != 1. - smoothstep(0.,1.,.5+Z) ) { // (old?) AMD\n        C(15)C(14) spc caps C(1)C(13)C(4)\n    }\n*/  else {                                                               // OpenGL\n        // or normalize(0) = NaN\n        C(15) low C(16)C(5)C(14) caps C(7)C(12)\n    }\n        // testing (modern) Mac :  ideas ?\n        // testing Android: ideas ? missing extensions ? assuming webGL2 compiles...\n        // testing iPhone:  ideas ?\n        // testing browser: idea ? ( at least Firefox vs Chrome )\n                       \n    if (texelFetch(iChannel0,ivec2(0), 0).x > 1. ) {                     // --- is icon ?    \n        U = ( uv - vec2(left*1.5,.3) ) * 8.;\n        caps C(-24) spc low C(9)C(14) spc C(9)C(3)C(15)C(14) spc C(13)C(15)C(4)C(5) spc caps C(-23)\n    }\n        // testing fullscreen:  ideas ?\n    \n    // --- compute float mantissa precision ( cf https://www.shadertoy.com/view/WtXBz2 )\n    float b = 1.; int i = 0;\n // for (  ; i < 32; i++, b*=2. )\n    for (int _i=0  ; _i < 32; _i++ ) { // webGL1 compatible\n        if ( fract( b + .5 ) == 0.)  break;\n        i++, b*=2.;\n    }\n    U = ( uv - vec2(left,.1) ) * 8.;  \n    caps C(6)low C(12)C(15)C(1)C(20) spc C(16)C(18)C(5)C(3)C(9)C(19)C(9)C(15)C(14) \n    caps C(-6) spc C(i/10-16) C(i-i/10*10 -16) spc low C(2)C(9)C(20)C(19)\n                             // i%10 doesn't exist in webGL1 \n    // --- texture precision\n// for ( i = 0 ; i < 32; i++ )    \n   i=0; for (int _i=0  ; _i < 32; _i++ ) { // webGL1 compatible\n       if ( fract(texelFetch(iChannel0,ivec2(0,i), 0)).y == 0.)  break; \n       i++;\n   }\n    U = ( uv - vec2(left,.0) ) * 8.35; \n    caps C(2) low C(21)C(6)C(6)C(5)C(18) spc C(16)C(18)C(5)C(3)C(9)C(19)C(9)C(15)C(14) \n    caps C(-6) spc C(i/10-16) C(i-i/10*10 -16) spc low C(2)C(9)C(20)C(19)\n    \n\n    O = O.xxxx;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    if  ( U == vec2(.5) )\n        O.z = 123.,\n        O.x = iFrame==0 ? iTime : texelFetch(iChannel0,ivec2(0),0).x; // test init iTime\n    \n    if  ( U.x < 1. && U.y < 32. )                                     // test buffer precision \n        O.y = exp2(floor(U.y)) + .5;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#if  __VERSION__ < 300                    // webGL1 only\n  #define texelFetch(ch,u,l) texture(ch,(.5+vec2(u)*exp2(float(l)))/iResolution.xy, float(l) )\n#endif\n","name":"Common","description":"","type":"common"}]}