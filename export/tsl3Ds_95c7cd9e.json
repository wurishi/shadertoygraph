{"ver":"0.1","info":{"id":"tsl3Ds","date":"1568839227","viewed":213,"name":"N Polygon distance 2D","username":"remotion","description":"Signed distance to a polygon(negative in the inside, positive in the outside). Note there's only one square root involved.\nBased on  https://www.shadertoy.com/view/XsXSz4","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangle","distance","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Remotion 2019\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// See here for a specialization when the triangle is equilateral: https://www.shadertoy.com/view/Xl2yDW\n\n\n// List of some other 2D distances:\n//\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Equilateral Triangle: https://www.shadertoy.com/view/Xl2yDW\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\nfloat saturate(float x) { return clamp(x, 0.0, 1.0); }\n\nfloat min3(float a, float b, float c) {\n\treturn (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);\n}\n\nfloat min6(float a, float b, float c, float d, float e, float f) {\n\treturn min(min3(a,b,c),min3(d,e,f));\n}\nfloat min8(float a, float b, float c, float d, float e, float f, float g, float h) {\n\treturn min3(min3(a,b,c),min3(d,e,f),min(g,h));\n}\n\nfloat det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\n// Test if point p crosses line (a, b)\nfloat orient2d(vec2 p0, vec2 p1, vec2 point) {\n    return ((p1.x - p0.x) * (point.y - p0.y) -\n            (point.x - p0.x) * (p1.y - p0.y));\n}\n\n\nvec2 closestPointInSegment( vec2 a, vec2 b )\n{\n  vec2 ba = b - a;\n  return a + ba*clamp( -dot(a,ba)/dot(ba,ba), 0.0, 1.0 );\n}\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a bezier curve\nfloat sdBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{    \n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * signBezier(A, B, C, p);\n}\n\n// From: http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\nvec2 get_distance_vector(vec2 b0, vec2 b1, vec2 b2) {\n\t\n  float a=det(b0,b2), b=2.0*det(b1,b0), d=2.0*det(b2,b1);\n  \n  //? if( abs(2.0*a+b+d) < 1.0 ) return closestPointInSegment(b0,b2);\n  //float o = orient2d(b0,b2,b1);\n  //if (o < 0.01 && o > -0.01) return closestPointInSegment(b0,b2);\n\t\n  float f=b*d-a*a;\n  vec2 d21=b2-b1, d10=b1-b0, d20=b2-b0;\n  vec2 gf=2.0*(b*d21+d*d10+a*d20);\n  gf=vec2(gf.y,-gf.x);\n  vec2 pp=-f*gf/dot(gf,gf);\n  vec2 d0p=b0-pp;\n  float ap=det(d0p,d20), bp=2.0*det(d10,d0p);\n  // (note that 2*ap+bp+dp=2*a+b+d=4*area(b0,b1,b2))\n  float t=clamp((ap+bp)/(2.0*a+b+d), 0.0 ,1.0);\n  return mix(mix(b0,b1,t),mix(b1,b2,t),t);\n\n}\n\nfloat approx_distance(vec2 p, vec2 b0, vec2 b1, vec2 b2) {\n  float o = orient2d(b0,b2,b1);\n  if (o < 0.05 && o > -0.05) return sdBezier(b0,b1,b2,p);\n    \n  return length(get_distance_vector(b0-p, b1-p, b2-p));\n}\n\n\n// signed distance to a 2D triangle\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b ) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat sdLineSquared( in vec2 p, in vec2 a, in vec2 b ) {\n    vec2 pa = p-a; \n    vec2 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return dot2( pa - ba*h );\n}\n\nfloat sdLineSquared2(vec2 p, vec2 a, vec2 b) {\n    vec2 ab = b - a;\n    float t = saturate(dot(p - a, ab) / dot(ab, ab));\n    vec2 diff = (ab*t + a) - p;\n    return dot2(diff);\n}\n\nfloat sdCapsule2(vec2 p, vec2 a, vec2 b, float r1, float r2) {\n    vec2 ab = b - a;\n    float t = saturate(dot(p - a, ab) / dot(ab, ab));\n    vec2 diff = (ab*t + a) - p;\n    return sqrt(dot(diff, diff)) - (r1*t + r2 * (1.0 - t));\n}\n\nbool pnpoly4(vec2 vert[4], vec2 test)\n{\n  int nvert = 4;\n  bool c = false;\n  for (int i = 0, j = nvert-1; i < nvert; j = i++) {\n    if ( ((vert[i].y>test.y) != (vert[j].y>test.y)) &&\n        (test.x < (vert[j].x-vert[i].x) * (test.y-vert[i].y) / (vert[j].y-vert[i].y) + vert[i].x) ) {\n       c = !c;\n    }\n  }\n  return c;\n}\n\nbool pnpoly5(vec2 vert[5], vec2 test)\n{\n  int nvert = 5;\n  bool c = false;\n  for (int i = 0, j = nvert-1; i < nvert; j = i++) {\n    if ( ((vert[i].y>test.y) != (vert[j].y>test.y)) &&\n        (test.x < (vert[j].x-vert[i].x) * (test.y-vert[i].y) / (vert[j].y-vert[i].y) + vert[i].x) ) {\n       c = !c;\n    }\n  }\n  return c;\n}\n\n// even-odd rule\nbool pnpoly9(vec2 vert[9], int nvert, vec2 test)\n{\n  bool c = false;\n  for (int i = 0, j = nvert-1; i < nvert; j = i++) {\n    if ( ((vert[i].y>test.y) != (vert[j].y>test.y)) &&\n        (test.x < (vert[j].x-vert[i].x) * (test.y-vert[i].y) / (vert[j].y-vert[i].y) + vert[i].x) ) {\n       c = !c;\n    }\n  }\n  return c;\n}\n\n\n// Nonzero-rule\nbool is_inside(vec2 vert[9], int nvert, vec2 point) {\n    int winding_number = 0; // The winding number counter.\n    for (int i = 0, j = nvert-1; i < nvert; j = i++) {\n        vec2 point1 = vert[i];\n        vec2 point2 = vert[j];\n        if (point1.y <= point.y) {                                  // start y <= point.y\n            if (point2.y > point.y) {                               // An upward crossing\n                if (orient2d(point1, point2, point) > 0.0) {         // Point left of edge\n                    ++winding_number;                               // Have a valid up intersect\n                }\n            }\n        }\n        else {\n            // start y > point.y (no test needed)\n            if (point2.y <= point.y) {                              // A downward crossing\n                if (orient2d(point1, point2, point) < 0.0) {         // Point right of edge\n                    --winding_number;                               // Have a valid down intersect\n                }\n            }\n        }\n    }\n    return (winding_number != 0);\n}\n\n\n\nfloat sdQuad(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p) {\n    \n\tfloat d1 = sdLineSquared(p, p0, p1);\n\tfloat d2 = sdLineSquared(p, p1, p2);\n\tfloat d3 = sdLineSquared(p, p2, p3);\n\tfloat d4 = sdLineSquared(p, p3, p0); \n    \n    float d = sqrt(min(min(d1,d2),min(d3,d4)));\n    \n\tvec2 vert[4] = vec2[](p0,p1,p2,p3);\n\tbool inside = pnpoly4(vert,p);\n    if (inside) return -d;\n    return d;\n}\n\nfloat sdPoly5(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p4, in vec2 p) {\n    \n\tfloat d1 = sdLineSquared(p, p0, p1);\n\tfloat d2 = sdLineSquared(p, p1, p2);\n\tfloat d3 = sdLineSquared(p, p2, p3);\n\tfloat d4 = sdLineSquared(p, p3, p4); \n    float d5 = sdLineSquared(p, p4, p0); \n    \n    float d = sqrt(min(min(min(d1,d2),min(d3,d4)),d5));\n    \n\tvec2 vert[9] = vec2[](p0,p1,p2,p3,p4,p4,p4,p4,p4);\n\tbool inside = pnpoly9(vert,5,p);\n    if (inside) return -d;\n    return d;\n}\n\nfloat sdPoly6(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p4, in vec2 p5, in vec2 p) {\n    \n\tfloat d1 = sdLineSquared2(p, p0, p1);\n\tfloat d2 = sdLineSquared2(p, p1, p2);\n\tfloat d3 = sdLineSquared2(p, p2, p3);\n\tfloat d4 = sdLineSquared2(p, p3, p4); \n    float d5 = sdLineSquared2(p, p4, p5); \n\tfloat d6 = sdLineSquared2(p, p5, p0); \n    \n    float d = sqrt(min(min(min(d1,d2),min(d3,d4)),min(d5,d6)));\n    \n\tvec2 vert[9] = vec2[](p0,p1,p2,p3,p4,p5,p4,p4,p4);\n\tbool inside = is_inside(vert,6,p);\n    if (inside) return -d;\n    return d;\n}\n\nfloat sdPoly8(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p4, in vec2 p5, in vec2 p6, in vec2 p7, in vec2 p) {\n    \n\tfloat d1 = sdLineSquared2(p, p0, p1);\n\tfloat d2 = sdLineSquared2(p, p1, p2);\n\tfloat d3 = sdLineSquared2(p, p2, p3);\n\tfloat d4 = sdLineSquared2(p, p3, p4); \n    float d5 = sdLineSquared2(p, p4, p5); \n\tfloat d6 = sdLineSquared2(p, p5, p6); \n\tfloat d7 = sdLineSquared2(p, p6, p7); \n\tfloat d8 = sdLineSquared2(p, p7, p0); \n    \n    float d = sqrt(min8(d1,d2,d3,d4,d5,d6,d7,d8));\n    \n\tvec2 vert[9] = vec2[](p0,p1,p2,p3,p4,p5,p6,p7,p7);\n\tbool inside = is_inside(vert,8,p);\n    //bool inside = pnpoly9(vert,8,p);\n    if (inside) return -d;\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tp *= 1.4;\n    \n   \tvec2 m1 = ((2.0*iMouse.xy-iResolution.xy)/iResolution.y) * 1.4;;\n     \n\tvec2 v1 = cos( iTime + vec2(0.0,2.00) + 0.0 );\n\tvec2 v2 = cos( iTime + vec2(0.0,1.50) + 1.5 );\n\tvec2 v3 = cos( iTime + vec2(0.0,3.00) + 4.0 );\n    vec2 v4 = cos( iTime + vec2(0.0,4.00) + 3.0 );\n    \n\tvec2 v5 = cos( iTime + vec2(0.0,2.00) + 1.5 );\n\tvec2 v6 = cos( iTime + vec2(0.0,6.00) + 4.0 );\n    vec2 v7 = cos( iTime + vec2(0.0,6.00) + 3.0 );\n    vec2 v8 = cos( iTime + vec2(0.0,7.00) + 2.0 );\n    vec2 v9 = cos( iTime + vec2(0.0,1.00) + 4.0 );\n    //vec2 v7 = iMouse.xy / iResolution.xy; //cos( iTime + vec2(0.0,6.00) + 3.0 );\n\n\tfloat dt = sdTriangle( v5, v6, v7, p );\n    float dq = sdQuad( v1, v2, v3, v4, p );\n    float dq2 = sdPoly5( v5, v6, v7, v8, v9, p );\n    float dq3 = sdPoly6( v1, v2, v3, v4, v8, v9, p );\n    float dq4 = sdPoly8( v1, v2, v3, v4, v5, v6, v7, m1, p );\n    \n    float bd = approx_distance( p, v1, m1, v3);\n    \n    //float d = min(dq2,dq3);\n    //float d = abs(dq4) - 0.01; //min(dq2,dq);\n    float d = dq4;//bd;\n    //float d = bd;\n\n    vec3 col = vec3(1.0,1.0,1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\t//col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    \n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,5.0/iResolution.y,abs(d)) );\n    \n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}