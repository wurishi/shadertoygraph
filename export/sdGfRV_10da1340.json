{"ver":"0.1","info":{"id":"sdGfRV","date":"1658479422","viewed":87,"name":"Basic Intersection Visualizer","username":"lolsen","description":"My first (and very basic) attempt of visualizing objects intersecting.\nControl the main circle by mouse.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["collision","intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Circle{\n    vec2 position;\n    float radius;\n};\n\nCircle mainCircle = Circle(vec2(300,200),40.0); //set position and radius\nCircle npcCircle = Circle(vec2(400,200),40.0);\n\n//returns true if point is within given Circle\nbool isInCircle(Circle circle,vec2 point) \n{\n      vec2 pointToCircle = circle.position-point;\n      if(length(pointToCircle)<=circle.radius)\n      {\n          return true;\n      }\n      return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int fragCircle=0;\n    bool snapBack=false; //enable for Circle to snap back to origin after Click\n    \n    vec3 col = vec3(1,1,1); //back Color;\n    \n    if(iMouse.z>0.0||!snapBack)\n    {\n        mainCircle.position = iMouse.xy; //controls\n    }\n    if(isInCircle(mainCircle,fragCoord)) \n    {\n        fragCircle++;\n    }\n    if(isInCircle(npcCircle,fragCoord)) \n    {\n        fragCircle++;\n    }\n    if(fragCircle==1) //if Frag in One Circle\n    {\n        col = vec3(0,0,0);\n    }\n    else if(fragCircle==2) //if Frag in 2 Circle (=Collision)\n    {\n        col = vec3(1,0,0);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}