{"ver":"0.1","info":{"id":"DdV3Wt","date":"1679242612","viewed":251,"name":"A lot of tonemappers","username":"Poisson","description":"A tonemapper comparison.","likes":25,"published":1,"flags":0,"usePreview":1,"tags":["2d","color","effect","tonemapping","tonemapper","tonemap","comparison","tone","aces"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A lot of tonemappers, try to change the values\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec3 x = (.3+1.4*p.y)*texture(iChannel0, p).rgb;\n     \n    if (p.x<1./8.) {\n        // degree 1 tonemapper\n        // simple and very effective, I use it all the time\n        float a = 2.;\n        float b = 1.5;\n        float c = 1.;\n        x = a*x / (b*x + c);\n    } else if (p.x<2./8.) {\n        // degree 2 tonemapper\n        // very good for realistic shaders\n        float a = 9.;\n        float b = 9.;\n        float c = .5;\n        float d = 1.;\n        x = a*x*x / (b*x*x + c*x + d);\n    } else if (p.x<3./8.) {\n        // extended reinhard tonemapper\n        // useful for very bright images\n        float a = 1.3;\n        x = x*(1.+x/a) / (1.+x);\n    } else if (p.x<4./8.) {\n        // exp tonemapper 1\n        // simple, very good\n        float a = 1.5;\n        x = 1.-exp(-x*a);\n    } else if (p.x<5./8.) {\n        // exp tonemapper 2\n        // more complicated, but more realistic\n        float a = 4.;\n        float b = 7.;\n        float c = 3.5;\n        x = 1. - 2.*exp(a*x)/(exp(b*x) + exp(c*x));\n    } else if (p.x<6./8.) {\n        // trigonometric tonemapper\n        float a = .8;\n        x = sin(a*x*3.141592/2.);\n    } else if (p.x<7./8.) {\n        // my tonemapper\n        // weird but nice\n        float a = 1.25;\n        float b = 1.5;\n        float c = 2.;\n        x = a*pow(b + pow(x,-vec3(c)), -1./vec3(c));\n    } else if (p.x<8./8.) {\n        // no tonemapping\n    }\n    \n    // this part of the code is inspired by this iq's shader: https://www.shadertoy.com/view/ll2GD3\n    float f = fract(p.x*8.);\n    x *= smoothstep(.49, .48, abs(f-.5)); // borders\n    x *= .7+.3*sqrt(5.*f*(1.-f)); // shadow\n\n    fragColor = vec4(x,1.0);\n}","name":"Image","description":"","type":"image"}]}