{"ver":"0.1","info":{"id":"ctB3RD","date":"1672913411","viewed":81,"name":"Learning 3Dsdf soft shadow","username":"Gn","description":"3Dsdf soft shadow","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n#define PI 3.14159265\n\n#define P vec3(0.2, 0.2, 0.2)\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfSphere(in vec3 p) {\n    return length(p) - 1.;\n}\n\nfloat sdfRect(in vec3 uv){\n    vec3 p = P;\n    vec3 d = abs(uv) - p;\n\n    return length(max(d, 0.)) + min(max(max(d.x, d.y), d.z), 0.) - 0.1;\n}\n\nfloat sdfGround(in vec3 uv){\n    return uv.y + 0.5;\n}\n\nfloat sdfHeart(vec3 p)\n{\n  float x = p.x;\n  float y = p.y;\n  float z = p.z;\n  float a = x*x + 9.0/4.0*y*y + z*z - 1.0;\n  float b = a*a*a - x*x*z*z*z - 9.0/80.0*y*y*z*z*z;\n  return b;\n}\n\nfloat map(in vec3 uv){\n    float d = sdfRect(uv);\n    d = sdfHeart(uv);\n    //d = min(sdfHeart(uv), d);\n    //d = min(sdfGround(uv), d);\n    return d;\n}\n\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if(d < PRECISION)\n            break;\n        t += d;\n    }\n    return t;\n}\n  \n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h) +\n        k.yyx * map(p + k.yyx * h) +\n        k.yxy * map(p + k.yxy * h) +\n        k.xxx * map(p + k.xxx * h));\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nfloat getShadowColor(vec3 lightPos, vec3 p){\n    float color = 1.;\n    float t = rayMarch(p, normalize(lightPos - p));\n    if (t < TMAX){\n        color = 0.1;\n    }\n    return color;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    for( float t=TMIN; t<TMAX; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, 8.0*h /t );\n        t += h;\n    }\n    return res;\n}\n\n\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.);\n    vec3 ro = vec3(1.0 * cos(iTime), 0.5, 1. * sin(iTime));\n    //ro = vec3(1.0, 0.5, 1.);\n\n    if (iMouse.z > 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        ro = vec3(2. * cos(theta), 1., 2. * sin(theta));\n    }\n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    vec3 rd = normalize(cam * vec3(uv,1.0));\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(2., 2., 2.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n        float shadowCol = softshadow(p, normalize(light - p));\n        color = amb * vec3(0.23) + dif * shadowCol*vec3(1.);\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}