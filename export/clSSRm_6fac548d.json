{"ver":"0.1","info":{"id":"clSSRm","date":"1675888541","viewed":143,"name":"Reflective Gloopiness","username":"jonny_townend","description":"A ray march setup to see how much I can remember! Includes mouse interaction. Sit back, relax, and reflect on the gloopiness...","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["ray","raymarch","lighting","colorful","specular","reflections","march"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERS 50\n#define MIN_DIST 0.003\n#define MAX_DIST 100.\n\n// SDFs\nfloat sSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sPlane(vec3 p) {\n    return p.y;\n}\n\nfloat sPlaneXY(vec3 p) {\n  return p.z;\n}\n\nfloat sScene(vec3 p) {\n    float x = (iMouse.x/iResolution.x);\n    float d = smin(sPlane(p + vec3(1.)), sSphere(p - vec3(0., 0., 2.), 0.5), 2.5);\n    d = smin(d, sSphere(p - vec3(0.5, 0.5, 1.5), 0.3), 10.);\n    d = smin(d, sSphere(p - vec3(-0.7, 0.2, 1.8), 0.2), 10.);\n    d = smin(d, sSphere(p - vec3(-0.1 + x, -0.2, 1.4), 0.2), 10.);\n    d = smin(d, sSphere(p - vec3(-0.3, sin(iTime), 1.4), 0.1), 7.);\n    d = smin(d, sPlaneXY(vec3(5.) - p), 10.);\n    d = smin(d, sSphere(p - vec3(0., 0.5, 7.), 4.), 2.);\n    return d;\n}\n\n// Ray casting\nstruct RayCast {\n    vec3 p;\n    float d;\n};\nRayCast getSurface(vec3 ro, vec3 rd) {\n    float d = 0.;\n    vec3 p = ro;\n    for(int i=0; i<MAX_ITERS; i++) {\n        p += d * rd;\n        d = sScene(p);\n        if (d < MIN_DIST) {\n            return RayCast(p, d);\n        }\n    }\n    return RayCast(p, MAX_DIST);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0.);\n    vec3 val = vec3(\n        sScene(p + e.xyy) - sScene(p - e.xyy),\n        sScene(p + e.yxy) - sScene(p - e.yxy),\n        sScene(p + e.yyx) - sScene(p - e.yyx)\n    );\n    return normalize(val);\n}\n\n// Lighting\nstruct Light {\n    vec3 pos;\n    vec3 col;\n};\n\nvec3 getLighting(vec3 p, vec3 n, vec3 i, Light light) {\n    float dist = length(p - light.pos);\n    vec3 normDiff = normalize(light.pos - p);\n    \n    // diffuse\n    float diffuse = dot(n, light.pos);\n    diffuse = map(diffuse, 0., 1., 0.2, 1.);\n    diffuse *= 1. / pow(dist, 2.);\n    diffuse = max(0., diffuse);\n    vec3 diffuseV = diffuse * light.col;\n   \n    // specular\n    float spec = dot(i, normDiff);\n    spec = 0.9 * smoothstep(0.99, 1., spec);\n    vec3 specular = spec * (light.col + vec3(0.8));\n    \n    // shadow\n    float e = 0.02;\n    vec3 ro = p + (e * n);\n    RayCast rayCast = getSurface(ro, normDiff);\n    float shadow = step(0., rayCast.d - e - dist);\n    shadow = map(shadow, 0., 1., 0.1, 1.);\n    \n    return shadow * (diffuseV + specular);\n}\n\nvec3 getSceneLighting(vec3 p, vec3 n, vec3 i) {\n    Light light1 = Light(\n        vec3(1.5*sin(iTime), 2., 0.5*cos(iTime)),\n        5. * vec3 (1., 0., 0.)\n    );\n    \n    Light light2 = Light(\n        vec3(-1.*sin(iTime), 2., -0.5*cos(iTime) - 1.),\n        4. * vec3 (0., 1., 0.)\n    );\n    \n    Light light3 = Light(\n        vec3(-1.5*sin(iTime), 2., 0.5*cos(iTime) + 1.),\n        2. * vec3 (0., 0., 1.)\n    );\n    \n    Light light4 = Light(\n        vec3(-5., 100., 10.),\n        100. * vec3(1., 0., 0.5)\n    );\n    \n    vec3 lighting = getLighting(p, n, i, light1);\n    lighting += getLighting(p, n, i, light2);\n    lighting += getLighting(p, n, i, light3);\n    lighting += getLighting(p, n, i, light4);\n    return lighting;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 1.;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0., 0., -zoom);\n    vec3 rd = normalize(vec3(uv, 0.) - ro);\n    \n    vec3 p = getSurface(ro, rd).p;\n    vec3 n = getNormal(p);\n    vec3 i = reflect(normalize(p), n);\n    \n    // Ambient lighting\n    vec3 col = 0.3 * vec3(0., 0.8, 1.);\n    \n    // Base lighting\n    col += getSceneLighting(p, n, i);\n    \n    // Reflections\n    float fresnel = dot(ro, n);\n    fresnel = smoothstep(1., 0.4, fresnel);\n    ro = p + (0.02 * n);\n    p= getSurface(ro, i).p;\n    n = getNormal(p);\n    col += 0.2 * fresnel * getSceneLighting(p, n, i);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Helpers\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat smin(float a, float b, float k) {\n  float res = exp(-k * a) + exp(-k * b);\n  return -log(res) / k;\n}","name":"Common","description":"","type":"common"}]}