{"ver":"0.1","info":{"id":"stG3D1","date":"1637603051","viewed":168,"name":"all of the lights sdf","username":"rs_creative","description":"Light SDFs","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["sdddddddddd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision lowp float;\n\n/*int sampleCount = 2;\nfloat blur = 1.0; \nfloat falloff = 0.65;*/\n\nint sampleCount = 5;\nfloat blur = 1.0; \nfloat falloff = 0.85;\n\nfloat random(vec2 coords) {\n   return fract(sin(dot(coords.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nconst float NOISE_GRANULARITY = 8.0 / 255.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\n    vec2 destCoord = fragCoord.xy / iResolution.xy;\n    \n    vec2 dir = vec2( 0.5, 0.5);\n\n    vec2 direction = normalize(destCoord - dir); \n    vec2 velocity = direction * blur * pow(length(destCoord - dir), falloff);\n\tfloat inverseSampleCount = 1.0 / float(sampleCount); \n    \n    mat3x2 increments = mat3x2(velocity * 1.0 * inverseSampleCount,\n                               velocity * 2.0 * inverseSampleCount,\n                               velocity * 4.0 * inverseSampleCount);\n                               \n    vec3 accumulator = vec3(0);\n    mat3x2 offsets = mat3x2(0); \n    \n    for (int i = 0; i < sampleCount; i++) {\n        accumulator += texture(iChannel0, destCoord + offsets[0]).rgb;         \n        offsets -= increments;\n    }\n    \n    vec3 radial = accumulator / float(sampleCount);\n    \n    vec3 outColor = mix( texture( iChannel0, destCoord ).rgb, radial, sin( iTime ) * 0.5 + 0.5 );    \n    \n    outColor += mix(-NOISE_GRANULARITY, NOISE_GRANULARITY, random(destCoord));\n    \n    fragColor = vec4( clamp( outColor, vec3(0.0), vec3(1.0) ), 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"precision lowp float;\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); \n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); \n  vec3 Pf1 = Pf0 - vec3(1.0);\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  \n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat random(vec2 coords) {\n   return fract(sin(dot(coords.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nconst float NOISE_GRANULARITY = 8.0 / 255.0;\n\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame, float multiplier) \n{\n    vec2 mult = texCoord * resolution;\n    float offset = snoise(vec3(mult / multiplier, frame));\n    float n1 = pnoise(vec3(mult, offset), vec3(1.0/texCoord * resolution, 1.0));\n    return n1 / 2.0 + 0.5;\n}\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame) \n{\n    return grain(texCoord, resolution, frame, 2.5);\n}\n\nfloat grain(vec2 texCoord, vec2 resolution) \n{\n    return grain(texCoord, resolution, 0.0);\n}\n\nfloat sdfCircle(vec2 uv, vec2 offset, float distortionAmount ) \n{\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  float a =length(vec2(x, y) + ( snoise( vec3( uv.x * distortionAmount, uv.y * distortionAmount, 1.0) ) * ( 0.07 * distortionAmount ) ));\n  return a;\n}\n\nfloat sdfCircleB(vec2 uv, vec2 offset, float r ) \n{\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  float a = length(vec2(x, y)) - r;\n  return a;\n}\n\nvec3 rgb( vec3 col ) \n{\n  return col / 255.;\n}\n\nvec3 drawBackground() \n{\n  return rgb( vec3( 0., 0., 20. ) );\n}\n\nfloat smin(float a, float b, float k) \n{\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k) \n{\n  return -smin(-a, -b, k);\n}\n\n\nstruct Blob {\n    float edge;\n    float scale;    \n    vec3 color;\n    float distortionAmount;\n    vec2 position;\n};\n\nconst int blobCount = 5;\n\n\nBlob blobs[ blobCount ];\n\n\nvec3 drawScene( vec2 uv, vec2 mouse ) \n{\n\n  vec2 origUV = uv;\n  vec2 scaledUV = uv;\n  \n  scaledUV -= 0.5;\n  scaledUV *= 0.2;\n  scaledUV += 0.5;\n\n  vec3 col = drawBackground();\n  \n  Blob blob1 = Blob( 0.0, 0.2, vec3( 152., 153., 50. ), 1.0, vec2(0.5 + (-cos( iTime ) * 0.2), (0.5) )); \n  blobs[0] = blob1;\n  \n  Blob blob2 = Blob( 0.0, 0.25, vec3( 172., 65., 123 ), 1.0, vec2(0.5 + (-sin( iTime ) * 0.1), 0.3) ); \n  blobs[1] = blob2;\n  \n  Blob blob3 = Blob( 0.0, 0.2, vec3( 255., 0., 0. ), 1.0, vec2(0.5 + (sin( iTime ) * 0.1), 0.5) ); \n  blobs[2] = blob3;\n  \n  Blob blob4 = Blob( 0.0, 0.4, vec3( 169., 115., 255. ), 1.0, mouse ); \n  blobs[3] = blob4;\n  \n  Blob blob5 = Blob( -0.08, 0.2, vec3( 255., 255., 255. ), 0.0, vec2( 0.5 ) ); \n  blobs[4] = blob5;\n  \n  for( int i = 0; i < blobCount; i++ )\n  {\n      Blob b = blobs[i];\n      float getBlob = sdfCircle(uv, b.position, b.distortionAmount );\n           \n      col = mix( rgb( b.color ), col, smoothstep(b.edge, b.scale, getBlob));\n      \n  }\n\n  return col;\n}\n\nvoid normalizeMouse( in vec2 res,out vec2 mouseNorm )\n{\n    vec2 mouse = iMouse.xy / res.xy;\n    mouse.x -= 0.5;\n    mouse.x *= res.x / res.y;\n    mouse.x += 0.5;    \n    mouseNorm = mouse;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  uv -= 0.5;\n  uv.x *= iResolution.x/iResolution.y;\n  uv += 0.5;\n  \n  vec2 mouse = vec2( 0.0 );\n  \n  normalizeMouse( iResolution.xy, mouse );\n    \n  vec3 col = drawScene(uv, mouse);\n  \n  // post\n  \n  col *= 1.5;\n \n\n  fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}