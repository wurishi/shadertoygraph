{"ver":"0.1","info":{"id":"7tjczm","date":"1656306961","viewed":127,"name":"ripple tea b / w","username":"cxm","description":"ripple tea b / w background and video clip source shader","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["ripple","tea"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define count 100\n#define speed .7\n\nvec2 center = vec2( .5, .5 );\nfloat dt = 0.;\n\nmat2 _rot1(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c,s,-s,c);\n}\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat noise( in vec2 p )\n{\n    return sin(p.x)*sin(p.y);\n}\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2(fbm4(p), fbm4(p+vec2(7.8)));\n}\n\n// pulse\nfloat Pulse2Pixel( in vec2 uv, vec2 pos, float rot, float size, float idx ){\n    float b = 0.;\n    vec2 bUv = uv;\n    uv -= pos;\n    uv *= _rot1( rot );\n    uv += pos;\n    \n    uv = fbm4_2( ( uv + fbm4_2( uv + ( fbm4_2( uv - rot ) - rot ) ) ) );\n\n    b = cos( uv.x ) * sin( uv.y );\n    // b = noise( uv ) + cos( uv.x ) * sin( uv.y ) * .3;\n    \n\n    b *= 1. - smoothstep(.0, size, length( bUv - pos ) );\n    \n    b = mix(\n        b, \n        0.,\n        1. - smoothstep(.0, size * .6, length( bUv - pos ) )\n    );\n    \n    // pulse overlay\n    b = mix(\n        b, \n        uv.x * .6,\n        1. - smoothstep(.0, size, length( bUv - pos ) )\n    );\n    \n    return b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 uv2 = fragCoord/iResolution.yy;\n    \n    float resRa = ( iResolution.x / iResolution.y );\n    uv.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    uv2.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    \n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    float p = 0.;\n\n\n    float t = fract( iTime * .5 );\n\n    \n    for( float i = 0.; i < 5.; i++ ){\n    \n        t = fract( iTime * .5 - .25 * i );\n       \n        p = Pulse2Pixel( uv, center * 2. - .5, t, t, 0. );\n\n        col = mix(\n            col,\n            vec3( 3. - 3. * ( t ) ),\n            p\n        );\n    \n    }\n\n\n    \n    \n    /*\n\n    for( int i = 0; i < 10; i++ ){\n    \n        float t = ( float( i ) / 10. ) * mod( iTime, 1. );\n        \n        vec2 ct = center + vec2( cos( iTime ) * .1, sin( iTime ) * .1 ) * ( float( i ) / 10. );\n    \n        p = Pulse2Pixel( uv, ct * 2. - .5, t, t * 2., 0. );\n\n        col = mix(\n            col,\n            vec3( 1.5 * ( 1. - mod( t, 1. ) ) ),\n            p\n        );\n    }\n    */\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}