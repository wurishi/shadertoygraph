{"ver":"0.1","info":{"id":"4fdfRS","date":"1733233391","viewed":171,"name":"Exploded Feather","username":"Nekodigi","description":"- The wings grow and fly away as if cutting through space. -\nThe feather is created using voronoi.","likes":7,"published":3,"flags":0,"usePreview":1,"tags":["voronoi","explosion","wing","feather"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Exploded Feather by Nekodigi\n//*References\n//Fisheye : https://www.shadertoy.com/view/4s2GRR\n//Voronoi : https://www.shadertoy.com/view/ldl3W8\n//Voronoi - Smooth: https://www.shadertoy.com/view/ldB3zc\n\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\treturn textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\nfloat hash1( float n ) { return fract(sin(n)*43758.5453); }\n\n\n//from Fisheye / antifisheye (https://www.shadertoy.com/view/4s2GRR)\nvec2 fishEye(vec2 p, float power){\n  float prop = iResolution.x / iResolution.y;//screen proroption\n    vec2 m = iMouse.xy / iResolution.yy;//* Result can be distorted when center moved in y axis\n    if(m == vec2(0.))m=vec2(1.5,1.);\n\t//vec2 m = vec2(0.5*prop, 0.5);//center coords\n\tvec2 d = p - m;//vector from center to current fragment\n\tfloat r = sqrt(dot(d, d)); // distance of pixel from center\n\n\tfloat bind;//radius of 1:1 effect\n\tif (power > 0.0) bind = sqrt(dot(m, m));//stick to corners\n\telse {if (prop < 1.0) bind = m.x; else bind = m.y;}//stick to borders\n\n\t//Weird formulas\n\tvec2 uv;\n\tif (power > 0.0)//fisheye\n\t\tuv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);\n\telse if (power < 0.0)//antifisheye\n\t\tuv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);\n\telse uv = p;//no effect for power = 1.0\n  return uv;\n}\n\n//Voronoi - smooth https://www.shadertoy.com/view/ldB3zc\n// The parameter w controls the smoothness\nvec4 voronoi( in vec2 x, float w )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec4 m = vec4( 8.0, 0.0, 0.0, 0.0 );\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n        vec2 o = hash2( n + g );\n\t\t\n\t\t// animate\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n\n        // distance to cell\t\t\n\t\tfloat d = length(g - f + o);\n\t\t\n        // cell color\n\t\tvec3 col = 0.5 + 0.5*sin( hash1(dot(n+g,vec2(7.0,113.0)))*2.5 + 3.5 + vec3(2.0,3.0,0.0));\n        // in linear space\n        col = col*col;\n        \n        // do the smooth min for colors and distances\t\t\n\t\tfloat h = smoothstep( -1.0, 1.0, (m.x-d)/w );\n\t    m.x   = mix( m.x,     d, h ) - h*(1.0-h)*w/(1.0+3.0*w); // distance\n\t\tm.yzw = mix( m.yzw, col, h ) - h*(1.0-h)*w/(1.0+3.0*w); // color\n    }\n\t\n\treturn m;\n}\n\n//Voronoi - distances https://www.shadertoy.com/view/ldl3W8\nvec3 voronoi( in vec2 x )\n{\n    vec2 ip = floor(x);\n    vec2 fp = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( ip + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - fp;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( ip + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - fp;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.yy;\n    vec2 uv = -1.0 + 2.0*p;\n    float prop = iResolution.x / iResolution.y;\n    vec2 m = vec2(0.5*prop, 0.5 );\n    //vec2 m = iMouse.xy / iResolution.yy;\n    p = fishEye(p, -2.);\n    vec2 pn = p - m;\n    float a = atan( pn.y, pn.x );\n    float r = length(pn);\n    p.x = r - iTime*0.4;\n    p.y = a;//+r\n    \n    vec4 c1 = 1.-voronoi( 8.0*p, 0.);\n    vec3 c2 = voronoi( 8.0*p);\n    vec3 c = mix( c1.xyz, c2, 1.-length(pn) );//\n    vec3 col = vec3(0.);// = c.x*(0.5 + 0.5*sin(64.0*c.x))*vec3(1.0);\n    float f = smoothstep( 0.04, 0.07, c.x-length(pn)*2.+0.5);//\n    col = mix( col, c1.yzw, f);//+0.1-length(uv)*0.5;\n\tcol = pow( col, vec3(0.4545) );\n\tfragColor = vec4(col,1.0);\n}\n\n\n//Feedback\n//! Looks like high speed, but it's too straight and don't look like feather.\n//* tried but looked unnatural\n\n//! Explosion effect\n//? Center is dense, edges are curved like wing","name":"Image","description":"","type":"image"}]}