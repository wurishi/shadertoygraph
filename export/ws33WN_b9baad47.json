{"ver":"0.1","info":{"id":"ws33WN","date":"1569663431","viewed":208,"name":"ReactionDiffusion 9alt","username":"xef6","description":"edot pf https://www.shadertoy.com/view/Mt3fWH","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cell(vec2 fragCoord, vec2 pixel)\n{\n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy / 1.;\n    //uv += iTime * 0.02;\n    //uv = mod(uv * 2., 1.);// for repeat the texture\n    \n    return texture(iChannel0, uv / ZOOM).rg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float a = mod(iTime,3.14159*2.);\n    \n    // thanks to shane for this lighting model\n\n    float c = cell(fragCoord, vec2(0,0)).g;\n    float c2 = cell(fragCoord, vec2(-1)/*vec2(cos(a),sin(a))*/).g;\n    \n    //vec3 col = vec3(1)*c*c*1.5;\n    //col += vec3(.2, .2, .8)*max(c2*c2*c2 - c*c*c, 0.0)*iResolution.y*.2;\n    \n    float f3,f4;\n    float v3,v4;\n    \n    f3 = 0.021;\n    v3 = sin(iTime*3.1415*2.0*f3)*0.5+0.5;\n    v3 = 0.8 + 0.2*v3;\n    \n    f4 = 0.019;\n    v4 = sin(iTime*3.1415*2.0*f4)*0.5+0.5;\n    v4 = 0.8 + 0.2*v4;\n\n    \n    \n    float f0,f1,f2;\n    float v0,v1,v2;\n    \n    f0 = 0.2;\n    f1 = 0.3;\n    f2 = 0.4;\n    \n    float tosc0 = 0.5+0.5*sin(iTime*6.2*0.0001121);\n    float tosc1 = 0.5+0.5*sin(iTime*6.2*0.0003111);\n    float tosc2 = 0.5+0.5*sin(iTime*6.2*0.0013131);\n    \n    v0 = sin(iTime*6.2*f0 + fragCoord.x*fragCoord.x * 0.001 * tosc0)*0.5+0.5;\n    v1 = sin(iTime*6.2*f1 + fragCoord.y*fragCoord.x * 0.201 * tosc1)*0.5+0.5;\n    v2 = sin(iTime*6.2*f2 + fragCoord.y*fragCoord.x * 0.101 * tosc2)*0.5+0.5;\n    \n    v0 = v0 * 0.4 * v3;\n    v1 = v1 * 0.2;\n    v2 = v2 * 0.8 * v4;\n    \n    vec3 col = vec3(1)*c*c*1.0;\n    \n   \tcol += vec3(v0,v1,v2)*max(c2*c2*c2-c*c*c,0.0)*iResolution.y*0.2;\n    \n    \n    \n    fragColor = sqrt(vec4(col, 1.));\n    //WriteTime();\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define FEED_RATE 0.05\n#define KILL_RATE 0.062\n#define ZOOM 1.0\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale, sampler2D sam, vec2 size)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > size.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > size.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = size.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = size.y;\n    \n\tvec2 uv = (fragCoord + pixel) / size.xy;\n    return texture(sam, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b, sampler2D sam, vec2 size) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a, sam, size) +\n        cell(fragCoord, vec2(0., st), dir, a, sam, size) +\n        cell(fragCoord, vec2(st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(-st, st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, st), dir, b, sam, size) -\n        cell(fragCoord, vec2(0., 0.), dir, 1., sam, size);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 voro(vec2 g, vec2 s, float t )\n{\n    vec2 v = g / s.y;\n    vec2 p = g /= s.y / 5., kp;\n\t\n    t = t * 0.5;\n\t//g += iTime * .5;\n\t\n    float d = 9., kd = d;\n    \n    for(int x=-3;x<=3;x++)\n    for(int y=-3;y<=3;y++)\n    {\t\n        vec2 p = vec2(x,y);\n        vec2 id = fract(sin((floor(g)+p)*mat2(1,10,10,1)));\n        vec2 an = sin( t * vec2(1,.5) + 9. * id );\n\t\tp += .5 + .35*an - fract(g);\n        p *= 5.;\n        \n        d = smin(d, dot(p,p), 7.5);\n\t\t\n\t\tif (d < kd)\n\t\t{\n\t\t\tkd = d;\n            kp = p;\n\t\t}\n    }\n\n\treturn vec4(kp, kd, 1);\n}\n\nvec4 calc(float vFrame, vec2 vCoord, vec2 vSize, sampler2D vChannel, float vtime)\n{\n    vec2 uvc = (vCoord * 2. - vSize)/vSize.y;\n\tvec2 diffusionCoef = vec2(.3)*0.076;\n    float diffOsc = (0.5+0.5*sin(vtime*3.1415*2.*0.02355));\n    diffusionCoef = vec2(.15 + diffOsc*0.6);\n    vec4 buf = voro(vCoord, vSize, vtime);// * sin(vtime*6.2*0.05)*10000000.;\n    \n    float tau = 6.2831853071;\n   \tfloat tscl = 0.01;\n    float t0 = -0.667;\n    float t1 = 0.0;\n    float t2 = 0.0;\n    \n    float f0 = 0.05;\n    float f1 = 0.01667;\n    float f2 = 0.05;\n    float f2lo = 0.03333;\n    float f2hi = 0.21667;\n    \n    \n    \n    f0 = 0.09;\n    f1 = 0.11;\n    f2 = 0.22;\n    \n    float f3 = 0.212351;\n    float f4 = 0.1123;\n    float f5 = 0.014123;\n    \n    float c3 = 0.04;\n    float c4 = 0.02;\n    float c5 = 0.0;\n    \n    float sclosc = 0.01 + c3 * (sin(vtime*tau*f3)*0.5+0.5) + c4 * (sin(vtime*tau*f4)*0.5+0.5)+ c5 * (sin(vtime*tau*f5)*0.5+0.5);\n    float scl0 = sclosc;\n    \n    f0 = f0 * scl0;\n    f1 = f1 * scl0;\n    f2 = f2 * scl0;\n    \n\n    float feedOsc  = 0.5 + 0.5*sin(tscl*tau*(vtime+t0)*f0);\n    float monchOsc  = 0.5 + 0.5*sin(tscl*tau*(vtime+t1)*f1);\n    float cycleOsc = 0.5 + 0.5*sin(tscl*tau*(vtime+t2)*f2);\n    float cycleScl = f2lo*cycleOsc + f2hi*(1.-cycleOsc);\n    //cycleScl = 5.;\n    \n    float phaseOsc = (0.5+0.5*sin(vtime*3.1415*2.*0.015123));\n    float feedCoef = (sin(buf.z*buf.y)*0.5+0.5) * 0.0008 + 0.01 *feedOsc;// + 0.001*cycleScl;\n    float monchCoef = (sin(buf.y*buf.z+6.2*phaseOsc)*0.5+0.5) * 0.035   + 0.02 * monchOsc;// - 0.001*cycleScl;\n    \n    //feedCoef = 0.1;\n    //monchCoef = 0.1;\n    \n    //float s0 = sin(vtime*-.1)*0.5+0.5;\n    //float sm = s0*buf.x + (1.-s0)*buf.z;\n    //feedCoef  = (cos(vCoord.y*buf.x)*0.5+0.5) *0.01;\n    //monchCoef = (sin(vCoord.x)*0.5+0.5) *0.02;\n    \n    vec2 ab = cell(vCoord, vec2(0,0), vec2(0,0), 1., vChannel, vSize);\n    vec2 lp = laplacian2D(vCoord, vec2(1), .5, .5, vChannel, vSize);\n       \n    float reaction = ab.x * ab.y * ab.y;\n    vec2 diffusion = diffusionCoef * lp;\n    float feed = feedCoef * (1. - ab.x);\n    float monch = (feedCoef + monchCoef) * ab.y;\n        \n    ab += diffusion + vec2(feed - reaction, reaction - monch);\n        \n    return vec4(clamp(ab,0.,1e1),0.0,1.0);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n   \tif (iFrame < 30)\n    {\n        uv = (fragCoord*2. - iResolution.xy / ZOOM)/iResolution.y / ZOOM;\n    \tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), abs(uv.y)); \n    }\n    else if (iMouse.z > 0.0)\n\t{\n\t\tvec2 mo = iMouse.xy / iResolution.xy / ZOOM;\n    \tfragColor = texture(iChannel0, uv);\n        float len = 5.;\n        if (length((uv-mo)*vec2(len,len)) < 0.2)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv-mo)); \n\t}\n    else\n    {\n        fragColor = calc(float(iFrame), fragCoord, iResolution.xy, iChannel0, iTime);\n    }\n \n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfragColor = calc(float(iFrame), fragCoord, iResolution.xy, iChannel0, iTime);\n}\n\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = calc(float(iFrame), fragCoord, iResolution.xy, iChannel0, iTime);\n}\n\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// based on the tuto here : http://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = calc(float(iFrame), fragCoord, iResolution.xy, iChannel0, iTime);\n}\n\n","name":"Buffer D","description":"","type":"buffer"}]}