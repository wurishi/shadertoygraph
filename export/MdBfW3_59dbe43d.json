{"ver":"0.1","info":{"id":"MdBfW3","date":"1502413773","viewed":509,"name":"Blinn Phong Sphere","username":"vondirac","description":"This is a simple implementation of the modified Blinn-Phong Shading model (as presented in Real-Time Rendering)  applied to a sphere with multiple light sources.\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["phong","sphere","blinn","blinnphong","shaderequation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define t iTime * 0.5\n\nvec3 shade(float r, vec2 center, vec2 pos, vec3 l[2])\n{\n    float z = sqrt(r * r - pos.x * pos.x - pos.y * pos.y);\n    vec3 n = normalize(vec3(pos.x, pos.y, z)); \t\t// Surface normal\n\n    vec3 c_diff = vec3(0.9, 0.0, 0.7);\t\t\t\t// Diffuse color    \n    vec3 c_spec = vec3(0.0, 1.0, 1.0);\t\t\t\t// Specular color\n\n    float m = 11.0; \t\t\t\t\t\t\t\t// Surface Smoothness\n    float El = 0.9; \t\t\t\t\t\t\t\t// Irradiance of light source\n    vec3 Kd = c_diff.xyz / PI; \t\t\t\t\t\t// Diffuse term\n    vec3 Ks = c_spec.xyz * ((m + 8.0) / (8.0 * PI));// Specular term\n\n    vec3 Lo = vec3(0.0);\n    for (int i = 0; i < 2; i++)\n    {\n        vec3 h = normalize(l[i] + n); // Half vector\n\n        float cosTi = max(dot(n, l[i]), 0.0);\n        float cosTh = max(dot(n, h), 0.0);\n        Lo += (Kd.xyz + Ks.xyz * pow(cosTh, m)) * El * cosTi; // Outgoing radiance\n    }  \n\n    return Lo; \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//\tSphere Definition\n\tvec2 center = iResolution.xy / 2.0;\n\tfloat r = iResolution.y / 3.0;\n\tvec2 pos = fragCoord.xy - center;\n\n\t//\tLight vector\n\tvec3 l[2];\n    l[0] = normalize(vec3(sin(t), sin(t), cos(t)));\n    l[1] = normalize(vec3(-sin(t), cos(t), sin(t)));\n\n    // Outgoing radiance\n\tvec3 Lo = shade(r, center, pos, l);\n\n\tfragColor = vec4(Lo, 1.0);\n}","name":"Image","description":"","type":"image"}]}