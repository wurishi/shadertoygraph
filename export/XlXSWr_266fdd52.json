{"ver":"0.1","info":{"id":"XlXSWr","date":"1435666931","viewed":1491,"name":"God Rays test","username":"voax","description":"God Ray test using vandamme as occluder","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["godray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const int NUM_SAMPLES = 30;\nconst float Exposure = 1.0; // Directly scale the effect (0 = no effect, 1 = full)\nconst float MyDecay = -0.0;\nconst float CircleSize = 0.5;\n\nfloat Weight = 1.0 / float(NUM_SAMPLES);\nfloat Decay = 1.0 - MyDecay / float(NUM_SAMPLES);\n\nvec2 LightPos = vec2(0.5, 0.5);\n\n// green screen effect on input texture where the foreground is made black, with a white gradient dot as background\nvec3 occlusion(vec2 q)\n{\n    float i = clamp(length((q-LightPos)*vec2(iResolution.x/iResolution.y, 1.0))/CircleSize, 0.0, 1.0);\n    i = 1.0 - i*i;\n    \n    vec3 bg = vec3(i,i,i);\n\tvec3 fg = texture( iChannel0, q ).xyz;\n    \n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );\n    fg = vec3(k,k,k);\n    \n    return mix(fg, bg, k);\n}\n\n// simple green screen effect\nvec3 greenscreen(vec2 q)\n{\n    // vec3 bg = texture( iChannel1, vec2(q.x,1.0-q.y) ).xyz;\n    vec3 bg = vec3(0,0,0);\n\tvec3 fg = texture( iChannel0, q ).xyz;\n    \n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*5.0, 0.0, 1.0 );\n    \n    float dg = fg.g; \n    fg.g = min( fg.g, maxrb*0.8 ); \n    fg += dg - fg.g;\n    \n    return mix(fg, bg, k);\n}\n\n// god ray effect\nvec4 godray(vec2 texCoord)\n{ \n  \t// Store initial sample.  \n  \tvec3 originalColor = occlusion(texCoord).xyz;\n  \n  \tvec3 color = vec3(0,0,0);\n  \t// Set up illumination decay factor.  \n  \tfloat illuminationDecay = 1.0;  \n  \t// Evaluate summation from Equation 3 NUM_SAMPLES iterations.  \n  \tfor (int i = 0; i < NUM_SAMPLES; i++)  \n  \t{  \n\t    // Step sample location along ray.  \n    \tvec2 uv = mix(texCoord, LightPos, float(i) / float(NUM_SAMPLES-1));\n   \t   \n    \t// Retrieve sample at new location.  \n    \tvec3 sampl = occlusion(uv);\n    \t// Apply sample attenuation scale/decay factors.  \n    \tsampl *= illuminationDecay * Weight;  \n    \t// Accumulate combined color.  \n    \tcolor += sampl;  \n    \t// Update exponential decay factor.  \n    \tilluminationDecay *= Decay;  \n  \t}  \n  \t// Output final color with a further scale control factor.  \n  \treturn vec4( color * Exposure, 1);  \n}  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // fragColor = godray(uv) + vec4(greenscreen(uv),1);\n    // fragColor = vec4(greenscreen(uv),1);\n    fragColor = godray(uv);\n}","name":"Image","description":"","type":"image"}]}