{"ver":"0.1","info":{"id":"3ltSDS","date":"1581629043","viewed":146,"name":"Newton Fractal (Dual Complex)","username":"fizzer","description":"A remix of [url=https://www.shadertoy.com/view/Xd2GzR]this[/url] shader by IQ, adapting it to show the Newton fractal instead of a Mandelbrot.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","distance","complex","analytic","dual","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A small remix of IQ's dual complex number Mandelbrot: https://www.shadertoy.com/view/Xd2GzR\n//\n// Dual complex numbers allow for automatic differentiation of complex number functions\n// which is useful for computing a distance estimation. See IQ's shader for more information.\n//\n// This remix replaces the Mandelbrot orbit with the Newton-Raphson iteration on\n// the equation Z³ = 1 which has three roots, and starting values of Z will iterate\n// towards one of those roots. More here: https://en.wikipedia.org/wiki/Newton_fractal\n//\n// The calculated distance is the closest distance to the set of points which are\n// stationary under the iteration Z -> Z - (Z³ - 1) / (3Z²)\n//\n\n\n//-------------- dual complex numbers --------------\n\n// complex addition, and derivatives\nvec4 dcAdd( vec4 a, vec4 b )\n{\n    return a + b;\n}\n\n// complex multiplication, and derivatives\nvec4 dcMul( vec4 a, vec4 b )\n{\n    return vec4( a.x*b.x - a.y*b.y, \n                a.x*b.y + a.y*b.x,\n                a.x*b.z + a.z*b.x - a.y*b.w - a.w*b.y,\n                a.x*b.w + a.w*b.x + a.z*b.y + a.y*b.z );\n}\n\n// complex squaring, and derivatives\nvec4 dcSqr( vec4 a )\n{\n    return vec4( a.x*a.x - a.y*a.y, \n                2.0*a.x*a.y,\n                2.0*(a.x*a.z - a.y*a.w),\n                2.0*(a.x*a.w + a.y*a.z) );\n}\n\n// Conjugate\nvec4 dcConj( vec4 a )\n{\n    return vec4(a.x, -a.y, a.z, -a.w);\n}\n\n// Multiplicative inverse\nvec4 dcInverse( vec4 a )\n{\n    // This can handily be found on the Wikipedia page:\n    // https://en.wikipedia.org/wiki/Dual-complex_number\n    float n = dot(a.xy, a.xy);\n    return vec4(a.x, -a.y, -a.z, -a.w) / n;\n}\n\n// Quotient\nvec4 dcDiv( vec4 a, vec4 b )\n{\n    return dcMul(a, dcInverse(b));\n}\n\nconst vec2 roots[3] = vec2[3](\n    vec2(1, 0),\n    vec2(-.5, .5 * sqrt(3.)),\n    vec2(-.5, -.5 * sqrt(3.))\n);\n\n//--------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    // animation\t\n    float tz = 0.5 - 0.5*cos(0.225*iTime);\n    float zo = pow( 0.5, 16.0*tz );\n\n    float co = 0.0;\n\n    // Note that I have put the zo scaling factor directly into the\n    // starting value of z here, since zo is also the rate of change of the coordinates\n    // of the rendered image.\n    vec4 z = vec4( .00214*100. + p.x * zo, .001202*100. + p.y * zo, zo, zo );\n\n    for( int i=0; i<256; i++ )\n    {\n        if(distance(z.xy, roots[0]) < .001 ||\n           distance(z.xy, roots[1]) < .001 ||\n           distance(z.xy, roots[2]) < .001)\n            break;\n\n        // Z -> Z - (Z³ - 1) / (3Z²)        \n        z = dcAdd(z, -dcDiv(dcMul(z, dcSqr(z)) - vec4(1, 0, 0, 0), dcMul(vec4(3, 0, 0, 0), dcSqr(z))));\n\n        co += 1.0;\n    }\n\n    // Find the closest root for colourpicking.\n\n    float cd = 1e9;\n    int ci = 0;\n    for(int i = 0; i < 3; ++i)\n    {\n        float d = distance(z.xy, roots[i]);\n        if(d < cd)\n        {\n            cd = d;\n            ci = i;\n        }\n    }\n\n    // distance\t\n    // d(c) = |Z|·log|Z|/|Z'|\n    float d = 0.0;\n    z.xy-=roots[ci];\n    if(co<256.) d = -sqrt( dot(z.xy,z.xy)/dot(z.zw,z.zw) )*log(dot(z.xy,z.xy));\n\n    float d2 = d;\n\n    // do some soft coloring based on distance\n    d = clamp( d * 1., 0.0, 1. );\n    d = pow( d, 1./4. );\n    vec3 col = vec3( d );\n\n    col *= ci == 0 ? vec3(1.0, 1., 0.05) : ci == 1 ? vec3(0.0, 1.0, 0.2) : vec3(0.5, 0.0, 1.0);\n\n    col = col * .8 + d * d * .1;\n    \n    // output color\n    fragColor = vec4( pow(col, vec3(1. / 2.2)), 1.0 );\n}","name":"Image","description":"","type":"image"}]}