{"ver":"0.1","info":{"id":"Wd2yWV","date":"1587354065","viewed":148,"name":"Island Hopper","username":"eiffie","description":"simple flight sim. use up arrow to accel, mouse as stick (down to go up)","likes":4,"published":1,"flags":56,"usePreview":0,"tags":["game","flight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Island Hopper by eiffie\n//a simple flyer built to be run on slow GPUs\n//avoid the water and clouds\n//arrow up/down = throttle/brake, mouse = stick (down to go up)\n//after 4 years of being poisoned by psycho masons I'm glad I\n//can still throw something as simple as this together\nvec4 load(float x){return texture(iChannel0,vec2(x+.5,.5)/iResolution.xy);}\nfloat nois(vec2 v){// based on 2d noise by Trisomie21\n  vec4 h=fract(sin(vec4(floor(v.x)+floor(v.y)*100.)+vec4(0,1,100,101))*1000.);\n  v=smoothstep(0.,1.,fract(v));return mix(mix(h.x,h.y,v.x),mix(h.z,h.w,v.x),v.y);\n}\nfloat mud(vec2 v){float f=nois(v);return f+nois(v*(2.1-0.1*f))*f*0.25;}\nfloat noyz(vec2 v){return sin(v.x+sin(v.y*0.4));}\nfloat lumps(vec2 v){return 0.55*noyz(v)+0.3*noyz(v*2.0)+0.15*noyz(v*4.0);}\nfloat dot2(vec2 v){return dot(v,v);}\nvec3 bcol,mcol=vec3(0.0);\nfloat DE(vec3 p){\n  float rwy=max(abs(p.x+200.0)-3.0,max(abs(p.y)-0.54,abs(p.z+240.0)-25.0));\n  rwy=min(rwy,max(abs(p.x+202.75)-0.5,max(abs(p.y-1.5)-1.0,abs(p.z+250.0)-5.0)));\n  vec2 v=vec2(p.x,p.z+p.y);\n  float y=p.y+dot2(v)*0.0001,isl=y+lumps(v*0.1)-1.0;\n  if(isl<0.1)isl+=mud(v*2.0)*0.05;\n  float d=min(isl,min(rwy,y));\n  mcol=d==rwy?vec3(vec2(abs(p.x+200.0)*0.5+fract(p.z)*0.25-fract(p.y*1.6)),length(fract(p.xz*10.0))):\n    d==y?bcol:clamp(vec3(0.7,1.0-y*0.4,1.5-y),0.0,1.0);\n  return max(d*0.9,-y);\n}\nfloat waves(float y){return y>0.?0.:sin(sqrt(clamp(-y,0.0,0.9))*90.0-iTime)*0.45*max(-0.1,y);}\nvec3 sky(vec3 rd, vec3 L){//modified bananaft's & public_int_i's code\n  float d=0.4*dot(rd,L)+0.6;\n  rd.y=abs(rd.y+waves(rd.y));\n  float y=max(0.,L.y),sun=max(1.-(1.+10.*y+rd.y)*length(rd-L),0.)\n    +.3*pow(1.-rd.y,12.)*(1.6-y);\n  return d*mix(vec3(0.3984,0.5117,0.7305),vec3(0.7031,0.4687,0.1055),sun)\n    *((.5+pow(y,.4))*(1.5-abs(L.y))+pow(sun,5.2)*y*(5.+15.0*y));\n}\nfloat DEC(vec3 p){\n  vec2 v=vec2(p.x+p.y,p.z+iTime);\n  return lumps(v*0.13)+abs(p.y-100.0)*0.1;\n}\nfloat rnd;\nvoid randomize(in vec2 p){rnd=fract(float(iTime)+sin(dot(p,vec2(13.3145,117.7391)))*4231.7651);}\n\nvec3 skyMarch(vec3 ro, vec3 rd, vec3 L){\n  bcol=sky(rd,L);\n  float y=min(1.0,1.0+rd.y);\n  rd.y=abs(rd.y+waves(rd.y));\n  vec4 col=vec4(0);//color accumulator \n  float t=DEC(ro)*rnd,d,od=1.0,px=10.0/iResolution.x;\n  ro+=rd*t;\n  for(int i=0;i<32;i++){ \n    d=DEC(ro);\n    if(d<px*t){\n      vec3 scol=vec3(1);\n      float d2=DEC(ro+d*16.0*L);\n      float vis=3.0*clamp(1.0-d/od,0.0,1.0);\n      float shad=clamp(0.25*d2/d,0.25,1.0);\n      scol=(scol+vec3(1.0,0.5,0.0)*vis)*shad; \n      float alpha=(1.0-col.w)*clamp(1.0-d/(px*t),0.0,1.0); \n      col+=vec4(clamp(scol,0.0,1.0),1.0)*alpha; \n      if(col.w>0.9)break;\n    } \n    t+=d;od=d;ro+=rd*d; \n    if(t>2000.0)break; \n  }\n  col*=y*y;\n  col.rgb+=bcol*(1.0-clamp(col.w,0.0,1.0));\n  return col.rgb;\n}\nvec4 scene(vec3 ro, vec3 rd){\n  vec3 L=normalize(vec3(0.4,0.025,0.5)); \n  bcol=skyMarch(ro,rd,L); \n  vec4 col=vec4(0.0);//color accumulator \n  float t=DE(ro)*rnd,d,od=1.0,px=3.0/iResolution.x;\n  ro+=rd*t;\n  for(int i=0;i<100;i++){ \n    d=DE(ro);\n    if(d<px*t){\n      vec3 scol=mcol;\n      float d2=DE(ro+d*16.0*L);\n      float vis=clamp(1.0-d/od,0.0,1.0);\n      float shad=clamp(0.03125*d2/d,0.0,1.0); \n      scol=(scol+vec3(vis))*shad*5.0; \n      float alpha=(1.0-col.w)*clamp(1.0-d/(px*t),0.0,1.0); \n      col+=vec4(clamp(scol,0.0,1.0),1.0)*alpha; \n      if(col.w>0.9)break;\n    }\n    t+=d;od=d;ro+=rd*d; \n    if(t>1000.0 || ro.y<0.0)break; \n  }\n  col.rgb+=bcol*(1.0-clamp(col.w,0.0,1.0)); \n  return col;\n}\nmat3 lookat(vec3 fw, vec3 up){vec3 rt=normalize(cross(fw,up));return mat3(rt,cross(rt,fw),fw);}\nvoid mainImage(out vec4 O, in vec2 U){\n  if((length(U)<10.0)){O=vec4(1.0-iMouse.z,iMouse.w,0,1);return;}\n  vec2 uv=(U-iResolution.xy*0.5)/iResolution.x;\n  randomize(U);\n  vec3 fw=load(6.).xyz,up=load(7.).xyz;\n  vec3 ro=(load(1.).xyz+load(2.).xyz)*0.5+up*0.25;\n  vec3 rd=lookat(fw,up)*normalize(vec3(uv.xy,1.0));\n  O=abs(ro.y-50.0)>50.?vec4(ro.y/100.0,0.3,0.5,1):scene(ro,rd);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//tuned for slower GPUs\nvec4 load(float x){return texture(iChannel0,vec2(x+.5,.5)/iResolution.xy);}\n#define KEY_UP 38\n#define KEY_DOWN 40\n#define KEY_R 82\n#define fWRad 0.5\n#define fTRad 0.25\n#define fAccel 0.05*iTimeDelta\n#define fSteer 0.5*iTimeDelta\n#define fDrag (1.0-iTimeDelta*0.1)\n#define fGravity 0.125*iTimeDelta\n#define fWind 0.1*iTimeDelta\n#define fLift 0.5*iTimeDelta\nbool Key(in int key){return (texture(iChannel1,vec2((float(key)+0.5)/256.0, 0.25)).x>0.0);}\nfloat noyz(vec2 v){return sin(v.x+sin(v.y*0.4));}\nfloat lumps(vec2 v){return 0.55*noyz(v)+0.3*noyz(v*2.0)+0.15*noyz(v*4.0);}\nfloat DEC(vec3 p){//carrier not clouds as in image\n  float rwy=max(abs(p.x+200.)-3.,max(abs(p.y)-0.54,abs(p.z+240.)-25.));\n  return min(rwy,max(abs(p.x+202.75)-0.5,max(abs(p.y-1.5)-1.,abs(p.z+250.)-5.)));\n}\nfloat dot2(vec2 v){return dot(v,v);}\nfloat DE(vec3 p){\n  float rwy=DEC(p);\n  vec2 v=vec2(p.x,p.z+p.y);p.y+=dot2(v)*0.0001;\n  float isl=p.y+lumps(v*0.1)-1.0;\n  float d=min(isl*0.9,rwy);\n  return max(d,-p.y);\n}\nvec3 Stick(vec3 v){return v*(0.5*(length(v)-fWRad*2.0));}\nvoid mainImage(out vec4 O, in vec2 U){\n if(U.y>1. || U.x>8.)discard;\n O=texture(iChannel0,U/iResolution.xy);//save state\n int c=int(floor(U.x));\n //game state 0,1,2=plane 3,4,5=velo, 6=forward, 7=up, 0.w=throttle\n if(iFrame<5 || Key(KEY_R)){//setup\n   vec4 tail=vec4(-200.,.54+fTRad,-260.,0);//after this eye will be avg of wing tips\n   if(c==0)O=tail;\n   else if(c==1)O=tail+vec4(-fWRad,0,fWRad*sqrt(.75)*2.,0);//wing tips\n   else if(c==2)O=tail+vec4(fWRad,0,fWRad*sqrt(.75)*2.,0);\n   else if(c<6)O=vec4(0);//velocities\n   else if(c==6)O=vec4(0,0,1,0);//forward\n   else if(c==7)O=vec4(0,1,0,0);//up\n   return;\n }\n vec4 st=load(0.);\n vec3 dlt,vm0=st.xyz.xyz,vm1=load(1.).xyz,vm2=load(2.).xyz;\n vec3 av=(load(4.).xyz+load(5.).xyz)/2.0;\n float wind=(1.0+sin(iTime+sin(iTime*1.3)))*fWind,fAirspd=length(av),fGas=st.w;\n fAirspd+=(fAirspd>0.00001?(av/fAirspd).z*wind:wind);\n vec3 FW=normalize((vm1+vm2)/2.-vm0);\n vec3 RT=normalize(vm1-vm2);\n vec3 UP=normalize(cross(RT,FW));\n vec2 m=iMouse.z>0.?iMouse.xy/iResolution.xy-0.5:vec2(0);\n if(Key(KEY_UP))fGas=min(9.,fGas+iTimeDelta);\n else if(Key(KEY_DOWN)){\n   fGas=max(0.,fGas-8.0*iTimeDelta);\n   if(c>2 && c<6 && DEC(st.xyz)<0.05+fTRad)O.xyz*=clamp(1.-iTimeDelta,0.,1.);//brake\n }\n vec3 stk=Stick((c==0||c==3)?vm1-vm0:(c==1||c==4)?vm0-vm1:vm0-vm2)+\n   Stick((c==0||c==3)?vm2-vm0:(c==1||c==4)?vm2-vm1:vm1-vm2);\n vec3 vel=O.xyz;\n if(c<3){vel=load(3.+float(c)).xyz;O.xyz+=stk+vel;if(c==0)O.w=fGas;}\n else if(c<6){\n   if(c==3){\n     O.xyz+=stk;\n     O.xyz+=fAirspd*UP*m.y*fSteer;\n     O.xyz+=fAirspd*RT*m.x*fSteer;//slight movement rudder\n     if(Key(KEY_UP))O.w+=fAccel;\n     if(Key(KEY_DOWN))O.w*=fDrag;\n   }else if(c==4 || c==5){\n     O.xyz+=stk;\n     float steer=(c==5?-fSteer:fSteer);\n     O.xyz-=fAirspd*FW*m.x*steer;\n     O.xyz-=fAirspd*UP*m.x*m.x*m.x*steer*2.0;//larger movement rolls\n     O.y+=(1.0-m.x*m.x)*steer*(vm2.y-vm1.y)*0.25;//stabilizer\n   }\n   O.xyz+=FW*fGas*fAccel;\n   O.xyz+=fAirspd*UP*fLift;\n   O.y-=fGravity;\n   O.z-=wind*(abs(RT.y)+1.0-abs(FW.z)+(c==0?abs(RT.x):0.0));//wind hitting at wrong angles\n   O.xyz*=clamp(fDrag*(1.0-fAirspd*fAirspd)*(vm0.y<-0.1?0.5:1.),0.,1.);\n }else if(c==6)O=vec4(FW,0);\n else if(c==7)O=vec4(UP,0);\n if(c<6){//de constraint\n   vec3 p=(c<3?O.xyz:c==3?vm0:c==4?vm1:vm2);\n   float d=DE(p);\n    if(d<fTRad){\n      vec2 e=vec2(fTRad*.5,0);\n      vec3 N=normalize(vec3(DE(p+e.xyy),DE(p+e.yxy),DE(p+e.yyx))-vec3(d));      \n      if(dot(N,vel)<0.0){//collide\n        vel=reflect(vel,N);//if moving toward surface bounce\n        vel*=0.5+0.5*abs(dot(vel,FW));//less if not in direction of wheels\n      }\n      if(c<3)O.xyz+=N*(fTRad-d);//move away from the surface\n      else O.xyz=vel;//save new velocity\n    }\n  }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define bps 5.\n#define holds 8.\nfloat rnd(float t){return fract(sin(mod(t,32.123)*32.123)*41.123);}\nvec2 nofs(float n){//the song's \"random\" ring\n  float r=0.5+0.5*rnd(floor(n));//random volume\n  n=mod(n,8.0);//random ring for brownian motion\n  if(n<1.)n=5.;\n  else if(n<2.)n=3.;\n  else if(n<3.)n=-6.;\n  else if(n<4.)n=6.;\n  else if(n<5.)n=0.;\n  else if(n<6.)n=-4.;\n  else if(n<7.)n=-3.;\n  else n=3.;\n  //n=(n<1.?5.:n<2.?3.:n<3.?-6.:n<4.?6.:n<5.?0.:n<6.?-4.:n<7.?-3:3.);\n  return vec2(n,r);\n}\nfloat scale(float note){//throws out dissonant tones\n float n2=mod(note,12.); \n return ((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==11.))?-100.:note;//mixolydian\n}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\nfloat env(float att, float bt){return (1.0-exp(-bt*att))*max(1.0-bt,0.);}\n\nvec2 inst(float n,float t,float bt){//note, time and beat within note\n float sn=scale(floor(n));if(sn<0.0)return vec2(0.0);\n float f=ntof(sn);f=fract(f*t);\n float a=sin(f*6.283+bt*1.57*sin(f*3.14159));//noyz\n return vec2(1.5-n/90.0+sin(bt),n/90.0-sin(bt))*a*env(10.0,sqrt(bt/holds))*60.0/n;\n}\nvec2 mainSound( in int samp,float time){\n float tim=time*bps;\n vec2 a=vec2(0);//accumulator\n for(float i=0.;i<holds;i+=1.){//creating held notes by backing up and playing the\n   float b0=floor(tim),t0=fract(tim);//..tails of old notes\n   vec2 n0=nofs(b0*0.125)+nofs(b0*0.25)+nofs(b0*0.5)+nofs(b0);//sloth canon (fbm for music)\n   a+=inst(n0.x+60.0,time,t0+i)*n0.y;\n   a+=inst(n0.x+63.0,time,t0+i)*n0.y;//a harmonic 3rd (minor)\n   if(mod(i,2.0)<1. && n0.x>0. && scale(floor(n0.x+1.))>0.)a+=0.5*(rnd(time)-.5)*n0.y*env(100.,t0*5.);\n   tim-=1.;//go back in time\n }\n return clamp(a/(8.*float(holds)),-1.,1.);\n}","name":"Sound","description":"","type":"sound"}]}