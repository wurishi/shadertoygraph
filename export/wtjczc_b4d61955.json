{"ver":"0.1","info":{"id":"wtjczc","date":"1595021767","viewed":165,"name":"Collatz Conjecture Visualization","username":"PinetreeDev","description":"A short and sweet way of visualizing this amazing maths sequence\nThere is a lot of if statements in this, which is not ideal, but it makes the comprehension much better\nIf you have any suggestions comment on it, please\nNot finished yet!!\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["procedural","mathematics","learning","collatz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n\t//fragColor = vec4(mix(fragColor.rgb,col,length(col)),fragColor.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define collatzLimit 120\n\n// Check https://www.shadertoy.com/view/lsXGzf from Inigo Quilez for the key input\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nfloat Collatz(float x){//13->40->20->10->5->16->8->4->2->1\n    if(mod(x,2.0) == 0.0){\n    \treturn x/2.0;\n    }\n    else{\n        return 3.0*x+1.0;\n    }\n}\n\nfloat line(vec2 a, vec2 b, vec2 c){\n    vec2 ac = c-a;\n    vec2 ab = b-a;\n    float abl = length(ab);\n    float acl = length(ac);\n    float dotacab= dot(ac,ab)/abl;\n    \n    if( length(c-a) > length(b-a))\n        return length(c-b);\n    \n    if( length(c-b) > length(b-a) ){\n        return length(c-a);\n    }\n        \n    return sqrt(acl*acl - dotacab*dotacab);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n    float offset = 0.01;\n    float d = 99999.0;\n    float iters = 0.0;\n\n    // Offset the uvs so the thunder like structure is drawn in the center\n    vec2 collatzUV = uv - vec2(.3,.1);\n\n    float series[collatzLimit];\n    \n    float collatzValue = .5 * float(iFrame + 1);\n    vec2 lastPos = vec2(0,0);\n    vec2 pos = vec2(0,0);\n    float angle = 0.;\n    float angleOffset = .20;\n    int lastIndex = -1;\n\n    // Create a collatz sequence,\n    // this means all possible numbers from the sequence\n    // until we reach the limit or reach 1.\n\tfor( int i = 0; i <= collatzLimit; i++)\n    {\n\t\tcollatzValue = Collatz(collatzValue);\n        series[i] = collatzValue;\n        if( collatzValue == 1.0){\n        \tlastIndex = i;\n            break;\n     \t}\n\n     }\n    \n    // Iterate through the generated numbers\n    for( int i = collatzLimit; i >= 0; i--)\n    {\n    \tif(i < lastIndex)\n        {\n            collatzValue = series[i];\n        \tif( collatzValue == 1.0)\n        \t\tbreak;\n        \t\n            // Check if the number from the sequence\n            if( mod(collatzValue,2.0) == 0.0)\n        \t{\n        \t\tangle += angleOffset * 1.0;\n            \tpos += vec2(sin(angle),cos(angle))*offset;\n        \t}\n        \telse\n        \t{\n                // Here I multiply my 2.5 so it curves the lightning more to this side.\n        \t\tangle -= angleOffset * 2.5;\n            \tpos += vec2(sin(angle),cos(angle))*offset;\n        \t}\n\t\t\n        \tfloat lineDist = line(pos, lastPos, collatzUV);\n            // If the distance is less the the minimum distance yet,\n            // we assign the new minimum and the max iterations.\n        \tif ( lineDist <  d)\n        \t{\n        \t\td = lineDist;\n            \titers = float(i)/100.0f;\n        \t}    \n        \t\n            lastPos = pos;\n    \t}\n    }\n\n    vec3 col = mix( \n        palette(20.0, \n                vec3(0.5,0.5,0.5),\n                vec3(0.5,0.5,0.5),\n                vec3(1.0,2.0,1.0),\n                vec3(0.5,0.20,0.25)), vec3(0.0,0.0,0.0), d/0.01);\n    col *= vec3(iters);\n    col += clamp(col,vec3(0.),vec3(1.));\n        \n\tfragColor = vec4(mix(fragColor.rgb,col,length(col)),fragColor.a);\n    fragColor += vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}