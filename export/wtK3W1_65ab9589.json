{"ver":"0.1","info":{"id":"wtK3W1","date":"1578866569","viewed":191,"name":"Tribal God 1.1","username":"onlinerocker","description":"Got this while messing around with a box fold and rotations... I'm sure people have done similar things, but I'm satisfied I was able to arrive to this on my own :)\n\nLooks very tribal :o\nI recommend viewing in full screen.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raymarch","trippy","boxfold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define VIEW_DIST 15.0\n#define PI 3.14159265359\n\n//Decrease or comment out to decrease/disable anti-aliasing (faster)\n#define AA_SCALE 2.0\n\n//Comment out to disable lighting (faster)\n//#define MODE_LIT\n\n\n//Got this while messing around with a box fold and rotations... I'm sure people of have don't similar things but I'm satisfied\n//I was able to arrive to this on my own :)\n\nvec3 color;\n\nfloat random(vec2 p)\n{\n    p *= 100.0;\n    p = floor(p);\n    \n \treturn mod(sin(p.x*p.y+3.23)*65213.943 + cos(p.y*p.x+1.0)*61235.364, 1.01);   \n}\n\nfloat map(vec3 p)\n{\n    p.x = -abs(p.x);\n    p.z = abs(p.z);\n    float ang = -(9.34+iTime) * (PI/25.0);\n    mat2 rot = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    mat2 rot1 = mat2(cos(ang), -sin(ang), sin(ang), cos(ang));\n    p.xz = rot * p.xz;\n    p.yz = rot1 * p.yz;\n    p.y = -abs(p.y);\n    p.x = -abs(p.x);\n    //p.z = abs(p.z);\n    \n    float dz = 1.0;\n    float minD = 1000.0;\n    float minDy = minD;\n    float minDz = minD;\n    float minDx = minD;\n    vec3 z = p;\n    float L = 2.0;\n    float Ly = 2.0;\n    float Lz = 2.0;\n    \n    for(int x=0; x<20; x++)\n    {\n    \tif (z.x>L) { z.x = 2.0*L-z.x; } else if (z.x<-L) { z.x = -2.0*L-z.x; }\n        if (z.y>L) { z.y = 2.0*Ly-z.y; } else if (z.y<-Ly) { z.y = -2.0*Ly-z.y; }\n        if (z.z>L) { z.z = 2.0*Lz-z.z; } else if (z.z<-Lz) { z.z = -2.0*Lz-z.z; }\n        \n        float x1 = float(x);\n        z.yz = mat2(cos(PI/4.), -sin(PI/4.), sin(PI/4.), cos(PI/4.)) * z.yz;\n        z.xz = mat2(cos(PI/2.), -sin(PI/2.), sin(PI/2.), cos(PI/2.)) * z.xz;\n        \n        z = z*(2.0) + normalize(z);\n        dz = dz*2.0 + 1.0;\n        \n        minD = min(minD, length(z-p));\n        minDy = min(minDy, abs(z.y - p.y));\n        minDz = min(minDz, abs(z.z - p.z));\n        minDx = min(minDx, abs(z.x - p.x));\n    }\n    \n    color = vec3(0.71, 0.31, 0.21) * 0.5  * sqrt(minDy)/sqrt(minD) + vec3(0., 0.01, 0.2) * sqrt(minDz)/sqrt(minD)\n        + vec3(0.0, 0.1, 0.0) * sqrt(minDx)/sqrt(minD);\n    color *= vec3(0.1)*sqrt(minD/0.05);\n    color = color*5.0;\n    #ifdef MODE_LIT\n    color /= 5.0;\n    #endif\n    return abs(length(z)/abs(dz));\n}\n\nvec3 estNormal(vec3 p)\n{\n    float e = 0.015;\n \tfloat x = map(p + vec3(e,0,0)) - map(p - vec3(e,0,0));  \n    float y = map(p + vec3(0,e,0)) - map(p - vec3(0,e,0));  \n    float z = map(p + vec3(0,0,e)) - map(p - vec3(0,0,e));  \n    return normalize(vec3(x,y,z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n    vec3 cam = vec3(0,0.5,14.0);\n    vec3 dir = vec3(uv, -1);\n    vec3 col = vec3(0);\n    \n    float ang = iTime/10.0;\n    //cam.xz = mat2(cos(ang), -sin(ang), sin(ang), cos(ang))*cam.xz;\n    //dir.xz = mat2(cos(ang), -sin(ang), sin(-ang), cos(-ang))*dir.xz;\n    \n    float td = 0.0;\n    vec3 p;\n    #ifdef AA_SCALE\n    float done = 0.0;\n    for(float aaX = -AA_SCALE; aaX < AA_SCALE; aaX++) {\n    for(float aaY = -AA_SCALE; aaY < AA_SCALE; aaY++) {      \n    uv = (2.0*(fragCoord + (vec2(aaX, aaY)/AA_SCALE)) - iResolution.xy) / iResolution.y;\n    dir = vec3(uv, -1);\n\t#endif\n    for(int x=0; x<20; x++)\n    {\n        p = cam + dir*td; \n\t\tfloat d = map(p);\n        \n        if(abs(d) <= 0.001 || td > VIEW_DIST)\n            break;\n        \n        td += d;\n    }\n    \n    if(td <= VIEW_DIST){\n        #ifdef MODE_LIT\n        color = color*7.0*dot(normalize(p-vec3(0,0,5)), estNormal(p));\n    \t#endif\n        col += color*(smoothstep(0.0, 0.7, 1.0-length(td/length(cam)))); // ambient\n    }else{\n        float fr = length(fract(100.0*uv) - vec2(0.5));\n        float val = 1.0-smoothstep(0.0, 0.2, fr);\n        float timeMod = 5.0*random(uv-32.0)+cos(iTime*(1.0+4.0*random(uv-22.0)));\n        col = mix(vec3(0), timeMod*vec3(step(0.99, random(uv))), val);\n        #ifdef AA_SCALE\n        done++;\n    \tbreak;\n    \t#endif\n    }\n        \n    #ifdef AA_SCALE\n    }\n    if(done > 0.0)\n        break;\n    }\n    \n    if(done <= 0.0)\n    \tcol /= float((2.0*AA_SCALE) * (2.0*AA_SCALE));\n    #endif\n        \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}