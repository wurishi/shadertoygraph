{"ver":"0.1","info":{"id":"7sVyRw","date":"1654631139","viewed":238,"name":"FBM Texture","username":"MisterSirCode","description":"Basic value noise FBM texture. Just wrote my own standard version here for personal use.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","texture"],"hasliked":0,"parentid":"ssccWl","parentname":"Checker Texture"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash3(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nvec3 noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash3(i + vec2(0.0,0.0)), \n                   hash3(i + vec2(1.0,0.0)), u.x),\n               mix(hash3(i + vec2(0.0,1.0)), \n                   hash3(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nvec3 fractal(vec2 p, int oct) {\n    float tier = 0.5;\n    mat2 m = mat2(1.6, 1.2, 1.2, -1.6);\n    p *= 4.0;\n    vec3 n = vec3(0);\n    for (int i = 0; i < oct; i++) {\n        n += noise(p) * tier; \n        p = m * p;\n        tier *= tier;\n    }\n    return sqrt(n);\n}\n\nvec3 fbm(vec2 p, int oct, int iter) {\n    for (int i = 0; i < iter; i++) {\n        p = (fractal(p, oct) + noise(p * 50.0) / 25.0).xy - p;\n    }\n    return fractal(p, oct);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x * 2.0;\n    \n    uv.y += iTime / 2.0;\n    \n    fragColor = vec4(vec3(fbm(uv * 2.0, 6, 2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}