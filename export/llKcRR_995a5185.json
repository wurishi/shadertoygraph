{"ver":"0.1","info":{"id":"llKcRR","date":"1534910073","viewed":632,"name":"Video Wall","username":"chao_mu","description":"My attempt to make a video wall effect","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["filters","vfx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BOXES 10.\n#define MIN_BRIGHTNESS 0.3\n\n// Book of Shaders                                                                                                                                                                                                                                                              \nfloat rand(vec2 st) {                                                                                                                                                                                                                                                           \n    return fract(sin(dot(st.xy,                                                                                                                                                                                                                                                 \n                    vec2(12.9898,78.233)))* 43758.5453123);                                                                                                                                                                                                                     \n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 px = uv * BOXES;\n    \n    // Decide the shade of each panel\n    float shade = clamp(MIN_BRIGHTNESS + rand(floor(px + 0.5)), 0., 1.);\n    \n    // Calculate the grid\n    float g = smoothstep(0.4, 0.49, distance(floor(px.x + 0.5), px.x))\n        + smoothstep(0.4, 0.49, distance(floor(px.y + 0.5), px.y));\n     g = 1. - clamp(g, 0., 1.);\n        \n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(g * shade * col, 1.);\n}","name":"Image","description":"","type":"image"}]}