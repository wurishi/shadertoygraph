{"ver":"0.1","info":{"id":"3slfRN","date":"1588357511","viewed":140,"name":"freqs","username":"Smake","description":"Exercises for eyes.\n\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","anaglyph","vision"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Cross-line anaglyphic training\n\n// Color wheel is palette rainbow for next steps  \n\nconst float Pi = 3.1415926;\nconst float T = 2.;         // period/2\nconst float N =100.;         // T*N = max periods\n\n   // for color changing\n    \nvec3 Wheel(float WheelPos) {\n  \n    if (WheelPos < .33) {\n    return vec3 (WheelPos * 3., .0, 1.0 - WheelPos * 3. );\n  } else if (WheelPos < .66) {\n    WheelPos -= .33;\n    return vec3 (1. - WheelPos * 3., WheelPos * 3., .0);\n  } else {\n    WheelPos -= .66;\n    return vec3 (.0, 1.- WheelPos*3., WheelPos*3.);\n  }\n}\n \n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n     // Normalized pixel coordinates \n    vec2 uv = fragCoord/iResolution.xy-.5;  \n\n    vec3 col = vec3 (.0,.0,.0);\n    \n    col = Wheel ( mod (.1*iTime,1.));\n    \n    vec3 mask = vec3 (0.5,0.0,0.5);\n    \n    mask.x +=.5*cos(N*2.*Pi* abs(mod (.1*iDate.w, T)- T/2.)* uv.x);\n   // mask.y =\n    mask.z += .5*sin(N*Pi* abs(mod (.1*iDate.w, 2.)- 1.)* uv.y);\n \n   //col*= mask;  \n   // dome\n   col= mask * pow(cos(Pi*uv.x),3.)* pow(cos(Pi*uv.y),3.) ;\n    \n    // Output to screen\n    fragColor = vec4(col.xyz*iMouse.x/iResolution.x, 1.);\n}","name":"Image","description":"","type":"image"}]}