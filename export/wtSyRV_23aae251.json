{"ver":"0.1","info":{"id":"wtSyRV","date":"1594807069","viewed":235,"name":"Round/Bevel Box - Distance 2D","username":"AMS","description":"Combination of Round Box and Polygonal SDF to CSS-like box supporting both bevel and round corners (and any combination of the two).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","distance","signed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Andres Valencia Tellez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Combination of Round Box and Polygonal SDF to CSS-like box supporting both bevel and round corners (and any combination of the two).\n// Based on:\n// - https://www.shadertoy.com/view/4llXD7\n// - https://www.shadertoy.com/view/wdBXRW\n\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    \n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\nfloat sdPoly( in vec2[16] v, in vec2 p )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, p.y<v[j].y, e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n    }\n    \n    return s*sqrt(d);\n}\n\nfloat sdRoundBevelBox( in vec2 p, in vec2 b, in vec4 r, in vec2[8] v, in float vr )\n{\n    vec2[] poly = vec2[](vec2(0.0, v[0].y), v[0], v[1], vec2(v[1].x, 0.0), \n                         vec2(v[2].x, 0.0), v[2], v[3], vec2(0.0, v[3].y), \n                         vec2(0.0, v[4].y), v[4], v[5], vec2(v[5].x, 0.0), \n                         vec2(v[6].x, 0.0), v[6], v[7], vec2(0.0, v[7].y));\n    // return sdRoundBox( p, b, r );\n    // return sdPoly( poly, p ) - vr;\n    // return max(sdRoundBox( p, b, r ), sdPoly( poly, p ) - vr);\n    \n    return length(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\tvec2 si = vec2(0.5,0.5);\n    vec4 ra = 0.25 + 0.25*cos( 2.0*iTime + vec4(0,1,2,3) );\n\n    // This could be simplified to distance from origin/corner.\n    vec2 v0 = vec2(max(0.0, cos(iTime + 0.0)) * 0.5, \t\t\t0.5 - max(0.0, -cos(iTime + 0.0)) * 0.5);\n\tvec2 v1 = vec2(0.5 - max(0.0, -cos(iTime + 0.0)) * 0.5,\t\tmax(0.0, cos(iTime + 0.0)) * 0.5);\n    vec2 v2 = vec2(0.5 - max(0.0, -cos(iTime + 1.0)) * 0.5, \tmax(0.0, cos(iTime + 1.0)) * -0.5);\n\tvec2 v3 = vec2(max(0.0, cos(iTime + 1.0)) * 0.5,\t\t\t-0.5 + max(0.0, -cos(iTime + 1.0)) * 0.5);\n    vec2 v4 = vec2(max(0.0, cos(iTime + 2.0)) * -0.5,\t\t\t-0.5 + max(0.0, -cos(iTime + 2.0)) * 0.5);\n\tvec2 v5 = vec2(-0.5 + max(0.0, -cos(iTime + 2.0)) * 0.5,\tmax(0.0, cos(iTime + 2.0)) * -0.5);\n    vec2 v6 = vec2(-0.5 + max(0.0, -cos(iTime + 3.0)) * 0.5,\tmax(0.0, cos(iTime + 3.0)) * 0.5);\n    vec2 v7 = vec2(max(0.0, cos(iTime + 3.0)) * -0.5, \t\t\t0.5 - max(0.0, -cos(iTime + 3.0)) * 0.5);\n\tvec2[] poly = vec2[](v0, v1, v2, v3, v4, v5, v6, v7);\n    \n    // Increase this value to make the polygon shape rounder.\n    float polyRadius = 0.1;\n    \n    float d = sdRoundBevelBox(p, si, ra, poly, polyRadius);\n\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}