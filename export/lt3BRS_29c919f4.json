{"ver":"0.1","info":{"id":"lt3BRS","date":"1539999223","viewed":329,"name":"Border drawing","username":"danamuise","description":"examples from the Book of Shaders: :Shape drawing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bookofshadersshapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//creates a sharp border using step()\nvec3 StepBorder(in vec2 _uv, in float _width){\n\tvec2 bl = step(vec2(_width),_uv); // bottom-left\n\tvec2 tr = step(vec2(_width),1.0-_uv);   // top-right\n    //botom left && top right\n    vec3 pct = vec3(bl.x * bl.y * tr.x * tr.y);\n    return pct;\n }\n\n//creates a soft border using smoothstep()\nvec3 SmoothBorder(in vec2 _uv, in float _start, in float _end){\n\tvec2 bl = smoothstep(vec2(_start), vec2(_end), _uv);// bottom-left\n\tvec2 tr = smoothstep(vec2(_start),vec2(_end),1.0-_uv);// top-right\n    //botom left && top right\n\tvec3 pct = vec3(bl.x * bl.y * tr.x * tr.y);\n    return pct;\n }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    /*\n\tuse step() to create a border on bottom & left\n    //if(x > 0.1) paint black else paint white\n\tfloat left = step(0.1, uv.x);\n    float bottom = step(0.1, uv.y);\n    //multiply * is same as logical &&   \n    col = vec3 (left * bottom);\n\t*/\n    \n    float osc = abs(sin(iTime));\n   \n    //Output sharp border to screen\n\tfragColor = vec4(StepBorder(uv, 0.1),1.0);\n\t\n    //Output smooth border to screen\n    //fragColor = vec4(SmoothBorder(uv, -0.2, 0.2),2.0);\n\n}","name":"Image","description":"","type":"image"}]}