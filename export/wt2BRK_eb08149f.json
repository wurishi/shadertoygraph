{"ver":"0.1","info":{"id":"wt2BRK","date":"1599388057","viewed":516,"name":"easy adaptive sampling: cubegrid","username":"FabriceNeyret2","description":"Application of [url]https://shadertoy.com/view/3ljfRG[/url]\noversample only where aliased Left: none, for reference.\nMouse.x : ref separator \nSPACE: show where oversampling is done ( B&W area - colors where LOD#0 )","likes":15,"published":3,"flags":48,"usePreview":0,"tags":["raytracing","antialiasing","sampling","optimization","adaptive","gpmipmap","spacefungus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/Wt2fzV\n// adapted from https://shadertoy.com/view/3ljfRG\n//          and https://shadertoy.com/view/WtjBzV\n#define N 5      // pixel oversampling NxN ( only where necessary )\n#define eps .05  // similarity threshold, is case of continuous mask\n\n//#define T(U,l)          texelFetch(iChannel0, ivec2(U)>>l, l)\n  #define T(U,l)          textureLod(iChannel0, (U)/R, float(l-1) )\n//#define M(U,l)          T(U,l).w\n  #define M(U,l)        ( length( T(U,l).rgb )*.58 ) \n  #define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\n\nvoid mainImage(out vec4 O, vec2 u) {\n     vec2  U = ( 2.*u - R ) / R.y;      // normalized centered coords\n   \n    O -= O;                             // background\n    vec4 C = vec4(0);\n\n    float n = float(N),\n//        m = M( u, 3 ),                // check neighborhood. Here: LOD #2 of mask\n          s = iMouse.z>0. ? iMouse.x : R.x/2.;\n\n    if ( u.x > s\n//       && abs(m-M(u,0)) > eps ) {     // neighborhood does not agree\n         && length( T(u,3) - T(u,0) ) > eps ) { // thanks Gijs !\n        for (int k=0; k<N*N; k++) {     // --- oversampling\n            vec2 D = ( vec2(k%N,k/N) - float(N-1)/2. ) / n; // subpixel\n            C += f(  U +  2.*D/R.y , iTime, 4./R.y);\n        }\n        C /= n*n;\n    }\n    else                                // LOD#0 is ok\n        C = T( u, 0 ),\n        keyToggle(32)                   // SPACE: show red/blue where not oversampled\n            ? C.r -= .5*C.a, C.b += .5*(1.-C.a) , C.a = 1.: n;\n        \n    O = mix( O, C, C.a );\n    if ( abs(u.x-s) < 1. ) O = vec4(1,0,0,1); // red separator\n    O = pow( O, vec4(1./2.2) );         // to sRGB\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// --- custom function or image or render\n\n#define R  iResolution.xy\n\n\n// rand dots in cubic grid https://www.shadertoy.com/view/WlfyW8\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))\n\nvec4 f(vec2 U, float time, float w) { // w: lines thickness\n    \n    float t=1.,s,C;\n    vec3  D = normalize(vec3(.2*U, -1)),              // ray direction\n          p = vec3(0,0,30), T,a,f,q;                  // marching point along ray \n    vec4 O = vec4(0);\n    for ( O++; O.x > 0. && t > .01 ; O-=.015 ) {\n        q = p, \n        q.yz *= rot(-.2),                             // rotations\n        q.xz *= rot(.3*time),\n        T = q,                                      \n        a = abs(T), C = max(a.x,max(a.y,a.z))-4.03;   // big cube\n        if (C>.2) t = C; else                         // BBox ( omment to compare perfs )\n        {                                             // --- tubes\n          q = mod(q+1.,2.)-1.,                        // 3D tiling (staggered compare to cube)\n          t = min(length(q.xy),                       // cylinders in 3 directions\n              min(length(q.yz),                       // ( cross at middle of cells )\n                  length(q.xz)))-w,\n                                                      // --- balls\n          f = fract(4e5*sin(ceil(T/2.)*mat3(1,2,3,4,5,6,7,8,9))), // random seed per cell\n          f *= .95+.05*sin(time*40.+63.*f.y),         // shake\n       // f *= sin(iTime*5.+63.*f.y),                 // shake variant\n          q = mod(T,2.)-1.,                           // now consider stagered cells (small cubes)\n          t = min( t, s = length(1.4*f-.7 - q) -.2 ), // red ball at random pos\n\n          t = max( t, C );                            // --- intersection with big cube\n        }\n        p += t*D;                                     // step forward = dist to obj\n    }\n    O.a = step(0., O.x);                              // opacity = hit\n    s==t ? O.gb *= 0. : U ;                           // paint red balls\n    return O;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- evaluate the function everywhere at pixel resolution\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2  U = ( 2.*u - R ) / R.y;      // normalized centered coords\n    O = f( U, iTime , 4./R.y);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}