{"ver":"0.1","info":{"id":"WllGRs","date":"1557504465","viewed":91,"name":"HiveVideo","username":"Lucasmg","description":"Hive texture replacment","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//conversion between rgb and YUV\nmat4 RGBtoYUV = mat4(0.257,  0.439, -0.148, 0.0,\n                     0.504, -0.368, -0.291, 0.0,\n                     0.098, -0.071,  0.439, 0.0,\n                     0.0625, 0.500,  0.500, 1.0 );\n\n//color to be removed\nvec4 chromaKey = vec4(0.05, 0.72, 0.10, 1);\nvec2 maskRange = vec2(0.005, 0.26);\n\n//compute color distance in the UV (CbCr, PbPr) plane\nfloat colorclose(vec3 yuv, vec3 keyYuv, vec2 tol)\n{\n    float tmp = sqrt(pow(keyYuv.g - yuv.g, 2.0) + pow(keyYuv.b - yuv.b, 2.0));\n    if (tmp < tol.x)\n      return 0.0;\n   \telse if (tmp < tol.y)\n      return (tmp - tol.x)/(tol.y - tol.x);\n   \telse\n      return 1.0;\n}\n\nfloat normalizeBetweenTwoValues(float val, float min, float max) {\n    return (val - min) / (max - min);\n}\n\n\nvec3 setTexture(vec2 fragCoord, vec2 windowResolution, float imageWidth, float ratio, vec2 positionInPercent) {\n    \n    // TEXTURE POSITION & SIZE\n    positionInPercent.x = clamp(positionInPercent.x, 0.0, 1.0);\n    positionInPercent.y = clamp(positionInPercent.y, 0.0, 1.0);\n    imageWidth = clamp(imageWidth, 0.0, 1.0);\n    \n    vec2 imageResolution = vec2(imageWidth, imageWidth * ratio) * vec2(windowResolution.x);\n    vec2 position = vec2(positionInPercent.x, 1.0 - positionInPercent.y) * (windowResolution - imageResolution);\n    position = -position;\n    vec2 imageUv = clamp((fragCoord.xy + position) / imageResolution, -0.1, 1.1);\n    vec3 background = texture(iChannel0, imageUv).xyz;\n    \n    // DON'T DRAW AROUND TEXTURE\n    vec3 nullColor = vec3(0.0);\n    \n    float xMax = 1.0 - step(1.0, imageUv.x);\n    float xMin = step(0.0, imageUv.x);\n    \n    float yMax = 1.0 - step(1.0, imageUv.y);\n    float yMin = step(0.0, imageUv.y);\n    \n    background = background * xMin * xMax * yMin * yMax;\n    \n    return background;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n      \n    // Foreground Interface\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec4 foreground = texture(iChannel1, vUv);\n    \n    // Background profile photo\n    vec2 imagePosition = vec2(0.073, 0.33); // IN PERCENTAGE [0.0 - 1.0]\n    float imageWidth = 0.05; // IN PERCENTAGE [0.0 - 1.0]\n    float imageRatio = 1.0; // imageHeight / imageWidth\n\n    vec4 background = vec4(setTexture(fragCoord, iResolution.xy, imageWidth, imageRatio, imagePosition), 1.0);\n\n    // Set GreenChroma transparent \n\tvec4 keyYUV =  RGBtoYUV * chromaKey;\n    vec4 yuv = RGBtoYUV * foreground;\n\n    float mask = 1.0 - colorclose(yuv.rgb, keyYUV.rgb, maskRange);\n    fragColor = max(foreground - mask * chromaKey, 0.0) + background * mask;\n \n} \n\n","name":"Image","description":"","type":"image"}]}