{"ver":"0.1","info":{"id":"XdyGWm","date":"1454667693","viewed":724,"name":"Hue Rotator","username":"TambakoJaguar","description":"Very small script that rotates the hue of a webcam image, depending on the time and on the y coordinate of the image. Nothing spectacular, but you can create funny effect. Modify parameters huefreq and hueyfac (lines 9 and 10).","likes":7,"published":1,"flags":2,"usePreview":0,"tags":["video","effect","rainbow","hue","webcam","rotation","liveeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\"Hue Rotator\" by Emmanuel Keller aka Tambako - February 2016\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nContact: tamby@tambako.ch\n*/\n\n#define twopi 6.28319\n#define SMOOTH_HSV;\n\nconst float huefreq = 0.2; // Frequency in Hz of the hue change over time, if =1., it will get thrugh the whole spectrum within one second\nconst float hueyfac = 0.3; // Horizontal frequency. Factor of the image heights that will be covered by the full spectrum\n\n//HSV functions from iq (https://www.shadertoy.com/view/MsS3Wc)\n#ifdef SMOOTH_HSV\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n#else\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n#endif\n\n//From Sam Hocevar: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 ccol = texture(iChannel0, uv).rgb;\n    float hued = mod(iTime*huefreq, 1.) + uv.y*hueyfac;\n    vec3 hsv = rgb2hsv(ccol);\n    ccol = hsv2rgb(vec3(hsv.x+hued, hsv.y, hsv.z));\n    \n    fragColor = vec4(ccol, 1.);\n}","name":"Image","description":"","type":"image"}]}