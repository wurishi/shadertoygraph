{"ver":"0.1","info":{"id":"4cdyRM","date":"1731387029","viewed":21,"name":"david_li_pumpkin","username":"david_li","description":"basic pumpkin","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pumpkin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle(vec2 p, float r){\n    return length(p) - r;\n}\n\nfloat sdMoon(vec2 p, float d, float ra, float rb )\n{\n    p.y = abs(p.y);\n    float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n    float b = sqrt(max(ra*ra-a*a,0.0));\n    if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )\n          return length(p-vec2(a,b));\n    return max( (length(p          )-ra),\n               -(length(p-vec2(d,0))-rb));\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdRing( in vec2 p, in vec2 n, in float r, in float th )\n{\n    p.x = abs(p.x);\n    \n    p = mat2(n.x,n.y,-n.y,n.x)*p;\n\n    return max( abs(length(p)-r)-th*0.5,\n                length(vec2(p.x,max(0.0,abs(r-p.y)-th*0.5)))*sign(p.x) );\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n\tvec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(p.x*q.y-p.y*q.x),k*(p.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 p = (2. * fragCoord - iResolution.xy)/iResolution.y;\n\n    vec3 bg = vec3(0., 0., 0.);\n    \n    //BODY\n    float body = sdCircle(p, 0.6);\n    float regPumpkin = 1.-smoothstep(0., 0.02, body);\n    vec3 colBody = vec3(1., 0.64, 0.);\n    bg = mix(bg, colBody, regPumpkin);\n    \n    \n    //EYES\n    float eyeScale = 8.;\n    vec2 eyeTrans = vec2(.25, 0.0);\n    float eyeL = sdMoon((p+eyeTrans-vec2(0.,0.24))*eyeScale, 0.8, 1.0, 0.8) / eyeScale;\n    float eyeR = sdMoon((p-eyeTrans-vec2(0.,0.24))*eyeScale, 0.8, 1.0, 0.8) / eyeScale;\n    float sdfEyes = min(eyeL, eyeR);\n    float regEyes = 1.-smoothstep(0., 0.02, sdfEyes);\n    vec3 colEyes = vec3(1., 1., 1.);\n    bg = mix(bg, colEyes, regEyes);\n    \n    //NOSE\n    float noseScale = 5.;\n    float nose = sdEquilateralTriangle(p * noseScale, 0.5) / noseScale;\n    float regNose = 1.-smoothstep(0., 0.02, nose);\n    vec3 colNose = vec3(0., 0., 0.);\n    bg = mix(bg, colNose, regNose);\n    \n    //MOUTH\n    float mouthScale = 4.;\n    vec2 mouthTrans = vec2(0., 0.2);\n    vec2 mouthCurve = vec2(0.1485, 0.989);\n    float ra = 0.5;\n    float th = 0.2;\n    float mouth = sdRing((p+mouthTrans) * -mouthScale, mouthCurve, ra, th) / mouthScale;\n    float regMouth = 1.-smoothstep(0., 0.02, mouth);\n    vec3 colMouth = vec3(0., 0., 0.);\n    bg = mix(bg, colMouth, regMouth);\n    \n    //ROTATION\n    vec2 q1;\n    vec2 q2;\n\tfloat angle = 0.15*3.141592; \n\tq1.x =   cos(angle)*(p.x +0.4) + sin(angle)*(p.y -.81);\n\tq1.y = - sin(angle)*(p.x +0.5) + cos(angle)*(p.y -.68);\n    \n    q2.x =   cos(angle)*(p.x -0.4) - sin(angle)*(p.y -.81);\n\tq2.y = sin(angle)*(p.x -0.25) + cos(angle)*(p.y -.81);\n    \n    //EARS\n    vec2 triangle = vec2(0.1, -.2);\n    vec2 earTrans = vec2(0.25, -.81);\n    vec2 earTrans2 = vec2(-0.25, -.81);\n    float ear = sdTriangleIsosceles(q1, triangle);\n    float ear2 = sdTriangleIsosceles(q2, triangle);\n    float regEar = 1.-smoothstep(0., 0.02, ear);\n    float regEar2 = 1.-smoothstep(0., 0.02, ear2);\n    vec3 colEar = vec3(1., 0., 0.);\n    bg = mix(bg, colEar, regEar);\n    bg = mix (bg, colEar,regEar2);\n    \n    fragColor = vec4(bg,1.0);\n}","name":"Image","description":"","type":"image"}]}