{"ver":"0.1","info":{"id":"fstfW8","date":"1656426401","viewed":126,"name":"Field of View Shader","username":"Cow_Bandit","description":"Draws a field of view around a movable point to indicate what the field of view of that point is in a 2D space.\nChange the radius to change how far the point can see.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool BressenhamLineLow(vec2 start, vec2 end, vec2 fragCoord)\n{\n    if(start.x > end.x)\n    {\n        vec2 temp = start;\n        start = end;\n        end = temp;\n    }\n    \n    float dx = end.x-start.x;\n    float dy = end.y-start.y;\n    float yi = 1.;\n    if(dy<0.)\n    {\n        yi = -1.;\n        dy = -dy;\n    }\n    float D = (2.*dy)-dx;\n    float y = start.y;\n    \n    for(float x = start.x; x <= end.x; x++)\n    {\n        if(abs(fragCoord.x-x)<=1. && abs(fragCoord.y-y)<=1.) return true;\n        \n        if(D>0.)\n        {\n            y += yi;\n            D += 2.*(dy-dx);\n        }\n        else D += 2.*dy;\n    }\n    return false;\n}\n\nbool BressenhamLineHigh(vec2 start, vec2 end, vec2 fragCoord)\n{\n    if(start.y > end.y)\n    {\n        vec2 temp = start;\n        start = end;\n        end = temp;\n    }\n    \n    float dx = end.x-start.x;\n    float dy = end.y-start.y;\n    float xi = 1.;\n    if(dx<0.)\n    {\n        xi = -1.;\n        dx = -dx;\n    }\n    float D = (2.*dx)-dy;\n    float x = start.x;\n    \n    for(float y = start.y; y <= end.y; y++)\n    {\n        if(abs(fragCoord.x-x)<=1. && abs(fragCoord.y-y)<=1.) return true;\n        \n        if(D>0.)\n        {\n            x += xi;\n            D += 2.*(dx-dy);\n        }\n        else D += 2.*dx;\n    }\n    return false;\n}\n\nbool BressenhamLine(vec2 start, vec2 end, vec2 fragCoord)\n{\n    if(abs(end.y-start.y)<abs(end.x-start.x))\n        return BressenhamLineLow(start,end,fragCoord);\n    else\n        return BressenhamLineHigh(start,end,fragCoord);\n}\n\nbool Intersects(vec4 line1, vec4 line2)\n{\n    bool a = ((line2.x-line1.x)*(line1.w-line1.y)-(line2.y-line1.y)*(line1.z-line1.x))*((line2.z-line1.x)*(line1.w-line1.y)-(line2.w-line1.y)*(line1.z-line1.x))<0.;\n    bool b = ((line1.x-line2.x)*(line2.w-line2.y)-(line1.y-line2.y)*(line2.z-line2.x))*((line1.z-line2.x)*(line2.w-line2.y)-(line1.w-line2.y)*(line2.z-line2.x))<0.;\n    return a&&b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float rx = iResolution.x/640.;\n    float ry = iResolution.y/360.;\n    \n    \n    // Viewcircle color\n    vec4 viewColor = vec4(0.2,0.2,0.2,1);\n    // Color of vertex-to-light lines\n    vec4 vertexColor = vec4(0,1,0,1);\n    // Radius of viewcircle\n    float radius = 750.*ry;\n    \n    \n    //Light position\n    vec2 lightPos = iMouse.xy;\n    \n    //Boundary positions\n    int rectN = 3;\n    vec4 rect[3];\n    rect[0] = vec4(100.*rx,200.*ry,120.*rx,300.*ry);\n    rect[1] = vec4(500.*rx,100.*ry,520.*rx,200.*ry);\n    rect[2] = vec4(300.*rx,280.*ry,400.*rx,300.*ry);\n    \n    //Background fill\n    fragColor = vec4(0,0,0,1);\n    \n    //Viewcircle fill\n    if(distance(fragCoord,lightPos)<=radius)\n    {\n    \n        fragColor = viewColor;\n        //Check each boundary\n        for(int i = 0; i < rectN; i++)\n        {\n            //Check every edge of the boundary with the imaginary line between fragCoord and lightPos\n            if(Intersects(vec4(fragCoord,lightPos),vec4(rect[i].x,rect[i].y,rect[i].x,rect[i].w))) fragColor = vec4(0,0,0,1);\n            if(Intersects(vec4(fragCoord,lightPos),vec4(rect[i].x,rect[i].y,rect[i].z,rect[i].y))) fragColor = vec4(0,0,0,1);\n            if(Intersects(vec4(fragCoord,lightPos),vec4(rect[i].z,rect[i].y,rect[i].z,rect[i].w))) fragColor = vec4(0,0,0,1);\n            if(Intersects(vec4(fragCoord,lightPos),vec4(rect[i].x,rect[i].w,rect[i].z,rect[i].w))) fragColor = vec4(0,0,0,1);\n        }\n    }\n    \n    //Light fill\n    if(abs(fragCoord.x-lightPos.x)<=1. && abs(fragCoord.y-lightPos.y)<=1.) fragColor = vec4(1,0,0,1);\n    \n    //Boundary fill\n    for(int i = 0; i < rectN; i++)\n    {\n        if(fragCoord.x>=rect[i].x && fragCoord.y>=rect[i].y && fragCoord.x<=rect[i].z && fragCoord.y<=rect[i].w) fragColor = vec4(1,1,1,1);\n        if(BressenhamLine(vec2(rect[i].x,rect[i].y),lightPos,fragCoord)) fragColor = vertexColor;\n        if(BressenhamLine(vec2(rect[i].x,rect[i].w),lightPos,fragCoord)) fragColor = vertexColor;\n        if(BressenhamLine(vec2(rect[i].z,rect[i].y),lightPos,fragCoord)) fragColor = vertexColor;\n        if(BressenhamLine(vec2(rect[i].z,rect[i].w),lightPos,fragCoord)) fragColor = vertexColor;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}