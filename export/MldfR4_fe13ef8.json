{"ver":"0.1","info":{"id":"MldfR4","date":"1538869912","viewed":115,"name":"Nature Project- Snakes","username":"cake7914","description":"snakies","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["snakes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(v, r) (mod(v, r)-r/2.)\n\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n\n    \n//=======================\n// Utility Functions\n//=======================\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n\nmat2 rot(float a){ //rotation\n  float r = sin(a);\n  float f = sin(a);\n  return mat2(r, f, -f, r);\n}\n\n\nfloat pole(vec2 v, float r){\n  return length(v)-r;\n}\n/*float sphere(vec3 v, float r){\n  return length(v)-r;\n}\nfloat box(vec3 v, float r, float m) {\n  return max(length(v.xy)-r, abs(v.z)-m);\n}\n*/\n\n\nfloat mixColors(float r, float v, float z){ //mixes colors together\n  return clamp(0.5+0.5*(v-r)/z, 0., 1.);\n}\n\nfloat mixShapes(float v, float f, float r){ //mixes the shapes together\n  float z = mixColors(v, f, r);\n  return mix(f,v,z)-r*z*(1.-z);\n}\n\nfloat pModPolar(inout vec2 v, float r){ \n  float f = 6.28318/r;\n  float z = atan(v.y, v.x)+f*0.5;\n  float m = floor(z/f);\n  z = mod(z, f)-f*0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n  return m;\n}\n//=======================\n\nShape snakes(vec3 c){\n  Shape shape;\n  float snake;\n  shape.dist = 100.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Shape Attributes\n  float twist = 10.; // Snake Repeat\n  float snakeOffset = 9.; // Snake Offset\n\n\n  // Stems\n  vec3 i = c;\n    i.xy *= rot(c.x*0.09+iTime*.5); //rotation\n    float detail = pModPolar(i.xz, twist);  \n    float x = mix(10., 4., mod(detail, 8.)); // Larger Ripples\n    i.x -= snakeOffset; // Offset snakes\n    i.x = repeat(i.x, 20.); //repeat them\n\n  \tfloat snakeWidth = sin(iTime*2.)+5.; // width of stems\n  \tsnake = pole(i.xz, snakeWidth+0.002*cos(i.y*x));\n    vec4 color = vec4(0.0, 0.95, 0.85, 1.); //color of seaweed\n\n  shape.dist = snake;\n  shape.color = color;\n\n  return shape;\n}\n\n\nShape map(vec3 c){\n  Shape snakes = snakes(c);\n  return snakes;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y; //coordinate system\n\n  \n  vec3 cam = vec3(0., 10., -400.); //camera location\n  vec3 f = normalize(vec3(v, 6.));\n  vec3 scene = cam;\n  fragColor = vec4(.1, .7, .1, 1.); //background color\n\n  // Ray Marcher\n  for(float x = 0.1 ; x <= 1.; x += 0.03){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.01){\n      fragColor = c.color*(.66-x); // Hit  - invert pixels- \"brightness\" of inverting\n      break;\n    }\n    scene += f * c.dist;\n\n\n  }\n}","name":"Image","description":"","type":"image"}]}