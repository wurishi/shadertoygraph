{"ver":"0.1","info":{"id":"43tXRB","date":"1719235314","viewed":52,"name":"ringstacks","username":"pb","description":"a gaz type of luminescent fractal","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//logic taken from gaz: https://www.shadertoy.com/view/ftKBzt\n//and made more verbose and tweaked\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos( 2.*h +vec3(5,20,23) )*.8 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0), rd = normalize( vec3(U-.5*R.xy, R.y))*8.;\n    \n    float sc,dotp,totdist=0., t=iTime/2.;\n    \n    for (float i=0.; i<200.; i++) {\n        \n        vec4 p = vec4( rd*totdist, 0.);\n        \n        p.xyz = ROT(p.xyz+vec3(0,0,-10), normalize( vec3(sin(t/5.),cos(t/3.),0)  ),t);\n        sc = 1.;  //scale factor\n        \n        for (float j=0.; j<6.; j++) {\n        \n            p = abs(p)*.69;\n            \n            dotp = max(1./dot(p,p),.2);\n            sc *= dotp * max(1.2,(1.+.7*sin(t)));\n            \n            //p.xy = p.x<p.y ? p.xy : p.yx;   //conditionally reflect xy\n            //p = p.wzxy;                     //always reflect xy and wz\n            \n            p.xy = length(p.wz)<length(p.xy) ? p.xy : p.wz; //conditionally reflect xy and wz\n            \n            p = abs( p ) * dotp - 1.1;      //take abs again, do sphere inversion, do offset\n             \n        }\n         \n        float dist = abs( length(p*p.x)-.2)/sc ;  //funky distance estimate\n        float stepsize = dist + 1e-3;     //distance plus a little extra\n        totdist += stepsize;              //move the distance along rd\n        \n       \n        //accumulate color, fading with distance and iteration count\n        c += mix( vec3(1), H(M(sc)),.7) *.01*  exp(-i*i*stepsize*stepsize/2.);\n    }\n    \n    c *= c;\n    c = 1. - exp(-c);\n    O = ( vec4(c,0) );\n               \n}        \n        \n   \n  \n","name":"Image","description":"","type":"image"}]}