{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define PI 3.141592653589\nint grid = 1;\nvec3 r = vec3( 1.0 , 0.0 , 0.0  );  // custom red\nvec3 o = vec3( 1.0 , 0.5 , 0.0  );  // custom orange\nvec3 y = vec3( 1.0 , 0.9 , 0.0  );  // custom yellow\nvec3 g = vec3( 0.0 , 0.6 , 0.15 );  // custom green\nvec3 b = vec3( 0.0 , 0.15, 0.9  );  // custom blue\nvec3 p = vec3( 0.2 , 0.0 , 0.45 );  // custom purple\nvec3 m = vec3( 0.0 );  // mixture of all colors\n// primary: https://www.color-hex.com/color-palette/12398\n// secondary: https://www.color-hex.com/color-palette/12400\nvec3 pr = vec3( 0.788, 0.000, 0.000 ); // primary red\nvec3 so = vec3( 1.000, 0.506, 0.000 ); // secondary orange\nvec3 py = vec3( 1.000, 0.957, 0.000 ); // primary yellow\nvec3 sg = vec3( 0.035, 0.580, 0.125 ); // secondary green\nvec3 pb = vec3( 0.000, 0.016, 1.000 ); // primary blue\nvec3 sp = vec3( 0.455, 0.000, 0.714 ); // secondary purple\nvec3 psm = vec3( 0.0 );  // mixture of all primary and secondary colors\n\nfloat atan2(in float x, in float y)\n{\n    return atan(y/x)+(x<0.0?PI:0.0)+(y<0.0?(x>=0.0?2.0*PI:0.0):0.0);\n}\n\nfloat snap( in float x, in float g ) {\n    return floor(x/g)*g;\n}\nfloat snap_even( in float x, in float g ) {\n    g += 0.00001;\n    return ((floor(x/g)*g)*(1.0/g))/floor(1.0/g);\n}\n\nvec3 mix6( in vec3 c1, in vec3 c2, in vec3 c3, in vec3 c4, in vec3 c5, in vec3 c6, in float t ) {\n    float m1 = clamp(-floor(t/(1.0/6.0))+1.0,0.0,1.0);\n    float m2 = clamp(-floor(t/(2.0/6.0))+1.0,0.0,1.0)-m1;\n    float m3 = clamp(-floor(t/(3.0/6.0))+1.0,0.0,1.0)-m1-m2;\n    float m4 = clamp(-floor(t/(4.0/6.0))+1.0,0.0,1.0)-m1-m2-m3;\n    float m5 = clamp(-floor(t/(5.0/6.0))+1.0,0.0,1.0)-m1-m2-m3-m4;\n    float m6 = clamp(-floor(t/(6.0/6.0))+1.0,0.0,1.0)-m1-m2-m3-m4-m5;\n    \n    float modu = mod(t,1.0/6.0)*6.0;\n    \n    vec3 l1 = mix(c1,c2,m1*modu);\n    vec3 l2 = mix(c2,c3,m2*modu);\n    vec3 l3 = mix(c3,c4,m3*modu);\n    vec3 l4 = mix(c4,c5,m4*modu);\n    vec3 l5 = mix(c5,c6,m5*modu);\n    vec3 l6 = mix(c6,c1,m6*modu);\n    \n    return mix(mix(mix(l1,l2,m2),mix(l3,l4,m4),m3+m4),mix(l5,l6,m6),m5+m6 );\n}\n\nvec3 getp( in vec2 p0 ) {\n    float rot = atan2(p0.y,p0.x)/(PI*2.0);\n    return mix6(pr,so,py,sg,pb,sp,rot);\n}\n\nvec3 getr( in float rot ) {\n    return mix6(pr,so,py,sg,pb,sp,rot);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    m = (r+o+y+g+b+p)/6.0;\n    psm = (pr+so+py+sg+pb+sp)/6.0;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    uv *= 1.05;\n    \n    grid = 0;\n    \n    \n    float r = atan2(uv.x,-uv.y);\n    float mr = r/(PI*2.0);\n    if(grid>0){ mr = snap(mr,1.0/(float(grid)*4.0)); }\n    //r = snap(r,1.0/float(grid));\n    float d = length(uv);\n    if(grid>0){ d = snap_even(d,1.0/float(grid)); }\n    \n    vec3 mc = mix(getr(mr),getr(mod(mr+0.5,1.0)),0.5);\n    vec3 c = mix(psm,mc,0.5);\n    \n    // Time varying pixel color\n    vec3 col = ( d > 1.0? vec3(mr) : mix(getr(mr),c,1.0-d) );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcdfDH","date":"1734365801","viewed":38,"name":"ROYGBP 0916","username":"Ponjee","description":"asdfsdf","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["color","rgb","roygbp"],"hasliked":0,"parentid":"","parentname":""}}