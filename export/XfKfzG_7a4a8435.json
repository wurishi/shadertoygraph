{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float random(vec2 st){\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n\n//\tClassic Perlin 2D Noise \n//\tby Stefan Gustavson\n//\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n\nfloat cnoise(vec2 P){\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n  vec4 i = permute(permute(ix) + iy);\n  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n  vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = 2.0 * uv.x - 1.0;\n    uv.x = uv.x * (iResolution.x / iResolution.y);\n    uv.x = 0.5 * (1.0 + uv.x);\n    \n    //float shade = uv.y;\n    //float shade = sin(uv.y*500.0);\n    //float shade = abs(sin(uv.y*75.0)-0.2);\n    \n    //float shade = mod(uv.x*5.0, 0.5);\n    //shade = step(0.1, shade);\n    \n    //float shade = step(0.5, mod(uv.y*10.0, 1.0));\n    //shade += step(0.5, mod(uv.x*4.5, 2.0));\n    //shade*= 0.5;\n    //shade *= step(0.5, mod(uv.y*4.5, 2.0));\n    \n    //float shade1 = step(0.7, mod(uv.x * 8.75, 1.0));\n    //shade1 *= step(0.8, mod(uv.y * 4.5 + 1.0, 2.0));\n    //float shade2 = step(0.8, mod(uv.x * 10.0 + 0.2, 1.0));\n    //shade2 *= step(0.4, mod(uv.y * 20.0, 5.0));\n    //float shade = shade1 + shade2;\n    \n    //float shade = min(abs(uv.x-0.7) , abs(uv.y-0.7));\n    //float shade = max(abs(uv.x-0.5) , abs(uv.y-0.3));\n    \n    //float shade = random(uv);\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    //fragColor = vec4(vec3(shade), 1.0);\n    //fragColor = vec4(vec3(shade1), 1.0);\n    //fragColor = vec4(vec3(shade2), 1.0);\n    \n    float shade = step(0.2, sin(cnoise(uv * 7.0 * iTime) * 10.0));\n    vec3 blackCol = vec3(0.7);\n    vec3 uvColor = vec3(uv, 0.3);\n    vec3 mixedColor = mix(blackCol, uvColor, shade);\n    \n    // colors\n    fragColor = vec4(mixedColor, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfKfzG","date":"1734140241","viewed":30,"name":"bxbr test shaders","username":"bxbroberts","description":"testing different patterns","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""}}