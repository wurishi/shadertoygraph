{"ver":"0.1","info":{"id":"4djfzR","date":"1499144384","viewed":195,"name":"OrbVisualizer","username":"inantop","description":"relaxing visualizer","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XssXRf","filepath":"https://soundcloud.com/zeds-dead-mixes/catching-zs-volume-2","previewfilepath":"https://soundcloud.com/zeds-dead-mixes/catching-zs-volume-2","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 firstRow = vec2(fragCoord.x / iResolution.x, 0.25);\n    vec2 secondRow = vec2(fragCoord.x / iResolution.x, 0.75);\n    \n    vec4 amplitude = texture(iChannel1, firstRow);\n    vec4 frequency = texture(iChannel1, secondRow);\n    \n    float boom = texture(iChannel1, vec2(0.01, 0.25)).x;\n    float tsh = texture(iChannel1, vec2(0.7, 0.25)).x;\n    float rot = iTime * 1.1 + 0.2 * boom;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    \n    vec3 uv2 = vec3(uv, 1.0);\n    \n    vec3 uv3 = rotate(uv2, vec3(0, 1, 0), rot);\n    \n\tvec2 aspectRatioCorrect = uv;\n    float aspectRatio = iResolution.x / iResolution.y;\n    aspectRatioCorrect.y /= aspectRatio;\n    \n    float radius = 0.2 + 0.25 * boom;\n    vec4 reflectColor = vec4(0.0);\n    \n    vec4 texColor = texture(iChannel0, uv3);\n   \n    \n    if(length(aspectRatioCorrect) < radius)\n    {\n        float x = aspectRatioCorrect.x;\n        float y = aspectRatioCorrect.y;\n        float z = -sqrt(radius*radius - x*x - y*y);\n        \n        vec3 point = vec3(x,y,z);\n        point = rotate(point, vec3(0,1,0), rot);\n        \n        vec3 normal = normalize(point);\n        \n        vec3 rNorm = rotate(normal, vec3(0,1,0), 0.0);\n        vec3 gNorm = rotate(normal, vec3(0,1,0), 0.1);\n        vec3 bNorm = rotate(normal, vec3(0,1,0), 0.2);\n        \n        \n        vec4 col = texture(iChannel2, reflect(uv3, normal));\n        float fBright = col.r * 0.2 + col.g * 0.5 + col.b * 0.3;\n        \n        float brightWeight = fBright / 3.0;\n        \n        float r = texture(iChannel2, reflect(uv3, rNorm)).r * brightWeight;\n        float g = texture(iChannel2, reflect(uv3, gNorm)).g * brightWeight;\n        float b = texture(iChannel2, reflect(uv3, bNorm)).b * brightWeight;\n        \n        float r2 = texture(iChannel0, reflect(uv3, normal)).r * (1.0 - brightWeight);\n        float g2 = texture(iChannel0, reflect(uv3, normal)).g * (1.0 - brightWeight);\n        float b2 = texture(iChannel0, reflect(uv3, normal)).b * (1.0 - brightWeight);\n        \n        reflectColor = vec4(r2,g2,b2,1) + vec4(r,g,b,1);\n        \n        float len = length(aspectRatioCorrect) / radius;\n        float fadeoff = 0.01 + 0.09 * boom;\n        float opacity = 0.9 - max(0.0, len - (1.0 - fadeoff)) / fadeoff;\n        \n        fragColor = ((reflectColor * opacity) + ((1.0 - opacity) * texColor));\n    }\n    else\n    {\n        fragColor = texColor;\n    }\n}","name":"Image","description":"","type":"image"}]}