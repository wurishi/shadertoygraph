{"ver":"0.1","info":{"id":"DtK3WV","date":"1684692533","viewed":166,"name":"Wedge Product","username":"henrmota","description":" A demonstration of how we can detect if a point is inside a convex shape with a wedge product. Reproducing Avicii logo. Click play in iChannel0.\n\nCheck line 36","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["triangle","wedge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float wedge(vec2 a, vec2 b) {\n    return a.x * b.y - b.x * a.y;\n}\n\nvec3 triangle(vec2 p, vec2 a, vec2 b, vec2 c) {\n    vec3 col = vec3(.2, .2, 0.3);\n    \n    vec2 ab = b - a;\n    vec2 bc = c - b;\n    vec2 ca = a - c;\n    \n    vec2 ap = p - a;\n    vec2 bp = p - b;\n    vec2 cp = p - c;\n    \n    float ta = clamp(dot(ab, ap) / dot(ab, ab), -0., 1.);\n    vec2 pointInA = a + ab * ta;\n     \n    float tb = clamp(dot(bc, bp) / dot(bc, bc), -0., 1.);\n    vec2 pointInB = b + bc * tb;\n    \n    float tc = clamp(dot(ca, cp) / dot(ca, ca), -0., 1.);\n    vec2 pointInC = c + ca * tc;\n    \n    // borders\n    col += smoothstep(0.001, 0., length(p - pointInA));\n    col += smoothstep(0.001, 0., length(p - pointInB));\n    col += smoothstep(0.001, 0., length(p - pointInC));\n   \n    // just some colors\n    vec3 wedgeColor = abs(normalize(vec3(wedge(ap, ab), wedge(bp, bc), wedge(cp, ca))));\n    vec3 dotColor = abs(normalize(vec3(tc, ta, tb)));\n    \n    // the sound texture is 512x2\n    int tx = int(abs(mix(p.x, p.y, mix(ta, tc, tb))*1512.0));\n   \n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx, 0.), 0 ).x; \n\n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx, 1.), 0 ).x;\n    \n    vec3 color = mix(vec3(0.), vec3(ta, tb, tc), 0.2/smoothstep(0.2, 0.8, fft * sin(wave)) + 0.4);\n    \n    //HERE is the deal ... check if pixel is inside the triangle\n    float inside = sign(wedge(ap, ab)) == sign(wedge(bp, bc)) && sign(wedge(bp, bc)) == sign(wedge(cp, ca)) ? 1. : 0.;\n    \n\n    col = max(col, mix(vec3(0.), color, inside));\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.x;\n\n    vec2 a = vec2(-0.025, 0.2);\n    vec2 b = vec2(-0.4,-0.2);\n    vec2 c = vec2(-0.025, -0.2);\n    \n    vec2 d = vec2(0.025, -0.2);\n    vec2 e = vec2(0.4, 0.2);\n    vec2 f = vec2(0.025, 0.2);\n    \n    // Time varying pixel color\n    vec3 col = triangle(uv, d, e, f);\n    col = max(col, triangle(uv, a, b, c));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}