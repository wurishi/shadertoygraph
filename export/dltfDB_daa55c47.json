{"ver":"0.1","info":{"id":"dltfDB","date":"1708725980","viewed":31,"name":"Fork Experiment Leolios 208","username":"Leolios","description":"Experimento realizado con ayuda de chatgpt4","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","experiments","chtgpt4"],"hasliked":0,"parentid":"mttfDB","parentname":"Experimento 1 Mandelbrot"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizar las coordenadas de la pantalla para el fractal\n    vec2 c = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    c.x *= iResolution.x / iResolution.y; // Corregir la relación de aspecto\n\n    // Parámetros para el fractal\n    vec2 z = c;\n    float i;\n    float maxIter = 100.0;\n\n    // Deformar el fractal con el tiempo\n    c += 0.1 * vec2(cos(iTime), sin(iTime));\n\n    // Iterar para generar el fractal\n    for (i = 0.0; i < maxIter; i++) {\n        if (dot(z, z) > 4.0) break;\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n    }\n\n    // Color del fractal basado en el número de iteraciones\n    vec3 fractalColor = 0.5 + 0.5 * cos(3.0 + i/maxIter*10.0 + vec3(0.5, 1.0, 2.0));\n\n    // Normalized pixel coordinates (from 0 to 1) for background color\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Time varying pixel color for background\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n\n    // Combine fractal color with background color\n    vec3 color = mix(col, fractalColor, step(4.0, dot(z, z)));\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}