{"ver":"0.1","info":{"id":"wllBDM","date":"1596927069","viewed":786,"name":"Old Monitor Scanlines","username":"devrique","description":"Simple screen scanlines, like some kind of retro monitor. I got the inspiration to do it playing Stay. WIP.\n\nI'm planning to add more to this effect, I'm new to shaders and already learning. Suggestions and constructive criticism is welcome! :)","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["scanlines","tv","scanline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: devrique.\n// Name: Old Monitor Scanlines.\n// Description: Screen scanlines, like some kind of retro monitor.\n//              I got the inspiration to do it playing Stay. :)\n\n// Set to 0.0 to stop animation.\n// Only integer numbers with float format, or else the animation cuts!\nfloat scanSpeedAdd = 6.0;\n\n// Change this value to change scanline size (> = smaller lines).\nfloat lineCut = 0.1;\n\n// Reduce 'anaglyphIntensity' value to reduce eye stress.\n// Adding this two values should result in 1.0.\nfloat whiteIntensity = 0.8;\nfloat anaglyphIntensity = 0.5;\n\n// Anaglyph colors.\nvec3 col_r = vec3(0.0, 1.0, 1.0);\nvec3 col_l = vec3(1.0, 0.0, 0.0);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1).\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_right = vec2(uv.x + 0.01, uv.y + 0.01);\n    vec2 uv_left = vec2(uv.x - 0.01, uv.y - 0.01);\n\n    // Black screen.\n    vec3 col = vec3(0.0);\n    \n    // Measure speed.\n    float scanSpeed = (fract(iTime) * 2.5 / 40.0) * scanSpeedAdd;\n    \n    // Generate scanlines.\n    vec3 scanlines = vec3(1.0) * abs(cos((uv.y + scanSpeed) * 100.0)) - lineCut;\n    \n    // Generate anaglyph scanlines.\n    vec3 scanlines_right = col_r * abs(cos((uv_right.y + scanSpeed) * 100.0)) - lineCut;\n    vec3 scanlines_left = col_l * abs(cos((uv_left.y + scanSpeed) * 100.0)) - lineCut;\n    \n    // First try; a strange mess.\n    //vec3 scanlines = cos(cos(sqrt(uv.y)*tan(iTime / 10000.0) * 100.0 * 10.0) * vec3(1.0) * 100.0);\n    \n    col = smoothstep(0.1, 0.7, scanlines * whiteIntensity)\n        + smoothstep(0.1, 0.7, scanlines_right * anaglyphIntensity)\n        + smoothstep(0.1, 0.7, scanlines_left * anaglyphIntensity);\n    \n    // Deform test (WIP, thanks to 'ddoodm' for its Simple Fisheye Distortion!).\n    vec2 eyefishuv = (uv - 0.5) * 2.5;\n    float deform = (1.0 - eyefishuv.y*eyefishuv.y) * 0.02 * eyefishuv.x;\n    //deform = 0.0;\n    \n    // Add texture to visualize better the effect.\n    vec4 texture1 = texture(iChannel0, vec2(uv.x - deform*0.95, uv.y));\n    \n    // Add vignette effect.\n    float bottomRight = pow(uv.x, uv.y * 100.0);\n    float bottomLeft = pow(1.0 - uv.x, uv.y * 100.0);\n    float topRight = pow(uv.x, (1.0 - uv.y) * 100.0);\n    float topLeft = pow(uv.y, uv.x * 100.0);\n    \n    float screenForm = bottomRight\n        + bottomLeft\n        + topRight\n        + topLeft;\n\n    // Invert screenForm color.\n    vec3 col2 = 1.0-vec3(screenForm);\n    \n    // Output to screen.\n    // Invert last 0.1 and 1.0 positions for image processing.\n    fragColor = texture1 + vec4((smoothstep(0.1, 0.9, col) * 0.1), 1.0);\n    fragColor = vec4(fragColor.rgb * col2, fragColor.a);\n}","name":"Image","description":"","type":"image"}]}