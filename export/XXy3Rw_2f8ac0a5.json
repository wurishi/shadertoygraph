{"ver":"0.1","info":{"id":"XXy3Rw","date":"1717431311","viewed":100,"name":"RGB Flow Field","username":"GarlicGraphix","description":"Flow mannn\n\nSpace Bar to reset","likes":5,"published":1,"flags":48,"usePreview":1,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nconst float KEY_SP    = 32.5/256.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float o = iTime*0.1;\n    uv += o;\n    vec2 p = 1.0/iResolution.xy;\n    float tc = 10.0;\n    vec2 t = floor(uv * tc);\n    \n    vec2 vr = vec2(0.0); // MUST be integers!\n    vec2 vg = vec2(0.0); // MUST be integers!\n    vec2 vb = vec2(0.0); // MUST be integers!\n    float s = 3.0;\n    vec4 debugC = vec4(0.);\n    for(int ci = 0; ci < 3; ci++) {\n        vec2 v = vec2(0.0);\n        \n        for (int i = -1; i < 2; i++) {\n            for (int j = -1; j < 2; j++) {\n                vec2 lt = t + vec2(i, j);\n                vec2 ltuv = lt/tc+0.5/tc;\n                float w = clamp(tc*(1.5/tc - length(uv-ltuv)), 0.0, 1.0);\n                vec2 a = vec2(\n                    ceil(random(lt+ float(ci))*s),\n                    ceil(random(lt*10.0+ float(ci))*s)\n                );\n                a = floor((a)*w);\n                v += a;\n                //debugC += vec4(a*0.05, 0.0, 1.0);\n            }\n        }\n        \n        if (ci == 0) {\n            vr = v;\n        } else if (ci == 1) {\n            vg = v;\n        } else {\n            vb = v;\n        }\n    }\n    //fragColor = debugC;\n    //return;\n    vec3 c;\n    \n    if (iFrame <= 1 || texture( iChannel1, vec2(KEY_SP, 0.5) ).x >= 0.5) {\n        c = vec3(random(uv));\n        //c = texture(iChannel2, uv).rgb;\n    } else {\n        vec2 puv = fract(uv-o - vr*p);\n        c.r = texture(iChannel0, puv).r;\n        puv = fract(uv-o - vg*p);\n        c.g = texture(iChannel0, puv).g;\n        puv = fract(uv-o - vb*p);\n        c.b = texture(iChannel0, puv).b;\n    }\n    float cc = texture(iChannel0, uv).r;\n    \n    fragColor = vec4(c, 1.0);\n    //fragColor = vec4(cc+c*0.3 - cc*0.3);\n\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}