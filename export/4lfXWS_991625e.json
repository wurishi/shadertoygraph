{"ver":"0.1","info":{"id":"4lfXWS","date":"1439208874","viewed":507,"name":"[SIG15] portal","username":"the23","description":"portal. such a great game. even in 2D.\n\nI wish I had the time to add the proper companion cube...","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["portal","sig15","shaderofgame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define AltFakeAO 1\n\nconst vec2 g = vec2(0.0, -0.981);\nconst float sqrt2 = 1.414213562;\n\nconst float speed = 2.542;\nconst vec2 bot = vec2(-1.5,-1);\nconst vec2 top = vec2(1.5,1);\n\nconst float logoRad1 = 0.4;\nconst float logoRad2 = 0.9;\nconst vec3 logoColor = vec3(0.0);//vec3(0.09803, 0.607843, 0.988235);\n\nconst float slitWidth = 0.05;\nconst float slitShift = 0.185;\nconst float slitLength = 0.4;\n\nconst float portalStretchFactor = 5.0;\nconst float portalRadIn = 0.35;\nconst float portalRadOut = 0.4;\nconst float portalBlendHalf = 0.2;\n\nconst vec2 portalPosExit1  = vec2(-1.3,  0.5);\nconst vec2 portalPosEnter1 = vec2(-0.3, -0.7);\nconst vec2 portalPosExit2  = vec2( 0.3, -0.7);\nconst vec2 portalPosEnter2 = vec2( 1.3,  0.5);\n\nconst vec3 portalColorEnter = vec3(1.0, 0.5, 0.0);\nconst vec3 portalColorExit = vec3(0.0, 0.7, 1.0);\n\nconst vec3 stickManColor = vec3(1.3);\nconst float stickManInvSize = 4.0;\nconst vec3 dropShadowColor = vec3(0.3);\nconst vec2 dropShadowOffset = vec2(0.01, -0.01);\n\nconst vec3 wallColor = vec3(0.8);\nconst vec3 fakeAOColor = vec3(0.7);\n\nfloat slits(vec2 pos)\n{\n    float aaf = length(fwidth(pos));\n    float tmp1 = smoothstep(slitWidth - aaf, slitWidth, length(pos.y - slitLength) + (1.0 - float(pos.x < slitShift)));\n    float tmp2 = smoothstep(slitWidth - aaf, slitWidth, length(pos.x - slitLength) + (1.0 - float(pos.y > -slitShift)));\n    float tmp3 = smoothstep(slitWidth * sqrt2 - aaf, slitWidth * sqrt2, length((pos.x - pos.y) - slitLength * sqrt2) + (1.0 - float(pos.x > slitShift)));\n    float tmp4 = smoothstep(slitWidth * sqrt2 - aaf, slitWidth * sqrt2, length((pos.x + pos.y) - slitLength * sqrt2) + (1.0 - float(pos.y > slitShift)));\n\n    return tmp4 * tmp3 * tmp2 * tmp1;\n}\n\nvec3 drawCirc(vec3 col, vec2 coord, vec2 pos, float rad, vec3 oldColor)\n{\n    float dst = distance(coord, pos);\n    return mix(oldColor, col, 1.0 - smoothstep(rad - fwidth(dst), rad, dst));\n}\n\nvec3 drawDisc(vec3 col, vec2 coord, vec2 pos, float radIn, float radOut, vec3 oldColor)\n{\n    float dst = distance(coord, pos);\n    float aaf = fwidth(dst);\n    return mix(oldColor, col, (smoothstep(radIn - aaf, radIn, dst) * (1.0 - smoothstep(radOut - aaf, radOut, dst))));\n}\n\nvec3 drawLine(vec3 col, vec2 coord, vec2 p1, vec2 p2, float thickness, vec3 oldColor)\n{\n    float d = dot(coord - p1, p2 - p1) / length(p2 - p1);\n    d /= length(p2 - p1);\n    d = clamp(step(0.0, d) * d, 0.0, 1.0);\n    d = distance(p1 + d * (p2 - p1), coord);\n    \n    float dst = smoothstep(thickness - length(fwidth(coord)), thickness, d);\n\n    return mix(col, oldColor, dst);\n}\n\nvec3 drawLineFade(vec3 col, vec2 coord, vec2 p1, vec2 p2, float thickness, vec3 oldColor)\n{\n    // this didn't work for some reason on my my Macbook, but on my iMac...\n    if (AltFakeAO == 0)\n    {\n    float d = dot(coord - p1, p2 - p1) / length(p2 - p1);\n    d /= length(p2 - p1);\n    d = clamp(step(0.0, d) * d, 0.0, 1.0);\n    d = distance(p1 + d * (p2 - p1), coord);\n    \n    return mix(col, oldColor, clamp(0.0, 1.0, d / thickness));\n    }\n    else\n    {\n    float aaf = length(fwidth(coord));\n    vec3 blendedCol = mix(col, oldColor, 0.66);\n    float blendedLen = aaf * 3.0;\n    vec3 color = drawLine(blendedCol, coord, p1, p2, blendedLen, oldColor);\n\n    blendedCol = mix(col, oldColor, 0.33);\n    blendedLen = aaf * 2.0;\n    color = drawLine(blendedCol, coord, p1, p2, blendedLen, color);\n\n    blendedCol = col;//mix(col, oldColor, 0.0);\n    blendedLen = aaf;// * 1.0;\n    color = drawLine(blendedCol, coord, p1, p2, blendedLen, color);\n\n    return color;\n    }\n}\n\nfloat cross2D(vec2 a, vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nvec3 drawQuad(vec3 col, vec2 coord, vec2 p1, vec2 p2, vec2 p3, vec2 p4, float thickness, vec3 oldColor)\n{\n    float sideA = sign(cross2D(coord - p1, p2 - p1));\n    float sideB = sign(cross2D(coord - p2, p3 - p2));\n    float sideC = sign(cross2D(coord - p3, p4 - p3));\n    float sideD = sign(cross2D(coord - p4, p1 - p4));\n    float dst = abs(sideA - sideB) + abs(sideB - sideC) + abs(sideC - sideD) + abs(sideD - sideA);\n    dst = clamp(dst, 0.0, 1.0);\n\n    vec3 res = mix(col, oldColor, dst);\n    res = drawLine(col, coord, p1, p2, thickness, res);\n    res = drawLine(col, coord, p2, p3, thickness, res);\n    res = drawLine(col, coord, p3, p4, thickness, res);\n    res = drawLine(col, coord, p4, p1, thickness, res);\n    return res;\n}\n\nvec3 drawHeart(vec2 coord, vec2 pos, float invScale, vec2 stretch, vec3 oldColor)\n{\n  // credits go to @iq - https://www.shadertoy.com/view/XsfGRn\n  vec2 coordinate = stretch * (coord - pos) * invScale;\n  float a = atan(coordinate.x,coordinate.y)/3.141593;\n  float r = length(coordinate);\n  float h = abs(a);\n  float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);\n  vec3 hcol = vec3(1.0,0.5*r,0.3);\n\n  float heartMask = smoothstep(0.0, fwidth(d-r), d-r);\n\n  return mix(oldColor, hcol, heartMask);\n}\n\nvec3 apertureLogo(vec2 coord, vec2 pos, float invScale, vec3 oldColor)\n{\n    float rad = distance(coord, pos) * invScale;\n    float insideRing = step(logoRad1, rad) * (1.0 - smoothstep(logoRad2-fwidth(rad), logoRad2, rad));\n    float logo = slits((coord - pos) * invScale) * slits((-coord + pos) * invScale) * insideRing;\n    return mix(oldColor, logoColor, logo);\n}\n\nvec3 stickman(vec2 coord, vec2 pos, vec3 col, float invScale, bool upsideDown, vec3 oldColor)\n{\n    float rad = 0.06;\n\n    vec2 armL = vec2(0.3, 0.44);\n    vec2 armL2 = vec2(0.6, 0.55);\n    vec2 armL3 = vec2(0.7, 0.3);\n\n    vec2 armR = vec2(0.02, 0.32);\n    vec2 armR2 = vec2(-0.15, 0.1);\n    vec2 armR3 = vec2(-0.4, -0.0);\n\n    vec2 legL = vec2(0.5, -0.05);\n    vec2 legL2 = vec2(0.65, -0.4);\n    vec2 legL3 = vec2(0.8, -0.1);\n\n    vec2 legR = vec2(0.22, -0.18);\n    vec2 legR2 = vec2(0.1, -0.5);\n    vec2 legR3 = vec2(0.23, -0.75);\n\n    vec2 scaleCoord = (coord - pos) * invScale;\n    scaleCoord.x *= -1.0;\n\n    if (upsideDown)\n    {\n        scaleCoord.y *= -1.0;      \n    }\n\n    vec3 res = oldColor;\n    res = drawCirc(col, scaleCoord, vec2(0.0, 0.7), 0.18, res);\n\n    //arm left\n    res = drawLine(col, scaleCoord, armL, armL2, rad, res);\n    res = drawLine(col, scaleCoord, armL2, armL3, rad, res);\n    //arm right\n    res = drawLine(col, scaleCoord, armR, armR2, rad, res);\n    res = drawLine(col, scaleCoord, armR2, armR3, rad, res);\n    //leg left\n    res = drawLine(col, scaleCoord, legL, legL2, rad, res);\n    res = drawLine(col, scaleCoord, legL2, legL3, rad, res);\n    //leg right\n    res = drawLine(col, scaleCoord, legR, legR2, rad, res);\n    res = drawLine(col, scaleCoord, legR2, legR3, rad, res);\n\n    //torso\n    res = drawQuad(col, scaleCoord, armL, armR, legR, legL, rad, res);\n\n    //cut-off @ portals - dirty!\n    if ((coord.x < portalPosExit1.x) || (coord.x > portalPosEnter2.x)\n      || (coord.y < portalPosExit2.y) || (coord.y < portalPosEnter1.y))\n    {\n        res = oldColor;\n    } \n    return res;\n}\n\nvec3 portal(bool jumpIn, vec2 coord, vec2 pos, bool alongX, vec3 oldColor)\n{\n    vec2 stretch = alongX ? vec2(1.0, portalStretchFactor) : vec2(portalStretchFactor, 1.0);\n    stretch *= 1.4;\n\n    vec3 col = jumpIn ? portalColorEnter : portalColorExit;\n    return drawDisc(col, (coord - pos) * stretch, vec2(0.0), portalRadIn, portalRadOut, oldColor);\n}\n\nvec3 blendPortals(vec3 portal1, vec3 portal2, float time1, float time2, float time)\n{\n    float blender = smoothstep(time1 - portalBlendHalf, time1 + portalBlendHalf, time) \n                  - smoothstep(time2 - portalBlendHalf, time2 + portalBlendHalf, time);\n    return mix(portal1, portal2, blender);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float durationTotal = 2.92;\n    float durationHalf = 1.55;\n    float tick = iTime * speed;\n    float time = mod(tick, durationTotal);\n    bool evenTurn = mod(floor(tick / durationTotal), 2.0) > 0.0;\n    vec3 color = vec3(0.0);\n\n    vec2 area = top - bot;\n    float ratioScreen = iResolution.x/ iResolution.y;\n    float ratioArea = area.x / area.y;\n    vec2 padding = vec2(ratioScreen / ratioArea, ratioArea /ratioScreen);\n    padding = max(vec2(0.0), area * padding - area);\n    vec2 coord = uv * (area + padding) + bot - (padding * 0.5);\n\n    //background\n    //color = vec3(1.0 - smoothstep(0.6, 1.3, abs(coord.y))) * 0.4 * (smoothstep(2.0, 1.4, abs(coord.x))) + 0.1;\n    color = drawQuad(wallColor, coord, vec2(-1.0, -1.0), vec2(1.0, -1.0), vec2(0.5, -0.5), vec2(-0.5), 0.01, color);\n\n    color = drawQuad(wallColor, coord, vec2(-1.5, 1.0), vec2(-1.5, 0.0), vec2(-1.1, 0.2), vec2(-1.1, 0.8), 0.01, color);\n\n    color = drawQuad(wallColor, coord, vec2(-1.1, 0.2), vec2(-1.1, 0.8), vec2(-0.5, 0.8), vec2(-0.5, 0.2), 0.01, color);\n    color = drawQuad(wallColor, coord, vec2(-0.5, 0.8), vec2(-0.5, -0.5), vec2(0.5, -0.5), vec2(0.5, 0.8), 0.01, color);\n    color = drawQuad(wallColor, coord, vec2(1.1, 0.2), vec2(1.1, 0.8), vec2(0.5, 0.8), vec2(0.5, 0.2), 0.01, color);\n\n    color = drawQuad(wallColor, coord, vec2(1.5, 1.0), vec2(1.5, 0.0), vec2(1.1, 0.2), vec2(1.1, 0.8), 0.01, color);\n\n    color = drawLineFade(fakeAOColor, coord, vec2(0.5, -0.5), vec2(-0.5), 0.02, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(-1.1, 0.2), vec2(-1.1, 0.8), 0.02, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(1.1, 0.2), vec2(1.1, 0.8), 0.02, color);\n\n    //combanion cube\n    vec3 cubeColor = vec3(0.85);\n    color = drawLineFade(fakeAOColor, coord, vec2(-0.15, -0.55), vec2(-0.15, -0.35), 0.03, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(0.15, -0.55), vec2(0.15, -0.35), 0.03, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(0.15, -0.35), vec2(0.0, -0.3), 0.03, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(-0.15, -0.35), vec2(0.0, -0.3), 0.03, color);\n\n    color = drawQuad(cubeColor, coord, vec2(0.0, -0.6), vec2(0.0, -0.4), vec2(-0.15, -0.35), vec2(-0.15, -0.55), 0.01, color);\n    color = drawQuad(cubeColor, coord, vec2(0.0, -0.6), vec2(0.0, -0.4), vec2(0.15, -0.35), vec2(0.15, -0.55), 0.01, color);\n    color = drawQuad(cubeColor, coord, vec2(0.0, -0.4), vec2(-0.15, -0.35), vec2(0.0, -0.3), vec2(0.15, -0.35), 0.01, color);\n    \n    color = drawLineFade(fakeAOColor, coord, vec2(0.0, -0.6), vec2(-0.15, -0.55), 0.02, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(0.0, -0.6), vec2(0.15, -0.55), 0.02, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(0.0, -0.6), vec2(0.0, -0.4), 0.02, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(0.0, -0.4), vec2(-0.15, -0.35), 0.02, color);\n    color = drawLineFade(fakeAOColor, coord, vec2(0.0, -0.4), vec2(0.15, -0.35), 0.02, color);\n\n    color = drawHeart(coord, vec2(0.0, -0.33), 20.0, vec2(1.0, 1.5), color);\n    color = drawHeart(coord + vec2(0.0, coord.x * 0.25), vec2(-0.09, -0.47), 20.0, vec2(1.7, 1.0), color);\n    color = drawHeart(coord - vec2(0.0, coord.x * 0.25), vec2(0.09, -0.47), 20.0, vec2(1.7, 1.0), color);\n\n    //logo\n    color = apertureLogo(coord, vec2(0.0, 0.5), 3.5,  color);\n\n    //portals\n    vec3 portalExit1 = portal(false, coord, portalPosExit1, false, color);\n    vec3 portalExit2 = portal(false, coord, portalPosExit2, true, color);\n    color = blendPortals(portalExit1, portalExit2, 0.9, 2.3, time);\n\n    vec3 portalEnter1 = portal(true, coord, portalPosEnter1, true, color);\n    vec3 portalEnter2 = portal(true, coord, portalPosEnter2, false, color);\n    color = blendPortals(portalEnter2, portalEnter1, 0.3, 1.7, time);\n\n    vec2 start = vec2(-1.3, 0.5);\n    vec2 dir = vec2(0.70, 0.0);\n    bool upsideDown = evenTurn;\n\n    bool mirror1UpsideDown = !upsideDown;\n    bool mirror2UpsideDown = upsideDown;\n\n    vec2 pos = dir * time + 0.5 * g * time * time;\n\n    vec2 mirror1Pos = start + pos;\n    mirror1Pos.y = portalPosExit2.y - (mirror1Pos.y - portalPosExit2.y);\n    mirror1Pos.x += portalPosExit2.x - portalPosEnter1.x;\n\n    vec2 mirror2Pos = start + pos + portalPosEnter2 - portalPosExit1;\n\n    if (time > durationHalf)\n    {\n        time = time - durationHalf;\n        dir = vec2(0.74, 1.55);\n        start = portalPosExit2;\n        pos = dir * time + 0.5 * g * time * time;\n        upsideDown = !upsideDown;\n        mirror1Pos = start + pos - vec2(portalPosEnter2.x - portalPosExit1.x, 0.0);\n        mirror1UpsideDown = upsideDown;\n\n        mirror2UpsideDown = !upsideDown;\n\n        mirror2Pos = start + pos;\n        mirror2Pos.y = portalPosExit2.y - (mirror1Pos.y - portalPosExit2.y);\n        mirror2Pos.x -= portalPosExit2.x - portalPosEnter1.x;\n    }\n\n    // the main guy incl a little drop shadow :-)\n    color = stickman(coord, start + pos + dropShadowOffset, dropShadowColor, stickManInvSize, upsideDown, color);\n    color = stickman(coord, start + pos, stickManColor, stickManInvSize, upsideDown, color);\n    //mirror1 : show exit @ next portal\n    color = stickman(coord, mirror1Pos + dropShadowOffset, dropShadowColor, stickManInvSize, mirror1UpsideDown, color);\n    color = stickman(coord, mirror1Pos, stickManColor, stickManInvSize, mirror1UpsideDown, color);\n    //mirror2 : show enter @ previous portal\n    color = stickman(coord, mirror2Pos + dropShadowOffset, dropShadowColor, stickManInvSize, mirror2UpsideDown, color);\n    color = stickman(coord, mirror2Pos, stickManColor, stickManInvSize, mirror2UpsideDown, color);\n\n    fragColor.rgb = color;\n}","name":"","description":"","type":"image"}]}