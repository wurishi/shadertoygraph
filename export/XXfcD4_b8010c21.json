{"ver":"0.1","info":{"id":"XXfcD4","date":"1726153314","viewed":66,"name":"Rainbow Caustics","username":"ewine","description":"Rainbow caustics inspired by Luminorth cube","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["water","caustics","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Edited  water caustics to be rainbow\n// Original tileable caustics by David Hoskins\n// Original water turbulence effect by joltz0r\n\n#define TAU 6.28318530718\n#define MAX_ITER 6\n#define FREQ 1.0\n#define SPEED 0.5\nvec3 colors[MAX_ITER]=vec3[]\n(\n    vec3(1.0,0.0,0.0),\n    vec3(0.0,0.8,0.0),\n    vec3(0.0,0.0,1.0),    \n    vec3(1.0,0.8,0.0),\n    vec3(0.0,0.8,1.0),    \n    vec3(1.0,0.0,1.0)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tfloat time = iTime * SPEED;\n    // uv should be the 0-1 uv of texture...\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = mod(uv*FREQ*TAU, TAU)-250.0;\n\tvec2 i = vec2(p);\n\tfloat inten = .003; //Increase for more glow\n    vec3 color = vec3(1);\n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1))); //Offset time per wave\n        //Distort\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n        //Add to total color. 1-color to account for inverting average later\n        color+=(1.0-colors[n]) \n         *(1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten))));\n\t}\n\tcolor /= float(MAX_ITER);\n    //Exponential, invert\n    color = vec3(1)-pow(color,vec3(2));\n    //Darken on curve\n    color = pow(abs(color), vec3(6.0));\n    //Brighten a bit\n    color = clamp(color + vec3(0.2), 0.0, 1.0);\n    //Background if you want\n    color = texture(iChannel0,uv).rgb * 0.2 + color * 0.8;\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}