{"ver":"0.1","info":{"id":"3dyXR1","date":"1573340080","viewed":105,"name":"Los Colores - Clasico  ","username":"anemolo","description":"Inspired by \"Los colores\"'s album. :)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["linesexclusioninclusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r){\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n      i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n\n}\n\nfloat getLine(float val, float count){\n \n    \n    val *= count;\n    \n\tfloat lines = fract(val);\n    lines = smoothstep(0.8,1.,lines);\n    \n    \n    \n    return lines;\n    \n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nfloat getNoise(vec2 uv, float time){\n    float noise = snoise(vec3(uv , time));\n    noise = step(0., noise);\n    return noise;\n}\n#define PI 3.14159265359\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float rotationTime = iTime * 0.1;\n    float noiseTime = iTime * 0.5;\n    \n    vec2 uv2 = uv;\n    uv2 -= 0.5;\n    \n    uv2 = rotate2d( rotationTime) * uv2;\n    float lines1 = getLine(uv2.x,40.);\n    uv2 = rotate2d(PI / 3. + rotationTime) * uv2;\n    float lines2 = getLine(uv2.x,100.);\n    uv2 = rotate2d(PI / 3.+ rotationTime) * uv2;\n    float lines3 = getLine(uv2.x,40.);\n    \n    \n    \n    float noise1 = getNoise(uv *2., noiseTime);\n    \n    float noise2 = getNoise(uv *2., 10. +noiseTime); \n    \n    float noise3 = getNoise(uv *2., 20. +noiseTime); \n    \n    float only1 = max(0., noise1 - noise2 - noise3);\n    float only2 = max(0., noise2 - noise1 - noise3);\n    float only3 = max(0., noise3 - noise2 - noise1);\n    \n    float share1and2 = noise1 * noise2 * (1.-noise3);\n    float share1and3 = noise1 * noise3 * (1.-noise2);\n    float share2and3 = noise2 * noise3 * (1.-noise1);\n    \n    float allShare = noise1 * noise2 * noise3;\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(lines1+ lines2 + lines3);\n     col = vec3(\n         only1 * lines1 + \n         only2 * lines2 + \n         only3 * lines3 + \n         share1and2 * (lines1 + lines2) +\n         share1and3 * (lines1 + lines3) +\n         share2and3 * (lines2 + lines3) +\n         allShare * 1.\n     \n     );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}