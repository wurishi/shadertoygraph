{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec2 computeUV( vec2 uv, float k, float kcube ){\n    \n    vec2 t = uv - .5;\n    float r2 = t.x * t.x + t.y * t.y;\n\tfloat f = 0.;\n    \n    if( kcube == 0.0){\n        f = 1. + r2 * k;\n    }else{\n        f = 1. + r2 * ( k + kcube * sqrt( r2 ) );\n    }\n    \n    vec2 nUv = f * t + .5;\n    nUv.y = 1. - nUv.y;\n \n    return nUv;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float k = 1.0 * sin( iTime * .9 );\n    float kcube = .5 * sin( iTime );\n    \n    float offset = .1 * sin( iTime * .5 );\n    \n    float red = texture( iChannel0, computeUV( uv, k + offset, kcube ) ).r; \n    float green = texture( iChannel0, computeUV( uv, k, kcube ) ).g; \n    float blue = texture( iChannel0, computeUV( uv, k - offset, kcube ) ).b; \n    \n    fragColor = vec4( red, green,blue, 1. );\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lSGRw","date":"1427420124","viewed":4127,"name":"Cubic Lens Distortion Shader","username":"spite","description":"From here http://www.francois-tarlier.com/blog/cubic-lens-distortion-shader/","likes":40,"published":1,"flags":0,"usePreview":1,"tags":["distortion","lens","cubic"],"hasliked":0,"parentid":"","parentname":""}}