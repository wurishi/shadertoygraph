{"ver":"0.1","info":{"id":"ftVSzV","date":"1641060732","viewed":314,"name":"Beau ké?","username":"AntoineC","description":"Mes kés sont-ils beaux?","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["2d","bokeh","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ----------------------------------------------------------------------------------------\n//\t\"Beau ké?\" by Antoine Clappier - Jan 2022\n//\n//\tLicensed under:\n//  A Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n//\thttp://creativecommons.org/licenses/by-nc-sa/4.0/\n// ----------------------------------------------------------------------------------------\n//\n//   A quick Shadertoy done while cooking for new year’s eve!\n//\n//   (Inspired by a wallpaper seen on Samsung's store)\n\nconst float Count = 50.0;\nconst float R0 = 0.04666663;\nconst float R1 = 0.18769214;\nconst float B0 = 0.0;\nconst float B1 = 0.216524;\nconst float Bf = 0.095584;\nconst float Blur = 23.282028;\nconst float Alpha = 0.464387;\nconst float ColInter = 0.0;\nconst vec3 Color0 = vec3(1.0, 0.635327, 0.128205);\nconst vec3 Color1 = vec3(1.0, 0.273722, 0.185185);\n\n#define SinN(x) (0.5 + 0.5*sin(x))\n\n// Dave Hoskins hash functions\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return 2.0*fract((p3.xx+p3.yz)*p3.zy)-1.0;\n}\n\n// Inigo Quilez - Gradient Noise 2D\n// https://www.shadertoy.com/view/XdXGW8\nfloat Noise( in vec2 p )\n{\n    vec2 i = floor( p ), f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( dot( hash22( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( hash22( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash22( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( hash22( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Inigo Quilez - SDF\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p  = abs(p.yx);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\n\nvoid Draw(in vec2 p, in vec2 t, in float r, in float b, in float k, inout vec3 col)\n{\n\tfloat sd = sdHexagon(p-t, max(0.0, r-b));\n\tfloat s  = smoothstep(b, 0.0, sd);\n\tfloat bs = smoothstep(0.01, 0.0, b);\n    float sh = 0.0, ns = 0.0;\n    if(bs > 0.01)\n    {\n\t    sh = smoothstep(0.005, 0.0, abs(sd));\n\t    ns = Noise(bs*140.0*(p+0.8*t));\n    }\n\n\tvec3 c = mix(Color0, Color1, k);\n\tcol += Alpha*s*c*(1.0+bs*(0.2*sh+0.1*ns));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float dp = 1.0/iResolution.y;\n    vec2  p  = dp*fragCoord;\n\tfloat rt = dp*iResolution.x;\n    float t  = 0.5*iTime;\n\n    // Render:\n    vec3 col = vec3(0);\n    for(float k=0.0; k<Count; k++)\n    {\n        // Randomize position, radius, color and bluriness:\n    \tvec3 r0 = hash31(k+45.0), r1 = hash31(k+111.0), r2 = hash31(k+343.0);\n    \tfloat x, y, radius, blur;\n    \tx = rt*r0.x+0.7*(0.05+0.2*r1.y)*sin((1.+3.*r1.x)*t+107.*k)*SinN(1.3*t+47.*k);\n    \ty = (1.-(0.1+0.9*r0.y))*r0.z + (0.1+0.9*r0.y)*SinN(t+127.*k);\n    \tradius = mix(R0, R1, r1.z);\n    \tblur = mix(B0, B1, r2.x);\n    \tblur = max(0.0, blur + Bf*sin((0.5 + 1.5*r2.y)*t+53.0*k)*SinN(0.5*t+223.*k));\n    \tDraw(p, vec2(x,y), radius, dp + blur, r1.z, col);\n    }\n\n    // Tone mapping and vignette:\n    col = pow(1.2*col, vec3(4.0));\n\tcol = pow(col / (1.0 + col), vec3(0.25));\n\tcol *= smoothstep(1.1, 0.6, length(p-0.5*vec2(rt,1.0)));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}