{"ver":"0.1","info":{"id":"mljyzW","date":"1700110393","viewed":108,"name":"circle packing -31467","username":"ArmandB","description":"it is","likes":3,"published":3,"flags":48,"usePreview":0,"tags":["2d","sdf","iterative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//buffers A - D place the balls (to allow me to place up to 4 balls per frame)\n//see Cube A for instructions on how to change the scene\n\n//set both to 1 for fast rendering\nconst int superSample = 5;\nconst int maxBounces = 3;\n\n//press space to render fast version (helps to place more balls)\nconst int _space = 32;\n\nbool keyPressed(int key){\n    return texelFetch(iChannel2, ivec2(key,0),0).x >= 1.0;\n}\n\nfloat fpow(float x, float k){\n    return x > k ? pow((x-k)/(1.0-k),2.0) : 0.0;\n}\n\nvec3 getNormal(vec2 pos){\n    vec4 sampleData = texture(iChannel0, pos);    \n    return normalize(vec3(pos.x, sampleData.x, pos.y) - vec3(sampleData.y,0.0,sampleData.z));\n}\n\nfloat roundSdf(float r, float d){\n    float b = d*d + 2.0*d*r;\n    return sign(b)*sqrt(abs(b));\n}\n\nvec3 roundNormal(float r, float d, vec3 normal){\n    float q = dot(normal.xz,normal.xz)*abs(d*d + 2.0*d*r);\n    float l = (d+r)/sqrt(q);\n    return normalize(vec3(normal.x*l,1.0,normal.z*l));\n}\n\nfloat sdf(vec3 p){\n    vec4 sampleData = texture(iChannel0, p.xz);\n    float k = dot(p.xz-sampleData.yz,p.xz-sampleData.yz);\n    return sqrt(k + p.y*p.y) - sampleData.w;\n}\n\nHit marchRay(Ray ray){\n    float t = 0.0;\n    bool hit = false;\n    ray.origin.xz = fract(ray.origin.xz);\n    for (int i = 0; i < 512; i++){\n        float d = sdf(ray.origin);\n        if (t > 1.0) break;\n        if (abs(d) < 0.001){\n            hit = true;\n            break;\n        }\n\n        t += d;\n        ray.origin += ray.direction*d;\n        ray.origin.xz = fract(ray.origin.xz);\n    }\n    \n    vec4 sampleData = texture(iChannel0, ray.origin.xz);\n    return Hit(hit, t, ray.origin, roundNormal(sampleData.w, sampleData.x, getNormal(ray.origin.xz)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    if (!keyPressed(_space)){\n    \n        vec3 totalCol = vec3(0);\n        \n        //super sampling\n        for (int x = 0; x < superSample; x ++){\n            for (int y = 0; y < superSample; y ++){\n                \n                \n                vec2 uv = fract((fragCoord + vec2(x,y)/float(superSample))/iResolution.y);\n\n                vec3 lightPos = vec3(iMouse.x/iResolution.y,0.5,iMouse.y/iResolution.y);\n\n                Ray ray = Ray(vec3(0,-1,0),vec3(uv.x,1,uv.y));\n                bool didhit = false;\n                vec3 light = vec3(1);\n                vec3 lightColor = vec3(0.902,0.902,0.902);\n                \n                //reflection code\n                for (int i = 0; i < maxBounces; i ++){\n                    Hit hit = marchRay(ray);\n                    if (!hit.hit) break;\n                    light += fpow(max(dot(ray.direction,reflect(vec3(0,sin(3.0),cos(3.0)),hit.normal)),0.0),0.9); //specular\n                    light *= lightColor; //tint (or whatever you call it)\n                    ray = Ray(reflect(ray.direction,hit.normal),hit.point + hit.normal*0.1);\n                    didhit = true;\n                }\n                \n                //sample cubemap\n                vec3 col = vec3(0);\n                if (didhit) {\n                    col = texture(iChannel1,ray.direction).rgb*light;\n                } else {\n                    col = texture(iChannel1,normalize(vec3((fragCoord.x - iResolution.x/2.0)/iResolution.y,-0.5,fragCoord.y/iResolution.y-0.5))).rgb;\n                }\n                //add to avg\n                totalCol += col;\n                \n                \n            }\n        }\n\n        fragColor = vec4(totalCol/float(superSample*superSample),1);\n    } else {\n        fragColor = vec4(texture(iChannel0,fragCoord/iResolution.xy));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = addSphere(iChannel0, float(iFrame) + iDate.x + iDate.y + iDate.z + iDate.w, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"struct Ray {\n    vec3 direction;\n    vec3 origin;\n};\n\nstruct Hit {\n    bool hit;\n    float t;\n    vec3 point;\n    vec3 normal;\n};\n\n//stuff that places things\n\nconst int maxsteps = 1024;\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 getNormal(sampler2D sampler, vec2 uv){\n    vec2 pos = texture(sampler,uv).yz;\n    return normalize(uv - pos);\n}\n\nbool inArea(vec2 p){\n    return p.x >= 0.0 && p.x <= 1.0 && p.y >= 0.0 && p.y <= 1.0;\n}\n\nvec4 textureFetch(sampler2D sampler, vec2 coord){\n    return texelFetch(sampler,ivec2(coord*vec2(textureSize(sampler, 0).xy)),0);\n}\n\nvec4 addSphere(sampler2D sampler, float seed, vec2 uv){\n    vec4 data = textureFetch(sampler,uv);\n    vec2 pos = hash21(seed);\n    float radius = 0.0;\n    if (data == vec4(0)){\n        pos = vec2(0.5);\n        radius = 0.2;\n        data = vec4(999.0);\n    } else {\n        float ld = 0.0;\n        for (int i = 0; i < maxsteps; i++){\n            radius = textureFetch(sampler, pos).x;\n            if (radius >= 0.1 || radius < ld || !inArea(pos)) break;\n            vec2 normal = getNormal(sampler, pos);\n            pos += normal*0.0001*sign(0.5 - radius);\n            ld = radius;\n        }\n    }\n    float d = 999.0;\n    vec2 pos2 = vec2(0.0);\n    for (int x = -1; x <= 1; x++){\n        for (int y = -1; y <= 1; y++){\n            vec2 pos3 = pos + vec2(x,y);\n            float d2 = distance(pos3, uv) - radius;\n            if (d2 <= d){\n                d = d2;\n                pos2 = pos3;\n            }\n        }\n    }\n    return d <= data.x ? vec4(d, pos2, radius) : data;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = addSphere(iChannel0, float(iFrame) + iDate.x + iDate.y + iDate.z + iDate.w + 0.1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = addSphere(iChannel0, float(iFrame) + iDate.x + iDate.y + iDate.z + iDate.w + 0.2, uv);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = addSphere(iChannel0, float(iFrame) + iDate.x + iDate.y + iDate.z + iDate.w + 0.3, uv);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"//uncomment to enable custom cubemap textures\n//#define custom_texture\n\n/*\nto load cutom cubemap textures\nuncomment the define above\ninstall https://chromewebstore.google.com/detail/shadertoy-custom-texures/jgeibpcndpjboeebilehgbpkopkgkjda?pli=1\ngo to https://hdri-haven.com/ and find and download an hdri you like\nuse https://matheowis.github.io/HDRI-to-CubeMap/ to convert the hdri to a cubemap\ndrag the generated cubemap into channel0 of this buffer\n*/\n\n//based on https://www.gamedev.net/forums/topic/687535-implementing-a-cube-map-lookup-function/5337472/\nvec2 sampleCube(vec3 v){\n\tvec3 vAbs = abs(v);\n\tfloat ma;\n\tvec2 uv;\n    vec2 o;\n\tif (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y){\n\t\tma = 0.5/vAbs.z;\n\t\tuv = v.xy*vec2(sign(v.z),-1);\n        o = vec2(1 + int(v.z < 0.0)*2,1);\n\t} else if (vAbs.y >= vAbs.x){\n\t\tma = 0.5/vAbs.y;\n\t\tuv = v.xz*vec2(1,sign(v.y));\n        o = vec2(1,2*int(v.y < 0.0));\n\t} else {\n\t\tma = 0.5/vAbs.x;\n\t\tuv = v.zy*vec2(-sign(v.x), -1);\n        o = vec2(int(v.x >= 0.0)*2,1);\n\t}\n\treturn (uv*ma + 0.5 + o)/vec2(4,3);\n}\n\nvoid mainCubemap(out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir){\n    #ifdef custom_texture\n    fragColor = texture(iChannel0,sampleCube(rayDir*vec3(1,-1,1)));\n    #else\n    fragColor = texture(iChannel1,rayDir);\n    #endif\n}","name":"Cube A","description":"","type":"cubemap"}]}