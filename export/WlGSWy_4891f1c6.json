{"ver":"0.1","info":{"id":"WlGSWy","date":"1583444626","viewed":144,"name":"rnyan 2.0","username":"rmccampbell7","description":"Now with moar NYAAAAAAAAAAAAAN\nI used a Fourier series to generate the sound, see the code.\nOriginal version: https://www.shadertoy.com/view/3ldGWr","likes":8,"published":1,"flags":8,"usePreview":0,"tags":["nyan","sound","fourierseries"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 pix = fragCoord;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 res = iResolution.xy;\n    vec2 imSize = iChannelResolution[0].xy;\n    vec2 fSize = vec2(40, 32);\n    float nFrames = 6.;\n    float time = iTime * SPEED;\n    float scale = floor(res.y/72.); // 5.;\n    float freq = 2.;\n    vec3 col = vec3(0);\n\n    // Stars\n    vec2 pos = mod(pix + time*vec2(.25,0.)*res, res);\n    col += 1.*pow(prod(max(abs(pos-vec2(.10,.82)*res),.2)),-1.);\n    col += 1.*pow(prod(max(abs(pos-vec2(.50,.10)*res),.2)),-1.);\n    col += 1.*pow(prod(max(abs(pos-vec2(.80,.79)*res),.2)),-1.);\n    col += 2.*pow(prod(max(abs(pos-vec2(.30,.90)*res),.2)),-2.);\n    col += 3.*pow(prod(max(abs(pos-vec2(.10,.20)*res),.2)),-3.);\n    col += 1.*pow(prod(max(abs(pos-vec2(.70,.60)*res),.2)),-1.5);\n    col += 2.*pow(prod(max(abs(pos-vec2(.90,.20)*res),.2)),-1.8);\n    col += 1.*pow(prod(max(abs(pos-vec2(.50,.70)*res),.2)),-2.);\n    col += .2*pow(prod(max(abs(pos-vec2(.73,.25)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.16,.59)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.60,.75)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.24,.71)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.38,.68)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.28,.18)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.85,.53)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.95,.85)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.85,.05)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.60,.22)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.68,.92)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.20,.05)*res),.2)),-1.2);\n    col += .2*pow(prod(max(abs(pos-vec2(.33,.35)*res),.2)),-1.2);\n\n    // Rainbow\n    //vec3 col = 0.5 + 0.5*cos(0.*time+uv.y*16.+.75*cos(tau*(uv.x-.5+time)*freq)+vec3(0,2,4));\n    vec3 v = clamp((\n        (uv.y-.5)*6.\n        - cos(tau*(2.*uv.x-.5+time)*freq)/10.\n        - vec3(1,0,-1)*.23\n    ), -.5, .5);\n\n    vec3 rainbow = .5+.5*cos(tau*v);\n    //vec3 rainbow = saturate(2.-abs(6.*(fract(v+.5)-.5)));\n    rainbow *= step(-.45, -uv.x);\n    //col = mix(col, rainbow, saturate(sum(rainbow)));\n    col += rainbow;\n\n    // Nyan cat\n    float frame = mod(floor(time*freq*nFrames), nFrames);\n    vec2 center = res/2. + vec2(0, scale*sin(tau*(freq*time)));\n    vec2 coord = clamp((pix - center) / scale + fSize/2., vec2(0), fSize);\n    vec4 nyan = texture(iChannel0, (coord + vec2(frame,0)*fSize)/imSize);\n    col = mix(col, nyan.rgb, nyan.a);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float bps = 8.0*SPEED;\nconst float dt = 1.0/bps;\nconst float vol = .1;\n\nint[] music = int[] (\n    96,97,99,0,104,0,96,97,99,104,106,108,106,103,104,0,\n    99,0,96,97,99,0,104,0,106,103,104,106,109,108,109,106,\n    //84,85,87,0,92,0,84,85,87,92,94,96,94,91,92,0,\n    //87,0,84,85,87,0,92,0,94,91,92,94,97,96,97,94,\n\n    87,0,89,0,83,84,0,80,83,82,80,0,80,0,82,0,\n    83,0,83,82,80,82,84,87,89,84,87,82,84,80,82,80,\n    84,0,87,0,89,84,87,82,84,80,82,84,83,82,80,82,\n    83,0,80,82,84,87,82,84,82,80,82,0,80,0,82,0,\n\n    87,0,89,0,83,84,0,80,83,82,80,0,80,0,82,0,\n    83,0,83,82,80,82,84,87,89,84,87,82,84,80,82,80,\n    84,0,87,0,89,84,87,82,84,80,82,84,83,82,80,82,\n    83,0,80,82,84,87,82,84,82,80,82,0,80,0,80,0,\n\n    80,0,75,77,80,0,75,77,80,82,84,80,85,84,85,87,\n    80,0,80,0,75,77,80,75,85,84,82,80,73,72,73,75,\n    80,0,75,77,80,0,75,77,80,80,82,84,80,75,77,75,\n    80,0,80,79,80,75,77,80,85,84,85,87,80,0,79,0,\n\n    80,0,75,77,80,0,75,77,80,82,84,80,85,84,85,87,\n    80,0,80,0,75,77,80,75,85,84,82,80,73,72,73,75,\n    80,0,75,77,80,0,75,77,80,80,82,84,80,75,77,75,\n    80,0,80,79,80,75,77,80,85,84,85,87,80,0,82,0\n);\n\nint[200] harm = int[](\n     29,  31,  33,  35,  36,  41,  66,  70,  72,  73,  74,  75,  76,  77,  78,  79,\n     80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93, 154, 155,\n    156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172,\n    173, 174, 176, 208, 209, 210, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242,\n    243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 330, 331, 332,\n    333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n    350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 373, 374, 381, 382, 389, 414,\n    415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 489, 490, 491, 492, 493,\n    494, 495, 496, 497, 498, 499, 500, 505, 506, 576, 577, 578, 579, 750, 834, 835,\n    858, 859, 868, 869, 873, 874, 876, 877, 882, 883, 885, 886, 898, 901, 902, 904,\n    905, 906, 907, 908, 909, 910, 916, 917, 918, 919, 924, 925, 927, 929, 930, 931,\n    933, 934, 938, 941, 942, 943, 946, 952, 955, 961, 979, 982, 983, 985, 986, 988,\n    989, 990, 991, 992, 994, 995, 998, 999);\n\nfloat[200] amp = float[](\n    .0054, .0053, .0048, .0048, .0051, .0043, .0048, .0068, .0094, .0099, .0120, .0248,\n    .0284, .0484, .0583, .0717, .0698, .0883, .1567, .1368, .1893, .1194, .0935, .0556,\n    .0229, .0257, .0129, .0068, .0065, .0058, .0040, .0052, .0079, .0106, .0140, .0158,\n    .0224, .0273, .0320, .0319, .0386, .0701, .1055, .1171, .0570, .0254, .0185, .0098,\n    .0073, .0051, .0070, .0056, .0041, .0051, .0047, .0049, .0051, .0046, .0058, .0067,\n    .0065, .0056, .0073, .0067, .0071, .0067, .0064, .0056, .0101, .0157, .0241, .0257,\n    .0196, .0057, .0102, .0079, .0049, .0065, .0164, .0190, .0237, .0229, .0120, .0117,\n    .0110, .0054, .0044, .0046, .0089, .0119, .0148, .0157, .0122, .0120, .0095, .0073,\n    .0084, .0083, .0073, .0076, .0075, .0062, .0048, .0049, .0046, .0044, .0042, .0053,\n    .0045, .0046, .0040, .0079, .0124, .0138, .0118, .0107, .0123, .0129, .0112, .0101,\n    .0091, .0070, .0051, .0061, .0070, .0063, .0056, .0058, .0075, .0083, .0087, .0082,\n    .0075, .0061, .0052, .0048, .0056, .0043, .0046, .0046, .0041, .0044, .0045, .0044,\n    .0046, .0063, .0066, .0051, .0057, .0043, .0050, .0044, .0054, .0044, .0048, .0054,\n    .0057, .0051, .0044, .0045, .0069, .0052, .0041, .0064, .0060, .0045, .0072, .0110,\n    .0098, .0059, .0046, .0058, .0072, .0041, .0042, .0042, .0049, .0050, .0044, .0043,\n    .0079, .0056, .0051, .0059, .0042, .0043, .0053, .0056, .0070, .0054, .0043, .0047,\n    .0064, .0042, .0055, .0050, .0044, .0047, .0072, .0068);\n\nfloat[200] phi = float[](\n    5.083, 2.838, 5.939, 2.229, 0.913, 2.531, 1.335, 1.414, 1.631, 1.358, 1.996, 2.108,\n    2.607, 3.098, 3.545, 4.217, 5.119, 6.073, 0.602, 3.072, 5.750, 3.481, 1.803, 0.068,\n    4.770, 2.809, 1.758, 0.244, 3.578, 1.953, 2.855, 3.875, 4.323, 5.210, 5.858, 0.374,\n    1.352, 2.322, 3.337, 4.664, 5.665, 0.654, 2.571, 4.896, 1.192, 3.216, 0.389, 5.254,\n    3.209, 2.240, 5.294, 5.746, 2.334, 5.634, 4.210, 5.185, 6.244, 0.280, 1.370, 2.589,\n    3.578, 4.613, 5.596, 0.624, 1.967, 3.147, 4.854, 5.947, 0.457, 2.239, 4.246, 0.304,\n    2.622, 4.518, 5.889, 1.786, 1.188, 6.181, 1.938, 4.672, 0.628, 3.634, 0.164, 3.400,\n    1.113, 5.215, 4.048, 2.976, 1.889, 0.295, 4.912, 2.887, 0.990, 5.775, 3.979, 2.549,\n    0.871, 5.342, 3.768, 1.974, 6.184, 4.204, 2.015, 5.695, 3.894, 2.080, 4.111, 1.929,\n    3.020, 0.920, 3.918, 2.103, 4.850, 1.574, 5.020, 2.636, 0.092, 3.698, 1.184, 5.024,\n    2.490, 6.058, 3.376, 2.351, 5.153, 1.672, 4.430, 0.749, 3.407, 6.066, 2.461, 5.134,\n    1.441, 4.083, 0.336, 3.873, 0.323, 4.750, 0.388, 2.393, 4.307, 0.340, 2.713, 5.021,\n    5.855, 1.878, 4.346, 0.068, 2.591, 4.702, 6.093, 2.426, 0.907, 2.534, 4.678, 0.174,\n    2.657, 1.302, 3.684, 6.121, 1.717, 3.743, 4.790, 0.270, 2.141, 3.895, 1.477, 4.095,\n    0.014, 1.882, 4.405, 0.532, 1.666, 3.104, 5.961, 3.687, 0.398, 2.794, 5.258, 1.147,\n    4.056, 0.603, 0.815, 5.533, 1.734, 3.084, 5.183, 4.983, 0.873, 3.043, 4.820, 1.743,\n    4.140, 5.918, 0.831, 2.577, 4.905, 0.658, 6.102, 1.998);\n\n/* This uses a fourier series to approximate the NYAN sound from a recorded sample.\nI computed the first 1000 harmonics of the sample, and then took the 200 harmonics with\nthe highest amplitudes, stored in the array `n`. I converted the corresponding coefficients\ninto amplitude-phase format in the `amp` and `phi` arrays. To reconstruct the signal I just\nsum up each harmonic. I divide the frequency by 2 to shift down an octave, and by 84 which\nis the fundamental harmonic of the sample.\n\n...Yes this is way too much effort for a meme.\n*/\nfloat nyan(float freq, float time)\n{\n    float res = 0.;\n    float x = time * freq / 2. / 84.;\n    if (x > 1.) return 0.;\n    for (int i=0; i < harm.length(); i++) {\n        res += amp[i]*cos(tau*float(harm[i])*x - phi[i]);\n    }\n    return res;\n}\n\nfloat beep(float freq, float time)\n{\n    return sin(tau*freq*time)*exp(-10.*time);\n}\n\nfloat midi2freq(int note)\n{\n    return note > 0 ? 440.0 * pow(2.0, float(note - 69) / 12.0) : 0.;\n}\n\nvec2 mainSound(int samp, float time)\n{\n    int n = int(time / dt);\n    float t = mod(time, dt);\n\n    float s = 0.;\n\n    for (int i=0; i < 3; i++) {\n        if (n-i < 0) break;\n        int ni = (n-i) % music.length();\n        float ti = t + float(i)*dt;\n        float f = midi2freq(music[ni]);\n        s += ni < 32 ? beep(f, ti) : nyan(f, ti);\n    }\n\n    return vol*vec2(s);\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"const float SPEED = 1.;\n\nconst float tau = 6.2831855;\n\n#define saturate(x) clamp(x, 0., 1.)\n\nfloat vmax(vec2 v) {\n    return max(v.x, v.y);\n}\nfloat vmax(vec3 v) {\n    return max(max(v.x, v.y), v.z);\n}\n\nfloat prod(vec2 v) {\n    return v.x * v.y;\n}\nfloat prod(vec3 v) {\n    return v.x * v.y * v.z;\n}\n\nfloat sum(vec2 v) {\n    return v.x + v.y;\n}\nfloat sum(vec3 v) {\n    return v.x + v.y + v.z;\n}\n","name":"Common","description":"","type":"common"}]}