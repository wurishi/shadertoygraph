{"ver":"0.1","info":{"id":"3sXBRn","date":"1587751014","viewed":117,"name":"HW_09_5_1 Global_Illumination","username":"hehehaha12138","description":"Global Illumination","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 bubbleMedian(in vec3[9] v)\n{\n    for(int i = 0; i < 8; i++)\n    {\n        for(int j = 0; j < 8; j++)\n        {\n            if(length(v[j]) > length(v[j + 1]))\n            {\n            \tvec3 tmp = v[j + 1];\n                v[j + 1] = v[j];\n                v[j] = v[j + 1];\n            }\n        }\n    }\n    \n    return v[0];\n}\n\n\nvec3 median(in vec2 uv)\n{\n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    n[0] = texture(iChannel0, uv - o.xz).rgb;  \n    n[1] = texture(iChannel0, uv - o.yz).rgb;\n    n[2] = texture(iChannel0, uv + o.xw).rgb;\n    n[3] = texture(iChannel0, uv - o.xy).rgb;\n    n[4] = texture(iChannel0, uv + o.xy).rgb;\n    n[5] = texture(iChannel0, uv - o.xw).rgb;\n    n[6] = texture(iChannel0, uv + o.yz).rgb;\n    n[7] = texture(iChannel0, uv + o.xz).rgb;     \n    n[8] = texture(iChannel0, uv).rgb;  \n    return bubbleMedian(n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy; \n    fragColor = vec4(median(uv), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SQUARE_PLANE 0\n#define CUBE 1\n#define POINT_LIGHT 0\n#define FOCAL_LENGTH 8.0\n#define FOCAL_RANGE 20.0\nconst float AO_DIST = 0.2;\nconst float FIVETAP_K = 2.0;\n#define Pi 3.141569\n\n// Global Illumination\n#define DEPTH 5;\n\nconst float FOVY = 3.141569 * 0.25;\nconst int RAY_STEPS = 256;\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // Assign every object in our scene a unique ID int\n    vec3 normal;\n};\n    \nstruct Transform\n{\n\tvec3 trans;\n    vec3 scale;\n    vec3 rotate;\n};\n\nstruct Primitive\n{\n\tint id;\n    Transform transform;\n    vec3 matColor;\n    int primitiveId;\n};\n    \nstruct Light\n{\n\tint id;\n    int typeId;\n    float intensity;\n    Transform transform;\n    vec3 lightColor;\n};\n   \n\n\nvec3 squareToDiskConcentric(vec2 sampleP)\n{\n    //TODO\n    float a = 2.0 * sampleP.x - 1.0;\n    float b = 2.0 * sampleP.y - 1.0;\n    float fi, r, u, v;\n\n    if(a > -b)\n    {\n        if(a > b)\n        {\n            // Region 1, |a| > |b|\n            r = a;\n            fi = (Pi / 4.0) * b / a;\n        }\n        else\n        {\n            // Region 2, |b| > |a|\n            r = b;\n            fi = (Pi / 4.0) * (2.0 - (a / b));\n        }\n    }\n    else\n    {\n        if(a < b)\n        {\n            // Region 3, |a| >= |b|, a != 0\n            r = -a;\n            fi = (Pi / 4.0) * (4.0 + b / a);\n        }\n        else\n        {\n            // Region 4, |a| <= |b|\n            r = -b;\n            if(b != 0.0)\n            {\n                fi = (Pi / 4.0) * (6.0 - (a / b));\n            }\n            else\n            {\n                fi = 0.0;\n            }\n        }\n    }\n    u = r * cos(fi);\n    v = r * sin(fi);\n    return vec3(u, v, 0.0f);\n}\n\nvec3 squareToHemisphereCosine(vec2 sampleP)\n{\n    //TODO\n    vec3 diskSample = squareToDiskConcentric(sampleP);\n    float z = sqrt(1.0 - pow(diskSample.x, 2.0) - pow(diskSample.y, 2.0));\n    return vec3(diskSample.x, diskSample.y, z);\n}\n\nfloat squareToHemisphereCosinePDF(vec3 sampleP)\n{\n    //TODO\n    float length=sqrt(pow(sampleP.x, 2.0f) + pow(sampleP.y, 2.0f) + pow(sampleP.z, 2.0f));\n    if(length != 0.0)\n    {\n        float cosine = abs(sampleP.z) / length;\n        return cosine / Pi;\n    }\n    else\n    {\n        return 0.0;\n    }\n\n}\n    \nPrimitive floorSquare;\nPrimitive redWall;\nPrimitive greenWall;\nPrimitive backWall;\nPrimitive ceilingWall;\nPrimitive shortCube;\nPrimitive longCube;\nLight pointLight;\nPrimitive primitives[7];\nLight lights[1];\n\nvoid initializeCornelBox()\n{\n    \n    \n    // Primitive initialization\n\tfloorSquare.transform.trans = vec3(0, -2.5, 0);\n\tfloorSquare.transform.rotate = vec3(-90, 0, 0);\n\tfloorSquare.transform.scale = vec3(10, 10, 1);\n    floorSquare.primitiveId = SQUARE_PLANE;\n    floorSquare.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[0] = floorSquare;\n    \n    redWall.transform.trans = vec3(5, 2.5, 0);\n\tredWall.transform.rotate = vec3(0, -90, 0);\n\tredWall.transform.scale = vec3(10, 10, 1);\n    redWall.primitiveId = SQUARE_PLANE;\n    redWall.matColor = vec3(0.63, 0.065, 0.05);\n    primitives[1] = redWall;\n    \n    greenWall.transform.trans = vec3(-5, 2.5, 0);\n    greenWall.transform.rotate = vec3(0, 90, 0);\n\tgreenWall.transform.scale = vec3(10, 10, 1);\n    greenWall.primitiveId = SQUARE_PLANE;\n    greenWall.matColor = vec3(0.14, 0.45, 0.091);\n    primitives[2] = greenWall;\n    \n    backWall.transform.trans = vec3(0, 2.5, 5);\n    backWall.transform.rotate = vec3(0, 180,  0);\n\tbackWall.transform.scale = vec3(10, 10, 1);\n    backWall.primitiveId = SQUARE_PLANE;\n    backWall.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[3] = backWall;\n    \n    ceilingWall.transform.trans = vec3(0, 7.5, 0);\n    ceilingWall.transform.rotate = vec3(90, 0, 0);\n\tceilingWall.transform.scale = vec3(10, 10, 1);\n    ceilingWall.primitiveId = SQUARE_PLANE;\n    ceilingWall.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[4] = ceilingWall;\n    \n    shortCube.transform.trans = vec3(-2, -1, 0.75);\n    shortCube.transform.rotate = vec3(0, -17.5, 0);\n\tshortCube.transform.scale = vec3(3, 3, 3);\n    shortCube.primitiveId = CUBE;\n    shortCube.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[5] = shortCube;\n    \n    longCube.transform.trans = vec3(2, 0, 3);\n    longCube.transform.rotate = vec3(0, 27.5, 0);\n\tlongCube.transform.scale = vec3(3, 6, 3);\n    longCube.primitiveId = CUBE;\n    longCube.matColor = vec3(0.85, 0.81, 0.78);\n    primitives[6] = longCube;\n    \n \n    \n    // Light initlaization\n    pointLight.id = 0;\n    pointLight.typeId = POINT_LIGHT;\n    pointLight.intensity = 2.0;\n    pointLight.lightColor = vec3(17, 12, 4);\n    pointLight.transform.trans = vec3(0, 7.0, -2.0);\n    pointLight.transform.rotate = vec3(90, 0, 0);\n    pointLight.transform.scale = vec3(3, 3, 1);\n    \n    return;\n}\n\n// SDF of a sphere\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nfloat random1( vec3 p ) {\n    return fract(sin((dot(p, vec3(127.1,\n                                  311.7,\n                                  191.999)))) *         \n                 43758.5453);\n}\n\nvec2 random2(vec2 p)\n{\n\treturn fract(sin(vec2(dot(p, vec2(127.1, 311.7)),\n                          dot(p, vec2(269.5, 183.3))))\n                          * 42121.32);\n}\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\n\nfloat WorleyNoise3D(vec3 p) {\n    // Tile the space\n    vec3 pointInt = floor(p);\n    vec3 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int z = -1; z <= 1; z++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            for(int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(float(x), float(y), float(z));\n\n                // Random point inside current neighboring cell\n                vec3 point = random3(pointInt + neighbor);\n\n                // Animate the point\n                point = 0.5 + 0.5 * sin(iTime * 0.01 + 6.2831 * point); // 0 to 1 range\n\n                // Compute the distance b/t the point and the fragment\n                // Store the min dist thus far\n                vec3 diff = neighbor + point - pointFract;\n                float dist = length(diff);\n                minDist = min(minDist, dist);\n            }\n        }\n    }\n    return minDist;\n}\n\nvoid CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {\n    if (abs(v1.x) > abs(v1.y))\n            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);\n        else\n            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);\n        v3 = cross(v1, v2);\n}\n\nvec3 WorleyTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( WorleyNoise3D(pos + epsilon.yxx) - WorleyNoise3D(pos - epsilon.yxx),\n                            WorleyNoise3D(pos + epsilon.xyx) - WorleyNoise3D(pos - epsilon.xyx),\n                            WorleyNoise3D(pos + epsilon.xxy) - WorleyNoise3D(pos - epsilon.xxy)));\n\n}\n\n    \n    \nmat4 transformMatrix(Transform t)\n{\n\tmat4 translate = mat4(      1.0,       0.0,       0.0, 0.0,\n                                0.0,       1.0,       0.0, 0.0,\n                                0.0,       0.0,       1.0, 0.0,\n                                t.trans.x,       t.trans.y,       t.trans.z, 1.0);\n    \n    float xRot = radians(t.rotate.x);\n    float yRot = radians(t.rotate.y);\n    float zRot = radians(t.rotate.z);\n    \n    mat4 rotateX = mat4(1.0,        0.0,       0.0, 0.0,\n                        0.0,  cos(xRot), sin(xRot), 0.0,\n                        0.0, -sin(xRot), cos(xRot), 0.0,\n                        0.0,        0.0,       0.0, 1.0);\n    \n    mat4 rotateY = mat4(cos(yRot), 0.0, -sin(yRot), 0.0,\n                              0.0, 1.0,        0.0, 0.0,\n                        sin(yRot), 0.0,  cos(yRot), 0.0,\n                              0.0, 0.0,        0.0, 1.0);\n    \n    mat4 rotateZ = mat4( cos(zRot), sin(zRot), 0.0, 0.0,\n                        -sin(zRot), cos(zRot), 0.0, 0.0,\n                               0.0,       0.0, 1.0, 0.0,\n                               0.0,       0.0, 0.0, 1.0);\n    \n    mat4 scale = mat4(      t.scale.x,       0.0,       0.0, 0.0,\n                            0.0,       t.scale.y,       0.0, 0.0,\n                            0.0,       0.0,       t.scale.z, 0.0,\n                            0.0,       0.0,       0.0, 1.0);\n    \n    return translate * rotateX * rotateY * rotateZ * scale;\n}\n\nmat4 rotMat(Transform t)\n{\n\tfloat xRot = radians(t.rotate.x);\n    float yRot = radians(t.rotate.y);\n    float zRot = radians(t.rotate.z);\n    \n    mat4 rotateX = mat4(1.0,        0.0,       0.0, 0.0,\n                        0.0,  cos(xRot), sin(xRot), 0.0,\n                        0.0, -sin(xRot), cos(xRot), 0.0,\n                        0.0,        0.0,       0.0, 1.0);\n    \n    mat4 rotateY = mat4(cos(yRot), 0.0, -sin(yRot), 0.0,\n                              0.0, 1.0,        0.0, 0.0,\n                        sin(yRot), 0.0,  cos(yRot), 0.0,\n                              0.0, 0.0,        0.0, 1.0);\n    \n    mat4 rotateZ = mat4( cos(zRot), sin(zRot), 0.0, 0.0,\n                        -sin(zRot), cos(zRot), 0.0, 0.0,\n                               0.0,       0.0, 1.0, 0.0,\n                               0.0,       0.0, 0.0, 1.0);\n    \n    return rotateX * rotateY * rotateZ;\n}\n\nmat3 TangentToWorld(vec3 nor) {\n\tvec3 tangent, bitangent;\n    CoordinateSystem(nor, tangent, bitangent);\n    return mat3(tangent, bitangent, nor);\n}\n\n// Cube SDF\nfloat cube(vec3 p, Transform cubeTrans)\n{\n\tvec3 q = vec3(abs(inverse(transformMatrix(cubeTrans)) * vec4(p, 1.0))) - vec3(0.5);\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n// SquarePlane SDF\nfloat squarePlane(vec3 p, Transform squareTrans)\n{\n    mat4 squareMat = transformMatrix(squareTrans);\n    vec3 planeNormal = vec3(0, 0, 1);\n    vec3 actualPoint = vec3(inverse(squareMat) * vec4(p, 1.0f));    \n\treturn abs(dot(actualPoint, planeNormal));\n}\n\nfloat squarePlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p, n.xyz) + n.w;\n}\n\n\nbool isOnPlane(vec3 p, Transform squareTrans)\n{\n    mat4 squareMat = transformMatrix(squareTrans);\n\tvec3 ap = vec3(inverse(squareMat) * vec4(p, 1.0));\n    if(ap.x < 0.5f && ap.x > -0.5f && ap.y < 0.5f && ap.y > -0.5f)\n    {\n    \treturn true;\n    }\n    else\n    {\n    \treturn false;\n    }\n}\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    float minT = 10000.0;\n    obj = -1;\n    for(int i = 0; i < primitives.length(); i = i + 1)\n    {\n        if(primitives[i].primitiveId == SQUARE_PLANE)\n        {\n            vec4 curNor = normalize(rotMat(primitives[i].transform) * vec4(0.0, 0.0, 1.0, 0.0));\n            float maxOffset = max(max(abs(primitives[i].transform.trans.x), \n                                      abs(primitives[i].transform.trans.y)), \n                                      abs(primitives[i].transform.trans.z));\n            curNor.w = maxOffset;\n        \tt = squarePlane(pos, curNor);\n        }\n        else if(primitives[i].primitiveId == CUBE)\n        {\n        \tt = cube(pos, primitives[i].transform);\n        }\n        \n       \n        \n        if(t < minT)\n        {\n        \tminT = t;\n            obj = i;\n        }\n    }\n   \n    t = minT;\n}\n\n/*void sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = cube(pos, longCube.transform);\n    obj = CUBE_1_ID;\n    \n    float t2;\n    if((t2 = SPHERE_2_SDF) < t) {\n        t = t2;\n        obj = SPHERE_2_ID;\n    }\n}*/\n\nfloat sceneMap3D(vec3 pos)\n{\n    float minT = 10000.0;\n    float t = minT;\n    for(int i = 0; i < primitives.length(); i++)\n    {\n        if(primitives[i].primitiveId == SQUARE_PLANE)\n        {\n        \tvec4 curNor = normalize(rotMat(primitives[i].transform) * vec4(0.0, 0.0, 1.0, 0.0));\n            float maxOffset = max(max(abs(primitives[i].transform.trans.x), \n                                      abs(primitives[i].transform.trans.y)), \n                                      abs(primitives[i].transform.trans.z));\n            curNor.w = maxOffset;\n        \tt = squarePlane(pos, curNor);\n        }\n        else if(primitives[i].primitiveId == CUBE)\n        {\n        \tt = cube(pos, primitives[i].transform);\n        }\n        \n       \n        if(t < minT)\n        {\n        \tminT = t;\n        }\n    }\n    t = minT;\n    return t;\n}\n\n\n/*float sceneMap3D(vec3 pos) {\n    float t = SPHERE_1_SDF;\n    \n    float t2;\n    if((t2 = SPHERE_2_SDF) < t) {\n        t = t2;\n    }\n    \n    return t;\n}*/\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(primitives[hitObj].primitiveId == CUBE)\n        {\n        \tif(abs(m) < 0.01) \n                return;\n        }\n        else if(primitives[hitObj].primitiveId == SQUARE_PLANE)\n        {\n            if(abs(m) < 0.01) \n            {\n            \treturn;\n            }\n        \t\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvoid computeTBN(vec3 n, out vec3 t, out vec3 b)\n{\n\tif (abs(n.x) > abs(n.y))\n            t = vec3(-n.z, 0, n.x) / sqrt(n.x * n.x + n.z * n.z);\n        else\n            t = vec3(0, n.z, -n.y) / sqrt(n.y * n.y + n.z * n.z);\n        b = cross(n, t);\n}\n\nconst vec3 a = vec3(0.5, 0.5, 0.5);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(2.0, 1.0, 1.0);\nconst vec3 d = vec3(0.5, 0.2, 0.25);\n\nvec3 colorPalette(float t) {\n    return a + b * cos(6.28 * (t * c + d));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {\n    float lambert = max(0.0, dot(lightVec, n));\n    if(hitObj == -1)\n        return vec3(0.0, 0.0, 0.0);\n    vec3 color = primitives[hitObj].matColor * lambert * vec3(1.0, 1.0, 1.0);\n    return color;\n    \n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    isect = isect + 0.01 * nor;\n    //vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 lightDir = normalize(pointLight.transform.trans - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    \n    vec3 normalAsColor = 0.5 * (nor + vec3(1.0, 1.0, 1.0));\n    \n    return Intersection(t, surfaceColor, isect, hitObj, nor);\n}\n\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F)); \n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvec3 globalIllumination(vec3 dir, vec3 eye)\n{\n\tvec3 finalColor = vec3(0.0);\n    int depth = -1;\n    vec3 wo = -dir;\n    vec3 rayDir = dir;\n    vec3 rayOri = eye;\n    vec3 throughPut = vec3(1.0);\n    int bouncing = 0;\n    \n    for(int i = 0; i < 5; i++)\n    {\n    \tIntersection isect = sdf3D(rayDir, rayOri);\n        if(isect.object != -1)\n        {\n            // Compute Direct Light\n            finalColor += throughPut * isect.color;\n\n            // Intersect an object\n            wo = -rayDir;\n            // Sample 100 directions\n\n            vec2 pointSample = random2(vec2(isect.p) + vec2(iTime)); \n            vec3 wi = squareToHemisphereCosine(pointSample);\n\n            if(wo.z < 0.0)\n            {\n                wi.z *= -1.0;\n            }\n\n            float pdf = squareToHemisphereCosinePDF(wi);\n            vec3 tangent = vec3(0.0);\n            vec3 biTangent = vec3(0.0);\n            vec3 sampledColor = primitives[isect.object].matColor / Pi;\n            computeTBN(isect.normal, tangent, biTangent);\n            wi = transpose(mat3(tangent, biTangent, isect.normal)) * wi;\n\n            if(pdf == 0.0)\n            {\n                //break;\n            }\n\n            vec3 curThroughPut = sampledColor * abs(dot(wi, isect.normal)) / pdf;\n            throughPut *= curThroughPut;\n\n            float throughPutMax = max(throughPut.x, max(throughPut.y, throughPut.z));\n\n            if(bouncing > 3)\n            {\n                float q = max(0.05, 1.0 - throughPutMax);\n                if(random1(vec3(iTime)) < q)\n                {\n                    //break;\n                }\n                throughPut /= 1.0 - q;\n            }\n\n            rayDir = wi;\n            rayOri = isect.p;\n\n            bouncing++;\n            depth--;\n        }\n    }\n    \n    \n   \n    return finalColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initializeCornelBox();\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convert to range [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0, 4, -15);\n    vec3 ref = vec3(0, 2, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    int sampleNum = 20;\n    vec3 finalColor = vec3(0.0);\n    \n    for(int i = 0; i < sampleNum; i++)\n    {\n    \tfinalColor += globalIllumination(rayDir, eye);\n    }\n    \n    finalColor /= float(sampleNum);\n    \n    //Intersection isect = sdf3D(rayDir, eye);\n    \n    float focalLength = (sin(iTime) *  FOCAL_RANGE +  FOCAL_RANGE) / 2.0;\n\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(0.5 * (rayDir + vec3(1., 1., 1.)), 1.0);\n    fragColor = vec4(finalColor, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}