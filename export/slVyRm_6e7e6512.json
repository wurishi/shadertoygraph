{"ver":"0.1","info":{"id":"slVyRm","date":"1661195876","viewed":89,"name":"Simple moving circle","username":"randomOrder","description":"I did not just want to draw a circle. I wanted it to move and I accidentally discovered that most smooth movements of accelerating and decelerating elements in games are just made with a simple sinus function over the time since start.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["firstattemptatsecondarytitle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    float radius = 0.3+0.2*sin(iTime);\n    float center_x = 0.5*aspect + radius*sin(2.0*iTime);\n    float center_y = 0.5 + radius*sin(iTime);\n    float delta_x = center_x-uv.x;\n    float delta_y = center_y-uv.y;\n    if(delta_x*delta_x + delta_y*delta_y < radius) {    \n        fragColor = vec4(uv.x, uv.y, 0.0,1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 1.0-uv.y,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}