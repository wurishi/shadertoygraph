{"ver":"0.1","info":{"id":"fdBSWd","date":"1621242642","viewed":127,"name":"Strange Tree II ","username":"fancyzero","description":"An improved version of my previous work: \nhttps://www.shadertoy.com/view/7djSDV\n\n","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["procedural","tree","grow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n   \n\n}     ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    TreeStyle ts = treeStyles[getCurrentStyle(iFrame)];\n    fragColor = vec4(0.0,0.0,0.0,0.0);\n    vec2 uv = fragCoord / iResolution.y;\n\n    \n    int Frame = getFrame(iFrame,getCurrentStyle(iFrame));\n    if ( Frame == 0)\n    {\n        if( length(fragCoord - iResolution.xy * ts.startPos) <= ts.InitialBranches )\n        {\n            fragColor = vec4(fragCoord,normalize(vec2(-fragCoord.x + iResolution.x/2.,iResolution.y/10.)));\n        }\n        else\n        {\n            fragColor = vec4(0.,0.,0.,0.);\n        }\n\n    }\n    else if ( Frame < ts.TreeGrowFrames)\n    {\n    \n        if (length(fragCoord - ts.startPos*iResolution.xy) > maxConvRadius(ts,Frame))\n        {\n            fragColor =  texelFetch( iChannel0, ivec2(fragCoord), 0);\n            return;    \n        }    \n            int count = 0;\n        int range = ts.BrancSpacing;\n        for ( int i = -range; i <=range; i++)\n        {\n            for (int j = -range; j <=range; j++)\n            {\n                vec4 data = texelFetch( iChannel0, ivec2(fragCoord)+ivec2(i,j), 0);\n                if ( length(data.zw) > 0. )\n                    count ++;\n            }\n        }\n        \n        for ( int i = -2; i <=2; i++)\n        {\n            for (int j = -2; j <=2; j++)\n            {\n                bool f = true;\n                vec4 dataOld = texelFetch( iChannel0, ivec2(fragCoord)+ivec2(i,j), 0);\n                vec4 dataNew = dataOld;\n                dataNew.xy += dataNew.zw*ts.speed;\n                \n                if ( length(dataOld.zw) > 0. && int(fragCoord.x) == int(dataNew.x) && int(fragCoord.y) == int(dataNew.y))\n                {\n                    dataNew.zw = normalize(dataNew.zw + randomDir2(fragCoord, iTime+17.0)*ts.TreeSpread);    \n                    fragColor = dataNew;\n                    f = false;\n                }\n                \n                float bp = ts.BrancingProbability ;\n                \n                if (Frame > ts.TreeTipFrames)\n                {\n                    bp = ts.BrancingProbabilityAtTip;\n                    count = 0;\n                    f= true;\n                 }\n                if ( f && count <=ts.MinBrancingCondition && i == 0 && j == 0 && length(dataOld.zw) >0. && gold_noise(fragCoord,iTime+4.3) > bp )\n                {\n                    fragColor = dataOld;\n                    \n                }\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    TreeStyle ts = treeStyles[getCurrentStyle(iFrame)];\n    int Frame = getFrame(iFrame,getCurrentStyle(iFrame));\n    if ( Frame > ts.TreeGrowFrames)\n    {\n        fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n        return;\n    }\n    if (Frame == 0)\n    {\n        fragColor = mix(ts.BgColor1,ts.BgColor2, fragCoord.y/iResolution.y);\n        return;\n    }\n    \n    if (length(fragCoord - ts.startPos*iResolution.xy) > maxConvRadius(ts,Frame))\n    {\n    fragColor = mix(ts.BgColor1,ts.BgColor2, fragCoord.y/iResolution.y);\n    return;    \n    }\n    \n    int kernelSize = int( mix( ts.TreeThickness, ts.TreeThicknessEnd, float(Frame)/float(ts.TreeGrowFrames)));\n    if (kernelSize >50)\n        kernelSize =  50;\n        \n    if (kernelSize <2)\n        kernelSize = 2;\n\n    \n    \n        bool found = false;\n        float foundDist = 10000.;\n        vec2 angle ;\n\n        for ( int i = -kernelSize; i <kernelSize; i++)\n        {\n            for (int j = -kernelSize; j <kernelSize; j++)\n            {\n                if (j*j + i*i < kernelSize*kernelSize )\n                {\n                    if (length(texture(iChannel0, (fragCoord+vec2(float(i),float(j)))/iResolution.xy).zw ) > 0.)\n                    {\n                        found = true;\n                        float dist = length(vec2(float(i),float(j)));\n                        if ( dist < foundDist )\n                        {\n                            foundDist = dist;\n                            angle = normalize(vec2(float(i),float(j)));\n                        }\n\n                    }\n                }\n            }\n        }\n        \n        if (found)\n        {\n            float a = 0.5*(dot(angle, normalize(vec2(1.,0.))) + 1.)*smoothstep(0.,float(kernelSize),foundDist);\n            a = clamp(a,0.,1.);\n            \n            vec4 darkColor = mix(ts.DarkColor1, ts.DarkColor2, float(Frame)/float(ts.TreeGrowFrames));\n            vec4 brightColor = mix(ts.BrightColor1, ts.BrightColor2, float(Frame)/float(ts.TreeGrowFrames));\n             \n            fragColor = mix(texture(iChannel1, fragCoord/iResolution.xy),mix(darkColor, brightColor,a), smoothstep(float(kernelSize),float(kernelSize)-2.,foundDist));\n        }\n        else\n        {\n            fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n        }\n \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nconst float PHI = 1.61803398874989484820459; // Î¦ = Golden Ratio \n\n\nstruct TreeStyle\n{\n    vec2 startPos;\n    float TreeThickness;\n    float TreeThicknessEnd ;\n    int TreeGrowFrames ;\n    float speed ;\n    float TreeSpread ;\n    int BrancSpacing ;\n    int MinBrancingCondition ;\n    float InitialBranches ;\n    float BrancingProbability ;\n    float BrancingProbabilityAtTip;\n    int TreeTipFrames;\n    vec4 DarkColor1 ;\n    vec4 DarkColor2 ;\n    vec4 BrightColor1;\n    vec4 BrightColor2;    \n    vec4 BgColor1 ;\n    vec4 BgColor2 ;\n};\n\n\n//There are three kinds of trees.\n//Try them out!\n\nTreeStyle treeStyles[5] = TreeStyle[5](\n\n\nTreeStyle(/*startPos */vec2(0.5,0.),\n/*TreeThickness */25.,\n/*TreeThicknessEnd */1.,\n/*TreeGrowFrames */8*60,\n/*speed */64.*0.016,\n/*TreeSpread */0.07,\n/*BrancSpacing */18,\n/*MinBrancingCondition */3,\n/*InitialBranches */1.,\n/*BrancingProbability */0.8,\n/*BrancingProbabilityAtTip */0.8,\n/*TreeTipFrames */7*60,    \n/*DarkColor1 */vec4(0.314,0.149,0.149,1.),\n/*DarkColor2 */vec4(0.216,0.427,0.392,1.),\n/*BrightColor1 */vec4(0.627,0.780,0.831,1.),\n/*BrightColor2 */vec4(0.992,1.000,0.941,1.),   \n/*BgColor1 */vec4(0.271,0.251,0.271,0.1),\n/*BgColor2 */vec4(0.580,0.580,0.498,0.1)),\n\nTreeStyle(/*startPos = */vec2(0.5,0.),\n/*TreeThickness = */9.,\n/*TreeThicknessEnd */2.,\n/*TreeGrowFrames */8*60,\n/*speed */64.*0.016,\n/*TreeSpread */0.05,\n/*BrancSpacing */6,\n/*MinBrancingCondition */2,\n/*InitialBranches */10.,\n/*BrancingProbability */0.5,\n/*BrancingProbabilityAtTip */0.3,\n/*TreeTipFrames */7*60+30,\n/*DarkColor1 */vec4(0.337,0.275,0.141,1.),\n/*DarkColor2 */vec4(0.439,0.525,0.663,1.),\n/*BrightColor1 */vec4(0.843,0.596,0.925,1.),\n/*BrightColor2 */vec4(0.953,0.816,0.769,1.),    \n/*BgColor1 */vec4(0.204,0.235,0.224,0.1),\n/*BgColor2 */vec4(0.855,0.922,0.659,0.1)),\n\n\nTreeStyle(/*startPos */vec2(0.5,0.),\n/*TreeThickness */4.,\n/*TreeThicknessEnd */18.,\n/*TreeGrowFrames */8*60,\n/*speed */64.*0.016,\n/*TreeSpread */0.07,\n/*BrancSpacing */20,\n/*MinBrancingCondition */3,\n/*InitialBranches */1.,\n/*BrancingProbability */0.1,\n/*BrancingProbabilityAtTip */0.1,\n/*TreeTipFrames */8*60,      \n/*DarkColor1 */vec4(0.286,0.012,0.012,1.),\n/*DarkColor2 */vec4(0.820,1.000,0.722,1.),\n/*BrightColor1 */vec4(0.286,0.012,0.012,1.),\n/*BrightColor2 */vec4(0.820,1.000,0.722,1.),   \n/*BgColor1 */vec4(0.271,0.251,0.271,0.1),\n/*BgColor2 */vec4(0.580,0.580,0.498,0.1)),\n\nTreeStyle(/*startPos */vec2(0.5,0.),\n/*TreeThickness */50.,\n/*TreeThicknessEnd */2.,\n/*TreeGrowFrames */20*60,\n/*speed */32.*0.016,\n/*TreeSpread */0.03,\n/*BrancSpacing */7,\n/*MinBrancingCondition */2,\n/*InitialBranches */1.,\n/*BrancingProbability */0.3,\n/*BrancingProbabilityAtTip */0.3,\n/*TreeTipFrames */19*60,\n/*DarkColor1 */vec4(0.125,0.016,0.686,1.),\n/*DarkColor2 */vec4(0.333,0.133,0.427,1.),    \n/*BrightColor1 */vec4(0.761,0.918,0.180,1.),    \n/*BrightColor2 */vec4(0.831,0.894,0.608,1.),    \n/*BgColor1 */vec4(0.318,0.357,0.361,0.1),\n/*BgColor2 */vec4(0.671,0.749,0.729,0.1)),    \n\nTreeStyle(/*startPos */vec2(0.5,0.5),\n/*TreeThickness */1.,\n/*TreeThicknessEnd */1.,\n/*TreeGrowFrames */10*60,\n/*speed */64.*0.016,\n/*TreeSpread */0.2,\n/*BrancSpacing */50,\n/*MinBrancingCondition */1,\n/*InitialBranches */4.,\n/*BrancingProbability */0.8,\n/*BrancingProbabilityAtTip */0.8,\n/*TreeTipFrames */15*60,      \n/*DarkColor1 */vec4(0.278,0.043,0.043,1.),\n/*DarkColor2 */vec4(0.769,0.722,0.510,1.),\n/*BrightColor1 */vec4(0.345,0.216,0.404,1.),\n/*BrightColor2 */vec4(0.996,0.988,0.784,1.),   \n/*BgColor1 */vec4(0.204,0.212,0.294,0.1),\n/*BgColor2 */vec4(0.310,0.490,0.631,0.1))\n\n\n  );\n\nint getCurrentStyle(int frame)\n{\n    int totalFrames = 0;\n    for ( int i=0; i < 5; i++ )\n    {\n        totalFrames += treeStyles[i].TreeGrowFrames;\n        totalFrames += 3*60;\n    }\n    \n    frame = frame % totalFrames;\n    int f = 0;\n    while ( frame > treeStyles[f].TreeGrowFrames + 3*60-1)\n    {\n        frame -= treeStyles[f].TreeGrowFrames+3*60;\n        f++;\n    }\n    return f;\n}\n\nint getFrame( int frame, int currentStyle)\n{\n    int totalFrames = 0;\n    for ( int i=0; i < 5; i++ )\n    {\n        totalFrames += treeStyles[i].TreeGrowFrames;\n        totalFrames += 3*60;\n    }\n    frame = frame % totalFrames;\n    int frameOffset = 0;\n    for ( int i=0; i < currentStyle; i++ )\n    {\n        frameOffset += treeStyles[i].TreeGrowFrames + 3*60;\n    }\n    return frame - frameOffset;\n}\n\nfloat maxConvRadius(TreeStyle ts, int frame)\n{\n    \n    return ts.speed * float(frame+1)+max(ts.TreeThickness,float(ts.BrancSpacing));\n}\n\n\nfloat gold_noise(in vec2 xy, in float seed)\n{\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\n\nvec2 randomDir2(vec2 uv, float seed )\n{\n    float x = gold_noise(uv, seed+1.0);\n    x = x*2.;\n    x = x*3.1415926-3.1415926;\n    return vec2(sin(x), cos(x));\n}\n","name":"Common","description":"","type":"common"}]}