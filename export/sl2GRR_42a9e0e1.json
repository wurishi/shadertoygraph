{"ver":"0.1","info":{"id":"sl2GRR","date":"1623319977","viewed":66,"name":"Triangle Fractal","username":"Buunuu","description":"The Chaos Game from Numberphiles video.\n\nhttps://www.youtube.com/watch?v=kbKtFN71Lfs","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","game","chaos","chaosgame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float col = texture(iChannel0,uv).x;\n\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define samples 100\n#define iterations 10\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv1 = fragCoord/iResolution.xy;\n    vec2 uv2 = (fragCoord-0.5*iResolution.xy)/iResolution.y+0.5;;\n    vec2 points[3];\n    vec2 previousPos;\n    vec2 nextPos;\n    float c = texture(iChannel0,uv1).x*0.98;\n    \n    if(iFrame == 1){ previousPos = vec2(0.0,0.0); }\n    \n    points[0] = vec2(0.1,0.1);\n    points[1] = vec2(0.5,0.9);\n    points[2] = vec2(0.9,0.1);\n    \n    for (int i = 0; i < samples; ++i)\n    {\n        for (int b = 0; b < iterations; ++b)\n        {\n            int rn = int(hash(vec2(iTime+float(i)*float(b)))*3.0);\n            previousPos += (points[rn]-previousPos)*0.5;\n        }\n        \n        c += step(length(uv2-previousPos),0.001);\n    }\n    \n    vec4 col = vec4(c,nextPos,1.0);\n    if (iMouse.z>0.01) { col = vec4(0.0); }\n\n    fragColor = vec4(col);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define rnd(x) fract( sin(x) / 9e-3    )\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(113.5,271.9)));\n\n\treturn fract(sin(p)*43758.5453123);\n}","name":"Common","description":"","type":"common"}]}