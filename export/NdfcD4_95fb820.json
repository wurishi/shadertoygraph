{"ver":"0.1","info":{"id":"NdfcD4","date":"1642068143","viewed":204,"name":"SpiralExtrudedTest","username":"Del","description":"just testing out a spiral sdf","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// playing with spiral sdf from sylvain69780 - https://www.shadertoy.com/view/stB3WK\n\n#define PI 3.14159265\n#define TAU 6.283185\n\n\n\n\n// arc length of archimedes spiral\n// would be nice to have the inverse of this one, to parametrize the spiral lenght.\n// instead of with numbers of turns but looking at Dr. Martin von Gagern seems not easy\nfloat arclengthK(float theta) {\n\tfloat d = theta * sqrt(abs(1.0 - theta*theta));\n\treturn 0.5 * (d + log(d+0.01))/TAU;\n}\n// quite well approximated with this one !\nfloat arclength(float turn) {\n\tfloat d = turn * turn;\n\treturn d * PI;\n}\n// may be used to have a constant length when changing the spriral ?\nfloat length2turn(float l) {\n    float d = l/PI;\n    return sqrt(d);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// spiral sdf from sylvain69780 - https://www.shadertoy.com/view/stB3WK\n// Derived it myself, any comment welcome\nfloat spiral(vec2 p,float size,float spacing, float turnStart,float turnEnd)\n{        \n    // below we are computing the polar coordinates of the point p\n    float r = length(p)/(size+spacing); // radius\n    float a = atan(p.y, p.x); // angle\n\tfloat turn = (r - a/TAU) ;\n    // return turn/10.;\n    // the code below manages round and atan discontinuities, very neat way\n    float count = round(turn);\n    // return count;\n    float d = 1e10;\n    float position = count + a/TAU - 1.0;\n    //  manages the case when the spiral is opened\n    if ( turnStart <= turnEnd || fract(position-turnStart) <= fract(turnEnd-turnStart) ) {\n        // distance in each turn\n        float e = clamp(position,turnStart,turnEnd);          \n        float stp = floor(position - e );\n        d = abs(turn - count + stp)*(size+spacing) -.5*size;\n    }\n     // start border \n    {\n        vec2 rad = vec2(cos(turnStart*TAU), sin(turnStart*TAU));\n        vec2 a = rad * ( (size+spacing) * (turnStart+.5) +spacing*.5 ) ;\n        vec2 b = rad * ( (size+spacing) * (turnStart+.5) +size + spacing*.5 );\n        float dStart = sdSegment(p,a,b) ;\n        d = d > 0.0 ? min(d,dStart) : max(d,-dStart);        \n    }\n     // end border\n    {\n        turnEnd++;\n        vec2 rad = vec2(cos(turnEnd*TAU), sin(turnEnd*TAU));\n        vec2 a = rad * ( (size+spacing) * (turnEnd+.5) +spacing*.5 ) ;\n        vec2 b = rad * ( (size+spacing) * (turnEnd+.5) +size + spacing*.5 );\n        float dEnd = sdSegment(p,a,b) ;\n        d = d > 0.0 ? min(d,dEnd) : max(d,-dEnd);        \n    }\n    // approximated UV calculations\n    //uv.x = arclength(position+1.0)*(size+spacing)/size-arclength(turnStart+1.0)*(size+spacing)/size;\n    //uv.y = (turn - count)*(size+spacing)/size;\n\treturn d;\n}\n\nfloat opExtrusion( in vec3 p, float dd, in float h )\n{\n    float d = dd;\n    vec2 w = vec2( d, abs(p.y) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat sdBoundingBox( vec3 p, vec3 b, float e)\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nmat2 rotate(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat map( in vec3 pos )\n{\n    //pos.zx *= rotate(iTime*0.5);\n    //pos.xy *= rotate(iTime*0.9);\n    // size, spacing, start turn, end turn\n    float startTurn = -0.5;\n    float endTurn = 1.;\n    float spacing = 0.5;\n    float d = spiral(pos.xz,0.5,spacing,startTurn,endTurn);\n    float height = 0.2;//hh2.x;//+(suv.x*0.015);\n    d = opExtrusion(pos,d,height);\n    return d-0.05;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 6.*cos(an), 4.0, 6.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 30.0;\n        float t = 0.0;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}