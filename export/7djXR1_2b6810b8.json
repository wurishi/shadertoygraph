{"ver":"0.1","info":{"id":"7djXR1","date":"1619687052","viewed":66,"name":"Curved gradient","username":"van_darkholme","description":"draw gradient between two curves","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["curvesgradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat fun(float x, float p) {\n    if(x <= 0.5){\n        return 0.5 * pow(2.0 * x, p);\n    } else {\n        return 1.0 - 0.5 * pow((2.0 * (1.0 - x)), p);    \n    }\n}\n\n\nfloat beiz(float u, float c1, float c2, float c3, float c4) {\n    return pow(1.0 - u, 3.0) * c1 + 3.0 * u * pow(1.0 - u, 2.0) * c2 + 3.0 * pow(u, 2.0) * (1.0 - u) * c3 + pow(u, 3.0) * c4;\n}\n\nfloat vBase(float y, float f1, float f2) { return (y - f2) / (f1 - f2); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(1.0,0.1,0.0);\n    vec3 col1 = vec3(0.0,.5,1.0);\n\n    vec3 bl = vec3(0.0);\n\n    float fu1 = beiz(uv.x, 0.83, 0.09, 0.13, .05);\n    float fu2 = beiz(uv.x, 0.99, 0.85, 0.88, .19);\n    \n    \n    fragColor = vec4(bl, 1.0);\n    \n\n    vec4 ret1 = vec4(vec3(0.0), 1.0);\n    vec4 ret2 = vec4(vec3(0.0), 1.0);\n\n    if(fu1 < uv.y && fu2 > uv.y) {\n        fragColor = vec4(col * vBase(uv.y, fu1, fu2), 1.0);\n    } else {\n        fragColor = vec4(col1, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}