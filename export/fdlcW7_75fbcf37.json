{"ver":"0.1","info":{"id":"fdlcW7","date":"1642426631","viewed":223,"name":"Circle Radius Image Effect","username":"Hultsborn10","description":"An image processing effect inspired by \"Atollens parkeringshus\" in Jonkoping, Sweden. Made in collaboration with @LilBensson","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["circles","imageprocessing","greyscale","jonkoping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//A collaboration project between Hultsborn10 and LilBensson\n//Created 2021-12-29\n//Inspired by the parking facility: \"Atollens parkeringshus\"\n//in the central of Jönköping, Sweden.\n//https://sverigesradio.se/artikel/5588289\n//\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV - scale coordinates from 0.0 to 1.0 both x and y \n    vec2 originalUV = fragCoord/iResolution.xy;\n    //(from top-left to bottom-right)\n    \n    vec3 col = vec3(0.0); //Create base color black.\n    //The number of circles (multiplied with the resolution ratio)\n    vec2 size = vec2(57.0) * vec2(iResolution.x / iResolution.y, 1.0);\n    //More circles horizontaly)\n    \n    //Create coordinates to use in the picture or video\n    vec2 gd = floor(originalUV * size) / size;\n    //By using the floor function here many adjacent pixels will get\n    //the same coordinate for the picture or video.\n    //Imagine rectangles of pixel that will look at one common \n    //coordinate in the picture of video.\n    \n    //By using the fract function here we can get all the \n    //small rectangles again with something\n    //that resembles a new \"mini\"-coordinate system within\n    //each rectangle. Spanning -0.5 to 0.5 in x and y direction\n    vec2 st = fract(originalUV * size) - 0.5;\n    //st vill contain a x and a y value within that \"mini\"-coordinate system\n    \n    //Texture\n    //Read the rgb value of the texture at gd coordinate\n    vec3 texCol = texture(iChannel0, gd).rgb;\n    //Let brightness be the average value of rgb.\n    //This will create a kind of grayscale value.\n    float brightness = (texCol.r + texCol.g + texCol.b) / 3.0;\n    \n    // Circles\n    //Calculate the distance from st to the origin of the \n    //mini-coordinate system (range 0.0 to 0.707).\n    //If st is less than 0.5 * brightness then color white, else color black.\n    col.xyz = vec3(length(st) <= 0.5 * brightness ? 1.0 : 0.0);\n    \n    //Using smoothstep to create rounder circles\n    col.xyz = vec3(smoothstep(0.2,-0.2,length(st)-0.5*brightness));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}