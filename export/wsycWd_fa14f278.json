{"ver":"0.1","info":{"id":"wsycWd","date":"1604541932","viewed":259,"name":"jelly marching","username":"henrmota","description":"jelly","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["jelly"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS  0.01\n#define MAX  10.\n#define STEPS 10\n\nfloat map(vec3 p) {\n    vec4 s = vec4(0, 1, 2., 1);\n    float v = 2.5*iTime;\n    float r = 1.5 + 0.005 * cos(1.*p.x + v) + 0.15 * sin(p.y + v);\n    float sphereDist =  length(p-s.xyz)-r;\n\n    return sphereDist;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float acc = 0.0;\n    \n    for(int i = 0; i < STEPS; i++) {\n     \tvec3 p = ro + rd * acc;\n        float dS = map(p);\n        acc += dS;\n        \n        if(acc > MAX || dS < EPS) break;\n    }\n    \n    return acc * 0.5;\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = map(p);\n    vec2 e = vec2(EPS, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 getLight(vec3 p, vec3 r0) {\n    vec3 l = normalize(r0-p);\n    vec3 n = getNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    \n  \treturn vec3(0.5*abs(sin(iTime)), 0.5*abs(cos(iTime)), 0.7*cos(iTime))*dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0., 1., -5.);\n    vec3 rd = normalize(vec3(uv, 1));\n    \n    float d = rayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    // Time varying pixel color\n    vec3 col = getLight(p, ro);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}