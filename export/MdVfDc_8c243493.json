{"ver":"0.1","info":{"id":"MdVfDc","date":"1530906609","viewed":275,"name":"Glowy rotating dots","username":"redski","description":"Day 2 of shader practice. Playing around with InnerDotRadius produces pretty cool results","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NO(x) ((x + 1.)*0.5f)\n#define PI 3.141592\n#define Intensity 8.0f\n#define TrailingDotCount 8.\n#define InvTrailingDotCount (1. / TrailingDotCount)\n#define CosS 1.\n#define SinS 1.4f\n#define DotCount 3.\n#define TailArc (2. * PI  / DotCount * 0.6)\n#define InnerDotRadius 30.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord * 2.f - iResolution.xy;\n    \n    float R = 400.;\n    float ROffset = cos(2. * PI) * 0.4f;\n       \n    vec3 C = vec3(0);\n    for(float i = 0.; i < DotCount; i++) {\n         // Trailing dots\n        float AngleOffset = 2. * PI * i / DotCount;\n        vec2 P0 = vec2(cos(AngleOffset + iTime * CosS),\n                       sin(AngleOffset + iTime * SinS)) * R ;\n        \n        float V0 = Intensity / length(P0 - uv);\n        C += V0;\n        \n        float DotStep = (2. * PI) * InvTrailingDotCount *0.5f - TailArc * 0.5;\n        AngleOffset += DotStep;\n        \n        for(int i = 0; i < int(TrailingDotCount); i++) {\n            vec2 P1 = vec2(cos(AngleOffset + iTime * CosS),\n                           sin(AngleOffset + iTime * SinS)) * R;\n\n            float ni = (1. - (float(i) * InvTrailingDotCount));\n            float V1 = Intensity / (length(P1 - uv) - (InnerDotRadius * ni));\n            C += V1 * ni * 0.6f;\n            \n            AngleOffset += DotStep;\n        }\n    }\n    \n    fragColor = vec4(C * vec3(NO(cos(iTime)), NO(sin(iTime)), NO(cos(iTime))), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}