{"ver":"0.1","info":{"id":"msVXzG","date":"1681279421","viewed":68,"name":"Contour Mapping","username":"graygoose","description":"Just playing with some countour ideas.\n\nFabrice promptly golfed it before I could even consider it, thanks!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","math","countour"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// golfed by Fabrice - 2023-04-12 ~285chars creative edits by graygoose\n#define S(v)  smoothstep( 1.5,-1.5, (v+z)/fwidth(z) )\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = 5. * ( U / iResolution.xy - .5 );\n    float r = dot(U, U),\n          k = cos(iTime*0.5)-0.5,\n          a = pow(r, k), z, s = 2.*sin(iTime);\n    U *= a;\n\n    z = mix( sin(U*U.x) * cos(U*U.y),\n             sin(U*U.y) * cos(U*U.x),\n                    0.1*cos(iTime) ).x;\n           \n    O = vec4( 3.*S(-.25 * s) - S() + 2.*S(.25 * s) ) / 4.   \n              * ( 1. -  ( S( -.25 * sin(iTime) ) - S( +.25 *cos(iTime) ) ) \n              * smoothstep(-1., 1., s) \n             );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* Fabrice(golfed) & graygoose - 2023-04-12\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = 20.* ( U / iResolution.xy - .5 );\n    \n    // landscape\n    float z = sin(U.x*U.y) - cos(U.y-U.x),\n         z2 = cos(U.x*U.y) * sin(U.y-U.x);\n      \n    z = mix(z, z2, cos(0.1*iTime));\n    \n    // contouring\n    float color = z <-.5 ? 1.\n            : z < .0 ? .5   \n            : z < .5 ? .75\n            :          .0,\n          st = sin(iTime),\n        edge = step(z, .5 * st ) - step(z, -.5 * cos(iTime)),\n        fade = smoothstep(-1., 1., st);\n        \n    \n              \n    O = vec4( color * ( 1. - edge * fade ) );\n}*/\n\n/* graygoose - original\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv *= 10.0;\n\n    // landscape\n    float z = sin(uv.x*uv.y) * cos(uv.y-uv.x);\n    \n    vec4 color = vec4(0.0);\n    if (z < -0.5) {\n        color = vec4(1.);\n    } else if (z < 0.0) {\n        color = vec4(0.5, 0.5, 0.5, 1.0);\n    } else if (z < 0.5) {\n        color = vec4(0.75, 0.75, 0.75, 1.0);\n    }\n\n    // contouring\n    float st = sin(iTime);\n    float ct = cos(iTime);\n    \n    float edge = 0.0;\n    float a = 0.5 * st;\n    float b = 0.5 * ct;\n    edge += step(z, a) - step(z, 0.0);\n    edge += step(z, 0.0) - step(z, -b);\n    float fade = smoothstep(-1.0, 1.0, st);\n    color.rgb *= 1.0 - edge * fade;\n\n    fragColor = color;\n}\n*/","name":"Image","description":"","type":"image"}]}