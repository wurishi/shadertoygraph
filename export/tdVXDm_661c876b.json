{"ver":"0.1","info":{"id":"tdVXDm","date":"1574231999","viewed":69,"name":"Simplex noise (ltp)","username":"liutp","description":"Simplex noise ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) \n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) \n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\n// Simplex noise \n// https://github.com/ashima/webgl-noise \n// Copyright (C) 2011 Ashima Arts. All rights reserved.\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec2 random(vec2 st){\n    return  fract(\n        sin(\n            vec2(\n                dot(st, vec2(127.1,311.7)),\n                dot(st, vec2(269.5,183.3))\n            )\n        ) * 43758.5453\n    );\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p); // 获取当前网格索引i\n    vec2 f = fract(p); // 获取当前片元在网格内的相对位置\n    float F1 = 1.;\n    // 遍历当前像素点相邻的9个网格特征点\n    for (int j = -1; j <= 1; j++) {\n        for (int k = -1; k <= 1; k++) {\n            vec2 neighbor = vec2(float(j), float(k));\n            vec2 point = random(i + neighbor);\n            float d = length(point + neighbor - f);\n            F1 = min(F1,d);\n        }\n    }\n    return F1;\n}\n\nfloat noise_perlin (vec2 p) {\n    vec2 i = floor(p); // 获取当前网格索引i\n    vec2 f = fract(p); // 获取当前片元在网格内的相对位置\n    // 计算梯度贡献值\n    float a = dot(random(i),f); // 梯度向量与距离向量点积运算\n    float b = dot(random(i + vec2(1., 0.)),f - vec2(1., 0.));\n    float c = dot(random(i + vec2(0., 1.)),f - vec2(0., 1.));\n    float d = dot(random(i + vec2(1., 1.)),f - vec2(1., 1.));\n    // 平滑插值\n    vec2 u = smoothstep(0.,1.,f);\n    // 叠加四个梯度贡献值\n    return mix(mix(a,b,u.x),mix(c,d,u.x),u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n = noise_perlin(fragCoord.xy/iResolution.xy/0.1f);\n\n    // Output to screen\n    fragColor = vec4(n,n,n,1.0);\n}","name":"Image","description":"","type":"image"}]}