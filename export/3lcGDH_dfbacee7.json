{"ver":"0.1","info":{"id":"3lcGDH","date":"1576124998","viewed":109,"name":"Swimming Fish","username":"SadCat","description":"My first shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pi, the ratio of a circle's circumference to its diameter.\nconst float M_PI = 3.14159265358979323846264338327950288;\n\nfloat Circle(vec2 uv, vec2 p, float r, float blur) {\n\tfloat d = length(uv-p);\n    float c = smoothstep(r, r-blur, d);\n    \n    return c;\n}\n\nfloat Fish(vec2 uv, vec2 p, float scale, float f) {\n\tfloat c = 0.0;\n    \n    uv /= scale;\n    uv -= p;\n    \n    for (float a = 0.0 ; a < 1.0 ; a += 0.1) {\n        vec2 p = vec2(a-0.5, (0.8-a)*0.1*sin(2.0*M_PI*f*iTime+a));\n        float r = 0.27*sin(a*2.4) + max(0.25-a,0.0); \n        r *= r;\n        c += Circle(uv, p, r, 0.01);\n    }\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float c = 0.0;\n    \n    c += Fish(uv , vec2(0.0), .4, 1.0);\n    c += Fish(uv , vec2(0.8), .38, 1.2);\n    c += Fish(uv , vec2(-0.8), .36, 1.4);\n    c += Fish(uv , vec2(-0.8,0.8), .34, 1.6);\n    c += Fish(uv , vec2(0.8,-0.8), .32, 1.8);\n\n    // Output to screen\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}