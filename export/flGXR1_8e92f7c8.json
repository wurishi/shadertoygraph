{"ver":"0.1","info":{"id":"flGXR1","date":"1640217943","viewed":238,"name":"Per se","username":"louis_C","description":"little experiement around a formula.","likes":9,"published":1,"flags":40,"usePreview":0,"tags":["raymarching","formant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 r, in vec2 c ){r = texture(iChannel0,c/iResolution.xy)\n*pow(clamp(iTime,0.,7.)/7.,3.5);}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash(float x){return fract(sin(x) * 897612.531);}\nfloat voc(float t, float f, float ft){float x = fract(t * f) / f;\nfloat e=(sin(x*4.*ft)+sin(x*22.*ft)+sin(x*25.*ft)); \n   return e* min(x * 1000., 1.) * exp(x * -200.);}\nvec2 formant(float t, float var){\n    vec2 v = vec2(0., 0.);\n    for(int i = 0; i < 16; ++i){\n        float h = float(i);\n       \tfloat m = voc(t + h / 3., 60. + pow(2.01, (h - 8.) * .2), var);\n        float pan = hash(h);\n        v.x += m * pan;\n        v.y += m * (1. - pan);\n    }\n    return v * .1;\n   \n}\nfloat rd(float t){return fract(sin(dot(floor(t),45.))*(8491.236));}\nfloat no(float t){return mix(rd(t),rd(t+1.),smoothstep(0.,1.,fract(t)));}\nvec2 t1(float time,float d1){\n vec2 b = vec2 (formant(time,9.));\n    \n    for(int  i = 0 ; i < 9 ; i++){\n     b = vec2(1.5,1.+d1)*abs(b/dot(b,b))-vec2(0.2,0.5);\n    }\n    b = normalize(b);\n    return b;}\n    \n    vec2 t1(float time){\n    float tt = time;\n       float d1 =  no(tt*0.1+0.5);\n   vec2 b = t1(tt,d1)*0.5;\n   b += t1(tt*2.5,d1)*0.5;\n   return b;}\n   \nvec2 t2 (float t){ \nvec2 r = vec2(0.);\nfor(int  i = 1 ; i < 20 ; i++){\nr += t1(t+float(i)*0.003)/pow(float(i),0.7);\nr += t1(t+float(i)*0.3)/(pow(float(i),0.2)*20.);\n}\nreturn normalize(r);}\nmat2 rot(float t){ float c = cos(t);float s = sin(t); return mat2(c,-s,s,c);}\nvec2 mainSound( int samp, float time )\n{  \n    vec2 r1 = t2 (time)-0.5;\n    r1 *= rot(time);\n    return vec2(r1*pow(clamp(time,0.,7.)/7.,3.5));\n}","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"# define tt 96. \n#define pi 3.14159265359\nstruct scene{float dist;int em;float col;};\nfloat se = 0.0;\nfloat rd() {return (fract(sin( (se += 1.0)) * 43758.5453));}\nfloat rd(float t){return fract(sin(dot(floor(t),45.))*(8491.236));}\nfloat no(float t){return mix(rd(t),rd(t+1.),smoothstep(0.,1.,fract(t)));}\nvec3 rdv(){\n    float theta = rd() * (6.283);\n    float z = rd() * 2.0 - 1.0;\n    float a = sqrt(1.0 - z * z);\n    vec3 v = vec3(a * cos(theta), a * sin(theta), z);\n    return v * sqrt(rd());}\nmat2 rot(float r){float c = cos(r);float s = sin(r);return mat2(c, -s, s, c);}\n\nscene opOR(in scene a, in scene b){\n    if (a.dist < b.dist){return a;}\n    return b;}\nscene map(vec3 p,float b1){\n    \n\n\n    float tb = 0.95;\n    vec3 b = p;\n    for(int i =0 ; i < 9; i ++ ) {\n     b = vec3(1.5,b1,1.5)*abs(b/dot(b,b))-vec3(0.2,0.5,0.5);}\n    \n    scene li = scene(length(p)-0.1, 1,40.);   \n    scene art = scene( length(b)-0.4,0, 1.);\n    scene scene = opOR(li, art);\n  \n    return scene;\n}\nvec3 norm(vec3 p,float b1){vec2 e=vec2(0,0.01);return normalize(map(p,b1).dist \n\t\t-vec3(map(p-e.yxx,b1).dist,map(p-e.xyx,b1).dist,map(p - e.xxy,b1).dist));}\n\nscene raymarch(in vec3 ro, in vec3 rd,float b1){\n    float t = 0.0;\n    \n    scene sceneOutput = scene(50.,  0,  0.03);\n    for (int i = 0; i < 32; ++i){\n        scene sce = map(ro + rd * t,b1);\n        if (sce.dist < 0.01){\n            sceneOutput = scene(t, sce.em,sce.col);\n            break;}\n        t += sce.dist;\n        if (t > 20.){break;}\n    }\n    return sceneOutput;}\n\nvec4 raytrace(in vec2 uv,float b1){\n    float t = (iTime-3.14)*0.05;\n    vec3 ro = vec3(uv, 0.0);\n    vec3 rd = normalize(vec3(uv, 1.));\n    ro.xz *=  rot(t);\n    rd.xz *=  rot(t);\n    ro.xy *=  rot(t);\n    rd.xy *=  rot(t);\n    float color = 0.;\n    float mco =0.;\n    float atten = 1.0;\n    float bounces = 1.;\n    for (int i = 0; i <3; ++i)\n    {\n    if(length(uv.y)>0.8){break;}\n        scene sce = raymarch(ro, rd,b1);\n        if (sce.em == 0)\n        {\n        \tvec3 p = ro + rd * sce.dist;\n            vec3 n = norm(p,b1); \n            rd = n + rdv() * 1.2;\n            ro = p + rd * 0.1;\n            mco += (sce.col) * atten; \n            bounces += 1.0;\n            atten *= 0.5;\n        }\n        else\n        { color = mix(sce.col, mco * sce.col, max(0.0, float(i)));\n         break;}\n\n    } \n    color/=bounces;\n    return vec4(color);\n}\n/*float hash(float x){return fract(sin(x) * 897612.531);}\nfloat voc(float t, float f, float ft){float x = fract(t * f) / f;\nfloat e=(sin(x*4.*ft)+sin(x*22.*ft)+sin(x*25.*ft)); \n   return e* min(x * 1000., 1.) * exp(x * -200.);}\nvec2 formant(float t, float var){\n    vec2 v = vec2(0., 0.);\n    for(int i = 0; i < 16; ++i){\n        float h = float(i);\n       \tfloat m = voc(t + h / 3., 60. + pow(2.01, (h - 8.) * .2), var);\n        float pan = hash(h);\n        v.x += m * pan;\n        v.y += m * (1. - pan);\n    }\n    return v * .1;\n   \n}\nvec2 n1 = vec2(0.);\nvec2 n2 = vec2(0.);\nfloat fb_lp = 0.0;\nfloat p4=1.0e-24;\n\n\nvec2 t1(float time,float d1){\n vec2 b = vec2 (formant(time,9.));\n    \n    for(int  i = 0 ; i < 9 ; i++){\n     b = vec2(1.5,1.+d1)*abs(b/dot(b,b))-vec2(0.2,0.5);\n    }\n    b = normalize(b);\n    return pow(b,vec2(10));}\nvec2 t2 (float t,float d1){ \nvec2 r = vec2(0.);\nfor(int  i = 1 ; i < 20 ; i++){\nr += t1(t+float(i)*0.003,d1)/pow(float(i),0.7);\n}\nreturn normalize(r);}*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uc = fragCoord.xy / iResolution.xy;\n    float time = iTime;\n    se = (iResolution.y * fragCoord.x / iResolution.x + fragCoord.y / iResolution.y);\n    se += time;\n    vec2 uv = (fragCoord.xy / iResolution.xy * 2.0 - 1.0) ;\n    uv.x *= iResolution.x/iResolution.y;\n    vec4 color = raytrace(uv,1.+no(iTime*0.1+0.5) );\n   //vec4 color = vec4(0.);\n    vec4 prevColor = texture(iChannel0,uc);\n    fragColor = max(color,pow(prevColor*0.95,vec4(1.)));\n   // fragColor = vec4(color.rgb+prevColor.rgb*0.9,1.);\n   /* float d1 =  no(uv.x*0.1);\n   vec2 b = t1(uv.x,d1)*0.4;\n   b += t1(uv.x*2.5,d1)*0.4;\n   fragColor = vec4(step(vec2(uv.y),t2(uv.x,d1)),0.,0.);*/ \n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}