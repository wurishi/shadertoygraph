{"ver":"0.1","info":{"id":"4sSfWy","date":"1501883007","viewed":792,"name":"Baby Talk","username":"paulo69","description":"2D MoGraph based on the music \"Baby Talk\" composed by David HURET (  https://soundcloud.com/user-337195955  )\n","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["2d","music","animation","heart","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sd3Rn","filepath":"https://soundcloud.com/user-337195955/08-baby-talk?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/user-337195955/08-baby-talk?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Warning : abusive use of smileys ! \n\n/*\n\nCurrently my best shader.\n\nI haven't corrected my shader before publishing it, \nso it's not optimized and doesn't respect the art of writing shaders ! \n\nI haven't more shaders on reserve, after the time will come for me to \nreally learn to write shaders ! So your reviews are welcome... 😀\n\n*/\n\nvec3 signal (float lo, float ho, float l, vec3 col, vec2 p, float time) {\n    return  col *= abs (l/((p.y)*(800.0*cos(time))+cos(p.x*lo)*ho));\n}\n\n/*\n\nAt the beginning I wrote an article \"How to seduce with maths\" (😂) for the school magazine (this year). \nIt describes how to draw a heart in \"GeoGebra\" with an equation that I've found. \nAfter I saw the video of Inigo Quilez dealing with this subject : his equation is x10000 better than mine !\nHis awesome tutorial : https://www.youtube.com/watch?v=aNR4n0i2ZlM    😊\n\nMine : X²+(a*Y-abs(X))²=b+c*Y*cos(atan2(d*X,Y)*e)\n\n*/\n\nfloat FonctionCoeur (float x, float y,float t, float scaleY, float scaleX) {\n    t=t*3.0;\n    return pow(x*scaleX+(cos(1.2)*.005),2.0) + pow((y* scaleY+(sin(t)*.002)- abs(x) - (abs(x) / (x-10.0))),2.0)-.2*y*cos(atan(1.0*x,y)*.6);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/ iResolution.x;  // Not correct, I know 😉\n    float sound = texture( iChannel0, vec2(uv.x,1.0)).x;\n    float taille = .02;\n    float t = iTime;\n    float x = .5;\n    if(t<11.55) {\n     \tx=.1+abs(cos(t));   \n    }\n    vec2 pos = uv-vec2(x,.2+cos(t)/50.0); \n    if (t<63.0&&t>50.0) {\n    \ttaille = .001;    \n        pos.y = uv.y-.4;\n        pos.x= uv.x+cos(t);\n    }\n    vec3 lightdirection = vec3 (uv.x*uv.y);\n    vec3 couleur = vec3 (1.0,uv.x*.5,uv.y*.5);\n    couleur+= vec3 (abs(pos.x));\n    float diffusion = 2.0;\n    float i = 5.0;\n    vec3 img = couleur*vec3(0.2,.6,0.9);\n    vec3 col = vec3(0.9,0.4,0.0);\n    if (t<75.0) {\n    \timg+= vec3 (signal (5.0,9.0*sound*sound*19.0,1.0,vec3 (2.0),vec2 (t,.15)-uv, 0.5))*col;\n    \timg+= vec3 (signal (3.0,9.0,sound,vec3 (1.5),vec2 (t,.22)-uv, 0.5))*col;\n    \timg+= vec3 (signal (10.0,18.0*sound*sound,1.0,vec3 (1.0),vec2 (t,.35)-uv, 0.5))*col;\n    \timg+= vec3 (signal (3.0,9.0,1.0,vec3 (2.5,0.0,0.0),vec2 (t,.36)-uv, 0.5))*col;\n    }\n\timg*=1.0+cos(sound)*.05;\n    img*=(.6+vec3(.49,.5,.9)*cos(sound)*.15 )*1.0;\n    img*=.8;\n    img+= vec3 (mod(floor(pos.x*t)+floor(pos.y*t),2.0))*.1;\n    vec3 col1 = img;\n    float xa = pos.x;\n    if (t<62.0&&t>50.0) {\n    \txa = mod(abs(pos.x),cos(t));\n    }\n    if (FonctionCoeur(xa,pos.y,t,1.5,1.2) < taille+abs(cos(t*7.0))*.02) {\n    \timg = couleur*lightdirection*lightdirection*diffusion*i+vec3(0.1,pos.y*.1,0.0);\n        img+=vec3(pos.x*.9,0.0,0.0)*cos(sound);\n        if(t<50.0&&t>40.0) {\n         \timg=col1;   \n        }\n        if (t<11.5) {\n         \timg=col1;   \n        }\n        if (t>75.0) {\n         \timg=col1;   \n        }\n    }\n    if (t<75.0) {\n        float azerty = 4.0; //Why this name, I don't know 😐\n        if (t>45.0&&t<55.0) {\n         \tazerty+=cos(t)*6.0;   \n        }\n    \timg+= vec3 (signal (5.0,8.0,1.0,vec3 (0.0,azerty,1.0),vec2 (t,.28)-uv, 0.5))*col;\n    \timg+= vec3 (signal (9.0,18.0,1.0,vec3 (2.1),vec2 (t,.33)-uv, 0.5))*col;\n    }\n    img+= vec3 (signal (1.2,sound*sound*80.0,1.0,vec3 (6.0),vec2 (0.0,.05)-uv, 0.5))*col;\n    if (t>83.0) {\n    \timg*=0.0;   \n    }\n    if(t>63.0&&t<75.0) {\n     img+= vec3 (0.0,.2+sin(t)*.2,.5+cos(t)*.4);   \n    }\n\tfragColor = vec4(img*(lightdirection+.6)*clamp(t*.07,0.0,1.0),1.0);\n}","name":"Image","description":"","type":"image"}]}