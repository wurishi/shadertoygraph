{"ver":"0.1","info":{"id":"NscfW7","date":"1656550541","viewed":117,"name":"Barycentric interpolation __","username":"Envy24","description":"Barycentric interpolation.\n\n3D variant: https://www.shadertoy.com/view/stjXRm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triangle","simplex","barycentric","texturing","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define TO_TEX_COORDS(SC)         ( (SC) / (R.xy) )                  // in range x=[0.0; 1.0], y=[0.0; 1.0]\n#define TEX0(TC)                  ( texture(iChannel0, (TC)) )\n\n/* 2-simplex (triangle) barycentric interpolation *\nvec3 barycentric(\n    float x0, float y0,\n    float x1, float y1,\n    float x2, float y2,\n    float x, float y)\n{\n    float invDet = 1.0 /\n        (x0 * (y1 - y2) +\n         x1 * (y2 - y0) +\n         x2 * (y0 - y1));\n        \n    mat3 INV = mat3(\n              y1 - y2,       y2 - y0,       y0 - y1,\n              x2 - x1,       x0 - x2,       x1 - x0,\n        x1*y2 - x2*y1, x2*y0 - x0*y2, x0*y1 - x1*y0\n    );\n    \n    return invDet * INV * vec3(x, y, 1);\n}\n/* OR */\nvec3 barycentric(\n    float x0, float y0,\n    float x1, float y1,\n    float x2, float y2,\n    float x, float y)\n{\n    mat3 INV = inverse(mat3(\n         x0, y0, 1.0,\n         x1, y1, 1.0,\n         x2, y2, 1.0\n    ));\n    \n    return INV * vec3(x, y, 1);\n}\n/* Other examples: *\nvec2 barycentric( // 1-simplex (line segment) barycentric interpolation\n    float x0,\n    float x1,\n    float x)\n{\n    mat3 INV = inverse(mat3(\n         x0, 1.0,\n         x1, 1.0\n    ));\n    \n    return INV * vec2(x, 1);\n    return x0 * ((x-x1)/(x0-x1)) + x1 * ((x0-x)/(x0-x1));\n    \n}\nvec4 barycentric( // 3-simplex (tetrahedron) barycentric interpolation\n    float x0, float y0, float z0,\n    float x1, float y1, float z1,\n    float x2, float y2, float z2,\n    float x3, float y3, float z3,\n    float x, float y, float z)\n{\n    mat4 INV = inverse(mat4(\n         x0, y0, z0, 1.0,\n         x1, y1, z1, 1.0,\n         x2, y2, z2, 1.0,\n         x3, y3, z3, 1.0\n    ));\n    \n    return INV * vec4(x, y, z, 1);\n}\n/* e.t.c. */\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n    \n    float xi = 0.9 * AR;\n    float yi = 0.9;\n    \n    vec2 BL = vec2(-xi, -yi),\n         TL = vec2(-xi,  yi),\n         TR = vec2( xi,  yi),\n         BR = vec2( xi, -yi);\n         \n    vec2 o = vec2(sinOSC(0.0, 0.1, iTime * 2.0), 0.0);\n         \n//#define CLOCKWISE\n    vec2 V[6] = vec2[6](\n#ifdef CLOCKWISE\n          BL,   TL,   TR,\n        o+TR, o+BR, o+BL\n#else\n          BL,   BR,   TR,\n        TR-o, TL-o, BL-o);\n#endif\n    \n    vec2 UV[6] = vec2[6](\n#ifdef CLOCKWISE\n        vec2(0, 0), vec2(0, 1), vec2(1, 1),\n        vec2(1, 1), vec2(1, 0), vec2(0, 0)\n#else\n        vec2(0, 0), vec2(1, 0), vec2(1, 1),\n        vec2(1, 1), vec2(0, 1), vec2(0, 0));\n#endif\n    \n    vec3 BARY;\n    \n    for (int i = 0; i < 6; i += 3)\n    {\n        // Calculate barycentric coordinates.\n        BARY = barycentric(\n            V[i].x,     V[i].y,\n            V[i + 1].x, V[i + 1].y,\n            V[i + 2].x, V[i + 2].y,\n            NDC.x,      NDC.y);\n         \n        float treshold = -1e-7;\n        if (BARY.x >= treshold && \n            BARY.y >= treshold &&\n            BARY.z >= treshold) // inside triangle?\n        {\n            // Barycentric interpolation.\n            vec2 S = UV[i] * BARY.x + UV[i+1] * BARY.y + UV[i+2] * BARY.z;\n            O = texture(iChannel0, S);\n            return;\n        }\n    }\n    \n    O = vec4(normalize(BARY), 1.0);          \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}","name":"Common","description":"","type":"common"}]}