{"ver":"0.1","info":{"id":"wsGSWG","date":"1574846019","viewed":287,"name":"Wiggly Color Lines","username":"specialsaucewc","description":"Trying things while stuck with family","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["perlinnoise","trig","weekendshade"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STRAND_COUNT 8.\n#define ZOOM 3.\n#define BORDER_COL vec3(1.)\n\nvec3 N13(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nfloat N21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx*1500.) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Border(float c, float w, float x) {\n    x = abs(x - c);\n    x = smoothstep(w, 0., x);\n    return x;\n}\n\nfloat SmoothNoise(vec2 uv) {\n   vec2 cv = fract(uv);\n   vec2 id = floor(uv);\n   cv = cv*cv*(3.-2.*cv);\n   \n   \n   float bl = N21(id);\n   float br = N21(id+vec2(1, 0));\n   float b = mix(bl, br, cv.x);\n   \n   float tl = N21(id+vec2(0, 1));\n   float tr = N21(id+vec2(1, 1));\n   float t = mix(tl, tr, cv.x);\n   return mix(b, t, cv.y);\n}\n\nfloat distToBanner(vec2 cv, float id) {\n    float r = N21(vec2(id,id));\n    //SmoothNoise(consistentVerticalSlice * zoomIn + scroll + strand offset\n    float distortion = (SmoothNoise(cv.xx *.05 + (iTime*.4) + (r*100.))*2.5)-1.25;\n    float wave = sin((cv.x + iTime*4. + (r * 25.)))*1.5;\n    float final = mix(wave, distortion, .8);\n    \n    //lazy distance to line (approximation)\n    return abs(cv.y - final);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // -.5 to .5\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    // 0 to 1\n    vec2 gradientUV = fragCoord/iResolution.xy;\n    //vec3 gradCol1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //vec3 gradCol2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(1,3,5));\n    //vec3 col = mix(gradCol1, gradCol2, (gradientUV.x + gradientUV.y)/2.);\n    \n    vec3 col = vec3(.1);\n    uv.x *= ZOOM;\n    uv.y *= 3.;\n    \n    for (float i=1.; i <= STRAND_COUNT; i++) {\n    \n    \tfloat dist = distToBanner(uv, i);\n    \n    \tfloat wave = smoothstep(.05, .045, dist);\n        float border = Border(.05, .015, dist);\n        \n        //draw each strand using porterduff compositing\n        //http://ssp.impulsetrain.com/porterduff.html\n        vec3 waveCol = mix(N13(i*3.245), N13(i * 1.35235), gradientUV.x);\n        //destAtop: src=wave dest=border\n        vec3 destAtopWave = (wave * (1.- border)) * waveCol + (wave * border) * BORDER_COL;\n        //Over: src=wave dest=col(main image has constant alpha of 1.)\n        col = (1. - wave) * col + wave * destAtopWave;\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}