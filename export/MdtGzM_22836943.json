{"ver":"0.1","info":{"id":"MdtGzM","date":"1448720539","viewed":668,"name":"ripple camera","username":"qq456cvb","description":"a simple shader of ripple simulation on web camera.","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 100.0;\nconst float EPSILON = 0.001;\nconst float reflection = 1.5;\nconst float heightScale = 10000.0;\nconst float rangeScale = 2.0;\nconst float speed = 6.0;\n\nfloat getHeight(vec2 uv)\n{\n    return cos(0.5*sqrt(uv.x*uv.x+uv.y*uv.y)-speed*iTime)/\n             (1.0/rangeScale*(uv.x*uv.x+uv.y*uv.y)+3.0*iTime)*heightScale;\n}\n\nvec3 getNormal(vec3 p, float eps)\n{\n    vec3 n;\n    n.z = p.z;\n    n.x = n.z-getHeight(vec2(p.x+eps, p.y));\n    n.y = n.z-getHeight(vec2(p.x, p.y+eps));\n    n.z = eps;\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 camColor = texture(iChannel0, uv);\n    \n    // z-position\n    uv = uv*2.0-1.0;\n    uv *= scale;\n    float n = floor(iTime-floor(iTime/10.0)*10.0);\n    float z = getHeight(uv);\n    \n    // normal\n    vec3 p = vec3(uv, z);\n    vec3 normal = getNormal(p, EPSILON);\n    vec3 refractDir = refract(vec3(0, 0, -1), normal, 1.0/reflection);\n    \n    // actual pixel\n    float k = -p.z/refractDir.z;\n    vec3 actualPt = p+k*refractDir;\n    vec2 samp = (actualPt.xy/scale+1.0)/2.0;\n    vec4 actualColor = texture(iChannel0, samp);\n    \n\tfragColor = actualColor;\n}","name":"Image","description":"","type":"image"}]}