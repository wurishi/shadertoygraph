{"ver":"0.1","info":{"id":"43ByRh","date":"1726895560","viewed":35,"name":"Floating liquid","username":"dunishaaa","description":"Distorting an sphere and coloring based on normals","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sphere","domaindistortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MIN_DIST .01\n#define MAX_DIST 100.\n#define MAX_STEPS 100\nfloat pointSDF(vec3 p, float r){\n    return length(p) - r;\n}\n\nfloat getDist(vec3 p){\n    float p1 = pointSDF(p-vec3(0., 1., 4.), 2.)-cos(2.*iTime+p.x*5.+p.z*.1)*.2;\n    p1 -= sin(iTime*2. + p.y*p.x * 2.)*.5;\n    float pl = p.y+1.;\n    return min(p1, pl);\n}\nvec3 getNormal(vec3 p){\n    vec2 off = vec2(.01,0.);\n    float d = getDist(p);\n    vec3 n = d-vec3(\n            getDist(p - off.xyy),\n            getDist(p - off.yxy),\n            getDist(p - off.yyx)\n                );\n    return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        float d = getDist(ro+ rd*dO);\n        \n        dO += d;\n        if(d < MIN_DIST || abs(dO) > MAX_DIST) break;\n       \n    }\n    return dO;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -=.5;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0., 1., -5.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    col = abs(getNormal(p));\n    col = col.ggg;\n    col *= vec3(.9, .4, .6);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}