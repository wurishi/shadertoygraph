{"ver":"0.1","info":{"id":"wly3RR","date":"1578081353","viewed":146,"name":"3D Camera system from tutorial","username":"izutionix","description":"following along this tutorial from The Art of Code: [url]https://youtu.be/PBxuVlp7nuM[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n    float d = DistLine(ro, rd, p);\n    d = .01/(d+0.);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3(3.*sin(t), 2., -3.*cos(t));\n    \n    vec3 lookat = vec3(.5);\n    \n    float zoom = 1.;\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = normalize(cross(vec3(0., 1., 0.), f));\n    vec3 u = cross(f, r);\n    \n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    \n    vec3 rd = i-ro;\n    \n    float d = 0.;\n    d += DrawPoint(ro, rd, vec3(0., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 1.));   \n    d += DrawPoint(ro, rd, vec3(1., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 1.));   \n    \n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}