{"ver":"0.1","info":{"id":"WlGXR1","date":"1582142117","viewed":701,"name":"Neon globules","username":"WAHa_06x36","description":"Glob glob","likes":22,"published":1,"flags":1,"usePreview":0,"tags":["neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\t\n// Mix final noise value\nvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    vec4 m2 = m * m;\n    vec4 m4 = m2 * m2;\n\n    vec4 pdotx = vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3));\n\n    vec4 temp = m2 * m * pdotx;\n    vec3 grad = -8.0 * (temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3);\n    grad += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;\n \n    return 42.0 * vec4(grad, dot(m4, pdotx));\n}\n\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x), cos(ang.x));\n\tvec2 a2 = vec2(sin(ang.y), cos(ang.y));\n\tvec2 a3 = vec2(sin(ang.z), cos(ang.z));\n\treturn mat3(\n\t\tvec3(a1.y * a3.y + a1.x * a2.x * a3.x, a1.y * a2.x * a3.x + a3.y * a1.x, -a2.y * a3.x),\n\t\tvec3(-a2.y * a1.x, a1.y * a2.y, a2.x),\n\t\tvec3(a3.y * a1.x * a2.x + a1.y * a3.x, a1.x * a3.x - a1.y * a3.y * a2.x, a2.y * a3.y)\n\t);\n}\n\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 pos, in vec3 dir) {\n    float stepSize = 0.2;\n    dir = normalize(dir);\n\n    vec3 planeNormal = vec3(0.0, 0.0, 1.0);\n\n    vec3 travel = vec3(0.0, 0.0, iTime * 2.4);\n    pos += travel;\n\tvec3 startPos = pos;\n\n\n    if(dot(dir, startPos) > 0.0) {\n\t    pos += dir / dot(dir, planeNormal) * stepSize * (-1.0 + fract(-(dot(startPos, planeNormal)) / stepSize));\n    } else {\n\t    pos += dir / dot(dir, planeNormal) * stepSize * fract(-(dot(startPos, planeNormal)) / stepSize);\n    }\n        \n    vec3 col = vec3(0.0);\n\n    for(float i = 0.0; i < 42.0; i++) {\n        pos += dir * stepSize / abs(dot(dir, planeNormal));\n        vec4 n = snoise(pos * 0.3 + vec3(0.5, 0.5, 0.5));\n        float p = n.w + sin(iTime * 3.0) * 0.05 + 0.5;\n        float dist = length(startPos - pos);\n        float ampl = 1.0 / (abs(dot(dir, planeNormal)) + 0.1);\n        //float ampl = 1.0 / (abs(dot(dir, n.xyz)) + 0.0);\n        float glow = 1.0 / (p * p + 0.0003 * ampl) * ampl * ampl;\n        float distanceFadeout = 1.0 / exp(0.6 * dist + 0.5);\n        float nearbyFadeout = 1.0 - exp(-0.3 * dist);\n        float c = glow * nearbyFadeout * distanceFadeout;\n        col += abs(vec3(dir.x, dir.y, dir.z)) * c * 0.01;\n    }\n\tfragColor = vec4(col, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n \tvec2 mouse = iMouse.xy == vec2(0.0) ? vec2(0.5) : iMouse.xy / iResolution.xy;\n    \n\tvec3 ang = vec3(0.0, -(mouse.y - 0.5) * 3.14159265 * 1.0, mouse.x * 3.1415926535 * 2.0);\n\n    vec3 dir = normalize(vec3(p.xy, -1.0 + length(p) * 0.25)) * fromEuler(ang);\n\n    mainVR(fragColor, fragCoord, vec3(0.0), dir);\n}\n\n\n","name":"Image","description":"","type":"image"}]}