{"ver":"0.1","info":{"id":"McVXRG","date":"1715374182","viewed":40,"name":"VAPORWAVE FRACTAL - Fastaro","username":"robfast","description":"just some exploration into the unknown","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","fastaro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat generateStartingValue(float x) {\n    // Using the provided sequence formula to generate a starting value\n    return ((4.0 + 3.0 * 7.5) * pow(4.0, x) - 1.0) / 3.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv =  0.05*(fragCoord - iResolution.xy * 0.5) / iResolution.y;\n   \n    float x = 2.0 + length(uv) * 16.0; // Starting value based on position\n\n    // Generate a random starting value from the sequence\n    float randomStart = generateStartingValue( x);\n\n   \n\nfloat hueRangeStart = 0.4; // Start of hue range\nfloat hueRangeEnd = 0.95; // End of hue range\nfloat hue = hueRangeStart + mod(2.0*randomStart +99.0 /2.0 + iTime/22.0, hueRangeEnd - hueRangeStart);\n\n    float saturation = 1.6;\n    float value = 3.2;\n\n    vec3 hsv = vec3(hue, saturation, value);\n    vec3 rgb = (abs((hsv2rgb(hsv)+2.0))); // Convert HSV to RGB\n\n\n  \n        fragColor = vec4(mix(vec3(88.0,0.0,88.0)+88.0/rgb,rgb-0.7,1.0), 0.2);\n   \n}\n","name":"Image","description":"","type":"image"}]}