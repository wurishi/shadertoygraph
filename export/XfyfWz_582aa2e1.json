{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"const float PI = 3.14159;\n\nfloat sdBox( in vec2 p, in vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdConcentricRings(vec2 p, float radius, float rings, float slices, float thickness, float spacing) {\n  vec2 uv = vec2(atan(p.y, p.x), length(p) - radius);\n  \n  float mr = floor(rings) / 4.0;\n  float mask = abs(uv.y - mr) - mr;\n  mask = step(0., mask);\n\n  uv.x = uv.x / (PI*2.) + 0.5;\n  uv *= vec2(floor(slices), 2.0);\n  uv = fract(uv) * 2.0 - 1.0;\n\n  float z = (length(p) * PI * 4.0) / floor(slices);\n  uv.x *= z;\n\n  float t = sdBox(uv, vec2(z - thickness - spacing, 0.)) - thickness;\n  return mix(t, abs(t), mask);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv0 = fragCoord / iResolution.xy;\n  uv0 = (uv0 - 0.5) * vec2(1.0, iResolution.y / iResolution.x) + 0.5;\n\n  float t = sin(iTime) * 0.5 + 0.5; \n  float radius = 0.5;\n  float thickness = mix(0.25, 1., sin(iTime) * 0.5 + 0.5);\n  float spacing = sin(iTime) * 0.5 + 0.5;\n  float slices = 3.;\n  float rings = 3.;\n  float sd = sdConcentricRings((uv0 - 0.5) * 8., radius, rings, slices, thickness, spacing);\n  vec4 c = mix(vec4(1,0,0,1), vec4(0,1,0,1), sign(sd));\n  c = c + c * sin(fract(sd));\n  fragColor = fract(c);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfyfWz","date":"1733917674","viewed":54,"name":"Concentric rings SDF","username":"gabrieloc","description":"works great for UI. There are a few bugs that I'm having trouble reconciling (eg. arcs warping into teardrop shapes towards the center) as well as some magic numbers (line 20 PI*4), so I appreciate any suggestions.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","ui"],"hasliked":0,"parentid":"","parentname":""}}