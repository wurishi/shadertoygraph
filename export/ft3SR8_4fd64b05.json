{"ver":"0.1","info":{"id":"ft3SR8","date":"1638665059","viewed":91,"name":"Simple interference","username":"nobear","description":"3 moving sin waves interfere constructively to combine colors","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sin","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ys[360];\nfloat PI = 3.1415926538;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float RATE1 = 5.0;\n    float RATE2 = 2.5;\n    float RATE3 = 1.25;\n    \n    // Essentially, each pixel is just sin(pixel x)\n    // Animate it by adding the current time the pixel x, shifting the whole frame\n    // Each of the channels (R, G, B) use their own sin wave, each wave is shifted at a different rate\n    float scroll1 = float(int(fragCoord.x + float(float(iFrame) * RATE1)) % int(iResolution.x)) / iResolution.x;\n    float scroll2 = float(int(fragCoord.x + float(float(iFrame) * RATE2)) % int(iResolution.x)) / iResolution.x;\n    float scroll3 = float(int(fragCoord.x + float(float(iFrame) * RATE3)) % int(iResolution.x)) / iResolution.x;\n    \n    float h1 = (sin(scroll1 * 2.0 * PI) + 1.0) / 2.0;\n    \n    float h2 = (sin(scroll2 * 2.0 * PI) + 1.0) / 2.0;\n    \n    float h3 = (sin(scroll3 * 2.0 * PI) + 1.0) / 2.0;\n    \n    float r = h1;\n    float g = h2;\n    float b = h3;\n    \n\n    // Output to screen\n    fragColor = vec4(\n        r,\n        g,\n        b,\n        1.0\n    );\n}","name":"Image","description":"","type":"image"}]}