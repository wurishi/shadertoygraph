{"ver":"0.1","info":{"id":"DtKGW3","date":"1684777313","viewed":42,"name":"Algorithm #2","username":"Sharkcow","description":"part 2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 4; //количество плоских фигур\nconst int sphere = 1; //количество сфер\nconst int m = 14; //количество вершин\nconst float z_min = -1000.0;\nconst float R = 0.3;\nconst float A = 1.0;\nconst float B = 1.0;\nconst float C = 1.0;\nconst float D = 1.0;\n\nvec3 aquamarin = vec3 (0.470588, 0.858823, 0.886275);\nvec3 sunglow = vec3 (1.,0.811764,0.282352);\nvec3 peach = vec3 (1.,0.811764,0.670588);\nvec3 springgreen = vec3 (0.92549, 0.917647, 0.745098);\nvec3 violet = vec3 (0.450980, 0.4, 0.741176);\nvec3 navyblue = vec3 (0.09803, 0.454902, 0.823529);\nvec3 white = vec3 (1., 1., 1.);\nvec3 green = vec3 (0.698039, 0.92549, 0.3647);\nvec3 red = vec3 (1., 0., 0.);\n\nvec2 Centre = vec2(0.0, 0.0);\nvec3 colAr[n+sphere] = vec3[n+sphere](vec3 (0.09803, 0.454902, 0.823529), vec3 (0.1882, 0.729, 0.6353), vec3 (1.,0.811764,0.282352), vec3(.877, .514, .14), vec3 (0.450980, 0.4, 0.741176));\nvec3 BGcol = vec3 (0.470588, 0.858823, 0.886275);\nfloat zAr[n] = float[n](0.5, 0.65, 0.75, 0.7);\nint inds[n+sphere] = int[n+sphere](0, 3, 7, 11, m);\nfloat de_z[3] = float[3](4., 3., 2.);\nvec2 polygons[m] = vec2[m](vec2(-0.5,0.3),vec2(-0.1,0.0),vec2(0.4,0.25), vec2(-0.6,0.35), vec2(-0.1,-0.1), vec2(0.3,0.12), vec2(-0.1,0.35), vec2(0.7,0.2), vec2(0.3,-0.3),vec2(-0.2,-0.1), vec2(-0.15,0.2), vec2(0.2, -0.4), vec2(0.12, 0.15), vec2(-0.6, 0.38));\n\nvec3 Color(vec2 uv) {\n    uv+=0.5;\n    vec3 c1=white;\n    vec3 c2=green;\n    return mix(c1, c2, uv.y);\n}\n\nvoid initPolygons(in float time){\n    int i, j;\n    for(i = 0; i < n; i++){\n        for(j = inds[i]; j < inds[i+1]; j++){\n            if(i==0){\n                polygons[j].x-=sin(time*2.)*0.65;\n                polygons[j].y-=cos(iTime)*0.3+0.1;\n            }\n            if(i==1) polygons[j].y-=0.15*sin(time*2.);\n            if(i==2) polygons[j].x+=0.5*cos(time);\n            if(i==3) polygons[j].x-=0.5*sin(time);\n        }\n    }\n    return;\n}\n \n \nfloat get_z(vec2 uv, int i, in float time){\n    if(i == 4) return sqrt(R*R - (uv.x - Centre.x)*(uv.x - Centre.x) - (uv.y - Centre.y)*(uv.y - Centre.y)) + 1.;\n    if(i == 3) return (D - B*uv.y - A*uv.x)/C;\n    if(i == 2) return zAr[i];\n    if(i == 1) return zAr[i];\n    if(i == 0) return (D - B*uv.y - A*uv.x)/C;\n}\n \nbool inSphere(in vec2 uv){\n    if((uv.x - Centre.x)*(uv.x - Centre.x) + (uv.y - Centre.y)*(uv.y - Centre.y) < R*R) return true;\n    else return false;\n}\n\nvoid initSphere(in float time){\n    float x = Centre.x - 0.2*cos(time);\n    float y = Centre.y - 0.2*sin(time);\n    Centre.x=x;\n    Centre.y=y;\n}\n\nbool inPolygon(in vec2 uv, in int num)\n{\n    int k = m;\n    num++;\n    if (num!=4) k = inds[num];\n    int i = inds[num-1] + 1;\n    vec2 f = polygons[i-1];\n    vec2 v1 = polygons[i];\n    vec2 v2 = polygons[i+1];\n    while(i + 1 < k){\n        if(sign((f.x-uv.x)*(v2.y-f.y)-(v2.x-f.x)*(f.y-uv.y))==sign((v2.x-uv.x)*(v1.y-v2.y)-(v1.x-v2.x)*(v2.y-uv.y)) && sign((f.x-uv.x)*(v2.y-f.y)-(v2.x-f.x)*(f.y-uv.y))==sign((v1.x-uv.x)*(f.y-v1.y)-(f.x-v1.x)*(v1.y-uv.y)))\n            return true;\n        i++;\n        v1 = polygons[i];\n        v2 = polygons[i + 1];\n    }  \n    return false;\n}\n\nbool inFigure(in vec2 uv, in int num){\n    if (num==4) return inSphere(uv);\n    else return inPolygon(uv, num);\n    }\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv = fragCoord/iResolution.xy; // <0,1>\n        uv -=0.5;\n        uv.x *= iResolution.x/iResolution.y;\n        initPolygons(iTime);\n        initSphere(iTime);\n        vec3 col;\n        int i = 0;\n        float d;\n        float z = z_min;\n        while(i < n + sphere){\n            if(inFigure(uv, i)){\n                d = get_z(uv, i, iTime);\n            }\n            if(d > z){\n                z = d;\n                col = colAr[i];\n                if (i==2){\n                    float tmp1 = uv.y - polygons[7].y;\n                    tmp1 = tmp1/0.65+0.5;\n                    col = mix(green,red,tmp1);\n                }\n                if (i==4){\n                    //if ((uv.x - Centre.x) > 0.) col=white;\n                    //else col=violet;\n                    float tmp = uv.x-Centre.x;\n                    tmp=tmp/R/2.+0.5;\n                    col = mix(white,violet,tmp);\n                }\n                if((i==0)&&(!inFigure(uv, i))) col = BGcol;\n            }\n            i++;\n            \n        }\n        fragColor = vec4(col,1.0);\n        return;\n}","name":"Image","description":"","type":"image"}]}