{"ver":"0.1","info":{"id":"4ljXWm","date":"1444223232","viewed":453,"name":"Bouncing balls (anastadunbar)","username":"anastadunbar","description":"Bouncing pseudo-physics balls with bass sound when bouncing on the floor.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["procedural","2d","sound","random","physics","generated","pseudo","artifical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float clamps(float x) {\n    return clamp(x,0.,1.);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat sub_o_not(float x, float y) {\n    if (y >= 0.5) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 suv = ((uv-.5)*vec2(iResolution.x/iResolution.y,1.))+.5;\n    float r_time = iTime;\n    \n    float dur = 10.;\n    \n\tfloat time = fract(r_time/dur)*dur;\n    \n    float jumpheight = 0.;\n    float bouncespeed = 0.;\n    float velx = 0.;\n    \n    float draw1 = 0.;\n    \n    float radius = 0.03;\n    \n    float seed = floor(r_time/dur)*dur;\n    seed *= 20.;\n    \n    #define howmany 20.\n    \n    for (float i = 0.; i < howmany; i++) {\n    jumpheight = (pow(rand(vec2((i+seed)*24.)),3.)+0.2)/(time+0.4);\n    bouncespeed = (time/(2.+rand(vec2((i+seed),i*2.))))+1.;\n    velx = sub_o_not(2.4/((time/(i+2.))+1.),rand(vec2((i+seed)*1.)));\n    vec2 pos1 = vec2( (asin(sin(time*velx))/2.)+.5 , abs(sin(time*bouncespeed))*jumpheight )+vec2(0.,radius);\n    draw1 += clamps(1.-(length(suv-pos1)-radius)*300.);\n    }\n    \n    \n\tfragColor = vec4(vec3(draw1),1.0);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float clamps(float x) {\n    return clamp(x,0.,1.);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat sub_o_not(float x, float y) {\n    if (y >= 0.5) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n\n\nvec2 mainSound( in int samp,float iTime)\n{\n    float r_time = iTime;\n    \n    float dur = 10.;\n    \n\tfloat time = fract(r_time/dur)*dur;\n    \n    float jumpheight = 0.;\n    float bouncespeed = 0.;\n    float velx = 0.;\n    \n    float sound1 = 0.;\n    \n    float radius = 0.03;\n    \n    float seed = floor(r_time/dur)*dur;\n    seed *= 20.;\n    \n    #define howmany 20.\n    float volume = 0.;\n    for (float i = 0.; i < howmany; i++) {\n    jumpheight = (pow(rand(vec2((i+seed)*24.)),3.)+0.2)/(time+0.4);\n    bouncespeed = (time/(2.+rand(vec2((i+seed),i*2.))))+1.;\n    velx = sub_o_not(2.4/((time/(i+2.))+1.),rand(vec2((i+seed)*1.)));\n    vec2 pos1 = vec2( (asin(sin(time*velx))/2.)+.5 , abs(sin(time*bouncespeed))*jumpheight )+vec2(0.,radius);\n    volume = pow(1.-(pos1.y-radius),350.);\n    sound1 += (sin(time*(rand(vec2(i+seed))+2.)*200.)*max(volume,0.))*jumpheight;\n    }\n    \n    return vec2((sound1/howmany)*4.);\n}","name":"","description":"","type":"sound"}]}