{"ver":"0.1","info":{"id":"sly3WV","date":"1638405846","viewed":181,"name":"dot tunnel Ã—","username":"HaleyHalcyon","description":"aa","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (3.14159265 * 2.)\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\nvec3 color(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        HEX(0xb010b0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        HEX(0xb0ffb0),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0.95, 1., fract(x))\n    );\n}\n\n#define LENRES 3.\n#define ANGRES 40.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = fract(iTime / 4.);\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    float lenSq = log(uv.x * uv.x + uv.y * uv.y);\n    float angle = atan(uv.y, uv.x) / TAU;\n    lenSq * 1.05;\n    \n    float lenRd = round(lenSq * LENRES);\n    float angRd = round(angle * ANGRES);\n    \n    vec3 colA = color(fract(-0.41 * lenRd / LENRES + angRd / ANGRES * 1. - 1. * time));\n    \n    float spiral = sin(TAU * (\n         lenRd * 0.3 / LENRES\n       + angRd * 2./ ANGRES\n       + time * 3.\n    ));\n    \n    spiral = step(\n    length(\n    vec2(lenRd - lenSq * LENRES,\n    angRd - angle * ANGRES)\n    ),\n    spiral * 0.1 + 0.4);\n\n    // Time varying pixel color\n    vec3 col = colA * (spiral);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}