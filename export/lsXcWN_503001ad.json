{"ver":"0.1","info":{"id":"lsXcWN","date":"1488230165","viewed":190,"name":"Texture subsample test","username":"cubisttriangle","description":"Given a matrix to orient a texture, subsample the texture based on the inverse matrix.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 scale = vec3(0.5, 0.5, 1.0);\n    vec3 translate = vec3(0.25, 0.25, 1.0);\n    \n    bool move = true;\n    bool handleBorder = true;\n    vec4 borderColor = vec4(1.0, 0.0, 0.0, 1.0);\n    \n    if (move)\n    {\n        float timeFactor = abs(sin(iTime));\n        \n        scale.xy = scale.xy * timeFactor;\n        translate.xy = translate.xy * -timeFactor + vec2(0.5, 0.5);\n    }\n    \n    mat4 transform = mat4(\n        vec4(scale.x, 0.0, 0.0, 0.0),\n        vec4(0.0, scale.y, 0.0, 0.0),\n        vec4(0.0, 0.0, scale.z, 0.0),\n        vec4(translate.x, translate.y, translate.z, 1.0)\n    );\n    \n    mat4 inverseTransform = inverse(transform);\n    \n    vec4 boundMin = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 boundMax = vec4(1.0, 1.0, 0.0, 1.0);\n    \n    vec2 transformedMin = (transform * boundMin).xy;\n    vec2 transformedMax = (transform * boundMax).xy;\n       \n    if (handleBorder &&\n        (uv.x < transformedMin.x || uv.y < transformedMin.y ||\n         uv.x > transformedMax.x || uv.y > transformedMax.y))\n    {\n        fragColor = borderColor;\n    }\n    else\n    {\n        vec4 uvSample = inverseTransform * vec4(uv, 0.0, 1.0);\n        fragColor = texture(iChannel0, uvSample.xy);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}