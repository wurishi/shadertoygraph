{"ver":"0.1","info":{"id":"fs3yRs","date":"1654002540","viewed":97,"name":"Better Multibrot (c^n)","username":"MisterSirCode","description":"This is different from the z^n multibrot. This is the z^2 * c^n multibrot. This one works with mandelbrot smooth shading, its visually closer to the original\n\nPart of my Simple Fractals playlist: [URL]https://www.shadertoy.com/playlist/NfSGW3[/URL]","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","multibrot"],"hasliked":0,"parentid":"fscyzB","parentname":"11 Line Mandelbrot"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y) * 1.5;\n    vec2 z = vec2(0.0);\n    float l = 0.0;\n    for (l = 0.0; l < 100.0; l += 1.0) {\n        z = cMul(cSqr(z), cPow(uv, (sin(iTime / 2.0) + 1.0) * 4.0)) + uv;\n        if(dot(z, z) > 65536.0) break;\n    } // Divide iterations by maximum\n    fragColor = vec4(vec3(sqrt(l / 100.0)) * vec3(0.4, 1.0, 1.3), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float cAbs(vec2 z) {\n    return length(z);\n}\n\nfloat cArg(vec2 a) {\n    return atan(a.y, a.x);\n}\n\nvec2 cSqr(vec2 z) {\n    return vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y);\n}\n\nvec2 cMul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 cExp(vec2 z) {\n    return exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\n\nvec2 cLog(vec2 a) {\n    return vec2(log(cAbs(a)), cArg(a));\n}\n\nvec2 cPow(vec2 z, vec2 a) {\n    return cExp(cMul(cLog(z), a));\n}\n\nvec2 cPow(vec2 z, float a) {\n    return cExp(cLog(z) * a);\n}","name":"Common","description":"","type":"common"}]}