{"ver":"0.1","info":{"id":"lcVXW1","date":"1715133664","viewed":18,"name":"olaf","username":"WalterCubix","description":"sdf","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere( vec3 p, float s) {\n\n    return length(p) - s;\n\n}\n\n\nfloat map(vec3 p){\n    \n    float r = .5;\n    \n    vec3 spherePos = vec3 (0, 0, 0);\n    float sphere = sdSphere(p - spherePos, r); //sphere SDF\n    \n    //mu√±eco de nieve \n   \n    float sphereH = sdSphere(p - vec3 (0, .7, 0), r-.1);\n    float ground = p.y + r;\n    \n    float total_dis = min(sphere, min(sphereH, ground));\n    \n    \n    return total_dis;\n       \n}\n\nvec3 calcNormal (in vec3 p){\n\n    vec2 e = vec2(0.001, 0);\n   \n    return normalize( vec3(map(p+e.xyy)-map(p-e.xyy),\n                           map(p+e.yxy)-map(p-e.yxy),\n                           map(p+e.yyx)-map(p-e.yyx)));\n                           \n                           \n}\nfloat castRay(in vec3 ro, vec3 rd){\n\n    float t = 0.; // distancia total viajada\n    \n   //raymarching\n   \n   for (int i = 0; i < 80; i++){\n   \n       vec3 p = ro + rd * t; //posicion a lo largo del rayo\n   \n       float d = map(p);\n       \n       if(d < 0.001)\n           break;\n       t += d;\n       \n       if (d > 100.) break;\n     \n   }\n    \n    if(t>20.0) t=-1.0;\n    \n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    //inicializacion\n    \n    vec3 ro = vec3(0, 0, -2); //origen del rayo\n    vec3 rd = normalize(vec3(uv,1.5)); //direccion del rayo\n    \n    vec3 col = vec3(.65,.75,.9) -.9 * rd.y; //color del cielo\n    float t = castRay(ro, rd); \n   \n   if (t > 0.0){\n   \n       vec3 pos = ro + rd * t;\n       vec3 nor = calcNormal(pos);\n       \n       vec3 sun_dir = vec3 (0.8, 0.4, -0.4);\n       float sun_dif = clamp(dot(nor,sun_dir),0.0,1.0);\n       float sun_sha = step(castRay(pos + nor*0.001, sun_dir),0.0);\n       float sky_dif = clamp(dot(nor, vec3(0.0,1.0,0.0)),0.0,1.0);\n       \n       col = vec3(0.8,0.4,0.3)*sun_dif*sun_sha;\n       col += vec3(0.8, 0.6, 0.6)*sky_dif;\n   }\n       \n   //colorear\n \n   col = pow (col, vec3(0.4545));\n   fragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}