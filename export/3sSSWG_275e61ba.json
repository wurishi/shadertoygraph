{"ver":"0.1","info":{"id":"3sSSWG","date":"1554795586","viewed":109,"name":"Purple Mercury 1","username":"thewaste","description":"A test of importing/customising a shader from ShaderFrog (http://shaderfrog.com/view/293)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["snoise","metal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// A test of importing/customising a shader from ShaderFrog (http://shaderfrog.com/view/293)\n// \n// None of this code is mine. \n// Don't ask me how it works... it's still basically witchcraft to me (for now)\n//\n// ShaderFrog description: \n// Based on Molten Noise. This is based on \"fractal brownian motion\" found in the editor http://pixelshaders.com/editor/ with 4d tiling noise referenced in the source.\n// No author credit found.\n//\n// \n/////////////////////////////////////////////////////////\n\n\n\n\n\nprecision highp float;\nprecision highp int;\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n#define PI 3.14159\n\nfloat permutations = 10.0;\nfloat iterations = 1.0;\nvec2 uvScale = vec2(1);\nvec3 color1 = vec3(0.0,0.0,0.0);\nvec3 color2 = vec3(2.0,1.0,1.0);\nvec3 color3 = vec3(0.0,0.0,1.0);\nfloat brightness = 1.0;\nfloat speed = 1.0;\n\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip) {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p,s;\n\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n    return p;\n}\n\nfloat snoise(vec4 v) {\n    const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n            0.276393202250021,  // 2 * G4\n            0.414589803375032,  // 3 * G4\n            -0.447213595499958); // -1 + 4 * G4\n\n    // First corner\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n    // Other corners\n\n    // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n    //  i0.x = dot( isX, vec3( 1.0 ) );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n    //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    // i0 now contains the unique values 0,1,2,3 in each channel\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n    //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n    //  x1 = x0 - i1  + 1.0 * C.xxxx\n    //  x2 = x0 - i2  + 2.0 * C.xxxx\n    //  x3 = x0 - i3  + 3.0 * C.xxxx\n    //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n    // Permutations\n    i = mod289(i);\n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute( permute( permute( permute (\n                        i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n                    + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n                + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n            + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n    // Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n    // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4,p4));\n\n    // Mix contributions from the five corners\n    vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n    vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n    m0 = m0 * m0;\n    m1 = m1 * m1;\n    return(\n        49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n            + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) )\n    );\n\n}\n\n// makes a pseudorandom number between 0 and 1\nfloat hash(float n) {\n    return fract(sin(n)*93942.234);\n}\n\nfloat clampedNoise( vec4 p ) {\n    return clamp( 0.4 * 0.2 + snoise( p ), 0.0, 1.0 );\n}\n\n// rotation matrix\nmat2 m = mat2(0.6,0.8,-0.8,0.6);\n\n// fractional brownian motion (i.e. photoshop clouds)\nfloat fbm(vec4 p) {\n    float f = 0.0;\n    f += 0.5 * clampedNoise(vec4( p.xy * m, p.zw * m ));\n    p *= 2.02;\n    f += 0.25 * clampedNoise(vec4( p.xy * m, p.zw * m ));\n    p *= 2.01;\n    f += 0.125 * clampedNoise(vec4( p.xy * m, p.zw * m ));\n    p *= 2.03;\n    f += 0.0625 * clampedNoise(vec4( p.xy * m, p.zw * m ));\n    f /= 0.9375;\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // relative coordinates\n    \n    // Some compensation for the fact that screens aren't square (yeah, it's cheating.)\n    vec2 vUv = vec2(fragCoord.x / iResolution.x,(fragCoord.y / iResolution.y)/1.5 );\n    \n    vec2 p = vUv * uvScale;\n    // +.30 = hurry up and get to the good bit (yeah more cheating)\n    float elapsed = (iTime+20.) * speed * 0.01;\n\n    float s = vUv.x * uvScale.x;\n    float t = vUv.y * uvScale.y;\n\n    // Tiling 4d noise based on\n    // https://gamedev.stackexchange.com/questions/23625/how-do-you-generate-tileable-perlin-noise/23639#23639\n    float multiplier = iterations / ( 2.0 * PI );\n    float nx = cos( s * 2.0 * PI ) * multiplier;\n    float ny = cos( t * 2.0 * PI ) * multiplier;\n    float nz = sin( s * 2.0 * PI ) * multiplier;\n    float nw = sin( t * 2.0 * PI ) * multiplier;\n\n    vec4 tile4d = vec4( nx, ny, nz, nw );\n\n    vec2 a = vec2(\n        fbm( tile4d + elapsed * 1.1 ),\n        fbm( tile4d - elapsed * 1.3 )\n    );\n\n    vec2 b = vec2(\n        fbm( tile4d + elapsed * 1.2 + a.x * 2.0 ),\n        fbm( tile4d - elapsed * 1.2 + a.y * 3.0 )\n    );\n\n    float surf = fbm( tile4d + elapsed + length( b ) * permutations );\n\n    // mix in some color\n    vec3 colorOutput = brightness * (\n        ( ( b.x + surf ) * color1 ) +\n        ( ( b.y + surf ) * color2 ) +\n        ( ( surf + b.x ) * color3 )\n    );\n\n    fragColor = vec4( colorOutput, 1.);\n}","name":"Image","description":"","type":"image"}]}