{"ver":"0.1","info":{"id":"M3XBzM","date":"1728156110","viewed":38,"name":"galaxy spiral with fbm ","username":"nayk","description":"source https://www.shadertoy.com/view/4s23zz  https://glslsandbox.com/e#65393.0","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["spiral","galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License CC0: Spiral galaxy\n//  Would benefit from anti-aliasing but looks okish when I run it in fullscreen in FF\n//  Lots of random coding and little thought so the code is kind of messy\n#define PI  3.141592654\n#define TAU (2.0*PI)\n\n#define TIME (iTime*0.1)\n#define n1Q(p) p *= ri(round(atan(p.x, p.y) * 10.) / 2.)\n#define ri(a) mat2(cos(a + asin(vec4(0,1.,-1.,0))))\n#define LESS(a,b,c) mix(a,b,step(0.,c))\n\n#define SABS(x,k)    LESS((.5/k)*x*x+k*.5,abs(x),abs(x)-k)\n\n#define RESOLUTION   iResolution\n\nconst float twirly =2.5;\n\nvec2 toPolar(vec2 p) {\nn1Q(p.xy);\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nfloat noise1(vec2 p) {\n  float s = 1.0;\n\n\n  p *= tanh(0.1*length(p));\n  float tm = TIME;\n\n  float a = cos(p.x);\n  float b = cos(p.y);\n\n  float c = cos(p.x*sqrt(3.5)+tm);\n  float d = cos(p.y*sqrt(1.5)+tm);\n\n  return a*b*c*d;\n}\n\nvoid rot(inout vec2 p, float a) {\nn1Q(p.xy);\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nvec2 twirl(vec2 p, float a, float z) {\n float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    p.xy*=ma;\nn1Q(p.xy);\n  vec2 pp = toPolar(p);\n  pp.y += pp.x*twirly + a;\n  p = toRect(pp);\n  \n  p *= z;\n  \n  return p;\n}\n\nfloat galaxy(vec2 p, float a, float z) {\nn1Q(p.xy);\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    p.xy*=ma;\n  p = twirl(p, a, z);  \n  return noise1(p);\n}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec2 raySphere(vec3 ro, vec3 rd, vec3 center, float radius)\n{\n    //get the vector from the center of this circle to where the ray begins.\n    vec3 m = ro - center.xyz;\n\n    //get the dot product of the above vector and the ray's vector\n    float b = dot(m, rd);\n\n    float c = dot(m, m) - radius*radius;\n\n    //exit if r's origin outside s (c > 0) and r pointing away from s (b > 0)\n    if(c > 0.0 && b > 0.0) return vec2(-1.0, -1.0);\n\n    //calculate discriminant\n    float discr = b * b - c;\n\n    //a negative discriminant corresponds to ray missing sphere\n    if(discr < 0.0) return vec2(-1.0);\n\n    //ray now found to intersect sphere, compute smallest t value of intersection\n    float normalMultiplier = 1.0;\n    float s = sqrt(discr);\n    float t0 = -b - s;\n    float t1 = -b + s;;\n    \n    // return the time t that the collision happened, as well as the surface normal\n    return vec2(t0, t1);\n}\n\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = fract( p*0.6180339887 );\n    p *= 25.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n// consider replacing this by a proper noise function\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = hash(p+vec2(0,0));\n\tfloat b = hash(p+vec2(1,0));\n\tfloat c = hash(p+vec2(0,1));\n\tfloat d = hash(p+vec2(1,1));\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}\n\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*(-1.0+2.0*noise( p )); p = mtx*p*2.02;\n    f += 0.2500*(-1.0+2.0*noise( p )); p = mtx*p*2.03;\n    f += 0.1250*(-1.0+2.0*noise( p )); p = mtx*p*2.01;\n    f += 0.0625*(-1.0+2.0*noise( p ));\n    return f/0.9375;\n}\n\nfloat fbm6( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p ); p = mtx*p*2.02;\n    f += 0.250000*noise( p ); p = mtx*p*2.03;\n    f += 0.125000*noise( p ); p = mtx*p*2.01;\n    f += 0.062500*noise( p ); p = mtx*p*2.04;\n    f += 0.031250*noise( p ); p = mtx*p*2.01;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2( fbm4(p+vec2(1.0)), fbm4(p+vec2(6.2)) );\n}\n\nvec2 fbm6_2( vec2 p )\n{\n    return vec2( fbm6(p+vec2(9.2)), fbm6(p+vec2(5.7)) );\n}\n\nfloat func( vec2 q, out vec2 o, out vec2 n )\n{\n    q += 0.05*sin(vec2(0.11,0.13)*iTime + length( q )*4.0);\n    \n    q *= 0.7 + 0.2*cos(0.05*iTime);\n\n    o = 0.5 + 0.5*fbm4_2( q );\n    \n    o += 0.02*sin(vec2(0.13,0.11)*iTime*length( o ));\n\n    n = fbm6_2( 4.0*o );\n\n    vec2 p = q + 2.0*n + 1.0;\n\n    float f = 0.5 + 0.5*fbm4( 2.0*p );\n\n    f = mix( f, f*f*f*3.5, f*abs(n.x) );\n\n    f *= 1.0-0.5*pow( 0.5+0.5*sin(8.0*p.x)*sin(8.0*p.y), 8.0 );\n\n    return f;\n}\n\nfloat funcs( in vec2 q )\n{\n    vec2 t1, t2;\n    return func(q,t1,t2);\n}\n\nvec3 stars(vec2 p) {\n  float l = length(p);\n  \n    \nn1Q(p.xy);\n  vec2 pp = toPolar(p);\n  pp.x /= (1.0+length(pp.x))*0.5;\n  p = toRect(pp);\n\n  float sz = 0.0075;\n  \n  vec3 s = vec3(10000.0);\n    \n  for (int i = 0; i < 3; ++i) {  \n   \n    vec2 ip = p;\n    vec2 n = mod2(ip, vec2(sz));\n    float r = rand(n);\n    vec2 o = -1.0 + 2.0*vec2(r, fract(r*1000.0));\n    s.x = min(s.x, length(ip-0.25*sz*o));\n    s.yz = n*0.1;\n  }\n  \n  return s;\n}\n\nfloat height(vec2 p) {\n\n  float ang = atan(p.y, p.x);\n  float l = length(p);\n  float sp = mix(1.0, pow(0.75 + 0.25*sin(2.0*(ang + l*twirly)), 3.0), tanh(6.0*l));\n  float s = 0.0;\n  float a = 1.0;\n  float f = 15.0;\n  float d = 0.0;\n  for (int i = 0; i < 11; ++i) {\n    float g = a*galaxy(p, TIME*(0.025*float(i)), f);\n    s += g;\n    a *= sqrt(0.45);\n    f *= sqrt(2.0);\n    d += a;\n  }\n  \n  s *= sp;\n  \n  return SABS((-0.25+ s/d), 0.5)*exp(-5.5*l*l);\n}\n\nvec3 normal(vec2 p) {\n  vec2 eps = vec2(0.000125, 0.0);\n  n1Q(p.xy);\n  vec3 n;\n  \n  n.x = height(p - eps.xy) - height(p + eps.xy);\n  n.y = 2.0*eps.x;\n  n.z = height(p - eps.yx) - height(p + eps.yx);\n  \n  return normalize(n);\n}\n\nconst vec3 colDust = vec3(1.0, 0.9, 0.75);\n\nvec3 galaxy(vec2 p, vec3 ro, vec3 rd, float d) {\nn1Q(p.xy);\n  float h = height(p);\n  \n  vec3 s = stars(p);\n  float th = tanh(h);\n  vec3 n = normal(p);\n  \n  vec3 p3 = vec3(p.x, th, p.y);\n  float lh = 0.5;\n  vec3 lp1 = vec3(-0.0, lh, 0.0);\n  vec3 ld1 = normalize(lp1 - p3);\n  vec3 lp2 = vec3(0.0, lh, 0.0);\n  vec3 ld2 = normalize(lp2 - p3);\n\n  float l = length(p);\n  float tl = tanh(l);\n\n  float diff1 = max(dot(ld1, n), 0.0);\n  float diff2 = max(dot(ld2, n), 0.0);\n\n  vec3 col = vec3(0.0);\n  col += vec3(0.5, 0.5, 0.75)*h;\n//  col += vec3(0.5)*pow(diff1, 20.0);\n  col += 0.25*pow(diff2, 4.0);\n  col += pow(vec3(0.5)*h, n.y*1.75*(mix(vec3(0.5, 1.0, 1.5), vec3(0.5, 1.0, 1.5).zyx, 1.25*tl)));\n//  col += 0.9*vec3(1.0, 0.9, 0.75)*exp(-10*l*l);\n\n\n  float sr = rand(s.yz);\n  float si = pow(th*sr, 0.25)*0.001;\n  vec3 scol = sr*5.0*exp(-2.5*l*l)*tanh(pow(si/(s.x), 2.5))*mix(vec3(0.5, 0.75, 1.0), vec3(1.0, 0.75, 0.5), sr*0.6);\n  scol = clamp(scol, 0.0, 1.0);\n  col += scol*smoothstep(0.0, 0.35, 1.0-n.y);\n  \n  float ddust = (h - ro.y)/rd.y;\n  if (ddust < d) {\n    float t = d - ddust;\n    col += 0.7*colDust*(1.0-exp(-2.0*t));\n  }\n\n  return col;\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvec3 render(vec3 ro, vec3 rd) {\n  float dgalaxy = (0.0 - ro.y)/rd.y;\n  \n  vec3 col = vec3(0);\n  \n  if (dgalaxy > 0.0) {\n    col = vec3(0.5);\n    vec3 p = ro + dgalaxy*rd;\n    \n    col = galaxy(p.xz, ro, rd, dgalaxy);\n  }\n  \n  vec2 cgalaxy = raySphere(ro, rd, vec3(0.0), 0.125);\n\n  float t;\n  \n  if (dgalaxy > 0.0 && cgalaxy.x > 0.0) {\n    float t0 = max(dgalaxy - cgalaxy.x, 0.0);\n    float t1 = cgalaxy.y - cgalaxy.x;\n    t = min(t0, t1);\n  } else if (cgalaxy.x < cgalaxy.y){\n    t = cgalaxy.y - cgalaxy.x;\n  }\n  \n  col += 1.7*colDust*(1.0-exp(-1.0*t));\n  \n  \n  return col;\n}\n\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p2 = -1. + 2. * q;\n  p2.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 ro = vec3(0.0, 1.5, 0.0);\n  vec3 la = vec3(0.0, 0.0, 0.0);\n  vec3 up = vec3(0.0, 0.0, 1.0);\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize(p2.x*uu + p2.y*vv + 2.5*ww);\n  \n     vec3 tot = vec3(0.0);\n\n    for( int mi=0; mi<AA; mi++ )\n    for( int ni=0; ni<AA; ni++ )\n    {\n        // pixel coordinates\n        vec2 of = vec2(float(mi),float(ni)) / float(AA) - 0.5;\n        vec2 q = (2.0*(fragCoord+of)-iResolution.xy)/iResolution.y;\n  \n      \n\n        vec2 o, n;\n        float f = func(q, o, n);\n        \n        vec3 col = vec3(0.2,0.1,0.4);\n        col = mix( col, vec3(0.3,0.05,0.05), f );\n        col = mix( col, vec3(0.9,0.9,0.9), dot(n,n) );\n        col = mix( col, vec3(0.5,0.2,0.2), 0.5*o.y*o.y );\n        col = mix( col, vec3(0.0,0.2,0.4), 0.5*smoothstep(1.2,1.3,abs(n.y)+abs(n.x)) );\n        col *= f*2.0;\n\n        vec2 ex = vec2( 1.0 / iResolution.x, 0.0 );\n        vec2 ey = vec2( 0.0, 1.0 / iResolution.y );\n      \n        vec3 nor = normalize( vec3( funcs(q+ex) - f, ex.x, funcs(q+ey) - f ) );\n        \n        vec3 lig = normalize( vec3( 0.9, -0.2, -0.4 ) );\n        float dif = clamp( 0.3+0.7*dot( nor, lig ), 0.0, 1.0 );\n\n        vec3 lin  = vec3(0.85,0.90,0.95)*(nor.y*0.5+0.5);\n             lin += vec3(0.15,0.10,0.55)*dif;\n\n        col *= lin;\n        col = vec3(1.0)-col;\n        col = col*col;\n        col *= vec3(0.2,0.25,1.2);\n        \n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \tvec2 p = fragCoord / iResolution.xy;\n\t\n\ttot *= 0.5 + 0.5 * sqrt(16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y));\n\t\n  \n  \n  \n  vec3 col = render(ro, rd);\n\n  col = postProcess(col, q);\n\n  fragColor = vec4(col+tot, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}