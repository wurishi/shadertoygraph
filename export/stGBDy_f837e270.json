{"ver":"0.1","info":{"id":"stGBDy","date":"1665157350","viewed":122,"name":"Fork Celestial  hjd3481","username":"hjd3481","description":"The hundred brightest stars, as seen from Earth. \n[Edit] Small update to depth-based colour to improve depth cue and stop popping.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["stars","psf"],"hasliked":0,"parentid":"fdcGD4","parentname":"Celestial globe"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- euler angles ---\n\nmat3 rot_xy(float t) {\n    return mat3(\n         cos(t), sin(t), 0.0,\n        -sin(t), cos(t), 0.0,\n            0.0,    0.0, 1.0\n    );\n}\n\nmat3 rot_yz(float t) {\n    return mat3(\n        1.0,     0.0,    0.0,\n        0.0,  cos(t), sin(t),\n        0.0, -sin(t), cos(t)\n    );\n}\n\n// attitude = vec3(precession, nutation spin)\nmat3 euler_rot(vec3 attitude) {\n    return rot_xy(attitude[0]) * rot_yz(attitude[1]) * rot_xy(attitude[2]);\n}\n\n// --- stars ---\n\n// courtesy of Tanner Helland. temperature is in hectokelvin\n// https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html\nvec3 blackbody_color(float temp) {\n  vec3 color = vec3(1., 0.390081578769 * log(temp) - 0.631841443789, 1.);\n  if (temp > 66.) {\n    float temp_sh = temp - 60.;\n    color.r = 1.29293618606 * pow(temp_sh, -0.1332047592);\n    color.g = 1.12989086089 * pow(temp_sh, -0.0755148492);\n  } else {\n    if (temp < 19.) {\n      color.b = 0.;\n    } else {\n      color.b = 0.54320678911*log(temp - 10.) - 1.19625408914;\n    }\n  }\n  return clamp(color, 0., 1.);\n}\n\nvec3 point_glow(float r_sq, vec3 color) {\n  float irr = 2.*exp(-2e3*r_sq);\n  return clamp(irr*color, 0., 1.);\n}\n\n// --- main image ---\n\nconst int N = 100;\n\nvec3 loc[N] = vec3[](\n  vec3(-0.187, 0.939, -0.288),\n  vec3(-0.063, 0.603, -0.795),\n  vec3(-0.784, -0.527, 0.329),\n  vec3(-0.374, -0.313, -0.873),\n  vec3(0.125, -0.769, 0.626),\n  vec3(0.130, 0.682, 0.719),\n  vec3(0.195, 0.970, -0.143),\n  vec3(-0.418, 0.904, 0.091),\n  vec3(0.493, 0.224, -0.841),\n  vec3(0.021, 0.991, 0.129),\n  vec3(-0.424, -0.254, -0.869),\n  vec3(0.459, -0.875, 0.154),\n  vec3(0.344, 0.895, 0.284),\n  vec3(-0.345, -0.826, -0.445),\n  vec3(-0.914, -0.356, -0.194),\n  vec3(-0.392, 0.791, 0.470),\n  vec3(0.837, -0.234, -0.494),\n  vec3(-0.494, -0.104, -0.863),\n  vec3(0.456, -0.536, 0.711),\n  vec3(-0.449, -0.052, -0.892),\n  vec3(-0.374, -0.313, -0.873),\n  vec3(-0.865, 0.458, 0.207),\n  vec3(-0.221, 0.846, -0.484),\n  vec3(-0.538, -0.074, -0.840),\n  vec3(-0.092, -0.792, -0.603),\n  vec3(0.151, 0.982, 0.111),\n  vec3(0.129, 0.868, 0.479),\n  vec3(-0.259, 0.231, -0.938),\n  vec3(0.104, 0.994, -0.021),\n  vec3(-0.449, -0.052, -0.892),\n  vec3(0.603, -0.320, -0.731),\n  vec3(-0.544, -0.131, 0.829),\n  vec3(-0.363, 0.572, -0.735),\n  vec3(0.405, 0.502, 0.764),\n  vec3(-0.459, 0.115, 0.881),\n  vec3(-0.263, 0.856, -0.445),\n  vec3(0.087, -0.821, -0.565),\n  vec3(-0.296, 0.412, -0.862),\n  vec3(-0.581, -0.295, 0.758),\n  vec3(-0.072, -0.728, -0.682),\n  vec3(0.001, 0.708, 0.706),\n  vec3(-0.110, -0.341, -0.934),\n  vec3(-0.157, 0.946, 0.282),\n  vec3(0.326, -0.441, -0.836),\n  vec3(-0.380, 0.435, -0.816),\n  vec3(-0.094, 0.947, -0.308),\n  vec3(-0.778, 0.610, -0.151),\n  vec3(-0.341, 0.778, 0.528),\n  vec3(0.780, 0.483, 0.398),\n  vec3(-0.451, -0.778, 0.437),\n  vec3(0.214, -0.871, -0.443),\n  vec3(0.010, 0.008, 1.000),\n  vec3(0.934, 0.180, -0.309),\n  vec3(0.084, 0.996, -0.034),\n  vec3(-0.685, -0.423, -0.593),\n  vec3(0.053, 0.984, -0.168),\n  vec3(0.873, 0.032, 0.486),\n  vec3(0.776, 0.244, 0.582),\n  vec3(-0.107, -0.970, 0.217),\n  vec3(-0.201, -0.185, 0.962),\n  vec3(0.645, -0.226, -0.730),\n  vec3(0.515, 0.553, 0.655),\n  vec3(-0.967, 0.046, 0.252),\n  vec3(-0.646, -0.118, -0.754),\n  vec3(0.444, -0.621, 0.646),\n  vec3(-0.531, 0.495, -0.687),\n  vec3(0.122, 0.993, -0.005),\n  vec3(-0.529, -0.720, 0.450),\n  vec3(-0.009, -0.623, 0.782),\n  vec3(0.543, 0.097, 0.834),\n  vec3(-0.387, 0.333, -0.860),\n  vec3(-0.393, 0.657, -0.643),\n  vec3(0.634, 0.380, 0.673),\n  vec3(-0.537, -0.206, 0.818),\n  vec3(0.512, 0.021, 0.859),\n  vec3(-0.248, -0.788, -0.563),\n  vec3(-0.540, -0.251, -0.804),\n  vec3(-0.515, -0.440, -0.736),\n  vec3(-0.577, -0.465, -0.671),\n  vec3(-0.460, -0.800, -0.385),\n  vec3(-0.536, 0.139, 0.833),\n  vec3(0.735, 0.085, -0.673),\n  vec3(0.817, -0.550, 0.171),\n  vec3(-0.059, -0.775, -0.630),\n  vec3(0.856, -0.214, 0.471),\n  vec3(-0.207, -0.940, -0.271),\n  vec3(-0.592, 0.016, 0.806),\n  vec3(0.351, -0.298, 0.888),\n  vec3(-0.313, 0.814, -0.489),\n  vec3(0.550, -0.621, 0.559),\n  vec3(0.474, 0.120, 0.872),\n  vec3(0.937, -0.230, 0.262),\n  vec3(-0.443, 0.365, -0.819),\n  vec3(0.698, 0.712, 0.071),\n  vec3(-0.594, -0.328, -0.735),\n  vec3(-0.348, -0.920, -0.183),\n  vec3(-0.918, 0.186, 0.351),\n  vec3(0.113, 0.945, -0.306),\n  vec3(-0.951, -0.066, -0.301),\n  vec3(-0.633, -0.023, -0.774)\n);\n\nfloat mag[N] = float[](\n  -1.460,\n  -0.720,\n  -0.040,\n  -0.010,\n  0.030,\n  0.080,\n  0.120,\n  0.380,\n  0.460,\n  0.500,\n  0.610,\n  0.770,\n  0.850,\n  0.960,\n  0.980,\n  1.140,\n  1.160,\n  1.250,\n  1.250,\n  1.330,\n  1.330,\n  1.350,\n  1.500,\n  1.630,\n  1.630,\n  1.640,\n  1.650,\n  1.680,\n  1.700,\n  1.730,\n  1.740,\n  1.770,\n  1.780,\n  1.790,\n  1.790,\n  1.840,\n  1.850,\n  1.860,\n  1.860,\n  1.870,\n  1.900,\n  1.920,\n  1.930,\n  1.940,\n  1.960,\n  1.980,\n  1.980,\n  1.980,\n  2.000,\n  2.000,\n  2.020,\n  2.020,\n  2.040,\n  2.050,\n  2.060,\n  2.060,\n  2.060,\n  2.060,\n  2.080,\n  2.080,\n  2.100,\n  2.120,\n  2.140,\n  2.170,\n  2.200,\n  2.210,\n  2.230,\n  2.230,\n  2.230,\n  2.230,\n  2.250,\n  2.250,\n  2.260,\n  2.270,\n  2.270,\n  2.290,\n  2.300,\n  2.300,\n  2.310,\n  2.320,\n  2.370,\n  2.390,\n  2.390,\n  2.410,\n  2.420,\n  2.430,\n  2.440,\n  2.440,\n  2.450,\n  2.460,\n  2.470,\n  2.490,\n  2.500,\n  2.530,\n  2.550,\n  2.560,\n  2.560,\n  2.580,\n  2.590,\n  2.600\n);\n\nfloat temp[N] = float[](\n  101.252,\n  85.713,\n  42.507,\n  55.677,\n  101.252,\n  52.807,\n  105.156,\n  67.755,\n  126.917,\n  33.332,\n  143.540,\n  80.114,\n  37.343,\n  33.564,\n  143.540,\n  47.427,\n  91.255,\n  143.540,\n  91.255,\n  146.328,\n  50.506,\n  117.438,\n  138.307,\n  36.630,\n  140.869,\n  140.869,\n  121.033,\n  101.252,\n  133.484,\n  152.288,\n  121.033,\n  103.818,\n  140.869,\n  64.810,\n  45.807,\n  56.710,\n  105.156,\n  41.575,\n  133.484,\n  68.802,\n  97.658,\n  38.860,\n  101.252,\n  135.848,\n  96.522,\n  143.540,\n  38.860,\n  97.658,\n  44.092,\n  90.276,\n  140.869,\n  59.675,\n  46.952,\n  138.307,\n  47.189,\n  129.024,\n  117.438,\n  36.770,\n  85.713,\n  38.392,\n  36.490,\n  107.951,\n  91.255,\n  102.517,\n  56.710,\n  35.677,\n  140.869,\n  103.818,\n  37.637,\n  43.684,\n  83.211,\n  152.288,\n  40.001,\n  98.824,\n  72.168,\n  44.092,\n  140.869,\n  135.848,\n  133.484,\n  119.205,\n  103.818,\n  45.365,\n  37.489,\n  140.869,\n  35.545,\n  94.336,\n  101.252,\n  80.114,\n  112.471,\n  46.718,\n  124.885,\n  106.533,\n  131.212,\n  35.944,\n  140.869,\n  98.824,\n  88.388,\n  80.864,\n  117.438,\n  119.205\n);\n\nconst float VIEW = 1.2;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 u = VIEW * (2.*fragCoord - iResolution.xy) / iResolution.y;\n  mat3 rot = euler_rot(iTime*sqrt(vec3(0.04, 0.1, 0.09)));\n  vec3 color = vec3(0.);\n  for (int i = 0; i < N; i++) {\n    vec3 v = rot*loc[i];\n    float smallness = pow(2., 0.5*(mag[i] - mag[0]));\n    vec2 s = smallness * (u - v.xy / (1. + 0.21*v.z));\n    vec3 star_color = point_glow(dot(s, s), blackbody_color(temp[i]));\n    \n    // fade the stars that are behind the globe\n    star_color = mix( star_color, star_color * vec3(0.2,0.25,0.35) * smoothstep(1.5, 0.0, v.z), smoothstep( -0.05, 0.05, v.z ) );\n\n    color += star_color;\n  }\n  fragColor = vec4(clamp(color, 0., 1.), 1.);\n}","name":"Image","description":"","type":"image"}]}