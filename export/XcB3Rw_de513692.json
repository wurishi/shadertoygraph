{"ver":"0.1","info":{"id":"XcB3Rw","date":"1703932342","viewed":39,"name":"Basic Raymarching and neon","username":"nayk","description":"neon, colorful, stars","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["colorful","stars","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/lfjGzD*/\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(12,13,11))*.5+.5)\n#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define MIN_DISTANCE 0.001\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\n\nfloat SDFSphere(vec3 p)\n{\n    return length(p - vec3(0, 1.5, 6)) - 1.;\n}\nfloat SDFPlane(vec3 p)\n{\n    return p.y;\n}\nfloat GetSDFWorld(vec3 p)\n{\n    return min(SDFSphere(p), SDFPlane(p));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO;\n    float dS;\n    \n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n           \n        dS = GetSDFWorld(p);\n    \n        dO += dS;\n        \n        if(dO > MAX_DISTANCE || dS < MIN_DISTANCE)\n            break;\n    }\n    return dO;\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec3 ro = vec3(0., 2., 0.);\n    \n    vec4 fragColor = O;\n    vec3 rd = normalize(vec3((C * 2. - iResolution.xy) / min(iResolution.x, iResolution.y), 1.));\n    rd.y+=0.2*cos(iTime);\n    float d = RayMarch(ro, rd);\n    \n    d /= 22.;\n    \n    vec4 col = vec4(d, d, d, 1.);\n    vec3 p,q,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d2;\n        p.z+=iTime*0.0;\n        p.yx*=-mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        a=15.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    2.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    2.+cos(iTime*.5)*5.\n                 )*col.xyz;\n         }\n        g+=e=length(p.yz)/s;\n       \n    }\n    \n    vec2 uv=C.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,tan(iTime*0.01));\n\tfloat time=iTime*speed+.25;\n\n\t//mouse rotation\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, C, from, dir);\n    O*=fragColor;\n}","name":"Image","description":"","type":"image"}]}