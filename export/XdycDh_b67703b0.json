{"ver":"0.1","info":{"id":"XdycDh","date":"1521712937","viewed":407,"name":"Input-Mouse-v2.2","username":"tholzer","description":"A slightly improved version of IQ's mouse input example now displaying mouse speed -  \nsee green bar at left bottom.\nImprovements and hints are welcome...\n","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["mouse","speed","input","mousepressed","mousebutton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------\n// Input_Mouse_v2_Image.glsl\n//----------------------------------------------------------\n// v2.0  2018-03-22 addvanced version\n// v2.1  2020-12-18 correction because of mouse data change!\n// v2.2  2023-05-23 drawings optimized \n//\n// slightly improved version of IQ's mouse input example\n//   https://www.shadertoy.com/view/Mss3zH\n//\n// tags:  mouse, speed, input, mousepressed\n//\n// See also:\n// Input - Keyboard    : https://www.shadertoy.com/view/lsXGzf\n// Input - Microphone  : https://www.shadertoy.com/view/llSGDh\n// Input - Mouse       : https://www.shadertoy.com/view/Mss3zH\n// Input - Sound       : https://www.shadertoy.com/view/Xds3Rr\n// Input - SoundCloud  : https://www.shadertoy.com/view/MsdGzn\n// Input - Time        : https://www.shadertoy.com/view/lsXGz8\n// Input - TimeDelta   : https://www.shadertoy.com/view/lsKGWV\n// Input - 3D Texture  : https://www.shadertoy.com/view/4llcR4\n//----------------------------------------------------------\n\nconst float SPID = 22.;   // speed identification\n\n// get global vec4 value from bufferA\nvec4 getGlobalVec4(float index)\n{\n  return texture(iChannel0, vec2(index, 18.0) / iResolution.xy);\n}\n\nfloat distanceToSegment( vec2 a, vec2 b, vec2 p )\n{\n  vec2 pa = p - a, ba = b - a;\n  float h = clamp (dot (pa,ba)/dot(ba,ba), 0.0, 1.0);\n  return length (pa - ba*h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pp = fragCoord.xy / iResolution.xx;  // 0..1\n  vec4 mp = iMouse / iResolution.xxxx;\n  vec3 col = vec3(0.0);\n\n  // draw mouse speed as green line \n  vec2 mouseSpeed = getGlobalVec4(SPID).xy;\n  float ld = distanceToSegment (vec2(0.01), vec2(0.01)+mouseSpeed, pp);\n  col = mix (col, vec3(0.0, 0.7, 0.2), 1.0-smoothstep(0.004,0.008, ld));\n\n  // gray point on button click\n  if (mp.w > 0.0) \n  col = mix( col, vec3(0.5), 1.0-smoothstep(0.1,0.105, 2.2*length(pp-mp.xy)) );\n\n  bool mousePressed = mp.z > 0.0;\n  if (mousePressed)\n  {\n    // draw cross at current mouse position \n    vec2 md = abs(iMouse.xy - fragCoord.xy);\n    if (md.x < 1.0 || md.y < 1.0)\n      col = mix (col, vec3(0.2, 0.2, 0.1), 1.0);\n    mp.w = abs(mp.w);   // correction because of mouse data change!\n    ld = distanceToSegment (mp.xy, mp.zw, pp);\n  }\n  // blue point \n  col = mix (col, vec3(0.0,0.0,1.0), 1.0-smoothstep(0.03,0.035, length(pp-abs(mp.zw))));\n  // yello line\n  if (mousePressed)\n  col = mix (col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.004,0.008, ld) );\n  // red point \n  col = mix (col, vec3(1.0,0.0,0.0), 1.0-smoothstep(0.025,0.03, length(pp - mp.xy)));\n  fragColor = vec4(col, 1.0);\n//fragColor = texture(iChannel0, fragCoord / iResolution.xy);  // show global values\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//=========================================================\n//  Input_Mouse_v2_BufA.glsl\n//=========================================================\n\nconst float SPID = 22.;   // speed identification\nconst float LMID = 44.;   // last mouse position\n\n//---------------------------------------------------------\n// read global value from buffer A\n//---------------------------------------------------------\nvec4 getGlobalVec4 (float index)\n{\n  return texture(iChannel0, vec2(index, 18.0) / iResolution.xy);\n}\n//---------------------------------------------------------\n// write global value as color bar to buffer A\n//---------------------------------------------------------\nvoid setGlobalVec4 (float index, vec4 value, vec2 fragCoord, out vec4 fragColor )\n{\n  if (   (fragCoord.x < (index + 6.0)) && (fragCoord.y < 22.0)\n      && (fragCoord.x > (index - 6.0)) && (fragCoord.y >= 16.0)\n     ) fragColor = value;\n}\n//----------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 lastMousePosition = getGlobalVec4(LMID).xy;\n  vec2 dist = (iMouse.xy / iResolution.xx) - lastMousePosition;\n  vec2 speed = vec2(4.*length(dist),0.0);\n     \n  setGlobalVec4(SPID, vec4(speed, 1., 1.), fragCoord, fragColor); \n  setGlobalVec4(LMID, iMouse / iResolution.xxxx, fragCoord, fragColor); \n}","name":"Buffer A","description":"","type":"buffer"}]}