{"ver":"0.1","info":{"id":"4tGSRK","date":"1484860885","viewed":202,"name":"Abelian Sandpile 1D","username":"chronos","description":"A simple one dimensional version of the Abelian Sandpile Model.\nThe cellular automaton displays typical fractal behavior, producing some interesting patterns.\nWikipedia note: \"This model only displays critical behaviour in *two or more* dimensions\"","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["fractal","1d","cellular","automaton","sandpile","abelian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float zoom = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 buffer = texture(iChannel0, (1.-(1.0-uv) / zoom));\n    float p = 2. / (1. + exp(-2.*buffer.r)) - 1.; // tanh(buffer.r)\n    vec3 color = vec3(1.-p);\n    \n    // Scanline\n    if(iResolution.y - fragCoord.y - 0.5 == zoom * mod(float(iFrame), iResolution.y)) {\n       color = vec3(0.);\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define asymmetric 0\n\nconst float steps = 2.0;\n\nconst float asymmetry = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float k = 0.;\n    float cycle = mod(float(iFrame), iResolution.y);\n\tif(iResolution.y - fragCoord.y - 0.5 == cycle) {\n    \tvec4 left  = texture(iChannel0, fract( (fragCoord + vec2(-1., 1.0))/iResolution.xy) );\n    \tvec4 above = texture(iChannel0, fract( (fragCoord + vec2( 0., 1.0))/iResolution.xy) );\n    \tvec4 right = texture(iChannel0, fract( (fragCoord + vec2( 1., 1.0))/iResolution.xy) );\n        \n        #if asymmetric\n        \tk = mod(above.x, steps) + (steps/2.) * \n                (\n                    (1.+asymmetry) * floor(right.x / steps) +\n                    (1.-asymmetry) * floor(left.x / steps)\n                );\n        #else\n    \t\tk = mod(above.x, steps) + (steps/2.) * (floor(right.x / steps) + floor(left.x / steps));\n        #endif\n    } else {\n        \n        k = texture(iChannel0, uv).x;\n    }\n    \n    //bool spacebar = texture( iChannel1, vec2(32.5/256.0, 0.5) ).x > 0.5;\n\n    if(iFrame <= 20)\n    if(fragCoord.xy+vec2(.5) == vec2(iResolution.x/2.0, iResolution.y)) k = 7919.0;\n    \n    fragColor = vec4(vec3(k), 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}