{"ver":"0.1","info":{"id":"WdKcWh","date":"1602726824","viewed":172,"name":"halton function for taa","username":"lzjseed","description":"halton function for taa\nRef:\nhttps://en.wikipedia.org/wiki/Halton_sequence\nhttp://twvideo01.ubm-us.net/o1/vault/gdc2016/Presentations/Pedersen_LasseJonFuglsang_TemporalReprojectionAntiAliasing.pdf\nhttps://observablehq.com/@jrus/halton","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["halton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawCicle(vec2 p,vec2 a,float r)\n{\n    return smoothstep(r*0.6,r,length(p-a));\n}\n\nfloat drawLine(vec2 p ,vec2 a ,vec2 b,float r)\n{\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    \n    float d = clamp(dot(ap,ab) / dot(ab,ab),0.0,1.0);\n    \n    vec2 c = a + d * ab;\n    \n    d = max(d,0.3);\n    \n    return smoothstep(r*0.6 * d,r * d,length(p-c)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float g = 1.0;\n    \n    int f = (iFrame / 100) % 8;\n    float l = 1.0;\n    for(int x = 0;x < 8; x++)\n    {\n        if(x > f) break;\n        vec2 pos = texelFetch(iChannel0,ivec2(x,0),0).xy;        \n            \n        float cic = drawCicle(fragCoord,pos * iResolution.xy + vec2(6.0),6.0);\n       \n        if(x > 0)\n        {\n            vec2 pos2 = texelFetch(iChannel0,ivec2(x-1,0),0).xy;\n            l = drawLine(fragCoord,pos * iResolution.xy + vec2(6.0),pos2 * iResolution.xy + vec2(6.0),3.0);    \n        } \n        \n        if(cic < 1.0)\n        {\n        \tg = 0.0;\n                        \n            break;\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(g * l,g * l,g * l,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//https://en.wikipedia.org/wiki/Halton_sequence\n//http://twvideo01.ubm-us.net/o1/vault/gdc2016/Presentations/Pedersen_LasseJonFuglsang_TemporalReprojectionAntiAliasing.pdf\n//https://observablehq.com/@jrus/halton\n\nfloat Get(int index, int radix)\n{\n    float result = 0.0;\n    float fraction = 1.0 / float(radix);\n    \n\n    while (index > 0)\n    {\n        result += float(index % radix) * fraction;\n\n        index /= radix;\n        fraction /= float(radix);\n    }\n\n    return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy;\n    \n    int seq = (int(uv.x) & 7) + 1;\n    \n    float c1 = Get(seq,2);\n    float c2 = Get(seq,3);\n    \n    // Output to screen\n    fragColor = vec4(c1,c2,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}