{"ver":"0.1","info":{"id":"DttSW2","date":"1685789693","viewed":38,"name":"Snuffffffffff","username":"voodoovoid","description":"Enjoying @Braek's music","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["bw","beats"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MdtGz4","filepath":"https://soundcloud.com/braekkkkkk/crunch-snuff-braek-flip","previewfilepath":"https://soundcloud.com/braekkkkkk/crunch-snuff-braek-flip","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// Mapping function to interpolate a value from one range into another range\nfloat map(float value, float inputMin, float inputMax, float outputMin, float outputMax) {\n    return outputMin + ((value - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin);\n}\n\n// Pseudo-random number generator\nfloat random(in float x) {\n    return fract(sin(x)*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    // Rotate uv coordinates by 90 degrees to the right\n    uv = mat2(0.0, 1.0, -1.0, 0.0) * uv;\n    \n    float zoom = pow(2.0, sin(iTime*0.1));\n    uv /= zoom;\n    \n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x);\n    \n    float mandala = 0.0;\n    \n    // Get sound data\n    vec4 sound = texture(iChannel0, vec2(uv.x, 0.0));\n    float bass = sound.x; // Lower frequencies (bass) are in the earlier parts of the FFT data\n\n    float time = iTime * 1.11;\n    float arms = 16.0 + sin(time)*8.0 + bass*16.0; // Modify the number of arms based on bass data\n\n    // Add randomness to the number of arms\n    arms += random(iTime);\n    \n    angle += time + sin(time)*PI/arms;\n    \n    for(float i = 0.0; i < 6.0; i++) {\n        float pattern = mod(angle * zoom + i*PI/3.0, PI/arms) * arms/PI;\n        pattern = abs(1.0 - pattern);\n        \n        pattern *= sin(radius*20.0 - iTime*0.5 + bass*20.0); // Modify the radius based on bass data\n        \n        radius = pow(radius, map(sin(time), -1.0, 1.0, 0.5, 2.0));\n        pattern = pow(pattern, map(cos(time), -1.0, 1.0, 0.5, 2.0));\n        \n        mandala += sin(10.0 * (pattern + radius - time));\n        mandala += sin(20.0 * pattern + time) / 2.0;\n    }\n    \n    mandala *= 1.0 - radius;\n    mandala = map(mandala, -2.0, 2.0, 0.0, 1.0);\n    \n    vec3 color = vec3(mandala);\n    color *= 1.0 - 0.5 * radius;\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}