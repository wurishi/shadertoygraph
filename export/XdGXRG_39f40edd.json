{"ver":"0.1","info":{"id":"XdGXRG","date":"1464892814","viewed":811,"name":"Kaleidoscope Effect (Webcam)","username":"maldicion069","description":"Kaleidoscope Effect for your webcam.\nDiscomment Line 4 to handle Kaleidoscope with mouse position","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["kaleidoscope","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n#define TWO_PI PI * 2.0\n#define SIDES 10.0\n//#define MOUSE_INTERACTION\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // Center UV\n    vec2 p = uv - 0.5;\n\n    // Convert from cartesian coordinates to polar coordinates\n    float r = length(p); \t\t// r = âˆš( x2 + y2 )\n    float angle = atan(p.y, p.x);\t// Î¸ = tan-1 ( y / x )\n\n    // Kaleidoscope effect\n    angle = mod(angle, TWO_PI/SIDES);\n    angle = abs(angle - PI/SIDES);\n\n    // Convert from polar coordinates to cartesian coordinates\n    p = r * vec2(cos(angle), sin(angle));\t// x = r Ã— cos( Î¸ ), y = r Ã— sin( Î¸ )\n\n    // Final color\n    #ifdef MOUSE_INTERACTION\n        vec2 pp = iMouse.xy / iResolution.xy;\n        fragColor = texture(iChannel0, p + pp);\n    #else\n    \tfragColor = texture(iChannel0, p - cos(iDate.w)/2.0);\n    #endif\n}","name":"Image","description":"","type":"image"}]}