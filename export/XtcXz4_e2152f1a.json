{"ver":"0.1","info":{"id":"XtcXz4","date":"1478358211","viewed":311,"name":"Light Proportional Font (WIP)","username":"ttoinou","description":"Todo :\n - Finish all missing capitals & others chars (how to make and S different than 5 and not ugly ?)\n - Optimize shader size & compile time (bit pack ?)\n - Work on geometry\n - Borders\n\nFrom https://www.shadertoy.com/view/XdXGRB","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["text","font","proportional"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// modified version of \n// https://www.shadertoy.com/view/XdXGRB\n\n// Slower but way nicer\n#define GOOD_GLOW\n#define FONT_SIZE 0.05\n#define FONT_SPACING .05\n#define PI 3.14159265359\n#define FONT_TRANSITION iTime > 2. ? max( (cos(PI/2. + iTime/4.*PI)*.5+.5)*.015-0.005,0.) : 0.\n\n#define STROKEW_REGULAR 0.06\n#define STROKEW_BOLD 0.12\n\nfloat font_size = FONT_SIZE;\nfloat font_spacing = FONT_SPACING;\nfloat font_width = STROKEW_REGULAR;\nfloat font_transition;\nfloat font_glow_opacity = 1.;\nfloat font_glow_width = 0.5;\nfloat font_aspect = 1.;//(cos(iTime/2.*PI)*.5+.5)*2.;\nfloat font_line_spacing = 1.;\n\nvec2  font_coord; // pixel font_coord in relative space\nvec3  font_cursor;\nvec3  font_cursorOrigin; // beginning of a new line\nvec4  font_last_draw;\nvec4  font_draw;\n\nvec4 font_stroke_color = vec4(0.8,0.2,0.1,1.);\nvec4 font_glow_color = vec4(0.2,0.4,0.9,1.);\n\n#define A_ vec2(0.,0.)\n#define B_ vec2(1.,0.)\n#define C_ vec2(2.,0.)\n#define D_ vec2(0.,1.)\n#define E_ vec2(1.,1.)\n#define F_ vec2(2.,1.)\n#define G_ vec2(0.,2.)\n#define H_ vec2(1.,2.)\n#define I_ vec2(2.,2.)\n#define J_ vec2(0.,3.)\n#define K_ vec2(1.,3.)\n#define L_ vec2(2.,3.)\n#define M_ vec2(0.,4.)\n#define N_ vec2(1.,4.)\n#define O_ vec2(2.,4.)\n\n#define P_ vec2(0.,1.5) // for S\n#define Q_ vec2(2.,2.5) // for S\n#define R_ vec2(2.,0.5) // for 4\n\n#define S_ vec2(0.,6.)\n#define T_ vec2(1.,6.)\n#define U_ vec2(2.0,6.)\n\n#ifdef GOOD_GLOW\n\t#define max2(a,b) cb(a,b)\n#else\n\t#define max2(a,b) max(a,b)\n#endif\n\n#define max3(a,b,c) max2(a,max2(b,c))\n#define max4(a,b,c,d) max2(max2(a,b),max2(c,d))\n#define max5(a,b,c,d,e) max2(a,max4(b,c,d,e))\n#define max6(a,b,c,d,e,f) max3(a,b,max4(b,c,d,e))\n\n#define rC(x) max3( t(M_,O_),t(O_,I_),t(I_,G_) )\n\n#define A(x) max3( rC(x) , t(M_,J_) , t(J_,L_) )\n#define B(x) max2( rC(x) , t(A_,M_) )\n#define C(x) max3( t(I_,G_) , t(G_,M_) , t(M_,O_) )\n#define D(x) max2( t(C_,O_) , C(x) )\n#define E(x) max3( C(x) , t(I_,L_) , t(L_,J_) )\n#define F(x) max3( t(C_,B_) , t(B_,N_) , t(G_,I_) )\n#define G(x) max3( C(x) , t(I_,U_) , t(U_,S_) )\n#define H(x) max3( t(A_,M_) , t(G_,I_) , t(I_,O_) )\n#define I(x) max2( t(D_,D_) , t(M_,G_) )\n#define J(x) max3( t(E_,E_) , t(H_,T_) , t(T_,S_) )\n#define K(x) max3( t(A_,M_) , t(M_,I_) , t(K_,O_) )\n#define L(x) t(M_,A_)\n#define N(x) max3( t(M_,G_) , t(G_,I_) , t(I_,O_) )\n#define M(x) max2( N(x) , t(N_,H_) )\n#define O(x) max2( C(x) , t(O_,I_) )\n#define P(x) max2( rC(x) , t(S_,G_) )\n#define Q(x) max2( C(x) , t(U_,I_) )\n#define R(x) max2( t(M_,G_) , t(G_,I_) )\n#define S(x) max5( t(I_,G_) , t(G_,J_) , t(J_,L_) , t(L_,O_) , t(O_,M_) )\n#define T(x) max3( t(A_,M_) , t(M_,N_) , t(G_,H_) )\n#define U(x) max3( t(G_,M_) , t(M_,O_) , t(O_,I_) )\n#define V(x) max4( t(G_,J_) , t(J_,N_) , t(N_,L_) , t(L_,I_) )\n#define W(x) max4( t(G_,M_) , t(M_,O_) , t(N_,H_) , t(O_,I_) )\n#define X(x) max2( t(G_,O_) , t(I_,M_) )\n#define Y(x) max4( t(G_,M_) , t(M_,O_) , t(I_,U_) , t(U_,S_) )\n#define Z(x) max3( t(G_,I_) , t(I_,M_) , t(M_,O_) )\n#define STOP(x) (t(N_,N_))\n\n#define AA(x) max4( t(M_,A_) , t(A_,C_) , t(C_,O_) , t(G_,I_) )\n//#define BB(x) max5( t(M_,A_) , t(A_,F_) , t(F_,G_) , t(G_,L_) , t(L_,M_) )\n#define _1_(x) max3( t(D_,B_) , t(B_,N_) , t(M_,O_) )\n\n#define _poly3(A,B,C) max2(t(A,B),t(B,C))\n#define _poly4(A,B,C,D) max3(t(A,B),t(B,C),t(C,D))\n#define _poly5(A,B,C,D,E) max4(t(A,B),t(B,C),t(C,D),t(D,E))\n#define _poly6(A,B,C,D,E,F) max5(t(A,B),t(B,C),t(C,D),t(D,E),t(E,F))\n\n#define _0_(x) max2( _poly5( A_,C_,O_,M_,A_) , t(H_,H_) )\n#define _2_(x) _poly6( A_,C_,I_,G_,M_,O_ )\n//#define _2_(x) _poly6( A_,C_,F_,J_,M_,O_ )\n#define _3_(x) max2( _poly4(A_,C_,O_,M_) , t(G_,I_) )\n#define _4_(x) max3( t(A_,G_) , t(G_,I_) , t(R_,O_) )\n//#define _5_(x) _poly6( C_,A_,G_,I_,O_,M_ )\n//#define _5_(x) max2(_poly6( C_,A_,G_,H_,L_,N_ ),t(N_,M_))\n//#define _5_(x) max2(_poly6( C_,A_,G_,I_,L_,N_ ),t(N_,M_))\n//#define _5_(x) max2(_poly5( C_,B_,D_,G_,I_ ),_poly4(I_,L_,N_,M_)) // S\n//#define _5_(x) max2(_poly4( C_,A_,D_,L_ ),_poly3(L_,O_,M_)) // S\n#define _5_(x) max2(_poly4( C_,A_,P_,Q_ ),_poly3(Q_,O_,M_)) // S\n//#define _5_(x) max2(_poly4( C_,A_,P_,Q_ ),_poly4(Q_,N_,M_)) // S\n#define _6_(x) _poly6( C_,A_,M_,O_,I_,G_ )\n#define _7_(x) max3( t(A_,C_) , t(C_,M_) , t(G_,I_) )\n#define _8_(x) max2( _poly5( A_,C_,O_,M_,A_) , t(G_,I_) )\n//#define _8_(x) max2( _poly5( A_,C_,F_,J_,M_) , _poly5( M_,O_,L_,D_,A_) )  // sablier\n//#define _8_(x) max4( t(E_,E_) , t(K_,K_),_poly5( D_,B_,F_,J_,N_) , _poly3( N_,L_,D_) )  // infini hexagonal\n#define _9_(x) _poly6( I_,G_,A_,C_,O_,M_ )\n\n//#define BB(x) max2(t(G_,I_),_poly5(A_,F_,L_,M_,A_))\n#define BB(x) max3(_poly5(A_,B_,F_,H_,L_),_poly4(L_,N_,M_,A_),t(G_,H_))\n//#define BB(x) max2(_poly6(A_,B_,F_,I_,G_,A_),_poly5(H_,L_,O_,M_,G_))\n//#define DD(x) _poly5(A_,F_,L_,M_,A_)\n#define DD(x) max2(_poly4(A_,B_,F_,L_),_poly4(L_,N_,M_,A_))\n\n\nfloat distanceToSegment(vec2 v, vec2 w, vec2 p)\n{\n    vec2 wv = (w-v)*1.;\n  \tfloat l2 = dot(wv,wv)+ font_transition*.4;\n\n    l2 = clamp( dot(p - v, wv) / l2 , 0. , 1. );\n   \treturn distance(p,v + l2 * wv) + (font_transition)*0.18;\n}\n\nvoid resetFont(vec3 line_beginning){\n\tfont_cursor = line_beginning;\n    font_cursorOrigin = line_beginning;\n}\n\n//-----------------------------------------------------------------------------------\nvec2 position()\n{\n\tvec2 pos = font_coord.xy;\n\tpos.y -= font_cursor.y;\n    pos.x -= font_spacing*font_aspect*font_cursor.x - font_cursor.z;\n\t//pos.x = pos.x - font_cursor.x + font_spacing*font_aspect*font_cursor.z;\n\t//pos.x -= max(font_spacing*font_aspect*font_cursor.x - font_cursor.z,0.5);\n\treturn pos;\n}\n\n//-----------------------------------------------------------------------------------\nvec2 draw1Char(vec2 from, vec2 to)\n{\n    vec2 p = position();\n    vec3 r;\n\tr.z = distanceToSegment(from,to,p)/font_size;\n    \n    r.x = smoothstep(0., 1., 1.- 14.*(r.z - font_width));\n\tr.y = (1. - font_transition)*(1. - font_transition)\n        *font_glow_opacity\n        *smoothstep(\n            clamp(1. - font_glow_width,0.,1.),\n            2.5,\n            clamp(1.- r.z,0.,1.))*4.; // glow\n    \n\treturn r.xy;\n}\n\nvec2 grid(vec2 letterspace) \n{\n\treturn vec2(\n        (letterspace.x / 2.) * .65 * font_aspect ,\n        1.0-((letterspace.y / 2.) * .95)\n    ) * font_size;\n}\n\nvec2 t(vec2 from, vec2 to) \n{\n\treturn draw1Char(grid(from), grid(to));\n}\n\n\nvoid space()\n{\n\tfont_cursor.x += 1.;\n}\n\nvoid newline()\n{\n\tfont_cursor.x = font_cursorOrigin.x;\n\tfont_cursor.y -= .18;\n}\n\n#define _bold     font_width = STROKEW_BOLD;\n#define _reg      font_width = STROKEW_REGULAR;\n#define textBegin font_last_draw = vec4(0.);\n#define textEnd   font_draw += textOutput(font_last_draw.xy);\n\nvec4 textOutput(vec2 result)\n{\n    return mix(font_glow_color*result.y,font_stroke_color,clamp(result.x,0.,1.));\n}\n\nvec2 cb(vec2 a,vec2 b){\n    //return vec2(max(a.x,b.x), (a.y+b.y) ); // nice ! but too concentrated\n    return vec2(max(a.x,b.x), ((a.y+b.y)+max(a.y,b.y))/2. ); // perfect!\n}\n\nvoid _ch_(vec2 character,float w){\n    font_last_draw.xy = cb(font_last_draw.xy,character);\n\tfont_cursor.x += w;\n}\n\n\n#define ch(k) font_cursor.z = 0.; _ch_(k(0.),1.);\n#define ch_(k,aaa,w) font_cursor.z = aaa; _ch_(k(0.),w);\n\n#define _j ch_(J,(0.01),.6)\n#define _i ch_(I, (-.005),.5)\n#define _l ch_(L,.0,.4)\n#define _t ch_(T, 0. ,.7)\n\n#define _a ch(A)\n#define _b ch(B)\n#define _c ch(C)\n#define _d ch(D)\n#define _e ch(E)\n#define _f ch(F)\n#define _g ch(G)\n#define _h ch(H)\n\n#define _k ch(K)\n#define _m ch(M)\n#define _n ch(N)\n#define _o ch(O)\n#define _p ch(P)\n#define _q ch(Q)\n#define _r ch(R)\n#define _s ch(S)\n\n#define _u ch(U)\n#define _v ch(V)\n#define _w ch(W)\n#define _x ch(X)\n#define _y ch(Y)\n#define _z ch(Z)\n\n#define _A ch(AA)\n#define _B ch(BB)\n#define _D ch(DD)\n\n#define _0 ch(_0_)\n#define _1 ch(_1_)\n#define _2 ch(_2_)\n#define _3 ch(_3_)\n#define _4 ch(_4_)\n#define _5 ch(_5_)\n#define _6 ch(_6_)\n#define _7 ch(_7_)\n#define _8 ch(_8_)\n#define _9 ch(_9_)\n\n#define _sp space();\n#define _nl newline();\n#define _dot ch_(STOP, 0. ,.4)\n\n// goal : compile time should\n// depend as little as possible on\n// this variable !\n#define ITERATIONS 1\n\n//-----------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragfont_coord )\n{\n    float di;\n    float angle = 0.4;\n    bool mouse = iMouse.z > .5;\n\tfont_transition = FONT_TRANSITION;\n    \n    \n    for( int i = 0; i < ITERATIONS ; i++){\n        di = float(i)/float(ITERATIONS);\n        font_coord = (fragfont_coord + 8.*di*vec2(cos(angle),sin(angle)))/iResolution.xy;\n    \tfont_coord.y *= iResolution.y/iResolution.x;;\n            \n        font_draw = vec4(0.);\n        resetFont(vec3(2.0, .5, 0.));\n        textBegin\n\n        _a  _b _c _d _e _f _g _h _i _j _k _sp _A _B _D _1 _2 _nl\n            \n        textEnd\n\n        font_stroke_color = mix(font_stroke_color*font_stroke_color,vec4(0.,.4,1.,1.),fragfont_coord.x/iResolution.x);\n        font_glow_color = vec4(0.8,.3,0.,1.);\n\n        textBegin\n        _k _l _m _n _sp _bold _o _p _q _r _sp _3 _4 _5 _6 _reg _nl\n        textEnd\n\n        font_glow_color = vec4(0.7);\n        font_stroke_color = vec4(0.);\n\n        textBegin\n        _s _t _u _v _x _y _z _dot _dot _dot _sp _7 _8 _9 _0\n\n        textEnd\n\n        fragColor += font_draw * exp(-di) / pow(float(ITERATIONS),0.5);\n    }\n    /*\n    resetFont(vec3(.0, .0, 0.));\n    font_size = 1.;\n    textBegin\n        \n    textEnd\n        \n    fragColor += font_draw*/\n}\n","name":"Image","description":"","type":"image"}]}