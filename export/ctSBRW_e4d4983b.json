{"ver":"0.1","info":{"id":"ctSBRW","date":"1693791470","viewed":66,"name":"thing 3d","username":"artefox","description":"thing 3d\n\nuse yo mouse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["thing3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void plot(float x, float y, out vec3 color, vec2 uv, vec3 newColor) {\n    if ((uv.x == floor(x)) && (uv.y == floor(y))) color = newColor;\n}\n\nvoid bresenham(float x1, float y1, float x2, float y2, out vec3 color, vec2 uv, vec3 newColor) {\n    x1 = floor(x1);\n    y1 = floor(y1);\n    x2 = floor(x2);\n    y2 = floor(y2);\n    float x = x1;\n    float y = y1;\n    float xmx = x2 - x1;\n    float ymy = y2 - y1;\n    float dx = abs(xmx);\n    float dy = abs(ymy);\n    float s1 = sign(xmx);\n    float s2 = sign(ymy);\n    float i = 0.0;\n    if (dy > dx) {\n        float t = dx;\n        dx = dy;\n        dy = t;\n        i = 1.0;\n    }\n    float e = 2.0 * dy - dx;\n    float a = 2.0 * dy;\n    float b = 2.0 * dy - 2.0 * dx;\n    for (int j = 0; j < int(dx); j++) {\n        plot(x, y, color, uv, newColor);\n        if (e < 0.0) {\n            if (i == 1.0) {\n                y += s2;\n            } else {\n                x += s1;\n            }\n            e += a;\n        } else {\n            y += s2;\n            x += s1;\n            e += b;\n        }\n    }\n}\n\nvoid triangle(float x1, float y1, float x2, float y2, float x3, float y3, out vec3 color, vec2 uv, vec3 newColor) {\n    bresenham(x1, y1, x2, y2, color, uv, newColor);\n    bresenham(x2, y2, x3, y3, color, uv, newColor);\n    bresenham(x3, y3, x1, y1, color, uv, newColor);\n}\n\nvoid transform(out float px, out float py, out float pz, float cos_x, float sin_x, float cos_y, float sin_y) {\n    px = px * cos_y - pz * sin_y;\n    pz = px * sin_y + pz * cos_y;\n    py = py * cos_x - pz * sin_x;\n    pz = py * sin_x + pz * cos_x;\n}\n\nfloat tris_x[] = float[6](0.0, 0.0, 1.0, 1.0, 1.0, 0.0);\nfloat tris_y[] = float[6](0.0, 1.0, 1.0, 1.0, 0.0, 0.0);\nfloat tris_z[] = float[6](0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\nvoid render(float trx, float try, float trz, float rot_x, float rot_y, float focal, vec2 uv, out vec3 color) {\n    float cos_x = cos(radians(rot_x));\n    float sin_x = sin(radians(rot_x));\n    float cos_y = cos(radians(rot_y));\n    float sin_y = sin(radians(rot_y));\n    \n    for (int n = 0; n < tris_x.length() / 3; n++) {\n        int k = n * 3;\n        \n        float px0 = tris_x[k] - trx;\n        float py0 = tris_y[k] - try;\n        float pz0 = tris_z[k] - trz;\n        transform(px0, py0, pz0, cos_x, sin_x, cos_y, sin_y);\n        \n        float px1 = tris_x[k + 1] - trx;\n        float py1 = tris_y[k + 1] - try;\n        float pz1 = tris_z[k + 1] - trz;\n        transform(px1, py1, pz1, cos_x, sin_x, cos_y, sin_y);\n        \n        float px2 = tris_x[k + 2] - trx;\n        float py2 = tris_y[k + 2] - try;\n        float pz2 = tris_z[k + 2] - trz;\n        transform(px2, py2, pz2, cos_x, sin_x, cos_y, sin_y);\n        \n        if (pz0 != 0.0) {\n            px0 = px0 / pz0 * focal;\n            py0 = py0 / pz0 * focal;\n        }\n        if (pz1 != 0.0) {\n            px1 = px1 / pz1 * focal;\n            py1 = py1 / pz1 * focal;\n        }\n        if (pz2 != 0.0) {\n            px2 = px2 / pz2 * focal;\n            py2 = py2 / pz2 * focal;\n        }\n        \n        triangle(\n        (px0 + 1.0) * 127.5, (py0 + 1.0) * 127.5, \n        (px1 + 1.0) * 127.5, (py1 + 1.0) * 127.5, \n        (px2 + 1.0) * 127.5, (py2 + 1.0) * 127.5, \n        color, uv, vec3(1.0));\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv -= 0.5;\n    uv *= 2.0;\n    float res = 256.0;\n    uv = floor((uv + 1.0) * (res * 0.5));\n    \n    \n    float fov = radians(90.0);\n    float focal = tan(fov / 2.0);\n    \n\n    \n    vec3 color = vec3(0.0);\n    render(0.0, 0.0, -3.0, (iMouse.y / iResolution.x) * 90.0, (iMouse.x / iResolution.x) * 90.0, focal, uv, color);\n    \n    \n    \n    \n    \n    \n    uv /= res;\n    if (fragCoord.x > iResolution.y) color = vec3(0.5);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}