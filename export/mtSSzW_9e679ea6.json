{"ver":"0.1","info":{"id":"mtSSzW","date":"1675725987","viewed":295,"name":"yYy_Audio_yYy","username":"SnoopethDuckDuck","description":"Make sure to click the music thingy in Buffer A!\n\nThis uses a buffer to smooth the audio and reduce \"jitter\" as it jumps up and down","likes":18,"published":3,"flags":96,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"dtBXRz","parentname":"sound test 011111111"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from Blacklemori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\n#define t iTime\n#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define pal(a) .5+.5*cos(2.*pi*(a))\n\nfloat clength(vec2 a) {\n    float mx = step(a.y, 0.);\n    return mix(max(abs(a.x), abs(a.y)), length(a), mx);\n}\n\n// this codes a bit messy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (fragCoord - 0.5 * res) / res.y;\n    uv.x = -abs(uv.x);\n    vec2 ouv = uv;    \n    uv.x += 0.04 * cos(t + 4.*uv.y); // * tanh(0.1 * t);\n    uv.y -= 0.1 * t; // was + volume\n    \n    vec2 sc = vec2(16. + 3.*cos(t + 4.*uv.y), 16.);\n    vec2 ipos = floor(sc * uv) + 0.5;\n    vec2 fpos = fract(sc * uv) - 0.5;    \n    float h = hash(ipos.x, 100. * ipos.y);\n    h = 0.5 + 0.5 * sin(0.1 * t + 2. * pi * h);\n    //h = floor(10. * h) / 10.;\n    \n    float d = length(fpos);\n    \n    float r = texture(iChannel0, vec2(h)).a;\n    // r = (1. - 0.5 * tanh(0.1*t)) * floor(12. * r) / 12.;\n    r = tanh(0.5*t) * 0.5 * r;\n \n    vec4 audio1 = texture(iChannel0, vec2(0.5, 0));\n    float offy = 1.5 + .5 * cos(5. * ouv.y + 2. * pi * audio1.r);\n    vec3 off = 0.5 * vec3(.25, offy, 2)/3.;\n    vec3 pal1 = pal(0.1 * t + h + off);\n    \n    float a = atan(ouv.x, ouv.y);//mod(atan(ouv.x, ouv.y) + pi/2., 2. * pi);\n    vec4 audio2 = texture(iChannel0, vec2(.5+.5*cos(2.*a), 0.));\n    vec3 pal2 = pal(4. * audio2.g + off);\n    \n    // Offset small circles inside larger ones\n    float th = 2. * pi * h - 2. * t;\n    vec2 circleOff = 0.05 * vec2(cos(th), sin(th));\n \n    // Shield distance\n    float d2 = clength(ouv);\n    \n    // Volume\n    float vol = 0.6 * texture(iChannel0, 0.*fragCoord/res).g; //?\n    \n    // Grid circles\n    float k = sc.x / res.y;\n    vec3 col = mix(pal1, vec3(0), 1. - smoothstep(-k, k, r - d));\n    \n    // Draw small circles on top, darken if outside shield\n    float d3 = length(fpos - circleOff);    \n    col *= .5+.5*step(d2, vol) - 0.25 * smoothstep(-k, k, r-d3-0.075);\n   \n    // Darken outside shield\n    col *= 0.45 + 0.55 * step(d2, vol);\n    \n    // Shield border\n    k /= sc.x;\n    float s = smoothstep(-2. * k, 2. * k, 0.005 - abs(d2 - vol));\n    s += exp(-50. * abs(d2 - 1.05 * vol));\n    col += s * pal2;\n    \n    // Inside/outside shield colors\n    vec3 insideCol = col + vec3(0.1, 0.02, 0.15);\n    vec3 outsideCol = vec3(0.15 + 0.8 * length(col));\n    outsideCol += 4. * col * exp(-10. * (1.-vol) * abs(ouv.y));\n    col = mix(insideCol, outsideCol, (1.-2.*vol)*(1.-step(d2, vol)));\n    \n    // Border\n    vec3 bcol = mix(pal2, vec3(0), vol);\n    col += vol*bcol*exp(-50.*(1.-vol)*abs(abs(ouv.x) - 0.5*res.x/res.y));\n    col += vol*bcol*exp(-50.*(1.-vol)*abs(abs(ouv.y) - 0.5));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4lBSWc","filepath":"https://soundcloud.com/sycco/ripple?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/sycco/ripple?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Heavily influenced by Kishimisu's shader:\n// https://www.shadertoy.com/view/dtl3Dr\n\nfloat getVol(float samples) {\n    float v = 0.;\n    for (float i = 0.; i < samples; i++) \n        v += texture(iChannel1, vec2((i + 0.5)/samples, 0.05)).x;\n    return v / samples;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    //float sc = 32.;\n    //uv.x = floor(sc * uv.x + 0.5)/sc;\n    \n    vec4 ch0 = texture(iChannel0, uv);\n    float ch1 = 0.;\n    \n    // Number of samples in either direction\n    float n = 5.;\n    \n    // Sample spacing (value chosen because it looks good)\n    float s = 0.003;  //0.003 with n=5.\n    \n    // Average of samples, ch1\n    for (float i = -n; i <= n; i++) \n        ch1 = max(ch1, texture(iChannel1, vec2(uv.x + s * i, 0.25)).x);\n        //ch1 += log(1.+texture(iChannel1, vec2(uv.x + s * i, 0.25)).x);\n    //ch1 /= 2.*n + 1.;\n    \n    // Alpha scales with uv.x, since bassy tones are more prevalent\n    float r = mix(ch0.r, ch1, 0.4);\n    float g = mix(ch0.g, getVol(50.), 0.3);\n    float a = mix(ch0.a, ch1 * (1. + 0.55 * uv.x), 0.4);\n    \n    vec3 col = vec3(r, g, step(uv.y - a + 0.1, 0.008));\n\n    fragColor = vec4(col, a);\n}","name":"Buffer A","description":"","type":"buffer"}]}