{"ver":"0.1","info":{"id":"wtSyWc","date":"1595525639","viewed":310,"name":"Trapezoid SDF flickering fix","username":"bloxard","description":"I've been looking into the 2D Trapezoid and I noticed a very small one pixel line in the center of the trapezoid primitive that were flickering.\nLeft: Original version taken from https://www.shadertoy.com/view/MlycD3\nRight: New flicker free version.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","trapezoid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// By Per Bloksgaard/2020\n\n// Original Trapezoid from https://www.shadertoy.com/view/MlycD3\nfloat sdTrapezoid( in vec2 p, in vec2 a, in vec2 b, in float ra, float rb )\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n    float x = sqrt( papa - paba*paba*baba );\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\n// Slightly improved version of a Trapezoid primitive without flicking.\nfloat sdTrapezoidFixed(in vec2 p, in vec2 a, in vec2 b, in float ra, float rb)\n{\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float baba = dot(ba, ba);\n    float x = abs(dot(vec2(-pa.y, pa.x), ba)) / sqrt(baba);\n    float paba = dot(pa, ba) / baba;\n    float rba = rb - ra;\n    float cax = max(0., x - ((paba < 0.5) ? ra : rb));\n    float cay = abs(paba - 0.5) - 0.5;\n    float f = clamp((rba*(x - ra) + paba * baba) / (rba * rba + baba), 0., 1.);\n    float cbx = x - ra - f * rba;\n    float cby = paba - f;\n    return sign(max(cbx,cay)) * sqrt(min(cax*cax + cay * cay*baba, cbx*cbx + cby * cby*baba));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.*fragCoord.xy)/iResolution.y*0.5;\n    float ra = 0.13-0.1*abs(sin(iTime*1.37+0.0));\n    float rb = 0.13-0.1*abs(sin(iTime*1.41+1.1));\n    vec2 pa = vec2(-0.3 + 0.05*sin(iTime*1.3), -0.2 + -0.15*cos(iTime*0.4));\n    vec2 pb = vec2(0.3 - 0.05*sin(iTime*-0.3), 0.2 + 0.15*cos(iTime*0.37));\n    float a = iTime * 0.7;\n    mat2 m = mat2(cos(a),sin(a),-sin(a),cos(a));\n    pa *= m;\n    pb *= m;\n\tfloat mX = (iMouse.z>0.) ? ((iMouse.x/iResolution.x*2.-1.)*iResolution.x/iResolution.y)*0.5 : 0.;\n    float d = 1e6;\n    if (p.x < mX)\n    {\n        d = sdTrapezoid(p, pa, pb, ra, rb);\n    }\n    else\n    {\n        d = sdTrapezoidFixed(p, pa, pb, ra, rb);\n    }\n    vec3 col = mix(vec3(0.,0.,1.), vec3(1.,1.,0.),sign(d));\n    col *= 1. - exp(-4.0*abs(d));\n    col *= 0.8 + 0.2*cos(140.*d);\n    col = mix(col, vec3(1.), 1. - smoothstep(0., 0.015, abs(d)));\n    col = mix(col, vec3(1.), 1. - smoothstep(0., 0.005, abs(d)));\n    col = mix(col, vec3(1.), 1.0 - smoothstep(0., 0.005, abs(p.x - mX)));\n    fragColor = vec4(col,1.);\n}\n","name":"Image","description":"","type":"image"}]}