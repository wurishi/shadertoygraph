{"ver":"0.1","info":{"id":"NtsBR7","date":"1653763149","viewed":67,"name":"@CodeBoy124 raymarching test","username":"CodeBoy124","description":"This is a basic raymarcher.\nI wanted to see if the smooth min and max functions actually did what I saw in some videos","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","test","testing","spheretracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float infinite = 10000000.;\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n\nfloat getMinDist( in vec3 pos )\n{\n    float d1 = pos.y;\n    float d2 = distance(pos, vec3(0., 0.5, 0.)) - 0.5;\n    float d3 = distance(pos, vec3(0.25, 0.9, -0.25)) - 0.6;\n    \n    float d23 = smax(d2, -d3, 0.1);\n    return smin(d1, d23, 0.4);\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d0 = getMinDist(p);\n    const vec2 epsilon = vec2(.0001,0);\n    vec3 d1 = vec3(\n        getMinDist(p-epsilon.xyy),\n        getMinDist(p-epsilon.yxy),\n        getMinDist(p-epsilon.yyx));\n    return normalize(d0 - d1);\n}\n\nvec3 castRay( in vec3 ro, in vec3 rd )\n{\n    vec3 rp = ro;\n    for(int i = 0; i < 100; i++){\n        float d = getMinDist(rp);\n        if(d > 0.01){\n            rp += rd * d;\n        }else{\n            return rp;\n        }\n    }\n    return vec3(infinite);\n}\n\nfloat fog( in float dist )\n{\n    return max(min(exp((dist/6.*5.)-5.), 1.), 0.);\n}\n\nvec3 lightPos = vec3(1., 2., -1.);\n\nfloat diffuse( in vec3 pos, in vec3 normal )\n{\n    return dot(normal, normalize(lightPos - pos));\n}\n\nbool canReachSun( in vec3 pos )\n{\n    vec3 hit = castRay(pos, normalize(lightPos - pos));\n    if(distance(pos, hit) >= distance(pos, lightPos)-0.1){\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    lightPos.xz = vec2(iMouse.xy - iResolution.xy / 2.) / iResolution.y * 2.;\n    vec2 uv = (fragCoord - iResolution.xy / 2.)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    // cast ray\n    vec3 ro = vec3(0., 1., -4.);\n    vec3 rd = normalize(vec3(uv.xy, 1.));\n    \n    vec3 hitP = castRay(ro, rd);\n    float dist = distance(ro, hitP);\n    vec3 normal = getNormal(hitP);\n    \n    col = vec3(0., 1., 0.2);\n    if(!canReachSun(hitP + normal * 0.01)){\n        col *= 0.25;\n    }else{\n        col *= clamp(diffuse(hitP, normal), 0.25, 1.);\n    }\n    float f = fog(dist);\n    col *= (1. - f);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}