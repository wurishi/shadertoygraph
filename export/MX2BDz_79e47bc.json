{"ver":"0.1","info":{"id":"MX2BDz","date":"1729352883","viewed":109,"name":"Ball Reflections","username":"omansounds","description":"Balls with reflections","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["raymarchingreflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int STEPS = 128;\n\nfloat map (vec3 p) {\n    //Forward movement\n    p.z += iTime * 0.5;\n\n    //Modulo\n    float spacing = 4.0;\n    p = mod(p, spacing) - spacing/2.0;\n\n    //Sphere SDF\n    float sphere = length(p) - 1.0;\n\n    return sphere;\n}\n\nvec3 getNormal(vec3 p)\n{\n\tvec3 eps=vec3(.1,0,0);\n\treturn normalize(vec3(map(p+eps.xyy) ,map(p+eps.yxy), map(p+eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    // Initialization\n    vec3 ro = vec3(0, 0, 0);          // ray origin\n    vec3 rd = normalize(vec3(uv, 1));  // ray direction\n    vec4 color = vec4(0);              // final pixel col\n    vec3 p = ro;\n    float t = 0.;   // total distance travelled\n\n    \n\n    // Raymarching\n    for (int i = 0; i < STEPS; i++) {\n\n        float d = map(p);       // current distance to the scene\n\n        t += d; \n        p += d * rd;                //march the ray \n\n        if (t < .001 || t > 500.) break;\n    }\n    float f = length(p - ro) * 0.02; //0.02\n\n    //Second raymarching (reflection)\n    rd = reflect(rd, getNormal(p));\n\tp += rd;\n\n    for(int i=0;i<STEPS/2;i++) {\n\n\t\tfloat d = map(p);\n\n\t \tp += d * rd;\n\t}\n\n    vec3 lightDir = normalize(vec3(0.0, 1.0, 1.0)); // Direction of the light\n    vec3 viewDir = normalize(ro - p); // View direction\n    vec3 normal = getNormal(p); // Surface normal\n    float distanceAttenuation = exp(-0.1 * length(p - ro));\n\n    // Diffuse lighting\n    float diffuse = max(dot(normal, lightDir), 1.0);\n\n    // Specular lighting\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 5.0); // Shininess factor is 32.0\n\n    // Light and distance attenuation\n    float lightIntensity = diffuse + spec;\n    //float lightIntensity = (diffuse + 0.65) + spec;\n   \n    //col.rgb += vec3(0.3, cos(iTime * 0.5) * 0.5 + 0.5, sin(iTime * 0.5) * 0.5 + 0.5);\n    color = vec4(1.0);\n\n    color = (color * lightIntensity * 2.) * distanceAttenuation, 1.0;\n    \n    color = (color + vec4(f)) * distanceAttenuation * min(iTime * 0.5, 1.0), 1.0;\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}