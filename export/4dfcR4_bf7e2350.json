{"ver":"0.1","info":{"id":"4dfcR4","date":"1487156997","viewed":136,"name":"Mirrored X,Y and Z!!","username":"Torumu106","description":"My shader practice.\nI implemented mirror.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MIRROR\n\nbool mirrortouch = false;\nfloat PI = 3.1415926535;\nvec3 col = vec3(1.0, 1.0, 1.0);\nvec3 mirror = vec3(0.0);\nbool ismired = false;\nvec3 stoppos = vec3(0.0);\nfloat map(vec3 p){\n    float mirrordis = dot(p,normalize(vec3(-2.0, 1.0, -1.0)));\n    #ifdef MIRROR\n    if(mirrordis < 0.01 && !ismired){\n    \tmirror = normalize(vec3(-2.0, 1.0, -1.0));\n        mirrortouch = true;\n    }\n    float mirrordis1 = dot(p,normalize(vec3(2.0, 1.0, -1.0)));\n    if(mirrordis1 < 0.01 && !ismired){\n    \tmirror = normalize(vec3(2.0, 1.0, -1.0));\n\t\tmirrortouch = true;\n    }\n    #endif\n\tvec3 q = fract(p) * 2.0 - 1.0;\n\tfloat ret = length(q) - 0.25;\n    vec3 r = fract(p) * 2.0 - 1.0;\n    float xpole = length(vec2(r.y, r.z));\n    float ypole = length(vec2(r.x, r.z));\n    float zpole = length(vec2(r.y, r.x));\n    ret = min(ret, xpole - 0.05);\n    ret = min(ret, ypole - 0.05);\n    ret = min(ret, zpole - 0.05);\n    if(!ismired){\n    \tret = min(ret, mirrordis - 0.001);\n        ret = min(ret, mirrordis1 - 0.001);\n    }\n\tif(xpole <= 0.051){\n    \tcol = vec3(1.0, 0.0, 0.0);\n    }\n\tif(ypole <= 0.051){\n    \tcol = vec3(0.0, 1.0, 0.0);\n    }\n\tif(zpole <= 0.051){\n    \tcol = vec3(0.0, 0.0, 1.0);\n    }\n    float yellowball = length(q - 0.5 * vec3(sin(iTime), sin(iTime + 1.0), sin(iTime + 2.0))) - 0.05;\n    if(yellowball <= 0.001){\n    \tcol = vec3(1.0, 1.0, 0.0);\n    }\n    ret = min(ret, yellowball);\n    yellowball = length(q - 0.5 * vec3(sin(iTime+ PI * 1.2), sin(iTime + 1.0 + PI * 1.2), sin(iTime + 2.0 + PI * 1.2))) - 0.05;\n    if(yellowball <= 0.001){\n    \tcol = vec3(1.0, 1.0, 0.0);\n    }\n    ret = min(ret, yellowball);\n    yellowball = length(q - 0.5 * vec3(sin(iTime+ PI * 0.4), sin(iTime + 1.0 + PI * 0.4), sin(iTime + 2.0 + PI * 0.4))) - 0.05;\n    if(yellowball <= 0.001){\n    \tcol = vec3(1.0, 1.0, 0.0);\n    }\n    ret = min(ret, yellowball);\n    yellowball = length(q - 0.5 * vec3(sin(iTime+ PI * 1.6), sin(iTime + 1.0 + PI * 1.6), sin(iTime + 2.0 + PI * 1.6))) - 0.05;\n    if(yellowball <= 0.001){\n    \tcol = vec3(1.0, 1.0, 0.0);\n    }\n    ret = min(ret, yellowball);\n    yellowball = length(q - 0.5 * vec3(sin(iTime+ PI * 0.8), sin(iTime + 1.0 + PI * 0.8), sin(iTime + 2.0 + PI * 0.8))) - 0.05;\n    if(yellowball <= 0.001){\n    \tcol = vec3(1.0, 1.0, 0.0);\n    }\n    ret = min(ret, yellowball);\n    return ret;\n}\nfloat trace(vec3 o, vec3 r){\n\tfloat t = 0.0;\n    float t1 = 0.0;\n    vec3 p = vec3(0.0);\n    p = o + r * t;\n    for(int i = 0; i < 256; ++i){\n    \tp += r * t1; \n        float d = map(p);\n        /*if(mirror != vec3(0.0) && !ismired){\n        \tr = reflect(r,mirror);\n            mirror = vec3(0.0);\n            ismired = true;\n        }*/\n        t1 = d * 0.5;\n        t += t1;\n        if(d < 0.001){\n        \tbreak;\n        }\n    }\n    stoppos = p;\n    return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    float the = iTime * 0.5;\n    //r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    vec3 o = vec3(0.0,2.5 + iTime, -3.0 + iTime);\n    float t = trace(o, r);\n    if(mirrortouch){\n    \tr = reflect(r, mirror);\n        ismired = true;\n        t += trace(stoppos, r);\n    }\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    vec3 fc = vec3(fog) * col + vec3(0.1);\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}