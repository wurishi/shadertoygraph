{"ver":"0.1","info":{"id":"lXfBRn","date":"1727922328","viewed":33,"name":"oct22024","username":"brendanluu","description":"breathe","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["popart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float capsuleSDF(vec2 p, vec2 a, vec2 b, float r) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Animation parameters\n    float time = iTime;\n    float animationSpeed = 0.5;\n    float cycleDuration = 4.0;\n    float maxHeight = 0.65;\n    float minRadius = 0.001; // Very small initial radius\n    float maxRadius = 0.07;\n    \n    // Blur parameters\n    float edgeWidth = 0.11; // Controls the width of the blurry edge\n    \n    // Calculate the current phase of the animation\n    float phase = mod(time * animationSpeed, cycleDuration);\n    float normalizedPhase = phase / cycleDuration;\n    \n    // Use a sine wave for smooth growth and shrinkage\n    float animationProgress = sin(normalizedPhase * 3.14159 * 2.0) * 0.5 + 0.5;\n    \n    // Calculate the current height and radius\n    float currentHeight = mix(0.0, maxHeight, animationProgress);\n    float currentRadius = mix(minRadius, maxRadius, animationProgress);\n    \n    // Define capsule parameters\n    vec2 a = vec2(0.0, -currentHeight/2.0);\n    vec2 b = vec2(0.0, currentHeight/2.0);\n    \n    // Calculate signed distance to first capsule\n    float d1 = capsuleSDF(uv, a, b, currentRadius);\n    \n    // Calculate signed distance to second capsule (90 degrees rotated)\n    float d2 = capsuleSDF(uv.yx, a, b, currentRadius);\n    \n    // Combine distances using smooth minimum function\n    float k = 0.1; // Controls the smoothness of the blend\n    float d = -log(exp(-d1/k) + exp(-d2/k)) * k;\n    \n    // Create blurry boundary using smoothstep\n    float shape = smoothstep(edgeWidth, -edgeWidth, d);\n    \n    // Output color\n    fragColor = vec4(vec3(shape), 1.0);\n}","name":"Image","description":"","type":"image"}]}