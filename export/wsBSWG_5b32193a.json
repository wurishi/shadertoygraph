{"ver":"0.1","info":{"id":"wsBSWG","date":"1554821601","viewed":535,"name":"Raytracing Infinite Plane 3D","username":"bloxard","description":"Raytracing an infinite plane in 3D and mapping a grid onto it.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","intersection","plane","analytical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright Per Bloksgaard, 2019 - https://perbloksgaard.dk\n//Raytracing an infinite plane in 3D and mapping a grid onto it.\n\nmat3 setupRotationMatrix(vec3 ww)\n{\n  vec3 uu = normalize(cross(ww,vec3(0.,1.,0.)));\n  vec3 vv = normalize(cross(uu,ww));\n  return mat3(uu,vv,ww);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec3 vCamPos = vec3(cos(iTime*0.5)*1.6,0.,sin(iTime*0.5)*1.6);\n  vec3 vCamTarget = vec3(0.,-1.3,0.);\n  vec3 vCamForward = normalize(vCamTarget-vCamPos);\n  vec3 vCamRight = normalize(cross(vCamForward,vec3(0.,1.,0.)));\n  vec3 vCamUp = normalize(cross(vCamRight,vCamForward));\n  vec3 vPlanePos = vec3(0.,-1.,0.);\n  vec3 vPlaneRight = vec3(1.,0.,0.);\n  vec3 vPlaneUp = vec3(0.,0.,1.);\n  vec3 vForwardRot = normalize(vec3(cos(iTime*0.5),sin(iTime*0.3)*0.9,cos(iTime*0.7)*0.2));\n  mat3 m = setupRotationMatrix(vForwardRot);\n  vPlaneRight *= m;\n  vPlaneUp *= m;\n  vec3 vPlaneNormal = normalize(cross(vPlaneRight,vPlaneUp));\n  float fPlaneDeltaNormalDistance = dot(vPlanePos - vCamPos,vPlaneNormal);\n  vec3 color = vec3(0.);\n  for(int m=0; m<2; m++)\n  {\n    for(int n=0; n<2; n++)\n    {\n      vec2 s = (-iResolution.xy+2.*(gl_FragCoord.xy+(vec2(float(m),float(n))*0.5-0.5)))/iResolution.y;\n      vec3 vRayDir = normalize(s.x*vCamRight+s.y*vCamUp+vCamForward*1.3);\n      float t = fPlaneDeltaNormalDistance / dot(vPlaneNormal,vRayDir);\n      vec3 hitPos = vCamPos + vRayDir*t;\n      vec3 delta = hitPos - vPlanePos;\n      vec2 bary = vec2(dot(delta, vPlaneRight),dot(delta, vPlaneUp));\n      vec2 grid = (70.7+t*0.1)-pow(vec2(2.5-t*0.03),abs(vec2(0.5)-fract(bary*4.))*10.2);\n      color += vec3(clamp(min(grid.x,grid.y),0.,1.))*clamp(1.-t*0.15,0.,1.)*step(0.,t);\n    }\n  }\n  fragColor = vec4(color*0.25,1.);\n}\n","name":"Image","description":"","type":"image"}]}