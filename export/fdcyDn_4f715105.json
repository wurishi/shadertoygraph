{"ver":"0.1","info":{"id":"fdcyDn","date":"1653242692","viewed":221,"name":"fix Topologica exebetche 666","username":"exebetche","description":"An animated topological pattern","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["fixtopological"],"hasliked":0,"parentid":"7ddyz4","parentname":"Topological Pattern"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const ivec2 samplePoints[9] = ivec2[9](\n    ivec2(-1,1), ivec2(0,1), ivec2(1,1),\n    ivec2(-1,0), ivec2(0,0), ivec2(1,0),\n    ivec2(-1,-1), ivec2(0,-1), ivec2(1,-1)\n);\n\nconst float XMatrix[9] = float[9](\n    1.0, 0.0, -1.0,\n    2.0, 0.0, -2.0,\n    1.0, 0.0, -1.0\n);\n\nconst float YMatrix[9] = float[9](\n    1.0, 2.0, 1.0,\n    0.0, 0.0, 0.0,\n    -1.0, -2.0, -1.0\n);\n\nfloat valueSobel(vec2 fragCoord)\n{\n    vec2 sobel = vec2(0,0);\n    \n    for(int i = 0; i < 9; i++) {\n        float value = texelFetch(iChannel0, ivec2(fragCoord) + samplePoints[i], 0).r;\n        sobel += value * vec2(XMatrix[i], YMatrix[i]);\n    }\n    \n    return length(sobel);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    float threshold = 0.9;\n    float edge = smoothstep(threshold, 0.0, valueSobel(fragCoord));\n    edge = pow(edge, 10.0);\n    edge = valueSobel(fragCoord);\n    fragColor = vec4(edge, edge, edge,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float posterize(float value){\n  float gamma = 0.3f;\n  float numColors = 8.0f;\n  \n\n  float c = value;\n  c = pow(c, gamma);\n  c = c * numColors;\n  c = floor(c);\n  c = c / numColors;\n  c = pow(c, 1.0/gamma);\n  \n  return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 5.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    float value = texture(iChannel0, uv).r;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tvalue += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i).r;\t\t\n        }\n    }\n    \n    // Output to screen\n    value /= Quality * Directions - 15.0;\n    \n    value = posterize(value);\n\n\tfragColor = vec4(value, value, value,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat hermite(float t)\n{\n  return t * t * (3.0 - 2.0 * t);\n}\n\nfloat noise(vec2 co, float frequency)\n{\n  vec2 v = vec2(co.x * frequency, co.y * frequency);\n\n  float ix1 = floor(v.x);\n  float iy1 = floor(v.y);\n  float ix2 = floor(v.x + 1.0);\n  float iy2 = floor(v.y + 1.0);\n\n  float fx = hermite(fract(v.x));\n  float fy = hermite(fract(v.y));\n\n  float fade1 = mix(rand(vec2(ix1, iy1)), rand(vec2(ix2, iy1)), fx);\n  float fade2 = mix(rand(vec2(ix1, iy2)), rand(vec2(ix2, iy2)), fx);\n\n  return mix(fade1, fade2, fy);\n}\n\nint modu(int x, int y)\n{\n    return x - y * (x/y);\n}\n\nfloat pnoise(vec2 co, float freq, int steps, float persistence)\n{\n  float value = 0.0;\n  float ampl = 1.0;\n  float sum = 0.0;\n  for(int i=0 ; i<steps ; i++)\n  {\n    sum += ampl;\n    vec2 crd = co + vec2(float(modu(i,2)) * iTime / 10.0, float(modu((i + 1),2)) * iTime / 10.0);\n    value += noise(crd, freq) * ampl;\n    freq *= 2.0;\n    ampl *= persistence;\n  }\n  return value / sum;\n}\n\nfloat inoise(vec2 co, float freq, int steps, float persistence, float prevVal)\n{\n  float value = prevVal;\n  float ampl = 0.5;\n  float sum = 0.0;\n  for(int i=0 ; i<steps ; i++)\n  {\n    sum += ampl;\n    vec2 crd = co + vec2(float(modu(i,2)) * iTime / 10.0, float(modu((i + 1),2)) * iTime / 10.0);\n    value -= noise(-crd, freq) * ampl;\n    freq *= 2.0;\n    ampl *= persistence;\n  }\n  return value / sum;\n}\n\nfloat posterize(float value){\n  float gamma = 0.3f;\n  float numColors = 20.0f;\n  \n\n  float c = value;\n  c = pow(c, gamma);\n  c = c * numColors;\n  c = floor(c);\n  c = c / numColors;\n  c = pow(c, 1.0/gamma);\n  \n  return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n\n    float value = pnoise(uv, 5.0, 8, 0.5);\n    value = inoise(uv, 5.0, 1, 0.5, value);\n    value = abs(value);\n    \n    //value = posterize(value);\n\n\tfragColor = vec4(value, value, value,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}