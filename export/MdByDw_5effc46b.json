{"ver":"0.1","info":{"id":"MdByDw","date":"1492315107","viewed":131,"name":"GRAPROG - Final Project","username":"mcad_30","description":"FINAL PROJECT FOR GRAPROG. FINALLY","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define TWOPI 6.2831\n#define OCTAVES 6\n\n#define patternNo 1\n\nfloat circleMaker(vec2 uv, vec2 center, float radius);\nfloat createShape(vec2 centerPosition, float side);\nfloat rand(vec2 uv);\nfloat noise(in vec2 st);\nfloat fbm (in vec2 uv);\n\nvec3 colorYellow = vec3(1.0, 1.0, 0.0 );\nvec3 colorBrown = vec3(0.53, 0.45, 0.11);\nvec3 colorGreen = vec3(0.0, 1.0, 0.0 );\nvec3 colorRed = vec3(1.0, 0.0, 0.0);\nvec3 colorBlue = vec3(0.0, 0.0, 1.0);\nvec3 colorBlack = vec3(0.0, 0.0, 0.0 );\nvec3 colorWhite = vec3(1.0, 1.0, 1.0 );\n\n#if patternNo == 1\n\n// Lava lamp\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    float n = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position1 = vec2(0.52*ratio , abs(0.5 * sin(0.03*iTime)));\n    position1.y += n;\n    vec3 circle1 = vec3(circleMaker(uv, position1, .09));\n    circle1 *= colorGreen;\n    \n    float n2 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position2 = vec2(0.5*ratio , abs(0.9 * sin(0.03*iTime)));\n    position2.y += n2;\n    vec3 circle2 = vec3(circleMaker(uv, position2, .06));\n    circle2 *= colorGreen;\n    \n    float n3 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position3 = vec2(0.48*ratio , abs(0.9 * sin(0.04*iTime)));\n    position3.y += n3;\n    vec3 circle3 = vec3(circleMaker(uv, position3, .06));\n    circle3 *= colorGreen;\n    \n    float n4 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position4 = vec2(0.5*ratio , abs(0.9 * sin(0.07*iTime)));\n    position4.y += n4;\n    vec3 circle4 = vec3(circleMaker(uv, position4, .06));\n    circle4 *= colorGreen;\n    \n    float n5 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position5 = vec2(0.5*ratio , abs(0.9 * sin(0.05*iTime)));\n    position5.y += n5;\n    vec3 circle5 = vec3(circleMaker(uv, position5, .06));\n    circle5 *= colorGreen;\n    \n    float n6 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position6 = vec2(0.52*ratio , abs(0.9 * sin(0.08*iTime)));\n    position6.y += n6;\n    vec3 circle6 = vec3(circleMaker(uv, position6, .06));\n    circle6 *= colorGreen;\n    \n    float n7 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position7 = vec2(0.48*ratio , abs(0.9 * sin(0.1*iTime)));\n    position7.y += n7;\n    vec3 circle7 = vec3(circleMaker(uv, position7, .06));\n    circle7 *= colorGreen;\n    \n    float n8 = noise(uv  * 10. + iTime) * 0.1; \n    vec2 position8 = vec2(0.5*ratio , 0.001 + n8);\n    vec3 circle8 = vec3(circleMaker(uv, position8, .15));\n    circle8 *= colorGreen;\n    \n    //==============================================================================================\n    vec3 square1 = vec3(1.0);\n    vec2 squarePosition = vec2(0.5*ratio, 0.5);\n    square1 = vec3(step(createShape(uv - squarePosition, 2.0), 0.1));\n    square1 *= colorYellow;\n    \n    fragColor = vec4(vec3(square1 - (circle1 + circle2 + circle3 + circle4 + circle5 + circle6 + circle7 + circle8)), 1.0);\n}\n\n#elif patternNo == 2\n\n// Sand Paper\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float value = 0.0;\n    \n    value = fract(sin(uv.x * uv.y*10000.) * 10000.);\n    uv *= 1.0;\n    vec2 idx= floor(uv);\n    value = rand(uv);\n\tfragColor = vec4(vec3(value) * colorBrown,1.0);\n}\n\n#elif patternNo == 3\n\n// Wood Plank\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 value = vec3(0.35, 0.27, 0.18);\n    \n    float plank = abs(sin(uv.x *20.));\n    value *= plank;\n    \n    float mask = (step(3.0, uv.x) - step(0.35, uv.x));\n\tvec3 yellow = vec3(1.0, 1.0, 0.0);\n    vec3 red = vec3(1.0, 0.0, 0.0);\n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    \n    value = mix(value, vec3(0.390, 0.265, 0.192), vec3(fbm(uv.xx*25.)));\n    value = mix(value, vec3(0.930, 0.493, 0.502), rand(uv.xx)*.1);\n    value -= (noise(uv*vec2(500.0, 14.0)-noise(uv*vec2(1000.0,64.0)))* 0.1);\n    \n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    float n = noise(uv  * 500.) * 0.1; \n    vec2 position1 = vec2(0.3*ratio , 0.7);\n    position1.y += n;\n    vec3 circle1 = vec3(circleMaker(uv, position1, 4.0 * n));\n\n    circle1 *= colorYellow;\n    \n\tfragColor = vec4(value + circle1,1.0);\n}\n\n#elif patternNo == 4\n\n// Lava\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv += iTime/100.;\n    vec3 color = mix(vec3(1.0, 1.0, 0.0),vec3(0.8,0.4,0.0),vec3(fbm(uv*10.)*2.0));\n    fragColor = vec4(vec3(color),1.0);\n}\n\n#elif patternNo == 5\n\n// Clouds\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y += iTime/100.;\n    vec3 color = mix(vec3(0.93,0.93,0.95),vec3(0.0, 0.0, 0.98),vec3(fbm(uv*12.)*1.7));\n    \n    fragColor = vec4(vec3(color),1.0);\n}\n\n#elif patternNo == 6\n\n// Marble\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = mix(vec3(0.0, 0.0, 0.0),vec3(1.0, 1.0, 1.0),vec3(fbm(uv*10.)*1.5));\n    fragColor = vec4(vec3(color),1.0);\n}\n\n#elif patternNo == 7\n\n// Scottish Tartan x Pollock Painting\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Green x\n    float line1 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine1 = vec3(step (0.05 - line1, uv.x) - step(.1 - line1, uv.x));\n    \n    float line2 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine2 = vec3(step (0.5 - line2, uv.x) - step(.55 - line2, uv.x));\n    \n    float line3 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine3 = vec3(step (0.9 - line3, uv.x) - step(.95 - line3, uv.x));\n    \n    // Red x\n    float line4 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine4 = vec3(step (0.2- line4, uv.x) - step(.25 - line4, uv.x));\n    \n    float line5 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine5 = vec3(step (0.65 - line3, uv.x) - step(0.7 - line3, uv.x));\n    \n    //Blue x\n    float line7 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine7 = vec3(step (0.35 - line4, uv.x) - step(.4 - line4, uv.x));\n    \n    float line8 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine8 = vec3(step (0.8 - line4, uv.x) - step(.85 - line4, uv.x));\n    \n   \n    // Green y\n    \n    float lineY1 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLineY1 = vec3(step (0.05 - lineY1, uv.y) - step(.1 - lineY1, uv.y));\n    \n    float lineY2 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLineY2 = vec3(step (0.5 - lineY2, uv.y) - step(.55 - lineY2, uv.y));\n    \n    float lineY3 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLineY3 = vec3(step (0.94 - lineY3, uv.y) - step(.99 - lineY3, uv.y));\n    \n    // Red y\n    float line6 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLineY6 = vec3(step (0.49 - line4, uv.x) - step(.492 - line4, uv.x));\n    \n     //Blue y\n    float line9 = noise(uv * 10. + iTime) * .05;\n    vec3 noiseLine9 = vec3(step (0.49 - line4, uv.x) - step(.492 - line4, uv.x));\n    \n    vec3 greenLines = (noiseLine1 + noiseLine2 + noiseLine3) * colorGreen;\n    vec3 redLines = (noiseLine4 + noiseLine5) * colorRed;\n    vec3 blueLines = (noiseLine7 + noiseLine8) * colorBlue;\n    \n    vec3 greenYLines = vec3(noiseLineY1 + noiseLineY2  + noiseLineY3) * colorGreen;\n    \n\tfragColor = vec4(vec3(greenLines + redLines + blueLines + greenYLines) ,1.0);    \n    \n}\n\n#elif patternNo == 8\n\n// Night Sea\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    \n    if(uv.y > 0.3){\n        vec3 color = mix(vec3(0.18, 0.17, 0.20),vec3(0.13, 0.13, 0.18),vec3(fbm(uv*10.)*6.5));\n        vec3 moonColor = mix(vec3(0.0, 0.0, 0.0),vec3(1.0, 1.0, 1.0),vec3(fbm(uv*60.)*1.5));\n        \n    \tuv.x *= ratio;\n    \tfloat n = noise(uv) * 0.1; \n    \tvec2 position = vec2(0.5*ratio, 0.5);\n    \tvec3 circle = vec3(circleMaker(uv, position, 0.15));\n    \tcircle *= moonColor;\n        \n    \t\n    \tfragColor = vec4(vec3(color + circle),1.0);\n    }\n    \n    else if(uv.y < 0.3){\n        \n        vec3 color = mix(vec3(0.0, 0.0, 0.0),vec3(0.0, 0.0, 0.06),vec3(fbm(uv*10.)*1.5));\n        vec3 moonReflectionColor = mix(vec3(0.0, 0.0, 0.0),vec3(1.0, 1.0, 1.0),vec3(fbm(uv*60.)*1.5));\n    \tuv.x *= ratio;\n    \tfloat n = noise(uv  * 70. + iTime) * 0.2; \n    \tvec2 position2 = vec2(0.5 * ratio , 0.15 + n);\n    \tvec3 circle2 = vec3(circleMaker(uv, position2, .10));\n    \tcircle2 *= moonReflectionColor;\n        \n    \t\n        \n    \tfragColor = vec4(vec3(color + circle2),1.0);   \n    }\n}\n\n\n#endif\n\n\nfloat circleMaker(vec2 uv, vec2 center, float radius)\n{\n    float circle = step(distance(center,uv), radius);\n    return circle;\n}\n\nfloat createShape(vec2 centerPosition, float side)\n{  \n    float a = atan(centerPosition.y,centerPosition.x);\n    float r = TWOPI/side;\n    return cos(floor(.5+a/r)*r-a)*length(centerPosition.xy);\n}\n\nfloat rand(vec2 uv)\n{\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 uv) {\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n","name":"Image","description":"","type":"image"}]}