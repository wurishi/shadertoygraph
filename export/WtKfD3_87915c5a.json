{"ver":"0.1","info":{"id":"WtKfD3","date":"1615202302","viewed":2179,"name":"tuto:smart gaussian blur (video)","username":"FabriceNeyret2","description":"mouse.y to choose filter size.\nFast Gaussian blur using MIPmap LOD (left circle) + separability : 60fps whatever the filter size.\nCommon: set N for quality:  ( cost = 2*N )\n  13 (default) = almost identical to full convolution.\n    7 is still pretty cool.","likes":50,"published":3,"flags":32,"usePreview":0,"tags":["blur","filter","mipmap","convolution","gaussian","tuto"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fast Gaussian blur using MIPmap LOD + separability : 60fps whatever the filter size.\n// Common: set N for quality:  ( cost = 2*N )\n//  13 (default) = almost identical to full convolution.\n//   7 is still pretty cool.\n// See https://www.shadertoy.com/view/wtVfWK for experimentation\n\n\n// === second pass of separable convolution\n\ninclude    // include functions\n\n#define D(P,r) O = mix(O, vec4(1), smoothstep(1.5/R.y,0.,abs(length(U-P)-r) ) ) // draw ring\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n// O = texelFetch(iChannel0, ivec2(u), 0); return;\n\n    init \n    vec2 U = u / R.y;  \n    O = convol1D(U,vec2(0,1));\n    \n    U = .5+ ( u - .5*R ) / R.y;  \n    D(.5, w );                                       // draw filter\n    D( vec2(-.3,(z+.5)/6.), .03 );                   // draw LOD \n    D( vec2(1.3,   .5 /6.), .03 );                   // ref LOD 0\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === source image to gaussian-blur\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texture(iChannel0, U/R);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"int           N = 13; // 7                              // target sampling rate\nfloat         w = .1,                                   // filter width\n              z;                                        // LOD MIPmap level to use for integration \n#define init  w = length(iMouse.xy)<20. ? .2+.2*sin(iTime)                  \\\n                                        : abs(iMouse.y/R.y-.5);             \\\n              z = ceil(max(0.,log2(w*R.y/float(N))));   // N/w = res/2^z\n#define R     iResolution.xy\n\n// forced to doing this silly thing because of silly not-really-includes Common\n#define include                                                             \\\n                                                                            \\\nvec4 convol2D(vec2 U) {                                                     \\\n    vec4  O = vec4(0);                                                      \\\n    float r = float(N-1)/2., g, t=0.;                                       \\\n    for( int k=0; k<N*N; k++ ) {                                            \\\n        vec2 P = vec2(k%N,k/N) / r - 1.;                                    \\\n        t += g = exp(-2.*dot(P,P) );                                        \\\n        O += g * textureLod(iChannel0, (U+w*P) *R.y/R, z );                 \\\n    }                                                                       \\\n    return O/t;                                                             \\\n}                                                                           \\\n                                                                            \\\nvec4 convol1D(vec2 U, vec2 D) {                                             \\\n    vec4  O = vec4(0);                                                      \\\n    float r = float(N-1)/2., g, t=0., x;                                    \\\n    for( int k=0; k<N; k++ ) {                                              \\\n        x = float(k)/r-1.;                                                  \\\n        t += g = exp(-2.*x*x );                                             \\\n        O += g * textureLod(iChannel0, (U+w*x*D) *R.y/R, z );               \\\n    }                                                                       \\\n    return O/t;                                                             \\\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// === first pass of separable convolution\n\ninclude    // include functions\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    init \n    vec2 U = u / R.y;  \n    \n  //O = convol2D(U); return;\n    O = convol1D(U,vec2(1,0));\n}\n\n\n","name":"Buffer B","description":"","type":"buffer"}]}