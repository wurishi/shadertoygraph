{"ver":"0.1","info":{"id":"llVSRw","date":"1483730291","viewed":254,"name":"Winter lake","username":"jmb","description":"Winter lake","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","ice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 64\n#define eps 0.01\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat smink( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 sunk(vec2 a, vec2 b, float k)\n{\n\tfloat sm = smink(a.x,b.x, k);\n\tfloat m = min(a.x, b.x);\n\tfloat ca = abs(sm -a.x);\n\tfloat cb = abs(sm -b.x);\n\t\n\treturn ca < cb ? vec2(sm, a.y) : vec2(m, b.y);\n}\n\nvec3 applyFog( in vec3  rgb,       // original color of the pixel\n               in float distance ) // camera to point distance\n{\n    float b = 0.012;\n    float fogAmount = 1.0 - exp( -distance*distance*b );\n    vec3  fogColor  = 0.6*vec3(0.2,0.3,0.4);\n    return mix( rgb, fogColor, fogAmount );\n}\n\nvec2 scene(vec3 p)\n{\n    float a1 = udRoundBox( p - vec3(0.3, 0.0, -1.0), vec3(0.3, 0.01, 5.0), 0.02);\n    float a2 = udRoundBox( p - vec3(0.56, -0.2, 0.3), vec3(0.01, 0.15, 0.01), 0.0);\n    float a3 = udRoundBox( p - vec3(0.56, -0.2, -1.2), vec3(0.01, 0.15, 0.01), 0.0);\n    float a4 = udRoundBox( p - vec3(0.56, -0.2, 2.7), vec3(0.01, 0.15, 0.01), 0.0);\n    float a = min(a1, min(a2, a3));\n    a = min(a, a4);\n    float g  = udRoundBox( p - vec3(0.3, -0.22, -1.0), vec3(0.4, 0.01, 5.0), 0.0);\n    \n    return sunk(vec2(g,0), vec2(a, 1), 0.1);\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec3 normal;\n    vec3 ep = vec3(eps,0,0);\n    normal.x = scene(p + ep.xyz).x - scene(p - ep.xyz).x;\n    normal.y = scene(p + ep.yxz).x - scene(p - ep.yxz).x;\n    normal.z = scene(p + ep.yzx).x - scene(p - ep.yzx).x;\n    return normalize(normal);\n}\n\nfloat specular(vec3 normal, vec3 light, vec3 viewdir, float s)\n{\n\tfloat k = max(0.0, dot(viewdir, reflect(light, normal)));\n    return  pow(k, s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 q = p - vec2(0.5, 0.4);\n    \n    //dist\n    q.y += 0.015*cos(50.0*p.x) * (1.0 - smoothstep(0.0, 0.3, p.y));\n    \n\tvec3 blue = 1.0/255.0 * vec3(26, 31, 40);\n    vec3 orange = vec3(1.0, 0.4, 0);\n    \n    vec3 col = mix(7.5*blue, blue, smoothstep(0.0, 1.0, 2.0*abs(q.y)));\n    col = mix(0.4*col + 0.9*orange, col, smoothstep(0.0, 0.65, 2.0*abs(q.y)));\n    col *= smoothstep(0.0, 0.02 + 0.015*cos(5.0*(q.x -0.5) + 0.2*sin(800.0*q.x) + 0.3*sin(20.0*q.x)), abs(q.y));\n    \n    col += 0.12*texture(iChannel0, 2.2*p).x * (1.0 - smoothstep(0.0, 0.5, p.y));\n    \n    //raymarch\n    float d = 5.0;\n\tfloat rot = -0.4;\n    vec3 eye = vec3(-d*sin(rot) - 0.3, 1.0, -d*cos(rot) );\n    vec3 up = vec3(0, 1, 0);\n\tvec3 forward = vec3(0, 0, 1);\n    vec3 right = cross(forward, up);\n    \n    float f = 1.0;\n    float u = fragCoord.x * 2.0 / iResolution.x - 1.0;\n    float v = fragCoord.y * 2.0 / iResolution.x - 0.5;\n    vec3 ro = eye + forward * f + right * u + up * v;\n\tvec3 rd = normalize(ro - eye);\n\n   \tvec3 ambient = 0.1*vec3(0.73, 0.43,0.34);\n    vec3 invLight = -normalize(vec3(0.3, -2.9, -4));\n            \n    \n    float t = 0.0;\n    for(int i = 0; i < MAX_STEPS; ++i)\n    {\n        vec3 p = ro + rd * t;\n        vec2 sc = scene(p);\n        float d = sc.x;\n      \tfloat m = sc.y;\n        if(d < eps)\n        {\n            vec3 normal = getNormal(p);\n            float diffuse = max(0.,dot(invLight, normal));\n            float spec = specular(normal, invLight, rd, 10.0);\n\n            if(m == 1.0){\n            \tcol = ambient*(1.0+diffuse+spec+0.1*cos(30.0*p.x));\n                col += 0.12*texture(iChannel0, 0.1*p.xy).x;\n                col = applyFog(col, length(p - eye));\n            }else {\n                col -= 0.3*diffuse - 0.0*spec;\n            }\n\n            break;\n        }\n\n\n        t += d;\n    }\n\t\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}