{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// ***************************************//\n// 'Jellybeans', by Kleber A Garcia, 2015 (c)\n// ***************************************//\n\n\nconst vec3 CAPS0 = vec3(-0.5,0.0,-1.0);\nconst vec3 CAPS1 = vec3(0.5,0.0,1.0);\nconst float RAD = 0.7;\nconst vec3 LIGHT = vec3(2.0, 0.4, -0.5);\nconst vec3 LIGHT2 = vec3(-2.0, 0.4, 0.9);\nconst vec3 LIGHT3 = vec3(-20.0, 4.4, 10.3);\nconst vec3 FLOOR_AMB = vec3(0.65,1.4,0.5);\nconst vec3 CEIL_AMB = vec3(0.4,0.4,0.40);\n\n#define PI 3.141596\n#define TWO_PI (2.0*PI)\n\nvec3 applyRot1(vec3 cc, float rot )\n{\n    vec2 sc = vec2(sin(rot),cos(rot));\n\n    return vec3(cc.x*sc.x + cc.y*sc.y,  cc.x *(sc.x) + cc.y*(-sc.y),cc.z);    \n    \n}\n\nvec3 applyRot2(vec3 cc, float rot )\n{\n    vec2 sc = vec2(sin(rot),cos(rot));\n\n    return vec3(cc.x, cc.y*sc.x + cc.z*sc.y,  cc.y *(sc.x) + cc.z*(-sc.y));    \n    \n}\n\nfloat mat(vec3 c0, vec3 c1, float rad, vec3 pos, out vec3 normal, out vec3 col, out int material)\n{\n    material = 0;\n    vec3 ids = abs(pos / 10.0);    \n    ids = mod(ids, vec3(10.0));\n    \n    float rot =( mod((floor(ids.x+ids.y+ids.z)/10.0),6.0)) *iTime;\n  \n    c0 = applyRot1(c0,rot);\n    c1 = applyRot1(c1,rot);\n    c0 = applyRot2(c0,rot);\n    c1 = applyRot2(c1,rot);\n    \n \n    \n    col =vec3(ids/10.0);\n    \n    pos = mod(pos, vec3(10,10,10)) - vec3(5.0);\n  \n    vec3 relPos = pos - c0;\n    vec3 c1c0 = c1 - c0;\n    float dist = length(c1c0);\n    vec3 distDir = normalize(c1c0);\n    float projPosDist = dot(relPos, distDir);\n    vec3 projectedPos = c0 + projPosDist * distDir;\n    float t = clamp(projPosDist / dist, 0.0, 1.0);    \n    vec3 intersectionPt =  mix(c0,c1,t);\n    normal = normalize(pos - intersectionPt);\n    return length(pos - intersectionPt) - rad;\n    \n   \n}\nvec2 getUv(vec3 normal)\n{\n    vec2 xzNorm = normalize(normal.xz);\n    return vec2((acos(xzNorm.x) / TWO_PI), atan( normal.y/( length(normal.xz) ) ) / TWO_PI);\n}\nvec3 tweakNormal(vec3 normal, float freq, float blending)\n{\n    vec2 uv = getUv(normal);\n    float s = sin(uv.x * freq);\n    float c = cos(uv.y * freq);\n    normal.x += blending*s;\n    normal.z += blending*c;\n    return normalize(normal);\n}\nvoid pointLight(vec3 normal, vec3 pos, vec3 view, vec3 lightPos, out vec3 diffuse, out vec3 spec, float specPow)\n{\n    vec3 lightDir = normalize(lightPos - pos);\n    diffuse = vec3(clamp(dot(lightDir, normal), 0.0, 1.0));\n    \n    vec3 h = reflect(-view, normal);\n    float nDoth = clamp(dot(-lightDir, h), 0.0, 1.0);    \n    spec = vec3(pow(nDoth, specPow));\n    spec = mix(spec, vec3(pow(nDoth, 32.0)), 0.4);\n    \n}\nvoid scene(vec3 ray, vec3 pos, out vec3 p, out vec3 col)\n{\n    p = pos;\n    int material = -1;\n    vec3 normal = vec3(0,0,0);\n    vec3 disp = vec3(0,0,0.1);\n    vec3 alb = vec3(0,0,0);\n    for (int it = 0; it <  97; ++it)\n    {\n    \tint m = 0;\n        \n       \tfloat dist = mat(CAPS0,CAPS1, RAD, p,normal,alb, m);\n        if (dist < 0.001) { material = m; }\n        else { p = p + dist * ray;}\n    }    \n    \n    if (material == -1) { col = vec3(0,0,0);  }\n    else if (material == 0)\n    {\n       \n\t\n        vec3 occ = vec3(1.0 - pow(clamp(-p.y, 0.0, 1.0), 4.0));\n        float nDotv = dot(normal, -ray);\n        float fresnel = clamp(0.4 + pow((1.0 - clamp(nDotv, 0.0, 1.0)), 9.0), 0.0, 1.0);\n\t\tfloat roughness = 2.0;\n        float specForce = 1.0;\n        normal = mix(tweakNormal(normal,4.0,75.0), normal, pow(clamp((1.0 - clamp(nDotv, 0.0, 1.0)),0.0,1.0),0.5));\n        float camSpec = 0.2*clamp(pow(clamp(nDotv, 0.0, 1.0), 1.0), 0.0, 0.3);\n        nDotv = dot(normal, -ray);\n\n        vec3 diffuse = vec3(0);\n        vec3 spec = vec3(0);\n        pointLight(normal, p, ray, LIGHT, diffuse, spec, roughness);\n        vec3 diffuse2 = vec3(0);\n        vec3 spec2 = vec3(0);\n        pointLight(normal, p, ray, LIGHT2, diffuse2, spec2, roughness);\n        diffuse += diffuse2;\n        spec += spec2;\n        pointLight(normal, p, ray, LIGHT3, diffuse2, spec2, roughness);\n        diffuse += diffuse2;\n        spec += spec2;\n        vec3 amb = mix(FLOOR_AMB, CEIL_AMB, clamp(2.0*p.y,0.0,1.0));\n        col = alb*(occ*diffuse + amb) + occ*specForce*(spec+camSpec)*fresnel;//spec + alb * (clamp(dot(normal, lightDir),0.0,1.0) + occ*AMB) + occ*0.4*pow((1.0 - clamp(dot(normal, -ray), 0.0, 1.0)), 9.0);\n\n    }\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 screen = uv * 2.0 - 1.0;\n    screen.x *= iResolution.x / iResolution.y;\n    vec3 target = vec3(screen.x, screen.y, 0.0);\n   \n    vec3 center = 0.5*(CAPS0 + CAPS1);\n \tvec3 cam = vec3(0,0,-5.0);\n    vec3 ray = normalize(target - cam);\n   vec3 dist = cam - center.xyz;\n\t /*float s = sin(0.2*iTime);\n    float c = cos(0.2*iTime); \n    ray = vec3(ray.x*c + ray.z*s, ray.y, ray.x *(-s) + ray.z*c);\n    dist = vec3(dist.x*c + dist.z*s, dist.y, dist.x * (-s) + dist.z*c);*/\n    \n    cam = dist + center.xyz + 7.0*iTime*vec3(0.1,0.9,0.6);\n\n    vec3 col = vec3(0,0,0);\n    vec3 p = vec3(0,0,0);\n    scene(ray, cam, p, col);\n   \n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lll3DH","date":"1421892547","viewed":251,"name":"Jellybeans","username":"Kecho","description":"Raymarched jellybeans","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarched","jellybeans"],"hasliked":0,"parentid":"","parentname":""}}