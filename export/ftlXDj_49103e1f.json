{"ver":"0.1","info":{"id":"ftlXDj","date":"1626584488","viewed":147,"name":"Neon Warbler","username":"TEttinger","description":"An edit of my Northern Warbler ( https://www.shadertoy.com/view/NsXXWN ) to try to break up large-scale grid patterns; this also made the colors much brighter and changed the shapes.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","plasma","lights","neon","northern","warbler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC0 licensed, do what thou wilt.\n\n// change the seed to any not-too-huge float and the colors/shapes will change.\nconst float SEED = 420.69; // starts off nicely.\nconst vec3 COEFFS = fract((SEED + 23.4567) * vec3(0.8191725133961645, 0.6710436067037893, 0.5497004779019703)) + 0.5;\n\n// what's different here is mostly how swayRandomized() incorporates the x, y, and z of seed and value for each component.\nvec3 swayRandomized(vec3 seed, vec3 value)\n{\n    return sin(seed.xyz + value.zxy + (cos(seed.zxy + value.yzx) + 2.0) * sin(seed.yzx + value.xyz));\n}\n\n// this function, if given steadily-increasing values in con, may return exponentially-rapidly-changing results.\n// even though it should always return a vec3 with components between -1 and 1, we use it carefully.\nvec3 cosmic(vec3 c, vec3 con)\n{\n    con += swayRandomized(c, con.yzx);\n    con += swayRandomized(c + 1.0, con.zxy);\n    con += swayRandomized(c + 2.0, con.xyz);\n    return con * 0.25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy + swayRandomized(COEFFS.zxy, (iTime * 0.1875) * COEFFS.yzx).xy) * 16.0;\n    // aTime, s, and c could be uniforms in some engines.\n    float aTime = iTime * 0.042 + 0.75;\n    vec3 adj = vec3(-1.11, 1.41, 1.61);\n    vec3 s = (swayRandomized(vec3(34.0, 76.0, 59.0), aTime + adj)) * 0.25;\n    vec3 c = (swayRandomized(vec3(27.0, 67.0, 45.0), aTime - adj)) * 0.25;\n    vec3 con = vec3(0.0004375, 0.0005625, 0.0008125) * aTime + c * uv.x + s * uv.y;\n    \n    con = cosmic(COEFFS, con);\n    con = cosmic(COEFFS * 0.618, con);\n//    con = cosmic(COEFFS, con);\n    \n    fragColor = vec4(swayRandomized(COEFFS + 3.0, con * (3.14159265)) * 0.5 + 0.5,1.0);\n}","name":"Image","description":"","type":"image"}]}