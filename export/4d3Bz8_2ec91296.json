{"ver":"0.1","info":{"id":"4d3Bz8","date":"1525201302","viewed":107,"name":"Pulsing Sphere Audio","username":"AndyWhetstone","description":"Sphere that pulses to audio in channel 0","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**\n\n * Exercise 2\n\n * - Make the camera move up and down while still pointing at the cube\n\n * - Make the camera roll (stay looking at the cube, and don't change the eye point)\n\n * - Make the camera zoom in and out\n\n */\n\n\nconst int MAX_MARCHING_STEPS = 255;\n\nconst float MIN_DIST = 0.0;\n\nconst float MAX_DIST = 100.0;\n\nconst float EPSILON = 0.0001;\n\n\n\n/**\n\n * Signed distance function for a cube centered at the origin\n\n * with width = height = length = 2.0\n\n */\n\nfloat cubeSDF(vec3 p) {\n\n   // If d.x < 0, then -1 < p.x < 1, and same logic applies to p.y, p.z\n\n   // So if all components of d are negative, then p is inside the unit cube\n\n   vec3 d = abs(p) - vec3(1.0, 1.0, 1.0);\n\n\n\n   // Assuming p is inside the cube, how far is it from the surface?\n\n   // Result will be negative or zero.\n\n   float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n\n\n\n   // Assuming p is outside the cube, how far is it from the surface?\n\n   // Result will be positive or zero.\n\n   float outsideDistance = length(max(d, 0.0));\n\n\n\n   return insideDistance + outsideDistance;\n\n}\n\nfloat distSphere(vec3 p, float radius)\n{\n    float freq = texture( iChannel0, vec2( 0.02, 0.2 ) ).x * 1.1;   \n  \treturn length(p) - clamp(0.1, 1.0, radius * freq);\n}\n\n\n/**\n\n * Signed distance function for a sphere centered at the origin with radius 1.0;\n\n */\n\n/*\n\nfloat sphereSDF(vec3 p) {\n\n   return length(p) - 1.0;\n\n}\n\n*/\n\nfloat length2( vec2 p )\n\n{\n\n   return sqrt( p.x*p.x + p.y*p.y );\n\n}\n\n\n\nfloat length6( vec2 p )\n\n{\n\n   p = p*p*p; p = p*p;\n\n   return pow( p.x + p.y, 1.0/6.0 );\n\n}\n\n\n\nfloat length8( vec2 p )\n\n{\n\n   p = p*p; p = p*p; p = p*p;\n\n   return pow( p.x + p.y, 1.0/8.0 );\n\n}\n\n\n\n\n\n\nfloat sdTorus82( vec3 p, vec2 t )\n\n{\n\n   vec2 q = vec2(length2(p.xz)-t.x,p.y);\n\n   return length8(q)-t.y;\n\n}\n\n\n\n/**\n\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n\n */\n\nfloat intersectSDF(float distA, float distB) {\n\n   return max(distA, distB);\n\n}\n\n\n\n/**\n\n * Constructive solid geometry union operation on SDF-calculated distances.\n\n */\n\nfloat unionSDF(float distA, float distB) {\n\n   return min(distA, distB);\n\n}\n\n\n\n/**\n\n * Constructive solid geometry difference operation on SDF-calculated distances.\n\n */\n\nfloat differenceSDF(float distA, float distB) {\n\n   return max(distA, -distB);\n\n}\n\nmat3 rotateX(float theta) {\n\n   float c = cos(theta);\n\n   float s = sin(theta);\n\n   return mat3(\n\n       vec3(1, 0, 0),\n\n       vec3(0, c, -s),\n\n       vec3(0, s, c)\n\n   );\n\n}\n\nmat3 rotateY(float theta) {\n\n   float c = cos(theta);\n\n   float s = sin(theta);\n\n   return mat3(\n\n       vec3(c, 0, s),\n\n       vec3(0, 1, 0),\n\n       vec3(-s, 0, c)\n\n   );\n\n}\n\nmat3 rotateZ(float theta) {\n\n   float c = cos(theta);\n\n   float s = sin(theta);\n\n   return mat3(\n\n       vec3(c, -s, 0),\n\n       vec3(s, c, 0),\n\n       vec3(0, 0, 1)\n\n   );\n\n}\n\n\n/**\n\n * Signed distance function describing the scene.\n\n *\n\n * Absolute value of the return value indicates the distance to the surface.\n\n * Sign indicates whether the point is inside or outside the surface,\n\n * negative indicating inside.\n\n */\n\nfloat sceneSDF(vec3 samplePoint) {\n    \n   samplePoint = rotateX(iTime/2.0)*samplePoint;\n    \n   samplePoint = rotateZ(iTime/1.0)*samplePoint;\n    \n   samplePoint = rotateY(iTime/2.0)*samplePoint;\n\n   float sphereDist = distSphere(samplePoint / 1.0, 0.5) * 1.2;\n\n   float cubeDist = cubeSDF(samplePoint);\n\n   return unionSDF( sdTorus82(samplePoint, vec2(0.6, 0.2)), intersectSDF(cubeDist, sphereDist));\n\n}\n\n\n\n\n\n/**\n\n * Return the shortest distance from the eyepoint to the scene surface along\n\n * the marching direction. If no part of the surface is found between start and end,\n\n * return end.\n\n *\n\n * eye: the eye point, acting as the origin of the ray\n\n * marchingDirection: the normalized direction to march in\n\n * start: the starting distance away from the eye\n\n * end: the max distance away from the ey to march before giving up\n\n */\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n\n   float depth = start;\n\n   for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n\n       float dist = sceneSDF(eye + depth * marchingDirection);\n\n       if (dist < EPSILON) {\n\n         return depth;\n\n       }\n\n       depth += dist;\n\n       if (depth >= end) {\n\n           return end;\n\n       }\n\n   }\n\n   return end;\n\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n\n\n\n/**\n\n * Return the normalized direction to march in from the eye point for a single pixel.\n\n *\n\n * fieldOfView: vertical field of view in degrees\n\n * size: resolution of the output image\n\n * fragCoord: the x,y coordinate of the pixel in the output image\n\n */\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n\n   vec2 xy = fragCoord - size / 2.0;\n\n   float z = size.y / tan(radians(fieldOfView) / 2.0);\n\n   return normalize(vec3(xy, -z));\n\n}\n\n\n\n/**\n\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n\n */\n\nvec3 estimateNormal(vec3 p) {\n\n   return normalize(vec3(\n\n       sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n\n       sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n\n       sceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n\n   ));\n\n}\n\n\n\n/**\n\n * Lighting contribution of a single point light source via Phong illumination.\n\n *\n\n * The vec3 returned is the RGB color of the light's contribution.\n\n *\n\n * k_a: Ambient color\n\n * k_d: Diffuse color\n\n * k_s: Specular color\n\n * alpha: Shininess coefficient\n\n * p: position of point being lit\n\n * eye: the position of the camera\n\n * lightPos: the position of the light\n\n * lightIntensity: color/intensity of the light\n\n *\n\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n\n */\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n\n                         vec3 lightPos, vec3 lightIntensity) {\n\n   vec3 N = estimateNormal(p);\n\n   vec3 L = normalize(lightPos - p);\n\n   vec3 V = normalize(eye - p);\n\n   vec3 R = normalize(reflect(-L, N));\n\n\n\n   float dotLN = dot(L, N);\n\n   float dotRV = dot(R, V);\n\n\n\n   if (dotLN < 0.0) {\n\n       // Light not visible from this point on the surface\n\n       return vec3(0.0, 0.0, 0.0);\n\n   }\n\n\n\n   if (dotRV < 0.0) {\n\n       // Light reflection in opposite direction as viewer, apply only diffuse\n\n       // component\n\n       return lightIntensity * (k_d * dotLN);\n\n   }\n\n   return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n\n}\n\nfloat rand(float n){\n    return fract(cos(n*89.42)*343.42);\n}\n\n\n\n/**\n\n * Lighting via Phong illumination.\n\n *\n\n * The vec3 returned is the RGB color of that point after lighting is applied.\n\n * k_a: Ambient color\n\n * k_d: Diffuse color\n\n * k_s: Specular color\n\n * alpha: Shininess coefficient\n\n * p: position of point being lit\n\n * eye: the position of the camera\n\n *\n\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n\n */\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n\n   float itm = iTime / 4.0;\n\n   const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n\n   vec3 color = ambientLight * k_a;\n\n\n\n   vec3 light1Pos = vec3(4.0 * sin(itm),\n\n                         2.0,\n\n                         4.0 * cos(itm));\n\n   vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n\n\n\n   color += phongContribForLight(k_d, k_s, alpha, p, eye,\n\n                                 light1Pos,\n\n                                 light1Intensity);\n\n\n\n   vec3 light2Pos = vec3(2.0 * sin(0.37 * itm),\n\n                         2.0 * cos(0.37 * itm),\n\n                         2.0);\n\n   vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n\n\n\n   color += phongContribForLight(k_d, k_s, alpha, p, eye,\n\n                                 light2Pos,\n\n                                 light2Intensity);   \n\n   return color;\n\n}\n\n\n\n/**\n\n * Return a transform matrix that will transform a ray from view space\n\n * to world coordinates, given the eye point, the camera target, and an up vector.\n\n *\n\n * This assumes that the center of the camera is aligned with the negative z axis in\n\n * view space when calculating the ray marching direction. See rayDirection.\n\n */\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\n   // Based on gluLookAt man page\n\n   vec3 f = normalize(center - eye);\n\n   vec3 s = normalize(cross(f, up));\n\n   vec3 u = cross(s, f);\n\n   return mat4(\n\n       vec4(s, 0.0),\n\n       vec4(u, 0.0),\n\n       vec4(-f, 0.0),\n\n       vec4(0.0, 0.0, 0.0, 1)\n\n   );\n\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n\n\n   vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n\n   vec3 eye = vec3(8.0, 5.0, 7.0);\n\n\n\n   mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n\n\n\n   vec3 worldDir = (viewToWorld * vec4(viewDir, 1.0)).xyz;\n\n\n\n   float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n\n\n\n   if (dist > MAX_DIST - EPSILON) {\n\n       // Didn't hit anything\n\n       fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\n      return;\n\n   }\n\n\n\n   // The closest point on the surface to the eyepoint along the view ray\n\n   vec3 p = eye + dist * worldDir;\n \n   \n   vec3 K_a = vec3(rand(4.0), 0.2, 0.2);\n\n   vec3 K_d = vec3(rand(3.0), 0.2, 0.7);\n\n   vec3 K_s = vec3(rand(2.0), 1.0, 1.0);\n    \n\n   float shininess = 10.0;\n\n\n\n   vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n\n    \n\n   fragColor = vec4(color, 1.0);\n   \n\n}","name":"Image","description":"","type":"image"}]}