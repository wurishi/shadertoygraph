{"ver":"0.1","info":{"id":"4sSBRt","date":"1501634381","viewed":130,"name":"ChirpChirp","username":"yaz","description":"Linear and exponential chirp","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["sound","sweep","chirp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sweepTime = 1.0;\n    fragColor = vec4(step( iTime, sweepTime ));\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n\n// https://en.wikipedia.org/wiki/Chirp#Linear\nfloat linChirp( float time, float freqStart, float freqEnd, float sweepTime )\n{\n    float k, chirp;\n    float phaseStart = 0.0;\n    \n    k = (freqEnd - freqStart) / sweepTime;\n    chirp = sin( phaseStart + 2.0 * PI * (freqStart * time + k / 2.0 * time * time) );\n    \n    chirp *= step( time, sweepTime );\n    \n    return chirp;\n}\n\n// https://en.wikipedia.org/wiki/Chirp#Exponential\nfloat expChirp( float time, float freqStart, float freqEnd, float sweepTime )\n{\n    float k, chirp;\n    float phaseStart = 0.0;\n    \n    k = pow( freqEnd/freqStart, 1.0 / sweepTime );\n    chirp = sin(phaseStart + 2.0 * PI * freqStart * (pow(k,time) - 1.0) / log(k) );\n    \n    chirp *= step( time, sweepTime );\n    \n    return chirp;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float chirp = 0.0;\n    \n    //chirp = linChirp( time, 440.0, 7040.0, 1.0 );\n    \n    chirp = expChirp( time, 440.0, 7040.0, 1.0 );\n\n    return vec2(chirp);\n}","name":"Sound","description":"","type":"sound"}]}