{"ver":"0.1","info":{"id":"tdK3DD","date":"1570223904","viewed":184,"name":"wobbly tunnel","username":"janiorca","description":"An effort at making a 2d tunnel effect using 'meta'-circles","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","blob","fake3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define num_circles 70\n#define inner_circles 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 center = vec2( 0.5, 0.5 );\n//    vec2 pixel_pos = fragCoord/iResolution.x;\n    vec2 pixel_pos = fragCoord/iResolution.x;\n    pixel_pos = pixel_pos - vec2( 0.5, 0.5-0.5*iResolution.y/iResolution.x );\n    \n    float target_alpha = 0.0;\n    vec3 final_color = vec3(0,0,0);\n\n    float mod_time = mod(iTime,0.2*5.0);\n    vec3 color_target;\n    for( int idx = 0; idx<num_circles; idx++ ) \n    {\n        float float_idx = float(idx);\n        float color_step = 0.7 / float(num_circles);\n        color_target = vec3( 0.8 - float(idx)*color_step, 0.5-float(idx)*color_step, 0.6);\n        float dist = 0.0;\n\n        float scale = float( idx+10 )/30.0;\n        vec2 adjusted_pos = pixel_pos * scale;\n        // Calculate a 'center' for each layer\n        vec2 base_position = vec2( sin( iTime*0.4923+float_idx*0.132135 )*0.09187*float_idx/20.0,\n                                sin( iTime*0.577125+float_idx*0.20197)*0.079*float_idx/20.0 );\n\n        // the layer outline is created by using a meta-circle. by creating\n        // moving point charges which create  \n        for( int idx2 = 0; idx2 < inner_circles; idx2 ++ ) \n        {\n            vec2 circle  = base_position + vec2( sin( iTime*0.192+float(idx2)*0.31135 )*0.2415,\n                                                sin( iTime*.4213+float(idx2)*1.1211 )*0.243 );\n            dist = dist + 1.0 / dot( circle-adjusted_pos, circle-adjusted_pos );\n        }\n        dist = dist *  0.0312116;\n\n        float threshold = 0.796;// / scale;\n        float alpha = smoothstep( threshold, threshold-0.01*scale, dist );\n\n        final_color = mix( final_color, alpha*color_target, max( 0.0, alpha-target_alpha ) );\n        target_alpha = alpha + target_alpha;\n    }\n    final_color = mix( final_color, color_target, max( 0.0, 1.0-target_alpha )  );\n\n    fragColor = vec4( final_color, 1.0 );\n}","name":"Image","description":"","type":"image"}]}