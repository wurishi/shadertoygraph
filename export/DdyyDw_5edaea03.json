{"ver":"0.1","info":{"id":"DdyyDw","date":"1696174164","viewed":49,"name":"Analytical blur (Triangle)","username":"mrboggieman","description":"Triangle with blur computed by overdrawing each pixel, using the analytical area of the triangle under the pixel (coverage), technique from https://github.com/andrewlowndes/vector-analytical-coverage. Click and drag to move one of the vertices.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["triangle","antialiasing","coverage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://github.com/andrewlowndes/vector-analytical-coverage\nconst float MAX_BLUR = 100.0;\n\nconst float EPSILON = 0.0001;\nconst float PRECISION_SCALE = 100.0;\nconst float TWO_PRECISION_SCALE_SQUARED = 2.0 * PRECISION_SCALE * PRECISION_SCALE;\nconst float HALF_PI = 1.57079632679;\n\nvec4 sort(vec4 val) {\n  float a = min(val.x, val.y);\n  float b = max(val.x, val.y);\n  float c = min(val.z, val.w);\n  float d = max(val.z, val.w);\n\n  float h = max(a, min(b, c));\n  float i = min(d, max(b, c));\n\n  return vec4(min(a, c), min(h, i), max(h, i), max(b, d));\n}\n\nfloat timeAtPos(float startPos, float dir, float newPos) {\n  return abs(dir) < EPSILON ? 0.0 : clamp((newPos - startPos) / dir, 0.0, 1.0);\n}\n\nint det2(ivec2 p1, ivec2 p2) {\n  return (p1.x * p2.y) - (p1.y * p2.x);\n}\n\nivec2 prepPoint(vec2 point, vec2 pixelMin, vec2 pixelMax) {\n    //limit the precision by scaling the point to map to an int\n    vec2 constrained_point = clamp(point, pixelMin, pixelMax);\n    return ivec2(floor(constrained_point * PRECISION_SCALE));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = (sin(iTime-HALF_PI)/2.0 + 0.5) * MAX_BLUR + 1.0;\n\n    //triangle coords\n    vec2 a = vec2(0.1, 0.2) * iResolution.xy;\n    vec2 b = vec2(0.8, 0.1) * iResolution.xy;\n    vec2 c = length(iMouse.xy) > 10.0 ? iMouse.xy : vec2(0.5, 0.5) * iResolution.xy;\n    \n    vec2 pixelMin = fragCoord.xy - scale/2.0;\n    vec2 pixelMax = pixelMin + scale;\n   \n    //intersect the triangle with the pixel bounds\n    vec2 e1 = b - a;\n    vec2 e2 = c - b;\n    vec2 e3 = a - c;\n\n    vec4 firstLineTs = sort(vec4(\n        timeAtPos(a.x, e1.x, pixelMin.x),\n        timeAtPos(a.x, e1.x, pixelMax.x),\n        timeAtPos(a.y, e1.y, pixelMin.y),\n        timeAtPos(a.y, e1.y, pixelMax.y)\n    ));\n\n    ivec2 p1 = prepPoint(a + e1 * firstLineTs.x, pixelMin, pixelMax);\n    ivec2 p2 = prepPoint(a + e1 * firstLineTs.y, pixelMin, pixelMax);\n    ivec2 p3 = prepPoint(a + e1 * firstLineTs.z, pixelMin, pixelMax);\n    ivec2 p4 = prepPoint(a + e1 * firstLineTs.w, pixelMin, pixelMax);\n\n    vec4 secondLineTs = sort(vec4(\n        timeAtPos(b.x, e2.x, pixelMin.x),\n        timeAtPos(b.x, e2.x, pixelMax.x),\n        timeAtPos(b.y, e2.y, pixelMin.y),\n        timeAtPos(b.y, e2.y, pixelMax.y)\n    ));\n\n    ivec2 p5 = prepPoint(b + e2 * secondLineTs.x, pixelMin, pixelMax);\n    ivec2 p6 = prepPoint(b + e2 * secondLineTs.y, pixelMin, pixelMax);\n    ivec2 p7 = prepPoint(b + e2 * secondLineTs.z, pixelMin, pixelMax);\n    ivec2 p8 = prepPoint(b + e2 * secondLineTs.w, pixelMin, pixelMax);\n\n    vec4 thirdLineTs = sort(vec4(\n        timeAtPos(c.x, e3.x, pixelMin.x),\n        timeAtPos(c.x, e3.x, pixelMax.x),\n        timeAtPos(c.y, e3.y, pixelMin.y),\n        timeAtPos(c.y, e3.y, pixelMax.y)\n    ));\n\n    ivec2 p9  = prepPoint(c + e3 * thirdLineTs.x, pixelMin, pixelMax);\n    ivec2 p10 = prepPoint(c + e3 * thirdLineTs.y, pixelMin, pixelMax);\n    ivec2 p11 = prepPoint(c + e3 * thirdLineTs.z, pixelMin, pixelMax);\n    ivec2 p12 = prepPoint(c + e3 * thirdLineTs.w, pixelMin, pixelMax);\n\n    //compute the area under the formed polygon\n    int polygonArea = (\n        det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\n        det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) + \n        det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1)\n    );\n\n    float contribution = clamp(float(polygonArea) / (TWO_PRECISION_SCALE_SQUARED * scale * scale), 0.0, 1.0);\n    fragColor = vec4(contribution, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}