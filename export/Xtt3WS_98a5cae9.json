{"ver":"0.1","info":{"id":"Xtt3WS","date":"1471303163","viewed":254,"name":"stripes","username":"nshelton","description":"slow raymarch sphere sketch","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","sphere","stripes","slow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n \n\n\nvec3 sph2cart(float r, float theta, float phi)\n{\n   return  vec3(r * cos(theta) * sin(phi),\n         r * sin(theta) * sin(phi),\t\n         r * cos(phi));\n}\n\n\nfloat sph(float rad, vec3 center, vec3 p)\n{\n    return length(p - center) - rad;   \n}\n\nfloat DE(vec3 p) \n{\n  float theta = 30.0; 2.4;\n  float phi = 100.0; // 2.4;// + iTime;\n\n   float mind = sph(1.0, vec3(0.0), p);\n    \n   for(int i = 0; i < 40; i ++)\n   {\n       theta += 0.1;\n       phi += iTime/20.;\n       \n     mind = min(mind,  sph(0.001 * pow(float(i/2 ), 2.0), sph2cart(1.0, theta, phi), p) );\n   }\n    return mind;\n}\n    \nvec3 grad(vec3 p)\n{\n    vec2 e = vec2(0.01, 0.0);\n    \n \treturn normalize(vec3( DE(p + e.xyy) - DE(p - e.xyy), \n                          DE(p + e.yxy) - DE(p - e.yxy), \n                          DE(p + e.yyx) - DE(p - e.yyx)));\n    \n    \n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 uv_n = 2.5 * (uv - 0.5) * vec2(1.0, iResolution.y / iResolution.x) ; \n        \n    vec3 cam = vec3(0.0, 0.0, -2);\n    \n    vec3 ray = normalize(vec3( uv_n, 1.0));\n    float t = 0.0;\n    float d = 0.0;\n    vec3 p = cam;\n    float iter = 0.0;\n    bool hit = false;\n    \n    for ( int i = 0; i < 20; i ++) \n    {\n        p = t * ray + cam;\n\t\n\t\td = DE(p);\n        \n        if ( d < 0.01) {\n        \thit = true;\n            break;\n\n        }\n        \n        t += d;\n        iter++;\n        \n    }\n       \t\tvec3 normal = grad(p );\n\n    float st;\n    \n    vec3 color = vec3(1.0);\n    if (!hit){\n        iter = 0.5;\n        st = 1.0;\n    }\n    else\n    {\n   \t\tst =  fract((p.y + p.x + snoise(p)/3.0 - iTime/10.0 ) * 6. ) < 0.5? 0.0 : 1.0;\n        float thickness = sin(p.x * 10.) / 10.0 + 0.2;\n        \n        \n    \t//st = abs(sin(10. * (p.y + p.x )));\n        \n        //st = snoise(p * 4.0 + iTime);\n         \n\t    float shade = 1.0;// abs(dot(ray, normal));\n        \n        color = vec3(st) * shade;\n\n    }\n    \n\n\tfragColor = vec4(color , 1.0);\n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}