{"ver":"0.1","info":{"id":"XdcGzr","date":"1447614697","viewed":3029,"name":"Matrix rain < 200 char","username":"reinder","description":"Compacting [url=https://www.shadertoy.com/view/4tlXR4]matrix - 255 char[/url] by FabriceNeyret2 even more and added some color. All credits go to FabriceNeyret2.","likes":44,"published":3,"flags":0,"usePreview":0,"tags":["font","2tweets","short","pseudofont"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by Reinder Nijhoff 2015\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n// @reindernijhoff\n//\n// https://www.shadertoy.com/view/XdcGzr\n//\n// Based on matrix - 255 char by FabriceNeyret2: https://www.shadertoy.com/view/4tlXR4\n// compacting to 2-tweets patriciogv's Matrix shader https://www.shadertoy.com/view/MlfXzN ( 819 -> 255 chars ) \n// But first go see patriciogv's comments and readable sources :-D\n//\n// All credits go to FabriceNeyret2\n//\n\n#define R fract(43.*sin(dot(p,p)))\n\nvoid mainImage( out vec4 o, vec2 i) {\n    vec2 j = fract(i*=.1), \n         p = vec2(9,int(iTime*(9.+8.*sin(i-=j).x)))+i;\n    o-=o; o.g=R; p*=j; o*=R>.5&&j.x<.6&&j.y<.8?1.:0.;\n}","name":"Image","description":"","type":"image"}]}