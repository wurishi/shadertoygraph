{"ver":"0.1","info":{"id":"wscGDn","date":"1568271668","viewed":518,"name":"Hexagon_movement","username":"skaplun","description":"Variation on hexagon pattern.\nTiling taken from @BigWIngs tutorial.","likes":28,"published":1,"flags":32,"usePreview":0,"tags":["noise","animation","hexagon","bloom","tiling","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.y;\n    vec4 color = vec4(0.);\n    for(float i=0.; i<6.; i++){\n    \tcolor += texture(iChannel0, fragCoord/iResolution.xy, i);\n    }\n\tcolor *= smoothstep(.25, .025, hexCoord(uv * GRID).y);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define GRID 5.\n#define PARTICLES_COUNT 200\n#define MAX_PARTICLE_Y floor(PARTICLES_COUNT/iResolution.x)\n#define PID (int(fragCoord.y) * int(iResolution.x) + int(fragCoord.x))\n#define DEPID(i) vec2(mod(i, iResolution.x), floor(i/iResolution.x))\n#define ASPECT (iResolution.x/iResolution.y)\n#define PI 3.14159265359\n#define SEGMENT (PI/3.)\n#define HALF_SEG (PI/6.)\n\nfloat hexDistance(in vec2 p){\n\tp = abs(p);\n    float h = dot(p, normalize(vec2(1., 1.73)));\n    return max(h, p.x);\n}\n\nvec4 hexCoord(in vec2 uv){\n    vec2 r = vec2(1., 1.73);\n    vec2 h = r * .5;\n    \n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv-h, r) - h;\n    \n    vec2 gv;\n    if(length(a) < length(b))\n        gv = a;\n    else\n        gv = b;\n    \n    float x = atan(-gv.y, gv.x) + PI;\n    float y = .5 - hexDistance(gv);\n    return vec4(x, y, uv - gv);\n}\n\nmat2 rotate(float a){\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\t\n}\n\nfloat bbsm = 1739.;\nvec2 bbsopt(in vec2 a){\n\treturn fract(a*a*(1./bbsm))*bbsm;\n}\nvec2 mod1024(in vec2 a){\n\treturn fract(a*(1./1024.))*1024.;\t\n}\nvec4 hash(in vec2 pos){\n\tvec2 a0 = mod1024(pos*PI);\n\tvec2 a1 = bbsopt(a0);\n\tvec2 a2 = a1.yx + bbsopt(a1);\n\tvec2 a3 = a2.yx + bbsopt(a2);\n\treturn fract((a2.xyxy + a3.xxyy + a1.xyyx)*(1./bbsm));\n}\n\nfloat hash21(vec2 p){\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool isInside(vec2 ptnt){\n\treturn ptnt.x >= 0. && ptnt.x <= ASPECT * GRID\n\t\t&& ptnt.y >= 0. && ptnt.y <= GRID;\n}\n\nvec4 genParticle(float id){\n\tvec2 pos = hash(vec2(iFrame, id)).xy * vec2(ASPECT, 1.) * GRID;\n    vec4 hp = hexCoord(pos);\n    float a = floor((hp.x + HALF_SEG)/SEGMENT);\n    vec2 posOnEdge = pos + vec2(-1., 0.) * rotate(PI * a/3.) * hp.y;\n    \n    //Here we additionally calculate middle point of edge.\n    //Can be solved analitically\n    vec4 chp = hexCoord(hp.zw);\n    vec2 ec = hp.zw + vec2(-1., 0.) * rotate(PI * a/3.) * chp.y;\n    float h = sign(hash21(vec2(iTime, id * 2.71)) - .5);\n    vec2 mDir = normalize(ec - hp.zw) * rotate(PI/2. * h);\n    \n    return vec4(posOnEdge, mDir);\n}\n\nvec4 moveParticle(inout vec4 pos, float id){\n\tvec4 hp = hexCoord(pos.xy);\n    float a = mod((hp.x - HALF_SEG), SEGMENT);\n    float cDst = distance(a, SEGMENT * .5);\n    if(cDst > SEGMENT * .495){\n    \tfloat h = sign(hash21(vec2(iTime, id * .71)) - .5);\n    \tpos.zw *= rotate(SEGMENT * h);\n        pos.xy += pos.zw * .03;\n    }else{\n    \tpos.xy += pos.zw * (.01 + .02 * hash21(id * vec2(13., .23)));\n    }\n    \n    if(!isInside(pos.xy))\n        pos = genParticle(id);\n    return pos;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    int pid = PID;\n    if(pid >= PARTICLES_COUNT)\n        return;\n    vec4 pos;\n    if(iFrame != 0)\n        pos = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    else\n        pos = genParticle(float(pid));\n\tpos = moveParticle(pos, float(pid));\n    fragColor = pos;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.y * GRID;\n    vec4 prevColor = texelFetch(iChannel1, ivec2(fragCoord), 0) * .95;\n    \n    for(int pid = 0; pid < PARTICLES_COUNT; pid++){\n        vec2 p = DEPID(float(pid));\n        vec4 pos = texelFetch(iChannel0, ivec2(p), 0);\n        prevColor = mix(prevColor, hash(vec2(.5, pid)), smoothstep(.025, .015, distance(uv, pos.xy)));\n    }\n    \n    fragColor = prevColor;\n}","name":"Buffer B","description":"","type":"buffer"}]}