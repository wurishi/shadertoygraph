{"ver":"0.1","info":{"id":"flfyDN","date":"1647992181","viewed":264,"name":"Hashed blur from mouse","username":"FlightOfGrey","description":"Fork of https://www.shadertoy.com/view/XdjSRw\n\nA glslify implementation that I found after playing around with this one: https://github.com/glslify/glsl-hash-blur\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","blur","post","effects","hashedblur"],"hasliked":0,"parentid":"XdjSRw","parentname":"Hashed blur"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Hashed blur with added mouse interaction, forked from https://www.shadertoy.com/view/XdjSRw\n// Blur shader by David Hoskins.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Can go down to 10 or so, and still be usable, probably...\n#define ITERATIONS 30\n\n// Set this to 0.0 to stop the pixel movement.\n#define TIME mod(iTime, 20.0)\n\n#define TAU  6.28318530718\n\n//-------------------------------------------------------------------------------------------\n// Use last part of hash function to generate new random radius and angle...\nvec2 Sample(inout vec2 r)\n{\n    r = fract(r * vec2(33.3983, 43.4427));\n    return r-.5;\n    //return sqrt(r.x+.001) * vec2(sin(r.y * TAU), cos(r.y * TAU))*.5; // <<=== circular sampling.\n}\n\n//-------------------------------------------------------------------------------------------\n#define HASHSCALE 443.8975\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n//-------------------------------------------------------------------------------------------\nvec3 Blur(vec2 uv, float radius)\n{\n\tradius = radius * .04;\n    \n    vec2 circle = vec2(radius) * vec2((iResolution.y / iResolution.x), 1.0);\n    \n\t// Remove the time reference to prevent random jittering if you don't like it.\n    vec2 random = Hash22(uv+TIME);\n\t//vec2 random = Hash22(uv);\n\n    // Do the blur here...\n\tvec3 acc = vec3(0.0);\n\tfor (int i = 0; i < ITERATIONS; i++)\n    {\n\t\tacc += texture(iChannel0, uv + circle * Sample(random), radius*10.0).xyz;\n    }\n\treturn acc / float(ITERATIONS);\n}\n\n//-------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // Mapping to between 0 - -1\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    float mouseDist = distance(uv, mousePos);\n    \n    float radius = mouseDist * 2.5;\n    radius = pow(radius, 2.0);\n     \n    fragColor = vec4(Blur(uv * vec2(1.0, -1.0), radius), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}