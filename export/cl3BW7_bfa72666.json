{"ver":"0.1","info":{"id":"cl3BW7","date":"1701276937","viewed":38,"name":"wave in space ","username":"nayk","description":"light,space, stars,copypast, light","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["light","light","space","stars","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nfloat noise(float t)\n{\nreturn texture(iChannel0,vec2(t, 0.0) / iChannelResolution[0].xy).x;\n}\nfloat noise(vec2 t)\n{\nreturn texture(iChannel0,(t + vec2(iTime)) / iChannelResolution[0].xy).x;\n}\nvec3 lensflare(vec2 uv,vec2 pos)\n{\nvec2 main = uv-pos;\nvec2 uvd = uv*(length(uv));\n\nfloat ang = atan(main.y, main.x);\nfloat dist=length(main); dist = pow(dist,.1);\nfloat n = noise(vec2((ang-iTime/9.0)*16.0,dist*32.0));\n\nfloat f0 = 1.0/(length(uv-pos)*100.0+1.0);\n\nf0 = f0+f0*(sin((ang+iTime/18.0 + noise(abs(ang)+n/2.0)*2.0)*12.0)*.1+dist*.1+.8);\n\nfloat f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;\nfloat f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;\nfloat f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;\n\nvec2 uvx = mix(uv,uvd,-0.5);\n\nfloat f4 = max(0.01-pow(length(uvx+0.4*pos),2.4),.0)*6.0;\nfloat f42 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*5.0;\nfloat f43 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*3.0;\n\nuvx = mix(uv,uvd,-.4);\n\nfloat f5 = max(0.01-pow(length(uvx+0.2*pos),5.5),.0)*2.0;\nfloat f52 = max(0.01-pow(length(uvx+0.4*pos),5.5),.0)*2.0;\nfloat f53 = max(0.01-pow(length(uvx+0.6*pos),5.5),.0)*2.0;\n\nuvx = mix(uv,uvd,-0.5);\n\nfloat f6 = max(0.01-pow(length(uvx-0.3*pos),1.6),.0)*6.0;\nfloat f62 = max(0.01-pow(length(uvx-0.325*pos),1.6),.0)*3.0;\nfloat f63 = max(0.01-pow(length(uvx-0.35*pos),1.6),.0)*5.0;\n\nvec3 c = vec3(.0);\n\nc.r+=f2+f4+f5+f6; c.g+=f22+f42+f52+f62; c.b+=f23+f43+f53+f63;\nc+=vec3(f0);\n\nreturn c;\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvec3 cc(vec3 color, float factor,float factor2) // color modifier\n{\nfloat w = color.x+color.y+color.z;\nreturn mix(color,vec3(w)*factor,w*factor2);\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n   \n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\n\na*=a*a; // add contrast\nif (r>6) fade*=1.2;\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.02,1.);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nmat2 rotationMatrix(float angle)\n{\nangle *= 3.14 / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, s, -s, c );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\n float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 0.07)) * 1.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n    vec4 O=fragColor;\n     vec2 C=fragCoord;\n     O=vec4(0);\n \nvec3 dir=vec3(uv*zoom,iTime*0.001);\n    dir.xy*=ma;\nfloat time=iTime*speed+.25;\n  float tot;\nuv.x *= iResolution.x/iResolution.y; //fix aspect ratio\nvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\nmouse.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\nmouse.x=sin(iTime)*.5;\nmouse.y=sin(iTime*.913)*.5;\n       O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n       \n        p.z+=iTime*1.5;\n        a=15.;\n        p=mod(p-a,a*2.)-a;\n        s=9.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n           \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.yz*=ma;\n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.-cos(iTime*.3-.05*(iTime*.3))*3.,\n                    120,\n                    1.+cos(iTime*.5)*5.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n         g+=e=length(p.yx)/s;\n    }\n\nvec3 color = vec3(1.4,1.2,1.0)*lensflare(uv,mouse.xy);\ncolor = cc(color,.5,.1);\n uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n   \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n   \n\n\n\nvec3 from=vec3(1.,.5,0.5)*O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=vec4(color+O.xyz,1.);\n    fragColor+= vec4(cheap_star(uv,anim) * vec3(0.55,0.5,0.55)*0.1, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}