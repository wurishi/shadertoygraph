{"ver":"0.1","info":{"id":"NsccR8","date":"1652998054","viewed":158,"name":"30 Minutes 5/19","username":"scry","description":"Getting a bit better every day","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["3d","refraction","psychedelic","rainbow","trippy","reflaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"////////////////////////////////////////////\n#define time iTime*0.3\n#define pi 3.14159265\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    return max(abs(p.z)-s.z,max(abs(p.x)-s.x,abs(p.y)-s.y));\n}\n\nvec4 map(vec3 p) {\n    p.z -= 3.5;\n    p.xz *= r2d(time/3.);\n    p.yz *= r2d(sin(time/2.)*1.2);\n    vec3 op = p;\n    float pd = 2.+sin(p.y+time*0.5)*0.4;\n    vec3 pc = p;\n    p.y += (sin(p.x*2.+time)+sin(p.z*2.+time))*0.2;\n    p.y = (fract(p.y*pd-0.5)-0.5)/pd;\n    float d = sdBox(p,vec3(1.,0.1,0.75));\n    p = pc;\n    float s = 0.03;\n    pd *= 2.;\n    p = abs(p)-1.;\n    p.xy *= r2d(-time);\n    p.xz *= r2d(time);\n    for (int i=0;i<3;i++) {\n        p.xz = abs(p.xz)-s*1.1;\n    }\n    p.y += time*1.5;\n    \n    p.y = (fract(p.y*pd-0.5)-0.5)/pd;\n    d = min(d,sdBox(p,vec3(s,0.02,s)));\n    p = abs(p)-0.5;\n    d = min(d,sdBox(p,vec3(s,0.02,s)));\n    d = min(d,-sdBox(op,vec3(5.)));\n    return vec4(op,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd, float side) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<82;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w*side;\n        dO += dS;\n        ii += 0.01;\n        if (dO > 100. || dS < 0.001) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    return normalize(vec3(\n        map(p-h.xyy).w-map(p+h.xyy).w,\n        map(p-h.yxy).w-map(p+h.yxy).w,\n        map(p-h.yyx).w-map(p+h.yyx).w\n    ));\n}\n\nvec3 colo(vec3 p, vec3 n, vec2 d) {\n    vec3 col = d.xxx/20.;\n    vec3 mp = map(p).xyz;\n    n.xy *= r2d(mp.y*20.);\n    col += n*0.1;\n    //\n    //col = clamp(col,0.,1.);\n    if (d.x > 90.) {\n        col *= 0.;\n        col += d.y;\n    }\n    col = clamp(col,0.,1.);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 tv = uv;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd,1.);\n    vec3 p = ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    vec3 cols = colo(p,n,d);\n    vec3 oro = ro;\n    vec3 ord = rd;\n    vec2 od = d;\n    float ior = 1.3;\n    float rl = 0.7;\n    col = cols;\n    for (int i=0;i<3;i++) {\n        ro = p-n*0.003;\n        rd = reflect(p,n);\n        d = RM(ro,rd,1.);\n        col += colo(p,n,d)*rl;\n    }\n    ro = oro;\n    rd = ord;\n    d = od;\n    rl = 0.995;\n    for (int i=0;i<9;i++) {\n        ro = p+n*0.003;\n        rd = refract(rd,-n,1./ior);\n        d = RM(ro,rd,-1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d)*rl;\n        rl *= rl;\n        ro = p-n*0.003;\n        rd = refract(rd,n,ior);\n        if (dot(rd,rd)==0.) {rd = 1.-reflect(rd,n);}\n        d = RM(ro,rd,1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d)*rl;\n        rl *= rl;\n    }\n    //col *= ;\n    //col = cols;\n    //col *= cols;\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}