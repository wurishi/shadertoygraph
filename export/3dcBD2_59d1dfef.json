{"ver":"0.1","info":{"id":"3dcBD2","date":"1605977653","viewed":408,"name":"Reaction-Diffusion algorithm","username":"mdb","description":"this shader is a simulation between two chemicals\nyou can add element with the mouse\n\nhave fun ;)","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["simulation","chaos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 v = vec3(1.,0.2,0.4);\n    float B = pow(texture(iChannel0,uv).y,2.);\n    vec4 col = vec4(B * v * 8.0,1.0);\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    fragColor = vec4(col,1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    fragColor = vec4(col,1.);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    if(iFrame==0){\n        col = vec3(1.0,0.0,0.0);\n        //random element at the start\n        for(int i = 0; i<100; i++){\n            float x = fract(sin(float(i)*34.98)*456.23);\n            float y = fract(sin(float(i)*98.24)*9223.57);\n            if(distance(uv,vec2(x,y))<0.03)col.y = 1.;\n\n        }\n    }else{\n        vec2 r = 1.0/iResolution.xy;\n        vec2 laplacian = -texture(iChannel0,uv).xy\n            \t\t     +0.2*texture(iChannel0,uv + vec2(1.0,0.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(-1.0,0.0)*r).xy\n                         +0.2*texture(iChannel0,uv + vec2(0.0,1.0)*r).xy\n            \t\t\t +0.2*texture(iChannel0,uv + vec2(0.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(1.0,1.0)*r).xy\n            \t         +0.05*texture(iChannel0,uv + vec2(1.0,-1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,1.0)*r).xy\n            \t\t\t +0.05*texture(iChannel0,uv + vec2(-1.0,-1.0)*r).xy;\n\n        vec2 last = texture(iChannel0,uv).xy;\n        float A = last.x;float B = last.y;\n        //make the elements react\n        A = A + (Da*laplacian.x - A*B*B + f*(1.0 - A))*t;\n        B = B + (Db*laplacian.y + A*B*B - (k + f)*B)*t;\n        \n        col = vec3(A, B, 0.0);\n    }\n    if(distance(uv,iMouse.xy/iResolution.xy)<0.02 && iMouse.z>0.)col.y = 1.;\n    fragColor = vec4(col,1.);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//reaction diffusion algorithm \n//https://www.karlsims.com/rd.html\n\n//settings\nfloat Da = 1.0;\nfloat Db = 0.5;\nfloat f = 0.055;\nfloat k = 0.062;\nfloat t = 0.8;","name":"Common","description":"","type":"common"}]}