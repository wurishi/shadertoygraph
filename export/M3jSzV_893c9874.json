{"ver":"0.1","info":{"id":"M3jSzV","date":"1710842257","viewed":63,"name":"Haar_2D_Transform","username":"pmozil","description":"This a Haar 2D wavelet for the qualification task for my GSoC ffmpeg submission.\nUnfortunately, it's not compute, so I had to do multiple buffers(\n\nP. S.: Thanks for clearing up 2d Haar, @Lynne, and for the help with shadertoy, @rizerphe!","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["wavelettransform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float boundary_x = iResolution.x / 4.0;\n    float boundary_y = iResolution.y / 4.0;\n\n    vec2 normalizedFragCoord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n    vec2 roundedFragCoord = vec2(mod(normalizedFragCoord.x, boundary_x / 2.0), mod(normalizedFragCoord.y, boundary_y / 2.0));\n\n    if (normalizedFragCoord.x >= boundary_x || normalizedFragCoord.y >= boundary_y) {\n        fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n        return;\n    }\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 a = vec2(floor(roundedFragCoord.x * 2.0), floor(roundedFragCoord.y * 2.0))/iResolution.xy;\n    vec2 b = vec2(floor(roundedFragCoord.x * 2.0) + 1.0, floor(roundedFragCoord.y * 2.0))/iResolution.xy;\n    vec2 c = vec2(floor(roundedFragCoord.x * 2.0), floor(roundedFragCoord.y * 2.0) + 1.0)/iResolution.xy;\n    vec2 d = vec2(floor(roundedFragCoord.x * 2.0) + 1.0, floor(roundedFragCoord.y * 2.0) + 1.0)/iResolution.xy;\n    \n    vec4 ca = texture(iChannel0, vec2(a.x, 1.0-a.y));\n    vec4 cb = texture(iChannel0, vec2(b.x, 1.0-b.y));\n    vec4 cc = texture(iChannel0, vec2(c.x, 1.0-c.y));\n    vec4 cd = texture(iChannel0, vec2(d.x, 1.0-d.y));\n\n    if (normalizedFragCoord.x < boundary_x / 2.0 && normalizedFragCoord.y < boundary_y / 2.0) {\n        fragColor = ca + cb + cc;\n    } else if (normalizedFragCoord.x < boundary_x / 2.0) {\n        fragColor = ca + cb - cc - cd;\n    } else if (normalizedFragCoord.y < boundary_y / 2.0) {\n        fragColor = ca - cb + cc - cd;\n    } else {\n        fragColor = ca - cb - cc + cd;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float boundary_x = iResolution.x / 2.0;\n    float boundary_y = iResolution.y / 2.0;\n\n    vec2 normalizedFragCoord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n    vec2 roundedFragCoord = vec2(mod(normalizedFragCoord.x, boundary_x / 2.0), mod(normalizedFragCoord.y, boundary_y / 2.0));\n\n    if (normalizedFragCoord.x >= boundary_x || normalizedFragCoord.y >= boundary_y) {\n        fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n        return;\n    }\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 a = vec2(floor(roundedFragCoord.x * 2.0), floor(roundedFragCoord.y * 2.0))/iResolution.xy;\n    vec2 b = vec2(floor(roundedFragCoord.x * 2.0) + 1.0, floor(roundedFragCoord.y * 2.0))/iResolution.xy;\n    vec2 c = vec2(floor(roundedFragCoord.x * 2.0), floor(roundedFragCoord.y * 2.0) + 1.0)/iResolution.xy;\n    vec2 d = vec2(floor(roundedFragCoord.x * 2.0) + 1.0, floor(roundedFragCoord.y * 2.0) + 1.0)/iResolution.xy;\n    \n    vec4 ca = texture(iChannel0, vec2(a.x, 1.0-a.y));\n    vec4 cb = texture(iChannel0, vec2(b.x, 1.0-b.y));\n    vec4 cc = texture(iChannel0, vec2(c.x, 1.0-c.y));\n    vec4 cd = texture(iChannel0, vec2(d.x, 1.0-d.y));\n\n    if (normalizedFragCoord.x < boundary_x / 2.0 && normalizedFragCoord.y < boundary_y / 2.0) {\n        fragColor = ca + cb + cc;\n    } else if (normalizedFragCoord.x < boundary_x / 2.0) {\n        fragColor = ca + cb - cc - cd;\n    } else if (normalizedFragCoord.y < boundary_y / 2.0) {\n        fragColor = ca - cb + cc - cd;\n    } else {\n        fragColor = ca - cb - cc + cd;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 normalizedFragCoord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n    vec2 roundedFragCoord = vec2(mod(fragCoord.x, iResolution.x / 2.0), mod(fragCoord.y, iResolution.y / 2.0));\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 a = vec2(floor(roundedFragCoord.x * 2.0), floor(roundedFragCoord.y * 2.0))/iResolution.xy;\n    vec2 b = vec2(floor(roundedFragCoord.x * 2.0) + 1.0, floor(roundedFragCoord.y * 2.0))/iResolution.xy;\n    vec2 c = vec2(floor(roundedFragCoord.x * 2.0), floor(roundedFragCoord.y * 2.0) + 1.0)/iResolution.xy;\n    vec2 d = vec2(floor(roundedFragCoord.x * 2.0) + 1.0, floor(roundedFragCoord.y * 2.0) + 1.0)/iResolution.xy;\n    \n    vec4 ca = texture(iChannel0, a);\n    vec4 cb = texture(iChannel0, b);\n    vec4 cc = texture(iChannel0, c);\n    vec4 cd = texture(iChannel0, d);\n\n\n    if (normalizedFragCoord.x < iResolution.x / 2.0 && normalizedFragCoord.y < iResolution.y / 2.0) {\n        fragColor = ca + cb + cc;\n    } else if (normalizedFragCoord.x < iResolution.x / 2.0) {\n        fragColor = ca + cb - cc - cd;\n    } else if (normalizedFragCoord.y < iResolution.y / 2.0) {\n        fragColor = ca - cb + cc - cd;\n    } else {\n        fragColor = ca - cb - cc + cd;\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}