{"ver":"0.1","info":{"id":"ts2GRV","date":"1549412148","viewed":157,"name":"Totoro 4 Ainura<3","username":"omgs","description":"Thanks ghibli studio.","likes":8,"published":1,"flags":96,"usePreview":0,"tags":["3d","music","ghibli","totoro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tlGDH","filepath":"https://soundcloud.com/na_triples/my-neighbor-totoro-theme-song","previewfilepath":"https://soundcloud.com/na_triples/my-neighbor-totoro-theme-song","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TOTORO FOR AINURA\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( a, b, h ) + k*h*(1.0-h);\n}\nfloat sdEllipsoid( in vec3 p, in vec3 r ) {\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\nvec3 rotx(vec3 p, float rx) {\n    float sinx = sin(rx);\n    float cosx = cos(rx);\n    return mat3(1., 0., 0., 0., cosx, sinx, 0., -sinx, cosx) * p;\n}\n\nvec3 roty(vec3 p, float ry) {\n    float sinx = sin(ry);\n    float cosx = cos(ry);\n    return mat3(cosx, 0., -sinx, 0., 1., 0., sinx, 0., cosx) * p;\n}\n\nvec3 rotz(vec3 p, float rz) {\n    float sinx = sin(rz);\n    float cosx = cos(rz);\n    return mat3(cosx, sinx, 0., -sinx, cosx, 0., 0., 0., 1.) * p;\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 2.5 + 10.0;\n\tcamPos = vec3(4.0*sin(an+iTime*0.5),1.0,4.0*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\nvec3 doBackground( vec3 rd )\n{\n    vec4 tex = texture(iChannel2,rd);\n    return tex.xyz*0.2;\n}\n\nvec2 doModel( vec3 p )\n{\n    const int arrsize=1;\n    float scene[arrsize];\n    float id=-1.;\n    vec3 porg=p;\n    \n     float musix = 0.2+pow(texture(iChannel1,vec2(0.,.0)).x,5.);\n    p.y+=0.3;\n    float res= 0.0;\n    float head = length(p+vec3(0,-0.15,-0.5 +musix*2.)) - 1.;\n    \n    float body = length(p+vec3(0,1.4,0)) - 1.8;\n    p.x = abs(p.x);\n   \n    float ears =  sdEllipsoid( p+vec3(-0.6,-1.35,-0.2) , vec3(.2*.8,.2+cos(p.y*0.15 + cos(p.y*10.-p.y*0.5))*0.2,.1)*musix*4.5 );\n        //length(p+vec3(-0.65,-1.25+cos(p.x*1.4+1.)*.5,-0.2))*musix*4. -  0.23+cos(p.x*40.+p.y*65.+p.z*20.)*0.01 +p.y;\n   \n    if(p.y <1.28 )\n        ears = length(p+vec3(-0.7,-1.25+cos(p.x*1.4+1.)*.5,-0.2)) - .185;\n    \n    float arms = sdEllipsoid( rotz( p+vec3(-1.8,1.2,-0.2),-2.4*musix*5. ), vec3(1.2,0.4,.4) );\n    p=porg;\n    \n    res= smin(head,body,0.2);\n    res= smin(res,ears,0.45);\n    res= smin(res,arms,0.3);\n    scene[0] = res;\n    \n    float test=9999.0;  \n   \n    for(int i=0;i<arrsize;i++){\n        float test2=scene[i];\n        if(test2<test)\n        {\n            test=test2; \n         \tid = float(i);\n        }\n    }\n    \n    return vec2(test,id);\n}\n\n\nvec3 doMaterial( in vec3 pos, in vec3 nor, in vec3 rd )\n{\n\tfloat musix = 0.2+pow(texture(iChannel1,vec2(0.,.0)).x,11.5);\n      vec4 tex = texture(iChannel2,refract(nor,-rd, 0.2));\n    \t\ttex += texture(iChannel2,reflect(nor,rd))*.6;\n    vec2 obj = doModel(pos);\n    vec3 col = vec3(0.1,0.1,0.1)*0.5;\n    vec3 totface= texture(iChannel0, pos.xy*0.5+0.5).xyz;\n    if(obj.y == 0.0) {col *= totface*2.; col*= tex.xyz;}\n   \n    return col*vec3(0.5+max( cos(musix+iTime*3.*musix), 0.4 ) );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(0.0+sin(iTime*0.5)*20.0,20.0 +sin(iTime*0.5)*20.0,-1.0));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50)*2.;\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;          \n\tconst float precis = 0.001;       \n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )         \n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;           \n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 \n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )        \n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   \n\t\tt += clamp( h, 0.02, 2.0 );  \n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 ); \n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(rd);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\t\n        // materials\n        vec3 mal = doMaterial( pos, nor,rd );\n\t\t\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nfloat circle(vec2 pos, float radius, float width)\n{\n    return abs(length(pos)-radius)-width;   \n}\n\n\nfloat circleFill(vec2 pos, float radius)\n{\n    return length(pos)-radius;   \n}\n\nfloat smoothMerge(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0-h);\n}\n\nfloat line(vec2 p, vec2 start, vec2 end, float width)\n{\n\tvec2 dir = start - end;\n\tfloat lngth = length(dir);\n\tdir /= lngth;\n\tvec2 proj = max(0.0, min(lngth, dot((start - p), dir)))*dir;\n\treturn length( (start - p) - proj ) - (width / 2.0);\n}\n\nfloat fillMask(float dist)\n{\n\treturn clamp(-(dist+0.01)*100.0, 0.0, 1.0);\n}\n\nfloat innerBorderMask(float dist, float width)\n{\n\tfloat alpha1 = clamp(dist + width, 0.0, 1.0);\n\tfloat alpha2 = clamp(dist, 0.0, 1.0);\n\treturn alpha1 - alpha2;\n}\n//-----------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy /iResolution.xy;\n    vec2 p = -1. + 2.*uv;\n    p.x *= iResolution.x / iResolution.y;\n    \n    // animation\n    float time = mod(iTime, 11.5);\n    float heyes = smoothstep(0.1, 0.9, time);\n    heyes = mix(heyes, -1.12, smoothstep(1.2, 2.6, time));\n    heyes *= 1. - smoothstep(3.16, 3.7, time);\n    float veyes = -0.2*smoothstep(0.2, 0.9, time);\n    veyes = mix(veyes, -0.1, smoothstep(1.2, 1.9, time));\n    veyes = mix(veyes, -0.2, smoothstep(1.9, 2.6, time));\n    veyes = mix(veyes, 1., smoothstep(2.7, 3.7, time));\n    veyes *= 1. - smoothstep(4.3, 5.3, time);\n    float smile = smoothstep(5.1, 6.7, time);\n    smile *= 1. - smoothstep(9., 11., time);\n    \n    // bg\n    uv -= vec2(0.5, 0.55);\n    uv *= 1.6;\n    float f = length(uv);\n    vec3 col = mix(vec3(0.5), vec3(.5), f);\n    \n    p *= 200.;\n    vec2 p2 = p;\n    p2.x = abs(p2.x);\n    \n    // eyes\n    float d = circleFill((p2 + vec2(-125, -58))+50.*dot(uv, uv),  35.+max(cos(iTime*0.3)*20.,0.5));\n    \n    //belly\n    float dbelly = circleFill((p2 + vec2(-45, +395))+50.*dot(uv, uv*0.1), 310.);\n    d = min(d, dbelly);\n    // mouth\n    float d2 = circleFill(p+vec2(0., -230.+smile*65.), 250.);  \n    d2 = max(d2, circleFill(p2+vec2(28.*smile, 868.-smile*28.), 850.));   \n\td = min(d, d2);\n    col = mix(col, vec3(1, 1, 0.97), fillMask(d));\n\tcol = mix(col, vec3(0.1), innerBorderMask(d, 2.));\n    \n    // pupils\n    d = circleFill(vec2(abs(p.x + 13.*heyes)-121.,p.y -50.-18.*veyes), 20.);\n    \n    // teeth\n    float td = 8.;\n    float d3 = circle(vec2(abs(p.x + td)+368.,p.y+34.), 400., 0.5);\n    d3 = min(d3, circle(vec2(abs(p.x + td)+152.,p.y+36.), 240., 0.5));\n    d3 = min(d3, circle(vec2(abs(p.x + td)-56.,p.y+30.), 80., 0.5));\n    d2 = max(d2, d3);\n    d = min(d, d2);\n    \n    // whiskers\n    d = min(d, line(p2, vec2(135.+smile*40.,  -5.+smile*10.), vec2(230.+smile*40., smile*40.), 2.));\n    d = min(d, line(p2, vec2(140.+smile*50.,-20.+smile*10.), vec2(245.+smile*50.,-35.+smile*40.), 2.));\n    d = min(d, line(p2, vec2(140.+smile*60.,-35.+smile*10.), vec2(250.+smile*50.,-70.+smile*30.), 2.));\n    \n    // Vvv\n     d = min(d, line(p2, vec2(105.,  -155.), vec2(130., -130.), 10.));\n     d = min(d, line(p2, vec2(135.,  -155.), vec2(130., -130.), 10.));\n     d = min(d, line(p2, vec2(105.-70.,  -135.), vec2(130.-80., -100.), 10.));\n     d = min(d, line(p2, vec2(135.-70.,  -140.), vec2(130.-80., -100.), 10.));\t\n    \n    float dy= 38.;\n     d = min(d, line(p2, vec2(105.,  -155.-dy), vec2(130., -130.-dy), 10.));\n     d = min(d, line(p2, vec2(135.,  -155.-dy), vec2(130., -130.-dy), 10.));\n     d = min(d, line(p2, vec2(105.-70.,  -145.-dy), vec2(130.-80., -105.-dy), 10.));\n     d = min(d, line(p2, vec2(135.-70.,  -150.-dy), vec2(130.-80., -105.-dy), 10.));\t\n    \n    // nose\n    d2 = circleFill(p*vec2(1.0, 4.0+0.004*p2.x) + vec2(0, -120. -smile*4.*10.), 40.);\n    d3 = circleFill(p + vec2(0, -24.-smile*10.), 12.);   \n    d2 = smoothMerge(d2, d3, 20.);\n    d = min(d, d2);\n    col = mix(col, vec3(0.1), fillMask(d));\n    col = mix(col, vec3(0.1), innerBorderMask(d, 2.));\n    \n    // eye reflections\n    d = circleFill(vec2(abs(p.x + 6. + 11.*heyes)-121.,p.y -56.- 16.*veyes), 4.5);\n    d = min(d, circleFill(vec2(abs(p.x + 5.5 + 11.*heyes)-121.,p.y -49.- 16.*veyes),3.));   \n\tcol = mix(col, vec3(1), fillMask(d));\n\tcol = mix(col, vec3(0.1), innerBorderMask(d, 2.));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}