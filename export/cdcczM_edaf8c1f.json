{"ver":"0.1","info":{"id":"cdcczM","date":"1694824001","viewed":65,"name":"three directions city hash braid","username":"jt","description":"Variant of a city grid formed by combination of rectangular grids randomly rotated in three directions\nusing a \"hash\" pattern instead of the \"crossed T\" pattern inside each triangle. \"Braided\" version, loose ends\nClick to show underlying triangular grid.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","rectangles","grid","grid","triangle","triangles","patterns","random","rectangle","barycentric","city","pattern","hex","grids"],"hasliked":0,"parentid":"msdcRr","parentname":"three directions city grid hash"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cdcczM three directions city hash braid\n// based on https://www.shadertoy.com/view/msdcRr three directions city grid hash, written 2023 by jt\n// variant of https://www.shadertoy.com/view/DljBDm three directions city grid patch\n// https://www.shadertoy.com/view/dtBBRw three dir grid patches essence\n// 2d essence of https://www.shadertoy.com/view/DtsBWl three directional grid patches\n\n// Variant of a city grid formed by combination of rectangular grids randomly rotated in three directions\n// (using a \"hash\" pattern instead of the \"crossed T\" pattern inside each triangle).\n// This version has a \"braided\" look (but with some loose ends).\n// Click to show underlying triangular grid.\n\n// tags: procedural, 2d, rectangles, grid, grid, triangle, triangles, patterns, random, rectangle, barycentric, city, pattern, hex, grids\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U; \n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;  \n    return uint(((x>>8U)^x.yzx)*k);\n}\n\nvec3 barycentric(vec2 p)\n{\n    float s = sqrt(3.0);\n    return vec3((vec2(-1,+1) * p.x - p.y/s + 1.0)/2.0, p.y / s);\n}\n\n#define scale (3.0*sqrt(3.0))\n//#define h (3./R.y*scale) /* smooth but blurry */\n#define h (1./R.y*scale) /* less blurry */\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    float s = 0.05;\n    float r = s * 1.25;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    vec3 t = barycentric(I*scale);\n\n    ivec3 m = ivec3(floor(t));\n    bool flip = m.x + m.y + m.z == 0;\n    //bool tri = any(lessThan(t, vec3(0))); // fundamental triangle\n    t = fract(t);\n    //t -= vec3(m);\n    if(!flip) t = 1.0 - t;\n\n    uint choice = uhash(m + int(iTime)) % 3u;\n    t = choice == 2u ? t.zxy : choice == 1u ? t.yzx : t.xyz;\n\n    float a = max(smoothstep(0.2-h,0.2+h,t.x-t.y),smoothstep(s-h,s+h,abs((2.0*t.z-1.)-1.0/3.0)));\n    float b = max(1.0-smoothstep(-0.2-h,-0.2+h,t.x-t.y),smoothstep(s-h,s+h,abs(-(2.0*t.z-1.)-1.0/3.0)));\n    float c = max(smoothstep(-0.45-h,-0.45+h,t.x-t.y),smoothstep(s-h,s+h,abs(-(2.0*t.z-1.)-1.0/3.0)));\n    float d = max(smoothstep(0.585-h,0.585+h,t.z),smoothstep(s-h,s+h,abs((t.y-t.x)-1.0/3.0)));\n    float e = max(smoothstep(0.255-h,0.255+h,t.z),smoothstep(s-h,s+h,abs(-(t.y-t.x)-1.0/3.0)));\n    float f = max(1.-smoothstep(0.41-h,0.41+h,t.z),smoothstep(s-h,s+h,abs(-(t.y-t.x)-1.0/3.0)));\n    //float c = smoothstep(s-h,s+h,abs(abs(t.y-t.x)-1.0/3.0));\n    //float a = smoothstep(r-h,r+h,abs(abs(2.0*t.z-1.)-1.0/3.0));\n    //float b = 1.0;//smoothstep(s-h,s+h,abs(abs(t.y-t.x)-1.0/3.0));\n\n    o = vec4(1.0 - min(min(min(a, b), min(c, d)), min(e, f)));\n    if(iMouse.z > 0.0)\n    {\n        o = max(o, vec4(0.2*(choice == 2u ? vec3(0,0,1) : choice == 1u ? vec3(0,1,0) : vec3(1,0,0)), 1.0));\n        o += 0.5 - 0.5 * min(smoothstep(0.0,0.0+h,t.x), min(smoothstep(0.0,0.0+h,t.y), smoothstep(0.0,0.0+h,t.z)));\n    }\n    //if(tri) o.xyz = vec3(0,0,1); // fundamental triangle\n    //if(flip) o.xyz = vec3(1,0,0);\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}