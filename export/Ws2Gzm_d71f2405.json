{"ver":"0.1","info":{"id":"Ws2Gzm","date":"1548470566","viewed":223,"name":"Random Flame fractal","username":"rory618","description":"https://en.wikipedia.org/wiki/Fractal_flame\n\nPretty slow unfortunately, because replacing all the constants with calls to texture really hits performance hard\nSpace for new random flame, R to reset render, mouse y to scale brightness","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["fractal","flame","stochastic","routing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n\tvec2 uv = i/R.xy;\n    \n    o = texture(iChannel0,uv)*(iMouse.x>0.?iMouse.y:100.5)/100.;//length(1.+textureLod(iChannel0,vec2(.5),7.).xyz);\n    o = pow(o,vec4(2.2));\n    //o = param(2);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\n#define branches 4\n#define mIters 15.\n#define param(x) params[x]\n//#define param(x) texelFetch(ch,ivec2(x,0),0)\n\n#define pi 3.14159\n\n\nvec4[16] params;\n\nvoid initParams(sampler2D ch){\n    for(int i=0;i<16;i++){\n        params[i]=texelFetch(ch,ivec2(i,0),0);\n        \n    }\n}\n\nfloat scale = 200.;\nvec2 center =vec2( 0);\nfloat Sqrt1pm1(float x)\n\t{\n\t\tif (-0.0625 < x && x < 0.0625)\n\t\t{\n\t\t\tfloat num = 0.;\n\t\t\tfloat den = 0.;\n\t\t\tnum += 1.0 / 32.;\n\t\t\tden += 1.0 / 256.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 5.0 / 16.;\n\t\t\tden += 5.0 / 32.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 3.0 / 4.;\n\t\t\tden += 15.0 / 16.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 1.0 / 2.;\n\t\t\tden += 7.0 / 4.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tden += 1.;\n\t\t\treturn num / den;\n\t\t}\n\n\t\treturn sqrt(1. + x) - 1.;\n\t}\n\nvec3 Cylinder(vec3 x){\n    return vec3(sin(x.x),x.y,cos(x.x));\n}\nvec2 Elliptic(vec2 x){\n    vec2 o;\n    float x2 = 2.*x.x;\n    float l = dot(x,x);\n    float u = l + x2;\n    float v = l - x2;\n    float xmaxm1 = 0.5 * (Sqrt1pm1(u) + Sqrt1pm1(v));\n    float a = x.x / (1. + xmaxm1);\n    float ssx = xmaxm1 < 0. ? 0. : sqrt(xmaxm1);\n    o.x = clamp(a, -1., 1.);\n\tif (x.y > 0.)\n\t\to.y = log(1.+xmaxm1 + ssx);\n\telse\n\t\to.y = -log(1.+xmaxm1 + ssx);\n\n\treturn o;\n    \n}\n\nvec2 Bipolar(vec2 x, float m_S) {\n\t\tfloat x2y2 = dot(x,x);\n\t\tfloat t = x2y2 + 1.;\n\t\tfloat x2 = 2. * x.x;\n\t\tfloat y = 0.5 * atan(2. * x.y, x2y2 - 1.) + m_S;\n\n\t\tif (y > pi*2.)\n\t\t\ty = -pi*2. + mod(y + pi*2., pi*2.);\n\t\telse if (y < -pi*2.)\n\t\t\ty = pi*2. - mod(pi*2. - y, pi*2.);\n\n\t\tfloat f = t + x2;\n\t\tfloat g = t - x2;\n\n\t\tif ((g == 0.) || (f / g <= 0.))\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn vec2(pi/2. * log((t + x2) / (t - x2)), pi*2. * y);\n\t\t}\n\t}\n\nvec3 splits(vec3 x, vec2 m) {\n    vec3 o;\n    o.z=x.z;\n\t\tif (x.x >= 0.)\n\t\t\to.x = x.x + m.x;\n\t\telse\n\t\t\to.x = x.x - m.x;\n\n\t\tif (x.y >= 0.)\n\t\t\to.y = x.y + m.y;\n\t\telse\n\t\t\to.y = x.y - m.y;\n\n\treturn o;\n}\n\nvec3 Bubble(vec3 x){\n    float denom = 0.25 * dot(x.xy,x.xy) + 1.;\n    return vec3(x.xy/denom,2./(denom-1.));\n}\nvec3 Spherical(vec3 x){\n    return vec3(x.xy/(1e-6+dot(x.xy,x.xy)),x.z);\n}\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}\n\nvec2 julia(vec2 x, int seed){\n    float a = atan(x.y, x.x)/2.0;\n    if(Hash(seed)>.5) a += 3.14159;\n    float r = pow(dot(x,x), 0.25);\n    return vec2(r*cos(a),r*sin(a));\n}\n\nvec3 Julia3D(vec3 x, int seed){\n    float m_N = floor(5.*Hash(seed^0xe305c492) ) + 2.;\n    float m_AbsN = m_N;\n    m_N *= (Hash(seed^0x67793120)>.5?-1.:1.);\n    float m_Cn = (1. / m_N - 1.) / 2.;\n\tfloat z = x.z / m_AbsN;\n\tfloat r = pow(dot(x.xy,x.xy) + z*z, m_Cn);\n\tfloat tmp = r * dot(x.xy,x.xy);\n\tfloat ang = (atan(x.y,x.x) + pi*2. * floor(m_AbsN*Hash(seed^0x6aca43d3 ) ) ) / m_N;\n\treturn vec3(tmp * cos(ang),tmp * sin(ang),r * z);\n}\n\nint[] palette = int[] (\n\n    0x92924D,0x2924D9,0x924D9A,0x24D9A9,0x4D9A9A,0xD9A9A4,0x9A9A4C,0xA9A4CA,0x9A4CA3,0xA4CA3A,0x4CA3A3,0xCA3A34,0xA3A34A,0x3A34AA,0xA34AAC,0x34AACA,0x4AACAC,0xAACAC4,0xACAC48,0xCAC480,0xAC4800,0xC48003,0x480036,0x800369,0x003691,0x03691A,0x3691AC,0x691ACA,0x91ACA6,0x1ACA64,0xACA648,0xCA648A,0xA648AC,0x648ACA,0x48ACA3,0x8ACA34,0xACA348,0xCA348A,0xA348AC,0x348ACA,0x48ACA0,0x8ACA04,0xACA048,0xCA048A,0xA048AA,0x048AA9,0x48AA9F,0x8AA9F4,0xAA9F4A,0xA9F4A0,0x9F4A00,0xF4A003,0x4A0036,0xA00369,0x003691,0x03691A,0x3691A7,0x691A79,0x91A79C,0x1A79C4,0xA79C4F,0x79C4FA,0x9C4FA5,0xC4FA59,0x4FA59B,0xFA59B5,0xA59B51,0x59B51A,0x9B51A4,0xB51A49,0x51A49A,0x1A49A5,0xA49A54,0x49A54A,0x9A54A2,0xA54A29,0x54A298,0x4A2985,0xA29856,0x298560,0x985600,0x856003,0x560036,0x600369,0x003691,0x036919,0x36919F,0x6919F9,0x919F96,0x19F965,0x9F965B,0xF965B9,0x965B9D,0x65B9D9,0x5B9D94,0xB9D945,0x9D945D,0xD945D9,0x945D9C,0x45D9C9,0x5D9C93,0xD9C936,0x9C9360,0xC93609,0x93609A,0x3609A9,0x609A92,0x09A926,0x9A9262,0xA92629,0x926298,0x262989,0x629890,0x298906,0x989064,0x890649,0x906497,0x064978,0x64978F,0x4978F6,0x978F67,0x78F679,0x8F6795,0xF67958,0x67958E,0x7958E6,0x958E69,0x58E699,0x8E6993,0xE69938,0x69938D,0x9938D6,0x938D6B,0x38D6B9,0x8D6B92,0xD6B928,0x6B928B,0xB928B6,0x928B6E,0x28B6E9,0x8B6E90,0xB6E908,0x6E908A,0xE908A7,0x908A70,0x08A708,0x8A708E,0xA708E8,0x708E89,0x08E897,0x8E8972,0xE89728,0x89728D,0x9728D8,0x728D87,0x28D877,0x8D8775,0xD87758,0x87758B,0x7758B8,0x758B86,0x58B867,0x8B8677,0xB86778,0x867789,0x677898,0x778985,0x789857,0x898579,0x985798,0x857988,0x579888,0x798884,0x988847,0x88847C,0x8847C8,0x847C86,0x47C868,0x7C8682,0xC86827,0x86827E,0x6827E8,0x827E84,0x27E848,0x7E8481,0xE84818,0x848180,0x481808,0x818083,0x180838,0x808380,0x083808,0x838083,0x380838,0x808381,0x083817,0x83817E,0x3817E8,0x817E85,0x17E850,0x7E8500,0xE85003,0x850036,0x500369,0x003691,0x036917,0x36917E,0x6917E7,0x917E7C,0x17E7C8,0x7E7C8A,0xE7C8A7,0x7C8A7C,0xC8A7C7,0x8A7C7A,0xA7C7A8,0x7C7A8C,0xC7A8C7,0x7A8C7B,0xA8C7B7,0x8C7B79,0xC7B798,0x7B798F,0xB798F9,0x798F9C,0x98F9C8,0x8F9C8A,0xF9C8A0,0x9C8A00,0xC8A00A,0x8A00A1,0xA00A19,0x00A195,0x0A1950,0xA19500,0x195007,0x950076,0x500767,0x007675,0x076759,0x767596,0x675967,0x759674,0x596747,0x967474,0x674749,0x747498,0x474987,0x749878,0x498787,0x987878,0x878789,0x787898,0x878980,0x789800,0x898003\n    \n);\nint palette_count = 256;\nvec3 get_pallete(float f){\n    int a = int(f*float(palette_count));\n    int c0 = palette[a%palette_count];\n    int c1 = palette[(a+1)%palette_count];\n    vec3 rgb0 = vec3((c0>>16)&0xFF,(c0>>8)&0xFF,c0&0xFF)/255.;\n    vec3 rgb1 = vec3((c1>>16)&0xFF,(c1>>8)&0xFF,c1&0xFF)/255.;\n    return mix(rgb0,rgb1,fract(f*float(palette_count)));\n}\n\n\nfloat particles = 4e6;\n\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\n\n//Convert uniform random to normal\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n\n\nint getParticle(float id, vec3 R, int iFrame){\n    int seed = IHash(int(id))^IHash(int(iFrame));\n    return seed;\n}\n\n\nvec3 V0(vec3 x){return Bubble(x);}\nvec3 V1(vec3 x){return Spherical(x);}\nvec3 V2(vec3 x){return Cylinder(x);}\nvec3 V3(vec3 x){return vec3(Elliptic(x.xy),x.z);}\n\nvec3 F0(vec3 x, sampler2D ch){\n    x.xy = mat2((param(0)*2.-1.)) * x.xy  + param(1).xy*.2-.1;\n    vec4 s = max(vec4(0),param(2)-.5);\n    s/=.001+dot(s,vec4(1));\n    return \tV0(x)*s.x+V1(x)*s.y+V2(x)*s.z+V3(x)*s.w;\n}\nvec3 F1(vec3 x, sampler2D ch){\n    x.xy = mat2(.8*normalize(param(3)*2.-1.)) * x.xy  + param(4).xy*2.-1.;\n    vec4 s = max(vec4(0),param(5)-.5);\n    s/=.001+dot(s,vec4(1));\n    return \tV0(x)*s.x+V1(x)*s.y+V2(x)*s.z+V3(x)*s.w;\n}\nvec3 F2(vec3 x, sampler2D ch){\n    x.xy = mat2(.9*normalize(param(6)*2.-1.)) * x.xy  + param(7).xy-.5;\n    vec4 s = max(vec4(0.),param(8)-.5);\n    s/=.001+dot(s,vec4(1));\n    return \tV0(x)*s.x+V1(x)*s.y+V2(x)*s.z+V3(x)*s.w;\n}\n\nvec3 F3(vec3 x, int seed, sampler2D ch){\n    \n    x.xy*=sign(rand4(seed).xy-.5);\n    \n    //x.xy += .1*param(12).xy*randn(vec2(Hash(seed),Hash(seed^0xe305c492)));\n    x.xy = mat2(.91*normalize(param(9)*2.-1.)) * x.xy  + param(10).xy*.2-.1;\n    vec4 s = max(vec4(0.),param(11)-.5);\n    s/=.001+dot(s,vec4(1));\n    return \tV0(x)*s.x+V1(x)*s.y+V2(x)*s.z+V3(x)*s.w;\n}\n\nvec3 FF(vec3 x){\n    return x;\n    //return 2.*Bipolar(x*mat2(1, 0, 0, 1),0.);\n}\n\n\nvoid iter(inout vec3 x, inout float col, inout int seed, sampler2D ch){\n    //vec4 r = rand4(seed);\n    float r = Hash(seed);\n    seed=IHash(seed);\n    if(r<.25){\n        col = mix(col,1.,0.51);\n        x = FF(F0(x,ch));\n    } else if(r<.5){\n        col = mix(col,0.62,1.);\n        x = FF(F1(x,ch));\n    } else if(r<.75){\n        col = mix(col,0.9,0.53);\n        \n        x = FF(F2(x,ch));\n    } else {\n        //col = mix(col,1.,0.504);\n        \n        x = FF(F3(x,seed,ch));\n        \n    }\n    x.xy += .5/scale*randn(vec2(Hash(seed),Hash(seed^0xe305c492)));\n}\n\n\nvec4 orbitDist(int seed, vec2 p, sampler2D ch){\n    float col = 0.5;//Hash(seed);\n    float d = 1e9;\n    \n    vec3 z = vec3(rand4(seed).zw*2.-1.,0);\n    float j = 0.0;\n    for(j = 0.0;  j < mIters; j++) {\n        iter(z,col,seed,ch);\n        d = min(d,length(z.xy-center-vec2(1,-1)*p/scale)*scale);\n    }\n    return vec4(get_pallete(col), d);\n    \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(-1);\n    initParams(iChannel2);\n    \n    \n    float d=1e9;\n    for(int j = 0; j < branches; j++){\n        int seed = IHash(j)^IHash(F)^IHash(int(i.x))^IHash(int(i.y))^0x8F40A3;\n    \tvec4 r = rand4(seed);\n        float id = floor(r.x*particles);\n        vec2 p = (i-R.xy/2.);\n        \n        float dp = orbitDist(getParticle(id,R,iFrame),p,iChannel2).w;\n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.x = id;//Output the nearest points ID\n        }\n    }\n    d=1e9;\n    for(int j = 0; j < branches; j++){\n        int seed = IHash(j)^IHash(F)^IHash(int(i.x))^IHash(int(i.y))^0x260827;\n    \tvec4 r = rand4(seed);\n        //Sample using a shrinking normal distribution\n        float id = texture(iChannel1,(i+randn(r.zw)*127.)/R.xy).x;\n        vec2 p = (i-R.xy/2.);\n        \n        float dp = orbitDist(getParticle(id,R,iFrame-1),p,iChannel2).w;\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.y = id;\n        }\n    }\n    \n    d=1e9;\n    for(int j = 0; j < branches; j++){\n        int seed = IHash(j)^IHash(F)^IHash(int(i.x))^IHash(int(i.y))^0x363938;\n    \tvec4 r = rand4(seed);\n        float id = texture(iChannel1,(i+randn(r.zw)*19.)/R.xy).y;\n        \n        vec2 p = (i-R.xy/2.);\n        \n        float dp = orbitDist(getParticle(id,R,iFrame-2),p,iChannel2).w;\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.z = id;\n        }\n    }\n    d=1e9;\n    \n    for(int j = 0; j < branches; j++){\n        int seed = IHash(j)^IHash(F)^IHash(int(i.x))^IHash(int(i.y))^0xB7A726;\n    \tvec4 r = rand4(seed);\n        float id = texture(iChannel1,(i+randn(r.zw)*13.)/R.xy).z;\n\n        vec2 p = (i-R.xy/2.);\n        \n        float dp = orbitDist(getParticle(id,R,iFrame-3),p,iChannel2).w;\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.w = id;\n        }\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    \n    initParams(iChannel2);\n\n    \n\tvec2 uv = i/R.xy;\n    o = texture(iChannel0,uv)*((texture( iChannel3, vec2(32.5/256.0,0.25) ).x > .5 || texture( iChannel3, vec2(82.5/256.0,0.25) ).x > .5)?0.:1.);\n    \n    for(int j = 0; j < branches; j++){//Rendering pass is just the last layer pass\n        \n        int seed = IHash(j)^IHash(F)^IHash(int(i.x))^IHash(int(i.y))^0x48593D;\n    \tvec4 r = rand4(seed);\n        \n        \n        r.zw = randn(r.zw)*2.;\n        float id = texture(iChannel1,(i+r.zw)/R.xy).w;\n\n\n            \n        if(id >= 1.){\n            \n            vec2 p = (i +randn(r.xy)*.4 -R.xy/2.);\n        \tint seed = getParticle(id,R,iFrame-3);\n            \n            \n            float col = Hash(seed);\n            float d = 1e9;\n            vec3 z = vec3(rand4(seed).zw*2.-1.,0);\n            float j = 0.0;\n            for(j = 0.0;  j < mIters; j++) {\n                iter(z,col,seed,iChannel2);\n                if(j>5.)\n                    d = length(z.xy-center-vec2(1,-1)*p/scale)*scale;\n            \t    o += vec4(get_pallete(col),1)*clamp(1.-d,0.,1.);\n            }\n            \n        }\n        \n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float gaussian(float x, float s){\n    return 1./(s*sqrt(3.14159*2.*s))*exp(-x*x/(2.*s*s));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 t = texture(iChannel0, fragCoord/iResolution.xy);\n    float r = 1.4/(1.+.6*sqrt(t.w));\n    int m = 15;//int(r/2.);\n    fragColor = vec4(0);\n    if(r<0.05){\n        fragColor = texture(iChannel0, (fragCoord)/iResolution.xy);\n    } else {\n        for(int y = -m; y<=m; y++){\n            for(int x = -m; x<=m; x++){\n                float w = gaussian(length(vec2(x,y)),r);\n                fragColor += w*texture(iChannel0, (fragCoord+vec2(x,y))/iResolution.xy);\n            }\n        }\n    }\n    fragColor=fragColor*(log(1.+fragColor.w))/fragColor.w;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    int seed = IHash(F)^IHash(int(iMouse.x)^IHash(int(i.x)^IHash(int(i.y)^0x7f339098)));\n    if(texelFetch(iChannel3,ivec2(82,1),0).x>.5 || iFrame <3){\n    \to = vec4(Hash(seed^0x83242236),Hash(seed^0x680f934f),Hash(seed^0x77868bcd),Hash(seed));\n    } else {\n        o = texelFetch(iChannel0, ivec2(i),0);\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}