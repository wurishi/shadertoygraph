{"ver":"0.1","info":{"id":"td33Rr","date":"1567615282","viewed":261,"name":"Voronoi X","username":"flyingrub","description":"try to recreate an organic feeling thanks to voronoi","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution iResolution\n#define frame iFrame\n#define pixel_width 1./iResolution.y\n\nconst float speed = .1;\nconst float grid = 10.;\nconst float falloff = 12.;\nfloat t;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\n// Commutative smooth minimum function. Provided by Tomkh and \n// taken from Alex Evans's (aka Statix) talk: \n// http://media.lolrus.mediamolecule.com/AlexEvans_SIGGRAPH-2015.pdf\n// Credited to Dave Smith @media molecule.\nfloat smin2(float a, float b, float r)\n{\n   float f = max(0., 1. - abs(b - a)/r);\n   return min(a, b) - r*.25*f*f;\n}\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// I've not seen anybody out there computing correct cell interior distances for Voronoi\n// patterns yet. That's why they cannot shade the cell interior correctly, and why you've\n// never seen cell boundaries rendered correctly. \n//\n// However, here's how you do mathematically correct distances (note the equidistant and non\n// degenerated grey isolines inside the cells) and hence edges (in yellow):\n//\n// https://iquilezles.org/articles/voronoilines\n//\n// More Voronoi shaders:\n//\n// Exact edges:  https://www.shadertoy.com/view/ldl3W8\n// Hierarchical: https://www.shadertoy.com/view/Xll3zX\n// Smooth:       https://www.shadertoy.com/view/ldB3zc\n// Voronoise:    https://www.shadertoy.com/view/Xd23Dh\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 index = floor(x);\n    vec2 gv = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 minOffset, minPoint;\n\n    float minDist = 8.;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 offset = vec2(float(i),float(j));\n\t\tvec2 random = hash2( index + offset );\n\t\t#ifdef ANIMATE\n        vec2 a = t+random;\n        random = 0.5 + 0.5*sin( t + 6.2831*random );\n        #endif\t\n        vec2 p = offset + random - gv;\n        float d = dot(p,p);\n\n        if( d<minDist )\n        {\n            minDist = d;\n            minPoint = p;\n            minOffset = offset;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    minDist = 8.0;\n    float smoothDist = 0.0;\t\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 offset = minOffset + vec2(float(i),float(j));\n\t\tvec2 random = hash2( index + offset );\n\t\t#ifdef ANIMATE\n        random = 0.5 + 0.5*sin( t + 6.2831*random );\n        #endif\t\n        vec2 p = offset + random - gv;\n\n        if( dot(minPoint-p,minPoint-p)>0.00001 )\n        {\n            float d = dot( 0.5*(minPoint+p), normalize(p-minPoint) );\n            minDist = min( minDist, d );\n        \tsmoothDist += exp( -falloff*d );\n        }\n    }\n    \n    smoothDist = -(1.0/falloff)*log( smoothDist );\n\n    return vec3( smoothDist, minPoint );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime*speed+10.;\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n\n    vec3 c = voronoi( grid*uv );\n    vec3 col = vec3(1,1,1);\n    col *= 1.-vec3(smoothstep(pixel_width*grid, 0.00, c.x-0.01));\n\t\n    col *= smoothstep(pixel_width, 0., length(uv)-0.443);\n\t\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}