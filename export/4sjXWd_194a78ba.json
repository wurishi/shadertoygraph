{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\nvec3 dmul( vec3 a, vec3 b )  {\n    float r = length(a);\n    \n    b.xy=cmul(normalize(a.xy), b.xy);\n    //b.yz=cmul(normalize(a.yz), b.yz);\n    //b.xz=cmul(normalize(a.xz), b.xz);\n    \n    return r*b;\n}\n\n\nvec3 pow4( vec3 z){\n\tz=dmul(z,z);return dmul(z,z);\n}\n\nvec3 pow3( vec3 z){\n    float r2 = dot(z,z);\n    vec2 a = z.xy;a=csqr(a)/dot( a,a);\n    vec2 b = z.yz;b=csqr(b)/dot( b,b); \n    vec2 c = z.xz;c=csqr(c)/dot( c,c);\n    z.xy = cmul(a,z.xy);   \n    z.yz = cmul(b,z.yz);      \n    z.xz = cmul(c,z.xz);\n    return r2*z;\n}\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nfloat zoom;\n\nvec3 f(vec3 z,vec3 c){\n\t\n\t\n    return dmul(z,z)+c;  \n    //return pow3(dmul(z,z))+c;\n\n}\n\nvec3 map( vec3 p, vec3 rd )\n{\n    \n    float bailout = 1e4;\n    float invbail=1./bailout;\n    vec3 c = p;\n    vec3 z = p;\n    vec3 dz = z;\n    vec3 pz = vec3( 0.0 );  \n    float d=bailout;\n    \n\tfor( int i=0; i<8; i++ ) \n\t{\n            \n\t\tif( d<invbail||d>bailout) continue;\n            // formula\n\t\t\tpz=z;\n            z=f(z,c);\n            \t\n            dz= (z-pz);\n  \n            d = dot(z,z);\t\n    }\n        \n\treturn dz;\n}\n\n\n\nvec3 m_refract( in vec3 ro, vec3 rd )\n{\n    \n    float dt = .05;\n\tro+=3.*rd;\n    \n    for( int i=0; i<60; i++ )\n\t{\n        \n        vec3 dz = map(ro,rd);\n        \n        rd=(rd+.2*dz/(1.+5.*dot(dz,dz)));\n        ro+=rd*dt;\n\t\t\n    }\t\n    return rd;\n}\n\n\n\n\n\nvec3 calcPixel( in vec2 pi, in float time )\n{\n\tvec2 q = pi / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\t\n\n    vec3 ro = zoom*vec3(1.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n    \n\n\t// raymarch\n    vec3 res = m_refract(ro,rd);\n    rd=res;\n\t\n\t// shade\n    vec3 col = vec3(0.0);\n    \n\t//col= vec3(normalize(rd*rd));\n    col=texture( iChannel0, rd ).xyz+vec3(0.,0.,abs(1.-length(rd)));\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n zoom=3.+.1*sin(.01*iTime);\n\t\n    fragColor = vec4( calcPixel( fragCoord.xy, iTime ), 1.0 );\n\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sjXWd","date":"1417349858","viewed":287,"name":"Fractal refraction","username":"guil","description":"test of 3d fractal rendering using pseudo refraction.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal"],"hasliked":0,"parentid":"","parentname":""}}