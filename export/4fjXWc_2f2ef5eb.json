{"ver":"0.1","info":{"id":"4fjXWc","date":"1706900989","viewed":52,"name":"Inkblots proto (DOS 512b intro)","username":"pestis","description":"Prototyping the SDF and raymarcher for the \"inkblots\", a DOS 512b intro, released at Lovebyte 2024\n\nSource for the final intro: https://github.com/vsariola/inkblots\nCapture: https://youtu.be/PwvUZLnnzu8\nPouet: https://www.pouet.net/prod.php?which=96041\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kaleidoscopicifs"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int STEPS = 16;\nconst float STEPSIZEDIV = 18e4;\nconst float LEVELSCALE = 2.;\nconst int ITERS = 12;\nconst float MINDIST = .001;\nconst float LEVEL = 1.7;\nconst float CAM_Z = -.33;\nconst float CAM_Y = -.24;\nconst float ESTART = -1.2;\nconst float EDIV = 1.5;\nconst float CAMROT = .3;\nconst float ODIV = 3.141592; // pi is cheap in x87\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec3 ray = vec3((fragCoord - 0.5 * iResolution.xy) / iResolution.xy,.5);        \n    ray.y = -ray.y;    \n    ray.x += CAMROT *ray.z;    \n    ray.z -= CAMROT * ray.x;\n    // in DOS, the ray.x and ray.y are from -32768 to 32768\n    // this is just to mimic that\n    ray\t= ray*256.*256.;\n    // an example how the DOS version shuffles the ray coordinates to rotate camera\n    ray.yx = ray.xy;\n    ray.xz = ray.zx; \n    \n    // camera moves with time; I used this shadertoy to find parameters where we fly\n    // as much as possible in the fractal without hitting anything\n    vec3 p = vec3(iTime,CAM_Y,CAM_Z);\n    int i;    \n    for(i=0; i<STEPS; i++) { // marchloop                                                             \n        float o = (1.+cos(p.x))/ODIV;\n        float r = 0.;\n        vec3 t = p;                                                                       \n        for(int j=0; j<ITERS; j++){                            \n            t.x = abs(t.x - round(t.x));          \n            t.xyz = t.yzx;                   \n            t.x += t.x;                    \n            r += t.x*t.x;\n            t.x += t.z * o;\n            t.z -= t.x * o;                              \n        }\n        float dist = sqrt(r)-LEVEL;                 \n        p += ray * dist / STEPSIZEDIV;                        \n        if(dist < MINDIST) break;\n    }        \n    float s = float(i)/float(STEPS-1);    \n    fragColor = vec4(vec3(s),1.0);\n}","name":"Image","description":"","type":"image"}]}