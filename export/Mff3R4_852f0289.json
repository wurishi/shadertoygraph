{"ver":"0.1","info":{"id":"Mff3R4","date":"1702827786","viewed":25,"name":"ColorYard","username":"xtr1984","description":"Color dynamics","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["persistanceballsdynamics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool sphere(vec2 uv,vec2 pos, float r){\n    if (distance(uv-pos,vec2(0))<r){\n        return true;\n    }\n    else return false;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    for (int i = 0; i< NUMPARTICLES ;i++){\n        vec2 pos = texelFetch(iChannel0, ivec2(i,0),0).xy;\n        vec3 scol = texelFetch(iChannel0, ivec2(i,2),0).rgb;\n        bool b = sphere(uv, pos, radius);\n        col = mix(col, scol, float(b)/2.0); \n    }\n\n    //Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = texture(iChannel0, uv);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n = fragCoord.x;\n    float reg = fragCoord.y;\n    ivec2 ifrag = ivec2(fragCoord);  //this is nigthmare!\n    float aspect = iResolution.x/iResolution.y;\n    vec2 pos,vel;\n    \n    if(iFrame==0){\n        if (ifrag.y==0){\n            pos.x = rand(vec2(n))*aspect;\n            pos.y = rand(vec2(n+1.0));\n            fragColor = vec4(pos.x, pos.y,1.0,1.0);\n        }\n        if (ifrag.y==1){\n            vel.x = (rand(vec2(n))-0.5)*VELFACTOR;\n            vel.y = (rand(vec2(n+1.0))-0.5)*VELFACTOR;\n            fragColor = vec4(vel.x, vel.y,1.0,1.0);\n        }\n        if (ifrag.y==2){\n            fragColor = vec4(rand(vec2(n)), rand(vec2(n+1.0)),rand(vec2(n+2.0)),1.0);\n        }\n        return;\n    }\n    \n    //pos = texture(iChannel0, vec2(fragCoord.x,0)).xy;\n    if(ifrag.y==0){ \n        pos = texelFetch(iChannel0, ivec2(fragCoord.x,0),0).xy;\n        vel = texelFetch(iChannel0, ivec2(fragCoord.x,1),0).xy;\n        vec2 newpos=pos+vel;\n        if (newpos.x < radius){\n            newpos.x = radius;\n        }\n        if (newpos.x > aspect-radius){\n            newpos.x = aspect-radius;\n        }\n        if (newpos.y < radius){\n            newpos.y = radius;\n        }\n        if (newpos.y > 1.0-radius){\n            newpos.y = 1.0-radius;\n        }\n\n        //newpos = \n        fragColor = vec4(newpos.x,newpos.y,1.0,1.0);\n    }\n    if(ifrag.y==1){\n        pos = texelFetch(iChannel0, ivec2(fragCoord.x,0),0).xy;\n        vel = texelFetch(iChannel0, ivec2(fragCoord.x,1),0).xy;\n        vec2 newvel = vel;\n        if (pos.x + vel.x < radius){\n            newvel.x = - vel.x;\n        }\n        if (pos.x + vel.x > aspect-radius){\n            newvel.x = - vel.x;\n        }\n        if (pos.y + vel.y < radius){\n            newvel.y = - vel.y;\n        }\n        if (pos.y + vel.y > 1.0-radius){\n            newvel.y = - vel.y;\n        }\n\n        fragColor = vec4(newvel.x,newvel.y,1.0,1.0);\n    }\n    if(ifrag.y==2){\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord.x,2),0);\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUMPARTICLES 200\n#define radius 0.2\n#define VELFACTOR 0.05\n\n\nvec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n","name":"Common","description":"","type":"common"}]}