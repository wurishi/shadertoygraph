{"ver":"0.1","info":{"id":"XtyfRz","date":"1541607417","viewed":524,"name":"Hex Fill","username":"HyPeRbLaH","description":"Fills from left to right with hexagons","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2014 -- Modified by Chad Allen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat scale = 16.0;\n\n// sqrt(3.0) / 3.0\nfloat sqrt3d3 = 0.57735026918962576450914878050196;\nfloat twoSqrt3d3 = 1.1547005383792515290182975610039;\n\n// { 2d cell id, distance to border, distnace to center )\nvec4 hexagon( vec2 p ) \n{\n\tvec2 q = vec2( p.x*2.0*sqrt3d3, p.y + p.x*sqrt3d3 );\n\t\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n    // distance to borders\n\tfloat e = dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) );\n\n\t// distance to center\t\n\tp = vec2( q.x + floor(0.5+p.y/1.5), 4.0*p.y/3.0 )*0.5 + 0.5;\n\tfloat f = length( (fract(p) - 0.5)*vec2(1.0,0.85) );\t\t\n\t\n\treturn vec4( pi + ca - cb*ma, e, f );\n}\n\nfloat hash1( vec2  p ) { float n = dot(p,vec2(127.1,311.7) ); return fract(sin(n)*43758.5453); }\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\t//vec2 pos = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 pos = fragCoord.xy / iResolution.y;\n    float ratio = iResolution.x / iResolution.y;\n\t\n    // distort\n\t//pos *= 1.0 + 0.3*length(pos);\n\t\n    // gray\n\tvec4 h = hexagon(scale * pos);\n\t//float n = noise( vec3(0.3*h.xy+iTime*0.1,iTime) );\n    float t = iTime * 0.05;\n    float hash = hash1(h.xy);\n    //float sweepLine = (1.0 - fract(t)) * 1.2 - 0.1;\n    //float sweep = smoothstep(sweepLine - 0.05, sweepLine + 0.05, 1.0 - uv.x);// * scale + fract(t) * ratio * scale;\n    float hxToWidth = scale * ratio * twoSqrt3d3;\n    float front = -h.x + (fract(t) * 1.4 - 0.2 + hash * 0.15) * hxToWidth;\n\tfloat hx = h.x / hxToWidth + front;\n    \n    // h.x / scale * ratio * twoSqrt3d3 + (-h.x + (frace(t) * 1.4 - 0.2 + hash * 0.15) * scale * ratio * twoSqrt3d3;\n    \n    //vec4 col = textureLod(iChannel0, (h.xy + vec2(-iTime * 0.2, 0.0)) / 300.0, 0.0) * smoothstep(0.8, 1.0, hx * (h.z + 0.1));\n    vec4 cola = textureLod(iChannel0, (h.xy + floor(t) * 0.1) / 50.0, 0.0) * 0.2 + 0.1;\n    vec4 colb = textureLod(iChannel0, (h.xy + floor(t) * 0.2) / 40.0, 0.0) * 0.7 + 0.3;\n    vec4 bg = vec4(0.05, 0.35, 0.45, 1.0);\n    float growth = mix(smoothstep(0.75, 1.0, hx * (h.z + 0.025)), clamp(hx, 0.0, 1.0), mod(floor(t), 2.0));\n    vec4 col = mix(bg, mix(cola, colb, growth), smoothstep(0.05, 0.1, h.z));\n\t//col *= smoothstep( 0.10, 0.11, h.z );\n\t//col *= smoothstep( 0.10, 0.11, h.w );\n\t//col *= 1.0 + 0.15*sin(40.0*h.z);\n\t//col *= 0.75 + 0.5*h.z*n;\n\t\n\n\t// red\n\t//h = hexagon(6.0*pos + 0.6*iTime);\n\t//n = noise( vec3(0.3*h.xy+iTime*0.1,iTime) );\n\t//vec3 colb = 0.9 + 0.8*sin( hash1(h.xy)*1.5 + 2.0 + vec3(0.0,1.0,1.0) );\n\t//colb *= smoothstep( 0.10, 0.11, h.z );\n\t//colb *= 1.0 + 0.15*sin(40.0*h.z);\n\t//colb *= 0.75 + 0.5*h.z*n;\n\n\t//h = hexagon(6.0*(pos+0.1*vec2(-1.3,1.0)) + 0.6*iTime);\n    //col *= 1.0-0.8*smoothstep(0.45,0.451,noise( vec3(0.3*h.xy+iTime*0.1,iTime) ));\n\n\t//col = mix( col, colb, smoothstep(0.45,0.451,n) );\n\n\t// vignette\n\t//col *= pow( 16.0*uv.x*(1.0-uv.x)*uv.y*(1.0-uv.y), 0.1 );\n    //col *= step(0.0, uv.x - fract(iTime * 0.1));\n\t\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}