{"ver":"0.1","info":{"id":"NdBSRR","date":"1619504606","viewed":115,"name":"Magnet Pendulum","username":"SumurShader","description":"https://www.youtube.com/watch?v=C5Jkgvw-Z6E","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define g 9.8\n#define m 1.0\n#define r 10.0\n#define damping 0.75\n#define dt 0.12\n#define t_max 100.0\n#define e 0.0000011\n\nstruct Magnet{\n    float m_r;\n    float m_theta;\n    float m_phi;\n    float m_strength;\n    vec3 m_c;\n};\n\nvec3 sphereToCart(float _r, float _th, float _ph){\n    return vec3(_r*sin(_th)*cos(_ph), _r*sin(_th)*sin(_ph), -_r*cos(_th));\n}\n\nfloat norm(vec3 v){\n    return sqrt(v.x*v.x + v.y*v.y + v.z*v.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;  \n    \n    float r_mag = 1.2*r;\n    float s_mag = 90.0;\n    \n    Magnet mag0 = Magnet(0.0, 0.0, 0.0, 0.0, vec3(0.0));\n    Magnet mag1 = Magnet(r_mag, radians(20.0), radians(120.0), s_mag, vec3(1.0, 0.0, 0.0));\n    Magnet mag2 = Magnet(r_mag, radians(20.0), radians(0.0), s_mag, vec3(1.0, 1.0, 0.0));\n    Magnet mag3 = Magnet(r_mag, radians(20.0), radians(-120.0), s_mag, vec3(0.0, 0.0, 1.0));\n    Magnet magnets[4] = Magnet[4](mag0, mag1, mag2, mag3);\n    \n    float theta = PI/2.0 - acos(distance(uv, vec2(0.5))/0.5);\n    float v_theta = 0.0;\n    float a_theta = 0.0;\n    float phi = atan(uv.y-0.5, uv.x-0.5);\n    float v_phi = 0.0;\n    float a_phi = 0.0;\n    float t = 0.0;\n    \n    vec3 pendulum_pos, pendulum_r_dir, pendulum_theta_dir, pendulum_phi_dir;\n    vec3 force_grav_dir, force_mag_dir, mag_pos;\n    float force_grav_alpha, force_grav_beta, force_grav_theta, force_grav_phi;\n    float force_mag_alpha, force_mag_beta, force_mag_theta, force_mag_phi;\n    float d;\n    \n    while (t < t_max){\n    \n        pendulum_pos = sphereToCart(r, theta, phi);\n        pendulum_r_dir = sphereToCart(r, theta, phi);\n        pendulum_r_dir /= norm(pendulum_r_dir);\n        pendulum_phi_dir = vec3(-pendulum_pos.y, pendulum_pos.x, 0);\n        pendulum_phi_dir /= norm(pendulum_phi_dir);\n        pendulum_theta_dir = cross(pendulum_r_dir, pendulum_phi_dir);\n        pendulum_theta_dir /= norm(pendulum_theta_dir);\n        \n        force_grav_dir = vec3(0.0, 0.0, -1.0);\n        force_grav_alpha = acos(dot(force_grav_dir, pendulum_theta_dir));\n        force_grav_theta = m*g*cos(force_grav_alpha) * ((theta+e)/abs(theta+e));\n        \n        force_mag_theta = 0.0;\n        force_mag_phi = 0.0;\n        \n        for (int i=0; i<magnets.length(); i++){\n        \n            Magnet mag = magnets[i];\n            mag_pos = sphereToCart(mag.m_r, mag.m_theta, mag.m_phi);\n            d = norm(mag_pos - pendulum_pos);\n            force_mag_dir = (mag_pos-pendulum_pos)/d;\n            \n            force_mag_alpha = acos(dot(force_mag_dir, pendulum_theta_dir));\n            force_mag_theta += mag.m_strength/(d*d) * cos(force_mag_alpha) * ((theta+e)/abs(theta+e));\n            \n            force_mag_beta = acos(dot(force_mag_dir, pendulum_phi_dir));\n            force_mag_phi += mag.m_strength/(d*d) * cos(force_mag_beta);\n        }\n        \n        a_theta = (force_grav_theta + force_mag_theta) / (m*r);\n        v_theta = (v_theta + a_theta*dt);\n        \n        a_phi = (force_mag_phi) / (m*r);\n        v_phi = (v_phi + a_phi*dt);\n        \n        float v_angle = atan(v_theta, v_phi);\n        float v_tot = sqrt(v_theta*v_theta + v_phi*v_phi) * pow(damping, dt);\n        v_theta = v_tot*sin(v_angle);\n        v_phi = v_tot*cos(v_angle);\n        \n        theta = theta + v_theta*dt;\n        phi = phi + v_phi*dt;\n        \n        t += dt;\n    }\n    \n    vec3 final_pos = sphereToCart(r, theta, phi);\n    Magnet closest = mag0;\n    float min_dist = 100.0*r;\n    for (int i=0; i<magnets.length(); i++){\n        Magnet mag = magnets[i];\n        vec3 mag_pos = sphereToCart(mag.m_r, mag.m_theta, mag.m_phi);\n        float d = distance(final_pos, mag_pos);\n        if (d < min_dist){\n            min_dist = d;\n            closest = mag;\n        }\n    }\n    \n    float circ = distance(uv, vec2(0.5));\n    vec3 col = closest.m_c * step(circ, 0.5);    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}