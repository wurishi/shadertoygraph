{"ver":"0.1","info":{"id":"4tjXR3","date":"1445429961","viewed":109,"name":"PatatoÃ¯de","username":"denosya","description":"Exploring Julia in 3D","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\nint ITER;\nint ITERMAX;\n\nconst int POWER = 2;\n\nfloat distPatatagone(in vec3 m) {\n   \n    vec3 center = vec3(0,0,5);\n\n    float radius = 2.5;\n    float dist = length(m-center) - radius;\t\n    \n    if(dist > 0.0) return max(dist, 0.05);\n    \n    float t = (47.+sin(iTime*0.25)*4.7)*0.1;\n    \n    float co = 0.+cos(t)*0.9;\n    float si = 0.5+sin(t)*0.9;    \n    \n    vec3 cj = vec3(co, si, co);\n    \n    vec3 w  = vec3(m-center);    \n\n    //mandeloop\n    for(int i=0; i<100; i++) {\n    \n        for(int j=0; j<(POWER-1); j++) {\n            float a = w.x; \n            float b = w.y; \n            float c = w.z;\n\n            float wa = a*a-b*b-c*c;\n            float wb = 2.0*a*b-b*c;\n            float wc = 2.0*a*c+b*c;\n\n            w = vec3(wa,wb,wc);\n        }\n\n\t\tw += cj;\t    \t    \n        \n        float module = length(w);\n\t\n        if(module>6.0) {\n            return 0.01;\t\n        }\n        \n        ITER++;\n        \n    }\n    \n    return 0.0;\t\n    \n}\n\nint march(in vec3 origin, in vec3 ray, out vec3 m) {\n\n\n    float totaldist = 0.0;\n    \n    for(int i=0; i<500; i++) {\n        \n        vec3 m = origin + ray * totaldist;\n\n        float dist = distPatatagone(m);\n        \n        if(dist==0.0) {\n            return ITER;\n        }\n        \n        totaldist += dist;\n        \n        if(totaldist>10.0) {\n\t\t\treturn ITER;\n        }\n        //to+=ITER;\n    }\n    \n    return ITER;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n\n    uv /= 1.5;//(1.0 + (1.0+sin(iTime*0.5))*1.0);\n    \n    vec3 vp = vec3(uv, 1.0);\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vp);\n    \n    vec3 m;\n\n    float t = iTime*0.1;\n    float co = cos(t);\n    float si = sin(t);    \n    \n    ro = vec3(0,0,5) + vec3(si, 0.0, -co)*5.0;\n    mat3 rot = mat3(vec3(co,0.0,-si), vec3(0.0,1.0,0.0), vec3(si,0.0,co));\n    \n    rd *= rot;\n    \n    \n    float draw = float(march(ro, rd, m)) * (float(POWER)*0.3);\n    \n    float color = pow(float(draw)/500.0, 2.);\n\n    fragColor = vec4(vec3(0.2,0.9,0.36)*color,1);\n    \n\t\n    \n    \n}","name":"Image","description":"","type":"image"}]}