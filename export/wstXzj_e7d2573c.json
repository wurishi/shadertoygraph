{"ver":"0.1","info":{"id":"wstXzj","date":"1572424227","viewed":111,"name":"Training 01 (Copo)","username":"coposuke","description":"Training","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["training"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI   3.14159265357989\n#define PI_2 6.28318530715978\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 opMin(vec2 a, vec2 b)\n{\n    return a.x < b.x ? a : b;\n}\n\nvec2 map(in vec3 rayPos)\n{\n    float time = fract(iTime);\n    vec3 grid = floor(rayPos);\n    vec3 sphRayPos = fract(rayPos + vec3(time * mix(-1.0, 1.0, step(fract(grid.z / 2.0), 0.0)), 0.5, 0));\n    vec3 boxRayPos = fract(rayPos + vec3(0.0, time * mix(-1.0, 1.0, step(fract(grid.x / 2.0), 0.0)), 0));\n    \n    vec2 ret = vec2(1e+4, 0);\n    ret = opMin(ret, vec2(length(sphRayPos - 0.5) - 0.2, 1));\n    ret = opMin(ret, vec2(sdBox(boxRayPos - 0.5, vec3(0.15)), 2));\n    return ret;\n}\n\nvec4 march(in vec3 camPos, in vec3 camRay)\n{\n    const int ITERATE = 128;\n    vec3 rayPos = camPos;\n    vec4 ret = vec4(0);\n    \n    for(int i=0 ; i<ITERATE ; ++i)\n    {\n        vec2 result = map(rayPos);\n        rayPos += camRay * result.x;\n        \n        if(result.x < 1.0e-3)\n        {\n            ret.xyz = rayPos;\n            ret.w = result.y;\n        }\n    }\n    \n    return ret;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    const float EPSILON = 1.0e-4;\n    return normalize(vec3(\n        map(vec3(pos.x + EPSILON, pos.y, pos.z)).x - map(vec3(pos.x - EPSILON, pos.y, pos.z)).x,\n        map(vec3(pos.x, pos.y + EPSILON, pos.z)).x - map(vec3(pos.x, pos.y - EPSILON, pos.z)).x,\n        map(vec3(pos.x, pos.y, pos.z + EPSILON)).x - map(vec3(pos.x, pos.y, pos.z - EPSILON)).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec3 camPos = vec3(0.5 + cos(fract(iTime * 0.25) * PI_2) * 0.1, sin(fract(iTime * 0.5) * PI_2) * 0.5 + 0.1, iTime);\n    vec3 camDir = vec3(0, 0, 1);\n    vec3 camUp  = normalize(vec3(cos(fract(iTime * 0.05) * PI_2), sin(fract(iTime * 0.05) * PI_2), 0));\n    vec3 camSide= cross(camDir, camUp);\n    mat3 camMat = mat3(camSide, camUp, camDir);\n    float camLength = 2.0;\n    vec3 camRay = camMat * normalize(vec3(uv, camLength));\n    \n    vec4 result = march(camPos, camRay);\n    float resDist  = distance(camPos, result.xyz);\n    vec3 resPos    = vec3(result.xyz);\n    vec3 resNormal = computeNormal(resPos);\n    \n    vec3 diffuse = vec3(0);\n    diffuse = mix(diffuse, vec3(0.7, 0.7, 0.5), step(result.w, 2.0));\n    diffuse = mix(diffuse, vec3(0.8, 0.7, 0.3), step(result.w, 1.0));\n    diffuse = mix(diffuse, vec3(0.9), step(result.w, 0.0));\n    \n    vec3 lightDir = normalize(vec3(1,1.5,-1));\n    vec3 light = clamp(dot(lightDir, resNormal), 0.3, 1.0) * vec3(1);\n    light = mix(light, vec3(1), step(result.w, 0.0));\n\n    fragColor = vec4(diffuse * light,1.0);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.9), clamp(resDist * 0.075, 0.0, 1.0));\n}\n","name":"Image","description":"","type":"image"}]}