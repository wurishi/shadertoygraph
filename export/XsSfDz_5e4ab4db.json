{"ver":"0.1","info":{"id":"XsSfDz","date":"1499997745","viewed":619,"name":"Hello triangle","username":"etale_cohomology","description":"Fork of https://www.shadertoy.com/view/lslXDf","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","example","simple","tutorial","triangle","glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://www.shadertoy.com/view/lslXDf\n// Hello triangle! The infamous GLSL triangle, using only a fragment shader\n// (so, without passing vertex geometry from the CPU to the GPU)\n\nvec3 dist_triangle(vec2 v0, vec2 v1, vec2 v2, vec2 uv) {\n    vec2 dvec01 = v1 - v0;  // Displacement-vector from vertex0 to vertex1\n    vec2 dvec02 = v2 - v0;  // Displacement-vector from vertex0 to vertex2\n    vec2 dvec0c = uv - v0;  // Displacement-vector from vertex0 to the current pixel!\n\n    float det_dvec01_dvec02 = dvec01.x * dvec02.y - dvec02.x * dvec01.y;  // Determinant of the 2 x 2 matrix made of row vectors dvec_01 and dvec_02\n\tfloat det_dvec0c_dvec02 = dvec0c.x * dvec02.y - dvec02.x * dvec0c.y;  // Determinant of the 2 x 2 matrix made of row vectors dvec_0c and dvec_02\n    float det_dvec01_dvec0c = dvec01.x * dvec0c.y - dvec0c.x * dvec01.y;  // Determinant of the 2 x 2 matrix made of row vectors dvec_01 and dvec_0c\n    float inv_det_dvec01_dvec02 = 1. / det_dvec01_dvec02;  // Multiplicative-inverse of a determinant\n\n    float mystery_v = det_dvec0c_dvec02 * inv_det_dvec01_dvec02;  // What is this?\n    float mystery_w = det_dvec01_dvec0c * inv_det_dvec01_dvec02;  // What is this?\n    float mystery_u = 1. - mystery_v - mystery_w;  // What is this?\n    vec3 mystery = abs(vec3(mystery_u, mystery_v, mystery_w));  // What is this?\n\n    return mystery;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;  // Map pixel coordinates from [1920;1080] x [1920;1080] to [-1;1] x [-1;1]\n\tuv.x *= iResolution.x / iResolution.y;  // Re-map x-coordinates!\n\n    vec2 triangle0_v0 = vec2(.0, .0);  // Vertex0 for triangle0, where a vertex is a position vector (or an affine point, I don't know!)\n    vec2 triangle0_v1 = vec2(.5, .0);  // Vertex1 for triangle1, where a vertex is a position vector (or an affine point, I don't know!)\n    vec2 triangle0_v2 = vec2(.0, .5);  // Vertex2 for triangle2, where a vertex is a position vector (or an affine point, I don't know!)\n\n    vec3 triangle0 = dist_triangle(triangle0_v0, triangle0_v1, triangle0_v2, uv);\n    if(triangle0.x + triangle0.y + triangle0.z > 1.){  // Is this the \"barycentric condition\", aka. the \"2-simplex condition\"?\n    \ttriangle0 = vec3(.1);  // Background!\n    }\n\n\tfragColor.rgb = vec3(triangle0);\n}\n","name":"Image","description":"","type":"image"}]}