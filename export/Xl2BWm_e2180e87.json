{"ver":"0.1","info":{"id":"Xl2BWm","date":"1516065732","viewed":139,"name":"14/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I tried some stuff with shading. Didn't quite succeed so only thing I have now is a cube and head ache. I will continue figuring things out tomorrow. :) ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cube","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 32\n#define FAR 60.0\n#define E 0.5/iResolution.x\n\nfloat box(vec3 p, vec3 r){\n    vec3 d = abs(p)-r;\n    //return length(max(d, vec3(0.0)) + max(min(d, vec3(0.0))));\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a){\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat dist(vec3 p){\n    pR(p.xz, iTime*0.2);\n    return box(p, vec3(1.0));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < STEPS; ++i){\n        float d = dist(p);\n        p += rd*d;\n        t += d;\n        \n        if(d < E || t >= FAR){\n            break;\n        }\n    }\n    return t;\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(E, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy)-dist(p-eps.xyy),\n        dist(p+eps.yxy)-dist(p-eps.yxy),\n        dist(p+eps.yyx)-dist(p-eps.yyx)\n    ));\n}\n\nvec3 shade(vec3 p, vec3 rd, vec3 ld){\n    vec3 n = normals(p);\n    float lambertian = max(dot(n, ld), 0.0);\n    float angle = max(dot(reflect(-ld, n), rd), 0.0);\n    float specular = pow(angle, 40.0);\n    \n    vec3 color = vec3(0.7, 0.6, 0.2)+\n        lambertian*vec3(0.2) +\n        specular*vec3(0.7, 0.6, 0.7);\n    return color;\n}\n\n//https://iquilezles.org/articles/fog\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.08);\n\tvec3  fogColor = mix(vec3(0.0), vec3(0.8, 0.7, 0.2), pow(sunAmount, 2.0));\n    return mix(col, fogColor, fogAmount);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(50.0)));\n    \n    vec3 ld = (rt-ro)/distance(rt,ro);\n    \n    float t = march(ro, rd);\n    vec3 p = ro+rd*t;\n    vec3 color = vec3(0.0);\n    \n    if(t < FAR){\n    \tcolor = shade(p, rd, ld);\n    }\n    color = fog(color, p, ro, rd, ld);\n    \n    color = pow(color, 1.0/vec3(2.2));\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}