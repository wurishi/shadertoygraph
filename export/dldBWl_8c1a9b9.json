{"ver":"0.1","info":{"id":"dldBWl","date":"1701734744","viewed":91,"name":"orthogonal circles flower sdf","username":"jt","description":"Exact SDF for [url=https://www.shadertoy.com/view/cltfW2]orthogonal circles flower[/url]\nwith circle segment endpoints equidistant on unit-circle.\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["sdf","flower","circle","distance","conformal","disk","loopless","exact","orthogonal"],"hasliked":0,"parentid":"cltfW2","parentname":"orthogonal circles flower"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dldBWl orthogonal circles flower sdf, 2023 jt\n// exact sdf for shape related to https://www.shadertoy.com/view/cltfW2 orthogonal circles flower\n// SDF exactness using https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors\n\n// Exact SDF for orthogonal circles flower\n// with circle segment endpoints equidistant on unit-circle.\n\n// tags: sdf, flower, circle, distance, conformal, disk, loopless, exact, orthogonal\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nfloat ortho_circle_flower_sdf(vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    int n = 11;\n\n    p.x = abs(p.x);\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x);\n/*\n    float r0 = floor(r);\n    float r1 = ceil(r);\n*/\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(1.0/float(n)*floor(float(n)*atan(r)/pi)*pi);\n    float r1 = tan(1.0/float(n)*ceil(float(n)*atan(r)/pi)*pi);\n\n    vec3 c0 = vec3(r0,-1,r0); // center and radius\n    vec3 c1 = vec3(r1,-1,r1); // center and radius\n\n    return min(min(abs(length(p-c0.xy)-c0.z),abs(length(p-c1.xy)-c1.z)),-(length(p)-1.0)); // nicer colors\n    return abs(min(min(abs(length(p-c0.xy)-c0.z),abs(length(p-c1.xy)-c1.z)),-(length(p)-1.0))); // correct exterior\n}\n\n#define map ortho_circle_flower_sdf\n\n#define EPSILON 0.001\n\n// part of sdf error detection (jt/spalmer)\nvec2 gradient(vec2 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec2(map(p+h.xy) - map(p-h.xy),\n                 map(p+h.yx) - map(p-h.yx)))/EPSILON/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    float d = map(p);\n\n    // iq's coloring\n    vec3 col = (d<0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n    col *= 1.0 + 0.2*cos(128.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    // iq's mouse distance visualization\n    if( iMouse.z>0.001 )\n    {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    // sdf error detection (jt/spalmer)\n    {\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the minimal distance to the surface,\n        // the result should be (close to) zero. (translation from math to words: jt)\n        float error = map(p - gradient(p) * map(p)); // SDF error detection suggested to me by spalmer - thanks!\n        //col += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.r += smoothstep(0.0,/*sqrt*/(EPSILON), max(0.0,+error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.g += smoothstep(0.0,/*sqrt*/(EPSILON), max(0.0,-error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n    }\n\n    // output\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}