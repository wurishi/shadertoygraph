{"ver":"0.1","info":{"id":"MfS3D1","date":"1704563587","viewed":34,"name":"Infinite rainbow octahedrons","username":"ReasonMaster","description":"my raymarching test yuh man","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t ) {\n    vec3 a = vec3(0.9, 0.6, 0.5);\n    vec3 b = vec3(0.7, 0.5, 0.);\n    vec3 c = vec3(1.0, 1.0, 0.5);\n    vec3 d = vec3(0.80, 0.90, 0.30);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nmat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p, float d)\n{\n    vec3 boxPos = vec3(cos(iTime) * 2., sin(iTime) * 2., 0);\n    float box = sdBox(p - boxPos, vec3(.4, .4, .4));\n    \n    vec3 spherePos = vec3(0, (cos(iTime * .8) * .8) + .5, 0);\n    float sphere = sdSphere(p - spherePos, .7);\n    \n    vec3 q = p;\n    \n    vec3 octaPos = vec3(0, 0, 0);\n    q.yx *= rot2D((-iTime) * ((d * .0001) + .1));\n    q = fract(q) - .5;\n    float octa = sdOctahedron(q - octaPos, .2);\n    \n    \n    //return smin(box, smin(octa, sphere, 1.), 1.);\n    return octa;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float d = length(uv);\n    float d0 = abs(d);\n    d0 = 0.8 / d;\n    vec3 col = vec3(1.0);\n    \n    vec3 ro = vec3(0, 0, iTime); // Ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // Ray direction\n    \n    float t = 0.; // Total distance travelled\n    \n    for (float i = 0.; i < d0 * 50.; i++)\n    {\n        vec3 p = ro + (rd * t); // Current position along the ray\n\n        float d = map(p, d);\n\n        t += d;\n        \n        if (d < .001 || t > 100.) break;\n    }\n    \n    if (t > 10.)\n    {\n        col = vec3(0.1);\n    } else\n    {\n        col = vec3(palette(d0 * t * .1));\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}