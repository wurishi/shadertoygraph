{"ver":"0.1","info":{"id":"Wl3cDf","date":"1609991840","viewed":120,"name":"experimental triple spiral thang","username":"HaleyHalcyon","description":"a","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979;\nconst mat4x3 colors = mat4x3(\n    1.0, 0.7, 0.9,\n    1.0, 0.5, 0.6,\n    0.3, 0.5, 0.7,\n    0.5, 0.6, 0.9\n);\n\n// xor-ish behavior for floats\nfloat flXor(float x, float y) {\n    return x + y - 2. * (x * y);\n}\n\n// folds 0>1>2>3>4... to 0>1<0>1<0...\nfloat fold(float x) {\n    return abs(1. - mod(x, 2.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    float lenSq = log(length(uv));\n    float lenAdd = -0.2;\n    // logx/dx = 1/x\n    float blur = 4.0 / max(0.1, length(uvR));\n    float angle = atan(uv.y, uv.x) / PI;\n    \n    float timeScale = iTime * PI * 0.125;\n    \n    float spiral1 = smoothstep(0.5 - blur, 0.5 + blur, fold(\n         (lenSq + lenAdd) * 0.8\n       + angle * 2.\n       - iTime\n    ));\n       \n    float spiral2 = smoothstep(0.5 - blur, 0.5 + blur, fold(\n         (lenSq + lenAdd) * 1.0\n       - angle * 3.\n       - iTime\n    ));\n    vec3 colA = mix(colors[0], colors[1], vec3(flXor(spiral1, spiral2)));\n\n    \n    float spiral3 = smoothstep(0.2 - blur, 0.2 + blur, fold(\n         (lenSq + lenAdd) * 0.7\n       + angle * 5.\n       - iTime\n    ));\n       \n    float spiral4 = smoothstep(0.3 - blur, 0.3 + blur, fold(\n         (lenSq + lenAdd) * 1.4\n       - angle * 1.\n       - iTime\n    ));\n    vec3 colB = mix(colors[2], colors[3], vec3(spiral3 * spiral4));\n    \n    float which = smoothstep(0.5 - blur * 0.5, 0.5 + blur * 0.5, fold(\n        lenSq * (1.0 + 0.5 * sin(timeScale))\n      - angle\n      + iTime * 0.8\n    ));\n    \n    vec3 col = mix(colA, colB, which);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}