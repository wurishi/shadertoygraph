{"ver":"0.1","info":{"id":"XfSXWD","date":"1706312174","viewed":104,"name":"seafoam","username":"sepia_sempervirens","description":"Two scrolling octaves of Perlin noise and an oscillating threshold (with some extra camera movement on top).","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["2d","noise","perlinnoise"],"hasliked":0,"parentid":"XcSSWD","parentname":"perlin noise from texture"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float THRESHOLD = 0.04;\nconst float OSCILLATION_AMP = 0.055;\nconst float OSCILLATION_FREQ = 1.0;\nconst vec2 LO_VEL = vec2(0.001, 0.002);\nconst float LO_AMP = 1.;\nconst float LO_FREQ = 0.015;\nconst vec2 HI_VEL = vec2(0.004, -0.003);\nconst float HI_AMP = 0.2;\nconst float HI_FREQ = 0.03;\nconst vec2 PAN_RAD = vec2(0.5, 0.2);\nconst float PAN_FREQ = 0.3;\n\nconst vec4 FOAM_COLOR  = vec4(0.839, 0.957, 0.961, 1);\nconst vec4 WATER_COLOR = vec4(0.180, 0.612, 0.690, 1);\n\n///////////////\n\nconst float TAU = 6.283185307179586476925;\nconst float TEXTURE_SIZE = 256.;\n\nfloat interpolateSquare( mat2 vals, vec2 weight ) {\n    vec2 linearWeight = vec2(\n        smoothstep(0., 1., weight.x),\n        smoothstep(0., 1., weight.y)\n    );\n    float left  = mix(vals[0][0], vals[1][0], linearWeight.y);\n    float right = mix(vals[0][1], vals[1][1], linearWeight.y);\n    return mix(left, right, linearWeight.x);\n}\n\nfloat gradientDotAt( vec2 latticePoint, vec2 offset )\n{\n    latticePoint = mod(latticePoint, TEXTURE_SIZE);\n    float gradientAngle = texelFetch(iChannel0, ivec2(latticePoint), 0).r * TAU;\n    vec2 gradient = vec2(cos(gradientAngle), sin(gradientAngle));\n    return dot(gradient, offset);\n}\n\nfloat noiseAt( vec2 uv ) {\n    uv *= TEXTURE_SIZE;\n\n    vec2 latticePoint = floor(uv);\n    vec2 offset = fract(uv);\n    mat2 dots;\n    for (int x = 0; x < 2; x++) {\n        for (int y = 0; y < 2; y++) { \n            vec2 which = vec2(x, y);\n            dots[y][x] = gradientDotAt(latticePoint + which, offset - which);\n        }\n    }\n    \n    return interpolateSquare( dots, offset );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / min(iResolution.x, iResolution.y);\n    uv += PAN_RAD * vec2(\n        sin(iTime * PAN_FREQ),\n        cos(iTime * PAN_FREQ)\n    );\n    vec2 uvLo = LO_FREQ * uv + LO_VEL * iTime;\n    vec2 uvHi = HI_FREQ * uv + HI_VEL * iTime;\n    \n    float value = LO_AMP * noiseAt(uvLo) + HI_AMP * noiseAt(uvHi);\n    value += cos(iTime * OSCILLATION_FREQ) * OSCILLATION_AMP;\n    fragColor = abs(value) < THRESHOLD ? FOAM_COLOR : WATER_COLOR;\n}","name":"Image","description":"","type":"image"}]}