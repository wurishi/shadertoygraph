{"ver":"0.1","info":{"id":"4t2XRG","date":"1444642803","viewed":155,"name":"Surface Implicite Draz","username":"Drazatlam","description":"Surface Implicite Draz","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["surfaceimplicite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// Blobs\n// Eric Galin\nconst int Steps = 1000;\nconst float Epsilon = 0.05; // Marching epsilon\nconst float T=0.5;\n\nconst float rA=10.0; // Maximum ray marching or sphere tracing distance from origin\nconst float rB=40.0; // Minimum\n\n// Transforms\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.y, -sa*p.x + ca*p.y, p.z);\n}\n\n\n// Smooth falloff function\n// r : small radius\n// R : Large radius\nfloat falloff( float r, float R )\n{\n  float x = clamp(r/R,0.0,1.0);\n  float y = (1.0-x*x);\n  return y*y*y;\n}\n\n// Distance\n\nfloat distLine(vec3 p, vec3 a, vec3 b){\n\tvec3 ab =b-a;\n    float scal=dot(p-a,ab);\n    \n    if(scal<0.0)\n        return length(p-a);\n    \n    if(scal>dot(ab,ab))\n        return length(p-b);\n    \n    vec3 projp=a+(scal/dot(ab,ab))*ab;\n    return length(p-projp);\n}\n\nfloat distCircle(vec3 p, vec3 c, vec3 n, float r){\n    n= normalize(n);\n    vec3 cp=p-c;\n    float scal = dot(cp,n);\n    float dicarre=dot(cp,cp)-scal*scal;\n    float dist=abs(sqrt(dicarre)-r);\n    return sqrt(dist*dist+scal*scal);\n}\nfloat distDisk(vec3 p, vec3 c, vec3 n, float r){\n    n= normalize(n);\n    vec3 cp=p-c;\n    float scal = dot(cp,n);\n    float dicarre=dot(cp,cp)-scal*scal;\n    float dist=max(sqrt(dicarre)-r,0.0);\n    return sqrt(dist*dist+scal*scal);\n}\n\nfloat distCylindre(in vec3 p,in vec3 a, in vec3 b, in float rayon)\n{\n    vec3 u = normalize(b-a);\n    float ha = dot((p-a),u);\n    float hb = dot((p-b),u);\n    \n   \n    if(ha < 0.0)\n   \t\treturn  distDisk(p, a, b-a, rayon);\n    if(hb > 0.0)\n        return  distDisk(p, b, b-a, rayon);\n  \n    return max(distLine(p,a,b)-rayon,0.0);\n}\n\nfloat distSphere(in vec3 p,in vec3 c, in float rayon)\n{\n    return abs(length(p-c)-rayon);\n}\n\n\n\nfloat distCube(in vec3 p,in vec3 a, in vec3 b)\n{\n    float d = 0.0;\n    \n    if(p.x < a.x)\n        d+=(a.x-p.x)*(a.x-p.x);\n    else if(p.x > b.x)\n        d+=(b.x-p.x)*(b.x-p.x);\n        else\n            d+=0.0;\n        \n    if(p.y < a.y)\n        d+=(a.y-p.y)*(a.y-p.y);\n    else if(p.y > b.y)\n        d+=(b.y-p.y)*(b.y-p.y);\n        else\n            d+=0.0;\n        \n    if(p.z < a.z)\n        d+=(a.z-p.z)*(a.z-p.z);\n    else if(p.z > b.z)\n        d+=(b.z-p.z)*(b.z-p.z);\n        else\n            d+=0.0;\n        \n        \n    return sqrt(d);\n}\n\n// Primitive functions\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : large radius\nfloat point(vec3 p, vec3 c, float e,float R)\n{\n  return e*falloff(length(p-c),R);\n}\n\n// Line skeleton\n// p : point\n// a : \n// b : \n// e : energy associated to skeleton\n// R : large radius\nfloat line(vec3 p, vec3 a, vec3 b, float e,float R)\n{\n  return e*falloff(distLine(p,a,b),R);\n}\n\n// Circle skeleton\n// p : point\n// c : center of circle\n// n : norm of circle\n// rad : radius of circle\n// e : energy associated to skeleton\n// R : large radius\nfloat circle(vec3 p, vec3 c, vec3 n,float rad, float e,float R)\n{\n  return e*falloff(distCircle(p,c,n,rad),R);\n}\n\n// Disk skeleton\n// p : point\n// c : center of Disk\n// n : norm of Disk\n// rad : radius of Disk\n// e : energy associated to skeleton\n// R : large radius\nfloat disk(vec3 p, vec3 c, vec3 n,float rad, float e,float R)\n{\n  return e*falloff(distDisk(p,c,n,rad),R);\n}\n\nfloat cylindre(in vec3 p,in vec3 a, in vec3 b, float rayon, float e,float R)\n{\n    return e*falloff(distCylindre(p,a,b, rayon) ,R);\n}\n\nfloat sphere(in vec3 p,in vec3 c, float rayon, float e,float R)\n{\n    return e*falloff(distSphere(p,c, rayon) ,R);\n}\n\nfloat cube(in vec3 p,in vec3 a, in vec3 b, float e,float R)\n{\n    return e*falloff(distCube(p,a,b) ,R);\n}\n\n\n\n// Blending\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Blend(float a,float b)\n{\n    return a+b;\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n    return max(a,b);\n}\n\n// Intersection\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Intersection(float a,float b)\n{\n    return min(a,b);\n}\n\n// Difference\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Difference(float a,float b)\n{\n    return min(a,2.0*T-b);\n}\n\nfloat colonne(in vec3 p,in vec3 a, float h,float r1, float r2, float e,float R){\n    float resu=0.0;\n    float i=0.0;\n    float fit = 5.0;\n    for(int j=0;j<5;j++){\n        vec3 pos1=a+(vec3(0.0,h,0.0)/fit*(i+0.3));\n        vec3 pos2=a+(vec3(0.0,h,0.0)/fit*(i+1.0));\n        resu=Union(resu,cylindre(p,pos1,pos2,r1+(r2-r1)/fit*i,e,R));\n    \ti+=1.0;\n    }\n    \n    return resu;\n}\n\nfloat colonneCube(in vec3 p,in vec3 a, float h,float r1, float r2, float e,float R){\n    float resu=0.0;\n    float i=0.0;\n    float fit = 4.0;\n    for(int j=0;j<4;j++){\n        float largeur=r1+(r2-r1)/fit*i;\n        vec3 pos1=a+(vec3(0.0,h,0.0)/fit*(i+0.3))-vec3(largeur/2.0,0.0,largeur/2.0);\n        vec3 pos2=a+(vec3(0.0,h,0.0)/fit*(i+1.0))+vec3(largeur/2.0,0.0,largeur/2.0);\n        resu=Blend(resu,cube(p,pos1,pos2,e,R));\n    \ti+=1.0;\n    }\n    \n    return resu;\n}\n\nfloat colonneSocle(in vec3 p,in vec3 a, float h,float r, float e,float R){\n    float resu=cube(p,a-vec3(r/2.0,0.0,r/2.0),a+vec3(r/2.0,0.05*h,r/2.0),e,R);\n    resu=Union(resu,cube(p,a-vec3(r/2.0,-0.95*h,r/2.0),a+vec3(r/2.0,h,r/2.0),e,R));\n    resu=Union(resu,colonne(p,a+vec3(0.0,0.05*h,0.0),0.9*h,r*0.4,0.6*r*0.4,e,1.0));\n    return resu;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  p.z=-p.z;\n  /*float v = Blend(point(p,vec3( 0.0, 1.0, 1.0),1.0,4.5),\n                  point(p,vec3( 2.0, 0.0,-3.0),1.0,4.5));\n\n  v=Blend(v,point(p,vec3(-3.0, 2.0,-3.0),1.0,4.5));\n  v=Difference(v,point(p,vec3(-1.0, -1.0, 0.0),1.0,4.5));*/\n  //float v= line(p,vec3( 0.0, 1.0, 1.0),vec3( 2.0, 0.0,-3.0),1.0,4.5);\n  //v=Difference(v,point(p,vec3(-1.0, -1.0, 0.0),1.0,4.5));\n    \n  //float v= point(p,vec3( 0.0, 1.0, 1.0),1.0,4.0);\n  //v=Intersection(v,cube(p,vec3(0.0,0.0,0.0),vec3(3.0,3.0,3.0),1.0,4.5));\n    float v=0.0;\n    float fi=0.0;\n    for(int i=0; i<1; i++){\n       \n        v=Union(v,colonneSocle(p,vec3(-5.0+3.0*fi,-4.0,0.0),8.0,1.0,1.0,1.0));\n        fi+=1.0;\n    }\n  \n  return v-T;\n}\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.0001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o, vec3 u, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += Epsilon;\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,abs(v)/4.0);\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(0.4, 0.3, 0.0), vec3(0.7, 0.8, 1.0), rd.y*0.5+0.5);\n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n  // point light\n  const vec3 lightPos = vec3(5.0, 5.0, 5.0);\n  const vec3 lightColor = vec3(0.5, 0.5, 0.5);\n\n  vec3 c = 0.25*background(n);\n  vec3 l = normalize(lightPos - p);\n\n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff = 0.5*(1.0+dot(n, l));\n\n  c += diff*lightColor;\n\n  return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return vec3(t,0.25+0.75*t,0.5-0.5*t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pixel = (gl_FragCoord.xy / iResolution.xy)*2.0-1.0;\n\n  // compute ray origin and direction\n  float asp = iResolution.x / iResolution.y;\n  vec3 rd = normalize(vec3(asp*pixel.x, pixel.y, -4.0));\n  vec3 ro = vec3(0.0, 0.0, 20.0);\n\n  // vec2 mouse = iMouse.xy / iResolution.xy;\n  float a=iTime*0.25;\n  ro = rotateY(ro, a);\n  rd = rotateY(rd, a);\n\n  // Trace ray\n  bool hit;\n\n  // Number of steps\n  int s;\n\n  float t = SphereTrace(ro, rd, hit,s);\n  vec3 pos=ro+t*rd;\n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pos);\n\n    // Shade object with light\n    rgb = Shade(pos, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  //rgb = ShadeSteps(s);\n\n  fragColor=vec4(rgb, 1.0);\n}\n\n","name":"","description":"","type":"image"}]}