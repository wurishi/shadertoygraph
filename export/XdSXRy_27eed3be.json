{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define Thickness 0.003\n#define SampleRadius 0.1\n#define SampleZoom 2.5\n\nvec4 render(vec2 uv)\n{\n    uv = uv / iResolution.xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 drawLine(vec2 p1, vec2 p2, vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n\n  float a = abs(distance(p1, uv));\n  float b = abs(distance(p2, uv));\n  float c = abs(distance(p1, p2));\n\n  if ( a >= c || b >=  c ) return vec4(0.0, 0.0, 0.0, 1.0);\n\n  float p = (a + b + c) * 0.5;\n\n  // median to (p1, p2) vector\n  float h = 2.0 / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n\n  return mix(1.0, 0.0, smoothstep(0.5 * Thickness, 1.5 * Thickness, h)) * vec4(1.0, 1.0, 1.0, 1.0);\n}\n\nvec4 drawCircle(vec2 p, float radius,vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 a = (uv - p);\n    float distance = sqrt(dot(a, a));\n    float h = abs(radius - distance);\n    \n    return mix(1.0, 0.0, smoothstep(0.5 * Thickness, 1.5 * Thickness, h)) * vec4(1.0, 1.0, 1.0, 1.0);\n}\n\nvec4 drawSampler(vec2 p, float sampleRadius, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float zoomSize = sampleRadius * SampleZoom;\n    float sampleLineOffset = sampleRadius / sqrt(2.0);\n    \n    float zoomOutputOffset = (zoomSize + sampleRadius + 0.01);\n    vec2 zoomOutputCenter = p - vec2(zoomOutputOffset, 0);\n    \n    vec2 sampleOutputPos = zoomOutputCenter - uv;\n    float sampleOutputDist = length(sampleOutputPos);\n    vec4 result;\n    if (sampleOutputDist < zoomSize)\n    {\n        vec2 samplePos = (p - (sampleOutputPos / SampleZoom)) * iResolution.xy;\n        result = render(samplePos);\n    }\n    else\n    {\n        float diffSize = (zoomSize - sampleRadius);\n        float theta = asin(diffSize / zoomOutputOffset);\n        vec2 norm = vec2(sin(theta), cos(theta));\n\n        result = drawCircle(p, sampleRadius,fragCoord);\n        result = max(result, drawCircle(zoomOutputCenter, zoomSize,fragCoord));\n        result = max(result, drawLine(p + norm * sampleRadius, zoomOutputCenter + norm * zoomSize,fragCoord));\n        norm.y = -norm.y;\n        result = max(result, drawLine(p + norm * sampleRadius, zoomOutputCenter + norm * zoomSize,fragCoord));\n        result = max(result, render(fragCoord.xy));\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy;\n    if (mouse.x == 0.0 && mouse.y == 0.0)\n    {\n        mouse = vec2(0.6, 0.5);\n    }\n    else\n    {\n    \tmouse = mouse / iResolution.xy;\n    }\n    \n\tfragColor = drawSampler(mouse, SampleRadius,fragCoord);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdSXRy","date":"1413033937","viewed":316,"name":"Mouse zoom","username":"esqmo","description":"Shows a portion of the image with a zoom. Click and hold the mouse to move the zoomed section around the image.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mousezoom"],"hasliked":0,"parentid":"","parentname":""}}