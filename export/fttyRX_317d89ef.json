{"ver":"0.1","info":{"id":"fttyRX","date":"1660231834","viewed":74,"name":"Mandelbrot spinning","username":"starorpheus","description":"A spinning mandelbrot fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERATIONS 64\n#define PI 3.1415926538\n\nvec2 complexMultiply(vec2 a, vec2 b) {\n  return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 complexAdd(vec2 a, vec2 b) {\n  return vec2(a.x + b.x, a.y + b.y);\n}\n\nfloat complexAbs(vec2 x) {\n  return x.x * x.x + x.y * x.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) * 0.002;\n    \n    uv = vec2(uv.x * cos(iTime) - uv.y * sin(iTime), uv.x * sin(iTime) + uv.y * cos(iTime));\n\n    int iterations = 0;\n    vec2 z;\n    z = vec2(0, 0);\n    while (iterations < MAX_ITERATIONS)\n    {  \n      z = complexMultiply(z, z);\n      z = complexAdd(z, uv);\n      if (complexAbs(z) > 4.0)\n        break;\n    \n      iterations++;\n    }\n    \n    if (iterations == MAX_ITERATIONS) {\n      fragColor = vec4(0., 0., 0., 1.);\n    } else {\n      float p = float(iterations) / float(MAX_ITERATIONS);\n      fragColor = vec4(p * 0.5, p * 0.7, p * 0.3, 0.1);\n    }\n}\n","name":"Image","description":"","type":"image"}]}