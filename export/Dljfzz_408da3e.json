{"ver":"0.1","info":{"id":"Dljfzz","date":"1693930388","viewed":43,"name":"Vesica SDF","username":"TheTurk","description":"Distance function for a vesica piscis, a special case of a lens ([url]https://www.shadertoy.com/view/XtVfRW[/url]). ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","lens","circle","distance","disk","arc","rounded","primitive","lemon","vesica","piscis","almond"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float vesica(vec2 position, float halfWidth, float cornerRadius) {\n    halfWidth -= cornerRadius;\n    position = abs(position);\n    if (position.x + halfWidth < position.y * 1.0 / sqrt(3.0)) {\n        return length(position - vec2(0.0, sqrt(3.0) * halfWidth)) - cornerRadius;\n    }\n    return length(position - vec2(-halfWidth, 0.0)) - 2.0 * halfWidth - cornerRadius;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float halfWidth = 0.4;\n    float cornerRadius = (cos(iTime) + 1.0) * 0.5 * halfWidth;\n    float d = vesica(position, halfWidth, cornerRadius);\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.002) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = vesica(mousePosition, halfWidth, cornerRadius);\n\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}