{"ver":"0.1","info":{"id":"llXXDr","date":"1435814553","viewed":293,"name":"voronoi demo","username":"aji","description":"cycles between euclidean, chebyshev, and taxicab distance. we compute the distances d1 and d2 to the nearest and second-nearest point respectively. the red dots are where d1 < 0.04. the blue lines are where the difference between d1 and d2 is < 0.04.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float pnoise(float x) {\n\tx = x / 500.0 + 300.0;\n\treturn (sin(x * 4271.0) * 0.25 +\n\t        sin(x *  337.0) * 0.25 +\n\t        sin(x *  863.0) * 0.25 +\n\t        sin(x * 1913.0) * 0.25)\n\t       * 0.5 + 0.5;\n}\n\nfloat ease(float a, float b, float p) {\n\tp = clamp(p, 0.0, 1.0);\n\treturn mix(a, b, 3.0*p*p - 2.0*p*p*p);\n}\n\nfloat vdist(vec2 a, vec2 b) {\n    float t = mod(iTime, 6.0) / 6.0;\n    a = abs(a - b);\n    if (t < 0.33) {\n        return length(a); // euclidean\n    } else if (t < 0.67) {\n        return max(a.x, a.y); // chebyshev\n    } else {\n        return a.x + a.y; // taxicab\n    }\n}\n\nvec2 vnoise(ivec2 c, float t) {\n\tfloat i = float(c.x * 991 + c.y * 2693);\n\treturn vec2(pnoise(2.0 * i + 1.0 * t),\n\t            pnoise(3.0 * i + 0.9 * t));\n}\n\nvoid voronoi(vec2 v, float t, out float res, out float pres) {\n\tivec2 test, c = ivec2(floor(v));\n\tfloat d;\n\n\tpres = 2.0;\n\tres = 2.0;\n\n\tfor (int i=-3; i<=3; i++) {\n\t\tfor (int j=-3; j<=3; j++) {\n\t\t\ttest = c + ivec2(i, j);\n\t\t\td = vdist(vec2(test) + vnoise(test, t), v);\n\t\t\tif (d < res) {\n\t\t\t\tpres = res;\n\t\t\t\tres = d;\n\t\t\t} else if (d < pres) {\n\t\t\t\tpres = d;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tvec2 px = 1.0 / iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n\tfloat t = iTime / 2.0;\n\tfloat d1, d2;\n\tvoronoi(uv * 4.0, t, d1, d2);\n\tif (d1 < 0.04) {\n\t\tfragColor.rgb = vec3(1.0, 0.0, 0.0);\n\t} else if (d2 - d1 < 0.04) {\n\t\tfragColor.rgb = vec3(0.0, 0.0, 1.0);\n\t} else {\n        fragColor.rgb = vec3(d2 - d1) / 2.0;\n\t}\n}\n\n","name":"","description":"","type":"image"}]}