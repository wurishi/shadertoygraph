{"ver":"0.1","info":{"id":"MfjGD1","date":"1704203398","viewed":62,"name":"TutorialbyEthan","username":"NinZargo","description":"following tutorial","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","fun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.718, 0.500, 0.500);\n    vec3 b = vec3(0.498, 0.318, 0.700);\n    vec3 c = vec3(0.568, 1.118, 1.000);\n    vec3 d = vec3(-2.042, 0.333, 0.667);\n    \n    return a +b*cos(6.28318*(c*t*d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Setup\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y; // Normalized pixel coordinates regardless of aspect(from 0 to 1)\n    \n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.);\n    \n    for(float i = 0.0; i < 1.0; i+=0.5){\n        float bounceValue = sin(iTime * 0.3); // Using sin for oscillation between -1 and 1\n        bounceValue = bounceValue * 0.5 + 0.5; // Scale and shift to fit between 0 and 1\n        bounceValue *= 3.0;\n    \n        uv = fract(uv *bounceValue) - 0.5;\n    \n        // Shader Creation\n        float d = length(uv) *exp(-length(uv0));\n    \n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n    \n        d = sin(d*7.0 + iTime)/4.0; // Diameter of circle\n        d = abs(d);\n    \n        d = pow(0.02/d, 1.8);\n    \n        finalColor += col * d;\n    }\n    \n    \n\n    fragColor = vec4(finalColor, 1.0); // x, y, z, alpha\n    \n}\n\n","name":"Image","description":"","type":"image"}]}