{"ver":"0.1","info":{"id":"ctXSzN","date":"1674344540","viewed":163,"name":"Crystal's Apollonian Method 2","username":"Crystalize","description":"Updated version of the Kleinian method I posted yesterday, where we can now control the p-q values! :D","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["kleinian","2","apollonian","crystal","method"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 6.283185307179586476\n#define PI 3.141592653589793238\n\n#define P 6.\n#define Q 4.\n#define iters 1000\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\nvec2 crystalsMethod2(vec2 z, float p, float q) {\n    float scalar = 0.5;//fix me!\n    p = cos(PI/p);\n    q = cos(PI/q);\n    \n    \n    z = cdiv(vec2(1.0,0.0), z);\n    z *= scalar;\n    for(int i = 0; i < iters; i++) {\n        z.x = abs(z.x);\n        z = -z + vec2(0.0,p);\n        z = i%2==0 ? cdiv(vec2(1.0,0.0),-z-vec2(q,0.0)) : -z - vec2(q, 0.0);\n    }\n\n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2. * (fragCoord.xy - 0.5*iResolution.xy)/-iResolution.y;\n\n    uv = crystalsMethod2(uv, P, Q);\n\n    vec3 col = texture(iChannel0, uv * 2. + iTime * 0.01).rgb;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}