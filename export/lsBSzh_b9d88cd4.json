{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define POS0 vec4(10.0, 30.0, 10.0, 2.0)\n#define FREQ vec4(1.0, 0.8, 0.7, 1.0)\n \n#define NCOLS 4.0\n\n#define BLACK_COLOR vec4(0.0,0.0,0.0,1.0)\n\n#define COLOR1 vec4(0.0,1.0,0.0,1.0)\n#define COLOR2 vec4(0.0,0.0,1.0,1.0)\n#define COLOR3 vec4(0.0,0.8,0.0,1.0)\n#define COLOR4 vec4(0.0,0.0,0.8,1.0)\n\n#define WHITE_COLOR vec4(1.0,1.0,1.0,1.0)\n \n  //hash value \n float hash(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\tfloat screenSize = iResolution.y;\n    float xmin = (iResolution.x - iResolution.y)/2.0;\n    float xmax = iResolution.x - xmin;\n    \n\tfloat patterWidth = screenSize / NCOLS;\n    \n\tfloat nRows = NCOLS;\n\tfloat patterHeight = patterWidth;\n    \n    if (fragCoord.x < xmin || fragCoord.x > xmax) {\n        fragColor = WHITE_COLOR;\n        return;\n    }\n\t\n\tvec2 pixPosition = vec2(fragCoord.x - xmin, fragCoord.y);\n\t \n\tint iCol = int((pixPosition.x) / patterWidth);\n\tint iRow = int(pixPosition.y / patterHeight);\n\t\n\tvec2 coord = vec2(float(iCol),float(iRow));\n\t\n\tfloat i = float(iCol) + (float(iRow) * NCOLS);\n    \n    //no global pattern\n\tfloat si = hash(vec2(float(iCol+1),float(iRow+1)));\n    vec4 timePattern = POS0 * si + iTime;\n    \n    \n\t//float si = (1.0 + sin(i) + cos(2.0*i)) / 3.0;\n \t//float si = 0.5;\n\t//float si = i / (nRows * NCOLS);\n    //float si = degrees(acos((coord.x-center.x)/ distance(center,coord))) / 180.0;\n\t\n\t\n    //global pattern\n        /*\n\tvec2 center = vec2(NCOLS/2.0, nRows / 2.0);\n\tfloat si =   distance(center,coord) / distance(center,vec2(0.0,0.0));\n\t\n\t//cyclic time, eg. time goes forward then backward \n\tfloat si2 = (si + (0.05*sin(0.2*iTime))) / 1.05;\n    vec4 timePattern = POS0 * si + (iTime * (FREQ * si2 + 1.5));\n\t*/\n\t  \n\tvec4 pattern_cell_pos = vec4(float(iCol) , (float(iRow)), float(iRow)+0.5, (float(iCol) + 0.5));\n  \n\tvec4 patternSize = vec4(patterWidth, patterHeight, patterHeight, patterWidth);\n\t  \n\tvec4 movingEdge = (pattern_cell_pos * patternSize) + ((patternSize / 4.0) * (1.0 + sin(timePattern)));\n\t\n\tfloat ym = patterHeight * (float(iRow) + 0.5);\n\tfloat xm = patterWidth * (float(iCol) + 0.5);\n\t\n    //changing color throw time\n\t//vec4 cc = vec4(0.6,0.8,0.9,0.0);\n\t// vec4 color = (1.0 + sin(cc * iTime)) / 2.0;\n \n    vec4 color = BLACK_COLOR;\n\t\n\tvec4 color1 = color;\n\tvec4 color2 = color1;\n\tvec4 color3 = color1;\n\tvec4 color4 = color1;\n\t\n    //multiple colors\n\t/*\n\tvec4 color1 = COLOR1;\n\tvec4 color2 = COLOR2;\n\tvec4 color3 = COLOR3;\n\tvec4 color4 = COLOR4;\n\t*/\n\t\n\tif (pixPosition.x < movingEdge.x && pixPosition.y > ym ){\n\t\tfragColor = color1;\n\t} else if (pixPosition.y < movingEdge.y  && pixPosition.x < xm ){\n\t\tfragColor = color2;\n\t} else if (pixPosition.x > movingEdge.w && pixPosition.y < ym){\n\t\tfragColor = color3;\n\t} else if (pixPosition.y > movingEdge.z && pixPosition.x > xm){\n\t\tfragColor = color4;\n\t} else {\n\t\tfragColor = WHITE_COLOR;\n\t}\n\t \n}\n \n\n ","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBSzh","date":"1408774434","viewed":187,"name":"vilder-square2","username":"amaurel","description":"moving square","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["square","vilder"],"hasliked":0,"parentid":"","parentname":""}}