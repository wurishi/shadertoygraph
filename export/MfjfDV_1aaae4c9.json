{"ver":"0.1","info":{"id":"MfjfDV","date":"1725545043","viewed":109,"name":"transparent voxels front to back","username":"jt","description":"Visualization of transparent voxels: Find intersection of ray with bounding box, then traverse voxels front-to-back with compositing.\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","transparency","raycasting","voxel","volumetric","transparent","blending","compositing","dda","opaque","opacity","fronttoback"],"hasliked":0,"parentid":"4cjyWz","parentname":"transparent voxels painters algo"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MfjfDV transparent voxels front to back, 2024 by jt\n// forward direction of https://www.shadertoy.com/view/4cjyWz transparent voxels painters algorithm\n// based on https://www.shadertoy.com/view/7stXzn Voxel Raycast with Sub-Objects\n\n// Visualization of transparent voxels:\n// Find intersection of ray with bounding box,\n// then traverse voxels front-to-back with compositing.\n\n// Thanks to spalmer and FordPerfect for providing a transparency solution!\n\n// tags: raytracing, raycasting, voxel, volumetric, transparent, transparency, dda, opaque, opacity, fronttoback, blending, compositing\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n// based on https://iquilezles.org/articles/intersectors/\nvec2 box_intersection(vec3 ro, vec3 rd, vec3 s)\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*s;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.0) return vec2(DIST_MAX); // no intersection\n    return vec2(tN, tF);\n}\n\nfloat sdSphere(vec3 p, float d)\n{\n    return length(p) - d;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n/*\nvec4 get_voxel(ivec3 c)\n{\n    vec3 p = vec3(c) + vec3(0.5);\n    float d = max(-sdSphere(p, 7.5), sdBox(p, vec3(6.0)));\n    return d < 0.0 ? vec4(1,0,0,1) : vec4(0);\n}\n*/\nvec4 get_voxel(ivec3 c)\n{\n    vec3 p = vec3(c) + vec3(0.5);\n    if(p.z < -5.0) return vec4(1);\n    float d = sdSphere(p, 5.5);\n    float t = p.z - iTime;\n    return d < 0.0 ? vec4(0.5+0.5*cos(t),0.5+0.5*sin(t),0,.5) : vec4(0);\n}\n\n#define MAX_RAY_STEPS 64\n\nvec4 traverse(vec3 ray_pos, vec3 ray_dir) // returns color and opacity\n{\n    // NOTE: Treating last component as transparency or \"intensity\" (1)\n    //       rather than as opacity (0) simplifies compositing!\n    vec4 current = vec4(0,0,0,0);\n    //vec4 current = vec4(0,0,0,1); // last component is remaining ray \"intensity\"\n\n    // bounding box\n    vec2 bounds = box_intersection(ray_pos, ray_dir, vec3(6));\n    if(bounds.x >= DIST_MAX) return current;\n\n    // dda initialization (four lines) adapted from\n    // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n    // implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 voxel_pos = ivec3(floor(ray_pos)); // round down position to get tile position\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    vec3 side_dist = (sign(ray_dir) * (vec3(voxel_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0);\n\n    for(int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // dda core (three lines) adapted from\n        // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n        // implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 nearest_next = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        vec3 side_dist_next = side_dist + vec3(nearest_next) * delta_dist; // sign of ray direction\n        ivec3 voxel_pos_next = voxel_pos + ivec3(vec3(nearest_next)) * ray_step; // step to next vpxel in direction of nearest wall\n\n        float enter_dist = length(vec3(nearest) * (side_dist - delta_dist));\n        //if(enter_dist > bounds.x) break; // leave loop early if outside bounding box\n\n        vec4 next = get_voxel(voxel_pos);\n        if(next.w > 0.0)\n        {\n            float leave_dist = length(vec3(nearest_next) * (side_dist_next - delta_dist));\n            if(leave_dist >= bounds.y+0.001/*epsilon*/) break; // leave loop early if outside bounding box\n            float dist = leave_dist - enter_dist; // length of ray-traversal through cube\n            dist /= sqrt(3.0); // normalize: traversal along long diagonal -> full opacity\n\n/*\n            if(cos(iTime*tau/2.0) < 0.0)\n            {\n                //current = vec4(dist);\n                current = mix(current, next, current.w);\n                //current.xyz = mix(current.xyz, next.xyz, current.w);\n                current.w = current.w*(1.0-next.w);\n            }\n            else\n            { // thanks to spalmer for this transparency solution!\n                current.xyz = mix(next.xyz, current.xyz, exp(-next.w * dist * current.w)); // a bit dimmer and more transparent than the painter's algorithm reference\n                //current.xyz = mix(next.xyz, current.xyz, pow(exp(-next.w * dist), current.w));\n                //current.xyz = mix(next.xyz, current.xyz, exp(-dist * current.w)); // increases brightness and density - but a bit beyond the painter's algorithm reference\n                current.w *= exp(-next.w * dist);\n            }\n*/\n            // suggested by FordPerfect (assuming premultiplied alpha and init current = 0)\n            if(cos(iTime*tau/2.0) < 0.0)\n            {\n                current+=(1.0-current.w)*next*next.a;\n                //current+=(1.0-current.w)*next; // assuming premultiplied alpha\n            }\n            else\n            { // thanks to FordPerfect\n                current+=(1.0-current.w)*vec4(next.xyz,1)*(1.0-exp(-dist*next.w)); // assuming premultiplied alpha\n            }\n        }\n\n        nearest = nearest_next;\n        side_dist = side_dist_next;\n        voxel_pos = voxel_pos_next;\n    }\n\n    //return vec4(current.xyz,1); // opaque\n    return vec4(current.xyz,1.0-current.w); // convert transparency back to opacity\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    //float pitch = -pi*1.0 - 0.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.5 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -20.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    ray_dir = normalize(ray_dir); // normalize to facilitate later lighting computations\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    vec4 color = traverse(ray_pos, ray_dir);\n\n    color.xyz = tanh(color.xyz); // roll-off / soft-clamp overly bright colors\n    color.xyz = sqrt(color.xyz); // approximate gamma\n    //o = vec4(color.xyz, color.w);\n    o = vec4(color.xyz, 1);\n}\n","name":"Image","description":"","type":"image"}]}