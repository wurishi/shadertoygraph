{"ver":"0.1","info":{"id":"XfV3Rm","date":"1712563297","viewed":54,"name":"Coordinate Axis","username":"nausicaa","description":"raymarch for axis","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n#define PI 3.14159265\n#define PyramidScale 0.3\n#define CylinderScale 0.05\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nvec4 opElongate(in vec3 p, in vec3 h) {\n    vec3 q = abs(p) - h;\n    return vec4(max(q, 0.0), min(max(q.x, max(q.y, q.z)), 0.0));\n}\n\nvec2 opU(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nmat3 rotateYZ(float radian)\n{\n    radian = radian * PI;\n    return mat3(1,0,0,0,cos(radian),-sin(radian),0,sin(radian),cos(radian));\n}\nmat3 rotateZX(float radian)\n{\n    radian = radian * PI;\n    return mat3(cos(radian),0,sin(radian),0,1,0,-sin(radian),0,cos(radian));\n}\nmat3 rotateXY(float radian)\n{\n    radian = radian * PI;\n    return mat3(cos(radian),-sin(radian),0,sin(radian),cos(radian),0,0,0,1);\n}\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdPyramid( vec3 p, float h , mat3 tran , float scale)\n{\n    p = tran * p;\n    p = p/scale;\n    float m2 = h*h + 0.25;\n    \n    p.xz = abs(p.xz);\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n\n    vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n    float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n    float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n    return (sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y)) * scale);\n}\n\nfloat sdCappedCylinder( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nvec2 map(in vec3 p) {\n    vec2 d = vec2(sdCappedCylinder(p - vec3(0, 0., 0.),vec3(1., 0., 0.),vec3(0., 0., 0.),CylinderScale), 1.);\n    {\n        float t = sdCappedCylinder(p - vec3(0, 0., 0.),vec3(0., 1., 0.),vec3(0., 0., 0.),CylinderScale);\n        d = opU(d, vec2(t, 2.));\n    }\n    {\n        float t = sdCappedCylinder(p - vec3(0, 0., 0.),vec3(0., 0., 1.),vec3(0., 0., 0.),CylinderScale);\n        d = opU(d, vec2(t, 3.));\n    }\n    {\n        float t = sdSphere(p - vec3(0, 0., 0.),CylinderScale);\n        d = opU(d, vec2(t, 4.));\n    }\n    {\n        float t = sdPyramid(p - vec3(1., 0., 0.), 1.00 , rotateXY(-0.5), PyramidScale);\n        d = opU(d, vec2(t, 1.));\n    }\n    {\n        float t = sdPyramid(p - vec3(0., 1., 0.), 1.00 , rotateZX(0.), PyramidScale);\n        d = opU(d, vec2(t, 2.));\n    }\n    {\n        float t = sdPyramid(p - vec3(0., 0., 1.), 1.00 , rotateYZ(0.5), PyramidScale);\n        d = opU(d, vec2(t, 3.));\n    }\n    return d;\n}\n\nvec2 rayMarch(in vec3 ro, in vec3 rd) {\n    float t = 0.1;\n    float tmax = 40.;\n    vec2 res = vec2(-1.);\n    for(int i = 0; i < RAYMARCH_TIME && t < tmax; i++) {\n        vec3 p = ro + t * rd;\n        vec2 d = map(p);\n        if(d.x < PRECISION) {\n            res = vec2(t, d.y);\n            break;\n        }\n        t += d.x;\n    }\n    return res;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h).x +\n        k.yyx * map(p + k.yyx * h).x +\n        k.yxy * map(p + k.yxy * h).x +\n        k.xxx * map(p + k.xxx * h).x);\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    float tmin = .1;\n    float tmax = 10.;\n    for(float t = tmin; t < tmax;) {\n        float h = map(ro + rd * t).x;\n        if(h < 0.001)\n            return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 render(vec2 uv) {\n    vec3 ro = vec3(2. * cos(0.), 1., 2. * sin(0.));\n    if (iMouse.z > 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        ro = vec3(2. * cos(theta), 2. * (-3. * iMouse.y / iResolution.y + 1.5), 2. * sin(theta));\n    }\n    vec3 ta = vec3(0.,0.,0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n\n    float fl = 1.;\n    vec3 rd = normalize(cam * vec3(uv, fl));\n\n    vec3 bg = vec3(.7, .7, .9);\n    vec3 color = bg - rd.y * vec3(.1,.1,.1);\n\n    vec2 t = rayMarch(ro, rd);\n    if(t.y > 0.) {\n        vec3 p = ro + t.x * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(5. * cos(iTime), 0., 5. * sin(iTime) + 1.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        p += PRECISION * n;\n        dif *= softShadow(p, normalize(light - p), 10.);\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n        if (t.y > 0.9 && t.y < 1.1) {\n           color = amb * vec3(0.25, 0.05, 0.05) + dif * vec3(1., 0., 0.);\n        } else if (t.y > 1.9 && t.y < 2.1) {\n           color = amb * vec3(0.05, 0.05, 0.25) + dif * vec3(0., 0., 1.);\n        } else if (t.y > 2.9 && t.y < 3.1) {\n          color = amb * vec3(0.05, 0.25, 0.05) + dif * vec3(0.,1.,0.);\n        }else if (t.y > 3.9 && t.y < 4.1) {\n          color = amb * vec3(0.15, 0.15, 0.15) + dif * vec3(1.,1.,1.);\n        }\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.,0.,0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}