{"ver":"0.1","info":{"id":"ssc3D2","date":"1630657581","viewed":183,"name":"beefball bloom","username":"goutou1994","description":"设置图片到BufferA.iChannel0，使用鼠标拖动来查看效果。\n如果效果不太明显，可以尝试调整BufferB里的_Threshold。\n\nSet your own picture into BufferA.iChannel0, then drag your mouse around to see the effect.\nIf you can barely see bloom, try decrease _Threshold in BufferB.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float gamma = 2.2;\nconst vec3 gammav = vec3(gamma, gamma, gamma);\nconst vec3 igammav = vec3(1. / gamma, 1. / gamma, 1. / gamma);\nconst vec3 onev = vec3(1.0, 1.0, 1.0);\nconst float _Exposure = .8;\n\nconst float _Radius = 20.;\nconst float _SampleCount = 20.;\n\nfloat radiusToSD(float radius) {\n    return radius * .5;\n}\n\nfloat gaussian(float x, float sd) {\n    return exp(-.5 * x * x / (sd * sd));\n}\n\n#define uv(offset) ((fragCoord + offset) / iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (abs(fragCoord.x - iMouse.x) < 2.) {\n        fragColor = vec4(.2, .2, .2, 1.);\n    }\n    else if (fragCoord.x < iMouse.x) {\n        vec3 source = texture(iChannel0, uv).xyz;\n\n        float sd = radiusToSD(_Radius);\n        float step = 2. * _Radius / _SampleCount;\n        vec3 sum = vec3(.0, .0, .0);\n        for (float i = .0; i < _SampleCount; i += 1.) {\n            float offset = -_Radius + step * i;\n            vec3 c1 = texture(iChannel2, uv(vec2(.0, offset))).xyz;\n            vec3 c2 = texture(iChannel3, uv(vec2(offset, .0))).xyz;\n            sum += (c1 + c2) * gaussian(offset, sd);\n        }\n\n        vec3 c = sum / _SampleCount + source;\n\n        // c = texture(iChannel0, uv).xyz;\n        vec3 m = onev - exp(-pow(c.xyz, gammav) * _Exposure);\n        c = pow(m, igammav);\n        fragColor = vec4(c, 1.);\n    } else {\n        vec3 c = texture(iChannel0, uv).xyz;\n        vec3 m = onev - exp(-pow(c.xyz, gammav) * _Exposure);\n        c = pow(m, igammav);\n        fragColor = vec4(c, 1.);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float gamma = 2.2;\nconst vec3 gammav = vec3(gamma, gamma, gamma);\nconst vec3 igammav = vec3(1. / gamma, 1. / gamma, 1. / gamma);\nconst vec3 onev = vec3(1.0, 1.0, 1.0);\nconst float _Exposure = 1.;\n\nconst float _Threshold = 1.;\nconst float _SoftThreshold = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = texture(iChannel0, uv).xyz * .97;\n    vec3 m = pow(c, gammav);\n    c = pow(-log(onev - m) / _Exposure, igammav);\n    fragColor = vec4(c, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float _Threshold = 1.;\nconst float _SoftThreshold = .0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = texture(iChannel0, uv).xyz;\n    float brightness = max(c.r, max(c.g, c.b));\n\tfloat knee = _Threshold * _SoftThreshold;\n\tfloat soft = brightness - _Threshold + knee;\n\tsoft = clamp(soft, 0.0, 2.0 * knee);\n\tsoft = soft * soft / (4.0 * knee + 0.00001);\n\tfloat contribution = max(soft, brightness - _Threshold);\n\tcontribution /= max(brightness, 0.00001);\n\tfragColor = vec4(c * contribution, 1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float _Radius = 20.;\nconst float _SampleCount = 20.;\nconst float _Intensity = 2.;\n\nfloat radiusToSD(float radius) {\n    return radius * .5;\n}\n\nfloat gaussian(float x, float sd) {\n    return exp(-.5 * x * x / (sd * sd));\n}\n\n#define uv(offset) ((fragCoord + offset) / iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 source = texture(iChannel0, uv(vec2(.0 ,.0))).xyz;\n    \n    float sd = radiusToSD(_Radius);\n    float step = 2. * _Radius / _SampleCount;\n    vec3 sum = vec3(.0, .0, .0);\n    for (float i = .0; i < _SampleCount; i += 1.) {\n        float offset = -_Radius + step * i;\n        vec3 c = texture(iChannel0, uv(vec2(offset, .0))).xyz;\n        sum += c * gaussian(offset, sd);\n    }\n    fragColor = vec4(_Intensity * sum / _SampleCount, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"const float _Radius = 20.;\nconst float _SampleCount = 20.;\nconst float _Intensity = 2.;\n\nfloat radiusToSD(float radius) {\n    return radius * .5;\n}\n\nfloat gaussian(float x, float sd) {\n    return exp(-.5 * x * x / (sd * sd));\n}\n\n#define uv(offset) ((fragCoord + offset) / iResolution.xy)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 source = texture(iChannel0, uv(vec2(.0 ,.0))).xyz;\n    \n    float sd = radiusToSD(_Radius);\n    float step = 2. * _Radius / _SampleCount;\n    vec3 sum = vec3(.0, .0, .0);\n    for (float i = .0; i < _SampleCount; i += 1.) {\n        float offset = -_Radius + step * i;\n        vec3 c = texture(iChannel0, uv(vec2(.0, offset))).xyz;\n        sum += c * gaussian(offset, sd);\n    }\n    fragColor = vec4(_Intensity * sum / _SampleCount, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}