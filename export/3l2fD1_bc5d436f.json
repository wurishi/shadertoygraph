{"ver":"0.1","info":{"id":"3l2fD1","date":"1598860487","viewed":76,"name":"Pillar-Studded Landscape","username":"Giraugh","description":"practicing making terrain","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Slightly Better Raymarcher */\n/* By Giraugh */\n\n#define MAX_STEPS 50\n#define MAX_DIST 1000.\n#define SURF_DIST 0.1\n#define AMBIENT_LIGHT 0.\n#define SUN_STRENGTH 1.\n#define FOG_DENSITY .01\n#define FOG_COL vec3(.45, .55, .65)\n#define SKY_COL vec3(0.5,0.6,0.8)\n#define SUN_COL vec3(1.0,0.9,0.9)\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv) {\n    uv *= .02;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    f += 0.01125*noise( uv ); uv = m*uv;\n    f += 0.005*noise( uv ); uv = m*uv;\n    return f;\n}\n\nmat2 Rot(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(\n    \tc, -s, s, c\n    );\n}\n\nfloat DBox(vec3 p, vec3 o, vec3 r) {\n \treturn length(max(abs(p - o) - r, 0.));   \n}\n\nfloat Terrain(vec3 p) {\n \tfloat a = 7.;\n    vec2 samp = p.xz - vec2(-5,0);// + vec2(sin(iTime), cos(iTime));\n    //samp += 3. * fbm(samp);\n    samp.y += 4. * iTime;\n    return a * fbm(samp);\n}\n\nfloat GetBuildingDist(vec3 point) {\n    vec3 bp = point;\n    bp.z -= 60.;\n    bp.z += 4. * iTime;\n    bp.x += 40.;\n    bp.z = mod(bp.z + 100., 200.) - 100.;\n    bp.x = mod(bp.x + 40., 80.) - 40.;\n    float boxD = DBox(vec3(bp.x, 0, bp.z), vec3(0), vec3(4., 1., 4.));\n    return boxD;\n}\n\n// Return the distance to the nearest point in the scene\n// from (point)\nfloat GetDist(vec3 point) {\n    // Ground\n    float planeD = point.y - Terrain(point);\n    \n    \n    // Trees\n    vec3 tp = point;\n    tp.z -= 12.;\n    tp.z += 4. * iTime;\n    tp.x += 16. * fbm(floor((tp.xz - .4) / .8));\n    tp.z += 16. * fbm(floor((tp.xz - .4) / .8));\n    tp.x = mod(tp.x + .4, .8) - .4;\n    tp.z = mod(tp.z + .4, .8) - .4;\n\ttp.y -= Terrain(point);\n    float treeN = fbm(vec2(-80., 380. - 4. * iTime));\n    float s = .15;\n    s *= smoothstep(-1., 1., Terrain(point));\n    s *= (1. - smoothstep(1.6, 2.1, Terrain(point)));\n    tp.y -= s * .75;\n    float treeD = length(tp) - s;\n    \n    \n    // Buildings\n    float boxD = GetBuildingDist(point);\n    \n    return min(min(planeD, treeD), boxD);\n}\n\n// March a ray forwards into the scene determined by (GetDist)\n// Returns the distance the ray travelled before getting\n// below (SURF_DIST) distance from a surface or too far away \nfloat RayMarch(vec3 rayOrigin, vec3 rayDirection) {\n    float d = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = rayOrigin + rayDirection * d;\n        float d_delta = GetDist(p);\n        d += d_delta;\n        if (d > MAX_DIST || abs(d_delta) < SURF_DIST) break; \n    }\n    return d;\n}\n\n// Calculate the surface normal at (point)\n// can reduce (off) to improve accuracy\nvec3 GetNormal(vec3 point) {\n    float d = GetDist(point);\n    float off = .01;\n    vec3 n = vec3(\n    \td - GetDist(point - vec3(off,0,0)),\n        d - GetDist(point - vec3(0,off,0)),\n        d - GetDist(point - vec3(0,0,off))\n    );\n    return normalize(n);\n}\n\n\n// Get how lit (not in shadow) the given point is. (With Penumbra)\nfloat GetShadowSoft(vec3 ro, vec3 rd, float dmin, float dmax, float k) {\n    float res = 1.;\n    for (float d = dmin; d < dmax; ) {\n        float sceneDist = GetDist(ro + rd * d);\n        if (sceneDist < SURF_DIST) return AMBIENT_LIGHT;\n        d += sceneDist;\n        res = min(res, k * sceneDist / d);\n    }\n    return min(1., res + AMBIENT_LIGHT);\n}\n\n// Get how lit (not in shadow) the given point is.\nfloat GetShadow(vec3 ro, vec3 rd, float dmin, float dmax) {\n    for (float d = dmin; d < dmax; ) {\n        float sceneDist = GetDist(ro + rd * d);\n        if (sceneDist < SURF_DIST) return 0.0;\n        d += sceneDist;\n    }\n    return 1.;\n}\n\n// Determine degree of lighting (0 to 1) at (pos) by (lightPos)\nfloat GetLightingPoint(vec3 point, vec3 lightPos) {\n    vec3 l = normalize(lightPos - point);\n    vec3 n = GetNormal(point);\n    float diff = clamp(dot(l, n), 0., 1.);\n    \n    float shadow = GetShadowSoft(point, l, SURF_DIST * 30., length(lightPos - point), 25.);\n    \n    return diff * shadow;\n}\n\n\nfloat GetLightingSun(vec3 point, vec3 sunDir) {\n    vec3 n = GetNormal(point);\n    float diff = clamp(dot(sunDir, n), 0., 1.);\n    float shadow = GetShadowSoft(point, sunDir, SURF_DIST * 30., MAX_DIST, 25.);\n    return diff * shadow;\n}\n\nvec3 GetFog(vec3 col, float dist) {\n    float fogAmount = 1. - exp(-dist * FOG_DENSITY);\n    return mix(col, FOG_COL, fogAmount);\n}\n\nvec3 GetFogSky(vec3 col, float dist, vec3 rayDir, vec3 sunDir) {\n    float fogAmount = 1. - exp(-dist * FOG_DENSITY);\n    float sunAmount = .5 * max(0., dot(rayDir, sunDir));\n    vec3 fogCol = mix(SKY_COL, SUN_COL, pow(sunAmount, 1.));\n    return mix(col, fogCol, fogAmount);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (square) (from 0 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    // Declare camera position in terms of ray origin and direction\n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    rayOrigin.y = max(7., Terrain(rayOrigin) + 2.);\n    \n    // RayMarch to find point\n    float dist = RayMarch(rayOrigin, rayDirection);\n    vec3 hitPoint = rayOrigin + dist * rayDirection;\n    \n    // Determine colour\n\tvec3 col = vec3(0, 0, 0);\n    \n    float yy = hitPoint.y;\n    float ff = 90.;\n    yy += .7 * fbm(ff * hitPoint.xz + vec2(0, 4. * ff * iTime));\n    \n    col += (1. - smoothstep(-1., 0., yy)) * vec3(1, 1, 0);\n    col += (1. - smoothstep(-.5, 1.2, yy)) * vec3(0, 1, 0); \n    col += (smoothstep(0., 1., yy)) * vec3(0, .7, .2);\n    //col += (smoothstep(1.4, 1.8, yy)) * vec3(1, 1, 1);\n    \n    if (yy > 1.6) {\n        col = mix(col, vec3(1), smoothstep(1.7, 2.2, yy));\n    }\n    \n    if (hitPoint.y <= -1.) {\n     \tcol = mix(col, .4 * SKY_COL, min(1., pow(-hitPoint.y - 1., .2)));\n    }\n    \n    // determine if is a building\n    float bd = GetBuildingDist(hitPoint + 7. * SURF_DIST * rayDirection);\n    if (bd <= 0.) {\n        col = vec3(.1, .1, .12);\n    }\n    \n    \n    // Determine lighting\n    vec3 sunDir = vec3(-1, -.3, 0); //vec3(-1, -.6, -0.3);\n    vec3 lightPos = vec3(2. * cos(iTime), 4, 2. * sin(iTime));\n    float lighting = 3. * AMBIENT_LIGHT + GetLightingSun(hitPoint, -sunDir);\n    col *= min(1., lighting);\n    \n    if (hitPoint.y <= -1.) {\n     \tcol = mix(col, SKY_COL, max(0., dot(rayDirection, -sunDir)));   \n    }\n    \n    // Fog\n    col = GetFogSky(col, dist, rayDirection, -sunDir);\n    \n    // Ouput colour at full transparency\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}