{"ver":"0.1","info":{"id":"ttcXRH","date":"1580404602","viewed":121,"name":"Pillars of mandbulbity","username":"vstelegin","description":"Mandelbulb pillars transformation","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["mouse","mandelbulb","camera","keyboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    fragColor = pow(texture(iChannel0,uv), vec4(1.6));\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float forwardKey = texture(iChannel1, vec2(87.5/256.0,0.1) ).x * 0.01;\n    float backwardKey = texture(iChannel1, vec2(83.5/256.0,0.1) ).x * 0.01;\n    \n    float upWardKey = texture(iChannel1, vec2(69.5/256.0,0.1) ).x * 0.01;\n    float downWardKey = texture(iChannel1, vec2(81.5/256.0,0.1) ).x * 0.01;\n    \n    float leftKey = texture(iChannel1, vec2(65.5/256.0,0.1) ).x * 0.01;\n    float rightKey = texture(iChannel1, vec2(68.5/256.0,0.1) ).x * 0.01;\n    \n    vec4 buffer = texture(iChannel0, vec2(0.5, 0.5) );\n    float mouseDown = float(iMouse.z > 0.0);\n    float mouse = clamp(iMouse.z - iMouse.x, -50.0, 50.0);\n    buffer.a += mouse * 0.0005 * mouseDown;\n    vec3 cameraForward = vec3(0.0,0.0, -1.0);\n    cameraForward.x = cameraForward.z * sin(buffer.a);\n    cameraForward.z = cameraForward.z * cos(buffer.a);\n    cameraForward = normalize(cameraForward);\n    vec3 cameraLeft = cross(cameraForward, vec3(0.0, 1.0, 0.0));\n    cameraLeft = normalize(cameraLeft);\n    cameraForward *= (forwardKey - backwardKey + 0.001);\n    cameraLeft *= (-leftKey + rightKey);\n    buffer.xyz += cameraLeft + cameraForward;\n    buffer.y -= downWardKey;\n    buffer.y += upWardKey;\n    \n    fragColor = buffer;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const vec3 light1 = normalize(vec3(1.0, 1.0, -1.0));\nconst vec3 light2 = normalize(vec3(-1.0,0.0, 0.0));\nconst float KEY_W = 87.5/256.0;\nfloat keyBuffer = 1.0;\nfloat mouseMem;\nfloat scene (vec3 p){\n    //vec3 w = sin(p + vec3(p.x*p.x*3.0,-iTime*0.0,0.0)); //Interesting\n\tvec3 w = sin(p + vec3(0.0,-iTime*0.0,p.x*p.y));\n    float m = dot(w,w);\n    float dz = 1.0;\n    for (int i = 0; i < 2; i++){\n        // https://iquilezles.org/articles/mandelbulb\n        dz = 8.0*pow(sqrt(m),7.0)*dz + 1.1;\n        float wr = sqrt(dot(w,w));\n    \tfloat wo = acos(w.y/wr);\n    \tfloat wi = atan(w.x, w.z);\n        wr = pow(wr, 8.0);\n        wo = wo * 8.0;\n        wi = wi * 4.0 + 50.0 + iTime*0.0 + (20.0+iTime*0.05)*w.y;\n    \tw.x += wr * sin(wo) * sin(wi);\n        w.y += wr * cos(wo);\n        w.z += wr * sin(wo) * cos(wi);\n        m = dot(w,w);\n\t}\n    return 0.2*log(m)*sqrt(m)/dz;\n   \n}\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tscene(p+e.xyy) - scene(p-e.xyy),\n\t\tscene(p+e.yxy) - scene(p-e.yxy),\n\t\tscene(p+e.yyx) - scene(p-e.yyx) );\n    return normalize(n);\n}\n\nfloat seed = 0.0;\nfloat rand(float factor) { return fract(sin(factor + seed++)*43758.5453123); }\nfloat hash( in vec2 p )  \n{\n    p.x += rand(iTime);\n    p.y += rand(iTime * 3.321);\n    p  = 55.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uvBuf = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord+fragCoord - iResolution.xy) / iResolution.y;\n\n\n    fragColor = vec4(0,0,0,1.0);\n    vec4 movement = texture(iChannel0, vec2(0.5,0.5));\n    \n    vec3 ro = vec3(1.0,1.5, -5.0) + movement.xyz;\n    float a = movement.a;\n    \n  \n    vec3 w = ro;\n    w.y = 0.0;\n    w.x = w.z * sin(a);\n    w.z = w.z * cos(a);\n    w = normalize(w);\n    vec3 u = cross(w, vec3(0.0, 1.0, 0.0));\n    vec3 v = cross(u, w);\n    u = normalize(u);\n    v = normalize(v);\n    vec3 rd = normalize( uv.x * u + uv.y * v + 1.0*w);\n    \n    ro += vec3(hash(uv)*0.01,hash(uv + 2.0)*0.01,hash(uv + 3.0)*0.01);\n    float d =0.25;\n    for (int i=0; i<32; i++){\n    \tvec3 p = ro + rd * d;\n    \tfloat r = min(scene(p), 0.25);\n        int outside = int (r > 0.0001);\n        d += float(outside) * r;\n    }\n    vec3 p = ro + rd * d;\n    float sceneRaw = scene(p);\n    float result = step(sceneRaw, 1.0);\n    float fog = d*0.2;\n    float ao = 1.0 - abs(sceneRaw)*110.0;\n    ao = clamp(ao,0.0,1.0);\n    //fog = min(1.0 - fog,0.0);\n    //fog *= 0.001;\n    //fog = 1.0 -fog;\n    vec3 normal =  nor(p, 0.002);\n    float fresnel = 1.0 - clamp(-dot(normal, rd),-1.0,3.0);\n   \tfloat diffuse = dot(light1,normal);\n    diffuse = clamp(diffuse, 0.0, 1.0);\n    float specular = dot(reflect(rd,normal), light2);\n    specular = clamp(specular*specular,0.0,1.0) *0.5;\n    vec3 color = vec3 (0.1, 0.4, 0.6);\n    vec3 lighting = diffuse * color + specular*vec3(1.0,0.1,0.1) + 0.3 - fresnel*0.5;\n    lighting *= ao;\n    vec4 finalColor = vec4( lighting * result,1);\n    finalColor.xyz = mix(finalColor.xyz, vec3(p.y*0.25,0.1,0.1), fog);\n    float mouseDown = float(iMouse.z > 0.0);\n    fragColor = (texture(iChannel1, uvBuf)*0.99 + finalColor*0.01)*(1.0 - mouseDown) + finalColor * mouseDown;\n    //fragColor = vec4(fog,0,0,1);\n}","name":"Buffer B","description":"","type":"buffer"}]}