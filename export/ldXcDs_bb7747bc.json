{"ver":"0.1","info":{"id":"ldXcDs","date":"1579159646","viewed":51,"name":"Mandelbrot - test","username":"Oneiros","description":"It is just a test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 colorMap( in float c )\n{\n    return vec4(c, c, c, 1);\n    \n    float d = 7.0;\n    float i = 1.0;\n    if (c > (i-1.0)/d && c < i/d) return vec4(c, 0, 0, 1); i++;\n    if (c > (i-1.0)/d && c < i/d) return vec4(0, c, 0, 1); i++;\n    if (c > (i-1.0)/d && c < i/d) return vec4(0, 0, c, 1); i++;\n    if (c > (i-1.0)/d && c < i/d) return vec4(c, c, 0, 1); i++;\n    if (c > (i-1.0)/d && c < i/d) return vec4(0, c, c, 1); i++;\n    if (c > (i-1.0)/d && c < i/d) return vec4(c, 0, c, 1); i++;\n    if (c > (i-1.0)/d && c < i/d) return vec4(c, c, c, 1); i++;\n}\n\nvec2 cpow( in vec2 z, in float n)\n{\n    //float r = pow(z.x, n);\n    //float x = r*cos(n*z.y);\n    //float y = r*sin(n*z.y);\n    float x = z.x*z.x - z.y*z.y;\n    float y = z.x*z.y + z.y*z.x;\n    return vec2(x, y);\n    \n}\n\nvec2 mandelbrot( in vec2 z, in vec2 c )\n{\n    return cpow(z, 2.0) + c;\n}\n\nint mandelbrotIterate( in vec2 c, in int iterations )\n{\n    vec2 z = c;\n    //int iterations = int(abs(sin(iTime)*30.0));\n    int i = 0;\n    for (; i < iterations; i++) {\n    \tz = mandelbrot(z, c);\n        if (length(z) > 2.0)\n            break;\n    }\n    return i;\n}\n\nfloat zoom = -0.9;\nfloat speed = 0.3;\nvec2 center = vec2(-0.761574,-0.0847596);\n\nvec2 toComplexCoords( in vec2 fragCoord )\n{\n    // Get integer version of coords and resolution\n    vec2 xy = vec2(int(fragCoord.x), int(fragCoord.y));\n    vec2 wh = vec2(int(iResolution.x), int(iResolution.y));\n    vec2 ar = vec2(wh.x/wh.y, 1.0);\n    \n    // Transformations\n    xy -= wh*0.5;\t\t// Center as origin\n\txy /= wh;\t\t\t// To homogeneous coords\n    xy *= ar;\t\t\t// Fix aspect ratio\n    xy /= zoom;\n    xy += center;\n    return xy;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    zoom += exp(iTime * speed);\n    \n    vec2 click = iMouse.xy;\n    click = toComplexCoords(click);\n    //center -= click * zoom;\n    //center = vec2(0.26, 0);\n    vec2 xy = toComplexCoords(fragCoord);\n    \n    // Calculate color\n    float levels = 255.0;\n    int m = mandelbrotIterate(xy, int(levels));\n    float c = (float(m))/float(levels);\n    \n    fragColor = 1.0-colorMap(c);\n}","name":"Image","description":"","type":"image"}]}