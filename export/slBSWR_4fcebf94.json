{"ver":"0.1","info":{"id":"slBSWR","date":"1627409485","viewed":101,"name":"water shader with perlin noise!","username":"garrisonhh","description":"perlin noise implementation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 gradients3[] = vec3[](\n    vec3( 0,  1,  1),\n    vec3( 0,  1, -1),\n    vec3( 0, -1,  1),\n    vec3( 0, -1, -1),\n    vec3( 1,  1,  0),\n    vec3( 1, -1,  0),\n    vec3(-1,  1,  0),\n    vec3(-1, -1,  0),\n    vec3( 1,  0,  1),\n    vec3( 1,  0, -1),\n    vec3(-1,  0,  1),\n    vec3(-1,  0, -1)\n);\n\nconst int perm[256] = int[](\n    0xB6, 0xE8, 0x33, 0x0F, 0x37, 0x77, 0x07, 0x6B, 0xE6, 0xE3, 0x06, 0x22, 0xD8, 0x3D, 0xB7, 0x24,\n    0x28, 0x86, 0x4A, 0x2D, 0x9D, 0x4E, 0x51, 0x72, 0x91, 0x09, 0xD1, 0xBD, 0x93, 0x3A, 0x7E, 0x00,\n    0xF0, 0xA9, 0xE4, 0xEB, 0x43, 0xC6, 0x48, 0x40, 0x58, 0x62, 0x81, 0xC2, 0x63, 0x47, 0x1E, 0x7F,\n    0x12, 0x96, 0x9B, 0xB3, 0x84, 0x3E, 0x74, 0xC8, 0xFB, 0xB2, 0x20, 0x8C, 0x82, 0x8B, 0xFA, 0x1A,\n    0x97, 0xCB, 0x6A, 0x7B, 0x35, 0xFF, 0x4B, 0xFE, 0x56, 0xEA, 0xDF, 0x13, 0xC7, 0xF4, 0xF1, 0x01,\n    0xAC, 0x46, 0x18, 0x61, 0xC4, 0x0A, 0x5A, 0xF6, 0xFC, 0x44, 0x54, 0xA1, 0xEC, 0xCD, 0x50, 0x5B,\n    0xE9, 0xE1, 0xA4, 0xD9, 0xEF, 0xDC, 0x14, 0x2E, 0xCC, 0x23, 0x1F, 0xAF, 0x9A, 0x11, 0x85, 0x75,\n    0x49, 0xE0, 0x7D, 0x41, 0x4D, 0xAD, 0x03, 0x02, 0xF2, 0xDD, 0x78, 0xDA, 0x38, 0xBE, 0xA6, 0x0B,\n    0x8A, 0xD0, 0xE7, 0x32, 0x87, 0x6D, 0xD5, 0xBB, 0x98, 0xC9, 0x2F, 0xA8, 0xB9, 0xBA, 0xA7, 0xA5,\n    0x66, 0x99, 0x9C, 0x31, 0xCA, 0x45, 0xC3, 0x5C, 0x15, 0xE5, 0x3F, 0x68, 0xC5, 0x88, 0x94, 0x5E,\n    0xAB, 0x5D, 0x3B, 0x95, 0x17, 0x90, 0xA0, 0x39, 0x4C, 0x8D, 0x60, 0x9E, 0xA3, 0xDB, 0xED, 0x71,\n    0xCE, 0xB5, 0x70, 0x6F, 0xBF, 0x89, 0xCF, 0xD7, 0x0D, 0x53, 0xEE, 0xF9, 0x64, 0x83, 0x76, 0xF3,\n    0xA2, 0xF8, 0x2B, 0x42, 0xE2, 0x1B, 0xD3, 0x5F, 0xD6, 0x69, 0x6C, 0x65, 0xAA, 0x80, 0xD2, 0x57,\n    0x26, 0x2C, 0xAE, 0xBC, 0xB0, 0x27, 0x0E, 0x8F, 0x9F, 0x10, 0x7C, 0xDE, 0x21, 0xF7, 0x25, 0xF5,\n    0x08, 0x04, 0x16, 0x52, 0x6E, 0xB4, 0xB8, 0x0C, 0x19, 0x05, 0xC1, 0x29, 0x55, 0xB1, 0xC0, 0xFD,\n    0x4F, 0x1D, 0x73, 0x67, 0x8E, 0x92, 0x34, 0x30, 0x59, 0x36, 0x79, 0xD4, 0x7A, 0x3C, 0x1C, 0x2A\n);\n\nconst int num_water_colors = 4;\nconst vec3 water_colors[num_water_colors] = vec3[](\n    //vec3(75, 91, 171),\n    vec3(71, 119, 201),\n    vec3(77, 155, 219),\n    vec3(127, 193, 220),\n    vec3(174, 221, 202)\n    //vec3(237, 250, 241)\n);\n\nfloat perlin(vec3 pos) {\n    // get coordinate of cell and coordinate within cell\n    ivec3 grid_cell = ivec3(floor(pos)) & 0xFF;\n    vec3 cell_pos = fract(pos);\n    \n    // get 8 corner ivec3s\n    ivec3 corners[8];\n    \n    for (int i = 0; i < 8; i++)\n        corners[i] = ivec3((i >> 2) & 1, (i >> 1) & 1, i & 1);\n    \n    // calculate gradient indices through hash grid\n    int grid_indices[8];\n    \n    for (int i = 0; i < 8; i++) {\n        grid_indices[i] = perm[grid_cell.z + corners[i].z];\n        grid_indices[i] = perm[grid_cell.y + corners[i].y + grid_indices[i]];\n        grid_indices[i] = perm[grid_cell.x + corners[i].x + grid_indices[i]];\n        grid_indices[i] %= 12;\n    }\n    \n    // calculate noise contribution from each corner\n    float vals[8];\n    \n    for (int i = 0; i < 8; i++)\n        vals[i] = dot(gradients3[grid_indices[i]], cell_pos - vec3(corners[i]));\n\n    // interpolate\n    float interp2[4];\n    float interp1[2];\n    cell_pos = smoothstep(vec3(0.0), vec3(1.0), cell_pos);\n    \n    for (int i = 0; i < 4; i++)\n        interp2[i] = mix(vals[i], vals[i + 4], cell_pos.x);\n    \n    for (int i = 0; i < 2; i++)\n        interp1[i] = mix(interp2[i], interp2[i + 2], cell_pos.y);\n    \n    return mix(interp1[0], interp1[1], cell_pos.z);\n}\n\nvec3 pick_color(float noise_val) {\n    return water_colors[int(noise_val * float(num_water_colors))] / 255.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    const float SCALE = 10.0;\n    const vec2 PIXELS = vec2(320, 180);\n    \n    const vec3 BLUE = vec3(0.0, 0.5, 0.7);\n    const vec3 FOAM = vec3(0.7, 0.7, 0.7);\n\n    vec3 pos;\n    \n    pos.xy = (fragCoord / iResolution.xy);\n    pos.xy = floor(pos.xy * PIXELS) / PIXELS;\n    pos.xy *= SCALE;\n    \n    pos.z = iTime * 0.25;\n    \n    float v = perlin(pos);\n    \n    v = sqrt(abs(v));\n\n    fragColor = vec4(pick_color(v), 1.0);\n}","name":"Image","description":"","type":"image"}]}