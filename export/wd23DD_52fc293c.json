{"ver":"0.1","info":{"id":"wd23DD","date":"1548953805","viewed":61,"name":"FirstTestingShader","username":"quicksilver","description":"I'm using shadertoy to try and learn GLSL. This is my first experiment shader on this platform. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //noise \n    float noise = fract(sin(dot(uv.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    \n    //alter the normalized pixel coordinates so its more centered to the screen\n    uv -= .5;\n    \n    //alter the shape along the y or x axis (choice is yours).\n    //uv.x makes it more circular. uv.y makes it a stretched, thinner oval. \n    uv.y *= (iResolution.x / 1.185 )/(iResolution.y * 2.5);\n    \n    //stretch the shape along the uv x axis \n    uv.x *= 5.*cos(iTime / 2.)  + noise;\n    //stretch the shape along the uv y axis\n    uv.y *= -5. * sin(iTime / 2.) + noise;\n    \n    //gets the length of the vector of normalized pixel coordinates\n    float leng= length(uv);\n    \n    //if length value is less than 0.3\n    if(leng < 0.3)\n        //make it white\n        leng = 1.;\n    \t\n    //this adds another range of colour (grey)\n    else if (0.3 < leng && leng <= .6)\n        leng = 0.5;\n    else\n        //make it black\n        leng = 0.;\n\n    // Output to screen\n    fragColor = vec4(vec3(leng * col),1.0);\n}","name":"Image","description":"","type":"image"}]}