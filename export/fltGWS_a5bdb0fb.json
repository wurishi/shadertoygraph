{"ver":"0.1","info":{"id":"fltGWS","date":"1636628409","viewed":69,"name":"KaliedT","username":"tomjhinton","description":"Non rectangular tiles","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float TAU = PI * 2.;\n\n\n\nconst vec2 v60 = vec2( cos(PI/3.0), sin(PI/3.0));\nconst vec2 vm60 = vec2(cos(-PI/3.0), sin(-PI/3.0));\nconst mat2 rot60 = mat2(v60.x,-v60.y,v60.y,v60.x);\nconst mat2 rotm60 = mat2(vm60.x,-vm60.y,vm60.y,vm60.x);\n\nfloat stroke(float x, float s, float w){\n  float d = step(s, x+ w * .5) - step(s, x - w * .5);\n  return clamp(d, 0., 1.);\n}\n\n\nvoid coswarp(inout vec3 trip, float warpsScale ){\n\n  trip.xyz += warpsScale * .1 * cos(3. * trip.yzx + (iTime * .25));\n  trip.xyz += warpsScale * .05 * cos(11. * trip.yzx + (iTime * .25));\n  trip.xyz += warpsScale * .025 * cos(17. * trip.yzx + (iTime * .25));\n}\n\n\nfloat aastep(float threshold, float value) {\n\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n\n}\n\nfloat fill(float x, float size) {\n    return 1.-aastep(size, x);\n}\n\n\n\nvec2 getRadialUv(vec2 uv) {\n\tfloat angle = atan(uv.x, -uv.y);\n\tangle = abs(angle);\n\tvec2 radialUv = vec2(0.0);\n\tradialUv.x = angle / (PI * 2.0) + 0.5;\n\tradialUv.y = 1.0 - pow(1.0 - length(uv), 4.0);\n\treturn radialUv;\n}\n\n\nfloat triangleGrid(vec2 p, float stepSize,float vertexSize,float lineSize)\n{\n    // equilateral triangle grid\n    vec2 fullStep= vec2( stepSize , stepSize*v60.y);\n    vec2 halfStep=fullStep/2.0;\n    vec2 grid = floor(p/fullStep);\n    vec2 offset = vec2( (mod(grid.y,2.0)==1.0) ? halfStep.x : 0. , 0.);\n   \t// tiling\n    vec2 uv = mod(p+offset,fullStep)-halfStep;\n    float d2=dot(uv,uv);\n    return vertexSize/d2 + // vertices\n    \tmax( abs(lineSize/(uv*rotm60).y), // lines -60deg\n        \t max ( abs(lineSize/(uv*rot60).y), // lines 60deg\n        \t  \t   abs(lineSize/(uv.y)) )); // h lines\n}\n\nvec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {\n  mat2 rotation_matrix=mat2(  vec2(sin(rotation),-cos(rotation)),\n                              vec2(cos(rotation),sin(rotation))\n                              );\n  uv -= pivot;\n  uv= uv*rotation_matrix;\n  uv += pivot;\n  return uv;\n}\n\nconst vec2 s = vec2(1, 1.7320508);\n\n\nfloat hex(in vec2 p){\n\n\t\t p = abs(p);\n\n\t\t return max(dot(p, s*.5), p.x); // Hexagon.\n\n }\nvec4 getHex(vec2 p){\n\n\t\t vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n\n\t\t vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n\n\t\t return dot(h.xy, h.xy)<dot(h.zw, h.zw) ? vec4(h.xy, hC.xy) : vec4(h.zw, hC.zw + vec2(.5, 1));\n\n }\n\n\n float box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 vUv = uv;\n float alpha = 1.;\n    \n  vec2 uvT = getRadialUv(uv -.5);\n\tvec2 rote = rotateUV(uv, vec2(.5), PI * iTime * .05);\n  vec2 uvT2 = getRadialUv(rote -.5);\n\tvec2 roteC = rotateUV(vUv, vec2(.5), -PI * iTime * .05);\n  vec2 uvT3 = getRadialUv(roteC -.5);\n\n\n\n  vec4 hex_uv2 = getHex(uvT2 * 10.);\n\n  float hexf2 = stroke(hex(hex_uv2.xy), .5, .1);\n\n\n  vec4 hex_uv3 = getHex(uvT3 * 10.);\n\n  float hexf3 = stroke(hex(hex_uv3.xy), .5, .2);\n\n\tfloat r = fill(triangleGrid(rote, 0.1, 0.000005,0.001), .1);\n\tfloat g = triangleGrid(uv, 0.1, 0.00000005,0.005);\n\n\n  vec3 color = vec3(uvT.x, uvT.y, g)  ;\n\n  coswarp(color ,3.);\n\n  color = mix(color, 1.-color, hexf2);\n  color = mix(color, 1.-color, hexf3);\n  color = mix(color, 1.-color, box(vUv, vec2(r), .1));\n\n\n\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}