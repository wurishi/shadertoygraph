{"ver":"0.1","info":{"id":"7lc3Df","date":"1715439207","viewed":48,"name":"anuraghazra_raymarch_gyroid","username":"anuraghazra","description":"Simple raymarch example","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"7tt3D2","parentname":"anurag_Raymarch basic shapes"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MAX_DIST = 100.;\nconst float SURF_DIST = 0.01;\nconst int MAX_STEPS = 128;\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias, vec2 shift) {\n    p*= scale;\n    return abs(dot(sin(p+shift.x), cos(p.zxy+shift.y))-bias)/scale-thickness;\n}\n\nvec3 Transform(vec3 p) {\n    p.xy *= Rot(0.5+cos(iTime*0.4+p.z*0.2)*0.5);\n    p.z -= iTime*.1;\n    p.y -= .4;\n    return p;\n}\n\nfloat getDist(vec3 p) {\n    p = Transform(p);\n    float box = sdBox(p, vec3(1));\n\n    float g1 = sdGyroid(p, 5., .03, 1.2, vec2(0,0));\n    float g2 = sdGyroid(p, 10., 0.4, .1, vec2(0.2, iTime));\n    float g3 = sdGyroid(p, 80., 0.3, .1, vec2(cos(iTime*0.8), sin(iTime*0.4)));\n    float g4 = sdGyroid(p, 4., 0.25, .2, vec2(sin(iTime)*4., 2.0));\n    float g5 = sdGyroid(p-vec3(2, 5, 1), 10., 0.01, .01, vec2(.4, 2.0));\n\n    g1 += g2*.4;\n    g1 -= g3*.3;\n    g1 -= g4*.1;\n\n    float g = mix(g1, -g3, 0.1);\n    g = max(g, -g5);\n    \n    //float d = max(box, g*0.6);\n    return g*0.8;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = getDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat getLight(vec3 p) {\n  vec3 lightPost = vec3(0, 5, 6);\n  lightPost.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n  vec3 l = normalize(lightPost-p);\n  vec3 n = getNormal(p);\n  \n  float diff = clamp(dot(n, l), 0.0, 1.0);\n  float d = rayMarch(p+n * SURF_DIST*2.0, l);\n  if (d < length(lightPost-p)) diff *= .1;\n  return diff;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvec3 Background(vec3 rd) {\n    vec3 col = vec3(0);\n    \n    float y = rd.y*0.5+0.5;\n    \n    col += y*vec3(.2, .9, .7);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 0, -.01);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 lookat = vec3(0,0,0);\n    vec3 rd = GetRayDir(uv, ro, lookat, 0.8);\n    vec3 col = vec3(0);\n   \n    float d = rayMarch(ro, rd);\n    \n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = getNormal(p);\n\n        p = Transform(p);\n        float dif = n.y*.5+.5;\n        \n        col += dif*dif;\n        \n        \n        float g1 = sdGyroid(p, 10., 0.03, .03, vec2(0.2, 0.5));\n        col *= smoothstep(-0.1, 0.08, g1); // blackening\n        \n        float g2 = sdGyroid(p-vec3(1, 3, 1), 20., 0.01, .01, vec2(.4, 2.0));\n        float ridges = smoothstep(0.01, -0.05, g2);\n\n        vec3 ridgeColor = vec3(.5+cos(iTime)*.5, .5+cos(iTime*0.2)*.5, 0.1);\n        col *= ridges+ridgeColor;\n\n        \n        float crackWidth = 0.04+smoothstep(0., -0.5, n.y)*.02;\n        float cracks = smoothstep(crackWidth, -0.03, g1);\n        float g3 = sdGyroid(p+iTime*0.1, 5., 0.03, .03, vec2(0, 0));\n        float g4 = sdGyroid(p+iTime*0.15, 2., 0.03, .03, vec2(0, 0));\n\n        cracks *= g3*g4*15.0+.2;\n        col += cracks*vec3(0.3, 0.9, 0.7);\n        \n    }\n    \n    //float diff = getLight(p);\n    //col = vec3(diff);\n    \n    if (false) {\n        col *= 0.;\n        float g1 = sdGyroid(vec3(uv.x, uv.y, iTime*0.1), 20., 0.02, 0.1,  vec2(0.2, 5));\n        col += abs(g1)*10.;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    col = mix(col, Background(rd), smoothstep(0., 5., d));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}