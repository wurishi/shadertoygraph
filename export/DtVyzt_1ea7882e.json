{"ver":"0.1","info":{"id":"DtVyzt","date":"1700557404","viewed":53,"name":"egg box2","username":"Efim","description":"https://mathcurve.com/surfaces.gb/boiteaoeufs/boiteaoeufs.shtml","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","box","egg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TAU 6.28318530718\n\nconst float dist_infin = 4.0;\n#define nn 128\nconst float eps = 0.001;\nfloat ff3(float x, float y)\n{\n    float k = 15.;\n    return 0.1*(sin(k*x) + sin(k*y));\n}\n\nfloat sdEggBox(in vec3 p, float a, float b)\n{\n    float x = clamp(p.x, a, b);\n    float y = clamp(p.y, a, b);\n    vec3 val = vec3(x, y, ff3(x, y));\n    float d = length(p - val)/4.;\n    return d;\n}\n\n\nfloat map( in vec3 pos )\n{\n    \n    return sdEggBox(pos, -1., 1.);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map(pos + k.xyy*h ) + \n                      k.yyx*map(pos + k.yyx*h ) + \n                      k.yxy*map(pos + k.yxy*h ) + \n                      k.xxx*map(pos + k.xxx*h ) );\n}\n\nstruct HIT\n{\n    float dist;\n    vec3 nor;\n    vec3 pos;\n};\nconst HIT hit_inf = HIT(dist_infin, vec3(0.0), vec3(0.0));\n\nHIT giper3D(vec3 ro, vec3 rd)\n{\n    float t  = 0.;\n    for (int i = 0; i < nn; i++)\n    {\n        vec3 pos = ro + rd*t;\n        float h = map(pos);\n        if (h < eps || t >= dist_infin)\n            break;\n        t += h;  \n    }    \n\n    if (t >= dist_infin)\n        return hit_inf;\n      \n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal(pos);\n    return HIT(t, nor, pos);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\n\nmat3 rotateX(float f)\n{\n    return mat3(\n    vec3(1.0,    0.0,      0.0),\n    vec3(0.0,\t cos(f),  -sin(f)), \t\n\tvec3(.0, sin(f), cos(f))\n    );\n}\n\n\nmat3 rotateZ(float f)\n{\n    return mat3(\n    vec3(cos(f),    -sin(f),  0.0),\n    vec3(sin(f),\t cos(f),  0.0), \t\n\tvec3(0.0, 0.0, 1.0)\n    );\n    \n}\n\n\nmat3 rotateY(float f)\n{\n    return mat3(\n    vec3(cos(f), 0.0,  sin(f)),\n    vec3(0.0,\t 1.0,  0.0), \t\n\tvec3(-sin(f), 0.0, cos(f))\n    );\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.0, 1.0, 1.0)); //light\n    vec3 light2 = normalize(vec3(0.0, 1.0, -1.0)); //light\n    float t = iTime;\n    vec2 m = vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n        m = (-iResolution.xy + 2.0*(iMouse.xy))/iResolution.y;\n        t = 0.;\n    }\n    vec3 ro = vec3(0.0, 0.0, 2.0); // camera\n    ro = rotateY(-m.x*TAU)*rotateX(-m.y*PI)*ro; //camera rotation\n    \n    \n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n    mat3 rota  = rotateX(PI/2.0)*rotateZ(t)*rotateX(-t);\n    mat3 rota_1  = rotateX(t)*rotateZ(-t)*rotateX(-PI/2.0);\n    \n    vec3 tot = vec3(0.0);\n    \n    \n    //antiblick\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        vec3 rd = GetRayDir(p, ro, vec3(0,0.,0), fl); //ray direction\n        vec3 col = vec3(0.0);\n        \n        HIT giper = giper3D(rota*ro, rota*rd);\n        if (giper.dist < dist)\n        {\n            vec3 nor = rota_1*giper.nor;\n            float dif = clamp( dot(nor,light), 0.2, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,light2);\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n        }\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    }\n    //antiblick\n    tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}