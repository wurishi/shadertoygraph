{"ver":"0.1","info":{"id":"M3XcWH","date":"1726188863","viewed":15,"name":"Test 1 Hard equilateral","username":"zhavoronoki","description":"----- Not easy for understanding way","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265358979323846\n\n\nvec2 rhombus(vec2 p) {\n    return mat2(\n        1.0, 0.0,\n        1.0 / tan(PI / 3.0), 1.0 / sin(PI / 3.0)\n    ) * p;\n}\n\nfloat lines(vec2 p){\n  return smoothstep(.03,0.,p.y)+smoothstep(.03,0.,p.x);\n}\n\nfloat plot(vec2 p){\n  return smoothstep(.03,0.,abs(p.y-p.x));\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n  // Normalized pixel coordinates (from 0 to 1) and fix aspect ratio\n  vec2 uv=fragCoord/iResolution.xy;\n  uv.x *= iResolution.x / iResolution.y;\n  vec2 grid=fract(rhombus(uv)*10.0);\n  \n  float plt=plot(grid);\n  float ln=lines(grid);\n  \n  float triangle=step(grid.x,grid.y);\n  vec3 color=vec3(triangle);  \n  color=mix(vec3(.95,1.,.04),vec3(.2,.46,.97),triangle);\n  color=mix(color,vec3(0.),plt);\n  color=mix(color,vec3(0.),ln);\n  // Output to screen\n  fragColor=vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}