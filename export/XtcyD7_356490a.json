{"ver":"0.1","info":{"id":"XtcyD7","date":"1532799863","viewed":160,"name":"Fun with raymarching","username":"leacasas","description":"I keep learning ray marching. Building primitives and applying operations to it (repetition and rotation).","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor,in vec2 fragCoord) {\n    vec2 uv=(fragCoord/iResolution.xy)*2.-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    vec3 k=vec3(2.,2.,2.);\n    float t=0.;\n    for(int i=0;i<64;++i){\n        vec3 q=mod(vec3(cos(iTime),sin(iTime),iTime*.3)+normalize(vec3(uv,1.))*t,k)-.5*k;\n    \tq.xy*=mat2(cos(iTime),-sin(iTime),sin(iTime),cos(iTime));\n        t+=length(max(abs(q)-vec3(.1,.2,.5),.0))*.5;\n    }\n    vec3 c=vec3(1./t);\n    fragColor=vec4(c.x,c.y,c.z*.5,1.);\n}\n/*\n// GregRostami's version from the comments (235 chars !)\n#define mainImage(o,U)\n    vec3 R = iResolution, q;\n    float t = 0., T = iTime;\n    while(o.a++<64.)\n        q = mod(vec3(cos(T),sin(T),T*.3) + vec3((U+U-R.xy)/R.y, 1)*t, 2.) - 1.,\n    \tq.xy *= mat2( cos(T + vec4(0,33,55,0)) ),\n        t += length( max(abs(q)-vec3(.1,.2,.5),.0) )*.5;\n    o += .8/t;\n    o.z *= .5\n*/","name":"Image","description":"","type":"image"}]}