{"ver":"0.1","info":{"id":"wdtSD2","date":"1572946926","viewed":103,"name":"Interferrence","username":"Hendiadyoin","description":"A simple Simulation of Interferrence of Waves","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.2831853f\n\nstruct source{\n\tvec2 pos;\n    float l;\n    float amp;\n};\n// you can change evrything below\nconst bool decay = true;\nconst float scale = 200.f;\nconst float v = 10.f;\nconst source [2] sc=source[](\n\tsource(\n        vec2(-30,0),\n          5.f,\n          500.f), //high values due to quadratic decay\n    source(\n    \tvec2(30,0),\n        5.f,\n        500.f)\n        );\n// no Changes past here\n\n//calculate the overall amplitude of the wave at the position\nfloat amp(vec2 pos,float t){\n    float a = 0.f;\n    for(int i = 0;i<sc.length();i++){\n        source s = sc[i];\n        float d = length(pos*scale-s.pos);\n        float l = d/s.l;\n        float f = v/s.l;\n    \tfloat ta = sin((l-f*t)*TWO_PI);\n        if (decay){\n            ta*= s.amp/d/d;\n        }\n        a+=ta;\n    }\n    return clamp(a,0.,1.);\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    // Normalized pixel coordinates (from -.5 to .5)\n    vec2 R = iResolution.xy,\n         U = ( u - .5*R ) / R.y;\n    O = vec4( amp( U, iTime/2.f ) );\n}","name":"Image","description":"","type":"image"}]}