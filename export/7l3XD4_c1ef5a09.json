{"ver":"0.1","info":{"id":"7l3XD4","date":"1639108104","viewed":145,"name":"Evil Light","username":"nelsonkuang","description":"Evil Light","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["light","electricity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Heavlly referenced from:\n// https://www.shadertoy.com/view/4scGWj\n\n// Port of Humus Electro demo http://humus.name/index.php?page=3D&ID=35\n// Not exactly right as the noise is wrong, but is the closest I could make it.\n// Uses Simplex noise by Nikita Miropolskiy https://www.shadertoy.com/view/XsX3zB\n\n/* Simplex code license\n * This work is licensed under a \n * Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n * http://creativecommons.org/licenses/by-nc-sa/3.0/\n *  - You must attribute the work in the source code \n *    (link to https://www.shadertoy.com/view/XsX3zB).\n *  - You may not use this work for commercial purposes.\n *  - You may distribute a derivative work only under the same license.\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n  float j = 4096.0 * sin(dot(c, vec3(17.0, 59.4, 15.0)));\n  vec3 r;\n  r.z = fract(512.0 * j);\n  j *= .125;\n  r.x = fract(512.0 * j);\n  j *= .125;\n  r.y = fract(512.0 * j);\n  return r - 0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n\t /* calculate s and x */\n  vec3 s = floor(p + dot(p, vec3(F3)));\n  vec3 x = p - s + dot(s, vec3(G3));\n\n\t /* calculate i1 and i2 */\n  vec3 e = step(vec3(0.0), x - x.yzx);\n  vec3 i1 = e * (1.0 - e.zxy);\n  vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n\t /* x1, x2, x3 */\n  vec3 x1 = x - i1 + G3;\n  vec3 x2 = x - i2 + 2.0 * G3;\n  vec3 x3 = x - 1.0 + 3.0 * G3;\n\n\t /* 2. find four surflets and store them in d */\n  vec4 w, d;\n\n\t /* calculate surflet weights */\n  w.x = dot(x, x);\n  w.y = dot(x1, x1);\n  w.z = dot(x2, x2);\n  w.w = dot(x3, x3);\n\n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n  w = max(0.6 - w, 0.0);\n\n\t /* calculate surflet components */\n  d.x = dot(random3(s), x);\n  d.y = dot(random3(s + i1), x1);\n  d.z = dot(random3(s + i2), x2);\n  d.w = dot(random3(s + 1.0), x3);\n\n\t /* multiply d by w^4 */\n  w *= w;\n  w *= w;\n  d *= w;\n\n\t /* 3. return the sum of the four surflets */\n  return dot(d, vec4(52.0));\n}\n\nfloat noise(vec3 m) {\n  return 0.5333333 * simplex3d(m) + 0.2666667 * simplex3d(2.0 * m) + 0.1333333 * simplex3d(4.0 * m) + 0.0666667 * simplex3d(8.0 * m);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy; // normalized screen coordinates\n  uv = uv * 2. - 1.; // [-1, 1]\n  // uv *= iResolution.y / iResolution.x; // scale to fit the screen\n\n  vec2 p = fragCoord.xy / iResolution.x; // normalized screen coordinates\n  vec3 p3 = vec3(p, iTime * 0.4); // 3d coordinates\n\n  float intensity = noise(vec3(p3 * 12.0 + 12.0)); // noise\n\n  float t = clamp((uv.x * -uv.x * 0.16) + 0.15, 0., 1.); // time\n  float y = abs(intensity * -t + uv.y); // y position\n  float x = abs(intensity * t + uv.x); // x position\n\n  x *= 58.5 * cos(iTime); // x scale\n\n  y *= 3.5 * sin(iTime); // y scale\n\n  float g = pow(y, abs(x)); // glow\n\n  vec3 col = vec3(1.70, 1.48, 1.78); // color\n  col = col * -g + col;\n  col = col * col;\n  col = col * col;\n\n  fragColor.rgb = 1.0 - col; // invert\n  fragColor.w = 1.;\n}\n","name":"Image","description":"","type":"image"}]}