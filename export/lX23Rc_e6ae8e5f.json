{"ver":"0.1","info":{"id":"lX23Rc","date":"1708699147","viewed":58,"name":"MediaAndDesignComp - Programming","username":"26apastor","description":"Title: Helping the discovery of new techniques to simulate life\n\nGoal: To help the world by allowing biologists and computer scientists to see the world in a new way using an abstract math concept.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","cellular","continuous","artificial","lenia","pa","mediaanddesigncomp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float con = 1.0;\nconst float sat = 1.5;\nconst float bri = 1.0;\n\nmat4 saturationMatrix( float saturation ) {\n    vec3 luminance = vec3( 0.3086, 0.6094, 0.0820 );\n    float oneMinusSat = 1.0 - saturation;\n    vec3 red = vec3( luminance.x * oneMinusSat );\n    red.r += saturation;\n    \n    vec3 green = vec3( luminance.y * oneMinusSat );\n    green.g += saturation;\n    \n    vec3 blue = vec3( luminance.z * oneMinusSat );\n    blue.b += saturation;\n    \n    return mat4( \n        red,     0,\n        green,   0,\n        blue,    0,\n        0, 0, 0, 1 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    //col = (1.0 - uv.x) * (vec4(pow(col.x, con), pow(col.y, con), pow(col.z, con), 1.0)) + uv.x * ();\n    col = vec4(pow(col.x, con - 0.5), pow(col.y, con - 0.5), pow(col.z, con - 0.5), 1.0);\n    vec4 b = saturationMatrix(sat) * col * bri;\n    /*\n    float avg = (b.r + b.g + b.g) * 0.5;\n    vec4 abc = vec4(gaussian_bell(avg, 1.0, 0.25), gaussian_bell(avg, 0.5, 0.25), gaussian_bell(avg, 0.0, 0.25), 1.0);\n    float u = abc.x + abc.y + abc.z;\n    b = abc / u;\n    */\n    \n    fragColor = b;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R 13.0\nconst float max_radius = R;\nconst float invRadius = 1.0 / R;\nconst float rt2Rad = sqrt(2.0) / R;\nconst float T = 5.0;\nconst float rho = 0.5;\nconst float omega = 0.15;\nconst float noise_base = 0.15;\nconst float nop = 0.0;\n\n/*\nvec3 beta0   = vec3(1.0,        1.0 / 12.0, 1.0);\nvec3 beta1   = vec3(5.0 / 12.0, 1.0,        nop);\nvec3 beta2   = vec3(2.0 / 3.0,  nop,        nop);\nvec3 betaLen = vec3(3.0,        2.0,        1.0);\nvec3 mu      = vec3(0.156,      0.193,      0.329);\nvec3 sigma   = vec3(0.0118,     0.049,      0.0891);\n*/\n\n/*\nvec3 beta0   = vec3(1.0,        1.0 / 12.0, 1.0);\nvec3 beta1   = vec3(5.0 / 12.0, 1.0,        nop);\nvec3 beta2   = vec3(2.0 / 3.0,  nop,        nop);\nvec3 betaLen = vec3(3.0,        2.0,        1.0);\nvec3 mu      = vec3(0.156,      0.193,      0.342);\nvec3 sigma   = vec3(0.0144,     0.049,      0.0891);\n*/\n\n/*\nvec3 beta0   = vec3(1.0,        1.0 / 12.0, 1.0);\nvec3 beta1   = vec3(5.0 / 12.0, 1.0,        nop);\nvec3 beta2   = vec3(2.0 / 3.0,  nop,        nop);\nvec3 betaLen = vec3(3.0,        2.0,        1.0);\nvec3 mu      = vec3(0.156,      0.193,      0.346);\nvec3 sigma   = vec3(0.0118,     0.059,      0.0891);\n*/\n\nvec3 beta0   = vec3(1.0,        1.0 / 12.0, 1.0);\nvec3 beta1   = vec3(5.0 / 12.0, 1.0,        nop);\nvec3 beta2   = vec3(2.0 / 3.0,  nop,        nop);\nvec3 betaLen = vec3(3.0,        2.0,        1.0);\nvec3 mu      = vec3(0.196,      0.193,      0.429);\nvec3 sigma   = vec3(0.0144,     0.093,      0.0891);\n\nvec3 getWeight(float dist) {\n    vec3 Br = dist * betaLen;\n    vec3 radiuses = vec3(0.0);\n    for (int i = 0; i < 4; i++) {\n        radiuses[i] += beta0[i] * trigonometric_bell(dist, 0.0, 1.0 / betaLen[i]) +\n                       beta1[i] * trigonometric_bell(dist, 1.0, 1.0 / betaLen[i]) +\n                       beta2[i] * trigonometric_bell(dist, 2.0, 1.0 / betaLen[i]);\n    }\n    \n    vec3 Br_mod = mod(Br, 1.0);\n    return radiuses * gaussian_bell(Br_mod, vec3(rho), vec3(omega));\n}\n\nfloat getCell(vec2 xy)\n{\n    xy = mod(xy / iResolution.xy, 1.);\n    vec3 rgb = texture(iChannel0, xy).rgb;\n    return rgb.r + rgb.g + rgb.b;\n}\n\nvec3 getColor(vec3 g) {\n    vec3 c1 = vec3(gaussian_bell(g.x, 1.0, 0.5), gaussian_bell(g.x, 0.0, 0.5), gaussian_bell(g.x, -1.0, 0.5));\n    float s1 = c1.r + c1.g +  c1.b;\n    \n    vec3 c2 = vec3(gaussian_bell(g.y, 1.0, 0.5), gaussian_bell(g.y, 0.0, 0.5), gaussian_bell(g.y, -1.0, 0.5));\n    float s2 = c2.r + c2.g +  c2.b;\n    \n    vec3 c3 = vec3(gaussian_bell(g.z, 1.0, 0.5), gaussian_bell(g.z, 0.0, 0.5), gaussian_bell(g.z, -1.0, 0.5));\n    float s3 = c3.r + c3.g +  c3.b;\n    \n    return (c1 / s1 + c2 / s2 + c3 / s3) * 0.333;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 sum = vec3(0.0), total = vec3(0.0);\n    \n    float r = 0.0;\n    vec3 weight = getWeight(0.0);\n    float cell = getCell(fragCoord); sum += cell * weight; total += weight;\n    for( float x = 1.0; x <= max_radius; x++) {\n        r = x * invRadius;\n        weight = getWeight(r);\n        cell = getCell(fragCoord + vec2(x, 0));  sum += cell * weight; total += weight;\n        cell = getCell(fragCoord + vec2(-x, 0)); sum += cell * weight; total += weight;\n        cell = getCell(fragCoord + vec2(0, x));  sum += cell * weight; total += weight;\n        cell = getCell(fragCoord + vec2(0, -x)); sum += cell * weight; total += weight;\n    }\n    \n    for (float x = 1.0; x <= max_radius; x++)\n    {\n        r = x * rt2Rad;\n        if (r <= 1.0) {\n            weight = getWeight(r);\n            cell = getCell(fragCoord + vec2(x, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(x, -x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, -x)); sum += cell * weight; total += weight;\n        }\n    }\n\n    for (float y = 1.0; y <= max_radius-1.0; y++)\n    for (float x = y + 1.0; x <= max_radius; x++)\n    {\n        r = sqrt(x*x + y*y) * invRadius;\n        if (r <= 1.0) {\n            weight = getWeight(r);\n            cell = getCell(fragCoord + vec2(x, y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(x, -y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, -y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(y, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(y, -x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-y, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-y, -x)); sum += cell * weight; total += weight;\n        }\n    }\n    \n    sum /= total;\n    \n    vec3 color = vec3(0.0);\n    vec4 pc = texture(iChannel0, uv);\n    vec3 g123 = (gaussian_bell(sum, mu, sigma) * 2.0 - 1.0);\n    float g = (g123.x + g123.y + g123.z) * 0.333; vec3 c = getColor(g123);\n    //color = (1.0 - uv.x) * (clamp(pc.x + pc.y + pc.z + g / T, -0.02, 2.0) * c) + uv.x * ();\n    color = clamp(pc.x + pc.y + pc.z + g / T, 0.0, 1.0) * c;\n    if (iFrame < 1) {\n        color = texture(iChannel1, uv).xyz;\n    }\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= max_radius/iResolution.x)\n        \tcolor = texture(iChannel1, uv).xyz;\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 soft_clip(vec3 x) {\n    return clamp(tanh(2.0 * x - 1.0) / 2.0 + 0.5, 0.0, 1.0);\n}\n\nvec3 gaussian_bell(vec3 x, vec3 m, vec3 s) {\n    return exp(-(((x - m) * (x - m)) / s) / s / 2.0);\n}\n\nfloat gaussian_bell(float x, float m, float s) {\n    return exp(-pow((x - m) / s, 2.0) / 2.0);\n}\n\nfloat trigonometric_bell(float x, float m, float s) {\n    return cos((x - m) * (1.4 / s));\n}\n\nvec3 trigonometric_bell(vec3 x, vec3 m, vec3 s) {\n    vec3 p = (x - m) * (1.4 / s);\n    return vec3(cos(p[0]), cos(p[1]), cos(p[2]));\n}","name":"Common","description":"","type":"common"}]}