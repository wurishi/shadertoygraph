{"ver":"0.1","info":{"id":"XscBz4","date":"1524144345","viewed":140,"name":"Function testing","username":"darkeclipz","description":"Playing around with different types of functions.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["testing","functions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Working through https://thebookofshaders.com/05/\n#define pi 3.14159265359\n\nfloat plot(vec2 uv, float pct) {\n\treturn smoothstep( pct - 0.02, pct, uv.y ) -\n           smoothstep( pct, pct + 0.02, uv.y );\n}\n\nfloat step2(float a, float b, float v) {\n\treturn step(a,v) - step(b,v);    \n}\n\nfloat smoothstep2(float a, float b, float w, float v) {\n\treturn smoothstep(a-w, a, v) - smoothstep(b, b+w, v);\n}\n\nfloat sqr(float x) { return x*x; }\n\nvec2 tile(vec2 uv, float scale) { return fract(uv*scale); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = iTime;\n    \n    // How many tiles we want to create.\n    float tiles = 6.;\n    \n    // Get the integer part of our tiled coordinates\n    vec2 uvIntPart; modf(tiles * uv, uvIntPart);\n    \n    // Get the index for the tile [0, ..., tiles]\n    int tileIndex = int(uvIntPart.y * tiles + uvIntPart.x);\n    \n    // Get normalized coordinates [0, 1] for each tile.\n    vec2 coord = tile(uv, tiles);\n    \n    // Function x, y\n    float x, y; x = coord.x; \n\n    // Select each tile to render a different function.\n    switch(tileIndex) {\n        // Basic functions\n        case 0: y = x;\t\t\t\t\t\t\t\tbreak;\n    \tcase 1: y = sqr(x); \t\t\t\t\t\tbreak;\n        case 2: y = sqrt(x);\t\t\t\t\t\tbreak;\n        case 3: y = .5*log(x) + 1.;\t\t\t\t\tbreak;\n        case 4: y = pow(x, 5.);\t\t\t\t\t\tbreak;\n        case 5: y = .5*sin(x * pi * 2.) + .5; \t\tbreak;\n        \n        // Other functions\n        case 6: y = fract(3.*x); \t\t\t\t\tbreak;\n        case 7: y = ceil(5.*x)/5.;  \t\t\t\tbreak;\n        case 8: y = floor(5.*x)/5.;  \t\t\t\tbreak;\n        case 9: y = atan(x*pi/2.); \t\t\t\t\tbreak;\n        case 10: y = asin(x*pi/4.);\t\t\t\t\tbreak;\n        case 11: y = 1.-sqr(x); \t\t\t\t\tbreak;\n        \n        // Step examples\n        case 12: y = step(.5,x);\t\t\t\t\tbreak;\n        case 13: y = step(.4,x) - step(.6,x); \t\tbreak;\n        case 14: y = x * step2(.4, .6, x);\t\t\tbreak;\n        case 15: y = step2(.0, .2, fract(4.*x));\tbreak;\n        case 16: y = x * step2(.0, .2, fract(4.*x));break;\n        case 17: y = sin(x*pi) \n           \t  * (1.-step(.2, fract(12.*x)))\n              + 0.2 * (step2(.2, 1., fract(12.*x)));break;\n        \n        // Smoothstep examples\n        case 18: y = smoothstep(.0,1.,x); \t\t\tbreak;\n        case 19: y = smoothstep2(.4,.6,.2,x); \t\tbreak;\n        case 20: y = x * smoothstep2(.4,.6,.1,x);\tbreak;\n        case 21: y = x * smoothstep2(fract(4.*x), \n                                     fract(4.*x+0.1)\n                                     , 0.2, x); \tbreak;\n        //case 22: y = 0.5 * smoothstep2(mod(4.*x,.5),\n        //                              mod(4.*x+0.1,.5)\n        //                              , 0.2, x)+.2;\tbreak;\n        \n        // Clamp examples\n        case 24: y = clamp(x,0.,1.); \t\t\t\tbreak;\n        case 25: y = clamp(x,.5,1.); \t\t\t\tbreak;\n        case 26: y = clamp(x,0.,.5); \t\t\t\tbreak;\n        case 27: y = 1.-clamp(x,.5,1.); \t\t\tbreak;\n        case 28: y = 1.-clamp(x,0.,1.);\t\t\t\tbreak;\n        \n        // Misc. examples\n        case 30: y = fract(sin(x*pi*4.)); \t\t\tbreak;\n        case 31: y = fract(abs(sin(x*pi*4.))); \t\tbreak;\n        case 32: y = mod(x, .25);\t\t\t \t\tbreak;\n        case 33: y = sin(x*pi);\t\t\t\t\t\tbreak;\n        case 34: y = 0.5 + .05 * ( sin(29.*x+8.*t)\n                           \t\t + sin(38.*x+8.*t) \n                          \t\t + sin(17.*x+8.*t));break;\n    }\n    \n    // Set color\n    vec3 col = vec3(y);\n    \n    // Line\n    float pct = plot(coord, y);\n    col = (1.0-pct)*col+pct*vec3(0,1,0);\n    \n    // Grid\n    float gridWidth = 0.01;\n    col = mix(col, vec3(0), 1.-step(gridWidth, coord.x));\n    col = mix(col, vec3(0), 1.-step(gridWidth, coord.y));\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}