{"ver":"0.1","info":{"id":"NdVXDD","date":"1634669573","viewed":199,"name":"41/49","username":"tono","description":"41/49","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["49"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat pi = acos(-1.);\nvec3 ppp;\nvec2 map(vec3 p)\n{\n    float o = 10.;\n    float id = 0.;\n    vec3 op = p;\n    p.xz *= rot(sin(p.y/4.));\n    p.xz = abs(p.xz)-3.1;\n    p.xz *= rot(p.y/2.);\n    p.xz = abs(p.xz)-1.;\n    p.xz *= rot(sin(p.y));\n    vec3 pp = p;\n    p.xz *= rot(p.y * pi/3. + iTime);\n    p.y = sin(p.y * pi/3. + iTime);\n    o = length(vec2(length(p.xy)-1.,p.z))-.3;\n \tpp.z += sin(pp.y * pi/3. + iTime)*1.;\n    ppp = pp;\n    //o = min(o,length(pp.xz)-.6);\n    float r = sin(iTime + pp.y/3.) * .5 + .5;\n    float d = length(pp.xz)-r*.7;\n    if(o > d)\n    {\n        o = d;\n    \tid = 1.;\n        ppp = pp;\n    }\n    \n    o = mix(max(length(op)-6.,o),o,.9);\n    //o = (length(op)-3.)/o;\n    o/=1.7;\n\t\n    return vec2(o,id);\n}\n\nvec2 march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 99 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.01)\n        {\n            return vec2(depth,d.y);\n        }\n        if(depth > 30.)break;\n        depth += d.x;\n    }\n    return vec2(-depth , 0.);\n\n}\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 cp = vec3(0.,0.,-28.);\n    vec3 target = vec3(0.);\n    \n    \n    //cp.xz *= rot(iTime + p.y * 12.);\n    //target.x += sin(iTime);\n    vec3 col = vec3(.0);\n    \n    vec3 cd = normalize(vec3(target - cp));\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 2.5;\n    \n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    \n    vec2 d = march(cp,rd);\n    if( d.x > 0.)\n    {\n        vec2 e = vec2(1.0, -1.0) * .01;\n        vec3 pos = cp + rd * d.x;\n        vec3 N = normalize(\n                  e.xyy * map(pos + e.xyy).x +\n                  e.yyx * map(pos + e.yyx).x +\n                  e.yxy * map(pos + e.yxy).x +\n                  e.xxx * map(pos + e.xxx).x);\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        //sun.xz *= rot(iTime);\n        float diff = max(0.,dot(-sun,N));\n        diff = mix(diff , 1.,.1);\n        float sp = max(0.,dot(rd,reflect(N,sun)));\n        sp = pow(sp,33.6) * 10.;\n        float rim = pow(clamp(1. - dot(N, -rd), 0., 1.), 8.) * 3.;\n        vec3 mat = mix(vec3(1.),vec3(1.,0.1,0.1),d.y);\n        mat -= exp(sin(ppp*2.)) * d.y;\n        float up = max(dot(N,vec3(0.,-1.,0.)),0.);\n        float down = max(dot(N,vec3(0.,1.,0.)),0.);\n        \n        col = sp * mat + diff * mat;\n        col += up * vec3(.1) + down * vec3(0.,0.,1.);\n        \n    \tcol -= d.y * mat ;\n        col = floor(col * 3.)/3.;\n        col *= vec3(1.) * sin(pos * (60. + step(.9,sin(p.y+iTime))*30.) ) * max(col.r,max(col.g,col.b));\n    \tcol -= rim *10.;\n        col *= 10.;\n    }\n    //col.r = atan(col.r,col.g)/pi;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}