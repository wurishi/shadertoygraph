{"ver":"0.1","info":{"id":"4d33zj","date":"1450707254","viewed":568,"name":"010[F] Game Cards generator","username":"pawsiem","description":"Hi every one! I need graphics to my game #TheUnknownBox but i am not graphics.\nSo.. i've write simple texture generator. What are You thinking about it?\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","generator","cards","gamedev"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"struct Card {\n        vec2 center;\n        vec2 size;\n    \tvec3 colour;\n    };\nstruct Label {\n        vec2 center;\n        vec2 size;\n    };\n\nvec2 getCoords(vec2 c,vec2 r){\n    return (c*2.-r)/min(r.x,r.y);\n}\n\nfloat sFract(float x)\n{\n\nx = fract(x);\n// The last term is a smoothing factor, of sorts.\nreturn min(x, x*(1.-x)*12.);\n\n}\n\nvec2 sFract(vec2 x){\n    return vec2(sFract(x.x),sFract(x.y));\n}\nfloat noise(vec2 p){\n    return texture(iChannel0,sFract(p)).r;\n}\nfloat noiseS(vec2 p){\n    vec2 s = vec2(0.123,0.213);\n    vec2 c = vec2(0.736,0.564);\n    return (noise(p)+noise(p+s)+noise(p+c)+noise(p+s.yx)+noise(p+c.yx))/5.;\n}\nfloat noiseSS(vec2 p){\n    vec2 s = vec2(0.437,0.325);\n    vec2 c = vec2(0.112,0.942);\n    return (noiseS(p)+noiseS(p+s)+noiseS(p+c)+noiseS(p+s.yx)+noiseS(p+c.yx))/5.;\n}\n\nvec3 wood(vec2 p){\n    vec3 color = vec3(0.3, 0.16, 0.07);\n    float m =mod(p.y+sin(p.x)/20.+sin(p.x+p.y*0.5)/10.,3.5);\n    float wood = sFract(pow(m-1.8,2.))+0.26;\n    return m<0.1?vec3(0.03):color-vec3(0.14, 0.07, 0.0)*wood;\n}\nbool cardIntersect(Card card,vec2 p){\n    //p+=noiseS(p)/100.;\n    vec2 d = abs(p-card.center)*2.;\n    return d.x<card.size.x && d.y<card.size.y ;\n}\nbool labelIntersect(Label label,vec2 p){\n    vec2 d = abs(p-label.center)*2.;\n    return d.x<label.size.x && d.y<label.size.y ;\n}\nvec3 labelDraw(Label label,vec2 p){\n    \n    return vec3(.2);\n}\nvec3 cardDraw(Card card,vec2 p){\n    if(cardIntersect(Card(card.center,card.size*0.96,vec3(0.)),p)){\n        vec3 o = card.colour * noiseSS(p/50.);\n        Label label = Label(\n            vec2(card.center.x-0.005,card.center.y+card.size.y*0.41),\n            vec2(card.size.x*0.92,card.size.y*0.08)\n        );\n    \tif(labelIntersect(label,p))\n            o*= .7 - labelDraw(label,p);\n        \n        Label label2 = Label(\n            vec2(card.center.x-0.005,card.center.y+card.size.y*0.05),\n            vec2(card.size.x*0.92,card.size.y*0.6)\n        );\n    \tif(labelIntersect(label2,p))\n            o *=(1.4-labelDraw(label2,p));\n        \n        Label label3 = Label(\n            vec2(card.center.x-0.005,card.center.y-card.size.y*0.37),\n            vec2(card.size.x*0.92,card.size.y*0.2)\n        );\n    \tif(labelIntersect(label3,p))\n            o *=1.-labelDraw(label3,p);\n        \n        return o*1.4;\n    }\n    return vec3(.1);\n}\nvoid mainImage( out vec4 o, in vec2 p )\n{\n\tp = getCoords(p,iResolution.xy);\n    o = vec4(wood(p*6.),1.)*1.5;\n    \n    Card cards[7];\n    \n   \tcards[0] = Card(vec2(-1.3,.5),vec2(0.63,.88),vec3(.6,.5,.3)),\n    cards[1] = Card(vec2(-.6,.5),vec2(0.63,.88),vec3(.6,.2,.3)),\n    cards[2] = Card(vec2(0.3,.5),vec2(0.93,.88),vec3(.6,.5,.3)),\n    cards[3] = Card(vec2(-1.3,-.5),vec2(0.63,.88),vec3(.2,.5,.3)),\n    cards[4] = Card(vec2(-.6,-.5),vec2(0.63,.88),vec3(.4,.4,.5 )),\n    cards[5] = Card(vec2(1.3,.0),vec2(0.9,1.3),vec3(.8,.8,.8)),\n    cards[6] = Card(vec2(0.16,-.5),vec2(0.63,.88),vec3(.7,.7,.4 ));\n    \n    int l = cards.length();\n    for(int i=0;i<l;i++){\n        if(cardIntersect(cards[i],p))\n            o = vec4(cardDraw(cards[i],p),1.);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}