{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// MIT License\n\nfloat synthNoise(vec3 p) {\n    const float g = 1.61803398874989484820459;\n    const float g2 = (g * g);\n    \n    const vec2 v1 = vec2(g, 1.0 / g);\n    const vec2 v2 = vec2(-g2, 1.0 / g2);\n    const vec2 v3 = vec2(1.0, -g);\n    \n    float a = sin(dot(p.xy, v1) + p.z) * \n              cos(dot(p.yz, v2));\n              \n    float b = sin(dot(p.yz, v2) + p.x) * \n              cos(dot(p.zx, v3));\n              \n    float c = sin(dot(p.zx, v3) + p.y) * \n              cos(dot(p.xy, v1));\n    \n    float noise = (a + b + c) * 0.333333;\n    return noise * 0.5 + 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float scale = 16.0;\n    \n    vec3 p = vec3(uv * scale, iTime);\n    float n = synthNoise(p);\n    \n    vec3 p2 = vec3(uv * (scale / 2.0), iTime);\n    float n2 = synthNoise(p2) * 0.5;\n    \n    vec3 p3 = vec3(uv * (scale / 4.0), iTime);\n    float n3 = synthNoise(p3) * 0.25;\n    \n    n = (n + n2 + n3) / 1.75;\n    \n    fragColor = vec4(n, n, n, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lcVfDK","date":"1734483897","viewed":29,"name":"Psuedo Fast Perlin","username":"TheNuclearWolf","description":"I did a simplier version of this inside my Simple clouds shader, so wanted to see just how effective it could be.\nI just threw random values at this, So im sure it could be a lot faster, but the results are pretty good at small scales.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","fast","fake","perlin","psuedo"],"hasliked":0,"parentid":"","parentname":""}}