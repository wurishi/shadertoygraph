{"ver":"0.1","info":{"id":"XtSBzK","date":"1516399178","viewed":198,"name":"17/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I tested some terrain marching implementation from iq's articles: https://iquilezles.org/articles/terrainmarching/terrainmarching.htm","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["terrain","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 20.0\n#define EPSILON 0.01\n#define PI 3.14159265359\n#define PIXELR 0.5/iResolution.x\n\n#define FOG_COLOR vec3(0.55, 0.6, 0.75)\n#define SUN_COLOR vec3(0.64, 0.62, 0.6)\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 0.1031\n\n// 3D noise function (IQ)\nfloat noise(vec3 p){\n\tvec3 ip = floor(p);\n    p -= ip;\n    vec3 s = vec3(7.0,157.0,113.0);\n    vec4 h = vec4(0.0, s.yz, s.y+s.z)+dot(ip, s);\n    p = p*p*(3.0-2.0*p);\n    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\nfloat dist(vec2 p){\n    return noise(p.xyx)+(sin(p.x)*sin(p.y*2.0)+1.0);\n}\n\n\n//Based on Iq's terrain marching article\n//https://iquilezles.org/articles/terrainmarching\nfloat march(in vec3 ro, in vec3 rd, out bool hit){\n    \n    float delta = EPSILON;\n    float lh = 0.0;\n    float ly = 0.0;\n    float t = 0.0;\n    for(float i = EPSILON; i < STEPS; i += delta){\n        vec3 p = ro+rd*i;\n        float h = dist(p.xz);\n        if(p.y < h){\n            t = i-delta+delta*(lh-ly)/(p.y-ly-h+lh);\n            hit = true;\n            break;\n        }\n        delta = EPSILON*i;\n        lh = h;\n        ly = p.y;\n    }\n    \n    return t;\n}\n\nvec3 normals(vec3 p){\n    vec2 eps = vec2(PIXELR, 0.0);\n    return normalize(vec3(\n        dist(p.xz-eps.xy) - dist(p.xz+eps.xy),\n        2.0*eps.x,\n        dist(p.xz-eps.yx) - dist(p.xz+eps.yx)\n    ));\n}\n\n\n//Ambient occlusion method from https://www.shadertoy.com/view/4sdGWN\n//Random number [0:1] without sine from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff ){\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(dist( p.xz + rd.xz ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\nvec3 shade(vec3 p, vec3 rd, vec3 ld){\n    vec3 n = normals(p);\n    float lambertian = max(dot(n, ld), 0.0);\n    \n    vec3 color = vec3(0.5, 0.4, 0.65) * ambientOcclusion(p, n, 4.0, 2.0) +\n        lambertian*vec3(0.6, 0.6, 0.65);\n    \n    return color;\n}\n\n//Fog introduced in https://iquilezles.org/articles/fog\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.28);\n\tvec3  fogColor = mix(FOG_COLOR, SUN_COLOR, pow(sunAmount, 2.0));\n    return mix(col, fogColor, fogAmount);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 2.0, iTime*0.5+1.0);\n    vec3 rt = vec3(0.0, 1.5, ro.z+10.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(70.0)));\n    vec3 ld = (rt-vec3(0.5, 2.0, 0.0))/distance(rt, vec3(0.5, 2.0, 0.0));\n    \n    bool hit = false;\n    float t = march(ro, rd, hit);\n    vec3 p = ro+rd*t;\n    \n    vec3 color = FOG_COLOR;\n    if(hit){\n        color = shade(p, rd, ld);\n    }\n    \n    color = fog(color, p, ro, rd, ld);\n    color = smoothstep(-0.3, 1.0, color);\n    \n    color = pow(smoothstep(0.08, 1.1, color)*smoothstep(0.8, 0.005*0.799,\n        distance(uv, vec2(0.5))*(0.8 + 0.005)), 1.0/vec3(2.2));\n        \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}