{"ver":"0.1","info":{"id":"DtGSRV","date":"1686188524","viewed":68,"name":"ZeroIdea.exe","username":"LeNaut","description":"First experiment.\nUsed this tutorial: https://www.youtube.com/watch?v=f4s1h2YETNY&ab_channel=kishimisu","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radial","new"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.735, 0.161, 0.375);\n    vec3 b = vec3(0.801, 0.918, 0.468);\n    vec3 c = vec3(1.548, 1.490, 0.578);\n    vec3 d = vec3(1.708, 1.501, 2.741);\n    \n    return a + b*cos( 6.28318*(c*t+d) );   \n}\n\nfloat sdCircle( in vec2 p, in float r ) {\n    return length(p)-r;\n}\n\nfloat sdStar(in vec2 p, in float r, in int n, in float m) // m=[2,n]\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 4.0; i++) {\n        //uv = fract(uv * 1.2) - 0.5;\n\n        //float d = sdCircle(uv,4.0);\n        float d = sdStar( uv, 0.6, int(9.6), 12.0 );\n        d += length(uv) * exp(-length(uv0));\n        \n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*0.8);\n\n        d = sin(d*5. + iTime)/6.;\n        d = abs(d);\n        d = pow(0.007 / d, 1.1);\n\n        finalColor += col * d;\n    }\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 0.02) - 0.5;\n\n        float d = abs(cos(8.0*16.0));\n        d += length(uv) * exp(-length(uv0));\n        \n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*-0.2);\n\n        d = sin(d*10. + iTime)/6.;\n        d = abs(d);\n        d = pow(0.007 / d, 4.0);\n\n        finalColor += col * d;\n    }\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}