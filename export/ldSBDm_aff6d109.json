{"ver":"0.1","info":{"id":"ldSBDm","date":"1500655464","viewed":214,"name":"Simple checkerboard","username":"etale_cohomology","description":"Fork of https://www.shadertoy.com/view/4lyGRh\n\nA checkerboard in (essentially) two lines","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","grid","math","tutorial","checkerboard","tiling","tile","squares","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://www.shadertoy.com/view/4lyGRh\n// A checkerboard in (essentially) two lines\n\n#define N_TILES 4.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 st = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n  //st = mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime)) * st;  // See how not antialiased the checkerboard is =)\n  //st = vec2(st.s * st.s - st.t * st.t, 2. * st.s * st.t);  // See how not antialiased the checkerboard is =)\n\n  // Version 1!\n  //vec2 checkerboard = floor(st * N_TILES);\n  //float sdist_checkerboard = mod(checkerboard.x + checkerboard.y, 2.);\n\n  // Fabrice's version!\n  vec2 checkerboard = 1024. * sin(3.14159 * st * N_TILES);\n  float sdist_checkerboard = checkerboard.x * checkerboard.y;\n\n  fragColor.rgb = vec3(sdist_checkerboard);\n}\n","name":"Image","description":"","type":"image"}]}