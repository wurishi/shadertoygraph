{"ver":"0.1","info":{"id":"sdySDd","date":"1635981649","viewed":239,"name":"Image transition-noise","username":"therepo90","description":"Hold and move mouse to move pillar\n\nnoise fn from https://www.shadertoy.com/view/XdXBRH","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","imagetransition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 mod2(vec2 p, float d) {\n    float a = mod(p.x,d);\n    float b = mod(p.y,d);\n    return vec2(a,b);\n}\n\n\n\nvec3 laserTex(vec2 uv, vec2 mouse) {\n\n    //uv*=0.1;\n    vec3 col=vec3(0);\n    float thk=0.03;\n    vec3 barCol=vec3(0,1.0,1.0);\n    float edgeCloseFactor = smoothstep(mouse.x-thk,mouse.x,uv.x);\n    float barFactor = edgeCloseFactor* smoothstep(mouse.x+thk,mouse.x, uv.x);\n    col=vec3(barFactor);\n    return col;\n    \n}\n\n\nvec3 laserComposition(vec2 uv, vec2 mouse) {\n\n    vec3 laserMask = laserTex(uv,mouse);\n    vec3 laserCol = vec3(1.0, 0.5, 0.);\n    return laserMask.x * laserCol *2.;\n    //return laserMask;\n    \n}\n\nvec2 hash( in vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n\n// return gradient noise (in x) and its derivatives (in yz)\nvec3 noised( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n#if 1\n    // quintic interpolation\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n#else\n    // cubic interpolation\n    vec2 u = f*f*(3.0-2.0*f);\n    vec2 du = 6.0*f*(1.0-f);\n#endif    \n    \n    vec2 ga = hash( i + vec2(0.0,0.0) );\n    vec2 gb = hash( i + vec2(1.0,0.0) );\n    vec2 gc = hash( i + vec2(0.0,1.0) );\n    vec2 gd = hash( i + vec2(1.0,1.0) );\n    \n    float va = dot( ga, f - vec2(0.0,0.0) );\n    float vb = dot( gb, f - vec2(1.0,0.0) );\n    float vc = dot( gc, f - vec2(0.0,1.0) );\n    float vd = dot( gd, f - vec2(1.0,1.0) );\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   // value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  // derivatives\n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n}\n\nvoid Unity_GradientNoise_float(vec2 UV, float Scale, out float Out)\n    {\n       Out = noised(UV * Scale).x *0.5 + 0.5;\n    }\n       \nvoid Unity_Multiply_float2_float2(vec2 A, vec2 B, out vec2 Out)\n{\n    Out = A * B;\n}\n\nvoid Unity_TilingAndOffset_float(vec2 UV, vec2 Tiling, vec2 Offset, out vec2 Out)\n{\n    Out = UV * Tiling + Offset;\n}\n\nvoid Unity_Lerp_float4(vec4 A, vec4 B, vec4 T, out vec4 Out)\n{\n    Out = mix(A, B, T);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    if(mouse.x < 0.01) {\n    // init\n        mouse.x = 0.5;\n    }\n    vec2 uv = fragCoord/iResolution.xy;\n    float asp = iResolution.y / iResolution.x;\n    uv.x/=asp;\n    mouse.x/=asp;\n\n            vec2 timeF = vec2(0.1, 0);\n            vec2 timeOffset = iTime * timeF;\n            vec2 uvTiled;\n            Unity_TilingAndOffset_float(uv, vec2 (1, 1), timeOffset, uvTiled);\n            \n    float gradientNoise;\n    Unity_GradientNoise_float(uvTiled, 11., gradientNoise);\n    \n\n    \n    float distortionAmount=0.1;\n    vec4 lerpedValue;\n    Unity_Lerp_float4(vec4(uv,0.,0.), vec4(gradientNoise),vec4(distortionAmount), lerpedValue);\n    \n    vec3 laserCol = laserComposition(lerpedValue.xy,mouse);\n    \n    //vec3 col = lerpedCol;\n    \n        //float edgeCloseFactor = smoothstep(mouse.x-thk-offset1-0.03,mouse.x-offset1,uv.x);\n    //float barFactor = edgeCloseFactor* smoothstep(mouse.x+thk-offset1,mouse.x-offset1, uv.x);\n    \n    vec3 col1=texture(iChannel0, uv).xyz;\n    vec3 col2=texture(iChannel1, uv).xyz;\n    vec3 col;\n     col=mix(col1,col2,step(mouse.x, lerpedValue.x));\n     //col*=laserCol;\n     col+=laserCol;\n     //col=mix(col,laserCol,0.5);\n    //col = laserTex(uv, mouse);\n    //col = vec3(uvTiled,0.);\n    //col = vec3(gradientNoise);\n    //col = vec3(lerpedValue);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}