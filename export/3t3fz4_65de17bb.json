{"ver":"0.1","info":{"id":"3t3fz4","date":"1660349155","viewed":118,"name":"idk help meee","username":"newtaki168","description":"yayyyyyy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["yay"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define EPSILON .01\n\nfloat dot2(vec3 a){return dot(a,a);}\n\nmat2 rotate(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat random(vec3 p)\n{\n    return fract(sin(p.x*2348.+p.y*9834.+p.z*5438.)*7420.);\n}\n\nfloat voronoi3d(vec3 p,float s,float r)\n{\n    vec3 fr = fract(p*s)-.5;\n    vec3 fl = floor(p*s);\n    vec3 pos = vec3(0);\n    vec3 e = vec3(0,1,-1);\n    vec3 n[] = vec3[](e.xxx,e.yxx,e.xyx,e.yyx,e.zxx,e.xzx,e.zzx,e.zyx,e.yzx,\n                      e.xxy,e.yxy,e.xyy,e.yyy,e.zxy,e.xzy,e.zzy,e.zyy,e.yzy,\n                      e.xxz,e.yxz,e.xyz,e.yyz,e.zxz,e.xzz,e.zzz,e.zyz,e.yzz);\n    float m = 10.;\n    \n    for(int i=0;i<26;i++)\n    {\n        vec3 neighbor = n[i];\n        vec3 of = fl+neighbor;\n        vec3 r = vec3(random(of),random(of-1.),random(of+1.));\n        vec3 np = r-vec3(.5,.5,0);\n        m = min(length(np-(fr-neighbor)),m);\n    }\n    return m-r;\n}\n\nfloat unionsdf(float a,float b){return min(a,b);}\n\nfloat intersectsdf(float a,float b)\n{\n    float ma = max(a,0.);\n    float mb = max(b,0.);\n    float o = sqrt(ma*ma+mb*mb);\n    float i = min(max(a,b),0.);\n    \n    return o+i;\n}\n\nfloat differencesdf(float a,float b)\n{\n    return intersectsdf(a,-b);\n}\n\nfloat sunionsdf(float a,float b,float s)\n{\n    float h = clamp(.5+.5*(b-a)/s,0.,1.);\n    return mix(b,a,h)-s*h*(1.-h);\n}\n\nfloat sdifferencesdf(float a,float b,float s)\n{\n    float h = clamp(.5-.5*(b+a)/s,0.,1.);\n    return mix(b,-a,h)+s*h*(1.-h);\n}\n\nfloat sintersectsdf(float a,float b,float s)\n{\n    float h = clamp(.5-.5*(b-a)/s,0.,1.);\n    return mix(b,a,h)+s*h*(1.-h);\n}\n\nfloat ground(vec3 p){return p.y;}\n\nfloat sphere(vec3 p,float r)\n{\n    return length(p)-r;\n}\n\nfloat disc(vec3 p,float s,float r)\n{\n    float d = max(length(p*vec3(1,0,1))-s,0.);\n    \n    return sqrt(d*d+p.y*p.y)-r;\n}\n\nfloat box(vec3 p,vec3 d)\n{\n    vec3 c = abs(p)-d;\n    float o = length(max(c,vec3(0)));\n    float i = min(max(max(c.x,c.y),c.z),0.);\n    return i+o;\n}\n\nfloat bezier(vec3 p,vec3 v1,vec3 v2,vec3 v3,float r)\n{    \n    vec3 a = v2 - v1;\n    vec3 b = v1 - 2.0*v2 + v3;\n    vec3 c = a * 2.0;\n    vec3 d = v1 - p;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float o = ky - kx*kx;\n    float p3 = o*o*o;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-o);\n        float v = acos( q/(o*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n    }\n    return sqrt(res)-r;\n}\n\nfloat scene(vec3 p)\n{    \n    float ground = ground(p+1.5);\n    \n    //MOUSE//\n    \n    float head = sphere(p-vec3(-.1,1,0),1.);\n        \n    float snout = sphere(p-vec3(1.2,.8,0),.3);\n    \n    float nose = sphere(p-vec3(1.6,.9,0),.17);\n    \n    vec3 dp = vec3(p.x,p.y,abs(p.z))-vec3(-.1,1.8,.9);\n    dp.xy *= rotate(radians(100.));\n    dp.yz *= rotate(radians(-50.));\n    float ears = disc(dp,.6,.2);\n        \n    float top = sphere(p-vec3(-.5,.2,0),1.);\n    \n    float bottom = sphere(p-vec3(-.45,-.5,0),1.);\n    \n    float tail = bezier(p,vec3(-4,-1.35,.6),vec3(-2,-1.45,-.5),vec3(-1.2,-1.,0),.1);\n    \n    float mouse = sunionsdf(head,snout,1.);\n    mouse = sunionsdf(mouse,nose,.05);\n    mouse = sunionsdf(mouse,ears,.4);\n    mouse = sunionsdf(mouse,top,.5);\n    mouse = sunionsdf(mouse,bottom,.5);\n    mouse = sunionsdf(mouse,tail,.4);\n    \n    //CHEESE//\n    \n    float block = box(p-vec3(2.5,-.7,0),vec3(.75))-.03;\n    \n    float holes = voronoi3d(p,1.5,.45);\n    \n    float cheese = differencesdf(block,holes);\n    \n    \n    \n    float scene = unionsdf(mouse,cheese);\n    \n    scene = unionsdf(scene,ground);\n    \n    return scene;\n}\n\nvec4 raymarch(vec3 ro,vec3 rd)\n{\n    float sdf = 0.;\n    \n    for(int i=0;i<MAX_STEPS;i++)\n    {\n        ro += rd*sdf;\n        sdf = scene(ro);\n    }\n    return vec4(ro,sdf);\n}\n\nvec3 normal(vec4 raymarch)\n{\n    vec3 p = raymarch.xyz;\n    float d = raymarch.w;\n    \n    vec2 e = vec2(0,EPSILON);\n    vec3 n = normalize(vec3(scene(p+e.yxx),scene(p+e.xyx),scene(p+e.xxy))-d);\n    \n    return n;\n}\n\nvec3 orbit(vec2 uv, vec3 ro, vec3 l)\n{\n    vec3 f = normalize(l-ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 i = ro+f+uv.x*r + uv.y*cross(f,r);\n    \n    return normalize(i-ro);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord/iResolution.xy-.5)*2.;\n    float aspectRatio = iResolution.x/iResolution.y;\n    uv.x *= aspectRatio;\n    vec2 m = iMouse.xy/iResolution.xy;\n    //m = vec2(0.775823,0.114435);//\n    \n    vec3 ro = vec3(0,2,-6);\n    ro.yz *= rotate(-m.y*3.14+1.);\n    ro.xz *= rotate(-m.x*6.2831);\n    \n    vec3 rd = orbit(uv,ro,vec3(0,1,0));\n    \n    vec4 ray = raymarch(ro,rd);\n    vec3 n = normal(ray);\n    float c = ray.w;\n    if(c<.5)c = 1.;else c = 0.;\n    n *= c;\n    \n    fragColor = vec4(n,1);\n}","name":"Image","description":"","type":"image"}]}