{"ver":"0.1","info":{"id":"mscXz4","date":"1679455406","viewed":127,"name":"Sine Wave with smoothstep","username":"JetStreamSham","description":"msm01 recommended I try making a Sine Wave using smoothstep and mix and FabriceNeyret2 recommended I use pixel thickness. It's less code than my other sine wave shader. I think it looks good. \n\nComments, questions, and criticisms are welcome :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mix","sine","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from  to 1) and respect to y\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    \n    // Time varying pixel color\n    vec3 bgColor = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 sinColor = vec3(0.);\n    \n\n\n    //this is the general form of a wave\n    //a good video to watch if you're not familar\n    //or want to brush up is \n    //https://www.youtube.com/watch?v=9WZM68aVnGk\n    float theta = 2.*PI*uv.x;\n    float amplitude = .49;\n    float frequency = (2.*PI);\n    float phase = iTime;\n    float meanAltitude = .5;\n\n    float height = amplitude * sin(uv.x*frequency + phase) + meanAltitude;\n    \n    //distance is the pixel's y cooardinate subtracted by sin's output\n    float distanceToSin = (uv.y) - height;\n\n    //The pixel's true width\n    float thickness = 1.5/iResolution.y;\n    \n    float interpolation = smoothstep(0.,thickness+m.y,abs(distanceToSin));\n    //interpolation = step(thickness+m.y,abs(distanceToSin));\n\n    vec3 col = mix(sinColor,bgColor,interpolation);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}