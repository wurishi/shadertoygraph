{"ver":"0.1","info":{"id":"DlSyWd","date":"1692402901","viewed":106,"name":"Kishimisu Visualizer","username":"Ebanflo","description":"made kishimisu's fractal structure musical\nhttps://youtu.be/f4s1h2YETNY\nhttps://www.shadertoy.com/view/mtyGWy","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["2d","fractal","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 palette(float t) {\n    vec3 a = vec3(0.8, 0.2, 0.6);\n    vec3 b = vec3(0.0, 0.2, 0.9);\n    vec3 c = vec3(0.6, 0.2, 0.5);\n    vec3 d = vec3(0.4, 0.2, 0.7);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for  (int i = 0; i < 6; i++){\n    \n        float octave_energy = texture(iChannel0, vec2(float(i)/6.0, 0.25)).r;\n    \n        uv = fract(uv * 1.5) - 0.5;\n    \n        float d = length(uv) * exp(-length(uv0));\n    \n        vec3 col = palette(length(uv0) + float(i)*.4 + 2.*float(1 + i)*octave_energy);\n    \n        d = sin(d*16. + (16. - float(i))*octave_energy)/8.;\n        d = abs(d);\n        \n        d = pow(0.01 /d, 1.2);\n   \n       finalColor+= 0.3*col *d;\n    }\n    \n   \n   fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// low pass filter of the power in each frequency seems to stabilize note identification\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 5) {\n        fragColor = vec4(0, 0, 0, 1);\n    } else {\n        fragColor = 0.95*pow(texture(iChannel0, fragCoord/iResolution.xy), vec4(2))\n                  + 0.05*pow(texture(iChannel1, fragCoord/iResolution.xy), vec4(2));\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// sampling of the texture thanks to Gibj\n// https://www.shadertoy.com/view/4dc3zH\n\nconst float A = 0.0370;\nconst float semitone  = pow(2.0, 1.0/12.0);\n\nfloat note_to_freq(int n){\n    return pow(semitone, float(n - 49))*440.;\n}\n\nfloat freq_to_text(float freq){\n    return freq*A/440.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    //int y_ix = int(uv.y > 0.5);\n    //int x_ix = int(step(0.333, uv.x) + step(0.666, uv.x));\n    int octave = int(floor(6.0*uv.x));\n\n    int start_note = 12*octave + 6;\n    float[12] texture_indices;\n    for(int i = 0; i < 12; i++) {\n        texture_indices[i] = freq_to_text(note_to_freq(start_note + i));\n    }\n    \n    for(int i = 0; i < 12; i++) {\n        fragColor.r += texture(iChannel1, vec2(texture_indices[i], 0.25)).r;\n    }\n    \n    //ivec3 current_notes = current_notes(texture_indices);\n    //ivec2 ratios = get_ratios(current_notes);\n    \n    //fragColor.rg = 0.5*texture(iChannel0, uv).rg + 0.5*vec2(1 + current_notes.yz);\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}