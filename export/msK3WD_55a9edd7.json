{"ver":"0.1","info":{"id":"msK3WD","date":"1693264925","viewed":35,"name":"quicj ray machr","username":"artefox","description":"quicj ray machr","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["quicjraymachr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAXSTEPS 100\n#define MAXDIST 100.0\n#define SURFDIST 0.01\n\nfloat getDist(vec3 p)\n{\n    vec4 s = vec4(0.0, 1.0, 6.0, 1.0);\n    \n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.0;\n    \n    for(int i = 0; i < MAXSTEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        \n        float dS = getDist(p);\n        dO += dS;\n        \n        if(dO > MAXDIST || dS < SURFDIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d = getDist(p);\n    vec2 e = vec2(0.01, 0.0);\n    \n    vec3 n = d - vec3\n    (\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat getLight(vec3 p)\n{\n    vec3 lightPos = vec3(0.0, 5.0, 6.0);\n    lightPos.xz += vec2(sin(iTime), cos(iTime) * 2.0);\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float d = rayMarch(p + n * SURFDIST * 2.0, l);\n    if(d < length(lightPos - p)) dif *= 0.1;\n    return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    vec3 ro = vec3(0.0, 1.0, 0.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n    float d = rayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n\n    float dif = getLight(p);\n    col = vec3(dif);\n    \n    //col = pow(col, vec3(1.0/2.2));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}