{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// raymarcher from https://www.shadertoy.com/view/XsB3Rm\n\n// ray marching\nconst int max_iterations = 80;\nconst float stop_threshold = 0.001;\nconst float grad_step = 0.0001;\nconst float clip_far = 1000.0;\n\n// math\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\n\n// get distance in the world\nfloat dist_field(vec3 p) {\n    p = mod(p, 8.0) - 4.0;\n    p = abs(p);\n    float cube = length(max(p - 1.0, 0.0));\n    //return cube;\n    float xd = max(p.y,p.z);\n    float yd = max(p.x,p.z);\n    float zd = max(p.x,p.y);\n    float beams = min(zd, min(xd, yd)) - 0.25;\n    //return beams;\n    return min(beams, cube);\n}\n// phong shading\nvec3 shading( vec3 v, vec3 n, vec3 eye ) {\n\tvec3 light_pos   = vec3( 100.0 * cos(iTime*0.2), 200.0 * sin(iTime*0.4), 20.0 );\n\tvec3 light_color = vec3( 0.2 );\n\tvec3 vl = normalize( light_pos - v );\n\tfloat diffuse  = abs(dot( vl, n ) );\n\treturn light_color * diffuse; \n}\n\n// get gradient in the world\nvec3 gradient( vec3 pos ) {\n\tconst vec3 dx = vec3( grad_step, 0.0, 0.0 );\n\tconst vec3 dy = vec3( 0.0, grad_step, 0.0 );\n\tconst vec3 dz = vec3( 0.0, 0.0, grad_step );\n\treturn normalize (\n\t\tvec3(\n\t\t\tdist_field( pos + dx ) - dist_field( pos - dx ),\n\t\t\tdist_field( pos + dy ) - dist_field( pos - dy ),\n\t\t\tdist_field( pos + dz ) - dist_field( pos - dz )\t\t\t\n\t\t)\n\t);\n}\n\n// ray marching\nfloat ray_marching( vec3 origin, vec3 dir, float start, float end ) {\n\tfloat depth = start;\n\tfor ( int i = 0; i < max_iterations; i++ ) {\n\t\tfloat dist = dist_field( origin + dir * depth );\n\t\tif ( dist < stop_threshold ) {\n\t\t\treturn depth;\n\t\t}\n\t\tdepth += dist;\n\t\tif ( depth >= end) {\n\t\t\treturn end;\n\t\t}\n\t}\n\treturn end;\n}\n\n// get ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\t\n\treturn normalize( vec3( xy, -z ) );\n}\n\n// camera rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// default ray dir\n\tvec3 dir = ray_dir( 35.0, iResolution.xy, fragCoord.xy );\n\t\n\t// default ray origin\n\tvec3 eye = vec3( 0.0, 0.0, 10.0 );\n\n\t// rotate camera\n\tmat3 rot = rotationXY( vec2( iTime * 0.13, iTime * 0.19 ) );\n\tdir = rot * dir;\n\teye = rot * eye;\n    eye.z -=  mod(iTime * 4.0, 8.0);\n    eye.y = eye.x = 0.0;\n\t\n\t// ray marching\n\tfloat depth = ray_marching( eye, dir, 3.75, clip_far );\n\tif ( depth >= clip_far ) {\n\t\tfragColor = vec4(1.0);\n    } else {\n\t\t// shading\n\t\tvec3 pos = eye + dir * depth;\n\t\tvec3 n = gradient( pos );\n\t\tfragColor = vec4( shading( pos, n, eye ) , 1.0 );\n        fragColor += depth/clip_far * 12.0;\n    }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsSXzw","date":"1410491649","viewed":361,"name":"Reproduction III","username":"yonatan","description":"M. C. Escher's \"Cubic Space Division\"","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","escher"],"hasliked":0,"parentid":"","parentname":""}}