{"ver":"0.1","info":{"id":"flcyD7","date":"1659894552","viewed":248,"name":"10 PRINT wallpaper","username":"CanadianWarship","description":"Simple, optionally time varying shader inspired by the famous C64 one-line maze generator 10 PRINT CHR$ (INT(205.5 + RND(1)) ; : GOTO 10\nMore information (a whole book!) can be found at https://10print.org\nModified to look best as a desktop wallpaper","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["maze","wallpaper","10print"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"10 PRINT inspired maze\" by CanadianWarship. https://shadertoy.com/view/NtcyD7\n// Modified to look best as a desktop wallpaper: \n//  slower to evolve, darker, slowly scrolling\n// 2022-08-07 17:42:59\n\n\n#define CellNumber 20. // how many cells span the shorter side, any float\n#define Bias 0. // how frequent fwd slashes are relative to back slashes, [-0.5 ~ 0.5] default 0.\n#define Thickness 0.2 // how thick the slashes are, [0. ~ 1.] default 0.2\n#define TimeFactor 0.01 // how quickly the picture evolves, any float, default 0. or 0.05\n\nfloat random( vec2 n ){ // https://thebookofshaders.com/10/\n    return fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * \n        (43758.5453 + TimeFactor*iTime)); // default prng has no iTime\n}\n\nfloat slash (in vec2 position, vec2 uv){ //generates slash given cell coordinate and cell uv\n    float direction = random(position), result; // random float [0. ~ 1.]\n    if (direction > 0.5 - Bias) //choose cell orientation\n        abs(uv.x - uv.y) < Thickness ? result = 1. : result; // downleft - upright : fwd slash\n    else\n        abs(uv.x + uv.y - 1.) < Thickness ? result = 1. : result; // upleft - downright : backslash\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y); // uv coordinates\n    uv += vec2(0.0117, 0.00420)*iTime; // slow scrolling\n    vec2 pos = floor(uv * CellNumber) / CellNumber; // cell coordinates\n    vec2 celluv = fract(uv*CellNumber); // uv for each cell\n    float result = slash(pos, celluv); // draw slashes\nfragColor = vec4( 0.5*result , 0.0 , 0.0 , 1.0);\n}","name":"Image","description":"","type":"image"}]}