{"ver":"0.1","info":{"id":"lcK3Dm","date":"1712868796","viewed":40,"name":"Прак 2","username":"Mashaaaaa","description":"222","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["222"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\n#define minZ 0.0\n#define maxZ 100.0\n\nstruct Surface {\n    float sd; \n    vec3 col;\n};\n\nvec3 sdfCircle(vec2 uv, float r, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    float d = length(vec2(x, y)) - r;\n    return d < 0. ? vec3(1.) : vec3(0., 0., 1.);\n}\n\n\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col) // сфера\n{\n    float d = length(p - offset) - r;\n    return Surface(d, col); \n}\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 transform) //куб\n{\n    p = (p - offset) * transform;\n    vec3 q = abs(p) - b;\n    float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n    return Surface(d, col);\n}\n\n\nSurface minWithColor(Surface obj1, Surface obj2) {\n    if (obj2.sd < obj1.sd) return obj2;\n    return obj1;\n}\n\nSurface sdScene(vec3 p) { //сцена\n    Surface sphere = sdSphere(p, 1., vec3(-3.*cos(iTime), -1.*sin(iTime), 0), 0.5 + 0.9*cos(iTime+vec3(0,2,4)));\n    Surface box = sdBox(p, vec3(1,1,1), vec3(3, 1.4, 0.2), 0.5 + 0.3*sin(iTime+vec3(0,2,4)), rotateX(2.0*(iTime)));\n    Surface co = minWithColor(sphere, box);\n    return co;\n}\n\nvec3 calcNormal(vec3 p) { //функция возвращает направление луча, которое представляет направление, в котором смотрит точка на сфере\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    float r = 1.;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd+\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\n// создаём функцию реализующую алгоритм прохождения лучей\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) \n{\n    float depth = start;\n    Surface co;\n\n    for (int i = 0; i < 255; i++) // глубина\n    {\n        vec3 p = ro + depth * rd;\n        co = sdScene(p);\n        depth += co.sd; //увеличили глубину на значение расстояния\n        if (co.sd < 0.001 || depth > end) break; // смотрим близко или далеко\n    }\n    co.sd = depth;\n    return co;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y;\n  \n    // Цвет фона\n    vec3 backgroundColor = vec3(0.9, 0.8, 0.9);\n    vec3 col = vec3(0.5);\n    vec3 ro = vec3(0, 0, 7); // откуда выходят лучи\n    vec3 rd = normalize(vec3(uv, -1)); // направление луча\n    Surface co = rayMarch(ro, rd, minZ, maxZ); //расстояние\n    if (co.sd > maxZ) \n    {\n    col = backgroundColor; // если луч не уперся\n} else{\n    vec3 p = ro + rd * co.sd;\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2, 2, 7); //место источника света\n    vec3 lightDirection = normalize(lightPosition - p); //направление светового луча\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.0); //вычисляем скалярное произведение, чтобы найти количество света падающего на поверхность сферы\n    col = dif * co.col + backgroundColor * .2;\n    \n}\n\nvec2 offset = vec2(cos(iTime*2.)*0.5, cos(iTime*2.)*0.5); \nfloat r =0.15;\nfloat x = uv.x - offset.x;\nfloat y = uv.y - offset.y;\nfloat d = length(vec2(x, y)) - r;\nif (d < 0.){ col = vec3(x*x/r/r, y*y/r/r,cos(iTime*2.)*0.5);}\n\nvec2 offset2 = vec2(cos(iTime*2.)*0.5, sin(iTime*3.)*0.5); \nfloat r2 =0.1;\nfloat x2 = uv.x - offset2.x;\nfloat y2 = uv.y - offset2.y;\nfloat d2 = length(vec2(x2, y2)) - r2;\nif (d2 < 0.){ col = vec3(1., 1., 1.);}\n\nvec2 offset3 = vec2(0.2*cos(iTime*3.)*(0.4), 0.5*sin(iTime*4.)); \nfloat r3 =0.12;\nfloat x3 = uv.x - offset3.x;\nfloat y3 = uv.y - offset3.y;\nfloat d3 = length(vec2(x3, y3)) - r3;\nif (d3 < 0.){ col = vec3(0.9, 0.65, 0.5);}\n\n// Вывод на экран\nfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}