{"ver":"0.1","info":{"id":"43sGDM","date":"1707586621","viewed":78,"name":"2D stroke and fill round rect","username":"joyo","description":"2D stroke and fill cross round rectangle","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define fix  1.0  // why need to fix 1 pixel?\n// pixel is a ⊡, (1,1) to (3,1) has 3 ⊡⊡⊡ but distance is 2\n// so, if radius = 3, it should be (radius-1) when calculate.\n\nfloat drawRect(vec2 p, vec4 rect, vec4 radius, vec4 border)\n{\n    vec4 outer = vec4(rect.x-border.w, rect.y-border.z, rect.z+border.x, rect.w+border.y);\n    vec4 inner = rect;\n    \n    if(radius.x>0./*left,top*/){\n        vec2 lt = vec2(outer.x+radius.x, outer.w-radius.x);\n        if( p.x < lt.x && p.y > lt.y && p.x >= outer.x && p.y <= outer.w){\n           //return max(distance(lt, p)-radius.x+fix, 0.); // why need add 1.0 ?\n           float d = distance(lt, p)-(radius.x-fix);\n           if(d > 0.){\n               return d;\n           }else{\n               //return max(abs(d)-border.w+fix, 0.);\n               d = abs(d)-(border.w-fix);\n               if(d > 1.){\n                   return -1.;\n               }\n               return 0.;\n           }\n        }\n\n    }\n    \n    if(radius.y>0./*right,top*/){\n        vec2 rt = vec2(outer.z-radius.y, outer.w-radius.y);\n        if( p.x > rt.x && p.y > rt.y && p.x <= outer.z && p.y <= outer.w){\n           //return max(distance(rt, p)-radius.y+fix, 0.);\n           float d = distance(rt, p)-(radius.y-fix);\n           if(d > 0.){\n               return d;\n           }else{\n               //return max(abs(d)-border.x+fix, 0.);\n               d = abs(d)-(border.x-fix);\n               if(d > 1.){\n                   return -1.;\n               }\n               return 0.;\n           }\n\n        }\n\n    }\n    \n    if(radius.z>0./*right,bottom*/){\n        vec2 rb = vec2(outer.z-radius.z, outer.y+radius.z);\n        if( p.x > rb.x && p.y < rb.y && p.x <= outer.z && p.y >= outer.y){\n           //return max(distance(rb, p)-radius.z+fix, 0.);\n           float d = distance(rb, p)-(radius.z-fix);\n           if(d > 0.){\n               return d;\n           }else{\n               //return max(abs(d)-border.y+fix, 0.);\n               d = abs(d)-(border.y-fix);\n               if(d > 1.){\n                   return -1.;\n               }\n               return 0.;\n           }\n        }\n\n    }\n    \n    if(radius.w>0./*left,bottom*/){\n        vec2 lb = vec2(outer.x+radius.w, outer.y+radius.w);\n        if( p.x < lb.x && p.y < lb.y && p.x >= outer.x && p.y >= outer.y){\n           //return max(distance(lb, p)-radius.w+fix, 0.);\n           float d = distance(lb, p)-(radius.w-fix);\n           if(d > 0.){\n               return d;\n           }else{\n               //return max(abs(d)-border.z+fix, 0.);\n               d = abs(d)-(border.z-fix);\n               if(d > 1.){\n                   return -1.;\n               }\n               return 0.;\n           }\n           \n        }\n\n    }\n    \n    if(p.x >= outer.x && p.y >= outer.y && p.x <= outer.z && p.y <= outer.w){\n        if(p.x > inner.x && p.y > inner.y && p.x < inner.z && p.y < inner.w){\n            return -1.;\n        }else{\n            return 0.;\n        }\n        \n    }\n    \n    return 1.;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 bgColor = vec4(1.0);\n    vec4 rect1 = vec4(100., 100., 500., 500.);\n    vec4 radius1 = vec4((sin(iTime) + 1.0f) * 100.0f, (cos(iTime) + 1.0f) * 100.0f, (sin(iTime) + 1.0f) * 100.0f, (cos(iTime) + 1.0f) * 100.0f);\n    vec4 border1 = vec4((sin(iTime+30.) + 1.0f) * 10.0f);\n    vec4 red = vec4(1.0, 0., 0., 1.);\n    vec4 blue = vec4(0.0, 0., 1., 1.);\n    float d = drawRect(fragCoord, rect1, radius1, border1);\n    if(d==-1.){\n        fragColor = blue;\n    }else{\n        fragColor = mix(red, bgColor, d);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}