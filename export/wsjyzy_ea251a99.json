{"ver":"0.1","info":{"id":"wsjyzy","date":"1588872554","viewed":43,"name":"Hw9 - Cornell Box Scene, Basic","username":"vmoniqb","description":"Hw9","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raycast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOVY = 3.14159 * 0.25;\nconst int RAY_STEPS = 256;\n\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\t// Assign every object in scene a unique ID int\n};\n    \nstruct PointLight \n{\n    vec3 pos;\n    vec3 color;\n};\n\n\n    \nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n\nvec3 rotatePtY(vec3 pt, float a)\n{    \n    pR(pt.yz, 0.);\n    pR(pt.xz, a);\n    pR(pt.xy, 0.);\n    \n    return pt;\n}\n\n\nvoid rayCast(vec3 eye, vec3 ref, vec2 ndc, out vec3 dir) {\n    \n    // Compute camera axis\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V; \n    \n    dir = normalize(p - eye);\n}\n\n  \n// SHAPE SDFs\nfloat cube(vec3 p, vec3 c) {\n    return length(max(abs(p) - c, 0.0));\n}\n\nfloat squarePlane(vec3 p, vec4 n)\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n#define BACK_WALL_SDF \tsquarePlane(pos + vec3(0.0, 0.0, 8.6), vec4(0., 0., -1., 1.))\n#define BACK_WALL_ID \t1\n#define CEILING_SDF \tsquarePlane(pos + vec3(0.0, -0.15, 0.0), vec4(0., -1., 0., 1.))\n#define CEILING_ID \t\t2\n#define FLOOR_SDF\t \tsquarePlane(pos + vec3(0.0, -0.15, 0.0), vec4(0., 1., 0., 1.))\n#define FLOOR_ID\t\t3\n#define RIGHT_WALL_SDF \tsquarePlane(pos + vec3(0.0, 0.0, 0.0), vec4(-1., 0., 0., 1.))\n#define RIGHT_WALL_ID\t4\n#define LEFT_WALL_SDF \tsquarePlane(pos + vec3(0.0, 0.0, 0.0), vec4(1., 0., 0., 1.))\n#define LEFT_WALL_ID\t5\n#define TALL_CUBE_SDF\tcube(rotatePtY(pos + vec3(-0.371, 0.3, 8.), -0.5), vec3(0.28, 0.56, 0.28))\n#define TALL_CUBE_ID\t6\n#define SHORT_CUBE_SDF\tcube(rotatePtY(pos + vec3(0.371, 0.59, 8.4), 0.4), vec3(0.25, 0.25, 0.25))\n#define SHORT_CUBE_ID\t7\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos) {\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL_ID;\n    \n    float t2;\n    if ((t2 = CEILING_SDF) < t) {\n    \tt = t2;\n        obj = CEILING_ID;\n    }\n    \n    if ((t2 = FLOOR_SDF) < t) {\n    \tt = t2;\n        obj = FLOOR_ID;\n    }\n    \n    if ((t2 = RIGHT_WALL_SDF) < t) {\n    \tt = t2;\n        obj = RIGHT_WALL_ID;\n    }\n    \n    if ((t2 = LEFT_WALL_SDF) < t) {\n    \tt = t2;\n        obj = LEFT_WALL_ID;\n    }\n    \n    if ((t2 = TALL_CUBE_SDF) < t) {\n    \tt = t2;\n      obj = TALL_CUBE_ID;\n    }\n    \n    if ((t2 = SHORT_CUBE_SDF) < t) {\n    \tt = t2;\n    \tobj = SHORT_CUBE_ID;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos) {\n    float t = BACK_WALL_SDF;\n    \n    float t2;\n    if ((t2 = CEILING_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = FLOOR_SDF) < t) {\n    \tt = t2;\n    }\n        \n    if ((t2 = RIGHT_WALL_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = LEFT_WALL_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = TALL_CUBE_SDF) < t) {\n    \tt = t2;\n    }\n \n    if ((t2 = SHORT_CUBE_SDF) < t) {\n    \tt = t2;\n    }\n    \n    return t;\n}\n\n\nvec3 computeNormal(vec3 pos, vec3 lightPos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                            sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                            sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos) {\n    t = 0.001;\n    \n    for (int i = 0; i < RAY_STEPS; ++i) {\n    \tvec3 pos = origin + t * dir;\n        float m; // Minimum distance from this point to an object in the scene\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if (m < 0.01) {\n        \treturn;\n        }\n        t += m;\n    }\n\t// We hit nothing\n    t = -1.0;\n    hitObj = -1;\n}\n\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {\n    float lambert = dot(lightVec, n);\n    switch(hitObj) {\n        case FLOOR_ID:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case CEILING_ID:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case BACK_WALL_ID:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case RIGHT_WALL_ID:\n        return vec3(1., 0., 0.) * lambert;\n        break;\n        case LEFT_WALL_ID:\n        return vec3(0., 1., 0.6) * lambert;\n        break;\n        case TALL_CUBE_ID:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case SHORT_CUBE_ID:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos) {\n\tfloat t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n        \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n        \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    PointLight light = PointLight(vec3(0., 1.135, -8.8), vec3(0.5,.5,0.5));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Convert to range [-1,1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0, 0.5, -12);\n    //vec3 eye = vec3(0, 0, -10); // -10 --> +z = into screen (forward), +x = left, +y = up\n    \t\t\t\t\t\t\t// +10 --> -z = into screen, +x = right, +y = up\n    vec3 ref = vec3(0, 0, 0);\n    vec3 rayDir;\n    \n    rayCast(eye, ref, uv, rayDir);\n    \n    Intersection isect = sdf3D(rayDir, eye, light.pos);\n\n    // Output to screen\n    fragColor = vec4(isect.color, 1.);\n}","name":"Image","description":"","type":"image"}]}