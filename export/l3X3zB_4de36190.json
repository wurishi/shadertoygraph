{"ver":"0.1","info":{"id":"l3X3zB","date":"1707601729","viewed":106,"name":"quest3 cap correction(crosseye)","username":"mer2","description":"https://twitter.com/_mer2/status/1712160184867705112\nhttps://twitter.com/_mer2/status/1743347884400246940\nrequired:\nhttps://chromewebstore.google.com/detail/jgeibpcndpjboeebilehgbpkopkgkjda","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["stereoscopic","quest3","developerhub"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//reference:\n//https://www.shadertoy.com/view/XlsGWf\n//https://www.shadertoy.com/view/mtyyWc\n//https://www.shadertoy.com/view/4sXcDN\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n\n    //vec2 centerCoord = vec2(0.5) * iResolution.xy;\n    //float dist = max(0.0, iResolution.y - distance(fragCoord, centerCoord));\n    //float rotation = round(dist * 0.02);\n    //float strength = distance(centerCoord, iMouse.xy) * (1.0 / iResolution.x);\n    //strength *= 2.0;\n    \n    float deg = 20.0;\n    float scaleX = 1.2;\n    float scaleY = 1.2;\n    float convergence = 0.07;\n    float distortion_k1 = -1.0,distortion_k2 = 0.5;\n    \n    float rot;\n    \n    if (uv.x<0.5)\n    {\n        rot = radians(deg);\n        //rot *= strength;\n        uv2.x *=2.0;\n\n        uv2 -= 0.5;\n        mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n        uv2 = m* uv2;\n        uv2 += 0.5;\n\n\n    vec2 distortion_center = vec2(0.5,0.5);\n    //Define algorithm dependent variables \n    float distortion_x,distortion_y,rr,r2,theta;\n    //define distortion coefficient K1 and K2 ,In most cases we can only adjust K1. then K2 parameters can be adjusted more perfect Effect\n    //iTime is used for Real-time change.\n    //K1 < 0 is pincushion distortion\n    //K1 >=0 is barrel distortion\n    //float distortion_k1 = 1.0 * sin(iTime*0.5),distortion_k2 = 0.5;\n    //float distortion_k1 = -0.85,distortion_k2 = 0.5;\n    //float distortion_k1 = -1.0,distortion_k2 = 0.5;\n    vec2 dest_uv;\n    \n    //--------------------------Algorithm Start----------------------------------------\n    //The formula is derived from this video:https://www.youtube.com/watch?v=B7qrgrrHry0&feature=youtu.be\n    //and Distortion correction algorithm for Wikipedia:https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction\n    //几个开发者关于VR畸变的一些讨论https://blog.csdn.net/dabenxiong666/article/details/78713357\n    rr = sqrt((uv2.x - distortion_center.x)*(uv2.x - distortion_center.x) + (uv2.y - distortion_center.y)*(uv2.y - distortion_center.y));\n    r2 = rr * (1.0 + distortion_k1*(rr*rr) + distortion_k2*(rr*rr*rr*rr));\n    theta = atan(uv2.x - distortion_center.x, uv2.y - distortion_center.y);\n    //distortion_x = sin(theta) * r2 * 1.0;//1.0 is  scale factor\n    //distortion_y = cos(theta) * r2 * 1.0;//1.0 is  scale factor\n    distortion_x = sin(theta) * r2 * scaleX;//1.0 is  scale factor\n    distortion_y = cos(theta) * r2 * scaleY;//1.0 is  scale factor\n    dest_uv.x = distortion_x + 0.5-convergence;\n    //dest_uv.x = distortion_x + 0.5;\n    dest_uv.y = distortion_y + 0.5;\n    //--------------------------Algorithm End------------------------------------------  \n    \n    //Get texture from Channel0,and set dest_uv.\n    fragColor = vec4( texture( iChannel1, dest_uv).r, texture( iChannel1,dest_uv).g,texture( iChannel1,dest_uv).b, 1. );\n\n\n\n\n        //uv2.x *=2.0;\n        //fragColor = texture(iChannel1,uv2);    \n    }\n    else\n    {\n        rot = radians(-deg);\n        //rot *= strength;\n        uv2.x -= 0.5;\n        uv2.x *=2.0;\n        \n        uv2 -= 0.5;\n        mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n        uv2 = m* uv2;\n        uv2 += 0.5;\n\n    vec2 distortion_center = vec2(0.5,0.5);\n    //Define algorithm dependent variables \n    float distortion_x,distortion_y,rr,r2,theta;\n    //define distortion coefficient K1 and K2 ,In most cases we can only adjust K1. then K2 parameters can be adjusted more perfect Effect\n    //iTime is used for Real-time change.\n    //K1 < 0 is pincushion distortion\n    //K1 >=0 is barrel distortion\n    //float distortion_k1 = 1.0 * sin(iTime*0.5),distortion_k2 = 0.5;\n    //float distortion_k1 = -1.0,distortion_k2 = 0.5;\n    vec2 dest_uv;\n    \n    //--------------------------Algorithm Start----------------------------------------\n    //The formula is derived from this video:https://www.youtube.com/watch?v=B7qrgrrHry0&feature=youtu.be\n    //and Distortion correction algorithm for Wikipedia:https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction\n    //几个开发者关于VR畸变的一些讨论https://blog.csdn.net/dabenxiong666/article/details/78713357\n    rr = sqrt((uv2.x - distortion_center.x)*(uv2.x - distortion_center.x) + (uv2.y - distortion_center.y)*(uv2.y - distortion_center.y));\n    r2 = rr * (1.0 + distortion_k1*(rr*rr) + distortion_k2*(rr*rr*rr*rr));\n    theta = atan(uv2.x - distortion_center.x, uv2.y - distortion_center.y);\n    distortion_x = sin(theta) * r2 * scaleX;//1.0 is  scale factor\n    distortion_y = cos(theta) * r2 * scaleY;//1.0 is  scale factor\n    dest_uv.x = distortion_x + 0.5+convergence;\n    dest_uv.y = distortion_y + 0.5;\n    //dest_uv.x = distortion_x + 0.5;\n    //dest_uv.y = distortion_y + 0.5;\n    //--------------------------Algorithm End------------------------------------------  \n    \n    //Get texture from Channel0,and set dest_uv.\n    fragColor = vec4( texture( iChannel2, dest_uv).r, texture( iChannel2,dest_uv).g,texture( iChannel2,dest_uv).b, 1. );\n\n\n        //fragColor = texture(iChannel2,uv2);    \n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x /= 2.0f;\n    uv.x += 0.5f;\n    vec4 col = texture(iChannel0, uv);\n    fragColor = vec4(col.rgb, 1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x /= 2.0f;\n    //uv.x += 0.5f;\n    vec4 col = texture(iChannel0, uv);\n    fragColor = vec4(col.rgb, 1.);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}