{"ver":"0.1","info":{"id":"sslBDS","date":"1645459470","viewed":109,"name":"VoronoiWall","username":"peremoya2000","description":"Just messing with cellular noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    //Calculate render parameters\n    vec3 f = normalize(vec3(0,0,1.));\n    \n    //Voronoi\n\n    // Tile the space\n    vec2 scaledUVs = uv*5.;\n    vec2 tile = floor(scaledUVs);\n    vec2 fr = fract(scaledUVs);\n\n    float minDist = 1.;\n    vec3 normal,cellCol;\n\n    for (int y= -1; y <=1; ++y) {\n        for (int x= -1; x <= 1; ++x) {\n            // Get tile point\n            vec2 tileOffset = vec2(float(x),float(y));\n            vec2 point = rand2(tile + tileOffset);\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n            \n            vec2 toPoint = tileOffset + point - fr;\n    \n            // Distance to the point\n            float dist = length(toPoint)*.5;\n\n            // Keep the closest distance\n            if(dist<minDist){\n                minDist=dist;\n                normal=-normalize(vec3(toPoint,1.));\n                cellCol=(rand3((tile + tileOffset).xyx)+vec3(1,.9,.95)*2.)*.25;\n            }\n        }\n    }\n    \n    vec3 lightDir=normalize(vec3(1,-1,2));\n    float lambertian = max(dot(-normal, lightDir) , 0.);    \n    vec3 reflectionRay = reflect(lightDir,normal);\n    float specular = pow(max(0.,dot(-f,reflectionRay)),20.);    \n    vec3 col = (cellCol*lambertian*.8)+(specular*.2)+vec3(.15,.03,.05);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rand2( vec2 p ){\n    return fract(\n    sin(vec2(dot(p,vec2(127.1,311.7)),\n    dot(p,vec2(269.5,183.3))))*43758.5453);\n}\nvec3 rand3( vec3 p ) { \n    return fract(sin(vec3( dot(p,vec3(127.1,311.7,586.6)), \n    dot(p,vec3(269.5,187.7,455.8)), \n    dot(p,vec3(419.2,371.9,948.6))))*43758.5453); \n}","name":"Common","description":"","type":"common"}]}