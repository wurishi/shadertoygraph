{"ver":"0.1","info":{"id":"slX3z8","date":"1621584249","viewed":383,"name":"3 Body Attractor","username":"pajunen","description":"The colors describe the tendency of bodies released freely from different points to stay close to certain attractors. For example if a pixel color is red, the body released from that point mostly stayed in vicinity of the red attractor.\n\n","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["fractal","attractor","chaos","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 3 Body Attractor\n//\n// Inspired by this video:\n// The relationship between chaos, fractal and physics: https://www.youtube.com/watch?v=C5Jkgvw-Z6E&t=336s\n\n#define G 1.0               // Gravity strength\n\n#define M_BODY 1.0          // Mass of the simulated body\n\n#define M_A1 1.0            // Mass of attractor 1\n#define M_A2 2.0            // Mass of attractor 2\n#define M_A3 1.0            // Mass of attractor 3\n\n#define EPSILON 0.001\n\n#define SPEED    0.05       // Controls the speed of the attractors\n#define SCALE    5.5        // Controls how zoomed in the view is\n#define EXPOSURE 0.5     // Controls the brightness\n\n//#define SHOW_ATTRACTORS     // Toggle red, green and blue circles representing the attractor positions\n\n#define NOF_ITERATIONS 400  // Number of simulation iterations\n#define Z_DISTANCE 5.0      // Minimum distance between any attractor and body\n#define TIMESTEP 1.0       // Simulation timestep\n\nvec2 A1;\nvec2 A2;\nvec2 A3;\n\nstruct Body {\n    vec2 pos;\n    vec2 vel;\n    vec2 acc;\n};\n\nfloat d2(vec2 A, vec2 B) {\n    vec2 C = A - B;\n    return dot(C, C);\n}\n\nfloat d2_3d(vec3 A, vec3 B) {\n    vec3 C = A - B;\n    return dot(C, C);\n}\n\nvec3 get_closest_attractor_color(vec2 pos) {\n    float d2_A1 = d2(pos, A1);\n    float d2_A2 = d2(pos, A2);\n    float d2_A3 = d2(pos, A3);\n    \n    if (d2_A1 < d2_A2 && d2_A1 < d2_A3) return vec3(0.5,0.2,0.25) / (d2_A1*d2_A1 + EPSILON);\n    if (d2_A2 < d2_A3) return vec3(.2,0.3,0.8) / (d2_A2*d2_A2 + EPSILON);\n    return vec3(1.0,0.3,0.1) / (d2_A3*d2_A3 + EPSILON);\n}\n\n// A gravity-ish simulation routine\nBody update_body(Body p, float dt) {\n    // Calculate force\n    vec2 F = vec2(0);\n    F += normalize(A1 - p.pos) * G * (M_A1 * M_BODY) / (d2_3d(vec3(p.pos, 0), vec3(A1, Z_DISTANCE)));\n    F += normalize(A2 - p.pos) * G * (M_A2 * M_BODY) / (d2_3d(vec3(p.pos, 0), vec3(A2, Z_DISTANCE)));\n    F += normalize(A3 - p.pos) * G * (M_A3 * M_BODY) / (d2_3d(vec3(p.pos, 0), vec3(A3, Z_DISTANCE)));\n    \n    // Update acceleration, position and velocity\n    p.acc = F / M_BODY;\n    p.pos = p.pos + p.vel * dt + 0.5 * p.acc * dt * dt;\n    p.vel = p.vel + p.acc * dt;\n\n    return p;\n}\n\nvec3 get_color(vec2 initial_pos) {\n    Body p;\n    p.pos = initial_pos;\n    p.vel = vec2(0);\n    p.acc = vec2(0);\n    \n    vec3 color = vec3(0);\n    \n    for (int i = 0; i < NOF_ITERATIONS; i++) {\n       p = update_body(p, TIMESTEP);\n       color += get_closest_attractor_color(p.pos);\n    }\n    \n    return color / float(NOF_ITERATIONS);\n}\n\nvec2 unit_vec(float angle) {\n    return vec2(cos(angle), sin(angle));\n}\n\nvec3 normalize_color(vec3 raw) {\n    return 2.0 / (exp(-EXPOSURE * raw) + 1.0) - 1.0;\n}\n\nvec2 normalize_fragcoord(vec2 frag_coord) {\n    return ((frag_coord/iResolution.x) - 0.5 * vec2(1.0, iResolution.y / iResolution.x)) * SCALE;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    // Create interesting positions for attractos\n    A1 = sin(-iTime * SPEED * 3.0) * unit_vec(-iTime * SPEED * 11.0);\n    A2 = 1.2 * unit_vec( iTime * SPEED * 5.0);\n    A3 = normalize_fragcoord(iMouse.xy);\n\n        \n    vec2 pos = normalize_fragcoord(fragCoord);\n    \n    vec3 col = get_color(pos);\n    col = normalize_color(col);\n    \n    #ifdef SHOW_ATTRACTORS\n    if (d2(A1, pos) < 0.0025) col = vec3(1,0,0);\n    if (d2(A2, pos) < 0.0025) col = vec3(0,1,0);\n    if (d2(A3, pos) < 0.0025) col = vec3(0,0,1);\n    #endif\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}