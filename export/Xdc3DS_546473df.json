{"ver":"0.1","info":{"id":"Xdc3DS","date":"1452018986","viewed":1173,"name":"Shadow Mapping","username":"Xor","description":"Simple shadow mapping example with raymarching. You can get better soft shadows for free, but I wanted to try this. Use the mouse to move. Try this in fullscreen.","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["3d","shadows","xor","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DEBUG;\n\nfloat MAX = 120.0;\nfloat PRE = 0.01;\nconst float QUALITY = 16.0;\n\n#define L vec3(-4.0,sin(iTime*0.5),-8.0+cos(iTime*0.5)*3.0)\n\n//Tri-linear Texturing Function\nvec3 tritex(sampler2D tex, vec3 p,vec3 d)\n{\n \treturn  (texture(tex,p.xy).rgb*d.z*d.z\n            +texture(tex,p.zy).rgb*d.x*d.x\n            +texture(tex,p.xz).rgb*d.y*d.y);\n}\n//Main Distance Field Function\nvec2 model(vec3 p)\n{\n    vec3 n = vec3(fract(p.xy/16.0+0.5)-0.5,p.z/16.0+0.25);\n    float S = length(n)*16.0-2.0;\n    \n    n = vec3(fract(p.xy/16.0+0.5)-0.5,p.z/16.0+0.25);\n    float R = 16.0-length(max(abs(n)*16.0-vec3(1.0,1.0,3.0),0.0))-8.0;\n    \n    return vec2(min(length(L-p)-0.1,min(min(S,R),-p.z)),R);\n}\n\n//Normal Function\nvec3 normal(vec3 p)\n{\n \tvec3 N = vec3(-5, 5, 0) * PRE;\n\n \tN = normalize(model(p+N.xyy).x*N.xyy+model(p+N.yxy).x*N.yxy\n                 +model(p+N.yyx).x*N.yyx+model(p+N.xxx).x*N.xxx);\n\n \treturn N;\n}\nfloat dtof(vec4 n)\n{\n \treturn\tdot(n,vec4(1.0,1.0/255.0,1.0/65025.0,0.0))*MAX;\n}\nvec2 vec3tovec2(vec3 n)\n{\n \treturn\tvec2(atan(-n.y,-n.x),asin(n.z))/6.2831+0.5;   \n}\nvec3 vec2tovec3(vec2 n)\n{\n    vec2 A = (n-0.5)*vec2(6.2831);\n \treturn\tvec3(cos(A.x)*cos(A.y),sin(A.x)*cos(A.y),sin(A.y));   \n}\n//Sharp Shadow Mapping\nfloat shadow1(vec2 shadowuv,vec2 offset, float depth,float bias)\n{   \n    float depth2 = dtof(texture(iChannel0,shadowuv+offset));\n    float F = clamp(depth-depth2+bias,0.0,1.0);\n   \n    return F;\n}\n//Soft Shadow Mapping\nfloat shadow(vec3 p,vec3 d)\n{\n    vec2 SV = vec3tovec2(d);\n    vec2 OV = 1.0/iResolution.xy;\n    float S = length(L-p);\n    float bias = -abs(dot(-normal(p),d));\n    \n    float T = 0.0;\n    float V = 3.1416/QUALITY;\n    for(float i = 0.0; i<6.2831;i += 6.2831/QUALITY)\n    {\n        vec2 Off = vec2(cos(i),sin(i))*OV*2.0;\n    \tT += shadow1(SV,Off,S,bias);\n        Off = vec2(cos(i+V),sin(i+V))*OV;\n        T += shadow1(SV,Off,S,bias);\n    }\n    \n    return length(L-p)/MAX-T/QUALITY/2.0;\n}\n\n\n//Color/Material Function\nvec3 color(vec3 p, vec3 d)\n{\n    vec3 N = normal(p);\n    vec3 D = normalize(L-p);\n \tfloat TL = max(dot(N,D),0.0);\n        \n    #ifdef DEBUG\n    vec3 C = texture(iChannel0,vec3tovec2(D)).rgb;\n    #else\n    vec3 C = (tritex(iChannel1,p/32.0,N)+tritex(iChannel1,p/4.0,N))/2.0;\n    C = mix(C,(tritex(iChannel2,p/32.0,N)+tritex(iChannel2,p/4.0,N))/2.0,\n    smoothstep(0.1,0.0,model(p).y))+float(length(L-p)<0.2);\n    C *= clamp(TL+shadow(p,D)+max(1.0-length(L-p),0.0),0.1,1.0);\n    #endif\n    \n    return C;\n}\n//Simple Raymarcher\nvec4 raymarch(vec3 p, vec3 d)\n{\n    float S = PRE;\n    float T = S;\n    vec3 D = normalize(d);\n    vec3 P = p+D*S;\n    for(int i = 0;i<240;i++)\n    {\n        S = model(P).x;\n        T += S;\n        P += D*S;\n        if ((T>MAX) || (S<PRE)) {break;}\n    }\n    return vec4(P,min(T/MAX,1.0));\n}\n//Camera Variables\n#define A mix((0.5-iMouse.xy/iResolution.xy)*vec2(6.2831,-6.2831)*0.5,vec2(6.2831,-6.2831)*0.5,float(iMouse.x==0.0))\n#define P vec3(cos(A.x)*cos(A.y),sin(A.x)*cos(A.y),sin(A.y)-2.0)*4.0\n#define D vec3(0.0,0.0,-0.5)-P/16.0\n\n#define X normalize(D)\n#define Y normalize(cross(X,vec3(0.0,0.0,1.0)))\n#define Z cross(X,Y)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 UV = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n    \n    vec3 R = normalize(mat3(X,Y,Z) * vec3(1.0,UV));\n    \n    vec4 M = raymarch(P,R);\n    float fog = clamp(M.w,0.0,1.0);\n\tfragColor = vec4(mix(color(M.xyz,R)*max(1.0-M.w*2.0,0.0),vec3(0.42,0.46,0.5),fog),1.0);\n    \n    #ifdef DEBUG\n    UV = fragCoord.xy/iResolution.xy*4.0;\n\tfragColor = mix(fragColor,texture(iChannel0,UV),0.5*step(UV.x,1.0)*step(UV.y,1.0));\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float MAX = 120.0;\nfloat PRE = 0.01;\n#define L vec3(-4.0,sin(iTime*0.5),-8.0+cos(iTime*0.5)*3.0)\n\n//Main Distance Field Function\nfloat model(vec3 p)\n{\n    vec3 n = vec3(fract(p.xy/16.0+0.5)-0.5,p.z/16.0+0.25);\n    float S = length(n)*16.0-2.0;\n    \n    n = vec3(fract(p.xy/16.0+0.5)-0.5,p.z/16.0+0.25);\n    float R = 16.0-length(max(abs(n)*16.0-vec3(1.0,1.0,3.0),0.0))-8.0;\n    \n    return (min(min(S,R),-p.z));\n}\n\n//Simple Raymarcher\nvec4 raymarch(vec3 p, vec3 d)\n{\n    float S = 0.0;\n    float T = S;\n    vec3 D = normalize(d);\n    vec3 P = p+D*S;\n    for(int i = 0;i<240;i++)\n    {\n        S = model(P);\n        T += S;\n        P += D*S;\n        if ((T>MAX) || (S<PRE)) {break;}\n    }\n    return vec4(P,min(T/MAX,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 UV = fragCoord.xy/iResolution.xy;\n    \n    vec2 A = UV*vec2(6.2831);\n    vec3 D = vec3(cos(A.x)*cos(A.y),sin(A.x)*cos(A.y),sin(A.y));\n    \n    float M = raymarch(L,D).w;\n\tfragColor = vec4(fract(M*vec3(1,255,65025)),1);\n}","name":"Buf A","description":"","type":"buffer"}]}