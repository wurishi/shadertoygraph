{"ver":"0.1","info":{"id":"dlGfDD","date":"1702518839","viewed":70,"name":"Raymarching with fractals","username":"refaaydev","description":"Using fractals magic to build complex raymarched scenes","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingfractals"],"hasliked":0,"parentid":"cldfWB","parentname":"Ref-Raymarching01"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 130.\n#define SURF_DIST 0.01\n#define inf 1e10\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nvec3 repeat(vec3 p, float c) {\n    return mod(p,c) - 0.5 * c;\n}\n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n    oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n    0.0,                                0.0,                                0.0,                                1.0\n  );\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n  mat4 m = rotation3d(axis, angle);\n  return (m * vec4(v, 1.0)).xyz;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nvec3 getColor(float amount) {\n  vec3 color = vec3(0.3, 0.1, 0.2) +vec3(1, 0.7, 0.9) * cos(6.2831 * (vec3(0.30, 0.20, 0.20) + amount * vec3(1.0)));\n  return color * amount;\n}\n\n\nfloat sdCross( in vec3 p ) {\n  float da = sdBox(p.xyz,vec3(inf,1.0,1.0));\n  float db = sdBox(p.yzx,vec3(1.0,inf,1.0));\n  float dc = sdBox(p.zxy,vec3(1.0,1.0,inf));\n  return min(da,min(db,dc));\n}\n\n\nfloat GetDist(vec3 p) {\n    vec3 p1 = rotate(p - vec3(0, 0, 30), vec3(0., 1. ,1.), -iTime * 1.);\n    float d = sdBox(p1, vec3(15.));\n    \n    float scale = 1.0;\n    \n    float d2 = length(repeat(p, 1.)) - 0.2;\n    float d3 = sdCross(repeat(p1, 5.));\n \n    \n    return max(d3, d);\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        \n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dS < SURF_DIST || dO > MAX_DIST) {\n            break;\n        }\n    }\n    \n    return dO;\n\n}\n\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p) {\n     vec3 lightPos = vec3(0, 40.0, -50);\n    \n    \n    vec3 l = normalize(lightPos-p);\n    \n    vec3 n = GetNormal(p);\n    \n    float diffuse = clamp(dot(l, n), 0., 1.);\n      \n    float sD = RayMarch(p + n * SURF_DIST*2., l);\n    \n    if(sD < length(lightPos - p)) diffuse *= .1;\n      \n    return diffuse;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Camera\n    vec3 ro = vec3(0,0,-25.);\n    vec3 rd = normalize(vec3(uv, 1));\n    \n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    vec3 col = vec3(.0);\n       \n    \n    \n    if(d < MAX_DIST) {\n        float light = GetLight(p);     \n         \n     \n        col = getColor(light); \n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}