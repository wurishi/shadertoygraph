{"ver":"0.1","info":{"id":"ct23Dt","date":"1675087702","viewed":99,"name":"Jonix moving color cylinders","username":"Hultsborn10","description":"A shader with many cylinders in a 3d-grid","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","color","cylinders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching Operators 2\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the starting point for a YouTube tutorial:\n// https://youtu.be/Vmb7VGBVZJA\n\n#define MAX_STEPS 100\n#define MAX_DIST 25.\n#define SURF_DIST .001\n\nfloat Hash21(vec2 p){\n    p += vec2(0.1); //För att undvika stillastående i (0,0)\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n//\tHash23() based on hash functions from Dave_Hoskins -- https://www.shadertoy.com/view/ltfGDs\nvec3 Hash23( vec2 p ) {\n    p += vec2(0.1); //För att undvika helt svart i (0,0)\n\tp\t\t= fract( p * vec2( 5.3983, 5.4427 ) );\n    p\t\t+= dot( p.yx, p.xy + vec2( 21.5351, 14.3137 ) );\n\treturn fract( p.x * p.y * vec3( 95.4337, 97.597, 93.234 ) );\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return (e+i)-0.05;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p, out vec3 c) {\n    float grid = abs(p.y) - 0.01;\n    vec3 P = p;\n    P.xz = fract(P.xz)-0.5;\n    vec2 id = floor(p.xz);\n    c = Hash23(id);\n    //float d = sdBox(P, vec3(0.4));\n    float h = Hash21(id);\n    h = 1.5 + 0.2*sin(h*3.14 + h*iTime);\n    float d = sdCylinder(P, vec3(0.0,-1.0,0.0),vec3(0.0,h,0.0), 0.4);\n    //d = max(grid, -d);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, out vec3 c) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p,c)*0.8;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec3 c = vec3(0);\n\tfloat d = GetDist(p, c);\n    vec2 e = vec2(.001, 0); \n        \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy,c),\n        GetDist(p-e.yxy,c),\n        GetDist(p-e.yyx,c));\n    \n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p, out vec3 c) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l, c);\n   // if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    ro.z += iTime;\n    ro.x += iTime;\n    \n    //vec2 m = iMouse.xy/iResolution.xy;\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    //ro.x -= iTime*0.1;\n    //ro.z -= iTime*0.1;\n    vec3 rd = R(uv, ro, vec3(0.0+iTime,1,0.0+iTime), 1.);\n\n    float d = RayMarch(ro, rd, col);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n        \n        vec3 c = vec3(0);\n    \tfloat dif = GetLight(p, c);\n        col *= vec3(dif);\n    }\n    else{\n        col = vec3(0.0);\n    }\n    \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}