{"ver":"0.1","info":{"id":"td3GRl","date":"1569078969","viewed":163,"name":"Painting-Colors Noise","username":"Numero7","description":"This shader uses 3d noise and 2d to create nicely colored art moving randomly around the scene :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","colors","random","painting","paint","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 4.0 * asin(1.0)\n\nfloat HASH21(vec2 p) {\n    return fract(sin(p.x * 100.0 + p.y * 6574.0) * 5647.0);\n}\n\nfloat HASH31(vec3 p) {\n    return fract(sin(p.x * 100.0 + p.y * 6574.0 + p.z * 452.0) * 5647.0);\n}\n\n\nfloat SmoothNoise2D(vec2 uv) {\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv*lv*(3.0-2.0*lv);\n    \n    float bl = HASH21(id + vec2(0, 0));\n    float br = HASH21(id + vec2(1, 0));\n    float b = mix(bl, br, lv.x);\n    \n    float tl = HASH21(id + vec2(0, 1));\n    float tr = HASH21(id + vec2(1, 1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nfloat SmoothNoise3D(vec3 uv) {\n    vec3 lv = fract(uv);\n    vec3 id = floor(uv);\n    \n    lv = smoothstep(0.0, 1.0, lv);\n    \n    float fbl = HASH31(id + vec3(0, 0, 0));\n    float fbr = HASH31(id + vec3(1, 0, 0));\n    float fb = mix(fbl, fbr, lv.x);\n    float ftl = HASH31(id + vec3(0, 1, 0));\n    float ftr = HASH31(id + vec3(1, 1, 0));\n    float ft = mix(ftl, ftr, lv.x);\n    \n    float bbl = HASH31(id + vec3(0, 0, 1));\n    float bbr = HASH31(id + vec3(1, 0, 1));\n    float bb = mix(bbl, bbr, lv.x);\n    float btl = HASH31(id + vec3(0, 1, 1));\n    float btr = HASH31(id + vec3(1, 1, 1));\n    float bt = mix(btl, btr, lv.x);\n    \n    return mix(mix(fb, ft, lv.y), mix(bb, bt, lv.y), lv.z);\n}\n\nfloat PerlinNoise2D(vec2 uv, int octaves) {\n    float c = 0.0;\n    float s = 0.0;\n    for (float i = 0.0; i < float(octaves); i++) {\n        c += SmoothNoise2D(uv * pow(2.0, i)) * pow(0.5, i);\n        s += pow(0.5, i);\n    }\n    \n    return c /= s;\n}\n\nfloat PerlinNoise3D(vec3 uv, int octaves) {\n    float c = 0.0;\n    float s = 0.0;\n    for (float i = 0.0; i < float(octaves); i++) {\n        c += SmoothNoise3D(uv * pow(2.0, i)) * pow(0.5, i);\n        s += pow(0.5, i);\n    }\n    \n    return c /= s;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    float angle = TAU * iTime * 0.01;\n    \n    float x = 100.0*PerlinNoise2D(vec2(iTime * 0.02, 126.0), 4);\n    float y = 100.0*PerlinNoise2D(vec2(iTime * 0.02, -324.0), 4);\n    \n    vec2 pos = vec2(x, y);\n    vec2 luv = uv * 5.0 + pos;\n    \n    float c1 = PerlinNoise3D(vec3(luv.x, luv.y, 0.0), 16);\n    float c2 = PerlinNoise3D(vec3(luv.x, luv.y, 100.0), 16);\n    float c3 = PerlinNoise3D(vec3(luv.x, luv.y, 1000.0), 16);\n    \n    vec3 col = vec3(c1, c2, c3);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}