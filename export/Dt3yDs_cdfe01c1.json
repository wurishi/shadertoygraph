{"ver":"0.1","info":{"id":"Dt3yDs","date":"1699802266","viewed":32,"name":"aurora simple","username":"zhy437488627","description":"just aurora ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["aurora"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy的GLSL代码\n#define NUM_LAYERS 2.\n\n// 定义全局变量\n#define TAU 6.28318530718\n\n// Perlin噪声的hash函数\nvec2 hash22(vec2 p) {\n    p = p * mat2(129.1, 311.7, 269.5, 183.3);\n    p = -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n    return sin(p * TAU + iTime * 0.1);\n}\n\n// 创建Perlin噪声的函数\nfloat perlinNoise(vec2 p) {\n    vec2 pi = floor(p);\n    vec2 pf = p - pi;\n    vec2 w = pf * pf * (3.0 - 2.0 * pf);\n    float f00 = dot(hash22(pi + vec2(0.0, 0.0)), pf - vec2(0.0, 0.0));\n    float f01 = dot(hash22(pi + vec2(0.0, 1.0)), pf - vec2(0.0, 1.0));\n    float f10 = dot(hash22(pi + vec2(1.0, 0.0)), pf - vec2(1.0, 0.0));\n    float f11 = dot(hash22(pi + vec2(1.0, 1.0)), pf - vec2(1.0, 1.0));\n    float xm1 = mix(f00, f10, w.x);\n    float xm2 = mix(f01, f11, w.x);\n    return mix(xm1, xm2, w.y);\n}\nmat2 rotate2d(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // 规范化坐标（从0到1）\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // 缩小画面，展示更多内容\n    float zoom = 1.2; // 缩放系数，小于1表示缩小\n    uv = (uv - 0.1) / zoom + 0.5; // 将UV坐标缩放并重新定位到中心\n    mat2 rot = rotate2d(TAU / 4.0); // 90度旋转\n\n    // 将旋转中心移动到画面中心，应用旋转，然后移回\n    uv -= 0.5;\n    uv = rot * uv;\n    uv += 0.5;\n\n    // 纵横比校正\n    uv.x *= iResolution.x / iResolution.y;\n    // uv.x *= iResolution.x / iResolution.y; // 纵横比校正\n    uv.y = uv.y*.6-0.02;\n    // Perlin噪声，用来创建波纹\n    float n = 0.0;\n    n += 0.5000 * perlinNoise(uv * 1.0 - iTime * 0.2);\n    n += 0.2500 * perlinNoise(uv * 2.0 - iTime * 0.3);\n    n += 0.1250 * perlinNoise(uv * 4.0 - iTime * 0.5);\n    n += 0.0625 * perlinNoise(uv * 8.0 - iTime * 0.8);\n    uv.y += n * 1.1;\n    // 北极光的强度\n    float intensity = smoothstep(0.1, 0.9, uv.y);\n    intensity *= sin(uv.y * 10.0 + n * 5.0 - 1. * 0.5) * 0.5 + 0.5;\n\n    // 添加颜色渐变，从紫色到蓝绿色\n    vec3 color1 = vec3(0.21, 0.07, 0.82); // 紫色\n    vec3 color2 = vec3(0.0, 0.7, 0.7); // 蓝绿色\n\n    // 使用垂直坐标(UV的y分量)来混合两种颜色\n    vec3 color = mix(color1, color2, uv.x);\n    \n    // 应用噪声强度到颜色上\n    color *= intensity;\n    // color = mix(col1,color,uv.x)\n    // color += col1;\n    // 输出颜色\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}