{"ver":"0.1","info":{"id":"MdKyRy","date":"1522495830","viewed":150,"name":"UNKNOWN DISPLEASURES","username":"LeoZ","description":"Inspired by Joy Divisions's Unknown Pleasures album cover","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sound","white","black","unknown","pleasures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool isAbove(vec2 l1, vec2 l2, vec2 uv) {\n    return 0. < (l2.x - l1.x) * (uv.y - l1.y) - (l2.y - l1.y) * (uv.x - l1.x);\n}\n\n// https://stackoverflow.com/a/26902185\nfloat distanceToLine(vec2 p1, vec2 p2, vec2 point) {\n    float a = p1.y - p2.y;\n    float b = p2.x - p1.x;\n    return abs(a * point.x + b * point.y + p1.x * p2.y - p2.x * p1.y) / sqrt(a*a+b*b);\n}\n\nvec4 curve(int index, float yOffset, float yScale, float segs, float pad, int pos0, int pos1, vec2 uv) {\n    float xOffset = .05;\n    float x0 = vec2((float(pos0)*1.8)/segs-pad/2. + float(index)/200., 0.).x;\n    float x1 = vec2((float(pos1)*1.8)/segs-pad/2. + float(index)/200., 0.).x;\n    float val0 = texture(iChannel0, vec2((float(pos0)*1.8)/segs-pad/2. + float(index)/200., 0.)).x * yScale + yOffset;\n    float val1 = texture(iChannel0, vec2((float(pos1)*1.8)/segs-pad/2. + float(index)/200., 0.)).x * yScale + yOffset;\n    \n    if(x1 >= 1.) {\n        if(x0 >= 1.) {\n        \tval0 = yOffset;\n        }\n     \tval1 = yOffset;\n    }\n    \n    if(x0 <= 0.) {\n        if(x1 <= 0.) {\n        \tval1 = yOffset;\n        }\n     \tval0 = yOffset;\n    }\n    \n    float shrinkF = 1./(segs+pad)*0.6;\n    vec2 point0 = vec2(float(pos0)/segs, val0);\n    vec2 point1 = vec2(float(pos1)/segs, val1);\n    float distance = distanceToLine(point0, point1, uv);\n    float color = 1.-smoothstep(3. / iResolution.x, 3.6 / iResolution.x, distance);\n    \n    if(isAbove(point0, point1, uv)) {\n        return vec4(vec3(1., 0., 0.), .4);\n    }\n    \n    return vec4(vec3(color), 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float segments = 64.;\n    float padding = 0.8;\n   \n    int i0 = int(segments * uv.x);\n    int i1 = i0 + 1;\n    float yOffset = 0.02;\n    float yScale = 0.10;\n    vec4 color = vec4(0.);\n    \n    int lineCount = 25;\n    for(int i = lineCount; i > 0; i--) {\n\t    vec4 col1 = curve(i, yOffset + float(i)/float(lineCount+4), yScale, segments, padding, i0, i1, uv);\n        if(col1.a > .5) {\n\t\t\tcolor = col1;\n        }\n    }\n    \n    if(uv.x < 0.1 || uv.x > 0.9) {\n      color = vec4(0.);  \n    }\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}