{"ver":"0.1","info":{"id":"wtGfWh","date":"1614244233","viewed":55,"name":"MyFirstShaderToy","username":"HandsomePanda","description":"First Shader toy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opU(float d1, float d2)\n{\n    return (d1 < d2) ? d1 : d2;\n}\n\nfloat Scene(vec3 p)\n{\n    float d = 0.0;\n\n    float Sphere = sdSphere(p - vec3(0, 0, 2), 1.0);\n    float Box = sdBox(p - vec3(1, 0, 0), vec3(5, 5, 0.1));\n    \n    d = Sphere;\n    d = opU(d, Box);\n\n    return d;\n}\n\nvec3 CalcNormal(vec3 pos)\n{\n    vec2 eps = vec2(0.002, 0.0);\n    return normalize(vec3(\n                        Scene(pos + eps.xyy) - Scene(pos - eps.xyy),\n                        Scene(pos + eps.yxy) - Scene(pos - eps.yxy),\n                        Scene(pos + eps.yyx) - Scene(pos - eps.yyx)\n                       ));\n}\n\nvec3 Lighting(vec3 p, vec3 rd)\n{\n    return CalcNormal(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 Ret = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n    \n    vec2 MouseMove = iMouse.xy /iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord / iResolution.xy;\n    //uv = 2.0 * uv - 1.0; \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    // focal length\n    const float fl = 2.5;\n    vec3 CameraRectPos = vec3(uv, fl);\n    \n    //Setup camera\n    vec3 CameraTarget = vec3(0, 0, 0);\n    vec3 ro = vec3(-8, 8, 8);\n    \n    vec3 cw = normalize(CameraTarget - ro);\n\tvec3 cp = vec3(0.0, 0.0, 1.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = (cross(cu,cw));\n    mat3 CameraMatrix = mat3(cu, cv, cw);\n    \n    //ray direction, Convert camera space to world space\n    vec3 rd = normalize(CameraMatrix * CameraRectPos);\n    \n    vec3 CurPos = ro;\n    for(int i = 0; i < 256; i++)\n    {\n        float d = Scene(CurPos);\n        \n        if(d < 0.001f)\n        {\n            Ret.rgb = Lighting(CurPos, rd);\n        }\n        \n        CurPos += rd * d;\n    }\n\n    // Output to screen\n    fragColor = Ret;\n}","name":"Image","description":"","type":"image"}]}