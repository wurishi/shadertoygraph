{"ver":"0.1","info":{"id":"DslSRs","date":"1669399736","viewed":317,"name":"Much Faster Pixel Sorting","username":"MysteryPancake","description":"I had an idea to speed up pixel sorting using chunks, maybe similar to merge sort? It doesn't always end in exact order, but usually looks identical.","likes":4,"published":3,"flags":32,"usePreview":1,"tags":["fast","pixel","sort","sorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(texture(iChannel0, fragCoord / iResolution.xy).rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Loop every 128 frames\n    int frame = iFrame % 128;\n    \n    if (frame < 1) {\n        // Initialize color to texture\n        fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n    } else {\n        // Start with original color\n        ivec2 pos = ivec2(fragCoord);\n        fragColor = texelFetch(iChannel0, pos, 0);\n        \n        // Compare pixels in pairs, sliding window along 1 pixel per frame\n        bool sampleTop = pos.y % 2 == frame % 2;\n        \n        // SPEEDUP: Sort larger chunks first, then smaller chunks\n        int jump = max(0, 96 - (frame * 2)) + 1;\n        ivec2 offset = pos + ivec2(0, sampleTop ? jump : -jump);\n        \n        // Don't read out of bounds pixels\n        ivec2 dims = textureSize(iChannel0, 0);\n        if (offset.x < 0 || offset.x >= dims.x || offset.y < 0 || offset.y >= dims.y) {\n            return;\n        }\n        \n        // Compare red channel and alpha to know whether we need to swap\n        vec4 neighbour = texelFetch(iChannel0, offset, 0);\n        if (length(fragColor.rgb) > length(neighbour.rgb) == sampleTop) {\n            fragColor = neighbour;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}