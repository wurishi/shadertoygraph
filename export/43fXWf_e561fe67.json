{"ver":"0.1","info":{"id":"43fXWf","date":"1710050197","viewed":77,"name":"Some LSD with grain","username":"Ishidaw","description":"iteration from my previous shaders, but with grain. It has all version of same shaders cuz is for LEARNING purposes.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["learn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fragCoord > vec2(x,y) -- Coordinates of fragments\n// fragColor > vec4(r, g, b, a) -- output standard\n\n//iResolution > vec3(x, y, z)\n// if used isolated, like iResolution.xy, we ignored the depth\n\n// grain filter from: https://www.shadertoy.com/view/3sGGRz\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.200,0.400,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    //Grain\n    float mdf = 0.08;\n    float noise = (fract(sin(dot(uv0, vec2(12.9898,78.233)*2.0)) * 43758.5453));\n    vec4 tex = texture(iChannel0, uv0);\n    \n    mdf *= sin(iTime) + 2.0; // animate the effect's strength\n    \n    vec3 finalColor = vec3(0.0);\n    \n    vec4 grain = tex - noise * mdf;\n\n    for (float i = 0.0;  i < 2.0; i++) {\n    \n    \n        uv = fract(uv * 2.6) - 0.5;\n\n        //uv *= 2.2;\n        //uv = fract(uv);\n        //uv -= 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        //vec3 col = vec3(0.8, 0.2, 0.5);\n        //vec3 col = palette(d + iTime);\n        vec3 col = palette(length(uv0) + i*.2 + iTime * 0.4) + grain.rgb;\n\n        //vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n\n        //to correct aspec ratio\n        //uv.x = uv.x * iResolution.x / iResolution.y;\n\n        //or uv.x *= iResolution.x / iResolution.y;\n\n        //uv = (uv - 0.5) * 2.0;\n        //uv = uv * 2.0;\n\n        //d = sin(d * 9.0) / 9.0;\n        \n        for (float i = 0.0; i < 0.80; i++){\n            d = sin(d * 16.0 + iTime) / 16.0;\n            d = abs(d);\n        }\n        //d = sin(d * 16.0 + iTime) / 16.0;\n        //d = abs(d);\n\n        //d = smoothstep(0.0, 0.1, d);\n        //d = 0.014 / d;\n        d = pow(0.0026 / d, 0.5);\n        \n\n        //col *= d;\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}