{"ver":"0.1","info":{"id":"sl23zw","date":"1729881484","viewed":77,"name":"DoorwayTransition","username":"Sergeindamix","description":"A nice AI MOD transition from glsl-transitions. Modify the reflection, perspective,depth parameters.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["transition"],"hasliked":0,"parentid":"wt3fDn","parentname":"Doorway Transition"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_IMAGES 4\n\n        const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n        const vec2 boundMin = vec2(0.0, 0.0);\n        const vec2 boundMax = vec2(1.0, 1.0);\n\n        bool inBounds(vec2 p) {\n            return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\n        }\n\n        vec2 project(vec2 p) {\n            return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\n        }\n\n        vec4 getTextureColor(int imageIndex, vec2 coords) {\n            if (imageIndex == 0) return texture(iChannel0, coords);\n            if (imageIndex == 1) return texture(iChannel1, coords);\n            if (imageIndex == 2) return texture(iChannel2, coords);\n            if (imageIndex == 3) return texture(iChannel3, coords);\n            return black;\n        }\n\n        vec4 bgColor(vec2 p, vec2 pto, float reflection, int imageIndex) {\n            vec4 c = black;\n            pto = project(pto);\n            if (inBounds(pto)) {\n                c += mix(black, getTextureColor(imageIndex, p), reflection * mix(1.0, 0.0, pto.y));\n            }\n            return c;\n        }\n\n        void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n            float reflection = 0.4;\n            float perspective = 0.4;\n            float depth = 3.0;\n            \n            float cycleTime = 4.0;\n            float time = iTime;\n            float progress = fract(time / cycleTime);\n            int currentImage = int(floor(mod(time / cycleTime, float(NUM_IMAGES))));\n            int nextImage = int(floor(mod(float(currentImage + 1), float(NUM_IMAGES))));\n            \n            vec2 p = fragCoord / iResolution.xy;\n            vec2 pfr = vec2(-1.0), pto = vec2(-1.0);\n            \n            float middleSlit = 2.0 * abs(p.x - 0.5) - progress;\n            if (middleSlit > 0.0) {\n                pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5 * progress, 0.0);\n                float d = 1.0 / (1.0 + perspective * progress * (1.0 - middleSlit));\n                pfr.y -= d / 2.0;\n                pfr.y *= d;\n                pfr.y += d / 2.0;\n            }\n            \n            float size = mix(1.0, depth, 1.0 - progress);\n            pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);\n            \n            if (inBounds(pfr)) {\n                fragColor = getTextureColor(currentImage, pfr);\n            }\n            else if (inBounds(pto)) {\n                fragColor = getTextureColor(nextImage, pto);\n            }\n            else {\n                // Mezcla suave entre los reflejos de la imagen actual y la siguiente\n                vec4 currentReflection = bgColor(p, pto, reflection, currentImage);\n                vec4 nextReflection = bgColor(p, pto, reflection, nextImage);\n                fragColor = mix(currentReflection, nextReflection, smoothstep(0.8, 1.0, progress));\n            }\n        }","name":"Image","description":"","type":"image"}]}