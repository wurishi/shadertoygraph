{"ver":"0.1","info":{"id":"M3yGzW","date":"1717357354","viewed":50,"name":"PC - Quadratic Wedge","username":"natevm","description":"Sample code for a point-in-quadratic-wedge test, returning the per-vertex support function weights.\nThis implementation uses a Newton-Raphson iteration to handle the bilinear faces. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","finite","element","containment","query"],"hasliked":0,"parentid":"l333Dr","parentname":"PC - Quadratic Pyramid"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n// lots of error, but plays well on mobile\n#define NEWTON_ITERATIONS 5\n#define NUM_STEPS 8\n#else\n#define NEWTON_ITERATIONS 5\n#define NUM_STEPS 32    \n#endif\n\n#define CONVERGED_ERROR 1e-3\n#define DIVERGED_ERROR 1e6\n\n#define EXPOSURE 2.5\n\n\nvoid quadraticWedgeInterpolationFunctions(vec3 rst,\n    out float w00, out float w01, out float w02, out float w03, out float w04, \n    out float w05, out float w06, out float w07, out float w08, out float w09, \n    out float w10, out float w11, out float w12, out float w13, out float w14)\n{\n    float r = rst.x;\n    float s = rst.y;\n    float t = rst.z;\n    \n    // corners\n    w00 = 2. * (1. - r - s) * (1. - t) * (.5 - r - s - t);\n    w01 = 2. * r * (1. - t) * (r - t - 0.5);\n    w02 = 2. * s * (1. - t) * (s - t - 0.5);\n    w03 = 2. * (1. - r - s) * t * (t - r - s - 0.5);\n    w04 = 2. * r * t * (r + t - 1.5);\n    w05 = 2. * s * t * (s + t - 1.5);\n\n    // midsides of triangles\n    w06 = 4. * r * (1. - r - s) * (1. - t);\n    w07 = 4. * r * s * (1. - t);\n    w08 = 4. * (1. - r - s) * s * (1. - t);\n    w09 = 4. * r * (1. - r - s) * t;\n    w10 = 4. * r * s * t;\n    w11 = 4. * (1. - r - s) * s * t;\n\n    // midsides of rectangles\n    w12 = 4. * t * (1. - r - s) * (1. - t);\n    w13 = 4. * t * r * (1. - t);\n    w14 = 4. * t * s * (1. - t);\n}\n\nvoid quadraticWedgeInterpolationDerivs(vec3 rst,\n    out vec3 dw00, out vec3 dw01, out vec3 dw02, out vec3 dw03, out vec3 dw04,\n    out vec3 dw05, out vec3 dw06, out vec3 dw07, out vec3 dw08, out vec3 dw09, \n    out vec3 dw10, out vec3 dw11, out vec3 dw12, out vec3 dw13, out vec3 dw14)\n{\n    float r = rst[0];\n    float s = rst[1];\n    float t = rst[2];\n    // r-derivatives\n    // corners\n    dw00.x = 2. * (1. - t) * (-1.5 + 2. * r + 2. * s + t);\n    dw01.x = 2. * (1. - t) * (-0.5 + 2. * r - t);\n    dw02.x = 0.;\n    dw03.x = 2. * t * (-0.5 + 2. * r + 2. * s - t);\n    dw04.x = 2. * t * (-1.5 + 2. * r + t);\n    dw05.x = 0.;\n    // midsides of triangles\n    dw06.x = 4. * (1. - t) * (1. - 2. * r - s);\n    dw07.x = 4. * (1. - t) * s;\n    dw08.x = -dw07.x;\n    dw09.x = 4. * t * (1. - 2. * r - s);\n    dw10.x = 4. * s * t;\n    dw11.x = -dw10.x;\n    // midsides of rectangles\n    dw12.x = -4. * t * (1. - t);\n    dw13.x = -dw12.x;\n    dw14.x = 0.;\n\n    // s-derivatives\n    // corners\n    dw00.y = dw00.x;\n    dw01.y = 0.;\n    dw02.y = 2. * (1. - t) * (-0.5 + 2. * s - t);\n    dw03.y = dw03.x;\n    dw04.y = 0.;\n    dw05.y = 2. * t * (-1.5 + 2. * s + t);\n    // midsides of triangles\n    dw06.y = -4. * (1. - t) * r;\n    dw07.y = -dw06.y;\n    dw08.y = 4. * (1. - t) * (1. - r - 2. * s);\n    dw09.y = -4. * r * t;\n    dw10.y = -dw09.y;\n    dw11.y = 4. * t * (1. - r - 2. * s);\n    // midsides of rectangles\n    dw12.y = dw12.x;\n    dw13.y = 0.;\n    dw14.y = -dw12.y;\n\n    // t-derivatives\n    // corners\n    dw00.z = 2. * (1. - r - s) * (-1.5 + r + s + 2. * t);\n    dw01.z = 2. * r * (-0.5 - r + 2. * t);\n    dw02.z = 2. * s * (-0.5 - s + 2. * t);\n    dw03.z = 2. * (1. - r - s) * (-0.5 - r - s + 2. * t);\n    dw04.z = 2. * r * (-1.5 + r + 2. * t);\n    dw05.z = 2. * s * (-1.5 + s + 2. * t);\n    // midsides of triangles\n    dw06.z = -4. * r * (1. - r - s);\n    dw07.z = -4. * r * s;\n    dw08.z = -4. * s * (1. - r - s);\n    dw09.z = -dw06.z;\n    dw10.z = -dw07.z;\n    dw11.z = -dw08.z;\n    // midsides of rectangles\n    dw12.z = 4. * (1. - 2. * t) * (1. - r - s);\n    dw13.z = 4. * (1. - 2. * t) * r;\n    dw14.z = 4. * (1. - 2. * t) * s;\n}\n\nbool pointInCannonicalWedge( in vec3 rst)\n{\n    if (any(greaterThan(rst, vec3(1.0)))) return false;\n    if (any(lessThan(rst, vec3(0.0)))) return false;    \n    if (rst[0] + rst[1] > 1.0) return false;\n    return true;\n}\n\nbool interpolateQuadraticWedge(vec3 P, \n    inout vec4 V00, inout vec4 V01, inout vec4 V02, inout vec4 V03, inout vec4 V04, \n    inout vec4 V05, inout vec4 V06, inout vec4 V07, inout vec4 V08, inout vec4 V09, \n    inout vec4 V10, inout vec4 V11, inout vec4 V12, inout vec4 V13, inout vec4 V14) {\n    \n    // Initialize our canonical coordinates to be in the center of the element\n    // We'll iteratively refine these with Newton's method to match the given \"P\"\n    vec3 pc_curr = vec3(0.23, 0.23, 0.5);\n    vec3 pc = vec3(0.23, 0.23, 0.5);\n    \n    // Iteration for Newton's method\n    bool converged = false;\n    for (int iteration = 0; iteration < NEWTON_ITERATIONS; iteration++) {\n        // Compute the currently optimized position in the canonical element\n        float w00, w01, w02, w03, w04, w05, w06, w07, w08, w09, w10, w11, w12, w13, w14;\n        quadraticWedgeInterpolationFunctions(pc_curr, w00, w01, w02, w03, w04, w05, w06, w07, w08, w09, w10, w11, w12, w13, w14);\n        vec3 fcol = V00.xyz * w00 + V01.xyz * w01 + V02.xyz * w02 + V03.xyz * w03 + V04.xyz * w04 \n                  + V05.xyz * w05 + V06.xyz * w06 + V07.xyz * w07 + V08.xyz * w08 + V09.xyz * w09 \n                  + V10.xyz * w10 + V11.xyz * w11 + V12.xyz * w12 + V13.xyz * w13 + V14.xyz * w14;\n        fcol -= P; // Making P be the origin\n        \n        // Now compute Jacobian, which transforms change in pc to change in shape functions\n        vec3 dw00, dw01, dw02, dw03, dw04, dw05, dw06, dw07, dw08, dw09, dw10, dw11, dw12, dw13, dw14;\n        quadraticWedgeInterpolationDerivs(pc_curr, dw00, dw01, dw02, dw03, dw04, dw05, dw06, dw07, dw08, dw09, dw10, dw11, dw12, dw13, dw14);\n        \n        // Now get derivatives in world space\n        vec3 rcol = V00.xyz * dw00.x + V01.xyz * dw01.x + V02.xyz * dw02.x + V03.xyz * dw03.x + V04.xyz * dw04.x \n                  + V05.xyz * dw05.x + V06.xyz * dw06.x + V07.xyz * dw07.x + V08.xyz * dw08.x + V09.xyz * dw09.x\n                  + V10.xyz * dw10.x + V11.xyz * dw11.x + V12.xyz * dw12.x + V13.xyz * dw13.x + V14.xyz * dw14.x;\n        vec3 scol = V00.xyz * dw00.y + V01.xyz * dw01.y + V02.xyz * dw02.y + V03.xyz * dw03.y + V04.xyz * dw04.y \n                  + V05.xyz * dw05.y + V06.xyz * dw06.y + V07.xyz * dw07.y + V08.xyz * dw08.y + V09.xyz * dw09.y\n                  + V10.xyz * dw10.y + V11.xyz * dw11.y + V12.xyz * dw12.y + V13.xyz * dw13.y + V14.xyz * dw14.y;\n        vec3 tcol = V00.xyz * dw00.z + V01.xyz * dw01.z + V02.xyz * dw02.z + V03.xyz * dw03.z + V04.xyz * dw04.z \n                  + V05.xyz * dw05.z + V06.xyz * dw06.z + V07.xyz * dw07.z + V08.xyz * dw08.z + V09.xyz * dw09.z\n                  + V10.xyz * dw10.z + V11.xyz * dw11.z + V12.xyz * dw12.z + V13.xyz * dw13.z + V14.xyz * dw14.z;\n\n        // The above should be our 3X3 jacobian.\n        \n        // Compute determinants and generate improvements\n        float d = determinant(mat3(rcol, scol, tcol));\n        if (abs(d) < 1e-20) {\n            return false; // Determinant too small, likely singular\n        }\n        // Newton Raphson update formula, x_new = x_old - f(x) / f'(x), but generalized to \n        // multiple dimensions. fcol has principle values, while other two contain gradients, \n        // so the ratio effectively calculates changes needed using Cramer's rule.\n        pc.x = pc_curr.x - (determinant(mat3(fcol, scol, tcol)) / d);\n        pc.y = pc_curr.y - (determinant(mat3(rcol, fcol, tcol)) / d);\n        pc.z = pc_curr.z - (determinant(mat3(rcol, scol, fcol)) / d);\n                        \n        vec3 err = abs(pc - pc_curr);\n        pc_curr = pc; // Commit the updated canonical coordinates\n        \n        // Check for convergence\n        if (all(lessThan(err, vec3(CONVERGED_ERROR)))) {\n            converged = true;\n            break;\n        }\n    }\n    \n    if (!converged) return false;\n    if (!pointInCannonicalWedge(pc_curr)) return false;\n        \n    quadraticWedgeInterpolationFunctions(pc_curr, V00.w, V01.w, V02.w, V03.w, V04.w, V05.w, V06.w, V07.w, V08.w, V09.w, V10.w, V11.w, V12.w, V13.w, V14.w);   \n    \n    return true;\n}\n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n\n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n\n}\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\nvec4 query(vec3 p)\n{\t\n    float time = iTime*3.f;\n\n    // Corner vertices\n    vec4 v00 = vec4(-1., .75*cos((1.0 / 3.0) * M_2PI), .75*sin((1.0 / 3.0) * M_2PI), 0.0);\n    vec4 v01 = vec4(-1., .75*cos((2.0 / 3.0) * M_2PI), .75*sin((2.0 / 3.0) * M_2PI), 0.0);\n    vec4 v02 = vec4(-1., .75*cos((3.0 / 3.0) * M_2PI), .75*sin((3.0 / 3.0) * M_2PI), 0.0);\n    vec4 v03 = vec4(+1., .75*cos((1.0 / 3.0) * M_2PI), .75*sin((1.0 / 3.0) * M_2PI), 0.0);\n    vec4 v04 = vec4(+1., .75*cos((2.0 / 3.0) * M_2PI), .75*sin((2.0 / 3.0) * M_2PI), 0.0);\n    vec4 v05 = vec4(+1., .75*cos((3.0 / 3.0) * M_2PI), .75*sin((3.0 / 3.0) * M_2PI), 0.0);\n\n    vec4 cen = (v00 + v01 + v02 + v03 + v04 + v05) / 6.0;\n\n    // Edge vertices\n    vec4 v06 = vec4((v00 + v01).xyz * .5f, 0.0); // -> midpoint between 0 and 1\n    vec4 v07 = vec4((v01 + v02).xyz * .5f, 0.0); // -> midpoint between 1 and 2\n    vec4 v08 = vec4((v02 + v00).xyz * .5f, 0.0); // -> midpoint between 2 and 0\n\n    vec4 v09 = vec4((v03 + v04).xyz * .5f, 0.0); // -> midpoint between 3 and 4\n    vec4 v10 = vec4((v04 + v05).xyz * .5f, 0.0); // -> midpoint between 4 and 5\n    vec4 v11 = vec4((v05 + v03).xyz * .5f, 0.0); // -> midpoint between 5 and 3\n\n    vec4 v12 = vec4((v00 + v03).xyz * .5f, 0.0); // -> midpoint between 0 and 3\n    vec4 v13 = vec4((v01 + v04).xyz * .5f, 0.0); // -> midpoint between 1 and 4\n    vec4 v14 = vec4((v02 + v05).xyz * .5f, 0.0); // -> midpoint between 2 and 5\n    \n    // Make the edge vertices wiggle\n    //v05 = v05 + .2 * normalize(v05 - cen) * cos(time * .10);\n    v06 = v06 + .2 * normalize(v06 - cen) * cos(time * .15);\n    v07 = v07 + .2 * normalize(v07 - cen) * cos(time * .20);\n    v08 = v08 + .2 * normalize(v08 - cen) * cos(time * .25);\n    v09 = v09 + .2 * normalize(v09 - cen) * cos(time * .30);\n    v10 = v10 + .2 * normalize(v10 - cen) * cos(time * .35);\n    v11 = v11 + .2 * normalize(v11 - cen) * cos(time * .40);\n    v12 = v12 + .2 * normalize(v12 - cen) * cos(time * .45);\n    v13 = v13 + .2 * normalize(v13 - cen) * cos(time * .50);\n    v14 = v14 + .2 * normalize(v14 - cen) * cos(time * .55);\n    \n    if (!interpolateQuadraticWedge(p, \n        v00, v01, v02, v03, v04, \n        v05, v06, v07, v08, v09, \n        v10, v11, v12, v13, v14)) \n            return vec4(0.0);\n    \n    // data values weighted by barycentrics\n    float val00 = (.5 + .5 * cos(time*0.1)) * v00.w;\n    float val01 = (.5 + .5 * cos(time*0.2)) * v01.w;\n    float val02 = (.5 + .5 * cos(time*0.3)) * v02.w;\n    float val03 = (.5 + .5 * cos(time*0.4)) * v03.w;\n    float val04 = (.5 + .5 * cos(time*0.5)) * v04.w;\n    float val05 = (.5 + .5 * cos(time*0.6)) * v05.w;\n    float val06 = (.5 + .5 * cos(time*0.7)) * v06.w;\n    float val07 = (.5 + .5 * cos(time*0.8)) * v07.w;\n    float val08 = (.5 + .5 * cos(time*0.9)) * v08.w;\n    float val09 = (.5 + .5 * cos(time*1.0)) * v09.w;\n    float val10 = (.5 + .5 * cos(time*1.1)) * v10.w;\n    float val11 = (.5 + .5 * cos(time*1.2)) * v11.w;\n    float val12 = (.5 + .5 * cos(time*1.3)) * v12.w;\n    float val13 = (.5 + .5 * cos(time*1.4)) * v13.w;\n    float val14 = (.5 + .5 * cos(time*1.5)) * v14.w;\n    float val = val00 + val01 + val02 + val03 + val04 \n              + val05 + val06 + val07 + val08 + val09 \n              + val10 + val11 + val12 + val13 + val14;\n    \n    // Colormapped value and a hardcoded optical density\n    return vec4(viridis(val) * EXPOSURE, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = 0.25*iTime + 6.283185*iMouse.x/iResolution.x;\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n        \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tfor(int i=0; i<NUM_STEPS; i++)\n\t{\n\t\tvec4 rgbd = query(p);\n        float density = rgbd[3];\n        float rho = 1.0 - exp(-density * step);\n        color = over(color, vec4(rgbd.xyz, rho));\n        if (color.a > .95) break;\n\t\tp += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n\n}\n","name":"Image","description":"","type":"image"}]}