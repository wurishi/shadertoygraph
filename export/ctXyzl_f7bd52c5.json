{"ver":"0.1","info":{"id":"ctXyzl","date":"1691020001","viewed":79,"name":"\"terrrain\" sdf solution?","username":"dokso","description":"I tried finding a solution to the problem I had in my terrain shader, and came up with this after reading inigo's article (iquilezles.org/articles/terrainmarching)\nIt divides the distance to travel by two when it's inside the terrain.\n\nTo be improved.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","terrain","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 5.0\n#define MAX_RAYS 20\n\nfloat N(float uv) {\n\treturn fract(sin(uv + 5.0) * 39352.212);\n}\nfloat noise(float uv) {\n\tfloat s = uv;\n\tfloat frac = fract(s);\n\tfloat id = floor(s);\n\t\n\tfloat l = N(id);\n\tfloat r = N(id + 1.0);\n\tfloat m = mix(l, r, frac);\n\t\n\treturn m;\n}\nfloat fbnoise(float uv) {\n\tfloat n = noise(uv * 4.0);\n\tn += noise(uv * 8.0) * 0.5;\n\tn += noise(uv * 16.0) * 0.25;\n\tn += noise(uv * 32.0) * 0.125;\n\t\n\tn /= 1.875;\n\t\n\treturn n;\n}\n\nfloat line(vec2 uv, vec2 a, vec2 b) {\n\tvec2 pa = uv - a;\n\tvec2 ba = b - a;\n\tfloat p = dot(pa, ba) / dot(ba, ba);\n\treturn length(uv - ba * min(max(p, 0.0), 1.0));\n}\nfloat map(vec2 uv) {\n\treturn uv.y - 0.8 + fbnoise(uv.x * 0.5 + iTime * 0.05) * 2.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec2 mouseP = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n\tfloat d = map(uv);\n\t\n\tvec3 col = mix(mix(vec3(0.8, 0.6, 0.2), vec3(0.2, 0.6, 0.8), step(0.0, d)), vec3(0.8), sin(d * 100.0 + iTime * 4.0 * sign(-d)) * 0.3 + 0.3);\n\tcol -= smoothstep(0.01, 0.0, abs(d));\n\t\n\tvec2 origin = vec2(0.0);\n\tvec2 dir = normalize(mouseP - origin);\n\t\n\tfloat t = 0.0;\n\tfloat da = 0.1;\n\tfor (int i = 0; i < MAX_RAYS && t < MAX_DIST; i++) {\n\t\tvec2 p = origin + dir * t;\n\t\tfloat dist = map(p);\n\t\tfloat s = sign(dist);\n\n\t\tda *= abs(s * 0.75 + 0.25);// -1: 0.5, 1: 1\n\t\tt += da * s;\n\t\t\n\t\tcol = mix(col, vec3(1.0, 0.0, 0.0), step(abs(length(uv - p) - da) - 0.0025, 0.0));\n\t\n\t\tif (abs(dist) < 0.00001) break;\n\t}\n\tcol = mix(col, vec3(0.0), step(line(uv, origin, origin + dir * t) - 0.005, 0.0));\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}