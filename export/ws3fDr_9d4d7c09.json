{"ver":"0.1","info":{"id":"ws3fDr","date":"1604820247","viewed":117,"name":"cross 2d","username":"iuryBorgesRodrigues","description":"cross","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","iq","cross"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 2\n#define ZERO (min(iFrame,0))\n\n\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\n\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(vec2(c, -s),vec2( s, c));\n}\n\nfloat comp(float a,float b){\n    \n    return (a < b) ? a : b;\n}\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\nvec3 scene(vec2 p){\n    vec3 col=vec3(1.0,0.5,0.1);\n    \n    \n    \n    \n    vec2 p1=p;\n\tvec2 p2=p;\n    \n    float body[6];\n    \n    body[0]=sdRoundedBox(p1,vec2(0.5,0.2),vec4(0.1,0.1,0.1,0.1));\n    body[1]=sdRoundedBox(p2,vec2(0.2,0.5),vec4(0.1,0.1,0.1,0.1));\n    \n    body[0]=comp(body[0],body[1]);\n  \n    \n   if(body[0] < 0.0) col=vec3(0.0);\n   \n  \n   return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n  \n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n     // pixel coordinates\n      vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n     vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;   \n \t vec3 col=vec3(0.0);\n  \n  \t  col *= 1.5 - 0.2*length(p);\n      col = col*vec3(1.11,0.89,0.79);\n    \n      col=scene(p);\n        \n         tot += col;\n    }\n    \n    tot /= float(AA*AA);\n  fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}