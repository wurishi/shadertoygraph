{"ver":"0.1","info":{"id":"lXjyD3","date":"1727820178","viewed":93,"name":"heap sort","username":"jt","description":"Ported [url=https://en.wikipedia.org/wiki/Heapsort]heapsort[/url] from [url]https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C[/url] to glsl.\nNumbers from [url]https://www.random.org[/url]. Click to sort.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sort","heap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lXjyD3 heap sort\n\n// Ported https://en.wikipedia.org/wiki/Heapsort\n// from https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n// Numbers from https://www.random.org\n// Click to sort.\n\n// tags: heap, sort\n\n// This is just a port from rosettacode to shadertoy.\n// I think they use GNU Free Documentation License\n// https://rosettacode.org/wiki/Rosetta_Code:Copyrights\n\n// https://www.random.org/decimal-fractions/?num=256&dec=5&col=1&format=html&rnd=new\nfloat data[256] = float[](0.97091,0.48857,0.76160,0.69252,0.41132,0.96397,0.71165,0.27381,0.68182,0.24833,0.10484,0.98636,0.83041,0.28081,0.99310,0.74299,0.54318,0.95328,0.94299,0.82682,0.28610,0.95136,0.36018,0.32931,0.64433,0.56095,0.88243,0.03623,0.09139,0.84585,0.84312,0.31655,0.67093,0.11065,0.90240,0.64152,0.20169,0.07822,0.48350,0.69508,0.48494,0.08297,0.57294,0.03184,0.41553,0.48496,0.29376,0.83340,0.86442,0.49078,0.90607,0.65895,0.25065,0.31985,0.27591,0.44753,0.76119,0.15153,0.08865,0.52773,0.97069,0.42235,0.19263,0.75916,0.53506,0.43439,0.68468,0.83519,0.83662,0.92707,0.27358,0.32911,0.10546,0.05513,0.14142,0.73922,0.56403,0.12785,0.06795,0.28798,0.66163,0.53441,0.23273,0.84821,0.07225,0.89135,0.62496,0.33824,0.18864,0.79243,0.28842,0.15868,0.80119,0.06212,0.67800,0.39660,0.38718,0.97834,0.80036,0.73326,0.16719,0.50182,0.04891,0.37033,0.63093,0.52342,0.76816,0.18773,0.88665,0.86302,0.76533,0.89425,0.96881,0.47357,0.48197,0.98616,0.53599,0.42483,0.84658,0.74928,0.42722,0.11358,0.40107,0.28496,0.95406,0.74549,0.32822,0.06497,0.89653,0.26062,0.25984,0.39709,0.75447,0.15754,0.13869,0.80754,0.77462,0.92883,0.84282,0.80880,0.71580,0.75077,0.69578,0.93951,0.69019,0.34542,0.89311,0.21901,0.95789,0.88079,0.64040,0.81232,0.80587,0.68474,0.02440,0.86049,0.12087,0.82961,0.25249,0.54935,0.65255,0.45981,0.95642,0.64693,0.66118,0.30817,0.93730,0.95061,0.27327,0.11786,0.87197,0.60721,0.67304,0.23160,0.98460,0.81495,0.89645,0.91788,0.60117,0.66439,0.01969,0.03032,0.90177,0.29708,0.58480,0.50423,0.80409,0.23095,0.16543,0.92756,0.77700,0.51870,0.21686,0.78781,0.20543,0.79347,0.54779,0.84706,0.00389,0.18199,0.50039,0.44288,0.49595,0.96040,0.14827,0.01728,0.05148,0.62975,0.01655,0.14071,0.32326,0.27657,0.95442,0.44859,0.66799,0.54061,0.19387,0.07179,0.87313,0.23494,0.34459,0.92101,0.70496,0.64818,0.17579,0.68744,0.55432,0.92924,0.91030,0.32731,0.06732,0.56834,0.27159,0.36884,0.54548,0.84737,0.34113,0.17541,0.83017,0.31895,0.85248,0.68482,0.96525,0.30537,0.45184,0.99915,0.84724,0.10835,0.35968,0.65246,0.74341,0.87863,0.42910,0.74891,0.14414,0.58203);\n\nint heapsort_max(int n, int i, int j, int k) // adapted from: https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n{\n    int m = i;\n    if (j < n && data[j] > data[m])\n    {\n        m = j;\n    }\n    if (k < n && data[k] > data[m])\n    {\n        m = k;\n    }\n    return m;\n}\n\nvoid heapsort_downheap(int n, int i) // adapted from: https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n{\n    while(true)\n    {\n        int j = heapsort_max(n, i, 2 * i + 1, 2 * i + 2);\n        if(j == i)\n        {\n            break;\n        }\n        float t = data[i];\n        data[i] = data[j];\n        data[j] = t;\n        i = j;\n    }\n}\n\nvoid heapsort(int n) // adapted from: https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n{\n    int i;\n    for(i = (n - 2) / 2; i >= 0; i--)\n    {\n        heapsort_downheap(n, i);\n    }\n    for(i = 0; i < n; i++)\n    {\n        float t = data[n - i - 1];\n        data[n - i - 1] = data[0];\n        data[0] = t;\n        heapsort_downheap(n - i - 1, 0);\n    }\n}\n\nvoid mainImage(out vec4 o, in vec2 I) // [0..1]\n{\n    I /= iResolution.xy;\n    o = vec4(0);\n    int i = int(floor(I.x*256.0));\n    if(iMouse.z > 0.0)\n        heapsort(data.length());\n    o = vec4(vec3(data[i]),1.0);\n}\n","name":"Image","description":"","type":"image"}]}