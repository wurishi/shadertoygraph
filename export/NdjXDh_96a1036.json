{"ver":"0.1","info":{"id":"NdjXDh","date":"1622204723","viewed":104,"name":"Legendre Polynomials","username":"elitewalrus","description":"Visualization of the Legendre Polynomials. Use the x position of the mouse to change the degree.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["legendrepolynomials"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//would be a beautiful application of recursion. If only we could...\nfloat P(float x, float n) {\n    if (n == 0.0) {\n        return 1.0;\n    } else if (n == 1.0) {\n        return x;\n    }\n    float Pnminus2 = 1.0;\n    float Pnminus1 = x;\n    float Pn = 0.0;\n    for (float i = 2.0; i <= n; i+= 1.0) {\n        Pn = ((2.0*n-1.0)/n)*x*Pnminus1 - ((n-1.0)/n)*Pnminus2;\n        Pnminus2 = Pnminus1;\n        Pnminus1 = Pn;\n    }\n     \n    return Pn;\n}\n\n//zero set of the implicit representation\nfloat f (vec2 v, float n) {\n    return P(v.x, n) - v.y;\n    \n}\n\n//numerical approximation of the gradient of the implicit representation\nvec2 gradApprox(vec2 v, float n) {\n    vec2 h = vec2(0.0001, 0.0);\n    vec2 grad = vec2(\n        f(v + h.xy, n) - f(v - h.xy, n),\n        f(v + h.yx, n) - f(v - h.yx, n)\n    );\n    return grad / (2.0*h.x);\n}\n\n/*we did all that implicit stuff so that we could use this signed distance \napproximation to get a smooth rendering of the curve*/\nfloat sd(vec2 v, float n) {\n    float f = f(v, n);\n    vec2 g = gradApprox(v, n);\n    return abs(f)/length(g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //normalized screen centered coordinates\n    vec2 uv = 2.0*(fragCoord - 0.5f*iResolution.xy)/iResolution.y;\n\n    vec3 backgroundColor = vec3(0.01 + 0.02*(uv.y + 2.0));\n    vec3 curveColor = vec3(1.0, 1.0, 1.0);\n    \n    float n = floor(10.0*iMouse.x/iResolution.x) + 2.0;\n    float smoothFactor = smoothstep(0.005, 0.0, sd(uv, n));\n    \n    vec3 col = smoothFactor * curveColor + (1.0 - smoothFactor)*backgroundColor;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}