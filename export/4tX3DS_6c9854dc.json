{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI    3.14159265359\n\nfloat num = 0.0;\nvec2 axis = vec2(0.0);\nint TYPE = 3;\n\nmat2 rotate(float a)\n{\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\t\n}\n\nfloat deSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0 );\n\treturn length( pa - ba * h );\n}\n\n// https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin(const in int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue(const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    vec2 vStringCharCoords = (gl_FragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));\n\t\t\t}\t\t\n\t\t}\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));\n}\n\n// https://www.shadertoy.com/view/XtsGRl\n#define CHAR_SIZE vec2(3, 7)\n#define CHAR_SPACING vec2(4, 8)\n\nfloat ch_f = 2018596.0;\nfloat ch_o = 711530.0;\nfloat ch_l = 1198375.0;\nfloat ch_d = 1760110.0;\nfloat ch_1 = 730263.0;\nfloat ch_2 = 693543.0;\nfloat ch_3 = 693354.0;\nfloat ch_4 = 1496649.0;\nfloat ch_0 = 711530.0;\nfloat ch_usc = 7.0;\n\nvec2 print_pos =  vec2(35.0, -32.0);\n\nfloat extract_bit(float n, float b)\n{\n\treturn floor(mod(floor(n) / pow(2.0,floor(b)),2.0));   \n}\n\nfloat sprite(float spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    return extract_bit(spr, bit) * float(bounds);\n}\n\nfloat char(float ch, vec2 uv)\n{\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nvec2 fold1(in vec2 p, in float a)\n{\n    p.x = abs(p.x);\n    vec2 v = vec2(cos(a), sin(a));\n  \tp -= 2.0 * min(0.0, dot(p, v)) * v;\n \treturn p;    \n}\n\nvec2 fold2(in vec2 p, in float a)\n{\n    p.x = abs(p.x);\n    vec2 v = vec2(cos(a), sin(a));\n    for(int i = 0; i < 2; i++)\n    {\t\n    \tp -= 2.0 * min(0.0, dot(p, v)) * v;\n    \tv = normalize(vec2(v.x - 1.0, v.y));\n    }\n \treturn p;    \n}\n\nvec2 fold3(in vec2 p, in float a)\n{\n    p.x = abs(p.x);\n    vec2 v = vec2(cos(a), sin(a));\n    for(int i = 0; i < 3; i++)\n    {\t\n    \tp -= 2.0 * min(0.0, dot(p, v)) * v;\n    \tv = normalize(vec2(v.x - 1.0, v.y));\n    }\n \treturn p;    \n}\n\nvec2 fold4(in vec2 p, in float a)\n{\n    p.x = abs(p.x);\n    vec2 v = vec2(cos(a), sin(a));\n    for(int i = 0; i < 4; i++)\n    {\t\n    \tp -= 2.0 * min(0.0, dot(p, v)) * v;\n    \tv = normalize(vec2(v.x - 1.0, v.y));\n    }\n \treturn p;    \n}\n\n// +++++++++++++++++++++++++++++++++++++++++++++++++++;\n\nvec2 fold(in vec2 p)\n{   \n    p *= 2.0;\n    float t = mod(iTime, 75.0);\n    TYPE = int(floor(t / 15.0));\n    float a = mod(t, 15.0) * 24.0;\n    num = a;\n    a *= PI / 180.0;\n    axis = vec2(cos(a), sin(a));\n    if (TYPE > 3) return p;\n    if (TYPE == 0) p = fold1(p, a);\n    if (TYPE == 1) p = fold2(p, a);\n    if (TYPE == 2) p = fold3(p, a);\n    if (TYPE == 3) p = fold4(p, a);\n    // Y axis ajust\n    p.y = abs(p.y) - 1.5;\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy *2.0-iResolution.xy)/iResolution.y;\n    vec2 q = p;\n    p= fold(p);\n    vec3 col;\n    col = mix(vec3(0.2,0.2,0.4), vec3(0.4,0.2,0.2), step(0.0, p.x * p.y)); \n    col = mix(col, vec3(0.8), smoothstep(0.005, 0.004, abs(q.y)));\n    col = mix(col, vec3(0.8), smoothstep(0.005, 0.004, abs(q.x)));\n    col = mix(col, vec3(0.8), smoothstep(0.005, 0.004, abs(length(q)-1.0)));\n    col = mix(col, vec3(0.0, 1.0, 0.0), smoothstep(0.02, 0.01, abs(p.y)));\n    col = mix(col, vec3(1.0, 0.0, 0.0), smoothstep(0.02, 0.01, abs(p.x)));\n    col = mix(col, vec3(1.0, 1.0, 0.0), smoothstep(0.08, 0.07, length(p)));\n    col = mix(col, vec3(0.0, 0.0, 1.0), smoothstep(0.02, 0.01, deSegment(q, vec2(0.0), axis)));\n\tcol = mix(col, vec3(1.0), PrintValue(vec2(60.0, 30.0), vec2(30.0, 30.0), num, 2.0, 0.0));\n    q *= 35.0;\n    if      (TYPE == 0) col = mix(col, vec3(1.0), char(ch_1, q));\n    else if (TYPE == 1) col = mix(col, vec3(1.0), char(ch_2, q));\n    else if (TYPE == 2) col = mix(col, vec3(1.0), char(ch_3, q));\n    else if (TYPE == 3) col = mix(col, vec3(1.0), char(ch_4, q));\n    else                 col = mix(col, vec3(1.0), char(ch_0, q));\n    col = mix(col, vec3(1.0), char(ch_usc, q));\n    col = mix(col, vec3(1.0), char(ch_f, q));\n    col = mix(col, vec3(1.0), char(ch_o, q));\n    col = mix(col, vec3(1.0), char(ch_l, q));\n    col = mix(col, vec3(1.0), char(ch_d, q));\n \tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tX3DS","date":"1424662895","viewed":951,"name":"2D Folding","username":"gaz","description":"Yellow: Origin, Green: X axis, Red: Y axis, Blue; Folding vector, Number: Degree, String: Folding number of times\n","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["2d","folding"],"hasliked":0,"parentid":"","parentname":""}}