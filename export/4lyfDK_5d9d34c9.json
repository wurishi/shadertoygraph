{"ver":"0.1","info":{"id":"4lyfDK","date":"1544294021","viewed":207,"name":"RÃ¡cs","username":"TomCat","description":"Raytraced sphere with 3D background. The reflection is not completely correct. Prototype for a windows 512-byte intro: http://www.pouet.net/prod.php?which=80077","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","sphere","prototype"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RESX 1280\n#define RESY 768\n#define RESX2 RESX/2\n#define RESY2 RESY/2\n#define ZOOMX 2.\n#define ZOOMY 1280.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 1 to 0)\n    vec2 uv = 1. - fragCoord/iResolution.xy;\n    float t = iTime;\n  \n    int x = int(uv.x * float(RESX)) - 780;//RESX2;\n    int y = int(uv.y * float(RESY)) - 320;//RESY2;\n\t\n    // Speedup: decrase horizontal resolution\n    x = x / 5 * 5;\n    \n    vec3 col1 = vec3(.3,.7,.9);\n    vec3 col2 = vec3(1.,.1,.9);\n    vec3 col3 = vec3(1.,.55,.1);\n    \n    vec3 col = col1;\n    float lum = float(y)/float(RESY2);\n     lum = lum * lum;\n\n    float diff = 0.;\n    float spec = 0.;\n    float ambi = 0.;\n    \n    int d2 = 32768 - x*x - y*y;\n    if (d2>0) {\n        float z = sqrt(float(d2));\n\n        diff = z - float(x) - float(y);\n        spec = diff + z;\n        ambi = .2;\n/*        \n        if (d2>20000) {\n        \tx = -x;\n            y = -y;\n        }\n*/        \n        t = -t;\n        x = int(2. * z * float(x) / 256.);\n    }\n\n    if (y>0) {\n        col = col2;\n    \n    \tfloat sx = float(x);        \n    \tfloat sy = float(y);\n        sx  = ZOOMX * sx / sy;\n        sy = ZOOMY / sy;\n        sy = sy + t;\n     \n    \tsx = 2.*(sx - float(round(sx)));\n    \tsy = 2.*(sy - float(round(sy)));\n        sx = sx*sx*sx*sx*sx*sx*sx*sx;\n        sy = sy*sy*sy*sy*sy*sy*sy*sy;\n    \tlum = lum * (sy+sx);\n    }\n    \n    \n    // Output to screen\n    vec3 color = col * lum + col3 * ambi;\n    if (diff > 0.) color = color + col3 * diff / 256.;\n    if (spec > 442.) color = vec3(1);\n    //spec/=450.;spec*=spec;spec*=spec;spec*=spec;spec*=spec;spec*=spec;spec*=spec;color+=vec3(1)*spec;\n    fragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}