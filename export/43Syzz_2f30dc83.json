{"ver":"0.1","info":{"id":"43Syzz","date":"1726877369","viewed":25,"name":"defocus and focus spiral","username":"HaleyHalcyon","description":"e","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float crosshatch(vec2 xyf) {\n    ivec2 xy = ivec2(xyf) & 3;\n    return (float(\n        + ((xy.y >> 1) & 1)\n        + ((xy.x & 2) ^ (xy.y & 2))\n        + ((xy.y & 1) << 2)\n        + ((((xy.x) & 1) ^ (xy.y & 1)) << 3)\n    ) + 0.5) / 16.;\n}\n\n// Actual number of steps is 1 more\nfloat dither(float z, float steps, float thres) {\n    return (floor(z * steps) + step(thres, fract(z * steps)));\n}\n\nvec3 color(float v) {\n    vec3[] palette = vec3[](\n        vec3(0, 0, 0),\n        vec3(0, 0, 1),\n        vec3(1, 0, 0),\n        vec3(1, 0, 1),\n        vec3(0, 1, 0),\n        vec3(0, 1, 1),\n        vec3(1, 1, 0),\n        vec3(1, 1, 1),\n        vec3(1)\n    );\n    return palette[int(round(v))];\n}\n\nconst float TURN = acos(-1.) * 2.;\n// Random integers used for Perlin noise.\nuint rand[] = uint[] (\n244u,\n 69u,\n224u,\n 39u,\n208u,\n151u,\n201u,\n255u,\n189u,\n202u,\n157u,\n 92u,\n206u,\n154u,\n199u,\n194u,\n232u,\n101u,\n216u,\n134u,\n 62u,\n242u,\n163u,\n248u,\n140u,\n183u,\n120u,\n 90u,\n215u,\n 30u,\n211u,\n186u,\n150u,\n100u,\n 57u,\n106u,\n118u,\n142u,\n 61u,\n246u,\n 11u,\n230u,\n141u,\n 55u,\n147u,\n180u,\n 27u,\n226u,\n 99u,\n125u,\n122u,\n 13u,\n  2u,\n112u,\n192u,\n 60u,\n137u,\n 80u,\n198u,\n252u,\n 94u,\n245u,\n162u,\n113u,\n 24u,\n146u,\n 49u,\n110u,\n253u,\n 81u,\n 10u,\n165u,\n109u,\n115u,\n218u,\n  0u,\n254u,\n129u,\n 71u,\n 88u,\n187u,\n114u,\n176u,\n243u,\n  7u,\n 87u,\n 45u,\n209u,\n 23u,\n168u,\n103u,\n121u,\n 93u,\n153u,\n 22u,\n133u,\n 34u,\n 78u,\n241u,\n182u,\n221u,\n 38u,\n136u,\n104u,\n 18u,\n105u,\n164u,\n 65u,\n 91u,\n 25u,\n132u,\n119u,\n174u,\n173u,\n 15u,\n170u,\n 29u,\n 37u,\n212u,\n210u,\n 44u,\n169u,\n181u,\n251u,\n  4u,\n  8u,\n229u,\n 79u,\n 32u,\n 21u,\n203u,\n214u,\n 75u,\n 12u,\n225u,\n 97u,\n 40u,\n 35u,\n 28u,\n 64u,\n231u,\n 19u,\n185u,\n123u,\n236u,\n 77u,\n238u,\n  5u,\n128u,\n179u,\n127u,\n 48u,\n 72u,\n156u,\n190u,\n 54u,\n124u,\n250u,\n205u,\n161u,\n228u,\n 56u,\n158u,\n207u,\n148u,\n 17u,\n 95u,\n 52u,\n111u,\n126u,\n 36u,\n 74u,\n197u,\n152u,\n160u,\n 20u,\n219u,\n130u,\n 66u,\n239u,\n240u,\n  6u,\n108u,\n 47u,\n116u,\n213u,\n237u,\n138u,\n 70u,\n 33u,\n 26u,\n 46u,\n 96u,\n 53u,\n 41u,\n200u,\n 59u,\n 58u,\n135u,\n 83u,\n235u,\n 31u,\n131u,\n 63u,\n 42u,\n  1u,\n149u,\n139u,\n247u,\n  9u,\n159u,\n 73u,\n 98u,\n222u,\n 68u,\n 51u,\n 67u,\n144u,\n 82u,\n233u,\n177u,\n155u,\n178u,\n 50u,\n143u,\n 84u,\n184u,\n 85u,\n217u,\n166u,\n193u,\n145u,\n 89u,\n107u,\n172u,\n 76u,\n117u,\n196u,\n 86u,\n220u,\n  3u,\n171u,\n223u,\n 16u,\n167u,\n195u,\n191u,\n102u,\n 14u,\n188u,\n227u,\n234u,\n204u,\n249u,\n 43u,\n175u\n);\n\n// fade function defined by ken perlin\n#define fade(t) (t * t * t * (t * (t * 6. - 15.) + 10.))\n// corner vector\nvec2 cvec(vec2 uv, float time) {\n  uint x = uint(mod(uv.x, 256.));\n  uint y = uint(mod(uv.y, 256.));\n  float n = (float(rand[(x + rand[y]) & 255u]) / 255. + time) * TURN;\n  return vec2(\n      sin(n), cos(n)\n  );\n}\n// perlin generator\nfloat perlin(vec2 uv, float offset) {\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n\n  vec2 u = fade(f);\n  offset = fract(offset);\n\n  return\n  mix(\n    mix(\n      dot( cvec(i + vec2(0.0,0.0), offset ), f - vec2(0.0,0.0) ),\n      dot( cvec(i + vec2(1.0,0.0), offset ), f - vec2(1.0,0.0) ),\n    u.x),\n    mix(\n      dot( cvec(i + vec2(0.0,1.0), offset ), f - vec2(0.0,1.0) ),\n      dot( cvec(i + vec2(1.0,1.0), offset ), f - vec2(1.0,1.0) ),\n    u.x),\n  u.y);\n}\n\nfloat perlin2(vec2 uv, float offset) {\n  return perlin(uv, offset)\n  + 0.25 * perlin(3.2 * uv + vec2(0.2, 0.4), offset * -2.)\n  + 0.0625 * perlin(8.3 * uv + vec2(0.5, 0.6), offset * 3.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime / 8.);\n    // Blurring factor from 0 to 1.\n    float unfocus = fade(clamp(t * 1.2, 0., 1.));\n    float fadeout = clamp((0.9 - t) * 32., 0., 1.);\n    unfocus *= fadeout;\n    unfocus *= unfocus;\n    \n    vec2 uv = (2. * fragCoord - iResolution.xy) / length(iResolution.xy);\n    // 2 Perlin Noise instances for X and Y displacement.\n    vec2 perlin = vec2(\n      perlin2(uv * 2.5 + vec2(4.6 + 1.8 * t, 5.8 - 1.6 * t), t * 6.6),\n      perlin2(uv * 2.5 + vec2(2.3 - 1.4 * t, 7.6 + 1.5 * t), t * -7.4)\n    );\n    uv += perlin * 0.2 * unfocus;\n    \n    // The rest of the shader works on the distorted UV coords\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x) / TURN;\n    // Generate spiral\n    float v = fract(\n      3.5 * r \n      + 1. * theta\n      + 14. * t\n      + -0.5 * unfocus \n    );\n    v = abs(2. * v - 1.);\n    // Sharpness of the lines\n    v = clamp(\n        (16. - 15. * unfocus) * (v - 0.5)\n    , -.5, .5) + 0.5;\n    // Unfocus the cente \n    v = mix(\n        0.5,\n        v,\n        smoothstep(\n            0.0,\n            unfocus * unfocus,\n            r * 32.0\n        )\n    );\n    // Dither the colors for GIF\n    v = dither(v, 7., crosshatch(fragCoord));\n    vec3 col = color(v);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}