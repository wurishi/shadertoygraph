{"ver":"0.1","info":{"id":"dstGW2","date":"1677883540","viewed":109,"name":"Hyperbolic Paraboloid Unit Cube","username":"jt","description":"Intersection of a ray and a unit-cube sized hyperbolic paraboloid. Specialization of iq's [url=https://www.shadertoy.com/view/sdyfDR]Paraboloid - intersection[/url] to fit neatly into a unit cube (basically by 45 deg rotation, a lot of stuff cancels out)\n","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","raycasting","intersection","hyperbolic","paraboloid"],"hasliked":0,"parentid":"sdyfDR","parentname":"Paraboloid - intersection"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dstGW2 Hyperbolic Paraboloid Unit Cube by jt\n\n// Specialized iq's https://www.shadertoy.com/view/sdyfDR Paraboloid - intersection\n// for unit cube version: https://www.wolframalpha.com/input?i=z%3Dx*y\n// (This differs basically by a 45 degree rotation - a lot of stuff cancels out.)\n\n// tags: raytracing, raycasting, intersection, hyperbolic, paraboloid\n\n#define DIST_MAX 50.0\n\n// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// modified https://iquilezles.org/articles/intersectors/\nvec4 boxInterior(vec3 ro, vec3 rd, vec3 boxSize)\n{\n    vec4 sky = vec4(vec3(-rd/*skysphere*/), DIST_MAX);\n\n    vec3 outNormal = vec3(0);\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return sky; // no intersection\n    outNormal = step(t2,vec3(tF));\n    outNormal *= -sign(rd);\n\n    return vec4(outNormal, tF );\n}\n\n// modified https://www.shadertoy.com/view/sdyfDR Paraboloid - intersection by iq\nvec4 iHyperbolicParaboloidUnit(vec3 ro, vec3 rd) // intersection normal & distance, sky sphere if no intersection\n{\n    vec4 sky = vec4(vec3(-rd/*skysphere*/), DIST_MAX);\n\n    float k2 = rd.x * rd.y;\n    float k1 = (ro.x*rd.y + ro.y*rd.x + rd.z) * 0.5;\n    float k0 = ro.x * ro.y + ro.z;\n\n    float h = k1*k1 - k2*k0;\n    if(h < 0.0)\n        return sky;\n\n    h = sqrt(h) * sign(k2);\n\n    // entry point\n    {\n        float t = (-k1-h)/k2;\n        vec3 pos = ro + t*rd;\n        //if(t > 0.0 && clipped(pos))\n        if(t > 0.0 && all(lessThan(abs(pos), vec3(1))))\n            return vec4(normalize(vec3(2.0*pos.x, 1.0,-2.0*pos.z)), t); // bool oInside = k2 < 0.0;\n            // XXX TODO: check normals - y/z swap & 45 deg rotation XXX\n            //return vec4(normalize(vec3(pos.x+pos.y,pos.x-pos.y, 1.0)), t); \n    }\n\n    // exit point\n    {\n        float t = (-k1+h)/k2;\n        vec3 pos = ro + t*rd;\n        //if(t > 0.0 && clipped(pos))\n        if(t > 0.0 && all(lessThan(abs(pos), vec3(1))))\n            return vec4(normalize(vec3(2.0*pos.x, 1.0,-2.0*pos.z*1.0)), t); // bool oInside = k2 > 0.0;\n            // XXX TODO: check normals - y/z swap & 45 deg rotation XXX\n            //return vec4(normalize(vec3(pos.x+pos.y,pos.x-pos.y, 1.0)), t); \n    }\n\n    return sky;\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll) // jt\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi  * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-3.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //ro.z += 0.5;\n\n    vec3 col = vec3(0.08);\n\n    // cube interior\n    {\n        vec4 result = boxInterior( ro, rd, vec3(1,1,1));\n        vec3 nor = result.xyz;\n        float t = result.w;\n        if(t > 0.0 && t < DIST_MAX)\n        {\n            vec3 pos = ro + t*rd;\n            col = 0.5 + 0.5 * nor;\n        }\n    }\n\n    // hyperbolic paraboloid\n    {\n        vec4 result = iHyperbolicParaboloidUnit(ro, rd);\n        vec3 nor = result.xyz;\n        float t = result.w;\n        if(t > 0.0 && t < DIST_MAX)\n        {\n            vec3 pos = ro + t*rd;\n\n            // checkerboard pattern with grid\n            {\n                vec2 uv = 2.0 * pos.xy;\n                col = mix(vec3(0.4), vec3(0.6), vec3(step(0.0, sin(2.0 * pi * uv.x) * sin(2.0 * pi * uv.y))));\n                col *= 1.0 - pow(max(0.5 + 0.5 * cos(4.0 * pi * uv.x), 0.5 + 0.5 * cos(4.0 * pi * uv.y)), 100.0);\n            }\n\n            // iq's lighting\n            vec3 lig = normalize(vec3(0.7,0.6,0.3));\n            vec3 hal = normalize(-rd+lig);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float amb = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n            col *= vec3(0.2,0.3,0.4)*amb*2.0 + 0.7*vec3(1.0,0.9,0.7)*dif;\n            col += 0.3*pow(clamp(dot(hal,nor),0.0,1.0),32.0)*dif;\n        }\n    }\n\n    fragColor = vec4( sqrt( col ), 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}