{"ver":"0.1","info":{"id":"WtSyzK","date":"1594759602","viewed":165,"name":"Quick noise improvisation","username":"jaszunio15","description":"Use mouse to adjust domain warp strength.\n\nQuick improvisation with simple fractal noise. Just fbm with domain warp :)\n\nShader License: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","improvisation","domainwarp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\nfloat hash12(vec2 x)\n{\n \treturn fract(sin(dot(x, vec2(21.57851, 20.47856))) * 1347.8967423);\n}\n\nfloat noise12(vec2 x)\n{\n \tvec2 rootUV = floor(x);\n    vec2 frac = fract(x);\n    \n    float n00 = hash12(rootUV + vec2(0.0, 0.0));\n    float n01 = hash12(rootUV + vec2(0.0, 1.0));\n    float n10 = hash12(rootUV + vec2(1.0, 0.0));\n    float n11 = hash12(rootUV + vec2(1.0, 1.0));\n    \n    float n0 = mix(n00, n01, frac.y);\n    float n1 = mix(n10, n11, frac.y);\n    \n    return mix(n0, n1, frac.x);\n}\n\nfloat fractalNoise12(vec2 x, float maxScale, float sizeMod)\n{\n \tfloat noise = 0.0;\n    \n    for (float i = 1.0; i < maxScale; i *= sizeMod)\n    {\n     \tnoise += noise12((x + iTime / i * 0.2) * i) / i;\n        float warpStrength = noise12((x + 14.32762 - iTime * 0.1) * i) / i;\n        x += noise / i * (1.0 - iMouse.x / iResolution.x) * warpStrength * 2.0;\n    }\n    \n    return noise * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    uv += 0.01 * iTime;\n    \n    vec2 rootUV = floor(uv * 10.0);\n    \n    float noise = fractalNoise12(uv * 8.0, 64.0, 1.8);\n    float mask = 1.0 - smoothstep(0.2, 0.00, noise - (sin(iTime * 0.13) * 0.3 + 0.5));\n    \n    fragColor = vec4(mask);\n}","name":"Image","description":"","type":"image"}]}