{"ver":"0.1","info":{"id":"tlyfRm","date":"1614072703","viewed":52,"name":"sudden","username":"tusu11","description":"my first shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(vec3 p, float s){\n\tp = abs(p) - s;\n\treturn max(max(p.x, p.y), p.z) ;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 p = ( fragCoord.xy * 2. - iResolution.xy ) / min(iResolution.x, iResolution.y);\n\n\tvec3 cameraPos = vec3(sin(iTime), sin(iTime), -5.);\n\tfloat screenZ = 2.5*iTime*0.001*cos(iTime*2.);\n\tvec3 rayDirection = normalize(vec3(p, screenZ));\n\n\tfloat depth = 0.;\n\tfloat accum =0.;\n\tvec3 col = vec3(mod(abs(p.xy/.3), .5), 0.);\n\n\tfor (int i=0; i<99; i++){\n\t\tvec3 rayPos = cameraPos + rayDirection * depth;\n\t\trayPos = mod(rayPos-2., 4.);\n\t\tfloat dist = max(abs(sdBox(rayPos, 0.5)), 0.02);\n\t\tif (dist < 0.002 || depth > 80.){\n\t\t\tcol = vec3(0., 0., fract(dist*3000.));\n\t\t\tbreak;\n\t\t}\n\n\t\tdepth += dist * 0.5;\n\t\taccum += 0.005;\n\t}\n\n\tfragColor = vec4(0) + accum * (1. - exp(-0.001*depth*depth));\n}","name":"Image","description":"","type":"image"}]}