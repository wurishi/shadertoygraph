{"ver":"0.1","info":{"id":"Mfs3Df","date":"1703642545","viewed":45,"name":"Lava l–∞mp","username":"maze_maze","description":"Lava lamp","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["lavalamp","lava","lamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = iResolution.xy * 0.5;\n    float min_dim = min(iResolution.x, iResolution.y);\n    vec2 p = fragCoord - center;\n    \n    float d = 0.0;\n    \n    vec2 lp = p / min_dim + 0.5;\n    for (int i = 0; i < BALL_COUNT; i++) {\n        d += .5 / pow(distance(texelFetch(iChannel0, ivec2(i, 0), 0).xy, lp), 2.0);\n    }\n    \n    fragColor = vec4(0.529, 0.808, 0.922, 0.0);\n    \n    if (length(p) < min_dim * 0.5) {\n        fragColor = vec4(mix(vec3(0.0), vec3(0.8, 0.2, 0.1), pow(d / 200.0, 4.0)), 0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float perlin2D(vec2 p) {\n    vec2 f = floor(p),\n        q = p - f,\n        i = (3. - q * 2.) * q * q;\n    ivec4 r = ivec2(f).xyxy;\n    r.zw += 1;\n    vec4 h = vec4((r.xzxz * 959093 ^ r.yyww * 920393) % 9967) * .01,\n        o = vec4(q, q - 1.),\n        d = sin(h) * o.xzxz + cos(h) * o.yyww;\n    vec2 v = mix(d.xz, d.yw, i.x);\n    return mix(v.x, v.y, i.y);\n}\n// Values in range from -1.0 to 1.0\nfloat noise3D(ivec3 p) {\n    return float((p.x * 1881968993 ^ p.y * -1741691891 ^ p.z * 1506501739) * -1227355117) * 4.656613e-10;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 f = ivec2(fragCoord);\n    if (f.y == 0 && f.x < BALL_COUNT) {\n        vec4 old = texelFetch(iChannel0, f, 0);\n        if (old == vec4(0)) {\n            fragColor = vec4(\n                0.0, // X\n                noise3D(ivec3(f, 1)) * 0.4 + 0.5, // Y 0.1 - 0.9\n                (noise3D(ivec3(f, 2)) + 2.0) * 0.0005 // Random Speed from 0.0005 to 0.0015\n                    * (float(noise3D(ivec3(f, 3)) >= 0.0) * 2.0 - 1.0), // Select random direction\n                0.0\n            );\n        } else {\n            float new_y = old.y + old.z;\n            float new_z = old.z;\n            if (new_y > 0.9) {\n                new_z -= 0.00001;\n            }\n            if (new_y < 0.1) {\n                new_z += 0.00001;\n            }\n            fragColor = vec4(\n                perlin2D(vec2(fragCoord.x, (iTime + 40.0) * 0.02)) * 0.75 + 0.5, // X\n                new_y,\n                new_z,\n                0.0\n            );\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int BALL_COUNT = 24;","name":"Common","description":"","type":"common"}]}