{"ver":"0.1","info":{"id":"wsS3WW","date":"1549159883","viewed":104,"name":"beat tuner","username":"couch","description":".","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["music","beat","visualizer","tempo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 c = texture(iChannel3, uv);\n    \n    // Output to screen\n    fragColor = c;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 vol = fragColor;\n\t\n    //track speed\n    float res = 8.0;\n\t//track vertical position\n    vec3 vpos = vec3(0.68, 0.84, 1.0);\n    \n    //check 3 spots on lower half of the screen for highest value of that color\n\tfloat a0 = max(texture(iChannel3, vec2(0.5, 0.0)).r, max(texture(iChannel3, vec2(0.0, 0.0)).r, texture(iChannel3, vec2(1.0, 0.0)).r));\n    //shift track to the right\n    float pa0 = texture(iChannel3, vec2(uv.x - 1.0/res, vpos.x - 0.1)).r;\n    //and draw updated value at the start of the track\n    if (uv.x < 1.0/res){pa0 = a0;}\n    \n    //repeat for other tracks\n\tfloat a1 = max(texture(iChannel3, vec2(0.5, 0.0)).g, max(texture(iChannel3, vec2(0.0, 0.0)).g, texture(iChannel3, vec2(1.0, 0.0)).g));\n    float pa1 = texture(iChannel3, vec2(uv.x - 1.0/res, vpos.y - 0.1)).g;\n    if (uv.x < 1.0/res){pa1 = a1;}\n\n\tfloat a2 = max(texture(iChannel3, vec2(0.5, 0.0)).b, max(texture(iChannel3, vec2(0.0, 0.0)).b, texture(iChannel3, vec2(1.0, 0.0)).b));\n    float pa2 = texture(iChannel3, vec2(uv.x - 1.0/res, vpos.z - 0.1)).b;\n    if (uv.x < 1.0/res){pa2 = a2;}\n    \n    //get values from audio channel for lower half\n    vol.r = texture(iChannel0, vec2(uv.x/50.0 + 0.0, 0.0)).r;//lo\n    vol.g = texture(iChannel0, vec2(uv.x/50.0 + 0.5, 0.0)).r;//mid\n    vol.b = texture(iChannel0, vec2(uv.x/50.0 + 0.9, 0.0)).r;//hi\n    \n    //get min and max from each track an use that to normalize the final value\n    float min0 = min(texture(iChannel3, vec2(0.5, vpos.x - 0.1)).r, min(texture(iChannel3, vec2(0.2, vpos.x - 0.1)).r, texture(iChannel3, vec2(1.0, vpos.x - 0.1)).r));\n    float max0 = max(texture(iChannel3, vec2(0.5, vpos.x - 0.1)).r, max(texture(iChannel3, vec2(0.2, vpos.x - 0.1)).r, texture(iChannel3, vec2(1.0, vpos.x - 0.1)).r));\n    \n    float min1 = min(texture(iChannel3, vec2(0.5, vpos.y - 0.1)).g, min(texture(iChannel3, vec2(0.2, vpos.y - 0.1)).g, texture(iChannel3, vec2(1.0, vpos.y - 0.1)).g));\n    float max1 = max(texture(iChannel3, vec2(0.5, vpos.y - 0.1)).g, max(texture(iChannel3, vec2(0.2, vpos.y - 0.1)).g, texture(iChannel3, vec2(1.0, vpos.y - 0.1)).g));\n    \n    float min2 = min(texture(iChannel3, vec2(0.5, vpos.z - 0.1)).b, min(texture(iChannel3, vec2(0.2, vpos.z - 0.1)).b, texture(iChannel3, vec2(1.0, vpos.z - 0.1)).b));\n    float max2 = max(texture(iChannel3, vec2(0.5, vpos.z - 0.1)).b, max(texture(iChannel3, vec2(0.2, vpos.z - 0.1)).b, texture(iChannel3, vec2(1.0, vpos.z - 0.1)).b));\n    \n    vec3 nvol = vec3((vol.r-min0)/(max0-min0), (vol.g-min1)/(max1-min1), (vol.b-min2)/(max2-min2));\n    \n    /*\n    //tune these based on song\n    //----------------------------------\n    vec3 bright = vec3(-0.75, -0.3, -0.3);\n    vec3 contrast = vec3(8.0, 4.0, 4.0);\n    //----------------------------------\n    vol.rgb = (vol.rgb+bright)*contrast;\n\t*/\n    \n    fragColor = mix(vol, mix(mix(vec4(pa0, 0.0, 0.0, 1.0), vec4(0.0, pa1, 0.0, 1.0),step(vpos.x, uv.y)), vec4(0.0, 0.0, pa2, 1.0), step(vpos.y, uv.y)), step(0.5, uv.y));\n    if (uv.y > 0.48 && uv.y < 0.52){\n        if (uv.x < 0.33){fragColor = vec4(nvol.r, 0.0, 0.0, 1.0);}else{\n            if (uv.x > 0.33 && uv.x < 0.66){fragColor = vec4(0.0, nvol.g, 0.0, 1.0);}else{\n                if (uv.x > 0.66){fragColor = vec4(0.0, 0.0, nvol.b, 1.0);}else{\n                }}}\n    }\n    \n\n                    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}