{"ver":"0.1","info":{"id":"43fSzs","date":"1709816196","viewed":88,"name":"Pulsating 4 leaf clover","username":"vlk65536","description":"lmbao","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Scale screen to square\n    uv = (uv-0.5)*vec2(iResolution.x/iResolution.y,1.0);\n\n    // Calculate radius from centre of screen to pixel\n    float r = uv.x*uv.x + uv.y*uv.y;\n    float a = atan(uv.y,uv.x);\n    \n    \n    \n    \n    // Intuitively, we shift r so that r=0 is actually at some\n    // radius, achieving a ring effect\n    // The interesting part of the shader:\n    float base = 5.*r-.5*sin(2.0*cos(2.0+4.0*a));\n    \n    \n    // Try these:\n        //float base = 10.*r-.5*sin(2.0*cos(2.0+3.0*a));\n        //float base = 10.*r-.5*sin(2.0*cos(2.0+5.0*a));\n        //float base = 10.*r-.5*sin(2.0*cos(3.0+5.0*a));\n        //float base = 10.*r-.5*sin(5.0*cos(2.0+4.0*a));\n    \n    \n    \n    // Time varying pixel color\n    // Offset channels by different amounts\n    float R = base+.1*cos(t);\n    float G = base+.2*cos(t);\n    float B = base+.3*cos(t);\n    \n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    // Apply gaussian on radius to achieve blur\n    col += vec3(1.0,0.0,0.0)*exp(-R*R*100.);\n    col += vec3(0.0,1.0,0.0)*exp(-G*G*100.);\n    col += vec3(0.0,0.0,1.0)*exp(-B*B*100.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}