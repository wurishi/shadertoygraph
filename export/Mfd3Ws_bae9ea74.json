{"ver":"0.1","info":{"id":"Mfd3Ws","date":"1712287042","viewed":27,"name":"spiral student 3","username":"amusement","description":"yep...again","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // The texture from Buffer B is used as the final image.\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n// Function to create smooth noise for displacement\nfloat noise(vec2 st) {\n    return texture(iChannel2, st * 0.1).r;\n}\n\n// Function to draw a spiral\nvec4 drawSpiral(vec2 uv, float time) {\n    uv = uv * 2.0 - 1.0; // Convert from [0, 1] to [-1, 1]\n    float r = length(uv); // Radius from the center\n    float theta = atan(uv.y, uv.x); // Angle from the center\n\n    // Rotate and scale the UVs for the spiral effect\n    theta += time * 0.5;\n    float spiral = mod(theta - 10.0 * log(r + 0.01), TWO_PI);\n    float line = smoothstep(0.02, 0.03, abs(spiral - PI) - r * 2.0);\n\n    // Use a texture for the spiral pattern\n    vec2 texCoords = vec2(0.5) + uv / 2.0;\n    vec4 textureColor = texture(iChannel0, texCoords);\n\n    return mix(vec4(0.0), textureColor, line);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy; // Normalized pixel coordinates\n    float time = iTime; // Shader playback time (in seconds)\n\n    // Draw the spiral pattern\n    vec4 spiral = drawSpiral(uv, time);\n\n    // Apply noise-based displacement to the UV coordinates\n    vec2 displacedUV = uv + (noise(uv) - 0.5) * 0.02;\n    vec4 displacedFeedback = texture(iChannel1, displacedUV);\n\n    // Composite the spiral and the feedback\n    fragColor = mix(displacedFeedback, spiral, spiral.a);\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n// Function to rotate a 2D coordinate around the origin\nvec2 rotate2D(vec2 uv, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 rotationMatrix = mat2(c, -s, s, c);\n    return rotationMatrix * uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize the fragment coordinate\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Get the texture from Buffer A\n    vec4 bufAColor = texture(iChannel0, uv);\n\n    // Calculate a slow rotation for the feedback effect\n    float angle = iTime * 0.05; // The feedback rotation speed\n    vec2 rotatedUV = rotate2D(uv - 0.5, angle) + 0.5; // Offset uv to rotate around the center\n\n    // Sample the texture from Buffer A with the rotated coordinates\n    vec4 feedbackColor = texture(iChannel0, rotatedUV);\n\n    // Simple blend of the current and previous frame to create a feedback effect\n    fragColor = mix(bufAColor, feedbackColor, 0.5);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}