{"ver":"0.1","info":{"id":"MsVfD3","date":"1530883955","viewed":204,"name":"Height map profile","username":"guins","description":"Elevation/Height map profile tests","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["heightmap","displacementmap","elevationmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n//END ASHIMA /////////////////////////////////////////////////\n\nconst float STEPS = 10.;\nconst float CUTOFF = 0.01; //depth less than this, show white wall\nconst vec2  OFFSET = vec2(0.005,0.005); //drop shadow offset\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat getNoise(vec2 uv, float t){\n    \n    //given a uv coord and time - return a noise val in range 0 - 1\n    //using ashima noise\n    \n    //octave 1\n    float SCALE = 2.0;\n    float noise = snoise( vec3(uv.x*SCALE + t,uv.y*SCALE + t , 0));\n    \n    //octave 2 - more detail\n    SCALE = 4.0;\n    noise += snoise( vec3(uv.x*SCALE + t,uv.y*SCALE , 0))* .2 ;\n    \n    //move noise into 0 - 1 range    \n    noise = (noise/2. + 0.5);\n    \n    //make deeper rarer\n    //noise = pow(noise,2.);\n    \n    return noise;\n    \n}\n\nfloat getDepth(float n){\n \n    //given a 0-1 value return a depth,\n    //e.g. distance into the hole\n    \n    //remap remaining non-cutoff region to 0 - 1\n\tfloat d = (n - CUTOFF) / (1. - CUTOFF); \n        \n    //step it\n    d = floor(d*STEPS)/STEPS;\n    \n    return d;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    float t = iTime * .1;    \n    vec3 col = vec3(0);\n    \n   \tfloat noise = getNoise(uv, t);\n    \n    if (noise < CUTOFF){\n        \n        //white wall\n        col = vec3(1.,0.937,0.808);//white\n        \n    }else{\n    \n\t\tfloat d = getDepth(noise);\n        \n        //calc HSV color\n        float h = d + 0.2; //rainbow hue\n        float s = 0.5;\n        float v = 0.9 - ( d*0.6); //deeper is darker\n        \n       \t//add bevel\n        \n       \t//get depth at offset position        \n        float noiseOff = getNoise(uv + OFFSET, t);\n        float dOff = getDepth(noiseOff);\n       \t\n        //if depth of this pixel (d) is less (closer) than offset pixel (dOff)\n        //then we are in shadow so darken       \n        v -= d - dOff; \n        \n        if (d == dOff)\n        {\n        \tcol = vec3(1.,0.937,0.808);//white\n        }\n        else\n        {\n            //col = hsv2rgb(vec3(0,0,1));\n        }\n           \n\t}\n    \n    //post proc\n\t//vertical gradient grey\n    //col *= 0.7 + (fragCoord.y/iResolution.y *0.3);\n    \n    //add noise texture\n    //col += (texture(iChannel0, uv * iResolution.x / 256. + iTime * 0.0).r - 0.5) * 0.05;\n    \n    fragColor = vec4(col,1.0);   \n}","name":"Image","description":"","type":"image"}]}