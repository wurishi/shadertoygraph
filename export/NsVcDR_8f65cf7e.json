{"ver":"0.1","info":{"id":"NsVcDR","date":"1654704574","viewed":1065,"name":"20220609_fract step velocity","username":"0b5vr","description":"nice\n\ncreating techno style hihat velocity using fract and step\n\nthe name \"fract step velocity\" needs to be reconsidered before release\n","likes":24,"published":1,"flags":8,"usePreview":0,"tags":["2d","audio","techno","rhythms"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (c) 2022 0b5vr, MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// constants\nconst vec3 BACKGROUND_COLOR = vec3( 0.12, 0.13, 0.15 );\nconst vec3 TICK_COLOR = vec3( 1.0, 0.1, 0.4 );\nconst vec3 OUTLINE_COLOR = vec3( 0.0, 0.0, 0.0 );\n\n// sdf\nfloat sdcapsule( vec2 p, vec2 tail ) {\n    float h = clamp( dot( p, tail ) / dot( tail, tail ), 0.0, 1.0 );\n    return length( p - ( tail * h ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = ( uv * 2.0 - 1.0 ) * vec2( iResolution.x / iResolution.y, 1.0 );\n    \n    fragColor = vec4( BACKGROUND_COLOR, 1.0 );\n    \n    vec2 pt = p;\n\n    // bottom line\n    {\n        fragColor.rgb = mix(\n            fragColor.rgb,\n            vec3( 1.0 ),\n            0.2 * smoothstep( 4.0 / iResolution.y, 0.0, abs( p.y + 0.45 ) )\n        );\n    }\n\n    // top line\n    {\n        fragColor.rgb = mix(\n            fragColor.rgb,\n            vec3( 1.0 ),\n            0.2 * smoothstep( 4.0 / iResolution.y, 0.0, abs( pt.y - 0.55 ) )\n        );\n    }\n\n    // graph plot\n    {\n        pt = p - vec2( -0.9375, -0.45 + FRACT_STEP_VELOCITY_B );\n        float angle = atan( FRACT_STEP_VELOCITY_A, 0.125 );\n        pt = rotate2D( -angle ) * pt;\n        float interval = 0.125 / FRACT_STEP_VELOCITY_A * sin( angle );\n        pt.y = mod( pt.y - 0.5 * interval, interval ) - 0.5 * interval;\n        fragColor.rgb = mix(\n            fragColor.rgb,\n            vec3( 0.1, 0.4, 0.8 ),\n            0.3 * smoothstep( 4.0 / iResolution.y, 0.0, abs( pt.y ) )\n        );\n    }\n\n    {\n        pt = p - vec2( -1.0, 0.0 );\n        float st = floor( pt.x * 8.0 );\n        \n        if ( 0.0 <= st && st < 16.0 ) {\n            pt.x -= ( st + 0.5 ) / 8.0;\n            \n            // hihat\n            {\n                float vel = fract( FRACT_STEP_VELOCITY_A * st + FRACT_STEP_VELOCITY_B ); // fract step velocity here\n\n                // graph plot\n                float dplot = length( pt - vec2( 0.0, -0.45 + vel ) );\n                dplot = abs( dplot - 0.03 );\n                fragColor.rgb = mix(\n                    fragColor.rgb,\n                    vec3( 0.1, 0.4, 0.8 ),\n                    0.3 * smoothstep( 4.0 / iResolution.y, 0.0, dplot )\n                );\n\n                float t = mod( iTime - st / 4.0 * BEAT2TIME, 4.0 * BEAT2TIME );\n\n                float radius = 0.01 + 0.02 * exp( -5.0 * t );\n                float d = sdcapsule( pt - vec2( 0.0, -0.45 ), vec2( 0.0, vel ) ) - radius;\n\n                float outline = smoothstep( 4.0 / iResolution.y, 0.0, d - 0.01 );\n                float shape = smoothstep( 4.0 / iResolution.y, 0.0, d );\n                vec3 color = mix( vec3( 0.5, 0.6, 0.8 ), vec3( 1.0 ), exp( -5.0 * t ) );\n                fragColor.rgb = mix(\n                    fragColor.rgb,\n                    mix( OUTLINE_COLOR, color, shape ),\n                    outline\n                );\n            }\n            \n            // kick\n            if ( mod( st, 4.0 ) == 0.0 ) {\n                float t = mod( iTime - st / 4.0 * BEAT2TIME, 4.0 * BEAT2TIME );\n\n                float radius = 0.02 + 0.02 * exp( -5.0 * t );\n                float d = length( pt - vec2( 0.0, -0.55 ) ) - radius;\n                \n                float outline = smoothstep( 4.0 / iResolution.y, 0.0, d - 0.01 );\n                float shape = smoothstep( 4.0 / iResolution.y, 0.0, d );\n                vec3 color = mix( vec3( 0.9, 0.4, 0.4 ), vec3( 1.0 ), exp( -5.0 * t ) );\n                fragColor.rgb = mix(\n                    fragColor.rgb,\n                    mix( OUTLINE_COLOR, color, shape ),\n                    outline\n                );\n            }\n        }\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define saturate(i) clamp(i,0.,1.)\n#define clip(i) clamp(i,-1.,1.)\n#define lofi(i,j) (floor((i)/(j))*(j))\n#define tri(p) (1.-4.*abs(fract(p)-0.5))\n\n// constants that you might want to tweak\nconst float BPM = 140.0;\n\n// fract( a * step + b )\nconst float FRACT_STEP_VELOCITY_A = 0.62;\nconst float FRACT_STEP_VELOCITY_B = 0.67;\n\n// other great patterns:\n//     a = 0.63, b = 0.00: .-.x -.x- .-.x -.x-\n//     a = 0.66, b = 0.08: .x-. x-.x -.x- .x-*\n//     a = 0.42, b = 0.10: .-x. -.-. -x.- .-x-\n//     a = 0.60, b = 0.68: -.x- .-.x -.-. x-.-\n//     a = 0.62, b = 0.67: -.x- .x-. -.x- .x-*\n\n// constants\nconst float PI = acos( -1.0 );\nconst float TAU = PI * 2.0;\nconst float SQRT2 = sqrt( 2.0 );\n\nconst float BPS = BPM / 60.0;\nconst float TIME2BEAT = BPS;\nconst float BEAT2TIME = 1.0 / BPS;\n\n// common\nmat2 rotate2D( float t ) {\n    float c = cos( t );\n    float s = sin( t );\n    return mat2( c, s, -s, c );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec2 kick( float t ) {\n    float phase = 45.0 * t - 6.0 * exp( -40.0 * t ) - 3.0 * exp( -400.0 * t );\n    float decay = exp( -3.0 * t );\n    return vec2( decay * sin( TAU * phase ) );\n}\n\nvec2 hihat( float t, float d ) {\n    float decay = exp( -d * t );\n    vec2 sig = 1.0 - 2.0 * texture( iChannel0, vec2( vec2( 140.0, 136.0 ) * t ) ).xy;\n    sig -= 1.0 - 2.0 * texture( iChannel0, vec2( vec2( 140.0, 136.0 ) * t + 0.007 ) ).xy; // pseudo high pass. shoutouts to aaaidan\n    return sig * decay;\n}\n\nvec2 mainSound( int samp, float time ) {\n    float beat = time * TIME2BEAT;\n    \n    vec2 dest = vec2( 0.0 );\n    \n    float tKick = mod( beat, 1.0 ) * BEAT2TIME;\n    dest += 0.5 * kick( tKick );\n    \n    float tHihat = mod( beat, 0.25 ) * BEAT2TIME;\n    float stepHihat = mod( floor( beat * 4.0 ), 16.0 );\n    float velHihat = fract( FRACT_STEP_VELOCITY_A * stepHihat + FRACT_STEP_VELOCITY_B ); // fract step velocity here\n    float decayHihat = pow( 2.0, 8.0 - 3.0 * velHihat );\n    float ampHihat = mix( 0.7, 1.0, velHihat );\n    dest += 0.2 * ampHihat * hihat( tHihat, decayHihat  );\n\n    return clip( dest );\n}\n","name":"Sound","description":"","type":"sound"}]}