{"ver":"0.1","info":{"id":"ws3yDs","date":"1601975830","viewed":248,"name":"traveling through wibbly-wobbly","username":"Jinkweiq","description":"I Tried to recreate a cool image (see line 1) and ended up with this.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["cube","projection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A failed attempt to re-create https://www.reddit.com/r/generative/comments/iv9sue/tangled_cube/\n\n#define time iTime*.1+1.3\n\n// from iq - https://www.shadertoy.com/view/XdXBRH\nvec2 hash(in vec2 x)// replace this by something better\n{\n    const vec2 k=vec2(.3183099,.3678794);\n    x=x*k+k.yx;\n    return-1.+2.*fract(16.*k*fract(x.x*x.y*(x.x+x.y)));\n}\n\n// from iq - https://www.shadertoy.com/view/XdXBRH\nvec3 noised(in vec2 p)\n{\n    vec2 i=floor(p);\n    vec2 f=fract(p);\n    \n    vec2 u=f*f*f*(f*(f*6.-15.)+10.);\n    vec2 du=30.*f*f*(f*(f-2.)+1.);\n    \n    vec2 ga=hash(i+vec2(0.,0.));\n    vec2 gb=hash(i+vec2(1.,0.));\n    vec2 gc=hash(i+vec2(0.,1.));\n    vec2 gd=hash(i+vec2(1.,1.));\n    \n    float va=dot(ga,f-vec2(0.,0.));\n    float vb=dot(gb,f-vec2(1.,0.));\n    float vc=dot(gc,f-vec2(0.,1.));\n    float vd=dot(gd,f-vec2(1.,1.));\n    \n    return vec3(va+u.x*(vb-va)+u.y*(vc-va)+u.x*u.y*(va-vb-vc+vd),// value\n    ga+u.x*(gb-ga)+u.y*(gc-ga)+u.x*u.y*(ga-gb-gc+gd)+// derivatives\n    du*(u.yx*(va-vb-vc+vd)+vec2(vb,vc)-va));\n}\n// from iq - https://www.shadertoy.com/view/ll2GD3\nvec3 pal(in float t)\n{\n    vec3 a=vec3(.5,.5,.5),\n    b=vec3(.5,.5,.5),\n    c=vec3(1.,1.,1.),\n    d=vec3(0.,.33,.67);\n    return a+b*cos(6.28318*(c*t+d));\n}\n// from iq - https://www.shadertoy.com/view/3tdSDj\nfloat sdSegment(in vec2 p,in vec2 a,in vec2 b)\n{\n    vec2 pa=p-a,ba=b-a;\n    float h=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*h);\n}\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\nvec2 cube(vec3 scale,vec3 cam,vec3 rot,vec2 uv){\n    vec2 c=vec2(0);\n    for(float x=0.;x<=1.;x++){\n        for(float y=0.;y<=1.;y++){\n            for(float z=0.;z<=1.;z++){\n                vec3 p3d=vec3(x,y,z);\n                p3d-=.5;\n                p3d*=scale;\n                p3d.xy*=rotate2d(rot.z);\n                p3d.yz*=rotate2d(rot.y);\n                p3d.xz*=rotate2d(rot.x);\n                p3d+=cam;\n                \n                p3d.xy/=p3d.z;\n                // lines\n                float ss = .007;\n\t\t\t\tc.x += (1.0 - smoothstep(0., 1., sdSegment(uv,p3d.xy,normalize(noised(uv+time).yz)) / ss))\n       \t\t\t\t* (-sdSegment(uv,p3d.xy,normalize(noised(uv+time).yz))+.2)*2.;\n                // dots\n                c.y += (smoothstep(1., 0.5, length(uv-p3d.xy) / 1.2 / ss));\n                \n            }\n        }\n    }\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv=vec2(fragCoord.x/iResolution.x,fragCoord.y/iResolution.y);\n    uv-=.5;\n    uv/=vec2(iResolution.y/iResolution.x,1);\n    uv*=2.;\n    \n    vec3 cam=vec3(0,0,2);\n    vec3 rot=vec3(time,time*4.5,time*11.);\n    \n    vec2 c=vec2(0);\n    vec3 scale=vec3(1,.1,1);\n    \n    for(int i=0;i<=2;i++){\n        scale=vec3(1);\n        for(float s=.1;s<=1.;s+=.2){\n            scale[i]=s;\n            c+=cube(scale,cam,rot,uv);\n        }\n    }\n    vec3 col=vec3(0);\n    if(abs(uv.x)<1.){\n        col=mix(vec3(1),vec3(0.984,0.933,0.796),clamp(length(uv*.5),0.,1.));\n        col=mix(col,pal(c.x/6.),clamp(c.x,0.,1.));\n        col=mix(col,vec3(0.),clamp(c.y,0.,1.));\n    }\n    fragColor=vec4(col,1.);\n}\n","name":"Image","description":"","type":"image"}]}