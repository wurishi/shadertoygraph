{"ver":"0.1","info":{"id":"cdXXWf","date":"1669627841","viewed":58,"name":"linear data visualizer","username":"JuanDeager","description":"visualizes some linear data using linear interpolation between shrimples I mean samples\n\na demo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// pretend this is an SSBO with a lot of data\nconst int DATA_SIZE = 5;\nfloat data[DATA_SIZE] = float[DATA_SIZE](.5, .6, .03, .8, 1.0);\n\nfloat SampleData(float u)\n{\n    // Determine left and right samples\n    int ul = int(floor(u * float(DATA_SIZE)));\n    int ur = ul + 1;\n    \n    // Some sort of wrapping behavior so everything doesn't blow up at the edges\n    ul %= DATA_SIZE;\n    ur %= DATA_SIZE;\n    \n    // Determine where this pixel is between the two samples\n    float weight = fract(u * float(DATA_SIZE));\n    \n    // Linearly blend the samples\n    return mix(data[ul], data[ur], smoothstep(0., 1., weight));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    data[2] = sin(iTime) * .5 + .5;\n    float height = SampleData(uv.x);\n    \n    vec3 col = vec3(0);\n    \n    // Any pixel under the line is magentified\n    if (uv.y < height)\n    {\n        col = vec3(1., 0., 1.) * uv.y / height;\n    }\n    \n    // Any pixel close to the line is white\n    if (abs(uv.y - height) < .003)\n    {\n        col = vec3(1.);\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}