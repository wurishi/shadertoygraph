{"ver":"0.1","info":{"id":"tdVGDy","date":"1570899432","viewed":217,"name":"Ray marching in the Kaliset","username":"janiorca","description":"First ray marching shader. The kaliset provides something fast and easy to compute ray collisions against. \n\nI was trying to keep this reasonably performant on my laptop so I kepth escape count very low. ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","kaliset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define steps 850.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 pos = vec3( fragCoord/iResolution.x - vec2( 0.5, 0.5 ), 0.0 );\n\n    vec3 origin = vec3( 0.0, 0.0, 1.0 );\n    vec3 ray_dir = pos - origin ;\n    vec3 c = vec3( -1.05241, -.8134335, -.95455);\n\n    vec3 col;\n    float pitch = iTime / 5.0;\n    float cos_a = cos(pitch);\n    float sin_a = sin(pitch);\n    float yaw = 0.6+sin(iTime/2.0)/3.0;\n    float sin_b = sin( yaw );\n    float cos_b = cos( yaw );\n    mat3 rot_m = mat3( cos_a, 0.0, -sin_a,\n                    sin_a*-sin_b, cos_b, cos_a*-sin_b,\n                    sin_a*cos_b, sin_b, cos_a*cos_b );                        \n\n    origin = rot_m*vec3( 0,0,1.0  + sin(iTime*0.9 ) * .55 ) ;\n    origin.y = .9;\n    ray_dir = rot_m*ray_dir;\n\n    for( float depth = 60.0; depth < steps; depth ++ ) {\n        pos = origin +  depth * ray_dir * 0.003;\n        ray_dir = ray_dir * 1.003;\n        vec3 prev  = vec3( 1,1,1), prev_prev;\n        for( int idx=0; idx< 7;idx++ ) \n        {\n            prev_prev = prev;\n            prev = pos;\n            pos = abs(pos);\n            pos =  pos / dot( pos, pos ) + c;\n            if( dot( pos,pos  )  > 6.89 ) \n            {\n                if( idx  >3  ) \n                {\n                    col = normalize( prev - prev_prev ) / 2.0 + vec3( 0.5, 0.5, 0.5 );\n                } else  \n                {\n\n                  col = normalize( -prev-prev_prev ) / 2.0 + vec3( 0.5, 0.5, 0.5 );\n                } \n                depth = 100000.0;\n                break;\n            }\n        }\n    }    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}