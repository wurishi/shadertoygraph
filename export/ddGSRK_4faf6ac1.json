{"ver":"0.1","info":{"id":"ddGSRK","date":"1681295184","viewed":48,"name":"Ray marching landscape","username":"fpotier","description":"Assignement 2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["landscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define SURFACE_DIST .01\n#define MAX_DIST 100.\n\nfloat getDistance(vec3 point)\n{\n    vec4 sphere = vec4(0, 1, 6, 1);\n    float sphereDistance = length(point - sphere.xyz) - sphere.w;\n    float planeDistance = point.y;\n    float distance = min(sphereDistance, planeDistance);\n    \n    return distance;\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDirection)\n{\n    float distanceOrigin = 0.;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 point = rayOrigin + distanceOrigin * rayDirection;\n        float distanceScene = getDistance(point);\n        distanceOrigin += distanceScene;\n        if (distanceScene < SURFACE_DIST || distanceOrigin > MAX_DIST)\n            break;\n    }\n    \n    return distanceOrigin;\n}\n\nvec3 getNormal(vec3 point)\n{\n    float distance = getDistance(point);\n    vec2 e = vec2(.01, 0);\n    vec3 normal = distance \n                    - vec3(getDistance(point - e.xyy),\n                           getDistance(point - e.yxy),\n                           getDistance(point - e.yyx));\n    \n    return normalize(normal);\n}\n\nfloat getLight(vec3 point)\n{\n    vec3 lightPosition = vec3(0, 5, 6);\n    lightPosition.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 lightVector = normalize(lightPosition - point);\n    vec3 normalVector = getNormal(point);\n    \n    \n    float diffuseLighting = clamp(dot(normalVector, lightVector), 0., 1.);\n    float distance = rayMarch(point + normalVector * SURFACE_DIST * 2., lightVector);\n    if (distance < length(lightPosition - point))\n        diffuseLighting *= .1;\n    \n    return diffuseLighting;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 cameraPosition = vec3(0, 1, 0);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    float distance = rayMarch(cameraPosition, rayDirection);\n    vec3 point = cameraPosition + rayDirection * distance;\n    float diffuseLighting = getLight(point);\n    \n    col = vec3(diffuseLighting);\n    \n    fragColor=vec4(col, 0);\n}","name":"Image","description":"","type":"image"}]}