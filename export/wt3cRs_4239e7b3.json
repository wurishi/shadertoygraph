{"ver":"0.1","info":{"id":"wt3cRs","date":"1609703165","viewed":60,"name":"QuantitizeThemAll vol. 0","username":"Dubko","description":"https://romop5.github.io//QuantitizeThemAll/index.html?data=eyJwcm9ncmFtIjoibW9kKHQqc2luKHNpbihzaW4oY29zKHQreSp5Km1vZChtb2QoeSwxMi40OSkseSkqc2luKHgpKmNvcyh4KSttb2QoeCwwLjQ5KSkpKSkseSp0KSp5IiwidHJhbnNmb3JtYXRpb25UeXBlIjoiY2lyY2xlIiwic3RhcnRDb2xvciI6IiMwMDA","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["proceduralart","functionquantizing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\n * Generated while using QuantitizeThemAll\n * Try it on yourself: https://romop5.github.io/QuantitizeThemAll/\n */\n   vec2 linear(vec2 uv)\n   {\n        return uv; \n   }\n\n   vec2 circle(vec2 uv)\n   {\n        vec2 nuv = normalize(uv);\n        float dist = 1.0/length(uv);\n        return nuv*dist;\n   }\n   vec2 polar(vec2 uv)\n   {\n        return vec2(atan(uv.x,uv.y),sqrt(uv.x*uv.x+ uv.y*uv.y));  \n   }\n   vec2 spherical(vec2 uv)\n   {\n        vec2 direction = uv;\n        float len = length(uv);\n        return vec2(exp(len))*direction;\n   }\n   vec2 fisheye(vec2 uv)\n   {\n        float f = 1.0000;\n        // Calculate angle from plane's UV\n        vec2 angles = atan(uv, vec2(1.0));\n        //return angles*f;\n        return vec2(2.0)*sin(angles*vec2(0.5))*vec2(f);\n   }\n\n   float inv(float x)\n   {\n    return 1.0/x;\n   }\n\n\n\n   void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n       vec2 uv = fragCoord/iResolution.xy;\n       uv *= 2.0;\n       uv += -1.0;\n       float t = iTime*1.0000;\n       vec2 resultingUv = circle(vec2(uv.x, uv.y)*vec2(1.0000));\n       float x = resultingUv.x;\n       float y = resultingUv.y;\n       float program = mod(t*sin(sin(sin(cos(t+y*y*mod(mod(y,12.49),y)*sin(x)*cos(x)+mod(x,0.49))))),y*t)*y;\n       float parameter = clamp(program, 0.0,1.0);\n\n       vec3 colorStart = vec3(0,0,0)/255.0;\n       vec3 colorEnd = vec3(255,255,255)/255.0;\n       vec3 resultColor = mix(colorStart, colorEnd, parameter);\n\n       bool hasColorThreshold = true;\n       if(hasColorThreshold)\n       {\n          resultColor = (parameter > 0.5000)?colorStart:colorEnd;  \n       }\n       fragColor = vec4(resultColor, 1.0);\n   }\n   ","name":"Image","description":"","type":"image"}]}