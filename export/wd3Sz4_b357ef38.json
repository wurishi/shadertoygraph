{"ver":"0.1","info":{"id":"wd3Sz4","date":"1571597538","viewed":142,"name":"EdgeDetector","username":"oclyke","description":"Sobel edge detector. I'm learning GLSL so if there are efficiency improvements I could make please let me know!","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["sobel","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float get_greyscale(in sampler2D myTexture, ivec2 P){   \n    // fetch values \n\tfloat red   = texelFetch( iChannel0, P, 0 ).x;\n    float green = texelFetch( iChannel0, P, 0 ).y;\n    float blue  = texelFetch( iChannel0, P, 0 ).z;\n    \n    // orthogonal combination\n    float greyscale = sqrt(pow(red,2.0) + pow(green,2.0) + pow(blue,2.0));\n    \n    return greyscale;\n}\n\nmat3 get_greyscale_3x3(in sampler2D myTexture, ivec2 dims, ivec2 P){\n\tmat3 retval = mat3(0.0);\n    ivec2 p_sample = P;\n    \n    p_sample.x = P.x - 1; p_sample.y = P.y - 1; retval[0][0] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x - 0; p_sample.y = P.y - 1; retval[1][0] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x + 1; p_sample.y = P.y - 1; retval[2][0] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x - 1; p_sample.y = P.y - 0; retval[0][1] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x - 0; p_sample.y = P.y - 0; retval[1][1] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x + 1; p_sample.y = P.y - 0; retval[2][1] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x - 1; p_sample.y = P.y + 1; retval[0][2] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x - 0; p_sample.y = P.y + 1; retval[1][2] = get_greyscale(iChannel0, p_sample);\n    p_sample.x = P.x + 1; p_sample.y = P.y + 1; retval[2][2] = get_greyscale(iChannel0, p_sample);\n    \n    return retval;\n}\n\nfloat apply_kernel_3x3(mat3 m_sample, mat3 kernel){\n\tfloat sum = 0.0;\n    \n    sum += m_sample[0][0] * kernel[0][0];\n    sum += m_sample[1][0] * kernel[1][0];\n    sum += m_sample[2][0] * kernel[2][0];\n    sum += m_sample[0][1] * kernel[0][1];\n    sum += m_sample[1][1] * kernel[1][1];\n    sum += m_sample[2][1] * kernel[2][1];\n    sum += m_sample[0][2] * kernel[0][2];\n    sum += m_sample[1][2] * kernel[1][2];\n    sum += m_sample[2][2] * kernel[2][2];\n     \n    return sum;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // enter your video texture dimensions here (defaults to webcam but you could provide another texture)\n    ivec2 dims = ivec2(1280, 720);\n    ivec2 P = ivec2(int(uv.x*float(dims.x)),int(uv.y*float(dims.y)));\n    \n    // samplefrom the iChannel0 texture\n    mat3 greyscale_3x3 = get_greyscale_3x3(iChannel0, dims, P);\n    \n    // sobel matrices\n    mat3 sob_x = mat3(-1.0, 0.0, 1.0,\n                  \t  -2.0, 0.0, 2.0,\n                      -1.0, 0.0, 1.0);\n    \n    mat3 sob_y = mat3(-1.0, -2.0, -1.0,\n                  \t   0.0,  0.0,  0.0,\n                       1.0,  2.0,  1.0);\n    \n    // apply kernel in x and y\n    float res_x = apply_kernel_3x3(greyscale_3x3, sob_x);\n    float res_y = apply_kernel_3x3(greyscale_3x3, sob_y);\n    \n    // scale + combine the results\n    float res = sqrt(pow(res_x,2.0) + pow(res_y,2.0));\n    res /= 3.0;\n\n    // Output to screen\n    vec3 col = vec3(res, res, res);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}