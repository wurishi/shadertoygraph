{"ver":"0.1","info":{"id":"WdGfzz","date":"1606377147","viewed":191,"name":"Loading Cubes","username":"Jinkweiq","description":"a (terribly programmed) re-creaction of something I saw on r/LoadingIcons. Please ignore all the hard coding.\n","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// recreation of https://www.reddit.com/r/LoadingIcons/comments/ib3ero/cubes/\n// a couple things to note: for the rotation, the camera rotates instead of the cube so I can just \n// map the point I hit on the onto the origianl uv for raymarching a second time without having to \n// reverse any of the rotation. Also, if you look at the bottom left corner of the top cube, you can \n// see the cube slightly change at the  loop point. This is beacuse the map of hit point to the uv for \n// raymarching the second time is done by hand by with hardcoded variable -- I dont feel like figuring\n// out what they actal mathamattically correct values are.\n#define pi acos(-1.)\n\nmat2 rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox(vec3 p,vec3 s){\n    p=abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);\n}\nfloat a(float o,float t){\n    if(t>o*pi){\n        if(t<(o+1.)*pi)\n        return cos(t-o*pi)*.5+.5;\n        return 0.;\n    }\n    return 1.;\n}\nfloat ar(float o,float t){\n    if(t>o*pi){\n        if(t<(o+1.)*pi)\n        return-cos(t-o*pi+pi)*.25+.25;\n        return.0;\n    }\n    return.5;\n}\n\nfloat map(vec3 p,float t){\n    float d;\n    p=abs(p);\n    p.y-=a(0.,t);\n    p.x-=a(1.,t);\n    p.z-=a(2.,t);\n    p-=1.;\n    \n    return sdBox(p,vec3(1));\n}\nfloat march(vec3 ro,vec3 rd,float t){\n    float r;\n    for(int i=0;i<100;i++){\n        vec3 p=ro+rd*r;\n        float dS=map(p,t);\n        r+=dS;\n        if(r>100.||abs(dS)<.001)break;\n    }\n    \n    return r;\n}\n\nvec3 normal(vec3 p,float t){\n    float d=map(p,t);\n    vec2 e=vec2(.001,0);\n    \n    vec3 n=d-vec3(\n        map(p-e.xyy,t),\n        map(p-e.yxy,t),\n        map(p-e.yyx,t)\n    );\n    \n    return normalize(n);\n}\nvoid camera(inout vec3 ro,inout vec3 rd){\n    ro.yz*=rot(.197*pi);\n    rd.yz*=rot(.197*pi);\n    ro.xz*=rot(.25*pi);\n    rd.xz*=rot(.25*pi);\n}\nvec3 getCol(vec3 n) {\n    vec3 col=vec3(.717,.854,.972)*(n.y<-.1?1.:0.);\n    col+=vec3(.843,.949,.874)*(n.x<-.1?1.:0.);\n    col+=vec3(.933,.631,.776)*(n.z>.1?1.:0.);\n    \n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t=mod(iTime*4.,6.*pi);\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    uv-=.5;\n    uv/=1.5;\n    uv.x/=iResolution.y/iResolution.x;\n    uv/=1.+.5*t/(6.*pi);\n    \n    vec3 ro=vec3(uv*20.,-50.),\n    rd=vec3(0.,0.,1.),\n    col=vec3(1.);\n    camera(ro,rd);\n    \n    ro.xz*=rot(ar(3.,t)*pi);\n    ro.yx*=rot(ar(4.,t)*pi);\n    ro.xz*=rot(ar(5.,t)*pi);\n    rd.xz*=rot(ar(3.,t)*pi);\n    rd.yx*=rot(ar(4.,t)*pi);\n    rd.xz*=rot(ar(5.,t)*pi);\n    \n    float r=march(ro,rd,t);\n    \n    if(r<100.){\n        vec3 p=ro+rd*r;\n        vec3 n=normal(p,t);\n        \n        col=getCol(n);\n        \n        if(n.x>.5||n.y>.5||n.z<-.5){\n            if(n.x>.5){\n                p.zy-=vec2(-2.,2.);\n                uv=vec2(p.z,(p.zy*rot(.147*pi)).y);\n                uv*=2.;\n                uv.x/=1.158;\n                uv.y*=1.11;\n            }\n            if(n.y>.5){\n                uv=p.xz*rot(-.25*pi);\n                uv.y+=2.793;\n                uv.y*=sqrt(2.);\n                uv.x*=2.4;\n                uv+=.04;\n            }\n            if(n.z<-.5){\n                p-=2.;\n                uv=vec2(p.x,(p.xy*rot(-.147*pi)).y);\n                uv*=2.;\n                uv.x/=1.158;\n                uv.y*=1.11;\n            }\n            uv*=.614;\n            col=vec3(1.);\n            ro=vec3(uv.xy,-50.);\n            rd=vec3(0.,0.,1.);\n            camera(ro,rd);\n            r=march(ro,rd,0.);\n            \n            if(r<100.){\n                vec3 p=ro+rd*r;\n                vec3 n=normal(p,0.);\n                \n                n = vec3(-n.x,n.z,n.y);\n                \n                col=getCol(n);\n            }\n        }\n        \n    }\n    \n    fragColor=vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}