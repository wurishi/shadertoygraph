{"ver":"0.1","info":{"id":"mlVyR3","date":"1700508264","viewed":46,"name":"Cellular Automata Abstract Field","username":"26apastor","description":"I'm not sure why this is the result.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["particles","automata","cellular","physics","quantum","mass","continuous"],"hasliked":0,"parentid":"DtVyWw","parentname":"Cellular Automata Field 2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float a = 7.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(pow(texture(iChannel0, uv).z, a)*a*6.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float noise_base = 0.015; \nconst float mouse_radius = 20.0;\nconst float noise_radius = 100.0;\nconst float kernel_radius = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float kernel_size = pow(2.0 * kernel_radius + 1.0, 2.0);\n    float sum = 0.0;\n    float velx = 0.0;\n    float vely = 0.0;\n    for(float x = -kernel_radius; x <= kernel_radius; x++)\n    for(float y = -kernel_radius; y <= kernel_radius; y++) {\n        float invDist = 1.0 / ((x * x + y * y + 2.0) / 1.5);\n        vec2 offset = vec2(x, y) / iResolution.xy;\t\t\n        vec4 cell = texture(iChannel0, mod(uv + offset, 1.0));\n        vec2 values = cell.xy + vec2(x, y);\n        vec2 absvalues = vec2(1.0 - abs(values.x), 1.0 - abs(values.y));\n        sum += absvalues.x * absvalues.y * invDist;\n        velx += (1.0 - values.x) * cell.z;\n        vely += (1.0 - values.y) * cell.z;\n    }\n    velx /= kernel_size; \n    vely /= kernel_size;\n    sum /= 1.4;\n    vec4 color = vec4(velx, vely, sum, 0.0);\n    if (iFrame < 1)\n        color = vec4(noise_base + noise(fragCoord/noise_radius + mod(iDate.w,1.)*100.));\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= mouse_radius/iResolution.x)\n        \tcolor = vec4(noise_base + noise(fragCoord/noise_radius + mod(iDate.w,1.)*100.));\n    }\n    fragColor = color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"}]}