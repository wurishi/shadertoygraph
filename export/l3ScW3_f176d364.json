{"ver":"0.1","info":{"id":"l3ScW3","date":"1727791873","viewed":26,"name":"Blackhole GPT-4o","username":"llama","description":"Shader code written by GPT-4o","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy Black Hole Simulation with Accretion Disk and Gravitational Lensing\n\n// Constants for black hole and disk\nconst float blackHoleRadius = 0.2;\nconst float lensingStrength = 2.5;\nconst float accretionDiskInnerRadius = 0.22;\nconst float accretionDiskOuterRadius = 0.4;\n\n// Function for rotating a vector by an angle\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n// Accretion disk coloring with relativistic Doppler shift\nvec3 getAccretionDiskColor(vec2 uv, float dist, float angle) {\n    float diskStrength = smoothstep(accretionDiskInnerRadius, accretionDiskOuterRadius, dist);\n    diskStrength *= smoothstep(accretionDiskOuterRadius, accretionDiskInnerRadius, dist);\n    \n    // Doppler shift approximation based on angle of the disk\n    float dopplerShift = (1.0 + 0.3 * cos(angle * 10.0)) / (1.0 + 0.3);\n    \n    // Red-blue shift to simulate relativistic effects\n    vec3 baseColor = vec3(1.0, 0.7, 0.3); // Orange-yellow base for the disk\n    vec3 colorShifted = baseColor * vec3(dopplerShift, 1.0, 1.0 / dopplerShift);\n\n    return colorShifted * diskStrength;\n}\n\n// Gravitational lensing distortion based on distance to the black hole\nvec2 lensDistortion(vec2 uv, vec2 blackHoleCenter, float dist) {\n    if (dist > blackHoleRadius) {\n        float distort = pow(blackHoleRadius / dist, lensingStrength);\n        return blackHoleCenter + (uv - blackHoleCenter) * distort;\n    }\n    return uv;\n}\n\n// Starfield function (noise-based stars)\nfloat starField(vec2 uv) {\n    float star = fract(sin(dot(uv * 500.0, vec2(12.9898, 78.233))) * 43758.5453);\n    return star > 0.999 ? 1.0 : 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize UV coordinates to [-1, 1] and correct aspect ratio\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Black hole center\n    vec2 blackHoleCenter = vec2(0.0, 0.0);\n\n    // Distance from black hole center\n    float dist = length(uv - blackHoleCenter);\n\n    // Gravitational lensing effect\n    vec2 distortedUV = lensDistortion(uv, blackHoleCenter, dist);\n\n    // Background space color (dark purple/blue)\n    vec3 spaceColor = vec3(0.05, 0.05, 0.1);\n\n    // Add stars\n    float stars = starField(distortedUV);\n    spaceColor += stars * vec3(1.0, 1.0, 1.0);\n\n    // Inside the event horizon (black)\n    if (dist < blackHoleRadius) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n\n    // Accretion disk\n    float angle = atan(uv.y, uv.x);\n    vec3 diskColor = getAccretionDiskColor(distortedUV, dist, angle);\n\n    // Combine space color and accretion disk\n    vec3 finalColor = mix(spaceColor, diskColor, 1.0 - smoothstep(blackHoleRadius, accretionDiskOuterRadius, dist));\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}