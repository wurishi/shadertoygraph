{"ver":"0.1","info":{"id":"WscBzs","date":"1605739471","viewed":299,"name":"sRGB vs gamma encoding","username":"ttg","description":"sRGB is [b]NOT[/b] the same thing as 2.2 gamma !\n\nIf the top two strips have visually consistent light fall-off, you have a true sRGB display pipeline.\nIf the bottom two strips have this consistency, your display pipeline is using gamma=2.2 encoding.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["gamma","srgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nsRGB is *NOT* the same thing as 2.2 gamma !\n\nTop half of image: sRGB-encoded output\nBottom half of image: gamma-encoded\n\nIf the top two strips have visually consistent light fall-off,\n  you have a true sRGB display pipeline.\n\nIf the bottom two strips have this consistency,\n  your display pipeline is using gamma=2.2 encoding.\n\nIt's hard to say which is more common, and harder to say which is more correct.\nThere's a discussion about that here: https://www.shadertoy.com/view/4tXcWr\n\nIn theory your OS could be correctly managing colors for image files even if\nWebGL (Shadertoy) is being displayed as gamma=2.2 - it's just a\n\"bug in the standards\" that a specific encoding isn't mandated or even\navailable for websites to choose.\n\nMore likely, if you see the gamma=2.2 behavior, your system is just assuming\nthe display is sRGB when it is not.\n\nAt least you can count on some crude approximation of one of these two\nencodings being used - anything else looks so clearly wrong that even browser\nmakers would notice an inconsistency.\n\n*/\n\nvec3 srgb_decode (vec3 e) {\n  return mix(e/12.92,pow((e+.055)/1.055,vec3(2.4)),lessThan(vec3(.04045),e));\n}\n\nvec3 srgb_encode (vec3 v) {\n  return mix(12.92*v,1.055*pow(v,vec3(.41666))-.055,lessThan(vec3(.0031308),v));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = (uv.x-.05)/(.95-.05);\n    \n#define DITHER(p) float(int(dot(floor(fragCoord),vec2(413,229)))%512<int((p)*512.))\n\n#if 1\n    // Center: 20% intensity\n    // Top/bottom: 100% intensity\n    vec3 col = (abs(uv.y-.5)>.25 ? 1.*(uv.x) : .2*(uv.x) ) * vec3(.1,.4,1.);\n#else\n    // Center: 20% intensity continuous values\n    // Top/bottom: 20% intensity two-value dither\n    vec3 col = (abs(uv.y-.5)>.25 ? .2*DITHER(uv.x) : .2*(uv.x) ) * vec3(.1,.4,1.);\n#endif\n    \n    if (uv.x<0.||uv.x>1.) col = vec3(0.);\n\n    // Top half:    sRGB encoding\n    // Bottom half: gamma=2.2 encoding\n    fragColor = vec4(\n      uv.y>.5 ? srgb_encode(col)\n              : pow(col, vec3(1./2.2))\n      ,1.0);\n}","name":"Image","description":"","type":"image"}]}