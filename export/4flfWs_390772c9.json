{"ver":"0.1","info":{"id":"4flfWs","date":"1724512703","viewed":38,"name":"Laser beam","username":"therepo90","description":"Laser beam","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["laserbeam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI=3.141592653589;\nvec3 lineColor=vec3(1.,0.,0.);\n\nfloat dstToLine(vec2 a, vec2 b, vec2 uv, out float t) {\n    vec2 lineDir = b - a;\n    vec2 perpendicular = vec2(-lineDir.y, lineDir.x);\n    perpendicular = normalize(perpendicular);\n    vec2 uvToStart = uv - a;\n    float distanceToLine = abs(dot(uvToStart, perpendicular));\n    \n    // t is (0,1) - the amount how much of line uv gets covered(length, percent point at the line)\n    t = dot(uvToStart, lineDir) / dot(lineDir, lineDir); \n    return distanceToLine;\n}\nfloat line(vec2 a, vec2 b, vec2 uv, float w) { // all -1 to 1\n    float t;\n    float distanceToLine = dstToLine(a,b,uv, t);\n    \n    float edgeEnd = (w / 2.);\n    float dstVal = smoothstep(0.,edgeEnd,distanceToLine);\n    float val = smoothstep(0., .2, t) * (1.-smoothstep(0.8, 1.,t)) * (1.- dstVal);\n    //val+=sin(t)*0.1;\n    return val;\n}\n\n\nvec3 laser(vec2 a, vec2 b, vec2 uv, float w, vec3 inCol) { // all -1 to 1\n    vec3 col;\n    col+=line(a, b, uv, w * 0.2) * vec3(1.); // white at middle\n    col+=line(a, b, uv, w* 0.3) * mix(vec3(1.),inCol, 0.5); // mix white and col\n    col+=line(a, b, uv, w* 0.8) * mix(vec3(1.),inCol, 0.75); // mix white and col\n    col+=line(a, b, uv, w) * inCol; // color at the end\n    return col;\n}\n\nvec3 skewedLaser(vec2 center, vec2 target, vec2 uv, float w, vec3 inCol, float inWyg, float time, float offsetWyg) {\nfloat t;\n dstToLine(center, target, uv, t);\n    vec2 changedUv = uv; \n         float d = length(vec2(uv.x,uv.y)); // dist  \n    float alpha = atan(uv.y, uv.x); //-pi to pi, //angle\n    \n    vec2 pc = vec2(d, alpha); // polar coords holding (dist, angle)\n    \n     float sinVal = (sin(t*7.+time*3.+PI*3.)*0.3+cos(t*22.+time*3.+pc.y*2.)*.7)*0.4;\n     sinVal+=pow(t,14.)*0.6;\n     //sinVal+=cos(pc.y*17.+time*3.)*0.1;\n      //float sinVal = cos(pc.x*17.+time*3.)*.025 ;\n     //float sinVal = 0.;//sin(time*14.)*cos(time*13.)*.025 ;\n     \n    //changedUv+=sinVal;\n    float q = -4.*(t-0.5)*(t-0.5)+1.; // quadrating fn with top at 0.5 and zeros at 0 and 1\n    \n    vec2 lineDir = target - center;\n    vec2 perpendicular = vec2(-lineDir.y, lineDir.x);\n    perpendicular = normalize(perpendicular);\n    float wygVal = inWyg * length(lineDir);\n    //float fancySinTime = (sin(time*8.) * 0.3 + cos(time*9.+0.2)*0.4 + sin(time*6.+3.)*0.2) * 0.9;\n    float fancySinTime = sin(t*2.+time)*0.5 + cos(t*2.+time)*0.5;\n    float moveVal = wygVal* fancySinTime;\n    changedUv+=q*moveVal * perpendicular*sinVal;//+sinVal;\n    changedUv+=q*perpendicular*offsetWyg;\n    //changedUv+=sinVal;\n    vec3 col = vec3(0.);\n    col+=laser(center, target, changedUv, w, inCol);\n    //col=vec3(sinVal*100.); \n    \n    //col=vec3(pc.y);\n    return col;\n}\n\nvec3 clusteredBeam(vec2 center, vec2 target, vec2 uv, float w, vec3 inCol, float offsetWyg, float time) {\n\n    float n = 4.;\n    vec3 col=vec3(0.);\nfor(float i=1.;i<=n;i+=1.){\n    col+=skewedLaser(center, target, uv, w, inCol*i*(1./n),i*0.15, time*4.+i*14., offsetWyg);\n}\nreturn col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*(fragCoord-.5*iResolution.xy)/iResolution.xy; // -1, 1\n    vec2 mouse = 2.0*(iMouse.xy-.5*iResolution.xy)/iResolution.xy;\n    \n    vec2 center = vec2(-0.75,-0.75);\n    vec2 target=mouse;\n    vec3 col = vec3(0.);\n   \n    float time = iTime*1.;\n    float w = 0.2;\n     float n = 3.;\n     float offsetWyg = .1;// * abs(sin(iTime*1.4));\n    for(float i=-n/2.;i<n/2.;i+=1.){\n        \n        col+=clusteredBeam(center, target, uv, w, vec3(0.,0.2,0.8), i*offsetWyg,  iTime+ i *15.);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}