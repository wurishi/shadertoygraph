{"ver":"0.1","info":{"id":"wssyzM","date":"1584469852","viewed":128,"name":"14/2020","username":"rimina","description":"Continum of my daily shader journey. Yesterday's shader: https://www.shadertoy.com/view/tsXyz7","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflection","refraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 60\n#define E 0.001\n#define PIXELR 0.5/iResolution.x\n#define FAR 40.0\n#define gamma vec3(2.2)\n#define BOUNCES 3\n\nconst vec3 LC1 = vec3(0.3, 0.2, 0.2);\nconst vec3 LC2 = vec3(0.2, 0.2, 0.8);\nconst vec3 FOG = vec3(0.4, 0.2, 0.6);\n\nstruct Material{\n    vec3 absorbed;\n    vec3 base;\n    vec3 highlight;\n    \n    bool reflective;\n    bool refractive;\n    float reflectivity;\n    float refractivity;\n    int id;\n};\n\nMaterial getBlockMaterial(in vec2 id){\n    \n    vec3 col = palette(length(id)*0.25,\n                       vec3(0.2, 0.1, 0.25),\n                       vec3(0.5, 0.5, 0.5),\n                       vec3(1., 1., 0.),\n                       vec3(0.25, 0.5, 0.8));\n    \n    Material mat;\n    \n    mat.absorbed = col;\n    mat.base = col;\n    mat.highlight = col * 1.2;\n    \n    mat.reflective = true;\n    mat.refractive = true;\n    \n    mat.reflectivity = 0.002;\n    mat.refractivity = 1.45;\n    \n    mat.id = 0;\n    \n    return mat;\n}\n\nMaterial getSphereMaterial(in vec2 id){\n    \n    vec3 col = palette(length(id)*0.5,\n                       vec3(0.2, 0.1, 0.25),\n                       vec3(0.5, 0.5, 0.5),\n                       vec3(1., 1., 0.),\n                       vec3(0.25, 0.5, 0.8));\n    \n    Material mat;\n    \n    mat.absorbed = col;\n    mat.base = col;\n    mat.highlight = col * 1.2;\n    \n    mat.reflective = true;\n    mat.refractive = false;\n    \n    mat.reflectivity = 0.2;\n    mat.refractivity = 1.45;\n    \n    mat.id = 1;\n    \n    return mat;\n}\n\nMaterial getGroundMaterial(in vec3 p){\n    \n    vec3 col = palette(length(p)*0.1,\n                       vec3(0.2, 0.1, 0.25),\n                       vec3(0.5, 0.5, 0.5),\n                       vec3(1., 1., 0.),\n                       vec3(0.25, 0.5, 0.8));\n    \n    Material mat;\n    mat.absorbed = col;\n    mat.base = col;\n    mat.highlight = col;\n    \n    mat.reflective = false;\n    mat.refractive = false;\n    mat.reflectivity = 0.02;\n    mat.refractivity = 1.45;\n    \n    mat.id = 2;\n    \n    return mat;\n}\n\n\nfloat scene(in vec3 p, out Material mat){\n    float ground = fPlane(p, normalize(vec3(0.0, 1.0, 0.0)), 0.0);\n    vec3 pp = p;\n    \n    pR(pp.xz, iTime*0.1);\n    vec3 dist = vec3(4.0, 2.0, 4.0);\n    float idy = pModPolar(pp.xz, 12.0);\n    vec2 id = pModGrid2(pp.xz, dist.xz);\n    \n    pMirrorOctant(pp.xz, dist.xz*0.5);\n    \n    pR(pp.xz, iTime*0.5);\n    pModPolar(pp.xz, 8.0);\n    \n    float idx = 1.0+sin(id.x);\n    float y = abs(cos(idy));\n\n    float sp = fBox(pp-vec3(0.0, dist.y, 0.0), vec3(1.5, dist.y, 0.5));\n    float spp = fBox(pp-vec3(0.0, dist.y, 0.0), vec3(0.5, dist.y*0.5, 2.0));\n    sp = max(sp, -spp);\n    \n    float sph = fSphere(pp, 2.5);\n    \n    \n    float guard = -fBoxCheap(pp-vec3(0.0, dist.y, 0.0), dist*0.5);\n    guard = abs(guard) + dist.x*0.1;\n    \n   \tif(ground < sp && ground < sph){\n        mat = getGroundMaterial(pp);\n    }\n    else if(sph < sp && sph < ground){\n        mat = getSphereMaterial(id);\n    }\n    else{\n        mat = getBlockMaterial(id);\n   \t}\n    \n    //return min(sp, guard);\n    return min(ground, min(sp, guard));\n}\n\nbool march(in vec3 o, in vec3 d, in float far, in bool inside, out vec3 p, out Material mat, out float t){\n    t = E;\n    float dir = inside ? -1.0 : 1.0;\n    bool hit = false;\n    for(int i = 0; i < STEPS/2; ++i){\n        p = o + d*t;\n        float dist = dir*scene(p, mat);\n        \n        if(abs(dist) < E || t > far){\n            if(abs(dist) < E ){\n            \thit = true;\n            }\n            break;\n        }\n        t += dist;\n    }\n    \n    return hit;\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\nfloat marchP(in vec3 ro, in vec3 rd){\n    float t = E;\n    float step = 0.0;\n    Material mat;\n\n    float omega = 1.0;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(scene(ro, mat));\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*scene(p, mat);\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < PIXELR || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*scene(p, mat));\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= PIXELR){\n\t\tt = candidate_t;\n\t}\n\treturn t;\n}\n\nvec3 normal(in vec3 p){\n    vec3 eps = vec3(E, 0.0, 0.0);\n    Material mat;\n    return normalize(vec3(\n        scene(p+eps.xyy, mat) - scene(p-eps.xyy, mat),\n        scene(p+eps.yxy, mat) - scene(p-eps.yxy, mat),\n        scene(p+eps.yyx, mat) - scene(p-eps.yyx, mat)\n    ));\n}\n\n//referenced from here\n//https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/\nfloat schlick(float f0, float f1, float rr, vec3 n, vec3 d){\n    float r = (f0-f1)/(f0+f1);\n    r *= r;\n    float angle = -dot(n, d);\n    if(f0 > f1){\n        float f = f0/f1;\n        float sinT2 = f*f*(1.0-angle*angle);\n        if(sinT2 > 1.0){\n            return 1.0;\n        }\n        angle = sqrt(1.0-sinT2);\n    }\n    float x = 1.0-angle;\n    r = r+(1.0-r)*pow(x, 5.0);\n    return rr + (1.0-rr)*r;\n}\n\nvec3 fog(in vec3 col, in vec3 p, in vec3 ro, in vec3 rd, in vec3 ld, in vec3 lc){\n    float d = length(p-ro);\n    float sa = max(dot(rd, -ld), 0.0);\n    float fa = 1.0-exp(-d*0.08);\n    vec3 fc = mix(FOG, lc, pow(sa, 8.0));\n    return mix(col, fc, fa);\n}\n\nbool shadow(in vec3 p, in vec3 ld, out Material mat, out vec3 pr){\n    pr = p;\n    float t = 0.0;\n    if(march(p, ld, 20.0, false, pr, mat, t)){\n        return true;\n    }\n    \n    return false;\n}\n\nbool reflection(inout vec3 d, in vec3 n, inout vec3 p, out Material mat){\n    d = reflect(d, n);\n    vec3 pr = p;\n    float t = 0.0;\n    if(march(p+n*E*2.0, d, 40.0, false, pr, mat, t)){\n        p = pr;\n        return true;\n    }\n    return false;\n}\n\nbool refraction(inout vec3 d, in vec3 n, in float index, in bool inside, inout vec3 p, out Material mat){\n    d = refract(d, n, index);\n    vec3 pr = p;\n    float t = 0.0;\n    \n    if(march(p-n*2.0*E, d, 20.0, inside, pr, mat, t)){\n        p = pr;\n        return true;\n    }\n}\n\nbool primary(in vec3 o, in vec3 d, out Material mat, out vec3 p, out vec3 n){\n    p = vec3(0.0);\n    n = vec3(0.0);\n    \n    float t = marchP(o, d);\n    p = o+d*t;\n    float tt = scene(p, mat);\n    if(t <= FAR){\n        n = normal(p);\n        return true;\n    }\n    return false;\n}\n\nvec3 shade(in vec3 rd, in vec3 p, in vec3 n, in vec3 ld, in Material mat){\n    //primary\n    float ff = schlick(1.0, mat.refractivity, mat.reflectivity, n, normalize(rd+ld));\n    vec3 col = mat.highlight*ff + mat.base*(1.0-ff);\n    \n    Material shadowM;\n    vec3 pShadow = p;\n    vec3 nShadow = n;\n    \n    //calculating the reflection and refraction in same loop\n    //the ray should really split in two after every reflection and refraction but\n    //this is just fake way to do bit more bounces on both even though we get only\n    //one path for each secondary ray.\n    \n    //reflection variables\n    vec3 colReflection = vec3(0.0);\n    Material matReflection = mat;\n    vec3 dReflection = rd;\n    vec3 nReflection = n;\n    vec3 pReflection = p;\n    float f = 0.0;\n    bool continueRefl = true;\n    \n    //refraction variables\n    vec3 colRefraction = vec3(0.0);\n    Material matRefraction1 = mat;\n    Material matRefraction2 = mat;\n    vec3 dRefraction = rd;\n    vec3 nRefraction = n;\n    vec3 pRefraction1 = p;\n    vec3 pRefraction2 = p;\n    float refractivity = 1.0;\n    float f1 = schlick(refractivity, mat.refractivity, mat.reflectivity, n, rd);\n    float f2 = 0.0;\n    bool continueRefr = true;\n    \n    //and here we go..\n    for(int i = 0; i < BOUNCES; ++i){\n        //reflection\n        if(matReflection.reflective && continueRefl){\n            if(reflection(dReflection, nReflection, pReflection, matReflection)){\n                nReflection = normal(pReflection);\n                f = schlick(1.0, matReflection.refractivity, matReflection.reflectivity,\n                            nReflection, dReflection);\n                colReflection += (matReflection.highlight*f + matReflection.base*(1.0-f));\n            }\n                \n        }\n        else{\n            continueRefl = false;\n        }\n        //refraction\n        if(matRefraction1.refractive && continueRefr){\n            //ray entering the object\n            if(refraction(dRefraction, nRefraction,\n                          refractivity/matRefraction1.refractivity, true, pRefraction1, matRefraction2)){\n                nRefraction = normal(pRefraction1);\n                colRefraction += (matRefraction2.highlight*f1 + matRefraction2.base*(1.0-f1));\n                \n                pRefraction2 = pRefraction1;\n\n                f2 = schlick(matRefraction1.refractivity, refractivity, matRefraction1.reflectivity, -nRefraction, dRefraction);\n            }\n            //ray exiting the object\n            if(refraction(dRefraction, -nRefraction, matRefraction1.refractivity, false, pRefraction2, matRefraction2)){\n                nRefraction = normal(pRefraction2);\n                float dist = distance(pRefraction1, pRefraction2);\n                vec3 absorbed = exp(-matRefraction1.absorbed * dist);\n                colRefraction += (matRefraction2.highlight*f2+matRefraction2.base*(1.0-f2));\n                colRefraction *= absorbed;\n\n                refractivity = matRefraction2.refractivity;\n                pRefraction1 = pRefraction2;\n                matRefraction1 = matRefraction2;\n                f1 = schlick(refractivity, matRefraction2.refractivity, matRefraction2.reflectivity, nRefraction, dRefraction);\n            }\n        }\n        else{\n            continueRefr = false;\n        }\n        \n        if(!continueRefl && !continueRefr){\n            break;\n        }\n    }\n    colReflection /= float(BOUNCES);\n    col += colReflection;\n    \n    colRefraction /= float(BOUNCES);\n    col += colRefraction;\n    \n    return col;\n}\n\nmat3 camera(in vec3 o, in vec3 t, in vec3 up){\n    \n    vec3 z = normalize(t-o);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    \n    return mat3(x, y, z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = uv*2.0-1.0;//scaling from -1 to 1\n    q.x *= (iResolution.x/iResolution.y);\n    \n    vec3 ro = vec3(0.0, 1.2*sin(iTime*0.1)+6.0, iTime*0.75-10.0);\n    vec3 rt = vec3(8.0-10.0*smoothstep(0.0, 500.0, iTime), -3.0, ro.z+10.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    mat3 cam = camera(ro, rt, up);\n    vec3 rd = normalize(cam*vec3(q, radians(60.0)));\n    \n    vec3 col = vec3(0.0);\n    \n    vec3 ld1 = normalize(ro-rt);\n    \n    vec3 lp = vec3(20.0*sin(iTime*0.25)+ro.x, -10.0, 10.0*cos(iTime*0.25)+ro.z);\n    vec3 lt = ro;\n    vec3 ld2 = normalize(lt-lp);\n    \n    \n    Material mat;\n    vec3 p = vec3(0.0);\n    vec3 n = vec3(0.0);\n    float t = 0.0;\n    \n    if(primary(ro, rd, mat, p, n)){\n        col += shade(rd, p, n, ld1, mat);\n    }\n    \n    col = fog(col, p, ro, rd, ld1, LC1);\n    col = fog(col, p, ro, rd, ld2, LC2);\n    \n    col *= smoothstep(0.8, 0.1*0.799, distance(uv, vec2(0.5))*(0.6 + 0.1));\n    col = smoothstep(-0.05, 1.2, col);\n    \n    col = pow(col, 1.0/gamma);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Functions from different sources (not written by me)\n\n//------------------------------------------------\n//From HG sdf library: http://mercury.sexy/hg_sdf/\n#define PI 3.14159265\n#define TAU (2*PI)\n#define PHI (sqrt(5)*0.5 + 0.5)\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x<0.0)?-1.0:1.0;\n}\n\nvec2 sgn(vec2 v) {\n\treturn vec2((v.x<0.0)?-1.0:1.0, (v.y<0.0)?-1.0:1.0);\n}\n\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax(abs(p) - b);\n}\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n////////////////////////////////////////////////////////////////\n//\n//                DOMAIN MANIPULATION OPERATORS\n//\n////////////////////////////////////////////////////////////////\n//\n// Conventions:\n//\n// Everything that modifies the domain is named pSomething.\n//\n// Many operate only on a subset of the three dimensions. For those,\n// you must choose the dimensions that you want manipulated\n// by supplying e.g. <p.x> or <p.zx>\n//\n// <inout p> is always the first argument and modified in place.\n//\n// Many of the operators partition space into cells. An identifier\n// or cell index is returned, if possible. This return value is\n// intended to be optionally used e.g. as a random seed to change\n// parameters of the distance functions inside the cells.\n//\n// Unless stated otherwise, for cell index 0, <p> is unchanged and cells\n// are centered on the origin so objects don't have to be moved to fit.\n//\n//\n////////////////////////////////////////////////////////////////\n\n\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Same, but mirror every second cell so they match at the boundaries\nfloat pModMirror1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize,size) - halfsize;\n\tp *= mod(c, 2.0)*2.0 - 1.0;\n\treturn c;\n}\n\n// Repeat the domain only in positive direction. Everything in the negative half-space is unchanged.\nfloat pModSingle1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tif (p >= 0.0)\n\t\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Repeat only a few times: from indices <start> to <stop> (similar to above, but more flexible)\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\n\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.0*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.0;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.0;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n// Same, but mirror every second cell so all boundaries match\nvec2 pModMirror2(inout vec2 p, vec2 size) {\n\tvec2 halfsize = size*0.5;\n\tvec2 c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\tp *= mod(c,vec2(2.0))*2.0 - vec2(1.0);\n\treturn c;\n}\n\n// Same, but mirror every second cell at the diagonal as well\nvec2 pModGrid2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\tp *= mod(c,vec2(2.0))*2.0 - vec2(1.0);\n\tp -= size/2.0;\n\tif (p.x > p.y) p.xy = p.yx;\n\treturn floor(c/2.0);\n}\n\n// Repeat in three dimensions\nvec3 pMod3(inout vec3 p, vec3 size) {\n\tvec3 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\n\n// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror (inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\n\n// Mirror in both dimensions and at the diagonal, yielding one eighth of the space.\n// translate by dist before mirroring.\nvec2 pMirrorOctant (inout vec2 p, vec2 dist) {\n\tvec2 s = sgn(p);\n\tpMirror(p.x, dist.x);\n\tpMirror(p.y, dist.y);\n\tif (p.y > p.x)\n\t\tp.xy = p.yx;\n\treturn s;\n}\n\n// Reflect space at a plane\nfloat pReflect(inout vec3 p, vec3 planeNormal, float offset) {\n\tfloat t = dot(p, planeNormal)+offset;\n\tif (t < 0.0) {\n\t\tp = p - (2.0*t)*planeNormal;\n\t}\n\treturn sgn(t);\n}\n\n//------------------------------------------------\n\n// 3D noise function (IQ)\nfloat noise(vec3 p){\n\tvec3 ip = floor(p);\n    p -= ip;\n    vec3 s = vec3(7.0,157.0,113.0);\n    vec4 h = vec4(0.0, s.yz, s.y+s.z)+dot(ip, s);\n    p = p*p*(3.0-2.0*p);\n    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\n//Color palette function from IQ\n//https://iquilezles.org/articles/palettes\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n//------------------------------------------------","name":"Common","description":"","type":"common"}]}