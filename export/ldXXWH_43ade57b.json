{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//The control points\nvec2 P0 = vec2(-1.,-.7);\nvec2 P1 = vec2(-.75,.0);\nvec2 P2 = vec2( .75,1.);\nvec2 P3 = vec2( 1.,0.);\n//leading coefficient of the polynomial defining the curve. Used by the Durand-Kerner solver\nfloat iLeadingCoef=0.;//initialized in main()\n\n/////////////////////////////////////////////////////////////////////////////////////\n//Utility function///////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\nvec2 Bezier(float t){\n\tfloat _t=1.-t;\n\treturn _t*_t*(P0*_t + 3.*P1*t)+(3.*P2*_t + P3*t)*t*t;\n}\n\n/*vec2 DBezier(float t){\n\tfloat _t=1.-t;\n\treturn 3.*((P1-P0)*_t*_t + 2.*(P2-P1)*t*_t + (P3-P2)*t*t);\n}*/\n\nfloat SegDist(vec2 p, vec2 a, vec2 b){//distance to line (a,b)\n\tb-=a;\n\tp-=a;\n\tp=p-b*clamp(dot(p,b)/(dot(b,b)),0.,1.);//Fortunately it still work well when a==b => division by 0\n\treturn length(p);\n}\n\nfloat SegDistSQR(vec2 p, vec2 a, vec2 b){//distance to line (a,b)\n\tb-=a;\n\tp-=a;\n\tp=p-b*clamp(dot(p,b)/(dot(b,b)),0.,1.);//Fortunately it still work well when a==b => division by 0\n\treturn dot(p,p);\n}\n\nfloat Bwidth(vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\t//width of the \"fat line\" going from p0 to p3 and containing the \n\t//Bezier curve which control points are (p0..p3)\n\treturn max(SegDistSQR(p1, p0, p3), SegDistSQR(p2, p0, p3));\n}\n/////////////////////////////////////////////////////////////////////////////////////\n//Subdivision////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////////////////////////////////////////\n//Durand-Kerner//////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\n#define MAX_ITER 20\n#define EPS 0.01\nfloat uit=0.;\n\nvec2 cmul(vec2 c1, vec2 c2){\n\treturn vec2(c1.x*c2.x-c1.y*c2.y,c1.x*c2.y+c1.y*c2.x);\n}\n\nvec2 cinv(vec2 c){\n\treturn vec2(c.x,-c.y)/dot(c,c);\n}\n\nvec4 CBezier(vec2 t){\n\tvec2 _t=vec2(1.,0.)-t;\n\tvec2 t2=cmul(t,t);\n\tvec2 _t2=cmul(_t,_t);\n\treturn vec4(cmul(_t2,(P0.x*_t + 3.*P1.x*t))+cmul((3.*P2.x*_t + P3.x*t),t2),\n\t\t\t\tcmul(_t2,(P0.y*_t + 3.*P1.y*t))+cmul((3.*P2.y*_t + P3.y*t),t2)\n\t\t\t\t);\n}\n\nvec4 CDBezier(vec2 t){\n\tvec2 _t=vec2(1.,0.)-t;\n\tvec2 t2=cmul(t,t);\n\treturn vec4(\n\t\t\t\t(cmul(((P1.x-P0.x)*_t + 2.*(P2.x-P1.x)*t),_t) + (P3.x-P2.x)*t2),\n\t\t\t\t(cmul(((P1.y-P0.y)*_t + 2.*(P2.y-P1.y)*t),_t) + (P3.y-P2.y)*t2)\n\t\t\t\t);\n}\n\nvec2 cBfun(vec2 c, vec2 p){\n\tvec4 CB=CBezier(c)-vec4(p.x,0.,p.y,0.);\n\tvec4 CDB=CDBezier(c);\n\tvec2 v=cmul(CB.xy,CDB.xy)+cmul(CB.zw,CDB.zw);\n\treturn v;\n}\n\nfloat DKstep(inout vec2 c0, vec2 c1, vec2 c2, vec2 c3, vec2 c4, vec2 p){\n\t//return values:\n\t//c0: new value of c0;\n\t//returns: step \"length\" for epsilon comparison\n\tvec2 fc=cBfun(c0, p);\n\tfc=iLeadingCoef*cmul(fc,cinv(cmul(cmul(c0-c1,c0-c2),cmul(c0-c3,c0-c4))));\n\tc0-=fc;\n\treturn max(abs(fc.x),abs(fc.y));\n}\n\nfloat Dist2(vec2 c, vec2 p){\n\tif(abs(c.y)<=EPS) {\n\t\tfloat t=clamp(c.x,0.,1.);\n\t\tvec2 q=Bezier(t)-p;\n\t\treturn dot(q,q);\n\t}\n\treturn 1.e20;\n}\n\nfloat BDistDK( in vec2 p ){\n\tvec2 c0=vec2(1.,0.);\n\tvec2 c1=vec2(0.,0.9);\n\tvec2 c2=cmul(c1,vec2(0.4,0.5));\n\tvec2 c3=cmul(c2,vec2(0.4,0.9));\n\tvec2 c4=cmul(c3,vec2(0.4,0.9));\n\tfor(int i=0; i<MAX_ITER; i++){\n\t\tfloat e = DKstep(c0, c1, c2, c3, c4, p);\n\t\te = max(e,DKstep(c1, c2, c3, c4, c0, p));\n\t\te = max(e,DKstep(c2, c3, c4, c0, c1, p));\n\t\te = max(e,DKstep(c3, c4, c0, c1, c2, p));\n\t\te = max(e,DKstep(c4, c0, c1, c2, c3, p));\n\t\tif(e<EPS) break;\n\t\tuit+=1.;\n\t}\n\t//return length(c0-p);\n\tfloat d=1.e20;\n\td=min(d,Dist2(c0,p));//if(abs(c0.y)<=EPS) {float t=clamp(c0.x,0.,1.);vec2 q=Bezier(t)-p; d=min(d,dot(q,q));}\n\td=min(d,Dist2(c1,p));//if(abs(c1.y)<=EPS) {float t=clamp(c1.x,0.,1.);vec2 q=Bezier(t)-p; d=min(d,dot(q,q));}\n\td=min(d,Dist2(c2,p));//if(abs(c2.y)<=EPS) {float t=clamp(c2.x,0.,1.);vec2 q=Bezier(t)-p; d=min(d,dot(q,q));}\n\td=min(d,Dist2(c3,p));//if(abs(c3.y)<=EPS) {float t=clamp(c3.x,0.,1.);vec2 q=Bezier(t)-p; d=min(d,dot(q,q));}\n\td=min(d,Dist2(c4,p));//if(abs(c4.y)<=EPS) {float t=clamp(c4.x,0.,1.);vec2 q=Bezier(t)-p; d=min(d,dot(q,q));}\n\treturn sqrt(d);\n}\n/////////////////////////////////////////////////////////////////////////////////////\n//direct method using 110 segments (same time)///////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\n\n#define NBRPT 110\nfloat BDist(vec2 p){\n\tfloat d=1.e20;\n\tfor(int i=0;i<NBRPT;i++){\n\t\tvec2 q=p-Bezier(float(i)/float(NBRPT));\n\t\td=min(d, dot(q,q));\n\t}\n\treturn sqrt(d);\n}\n\nfloat BDist1(vec2 p){\n\tfloat d=1.e20;\n\tfloat t=0.;\n\tvec2 lq=Bezier(t);\n\tfor(int i=0;i<NBRPT;i++){\n\t\tt+=1./float(NBRPT);\n\t\tvec2 nq=Bezier(t);\n\t\td=min(d, SegDist(p,lq,nq));\n\t\tlq=nq;\n\t}\n\treturn d;\n}\n\nfloat BDist2(vec2 p){\n\tfloat d=1.e20;\n\tfloat t=0.;\n\tvec2 lq=Bezier(t);\n\tfor(int i=0;i<NBRPT;i++){\n\t\tt+=1./float(NBRPT);\n\t\tvec2 nq=Bezier(t);\n\t\td=min(d, SegDistSQR(p,lq,nq));\n\t\tlq=nq;\n\t}\n\treturn sqrt(d);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -P0+3.*(P1-P2)+P3;\n\tiLeadingCoef=1./dot(p,p);\n\t\n\tvec2 uv = (2.*fragCoord.xy - iResolution.xy)/ iResolution.y;\n\tvec2 muv = (2.*iMouse.xy - iResolution.xy)/ iResolution.y;\n\tfloat f=BDistDK(uv);//\n\tf=sin(f*50.)*0.5+0.5;//\n\tfragColor = vec4(f);//\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldXXWH","date":"1416429224","viewed":813,"name":"Bezier Durand-Kerner","username":"knighty","description":"Distance to cubic bezier curve using Durand-Kerner polynomial roots solver.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["beziercurve","polynomial","dirandkerner"],"hasliked":0,"parentid":"","parentname":""}}