{"ver":"0.1","info":{"id":"NlfSRX","date":"1626151694","viewed":122,"name":"Liquid Plasma","username":"NAME_REDACTED","description":"Just some pretty colors to enjoy watching. Try turning off the GENERATE flag and drawing with the mouse.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["plasma","colors","liquid","mesmerize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//regular basic coloring function\nvec4 palette1d(float i, float shift)\n{\n    float p = fract(i + shift);\n    int color0 = int(floor(i + fract(shift))) % COLOR_COUNT;\n    int color1 = (color0 + 1) % COLOR_COUNT;\n    return mix(texelFetch(iChannel1, ivec2(color0, 0), 0),\n        texelFetch(iChannel1, ivec2(color1, 0), 0), p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float val = abs(texture(iChannel0, uv).x);\n    \n    float shift = (float(iFrame) / float(CHANGE_FRAME)); //0..1\n    \n    fragColor = palette1d(val, shift);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//2d wave equation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float onePx = 1. / iResolution.y;\n\n    float oldDepth = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n  \n    float right = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, 0), 0).x;\n    float up = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, 1), 0).x;\n    float left =texelFetch(iChannel0, ivec2(fragCoord) - ivec2(1, 0), 0).x;\n    float down =  texelFetch(iChannel0,  ivec2(fragCoord) - ivec2(0, 1), 0).x;\n    float deltaAvg = (\n        right + left +\n        up + down)\n        * .25 - oldDepth;\n    \n    float depth = texelFetch(iChannel1, ivec2(fragCoord), 0).x;\n\n    \n    fragColor = vec4( ((2. * oldDepth - depth) + deltaAvg * 2.) * VISCOSITY\n        \t\t\t, 0,0,0);\n\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//2d wave equation, physics frame B, and add perturbations\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float onePx = 1. / iResolution.y;\n\n    float oldDepth = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n  \n    float right = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, 0), 0).x;\n    float up = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, 1), 0).x;\n    float left =texelFetch(iChannel0, ivec2(fragCoord) - ivec2(1, 0), 0).x;\n    float down =  texelFetch(iChannel0,  ivec2(fragCoord) - ivec2(0, 1), 0).x;\n    float deltaAvg = (\n        right + left +\n        up + down)\n        * .25 - oldDepth;\n    \n    float depth = texelFetch(iChannel1, ivec2(fragCoord), 0).x;\n\n    //user input\n    if (iMouse.z > 0.)\n    {\n        float dist = length(iMouse.xy - fragCoord) / iResolution.y / DRAW_SIZE;\n        if (dist <= 1.)\n        {\n            depth += smoothstep(1.,0.,dist) * DRAW_POWER;// / iResolution.y;\n        }\n    }\n    \n    #ifdef GENERATE\n        float a = iTime * .8;\n        float b = iTime * -1.9;\n        vec2 pos = vec2( cos(a) + cos(b) * .5,\n        sin(a) + sin(b) * .5) * .25 + vec2(.5,.5);\n        float dist = length(pos - uv) / (DRAW_SIZE * .5);\n        if (dist <= 1.)\n        {\n            depth += smoothstep(1.,0.,dist) *  DRAW_POWER;// / iResolution.y;\n        } \n    #endif\n    \n    //start off with some nice colors\n    //if (iTime == 0.)\n    //{\n    //    float p = sin(uv.x * 17.+ sin(uv.y * sin(uv.x * PI) * 13.));;\n    //    depth = sin(uv.x * PI) * sin(uv.y * PI) * p * .05;\n    //}\n    \n    fragColor = vec4( ((2. * oldDepth - depth) + deltaAvg * 2.) * VISCOSITY\n        \t\t\t, 0,0,0);\n\n}\n\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define GENERATE //comment this out to draw on your own\n\n#define DRAW_SIZE .1\n#define DRAW_POWER -.06\n#define VISCOSITY .998 //lower numbers increase dampening\n#define COLOR_COUNT 9\n\n#define CHANGE_FRAME 30 //number of frames before new color is introduced\n\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n#define PI 3.14159265389\n\n#define HASHSCALE1 443.8975\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define repeat(p, m) mod(p * m, m)\n\nvec4 palette(vec3 color0, vec3 color1, float p)\n{\n    p = mod(p, 1.);\n    return vec4(mix(color0, color1, p), 1);\n}\n\nvec4 palette(vec3 color0, vec3 color1, vec3 color2, vec3 color3, float p)\n{\n    return ((p = repeat(p, 4.)) <= 1.) ? vec4(mix(color0, color1, smoothstep(0., 1., p)), 1) :\n        (p <= 2.) ? vec4(mix(color1, color2, smoothstep(0., 1., p - 1.)), 1) :\n    \t(p <= 3.) ? vec4(mix(color2, color3, smoothstep(0., 1., p - 2.)), 1) :\n        vec4(mix(color3, color0, smoothstep(0., 1., p - 3.)), 1);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//palette buffer\n\n//initial colors\n#define COLOR1 vec3(1,0,0) \n#define COLOR2 vec3(1,1,0)\n#define COLOR3 vec3(0,1,0)\n#define COLOR4 vec3(0,0,1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n   // float fp = fract(float(iFrame) / float(CHANGE_FRAME));\n\n    if (coord.y == 0)\n    {\n        if (iFrame == 0) //generate initial palette\n        {\n            float hue = float(coord.x) / float(COLOR_COUNT);\n            fragColor = vec4(hsv2rgb(vec3(hue, 1., 1.)), 1);\n        } else if (iFrame % CHANGE_FRAME == 0) //every X frames\n        {\n            if (coord.x < COLOR_COUNT) //rotate palette\n            {\n                fragColor = texelFetch(iChannel0, coord + ivec2(1,0), 0);\n            } else if (coord.x == COLOR_COUNT) //assign random color to last entry\n            {\n                //make a color with random hue, usually high saturation, and slightly dark\n                vec3 hsv = hash33(vec3(fragCoord.x, sin(iTime * 2.5663), iTime));\n                vec3 color = hsv2rgb(vec3(hsv.x * 2., 1. - hsv.y * hsv.y * hsv.y, 1. - hsv.z * hsv.z * hsv.z));\n                fragColor = vec4(color, 1.);\n            } \n        } else //preserve color\n            fragColor = texelFetch(iChannel0, coord, 0); //preserve pixels\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}