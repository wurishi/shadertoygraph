{"ver":"0.1","info":{"id":"MctczH","date":"1730281248","viewed":254,"name":"gyroid without sincos","username":"FabriceNeyret2","description":"replacing sincos with saw curve.\nSwap #if line 3 got the sincos gyroid\nswap #9 for iq version, very close to true cos","likes":38,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","sdf","gyroid","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/4stfRX\n\n#if 0\n    #define Cos(q)  cos(q)\n    #define Sin(q)  sin(q)\n#else\n    vec3 x;\n    #define Cos(q) ( x = mod((q)/3.14,2.), min(x,2.-x)*2.-1. )\n // #define Cos(q) ( x = abs( mod((q)/3.14,2.) -1.) , -1.-x*x*(4.*x-6.) ) // iq version, ultra-close to true cos\n    #define Sin(q)   Cos( q-1.57 )\n#endif\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t = iTime,v,d=t;\n    mat2  R = mat2( sin(t+vec4(0,33,11,0)) );\n    vec3  q = iResolution,\n          D = vec3(.03*(U+U-q.xy)/q.y, -1),              // ray direction\n          p = 300./q, a;                                 // marching point along ray \n    O*=0.; \n    for ( O++; O.x > 0. && d > .01 ; O-=.015 )\n        q = p,\n        q.xz *= R, q.yz *= R,                           // rotation\n        d = abs( v= dot(Sin(q),Cos(q.yzx)) ) -.1,       // gyroid\n        a = abs(q),\n        d = max(d, max(a.x,max(a.y,a.z))-6.),           // clamped to cube\n        a = abs(fract(q)-.5),\n        d = max(d, max(a.x,max(a.y,a.z))-.5+.05*sin(t) ), // grid\n        p += .5*d*D;                                    // step forward = dist to obj\n    O *= v>0. ? vec4(1,.8,.8,1) : vec4(.8,.8,1,1);\n}\n","name":"Image","description":"","type":"image"}]}