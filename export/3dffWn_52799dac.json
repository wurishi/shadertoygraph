{"ver":"0.1","info":{"id":"3dffWn","date":"1587983211","viewed":80,"name":"Beer Label #2 Red and Black","username":"alkova06","description":"Label for my beer.\nBuckwheat Gose - Верба та калина\n5 ABV 8.6 IBUs OG. 1058","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ornament"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Ring(vec2 uv, vec2 pos, float radius, float thick)\n{\n  return mix(1.0, 0.0, smoothstep(thick, thick + 0.01, abs(length(uv - pos) - radius)));\n}\n\nfloat Rectangle(vec2 uv, vec2 pos, vec2 size)\n{\n  size *= 0.5;\n  vec2 r = abs(uv - pos) - size;\n  return step( max(r.x,r.y),0.0);\n}\n\nfloat Frame(vec2 uv, vec2 pos, vec2 size, vec2 thick)\n{  \n  vec2 size2 = size;\n  size2 *= 0.5;\n  vec2 r2 = abs(uv - pos) - size2;\n      \n  size -= thick;\n  size *= 0.5;\n  vec2 r = abs(uv - pos) - size;\n  \n  return min(step(max(r2.x,r2.y), 0.0), step(0.0, max(r.x,r.y)));\n}\n\nfloat Diamond(vec2 uv, vec2 pos, vec2 size, vec2 thick)\n{    \n    float sinAngle = sin(0.785);\n    float cosAngle = cos(0.785);\n    \n    uv = vec2(cosAngle * uv.x - sinAngle * uv.y, sinAngle * uv.x + cosAngle * uv.y);\n    pos = vec2(cosAngle * pos.x - sinAngle * pos.y, sinAngle * pos.x + cosAngle * pos.y);\n    \n    return Frame(uv, pos, size, thick);\n}\n\nfloat DiamondFilled(vec2 uv, vec2 pos, vec2 size)\n{    \n    float sinAngle = sin(0.785);\n    float cosAngle = cos(0.785);\n    \n    uv = vec2(cosAngle * uv.x - sinAngle * uv.y, sinAngle * uv.x + cosAngle * uv.y);\n    pos = vec2(cosAngle * pos.x - sinAngle * pos.y, sinAngle * pos.x + cosAngle * pos.y);\n    \n    return Rectangle(uv, pos, size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.yy;\n    uv *= 50.0;\n    \n    vec2 uvRound = round(uv + 0.5) + vec2(7.0, 0);\n    \n    uvRound.x = min(round(iTime * 10.0), uvRound.x);\n    \n    uv = mod(uv, 1.0);\n\tuv = abs(uv * 2.0 - 1.0);\n    \n    vec3 col = vec3(max(step(uv.x, 0.6), step(uv.y, 0.6)));\n        \n    for(int i = 0; i < 8; i++)\n    {        \n        for(int k = 0; k < 3; k++)\n        {\n            int offset = abs(k - 1);            \n            \n            col = mix(col, vec3(0.0, 0.0, 0.0), Diamond(uvRound, vec2(i * 34 + 18, 34 * k - 9), vec2(23.0), vec2(1.0)));\n            col = mix(col, vec3(0.0, 0.0, 0.0), Diamond(uvRound, vec2(i * 34 + 18, 34 * k - 9), vec2(26.0), vec2(1.0)));\n            col = mix(col, vec3(1.0, 0.0, 0.0), Diamond(uvRound, vec2(i * 34 + 18, 34 * k - 9), vec2(25.0), vec2(1.0)));\n            \n            for(int j = 0; j < 3; j++)\n            {\n                col = mix(col, vec3(0.0, 0.0, 0.0), DiamondFilled(uvRound, vec2(i * 34 + 6 - offset * 17, 17 * k + 8) + vec2(j, j) * 6.0, vec2(4.0)));\n                col = mix(col, vec3(1.0, 0.0, 0.0), DiamondFilled(uvRound, vec2(i * 34 + 6 - offset * 17, 17 * k + 8) + vec2(j, j) * 6.0, vec2(2.0)));\n\n                col = mix(col, vec3(0.0, 0.0, 0.0), DiamondFilled(uvRound, vec2(i * 34 - offset * 17  + 18, 17 * k - 4) + vec2(j, j) * 6.0, vec2(4.0, 4.0)));\n                col = mix(col, vec3(1.0, 0.0, 0.0), DiamondFilled(uvRound, vec2(i * 34 - offset * 17  + 18, 17 * k - 4) + vec2(j, j) * 6.0, vec2(2.0, 2.0)));\n\n                if(j != 1)\n                {\n                    col = mix(col, vec3(0.0, 0.0, 0.0), DiamondFilled(uvRound, vec2(i * 34 + 12 - offset * 17, 17 * k + 2) + vec2(j, j) * 6.0, vec2(4.0, 4.0)));\n                    col = mix(col, vec3(1.0, 0.0, 0.0), DiamondFilled(uvRound, vec2(i * 34 + 12 - offset * 17, 17 * k + 2) + vec2(j, j) * 6.0, vec2(2.0, 2.0)));\n                }\n            }\n        \n        \tcol = mix(col, vec3(0.0, 0.0, 0.0), Diamond(uvRound, vec2(i * 34 + 18 - offset * 17, 17 * k + 8), vec2(15.0), vec2(2.0)));        \n        \tcol = mix(col, vec3(1.0, 0.0, 0.0), Diamond(uvRound, vec2(i * 34 + 18 - offset * 17, 17 * k + 8), vec2(13.0), vec2(8.0)));        \n        \tcol = mix(col, vec3(0.0, 0.0, 0.0), Diamond(uvRound, vec2(i * 34 + 18 - offset * 17, 17 * k + 8), vec2(5.0), vec2(2.0))); \n    \t}\n    }\n    \n    \n    if(abs(uv.x - uv.y) > 100.0 / iResolution.x * 5.0)\n    {\n    \tcol  = vec3(1.0, 1.0, 1.0);        \n    }\n    \n\n    \n    fragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}