{"ver":"0.1","info":{"id":"Ds23Wc","date":"1668255976","viewed":101,"name":"Cubic Bezier Tangent, Normal","username":"Envy24","description":".","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["bezier","normal","cubic","tangent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        (  R.x / R.y  )\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      ( 8.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define HASH(x,y)                 ( hash2to2(uint(x), uint(y)) )\n#define SCENE_SCALE               ( 2.0 )\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float sdf = NDC.y - fx;\n    return SMAA(abs(sdf) / sqrt(1.0 + dfdx * dfdx)); // absolute value / arclenght over unit length interval\n}\n\nvec2 parametric(float t) \n{ \n    t = clamp(t, 0., 1.);\n    vec2 P0 = vec2(-2., -1), P1 = vec2(0.5, -1.), P2 = vec2(-0.5, 1), P3 = vec2(2., 1.);\n    float f = 1.-t;\n    return P0*f*f*f+3.*P1*f*f*t+3.*P2*f*t*t+P3*t*t*t; \n}\nvec2 tangent(float t)\n{   \n    //return (parametric(t+0.01) - parametric(t)) * 100.; // Numeric derivative.\n    \n    /* Analytic derivative. */\n    t = clamp(t, 0., 1.);\n    vec2 P0 = vec2(-2., -1), P1 = vec2(0.5, -1.), P2 = vec2(-0.5, 1), P3 = vec2(2., 1.);\n    \n    vec2 K1 = -P0+3.*P1-3.*P2 +P3, K2 = 3.*P0 - 6.*P1 + 3.*P2, K3 = -3.*P0 + 3.*P1;\n    return 3.*t*t*K1 + 2.*t*K2 + K3;\n    /**/\n}\nvec2 gradient(float t) { return tangent(t); }\nvec2 normal(float t) { vec2 T = tangent(t); return vec2(-T.y, T.x);  }\n\n// https://www.shadertoy.com/view/NtVfWG\nfloat parametric_sdf(\n    in vec2 NDC,\n    in vec2 from, // NDC.x range\n    in vec2 to,   // t range\n    in float count)\n{\n    float dt = (from.y - from.x) / (count - 1.);\n    \n    float minimal_distance = 99.;\n    vec2 B = parametric(linear_remap(from.x, from.x, from.y, to.x, to.y));\n      \n    for (float i = 1.; i < count; i += 1.)\n    {\n        float t = linear_remap(from.x + dt * i, from.x, from.y, to.x, to.y);\n    \n        vec2 E = parametric(t);\n        minimal_distance = \n            min(minimal_distance, segmentSDF_L2(NDC, B, E, 0.));\n        B = E;\n    }\n    \n    float thickness = sinOSC(-5., 20., iTime)/R.y;\n    return minimal_distance;//-thickness;\n}\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse)\n{\n    vec2 M = MOUSE_OFFSET * (mouse == true ? 1. : 0.);\n    return ((2. * (SC - M) - R.xy) / R.y) * scale - origin;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0, 0), true);\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         \n      \n      \n    /* Parametric function (x,y)=f(t) */\n    //                                                                         from                      to\n    //color = mix( color, vec3(1,0,0), SMAA(parametric_sdf(NDC, vec2(-AR*SCENE_SCALE, AR*SCENE_SCALE), vec2(0, 1), 64.)) );\n    color = mix( color, vec3(1,0,0), SMAA(parametric_sdf(NDC, vec2(-AR*SCENE_SCALE, AR*SCENE_SCALE), vec2(0, 1), 256.)) );\n\n\n\n    /* Tangent and normal vectors */\n#define RANGE      ( AR*SCENE_SCALE )\n    float t0 = sinOSC(0., 1., iTime*0.15);      \n    vec2 B = parametric(t0), N = normal(t0), T=tangent(t0), E = B + normalize(T);\n    color = mix(color, vec3(0,0,1), SMAA(segmentSDF_L2(NDC, B, E, 0.)) ); // tangent vector\n    E = B + normalize(N);\n    color = mix(color, vec3(1,0,1), SMAA(segmentSDF_L2(NDC, B, E, 0.)) ); // normal vector\n   \n\n\n    /* Cells */\n    #define CELL_SIZE 1\n    NDC = mod(NDC, vec2(CELL_SIZE)); \n    color -= vertical_line(NDC, 0.)*.2;  color -= horizontal_line(NDC, 0.)*.2; // comment this line if you not use mod\n    color -= vertical_line(NDC, -1.)*.2; color -= horizontal_line(NDC, -1.)*.2;         \n    color -= vertical_line(NDC, 1.)*.2;  color -= horizontal_line(NDC, 1.)*.2; \n    /* */ \n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R) { return length(C - NDC)-R; }\n\nfloat segmentSDF_L2(in vec2 NDC, in vec2 B, in vec2 E, in float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\nfloat linear_remap(\n    float val,\n    float fl,\n    float fr,\n    float tl,\n    float tr)\n{\n    val = (val - fl) / (fr - fl); // inverse linear map from [fl; fr] to [0; 1].\n    return val * (tr - tl) + tl;  // linear map from [0; 1] to [tl; tr].\n}","name":"Common","description":"","type":"common"}]}