{"ver":"0.1","info":{"id":"Wd3SzM","date":"1571645789","viewed":58,"name":"Imaginary box","username":"MapleSyrupCS6","description":"Imaginary box","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["maplestudy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n\nfloat rand(vec2 id)\n{\n    return fract(sin(dot(id, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nfloat distanceFunction2( vec3 p, vec3 b, float r ){\n    \n    vec3 q = abs(p) - b;\n  \treturn length(max(q,0.0)-abs(sin(iTime+PI)) + min(max(q.x,max(q.y,q.z)),0.0)) - r;\n    \n}\n\nfloat distanceFunction( vec3 p,  vec3 b, float s )\n{\n  return length(p)-2.0;\n}\n\n\nfloat distanceFunction3( in vec3 p, vec3 b, float r)\n{\n    p = abs(p);\n    //p.xy += rot;\n    return (p.x+p.y+p.z-3.0)*0.57735027;\n}\n\nfloat map(vec3 p, vec3 b,  float r){\n    \n    p.x = mod(p.x, 10.) -1.*5.;\n    return distanceFunction2(p, b, r);\n}\n\nvec3 normal(vec3 p, vec3 b, float r){\n    \n  vec2 e = vec2(0.0001, 0);\n  float d = map(p, b, r);\n  vec3 n = d - vec3(\n    \tmap(p - e.xyy, b, r),\n        map(p - e.yxy, b, r),\n        map(p - e.yyx, b, r));\n    \n    \treturn normalize(n);\n}\n\n\nvec3 image(vec2 uv){\n    \n    vec2 st = uv*2.0;\n    st = fract(st);\n    vec2 id = (floor(uv*2.0)+0.5)/2.0;\n    \n    float offs = rand(id)*60.;\n    float size = (1. + sin(iTime*3. + offs))*0.2;\n   \n    \n    float d = distance(st, vec2(0.5, 0.5));\n\td = step(d*sin(iTime*5.+offs), size);\n    \n    \n    vec3 col = vec3(0.0);\n    vec3 c1 = vec3(0.3, 0.5, 0.2);\n    vec3 c2 = vec3(0.7, 0.4, 0.3);\n   // col = mix(c1, c2, d);\n    col = vec3(0.2 , d, 0.4);\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 CameraPos = vec3(5, 0, -20);\n    float screenZ = 2.5;\n    vec3 RayDir = normalize(vec3(uv, screenZ));\n    vec3 lightDir = normalize(vec3(1.0, 1.0, -10.));\n    \n   // float size = abs(sin(iTime*2.))*2.;\n    float depth = 0.0;\n    float dist = 0.0;\n    vec3 rayPos = vec3(0.0);\n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 99; i++){\n      \t\n        rayPos = CameraPos + (RayDir * depth);\n        dist = map(rayPos, vec3(2.0, 2.0, 1.0), 0.6);\n        \n        if(dist < 0.0001) break;\n        \n        depth += dist;\n    }\n    \n    \n    if(dist < 0.0001)\n    {\n      \tvec3 n = normal(rayPos, vec3(0.5, 0.5, 0.5), 0.5);\n        float diff = dot(n ,lightDir);  \n        vec3 c1 = vec3(0.5, 0.4, 0.9);\n        vec3 c2 = vec3(0.9, 0.4, 0.7);\n        vec3 im = image(uv);\n        col = mix(vec3(0.8), im , diff);\n        //col = im * diff;\n    }else{\n        col = vec3(0.9, 0.5, 0.3);\n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}