{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const float pi = 3.14159265358979323846;\nconst float epsilon = 1e-6;\n\nconst float fringeExp = 2.3;\nconst float fringeScale = 0.02;\nconst float distortionExp = 2.0;\nconst float distortionScale = 0.65;\n\nconst float startAngle = 1.23456 + pi;\t// tweak to get different fringe colouration\nconst float angleStep = pi * 2.0 / 3.0;\t// space samples every 120 degrees\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 baseUV = fragCoord.xy / iResolution.xy;\n\tvec2 fromCentre = baseUV - vec2(0.5, 0.5);\n\t// correct for aspect ratio\n\tfromCentre.y *= iResolution.y / iResolution.x;\n\tfloat radius = length(fromCentre);\n    fromCentre = radius > epsilon\n        ? (fromCentre * (1.0 / radius))\n        : vec2(0);\n\t\n    float strength = 1.0 - (iMouse.x / iResolution.x);\n    float rotation = iMouse.y / iResolution.y * 2.0 * pi;\n    \n\tfloat fringing = fringeScale * pow(radius, fringeExp) * strength;\n    float distortion = distortionScale * pow(radius, distortionExp) * strength;\n    \n    vec2 distortUV = baseUV - fromCentre * distortion;\n\t\n\tfloat angle;\n\tvec2 dir;\n\t\n\tangle = startAngle + rotation;\n\tdir = vec2(sin(angle), cos(angle));\n\tvec4 redPlane = texture(iChannel0,\tdistortUV + fringing * dir);\n\tangle += angleStep;\n\tdir = vec2(sin(angle), cos(angle));\n\tvec4 greenPlane = texture(iChannel0,\tdistortUV + fringing * dir);\n\tangle += angleStep;\n\tdir = vec2(sin(angle), cos(angle));\n\tvec4 bluePlane = texture(iChannel0,\tdistortUV + fringing * dir);\n\t\n\tfragColor = vec4(redPlane.r, greenPlane.g, bluePlane.b, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjGzm","date":"1424274363","viewed":1370,"name":"Defective lens","username":"inequation","description":"A simple fisheye lens with triplanar chromatic aberration (aka colour fringing) post-process effect.\n\nHorizontal mouse movement: effect strength.\nVertical mouse movement: sampling pattern rotation.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","lens","postprocess","fisheye","fringe","fringing"],"hasliked":0,"parentid":"","parentname":""}}