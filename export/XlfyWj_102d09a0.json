{"ver":"0.1","info":{"id":"XlfyWj","date":"1506340359","viewed":246,"name":"Unreal PseudoRandom hash","username":"cafe","description":"Grabbed from the random Unreal shader.\n\nNot sure if it behaves weird in glsl or if it's not that crazy of a hash\n\nEdit: With now 97% less optimised-out instructions!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.\n////\n//// @param xy should be a integer position (e.g. pixel position on the screen), repeats each 128x128 pixels\n//// similar to a texture lookup but is only ALU\n//// ~13 ALU operations (3 frac, 6 *, 4 mad)\n//\n// float PseudoRandom(float2 xy)\n// {\n// \t\tfloat2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);\n//\t\n//\t\t// found by experimentation\n//\t\treturn frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));\n// }\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 pos = mod(U-.5, 128.) + vec2(-64.340622, -72.465622);\n    float hash = fract(dot(pos.xyx * pos.xyy, vec3(20.390625, 60.703125, 2.4281209)));\n\n\tO = vec4(hash);\n}\n","name":"Image","description":"","type":"image"}]}