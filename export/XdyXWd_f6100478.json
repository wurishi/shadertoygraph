{"ver":"0.1","info":{"id":"XdyXWd","date":"1467295487","viewed":131,"name":"raymarching is gross","username":"alexerrington","description":"it breathes..","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform vec2 resolution;\n\nfloat unite( float a, float b){return min(a, b);}\nfloat subtract( float a, float b ){ return max(-a, b); }\nfloat intersect( float a, float b ){ return max(a, b); }\n\nfloat sphere( vec3 pos, vec3 center, float radius )\n{\n    return length( pos - center ) - radius;\n}\n \nfloat box( vec3 pos, vec3 center, vec3 size, float corner )\n{\n    return length( max( abs( pos-center )-size, 0.0 ) )-corner;\n}\n\nfloat sdf(vec3 p)\n{\n    float s = sphere( p, vec3( 0. ), 1.25 ) * sin(iTime) / 2.0;\n \n    float b = box( p, vec3( 0. ), vec3( 1. ), .0 );\n \n    return subtract( s,b  );\n}\n\n\n/*float sdf(vec3 p)\n{\n\treturn length(p) - 1.0;\n}*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    \n    //uv.x *= (resolution.x / resolution.y) / 10.0;\n    \n    vec3 pos = vec3(0., 0., -2.);\n    vec3 dir = normalize(vec3(uv, 1.));\n    \n    vec3 ip;\n    \n    float t = 0.0;\n    for(int i = 0; i < 32; i++){\n        ip = pos + dir * t;\n        \n        float temp = sdf(ip);\n        //if(temp < 0.01) break;\n        \n        t += temp;\n        \n        \n    }\n    fragColor = vec4(ip, 1.0);\n}","name":"Image","description":"","type":"image"}]}