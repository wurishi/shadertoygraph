{"ver":"0.1","info":{"id":"4dKBRR","date":"1527435907","viewed":298,"name":"SoundAnalyser","username":"goanautix","description":"shows the spectrum of the audio source","likes":6,"published":1,"flags":36,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // get bufferA\n\tvec3 frq = texture(iChannel0,uv).rgb;\t\n    // Output to screen\n    fragColor = vec4(vec3(frq),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define source iChannel2\n#define steps 64.0\n#define correct 1.0\n#define power 6.0\n#define colorSpace 20.0\n#define filter 0.0\n#define speed 0.5\n//\t\t\t\t\t\t\tmin\t\tmax\t\tin hz\nconst vec2 frqSpec = (vec2(00020.0,\t11000.0\t\t\t\t\t*0.5)/11000.0);\nconst float part = 1.0/steps;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // divides the pixel coordinates into steps (from 0 to 1)\n    vec2 iv = floor(uv*steps)/steps;\n    iv.x = (iv.x)*frqSpec.y+frqSpec.x;\n    iv.y+=iTime;\n    \n    if(iv.y==(1.0-part)+iTime){// if the first line is rendert\n        // For iv.x, get the amplitude of iChannel3 and amplify the high frequencies\n\t\tfloat frq = texture(source,vec2(iv.x,0.25)).x*(correct*iv.x+0.6);\n        // push the peaks\n        frq = pow(frq,power);\n        if(frq<=filter) frq=0.0;\n        // Output to screen\n    \tfrq *= colorSpace;\n    \tfragColor = vec4(vec3(\n    \t    \t\t\t\t\tsin(frq),\n    \t    \t\t\t\t\tsin(frq + 2.0943951023),\n    \t    \t\t\t\t\tsin(frq + 4.1887902047)        \n    \t)*frq*3.0,1.0);\n    }else{// else take the last frame and and move the position by \"part\" or static value\n    \tfragColor = vec4(vec3(texture(iChannel0,uv+vec2(0.0,part*speed)).rgb),1.0);\n    }\n}\n// useful == http://onlinetonegenerator.com/","name":"Buf A","description":"","type":"buffer"}]}