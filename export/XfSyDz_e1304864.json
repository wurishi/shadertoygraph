{"ver":"0.1","info":{"id":"XfSyDz","date":"1722118761","viewed":20,"name":"uniforms e animação","username":"jean","description":"Uniforms e animação\nReferencia/créditos : https://www.youtube.com/watch?v=OPaDg_jnTu0","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Coordenadas normalizadas do pixel\n    // Centraliza as coordenadas subtraindo metade da resolução e normaliza pela altura\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Coordenadas polares\n    // Converte as coordenadas cartesianas (x, y) em polares (θ, r)\n    vec2 polarUV = vec2(atan(uv.y, uv.x), length(uv));\n\n    // Amostragem da textura usando as coordenadas polares e o tempo\n    // Desloca a coordenada angular (θ) com o tempo para criar uma animação de rotação\n    vec3 textureSampling = texture(iChannel0, polarUV + vec2(iTime * 0.1, 0.0)).rgb;\n\n    // Cor final\n    // Armazena a cor obtida da amostragem da textura\n    vec3 col = textureSampling;\n\n    // Define a cor do fragmento\n    // Define a cor final do fragmento com a cor 'col' e um valor alfa de 1.0 (completamente opaco)\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}