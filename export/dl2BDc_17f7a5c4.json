{"ver":"0.1","info":{"id":"dl2BDc","date":"1694656618","viewed":38,"name":"MCBE-like Endportal Render","username":"HTMonkeyG","description":"A simple program produces MCBE endportal starfield.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/************************************\n * MCBE-like Endportal Render\n * By HTMonkeyG\n * Bilibili: @HTMonkeyG\n *\n************************************/\n\n/************************************\n * Rotation matrix generator and Hash\n * function for pseudo random number\n *\n************************************/\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}\nfloat Hash(vec2 p){p=fract(p*vec2(114.51,191.9810)),p+=dot(p,p+11.45);return fract(p.x*p.y);}\n\n/* MCBE original colors for starfield */\nvec3[] colors = vec3[] (vec3(.447,.424,.757),vec3(.412,.800,.624),vec3(.290,.420,.835),vec3(.145,.769,.722),vec3(.588,.561,.722),vec3(.478,.859,.655),vec3(.565,.859,.847),vec3(.243,.867,.545),vec3(.125,.545,.522),vec3(.522,.518,.714),vec3(.412,.549,.518),vec3(.165,.706,.710),vec3(.231,.796,.659),vec3(.169,.545,.847),vec3(.325,.722,.518),vec3(.282,.553,.616));\n\n/* Generates a square */\nfloat Square(vec2 uv, float size){\n  vec2 a = step(-size * .5, uv) - step(size * .5,uv);\n  float b = a.x*a.y;\n  return b;\n}\n\n/* Generates a plane with 6 squares */\nfloat Plane(vec2 uv, float size){\n  float a = 0.;\n  a += Square(uv, size),\n  a += Square(vec2(uv.x,uv.y-size), size) * .85,\n  a += Square(vec2(uv.x+size,uv.y), size) * .85,\n  a += Square(vec2(uv.x-size,uv.y), size) * .85,\n  a += Square(vec2(uv.x,uv.y+size), size) * .85,\n  a += Square(vec2(uv.x,uv.y+2. * size), size) * .7;\n  \n  return a;\n}\n\n/* Generates a layer of planes */\nfloat Layer(vec2 uv, float a, float b){\n  uv *= rot(a);\n  uv.y -= b * .1;\n  \n  float col = 0.;\n  vec2 gv = fract(uv) - .5;\n  vec2 id = floor(uv);\n  for(int y = -1;y <= 1;y++)\n    for(int x = -1;x <= 1;x++){\n      vec2 off = vec2(x, y);\n      float n = Hash(id + off)\n          , star = Plane(gv - off - vec2(n, fract(n * 34.)), .05);\n      col += star;\n    }\n  return col;\n}\n\nfloat MAX_LAYER = 16.\n    , rotor = 3.1415926535897 * (5. / 7.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n  vec4 c = vec4(0);\n  uv *= 10.;\n    \n  int j = 1;\n  for(float i = 1.;i <= MAX_LAYER;i++, j++){\n    float brightness = (MAX_LAYER - i) / MAX_LAYER\n        , scale = i * .2\n        , n = Hash(vec2(i, -i));\n    c += vec4(Layer(uv * scale + n * 400., rotor * (i - 1.), iTime) * colors[j % 16] * brightness, brightness);\n  }\n\n  fragColor = c;\n}","name":"Image","description":"","type":"image"}]}