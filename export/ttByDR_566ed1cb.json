{"ver":"0.1","info":{"id":"ttByDR","date":"1594195268","viewed":419,"name":"General Relativity Black Hole","username":"romeosoft","description":"General Relativity Black Hole.\nSteam Game: https://store.steampowered.com/app/1401150/Black_Hole_Simulator\nThe camera code is from https://www.shadertoy.com/view/XdjXDy.\nThank you so much!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n                          .-''--.\n                         _`>   `\\.-'<\n                      _.'     _     '._\n                    .'   _.='   '=._   '.\n                    >_   / /_\\ /_\\ \\   _<\n                      / (  \\o/\\\\o/  ) \\\n                      >._\\ .-,_)-. /_.<\n                          /__/ \\__\\\n                            '---'  \n            \n          “If I can’t picture it, I can’t understand it.”\n*/\n#define ROT(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n\nconst float pi = 3.1415927;\nconst float R = 0.08;\nconst float ISCO = 3.0;\nconst float ICO = 1.5;\nconst vec3 c1 = vec3(0.05, 1.0, 0.0), c2 = vec3(0.05, 1.0, 2.25);\n\n// iq's noise    \nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\nfloat noise( vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\nvec3 HSV2RGB(vec3 c)\n{\n      vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n      vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n      return c.z * mix(K.xxx, clamp(p - K.xxx,0.0,1.0), c.y);\n}\nvec3 getCor(float r, vec3 p, vec3 camray)\n{\n    float d = (r - R * ISCO);\n\t\t\n \tfloat w = 0.01/(d*d*d + 0.001);\n    \n    float v = w * r * dot(cross(p / r, vec3(0.,-1.,0.)), camray);\n    \n    ROT(p.xz, (1.1 + (d * 0.1)*w) * (iTime + 15.0));\n    \n    vec3 cor = mix(c1,c2,1.8 * noise(vec3(p.xz*15., r*15. + iTime*3.5))) * mix(0.0,1.0,smoothstep(0., 0.1, d));\n\n    cor.xz *= mix(1.25, 0., d / (R * 14. -R * ISCO));\n\n    // Doppler effect\n    cor.x *= 1./(1. - 0.2*v);\n\n    cor.z *= mix(0.,3.0,cor.x * 4.0);\n\n    return HSV2RGB(cor);\n}\n//--------------------------------------------------------------\n\nfloat sphere(vec3 p, vec3 o, float r)\n{\n    float x = smoothstep(0.0, -r, (length(p-o)-r));\n\n    return x;\n}\nfloat cone(vec3 p, vec3 o1, vec3 o2, float r1, float r2)\n{\n    ROT(p.xy, (0.1) * sin(p.y + 15.0 + iTime*5.1));\n    vec3 ux = vec3(1.,0.,0.);\n    vec3 uy = normalize(o2-o1);\n    vec3 uz = normalize(cross(ux,uy));\n    ux = (cross(uy,uz));\n    vec3 op = p - o1;\n    vec3 pp = vec3(dot(op, ux),dot(op, uy),dot(op, uz));\n    \n    float fh = pp.y / (o2.y-o1.y);\n    if(fh > 0. && fh < 1.)\n    {\n        float r = mix(r1, r2, (pp.y / (o2.y-o1.y)));\n        if(length(pp.xz) < r)\n            return 1.0;\n    }\n    return 0.;\n}\n\nvec3 transform(vec3 p)\n{\n    ROT(p.xz, (0.1) * (iTime));\n    \n    return vec3(p.x+0.71,p.z-0.61,p.y-0.21)*10.0;\n}\nbool shadow(vec3 p)\n{\n    vec3 v=vec3(0.,-0.01,0.01);\n    for(int i = 0; i < 20; i ++)\n    {\n        p += v;\n        float f1 = cone(p, vec3(0.,0.,0.),vec3(0.,0.5,-0.5),0.25,0.5);\n        float f2 = cone(p, vec3(0.,0.5,-0.5),vec3(0.21,2.,0.0),0.25,0.5);\n         if(f1+f2 > 0.0)\n            return true;\n    }\n    return false;\n}\n\nvec3 shade(vec3 p, float v)\n{\n    vec3 cor=vec3(0.2,0.7,0.9);\n    cor = mix(cor,vec3(0.), -normalize(p).z);\n    if(shadow(p))\n        return cor * 0.5;\n    return cor;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pp = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    float eyer = 1.5;\n    float eyea = -(iMouse.x / iResolution.x) * pi * 2.0;\n    float eyef = ((iMouse.y / iResolution.y)-0.24) * pi * 2.0;\n    \n\tvec3 cam = vec3(\n        eyer * cos(eyea) * sin(eyef),\n        eyer * cos(eyef),\n        eyer * sin(eyea) * sin(eyef));\n    \n\tvec3 front = normalize(- cam);\n\tvec3 left = normalize(cross(normalize(vec3(0.0,1,-0.5)), front));\n\tvec3 up = normalize(cross(front, left));\n\tvec3 v = normalize(front*1.5 + left*pp.x + up*pp.y);\n    \n    vec3 p = cam;\n    float dt = 0.01;\n    vec3 cor = vec3(0.0);\n    \n    for(int i=0;i<400;i++)\n    {\n\t\tfloat r = length(p);\n        float rr = length(p.xz);\n        \n        if(r > R)\n        { \n            dt = mix(0.004,0.02,smoothstep(0.,0.05,abs(p.y))); // To be smooth\n            \n            float f = R/(r*r);\n            float n = 1.5 / (1.0 - R/r);\n            f = n*f;\n            vec3 a = normalize(p) * (-f);\n            \n            v += a * dt;\t\n            vec3 np = p + (v / n) * dt;\n        \n            \n            if (np.y * p.y < 0.)\n            {\n                if(r >= R * ISCO && r <= R * 13.)\n                {\n                    cor = getCor(r, np,front); \n                    break;\n            \t}\n            }\n            else\n            {\n                vec3 pp = transform(p);\n                float head = sphere(pp, vec3(0.,0.,0.),0.25);\n                float body = cone(pp, vec3(0.,0.25,0.),vec3(0.,-0.5,0.),0.3,0.15);\n                float arm1 = cone(pp, vec3(0.,0.1,0.0),vec3(-1.,-0.8,0.0),0.05,0.06);\n                float arm2 = cone(pp, vec3(0.,0.1,0.0),vec3(1.,-0.8,0.0),0.05,0.06);\n                float leg1 = cone(pp, vec3(0.,0.8,0.0),vec3(-0.2,1.9,0.0),0.05,0.1);\n                float leg2 = cone(pp, vec3(0.,0.8,0.0),vec3(0.2,1.9,0.0),0.05,0.1);       \n                float f = (head+body+arm1+arm2+leg1+leg2)/6.;\n                if(f > 0.0)\n                {\n                    cor = shade(pp, f);\n                    break;\n                }\n            }\n            p = np;\n        }\n        else\n        {\n            break;\n        }\n    }\n    fragColor = vec4(cor,1.0);\n}","name":"Image","description":"","type":"image"}]}