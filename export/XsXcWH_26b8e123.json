{"ver":"0.1","info":{"id":"XsXcWH","date":"1487876991","viewed":409,"name":"Light Square Grid test","username":"SalikSyed","description":"A grid of light squares","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["lightsquares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat integrate_montecarlo(vec2 start, vec2 end, vec2 pt) {\n    if (length(pt - (start*0.5 + end*0.5)) > 0.5) {\n     \treturn 0.0;   \n    }\n    float sum = 0.0;\n    for(int i  = 0; i <= 15; i++) {\n     \tfloat alpha = float(i) / 15.0;\n        float d = length((alpha * start + (1.0 - alpha) * end) - pt);\n        sum += 1.0 / (pow(d, 1.44));\n    }\n    return 0.005*sum;\n}    \n\n\n\n\nfloat integrate(vec2 start, vec2 end, vec2 pt) {\n\treturn integrate_montecarlo(start, end, pt); \n}\n\n\nfloat compute_light_from_square(vec2 outerMin, vec2 outerMax, vec2 pos) {\n   \tfloat d = 0.0;\n    // compute the light contribution from each fluorescent segment\n    d += integrate(outerMin, vec2(outerMin.x, outerMax.y), pos);\n    d += integrate(vec2(outerMax.x, outerMin.y), outerMin, pos);\n    d += integrate(vec2(outerMin.x, outerMax.y), outerMax, pos);\n    d += integrate(vec2(outerMax.x, outerMin.y), outerMax, pos);\n    return d;\n}    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoordinate )\n{\n    fragColor = vec4(0.0);\n    vec2 pos = fragCoordinate/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    pos.x *=aspect;\n    float PADDING_X = 0.1;\n    float PADDING_Y = 0.1;\n    int NUM_BOXES = 5;\n    float BOX_PADDING = 0.009;\n    float boxWidth = (1.0-2.0*PADDING_X-0.5*float(NUM_BOXES-1)*BOX_PADDING)/float(NUM_BOXES);\n    float boxHeight = (1.0-2.0*PADDING_X-0.5*float(NUM_BOXES-1)*BOX_PADDING)/float(NUM_BOXES);\n    float d = 0.0;\n    for(int i = 0; i < NUM_BOXES; i++) {\n        for(int j = 0; j < NUM_BOXES; j++) {\n\t\t\tvec2 outerMin = vec2(float(i) * boxWidth + PADDING_X, float(j) * boxHeight + PADDING_Y);\n            vec2 outerMax = outerMin + vec2(boxWidth, boxHeight);\n            outerMin += vec2(BOX_PADDING, BOX_PADDING);\n            outerMax -= vec2(BOX_PADDING, BOX_PADDING);\n\t\t\td += compute_light_from_square(outerMin, outerMax, pos);\n        }\n    }\n    vec4 mixColor =  vec4(19.0/255.0, 98.0/255.0, 128.0/255.0, 1.0);\n    fragColor =  mix(0.00028 *vec4(pow(d, 1.77 + 0.43*(sin(iTime*5.0)*0.5 + 0.5) )), mixColor, 0.4);\n}","name":"Image","description":"","type":"image"}]}