{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float calcLuma(in vec4 color)\n{\n\treturn dot(color.rgb / color.a, vec3(0.2126,0.7152,0.0722));\n}\n\nvec2 doEdgeDetect(in sampler2D texture, in vec2 center, in vec2 width)\n{\n\tconst mat3 xkernel = mat3(1.75, 2.0, 1.75, 0.0, 0.0, 0.0, -1.75, -2.0, -1.75);\n\tconst mat3 ykernel = mat3(1.75, 0.0, -1.75, 2.0, 0.0, -2.0, 1.75, 0.0, -1.75);\n\t\n\tvec2 retval;\n\tfor (int i = 0; i < 9; i++)\n\t{\n\t\tivec2 relcoords = ivec2((i/3) - 1, (i - (3 * (i/3))) - 1);\n\t\tvec4 sample = texture(texture, center + vec2(width.x * float(relcoords.x), width.y * float(relcoords.y)));\n\t\tfloat sample_luma = calcLuma(sample);\n\t\tretval.x += xkernel[i - (3 * (i/3))][(i/3)] * sample_luma;\n\t\tretval.y += ykernel[ i - (3 * (i/3))][(i/3)] * sample_luma;\n\t}\n\treturn retval;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat theta = iTime/5.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 eyePos = vec3(0.5, 0.5, -1.0);\n\tvec3 eyeDir = normalize(vec3(uv.x - eyePos.x, uv.y - eyePos.y, 0.0 - eyePos.z));\n\tvec3 lightDir = normalize(vec3(uv.x - (iMouse.x/iResolution.x), uv.y - (iMouse.y/iResolution.y), 1.0));\n\tvec2 edginess = doEdgeDetect(iChannel0, uv, vec2(1.0/iChannelResolution[0].x, 1.0/iChannelResolution[0].y));\n\t\n\tvec4 coreColor = texture(iChannel0, uv);\n\tvec3 calcNormal = normalize(vec3(edginess, sqrt(1.0 - edginess.x*edginess.x - edginess.y*edginess.y)));\n\tvec4 reflectedColor = 0.5*(clamp(dot(calcNormal, eyeDir),0.0, 1.0)) *texture(iChannel1, reflect(eyeDir, calcNormal));\n\tvec4 diffuseColor = coreColor * clamp(dot(calcNormal, lightDir),0.0, 1.0);\n\tfragColor = reflectedColor + diffuseColor;\n\t//fragColor = coreColor * clamp(1.0 - abs(distance(vec2(0.0, 0.0),edginess)), 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldsGDB","date":"1378927438","viewed":241,"name":"sobels!","username":"XMPPwocky","description":"discrete convolution for fun and profit\n\nalso calculated normals\n\nmove mouse to move light","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""}}