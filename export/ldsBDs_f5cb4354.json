{"ver":"0.1","info":{"id":"ldsBDs","date":"1498945624","viewed":340,"name":"Smooth Notch","username":"Split82","description":"This is my first shadertoy shader. The core is made from https://www.youtube.com/watch?v=yxNnRSefK94 ","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p)\n{    \n    vec3 q = fract(p * 0.5) * 2.0 - 1.0;\n\tq.y = q.x * 0.5;\n    \n\treturn length(q) - 0.3;\n}\n\nfloat trace(vec3 origin, vec3 ray) \n{    \n    float t = 0.0;\n    for (int i = 0; i < 18; i++) {\n        vec3 p = origin + ray * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{    \n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    uv = uv * 2.0 - 1.0;\n    \n    // Aspect ratio.\n    uv.x *= iResolution.x / iResolution.y;                        \n    \n    // RGB\n    vec3 c;\n    \n    float s1 = sin(iTime * 0.5);\n    \n    // Compute RGB separately.\n    for (int i = 0; i < 3; i++) {\n        \n        // Move origin.\n        vec3 origin = vec3(0.0, 0.0, iTime);\n        \n        // Some kind of chromatic aberration.\n        uv.x *= 0.97;\n        uv.y *= 0.97;\n        \n    \tvec3 ray = normalize(vec3(uv, 0.5));\n        \n        // Spiral rotation (XY).\n    \tfloat the = iTime + length(uv) * s1;\n    \tray.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n        \n        // Normal rotation (XZ).\n        the = iTime * 0.1;\n        ray.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n                \n        float t = trace(origin, ray);\n        \n        // Visualize depth.\n    \tc[i] = 1.0 / (1.0 + t * t * 0.07);\n    }    \n       \n        \n\tfragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}