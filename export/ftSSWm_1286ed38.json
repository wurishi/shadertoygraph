{"ver":"0.1","info":{"id":"ftSSWm","date":"1627770766","viewed":68,"name":"Raytracer < 100 lines","username":"iothesis","description":"balling","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","pathtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray {\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct Hit {\n    vec3 normal;\n    float t;\n};\n\nfloat focal = 1.0;\nvec3 origin = vec3(0, 0.0, 2);\n\n\nRay cammapray(vec2 uv) {\n    vec2 siz = vec2((iResolution.x/iResolution.y)*2.0, 2.0);\n\n    vec3 blc = origin-vec3(siz/2., focal);\n    return Ray(\n        origin,\n        vec3(blc.xy+uv*siz, blc.z)-origin\n    );\n}\n\nvec3 camraycolor(Ray ray) {\n    vec3 ndir = normalize(ray.dir);\n    float t = 0.5 * (ndir.y + 1.0);\n    return t*vec3(0.5, 0.7, 1.0) + (1.0-t)*vec3(1.0, 1.0, 1.0);\n}\n\nHit rayvssphere(Ray ray, vec3 center, float radius) {\n    vec3 asubc = ray.pos-center;\n    \n    float a = dot(ray.dir, ray.dir),\n          b = 2.0 * dot(asubc, ray.dir),\n          c = dot(asubc, asubc)-(radius*radius);\n\n    float disc = b*b-4.0*a*c;\n    float t = disc < 0.0 ? -1.0 : (-b - sqrt(disc))/(2.0*a);\n    return Hit((ray.dir*t+ray.pos-center)/radius, t);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 scatter(vec2 seed) {\n    vec3 v = vec3(rand(vec2(seed.x, 0)), rand(vec2(0, seed.y)), rand(seed));\n    v *= 2.0;\n    v -= vec3(1, 1, 1);\n    return normalize(v);\n}\n\nvec3 scene(Ray r) {\n    Hit hit;\n    float mul = 1.0;\n    for (int hits = 0; hits < 3; hits += 1) {\n        Hit hit_list[3] = Hit[3](\n            rayvssphere(r, vec3(cos(iTime), 0, sin(iTime)), 0.5),\n            rayvssphere(r, vec3(-cos(iTime), 0, -sin(iTime)), 0.5),\n            rayvssphere(r, vec3(0, -100.5, -1.0), 100.0)\n        );\n        bool hit_anything = false;\n        \n        for (int i = 0; i < 3; i += 1) {\n            if (hit_list[i].t > 0.0) {\n                if (hit_anything && hit_list[i].t > hit.t) continue;\n                hit_anything = true;\n                hit = hit_list[i];\n            }\n        }\n        \n        if (hit_anything) {\n            vec3 at = hit.t*r.dir+r.pos;\n            r = Ray(at, scatter(r.dir.xy)+hit.normal);\n            mul *= 0.5;\n            continue;\n        }\n        return camraycolor(r)*mul;\n    }\n    return camraycolor(r)*mul;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    origin.y += sin(iTime/2.0)/2.0+0.3;\n    vec3 col = vec3(0, 0, 0);\n    for (int i = 0; i < 30; i += 1) {\n        Ray r = cammapray(uv+vec2(rand(uv+vec2(float(i),uv.x)), rand(uv+vec2(uv.y,float(i))))/iResolution.xy);\n        col += scene(r);\n    }\n    fragColor = vec4(col/30.0,1.0);\n}","name":"Image","description":"","type":"image"}]}