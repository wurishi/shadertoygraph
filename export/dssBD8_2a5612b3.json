{"ver":"0.1","info":{"id":"dssBD8","date":"1688707108","viewed":145,"name":"GOL neighbors","username":"playersteve19","description":"each pixel turns on if it would be an \"alive\" cell in the next iteration, according to the rules of Conway's Game of Life. This was a bit of a challenge to get right without using if/else. \n","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["effect","digital","glitchy","cyberpunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define threshold .5\n//threshold is very important to the final image. It's set to .5 by default but something like fract(iTime/120.) works nice too, especially for static images\nvec3 neighborcount(in vec3 col, in vec2 uv, in vec2 res){\n    vec3 count;\n    for(float i=-1.;i<=1.;i++){\n        for(float j=-1.;j<=1.;j++){\n            count+=step(threshold,texture(iChannel0,uv+vec2(i,j)/res).xyz);\n        }\n    }\n    return count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col;\n    vec3 neighbors = neighborcount (col, uv, iResolution.xy);\n    vec3 alivestate=1.-step(0.,abs(neighbors-2.5)-.6);//check if number of neighbors is either: within 2,3 or check if outside 2,3. Within 2,3=1else0\n    vec3 deadstate=1.-step(0.1,abs(3.-neighbors));//check if number of neighbors is exactly 3. if so, 1else0. \n    vec3 color = mix(deadstate,alivestate,step(threshold,1.-col));\n    //color = col; /*debug*/\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}