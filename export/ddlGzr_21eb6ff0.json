{"ver":"0.1","info":{"id":"ddlGzr","date":"1669271572","viewed":163,"name":"Voronoi modif","username":"tacos_au_chili","description":"an image filter to use voronoi","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voroninoiserandom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANIMATE 1.0\n\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)); }\n\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\n// Pseudo-random value in half-open range [0:1].\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nvec2 random2( vec2 v ) { return vec2(random(vec3(v,0.0)),random(vec3(v,1.0))); }\n\nvec2 noise2( vec2 pos ){\n    vec2 flp = floor(pos);\n    vec2 frp = fract(pos);\n    vec2 aa = random2(flp+vec2(0,0));\n    vec2 ba = random2(flp+vec2(1,0));\n    vec2 ab = random2(flp+vec2(0,1));\n    vec2 bb = random2(flp+vec2(1,1));\n    return mix(mix(aa,ba,frp.x),mix(ab,bb,frp.x),frp.y);\n    }\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\treturn noise2(p);\n\t\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        o = 0.5 + 0.5*sin( iTime*ANIMATE + 6.2831*o );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        o = 0.5 + 0.5*sin( iTime*ANIMATE + 6.2831*o );\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00000001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xx;\n    float ratio = iResolution.x/iResolution.y;\n    \n    float preci = iMouse.x;\n    \n    //Tanks FabriceNeyret2\n    if(iMouse.xy == vec2(0))preci = 100.0;\n\n    vec3 c = voronoi( preci*p );\n    \n    vec2 uv = p+c.yz/preci;\n    uv.y*=ratio;\n\t// isolines\n    vec3 col = texture(iChannel0,p*vec2(1.0,ratio)).rgb;\n    if(fragCoord.y>iMouse.y)col = texture(iChannel0,uv).rgb;\n    if(abs(fragCoord.y-iMouse.y)<1.0)col = 1.0-col;;\n    // feature points\n\tfloat dd = length( c.yz );\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}