{"ver":"0.1","info":{"id":"MlsfzB","date":"1512413746","viewed":523,"name":"nuclear throne tunnel","username":"laserdog","description":"tried to recreate the nuclear throne tunnel. inspired by a previous attempt at the same effect by antonOTI\n\ntarget effect: https://www.youtube.com/watch?v=p0Q_MoMsKlI","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tau 6.28318\n\nconst float MAX_DISTANCE = 100.;\n\nvec2 path(vec3 p)\n{\n    float speed = 2.25;\n\tp.x = sin(p.z*speed);\n\tp.y = cos(p.z*speed);\n\treturn p.xy;\n}\n\nfloat df(vec3 p, vec3 eye)\n{\n    float tunnelRadius = 2. - 2. * (p.z - eye.z) /(1.4);\n\tp.xy += path(p);\n\treturn tunnelRadius - length(p.xy);\n}\n\nvec3 dcol(vec3 p)\n{\n\tp.xy += path(p);\n\treturn mix(vec3(0.15,0.02,0.2),vec3(0.25,0.09,0.36),\n               step(fract(2. * (2. * p.z + atan(p.y, p.x) / tau)), .5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv.y *= -1.;\n    float pixel = 50.;\n    uv = floor(uv * pixel)/pixel;\n    \n\tfloat t = iTime * .35;\n\tvec3 eye = vec3(0, 0., t);\n\teye.xy -= path(eye);\n\t\n    vec3 dir = normalize(vec3(uv, .3));\n\t\n\tfloat dist = 0.1, tot = -0.2;\n\tvec3 p = eye + dir * tot;\n    vec3 col;\n    \n\tfor (int i=0; i < 70; i++)\n\t{\n\t\tif (dist < .001 || tot > MAX_DISTANCE) break;\n\t\tp = eye + dir * tot;\n\t\ttot += dist = df(p, eye) * 0.1;\n        col = dcol(p) *  (1.5 - (p.z - eye.z) / .8);\n\t}\n\t\n    fragColor.rgb = col ;\n}\n\n","name":"Image","description":"","type":"image"}]}