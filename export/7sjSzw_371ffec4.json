{"ver":"0.1","info":{"id":"7sjSzw","date":"1619942247","viewed":91,"name":"Perlin noise(fire) in ball2\t","username":"Marina033","description":"Ball, inside ball with Perlin Noise, 2 lights, texture, cube map.\nMain ball has 2 materials - reflection and refraction","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float MARCH_SIZE = 0.1; // very impotant value \nconst int MAX_STEPS = 100;\nfloat ABSORPTION = 1.0;\nfloat ATTENUATION1 = 5.0;\nfloat ATTENUATION2 = 5.0;\nfloat NOISE_AMPLITUDE = 2.0;\nvec3 randDir; // for soft shadows\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nconst int FOGGY = 4;\n\nconst float N_AIR = 1.0;\nconst float N_GLASS = 1.5;\nfloat n1 = N_AIR;\nfloat n2 = N_GLASS;\nconst float GLASS_R = (N_AIR - N_GLASS) * (N_AIR - N_GLASS) / (N_AIR + N_GLASS) / (N_AIR + N_GLASS);\n\nfloat k_air = 1.0;\n\nvec3 FIRE_POS = vec3(0, 0, 1);\nfloat FIRE_RADIUS = 1.0;\nvec3 FIRE_COLOR = vec3(0xe2, 0x58, 0x22) / 255.0;\n\nvec3 SPHERE_POS = vec3(0, 0, 1);\nfloat SPHERE_RADIUS = 1.0;\nvec3 SPHERE_COLOR = vec3(0.0, 0.5, 0.5);\n\nvec3 CYLINDER_POS = vec3(0, 0, 1);\nfloat CYLINDER_RADIUS = 1.2;\nvec3 CYLINDER_COLOR = vec3(0xcd, 0x85, 0x3f) / 255.0;\n\nvec3 LIGHT1_POS = vec3(-3, 2, 2);\nfloat LIGHT1_RADIUS = 0.9; // TODO this light should not visible\nfloat LIGHT1_RADIUS_INNER = 0.1;\nvec3 LIGHT1_COLOR = vec3(0x30, 0xd5, 0xc8) / 255.0;\n\nvec3 LIGHT2_POS = vec3(2, 0.3, 0.0);\nfloat LIGHT2_RADIUS = 0.3;\nfloat LIGHT2_RADIUS_INNER = 0.2;\nvec3 LIGHT2_COLOR = vec3(0xbf, 0x88, 0xbf) / 255.0;\n\nfloat plane_intersection(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2  - pos.y) / dir.y;\n    if (t <= 0.0) return INF;    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) return INF;        \n    normal = vec3(0, 1, 0);\n    return t;\n}\nfloat sphere_intersection(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float d = b * b - a * c;\n    if (d < 0.0) return INF;\n    float t = -b - sqrt(d);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(d);\n    if (t < 0.0) return INF;\n    normal = normalize(pos + t * dir);\n    return t;\n}\nfloat cylinder_intersection(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r * r) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r * r;\n    float d = b * b - a * c;\n    if (d < 0.0) return INF;\n    t = (-b - sqrt(d)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(d)) / a;\n    if (t < 0.0) return INF;\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\nfloat computeAttenuation(vec3 lightPos, vec3 pos, float attenuation) {\n    vec3 toLight1 = lightPos - pos;\n    float distsq1 = dot(toLight1, toLight1);\n    return attenuation / distsq1; // attenuation\n}\nbool isOcluded(vec3 pos, vec3 target) { // for shadows\n    vec3 dir = target - pos;\n    vec3 normDir = normalize(target - pos);\n    vec3 sphereNormal, cylNormal;\n    float sphereT = sphere_intersection(pos, dir, SPHERE_RADIUS, sphereNormal);\n    if (sphereT < length(dir)) return true;\n    //float cylT = cylinder_intersection(pos, dir, CYLINDER_RADIUS, cylNormal);\n    //if (cylT < length(dir)) return true;\n    return false;\n}\nvec3 computeLight(vec3 pos, vec3 normal, vec3 color) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distsq1 = dot(toLight1, toLight1);\n    float att1 = isOcluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : ATTENUATION1 / distsq1; // attenuation\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distsq2 = dot(toLight2, toLight2);\n    float att2 = isOcluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : ATTENUATION2 / distsq2; // attenuation\n    \n    //att1 = ATTENUATION1 / distsq1;\n    //att2 = ATTENUATION2 / distsq2;\n    //att1 = clamp((LIGHT1_RADIUS - length(toLight1) + LIGHT1_RADIUS_INNER) / (LIGHT1_RADIUS - LIGHT1_RADIUS_INNER), 0.0, 1.0);\n    //att2 = clamp((LIGHT2_RADIUS - length(toLight2) + LIGHT1_RADIUS_INNER) / (LIGHT2_RADIUS - LIGHT2_RADIUS_INNER), 0.0, 1.0);\n            \n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR + \n            max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR \n            + texture(iChannel1, pos).rgb * 0.3//ambient\n            \n            );\n    \n}\n\n\nfloat sphereSdf(vec3 pos, vec3 spherePos, float radius) {\n    //float scale = mix(0.5, 1.0, 0.0);\n    //return length((pos - spherePos) * vec3(scale, 1.0, scale)) - radius;\n    return length(pos - spherePos) - radius;\n}\nfloat rand(float frame){\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat lerp(float v0, float v1, float t) {\n    return v0 + (v1-v0) *clamp(t, 0.0, 1.0);\n}\nvec3 lerp(vec3 v0, vec3 v1, float t) {\n    return v0 + (v1-v0) *clamp(t, 0.0, 1.0);\n}\nvec3 palette_fire(float d) {\n    //const vec3 yellow = vec3(1.7, 1.3, 1.0); \n    const vec3 orange = vec3(1.0, 0.6, 0.0);\n    const vec3 red = vec3(1.0, 0.0, 0.0);\n    //const vec3 darkgray = vec3(0.2, 0.2, 0.2);\n    //const vec3 gray = vec3(0.4, 0.4, 0.4);\n\n    float x = clamp(d, 0.0, 1.0);\n    if (x < 0.33) return lerp(red,red, x * 1.0 / 0.33);\n    else if (x < 0.66) return lerp(red, red, (x - 0.33) * 1.0 / 0.66);\n    //else if (x < 0.75) return lerp(red, orange, x*4.f-2.f);\n    return lerp(red, red, (x - 0.66) * 1.0 / 0.66);\n}\n\n\n\nfloat hash(float n) {\n    float x = sin(n)*43758.5453f;\n    return x-floor(x);\n}\nfloat noise(vec3 x) {\n    vec3 p = vec3((x.x), floor(x.y), floor(x.z));\n    vec3 f = vec3(x.x-p.x, x.y-p.y, x.z-p.z);\n    f = f * (f * (vec3(3.f, 3.f, 3.f)-f * 2.f));\n    float n = dot(p, vec3(1.f, 57.f, 113.f));\n    return lerp(lerp(\n                     lerp(hash(n +  0.f), hash(n +  1.f), f.x),\n                     lerp(hash(n + 57.f), hash(n + 58.f), f.x), f.y),\n                lerp(\n                    lerp(hash(n + 113.f), hash(n + 114.f), f.x),\n                    lerp(hash(n + 170.f), hash(n + 171.f), f.x), f.y), f.z);\n}\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nvec3 rotate(vec3 v) {\n    float x = dot(vec3(0.0,0.8,0.6), v);\n    float y = dot(vec3(-0.8,0.36,-0.48), v);\n    float z = dot(vec3(-0.6,-0.48,0.64), v);\n    return vec3(x, y, z);\n}\nfloat fractal_brownian_motion(vec3 x) {\n    vec3 p = rotate(x);\n    float f = 0.0;\n    f += 0.5000 * noise(p); p = p * 2.32;\n    f += 0.2500 * noise(p); p = p * 3.03;\n    f += 0.1250 * noise(p); p = p * 2.61;\n    f += 0.0625 * noise(p);\n    return f/0.9375;\n}\nfloat signed_distance(vec3 pos) {\n    vec3 s = pos;\n    float displacement = -fractal_brownian_motion(pos*3.4) * NOISE_AMPLITUDE;\n    return length(pos) - (FIRE_RADIUS + displacement);\n}\nvec3 distance_field_normal(vec3 pos) {\n    const float eps = 0.1;\n    float d = signed_distance(pos);\n    float nx = signed_distance(pos + vec3(eps, 0, 0)) - d;\n    float ny = signed_distance(pos + vec3(0, eps, 0)) - d;\n    float nz = signed_distance(pos + vec3(0, 0, eps)) - d;\n    \n    return normalize(vec3(nx, ny, nz));\n}\nbool sphere_trace(vec3 orig, vec3 dir, out vec3 pos) {\n    if (dot(orig, orig) - dot(orig, dir) * dot(orig, dir) > FIRE_RADIUS * FIRE_RADIUS) return false;\n    pos = orig;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        float d = signed_distance(pos);\n        if (d < 0.0) return true;\n        pos = pos + dir * max(d*0.1f, 0.01f);\n    }\n    return false;\n}\nfloat pow2(float x) {\n    return x * x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n\n\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 10)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.x - 0.5) * 2.0) / iResolution.x;\n    //anti aliasing\n    \n    vec3 cameraPos = vec3(0.0, 1.2, -6);\n    vec3 front = normalize(-cameraPos);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec= normalize(front + uv.x * right + uv.y * up);\n    vec3 curPos = cameraPos;\n    vec3 curDir = viewVec;\n    \n    \n    \n    \n    \n   \n   \n    \n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        float tFog = INF;\n        int matType;\n        vec3 color = texture(iChannel1, curDir).rgb;\n        //vec3 result = vec3(0.3, 1.0, 0.3); // = color\n        vec3 result = texture(iChannel1, curDir).rgb;\n        vec3 normal;\n        vec3 planeNormal;\n        vec3 l1Normal;\n        vec3 l2Normal;\n        vec3 sphNorm;\n        vec3 cylNormal;\n        vec3 fireNormal; // does not use\n        vec3 worldPos;\n        vec3 curPosFog = curPos;\n        float nEnter = AIR_N;\n   \n        \n        \n        \n        \n       \n        float planeT = plane_intersection(curPos, curDir, planeNormal);\n        if (planeT < t) {\n            t = planeT;\n            matType = DIFFUSE;\n            worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz).rgb;\n            normal = planeNormal;\n        }       \n        float light1T = sphere_intersection(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Normal);\n        if (light1T < t) {\n            t = light1T;\n            matType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Normal;\n        }\n        float light2T = sphere_intersection(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Normal);\n        if (light2T < t) {\n            t = light2T;\n            matType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Normal;\n        }\n       \n        \n        \n        float sphT = sphere_intersection(curPos - SPHERE_POS, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R) {\n                matType = REFLECTION;\n            } else {\n                matType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        float sph2T = sphere_intersection(curPos - FIRE_POS, curDir, 0.25, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            matType = FOGGY;\n            \n             \n            vec3 hit;\n            if (sphere_trace(curPos, normalize(curDir), hit)) { \n                vec3 light_dir = normalize(LIGHT1_POS - hit) ;                   \n                float light_intensity  = max(0.2, dot(light_dir, distance_field_normal(hit)));\n                //float displacement = (sin(16.0*hit.x)*sin(16.0*hit.y)*sin(16.0*hit.z) + 1.0) / 2.0;\n                float noise_level = (FIRE_RADIUS - length(hit)) / NOISE_AMPLITUDE;\n                color = palette_fire((-0.2 + noise_level) * 2.0) * light_intensity;\n            }\n        }\n        float cylT = cylinder_intersection(curPos - CYLINDER_POS, curDir, CYLINDER_RADIUS, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            matType = DIFFUSE;\n            color = CYLINDER_COLOR;\n            normal = cylNormal;\n        }\n      \n\n        \n        \n        \n        \n        if (t != INF) {\n            worldPos = t * curDir + curPos;            \n            if (matType == EMISSION) {\n                result = color;\n            } \n            else if (matType == DIFFUSE) {\n                result = computeLight(worldPos, normal, color); \n            } \n            else if (matType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-3;\n            }\n            else if (matType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n            else if (matType == FOGGY) {\n                result = color;\n            }\n        }\n        \n        \n        else {\n            result = texture(iChannel1, curDir).rgb;\n       }\n       \n        \n       \n      \n        fragColor = vec4(result, 1.0);\n        \n    }\n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}