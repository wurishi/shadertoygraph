{"ver":"0.1","info":{"id":"wtSXWG","date":"1566956681","viewed":233,"name":"draw line test","username":"zhengqihui","description":"from Draw Stuff","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["drawline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 bufB_mouse_uv  = vec2(0,0);\nconst vec2 bufB_col_uv    = vec2(1,0);\nconst vec2 bufB_hue_uv    = vec2(2,0);\nconst vec2 bufB_size_uv   = vec2(3,0);\nconst vec2 bufB_picker_uv = vec2(4,0);\nconst vec2 bufB_soft_uv   = vec2(5,0);\n\n#define load(a,b) texture(b,(a+0.5)/iResolution.xy)\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 ssamp(vec2 uv)\n{\n    return texture( iChannel3, uv );\t\n}\n\nfloat udBox(vec2 p,vec2 s)\n{\n    return length(max(abs(p)-s,0.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n    \n    vec2  bufB_picker = load(bufB_picker_uv, iChannel1).xy;\n    vec3  bufB_col    = load(bufB_col_uv,    iChannel1).rgb;\n    vec4  bufB_mouse  = load(bufB_mouse_uv,  iChannel1);\n    float bufB_size   = load(bufB_size_uv,   iChannel1).x;\n    float bufB_hue    = load(bufB_hue_uv,    iChannel1).x;\n    float bufB_soft   = load(bufB_soft_uv,   iChannel1).x;\n    \n    vec2 uva = (2.*fragCoord.xy-iResolution.xy)/iResolution.yy;\n    vec2 mouse_aspect = (2.*iMouse.xy-iResolution.xy)/iResolution.yy;\n    float a = iResolution.x/iResolution.y;\n   \n    vec2 p;\n    \n    // Toolbox Border\n    p = uva-vec2(a-0.31,0);\n    if (udBox(p,vec2(0.3,1))==0.0) fragColor.rgb = vec3(0);\n    \n    // Toolbox Background\n    p = uva-vec2(a-0.3,0);\n    if (udBox(p,vec2(0.3,1))==0.0) fragColor.rgb = vec3(1);\n    \n    // Spectrum\n    p = uva-vec2(a-0.25-0.1,1.0-0.25);\n    if (udBox(p,vec2(0.25))==0.0) fragColor.rgb = hsv2rgb(vec3(bufB_hue,p/(0.25*2.0)+0.5));\n    \n    // Hue slider background\n    p = uva-vec2(a-0.05,1.0-0.25);\n    if (udBox(p,vec2(0.05,0.25))==0.0) fragColor.rgb = hsv2rgb(vec3(p.y/(0.25*2.0)+0.5,1.0,1.0));\n\n    // Hue slider\n    p = uva-vec2(a-0.05,1.0-0.005-0.5*(1.-bufB_hue));\n    if (udBox(p,vec2(0.05,0.01))==0.0) fragColor.rgb = vec3(0);\n    \n    // Indicator\n    float d = length(uva-bufB_picker);\n    if (step(d,0.03)*step(0.02,d)>0.0) { fragColor.rgb = 1.0-bufB_col; }\n    \n    // Brush size background\n    p = uva-vec2(a-0.28-0.03,-1.0+0.06);\n    float t = (p.x+0.28)/0.56; p.y += 0.03*(1.-t);\n    if (udBox(p,vec2(0.28,0.03*t))==0.0) fragColor.rgb = vec3(0.5);\n    \n    // Brush size slider\n    p = uva-vec2(a-0.03-0.56*(1.-bufB_size),-1.0+0.03+0.03);\n    if (udBox(p,vec2(0.005,0.03))==0.0) fragColor.rgb = vec3(1,0,0);\n    \n    // Brush softness background\n    p = uva-vec2(a-0.28-0.02,-1.0+0.+0.14);\n    if (udBox(p,vec2(0.27,0.02))==0.0) fragColor.rgb = vec3(pow(p.x/(0.28*2.0)+0.5,0.2));\n    \n    // Brush softness slider\n    p = uva-vec2(a-0.05-0.5*(1.-bufB_soft),-1.0+0.14);\n    if (udBox(p,vec2(0.01))==0.0) fragColor.rgb = vec3(1,0,0);\n    \n    //fragColor = texture(iChannel0,uv);\n\n    vec4 mask = texture(iChannel2,uv*4.0);\n    float r = 1.0 - (fragColor.r + fragColor.g + fragColor.b) / 3.0;\n  \n    //fragColor.rgb = mix(fragColor.rgb, diffuse.rgb, vec3(r));\n    vec4 flow = .5*ssamp(uv);\n    float flowFactor = dot(flow.xyz, vec3(0.299, 0.587, 0.114));\n    float blendFactor = smoothstep(0.35, 0.65, 0.5 * (r * 2.0 + mask.r * flowFactor * 2.0));\n    fragColor.rgb = mix(vec3(1.0,1.0,1.0), fragColor.rgb, vec3(blendFactor));   \n    //fragColor.rgb = flow.rgb;\n    \n    fragColor = texture(iChannel3,uv);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 bufB_mouse_uv = vec2(0,0);\nconst vec2 bufB_col_uv   = vec2(1,0);\nconst vec2 bufB_hue_uv   = vec2(2,0);\nconst vec2 bufB_size_uv  = vec2(3,0);\nconst vec2 bufB_soft_uv  = vec2(5,0);\n\n#define inside(a) (fragCoord.x == a.x+0.5 && fragCoord.y == a.y+0.5)\n#define load(a,b) texture(b,(a+0.5)/iResolution.xy)\n#define save(a,b) if(inside(a)){fragColor=b;return;}\n\n#define T iTime\n#define PI 3.1415926359\n#define TAU (PI*2.0)\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 sdLine(vec2 p, vec2 a, vec2 b, float r)\n{\n    vec2 ab = b-a;\n    float t = dot(p-a,ab)/dot(ab,ab);\n    //if (t<0.0 || t > 1.0) { return 0.; }\n    return vec2(length(p-a-ab*clamp(t,0.,1.))-r,t);\n}\n\nfloat udBox(vec2 p,vec2 s)\n{\n    return length(max(abs(p)-s,0.));\n}\n\nfloat hash(float x)\n{\n\treturn fract(sin(dot(vec2(x, 309.), vec2(50159.91193,49681.51239))) * 73943.1699);\n}\n\nfloat noise(vec2 p)\n{\n\treturn texture(iChannel2,p).x;\n}\n\nfloat fbm(vec2 p)\n{\n    float f = 0.0;\n    \n    f += noise(p/16.)*1.;\n    f += noise(p/8.)*2.;\n    f += noise(p/4.)*4.;\n    f += noise(p/2.)*8.;\n    f += noise(p/1.)*16.;\n    \n    return f/(1.+2.+4.+8.+16.);\n}\n\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uva = (2.*fragCoord.xy-iResolution.xy)/iResolution.yy;\n    float a = iResolution.x/iResolution.y;\n\n    fragColor = load(fragCoord-0.5, iChannel0);\n    \n    vec3  bufB_col   = load(bufB_col_uv,   iChannel1).rgb;\n    vec4  bufB_mouse = load(bufB_mouse_uv, iChannel1);\n    float bufB_size  = load(bufB_size_uv,  iChannel1).x * 0.1;\n    float bufB_hue   = load(bufB_hue_uv,   iChannel1).x;\n    float bufB_soft  = load(bufB_soft_uv,  iChannel1).x;\n    \n    vec2 mouse_current = iMouse.xy/iResolution.yy;\n    vec2 mouse_last    = bufB_mouse.xy/iResolution.yy;\n    vec2 mouse_aspect  = (2.*iMouse.xy-iResolution.xy)/iResolution.yy;\n    vec2 dmouse        = mouse_current-mouse_last;\n\n    if (bufB_mouse.w<1.0) { mouse_last = mouse_current; }\n    \n    vec2 stroke = sdLine(fragCoord.xy/iResolution.yy, mouse_current, mouse_last, bufB_size);\n    float toolBox = udBox(mouse_aspect-vec2(a-0.3,0),vec2(0.3,1));\n    float pipette = texture(iChannel3, vec2(73.5/256.,1.5)).x;\n    \n    float toggle_brush = texture(iChannel3, vec2(49.5/256.,1.5)).x;\n    \n    if (iMouse.w > 0.0 && pipette < 1.0 && stroke.x < 0.0 && toolBox != 0.0)\n    {\n        vec4 col = fragColor;\n        \n        fragColor.rgb = bufB_col;\n        fragColor.a = smoothstep(stroke.x,stroke.x+0.1*bufB_soft+0.005,0.0);\n\n        //if (toggle_brush>0.0)\n        //{\n        //    float a = atan(dmouse.y,dmouse.x)+PI/2.;\n       \t//\tfragColor.a *= clamp(pow(fbm(vec2((uv*rot(-a)).x*0.5/bufB_size,0)),5.)*5.,0.,1.);\n       \t//\tif (stroke.y<0.0||stroke.y>1.0){fragColor.a /= 2.; }\n        //}\n        \n        return;\n    }\n    \n    fragColor = vec4(0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const vec2 bufB_mouse_uv  = vec2(0,0);\nconst vec2 bufB_col_uv    = vec2(1,0);\nconst vec2 bufB_hue_uv    = vec2(2,0);\nconst vec2 bufB_size_uv   = vec2(3,0);\nconst vec2 bufB_picker_uv = vec2(4,0);\nconst vec2 bufB_soft_uv   = vec2(5,0);\n\n#define inside(a) (fragCoord.x == a.x+0.5 && fragCoord.y == a.y+0.5)\n#define load(a,b) texture(b,(a+0.5)/iResolution.xy)\n#define save(a,b) if(inside(a)){fragColor=b;return;}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nfloat sdLine(vec2 p, vec2 a, vec2 b, float r)\n{\n    vec2 ab = b-a;\n    return length(p-a-ab*clamp(dot(p-a,ab)/dot(ab,ab),0.0,1.0))-r;\n}\n\nfloat udBox(vec2 p,vec2 s)\n{\n    return length(max(abs(p)-s,0.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    save(bufB_mouse_uv,iMouse);\n    fragColor = load(fragCoord-0.5, iChannel0);\n    \n    vec2  bufB_picker = load(bufB_picker_uv, iChannel0).xy;\n    vec3  bufB_col    = load(bufB_col_uv,    iChannel0).rgb;\n    vec4  bufB_mouse  = load(bufB_mouse_uv,  iChannel0);\n    float bufB_size   = load(bufB_size_uv,   iChannel0).x;\n    float bufB_hue    = load(bufB_hue_uv,    iChannel0).x;\n    float bufB_soft   = load(bufB_soft_uv,   iChannel0).x;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uvm = iMouse.xy/iResolution.xy;\n    \n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.yy;\n    vec2 mouse_aspect = (2.*iMouse.xy-iResolution.xy)/iResolution.yy;\n    \n    float a = iResolution.x/iResolution.y;\n    \n    vec2 p;\n    \n    if (inside(bufB_col_uv))\n    {        \n        // Spectrum\n        p = bufB_picker-vec2(a-0.25-0.1,1.0-0.25);\n        if (udBox(p,vec2(0.25))==0.0) fragColor.rgb = hsv2rgb(vec3(bufB_hue,p/(0.25*2.0)+0.5));\n    }\n    \n    else if (inside(bufB_picker_uv))\n    {\n        // Color pipette\n        if (texture(iChannel3, vec2(73.5/256.,1.5)).x>0.0)\n        {\n            fragColor.xy = vec2(a-0.5-0.1,1.0-0.5) + rgb2hsv(texture(iChannel1, uvm).rgb).yz*0.5;\n\t\t\treturn;\n        }\n\n        // Picker position\n        p = mouse_aspect-vec2(a-0.25-0.1,1.0-0.25);\n        if (iMouse.w>0.0 && udBox(p,vec2(0.25))==0.0) fragColor.xy = mouse;\n        if (fragColor.x == 0.0 && fragColor.y == 0.0) { fragColor.xy = vec2(a-0.25-0.1,1.0-0.25); }\n    }\n    \n    else if (inside(bufB_hue_uv))\n    {\n        // Color pipette\n        if (texture(iChannel3, vec2(73.5/256.,1.5)).x>0.0)\n        {\n            fragColor.x = rgb2hsv(texture(iChannel1, uvm).rgb).x;\n\t\t\treturn;\n        }\n        \n        // Hue slider\n        p = mouse_aspect-vec2(a-0.05,1.0-0.25);\n    \tif (udBox(p,vec2(0.05,0.25))==0.0) fragColor.x = p.y/(0.25*2.0)+0.5;\n        if (fragColor.x == 0.0) { fragColor.x = 0.5; }\n    }\n    \n    else if (inside(bufB_size_uv))\n    {\n        // Size slider\n   \t\tp = mouse_aspect-vec2(a-0.28-0.03,-1.0+0.03+0.03);\n   \t \tif (udBox(p,vec2(0.28,0.03))==0.0) fragColor.x = p.x/(0.28*2.0)+0.5;\n        if (fragColor.x == 0.0) { fragColor.x = 0.3; }\n    }\n    \n    else if (inside(bufB_soft_uv))\n    {\n        // Softness slider\n   \t\tp = mouse_aspect-vec2(a-0.28-0.02,-1.0+0.14);\n   \t \tif (udBox(p,vec2(0.27,0.03))==0.0) fragColor.x = p.x/(0.27*2.0)+0.5;\n        if (fragColor.x == 0.0) { fragColor.x = 0.1; }\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const vec2 bufB_col_uv = vec2(1,0);\n\n#define inside(a) (fragCoord.x == a.x+0.5 && fragCoord.y == a.y+0.5)\n#define load(a,b) texture(b,(a+0.5)/iResolution.xy)\n#define save(a,b) if(inside(a)){fragColor=b;return;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uva = (2.*fragCoord.xy-iResolution.xy)/iResolution.yy;\n    \n    fragColor = texture(iChannel0,uv);\n    vec4 stroke = texture(iChannel1,uv);\n\n    vec3 bufB_col = load(bufB_col_uv, iChannel2).rgb;\n    float reset = texture(iChannel3, vec2(82.5/256.,0.5)).x;\n    float fill = texture(iChannel3, vec2(70.5/256.,0.5)).x;\n    \n\tif (fragColor.a == 0.0 || reset > 0.0)\n    {\n        fragColor = vec4(vec3(1.-pow(length((uva+vec2(0.3,0))*0.7),2.)*0.2),1.0);\n        fragColor = vec4(1.0);\n    }\n    \n    if (fill > 0.0)\n    {\n        fragColor.rgb = bufB_col;\n    }\n    \n    if (stroke.a == 0.0) { return; }\n    \n    if (iMouse.w>0.0)\n    {\n        fragColor.rgb = fragColor.rgb*(1.-stroke.a) + stroke.rgb*stroke.a;\n    }\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec4 ssamp( vec2 uv, float oct )\n{\n    uv /= oct;\n    \n    vec2 d = 2.*vec2(1.,-1.)/iChannelResolution[1].xy;\n    \n    vec4 tex = (texture( iChannel1, 1.25*uv - 0.*0.004*iTime )\n        + texture( iChannel1, 1.25*uv - 0.*0.004*iTime + d.xy )\n        + texture( iChannel1, 1.25*uv - 0.*0.004*iTime + d.xx )\n        + texture( iChannel1, 1.25*uv - 0.*0.004*iTime + d.yy )\n        + texture( iChannel1, 1.25*uv - 0.*0.004*iTime - d.xy )) / 5.;\n    \n    vec4 noise = .15*(1.-texture( iChannel2, 4.*uv - 0.17*iTime ))\n        + .15*(1.-texture( iChannel2, 3.3*uv + 0.1*iTime ));\n    \n    return tex + noise;\n}\n\nvec2 e = vec2(1./256., 0.);\nvec4 dx( vec2 uv, float oct ) { return (ssamp(uv+e.xy,oct) - ssamp(uv-e.xy,oct)) / (2.*e.x); }\nvec4 dy( vec2 uv, float oct ) { return (ssamp(uv+e.yx,oct) - ssamp(uv-e.yx,oct)) / (2.*e.x); }\n\nvec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // vel\n    //vec2 vel = vec2( dx(uv).x, dy(uv).x );\n    \n    // curl\n    float oct = 1.25;\n    vec2 curl1 = .7*vec2( dy(uv,oct).x, -dx(uv,oct).x );\n    //oct = 7.37;\n    //vec2 curl2 = 0.*vec2( dy(uv,oct).x, -dx(uv,oct).x );\n    //oct = 0.1;\n    //vec2 curl3 = 0.*vec2( dy(uv,oct).x, -dx(uv,oct).x );\n    \n    vec2 curl = .0001*curl1;// + .0001*curl2 + .00001*curl3;\n    curl *= sqrt(iResolution.x/640.);\n    \n    //vec2 wind = 0.002*vec2(.45 + .1*log(max(iTime,1.)),1.); // grav and wind\n    vec2 rand = 0.0005*(hash2(iTime)-0.5);\n\n    fragColor = .991*texture( iChannel0, uv - curl + rand );\n    \n    //fragColor += .1 * smoothstep(0.9,1.,texture( iChannel1, uv ));\n    \n    if( iMouse.z > 0. )\n        fragColor += 0.5*length(texture( iChannel2, uv ))*.15*smoothstep( iResolution.x/10.,iResolution.x/10.-29.,length(iMouse.xy-fragCoord));\n\t    //fragColor += .1*smoothstep( iResolution.x/10.,iResolution.x/10.-29.,length(iMouse.xy-fragCoord));\n    else\n\t    fragColor += .035*smoothstep( iResolution.x/8.,iResolution.x/8.-29.,length(fragCoord-iResolution.xy/(3.+iTime/5.)));\n}","name":"Buf D","description":"","type":"buffer"}]}