{"ver":"0.1","info":{"id":"ctc3zj","date":"1682672464","viewed":171,"name":"Blender-like grid 2D","username":"lorenzocelli","description":"Pixel-perfect bi-dimensional grid with customizable parameters. The grid is only visually similar to the one used in Blender, I am not familiar with Blender's grid implementation, and I do not know how it works.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// return true if the number is odd\nbool odd(int n)\n{\n    return n % 2 == 1;\n}\n\n// return the multiple of delta closest to value\nvec2 closestMul(vec2 delta, vec2 value)\n{\n    return delta * round(value / delta);\n}\n\n// return the distance of value to the closest multiple of delta\nvec2 mulDist(vec2 delta, vec2 value)\n{\n    return abs(value - closestMul(delta, value));\n}\n\n// align the given point to a pixel center if thickness is odd,\n// otherwise align the point to a crossing point between pixels\nvec2 alignPixel(vec2 point, int thickness)\n{\n    if (odd(thickness))\n        return round(point - 0.5) + 0.5;\n    else\n        return round(point);\n}\n\n// return the grid color; see method mainImage for info about parameters\nvec4 drawGrid\n(\n    vec2 position,\n    vec2 origin, \n    vec2 gridSize,\n    vec2 subGridDiv,\n    int thickness, \n    int subThickness,\n    float dotRadius,\n    bool squaredDots,\n    vec4 bgColor,\n    vec4 lineColor, \n    vec4 subLineColor,\n    vec4 dotsColor,\n    vec4 xAxisColor, \n    vec4 yAxisColor\n)\n{\n    float th = float(thickness);\n    float sth = float(subThickness);\n \n    // align the origin to the closest pixel center\n    origin = alignPixel(origin, thickness);\n\n    vec2 relP = position - origin;\n \n    // ---------------------\n    // draw the axes\n    // ---------------------\n    \n    if(abs(relP.y) < th * 0.5) \n    {\n        return xAxisColor;\n    }\n    \n    if(abs(relP.x) < th * 0.5)\n    {\n        return yAxisColor;\n    }\n    \n    vec2 mul = closestMul(gridSize, relP);\n    \n    // pixel distance\n    vec2 dist = mulDist(gridSize, relP);\n    \n    // ---------------------\n    // draw the dots\n    // ---------------------\n    \n    if(dotRadius > 0.0) \n    {\n        // antialiasing threshold\n        float aa = 1.0;\n\n        float dotDist = squaredDots \n            ? max(dist.x, dist.y) \n            : length(dist);\n\n        // this prevents the dots from being drawn on the axes\n        bool drawDots = abs(mul.x) > 0.5 && abs(mul.y) > 0.5;\n\n        if(drawDots && dotDist <= dotRadius + aa)\n        {\n            // draw the dots\n            float val = max(dotDist - dotRadius, 0.0) / aa;\n            \n            return mix(dotsColor, bgColor, val);\n        }\n    }\n    \n    // ---------------------\n    // draw the main grid\n    // ---------------------\n\n    if(min(dist.x, dist.y) <= th * 0.5)\n    {\n        return lineColor;\n    }\n    \n    // ---------------------\n    // draw the sub-grid\n    // ---------------------\n\n    // distance from the bottom-left corner of the main\n    // grid square that this sub-grid is part of\n    dist = abs(relP - gridSize * floor(relP / gridSize));\n\n    vec2 subSize = round(gridSize / subGridDiv);\n\n    if(odd(thickness) != odd(subThickness))\n        dist = abs(dist - 0.5);\n\n    vec2 subDist = mulDist(subSize, dist);\n    \n    // number of columns and rows\n    vec2 rc = round(dist / subSize);\n    \n    // extra pixels that we need to add to the last row/column\n    vec2 extra = gridSize - subSize * subGridDiv;\n\n    if(rc.x == subGridDiv.x) // last column\n        subDist.x += extra.x;\n       \n    if(rc.y == subGridDiv.y) // last row\n        subDist.y += extra.y;\n\n    if(min(subDist.x, subDist.y) <= sth * 0.5)\n    {\n        return subLineColor;\n    }\n    \n    // ---------------------\n    \n    return bgColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ---------------------\n    // grid parameters\n    // ---------------------\n\n    // origin of the grid (crossing point of the axes)\n    vec2 origin = iResolution.xy / 2.0;\n    \n    // thickness for the main grid lines\n    int thickness = 1;\n    \n    // thickness for the sub-grid lines\n    // note: if thickness is odd and subThickness is even or\n    // vice-versa, there may be a small misalignment\n    int subThickness = 1;\n    \n    // when greater than zero, draw dots or squares in the \n    // crossing points of the main grid\n    float dotRadius = 0.0;\n    \n    // when true, draw squared dots instead of circles\n    bool squaredDots = false;\n\n    // size of the grid\n    vec2 gridSize = vec2(100);\n    \n    // number of subdivisions of the sub-grid\n    vec2 subGridDiv = vec2(3, 3);\n    \n    // ---------------------\n    // grid colors\n    // ---------------------\n    \n    // background color\n    vec4 bgColor = vec4(0.2, 0.2, 0.2, 0.0);\n    \n    // color of the main grid lines\n    vec4 lineColor = vec4(0.4, 0.4, 0.4, 1.0);\n    \n    // color of the sub-grid lines\n    vec4 subLineColor = vec4(0.25, 0.25, 0.25, 1.0);\n    \n    // color of the dots (when enabled)\n    vec4 dotsColor = lineColor;\n    \n    // color of the x axis (currently red)\n    vec4 xAxisColor = vec4(212.0 / 255.0, 28.0 / 255.0, 15.0 / 255.0, 1.0);\n    \n    // color of the y axis (currently green)\n    vec4 yAxisColor = vec4(21.0 / 255.0, 191.0 / 255.0, 83.0 / 255.0, 1.0);\n    \n    // ---------------------\n    \n    // this allows to set the origin on mouse click, it can be removed\n    if(iMouse.x > 0.5 && iMouse.y > 0.5) \n    {\n        origin = vec2(iMouse.x, iMouse.y);\n    }\n    \n    // animation test\n    if(true)\n    {\n        int startSize = 100;\n        int endSize = startSize * int(subGridDiv.x);\n        \n        int time = 200;\n        float t = float(int(round(iTime * 100.0)) % time) / float(time);\n        \n        int size = int(round(mix(float(startSize), float(endSize), t)));\n        \n        gridSize = vec2(size);\n        subLineColor = mix(bgColor, lineColor, t);\n    }\n    \n    fragColor = drawGrid(\n    \n        fragCoord,\n        origin, \n        gridSize, \n        subGridDiv, \n        thickness, \n        subThickness, \n        dotRadius,\n        squaredDots,\n        bgColor,\n        lineColor, \n        subLineColor,\n        dotsColor,\n        xAxisColor, \n        yAxisColor\n    );\n}\n\n\n","name":"Image","description":"","type":"image"}]}