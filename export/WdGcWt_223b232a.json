{"ver":"0.1","info":{"id":"WdGcWt","date":"1603983618","viewed":101,"name":"Trypophobia \"Skin\" Holes","username":"AlancitoBalanza","description":"trypophobia","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["skin","trypophobia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\n#define MAX_ITER 1000\n#define MAX_DIST 6.0\n\n#define SET_NEAREST(dst,src) if (src.distance < dst.distance) dst = src\n\n\n\n#define HOLE_THRESH .7\n#define HOLE_DEPTH .0\n#define BORDER_THRESH .65\n#define BORDER_HEIGHT .025\n\nconst vec3 SKIN_COLOR = vec3(1, .6, .47);\nconst vec3 BORDER_COLOR = vec3(1, .68, .5);\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22norm(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash22(vec2 p)\n{\n\treturn hash22norm(p) * 2. - 1.;\n\n}\n\n// From https://www.shadertoy.com/view/Msf3WH\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash22(i+0.0)), dot(b,hash22(i+o)), dot(c,hash22(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\nfloat noise2(in vec2 p) {\n\treturn noise(p + 100.);\n}\nfloat noise3(in vec2 p) {\n\treturn noise2(p + 100.);\n}\n\n// From https://www.shadertoy.com/view/XlB3zW\nfloat voronoi(vec2 n)\n{\n    float i = 0.0;\n    float dis = 2.0;\n    for(int x = -1;x<=1;x++)\n    {\n        for(int y = -1;y<=1;y++)\n        {\n            vec2 p = floor(n)+vec2(x,y);\n            float d = length(hash22norm(p)+vec2(x,y)-fract(n));\n            if (dis>d)\n            {\n             \tdis = d;\n                i = hash22norm(p).x;\n            }\n        }\n    }\n    return dis;\n}\n\n\nmat3 rotationX(float angle) {\n    vec3 u = vec3(1, 0, 0);\n    vec3 v = vec3(0, cos(angle), -sin(angle));\n    vec3 w = vec3(0, sin(angle), cos(angle));\n    return mat3(u, v, w);\n}\n\nmat3 rotationY(float angle) {\n    vec3 u = vec3(cos(angle), 0, sin(angle));\n    vec3 v = vec3(0, 1, 0);\n    vec3 w = vec3(-sin(angle), 0, cos(angle));\n    return mat3(u, v, w);\n}\n\nmat3 rotationZ(float angle) {\n    vec3 u = vec3(cos(angle), -sin(angle), 0);\n    vec3 v = vec3(sin(angle), cos(angle), 0);\n    vec3 w = vec3(0, 0, 1);\n    return mat3(u, v, w);\n}\n\nmat3 rotationMatrix(vec3 angles) {\n    return rotationZ(angles.z) * rotationY(angles.y) * rotationX(angles.x);\n}\n\n\nstruct DistanceObject {\n    float distance;\n    vec3 color;\n};\nstruct HitData {\n    vec3 color;\n    float distance;\n    int iterations;\n    vec3 position;\n};\n\nfloat sdSphere(vec3 pos, float rad) {\n    return length(pos) - rad;\n}\n\n\nfloat sdPlane(vec3 pos) {\n\treturn pos.y;\n}\n\n\nfloat dSkin(vec2 pos) {\n    float voro = max(-.05, -voronoi(pos*20.)*.005);\n    \n    return (1.-exp(sin(noise2(pos*.3)*100.+pos.y*10.*5.)*.5 +.5)) * 0.005 + voro;\n    //return noise(vec2(noise(pos + 100.) * 10., 0.)) * .01;\n}\n\nDistanceObject map(vec3 pos) {\n\t\n    DistanceObject nearest = DistanceObject(MAX_DIST, vec3(1, 0, .5));\n    \n    \n    //  WRITE OBJECTS HERE\n    \n    //SET_NEAREST(nearest, DistanceObject(sdPlane(pos), vec3(.9, .5, .3)));\n    float baseDistance = pos.y - (noise(pos.xz * .2) * .5 + .5) * .1;\n   \t\n    //float dist = getHoleDistance(pos.xz * .5);\n    float n = noise(pos.xz) * .5 + .5 + noise(vec2(iTime, 0)) * .05;\n    \n    if (n > HOLE_THRESH) {\n\t\tfloat holeDepth = (n - HOLE_THRESH) * 5. - BORDER_HEIGHT;\n        //Hole walls\n        SET_NEAREST(nearest, DistanceObject(baseDistance + holeDepth, BORDER_COLOR));\n    } else if (n > BORDER_THRESH) {\n        float h = (n - BORDER_THRESH) / (HOLE_THRESH - BORDER_THRESH);\n        float bumps = dSkin(pos.xz)*(1.-h);\n        h *= BORDER_HEIGHT;\n        SET_NEAREST(nearest, DistanceObject(baseDistance - h + bumps, BORDER_COLOR));\n    } else {\n        //Skin surface\n\t    float skinDistance = baseDistance + dSkin(pos.xz);\n        //float skinDistance = baseDistance;\n        SET_NEAREST(nearest, DistanceObject(skinDistance, SKIN_COLOR));\n    }\n    //Hole bottom surface\n    float r = noise3(pos.xz*2.) * .5 + .5;\n    r *= .8;\n    //r = round(r * 10.) / 10.;\n    SET_NEAREST(nearest, DistanceObject(sdPlane(pos + vec3(0, HOLE_DEPTH, 0)), vec3(1, .72*r, .55*r)));\n    \n    \n    return nearest;\n}\n\n\nHitData render(vec3 pos, vec3 rayDir) {\n\tDistanceObject obj;\n    int i;\n    float dist = 0.;\n    for (i = 0; i < MAX_ITER; i++) {\n    \tobj = map(pos);\n        obj.distance *= .2;\n        dist += obj.distance;\n        pos += rayDir * obj.distance;\n        \n        if (obj.distance < .0001) {\n        \tbreak;\n        }\n    }\n    \n    if (i == MAX_ITER || dist > MAX_DIST) {\n    \tdist = MAX_DIST;\n        obj.color = vec3(0.);\n    }\n    \n    HitData res = HitData(obj.color, dist, i, pos);\n    \n    return res;\n}\n\n\n// From https://www.shadertoy.com/view/Xds3zN\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).distance;\n      //if( n.x+n.y+n.z>100.0 ) break;\n    }\n    return normalize(n);\n}\n\n\nfloat calculateIncidence(vec3 pos) {\n    vec3 nor = calcNormal(pos);\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).distance;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n    /*\n    \n    float epsilon = 1e-3;\n\tvec3 posaa = pos;\n    vec3 right = normalize(cross(dir, vec3(0, 1, 0)));\n    vec3 posab = pos + right * epsilon;\n    vec3 posba = pos + vec3(0, 1, 0) * epsilon;\n    posaa += render(posaa, dir).distance * dir;\n    posab += render(posab, dir).distance * dir;\n    posba += render(posba, dir).distance * dir;\n    vec3 norm = cross(posba - posaa, posab - posaa);\n    return dot(norm, dir) / (length(norm)*length(dir));\n*/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y;\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 coord = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    mat3 cameraMatrix = rotationY(iTime * .1) * rotationX((sin(iTime*.2)*0.3+1.)*-PI/2.0*0.5);\n    \n    vec3 cameraPosition = cameraMatrix * -vec3(0, 0, 1) * (sin(iTime * .1) * 1. + 2.) + vec3(iTime, 1, 0);\n    //vec3 cameraPosition = cameraMatrix * -vec3(0, 0, 1) * (.1) + vec3(iTime, 1, 0);\n    \n    \n    vec3 direction = cameraMatrix * vec3(coord.x, coord.y, 2.5);\n    direction = normalize(direction);\n\n    vec3 col;\n    \n    HitData data = render(cameraPosition, direction);\n    \n    col = data.color;\n    //col *= inversesqrt(data.distance);\n    //col *= float(data.iterations) / 10.0;\n    col *= calculateIncidence(data.position);\n    col = mix(col, vec3(0), clamp((exp(data.distance*.5) - 1.)*.1, 0., 1.));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}