{"ver":"0.1","info":{"id":"dslyRS","date":"1686935756","viewed":60,"name":"GammaCorrection_Raymarching","username":"topaz","description":"Added gamma correction to before work(https://www.shadertoy.com/view/DsXcRM). ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","gammacorrection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat sphereSize = 2.0;\n\n// 球との距離関数\nfloat distanceFunc (vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\n// 法線ベクトルの計算\n// 陰関数に対しては勾配とれば十分\nvec3 getNormal(vec3 pos, float radius)\n{\n    float delta = 0.0001;\n    float a = distanceFunc(vec3(0,0,0), 0.2);\n    float f_x = distanceFunc(pos, radius) - distanceFunc(vec3(pos.x - delta, pos.y, pos.z), radius);\n    float f_y = distanceFunc(pos, radius) - distanceFunc(vec3(pos.x , pos.y - delta, pos.z), radius);\n    float f_z = distanceFunc(pos, radius) - distanceFunc(vec3(pos.x , pos.y, pos.z - delta), radius);\n    return normalize(vec3(f_x, f_y, f_z));\n}\n\nvec3 ApplyGammaCorrection(vec3 color){;\n    float gamma =2.2;\n    return pow(color, vec3(1. / gamma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 正規化されたスクリーン画面上のピクセル\n    vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec3 camera_pos = vec3(0, 0, -5);\n    vec3 camera_up = vec3(0.0, 1.0, 0);\n    vec3 camera_dir = vec3(0.0, 0, 1.0);\n    vec3 camera_side = cross(camera_up, camera_dir); \n   \n   // 光の向き\n    vec3 lightDir = normalize(vec3(4, 3.0, 0.1));\n    lightDir = normalize(vec3(0, 1, -1));\n\n    float screenZ = 0.4;\n    vec3  rayDirection =  normalize(pos.x * camera_side * 0.8\n                                                + pos.y * camera_up * 0.8\n                                                + camera_dir);\n    \n    vec3 color = vec3(0,0,0);\n    vec3 cur = camera_pos;\n    \n    for(int i = 0;i < 64;i++){\n          float d = distanceFunc(cur, sphereSize);\n          \n          // RayとObjectが衝突\n          if(d < 0.0001){\n          \n              vec3 n = getNormal(cur, sphereSize);\n              float diff = dot(n, lightDir);\n              color = vec3(1.0,1.0,1.0) * diff;\n              \n              break;\n          }\n          \n          cur += rayDirection * d;\n    }\n    \n    color = ApplyGammaCorrection(color);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}