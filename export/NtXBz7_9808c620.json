{"ver":"0.1","info":{"id":"NtXBz7","date":"1650621422","viewed":100,"name":"Avoiding ship","username":"lucpayet","description":"Almost working, path of the ship must be updated, after some time ship collapse into the asteroid.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["space","ship"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.1415926535897932384626433832795;\nmat3 rotationMatrixY (float theta)\n{\n    float c = cos (theta);\n    float s = sin (theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\nmat3 rotationMatrixX(float theta){\n\tfloat c = cos (theta);\n\tfloat s = sin (theta);\n\treturn mat3(\n\t\tvec3(1, 0, 0),\n\t\tvec3(0, c, -s),\n\t\tvec3(0, s, c)\n\t);\n}\nmat3 rotationMatrixZ(float theta){\n\tfloat c = cos (theta);\n\tfloat s = sin (theta);\n\treturn mat3(\n\t\tvec3(c, -s, 0),\n\t\tvec3(s, c, 0),\n\t\tvec3(0, 0, 1)\n\t);\n}\nvec3 rotateX (vec3 p, float theta)\n{\n\treturn rotationMatrixX(theta) * p;\n}\nvec3 rotateY (vec3 p, float theta)\n{\n    return p*rotationMatrixY(theta); \n}\nvec3 rotateZ (vec3 p, float theta)\n{\n\treturn p*rotationMatrixZ(theta); \n}\n\nfloat rounding( in float d, in float h )\n{\n    return d - h;\n}\n\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\n//-------------------------------------------------\nfloat sdCircle( in vec3 p, in float r )\n{\n\treturn length(p)-r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n//Background maid by anahit_movsesyan : https://www.shadertoy.com/view/3dyfzm\nmat2 rotMat(float k) {\n    float c = cos(k);\n    float s = sin(k);\n    return mat2(c, -s, s,  c);\n}\n\nfloat fallingStar(vec2 p, vec2 a, vec2 b) {\n    p -= a;\n    b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    p -= b * h;\n    return h * smoothstep(2. * h / iResolution.y, 0., length(p));\n}\n\nfloat hash(vec3 p) {\n\tp = fract(p * vec3(.1031, .11369, .13787));\n    p += dot(p, p.yzx + 19.19);\n    return fract((p.x + p.y) * p.z);\n}\n\nfloat calcStarLayer(vec3 d, float intensity) {\n    return smoothstep(intensity, 0., length(fract(d) - 0.5)) * smoothstep(0.98, 1., hash(floor(d)));\n}\n\nvec3 calcBgColor(vec2 xy, vec3 rayDir) {\n    return fallingStar(xy * rotMat(PI), vec2(-0.04) + tan(iTime / 4.), vec2(0.04) + tan(iTime / 4.)) * vec3(0.3, 0.4, 0.7) +\n           vec3(calcStarLayer(rayDir * 550., abs(sin(iTime / 2.)) / 2.)) * vec3(0.5, 0.28, 0.73) + \n           vec3(calcStarLayer(rayDir * 500., abs(cos(iTime / 2.)) / 2.)) * vec3(0.3, 0.6,  0.73) + \n           vec3(calcStarLayer(rayDir * 400., abs(cos(iTime)) / 2.)) * vec3(0.5, 0.58, 0.43) + \n           vec3(calcStarLayer(rayDir * 500., abs(sin(iTime)) / 2.)) * vec3(0.2, 0.2, 0.8);\n}\n//========End BACKGROUND ============\n\n//---------------------------------\n\nfloat speed = 1.9;\nfloat amplitude = 1.5;\nfloat amplitudeR = 1.;\nfloat frequency = 1.2;\n\nfloat createReactor(vec3 p, float rad, float len, out int material){\n\n\tp = vec3(p.x, p.y, abs(p.z)-0.5);\n\tfloat reactor1 = sdCappedCylinder(p, rad-0.02, len);\n\treactor1 = rounding(reactor1, 0.02);\n\tvec3 q = p;\n\tq += vec3(rad *.8, .0,.0);\n\tfloat feature1 = sdCappedCylinder(q, rad * 0.5, len * 0.3);\n\treactor1 = opUnion(reactor1, feature1);\n\n\tq = p;\n\tq += vec3(.0,-len - 0.01,.0);\n\tfloat fire = sdCircle(q, 0.6 * rad);\n\treactor1 = opUnion(reactor1, fire);\n\tif(fire == reactor1){\n\t\tmaterial = 2;\n\t}\n\telse{\n\t\tmaterial = 1;\n\t}\n\treturn reactor1;\n}\n\nfloat createAsteroid(vec3 p, out int material){\n\tvec3 q = vec3(p.x, p.y, mod(p.z + 2. , 5.) );\n\tq = rotateZ(q, iTime * 0.5);\n\tq = rotateY(q, iTime * 0.5);\n\tfloat asteroid = sdBox(q, vec3(0.2, 0.3, 0.2));\n\tasteroid = opSmoothUnion(asteroid, sdCircle(q, 0.4), 0.1);\n\n\treturn asteroid;\n}\n\nfloat map(in vec3 pos, out int material)\n{\n\tfloat asteroid = createAsteroid(pos, material);\n\n\t//Update pos for the all ship\n\tpos.z = pos.z + iTime * speed;\n\tpos.x = pos.x +    sin(iTime * frequency) * amplitude;\n\tpos = rotateZ(pos, sin(iTime * frequency) * amplitudeR);\n\n\t//Reactor\n\tvec3 q = pos;\n\tq = rotateZ(q, PI * 0.5);\n\tq = rotateX(q, PI * 0.5);\n\tfloat rad = 0.12;\n\tfloat len = 0.4;\n \tfloat reactor = createReactor(q, rad, len, material);\n\n\t//LinkBetweenReactors\n\tq = pos;\n\tfloat core = sdRhombus(q, 0.3, 0.1, 0.05, 0.2 );\n\tfloat link = opSmoothUnion(core, reactor, 0.1);\n\tif(link == core){\n\t\tmaterial = 1;\n\t}\n\n\t//Guns\n\tq = vec3(abs(pos.x), pos.y - 0.05, pos.z);\n\t//q = rotateX(q, PI * 0.5);\n\tfloat gun = sdCapsule(q, vec3(0.1,0.0,-0.1), vec3(0.1,0.0,-0.4), 0.01);\n\tlink = opUnion(gun, link);\n\tif(link == gun){\n\t\tmaterial = 1;\n\t}\n\n\n\t//Core \n\tq = pos + vec3(0.0,0.,-0.5);\n\tfloat core1 = sdEllipsoid(q, vec3(0.2,0.15,0.8));\n\tlink = opSmoothUnion(core1, link, 0.05);\n\tif(link == core1){\n\t\tmaterial = 1;\n\t}\n\n\t//Cockpit\n\tq = pos + vec3(0.0,-0.1,-0.3);\n\tfloat cockpit = sdEllipsoid(q, vec3(0.1,0.1,0.2));\n\tlink = opUnion(cockpit, link);\n\tif(link == cockpit){\n\t\tmaterial = 3;\n\t}\n\n\tfloat dt =  opUnion(asteroid, link);\n\tif(asteroid == dt){\n\t\tmaterial = 0;\n\t}\n\t\n    return dt;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n\tint mat = 0;\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep, mat) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep, mat) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep, mat) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep, mat) );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tint mat = 0;\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t , mat);\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// camera rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n        \n    //===== Camera setup =====\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y; \n   \n   \t//float an = -0.36;\n\tfloat an = -0.16 + sin(iTime*0.1)*.2;\n\tfloat ra = 8.0;\n\tfloat fl = 3.9; //zoom\n\tvec3 ta = vec3(0.0,0.2,0.0 - iTime * speed);\n\tvec3 ro = ta + vec3(ra*sin(an),2.8, ra*cos(an) );\n\tmat3 ca = setCamera( ro, ta, 0.0 );\n\tvec3 rd = ca * normalize( vec3(p.xy,fl));\n\n    //===== Ray marching =====\n\tint mat = 0;\n    float t = 7.0;\n    for( int i=0; i<128; i++ )\n    {\n        vec3 p = ro + t*rd;\n        float h = map(p, mat);\n        if( abs(h)<0.0001 || t>11.0 ) break;\n        t += h;\n    }\n\n    vec3 col = calcBgColor(p, rd);\n    if( t<11.0 )\n    {\n        vec3  pos = ro + t*rd;\n        vec3  nor = calcNormal(pos);\n        vec3  lig = normalize(vec3(1.0,0.8,-0.2));\n        float dif = clamp(dot(nor,lig),0.0,1.0);\n        float sha = calcSoftshadow( pos, lig, 0.001, 1.0, 16.0 );\n        float amb = 0.5 + 0.5*nor.y;\n        col = vec3(0.05,0.1,0.15)*amb + vec3(1.00,0.9,0.80)*dif*sha;\n\t\t//Fireball\n\t\tswitch(mat){\n\t\t\t//Aqteroid\n\t\t\tcase 0:\n\t\t\t\tcol *= texture(iChannel1, pos.xz * 0.15, pos.z).rgb;\n\t\t\t\tcol *= vec3(.5,0.25,0.0);\n\t\t\t\tbreak;\n\t\t\t//Metal\n\t\t\tcase 1:\n\t\t\t\tcol *= 0.2;\n\t\t\t\tbreak;\n\t\t\t//Fire\n\t\t\tcase 2:\n\t\t\t\tcol = texture(iChannel0, pos.xy, pos.z).rgb;\n\t\t\t\tbreak;\n\t\t\t//Cockpit\n\t\t\tcase 3:\n\t\t\t\tcol *= vec3(0.05,0.05,0.05);\n\t\t\t\tbreak;\n\t\t}\n\n    }\n\n    col = sqrt( col );\n    tot += col;\n\n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//Fireball : https://www.shadertoy.com/view/lsf3RH\n//Modify fire to make it blue and appropriate for my ship\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 p = -.5 + fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n\tfloat color = 3.8 - (3.*length(1.*p));\n\t\n\tvec3 coord = vec3(atan(p.x,p.y)/4.2832+.5, length(p)*.4, .1);\n\t\n\tfor(int i = 1; i <= 7; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor += (1.5 / power) * snoise(coord + vec3(0.,-iTime*.05, iTime*.01), power*16.);\n\t}\n\tfragColor = vec4( 0, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.55 , 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}