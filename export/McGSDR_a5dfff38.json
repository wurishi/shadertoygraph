{"ver":"0.1","info":{"id":"McGSDR","date":"1715021346","viewed":48,"name":"Using matrix","username":"SanyaBer","description":"matrix","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_ITERATIONS 10\n#define ESCAPE_RADIUS 4.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Define the matrices\n    mat4 modelMatrix = mat4( 1.0 );\n    mat4 viewMatrix = mat4( 1.0 );\n    mat4 projectionMatrix = mat4( 1.0 );\n\n    // Set the values of the matrices\n    modelMatrix[0][0] = 1.0 + 0.5 * sin( iTime * 0.1 );\n    modelMatrix[1][1] = 1.0 + 0.5 * cos( iTime * 0.1 );\n    modelMatrix[2][2] = 1.0 + 0.5 * sin( iTime * 0.2 );\n\n    viewMatrix[3][2] = -5.0;\n\n    projectionMatrix[1][1] = 1.0 / iResolution.y;\n    projectionMatrix[0][0] = 1.0 / iResolution.x;\n\n    // Define the vertex position\n    vec4 vertexPosition = vec4( fragCoord.xy, 0.0, 1.0 );\n\n    // Transform the vertex position using the matrices\n    vec4 transformedVertexPosition = projectionMatrix * viewMatrix * modelMatrix * vertexPosition;\n\n    // Calculate the fractal value\n    vec2 fractalValue = vec2( 0.0 );\n    for ( int i = 0; i < NUM_ITERATIONS; i++ )\n    {\n        fractalValue = vec2( fractalValue.x * fractalValue.x - fractalValue.y * fractalValue.y, 2.0 * fractalValue.x * fractalValue.y ) + transformedVertexPosition.xy / transformedVertexPosition.w;\n        if ( length( fractalValue ) > ESCAPE_RADIUS )\n        {\n            break;\n        }\n    }\n\n    // Calculate the final fragment color\n    vec2 rotatedFractalValue = fractalValue * mat2( cos( iTime * 0.1 ), sin( iTime * 0.1 ), -sin( iTime * 0.1 ), cos( iTime * 0.1 ) );\n    vec2 kaleidoscopeValue = (rotatedFractalValue + 1.0) * 0.5 * mat2( 0.5, 0.5, -0.5, 0.5 );\n    fragColor = vec4( vec3( length( kaleidoscopeValue ) / ESCAPE_RADIUS ), 1.0 );\n}","name":"Image","description":"","type":"image"}]}