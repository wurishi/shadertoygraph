{"ver":"0.1","info":{"id":"WtBfzt","date":"1602913579","viewed":153,"name":"chick","username":"treize","description":"chick\nBezier curve\nhttps://www.shadertoy.com/view/lsyfWc\nrespect\nhttps://www.chickenramen.jp/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void Chick(vec2 UV, vec3 BodyColor,vec3 MouthColor, out vec3 Out)\n{    \n    vec3 col;\n    //hair\n    vec2 p0 =  vec2(0.5,0.7);\n    vec2 p1 =  vec2(0.5,1.0);\n    vec2 p2 =  vec2(0.34,0.9);\n    float hair = udBezier( p0, p1, p2, UV ).x;\n   \tcol = mix( col, vec3(1.0), 1.0-smoothstep(0., 2.0/iResolution.y*.9,hair));\n    hair=col.x;    \n    //Body\n    float body,body2; \n    Ellipse(UV+vec2(0.0,0.2),0.7,0.35,body);\n \tRoundedRectangle(UV,0.7,0.7,0.3,body2);\n    body+=body2+hair;\n    //Eye\n    vec2 eye_uv=vec2(-0.2,0.12);\n    float pupil, pupil2;\n    Ellipse(UV+ eye_uv,0.12,0.2,pupil);\n    Ellipse(UV+ abs(eye_uv),0.12,0.2,pupil2);\n    pupil+=pupil2;\n    float eye,eye2;\n    vec2 eye_uv2=vec2(-0.02,-0.03);\n    Ellipse(UV+ eye_uv+ eye_uv2,0.12,0.19,eye);\n    Ellipse(UV+ abs(eye_uv)+ eye_uv2,0.12,0.19,eye2);\n    eye+=eye2;\n    //Mouth\n    float mouth;\n    RoundedPolygon(UV+vec2(0.0,0.25),0.43,0.23, 3.0, 0.2,mouth);\n\t//Polygon(UV+vec2(0.0,0.25),3.0,0.4,0.2,mouth);\n    //Face\n   \tvec3 face= body*BodyColor;\n    face=clamp(face,0.0,1.0)-mouth*(vec3(1.0)-MouthColor)+pupil;\n    face=clamp(face,0.0,1.0)-clamp(eye,0.0,pupil);\n    Out= face;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \t//vec2 uv =  ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    vec2 uv = fragCoord/iResolution.y+vec2(-0.4,0.0);\n    vec3 body_color=vec3(1.0,1.0,0.0),mouth_color=vec3(1.0,0.6,0.0),col;\n    Chick(uv,body_color,mouth_color,col);\n    //GammaCorrect(col,col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"void Ellipse(vec2 UV, float Width, float Height, out float Out)\n{\n    float d = length((UV * 2.0 - 1.0) / vec2(Width, Height));\n    Out += clamp((1.0 - d) / fwidth(d),0.0,1.0);\n}\nvoid Ellipse2(vec2 UV,vec2 UV2, float Width, float Height, out float Out)\n{\n    float ellipse;\n\tEllipse(UV+UV2,Width,Height,ellipse);\n    Ellipse(UV+abs(UV2),Width,Height,ellipse);\n    Out=ellipse;\n}\nvoid RoundedRectangle(vec2 UV, float Width, float Height, float Radius, out float Out)\n{\n    Radius = max(min(min(abs(Radius * 2.0), abs(Width)), abs(Height)), 1e-5);\n    vec2 uv = abs(UV * 2.0 - 1.0) - vec2(Width, Height) + Radius;\n    float d = length(max(vec2(0.0), uv)) / Radius;\n    Out =  clamp((1.0 - d) / fwidth(d),0.0,1.0);\n}\nvoid Polygon(vec2 UV, float Sides, float Width, float Height, out float Out)\n{\n    float pi = 3.14159265359;\n    float aWidth = Width * cos(pi / Sides);\n    float aHeight = Height * cos(pi / Sides);\n    vec2 uv = (UV * 2.0 - 1.0) / vec2(aWidth, aHeight);\n    uv.y *= -1.0;\n    float pCoord = atan(uv.x, uv.y);\n    float r = 2.0 * pi / Sides;\n    float distance = cos(floor(0.5 + pCoord / r) * r - pCoord) * length(uv);\n    Out = clamp((1.0 - distance) / fwidth(distance),0.0,1.0);\n}\nvoid RoundedPolygon(vec2 UV, float Width, float Height, float Sides, float Roundness, out float Out)\n{\n    UV = UV * 2. + vec2(-1.,-1.);\n    float epsilon = 1e-6;\n    float xx,yy;\n    if(Width==0.0)xx=1.0; else xx=0.0;\n    if(Height==0.0)yy=1.0;else yy=0.0;\n    \n    UV.x = UV.x / ( Width + xx*epsilon);\n    UV.y = UV.y / ( Height +yy* epsilon);\n    Roundness = clamp(Roundness, 1e-6, 1.);\n    float i_sides = floor( abs( Sides ) );\n    float fullAngle = 2. * 3.14 / i_sides;\n    float halfAngle = fullAngle / 2.;\n    float opositeAngle = 3.14*0.5 - halfAngle;\n    float diagonal = 1. / cos( halfAngle );\n\n    float chamferAngle = Roundness * halfAngle;\n    float remainingAngle = halfAngle - chamferAngle;\n    float ratio = tan(remainingAngle) / tan(halfAngle); \n    vec2 chamferCenter = vec2(cos(halfAngle) ,sin(halfAngle))* ratio * diagonal;\n\n    vec2 chamferOrigin = vec2(1.,tan(remainingAngle));\n    float distA = length(chamferCenter);\n    float distB = 1. - chamferCenter.x;\n    float distCref = length(chamferOrigin);\n\n     //diagonal = length(chamferCenter) + distB;\n    float uvScale = diagonal;\n    UV *= uvScale;\n    vec2 polaruv = vec2 (atan( UV.y, UV.x ),length(UV));\n    polaruv.x += 3.14*0.5 + 2.*3.14;\n    polaruv.x = mod( polaruv.x + halfAngle, fullAngle );\n    polaruv.x = abs(polaruv.x - halfAngle);\n    UV = vec2( cos(polaruv.x), sin(polaruv.x) ) * polaruv.y;\n    float angleRatio = 1. - (polaruv.x-remainingAngle) / chamferAngle;\n    float distC = sqrt( distA*distA + distB*distB - 2.*distA*distB*cos( 3.14 - halfAngle * angleRatio ) );\n    Out = UV.x;\n    float chamferZone;\n    if( halfAngle - polaruv.x  < chamferAngle)chamferZone=1.0;else chamferZone=0.0;   \n    Out = mix( UV.x, polaruv.y / distC, chamferZone );\n    Out = clamp((1. - Out) / fwidth(Out),0.0,1.0);\n}\nvoid GammaCorrect(vec3 color,out vec3 Out)\n{\n    Out= pow(color, vec3(1.0 / 2.2));\n}\nvec2 udBezier(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 pos)\n{    \n\n    vec2 a = p1 - p0;\n    vec2 b = p0 - 2.0*p1 + p2;\n    vec2 c = p0 - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(c,b)) / 3.0;\n    float kz = kk * dot(c,a);      \n\n    vec2 res;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 1 root\n        vec2 qos = c + (2.0*a + b*t)*t;\n        res = vec2( length(qos),t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n\n        vec2 qos = c + (2.0*a + b*t.x)*t.x;\n        float dis = dot(qos,qos);\n        \n        res = vec2(dis,t.x);\n\n        qos = c + (2.0*a + b*t.y)*t.y;\n        dis = dot(qos,qos);\n        if( dis<res.x ) res = vec2(dis,t.y );\n\n        qos = c + (2.0*a + b*t.z)*t.z;\n        dis = dot(qos,qos);\n        if( dis<res.x ) res = vec2(dis,t.z );\n\n        res.x = sqrt( res.x );\n    }\n    \n    return res;\n}","name":"Common","description":"","type":"common"}]}