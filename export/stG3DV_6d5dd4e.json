{"ver":"0.1","info":{"id":"stG3DV","date":"1638338316","viewed":125,"name":"Microphone demo","username":"jgardner8","description":"Shows microphone input as a frequency graph and waveform","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["spectrum","graph","waveform","frequency","microphone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 discardBelowThreshold(vec3 v, float threshold)\n{\n    return vec3(\n        (v.x < threshold) ? 0.0f : v.x,\n        (v.y < threshold) ? 0.0f : v.y,\n        (v.z < threshold) ? 0.0f : v.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfloat freq = textureLod(iChannel0, vec2(uv.x,0.25), 0.0).x; \n\tfloat wave = textureLod(iChannel0, vec2(uv.x,0.75), 0.0).x;\n\n    vec3 col = vec3(0.0);\n\n    // frequency graph\n    float hue = freq - uv.y;\n    vec3 freqGraph = hsv2rgb(vec3(hue, 1.0, 1.0));\n    freqGraph *= mix(0.0, 1.5, freq*(1.0-uv.y));\n    col += freqGraph;\n  \n    // waveform\n    vec3 waveform = vec3(mix(1.0, 0.0, abs(wave - uv.y)));\n    waveform = discardBelowThreshold(waveform, 0.997);\n    waveform *= mix(0.2, 10.0, abs(0.5 - uv.y));\n    col += waveform;\n    \n    // output to screen\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}