{"ver":"0.1","info":{"id":"XfVyRd","date":"1732264096","viewed":62,"name":"Gyroid intro","username":"vanshika","description":"Trying out gyroids for the first time.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","gyroids"],"hasliked":0,"parentid":"WtGXDD","parentname":"RayMarching starting point"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n#define orange vec3(.8, .2, .05)\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias){\n    p *= scale;\n    return abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;  // cool patterns come out of playing with the p value.\n}\n\nvec3 Transform(vec3 p){\n    p.xy *= Rot(p.z*.1);\n    p.z -= iTime*.1;\n    p.y -= .3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n\n    p = Transform(p);\n    float box = sdBox(p, vec3(1));\n    \n    float g1 = sdGyroid(p, 5.11, .03, 1.4);\n    float g2 = sdGyroid(p, 17.22, .03, .3);\n    float g3 = sdGyroid(p, 27.22, .03, .3);\n    float g4 = sdGyroid(p, 47.22, .03, .3);\n    //float g5 = sdGyroid(p, 87.22, .03, .3);\n    //float g = min(g1, g2);\n    //float g = max(g1, -g2); // experiment with this one. \n    g1 -= g2*.2; // second one is used as a bump map for the first one.\n    g1 -= g3*.3;\n    g1 += g4*.1;\n    //g1 += g5*.1;\n    \n    float d = g1*.8; //max(box, g1*.8);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.05, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 Background(vec3 rd){\n    vec3 col = vec3(0.);\n    float y = rd.y*.5+.5;\n    col += (1.-y)*orange*2.;\n    \n    float a = atan(rd.x, rd.z);\n    float flames = sin(a*10.+iTime)*sin(a*7.-iTime)*sin(a*6.);\n    flames *= S(.8, .5, y);\n    \n    col += flames;\n    col = max(col, 0.);\n    col += S(.5, .0, y)*.3;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    uv += sin(uv*20.+iTime)*.01;\n\n    vec3 ro = vec3(0, 0, -.2);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 lookat = vec3(0);\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        p = Transform(p);\n        vec3 r = reflect(rd, n);\n        float t = iTime;\n        float dif = n.y*.5+.5;\n        col +=  dif*dif;\n        float height = p.y;\n        \n        float g2 = sdGyroid(p, 17.22, .03, .3);\n        \n        col *= S(-.1, .05, g2);\n        \n        float crackWidth = -.02+S(0., -.5, n.y)*.02;\n        \n        float cracks = S(crackWidth, -.03, g2);\n        \n        float g3 = sdGyroid(p+t*.1, 5.22, .03, .0);\n        float g4 = sdGyroid(p-t*.15, 10.37, .03, .0);\n\n        cracks *= g3*g4*10.+.2*S(.2, 0., n.y);\n        \n        col += cracks*orange*3.;\n        float g5 = sdGyroid(p-vec3(0,t,0), 5.37, .03, .0);\n        \n        col += g5*orange;\n        \n        col += S(0., -2., height)*orange;\n\n    }\n    \n    col = mix(col, Background(rd), S(0., 7., d));\n    //col = Background(rd);\n    col *= 1.-dot(uv,uv);\n    col = pow(col, vec3(.4545));\t// gamma correction\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}