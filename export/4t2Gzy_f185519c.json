{"ver":"0.1","info":{"id":"4t2Gzy","date":"1430045682","viewed":323,"name":"Strange place","username":"erucipe","description":"noise, voronoi, smoothmin, terrain and pinkish sky","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const float pi = 3.141592653589793;\n\nfloat hash2(vec2 p) {\n    return fract(sin(p.x * 15.73 + p.y * 35.29) * 43758.29);    \n}\n\nfloat shash2(vec2 p) {\n    return hash2(p) * 2.0 - 1.0;\n}\n\nvec2 hash22(vec2 p) {\n    return fract(sin(mat2(15.23, 35.76, 75.48, 153.69) * p) * 43758.29);\n}\n\nfloat noise2(vec2 p) {\n    vec2 g = floor(p);\n    vec2 f = fract(p);\n    f = f*f*(3.0 - 2.0*f);\n    \n    float lt = hash2(g + vec2(0.0, 1.0));\n    float rt = hash2(g + vec2(1.0, 1.0));\n    float lb = hash2(g + vec2(0.0, 0.0));\n    float rb = hash2(g + vec2(1.0, 0.0));\n    \n    float t = mix(lt, rt, f.x);\n    float b = mix(lb, rb, f.x);\n    return mix(b, t, f.y);\n}\n\nfloat smin(float a, float b, float k) {\n\tfloat h = clamp((b - a) / k * 0.5 + 0.5, 0.0, 1.0);\n\treturn mix(b, a, h) - k * h * ( 1.0 - h);\n}\n\nfloat voronoi(vec2 p) {\n    vec2 g = floor(p);\n    vec2 f = fract(p);\n\tf = f*f*f*(6.0*f*f - 15.0*f + 10.0);\n    \n    float d = 1000.0;\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 b = vec2(i, j);\n            d = smin(d, length(hash22(g + b) + b - f), 0.2);\n        }\n    }\n    return d;\n}\n\nfloat pulse(float d, float w, float k) {\n    return smoothstep(w + k, w, d) - smoothstep(-w, -w - k, d);\n}\n\nfloat sdPlane(vec3 p) {\n    return p.y - 0.2 * voronoi(p.xz * 2.0) + 2.0 * noise2(p.xz);\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat map(vec3 p) {\n    float r = p.y + 0.5;\n    float d = sdPlane(p) * 0.5;\n    d = smin(d, r, 0.1);\n    return d;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(-1.0, 1.0) * 0.0001;\n    return normalize(\n        e.xyy * map(p + e.xyy) +\n        e.yxy * map(p + e.yxy) +\n        e.yyx * map(p + e.yyx) +\n        e.xxx * map(p + e.xxx)\n    );\n}\n\nfloat softshadow(vec3 ro, vec3 rd, float mint, float maxt, float k) {\n    float sh = 1.0;\n    float t = mint;\n    float h = 0.0;\n    for(int i = 0; i < 30; i++) {\n        if(t > maxt) continue;\n        h = map(ro + rd * t);\n        sh = min(sh, k * h / t);\n        t += h;\n    }\n    return sh;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    p = 2.0 * p - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 1.0, 3.0 - iTime);\n    vec3 ta = vec3(0.0, 0.5, 0.0 - iTime);\n    vec3 cw = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    vec3 rd = normalize(p.x * cu + p.y * cv + 3.0 * cw);\n    \n    float e = 0.0001;\n    float t = 0.0;\n    float h = e * 2.0;\n    for(int i = 0; i < 60; i++) {\n        if(h < e || t > 20.0) continue;\n        h = map(ro + rd * t);\n        t += h;\n    }\n    \n    vec3 pos = ro + rd * t;\n    vec3 nor = calcNormal(pos);\n    vec3 lig = normalize(vec3(0.0, 0.5, -1.0));\n    float dif = dot(nor, lig);\n    float fre = dot(nor, rd) + 1.0;\n    float fog = clamp(exp(-1.0 * (t - 15.0)), 0.0, 1.0);\n    float sh = 0.2 + 0.8 * clamp(softshadow(pos, lig, 0.02, 20.0, 7.0), 0.0, 1.0);\n    float j = sin(noise2(pos.xz) * 3.141592 + iTime * 0.1);\n    vec3 col = vec3(0.0, cos(j * 3.141592 * 2.0) * 0.5 + 0.5, sin(j * 3.141592 * 20.0) * 0.5) * dif + fre * 0.3;\n    col *= sh;\n    col += fre * 0.2;\n    vec3 sun = vec3(1.0, 1.0, 0.0) * 0.3 / length(p.xy - vec2(0.0, 0.25));\n    vec3 bg = vec3(0.8, 0.8 - (p.y * 0.5 + 0.5) * 0.7, 0.7) + sun;\n\t\n    col = mix(bg, col, fog);\n    if(t > 20.0) col = bg;\n    fragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}