{"ver":"0.1","info":{"id":"WlcBW7","date":"1612815206","viewed":81,"name":"Newton root for e^z-z-c","username":"jayprich","description":"Newton's method  x -> x - ( f - x0 ) / f'  is very stable near solutions but allows a series of jumps at the boundary between convergent basins if the iterate happens to also land near a boundary","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.volkerschatz.com/art/miscart.html\n// Newton root seek e^z-z-const .. the \"const\" changes over time\n// plot the root found by the initial z \n\n\nvec2 cexp(vec2 a){return exp(a.x)*vec2(cos(a.y), sin(a.y));}\nvec2 cdiv(vec2 a, vec2 b){return vec2(a.x*b.x+a.y*b.y,a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y);}\nvec2 cmul(vec2 a, vec2 b){return vec2(a.x*b.x-a.y*b.y,a.x*b.y+b.x*a.y);}\n\nvec4 newton(vec2 c)\n{\n vec2 x, xn;\n xn = c;\n x = xn - cdiv(cexp(xn)-xn-vec2(5.*cos(.1*iTime)*(1.+sin(.5*iTime)),12.*sin(.12*iTime)),cexp(xn)-1.);\n float i=0.;\n for(;i<45.&&length(x-xn)>1.e-3;i++)\n {\n  xn = x;\n  x = xn - cdiv(cmul(xn,cmul(xn,xn))-vec2(1.0,0),(3.0*cmul(xn,xn)));\n }\n return vec4(i/45.0,0.5+i*0.05*x.y,0.5+0.25*x.x,1.0);\n}\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = 6.*(fragCoord-iMouse.xy)/iResolution.y-vec2(2.,0.) ;\n fragColor = newton(uv);\n}","name":"Image","description":"","type":"image"}]}