{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define A  0.0\n#define B  (iMouse.z <= 0.0 ? 0.4 : iMouse.y / iResolution.y - 0.5)\n#define C  (sin(iTime*1.5) * 0.5)\n#define D  0.2\n\n#define EDGE   0.005\n#define SMOOTH 0.0025\n\n#define PI 3.14159265359\n\n// F(x,y) = F(x) - y\nfloat F ( in vec2 coords )\n{\n    // convert time from 0-1 to 0-pi/2\n    float T = coords.x * PI * 0.5;\n    \n    // pre-calculate sin and cosine\n    float snt = sin(T);  // sin 0 = 0.  sin pi/2 = 1\n    float cst = cos(T);  // cos 0 = 1.  cos pi/2 = 0\n\n    // interpolating spline, not an exterpolating spline, so should pass through the end control points\n    // but not the middle control points.\n\t// basis - google: graph y = (0.5*cos(x)*(cos(x)-1.0)), y = (0.5*sin(x)*(sin(x)+1.0)), y = (0.5*cos(x)*(cos(x)+1.0)), y = (0.5*sin(x)*(sin(x)-1.0)) from 0 to pi/2\n    // basis sum - google: graph y = (0.5*cos(x)*(cos(x)-1.0)) + (0.5*sin(x)*(sin(x)+1.0)) + (0.5*cos(x)*(cos(x)+1.0)) + (0.5*sin(x)*(sin(x)-1.0)) \n    return\n        D *  (0.5*snt*(snt+1.0)) + \n        B * -(0.5*snt*(snt-1.0)) +        \n        C * -(0.5*cst*(cst-1.0)) +         \n        A *  (0.5*cst*(cst+1.0)) - \n        coords.y;\n}\n\n// gradiant function for finding G for a generic function when you can't\n// get it analytically using partial derivatives.  We could do\n// partial derivatives of F above, but I'm being lazy.\nvec2 Grad( in vec2 coords )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( F(coords+h.xy) - F(coords-h.xy),\n                 F(coords+h.yx) - F(coords-h.yx) ) / (2.0*h.x);\n}\n\n// signed distance function for F(x,y)\nfloat SDF( in vec2 coords )\n{\n    float v = F(coords);\n    vec2  g = Grad(coords);\n    return abs(v)/length(g);\n}\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g); \n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.5));\n    percent.x *= aspectRatio;\n\n    vec3 color = vec3(1.0,1.0,1.0);\n    float dist = SDFCircle(percent, vec2(0.0,A));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,0.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }\n    \n    dist = SDFCircle(percent, vec2(0.33,B));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(0.66,C));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(1.0,D));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,0.0,1.0),vec3(1.0,1.0,1.0),dist);\n    }      \n    \n    dist = SDF(percent);\n    if (dist < EDGE + SMOOTH)\n    {\n        dist = smoothstep(EDGE - SMOOTH,EDGE + SMOOTH,dist);\n        color *= (percent.x >= 0.0 && percent.x <= 1.0) ? vec3(dist) : vec3(0.95);\n    }\n    \n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsjSzy","date":"1413919778","viewed":1096,"name":"1D Cubic Trig Spline","username":"demofox","description":"Trigonometry based \"cubic\" (4 point) spline, as described here:\nhttp://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1997/9705/9705n/9705n.htm\nhttp://www.drdobbs.com/database/implementing-uniform-trigonometric-splin/184410198","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","spline","trig"],"hasliked":0,"parentid":"","parentname":""}}