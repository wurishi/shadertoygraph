{"ver":"0.1","info":{"id":"tdffWX","date":"1589162664","viewed":65,"name":"12 balls","username":"akent4000","description":"12 balls","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Iterations 100\n#define SafeDist 0.01\n#define MaxDist 50.\n#define NumberOfObj 19\n#define CamPos vec3(0, 2.5, -12)\n//#define LightPos vec3(cos(iTime*2.)*10. ,5, sin(iTime*2.)*10.)\n#define LightPos vec3(0., sin(iTime)*2.+5., -10.)\n//#define CamRotate vec3(1, 2, 1);\n\nfloat DistCube(vec3 p, vec4 s)\n{\n    vec3 q = abs(p - s.xyz) - s.w;\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat DistSphere(vec3 p, vec4 sphere/*x pos, y pos, z pos, r*/)\n{\n    return length(p-sphere.xyz)-sphere.w;\n}\n\nfloat DistPlane(vec3 p, float y)\n{\n \treturn p.y - y;   \n}\n\n\nfloat Soft_min(float a, float b, float r)\n{\n    float e = max(r - abs(a - b), 0.0);\n    return min(a, b) - e*e*0.25 / r;\n}\n\nfloat Dist(vec3 p)\n{\n    float Dists[NumberOfObj];\n    Dists[0] = DistPlane(p, 0.);\n    Dists[1] = DistSphere(p, vec4(sin(iTime)*3., sin(iTime*3.)+1., cos(iTime)*3., 1));\n    Dists[2] = DistSphere(p, vec4(sin(iTime+1.0472)*3., sin(iTime*3.+1.0472) +1., cos(iTime+1.0472)*3.  ,1));\n    Dists[3] = DistSphere(p, vec4(sin(iTime+2.0944)*3., sin(iTime*3.+2.0944)+1., cos(iTime+ 2.0944)*3. ,1));\n    Dists[4] = DistSphere(p, vec4(sin(iTime+3.14159)*3.,sin(iTime*3.+3.14159)+1.,cos(iTime+ 3.14159)*3.,1));\n    Dists[5] = DistSphere(p, vec4(sin(iTime+4.18879)*3.,sin(iTime*3.+4.18879)+1.,cos(iTime+ 4.18879)*3.,1));\n    Dists[6] = DistSphere(p, vec4(sin(iTime+5.23599)*3.,sin(iTime*3.+5.23599)+1.,cos(iTime+ 5.23599)*3.,1));\n    Dists[7] = DistSphere(p, vec4(cos(iTime)*3., cos(iTime*3.) + 2., sin(iTime)*3., 1));\n    Dists[8] = DistSphere(p, vec4(cos(iTime+1.0472)*3., cos(iTime*3.+1.0472)+ 3., sin(iTime+1.0472)*3.  ,1));\n    Dists[9] = DistSphere(p, vec4(cos(iTime+2.0944)*3., cos(iTime*3.+2.0944)+ 3., sin(iTime+ 2.0944)*3. ,1));\n    Dists[10] =DistSphere(p, vec4(cos(iTime+3.14159)*3.,cos(iTime*3.+3.14159)+ 3.,sin(iTime+ 3.14159)*3.,1));\n    Dists[11] =DistSphere(p, vec4(cos(iTime+4.18879)*3.,cos(iTime*3.+4.18879)+ 3.,sin(iTime+ 4.18879)*3.,1));\n    Dists[12] =DistSphere(p, vec4(cos(iTime+5.23599)*3.,cos(iTime*3.+5.23599)+ 3.,sin(iTime+ 5.23599)*3.,1));\n    Dists[13] = DistSphere(p, vec4(sin(iTime)*3., sin(iTime*3.), cos(iTime)*3., 1));\n    Dists[14] = DistSphere(p, vec4(sin(iTime+1.0472)*3., sin(iTime*3.+1.0472) +5., cos(iTime+1.0472)*3.  ,1));\n    Dists[15] = DistSphere(p, vec4(sin(iTime+2.0944)*3., sin(iTime*3.+2.0944)+5., cos(iTime+ 2.0944)*3. ,1));\n    Dists[16] = DistSphere(p, vec4(sin(iTime+3.14159)*3.,sin(iTime*3.+3.14159)+5.,cos(iTime+ 3.14159)*3.,1));\n    Dists[17] = DistSphere(p, vec4(sin(iTime+4.18879)*3.,sin(iTime*3.+4.18879)+5.,cos(iTime+ 4.18879)*3.,1));\n    Dists[18] = DistSphere(p, vec4(sin(iTime+5.23599)*3.,sin(iTime*3.+5.23599)+5.,cos(iTime+ 5.23599)*3.,1));\n    \n    float minD = Dists[0];\n    for(int i = 0; i < NumberOfObj - 1; i++)\n    {\n        minD = Soft_min(minD, Dists[i + 1],1.);\n    }\n    return minD;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    for(int i = 0; i < Iterations; i++)\n    {\n        vec3 p = ro + dO*rd;\n        float ds = Dist(p);\n        dO += ds;\n        if(ds < SafeDist || dO > MaxDist)\n        {\n            break;\n        }\n    }\n    return dO;\n    \n}\nvec3 GetNormal(vec3 p) {\n\tfloat d = Dist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        Dist(p-e.xyy),\n        Dist(p-e.yxy),\n        Dist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = LightPos;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SafeDist*2., l);\n    if(d<length(lightPos-p)) dif *= .5;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = CamPos;\n\tvec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro, rd);\n    vec3 p = ro+d*rd;\n    float dif = GetLight(p);\n    col = vec3(dif);\n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}