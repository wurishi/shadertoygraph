{"ver":"0.1","info":{"id":"NlKGDy","date":"1704828984","viewed":72,"name":"Octahedron Projection Mapping","username":"Floris0106","description":"Maps zero to one uv space to spherical coordinates.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["projection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    //vec3 p = uvToSphereLerp(uv);\n    //uv = sphereToUvLerp(p);\n    \n    vec3 p = uvToSphereSlerp(uv);\n    uv = sphereToUvSlerp(p);\n\n    fragColor = vec4(p * 0.5 + 0.5, 1.0);\n    //fragColor = vec4(uv, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float mny(vec2 uv)\n{\n    uv = abs(uv);\n    return uv.x + uv.y;\n}\n\nvec3 uvToSphereSlerp(vec2 uv)\n{\n    uv = uv * 2.0 - 1.0;\n    float y = 1.0 - mny(uv);\n    uv -= max(-y, 0.0) * sign(uv);\n    vec3 p = vec3(uv.x / mny(uv), y, uv.y);\n    p.x = min(p.x, float(p.x == p.x));\n    p.x = mix(1.0 - p.x, 3.0 + p.x, float(p.z < 0.0));\n    vec4 t = sin(vec4(p.xy, 1.0 - p.xy) * 1.5707963);\n    return vec3(t.z * t.w, t.y, t.x * t.w);\n}\nvec2 sphereToUvSlerp(vec3 p)\n{\n    p = normalize(p) * intBitsToFloat(0x3f7fffff);\n    p = vec3(asin(vec2(p.x * inversesqrt(1.0 - p.y * p.y), p.y)) * 0.6366198, sign(p.z));\n    p.x *= 1.0 - abs(p.y);\n    p.z *= 1.0 - mny(p.xy);\n    p.xz += float(p.y < 0.0) * (1.0 - mny(p.xz)) * sign(p.xz);\n    return p.xz * 0.5 + 0.5;\n}\n\nvec3 uvToSphereLerp(vec2 uv)\n{\n    uv = uv * 2.0 - 1.0;\n    float y = 1.0 - mny(uv);\n    uv -= max(-y, 0.0) * sign(uv);\n    return normalize(vec3(uv.x, y, uv.y));\n}\nvec2 sphereToUvLerp(vec3 p)\n{\n    p /= dot(abs(p), vec3(1.0));\n    p.xz += max(-p.y, 0.0) * sign(p.xz);\n    return p.xz * 0.5 + 0.5;\n}","name":"Common","description":"","type":"common"}]}