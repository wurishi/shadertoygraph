{"ver":"0.1","info":{"id":"tdK3Dh","date":"1570116111","viewed":319,"name":"Another KIFS Fractal ","username":"darkeclipz","description":"Yet another fractal from the tutorial of The Art of Code.\n\nhttps://www.youtube.com/watch?v=il_Qg9AqQkE","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define pi 3.1415\n\nvec2 N(float angle) {\n\treturn vec2(sin(angle), cos(angle));    \n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*U-R)/R.y;\n    vec2 mouse = iMouse.xy/R;\n    vec3 col = vec3(0);\n    \n \n    uv /= 1.5;\n    uv.x = abs(uv.x);\n    float angle = (5. / 6.) * pi;\n    uv.y += tan(angle) * 0.5;\n\t\n    vec2 n = N(angle);\n    uv -= 2.* n * max(0., dot(uv - vec2(0.5, 0), n));\n\n    n = N((0.5*sin(iTime/8.)+0.5)*(2. / 3.) * pi);\n    uv.x += 1.5 / 3.;\n    float scale = 1.;\n    for(int i=0; i < 7; i++) {\n        \n\t\tuv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= 0.5;    \n        uv -= 2.0 * n * min(dot(uv, n), 0.0);\n    }\n    \n    \n    float d = length(uv - vec2(clamp(uv.x, -1., 1.), 0));\n    col += smoothstep(1./iResolution.y, .0, d / scale);\n  \tuv /= scale;\n    col += texture(iChannel0, 3. * uv - 0.03 * iTime).rgb;\n\n    // Output to screen\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}