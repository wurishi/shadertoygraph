{"ver":"0.1","info":{"id":"XfyGzG","date":"1712967902","viewed":24,"name":"Animated Rectangle","username":"kpbuhr","description":"A rectangle that moves according to a time-based animation.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shapesanimation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\n    // The actual size of the GL window on the left is 640x360 (half of 1280x720)\n    //\n    \n    // Animation settings\n    float meshWidth  = iResolution.x;  // 1280\n    float meshHeight = iResolution.y;  // 720\n    float animSpeed  = 200.0;          // pixels per second\n    \n    // Desired rectangle shape in screen size (pixels)\n    float rectWidth = 100.0;\n    float rectHeight = 200.0;\n    \n    // Rectangle center is placed on the top of the screen (horizontal center)\n    float rectCenterX = (meshWidth / 2.0);\n    float rectCenterY = meshHeight - (rectHeight / 2.0);\n        \n    // Adjust the y-coordinate based on time\n    rectCenterY -= mod(iTime * animSpeed, meshHeight);\n    \n    // Calculate distance from the fragment to the center of the rectangle\n    float distX = abs(fragCoord.x - rectCenterX);\n    float distY = abs(fragCoord.y - rectCenterY);\n    \n    // initialize color to black\n    vec3 color = vec3(0.0, 0.0, 0.0);\n\n    // Check if fragment is inside the rectangle\n    if (distX <= (rectWidth / 2.0) && distY <= (rectHeight / 2.0)) \n    {\n        // inside the rectangle: color = white\n        color = vec3(1.0, 1.0, 1.0);\n    }\n       \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}