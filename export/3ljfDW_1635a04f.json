{"ver":"0.1","info":{"id":"3ljfDW","date":"1598967576","viewed":194,"name":"Blank Slate-by-P_Malin","username":"jorge2017a1","description":"clase de  P_Malin","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["blankslate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Blank Slate - Work in progress @P_Malin\n// added pan/zoom - hard work stolen from other shaders, thanks @emackey\n \n\nvec2 surfaceSize;\nvec2 surfacePosition;\n\n\nfloat kPI ;\nfloat kHalfPi ;\nfloat kTwoPI ;\n/*\nfloat cos(float v) // workaround for AMD Radeon on OS X\n{ \n\treturn sin(v+kHalfPi);\n}\n*/\n\n//#define ENABLE_MONTE_CARLO\n#define ENABLE_REFLECTIONS\n#define ENABLE_FOG\n#define ENABLE_SPECULAR\n#define ENABLE_POINT_LIGHTT\n        \n#define ENABLE_POINT_LIGHT_FLARE\n\n#ifdef ENABLE_MONTE_CARLO \nvec4 gPixelRandom;\nvec3 gRandomNormal;\n\nvoid CalcPixelRandom()\n{\n\t// Nothing special here, just numbers generated by bashing keyboard\n\tvec4 s1 = sin(time * 3.3422 + gl_FragCoord.xxxx * vec4(324.324234, 563.324234, 657.324234, 764.324234)) * 543.3423;\n\tvec4 s2 = sin(time * 1.3422 + gl_FragCoord.yyyy * vec4(567.324234, 435.324234, 432.324234, 657.324234)) * 654.5423;\n\tgPixelRandom = fract(2142.4 + s1 + s2);\n\tgRandomNormal = normalize( gPixelRandom.xyz - 0.5);\n}\n#endif\n\nstruct C_Ray\n{\n\tvec3 vOrigin;\n\tvec3 vDir;\n};\n \nstruct C_HitInfo\n{\n\tvec3 vPos;\n\tfloat fDistance;\n\tvec3 vObjectId;\n};\n \nstruct C_Material\n{\n\tvec3 cAlbedo;\n\tfloat fR0;\n\tfloat fSmoothness;\n\tvec2 vParam;\n};\n \nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n\tfloat s = sin(fAngle);\n\tfloat c = cos(fAngle);\n\t\n\tvec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n\t\n\treturn vResult;\n}\n \nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n\tfloat s = sin(fAngle);\n\tfloat c = cos(fAngle);\n\t\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n\t\n\treturn vResult;\n}\n     \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\tfloat s = sin(fAngle);\n\tfloat c = cos(fAngle);\n\t\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n\t\n\treturn vResult;\n}\n \nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\n{\n\t//if(v1.x < v2.x) return v1; else return v2;\n\treturn mix(v1, v2, step(v2.x, v1.x));\n}\n \nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\n{\n\treturn mix(v2, v1, step(v2.x,v1.x));\n}\n \nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\n{\n\treturn DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\n}\n \nvec3 DomainRepeatXZGetTile( const in vec3 vPos, const in vec2 vRepeat, out vec2 vTile )\n{\n\tvec3 vResult = vPos;\n\tvec2 vTilePos = (vPos.xz / vRepeat) + 0.5;\n\tvTile = floor(vTilePos + 1000.0);\n\tvResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n\treturn vResult;\n}\n \nvec3 DomainRepeatXZ( const in vec3 vPos, const in vec2 vRepeat )\n{\n\tvec3 vResult = vPos;\n\tvec2 vTilePos = (vPos.xz / vRepeat) + 0.5;\n\tvResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n\treturn vResult;\n}\n \nvec3 DomainRepeatY( const in vec3 vPos, const in float fSize )\n{\n\tvec3 vResult = vPos;\n\tvResult.y = (fract(vPos.y / fSize + 0.5) - 0.5) * fSize;\n\treturn vResult;\n}\n \nvec3 DomainRotateSymmetry( const in vec3 vPos, const in float fSteps )\n{\n\tfloat angle = atan( vPos.x, vPos.z );\n\n\tfloat fScale = fSteps / (kTwoPI);\n\tfloat steppedAngle = (floor(angle * fScale + 0.5)) / fScale;\n\n\tfloat s = sin(-steppedAngle);\n\tfloat c = cos(-steppedAngle);\n\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.z,\n\t\t\t     vPos.y,\n\t\t\t    -s * vPos.x + c * vPos.z);\n\n\treturn vResult;\n}\n \nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n\tvec2 q = vec2(length(p.xy)-r1,p.z);\n\treturn length(q)-r2;\n}\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n\tvec2 q = vec2(length(p.yz)-r1,p.x);\n\treturn length(q)-r2;\n}\nfloat GetDistanceCylinderY(const in vec3 vPos, const in float r)\n{\n\treturn length(vPos.xz) - r;\n}\nfloat GetDistanceBox( const in vec3 vPos, const in vec3 vSize )\n{\n\tvec3 vDist = (abs(vPos) - vSize);\n\treturn max(vDist.x, max(vDist.y, vDist.z));\n}\n \nfloat GetDistanceRoundedBox( const in vec3 vPos, const in vec3 vSize, float fRadius )\n{\n\tvec3 vClosest = max(min(vPos, vSize), -vSize);\n\treturn length(vClosest - vPos) - fRadius;\n}\n \n// result is x=scene distance y=material or object id; zw are material specific parameters (maybe uv co-ordinates)\nvec4 GetDistanceScene( const in vec3 vPos )\n{          \n\tvec4 vResult = vec4(10000.0, -1.0, 0.0, 0.0);\n       \n\tvec3 vSphereDomain = DomainRepeatXZ(vPos, vec2(5.0, 5.0));\n       \n\tvec4 vDistSphere = vec4( length(vSphereDomain) - 1.0, 2.0, vSphereDomain.xy);\n       \n\tvResult = DistCombineUnion(vResult, vDistSphere);\n\t\t       \n\tvec4 vDistFloor = vec4(vPos.y + 1.0, 1.0, vPos.xz);\n\tvResult = DistCombineUnion(vResult, vDistFloor);\n\t\t       \n\treturn vResult;\n}\n\nC_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos )\n{\n\tC_Material mat;\n\t\t       \n\tif(vObjId.x < 1.5)\n\t{\n\t\t// floor\n\t\tmat.fR0 = 0.02;\n\t\tmat.fSmoothness = 0.0;\n\t\tmat.cAlbedo = vec3(0.7, 0.8, 0.3);\n\t}\n\telse\n\tif(vObjId.x < 2.5)\n\t{\n\t\t// sphere\n\t\tmat.fR0 = 0.05;\n\t\tmat.fSmoothness = 0.9;\n\t\tmat.cAlbedo = vec3(0.05, 0.35, 0.75);\n\t}\n\t\n\treturn mat;\n}\nvec3 GetSkyGradient( const in vec3 vDir )\n{\n\tfloat fBlend = vDir.y * 0.5 + 0.5;\n\treturn mix(vec3(0.0, 0.0, 0.0), vec3(0.4, 0.9, 1.0), fBlend);\n}\nvec3 GetLightPos()\n{\n\tvec3 vLightPos = vec3(0.0, 1.0, 3.0);\n\t#ifdef ENABLE_MONTE_CARLO        \n\tvLightPos += gRandomNormal * 0.2;\n\t#endif\n\treturn vLightPos;\n}\nvec3 GetLightCol()\n{\n\treturn vec3(32.0, 6.0, 1.0) * 10.0;\n}\n \nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n\treturn GetSkyGradient(vNormal);\n}\n\n#define kFogDensity 0.0025\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\n{\n\t#ifdef ENABLE_FOG\n\t// fog\n\tfloat fFogAmount = exp(intersection.fDistance * -kFogDensity);\n\tvec3 cFog = GetSkyGradient(ray.vDir);\n\tcol = mix(cFog, col, fFogAmount);\n\t#endif\n       \n\t// glare from light (a bit hacky - use length of closest approach from ray to light)\n\t#ifdef ENABLE_POINT_LIGHT_FLARE\n\tvec3 vToLight = GetLightPos() - ray.vOrigin;\n\tfloat fDot = dot(vToLight, ray.vDir);\n\tfDot = clamp(fDot, 0.0, intersection.fDistance);\n       \n\tvec3 vClosestPoint = ray.vOrigin + ray.vDir * fDot;\n\tfloat fDist = length(vClosestPoint - GetLightPos());\n\tcol += GetLightCol() * 0.01/ (fDist * fDist);\n\t#endif     \n}\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n\t// tetrahedron normal\n\tfloat fDelta = 0.025;\n\n\tvec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n\tvec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n\tvec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n\tvec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n\tfloat f1 = GetDistanceScene( vPos + vOffset1 ).x;\n\tfloat f2 = GetDistanceScene( vPos + vOffset2 ).x;\n\tfloat f3 = GetDistanceScene( vPos + vOffset3 ).x;\n\tfloat f4 = GetDistanceScene( vPos + vOffset4 ).x;\n\n\tvec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n\treturn normalize( vNormal );\n}\n\n#define kRaymarchEpsilon 0.01\n#define kRaymarchMatIter 256\n#define kRaymarchStartDistance 0.1\n// This is an excellent resource on ray marching -> https://iquilezles.org/articles/distfunctions\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\n{         \n\tresult.fDistance = kRaymarchStartDistance;\n\tresult.vObjectId.x = 0.0;\n\t\t\t\t\t\t\t   \n\tfor(int i=0;i<=kRaymarchMatIter;i++)               \n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tvec4 vSceneDist = GetDistanceScene( result.vPos );\n\t\tresult.vObjectId = vSceneDist.yzw;\n\n\t\t// abs allows backward stepping - should only be necessary for non uniform distance functions\n\t\tif((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\n\t\t{\n\t\t\tbreak;\n\t\t}                         \n\n\t\tresult.fDistance = result.fDistance + vSceneDist.x;     \n\t}\n       \n       \n\tif(result.fDistance >= fMaxDist)\n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tresult.vObjectId.x = 0.0;\n\t\tresult.fDistance = 1000.0;\n\t}\n}\n\nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\n{\n\tC_Ray shadowRay;\n\tshadowRay.vDir = vLightDir;\n\tshadowRay.vOrigin = vPos;\n\n\tC_HitInfo shadowIntersect;\n\tRaymarch(shadowRay, shadowIntersect, fLightDistance, 32);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \n\treturn step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );          \n}\n\n// http://en.wikipedia.org/wiki/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n\tfloat fDot = dot(vNormal, -vView);\n\tfDot = min(max((1.0 - fDot), 0.0), 1.0);\n\tfloat fDot2 = fDot * fDot;\n\tfloat fDot5 = fDot2 * fDot2 * fDot;\n\treturn fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\n}\n\nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\n{\n\treturn max(0.0, dot(vLightDir, vNormal));\n}\n\nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\n{           \n\tvec3 vHalf = normalize(vLightDir - ray.vDir);\n\tfloat fNdotH = max(0.0, dot(vHalf, vNormal));\n\n\tfloat fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\n\tfloat fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n\n\treturn pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n\n// use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\n{\n\tvec3 vPos = intersection.vPos;\n       \n\tfloat fAmbientOcclusion = 1.0;\n       \n\tfloat fDist = 0.0;\n\tfor(int i=0; i<=5; i++)\n\t{\n\t\tfDist += 0.1;\n\n\t\tvec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n\n\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 / fDist );                                   \n\t}\n       \n\treturn fAmbientOcclusion;\n}\n \nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\n{\n\tvec3 cScene ;\n\t\n\tvec3 vSpecularReflection = vec3(0.0);\n\tvec3 vDiffuseReflection = vec3(0.0);\n\t\n\tfloat fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\n\tvec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\n\t\n\tvDiffuseReflection += vAmbientLight;\n\t\n\tvSpecularReflection += cReflection * fAmbientOcclusion;\n\t\n    /*\n\t#ifdef ENABLE_POINT_LIGHTT\n\t\tvec3 vLightPos = GetLightPos();\n\t\tvec3 vToLight = vLightPos - intersection.vPos;\n\t\tvec3 vLightDir = normalize(vToLight);\n\t\tfloat fLightDistance = length(vToLight);\n\t\n\t\tfloat fAttenuation = 1.0 / (fLightDistance * fLightDistance);\n\t\n\t\tfloat fShadowBias = 0.1;             \n\t\tfloat fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, fLightDistance - fShadowBias );\n\t\tvec3 vIncidentLight = GetLightCol() * fShadowFactor * fAttenuation;\n\t\n\t\tvDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                                 \n\t\tvSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\n\t#endif ENABLE_POINT_LIGHTT\n\t*/\n    \n    \n\tvDiffuseReflection *= material.cAlbedo;              \n\t\n\t#ifdef ENABLE_SPECULAR\n\tfloat fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\n\tcScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\n\t#else\n\tcScene = vDiffuseReflection;\n\t#endif\n\t\n\treturn cScene;\n}\n\nvec3 GetSceneColourSimple( const in C_Ray ray )\n{\n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 16.0, 32);\n\t\t\t\t\t    \n\tvec3 cScene;\n\n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n\n\t\t// use sky gradient instead of reflection\n\t\tvec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\n\n\t\t// apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n\n\tApplyAtmosphere(cScene, ray, intersection);\n\n\treturn cScene;\n}\n\nvec3 GetSceneColour( const in C_Ray ray )\n{                                                           \n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 30.0, 256);\n\t\t\t    \n\tvec3 cScene;\n       \n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n\n\t\t#ifdef ENABLE_MONTE_CARLO\n\t\tvNormal = normalize(vNormal + gRandomNormal / (5.0 + material.fSmoothness * 200.0));\n\t\t#endif\n\n\t\tvec3 cReflection;\n\t\t#ifdef ENABLE_REFLECTIONS    \n\t\t{\n\t\t\t// get colour from reflected ray\n\t\t\tfloat fSepration = 0.05;\n\t\t\tC_Ray reflectRay;\n\t\t\treflectRay.vDir = reflect(ray.vDir, vNormal);\n\t\t\treflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      \n\t\t\tcReflection = GetSceneColourSimple(reflectRay);                                                                         \n\t\t}\n\t\t#else\n\t\tcReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                               \n\t\t#endif\n\t\t// apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n       \n\tApplyAtmosphere(cScene, ray, intersection);\n       \n\treturn cScene;\n}\n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, out C_Ray ray)\n{\n\tvec2 vPixelCoord = gl_FragCoord.xy;\n\t#ifdef ENABLE_MONTE_CARLO\n\tvPixelCoord += gPixelRandom.zw;\n\t#endif\n\tvec2 vUV = ( vPixelCoord / iResolution.xy );\n\tvec2 vViewCoord = vUV * 2.0 - 1.0;\n\n\tvViewCoord *= 0.75;\n       \n\tfloat fRatio = iResolution.x / iResolution.y;\n\n\tvViewCoord.y /= fRatio;                           \n\n\tray.vOrigin = vPos;\n\n\tvec3 vRight = normalize(cross(vForwards, vWorldUp));\n\tvec3 vUp = cross(vRight, vForwards);\n\t    \n\tray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);        \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, ray);\n}\n\nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n\treturn vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n\nvec3 Gamma( const in vec3 cCol )\n{\n\treturn cCol * cCol;\n}\n\nvec3 InvGamma( const in vec3 cCol )\n{\n\treturn sqrt(cCol);\n}\n\n\nvec3 Tonemap( const in vec3 cCol )\n{\n\t// simple Reinhard tonemapping operator     \n\tvec3 vResult = cCol / (1.0 + cCol);\n\n\treturn Gamma(vResult);\n}\n\nvec3 InvTonemap( const in vec3 cCol )\n{\n\tvec3 vResult = cCol;\n\tvResult = clamp(vResult, 0.01, 0.99);\n\tvResult = InvGamma(vResult);\n\treturn - (vResult / (vResult - 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n kPI = acos(0.0);\n kHalfPi = asin(1.0);\n kTwoPI = kPI * 2.0;\n\n    \n    \n    #ifdef ENABLE_MONTE_CARLO             \n\tCalcPixelRandom();\n\t#endif\n       \n\tC_Ray ray;\n       \n\tconst float fCamreaInitialHeading = 2.5;\n\tconst float fCamreaInitialElevation = 0.4;\n\tconst float fCamreaInitialDist = 7.0;\n\tconst float fCameraHeight = 0.9;\n\tconst float fOrbitSpeed = 1.0;\n\t\n\t// This magic stolen from other 3d pan/zoom examples\n\tfloat fZoom = surfaceSize.y * 0.5 + 0.4;\n\t\n\tvec2 vCenterPosition = (0.5 - ( fragCoord.xy / iResolution.xy )) * surfaceSize + surfacePosition;\n\tfloat fHeading = vCenterPosition.x * fOrbitSpeed + fCamreaInitialHeading;\n\tfloat fElevation = (vCenterPosition.y * fOrbitSpeed + fCamreaInitialElevation);\n\t\n\tvec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCamreaInitialDist * fZoom;\n\t\n\t//vCameraPos += vec3(iMouse.x*5., iMouse.y*5., 0.0);\n    vCameraPos += vec3(0.5*5.+3.0*cos(iTime), 1.0*5.0+4.0*sin(iTime), 0.0);\n\t\n\tvCameraPos += vec3(0.0, -fCameraHeight, 0.0);\n\t#ifdef ENABLE_MONTE_CARLO             \n\tfloat fDepthOfField = 0.025;\n\tvCameraPos += gRandomNormal * fDepthOfField;\n\t#endif\n       \n\tGetCameraRayLookat( vCameraPos, vec3(0.0, 0.0, 0.0), ray);\n\t//GetCameraRayLookat(vec3(0.0, 0.0, -5.0), vec3(0.0, 0.0, 0.0), ray);\n       \n\tvec3 cScene = GetSceneColour( ray );   \n       \n\tfloat fExposure = 2.5;\n\tcScene = cScene * fExposure;\n       \n\t#ifdef ENABLE_MONTE_CARLO                              \n\tvec3 cPrev = texture2D(backbuffer, gl_FragCoord.xy / resolution).xyz;\n\t// add noise to pixel value (helps values converge)\n\tcPrev += (gPixelRandom.xyz - 0.5) * (1.0 / 255.0);\n\tcPrev = InvTonemap(cPrev);\n\t// converge speed\n\tfloat fBlend = 0.1;\n\tvec3 cFinal = mix(cPrev, cScene, fBlend);\n\t#else\n\tvec3 cFinal = cScene;\n\t#endif\n\t\n\tcFinal = Tonemap(cFinal);\n       \t\n\tfloat fAlpha = 1.0;\n       \n\tfragColor = vec4( cFinal, fAlpha );\n}\n\n\n","name":"Image","description":"","type":"image"}]}