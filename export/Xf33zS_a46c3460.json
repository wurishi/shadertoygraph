{"ver":"0.1","info":{"id":"Xf33zS","date":"1711809192","viewed":36,"name":"OldPCVideoModes","username":"berke","description":"Convert image to legacy video mode palettes, including \"standard\" VGA16 palette.\nHold left mouse button and drag left-right to adjust noise amplitude.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["video","quantization","cga","vga","vga16"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float gamma;\n    uint k = 0U;\n    bool mouse = iMouse.z > 0.0;\n    if (mouse) {\n        gamma = iMouse.x / iResolution.x;\n    } else {\n        gamma = DEFAULT_NOISE;\n    }\n    if (mouse != STATIC_NOISE) {\n        k = uint(iFrame);\n    }\n    vec2 p = NS*floor(fragCoord/NS);\n    uint i = uint(p.y);\n    uint j = uint(p.x);\n    vec3 n = 2.0*noise(i,j,k)-1.0;\n    vec2 fc = p/iResolution.xy;\n    vec3 c_in = texture(iChannel0,fc).rgb;\n    vec3 c = c_in + gamma*n;\n    vec3 c_out = find_best_color(c);\n    fragColor = vec4(c_out,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define VGA16 0\n#define CGA16 1\n#define CGA4_PAL0 2\n#define CGA4_PAL1 3\n\n// Configuration\n// =============\n\n// Spatial downsampling\n// --------------------\n\n// Original resolution\n//#define NS 1.0\n\n// Half resolution\n//#define NS 2.0\n\n// Quarter resolution\n#define NS 4.0\n\n// Color palette\n// -------------\n\n#define SELECTED_PALETTE VGA16\n//#define SELECTED_PALETTE CGA16\n//#define SELECTED_PALETTE CGA4_PAL0\n//#define SELECTED_PALETTE CGA4_PAL1\n\n// Static noise\n// ------------\n\n#define STATIC_NOISE false\n//#define STATIC_NOISE true\n\n// Default noise amplitude\n// -----------------------\n\n#define DEFAULT_NOISE 0.3\n\n// Color weights\n// -------------\n\n#define COLOR_WEIGHTS vec3(0.5,1.0,0.2)\n\n// ====================\n// End of configuration\n\n#if (SELECTED_PALETTE == VGA16)\n#define NCOL 16\n\nconst vec3 PALETTE[NCOL] = vec3[NCOL] (\n  vec3(0,0,0),\n  vec3(0.5,0,0),\n  vec3(0,0.5,0),\n  vec3(0.5,0.5,0),\n  vec3(0,0,0.5),\n  vec3(0.5,0,0.5),\n  vec3(0,0.5,0.5),\n  vec3(0.75,0.75,0.75),\n  vec3(0.5,0.5,0.5),\n  vec3(1,0,0),\n  vec3(0,1,0),\n  vec3(1,1,0),\n  vec3(0,0,1),\n  vec3(1,0,1),\n  vec3(0,1,1),\n  vec3(1,1,1)\n);\n#endif\n\n#if (SELECTED_PALETTE == CGA4_PAL0)\n#define NCOL 4\n\nconst vec3 PALETTE[NCOL] = vec3[NCOL] (\n  vec3(0,0,0),\n  vec3(0,0.67,0.67),\n  vec3(0.67,0,0.67),\n  vec3(1,1,1)\n);\n#endif\n\n#if (SELECTED_PALETTE == CGA4_PAL1)\n#define NCOL 4\n\nconst vec3 PALETTE[NCOL] = vec3[NCOL] (\n  vec3(0,0,0),\n  vec3(0.5,0,0),\n  vec3(0,0.5,0),\n  vec3(0.67,0.33,0)\n);\n#endif\n\n\n#if (SELECTED_PALETTE == CGA16)\n#define NCOL 16\n\nconst vec3 PALETTE[NCOL] = vec3[NCOL] (\n  vec3(0,0,0),\n  vec3(0,0,0.67),\n  vec3(0,0.67,0),\n  vec3(0,0.67,0.67),\n  vec3(0.67,0,0),\n  vec3(0.67,0,0.67),\n  vec3(0.67,0.33,0),\n  vec3(0.67,0.67,0.67),\n  vec3(0.33,0.33,0.33),\n  vec3(0.33,0.33,1),\n  vec3(0.33,1,0.33),\n  vec3(0.33,1,1),\n  vec3(1,0.33,0.33),\n  vec3(1,0.33,1),\n  vec3(1,1,0.33),\n  vec3(1,1,1)\n);\n#endif\n\n#define ROT(x,n) (((x) >> (n)) | ((x) << (32 - (n))))\n\nfloat rnd(uint x,uint y,uint z) {\n  for (int i = 0; i < 3; i ++) {\n    x ^= 0xdeadbeefU + (ROT(ROT(x,13) + y,7) ^ z);\n    y += 0x0badcafeU ^ (ROT(ROT(y,5) - z,9) + x);\n    z -= 0xfeedfaceU ^ (ROT(ROT(z,22) - x,11) + 15U);\n  }\n  x += y + z;\n  return float((x >> 8) ^ (x & 255U)) / 16777215.0;\n}\n\nvec3 quantRGB12(vec3 c,vec3 n) {\n    return floor(c*16.0 + n)/16.0;\n}\n\nvec3 noise(uint x,uint y,uint z) {\n    float n1 = rnd(x ^ 0x12345678U,y,z);\n    float n2 = rnd(x ^ 0xfedcba98U,y,z);\n    float n3 = rnd(x ^ 0x55aa33ccU,y,z);\n    return vec3(n1,n2,n3);\n}\n\nfloat metric(vec3 c1,vec3 c2) {\n  vec3 delta = c1 - c2;\n  vec3 w = COLOR_WEIGHTS;\n  return length(w * delta);\n}\n\nvec3 find_best_color(vec3 c) {\n    float d_best = -1.0;\n    vec3 p;\n    float d;\n    vec3 best;\n    for (int i = 0; i < NCOL; i ++) {\n      p = PALETTE[i];\n      d = metric(c,p);\n      if (d_best < 0.0 || d < d_best) {\n        best = p;\n        d_best = d;\n      }\n    }\n    return best;\n}","name":"Common","description":"","type":"common"}]}