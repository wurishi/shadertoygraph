{"ver":"0.1","info":{"id":"NtdcWX","date":"1660706670","viewed":151,"name":"my first ray marcher","username":"MrHAX00","description":"I tried making a simple ray marcher with material support etc. tho i couldn't quite figure out how to do bloom without destroying the frame rate.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","sdf","shadows","materials"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 Got = texture(iChannel1, fragCoord / iResolution.xy);\n    Got.xyz *= 1. - Mix;\n    fragColor = vec4(clamp(Got.xyz, 0., 1.) * Mix + clamp(texture(iChannel0, fragCoord / iResolution.xy).xyz, 0., 1.), Got.w);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.14159\n\n#define MaxDistance 400.\n#define MinDistance .005\n\n//SDF functions\nfloat GroundSDF(vec3 Position)\n{\n    return Position.y;\n}\n\nfloat SphereSDF(vec3 Position)\n{\n    return length(Position - SpherePosition) - SphereRarius;\n}\n\nfloat LampSDF(vec3 Position)\n{\n    return length(Position - LightSource) - .1;\n}\n\n//March\nfloat GetDistance(vec3 Position)\n{\n    return min(min(GroundSDF(Position), SphereSDF(Position)), LampSDF(Position));\n}\n\nfloat March(vec3 Origin, vec3 Direction, float DistanceLimit)\n{\n    float Distance = GetDistance(Origin);\n    for (int i = 1; true; i++)\n    {\n        float Delta = GetDistance(Origin + Direction * Distance);\n        \n        Distance += Delta;\n        if (Delta < MinDistance || Distance > DistanceLimit) break;\n    }\n    \n    return clamp(Distance, 0., DistanceLimit);\n}\n\n//Normals\nvec3 SphereNormal(vec3 Hit)\n{\n    return normalize(Hit - SpherePosition);\n}\n\nvec3 GroundNormal(vec3 Hit)\n{\n    return vec3(0., 1., 0.);\n}\n\n//Apply materials\nvec3 GetColor(vec3 Hit, vec3 Direction)\n{\n    vec3 BaseColor;\n    vec3 Normal;\n    \n    float Distance = GetDistance(Hit);\n    \n    if (GroundSDF(Hit) == Distance)\n    {\n        BaseColor = vec3(mod(floor(Hit.x) + floor(Hit.z), 2.)) * .2 + .8;\n\n        float Length = length(LightSource - Hit);\n        vec3 Direction = normalize(LightSource - Hit);\n\n        float Shadow = March(Hit + Direction * MinDistance, Direction, Length) / Length;\n\n        BaseColor *= Shadow * clamp(dot(GroundNormal(Hit), normalize(LightSource - Hit)), 0., 1.);\n    } else if (SphereSDF(Hit) == Distance) {\n        BaseColor = vec3(1., .3, .3) * clamp(dot(SphereNormal(Hit), normalize(LightSource - Hit)), 0., 1.);\n    } else {\n        //Values greater than one will glow more\n        BaseColor = vec3(20.);\n    }\n    \n    return BaseColor;\n}\n\n//Output to screen\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n    \n    vec3 RayOrigin = vec3(0., 2., 0.);\n    vec3 RayDirection = normalize(vec3(uv, 1.));\n\n    float Depth = March(RayOrigin, RayDirection, MaxDistance);\n    \n    vec3 Hit = RayOrigin + RayDirection * Depth;\n    \n    vec3 col = GetColor(Hit, RayDirection);\n    \n    fragColor = vec4(col, Depth);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 Sum;\n    \n    float DivideBy = 0.;\n    float Max = sqrt(float(Bloom * Bloom + Bloom * Bloom));\n    for (int y = -Bloom; y <= Bloom; y++)\n    {\n        for (int x = -Bloom; x <= Bloom; x++)\n        {\n            \n            float Distance = Max - length(vec2(x, y));\n            DivideBy += Distance;\n            Sum += texture(iChannel0, (fragCoord + vec2(x, y)) / iResolution.xy).xyz * Distance;\n        }\n    }\n    \n    fragColor = vec4(pow(Sum / DivideBy, vec3(Threshold)) * Multiplier, texture(iChannel0, fragCoord / iResolution.xy).w);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Bloom\n#define Bloom 6\n#define Threshold 4.\n#define Mix .2\n#define Multiplier 3.\n\n//Spheres\n#define SphereRarius .5\n#define SpherePosition vec3(cos(iTime + pi * .5) * (cos(iTime * .3) + 1.2), 2. + cos(iTime * 3.) * .5, cos(iTime) * (cos(iTime * .3) + 1.2) + 6.)\n\n#define LightSource vec3(0., 3. + cos(iTime * pi * .5), 6.)","name":"Common","description":"","type":"common"}]}