{"ver":"0.1","info":{"id":"ltj3D3","date":"1433258283","viewed":1254,"name":"multicolored 2D metaballs","username":"the23","description":"further modification of https://www.shadertoy.com/view/4lSGDc . Used iq's excellent cosine color gradient article (www.iquilezles.org/articles/palettes/palettes.htm).","likes":42,"published":1,"flags":0,"usePreview":0,"tags":["2d","metaballs","glow","zen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// For a square look of the \"balls\"\n#define USE_CHEBYSHEV_DISTANCE 0\n\n// Fun effect, to clamp the ball positions to a grid\n#define BALLS_IN_GRID 0\n#define BALL_GRID_SIZE 150.3\n// if you use the grid, I'd also increase the speed - maybe 30-50 or so...\n#define BALL_SPEED 3.3\n\nconst float speed = BALL_SPEED;\n\nconst float radius = 2.7;\nconst float thresholdFactor = 0.008;\nconst int ballCount = 23;\n\nconst vec3 backgroundColor = vec3(0.0);\nconst vec3 metaballColor = vec3(1.0, 0.5, 0.0);\n\nconst float zoomFactor = 2.5;\nconst float orbitRadius = 0.3;\n\nfloat dstMetaball(vec2 pos, vec2 center, float radius)\n{\n  vec2 diff = pos - center;\n  \n#if USE_CHEBYSHEV_DISTANCE\n  diff = abs(diff);\n  diff = vec2(max(diff.x, diff.y));\n#endif\n\n  return radius / dot(diff, diff);\n}\n\nvec3 colorByDistance(float dst, float falloff, vec3 color, vec3 oldColor)\n{\n  return mix(color, oldColor, smoothstep(0.0, falloff, dst));\n}\n\n// see: iquilezles.org/articles/palettes\nvec3 colorIQ(float i)\n{\n  vec3 a = vec3(0.5);\n  vec3 b = vec3(0.5);\n  vec3 c = vec3(1.0);\n  vec3 d = vec3(0.0, 0.1, 0.2);\n  return (a + b * cos(((c * i + d) * 6.2831852)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // create centered local positions\n  float aspect = iResolution.x / iResolution.y;\n  vec2 pos = (fragCoord.xy / iResolution.xy) * vec2(aspect, 1.0);\n  pos -= clamp(vec2(aspect, 1.0 / aspect) - 1.0, 0.0, 1.0)  * 0.5;\n  pos = pos * 2.0 - 1.0;\n  pos /= zoomFactor;\n    \n  vec3 color = backgroundColor;\n  float time = float(iTime);\n    \n  float dst = dstMetaball(pos, vec2(0.0), radius);\n  color += colorIQ(time * speed * 0.01) * dst * thresholdFactor * (sin(radians(time * (speed + 5.3))) * 0.5 + 0.5) * 30.0;\n\n  // init the vars for the other balls\n  vec2 ballPos = vec2(orbitRadius, 0.0);\n  float angle = radians(time * speed);\n  mat2 matRotate = mat2(cos(angle), -sin(angle),\n                        sin(angle),  cos(angle));\n\n  // iterate over the balls, sum up the distance, rotate the ball position\n  for (int i=0; i < ballCount; ++i)\n  {\n    ballPos = matRotate * ballPos;\n#if BALLS_IN_GRID\n    ballPos = round(ballPos * BALL_GRID_SIZE) / BALL_GRID_SIZE;\n#endif\n    dst = dstMetaball(pos, ballPos, radius);\n    color += colorIQ(((float(i) + 1.0) / float(ballCount)) + time * speed * 0.01) * dst * thresholdFactor;\n    //color += getColor(tex.x) * dst * thresholdFactor;\n  }\n  color /= float(ballCount) + 1.0;\n\n  fragColor = vec4(pow(color, vec3(0.5)) - 0.5, 1.0);\n}","name":"Image","description":"","type":"image"}]}