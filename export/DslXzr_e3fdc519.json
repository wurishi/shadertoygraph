{"ver":"0.1","info":{"id":"DslXzr","date":"1668448616","viewed":159,"name":"Cosmic Clock 4","username":"ChunderFPV","description":"Similar to Coral Clock: https://www.shadertoy.com/view/cdX3Df but with a more cosmic feel.  Mouse y to zoom, mouse x to change radial blur.  M key toggle to save mouse position.","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["clock","spiral","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// clock modified from https://www.shadertoy.com/view/stlSzM\n#define bcd(i) (i/10*6+i)\n#define digit(uv,i) texture(iChannel1, (uv)/16.0+vec2(float(i)/16.0, 0.75)).x\n#define draw_digit(c,uv,i) if(abs(uv).x < 0.5 && abs(uv).y < 0.5) c += (1.0-c)*digit(uv+0.5, i)\n#define draw_bcd(c,uv,i,b) if (b) draw_digit(c, uv,(i&0xf0)>>4); draw_digit(c, uv-vec2(.5,0),(i&0xf))\n\nfloat draw_time(vec2 uv, vec2 xy, float s, float t)\n{\n    uv -= xy; // position\n    uv /= s; // size\n    float c = 0.0;\n    int hour = int(mod(t/3600.0, 12.0));\n    if (hour == 0) hour = 12;\n    int minute = int(mod(t/60.0, 60.0));\n    uv.x += 0.85;\n    draw_bcd(c, uv, bcd(hour), (hour > 9)); // 1st & 3rd digits\n    uv.x -= 0.85;\n    draw_digit(c, uv, 10); // colon\n    uv.x -= 0.35;\n    draw_bcd(c, uv, bcd(minute), true); // 2nd & 4th digits\n    return c;\n}\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec3 c = texture(iChannel0, XY/R).rgb;\n    vec3 d = vec3(draw_time(SC, vec2(0.0, 0.45), 0.1, T))*vec3(0.5, 0.5, 0.8); // digital clock\n    d *= texture(iChannel2, XY/R.y+vec2(CL.z, 0.0), 3.0).rgb*1.5; // digit texture\n    c += d;\n    \n    RGBA = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    float t = mod(T/3600.0, 12.0); // value from 12 hour cycle\n    if (t < 1.0) t += 12.0; // change 0 to 12\n    //vec2 mc = (M.xy-0.5*R)/R.y*2.0; // mouse coords\n    vec2 mc = M.xy*2.0/R-1.0;\n    float key_m = texture(iChannel2, vec2( (float(77)+0.5)/256.0, 1.0) ).x; // key m toggle\n    float z = (M.z > 0.0 || key_m > 0.0) ? pow(1.0-abs(mc.y), 3.0*sign(mc.y)): SCALE; // zoom\n    float e = (M.z > 0.0 || key_m > 0.0) ? -mc.y: 1.0; // exponent\n    float tf = (M.z > 0.0 || key_m > 0.0) ? abs(mc.x): 1.0; // texture fade\n    vec2 sc = SC*2.0*z; // screen coords\n    vec2 tc = SC*2.0; // texture coords\n    float r = length(tc); // non-zoomed radius\n    \n    float blur = -0.005; // radial blur\n    if (M.z > 0.0 || key_m > 0.0) blur *= mc.x;\n    vec3 col = vec3((sin(t*TAU)+99.0)/101.0, .97, (cos(t*TAU)+99.0)/101.0);\n    vec3 c = texture(iChannel0, mix(XY/R, vec2(0.5), blur), AA+r/2.0).rgb*col; // blur\n    \n    float px = length(fwidth(sc))/1.414; // pixel radius\n    float sr = (TAU/4.0); // starting rotation\n    float ro = sqrt(t*pow(z, 1.0/e)*2.0*TAU*TAU);\n    c += fs(sc, e, t, px*3.0, ro+sr)*H(r, 4.0); // fraction spiral\n    \n    float ring = pow(min(r, 1.0/r), 2.0);\n    ro = t*pow(z, 1.0/e)*TAU; // counter rotation\n    c += ds(sc, e, t, px*2.0, ro+sr)*ring*0.5*H(r*t, 2.0); // denominator spiral\n    \n    // background texture\n    float sphere = sqrt(abs(1.0-dot(tc, tc)));\n    if (r > 1.0) t = -t;\n    vec3 tex = texture(iChannel1, tc/sphere+vec2(t), r*AA).rgb*sphere*sphere*tf;\n    c += vec3(0.3, 0.1, 0.7)*tex*.01/sqrt(r); // apply texture\n    \n    // dark border around screen edges to fix negative radial blur issue\n    vec2 b = abs(fract(XY/R+0.5)-0.5)/fwidth(XY/R)/10.0; // black border\n    c = min(c, min(b.x, b.y)*0.2); // blend with border\n    \n    RGBA = vec4(c, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SCALE 750.0\n#define R iResolution.xy\n#define M iMouse\n#define T iDate.w\n#define CL mod(T/vec3(43200.0, 3600.0, 60.0), 1.0)\n#define SC ((XY-0.5*R)/R.y)\n#define CS(a) vec2(cos(a), sin(a))\n#define TAU 6.2831853071795865\n#define AA 0.25\n#define HUE(v) (.6+.6*cos(6.3*(v)+vec3(0,23,21))) // https://www.shadertoy.com/view/ll2cDc\n#define H(r,s) (HUE(r)+(s-1.0))/s\n\n// denominator spiral (1/n) for numerator\n// screen coords, exponent, value, width, rotation\nfloat ds(vec2 sc, float e, float n, float w, float ro)\n{\n    float t = TAU*n;\n    float r = round(exp(log(length(sc))/e));\n    vec2 xy = sc-CS(ro-t*r)*pow(r, e);\n    return max(0.0, 1.0-length(xy/w));\n}\n\n// fraction spiral\n// screen coords, exponent, value, width, rotation\nfloat fs(vec2 sc, float e, float n, float w, float ro)\n{\n    float t = TAU*sqrt(abs(n))*sign(n);\n    float r = round(exp(log(length(sc))/e));\n    vec2 xy = sc-CS(ro-t*sqrt(r*2.0))*pow(r, e);\n    return max(0.0, 1.0-length(xy/w));\n}\n","name":"Common","description":"","type":"common"}]}