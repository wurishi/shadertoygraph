{"ver":"0.1","info":{"id":"fddfWH","date":"1656428808","viewed":64,"name":"itmevova!","username":"shadersgoodopgl","description":"vlasddsada","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["vladimir"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    bool ellipse(vec2 p, vec2 c, float r, float a, float b)\n    {\n        float scaleY = iResolution.y / iResolution.x;\n         float x = (p.x - c.x),\n               y = (p.y - c.y);\n         return  (x * x)/(a * a) +  (y * y)/(b * b) * (scaleY * scaleY) < r*r; \n    }\n\n                    float calculate(vec2 a, vec2 b, vec2 p)\n                    {\n                        return (p.x - a.x) * (b.y - a.y) - (p.y-a.y) * (b.x - a.x);\n                    }\n\n                bool isOnOneSide(vec2 a, vec2 b, vec2 c, vec2 p) \n                {\n                    return calculate(a, b, c) * calculate(a, b, p) >= 0.;\n                }\n        bool triangle(vec2 a, vec2 b, vec2 c, vec2 p)\n        {\n            return  isOnOneSide(a, b, c, p) && isOnOneSide(b, c, a, p) && isOnOneSide(c, a, b, p);\n        }\n\n    struct Ellipse \n    {\n        vec2 center;\n        float radius;\n        vec3 color;\n        float a;\n        float b;\n    };\n    struct Triangle\n    {\n        vec2 a;\n        vec2 b;\n        vec2 c;\n        vec3 color;\n    };\n        Ellipse el[] = Ellipse[] \n        (\n            Ellipse(vec2(0.0, 0.0), 0.2, vec3(0., 0., 0.), 0.8, 1.),\n            Ellipse(vec2(-0.04, 0.06), 0.2, vec3(0., 0., 0.), 1., 0.87),\n            Ellipse(vec2(0.15, 0.0), 0.06, vec3(0., 0., 0.), 1., .9),\n            Ellipse(vec2(0.035, -0.21), 0.1, vec3(0., 0., 0.), 1., 0.6),\n            Ellipse(vec2(0.191, 0.09), 0.03, vec3(1., 1., 1.), 1., 1.0),\n            Ellipse(vec2(0.245, -0.126), 0.1, vec3(1., 1., 1.), 1., 0.4),\n            Ellipse(vec2(0.035, -0.4), 0.1, vec3(1., 1., 1.), 1., 0.38),\n            Ellipse(vec2(-0.145, -0.27), 0.04, vec3(1., 1., 1.), 1., 0.9)\n        );\n        Triangle tria[] = Triangle[]\n        (\n            Triangle(vec2(0.16, 0.08), vec2(0.21, 0.08), vec2(0.21, -0.08), vec3(1., 1., 1.)),\n            Triangle(vec2(-0.09, -0.2), vec2(0.05, -0.3), vec2(-0.16, -0.5), vec3(0., 0., 0.)),\n            Triangle(vec2(0.05, -0.5), vec2(0.05, -0.3), vec2(-0.16, -0.5), vec3(0., 0., 0.)),\n            Triangle(vec2(0.05, -0.5), vec2(0.05, -0.3), vec2(.16, -0.29), vec3(1., 1., 1.)),\n            Triangle(vec2(-0.21, -0.15), vec2(-0.3, -0.15), vec2(-0.22, 0.3), vec3(1., 1., 1.)),\n            Triangle(vec2(-0.22, 0.6), vec2(-0.22, 0.27), vec2(0.16, 0.27), vec3(1., 1., 1.))\n        );\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 crd = fragCoord/iResolution.xy;\n     crd = crd - vec2(0.5);\n      float x = crd.x;\n      float y = crd.y;\n    fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n       for(int i = 0; i < el.length(); i++)\n       {\n           if(ellipse(el[i].center, vec2(x, y), el[i].radius, el[i].a, el[i].b))\n               fragColor = vec4(el[i].color, 1.0);\n       }\n       for(int i = 0; i < tria.length(); i++)\n       {\n           if(triangle(tria[i].a, tria[i].b, tria[i].c, vec2(x, y)))\n               fragColor = vec4(tria[i].color, 1.0);\n       }\n       if(ellipse(vec2(-0.04, 0.217), vec2(x, y), 0.2, 0.82, 0.33))\n           fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n       if(ellipse(vec2(-0.2, 0.054), vec2(x, y), 0.1, 0.32, 1.))\n           fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}","name":"Image","description":"","type":"image"}]}