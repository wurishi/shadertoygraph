{"ver":"0.1","info":{"id":"clXGD7","date":"1671821546","viewed":116,"name":"Perspective lines","username":"callumacrae","description":"A shader version of something I made a while back - https://sketchbook.macr.ae/perspective-lines","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["lines","perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BAR_INTERVAL 80.0\n#define BAR_HEIGHT iResolution.y - 200.0\n#define BAR_WIDTH 8.0\n#define TIME_FACTOR 100.0\n#define MOUSE_FACTOR_X 100.0\n#define MOUSE_FACTOR_Y 50.0\n#define ROW_DENSITY 5.0\n#define LIGHT_FADE_FACTOR 2.0\n\nfloat colorForCol(vec2 fragCoord, float rowFactor) {\n  float barHeight = (BAR_HEIGHT) * rowFactor;\n  float mouseOffsetY = iMouse.y == 0.0 ?\n    0.0 :\n    (iMouse.y / iResolution.y - 0.5) * MOUSE_FACTOR_Y;\n  float distFromCenterY = abs((fragCoord.y + mouseOffsetY) - iResolution.y / 2.0);\n\n  float offsetYFromEnd = barHeight / 2.0 - distFromCenterY;\n  if (offsetYFromEnd < 0.0) {\n    return 0.0;\n  }\n\n  float barInterval = BAR_INTERVAL * rowFactor;\n  float barWidth = BAR_WIDTH * rowFactor;\n  float timeOffset = iTime * TIME_FACTOR * rowFactor;\n  float mouseOffsetX = iMouse.x == 0.0 ?\n    0.0 :\n    (iMouse.x / iResolution.x - 0.5) * MOUSE_FACTOR_X * rowFactor;\n  \n  float distFromCenterX = abs((fragCoord.x + timeOffset + mouseOffsetX) - iResolution.x / 2.0);\n  if (distFromCenterX < distFromCenterY - barHeight / 2.0) {\n    return 0.0;\n  }\n  \n  float offsetXInBar = mod(distFromCenterX + barWidth / 2.0, barInterval);\n  float offsetXFromCenterOfBar = abs(barWidth / 2.0 - offsetXInBar);\n  float radius = sqrt(pow(offsetXFromCenterOfBar, 2.0) + pow(barWidth / 2.0 - offsetYFromEnd, 2.0));\n  \n  if (offsetXInBar < barWidth) {\n    return pow(rowFactor, LIGHT_FADE_FACTOR) * (\n      offsetYFromEnd > barWidth / 2.0 ? 1.0 : smoothstep(radius - 0.5, radius + 0.5, barWidth / 2.0)\n    );\n  } else {\n    return 0.0;\n  }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float color = 0.0;\n  \n  for (float i = 1.0; i != 20.0; ++i) {\n    float rowFactor = ROW_DENSITY / (i + ROW_DENSITY - 1.0);\n    color = max(color, colorForCol(fragCoord, rowFactor));\n  }\n\n  fragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}