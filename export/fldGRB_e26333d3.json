{"ver":"0.1","info":{"id":"fldGRB","date":"1636308775","viewed":430,"name":"Complex Atanh Revisited","username":"mla","description":"More fun with atanh - inspired to have another look at this after seeing byt3_m3chanic's excellent log polar shaders.\n\nMouse changes rotation parameters.","likes":27,"published":3,"flags":16,"usePreview":0,"tags":["domain","complex","mapping","atanh"],"hasliked":0,"parentid":"tsBXRW","parentname":"Complex Atanh"},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////\n// Complex Inverse Hyperbolic Tangent\n//\n// Domain mapping of sums of complex atanh.\n// Care needed for alignment across branch cuts.\n//\n// Key controls:\n// 'r': rotate 90Â°\n// 'a': use acosh\n// 'c': checkerboard\n// 'm': monochrome\n// 'o': circles\n// 'p': z -> z^5\n// 'i': z -> z+1/z\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat A = 11.0, B = 10.0; // Rotation angle is atan(B,A)\nfloat scale = 1.5;\nfloat PI = 3.14159;\n\nvec3 getcolor(float h) {\n if (!key(CHAR_M)) return mono(h);\n vec3 hue = 0.5+0.5*cos(2.0*PI*h + vec3(0, 2, 2));\n hue = sqrt(hue);\n return hue;\n return 0.2+0.8*h2rgb(h);\n}\n\nvec2 f(vec2 z) {\n  if (key(CHAR_A)) return cacosh(z);\n  return catanh(-0.5*z) + catanh(cmul(vec2(cos(0.1*iTime),sin(0.1*iTime)), z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  if (iMouse.x > 0.0) {\n    // Get angle from mouse position\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    m *= 40.0;\n    A = floor(m.x), B = floor(m.y);\n  }\n  vec2 rot = vec2(A,B);\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  if (key(CHAR_R)) z = z.yx;\n  z *= scale;\n  if (!key(CHAR_P)) z = cpow(z,5.0);//min(1.0+floor(iTime),5.0));\n  // catanh is liable to add random multiples of PI\n  // to the y output. This being so, our coloring function must\n  // return the same color for all such multiples, ie. it must\n  // be periodic with period PI\n  if (!key(CHAR_I)) z += cinv(z); // z += 1/z\n  z = f(z);\n  z /= PI; // Required period is now 1\n  float px = 0.75*fwidth(z.x); // z.x is continuous, unlike z.y\n  z.y += 0.02*iTime;\n  //z.y = mod(z.y,1.0); // Check periodicity - this should have no effect!\n  z = cmul(rot,z); // rotate z\n  px *= length(rot); // and scale pixel width\n  vec2 index = round(z); // Nearest grid point\n  z -= index; // Reduce to [-0.5,+0.5]\n  float hx = fract(index.x/(B==0.0 ? 1.0 : B)); // Color for column\n  float hy = fract(index.y/(A==0.0 ? 1.0 : A)); // Color for row\n  float d = key(CHAR_O) ? length(z) // Circle\n            : max(abs(z.x),abs(z.y)); // Square\n  vec3 colx = getcolor(hx);\n  vec3 coly = getcolor(hy+0.25);\n  vec3 col = vec3(0);\n  if (!key(CHAR_C)) {\n    float k = z.x*z.y;\n    col = mix(colx,coly, smoothstep(-px,px,sign(k)*min(abs(z.x),abs(z.y)))); // Checkerboard\n  } else {\n    col = mix(coly,colx, smoothstep(-px,px,d-0.3)); // Concentric\n  }\n  col *= 1.0-smoothstep(-px,px,d-0.5);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Complex functions\nvec2 cmul(vec2 z, vec2 w) {\n  //return vec2 (z.x*w.x-z.y*w.y, z.x*w.y+z.y*w.x);\n  return mat2(z,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),atan(z.y,z.x));\n}\n\nvec2 cexp(vec2 z) {\n  // If cos and sin were perfect we wouldn't need normalize\n  return exp(z.x)*normalize(vec2(cos(z.y),sin(z.y)));\n}\n\nvec2 cpow(vec2 z, float x) {\n  return cexp(x*clog(z));\n}\n\nvec2 csqrt(vec2 z) {\n  return cpow(z,0.5);\n}\n\n// Inverse hyperbolic tangent \nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}\n\nvec2 cacosh(vec2 z) {\n  return clog(z+cmul(csqrt(z+vec2(1,0)),csqrt(z-vec2(1,0))));\n}\n\nvec3 mono(float h) {\n  return fract(h)*vec3(1,0.8,0.8); // The monochrome look\n}\n\n// Iq's hsv function, but just for hue.\nvec3 h2rgb(float h ) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n// Macros for use in \"common\" blocks.\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n","name":"Common","description":"","type":"common"}]}