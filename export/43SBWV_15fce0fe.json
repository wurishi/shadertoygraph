{"ver":"0.1","info":{"id":"43SBWV","date":"1729937458","viewed":29,"name":"Tricorn julia cross product ","username":"IgorZdrowowicz","description":"Julia version\nhttps://www.shadertoy.com/view/M3SfRt#","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","crossproduct","tricorn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by Igor Zdrowowicz\n// Modified version of my previous shader: https://www.shadertoy.com/view/M3SfRt#\n// Here we only take a single cross product of z with 2,2,2.5 before z*z \n// and get tricorn julia as a result.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    uv.x *= iResolution.x / iResolution.y; \n    \n    float sc = 0.5;\n    vec2 os = vec2(-0.45,-0.25);\n    uv = uv * sc + os;\n    \n    vec3 z = vec3(uv,0.);\n\n    float time = iTime * 0.1; \n    vec3 c = vec3(0.03, 0.01, -0.2*(cos(time)-1.)); \n    \n    for (int i = 0; i <16; i++) {\n        z = cross(z, vec3(2.0,2.0,2.5));\n        z = z * z + c; \n    }\n    \n\n    fragColor = vec4(z,0.);\n}","name":"Image","description":"","type":"image"}]}