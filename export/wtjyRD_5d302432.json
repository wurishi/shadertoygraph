{"ver":"0.1","info":{"id":"wtjyRD","date":"1593888157","viewed":67,"name":"Worley's noise","username":"HypePaul","description":"Worley's noise inside a cube with the camera passing through it.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 25\n\nfloat hash1(float n) {\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat closestDistance(vec3 pos, vec3[N] points) {\n    // number larger than max distance\n    float min = 10.;\n    for (int i = 0; i < N; i++) {\n    \tfloat d = (points[i].x - pos.x) *\n            \t  (points[i].x - pos.x) +\n            \t  (points[i].y - pos.y) *\n            \t  (points[i].y - pos.y) +\n            \t  (points[i].z - pos.z) *\n            \t  (points[i].z - pos.z);\n        if (min > d)\n            min = d;\n    }\n    return sqrt(min);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    vec3[N] points;\n    for (int i = 0; i < N; i++)\n        points[i] = vec3(\n            hash1(float(i) * floor(iTime / 2.)) * ratio,\n            hash1(float(i) * floor(iTime / 2.) / 2.),\n            hash1(float(i) * floor(iTime / 2.) / 3.) + .5);\n    fragColor = vec4(1. - 2. * vec3(closestDistance(vec3(uv, mod(iTime, 2.)), points)),1.0);\n}","name":"Image","description":"","type":"image"}]}