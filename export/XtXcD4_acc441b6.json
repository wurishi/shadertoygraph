{"ver":"0.1","info":{"id":"XtXcD4","date":"1504754351","viewed":129,"name":"CG Checkerboard","username":"Andy608","description":"This is the first homework assignment for my computer graphics course.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Rows = 10.0;\nfloat Cols = 10.0;\n\nvec2 Position = vec2(0.5, 0.5);\nvec2 Dimensions = vec2(0.45, 0.45);\nvec4 BGColor = vec4(1.0, 1.0, 0.0, 1.0);\n\n/*\n* Pre: The uv coordinates, number of rows, and number of columns to display.\n* Post: Returns the correct pixel color for the checkerboard.\n* Purpose: To get the pixel color depending on how many rows and columns there are.\n*/\nvec4 createCheckerPattern( vec2 uv, float rows, float cols )\n{\n    //Find the ratio of the screen and apply it to the uv and position.\n    float ratio = (iResolution.x / iResolution.y);\n    uv.x *= ratio;\n    Position.x *= ratio;\n    \n    //If the current pixel is outside the checkerboard, then color the pixel the background color.\n    if (length(Position.x - uv.x) > Dimensions.x || length(Position.y - uv.y) > Dimensions.y)\n    {\n       return BGColor;\n    }\n    \n    //Move the uv position over depending on the position and dimensions\n    //of the checkerboard. This makes it so the pattern always starts in\n    //the lower left hand corner of the checkerboard.\n    uv -= Position - Dimensions;\n    \n    float rowModulus = mod(uv.y * rows / (Dimensions.y * 2.0), 2.0);\n    float colModulus = mod(uv.x * cols / (Dimensions.x * 2.0), 2.0);\n    \n    //Return the correct pixel values depending on where the current pixel is\n    //on the screen.\n    if ((rowModulus >= 1.0 && colModulus >= 1.0) || (rowModulus < 1.0 && colModulus < 1.0))\n    {\n\t\treturn texture(iChannel0, uv);\n    }\n    else\n    {\n        return texture(iChannel1, uv);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = createCheckerPattern(uv, Rows, Cols);\n}","name":"Image","description":"","type":"image"}]}