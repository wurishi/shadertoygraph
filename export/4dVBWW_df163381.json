{"ver":"0.1","info":{"id":"4dVBWW","date":"1528880213","viewed":247,"name":"Animated Voronoise","username":"AustinSpafford","description":"Trying out animating iq's voronoise example: https://www.shadertoy.com/view/Xd23Dh\n\nThe click+drag controls from the original voronoise example can still be used, and I recommend trying out ENABLE_WATER_CAUSTICS_MODE.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["voronoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define ENABLE_WATER_CAUSTICS_MODE\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n    \n    //vec2 noiseTexelSize = (vec2(1.0) / iChannelResolution[0].xy);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {            \n        vec2 g = vec2( float(i),float(j) );\n        \n        /* Original static-params.\n        vec3 cellParams = hash3(p + g);\n\t\t*/\n        \n        /* Aborted buggy attempt to use a noise texture.\n        float animationScalar = (0.5 * iTime);\n        float animationFract = fract(animationScalar);\n        vec2 paramsOrigin = (13.0 * (p + g));\n        vec2 baseParamsIndex = (paramsOrigin + vec2(floor(animationScalar), 0.0));                            \n        vec3 startSeedSample = texture(iChannel0, (baseParamsIndex + vec2(0.5)) * noiseTexelSize).xyz;\n        vec3 endSeedSample = texture(iChannel0, ((baseParamsIndex + vec2(1.0, 0.0)) + vec2(0.5)) * noiseTexelSize).xyz;\n        vec3 cellParams = smoothstep(startSeedSample, endSeedSample, vec3(animationFract));\n        //cellParams = texture(iChannel0, ((paramsOrigin + vec2(animationScalar, 0.0)) + vec2(0.5)) * noiseTexelSize).xyz;\n\t\t*/\n        \n        // Straightforward sin waves.\n        vec3 cellParamSpeeds = mix(vec3(0.05), vec3(0.6), hash3(p + g));\n        vec3 cellParams = smoothstep(-1.0, 1.0, sin(cellParamSpeeds * (iTime + 200.0)));\n        cellParams.xy = mix(vec2(0.1), vec2(0.9), cellParams.xy); // Avoid overly sharp edges my ensuring a minimum distance between the cell-centers.\n\t\t\n\t\tvec3 o = cellParams*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec2 uv = fragCoord.xy / iResolution.xx;\n    vec2 uv = fragCoord.xy / 800.0;\n\n    vec2 p = 0.5 - 0.5*sin( iTime*vec2(1.01,1.71) );\n    p = vec2(1.0, 1.0);\n\t\n\tif( iMouse.z>0.001 ) p = vec2(0.0,1.0) + vec2(1.0,-1.0)*iMouse.xy/iResolution.xy;\n\t\n\tp = p*p*(3.0-2.0*p);\n\tp = p*p*(3.0-2.0*p);\n\tp = p*p*(3.0-2.0*p);\n\t\n\tfloat f = iqnoise(24.0*uv, p.x, p.y);\n    \n    vec3 color = vec3(f);\n    \n    #ifdef ENABLE_WATER_CAUSTICS_MODE\n    {    \n        // Add more octaves.\n        f = mix(f, iqnoise(41.0*uv + vec2(1000.0), p.x, p.y), 0.33);\n        //f = mix(f, iqnoise(57.0*uv, p.x, p.y), 0.33);\n\n        // Highlight the intersections between the octaves.\n        f = pow(f, 2.0);\n\n        // Add a bluish tint while keeping white highlights by filtering out some of the low-end on the red/green channels.\n        // Also add small hot-spot highlights, by slightly clamping at the ceiling.\n        float high_end_clamp = 0.95;\n        color = vec3(\n            smoothstep(0.25, high_end_clamp, f),\n            smoothstep(0.1, high_end_clamp, f),\n            smoothstep(0.0, high_end_clamp, f));\n\t}\n    #endif\n\t\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}