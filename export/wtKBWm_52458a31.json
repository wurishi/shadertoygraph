{"ver":"0.1","info":{"id":"wtKBWm","date":"1614508775","viewed":100,"name":"abstract flower","username":"sukupaper","description":"Originally made as an animated background for \"paperu.net\".","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","flower","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: abstract flower\n\nprecision lowp float;\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n#define P 3.14159265359\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat t;\nfloat df(vec3 p) {\n    p.xz *= rot(t*.2);\n    p.yz *= rot(P*-.2);\n    p.xz *= rot(P*.25);\n    \n    float rad = 0.66*2.5;\n    float d = 10e6;\n    int limI = int(floor((cos(t*2.)*.5+.5)*5.));\n    for(int i = 0; i < 4; i++) {\n        float dt1 = abs(length(abs(p) - vec3(+1.,0.,0.)) - rad) - .0469;\n        float dt2 = abs(length(abs(p) - vec3(0.,+1.,0.)) - rad) - .0469;\n        float dt3 = abs(length(abs(p) - vec3(0.,0.,+1.)) - rad) - .0469;\n        d = min(min(min(d,dt1),dt2),dt3);\n        rad -= .2;\n    }\n    p = abs(p); float dshape = (p.x+p.y+p.z - 10.)*.57735027;\n    return max(-d,dshape);\n}\n\n#define EPSI .0001\nvec3 normal(vec3 p){\n    vec2 u = vec2(0.,EPSI); float d = df(p);\n    return normalize(vec3(df(p + u.yxx),df(p + u.xyx),df(p + u.xxy)) - d);\n}\nvec4 rm(vec3 c, vec3 r) {\n    vec4 color = vec4(vec3(.1),0.);\n    vec3 p = c + r*2.;\n    if(df(p) < EPSI) {\n        color.rgb = 1. - (normal(p)*.5 + .5);\n        color.w = 1.;\n        return color;\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord.xy - .5*iResolution.xy)/iResolution.x;\n    \n    float mx = length(iMouse.xy/iResolution.xy - .5)*5.;\n\n    st *= 1. + mx;\n\n    t = iTime*.125;\n\n    vec3 c = vec3(0.,0.,-2.);\n    vec3 r = normalize(vec3(st,0.8));\n    vec4 color = rm(c,r);\n\n    vec3 copyColor = color.rgb;\n    color.rgb += vec3(color.r + color.b + color.g)/3.;\n    color.r *= copyColor.b;\n    color.g *= copyColor.g;\n\n    fragColor = vec4(color.grb*color.w,1.);\n}","name":"Image","description":"","type":"image"}]}