{"ver":"0.1","info":{"id":"WdS3zD","date":"1548253945","viewed":170,"name":"Samples Per Pixel","username":"valler","description":"Multiple samples per pixel. Keeps the ray direction. Offsets the ray origin along the image plane.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["ray","pixel","distance","march","samples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4lVcRm\nvec2 R2seq(int n)\n{\n\treturn fract(vec2(n) * vec2(0.754877666246692760049508896358532874940835564978799543103, 0.569840290998053265911399958119574964216147658520394151385));\n}\n\n// https://www.shadertoy.com/view/Ml3Gz8\nfloat smin(float a, float b, float k) {\n    float h = clamp(.5+.5*(a-b)/k,0.,1.);\n    return mix(a,b,h)-k*h*(1.-h);\n}\n\nfloat f (vec3 p)\n{\n    vec3 t = vec3(1,0,0);\n    return smin(\n        length(p-t)-1.,\n        length(p+t)-1.,\n        1.\n    );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( vec3 p, float t )\n{\n    float e = 1.e-3*t;\n    vec2 h = vec2(1.0,-1.0)*0.5773;\n    return normalize( h.xyy*f( p + h.xyy*e ) + \n\t\t\t\t\t  h.yyx*f( p + h.yyx*e ) + \n\t\t\t\t\t  h.yxy*f( p + h.yxy*e ) + \n\t\t\t\t\t  h.xxx*f( p + h.xxx*e ));\n}\n\nvec3 env (vec2 uv)\n{\n\treturn 3.*vec3(uv,0).zyx;\n}\n\nvoid mainImage( out vec4 _, in vec2 a )\n{\n    float ti = .5*iTime;\n    float invMaxRes = 1./max(iResolution.x, iResolution.y);\n    vec2 uv = (a-.5*iResolution.xy)*invMaxRes;\n    vec3 up = vec3(0,1,0);\n    vec3 ta = vec3(0);\n    \n    vec3 rt = 4.*vec3(sin(ti),0,cos(ti));\n    vec3 ro = rt;\n    vec3 w = normalize(ta-ro);\n    if (abs(dot(up,w)) > .999) up = up.xxy;\n    vec3 u = normalize(cross(w,up));\n    mat3 aim = mat3(u,cross(u,w),w);\n    vec3 rd = aim * normalize(vec3(uv,.5));       \n    \n    vec3 c = vec3(0);\n    int spp = 4;\n    float dro = cos(iTime)*300.*invMaxRes; // tweak\n    float tmin = 1.e-4;\n    float tmax = 1.e6;\n    float inv2PI = 0.15915494309189535;\n    for (int i = 0; i < spp; ++i)\n    {\n        ro = rt+aim*dro*vec3(R2seq(i)-.5,0);\n        float t = 0.;\n        float dt = 0.;\n        vec3 p = ro;\n        while (t < tmax)\n        {\n            dt = f(p);\n            if (dt < tmin) break;\n            t = min(tmax,t+dt);\n            p = ro+rd*t;\n        }\n\n        vec3 n;\n        vec2 ruv;\n        float fresnel;\n        if (t < tmax)\n        {\n            n = calcNormal(p,t);\n            vec3 r = reflect(rd,n);\n            ruv = vec2(atan(r.z,r.x)*inv2PI,r.y*0.5)+0.5;\n            float f = 1.-dot(r,n);\n            fresnel = f*f*f*f*f*.96+.04;\n            c += env(ruv)*fresnel;\n        }\n        else c += vec3(1,0,.05);\n    }\n    \n    _ = vec4(sqrt(c/float(spp)),1);\n}","name":"Image","description":"","type":"image"}]}