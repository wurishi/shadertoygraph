{"ver":"0.1","info":{"id":"fd3SW2","date":"1633940804","viewed":223,"name":"Basic axis-aligned foveation","username":"sctanf","description":"Based off https://www.shadertoy.com/view/WddGz8# and https://www.shadertoy.com/view/3l2GRR\n\nClick to see source image\nPress \"U\" to see unsharpened image\nPress \"C\" to see compressed image","likes":0,"published":3,"flags":48,"usePreview":0,"tags":["vr","foveated","foveation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Composition and interaction\n\n#define key_c 67\n#define key_down(key) (texelFetch(iChannel3, ivec2(key, 0), 0).x > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sourceUV = fragCoord / iChannelResolution[0].xy;\n    \n    if (key_down(key_c)) {\n        fragColor = texture(iChannel1, fragCoord / iChannelResolution[1].xy);\n    } else if (!(iMouse.z > 0.)) {\n        fragColor = texture(iChannel2, fragCoord / iChannelResolution[1].xy);\n   \t} else if (sourceUV.x < 1. && sourceUV.y < 1.) {\n        fragColor = texture(iChannel0, sourceUV);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SOURCE_RESOLUTION iChannelResolution[0].xy\n#define COMPRESSED_TO_SOURCE (k+(1.-k)/j)\n#define j vec2(hj,vj)\n//Pixel alignment\n#define l (vec2(ivec2((ual*(SOURCE_RESOLUTION-k*SOURCE_RESOLUTION))/(j*2.)))*(j*2.)/(SOURCE_RESOLUTION-k*SOURCE_RESOLUTION))\n#define ual vec2(hl,vl)\n//Pixel alignment\n#define k (1.-vec2(ivec2((SOURCE_RESOLUTION-uak*SOURCE_RESOLUTION)/(j*2.)))*(j*2.)/SOURCE_RESOLUTION)\n#define uak vec2(hk,vk)\n\n//Horizontal control\n//Center shift (-1.0 - 1.0)\n#define hl 0.4\n//Edge pixel compression ratio (>= 1)\n#define hj 2.\n//Center size (0.0 - 1.0)\n#define hk 0.5\n\n//Vertical control\n//Center shift (-1.0 - 1.0)\n#define vl 0.1\n//Edge pixel compression ratio (>= 1)\n#define vj 2.\n//Center size (0.0 - 1.0)\n#define vk 0.4\n\n#define SHARPEN_STRENGTH 0.5","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Compressed image\n\n#define sourceSampler iChannel0\n#define uv clamp(fragCoord / iChannelResolution[0].xy / COMPRESSED_TO_SOURCE, 0., 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 alignedUV = uv;\n    \n    vec2 loBound = (1.-k)/2.*(l+1.)/((j-1.)*k+1.);\n    vec2 hiBound = (1.-k)/2.*(l-1.)/((j-1.)*k+1.)+1.;\n    vec2 underBound = vec2(alignedUV.x<loBound.x,alignedUV.y<loBound.y);\n    vec2 inBound = vec2(loBound.x<alignedUV.x&&alignedUV.x<hiBound.x,loBound.y<alignedUV.y&&alignedUV.y<hiBound.y);\n    vec2 overBound = vec2(alignedUV.x>hiBound.x,alignedUV.y>hiBound.y);\n    \n    vec2 center = alignedUV*((j-1.)*k+1.)/j+((1.-k)/(2.*j))*(j-1.)*(l+1.);\n    vec2 leftEdge = alignedUV*(j-(j-1.)*(1.-k));\n    vec2 rightEdge = (alignedUV-1.)*(j-(j-1.)*(1.-k))+1.;\n    \n    vec2 curveUV = underBound*leftEdge+inBound*center+overBound*rightEdge;\n    \n    fragColor = texture(sourceSampler, curveUV);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Uncompressed + sharpened image\n\n#define compressedSampler iChannel1\n#define blurredSampler iChannel1\n#define uv clamp(fragCoord / iChannelResolution[0].xy, 0., 1.)\n\n#define demo_convert_uv(uv) ((uv) * COMPRESSED_TO_SOURCE * iChannelResolution[0].xy / iResolution.xy)\n\n#define key_u 85\n#define key_down(key) (texelFetch(iChannel3, ivec2(key, 0), 0).x > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 alignedUV = uv;\n    \n    vec2 loBound = (1.-k)/2.*(l+1.);\n    vec2 hiBound = (1.-k)/2.*(l-1.)+1.;\n    vec2 underBound = vec2(alignedUV.x<loBound.x,alignedUV.y<loBound.y);\n    vec2 inBound = vec2(loBound.x<alignedUV.x&&alignedUV.x<hiBound.x,loBound.y<alignedUV.y&&alignedUV.y<hiBound.y);\n    vec2 overBound = vec2(alignedUV.x>hiBound.x,alignedUV.y>hiBound.y);\n    \n    vec2 center = j*(alignedUV+((1.-k)/(2.*j))*(1.-j)*(l+1.))/((j-1.)*k+1.);\n    vec2 leftEdge = alignedUV/((j-1.)*k+1.);\n    vec2 rightEdge = (alignedUV-1.)/((j-1.)*k+1.)+1.;\n    \n    vec2 curveUV = underBound*leftEdge+inBound*center+overBound*rightEdge;\n    curveUV = demo_convert_uv(curveUV);\n    \n    vec2 sharpenWeight = underBound+overBound;\n    \n    vec2 delta = 1./iChannelResolution[0].xy * sharpenWeight * SHARPEN_STRENGTH;\n    \n    vec3 currentColor = texture(blurredSampler, curveUV).rgb;\n    vec3 leftColor = texture(blurredSampler, curveUV - vec2(delta.x, 0.)).rgb;\n    vec3 rightColor = texture(blurredSampler, curveUV + vec2(delta.x, 0.)).rgb;\n    vec3 downColor = texture(blurredSampler, curveUV - vec2(0., delta.y)).rgb;\n    vec3 upColor = texture(blurredSampler, curveUV + vec2(0., delta.y)).rgb;\n    \n    vec3 finalColor = 5. * currentColor + -1. * (leftColor + rightColor + downColor + upColor);\n    \n    if (key_down(key_u)) {\n        fragColor = texture(compressedSampler, curveUV);\n    } else {\n        fragColor = vec4(finalColor,0.);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}