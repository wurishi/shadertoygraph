{"ver":"0.1","info":{"id":"3ts3D2","date":"1557812696","viewed":143,"name":"cychedelic waves","username":"takumifukasawa","description":"cychedelic waves","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","sin","hsv","wavs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//------------------------------------------------------------------------------------------------------\n// noise from: https://thebookofshaders.com/12/\n//------------------------------------------------------------------------------------------------------\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n//------------------------------------------------------------------------------------------------------\n// hsv2rgb\n// https://qiita.com/keim_at_si/items/c2d1afd6443f3040e900\n//------------------------------------------------------------------------------------------------------\n\nvec3 hsv2rgb(float h, float s, float v) {\n\treturn ((clamp(abs(fract(h+vec3(0,2,1)/3.)*6.-3.)-1.,0.,1.)-1.)*s+1.)*v;\n}\n\n//------------------------------------------------------------------------------------------------------\n// contents\n//------------------------------------------------------------------------------------------------------\n\nfloat wave(vec2 st, float c, float s) {\n    float f = smoothstep(c - s, c, st.y) * smoothstep(c, c + s, st.y);\n\treturn 1. - clamp(f, 0., 1.);\n}\n\nfloat waves(vec2 st, float i) {\n\tfloat off = -.04 + i * .075;\n    float wave1 = wave(\n        st + vec2(0., -off + noise(st * 5. + iTime * .6) * .05),\n        sin((st.x + iTime * .15 + .00) * 20.) * .01,\n        .01\n    );\n    float wave2 = wave(\n        st + vec2(0., off + noise(st * 5. + iTime * .6) * .05),\n        sin((st.x + iTime * .15 + .15) * 20.) * .01,\n        .01\n    );\n    return wave1 * (1. - wave2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n    \n    vec3 col = vec3(0.);\n    \n    for(int i = 0; i < 16; i++) {\n        vec3 c = hsv2rgb(iTime * .15 + float(i) * .06, .9, .8) * .105;\n        float w = waves(uv, float(i));\n        col += c * w;\n    }\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}