{"ver":"0.1","info":{"id":"NlcSDN","date":"1639144170","viewed":271,"name":"Candytronium Plasma","username":"msm01","description":"Just a simple plasma effect... More details + great music in the shader ! :D\n\n\"Caught in this cage, I sing my song !\"","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["simple","plasma","demoscene","fanart","candytron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"The tricky thing about candytronium is,\n// that if you ever manage to process its raw, liquid form,\n// you got to keep it that way, keep it hot.\n// Because once the metal cools, it's indestructible.\"\n\n// To enjoy this shader a lot more, please play this excellent cover\n// of the original track by Kb/Farbrausch :\n// https://music.scenesat.com/track/candytron-tron-remix-feat-lizette\n\n// Hey guys.\n// Just a humble (and unworthy) 2D tribute to Candytron,\n// one of the best intros 64k of the 2000s, by Farbrausch.\n//\n// How and Why :\n//\n// I was playing with basic plasma equations, and decided to try\n// the \"magma\" polynomial palette, which I find quite beautiful :\n// ( https://www.shadertoy.com/view/WlfXRN ) by mattz\n//\n// I then added a piece of code I had found elsewhere to make it shine :\n// ( https://www.shadertoy.com/view/4tdGWX ) by 4rknova\n//\n// And suddenly I thought :\n// \"Pink, Gold, and Shiny ? Looks like Candytron to me !\"\n// By sheer luck, I had stumbled upon pure, military-grade Candytronium...\n// The raw, liquid-metal phase 3D girls are made of.\n//\n// So I shared it. :D\n//\n// May it bring a smile on your face.\n\n// License CC0 (public domain)\n// https://creativecommons.org/share-your-work/public-domain/cc0/\n\nmat2 r2d( float a )\n{\n     float c = cos(a), s = sin(a);\n     return mat2( c, s, -s, c );\n}\n\nvec3 magma(float t)\n{\n\n    const vec3 c0 = vec3(-0.002136485053939582, -0.000749655052795221, -0.005386127855323933);\n    const vec3 c1 = vec3(0.2516605407371642, 0.6775232436837668, 2.494026599312351);\n    const vec3 c2 = vec3(8.353717279216625, -3.577719514958484, 0.3144679030132573);\n    const vec3 c3 = vec3(-27.66873308576866, 14.26473078096533, -13.64921318813922);\n    const vec3 c4 = vec3(52.17613981234068, -27.94360607168351, 12.94416944238394);\n    const vec3 c5 = vec3(-50.76852536473588, 29.04658282127291, 4.23415299384598);\n    const vec3 c6 = vec3(18.65570506591883, -11.48977351997711, -5.601961508734096);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec4 col = vec4(0.0,0.0,0.0,1.0);\n     vec2 p   = vec2( (iResolution.x/iResolution.y)\n                       * (fragCoord.x - iResolution.x/2.0)\n                       / iResolution.x,\n                      fragCoord.y / iResolution.y);\n\n     // X-Mirror Mode activate every CycleLength/2.0 seconds\n     float CycleLength = 16.0;\n     if( mod(iTime,CycleLength) > (CycleLength/2.0))\n     {\n         p = abs(p);\n     };\n\n     // Zoom Level\n     float PlasmaScale = 15.0 + 11.0*cos(0.05*iTime);\n\n     // Ad hoc twisting and turning...\n     p += vec2( 0.5*cos(0.8*iTime), -0.5 + 0.5*sin(0.8*iTime));\n     p = r2d( 15.0*cos(0.15*iTime))*p;\n     \n     // Simple plasma equation\n     float Plasma1 = 0.5*(sin(PlasmaScale*p.x*p.y + (PlasmaScale/100.0)*iTime));\n     Plasma1 += 0.5;\n\n     // More turning !\n     p = r2d(-15.0*sin(0.15*iTime))*p;\n\n     // Let's compute another plasma value to add a bit of visual detail...\n     // It will make things more interesting later on.\n     float Plasma2 = 0.5*(sin(PlasmaScale*p.x*p.y + (PlasmaScale/500.0)*iTime));\n     Plasma2 += 0.5;\n\n     // Okay, we got our two patterns, let's add them and get interferences for free.\n     // Oh, and let's pump up the volume to 3.0 to make it pop a little bit.\n     col = 3.0*(0.5*vec4(magma(Plasma1),1.0) + 0.5*vec4(magma(Plasma2),1.0));\n\n     // Now THIS is the secret sauce. I found it in another shader, and then\n     // I had a look at the comments and BAM (!) there it was : a 2D trick\n     // suggested by Shane himself.\n     // If it's good enough for him, I'm not gonna complain. :)\n     // Basically, I think it uses the slope of your plasma to calculate\n     // somewhat acceptable \"fake 3D\" highlights... Sure looks cool, though.\n     col *= pow(max(normalize(vec3(length(dFdx(col)),length(dFdy(col)), 0.5/iResolution.y)).z, 0.0), 0.9)\n            + .3;\n\n     // ZIMZALABIM !\n     fragColor = col;\n}","name":"Image","description":"","type":"image"}]}