{"ver":"0.1","info":{"id":"ddyczy","date":"1696635882","viewed":38,"name":"Mandelburrito","username":"sambrot","description":"mandelbrot with powers, zoom and color ((DOUBLE PRECISION HELP NEEDED))","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfloat CRDZ = 0.5 - 0.5*cos(0.5*iTime);\n//zoom speed\nfloat zoom = pow( 0.5, 20.0*CRDZ);\n//zoom coordinates\nvec2 CRDzoom = vec2(-1.749,-0.0);\n//CRDjulia is the coordinates of the julia set\nvec2 CRDjulia = vec2(sin(iTime*2.),cos(iTime*3.));\n//viewport\nvec2 uv = 2.*zoom*(2.*fragCoord-iResolution.xy)/iResolution.y + CRDzoom;\n//change from (uv) to (uv,CRDjulia) for a julia set\nvec2 ouv = (uv);\n//change the power\nfloat power = 2.;\n//ite needs to be defined for colors\nfloat ite = 0.;\n//iterated sequence (i used a tutorial for it)\nfor (int i = 0;i<1000;i++){\nuv = cpow(uv,power)+ouv;\nif(dot(uv,uv)>4.0){\nite = float(i);\nbreak;}}\n//color\nvec3 col = vec3(cos(ite/2.),cos(ite/3.),cos(ite/4.));\nfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 cpow(vec2 z,float p)\n{\n//imaginary value\nfloat angle = p*atan(abs(z.y),(z.x));\nfloat len = pow(length(z),p);\n//returned value\nreturn len*vec2(abs(cos(angle)),sin(angle));\n}\n\n","name":"Common","description":"","type":"common"}]}