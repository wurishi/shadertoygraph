{"ver":"0.1","info":{"id":"4fK3Ww","date":"1712847684","viewed":28,"name":"4. Drawing arc","username":"nitish","description":"Playlist: https://www.shadertoy.com/playlist/s33cWf","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n\n#define PI 3.14159265359\n#define AT 10.0 / iResolution.x\n\nvec2 normalizeCoords(vec2 uv, vec2 resolution) {\n    vec2 p = uv / resolution * 2.0 - 1.0;\n    p.x = p.x * resolution.x / resolution.y;\n    return p;\n}\n\nfloat drawAxis(vec2 uv) {\n    float xAxis = step(-AT, uv.y) * step(uv.y, AT);\n    float yAxis = step(-AT, uv.x) * step(uv.x, AT);\n    \n    uv = abs(uv);\n    \n    for(int i = 0; i < 10; ++ i) {\n        xAxis = xAxis + step(float(i) * 0.1 - AT, uv.x) * step(uv.x, float(i) * 0.1 + AT) * step(abs(uv.y), 0.01);\n        yAxis = yAxis + step(float(i) * 0.1 - AT, uv.y) * step(uv.y, float(i) * 0.1 + AT) * step(abs(uv.x), 0.01);\n    }\n    \n    return xAxis + yAxis;\n}\n\n//Output range is [0, 360]\nfloat modifiedTan(float y, float x) {\n    /**\n    atan output is in the range [-PI/2, PI/2] or [-180, 180]\n    in the\n    1 Q it ranges from [0, 90]\n    2 Q it ranges from [90, 180]\n    3 Q it ranges from [-180, -90]\n    4 Q it ranges from [-90, 0]\n    */\n    float angle = atan(y, x) * 180.0 / PI;\n    \n    // In 1st and 2nd Q, do nothing\n    if (angle > 0.0) {\n        return angle;\n    }\n    \n    // In the 3rd and 4th Q, updte value\n    return 360.0 + angle;\n}\n\nfloat drawArc(vec2 uv, float startAngle, float endAngle, float radius) {\n    \n    /**\n    this is to fix the condition where startAngle < endAngle\n    We will start drawing our arc from small angel till bigger angle\n    */\n    float sAngle = min(startAngle, endAngle);\n    float eAngle = max(startAngle, endAngle);\n    \n    float Duv = length(uv);\n    \n    // Calculate angle made by the point\n    float angle = modifiedTan(uv.y, uv.x);\n    \n    float value = step(radius - 2.0 * AT, Duv);\n    value *= step(Duv, radius + 2.0 * AT);\n    \n    // Hide uv, when it has an angle less than sAngle\n    value *= step(sAngle, angle);\n    \n    // Hide uv,when it has an angle greater than eAngle\n    value *= step(angle, eAngle);\n    \n    return value;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float a = 0.5;\n    \n    vec4 color = vec4(0.0);\n    \n    vec2 uv = normalizeCoords(fragCoord.xy, iResolution.xy);\n    color = color + drawAxis(vec2(uv)) * vec4(1.0);\n    \n    color += drawArc(uv, 0.0 , 300.0 , 0.35) * vec4(1.0, 0.0, 0.0, 1.0);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}