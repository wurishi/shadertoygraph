{"ver":"0.1","info":{"id":"3dKcRz","date":"1602133364","viewed":271,"name":"voronoi fun","username":"aksel","description":"implementation of voronoi tessellation algorithm. highly un-optimized","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CIRCLE_COLOR vec3(0,0,0);\n#define CIRCLE_RADIUS 0.015f\n#define SEED 9.0f\n#define SEED2 2.f\n\n// TODO: add some time-varying factor?\n// TODO: AA?\n\n// random functions from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n// ----------------------------------------------\n\nbool circle(in vec2 c, in vec2 p, in float rad) {\n    if (distance(c, p) <= rad) {\n    \treturn true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(1.f);\n    \n    vec2 circles[20];\n    vec3 cellCols[20] = vec3[20](vec3(0.08,0.55,0.25),\n                                vec3(0.81,0.24,0.69),\n                                vec3(0.19,0.42,0.15),\n                                vec3(0.20,0.92,0.96),\n                                vec3(0.56,0.87,0.84),\n                                vec3(0.14,0.98,0.18),\n                                vec3(0.46,0.28,0.28),\n                                vec3(0.85,0.92,0.69),\n                                vec3(0.36,0.28,0.10),\n                                vec3(0.13,0.49,0.92),\n                                vec3(0.98,0.24,0.23),\n                                vec3(0.39,0.81,0.55),\n                                vec3(0.79,0.17,0.35),\n                                vec3(0.02,0.91,0.62),\n                                vec3(0.77,0.74,0.80),\n                                vec3(0.58,0.12,0.26),\n                                vec3(0.81,0.50,0.12),\n                                vec3(0.66,0.75,0.19),\n                                vec3(0.05,0.81,0.17),\n                                vec3(0.85,0.44,0.13));\n    \n    bool circlePix = false;\n    \n    // color circles & generate cell colors\n    for (int i = 0; i < 20; ++i) {\n        float i_f = float(i);\n        float rn = rand(i_f*SEED)+rand(i_f-20.f)*SEED2;\n        float rn2 = rand((i_f-100.f)*SEED)+rand(i_f+20.f)*SEED2;\n        vec2 p = vec2(rn-1.4f, rn2-1.4f);\n        circles[i] = p;\n        if (circle(p, uv, CIRCLE_RADIUS)) {\n        \tcol = CIRCLE_COLOR;\n            circlePix = true;\n        }\n    }\n    \n    // voronoi\n    if (!circlePix) {\n        bool inThisCell = true;\n        float min_dist = 10000.0f;\n        int min_idx = 0;\n        for (int i = 0; i < 20; ++i) {\n            float dist = distance(uv, circles[i]);\n            if (dist <= min_dist) {\n            \tmin_dist = dist;\n                min_idx = i;\n            }\n        }\n        col = cellCols[min_idx];\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}