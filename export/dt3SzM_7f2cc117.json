{"ver":"0.1","info":{"id":"dt3SzM","date":"1685158902","viewed":96,"name":"Simple gyroids","username":"zenzicubic","description":"Just a gyroid with a normal material and Phong lighting\nDrag to rotate","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","implicit","gyroids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.001\n#define PI 3.14159\n\nmat2 rX, rY;\n\n// SDF and marching\nstruct Hit\n{\n   bool hit;\n   float t, i, dMin;\n   vec3 p;\n   vec3 col;\n};\n\n#define intersect(a, b) (a.x > b.x ? a : b)\n\nfloat gyroid(vec3 p, float scl)\n{\n    p *= scl;\n    float d = dot(sin(p), cos(p.zxy));\n    return (abs(d) / scl) - 0.03;\n}\n\nfloat sdScene(vec3 p)\n{\n    p.xz *= rX;\n    p.yz *= rY;\n    \n    float grd = gyroid(p, 8.);\n    p = abs(p);\n    float cube = max(max(p.x, p.y), p.z) - 1.;\n    \n    return max(grd, cube);\n}\n\n#define MAX_STEPS 300\n#define MAX_DIST 100.\n\nfloat march(vec3 ro, vec3 rd)\n{\n    // Initialize vars\n    float d, t = 0.;\n    vec3 p;\n    \n    // March\n    for (int i = 0; i < MAX_STEPS; i ++)\n    {\n        p = ro + t * rd;\n        d = sdScene(p);\n        t += d;\n        \n        if (t > MAX_DIST || abs(d) < EPS) break; // Marched too far\n    }\n    return t;\n}\n\n// Lighting\n#define EYE vec3(0., 0., 4.)\n#define R iResolution\n#define DELTA vec3(EPS, 0., 0.)\n\nvec3 normal(vec3 p)\n{\n    // Approximate normal as normalized gradient\n    float d = sdScene(p);\n    return normalize(d - vec3(\n        sdScene(p - DELTA.xyy),\n        sdScene(p - DELTA.yxy),\n        sdScene(p - DELTA.yyx)));\n}\n\n\n#define LIGHT_POS vec3(10.)\n#define AMBIENT .4\n#define DIFFUSE .7\n#define SPECULAR 1.\n#define SHININESS 10.\n#define INTENSITY .7\n\nfloat phong(vec3 p) \n{\n    // Compute the Phong lighting model at point\n    vec3 N = normal(p);\n    vec3 L = normalize(LIGHT_POS - p);\n    vec3 V = normalize(EYE - p);\n    vec3 R = reflect(-V, N);\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.) return AMBIENT; // Light not visible\n    \n    float diff = dotLN * DIFFUSE;\n    \n    if (dotRV < 0.) return AMBIENT + diff * INTENSITY; // Specular highlight not visible\n    \n    return AMBIENT + INTENSITY * (diff + pow(dotRV, SHININESS) * SPECULAR);\n}\n\n// Ray calculations\n\n#define LEN 1.25\n\nvec3 getRay(vec2 p)\n{\n    // Get ray from point\n    vec2 xy = (p - .5 * R.xy) / R.y;\n    \n    return normalize(vec3(xy, -LEN));\n}\n\n#define TOP vec3(1.)\n#define BOT vec3(0.5, 0.7, 1.)\n\nvec3 sendRay(vec2 p)\n{\n    // Get ray and color\n    vec3 rd = getRay(p);\n    float d = march(EYE, rd);\n    \n    if (d > MAX_DIST)\n    {\n        // Didn't hit the scene\n        return mix(TOP, BOT, p.y / R.y);\n    }\n    \n    // Lighting\n    vec3 pp = EYE + d * rd;\n    return .5 * (1. + normal(pp)) * phong(pp);\n}\n\n\nvoid mainImage(out vec4 k, in vec2 p)\n{\n    // Rotation matrices\n    vec2 a = -PI * (iMouse.xy / R.xy);\n    \n    rX = mat2(cos(a.x), sin(a.x), -sin(a.x), cos(a.x));\n    rY = mat2(cos(a.y), -sin(a.y), sin(a.y), cos(a.y));\n    \n    k = vec4(sendRay(p),1.0);\n}","name":"Image","description":"","type":"image"}]}