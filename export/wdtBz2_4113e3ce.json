{"ver":"0.1","info":{"id":"wdtBz2","date":"1605605984","viewed":719,"name":"Circular Time Wipe","username":"IWBTShyGuy","description":"This is a circularly reduced version of the timewipe effect used in tiktok.","likes":1,"published":3,"flags":34,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 IWBTShyGuy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float wide = max(iResolution.x, iResolution.y);\n    float narrow = min(iResolution.x, iResolution.y);\n    float asp = wide / narrow;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = (uv - 0.5) * iResolution.xy / wide;\n    float r = 1.0 / asp - (iTime - START_RAG) * VELOCITY;\n    float len = abs(r - length(pos));\n    if (len < THICKNESS) {\n        float c = 1.0 - len / (THICKNESS * 2.0);\n        fragColor = vec4(c * c * c, c * c, c, 1.0);\n    } else fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float wide = max(iResolution.x, iResolution.y);\n    float narrow = min(iResolution.x, iResolution.y);\n    float asp = wide / narrow;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = (uv - 0.5) * iResolution.xy / wide;\n    float r = 1.0 / asp - (iTime - START_RAG) * VELOCITY;\n    if (length(pos) < r)\n        fragColor = texture(iChannel0, uv);\n    else\n        fragColor = texture(iChannel1, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float START_RAG = 5.0;\nconst float VELOCITY = 0.1;\nconst float THICKNESS = 0.01;","name":"Common","description":"","type":"common"}]}