{"ver":"0.1","info":{"id":"Xct3zf","date":"1711983202","viewed":47,"name":"A clock","username":"JeffJeff","description":"Combining simple sdf shapes for a clock","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141518\n#define TWO_PI PI*2.0\n\nmat2 rotate(in float angle) {\n\n return mat2(\n     cos(angle), -sin(angle), \n     sin(angle), cos(angle)\n );\n \n}\n\n\nfloat box(in vec2 uv, float thick, float len) {\n\n    return step(abs(uv.x), thick) * step(abs(uv.y), len);\n}\n\nfloat ring(vec2 uv, float thick, float len) {\n    float d = length(uv);    \n    return step(d-thick, len) * step(len, d+thick);\n}\n\nfloat pointer(vec2 uv, float thick, float len, float rev) {\n    len *= 0.5;    \n    \n    uv *= rotate(TWO_PI*rev);\n    uv.y -= len;\n    return box(uv, thick, len);\n}\n\nfloat hMark(vec2 uv, float dist, int h) {           \n    vec2 up = vec2(0., 1.) * dist;\n    \n    uv -= up * rotate(TWO_PI * (float(h) / 12.));\n    \n    float d = length(uv);\n    return step(d, 0.04);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // from -1 to 1\n    vec2 uv = 1.5*(2. *fragCoord - iResolution.xy)/iResolution.y;\n        \n    float pMin = pointer(uv, 0.01, 0.8, mod(iTime, 15.)/15.);\n    float pHour = pointer(uv, 0.01, 0.55, mod(iTime, 60.) / (60.));\n    float ring = ring(uv, 0.01, 1.0);\n    \n    float m = 0.;\n    \n    for (int i = 0; i < 12; i++) {\n        m += hMark(uv, 0.9, i);\n    }\n    \n    vec3 color = vec3(pMin + pHour + ring + m);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}