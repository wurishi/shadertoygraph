{"ver":"0.1","info":{"id":"slfBzr","date":"1650512557","viewed":104,"name":"grass leaf test","username":"lzjseed","description":"only test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grassleaftest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define USE_ANI_TIME \n//#define LOOK_NORMAL\n//#define LOOK_NDL\n\nfloat det2(vec2 a,vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\n\nfloat triangle(vec2 p0,vec2 p1,vec2 p2,vec2 p)\n{\n    vec2 p10 = p1 - p0;\n    vec2 p20 = p2 - p0;\n    vec2 pp0 = p  - p0;\n    \n    float c = 1.0 / det2(p10 , p20);\n    float a = det2(pp0 , p20);\n    float b = det2(p10 , pp0);\n    float u = a * c;\n    float v = b * c;\n    float w = 1.0 - u - v;\n    vec3  t = abs(vec3(u,v,w) - vec3(0.5));\n    \n    t = 1.0 - smoothstep(0.5,0.53,t);\n    \n    return t.x * t.y * t.z;\n}\n\nfloat line(vec2 p0,vec2 p1,vec2 p)\n{\n    vec2 p10 = p1 - p0;\n    vec2 pp0 = p - p0;\n    vec2 p20 = p10 * clamp(dot(p10,pp0) / dot(p10,p10),0.0, 1.0);\n    return 1.0 - smoothstep(0.001,0.005,length(pp0 - p20));\n}\n\nvec4 triangleGrass(vec2 p,vec2 pos,vec2 wh,vec2 oldp)\n{\n#ifdef USE_ANI_TIME\n    float aniTime = iTime;\n#else\n    float aniTime = 0.0;\n#endif\n    vec2 p2 = vec2(pos.x + 0.0625 * sin(aniTime) , pos.y + wh.y);\n    vec2 p3 = vec2(-pos.x + 0.0625 * sin(aniTime) , pos.y + wh.y);\n    float t = triangle(vec2(pos.x - wh.x * 0.5 , pos.y) , vec2(pos.x + wh.x * 0.5 , pos.y) , p2, p);\n    float t2 = line(p2 ,pos + vec2(0.0,0.01), p) * 0.5;\n    \n    float t3 = line(vec2(p2.x , p2.y) * 1.5 ,pos + vec2(0.0,0.01), p) * 0.5;\n    \n    float t5 = line(vec2(p2.x , p2.y) * 10.0 ,pos + vec2(0.0,0.01), p) * 0.5;\n    float t6 = line(vec2(p3.x , p3.y) * 10.0 ,pos + vec2(0.0,0.01), p) * 0.5;\n    \n    t = t * (1.0 - t2) * (1.0 - t3) * (1.0 - t5) * (1.0 - t6);\n    \n    vec2  dp = (p - pos) / wh;\n    \n    float ss1 = sin(dp.y * 3.1415926 * 0.5);\n    float sc1 = cos(dp.y * 3.1415926 * 0.5);\n    float ss2 = sin(dp.x * 3.1415926 * 0.5);\n    float sc2 = cos(dp.x * 3.1415926 * 0.5);\n    \n    vec3  nor = normalize(vec3(ss2,ss1*sc2 + 0.2,sc1*sc2 + 0.1));\n    \n    return vec4(nor,t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = uv * 2.0 - 1.0;\n    vec2 oldP = p;\n    \n    float off = 0.1 * sin(p.y * 3.1415926);\n    \n    p.x = p.x + off;\n\n    vec2 p0 = vec2(0.0 + off,0.0);\n    \n    vec4 g = triangleGrass(p,p0,vec2(0.05 + off*2.0,0.5),oldP);\n    \n    vec2 mouse = (iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n    \n    float s = sin(3.1415926 * 0.5 * mouse.y);\n    float c = cos(3.1415926 * 0.5 * mouse.y);\n    \n    float s2 = sin(3.1415926 * 0.5 * mouse.x);\n    float c2 = cos(3.1415926 * 0.5 * mouse.x);\n    \n    vec3 lit = normalize(vec3(s2,s*c2,c*c2));\n    \n    float ndl = max(0.0,dot(lit,g.xyz));\n#ifdef LOOK_NORMAL\n    col = mix(col, g.xyz * 0.5 + 0.5, g.w);\n#elif defined(LOOK_NDL)\n    col = mix(col, vec3(1.0,1.0,1.0) * ndl, g.w);\n#else\n    col = mix(col, vec3(0.0,0.8,0.0) * ndl, g.w);\n#endif\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}