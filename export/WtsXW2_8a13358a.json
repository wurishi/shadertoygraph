{"ver":"0.1","info":{"id":"WtsXW2","date":"1564354078","viewed":675,"name":"1-Bit Waves","username":"ShaderPrankster","description":"Dithering on WebGL.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["waves","dithering","1bit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dither8x8(vec2 position, float brightness) {  \n  float limit = texture(iChannel0, position / iChannelResolution[0].xy).r;\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Get B&W color from dithering!\n    vec3 col = vec3(dither8x8(fragCoord,cos(iTime + uv.x * 1.2) + uv.y));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}