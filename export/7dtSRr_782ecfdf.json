{"ver":"0.1","info":{"id":"7dtSRr","date":"1632532180","viewed":50,"name":"4","username":"Jonkel","description":"Experimenting with lines and stuff","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// ab is segment, c is point\nfloat sqDistPointSegment(in vec2 a, in vec2 b, in vec2 c)\n{\n    vec2 ab = b-a, ac = c-a, bc = c-b;\n    \n    float e = dot(ac, ab);\n    \n    if(e <= 0.0f) return dot(ac, ac);\n    \n    float f = dot(ab, ab);\n    \n    if(e >= f) return dot(bc,bc);\n    \n    return dot(ac,ac) - e*e/f;\n}\n\n\nvec2 cameraTL = vec2(0,0);\nvec2 size = vec2(100.0f, 100.0f);\n\nint lineCount = 0;\n\nfloat maxTime = 30.0f;\n\n\nvec2 getVertForIndex(in int index)\n{\n    return (vec2(50.0f, 50.0f) + mod(iTime, maxTime) * 50.0f) + vec2(float(index) * 2.0f * sin(float(index)), float(index) * 2.0f * sin(float(index) - 5.0f)); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col.g = 0.0f;\n    \n    \n    // Camera transform\n    vec2 currentSize = size + mod(iTime, maxTime) * 100.0f;\n    vec2 pos = uv * currentSize + cameraTL;\n    \n\n\n    float dist = 0.0f;\n    int currentLineCount = int(mod(iTime, maxTime) * 15.f);\n   \n    \n    for(int i = 0; i < currentLineCount*2; i += 2)\n    {\n        dist += 1.0f-clamp(sqDistPointSegment(getVertForIndex(i), getVertForIndex(i+1), pos), 0.0f, 1.0f);      \n       \n    }\n    \n    \n    \n\n    // Output to screen\n    fragColor = vec4(col * dist,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}