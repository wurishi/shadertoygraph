{"ver":"0.1","info":{"id":"3l3Xzf","date":"1581406493","viewed":705,"name":"Noise - wave - 2D : vector field","username":"FabriceNeyret2","description":"variant of Wave Noise - a simple wave based noise based on extremely simplified Gabor kernel. [url]https://shadertoy.com/view/tldSRj[/url]\n\nvector field +flownoise variant using complex Gabor (attention: div(V) != 0 ;-) ).","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","velocity","arrows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// vector field variant of \"Noise - wave - 2D\" by iq. https://shadertoy.com/view/tldSRj\n\n// Fabrice's way to see it: 1 Gabor kernel at each cell center, overlapping neighbor cells\n// Here, complex Gabor instead of just the real part.\n\n#define CS(a) cos(a + vec2(0,33))\n\nvec2 g( vec2 n ) { return CS(n.x*n.y); }  // use better hash than n.x*n.y\n\nvec2 noise(vec2 p)\n{\n    const float kF = 3.1415927;\n    \n    vec2 i = floor(p);\n\tvec2 f = fract(p);\n    f = f*f*(3.-2.*f);\n    float t = (mod(i.x+i.y,2.)*2.-1.) * iTime;       // checkered rotation ( flownoise )\n    return mix(mix(CS( t+ kF*dot(p,g(i+vec2(0,0)))), // Gabor kernel (and overlapping neighbors)\n               \t   CS(-t+ kF*dot(p,g(i+vec2(1,0)))),f.x),\n               mix(CS(-t+ kF*dot(p,g(i+vec2(0,1)))),\n               \t   CS( t+ kF*dot(p,g(i+vec2(1,1)))),f.x),f.y);\n}\n\n\nfloat f, scale = 24.,      // scale of noise\n      sampling = 7.;       // density of vectors\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n\t    uv = ( u - R/2. ) / R.y,\n\t     p = fract(scale*uv)*2.-1., n; // p = local centered coords in cells\n    \n    // left: 1-band noise\t\n\tif( uv.x<0. )\n\t{\n        n = noise( floor(scale*uv)/sampling ); // floor: optional (without = curvy)\n\t}\n    // right: fractal noise (4 octaves)\n    else\t\n\t{\n        mat2 m = mat2(2); // mat2( 1.6,  1.2, -1.2,  1.6 ); // sqrt2 not floor-friendly ;-)\n#define N(uv,s) noise( floor(scale*uv/s)*s/sampling ); // floor: optional (without = curvy)\n\t\tn  = 0.5000*N( uv, 1.); uv = m*uv;\n\t\tn += 0.2500*N( uv, 2.); uv = m*uv;\n\t\tn += 0.1250*N( uv, 4.); uv = m*uv;\n\t\tn += 0.0625*N( uv, 8.); uv = m*uv;\n\t}\n\n    // --- display vector field \n    \n  //n = normalize(n);  // optional : for more dramatic vortices\n    float l = length(n),\n          x = (n.x*p.y-n.y*p.x) / l,\n          w = dot(n,p) / l;         // option: arrow points to vector dir\n    f = smoothstep(scale*3./R.y, 0., abs(x)+.05*w ); // display vector line\n    f *= smoothstep(3./R.y, 0., abs(w)- l ); // optional: show vector length\n\t\n\tO = vec4( f );\n    \n    O.x += smoothstep( 3./R.y, 0., abs(uv.x) );\t// separator\n\n}","name":"Image","description":"","type":"image"}]}