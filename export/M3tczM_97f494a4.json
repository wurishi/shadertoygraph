{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"const float tickWidth = 0.1;\n\n\nvec2 cellCoord( vec2 r ) {\n    return floor(r / tickWidth);\n}\n\nvoid fillCell( inout vec4 fragColor, vec2 cellCoord, vec2 r ) {\n    vec4 paintColor = vec4(1.0, 0.0, 0.0, 1.0);\n    vec2 cellMin = cellCoord * tickWidth;\n    vec2 cellRadius = vec2(tickWidth * 0.5);\n    vec2 cellCenter = cellMin + cellRadius;\n    \n    if (all(lessThan(abs(r-cellCenter) , cellRadius)))\n       fragColor = paintColor;\n}\n\nvoid drawGrid( inout vec4 fragColor, vec2 r ) {\n    vec4 gridColor = vec4(0.5, 0.5, 0.5, 1.0);\n    float gridLineWidth = 0.002;\n    vec4 axesColor = vec4(0.0, 0.0, 1.0, 1.0);\n    float axesLineWidth = 0.006;\n    \n    vec2 i = cellCoord(r) * tickWidth;\n\tif(abs(r.x - i.x)<gridLineWidth) fragColor = gridColor;\n\tif(abs(r.y - i.y)<gridLineWidth) fragColor = gridColor;\n\tif( abs(r.x)<axesLineWidth ) fragColor = axesColor;\n\tif( abs(r.y)<axesLineWidth ) fragColor = axesColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Relative frag and mouse coords\n    vec2 R = iResolution.xy, uv = fragCoord / max(R.x, R.y) ;\n    vec2 iMouseUV = iMouse.xy / max(R.x, R.y);\n     \n    // White background\n    fragColor = vec4(1.0);\n    \n    // Fill cells when clicked\n    vec2 cell = cellCoord(iMouseUV);\n    fillCell(fragColor, cell, uv);\n    \n    // Grid view\n\tdrawGrid(fragColor, uv);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"M3tczM","date":"1734906772","viewed":65,"name":"pixel editor","username":"wodend","description":"a pixel editor","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""}}