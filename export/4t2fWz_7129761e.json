{"ver":"0.1","info":{"id":"4t2fWz","date":"1515372521","viewed":136,"name":"6/2018","username":"rimina","description":"For today's daily shader I continued the shader from yesterday (5/2018) and added some shading, fog and light. I spent many hours testing different things. So again the result isn't that amazing, but I learned things.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define FAR 60.0\n#define EPSILON 0.5/iResolution.x\n\nvec3 repeat(vec3 p, vec3 n){\n    vec3 pp = p;\n    vec3 dif = n*0.5;\n    pp = mod(pp+dif, n) - dif;\n    \n    return pp;\n}\n\nfloat sphere(vec3 p, float r){\n    return length(p)-r;\n}\n\n\nfloat dist(vec3 p){\n    vec3 pp = repeat(p, vec3(2.0));\n    return sphere(pp, 0.16);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(0.1, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy)-dist(p-eps.xyy),\n        dist(p+eps.yxy)-dist(p-eps.yxy),\n        dist(p+eps.yyx)-dist(p-eps.yyx)\n    ));\n}\n\n//https://iquilezles.org/articles/fog\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.06);\n\tvec3  fogColor = mix(vec3(0.0, 0.0, 0.1), vec3(0.9, 0.9, 1.0), pow(sunAmount, 3.0));\n    return mix(col, fogColor, fogAmount);\n}\n\nvec3 color(vec3 p, vec3 ld, vec3 rd){\n    vec3 n = normals(p);\n\n    float lambertian = max(dot(n, ld), 0.0);\n    \n    vec3 refDir = reflect(ld, n);\n    float angle = max(dot(refDir, rd), 0.0);\n    float specular = pow(angle, 40.0);\n    \n   \tvec3 col = vec3(1.0)+\n        lambertian*vec3(0.8) +\n        specular*vec3(0.9);\n    \n    return col;\n}\n\n\nvec3 march(vec3 ro, vec3 rd, vec3 ld){\n    \n    vec3 p = ro;\n    float t = 0.0;\n    \n    for(int i = 0; i < STEPS; ++i){\n        float d = dist(p);\n        t += d;\n        p += rd*d;\n        \n        if(d < EPSILON || t > FAR){\n            break;\n        }\n    }\n    \n    vec3 col = vec3(0.0);\n    if(t <= FAR){\n        col = color(p, ld, rd);\n    }\n    \n    return smoothstep(0.2, 0.9, fog(col, p, ro, rd, ld));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    q = -1.0+2.0*q;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, 1.0);\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 rd = normalize(mat3(x, y, z)*vec3(q.xy, radians(90.0)));\n    vec3 ld = normalize(rt-ro);//normalize(vec3(0.5, 0.5, -1.0));\n    vec3 col = march(ro, rd, ld);\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}