{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//Based on https://www.shadertoy.com/view/4ds3zn by IQ\n#define igt  iTime\n\nvec4 ot; \nfloat g=1.;\n\nvec3 C =  vec3(1.05);//vec3(.7,.9,1.41);\nconst int MaxIter = 12;\n\nfloat zoom=1.2;\n\nfloat map( vec3 p )\n{\n\tfloat dr = 1.0;\n\t\n\tot = vec4(1000.0); \n\tfloat r2;\n  \n\tfor( int i=0; i<MaxIter;i++ )\n\t{\n        \n        \n       \n        r2 = dot(p,p);\n        if(r2>100.)continue;\n\t\t\n        ot = min( ot, vec4(abs(p),r2) );\n\n\t\t//Kali formula \n        p=abs(p)/r2*g-C; \n         \n\t\tdr= dr/r2*g;            \n\t\t\n\t}\t\n\treturn .1*(abs(p.x)+abs(p.y))*length(p)/dr;\n\t//return .1*(length(p.xz)*abs(p.y)+length(p.xy)*abs(p.z)+length(p.yz)*abs(p.x))/dr;\n\t//return .15*(length(p.xz))*length(p.xy)/dr;\n\t//return .125*sqrt(r2)*log(r2)/dr;\n\t//return .1*length(p)/dr;\n\t\n}\n\nfloat trace( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 20.;\n\tfloat precis = 0.001;\n      \n    float h=precis*2.0;\n    float t = 0.0;\n    for( int i=0; i<150; i++ )\n    {\n\tif( t>maxd ||  h<precis*(.1+t)) continue;//break;//        \n        \n        t += h;\n\t\th = map( ro+rd*t );\n    }\n\n   \tif( t>maxd ) t=-1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3  eps = vec3(.0001,0.0,0.0);\n\tvec3 nor;\n\tnor.x = map(pos+eps.xyy) - map(pos-eps.xyy);\n\tnor.y = map(pos+eps.yxy) - map(pos-eps.yxy);\n\tnor.z = map(pos+eps.yyx) - map(pos-eps.yyx);\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n\t\n\tvec2 m = vec2(-0.5)*6.28;\n\tif( iMouse.z>0.0 )m = (iMouse.xy/iResolution.xy-.5)*6.28;\n\tm+=.5*vec2(cos(0.15*igt),cos(0.09*igt))+.3;      \n\t\n    // camera\n\n\n\tvec3 ta = vec3(0.,.2*sin(0.12*igt),0.);\n\tvec3 ro = ta- zoom*vec3( cos(m.x)*cos(m.y), sin(m.y), sin(m.x)*cos(m.y));\n\t\n\t\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.,1.,0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n\n    // trace\t\n\tvec3 col = vec3(0.8,0.8,1.);\n\tfloat t = trace( ro, rd );\n\tif( t>0.0 )\n\t{\n\t\t\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\t\n\t\t// lighting\n        vec3  light1 = vec3(  0.577, 0.577, -0.577 );\n        vec3  light2 = vec3( -0.707, -0.707,0.0  );\n\t\tfloat key = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( light2, nor ), 0.0, 1.0 );\n\t\tfloat amb = (0.7+0.3*nor.y);\n\t\tfloat ao = pow( clamp(ot.w*2.0,0.2,1.0), 1.2 );\t\t\n        vec3 brdf = vec3(ao)*(.4*amb+key+.2*bac);\n\n        // material\t\t\n\t\tvec3 rgb = vec3(1.0);\n\t\t\n\t\trgb =(0.4*abs(sin(2.5+(vec3(.5*ot.w,ot.y*ot.y,2.-5.*ot.w))))+1.6*sin(vec3(-0.2,-0.6,0.8)+0.+ot.x*18.))*.85 + .15;\n\t\trgb.gbr=mix(rgb,rgb.bgr+vec3(0.3,0.1,-.2),0.5+.5*sin(8.5*ot.w));\n\n\n\t\t// color\n\t\tcol = mix(vec3(0.8,0.8,1.),rgb*brdf,exp(-0.08*t));\n\t}\n\n\t\n\tfragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xs2GDK","date":"1393601278","viewed":453,"name":"Kali3d2","username":"guil","description":"An exotic de for rendering kleinian fractals (see line 37), here a Kaliset.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","distanceestimation"],"hasliked":0,"parentid":"","parentname":""}}