{"ver":"0.1","info":{"id":"tddyDl","date":"1602024653","viewed":281,"name":"How does Domain Warping Sound?","username":"Shapkofil","description":"What better to do on a Tuesday night?\nInspired by Inigo Quilez domain warping article.","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["audionoisenoisedomainwarping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    // \t<www.shadertoy.com/view/XsX3zB>\n    //\tby Nikita Miropolskiy\n\n    /* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\n    vec3 random3(vec3 c) {\n        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n        vec3 r;\n        r.z = fract(512.0*j);\n        j *= .125;\n        r.x = fract(512.0*j);\n        j *= .125;\n        r.y = fract(512.0*j);\n        return r-0.5;\n    }\n\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    float noise(vec3 p) {\n\n        vec3 s = floor(p + dot(p, vec3(F3)));\n        vec3 x = p - s + dot(s, vec3(G3));\n\n        vec3 e = step(vec3(0.0), x - x.yzx);\n        vec3 i1 = e*(1.0 - e.zxy);\n        vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n        vec3 x1 = x - i1 + G3;\n        vec3 x2 = x - i2 + 2.0*G3;\n        vec3 x3 = x - 1.0 + 3.0*G3;\n\n        vec4 w, d;\n\n        w.x = dot(x, x);\n        w.y = dot(x1, x1);\n        w.z = dot(x2, x2);\n        w.w = dot(x3, x3);\n\n        w = max(0.6 - w, 0.0);\n\n        d.x = dot(random3(s), x);\n        d.y = dot(random3(s + i1), x1);\n        d.z = dot(random3(s + i2), x2);\n        d.w = dot(random3(s + 1.0), x3);\n\n        w *= w;\n        w *= w;\n        d *= w;\n\n        return 0.5 + dot(d, vec4(43.0));\n    }\n\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 4; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n//by Inigo Quilez\nfloat pattern( in vec3 p, out vec3 q, out vec3 r)\n{\n    q = vec3( fbm( p + vec3(1.3, 5.2, 0.0) ),\n                   fbm( p + vec3(5.2,1.3, 0.0) ),\n                   fbm( p + vec3(0.0,0.0, 1.0) ));\n\n    r = vec3( fbm( p + 4.0*q + vec3(1.3, 5.2, 0.0) ),\n                   fbm( p + 4.0*q + vec3(5.2,1.3, 0.0) ),\n                   fbm( p + 4.0*q + vec3(0.0,0.0, 1.0) ));\n\n    return fbm( p + 4.0*r );\n}\n\n\n\nconst float time_scale = 0.03;\nconst float texture_scale = 0.003;\n\n\nconst vec3 color4 = vec3(6, 32, 12)/255.0;\nconst vec3 color3 = vec3(16, 100, 132)/255.0;\nconst vec3 color2 = vec3(216, 43, 43)/255.0;\nconst vec3 color1 = vec3(233, 233, 227)/255.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 q,r;\n    float n = pattern(vec3(fragCoord * texture_scale, iTime*time_scale), q, r);\n    \n    vec3 col = mix(mix(mix(color1,\n        color2, r.z),\n        color3,q.x),\n        color4, n);\n   \n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// \t<www.shadertoy.com/view/XsX3zB>\n//\tby Nikita Miropolskiy\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat noise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return 0.5 + dot(d, vec4(43.0));\n}\n\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < 4; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n//by Inigo Quilez\nfloat pattern( in vec3 p, out vec3 q, out vec3 r)\n{\n    q = vec3( fbm( p + vec3(1.3, 5.2, 0.0) ),\n                   fbm( p + vec3(5.2,1.3, 0.0) ),\n                   fbm( p + vec3(0.0,0.0, 1.0) ));\n\n    r = vec3( fbm( p + 4.0*q + vec3(1.3, 5.2, 0.0) ),\n                   fbm( p + 4.0*q + vec3(5.2,1.3, 0.0) ),\n                   fbm( p + 4.0*q + vec3(0.0,0.0, 1.0) ));\n\n    return fbm( p + 4.0*r );\n}\n\n\n\nconst float time_scale = 0.03;\nconst float texture_scale = 0.003;\n\n\nconst vec3 color4 = vec3(44, 53, 50)/255.0;\nconst vec3 color3 = vec3(16, 100, 132)/255.0;\nconst vec3 color2 = vec3(216, 96, 108)/255.0;\nconst vec3 color1 = vec3(210, 233, 227)/255.0;\n\nconst float freq1 = 440.0;\nconst float freq2 = 220.0;\nconst float freq3 = 110.0;\n\n\nvec2 mainSound( in int samp, float time )\n{\n    vec3 q,r;\n    float n = pattern(vec3(vec2(1) * texture_scale, time*time_scale), q, r);\n    \n    return vec2( sin(6.2831*(freq1 + (2.0*n - 1.0) * 1.0)) * 0.25 +\n                sin(6.2831*(freq2 + (2.0*r.x - 1.0) * 5.0)) * 0.5 +\n                sin(6.2831*(freq3 + (2.0*q.x - 1.0) * 10.0)) * 1.0\n               );\n}","name":"Sound","description":"","type":"sound"}]}