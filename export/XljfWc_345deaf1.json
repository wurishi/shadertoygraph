{"ver":"0.1","info":{"id":"XljfWc","date":"1517417053","viewed":187,"name":"implicit graph plotter","username":"unnick","description":"made an implicit graph generator by first computing which points are inside the graph and then detecting edges.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["2d","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const vec2[] offsets = vec2[](\n//    vec2(1.0, 0.0),\n//    vec2(0.0, 1.0),\n//    vec2(-1.0, 0.0),\n//    vec2(0.0, -1.0)\n//);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    \n    //old version\n    //bool color = texture(iChannel0, uv).r > 0.5;\n    //vec2 d = 1.0 / iResolution.xy;\n    //for(int i = 0; i < offsets.length(); i++){\n    //    if((texture(iChannel0, uv+d*offsets[i]).r>0.5) ^^ color){\n    //        fragColor = vec4(0.0);\n    //        return;\n    //    }\n    //}\n    //fragColor = vec4(1.0);\n    \n    //new version (thanks to fabrice for pointing this method out :) )\n    //(i made just minor edit to make the graph darker,\n    //i replaced clamp(-1., 1., ...) with clamp(0.0, 1.0, ...) .\n    float color = texture(iChannel0, uv).r;\n    fragColor = vec4(smoothstep(0.0, 1.0, abs(color)/fwidth(color)));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord.xy - iResolution.xy / 2.0) / min(iResolution.x, iResolution.y) * 2.0;\n    //replaced the abusing of dot() with this (again, thanks to fabrice for pointing this method out :) )\n    vec2 p = cos(pos*6.283*sin(iTime)*5.0+5.0)*0.1;\n    float o = length(pos)+p.x+p.y-0.5;\n    fragColor = vec4(o);\n}","name":"Buf A","description":"","type":"buffer"}]}