{"ver":"0.1","info":{"id":"3lB3R3","date":"1560363155","viewed":130,"name":"Simplex noise exercise","username":"abelu","description":"An exercise in simplex noise animation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex","exercise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 mod289(vec3 x) { \n  return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec2 mod289(vec2 x) { \n  return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec3 permute(vec3 x) { \n  return mod289(((x*34.0)+1.0)*x); \n}\n\nfloat snoise(vec2 v) {\n  // Precompute values for skewed triangular grid\n  const vec4 C = vec4(0.211324865405187,\n                      // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,\n                      // 0.5*(sqrt(3.0)-1.0)\n                      -0.577350269189626,\n                      // -1.0 + 2.0 * C.x\n                      0.024390243902439);\n                      // 1.0 / 41.0\n\n  // First corner (x0)\n  vec2 i  = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n\n  // Other two corners (x1, x2)\n  vec2 i1 = vec2(0.0);\n  i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n  vec2 x1 = x0.xy + C.xx - i1;\n  vec2 x2 = x0.xy + C.zz;\n\n  // Do some permutations to avoid\n  // truncation effects in permutation\n  i = mod289(i);\n  vec3 p = permute(\n          permute( i.y + vec3(0.0, i1.y, 1.0))\n              + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(\n                      dot(x0,x0),\n                      dot(x1,x1),\n                      dot(x2,x2)\n                      ), 0.0);\n\n  m = m*m ;\n  m = m*m ;\n\n  // Gradients:\n  //  41 pts uniformly over a line, mapped onto a diamond\n  //  The ring size 17*17 = 289 is close to a multiple\n  //      of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  // Normalise gradients implicitly by scaling m\n  // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n  // Compute final noise value at P\n  vec3 g = vec3(0.0);\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n  return 130.0 * dot(m, g);\n}\n\nfloat lines(in vec2 st, float b) {\n  float scale = 5.;\n  st *= scale;\n\n  return smoothstep(\n    0.,\n    .5 + b * .5,\n    abs((sin(st.x * PI) + b * 1.9)) * .35\n  );\n}\n\nvec2 rotate2d(in vec2 st, in float a) {\n  return st * mat2(cos(a), -sin(a),\n                   sin(a), cos(a));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 st = gl_FragCoord.xy / iResolution.xy;\n\n  vec2 ps = st - vec2(.5);\n  st *= 12.;\n\n  float noise = snoise(st) * .43 + .48;\n  float len = 1. - smoothstep(.0, .6 + .5 * sin(iTime * 2.), length(ps));\n  float pattern = lines(vec2(noise) * len, .3);\n\n  fragColor = vec4(\n    vec3(\n      pattern, \n      noise * len, \n      len\n    ), \n  1.);\n}","name":"Image","description":"","type":"image"}]}