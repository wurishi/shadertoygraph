{"ver":"0.1","info":{"id":"4sVczt","date":"1536777919","viewed":1050,"name":"Fun triangle","username":"Michael_Manning","description":"A mistake gone right from another one of my shaders","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Time simplification and easier overall speed control.\n#define time iTime * 60.35\n#define speed 0.9\n#define scaleCo 0.25\n#define rotation 1.4\n#define angleOffset 0.1\n#define intensity 2.1\n#define outerOffset 0.9\n#define polygonSides 3\n\n#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\n\nmat2 rot(float a){\n    return mat2(\n        sin(a),cos(a),\n        cos(a),-sin(a)\n        );\n}\n\n//from thebookofshaders.com\nfloat polygon (vec2 st, float radius, int sides , float angle, float blur) {\n    \n      // Angle and radius from the current pixel\n      float a = atan(st.x,st.y)+PI;\n      float r = TWOPI/float(sides);\n\n      // Shaping function that modulate the distance\n      float d = cos(floor(.5+a/r)*r-a)*length(st);\n      return (1.0-smoothstep(radius, radius + blur ,d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\t\n\tvec2 twistedUV =uv;\n    \n\tvec3 bgCol = vec3(0.85,0.85,1.0);\n\tvec3 pixel = bgCol;\n    \n    float originalAngle = PI * rotation * sin(speed * iTime) + length(uv) * -cos(speed * (iTime - outerOffset)) * intensity;\n    \n    float i = 0.0;\n    for(float j = 20.0; j > 0.0; j--)\n    {    \n        float scale = (j * scaleCo);\n        float angle = originalAngle+  angleOffset * j;\n        twistedUV =  vec2(1.0) * uv * rot(angle);\n        \n        if(polygon(twistedUV, 0.4 * scale, polygonSides, 0.0, 0.065) > 0.0 ||\n           polygon(twistedUV, (0.4 - 0.02/scale) * scale, polygonSides, 0.0, 0.0022) > 0.0){\n            i = j;\n        }\n    }  \n    \n    \n    \tfloat angle = originalAngle+  angleOffset * i;\n        \n        float scale = (i * scaleCo);\n        vec3 changingColor = 0.5 + 0.5*cos(5.0*iTime+  (20.0-i) * 0.9 +vec3(0,2,4));     \n\t    twistedUV = uv;\n           \n        \n        pixel = mix(pixel, (vec3(0.04 * i) + changingColor)/2.0 , polygon(twistedUV, 0.4 * scale, polygonSides, 0.0, 0.065));\n\t\tpixel = mix(pixel, (vec3(0.06 * (17.0-i)) + changingColor)/2.0 , polygon(twistedUV, (0.4 - 0.02/scale) * scale, polygonSides, 0.0, 0.0022));\n    \n\tfragColor =vec4(pixel, 1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}