{"ver":"0.1","info":{"id":"ttlfz8","date":"1596037680","viewed":118,"name":"Julian Fractal Explorer 2.0","username":"berzerkey","description":"Working on developing a fractal explorer.  Click on the shader to explore different patterns.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Inspired by Art of Code tutorial.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 m = iMouse.xy / iResolution.xy; // Returnes normalized mouse coordinates.\n    float zoom = pow(20.,-m.x*3.);\n    \n    // Normalized pixel coordinates (from 0 to 1 and centers origin)\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    vec2 mc = (m.xy-.5*iResolution.xy) / iResolution.y;\n\n    vec2 c = uv;//*zoom*3.;\n   \n    const float max_iter = 200.;\n   \n    \n    \n    \n    //Julian Set\n    m-=.5;\n    vec2 cj = m;\n    vec2 zj = uv;\n    float iterj =0.;\n    for (float i=0.;i<max_iter;i++)\n    {\n     \t  zj = vec2(zj.x*zj.x - zj.y*zj.y, 2.*zj.x*zj.y) + cj;\n        \n        if (length(zj) > 2.) break;\n        \n        iterj++;\n    }\n    float fj = iterj/max_iter;\n\n    \n    \n    vec3 col = vec3 (fj,fj*length(zj*fj),length(fj)*zj);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}