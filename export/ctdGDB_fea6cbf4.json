{"ver":"0.1","info":{"id":"ctdGDB","date":"1683050869","viewed":127,"name":"Galaxy flash","username":"bronna","description":"Based on https://thebookofshaders.com/07/","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["space","galaxy","red","blue","flash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// easing function from https://easings.net/\nfloat quarticInOut(float t) {\n  return t < 0.5\n    ? +8.0 * pow(t, 4.0)\n    : -8.0 * pow(t - 1.0, 4.0) + 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate the aspect ratio\n    float aspectRatio = iResolution.y / iResolution.x;\n    \n\t// Calculate the normalized pixel coordinates\n    vec2 uv = ( ( fragCoord.xy / iResolution.xy ) - 0.5 ) * vec2( 1.0, aspectRatio ) + vec2( 0.5 );\n    float position = 0.0;\n    \n    float t = quarticInOut(abs(fract(iTime)) / 2.4);\n\n    // the galaxy\n    position = max(distance(uv,vec2(0.1)),distance(uv,vec2(0.9)));\n    float circ = smoothstep(0.49, position, 0.5+t/4.0);\n\n    vec3 color = vec3(circ, 0.2, 0.4);\n\n\tfragColor = vec4( color, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}