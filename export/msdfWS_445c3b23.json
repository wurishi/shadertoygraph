{"ver":"0.1","info":{"id":"msdfWS","date":"1697616839","viewed":23,"name":"DMV_PineLandscape","username":"duarto0","description":"A shader made following the tutorial series of YT:The Art of Code: https://www.youtube.com/watch?v=LLZPnh_LK8c","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","night"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a,b,t) smoothstep(a,b,t)\n\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur) {\n    float m = S(-blur, blur, p.y-yb);\n    m *= S(blur, -blur, p.y-yt);\n    p.x = abs(p.x); //folds the x coord\n    \n    // 0 p.y=yb 1 p.y=yt\n    float w = mix(wb, wt, (p.y-yb) /(yt-yb));\n    m *= S(blur, -blur, p.x-w);\n    return m;\n}\n\nvec4 buildAPine(vec2 uv, float x, float y, vec3 col, float blur) {\n    \n    uv -= vec2(x,y);\n    \n    //THE TREE\n    float m = TaperBox(uv, .03, .03, -.05, .25, blur); //trunk\n    m += TaperBox(uv, .2, .1, .25, .5, blur); //canopy 1\n    m += TaperBox(uv, .15, .05, .5, .75, blur); //canopy 2\n    m += TaperBox(uv, .1, .0, .75, 1., blur); //canopy 3\n    \n    //SHADOWS\n    float shadow = TaperBox(uv-vec2(.2,0), .1, .5, .15, .25, blur);\n    shadow += TaperBox(uv, .3, .1, .48, .5, blur);\n    shadow += TaperBox(uv, .3, .1, .73, .75, blur);\n    col -= shadow*.8;\n    //m=1.;\n    \n    return vec4(col, m);\n}\n\nfloat GetHeight(float x){\n    return sin(x*0.3234) + sin(x)*.3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //uv.y += .5;\n    uv.x += iTime*.2;\n    uv *= 3.;\n    \n    float blur = 0.001;\n\n    vec4 col = vec4(0);\n    \n    float id = floor(uv.x); //each repetition has a different id\n    float n = fract(sin(id*234.12)*5463.3)*2.0-1.0;\n    float x = n*.3;\n    float y = GetHeight(uv.x);\n    \n    col += S(blur, -blur, uv.y+y); //Suelo\n    \n    y = GetHeight(id+0.5+x);\n    \n    uv.x = fract(uv.x)-.5; \n\n    vec4 tree = buildAPine(uv*vec2(1,1.+n*.2), x, -y, vec3(1), blur);\n    \n    //col.rg = uv; //Visualize uv\n    col = mix(col, tree, tree.a);\n    \n    \n    \n    float thickness = 1./iResolution.y;\n    //if(abs(uv.x)<thickness) col.r = 1.;\n    //if(abs(uv.y)<thickness) col.r = 1.;\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}