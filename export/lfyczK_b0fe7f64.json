{"ver":"0.1","info":{"id":"lfyczK","date":"1732091549","viewed":9,"name":"Bread Pattern Moving","username":"vitasa","description":"bread pattern moving from left to right","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["moving","bread"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Signed distance function for an ellipse (oval)\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    // Calculate the normalized distance\n    vec2 k = abs(p) / r;\n    return (length(k) - 1.0) * min(r.x, r.y);\n}\n\n// Signed distance function for a square (box)\nfloat sdSquare(vec2 p, float size)\n{\n    vec2 d = abs(p) - vec2(size / 2.0);\n    return max(d.x, d.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    // Adjust for aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Parameters for movement and repetition\n    float speed = 0.2;        // Speed at which the slices move\n    float interval = 1.0;     // Distance between slices\n\n    // Time-based horizontal shift to move slices\n    float x = uv.x - speed * iTime;\n\n    // Repeat the bread slice across the x-axis\n    x = mod(x + interval / 2.0, interval) - interval / 2.0;\n\n    // Use the modified x-coordinate\n    vec2 tileUV = vec2(x, uv.y);\n\n    // Square parameters (body of the bread)\n    float squareSize = 0.5;              // Size of the square\n    vec2 squareCenter = vec2(0.0, 0.0);  // Center of the square\n\n    // Oval parameters (top of the bread)\n    vec2 ovalRadii = vec2(0.3, 0.15);    // Radii along x and y axes\n    vec2 ovalCenter = vec2(0.0, 0.2);    // Center of the oval\n\n    // Compute signed distances for the square and oval\n    float dSquare = sdSquare(tileUV - squareCenter, squareSize);\n    float dOval = sdEllipse(tileUV - ovalCenter, ovalRadii);\n\n    // Combine the square and oval using union operation\n    float d = min(dSquare, dOval);\n\n    // Smooth edges for anti-aliasing\n    float thickness = 0.005;\n    float color = smoothstep(0.0, thickness, -d);\n\n    // Set the fragment color (black shape on white background)\n    fragColor = vec4(vec3(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}