{"ver":"0.1","info":{"id":"McBXDR","date":"1706196995","viewed":63,"name":"Abstract circle","username":"Zokalyx","description":"Part of my practice with the book of shaders. This uses the Voronoi Algorithm and a transformation to polar coordinates.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","abstract","glitch","loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: zokalyx\n// Title: Abstract circle\n// Comment: Part of my practice with the book of shaders.\n// This uses the Voronoi Algorithm and a transformation to polar coordinates.\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 mt = iMouse.xy / iResolution.xy;\n    vec2 st = fragCoord/iResolution.y;\n    st.x -= (iResolution.x - iResolution.y) / 2.0 / iResolution.y;\n    vec3 color = vec3(.0);\n\n    // Scale\n    mt *= 9.0;\n    st *= 15.0;\n    \n    // Transform\n    float radius = distance(st, vec2(7.5));\n    float angle = atan(st.y / st.x) + iTime / 2.0;\n    \n    st = vec2(radius, angle);\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    // Minimum distance\n    float m_dist = 1.;\n    vec2 m_point;\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_st + neighbor);\n\n\t\t\t// Animate the point\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            if (dist < m_dist) {\n                m_dist = dist;\n                m_point = neighbor + point;\n            }\n            m_dist = min(m_dist, dist);\n        }\n    }\n    \n    // Also check mouse\n    float mouseDist = distance(i_st + f_st, mt);\n   if (mouseDist < m_dist) {\n        m_dist = mouseDist;\n        m_point = mt;\n    }\n\n    // Draw the min distance (distance field)\n    color.g += step(0.5 + 0.25 * sin(iTime), m_point.x) * step(radius, 7.0);\n    \n    // Only show a circle\n\n    // Draw cell center\n    // color += 1.-step(.02, m_dist);\n\n    // Draw grid\n    // color.r += step(.98, f_st.x) + step(.98, f_st.y);\n\n    // Show isolines\n    // color -= step(.7,abs(sin(27.0*m_dist)))*.5;\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}