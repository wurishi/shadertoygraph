{"ver":"0.1","info":{"id":"Dd3cDS","date":"1695387559","viewed":81,"name":"flowing 'warped noise' (simple)","username":"18smith111","description":"applying domain-warp to the noise function itself\n\ni try to recreate some of the shaders i created in Unity shadergraph but it's slightly more tricky\nand it's also not being supported by inbuilt lighting systems so it doesn't look quite as nice..","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["domainwarp","simplenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash function\nfloat hash(vec2 p) \n{\n\n    vec2 tr = fract(p * vec2(12.9898, 78.233));\n    \n    float LargePrime = 522627.26253;\n    float sum = tr.x+tr.y;\n    \n    return fract( sin(sum)*LargePrime );\n    \n}\n\n// Perlin noise function\nfloat SimpleNoise(vec2 p,float scale) \n{\n    p*=scale;\n    \n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    // Calculate the gradients at the corners of the cell\n    float topLeft = hash(i);\n    float topRight = hash(i + vec2(1.0, 0.0));\n    float bottomLeft = hash(i + vec2(0.0, 1.0));\n    float bottomRight = hash(i + vec2(1.0, 1.0));\n\n    // Interpolate along x-axis\n    float v1 = mix(topLeft, topRight, f.x);\n    float v2 = mix(bottomLeft, bottomRight, f.x);\n\n    // Interpolate along y-axis\n    return mix(v1, v2, f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n    uv2.y+=iTime*0.01;\n    float scaledTime = iTime*0.18;\n    uv.x += iTime*0.01;\n\n\n    float F0 = SimpleNoise(uv,20.0-scaledTime);\n    float F2 = SimpleNoise(uv2,15.0-scaledTime);\n    \n    vec2 Tr0 = vec2(F0,F2);\n\n    float F3 = SimpleNoise(Tr0,30.0);\n\n    vec3 col = vec3(F3*F0,F3*F2,F3*F2)*2.0;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}