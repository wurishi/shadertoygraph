{"ver":"0.1","info":{"id":"MsV3Dw","date":"1454885953","viewed":556,"name":"Real Fresnel Glass","username":"Yoshimaster96","description":"This shader uses the real Fresnel equations (not the Schlick approximation) to render a glass sphere of refractive index 1.5.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["glass","fresnel","real"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    uv = (uv*2.0)-vec2(1.0);\n    if(length(uv)<=1.0)\n    {\n        vec3 nrm = vec3(uv,sqrt(1.0-(uv.x*uv.x)-(uv.y*uv.y)));\n        vec3 refl = reflect(vec3(0.0,0.0,-1.0),nrm);\n        vec3 refr = refract(vec3(0.0,0.0,-1.0),nrm,0.666667);\n        float ci = dot(refl,nrm);\n        float ct = dot(refr,-nrm);\n        float rs = pow((ci-(1.5*ct))/(ci+(1.5*ct)),2.0);\n        float rp = pow((ct-(1.5*ci))/(ct+(1.5*ci)),2.0);\n        float r = (rs+rp)/2.0;\n        fragColor = r*texture(iChannel0,refl)+(1.0-r)*texture(iChannel0,refr);\n    }\n}","name":"Image","description":"","type":"image"}]}