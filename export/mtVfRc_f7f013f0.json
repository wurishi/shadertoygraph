{"ver":"0.1","info":{"id":"mtVfRc","date":"1702349809","viewed":17,"name":"BOIDS Zihang He","username":"zihang","description":"for cse 167 hw 5.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // constants\n    float smax = 10.0;\n    float smin = 5.0;\n    float ds = 30.0;\n    float alphas = 0.02;\n    float dv = 150.0;\n    float alphaa = 0.03;\n    float alphac = 0.001;\n    float dleft = 200.0;\n    float dright = iResolution.x;\n    dright = dright - 200.0;\n    float dtop = 160.0;\n    float dbottom = iResolution.y;\n    dbottom = dbottom - 160.0;\n    \n    \n    float alphab = 0.5;\n    \n    float Nv = 0.0;\n    float Ns = 0.0;\n    vec2 fs = vec2(0.0, 0.0);\n    vec2 pos_a = vec2(0.0, 0.0);\n    vec2 vel_a = vec2(0.0, 0.0);\n    \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        if (i == my_id) continue; // Skip the current boid\n\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x), i / int(iChannelResolution[0].x));\n        vec4 otherBoid = texelFetch(iChannel0, tex_pos, 0);\n\n        float distance = length(otherBoid.xy - pos);\n        \n        if (distance < ds && distance > 0.0){\n            fs += (pos - otherBoid.xy);\n            Ns += 1.0;\n        }\n        if (distance < dv && distance > 0.0){\n            Nv += 1.0;\n            pos_a += otherBoid.xy;\n            vel_a += otherBoid.zw;\n        }\n    }\n    vec2 fc;\n    vec2 fa;\n    if (Nv > 0.0) {\n        fc = (pos_a / Nv) - pos;\n        fa = (vel_a / Nv) - vel;\n    } else {\n        fc = vec2(0.0, 0.0);\n        fa = vec2(0.0, 0.0);\n    }\n    if (Ns > 0.0){\n        fs = fs / Ns;\n    } else {\n        fs = vec2(0.0, 0.0);\n    }\n    //vec2 fb = ((pos.x < dleft) - (pos.x > dright), (pos.y < dtop) - (pos.y > dbottom));\n    vec2 fb = vec2((pos.x < dleft ? 1.0 : 0.0) - (pos.x > dright ? 1.0 : 0.0), \n               (pos.y < dtop ? 1.0 : 0.0) - (pos.y > dbottom ? 1.0 : 0.0));\n\n    \n    vec2 F = alphas * fs + alphac * fc + alphaa * fa + alphab * fb;\n    vel += F;\n    float speed = length(vel);\n    if (speed > smax) {\n        vel = vel * (smax / speed);\n    } else if (speed < smin) {\n        vel = vel * (smin / speed);\n    }\n    pos += vel;\n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}