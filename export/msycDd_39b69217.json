{"ver":"0.1","info":{"id":"msycDd","date":"1696740231","viewed":30,"name":"Sand Game Lab Colorful","username":"FeatherPurple","description":"4 types of sand.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["game","simulation","animation"],"hasliked":0,"parentid":"dsXBz8","parentname":"Sand Game Colorful"},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//vec4 bayer(in vec4 color, in vec2 fragCoord) {\n//    vec4 result = color - 4.0*(texture(iChannel1,fragCoord/8.0).x);\n//         result = vec4(result.x > 0.0 ? 1.0 : 0.0,\n//                       result.y > 0.0 ? 1.0 : 0.0,\n//                       result.z > 0.0 ? 1.0 : 0.0,\n//                       result.w > 0.0 ? 1.0 : 0.0);\n//         return result;\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(texture(iChannel0,(0.2*fragCoord - 0.1*iResolution.xy + iMouse.xy)/iResolution.xy).xxx,1.0);\n    //fragColor = mix(vec4(0.5, 0.6, 1.0, 1.0), vec4(1.0, 0.6, 0.3, 1.0),\n    //                pow(texture(iChannel0,fragCoord/iResolution.xy).y, 1./2.2));\n    \n    //const mat4 colors = transpose(mat4(\n    //    vec4(5., 3., 0., 0.)/8.,\n    //    vec4(0., 4., 4., 0.)/8.,\n    //    vec4(0., 0., 3., 5.)/8.,\n    //    vec4(1.)\n    //));\n    \n    //const mat4 colors = transpose(mat4(\n    //    vec4(1., 2., 0., 0.)/3.,\n    //    vec4(1., 0., 0., 2.)/3.,\n    //    vec4(1., 0., 2., 0.)/3.,\n    //    vec4(1.)\n    //));\n    \n    const float pi = 3.1415926536;\n    const float L = 0.751;\n    const float sat = 0.127;\n    const mat4x2 colors = sat*transpose(mat2x4(\n        vec4(-.5,-.5,-.5,-.5),\n        vec4( .5, .5,-.5,-.5)*sqrt(3.)\n    ));\n    //const mat4x2 colors = sat*transpose(mat2x4(\n    //    vec4(-1.,-1.,-1.,-1.),\n    //    vec4( 1., 1.,-1.,-1.)\n    //));\n    \n    float h = mod(iTime*0.5, 2.*pi);\n    mat2 hueShift = mat2(\n        vec2( cos(h), sin(h)),\n        vec2(-sin(h), cos(h))\n    );\n    \n    fragCoord /= iResolution.xy;\n    fragCoord.x = fract(fragCoord.x - fract(iTime/rotTime));\n    \n    vec2 ab = hueShift*(vec2(sat, 0.) + colors*texture(iChannel0,fragCoord));\n    \n    fragColor.xyz = lab2rgb(vec3(L*length(ab)/sat, ab));\n    //fragColor.xyz = (colors*bayer(texture(iChannel0,fragCoord/iResolution.xy), fragCoord)).xyz;\n    fragColor.w = 1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 bezier(vec2 prev, vec2 p0, vec2 p1, vec2 next, float t) {\n    vec2 c0 = p0 + (p1 - prev)/6.;\n    vec2 c1 = p1 + (p0 - next)/6.;\n    \n    return (1.-t)*(1.-t)*(1.-t)       * p0 +\n               3.*(1.-t)*(1.-t)*t     * c0 +\n                      3.*(1.-t)*t*t   * c1 +\n                                t*t*t * p1;\n}\n\n// Run simulation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec4 dir = vec4(1., 0., 0., 1.);\n    vec4 i = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    bool top = fragCoord.y == iResolution.y - 0.5;\n    bool bottom = fragCoord.y == 0.5;\n    \n    vec4 u = top ? 0.95*(dir) :\n             texture(iChannel0, (fragCoord + vec2( 0.0,  1.0))/iResolution.xy);\n    vec4 d = bottom ? 0.95*(1.-dir) :\n             texture(iChannel0, (fragCoord + vec2( 0.0, -1.0))/iResolution.xy);\n    \n    const vec4 fall = vec4(0.8, 0.7, 0.9, 0.6);\n    const vec4 stay = 1.0 - fall; //vec4(0.2, 0.3, 0.3, 0.1);\n    \n    fragColor = fall*mix(u, d, dir + (1.-2.*dir) * i) + stay*i;\n    \n    const int move = 170;\n    const float brush = 50.0;\n    vec2 scale = iResolution.xy * vec2(1.0, 0.8) - vec2(0.0, 2.*brush + 2.);\n    \n    vec2 mPos0 = mod(vec2(\n        0.5 + float((iFrame/move - 1)),\n        0.5 + float((iFrame/move - 1)/256)\n    ), 256.)/256.;\n    mPos0 = texture(iChannel1, mPos0).rg;\n    vec2 mPos1 = mod(vec2(\n        0.5 + float((iFrame/move    )),\n        0.5 + float((iFrame/move    )/256)\n    ), 256.)/256.;\n    mPos1 = texture(iChannel1, mPos1).rg;\n    mPos1.x = fract(mPos1.x - mPos0.x + 0.5) + mPos0.x - 0.5;\n    vec2 mPos2 = mod(vec2(\n        0.5 + float((iFrame/move + 1)),\n        0.5 + float((iFrame/move + 1)/256)\n    ), 256.)/256.;\n    mPos2 = texture(iChannel1, mPos2).rg;\n    mPos2.x = fract(mPos2.x - mPos1.x + 0.5) + mPos1.x - 0.5;\n    vec2 mPos3 = mod(vec2(\n        0.5 + float((iFrame/move + 2)),\n        0.5 + float((iFrame/move + 2)/256)\n    ), 256.)/256.;\n    mPos3 = texture(iChannel1, mPos3).rg;\n    mPos3.x = fract(mPos3.x - mPos2.x + 0.5) + mPos2.x - 0.5;\n    \n    mPos0 = mPos0 * scale + vec2(0.0, brush + 1.0 + 0.1*iResolution.y);\n    mPos1 = mPos1 * scale + vec2(0.0, brush + 1.0 + 0.1*iResolution.y);\n    mPos2 = mPos2 * scale + vec2(0.0, brush + 1.0 + 0.1*iResolution.y);\n    mPos3 = mPos3 * scale + vec2(0.0, brush + 1.0 + 0.1*iResolution.y);\n    \n    vec2 mPos = bezier(mPos0, mPos1, mPos2, mPos3, float(iFrame % move) / float(move));\n    \n    if (iMouse.z > 0.0) { // if click\n        mPos = iMouse.xy;\n        mPos.x -= scale.x * fract(iTime/rotTime);\n    }\n    \n    float dist = length(mod(mPos - fragCoord + 0.5 * iResolution.xy,vec2(iResolution.x, 0.0)) - 0.5 * iResolution.xy);\n    if (dist < brush + 1.) {\n        fragColor = mix(fragColor, vec4(0.5), smoothstep(brush + 1., brush, dist));\n    }\n    \n    if (iTime < 2.0) {\n        fragColor = (fragCoord.y < iResolution.y*\n                       sqrt(texture(iChannel1, vec2(fragCoord.x/2048.0, 0.0)).x *\n                            texture(iChannel1, vec2(fragCoord.x/4096.0, 0.0)).y))\n                ? 1. - dir : dir;\n        //fragColor = fragCoord.x > 0.5*iResolution.x ? vec4(0.0) : vec4(1.0);\n        //fragColor = vec4(clamp(dot(fragCoord/iResolution.xy, vec2(1.0, -1.0))*length(iResolution)/2.0, 0.0, 1.0));\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 adjust(vec4 d0, vec4 d1) {\n    const vec4 sandStart = vec4(0.0, 0.0, 0.0, 0.0);\n    const vec4 sandEnd   = vec4(2.0, 2.0, 1.0, 2.0);\n    return smoothstep(sandStart, sandEnd, d0 + d1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec4 l = texture(iChannel0, (fragCoord + vec2(-1.0,  0.0))/iResolution.xy);\n    //vec4 r = texture(iChannel0, (fragCoord + vec2( 1.0,  0.0))/iResolution.xy);\n    //fragColor = mix((l + r)/2.0, i, spread);\n    \n    //const vec4 spreadWeight = vec4(0.2, 0.4, 0.5, 0.1);\n    //const vec4 width = vec4(2.0, 2.0, 5.0, 1.0);\n    //const float maxWidth =            5.0;\n    //vec4 neighbor = vec4(0.0);\n    //\n    //for (float o = 1.0; o <= maxWidth; o++) {\n    //    neighbor += step(o, width)/width *\n    //        (texture(iChannel0, (fragCoord + vec2( o,  0.0))/iResolution.xy) +\n    //         texture(iChannel0, (fragCoord + vec2(-o,  0.0))/iResolution.xy))/2.0;\n    //}\n    //vec4 i = texture(iChannel0, fragCoord/iResolution.xy);\n    //\n    //fragColor = mix(i, neighbor, spreadWeight);\n    \n    const vec4 width = vec4(3.0, 3.0, 5.0, 1.0);\n    const float maxWidth =            5.0;\n    const vec4 weightAir  = vec4(0.4  , 0.001, 0.9  , 0.05 )/2.0/width;\n    const vec4 weightSand = vec4(0.4  , 0.9  , 0.005, 0.05 )/2.0/width;\n    vec4 neighbor = vec4(0.0);\n    vec4 weight = vec4(0.0);\n    \n    bool bottom = fragCoord.y == 0.5;\n    vec4 d = bottom ? vec4(1.0) :\n         texture(iChannel0, (fragCoord + vec2(0.0, -1.0))/iResolution.xy);\n    \n    for (float o = 1.0; o <= maxWidth; o++) {\n        vec4 r = texture(iChannel0, (fragCoord + vec2( o, 0.0))/iResolution.xy);\n        vec4 l = texture(iChannel0, (fragCoord + vec2(-o, 0.0))/iResolution.xy);\n        \n        vec4 rWeight = bottom ? vec4(1.0) : texture(iChannel0, (fragCoord + vec2( o, -1.0))/iResolution.xy);\n             rWeight = adjust(d, rWeight);\n             rWeight = step(o, width) * mix(weightAir, weightSand, rWeight);\n    \n        vec4 lWeight = bottom ? vec4(1.0) : texture(iChannel0, (fragCoord + vec2(-o, -1.0))/iResolution.xy);\n             lWeight = adjust(d, lWeight);\n             lWeight = step(o, width) * mix(weightAir, weightSand, lWeight);\n        \n        weight   += rWeight     + lWeight    ;\n        neighbor += rWeight * r + lWeight * l;\n    }\n    vec4 i = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    fragColor = neighbor + (1.0 - weight)*i;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float rotTime = 60.;\n\nvec3 lab2rgb(vec3 col)\n{\n    const mat3 lab2lms = transpose(mat3(\n        1.0, +0.3963377774, +0.2158037573,\n        1.0, -0.1055613458, -0.0638541728,\n        1.0, -0.0894841775, -1.2914855480\n    ));\n    const mat3 lms2rgb = transpose(mat3(\n        +4.0767416621, -3.3077115913, +0.2309699292,\n\t\t-1.2684380046, +2.6097574011, -0.3413193965,\n\t\t-0.0041960863, -0.7034186147, +1.7076147010\n    ));\n    \n    // Convert to l'm's'\n    col = lab2lms * col;\n    \n    // Convert to lms\n    col = col*col*col;\n    \n    // Convert to linear sRGB\n    col = lms2rgb * col;\n    \n    // Apply sRGB gamma\n    col = mix(1.055*pow(col, vec3(1./2.4)) - 0.055, 12.92*col, step(col, vec3(0.04045/12.92)));\n   \n   return col;\n}\n\nvec3 rgb2lab(vec3 col) {\n    const mat3 rgb2lms = transpose(mat3(\n        +0.4122214708, +0.5363325363, +0.0514459929,\n        +0.2119034982, +0.6806995451, +0.1073969566,\n        +0.0883024619, +0.2817188376, +0.6299787005\n    ));\n    const mat3 lms2lab = transpose(mat3(\n        +0.2104542553, +0.7936177850, -0.0040720468,\n        +1.9779984951, -2.4285922050, +0.4505937099,\n        +0.0259040371, +0.7827717662, -0.8086757660\n    ));\n    \n    // Convert to linear sRGB\n    col = mix(pow((col + 0.055)/1.055, vec3(2.4)), col/12.92, step(col, vec3(0.04045)));\n    \n    // Convert to lms\n    col = rgb2lms * col;\n    \n    // Convert to l'm's'\n    col = pow(col, vec3(1./3.));\n    \n    // Convert to lab\n    col = lms2lab * col;\n\n    return col;\n}\n","name":"Common","description":"","type":"common"}]}