{"ver":"0.1","info":{"id":"3scfWj","date":"1605957815","viewed":128,"name":"Dragon Fractal - Gray code","username":"Jinkweiq","description":"Incredibly inefficient dragon fractal using the gray code method to calculate turns and draw lines like a turtle.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","dragon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat sdSegment(in vec2 p,in vec2 a,in vec2 b)\n{\n    vec2 pa=p-a,ba=b-a;\n    float h=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord.xy/iResolution.xy);\n    uv.x*=iResolution.x/iResolution.y;\n    uv-=vec2(.6,.65);\n    uv*=40.;\n    uv.y=-uv.y;\n        \n    float d, newD;\n    vec2 rot=vec2(-1,1);\n    d=1e5;\n\n    int turn, newTurn;\n    vec3 col=vec3(0);\n    float iters=12.;\n    for(int i=0;i<int(pow(2.,iters));i++){\n        newD = sdSegment(uv,vec2(0),vec2(0,.5));\n        if (d>newD) {\n            d=newD;\n            col=smoothstep(.11,.0,d)*pal(float(i)/pow(2.,iters)+.5, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n        }\n        uv.y-=.5;\n        \n        newTurn =  i^(i >> 1);\n        uv=uv.yx*(bool((~turn) & newTurn)?rot:rot.yx);\n        turn = newTurn;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}