{"ver":"0.1","info":{"id":"sdtyR7","date":"1653291506","viewed":64,"name":"Newtons Cradle - RayMarched","username":"QuantumShader","description":"Learning SDF modelling by following this tutorial:\nhttps://www.youtube.com/watch?v=Agf188Q8EAc","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made using tutorial from The Art of Code\n// https://www.youtube.com/watch?v=Agf188Q8EAc\n\n#define MAX_STEPS 100\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\n#define NUM_BOUNCES 2\n\nconst int MAT_BASE=1;\nconst int MAT_BARS=2;\nconst int MAT_BALL=3;\nconst int MAT_LINE=4;\n\nmat2 Rot(float a)\n{\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) \n{\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(vec2 p, vec2 s) \n{\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\n\nfloat sdLineSeg(vec3 p, vec3 a, vec3 b)\n{\n    vec3 ap=p-a, ab=b-a;\n    float t = clamp(dot(ap, ab)/dot(ab, ab), 0., 1.);\n    vec3 c = a + ab*t;\n    \n    return length(p - c);\n}\n\nvec2 sdBall(vec3 p, float angle)\n{\n    p.y -= 1.01;\n    p.xy *= Rot(angle);\n    p.y += 1.01;\n    \n    float radius = .15;\n    float ball = length(p) - radius;\n    float ring = length(vec2(length(p.xy - vec2(0, radius)) - .03, p.z)) - .01;\n    ball = min(ball, ring);\n    \n    p.z = abs(p.z);\n    float line = sdLineSeg(p, vec3(0, radius + .03, 0), vec3(0, 1.02, .4)) - .005;\n    \n    \n    float d = min(ball, line);\n          \n          \n    return vec2(d, d==ball ? MAT_BALL : MAT_LINE);\n}\n\nvec2 Min(vec2 a, vec2 b)\n{\n    return a.x<b.x ? a : b;\n}\n\n\nvec2 GetDist(vec3 p) \n{\n    float base = sdBox(p, vec3(1, .1, .5)) -.1;\n    base += sin(p.x*6.)*.0015;\n    \n    float bar = length(vec2(sdBox(p.xy, vec2(.8,1.4))-.15, abs(p.z)-0.4)) -.04;\n\n    float \n        angle = sin(iTime*4.),\n        angle1 = min(0., angle),\n        angle5 = max(0., angle);\n    \n    vec2\n        b1 = sdBall(p - vec3(.6, .5, 0), min(0., angle)),\n        b2 = sdBall(p - vec3(.3, .5, 0), (angle + angle1)*.03),\n        b3 = sdBall(p - vec3(0, .5, 0), angle*.03),\n        b4 = sdBall(p - vec3(-.3, .5, 0), (angle + angle5)*.03),\n        b5 = sdBall(p - vec3(-.6, .5, 0), max(0., angle));\n\n    vec2 balls = Min(b1, Min(b2, Min(b3, Min(b4, b5))));\n    \n    float d = min(base, bar);\n    d = min(balls.x, d);\n    \n    base = max(base, -p.y);// cut off the bottom\n    d = max(d, -p.y); \n\n    \n    int mat = 0;\n        \n    if(d==base)\n        mat = MAT_BASE;\n    else if(d==bar)\n        mat = MAT_BARS;\n    else if(d==balls.x)\n        mat = int(balls.y);\n    \n    return vec2(d, mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int max_steps, float max_dist, float surf_dist)\n{\n\tfloat dO=0.;\n    vec2 dSMat = vec2(0);\n    \n    for(int i=0; i<max_steps; i++) {\n    \tvec3 p = ro + rd*dO;\n        dSMat = GetDist(p);\n        \n        dO += dSMat.x;\n        if(dO>max_dist || abs(dSMat.x)<surf_dist) break;\n    }\n    \n    return vec2(dO, dSMat.y);\n}\n\nvec3 GetNormal(vec3 p) \n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) \n{\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 Render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last, int max_steps, float max_dist, float surf_dist)\n{\n    vec3 col = texture(iChannel0, rd).rgb;\n    vec2 dMat = RayMarch(ro, rd, max_steps, max_dist, surf_dist);\n    \n    ref = vec3(0);\n    if(dMat.x<max_dist) {\n        vec3 p = ro + rd * dMat.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 refTex = texture(iChannel0, r).rgb;\n        float fresnel = pow(clamp(1.-dot(n, -rd), 0., 1.), 5.);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        int mat = int(dMat.y);\n        \n        if(mat==MAT_BASE){\n            col *= vec3(.04*dif);\n            ref = vec3(mix(.01, .5, fresnel));\n        }\n        else if(mat==MAT_BARS){\n            col *= vec3(.1*dif);\n            ref = vec3(.9);\n        }\n        else if(mat==MAT_BALL){\n            col *= vec3(.1*dif);\n            ref = clamp(vec3(1, .7, .3)*1.15, 0., 1.);\n            if(last) col += ref*refTex;\n        }\n        else if(mat==MAT_LINE){\n            col *= vec3(.05*dif);\n            ref = vec3(.0);\n        }\n            \n           \n        ro = p+n*surf_dist*3.;\n        rd= r;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,.75,0), 2.);\n    \n    vec3 \n        ref = vec3(0.),\n        fil = vec3(1.);\n        \n    vec3 col = Render(ro, rd, ref, false, MAX_STEPS, MAX_DIST, SURF_DIST);\n\n    \n    for(int i=0; i<NUM_BOUNCES;i++)\n    {\n        fil *= ref;\n        vec3 bounce = fil*Render(ro, rd, ref, i==NUM_BOUNCES-1, 30, 5., 0.002);\n        col += bounce * (1.-0.2*float(i)/float(NUM_BOUNCES));\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}