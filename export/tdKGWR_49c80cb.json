{"ver":"0.1","info":{"id":"tdKGWR","date":"1575677871","viewed":95,"name":"TEST STEAL 2","username":"sux2bthatguy","description":"s","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["s"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 matrix = mat2(1.0,0.0,0.0,1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= .5;\n    \n    uv *= (matrix * abs(sin(iTime)));\n    \n    uv += .5;\n    \n    \n    vec4 picture = texture(iChannel0, uv);  \n    \n    \n    fragColor = picture;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SPEED 0.01\n#define DIRECTION vec2(-.6, -0.3)\n#define ATTENUATION 0.975\n#define HUE_SCALE 0.75\n#define SRC_SCALE 1.5\n\n// You get to choose between JCVD and a quad\n\n#define USE_JCVD\n//#define USE_QUAD\n\nvec3 hueShift(in vec3 color, in float shift)\n{\n    vec3 p = vec3(0.55735) * dot(vec3(0.55735), color);\n    vec3 u = color - p;\n    vec3 v = cross(vec3(0.55735), u);    \n\n    color = u * cos(shift * 6.2832) + v * sin(shift * 6.2832) + p;\n    \n    return color;\n}\n\n#if defined(USE_QUAD)\nvec2 rotate(vec2 pos, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, s, -s, c) * pos;\n}\n\nfloat quad(vec2 pos)\n{\n    return (abs(pos.x) < 0.1 && abs(pos.y) < 0.1) ? 1.0 : 0.0;\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv *= SRC_SCALE;\n    \n#if defined(USE_JCVD)\n    // Orignial color\n    vec4 color1 = texture(iChannel1, uv);\n    \n    // Avoid clamp\n    float v = 1.0;\n    if (uv.y >= v || uv.x >= v || uv.y <= 0.0 || uv.x <= 0.0)\n    {\n        color1.rgb = vec3(0.0, 1.0, 0.0);\n    }\n\n    // Green screen\n    float ref = max(color1.r, color1.b)*1.1;\n    float amask = color1.g - ref;\n    amask = 1.0 - smoothstep(0.1, 0.1, amask);\n\n    color1.rgb = mix(vec3(0.0), color1.rgb, amask);\n    color1.g = min(color1.g, (color1.r + color1.b) * 0.5);\n\n#elif defined(USE_QUAD)\n    vec2 quadPos = vec2(uv.x - 0.5, uv.y - (sin(iTime) * 0.3 + 0.5));\n    float speed = sin(iTime*0.5) * 10.0;\n    quadPos = rotate(quadPos, speed);\n    float inQuad = quad(quadPos+0.1);\n    vec4 color1 = vec4(inQuad, 0.0, inQuad, 1.0);\n    float amask = inQuad;\n#endif\n    \n    // Trail effect\n    float sinEffect = sin(iTime * 10.0) * 0.25;\n    uv = uv + normalize(DIRECTION * vec2(1.0, sinEffect)) * SPEED;\n    vec4 color2 = texture(iChannel0, uv * (1.0 / SRC_SCALE));\n    // Color attenuation\n    color2 *= ATTENUATION;\n    \n    // Rainbow\n    color2.rgb = hueShift(color2.rgb, -0.05 * HUE_SCALE);\n    \n    color1.rgb = mix(color2.rgb, color1.rgb, amask);\n    \n\tfragColor.rgb = color1.rgb;\n}","name":"Buffer A","description":"","type":"buffer"}]}