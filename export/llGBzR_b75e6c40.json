{"ver":"0.1","info":{"id":"llGBzR","date":"1542552288","viewed":169,"name":"Raytracing - sphere example","username":"kubamaruszczyk1604","description":"sphere example","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","enviironmentmapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray\n{\n    vec3 O;\n    vec3 D;\n};\n    \nstruct Sphere\n{\n    vec3 Pos;\n    float Rad;\n}; \n\nstruct Material\n{\n    vec3 AmbientCol;\n    vec3 DiffuseCol;\n    vec3 SpecularCol;\n    \n};\n    \n//Light Direction\nconst vec3 LDIR =  normalize(vec3(0.0,1.0,-1.0));\n\nvoid Grayscale(inout vec3 rgb)\n{\n   float avg = 0.3*rgb.x + 0.59*rgb.y + 0.11*rgb.z;\n    rgb = vec3(avg, avg, avg);\n}\n\n\nvoid GrayscaleFun(inout vec3 rgb,float coeff)\n{\n   float avg = (rgb.x + rgb.y + rgb.z)/3.0;\n   vec3 gscale = vec3(avg, avg, avg);\n   rgb = mix(rgb,gscale,pow(coeff,1.5));\n}\n\nvoid Phong(vec3 L, vec3 N, vec3 V, float sh, out float d, out float s)\n{\n    d = dot(N,L);\n    vec3 r = normalize(reflect(L,N));\n    s = pow(dot(-r,V),sh);  \n    s = max(0.01,s);\n     \n}\n\nbool TraceSphere(Sphere sph, Material mat, Ray ray, inout vec3 col)\n{\n    \n    col = vec3(0);\n      \n    \n    float t = dot(sph.Pos - ray.O,ray.D);\n    vec3 p = ray.O + ray.D*t;\n    float y = length(sph.Pos-p);\n\n    if(y >sph.Rad) return false;\n    \n    float x = sqrt(sph.Rad*sph.Rad - y*y);\n    float t1 = t-x;\n    float t2 = t+x;\n        \n    vec3 p1 = ray.O + ray.D*t1;\n    vec3 n = normalize(p1-sph.Pos);\n        \n    float diff,spec;\n    Phong(LDIR,n,-ray.D,50.0,diff,spec);\n    col = mat.AmbientCol;\n   // col += mat.DiffuseCol*diff;\n    col += mat.SpecularCol*spec;\n    col += 0.9 * texture(iChannel0,reflect(ray.D,n)).xyz;\n\n    return true; \n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.3 + uv.y,0.3,1.0)*0.2;\n    \n    Sphere sph;\n    sph.Pos = vec3(sin(iTime)*2.0,sin(iTime*0.2),0.0);\n    sph.Rad = 2.0;\n    \n    Material mat;\n    mat.AmbientCol = vec3(0.2,0.1,0.2);\n    mat.DiffuseCol = vec3(1.0,0.0,1.0);\n    mat.SpecularCol = vec3(1.0,1.0,1.0);\n    \n    \n    Ray ray;\n    ray.O = vec3(0.0,0.0,-4.0);\n    ray.D = normalize(vec3(uv.x,uv.y,1.0));  \n    \n    if(!TraceSphere(sph, mat, ray, col))//Hit\n    {    \n      col += texture(iChannel0,ray.D).xyz;    \n    }\n\n    // Output to screen\n    GrayscaleFun(col,abs(length(2.0*(fragCoord.xy/iResolution.xy)-1.0)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}