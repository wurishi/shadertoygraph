{"ver":"0.1","info":{"id":"3tsXRM","date":"1562430440","viewed":97,"name":"8pt Diamond (Midpoint Circle)","username":"tgsstdio","description":"Figuring out the algorithm to draw an 8 pointed diamond somehow (with triangles)\n\nChanged doubleQuadrant to doubleOctant to make more sense","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circle","midpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XsXSz4\n// signed distance to a 2D triangle\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvec4 doubleOctant(vec2 centre, vec2 uv, vec2 scale, float radius, vec2 radialDir) {    \n    \n    vec2 extentOffset = scale * radialDir;    \n    \n    // corner -> (OUTER RING)\n    vec2 corner = centre + extentOffset;\n    \n    // based on the number of divisions      \n    float halfExtent = 0.5;\n    \n    // START\n    vec2 upper_0 = vec2(centre.x + extentOffset.x, centre.y + halfExtent * extentOffset.y);    \n  \n    vec2 below_0 = vec2(centre.x + halfExtent * extentOffset.x, centre.y + extentOffset.y); \n    \n    // midpoint -> (INNER RING)\n    vec2 midpoint = centre + ((1. / sqrt(2.) * radius) * radialDir);    \n\n    // CORNER -> UPPER_0 -> MIDPOINT\n    if (sdTriangle(corner, upper_0, midpoint, uv) <= 0.0)\n        // UPPER 0 - TRIANGLE[0] (OUTER RING)\n    \treturn vec4(1,0,0,1);           \n    \n    // CORNER -> MIDPOINT -> BELOW_0    \n    if (sdTriangle(corner, midpoint, below_0, uv) <= 0.0)\n        // BELOW 0 - TRIANGLE[1] (OUTER RING)\n    \treturn vec4(0,1,0,1);        \n\n    vec2 upper_1 = vec2(centre.x + extentOffset.x, centre.y); \n    // INNER -> UPPER 0 -> UPPER 1 (OUTER RING)\n    if (sdTriangle(midpoint, upper_0, upper_1, uv) <= 0.0)\n        // UPPER 1 - TRIANGLE[2]\n    \treturn vec4(1,1,0,1); \n    \n    vec2 below_1 = vec2(centre.x, centre.y + extentOffset.y);\n    // BELOW 0 -> INNER -> BELOW 1 (OUTER RING)\n    if (sdTriangle(below_0, midpoint, below_1, uv) <= 0.0)\n        // BELOW 1 - TRIANGLE[3]\n    \treturn vec4(0,0,1,1);            \n    \n    // END \n    vec2 radialOffset = radius * radialDir;        \n\tvec2 upper_2 = vec2(centre.x + radialOffset.x, centre.y);\n    // INNER -> UPPER 1 -> UPPER 2 (INNER RING)\n    if (sdTriangle(midpoint, upper_1, upper_2, uv) <= 0.0)\n        // UPPER 2 - TRIANGLE[4]\n    \treturn vec4(1,0,1,1);            \n \n   \n    vec2 below_2 = vec2(centre.x, centre.y + radialOffset.y);\n    // BELOW 1 -> INNER -> BELOW 2 (INNER RING)\n    if (sdTriangle(below_1, midpoint, below_2, uv) <= 0.0)\n        // BELOW 1 - TRIANGLE[5]\n    \treturn vec4(1,1,1,1); \n\n    \n    // EVERYTHING ELSE\n    return vec4(0,0,0,0);\n}\n    \n   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float x_ratio = iResolution.x / iResolution.y;\n    \n    uv.x *= x_ratio;\n\n    vec2 centre = vec2(0.5 * x_ratio, 0.5);\n    float right = 0.4;\n    float front = 0.4;\n    float radius = 0.35;\n    vec2 scale = vec2(right,front);    \n    vec2 radialDir = vec2(1,-1); // BOTTOM RIGHT    \n    fragColor = doubleOctant(centre, uv, scale, radius, radialDir);      \n    radialDir = vec2(-1,-1);   // BOTTOM LEFT\n    fragColor += doubleOctant(centre, uv, scale, radius, radialDir);\n    radialDir = vec2(-1, 1);   // TOP LEFT\n    fragColor += doubleOctant(centre, uv, scale, radius, radialDir);\n    radialDir = vec2( 1, 1);   // TOP RIGHT\n    fragColor += doubleOctant(centre, uv, scale, radius, radialDir);    \n}","name":"Image","description":"","type":"image"}]}