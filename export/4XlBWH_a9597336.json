{"ver":"0.1","info":{"id":"4XlBWH","date":"1729707532","viewed":20,"name":"Ripple 11","username":"_g00se","description":"Simplify","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ripple11"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Limited color palette function\nvec3 palette( float t ) {\n    vec3 a = vec3(0.2, 0.2, 0.5);   // Darker blue base\n    vec3 b = vec3(0.4, 0.1, 0.6);   // Blue to purple variation\n    vec3 c = vec3(1.0, 1.0, 1.0);   // White component\n    vec3 d = vec3(1.2, 3.3, 4.5);   // Offset for variation\n\n    return a + b * cos( 12.28318 * (c * t + d) );\n}\n\n// Main shader\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    // Only one iteration for a simpler result\n    uv = fract(uv * 7.2) - 0.5;  // Scaling to reduce circle count\n\n    float d = length(uv) * exp(-length(uv0));\n\n    // Slowing the time by 20%\n    vec3 col = palette(length(uv0) + iTime * 0.002); // Slower animation\n\n    d = sin(d * 2.0 + iTime) / 1.0;\n    d = abs(d);\n    d = pow(0.01 / d, 1.2);\n\n    finalColor += col * d;\n        \n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}