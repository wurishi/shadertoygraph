{"ver":"0.1","info":{"id":"dsVfWW","date":"1698245482","viewed":60,"name":"3D Surface Grapher","username":"aroussel","description":"A 3D surface grapher","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","surface","grapher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float altitude(vec2 xy){\n    float x = xy.x;\n    float y = xy.y;\n    // Just a random function :\n    return sin(iTime*1.325)*exp(-3.*dot(xy+.3,xy+.3))-cos(iTime)*exp(-6.*dot(xy-.5,xy-.5))-.25+.04*cos(iTime*3.)*(sin(10.*x*y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float tilt = min(max(-(iMouse.y-iResolution.y*.5)/iResolution.x*10.,-1.),1.);\n    float pan = (iMouse.x-iResolution.x*.5)/iResolution.x*10.;\n    float dist = 10.;\n    float zoom = 6.;\n    vec3 radial = vec3(-cos(tilt)*sin(pan),-cos(tilt)*cos(pan),sin(tilt));\n    vec3 horiz = vec3(cos(pan),-sin(pan),0);\n    vec3 vert = vec3(sin(tilt)*sin(pan),sin(tilt)*cos(pan),cos(tilt));\n    vec3 camera = radial*dist;\n    \n    float ambient = .2;\n    float diffuse = .7;\n    float specular = .2;\n    float shine = 20.;\n    vec3 lightVector = normalize(vec3(1.,.5,.7));\n\n    vec2 uv = (fragCoord/iResolution.xy-.5)*2.*(iResolution.xy/iResolution.x);\n    vec3 ray = -radial*zoom + uv.x*horiz + uv.y*vert;\n    \n    int steps = 1000;\n    int intersect = 0;\n    bool above = (camera.z > altitude(camera.xy));\n    vec3 color = vec3(0,0,0);\n    \n    vec3 xAxis = vec3(cos(pan),-sin(pan),0);\n    vec3 yAxis = vec3(sin(pan),cos(pan),0);\n    float side = 2.;\n    \n    for(int n=0; n<=steps; n++){\n        float y = (-1.+2.*float(n)/float(steps))*.75*side;\n        float epsilon = 2./float(steps)*.75*side;\n        \n        float lambda = (y-dot(camera,yAxis))/dot(ray,yAxis);\n        float x = dot(camera,xAxis)+lambda*dot(ray,xAxis);\n        float z = camera.z+lambda*ray.z;\n        \n        vec2 flatRay = normalize(ray.xy);\n        vec2 posXY = (x*xAxis+y*yAxis).xy;\n        vec3 pos = vec3(posXY,z);\n        float zSurface = altitude(posXY);\n        \n        if(pos.x > -side*.5 && pos.x < side*.5 && pos.y > -side*.5 && pos.y < side*.5){\n            if((pos.z < zSurface && above == true) || (pos.z > zSurface && above == false)){\n                \n                intersect = 1;\n                \n                float dx = (altitude(posXY+vec2(epsilon,0))-zSurface)/epsilon;\n                float dy = (altitude(posXY+vec2(0,epsilon))-zSurface)/epsilon;\n                vec3 normal = normalize(vec3(-dx,-dy,1))*(float(above)*2.-1.);\n                \n                vec3 reflectionVec = 2.*dot(normal,lightVector)*normal-lightVector;\n                color += ambient; // Ambient\n                color += max(0.,dot(normal,lightVector))*diffuse; // Diffuse\n                color += pow(max(0.,dot(reflectionVec,normalize(-ray))),shine)*specular; // Specular\n                break;\n                \n            }\n        }\n        \n        above = (pos.z > zSurface);\n    }\n    \n    vec3 col = float(intersect)*color;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}