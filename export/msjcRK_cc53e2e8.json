{"ver":"0.1","info":{"id":"msjcRK","date":"1687931887","viewed":136,"name":"Dancing Cubes","username":"echelon0","description":"Rotating smooth union cubes","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cube","gradient","smoothunion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat2 rotM(float th) {\n    return mat2(cos(th), -sin(th), sin(th), cos(th));\n}\n\nvec3 rot(vec3 p, vec3 th) {\n    p.yz *= rotM(th.x);\n    p.xz *= rotM(th.y);\n    p.xy *= rotM(th.z);\n    return p;\n}\n\nfloat sdfSphere(vec3 p, vec2 s) {\n    return length(p) - s.y;\n}\n\n//https://iquilezles.org/articles/distfunctions/\nfloat sdfCube(vec3 p, float r) {\n    vec3 b = vec3(r);\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//https://iquilezles.org/articles/distfunctions/\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = pow(clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 ),2.0);\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat map(vec3 p) {\n    float s = 1.-texture(iChannel0, vec2(0.), 0.).x + 1.;\n    p = p*s;\n    //p.y = abs(p.y);\n    //p.x = abs(p.x);\n    float size = 0.35;\n    float t = iTime - s*.5;\n    vec3 p0 = rot(p, vec3(cos(t), -cos(t), 1.5));\n    float cube0 = sdfCube(p0, size)/s;\n    vec3 p1 = rot(p, vec3(sin(t), sin(t), 1.5));\n    float cube1 = sdfCube(p1, size)/s;\n    return opSmoothUnion(cube0,cube1,0.1);\n}\n\nvec3 normal(vec3 p, float d) {\n   vec3 gradX = p + vec3(d,0.,0.);\n   vec3 gradY = p + vec3(0.,d,0.);\n   vec3 gradZ = p + vec3(0.,0.,d);\n   return normalize(vec3(map(gradX)-map(p), map(gradY)-map(p), map(gradZ)-map(p)));\n}\n\nvec3 color(vec3 p) {\n    vec3 col = mix(vec3(1.,0.33,0.45)*0.33, vec3(1.,0.33,1.8), pow(texture(iChannel0, vec2(0.), 0.).xxx,vec3(1.5)));\n    vec3 l0 = normalize(vec3(-0.5, 0.7, -0.5));\n    vec3 l1 = normalize(vec3(0.3, -0.3, -0.2));\n    col = 2.75*dot(normal(p, 1e-6),l0)*1.3*col + dot(normal(p,1e-6),l1)*0.7*col;\n    return col;\n}\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n    int max_steps = 100;\n    float t = 0.0001;\n    vec3 col = pow(vec3(1.5) / vec3(0.1, 0.7, 0.2) * map(ro+2.*rd), vec3(.2,.4,.25));\n    for (int i = 0; i < max_steps; i++) {\n        vec3 p = ro+t*rd;\n        float d = map(p);\n        if (d > 0. && d < 1e-4) {\n            col = color(p);\n        }\n        t+=d;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * vec2(iResolution.x/iResolution.y, 1.0);\n\n    vec3 ro = vec3(0.,0.,-2.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.5));\n    vec3 col = raymarch(ro, rd);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}