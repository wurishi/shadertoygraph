{"ver":"0.1","info":{"id":"7tl3z7","date":"1622492548","viewed":624,"name":"Raymarching w 3-Point Lighting","username":"icezee","description":"The basic raymarching scene, based on iq's live coding. I put some explanation here:\nhttps://medium.com/geekculture/an-introduction-to-raymarching-photorealistic-rendering-on-gpu-970fdd02e31d?source=friends_link&sk=fcf9708723c3e63c88d63027e82c2a0a","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * GLSL Ray Marching in Shadertyoy\n * notes based on ig's live demo\n */\n\nfloat map( in vec3 pos ) \n{\n    float d = length(pos) - 0.25;\n    float d2 = pos.y + 0.25;\n    \n    return min(d, d2);\n}\n\n\n\nvec3 calcNormal( in vec3 pos ) \n{\n    vec2 e = vec2(0.0001,0.0);\n    return normalize( \n        vec3(map(pos+e.xyy)-map(pos-e.xyy),\n             map(pos+e.yxy)-map(pos-e.yxy),\n             map(pos+e.yyx)-map(pos-e.yyx)) \n    );\n    \n}\n\nfloat castRay( in vec3 ro, vec3 rd )\n{\n    float t = 0.0;\n    for( int i=0; i<100; i++)\n    {\n        vec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        if(h<0.001) break;\n        t += h;\n        if(t>20.0) break;\n    }\n    if(t>20.0) t=-1.0;\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\n    //float an = 0.1*iTime;\n    float an = 10.0*iMouse.x/iResolution.x;\n\n    vec3 ro = vec3(1.0*sin(an),0.0,1.0*cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0,1,0)) );\n    vec3 vv = normalize( cross(uu,ww) );\n    \n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n   \n\n\n    vec3 col = vec3(0.65,0.75,0.9) - 0.7*rd.y;\n    col = mix( col, vec3(0.7,0.75,0.8), exp(-10.0*rd.y) );\n    float t = castRay( ro, rd );\n    \n    if( t>0.0) \n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        \n        // \"normal white\" material should be around 0.2 gray\n        vec3 mate = vec3(0.2,0.2,0.2);\n        \n        // lighting\n        vec3 sun_dir = normalize( vec3(0.8,0.4,0.2) );\n        float sun_dif = clamp( dot(nor, sun_dir), 0.0,1.0 );\n        float sun_sha = step(castRay( pos+nor*0.001, sun_dir ), 0.0);\n        float sky_dif = clamp( 0.5 + 0.5*dot(nor, vec3(0.0,1.0,0.0)), 0.0,1.0 );\n        float bou_dif = clamp( 0.5 + 0.5*dot(nor, vec3(0.0,-1.0,0.0)), 0.0,1.0 );\n        \n        // key light ~= 10\n        // fill light ~= 1\n        col  = mate*vec3(7.0,5.0,3.0)*sun_dif*sun_sha;\n        col += mate*vec3(0.5,0.8,0.9)*sky_dif;\n        col += mate*vec3(0.7,0.3,0.2)*bou_dif;\n    }\n    \n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}