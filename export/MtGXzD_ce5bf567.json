{"ver":"0.1","info":{"id":"MtGXzD","date":"1483245417","viewed":107,"name":"GR - A Distortion Shape","username":"bradleygriffith","description":"distortion state","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distortionstate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358\n\n//  `rand` and `noise` taken from \n//  http://thebookofshaders.com/\nfloat rand (in float _x) {\n    return fract(sin(_x)*1e4);\n}\n\nfloat noise (in float _x) {\n    float i = floor(_x);\n    float f = fract(_x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(rand(i), rand(i + 1.0), u);\n}\n\nfloat noiseWave(vec2 uv, float y, float height, float volatility) {\n    // Define wave \n    float variance = (height / 2.0) * -1.0;\n \tvariance += noise((uv.x + (rand(y) * 1000.0)) * PI * volatility) * height;\n    \n    // Adjust y\n    y += variance;\n    \n    return smoothstep(y - 0.089, y + 0.089, uv.y);\n}\n\nfloat distortionShape(vec2 uv, float y, float height, float dHeight) {\n\t// Define shape constraints\n\tfloat h = height / 2.0;\n    float top = y + h;\n    float bottom = y - h;\n    \n    // Define distortion\n    float volatility = 90.0;\n    \n    float topWave = noiseWave(uv, top, dHeight, volatility);\n    float bottomWave = noiseWave(uv, bottom, dHeight, volatility);\n    \n    return bottomWave - topWave;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float p = 1.0 / iResolution.y; // 1 pixel.\n\t\n    float y = 0.5;\n\n    float height = 150.0 * p; // Normalized by multiplying against p.\n    float dHeight = 100.0 * p; // Normalized by multiplying against p.\n\n    fragColor = vec4(distortionShape(uv, y, height, dHeight));\n}","name":"Image","description":"","type":"image"}]}