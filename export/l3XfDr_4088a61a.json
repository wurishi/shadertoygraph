{"ver":"0.1","info":{"id":"l3XfDr","date":"1728262250","viewed":21,"name":"move on the poly perimeter","username":"Elsio","description":"preciso disso pro prÃ³ximo pass","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["animate","geometri","slip","octogono","octagono","cabri","geogebra"],"hasliked":0,"parentid":"XXBcz3","parentname":"Octagon w square slip"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\n#define TAU 2. * PI\n\nvec2 move(float poly, float ra, float d, float t) {\n    float s = TAU / poly; \n    float T = t * poly;\n    vec2 side = floor(T) * s + vec2(0, 11) + d;\n    \n    return mix(\n               cos(side), \n               cos(side + s), \n               fract(T)\n           ) * ra;\n}\n\nfloat Poly(vec2 p, float k, float ra, float T, bool fill) {\n    float d;\n    d = atan(p.y, p.x) - T;\n    d = mod(d, TAU / k) - PI / k;\n    d = cos(d) * length(p) - ra;\n    \n    return fill ? d :abs(d);\n}\n\nvoid mainImage(out vec4 o, vec2 U){\n    vec2 r = iResolution.xy,\n         u = (U - r / 2.) / r.y;\n            \n    float t = iTime * .2;\n    vec2 k = move(7., .4, PI / 2., t);\n\n    o *= .0;\n    \n    o += max(o, smoothstep(4. / r.y, .0, length(u) - .5)) * .25;\n    o += max(o, smoothstep(4. / r.y, .0, length(u - k) - .1)) * .5;\n\n    if(iMouse.z > 0. || cos(t * 2.) > .5)\n        o.r += \n              smoothstep(\n                4. / r.y, .0, \n                Poly(u, 7., .365, PI / 2., false)\n              );\n\n}","name":"Image","description":"","type":"image"}]}