{"ver":"0.1","info":{"id":"sdXfD8","date":"1644798704","viewed":101,"name":"Blue Tartan","username":"vega","description":"Learning with plaid","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["plaid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//setup a \"repeat factor\"\n#define rf 1.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized-ish pixel coordinates (from 0 to 1)\n    // This is doen to give a square for drawing to, rather than\n    // the normal 0-1 for the entire space\n    // At least for now only drawing one square of the pattern\n    vec2 uv = fragCoord/iResolution.yy;\n    uv *= rf;\n\n    // Gererate diagonol lines. Because the rendered image is rectangular, this has to be in absolute coords\n    // The negative on the fragCoord.x set's the angle\n    // THIS HAS ALIASING ISSUES. I'm not sure how to fix them. Plz help :(\n    //float line = smoothstep(mod((-fragCoord.x+fragCoord.y)/32.,.6),.48,.55);\n    float line = step(mod((-uv.x+uv.y)*32.,.7),.5);\n    //float line = step(mod((-uv.x+uv.y)*16.,.6),.5);\n    vec3 stripes = vec3(line,line,line);\n    stripes = 1.-stripes;\n    \n    //Color Pallate\n    vec3 lb = vec3(.07,.15,.25);// Light Blue\n//>>> Uncomment the following line for a rainbow plaid\n    //lb = vec3(.5+(sin(iTime)*.5),.5+(sin(iTime*.7)*.5),.5+(sin(iTime*1.1)*.5)); \n    vec3 db = vec3(.4)*lb;\n    //vec3 db = vec3(.06,.11,.18); // Dark Blue\n    vec3 wh = vec3(.95,.95,.95); // White (ish)\n    vec3 gr = vec3(.55,.56,.58); // Gray (ish)\n    vec3 bk = vec3(.05,.05,.05); // Black (ish)\n    \n    // Now make a mask for each section.\n    // This would be more easily done with IFs, but this **should** be\n    // more performant\n    // In the reference image it appears to made up of **roughly**\n    // 88 equal slices, which sections of    18,6,6 ,6,15,4,6 ,3,15,9 vertically\n    // and                                   18,9,15,3, 6,4,15,6,6 ,6 Horizontally\n    // (Yes, I know these numbers are weird)\n    // These then need to be added as they go, to get the start position of each\n    // vert: 0,18,24,30,36,51,55,61,64,79\n    // horz: 0,18,27,42,45,51,55,70,76,82\n    // Normalized to 1 by div by 88 gives these arrays\n    float horzSlices[10] = float[](0.0,0.20454545454545456, 0.2727272727272727, 0.3409090909090909, 0.4090909090909091, 0.5795454545454546, 0.625, 0.6931818181818182, 0.7272727272727273, 0.8977272727272727);\n    float vertSlices[10] = float[](0.0,0.20454545454545456, 0.3068181818181818, 0.4772727272727273, 0.5113636363636364, 0.5795454545454546, 0.625, 0.7954545454545454, 0.8636363636363636, 0.9318181818181818);\n    \n    //This is used to select the active slice\n    //vec3 color = vec3(step(uv.x,vertSlices[1])-step(uv.x,vertSlices[0]))\n    //* (vec3(1.0-step(1.0-uv.y,horzSlices[0])) - (1.0-step(1.0-uv.y,horzSlices[1])));\n    \n    //=================================================\n    float mody = mod(uv.y,1.);\n    // The 1st horizontal stripe is gray\n    vec3 color = gr * (vec3(1.0-step(1.0-mody,horzSlices[0])) - (1.0-step(1.0-mody,horzSlices[1])));\n    // The 2nd horizontal stripe is blue\n    color += lb * (vec3(1.0-step(1.0-mody,horzSlices[1])) - (1.0-step(1.0-mody,horzSlices[2])));\n\n    // The 3rd horizontal stripe is white\n    color += wh * (vec3(1.0-step(1.0-mody,horzSlices[2])) - (1.0-step(1.0-mody,horzSlices[3])));\n    \n    // The 4th horizontal stripe is blue\n    color += lb * (vec3(1.0-step(1.0-mody,horzSlices[3])) - (1.0-step(1.0-mody,horzSlices[4])));\n    \n    // The 5th horizontal stripe is dark blue\n    color += db * (vec3(1.0-step(1.0-mody,horzSlices[4])) - (1.0-step(1.0-mody,horzSlices[5])));\n    \n    // The 6th horizontal stripe is blue\n    color += lb * (vec3(1.0-step(1.0-mody,horzSlices[5])) - (1.0-step(1.0-mody,horzSlices[6])));\n    \n    // The 7th horizontal stripe is gray\n    color += gr * (vec3(1.0-step(1.0-mody,horzSlices[6])) - (1.0-step(1.0-mody,horzSlices[7])));\n    \n    // The 8th horizontal stripe is blue\n    color += lb * (vec3(1.0-step(1.0-mody,horzSlices[7])) - (1.0-step(1.0-mody,horzSlices[8])));\n    \n    // The 9th horizontal stripe is black\n    color += bk * (vec3(1.0-step(1.0-mody,horzSlices[8])) - (1.0-step(1.0-mody,horzSlices[9])));\n    \n    // The 10th horizontal stripe is blue\n    color += lb * (vec3(1.0-step(1.0-mody,horzSlices[9])) - (1.0-step(1.0-mody,1.0)));\n    \n    ///////////////////////////////////////////////////\n    float modx = mod(uv.x,1.);\n    vec3 scolor;\n    // The 1st vertical stripe has gray diagonal lines\n    scolor = vec3(step(modx,vertSlices[1])-step(modx,vertSlices[0])) * stripes * gr;\n    \n    // The 2nd vertical stripe has blue diagonal lines\n    scolor += vec3(step(modx,vertSlices[2])-step(modx,vertSlices[1])) * stripes * lb;\n    \n    // The 3rd vertical stripe has black diagonal lines\n    scolor += vec3(step(modx,vertSlices[3])-step(modx,vertSlices[2])) * stripes * bk;\n    \n    // The 4th vertical stripe has blue diagonal lines\n    scolor += vec3(step(modx,vertSlices[4])-step(modx,vertSlices[3])) * stripes * lb;\n    \n    // The 5th vertical stripe has gray diagonal lines\n    scolor += vec3(step(modx,vertSlices[5])-step(modx,vertSlices[4])) * stripes * gr;\n    \n    // The 6th vertical stripe has blue diagonal lines\n    scolor += vec3(step(modx,vertSlices[6])-step(modx,vertSlices[5])) * stripes * lb;\n    \n    // The 7th vertical stripe has dark blue diagonal lines\n    scolor += vec3(step(modx,vertSlices[7])-step(modx,vertSlices[6])) * stripes * db;\n    \n    // The 8th vertical stripe has blue diagonal lines\n    scolor += vec3(step(modx,vertSlices[8])-step(modx,vertSlices[7])) * stripes * lb;\n    \n    // the 9th vertical stripe has white diagonal lines\n    scolor += vec3(step(modx,vertSlices[9])-step(modx,vertSlices[8])) * stripes * wh;\n    \n    // The 10th vertical stripe has blue diagonal lines\n    scolor += vec3(step(modx,1.0)-step(modx,vertSlices[9])) * stripes * lb;\n    \n    //+++++++++++++++++++++++++++++++++++++++++++++++++++\n    // Now mix the stripes and base color. This\n    // Can't be basic addition as otherwise two equal\n    // colors added together result in a bighter color\n    // instead, the stripes need to completely sit on-\n    // top of the base color\n    vec4 sacolor = vec4(0.0);\n    vec4 acolor  = vec4(color,1.0);\n    \n    if(scolor != vec3(0.0)) //used black as the mask\n    {\n        acolor = vec4(scolor,1.0);\n    }\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n\n    // Output to screen\n    fragColor = vec4(acolor);\n}","name":"Image","description":"","type":"image"}]}