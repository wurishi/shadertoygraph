{"ver":"0.1","info":{"id":"3d3yRN","date":"1600455583","viewed":90,"name":"Hello Metaballs","username":"Coedo","description":"My first step at learning SDF and ray marching :>","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.001\n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sceneSDF(vec3 point) {\n    float t = iTime * 0.7;\n    vec3 s1Pos = vec3(0.0, sin(t), 0.0);\n    vec3 s2Pos = vec3(0.5, sin(t - 60.0), 0.0);\n    vec3 s3Pos = vec3(-0.2, sin(t - 90.0), 0.0);\n\n    float s1 = sphere(point - s1Pos, 0.6);\n    float s2 = sphere(point - s2Pos, 0.5);\n    float s3 = sphere(point - s3Pos, 0.45);\n        \n    float sd = opSmoothUnion(s1, s2, 0.2);\n    sd = opSmoothUnion(sd, s3, 0.25);\n        \n                           \n    return sd;\n}\n\nmat4 viewMatrix(vec3 pos, vec3 target, vec3 up) {\n\tvec3 f = normalize(target - pos);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDirection, float start, float end) {\n    float depth = start;\n    for(int i = 0; i < 255; i++) {\n        float dist = sceneSDF(rayOrigin + depth * rayDirection);\n        \n        if(dist < EPSILON) return depth;\n        \n        depth += dist;\n        if(depth >= end) return end;\n    }\n    \n    return end;\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 cameraPos = vec3(0.0, 0.0, 0.0);\n    \n    cameraPos.x = 7.0 * sin(iTime * 0.8);\n    cameraPos.z = 7.0 * cos(iTime * 0.8);\n    \n    mat4 cam = viewMatrix(cameraPos, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    dir = (cam * vec4(dir, 0.0)).xyz;\n    \n    float dist = rayMarch(cameraPos, dir, 0.0, 100.0);\n    \n    if(dist > 100.0 - EPSILON) {\n    \tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n\t\n    vec3 lightDir = vec3(-1.0, 1.0, sin(iTime));\n\n    vec3 hitPoint = cameraPos + dist * dir;\n    float ndotl = dot(normal(hitPoint), lightDir) * 0.5 + 0.5;\n        \n    vec3 col = ndotl * vec3(0.1, 0.5, 0.3) + vec3(0.0, 0.0, 0.75);\n        \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}