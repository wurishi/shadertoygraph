{"ver":"0.1","info":{"id":"4cyczK","date":"1732062129","viewed":25,"name":"Voronoi txt 2x loop","username":"kukovisuals","description":"Something weird that came out when playing around with two loops and a texture","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","voronoitexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash function to jitter cell centers\nvec2 vhash(vec2 p, vec2 offset) {\n    mat2 m = mat2(\n        127.1, 311.7,\n        269.5, 183.3\n    );\n    p = fract(sin(p * m) * 46839.32);\n    return vec2(\n        sin(p.x * offset.x) * 0.5 + 0.5,\n        cos(p.y * offset.y) * 0.5 + 0.5\n    );\n}\n\n// Main fragment shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;// * 2.0 - 1.0;\n    \n    float girdSize = 3.0;\n    int numberCells = int(girdSize);\n    // Parameters\n    vec2 cellDensity = vec2(girdSize); // Grid size\n    vec2 g = floor(uv * cellDensity);  // Grid position\n    vec2 f = fract(uv * cellDensity);\n\n    // Visualization setup\n    vec3 color = vec3(0.0); // Background color\n\n    float res = 8.0;\n    float md = 8.0;\n    vec2 mr;\n    vec4 Out = vec4(0.0);\n\n    // First pass to find the closest point\n    for (int y = -1; y <= 1; y++)\n    for (int x = -1; x <= 1; x++) {\n        vec2 lattice = vec2(x, y);\n        vec2 offset = vhash(lattice + g, vec2(iTime * 0.2));\n        vec2 r = lattice + offset - f;\n        float d = dot(r, r);\n        if (d < res) {\n            res = d;\n            mr = r;\n        }\n    }\n\n    res = 8.0;\n\n    // Second pass to find the second closest point\n    for (int y = -1; y <= 1; y++)\n    for (int x = -1; x <= 1; x++) {\n        vec2 lattice = vec2(x, y);\n        vec2 offset = vhash(lattice + g, vec2(iTime * 0.20002));\n        vec2 r = lattice + offset - f;\n        float d = dot(r, r);\n        if (d > 0.0001 && d < res) {\n            res = d;\n            Out.x = d;\n            Out.y = offset.x;\n        }\n        if (dot(mr - r, mr - r) > 0.00001) {\n            md = min(md, dot(0.5 * (mr + r), normalize(r - mr)));\n        }\n    }\n    \n    vec3 colorA = texture(iChannel0, Out.xy).rgb;\n    vec3 colorB = vec3(0.000,0.000,0.000);\n    float interpolateAB = md;\n    vec3 mixedColor = mix(colorA, colorB, interpolateAB);\n    \n    vec3 smoothStep = smoothstep(0.3, 0.8, mixedColor);\n\n    // Output the final color\n    fragColor = vec4(smoothStep, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}