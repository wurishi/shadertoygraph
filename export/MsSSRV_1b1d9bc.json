{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 cmul(vec2 a, vec2 b) {\n    return a * mat2(b.x, -b.y, b.y, b.x);\n}\n\nvec2 cinv(vec2 z) {\n    return vec2(z.x, -z.y) / dot(z, z);\n}\n\nvec2 cdiv(vec2 a, vec2 b) {\n    return cmul(a, cinv(b));\n}\n\nvec2 invmobius(vec2 z, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return cdiv(cmul(d,z)-b, a-cmul(c,z));\n}\n\nvec2 map(vec2 p) {\n    float time = iTime * 0.1;\n    vec2 t = vec2(sin(time), 0.0);\n    vec2 a = vec2(cos(time*5.0), sin(time*5.0));\n    vec2 b = vec2(0.0, 0.0);\n    vec2 c = t * cos(iTime * 0.25) * 10.0;\n    vec2 d = vec2(1.0, 1.0);\n    return invmobius(p, a, b, c, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    \n    vec2 a = ((fragCoord.xy + vec2(0.0, 0.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n    vec2 b = ((fragCoord.xy + vec2(1.0, 0.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n    vec2 c = ((fragCoord.xy + vec2(1.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n    vec2 d = ((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n\n    vec2 ma = map(a);\n    vec2 mb = map(b);\n    vec2 mc = map(c);\n    vec2 md = map(d);\n    \n    float da = length(mb-ma);\n    float db = length(mc-mb);\n    float dc = length(md-mc);\n    float dd = length(ma-md);\n    \n    /* try to anti-alias by flattening the colours when the transformation causes too much stretch */\n\tfloat stretch = max(max(max(da,db),dc),dd);\n    float aa = 1.0 / (1.0 + stretch * stretch * 10000.0);\n    \n    vec2 block = floor(ma * 10.0 + 0.5);\n\tvec2 square = abs(ma - block / 10.0);\n    square *= aa;\n    float an = iTime * 0.1 ;\n    vec2 rot = cmul(square, vec2(cos(an), sin(an)));\n    \n    vec3 r;\n    r.x = (0.5 + sin(rot.x * 100.0 + iTime * 0.5) * 0.5);\n    r.y = (0.5 + sin(rot.y * 100.0) * 0.5);\n    r.z = (0.5 + sin(square.y * 100.0 + iTime) * 0.5);\n    \n    fragColor = vec4(r, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsSSRV","date":"1413731753","viewed":444,"name":"Mobius","username":"dila","description":"I transform each point using the inverse Mobius transformation, and shade it based on it's location there.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["2d","transformation"],"hasliked":0,"parentid":"","parentname":""}}