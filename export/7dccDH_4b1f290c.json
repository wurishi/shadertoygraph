{"ver":"0.1","info":{"id":"7dccDH","date":"1653424483","viewed":73,"name":"Cubic Regression Curve Fitting","username":"Envy24","description":"BufferA - drawing spline\nBufferB - drawing control points\nBufferC - drawind dashed convex hull\nImage - mixing and coloroing\n\nFour passes used for better readability of code.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["curve","cubic","interpolation","regression","fitting"],"hasliked":0,"parentid":"sdccDH","parentname":"Quadratic Regression Curve Fit"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 spline      = TEXF0(SC);\n    vec4 knot        = TEXF1(SC);\n    vec4 convex_hull = TEXF2(SC);\n    \n    float min = MIN3(spline.r, knot.r, convex_hull.r);\n    \n    O = \n        min == 1.0 ?\n            vec4(1) :                            // Background color\n            min == spline.r ?\n                vec4(0, spline.r, spline.r, 1) : // Spline color\n                min == knot.r ?\n                    vec4(0, knot.r, 0, 1) :      // Knot color\n                    vec4(convex_hull);           // Convex hull  color\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define TEXF2(SC)                 ( texelFetch(iChannel2, ivec2(SC), 0) )\n#define MIN3(a, b, c)             ( min(min((a), (b)), (c)) )\n#define NMY                       ( iMouse.y / R.y )                 // in range [0.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n#define RANDOM\n\nconst int num_of_ctrls = 5; /* 4 minimum */\nvec2 ctrls[num_of_ctrls];\n/**\nvec2 ctrls[num_of_ctrls] = vec2[num_of_ctrls](\n\t\tvec2(-1.5,  0.0),\n\t\tvec2(-0.75,  0.0),\n\t\tvec2(0.75,  0.0),\n        vec2(1.5,  0.0)\n);\n/**/\n\nfloat circleSQSDF(\n    in vec2 S,   // sample coordinates\n    in vec2 C,   // circle center\n    in float R,  // circle radius\n    in float SM) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float x = S.x - C.x, y = S.y - C.y;\n    \n    // Signed distance of areas (squared distancies).\n    float sds = x * x + y *y - R * R;\n    \n    float ss = SM * SM;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n\nvoid randomize_ctrls(float time)\n{\n    uint T = uint(time);\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        ctrls[k] = vector2HashUI32(T + uint(k), 2u * T + uint(k * 2));\n    }\n}\n\nvoid randomize_ctrls2(float time)\n{\n    time *= 0.5;\n    float t = fract(time);\n    uint T = uint(time);\n\n    float xMin = -1.5;\n    float dx = 3. / float(num_of_ctrls - 1);\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        uint x = T + uint(k);\n        uint y = 2u * T + uint(k * 2);\n        vec2 c = vector2HashUI32(x, y);\n        vec2 n = vector2HashUI32(x + 1u, y + 2u);\n    \n        ctrls[k] += (c * (1. - t) + n * t);\n        ctrls[k].x = xMin + float(k) * dx;\n        //ctrls[k] *= vec2(0.3, 0.8);\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void calculateCubicCoefficients(\n    in vec2[num_of_ctrls] ctrls,\n    inout vec4 coef)\n{\n    float d, e, f, g, h, k, l, m, p, r, n = float(num_of_ctrls);\n    \n    for(int i = 0; i < num_of_ctrls; ++i)\n    {      \n        float x = ctrls[i].x;     \n        float xx = x*x;\n        float xxx = x*x*x;\n        float xxxx = x*x*x*x;\n        float xxxxx = x*x*x*x*x;\n        float y = ctrls[i].y;\n            \n        h += xxxxx * x;\n        k += xxxxx;\n        l += xxxx;\n        m += xxx;\n        p += xx;\n        r += x;\n        \n        d += xxx * y;\n        e += xx * y;\n        f += x * y;\n        g += y;\n    }\n    \n    mat4 invM = inverse(mat4(\n        h, k, l, m,\n        k, l, m, p,\n        l, m, p, r,\n        m, p, r, n\n    ));   \n    coef = invM * vec4(d, e, f, g);\n}\n\nvec2 find_closest_curve_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n \n    float xMin = ctrls[0].x;\n    float xMax = ctrls[num_of_ctrls - 1].x;\n    float dx = (xMax - xMin) * 0.003;\n       \n    vec4 coef;\n    calculateCubicCoefficients(ctrls, coef);\n    \n    float a = coef.x;\n    float b = coef.y;\n    float c = coef.z;\n    float d = coef.w; \n    \n    for (float x = xMin; x < xMax; x += dx)\n    {\n        vec2 P;\n        P.x = x;\n        P.y = a * x*x*x + b * x*x + c * x + d;\n           \n        vec2 diff = P - NDC;\n        float sqDist = dot(diff, diff);\n\n        minSqDist = min(minSqDist, sqDist);\n\n        closestP = \n            minSqDist == sqDist ? \n                P :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_ctrls(iTime);\n    randomize_ctrls2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_curve_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.01,\n        0.011));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 find_closest_control_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        vec2 diff = ctrls[k] - NDC;\n        float sqDist = dot(diff, diff);\n       \n        minSqDist = min(minSqDist, sqDist);\n        \n        closestP = \n            minSqDist == sqDist ? \n                ctrls[k] :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_ctrls(iTime);\n    randomize_ctrls2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_control_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.02,\n        0.018));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 find_closest_convex_hull_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    int num_of_lines = num_of_ctrls - 1; // 2 knots per line\n     \n    for (int l = 0; l < num_of_lines; ++l)\n    {\n        for (float t = 0.; t <= 1.; t += 0.1)\n        {\n            vec2 P = ctrls[l] * (1. - t) + ctrls[l + 1] * t;\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_ctrls(iTime);\n    randomize_ctrls2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_convex_hull_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.008,\n        0.0088));\n}","name":"Buffer C","description":"","type":"buffer"}]}