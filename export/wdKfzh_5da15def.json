{"ver":"0.1","info":{"id":"wdKfzh","date":"1606599606","viewed":57,"name":"weight for bodybuilding 2","username":"iuryBorgesRodrigues","description":"weight for bodybuilding","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","weight","bodybuilding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 2\n\n\nconst float A = 0.15;\nconst float B = 0.50;\nconst float C = 0.10;\nconst float D = 0.20;\nconst float E = 0.02;\nconst float F = 0.30;\nconst vec3 W = vec3(11.2);\n\nvec3 lp = normalize(vec3(0.0,0.0,1.0));\nvec3 lc = vec3(1.0,0.9,0.8)*20.0;\n    \nstruct CameraState\n{\n    vec3 vPos;\n    vec3 vTarget;\n    float fFov;\n};\n    \n\nstruct mat{\nvec3 col;\nvec3 rcol;\nfloat frc;\nfloat frm; \n};\n    \nstruct ray{\nvec3 o;\nvec3 d;\nfloat m;\n};\n    \nvec3 CubemapToHDR( vec3 bg ){\n   bg = bg * bg;\n   bg = -log( 1.01f - bg );            \n   return bg;\n}\n\nmat getMat(float n,vec3 rd){\n  \tmat m;   \n    \n    m.col = vec3(0.8);\n    m.rcol= vec3(1.0);\n    m.frm = 0.5;\n    m.frc = 0.05;\n   \n    \n    if(n < 1.0){\n       \n       \n        if(n == 0.1){\n\n        m.col = vec3(1.0,0.0,0.0);\n\n        }else if(n == 0.2){\n\n        m.col = vec3(1.0,1.0,0.0);\n\n        }else if(n == 0.0){\n\n        m.col = textureLod(iChannel1,rd,0.0).rgb;\n\n        }else if(n == 0.3){\n\n        m.col = vec3(0.0,1.0,0.0);\n\n        }else if(n == 0.4){\n\n        m.col = vec3(0.0,1.0,1.0);\n\n        }else if(n == 0.5){\n\n        m.col = vec3(0.0,0.0,1.0);\n\n        }else if(n == 0.6){\n\n        m.col = vec3(1.0,0.0,1.0);\n\n        }\n    }else if(n < -0.1){  \n    m.frm = 0.9;\n    m.frc = 0.05;\n    }else{\n        m.frm = 1.0;\n         m.frc = 0.45*m.frm;\n         m.col = vec3(0.0);\n\n        if(n == 1.0){\n            \n        m.rcol= vec3(1.0,0.766,0.336);\n       \n        }else if(n == 1.2){\n       \n        m.rcol= vec3(0.955,0.637,0.538);\n      \n        }else if(n >= 1.1){\n\n        m.rcol= vec3(0.972, 0.960, 0.915);  \n\n        }\n        \n    }\n \n    return m;\n}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\n\n\nvec3 uncharted2ToneMapping(vec3 x){\n\t\n\t\t\n\treturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\nvec2 plane( vec3 p)\n{\n    \n    float x = float(int(mod(p.x*5.0,2.0)+1.00));\n    float z = float(int(mod(p.z*5.0,2.0)+1.00));\n    float check = abs(x-z)*-0.1;\n\treturn vec2(p.y,check);\n}\n\nfloat length8( vec3 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y+p.z, 1.0/8.0 );\n}\n\n\n\n\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n\nvec2 comp(vec2 a,vec2 b){\n    \n    return (a.x < b.x) ? a : b;\n}\n\n\n\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\n//Boolean operations for distance fields\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\n\nfloat opShell(float d, float thickness)\n{\n    return abs(d) - thickness;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n   \nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}    \n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdSphere(vec3 p,float r)\n{\n    return length(p) - r;\n}\n\n\n\n\n\nvec2 map(vec3 p){\n    vec2 dis = vec2(50.0);\n    \n    vec3 p1=p;\n    p1.z=abs(p.z);\n    p1.z-=1.8;\n   \n   \n    float d1 =sdCappedCylinder(p1.yzx,vec2(1.0,0.1));\n    float d2 = sdCappedCylinder(p.yzx,vec2(0.2,2.0));\n    \n    d1=opSmoothUnion(d1,d2,0.1);\n\n\tdis = comp(dis,vec2(plane(p-vec3(0,-1,0)).xy ));\n    dis = comp(dis,vec2(d1,1.1));\n\n  \n  \n   \n   \n   \n  \n    return dis;\n}\n\n\n\n\nvec4 castRay(vec3 ro , vec3 rd,float imax){\n    \n    float i = 0.002;\n    vec2 dat;\n    \n    for(int n = 0; n < 256; n++){\n        \n        dat.xy = map(ro+rd*i);\n        \n        if(dat.x < 0.002)return vec4(ro+rd*i,dat.y);\n        \n        if(i > imax)return vec4(ro+rd*i,-1.1);\n        \n        i+=max(abs(dat.x),0.002);\n    }\n    \n    return vec4(ro+rd*i,-1.1);\n}\n\n\nvec3 calcNormal(vec3 pos){\n    vec2 off = vec2(0.002,0.0);\n    \n   \tvec3 normal = normalize(vec3(\n    map(pos+off.xyy).x - map(pos-off.xyy).x,\n    map(pos+off.yxy).x - map(pos-off.yxy).x,\n    map(pos+off.yyx).x - map(pos-off.yyx).x )); \n    \n    return normal;\n}\n//ligth\nfloat diffuse_directional(vec3 n,vec3 l, float strength)\n{\n      return (dot(n,normalize(l))*.5+.5)*strength;\n}\nfloat ambient_omni(vec3 p, vec3 l)\n{\n      float d=1.-abs(length(p-l))/100.;\n      return pow(d,32.)*1.5;\n}\nfloat specular_directional(vec3 n, vec3 l, vec3 v, float strength)\n{\n      vec3 r=reflect(normalize(l),n);\n      return pow(max(dot(v,r),.0),128.)*strength;\n}\nray castRayR(vec3 ro , vec3 rd,float imax){\n    \n    float i = 0.002;\n    vec2 dat;\n    bool pass = false;\n    float pre = 1.0;\n    \n    for(int n = 0; n < 512; n++){\n        \n        dat.xy = map(ro+rd*i);\n        \n        \n        if(dat.x < 0.002 && dat.y > -0.5)return ray(vec3(ro+rd*i),vec3(rd),dat.y);\n        \n        if(i > imax)return ray(vec3(ro+rd*i),vec3(rd),-1.1);\n        \n        if(pre < 0.0 && dat.x > 0.0){\n            pass=true;\n            ro=ro+rd*i;\n            rd=normalize(rd+calcNormal(ro)*1.0/1.5);\n            i=0.000;\n        }\n        \n        \n        i+=max(abs(dat.x),0.002);\n        pre=dat.x;\n    }\n    \n    return ray(vec3(ro+rd*i),vec3(rd),-1.1);\n}\n\n\n\n\n\nfloat calcShadow(vec3 sp,float imax, int n){\n   vec3 dp = normalize(lp-sp);\n    float i2 = 0.1;\n   \n        \n        i2 += max(abs(map(sp+dp*i2).x/1.0) , 0.01);\n        \n        if(abs(map(sp+dp*i2).x) < 0.01){\n            \n            if(map(sp+dp*i2).y < -1.5){\n                \n                vec3 norm = calcNormal(sp+dp*i2);\n                float fren =pow(1.0 - max(dot(-dp,norm),0.0),5.0);\n     \t        fren = mix(0.1,1.0,fren);\n            return 1.0-fren;\n                \n                \n            }else if(map(sp+dp*i2).y < 2.0){\n        \n            return 0.0;\n            }else{\n                \n            return 1.0;\n                \n            }\n            \n        }else if( i2 > imax) return 1.0;\n            \n    \n    \n    return 1.0;\n}\n\n\n\n//from iq's raytracer \nfloat calcAO( in vec3 pos, in vec3 nor,int i )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n   \n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n   \n    return clamp( 1.0 - 3.0*occ, 0.1, 1.0 );    \n}\n\n\nvec3 Tonemap_ACES(const vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\n\n\nvec3 renderR(vec3 ro,vec3 rd, int j){\n    vec3 pos = vec3(0,0,0),normal = vec3(0.0,0.0,0.0),color = vec3(0.0,0.0,0.0),ref = vec3(1.0);\n    mat mate; \n   \tfloat prec = 0.002;\n    vec3 bg = vec3(0.3,0.7,1.0)*1.0;\n    float dist = 0.0;\n    float cons = 1.0;\n    float lin = 0.14;\n    float quad = 0.07;\n    \n\t\n        bg=textureLod(iChannel0, rd,0.0).rgb;\n    \tbg=CubemapToHDR(bg);\n        vec4 dat = vec4(0.0);\n        if(j < 2){\n     \tray temp = castRayR(ro,rd,15.0/float(j));\n        rd = temp.d;\n        dat = vec4(temp.o,temp.m);\n        }else{\n        dat = castRay(ro,rd,15.0/float(j));\n \n        }\n     \tpos = dat.xyz;\n \t\n     \t\n            \n            dist+=length(ro-pos);\n            float fog = exp(-dist/10.0);\n            float dist1 = dist+length(lp-pos);\n           \tfloat atten = 1.0/(cons + lin*dist1 + quad * (dist1 * dist1)); \n            \n            if(dat.w >= 2.0){\n     \t       color+=lc*ref;    \n     \t       return color;\n               \n     \t    }else if(dat.w <= -1.0){\n            \n            dist+=length(ro-pos);\n  \t\t\tfog = exp(-dist/10.0);\n   \t\t\tcolor+=ref*bg;\n   \t\t\treturn color;\n                \n            }else{\n     \t         \n     \t        mate = getMat(dat.w,rd);\n                vec3 c = pow(mate.col,vec3(2.2));   \n     \t        vec3 rc = pow(mate.rcol,vec3(2.2));\n                \n     \t        normal = calcNormal(pos);\n     \t        vec3 ld = normalize(lp-pos);\n                \n     \t        float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n     \t        fren = mix(mate.frc,mate.frm,fren);\n                \n     \t        vec3 lit = (max(dot(ld,normal),0.0))*lc/12.0;\n                lit*=calcShadow(pos,15.0/float(j),j);\n                \n     \t        vec3 dif = c*lit*(1.0-fren)*ref;\n                vec3 amb = c*bg/6.3*ref*(1.0-fren)*calcAO(pos,normal,j);\n                \n                dif*=atten;\n                \n     \t    \tcolor+= dif + amb;\n                \n     \t        ref*=fren*rc; \n                \n                 vec3 lpp=normalize(vec3(0.0,-2.0,-0.0));\n        //ligth\n         \tcolor*=ambient_omni(rd,lpp)+diffuse_directional(normal,lpp,1.2)+specular_directional(rd,rd,normal,1.0);\n     \t  \t\n                \n     \t    \n        \n            \n     \t    ro=pos;\n     \t\trd=reflect(rd,normal);\n     \t  \t  \t\n    }\n   dist+=length(ro-pos);\n    fog = exp(-dist/10.0);\n   color+=ref*bg;\n   return color;\n    \n}\n\nvec3 render(vec3 ro,vec3 rd){\n    vec3 pos = vec3(0,0,0),normal = vec3(0.0,0.0,0.0),color = vec3(0.0,0.0,0.0),ref = vec3(1.0);\n    mat mate; \n   \tfloat prec = 0.002;\n    vec3 bg = vec3(0.3,0.7,1.0)*1.0;\n    float dist = 0.0;\n    float cons = 1.0;\n    float lin = 0.14;\n    float quad = 0.07;\n    int j;\n    while(true){\n   \t\tj++;\n     \t\tvec4 dat = castRay(ro,rd,15.0/float(j));\n     \t\t pos = dat.xyz;\n \t\t\t normal = calcNormal(pos);\n     \t\tbg=textureLod(iChannel0, rd,0.0).rgb;\n            bg=CubemapToHDR(bg);\n            dist+=length(ro-pos);\n            float fog = exp(-dist/10.0);\n            float dist1 = dist+length(lp-pos);\n           \tfloat atten = 1.0/(cons + lin*dist1 + quad * (dist1 * dist1)); \n            \n            if(dat.w >= 2.0){\n     \t       color+=lc*ref;    \n     \t       return color;\n               \n     \t    }else if(dat.w < -1.0){\n            \n            dist+=length(ro-pos);\n  \t\t\tfog = exp(-dist/10.0);\n   \t\t\tcolor+=ref*bg;\n   \t\t\treturn color;\n                \n            }else if(dat.w < -0.5 && j < 3){\n                \n             \n     \t        mate = getMat(dat.w,rd);\n                vec3 c = pow(mate.col,vec3(2.2));   \n     \t        vec3 rc = pow(mate.rcol,vec3(2.2));\n                \n     \t        \n     \t        vec3 ld = normalize(lp-pos);\n                \n     \t        float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n     \t        fren = mix(mate.frc,mate.frm,fren);\n               \n                \n     \t        vec3 dif = renderR(ro,rd,j)*(1.0-fren)*ref;\n                vec3 amb = c*bg/24.0*ref*(1.0-fren)*calcAO(pos,normal,j);\n                dif*=vec3(1.0,1.0,0.0);\n                dif*=atten;\n                \n     \t    \tcolor+= dif;\n                \n     \t        ref*=fren*rc; \n                \n            }else{\n     \t         \n     \t        mate = getMat(dat.w,rd);\n                vec3 c = pow(mate.col,vec3(2.2));   \n     \t        vec3 rc = pow(mate.rcol,vec3(2.2));\n                \n     \t       \n     \t        vec3 ld = normalize(lp-pos);\n                \n     \t        float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n     \t        fren = mix(mate.frc,mate.frm,fren);\n                \n     \t        vec3 lit = (max(dot(ld,normal),0.0))*lc/12.0;\n                lit*=calcShadow(pos,15.0/float(j),j);\n                \n     \t        vec3 dif = c*lit*(1.0-fren)*ref;\n                vec3 amb = c*bg/24.0*ref*(1.0-fren)*calcAO(pos,normal,j);\n                \n                dif*=atten;\n                \n     \t    \tcolor+= dif + amb;\n                \n     \t        ref*=fren*rc; \n                \n                 vec3 lpp=normalize(vec3(0.0,-2.0,-0.0));\n        //ligth\n         \tcolor*=ambient_omni(rd,lpp)+diffuse_directional(normal,lpp,1.2)+specular_directional(rd,rd,normal,1.0);\n     \t  \t\n                \n            if(j>=10)break;\n                    \n                    \n                    \n                \n                \n     \t    }\n            \n     \t    ro=pos;\n     \t\trd=reflect(rd,normal);\n     \t  \t  \t\n    }\n   dist+=length(ro-pos);\n   float fog = exp(-dist/10.0);\n   color+=ref*bg;\n   return color;\n    \n}\n\n\n#define ZERO (min(iFrame,0))\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n#define PI 3.14159\nmat3 rotation;\n\nvec4 LoadVec4( sampler2D sampler, in vec2 vAddr )\n{\n    return texelFetch( sampler, ivec2(vAddr), 0 );\n}\nbool AtAddress( vec2 p, vec2 c ) { return all( equal( floor(p), floor(c) ) ); }\n\nvoid StoreVec4( in vec2 vAddr, in vec4 vValue, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = AtAddress( fragCoord, vAddr ) ? vValue : fragColor;\n}\n\nvoid Cam_LoadState( out CameraState cam, sampler2D sampler, vec2 addr )\n{\n    vec4 vPos = LoadVec4( sampler, addr + vec2(0,0) );\n    cam.vPos = vPos.xyz;\n    vec4 targetFov = LoadVec4( sampler, addr + vec2(1,0) );\n    cam.vTarget = targetFov.xyz;\n    cam.fFov = targetFov.w;\n}\n\nvoid Cam_StoreState( vec2 addr, const in CameraState cam, inout vec4 fragColor, in vec2 fragCoord )\n{\n    StoreVec4( addr + vec2(0,0), vec4( cam.vPos, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + vec2(1,0), vec4( cam.vTarget, cam.fFov ), fragColor, fragCoord );    \n}\n\nmat3 Cam_GetWorldToCameraRotMatrix( const CameraState cameraState )\n{\n    vec3 vForward = normalize( cameraState.vTarget - cameraState.vPos );\n\tvec3 vRight = normalize( cross(vec3(0, 1, 0), vForward) );\n\tvec3 vUp = normalize( cross(vForward, vRight) );\n    \n    return mat3( vRight, vUp, vForward );\n}\n\nvec2 Cam_GetViewCoordFromUV( const in vec2 vUV )\n{\n\tvec2 vWindow = vUV * 2.0;\n\tvWindow.x *= iResolution.x / iResolution.y;\n\n\treturn vWindow;\t\n}\n\nvoid Cam_GetCameraRay( const vec2 vUV, const CameraState cam, out vec3 vRayOrigin, out vec3 vRayDir )\n{\n    vec2 vView = Cam_GetViewCoordFromUV( vUV );\n    vRayOrigin = cam.vPos;\n    float fPerspDist = 1.0 / tan( radians( cam.fFov ) );\n    vRayDir = normalize( Cam_GetWorldToCameraRotMatrix( cam ) * vec3( vView, fPerspDist ) );\n}\n\nvec2 Cam_GetUVFromWindowCoord( const in vec2 vWindow )\n{\n    vec2 vScaledWindow = vWindow;\n    vScaledWindow.x *= iResolution.y / iResolution.x;\n\n    return vScaledWindow * 0.5 + 0.5;\n}\n\nvec2 Cam_WorldToWindowCoord(const in vec3 vWorldPos, const in CameraState cameraState )\n{\n    vec3 vOffset = vWorldPos - cameraState.vPos;\n    vec3 vCameraLocal;\n\n    vCameraLocal = vOffset * Cam_GetWorldToCameraRotMatrix( cameraState );\n\t\n    vec2 vWindowPos = vCameraLocal.xy / (vCameraLocal.z * tan( radians( cameraState.fFov ) ));\n    \n    return vWindowPos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 tot = vec3(0.0);\n\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\nvec2 uv = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n\t\n      \n          vec2 m2 = iMouse.xy / iResolution.xy;\n    m2.y *= -1.0;\n    m2 -= vec2(0.5);\n    \nfloat fAngle = (iMouse.x / iResolution.x) * radians(360.0);\n    float fElevation = (iMouse.y / iResolution.y) * radians(90.0);\n\n    if ( iMouse.x <= 0.0 )\n    {\n        fAngle = -2.3;\n        fElevation = 0.5;\n    }\n\n    float fDist = 6.0;\n    \n  \n    //float p0 = texture(iChannel0,vec2(0.0,0.0)).g;\n    \n\n   CameraState cam;\n    \n   \n   \n  \tcam.vPos = vec3(sin(fAngle) * fDist * cos(fElevation),sin(fElevation) * fDist,cos(fAngle) * fDist * cos(fElevation));\n    cam.vTarget = vec3(0,0.0,0);\n    cam.fFov = 5.0;\n    \n    vec3 ro = vec3(0.0,0.0,2.9)+vec3(0.0,0.0,0.0);\n    vec3 rd = normalize(vec3(uv,-2.0));\n    Cam_GetCameraRay( vec2(uv.x,uv.y/0.6), cam, ro, rd );\n   \n        \n  \t\n        \n\t// initial mouse position\n    if(iMouse.xy == vec2(0.0))\n    {\n        m2= vec2(0.0, 8.0);\n    }\n\n    rotation = mat3(1.0);\n    rotation = rotx(m2.y * 10.0);\n    rotation *= rotx(PI * 0.5);\n    rotation *= roty(m2.x * 10.0);\n    \n   \n\n    lp=rotation*lp;\n \n    \n    vec3 color = render(ro,rd);\n\tcolor=Tonemap_ACES(color);\n       \n    vec3 curr = uncharted2ToneMapping(color.xyz*5.0);\n\tvec3 whiteScale = 1.0/uncharted2ToneMapping(W); \n\tvec3 mapped = curr*whiteScale;\n\t\n\tmapped = pow(mapped, vec3(1.0 / 2.2));\n     \n    tot += mapped;\n    }\n     tot /= float(AA*AA);\n\t\n\tfragColor =  vec4(tot,1.0) ;\n}","name":"Image","description":"","type":"image"}]}