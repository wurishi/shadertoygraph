{"ver":"0.1","info":{"id":"dscfRH","date":"1696858902","viewed":89,"name":"pyramidille dda","username":"jt","description":"Proof-of-concept:\nimplementation of a pyramidylle honeycomb DDA as special case of a 7d hyper-voxel DDA\nby combining a tetrahedral-octahedral honeycomb with a cubic honeycomb.\nWORK IN PROGRESS","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","voxel","tetrahedron","4d","honeycomb","dda","octahedron","cut","tesselation","project","hexakis","lift","7d","pyramidylle"],"hasliked":0,"parentid":"Dt2czD","parentname":"tetrahedral-octahedral honeycomb"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dscfRH pyramidille dda, 2023 by jt\n// https://www.shadertoy.com/view/Dt2czD tetrahedral-octahedral honeycomb dda\n// based on https://www.shadertoy.com/view/cl2fRd DDA test site 2d\n\n// DDA originally inspired by https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// and tutorial http://lodev.org/cgtutor/raycasting.html\n// distance & normal reconstruction, grid transform and lift to hypervoxels by jt\n\n// Proof-of-concept:\n// implementation of a pyramidylle honeycomb DDA as special case of a 7d hyper-voxel DDA\n// by combining a tetrahedral-octahedral honeycomb with a cubic honeycomb.\n// https://en.wikipedia.org/wiki/Tetrahedral-octahedral_honeycomb\n// https://en.wikipedia.org/wiki/Tetragonal_disphenoid_honeycomb#Hexakis_cubic_honeycomb\n\n// tags: 3d, raytracing, raycasting, voxel, tetrahedron, 4d, honeycomb, dda, octahedron, cut, tesselation, project, hexakis, lift, 7d, pyramidylle\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 160\n\nfloat torus(vec3 p, vec2 t)\n{\n    return length(vec2(length(p.xy) - t.x, p.z)) - t.y;\n}\n\nbool example()\n{\n    return false;//fract(iTime / 10.0) < 0.5;\n}\n\n// Is there a shorter way to implement strictly POSITIVE integer-modulo?\nint mod_positive(int a, int b)\n{\n    // TODO: codegolf this line\n    return (a > 0 && b < 0) ? (a - 1) % b + b + 1 : (a < 0 && b > 0) ? (a + 1) % b + b - 1 : a % b;\n}\n\n// Emulate 7d vector. Would be so much easier if GLSL supported vec7...\n\nstruct VEC7\n{\n    vec4 tetoct;\n    vec3 cubic;\n};\n\nstruct BVEC7\n{\n    bvec4 tetoct;\n    bvec3 cubic;\n};\n\nstruct IVEC7\n{\n    ivec4 tetoct;\n    ivec3 cubic;\n};\n\nVEC7 RECIPROCAL(VEC7 v)\n{\n    return VEC7(1.0 / v.tetoct, 1.0 / v.cubic);\n}\n\nVEC7 SCALAR_TO_VEC7(float s)\n{\n    return VEC7(vec4(s), vec3(s));\n}\n\nIVEC7 SCALAR_TO_IVEC7(int s)\n{\n    return IVEC7(ivec4(s), ivec3(s));\n}\n\nVEC7 TO_FLOAT(BVEC7 v)\n{\n    return VEC7(vec4(v.tetoct), vec3(v.cubic));\n}\n\nVEC7 TO_FLOAT(IVEC7 v)\n{\n    return VEC7(vec4(v.tetoct), vec3(v.cubic));\n}\n\nIVEC7 TO_INT(BVEC7 v)\n{\n    return IVEC7(ivec4(v.tetoct), ivec3(v.cubic));\n}\n\nIVEC7 TO_INT(VEC7 v)\n{\n    return IVEC7(ivec4(v.tetoct), ivec3(v.cubic));\n}\n\nVEC7 ABS(VEC7 v)\n{\n    return VEC7(abs(v.tetoct), abs(v.cubic));\n}\n\nVEC7 SIGN(VEC7 v)\n{\n    return VEC7(sign(v.tetoct), sign(v.cubic));\n}\n\nVEC7 NEG(VEC7 v)\n{\n    return VEC7(-v.tetoct, -v.cubic);\n}\n\nIVEC7 NEG(IVEC7 v)\n{\n    return IVEC7(-v.tetoct, -v.cubic);\n}\n\nVEC7 FLOOR(VEC7 v)\n{\n    return VEC7(floor(v.tetoct), floor(v.cubic));\n}\n\nVEC7 SCALE(VEC7 v, float s)\n{\n    return VEC7(v.tetoct * s, v.cubic * s);\n}\n\nVEC7 ADD_HALF(VEC7 v)\n{\n    return VEC7(v.tetoct + 0.5, v.cubic + 0.5);\n}\n\nVEC7 ADD(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct + w.tetoct, v.cubic + w.cubic);\n}\n\nIVEC7 ADD(IVEC7 v, IVEC7 w)\n{\n    return IVEC7(v.tetoct + w.tetoct, v.cubic + w.cubic);\n}\n\nVEC7 SUB(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct - w.tetoct, v.cubic - w.cubic);\n}\n\nVEC7 MUL(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct * w.tetoct, v.cubic * w.cubic);\n}\n\nIVEC7 MUL(IVEC7 v, IVEC7 w)\n{\n    return IVEC7(v.tetoct * w.tetoct, v.cubic * w.cubic);\n}\n\nVEC7 DIV(VEC7 v, VEC7 w)\n{\n    return VEC7(v.tetoct / w.tetoct, v.cubic / w.cubic);\n}\n\nIVEC7 DIV(IVEC7 v, IVEC7 w)\n{\n    return IVEC7(v.tetoct / w.tetoct, v.cubic / w.cubic);\n}\n\nfloat DOT(VEC7 v, VEC7 w)\n{\n    return dot(v.tetoct, w.tetoct) + dot(v.cubic, w.cubic);\n}\n\nfloat LENGTH(VEC7 v)\n{\n    return sqrt(DOT(v, v));\n}\n\nVEC7 MIN(VEC7 v, VEC7 w)\n{\n    return VEC7(min(v.tetoct, w.tetoct), min(v.cubic, w.cubic));\n}\n\nVEC7 MAX(VEC7 v, VEC7 w)\n{\n    return VEC7(max(v.tetoct, w.tetoct), max(v.cubic, w.cubic));\n}\n\nBVEC7 LTE(VEC7 v, VEC7 w)\n{\n    return BVEC7(lessThanEqual(v.tetoct, w.tetoct), lessThanEqual(v.cubic, w.cubic));\n}\n\nBVEC7 GTE(VEC7 v, VEC7 w)\n{\n    return BVEC7(greaterThanEqual(v.tetoct, w.tetoct), greaterThanEqual(v.cubic, w.cubic));\n}\n\n// sets bit to true if corresponding component is the minimum (multiples possible)\nBVEC7 LEAST(VEC7 v)\n{\n    float minimum = min(min(min(v.tetoct.x, v.tetoct.y), min(v.tetoct.z, v.tetoct.w)), min(min(v.cubic.x, v.cubic.y), v.cubic.z));\n    //float minimum = min(min(v.tetoct.x, v.tetoct.y), min(v.tetoct.z, v.tetoct.w)); // XXX\n    return LTE(v, SCALAR_TO_VEC7(minimum));\n}\n\nvec3 apply_project(mat3x4 M, VEC7 v)\n{\n    return transpose(M)*v.tetoct + v.cubic;\n}\n\nvec4 traverse_pyramidille(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (additional fourth dimension to step along prism height) by jt\n{\n    vec3 scale = vec3(1,1,sqrt(2.0));\n    ray_pos_orig *= scale;\n    ray_dir_orig *= scale;\n\n    // Fortunately mat3x7 can be replaced by mat3x4 and identity mat3 here:\n    //  * the cubic honeycomb matrix is just identity so omitted here\n    //  * tetrahedra-octahedral matrix:\n    //    coordinate-system along space orthogonal to diagonal (1,1,1,1)\n    mat3x4 TetOct =\n        mat3x4 // every column represents the direction of one axis of the 4d coordinate system projected to 3d\n        (\n            normalize(vec4(+1,-1, 0, 0)),\n            normalize(vec4( 0, 0,+1,-1)),\n            normalize(vec4(+1,+1,-1,-1))\n        );\n/*\n    // coordinate-system along space orthogonal to diagonal (1,1,1,1) VARIANT (rotated 45 degrees around z axis) for center view\n    mat3x4 TetOct =\n        mat3x4\n        (\n            normalize(vec4(+1,-1,-1,+1)),\n            normalize(vec4(-1,-1,+1,+1)),\n            normalize(vec4(-1,+1,-1,+1))\n        );\n\n*/\n    // Lift 3d vectors to 7d\n    vec3 aspect = vec3(vec2(sqrt(2.0)), 1.0);\n    VEC7 ray_pos = VEC7(TetOct * ray_pos_orig.xyz, ray_pos_orig.xyz*aspect);\n    VEC7 ray_dir = VEC7(TetOct * ray_dir_orig.xyz, ray_dir_orig.xyz*aspect);\n\n    // dda initialization (four lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    IVEC7 tile_pos = TO_INT(FLOOR(ray_pos)); // round down position to get tile position\n    VEC7 delta_dist = RECIPROCAL(ABS(ray_dir)); // reciprocal absolute ray direction\n    IVEC7 ray_step = TO_INT(SIGN(ray_dir)); // sign of ray direction\n    VEC7 side_dist = MUL(ADD_HALF(MUL(TO_FLOAT(ray_step), ADD_HALF(SUB(TO_FLOAT(tile_pos), ray_pos)))), delta_dist); // initial distances to nearest walls by dimension\n    BVEC7 nearest = LEAST(side_dist); // component is true if nearest wall in that dimension\n\n    vec4 result = vec4(-ray_dir_orig, DIST_MAX); // sky\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        vec3 projected = apply_project(TetOct, TO_FLOAT(tile_pos))/scale;\n        //vec3 projected = transpose(TetOct)*TO_FLOAT(tile_pos).a; // tetrahedral-octahedral honeycomb\n        //vec3 projected = TO_FLOAT(tile_pos).b; // cubic honeycomb\n        vec2 r = vec2(mix(10.0, 20.0, 0.5+0.5*cos(iTime/5.0)), mix(5.0, 7.5, 0.5+0.5*cos(iTime/5.0)));\n        bool solid = torus(projected, r) < 0.0;\n        \n/*   \n        // test-shape\n        //bool inside = all(lessThan(abs(projected), vec3(10.0))); // contrain to cube\n        bool inside = all(lessThan(projected, vec3(10.0))); // constrain to corner\n        //bool plane = abs(dot(projected, normalize(vec3(1,1,1)))) < 1.5;\n        bool plane = dot(projected, normalize(vec3(1,1,1))) < 1.5 && dot(projected, normalize(vec3(1,1,1))) > -1.0;\n        bool cut = abs(projected.x) < mix(0.0, 10., 0.5+0.5*cos(iTime));;\n        bool solid = inside && plane && cut;\n*/\n\n        // cube XXX how to get flat floor/ceiling? XXX\n        //solid = all(lessThan(abs(0.5+projected*scale), vec3(15)));\n        \n        // octahedron XXX how to get flat sides? XXX\n        //solid = max(abs(projected.x), abs(projected.y)) < (18.0 - abs(projected.z)*sqrt(3.0)/sqrt(2.0));\n\n        if(solid)\n        {\n            float flip = mod_positive(tile_pos.tetoct.x+tile_pos.tetoct.y+tile_pos.tetoct.z+tile_pos.tetoct.w,2)==1 ? 1.0 : -1.0;\n\n            float dist = LENGTH(MUL(TO_FLOAT(nearest), SUB(side_dist, delta_dist)));\n            // NOTE: nearest contains only one component set to true indicating nearest direction and since normal points along this direction just cast nearest to normal (sign opposite to ray direction)\n            // Then: Project 6d coordinates back to 2d (this would be p=transpose(M)*q)\n            result = vec4(apply_project(TetOct,MUL(TO_FLOAT(nearest),TO_FLOAT(NEG(ray_step))))/scale, dist*flip);\n\n            break;\n        }\n\n        // adapted from core of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        nearest = LEAST(side_dist); // component is true if nearest wall in that dimension\n        side_dist = ADD(side_dist, MUL(TO_FLOAT(nearest), delta_dist)); // update distances to nearest walls by dimension\n        tile_pos = ADD(tile_pos, MUL(TO_INT(nearest), ray_step)); // step to next tile in direction of nearest wall\n    }\n\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = -pi/4.0 - 1.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -25.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    //ray_pos.z += 0.5;\n\n    vec4 result = traverse_pyramidille(ray_pos, ray_dir);\n    bool code = result.w >= 0.0; // decode type (tetrahedron/octahedron)\n    result.w = abs(result.w);\n    //result.xyz *= dot(result.xyz, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n    vec3 color = vec3(0);\n    if(result.w < DIST_MAX)\n    {\n        vec3 n = result.xyz;\n        float d = result.w;\n        vec3 dst = ray_pos + ray_dir * d;\n        d *= length(ray_dir); // fix distance in case ray was not normalized\n\n        //vec3 light_dir = normalize(vec3(1,2,3));\n        vec3 light_dir = normalize(vec3(cos(iTime),sin(iTime),3));\n        float diffuse = max(0.0, dot(light_dir, n));\n        //float diffuse = abs(dot(light_dir, n));\n        float shadow = diffuse > 0.0 ? traverse_pyramidille(dst+result.xyz*0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0 : 0.0;\n        float ambient = 0.5;\n        float specular = max(0.0, dot(result.xyz, normalize(-normalize(ray_dir) + light_dir)));\n        color = vec3(1);\n        //color *= mix(vec3(0.5), vec3(1.0), checker(dst*2.0)); // texture\n        //color *= vec3(0.5 + 0.5 * result.xyz); // debug normals\n        color *= code ? vec3(1,0.3,0.1) : vec3(0.1,0.3,1);\n        color *= shadow * diffuse + ambient;\n        color += shadow * 0.5 * pow(specular, 50.0);\n\n        vec3 fogcolor = vec3(0); // fog\n        color *= mix(fogcolor, color, exp(-d * d / 1000.0)); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0,0,0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}