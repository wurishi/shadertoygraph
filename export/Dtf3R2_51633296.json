{"ver":"0.1","info":{"id":"Dtf3R2","date":"1672014842","viewed":80,"name":"CompGrafica","username":"felipsdmelo","description":"trabalho","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Simplest 3D\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/dKA5ZVALOhs\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro, rd))/length(rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; // 0 <> 1\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0., 0., -1.);\n    vec3 rd = vec3(uv.x, uv.y, 0.)-ro;\n    \n    float t = iTime;\n    vec3 p = vec3(sin(t), 0., 1.+cos(t));\n    float d = DistLine(ro, rd, p);\n    \n    d = smoothstep(.1, .09, d);\n    \n\tfragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}