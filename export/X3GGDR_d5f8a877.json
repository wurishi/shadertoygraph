{"ver":"0.1","info":{"id":"X3GGDR","date":"1717479452","viewed":62,"name":"BLOCKS [Optimized]","username":"typidoyun","description":"typidoyun","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blocks"],"hasliked":0,"parentid":"XXy3WR","parentname":"BLOCKS"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 128\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nconst float inf = 3.402823466e+38;\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n\nmat2 rot( float rad ) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nint getBlockY(vec2 p) {\n    return int(noise(vec2(int(p.x), int(p.y)) / 50.) * 80.);\n}\n\nfloat map(vec3 p) {\n    vec3 q = p;\n    q.xz = mod(p.xz, 1.) - .5;\n    float block = sdBox(q - vec3(0, getBlockY(p.xz) - 79, 0), vec3(1., 80., 1.));\n    \n    float minBlock = block;\n    \n    return block;\n}\n\n\nstruct RaymarchResults {\n    float iter;\n    vec3 surfacePoint;\n};\n\nRaymarchResults doRaymarching(vec3 rayOrigin, vec3 rayDirection) {\n    RaymarchResults results;\n    float t = 0.; // total distance travelled\n    \n    for (int i = 0; i < MAX_ITER; i++) {\n        vec3 p = rayOrigin + rayDirection * t;\n       \n        float d = map(p) / 2.;\n        \n        t += d;\n        \n        if (d < 0.00001) { // early stop if close enough\n            results.iter = float(i);\n            results.surfacePoint = p;\n            return results;\n        }\n        if (t > 10000.) break; // early stop if too far\n    }\n    \n    // results.iter = float(MAX_ITER);\n    results.iter = -1.;\n    return results;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec3 rayOrigin = vec3(0, 0., -1);\n    vec3 arm = vec3(0., 0., -200.);\n    vec3 rayDirection = normalize(vec3(uv, 0) - rayOrigin);\n    \n    vec2 mouseUV = (iMouse.xy / iResolution.xy) * 2. - 1.;\n    \n    rayDirection.yz *= rot(3.141592 / 2. * -mouseUV.y);\n    rayDirection.xz *= rot(3.141592 * 2. * -mouseUV.x);\n    \n    arm.yz *= rot(3.141592 / 2. * -mouseUV.y);\n    arm.xz *= rot(3.141592 * 2. * -mouseUV.x);\n    \n    RaymarchResults results = doRaymarching(rayOrigin + arm, rayDirection);\n    \n    vec3 col = vec3(results.iter == -1. ? 0. : results.iter) / float(MAX_ITER);\n\n    // fragColor = vec4(col.x * .45, col.x * .88, col.x * .4, 1.0);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}