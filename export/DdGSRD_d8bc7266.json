{"ver":"0.1","info":{"id":"DdGSRD","date":"1680766307","viewed":98,"name":"Fish eye distortion - GPU ver","username":"ycfeej","description":"Using algorithm from opencv","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lens","postprocess"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Using algorithm from: https://github.com/opencv/opencv/blob/4.1.0/modules/calib3d/src/fisheye.cpp\n// Parameters that can be played around:\n// f\n// center(c)\n// k1\n// k2\n// k3\n// k4\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = iResolution.xy / 2.0;\n    vec2 f = vec2(200.0, 200.0);\n    vec2 c_pos = (fragCoord.xy - center) / f;\n    float theta_d = min(max(sqrt(c_pos.x * c_pos.x + c_pos.y * c_pos.y), -1.570795), 1.570795);\n    const float eps = 0.00001;\n    const float k1 = 0.178966;\n    const float k2 = -0.033031;\n    const float k3 = 0.00278;\n    const float k4 = -0.000548;\n    float scale = 1.0;\n    \n    if (theta_d > eps) {\n      float theta = theta_d;\n      \n      for (int i = 0; i < 10; i++) {\n        float theta2 = theta * theta;\n        float theta4 = theta2 * theta2;\n        float theta6 = theta4 * theta2;\n        float theta8 = theta6 * theta2;\n        float k1_theta2 = k1 * theta2;\n        float k2_theta4 = k2 * theta4;\n        float k3_theta6 = k3 * theta6;\n        float k4_theta8 = k4 * theta8;\n        float theta_fix = (theta * (1.0 + k1_theta2 + k2_theta4 + k3_theta6 + k4_theta8) - theta_d) / (1.0 + 3.0 * k1_theta2 + 5.0 * k2_theta4 + 7.0 * k3_theta6 + 9.0 * k4_theta8);\n        theta = theta - theta_fix;\n        if (abs(theta_fix) < eps) break;\n      }\n      scale = tan(theta) / theta_d;\n    }\n    \n    vec2 p_u = c_pos * scale;\n    p_u = p_u * f + center;\n    vec2 uv = vec2(p_u.x / iResolution.x, p_u.y / iResolution.y);\n    vec3 col = texture(iChannel0, uv).rgb;\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}