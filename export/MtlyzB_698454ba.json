{"ver":"0.1","info":{"id":"MtlyzB","date":"1505366138","viewed":80,"name":"Super Checker Shader","username":"anonguy","description":"Here is my checkerboard shader for EGP-200","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Declaration of variables used. Colors and rows/columns\n    int columns = 25;\n    int rows = 25;\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    //Here we calculate the columns and rows. Type casting because columns are ints this is a float. Ceil is needed because otherwise\n    //the even or odd check wouldn't work.\n    float numColumns = ceil(uv.x * float(columns)); \n    float numRows = ceil(uv.y * float(rows));\n    //Now to check if the row is even or odd, which will determine the color scheme. If the current row number divided by 2 is zero,\n    //it is even. If not, it is odd.\n    float isRowsEven = mod(numRows, 2.0);\n    float isColumnsEven = mod(numColumns, 2.0);\n    \n    //The color scheme switches for evens and odds. Evens get white first then black, odds get black first then white. This is so\n    //the colors won't overlap in some freaky stitch pattern.\n    if(isColumnsEven == 0.0){\n        if(isRowsEven == 0.0) fragColor = white;\n        else fragColor = black;\n    }\n    else {\n        if(isRowsEven == 0.0) fragColor = black;\n        else fragColor = white;\n    }\n}","name":"Image","description":"","type":"image"}]}