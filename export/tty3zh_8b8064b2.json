{"ver":"0.1","info":{"id":"tty3zh","date":"1578759670","viewed":116,"name":"First landscape","username":"olealgo","description":"shadertoy fun. Learning the basics. Thanks to artOfCode for being a great tutor!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["shading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* artOfCode is the best tutor :-) \n*\n*/\n\n#define S(a, b, t) smoothstep(a,b,t)\n\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur) {\n    float m = S(-blur, blur, p.y-yb);\n    m *= S(blur, -blur, p.y-yt);\n    \n    p.x = abs(p.x);\n    \n    // 0 when p.y=yb and 1 when p.y=yt\n    \n    float w = mix(wb, wt, (p.y-yb)/ (yt-yb)); \n    m *= S(blur, -blur, p.x-w);\n    return m;\n}\n\nvec4 Tree(vec2 uv, vec3 col, float blur) {\n\n    float m = TaperBox(uv, .03, .03, -.05, .25, blur); // bottom\n   \tm += TaperBox(uv, .15, .05, .25, .5, blur); // first tapered element\n    m += TaperBox(uv, .15, .05, .5, .75, blur); // first tapered element\n    m += TaperBox(uv, .1, .01, .75, 1., blur); // first tapered element\n   \n    float shadow = TaperBox(uv-vec2(0.2,0), .1, .5, .15, .25, blur);\n    shadow += TaperBox(uv-vec2(0.25,0), .1, .5, .45, .5, blur);\n    shadow += TaperBox(uv-vec2(0.25,0), .1, .5, .7, .75, blur);\n    \n    \n    col -= shadow;\n    return vec4(col, m);\n}\n\nfloat GetHeight(float x) {\nreturn sin(x*.423)+sin(x)*.3;\n\n}\n\nvec4 Layer(vec2 uv, float blur) {\n    // Fixed pixel color\n    vec4 col = vec4(0);\n    \n    float id = floor(uv.x);\n    float n = fract(sin(id*234.12)*5422.3)*2.-1.; // between 0-1 fractions\n\tfloat x = n*.3;\n    float y = GetHeight(uv.x); \n    float ground = S(blur, -blur, uv.y+y); // ground\n    col += ground;\n    \n    y = GetHeight(id+.5+x);\n    \n    uv.x = fract(uv.x)-0.5;\n    \n \n    vec4 tree = Tree((uv-vec2(x, -y))*vec2(1,1.+n*.2), vec3(0.3), blur);\n    //col.rg = uv;\n    \n    col = mix(col, tree, tree.a);\n    col.a = max(ground, tree.a);\n    return col;\n\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.25,754.34));\n    p += dot(p, p+478.23);\n    return fract(p.x*p.y);\n}\n\nvec4 TwinkleStarLayer(vec2 uv, float t) {\n    vec4 col = vec4(0);\n    // Create snow / stars / contrast pixels\n    float twinkle = dot(length(sin(uv+t*3.)), length(cos(uv*vec2(22.,6.7)-t*3.)));\n    //twinkle = sin(twinkle*10.)*.5+.5;\n    \n    float stars = pow(Hash21(uv), 1000.) * twinkle; // Functions that returns between 1 and 2 + add twinkle\n    col += stars * 13.;\n   \n    // show twinkle in front\n    //col += twinkle;   \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy;\n    \n    vec2 Mouse = (iMouse.xy / iResolution.xy)*2.-1.;\n\n    //uv.x += iTime*.1;\n    // zoom out\n    //uv *=2.0; \n   \n    \n    float t = iTime *.3;\n\n    float blur = 0.005;\n\n    // black\n    vec4 col = vec4(0);\n    \n    \n    // stars = first layer\n    vec4 stars = vec4(TwinkleStarLayer(uv, t));\n    col += stars;\n    \n    \n    float moon = S(.35, .0003, length(uv-vec2(.15, .005)) -.05);\n    //moon *= S(.3, .15, length(uv-vec2(.001,.001)));\n    \n    col += moon;\n    \n    vec4 layers;\n    \n    \n    // Create several layers\n    for(float i=0.; i < 1.; i+= 1./5.) {\n    \t\n        float scale = mix(30., 1., i);\n        blur = mix(.09, .005, i);\n        layers = Layer(uv*scale+vec2(t+i*100., i)-Mouse, blur);\n        layers.rgb *= (1.-i)*vec3(.3,.7,.8);\n        \n        col = mix(col, layers, layers.a);\n    }\n    \n    layers = Layer(uv+vec2(t*0.5, 1)-Mouse, .025);\n    \n    col = mix(col, layers*.1, layers.a);\n\n    \n    //  coordinate axis X + Y\n    //  float thickness = 1./iResolution.y;\n \t//  if (abs(uv.x) < thickness) col.g = 1.;\n \t//  if (abs(uv.y) > thickness) col.r = 1.;\n    \n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}