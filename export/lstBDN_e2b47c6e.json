{"ver":"0.1","info":{"id":"lstBDN","date":"1525277137","viewed":153,"name":"Fake Dynamic Clouds","username":"nr4","description":"2D multifreq smoothstep noise. Each frequency is shifted a little with time and frag coord to achieve the motion-like effect.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","clouds","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Fake Dynamic Clouds\n * \n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst float pi = acos(-1.);\nconst vec2 c = vec2(1.,0.);\n\nfloat rand(vec2 a0)\n{\n    return -1.+2.*fract(sin(dot(a0.xy ,vec2(12.9898,78.233)))*43758.5453);\n}\n\nfloat smoothstep_noise(float x)\n{\n    float r1 = -1.+2.*rand(floor(x)*c.xx), r2 = -1.+2.*rand(ceil(x)*c.xx);\n    return mix(r1, r2, smoothstep(0., 1., fract(x)));\n}\n\nfloat mfsmoothstep_noise(float x, float f0, float f1, float phi)\n{\n    float sum = 0.;\n    float a = 1.;\n    \n    for(float f = f0; f<f1; f = f*2.)\n    {\n        sum = a*smoothstep_noise(f*x) + sum;\n        a = a*phi;\n    }\n    \n    return sum;\n}\n\nfloat smoothstep_noise2d(vec2 x)\n{\n    vec2 d = floor(x);\n    x = fract(x);\n    float x00 = rand(d),\n        x01 = rand(d+c.yx),\n        x10 = rand(d+c.xy), \n        x11 = rand(d+c.xx);\n    return mix(mix(x00, x01, smoothstep(0.,1., x.y)), mix(x10, x11, smoothstep(0.,1., x.y)), smoothstep(0.,1., x.x));\n}\n\nfloat mfsmoothstep_noise2d(vec2 x, float f0, float f1, float phi)\n{\n    float sum = 0.;\n    float a = 1.2;\n    \n    for(float f = f0; f<f1; f = f*2.)\n    {\n        sum = a*smoothstep_noise2d(f*x+.2*smoothstep_noise(5.e-1*iTime+1.e-1*length(x))*c.yx-5.e-1*iTime*c.xy) + sum;\n        a = a*phi;\n    }\n    \n    return sum;\n}\n\nmat3 rot(vec3 p)\n{\n    vec3 cp = cos(p), sp = sin(p);\n    mat3 m = mat3(cp.y*cp.x, cp.x*sp.z+cp.z*sp.x*sp.y, sp.x*sp.z-cp.x*cp.z*sp.y, \n           -cp.y*sp.z, cp.x*cp.z-sp.x*sp.y*sp.z, cp.z*sp.x+cp.x*sp.y*sp.z, \n           sp.y, -cp.y*sp.x, cp.x*cp.y);\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy+1.2;\n\t\n    vec3 bg = mix(vec3(255.,20.,0.)/255., vec3(222.,83.,14.)/255., uv.y);\n    vec3 col = mix(bg, vec3(254.,44.,0.)/255., clamp(.5+.5*mfsmoothstep_noise2d(uv, 5.e0, 1.e2, .45), 0., 1.));\n\tcol = mix(col, vec3(222., 255., 14.)/255., clamp(.5+.5*mfsmoothstep_noise2d(uv, 5.e0, 1.e2, .45),0.,1.));\n    col = mix(col,c.xxx, clamp(.5+.5*mfsmoothstep_noise2d(uv, 5.e0, 1.e2, .45),0.,1.));\n    col = mix(col, vec3(255., 255., 0.)/255., clamp(.1+.2*mfsmoothstep_noise2d(uv, 5.e0, 1.e2, .45),0.,1.));\n    col = mix(clamp(.5*rot(vec3(1.2141235,2.215352,3.123532)*2.e-1*iTime)*(col), 0., 1.), col, clamp(.5+1.2*mfsmoothstep_noise2d(uv, 5.e0, 1.e2, .45),0.,1.));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}