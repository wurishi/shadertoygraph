{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float cubeWithHolesSDF(vec3 p, vec3 b, float holeRadius) {\n    vec3 d = abs(p) - b; \n    float cubeDist = length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n    float holeX = length(p.yz) - holeRadius;\n    float holeY = length(p.xz) - holeRadius;\n    float holeZ = length(p.xy) - holeRadius;\n    return max(cubeDist, -min(holeX, min(holeY, holeZ)));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dist = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * dist;\n        float angle = iTime;\n        mat3 rotation = mat3(\n            cos(angle), 0.0, -sin(angle),\n            0.0, 1.0, 0.0,\n            sin(angle), 0.0, cos(angle)\n        );\n        \n        vec3 rotatedP = rotation * p;\n        float d = cubeWithHolesSDF(rotatedP, vec3(1.0, 1.0, 1.0), 0.3);\n        if (d < 0.01) break;\n        dist += d;\n    }\n    return dist;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        cubeWithHolesSDF(p + vec3(e.x, e.y, 0.0), vec3(1.0, 1.0, 1.0), 0.3) - cubeWithHolesSDF(p - vec3(e.x, e.y, 0.0), vec3(1.0, 1.0, 1.0), 0.3),\n        cubeWithHolesSDF(p + vec3(0.0, e.x, e.y), vec3(1.0, 1.0, 1.0), 0.3) - cubeWithHolesSDF(p - vec3(0.0, e.x, e.y), vec3(1.0, 1.0, 1.0), 0.3),\n        cubeWithHolesSDF(p + vec3(e.y, 0.0, e.x), vec3(1.0, 1.0, 1.0), 0.3) - cubeWithHolesSDF(p - vec3(e.y, 0.0, e.x), vec3(1.0, 1.0, 1.0), 0.3)\n    ));\n}\n\nvec3 phongLighting(vec3 p, vec3 lightPos, vec3 viewDir) {\n    vec3 normal = calcNormal(p);\n    vec3 lightDir = normalize(lightPos - p);\n\n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);\n\n    return vec3(0.1) + vec3(0.8) * diff + vec3(1.0) * spec;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    vec3 ro = vec3(0, 0, 5);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float dist = rayMarch(ro, rd);\n    vec3 p = ro + rd * dist;\n\n    if (dist > 100.0) {\n        fragColor = vec4(0, 0.4, 0.6, 1);\n        return;\n    }\n\n    float lightRadius = 3.0;\n    vec3 lightPos = vec3(\n        lightRadius * cos(iTime),\n        lightRadius * sin(iTime),\n        3);\n\n    vec3 color = phongLighting(p, lightPos, -rd);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lfyBRR","date":"1734363684","viewed":74,"name":"Кубик с Дырками","username":"Maxwells_s","description":"Куб с Дырками, что ещё сказать. Только он не работает...\nКажись четырёхмерный. ","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["noneuclidian"],"hasliked":0,"parentid":"","parentname":""}}