{"ver":"0.1","info":{"id":"3lGyWW","date":"1610974487","viewed":87,"name":"Muramasa","username":"tono","description":"glsl","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["katana"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat pi = acos(-1.);\nvec3 pp;\n\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\n//https://www.shadertoy.com/view/XsX3zB\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3,F3,F3)));\n    vec3 x = p - s + dot(s, vec3(G3,G3,G3));\n\n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.,0.,0.), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n\n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n\n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n\n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0,52.0,52.0,52.0));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat pedestal(vec3 p)\n{\n    vec3 bp = p;\n    //bp.z -= 2.;\n    bp.z = abs(bp.z) - 8.;\n    bp.y -= 1.5;\n\tfloat b = sdBox(bp,vec3(.7,2.,.5)) - .2;\n    b = max(b , -sdBox(p - vec3(0.,-.36,0.) , vec3(.1,.5,10.5) )) ;\n    \n    float b2 = sdBox(p - vec3(0.,4.,0.),vec3(2.,1.,10.)) - .1;\n    b = min(b,b2);\n    if(b < 1.)\n    {\n        b -= simplex3d((p / vec3(1.,7.,1.)) * 7.) / 50.;\n    }\n    float o = b;\n    return o;\n}\n\nfloat station(vec3 p)\n{\n    p.yz *= rot(p.z/250.);\n    vec3 bp = p;\n    float b = sdBox(p - vec3(0.,13.,0.) , vec3(5.,8.,12.)) - .6;\n    if(b < 1.)\n    {\n        b -= simplex3d((p / vec3(2.,12.,2.)) * 30.)/10.;\n    }\n    return b;\n}\n\nfloat road(vec3 p)\n{\n    float o;\n    o = sdBox(p - vec3(0.,30.,0.),vec3(1000.,9.,16.)) - .5;\n    return o;\n}\n\nvec2 map(vec3 p)\n{\n    float o = 10.;\n    float id = 0.;\n    vec3 pedestalP = p;\n    vec3 po = p;\n    \n    p.yz *= rot(-p.z /90.);\n    p.y += 1.2;\n    o = sdBox(p,vec3( (max(pow( p.y/10.+.1  ,1.2), 0.01)) ,.5,12.) );\n    \n    pp = p;\n    float ped = pedestal(pedestalP);\n    if(ped < o)\n    {\n        o = ped;\n        id = 1.;\n    }\n    float station = station(po);\n    if(station < o)\n    {\n        o = station;\n        id = 2.;\n    }\n    float road = road(po);\n    if(road < o)\n    {\n        o = road;\n        id = 3.;\n    }\n    o *= .8;\n    return vec2(o,id);\n}\n\nvec2 march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i < 128 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.01)\n        {\n            return vec2(depth,d.y);\n        }\n        depth += d.x;\n        if(depth > 290.){break;}\n    }\n    return vec2(-depth,0.);\n}\n\nfloat BechmannDistribution(float d, float m) {\n    float d2 = d * d;\n    float m2 = m * m;\n    return exp((d2 - 1.0) / (d2 * m2)) / (m2 * d2 * d2);\n}\n \nfloat Fresnel(float c, float f0) {\n    float sf = sqrt(f0);\n    float n = (1.0 + sf) / (1.0 - sf);\n    float g = sqrt(n * n + c * c - 1.0);\n    float ga = (c * (g + c) - 1.0) * (c * (g + c) - 1.0);\n    float gb = (c * (g - c) + 1.0) * (c * (g - c) + 1.0);\n    return (g - c) * (g - c) / (2.0 * (g + c) + (g + c)) * (1.0 + ga / gb);\n}\n\nvec3 CookTorrance(vec3 v,vec3 l , vec3 n,vec3 specular , float microfacet)\n{\n    vec3 h = normalize(l + v);\n \n    float hn = dot(h, n);\n    float ln = dot(l, n);\n    float lh = dot(l, h);\n    float vn = dot(v, n);\n \n    vec3 f = vec3(Fresnel(lh, specular.x), Fresnel(lh, specular.y), Fresnel(lh, specular.z));\n    float d = BechmannDistribution(hn, microfacet);\n    float t = 2.0 * hn / dot(v, h);\n    float g = min(1.0, min(t * vn, t * ln));\n    float m = pi * vn * ln;\n    vec3 spe = max(f * d * g / m, 0.0);\n    return spe;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 col = vec3(0.);\n    vec3 cp = vec3(0.,-16.,-30.);\n    \n   // cp.z += mod(iTime* 100. , 280.);\n    \n    //cp.z += sin(iTime/2.5) * 280.;\n    cp.xz *= rot(pi/2.);\n    //cp.xz *= rot(1.5);\n    //cp.xz *= rot(-iTime/6.);\n    vec3 target = vec3(0.,0.,0.);\n    vec3 cd = normalize(target - cp);\n    vec3 cs = normalize(cross(cd,vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 3.5;\n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    \n    vec2 d = march(cp,rd);\n    if(d.x > 1.)\n    {\n        vec3 pos = cp + rd *d.x;\n        vec2 e   = vec2(0.,0.01);\n        vec3 N   = -normalize(map(pos).x - vec3(map(pos - e.xyy).x,map(pos - e.yxy).x,map(pos - e.yyx).x));\n        col = N;\n        vec3 sun = normalize(vec3(2.,4.,8.));\n    \tvec3 lpos = vec3(-2. * pi,0.,0.);\n        lpos.xz += vec2(sin(iTime * 2.) * 2.,cos(iTime * 2.)/2.) * 4.;\n        sun = normalize(pos - lpos);\n        float lightIntensity = 200./(4. * pi * pow( length(pos - lpos),2. ) );\n        //sun = -rd;\n        //sun.xz *= rot(iTime);\n        float diff = max(0.,dot(sun,N));\n        float shadow = step(march(pos + N * 0.01,sun).x,0.);\n        \n        vec3 blade = mix(vec3(.9),vec3(.1),clamp(pp.y+.9 + sin(sin(pp.z) + pp.z * 3.)/18.,0.,1.));\n        vec3 wood1 = vec3(.8,.8,.8) * mix( (1. - simplex3d((pos / vec3(7., 3.,1.)) * 10.) ),1. ,.2 );\n        vec3 wood2 = vec3(.2,.1,.0) * mix( (1. - simplex3d((pos / vec3(2.,12.,2.)) * 30.) * 3. ),1. ,.9 );\n        vec3 road = vec3(1.,1.,1.);\n        vec3 lightCol = vec3(0.);\n        if(d.y == 0.)\n        {\n            //yaiba\n            diff = mix(diff,1.,.5);\n            col = vec3(.3);\n        \tcol = blade;\n        \tvec3 spe = CookTorrance(rd,sun,N,vec3(.5,.5,.5),.1);\n        \tcol = diff * col + spe * vec3(1.);\n            col *= lightIntensity;\n            lightCol = blade;\n        }else if(d.y == 1.)\n        {\n            //pedestal\n            diff = mix(diff,1.,.4);\n            pos.yz *= rot(pos.x * 1.5);\n            col = wood1;\n            vec3 spe = CookTorrance(rd,sun,N,vec3(1.),.1);\n        \tcol = diff * col + spe * vec3(1.);\n            col *= lightIntensity * 2.;\n            lightCol = wood1;\n        }else if(d.y == 2.)\n        {\n            //station\n            diff = mix(diff,1.,.4);\n            pos.yz *= rot(pos.z * .01);\n            col = wood2;\n            vec3 spe = CookTorrance(rd,sun,N,vec3(1.),.1);\n        \tcol = diff * col + spe * vec3(1.);\n            col *= lightIntensity * 2.;\n            lightCol = wood2;\n        }else if(d.y == 3.)\n        {\n            diff = mix(diff,1.,.4);\n            pos.yz *= rot(pos.z * .01);\n            col = road;\n            vec3 spe = CookTorrance(rd,sun,N,vec3(1.),.01);\n        \tcol = diff * col + spe * vec3(1.);\n            col *= lightIntensity;\n            lightCol = road;\n        }\n        pos.xz *= rot(pi/2.);\n        pos.xy *= rot(pi/2.);\n        \n        {\n            //col =col + lightCol;\n        }\n        float dd =1. - exp(d.x * d.x * d.x * -.000001);\n        col = mix(col,vec3(0.),dd);\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}