{"ver":"0.1","info":{"id":"4XXXR7","date":"1709239338","viewed":94,"name":"mandelbrot z mod","username":"RuralAnemone","description":"mandelbrot shader based on shadertoy.com/view/ttGfDG but it modulates z. designed to be a wallpaper","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","dark","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://github.com/RuralAnemone/shader-wallpapers/blob/main/mandelbrot/z-mod/mandelbrot-z-mod.glsl\n\n// works on shadertoy\n// now I just have to port it over to my phone and edit the offset (:\n\n// based on https://www.shadertoy.com/view/ttGfDG\n\nconst vec3 palette[ 8 ] = vec3[8](\n                                vec3( 0.5, 1.0, 1.0 ),\n                                vec3( 1.0, 0.5, 1.0 ),\n                                vec3( 1.0, 1.0, 0.5 ),\n                                vec3( 0.0, 0.0, 0.0 ),\n                                vec3( 0.5, 0.5, 0.5 ),\n                                vec3( 1.0, 0.5, 0.5 ),\n                                vec3( 0.5, 1.0, 0.5 ),\n                                vec3( 0.5, 0.5, 1.0 ));\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float depth = 16.0;\n    float scale = 1.5;\n    vec2 offset = vec2(0.0,-2.0);\n\n\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    float re0 = scale * 2.0 * (2.0 * (fragCoord.x /iResolution.x) - 1.0) + offset.y;\n    float im0 = scale * 2.0 * (1.0/aspectRatio) * (2.0 * (fragCoord.y /iResolution.y) - 1.0) + offset.x;\n\n    bool diverged = false;\n    float re = re0;\n    float im = im0;\n    \n    im = im * sin(iTime/5.72);\n    re = re * sin(iTime/10.);\n    // a little bit offset so it \"doesn't repeat\"\n    \n    int i;\n    for (i = 0; i < 200; ++i) {\n        if (re*re + im*im > 2000.0) {\n            diverged = true;\n            break;\n        } \n        float retemp = re*re - im*im + re0;\n        im = 2.0*re*im + im0;\n        re = retemp;\n    }\n\n    vec3 col;\n\n    if (diverged) {\n        \n        int nPalette = 8;\n\n        float gradScale = 1.0;\n        float smoothed = log2(log2(re*re+im*im) / 2.0);\n        float fColorIndex = (sqrt(float(i) + 10.0 - smoothed) * gradScale);\n\n        float colorLerp = fract(fColorIndex);\n        colorLerp = colorLerp*colorLerp*(3.0-2.0*colorLerp);\n        int colorIndexA = int(fColorIndex) % nPalette;\n        int colorIndexB = (colorIndexA + 1) % nPalette;\n\n        col = mix(palette[colorIndexA], palette[colorIndexB], colorLerp);\n    } else {\n        col = vec3(0,0,0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}