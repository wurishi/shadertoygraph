{"ver":"0.1","info":{"id":"tsKXzh","date":"1573459763","viewed":117,"name":".triangle","username":"levonchic","description":"Triange with distance cast","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define PI0 6.28318530718\n#define PI2 1.57079632679\n#define PI4 0.78539816339\n\n// SQRT\nfloat circle(vec2 v, vec2 center, float radius) {\n    return distance(v, center) - radius;\n}\n\n// Segment from A to B as line\nfloat segment(vec2 v, vec2 A, vec2 B) {\n    vec2 n  = B - A;\n    vec2 va = A - v;\n    vec2 c  = n * dot(va, n) / dot(n, n);\n    return length(va - c);\n}\n\n// Segment from A to B as segment\nfloat segment_check(vec2 v, vec2 A, vec2 B, float far) {\n    vec2 b = B - A;\n    vec2 a = v - A;\n    float frac = dot(a, b) / dot(b, b);\n    if (frac < 0.0 || frac > 1.0)\n        return far;\n    \n    vec2 n  = B - A;\n    vec2 va = A - v;\n    vec2 c  = n * dot(va, n) / dot(n, n);\n    return length(va - c);\n}\n\n// Distance to color function\nvec4 color(float dist) {\n\tvec4 c;\n\tc.a = 1.0;\n\t// c.r = 0.3 * sin(dist * 2.0 * PI * 40.0 + iTime * 2.0 * PI * 2.0);\n\t// c.g = 0.7 * sin(dist * 2.0 * PI * 80.0 + iTime * 2.0 * PI * 2.0);\n\t// c.b = 0.3 * sin(dist * 2.0 * PI * 120.0 + iTime * 2.0 * PI * 2.0);\n\t\n    // c.r = c.g = c.b = sin(dist * PI * 40.0 + mod(iTime, 1.0) * PI * 8.0);\n    //if (dist < 0.0120 * PI)\n\t//c.r = c.g = c.b = sin(dist * PI * 40.0 + PI2);\n    \n    // Neon\n\tc.r = c.g = c.b = 1. / pow(2.0 + 0.5 * sin(iTime * 2.0), dist * 100.);\n    c.g *= 1.0;\n    c.r *= 0.3;\n    c.b *= 0.7;\n\t\n    return c;\n}\n\nfloat triangle(vec2 uv, vec2 A, vec2 B, vec2 C, float far) {\n    float mn = far;\n    mn = min(mn, segment_check(uv, A, B, 10.0));\n    mn = min(mn, segment_check(uv, B, C, 10.0));\n    mn = min(mn, segment_check(uv, C, A, 10.0));\n    mn = min(mn, circle(uv, A, 0.0));\n    mn = min(mn, circle(uv, B, 0.0));\n    mn = min(mn, circle(uv, C, 0.0));\n    return mn;\n}\n\n// DISPLAY\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / max(iResolution.x, iResolution.y);\n    \n    vec2 A = 0.1 * vec2(cos(1.0 * PI / 3.0 + iTime), sin(1.0 * PI / 3.0 + iTime));\n    vec2 B = 0.1 * vec2(cos(3.0 * PI / 3.0 + iTime), sin(3.0 * PI / 3.0 + iTime));\n    vec2 C = 0.1 * vec2(cos(5.0 * PI / 3.0 + iTime), sin(5.0 * PI / 3.0 + iTime));\n    \n    float mn = 10.0; // abs(circle(uv, vec2(0.0), 0.2));\n    \n    mn = min(mn, triangle(uv, A, B, C, 10.0));\n    \n    fragColor = color(mn);\n}","name":"Image","description":"","type":"image"}]}