{"ver":"0.1","info":{"id":"3dXSRM","date":"1550785055","viewed":313,"name":"Radial Fire","username":"PieterVerhoeven","description":"Fire fountain","likes":12,"published":1,"flags":32,"usePreview":1,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TIMESCALE = 25.0;\nconst float TIMEOFFSET = 0.0;\n\nconst float PI = 3.141592653589;\nconst float TAU = 2.0*PI;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 iUV = fragCoord.xy/iResolution.yy;\n    vec2 toCenter = vec2(0.85, 0.5) - iUV;\n    vec2 uv = vec2(\n        (atan(toCenter.y, toCenter.x)+PI)/TAU,\n        length(toCenter)\n    );\n\n    vec2 uvScroll = vec2(\n        mod(iTime*TIMESCALE + TIMEOFFSET, iResolution.x)/iResolution.x,\n        mod(iTime*TIMESCALE + TIMEOFFSET, iResolution.y)/iResolution.y\n    );\n    \n    vec2 uvScroll1 = vec2(\n        uv.x,\n        pow(uv.y, 1.75) - uvScroll.y * 3.0\n    );\n    \n\tvec2 uvScroll2 = vec2(\n        1.0 - uv.x,\n        pow(uv.y, 1.35) - uvScroll.y * 2.0\n    );\n    \n    vec4 texelSize = vec4( 1.0 / iChannelResolution[0].xy,  iChannelResolution[0].xy);\n    \n    float val1 = texture_bicubic(iChannel0, uvScroll1, texelSize).r;\n    float val2 = texture_bicubic(iChannel0, uvScroll2, texelSize).r;\n    float valDiff = 0.5 + val1*0.5 - val2*0.5;\n    float gradient = 1.0 - uv.y;\n    \n    // Darken outer\n    float fireGrad1 = valDiff*valDiff*gradient;\n    // Brighten inner\n    float fireGrad2 = 1.0 - (1.0 - fireGrad1)*(1.0 - gradient*gradient);\n    // Ramp shader\n    fragColor = texture(iChannel1, vec2(fireGrad2, 0.5));\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float hGrad = fragCoord.x/iResolution.x;\n    float hGrad2 = hGrad*hGrad;\n    \n    vec4 color = vec4(\n        min(hGrad2*2.0, 1.0),\n        (hGrad2*0.9),\n        (hGrad2*0.5),\n        1.0\n    );\n    \n    vec4 mask = vec4(smoothstep(0.1, 0.9, hGrad));\n    \n    fragColor = color * mask;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// from: https://www.shadertoy.com/view/4df3Dn\n\n// 4x4 bicubic filter using 4 bilinear texture lookups \n// See GPU Gems 2: \"Fast Third-Order Texture Filtering\", Sigg & Hadwiger:\n// http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter20.html\n\n// w0, w1, w2, and w3 are the four cubic B-spline basis functions\nfloat w0(float a)\n{\n    return (1.0/6.0)*(a*(a*(-a + 3.0) - 3.0) + 1.0);\n}\n\nfloat w1(float a)\n{\n    return (1.0/6.0)*(a*a*(3.0*a - 6.0) + 4.0);\n}\n\nfloat w2(float a)\n{\n    return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0);\n}\n\nfloat w3(float a)\n{\n    return (1.0/6.0)*(a*a*a);\n}\n\n// g0 and g1 are the two amplitude functions\nfloat g0(float a)\n{\n    return w0(a) + w1(a);\n}\n\nfloat g1(float a)\n{\n    return w2(a) + w3(a);\n}\n\n// h0 and h1 are the two offset functions\nfloat h0(float a)\n{\n    return -1.0 + w1(a) / (w0(a) + w1(a));\n}\n\nfloat h1(float a)\n{\n    return 1.0 + w3(a) / (w2(a) + w3(a));\n}\n\nvec4 texture_bicubic(sampler2D tex, vec2 uv, vec4 texelSize)\n{\n\tuv = uv*texelSize.zw + 0.5;\n\tvec2 iuv = floor( uv );\n\tvec2 fuv = fract( uv );\n\n    float g0x = g0(fuv.x);\n    float g1x = g1(fuv.x);\n    float h0x = h0(fuv.x);\n    float h1x = h1(fuv.x);\n    float h0y = h0(fuv.y);\n    float h1y = h1(fuv.y);\n\n\tvec2 p0 = (vec2(iuv.x + h0x, iuv.y + h0y) - 0.5) * texelSize.xy;\n\tvec2 p1 = (vec2(iuv.x + h1x, iuv.y + h0y) - 0.5) * texelSize.xy;\n\tvec2 p2 = (vec2(iuv.x + h0x, iuv.y + h1y) - 0.5) * texelSize.xy;\n\tvec2 p3 = (vec2(iuv.x + h1x, iuv.y + h1y) - 0.5) * texelSize.xy;\n\t\n    return g0(fuv.y) * (g0x * texture(tex, p0)  +\n                        g1x * texture(tex, p1)) +\n           g1(fuv.y) * (g0x * texture(tex, p2)  +\n                        g1x * texture(tex, p3));\n}","name":"Common","description":"","type":"common"}]}