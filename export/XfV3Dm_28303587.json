{"ver":"0.1","info":{"id":"XfV3Dm","date":"1712856133","viewed":25,"name":"Zwart gat informatica V6","username":"Ruftuk","description":"Black hole","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["zwartgat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot( float angle ) {\n \n    float s = sin(angle);\n \n    float c = cos(angle);\n\n    return mat2(c, -s, s, c);\n \n}\n \nfloat sdTorus( vec3 p, vec2 t ) {\n \n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n\n  return length(q)-t.y;\n \n}\n \nfloat map ( vec3 p ) {\n \n    vec3 gatPos = vec3 (0,0,0);\n \n    float r = length(gatPos - p);\n \n    float d = max(max(sdTorus(vec3(0,0,0)-p, vec2(8., 2.4)), p.y - 0.1), -p.y);\n \n    return d;\n \n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n \n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y * 2.;\n \n    vec3 ro = vec3( 0, 0, -50 );\n \n    vec3 rd = normalize(vec3(uv * .2, 1.0));\n \n    vec3 col = vec3(0,0,0);\n\n    float t = 0.;\n\n    ro.yz *= rot(-m.y);\n \n    rd.yz *= rot(-m.y);\n\n    for (int i = 0; i <4000; i++) {\n \n        vec3 p = ro + rd * t;\n \n        float d = map(p);\n \n        float r = length(vec3(0,0,0) - p);\n\n \n        rd += -normalize(p) * (0.005 / r) * d * ( 4.35 );\n\n        t += d * .5;\n\n        if ( d<0.00001 ) {\n \n            col = vec3(1,0.975,0.9);\n \n            break;\n \n        }\n \n        if ( t>10000. ) {\n \n            col = vec3(0,0,0);\n \n            break;\n \n        }\n\n        col = vec3(0,0,0);\n \n    }\n\n    fragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}