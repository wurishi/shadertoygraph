{"ver":"0.1","info":{"id":"M32yDw","date":"1727341624","viewed":47,"name":"EyeOfHajiSauron AudioVisualizer","username":"ArthurTent","description":"one beat to rule them all","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lotr"],"hasliked":0,"parentid":"X3jcWR","parentname":"Eye of Haji Sauron"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// one beat to rule them all\n\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\n\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\n\n// colormap\nvec3 palette(float t) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.);\n    vec3 d = vec3(0.563,0.416,0.457 + .2*sin(0.4*iTime));\n    \n    return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\n// used to rotate domain of noise function\nconst mat2 rot = mat2( 0.80,  0.60, -0.60,  0.80 );\n\n// fast implementation of fBM\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p + 0.1 * sin(iTime ) + 0.2 * iTime); p = rot*p*2.02;\n    f += 0.031250*noise( p  ); p = rot*p*2.01;\n    f += 0.250000*noise( p ); p = rot*p*2.03;\n    f += 0.125000*noise( p + 0.1 * sin(iTime) + 0.2 * iTime ); p = rot*p*2.01;\n    f += 0.062500*noise( p + 0.3 * sin(iTime) ); p = rot*p*2.04;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\nfloat fbm2( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p ); p = rot*p*2.02;\n    f += 0.031250*noise( p ); p = rot*p*2.01;\n    f += 0.250000*noise( p ); p = rot*p*2.03;\n    f += 0.125000*noise( p ); p = rot*p*2.01;\n    f += 0.062500*noise( p ); p = rot*p*2.04;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\nfloat fbm3(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f*(.8+snd*5.);\n}\n\n\n// nested fBM\nfloat pattern( vec2 p ) {\n    return fbm( p + fbm( p + fbm(p) ) )*snd*10.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    snd = (FFT(1)+FFT(25)+FFT(50)+FFT(75))/4.;\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    float scale = 2.;\n    uv = (uv-0.5)*scale+1.;\n    \n    vec2 uv2 = uv;\n    uv2.x *= 2.0;\n    float d1 = length(uv2-vec2(-0.5,0.));\n    float d2 = length(uv2-vec2(0.5,0.));\n    \n    float dc = length(uv);\n   \n    \n    float r = sqrt(dot(uv,uv));\n    float a = atan(uv.y,uv.x);\n    \n    vec3 around_eye = smoothstep(0.1,-0.1,abs(max(d1,d2)-0.5) - 0.2)*(.8+5.*snd) * vec3(0.99, 0.81, 0.27);\n    vec3 strs = normalize(vec3(uv2,-1.5));\n    vec3 col = vec3(0.);\n    vec3 rd = normalize(vec3(uv2,-1.5));\n    vec3 p1 = mix(vec3(1.,.25,0.1),vec3(0.2,0.2,0.3), fbm(3.*uv));\n    \n    \n    float sa = abs(fract(a/6.)-0.5);\n    float n = fbm2(2. * vec2(r - 0.5*iTime, sa));\n    float n2 = fbm3(7. * vec2(r - 0.7*iTime, a));\n    \n    float flame = (0.5*n + 0.8*n2) * (1. - 1.5*r);\n    vec3 p2 = vec3(1.5*flame, 2.*pow(flame,3.), pow(flame,6.) );\n    \n    vec3 p3 = mix(around_eye, p2, max(d1,d2));\n    //p3 *= mix(p3,vec3(0.75),r);\n    \n    \n    //if(dc > 0.45) {\n    //    col = mix(p1,p3,r);\n    //}\n    //else{\n    //    \n    //}\n    \n    col = p3;\n    col *= smoothstep(0.6,0.65,max(d1,d2));\n    \n    col += smoothstep(0.03,-0.1,abs(max(d1,d2)-0.6) - 0.05) * vec3(0.99, 0.81, 0.27);\n    \n    \n    \n    col += smoothstep(0.01,-0.1,abs(dc-0.45) - 0.05)*(.8+5.*snd)  * vec3(0.99, 0.81, 0.27);\n    \n    //where does all the blue color come from :-/\n    col.b=0.;\n    \n    //if(max(d1,d2) < 0.6) {\n    //   col = vec3(0.);\n    //}\n    rd.x+=sin(iTime/1000.)*2.;\n    vec3 bg = stars(rd)*(1.+3.*snd);\n    bg.b=0.;\n    col = mix(bg, col, step(0.01, length(col))); \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}