{"ver":"0.1","info":{"id":"4tlfzN","date":"1511200189","viewed":523,"name":"Arnold's cat map","username":"Kchplr","description":"See https://twitter.com/inversed_ru/status/932630822494130176","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["arnoldcatmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// see Buf A for relevant code\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 reso = iResolution.yy; // need square size\n    \n    if (iFrame < 32) {\n        // initial frames display the original texture\n    \tvec2 uv = fragCoord.xy / reso;\n    \tfragColor = texture(iChannel1, uv);\n    } else if (mod(float(iFrame), 16.) > 0.) {\n        // repeat the same frame 15 times (for humans)\n    \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \tfragColor = texture(iChannel0, uv);\n    } else {\n        // apply Arnold's cat map (see https://twitter.com/inversed_ru/status/932630822494130176 )\n    \tvec2 uv = mod(vec2(fragCoord.x * 2. + fragCoord.y, fragCoord.x + fragCoord.y), reso); \n    \tfragColor = texelFetch(iChannel0, ivec2(uv), 0);\n        // texelFetch is used to get the exact pixel without any risk of bilinear interpolation\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}