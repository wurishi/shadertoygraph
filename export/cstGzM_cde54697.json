{"ver":"0.1","info":{"id":"cstGzM","date":"1677083026","viewed":59,"name":"Phases of the Moon","username":"shake_n_jake","description":"moon phases\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI    3.14159265\n#define M_2PI   6.28318530\n#define M_PI_2  1.57079632\n#define M_3PI_2 4.71238898\n\nfloat ellipse(vec2 uv, vec2 pos, vec2 r)\n{\n    float d = length((pos-uv) / r);\n    float t = clamp((1. - d) / fwidth(d), 0.0, 1.0);\n    return t;\n}\n\nfloat sample_shdw(vec2 uv) \n{\n    float time = iTime * 1.;\n    \n    vec2 phase = vec2(-cos(time), sin(time));\n\n    float x = atan(-phase.y, phase.x);\n    phase.x = (x >= 0.0 && x <= M_3PI_2) ? -phase.x : phase.x;\n\n    vec2 p = vec2(0.0);\n    vec2 r = vec2(abs(phase.x), 1.0);\n   \n    float moon = ellipse(uv, p, vec2(1.0));\n    float shadow;\n\n    if (phase.x > 0.0) {\n        shadow = (uv.x > 0.0) ? 1.0 : ellipse(uv, p, r);\n        shadow = (phase.y <= 0.0) ? shadow : 1.0 - shadow;\n        \n    } else {\n        shadow = (uv.x < 0.0) ? 1.0 : ellipse(uv, p, r);\n        shadow = (phase.y > 0.0) ? shadow : 1.0 - shadow;\n    }\n    return 1.0 - (moon * shadow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 16.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Pixel colour\n    vec4 Color = vec4(0.0);\n    \n    // Blur calculations\n    for( float d=0.0; d<M_2PI; d+=M_2PI/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += sample_shdw(uv+vec2(cos(d),sin(d))*Radius*i);\t\t\n        }\n    }\n    \n    vec4 moon = vec4(vec3(0.5) * ellipse(uv, vec2(0.0), vec2(.98)), 1.0);\n    \n    // Output to screen\n    Color /= Quality * Directions - 15.0;\n    \n    fragColor =  mix(moon, Color, moon);\n   \n}","name":"Image","description":"","type":"image"}]}