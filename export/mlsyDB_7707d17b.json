{"ver":"0.1","info":{"id":"mlsyDB","date":"1691160204","viewed":45,"name":"Log 10 scale (grid)","username":"Envy24","description":"Iterative solution to plot log 10 scale.\nHold LMB to change scale direction.\n\nBetter solution:\nhttps://www.shadertoy.com/view/4stSR8","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cells","scale","logarithmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ORIGIN                    ( vec2(0,0) )\n#define SCENE_SCALE               ( 2.2 )\n#define UNIT                      ( 4.0*SCENE_SCALE / iResolution.y )          // Affects AA and thickness\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale - origin;\n}\n\nfloat y_axisSDF(vec2 NDC) { return abs(NDC.x); }\nfloat x_axisSDF(vec2 NDC) { return abs(NDC.y); }\nfloat vertical_lineSDF(vec2 NDC, float x0) { return abs(NDC.x-x0); }\nfloat horizontal_lineSDF(vec2 NDC, float y0) { return abs(NDC.y-y0); }\nfloat cellsSDF(vec2 NDC)\n{\n    //NDC *= 2.; // Finer cells\n    NDC = fract(NDC);\n    NDC = fract(min(NDC, 1. - NDC));\n    return\n        min(vertical_lineSDF(NDC, 0.), horizontal_lineSDF(NDC, 0.));\n}\nfloat ascLog10ScaleSDF(vec2 NDC)\n{   \n    const float base = 10.;\n    \n    float y_in_linear_scale = 0.,\n          cur_power_of_base = 1.,\n          min_d = 9e5;\n          \n    // Iterate over powers of base\n    for (int p = 0; p < 5; ++p)\n    {\n        // For each power check 9 scale lines.\n        for (int e = 0; e < 9; ++e)\n        {\n            // Convert from linear to log10.\n            float y_in_log10_scale = log(y_in_linear_scale) / log(base);\n            \n            // Get minimal distance.\n            if (iMouse.z < 0.)\n                min_d = min(min_d, horizontal_lineSDF(NDC, y_in_log10_scale));\n            else\n                min_d = min(min_d, vertical_lineSDF(NDC, y_in_log10_scale));\n\n            // Next line level.\n            y_in_linear_scale += cur_power_of_base;\n        }\n        // Next power of base.\n        cur_power_of_base *= base;\n    }\n\n    return min_d;\n}\nfloat desLog10ScaleSDF(vec2 NDC)\n{   \n    const float base = 10.;\n    const float inv_base = 1./base;\n    \n    float y_in_linear_scale = 1.,\n          cur_power_of_base = 1./base,\n          min_d = 9e5;\n          \n    // Iterate over powers of base\n    for (int p = 0; p < 5; ++p)\n    {\n        // For each power check 9 scale lines.\n        for (int e = 0; e < 9; ++e)\n        {\n            // Convert from linear to log10.\n            float y_in_log10_scale = log(y_in_linear_scale) / log(base);\n            \n            // Get minimal distance.\n            if (iMouse.z < 0.)\n                min_d = min(min_d, horizontal_lineSDF(NDC, y_in_log10_scale));\n            else\n                min_d = min(min_d, vertical_lineSDF(NDC, y_in_log10_scale));\n\n            // Prev line level.\n            y_in_linear_scale -= cur_power_of_base;\n        }\n        // Prev power of base.\n        cur_power_of_base *= inv_base;\n    }\n\n    return min_d;\n}\nfloat log10ScaleSDF(vec2 NDC)\n{\n    return min(ascLog10ScaleSDF(NDC), desLog10ScaleSDF(NDC));\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, ORIGIN, false);\n\n    float log_base = 2.;\n    vec3 color = vec3(1);\n        \n         color = mix( color, vec3(0.9), SMAA(log10ScaleSDF(NDC)));\n         //color = mix( color, vec3(0.8), SMAA(ascLog10ScaleSDF(NDC)));\n         //color = mix( color, vec3(0.8), SMAA(desLog10ScaleSDF(NDC)));\n         color = mix( color, vec3(0.7), SMAA(cellsSDF(NDC)) );\n         color = mix( color, vec3(0), SMAA(x_axisSDF(NDC)) );\n         color = mix( color, vec3(0), SMAA(y_axisSDF(NDC)) );               \n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}