{"ver":"0.1","info":{"id":"McGGDW","date":"1713198642","viewed":53,"name":"Idk (ray marched)","username":"Artificialvoid1","description":"Test\nGoofy ahh shadows","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ASPECT vec2(16, 9)\n#define LightPos vec3(iTime, 3, iTime)\n#define brightness 1.0\n#define cubesize vec3(1, 1.75, 1)\n\nfloat sdCube(vec3 p, vec3 dim) {\n  vec3 d = abs(p) - dim;\n  return min(max(d.x,\n      max(d.y, d.z)), 0.0)\n      + length(max(d, 0.0));\n}\nfloat sdPlane( vec3 p ){\n    return p.y;\n}\n\nfloat fScene(vec3 pt) {\n    vec3 pos;\n    pos = vec3(mod(pt.x + 2.0, 4.0) - 2.0, pt.y, mod(pt.z + 2.0, 4.0) - 2.0);\n    float cubes = sdCube(pos, cubesize);\n    float plane = sdPlane(pos);\n    if (cubes <= plane) {\n        return cubes;\n    } else {\n        return plane;\n    }\n}\n \n\nfloat find_sdf(vec3 pos) {\n    return fScene(pos);\n}\n\nvec3 normalcube( vec3 pos ) {\n    return normalize(pos*vec3(2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col;\n    \n    float divx = ASPECT.x/iResolution.x;\n    float divy = ASPECT.y/iResolution.y;\n\n    float Xoffset = -0.5 * ASPECT.x;\n    float Yoffset = -0.5 * ASPECT.y;\n        \n    //gather all data to cast a ray\n    vec3 origin = vec3(iTime, 3, iTime);\n    float faceX = divx * fragCoord.x + iTime;\n    float faceY = divy * fragCoord.y;\n    vec3 target = vec3(faceX + Xoffset, faceY + Yoffset, iTime + 10.0);\n    vec3 rayDir = normalize(target - origin);\n    \n    //cast ray\n    float sdf = find_sdf(origin);\n    int step_pos = 0;\n    vec3 current_pos = origin;\n    \n    while (abs(sdf) > 0.00001 && step_pos <= 50) {\n        current_pos += rayDir * vec3(sdf);\n        sdf = find_sdf(current_pos);\n        step_pos++;\n    }\n    \n    if (sdf <= 0.01) {\n        vec3 pos = vec3(mod(current_pos.x + 2.0, 4.0) - 2.0, current_pos.y, mod(current_pos.z + 2.0, 4.0) - 2.0);\n        col = texture(iChannel0, pos.xy/50.0);\n    } else {\n    \n        float dz = distance(vec3(0,0,current_pos.z), vec3(0,0,0));\n        \n        current_pos /= vec3(1,1,dz);\n        \n        col = texture(iChannel1, current_pos.xy);\n    }\n    \n    vec3 newtarget = LightPos;\n    vec3 newRaydir = normalize(LightPos - current_pos);\n    \n    float sdf2 = find_sdf(current_pos);\n    int step_pos2 = 0;\n    vec3 next_pos = current_pos;\n    \n    while (abs(sdf2) > 0.0001 && step_pos <= 50) {\n        next_pos += newRaydir * vec3(sdf2);\n        sdf2 = find_sdf(next_pos);\n        step_pos2++;\n    }\n    \n    if (sdf <= 0.00001) {\n        col = vec4(0.5) * col;\n    }\n    \n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}