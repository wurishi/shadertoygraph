{"ver":"0.1","info":{"id":"MdcyzN","date":"1518043411","viewed":162,"name":"Spindle of Death CIS 566","username":"lsx","description":"Spindle of Death CIS 566\nBased on gif https://media.giphy.com/media/26DN7fdyFRqfBjqMw/giphy.gif","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Assignment 3 CIS 566\n//Adapted from https://www.shadertoy.com/view/Xll3DM\n//Adjust the NUM to change the number of wireframes and white dots\n//Adjust the LAG to change the lag of the white dots' rotations\n#define NUM 16\n#define LAG 0.39\n\n#define MAX_STEPS 96\n#define MIN_DIST 0.001\n#define NORMAL_SMOOTHNESS 0.02\n#define PI 3.14159265359\n\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nvec2 Union(vec2 d1, vec2 d2)\n{\n    return (d1.x<d2.x) ? d1 : d2;;\n}\n\nfloat Sphere(float radius, vec3 position)\n{\n    return length(position) - radius;\n}\n\nfloat Box(float radius, vec3 position)\n{\n    return max(max(abs(position.x), abs(position.y)), abs(position.z)) - radius;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n//http://mercury.sexy/hg_sdf/\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\nvec3 rep(vec3 p, vec3 c)\n{\n    return mod(p, c) - 0.5 * c;\n}\nvec2 Scene(vec3 position)\n{\n    float num = float(NUM);\n    float time = -iTime * 3.0;\n    \n    float map = -Sphere(24.0, position);\n    \n    vec2 final = vec2(map, 0.0);\n    \n    float size = 6.0;\n    vec3 newpos = position;\n    pModPolar(newpos.xy, num);\n    final = Union(final, vec2(sdTorus(newpos, vec2(6.0, 0.05)), 1.0));\n    \n    for(float i = 0.0; i<num / 2.0; i += 1.0)\n    {\n        newpos = position + vec3(cos(i * 2.0/num*PI) * sin(time + LAG * i) * size, \n                                 sin(i * 2.0/num*PI) * sin(time + LAG * i) * size, \n                                 cos(time + LAG * i) * size);\n    \tfinal = Union(final, vec2(Sphere(0.3, newpos), 2.0));\n    }\n    return final;\n}\n\nvec4 RayMarch(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    vec2 temp = vec2(0.0);\n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        temp = Scene(origin + direction * hitDist);\n        float sceneDist = temp.x;\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return vec4(origin + direction * hitDist, temp.y);\n}\n\nvec3 Shade2(vec4 position)\n{\n    vec3 black = vec3(57, 57, 57)/255.0;\n    vec3 color = vec3(0.0);\n    \n    if(position.w==0.0)\n    {\n        color = vec3(57, 57, 57)/255.0;\n    }\n    else if(position.w==1.0)\n    {\n        color = vec3(0.0, 0.0, 0.0);\n    }\n    else if(position.w==2.0)\n    {\n        color = vec3(236, 236, 236)/255.0;\n    }\n    \n    //Background\n    color = mix(color, black, step(22.0, length(vec3(position))));\n    \n    return color;\n}\n\nfloat transform(float a, float b, float change)\n{\n    return a + (b - a) * change;\n}\n\nfloat f1(float x)\n{\n    return min(fract(x /4.0) * 4.0, 1.0);\n}\n\nfloat f2(float x)\n{\n    return -sign((fract(x/8.0)*2.0 - 1.0));\n}\n\nfloat f3(float x)\n{\n    return smoothstep(0.0, 1.0, f1(x) * f2(x)  -(f2(x) * 0.5 - 0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float iTime2 = iTime * 0.8;\n    \n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float size = 15.0;\n    vec3 rayOrigin = vec3((uv.x) * size , (uv.y) * size, -20.0);\n    vec3 rayDirection = normalize(vec3(0.0, 0.0, 1.0));\n    \n    float change = f3(mod(iTime2, 8.0));\n    float angle = transform(0.0,  1.0 / 2.0 * PI, change);\n    \n    mat2 rotateX = Rotate(angle);\n    mat2 rotateY = Rotate(0.0);\n    mat2 rotateZ = Rotate(iTime);\n    \n    mat3 rotation = rotationMatrix(vec3(0.0, 0.0, 1.0),1.0 / 2.0 * PI);\n    \n    rayOrigin.yz *= rotateX;\n    rayOrigin.xz *= rotateY;\n    rayOrigin *= rotation;\n    rayDirection.yz *= rotateX;\n    rayDirection.xz *= rotateY;\n    rayDirection *= rotation;\n\n    vec4 scenePosition = RayMarch(rayOrigin, rayDirection);\n   \n    //vec3 white = vec3(250, 250, 250)/255.0;\n    vec3 outColor = Shade2(scenePosition);\n\tfragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}