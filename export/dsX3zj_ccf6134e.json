{"ver":"0.1","info":{"id":"dsX3zj","date":"1671507992","viewed":119,"name":"Glitch_NoiseRgbSplit","username":"Yon","description":"glitch with two sample for rgb split","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","gltch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x,0.,1.)\n\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec4 pcg4d(uvec4 v) {\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * v.w;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    v.w += v.y * v.z;\n\n    v ^= v >> 16u;\n\n    v.x += v.y * v.w;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    v.w += v.y * v.z;\n\n    return v;\n}\n\nuvec4 hash(vec2 s)\n{\t\n\n    uvec4 u = uvec4(s, uint(s.x) ^ uint(s.y), uint(s.x)+uint(s.y)); // Play with different values for 3rd and 4th params. Some hashes are okay with constants, most aren't.\n    \n\n    return pcg4d(u.xyzw);\n\n}\n\n//Vertex Caculate OK\nfloat Glitch_JatterTotal(vec2 uv, float time, float speed, float Amplitude, float Amount) {\n    vec4 time4 = vec4(6., 16., 19., 27.) * time * speed;\n    vec4 splitAmout4 = (1.0 + sin(time4)) * 0.5;\n    float splitAmout = splitAmout4.x * splitAmout4.y;\n    splitAmout = pow(splitAmout, Amplitude);\n    splitAmout *= (0.05 * Amount);\n\n\n\n    return splitAmout;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\nuv = uv/16.0+vec2(3.0,8.0)/16.0;\n\n\nconst float _Amplitude = 0.2;     //RGBSplit\nconst float _Amount = 0.1;\n\n    float jatterTotalAmount =Glitch_JatterTotal(uv, iTime*0.5, 1., _Amplitude, _Amount);\n\n    uvec4 hash = hash(fragCoord);\n    vec4 pixelNoise = vec4(hash) * (1.0/float(0xffffffffu));\n\n\n\nfloat p = (pixelNoise.x*3.0-2.0);\nfloat j = jatterTotalAmount;\nfloat pJ = p*j;\n    vec2 uvR = uv + vec2(pJ,0.0f);\nfloat k =10000.0;\n\nvec3 color1 = mix(vec3(1.0,1.0f,1.0f),vec3(1.0,0.0,0.0),saturate(saturate(p)*k*j));\nvec3 color2 = mix(color1,vec3(0.0,1.0,0.0),saturate(saturate(-p)*k*j));\nvec3 color3 = mix(color2,vec3(0.0,0.0,1.0),saturate(saturate(-p-1.0)*k*j));\n\n    vec4 Color = texture(iChannel0, uvR);\n    float mask = step(Color.a,0.5);\n    vec4 ColorRGB = mask*vec4(color3,1.0f)*2.0;\n\n    fragColor = ColorRGB;\n}","name":"Image","description":"","type":"image"}]}