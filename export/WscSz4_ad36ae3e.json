{"ver":"0.1","info":{"id":"WscSz4","date":"1571514928","viewed":183,"name":"Island sunset","username":"lirfu","description":"A sunset from an island.\n\nBuilt upon shader from tutorial:\nhttps://www.youtube.com/watch?v=0ifChJ0nJfM\nhttps://www.shadertoy.com/view/XssSRX","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sea","sun","island"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Built upon shader from tutorial (a good place to start):\n// https://www.youtube.com/watch?v=0ifChJ0nJfM\n// https://www.shadertoy.com/view/XssSRX\n\nvec2 to_ss(vec2 p)\n{\n    return p * vec2(iResolution.x / iResolution.y, 1.0);\n}\n\nfloat paraboloid(vec2 x, vec2 x0, vec2 scale)\n{\n    return pow((x.x - x0.x) / scale.x, 2.0)  + pow((x.y - x0.y) / scale.y, 2.0);\n}\n\nvec3 lerp(float t, vec3 c1, vec3 c2)\n{\n    return (1.0-t) * c1 + t * c2;\n}\n\nvec3 palm_leaves(vec3 col, vec2 p)\n{\n    float r = 0.2 + 0.12 * cos( atan(p.y, p.x) * 10.0 + 20.0 * p.x * (1.0+0.07*sin(iTime * 2.0)) + 1.0 );   \n    vec3 c = lerp(r, vec3(0.1, 0.3, 0.0), vec3( 0.1, 0.1, 0.0 ));\n    \n    float t = smoothstep( r, r + 0.01, length(p) );\n    return c + (col - c) * t;\n}\n\nvec3 palm_trunk(vec3 col, vec2 p)\n{\n    float k = sin( 120.0 * p.y );\n    float r = 0.015 + 0.002 * k - p.y * 0.03;\n    vec3 c = lerp(k, vec3(0.08, 0.06, 0.0), vec3(0.17, 0.08, 0.0));\n    \n    float t = 1.0 - ( 1.0 - smoothstep( r, r + 0.002, abs( p.x - 0.26 * sin( 2.0 * sin( p.y ))))) * smoothstep( 0.0, 0.05, 0.02-p.y);\n    return c + (col - c) * t;\n}\n\nvec3 front_dune(vec3 col, vec2 p)\n{\n    float t = smoothstep(0.01, 0.0105, paraboloid(to_ss(p), vec2(0.0, 0.0), vec2(20., 1.8)));\n    vec3 c = vec3(0.8, 0.6, 0.0);\n    \n    return c + (col - c) * t;\n}\n\nvec3 sun(vec3 col, vec2 p)\n{\n    float r = 0.2;\n    vec2 pos = vec2(0.74, 0.3);\n    \n    float t = sin(3.0 * p.y - 0.8);\n    vec3 c = lerp(t, vec3(0.97, 0.3, 0.0), vec3(1.0, 1.0, 0.0));\n    \n    pos = to_ss(pos - p);\n    return c + (col - c) * smoothstep( 0.01, 0.011, (pow(pos.x, 2.0) * 0.9 + pow(pos.y, 2.0)) - pow(r, 2.0));\n}\n\nvec3 sea(vec3 col, vec2 p)\n{\n    float t = iTime;\n    float k = min(1.0, 1.0 + 0.4 * sin(8000.0 * pow(p.y, 4.) + t) * sin(100.0 * p.y * p.x + t));\n    \n    vec3 c = lerp(k, vec3(0.1, 0.1, 0.8), vec3(0.4, 0.3, 0.8));\n    \n    return col = c + (col-c) * smoothstep(0.01, 0.015, p.y-0.25);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord / iResolution.xy;\n    \n    float t = paraboloid(p, vec2(0.74, 0.3), vec2(1.4, 1.0));\n    vec3 col = lerp(t, vec3(0.95, 0.55, 0.2), vec3(0.1, 0.05, 0.2));\n    \n    col = sun(col, p);\n    col = sea(col, p);\n    \n    vec2 palm_pos = p - vec2(0.34, 0.7);\n    col = palm_leaves(col, palm_pos);\n    col = palm_trunk (col, palm_pos);\n    \n    col = front_dune(col, p);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}