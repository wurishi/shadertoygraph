{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"/// #version 110\n/// uniform float iTime;\n/// uniform vec2 iResolution;\n/// uniform sampler2D textures[16];\n/// uniform vec3 iCam;\n/// uniform float iCamRZ;\n/// uniform float iCamRX;\n/// uniform vec3 editVec3;\n/// uniform sampler2D iChannel0;\n/// uniform sampler2D iChannel1;\n/// uniform sampler2D iChannel2;\n/// uniform sampler2D iChannel3;\n/// uniform sampler2D iChannel4;\n/// uniform sampler2D iChannel5;\n/// uniform sampler2D iChannel6;\n/// uniform sampler2D iChannel7;\n/// uniform sampler2D iChannel8;\n/// uniform sampler2D iChannel9;\n/// uniform sampler2D iChannel10;\n/// uniform sampler2D iChannel11;\n/// uniform sampler2D iChannel12;\n/// uniform sampler2D iChannel13;\n/// uniform sampler2D iChannel14;\n/// uniform sampler2D iChannel15;\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col)\n{\n  float d = length(p - offset) - r;\n  return Surface(d, col);\n}\n\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.5;\n  return Surface(d, col);\n}\n\nSurface sdBox(vec3 p, vec3 b, vec3 col) {\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2; // The sd component of the struct holds the \"signed distance\" value\n  return obj1;\n}\n\nSurface sdScene(vec3 p) {\n  Surface sphereLeft = sdSphere(p, 1.5, vec3(-3, 0, 2), vec3(0, .8, .8));\n  //sphereLeft.sd += 99999.;\n  Surface box = sdBox(p-vec3(3, 0, 2),vec3(1.25,0.75,1),vec3(1, 0.58, 0.29));\n  //box.sd += 99999.;\n  Surface co = minWithColor(sphereLeft, box);\n\n  vec3 floorColor = vec3(1. + .7*mod(floor(p.x) + floor(p.z), 2.0));\n  //floorColor = vec3(0.1,1,0.1);\n  co = minWithColor(co, sdFloor(p, floorColor));\n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n\n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle){\n\treturn mix(dot(axis,p)*axis, p, cos(angle)) + cross(axis,p)*sin(angle);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0., 6., -11.); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, 1.));\n  rd = rot3D(rd, vec3(1.,0.,0.), 0.4); //looking down\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point on sphere or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(8, 8, -19);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of\n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n\n    // Multiply the diffuse reflection value by an orange color and add a bit\n    // of the background color to the sphere to blend it more with the background.\n    col = dif * co.col + backgroundColor * .2;\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4X3yR4","date":"1734763137","viewed":70,"name":"Math Project Raymarching demo","username":"aarav_prakash","description":"Math project shader","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raymarch","demo"],"hasliked":0,"parentid":"","parentname":""}}