{"ver":"0.1","info":{"id":"WsGyzG","date":"1603907962","viewed":117,"name":"Fire Propagation Experiment","username":"hcorion","description":"This is shader for fire propagation.\nClick to spawn fire\nClick+1 to spawn solids.","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["fire","fluiddynamics","pixelsart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getBuffer( in vec2 fragCoord)\n{\n    if (fragCoord.x >= 0. && fragCoord.x < float(iResolution.x) && fragCoord.y >= 0. && fragCoord.y < float(iResolution.y))\n    {\n     \tvec2 uv =  (fragCoord.xy + 0.5) / vec2(iResolution.xy);\n     \treturn texture(iChannel0, uv, -100.0);\n    }\n    return vec4(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = getBuffer(fragCoord).xyz;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool keyPress(int ascii)\n{\n    return (texture(iChannel1,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nvec4 encodeParticle(float heat, float fuel, float barrier) {\n    return vec4(heat, fuel, barrier, 0.);\n}\n\nvec4 getBuffer( in vec2 fragCoord)\n{\n    if (fragCoord.x >= 0. && fragCoord.x < float(iResolution.x) && fragCoord.y >= 0. && fragCoord.y < float(iResolution.y))\n    {\n        vec2 uv =  (fragCoord.xy + 0.5) / vec2(iResolution.xy);\n        return texture(iChannel0, uv, -100.0);\n    }\n    return vec4(0.,0.,0.,1.);\n}\n\nfloat disk(vec2 r, vec2 center, float radius) \n{\n    return 1.0 - smoothstep( radius-0.5, radius+0.5, length(r-center));\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat RandomFloat (vec2 cell)\n{\n    //return rand(vec2(float(iFrame)0.123+cell.x0.645, float(iFrame)0.453+cell.y0.329));\n    return 0.0;\n}\n\nvec4 update(vec2 cell)\n{\n    // What's the simulation?\n\n    // heat0\n    // heatl, heatr, heatu, heatd?\n\n    vec4 p0 = getBuffer(cell);\n\n    float h0 = p0.r;\n    float t0 = p0.b;\n    float hu = getBuffer(cell + vec2(0,1)).r;\n    float tu = getBuffer(cell + vec2(0,1)).b;\n    float hd = getBuffer(cell + vec2(0,-1)).r;\n    float hl = getBuffer(cell + vec2(1,0)).r;\n    float hr = getBuffer(cell + vec2(-1,0)).r;\n\n    float k = 0.9f;\n    //float newh0 = h0 + k * ((hu-h0)+(hd-h0)+(hl-h0)+(hr-h0));\n    float newh0 = h0;\n    float newt0 = t0;\n    if (t0 > 0.0f)\n    {\n        // If it's a solid object\n        //if (hd > 0.1f)\n        {\n            //newh0 = hd*0.9f;\n            //p0.r = 1.0f;\n        }\n        //else\n        {\n            newh0 = max(\n                \t\tmax(\n                    \t\tmax(\n                        \t\thd * 0.95f, hu*0.8f),\n                            hl * 0.95f),\n                hr*0.95f);\n            if (newh0 > 0.5f)\n            {\n                newt0 = newt0 - (newh0 * 0.01f);\n            }\n            \n        }\n    }\n    else\n    {\n        // If we're a gas object\n        \n        \n        if (hd > 0.1f)\n        {\n            newh0 = hd * 0.99f;\n            //p0.r = 1.0f;\n        }\n        // If we've got a solid above, attempt to spread the heat out\n        else if (tu == 1.0f)\n        {\n            newh0 = max(hl, hr) * 0.99f;\n        }\n        // \n        else if (hl > 0.1f || hr > 0.1f)\n        {\n            newh0 = max(hl * 0.95f, hr *0.95f) + hu * 0.02f;\n            //p0.r = 1.0f;\n        }\n        else\n        {\n            newh0 = h0 * 0.9f;\n        }\n    }\n    \n\n    p0.r = newh0;\n    p0.b = newt0;\n    return p0;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cell = floor(fragCoord);\n\n    //if(iFrame == 0) {\n    //    fragColor = vec4(0.,0.,0.,1.);\n    //}\n    //else {\n        fragColor = update(cell);\n    //}\n\n    float size = 10.0;\n\n    if( iMouse.z * disk(iMouse.xy, cell.xy, size) > 0.0) { \n        fragColor = vec4(0.9,0.,0.,1.);\n        if (keyPress(49))\n        {\n            fragColor.r = 0.0f;\n            fragColor.b = 1.0f;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}