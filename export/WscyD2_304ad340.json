{"ver":"0.1","info":{"id":"WscyD2","date":"1603329279","viewed":303,"name":"Blood Shader","username":"sapporo_dynamite","description":"Blood Shader\nkey1. clear\nClick mouse. Blood ","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["blood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tBlood Shader\n\n\tauthor:\n\tsapporo_dynamite/2020 \n\n\tLicense :\n\tCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n　　 URL：\n    fork of water droplets by kabacis \n\thttps://www.shadertoy.com/view/tddSD7 \n*/\nvec4 getBuffer(vec2 fragCoord) \n{\n    return texelFetch( iChannel0, ivec2(fragCoord), 0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color2 = vec4(0.);\n    \n    vec2 q = fragCoord.xy/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n    float blood = texture(iChannel0, q).x;\n    blood = pow(blood, 0.3);\n    \n    float p10 = texture(iChannel0, q-e.zy).x;\n    float p01 = texture(iChannel0, q-e.xz).x;\n    float p21 = texture(iChannel0, q+e.xz).x;\n    float p12 = texture(iChannel0, q+e.zy).x;\n    \n    // Totally fake displacement and shading:\n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 1.));\n    vec4 c = texture(iChannel1, fragCoord.xy*2./iChannelResolution[1].xy + grad.xy * blood);\n    vec3 light = normalize(vec3(.2,-.5,.7));\n    float diffuse = dot(grad,light);\n    float spec = pow(max(0.,-reflect(light,grad).z),30.);\n    vec4 bloodColor = vec4(1.728, .156, .156, 1.);\n    vec4 bloodOut = blood * bloodColor;\n        \n     //Add Blood Color\n    vec4 Color = mix( c, bloodOut, blood );\n    \n    color2 = Color*0.0 + Color*max(diffuse,0.)*1.0 + spec;\n    \n    // Time varying pixel color\n    vec3 col = getBuffer(fragCoord).rgb;\n\n    vec4 v = getBuffer(fragCoord * 1.);\n    vec4 color = vec4(0.);\n    if (v.x < 0.01) {\n    \t//color = mix(vec4(0., 0., 0., 1.), vec4(1., 0., 0., 1.), smoothstep(0.0, 0.03, v.x));\n    } else if (v.x < 0.1) {\n    \tcolor = mix(vec4(1., 0., 0., 1.), vec4(0., 1., 0., 1.), smoothstep(0.01, 0.1, v.x));\n    } else {\n        color = mix(vec4(0., 1., 0., 1.), vec4(0., 0., 1., 1.), smoothstep(0.1, 1.0, v.x));\n    }\n    \n    // Output to screen\n    fragColor = color;\n    fragColor = color2;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nURL：\n    fork of water droplets by kabacis \n\thttps://www.shadertoy.com/view/tddSD7\n*/\n \nvec4 getBuffer(vec2 fragCoord)\n{\n    return texelFetch( iChannel0, ivec2(fragCoord), 0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    \n    if(iFrame == 0)\n    {\n        fragColor = vec4(col,1.0);\n    }\n    else{\n        \n        vec2 p = fragCoord;\n        float vp = getBuffer(p).x; \n        \n        vec4 dv = vec4(\n            getBuffer(p + vec2(-1., 0.)).x,\n            getBuffer(p + vec2(0., -1.)).x,\n            getBuffer(p + vec2(1., 0.)).x,\n            getBuffer(p + vec2(0., 1.)).x\n        );\n        \n        // atract to water in close area\n        vec2 fd = vec2(0.);\n        float size = vp;\n        \n#if 1        \n        const int R = 4; // watter attraction radius\n        \n        for (int dy=-R; dy<=R; dy++){\n            for (int dx=-R; dx<=R; dx++) {\n                if (dx == 0 && dy == 0 || (dx * dx + dy * dy > R * R)) {\n                    continue;\n                }\n\n                float a = getBuffer(p+vec2(dx, dy)).x;\n                size += a;\n                vec2 dir = vec2(dx, dy);\n                vec2 ndir = normalize(dir);\n                vec2 c= pow(a, 0.4)*0.25 * ndir / pow(length(dir),0.9);\n                if (a > 0.36) {\n                    c *= 4. + a*1.;\n                }\n                fd += c;\n            }\n        }\n #endif       \n        // gravity\n         // add gravity with tweaks to make smaller droplets stick\n        vec2 down = vec2(0, -1.0)*10.81*vp;\n        if (vp > 0.06) {\n            down *= 1.+1.*pow(vp, 1.)+0.01*size;\n        } else {\n            down *= 0.00;\n        }\n        fd += down;\n        \n        vec4 dif = max(vec4(vp)-dv, 0.); // spread to neighbours that have less water\n        \n        dif *= 0.16;\n        if (vp < 0.02) {\n             dif *= 0.5;\n        }\n\n        vec4 fa = vec4(abs(min(fd.xy, 0.)), max(fd.xy, 0.)); //add force from attraction and gravity\n        dif += fa * 0.008;\n        dif *= 1.;\n\n        // try to avoid going in to negative values or exceeding maximum\n        float sm = dot(dif, vec4(1.));\n        float red = sm == 0. ? 1.0 : min(vp, sm)/sm;\n        dif *= (red);\n        dif = min(dif, vec4(1.)-dv);\n        fragColor = dif;\n        \n    \t//ragColor = vec4(0.0,0.0,1.0,1.0);\n    }\n   \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nURL：\n    fork of water droplets by kabacis \n\thttps://www.shadertoy.com/view/tddSD7\n*/\n\nvec4 getBuffet(vec2 p) {\n\treturn texelFetch(iChannel0, ivec2(p), 0);\n}\nvec4 getm(vec2 p) {\n\treturn texelFetch(iChannel1, ivec2(p), 0);\n}\n\nbool keyPress(int ascii){\n    return (texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    \n    if(iFrame == 0)\n    {\n        fragColor = vec4(col,1.0);\n    }\n    else{\n        if(keyPress(49)){\n            fragColor = vec4(col,1.0);\n            return;\n        }\n        vec2 p = fragCoord;\n    \tvec4 v = getBuffet(p);\n        if (length(p - iMouse.xy) < 10. && iMouse.z > 0.) {\n        \tv.x += 0.01;\n        }\n        if(iTime<=3.0){\n            if(0.8<0.9*smoothstep(1.0,0.0,length(fragCoord.xy-iResolution.xy*0.5+vec2(sin(iTime*2.0)*(iResolution.x/2. * 0.9), -sin(iTime*2.0)*(iResolution.y/2. * 0.9) ))*0.026)){\n                v.x += 0.1;\n            }\n            if(0.8<0.9*smoothstep(1.0,0.0,length(fragCoord.xy-iResolution.xy*0.5+vec2(cos(iTime*2.0)*(iResolution.x/2. * 0.9), cos(iTime*2.0)*(iResolution.y/2. * 0.9) ))*0.026)){\n                v.x += 0.1;\n            }\n   \t\t}\t    \n        vec4 moveOut = getm(p);\n        vec4 moveIn = vec4(\n        \tgetm(p + vec2(-1., 0.)).z,\n            getm(p + vec2(0., -1.)).w,\n            getm(p + vec2(1., 0.)).x,\n            getm(p + vec2(0., 1.)).y   \n        );\n        \n        v.x += 1.0*dot(vec4(1.), moveIn-moveOut);\n        \n        v = clamp(v, 0.0, 1.0);\n        if (p.y <= 1. || p.x < 1. || p.x > iResolution.x - 2. || p.y > iResolution.y - 2.) {\n            v.x = 0.;\n        }\n        fragColor = v;\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}