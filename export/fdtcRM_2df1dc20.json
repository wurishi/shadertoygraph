{"ver":"0.1","info":{"id":"fdtcRM","date":"1653189529","viewed":169,"name":"3D texture study","username":"pdcxs","description":"...","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 3\n#define PI 3.14159265\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfRect(in vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.)) + min(max(max(d.x, d.y),d.z), 0.);\n}\n\nfloat map(in vec3 p) {\n    float d = sdfRect(p, vec3(.7));\n    d = length(p) - 1.;\n    return d;\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if(d < PRECISION)\n            break;\n        t += d;\n    }\n    return t;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h) +\n        k.yyx * map(p + k.yyx * h) +\n        k.yxy * map(p + k.yxy * h) +\n        k.xxx * map(p + k.xxx * h));\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.);\n    vec3 ro = vec3(2. * cos(iTime), 1., 2. * sin(iTime));\n    if (iMouse.z > 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        ro = vec3(2. * cos(theta), 2. * (-2. * iMouse.y / iResolution.y + 1.), 2. * sin(theta));\n    }\n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    vec3 rd = normalize(cam * vec3(uv, 1.));\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(2., 1., 0.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n\n        // color = amb * vec3(.7) + dif * vec3(1.);\n        vec3 colorXY = texture(iChannel0, p.xy * .5 + .5).rgb;\n        vec3 colorXZ = texture(iChannel0, p.xz * .5 + .5).rgb;\n        vec3 colorYZ = texture(iChannel0, p.yz * .5 + .5).rgb;\n        n = abs(n);\n        n = pow(n, vec3(10.));\n        n /= n.x + n.y + n.z;\n        color = colorXY * n.z + colorXZ * n.y + colorYZ * n.x;\n        //color = n;\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}