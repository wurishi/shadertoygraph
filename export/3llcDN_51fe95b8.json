{"ver":"0.1","info":{"id":"3llcDN","date":"1592124575","viewed":388,"name":"Two tone sound","username":"qwert33","description":"blah","likes":5,"published":3,"flags":8,"usePreview":0,"tags":["oscilloscope","sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://www.shadertoy.com/view/XsjSzc\n\nfloat length2( in vec2 v ) { return dot(v,v); }\n\nfloat ssdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2  pa = p - a;\n\tvec2  ba = b - a;\n    float bam = dot(ba,ba);\n    if( bam>0.1 ) return 10.0;\n\tfloat h = clamp( dot(pa,ba)/bam, 0.0, 1.0 );\n\t\n\treturn length2( pa - ba*h );\n}\n\nconst float freq = 44.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n    float f = 1.5;\n    float ox = 0.0;\n    float oy = 0.0;\n    \n   \n        \n    for( int i=0; i<1024; i++ )\n    {\n        float h = float(i)/1024.0;\n    \n        \n        float tt = floor(iTime*freq)/freq;\n        float t = tt + h/freq;\n        //t -= fract(iTime / 44.);\n    \n        //----------------        \n        vec2 sound = mainSound(0, t);\n        sound.x = 4.*(h-.5); \n        sound.y *= 3.;\n        //----------------        \n        \n        \n        if( i>0 ) \n        {\n            float dis = ssdSegment( p, sound, vec2(ox,oy) );\n            f += exp( -5000.0*dis )*1.00 + \n                 exp( - 100.0*dis )*0.04;\n        }\n        ox = sound.x;\n        oy = sound.y;\n    }    \n    \n    float h = clamp( f*0.05, 0.0, 1.0 );\n    vec3 col = vec3( h*h, h, h*h*h )*3.0;\n   \n    vec2 q = fragCoord.xy/iResolution.xy;\n    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n    float grid = 1.0;\n    grid *= 1.0-smoothstep( 0.98, 0.99, 2.0*abs(fract( q.x*10.0 )-0.5) );\n    grid *= 1.0-smoothstep( 0.96, 0.98, 2.0*abs(fract( q.y*6.0 )-0.5) );\n    grid *= 1.0-smoothstep( 0.90, 0.92, 2.0*abs(fract( q.x*50.0 )-0.5) )*\n                smoothstep( 0.84, 0.85, 2.0*abs(fract( q.y* 6.0 )-0.5) );\n    grid *= 1.0-smoothstep( 0.91, 0.92, 2.0*abs(fract( q.y*30.0 )-0.5) )*\n                smoothstep( 0.85, 0.86, 2.0*abs(fract( q.x*10.0 )-0.5) );\n    col *= 0.5 + 0.5*grid;\n  \n    col += 0.06*smoothstep(0.2,0.7,q.y);\n    \n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926535897932384626433832795\n#define TAU 2.*PI\n\nvec2 mainSound( in int samp,float t){\n\tfloat f1 = 440.;\n\tfloat f2 = 881.;\n    \n    \n    float m = 1.0;\n    #define ADDITIVE false\n    if (ADDITIVE) {\n        f1 += m;\n        f2 += m;\n    } else {\n        f1 *= m;\n        f2 *= m;\n    }\n\n    \n    \n    float tone1 = sin(f1*TAU*t);\n    float tone2 = sin(f2*TAU*t);\n    \n    return (tone1 + tone2) * vec2(1,1) * 0.1;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"","name":"Sound","description":"","type":"sound"}]}