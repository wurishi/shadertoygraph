{"ver":"0.1","info":{"id":"st33DS","date":"1638466982","viewed":549,"name":"Dreaming of freedom","username":"asis5528","description":"To get full story,play the shader till 130 sec.\nDreaming of freedom, a parrot dreams bout things it can do if it was free from cage.\nSpoiler (it has a game inside)\n","likes":44,"published":1,"flags":112,"usePreview":1,"tags":["game","clouds","lightscattering","light","volumetric","animation","scattering","chair","bird","lightshaft","cage","parrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////Dreaming of freedom story/////By Asis//////////////\n\n///Play the shader till 130 sec for full story////////\n\n///I had more idea to add in this shader but it was too much already :D////\n///I always wanted to make light scattering shader,finally implemented in this shader///\n//I don't know how to program sound,so it kinda sucks to play the scene without any music ;(\n\n///Video captured with music link https://youtu.be/Qc0xyLP9sG4\n\n///TWITTER: @blender5528 ///////////////////////\n\n\n#define AA 2\nfloat nextTime = 0.;\nfloat dis = 0.;\nfloat left = 0.;\nfloat roll = 0.;\nfloat flyinscene = 0.;\nfloat gamespeed = 1.;\nfloat collision = 0.;\n////////////////Shadow mapping from  xor https://www.shadertoy.com/view/Xdc3DS ////\nfloat shadow1(vec2 shadowuv,vec2 offset, float depth,float bias)\n{   \n    float depth2 = dtof(vec4(texture(iChannel2,shadowuv+offset).a));\n    float F = clamp(depth-depth2+bias,0.0,1.0);\n    return F;\n}\n\nfloat shadow(vec3 p,vec3 d)\n{\n    vec2 SV = vec3tovec2(d);\n    vec2 OV = 1.0/iResolution.xy;\n    float S = length(sun-p);\n    float bias = 0.01;\n    float QUALITY = 3.0;\n    float T = 0.0;\n    float V = 3.1416/QUALITY;\n   for(float i = 0.0; i<6.2831;i += 6.2831/QUALITY)\n    {\n        vec2 Off = vec2(cos(i),sin(i))*OV*2.0;\n    \tT += shadow1(SV,Off,S,bias);\n        Off = vec2(cos(i+V),sin(i+V))*OV;\n        T += shadow1(SV,Off,S,bias);\n    }\n\n   // T = shadow1(SV,vec2(0.),S,bias);\n    \n    return length(sun-p)/100.-T/QUALITY/2.0;\n}\n///////////////////////////////////////////////////////////////////\nfloat hash(vec3 p) \n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\nfloat noise( in vec3 x )\n{\n    return texture(iChannel3,x*0.04).x;\n}\nfloat fbm(in vec3 q){\n\nfloat f;\n    f  = 0.250000*noise( q+vec3(0.,0.,-iTime) ); q = q*2.02;\n   \n    f += 0.25000*noise( q+vec3(0.,0.,iTime*2.) ); q = q*2.23;\n   \n    f += 0.12500*noise( q+vec3(0.,iTime*2.,0.0) ); q = q*2.41;\n    return f*1.6;\n\n}\n\n\n////Bird sdf//////////////\nvec2 bird(vec3 p,inout vec3 pos){ \n    float mat  =7.;\n    float d;\n    vec3 q = p;\n    if(scene==0){\n        q.y-=55.5*2.;\n        float a= sin(iTime)*0.05;\n        q.xy*=mat2(cos(a),sin(a),-sin(a),cos(a));\n        q.y+=55.5*2.;\n    }\n    pos = q;\n    float a = -0.;\n    if(scene>0){\n        a=-clamp(nextTime-2.,0.,1.5708);\n        q.y+=3.5;\n        q.zy *= mat2(cos(a),sin(a),-sin(a),cos(a));\n        q.y-=3.5;\n    }\n    float boddis  = dis*(1.+gamespeed/30.);\n    if(scene>0){\n        q.y-=dis*gamespeed;\n        q.x+=left;\n        q.z-=cos((boddis*1.))*1.;\n        a = roll;\n        q.xz *= mat2(cos(a),sin(a),-sin(a),cos(a));\n    }\n    q.y/=1.1;\n    d =length(q-vec3(0.,-4.,0.))-9.2;\n    if(d<1.0){\n        vec3 hq = q;\n        float headpose = clamp(nextTime-2.5,0.,0.6);\n        float bodang = headpose+sin(boddis)*0.15;\n        mat2 bodyrot = mat2(cos(bodang),sin(bodang),-sin(bodang),cos(bodang));\n        hq.y-=0.5;\n        hq.zy *= bodyrot;\n        hq.y+=0.5;\n        pos = hq;\n        float head = (sdVerticalCapsule(hq-vec3(0.,1.2,0.1),2.75,1.0)-(3.75-hq.y)*0.2)*0.8;\n        vec3 eq =hq;\n        eq.x=abs(eq.x)-0.5;\n        float eyes = length(eq-vec3(0.5,3.5,0.6))-0.2;\n        head = smax(eyes-0.1,head,0.5);\n        eq-=vec3(0.1,3.5,0.35);\n        eyes =  length(eq)-0.5;\n        if(eyes<head){ head =  eyes; mat = 8.; pos = eq;}\n        eyes =  length(eq-vec3(0.15,0.05,0.1))-0.38;\n        if(eyes<head) {head = eyes; mat = 8.2;}\n        vec3 cq = hq;\n        cq.x=abs(cq.x)-0.6;\n        cq-=vec3(0.,2.65,0.5);\n        cq.x-=cq.y*0.2;\n        float cheeks = sdVerticalCapsule(cq,0.3,0.5);\n        float smoothsdf;\n        smoothsdf = cheeks;\n        vec3 bq = hq;\n        bq.xyz-=vec3(0.,3.,1.0);\n        float beak = sdElipsoid(bq,vec3(0.5,1.,1.25));\n        float beakcut = sdVerticalCapsule(vec3(q.x,q.z,q.y)-vec3(0.,0.,2.5),1.5,0.45);\n        beak = smax(beakcut,beak,0.2);\n        bq.xyz-=vec3(0.,-0.2,-0.5);\n        float dbeak  = sdElipsoid(bq,vec3(0.5,1.,1.27));\n        float dcut = min(-bq.y-0.05+100.,sdVerticalCapsule(bq.yxz-vec3(0.,-0.1,1.),0.5,0.175));\n        dbeak = smax(dcut,dbeak,0.2);\n        beak = min(dbeak,beak);\n        if(beak<head){mat = 9.; head = beak;}\n        float sto = sdElipsoid(q-vec3(0.,0.35,0.1),vec3(1.75,2.,1.25));\n        float neck = sdTorus(q-vec3(0.,2.,0.),vec2(0.9,0.5));\n        vec3 tr = q;\n        tr.z+=tr.y*tr.y*0.1;\n        tr-=vec3(0.,-2.5,-0.75);\n        float cr = 0.2+tr.y*0.5;\n        tr.z-=tr.y*(0.1);\n        float tail = sdVerticalCapsule(tr/vec3(1.,1.,0.75),1.9,cr)*0.7-0.1;\n        tr.z-=tr.y*(bodang-0.3)*1.5;\n        tr.x=abs(tr.x)-0.15;\n        tr.x+=tr.y*0.1*max(0.,sign(tr.z));\n        tr.z=abs(tr.z)-0.05;\n        tr.z+=tr.y*0.2;\n        tr-=vec3(0.,-1.25,0.);\n        float tail2 = sdElipsoid(tr,vec3(0.125,1.5,0.1))*0.5;\n        smoothsdf =min(smoothsdf,tail);\n        vec3 wr = q;\n        wr.x = abs(wr.x)-1.9;\n        if(scene>0){\n            a = 1.75;\n            a*=min(boddis*0.2,1.);\n            wr.y-=0.5;\n            wr.zy*=mat2(cos(a),sin(a),-sin(a),cos(a));\n            bodang = headpose+sin(boddis)*0.75;\n            float wingang = (1.-bodang)*min(boddis,1.)+1.0-(1.-min(boddis,1.));\n            mat2 wingrot = mat2(cos(wingang),sin(wingang),-sin(wingang),cos(wingang));\n            wr.xy*=wingrot;\n            wr.y+=0.5;\n            wr.x+=pow(wr.y,2.)*0.2*(bodang-0.4)*min(boddis*2.,1.);\n        }\n        wr.x+=wr.y*0.4; \n        wr.z+=wr.y*wr.y*0.1;\n        wr-=vec3(0.,-0.5,0.3);\n        float wings = sdElipsoid(wr,vec3(0.3,1.75,0.9))*0.4;\n        wings = smax(wr.x+0.2,wings,0.5);\n        vec3 lr = q;\n        lr.y-=0.1;\n        lr.x=abs(lr.x)-0.6;\n        lr-=vec3(0.0,-2.25,0.);\n        lr.z-=lr.y*(0.05+bodang*0.5);\n        float leg =  sdVerticalCapsule(lr,0.6,0.2);\n        lr.x-=lr.z*0.1;\n        lr.x=abs(lr.x)-0.1;\n        lr.x-=lr.z*0.1*sign(lr.z);\n        lr.y+=(lr.z*lr.z)*(0.3+0.0);\n        lr-=vec3(0.,-0.3,-0.5);\n        float foot = sdVerticalCapsule(lr.xzy,1.2,0.1)*0.5;\n        foot = min(sto,foot);\n        smoothsdf = min(leg,smoothsdf);\n        if(leg+0.5<head){mat = 9.;}\n        head = smin(smoothsdf,head,0.3);\n        head = smin(wings,head,0.3);\n        head = smin(head,foot,0.3);\n        d = head;\n        if(tail2<d){mat = 10.; d = tail2; pos = tr;}\n    }\n    \n    return vec2(d,mat);\n}\n\n//Sdf final scene\nvec2 map(vec3 p,inout vec3 pos){\n    float mat;\n    float d;\n    nextTime-=15.;\n    vec2 bir=  bird(p/0.5,pos);\n    nextTime+=15.;\n    d =bir.x*0.5;\n    mat = bir.y;\n    vec3 birdpos = pos;\n    bool addfloor = true;\n    vec2 cag = cage(p,pos,scene<1,true);\n    vec3 cagpos = pos;\n    if(scene==0){\n        float chair = chair(p,pos);\n        vec3 chairpos = pos;\n        pos = birdpos;\n        if(chair<d){d = chair; mat = 4.; pos = chairpos;}\n    }\n    if(scene>0){cag.x = max(-(p.y+21.0-nextTime*2.),cag.x);}\n    if(cag.x<d){\n        d = cag.x; \n        mat = cag.y;\n        pos = cagpos;\n    }\n    if(scene<1){\n        vec2 lam = lamp(p);\n        if(lam.x<d){d = lam.x; mat = lam.y;}\n    }\n    return vec2(d,mat);\n}\n//Ray tracing\nvec2 I(vec3 o, vec3 d,inout vec3 pos){\n    float t  = 0.;\n    vec2 h;\n    for(int i = 0;i<100;i++){\n        vec3 p = o+d*t;\n        h = map(p,pos);\n        if (h.x<0.001) break;\n        t+=h.x;\n        if(t>100.) {break;}\n    }\n    return vec2(t,h.y);\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        vec3 p;\n        float d = map( opos ,p).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;   \n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 calculate_normal(vec3 pos){\n    const float eps = 0.0001;\n    vec4 n = vec4(0.0);\n    vec3 p ;\n    for( int i=0; i<4; i++ )\n    {\n        vec4 s = vec4(pos, 0.0);\n        s[i] += eps;\n        n[i] = map(s.xyz,p).x;\n    }\n    return normalize(n.xyz-n.w);\n}\n\n//Spotlight sdf for volume tracing\nfloat spotlightmap(vec3 p){\n    p-=sun;\n    p.y-=1.5;\n    float r = 2.-(p.y-6.5)*0.75;\n    float d = length(p.xz)-r;\n    return d;\n\n}\n//Final render\nvec4 R(vec3 o,vec3 d){\n    vec3 pos;\n    vec2 t = I(o,d,pos);\n    float tx = t.x;\n    vec2 uv = (2.*gl_FragCoord.xy-iResolution.xy)/iResolution.y;\n    float up = 1.-uv.y;\n    vec3 sk = vec3(vec3(0.6,0.6,1.)*(1.-(d.y+0.5)*1.2)+0.2);\n    if(scene ==0) sk*=0.;\n    vec4 c = vec4(sk,1.);\n    if(t.x>0.0 && t.x<100.0){\n        vec3 p =   o+d*t.x;\n        vec3 n = calculate_normal(p);\n        float occ = calcOcclusion(p,n);\n        float dif = dot(n,sun);\n        vec3 refvec = normalize(reflect(d,n));\n        vec3 spec = textureLod(iChannel0,refvec,10.).rgb;\n        float fresnel = dot(d,n);\n        c.rgb =vec3(1.)*(max(dif,0.)*0.05);\n        c.rgb *=occ;\n        if(t.y>9.5){\n            c.rgb=mix(c.rgb,mix(vec3(1.,1.,0.7),vec3(1.,0.7,0.7),pos.y/2.2+0.8),0.5);\n            c.rgb*=occ+0.5;\n        }\n        else if(t.y>8.5){\n            c.rgb=vec3(0.9,0.8,0.5)*0.5*occ;\n            c.rgb+=(fresnel+1.)*0.5;\n            c.rgb*=occ;\n        }\n       \n        else if(t.y>7.5){\n     \n            c.rgb = vec3(0.1-fresnel)*occ;\n            if(t.y>8.1){\n                c.rgb  = textureLod(iChannel0,refvec,3.).rrr*0.3+c.rgb*0.2;\n                c.rgb *=vec3(fresnel+1.5);\n                c.rgb *=occ;\n            }\n        }\n        //Bird body material\n        else if(t.y>6.5){\n            vec3 localpos = pos;\n            localpos.y-=3.;\n            float factor = localpos.y/20.+((localpos.z)*0.2-0.3)+abs(localpos.x)+0.2;\n            factor = smoothstep(0.5,0.8,factor);\n            localpos.y-=pow(2.5-localpos.z,1.5)*0.2;\n            factor*=smoothstep(0.,0.4,localpos.y+1.0);\n            c.rgb = vec3(0.3,0.9,0.5)*occ*occ*0.3;\n            vec3 bcolor =c.rgb*occ+0.7-texture(iChannel1,localpos.xy/44.+localpos.xz/44.+localpos.yz/44.).r;\n            c.rgb -=c.rgb;\n            c.rgb =mix(bcolor,vec3(1.)*occ*occ,clamp(factor,0.,1.));\n            c.rgb+=(fresnel+0.8)*0.5;\n            float k = 1.;\n            k*=smoothstep(0.8,1.4,pos.z);\n            k*=smoothstep(1.,0.7,abs((pos.y)-0.4)-0.4+pos.x*pos.x*0.4);\n            c.rgb =mix(c.rgb,vec3(0.9),clamp(k,0.,1.));\n            c.rgb+=(fresnel+0.5)*sk*float(scene);\n        }\n        else if(t.y>5.5){\n            vec3 spec = textureLod(iChannel0,refvec,0.).rgb;\n            vec3 tex = smoothstep(1.,0.,texture(iChannel1,(p.zx)/18.).r)*vec3(0.84,0.8,.8);\n           \n            c.rgb*=(tex);\n            c.rgb *=occ;\n            float inten = smoothstep(35.3,0.2,length(p.xz));\n            c.rgb*=inten;\n            vec3 ldir = normalize(sun-p);\n            float shadow = shadow(p,ldir);\n            c.rgb *= shadow*0.25+1.;\n       }\n        else if(t.y>4.5){\n            vec3 spec = textureLod(iChannel0,refvec,0.).rgb;\n            vec3 tex = texture(iChannel1,(p.xy+p.yz+p.xz)/1.).rgb*vec3(0.8,1.2,1.2);\n            c.rgb*=(tex);\n            c.rgb+=spec*0.25+(fresnel+1.)*0.5;\n            c.rgb *=occ;\n        }\n        else if(t.y>3.5){\n            vec3 spec = textureLod(iChannel0,refvec,0.).rgb;\n            vec3 tex;\n            if(t.y>4.0){\n                tex = texture(iChannel1,(pos.xz)/32.,0.0).rgb;\n            }\n            else {\n                pos.y+=sin(pos.x*4.)*9.6;\n                tex = texture(iChannel1,(pos.xy+pos.yz+pos.xz+pos.zx+pos.yx)/32.,0.0).rgb*vec3(1.,0.8,0.9);\n            }\n            c.rgb*=(tex)*0.8;\n            c.rgb+=spec*0.45+(fresnel+1.)*0.65;\n            vec3 ldir = normalize(sun-p);\n            float shadow = shadow(p,ldir);\n          \n            c.rgb*=1.25+(t.y-4.)*1.;\n            c.rgb*=occ*occ;\n              c.rgb *= 1.+shadow*0.25;\n        }\n        else if(t.y>2.5){\n            vec3 spec = textureLod(iChannel0,refvec,0.).rgb;\n            c.rgb = spec*0.8+(fresnel+1.12)*0.3;\n            c.rgb+=0.5*sk;\n            \n             \n        }\n        else if(t.y>1.5){\n            vec3 spec = textureLod(iChannel0,refvec,0.0).rgb;\n            float fres = (fresnel+1.25);\n            c.rgb = fres*vec3(1.)+spec*0.0;\n            c.rgb*=vec3(1.,0.8,0.9)*0.5;\n        }\n        else if(t.y>0.5){\n            c.rgb = vec3(2.);\n        }\n        else{\n            c.rgb*=occ;\n        }\n        if(p.y>12.){\n            c.rgb=mix(sk,c.rgb,smoothstep(5.,0.,p.y-17.));\n        }\n    }\n    return vec4(c.rgb,t.x);\n}\n//Volume for spotlight rays and cloud scene\nvec4 volume(vec3 ro,vec3 rd,vec4 col,float z){\n    \n    float t = 0.;\n    vec4 sum;\n    //First scene volume(spotlight)\n    if(scene==0){\n        for(int i =0;i<34;i++){\n            vec3 p = ro+rd*t;\n            float h = spotlightmap(p);\n            if(h<0.01) break;\n            t+=h;\n            if(t>100.) break;\n        }\n        float stepp = 0.2;\n        float scatterTime1 = 7.-iTime*3.;\n        float scatterTime2 = scatterTime1+1.;\n        for(int i= 0;i<50;i++){\n            vec3 p = ro+rd*t;\n            float h= -( spotlightmap(p)-2.5);\n            if(p.y<sun.y+1.){\n                vec3 q =p;\n                q-=vec3(0.,19.,0.);\n                float inten = (q.y+24.2)*0.04;\n                q.y/=8.2;\n                q.xz/=1.-(q.y*1.);\n                float blom = -(length(q)-2.5);\n                if(blom>0.001){\n                    sum+=blom*0.035*vec4(1.,0.85,0.95,1.)*inten;\n                }\n            }\n            h = pow(h*0.275,1.75);\n            vec3 ldir = normalize(sun-p);\n            //random jitter to reduce artifacts\n            float  rnd = hash(p);\n            //////////Shadows are sampled from buffer texture in every step of volume for scattering/////////\n            \n            float shadow =  shadow(p,ldir)*(1.0-rnd*0.3)*smoothstep(scatterTime1,scatterTime2,p.y);\n            float n =fbm(p*0.35+vec3(0.,iTime*0.75,0.))*0.65;\n            n-=rnd*0.1;\n            vec4 col1 = vec4(h*0.00175)*(shadow*1.3+1.0)*(1.-n);\n            if(h>0.001){\n                vec4 c = mix(vec4(1.,0.8,0.9,1.),vec4(1.,1.,1.45,1.),1.-(p.y*0.025+0.4));\n                c*=abs(p.y+27.2)*0.05;\n                sum+=col1*(1.-sum.a)*c;\n                if(t>z) break;\n            }\n            t+=stepp*1.2+rnd*0.1;\n        }\n        col*=1.+sum.a*1.1;\n    }\n    //Second scene volume for cloud\n    else if(scene>0){\n        float pos =dis*0.5*gamespeed;\n        for(int i =0;i<34;i++){\n            vec3 p = ro+rd*t;\n            float h;\n            if(flyinscene>0.5){\n                h = gameScene(p,pos,false);\n            }else{\n                h = cage(p,p,false,true).x-0.2-0.3;\n            }\n            if(h<0.01) break;\n            t+=h;\n            if(t>100.) break;\n        }\n        for(int i= 0;i<50;i++){\n            if(t>100.) break;\n            vec3 p = ro+rd*t;\n            vec3 q = p;\n            float n = noise(p+vec3(iTime*1.,-iTime*2.,0.));\n            float h;\n            vec4 col = vec4(1.);\n            if(flyinscene>0.5){\n                vec3 q = p;\n                h = -(gameScene(p,pos,false)+n*1.4)*0.7;\n             \n            }\n            else{\n                n -=pow(max(nextTime-20.70,0.),2.)*0.05;\n                h =-(max((p.y+21.-nextTime*2.), cage(q,q,false,true).x-0.25-n*0.5));\n            }\n            vec4 col1 = vec4(h)*vec4(0.245); \n            if(h>0.001){\n                vec4 c = mix(mix(vec4(0.8,0.8,1.2,1.),vec4(1.,1.,1.,1.)*0.65,p.y*0.1+0.5),vec4(0.3,0.6,0.7,1.),p.x*0.05);\n                c*=col;\n                sum+=col1*c*vec4(1.,1.,1.,1.)*(1.-sum.a);\n                if(t>z) break;\n            }\n            t+=0.12;\n         }\n         col*=1.+sum.a*1.3;\n    }\n    \n    col.rgb = pow(col.rgb,vec3(0.8));\n    sum = mix(col,sum,sum.a);\n    return vec4(sum);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //assiging for global variable\n    time=iTime;\n    //which scene is it?\n    scene = iTime<sceneTransitionrange?0:1;\n    //next scene time\n    nextTime = iTime-sceneTransitionrange;\n    //flying scene\n    flyinscene = nextTime-30.3>0.?1.:flyinscene;\n    if(iTime>120.){\n        scene =0;\n        nextTime = 0.;\n    }\n    if(scene>0){\n        dis =  max(0.,(nextTime-2.5-15.)*10.);\n        if(nextTime-26.>2.){\n            left = texelFetch(iChannel2,ivec2(0,0),0).a;\n            roll = texelFetch(iChannel2,ivec2(0,0),0).b;\n            collision  =  texelFetch(iChannel2,ivec2(3,2),0).b;\n        }\n    }\n    //Gamespeed\n    gamespeed+=dis*dis*0.00002;\n    vec4 col = vec4(0.);\n    vec3 ro; vec3 rd;\n    vec2 uv;\n    float an_x = 0.;\n   \tfloat an_y = 0.;\n    //before cage scene\n    if(flyinscene<0.5){\n        an_y = -3.5+sin(iTime*0.1)*0.;\n        an_x = 3.1415+sin(-iTime*0.3);\n    }\n    //after cage scene\n    else{\n        an_y = -3.3+sin(iTime*0.1)*0.;\n        an_x = 3.1415+(-iTime*0.3)*3.1415;\n    }\n    if(an_y>-3.) an_y = -3.;\n    if(an_y<-4.3) an_y = -4.3;\n   \tan_x+=sin(iTime/10.)/3.;\n    vec3 ta = vec3(0.0,2.0,0.0);\n    float off =max(0.,60.-pow(max(0.,nextTime+5.5),2.5));\n    if(scene>0){ off = 59.; an_y = -3.25;}\n    if(flyinscene>0.5) off = 65.;\n    ta.z-=0.1;\n    ro = ta+vec3(cos(an_y)*sin(an_x)*off,sin(an_y)*off,cos(an_y)*cos(an_x)*off);\n    if(scene>0){\n        ro = mix(ro,vec3(0.,20.,(dis*0.5*gamespeed)-20.),clamp((nextTime-26.)*0.3,0.,1.));\n        ta = mix(ta,vec3(0.,5.,(dis*0.5*gamespeed)+3.),clamp((nextTime-26.)*0.3,0.,1.));\n    }\n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww,vec3(0.0,1.0,0.0)));       \n    vec3 vv = normalize(cross(uu,ww));\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 rr = vec2( float(m), float(n) ) / float(AA);\n        uv = (2.*(fragCoord.xy+rr)-iResolution.xy)/iResolution.y;\n    \trd = normalize(uv.x*uu+uv.y*vv+2.5*ww);\n    \tcol += R(ro,rd);\n    }\n    col /= float(AA*AA);\n    col.rgb = clamp(col.rgb,0.,1.);\n    col.rgb = pow(col.rgb,vec3(1.25));\n    vec4 vol = volume(ro,rd,col,col.a);\n    if(scene>0){ vol*=min(nextTime*0.1,1.);}\n    else if(flyinscene<0.5){     \n        vol*=1.-max(nextTime+1.75,0.);\n    }\n    else{\n        vol*=min((iTime-122.)*0.2,1.);\n    }\n    vol = pow(vol,vec4(1./0.9));\n    if(scene>0){\n        if(iTime>100.){\n            vol *=smoothstep(0.3,0.2,abs(uv.y)-1.+(iTime-100.)*0.2);\n        }\n        if(flyinscene>0.5){\n            vol+=texture(iChannel2,fragCoord/iResolution.xy).xxxx;\n        }\n    }\n    fragColor = vec4(vol);\n     \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float dis = 0.;\nfloat gamespeed = 1.;\nconst int KEY_A  = 65;\nconst int KEY_D    = 68;\n\n//////////////text mapping from fabrice https://www.shadertoy.com/view/llySRh/////// \nint char_id = -1; vec2 char_pos, dfdx, dfdy;\nvec4 char(vec2 pq, int ch) {\n    vec2 dFdx = dFdx(pq/16.), dFdy = dFdy(pq/16.);\n    if ( pq.x>.25&& pq.x<.75 && pq.y>.0&& pq.y<.9 ) // thighly y-clamped to allow dense text\n        char_id = ch, char_pos = pq, dfdx = dFdx, dfdy = dFdy;\n    return vec4(0);\n}\nvec4 draw_char() {\n    int ch = char_id; vec2 pq = char_pos;\n    return ch < 0 \n        ? vec4(0,0,0,1e5)\n        : textureGrad( iChannel0, pq/16. + fract( vec2(ch, 15-ch/16) / 16. ), \n                       dfdx, dfdy );\n}\nvec4 pInt(vec2 p, float n) {\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = 4.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n#define spc  vv.x-=.5;\n#define C(c) spc char(vv,c);\n////////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    scene = iTime<sceneTransitionrange?0:1;\n    if(iTime>120.){\n        scene =0;\n    }\n    //If scene is first,we render depth of scene from light perspective for shadows and shadow scattering\n    if(scene==0){\n        vec2 uv = fragCoord.xy/iResolution.xy;\n        vec2 UV = fragCoord.xy/iResolution.xy;\n        time = iTime;\n        vec2 A = UV*vec2(6.2831);\n        vec3 D = vec3(cos(A.x)*cos(A.y),sin(A.x)*cos(A.y),sin(A.y));\n        vec3 ro = sun;\n        D = normalize(D);\n        float t = 0.;\n        for(int i = 0;i<150;i++){\n            vec3 p = ro+D.xyz*t;\n            float h = min(cage(p,p,false,false).x,chair(p,p))*0.8-0.1;\n            if(h<0.01) break;\n            t+=h;\n            if(t>100.){ break;}\n        }\n        vec3 wood = texture(iChannel1,uv/2.).rgb;\n        fragColor = vec4(vec3(wood),min(t/100.,1.));\n    }\n    //In second scene,text mapping/score calculation is done\n    else{\n    \n        float l = texelFetch( iChannel2, ivec2(KEY_A,0), 0 ).x;\n        float r = texelFetch( iChannel2, ivec2(KEY_D,0), 0 ).x;\n        vec2 uv = fragCoord.xy/iResolution.xy;\n        vec3 wood = texture(iChannel1,uv/2.).rgb;\n        float left =0.;\n        float roll = 0.;\n        float scr = 0.;\n        float flyinscene = iTime-sceneTransitionrange-26.;\n        if(flyinscene>0.){\n            dis =  max(0.,((iTime-sceneTransitionrange)-2.5-15.)*10.);\n            gamespeed+=dis*dis*0.00002;\n            float id = floor((dis*gamespeed*0.5)/40.);\n            float x =sin(id*1554.)*20.;\n            scr = texelFetch(iChannel3,ivec2(0,0),0).g;\n            left = texelFetch(iChannel3,ivec2(0,0),0).a;\n            roll = texelFetch(iChannel3,ivec2(0,0),0).b;\n            if(l>0.1){\n                left-=0.25*leftrightspeed*min(gamespeed,3.);\n                roll+=0.1;\n            }\n            else if(r>0.1){\n                left+=0.25*leftrightspeed*min(gamespeed,3.);\n                roll-=0.1;\n            }\n            else{\n                roll*=0.93;\n            }\n            left =clamp(left,-35.,35.);\n            wood.b = clamp(roll,-0.8415,0.8415);\n\n            float sc = 0.;\n            float tc = 0.;\n            if(abs(left-x)<15.2){\n                sc = 1.;\n            }\n            vec2 vv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n            dis-=10.;\n            float score = floor((dis*0.5*gamespeed)/40.);\n            float range = fract((dis*0.5*gamespeed)/40.);\n            float ss =   texelFetch(iChannel3,ivec2(3,2),0).b;\n            if(abs((score/500.)-fract(scr))<0.0001){\n                if(fragCoord.x>2.&&fragCoord.y<3.){\n                        wood.b = ss;\n                        if(range>0.6){\n                     wood.b = 0.;\n                    }\n                    }\n                    \n            }\n            else{\n                if(range<0.3 && abs(left-x)<15.5){\n                    tc = 1.;\n                    scr = floor(scr);\n                    scr+=1.+(score/500.);\n                    if(fragCoord.x>2.&&fragCoord.y<3.){\n                        wood.b = 1.;\n                    }\n                 }\n            }\n            if(iTime<56.5) scr = 0.;\n            wood.g = scr;\n            if(iTime<102.)\n                pInt((vv-vec2(2.125-min(iTime-55.,0.7),0.4))*8.,scr);\n            vv.y-=0.8;\n            vv.x+=1.8;\n            if(iTime<107.)\n            {\n                vv.y+=sin(iTime+vv.x)*0.1;\n                vv.x+=6.-flyinscene*0.6;\n            }\n\n            else{ \n                vv.x-=0.5;\n                vv.y+=0.75;\n                vv*=0.5;\n            }\n            vv*=9.;\n            if(iTime>112.){\n                vv.x+=1.75;\n                C(78)C(111)C(119)C(44)C(108)C(101)C(116)C(115) spc C(103)C(101)C(116) spc C(98)C(97)C(99)C(107) spc C(116)C(111) spc C(114)C(101)C(97)C(108)C(105)C(116)C(121)\n            }\n            else if(iTime>107.){\n                C(83)C(105)C(107)C(101)C(44)C(116)C(104)C(97)C(116) spc C(119)C(97)C(115) spc C(100)C(114)C(101)C(97)C(109)C(46)\n            }else{\n                C(80)C(114)C(101)C(115)C(115) spc C(97) spc C(97)C(110)C(100) spc C(100) spc C(116)C(111) spc C(109)C(111)C(118)C(101) spc C(108)C(101)C(102)C(116) spc C(97)C(110)C(100) spc C(114)C(105)C(103)C(104)C(116)\n                vv.y+=1.25;\n                vv.x+=19.;\n                C(71)C(101)C(116) spc C(65)C(116)C(108)C(101)C(97)C(115)C(116) spc C(115)C(99)C(111)C(114)C(101) spc C(49)C(48)C(48) spc C(102)C(111)C(114) spc C(114)C(101)C(119)C(97)C(114)C(100) spc C(59)C(41)\n            }\n            int ch = char_id; vec2 pq = char_pos;\n            vec4 tr = ch < 0 ? vec4(0,0,0,1e5) : textureGrad( iChannel0, pq/16. + fract( vec2(ch, 15-ch/16) / 16. ), dfdx, dfdy );\n            wood.x=tr.x;\n        }\n        if(iTime>107.){\n            wood.x*=sin(((iTime-107.)-3.1415/2.))*0.75+0.25;\n        }\n        fragColor = vec4(vec3(wood),left);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define sceneTransitionrange 19.0\n#define leftrightspeed 1.5\nfloat time;\nint scene;\nvec3 sun = vec3(0.,18.,0.01);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\nfloat smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n    \n    \nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) - r\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y-=clamp(p.y,0.,h);\n  return length( p ) - r;\n}\n\nfloat sdElipsoid(vec3 pos,vec3 rad){\n\tfloat k0 = length(pos/rad);\n    float k1 = length(pos/rad/rad);\n\treturn k0*(k0-1.0)/k1;\n}\n\nfloat cap(vec3 p){\n    p.y-=clamp(p.y,0.,1.2);\n    return length(p)-0.04;\n}\n\nfloat cy(vec3 p,float r,float h){\n    return  max(abs(p.y)-h,length(p.xz)-r);\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nvec2 repAng(vec2 p, float n) {\n    float ang = 2.0*3.1415/n;\n    float sector = floor((atan(p.x, p.y))/ang + 0.5);\n    float a = sector*ang;\n    p = mat2(cos(a),sin(a),-sin(a),cos(a))*p;\n    return p;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nfloat CylinderRing(vec3 p,float r,float dr,float c){\n  float d = length(p.xz)-r;\n  return max(-d-c,max(abs(p.y)-dr,d));\n\n}\n\nfloat sdchain(vec3 p,float leng){\n    vec3 cq = p;\n    cq.y=mod(cq.y,1.4)-0.7;\n    float chain = CylinderRing(cq.xzy,0.5,0.25,0.075);\n    cq=p;\n    cq-=vec3(0.,0.7,0.);\n    cq.y=mod(cq.y,1.4)-0.7;\n    chain = min(chain,CylinderRing(cq.yxz-vec3(0.0,.0,0.0),0.5,0.25,0.05));\n    chain = max(abs(p.y-20.2)-leng,chain);\n    return chain;\n}\n\nfloat gameScene(inout vec3 p,float dis,bool collision){\n    float cloud;\n    float q = p.z;\n    float id = floor(p.z/40.);\n    p.x +=sin(id*1554.)*10.;    \n    p.z = mod(p.z,40.)-20.;   \n    cloud = (length(p/vec3(1.2,1.,1.))-5.2)*0.9;\n    cloud = max(-(q-150.),cloud);\n    return cloud;\n}\nvec2 lamp(vec3 p){\n    float mat =2.0;\n    vec3 q = p;\n    float lam = 100.;\n    if(q.y>12.0){\n        vec3 lq = q;\n        lq-=sun+vec3(0.,1.,0.);\n        lam = smax(lq.y,length(lq.xz)+(lq.y-2.)*1.2,0.2);\n        float wire = (sdVerticalCapsule(lq,15.,0.1));\n        lam=min(lam,wire)*0.7;\n        float light=0.;\n        light = 100.;\n        lq.y-=0.5;\n        if(lq.y<-0.25){\n         light = length(lq)-1.2;\n        }\n        if(light<lam){\n            lam = light;\n            mat = 1.0;\n        }\n    }\n    return vec2(lam,mat);\n}\nvec2 cage(vec3 p,inout vec3 pos,bool flooor,bool vshape){\n    float mat = 3.;\n    float d = 100.;\n    if(p.y>-5.){\n        vec3 q = p;\n        vec3 cq = q;\n        if(scene==0){\n            cq.y-=55.5;\n            float a= sin(time)*0.05;\n            cq.xy*=mat2(cos(a),sin(a),-sin(a),cos(a));\n            cq.y+=55.5;\n        }\n        float bound = sdVerticalCapsule(cq,10.6,12.);\n        if(bound<1.||!flooor){\n            vec2 t= repAng(cq.xz,24.);\n            t.y-=0.5;\n            vec3 tq = vec3(t.x,cq.y,t.y);\n            d = sdLink(tq.zyx,1.8,3.2,0.1);\n            vec3 bq = cq;\n            bq-=vec3(0.,-4.5,0.);\n            float base = length(bq.xz)-3.2; \n            base = max(abs(bq.y)-0.3,base);\n            if(base<d){d = base;pos = bq; mat = 4.1;}\n            vec3 sq = cq;\n            sq-=vec3(-2.,-1.45,0.);\n            float seat =sdVerticalCapsule(sq.yxz,4.0,0.2);\n            sq.x=abs(sq.x-2.)-1.95;\n            float seatside = sdVerticalCapsule(sq,6.05,0.05);\n            if(seatside<seat){seat =seatside; mat = 3.;}\n            if(seat<d){\n                d = seat;\n                mat = 5.;\n            }\n            float chain =  sdchain((cq+vec3(0.,2.,0.))/0.5,6.)*0.5;\n            d = min(chain,d);\n        }\n        vec2 t= repAng(cq.xz,3.);\n        cq.y-=6.;\n        if(vshape){\n        vec3 tq = vec3(t.x,cq.y,t.y);\n        tq = cq;\n        tq.z=abs(tq.z);\n        tq.y-=5.;\n        float a = -0.275;\n        tq.zy*=mat2(cos(a),sin(a),-sin(a),cos(a));\n        d = min(d,sdVerticalCapsule(tq,50.,0.1)*0.5);\n       }\n    }\n    float flor = p.y+14.8;\n    if(flooor){\n    if(flor<d) {d = flor; mat = 6.;}}\n    return vec2(d,mat);\n}\nfloat chair(vec3 p,inout vec3 pos){\n    vec3 q = p;\n    q -=vec3(-5.,-8.,-9.);\n    float d= 100.;\n    if(p.y<2.){\n        if(sdRoundBox(q,vec3(17.5),0.01)<1.){\n            float  a ;\n            q.y+=5.5;\n            a = 1.5;\n            q.xz*=mat2(cos(a),sin(a),-sin(a),cos(a));\n            a = sin(time*2.)*0.125;\n            q.zy *= mat2(cos(a),sin(a),-sin(a),cos(a));\n            q.y-=5.5;\n            pos = q;\n            vec3 dim = vec3(3.5,0.1,3.5);\n            d =sdRoundBox(q,dim,0.1);\n            vec3 lq = q+vec3(0.,0.,0.);\n            lq.xz = abs(lq.xz)-vec2(3.,2.5);\n            lq.xz+=lq.y*0.1*sign(-lq.y);\n            lq.y= abs(lq.y+1.55);\n            float legs = sdVerticalCapsule(lq,4.5,0.25);\n            d = min(legs,d);\n            vec3 hq = q.xzy-vec3(0.,-4.5,3.);\n            hq.x = mod(hq.x,1.)-0.5;\n            hq.y+=hq.z*0.5+0.75;\n            hq.y-=hq.z*hq.z*0.035;\n            float head = sdRoundBox(vec3(hq.x,hq.y,hq.z),dim+vec3((q.y*0.1)-3.5,0.,0.),0.3)*0.8;\n            head = max(abs(q.x)-3.75,head);\n            d = min(head,d);\n            vec3 bq = q;\n            bq.x = abs(bq.x)-3.5;\n            float ring = CylinderRing(bq.yxz-vec3(3.25,0.,0.),10.,0.5,0.3);\n            ring = max(q.y+5.,ring);\n            d = min(d,ring);\n            float supp = sdRoundBox(bq-vec3(-0.35,3.,0.),vec3(0.4,0.1,4.5),0.1);\n            d = min(supp,d);\n        }\n    }\n    return d;\n}\n\nfloat dtof(vec4 n)\n{\n \treturn\tdot(n,vec4(1.0,1.0/255.0,1.0/65025.0,0.0))*100.;\n}\nvec2 vec3tovec2(vec3 n)\n{\n \treturn\tvec2(atan(-n.y,-n.x),asin(n.z))/6.2831+0.5;   \n}\nvec3 vec2tovec3(vec2 n)\n{\n    vec2 A = (n-0.5)*vec2(6.2831);\n \treturn\tvec3(cos(A.x)*cos(A.y),sin(A.x)*cos(A.y),sin(A.y));   \n}\n//Sharp Shadow Mapping\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"ldt3z7","filepath":"https://soundcloud.com/musictenno/daydreaming","previewfilepath":"https://soundcloud.com/musictenno/daydreaming","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}