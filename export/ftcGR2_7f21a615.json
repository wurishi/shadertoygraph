{"ver":"0.1","info":{"id":"ftcGR2","date":"1636341857","viewed":99,"name":"Mandelbrot_dwhit","username":"dwhit","description":"simple test to get familiar with shadertoy, a basic mandelbrot implementation with a little smoothing, messing around with the iteration and color breathing. Based off the Art of Code video series about coding the Mandelbrot in Unity.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 z, zPrev;\n    vec2 c = 2.4*(uv-.5) - vec2(.24,0.);\n    \n    float aspect = iResolution.x/iResolution.y;\n    c *= vec2(aspect,1.);\n    \n    float r = 200.;\n    float r2 = r*r;\n    \n    float iter;\n    float maxIter = 255.;\n    \n    \n    for(iter = 0.; iter < maxIter; iter++) {\n        zPrev = rot(z, vec2(0.), iTime);\n        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;\n        if (dot(z, zPrev) > r2){\n            break;\n        }\n    }\n    if(iter >= maxIter) {\n        fragColor = vec4(0);\n        return;\n    }\n    float len = length(z);\n    float fracIter = log2(log(len) / log(r));\n    \n    //iter -= fracIter;\n    \n    float m = sqrt(iter / maxIter);\n    \n    vec3 col = sin(vec3(.3,.45,.6)*m*20. + iTime)/2.+.5;\n    \n    col *= smoothstep(3., 0., fracIter);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rot(vec2 p, vec2 pivot, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    p -= pivot;\n    p = vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n    p += pivot;\n    return p;\n}","name":"Common","description":"","type":"common"}]}