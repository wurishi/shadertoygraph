{"ver":"0.1","info":{"id":"4tXSRj","date":"1437984658","viewed":151,"name":"trianglesTT2","username":"motte","description":"triangles","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define PI_HALF 1.5707963267\n\nfloat signf (vec2 p1, vec2 p2, vec2 p3)\n{\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool PointInTriangle (vec2 pt, vec2 v1, vec2 v2, vec2 v3)\n{\n    bool b1, b2, b3;\n    b1 = signf(pt, v1, v2) < 0.0;\n    b2 = signf(pt, v2, v3) < 0.0;\n    b3 = signf(pt, v3, v1) < 0.0;\n    return ((b1 == b2) && (b2 == b3));\n}\n\nvec2 getTriPoint(float shift)\n{\n    float t = mod(iTime*0.1 + shift, PI_HALF);    \n    float x = pow(sin(t), 0.22);\n    float y = pow(cos(t), 2.0) ;    \n    \n    return vec2(x * 0.5, y);\n}\n\n\nfloat calc1tri(float c, vec2 uv, int i, float ydecal)\n{\n    vec2 p = getTriPoint(float(i)*0.9);\n    vec2 left = vec2(-p.x+0.5, p.y-ydecal);\n    vec2 right = vec2(p.x+0.5, p.y-ydecal);\n\n    if (PointInTriangle(uv, right, left, vec2(0.5,0.0) ))\n    {\n        float distanceToEdge = length(uv-left);\n\n        float d = clamp(distanceToEdge, 0.0, 1.0);\n        c += 0.081;\n    }\n    return c;\n}\n\nvec3 getBackgroundColor(float y)\n{\n    float t = iTime*0.1;\n    \n    float phaseTime = (t - floor(t)) * 4.0;  \n    int phaseStart = int(mod(t, 4.0));   // => [0, 3]\n    int phaseEnd = int(mod((t + 1.0), 4.0));\n    \n    float subPhaseTime = phaseTime - floor(phaseTime); \n    \n    vec3 al,bl,ah,bh;\n        \n    if (phaseStart<1)\n    {\n        ah = vec3(0.4784,0.788235,0.9725);\n        bh = vec3(0.8196,0.3843,0.87039);\n    }\n    else if (phaseStart<2)\n    {\n        ah = vec3(0.8196,0.3843,0.87039);\n        bh = vec3(0.098,0.760781,0.3647);\n    }\n    else if (phaseStart<3)\n    {\n        ah = vec3(0.098,0.760781,0.3647);\n        bh = vec3(0.921568,0.8,0.247);\n    }\n    else\n    {\n        ah = vec3(0.921568,0.8,0.247);\n        bh = vec3(0.4784,0.788235,0.9725);\n    }\n    \n    vec3 up = mix(ah, bh, subPhaseTime);\n    vec3 low = mix(ah, bh, subPhaseTime);\n    return mix(up, low, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float c = 0.0;\n    float c2 = 0.0;\n    const int halfIterCount = 10;\n    for (int i=0;i<7;i++)\n    {\n        c2=0.0;\n        c = calc1tri(c, uv, i, 0.0);\n        float localc = c;\n        for (int j=-halfIterCount;j<halfIterCount;j++)\n        {\n            float fj = float(j);\n            localc = calc1tri(localc, uv, i, fj/iResolution.y);\n            c2 += max(0.0,localc-c); // delta color: take in account only if different from original color\n        }\n        c += c2/float(halfIterCount*2);\n    }\n\n    float lum = c/float(halfIterCount*2);\n    vec3 bg = getBackgroundColor(uv.y);\n    fragColor = vec4(bg.x,bg.y,bg.z,1.0) + lum;\n}","name":"","description":"","type":"image"}]}