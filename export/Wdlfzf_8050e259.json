{"ver":"0.1","info":{"id":"Wdlfzf","date":"1588774714","viewed":50,"name":"Julia Set Screensaver","username":"fedj99","description":"Quick shader implementation of the Julia set, with animated parameters","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math","juliaset","screensaver"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat hueTransform(float v) {\n    return pow(v, 1.0 / 1.7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Variables\n    float zoom = 3.0;\n    vec2 pan = vec2(0, 0);\n    int iterations = 10000;\n    float colorIntensity = 50.0;\n    float hueShift = 0.6;\n    float speed = 0.1;\n    float power = 1.0;\n    float juliaDistance = 0.65;\n    \n    // Get screen position\n    \n    // Calculate value\n    vec2 uv = (fragCoord / iResolution.xy - 0.5 + pan);\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= zoom;\n    vec2 c = vec2(sin(iTime * speed), cos(iTime * speed)) * cos(iTime * speed * sqrt(2.0) + 3.1415 / 4.0) * 0.3 + 0.4;\n    \n    vec2 z = uv;\n    float absval;\n    int i;\n    float bound = 4.0;\n    for (i = 0; i < iterations && absval < bound; i++) {\n        float real = z.x;\n        float imag = z.y;\n        z.x = (real * real - imag * imag) + c.x;\n        z.y = 2.0 * real * imag + c.y;\n        absval = length(z);\n    }\n\n    float val = fract(float(i) / float(iterations) * colorIntensity);\n    \n    // Output value\n    vec3 hsv = vec3(fract(hueTransform(val) + hueShift + cos(iTime * speed * speed * speed) / 0.5 + 0.5), 1, 1);\n    vec3 col = i == iterations ? vec3(0, 0, 0) : hsv2rgb(hsv);\n    fragColor = vec4(col.xyz, 1);\n}","name":"Image","description":"","type":"image"}]}