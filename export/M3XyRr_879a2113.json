{"ver":"0.1","info":{"id":"M3XyRr","date":"1725723019","viewed":26,"name":"a button with an engraving","username":"Efim","description":"simple engraving","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","displacement","implicit","button","engraving","bisect","barth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////=====================================================================================\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n#define nn 100.\n#define newton 5\n\nfloat gr(vec2 p)\n{\n    float r = 1.5;\n    if (length(p) < r)\n    {\n        float x1 = (p.x + r)/2.0/r, \n                y1 = (p.y + r)/2.0/r;\n        float f3 = dot(texture(iChannel0, vec2(x1,y1)).rgb, vec3(0.3, 0.59, 0.11));\n        f3 = pow(f3, 0.2);\n        f3 = 1.0 - f3;\n        return f3;\n    }\n    return 0.;\n}\n\nfloat map(vec3 p) {\n    float R0 = 2.0, d2 = dot(p.xy, p.xy) - R0*R0;\n    if (p.z > 0.)\n        d2 += 8.*p.z*p.z*p.z + gr(p.xy);\n    else\n        d2 += 50.*p.z*p.z;\n    \n    //float x = p.x, y = p.z, z = p.y, \n    float r = 0.1, R = 0.6,  \n    v = (dot(p, p) + R*R - r*r);\n    v =  v*v - 4.*R*R *(dot(p.xz, p.xz));\n    if (p.z >.0)\n        v = 10.;\n    return d2*v - 0.01;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float eps = 0.0001;\n    vec2 q = vec2(0.0, eps);\n    vec3 res = vec3(map(p + q.yxx) - map(p - q.yxx), map(p + q.xyx) - map(p - q.xyx), map(p + q.xxy) - map(p - q.xxy));\n    return normalize(res);\n}\n\nvec3 getPoint(vec3 a, vec3 b, float v0, float v1) {\n    vec3 m;\n    //binary search with  n iterations, n = newton\n    for(int i = 0; i < newton; i++) {\n        m = (a + b) * 0.5;\n        float v = map(m);\n        if(v == 0.)\n            break;\n\n        if(sign(v) * sign(v0) <= 0.) {\n            v1 = v;\n            b = m;\n        } else {\n            v0 = v;\n            a = m;\n        }\n    }\n    return m;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n\n\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float dist_infin = 2.2;\n    float hh = 4.2;\n\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec2 mo = 1.5*cos(0.5*iTime + vec2(0,11));\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, hh); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x - 1.57);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 bg = vec3(0.7, 0.7, 0.9)*0.6; //vec3(0.); //\n    vec3 col1 = vec3(0.73, 0.59, 0.3);\n    vec3 col2 = vec3(0.72, 0.01, 0.01);\n\n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg; // background  \n\n            //STEP 1. Calculating bounding sphere\n            float d = length(cross(ro, rd));\n            if(d >= dist) {\n                tot += col;\n                continue;\n            }\n            /*\n            STEP 2.\n            ray tracing inside the bounding sphere, \n            searching for a segment with different signs of the function value \n            at the ends of the segment\n            */\n            float td = abs(dot(ro, rd));\n            d = sqrt(dist * dist - d * d);\n            vec3 pos0 = ro + rd * (td - d);\n            vec3 pos1 = ro + rd * (td + d);\n            vec3 rd0 = pos1 - pos0;\n            vec3 pos = pos0;\n            float val0 = map(pos0);\n            for(float i = 1.; i < nn; i++) {\n                pos1 = pos0 + rd0 * i / (nn - 1.);\n                float val1 = map(pos1);\n                if(sign(val0) * sign(val1) <= 0.) {\n                    //different signs of the function value  at the ends of the segment\n                    //STEP 3. binary search to clarify the intersection of a ray with a surface.\n                    pos = getPoint(pos, pos1, val0, val1);\n                    vec3 nor = calcNormal(pos);\n                    col = col1;\n                    \n                    \n                    vec3 R = reflect(light, nor);\n                    float specular = pow(max(abs(dot(R, rd)), 0.), 25.);\n                    float difu = abs(dot(nor, light));\n                    col = col * (col * clamp(difu, 0., 1.0) + 0.5) + vec3(.5) * specular * specular;\n                    col = sqrt(col);\n                    break;\n                }\n                //if (sign(val1) < 0.) col = col2;\n                val0 = val1;\n                pos = pos1;\n            }\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}