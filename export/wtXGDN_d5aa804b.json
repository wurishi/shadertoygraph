{"ver":"0.1","info":{"id":"wtXGDN","date":"1556342537","viewed":280,"name":"Yurei - additive colours","username":"Chosen","description":"Noticed there were artifacts at the shape edges and due the order of application.\nTwo modes to try. Change background colour.\nPrevious https://www.shadertoy.com/view/wtfGWN\nOriginal https://www.shadertoy.com/view/wlf3RM","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["test","colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// These aren't used much, are you planning to do something interesting?\nvec2 spread = vec2(.3);\nvec2 offset = vec2(0.);\nfloat shapeSize = .3;\nconst float s = 1.;\n\nconst int MAX_SHAPES = 3;\nvec3 shapeColors[MAX_SHAPES] = vec3[MAX_SHAPES] (  \n  vec3(s, 0., 0.),\n  vec3(0., s, 0.),\n  vec3(0., 0., s)\n);\n\nvec2 motionFunction (float i) {\n  float t = iTime;\n\n  return vec2(\n    (cos(t * .31 + i * 3.) + cos(t * .11 + i * 14.) + cos(t * .78 + i * 30.) + cos(t * .55 + i * 10.)) / 4.,\n    (cos(t * .13 + i * 33.) + cos(t * .66 + i * 38.) + cos(t * .42 + i * 83.) + cos(t * .9 + i * 29.)) / 4.\n  );\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pixel = (fragCoord - .5 * iResolution.xy) / iResolution.x;\n    // Change include_background to 0 or 1 to try 2 different modes\n    // I didn't use #define as I'm not sure if you are familiar with those\n    int include_background = 0;\n    \n    // With include_background == 1 and a pure white background, you don't see the shapes,\n    // but try other colours\n    vec3 background = vec3(.2, .5, .7);\n    vec4 totalColor;\n    \n    if(include_background == 0)\n\t    // Create a colour to add to mix with background later. Initialise to 0.\n    \ttotalColor = vec4(0.);\n    else\n\t    // Initialise with background colour\n    \ttotalColor = vec4(background, 0.);\n    \n    for (int i = 0; i != MAX_SHAPES; ++i) {\n        vec2 shapeCenter = motionFunction(float(i)) * spread + offset;\n        float ratio = smoothstep(0., 1., distance(shapeCenter, pixel) / shapeSize);\n//      float ratio = clamp(distance(shapeCenter, pixel) / shapeSize, 0., 1.);\n\n        // Additive colour\n        totalColor += vec4(mix(shapeColors[i], vec3(0.), ratio), 1. - ratio);\n    }\n\n    totalColor = clamp(totalColor, 0., 1.);\n    if(include_background == 0){\n        // Mix the combined colour with the background\n        // Similar to Photoshop - Linear Dodge (Add) ?\n        totalColor.rgb = mix(background, totalColor.rgb, totalColor.a);    \n    } \n    \n    fragColor = vec4(\n        // Approximately convert to sRGB colourspace with sqrt()\n        sqrt(totalColor.rgb),\n        1.\n    );\n}\n","name":"Image","description":"","type":"image"}]}