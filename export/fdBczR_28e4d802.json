{"ver":"0.1","info":{"id":"fdBczR","date":"1647590670","viewed":31,"name":"3D Julia Set","username":"Fabi_2006","description":"3d View of a Julia Set\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 1000\n#define MAX_DIST 1000.0\n#define SURF_DIST 0.01\n#define STEP_DIST 0.01\n\nvec3 ro = vec3(0, 1, 2);\n\nfloat GetSpDist(vec3 p) {\n\tvec4 s = vec4(0, 0, 0, 3);    \n    return length(p-s.xyz)-s.w;\n}\n\nfloat fractal(vec4 p) {\n    float cr = p.z, ci = p.w, zr = p.x, zi = p.y;\n\tfor(int i = 0; i < 200; i++)\n\t{\n\t\tfloat temp = zr * zr - zi * zi + cr;\n\t\tzi = 2.0 * zr * zi + ci;\n\t\tzr = temp;\n\t\tif(zr * zr + zi * zi > 4.0) return -1.0;\n\t}\n    return abs(p.z);\n}\n\nfloat fractal(vec3 p) {\n    return fractal(vec4(p.xy, sin(iTime/20.)*p.z / 1.8, cos(iTime/20.)*p.z / 1.8));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO1 = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * dO1;\n        float dS = GetSpDist(p);\n        dO1 += dS;\n        if(dO1 > MAX_DIST) return 0.0;\n        else if(dS < SURF_DIST) break;\n    }\n    \n    float dir = fractal(ro + rd * dO1);\n    \n    for(float dO = dO1; dO < dO1 + 4.0; dO += STEP_DIST) {\n        if(fractal(ro + rd * dO) > 0.0) return dO;\n    }\n    return 0.0;\n}\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 col = abs((ro + rd * d));\n    \n    if(d <= 0.0) { col = vec3(0.5 - length(fragCoord / iResolution.xy - vec2(0.5)), 1.0 - length(fragCoord / iResolution.xy - vec2(0.5)), 1.0);\n    \n    col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n    col=mix(col, vec3(dot(col, vec3(0.33))), -1.0);  // satuation\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}