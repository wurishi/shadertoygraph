{"ver":"0.1","info":{"id":"dlfGD7","date":"1672014293","viewed":71,"name":"Ray Marching - CG 2022.2","username":"bsandrade","description":"Trabalho final de Computação Gráfica - 2022.2","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Martijn Steinrucken\n//\n// https://twitter.com/the_artofcode?lang=en\n// https://www.youtube.com/TheArtOfCodeIsCool \n//\n// https://www.youtube.com/watch?v=PGtv-dBi2wE\n// https://www.youtube.com/watch?v=Ff0jJyyiVyw\n// https://www.youtube.com/watch?v=AfKGMUDWfuE\n// https://www.youtube.com/watch?v=Vmb7VGBVZJA\n//\n// https://michaelwalczyk.com/blog-ray-marching.html\n// https://www.lcg.ufrj.br/cwdc/13-webgl/shaderToy.mp4\n//\n// A very simple ray marching implementation,\n// with a few SDF functions: sphere, torus, box, cylinder.\n// Boolean operations are also available: \n// union, intersection, difference and blend.\n// \n// The beauty of the method is that there are no more polygons or vertices, \n// but objects are just scalar fields, given by Signed Distance Functions (SDFs).\n//\n// Paulo Roma\n// 17/07/2022\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nconst int MAT_BASE=1;\nconst int MAT_BARS=2;\nconst int MAT_BENCH=3;\nconst int MAT_LINE=4;\nconst int MAT_TRIANGLES=5;\n\n// Rotation matrix.\nmat2 Rot (float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(vec2 p, vec2 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\n\nfloat sdTriangle(vec3 p, vec2 h) {\n    float k = sqrt(3.0);\n    h.x *= 0.5 * k;\n    p.xy /= h.x;\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    \n    if((p.x + k * p.y) > 0.0)\n        p.xy = vec2(p.x - k * p.y, -k * p.x - p.y)/2.0;\n        \n    p.x -= clamp(p.x, -2.0, 0.0);\n    \n    float d1 = length(p.xy) * sign(-p.y) * h.x;\n    float d2 = abs(p.z) - h.y;\n    \n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdLineSeg(vec3 p, vec3 a, vec3 b) {\n    vec3 ap=p-a, ab=b-a;\n    float t = clamp(dot(ap, ab)/dot(ab, ab), 0., 1.);\n    vec3 c = a + ab*t;\n    return length(p-c);\n}\n\nvec2 sdBench(vec3 p, float a) {\n    \n    p.y -= 1.5;\n    p.yz *= Rot(a);\n    p.y += 1.5;\n    \n    float d = length(p);\n    float bench = sdBox(p - vec3(0, .5, 0), vec3(.3, .01, .2));\n    \n    p.x = abs(p.x);\n    \n    float line = sdLineSeg(p - vec3(0,.5,0), vec3(.25,0,0), vec3(.25, 1, 0))-.005;\n    \n    d = min(d, bench);\n    d = min(d, line);\n    \n    return vec2(d, d==bench ? MAT_BENCH : MAT_LINE);\n}\n\n// B + A\nfloat unionSDF (float sda, float sdb) {\n    return min(sda, sdb);\n}\n\n// B * A\nfloat intersectionSDF (float sda, float sdb) {\n    return max(sda, sdb);\n}\n\n// B - A\nfloat differenceSDF (float sda, float sdb) {\n    return max(-sda, sdb);\n}\n\n// Blend A and B\nfloat blendSDF(float sda, float sdb, float k) {\n    float h = clamp(0.5 + 0.5 * (sdb - sda) / k, 0.0, 1.0);\n    return mix(sdb, sda, h) - k * h * (1.0 - h);\n}\n\nvec2 Min(vec2 a, vec2 b) {\n    return a.x<b.x ? a : b;\n}\n\n\nvec2 getDist(vec3 p) {\n    float base = sdBox(p, vec3(2.5, .1, 1.3))-.1;\n    \n    float s = sin(iTime);\n    \n    float bar = length(vec2(sdBox(p.xy, vec2(2,1.5)), p.z))-.04;\n     \n    vec3 tr0Pos = p - vec3(2, 0, 0);\n    tr0Pos.xz *= Rot(1.55);\n    \n    vec3 tr1Pos = p - vec3(-2, 0, 0);\n    tr1Pos.xz *= Rot(1.55);\n    \n    float td1 = sdTriangle(tr0Pos, vec2(1.3,.1))-.04;\n    \n    float td2 = sdTriangle(tr0Pos, vec2(1.5,.06))-.04;\n    \n    float td3 = sdTriangle(tr1Pos, vec2(1.3,.1))-.04;\n    \n    float td4 = sdTriangle(tr1Pos, vec2(1.5,.06))-.04;\n    \n    vec2 b1 = sdBench(p - vec3(1.2, 0, 0), s * 2.), \n          b2 = sdBench(p - vec3(0, 0, 0), s * 0.6), \n          b3 = sdBench(p - vec3(-1.2, 0, 0), s);\n    \n    vec2 benches = Min(b1, Min(b2, b3));\n    \n    float triangles = min(differenceSDF(td1, td2), differenceSDF(td3, td4));\n    \n    bar = max(bar, -p.y + 1.4);\n    \n    float d = min(base, bar);\n    \n    d = min(triangles, d);\n    d = min(d, benches.x);\n    d = max(d, -p.y);\n    \n    int mat = 0;\n    \n    if(d==base)\n        mat = MAT_BASE;\n    else if(d==bar)\n        mat = MAT_BARS;\n    else if(d == triangles)\n        mat = MAT_TRIANGLES;\n    else if(d==benches.x)\n        mat = int(benches.y);\n    \n    return vec2(d, mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    vec2 dSMat = vec2(0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        dSMat = getDist(p);\n   \n        dO += dSMat.x;\n        if(dO>MAX_DIST || abs(dSMat.x)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, dSMat.y);\n}\n\n// The normal is the gradient of the SDF scalar field at point p.\n// By using finite difference: \n// https://en.wikipedia.org/wiki/Finite_difference#Relation_with_derivatives \nvec3 GetNormal(vec3 p) {\n\tfloat d = getDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p-e.xyy).x,\n        getDist(p-e.yxy).x,\n        getDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n \nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\n// Phong illumination model, given a point and camera position.\nfloat getLight(vec3 p, vec3 ro) {\n    vec3 lightPos = vec3(0, 5, 6);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(-l,n);\n    \n    // ambient component\n    float amb = 0.1;\n    // ambient reflection coefficient\n    float ka = 1.0;\n    \n    // diffuse component - apply Lambert's cosine law\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    // diffuse reflection coefficient\n    float kd = 0.8;\n    \n    // specular component\n    float shininess = 100.;\n    vec3 v = normalize(ro-p);\n    float spec = clamp(dot(r, v), 0.0, 1.0);\n    spec = pow(spec,shininess);\n    // specular reflection coefficient\n    float ks = 1.0;\n    \n    // slightly move point p in the direction of the normal,\n    // so the distance is not zero. Otherwise, the first hit \n    // will be at the plane.\n    vec2 d = RayMarch(p + 2. * n * SURF_DIST , l);\n    \n    // cast a ray to the light\n    if (d.x < length(lightPos - p)) {\n        // point in the shadow\n        dif *= 0.1;\n        spec *= 0.5;\n    }\n    \n    // ambient + diffuse + specular components\n    return ka * amb + kd * dif + ks * spec;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.75,0), 0.7);\n    vec3 col = texture(iChannel0, rd).rgb;\n   \n    vec2 d = RayMarch(ro, rd);\n\n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 ref = texture(iChannel0, r).rgb;\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        int mat = int(d.y);//GetMat(p);\n        \n        if(mat==MAT_BASE)\n            col *= .1;\n        else if(mat==MAT_BARS)\n            col = ref;\n        else if(mat==MAT_TRIANGLES)\n            col = ref;\n        else if(mat==MAT_LINE)\n            col *= .05;\n\n    }\n    \n   col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.5, 0.7, 0.8,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}