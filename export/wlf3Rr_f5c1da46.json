{"ver":"0.1","info":{"id":"wlf3Rr","date":"1555593176","viewed":813,"name":"flamingo","username":"jshrake","description":"Audio reactive shader with a fun beat :)","likes":6,"published":3,"flags":64,"usePreview":0,"tags":["audio","fun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XtsGD7","filepath":"https://soundcloud.com/shhsecretsongs/kero-kero-bonito-flamingo","previewfilepath":"https://soundcloud.com/shhsecretsongs/kero-kero-bonito-flamingo","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// From https://www.shadertoy.com/view/4dS3Wd\nfloat hash(float n) { return fract(sin(n) * 2e4); }\n\nvec3 hsv2rgb(vec3 c) {\n  c = vec3(c.x, clamp(c.yz, 0.0, 1.0));\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat2 rot(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, s, -s, c);\n}\n\n// https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\nfloat line(vec2 uv, vec2 a, vec2 b, float thickness) {\n  float d =\n      abs((b.y - a.y) * uv.x - (b.x - a.x) * uv.y + b.x * a.y - b.y * a.x) /\n      distance(a, b);\n  return abs(d) - thickness;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy - 0.5;\n  float line_thickness = 0.01;\n  vec2 a = vec2(0.0, -1.0);\n  vec2 b = vec2(0.0, 1.0);\n  float line_count = 50.0;\n  vec3 color = vec3(0.0);\n  for (float line_i = 0.0; line_i < line_count; line_i += 1.0) {\n    vec2 mod_uv = uv;\n    float line_pct = line_i / line_count;\n    float fft = 1.0 * texture(iChannel0, vec2(line_pct, 0.25)).x;\n    // For a cooler preview?\n    if (iFrame < 20) {\n        fft = hash(line_i);\n    }\n    mod_uv.x +=\n        15.0 * fft * line_thickness * cos(fft * 17.0 * uv.y + 0.5 * iTime);\n    mod_uv.y +=\n        9.0 * fft * line_thickness * sin(fft * 15.0 * uv.x + 0.3 * iTime);\n    mat2 R = rot(PI * line_pct + 0.2 * iTime);\n    float d = line(mod_uv, R * a, R * b, line_thickness);\n    float blur = (1.0 + fft) * 5.0 / iResolution.y;\n    float m = smoothstep(-blur, blur, d);\n    vec3 line_color = hsv2rgb(vec3(0.8 + 0.1 * iTime, 1.0, 1.0));\n    color += mix(line_color, vec3(0.0), m);\n  }\n  fragColor.rgb = pow(color, vec3(1.0 / 2.2));\n}\n","name":"Image","description":"","type":"image"}]}