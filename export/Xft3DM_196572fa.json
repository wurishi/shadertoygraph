{"ver":"0.1","info":{"id":"Xft3DM","date":"1711761950","viewed":43,"name":"Fork L2 - TP3 - Mamadou 938","username":"Mamadou","description":"TP4 - Shadowing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadowing"],"hasliked":0,"parentid":"4XBSR1","parentname":"L2 - TP3 - Shadows"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n\n\nfloat Sphere1(vec3 p)\n{\n    return Sphere(p, vec3(-5.0, 0.0, 0.0), 3.5);\n}\n\nfloat Sphere2(vec3 p)\n{\n    return Sphere(p, vec3(-1.5, -6.0, 0.0), 1.5);\n}\n\nfloat Sphere3(vec3 p)\n{\n    return Sphere(p, vec3(-5.0, 0.0, 0.0), 2.5);\n}\n\nfloat Sphere4(vec3 p)\n{\n    return Sphere(p, vec3(5.5, 0.0, 0.0), 3.5);\n}\n\nfloat object(vec3 p)\n{\n    float v = Sphere1(p);\n\n    v = Union(v, Sphere2(p));\n    v = Union(v, Sphere3(p));\n    v = Union(v, Sphere4(p));\n\n    v = Union(v, Sphere(p, vec3(0.0, 4.0, 0.0), 1.5));\n\n    v = Difference(v, Plane(p, vec3(0.0, -2.0, 0.0), vec3(0.0, 1.0, 0.0)));\n\n    return v;\n}\n\n// Fonction Shadow:\n// Cette fonction détermine si un fragment est dans l'ombre ou éclairé par une lumière ponctuelle en utilisant\n// la technique de Shadow Mapping.\n// - fragPos : Position du fragment dans l'espace.\n// - lightPos : Position de la lumière ponctuelle.\n// - bias : Un petit décalage pour éviter les problèmes de \"self-shadowing\".\n// Retourne 0.0 si le fragment est dans l'ombre, 1.0 s'il est éclairé.\nfloat Shadow(vec3 fragPos, vec3 lightPos, float bias)\n{\n    // Direction de la lumière\n    vec3 lightDir = normalize(lightPos - fragPos);\n\n    // Coordonnées de projection du fragment\n    vec3 projCoords = fragPos + lightDir * bias;\n\n    // Conversion des coordonnées de projection en coordonnées de texture\n    vec2 texCoords = projCoords.xy / projCoords.z * 0.5 + 0.5;\n\n    // Échantillonnage de la profondeur de la carte d'ombre\n    float shadow = texture(iChannel1, texCoords.xy).r;\n\n    // Si la profondeur échantillonnée est plus grande que la distance de la lumière\n    if (shadow < projCoords.z - bias)\n    {\n        return 0.0; // Point dans l'ombre\n    }\n\n    return 1.0; // Point éclairé\n}\n\n// Fonction Fibonacci:\n// Cette fonction génère le i-ème point d'une série de n points sur une sphère en utilisant\n// l'algorithme de Fibonacci Sphere Sampling.\n// - i : Indice du point à générer (de 1 à n).\n// - n : Nombre total de points sur la sphère.\n// Retourne un vecteur de direction (vec3) représentant le point sur la sphère.\nvec3 Fibonacci(int i, int n)\n{\n    // Calcul des angles phi et theta basés sur la séquence de Fibonacci\n    float phi = acos(1.0 - 2.0 * float(i) / float(n));\n    float theta = 3.14159265359 * (1.0 + sqrt(5.0)) * float(i);\n    \n    // Conversion en coordonnées cartésiennes\n    float x = cos(theta) * sin(phi);\n    float y = sin(theta) * sin(phi);\n    float z = cos(phi);\n    \n    // Retourne le vecteur de direction du point sur la sphère\n    return vec3(x, y, z);\n}\n\n\nvec3 Hemisphere(int i, int n) {\n    float phi = float(i) * 2.39996323;  // Golden angle approximation\n    float y = 1.0 - (1.0 / float(n)) * float(i);\n    float radius = sqrt(1.0 - y * y);\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n    return normalize(vec3(x, y, z));\n}\n\nfloat Occlusion(vec3 fragPos, vec3 normal, int n) {\n    float occlusion = 0.0;\n\n    for (int i = 0; i < n; ++i) {\n        vec3 hemisphereDir = Hemisphere(i, n);\n        float NdotH = dot(normal, hemisphereDir);\n        occlusion += NdotH;\n    }\n\n    return occlusion / float(n);\n}\nvec3 Background(vec3 d)\n{\n    return mix(vec3(0.45, 0.55, 0.99), vec3(0.65, 0.69, 0.99), d.z * 0.5 + 0.5);\n}\n\nvec3 Shade(vec3 p, vec3 n, vec3 e) {\n    const vec3 lp = vec3(5.0, 6.0, 3.0);  // Position de la lumière (déplacée vers le bas)\n\n    // Direction de la lumière\n    vec3 l = normalize(lp - p);\n\n    // Couleur ambiante\n    vec3 ambient = vec3(0.25) + vec3(0.25) * Background(n);  // Supposant que Background est définie ailleurs\n\n    // Calcul de l'ombre douce en utilisant Occlusion\n    float shadow = Occlusion(p, n, 200);  // Supposant que Occlusion est définie ailleurs\n\n    // Diffusion de Phong\n    vec3 diffuse = 0.35 * clamp(dot(n, l), 0.0, 1.0) * vec3(1.0, 6.0, 1.0);\n\n    // Spéculaire\n    vec3 r = reflect(e, n);\n    vec3 specular = 0.15 * pow(clamp(dot(r, l), 0.0, 1.0), 35.0) * vec3(1.0, 1.0, 1.0);\n\n    // Couleur finale avec ombre, éclairage et occlusion ambiante\n    vec3 c = ambient + (1.0 - shadow) * (diffuse + specular);\n\n    // Retourne la couleur finale\n    return c;\n}\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\n/*vec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}*/\n\n\nvoid mainImage(out vec4 color, in vec2 pxy) {\n    // Pixel\n    vec2 pixel = (-iResolution.xy + 2.0 * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    Ray ray = CreateRay(m, pixel);\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    // Trace ray\n    float t = SphereTrace(ray, 75.0, hit, s);\n\n    // Couleur de fond par défaut\n    vec3 rgb = Background(ray.rd);\n\n    // Si le rayon a frappé un objet\n    if (hit) {\n        // Position du point de collision\n        vec3 p = Point(ray, t);\n        \n        // Calcul de la normale à l'objet\n        vec3 n = ObjectNormal(p);\n\n        // Calcul de la couleur avec éclairage, ombres et occlusion ambiante\n        rgb = Shade(p, n, ray.rd);\n    }\n\n    // Retourne la couleur finale de ce pixel\n    color = vec4(rgb, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}