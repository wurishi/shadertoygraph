{"ver":"0.1","info":{"id":"WtdfRX","date":"1613173154","viewed":381,"name":"Modified FNV-1A hash","username":"public_int_i","description":"FNV-1A hash modified in an attempt to make it more GPU friendly and optimized, displayed as bit planes.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["test","bit","hash","planes","modified","fnv1a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*Ethan Alexander Shulman 2021\nCC0, public domain\n\nFowler–Noll–Vo hash function\nhttps://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash*/\n\n\n//uvec4 seed, returns uvec4 hash\nuvec4 hash(uvec4 seed) {\n    uvec4 h = (0x6A7F8FAAu^seed)*0x01000193u;\n    h = ((h.wxyz>>3u)^h^seed.yzwx)*0x01000193u;\n    h = ((h.zwxy>>8u)^h^seed.wxyz)*0x01000193u;\n    return h^(h>>11u);\n}\n#define I2F (1./float(0xFFFFFFFFu))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uint hv = hash(uvec4(fragCoord,0,iTime*2.)).x;\n\n    //Hash bit plane test credit to hornet/pixelmager https://www.shadertoy.com/view/lt2yDm\n    int idx = int(floor(8.*uv.x)+8.*floor(4.0*uv.y));\n    uint bit = uint(idx);\n    uint bitmask = 1u<<bit;\n    float bitplane = float( (hv>>bit)&1u );\n    vec4 c = vec4(bitplane);\n    float ll = step( 10.0/iResolution.x, 1.0-abs(2.0*fract(8.0*uv.x)-1.0))\n    \t\t * step( 10.0/iResolution.y, 1.0-abs(2.0*fract(4.0*uv.y)-1.0));\n    fragColor = mix(vec4(1,0,0,1),c, ll);\n}","name":"Image","description":"","type":"image"}]}