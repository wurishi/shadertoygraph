{"ver":"0.1","info":{"id":"dlfcDH","date":"1698057501","viewed":25,"name":"Path tracing (demofox tutorial)","username":"Konod","description":"Path tracing demo from demofox:\nhttps://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive/","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    fragColor = vec4(color, 1.0f);\n} ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The minimunm distance a ray must travel before we consider an intersection.\n// This is to prevent a ray from intersecting a surface it just bounced off of.\nconst float c_minimumRayHitTime = 0.1f;\n\nconst float c_rayPosNormalNudge = 0.01f;\n\n \n// the farthest we look for ray hits\nconst float c_superFar = 10000.0f;\n\n// field of view\nconst float c_FOVDegrees = 60.0f;\n\nconst int c_numBounces = 50;\n\nconst float c_pi = 3.1415926535;\nconst float c_twopi = 2. * c_pi;\n\n \nstruct SRayHitInfo\n{\n    float dist;\n    vec3 normal;\n    vec3 albedo;\n    vec3 emissive;\n};\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n \nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n \nvec3 RandomUnitVector(inout uint state)\n{\n    float z = RandomFloat01(state) * 2.0f - 1.0f;\n    float a = RandomFloat01(state) * c_twopi;\n    float r = sqrt(1.0f - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec3(x, y, z);\n}\n \nfloat ScalarTriple(vec3 u, vec3 v, vec3 w)\n{\n    return dot(cross(u, v), w);\n}\n \nbool TestQuadTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo info, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    vec3 normal = normalize(cross(c-a, c-b));\n    if (dot(normal, rayDir) > 0.0f)\n    {\n        normal *= -1.0f;\n        \n\t\tvec3 temp = d;\n        d = a;\n        a = temp;\n        \n        temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    vec3 p = rayPos;\n    vec3 q = rayPos + rayDir;\n    vec3 pq = q - p;\n    vec3 pa = a - p;\n    vec3 pb = b - p;\n    vec3 pc = c - p;\n    \n    vec3 m = cross(pc, pq);\n    float v = dot(pa, m);\n    vec3 intersectPos;\n    if (v >= 0.0f)\n    {\n        float u = -dot(pb, m);\n        if (u < 0.0f) return false;\n        float w = ScalarTriple(pq, pb, pa);\n        if (w < 0.0f) return false;\n        float denom = 1.0f / (u+v+w);\n        u*=denom;\n        v*=denom;\n        w*=denom;\n        intersectPos = u*a+v*b+w*c;\n    }\n    else\n    {\n        vec3 pd = d - p;\n        float u = dot(pd, m);\n        if (u < 0.0f) return false;\n        float w = ScalarTriple(pq, pa, pd);\n        if (w < 0.0f) return false;\n        v = -v;\n        float denom = 1.0f / (u+v+w);\n        u*=denom;\n        v*=denom;\n        w*=denom;\n        intersectPos = u*a+v*d+w*c;\n    }\n    \n    float dist;\n    if (abs(rayDir.x) > 0.1f)\n    {\n        dist = (intersectPos.x - rayPos.x) / rayDir.x;\n    }\n    else if (abs(rayDir.y) > 0.1f)\n    {\n        dist = (intersectPos.y - rayPos.y) / rayDir.y;\n    }\n    else\n    {\n        dist = (intersectPos.z - rayPos.z) / rayDir.z;\n    }\n    \n\tif (dist > c_minimumRayHitTime && dist < info.dist)\n    {\n        info.dist = dist;        \n        info.normal = normal;        \n        return true;\n    }    \n    \n    return false;\n}\n \nbool TestSphereTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo info, in vec4 sphere)\n{\n    vec3 a = rayPos - sphere.xyz;\n    float b = dot(a, rayDir);\n    float c = dot(a, a) - sphere.w*sphere.w;\n    if (b > 0. && c > 0.) return false;\n    \n    float discr = b*b - c;\n    if (discr < 0.0) return false;\n    \n    bool fromInside = false;\n    float dist = -b - sqrt(discr);\n    if (dist < 0.) {\n        fromInside = true;\n        dist = -b + sqrt(discr);\n    }\n    \n    if (dist > c_minimumRayHitTime && dist < info.dist) {\n        info.dist = dist;\n        info.normal = normalize((rayPos + rayDir*dist) - sphere.xyz)*(fromInside ? -1. : 1.);\n        return true;\n    }\n    \n    return false;\n}\n \nvoid TestSceneTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo hitInfo)\n{    \n    {\n        vec3 A = vec3(-15.0f, -15.0f, 22.0f);\n        vec3 B = vec3( 15.0f, -15.0f, 22.0f);\n        vec3 C = vec3( 15.0f,  15.0f, 22.0f);\n        vec3 D = vec3(-15.0f,  15.0f, 22.0f);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.albedo = vec3(0.7f, 0.7f, 0.7f);\n            hitInfo.emissive = vec3(0.0f, 0.0f, 0.0f);\n        }\n    }    \n     \n    if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-10.0f, 0.0f, 20.0f, 1.0f)))\n    {\n        hitInfo.albedo = vec3(1.0f, 0.1f, 0.1f);\n        hitInfo.emissive = vec3(0.0f, 0.0f, 0.0f);        \n    } \n     \n    if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(0.0f, 0.0f, 20.0f, 1.0f)))\n    {\n        hitInfo.albedo = vec3(0.1f, 1.0f, 0.1f);\n        hitInfo.emissive = vec3(0.0f, 0.0f, 0.0f);        \n    }    \n     \n    if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(10.0f, 0.0f, 20.0f, 1.0f)))\n    {\n        hitInfo.albedo = vec3(0.1f, 0.1f, 1.0f);\n        hitInfo.emissive = vec3(0.0f, 0.0f, 0.0f);\n    }           \n     \n     \n    if (TestSphereTrace(rayPos, rayDir, hitInfo, vec4(10.0f, 10.0f, 20.0f, 5.0f)))\n    {\n        hitInfo.albedo = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.emissive = vec3(1.0f, 0.9f, 0.7f) * 100.0f;\n    }         \n}\n \nvec3 GetColorForRay(in vec3 startRayPos, in vec3 startRayDir, inout uint rngState)\n{\n    // initialize\n    vec3 ret = vec3(0.0f, 0.0f, 0.0f);\n    vec3 throughput = vec3(1.0f, 1.0f, 1.0f);\n    vec3 rayPos = startRayPos;\n    vec3 rayDir = startRayDir;\n     \n    for (int bounceIndex = 0; bounceIndex <= c_numBounces; ++bounceIndex)\n    {\n        // shoot a ray out into the world\n        SRayHitInfo hitInfo;\n        hitInfo.dist = c_superFar;\n        TestSceneTrace(rayPos, rayDir, hitInfo);\n         \n        // if the ray missed, we are done\n        if (hitInfo.dist == c_superFar)\n            break;\n         \n        // update the ray position\n        rayPos = (rayPos + rayDir * hitInfo.dist) + hitInfo.normal * c_rayPosNormalNudge;\n         \n        // calculate new ray direction, in a cosine weighted hemisphere oriented at normal\n        rayDir = normalize(hitInfo.normal + RandomUnitVector(rngState));        \n         \n        // add in emissive lighting\n        ret += hitInfo.emissive * throughput;\n         \n        // update the colorMultiplier\n        throughput *= hitInfo.albedo;      \n    }\n  \n    // return pixel color\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialize a random number state based on frag coord and frame\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n\n    // Generate a ray.\n    vec3 cameraPos = vec3(0.0f, 0.0f, 0.0f);\n    float cameraDistance = 1./tan(c_FOVDegrees * .5 * c_pi / 180.);\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 rayDir = normalize(vec3(uv, cameraDistance) - cameraPos);\n    \n    vec3 color = GetColorForRay(cameraPos, rayDir, rngState);\n    \n    vec3 prevFrameColor = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    color = mix(prevFrameColor, color, 1./float(iFrame+1));\n\n    // Output to screen.\n    fragColor = vec4(color, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}