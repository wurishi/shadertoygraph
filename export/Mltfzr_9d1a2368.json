{"ver":"0.1","info":{"id":"Mltfzr","date":"1538508203","viewed":87,"name":"EGP200_LayedHouse","username":"adamclarke","description":"Layering and shape drawing exercise","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["layers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 BgCol;\n\nvec2 HousePos = vec2(0.5, 0.5);\nfloat HouseSideLength = 0.2;\nvec4 HouseCol;\n\nvec2 ChimneyPos = vec2(0.55, 0.74);\nfloat ChimneyWidth = 0.02;\nfloat ChimneyLength = 0.1;\nvec4 ChimneyCol = vec4(1.0, 0.5, 0.0, 1.0);\n\nvec2 Window1Pos = vec2(0.48, 0.5);\nfloat Window1SideLength = 0.05;\nvec2 Window2Pos = vec2(0.55, 0.5);\nfloat Window2SideLength = 0.02;\nvec4 WindowCol;\n\nvec4 Layers[] = vec4[4](\n    vec4(0.0),\n    vec4(0.0),\n    vec4(0.0),\n    vec4(0.0)\n);\n\nbool VisibleLayers[] = bool[4](\n    true,\n    true,\n    true,\n    true\n); \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Aspect Ratio Correction\n    float aspectRatio = iResolution.y / iResolution.x;\n    uv.y *= aspectRatio;\n    HousePos.y *= aspectRatio;\n    ChimneyPos.y *= aspectRatio;\n    Window1Pos.y *= aspectRatio;\n    Window2Pos.y *= aspectRatio;\n    \n    // Custom UVs\n    float houseUvX = (uv.x - HousePos.x - HouseSideLength / 2.0) / ((HousePos.x - HouseSideLength / 2.0) - (HousePos.x + HouseSideLength / 2.0));\n    float houseUvY = 1.0 - (uv.y - HousePos.y - HouseSideLength / 2.0) / ((HousePos.y - HouseSideLength / 2.0) - (HousePos.y + HouseSideLength / 2.0));\n    vec2 houseUv = vec2(houseUvX, houseUvY);\n    float chimneyUvY = (uv.y - ChimneyPos.y - ChimneyLength / 2.0) / ((ChimneyPos.y - ChimneyLength / 2.0) - (ChimneyPos.y + ChimneyLength / 2.0));\n    \n    // Textures and animation\n    BgCol = texture(iChannel2, uv);\n    HouseCol = texture(iChannel1, houseUv);\n    WindowCol = texture(iChannel0, houseUv);\n    ChimneyCol.r = 1.0 - chimneyUvY + sin(iTime); // Animate chimney r channel\n    \n    // Draw Background Layer\n    Layers[0] = BgCol;\n    \n    // Draw Chimney Layer\n    Layers[1] = ChimneyCol;\n    Layers[1].a = (step(uv.x, ChimneyPos.x - ChimneyWidth / 2.0) - step(uv.x, ChimneyPos.x + ChimneyWidth / 2.0))\n        * (step(uv.y, ChimneyPos.y - ChimneyLength / 2.0) - step(uv.y, ChimneyPos.y + ChimneyLength / 2.0));\n    \n    // Draw House Layer\n    Layers[2] = HouseCol;\n    Layers[2].a = (step(uv.x, HousePos.x - HouseSideLength / 2.0) - step(uv.x, HousePos.x + HouseSideLength / 2.0))\n        * (step(uv.y, HousePos.y - HouseSideLength / 2.0) - step(uv.y, HousePos.y + HouseSideLength / 2.0));\n    \n    // Draw Windows Layer\n    Layers[3] = WindowCol;\n    \n    float window1Interp = (step(uv.x, Window1Pos.x - Window1SideLength / 2.0) - step(uv.x, Window1Pos.x + Window1SideLength / 2.0))\n        * (step(uv.y, Window1Pos.y - Window1SideLength / 2.0) - step(uv.y, Window1Pos.y + Window1SideLength / 2.0));\n    float window2Interp = (step(uv.x, Window2Pos.x - Window2SideLength / 2.0) - step(uv.x,  Window2Pos.x + Window2SideLength / 2.0))\n        * (step(uv.y, Window2Pos.y - Window2SideLength / 2.0) - step(uv.y, Window2Pos.y + Window2SideLength / 2.0));\n    \n    Layers[3].a = window1Interp + window2Interp;\n    \n    // Interpolate for layered effect\n    vec4 col = BgCol;\n    for(int i = 0; i < Layers.length(); i++)\n    {\n        if(VisibleLayers[i])\n        {\n        \tcol = mix(col, Layers[i], Layers[i].a);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}