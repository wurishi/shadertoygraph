{"ver":"0.1","info":{"id":"csKXDy","date":"1682768343","viewed":230,"name":"Silent Cape (SESSION2023)","username":"gaz","description":"3d","likes":14,"published":1,"flags":40,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define bufUV(n) ivec2((n)%int(iResolution.y),(n)/int(iResolution.y))\n#define lookAt mat3(\\\n    texelFetch(iChannel0,bufUV(0),0).xyz,\\\n    texelFetch(iChannel0,bufUV(1),0).xyz,\\\n    texelFetch(iChannel0,bufUV(2),0).xyz\\\n    )\n#define eye texelFetch(iChannel0,bufUV(3),0).xyz\n#define colorMat mat3(\\\n    texelFetch(iChannel0,bufUV(4),0).xyz,\\\n    texelFetch(iChannel0,bufUV(5),0).xyz,\\\n    texelFetch(iChannel0,bufUV(6),0).xyz\\\n    )\n#define fractalDepth texelFetch(iChannel3,ivec2(fragCoord/2.),0).x\n#define rabit texelFetch(iChannel2,ivec2(fragCoord),0)\n\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvec4 char(vec2 p, int C) {\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n    return textureGrad( iChannel1, p/16. + fract( vec2(C, 15-C/16) / 16. ) , \n                       dFdx(p/16.),dFdy(p/16.) );\n}\n\nfloat deChar(vec2 p, int c)\n{\n    vec4 f = char(p.xy * 0.13 + 0.5, c);\n    return smoothstep(0.47, 0.75, f.w);\n}\n#define Q(a,b)q.x-=a;de=min(de,deChar(q,b));\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec3 rd = lookAt * normalize(vec3(uv,1.5));\n    vec3 ro = eye;\n    \n    float t = fractalDepth -.3;\n\tvec3 O = vec3(0);\n    for(float i=0.,e;i<50.;i++)\n    {\n    \tvec3 p = ro+rd*t-i/1e4;\n    \tvec2 a = fractal(p);\n    \tt += e =abs(a.x)+.0001;\n        O += colorMat * H(log(a.y)*.2)*.03/exp(i*i*e); \n    \tif(t>rabit.w)\n    \t{\n    \t\tO+= rabit.xyz/exp(20.*dot(O,O));\n    \t\tbreak;\n    \t}\n    }\n    O*=O;\n    float time = mod(iTime,80.);\n    O *= smoothstep(2.,6.,time) * smoothstep(78.,73.,time);\n    \n    vec3 F = vec3(0);\n\tfloat de;\n\tvec2 q;\n\tq=uv*23.;\n\tde=1.;\n\tQ(-20.,83)\n\tQ(4.,73)\n\tQ(4.,76)\n\tQ(4.,69)\n\tQ(4.,78)\n\tQ(4.,84)\n\tQ(8.,67)\n\tQ(4.,65)\n\tQ(4.,80)\n\tQ(4.,69)\n\tF += smoothstep(.03, .0, de) * smoothstep(10.,8.,time);\n    \n   \tq=uv*27.;\n    de=1.;\n\tQ(-6.,71)\n\tQ(4.5,65)\n\tQ(4.5,90)\n\tF += smoothstep(.03, .0, de) * smoothstep(70.,75.,time);\n\n    fragColor.xyz = O + F;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nvec3 rot(vec3 p,vec3 a,float t)\n{\n\ta=normalize(a);\n\treturn mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a);\n}\n\nvec2 fractal(vec3 p)\n{\n\tp=asin(sin(p));\n\tfloat s=1.,e;\n\tfor(int i=0;i<7;i++)\n\t{\n\t\ts*=e=max(.1/dot(p,p),1.);\n\t\tp=rot(abs(p.zxy)*e-.1,vec3(.577),1.08);\n\t}\n\treturn vec2(p.x/s,s);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define fBits2i(a) floatBitsToInt(a) % (256*256)\n#define bufUV(n) ivec2((n)%int(iResolution.y),(n)/int(iResolution.y))\n#define hash(i) (texelFetch(iChannel0,bufUV(i),0)*2.-1.)\n#define euler(a) vec3(cos(a.y)*cos(a.x),sin(a.y),cos(a.y)*sin(a.x))\n\n#define A(a) T=smoothstep(0.,1.,clamp((time-SAM)/a, 0.0, 1.0));SAM+=a;\n#define mat3Mix(a,b,t) mat3(\\\n    mix(a[0], b[0],t),\\\n    mix(a[1], b[1],t),\\\n    mix(a[2], b[2],t))\n\n\nvec3 randCurve(float t,float n)\n{\n\tvec3 p = vec3(0);\n\tfor (int i=0; i<6; i++)\n\t{\n        vec4 h = hash(fBits2i(n));\n\t\tp += euler(h.yz)*sin(t+sin(t*1.6*h.w)*.5);\n\t\tn += 193.;\n\t\tt *= .8;\n\t}\n\treturn p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int n =  int(iResolution.x) * int(fragCoord.y) + int(fragCoord.x);\n    if(n>40)return;\n    \n    float time = mod(iTime,80.),T,SAM;\n\t\n\tvec2 a[] = vec2[](\n    \tvec2(-2,.4),\n\t\tvec2(2,-.8),\n\t\tvec2(-2,.0),\n\t\tvec2(-1,.4)\n\t);\n    SAM=0.0;\n    vec2 dir = a[0];\n\tfor(int i=1;i<20;i++)\n\t{\n\t\tA(3.)\n\t\tA(3.)\n\t\tdir=mix(dir,a[i&3],T);\n\t}\n    vec3 w = euler(dir);\n    vec3 u=cross(w,vec3(0,1,0));\n    if(n==0) fragColor.xyz = u;\n    if(n==1) fragColor.xyz = cross(u,w);\n    if(n==2) fragColor.xyz = w;\n    \n    vec3 b[] = vec3[](\n\t\tvec3(3,4,6),\n\t\tvec3(6.5,3.8,6),\n\t\tvec3(-3.5,8,-3),\n\t\tvec3(20.6,-4,6)\n\t);\n    \n    SAM=0.0;\n    vec3 eye = vec3(0);\n\tfor(int i=0;i<30;i++)\n\t{\n\t\tA(4.)\n\t\tA(6.)\n\t\teye=mix(eye, b[i&3],T);\n\t}\n    eye += vec3(.7,time*.01,time);\n    if(n==3) fragColor.xyz = eye;\n    \n    SAM=0.0;\n    mat3 c[] = mat3[](\n\t\tmat3(.7,0,0,.8,0,0,.8,0,0),\n\t\tmat3(1,0,0,0,1,0,0,0,1),\n\t\tmat3(0,0,0,0,.6,0,0,0,.5),\n\t\tmat3(0,.8,0, .6,0,0, 0,0,.3)\n\t);\n    mat3 color = c[0];\n    \n\tA(12.) A(5.) color = mat3Mix(color, c[1],T);\n\tA(5.)  A(5.) color = mat3Mix(color, c[0],T);\n\tA(6.)  A(5.) color = mat3Mix(color, c[2],T);\n\tA(5.)  A(5.) color = mat3Mix(color, c[0],T);\n\tA(6.)  A(5.) color = mat3Mix(color, c[3],T);\n\tA(5.)  A(5.) color = mat3Mix(color, c[0],T);\n    \n    color = transpose(color);\n    if(n==4) fragColor.xyz = color[0];\n    if(n==5) fragColor.xyz = color[1];\n    if(n==6) fragColor.xyz = color[2];\n    \n    if(n>=7)\n    {\n        vec3 p=eye+w*.6;\n        fragColor.xyz = p+randCurve(time*.3+25.*hash(n).z,float(n+357))*.8;\n    }   \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define fBits2i(a) floatBitsToInt(a) % (256*256)\n#define bufUV(n) ivec2((n)%int(iResolution.y),(n)/int(iResolution.y))\n#define hash(i) (texelFetch(iChannel0,bufUV(i),0)*2.-1.)\n\n#define lookAt mat3(\\\n    texelFetch(iChannel1,bufUV(0),0).xyz,\\\n    texelFetch(iChannel1,bufUV(1),0).xyz,\\\n    texelFetch(iChannel1,bufUV(2),0).xyz\\\n    )\n#define eye texelFetch(iChannel1,bufUV(3),0).xyz\n#define pos(n) texelFetch(iChannel1,bufUV(n+7),0).xyz\n\n\nfloat bb(vec3 rd, vec3 p, float r)\n{\n\tvec3 v=cross(p, rd);\n\tfloat l = dot(v,v);\n\tfloat a = r*r-l;\n\tif (a<0.) return a;\n\treturn sqrt(dot(p,p) - l) - sqrt(a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy/2.;\n    if (any(greaterThanEqual(fragCoord, r))) return;\n    vec2 uv = (fragCoord*2.-r)/r.y;\n    vec3 rd = lookAt * normalize(vec3(uv,1.5));\n    vec3 ro = eye;\n\n    float z=100.;\n\tvec4 O = vec4(z);\n\tfor(int i=0;i<30;i++)\n\t{\n\t\tvec3 a = pos(i);\n\t\tfloat t =bb(rd,ro-a,.1);\n\t\tif(t>=0. && z>t)\n    \t{\n    \t\tz=t;\n    \t\tO=vec4(t);\n    \t}\n    }\t\n\n    fragColor = O;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n#define fBits2i(a) floatBitsToInt(a) % (256*256)\n#define bufUV(n) ivec2((n)%int(iResolution.y),(n)/int(iResolution.y))\n#define hash(i) (texelFetch(iChannel0,bufUV(i),0)*2.-1.)\n\n#define lookAt mat3(\\\n    texelFetch(iChannel1,bufUV(0),0).xyz,\\\n    texelFetch(iChannel1,bufUV(1),0).xyz,\\\n    texelFetch(iChannel1,bufUV(2),0).xyz\\\n    )\n#define eye texelFetch(iChannel1,bufUV(3),0).xyz\n#define pos(n) texelFetch(iChannel1,bufUV(n+7),0).xyz\n\n#define R(p,a,t) mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define PI 3.14159265\n\n#define sabs(x) sqrt(x*x+1e-5)\n\nvec3 foldVec(float t){\n    vec3 n=vec3(-.5,-cos(PI/t),0);\n    n.z=sqrt(1.-dot(n,n));\n\treturn n;\n}\n\nvec3 fold(vec3 p, float t)\n{\n    vec3 n=foldVec(t);\n    for(float i=0.; i<t; i++){\n    \tp.xy=sabs(p.xy);\n\t\tfloat g=dot(p,n);\n\t\tp-=(g-sabs(g))*n;\n    }\n    return p;\n}\n\nfloat map(vec3 p, int id)\n{\n    p=rot(p,H(abs(hash(id).y)+iTime*.2)*2.-1.,iTime*.5);\n\tfloat t=4.+step(0.,hash(id).w);\n\tp = fold(p,t);\n\tp.z-=.07;\n\tp=rot(p,vec3(0,0,1),-PI/2.*(sin(iTime+hash(id).x*100.)*.5+.5));\n\tvec3 a=vec3(.005,.1,.005);\n\treturn length(p-clamp(p,-a,a))-.003;\n}\n\nvec3 calcNormal(vec3 p, int id)\n{\n\tvec3 n=vec3(0);\n\tfor(int i=0; i<4; i++){\n\t\tvec3 e=.001*(vec3(9>>i&1, i>>1&1, i&1)*2.-1.);\n\t\tn+=e*map(p+e,id);\n\t}\n\treturn normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec3 rd = lookAt * normalize(vec3(uv,1.5));\n    vec3 ro = eye;\n\n    float b = texelFetch(iChannel2,ivec2(fragCoord/2.),0).x;\n\tvec3 X[] =vec3[](vec3(.2,.5,.8),vec3(.9,.3,.2)); \n\tfloat z=100.;\n\tvec4 O = vec4(z);\n\tfor(int j=0;j<30;j++)\n\t{\n\t\tfloat t=b,e;\n\t\tvec3 a = pos(j);\n\t\tif(length(cross(rd,ro-a))<.1)\n\t    for(int i=0;i<30;i++)\n    \t{\n    \t\tvec3 p=ro+rd*t;\n        \tt+=e=map(p-a,j);\n    \t\tif ( e<.001)\n    \t\t{\n    \t\t\tif(z>t)\n    \t\t\t{\n    \t\t\t\tz=t;\n    \t\t\t\tvec3 c=X[int(hash(j).z*3.)&1];\n      \t\t\tvec3 n = calcNormal(p-a,j);      \n    \t\t\t\tvec3 li = vec3(.577);\n    \t\t\t\tc *= clamp(dot(n, li), 0.2, 1.0);\n        \t\t\tfloat rimd = pow(clamp(1.0 - dot(reflect(-li, n), -rd), 0.0, 1.0), 2.5);\n\t\t\t\t\tfloat frn = rimd+2.2*(1.-rimd);\n    \t\t\t\tc *= frn*0.5;\n    \t\t\t\tc *= max(.5+.5*n.y, 0.);\n    \t\t\t\tc *= exp2(-1.*pow(max(0.0, 1.0-map(p+n*0.3, j)/0.3),2.0));\n    \t\t\t\tc += vec3(.9,.8,.7)*pow(clamp(dot(reflect(rd, n), li), 0.0, 1.0), 10.0);\n    \t\t\t\tc = mix(vec3(.1),c, exp(-.1*t*t));\n      \t\t\tO = vec4(sqrt(c),t);\n    \t\t\t}\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    }\t\n\n    fragColor = O;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\n#define bufUV(n) ivec2((n)%int(iResolution.y),(n)/int(iResolution.y))\n#define lookAt mat3(\\\n    texelFetch(iChannel0,bufUV(0),0).xyz,\\\n    texelFetch(iChannel0,bufUV(1),0).xyz,\\\n    texelFetch(iChannel0,bufUV(2),0).xyz\\\n    )\n#define eye texelFetch(iChannel0,bufUV(3),0).xyz\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy/2.;\n    if (any(greaterThanEqual(fragCoord, r))) return;\n    vec2 uv = (fragCoord*2.-r)/r.y;\n    vec3 rd = lookAt * normalize(vec3(uv,1.5));\n    vec3 ro = eye;\n\tfloat t=0., d, maxd=100.;\n\tfor(int i=0;i<80;i++)\n\t{\n\t\tvec3 p = ro+rd*t;\n\t\tt += d = fractal(p).x;\n\t\tif (t>maxd || d<.001) break;\n\t}\n    fragColor = vec4(t);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define S(f,t) (mix(float(f(int(t))&255),float(f(int(t+1.))&255),smoothstep(0.,1.,fract(t)))/128.-1.)\n\nint F(int t){\n    return (t&t/255)-(t*4&t>>10&t>>7);\n}\n\nvec2 mainSound( int samp, float t )\n{\n\tfloat g=0.;\n    g+=.2*S(F,t*2000.);\n    g+=.2*S(F,(t-.01)*2000.);\n\treturn .7*clamp(vec2(g),-1.,1.);\n}","name":"Sound","description":"","type":"sound"}]}