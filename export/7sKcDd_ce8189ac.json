{"ver":"0.1","info":{"id":"7sKcDd","date":"1660197787","viewed":187,"name":"POM test","username":"TheDoubleAP","description":"Parallax Occlusion mapping","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Uncomment to use texture() instead of textureGrad()\n// (faster but leads to line artifacts)\n\n// #define textureGrad(tex, uv, dx, dy) texture(tex, uv)\n\nfloat getDepth(vec4 col){\n    return 1.0-((col.r + col.g + col.b)/3.0);\n}\n\nvec2 POM(vec2 uv, vec3 vDir, vec2 dx, vec2 dy){\n    const float minL = 8.0;\n    const float maxL = 32.0;\n    float numLayers = mix(maxL, minL, max(dot(vec3(0.0, 0.0, 1.0), vDir), 0.0));\n    float lDepth = 1.0 / numLayers;\n    float curLDepth = 0.0;\n    \n    vec2 p = vDir.xy * 0.1;\n    vec2 deltaUV = p / numLayers;\n    \n    vec2 curUV = uv;\n    float curH = getDepth(textureGrad(iChannel0, curUV, dx, dy));\n    \n    while(curLDepth < curH){\n        curUV -= deltaUV;\n        curH = getDepth(textureGrad(iChannel0, curUV, dx, dy));\n        curLDepth += lDepth;\n    }\n    \n    vec2 prevUV = curUV + deltaUV;\n    \n    float aH = curH - curLDepth;\n    float bH = getDepth(textureGrad(iChannel0, prevUV, dx, dy)) - curLDepth + lDepth;\n    \n    float w = aH / (aH - bH);\n    \n    vec2 finalUV = prevUV * w + curUV * (1.0 - w);\t\n    return finalUV;\n}\n\nfloat randNorm(vec2 p, vec2 dx, vec2 dy){\n    return 1.0-getDepth(textureGrad(iChannel0, p, dx, dy));\n}\n\nvec3 genNormMap( vec2 p, vec2 ddx, vec2 ddy)\n{\n    vec2 texelsize = vec2(.001);\n\n    float dx = 0.;\n    float dy = 0.;\n    \n    dx -= randNorm(vec2(p.x - texelsize.x, p.y - texelsize.y), ddx, ddy) * 1.0;\n\tdx -= randNorm(vec2(p.x - texelsize.x, p.y              ), ddx, ddy) * 2.0;\n\tdx -= randNorm(vec2(p.x - texelsize.x, p.y + texelsize.y), ddx, ddy) * 1.0;\n\tdx += randNorm(vec2(p.x + texelsize.x, p.y - texelsize.y), ddx, ddy) * 1.0;\n\tdx += randNorm(vec2(p.x + texelsize.x, p.y              ), ddx, ddy) * 2.0;\n\tdx += randNorm(vec2(p.x + texelsize.x, p.y + texelsize.y), ddx, ddy) * 1.0;\n    \n    dy -= randNorm(vec2(p.x - texelsize.x, p.y - texelsize.y), ddx, ddy) * 1.0;\n\tdy -= randNorm(vec2(p.x              , p.y - texelsize.y), ddx, ddy) * 2.0;\n\tdy -= randNorm(vec2(p.x + texelsize.x, p.y - texelsize.y), ddx, ddy) * 1.0;\n\tdy += randNorm(vec2(p.x - texelsize.x, p.y + texelsize.y), ddx, ddy) * 1.0;\n\tdy += randNorm(vec2(p.x              , p.y + texelsize.y), ddx, ddy) * 2.0;\n\tdy += randNorm(vec2(p.x + texelsize.x, p.y + texelsize.y), ddx, ddy) * 1.0;\n    \n    float nx = dx;\n    float ny = dy;\n    \n    vec3 norm = vec3(nx,\n                     ny,\n                    sqrt(1.0 - nx*nx - ny*ny));\n    \n    return vec3(norm * vec3(0.5, 0.5, 1.0) + vec3(0.5, 0.5, 0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dx = dFdx(uv);\n    vec2 dy = dFdy(uv);\n    vec2 uvoff = fract(uv + (iTime/10.0));\n    \n    vec3 viewPos = vec3(0.5, 0.5, 1.0);\n    vec3 vDir = normalize(viewPos - vec3(uv, 0.0));\n    vec2 uvPOM = POM(uvoff, vDir, dx, dy);\n    \n    vec3 col = textureGrad(iChannel0, uvPOM, dx, dy).rgb;\n    \n    vec3 lightDir = vec3(-1.0, 1.0, -1.0);\n    col *= 0.5 + dot(-lightDir, genNormMap(uvPOM, dx, dy)) * 0.5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}