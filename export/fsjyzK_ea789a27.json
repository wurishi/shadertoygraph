{"ver":"0.1","info":{"id":"fsjyzK","date":"1643792294","viewed":128,"name":"Ray Marching - Spheres","username":"tucna","description":"Demonstration of the ray marching.\n\nThe same using ray tracing - https://www.shadertoy.com/view/NdScDV","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 20.0\n#define SURF_DIST 0.001\n#define SPHERE_RADIUS 0.5\n\nvec2 Closer(vec2 o1, vec2 o2)\n{\n    if (o1.x < o2.x)\n        return o1;\n    else\n        return o2;\n}\n\nvec2 DistanceAndObject(vec3 point)\n{\n\tconst vec4 s1 = vec4(vec3(-1.1, SPHERE_RADIUS, 4), SPHERE_RADIUS);\n\tconst vec4 s2 = vec4(vec3( 0.0, SPHERE_RADIUS + 1.0, 3), SPHERE_RADIUS);\n    const vec4 s3 = vec4(vec3( 1.1, SPHERE_RADIUS, 5), SPHERE_RADIUS);\n\n    float s1Dist =  length(point - s1.xyz) - s1.w;\n    float s2Dist =  length(point - s2.xyz) - s2.w;\n    float s3Dist =  length(point - s3.xyz) - s3.w;\n    float planeDist = point.y;\n    \n    // Sky - if there is no closer hit than 1 meter\n    vec2 distAndObj = vec2(MAX_DIST, -1);\n\n    // Plane\n    distAndObj = Closer(distAndObj, vec2(planeDist, 0));\n\n    // Spheres\n    distAndObj = Closer(distAndObj, vec2(s1Dist, 1));\n    distAndObj = Closer(distAndObj, vec2(s2Dist, 2));\n    distAndObj = Closer(distAndObj, vec2(s3Dist, 3));\n\n    return distAndObj;\n}\n\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = DistanceAndObject(p).x;\n    vec2 e = vec2(0.0001, 0);\n    \n    vec3 n = d - vec3(\n        DistanceAndObject(p - e.xyy).x,\n        DistanceAndObject(p - e.yxy).x,\n        DistanceAndObject(p - e.yyx).x\n    );\n    \n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 origin, vec3 direction)\n{\n    vec2 depthAndObject = vec2(0, -1);\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 point = origin  + direction * depthAndObject.x;\n        vec2 stepDistObj = DistanceAndObject(point);\n\n        depthAndObject.x += stepDistObj.x;\n        depthAndObject.y = stepDistObj.y;\n\n        if (depthAndObject.x > MAX_DIST)\n        {\n            depthAndObject.y = -1.0;\n            break;\n        }\n        else if (stepDistObj.x < SURF_DIST)\n            break;\n    }\n    \n    return depthAndObject;\n}\n\nvec3 ApplyLight(vec3 point, vec3 albedo)\n{\n    /*\n    // Point light\n    vec3 lightPos = vec3(0, 5, 2);\n    vec3 l = normalize(lightPos - point);\n    */\n    \n    vec3 n = GetNormal(point);\n    vec3 sunDir = normalize(vec3(0.8, 0.4, -0.2));\n    \n    float sunDiffuse = clamp(dot(n, sunDir), 0.0, 1.0);\n    float skyDiffuse = clamp(0.5 + 0.5 * dot(n, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n    float bouncedDiffuse = clamp(0.5 + 0.5 * dot(n, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n    \n    float d = RayMarch(point + n * 0.01, sunDir).x;\n    float sunShadow = d < MAX_DIST ? 0.1 : 1.0;\n        \n    vec3 light = vec3(7.0, 4.5, 3.0) * sunDiffuse * sunShadow;\n    light += vec3(0.5, 0.8, 0.9) * skyDiffuse; // sky is blue\n    light += vec3(0.7, 0.3, 0.2) * bouncedDiffuse; // bounced is yellow from sun\n    \n    vec3 color = albedo * light;\n\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center UV\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 rayOrigin = vec3(0.0, 1.0, 0.0); // position of the camera\n    vec3 rayDirection = normalize(vec3(uv, 1.0)); // shoot ray forward (left hand)\n    \n    vec2 depthAndObject = RayMarch(rayOrigin, rayDirection);\n    vec3 point = rayOrigin + rayDirection * depthAndObject.x;\n\n    // Sky\n    vec3 color = vec3(0.4, 0.75, 1.0) - 0.7 * uv.y;\n    color = mix(color, vec3(0.7, 0.75, 0.8), exp(-10.0 * uv.y)); // color on the horizont\n    \n    if (depthAndObject.y == 0.0) // floor\n    {\n        vec3 albedo = vec3(0.18,0.18,0.18);\n        color = ApplyLight(point, albedo);\n    }\n    else if (depthAndObject.y == 1.0) // sphere 1\n    {\n        vec3 albedo = vec3(0.18,0.05,0.1);\n        color = ApplyLight(point, albedo);\n    }\n    else if (depthAndObject.y == 2.0) // sphere 2\n    {\n        vec3 albedo = vec3(0.05,0.18,0.1);\n        color = ApplyLight(point, albedo);\n    }\n    else if (depthAndObject.y == 3.0) // sphere 3\n    {\n        vec3 albedo = vec3(0.05,0.1,0.18);\n        color = ApplyLight(point, albedo);\n    }\n    \n    color = pow(color, vec3(0.4545));\n\n    fragColor = vec4(color, 1.0);    \n}","name":"Image","description":"","type":"image"}]}