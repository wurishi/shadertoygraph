{"ver":"0.1","info":{"id":"WlccWS","date":"1609786928","viewed":59,"name":"noise2565145","username":"regis","description":"noise2565145","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","stone","ship"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat noi(vec3 p){ \n  vec3 f=floor(p),s=vec3(7,157,113);\n  p-=f; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(f,s);;\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);  \n}\n\nfloat GetDist(vec3 p, vec2 uv){\n\n\n    angle_tpos = iTime;\n    \n    vec4 s = vec4(0,20.0, 0, 2.0);\n    vec4 s2 = vec4(1.0,4.0, 0, 1);\n    \n    s.xyz=add_tpos(s.xyz);\n    s2.xyz=add_tpos(s2.xyz);\n    \n    //s.xyz=rot_y(s.xyz, angle_tpos);\n    //s2.xyz=rot_y(s2.xyz, angle_tpos);\n    \n    vec3 tx = texture(iChannel0, uv+iTime*.2+vec2(0.0, 1.0) ).rgb;\n    float d;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    //pd += p.y -  tx.g;\n     pd = pd - noi(p*15.0)*0.1-sin(p.x*2.0)*0.2-cos(p.z)*0.5+sin(p.y*2.0)*0.1;\n    \n    \n    vec3 sp = p-s.xyz;\n    //sp.y /= 1.5;\n    //sp.xz *= Rot(iTime);\n    float dep = mod(iTime*5., 4000.0);\n    if(dep < 18.0)sp.y += dep;\n    else sp.y += 18.0;\n  //  sp.xyz=rot_y(sp.xyz, angle_tpos);\n    float sd = length(sp)-s.w;\n    \n    sd -= noi(sp) - noi(sp*15.)*0.1;\n    \n    sp = p-s2.xyz;\n    sp.y /= 1.5;\n   // sp.xyz=rot_y(sp.xyz, angle_tpos);\n    float sd2 = length(sp)-s2.w;\n    \n      \n    vec3 bx = vec3(8.0, 2.0, 10.);\n    vec3 bp = p-bx;\n    vec3 sc = vec3(15.0, 3.0, 2.0);\n    \n    float dbx = sdRoundBox(bp, sc, 0.5);\n    \n    dbx -= noi(bp*1.2) - noi(sp*15.)*0.2;\n    \n    \n    vec3 b1 = vec3(-7.0, 2.0, 5.0);\n    vec3 b2 = vec3(-7.0, 2.0, -15);\n    \n    float balle = sdCylinder(p, b1, b2, 3.0);\n    \n    balle -= noi(p) - noi(sp*15.)*0.1;\n    \n    \n    /* ship */\n    vec3 bx2 = vec3(6.0, 20.0, 0.);\n    vec3 bp2 = p-bx2;\n    vec3 sc2 = vec3(2.0, 1.0, 2.0);\n    \n    dep = mod(iTime*5., 4000.0);\n    if(dep < 18.0)bp2.y += dep;\n    else bp2.y += 18.0;\n    \n    float dbv = sdRoundBox(bp2, sc2, 0.5);\n    dbv = max(dbv , -dot(bp2.xy, vec2(1.0, 1.0)));\n    \n    bx2 = vec3(10.0, 20.0, 0.);\n    bp2 = p-bx2;\n    sc2 = vec3(2.0, 1.0, 2.0);\n    \n    dep = mod(iTime*5., 4000.0);\n    if(dep < 18.0)bp2.y += dep;\n    else bp2.y += 18.0;\n  \n    float dbv2 = sdRoundBox(bp2, sc2, 0.5);\n    dbv2 = max(dbv2 , -dot(bp2.xy, vec2(-1.0, 1.0)));\n    \n    \n    float dbv3 = smin(dbv, dbv2, 0.001);\n    \n    /* 2 */\n    bx2 = vec3(6.0, 20.0, -10.);\n    bp2 = p-bx2;\n    sc2 = vec3(2.0, 1.0, 2.0);\n    \n    dep = mod(iTime*5., 4000.0);\n    if(dep < 18.0)bp2.y += dep;\n    else bp2.y += 18.0;\n    \n    dbv = sdRoundBox(bp2, sc2, 0.5);\n    dbv = max(dbv , -dot(bp2.xy, vec2(1.0, 1.0)));\n    \n    bx2 = vec3(10.0, 20.0, -10.);\n    bp2 = p-bx2;\n    sc2 = vec3(2.0, 1.0, 2.0);\n    \n    dep = mod(iTime*5., 4000.0);\n    if(dep < 18.0)bp2.y += dep;\n    else bp2.y += 18.0;\n  \n    dbv2 = sdRoundBox(bp2, sc2, 0.5);\n    dbv2 = max(dbv2 , -dot(bp2.xy, vec2(-1.0, 1.0)));\n    \n    \n    float dbv4 = smin(dbv, dbv2, 0.001);\n    \n    \n    b1 = vec3(7.0, 20.0, 2.0);\n    b2 = vec3(7.0, 20.0, -10);\n    \n    dep = mod(iTime*5., 4000.0);\n    if(dep < 18.0){\n        b1.y -= dep;\n        b2.y -= dep;\n        }\n    else{\n        b1.y -= 18.0;\n        b2.y -= 18.0;\n        \n        }\n    \n    float balle2 = sdCylinder(p, b1, b2, 0.3);\n    \n    float dd = smin(dbv3, balle2, 0.2);\n    float ddbv = smin(dd, dbv4, 0.2);\n       \n    \n    \n    d = pd;\n  \n    d = min(d, sd);\n    d = min(d, dbx);\n    d = min(d, balle);\n    d = min(d, dbv); \n    //d = min(d, dbv3); \n   // d = min(d, dbv4); \n   // d = min(d, balle2);\n    d = min(d, ddbv);\n    \n    return d;\n    \n    \n}\n\nvec2 RayMarch2(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec2 t = vec2(0., 0.);\n    float depth = 0.0, end = 10.0;\n    for (int i = 0; i < 100; i++) {\n        t.y = GetDist(eye + t.x * viewRayDirection, uv);\n        if (t.y < 0.01) {\n           return t;\n        }\n        t.x += t.y;\n\n        if (t.x >= 70.0) {\n            return t;\n        }\n    }\n    return t;\n\n\n}\n\nfloat GetLight(vec3 p, vec2 uv, vec3 lg){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    float d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    //uv -= noise(p.xz);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy, uv),\n        GetDist(p-e.yxy, uv),\n        GetDist(p-e.yyx, uv));\n    \n    n = normalize(n);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    //d = RayMarch2(p+n*.01, l, uv);\n   //if(d < length(lightpos-p))dif *= 0.1;\n    return dif ;\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    \n    \n    vec3 ro = vec3(0, 5.0, -20.);\n    ro.xz *= Rot(mod(iTime*4.0,100.0)*3.11415/180.0);\n    vec3 lookat = vec3(0.0, 1.5, 0.0);\n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n     angle_tpos = iTime;\n        \n     vec2 t;\n     float dO, dif, dif2, dif3;\n     t = RayMarch2(ro, rd, uv);\n     vec3 p = ro + rd * t.x;\n     \n     dif = GetLight(p, uv, vec3(2.0, 5, -6));\n     dif2 = GetLight(p, uv, vec3(3.0, 5, -8));\n     dif3 = GetLight(p, uv, vec3(-4.0, 5, 2.0));\n     \n     if(t.y >= 1.0){\n         col = vec3(0.0, 1.0, 1.0);\n     }\n     \n     \n     \n     \n     col += vec3(dif)*vec3(1., 0.5, 0.5);//+vec3(dif2)*vec3(1., 0.5, 0.1)+ vec3(dif3)*vec3(1., 0.5, 0.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Basic utility functions (sdfs, noises, shaping functions)\n// and also the camera setup which is shaded between the\n// background rendering code (\"Buffer A\" tab) and the character\n// rendering code (\"Image\" tab)\n\n\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin3( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*h/(6.0*k*k);\n}\n\nfloat sclamp(in float x, in float a, in float b )\n{\n    float k = 0.1;\n\treturn smax(smin(x,b,k),a,k);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opRepLim( in float p, in float s, in float lima, in float limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x-a.y*b.y; }\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus( in vec3 p, in float ra, in float rb )\n{\n    return length( vec2(length(p.xz)-ra,p.y) )-rb;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.z) ? dot(p.xz,sc) : length(p.xz);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( in vec3 p, in float r ) \n{\n    return length(p)-r;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( in vec3 p, in vec3 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec3 p, in vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min( max(max(d.x,d.y),d.z),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdArc( in vec2 p, in vec2 scb, in float ra )\n{\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k );\n}\n\n#if 1\n// http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\nvec4 sdBezier( vec3 p, vec3 va, vec3 vb, vec3 vc )\n{\n  vec3 w = normalize( cross( vc-vb, va-vb ) );\n  vec3 u = normalize( vc-vb );\n  vec3 v =          ( cross( w, u ) );\n  //----  \n  vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n  vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n  vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n  //----  \n  float mn = det(m,n);\n  float mq = det(m,q.xy);\n  float nq = det(n,q.xy);\n  //----  \n  vec2  g = (nq+mq+mn)*n + (nq+mq-mn)*m;\n  float f = (nq-mq+mn)*(nq-mq+mn) + 4.0*mq*nq;\n  vec2  z = 0.5*f*vec2(-g.y,g.x)/dot(g,g);\n//float t = clamp(0.5+0.5*(det(z,m+n)+mq+nq)/mn, 0.0 ,1.0 );\n  float t = clamp(0.5+0.5*(det(z-q.xy,m+n))/mn, 0.0 ,1.0 );\n  vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n  //----  \n  float d2 = dot(cp,cp);\n  return vec4(sqrt(d2+q.z*q.z), t, q.z, -sign(f)*sqrt(d2) );\n}\n#else\nfloat det( vec3 a, vec3 b, in vec3 v ) { return dot(v,cross(a,b)); }\n\n// my adaptation to 3d of http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\nvec4 sdBezier( vec3 p, vec3 b0, vec3 b1, vec3 b2 )\n{\n    b0 -= p;\n    b1 -= p;\n    b2 -= p;\n    \n    vec3  d21 = b2-b1;\n    vec3  d10 = b1-b0;\n    vec3  d20 = (b2-b0)*0.5;\n\n    vec3  n = normalize(cross(d10,d21));\n\n    float a = det(b0,b2,n);\n    float b = det(b1,b0,n);\n    float d = det(b2,b1,n);\n    vec3  g = b*d21 + d*d10 + a*d20;\n\tfloat f = a*a*0.25-b*d;\n\n    vec3  z = cross(b0,n) + f*g/dot(g,g);\n    float t = clamp( dot(z,d10-d20)/(a+b+d), 0.0 ,1.0 );\n    vec3 q = mix(mix(b0,b1,t), mix(b1,b2,t),t);\n    \n    float k = dot(q,n);\n    return vec4(length(q),t,-k,-sign(f)*length(q-n*k));\n}\n#endif\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegment(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegmentOri(vec2 p, vec2 b)\n{\n\tfloat h = clamp( dot(p,b)/dot(b,b), 0.0, 1.0 );\n\treturn vec2( length( p - b*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdFakeRoundCone(vec3 p, float b, float r1, float r2)\n{\n    float h = clamp( p.y/b, 0.0, 1.0 );\n    p.y -= b*h;\n\treturn length(p) - mix(r1,r2,h);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCone( in vec3 p, in vec2 c )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n\n  vec2 a = q - c*clamp( (q.x*c.x+q.y*c.y)/dot(c,c), 0.0, 1.0 );\n  vec2 b = q - c*vec2( clamp( q.x/c.x, 0.0, 1.0 ), 1.0 );\n  \n  float s = -sign( c.y );\n  vec2 d = min( vec2( dot( a, a ), s*(q.x*c.y-q.y*c.x) ),\n\t\t\t    vec2( dot( b, b ), s*(q.y-c.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n//-----------------------------------------------\n\n// ray-infinite-cylinder intersection\nvec2 iCylinderY( in vec3 ro, in vec3 rd, in float rad )\n{\n\tvec3 oc = ro;\n    float a = dot( rd.xz, rd.xz );\n\tfloat b = dot( oc.xz, rd.xz );\n\tfloat c = dot( oc.xz, oc.xz ) - rad*rad;\n\tfloat h = b*b - a*c;\n\tif( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n\treturn vec2(-b-h,-b+h)/a;\n}\n\n// ray-infinite-cone intersection\nvec2 iConeY(in vec3 ro, in vec3 rd, in float k )\n{\n\tfloat a = dot(rd.xz,rd.xz) - k*rd.y*rd.y;\n    float b = dot(ro.xz,rd.xz) - k*ro.y*rd.y;\n    float c = dot(ro.xz,ro.xz) - k*ro.y*ro.y; \n        \n    float h = b*b-a*c;\n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n    return vec2(-b-h,-b+h)/a;\n}\n\n//-----------------------------------------------\n\nfloat linearstep(float a, float b, in float x )\n{\n    return clamp( (x-a)/(b-a), 0.0, 1.0 );\n}\n\nvec2 rot( in vec2 p, in float an )\n{\n    float cc = cos(an);\n    float ss = sin(an);\n    return mat2(cc,-ss,ss,cc)*p;\n}\n\nfloat expSustainedImpulse( float t, float f, float k )\n{\n    return smoothstep(0.0,f,t)*1.1 - 0.1*exp2(-k*max(t-f,0.0));\n}","name":"Common","description":"","type":"common"}]}