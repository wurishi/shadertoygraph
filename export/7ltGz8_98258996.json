{"ver":"0.1","info":{"id":"7ltGz8","date":"1635730036","viewed":213,"name":"modern composition","username":"do","description":"composition art","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["composition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//modern composition\n//2021\n//do\n\nconst int seed = 15254;\nconst int steps = 150;\nfloat eps = 0.001;\nfloat dmin = 0.;\nfloat dmax = 50.;\nconst int aa = 2;\n \nconst int shsteps = 45; \nfloat shblur = 125.;\nfloat shmax = 10.;\n\nfloat h11(float p) {\n    uvec2 n = uint(int(p)) * uvec2(uint(int(seed)),2531151992.0);\n    uint h = (n.x ^ n.y) * uint(int(seed));\n    return float(h) * (1./float(0xffffffffU));\n}\n\nfloat h21(vec2 p) {\n    uvec2 n = uvec2(ivec2(p)) * uvec2(uint(int(seed)),2531151992.0);\n    uint h = (n.x ^ n.y) * uint(int(seed));\n    return float(h) * (1./float(0xffffffffU));\n}\n\nvec3 h33(vec3 p) {\n   uvec3 h = uvec3(ivec3(  p)) *  \n   uvec3(uint(int(seed)),2531151992.0,2860486313U);\n   h = (h.x ^ h.y ^ h.z) * \n   uvec3(uint(int(seed)),2531151992U,2860486313U);\n   return vec3(h) * (1.0/float(0xffffffffU));\n}\n\nfloat cell(vec3 x,float iterations,int type) {\n    x *= iterations;\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n \n    float min_dist = 1.0;\n    \n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            for(int k = -1; k <= 1; k++) { \n\n                vec3 b = vec3(float(k),float(j),float(i));\n                vec3 r = h33( p + b );\n                \n                vec3 diff = (b + r - f);\n\n                float d = length(diff);\n\n                    if(type == 0) { \n                        min_dist = min(min_dist,d);\n                    }\n \n                    if(type == 1) {\n                        min_dist = min(min_dist,\n                        abs(diff.x)+abs(diff.y)+abs(diff.z));\n                    }\n\n                    if(type == 2) {\n                        min_dist = min(min_dist,\n                        max(abs(diff.x),max(abs(diff.y),\n                        abs(diff.z))));\n                    }\n\n            }\n        }\n    }\n \n    return min_dist;\n}\n\nfloat n3(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 157.0 + 113.0 * p.z;\n\n    return mix(mix(mix(h11(n + 0.0), \n                       h11(n + 1.0),f.x),\n                   mix(h11(n + 157.0),\n                       h11(n + 158.0),f.x),f.y),\n               mix(mix(h11(n + 113.0), \n                       h11(n + 114.0),f.x),\n                   mix(h11(n + 270.0), \n                       h11(n + 271.0),f.x),f.y),f.z);\n}\n\nfloat f3(vec3 x,int octaves,float hurst) {\n    float s = 0.;\n    float h = exp2(-hurst);\n    float f = 1.;\n    float a = .5;\n\n    for(int i = 0; i < octaves; i++) {\n\n        s += a * n3(f * x);  \n        f *= 2.;\n        a *= h;\n    }\n    return s;\n}\n\nmat2 rot(float a) {\n\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c,-s,s,c);\n}\n\nmat3 camOrthographic(vec3 ro,vec3 ta,float r) {\n     \n     vec3 w = normalize(ta - ro); \n     vec3 p = vec3(sin(r),cos(r),0.);           \n     vec3 u = normalize(cross(w,p)); \n     vec3 v = normalize(cross(u,w));\n\n     return mat3(u,v,w); \n} \n\nvec3 rl(vec3 p,float c,vec3 l) {\n    vec3 q = p - c * clamp( floor((p/c)+0.5) ,-l,l);\n    return q; \n\n}\n\nvec2 opu(vec2 d1,vec2 d2) {\n    return (d1.x < d2.x) ? d1 : d2;\n} \n\nfloat smou(float d1,float d2,float k) {\n    float h = clamp(0.5 + 0.5 * (d2-d1)/k,0.0,1.0);\n    return mix(d2,d1,h) - k * h * (1.0 - h);\n}\n\nfloat extr(vec3 p,float d,float h) {\n    vec2 w = vec2(d,abs(p.z) - h);\n    return min(max(w.x,w.y),0.) + length(max(w,0.)); \n} \n\n \nfloat roundRect(vec2 p,vec2 b,vec4 r) {\n    r.xy = (p.x > 0.) ? r.xy : r.zw;\n    r.x  = (p.y > 0.) ? r.x  : r.y;\n    vec2 q = abs(p) - b + r.x;\n    return min(max(q.x,q.y),0.) + length(max(q,0.)) - r.x;\n}\n\nfloat arch(vec2 p,vec2 c,float r,vec2 w) {\n    p.x = abs(p.x);\n    float l = length(p);\n    p = mat2(-c.x,c.y,c.y,c.x)*p;\n    p = vec2((p.y>0.)?p.x:l*sign(-c.x),\n             (p.x>0.)?p.y:l);\n    p = vec2(p.x,abs(p.y-r))-w;\n    return length(max(p,0.)) + min(0.,max(p.x,p.y));\n}\n  \nfloat box(vec3 p,vec3 b) {\n\n    vec3 d = abs(p) - b;\n    return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat boxFrame(vec3 p,vec3 b,float e) {\n    \n    p = abs(p) - b;\n    vec3 q = abs(p+e)-e;\n    \n    return min(min(\n        length(max(vec3(p.x,q.y,q.z),0.)) +\n           min(max(p.x,max(q.y,q.z)),0.),\n        length(max(vec3(q.x,p.y,q.z),0.)) +\n           min(max(p.y,max(q.x,q.z)),0.)),\n        length(max(vec3(q.x,q.y,p.z),0.)) +\n           min(max(p.z,max(q.x,q.y)),0.));\n}\n\nfloat dodecahedron(vec3 p,float r) {\n    vec4 v = vec4(0.,1.,-1.,.5 + sqrt(1.25));\n    v /= length(v.zw);\n    \n    float d;\n    d = abs(dot(p,v.xyw))-r;\n    d = max(d,abs(dot(p,v.ywx))-r);\n    d = max(d,abs(dot(p,v.wxy))-r);\n    d = max(d,abs(dot(p,v.xzw))-r);\n    d = max(d,abs(dot(p,v.zwx))-r);\n    d = max(d,abs(dot(p,v.wxz))-r);\n    return d;\n}\n\nvec2 scene(vec3 p) {\n\n    vec2 res = vec2(1.,0.);\n\n    res = opu(res,vec2(\n        box(p+vec3(0.,.05,0.),vec3(.05)),25.));   \n\n    res = opu(res,vec2(\n      smou(length(p-vec3(1.,.25,0.))-.25,\n           box(p-vec3(1.,.1,0.),vec3(.25,.1,.25))\n           ,.1),125.));\n\n    res = opu(res,vec2(\n        extr(p.yzx,arch(-p.yz+vec2(-.1,.75) \n        ,vec2(0.,1.),.189,vec2(1e10,.005)),.075),9.));\n\n    vec3 l = p;\n    l.x -= 1.;\n    res = opu(res,vec2(\n    extr(l.yzx,arch(-l.yz+vec2(-.189,.61)\n    ,vec2(0.,1.),.11,vec2(1e10,.005)),.35),12.));\n\n    res = opu(res,vec2(\n        boxFrame(p,vec3(.125),.0125)\n        ,375.));\n\n    res = opu(res,vec2(\n        max(p.y-.5,\n        max(-extr(p,roundRect(p.xy-vec2(0.,.6),\n        vec2(1.71,.75),vec4(.1)),1e10),   \n\n        max(-extr(p,roundRect(p.xy+vec2(0.,.25),\n        vec2(.25,.05),vec4(.05)),1e10), \n\n        max(-extr(p,roundRect(p.xy+vec2(-1.,.25),\n        vec2(.5,.05),vec4(.05)),1e10),\n        p.z-.61\n        )))),23.));\n\n    float scl = .05;\n\n    vec3 q = p+vec3(1.,.1,0.);\n    q = rl(q/scl,1.5,vec3(5.,0.,0.))*scl;\n\n    q.y += smoothstep(.25,.5,sin(q.z*.25)+.05)*.25;\n    q.y += smoothstep(.5,-2.,sin(q.z*.5)+.5)*-2.;\n\n    res = opu(res,vec2(\n        max(p.z-1e10,box(q/scl,vec3(.25,.25,1e10))*scl),16.));\n    \n    vec3 e = p;\n    res = opu(res,vec2(\n    min(\n    box(e-vec3(-1.,.1,0.),vec3(.32,.1,.32)),\n    dodecahedron(e-vec3(-1.,.25,0.),.21)),252.)); \n\n    res = opu(res,vec2(    \n        max(-box(p,vec3(.33)),\n        max(-box(p+vec3(.9,-.5,0.),vec3(1.,.5,1e10)),     \n        extr(p,roundRect(p.xy,vec2(1.61,.05),vec4(.025)),.5)\n        )),13.));\n\n    return res;\n\n}\n\nvec2 rayScene(vec3 ro,vec3 rd) {\n    \n    float d = -1.0;\n    float s = dmin;\n    float e = dmax;  \n\n    for(int i = 0; i < steps; i++) {\n\n        vec3 p = ro + s * rd;\n        vec2 dist = scene(p);\n   \n        if(abs(dist.x) < eps || e <  dist.x ) { break; }\n        s += dist.x;\n        d = dist.y;\n\n        }\n \n        if(e < s) { d = -1.0; }\n        return vec2(s,d);\n\n}\n\nfloat calcAO(vec3 p,vec3 n) {\n\n    float o = 0.;\n    float s = 1.;\n\n    for(int i = 0; i < 3; i++) {\n \n        float h = .01 + .125 * float(i) / 4.; \n        float d = scene(p + h * n).x;  \n        o += (h-d) * s;\n        s *= .9;\n        if(o > .33) break;\n    \n     }\n     return clamp(1. - 3. * o ,0.0,1.0) * (.5+.5*n.y);   \n}\n\nfloat shadow(vec3 ro,vec3 rd) {\n\n    float res = 1.0;\n    float t = 0.005;\n    float ph = 1e10;\n    \n    for(int i = 0; i < shsteps; i++ ) {\n        \n        float h = scene(ro + rd * t  ).x;\n\n        float y = h * h / (2. * ph);\n        float d = sqrt(h*h-y*y);         \n        res = min(res,shblur * d/max(0.,t-y));\n        ph = h;\n        t += h;\n    \n        if(res < eps || t > shmax) { break; }\n\n        }\n\n        return clamp(res,0.0,1.0);\n\n}\n\nvec3 calcNormal(vec3 p) {\n\n    vec2 e = vec2(1.0,-1.0) * eps;\n\n    return normalize(vec3(\n    vec3(e.x,e.y,e.y) * scene(p + vec3(e.x,e.y,e.y)).x +\n    vec3(e.y,e.x,e.y) * scene(p + vec3(e.y,e.x,e.y)).x +\n    vec3(e.y,e.y,e.x) * scene(p + vec3(e.y,e.y,e.x)).x + \n    vec3(e.x,e.x,e.x) * scene(p + vec3(e.x,e.x,e.x)).x\n\n    ));\n    \n}\n\nvec3 renderScene(vec3 ro,vec3 rd) {\n \nvec2 d = rayScene(ro, rd);\n\nvec3 col = vec3(1.);\n\nif(d.y >= 0.) {\n\n    vec3 p = ro + rd * d.x;\n    vec3 n = calcNormal(p);\n\n    vec3 l = normalize(vec3(2.,5.,2.));\n\n    vec3 h = normalize(l - rd);\n    vec3 r = reflect(rd,n);\n\n    col = .5 + .25*sin(2.*d.y+vec3(2.,2.,1.));\n\n    float nl = n3(p);\n\n        nl += mix(f3(p,8,sin(col.y)),\n        0.,step(h11(23.),h11(37.)));\n\n        nl += mix(f3(p+f3(p,6,h11(111.)),4,h11(43.)),\n        0.,step(h11(161.),h11(100.)));\n\n        nl += mix(cell(p+f3(p,6,.5),12.,int(floor(h11(124.)*2.))),\n        0.,step(h11(95.),h11(235.)));\n\n    if(d.y == 23.) {\n         if(p.z > .61) {\n         col = vec3(h33(p*525.).z*2.)*1.9;\n         }\n    }\n\n    if(d.y == 12.) {\n        nl = f3(p+f3(p.xzy,8,h11(195.)),8,sin(col.y*col.x)+h11(24.5));\n        col = vec3(nl)*2.;   \n    }\n\n    if(d.y == 25.) {\n        col += vec3(2.);\n    }\n\n    float amb = clamp(0.5 + 0.5 * n.y,0.,1.);\n\n    float dif = clamp(dot(n,l),0.0,1.0);\n\n    float spe = pow(clamp(dot(n,h),0.0,1.0),16.)\n        * dif * (.04 + 0.9 * pow(clamp(1. + dot(h,rd),0.,1.),5.));\n\n    float fre = pow(clamp(1. + dot(n,rd),0.0,1.0),2.0);\n\n    float ref = smoothstep(-.2,.2,r.y);\n    float ao = calcAO(p,n);\n\n    vec3 linear = vec3(0.);\n\n    dif *= shadow(p,l);\n    ref *= shadow(p,r);\n\n    linear += dif * vec3(1.25,0.5,0.11);\n    linear += amb * vec3(0.005,0.05,0.05);\n    linear += ref * vec3(0.01,0.02,0.05)*ao;\n    linear += fre * vec3(0.025,0.043,0.035)*ao;\n    linear += spe * vec3(0.05,0.025,.05)*ao;\n\n    col = col * linear * 2.; \n    col = mix(col,vec3(1.),1.-exp(-0.00001 * d.x*d.x*d.x)); \n\n}\n\nreturn col;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n \nvec3 color = vec3(0.);\n\nvec3 ro = vec3(3.);\nvec3 ta = vec3(0.);\n\nfor(int k = 0; k < aa; ++k) {\n    for(int l = 0; l < aa; ++l) {\n\n    vec2 o = vec2(float(l),float(k)) / float(aa) - .5;\n\n    vec2 uv = (2. * (fragCoord.xy + o) -\n              iResolution.xy) / iResolution.y; \n\n    mat3 cm = camOrthographic(ro,ta,0.);\n    vec3 rd = cm * normalize(vec3(uv.xy,5.));   \n\n    vec3 col = renderScene(ro,rd);    \n\n    col = pow(col,vec3(.4545)); \n    color += col;\n    }\n}\n\ncolor /= float(aa*aa);\nfragColor = vec4(color,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}