{"ver":"0.1","info":{"id":"Dt2yWV","date":"1692308850","viewed":86,"name":"Rect Repet. - alternative","username":"timestamp","description":"My version of Edge Repeat 2D. Works in 3D as well.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","repetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// opRepRectangle alternative to https://shadertoy.com/view/ctjyWy\n// (c) timestamp @ shadertoy.com\n\n// My version of Edge Repeat 2D. Concept works in 3D.\n// Wrapper code is iq's.\n\n\n\n// Fork of \"Rectangle Repetition\" by iq. https://shadertoy.com/view/ctjyWy\n// 2023-08-17 21:40:08\n\n// The MIT License\n// Copyright Â© 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Domain repetition in the shape of an empty rectangle.\n// The basic shape SDF (rounded square in this case) is\n// evaluated only ONCE.\n//\n// IT ONLY WORKS ON SYMMETRIC SHAPES.\n//\n// Note that this is better than doing a limited repetition\n// (see https://www.shadertoy.com/view/3syGzz) and then\n// carving out its interior with a max() subtraction.\n\n\nfloat sdShape(in vec2 p);\n\n\n\nvec2 opRepRectangle( in vec2 p, in ivec2 size, in float spacing )\n{            \n    p = abs(p / spacing) - (vec2(size) * .5 - .5);\n    if(p.x < p.y) p = p.yx;\n    p.y -= min(0., round(p.y));\n    return p * spacing;\n}\n\n\nvec2 iq_opRepRectangle( in vec2 p, in ivec2 size, in float spacing )\n{\n    vec2 b = spacing*vec2(size/2);\n    p = abs(p);\n    p += spacing*0.5*vec2(1-(size&1));\n    vec2 w = p - b;\n    p -= spacing*round(min(p,b)/spacing);\n    //return p;\n    return w.x < w.y ? vec2(p.x,w.y) : vec2(w.x,p.y);\n}\n\n\n\nfloat sdSquare( in vec2 p, in float b )\n{\n    vec2  w = abs(p)-b;\n    float g = max(w.x,w.y);\n    return (g>0.0)?length(max(w,0.0)):g;\n}\n\nfloat sdShape(in vec2 p)\n{\n    return sdSquare(p,0.07)-0.05;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n\n    ivec2 size = ivec2(round(vec2(6,4) + vec2(2,1)*sin(floor(iTime/2.0)*vec2(9.7,11.1)+vec2(0,2))));\n    float rep = 0.4;\n\n    float d = sdShape( opRepRectangle(p,size,rep) );\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n  //if( d<0.0 ) { vec2 id = round(p/rep+0.5*(1.0-vec2(size&1)) ); col += sin(id.x*0.31+0.73*id.y+vec3(0,1,2)); } \n    col *= 1.0 - exp2(-16.0*abs(d));\n    col *= 0.8 + 0.2*cos(160.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(-px,px,abs(d)-0.005) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdShape( opRepRectangle(m,size,rep) );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}