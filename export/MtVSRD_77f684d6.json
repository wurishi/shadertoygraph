{"ver":"0.1","info":{"id":"MtVSRD","date":"1483397124","viewed":958,"name":"polySpline - Fabrice","username":"CPU","description":"Moving the green point fixes the glitch caused by a divide by zero in polySpline() \n\nIs there an elegant/robust fix for this?\n\ncode adapted from http://alienryderflex.com/polyspline/","likes":22,"published":1,"flags":32,"usePreview":0,"tags":["polysplineproblem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float np=6.;\nvec4 readCell(float x,float y){ return texture(iChannel0,(floor(vec2(x,y))+.5)/iResolution.xy ); }\n\n// Thanks to Fabrice Neyret - https://www.shadertoy.com/user/FabriceNeyret2\n\n#define setX(f) if (f>=0.&& f<1. && mix(mix(a.x,b.x,f),mix(b.x,c.x,f),f)<X) odd=!odd;\n\nfloat polySpline(vec2 p){ \n    bool odd = false; \n    float eps = 1e-7, root, A,B,C, X=p.x,Y=p.y;\n    vec2 a = readCell(np-1.,0.).xy;\n    for(float n=0.; n<np; n+=2.){\n        vec2 b = readCell(n,0.).xy, \n             c = readCell(n+1.,0.).xy;\n        A = a.y+c.y-b.y-b.y;\n        B = 2.*(b.y-a.y);\n        C = a.y-Y;\n        if(abs(A)<eps) {\n            setX(-C/B );\n        }\n        else {\n            float root = B*B-4.*A*C;\n            if(root>0.){\n                root=sqrt(root); \n                setX((-B-root)/(2.*A));\n                setX((-B+root)/(2.*A));\n               }\n            }\n        a = c;\n        }\n    return float(odd);\n}\n \n\n/*\n// code adapted from http://alienryderflex.com/polyspline/\nfloat polySpline(vec2 p){\n      const float eps=1e-6; \n      bool odd=false; float q=0., d=99999., root, f, top, bottom, xPart, X=p.x,Y=p.y, s=1.;\n      vec2 a=readCell(np-1.,0.).xy;\n      for(float n=0.;n<np;n+=2.){\n          vec2 b=readCell(n,0.).xy, c=readCell(n+1.,0.).xy;\n          float bottom=2.*(a.y+c.y-b.y-b.y);\n          if(abs(bottom)<eps)bottom=eps; // prevent divide by zero\n          float root=2.*(b.y-a.y); root=root*root-2.*bottom*(a.y-Y);\n          if(root>0.){\n             root=sqrt(root); top=2.*(a.y-b.y);\n             f=(top-root)/bottom; if(f>=0.&& f<1.){xPart=f*(b.x-a.x)+a.x; if((xPart+f*(b.x+f*(c.x-b.x)-xPart))<X) odd=!odd; }\n             f=(top+root)/bottom; if(f>=0.&& f<1.){xPart=f*(b.x-a.x)+a.x; if((xPart+f*(b.x+f*(c.x-b.x)-xPart))<X) odd=!odd; }\n             }\n          a=c;\n          }\n      if(odd)return 1.;else return 0.;\n      }\n*/\n\n\nvec3 hsv2rgb( in vec3 c ){\n     vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n     return c.z * mix( vec3(1.0), rgb, c.y);\n     }\n\nvec3 h2rgb(float h){\n     return clamp( abs(mod(h*6.+vec3(0,4,2),6.)-3.)-1., 0., 1. );\n     }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n     vec2 R=iResolution.xy, uv=(2.*fragCoord-R)/R.y;\n     float fw=fwidth(uv.x);   \n     vec2 fc=floor(fragCoord);\n     vec4 iv=readCell(320.,0.);\n     float d=999.; vec3 cl;\n     for(float n=0.;n<np;n++){\n         vec2 p=readCell(n,0.).xy;\n         float d2=length(p-uv); \n         if(d2<d){d=d2; cl=h2rgb(n/np);  if(iv.x>=0.&&n!=iv.y-1.)cl.rgb*=.5;  }\n         }\n    vec4 c=vec4(fragCoord/iResolution.xy,0.5+0.5*sin(iTime+2.5),1.0);  // background\n    c.rgb+=.1*polySpline(uv);\n    c.rgb=mix(c.rgb,cl,clamp(8.-d/fw,0.,1.));                  // points fill\n    c.rgb=mix(c.rgb,vec3(1,1,1),clamp(1.-abs(8.-d/fw),0.,1.)); // points stroke\n    fragColor=c;\n    }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float np=6.;\nvec4 readCell(float x,float y){ return texture(iChannel0,(floor(vec2(x,y))+.5)/iResolution.xy ); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n     vec2 fc=floor(fragCoord);\n     if(fc.y!=0.)return;\n     vec4 c=readCell(fc.x,fc.y);\n     vec4 iv=readCell(320.,0.); \n     float md=iMouse.z; if(iMouse.x==0.&&iMouse.y==0.)md=-1.;\n     bool mde=md>=0.0&&iv.x<0.;\n     vec2 R=iResolution.xy, ms=(2.*iMouse.xy-R)/R.y;\n     if(mde){ // choose point, store in iv.y\n        float d=.1; iv.y=0.;  \n        for(float n=0.;n<np;n++){ float d2=length(readCell(n,0.).xy-ms);if(d2<d){d=d2;iv.y=n+1.;}}\n        }\n     float s=2./360.; vec4 o=vec4(-1.25,-.95,0,0);\n     if(iFrame==0){ // init points\n        if(fc.x==0.  )c=vec4(200,100,0,0)*s+o;\n        if(fc.x==1.  )c=vec4(380,50,0,0)*s+o;\n        if(fc.x==2.  )c=vec4(280-60,160,0,0)*s+o;\n        if(fc.x==3.  )c=vec4(200,270,0,0)*s+o;\n        if(fc.x==4.  )c=vec4(100,200,0,0)*s+o;\n        if(fc.x==5.  )c=vec4(75,75,0,0)*s+o;\n        }     \n     if(fc.x==320.){  c=iv; }\n     if(md>0.&&iv.y-1.==fc.x)c.xy=ms; \n     if(fc.x==320.){ iv.x=md; iv.zw=iMouse.xy;  c=iv; }\n     fragColor=c;\n     }","name":"Buf A","description":"","type":"buffer"}]}