{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define M_PI 3.1415926535897932384626433832795\n\nfloat sinLerp(float x, float p) {\n\treturn sin(x / p * 2.0 * M_PI);\n}\n\nvoid waveRect(float x, float y, float w, float h, float p, float u, vec4 clr, vec2 fragCoord, out vec4 fragColor) {\n\tvec2 c = fragCoord.xy;\n\tif (c.x >= x && c.x < x + w) {\n\t\tif (c.y > y + sinLerp(c.x - x, p) * u && c.y < y + h + sinLerp(c.x - x, p) * u) {\n\t\t\tfragColor = clr;\n\t\t}\n\t}\n}\n\nvoid waveRect(float sx, float x, float y, float w, float h, float p, float u, vec4 clr, vec2 fragCoord, out vec4 fragColor) {\n\tvec2 c = fragCoord.xy;\n\tif (c.x >= x && c.x < x + w) {\n\t\tif (c.y > y + sinLerp(c.x - sx, p) * u && c.y < y + h + sinLerp(c.x - sx, p) * u) {\n\t\t\tfragColor = clr;\n\t\t}\n\t}\n}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n/*\n\tresClrs[0] = (1.0 - xp) * clrs[0] + xp * clrs[1];\n\tresClrs[1] = (1.0 - yp) * clrs[1] + yp * clrs[2];\n\tresClrs[2] = (1.0 - xp) * clrs[2] + xp * clrs[3];\n\tresClrs[3] = (1.0 - yp) * clrs[0] + yp * clrs[3];\n\t\n\tvec4 c = resClrs[0] + resClrs[1] + resClrs[2] + resClrs[3];\n\t*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec4 clrs[4];\n\tvec4 resClrs[4];\n\t\n\tclrs[0] = vec4(6.0/255.0, 57.0/255.0, 120.0/255.0, 1.0);\n\tclrs[1] = vec4(211.0/255.0, 253.0/255.0, 252.0/255.0, 1.0);\n\tclrs[2] = vec4(6.0/255.0, 57.0/255.0, 120.0/255.0, 1.0);\n\tclrs[3] = vec4(6.0/255.0, 57.0/255.0, 120.0/255.0, 1.0);\n\t\n\tfloat xp = fragCoord.x / iResolution.x;\n\tfloat yp = fragCoord.y / iResolution.y;\n\t\n\tvec4 b = (1.0 - xp) * clrs[0] + xp * clrs[1];\n\tvec4 t = xp * clrs[2] + (1.0 - xp) * clrs[3];\n\tvec4 m = (1.0 - yp) * b + yp * t;\n\t\n\tfragColor = m;\n\t\n\t// fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n\t\n\tfloat step = floor(iTime);\n\t\n\tvec2 start = vec2(rand(vec2(step, 1.0)), rand(vec2(step, 2.0)));\n\tvec2 end = vec2(rand(vec2(step + 1.0, 1.0)), rand(vec2(step + 1.0, 2.0)));\n\t\n\tstart *= iResolution.xy;\n\tend *= iResolution.xy;\n\t\n\tfloat progress = fract(iTime);\n\t\n\tvec2 res = (start * (1.0 - progress) + end * progress) * 1.0;\n\t\t\n\t\n\tfloat border = 5.0;\n\tfloat side = 50.0;\n\tfloat qSide = (side - 3.0 * border) / 2.0;\n\tfloat dy = 5.0;\n\tfloat p = side;\n\t\n\twaveRect(res.x, res.y, side, side, p, dy, vec4(0.0, 0.0, 0.0, 1.0), fragCoord, fragColor);\n\t\n\tvec2 diagMod = vec2(qSide + border, 0.0);\n\tvec2 tl = res + vec2(border, border);\n\tvec2 tr = tl + diagMod.xy;\n\tvec2 bl = tl + diagMod.yx;\n\tvec2 br = tl + diagMod.xx;\n\t\n\twaveRect(res.x, tl.x, tl.y, qSide, qSide, p, dy, vec4(0.25, 156.0/255.0, 241.0/255.0, 1.0), fragCoord, fragColor);\n\twaveRect(res.x, bl.x, bl.y, qSide, qSide, p, dy, vec4(1.0, 118.0/255.0, 40.0/255.0, 1.0), fragCoord, fragColor);\n\twaveRect(res.x, tr.x, tr.y, qSide, qSide, p, dy, vec4(1.0, 202.0/255.0, 0.0, 1.0), fragCoord, fragColor);\n\twaveRect(res.x, br.x, br.y, qSide, qSide, p, dy, vec4(79.0/256.0, 149.0/255.0, 60.0/255.0, 1.0), fragCoord, fragColor);\n\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4s2GDm","date":"1389481468","viewed":275,"name":"Windows Shader","username":"bobismijnnaam","description":"Randomly moving windows","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","logo","random","windows","square","moving","hash"],"hasliked":0,"parentid":"","parentname":""}}