{"ver":"0.1","info":{"id":"MlVGR3","date":"1475956781","viewed":224,"name":"some music tests...","username":"piotrekli","description":"trying to make a spectrogram-based music visualisation","likes":2,"published":1,"flags":96,"usePreview":0,"tags":["sound","spectrum","music","feedback","visualisation","fourier","spectrogram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = iTime + fragCoord.y/iResolution.y;\n    float k = 2.0*cos(a);\n    float l = 1.3*sin(a);\n\tfloat r = texture(iChannel0, (fragCoord+vec2(0, 0)) / iResolution.xy).x;\n    float g = texture(iChannel0, (fragCoord+vec2(k, l)) / iResolution.xy).x;\n    float b = texture(iChannel0, (fragCoord+vec2(l, k)) / iResolution.xy).x;\n\tfragColor = 1.0 - abs(vec4(-r+g+b, r-g+b, r+g-b, 0.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdSGR3","filepath":"https://soundcloud.com/vindsvept/hugins-flight","previewfilepath":"https://soundcloud.com/vindsvept/hugins-flight","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI atan(0.0, -1.0)\n#define E exp(1.0)\n\nfloat hann(float t)\n{\n    return (1.0-cos(2.0*PI*t))*0.5;\n}\n\nfloat signal(float t)\n{\n    return hann(t)*(texture(iChannel1, vec2(t, 0.75)).x-0.5);\n}\n\nvec2 fourier(float angfreq)\n{\n    const float sampleTime = 1.0/512.0;\n    vec2 dz = vec2(cos(sampleTime*angfreq), sin(sampleTime*angfreq));\n    vec2 ft = vec2(0.0); // the Fourier transform\n    vec2 z = vec2(1.0, 0.0);\n    for (float t=0.0; t<1.0; t+=sampleTime)\n    {\n        ft += signal(t)*z;\n        z = vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y+z.y*dz.x);\n    }\n    return ft;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if (fragCoord.x+1.0 >= iResolution.x)\n    {\n        float freq = pow(200.0, uv.y);\n        //float freq = uv.y*200.0;\n        vec2 ft = fourier(freq*2.0*PI);\n        float h = ((pow(dot(ft, ft), 0.03)-0.6)/0.5)-(1.0-uv.y)*0.9;\n        h = max(h, 0.0);\n        fragColor = vec4(vec3(h), 1.0);\n    }\n    else\n        fragColor = texture(iChannel0, uv+vec2(ceil(60.0*iTimeDelta)/iResolution.x, 0.0));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float cv(vec2 fragCoord, float val, float d)\n{\n    float vt = texture(iChannel0, (fragCoord+vec2(-d, 0))/iResolution.xy).x;\n    return (val+vt)*(val-vt);\n}\n\nfloat hImage(vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float val = texture(iChannel0, uv).x;\n    if (iMouse.z <= 0.0)\n    {\n        float c = 20.0;\n        c *= max(cv(fragCoord, val, 20.0)-0.0, 0.0);\n        c *= max(cv(fragCoord, val, 9.0)-0.0, 0.0);\n        val = c;\n    }\n    val *= 1.2;\n\treturn clamp(val, 0.0, 1.2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n    float h = hImage(fragCoord+vec2(0.0, 10.0*cos(t)));\n    h = hImage(fragCoord+vec2(3.0*h*sin(t), -4.0*cos(t)));\n\tfragColor = vec4(mix(texture(iChannel1, uv).x, h, 0.5-hImage(vec2(iResolution.x, fragCoord.y))));\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvh = fract(uv*2.0 + vec2((1.0-uv.x)*texture(iChannel0, uv).x*0.2, 0.0));\n\tfragColor = abs(texture(iChannel1, uvh)-texture(iChannel0, uv));\n}","name":"Buf C","description":"","type":"buffer"}]}