{"ver":"0.1","info":{"id":"XXK3zG","date":"1717960033","viewed":35,"name":"light in ","username":"nnew","description":"copypast from ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["light","color","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define resolution iResolution.xy\n#define time iTime\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 n) {\nreturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat sdBox(vec3 p, vec3 b) {\nvec3 q = abs(p) - b;\nreturn length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat sdLink(vec3 p, float le, float r1, float r2) {\nvec3 q = vec3(p.x, max(abs(p.y) - le, 0.), p.z);\nreturn length(vec2(length(q.xy) - r1, q.z)) - r2;\n}\n\nfloat smoothing = 0.1201;\n\n// 04\nfloat stroke(float x, float s, float w){\n    float d = smoothstep(s, s+smoothing, x+w*.5) - smoothstep(s, s+smoothing, x-w*.5);\n    return clamp(d, 0., 1.);\n}\n\n// 08\nfloat circleSDF(vec2 st) {\n    return length(st-.5)*2.;\n}\n\n// 09\nfloat fill(float x, float s){\n    return 1.-smoothstep(s, s+smoothing, x);\n}\n\n// 10\nfloat rectSDF( vec2 st, vec2 s){\n    st = st*2.-1.;\n    return max(abs(st.x/s.x), abs(st.y/s.y));\n}\n\n// 12\nfloat flip(float v, float pct){\n    return mix(v, 1.-v, pct);\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n// 27\nfloat hexSDF(vec2 st){\n    st = abs(st*2.-1.);\n    return max(abs(st.y), st.x * 0.866025 + st.y*0.5);\n}\n\nfloat draw0(vec2 uv, float a, float d, float time){\n    float col = 0.;\n    float sTime = time*6.28;\n   \n    // The Emperor\n    vec2 st = vec2(sin(a), cos(a))*(d*(1.1+sin(sTime+a)*.1))+.5;\n    float sdf = rectSDF(st, vec2(1.));\n    col += stroke(sdf, .6, .125);\n    col += fill(sdf, min(mod(time, 2.),1.)*.5375);    \n    col += fill(sdf, min(mod(time, 2.)-1.,1.)*.5375);    \n    col += fill(sdf, .1);\n\n    // Merge\n    st = uv;\n    vec2 offset = vec2(sin(sTime), cos(sTime))*(pow(cos(sTime)*.5+.5, 1.5)*.2);\n    float left = circleSDF(st+offset);\n    float right = circleSDF(st-offset);\n    col += flip(stroke(left, .5, .05), fill(right, .52));\n   \n    // Bundle\n    st = uv.yx;\n    col += stroke(hexSDF(st), .5+cos(sTime)*.2, .1);\n    //st = vec2(sin(a-sTime), cos(a-sTime))*d+.5;\n    float amp = sin(sTime);\n    amp = pow(abs(amp), .6)*sign(amp);\n    amp*=1.5;\n    col += fill(hexSDF(st-vec2(-.06, -.1)*amp), .15);\n    col += fill(hexSDF(st-vec2(-.06, .1)*amp), .15);\n    col += fill(hexSDF(st-vec2(.11, 0.)*amp), .15);\n   \n    col = abs(mod(col+1., 2.)-1.);\n    return col;\n}\nfloat hit(vec3 p) {\np.yz *= rot(radians(30.));\np.zx *= rot(time * .5);\n    p.yx *= rot(time * .5);\nfloat db = sdLink(p.xzy, .25, .5, .25);\nfloat dl = sdLink(p, .5, .5, .25);\nfloat h = 2. - step(0., db) - step(0., dl);\nfloat t = mod(floor(time), 3.);\nif (t == 0.) return min(h, 1.);\nif (t == 1.) return mod(h, 2.);\nreturn h;\n}\n\n#define ITER 100.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\nvec2 uv = (gl_FragCoord.xy * 2. - resolution) / resolution.y;\n    vec2 uv2 = (gl_FragCoord.xy * 2. - resolution) / resolution.y;\nvec3 rd = vec3(uv, 4);\nvec3 ro = vec3(0, 0, -6.+.1*rand(uv+time));\nfloat bright;\n\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n   \n    uv*=1.25;\n    uv+=.5;\n    float a = atan(uv.y-.5, uv.x -.5);\n    float d = length(uv-.5);\n    float time = iTime*.25;\n    float sTime = time*6.28;\n    vec4 col = vec4(0., 0., 0., 1.);\n   \n    for(float i = -10.; i< 10.; i++){\n        float t = i*(sin(uv.x*10.+sTime+uv.y*2.+cos(uv.y*5.+sTime)*2.+sin(uv.x*3.-sTime))*.5+.5)*.01;\n        col += vec4(draw0(uv, a, d, time-.01+t),\n                    draw0(uv, a, d, time+t),\n                    draw0(uv, a, d, time+.01+t),\n                    1.);\n    }\n    col/=20.;\nfor (float i = 0.; i < ITER; i++) {\nbright += hit(ro + rd * (1. + i / ITER));\n}\nfragColor = vec4(vec3(1, 1, 2)*col.xyz * (bright * .03), 1);\n   fragColor+= vec4(happy_star(uv2, anim) * vec3(0.55,0.52,0.55)*0.1, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}