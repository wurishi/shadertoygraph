{"ver":"0.1","info":{"id":"MsGyzw","date":"1521418205","viewed":108,"name":"roundedRect","username":"matkatmusic","description":"issues abound when gradient > radius","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float roundedBox(vec2 point, vec2 rectBounds, float radius) \n{ \n\treturn length(max (abs(point) - rectBounds + radius, 0.0)) - radius; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /*\n\tthese are the uniforms passed in from my openGL app\n\t*/\n    //float desktopScale = 3.3;\n\tvec2 bounds = fragCoord;\n    vec4 innerColor = vec4(0,1,1,1);\n    vec4 outerColor = vec4(1,1,0,1);\n\tbool hollow = true; \n\tfloat roundedBoxWidth = 10.0; //in terms of windowWidth\n\tfloat roundedBoxHeight = 10.0; //gap from walls on y axis\n\tfloat gradient = 10.0; //width of gradient in terms of window bounds\n\tfloat radius = 10.0; //radius of corners\n    \n    /*\n\there's the shader code\n\t*/\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 normalizedFragCoord = fragCoord/iResolution.xy;\n\t//float ratio = bounds.y / bounds.x;\n    //float ratio = iResolution.y / iResolution.x;\n\t//vec2 p = normalizedFragCoord * 2.0 - 1.0; //change normalized pixel coord range from [0,1] to [-1,1]\n\t//p.y *= ratio; //remove y-axis scaling from normalizing\n    // Output to screen\n    \n    vec4 col; \n\tfloat d = roundedBox(fragCoord, vec2(bounds.x * 0.5 + roundedBoxWidth, \n                                         bounds.y * 0.5 + roundedBoxHeight ), radius); //distance from rounded rect bounds\n    \n    if( hollow == false )\n\t{\n\t\tcol = sqrt(mix(innerColor*innerColor, outerColor*outerColor, smoothstep(0., gradient, d ) ));\n\t}\n\telse\n\t{\n\t\tif( abs(d) < gradient ) \n    \t{\n        \tif( d == 0. )\n        \t{ \n            \tcol = innerColor;   //purple \n        \t}\n       \t \telse\n        \t{\n            \tcol = sqrt(mix(innerColor*innerColor, outerColor*outerColor, smoothstep(0., gradient, abs(d)) ));\n        \t}\n    \t}\n        else\n        {\n            col = outerColor; //yellow\n        }   \n\t}\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}