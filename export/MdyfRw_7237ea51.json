{"ver":"0.1","info":{"id":"MdyfRw","date":"1527969122","viewed":869,"name":"DXT1 corruption","username":"yx","description":"Experiment with creating the distinctive \"interpreting garbage data as a DXT-compressed texture\" corruption aesthetic.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["noise","corruption"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define CHEAP\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iChannelResolution[0].xy;\n    \n    uv *= .5;\n    \n    // read block endpoint colors\n    vec3 c1 = texture(iChannel0, uv*.25).rgb;\n    vec3 c2 = texture(iChannel0, uv*.25+.5).rgb;\n    \n    // read per-texel weight\n    float w = texture(iChannel0, uv).r;\n  \n#if !defined(CHEAP)\n    // slightly more accurate at the cost of extra ALU work\n    \n    // optionally quantize colors to 565 precision\n    c1 = floor(c1*vec3(31.99,63.99,31.99))/vec3(31,63,31);\n    c2 = floor(c2*vec3(31.99,63.99,31.99))/vec3(31,63,31);\n    \n    // optionally quantize weight to a 3-or-4-entry index table\n    w = c1.r > c2.r ? floor(w*3.99)/3. : floor(w*2.99)/2.;\n#endif\n    \n\t// mix and return    \n    fragColor.rgb = mix(c1,c2,w);\n}\n\n// minified (112 chars)\n/*\n#define t texture\n#define T iChannel0\n#define mainImage(c,f) vec2 u=f/2048.;c=mix(t(T,u),t(T,u+.5),t(T,u*4.).r);\n*/","name":"Image","description":"","type":"image"}]}