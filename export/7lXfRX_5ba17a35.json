{"ver":"0.1","info":{"id":"7lXfRX","date":"1651189379","viewed":47,"name":"Fading Effect","username":"lunar","description":"some random procedural effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// random functions from https://www.shadertoy.com/view/slfGWX\nvec2 hash( vec2 p ) {\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n    //The output must be between 0.0 and 1.0\n\treturn -1.0 + 2.0*fract(sin(p) * 43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y) * K1 );\n\n    vec2 a = p - i + (i.x+i.y) * K2;\n    vec2 o = step(a.yx,a.xy);\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n}\n\nfloat swirl(in float r, in float theta)\n{\n    return .5 * sin(6. * cos(r) + 4. * theta) + .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // if you want to blend with some extra texture\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n\n    // generate noise with wave motions\n    vec2 noiseUv = fragCoord * .01 + vec2(-2.* iTime, 0.03 * sin(.2 * fragCoord.x) + iTime);\n    float w = noise(noiseUv);\n    float dw = length(fragCoord - vec2(.75, .5) * iResolution.xy);\n    \n    // generate swirl with noises\n    vec2 centerCoord = fragCoord - vec2(.25, .5) * iResolution.xy + 25. * noise(fragCoord * .015);\n    float theta = atan(centerCoord.y, centerCoord.x);\n    float ds = length(centerCoord);\n    float s = swirl(ds * 0.02, theta + iTime);\n    \n    //result with swirl function\n    float sa = min(1., (150. - 20. * s - ds) * 0.03);\n    \n    //result with wave function\n    float wa = min(1., (150. - 20. * w - dw) * 0.03);\n\n    // Output to screen\n    fragColor = max(vec4(sa), vec4(wa));\n}","name":"Image","description":"","type":"image"}]}