{"ver":"0.1","info":{"id":"XffyWr","date":"1720980707","viewed":66,"name":"Crystal IFS","username":"uk0141","description":"crystal-like","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ifs","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN .001\n#define TMAX 200.\n#define EPS .001\n#define ITR 256.\n#define ID_NONE -1.\n#define ID_CENTER 1.\n#define ID_BOX 1.2\n#define ID_BOX2 1.3\n#define ID_BOX3 1.4\n#define mouseX 360.*iMouse.x/iResolution.x\n#define mouseY 360.*iMouse.y/iResolution.y\n\nmat2 rot(float t){\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\n\nfloat sdBox(in vec3 p, in vec3 box) {\n   vec3 d = abs(p) - box;\n   return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nvec2 intersect(vec3 p, float t){\n    vec2 res = vec2(ID_NONE, 20.);\n    vec2 obj;\n    \n    vec3 p_o = p;\n    \n    for(int i = 0;i <2;i++){\n        p = abs(p)-2.1;\n        p.xy = rot(-3.18)*p.xy;\n        \n        p = abs(p)-1.13;\n        p.yz = rot(-2.)*p.yz;\n        p = abs(p)-0.72;\n        p.xz = rot(-3.8)*p.xz;\n       \n        p *= 1.62;\n    }\n    obj = vec2(ID_CENTER, sdBox(p,1.3*vec3(1., .5, .5)));\n    if(obj.y < res.y)res = obj;\n    \n    p = p_o;\n    for(int i = 0;i <1;i++){\n        p = abs(p)-8.9;\n        p.xy = rot(iTime*.2)*p.xy;\n        \n        p = abs(p)-2.13;\n        p.yz = rot(iTime*.3)*p.yz;\n        p = abs(p)-.72;\n        p.xz = rot(-3.8)*p.xz;\n       \n        p *= 1.62;\n    }\n    obj = vec2(ID_BOX, sdBox(p,1.3*vec3(1., .5, .5)));\n    if(obj.y < res.y)res = obj;\n    \n    p = p_o;\n    if(t > 30.){\n        for(int i = 0;i <3;i++){\n            p = abs(p)-13.1;\n            p.xy = rot(-1.38)*p.xy;\n\n            p = abs(p)-8.13;\n            p.yz = rot(-2.)*p.yz;\n            p = abs(p)-2.7;\n            p.xz = rot(-2.8)*p.xz;\n\n            p *= 1.;\n        }\n        obj = vec2(ID_BOX2, sdBox(p,1.3*vec3(1., .5, .5)));\n        if(obj.y < res.y)res = obj;\n    }\n    \n    p = p_o;\n    if(t > 30.){\n        for(int i = 0;i <2;i++){\n            p = abs(p)-18.1;\n            p.xy = rot(-3.18)*p.xy;\n\n            p = abs(p)-8.13;\n            p.yz = rot(-2.)*p.yz;\n            p = abs(p)-3.7;\n            p.xz = rot(-3.8)*p.xz;\n\n            p *= .8;\n        }\n        obj = vec2(ID_BOX3, sdBox(p,1.3*vec3(1., .5, .5)));\n        if(obj.y < res.y)res = obj;\n    }\n\n\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 0.,28.);\n    ro.xz = rot(radians(iTime*4.1+mouseX))*ro.xz;\n    vec3 rd = vec3(p, -1.5);\n    rd.xz = rot(radians(iTime*4.1+mouseX))*rd.xz;\n    //rd.zy = rot(radians(mouseY))*rd.zy;\n    rd = normalize(rd);\n    \n    vec3 ray;\n    float t = TMIN;\n    vec3 col = vec3(0.);\n    \n    for(float i = 0.;i < ITR;i++){\n        ray = ro+rd*t;\n        vec2 obj = intersect(ray, t);\n        if(obj.x == ID_CENTER){\n            if(obj.y < EPS){\n                col += .48*vec3(.08 , .15, .22)*i;\n                break;\n            }\n        }else if(obj.x == ID_BOX){\n            if(obj.y < EPS){\n                col += .51*vec3(.23 , .15, .1)*i/t*16.;\n                break;\n            }\n        }else if(obj.x == ID_BOX2){\n            if(obj.y < EPS){\n                col += .019*vec3(.16 , .12, .11)*i;\n                break;\n            }\n        }else if(obj.x == ID_BOX3){\n            if(obj.y < EPS){\n                col += .025*vec3(.2 , .08, .01)*i;\n                break;\n            }\n        }\n       \n       \n  \n        \n        if(t > TMAX)break;\n        t += .7*obj.y;\n    }\n\n    // Time varying pixel color\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}