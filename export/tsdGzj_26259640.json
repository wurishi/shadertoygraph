{"ver":"0.1","info":{"id":"tsdGzj","date":"1569099610","viewed":85,"name":"Another raymarching project","username":"Itig","description":"Yup, another one of these","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 10.\n#define EPSILON .01\n\nstruct Ray {\n    vec3 pos;\n    vec3 dir;\n    float dist;\n};\n\nstruct Shape {\n\tvec3 pos;\n    float radius;\n};\n\nstruct RayHit {\n\tRay ray;\n    Shape shape;\n};\n    \nRay rayFromAngle(vec2 angles) {\n    vec2 sinF = sin(angles);\n    vec2 cosF = cos(angles);\n    vec3 dir = vec3(\n        sinF.y * cosF.x,\n        sinF.y * sinF.x,\n        cosF.y\n    );\n    \n    //ray pos is where the camera is\n    return Ray(vec3(0.), dir, 0.);\n}\n\nRay rayFromAngleEx(vec2 fragCoord, vec2 size, float fov) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fov) / 2.0);\n    return Ray(vec3(0.), normalize(vec3(xy, -z)), 0.);\n}\n    \nfloat sdf(Shape s, vec3 pos) {\n    return length(s.pos-pos) - s.radius;\n}\n\nfloat sdfScene(vec3 pos) {\n    Shape s = Shape(vec3(0., 0., -5.), 1.);\n    return sdf(s, pos);\n}\n\nvec3 normal(Shape s, vec3 pos) {\n    return normalize(pos-s.pos);\n}\n\nvec3 normalScene(vec3 pos) {\n    Shape s = Shape(vec3(0., 0., -5.), 1.);\n    return normal(s, pos);\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nvec3 rayMarch(Ray ray) {\n    while(ray.dist <= MAX_DIST) {\n        float dis = sdfScene(ray.pos);\n        if(dis <= EPSILON) {\n            vec3 lightPos = vec3(0., 5., 0.);\n            vec3 lightDir =  normalize(lightPos - ray.pos);\n            \n            float doot = dot(lightDir, normalScene(ray.pos));\n            doot /= 2.;\n            doot += .5;\n            return vec3(1., 1., 0.)*doot;\n        }\n        ray.dist += dis;\n        ray.pos += dis * ray.dir;\n    }\n    return vec3(0.);\n}\n            \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    vec3 uv3d = vec3(uv.x, 0., uv.y);\n    \n    vec3 originPoint = vec3(0., 0., 0.);\n    \n    vec3 dir = normalize(uv3d/originPoint);\n    \n    //Ray ray = rayFromAngle(uv * fov);\n    Ray ray = rayFromAngleEx(fragCoord, iResolution.xy, 45.);\n    //Ray ray = Ray(vec3(0.), dir, 0.);\n    \n    // Time varying pixel color\n    vec3 col = rayMarch(ray);\n    //col = ray.dir;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}