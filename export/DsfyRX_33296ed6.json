{"ver":"0.1","info":{"id":"DsfyRX","date":"1687033904","viewed":153,"name":"Asahi illusion","username":"altunenes","description":"Accidentally, while experimenting with shader code during my daily learning session, I discovered a visual illusion similar to the Asahi illusion. :D\nLook at the center, when the surrounding petals are colorful, the center looks brighter. :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["illusion","perception"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Disclaimer: My intention was not create this illusion; so, sorry for the mess :((((\n\nconst float PI = 3.14159265;\n\nmat2 rotate2D(float r) {\n    return mat2(cos(r), -sin(r), sin(r), cos(r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = ((fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x)*2.0) * 0.5;\n\n    vec2 c = vec2(3.8 * atan(iTime), 3.5 * atan(iTime)); \n    vec2 z = uv;\n    int iterations = 1;\n    int maxIterations = 100;\n\n    vec2 n = vec2(0);\n    vec2 N = vec2(0);\n    float S = 15.0;\n    mat2 m = rotate2D(sin(iTime)*PI);\n\n    for (int i = 0; i < maxIterations; ++i) {\n        vec2 zSquared = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y);\n        vec2 zCubed = vec2(zSquared.x*z.x - zSquared.y*z.y, zSquared.x*z.y + zSquared.y*z.x);\n        vec2 denominator =(zCubed + c);\n        \n        if (length(denominator) != 0.0) {\n            z = zSquared / denominator;\n        } else {\n            z = zSquared;\n        }\n\n        for (int j = 0; j < 5; ++j) {\n            float zr = log(abs(z.y));\n            float zi = log(abs(z.x));\n            z = vec2(zr, zi);\n        }\n\n        if (length(z) > 0.8) break;\n        iterations++;\n\n        z *= m;\n        n *= m;\n        N += z/S;\n        S *= 20.3; //accident occurred this line :)))), reduce this to understand what actually working on :D \n    }\n\n    float fractal = float(iterations) / float(maxIterations);\n    // from my previous shader https://www.shadertoy.com/view/dslyDH :\n\n    float pulse =  sin(1.5 * PI * iTime) + 2.5; // adjust this value \n    vec3 colorOffset = vec3(0.5 * sin(n.x), 0.5 * sin(n.y), 4.1 * cos(n.x)); \n    vec3 flowColorChange = vec3(1.5 * cos(1.0*iTime + N.x), 1.5 * sin(1.0*iTime + N.y), \n    0.1 * cos(3.0*iTime + N.y));\n    vec3 flowIntensity = vec3(0.003/length(0.04*N),1, 1);\n    vec3 color = (pulse * vec3(3.5, 3.0, 0.1)  + \n    colorOffset + flowColorChange + flowIntensity) * \n    ((1.0*N.x +1.0*N.y + 0.01)+.001/length(1.0*N));\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}