{"ver":"0.1","info":{"id":"ssyBzh","date":"1657645623","viewed":144,"name":"twirly tunnel","username":"rodgzilla","description":"A tunnel made of multiple bent cylinders.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tunnel","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define ZPOS -10. + 1. * time\n#define PI acos(-1.)\n\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat cyl(vec3 p, vec3 c){\n  return length(p.xy - c.xy) - c.z;\n}\n\n\nvec3 glow = vec3(0, 0, 0);\nfloat at = 0.;\n\nfloat map(vec3 p) {\n    float s = 1.;\n    float d = p.y + s;\n    d = min(d, s - p.y);\n    d = min(d, p.x + s);\n    d = min(d, s - p.x);\n    \n    vec3 pc1 = p;\n    vec3 pc2 = p;\n    vec3 pc3 = p;\n    vec3 pc4 = p;\n    \n    pc1.xy *= rot2d(cos(p.z * .9));\n    pc2.xy *= rot2d(sin(p.z * .8));\n    pc3.xy *= rot2d(-sin(p.z * .7));\n    pc4.xy *= rot2d(-cos(p.z * .5));\n    \n    vec3 offset = vec3(0, .5, 0);\n    float radius = .007;\n    float m = 50.;\n    \n    for (float i = 0.; i < m; i++) {\n        vec3 pc = p;\n        pc.xy *= rot2d(PI * cos(pc.z * (i / m)));\n        vec3 oc = offset;\n        oc.xy *= rot2d(2. * PI * (i / m));\n        float c = cyl(pc - oc, vec3(0, 0, radius));\n        d = min(d, c);\n    }\n\n    at += 1. / (d * 3.1);\n \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0., ZPOS);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n  rd.xy *= rot2d(time * .1);\n\n  float d = 0.;\n  vec3 glow = vec3(0);\n\n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n    d += ds * 1.;\n    glow += .005 * at * vec3(\n      .75,\n      .33, \n      .4\n    );\n  }\n  \n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - \n    vec3(\n      map(p - e.xyy),\n      map(p - e.yxy),\n      map(p - e.yyx)\n    )\n  );\n\n  vec3 lp = ro;\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  float dif = dot(tln, n);\n  \n  col = 1.5 * vec3(dif);\n  col = dif * glow;\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}