{"ver":"0.1","info":{"id":"ss33D7","date":"1629961720","viewed":235,"name":"3D Bézier Curve","username":"wylm","description":"3D Bézier Curve, evaluating surface position.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["beziercurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define E 2.718281828459\n\n#define SAMPLE_SIZE 20\n\nfloat t(){\n    return pow(E,-1. * pow(2. * cos(iTime),2.));\n}\n\nfloat line(vec2 uv, vec3 p1, vec3 p2){\n    float k = (p1.y-p2.y)/(p1.x-p2.x);\n    float b = p1.y - k * p1.x;\n    return k*uv.x + b - uv.y;\n}\n\nvec3 line_pos(float t, vec3 b0, vec3 b1, vec3 b2){\n    return (1.-t)*(1.-t)*b0 + 2.*t*(1.-t)*b1 + t*t*b2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.8);\n    \n    \n    vec3 b0 = vec3(0.25 + 0.1 * sin(iTime),0.25 + 0.1 * sin(iTime),0.5);\n    vec3 b1 = vec3(0.8,0.5+ 0.1 * t(),0.7);\n    vec3 b2 = vec3(1.15 + 0.1 * sin(iTime),0.15 + 0.1 * sin(iTime),0.9);\n    \n    vec3 b3 = vec3(0.5,0.75,-0.1);\n    vec3 b4 = vec3(1.05,0.85 + 0.1 * t(),0.);\n    vec3 b5 = vec3(1.4,0.6,0.1);\n    \n    vec3 b6 = vec3(0.7,0.6 + 0.1 * sin(iTime),-0.9);\n    vec3 b7 = vec3(1.15,0.65+ 0.1 * t(),-0.7);\n    vec3 b8 = vec3(1.5 + 0.1 * cos(iTime),0.4 + 0.1 * cos(iTime),-0.5);\n    \n    //draw line\n    float d = abs(line(uv,b0,b1));\n    if(d < 0.005 && uv.x>b0.x && uv.x<b1.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b1,b2));\n    if(d < 0.005 && uv.x>b1.x && uv.x<b2.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b3,b4));\n    if(d < 0.005 && uv.x>b3.x && uv.x<b4.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b4,b5));\n    if(d < 0.005 && uv.x>b4.x && uv.x<b5.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b6,b7));\n    if(d < 0.005 && uv.x>b6.x && uv.x<b7.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b7,b8));\n    if(d < 0.005 && uv.x>b7.x && uv.x<b8.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b0,b3));\n    if(d < 0.005 && uv.x>b0.x && uv.x<b3.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b3,b6));\n    if(d < 0.005 && uv.x>b3.x && uv.x<b6.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b1,b4));\n    if(d < 0.005 && uv.x>b1.x && uv.x<b4.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b4,b7));\n    if(d < 0.005 && uv.x>b4.x && uv.x<b7.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b2,b5));\n    if(d < 0.005 && uv.x>b2.x && uv.x<b5.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b5,b8));\n    if(d < 0.005 && uv.x>b5.x && uv.x<b8.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    // draw point\n    float ps = 0.02;\n    float r = length(uv-b0.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b1.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b2.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b3.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b4.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b5.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b6.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b7.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b8.xy);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    // traverse y axis\n    float pm = 1./float(SAMPLE_SIZE);\n    for(int i = 0; i<=SAMPLE_SIZE; i+=1){\n        vec3 c0 = line_pos(pm*float(i), b0, b3, b6);\n        vec3 c1 = line_pos(pm*float(i), b1, b4, b7);\n        vec3 c2 = line_pos(pm*float(i), b2, b5, b8);\n        \n        // traverse x axis\n        for(int j = 0; j<=SAMPLE_SIZE; j+=1){\n            vec3 p = line_pos(pm*float(j), c0, c1, c2);\n            r = length(uv-p.xy);\n            if(r< 0.2 * ps){\n                col *= mix(col, vec3(0.1,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n            }\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}