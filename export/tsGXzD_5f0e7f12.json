{"ver":"0.1","info":{"id":"tsGXzD","date":"1573527909","viewed":317,"name":"Stellar window inverted","username":"Kanata","description":"i implemented negative powers of complex numbers and inverted Stellar window.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["math","mathematics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 u )\n{\n    vec2 res = iResolution.xy,\n          z = ( u* 2. - res) / min(res.x, res.y);\n\n    float t = iTime;\n    float scale = 2.;\n    z *= scale;\n    \n    vec2 a = vec2(sin(t), cos(t));\n    vec2 b = vec2(1., 0.);\n    vec2 c = vec2(0., 1.);\n    vec2 d = vec2(1., 0.);\n    vec2 e = vec2(sin(t* 2.), cos(t* 2.));\n    \n    vec2 f = cpow(z, -100) + cmul(a, cpow(2.* im(z), 4)) + cmul(b, cpow(z, 3))\n                     + cmul(c, cpow(z, 2)) + cmul(d, cpow(re(z), 1)) + e;\n\n    float theta = (atan(f.x, f.y) + PI) / (2.* PI) * 360.;\n    float r = length(f);\n\n    O = vec4(hsvToRgb(theta, (sin(t* 1.2)* 0.3 + 0.3)/r, 1./r), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI  = 3.141592653589793;\n\nvec2 cmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 re(in vec2 a) {\n    return vec2(a.x, 0);\n}\n\nvec2 im(in vec2 a) {\n    return vec2(0, a.y);\n}\n\nvec2 conj(in vec2 a) {\n    return vec2(a.x, -a.y);\n}\n\nvec2 cinv(in vec2 a) {\n    return vec2(conj(a))/ dot(a, a);\n}\n\nvec2 cpow(in vec2 a, in int n) {\n    vec2 z = vec2(1, 0);\n    \n    if (n < 0) {\n        n *= -1;\n        a = cinv(a);\n    }\n        \n    for (int i = 0; i < n; i++) {\n        z = cmul(z, a);\n    }\n    return z;\n}\n\nvec3 hsvToRgb(float h, float s, float v) {\n    // h: 0.0 - 360.0, s: 0.0 - 1.0, v: 0.0 - 1.0\n    float c = s; // float c = v * s;\n    float h2 = h / 60.0;\n    float x = c * (1.0 - abs(mod(h2, 2.0) - 1.0));\n    vec3 rgb = (v - c) * vec3(1.0, 1.0, 1.0);\n\n    if (0.0 <= h2 && h2 < 1.0) {\n        rgb += vec3(c, x, 0.0);\n    } else if (1.0 <= h2 && h2 < 2.0) {\n        rgb += vec3(x, c, 0.0);\n    } else if (2.0 <= h2 && h2 < 3.0) {\n        rgb += vec3(0.0, c, x);\n    } else if (3.0 <= h2 && h2 < 4.0) {\n        rgb += vec3(0.0, x, c);\n    } else if (4.0 <= h2 && h2 < 5.0) {\n        rgb += vec3(x, 0.0, c);\n    } else if (5.0 <= h2 && h2 < 6.0) {\n        rgb += vec3(c, 0.0, x);\n    }\n\n    return rgb;\n}\n// hsvToRgb borrowed from \n// https://qiita.com/sw1227/items/4be9b9f928724a389a85","name":"Common","description":"","type":"common"}]}