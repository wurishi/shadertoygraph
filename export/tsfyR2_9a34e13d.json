{"ver":"0.1","info":{"id":"tsfyR2","date":"1585137237","viewed":72,"name":"Simple raymarcher with patterns","username":"mothman","description":"simple raymarcher scene with patterns.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["simple","raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DISTANCE 100.0\n#define SURFACE_DIST 0.01\n#define THRESHOLD 0.01\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\nfloat GetDist(vec3 p, out int id)\n{\n    float d = 0.0;\n    vec4 c = vec4(0.0,1.0,6.0,1.0);\n    float circ = length(p-c.xyz)-c.w;\n    float plane = p.y+1.0; \n    float plane2 = sdPlane(p,vec4(1,0,0,10));\n    float plane3 = sdPlane(p,vec4(0,0,-1,15));\n    float minval = min(min(min(plane,plane3),plane2),circ);\n    if(minval <= SURFACE_DIST)\n    {\n        if(minval == circ) id = 1;\n        if(minval== plane) id = 2;\n        if(minval== plane2) id = 3;\n        if(minval == plane3) id = 4;\n        \n    }\n    return minval;\n}\nfloat RayMarch(vec3 ro, vec3 rd,out int id){\n    float d = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        p  = ro + rd*d;\n        float dS = GetDist(p,id);\n        d += dS;\n        if(dS < SURFACE_DIST || d > MAX_DISTANCE) break;\n    }\n    return d;\n}\nvec3 GetNormal( vec3 p){\n   vec3 norm = vec3(0);\n   vec2 e = vec2(0.01,0.0);\n   int id = 0;\n   float d = GetDist(p,id);\n   norm = vec3(d) - vec3( GetDist(p-e.xyy,id),GetDist(p-e.yxy,id),GetDist(p-e.yyx,id));\n   return normalize(norm);\n}\nfloat Light(vec3 p)\n{\n    vec3 lightPos = vec3(2.*sin(iTime),5. , 6.+2.*cos(iTime));\n    vec3 ray = normalize(lightPos-p);\n    vec3 norm = GetNormal(p);\n    float dif = max(dot(norm,ray ),0.);\n    int id = 0;\n    float d = RayMarch(p+norm*SURFACE_DIST*2.,ray,id);\n    if( d < length(lightPos-p)) dif = dif*0.1;\n    return dif;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n   vec3 ro = vec3(0.0,1.0,0.0);\n   vec3 rd = normalize(vec3(uv,1.0));\n   int id = 0;\n   float d = RayMarch(ro,rd,id);\n   vec3 p = ro  + d*rd;\n   float dif = Light(p);\n   vec3 color = vec3(dif);\n   if(id >1)\n    color = 0.5 + 0.5*cos(iTime+normalize(p.xyz)+vec3(0,2,3));\n    \n   color*=dif;\n   fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}