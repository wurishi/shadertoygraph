{"ver":"0.1","info":{"id":"Nd3cR4","date":"1653045724","viewed":65,"name":"noise learning - Cross the World","username":"Cavers","description":"fbm noise, visualize normal...\nlike land, can be used to genertate random map","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define delta 0.0001\n\nfloat differentiate(float t0,float v0,float v1){\n   float t1 = t0 + delta;\n   float val0 = (v0-v1)*(2.0*t0*t0*t0-3.0*t0*t0);\n   float val1 = (v0-v1)*(2.0*t1*t1*t1-3.0*t1*t1);\n   return (val1 - val0)/delta;\n}\n\n// by @morimea\nfloat hash(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat remap(float t){\n    return -2.0*t*t*t + 3.0*t*t;\n    //return sin(t);\n}\n\nvec3 getNormal(vec2 p){\n    vec3 normal = vec3(0.0);\n    \n    //v0  v1\n    //v2  v3\n    float Amplify = 1.0; \n    float offset = 4.0;\n    for(int i=0;i<5;i++){\n        vec2 base = floor(p*offset);\n        vec2 t = fract(p*offset);\n        vec2 cood0 = base;\n        vec2 cood1 = base + vec2(1.0,0.0);\n        vec2 cood2 = base + vec2(0.0,1.0);\n        vec2 cood3 = base + vec2(1.0,1.0);\n        \n        float val0 = hash(cood0)*Amplify;\n        float val1 = hash(cood1)*Amplify;\n        float val2 = hash(cood2)*Amplify;\n        float val3 = hash(cood3)*Amplify;\n\n        float top = mix(val0,val1,remap(t.x));\n        float bot = mix(val2,val3,remap(t.x));\n        float lef = mix(val0,val2,remap(t.y));\n        float rig = mix(val1,val3,remap(t.y));\n\n        vec3 d_x = vec3(delta,.0,differentiate(t.x,lef,rig));\n        vec3 d_y = vec3(delta,.0,differentiate(t.y,top,bot));\n        normal += cross(d_x,d_y);\n        Amplify /= 2.0;\n        offset *= 2.0;\n    }\n\n    return normalize(normal);\n}\n\n//67 142 219\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // strench the canvas\n    uv.y /= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    float tim = iTime * 0.05;\n    \n    vec3 n = getNormal(uv+tim);\n    \n    vec3 col = n;\n    col = cross(col,vec3(67.0/255.0,142.0/255.0,219.0/255.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}