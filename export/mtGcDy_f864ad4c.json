{"ver":"0.1","info":{"id":"mtGcDy","date":"1700593667","viewed":85,"name":"spiral moving in space","username":"nayk","description":"tal, space, stars, vr, galaxy","likes":4,"published":1,"flags":1,"usePreview":0,"tags":["fractal","space","galaxy","shader","stars","new","vr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/tddXWH*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\n#define PI 3.14159265359\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\nfloat rand(vec2 n)\n{\n    return fract(sin(dot(n, vec2(591.32,391.32))));\n}\nfloat rand(vec3 n)\n{\n    return fract(sin(dot(n, vec3(591.32,391.32,623.54))));\n}\n\nvec2 rand2(in vec2 p)\n{\n\treturn fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n}\n\nconst float voronoiRandK = 0.8;\n\nvec3 voronoi3(in vec2 x, out vec4 cellCenters)\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\n\tvec2 i1 = vec2(0.0);\n\tvec2 i2 = vec2(0.0);\n\tvec3 res = vec3(8.0);\n\tfor(int j = -1; j <= 1; j ++)\n\t{\n\t\tfor(int i = -1; i <= 1; i ++)\n\t\t{\n\t\t\tvec2 b = vec2(i, j);\n\t\t\tvec2 r = vec2(b) - f + rand2(p + b) * voronoiRandK;\n\n\t\t\t//float d = max(abs(r.x), abs(r.y));\n\t\t\tfloat d = (abs(r.x) + abs(r.y));\n\n\t\t\tif (d < res.x)\n\t\t\t{\n\t\t\t\tres.z = res.y;\n\t\t\t\tres.y = res.x;\n\t\t\t\tres.x = d;\n\t\t\t\ti2 = i1;\n\t\t\t\ti1 = p + b;\n\t\t\t}\n\t\t\telse if (d < res.y)\n\t\t\t{\n\t\t\t\tres.z = res.y;\n\t\t\t\tres.y = d;\n\t\t\t\t//r2 = r;\n\t\t\t\ti2 = p + b;\n\t\t\t}\n\t\t\telse if (d < res.z)\n\t\t\t{\n\t\t\t\tres.z = d;\n\t\t\t}\n\t\t}\n\t}\n\tcellCenters = vec4(i1,i2);\n\treturn res;\n}\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat orderedRand(float x, float y) {\n\treturn rand(dot(x > y ? vec2(y,x) : vec2(x,y), vec2(123.23,532.12)));\n}\nvec2 rotate2(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n             p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 0.07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\tvec2 suv = uv;\n\tuv*=5.;\n\n\n\tfloat t2 = iTime * 1.1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 0.07)) * 2.2;\n\tfloat si2 = sin(t2);\n\tfloat co2 = cos(t2);\n    mat2 ma2 = mat2(co2, si2, -si2, co2);\n    \tdir.xy*= ma2;\ndir.x+=iTime*0.2;\ndir.y+=abs(cos(-iTime*0.2));\nuv*=ma2;\nuv.x+=iTime*0.2;\n\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n   \n\n\t//  first wire\n\tfloat scale = 4.;\n\tfloat width = 0.6;\n\tvec4 cellCenters;\n\tvec3 vr = voronoi3(uv * scale + 10.0, cellCenters);\n\tfloat d = vr.y - vr.x;\n\tif (vr.z - vr.y < width && vr.y - vr.x < width)    //connections between cell corners\n\t\td = max(width - (vr.z - vr.y), d);\n\tvec2 cellHashes = vec2(rand(cellCenters.xy), rand(cellCenters.zw));\n    \n\tfloat wire = cubicPulse(width, 0.01, d);\n\n\t//  light\n\tfloat lightX = (rotate(uv, PI/8.).x+iTime*0.5)*5.;\n\tfloat lightHash1 = rand(floor(lightX));\n\tfloat lightValue1 = fract(lightX);\n\tlightX = (rotate(uv, PI*5./8.).x+iTime*0.2)*5.;\n\tfloat lightHash2 = rand(floor(lightX)+0.5);\n\tfloat lightValue2 = fract(lightX);\n\tlightX = (rotate(uv, PI*9./8.).x+iTime*0.2)*5.;\n\tfloat lightHash3 = rand(floor(lightX)+0.5);\n\tfloat lightValue3 = fract(lightX);\n\tlightX = (rotate(uv, PI*13./8.).x+iTime*0.2)*5.;\n\tfloat lightHash4 = rand(floor(lightX)+0.5);\n\tfloat lightValue4 = fract(lightX);\n\tfloat light = 0.;\n\tfloat lightFrequency = 0.002;\n\tif (rand(vec3(cellHashes.xy,lightHash1)) < lightFrequency)  light =  wire*cubicPulse(0.5,0.25,lightValue1)*3.;\n\tif (rand(vec3(cellHashes.xy,lightHash2)) < lightFrequency)  light += wire*cubicPulse(0.5,0.25,lightValue2)*3.;\n\tif (rand(vec3(cellHashes.xy,lightHash3)) < lightFrequency)  light += wire*cubicPulse(0.5,0.25,lightValue3)*3.;\n\tif (rand(vec3(cellHashes.xy,lightHash4)) < lightFrequency)  light += wire*cubicPulse(0.5,0.25,lightValue4)*3.;\n\n\t//  second parallel wire\n\tif ((cellHashes.x - cellHashes.y) > 0.0)  {\n\t\tfloat w = cubicPulse(width-0.1, 0.06, d);\n\t\twire += w;\n\t}\n\n\t//  background wire layer\n\tscale *= 0.04;\n\tvec3 vr2 = voronoi3(uv  + 1.0, cellCenters);\n\td = vr2.y - vr2.x;\n\tif (vr2.z - vr2.y < width && vr2.y - vr2.x < width)    //connections between cell corners\n\t\td = max(width - (vr2.z - vr2.y), d);\n\tcellHashes = vec2(rand(cellCenters.xy), rand(cellCenters.zw));\n\tfloat backWire = cubicPulse(width, 0.06, d);\n\tif ((cellHashes.x - cellHashes.y) > 0.0)  {\n\t\tfloat w = cubicPulse(width-0.1, 0.06, d);\n\t\tbackWire += w;\n\t}\n\twire = max(wire, backWire * 1.1);\n\twire = wire * .4 + light*5.1;\n\t//  some background noise\n\twire += vr.x*1.3 + 0.3;\n\n    vec3 colo = clamp(vec3(0.3, 0.5, 1.0)+wire , vec3(1.0)*wire, vec3(1.));\n\tcolo *= 0.7;\n\t\n\tdir*=colo;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    \nfragColor*=vec4(colo,1.);\n     \n}\n","name":"Image","description":"","type":"image"}]}