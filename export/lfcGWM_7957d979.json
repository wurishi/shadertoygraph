{"ver":"0.1","info":{"id":"lfcGWM","date":"1711810344","viewed":48,"name":"PointSources","username":"berke","description":"A rotating square displaying an interference pattern.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["wave","interference","3dplot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 400\n#define MAX_D 30.0\n#define EPS 1e-3\n#define MAX_HEIGHT 1.0\n#define B 3.0\n\n#define M_PI 3.141592653589793238462643383279502884\n\nfloat g(vec2 x,float t,float k,float w) {\n  float a = 100.0;\n  float r = length(x);\n  float s = r/a;\n  return (1.0+cos(k*r-w*t))/(2.0+s*s);\n}\n\nfloat f(vec2 x,float t) {\n  return g(x - vec2(200,300),iTime,0.1,5.0)\n    + g(x - vec2(-150,100),iTime,0.05,10.0)\n    + g(x - vec2(100,-200),iTime,0.2,7.0);\n}\n\nconst float focal = 70.0; // mm\nconst float delta = 0.025; // mm\n\nvoid test_pattern(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 x = fragCoord - iResolution.xy/2.0;\n    float z = f(x - vec2(0.2,0.3),iTime) + f(x - vec2(-0.5,0.1),iTime);\n    vec3 col = z*vec3(1.0,0.0,0.0);\n    fragColor = vec4(col,1.0);\n}\n\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n  vec3 vv = normalize(vec3(delta*(fragCoord - iResolution.xy/2.0),focal));\n  float theta = 0.25*(1.0+cos(0.5*iTime)); // 45.0/180.0*M_PI;\n  float phi = -0.5-0.5*(1.0+cos(1.5*iTime)); // 45.0/180.0*M_PI;\n  if (iMouse.z > 0.0) {\n    theta = -2.0*M_PI * iMouse.x / iResolution.x;\n    phi = 2.0*M_PI * iMouse.y / iResolution.y;\n  }\n  mat3 M1 = transpose(mat3(cos(theta),0.0,sin(theta),\n                    0,1,0,\n                    -sin(theta),0.0,cos(theta)));\n  mat3 M2 = transpose(mat3(1.0,0.0,0.0,\n                           0.0,cos(phi),sin(phi),\n                           0.0,-sin(phi),cos(phi)));\n  mat3 M = M1*M2;\n  vec3 u = M*vec3(1,0,0);\n  vec3 v = M*vec3(0,1,0);\n  vec3 w = M*vec3(0,0,1);\n  float c = 3.0;\n  vec3 p0 = vec3(0,0,-(15.0));\n  vec3 col = vv;\n  col = vec3(0,0,0);\n  float lambda = 1.0;\n  bool cont = true;\n  for (int i = 0; cont && i < MAX_ITER; i ++) {\n    if (abs(lambda) > MAX_D) {\n        break;\n    }\n    vec3 p = lambda*vv;\n    vec2 x = vec2(dot(p - p0,u),dot(p - p0,v));\n    float z = 0.2*f(250.0*x,iTime);\n    float s = dot(p - p0,w) - z;\n    if (s < EPS) {\n        if (max(abs(x.x),abs(x.y)) < 2.0) {\n            col = 15.0*z*vec3(1,0.5,0.25) + vec3(0.2,0.2,0.2);\n        }\n        break;\n    }\n    if (abs(s) < MAX_HEIGHT) {\n      lambda -= s/B;\n    } else {\n      lambda -= s;\n    }\n  }\n  fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}