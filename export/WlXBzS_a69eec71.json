{"ver":"0.1","info":{"id":"WlXBzS","date":"1596973832","viewed":346,"name":"Glowing neon rectangles","username":"pixeljig","description":"-There are 6 empty rectangles on the scene\n-Each line in a rectangle is constructed from smoothstep functions to achieve glow effect\n-Each rectangle is built from two rectangles: wide glow + small strength; narrow glow + big strength","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["glow","rectangle","neon","empty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nMIT LICENSE\nCopyright 2020 Ahmed Harmouche\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec4 rectangle(vec3 color, vec2 pos, vec4 rect, float thickness, float strength) {\n    float glow = 0.0;\n\tfloat width = rect.z;\n    float height = rect.w;\n    float difX = pos.x - rect.x;\n    float difY = pos.y - rect.y;\n    vec4 col = vec4(0.0);\n    \n    if (difX > 0.0 && difX < width) {\n        glow = smoothstep(rect.y - thickness, rect.y, pos.y) - smoothstep(rect.y, rect.y + thickness, pos.y);\n        col += vec4(glow*color, 1.0);\n        glow = smoothstep(rect.y + height - thickness, rect.y + height, pos.y) - smoothstep(rect.y + height, rect.y + height + thickness, pos.y);\n        col +=vec4(glow*color, 1.0);\n    }\n    \n    if (difY > 0.0 && difY < height) {\n        glow = smoothstep(rect.x - thickness, rect.x, pos.x) - smoothstep(rect.x, rect.x + thickness, pos.x);\n        col += vec4(glow*color, 1.0);\n        glow = smoothstep(rect.x + width - thickness, rect.x + width, pos.x) - smoothstep(rect.x + height, rect.x + height + thickness, pos.x);\n        col +=vec4(glow*color, 1.0);\n    }\n    \n    return col*strength;\n}\n\nconst int RECT_COUNT = 6;\nvec3 neonPurple = vec3(99.0/255.0,36.0/255.0,177.0/255.0);\nvec3 neonBlue = vec3(21.0/255.0, 47.0/255.0, 203.0/255.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 initRectPos = vec2(0.1);\n    float rectStep = 0.05;\n    float rectSelect = 0.0;\n    fragColor = vec4(0.0);\n    \n    for (int i = 0; i < RECT_COUNT; i++) {\n        vec2 rectPos = initRectPos + vec2(float(i)*rectStep);\n        float width = 1.0 - 2.0*rectPos.x;\n        vec4 rect = vec4(rectPos.x, rectPos.y, width, width);\n        vec3 rectColor = vec3(0.0);\n        float strengthMul = 1.0;\n        float rand = random(vec2(iTime));\n        rectSelect = mod(iTime*5.0, 6.0);\n        \n        if (int(rectSelect) == i) {\n            rectColor = neonPurple;\n            strengthMul = 1.5;\n        } else {\n            rectColor = neonBlue;\n        }\n        \n        \n        if (rand < 0.7*strengthMul) {\n            rand = 0.7*strengthMul;\n        } else if (rand > 0.9) {\n            rand = 0.7*strengthMul + 0.002;\n        }\n        \n        fragColor += rectangle(rectColor, uv, rect, 0.025*strengthMul, rand);\n        fragColor += rectangle(rectColor, uv, rect, 0.002, 1.5*strengthMul);\n    }\n}","name":"Image","description":"","type":"image"}]}