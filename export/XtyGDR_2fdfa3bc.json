{"ver":"0.1","info":{"id":"XtyGDR","date":"1474296185","viewed":930,"name":"IFS_Tree_01","username":"EvilRyu","description":"Just have fun","likes":19,"published":3,"flags":0,"usePreview":0,"tags":["2d","ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by evilryu\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define PI ( (asin(1.)*(sqrt(5.)*.5-.5)*2.718281828) + cos(iTime/8.0)*0.5)\n//#define PI (asin(1.)*(sqrt(5.)*.5-.5)*2.718281828)\n#define PI 3.1415926535\n\nmat3 m_rot(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3( c, s, 0, -s, c, 0, 0, 0, 1);\n}\nmat3 m_trans(float x, float y)\n{\n    return mat3(1., 0., 0., 0., 1., 0, -x, -y, 1.);\n}\nmat3 m_scale(float s)\n{\n    return mat3(s, 0, 0, 0, s, 0, 0, 0, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 pos = (fragCoord.xy - iResolution.xy*.5) / iResolution.yy;\n   \n    pos*=6.0;\n    pos.y+=1.9;\n   \tvec3 p = vec3(pos, 1.);\n    float d = 1.0;\n    float iter = mod(floor(iTime), 20.0);\n    float len = fract(iTime);\n    for(int i = 0; i < 20; ++i)\n    {\n        if(i<=int(iter+0.5))\n        {\n            d=min(d,(length(max(abs(p.xy)-vec2(0.01,1.0), 0.0)))/p.z);\n            p.x=abs(p.x);\n        \tp=m_scale(1.22) * m_rot(0.25*PI) * m_trans(0.,1.) * p;\n        }\n        else\n        {\n            d=min(d,(length(max(abs(p.xy)-vec2(0.01,len), 0.0)))/p.z);\n        }\n    }\n    d=smoothstep(0.1, 0.15,d);\n\tfragColor = vec4(d,d,d,1.);\t\n}","name":"Image","description":"","type":"image"}]}