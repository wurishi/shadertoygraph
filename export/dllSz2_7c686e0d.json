{"ver":"0.1","info":{"id":"dllSz2","date":"1675249437","viewed":171,"name":"hex coords 916467329","username":"HaleyHalcyon","description":"ss","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TURN = 2. * acos(-1.);\nconst float SQRT3 = pow(3., 0.5);\n#define ROT(theta) mat2(cos(theta+vec4(0,-TURN,TURN,0)/4.))\n#define HEX(x) (vec3((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n\nfloat hexaxis(vec2 uv) {\n    uv.x = abs(1. - 2. * fract(uv.x / SQRT3)) - 0.5;\n    float yf = 6. * fract(uv.y / 3.);\n    return (1. + \n    + step( uv.x, yf - 5.5)\n    + step(-uv.x, yf - 2.5)\n    + floor(uv.y / 3.) * 2.\n    );\n}\n\nfloat rangemap(float minv, float maxv, float x) {\n    if (minv == maxv) {return step(minv, x);}\n    return clamp((x - minv) / (maxv - minv), 0., 1.);\n}\n\nvec3 color(float v) {\n    vec3 col0 = HEX(0x000000);\n    vec3 col1 = HEX(0xFF66FF);\n    vec3 col2 = HEX(0x8000C0);\n    vec3 col3 = HEX(0x300060);\n    \n    float value0 = rangemap(0.0, 0.25, v);\n    float value1 = rangemap(0.25, 0.5, v);\n    float value2 = rangemap(0.5, 0.75, v);\n    float value3 = rangemap(0.75, 1.0, v);\n    \n    return\n    col0 * (value3 - value0 + 1.) +\n    col1 * (value0 - value1) +\n    col2 * (value1 - value2) +\n    col3 * (value2 - value3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime / 2.);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.yy;\n    const float SCALE = 24.;\n\n    float hexaxis0 = hexaxis(SCALE * uv);\n    float hexaxis1 = hexaxis(SCALE * uv * ROT(TURN / 3.));\n    \n    vec2 uvH = ((\n        hexaxis0 * vec2(-1., SQRT3)\n    ) + (\n        hexaxis1 * vec2(-2., 0.)\n    ) + vec2(16., -9.) /8.\n    ) / SCALE; \n      \n    // debug uv output\n    //vec3 col = vec3(fract(uvH), step(length(uv), 0.05));\n    //vec3 col = vec3(fract(length(2. * uvH) + t + 0. * atan(uvH.y, uvH.x) / TURN)); col.b = step(length(uv), 0.05);\n    \n    vec2 polar = vec2(\n        log2(length(uvH) + 0.2),\n        atan(uvH.y, uvH.x) / TURN\n    );\n    \n    float v = fract(\n      1.0 * polar.x +\n      2. * polar.y +\n      2. * t\n    );\n    \n    vec3 col = color(v);\n    \n    float w = smoothstep(0.5, 1.0, fract(0.5 * polar.x - 7. * t));\n    w *= w;\n    col = col * (1. + w * 0.5) + w * 0.2;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}