{"ver":"0.1","info":{"id":"XljSD3","date":"1446927958","viewed":427,"name":"Resonant Lowpass Sawtooth","username":"metabog","description":"Tried to implement a truncated IIR resonant filter and some squelchy sawtooths. Work in progress. ","likes":16,"published":1,"flags":8,"usePreview":0,"tags":["filter","audio","iir"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; \n    if (int(uv.y)==1) i=  626348112/bit; \n    if (int(uv.y)==0) i= 1735745872/bit; \n \treturn float(i-2*(i/2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = (vec4(uv,0.5+0.5*sin(iTime),1.0)*sin(uv.x*10.0 + iTime)*cos(uv.y*15.0) + 1.0)*\n        \t\t(vec4(uv,0.5+0.2*cos(iTime),1.0)*cos(uv.x*2.0 - iTime)*cos(uv.y*3.0 + iTime*2.5) + 1.0) * 0.5;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"none","wrap":"none","vflip":"false","srgb":"false","internal":"none"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"none","wrap":"none","vflip":"false","srgb":"false","internal":"none"},"published":1}],"outputs":[{"id":"XsfGRr","channel":0}],"code":"float a = pow(2.0,(1.0/12.0));\n\n#define maxTaps 128\n\nfloat getNote(float n)\n{\n    return 100.0 * pow(a,n);\n}\n\nfloat Hash( float n )\n{\n\treturn fract( (1.0 + cos(n)) * 415.92653);\n}\n\n//we can use jitter for analog driftness\nfloat genSaw(float time, float freq, bool useJitter)\n{\n    float jitter1 = 0.0;\n    float jitter2 = 0.0;\n\n    if(useJitter)\n    {\n      jitter1 = texture(iChannel0, vec2(time,0.2)*0.01).x;\n      jitter2 = texture(iChannel0, vec2(time-0.01,0.2)*0.01).x;\n    }\n    \n    float val = fract(time*(freq + (jitter1+jitter2)*0.2));\n    return val;\n}\n\nfloat genNiceSaw(float time, float freq, bool useJitter)\n{\n    return (genSaw(time,freq,useJitter) - 0.5) * 2.0;\n}\n\n/* Reso lowpass saw... truncated IIR #yoloswag */\nfloat resoLpSaw(float time, float freq, float fa)\n{\n    \n    fa= sqrt(fa);\n\tfloat reso = 0.1;   \n    float c = pow(0.5, (128.0-fa*128.0)   / 16.0);\n  \tfloat r = pow(0.5, (reso*128.0+24.0) / 16.0);\n    \n    float v0,v1;\n    v0 = 0.0;\n    v1 = 0.0;\n    \n    for(int i = 0; i < maxTaps; i++)\n    {\n          float history = float(maxTaps-i)*(1.0/44100.0);\n\n          float t = time - history;\n          float inp = genNiceSaw(t,freq,false);\n          v0 =  (1.0-r*c)*v0  -  (c)*v1  + (c)*inp;\n  \t\t  v1 =  (1.0-r*c)*v1  +  (c)*v0;\n    }\n    \n    return v1;\n}\n\n\nfloat gain(float inp, float g)\n{\n    return inp*g;\n}\n\n\nfloat SIDLead(float time, float freq)\n{    \n    return resoLpSaw(time,freq,0.9) + (1.0 - resoLpSaw(time,freq+0.6,0.9));\n}\n\nfloat ftom(float note)\n{\n    return 440.0 * pow(2.0,((note-24.0)/12.0));\n}\n\nconst float cps = 1.0;\nfloat patt[8];\n\nvoid initPatt()\n{\n    patt[0] = 0.0;\n    patt[1] = 7.0;\n    patt[2] = 12.0;\n    patt[3] = 0.0; \n    patt[4] = 7.0;\n    patt[5] = 3.0;\n    patt[6] = 7.0;\n    patt[7] = 3.0;\n}\n\nfloat decay = 0.25;\n\nvec2 mainSound( in int samp,float time)\n{\n    \n    initPatt();\n    \n    float cf = abs(cos(time));\n\n    \n    float pulse = mod(time,1.0);\n    float wave = 0.0;\n        \n    for(int i =0; i<8; i++)\n    {\n        float localPulse = float(i)/8.0;\n        if(localPulse<pulse)\n        {   \n            float rfreq = ftom(mod(patt[i],12.0));\n            wave += resoLpSaw(time,rfreq,cf) *  (clamp(pulse-localPulse,0.0,decay)/0.25 - 1.0);\n        }\n    }\n    \n    return vec2(wave,wave);\n}","name":"Sound","description":"","type":"sound"}]}