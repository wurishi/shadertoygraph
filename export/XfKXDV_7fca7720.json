{"ver":"0.1","info":{"id":"XfKXDV","date":"1715796439","viewed":47,"name":"Mandelbulb Blue Light","username":"elifront","description":"3d Mandelbulb with Blue Light","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","mandelbulb","blue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/\nconst float EPSILON = 0.001;\nconst int MAX_STEPS = 80;\nconst float BASE_BAILOUT = 2.0;\nconst int BASE_ITERATIONS = 20;\nconst float BASE_POWER = 8.0;\n\nfloat DE(vec3 z, float bailout, int iterations, float power) {\n    vec3 c = z;\n    float dr = 1.0;\n    float r = 0.0;\n\n    for (int i = 0; i < iterations; i++) {\n        r = length(z);\n        if (r > bailout) break;\n\n        // Convert to polar coordinates\n        float theta = acos(z.z / r);\n        float phi = atan(z.y, z.x);\n        float zr = pow(r, power - 1.0);\n        dr = pow(r, power - 1.0) * power * dr + 1.0;\n\n        // Scale and rotate the point\n        float sinTheta = sin(theta * power);\n        z = zr * vec3(sinTheta * cos(phi * power), sinTheta * sin(phi * power), cos(theta * power));\n\n        // Add the original point\n        z += c;\n    }\n    return 0.5 * log(r) * r / dr;\n}\n\nvec3 getNormal(vec3 p, float bailout, int iterations, float power) {\n    float x = DE(vec3(p.x + EPSILON, p.y, p.z), bailout, iterations, power) - DE(vec3(p.x - EPSILON, p.y, p.z), bailout, iterations, power);\n    float y = DE(vec3(p.x, p.y + EPSILON, p.z), bailout, iterations, power) - DE(vec3(p.x, p.y - EPSILON, p.z), bailout, iterations, power);\n    float z = DE(vec3(p.x, p.y, p.z + EPSILON), bailout, iterations, power) - DE(vec3(p.x, p.y, p.z - EPSILON), bailout, iterations, power);    \n    return normalize(vec3(x, y, z));\n}\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(\n        oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,\n        oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,\n        oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 0, -3); // Ray origin\n    vec3 rd = normalize(vec3(uv * 0.5, 1)); // Ray direction\n\n    float time = iTime; // Get the current time\n\n    // Rotate the camera\n    mat3 rot = rotationMatrix(vec3(0, 1, 0), time * 0.1);\n    ro = rot * ro;\n    rd = rot * rd;\n\n    // Animate Mandelbulb constants with smoother changes\n    float bailout = BASE_BAILOUT + sin(time * 0.5) * 0.5; // Smoother, subtle changes\n    int iterations = int(float(BASE_ITERATIONS) + sin(time * 0.5) * 5.0); // Smoother, subtle changes\n    float power = BASE_POWER + sin(time * 0.5) * 3.0; // Smoother, subtle changes\n\n    vec3 col = vec3(0.0);\n    float t = 0.0;\n    int i = 0;\n    vec3 p;\n    \n    // Raymarching\n    for (i = 0; i < MAX_STEPS; i++) {\n        p = ro + rd * t;\n        float d = DE(p, bailout, iterations, power);\n        if (d < EPSILON * 10.0 || t > 100.0) break;\n        t += d;\n    }\n    \n    if (i < MAX_STEPS) {\n        // Calculate normal and lighting\n        vec3 normal = getNormal(p, bailout, iterations, power);\n        vec3 lightDir = normalize(vec3(0.5, 0.5, -1.0));\n        float diff = clamp(dot(normal, lightDir), 0.0, 1.0);\n        \n        // Color based on normal and distance\n        vec3 baseColor = vec3(0.2, 0.4, 0.8);\n        vec3 lightColor = vec3(1.0, 0.9, 0.8);\n        col = mix(baseColor, lightColor, diff) * (1.0 - float(i) / float(MAX_STEPS));\n    } else {\n        col = vec3(0.0); // Background color\n    }\n\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}