{"ver":"0.1","info":{"id":"4cGGzt","date":"1713123396","viewed":66,"name":"Rotational 2D Double Repetition","username":"Imagyx","description":"Extending the rotational repetition by allowing an additional repetition in radial direction.\n\nThank you iq for your helpful, inspiring and comprehensive article on domain repetition. As I said before, this is so useful.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","domainrepetition","repetition","symmetry","angular","rotational"],"hasliked":0,"parentid":"XtSczV","parentname":"Rotational/Angular Repetition"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original License: \n    // The MIT License// Copyright Â© 2017 Inigo Quilez\n    // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define DEBUG\n#define MULTI_REPETITION\n#define DIFFERENT_SIZES_RADIAL\n\nfloat idR, idC; // These could be used for coloring or anything else outside of the repetition method\n\n// Simple sphere with size depending on copy id (or not for debugging purposes)\nfloat sdf(in vec2 p){\n    #ifdef DEBUG\n    return length(p) - 0.25;\n    #else\n    float d = length(p) - (idC + 1.0) * 0.05;\n    #ifdef DIFFERENT_SIZES_RADIAL\n    d -= idR * 0.05;\n    #endif\n    return d;\n    #endif\n}\n\n/* base circular repetition from iq with my extension\n@param p: point in 2D\n@param n: number of copies in the circular direction\n@param gap: distance between the copies in the radial direction\n@param begin: > 0; the innermost copy (0 would be in the center, which breaks when different copies for each id are used)\n@param end: > begin; defines the last copy index in radial direction\n*/\nfloat rotationalMultiRepetition(in vec2 p, in float n, in float gap, in float begin, in float end){\n    float b = 6.283185 / n;\n    float a = atan(p.y, p.x);\n    float i = floor(a / b);\n    float d = 1e16;\n    for(float j = 0.0; j < 2.0; j += 1.0){\n        idC = mod(i + j, n);\n        float c = b * idC;\n        vec2 q = mat2(cos(c), -sin(c), sin(c), cos(c)) * p;\n        // q is now in circular space, now add limited copies in each \"piece of cake\" ;-)\n        float i2 = round(q.x / gap);\n        float off = sign(q.x - gap * i2);\n        for(float l = 0.0; l < 2.0; l += 1.0){\n            idR = clamp(i2 + l * off, begin, end);\n            float qx = q.x - gap * idR;\n            d = min(d, sdf(vec2(qx, q.y)));\n        }\n    }\n    return d;\n}\n\n// Added with for-loop and mod-function for testing purposes\nfloat rotationalRepetition(in vec2 p, in float n){\n    float b = 6.283185 / n;\n    float a = atan(p.y, p.x);\n    float i = floor(a / b);\n    float d = 1e16;\n    for(float j = 0.0; j < 2.0; j += 1.0){\n        idC = mod(i + j, n);\n        float c = b * idC;\n        vec2 q = mat2(cos(c), -sin(c), sin(c), cos(c)) * p;\n        q.x -= 2.0;\n        d = min(d, sdf(q));\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 C, in vec2 xy){\n\tvec2 p = (2.0 * xy - iResolution.xy) / iResolution.y;\n    p *= 3.0;\n    \n    float t = iTime * 0.5 + 19.0; // starting point offset for thumbnail purposes\n\n    float n = floor(3.0 + mod(t, 7.0));\n    #ifdef MULTI_REPETITION\n    float m = 1.0 + floor(mod(t + 0.5, 4.0));    \n    float d = rotationalMultiRepetition(p, n, 1.0, 1.0, m);\n    #else\n    float d = rotationalRepetition(p, n);\n    #endif\n    \n    // Coloring from iq, only slightly changed for own preference of colors\n    vec3 col = (d > 0.0) ? vec3(1.0, 0.3, 0.0) : vec3(0.1, 0.9, 1.0);\n\tcol *= 1.0 - exp(-5.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(60.0 * abs(d));\n\tcol = 1.25 * mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.05, abs(d)));\n\tC = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}