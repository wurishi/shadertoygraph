{"ver":"0.1","info":{"id":"tdXBRl","date":"1588839758","viewed":70,"name":"SDF_2Dtriangle","username":"sakiCunha","description":"https://www.shadertoy.com/view/XsXSz4","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float SDF_2Dline( vec2 A, vec2 B,vec2 p)\n{\n    // three vector\n    vec2 pA = A - p;\n    vec2 pB = B - p;\n    vec2 BA = A - B;\n    \n    // project pA to AB\n    float proj = dot(pA,BA)/length(BA);\n    // compare with the length of AB\n    proj /= length(BA);\n    // map to 0~1\n    //--* proj > 1.0 and proj < 0.0 means the distance to the line is the length of pA or pB\n    proj = clamp(proj,0.0,1.0);\n    return length(pA - proj * BA);\n}\n// think it as three lines\nfloat SDF_2Dtriangle(vec2 A,vec2 B,vec2 C, float roundness,vec2 uv)\n{\n    float d1 = SDF_2Dline(A,B,uv);\n    float d2 = SDF_2Dline(A,C,uv);\n    float d3 = SDF_2Dline(B,C,uv);\n    // get the minimum one\n    return min(d1,min(d2,d3)) - roundness;\n}\n\nconst vec2 _pointA = vec2(-0.5,0.0);\nconst vec2 _pointB = vec2(0.5,0.0);\nconst vec2 _pointC = vec2(0.1,0.8);\nconst float _roundness = 0.0;\n\nconst vec3 _col = vec3(0.1,0.4,0.7);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    float d_triangle = SDF_2Dtriangle(_pointA,_pointB,_pointC,_roundness,uv);\n    \n    vec3 col = vec3(1.0) - _col*sign(d_triangle);\n    col *= 1.0 - exp(-3.0*abs(d_triangle));\n    col *= cos(120.0*d_triangle);\n    col = mix( col, vec3(1.0),1.0-smoothstep(0.0,0.01,abs(d_triangle)) );\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}