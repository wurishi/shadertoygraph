{"ver":"0.1","info":{"id":"McVcDd","date":"1732584392","viewed":86,"name":"Lissajous Figurettes","username":"GarlicGraphix","description":"Noisy","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["curves","lissajous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Get pixel colour from iChannel0\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159\n\nfloat lineSegment( vec2 a, vec2 b, vec2 p, float w ) {\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 cp = a + h * ba;\n\n    float d = length(p - cp);\n\n    if (d < w) {\n        return 1.0;\n    } else {\n        return 0.0;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 tuv = uv;\n    \n    uv = uv * 2. - 1.;\n    vec3 col = vec3(0.0);\n    bool used = false;\n    for (int i = 0; i < 30; i++) {\n        float A = 0.9;\n        float B = 0.9;\n        float a = ceil(mod(float(i) + .1, 6.));\n        float b = ceil(mod(float(i) + 71.1, 5.));\n        float delta = PI/2.;\n\n        vec2 curvePoint;\n        float rs = 0.1+abs(sin(iTime))*0.4;\n        curvePoint.x = A * sin(a * (iTime - random(uv)*rs) + delta);\n        curvePoint.y = B * sin(b * (iTime - random(uv)*rs));\n\n        vec2 prevCurvePoint;\n        float prevTime = iTime - iTimeDelta;\n        prevCurvePoint.x = A * sin(a * prevTime + delta);\n        prevCurvePoint.y = B * sin(b * prevTime);\n        float d = lineSegment( curvePoint, prevCurvePoint, uv, 0.005 + sin(float(i))*0.001);\n        \n        if (d == 1.) {\n            col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0) + float(i));\n            used = true;\n        } else if (!used){\n            col = texture(iChannel0, tuv).rgb * 0.997;\n        }\n    }\n    \n    col = clamp(col, 0., 1.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n","name":"Common","description":"","type":"common"}]}