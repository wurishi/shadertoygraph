{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// This demo is used to do manual software bilinear filter\n// Thanks iq for pointing out the 0.5 offset :)\n// The right side of screen is the abs error, it's multiply 255 for good view.\n// The error is because software bilinear filter is more accurate than 8bit hardware bilinear filter.\n\nvec4 hardwareBilinear(sampler2D tex, vec2 uv)\n{\n    // this is linear sample\n\treturn texture(tex, uv, -100.0);\n}\n\n\nvec4 softwareBilinear(sampler2D tex, vec2 uv)\n{\n    vec2 texSize = iChannelResolution[0].xy;\n\tvec2 pos = uv * texSize - 0.5;\n    vec2 f = fract(pos);\n    \n    vec2 pos_top_left = floor(pos);\n    \n    // we are sample center, so it's the same as point sample\n    vec4 tl = texture(tex, (pos_top_left + vec2(0.5, 0.5)) / texSize, -100.0);\n    vec4 tr = texture(tex, (pos_top_left + vec2(1.5, 0.5)) / texSize, -100.0);\n    vec4 bl = texture(tex, (pos_top_left + vec2(0.5, 1.5)) / texSize, -100.0);\n    vec4 br = texture(tex, (pos_top_left + vec2(1.5, 1.5)) / texSize, -100.0);\n    \n    vec4 ret = mix(mix(tl, tr, f.x), mix(bl, br, f.x), f.y);\n    \n    return ret;\n}\n\nfloat Noise( vec2 position )\n{\n    vec2 uv = position / iResolution.xy;\n\n\tvec4 noiseHW = hardwareBilinear(iChannel0, uv);\n    vec4 noiseSW = softwareBilinear(iChannel0, uv);\n    \n    // divide screen to three parts\n    // left is harward linear\n    // middle is software linear\n    // right is abs different of above two\n    if (uv.x < 1.0/3.0)\n        return noiseHW.x;\n    else if (uv.x < 2.0/3.0)\n        return noiseSW.x;\n    else \n    \treturn abs(noiseHW.x - noiseSW.x)*255.0;  // multiply 255.0 for good view\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord.xy;\n    \n    float noise = Noise(pos);\n    fragColor = vec4(noise, noise, noise, 1);\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sBSRK","date":"1413507218","viewed":814,"name":"software bilinear","username":"neu_graphic","description":"software bilinear","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["softwarebilinear"],"hasliked":0,"parentid":"","parentname":""}}