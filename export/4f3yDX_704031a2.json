{"ver":"0.1","info":{"id":"4f3yDX","date":"1731228485","viewed":94,"name":"Screw tower","username":"gest","description":" ","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","screw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHADERTOY\n\n#ifdef SHADERTOY\n    #define main() mainImage( out vec4 fragColor, in vec2 fragCoord )\n    #define u_canvas iResolution\n    #define u_mouse iMouse\n    #define u_time iTime\n    #define gl_FragCoord fragCoord\n    #define gl_FragColor fragColor\n\t#define texture2D texture\n\t#define textureCube texture\n\t#define u_texture0 iChannel0\n\t#define u_texture1 iChannel1\n\t#define u_textureCube0 iChannel0\n\t#define u_textureCube1 iChannel1\n#endif\n\n\n//#define SUPER_GRAPHIC_CARD\n\n#ifdef SUPER_GRAPHIC_CARD\n\t#define SOFT_SHADOW\n\t#define MODEL_HARD\n#endif\n\nfloat time;\n#define FAR 100.\n#define ID_NONE -1.\n\n\n\nvec3 ltDir;\n\n#define ID_GROUND 0.\n#define ID_TOWER 1.\n#define ID_RAIL 2.\n#define ID_TRAIN_GREEN 3.\n#define ID_TRAIN_BLUE 4.\n#define ID_PLATFORM 5.\n\n\nvoid tf_HELIX_Y(inout vec3 p, float n, float R, float step, float nRot) {\n\tTF_CYL(p.xz, R);\n\tfloat a = floor(n)*p.x/R/(2.*PI);\n\tTF_TRANSLATE(p.y, step*a);\n\tTF_REPLICA(p.y, step);\n\tTF_ROTATE(p.yz, nRot * PI * a);\n}\n\nfloat CarDf(vec3 p) {\n\tfloat d, d_cut;\n\tTF_MIRROR(p.x, 0.8);\n\td = TF_BOX_ROUND(p, vec3(0.6, 0.15, 0.2), 0.1);\n\tTF_MIRROR(d, 0.02);\n\td_cut = TF_BOX2D(p.yz, 0.15);\n\td = AND(d, -d_cut);\n\tTF_MIRROR(p.x, 0.3);\n\td_cut = TF_BOX2D(p.xy, 0.15);\n\td = AND(d, -d_cut);\n\treturn d*0.6;\n}\n\nfloat nRot = 0.;\nbool multi = false;\n\nfloat map (vec3 p, inout Object object) {\n\tvec3 q, qq;\n\tfloat d, d_cut;\n\t\n\tif (multi) {\n\t\tTF_REPLICA(p.xz, 10.);\n\t}\n\t\n\tvec3 p0 = p;\n\t\n\tobject = Object(FAR, ID_NONE, p);\n\n\t//Формирование пространствa винта\n\t//float R = 4. - 0.2*abs(p.y-10.);\n\tfloat R = 4.;\n\tfloat step = 2.5;\n\tfloat n = 1.;\n\ttf_HELIX_Y(p, n, R, step, nRot);\n\t\n\n\t//Центральная часть\n\tObject OBJ1 = Object(FAR, ID_TOWER, p);\n\t{\n\t\tq = p;\n\t\td = TF_BOX2D(q.yz, 0.5);\n\t\tTF_MIRROR(d, 0.05);\n\t\t\n\t\tq = p;\n\t\tTF_REPLICA(q.x, PI/4.);\n\t\td_cut = TF_BOX2D(q.xy, vec2 (0.25, 0.35));\n\t\td = AND(d, -d_cut);\n\t\t\n\t\tq = p;\n\t\tTF_REPLICA(q.x, PI/8.);\n\t\td_cut = TF_BOX2D(q.xz, vec2 (0.15, 0.35));\n\t\td = AND(d, -d_cut);\n\t\t\n\t\t//Ребра\n\t\tq = p;\n\t\tTF_MIRROR(q.yz, 0.5);\n\t\td = OR(d, TF_BALL(q.yz, 0.1));\n\t\t\n\t\t//Колонны\n\t\tq = p0;\n\t\tTF_REPLICA_ANGLE(q.xz, 5., 0.);\n\t\tTF_TRANSLATE(q.z, 2.5);\n\t\td = OR(d, AND(TF_BALL(q.xz, 0.2), TF_BETWEEN2(q.y, 0., 20.)));\n\t \tOBJ1.distance = d;\n\t\tOBJ1.position = q;\n\t}\n\tobject = OR(object, OBJ1);\n\t\t\n\t//Рельсы\t\n\tObject OBJ2a = Object(FAR, ID_RAIL, p);\n\t{\n\t\tq = p;\n\t\tTF_TRANSLATE(q.y, 0.1);\n\t\tTF_MIRROR(q.yz, vec2(0.5, 0.2));\n\t\td = TF_BALL(q.yz, 0.025);\n\t \tOBJ2a.distance = d;\n\t\tOBJ2a.position = q;\n\t}\n\tobject = OR(object, OBJ2a);\n\n\n\t//Поднимающиеся фигуры\n\tObject OBJ3 = Object(FAR, ID_TRAIN_GREEN, p);\n\t{\n\t\tq = p;\n\t\tTF_TRANSLATE(q.y, -0.1);\n\t\tTF_TRANSLATE(q.x, time);\n\t\tTF_REPLICA(q.x, 2.*PI);\n\t\td = CarDf(q);\n\t \tOBJ3.distance = d;\n\t\tOBJ3.position = q;\n\t}\n\tobject = OR(object, OBJ3);\n\t\t\n\t//Опускающиеся фигуры\n\tObject OBJ4 = Object(FAR, ID_TRAIN_BLUE, p);\n\t{\n\t\tq = p;\n\t\tTF_TRANSLATE(q.y, 0.9);\n\t\tTF_TRANSLATE(q.x, -time);\n\t\tTF_REPLICA(q.x, 2.*PI);\n\t\td = CarDf(q);\n\t \tOBJ4.distance = d;\n\t\tOBJ4.position = q;\n\t}\n\tobject = OR(object, OBJ4);\n\t\n\t//Земля\n\tObject OBJ0 = Object(FAR, ID_GROUND, p);\n\t{\n\t\tq = p0;\n\t\td = TF_BEFORE(q.y, 0.);\n\t\t//Удаление на пути слкдования\n\t\tq = p;\n\t\td_cut = TF_BOX2D(q.yz, vec2(1.2, 1.));\n\t\td = AND(d, -d_cut);\n\t \tOBJ0.distance = d;\n\t\tOBJ0.position = q;\n\t}\n\tobject = OR(object, OBJ0);\n\n\t//Площадки\n\tObject OBJ5 = Object(FAR, ID_PLATFORM, p);\n\t{\n\t\tq = p0;\n\t\tTF_REPLICA(q.y, 5.);\n\t\td = AND(TF_BALL(q.xz, 6.), TF_BETWEEN(q.y, 0.03));\n\t\td_cut = TF_BALL(q.xz, 4.);\n\t\tTF_MIRROR(d_cut, 0.9);\n\t\td = AND(d, -d_cut);\n\t\td_cut = TF_BALL(p0.xz, 2.);\n\t\td = AND(d, -d_cut);\n\t \tOBJ5.distance = d;\n\t\tOBJ5.position = q;\n\t}\n\tobject = OR(object, OBJ5);\n\n\t//Ограждения\n\tObject OBJ6 = Object(FAR, ID_RAIL, p);\n\t{\n\t\tq = p0;\n\t\tTF_REPLICA(q.y, 5.);\n\t\tqq = q;\n\t\t//Горизонтальные\n\t\tq.x = TF_BALL(q.xz, 4.);\n\t\tTF_MIRROR(q.x, 1.5);\n\t\tTF_MIRROR(q.x, 0.5);\n\t\tTF_TRANSLATE(q.y, 0.25);\n\t\tTF_MIRROR(q.y, 0.05);\n\t\td = TF_BALL(q.xy, 0.01);\n\t\t\n\t\t//Вертикальные\n\t\tq = qq;\n\t\tTF_REPLICA_ANGLE(q.xz, 40., 0.);\n\t\tTF_TRANSLATE(q.z, 4.);\n\t\tTF_MIRROR(q.z, 1.5);\n\t\tTF_MIRROR(q.z, 0.5);\n\t\tfloat d1 = AND(TF_BALL(q.xz, 0.02), TF_BETWEEN2(q.y, 0., 0.3));\n\t\td = OR(d, d1, 0.1);\n\t \tOBJ6.distance = d;\n\t\tOBJ6.position = q;\n\t}\n\tobject = OR(object, OBJ6);\n\n\tif (object.id!=ID_NONE) object.distance *= 0.6;\n\n\treturn object.distance;\n}\n\nfloat map ( in vec3 p ) {\n\tObject object;\n\treturn map (p, object);\n}\n\nvec3 mapNormal (vec3 p, float eps) {\n\tvec2 e = vec2 (eps, -eps);\n\tvec4 v = vec4 (\n\t\tmap (p + e.xxx), \n\t\tmap (p + e.xyy), \n\t\tmap (p + e.yxy), \n\t\tmap (p + e.yyx)\n\t);\n\treturn normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat rayMarch(inout Ray ray) {\n\tray.distance = ray.near;\n\tfloat steps;\n\tfor (float i = 0.; i < 200.; ++i) {\n\t\tray.position = ray.origin + ray.direction * ray.distance;\n\t\tray.object.distance = map(ray.position, ray.object);\n\t\tray.hit = abs(ray.object.distance) < ray.epsilon;\n\t\tif (ray.hit) break;\n\t\tray.distance += ray.object.distance*ray.swing;\n\t\tif (ray.distance>ray.far) break;\n\t\tsteps = i + 1.;\n\t\tif (steps>ray.steps) break;\n\t}\n\treturn steps;\n}\n\nfloat softShadow( Ray ray, float k ) {\n    float shade = 1.0;\n    ray.distance = ray.near;    \n\tfloat steps = 1.;\n    for ( int i = 0; i < 50; i++ ) {\n\t\tray.position = ray.origin + ray.direction * ray.distance;\n        ray.object.distance = map(ray.position);\n        shade = min( shade, smoothstep( 0.0, 1.0, k * ray.object.distance / ray.distance)); \n\t\tray.hit = ray.object.distance < ray.epsilon;\n\t\tif (ray.hit) break;\n        ray.distance += min( ray.object.distance, ray.far / ray.steps * 2. ); \n        if (ray.distance > ray.far ) break; \n\t\tsteps++;\n\t\tif (steps>ray.steps) break;\n    }\n\t#if 0\n\t\treturn shade;\n\t#else\n    \treturn min( max( shade, 0.0 ) + 0.5, 1.0 ); \n\t#endif\n}\n\nvec3 skyCol (vec3 rd, vec3 sunDir) {\n\tfloat sd = clamp (dot(sunDir, rd), 0., 1.);\n\tvec3 skyCol = mix(vec3(1), vec3 (0.5, 0.75, 1.), rd.y+0.2);\n\tvec3 col = skyCol;\n\tcol += 0.5 * vec3 (1., 0.4, 0.2) * pow (sd, 256./2.);\n\tcol += 0.5 * vec3 (1., 0.8, 0.7) * pow (sd, 1024./2.);\n\treturn col;\n}\n\nstruct Material {\n\tvec3 color;\n\tfloat spec;\n};\n\nMaterial getMaterial(Ray ray) {\n\tMaterial m = Material (vec3(0.8), 0.4);\n\tvec3 p = ray.position;\n\tvec3 q = ray.object.position;\n\tif (ray.object.id > 100.) {\n\t\tm = Material(vec3(1,0,0), 0.5);\n\t} else if (ray.object.id==ID_GROUND) {\n\t\tm.color = vec3 (0.6, 1., 0.6);\n\t\tm.spec = 0.0;\n\t\tvec2 id = TF_REPLICA(p.xz, 5.);\n\t\tid = mod(id, 2.);\n\t\tm.color = (id.x-id.y)==0. ? vec3 (0.6, 1., 0.6) : vec3 (0.3, 1., 0.3);\n\t\tif (p.y<-0.5) m.color = vec3 (0.5);\n\t} else if (ray.object.id==ID_TOWER) {\n\t\tm.color = vec3 (0.7, 0.5, 0.4);\n\t} else if (ray.object.id==ID_RAIL) {\n\t\tm.spec = 1.;\n\t\tm.color = vec3 (0.7, 0.6, 0.6);\n\t} else if (ray.object.id==ID_TRAIN_GREEN) {\n\t\tm.color = vec3(0,1,0);\n\t} else if (ray.object.id==ID_TRAIN_BLUE) {\n\t\tm.color = vec3(0,0,1);\n\t} else if (ray.object.id==ID_PLATFORM) {\n\t\tm.color = vec3(1);\n\t\tif (ray.normal.y>0.5) {\n\t\t\tm.color = vec3(0.3);\n\t\t} else if (ray.normal.y<0.5) {\n\t\t\tTF_REPLICA_ANGLE(p.xz, 10., 0.);\n\t\t\tp.z -= 5.5;\n\t\t\tfloat d = TF_BALL(p.xz, 0.2);\n\t\t\tif (d<0.) {\n\t\t\t\tm.color = vec3(1,0,0)*TF_SMOOTHSTEP_BEFORE(d, -0.1, 0.);\n\t\t\t\tm.spec = -1.;\n\t\t\t}\n\t\t}\n\t}\n\treturn m;\n}\n\nvec3 lighting(Ray ray, vec3 ltDir, Material m) {\n\tvec3 col;\n\tfloat sh = 1.;\n\t#ifdef SOFT_SHADOW\n\t\tRay ray1 = ray;\n\t\tray1.origin \t= ray.position;\n\t\tray1.direction \t= ltDir;\n\t\tray1.steps \t\t= 50.;\n\t\tsh = softShadow (ray1, 10.);\n\t#endif\n\tif (m.spec>=0.) {\n\t\tfloat diff = max (dot (ray.normal, ltDir), 0.);\n\t\tfloat spec = pow (max (dot (normalize (ltDir - ray.direction), ray.normal), 0.), 64.);\n\t\tcol = m.color * (0.2 + 0.8 * sh * diff) + m.spec * sh * spec;\n\t} else {\n\t\tcol = m.color;\n\t}\n\treturn col;\n}\n\nvec3 render (Ray ray) {\n\tvec3 col;\n\tvec3 bgCol = skyCol (ray.direction, ltDir);\n\t\n\trayMarch (ray);\n\t\n\tif (ray.distance<ray.far) {\n\t\tray.normal = mapNormal (ray.position, 0.001);\n\t\t\n\t\tMaterial m = getMaterial(ray);\n\t\t\n\t\t#ifndef SOFT_SHADOW\n\t\t\tltDir = - ray.direction;\n\t\t#endif\n\t\tcol = lighting(ray, ltDir, m);\n\n\t\t//Туман\n\t\tconst float fogStart = 50.;\n\t\tvec3 fogColor = bgCol;\n\t\tcol = mix(col, fogColor, clamp((ray.distance-fogStart)/(ray.far-fogStart), 0., 1.));\n\t} else {\n\t\tcol = bgCol;\n\t}\n\treturn clamp (col, 0., 1.);\n}\n\nbool calcCamMat = false;\nfloat sceneID = 0.;\n\nvec3 Path(float t) {\n\tvec3 pos;\n\tif (sceneID==1. || sceneID==4. || sceneID==7.) {\n\t\t//На зеленом поезде вверх\n\t\tpos = vec3(0., 3.+ t*0.10, -4.);\n\t\tTF_ROTATE(pos.xz, -0.25*t + PI/2.);\n\t} else if (sceneID==2. || sceneID==5. || sceneID==8.) {\n\t\t//На синем поезде вниз\n\t\tfloat tt = radians(100.) + t * 0.247;\n\t\tif (sceneID==2. || sceneID==8.) tt = 0.;\n\t\tvec3 p_rot = TF_ROTATE_X(tt)*vec3(0,0.9,0); //Закрутка\n\t\tif (calcCamMat) p_rot = vec3(0);\n\t\tpos = vec3(0, 19.4- t*0.10, -4.) + p_rot;\n\t\tTF_ROTATE(pos.xz, +0.25*t - PI/2.);\n\t}\n\t\n\treturn pos;\n}\n\n// https://www.shadertoy.com/view/4dGcDh\nvec3 PathOrt(float t, float dt, float velZ) {\n\tvec3 posF = Path(t + dt);\n\tvec3 posB = Path(t - dt);\n\tvec3 dir = posF - posB;\n\tfloat anY = atan(dir.z, dir.x) - 0.5*PI;\n\tvec3 vel = dir / (2. * dt);\n\tfloat anX = asin (-vel.y / length (vel));\n\tvec3 acc = (posF - 2. * Path(t) + posB) / (dt * dt);\n\tvel.y = 0.;\n\tacc.y = 0.;\n\tvec3 va = cross (acc, vel) / length (vel);\n\tfloat anZ = velZ * length (va) * sign (va.y);\n\treturn vec3(anX, anY, anZ);\n}\n\nmat3 PathMatrix(float t, float dt, float velZ) {\n\tvec3 ort = PathOrt(t, dt, velZ);\n\treturn TF_ROTATE_Z(ort.z)/* * TF_ROTATE_X(ort.x)*/ * TF_ROTATE_Y(ort.y);\n}\n\nvoid main() {\n\ttime = u_time*2.;\n\t\n\tfloat aspect = u_canvas.x/u_canvas.y;\n\tvec2 uv = gl_FragCoord.xy/u_canvas.xy;\n\tuv = uv*2. - 1.;\n\n\tvec2 mouse = u_mouse.xy / u_canvas.xy - 0.5;\n\tif (u_mouse.xy==vec2(0)) mouse = vec2(0);\n\n\tvec2 ori = vec2(\n\t\tu_mouse.z==0. ? 0. : mouse.y*PI*2.,\n\t\tu_mouse.z==0. ? 0. : mouse.x*PI*2.\n\t);\n\n\t#if 1\n\t\tori.x = clamp(ori.x, -PI/2., PI/2.);\n\t#else\n\t\tori.x = clamp(ori.x, -radians(20.), radians(20.));\n\t#endif\n\t\n\tconst float sceneCount = 9.;\n\tconst float sceneDuration = 60.;\n\tfloat uv0_value = TF_TIMER(time, sceneCount, sceneDuration, sceneID);\n\ttime = mod(time, sceneDuration);\n\t\n\t\n\tvec3 camPos;\n\tvec3 camTag;\n\tmat3 camMat;\n\tfloat t;\n\t\n\tif (sceneID==0.) {\n\t\t//Общий вид без закрутки\n\t\tnRot = 0.;\n\t\tmulti = false;\n\t\tt = time;\n\t\tcamPos = vec3(0., 5.+ 4.*(1. + cos(0.2*t)), 8.);\t\n\t\tcamTag = vec3 (0., camPos.y, 0);\n\t\tcamMat = mat3(1);\n\t} else if (sceneID==1.) {\n\t\t//В зеленом поезде вверх без закрутки\n\t\tnRot = 0.;\n\t\tmulti = false;\n\t\tfloat velZ = 40.-15.;\n\t\tt = time + 1.7; //в начало вагонов\n\t\tcamTag = Path(t + 0.1);\n\t\tcamPos = Path(t);\n\t\tcamMat = PathMatrix(t, 0.5, velZ);\n\t} else if (sceneID==2.) {\n\t\t//В синем поездe вниз без закрутки\n\t\tnRot = 0.;\n\t\tmulti = false;\n\t\tfloat velZ = 40.-15.;\n\t\tt = time + 1.7; //в начало вагонов\n\t\tcalcCamMat = false;\n\t\tcamTag = Path(t + 0.1);\n\t\tcamPos = Path(t);\n\t\tcalcCamMat = true;\n\t\tcamMat = PathMatrix(t, 0.5, velZ);\n\t} else if (sceneID==3.) {\n\t\t//Общий вид с закруткой\n\t\tnRot = 2.;\n\t\tmulti = false;\n\t\tt = time;\n\t\tcamPos = vec3(2., 5.+ 4.*(1. + cos(0.2*t)), 8.);\t\n\t\tcamTag = vec3 (0., camPos.y, 0);\n\t\tcamMat = mat3(1);\n\t} else if (sceneID==4.) {\n\t\t//В зеленом поезде вверх с закруткой\n\t\tnRot = 2.;\n\t\tmulti = false;\n\t\tfloat velZ = 40. + time - 6.;\n\t\tt = time + 1.7; //в начало вагонов\n\t\tcamTag = Path(t + 0.1);\n\t\tcamPos = Path(t);\n\t\tcamMat = PathMatrix(t, 0.5, velZ);\n\t} else if (sceneID==5.) {\n\t\t//В синем поездe книз c закруткой\n\t\tnRot = 2.;\n\t\tmulti = false;\n\t\tfloat velZ = 40. - time + 1.;\n\t\tt = time + 1.7; //в начало вагонов\n\t\tcalcCamMat = false;\n\t\tcamTag = Path(t + 0.1);\n\t\tcamPos = Path(t);\n\t\tcalcCamMat = true;\n\t\tcamMat = PathMatrix(t, 0.5, velZ);\n\n\t} else if (sceneID==6.) {\n\t\t//Общий вид без закрутки\n\t\tnRot = 0.;\n\t\tmulti = true;\n\t\tt = time;\n\t\tcamPos = vec3(0., 5.+ 4.*(1. + cos(0.2*t)), 1.);\t\n\t\tcamTag = vec3 (0., camPos.y, 0);\n\t\tcamMat = mat3(1);\n\t} else if (sceneID==7.) {\n\t\t//В зеленом поезде вверх без закрутки\n\t\tnRot = 0.;\n\t\tmulti = true;\n\t\tfloat velZ = 40.-15.;\n\t\tt = time + 1.7; //в начало вагонов\n\t\tcamTag = Path(t + 0.1);\n\t\tcamPos = Path(t);\n\t\tcamMat = PathMatrix(t, 0.5, velZ);\n\t} else if (sceneID==8.) {\n\t\t//В синем поездe вниз без закрутки\n\t\tnRot = 0.;\n\t\tmulti = true;\n\t\tfloat velZ = 40.-15.;\n\t\tt = time + 1.7; //в начало вагонов\n\t\tcalcCamMat = false;\n\t\tcamTag = Path(t + 0.1);\n\t\tcamPos = Path(t);\n\t\tcalcCamMat = true;\n\t\tcamMat = PathMatrix(t, 0.5, velZ);\n\t}\n\t\n\tCamera cam;\n\t{\n\t\tcam.fov     = 45.;\n\t\tcam.aspect\t= aspect;\n\t\tcam.origin  = camPos;\n\t\tcam.target  = camTag;\n\t\tcam.up \t\t= vec3(0,1,0) * camMat;\n\t\tcam.vMat \t= TF_ROTATE_Y(ori.y) * TF_ROTATE_X(ori.x);\n\t\tcam.mMat\t= mat3(1);//TF_ROTATE_Y(ori.y) * TF_ROTATE_X(ori.x);\n\t}\n\n\tRay ray = lookAt(uv, cam);\n\t{\n\t\tray.near \t= 0.01;\n\t\tray.far  \t= FAR;\n\t\tray.epsilon = 0.001;\n\t\tray.swing\t= 1.;\n\t\tray.steps \t= 200.;\n\t}\n\tvec3 ro = ray.origin;\n\tvec3 rd = ray.direction;\n\n\tltDir = normalize (vec3 (-1., 1., 1.));\n\t\n\tvec3 col = render (ray);\n\n\tTF_TIMER_VIEW(col, 5., uv0_value);\t \n\t\n\tgl_FragColor = vec4 (col, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = radians(180.);\n//Камера\nstruct Camera {\n\t//Задаваемые параметры\n\tfloat fov, aspect;\n\tvec3  origin, target, up;\n\tmat3 vMat, mMat;\n\t//Расчетные параметры\n\tfloat factor;\n\tvec3  forward, right, position, coord;\n\tmat3 pMat, uMat;\n};\n\n//Параметры объекта\nstruct Object {\n\tfloat   distance;\t//Последнее приближение к объекту сцены\n\tfloat \tid;\t\t\t//id найденого объека сцены\n\tvec3 \tposition;\t//Координатв поверхности объекта\n};\n\n//Луч\nstruct Ray {\n\t//Задаваемые параметры\n\tvec3  origin;\t\t//Начало луча\n\tvec3  direction;\t//Направление луча\n\tfloat near;\t\t\t//Минимальное расстояние от камеры (начало сцены)\n\tfloat far;\t\t\t//Максивальное расстояние от камеры (конец сцены)\n\tfloat epsilon;\t\t//Точность обнаружения поверхности\n\tfloat steps;\t\t//Максимальное число итераций\n\tfloat swing;\t\t//\"+\" -колебание в найденной точке, \"-\"\n\t//Вычисляемые параметры\n\tfloat distance; \t//Расстояние до объекта сцены от ray.origin в направлении ray.direction\n\tvec3  position; \t//Точка поверхности\n\tvec3  normal;\t\t//Нормаль в точке поверхности\n\tbool  hit;\t\t\t//Флаг нахождения точки поверхности с заданной точностью\n\tObject object;\t\t//Параметры объекта (можно формировать непосредственно в карте расстояний)\n};\n//Формирование луча камеры\nRay lookAt (in vec2 uv, inout Camera cam) {\n\t//Расчетные характеристики камеры\n\tcam.factor\t\t= 1.0/tan(radians(cam.fov/2.));\n\tcam.forward \t= normalize(cam.target-cam.origin); \n\tcam.right \t\t= normalize(cross(cam.up, cam.forward));\n\tcam.up \t\t\t= cross(cam.forward, cam.right);\n\tcam.position \t= cam.origin + cam.factor * cam.forward;\n\tcam.coord \t\t= cam.position + uv.x * cam.right*cam.aspect + uv.y * cam.up;\n\tcam.pMat \t\t= mat3(cam.right, cam.up, cam.forward);\n\n\t//Формирование луча\n\tRay ray;\n\t{\n\t\tray.origin \t\t= cam.mMat * cam.origin;\n\t\tray.direction \t= cam.mMat * normalize( cam.pMat * cam.vMat * vec3(uv.x*cam.aspect, uv.y, cam.factor));\n\t\t//Умолчания\n\t\tray.near\t\t= 0.01;\n\t\tray.far\t\t\t= 100.;\n\t\tray.epsilon\t\t= 0.001;\n\t\tray.swing\t\t= 1.0;\n\t\tray.steps\t\t= 200.;\n\t}\n\treturn ray;\n}\n//-------------------функции трансформации и позиционирования объектов сцены\n//Допустимая ошибка (для удаления артефактов) 1./min(u_canvas.x, u_canvas.y)\nfloat EPS = 0.01;\n//Функция расстояния до фигуры со скругленными ребрами (объединение и сглаживание с увеличением на R)\n//float d - сглаживание фигуры\n//vec2 d - объединение и сглаживание двух фигур\n//vec3 d - объединение и сглаживание трех фигур\n//vec4 d - объединение и сглаживание четырех фигур\n#define TF_ROUND(d, R) (length(max(d, 0.)) - (R))\n//Функция расстояния до бокса (p vec3) или прямоугольника (p vec2) со скругленными ребрами\n//Функция расстояния до капсулы, если два размера 0\n#define TF_BOX_ROUND(p, S, R) TF_ROUND(abs(p)-(S), R)\n#define TF_BOX_ROUND1(p, S, R) TF_ROUND(abs(p)-(S) + R, R)\n//Функция расстояния до бокса (p vec3) или прямоугольника (p vec2)\n#define TF_BOX(p, S) TF_BOX_ROUND(p, S, 0.)\n#define TF_BOX1(p, S) TF_BOX_ROUND(p, S, EPS)\n#define TF_BOXE(p, S) TF_BOX_ROUND(p, S - EPS, EPS)\n#define TF_BOX3D(p, S) max(abs((p).x)-vec3(S).x, max(abs((p).y)-vec3(S).y, abs((p).z)-vec3(S).z))\n#define TF_BOX2D(p, S) max(abs((p).x)-vec2(S).x, abs((p).y)-vec2(S).y)\n#define TF_BOX2D_SD(p, S) TF_BOX(p, S) + min(TF_BOX2D(p, S), 0.)\n#define TF_BOX3D_SD(p, S) TF_BOX(p, S) + min(TF_BOX3D(p, S), 0.)\n//Функция расстояния до шара (p vec3) или круга (p vec2)\n#define TF_BALL(p, R) TF_ROUND(abs(p), R)\n//Эллипс\n#define TF_ELLIPSE3D(p, r) min ((r).x, min((r).y, (r).z)) * TF_BALL((p)/(r), 1.)\n#define TF_ELLIPSE2D(p, r) min ((r).x, (r).y) * TF_BALL((p)/(r), 1.)\n//Отрезок от a до b радиусом r\n#define TF_SEGMENT(p, a, b, r) TF_BALL((p)-(a) - ((b)-(a)) * clamp( dot((p)-(a),(b)-(a))/dot((b)-(a),(b)-(a)), 0.0, 1.0 ), r)\n\n//Функция расстояния до пространства ДО p1\n#define TF_BEFORE(p, p1) (p - (p1))\n#define TF_BEFORE_EPS(p, p1) TF_ROUND(p - (p1) + EPS, EPS)\n//Функция расстояния до пространства ДО normal с отступом p1\n#define TF_BEFORE_PLANE(p, normal, off) dot(p, normal) - (off)\n//Функция расстояния до пространства ДО p.x c предварительным вращением плоскости p.xy на угол ang и последующим отступом off\n#define TF_BEFORE_ROTATE(p, ang, off) dot((p).xy, cos ((ang) + vec2 (0, 0.5 * PI))) - (off)\n\n//Функция расстояния до пространства ПОСЛЕ p1\n#define TF_AFTER(p, p1) (-p + (p1))\n#define TF_AFTER_EPS(p, p1) TF_ROUND(-p + (p1) + EPS, EPS)\n//Функция расстояния до пространства ПОСЛЕ normal с отступом p1\n#define TF_AFTER_PLANE(p, normal, off) dot(-p, normal) + (off)\n//Функция расстояния до пространства ПОСЛЕ p.x c предварительным вращением плоскости p.xy на угол ang и последующим отступом off\n#define TF_AFTER_ROTATE(p, ang, off) dot((-p).xy, cos ((ang) + vec2 (0, 0.5 * PI))) + (off)\n\n//Функция расстояния до симметричного пространства МЕЖДУ -p1 и +p1\n//#define TF_BETWEEN(p, p1) TF_ROUND(abs(p) - (p1) + EPS, EPS)\n#define TF_BETWEEN(p, p1) (abs(p) - (p1))\n#define TF_BETWEEN_EPS(p, p1) TF_ROUND(abs(p) - (p1) + EPS, EPS)\n//Функция расстояния до несимметричного пространства МЕЖДУ p1 и p2\n//#define TF_BETWEEN2(p, p1, p2) TF_ROUND( abs(p - 0.5*(p1+p2)) - 0.5*(p2-p1) + EPS, EPS)\n#define TF_BETWEEN2(p, p1, p2) (abs(p - 0.5*((p1)+(p2))) - 0.5*((p2)-(p1)))\n//Функция расстояния до симметричного пространства МЕЖДУ двумя симметричными нормалями толщиной off\n#define TF_BETWEEN_PLANE(p, normal, off) AND(TF_AFTER_PLANE(p, normal, -off), TF_BEFORE_PLANE(p, normal, off))\n//Функция расстояния до симметричного пространства МЕЖДУ двумя симметричными нормалями толщиной off\n#define TF_BETWEEN_ROTATE(p, ang, off) AND(TF_AFTER_ROTATE((p).xy, ang, -0.5*off), TF_BEFORE_ROTATE((p).xy, ang, 0.5*off))\n\n//Перемещение пространства p (float p...vec4 p)\n#define TF_TRANSLATE(p, d) p -= d;\n//Масштаб\n#define TF_SCALE(p, s) p /= s\n//Преобразование в цилиндрическую систему координат\n#define TF_CYL(p, R) p = vec2((R)*atan(p.x,p.y), TF_BALL(p.xy, R))\n\n//Вращение пространства p (vec2 p)\n#if 0\n\t#define TF_ROTATE(p, a) p = mat2(cos(a), sin(a), -sin(a), cos(a)) * p\n#else\n\t#define TF_ROTATE(p, a) p = p.xy * cos (a) * vec2 (1., 1.) + p.yx * sin (a) * vec2 (-1., 1.)\n#endif\n#define TF_ROTATE_MAT2(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define TF_ROTATE_X(a) mat3(1.0,    0.0, 0.0,       0.0, cos(a), -sin(a),   0.0, sin(a), cos(a))\n#define TF_ROTATE_Y(a) mat3(cos(a), 0.0, -sin(a),   0.0, 1.0, 0.0,   \t    sin(a), 0.0, cos(a))\n#define TF_ROTATE_Z(a) mat3(cos(a), -sin(a), 0.0,   sin(a), cos(a), 0.0,   \t0.0, 0.0, 1.0)\n#define TF_ROTATE_X_90(p) p.xyz = p.xzy\n#define TF_ROTATE_Y_90(p) p.xyz = p.zyx\n#define TF_ROTATE_Z_90(p) p.xyz = p.yxz\n//Отражение пространства p (float p...vec4 p)\n#define TF_MIRROR(p, d) p = abs(p) - (d)\n//Разбиение пространства на повторяющиеся. Возвращает id центра ячейки\n//float p - пространство 1D\n//vec2 p - пространство 2D\n//vec3 p - пространство 3D\n#define TF_REPLICA(p, d) \\\n\tfloor((p)/(d) + 0.5);\\\n\tp = mod((p) + 0.5*(d), d) - 0.5*(d)\n#define TF_REPLICA1(p, d) \\\n\tfloor((p)/(d) + 0.5);\\\n\tp = p - (d) * floor((p)/(d) + 0.5)\n//Разбиение пространства на повторяющиеся в диапазоне id от ida до idb включительно. Возвращает id центра ячейки\n#define TF_REPLICA_LIMIT(p, d, ida, idb) \\\n\tfloor((p)/(d) + 0.5);\\\n\tp = p-(d)*clamp(floor((p)/(d) + 0.5), ida, idb)\n#define TF_REPLICA_LIMIT_MIRROR(p, d, id) \\\n\tfloor((p=p-0.5*(d))/(d) + 0.5);\\\n\tp = p-(d)*clamp(floor((p)/(d) + 0.5), -id, id-1.)\n\n//Разбиение пространства на повторяющиеся сектора в плоскости vec2 p в полярной системе координат\n//Возвращает id сектора\t\n#define TF_REPLICA_ANGLE_POLAR(p, n, off)\\\n\tfloor(mod(atan(p.x, p.y) + off + PI /(n), 2.*PI)/(2.*PI/(n)));\\\n\tp = vec2(atan(p.x, p.y) + off, length(p.xy));\\\n\tp.x = mod(p.x + 0.5*(2.*PI/(n)), (2.*PI/(n))) - 0.5*(2.*PI/(n))\n//Разбиение пространства на повторяющиеся сектора в плоскости vec2 p в декартовой системе координат\n//Возвращает id сектора\t\n#if 1\n\t#define TF_REPLICA_ANGLE(p, n, off) \\\n\t\tfloor(mod(atan(p.x, p.y) + off + PI /(n), 2.*PI)/(2. * PI/(n)));\\\n\t\tTF_ROTATE(p.xy, -off + (2.*PI/(n)) * floor(mod(atan(p.x, p.y) + off + PI /(n), 2.*PI)/(2.*PI/(n))))\n#else\n\t#define TF_REPLICA_ANGLE(p, n, off) \\\n\t\tTF_REPLICA_ANGLE_POLAR(p, n, off);\\\n\t\tp = p.y * vec2(sin(p.x), cos(p.x))\n#endif\n\n//По p2.xy формирует координату винта c числом заходов n вдоль p1 с шагом step \n#define TF_REPLICA_SPIN(p1, p2, n, step) \\\n\tp1 -= (atan((p2).x,(p2).y)/(2. * PI))*(n)*(step);\\\n\tTF_REPLICA(p1, (step))\n#define TF_REPLICA_SPIN_LIMIT(p1, p2, n, step, ida, idb) \\\n\tp1 -= (atan((p2).x,(p2).y)/(2. * PI))*(n)*(step);\\\n\tTF_REPLICA_LIMIT(p1, (step), ida, idb)\n\n//Формирование в плоскости p.xy n ветвей равномерной бесконечной спирали.\n//Возвращает в p.x расстояние до спирали.\n#if 1\n\t#define TF_SPIRAL(p, n, k)\\\n\t\tlength(p.xy);\\\n\t\t{\\\n\t\t\tvec2 p0 = p.xy;\\\n\t\t\tp.y = atan(p.x,p.y)*(n)/(2.*PI);\\\n\t\t\tp.x = p.y - (k) * length(p0.xy);\\\n\t\t\tp.x += -floor(p.x + 0.5);\\\n\t\t}\n#else\n\t#if 1\n\t\t#define TF_SPIRAL(p, n)\\\n\t\t\tp.x = atan(p.x,p.y)*(n)/(2.*PI) - length(p.xy) - 0.5;\\\n\t\t\tp.x -= 1. * floor(p.x/1. + 0.5)\n\t#else\n\t\t#define TF_SPIRAL(p, n)\\\n\t\t\tp.xy = vec2(atan(p.x,p.y), length(p.xy));\\\n\t\t\tp.x = p.x*(n)/(2.*PI) - p.y - 0.5;\\\n\t\t\tp.x -= 1. * floor(p.x/1. + 0.5)\n\t#endif\n#endif\n//Формирование в плоскости p.xy n ветвей равномерной спирали с ограничением количества витков \n//Возвращает в p.x расстояние до спирали.\n#if 1\n\t#define TF_SPIRAL_LIMIT(p, n, k, ida, idb)\\\n\t\tlength(p.xy);\\\n\t\t{\\\n\t\t\tvec2 p0 = p.xy;\\\n\t\t\tp.y = atan(p.x,p.y)*(n)/(2.*PI);\\\n\t\t\tp.x = p.y - (k) * length(p0.xy);\\\n\t\t\tp.x += clamp(-floor(p.x + 0.5), ida, idb);\\\n\t\t}\n#else\n\t#if 1\n\t\t#define TF_SPIRAL_LIMIT(p, n, ida, idb)\\\n\t\t\tp.x = atan(p.x,p.y)*(n)/(2.*PI) - length(p.xy) - 0.5;\\\n\t\t\tp.x -= 1. * clamp(floor(p.x/1. + 0.5), ida, idb);\n\t#else\n\t\t#define TF_SPIRAL_LIMIT(p, n, ida, idb)\\\n\t\t\tp.xy = vec2(atan(p.x,p.y), length(p.xy));\\\n\t\t\tp.x = p.x*(n)/(2.*PI) - p.y - 0.5;\\\n\t\t\tp.x -= 1. * clamp(floor(p.x/1. + 0.5), ida, idb);\n\t#endif\n#endif\n//Формирование в плоскости p.xy n ветвей расширяющейся бесконечной спирали.\n//Возвращает масштаб для корректировки профиля и в p.x расстояние до спирали.\n#if 1\n\t#define TF_SPIRAL_LOG(p, n, k)\\\n\t\tlength(p.xy);\\\n\t\t{\\\n\t\t\tvec2 p0 = p.xy;\\\n\t\t\tp.y = atan(p.x,p.y)*(n)/(2.*PI);\\\n\t\t\tp.x = p.y - (k) * log(length(p0.xy));\\\n\t\t\tp.x += -floor(p.x + 0.5);\\\n\t\t}\n#else\n\t#if 1\n\t\t#define TF_SPIRAL_LOG(p, n)\\\n\t\t\tlength(p.xy);\\\n\t\t\tp.x = atan(p.x,p.y)*(n)/(2.*PI) - log(length(p.xy)) - 0.5;\\\n\t\t\tp.x -= 1. * floor(p.x/1. + 0.5)\n\t#else\n\t\t#define TF_SPIRAL_LOG(p, n)\\\n\t\t\tlength(p.xy);\\\n\t\t\tp.xy = vec2(atan(p.x,p.y), length(p.xy));\\\n\t\t\tp.y = log(p.y);\\\n\t\t\tp.x = p.x*(n)/(2.*PI) - p.y - 0.5;\\\n\t\t\tp.x -= 1. * floor(p.x/1. + 0.5)\n\t#endif\n#endif\n//Формирование в плоскости p.xy n ветвей расширяющейся спирали с ограничением количества витков.\n//Возвращает масштаб для корректировки профиля и в p.x расстояние до спирали.\n#if 1\n\t#define TF_SPIRAL_LOG_LIMIT(p, n, k, ida, idb)\\\n\t\tlength(p.xy);\\\n\t\t{\\\n\t\t\tvec2 p0 = p.xy;\\\n\t\t\tp.y = atan(p.x,p.y)*(n)/(2.*PI);\\\n\t\t\tp.x = p.y - (k) * log(length(p0.xy));\\\n\t\t\tp.x += clamp(-floor(p.x + 0.5), ida, idb);\\\n\t\t}\n#else\n\t#if 1\n\t\t#define TF_SPIRAL_LOG_LIMIT(p, n, ida, idb)\\\n\t\t\tlength(p.xy);\\\n\t\t\tp.x = atan(p.x,p.y)*(n)/(2.*PI) - log(length(p.xy)) - 0.5;\\\n\t\t\tp.x -= 1. * clamp(floor(p.x/1. + 0.5), ida, idb);\n\t#else\n\t\t#define TF_SPIRAL_LOG_LIMIT(p, n, ida, idb)\\\n\t\t\tlength(p.xy);\\\n\t\t\tp.xy = vec2(atan(p.x,p.y), length(p.xy));\\\n\n\t\t\tp.y = log(p.y);\\\n\t\t\tp.x = p.x*(n)/(2.*PI) - p.y - 0.5;\\\n\t\t\tp.x -= 1. * clamp(floor(p.x/1. + 0.5), ida, idb);\n\t#endif\n#endif\n\n//Преобразует пространство p в n сферических сегментов. Возырвщвет id сегментв \n#define TF_REPLICA_ANGLE_SPHERIC(p, nx, nz, id)\\\n\tp = vec3( atan (p.x, p.z)*(nx)/(2. * PI), length (p), asin (p.y / length (p))*(nz)/PI );\\\n\tif (mod(nz, 2.)==0.) p.z -= 0.5;\\\n\tid = TF_REPLICA(p.xz, 1.)\n\n//------------------------------------------------------------------------------------------------------\n//Возвращает 0 или 1 в зависимоти от знячения p относительно a или b\n//Операция ИЛИ(OR) \t: step1 + step2 (сложение)\n//Операция И(AND) \t: step1 * step2 (умножение)\n//Операция NOT \t\t: 1. - step\n//------------------------------------------------------------------------------------------------------\n//Возвращает 1 если p > a\n//    1-----\n//    |\n//    |\n//----0\n//    a\n#define TF_STEP_AFTER(p, a) step(a, p)\n\n//Возвращает 1 если p < a\n//----1\n//    |\n//    |\n//    0-----\n//    a\n#define TF_STEP_BEFORE(p, a) step(p, a)\n\n//Возвращает 1 если -a < p < a\n//    1------1\n//    |      |\n//    |      |\n//----0      0--------\n//   -a      +a\n#define TF_STEP_BETWEEN(p, a) TF_STEP_BEFORE(abs(p), a)\n//Возвращает 1 если a < p < b\n//    1------1\n//    |      |\n//    |      |\n//----0      0--------\n//    a      b\n#define TF_STEP_BETWEEN2(p, a, b) TF_STEP_AFTER(p, a)*TF_STEP_BEFORE(p, b)\n\n//------------------------------------------------------------------------------------------------------\n//Возвращает 0 или 1 в зависимоти от знячения p относительно a или b со сглаживанием [-0.5*eps, 0.5*eps]\n//Операция ИЛИ(OR) \t: smoothstep1 + smoothstep2 (сложение)\n//Операция И(AND) \t: smoothstep1 * smoothstep2 (умножение)\n//Операция NOT \t\t: 1. - smoothstep\n//------------------------------------------------------------------------------------------------------\n//Возвращает \n//\t0 если p < a-eps/2; \n//\t1 если p > a+eps/2;\n//  сглаживание от 0 до 1  между a-0.5*eps и a+0.5*eps\n//        1-----\n//       /      \n//      /       \n//     /        \n//----0         \n//    |eps|\n//      a \n//\n//        1-----\n//       /      \n//      /       \n//     /        \n//----0         \n//    a   b \n//      \n#define TF_SMOOTHSTEP_AFTER_EPS(p, a, eps) smoothstep(a-0.5*eps, a+0.5*eps, p)\n#define TF_SMOOTHSTEP_AFTER(p, a, b) smoothstep(a, b, p)\n//Возвращает \n//\t1 если p < a-eps/2; \n//\t0 если p > a+eps/2;\n//  сглаживание от 1 до 0  между a-eps/2 и a+eps/2\n//-----1\n//      \\\n//       \\\n//        \\\n//         0------\n//     |eps|\n//       a \n//\n//-----1\n//      \\\n//       \\\n//        \\\n//         0------\n//    a    b \n//       \n#define TF_SMOOTHSTEP_BEFORE_EPS(p, a, eps) (1.-smoothstep(a-0.5*eps, a+0.5*eps, p))\n#define TF_SMOOTHSTEP_BEFORE(p, a, b) (1.-smoothstep(a, b, p))\n\n//Возвращает \n//\t1 если p > -a+eps/2  и  p < a-eps/2; \n//\t0 если p < -a-eps/2 или p > a+eps/2; \n//  сглаживание от 0 до 1  между -a-eps/2 и -a+eps/2\n//  сглаживание от 1 до 0  между  a-eps/2 и  a+eps/2\n//        1-----1\n//       /       \\\n//      /         \\\n//     /           \\\n//----0             0------\n//    |eps|     |eps|\n//     -a         +a\n//\n//        1-----1\n//       /       \\\n//      /         \\\n//     /           \\\n//----0             0------\n//   -b  -a    +a  +b\n//\n#define TF_SMOOTHSTEP_BETWEEN_EPS(p, a, eps) TF_SMOOTHSTEP_BEFORE_EPS(abs(p), a, eps)\n#define TF_SMOOTHSTEP_BETWEEN(p, a, b) TF_SMOOTHSTEP_BEFORE(abs(p), a, b)\n//Возвращает \n//\t1 если p > a+eps/2  и  p < b-eps/2; \n//\t0 если p < a-eps/2 или p > b+eps/2; \n//  сглаживание от 0 до 1  между a-eps/2 и a+eps/2\n//  сглаживание от 1 до 0  между b-eps/2 и b+eps/2\n//        1-----1\n//       /       \\\n//      /         \\\n//     /           \\\n//----0             0------\n//    |eps|     |eps|\n//      a         b\n//\n//        1-----1\n//       /       \\\n//      /         \\\n//     /           \\\n//----0             0------\n//   a1   b1    a2  b2\n//\n#define TF_SMOOTHSTEP_BETWEEN2_EPS(p, a, b, eps) TF_SMOOTHSTEP_AFTER_EPS(p, a, eps)*TF_SMOOTHSTEP_BEFORE_EPS(p, b, eps)\n#define TF_SMOOTHSTEP_BETWEEN2(p, a1, b1, a2, b2) TF_SMOOTHSTEP_AFTER(p, a1, b1)*TF_SMOOTHSTEP_BEFORE(p, a2, b2)\n\n//Возвращает значени для uv0 и в intervalId номер отрезка времени 0,1,2... для момента u_time\n//                -------\n//               |\n//        -------\n//       |\n//-------\n//   0       1       2\n#define TF_TIMER(u_time, intervalCount, intervalDuration, intervalId) \\\n\tmod(u_time, intervalDuration*intervalCount)/(intervalDuration*intervalCount);\\\n\tintervalId = mod(floor(u_time/(intervalDuration)), (intervalCount))\n//Выводит диаграмму процесса\n#define TF_TIMER_VIEW(col, pix, uv0_value) \\\n\t{\\\n\t\tvec2 uv0 = gl_FragCoord.xy/u_canvas.xy;\\\n\t\tif (uv0.y<pix/u_canvas.y && uv0.x<uv0_value) col = vec3(1,0,0);\\\n\t}\n\n//-------------------Функции сочетания расстояний до объектов сцены\n//Сложение / Объединение / ИЛИ\nfloat OR(float distA, float distB) {\n\treturn min(distA, distB);\n\t//if (distB<distA) return distB; return distA;\n\t//return mix(distA, distB, step(distB, distA)); \n}\n//Умножение / Пересечение / И\nfloat AND(float distA, float distB) {\n\treturn max(distA, distB);\n\t//if (distB>distA) return distB; return distA;\n\t//return mix(distA, distB, step(distA, distB)); \n}\n// Минимальная функция сглаживания. Есть бесчисленное множество статей, но IQ объясняет это лучше всего здесь:\n// http://iquilezles.org/www/articles/smin/smin.htm\n//Гладкое сложение / Объединение / ИЛИ (k==0 без)\n\nfloat OR( float distA, float distB, float k ) {\n\tfloat h = clamp( 0.5 + 0.5*(distB-distA)/k, 0., 1. );\n\treturn mix( distB, distA, h ) - k*h*(1.-h);\n}\n//Гладкое умножение / Пересечение / И (k==0 без)\n#if 0\n\tfloat AND( float distA, float distB, float k ) {\n\t\tfloat h = clamp( 0.5 - 0.5*(distB-distA)/k, 0., 1. );\n\t\treturn mix( distB, distA, h ) + k*h*(1.-h);\n\t}\n#else\n\tfloat AND( float distA, float distB, float k ) {\n\t\treturn - OR (- distA, - distB, k);\n\t}\n#endif\n//Исключение / НЕ\nfloat NOT(float dist) {\n\treturn -dist;\n}\n//-------------------Функции сочетания объектов сцены\n\n//Сложение / Объединение / ИЛИ\n//object = OR(objectA, objectB)\nObject OR(Object objectA, Object objectB) {\n\tif (objectB.distance<objectA.distance) return objectB;\n\treturn objectA;\n}\n//Мягкое Сложение / Объединение / ИЛИ  \n//object = OR(objectA, objectB, k)\nObject OR(Object objectA, Object objectB, float k) {\n\tObject object = objectA;\n\tif (objectB.distance<objectA.distance) object = objectB;\n\tif (k!=0.) object.distance = OR(objectA.distance, objectB.distance, k);\n\treturn object;\n}\n//Умножение / Пересечение / И\n//object = AND(objectA, objectB)\nObject AND(Object objectA, Object objectB) {\n\tif (objectB.distance>objectA.distance) return objectB;\n\treturn objectA;\n}\n//Мягкое Умножение / Пересечение / И\n//object = AND(objectA, objectB, k)\nObject AND(Object objectA, Object objectB, float k) {\n\tObject object = objectA;\n\tif (objectB.distance>objectA.distance) object = objectB;\n\tif (k!=0.) object.distance = AND(objectA.distance, objectB.distance, k);\n\treturn object;\n}\n//Исключение / НЕ\n//object = NOT(objectA)\nObject NOT(Object object) {\n\tobject.distance = -object.distance;\n\treturn object;\n}\n","name":"Common","description":"","type":"common"}]}