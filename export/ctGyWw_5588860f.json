{"ver":"0.1","info":{"id":"ctGyWw","date":"1700261896","viewed":67,"name":"integer compositions","username":"jt","description":"[url=https://en.wikipedia.org/wiki/Composition_(combinatorics)]integer compositions[/url].\nVisualizes all 2^(n-1) possibilities to write n as an [i]ordered[/i] sum of integers.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["integer","compositions","combinatorics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ctGyWw integer compositions, 2023 by jt\n\n// Integer Compositions.\n// https://en.wikipedia.org/wiki/Composition_(combinatorics)\n// Visualizes all 2^(n-1) possibilities to write n as an ordered sum of integers.\n\n// tags: integer, compositions, combinatorics\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://en.wikipedia.org/wiki/Composition_(combinatorics)\n// There are 2^(n-1) compositions of a positive integer n\n// Every binary number k can be mapped to a composition of n,\n// given n and 0 <= k < 2^(n-1)\n// The binary number is interpreted as describing elements and dividers.\n// This function reduces n by the next composition element and updates k.\n// Call this function until k is 0 to extract the entire composition.\nvoid get_next_composition_divider(inout uint n, inout uint k) // (jt)\n{\n    if(k != 0u)\n    {\n        uint c = 1u;\n        while((k&1u)==0u)\n        {\n            k >>= 1u;\n            ++c;\n        }\n        k >>= 1u;\n        n -= c;\n    }\n}\n\n// color composition elements in zebra pattern\nbool composition_tile(uint n, uint i, uint k)\n{\n    bool flip = false;\n    while(k != 0u)\n    {\n        get_next_composition_divider(n, k);\n        flip = !flip;\n        if(i >= n) return flip;\n    }\n    return !flip;\n}\n\nfloat bounce(float t) // [0..1]\n{\n    return 1.0 - 2.0*abs(t - floor(t) - 0.5);\n}\n\nvec3 draw_compositions(uint n, vec2 I)\n{\n    uint m = 1u << (n - 1u);\n    I *= vec2(n,m);\n    ivec2 tile = ivec2(floor(I));\n    if(abs(fract(I.y)-0.5) > 0.4) return vec3(0.5);\n    if(any(lessThan(tile, ivec2(0)))) return vec3(0.5);\n    if(any(greaterThanEqual(tile, ivec2(n, m)))) return vec3(0.5);\n    return vec3(composition_tile(n, uint(tile.x), uint(tile.y)));\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = 0.5 + (I - R / 2.0) / R.y;\n    uint n = uint(bounce(0.4-iTime/10.0)*6.0+1.0);\n    vec3 c = draw_compositions(n, I);\n    o = vec4(c,1);\n}\n","name":"Image","description":"","type":"image"}]}