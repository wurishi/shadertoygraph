{"ver":"0.1","info":{"id":"ttcGzS","date":"1576681852","viewed":208,"name":"RandomThings","username":"Hei149","description":"raymarching, kifs","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA\n\n#define rot(ang) mat2(cos(ang), sin(ang), -sin(ang), cos(ang))\n\nfloat bump(vec3 p)\n{\n \tfloat a = texture(iChannel0, p.xy).r;\n    float b = texture(iChannel1, p.yz).r;\n    float c = texture(iChannel2, p.zx).r;\n    return (a + b + c) / length(p);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n \tvec3 q = abs(p) - b;\n    return max(q.x, max(q.y, q.z)) + bump(p) * 0.05;\n}\n\nfloat map(vec3 p)\n{\n\n  p.xz *= rot(iTime);\n  float itr = 8.;\n  \n  for(float i = 0.; i < itr; ++i)\n  {\n    float ang = 3.1415 * 0.9 + iTime * 0.1;\n   \tp = abs(p) - 0.4;\n\n    p.xy *= rot(ang);\n    p.yz *= rot(ang);\n  \tp.xz *= rot(ang);\n  }\n    \n  float d = sdBox(p, vec3(0.3, 1.0, 0.3));\n  return d;\n}\n\nvec3 norm(vec3 p)\n{\n    vec2 e = vec2(0.01, 0.0);\n \treturn normalize(vec3(\n    \tmap(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n    \tmap(p + e.yyx) - map(p - e.yyx)\n    ));   \n}\n\nbool raymarch(vec3 r0, vec3 rd, float t_min, float t_max, out float d)\n{\n    d = t_min;\n    for(int i = 0; i < 100; ++i)\n    {\n     \tvec3 p = r0 + d * rd;   \n        float t = map(p);\n        \n        d += t;\n        if(t < 0.001) return true;\n        if(d > t_max) break;\n    }\n    \n    return false;\n}\n\n\nfloat occ(vec3 r0, vec3 rd)\n{\n    float occ = 0.0;\n    float denom = 0.15;\n    for(float i = 0.0; i < 10.0; ++i)\n    {\n        float stepSize = (i + 1.0) / 20.0;\n        denom *= 2.0;\n        float t = map(r0 + stepSize * rd);\n        occ += (stepSize - t) / denom;\n    }\n \treturn clamp((1.0 - occ), 0.0, 1.0);   \n}\n\nvec3 getSkyColor(vec2 uv)\n{\n    return  mix(vec3(0.1, 0.1, 0.1), vec3(0.2, 0.2, 0.1), length(uv) - 0.25);\n}\n\nvec3 shade(vec3 p, vec3 n, vec3 rd)\n{\n    \n    vec3 ld = normalize(vec3(-0.5, 0.5, -0.5));\n    vec3 col = (max(dot(n, ld), 0.0)) * vec3(1.28, 1.2, 0.99);\n    col += clamp((0.5 * n.y + 0.5), 0.0, 1.0) * vec3(0.16, 0.2, 0.28);\n\tcol += clamp(dot(n, ld * vec3(-1.0, 0.0, -1.0)), 0.0, 1.0) * vec3(0.4, 0.28, 0.2);\n    col += smoothstep(0.0, 1.0, occ(p, ld));\n    return col * vec3(0.7, 0.8, 0.5) * 0.7;\n}\n\n\nvec2 rand(vec2 val)\n{\n    return fract(sin(dot(val, vec2(43943.8, 95438.4))) * vec2(29430.6, 92929.3));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = vec2(fragCoord.xy / iResolution.xy);\n    vec3 col = vec3(0.0);\n    vec2 mouse = iMouse.xy / iResolution.xy * 5.0;\n    \n\tint numItr = 1;\n    #ifdef AA\n    \tnumItr = 3;\n    #endif\n    for(int i = 0; i < numItr; ++i){\n        \n        vec2 off = rand(uv + float(i) * 100.);\n        uv = (fragCoord + off - 0.5 * iResolution.xy) / iResolution.y;\n\n\t\t\n        vec3 r0 = vec3(12.0 * cos(mouse.x), 2.0, -12.0 * sin(mouse.x));\n        vec3 tgt = vec3(0.0);\n\n        vec3 ww = normalize(tgt - r0);\n        vec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n        vec3 vv = normalize(cross(ww, uu));\n        vec3 rd = normalize(uv.x * uu + uv.y * vv + ww);\n\n\t\n    \tfloat d = 0.0;\n        if(raymarch(r0, rd, 0.0, 100.0, d)){\n\n            vec3 p = r0 + d * rd;\n            vec3 n = norm(p);\n\n            col += shade(p, n, rd); \n        }\n        else\n           col += getSkyColor(uv);\n\n    }\n    col /= float(numItr);\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}