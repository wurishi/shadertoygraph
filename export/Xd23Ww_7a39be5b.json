{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n#define PI 3.141592653\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//by Olivier de Schaetzen (Citiral)\n//full of aweful code but heck, it was fun!\n\nvec3 pattern(vec2 c, vec2 p)\n{\n\tfloat ang = atan(p.y-c.y,p.x-c.x);\n\tfloat d = distance(c,p);\n\tfloat rd = d;\n\tif (rd < 0.04) return vec3(1.,1.,1.);\n\td = 0.05/(d*d) + iTime;\n\t\n\t\t\n\tif (mod(d,0.4) <= 0.2) {\n\t\tang += PI/20.;\t\n\t}\n\n\tif (mod(d,1.0) <= 0.5) return vec3(1.0,1.0,1.0);\n\t\n\tif (mod(d,2.0) <= 1.0) ang += iTime*0.4;\n\telse ang -= iTime*0.4;\n\tif ( mod(ang ,PI/10.) < PI/20.) return vec3(1.0,1.0,1.0);\n\t\n\treturn vec3(sin(d ),cos(d),sin(d)-cos(d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 c = vec2(0.5,0.5); \n\tvec2 p = fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\tc.x *= iResolution.x/iResolution.y;\n\t\n\tfloat d = distance(c,p);\n\t\n\tfragColor = vec4( pattern(c,p), 1.0 );\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xd23Ww","date":"1389292801","viewed":545,"name":"Colorful tube","username":"Citiral","description":"Some experimentation with 2D cubes, I'm having some real fun with pixel shaders, why hadn't I discovered this sooner!","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["colorful","fake3d","tube"],"hasliked":0,"parentid":"","parentname":""}}