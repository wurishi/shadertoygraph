{"ver":"0.1","info":{"id":"3slfD4","date":"1588278141","viewed":73,"name":"Croix contre X block3x3","username":"Aurus","description":"Croix contre X","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["jeuxdevie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz; // Lecture du buffer\n    fragColor = vec4(col,1.0); // Ecriture dans l'image courante (ViewPort)\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Génération d'un nombre aléatoire\n// en fonction de la position dans le buffer\n// Pour plus d'info voir https://www.shadertoy.com/view/XtX3D4\n// Thanks to Michael Pohoreski https://www.shadertoy.com/user/MichaelPohoreski\nfloat random( vec2 p )\n{\n    vec2 K1 = vec2(23.14069263277926, 2.665144142690225); // 23.14=e^pi (Gelfond's constant) et 2.66=2^sqrt(2) (Gelfond–Schneider constant)\n    return fract( cos( dot(p,K1) ) * 12345.6789 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    float modx = mod(fragCoord.x,3.0);\n    float mody = mod(fragCoord.y,3.0);\n    int modxi = int(modx);\n    int modyi = int(mody);\n    \n    if( iFrame == 0 ) { // Initialisation\n       \n        \n        \n        if(modxi == 1 && modyi == 1 ) {\n    \t\tif(random(fragCoord) < 0.5) {\n    \t\t\tcol = vec3(0.0, 0.0, 0.0);\n        \t} else {\n            \tcol = vec3(1.0, 1.0, 1.0);\n        \t}\n        } else {\n    \t\t\tcol = vec3(0.0, 0.0, 0.0);\n        }\n        \n        \n    }else{\n        \n        \n        col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz;\n        \n    \tif(modxi == 1 && modyi == 1){\n           \n            vec3 col_g = texelFetch( iChannel0, ivec2(fragCoord + vec2(-3.0, 0.0) ), 0 ).xyz;\n            vec3 col_d = texelFetch( iChannel0, ivec2(fragCoord + vec2( 3.0, 0.0) ), 0 ).xyz;\n            vec3 col_h = texelFetch( iChannel0, ivec2(fragCoord + vec2( 0.0, 3.0) ), 0 ).xyz;\n            vec3 col_b = texelFetch( iChannel0, ivec2(fragCoord + vec2( 0.0,-3.0) ), 0 ).xyz;\n            vec3 col_gb = texelFetch( iChannel0, ivec2(fragCoord + vec2(-3.0,-3.0) ), 0 ).xyz;\n            vec3 col_db = texelFetch( iChannel0, ivec2(fragCoord + vec2( 3.0,-3.0) ), 0 ).xyz;\n            vec3 col_gh = texelFetch( iChannel0, ivec2(fragCoord + vec2(-3.0, 3.0) ), 0 ).xyz;\n            vec3 col_dh = texelFetch( iChannel0, ivec2(fragCoord + vec2( 3.0, 3.0) ), 0 ).xyz;\n            \n            int nbCroix= 0;\n            if( col_g == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_d == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_h == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_b == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_gb == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_db == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_gh == vec3(1.0,1.0,1.0)) nbCroix++;\n            if( col_dh == vec3(1.0,1.0,1.0)) nbCroix++;\n            \n            if(col == vec3(0.0, 0.0, 0.0) ) { // MORT\n            \tif( nbCroix == 3) col = vec3(1.0, 1.0, 1.0); // NAISSANCE\n            } else { // VIVANT\n                if( nbCroix < 2) col = vec3(0.0, 0.0, 0.0); // MORT PAR ISOLEMENT\n                if( nbCroix == 2 || nbCroix == 3) col = vec3(1.0, 1.0, 1.0);\n                if( nbCroix > 3) col = vec3(0.0, 0.0, 0.0); // MORT PAR SURPOPULATION\n            }\n           \n        }else{\n\n        if(modxi == 0 && modyi == 0){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( 1.0, 1.0) ), 0 ).xyz;\n        }\n\n        if(modxi == 0 && modyi == 2){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( 1.0, -1.0) ), 0 ).xyz;\n        }\n\n        if(modxi == 2 && modyi == 0){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( -1.0, 1.0) ), 0 ).xyz;\n        }\n\n        if(modxi == 2 && modyi == 2){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( -1.0, -1.0) ), 0 ).xyz;\n        }\n        \n        if(modxi == 0 && modyi == 1){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( 1.0, 0.0) ), 0 ).xyz;\n            if( col == vec3(0.0,0.0,0.0)){\n                col = vec3(1.0,1.0,1.0);\n            }else{\n                col = vec3(0.0,0.0,0.0);\n            }\n        }\n        \n        if(modxi == 1 && modyi == 0){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( 0.0, 1.0) ), 0 ).xyz;\n            if( col == vec3(0.0,0.0,0.0)){\n                col = vec3(1.0,1.0,1.0);\n            }else{\n                col = vec3(0.0,0.0,0.0);\n            }\n        }\n        \n        if(modxi == 1 && modyi == 2){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( 0.0, -1.0) ), 0 ).xyz;\n            if( col == vec3(0.0,0.0,0.0)){\n                col = vec3(1.0,1.0,1.0);\n            }else{\n                col = vec3(0.0,0.0,0.0);\n            }\n        }\n        \n        if(modxi == 1 && modyi == 0){\n            col = texelFetch( iChannel0, ivec2(fragCoord + vec2( -1.0, 0.0) ), 0 ).xyz;\n            if( col == vec3(0.0,0.0,0.0)){\n                col = vec3(1.0,1.0,1.0);\n            }else{\n                col = vec3(0.0,0.0,0.0);\n            }\n        }\n        }\n    }  \n    \n    fragColor = vec4(col, 1.0); // Ecriture de la nouvelle cellule dans le buffer de sortie\n}\n","name":"Buffer A","description":"","type":"buffer"}]}