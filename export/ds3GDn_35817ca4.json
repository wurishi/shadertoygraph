{"ver":"0.1","info":{"id":"ds3GDn","date":"1677142288","viewed":81,"name":"TP1__Pierre_Modot","username":"PierreModot","description":"le TP1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bonnenote"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Eric Galin\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Eric Galin\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n\n\nint Damier(vec3 p, int c1, int c2){\n    int x =  (int(p.x) + int(p.y) + int(p.z)) % 2;\n    if (x==0) return c1; \n    else return c2;\n}\n\n\n\n\n// Plan\n// p : point\n// o : point du plan\n// n : normale de o\nV Plan(vec3 p, vec3 o, vec3 n, int index){\n    return V(dot((p-o),n), index);\n}\n\n// Creuser\n// a,b : field function of left and right sub-trees\nV Creuser(V a,V b)\n{\n  if (a.v>-b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(-b.v,a.i);\n    }\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nV Intersect(V a,V b)\n{\n  if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Eric Galin\n// Union\n// a,b : field function of left and right sub-trees\nV Union(V a,V b)\n{\n  if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Eric Galin\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nV Sphere(vec3 p,vec3 c,float r, int index)\n{\n  return V(length(p-c)-r, index);\n}\n\n\n// Boite toujours parallèle au sol\n// p : point\n// o : centre de la base de la boite\n// hauteur : hauteur de la boite\n// largeur : largeur de la boite\n// profondeur : profondeur de la boite\nV BoiteSimple(vec3 p, vec3 o, float hauteur, float largeur, float profondeur, int index){\n    V b;\n    b = Plan(p, o, vec3(0,0,-1),index);\n    b = Creuser(b, Plan(p, vec3( o.x, (o.y), (o.z)+hauteur), vec3(0,0,-1),index));\n    \n    b = Creuser(b, Plan(p, vec3( (o.x), (o.y)-(largeur/2.), (o.z)), (vec3 (0,1,0)), index));\n    b = Creuser(b, Plan(p, vec3( (o.x), (o.y)+(largeur/2.), (o.z)), (vec3 (0,-1,0)),index));\n    \n    b = Creuser(b, Plan(p, vec3( (o.x)-(profondeur/2.), (o.y), (o.z)), (vec3 (1,0,0)), index));\n    b = Creuser(b, Plan(p, vec3( (o.x)+(profondeur/2.), (o.y), (o.z)), (vec3 (-1,0,0)), index));\n\n    return b;\n}\n\n\n// Cylindre allongé sur l'axe Y\n// p : point\n// o : centre de la base du cylindre\n// rayon : rayon\n// hauteur : hauteur du cylindre\nV CylindreAllongeY(vec3 p, vec3 o, float rayon, float hauteur, int index){\n    V c;\n    \n    c = V(length(vec3(p.x, p.z, 0)-vec3(o.x, o.z, 0))-rayon, index);\n    \n    c = Intersect(c, Plan(p, o, vec3(0,-1,0), index)); \n    c = Intersect(c, Plan(p, vec3(o.x, o.y+hauteur, o.z), vec3(0,1,0), index)); \n    \n    \n    return c;\n}\n\n\n// Cylindre allongé sur l'axe X\n// p : point\n// o : centre de la base du cylindre\n// rayon : rayon\n// hauteur : hauteur du cylindre\nV CylindreAllongeX(vec3 p, vec3 o, float rayon, float hauteur, int index){\n    V c;\n    \n    c = V(length(vec3(p.y, p.z, 0)-vec3(o.y, o.z, 0))-rayon,index);\n    \n    c = Intersect(c, Plan(p, o, vec3(-1,0,0), index)); \n    c = Intersect(c, Plan(p, vec3(o.x+hauteur, o.y, o.z), vec3(1,0,0), index)); \n    \n    \n    return c;\n}\n\n// Cylindre\n// p : point\n// o : centre de la base du cylindre\n// rayon : rayon\n// hauteur : hauteur du cylindre\nV CylindreDroit(vec3 p, vec3 o, float rayon, float hauteur, int index){\n    V c;\n    \n    c = V(length(vec3(p.x, p.y, 0)-vec3(o.x, o.y, 0))-rayon, index);\n    \n    c = Intersect(c, Plan(p, o, vec3(0,0,-1), index)); \n    c = Intersect(c, Plan(p, vec3(o.x, o.y, o.z+hauteur), vec3(0,0,1),index)); \n    \n    \n    return c;\n}\n\n// Capsule\n// p : point\n// o : centre de la base de la capsule\n// rayon : rayon\n// hauteur : hauteur du cylindre dans la capsule (hauteur finale = hauteur-2rayon)\nV CapsuleDroite(vec3 p, vec3 o, float rayon, float hauteur, int index){\n\n    V c;\n    \n    if (p.z > o.z+hauteur)\n        return V(length(p-vec3(o.x, o.y, o.z+hauteur))-rayon, index);\n    else if (p.z < o.z)\n        return V(length(p-o)-rayon, index);\n    else {\n        c = V(length(vec3(p.x, p.y, 0)-vec3(o.x, o.y, 0))-rayon, index);\n    \n        c = Intersect(c, Plan(p, o, vec3(0,0,-1), index)); \n        c = Intersect(c, Plan(p, vec3(o.x, o.y, o.z+hauteur), vec3(0,0,1), index)); \n    return c;\n    }\n}\n\n\n// Capsule allongée sur l'axe X\n// p : point \n// o : centre de la base de la capsule\n// rayon : rayon\n// hauteur : hauteur du cylindre dans la capsule (hauteur finale = hauteur-2rayon)\nV CapsuleAllongeeX(vec3 p, vec3 o, float rayon, float hauteur, int index){\n\n    V c;\n    \n    if (p.x > o.x+hauteur)\n        return V(length(p-vec3(o.x+hauteur, o.y, o.z))-rayon, index);\n    else if (p.x < o.x)\n        return V(length(p-o)-rayon, index);\n    else {\n        c = V(length(vec3(p.z, p.y, 0)-vec3(o.z, o.y, 0))-rayon, index);\n    \n        c = Intersect(c, Plan(p, o, vec3(-1,0,0), index)); \n        c = Intersect(c, Plan(p, vec3(o.x+hauteur, o.y, o.z), vec3(1,0,0), index)); \n    return c;\n    }\n}\n\n\n// Roue\n// p : point\n// o : centre \n// rayon : rayon\n// largeur : largeur\nV Roue(vec3 p, vec3 o, float rayon, float largeur, int index){\n    V c;\n    \n    c = Sphere(p, o, rayon, index);\n    \n    c = Intersect(c, Plan(p, vec3(o.x, o.y-largeur, o.z), vec3(0,-1,0), index)); \n    c = Intersect(c, Plan(p, vec3(o.x, o.y+largeur, o.z), vec3(0,1,0), index)); \n    \n    c = Creuser(c, CylindreAllongeY(p, vec3(o.x, o.y+largeur*0.8, o.z), rayon*0.5, largeur*0.2, index));\n    c = Creuser(c, CylindreAllongeY(p, vec3(o.x, o.y-largeur, o.z), rayon*0.5, largeur*0.2, index));\n    \n    \n    return c;\n}\n\n\n// Panneau\n// p : point\n// o : position du bas du pied \n// hauteur : hauteur du pied\nV Panneau(vec3 p, vec3 o, float hauteur, int index){\n    V pa;\n    pa = CapsuleDroite(p, o, 0.4, hauteur, index);\n    pa = Union(pa, BoiteSimple(p, vec3(o.x+0.5,o.y,o.z+hauteur-3.), 2., 5., 0.5, 5));\n    \n    return pa;\n}\n\n// Voiture\nV Voiture(vec3 p, vec3 o, int index1, int index2){\n\n    V v;\n    \n    //carrosserie\n    v = BoiteSimple(p, vec3(o.x+3.,o.y+0.,o.z+2.), 4., 10., 24., index1);\n    v = Union(v, BoiteSimple(p, vec3(o.x+5.,o.y+0.,o.z+5.9), 4.1, 10., 14., index2));\n    //vitres\n    //pare brise avant\n    v = Creuser(v, BoiteSimple(p, vec3(o.x-2.,o.y+0.,o.z+6.), 3.5, 9., 0.5, 0));\n    //pare brise arrière\n    v = Creuser(v, BoiteSimple(p, vec3(o.x+11.5,o.y+0.,o.z+6.), 3.5, 9., 1., 0));\n    //fenetres\n    v = Creuser(v, BoiteSimple(p, vec3(o.x+8.,o.y+5.,o.z+6.), 3.5, 0.5, 5., 0));\n    v = Creuser(v, BoiteSimple(p, vec3(o.x+2.,o.y+5.,o.z+6.), 3.5, 0.5, 5., 0));\n    v = Creuser(v, BoiteSimple(p, vec3(o.x+8.,o.y-5.,o.z+6.), 3.5, 0.5, 5., 0));\n    v = Creuser(v, BoiteSimple(p, vec3(o.x+2.,o.y-5.,o.z+6.), 3.5, 0.5, 5., 0));\n    // Boite pour les vitres\n    //v = Union(v, BoiteSimple(p, vec3(o.x+5.,o.y+0.,o.z+5.9), 4.1, 10., 14., index1));\n    // poignets\n    v = Creuser(v, Sphere(p, vec3(o.x+9.5,o.y+5.,o.z+5.2), 0.5, 0));\n    v = Union(v, CapsuleAllongeeX(p, vec3(o.x+9.,o.y+5.,o.z+5.2), 0.2, 1., 0));\n    v = Creuser(v, Sphere(p, vec3(o.x+3.5,o.y+5.,o.z+5.2), 0.5, 0));\n    v = Union(v, CapsuleAllongeeX(p, vec3(o.x+3.,o.y+5.,o.z+5.2), 0.2, 1., 0));\n    \n    v = Creuser(v, Sphere(p, vec3(o.x+9.5,o.y-5.,o.z+5.2), 0.5, 0));\n    v = Union(v, CapsuleAllongeeX(p, vec3(o.x+9.,o.y-5.,o.z+5.2), 0.2, 1., 0));\n    v = Creuser(v, Sphere(p, vec3(o.x+3.5,o.y-5.,o.z+5.2), 0.5, 0));\n    v = Union(v, CapsuleAllongeeX(p, vec3(o.x+3.,o.y-5.,o.z+5.2), 0.2, 1., 0));\n    \n    //phares\n    v = Union(v, CylindreAllongeX(p, vec3(o.x-9.5,o.y+3.,o.z+4.), 1., 0.5, 3));\n    v = Union(v, CylindreAllongeX(p, vec3(o.x-9.5,o.y-3.,o.z+4.), 1., 0.5, 3));\n    \n    //trous pour les roues\n    v = Union(v, CylindreAllongeY(p, vec3(o.x-4.,o.y-5.2,o.z+2.),2.8,10.4, 0));\n    v = Union(v, CylindreAllongeY(p, vec3(o.x+11.5,o.y-5.2,o.z+2.),2.8,10.4, 0));\n    v = Creuser(v, BoiteSimple(p,vec3(o.x,o.y,o.z),2.,13.,29., 0));\n    v = Creuser(v, CylindreAllongeY(p, vec3(o.x-4.,o.y-5.2, o.z+2.), 2.5, 10.4, 0));\n    v = Creuser(v, CylindreAllongeY(p, vec3(o.x+11.5,o.y-5.2, o.z+2.), 2.5, 10.4, 0));\n    //barre entre les roues\n    v = Union(v, CylindreAllongeY(p, vec3(-4,-5,2), 0.3 ,10., 4));\n    v = Union(v, CylindreAllongeY(p, vec3(11.5,-5,2), 0.3 ,10., 4));\n    //roues\n    v = Union(v, Roue(p, vec3(o.x-4., o.y+5., o.z+2.), 2., 1., 2));\n    v = Union(v, Roue(p, vec3(o.x-4., o.y-5., o.z+2.), 2., 1., 2));\n    v = Union(v, Roue(p, vec3(o.x+11.5, o.y+5., o.z+2.), 2., 1., 2));\n    v = Union(v, Roue(p, vec3(o.x+11.5, o.y-5., o.z+2.), 2., 1., 2));\n    \n    \n    return v;\n}\n\n\n\n// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,14.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n\n// Operators\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n    V v;\n    \n    // panneau\n    v = Panneau(p, vec3(-15, -10, 0), 10., 8);\n    \n        \n    v = Union(v, Voiture(p, vec3 (0.,0.,0.),7,6));\n    \n    //fumée\n    //gauche\n    v = Union(v, Sphere(p, vec3(18,-4,1), 1., 4));\n    v = Union(v, Sphere(p, vec3(20,-5,1), 2., 4));\n    v = Union(v, Sphere(p, vec3(23,-4,3), 1.5, 4));\n    v = Union(v, Sphere(p, vec3(24,-6,4.2), 1., 4));\n    v = Union(v, Sphere(p, vec3(25,-5,5), 0.5, 4));\n    //droite\n    v = Union(v, Sphere(p, vec3(18,6,1), 1., 4));\n    v = Union(v, Sphere(p, vec3(20,5,1), 2., 4));\n    v = Union(v, Sphere(p, vec3(23,6,3), 1.5, 4));\n    v = Union(v, Sphere(p, vec3(24,4,4.2), 1., 4));\n    v = Union(v, Sphere(p, vec3(25,5,5), 0.5, 4));\n   \n    \n    \n    //sol\n    v = Union(v, Plan(p,vec3(0,0, 0),vec3(0,0,1), 10));\n  \n    return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  V vp=object(p);\n  float v = vp.v;\n  n.x=(object(vec3(p.x+eps,p.y,p.z)).v)-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p).v;\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Textures\n\nT TBleu(in vec3 p)\n{\n  return T(vec3(0.,0.,0.7),1.);   \n}\n\nT TVert(in vec3 p)\n{\n  return T(vec3(0.,0.5,0.5),0.);   \n}\n\nT TNoir(in vec3 p)\n{\n  return T(vec3(0.,0.,0.),0.5);   \n}\n\nT TJaune(in vec3 p)\n{\n  return T(vec3(1.,1.,0.),1.);   \n}\n\nT TGris(in vec3 p)\n{\n  return T(vec3(0.2,0.2,0.2),0.25);   \n}\n\nT TBlanc(in vec3 p)\n{\n  return T(vec3(1.,1.,1.),1.);   \n}\nT TBleu2(in vec3 p)\n{\n  return T(vec3(0.,0.,0.5),1.);   \n}\n\nT TDamier(in vec3 p){\n    int x =  (int(p.x*2.) + int(p.y*2.) + int(p.z*2.)) % 2;\n    if (x==0) return TBleu(p); \n    else return TBlanc(p);\n}\n\nT TFeuillet(in vec3 p){\n    int x = int(p.z*2.) % 2;\n    if (x==0) return TNoir(p); \n    else return TGris(p);\n}\n\n// Eric Galin\nfloat Axial ( float x , float y , float z ) {\n    float r = sqrt ( x * x + y *y ) ;\n    return 0.5 + 0.5 * cos (3.1415927 * r ) ;\n}\n\nT TFeuilletFondu(in vec3 p){\n    float axial = Axial(p.x*0.5, p.y*0.5, p.z*0.5);\n    vec3 c1 = vec3(0.,0.,0.);\n    vec3 c2 = vec3(1.,1.,1.);\n    \n    return T(vec3((axial*c1.x + 1. -axial*c2.x), (axial*c1.y + 1.-axial*c2.y), (axial*c1.z + 1.-axial*c2.z) ),1.);   \n}\n\n// Eric Galin\nvec3 Noise3(in vec3 p){\n    return ( vec3(Noise(p), Noise(p+vec3(10,-10,15)), Noise(p+vec3(9,7,12))));\n}\n\n// Eric Galin\nfloat Fbm(in vec3 p){\n    return (Noise(p/1.0)+0.5*Noise(p/0.5)+0.25*Noise(p/0.25));\n}\n\n\n// Eric Galin\nvec3 Fbm3(in vec3 p){\n    return ( vec3(Fbm(p), Fbm(p+vec3(10,-10,15)), Fbm(p+vec3(9,7,12))));\n}\n\nT TBruit(in vec3 p){\n\n    return T(Fbm3(p),1.);\n    /*\n    float x = Fbm(p);\n    vec3 c1 = vec3(0.,0.5,0.6);\n    vec3 c2 = vec3(0.,0.6,0.5);\n    \n    return T(vec3((x*c1.x + x*c2.x)/2., (x*c1.y + x*c2.y)/2., (x*c1.z + x*c2.z)/2. ),1.);  */ \n}\n\n\n\n// Eric Galin\n// Compute texture \n// p : Point\n// n : Normal\nT Couleur(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return TBleu(p);\n    }\n    else if (vp.i == 1){\n        return TVert(p);\n    }\n    else if (vp.i == 2){\n        return TNoir(p);\n    }\n    else if (vp.i == 3){\n        return TJaune(p);\n    }\n    else if (vp.i == 4){\n        return TGris(p);\n    }\n    else if (vp.i == 5){\n        return TBlanc(p);\n    }\n    else if (vp.i == 6){\n        return TBleu2(p);\n    }\n    else if (vp.i == 7){\n        return TDamier(p);\n    }\n    else if (vp.i == 8){\n        return TFeuillet(p);\n    }\n    else if (vp.i == 9){\n        return TFeuilletFondu(p);\n    }\n    else if (vp.i == 10){\n        return TBruit(p);\n    }\n    \n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(-10.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n   T tex=Couleur(p,n);\n    \n  // Ambient color\n  vec3 ambient = 0.5*tex.c;\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=false;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}