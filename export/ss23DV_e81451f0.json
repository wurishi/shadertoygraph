{"ver":"0.1","info":{"id":"ss23DV","date":"1618000840","viewed":38,"name":"sykli8 - Riku L.","username":"Ardenth","description":"sykli8 - 3pts shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["deadline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //keskipiste (koordinaatit -0.5 to 0.5)\n    uv -= 0.5; \n    //ruudun kuvasuhde kertoimeksi ympyrän muodostukseksi, vaikuttaa vain x -koordinaattiin (muuten ovaali)\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //uv pituus, -0.5 to 0.5 = 1 (origokohtainen)\n    float dist = length(uv);\n    //uv pituuden liike ajan mukaan\n    float uvMove = length(uv+0.05*sin(iTime));\n    \n    //radius vakio\n    float r = 0.2;\n    //ympyrän muutos ajan ja vakion (r) sinin mukaan ja kertoimella liikkeen rajoittamiseksi\n    float circleMove = 0.1*sin(r+iTime);\n    //vakio lisättynä liikkumisen vähentämiseksi\n    float currentR = r + circleMove;\n    \n    //output värit\n    vec3 colVar = vec3(1,1,3);\n    //väri cos mukaan\n    vec3 colCos = 0.2 + 0.2*cos(iTime+uv.xyx+colVar);\n    //väri sin mukaan\n    vec3 colSin = 0.2 + 0.2*sin(iTime+uv.xyx+colVar);\n    //väri sin/cos\n    vec3 colSin_Cos = (colSin/colCos)/2.2;\n    \n    //värien asetus\n    //laajenevan ympyrän värit (alue currentR sisällä)\n    if(dist < currentR) \n        colVar = colSin;\n    //edeltävään ympyrään ulkoinen alue tietyn etäisyyden päähän\n    //alueen ulkoreuna siirtyy ajan mukaan vertailussa\n    //ensimmäinen osa ulkoinen reuna, toinen osa sisäinen reuna\n    else if((uvMove < currentR+0.15) && (dist > currentR+0.12)) \n        colVar = colSin_Cos;\n    //background väritys\n    else \n        colVar = colCos;\n    \n    // Output to screen\n    fragColor = vec4(colVar,1.0);\n}","name":"Image","description":"","type":"image"}]}