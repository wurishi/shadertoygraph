{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float spheres(vec3 pos, float r)\n{\n  return length(mod(pos, 30.0) - vec3(15.0)) - r;\n}\n\n\nfloat map(vec3 pos)\n{\n\treturn spheres(pos, ((1. + cos(iTime * 2.)) * 1.5));\n}\n\nvec3 traceRay(vec3 pos, vec3 dir)\n{\n   for (int i = 0; i < 24; i++)\n   {\n       float distance = map(pos);\n       pos += 0.9 * distance * dir;\n   }\n\t\n   return pos;\n}\n\nvec3 calcNormal(vec3 pos)\n{\n    float eps = 0.01;\n\t\n    return normalize(vec3(\n\t\tmap(vec3(pos.x + eps, pos.y, pos.z)) - map(vec3(pos.x - eps, pos.y, pos.z)),\n    \tmap(vec3(pos.x, pos.y + eps, pos.z)) - map(vec3(pos.x, pos.y - eps, pos.z)),\n    \tmap(vec3(pos.x, pos.y, pos.z + eps)) - map(vec3(pos.x, pos.y, pos.z - eps))\n\t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 pos = vec3(iTime * 50., sin(iTime) * 20., 0.);\n\tvec3 dir = normalize(vec3(\n\t\t(fragCoord.x - iResolution.x * 0.5) / iResolution.y, fragCoord.y / iResolution.y - 0.5,\n\t\tcos(iTime) * 1.5));\n\t\t//1.0));\n\tvec3 color = vec3(.9, 0., 0.);\n    vec3 point = traceRay(pos, dir);\n    vec3 normal = calcNormal(point);\n\t\n\tfloat fogFactor = 1.0 - (1.0 / exp(point.z * 0.0025));\n    float diffuse = max(dot(normal, vec3(.9, .9, .9)), 0.0);\n\t\n    color = mix(color * diffuse, vec3(1.), fogFactor);\n\t\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MssGD7","date":"1372494386","viewed":187,"name":"Dimensions","username":"Did","description":"My first Raymarching shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}