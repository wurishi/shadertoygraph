{"ver":"0.1","info":{"id":"3llyzX","date":"1592620475","viewed":87,"name":"Swingy Star","username":"koo1ant","description":"Playing around with UV modulation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: koo1ant (maxisilva@gmail.com)\n// IG: @pecsimax\n\n#define t iTime\n\n#define PI 3.14159235659\n\nprecision highp float;\n\n// Settings\nconst float swingSpeed = 5.;\nconst float starSize = 0.7;\n\nvec2 resolution;\n\nfloat circle(vec2 uv, vec2 pos, float radius)\n{\n    return 1.-step(radius, length(pos-uv));\n}\n\nfloat fractSDF(vec2 uv, vec2 pos, float radius)\n{\n    float dv = length(pos-uv);\n    return step(0.1, \n        fract(dv*radius*20.)) * 0.2+\n        sin(dv*radius*5.-t*5.)*0.16;\n}\n\nvec2 setupSpace(in vec2 fragCoord, in vec2 resolution)\n{\n    vec2 uv;\n    vec2 coord = fragCoord;\n    coord.x -= (resolution.x - resolution.y) * 0.5; // Aspect ratio fix  \n  \n    uv = coord / resolution.y;\n    \n    // Remap to -1 .. 1\n    uv = vec2(\n        uv.x *2. -1.,\n        uv.y *2. -1.);\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    resolution = iResolution.xy;\n    \n    vec2 uv = setupSpace(fragCoord.xy, resolution); // Distorted space\n    vec2 uv2 = setupSpace(fragCoord.xy, resolution); // Less distorted space for the insides    \n    vec2 uvu = setupSpace(fragCoord.xy, resolution);\n    \n    \n    // Get angle before UV modulation to distort shape\n    float a = atan(uv.x, uv.y);\n    float a2 = atan(uvu.x, uvu.y);\n    \n\n    // Modulate space\n    uv.x += sin(t*swingSpeed)*0.1;\n    uv.y += cos(t*swingSpeed)*0.1;\n    \n    \n    vec2 innerSwing = vec2(sin(t*swingSpeed)*0.05, cos(t*swingSpeed)*0.11);\n    uv2 += innerSwing;\n    \n    // Draw star\n    float fn = sin(a*5.-5.)*0.15;\n    float fn2 = sin(a*20.+t*5.)*0.004;\n    float fn3 = sin(a*20.-t*10.)*0.004;\n    \n    float fnOutline = sin(a*20.+t*10.)*0.008;\n    \n    // Body\n    float outer = circle(uv, vec2(0), starSize+fn+fn2+fn3);\n    float inner = circle(uv, vec2(0), starSize*0.80+fn+fn2+fn3);\n    \n    // Insides\n\n    float aouter = circle(uv, vec2(0), starSize+fn+fn2+fn3+fnOutline);\n    float ainner = circle(uv, vec2(0), starSize*0.98+fn+fn2+fnOutline);\n\n    float simleFn = 0.2 + sin(t*0.5)*0.1;\n    float smileA = circle(uv2*5.5, vec2(0.0, -0.5), 0.1 + simleFn);\n    float smileB = circle(uv2*5.5, vec2(0, -0.3), 0.2 + simleFn);\n    \n    float eyePosY = 0.3;\n    float eyeFn = 0.3+sin(t*0.8)*0.05;\n    \n    vec2 eradius = vec2(-0.8, eyePosY);\n    \n    float eyeL = circle(uv2 * 5.5, vec2(-0.8, eyePosY), eyeFn + 0.03) * 0.5;\n    float eyeR = circle(uv2 * 5.5, vec2(0.8, eyePosY), eyeFn) * 0.5;\n\n    float fnc = sin(a*5.+4.5)*0.2;\n    float contour = fractSDF(uv, vec2(0), starSize+fnc+fnOutline);\n\n    // Final shapes\n    vec3 shape = vec3(outer-inner);    \n    vec3 ashape = vec3(outer-ainner);\n    vec3 smile = vec3(smileA*10.5-smileB*12.-contour-inner);\n    \n    \n    vec3 color = vec3(\n        shape * 0.2 +\n        ashape * 0.3 +\n        eyeL*10. +\n\teyeR*10. +\n\tsmile);\n     \n        color.b = 0.0;\n    \n    fragColor = vec4(vec3(color-inner),1.);\n}","name":"Image","description":"","type":"image"}]}