{"ver":"0.1","info":{"id":"DlVXRh","date":"1686080870","viewed":67,"name":"messing with parameters","username":"jakecariello","description":"Go home, checkerboard, you are drunk.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"ldBXz3","parentname":"Queasy Checkerboard"},"renderpass":[{"inputs":[],"outputs":[],"code":"#define time iTime*0.25\n\nvec2 pos = vec2(0.);\n\nfloat grid(vec2 p) {\n  p *= 1.5;\n  vec2 orient = normalize(vec2(1.0,1.0));\n  vec2 perp = vec2(orient.y, -orient.x);\n  float g = mod(floor(1. * dot(p, orient * 2.)) + floor(1. * dot(p, perp / 1.1)), 1.56);\n  return g;\n}\n\n#define samp 30.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  pos += noise22(vec2(time, time));\n  vec2 p = m2(1.31 * time) * fragCoord.xy / (50. * (1. + sin(time * 10.) / 10.)) + 10. * pos;\n  vec2 q = m2(-1.11 * time) * (fragCoord.xy - (iResolution.xy / 2.)) / iResolution.x / 1.5 ;\n  vec4 c = vec4(grid(p));\n  if (q.x + 0.1 * q.y > 100.) {\n    fragColor = c + vec4(p, 0, 0);\n  }\n  else {\n    vec4 cc = vec4(0.0);\n    float total = 0.0;\n    \n    float radius = length(q) * 100.;\n    for (float t = -samp; t <= samp; t++) {\n      float percent = t / samp;\n      float weight = 1.0 - abs(percent);\n\t  float u = t / 100.;\n      vec2 dir = vec2(fract(sin(537.3 * (u + 0.5)) ) , fract(sin(523.7 * (u + 0.25)) ));\n      dir = normalize(dir) * 0.01;\n      float skew = percent * radius;\n      vec4 samplev = vec4(\n          grid(vec2(0.03,0.) + p +  dir * skew * 9.),\n          grid(radius * vec2(0.005,0.00) + p +  dir * skew * 11. * cos(time)),\n          grid(radius * vec2(0.007,0.00) + p +  dir * skew * 13. * sin(time)),\n          1.0);\n      cc += samplev * weight;\n      total += weight;\n    }\n\n\n    fragColor = cc / total - length(q ) * vec4(1.,1.,1.,1.) * 1.5;\n  }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Classic Perlin 3D Noise \n// by Stefan Gustavson\n//\nvec4 permute(vec4 x) {\n    return mod(((x*34.)+1.)*x, 289.);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.-15.)+10.);\n}\n\nfloat cnoise(vec3 P) {\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.); // Integer part + 1\n    Pi0 = mod(Pi0, 289.);\n    Pi1 = mod(Pi1, 289.);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.); // Fractional part - 1.\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.;\n    vec4 gy0 = fract(floor(gx0) / 7.) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.));\n    gx0 -= sz0 * (step(0., gx0) - 0.5);\n    gy0 -= sz0 * (step(0., gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.;\n    vec4 gy1 = fract(floor(gx1) / 7.) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.));\n    gx1 -= sz1 * (step(0., gx1) - 0.5);\n    gy1 -= sz1 * (step(0., gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}\n\n// End of Perlin Noise Code\n\nvec2 noise22(vec2 p) {\n    return vec2(cnoise(vec3(p, 0)), cnoise(vec3(0, p)));\n}\n\nmat2 m2(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}","name":"Common","description":"","type":"common"}]}