{"ver":"0.1","info":{"id":"NtSGDR","date":"1623734301","viewed":104,"name":"Bunch o' random shapes","username":"Ridicolas","description":"My first shader, it isn't much, kind of glitchy, but its a start.\nIf you see anything glaringly wrong, tell me.\n\nThank you The Art of Code for your tutorials!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS (1<<7)\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define LIGHT_RADIUS 1000.\n\nconst float TorusMat = 1.;\nconst float CapsuleMat = 2.;\nconst float ShpereMat = 3.;\nconst float CubeMat = 4.;\nconst float PlaneMat = 5.;\n\nvec3 GetMatColor(float mat, vec3 currentPoint)\n{\n    vec3 col = vec3(0);\n    if(mat == TorusMat)\n    {\n        col = vec3(1,sin(iTime),cos(iTime));\n    }else if(mat == CapsuleMat)\n    {\n        col = vec3(0,0.5,cos(iTime));\n    }else if(mat == ShpereMat)\n    {\n        col = vec3(0.4,0.5,0.5);\n    }else if(mat == CubeMat)\n    {\n        col = vec3(.1);\n    } else {col = vec3(1);}\n    return col;\n}\n\nfloat GetMatSpec(float mat)\n{\n    if(mat == ShpereMat)\n    {\n        return 5.;\n    } else if(mat == CubeMat)\n    {\n        return 5.;\n    } else if(mat == PlaneMat)\n    {\n        return 0.05;\n    }\n    return 0.2;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab,ab);\n    t = clamp(t,0.,1.);\n    \n    vec3 c= a + t * ab * (sin(p.y / 1.) + 0.5);\n    return length(p-c)-r;\n}\n\nmat2 getRot(float rot)\n{\n    rot = radians(rot);\n    return mat2(cos(rot),sin(rot),-sin(rot),cos(rot));\n}\n\nfloat sdBox(vec3 p, vec3 s,vec3 r) {\n    p.zx *= getRot(r.y);\n    p.yx *= getRot(r.z);\n    p.zy *= getRot(r.x);\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdTorus (vec3 p, vec2 r)\n{\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y)) -r.y;\n}\n\nfloat GetPlaneHeight (vec3 point, float lod)\n{\n    float f = 1.2;\n    vec3 texXZ = pow(textureLod(iChannel0, point.xz * .3+.5, lod).rgb, vec3(f));\n    return dot(texXZ, vec3(5.,1.,.2) * .003);\n}\n\nvec2 GetDist (vec3 p) {\n    vec4 s = vec4(sin(iTime), 1,cos(iTime) + 4., 1);\n    \n    float sphereDist = length(p-s.xyz ) - s.w;\n    float torusDist = sdTorus(p - vec3(0,sin(iTime)/5. + .5,-3), vec2(1,sin(iTime)/6. + 0.5));\n    float planeDist = p.y;\n    float boxDist = sdBox(p - vec3(-4,1.05,0), vec3(1),vec3(iTime*20.,0,iTime*20.)) - 0.1;\n    \n    float cd = sdCapsule(p - vec3(4,0,0), vec3(-cos(iTime),-sin(iTime) + 2.,0), vec3(cos(iTime),sin(iTime) + 2.,0),.6);\n    float d = min(cd, planeDist);\n    d = min(d, sphereDist);\n    d = min(d, torusDist);\n    d = min(d, boxDist);\n    \n    float mat = 0.;\n    if(d == torusDist) {mat = TorusMat;}\n    else if(d == cd) {mat = CapsuleMat;}\n    else if(d == sphereDist) {mat = ShpereMat;}\n    else if(d == planeDist) \n    {\n        \n        mat = PlaneMat;\n        d -= GetPlaneHeight (p, 2.);\n    }\n    else if(d == boxDist) {mat = CubeMat;}\n    return vec2(d,mat);\n}\n\nvec3 GetNormal (vec3 p) {\n    float d = GetDist (p).x;\n    vec2 e = vec2 (.0003, 0);\n    \n    vec3 left = vec3(GetDist(p - e.xyy).x,\n                     GetDist(p - e.yxy).x,\n                     GetDist(p - e.yyx).x),\n        right = vec3(GetDist(p + e.xyy).x,\n                     GetDist(p + e.yxy).x,\n                     GetDist(p + e.yyx).x);\n        \n    vec3 n = normalize(-left + right);\n    return normalize(n);\n}\n\nvec3 GetPlaneTexture (vec3 point)\n{\n    vec3 normal = abs(GetNormal(point));\n    vec3 texXZ = texture(iChannel0, point.xz * .3+.5).rgb;\n    vec3 texYZ = texture(iChannel0, point.yz * .5+.5).rgb;\n    vec3 texXY = texture(iChannel0, point.xy * .5+.5).rgb;\n    vec3 disp = vec3(0);\n    disp += texXY * normal.z;\n    disp += texYZ * normal.x;\n    disp += texXZ * normal.y;\n    return disp;\n}\n\nvec3 RayMarch (vec3 ro, vec3 rd) \n{\n    float dO=0.;\n    float smallestDist = 1.;\n    float mat = 0.;\n    for(int i=0; i<MAX_STEPS; i++)\n    {\n        vec3 currentPoint = ro + rd * dO;\n        vec2 Distance = GetDist(currentPoint);\n        mat = Distance.y;\n        float dS = Distance.x;\n        dO += dS;\n        smallestDist = min(smallestDist,dS/dO);\n        if(dS <= 0.01) \n        {\n            smallestDist = 0.;\n        }\n        if(dO>MAX_DIST || dS<SURF_DIST)\n        {\n         float fadeRatio =\n         1.0 - clamp(SURF_DIST / LIGHT_RADIUS, 0., 1.);\n         float distanceFactor = pow(fadeRatio, 2.);\n         smallestDist *= distanceFactor;\n         break;\n        }\n    }\n    smallestDist = clamp(smallestDist,0.,1.);\n    return vec3(dO,smallestDist,mat);\n}\n\nvec3 GetLight(float material,vec3 rayDir,vec3 p, vec3 pos,float power, vec3 color) \n{\n    vec3 lightPos = pos;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal (p);\n    \n    \n    float specAmount = GetMatSpec(material);\n    float spec = 0.;\n    if(specAmount != .0)\n    {\n        spec = pow(max( dot( reflect(-l, n), -rayDir ), 0.), 8.);\n    }\n    vec3 d = RayMarch(p+n*SURF_DIST*(material == CapsuleMat ? 400. : 12.),l);\n    float dif = d.y *clamp(dot(n, l), 0.,1.);\n    return clamp( dif + (vec3(1., .6, .2)*spec*specAmount),0.002,1.) * color * power;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 GetColor (float material, vec3 rayDirection, vec3 point)\n{\n    vec3 col = vec3(1);\n    if(material == PlaneMat)\n    {\n        col = GetPlaneTexture(point);\n    } else {col = GetMatColor(material,point);}\n\n\n    col *= \n       GetLight(material,rayDirection,point,vec3(0,5,-6),1.,vec3(1,1,1))\n    + GetLight(material,rayDirection,point,vec3(sin(iTime) * 3.,5,cos(iTime) * 3.),1.,vec3(1,0,1));\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec3 pos = vec3(0, 6, -6);\n    vec3 ro = pos;\n    ro.yz *= Rot(-mouse.y*3.14+1.);\n    ro.xz *= Rot(-mouse.x*6.2831);\n    ro.y = clamp(ro.y,1.2,10.);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    \n    vec3 d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d.x;\n    \n    vec3 normal = GetNormal(p);\n    \n    float Distance = d.x;\n    \n    vec3 col = vec3(0);\n    if(d.x < MAX_DIST && d.x >= SURF_DIST)\n    {\n        col = GetColor (d.z, rd, p);\n        if(d.z == ShpereMat)\n        {\n            ro += rd*d.x;\n            rd = reflect(rd,normal);\n            d = RayMarch(ro+normal*0.0015, rd);\n            if(d.x < MAX_DIST)\n            {\n                p = ro + rd * d.x;\n                col += GetColor (d.z, rd, p) / (d.z == PlaneMat ? 1. : 8.);\n            }\n            normal = GetNormal(p);\n        }\n        \n    }\n    col = pow(col, vec3(.4545));\n    //Fade to black\n    col *= ((MAX_DIST-Distance)/MAX_DIST);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}