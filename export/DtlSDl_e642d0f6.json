{"ver":"0.1","info":{"id":"DtlSDl","date":"1675486368","viewed":73,"name":"Loading Spinner Animation","username":"The_O_King","description":"A simple 2D shader that emulates the spinning loader you see in things like Chrome and on Android","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","spinner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Spinner Parameter */\n#define OUTER_RADIUS .4\n#define THICKNESS .1\n#define COLOR vec4(.195, .390, 1.0, 1.0)\n#define ROT_SPEED 5.0\n#define MIN_SIZE .2\n#define MAX_SIZE .8\n#define SIZE_CHANGE_SPEED 1.67\n\n/* Backgroud Parameters */\n#define OUTER_RADIUS_BACK .5\n#define COLOR_BACK vec4(.3)\n#define CLEAR_COLOR vec4(0.0)\n\n/* Global Parameters */\n#define AA_PIXEL_SIZE 2.0\n#define PI 3.14159265\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Compute Normalized Coordinates and correct for aspect ratio\n  vec2 aspectRatio = iResolution.xy / iResolution.y;\n  vec2 nFragCoord = fragCoord / iResolution.xy - vec2(.5);\n  nFragCoord *= aspectRatio;\n  \n  // Use smoothstep to antialias the outer/inner edge of the spinner circle\n  float nPixelThickness = AA_PIXEL_SIZE / iResolution.x;\n  float distFromCenter = length(nFragCoord);\n  float inside = smoothstep(OUTER_RADIUS - THICKNESS - nPixelThickness,\n                            OUTER_RADIUS - THICKNESS + nPixelThickness,  \n                            distFromCenter);\n  float outside = smoothstep(OUTER_RADIUS + nPixelThickness,\n                             OUTER_RADIUS - nPixelThickness,\n                             distFromCenter);\n  \n\n  // Rotate the entire circle frame of reference to rotate the\n  // \"start\" of the circle\n  float rotAngle = -iTime * ROT_SPEED;\n  mat2x2 rotMat = mat2x2(\n      cos(rotAngle), -sin(rotAngle),\n      sin(rotAngle), cos(rotAngle)\n  );\n  \n  vec2 rotatedFragCoord = rotMat * nFragCoord;\n  float angle = atan(rotatedFragCoord.y, rotatedFragCoord.x);\n  // Normalize the angle of the current pixel to [0, 1] \n  // to make the following math a little easier\n  angle = angle / PI * .5 + .5;\n  \n  // Change the size of the visible portion of the circle over time\n  float circleSize = sin(iTime * SIZE_CHANGE_SPEED) * .5 + .5;\n  circleSize = mix(MIN_SIZE, MAX_SIZE, circleSize);\n  float innerAngle = step(angle, circleSize);\n\n  // Compute background circle mask\n  float outsideBack = smoothstep(OUTER_RADIUS_BACK + nPixelThickness,\n                                 OUTER_RADIUS_BACK - nPixelThickness,\n                                 distFromCenter);\n\n  // Mix the background circle with the spinner\n  vec4 finalColor = mix(COLOR_BACK, COLOR, inside * outside * innerAngle);\n  finalColor = mix(CLEAR_COLOR, finalColor, outsideBack);\n  fragColor = vec4(finalColor);\n}","name":"Image","description":"","type":"image"}]}