{"ver":"0.1","info":{"id":"ddlBRS","date":"1688903017","viewed":91,"name":"Black Hole, gravitational lens","username":"Prof_redstone","description":"Black Hole, Newtonian simulation, very simple approximation ","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getColorFromUV(vec2 uv) {\n    //return vec4(uv.x, uv.y, 0.0, 1.0);\n    return texture(iChannel0, vec2(mod(uv.x, 1.0), mod(uv.y, 1.0)), 0.0);\n}\n\nvec3 cartTOpol(vec3 cart){\n    float r = sqrt(cart.x * cart.x + cart.y * cart.y + cart.z * cart.z);\n    float lon = atan(cart.y/cart.x);\n    float lat = atan(sqrt(cart.x * cart.x + cart.y * cart.y)/cart.z);\n    return vec3(r,lon,lat);\n}\n\nfloat BGCol(vec3 pos){\n    float size = 0.05;\n    float res = 1.;\n    res *= float(step(size, mod(pos.y, size*2.)))*2. -1.;\n    res *= float(step(size, mod(pos.z, size*2.)))*2. -1.;\n    return res;\n}\n\nvec4 getPixCol(vec3 pos){\n    //pos /= length(pos);\n    vec2 uv = vec2(atan(pos.x, pos.z) / (2.0 * 3.141592), acos(pos.y) / 3.141592);\n    vec4 color = getColorFromUV(vec2(uv.x*10., uv.y*2.));\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float BHm = 1.;\n    const float G = 1.;\n    const float lightWeight = 10.;//oui oui\n    vec3 BHpos = vec3(0.0 + sin(iTime)*0.3,-0.4,1.0);\n\n    vec3 pos = vec3(fragCoord/ iResolution.x *2.0 -1., 0.0);\n    vec3 speed = vec3(0.0,0.0,30.0);//vitesse de la lumiere non constante\n    float Rs = (2.*G*BHm/length(speed))*1.3;\n\n    const int nbStep = 200000;\n    const float dt = 0.0001;\n    const float BGdepth = 4.;\n\n    vec3 color;\n\n    for(int i = 0; i < nbStep; i++){\n        vec3 Fdir = normalize(vec3(BHpos - pos));\n        float force = G*BHm*lightWeight*(1./(pow(length(vec3(BHpos - pos)),2.)));\n        vec3 acc = Fdir*force;\n        speed = speed + acc*dt;\n        pos = pos + speed*dt;\n\n        if(length((BHpos - pos)) < Rs){\n            fragColor = vec4(0.0,0.0,0.0, 1.0);\n            return;\n        }\n\n        if(length(BHpos - pos) >= BGdepth){\n            vec3 col = vec3(BGCol(pos));\n            //gl_FragColor = vec4(col,1.0);\n            fragColor = getPixCol(vec3(pos.zxy));\n            return;\n        }\n    }\n\n    fragColor = vec4(0.0,1.0,0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}