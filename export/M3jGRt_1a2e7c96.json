{"ver":"0.1","info":{"id":"M3jGRt","date":"1708743365","viewed":73,"name":"spiral attempt 3","username":"hackerzilla","description":"Finally got a working Archimedean spiral!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spiral","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define  e 2.718281828459045\n\nconst float aMin = 0.003;\nconst float speed1 = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Following portion written with some help from GPT 4.0\n    // Although I got most of the way there, GPT just helped with the aspect ration and threshold logic\n    // and specific values for a and b. \n    // Normalized coordinates\n\n    float scale = .5;\n    vec2 offset = vec2(0.0, 0.1);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv = scale * (uv + offset);\n    \n    // Rotate the uv coords by an angle every frame\n    float angularSpeed = 1.;\n    float rot = iTime * angularSpeed;\n    mat2 rotMat;\n    rotMat[0] = vec2(cos(rot), sin(rot)); // first column\n    rotMat[1] = vec2(-sin(rot), cos(rot));\n    //uv = rotMat * uv;\n    \n    // Parameters for the spiral: adjust these as needed\n    //float a = 0.002;//0.02 * abs(sin(iTime * 0.8)); // Starting radius\n    //float a = 0.004 + 0.002 * sin(iTime);\n    float a = aMin * 2.0 + aMin * sin(iTime * speed1);\n    //float a = 0.3;\n    float theta = atan(uv.y, uv.x);\n    \n    // https://en.wikipedia.org/wiki/Spiral\n    // x = r(psi) * cos(psi), y = r(psi) * sin(psi)\n    // Archimedean spiral: r(psi) = a * psi\n    float rIdeal = a * theta;\n    // some wackyness\n    \n    float wack = 1.;\n    wack = wack * (1. + sin(iTime))* 0.5 ;\n    //rIdeal += 0.05 * (-iTime);\n    \n    //rIdeal += wack * uv.x; // this offsets the spiral\n    //rIdeal += wack * sin((uv.y + uv.x) * 2. * PI);\n    \n    float wack2 = 0.002;\n    //rIdeal += wack2 * (1. + sin(theta * 2. * PI)) * 0.5;\n    \n    float xIdeal = rIdeal * cos(theta);\n    float yIdeal = rIdeal * sin(theta);\n    // Determine the distance to the spiral\n    vec2 idealPoint = vec2(xIdeal, yIdeal);\n    vec2 diff = uv - idealPoint;\n    float dist = length(diff);\n    \n    float minDist = dist;\n    float bestRing = 0.;\n    float tempTheta;\n    float prevDist = 1000.;\n    \n    \n    // check if another ring is a better candidate\n    for (float k = 1.; k < 50.; k++)\n    {\n        tempTheta = 2. * PI * k + theta;\n        rIdeal = a * tempTheta; // Archimedean spiral\n        // rIdeal = a * pow(tempTheta, 0.5); // Fermat\n        //rIdeal = a * pow(e, tempTheta);\n        // wackiness\n        //rIdeal += 0.05 * (-iTime);\n        //rIdeal += wack * sin((uv.y + uv.x) * 2. * PI);\n        //rIdeal += wack2 * (1. + sin(theta * 2. * PI)) * 0.5;\n        \n        xIdeal = rIdeal * cos(tempTheta);\n        yIdeal = rIdeal * sin(tempTheta);\n        idealPoint = vec2(xIdeal, yIdeal);\n        diff = uv - idealPoint;\n        dist = length(diff);\n        if (dist < minDist)\n        {\n            minDist = dist;\n            bestRing = k;\n        }\n        // if dist is increasing, exit loop\n        if (dist > prevDist)\n        {\n            k = 5.;\n        }\n    }\n    \n    // Threshold for being \"on\" the spiral\n    //float threshold = 0.002; //* abs(sin(iTime * 0.8));\n    //float threshold = 0.004 + 0.002 * sin(iTime);\n    float threshold = aMin * 2.0 + aMin * sin(iTime * speed1);\n    //float threshold = 0.2 + 0.15 * sin(iTime);\n    //float threshold = 0.02;\n    \n    minDist += wack2 * (1. + sin(theta * 2. * PI)) * 0.5;\n    \n    float r = length(uv);\n    // Color the pixel\n    if (minDist < threshold) {\n        fragColor = vec4(vec3(minDist), 1.0); // Black\n    } else {\n        //fragColor = vec4(1.0);\n        fragColor = vec4(vec3(0.7 + 0.3 * abs(sin(PI * 0.5 + uv.x + uv.y))), 1.0);\n        //fragColor = vec4(0.3 * abs(sin(r * 2. * PI + iTime * 2.)), 0.5 * abs(cos(r * 2. * PI + iTime * 1.5)), 0.6 * abs(sin(r * 2. * PI + iTime * 0.9)), 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}