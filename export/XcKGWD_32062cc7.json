{"ver":"0.1","info":{"id":"XcKGWD","date":"1712781183","viewed":107,"name":"NotSoGreeeen - Posterization","username":"NotSoGreeeen","description":"Quantize - to approximate (a continuously varying signal) by one whose amplitude is restricted to a prescribed set of values.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["texture","array","posterize","quantize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colors[8] = vec3[8] ( //8 color array to store the colors I aim to get\n    vec3(0.),\n    vec3(116, 146, 104) / vec3(256), //The array has to be defined as a definite size\n    vec3(108, 172, 148) / vec3(256), //And then set to a variable array of equal size\n    vec3(1.),                        //The array requires solely real numbers, but does allow math\n    vec3(116, 117, 67) / vec3(256),  //You can adjust the value of any position of the array,\n    vec3(71, 79, 90) / vec3(256),    //but for this it's not necessary.\n    vec3(66, 62, 38) / vec3(256),    //I hope this helps explain arrays to those who are also learning glsl!\n    vec3(134, 179, 130) / vec3(256)\n);\n\nvec3 Quantize(vec3 col) {\n    float dist = distance(colors[0], col); //create a distance, and set it to the first color of the array\n    vec3 tempColor = colors[0]; //create a color placeholder and set it to the first color the of array\n\n    for (int i = 1; i < colors.length(); i++) { //run through each color in the array (aside from the one we already used)\n        if (distance(colors[i], col) < dist) { //if it's color is closer to the actual color:\n            dist = distance(colors[i], col); //set the new distance to the closer distance\n            tempColor = colors[i]; //set the color placeholder to the new color\n        }\n    }\n\n    return tempColor; //update color to be the closest color in the palette\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy; //center the UV for a texture\n    \n    vec3 col = texture(iChannel0, uv).rgb; //grab the texture\n    \n    col = Quantize(col);\n    \n    fragColor = vec4(col, 1.); //display the quantized(or posterized) texture\n}\n\n//as always, feel free to send feedback and criticism.","name":"Image","description":"","type":"image"}]}