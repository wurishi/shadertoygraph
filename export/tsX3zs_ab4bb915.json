{"ver":"0.1","info":{"id":"tsX3zs","date":"1547185318","viewed":234,"name":"code golfing simple shader","username":"bitnenfer","description":"a small practice for js1k","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["codegolf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T iTime\nvec4 shader(vec2 coord){float D=.01,r,c,s,a,b,h,q;\nvec3 C=vec3(1),RD=normalize(vec3(coord.xy-0.5,1)),P=vec3(0,0,-2.),d,p,RP=vec3(2,0,0);\nfor (int i=0;i<99;++i){p=(P+=RD*(D*.7));\nr=p.y*5.+T;\nc=cos(r),s=sin(r);\na=min(q=length(P*vec3(.5,3.+sin(T)*.2,3.))-.5,length((mod(p,RP)-.5*RP)*vec3(2.5,1,1))-(1.1+.08*sin(T)));\np.xz*=mat2(c,s,-s,c);\nd=abs(p*vec3(1,sin(T+P.y*2.),1))-vec3(.3,9,.3);\nb=length(max(d,0.))-min(max(d.x,max(d.y, d.z)),0.);\nh=clamp(.5+.5*(a-b)/.7,0.,1.);\nD=mix(a,b,h)-.7*h*(1.-h);\nif (D<.01) {\nC=vec3((1.-max(.0, float(i)/90.))*.7);\nC-=vec3(1,.4,.1)*max(.12,pow(max(dot(RD+vec3(.5*sin(T),0,0),normalize(P)),.001),.4));\nC=1.-C;\nbreak;}}\nC = mix(C, vec3(0,0,1), max(0.0, pow(length(1.*RD.xy), 3.)));\nreturn vec4(C,1);}\n\n// Shadertoy entry point \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = shader(uv);\n}","name":"Image","description":"","type":"image"}]}