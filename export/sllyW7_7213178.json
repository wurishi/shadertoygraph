{"ver":"0.1","info":{"id":"sllyW7","date":"1648137381","viewed":92,"name":"seb fractal exercice ","username":"Sebastien9613","description":"it's simple fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 N(float angle){\n    return vec2(sin(angle), cos (angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/ iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    uv *= 0.5;\n  \n    vec3 col = vec3(0);\n    \n    uv.x = abs(uv.x);\n    uv.y += tan((5./6.)*3.1415)*.5;\n    \n    vec2 n = N((5./6.)*3.1415);\n    float d = dot(uv-vec2(.5, 0), n);\n    uv -= n*max(0., d)*2.;\n   \n    \n    n = N(mouse.y*(2./3.)*3.1415);\n    \n    float scale = 1.;\n    uv.x += .5;\n    for (int i=0; i<5; i++){\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        uv -= n*min(0., dot(uv,n))*2.;\n\n        \n    }\n    \n    \n   d = length( uv - vec2( clamp(uv.x, -1., 1.),0));\n   col += smoothstep( 1./iResolution.y, .0, d/scale);\n   uv /= scale;\n   col += texture(iChannel0, uv*2.-iTime*.03).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}