{"ver":"0.1","info":{"id":"7lKXRw","date":"1643386924","viewed":162,"name":"experimental CRT effect 1","username":"Makeavoy","description":"crt test 1.\nPixels are divided by rgb to separate \"lights\" in the screen, in this iteration a higher luminance divides them more, despite that making less sense.\nIt kind of makes the picture look almost 3d tbh.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["pixel","crt","weird"],"hasliked":0,"parentid":"ftyXRh","parentname":"CRT Blend Test 9  - Makeavoy "},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float AR = iResolution.x / iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_sqr=fragCoord/iResolution.xy;\n    // sample texture and output to screen\n    float res=96.;\n    vec2 res2=vec2(res,res/AR);\n    vec2 res3=res2;//vec2(res+0.33,res/AR);\n    vec2 res4=res2;//vec2(res+0.66,res/AR);\n    //res3.x-=1./res2.y;\n    //res4.x-=2./res2.y;\n    \n    //first factor to determine how much rgb pixels split up\n    //1. is complete seperation, 0. is merged\n    \n    vec2 i=floor(uv*res2)/res2;\n    vec4 tex = texture(iChannel0, i);\n    float lum=(0.2126*tex.r + 0.7152*tex.g + 0.0722*tex.b);\n    float v=min((lum),1.);\n    \n    float split=max(.33,v);\n    vec2 uv2=uv+vec2(split*0.33/res,0.);\n    vec2 uv3=uv+vec2(split*0.66/res,0.);\n    \n    \n    //vec2 c=mod(uv,1./res)*res;\n    vec2 cr=mod(uv,1./res2)*res2;\n    vec2 cg=mod(uv2,1./res3)*res3;\n    vec2 cb=mod(uv3,1./res4)*res4;\n\n    \n    //stutter vec2 i2=vec2(i.x-mod(iTime,0.002),i.y);\n    \n    \n    //float t2=min(4.*uv.y/mod(iTime,4.),1.0);\n    //sin(uv.y*10.+iTime)*\n    \n    //float t2=((uv.y-0.5)*(uv.x-0.5))*cos(iTime);\n    \n    \n    float t=  0.;\n    //////////////////\n    //////////////////\n    \n    bool boundary=false;\n    \n    float circle_time=1.+cos(iTime);\n    float dx=1.-abs(2.*uv_sqr.x -1.);\n    float dy=1.-abs(2.*uv_sqr.y -1.);\n    float degree=(dx*dy)*256.*(1.+20.*log(circle_time)); //lower is more dramatic\n    float wave=cos(8.*uv.y+iTime)/degree;\n    \n    float wiggle=cos(sin(iTime)+uv.y*2.);\n    \n    \n    if (boundary){\n    t=wave;\n    }\n    \n    \n    //////////////////\n    //////////////////\n    \n    //t=sin(3.14+3.14*cos(( mod(iTime,20.)+uv_sqr.y)*6.))/64.;\n    \n    \n    \n    //////////////////\n    //////////////////\n    \n    \n    \n    vec2 i2=floor(uv2*res3)/res3;//vec2(i.x+t*3.,i.y-t);\n    vec2 i3=floor(uv3*res4)/res4;//vec2(i.x-t*6.,i.y+t);\n    i2.x+=t*3.;\n    i3.x+=t*6.;\n    \n    vec4 tex2 = texture(iChannel0, i2);\n    vec4 tex3 = texture(iChannel0, i3);\n    //float r=abs(tan(c.x*9.42477796077))*(0.5-abs(c.y-0.5));\n    float size=9.42477796077*(split);//9.42477796077\n    float borderVal=0.5+0.4*(1.-split);\n    float ar=abs(tan(min(cr.x*size,3.14)))*(borderVal-abs(cr.y-0.5)); //9.42477796077\n    float ag=abs(tan(min(cg.x*size,3.14)))*(borderVal-abs(cg.y-0.5)); //9.42477796077\n    float ab=abs(tan(min(cb.x*size,3.14)))*(borderVal-abs(cb.y-0.5));\n    \n    \n    /*\n    vec3 tone=vec3(0.,0.,0.);\n    if(c.x>0.2 && c.x<0.75){\n        tone.g=tex.g;\n    }\n    if(c.x<0.4){\n        tone.r=tex.r;\n    }\n    if(c.x>0.6){\n        tone.b=tex.b;\n    }*/\n    \n    /*\n    vec3 tone=vec3(1.,0.,0.);\n    if(c.x>0.66){\n    tone=vec3(0.,1.,0.);\n    }else if(c.x>0.33){\n    tone=vec3(0.,0.,1.);\n    }*/\n    \n    //r=min(floor(r+0.97),1.0);\n    \n    ar=min(floor(ar+0.97),1.0);\n    ag=min(floor(ag+0.97),1.0);\n    ab=min(floor(ab+0.97),1.0);\n\n    // Time varying pixel color\n    vec3 col = vec3(tex.r*ar,tex2.g*ag,tex3.b*ab); //vec3(r);//\n    \n    vec3 backup=vec3(tex.r,tex2.g,tex3.b);\n    // Output to screen\n    fragColor = vec4(col,1.);//vec4(cos(i2.x*100.),1.0,1.,1.0);\n}","name":"Image","description":"","type":"image"}]}