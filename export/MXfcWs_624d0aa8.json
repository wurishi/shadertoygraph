{"ver":"0.1","info":{"id":"MXfcWs","date":"1727205090","viewed":34,"name":"N(o)ephoid","username":"mailice","description":"A small school project for my son, Noe\nThis is an animated Nephoide, with animated parameters\n\nInspiration: https://www.youtube.com/watch?v=-X49VQgi86E","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Denis Haumont\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//=========================================================================\nfloat modulo                 = 855.0;\nfloat vitesse_modulo         = 0.0;\n\nfloat table                  = 300.0;\nfloat vitesse_table          = 1.0;\n\nvec2  centre_cercle          = vec2(0.5,0.5);\nfloat taille_cercle          = 0.25;    \nfloat epaisseur_ligne        = 0.1;\nfloat lissage_ligne          = 13.0;\n//=========================================================================\n\n\n//Routines From Iq\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n//=========================================================================\n\nfloat angle(float numero_sommet, float nombre_sommets)\n{\n    return mod(numero_sommet,nombre_sommets) * 2.0 *3.14159 / nombre_sommets;\n}\n\n//=========================================================================\n\nvec2 position_sur_cercle(float numero_sommet, float nombre_sommets)\n{\n    float angle = angle(numero_sommet, nombre_sommets);\n    return vec2(cos(angle), sin(angle));    \n}\n\n//=========================================================================\n\nvec3 couleur_sommet(float numero_sommet, float nombre_sommets)\n{\n    float angle = angle(numero_sommet, nombre_sommets);\n    \n    float rouge = 0.5 *( 1.0 + cos(angle));\n    float vert  = 0.0;\n    float bleu  = 0.5* ( 1.0 + sin(angle));\n    \n    rouge *= 255.0 / nombre_sommets;\n    vert  *= 255.0 / nombre_sommets;\n    bleu  *= 255.0 / nombre_sommets;\n    \n    return vec3(rouge, vert, bleu);    \n}\n\n\n//=========================================================================\n\nvec3 couleur_cercle(vec2 p, vec2 centre_cercle, float taille_cercle,float ratio_ecran)\n{\n    vec2 v = (p - centre_cercle);\n    v.y /= ratio_ecran;\n    float d = sqrt(v.x*v.x+v.y*v.y) / taille_cercle;\n       \n    \n    vec3 couleur_exterieur = vec3(0.2,0.1,0.1);\n    vec3 couleur_centre    = vec3(0.6,0.4,0.6);\n    \n    return d * couleur_exterieur + (1.0 - d) * couleur_centre;\n}\n\n//=========================================================================\n\nvec3 dessine_ligne(vec2 p, vec2 position_debut_ligne, vec2 position_fin_ligne, \n                   vec3 couleur_ligne, float epaisseur_ligne, \n                   vec2 centre_cercle, float taille_cercle, float ratio_ecran)\n{\n    vec2 a = position_debut_ligne;\n    vec2 b = position_fin_ligne;\n    \n    // prise en compte de la taille de l'ecran pour obtenir un cercle\n    a.y *= ratio_ecran;\n    b.y *= ratio_ecran;\n    \n    //mise a la bonne taille;\n    a *= taille_cercle;\n    b *= taille_cercle;\n    \n    //deplacement du cercle a la position voulue\n    a += centre_cercle;\n    b += centre_cercle;\n    \n    \n    return couleur_ligne *(1.0 -smoothstep(epaisseur_ligne,\n                                           lissage_ligne*epaisseur_ligne,\n                                           sdSegment(p,a,b)));\n}\n//=========================================================================\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calcul de differentes constantes\n    float e = epaisseur_ligne/iResolution.y;\n \tvec2  p = fragCoord.xy/iResolution.xy;\n    float ratio_ecran = iResolution.x / iResolution.y;\n    vec3 couleur = vec3( 1.0 );    \n    float temps= iTime;\n    \n    \n    // Calcul du nombre de lignes et du multiplicateur\n    float nombre_lignes = modulo + temps * vitesse_modulo;\n    float multiplicateur = table + temps * vitesse_table;\n    \n    float numero_ligne = 0.0;\n    \n    while (numero_ligne<nombre_lignes)\n    { \n        vec2 position_debut_ligne = position_sur_cercle(numero_ligne               , nombre_lignes);\n        vec2 position_fin_ligne   = position_sur_cercle(numero_ligne*multiplicateur, nombre_lignes);\n\n        vec3 couleur_point = couleur_cercle(p,centre_cercle, taille_cercle, ratio_ecran);\n         \n        couleur -= dessine_ligne(p, position_debut_ligne,position_fin_ligne,\n                                    couleur_point,e, \n                                    centre_cercle, taille_cercle, ratio_ecran);\n        \n        numero_ligne = numero_ligne + 1.0;      \n    }\n    \n    \n    fragColor = vec4( couleur, 1.0 );\n}","name":"Image","description":"","type":"image"}]}