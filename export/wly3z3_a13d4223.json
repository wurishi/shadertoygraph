{"ver":"0.1","info":{"id":"wly3z3","date":"1579475326","viewed":110,"name":"god rays test","username":"stonedape","description":"test4567899","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test4567899"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI=3.14156263;\nvec3 camP=vec3(0.,0.,0.);\nfloat etaR=1./1.5;\nfloat dt=.6;\nfloat Gmm=0.;\nfloat diskR2=19.;\nfloat diskR1=9.;\n\n\nvec3 lightP=vec3(800.,1000.,1000.);\nvec3 lightD=normalize(vec3(-.7,-1.,\t2.));\n\nvec3 blackHole=vec3(0.,1.,-35.);\n\n\nvec3 sphP1=vec3(5.,0.,-40.);\nfloat sphR1=3.;\nint ref1=0;\n\nvec3 sphP2=vec3(-2.,5.,-42.);\nfloat sphR2=3.;\nint ref2=0;\n\nvec3 planeN1=vec3(0.,1.,0.);\nfloat planeD1=-5.;\nint ref3=0;\n\nvec3 planeN2=normalize(vec3(-1.,0.0001,0.));\nfloat planeD2=-5.;\nint ref4=0;\n\nvec3 planeN3=normalize(vec3(1.,0.0001,0.));\nfloat planeD3=-10.;\nint ref5=0;\n\nvec3 lens(vec3 p,vec3 v){\n    vec3 r=p-blackHole;\n    return normalize(v-Gmm/(pow(length(r),3.))*r*dt);\n}\n    \n\nfloat planeInter(vec3 p,vec3 v,vec3 n,float D,inout bool hit){\n    float t=(D-dot(n,p))/(dot(n,v));\n    if (t<0.){\n        hit=false;\n        return 4200000000.;\n    }\n    return t;\n}\n                         \n        \n\nvec2 sphInter(vec3 p,vec3 v,vec3 C,float r,inout bool hit){\n    v=normalize(v);\n    float a=dot(v,v);\n    float b=2.*dot(v,p-C);\n    float c=dot(p-C,p-C)-pow(r,2.);\n    float D=pow(b,2.)-4.*a*c;\n    if (D>0.){\n    \tfloat t1=(-b+sqrt(D))/(2.*a);\n        float t2=(-b-sqrt(D))/(2.*a);\n        return vec2(t1,t2);\n    }\n    else{\n        hit=false;\n        return vec2(0.,42000000.);\n    }\n}\n\nfloat getT(vec3 p,vec3 v,vec3 sphP,float sphR,inout bool hit){\n    vec2 ts=sphInter(p,v,sphP,sphR,hit);\n    if (!hit) return 42000000.;\n    if (ts.x<0. && ts.y<0.){\n        hit=false;\n        return 42000000.; \n    }\n    float t;\n    if (ts.x*ts.y<0.) t=max(ts.x,ts.y);else t=min(ts.x,ts.y);\n    if (t<0.){ \n        hit=false;\n        return 42000000.;\n    }\n    return t;\n}\n   \nvec3 shade(vec3 c,vec3 p,vec3 v,vec3 n){\n    vec3 N=normalize(n);\n    vec3 L=-lightD;//normalize(lightP-p);\n    vec3 R=reflect(L,N);\n    return c*dot(N,L)+vec3(1.)*pow(dot(-v,R),23.);\n}\n   \n\nbool raytrace(inout vec3 p,inout vec3 v,inout vec3 col,inout int ref){\n    bool hit1=true;\n    bool hit2=true;\n    bool hit3=true;\n    bool hit4=true;\n    bool hit5=true;\n    \n    float t1=getT(p,v,sphP1,sphR1,hit1);\n    float t2=getT(p,v,sphP2,sphR2,hit2);\n    float t3=planeInter(p,v,planeN1,planeD1,hit3);\n    float t4=planeInter(p,v,planeN2,planeD2,hit4);\n    float t5=planeInter(p,v,planeN3,planeD3,hit5);\n    \n    float sign=1.;\n    if (ref==2) sign=-1.;\n    \n    if (!hit1 && !hit2 && !hit3 && !hit4 && !hit5) return false;\n    \n    /*if (!hit1 && !hit2 && !hit3 && !hit4 && !hit5){\n        p+=v*dt;\n        v=lens(p,v);\n        ref=3;\n        return true;\n    }*/\n    \n    \n    t4=1e20;\n    //t5=1e20;\n    float t=min(min(min(t1,t2),min(t3,t4)),t5);\n    if (t>10000.) return false;\n    \n    /*if (t>dt){\n        p+=v*dt;\n        v=lens(p,v);\n        ref=3;\n        return true;\n    }*/\n    \n    \n    p+=v*t;\n    \n    vec3 col1=vec3(1.,0.,1.);\n    vec3 col2=vec3(0.,1.,0.);\n    vec3 vf;\n    if (t==t1){\n        ref=ref1;\n        col=shade(col1,p,v,p-sphP1);\n        vf=refract(v,sign*normalize(p-sphP1),pow(etaR,sign));\n        v=reflect(v,normalize(p-sphP1));\n        \n    }\n    if (t==t2){\n        ref=ref2;\n        col=shade(col1,p,v,p-sphP2);\n        vf=refract(v,sign*normalize(p-sphP2),pow(etaR,sign));\n        v=reflect(v,normalize(p-sphP2));\n    }\n    if (t==t3){\n        ref=ref3;\n        col=shade(col2,p,v,planeN1);\n        vf=refract(v,sign*planeN1,pow(etaR,sign));\n        v=reflect(v,planeN1);\n    }\n    if (t==t4){\n        ref=ref4;\n        col=shade(col2,p,v,planeN2);\n        vf=refract(v,sign*planeN2,pow(etaR,sign));\n        v=reflect(v,planeN2);\n    }\n    if (t==t5){\n        ref=ref5;\n        col=shade(col2,p,v,planeN3);\n        vf=refract(v,sign*planeN3,pow(etaR,sign));\n        v=reflect(v,planeN3);\n    }\n    \n    if (ref==0) v=-lightD;//normalize(lightP-p);\n    if (ref==2) v=normalize(vf);\n    p+=v*.01;\n    return true;\n}\n\nbool raytraceStep(inout vec3 p,inout vec3 v,inout vec3 col,inout int ref){\n    bool hit1=true;\n    bool hit2=true;\n    bool hit3=true;\n    bool hit4=true;\n    bool hit5=true;\n    \n    float t1=getT(p,v,sphP1,sphR1,hit1);\n    float t2=getT(p,v,sphP2,sphR2,hit2);\n    float t3=planeInter(p,v,planeN1,planeD1,hit3);\n    float t4=planeInter(p,v,planeN2,planeD2,hit4);\n    float t5=planeInter(p,v,planeN3,planeD3,hit5);\n    \n    float sign=1.;\n    if (ref==2) sign=-1.;\n    \n    //if (!hit1 && !hit2 && !hit3 && !hit4 && !hit5) return false;\n    \n    if (!hit1 && !hit2 && !hit3 && !hit4 && !hit5){\n        p+=v*dt;\n        //v=lens(p,v);\n        ref=3;\n        return true;\n    }\n    \n    \n    t4=1e20;\n    //t5=1e20;\n    float t=min(min(min(t1,t2),min(t3,t4)),t5);\n    if (t>10000.) return false;\n    \n    if (t>dt){\n        p+=v*dt;\n        //v=lens(p,v);\n        ref=3;\n        return true;\n    }\n    \n    \n    p+=v*t;\n    \n    vec3 col1=vec3(1.,0.,1.);\n    vec3 col2=vec3(0.,1.,0.);\n    vec3 vf;\n    if (t==t1){\n        ref=ref1;\n        col=shade(col1,p,v,p-sphP1);\n        vf=refract(v,sign*normalize(p-sphP1),pow(etaR,sign));\n        v=reflect(v,normalize(p-sphP1));\n        \n    }\n    if (t==t2){\n        ref=ref2;\n        col=shade(col1,p,v,p-sphP2);\n        vf=refract(v,sign*normalize(p-sphP2),pow(etaR,sign));\n        v=reflect(v,normalize(p-sphP2));\n    }\n    if (t==t3){\n        ref=ref3;\n        col=shade(col2,p,v,planeN1);\n        vf=refract(v,sign*planeN1,pow(etaR,sign));\n        v=reflect(v,planeN1);\n    }\n    if (t==t4){\n        ref=ref4;\n        col=shade(col2,p,v,planeN2);\n        vf=refract(v,sign*planeN2,pow(etaR,sign));\n        v=reflect(v,planeN2);\n    }\n    if (t==t5){\n        ref=ref5;\n        col=shade(col2,p,v,planeN3);\n        vf=refract(v,sign*planeN3,pow(etaR,sign));\n        v=reflect(v,planeN3);\n    }\n    \n    if (ref==0) v=-lightD;//normalize(lightP-p);\n    if (ref==2) v=normalize(vf);\n    p+=v*.01;\n    return true;\n}\n\n\n\n\nmat3 getRotY(float theta){\n    return mat3(cos(theta),0.,-sin(theta),\n                0.,1.,0.,\n                sin(theta),0., cos(theta));\n}\n\nmat3 getRotX(float theta){\n    return mat3(1.,0.,0.,\n                0.,cos(theta),sin(theta),\n                0.,-sin(theta), cos(theta));\n}\n\nfloat map(float t,float a,float b,float c,float d){\n    return c+(d-c)*(t-a)/(b-a);\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv*=2.;\n    uv.y*=iResolution.y/iResolution.x;\n    \n    float theta=map(iMouse.x,0.,iResolution.x,-PI,PI);\n    float phi=map(iMouse.y,0.,iResolution.y,-PI/2.,PI/2.);\n    \n    float fov=.25*PI;\n    float hyp=1./sin(fov/2.);\n    float sd=sqrt(hyp-1.);\n    vec3 v=vec3(uv.x,uv.y,-sd)-camP;\n    v=normalize(v);\n    \n    //v=getRotY(-theta)*getRotX(-phi)*v;\n    \n    \n    vec3 p=vec3(camP.x,camP.y,camP.z);\n    \n    vec3 Col=vec3(.7,.8,1.)+\n        vec3(1.)*pow(dot(-v,normalize(lightD)),630.);\n    \n    //Col=vec3(0.);\n    vec3 col=vec3(Col);\n    vec3 scol=vec3(0.);\n    \n    int ref=0;\n    const int imax=130;\n    float grSub=0.;\n    \n    \n    for (int i=0;i<imax;i++){\n        bool hit=raytraceStep(p,v,col,ref);\n        if (!hit){\n            col=vec3(Col);\n            break;\n        }\n        if (ref==3){\n            vec3 np=vec3(p);\n            vec3 nv=-lightD;\n            int nref=ref;\n            if(raytrace(np,nv,scol,nref)){\n                grSub+=.02;\n            }\n        }\n            \n        if (ref==0){\n            if(raytrace(p,v,scol,ref)){\n                col=vec3(0.);\n            }\n            break;\n        }\n        if(i==imax-1) col=vec3(Col);\n    }\n        \n    \n           \n    col-=vec3(grSub);       \n            \n        \n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}