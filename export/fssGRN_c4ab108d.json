{"ver":"0.1","info":{"id":"fssGRN","date":"1615588485","viewed":286,"name":"Light Balls Or Something","username":"Rugged","description":"I'm just happy that I can finally reference data from buffer's, so I just made this to test it out.\n\nTry clicking.   < I like to wait till they settle at the bottom, then hold","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["example","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash3(vec2 xy){\n    xy = mod(xy, .19);\n    float h = dot(xy.yyx, vec3(.013, 27.15, 2027.3));\n    h *= h;\n    h *= fract(h);\n    \n    return fract(h);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uvc = uv - vec2(.5);\n    \n    ivec2 resI = ivec2(iResolution.xy);\n    ivec2 fragI = ivec2(fragCoord);\n    \n    vec3 col = vec3(0.);\n    \n    //load count of particles\n    float c = texelFetch(iChannel0, ivec2(0, resI.y - 10), 0).x;\n    \n    //loop through each particle\n    for(int i = 0; i < int(c); i++){\n        \n        //get particle data\n        vec4 p = texelFetch(iChannel0, ivec2(i, 0), 0);\n        \n        //draw the point effect (.5 centers (0, 0) to middle of screen)\n        col += vec3(1. / (2e3 * distance(.5 * p.xy, uvc)));\n        \n        \n    }\n    \n    //col = texture(iChannel0, uv);\n    \n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash3(vec2 xy){\n    xy = mod(xy, .19);\n    float h = dot(xy.yyx, vec3(.013, 27.15, 2027.3));\n    h *= h;\n    h *= fract(h);\n    \n    return fract(h);\n}\n\n#define count 100.\n\n#define offset 0.\n\n#define speed .01\n\n//higher gravScale means less gravity\n#define gravScale 60.\n\n//lower makes their energy dampen faster\n#define elas .6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    //res in ivec form\n    ivec2 resI = ivec2(iResolution.xy);\n    \n    //frag in ivec form\n    ivec2 fragI = ivec2(fragCoord);\n    \n    vec4 col = texelFetch(iChannel0, fragI, 0);\n    \n    float t = iTime * .1;\n    \n    \n    if(iFrame == 0){\n        if(fragI == ivec2(0, resI.y - 10)){\n            col = vec4(count);\n        }\n        else if(fragI.y == 0 && fragI.x < int(count)){\n            //origin of the vector\n            vec2 d = vec2(hash3(uv + t), hash3(uv.yx + t));\n            //vector\n            vec2 o = vec2(.5);\n            \n            //center them around (0, 0) â€” they were between 0. and 1. before, but now they're between -1. and 1.\n            o*=2.;\n            o-=1.;\n            \n            d*=2.;\n            d-=1.;\n            \n            //save data (origin or location, velocity)\n            col = vec4(o, d);\n            \n        }\n        \n        \n        \n    }\n    else if(fragI.y == 0 && fragI.x < int(count)){\n        vec4 p = texelFetch(iChannel0, fragI, 0);\n        \n        //if on or past the border (-1, 1) then turn back\n        if(abs(p.x) >= 1.){\n            //make sure it cant get stuck outside of the border\n            p.x = p.x / abs(p.x);\n            //reverse directions\n            p.z = -p.z;\n            //dampen energy\n            p.z*= elas;\n        }\n        if(abs(p.y) >= 1.){\n            //make sure it cant get stuck outside of the border\n            p.y = p.y / abs(p.y);\n            //reverse directions\n            p.w = -p.w;\n            //also dampen energy\n            p.w*= elas;\n        }\n        \n        if(iMouse.z > .0){\n            vec2 mUV = iMouse.xy / iResolution.xy;\n            mUV *= 2.;\n            mUV -= 1.;\n            \n            p.zw += (mUV - p.xy) / (gravScale * distance(mUV, p.xy));\n        }\n        \n        //move the point\n        p.xy += p.zw * speed;\n        //pull towards bottom edge\n        p.w -= .01;\n        \n        //save data\n        col = p;\n        \n    }\n    \n    \n    \n    \n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}