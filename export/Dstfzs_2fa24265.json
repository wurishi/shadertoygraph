{"ver":"0.1","info":{"id":"Dstfzs","date":"1702379579","viewed":102,"name":"quadtree / ocr","username":"Doris","description":"Mouse.x drives the threshold on which quad are divided.","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["filter","tree","tree","quad","quadtree"],"hasliked":0,"parentid":"wslcWf","parentname":"Probabilistic quadtree filter"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// @license MIT\n// @author ciphrd\n// \n// This algorithm is sort of a probabilistic quad tree construction where quad divisions are \n// added if the color variation (variance) in a quad is too important.\n// \n// The color variation is computed by taking n samples within the quad, and then we compute the \n// variance on each color component of the samples.\n//\n//\n// Limitations\n// \n// If a certain area, which is large, has a small section of it being detailed while the rest\n// is pretty much linear, divisions might not be added. Because this algorithm picks random\n// points in the quad, the small detailed section has little to no infuence on the overall\n// variations of the colors in the quad.\n// You can observe this behavior on the Google logo when it appears.\n//\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\n// the number of divisions at the start\n#define MIN_DIVISIONS 2.0\n\n// the numer of possible quad divisions\n#define MAX_ITERATIONS 4\n\n// the number of samples picked fter each quad division\n#define SAMPLES_PER_ITERATION 30\n#define F_SAMPLES_PER_ITERATION 30.\n\n// useless, kept it for reference for a personal usage \n#define MAX_SAMPLES 200\n\n// threshold min, max given the mouse.x\n#define THRESHOLD_MIN 0.0001\n#define THRESHOLD_MAX 0.01\n\n\n// taken from http://glslsandbox.com/e#41197.0\nvec2 hash22(vec2 p) { \n    float n = sin(dot(p, vec2(41, 289)));\n    return fract(vec2(262144, 32768)*n);    \n}\n\n\n// Computes the color variation on a quad division of the space\n// Basically, this method takes n random samples in a given quad, compute the average \n// of each color component of the samples.\n// Then, it computes the variance of the samples\n// This is the way I thought for computing the color variation, there might be others,\n// and there must be better ones\nvec4 quadColorVariation (in vec2 center, in float size) {\n    // this array will store the grayscale of the samples\n    vec3 samplesBuffer[SAMPLES_PER_ITERATION];\n    \n    // the average of the color components\n    vec3 avg = vec3(0);\n    \n    // we sample the current space by picking pseudo random samples in it \n    for (int i = 0; i < SAMPLES_PER_ITERATION; i++) {\n        float fi = float(i);\n        // pick a random 2d point using the center of the active quad as input\n        // this ensures that for every point belonging to the active quad, we pick the same samples\n        vec2 r = hash22(center.xy + vec2(fi, 0.0)) - 0.5;\n        vec3 sp = texture(iChannel0, center + r * size).rgb;\n        avg+= sp;\n        samplesBuffer[i] = sp;\n    }\n    \n    avg/= F_SAMPLES_PER_ITERATION;\n    \n    // estimate the color variation on the active quad by computing the variance\n    vec3 var = vec3(0);\n    for (int i = 0; i < SAMPLES_PER_ITERATION; i++) {\n    \tvar+= pow(samplesBuffer[i], vec3(2.0));\n    }\n    var/= F_SAMPLES_PER_ITERATION;\n    var-= pow(avg, vec3(2.0));\n        \n    return vec4(avg, (var.x+var.y+var.z)/3.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float threshold = mix(THRESHOLD_MIN, THRESHOLD_MAX, iMouse.x / iResolution.x);\n    \n    // number of space divisions\n    float divs = MIN_DIVISIONS;\n\n    // the center of the active quad - we initialze with 2 divisions\n    vec2 quadCenter = (floor(uv * divs) + 0.5) / divs;\n    float quadSize = 1. / divs; // the length of a side of the active quad\n    \n    // we store average and variance here\n    vec4 quadInfos = vec4(0);\n    \n    for (int i = 0; i < MAX_ITERATIONS; i++) {\n    \tquadInfos = quadColorVariation(quadCenter, quadSize);\n        \n    \t// if the variance is lower than the threshold, current quad is outputted\n        if (quadInfos.w < threshold) break;\n        \n        // otherwise, we divide the space again\n        divs*= 2.0;\n        quadCenter = (floor(uv * divs) + 0.5) / divs;\n        quadSize/= 2.0;\n    }\n    \n\n    \n    vec4 color = texture(iChannel0, uv);\n    \n    // the coordinates of the quad\n    vec2 nUv = fract(uv * divs);\n    \n    // we create lines from the uv coordinates\n    vec2 lWidth = vec2(1./iResolution.x, 1./iResolution.y);\n    vec2 uvAbs = abs(nUv-0.5);\n    float s = step(0.5-uvAbs.x, lWidth.x*divs) + step(0.5-uvAbs.y, lWidth.y*divs);\n    \n    // we smooth the color between average and texture initial\n    //color.rgb = mix(color.rgb, quadInfos.rgb, uv.x);\n    \n    // we smooth the lines over the x axis\n    //s*= pow(1. - uv.x, 4.0);\n    \n    // for black lines, we just subtract\n    //color-= s;\n    \n    float val = 1.0 - pow(noise(vec2(10.0 * (quadCenter.y + quadSize * 2.0), 10.0 * (quadCenter.x + quadSize * 2.0)+  iTime * 2.0)), 3.0);\n    val *= iMouse.x / iResolution.x;\n    vec4 col = texture(iChannel0, uv + \n    vec2(val, 0.0)); \n    \n    col = mix(col, vec4(0.0), val);\n\n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}