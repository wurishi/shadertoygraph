{"ver":"0.1","info":{"id":"dtlyRB","date":"1690908819","viewed":184,"name":"Shader in Shader","username":"notdesby","description":"Pixelated shader, pixels grid","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["grid","pixel","shader","pixelart","pixelated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//grid resolution\n#define k 42.0\n\nvec3 mainimage(vec2 uv, vec2 resolution) {\n    \n    //sample @Flyguy https://www.shadertoy.com/view/XsSfW1 \n    vec4 c = vec4(0.0);\n    vec2 o = 2.0*uv-1.0;\n    vec2 r = resolution.xy;\n    \n    o = o * r/2.0 + r/2.0;\n    o = vec2(length(o -= r/2.) / r.y - .3, atan(o.y,o.x));    \n    vec4 s = c.yzwx = .1*cos(1.6*vec4(0,1,2,3) + iTime + o.y + sin(o.y) * sin(iTime)*2.);\n    c = dot(40.*(s-c), step(1./r.y, c = min(o.x-s,c-o.x))) * (s-.1) - c;\n    \n    //output\n    vec3 col = c.rgb;\n   \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord/iResolution.xy; //normalize coord\n    float aspr = iResolution.x/iResolution.y; //aspect ratio\n        \n    //pixel position in grid\n    vec2 griduv = vec2((1.0/(k*aspr))*floor(aspr*k*uv.x),(1.0/k)*floor(k*uv.y));\n    \n    vec3 col = mainimage(griduv,vec2(k*aspr,k));\n    \n    //output color\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}