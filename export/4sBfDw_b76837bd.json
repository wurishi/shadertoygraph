{"ver":"0.1","info":{"id":"4sBfDw","date":"1500573659","viewed":1826,"name":"Domain Warping: Oil","username":"zaiyugi","description":"Experimenting with domain warping using fbms and turbulence. Credit to iq for this article: https://iquilezles.org/articles/warp/warp.htm","likes":63,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nZachary Shore\nDPA8090: Rendering and Shading\nHW2: Fractal Brownian Motion\n*/\n\n#define M_PI 3.14159265359\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{ \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i); \n    vec4 p = \n        permute\n        (\n            permute\n            ( \n                permute\n                (\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0)\n                )\n                + i.y + vec4(0.0, i1.y, i2.y, 1.0 )\n            )\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 )\n        );\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\n// p: position\n// o: how many layers\n// f: frequency\n// lac: how fast frequency changes between layers\n// r: how fast amplitude changes between layers\nfloat fbm4(vec3 p, float theta, float f, float lac, float r)\n{\n    mat3 mtx = mat3(\n        cos(theta), -sin(theta), 0.0,\n        sin(theta), cos(theta), 0.0,\n        0.0, 0.0, 1.0);\n\n    float frequency = f;\n    float lacunarity = lac;\n    float roughness = r;\n    float amp = 1.0;\n    float total_amp = 0.0;\n\n    float accum = 0.0;\n    vec3 X = p * frequency;\n    for(int i = 0; i < 4; i++)\n    {\n        accum += amp * snoise(X);\n        X *= (lacunarity + (snoise(X) + 0.1) * 0.006);\n        X = mtx * X;\n\n        total_amp += amp;\n        amp *= roughness;\n    }\n\n    return accum / total_amp;\n}\n\nfloat fbm8(vec3 p, float theta, float f, float lac, float r)\n{\n    mat3 mtx = mat3(\n        cos(theta), -sin(theta), 0.0,\n        sin(theta), cos(theta), 0.0,\n        0.0, 0.0, 1.0);\n\n    float frequency = f;\n    float lacunarity = lac;\n    float roughness = r;\n    float amp = 1.0;\n    float total_amp = 0.0;\n\n    float accum = 0.0;\n    vec3 X = p * frequency;\n    for(int i = 0; i < 8; i++)\n    {\n        accum += amp * snoise(X);\n        X *= (lacunarity + (snoise(X) + 0.1) * 0.006);\n        X = mtx * X;\n\n        total_amp += amp;\n        amp *= roughness;\n    }\n\n    return accum / total_amp;\n}\n\nfloat turbulence(float val)\n{\n    float n = 1.0 - abs(val);\n    return n * n;\n}\n\nfloat pattern(in vec3 p, inout vec3 q, inout vec3 r)\n{\n    q.x = fbm4( p + 0.0, 0.0, 1.0, 2.0, 0.33 );\n    q.y = fbm4( p + 6.0, 0.0, 1.0, 2.0, 0.33 );\n\n    r.x = fbm8( p + q - 2.4, 0.0, 1.0, 3.0, 0.5 );\n    r.y = fbm8( p + q + 8.2, 0.0, 1.0, 3.0, 0.5 );\n\n    q.x = turbulence( q.x );\n    q.y = turbulence( q.y );\n\n    float f = fbm4( p + (1.0 * r), 0.0, 1.0, 2.0, 0.5);\n\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    st.x *= aspect;\n\n    vec2 uv = st;\n\n    float t = iTime * 0.1;\n\n    vec3 spectrum[4];\n    spectrum[0] = vec3(0.94, 0.02, 0.03);\n    spectrum[1] = vec3(0.04, 0.04, 0.22);\n    spectrum[2] = vec3(1.00, 0.80, 1.00);\n    spectrum[3] = vec3(0.20, 0.40, 0.50);\n\n    uv -= 0.5;\n    uv *= 3.5;\n\n    vec3 p = vec3(uv.x, uv.y, t);\n    vec3 q = vec3(0.0);\n    vec3 r = vec3(0.0);\n    float f = pattern(p, q, r);\n\n    vec3 color = vec3(0.0);\n    color = mix(spectrum[1], spectrum[3], pow(length(q), 4.0));\n    color = mix(color, spectrum[0], pow(length(r), 1.4));\n    color = mix(color, spectrum[2], f);\n\n    color = pow(color, vec3(2.0));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}