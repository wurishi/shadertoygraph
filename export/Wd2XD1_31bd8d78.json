{"ver":"0.1","info":{"id":"Wd2XD1","date":"1553742462","viewed":2495,"name":"Ray marching 2D Clouds","username":"ming","description":"Based on 2D Clouds by drift  https://www.shadertoy.com/view/4tdSWr\nAdded 2d ray marching support to simulate volumetric looking.\nUse mouse click to change sun direction.\n\n\n\n","likes":36,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching","cloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float cloudscale = 0.45;\nconst float speed = 0.03;\nconst vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skycolour2 = vec3(0.4, 0.7, 1.0);\nconst float ambient = 0.15;\nconst float intensity = 1.25;\n\n\nconst mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\nvec2 hash( vec2 p ) {\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    p = p * cloudscale;\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\tvec2 i = floor(p + (p.x+p.y)*K1);\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\t\n}\n\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 0.1;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn = m * n;\n\t\tamplitude *= 0.4;\n\t}\n\treturn total;\n}\n\nfloat density(vec2 p, vec2 aspect, vec2 time)\n{\n    //ridged noise shape\n\tvec2 uv = p * aspect;\n    \n    float s1 = 1.0;\n    \n    float r = 0.0;\n\tuv *= s1;\n    uv -= time;\n    float weight = 0.8;\n    for (int i=0; i<5; i++){\n\t\tr += abs(weight*noise( uv ));\n        uv = m*uv + time;\n\t\tweight *= 0.7;\n    }\n    \n    //noise shape\n    float s2 = 1.2;\n    \n\tfloat f = 0.0;\n    uv = p * aspect;\n\tuv *= s2;\n    uv -= time;\n    weight = 0.7;\n    for (int i=0; i<8; i++){\n\t\tf += weight*noise( uv );\n        uv = m*uv + time;\n\t\tweight *= 0.6;\n    }\n    \n    f *= r + f * 1.;\n    f = clamp(f, 0., 1.);\n    f = 1. - (1. - f) * (1. - f);\n    return f;\n    \n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   \n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    \n    vec2 p0 = fragCoord.xy / iResolution.xy;\n    float q = fbm(p0 * cloudscale * 0.5);\n    \n     \n    float t = (iTime + 45.0) * speed;\n    vec2 time = vec2(q + t * 1.0, q + t * 0.25);\n\t\n    vec2 dist = (vec2(16.) / iResolution.xy);\n    const int steps = 8;\n    float steps_inv = 1.0 / float(steps);\n    \n    vec2 sun_dir = ((iMouse.xy / iResolution.xy) * 2. - 1.);\n    \n    vec2 dp = normalize(sun_dir) * dist * steps_inv;\n    \n    float T = 0.0;\n    \n    vec2 p = p0;\n    float dens0 = density(p, aspect, time);\n    float A = dens0;\n    \n    for(int i = 0; i < steps; ++i)\n    {\n        float h = float(i) * steps_inv;\n        p +=  dp * (1. + h * (hash(p) * 0.75)); // increase step size for each step\n        \n   \t\tfloat dens = density(p, aspect, time);\n        T += (clamp((dens0 - dens), 0.0, 1.0) + ambient * steps_inv) * (1. - h);\n    }\n    \n    T = clamp(T, 0.0, 1.0);\n    \n    vec3 skycolour = mix(skycolour2, skycolour1, p0.y);\n    \n    \n    vec3 C = vec3(0.0);\n    C = vec3(T) * intensity;\n    C = vec3(1.) - (vec3(1.) - C) * (vec3(1.) - skycolour * 0.5);\n    \n    float A2 = smoothstep(0.2, 1.0, A * A);\n    \n    \n    float sun = 1. - clamp( distance(p0 * vec2(2.) - vec2(1.), sun_dir * 1.2), 0.0, 1.0);\n   \tvec3 suncolour = vec3(pow(sun, 2.5)) * 0.5;\n    \n    skycolour += suncolour;\n    \n    vec3 R =  mix(skycolour, C, A2);\n    \n    fragColor = vec4( R, 1.0 );\n}","name":"Image","description":"","type":"image"}]}