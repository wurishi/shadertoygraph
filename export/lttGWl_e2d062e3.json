{"ver":"0.1","info":{"id":"lttGWl","date":"1472506409","viewed":314,"name":"GLSL function plotter (1D)","username":"Dmytry","description":"A purely utilitarian function plotter, for debugging glsl shaders.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 range_low=vec2(-2.0, -2.0);\nconst vec2 range_high=vec2(2.0, 2.0);\n\nfloat a=0.2;\nfloat f(float x){\n    //return x*x;\n    //return sin(x);\n    // at x=a slope=2*a , value=a*a/(2*a)\t\n    //if(x<0.0)return 0.0;\n    //x=max(x,0.0);\n    \n    // not sure what would be faster\n    \n    //return max(x-a, 0.0)+min(x*x/(2.0*a), 0.5*a);\n    \n    float x_=clamp(x, 0.0, a);    \n    return max(x-0.5*a, x_*x_*0.5/(a));\n    \n    //return x<a ? x*x*0.5/a : x-0.5*a;\n}\n\n\n#define plot(f_, color) { float x=pos.x*in_scale+range_low.x; float h1=((f_)-range_low.y)*out_scale; x+=in_scale; float h2=((f_)-range_low.y)*out_scale; float y2=clamp(pos.y, min(h1,h2), max(h1,h2)); float c=clamp(1.0-abs(pos.y-y2),0.0,1.0); fragColor.xyz+=c*color;}\n\t\n//#define line_v(line_x, color) if(pos.x*in_scale+range_low.x<=line_x && (pos.x+1.0)*in_scale+range_low.x>line_x)fragColor.xyz+=color;\n//#define line_h(line_y, color) {float y=(line_y-range_low.y)*out_scale; if(pos.y<=y && pos.y+1.0>y)fragColor.xyz+=color; }\n\n#define line_v(line_x, color) fragColor.xyz+=clamp(1.0-abs((plot_pos.x-line_x)/plot_delta.x),0.0,1.0)*color; \n#define line_h(line_y, color) fragColor.xyz+=clamp(1.0-abs((plot_pos.y-line_y)/plot_delta.y),0.0,1.0)*color; \n#define grid(offset, step, color) { vec2 p=mod(plot_pos-offset+0.5*step, step)-0.5*step; fragColor.xyz+=(clamp(1.0-abs(p.x/plot_delta.x),0.0,1.0)+clamp(1.0-abs(p.y/plot_delta.y),0.0,1.0))*color; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=vec4(0,0,0,1);\n    vec2 pos=fragCoord.xy;\n    // center the graph horizontally.\n    pos.x-=0.5*(iResolution.x-iResolution.y);    \n    \n    float in_scale=(range_high.x-range_low.x)/iResolution.y; \n    float out_scale=iResolution.y/(range_high.y-range_low.y);\n    \n    vec2 plot_delta=(range_high-range_low)*(1.0/iResolution.y);\n    vec2 plot_pos=plot_delta*pos+range_low;    \n    \n    line_v(range_low.x, vec3(0.5));\n    line_v(range_high.x, vec3(0.5));\n\n    line_v(0.0, vec3(0,0.2,0));\n    line_h(0.0, vec3(0.2,0,0));\n    \n    plot(f(x)/(1.0-0.5*a), vec3(0,1,1));\n    plot(x, vec3(1,0,0));\n    \n    grid(vec2(0.0), vec2(0.1,0.1), vec3(0.0, 0.0, 0.25));\n    grid(vec2(0.0), vec2(0.5,0.5), vec3(0.0, 0.0, 0.25));\n    grid(vec2(0.0), vec2(1,1), vec3(0.0, 0.0, 0.25));\n    //plot(x, vec3(0,0,1))\n    //plot(x*x, vec3(0,1,1))\n}","name":"Image","description":"","type":"image"}]}