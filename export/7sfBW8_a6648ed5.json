{"ver":"0.1","info":{"id":"7sfBW8","date":"1644775605","viewed":128,"name":"Simplex Voronoi 2D","username":"VL","description":".","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define int2 vec2\n#define float2 vec2\n#define int3 vec3\n#define float3 vec3\n#define frac fract\n#define sincos(x,s,c) s = sin(x),c = cos(x)\n\nfloat2 hash(float2 p)\n{\n    float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return frac((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat3 hash(float3 p3)\n{\n    p3 = frac(p3 * float3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return frac((p3.xxy + p3.yxx) * p3.zyx);\n}\n\nconst float FloatMax = 3.402823466e+38f;\n\nfloat simplexVoronoiTest(float2 uv, float t)\n{   \n    const float k1 = 0.366025f;\n    const float k2 = 0.211324f; ;\n\n    int2 idx = floor(uv + (uv.x + uv.y) * k1);\n    float2 suv = uv - (float2(idx) - float(idx.x + idx.y) * k2);\n    \n    float2 h0 = hash(idx)*2.f - 1.f, h1 = hash(idx + int2(1,1))*2.-1., hp, hm;\n    float2 x0,y0,xy1, m,p;\n    \n    float r = 0.5;\n    float hr = r*0.5;\n    \n    xy1.y = sin(h1.x* 54531.43758f + t)*hr + hr;\n    xy1.x = r - xy1.y;   \n    if(suv.x > suv.y)\n    {\n        hm = hash(idx + int2(-1,0))*2.f-1.f;\n        hp = hash(idx + int2(1,0))*2.f-1.f;\n       \n        m.y = sin(hm.x* 54531.43758f + t)*hr + hr;\n        m.x = r - m.y;\n        p.y = sin(hp.x* 54531.43758f + t)*hr + hr;\n        p.x = r - p.y;\n        \n        m = (1.f - m.x - m.y)*int2(0,-1) + m.x*int2(1,0) + m.y*int2(0,0);\n        p = (1.f - p.x - p.y)*int2(1,0) + p.x*int2(2,1) + p.y*int2(1,1);\n        xy1 = (1.f - xy1.x - xy1.y)*int2(1,1) + xy1.x*int2(2,1) + xy1.y*int2(2,2);\n    }\n    else\n    {\n        hm = hash(idx + int2(0,-1))*2.f-1.f;\n        hp = hash(idx + int2(0,1))*2.f-1.f;\n         \n        m.y = sin(hm.x* 54531.43758f + t)*hr + hr;\n        m.x = r - m.y;\n        p.y = sin(hp.x* 54531.43758f + t)*hr + hr;\n        p.x = r - p.y;\n        \n        m = (1.f - m.x - m.y)*int2(-1,0) + m.x*int2(0,0) + m.y*int2(0,1);\n        p = (1.f - p.x - p.y)*int2(0,1) + p.x*int2(1,1) + p.y*int2(1,2);\n        xy1 = (1.f - xy1.x - xy1.y)*int2(1,1) + xy1.x*int2(2,2) + xy1.y*int2(1,2);\n    }\n    \n    x0.y = sin(h0.x* 54531.43758f + t)*hr + hr;\n    x0.x = r - x0.y;    \n    y0.y = sin(h0.x* 54531.43758f + t)*hr + hr;\n    y0.x = r - y0.y;\n\n    x0 = (1.f - x0.x - x0.y)*int2(0,0) + x0.x*int2(1,0) + x0.y*int2(1,1);\n    y0 = (1.f - y0.x - y0.y)*int2(0,0) + y0.x*int2(1,1) + y0.y*int2(0,1);\n\n    x0 -= (x0.x+x0.y)*k2;\n    y0 -= (y0.x+y0.y)*k2;\n    xy1 -= (xy1.x+xy1.y)*k2;\n    m -= (m.x+m.y)*k2;\n    p -= (p.x+p.y)*k2;\n    \n    float dist = min(length(suv - x0),length(suv - y0));    \n    dist = min(dist,  length(suv - xy1));\n    dist = min(dist, min(length(suv - m),length(suv - p)));\n    \n    return smoothstep(0.f, 1.f, dist)+smoothstep(0.04f,0.03f,dist)+ float(suv.x > suv.y&&iMouse.z>0.)*0.1 ;\n}\n\nfloat voronoi(float2 uv, float m)\n{\n    int2 idx = floor(uv);\n    float2 p = frac(uv);    \n    float dist = FloatMax;\n    \n    for (int y = -1; y <= 1; ++y)\n    {\n        for (int x = -1; x <= 1; ++x)\n        {\n            float2 off = sin((hash(idx + int2(x, y)) * 2.f - 1.f) * 48758.5453123f + m) * 0.5+0.5 + float2(x, y);\n            dist = min(dist, length(p - off));\n        }\n    }\n    \n    return smoothstep(0.f, 1.5f, dist)+smoothstep(0.04f,0.03f,dist)+sin(idx.x+idx.y)*0.1 * float(iMouse.z>0.);\n}\n\n\nfloat simplexVoronoi(float2 uv, float m)\n{\n    const float k1 = 0.366025f;\n    const float k2 = 0.211324f;\n\n    int2 idx = floor(uv + (uv.x + uv.y) * k1);\n    float2 a = uv - (float2(idx) - float(idx.x + idx.y) * k2);\n    int2 tb = a.y > a.x ? int2(0, 1) : int2(1, 0);\n    \n    float g = 0.13f;\n    float2 offA = sin((hash(idx) * 2.f - 1.f) * 123425.55981f + m) * g+g;\n    offA -= (offA.x+offA.y)*k2;\n    float2 offB = sin((hash(idx + tb) * 2.f - 1.f) * 123425.55981f + m) * g+g + tb;\n    offB -= (offB.x+offB.y)*k2;\n    float2 offC = sin((hash(idx + 1.) * 2.f - 1.f) * 123425.55981f + m) * g+g + 1.f;\n    offC -= (offC.x+offC.y)*k2;\n    \n    float dist = min(length(a-offA), min(length(a- offB), length(a- offC)));\n    \n    return smoothstep(0.f, 1.f, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*10.;    \n    //if((fragCoord/iResolution.xy).x >0.5f)\n        fragColor = vec4(vec3(simplexVoronoi(uv,iTime)),1.f);\n    //else        \n       //fragColor = vec4(vec3(voronoi(uv,iTime)),1.f);\n      \n}","name":"Image","description":"","type":"image"}]}